
project_L0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c8e4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c68  0800c9a4  0800c9a4  0001c9a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d60c  0800d60c  000200e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800d60c  0800d60c  000200e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d60c  0800d60c  000200e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d60c  0800d60c  0001d60c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d610  0800d610  0001d610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e8  20000000  0800d614  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e0  200000e8  0800d6fc  000200e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006c8  0800d6fc  000206c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d80d  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003876  00000000  00000000  0003d91d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015a0  00000000  00000000  00041198  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013d0  00000000  00000000  00042738  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018bea  00000000  00000000  00043b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013742  00000000  00000000  0005c6f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008f754  00000000  00000000  0006fe34  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ff588  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052b0  00000000  00000000  000ff604  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000e8 	.word	0x200000e8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800c98c 	.word	0x0800c98c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000ec 	.word	0x200000ec
 8000104:	0800c98c 	.word	0x0800c98c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cfrcmple>:
 8000404:	4684      	mov	ip, r0
 8000406:	1c08      	adds	r0, r1, #0
 8000408:	4661      	mov	r1, ip
 800040a:	e7ff      	b.n	800040c <__aeabi_cfcmpeq>

0800040c <__aeabi_cfcmpeq>:
 800040c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800040e:	f000 f9d3 	bl	80007b8 <__lesf2>
 8000412:	2800      	cmp	r0, #0
 8000414:	d401      	bmi.n	800041a <__aeabi_cfcmpeq+0xe>
 8000416:	2100      	movs	r1, #0
 8000418:	42c8      	cmn	r0, r1
 800041a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800041c <__aeabi_fcmpeq>:
 800041c:	b510      	push	{r4, lr}
 800041e:	f000 f955 	bl	80006cc <__eqsf2>
 8000422:	4240      	negs	r0, r0
 8000424:	3001      	adds	r0, #1
 8000426:	bd10      	pop	{r4, pc}

08000428 <__aeabi_fcmplt>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 f9c5 	bl	80007b8 <__lesf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	db01      	blt.n	8000436 <__aeabi_fcmplt+0xe>
 8000432:	2000      	movs	r0, #0
 8000434:	bd10      	pop	{r4, pc}
 8000436:	2001      	movs	r0, #1
 8000438:	bd10      	pop	{r4, pc}
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_fcmple>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f000 f9bb 	bl	80007b8 <__lesf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	dd01      	ble.n	800044a <__aeabi_fcmple+0xe>
 8000446:	2000      	movs	r0, #0
 8000448:	bd10      	pop	{r4, pc}
 800044a:	2001      	movs	r0, #1
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_fcmpgt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 f963 	bl	800071c <__gesf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	dc01      	bgt.n	800045e <__aeabi_fcmpgt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_fcmpge>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f000 f959 	bl	800071c <__gesf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	da01      	bge.n	8000472 <__aeabi_fcmpge+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_f2uiz>:
 8000478:	219e      	movs	r1, #158	; 0x9e
 800047a:	b510      	push	{r4, lr}
 800047c:	05c9      	lsls	r1, r1, #23
 800047e:	1c04      	adds	r4, r0, #0
 8000480:	f7ff fff0 	bl	8000464 <__aeabi_fcmpge>
 8000484:	2800      	cmp	r0, #0
 8000486:	d103      	bne.n	8000490 <__aeabi_f2uiz+0x18>
 8000488:	1c20      	adds	r0, r4, #0
 800048a:	f000 fcdb 	bl	8000e44 <__aeabi_f2iz>
 800048e:	bd10      	pop	{r4, pc}
 8000490:	219e      	movs	r1, #158	; 0x9e
 8000492:	1c20      	adds	r0, r4, #0
 8000494:	05c9      	lsls	r1, r1, #23
 8000496:	f000 fb11 	bl	8000abc <__aeabi_fsub>
 800049a:	f000 fcd3 	bl	8000e44 <__aeabi_f2iz>
 800049e:	2380      	movs	r3, #128	; 0x80
 80004a0:	061b      	lsls	r3, r3, #24
 80004a2:	469c      	mov	ip, r3
 80004a4:	4460      	add	r0, ip
 80004a6:	e7f2      	b.n	800048e <__aeabi_f2uiz+0x16>

080004a8 <__aeabi_fdiv>:
 80004a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004aa:	4657      	mov	r7, sl
 80004ac:	464e      	mov	r6, r9
 80004ae:	4645      	mov	r5, r8
 80004b0:	46de      	mov	lr, fp
 80004b2:	0244      	lsls	r4, r0, #9
 80004b4:	b5e0      	push	{r5, r6, r7, lr}
 80004b6:	0046      	lsls	r6, r0, #1
 80004b8:	4688      	mov	r8, r1
 80004ba:	0a64      	lsrs	r4, r4, #9
 80004bc:	0e36      	lsrs	r6, r6, #24
 80004be:	0fc7      	lsrs	r7, r0, #31
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d063      	beq.n	800058c <__aeabi_fdiv+0xe4>
 80004c4:	2eff      	cmp	r6, #255	; 0xff
 80004c6:	d024      	beq.n	8000512 <__aeabi_fdiv+0x6a>
 80004c8:	2380      	movs	r3, #128	; 0x80
 80004ca:	00e4      	lsls	r4, r4, #3
 80004cc:	04db      	lsls	r3, r3, #19
 80004ce:	431c      	orrs	r4, r3
 80004d0:	2300      	movs	r3, #0
 80004d2:	4699      	mov	r9, r3
 80004d4:	469b      	mov	fp, r3
 80004d6:	3e7f      	subs	r6, #127	; 0x7f
 80004d8:	4643      	mov	r3, r8
 80004da:	4642      	mov	r2, r8
 80004dc:	025d      	lsls	r5, r3, #9
 80004de:	0fd2      	lsrs	r2, r2, #31
 80004e0:	005b      	lsls	r3, r3, #1
 80004e2:	0a6d      	lsrs	r5, r5, #9
 80004e4:	0e1b      	lsrs	r3, r3, #24
 80004e6:	4690      	mov	r8, r2
 80004e8:	4692      	mov	sl, r2
 80004ea:	d065      	beq.n	80005b8 <__aeabi_fdiv+0x110>
 80004ec:	2bff      	cmp	r3, #255	; 0xff
 80004ee:	d055      	beq.n	800059c <__aeabi_fdiv+0xf4>
 80004f0:	2280      	movs	r2, #128	; 0x80
 80004f2:	2100      	movs	r1, #0
 80004f4:	00ed      	lsls	r5, r5, #3
 80004f6:	04d2      	lsls	r2, r2, #19
 80004f8:	3b7f      	subs	r3, #127	; 0x7f
 80004fa:	4315      	orrs	r5, r2
 80004fc:	1af6      	subs	r6, r6, r3
 80004fe:	4643      	mov	r3, r8
 8000500:	464a      	mov	r2, r9
 8000502:	407b      	eors	r3, r7
 8000504:	2a0f      	cmp	r2, #15
 8000506:	d900      	bls.n	800050a <__aeabi_fdiv+0x62>
 8000508:	e08d      	b.n	8000626 <__aeabi_fdiv+0x17e>
 800050a:	486d      	ldr	r0, [pc, #436]	; (80006c0 <__aeabi_fdiv+0x218>)
 800050c:	0092      	lsls	r2, r2, #2
 800050e:	5882      	ldr	r2, [r0, r2]
 8000510:	4697      	mov	pc, r2
 8000512:	2c00      	cmp	r4, #0
 8000514:	d154      	bne.n	80005c0 <__aeabi_fdiv+0x118>
 8000516:	2308      	movs	r3, #8
 8000518:	4699      	mov	r9, r3
 800051a:	3b06      	subs	r3, #6
 800051c:	26ff      	movs	r6, #255	; 0xff
 800051e:	469b      	mov	fp, r3
 8000520:	e7da      	b.n	80004d8 <__aeabi_fdiv+0x30>
 8000522:	2500      	movs	r5, #0
 8000524:	4653      	mov	r3, sl
 8000526:	2902      	cmp	r1, #2
 8000528:	d01b      	beq.n	8000562 <__aeabi_fdiv+0xba>
 800052a:	2903      	cmp	r1, #3
 800052c:	d100      	bne.n	8000530 <__aeabi_fdiv+0x88>
 800052e:	e0bf      	b.n	80006b0 <__aeabi_fdiv+0x208>
 8000530:	2901      	cmp	r1, #1
 8000532:	d028      	beq.n	8000586 <__aeabi_fdiv+0xde>
 8000534:	0030      	movs	r0, r6
 8000536:	307f      	adds	r0, #127	; 0x7f
 8000538:	2800      	cmp	r0, #0
 800053a:	dd20      	ble.n	800057e <__aeabi_fdiv+0xd6>
 800053c:	076a      	lsls	r2, r5, #29
 800053e:	d004      	beq.n	800054a <__aeabi_fdiv+0xa2>
 8000540:	220f      	movs	r2, #15
 8000542:	402a      	ands	r2, r5
 8000544:	2a04      	cmp	r2, #4
 8000546:	d000      	beq.n	800054a <__aeabi_fdiv+0xa2>
 8000548:	3504      	adds	r5, #4
 800054a:	012a      	lsls	r2, r5, #4
 800054c:	d503      	bpl.n	8000556 <__aeabi_fdiv+0xae>
 800054e:	0030      	movs	r0, r6
 8000550:	4a5c      	ldr	r2, [pc, #368]	; (80006c4 <__aeabi_fdiv+0x21c>)
 8000552:	3080      	adds	r0, #128	; 0x80
 8000554:	4015      	ands	r5, r2
 8000556:	28fe      	cmp	r0, #254	; 0xfe
 8000558:	dc03      	bgt.n	8000562 <__aeabi_fdiv+0xba>
 800055a:	01ac      	lsls	r4, r5, #6
 800055c:	0a64      	lsrs	r4, r4, #9
 800055e:	b2c2      	uxtb	r2, r0
 8000560:	e001      	b.n	8000566 <__aeabi_fdiv+0xbe>
 8000562:	22ff      	movs	r2, #255	; 0xff
 8000564:	2400      	movs	r4, #0
 8000566:	0264      	lsls	r4, r4, #9
 8000568:	05d2      	lsls	r2, r2, #23
 800056a:	0a60      	lsrs	r0, r4, #9
 800056c:	07db      	lsls	r3, r3, #31
 800056e:	4310      	orrs	r0, r2
 8000570:	4318      	orrs	r0, r3
 8000572:	bc3c      	pop	{r2, r3, r4, r5}
 8000574:	4690      	mov	r8, r2
 8000576:	4699      	mov	r9, r3
 8000578:	46a2      	mov	sl, r4
 800057a:	46ab      	mov	fp, r5
 800057c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800057e:	2201      	movs	r2, #1
 8000580:	1a10      	subs	r0, r2, r0
 8000582:	281b      	cmp	r0, #27
 8000584:	dd7c      	ble.n	8000680 <__aeabi_fdiv+0x1d8>
 8000586:	2200      	movs	r2, #0
 8000588:	2400      	movs	r4, #0
 800058a:	e7ec      	b.n	8000566 <__aeabi_fdiv+0xbe>
 800058c:	2c00      	cmp	r4, #0
 800058e:	d11d      	bne.n	80005cc <__aeabi_fdiv+0x124>
 8000590:	2304      	movs	r3, #4
 8000592:	4699      	mov	r9, r3
 8000594:	3b03      	subs	r3, #3
 8000596:	2600      	movs	r6, #0
 8000598:	469b      	mov	fp, r3
 800059a:	e79d      	b.n	80004d8 <__aeabi_fdiv+0x30>
 800059c:	3eff      	subs	r6, #255	; 0xff
 800059e:	2d00      	cmp	r5, #0
 80005a0:	d120      	bne.n	80005e4 <__aeabi_fdiv+0x13c>
 80005a2:	2102      	movs	r1, #2
 80005a4:	4643      	mov	r3, r8
 80005a6:	464a      	mov	r2, r9
 80005a8:	407b      	eors	r3, r7
 80005aa:	430a      	orrs	r2, r1
 80005ac:	2a0f      	cmp	r2, #15
 80005ae:	d8d8      	bhi.n	8000562 <__aeabi_fdiv+0xba>
 80005b0:	4845      	ldr	r0, [pc, #276]	; (80006c8 <__aeabi_fdiv+0x220>)
 80005b2:	0092      	lsls	r2, r2, #2
 80005b4:	5882      	ldr	r2, [r0, r2]
 80005b6:	4697      	mov	pc, r2
 80005b8:	2d00      	cmp	r5, #0
 80005ba:	d119      	bne.n	80005f0 <__aeabi_fdiv+0x148>
 80005bc:	2101      	movs	r1, #1
 80005be:	e7f1      	b.n	80005a4 <__aeabi_fdiv+0xfc>
 80005c0:	230c      	movs	r3, #12
 80005c2:	4699      	mov	r9, r3
 80005c4:	3b09      	subs	r3, #9
 80005c6:	26ff      	movs	r6, #255	; 0xff
 80005c8:	469b      	mov	fp, r3
 80005ca:	e785      	b.n	80004d8 <__aeabi_fdiv+0x30>
 80005cc:	0020      	movs	r0, r4
 80005ce:	f001 fafd 	bl	8001bcc <__clzsi2>
 80005d2:	2676      	movs	r6, #118	; 0x76
 80005d4:	1f43      	subs	r3, r0, #5
 80005d6:	409c      	lsls	r4, r3
 80005d8:	2300      	movs	r3, #0
 80005da:	4276      	negs	r6, r6
 80005dc:	1a36      	subs	r6, r6, r0
 80005de:	4699      	mov	r9, r3
 80005e0:	469b      	mov	fp, r3
 80005e2:	e779      	b.n	80004d8 <__aeabi_fdiv+0x30>
 80005e4:	464a      	mov	r2, r9
 80005e6:	2303      	movs	r3, #3
 80005e8:	431a      	orrs	r2, r3
 80005ea:	4691      	mov	r9, r2
 80005ec:	2103      	movs	r1, #3
 80005ee:	e786      	b.n	80004fe <__aeabi_fdiv+0x56>
 80005f0:	0028      	movs	r0, r5
 80005f2:	f001 faeb 	bl	8001bcc <__clzsi2>
 80005f6:	1f43      	subs	r3, r0, #5
 80005f8:	1836      	adds	r6, r6, r0
 80005fa:	409d      	lsls	r5, r3
 80005fc:	3676      	adds	r6, #118	; 0x76
 80005fe:	2100      	movs	r1, #0
 8000600:	e77d      	b.n	80004fe <__aeabi_fdiv+0x56>
 8000602:	2480      	movs	r4, #128	; 0x80
 8000604:	2300      	movs	r3, #0
 8000606:	03e4      	lsls	r4, r4, #15
 8000608:	22ff      	movs	r2, #255	; 0xff
 800060a:	e7ac      	b.n	8000566 <__aeabi_fdiv+0xbe>
 800060c:	2500      	movs	r5, #0
 800060e:	2380      	movs	r3, #128	; 0x80
 8000610:	03db      	lsls	r3, r3, #15
 8000612:	421c      	tst	r4, r3
 8000614:	d028      	beq.n	8000668 <__aeabi_fdiv+0x1c0>
 8000616:	421d      	tst	r5, r3
 8000618:	d126      	bne.n	8000668 <__aeabi_fdiv+0x1c0>
 800061a:	432b      	orrs	r3, r5
 800061c:	025c      	lsls	r4, r3, #9
 800061e:	0a64      	lsrs	r4, r4, #9
 8000620:	4643      	mov	r3, r8
 8000622:	22ff      	movs	r2, #255	; 0xff
 8000624:	e79f      	b.n	8000566 <__aeabi_fdiv+0xbe>
 8000626:	0162      	lsls	r2, r4, #5
 8000628:	016c      	lsls	r4, r5, #5
 800062a:	42a2      	cmp	r2, r4
 800062c:	d224      	bcs.n	8000678 <__aeabi_fdiv+0x1d0>
 800062e:	211b      	movs	r1, #27
 8000630:	2500      	movs	r5, #0
 8000632:	3e01      	subs	r6, #1
 8000634:	2701      	movs	r7, #1
 8000636:	0010      	movs	r0, r2
 8000638:	006d      	lsls	r5, r5, #1
 800063a:	0052      	lsls	r2, r2, #1
 800063c:	2800      	cmp	r0, #0
 800063e:	db01      	blt.n	8000644 <__aeabi_fdiv+0x19c>
 8000640:	4294      	cmp	r4, r2
 8000642:	d801      	bhi.n	8000648 <__aeabi_fdiv+0x1a0>
 8000644:	1b12      	subs	r2, r2, r4
 8000646:	433d      	orrs	r5, r7
 8000648:	3901      	subs	r1, #1
 800064a:	2900      	cmp	r1, #0
 800064c:	d1f3      	bne.n	8000636 <__aeabi_fdiv+0x18e>
 800064e:	0014      	movs	r4, r2
 8000650:	1e62      	subs	r2, r4, #1
 8000652:	4194      	sbcs	r4, r2
 8000654:	4325      	orrs	r5, r4
 8000656:	e76d      	b.n	8000534 <__aeabi_fdiv+0x8c>
 8000658:	46ba      	mov	sl, r7
 800065a:	4659      	mov	r1, fp
 800065c:	0025      	movs	r5, r4
 800065e:	4653      	mov	r3, sl
 8000660:	2902      	cmp	r1, #2
 8000662:	d000      	beq.n	8000666 <__aeabi_fdiv+0x1be>
 8000664:	e761      	b.n	800052a <__aeabi_fdiv+0x82>
 8000666:	e77c      	b.n	8000562 <__aeabi_fdiv+0xba>
 8000668:	2380      	movs	r3, #128	; 0x80
 800066a:	03db      	lsls	r3, r3, #15
 800066c:	431c      	orrs	r4, r3
 800066e:	0264      	lsls	r4, r4, #9
 8000670:	0a64      	lsrs	r4, r4, #9
 8000672:	003b      	movs	r3, r7
 8000674:	22ff      	movs	r2, #255	; 0xff
 8000676:	e776      	b.n	8000566 <__aeabi_fdiv+0xbe>
 8000678:	1b12      	subs	r2, r2, r4
 800067a:	211a      	movs	r1, #26
 800067c:	2501      	movs	r5, #1
 800067e:	e7d9      	b.n	8000634 <__aeabi_fdiv+0x18c>
 8000680:	369e      	adds	r6, #158	; 0x9e
 8000682:	002a      	movs	r2, r5
 8000684:	40b5      	lsls	r5, r6
 8000686:	002c      	movs	r4, r5
 8000688:	40c2      	lsrs	r2, r0
 800068a:	1e65      	subs	r5, r4, #1
 800068c:	41ac      	sbcs	r4, r5
 800068e:	4314      	orrs	r4, r2
 8000690:	0762      	lsls	r2, r4, #29
 8000692:	d004      	beq.n	800069e <__aeabi_fdiv+0x1f6>
 8000694:	220f      	movs	r2, #15
 8000696:	4022      	ands	r2, r4
 8000698:	2a04      	cmp	r2, #4
 800069a:	d000      	beq.n	800069e <__aeabi_fdiv+0x1f6>
 800069c:	3404      	adds	r4, #4
 800069e:	0162      	lsls	r2, r4, #5
 80006a0:	d403      	bmi.n	80006aa <__aeabi_fdiv+0x202>
 80006a2:	01a4      	lsls	r4, r4, #6
 80006a4:	0a64      	lsrs	r4, r4, #9
 80006a6:	2200      	movs	r2, #0
 80006a8:	e75d      	b.n	8000566 <__aeabi_fdiv+0xbe>
 80006aa:	2201      	movs	r2, #1
 80006ac:	2400      	movs	r4, #0
 80006ae:	e75a      	b.n	8000566 <__aeabi_fdiv+0xbe>
 80006b0:	2480      	movs	r4, #128	; 0x80
 80006b2:	03e4      	lsls	r4, r4, #15
 80006b4:	432c      	orrs	r4, r5
 80006b6:	0264      	lsls	r4, r4, #9
 80006b8:	0a64      	lsrs	r4, r4, #9
 80006ba:	22ff      	movs	r2, #255	; 0xff
 80006bc:	e753      	b.n	8000566 <__aeabi_fdiv+0xbe>
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	0800cc24 	.word	0x0800cc24
 80006c4:	f7ffffff 	.word	0xf7ffffff
 80006c8:	0800cc64 	.word	0x0800cc64

080006cc <__eqsf2>:
 80006cc:	b570      	push	{r4, r5, r6, lr}
 80006ce:	0042      	lsls	r2, r0, #1
 80006d0:	024e      	lsls	r6, r1, #9
 80006d2:	004c      	lsls	r4, r1, #1
 80006d4:	0245      	lsls	r5, r0, #9
 80006d6:	0a6d      	lsrs	r5, r5, #9
 80006d8:	0e12      	lsrs	r2, r2, #24
 80006da:	0fc3      	lsrs	r3, r0, #31
 80006dc:	0a76      	lsrs	r6, r6, #9
 80006de:	0e24      	lsrs	r4, r4, #24
 80006e0:	0fc9      	lsrs	r1, r1, #31
 80006e2:	2aff      	cmp	r2, #255	; 0xff
 80006e4:	d00f      	beq.n	8000706 <__eqsf2+0x3a>
 80006e6:	2cff      	cmp	r4, #255	; 0xff
 80006e8:	d011      	beq.n	800070e <__eqsf2+0x42>
 80006ea:	2001      	movs	r0, #1
 80006ec:	42a2      	cmp	r2, r4
 80006ee:	d000      	beq.n	80006f2 <__eqsf2+0x26>
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	42b5      	cmp	r5, r6
 80006f4:	d1fc      	bne.n	80006f0 <__eqsf2+0x24>
 80006f6:	428b      	cmp	r3, r1
 80006f8:	d00d      	beq.n	8000716 <__eqsf2+0x4a>
 80006fa:	2a00      	cmp	r2, #0
 80006fc:	d1f8      	bne.n	80006f0 <__eqsf2+0x24>
 80006fe:	0028      	movs	r0, r5
 8000700:	1e45      	subs	r5, r0, #1
 8000702:	41a8      	sbcs	r0, r5
 8000704:	e7f4      	b.n	80006f0 <__eqsf2+0x24>
 8000706:	2001      	movs	r0, #1
 8000708:	2d00      	cmp	r5, #0
 800070a:	d1f1      	bne.n	80006f0 <__eqsf2+0x24>
 800070c:	e7eb      	b.n	80006e6 <__eqsf2+0x1a>
 800070e:	2001      	movs	r0, #1
 8000710:	2e00      	cmp	r6, #0
 8000712:	d1ed      	bne.n	80006f0 <__eqsf2+0x24>
 8000714:	e7e9      	b.n	80006ea <__eqsf2+0x1e>
 8000716:	2000      	movs	r0, #0
 8000718:	e7ea      	b.n	80006f0 <__eqsf2+0x24>
 800071a:	46c0      	nop			; (mov r8, r8)

0800071c <__gesf2>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	004a      	lsls	r2, r1, #1
 8000720:	024e      	lsls	r6, r1, #9
 8000722:	0245      	lsls	r5, r0, #9
 8000724:	0044      	lsls	r4, r0, #1
 8000726:	0a6d      	lsrs	r5, r5, #9
 8000728:	0e24      	lsrs	r4, r4, #24
 800072a:	0fc3      	lsrs	r3, r0, #31
 800072c:	0a76      	lsrs	r6, r6, #9
 800072e:	0e12      	lsrs	r2, r2, #24
 8000730:	0fc9      	lsrs	r1, r1, #31
 8000732:	2cff      	cmp	r4, #255	; 0xff
 8000734:	d015      	beq.n	8000762 <__gesf2+0x46>
 8000736:	2aff      	cmp	r2, #255	; 0xff
 8000738:	d00e      	beq.n	8000758 <__gesf2+0x3c>
 800073a:	2c00      	cmp	r4, #0
 800073c:	d115      	bne.n	800076a <__gesf2+0x4e>
 800073e:	2a00      	cmp	r2, #0
 8000740:	d101      	bne.n	8000746 <__gesf2+0x2a>
 8000742:	2e00      	cmp	r6, #0
 8000744:	d01c      	beq.n	8000780 <__gesf2+0x64>
 8000746:	2d00      	cmp	r5, #0
 8000748:	d014      	beq.n	8000774 <__gesf2+0x58>
 800074a:	428b      	cmp	r3, r1
 800074c:	d027      	beq.n	800079e <__gesf2+0x82>
 800074e:	2002      	movs	r0, #2
 8000750:	3b01      	subs	r3, #1
 8000752:	4018      	ands	r0, r3
 8000754:	3801      	subs	r0, #1
 8000756:	bd70      	pop	{r4, r5, r6, pc}
 8000758:	2e00      	cmp	r6, #0
 800075a:	d0ee      	beq.n	800073a <__gesf2+0x1e>
 800075c:	2002      	movs	r0, #2
 800075e:	4240      	negs	r0, r0
 8000760:	e7f9      	b.n	8000756 <__gesf2+0x3a>
 8000762:	2d00      	cmp	r5, #0
 8000764:	d1fa      	bne.n	800075c <__gesf2+0x40>
 8000766:	2aff      	cmp	r2, #255	; 0xff
 8000768:	d00e      	beq.n	8000788 <__gesf2+0x6c>
 800076a:	2a00      	cmp	r2, #0
 800076c:	d10e      	bne.n	800078c <__gesf2+0x70>
 800076e:	2e00      	cmp	r6, #0
 8000770:	d0ed      	beq.n	800074e <__gesf2+0x32>
 8000772:	e00b      	b.n	800078c <__gesf2+0x70>
 8000774:	2301      	movs	r3, #1
 8000776:	3901      	subs	r1, #1
 8000778:	4399      	bics	r1, r3
 800077a:	0008      	movs	r0, r1
 800077c:	3001      	adds	r0, #1
 800077e:	e7ea      	b.n	8000756 <__gesf2+0x3a>
 8000780:	2000      	movs	r0, #0
 8000782:	2d00      	cmp	r5, #0
 8000784:	d0e7      	beq.n	8000756 <__gesf2+0x3a>
 8000786:	e7e2      	b.n	800074e <__gesf2+0x32>
 8000788:	2e00      	cmp	r6, #0
 800078a:	d1e7      	bne.n	800075c <__gesf2+0x40>
 800078c:	428b      	cmp	r3, r1
 800078e:	d1de      	bne.n	800074e <__gesf2+0x32>
 8000790:	4294      	cmp	r4, r2
 8000792:	dd05      	ble.n	80007a0 <__gesf2+0x84>
 8000794:	2102      	movs	r1, #2
 8000796:	1e58      	subs	r0, r3, #1
 8000798:	4008      	ands	r0, r1
 800079a:	3801      	subs	r0, #1
 800079c:	e7db      	b.n	8000756 <__gesf2+0x3a>
 800079e:	2400      	movs	r4, #0
 80007a0:	42a2      	cmp	r2, r4
 80007a2:	dc04      	bgt.n	80007ae <__gesf2+0x92>
 80007a4:	42b5      	cmp	r5, r6
 80007a6:	d8d2      	bhi.n	800074e <__gesf2+0x32>
 80007a8:	2000      	movs	r0, #0
 80007aa:	42b5      	cmp	r5, r6
 80007ac:	d2d3      	bcs.n	8000756 <__gesf2+0x3a>
 80007ae:	1e58      	subs	r0, r3, #1
 80007b0:	2301      	movs	r3, #1
 80007b2:	4398      	bics	r0, r3
 80007b4:	3001      	adds	r0, #1
 80007b6:	e7ce      	b.n	8000756 <__gesf2+0x3a>

080007b8 <__lesf2>:
 80007b8:	b530      	push	{r4, r5, lr}
 80007ba:	0042      	lsls	r2, r0, #1
 80007bc:	0244      	lsls	r4, r0, #9
 80007be:	024d      	lsls	r5, r1, #9
 80007c0:	0fc3      	lsrs	r3, r0, #31
 80007c2:	0048      	lsls	r0, r1, #1
 80007c4:	0a64      	lsrs	r4, r4, #9
 80007c6:	0e12      	lsrs	r2, r2, #24
 80007c8:	0a6d      	lsrs	r5, r5, #9
 80007ca:	0e00      	lsrs	r0, r0, #24
 80007cc:	0fc9      	lsrs	r1, r1, #31
 80007ce:	2aff      	cmp	r2, #255	; 0xff
 80007d0:	d012      	beq.n	80007f8 <__lesf2+0x40>
 80007d2:	28ff      	cmp	r0, #255	; 0xff
 80007d4:	d00c      	beq.n	80007f0 <__lesf2+0x38>
 80007d6:	2a00      	cmp	r2, #0
 80007d8:	d112      	bne.n	8000800 <__lesf2+0x48>
 80007da:	2800      	cmp	r0, #0
 80007dc:	d119      	bne.n	8000812 <__lesf2+0x5a>
 80007de:	2d00      	cmp	r5, #0
 80007e0:	d117      	bne.n	8000812 <__lesf2+0x5a>
 80007e2:	2c00      	cmp	r4, #0
 80007e4:	d02b      	beq.n	800083e <__lesf2+0x86>
 80007e6:	2002      	movs	r0, #2
 80007e8:	3b01      	subs	r3, #1
 80007ea:	4018      	ands	r0, r3
 80007ec:	3801      	subs	r0, #1
 80007ee:	e026      	b.n	800083e <__lesf2+0x86>
 80007f0:	2d00      	cmp	r5, #0
 80007f2:	d0f0      	beq.n	80007d6 <__lesf2+0x1e>
 80007f4:	2002      	movs	r0, #2
 80007f6:	e022      	b.n	800083e <__lesf2+0x86>
 80007f8:	2c00      	cmp	r4, #0
 80007fa:	d1fb      	bne.n	80007f4 <__lesf2+0x3c>
 80007fc:	28ff      	cmp	r0, #255	; 0xff
 80007fe:	d01f      	beq.n	8000840 <__lesf2+0x88>
 8000800:	2800      	cmp	r0, #0
 8000802:	d11f      	bne.n	8000844 <__lesf2+0x8c>
 8000804:	2d00      	cmp	r5, #0
 8000806:	d11d      	bne.n	8000844 <__lesf2+0x8c>
 8000808:	2002      	movs	r0, #2
 800080a:	3b01      	subs	r3, #1
 800080c:	4018      	ands	r0, r3
 800080e:	3801      	subs	r0, #1
 8000810:	e015      	b.n	800083e <__lesf2+0x86>
 8000812:	2c00      	cmp	r4, #0
 8000814:	d00e      	beq.n	8000834 <__lesf2+0x7c>
 8000816:	428b      	cmp	r3, r1
 8000818:	d1e5      	bne.n	80007e6 <__lesf2+0x2e>
 800081a:	2200      	movs	r2, #0
 800081c:	4290      	cmp	r0, r2
 800081e:	dc04      	bgt.n	800082a <__lesf2+0x72>
 8000820:	42ac      	cmp	r4, r5
 8000822:	d8e0      	bhi.n	80007e6 <__lesf2+0x2e>
 8000824:	2000      	movs	r0, #0
 8000826:	42ac      	cmp	r4, r5
 8000828:	d209      	bcs.n	800083e <__lesf2+0x86>
 800082a:	1e58      	subs	r0, r3, #1
 800082c:	2301      	movs	r3, #1
 800082e:	4398      	bics	r0, r3
 8000830:	3001      	adds	r0, #1
 8000832:	e004      	b.n	800083e <__lesf2+0x86>
 8000834:	2301      	movs	r3, #1
 8000836:	3901      	subs	r1, #1
 8000838:	4399      	bics	r1, r3
 800083a:	0008      	movs	r0, r1
 800083c:	3001      	adds	r0, #1
 800083e:	bd30      	pop	{r4, r5, pc}
 8000840:	2d00      	cmp	r5, #0
 8000842:	d1d7      	bne.n	80007f4 <__lesf2+0x3c>
 8000844:	428b      	cmp	r3, r1
 8000846:	d1ce      	bne.n	80007e6 <__lesf2+0x2e>
 8000848:	4282      	cmp	r2, r0
 800084a:	dde7      	ble.n	800081c <__lesf2+0x64>
 800084c:	2102      	movs	r1, #2
 800084e:	1e58      	subs	r0, r3, #1
 8000850:	4008      	ands	r0, r1
 8000852:	3801      	subs	r0, #1
 8000854:	e7f3      	b.n	800083e <__lesf2+0x86>
 8000856:	46c0      	nop			; (mov r8, r8)

08000858 <__aeabi_fmul>:
 8000858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800085a:	464e      	mov	r6, r9
 800085c:	4657      	mov	r7, sl
 800085e:	4645      	mov	r5, r8
 8000860:	46de      	mov	lr, fp
 8000862:	b5e0      	push	{r5, r6, r7, lr}
 8000864:	0243      	lsls	r3, r0, #9
 8000866:	0a5b      	lsrs	r3, r3, #9
 8000868:	0045      	lsls	r5, r0, #1
 800086a:	b083      	sub	sp, #12
 800086c:	1c0f      	adds	r7, r1, #0
 800086e:	4699      	mov	r9, r3
 8000870:	0e2d      	lsrs	r5, r5, #24
 8000872:	0fc6      	lsrs	r6, r0, #31
 8000874:	2d00      	cmp	r5, #0
 8000876:	d057      	beq.n	8000928 <__aeabi_fmul+0xd0>
 8000878:	2dff      	cmp	r5, #255	; 0xff
 800087a:	d024      	beq.n	80008c6 <__aeabi_fmul+0x6e>
 800087c:	2080      	movs	r0, #128	; 0x80
 800087e:	00db      	lsls	r3, r3, #3
 8000880:	04c0      	lsls	r0, r0, #19
 8000882:	4318      	orrs	r0, r3
 8000884:	2300      	movs	r3, #0
 8000886:	4681      	mov	r9, r0
 8000888:	469a      	mov	sl, r3
 800088a:	469b      	mov	fp, r3
 800088c:	3d7f      	subs	r5, #127	; 0x7f
 800088e:	027c      	lsls	r4, r7, #9
 8000890:	007a      	lsls	r2, r7, #1
 8000892:	0ffb      	lsrs	r3, r7, #31
 8000894:	0a64      	lsrs	r4, r4, #9
 8000896:	0e12      	lsrs	r2, r2, #24
 8000898:	4698      	mov	r8, r3
 800089a:	d023      	beq.n	80008e4 <__aeabi_fmul+0x8c>
 800089c:	2aff      	cmp	r2, #255	; 0xff
 800089e:	d04b      	beq.n	8000938 <__aeabi_fmul+0xe0>
 80008a0:	00e3      	lsls	r3, r4, #3
 80008a2:	2480      	movs	r4, #128	; 0x80
 80008a4:	2000      	movs	r0, #0
 80008a6:	04e4      	lsls	r4, r4, #19
 80008a8:	3a7f      	subs	r2, #127	; 0x7f
 80008aa:	431c      	orrs	r4, r3
 80008ac:	18ad      	adds	r5, r5, r2
 80008ae:	1c6b      	adds	r3, r5, #1
 80008b0:	4647      	mov	r7, r8
 80008b2:	9301      	str	r3, [sp, #4]
 80008b4:	4653      	mov	r3, sl
 80008b6:	4077      	eors	r7, r6
 80008b8:	003a      	movs	r2, r7
 80008ba:	2b0f      	cmp	r3, #15
 80008bc:	d848      	bhi.n	8000950 <__aeabi_fmul+0xf8>
 80008be:	497d      	ldr	r1, [pc, #500]	; (8000ab4 <__aeabi_fmul+0x25c>)
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	58cb      	ldr	r3, [r1, r3]
 80008c4:	469f      	mov	pc, r3
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d000      	beq.n	80008cc <__aeabi_fmul+0x74>
 80008ca:	e085      	b.n	80009d8 <__aeabi_fmul+0x180>
 80008cc:	3308      	adds	r3, #8
 80008ce:	469a      	mov	sl, r3
 80008d0:	3b06      	subs	r3, #6
 80008d2:	469b      	mov	fp, r3
 80008d4:	027c      	lsls	r4, r7, #9
 80008d6:	007a      	lsls	r2, r7, #1
 80008d8:	0ffb      	lsrs	r3, r7, #31
 80008da:	25ff      	movs	r5, #255	; 0xff
 80008dc:	0a64      	lsrs	r4, r4, #9
 80008de:	0e12      	lsrs	r2, r2, #24
 80008e0:	4698      	mov	r8, r3
 80008e2:	d1db      	bne.n	800089c <__aeabi_fmul+0x44>
 80008e4:	2c00      	cmp	r4, #0
 80008e6:	d000      	beq.n	80008ea <__aeabi_fmul+0x92>
 80008e8:	e090      	b.n	8000a0c <__aeabi_fmul+0x1b4>
 80008ea:	4652      	mov	r2, sl
 80008ec:	2301      	movs	r3, #1
 80008ee:	431a      	orrs	r2, r3
 80008f0:	4692      	mov	sl, r2
 80008f2:	2001      	movs	r0, #1
 80008f4:	e7db      	b.n	80008ae <__aeabi_fmul+0x56>
 80008f6:	464c      	mov	r4, r9
 80008f8:	4658      	mov	r0, fp
 80008fa:	0017      	movs	r7, r2
 80008fc:	2802      	cmp	r0, #2
 80008fe:	d024      	beq.n	800094a <__aeabi_fmul+0xf2>
 8000900:	2803      	cmp	r0, #3
 8000902:	d100      	bne.n	8000906 <__aeabi_fmul+0xae>
 8000904:	e0cf      	b.n	8000aa6 <__aeabi_fmul+0x24e>
 8000906:	2200      	movs	r2, #0
 8000908:	2300      	movs	r3, #0
 800090a:	2801      	cmp	r0, #1
 800090c:	d14d      	bne.n	80009aa <__aeabi_fmul+0x152>
 800090e:	0258      	lsls	r0, r3, #9
 8000910:	05d2      	lsls	r2, r2, #23
 8000912:	0a40      	lsrs	r0, r0, #9
 8000914:	07ff      	lsls	r7, r7, #31
 8000916:	4310      	orrs	r0, r2
 8000918:	4338      	orrs	r0, r7
 800091a:	b003      	add	sp, #12
 800091c:	bc3c      	pop	{r2, r3, r4, r5}
 800091e:	4690      	mov	r8, r2
 8000920:	4699      	mov	r9, r3
 8000922:	46a2      	mov	sl, r4
 8000924:	46ab      	mov	fp, r5
 8000926:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000928:	2b00      	cmp	r3, #0
 800092a:	d15b      	bne.n	80009e4 <__aeabi_fmul+0x18c>
 800092c:	2304      	movs	r3, #4
 800092e:	469a      	mov	sl, r3
 8000930:	3b03      	subs	r3, #3
 8000932:	2500      	movs	r5, #0
 8000934:	469b      	mov	fp, r3
 8000936:	e7aa      	b.n	800088e <__aeabi_fmul+0x36>
 8000938:	35ff      	adds	r5, #255	; 0xff
 800093a:	2c00      	cmp	r4, #0
 800093c:	d160      	bne.n	8000a00 <__aeabi_fmul+0x1a8>
 800093e:	4652      	mov	r2, sl
 8000940:	2302      	movs	r3, #2
 8000942:	431a      	orrs	r2, r3
 8000944:	4692      	mov	sl, r2
 8000946:	2002      	movs	r0, #2
 8000948:	e7b1      	b.n	80008ae <__aeabi_fmul+0x56>
 800094a:	22ff      	movs	r2, #255	; 0xff
 800094c:	2300      	movs	r3, #0
 800094e:	e7de      	b.n	800090e <__aeabi_fmul+0xb6>
 8000950:	464b      	mov	r3, r9
 8000952:	0c1b      	lsrs	r3, r3, #16
 8000954:	469c      	mov	ip, r3
 8000956:	464b      	mov	r3, r9
 8000958:	0426      	lsls	r6, r4, #16
 800095a:	0c36      	lsrs	r6, r6, #16
 800095c:	0418      	lsls	r0, r3, #16
 800095e:	4661      	mov	r1, ip
 8000960:	0033      	movs	r3, r6
 8000962:	0c22      	lsrs	r2, r4, #16
 8000964:	4664      	mov	r4, ip
 8000966:	0c00      	lsrs	r0, r0, #16
 8000968:	4343      	muls	r3, r0
 800096a:	434e      	muls	r6, r1
 800096c:	4350      	muls	r0, r2
 800096e:	4354      	muls	r4, r2
 8000970:	1980      	adds	r0, r0, r6
 8000972:	0c1a      	lsrs	r2, r3, #16
 8000974:	1812      	adds	r2, r2, r0
 8000976:	4296      	cmp	r6, r2
 8000978:	d903      	bls.n	8000982 <__aeabi_fmul+0x12a>
 800097a:	2180      	movs	r1, #128	; 0x80
 800097c:	0249      	lsls	r1, r1, #9
 800097e:	468c      	mov	ip, r1
 8000980:	4464      	add	r4, ip
 8000982:	041b      	lsls	r3, r3, #16
 8000984:	0c1b      	lsrs	r3, r3, #16
 8000986:	0410      	lsls	r0, r2, #16
 8000988:	18c0      	adds	r0, r0, r3
 800098a:	0183      	lsls	r3, r0, #6
 800098c:	1e5e      	subs	r6, r3, #1
 800098e:	41b3      	sbcs	r3, r6
 8000990:	0e80      	lsrs	r0, r0, #26
 8000992:	4318      	orrs	r0, r3
 8000994:	0c13      	lsrs	r3, r2, #16
 8000996:	191b      	adds	r3, r3, r4
 8000998:	019b      	lsls	r3, r3, #6
 800099a:	4303      	orrs	r3, r0
 800099c:	001c      	movs	r4, r3
 800099e:	0123      	lsls	r3, r4, #4
 80009a0:	d579      	bpl.n	8000a96 <__aeabi_fmul+0x23e>
 80009a2:	2301      	movs	r3, #1
 80009a4:	0862      	lsrs	r2, r4, #1
 80009a6:	401c      	ands	r4, r3
 80009a8:	4314      	orrs	r4, r2
 80009aa:	9a01      	ldr	r2, [sp, #4]
 80009ac:	327f      	adds	r2, #127	; 0x7f
 80009ae:	2a00      	cmp	r2, #0
 80009b0:	dd4d      	ble.n	8000a4e <__aeabi_fmul+0x1f6>
 80009b2:	0763      	lsls	r3, r4, #29
 80009b4:	d004      	beq.n	80009c0 <__aeabi_fmul+0x168>
 80009b6:	230f      	movs	r3, #15
 80009b8:	4023      	ands	r3, r4
 80009ba:	2b04      	cmp	r3, #4
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fmul+0x168>
 80009be:	3404      	adds	r4, #4
 80009c0:	0123      	lsls	r3, r4, #4
 80009c2:	d503      	bpl.n	80009cc <__aeabi_fmul+0x174>
 80009c4:	4b3c      	ldr	r3, [pc, #240]	; (8000ab8 <__aeabi_fmul+0x260>)
 80009c6:	9a01      	ldr	r2, [sp, #4]
 80009c8:	401c      	ands	r4, r3
 80009ca:	3280      	adds	r2, #128	; 0x80
 80009cc:	2afe      	cmp	r2, #254	; 0xfe
 80009ce:	dcbc      	bgt.n	800094a <__aeabi_fmul+0xf2>
 80009d0:	01a3      	lsls	r3, r4, #6
 80009d2:	0a5b      	lsrs	r3, r3, #9
 80009d4:	b2d2      	uxtb	r2, r2
 80009d6:	e79a      	b.n	800090e <__aeabi_fmul+0xb6>
 80009d8:	230c      	movs	r3, #12
 80009da:	469a      	mov	sl, r3
 80009dc:	3b09      	subs	r3, #9
 80009de:	25ff      	movs	r5, #255	; 0xff
 80009e0:	469b      	mov	fp, r3
 80009e2:	e754      	b.n	800088e <__aeabi_fmul+0x36>
 80009e4:	0018      	movs	r0, r3
 80009e6:	f001 f8f1 	bl	8001bcc <__clzsi2>
 80009ea:	464a      	mov	r2, r9
 80009ec:	1f43      	subs	r3, r0, #5
 80009ee:	2576      	movs	r5, #118	; 0x76
 80009f0:	409a      	lsls	r2, r3
 80009f2:	2300      	movs	r3, #0
 80009f4:	426d      	negs	r5, r5
 80009f6:	4691      	mov	r9, r2
 80009f8:	1a2d      	subs	r5, r5, r0
 80009fa:	469a      	mov	sl, r3
 80009fc:	469b      	mov	fp, r3
 80009fe:	e746      	b.n	800088e <__aeabi_fmul+0x36>
 8000a00:	4652      	mov	r2, sl
 8000a02:	2303      	movs	r3, #3
 8000a04:	431a      	orrs	r2, r3
 8000a06:	4692      	mov	sl, r2
 8000a08:	2003      	movs	r0, #3
 8000a0a:	e750      	b.n	80008ae <__aeabi_fmul+0x56>
 8000a0c:	0020      	movs	r0, r4
 8000a0e:	f001 f8dd 	bl	8001bcc <__clzsi2>
 8000a12:	1f43      	subs	r3, r0, #5
 8000a14:	1a2d      	subs	r5, r5, r0
 8000a16:	409c      	lsls	r4, r3
 8000a18:	3d76      	subs	r5, #118	; 0x76
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	e747      	b.n	80008ae <__aeabi_fmul+0x56>
 8000a1e:	2380      	movs	r3, #128	; 0x80
 8000a20:	2700      	movs	r7, #0
 8000a22:	03db      	lsls	r3, r3, #15
 8000a24:	22ff      	movs	r2, #255	; 0xff
 8000a26:	e772      	b.n	800090e <__aeabi_fmul+0xb6>
 8000a28:	4642      	mov	r2, r8
 8000a2a:	e766      	b.n	80008fa <__aeabi_fmul+0xa2>
 8000a2c:	464c      	mov	r4, r9
 8000a2e:	0032      	movs	r2, r6
 8000a30:	4658      	mov	r0, fp
 8000a32:	e762      	b.n	80008fa <__aeabi_fmul+0xa2>
 8000a34:	2380      	movs	r3, #128	; 0x80
 8000a36:	464a      	mov	r2, r9
 8000a38:	03db      	lsls	r3, r3, #15
 8000a3a:	421a      	tst	r2, r3
 8000a3c:	d022      	beq.n	8000a84 <__aeabi_fmul+0x22c>
 8000a3e:	421c      	tst	r4, r3
 8000a40:	d120      	bne.n	8000a84 <__aeabi_fmul+0x22c>
 8000a42:	4323      	orrs	r3, r4
 8000a44:	025b      	lsls	r3, r3, #9
 8000a46:	0a5b      	lsrs	r3, r3, #9
 8000a48:	4647      	mov	r7, r8
 8000a4a:	22ff      	movs	r2, #255	; 0xff
 8000a4c:	e75f      	b.n	800090e <__aeabi_fmul+0xb6>
 8000a4e:	2301      	movs	r3, #1
 8000a50:	1a9a      	subs	r2, r3, r2
 8000a52:	2a1b      	cmp	r2, #27
 8000a54:	dc21      	bgt.n	8000a9a <__aeabi_fmul+0x242>
 8000a56:	0023      	movs	r3, r4
 8000a58:	9901      	ldr	r1, [sp, #4]
 8000a5a:	40d3      	lsrs	r3, r2
 8000a5c:	319e      	adds	r1, #158	; 0x9e
 8000a5e:	408c      	lsls	r4, r1
 8000a60:	001a      	movs	r2, r3
 8000a62:	0023      	movs	r3, r4
 8000a64:	1e5c      	subs	r4, r3, #1
 8000a66:	41a3      	sbcs	r3, r4
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	075a      	lsls	r2, r3, #29
 8000a6c:	d004      	beq.n	8000a78 <__aeabi_fmul+0x220>
 8000a6e:	220f      	movs	r2, #15
 8000a70:	401a      	ands	r2, r3
 8000a72:	2a04      	cmp	r2, #4
 8000a74:	d000      	beq.n	8000a78 <__aeabi_fmul+0x220>
 8000a76:	3304      	adds	r3, #4
 8000a78:	015a      	lsls	r2, r3, #5
 8000a7a:	d411      	bmi.n	8000aa0 <__aeabi_fmul+0x248>
 8000a7c:	019b      	lsls	r3, r3, #6
 8000a7e:	0a5b      	lsrs	r3, r3, #9
 8000a80:	2200      	movs	r2, #0
 8000a82:	e744      	b.n	800090e <__aeabi_fmul+0xb6>
 8000a84:	2380      	movs	r3, #128	; 0x80
 8000a86:	464a      	mov	r2, r9
 8000a88:	03db      	lsls	r3, r3, #15
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	025b      	lsls	r3, r3, #9
 8000a8e:	0a5b      	lsrs	r3, r3, #9
 8000a90:	0037      	movs	r7, r6
 8000a92:	22ff      	movs	r2, #255	; 0xff
 8000a94:	e73b      	b.n	800090e <__aeabi_fmul+0xb6>
 8000a96:	9501      	str	r5, [sp, #4]
 8000a98:	e787      	b.n	80009aa <__aeabi_fmul+0x152>
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	e736      	b.n	800090e <__aeabi_fmul+0xb6>
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	e733      	b.n	800090e <__aeabi_fmul+0xb6>
 8000aa6:	2380      	movs	r3, #128	; 0x80
 8000aa8:	03db      	lsls	r3, r3, #15
 8000aaa:	4323      	orrs	r3, r4
 8000aac:	025b      	lsls	r3, r3, #9
 8000aae:	0a5b      	lsrs	r3, r3, #9
 8000ab0:	22ff      	movs	r2, #255	; 0xff
 8000ab2:	e72c      	b.n	800090e <__aeabi_fmul+0xb6>
 8000ab4:	0800cca4 	.word	0x0800cca4
 8000ab8:	f7ffffff 	.word	0xf7ffffff

08000abc <__aeabi_fsub>:
 8000abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000abe:	4647      	mov	r7, r8
 8000ac0:	46ce      	mov	lr, r9
 8000ac2:	0044      	lsls	r4, r0, #1
 8000ac4:	0fc2      	lsrs	r2, r0, #31
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	0247      	lsls	r7, r0, #9
 8000aca:	0248      	lsls	r0, r1, #9
 8000acc:	0a40      	lsrs	r0, r0, #9
 8000ace:	4684      	mov	ip, r0
 8000ad0:	4666      	mov	r6, ip
 8000ad2:	0048      	lsls	r0, r1, #1
 8000ad4:	0a7f      	lsrs	r7, r7, #9
 8000ad6:	0e24      	lsrs	r4, r4, #24
 8000ad8:	00f6      	lsls	r6, r6, #3
 8000ada:	0025      	movs	r5, r4
 8000adc:	4690      	mov	r8, r2
 8000ade:	00fb      	lsls	r3, r7, #3
 8000ae0:	0e00      	lsrs	r0, r0, #24
 8000ae2:	0fc9      	lsrs	r1, r1, #31
 8000ae4:	46b1      	mov	r9, r6
 8000ae6:	28ff      	cmp	r0, #255	; 0xff
 8000ae8:	d100      	bne.n	8000aec <__aeabi_fsub+0x30>
 8000aea:	e085      	b.n	8000bf8 <__aeabi_fsub+0x13c>
 8000aec:	2601      	movs	r6, #1
 8000aee:	4071      	eors	r1, r6
 8000af0:	1a26      	subs	r6, r4, r0
 8000af2:	4291      	cmp	r1, r2
 8000af4:	d057      	beq.n	8000ba6 <__aeabi_fsub+0xea>
 8000af6:	2e00      	cmp	r6, #0
 8000af8:	dd43      	ble.n	8000b82 <__aeabi_fsub+0xc6>
 8000afa:	2800      	cmp	r0, #0
 8000afc:	d000      	beq.n	8000b00 <__aeabi_fsub+0x44>
 8000afe:	e07f      	b.n	8000c00 <__aeabi_fsub+0x144>
 8000b00:	4649      	mov	r1, r9
 8000b02:	2900      	cmp	r1, #0
 8000b04:	d100      	bne.n	8000b08 <__aeabi_fsub+0x4c>
 8000b06:	e0aa      	b.n	8000c5e <__aeabi_fsub+0x1a2>
 8000b08:	3e01      	subs	r6, #1
 8000b0a:	2e00      	cmp	r6, #0
 8000b0c:	d000      	beq.n	8000b10 <__aeabi_fsub+0x54>
 8000b0e:	e0f7      	b.n	8000d00 <__aeabi_fsub+0x244>
 8000b10:	1a5b      	subs	r3, r3, r1
 8000b12:	015a      	lsls	r2, r3, #5
 8000b14:	d400      	bmi.n	8000b18 <__aeabi_fsub+0x5c>
 8000b16:	e08b      	b.n	8000c30 <__aeabi_fsub+0x174>
 8000b18:	019b      	lsls	r3, r3, #6
 8000b1a:	099c      	lsrs	r4, r3, #6
 8000b1c:	0020      	movs	r0, r4
 8000b1e:	f001 f855 	bl	8001bcc <__clzsi2>
 8000b22:	3805      	subs	r0, #5
 8000b24:	4084      	lsls	r4, r0
 8000b26:	4285      	cmp	r5, r0
 8000b28:	dd00      	ble.n	8000b2c <__aeabi_fsub+0x70>
 8000b2a:	e0d3      	b.n	8000cd4 <__aeabi_fsub+0x218>
 8000b2c:	1b45      	subs	r5, r0, r5
 8000b2e:	0023      	movs	r3, r4
 8000b30:	2020      	movs	r0, #32
 8000b32:	3501      	adds	r5, #1
 8000b34:	40eb      	lsrs	r3, r5
 8000b36:	1b45      	subs	r5, r0, r5
 8000b38:	40ac      	lsls	r4, r5
 8000b3a:	1e62      	subs	r2, r4, #1
 8000b3c:	4194      	sbcs	r4, r2
 8000b3e:	4323      	orrs	r3, r4
 8000b40:	2407      	movs	r4, #7
 8000b42:	2500      	movs	r5, #0
 8000b44:	401c      	ands	r4, r3
 8000b46:	2201      	movs	r2, #1
 8000b48:	4641      	mov	r1, r8
 8000b4a:	400a      	ands	r2, r1
 8000b4c:	2c00      	cmp	r4, #0
 8000b4e:	d004      	beq.n	8000b5a <__aeabi_fsub+0x9e>
 8000b50:	210f      	movs	r1, #15
 8000b52:	4019      	ands	r1, r3
 8000b54:	2904      	cmp	r1, #4
 8000b56:	d000      	beq.n	8000b5a <__aeabi_fsub+0x9e>
 8000b58:	3304      	adds	r3, #4
 8000b5a:	0159      	lsls	r1, r3, #5
 8000b5c:	d400      	bmi.n	8000b60 <__aeabi_fsub+0xa4>
 8000b5e:	e080      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000b60:	3501      	adds	r5, #1
 8000b62:	b2ec      	uxtb	r4, r5
 8000b64:	2dff      	cmp	r5, #255	; 0xff
 8000b66:	d000      	beq.n	8000b6a <__aeabi_fsub+0xae>
 8000b68:	e0a3      	b.n	8000cb2 <__aeabi_fsub+0x1f6>
 8000b6a:	24ff      	movs	r4, #255	; 0xff
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	025b      	lsls	r3, r3, #9
 8000b70:	05e4      	lsls	r4, r4, #23
 8000b72:	0a58      	lsrs	r0, r3, #9
 8000b74:	07d2      	lsls	r2, r2, #31
 8000b76:	4320      	orrs	r0, r4
 8000b78:	4310      	orrs	r0, r2
 8000b7a:	bc0c      	pop	{r2, r3}
 8000b7c:	4690      	mov	r8, r2
 8000b7e:	4699      	mov	r9, r3
 8000b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b82:	2e00      	cmp	r6, #0
 8000b84:	d174      	bne.n	8000c70 <__aeabi_fsub+0x1b4>
 8000b86:	1c60      	adds	r0, r4, #1
 8000b88:	b2c0      	uxtb	r0, r0
 8000b8a:	2801      	cmp	r0, #1
 8000b8c:	dc00      	bgt.n	8000b90 <__aeabi_fsub+0xd4>
 8000b8e:	e0a7      	b.n	8000ce0 <__aeabi_fsub+0x224>
 8000b90:	464a      	mov	r2, r9
 8000b92:	1a9c      	subs	r4, r3, r2
 8000b94:	0162      	lsls	r2, r4, #5
 8000b96:	d500      	bpl.n	8000b9a <__aeabi_fsub+0xde>
 8000b98:	e0b6      	b.n	8000d08 <__aeabi_fsub+0x24c>
 8000b9a:	2c00      	cmp	r4, #0
 8000b9c:	d1be      	bne.n	8000b1c <__aeabi_fsub+0x60>
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2400      	movs	r4, #0
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	e7e3      	b.n	8000b6e <__aeabi_fsub+0xb2>
 8000ba6:	2e00      	cmp	r6, #0
 8000ba8:	dc00      	bgt.n	8000bac <__aeabi_fsub+0xf0>
 8000baa:	e085      	b.n	8000cb8 <__aeabi_fsub+0x1fc>
 8000bac:	2800      	cmp	r0, #0
 8000bae:	d046      	beq.n	8000c3e <__aeabi_fsub+0x182>
 8000bb0:	2cff      	cmp	r4, #255	; 0xff
 8000bb2:	d049      	beq.n	8000c48 <__aeabi_fsub+0x18c>
 8000bb4:	2280      	movs	r2, #128	; 0x80
 8000bb6:	4648      	mov	r0, r9
 8000bb8:	04d2      	lsls	r2, r2, #19
 8000bba:	4310      	orrs	r0, r2
 8000bbc:	4681      	mov	r9, r0
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	2e1b      	cmp	r6, #27
 8000bc2:	dc09      	bgt.n	8000bd8 <__aeabi_fsub+0x11c>
 8000bc4:	2020      	movs	r0, #32
 8000bc6:	464c      	mov	r4, r9
 8000bc8:	1b80      	subs	r0, r0, r6
 8000bca:	4084      	lsls	r4, r0
 8000bcc:	464a      	mov	r2, r9
 8000bce:	0020      	movs	r0, r4
 8000bd0:	40f2      	lsrs	r2, r6
 8000bd2:	1e44      	subs	r4, r0, #1
 8000bd4:	41a0      	sbcs	r0, r4
 8000bd6:	4302      	orrs	r2, r0
 8000bd8:	189b      	adds	r3, r3, r2
 8000bda:	015a      	lsls	r2, r3, #5
 8000bdc:	d528      	bpl.n	8000c30 <__aeabi_fsub+0x174>
 8000bde:	3501      	adds	r5, #1
 8000be0:	2dff      	cmp	r5, #255	; 0xff
 8000be2:	d100      	bne.n	8000be6 <__aeabi_fsub+0x12a>
 8000be4:	e0a8      	b.n	8000d38 <__aeabi_fsub+0x27c>
 8000be6:	2201      	movs	r2, #1
 8000be8:	2407      	movs	r4, #7
 8000bea:	4994      	ldr	r1, [pc, #592]	; (8000e3c <__aeabi_fsub+0x380>)
 8000bec:	401a      	ands	r2, r3
 8000bee:	085b      	lsrs	r3, r3, #1
 8000bf0:	400b      	ands	r3, r1
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	401c      	ands	r4, r3
 8000bf6:	e7a6      	b.n	8000b46 <__aeabi_fsub+0x8a>
 8000bf8:	2e00      	cmp	r6, #0
 8000bfa:	d000      	beq.n	8000bfe <__aeabi_fsub+0x142>
 8000bfc:	e778      	b.n	8000af0 <__aeabi_fsub+0x34>
 8000bfe:	e775      	b.n	8000aec <__aeabi_fsub+0x30>
 8000c00:	2cff      	cmp	r4, #255	; 0xff
 8000c02:	d054      	beq.n	8000cae <__aeabi_fsub+0x1f2>
 8000c04:	2280      	movs	r2, #128	; 0x80
 8000c06:	4649      	mov	r1, r9
 8000c08:	04d2      	lsls	r2, r2, #19
 8000c0a:	4311      	orrs	r1, r2
 8000c0c:	4689      	mov	r9, r1
 8000c0e:	2201      	movs	r2, #1
 8000c10:	2e1b      	cmp	r6, #27
 8000c12:	dc09      	bgt.n	8000c28 <__aeabi_fsub+0x16c>
 8000c14:	2120      	movs	r1, #32
 8000c16:	4648      	mov	r0, r9
 8000c18:	1b89      	subs	r1, r1, r6
 8000c1a:	4088      	lsls	r0, r1
 8000c1c:	464a      	mov	r2, r9
 8000c1e:	0001      	movs	r1, r0
 8000c20:	40f2      	lsrs	r2, r6
 8000c22:	1e48      	subs	r0, r1, #1
 8000c24:	4181      	sbcs	r1, r0
 8000c26:	430a      	orrs	r2, r1
 8000c28:	1a9b      	subs	r3, r3, r2
 8000c2a:	015a      	lsls	r2, r3, #5
 8000c2c:	d500      	bpl.n	8000c30 <__aeabi_fsub+0x174>
 8000c2e:	e773      	b.n	8000b18 <__aeabi_fsub+0x5c>
 8000c30:	2201      	movs	r2, #1
 8000c32:	4641      	mov	r1, r8
 8000c34:	400a      	ands	r2, r1
 8000c36:	0759      	lsls	r1, r3, #29
 8000c38:	d000      	beq.n	8000c3c <__aeabi_fsub+0x180>
 8000c3a:	e789      	b.n	8000b50 <__aeabi_fsub+0x94>
 8000c3c:	e011      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000c3e:	4648      	mov	r0, r9
 8000c40:	2800      	cmp	r0, #0
 8000c42:	d158      	bne.n	8000cf6 <__aeabi_fsub+0x23a>
 8000c44:	2cff      	cmp	r4, #255	; 0xff
 8000c46:	d10c      	bne.n	8000c62 <__aeabi_fsub+0x1a6>
 8000c48:	08db      	lsrs	r3, r3, #3
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d100      	bne.n	8000c50 <__aeabi_fsub+0x194>
 8000c4e:	e78c      	b.n	8000b6a <__aeabi_fsub+0xae>
 8000c50:	2080      	movs	r0, #128	; 0x80
 8000c52:	03c0      	lsls	r0, r0, #15
 8000c54:	4303      	orrs	r3, r0
 8000c56:	025b      	lsls	r3, r3, #9
 8000c58:	0a5b      	lsrs	r3, r3, #9
 8000c5a:	24ff      	movs	r4, #255	; 0xff
 8000c5c:	e787      	b.n	8000b6e <__aeabi_fsub+0xb2>
 8000c5e:	2cff      	cmp	r4, #255	; 0xff
 8000c60:	d025      	beq.n	8000cae <__aeabi_fsub+0x1f2>
 8000c62:	08db      	lsrs	r3, r3, #3
 8000c64:	2dff      	cmp	r5, #255	; 0xff
 8000c66:	d0f0      	beq.n	8000c4a <__aeabi_fsub+0x18e>
 8000c68:	025b      	lsls	r3, r3, #9
 8000c6a:	0a5b      	lsrs	r3, r3, #9
 8000c6c:	b2ec      	uxtb	r4, r5
 8000c6e:	e77e      	b.n	8000b6e <__aeabi_fsub+0xb2>
 8000c70:	2c00      	cmp	r4, #0
 8000c72:	d04d      	beq.n	8000d10 <__aeabi_fsub+0x254>
 8000c74:	28ff      	cmp	r0, #255	; 0xff
 8000c76:	d018      	beq.n	8000caa <__aeabi_fsub+0x1ee>
 8000c78:	2480      	movs	r4, #128	; 0x80
 8000c7a:	04e4      	lsls	r4, r4, #19
 8000c7c:	4272      	negs	r2, r6
 8000c7e:	4323      	orrs	r3, r4
 8000c80:	2a1b      	cmp	r2, #27
 8000c82:	dd00      	ble.n	8000c86 <__aeabi_fsub+0x1ca>
 8000c84:	e0c4      	b.n	8000e10 <__aeabi_fsub+0x354>
 8000c86:	001c      	movs	r4, r3
 8000c88:	2520      	movs	r5, #32
 8000c8a:	40d4      	lsrs	r4, r2
 8000c8c:	1aaa      	subs	r2, r5, r2
 8000c8e:	4093      	lsls	r3, r2
 8000c90:	1e5a      	subs	r2, r3, #1
 8000c92:	4193      	sbcs	r3, r2
 8000c94:	4323      	orrs	r3, r4
 8000c96:	464a      	mov	r2, r9
 8000c98:	0005      	movs	r5, r0
 8000c9a:	1ad3      	subs	r3, r2, r3
 8000c9c:	4688      	mov	r8, r1
 8000c9e:	e738      	b.n	8000b12 <__aeabi_fsub+0x56>
 8000ca0:	1c72      	adds	r2, r6, #1
 8000ca2:	d0f8      	beq.n	8000c96 <__aeabi_fsub+0x1da>
 8000ca4:	43f2      	mvns	r2, r6
 8000ca6:	28ff      	cmp	r0, #255	; 0xff
 8000ca8:	d1ea      	bne.n	8000c80 <__aeabi_fsub+0x1c4>
 8000caa:	000a      	movs	r2, r1
 8000cac:	464b      	mov	r3, r9
 8000cae:	25ff      	movs	r5, #255	; 0xff
 8000cb0:	e7d7      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000cb2:	019b      	lsls	r3, r3, #6
 8000cb4:	0a5b      	lsrs	r3, r3, #9
 8000cb6:	e75a      	b.n	8000b6e <__aeabi_fsub+0xb2>
 8000cb8:	2e00      	cmp	r6, #0
 8000cba:	d141      	bne.n	8000d40 <__aeabi_fsub+0x284>
 8000cbc:	1c65      	adds	r5, r4, #1
 8000cbe:	b2e9      	uxtb	r1, r5
 8000cc0:	2901      	cmp	r1, #1
 8000cc2:	dd45      	ble.n	8000d50 <__aeabi_fsub+0x294>
 8000cc4:	2dff      	cmp	r5, #255	; 0xff
 8000cc6:	d100      	bne.n	8000cca <__aeabi_fsub+0x20e>
 8000cc8:	e74f      	b.n	8000b6a <__aeabi_fsub+0xae>
 8000cca:	2407      	movs	r4, #7
 8000ccc:	444b      	add	r3, r9
 8000cce:	085b      	lsrs	r3, r3, #1
 8000cd0:	401c      	ands	r4, r3
 8000cd2:	e738      	b.n	8000b46 <__aeabi_fsub+0x8a>
 8000cd4:	2207      	movs	r2, #7
 8000cd6:	4b5a      	ldr	r3, [pc, #360]	; (8000e40 <__aeabi_fsub+0x384>)
 8000cd8:	1a2d      	subs	r5, r5, r0
 8000cda:	4023      	ands	r3, r4
 8000cdc:	4014      	ands	r4, r2
 8000cde:	e732      	b.n	8000b46 <__aeabi_fsub+0x8a>
 8000ce0:	2c00      	cmp	r4, #0
 8000ce2:	d11d      	bne.n	8000d20 <__aeabi_fsub+0x264>
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d17a      	bne.n	8000dde <__aeabi_fsub+0x322>
 8000ce8:	464b      	mov	r3, r9
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d100      	bne.n	8000cf0 <__aeabi_fsub+0x234>
 8000cee:	e091      	b.n	8000e14 <__aeabi_fsub+0x358>
 8000cf0:	000a      	movs	r2, r1
 8000cf2:	2500      	movs	r5, #0
 8000cf4:	e7b5      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000cf6:	3e01      	subs	r6, #1
 8000cf8:	2e00      	cmp	r6, #0
 8000cfa:	d119      	bne.n	8000d30 <__aeabi_fsub+0x274>
 8000cfc:	444b      	add	r3, r9
 8000cfe:	e76c      	b.n	8000bda <__aeabi_fsub+0x11e>
 8000d00:	2cff      	cmp	r4, #255	; 0xff
 8000d02:	d184      	bne.n	8000c0e <__aeabi_fsub+0x152>
 8000d04:	25ff      	movs	r5, #255	; 0xff
 8000d06:	e7ac      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000d08:	464a      	mov	r2, r9
 8000d0a:	4688      	mov	r8, r1
 8000d0c:	1ad4      	subs	r4, r2, r3
 8000d0e:	e705      	b.n	8000b1c <__aeabi_fsub+0x60>
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d1c5      	bne.n	8000ca0 <__aeabi_fsub+0x1e4>
 8000d14:	000a      	movs	r2, r1
 8000d16:	28ff      	cmp	r0, #255	; 0xff
 8000d18:	d0c8      	beq.n	8000cac <__aeabi_fsub+0x1f0>
 8000d1a:	0005      	movs	r5, r0
 8000d1c:	464b      	mov	r3, r9
 8000d1e:	e7a0      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d149      	bne.n	8000db8 <__aeabi_fsub+0x2fc>
 8000d24:	464b      	mov	r3, r9
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d077      	beq.n	8000e1a <__aeabi_fsub+0x35e>
 8000d2a:	000a      	movs	r2, r1
 8000d2c:	25ff      	movs	r5, #255	; 0xff
 8000d2e:	e798      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000d30:	2cff      	cmp	r4, #255	; 0xff
 8000d32:	d000      	beq.n	8000d36 <__aeabi_fsub+0x27a>
 8000d34:	e743      	b.n	8000bbe <__aeabi_fsub+0x102>
 8000d36:	e787      	b.n	8000c48 <__aeabi_fsub+0x18c>
 8000d38:	000a      	movs	r2, r1
 8000d3a:	24ff      	movs	r4, #255	; 0xff
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	e716      	b.n	8000b6e <__aeabi_fsub+0xb2>
 8000d40:	2c00      	cmp	r4, #0
 8000d42:	d115      	bne.n	8000d70 <__aeabi_fsub+0x2b4>
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d157      	bne.n	8000df8 <__aeabi_fsub+0x33c>
 8000d48:	28ff      	cmp	r0, #255	; 0xff
 8000d4a:	d1e6      	bne.n	8000d1a <__aeabi_fsub+0x25e>
 8000d4c:	464b      	mov	r3, r9
 8000d4e:	e77b      	b.n	8000c48 <__aeabi_fsub+0x18c>
 8000d50:	2c00      	cmp	r4, #0
 8000d52:	d120      	bne.n	8000d96 <__aeabi_fsub+0x2da>
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d057      	beq.n	8000e08 <__aeabi_fsub+0x34c>
 8000d58:	4649      	mov	r1, r9
 8000d5a:	2900      	cmp	r1, #0
 8000d5c:	d053      	beq.n	8000e06 <__aeabi_fsub+0x34a>
 8000d5e:	444b      	add	r3, r9
 8000d60:	015a      	lsls	r2, r3, #5
 8000d62:	d568      	bpl.n	8000e36 <__aeabi_fsub+0x37a>
 8000d64:	2407      	movs	r4, #7
 8000d66:	4a36      	ldr	r2, [pc, #216]	; (8000e40 <__aeabi_fsub+0x384>)
 8000d68:	401c      	ands	r4, r3
 8000d6a:	2501      	movs	r5, #1
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	e6ea      	b.n	8000b46 <__aeabi_fsub+0x8a>
 8000d70:	28ff      	cmp	r0, #255	; 0xff
 8000d72:	d0eb      	beq.n	8000d4c <__aeabi_fsub+0x290>
 8000d74:	2280      	movs	r2, #128	; 0x80
 8000d76:	04d2      	lsls	r2, r2, #19
 8000d78:	4276      	negs	r6, r6
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	2e1b      	cmp	r6, #27
 8000d7e:	dc53      	bgt.n	8000e28 <__aeabi_fsub+0x36c>
 8000d80:	2520      	movs	r5, #32
 8000d82:	1bad      	subs	r5, r5, r6
 8000d84:	001a      	movs	r2, r3
 8000d86:	40ab      	lsls	r3, r5
 8000d88:	40f2      	lsrs	r2, r6
 8000d8a:	1e5c      	subs	r4, r3, #1
 8000d8c:	41a3      	sbcs	r3, r4
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	444b      	add	r3, r9
 8000d92:	0005      	movs	r5, r0
 8000d94:	e721      	b.n	8000bda <__aeabi_fsub+0x11e>
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d0d8      	beq.n	8000d4c <__aeabi_fsub+0x290>
 8000d9a:	4649      	mov	r1, r9
 8000d9c:	2900      	cmp	r1, #0
 8000d9e:	d100      	bne.n	8000da2 <__aeabi_fsub+0x2e6>
 8000da0:	e752      	b.n	8000c48 <__aeabi_fsub+0x18c>
 8000da2:	2180      	movs	r1, #128	; 0x80
 8000da4:	03c9      	lsls	r1, r1, #15
 8000da6:	420f      	tst	r7, r1
 8000da8:	d100      	bne.n	8000dac <__aeabi_fsub+0x2f0>
 8000daa:	e74d      	b.n	8000c48 <__aeabi_fsub+0x18c>
 8000dac:	4660      	mov	r0, ip
 8000dae:	4208      	tst	r0, r1
 8000db0:	d000      	beq.n	8000db4 <__aeabi_fsub+0x2f8>
 8000db2:	e749      	b.n	8000c48 <__aeabi_fsub+0x18c>
 8000db4:	464b      	mov	r3, r9
 8000db6:	e747      	b.n	8000c48 <__aeabi_fsub+0x18c>
 8000db8:	4648      	mov	r0, r9
 8000dba:	25ff      	movs	r5, #255	; 0xff
 8000dbc:	2800      	cmp	r0, #0
 8000dbe:	d100      	bne.n	8000dc2 <__aeabi_fsub+0x306>
 8000dc0:	e74f      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000dc2:	2280      	movs	r2, #128	; 0x80
 8000dc4:	03d2      	lsls	r2, r2, #15
 8000dc6:	4217      	tst	r7, r2
 8000dc8:	d004      	beq.n	8000dd4 <__aeabi_fsub+0x318>
 8000dca:	4660      	mov	r0, ip
 8000dcc:	4210      	tst	r0, r2
 8000dce:	d101      	bne.n	8000dd4 <__aeabi_fsub+0x318>
 8000dd0:	464b      	mov	r3, r9
 8000dd2:	4688      	mov	r8, r1
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	4641      	mov	r1, r8
 8000dd8:	25ff      	movs	r5, #255	; 0xff
 8000dda:	400a      	ands	r2, r1
 8000ddc:	e741      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000dde:	4648      	mov	r0, r9
 8000de0:	2800      	cmp	r0, #0
 8000de2:	d01f      	beq.n	8000e24 <__aeabi_fsub+0x368>
 8000de4:	1a1a      	subs	r2, r3, r0
 8000de6:	0150      	lsls	r0, r2, #5
 8000de8:	d520      	bpl.n	8000e2c <__aeabi_fsub+0x370>
 8000dea:	464a      	mov	r2, r9
 8000dec:	2407      	movs	r4, #7
 8000dee:	1ad3      	subs	r3, r2, r3
 8000df0:	401c      	ands	r4, r3
 8000df2:	4688      	mov	r8, r1
 8000df4:	2500      	movs	r5, #0
 8000df6:	e6a6      	b.n	8000b46 <__aeabi_fsub+0x8a>
 8000df8:	1c74      	adds	r4, r6, #1
 8000dfa:	d0c9      	beq.n	8000d90 <__aeabi_fsub+0x2d4>
 8000dfc:	43f6      	mvns	r6, r6
 8000dfe:	28ff      	cmp	r0, #255	; 0xff
 8000e00:	d1bc      	bne.n	8000d7c <__aeabi_fsub+0x2c0>
 8000e02:	464b      	mov	r3, r9
 8000e04:	e720      	b.n	8000c48 <__aeabi_fsub+0x18c>
 8000e06:	4699      	mov	r9, r3
 8000e08:	464b      	mov	r3, r9
 8000e0a:	2500      	movs	r5, #0
 8000e0c:	08db      	lsrs	r3, r3, #3
 8000e0e:	e72b      	b.n	8000c68 <__aeabi_fsub+0x1ac>
 8000e10:	2301      	movs	r3, #1
 8000e12:	e740      	b.n	8000c96 <__aeabi_fsub+0x1da>
 8000e14:	2200      	movs	r2, #0
 8000e16:	2300      	movs	r3, #0
 8000e18:	e6a9      	b.n	8000b6e <__aeabi_fsub+0xb2>
 8000e1a:	2380      	movs	r3, #128	; 0x80
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	03db      	lsls	r3, r3, #15
 8000e20:	24ff      	movs	r4, #255	; 0xff
 8000e22:	e6a4      	b.n	8000b6e <__aeabi_fsub+0xb2>
 8000e24:	2500      	movs	r5, #0
 8000e26:	e71c      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000e28:	2301      	movs	r3, #1
 8000e2a:	e7b1      	b.n	8000d90 <__aeabi_fsub+0x2d4>
 8000e2c:	2a00      	cmp	r2, #0
 8000e2e:	d0f1      	beq.n	8000e14 <__aeabi_fsub+0x358>
 8000e30:	0013      	movs	r3, r2
 8000e32:	2500      	movs	r5, #0
 8000e34:	e6fc      	b.n	8000c30 <__aeabi_fsub+0x174>
 8000e36:	2500      	movs	r5, #0
 8000e38:	e6fa      	b.n	8000c30 <__aeabi_fsub+0x174>
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	7dffffff 	.word	0x7dffffff
 8000e40:	fbffffff 	.word	0xfbffffff

08000e44 <__aeabi_f2iz>:
 8000e44:	0241      	lsls	r1, r0, #9
 8000e46:	0042      	lsls	r2, r0, #1
 8000e48:	0fc3      	lsrs	r3, r0, #31
 8000e4a:	0a49      	lsrs	r1, r1, #9
 8000e4c:	0e12      	lsrs	r2, r2, #24
 8000e4e:	2000      	movs	r0, #0
 8000e50:	2a7e      	cmp	r2, #126	; 0x7e
 8000e52:	d90d      	bls.n	8000e70 <__aeabi_f2iz+0x2c>
 8000e54:	2a9d      	cmp	r2, #157	; 0x9d
 8000e56:	d80c      	bhi.n	8000e72 <__aeabi_f2iz+0x2e>
 8000e58:	2080      	movs	r0, #128	; 0x80
 8000e5a:	0400      	lsls	r0, r0, #16
 8000e5c:	4301      	orrs	r1, r0
 8000e5e:	2a95      	cmp	r2, #149	; 0x95
 8000e60:	dc0a      	bgt.n	8000e78 <__aeabi_f2iz+0x34>
 8000e62:	2096      	movs	r0, #150	; 0x96
 8000e64:	1a82      	subs	r2, r0, r2
 8000e66:	40d1      	lsrs	r1, r2
 8000e68:	4248      	negs	r0, r1
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d100      	bne.n	8000e70 <__aeabi_f2iz+0x2c>
 8000e6e:	0008      	movs	r0, r1
 8000e70:	4770      	bx	lr
 8000e72:	4a03      	ldr	r2, [pc, #12]	; (8000e80 <__aeabi_f2iz+0x3c>)
 8000e74:	1898      	adds	r0, r3, r2
 8000e76:	e7fb      	b.n	8000e70 <__aeabi_f2iz+0x2c>
 8000e78:	3a96      	subs	r2, #150	; 0x96
 8000e7a:	4091      	lsls	r1, r2
 8000e7c:	e7f4      	b.n	8000e68 <__aeabi_f2iz+0x24>
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	7fffffff 	.word	0x7fffffff

08000e84 <__aeabi_ui2f>:
 8000e84:	b570      	push	{r4, r5, r6, lr}
 8000e86:	1e04      	subs	r4, r0, #0
 8000e88:	d034      	beq.n	8000ef4 <__aeabi_ui2f+0x70>
 8000e8a:	f000 fe9f 	bl	8001bcc <__clzsi2>
 8000e8e:	229e      	movs	r2, #158	; 0x9e
 8000e90:	1a12      	subs	r2, r2, r0
 8000e92:	2a96      	cmp	r2, #150	; 0x96
 8000e94:	dc07      	bgt.n	8000ea6 <__aeabi_ui2f+0x22>
 8000e96:	b2d2      	uxtb	r2, r2
 8000e98:	2808      	cmp	r0, #8
 8000e9a:	dd2e      	ble.n	8000efa <__aeabi_ui2f+0x76>
 8000e9c:	3808      	subs	r0, #8
 8000e9e:	4084      	lsls	r4, r0
 8000ea0:	0260      	lsls	r0, r4, #9
 8000ea2:	0a40      	lsrs	r0, r0, #9
 8000ea4:	e021      	b.n	8000eea <__aeabi_ui2f+0x66>
 8000ea6:	2a99      	cmp	r2, #153	; 0x99
 8000ea8:	dd09      	ble.n	8000ebe <__aeabi_ui2f+0x3a>
 8000eaa:	0003      	movs	r3, r0
 8000eac:	0021      	movs	r1, r4
 8000eae:	331b      	adds	r3, #27
 8000eb0:	4099      	lsls	r1, r3
 8000eb2:	1e4b      	subs	r3, r1, #1
 8000eb4:	4199      	sbcs	r1, r3
 8000eb6:	2305      	movs	r3, #5
 8000eb8:	1a1b      	subs	r3, r3, r0
 8000eba:	40dc      	lsrs	r4, r3
 8000ebc:	430c      	orrs	r4, r1
 8000ebe:	2805      	cmp	r0, #5
 8000ec0:	dd01      	ble.n	8000ec6 <__aeabi_ui2f+0x42>
 8000ec2:	1f43      	subs	r3, r0, #5
 8000ec4:	409c      	lsls	r4, r3
 8000ec6:	0023      	movs	r3, r4
 8000ec8:	490d      	ldr	r1, [pc, #52]	; (8000f00 <__aeabi_ui2f+0x7c>)
 8000eca:	400b      	ands	r3, r1
 8000ecc:	0765      	lsls	r5, r4, #29
 8000ece:	d009      	beq.n	8000ee4 <__aeabi_ui2f+0x60>
 8000ed0:	250f      	movs	r5, #15
 8000ed2:	402c      	ands	r4, r5
 8000ed4:	2c04      	cmp	r4, #4
 8000ed6:	d005      	beq.n	8000ee4 <__aeabi_ui2f+0x60>
 8000ed8:	3304      	adds	r3, #4
 8000eda:	015c      	lsls	r4, r3, #5
 8000edc:	d502      	bpl.n	8000ee4 <__aeabi_ui2f+0x60>
 8000ede:	229f      	movs	r2, #159	; 0x9f
 8000ee0:	400b      	ands	r3, r1
 8000ee2:	1a12      	subs	r2, r2, r0
 8000ee4:	019b      	lsls	r3, r3, #6
 8000ee6:	0a58      	lsrs	r0, r3, #9
 8000ee8:	b2d2      	uxtb	r2, r2
 8000eea:	0240      	lsls	r0, r0, #9
 8000eec:	05d2      	lsls	r2, r2, #23
 8000eee:	0a40      	lsrs	r0, r0, #9
 8000ef0:	4310      	orrs	r0, r2
 8000ef2:	bd70      	pop	{r4, r5, r6, pc}
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	e7f7      	b.n	8000eea <__aeabi_ui2f+0x66>
 8000efa:	0260      	lsls	r0, r4, #9
 8000efc:	0a40      	lsrs	r0, r0, #9
 8000efe:	e7f4      	b.n	8000eea <__aeabi_ui2f+0x66>
 8000f00:	fbffffff 	.word	0xfbffffff

08000f04 <__aeabi_ddiv>:
 8000f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f06:	4657      	mov	r7, sl
 8000f08:	46de      	mov	lr, fp
 8000f0a:	464e      	mov	r6, r9
 8000f0c:	4645      	mov	r5, r8
 8000f0e:	b5e0      	push	{r5, r6, r7, lr}
 8000f10:	4683      	mov	fp, r0
 8000f12:	0007      	movs	r7, r0
 8000f14:	030e      	lsls	r6, r1, #12
 8000f16:	0048      	lsls	r0, r1, #1
 8000f18:	b085      	sub	sp, #20
 8000f1a:	4692      	mov	sl, r2
 8000f1c:	001c      	movs	r4, r3
 8000f1e:	0b36      	lsrs	r6, r6, #12
 8000f20:	0d40      	lsrs	r0, r0, #21
 8000f22:	0fcd      	lsrs	r5, r1, #31
 8000f24:	2800      	cmp	r0, #0
 8000f26:	d100      	bne.n	8000f2a <__aeabi_ddiv+0x26>
 8000f28:	e09d      	b.n	8001066 <__aeabi_ddiv+0x162>
 8000f2a:	4b95      	ldr	r3, [pc, #596]	; (8001180 <__aeabi_ddiv+0x27c>)
 8000f2c:	4298      	cmp	r0, r3
 8000f2e:	d039      	beq.n	8000fa4 <__aeabi_ddiv+0xa0>
 8000f30:	2380      	movs	r3, #128	; 0x80
 8000f32:	00f6      	lsls	r6, r6, #3
 8000f34:	041b      	lsls	r3, r3, #16
 8000f36:	431e      	orrs	r6, r3
 8000f38:	4a92      	ldr	r2, [pc, #584]	; (8001184 <__aeabi_ddiv+0x280>)
 8000f3a:	0f7b      	lsrs	r3, r7, #29
 8000f3c:	4333      	orrs	r3, r6
 8000f3e:	4699      	mov	r9, r3
 8000f40:	4694      	mov	ip, r2
 8000f42:	0003      	movs	r3, r0
 8000f44:	4463      	add	r3, ip
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	2300      	movs	r3, #0
 8000f4a:	2600      	movs	r6, #0
 8000f4c:	00ff      	lsls	r7, r7, #3
 8000f4e:	9302      	str	r3, [sp, #8]
 8000f50:	0323      	lsls	r3, r4, #12
 8000f52:	0b1b      	lsrs	r3, r3, #12
 8000f54:	4698      	mov	r8, r3
 8000f56:	0063      	lsls	r3, r4, #1
 8000f58:	0fe4      	lsrs	r4, r4, #31
 8000f5a:	4652      	mov	r2, sl
 8000f5c:	0d5b      	lsrs	r3, r3, #21
 8000f5e:	9401      	str	r4, [sp, #4]
 8000f60:	d100      	bne.n	8000f64 <__aeabi_ddiv+0x60>
 8000f62:	e0b3      	b.n	80010cc <__aeabi_ddiv+0x1c8>
 8000f64:	4986      	ldr	r1, [pc, #536]	; (8001180 <__aeabi_ddiv+0x27c>)
 8000f66:	428b      	cmp	r3, r1
 8000f68:	d100      	bne.n	8000f6c <__aeabi_ddiv+0x68>
 8000f6a:	e09e      	b.n	80010aa <__aeabi_ddiv+0x1a6>
 8000f6c:	4642      	mov	r2, r8
 8000f6e:	00d1      	lsls	r1, r2, #3
 8000f70:	2280      	movs	r2, #128	; 0x80
 8000f72:	0412      	lsls	r2, r2, #16
 8000f74:	430a      	orrs	r2, r1
 8000f76:	4651      	mov	r1, sl
 8000f78:	0f49      	lsrs	r1, r1, #29
 8000f7a:	4311      	orrs	r1, r2
 8000f7c:	468b      	mov	fp, r1
 8000f7e:	4981      	ldr	r1, [pc, #516]	; (8001184 <__aeabi_ddiv+0x280>)
 8000f80:	4652      	mov	r2, sl
 8000f82:	468c      	mov	ip, r1
 8000f84:	9900      	ldr	r1, [sp, #0]
 8000f86:	4463      	add	r3, ip
 8000f88:	1acb      	subs	r3, r1, r3
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	00d2      	lsls	r2, r2, #3
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	002b      	movs	r3, r5
 8000f92:	4063      	eors	r3, r4
 8000f94:	469a      	mov	sl, r3
 8000f96:	2e0f      	cmp	r6, #15
 8000f98:	d900      	bls.n	8000f9c <__aeabi_ddiv+0x98>
 8000f9a:	e105      	b.n	80011a8 <__aeabi_ddiv+0x2a4>
 8000f9c:	4b7a      	ldr	r3, [pc, #488]	; (8001188 <__aeabi_ddiv+0x284>)
 8000f9e:	00b6      	lsls	r6, r6, #2
 8000fa0:	599b      	ldr	r3, [r3, r6]
 8000fa2:	469f      	mov	pc, r3
 8000fa4:	465b      	mov	r3, fp
 8000fa6:	4333      	orrs	r3, r6
 8000fa8:	4699      	mov	r9, r3
 8000faa:	d000      	beq.n	8000fae <__aeabi_ddiv+0xaa>
 8000fac:	e0b8      	b.n	8001120 <__aeabi_ddiv+0x21c>
 8000fae:	2302      	movs	r3, #2
 8000fb0:	2608      	movs	r6, #8
 8000fb2:	2700      	movs	r7, #0
 8000fb4:	9000      	str	r0, [sp, #0]
 8000fb6:	9302      	str	r3, [sp, #8]
 8000fb8:	e7ca      	b.n	8000f50 <__aeabi_ddiv+0x4c>
 8000fba:	46cb      	mov	fp, r9
 8000fbc:	003a      	movs	r2, r7
 8000fbe:	9902      	ldr	r1, [sp, #8]
 8000fc0:	9501      	str	r5, [sp, #4]
 8000fc2:	9b01      	ldr	r3, [sp, #4]
 8000fc4:	469a      	mov	sl, r3
 8000fc6:	2902      	cmp	r1, #2
 8000fc8:	d027      	beq.n	800101a <__aeabi_ddiv+0x116>
 8000fca:	2903      	cmp	r1, #3
 8000fcc:	d100      	bne.n	8000fd0 <__aeabi_ddiv+0xcc>
 8000fce:	e280      	b.n	80014d2 <__aeabi_ddiv+0x5ce>
 8000fd0:	2901      	cmp	r1, #1
 8000fd2:	d044      	beq.n	800105e <__aeabi_ddiv+0x15a>
 8000fd4:	496d      	ldr	r1, [pc, #436]	; (800118c <__aeabi_ddiv+0x288>)
 8000fd6:	9b00      	ldr	r3, [sp, #0]
 8000fd8:	468c      	mov	ip, r1
 8000fda:	4463      	add	r3, ip
 8000fdc:	001c      	movs	r4, r3
 8000fde:	2c00      	cmp	r4, #0
 8000fe0:	dd38      	ble.n	8001054 <__aeabi_ddiv+0x150>
 8000fe2:	0753      	lsls	r3, r2, #29
 8000fe4:	d000      	beq.n	8000fe8 <__aeabi_ddiv+0xe4>
 8000fe6:	e213      	b.n	8001410 <__aeabi_ddiv+0x50c>
 8000fe8:	08d2      	lsrs	r2, r2, #3
 8000fea:	465b      	mov	r3, fp
 8000fec:	01db      	lsls	r3, r3, #7
 8000fee:	d509      	bpl.n	8001004 <__aeabi_ddiv+0x100>
 8000ff0:	4659      	mov	r1, fp
 8000ff2:	4b67      	ldr	r3, [pc, #412]	; (8001190 <__aeabi_ddiv+0x28c>)
 8000ff4:	4019      	ands	r1, r3
 8000ff6:	468b      	mov	fp, r1
 8000ff8:	2180      	movs	r1, #128	; 0x80
 8000ffa:	00c9      	lsls	r1, r1, #3
 8000ffc:	468c      	mov	ip, r1
 8000ffe:	9b00      	ldr	r3, [sp, #0]
 8001000:	4463      	add	r3, ip
 8001002:	001c      	movs	r4, r3
 8001004:	4b63      	ldr	r3, [pc, #396]	; (8001194 <__aeabi_ddiv+0x290>)
 8001006:	429c      	cmp	r4, r3
 8001008:	dc07      	bgt.n	800101a <__aeabi_ddiv+0x116>
 800100a:	465b      	mov	r3, fp
 800100c:	0564      	lsls	r4, r4, #21
 800100e:	075f      	lsls	r7, r3, #29
 8001010:	025b      	lsls	r3, r3, #9
 8001012:	4317      	orrs	r7, r2
 8001014:	0b1b      	lsrs	r3, r3, #12
 8001016:	0d62      	lsrs	r2, r4, #21
 8001018:	e002      	b.n	8001020 <__aeabi_ddiv+0x11c>
 800101a:	2300      	movs	r3, #0
 800101c:	2700      	movs	r7, #0
 800101e:	4a58      	ldr	r2, [pc, #352]	; (8001180 <__aeabi_ddiv+0x27c>)
 8001020:	2100      	movs	r1, #0
 8001022:	031b      	lsls	r3, r3, #12
 8001024:	0b1c      	lsrs	r4, r3, #12
 8001026:	0d0b      	lsrs	r3, r1, #20
 8001028:	051b      	lsls	r3, r3, #20
 800102a:	4323      	orrs	r3, r4
 800102c:	0514      	lsls	r4, r2, #20
 800102e:	4a5a      	ldr	r2, [pc, #360]	; (8001198 <__aeabi_ddiv+0x294>)
 8001030:	0038      	movs	r0, r7
 8001032:	4013      	ands	r3, r2
 8001034:	431c      	orrs	r4, r3
 8001036:	4653      	mov	r3, sl
 8001038:	0064      	lsls	r4, r4, #1
 800103a:	07db      	lsls	r3, r3, #31
 800103c:	0864      	lsrs	r4, r4, #1
 800103e:	431c      	orrs	r4, r3
 8001040:	0021      	movs	r1, r4
 8001042:	b005      	add	sp, #20
 8001044:	bc3c      	pop	{r2, r3, r4, r5}
 8001046:	4690      	mov	r8, r2
 8001048:	4699      	mov	r9, r3
 800104a:	46a2      	mov	sl, r4
 800104c:	46ab      	mov	fp, r5
 800104e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001050:	2201      	movs	r2, #1
 8001052:	4252      	negs	r2, r2
 8001054:	2301      	movs	r3, #1
 8001056:	1b1b      	subs	r3, r3, r4
 8001058:	2b38      	cmp	r3, #56	; 0x38
 800105a:	dc00      	bgt.n	800105e <__aeabi_ddiv+0x15a>
 800105c:	e1ad      	b.n	80013ba <__aeabi_ddiv+0x4b6>
 800105e:	2200      	movs	r2, #0
 8001060:	2300      	movs	r3, #0
 8001062:	2700      	movs	r7, #0
 8001064:	e7dc      	b.n	8001020 <__aeabi_ddiv+0x11c>
 8001066:	465b      	mov	r3, fp
 8001068:	4333      	orrs	r3, r6
 800106a:	4699      	mov	r9, r3
 800106c:	d05e      	beq.n	800112c <__aeabi_ddiv+0x228>
 800106e:	2e00      	cmp	r6, #0
 8001070:	d100      	bne.n	8001074 <__aeabi_ddiv+0x170>
 8001072:	e18a      	b.n	800138a <__aeabi_ddiv+0x486>
 8001074:	0030      	movs	r0, r6
 8001076:	f000 fda9 	bl	8001bcc <__clzsi2>
 800107a:	0003      	movs	r3, r0
 800107c:	3b0b      	subs	r3, #11
 800107e:	2b1c      	cmp	r3, #28
 8001080:	dd00      	ble.n	8001084 <__aeabi_ddiv+0x180>
 8001082:	e17b      	b.n	800137c <__aeabi_ddiv+0x478>
 8001084:	221d      	movs	r2, #29
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	465a      	mov	r2, fp
 800108a:	0001      	movs	r1, r0
 800108c:	40da      	lsrs	r2, r3
 800108e:	3908      	subs	r1, #8
 8001090:	408e      	lsls	r6, r1
 8001092:	0013      	movs	r3, r2
 8001094:	465f      	mov	r7, fp
 8001096:	4333      	orrs	r3, r6
 8001098:	4699      	mov	r9, r3
 800109a:	408f      	lsls	r7, r1
 800109c:	4b3f      	ldr	r3, [pc, #252]	; (800119c <__aeabi_ddiv+0x298>)
 800109e:	2600      	movs	r6, #0
 80010a0:	1a1b      	subs	r3, r3, r0
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	2300      	movs	r3, #0
 80010a6:	9302      	str	r3, [sp, #8]
 80010a8:	e752      	b.n	8000f50 <__aeabi_ddiv+0x4c>
 80010aa:	4641      	mov	r1, r8
 80010ac:	4653      	mov	r3, sl
 80010ae:	430b      	orrs	r3, r1
 80010b0:	493b      	ldr	r1, [pc, #236]	; (80011a0 <__aeabi_ddiv+0x29c>)
 80010b2:	469b      	mov	fp, r3
 80010b4:	468c      	mov	ip, r1
 80010b6:	9b00      	ldr	r3, [sp, #0]
 80010b8:	4463      	add	r3, ip
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	465b      	mov	r3, fp
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d13b      	bne.n	800113a <__aeabi_ddiv+0x236>
 80010c2:	2302      	movs	r3, #2
 80010c4:	2200      	movs	r2, #0
 80010c6:	431e      	orrs	r6, r3
 80010c8:	2102      	movs	r1, #2
 80010ca:	e761      	b.n	8000f90 <__aeabi_ddiv+0x8c>
 80010cc:	4643      	mov	r3, r8
 80010ce:	4313      	orrs	r3, r2
 80010d0:	469b      	mov	fp, r3
 80010d2:	d037      	beq.n	8001144 <__aeabi_ddiv+0x240>
 80010d4:	4643      	mov	r3, r8
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d100      	bne.n	80010dc <__aeabi_ddiv+0x1d8>
 80010da:	e162      	b.n	80013a2 <__aeabi_ddiv+0x49e>
 80010dc:	4640      	mov	r0, r8
 80010de:	f000 fd75 	bl	8001bcc <__clzsi2>
 80010e2:	0003      	movs	r3, r0
 80010e4:	3b0b      	subs	r3, #11
 80010e6:	2b1c      	cmp	r3, #28
 80010e8:	dd00      	ble.n	80010ec <__aeabi_ddiv+0x1e8>
 80010ea:	e153      	b.n	8001394 <__aeabi_ddiv+0x490>
 80010ec:	0002      	movs	r2, r0
 80010ee:	4641      	mov	r1, r8
 80010f0:	3a08      	subs	r2, #8
 80010f2:	4091      	lsls	r1, r2
 80010f4:	4688      	mov	r8, r1
 80010f6:	211d      	movs	r1, #29
 80010f8:	1acb      	subs	r3, r1, r3
 80010fa:	4651      	mov	r1, sl
 80010fc:	40d9      	lsrs	r1, r3
 80010fe:	000b      	movs	r3, r1
 8001100:	4641      	mov	r1, r8
 8001102:	430b      	orrs	r3, r1
 8001104:	469b      	mov	fp, r3
 8001106:	4653      	mov	r3, sl
 8001108:	4093      	lsls	r3, r2
 800110a:	001a      	movs	r2, r3
 800110c:	9b00      	ldr	r3, [sp, #0]
 800110e:	4925      	ldr	r1, [pc, #148]	; (80011a4 <__aeabi_ddiv+0x2a0>)
 8001110:	469c      	mov	ip, r3
 8001112:	4460      	add	r0, ip
 8001114:	0003      	movs	r3, r0
 8001116:	468c      	mov	ip, r1
 8001118:	4463      	add	r3, ip
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	2100      	movs	r1, #0
 800111e:	e737      	b.n	8000f90 <__aeabi_ddiv+0x8c>
 8001120:	2303      	movs	r3, #3
 8001122:	46b1      	mov	r9, r6
 8001124:	9000      	str	r0, [sp, #0]
 8001126:	260c      	movs	r6, #12
 8001128:	9302      	str	r3, [sp, #8]
 800112a:	e711      	b.n	8000f50 <__aeabi_ddiv+0x4c>
 800112c:	2300      	movs	r3, #0
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	3301      	adds	r3, #1
 8001132:	2604      	movs	r6, #4
 8001134:	2700      	movs	r7, #0
 8001136:	9302      	str	r3, [sp, #8]
 8001138:	e70a      	b.n	8000f50 <__aeabi_ddiv+0x4c>
 800113a:	2303      	movs	r3, #3
 800113c:	46c3      	mov	fp, r8
 800113e:	431e      	orrs	r6, r3
 8001140:	2103      	movs	r1, #3
 8001142:	e725      	b.n	8000f90 <__aeabi_ddiv+0x8c>
 8001144:	3301      	adds	r3, #1
 8001146:	431e      	orrs	r6, r3
 8001148:	2200      	movs	r2, #0
 800114a:	2101      	movs	r1, #1
 800114c:	e720      	b.n	8000f90 <__aeabi_ddiv+0x8c>
 800114e:	2300      	movs	r3, #0
 8001150:	469a      	mov	sl, r3
 8001152:	2380      	movs	r3, #128	; 0x80
 8001154:	2700      	movs	r7, #0
 8001156:	031b      	lsls	r3, r3, #12
 8001158:	4a09      	ldr	r2, [pc, #36]	; (8001180 <__aeabi_ddiv+0x27c>)
 800115a:	e761      	b.n	8001020 <__aeabi_ddiv+0x11c>
 800115c:	2380      	movs	r3, #128	; 0x80
 800115e:	4649      	mov	r1, r9
 8001160:	031b      	lsls	r3, r3, #12
 8001162:	4219      	tst	r1, r3
 8001164:	d100      	bne.n	8001168 <__aeabi_ddiv+0x264>
 8001166:	e0e2      	b.n	800132e <__aeabi_ddiv+0x42a>
 8001168:	4659      	mov	r1, fp
 800116a:	4219      	tst	r1, r3
 800116c:	d000      	beq.n	8001170 <__aeabi_ddiv+0x26c>
 800116e:	e0de      	b.n	800132e <__aeabi_ddiv+0x42a>
 8001170:	430b      	orrs	r3, r1
 8001172:	031b      	lsls	r3, r3, #12
 8001174:	0017      	movs	r7, r2
 8001176:	0b1b      	lsrs	r3, r3, #12
 8001178:	46a2      	mov	sl, r4
 800117a:	4a01      	ldr	r2, [pc, #4]	; (8001180 <__aeabi_ddiv+0x27c>)
 800117c:	e750      	b.n	8001020 <__aeabi_ddiv+0x11c>
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	000007ff 	.word	0x000007ff
 8001184:	fffffc01 	.word	0xfffffc01
 8001188:	0800cce4 	.word	0x0800cce4
 800118c:	000003ff 	.word	0x000003ff
 8001190:	feffffff 	.word	0xfeffffff
 8001194:	000007fe 	.word	0x000007fe
 8001198:	800fffff 	.word	0x800fffff
 800119c:	fffffc0d 	.word	0xfffffc0d
 80011a0:	fffff801 	.word	0xfffff801
 80011a4:	000003f3 	.word	0x000003f3
 80011a8:	45d9      	cmp	r9, fp
 80011aa:	d900      	bls.n	80011ae <__aeabi_ddiv+0x2aa>
 80011ac:	e0cb      	b.n	8001346 <__aeabi_ddiv+0x442>
 80011ae:	d100      	bne.n	80011b2 <__aeabi_ddiv+0x2ae>
 80011b0:	e0c6      	b.n	8001340 <__aeabi_ddiv+0x43c>
 80011b2:	003c      	movs	r4, r7
 80011b4:	4648      	mov	r0, r9
 80011b6:	2700      	movs	r7, #0
 80011b8:	9b00      	ldr	r3, [sp, #0]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	465b      	mov	r3, fp
 80011c0:	0e16      	lsrs	r6, r2, #24
 80011c2:	021b      	lsls	r3, r3, #8
 80011c4:	431e      	orrs	r6, r3
 80011c6:	0213      	lsls	r3, r2, #8
 80011c8:	4698      	mov	r8, r3
 80011ca:	0433      	lsls	r3, r6, #16
 80011cc:	0c1b      	lsrs	r3, r3, #16
 80011ce:	4699      	mov	r9, r3
 80011d0:	0c31      	lsrs	r1, r6, #16
 80011d2:	9101      	str	r1, [sp, #4]
 80011d4:	f7ff f826 	bl	8000224 <__aeabi_uidivmod>
 80011d8:	464a      	mov	r2, r9
 80011da:	4342      	muls	r2, r0
 80011dc:	040b      	lsls	r3, r1, #16
 80011de:	0c21      	lsrs	r1, r4, #16
 80011e0:	0005      	movs	r5, r0
 80011e2:	4319      	orrs	r1, r3
 80011e4:	428a      	cmp	r2, r1
 80011e6:	d907      	bls.n	80011f8 <__aeabi_ddiv+0x2f4>
 80011e8:	1989      	adds	r1, r1, r6
 80011ea:	3d01      	subs	r5, #1
 80011ec:	428e      	cmp	r6, r1
 80011ee:	d803      	bhi.n	80011f8 <__aeabi_ddiv+0x2f4>
 80011f0:	428a      	cmp	r2, r1
 80011f2:	d901      	bls.n	80011f8 <__aeabi_ddiv+0x2f4>
 80011f4:	1e85      	subs	r5, r0, #2
 80011f6:	1989      	adds	r1, r1, r6
 80011f8:	1a88      	subs	r0, r1, r2
 80011fa:	9901      	ldr	r1, [sp, #4]
 80011fc:	f7ff f812 	bl	8000224 <__aeabi_uidivmod>
 8001200:	0409      	lsls	r1, r1, #16
 8001202:	468c      	mov	ip, r1
 8001204:	464a      	mov	r2, r9
 8001206:	0421      	lsls	r1, r4, #16
 8001208:	4664      	mov	r4, ip
 800120a:	4342      	muls	r2, r0
 800120c:	0c09      	lsrs	r1, r1, #16
 800120e:	0003      	movs	r3, r0
 8001210:	4321      	orrs	r1, r4
 8001212:	428a      	cmp	r2, r1
 8001214:	d904      	bls.n	8001220 <__aeabi_ddiv+0x31c>
 8001216:	1989      	adds	r1, r1, r6
 8001218:	3b01      	subs	r3, #1
 800121a:	428e      	cmp	r6, r1
 800121c:	d800      	bhi.n	8001220 <__aeabi_ddiv+0x31c>
 800121e:	e0f1      	b.n	8001404 <__aeabi_ddiv+0x500>
 8001220:	042d      	lsls	r5, r5, #16
 8001222:	431d      	orrs	r5, r3
 8001224:	46ab      	mov	fp, r5
 8001226:	4643      	mov	r3, r8
 8001228:	1a89      	subs	r1, r1, r2
 800122a:	4642      	mov	r2, r8
 800122c:	0c28      	lsrs	r0, r5, #16
 800122e:	0412      	lsls	r2, r2, #16
 8001230:	0c1d      	lsrs	r5, r3, #16
 8001232:	465b      	mov	r3, fp
 8001234:	0c14      	lsrs	r4, r2, #16
 8001236:	0022      	movs	r2, r4
 8001238:	041b      	lsls	r3, r3, #16
 800123a:	0c1b      	lsrs	r3, r3, #16
 800123c:	435a      	muls	r2, r3
 800123e:	9403      	str	r4, [sp, #12]
 8001240:	436b      	muls	r3, r5
 8001242:	4344      	muls	r4, r0
 8001244:	9502      	str	r5, [sp, #8]
 8001246:	4368      	muls	r0, r5
 8001248:	191b      	adds	r3, r3, r4
 800124a:	0c15      	lsrs	r5, r2, #16
 800124c:	18eb      	adds	r3, r5, r3
 800124e:	429c      	cmp	r4, r3
 8001250:	d903      	bls.n	800125a <__aeabi_ddiv+0x356>
 8001252:	2480      	movs	r4, #128	; 0x80
 8001254:	0264      	lsls	r4, r4, #9
 8001256:	46a4      	mov	ip, r4
 8001258:	4460      	add	r0, ip
 800125a:	0c1c      	lsrs	r4, r3, #16
 800125c:	0415      	lsls	r5, r2, #16
 800125e:	041b      	lsls	r3, r3, #16
 8001260:	0c2d      	lsrs	r5, r5, #16
 8001262:	1820      	adds	r0, r4, r0
 8001264:	195d      	adds	r5, r3, r5
 8001266:	4281      	cmp	r1, r0
 8001268:	d377      	bcc.n	800135a <__aeabi_ddiv+0x456>
 800126a:	d073      	beq.n	8001354 <__aeabi_ddiv+0x450>
 800126c:	1a0c      	subs	r4, r1, r0
 800126e:	4aa2      	ldr	r2, [pc, #648]	; (80014f8 <__aeabi_ddiv+0x5f4>)
 8001270:	1b7d      	subs	r5, r7, r5
 8001272:	42af      	cmp	r7, r5
 8001274:	41bf      	sbcs	r7, r7
 8001276:	4694      	mov	ip, r2
 8001278:	9b00      	ldr	r3, [sp, #0]
 800127a:	427f      	negs	r7, r7
 800127c:	4463      	add	r3, ip
 800127e:	1be0      	subs	r0, r4, r7
 8001280:	001c      	movs	r4, r3
 8001282:	4286      	cmp	r6, r0
 8001284:	d100      	bne.n	8001288 <__aeabi_ddiv+0x384>
 8001286:	e0db      	b.n	8001440 <__aeabi_ddiv+0x53c>
 8001288:	9901      	ldr	r1, [sp, #4]
 800128a:	f7fe ffcb 	bl	8000224 <__aeabi_uidivmod>
 800128e:	464a      	mov	r2, r9
 8001290:	4342      	muls	r2, r0
 8001292:	040b      	lsls	r3, r1, #16
 8001294:	0c29      	lsrs	r1, r5, #16
 8001296:	0007      	movs	r7, r0
 8001298:	4319      	orrs	r1, r3
 800129a:	428a      	cmp	r2, r1
 800129c:	d907      	bls.n	80012ae <__aeabi_ddiv+0x3aa>
 800129e:	1989      	adds	r1, r1, r6
 80012a0:	3f01      	subs	r7, #1
 80012a2:	428e      	cmp	r6, r1
 80012a4:	d803      	bhi.n	80012ae <__aeabi_ddiv+0x3aa>
 80012a6:	428a      	cmp	r2, r1
 80012a8:	d901      	bls.n	80012ae <__aeabi_ddiv+0x3aa>
 80012aa:	1e87      	subs	r7, r0, #2
 80012ac:	1989      	adds	r1, r1, r6
 80012ae:	1a88      	subs	r0, r1, r2
 80012b0:	9901      	ldr	r1, [sp, #4]
 80012b2:	f7fe ffb7 	bl	8000224 <__aeabi_uidivmod>
 80012b6:	0409      	lsls	r1, r1, #16
 80012b8:	464a      	mov	r2, r9
 80012ba:	4689      	mov	r9, r1
 80012bc:	0429      	lsls	r1, r5, #16
 80012be:	464d      	mov	r5, r9
 80012c0:	4342      	muls	r2, r0
 80012c2:	0c09      	lsrs	r1, r1, #16
 80012c4:	0003      	movs	r3, r0
 80012c6:	4329      	orrs	r1, r5
 80012c8:	428a      	cmp	r2, r1
 80012ca:	d907      	bls.n	80012dc <__aeabi_ddiv+0x3d8>
 80012cc:	1989      	adds	r1, r1, r6
 80012ce:	3b01      	subs	r3, #1
 80012d0:	428e      	cmp	r6, r1
 80012d2:	d803      	bhi.n	80012dc <__aeabi_ddiv+0x3d8>
 80012d4:	428a      	cmp	r2, r1
 80012d6:	d901      	bls.n	80012dc <__aeabi_ddiv+0x3d8>
 80012d8:	1e83      	subs	r3, r0, #2
 80012da:	1989      	adds	r1, r1, r6
 80012dc:	043f      	lsls	r7, r7, #16
 80012de:	1a89      	subs	r1, r1, r2
 80012e0:	003a      	movs	r2, r7
 80012e2:	9f03      	ldr	r7, [sp, #12]
 80012e4:	431a      	orrs	r2, r3
 80012e6:	0038      	movs	r0, r7
 80012e8:	0413      	lsls	r3, r2, #16
 80012ea:	0c1b      	lsrs	r3, r3, #16
 80012ec:	4358      	muls	r0, r3
 80012ee:	4681      	mov	r9, r0
 80012f0:	9802      	ldr	r0, [sp, #8]
 80012f2:	0c15      	lsrs	r5, r2, #16
 80012f4:	436f      	muls	r7, r5
 80012f6:	4343      	muls	r3, r0
 80012f8:	4345      	muls	r5, r0
 80012fa:	4648      	mov	r0, r9
 80012fc:	0c00      	lsrs	r0, r0, #16
 80012fe:	4684      	mov	ip, r0
 8001300:	19db      	adds	r3, r3, r7
 8001302:	4463      	add	r3, ip
 8001304:	429f      	cmp	r7, r3
 8001306:	d903      	bls.n	8001310 <__aeabi_ddiv+0x40c>
 8001308:	2080      	movs	r0, #128	; 0x80
 800130a:	0240      	lsls	r0, r0, #9
 800130c:	4684      	mov	ip, r0
 800130e:	4465      	add	r5, ip
 8001310:	4648      	mov	r0, r9
 8001312:	0c1f      	lsrs	r7, r3, #16
 8001314:	0400      	lsls	r0, r0, #16
 8001316:	041b      	lsls	r3, r3, #16
 8001318:	0c00      	lsrs	r0, r0, #16
 800131a:	197d      	adds	r5, r7, r5
 800131c:	1818      	adds	r0, r3, r0
 800131e:	42a9      	cmp	r1, r5
 8001320:	d200      	bcs.n	8001324 <__aeabi_ddiv+0x420>
 8001322:	e084      	b.n	800142e <__aeabi_ddiv+0x52a>
 8001324:	d100      	bne.n	8001328 <__aeabi_ddiv+0x424>
 8001326:	e07f      	b.n	8001428 <__aeabi_ddiv+0x524>
 8001328:	2301      	movs	r3, #1
 800132a:	431a      	orrs	r2, r3
 800132c:	e657      	b.n	8000fde <__aeabi_ddiv+0xda>
 800132e:	2380      	movs	r3, #128	; 0x80
 8001330:	464a      	mov	r2, r9
 8001332:	031b      	lsls	r3, r3, #12
 8001334:	4313      	orrs	r3, r2
 8001336:	031b      	lsls	r3, r3, #12
 8001338:	0b1b      	lsrs	r3, r3, #12
 800133a:	46aa      	mov	sl, r5
 800133c:	4a6f      	ldr	r2, [pc, #444]	; (80014fc <__aeabi_ddiv+0x5f8>)
 800133e:	e66f      	b.n	8001020 <__aeabi_ddiv+0x11c>
 8001340:	42ba      	cmp	r2, r7
 8001342:	d900      	bls.n	8001346 <__aeabi_ddiv+0x442>
 8001344:	e735      	b.n	80011b2 <__aeabi_ddiv+0x2ae>
 8001346:	464b      	mov	r3, r9
 8001348:	07dc      	lsls	r4, r3, #31
 800134a:	0858      	lsrs	r0, r3, #1
 800134c:	087b      	lsrs	r3, r7, #1
 800134e:	431c      	orrs	r4, r3
 8001350:	07ff      	lsls	r7, r7, #31
 8001352:	e734      	b.n	80011be <__aeabi_ddiv+0x2ba>
 8001354:	2400      	movs	r4, #0
 8001356:	42af      	cmp	r7, r5
 8001358:	d289      	bcs.n	800126e <__aeabi_ddiv+0x36a>
 800135a:	4447      	add	r7, r8
 800135c:	4547      	cmp	r7, r8
 800135e:	41a4      	sbcs	r4, r4
 8001360:	465b      	mov	r3, fp
 8001362:	4264      	negs	r4, r4
 8001364:	19a4      	adds	r4, r4, r6
 8001366:	1864      	adds	r4, r4, r1
 8001368:	3b01      	subs	r3, #1
 800136a:	42a6      	cmp	r6, r4
 800136c:	d21e      	bcs.n	80013ac <__aeabi_ddiv+0x4a8>
 800136e:	42a0      	cmp	r0, r4
 8001370:	d86d      	bhi.n	800144e <__aeabi_ddiv+0x54a>
 8001372:	d100      	bne.n	8001376 <__aeabi_ddiv+0x472>
 8001374:	e0b6      	b.n	80014e4 <__aeabi_ddiv+0x5e0>
 8001376:	1a24      	subs	r4, r4, r0
 8001378:	469b      	mov	fp, r3
 800137a:	e778      	b.n	800126e <__aeabi_ddiv+0x36a>
 800137c:	0003      	movs	r3, r0
 800137e:	465a      	mov	r2, fp
 8001380:	3b28      	subs	r3, #40	; 0x28
 8001382:	409a      	lsls	r2, r3
 8001384:	2700      	movs	r7, #0
 8001386:	4691      	mov	r9, r2
 8001388:	e688      	b.n	800109c <__aeabi_ddiv+0x198>
 800138a:	4658      	mov	r0, fp
 800138c:	f000 fc1e 	bl	8001bcc <__clzsi2>
 8001390:	3020      	adds	r0, #32
 8001392:	e672      	b.n	800107a <__aeabi_ddiv+0x176>
 8001394:	0003      	movs	r3, r0
 8001396:	4652      	mov	r2, sl
 8001398:	3b28      	subs	r3, #40	; 0x28
 800139a:	409a      	lsls	r2, r3
 800139c:	4693      	mov	fp, r2
 800139e:	2200      	movs	r2, #0
 80013a0:	e6b4      	b.n	800110c <__aeabi_ddiv+0x208>
 80013a2:	4650      	mov	r0, sl
 80013a4:	f000 fc12 	bl	8001bcc <__clzsi2>
 80013a8:	3020      	adds	r0, #32
 80013aa:	e69a      	b.n	80010e2 <__aeabi_ddiv+0x1de>
 80013ac:	42a6      	cmp	r6, r4
 80013ae:	d1e2      	bne.n	8001376 <__aeabi_ddiv+0x472>
 80013b0:	45b8      	cmp	r8, r7
 80013b2:	d9dc      	bls.n	800136e <__aeabi_ddiv+0x46a>
 80013b4:	1a34      	subs	r4, r6, r0
 80013b6:	469b      	mov	fp, r3
 80013b8:	e759      	b.n	800126e <__aeabi_ddiv+0x36a>
 80013ba:	2b1f      	cmp	r3, #31
 80013bc:	dc65      	bgt.n	800148a <__aeabi_ddiv+0x586>
 80013be:	4c50      	ldr	r4, [pc, #320]	; (8001500 <__aeabi_ddiv+0x5fc>)
 80013c0:	9900      	ldr	r1, [sp, #0]
 80013c2:	46a4      	mov	ip, r4
 80013c4:	465c      	mov	r4, fp
 80013c6:	4461      	add	r1, ip
 80013c8:	0008      	movs	r0, r1
 80013ca:	408c      	lsls	r4, r1
 80013cc:	0011      	movs	r1, r2
 80013ce:	4082      	lsls	r2, r0
 80013d0:	40d9      	lsrs	r1, r3
 80013d2:	1e50      	subs	r0, r2, #1
 80013d4:	4182      	sbcs	r2, r0
 80013d6:	430c      	orrs	r4, r1
 80013d8:	4314      	orrs	r4, r2
 80013da:	465a      	mov	r2, fp
 80013dc:	40da      	lsrs	r2, r3
 80013de:	0013      	movs	r3, r2
 80013e0:	0762      	lsls	r2, r4, #29
 80013e2:	d009      	beq.n	80013f8 <__aeabi_ddiv+0x4f4>
 80013e4:	220f      	movs	r2, #15
 80013e6:	4022      	ands	r2, r4
 80013e8:	2a04      	cmp	r2, #4
 80013ea:	d005      	beq.n	80013f8 <__aeabi_ddiv+0x4f4>
 80013ec:	0022      	movs	r2, r4
 80013ee:	1d14      	adds	r4, r2, #4
 80013f0:	4294      	cmp	r4, r2
 80013f2:	4189      	sbcs	r1, r1
 80013f4:	4249      	negs	r1, r1
 80013f6:	185b      	adds	r3, r3, r1
 80013f8:	021a      	lsls	r2, r3, #8
 80013fa:	d562      	bpl.n	80014c2 <__aeabi_ddiv+0x5be>
 80013fc:	2201      	movs	r2, #1
 80013fe:	2300      	movs	r3, #0
 8001400:	2700      	movs	r7, #0
 8001402:	e60d      	b.n	8001020 <__aeabi_ddiv+0x11c>
 8001404:	428a      	cmp	r2, r1
 8001406:	d800      	bhi.n	800140a <__aeabi_ddiv+0x506>
 8001408:	e70a      	b.n	8001220 <__aeabi_ddiv+0x31c>
 800140a:	1e83      	subs	r3, r0, #2
 800140c:	1989      	adds	r1, r1, r6
 800140e:	e707      	b.n	8001220 <__aeabi_ddiv+0x31c>
 8001410:	230f      	movs	r3, #15
 8001412:	4013      	ands	r3, r2
 8001414:	2b04      	cmp	r3, #4
 8001416:	d100      	bne.n	800141a <__aeabi_ddiv+0x516>
 8001418:	e5e6      	b.n	8000fe8 <__aeabi_ddiv+0xe4>
 800141a:	1d17      	adds	r7, r2, #4
 800141c:	4297      	cmp	r7, r2
 800141e:	4192      	sbcs	r2, r2
 8001420:	4253      	negs	r3, r2
 8001422:	449b      	add	fp, r3
 8001424:	08fa      	lsrs	r2, r7, #3
 8001426:	e5e0      	b.n	8000fea <__aeabi_ddiv+0xe6>
 8001428:	2800      	cmp	r0, #0
 800142a:	d100      	bne.n	800142e <__aeabi_ddiv+0x52a>
 800142c:	e5d7      	b.n	8000fde <__aeabi_ddiv+0xda>
 800142e:	1871      	adds	r1, r6, r1
 8001430:	1e53      	subs	r3, r2, #1
 8001432:	42b1      	cmp	r1, r6
 8001434:	d327      	bcc.n	8001486 <__aeabi_ddiv+0x582>
 8001436:	42a9      	cmp	r1, r5
 8001438:	d315      	bcc.n	8001466 <__aeabi_ddiv+0x562>
 800143a:	d058      	beq.n	80014ee <__aeabi_ddiv+0x5ea>
 800143c:	001a      	movs	r2, r3
 800143e:	e773      	b.n	8001328 <__aeabi_ddiv+0x424>
 8001440:	2b00      	cmp	r3, #0
 8001442:	dc00      	bgt.n	8001446 <__aeabi_ddiv+0x542>
 8001444:	e604      	b.n	8001050 <__aeabi_ddiv+0x14c>
 8001446:	2301      	movs	r3, #1
 8001448:	2200      	movs	r2, #0
 800144a:	449b      	add	fp, r3
 800144c:	e5cd      	b.n	8000fea <__aeabi_ddiv+0xe6>
 800144e:	2302      	movs	r3, #2
 8001450:	4447      	add	r7, r8
 8001452:	4547      	cmp	r7, r8
 8001454:	4189      	sbcs	r1, r1
 8001456:	425b      	negs	r3, r3
 8001458:	469c      	mov	ip, r3
 800145a:	4249      	negs	r1, r1
 800145c:	1989      	adds	r1, r1, r6
 800145e:	190c      	adds	r4, r1, r4
 8001460:	44e3      	add	fp, ip
 8001462:	1a24      	subs	r4, r4, r0
 8001464:	e703      	b.n	800126e <__aeabi_ddiv+0x36a>
 8001466:	4643      	mov	r3, r8
 8001468:	005f      	lsls	r7, r3, #1
 800146a:	4547      	cmp	r7, r8
 800146c:	419b      	sbcs	r3, r3
 800146e:	46b8      	mov	r8, r7
 8001470:	425b      	negs	r3, r3
 8001472:	199e      	adds	r6, r3, r6
 8001474:	3a02      	subs	r2, #2
 8001476:	1989      	adds	r1, r1, r6
 8001478:	42a9      	cmp	r1, r5
 800147a:	d000      	beq.n	800147e <__aeabi_ddiv+0x57a>
 800147c:	e754      	b.n	8001328 <__aeabi_ddiv+0x424>
 800147e:	4540      	cmp	r0, r8
 8001480:	d000      	beq.n	8001484 <__aeabi_ddiv+0x580>
 8001482:	e751      	b.n	8001328 <__aeabi_ddiv+0x424>
 8001484:	e5ab      	b.n	8000fde <__aeabi_ddiv+0xda>
 8001486:	001a      	movs	r2, r3
 8001488:	e7f6      	b.n	8001478 <__aeabi_ddiv+0x574>
 800148a:	211f      	movs	r1, #31
 800148c:	465f      	mov	r7, fp
 800148e:	4249      	negs	r1, r1
 8001490:	1b0c      	subs	r4, r1, r4
 8001492:	40e7      	lsrs	r7, r4
 8001494:	2b20      	cmp	r3, #32
 8001496:	d007      	beq.n	80014a8 <__aeabi_ddiv+0x5a4>
 8001498:	491a      	ldr	r1, [pc, #104]	; (8001504 <__aeabi_ddiv+0x600>)
 800149a:	9b00      	ldr	r3, [sp, #0]
 800149c:	468c      	mov	ip, r1
 800149e:	4463      	add	r3, ip
 80014a0:	0018      	movs	r0, r3
 80014a2:	465b      	mov	r3, fp
 80014a4:	4083      	lsls	r3, r0
 80014a6:	431a      	orrs	r2, r3
 80014a8:	1e50      	subs	r0, r2, #1
 80014aa:	4182      	sbcs	r2, r0
 80014ac:	433a      	orrs	r2, r7
 80014ae:	2707      	movs	r7, #7
 80014b0:	2300      	movs	r3, #0
 80014b2:	4017      	ands	r7, r2
 80014b4:	d009      	beq.n	80014ca <__aeabi_ddiv+0x5c6>
 80014b6:	210f      	movs	r1, #15
 80014b8:	2300      	movs	r3, #0
 80014ba:	4011      	ands	r1, r2
 80014bc:	0014      	movs	r4, r2
 80014be:	2904      	cmp	r1, #4
 80014c0:	d195      	bne.n	80013ee <__aeabi_ddiv+0x4ea>
 80014c2:	0022      	movs	r2, r4
 80014c4:	075f      	lsls	r7, r3, #29
 80014c6:	025b      	lsls	r3, r3, #9
 80014c8:	0b1b      	lsrs	r3, r3, #12
 80014ca:	08d2      	lsrs	r2, r2, #3
 80014cc:	4317      	orrs	r7, r2
 80014ce:	2200      	movs	r2, #0
 80014d0:	e5a6      	b.n	8001020 <__aeabi_ddiv+0x11c>
 80014d2:	2380      	movs	r3, #128	; 0x80
 80014d4:	4659      	mov	r1, fp
 80014d6:	031b      	lsls	r3, r3, #12
 80014d8:	430b      	orrs	r3, r1
 80014da:	031b      	lsls	r3, r3, #12
 80014dc:	0017      	movs	r7, r2
 80014de:	0b1b      	lsrs	r3, r3, #12
 80014e0:	4a06      	ldr	r2, [pc, #24]	; (80014fc <__aeabi_ddiv+0x5f8>)
 80014e2:	e59d      	b.n	8001020 <__aeabi_ddiv+0x11c>
 80014e4:	42bd      	cmp	r5, r7
 80014e6:	d8b2      	bhi.n	800144e <__aeabi_ddiv+0x54a>
 80014e8:	469b      	mov	fp, r3
 80014ea:	2400      	movs	r4, #0
 80014ec:	e6bf      	b.n	800126e <__aeabi_ddiv+0x36a>
 80014ee:	4580      	cmp	r8, r0
 80014f0:	d3b9      	bcc.n	8001466 <__aeabi_ddiv+0x562>
 80014f2:	001a      	movs	r2, r3
 80014f4:	e7c3      	b.n	800147e <__aeabi_ddiv+0x57a>
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	000003ff 	.word	0x000003ff
 80014fc:	000007ff 	.word	0x000007ff
 8001500:	0000041e 	.word	0x0000041e
 8001504:	0000043e 	.word	0x0000043e

08001508 <__aeabi_dmul>:
 8001508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800150a:	4657      	mov	r7, sl
 800150c:	46de      	mov	lr, fp
 800150e:	464e      	mov	r6, r9
 8001510:	4645      	mov	r5, r8
 8001512:	b5e0      	push	{r5, r6, r7, lr}
 8001514:	4683      	mov	fp, r0
 8001516:	0006      	movs	r6, r0
 8001518:	030f      	lsls	r7, r1, #12
 800151a:	0048      	lsls	r0, r1, #1
 800151c:	b087      	sub	sp, #28
 800151e:	4692      	mov	sl, r2
 8001520:	001d      	movs	r5, r3
 8001522:	0b3f      	lsrs	r7, r7, #12
 8001524:	0d40      	lsrs	r0, r0, #21
 8001526:	0fcc      	lsrs	r4, r1, #31
 8001528:	2800      	cmp	r0, #0
 800152a:	d100      	bne.n	800152e <__aeabi_dmul+0x26>
 800152c:	e06f      	b.n	800160e <__aeabi_dmul+0x106>
 800152e:	4bde      	ldr	r3, [pc, #888]	; (80018a8 <__aeabi_dmul+0x3a0>)
 8001530:	4298      	cmp	r0, r3
 8001532:	d038      	beq.n	80015a6 <__aeabi_dmul+0x9e>
 8001534:	2380      	movs	r3, #128	; 0x80
 8001536:	00ff      	lsls	r7, r7, #3
 8001538:	041b      	lsls	r3, r3, #16
 800153a:	431f      	orrs	r7, r3
 800153c:	0f73      	lsrs	r3, r6, #29
 800153e:	433b      	orrs	r3, r7
 8001540:	9301      	str	r3, [sp, #4]
 8001542:	4bda      	ldr	r3, [pc, #872]	; (80018ac <__aeabi_dmul+0x3a4>)
 8001544:	2700      	movs	r7, #0
 8001546:	4699      	mov	r9, r3
 8001548:	2300      	movs	r3, #0
 800154a:	469b      	mov	fp, r3
 800154c:	00f6      	lsls	r6, r6, #3
 800154e:	4481      	add	r9, r0
 8001550:	032b      	lsls	r3, r5, #12
 8001552:	0069      	lsls	r1, r5, #1
 8001554:	0b1b      	lsrs	r3, r3, #12
 8001556:	4652      	mov	r2, sl
 8001558:	4698      	mov	r8, r3
 800155a:	0d49      	lsrs	r1, r1, #21
 800155c:	0fed      	lsrs	r5, r5, #31
 800155e:	2900      	cmp	r1, #0
 8001560:	d100      	bne.n	8001564 <__aeabi_dmul+0x5c>
 8001562:	e085      	b.n	8001670 <__aeabi_dmul+0x168>
 8001564:	4bd0      	ldr	r3, [pc, #832]	; (80018a8 <__aeabi_dmul+0x3a0>)
 8001566:	4299      	cmp	r1, r3
 8001568:	d100      	bne.n	800156c <__aeabi_dmul+0x64>
 800156a:	e073      	b.n	8001654 <__aeabi_dmul+0x14c>
 800156c:	4643      	mov	r3, r8
 800156e:	00da      	lsls	r2, r3, #3
 8001570:	2380      	movs	r3, #128	; 0x80
 8001572:	041b      	lsls	r3, r3, #16
 8001574:	4313      	orrs	r3, r2
 8001576:	4652      	mov	r2, sl
 8001578:	48cc      	ldr	r0, [pc, #816]	; (80018ac <__aeabi_dmul+0x3a4>)
 800157a:	0f52      	lsrs	r2, r2, #29
 800157c:	4684      	mov	ip, r0
 800157e:	4313      	orrs	r3, r2
 8001580:	4652      	mov	r2, sl
 8001582:	2000      	movs	r0, #0
 8001584:	4461      	add	r1, ip
 8001586:	00d2      	lsls	r2, r2, #3
 8001588:	4489      	add	r9, r1
 800158a:	0021      	movs	r1, r4
 800158c:	4069      	eors	r1, r5
 800158e:	9100      	str	r1, [sp, #0]
 8001590:	468c      	mov	ip, r1
 8001592:	2101      	movs	r1, #1
 8001594:	4449      	add	r1, r9
 8001596:	468a      	mov	sl, r1
 8001598:	2f0f      	cmp	r7, #15
 800159a:	d900      	bls.n	800159e <__aeabi_dmul+0x96>
 800159c:	e090      	b.n	80016c0 <__aeabi_dmul+0x1b8>
 800159e:	49c4      	ldr	r1, [pc, #784]	; (80018b0 <__aeabi_dmul+0x3a8>)
 80015a0:	00bf      	lsls	r7, r7, #2
 80015a2:	59cf      	ldr	r7, [r1, r7]
 80015a4:	46bf      	mov	pc, r7
 80015a6:	465b      	mov	r3, fp
 80015a8:	433b      	orrs	r3, r7
 80015aa:	9301      	str	r3, [sp, #4]
 80015ac:	d000      	beq.n	80015b0 <__aeabi_dmul+0xa8>
 80015ae:	e16a      	b.n	8001886 <__aeabi_dmul+0x37e>
 80015b0:	2302      	movs	r3, #2
 80015b2:	2708      	movs	r7, #8
 80015b4:	2600      	movs	r6, #0
 80015b6:	4681      	mov	r9, r0
 80015b8:	469b      	mov	fp, r3
 80015ba:	e7c9      	b.n	8001550 <__aeabi_dmul+0x48>
 80015bc:	0032      	movs	r2, r6
 80015be:	4658      	mov	r0, fp
 80015c0:	9b01      	ldr	r3, [sp, #4]
 80015c2:	4661      	mov	r1, ip
 80015c4:	9100      	str	r1, [sp, #0]
 80015c6:	2802      	cmp	r0, #2
 80015c8:	d100      	bne.n	80015cc <__aeabi_dmul+0xc4>
 80015ca:	e075      	b.n	80016b8 <__aeabi_dmul+0x1b0>
 80015cc:	2803      	cmp	r0, #3
 80015ce:	d100      	bne.n	80015d2 <__aeabi_dmul+0xca>
 80015d0:	e1fe      	b.n	80019d0 <__aeabi_dmul+0x4c8>
 80015d2:	2801      	cmp	r0, #1
 80015d4:	d000      	beq.n	80015d8 <__aeabi_dmul+0xd0>
 80015d6:	e12c      	b.n	8001832 <__aeabi_dmul+0x32a>
 80015d8:	2300      	movs	r3, #0
 80015da:	2700      	movs	r7, #0
 80015dc:	2600      	movs	r6, #0
 80015de:	2500      	movs	r5, #0
 80015e0:	033f      	lsls	r7, r7, #12
 80015e2:	0d2a      	lsrs	r2, r5, #20
 80015e4:	0b3f      	lsrs	r7, r7, #12
 80015e6:	48b3      	ldr	r0, [pc, #716]	; (80018b4 <__aeabi_dmul+0x3ac>)
 80015e8:	0512      	lsls	r2, r2, #20
 80015ea:	433a      	orrs	r2, r7
 80015ec:	4002      	ands	r2, r0
 80015ee:	051b      	lsls	r3, r3, #20
 80015f0:	4313      	orrs	r3, r2
 80015f2:	9a00      	ldr	r2, [sp, #0]
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	07d1      	lsls	r1, r2, #31
 80015f8:	085b      	lsrs	r3, r3, #1
 80015fa:	430b      	orrs	r3, r1
 80015fc:	0030      	movs	r0, r6
 80015fe:	0019      	movs	r1, r3
 8001600:	b007      	add	sp, #28
 8001602:	bc3c      	pop	{r2, r3, r4, r5}
 8001604:	4690      	mov	r8, r2
 8001606:	4699      	mov	r9, r3
 8001608:	46a2      	mov	sl, r4
 800160a:	46ab      	mov	fp, r5
 800160c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800160e:	465b      	mov	r3, fp
 8001610:	433b      	orrs	r3, r7
 8001612:	9301      	str	r3, [sp, #4]
 8001614:	d100      	bne.n	8001618 <__aeabi_dmul+0x110>
 8001616:	e12f      	b.n	8001878 <__aeabi_dmul+0x370>
 8001618:	2f00      	cmp	r7, #0
 800161a:	d100      	bne.n	800161e <__aeabi_dmul+0x116>
 800161c:	e1a5      	b.n	800196a <__aeabi_dmul+0x462>
 800161e:	0038      	movs	r0, r7
 8001620:	f000 fad4 	bl	8001bcc <__clzsi2>
 8001624:	0003      	movs	r3, r0
 8001626:	3b0b      	subs	r3, #11
 8001628:	2b1c      	cmp	r3, #28
 800162a:	dd00      	ble.n	800162e <__aeabi_dmul+0x126>
 800162c:	e196      	b.n	800195c <__aeabi_dmul+0x454>
 800162e:	221d      	movs	r2, #29
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	465a      	mov	r2, fp
 8001634:	0001      	movs	r1, r0
 8001636:	40da      	lsrs	r2, r3
 8001638:	465e      	mov	r6, fp
 800163a:	3908      	subs	r1, #8
 800163c:	408f      	lsls	r7, r1
 800163e:	0013      	movs	r3, r2
 8001640:	408e      	lsls	r6, r1
 8001642:	433b      	orrs	r3, r7
 8001644:	9301      	str	r3, [sp, #4]
 8001646:	4b9c      	ldr	r3, [pc, #624]	; (80018b8 <__aeabi_dmul+0x3b0>)
 8001648:	2700      	movs	r7, #0
 800164a:	1a1b      	subs	r3, r3, r0
 800164c:	4699      	mov	r9, r3
 800164e:	2300      	movs	r3, #0
 8001650:	469b      	mov	fp, r3
 8001652:	e77d      	b.n	8001550 <__aeabi_dmul+0x48>
 8001654:	4641      	mov	r1, r8
 8001656:	4653      	mov	r3, sl
 8001658:	430b      	orrs	r3, r1
 800165a:	4993      	ldr	r1, [pc, #588]	; (80018a8 <__aeabi_dmul+0x3a0>)
 800165c:	468c      	mov	ip, r1
 800165e:	44e1      	add	r9, ip
 8001660:	2b00      	cmp	r3, #0
 8001662:	d000      	beq.n	8001666 <__aeabi_dmul+0x15e>
 8001664:	e11a      	b.n	800189c <__aeabi_dmul+0x394>
 8001666:	2202      	movs	r2, #2
 8001668:	2002      	movs	r0, #2
 800166a:	4317      	orrs	r7, r2
 800166c:	2200      	movs	r2, #0
 800166e:	e78c      	b.n	800158a <__aeabi_dmul+0x82>
 8001670:	4313      	orrs	r3, r2
 8001672:	d100      	bne.n	8001676 <__aeabi_dmul+0x16e>
 8001674:	e10d      	b.n	8001892 <__aeabi_dmul+0x38a>
 8001676:	4643      	mov	r3, r8
 8001678:	2b00      	cmp	r3, #0
 800167a:	d100      	bne.n	800167e <__aeabi_dmul+0x176>
 800167c:	e181      	b.n	8001982 <__aeabi_dmul+0x47a>
 800167e:	4640      	mov	r0, r8
 8001680:	f000 faa4 	bl	8001bcc <__clzsi2>
 8001684:	0002      	movs	r2, r0
 8001686:	3a0b      	subs	r2, #11
 8001688:	2a1c      	cmp	r2, #28
 800168a:	dd00      	ble.n	800168e <__aeabi_dmul+0x186>
 800168c:	e172      	b.n	8001974 <__aeabi_dmul+0x46c>
 800168e:	0001      	movs	r1, r0
 8001690:	4643      	mov	r3, r8
 8001692:	3908      	subs	r1, #8
 8001694:	408b      	lsls	r3, r1
 8001696:	4698      	mov	r8, r3
 8001698:	231d      	movs	r3, #29
 800169a:	1a9a      	subs	r2, r3, r2
 800169c:	4653      	mov	r3, sl
 800169e:	40d3      	lsrs	r3, r2
 80016a0:	001a      	movs	r2, r3
 80016a2:	4643      	mov	r3, r8
 80016a4:	4313      	orrs	r3, r2
 80016a6:	4652      	mov	r2, sl
 80016a8:	408a      	lsls	r2, r1
 80016aa:	4649      	mov	r1, r9
 80016ac:	1a08      	subs	r0, r1, r0
 80016ae:	4982      	ldr	r1, [pc, #520]	; (80018b8 <__aeabi_dmul+0x3b0>)
 80016b0:	4689      	mov	r9, r1
 80016b2:	4481      	add	r9, r0
 80016b4:	2000      	movs	r0, #0
 80016b6:	e768      	b.n	800158a <__aeabi_dmul+0x82>
 80016b8:	4b7b      	ldr	r3, [pc, #492]	; (80018a8 <__aeabi_dmul+0x3a0>)
 80016ba:	2700      	movs	r7, #0
 80016bc:	2600      	movs	r6, #0
 80016be:	e78e      	b.n	80015de <__aeabi_dmul+0xd6>
 80016c0:	0c14      	lsrs	r4, r2, #16
 80016c2:	0412      	lsls	r2, r2, #16
 80016c4:	0c12      	lsrs	r2, r2, #16
 80016c6:	0011      	movs	r1, r2
 80016c8:	0c37      	lsrs	r7, r6, #16
 80016ca:	0436      	lsls	r6, r6, #16
 80016cc:	0c35      	lsrs	r5, r6, #16
 80016ce:	4379      	muls	r1, r7
 80016d0:	0028      	movs	r0, r5
 80016d2:	468c      	mov	ip, r1
 80016d4:	002e      	movs	r6, r5
 80016d6:	4360      	muls	r0, r4
 80016d8:	4460      	add	r0, ip
 80016da:	4683      	mov	fp, r0
 80016dc:	4356      	muls	r6, r2
 80016de:	0021      	movs	r1, r4
 80016e0:	0c30      	lsrs	r0, r6, #16
 80016e2:	4680      	mov	r8, r0
 80016e4:	4658      	mov	r0, fp
 80016e6:	4379      	muls	r1, r7
 80016e8:	4440      	add	r0, r8
 80016ea:	9102      	str	r1, [sp, #8]
 80016ec:	4584      	cmp	ip, r0
 80016ee:	d906      	bls.n	80016fe <__aeabi_dmul+0x1f6>
 80016f0:	4688      	mov	r8, r1
 80016f2:	2180      	movs	r1, #128	; 0x80
 80016f4:	0249      	lsls	r1, r1, #9
 80016f6:	468c      	mov	ip, r1
 80016f8:	44e0      	add	r8, ip
 80016fa:	4641      	mov	r1, r8
 80016fc:	9102      	str	r1, [sp, #8]
 80016fe:	0436      	lsls	r6, r6, #16
 8001700:	0c01      	lsrs	r1, r0, #16
 8001702:	0c36      	lsrs	r6, r6, #16
 8001704:	0400      	lsls	r0, r0, #16
 8001706:	468b      	mov	fp, r1
 8001708:	1981      	adds	r1, r0, r6
 800170a:	0c1e      	lsrs	r6, r3, #16
 800170c:	041b      	lsls	r3, r3, #16
 800170e:	0c1b      	lsrs	r3, r3, #16
 8001710:	9103      	str	r1, [sp, #12]
 8001712:	0019      	movs	r1, r3
 8001714:	4379      	muls	r1, r7
 8001716:	468c      	mov	ip, r1
 8001718:	0028      	movs	r0, r5
 800171a:	4375      	muls	r5, r6
 800171c:	4465      	add	r5, ip
 800171e:	46a8      	mov	r8, r5
 8001720:	4358      	muls	r0, r3
 8001722:	0c05      	lsrs	r5, r0, #16
 8001724:	4445      	add	r5, r8
 8001726:	4377      	muls	r7, r6
 8001728:	42a9      	cmp	r1, r5
 800172a:	d903      	bls.n	8001734 <__aeabi_dmul+0x22c>
 800172c:	2180      	movs	r1, #128	; 0x80
 800172e:	0249      	lsls	r1, r1, #9
 8001730:	468c      	mov	ip, r1
 8001732:	4467      	add	r7, ip
 8001734:	0c29      	lsrs	r1, r5, #16
 8001736:	468c      	mov	ip, r1
 8001738:	0039      	movs	r1, r7
 800173a:	0400      	lsls	r0, r0, #16
 800173c:	0c00      	lsrs	r0, r0, #16
 800173e:	042d      	lsls	r5, r5, #16
 8001740:	182d      	adds	r5, r5, r0
 8001742:	4461      	add	r1, ip
 8001744:	44ab      	add	fp, r5
 8001746:	9105      	str	r1, [sp, #20]
 8001748:	4659      	mov	r1, fp
 800174a:	9104      	str	r1, [sp, #16]
 800174c:	9901      	ldr	r1, [sp, #4]
 800174e:	040f      	lsls	r7, r1, #16
 8001750:	0c3f      	lsrs	r7, r7, #16
 8001752:	0c08      	lsrs	r0, r1, #16
 8001754:	0039      	movs	r1, r7
 8001756:	4351      	muls	r1, r2
 8001758:	4342      	muls	r2, r0
 800175a:	4690      	mov	r8, r2
 800175c:	0002      	movs	r2, r0
 800175e:	468c      	mov	ip, r1
 8001760:	0c09      	lsrs	r1, r1, #16
 8001762:	468b      	mov	fp, r1
 8001764:	4362      	muls	r2, r4
 8001766:	437c      	muls	r4, r7
 8001768:	4444      	add	r4, r8
 800176a:	445c      	add	r4, fp
 800176c:	45a0      	cmp	r8, r4
 800176e:	d903      	bls.n	8001778 <__aeabi_dmul+0x270>
 8001770:	2180      	movs	r1, #128	; 0x80
 8001772:	0249      	lsls	r1, r1, #9
 8001774:	4688      	mov	r8, r1
 8001776:	4442      	add	r2, r8
 8001778:	0c21      	lsrs	r1, r4, #16
 800177a:	4688      	mov	r8, r1
 800177c:	4661      	mov	r1, ip
 800177e:	0409      	lsls	r1, r1, #16
 8001780:	0c09      	lsrs	r1, r1, #16
 8001782:	468c      	mov	ip, r1
 8001784:	0039      	movs	r1, r7
 8001786:	4359      	muls	r1, r3
 8001788:	4343      	muls	r3, r0
 800178a:	4370      	muls	r0, r6
 800178c:	437e      	muls	r6, r7
 800178e:	0c0f      	lsrs	r7, r1, #16
 8001790:	18f6      	adds	r6, r6, r3
 8001792:	0424      	lsls	r4, r4, #16
 8001794:	19be      	adds	r6, r7, r6
 8001796:	4464      	add	r4, ip
 8001798:	4442      	add	r2, r8
 800179a:	468c      	mov	ip, r1
 800179c:	42b3      	cmp	r3, r6
 800179e:	d903      	bls.n	80017a8 <__aeabi_dmul+0x2a0>
 80017a0:	2380      	movs	r3, #128	; 0x80
 80017a2:	025b      	lsls	r3, r3, #9
 80017a4:	4698      	mov	r8, r3
 80017a6:	4440      	add	r0, r8
 80017a8:	9b02      	ldr	r3, [sp, #8]
 80017aa:	4661      	mov	r1, ip
 80017ac:	4698      	mov	r8, r3
 80017ae:	9b04      	ldr	r3, [sp, #16]
 80017b0:	0437      	lsls	r7, r6, #16
 80017b2:	4443      	add	r3, r8
 80017b4:	469b      	mov	fp, r3
 80017b6:	45ab      	cmp	fp, r5
 80017b8:	41ad      	sbcs	r5, r5
 80017ba:	426b      	negs	r3, r5
 80017bc:	040d      	lsls	r5, r1, #16
 80017be:	9905      	ldr	r1, [sp, #20]
 80017c0:	0c2d      	lsrs	r5, r5, #16
 80017c2:	468c      	mov	ip, r1
 80017c4:	197f      	adds	r7, r7, r5
 80017c6:	4467      	add	r7, ip
 80017c8:	18fd      	adds	r5, r7, r3
 80017ca:	46a8      	mov	r8, r5
 80017cc:	465d      	mov	r5, fp
 80017ce:	192d      	adds	r5, r5, r4
 80017d0:	42a5      	cmp	r5, r4
 80017d2:	41a4      	sbcs	r4, r4
 80017d4:	4693      	mov	fp, r2
 80017d6:	4264      	negs	r4, r4
 80017d8:	46a4      	mov	ip, r4
 80017da:	44c3      	add	fp, r8
 80017dc:	44dc      	add	ip, fp
 80017de:	428f      	cmp	r7, r1
 80017e0:	41bf      	sbcs	r7, r7
 80017e2:	4598      	cmp	r8, r3
 80017e4:	419b      	sbcs	r3, r3
 80017e6:	4593      	cmp	fp, r2
 80017e8:	4192      	sbcs	r2, r2
 80017ea:	45a4      	cmp	ip, r4
 80017ec:	41a4      	sbcs	r4, r4
 80017ee:	425b      	negs	r3, r3
 80017f0:	427f      	negs	r7, r7
 80017f2:	431f      	orrs	r7, r3
 80017f4:	0c36      	lsrs	r6, r6, #16
 80017f6:	4252      	negs	r2, r2
 80017f8:	4264      	negs	r4, r4
 80017fa:	19bf      	adds	r7, r7, r6
 80017fc:	4322      	orrs	r2, r4
 80017fe:	18bf      	adds	r7, r7, r2
 8001800:	4662      	mov	r2, ip
 8001802:	1838      	adds	r0, r7, r0
 8001804:	0243      	lsls	r3, r0, #9
 8001806:	0dd2      	lsrs	r2, r2, #23
 8001808:	9903      	ldr	r1, [sp, #12]
 800180a:	4313      	orrs	r3, r2
 800180c:	026a      	lsls	r2, r5, #9
 800180e:	430a      	orrs	r2, r1
 8001810:	1e50      	subs	r0, r2, #1
 8001812:	4182      	sbcs	r2, r0
 8001814:	4661      	mov	r1, ip
 8001816:	0ded      	lsrs	r5, r5, #23
 8001818:	432a      	orrs	r2, r5
 800181a:	024e      	lsls	r6, r1, #9
 800181c:	4332      	orrs	r2, r6
 800181e:	01d9      	lsls	r1, r3, #7
 8001820:	d400      	bmi.n	8001824 <__aeabi_dmul+0x31c>
 8001822:	e0b3      	b.n	800198c <__aeabi_dmul+0x484>
 8001824:	2601      	movs	r6, #1
 8001826:	0850      	lsrs	r0, r2, #1
 8001828:	4032      	ands	r2, r6
 800182a:	4302      	orrs	r2, r0
 800182c:	07de      	lsls	r6, r3, #31
 800182e:	4332      	orrs	r2, r6
 8001830:	085b      	lsrs	r3, r3, #1
 8001832:	4c22      	ldr	r4, [pc, #136]	; (80018bc <__aeabi_dmul+0x3b4>)
 8001834:	4454      	add	r4, sl
 8001836:	2c00      	cmp	r4, #0
 8001838:	dd62      	ble.n	8001900 <__aeabi_dmul+0x3f8>
 800183a:	0751      	lsls	r1, r2, #29
 800183c:	d009      	beq.n	8001852 <__aeabi_dmul+0x34a>
 800183e:	200f      	movs	r0, #15
 8001840:	4010      	ands	r0, r2
 8001842:	2804      	cmp	r0, #4
 8001844:	d005      	beq.n	8001852 <__aeabi_dmul+0x34a>
 8001846:	1d10      	adds	r0, r2, #4
 8001848:	4290      	cmp	r0, r2
 800184a:	4192      	sbcs	r2, r2
 800184c:	4252      	negs	r2, r2
 800184e:	189b      	adds	r3, r3, r2
 8001850:	0002      	movs	r2, r0
 8001852:	01d9      	lsls	r1, r3, #7
 8001854:	d504      	bpl.n	8001860 <__aeabi_dmul+0x358>
 8001856:	2480      	movs	r4, #128	; 0x80
 8001858:	4819      	ldr	r0, [pc, #100]	; (80018c0 <__aeabi_dmul+0x3b8>)
 800185a:	00e4      	lsls	r4, r4, #3
 800185c:	4003      	ands	r3, r0
 800185e:	4454      	add	r4, sl
 8001860:	4818      	ldr	r0, [pc, #96]	; (80018c4 <__aeabi_dmul+0x3bc>)
 8001862:	4284      	cmp	r4, r0
 8001864:	dd00      	ble.n	8001868 <__aeabi_dmul+0x360>
 8001866:	e727      	b.n	80016b8 <__aeabi_dmul+0x1b0>
 8001868:	075e      	lsls	r6, r3, #29
 800186a:	025b      	lsls	r3, r3, #9
 800186c:	08d2      	lsrs	r2, r2, #3
 800186e:	0b1f      	lsrs	r7, r3, #12
 8001870:	0563      	lsls	r3, r4, #21
 8001872:	4316      	orrs	r6, r2
 8001874:	0d5b      	lsrs	r3, r3, #21
 8001876:	e6b2      	b.n	80015de <__aeabi_dmul+0xd6>
 8001878:	2300      	movs	r3, #0
 800187a:	4699      	mov	r9, r3
 800187c:	3301      	adds	r3, #1
 800187e:	2704      	movs	r7, #4
 8001880:	2600      	movs	r6, #0
 8001882:	469b      	mov	fp, r3
 8001884:	e664      	b.n	8001550 <__aeabi_dmul+0x48>
 8001886:	2303      	movs	r3, #3
 8001888:	9701      	str	r7, [sp, #4]
 800188a:	4681      	mov	r9, r0
 800188c:	270c      	movs	r7, #12
 800188e:	469b      	mov	fp, r3
 8001890:	e65e      	b.n	8001550 <__aeabi_dmul+0x48>
 8001892:	2201      	movs	r2, #1
 8001894:	2001      	movs	r0, #1
 8001896:	4317      	orrs	r7, r2
 8001898:	2200      	movs	r2, #0
 800189a:	e676      	b.n	800158a <__aeabi_dmul+0x82>
 800189c:	2303      	movs	r3, #3
 800189e:	2003      	movs	r0, #3
 80018a0:	431f      	orrs	r7, r3
 80018a2:	4643      	mov	r3, r8
 80018a4:	e671      	b.n	800158a <__aeabi_dmul+0x82>
 80018a6:	46c0      	nop			; (mov r8, r8)
 80018a8:	000007ff 	.word	0x000007ff
 80018ac:	fffffc01 	.word	0xfffffc01
 80018b0:	0800cd24 	.word	0x0800cd24
 80018b4:	800fffff 	.word	0x800fffff
 80018b8:	fffffc0d 	.word	0xfffffc0d
 80018bc:	000003ff 	.word	0x000003ff
 80018c0:	feffffff 	.word	0xfeffffff
 80018c4:	000007fe 	.word	0x000007fe
 80018c8:	2300      	movs	r3, #0
 80018ca:	2780      	movs	r7, #128	; 0x80
 80018cc:	9300      	str	r3, [sp, #0]
 80018ce:	033f      	lsls	r7, r7, #12
 80018d0:	2600      	movs	r6, #0
 80018d2:	4b43      	ldr	r3, [pc, #268]	; (80019e0 <__aeabi_dmul+0x4d8>)
 80018d4:	e683      	b.n	80015de <__aeabi_dmul+0xd6>
 80018d6:	9b01      	ldr	r3, [sp, #4]
 80018d8:	0032      	movs	r2, r6
 80018da:	46a4      	mov	ip, r4
 80018dc:	4658      	mov	r0, fp
 80018de:	e670      	b.n	80015c2 <__aeabi_dmul+0xba>
 80018e0:	46ac      	mov	ip, r5
 80018e2:	e66e      	b.n	80015c2 <__aeabi_dmul+0xba>
 80018e4:	2780      	movs	r7, #128	; 0x80
 80018e6:	9901      	ldr	r1, [sp, #4]
 80018e8:	033f      	lsls	r7, r7, #12
 80018ea:	4239      	tst	r1, r7
 80018ec:	d02d      	beq.n	800194a <__aeabi_dmul+0x442>
 80018ee:	423b      	tst	r3, r7
 80018f0:	d12b      	bne.n	800194a <__aeabi_dmul+0x442>
 80018f2:	431f      	orrs	r7, r3
 80018f4:	033f      	lsls	r7, r7, #12
 80018f6:	0b3f      	lsrs	r7, r7, #12
 80018f8:	9500      	str	r5, [sp, #0]
 80018fa:	0016      	movs	r6, r2
 80018fc:	4b38      	ldr	r3, [pc, #224]	; (80019e0 <__aeabi_dmul+0x4d8>)
 80018fe:	e66e      	b.n	80015de <__aeabi_dmul+0xd6>
 8001900:	2501      	movs	r5, #1
 8001902:	1b2d      	subs	r5, r5, r4
 8001904:	2d38      	cmp	r5, #56	; 0x38
 8001906:	dd00      	ble.n	800190a <__aeabi_dmul+0x402>
 8001908:	e666      	b.n	80015d8 <__aeabi_dmul+0xd0>
 800190a:	2d1f      	cmp	r5, #31
 800190c:	dc40      	bgt.n	8001990 <__aeabi_dmul+0x488>
 800190e:	4835      	ldr	r0, [pc, #212]	; (80019e4 <__aeabi_dmul+0x4dc>)
 8001910:	001c      	movs	r4, r3
 8001912:	4450      	add	r0, sl
 8001914:	0016      	movs	r6, r2
 8001916:	4082      	lsls	r2, r0
 8001918:	4084      	lsls	r4, r0
 800191a:	40ee      	lsrs	r6, r5
 800191c:	1e50      	subs	r0, r2, #1
 800191e:	4182      	sbcs	r2, r0
 8001920:	4334      	orrs	r4, r6
 8001922:	4314      	orrs	r4, r2
 8001924:	40eb      	lsrs	r3, r5
 8001926:	0762      	lsls	r2, r4, #29
 8001928:	d009      	beq.n	800193e <__aeabi_dmul+0x436>
 800192a:	220f      	movs	r2, #15
 800192c:	4022      	ands	r2, r4
 800192e:	2a04      	cmp	r2, #4
 8001930:	d005      	beq.n	800193e <__aeabi_dmul+0x436>
 8001932:	0022      	movs	r2, r4
 8001934:	1d14      	adds	r4, r2, #4
 8001936:	4294      	cmp	r4, r2
 8001938:	4180      	sbcs	r0, r0
 800193a:	4240      	negs	r0, r0
 800193c:	181b      	adds	r3, r3, r0
 800193e:	021a      	lsls	r2, r3, #8
 8001940:	d53e      	bpl.n	80019c0 <__aeabi_dmul+0x4b8>
 8001942:	2301      	movs	r3, #1
 8001944:	2700      	movs	r7, #0
 8001946:	2600      	movs	r6, #0
 8001948:	e649      	b.n	80015de <__aeabi_dmul+0xd6>
 800194a:	2780      	movs	r7, #128	; 0x80
 800194c:	9b01      	ldr	r3, [sp, #4]
 800194e:	033f      	lsls	r7, r7, #12
 8001950:	431f      	orrs	r7, r3
 8001952:	033f      	lsls	r7, r7, #12
 8001954:	0b3f      	lsrs	r7, r7, #12
 8001956:	9400      	str	r4, [sp, #0]
 8001958:	4b21      	ldr	r3, [pc, #132]	; (80019e0 <__aeabi_dmul+0x4d8>)
 800195a:	e640      	b.n	80015de <__aeabi_dmul+0xd6>
 800195c:	0003      	movs	r3, r0
 800195e:	465a      	mov	r2, fp
 8001960:	3b28      	subs	r3, #40	; 0x28
 8001962:	409a      	lsls	r2, r3
 8001964:	2600      	movs	r6, #0
 8001966:	9201      	str	r2, [sp, #4]
 8001968:	e66d      	b.n	8001646 <__aeabi_dmul+0x13e>
 800196a:	4658      	mov	r0, fp
 800196c:	f000 f92e 	bl	8001bcc <__clzsi2>
 8001970:	3020      	adds	r0, #32
 8001972:	e657      	b.n	8001624 <__aeabi_dmul+0x11c>
 8001974:	0003      	movs	r3, r0
 8001976:	4652      	mov	r2, sl
 8001978:	3b28      	subs	r3, #40	; 0x28
 800197a:	409a      	lsls	r2, r3
 800197c:	0013      	movs	r3, r2
 800197e:	2200      	movs	r2, #0
 8001980:	e693      	b.n	80016aa <__aeabi_dmul+0x1a2>
 8001982:	4650      	mov	r0, sl
 8001984:	f000 f922 	bl	8001bcc <__clzsi2>
 8001988:	3020      	adds	r0, #32
 800198a:	e67b      	b.n	8001684 <__aeabi_dmul+0x17c>
 800198c:	46ca      	mov	sl, r9
 800198e:	e750      	b.n	8001832 <__aeabi_dmul+0x32a>
 8001990:	201f      	movs	r0, #31
 8001992:	001e      	movs	r6, r3
 8001994:	4240      	negs	r0, r0
 8001996:	1b04      	subs	r4, r0, r4
 8001998:	40e6      	lsrs	r6, r4
 800199a:	2d20      	cmp	r5, #32
 800199c:	d003      	beq.n	80019a6 <__aeabi_dmul+0x49e>
 800199e:	4c12      	ldr	r4, [pc, #72]	; (80019e8 <__aeabi_dmul+0x4e0>)
 80019a0:	4454      	add	r4, sl
 80019a2:	40a3      	lsls	r3, r4
 80019a4:	431a      	orrs	r2, r3
 80019a6:	1e50      	subs	r0, r2, #1
 80019a8:	4182      	sbcs	r2, r0
 80019aa:	4332      	orrs	r2, r6
 80019ac:	2607      	movs	r6, #7
 80019ae:	2700      	movs	r7, #0
 80019b0:	4016      	ands	r6, r2
 80019b2:	d009      	beq.n	80019c8 <__aeabi_dmul+0x4c0>
 80019b4:	200f      	movs	r0, #15
 80019b6:	2300      	movs	r3, #0
 80019b8:	4010      	ands	r0, r2
 80019ba:	0014      	movs	r4, r2
 80019bc:	2804      	cmp	r0, #4
 80019be:	d1b9      	bne.n	8001934 <__aeabi_dmul+0x42c>
 80019c0:	0022      	movs	r2, r4
 80019c2:	075e      	lsls	r6, r3, #29
 80019c4:	025b      	lsls	r3, r3, #9
 80019c6:	0b1f      	lsrs	r7, r3, #12
 80019c8:	08d2      	lsrs	r2, r2, #3
 80019ca:	4316      	orrs	r6, r2
 80019cc:	2300      	movs	r3, #0
 80019ce:	e606      	b.n	80015de <__aeabi_dmul+0xd6>
 80019d0:	2780      	movs	r7, #128	; 0x80
 80019d2:	033f      	lsls	r7, r7, #12
 80019d4:	431f      	orrs	r7, r3
 80019d6:	033f      	lsls	r7, r7, #12
 80019d8:	0b3f      	lsrs	r7, r7, #12
 80019da:	0016      	movs	r6, r2
 80019dc:	4b00      	ldr	r3, [pc, #0]	; (80019e0 <__aeabi_dmul+0x4d8>)
 80019de:	e5fe      	b.n	80015de <__aeabi_dmul+0xd6>
 80019e0:	000007ff 	.word	0x000007ff
 80019e4:	0000041e 	.word	0x0000041e
 80019e8:	0000043e 	.word	0x0000043e

080019ec <__aeabi_i2d>:
 80019ec:	b570      	push	{r4, r5, r6, lr}
 80019ee:	2800      	cmp	r0, #0
 80019f0:	d02d      	beq.n	8001a4e <__aeabi_i2d+0x62>
 80019f2:	17c3      	asrs	r3, r0, #31
 80019f4:	18c5      	adds	r5, r0, r3
 80019f6:	405d      	eors	r5, r3
 80019f8:	0fc4      	lsrs	r4, r0, #31
 80019fa:	0028      	movs	r0, r5
 80019fc:	f000 f8e6 	bl	8001bcc <__clzsi2>
 8001a00:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <__aeabi_i2d+0x6c>)
 8001a02:	1a1b      	subs	r3, r3, r0
 8001a04:	055b      	lsls	r3, r3, #21
 8001a06:	0d5b      	lsrs	r3, r3, #21
 8001a08:	280a      	cmp	r0, #10
 8001a0a:	dd15      	ble.n	8001a38 <__aeabi_i2d+0x4c>
 8001a0c:	380b      	subs	r0, #11
 8001a0e:	4085      	lsls	r5, r0
 8001a10:	2200      	movs	r2, #0
 8001a12:	032d      	lsls	r5, r5, #12
 8001a14:	0b2d      	lsrs	r5, r5, #12
 8001a16:	2100      	movs	r1, #0
 8001a18:	0010      	movs	r0, r2
 8001a1a:	032d      	lsls	r5, r5, #12
 8001a1c:	0d0a      	lsrs	r2, r1, #20
 8001a1e:	0b2d      	lsrs	r5, r5, #12
 8001a20:	0512      	lsls	r2, r2, #20
 8001a22:	432a      	orrs	r2, r5
 8001a24:	4d0d      	ldr	r5, [pc, #52]	; (8001a5c <__aeabi_i2d+0x70>)
 8001a26:	051b      	lsls	r3, r3, #20
 8001a28:	402a      	ands	r2, r5
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	07e4      	lsls	r4, r4, #31
 8001a30:	085b      	lsrs	r3, r3, #1
 8001a32:	4323      	orrs	r3, r4
 8001a34:	0019      	movs	r1, r3
 8001a36:	bd70      	pop	{r4, r5, r6, pc}
 8001a38:	0002      	movs	r2, r0
 8001a3a:	0029      	movs	r1, r5
 8001a3c:	3215      	adds	r2, #21
 8001a3e:	4091      	lsls	r1, r2
 8001a40:	000a      	movs	r2, r1
 8001a42:	210b      	movs	r1, #11
 8001a44:	1a08      	subs	r0, r1, r0
 8001a46:	40c5      	lsrs	r5, r0
 8001a48:	032d      	lsls	r5, r5, #12
 8001a4a:	0b2d      	lsrs	r5, r5, #12
 8001a4c:	e7e3      	b.n	8001a16 <__aeabi_i2d+0x2a>
 8001a4e:	2400      	movs	r4, #0
 8001a50:	2300      	movs	r3, #0
 8001a52:	2500      	movs	r5, #0
 8001a54:	2200      	movs	r2, #0
 8001a56:	e7de      	b.n	8001a16 <__aeabi_i2d+0x2a>
 8001a58:	0000041e 	.word	0x0000041e
 8001a5c:	800fffff 	.word	0x800fffff

08001a60 <__aeabi_ui2d>:
 8001a60:	b510      	push	{r4, lr}
 8001a62:	1e04      	subs	r4, r0, #0
 8001a64:	d025      	beq.n	8001ab2 <__aeabi_ui2d+0x52>
 8001a66:	f000 f8b1 	bl	8001bcc <__clzsi2>
 8001a6a:	4b14      	ldr	r3, [pc, #80]	; (8001abc <__aeabi_ui2d+0x5c>)
 8001a6c:	1a1b      	subs	r3, r3, r0
 8001a6e:	055b      	lsls	r3, r3, #21
 8001a70:	0d5b      	lsrs	r3, r3, #21
 8001a72:	280a      	cmp	r0, #10
 8001a74:	dd12      	ble.n	8001a9c <__aeabi_ui2d+0x3c>
 8001a76:	380b      	subs	r0, #11
 8001a78:	4084      	lsls	r4, r0
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	0324      	lsls	r4, r4, #12
 8001a7e:	0b24      	lsrs	r4, r4, #12
 8001a80:	2100      	movs	r1, #0
 8001a82:	0010      	movs	r0, r2
 8001a84:	0324      	lsls	r4, r4, #12
 8001a86:	0d0a      	lsrs	r2, r1, #20
 8001a88:	0b24      	lsrs	r4, r4, #12
 8001a8a:	0512      	lsls	r2, r2, #20
 8001a8c:	4322      	orrs	r2, r4
 8001a8e:	4c0c      	ldr	r4, [pc, #48]	; (8001ac0 <__aeabi_ui2d+0x60>)
 8001a90:	051b      	lsls	r3, r3, #20
 8001a92:	4022      	ands	r2, r4
 8001a94:	4313      	orrs	r3, r2
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	0859      	lsrs	r1, r3, #1
 8001a9a:	bd10      	pop	{r4, pc}
 8001a9c:	0002      	movs	r2, r0
 8001a9e:	0021      	movs	r1, r4
 8001aa0:	3215      	adds	r2, #21
 8001aa2:	4091      	lsls	r1, r2
 8001aa4:	000a      	movs	r2, r1
 8001aa6:	210b      	movs	r1, #11
 8001aa8:	1a08      	subs	r0, r1, r0
 8001aaa:	40c4      	lsrs	r4, r0
 8001aac:	0324      	lsls	r4, r4, #12
 8001aae:	0b24      	lsrs	r4, r4, #12
 8001ab0:	e7e6      	b.n	8001a80 <__aeabi_ui2d+0x20>
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	2400      	movs	r4, #0
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	e7e2      	b.n	8001a80 <__aeabi_ui2d+0x20>
 8001aba:	46c0      	nop			; (mov r8, r8)
 8001abc:	0000041e 	.word	0x0000041e
 8001ac0:	800fffff 	.word	0x800fffff

08001ac4 <__aeabi_d2f>:
 8001ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ac6:	004c      	lsls	r4, r1, #1
 8001ac8:	0d64      	lsrs	r4, r4, #21
 8001aca:	030b      	lsls	r3, r1, #12
 8001acc:	1c62      	adds	r2, r4, #1
 8001ace:	0a5b      	lsrs	r3, r3, #9
 8001ad0:	0f46      	lsrs	r6, r0, #29
 8001ad2:	0552      	lsls	r2, r2, #21
 8001ad4:	0fc9      	lsrs	r1, r1, #31
 8001ad6:	431e      	orrs	r6, r3
 8001ad8:	00c5      	lsls	r5, r0, #3
 8001ada:	0d52      	lsrs	r2, r2, #21
 8001adc:	2a01      	cmp	r2, #1
 8001ade:	dd29      	ble.n	8001b34 <__aeabi_d2f+0x70>
 8001ae0:	4b37      	ldr	r3, [pc, #220]	; (8001bc0 <__aeabi_d2f+0xfc>)
 8001ae2:	18e7      	adds	r7, r4, r3
 8001ae4:	2ffe      	cmp	r7, #254	; 0xfe
 8001ae6:	dc1c      	bgt.n	8001b22 <__aeabi_d2f+0x5e>
 8001ae8:	2f00      	cmp	r7, #0
 8001aea:	dd3b      	ble.n	8001b64 <__aeabi_d2f+0xa0>
 8001aec:	0180      	lsls	r0, r0, #6
 8001aee:	1e43      	subs	r3, r0, #1
 8001af0:	4198      	sbcs	r0, r3
 8001af2:	2207      	movs	r2, #7
 8001af4:	00f3      	lsls	r3, r6, #3
 8001af6:	0f6d      	lsrs	r5, r5, #29
 8001af8:	4303      	orrs	r3, r0
 8001afa:	432b      	orrs	r3, r5
 8001afc:	401a      	ands	r2, r3
 8001afe:	2a00      	cmp	r2, #0
 8001b00:	d004      	beq.n	8001b0c <__aeabi_d2f+0x48>
 8001b02:	220f      	movs	r2, #15
 8001b04:	401a      	ands	r2, r3
 8001b06:	2a04      	cmp	r2, #4
 8001b08:	d000      	beq.n	8001b0c <__aeabi_d2f+0x48>
 8001b0a:	3304      	adds	r3, #4
 8001b0c:	2280      	movs	r2, #128	; 0x80
 8001b0e:	04d2      	lsls	r2, r2, #19
 8001b10:	401a      	ands	r2, r3
 8001b12:	d024      	beq.n	8001b5e <__aeabi_d2f+0x9a>
 8001b14:	3701      	adds	r7, #1
 8001b16:	b2fa      	uxtb	r2, r7
 8001b18:	2fff      	cmp	r7, #255	; 0xff
 8001b1a:	d002      	beq.n	8001b22 <__aeabi_d2f+0x5e>
 8001b1c:	019b      	lsls	r3, r3, #6
 8001b1e:	0a58      	lsrs	r0, r3, #9
 8001b20:	e001      	b.n	8001b26 <__aeabi_d2f+0x62>
 8001b22:	22ff      	movs	r2, #255	; 0xff
 8001b24:	2000      	movs	r0, #0
 8001b26:	0240      	lsls	r0, r0, #9
 8001b28:	05d2      	lsls	r2, r2, #23
 8001b2a:	0a40      	lsrs	r0, r0, #9
 8001b2c:	07c9      	lsls	r1, r1, #31
 8001b2e:	4310      	orrs	r0, r2
 8001b30:	4308      	orrs	r0, r1
 8001b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b34:	4335      	orrs	r5, r6
 8001b36:	2c00      	cmp	r4, #0
 8001b38:	d104      	bne.n	8001b44 <__aeabi_d2f+0x80>
 8001b3a:	2d00      	cmp	r5, #0
 8001b3c:	d10a      	bne.n	8001b54 <__aeabi_d2f+0x90>
 8001b3e:	2200      	movs	r2, #0
 8001b40:	2000      	movs	r0, #0
 8001b42:	e7f0      	b.n	8001b26 <__aeabi_d2f+0x62>
 8001b44:	2d00      	cmp	r5, #0
 8001b46:	d0ec      	beq.n	8001b22 <__aeabi_d2f+0x5e>
 8001b48:	2080      	movs	r0, #128	; 0x80
 8001b4a:	03c0      	lsls	r0, r0, #15
 8001b4c:	4330      	orrs	r0, r6
 8001b4e:	22ff      	movs	r2, #255	; 0xff
 8001b50:	e7e9      	b.n	8001b26 <__aeabi_d2f+0x62>
 8001b52:	2400      	movs	r4, #0
 8001b54:	2300      	movs	r3, #0
 8001b56:	025b      	lsls	r3, r3, #9
 8001b58:	0a58      	lsrs	r0, r3, #9
 8001b5a:	b2e2      	uxtb	r2, r4
 8001b5c:	e7e3      	b.n	8001b26 <__aeabi_d2f+0x62>
 8001b5e:	08db      	lsrs	r3, r3, #3
 8001b60:	003c      	movs	r4, r7
 8001b62:	e7f8      	b.n	8001b56 <__aeabi_d2f+0x92>
 8001b64:	003b      	movs	r3, r7
 8001b66:	3317      	adds	r3, #23
 8001b68:	dbf3      	blt.n	8001b52 <__aeabi_d2f+0x8e>
 8001b6a:	2380      	movs	r3, #128	; 0x80
 8001b6c:	041b      	lsls	r3, r3, #16
 8001b6e:	4333      	orrs	r3, r6
 8001b70:	261e      	movs	r6, #30
 8001b72:	1bf6      	subs	r6, r6, r7
 8001b74:	2e1f      	cmp	r6, #31
 8001b76:	dd14      	ble.n	8001ba2 <__aeabi_d2f+0xde>
 8001b78:	2202      	movs	r2, #2
 8001b7a:	4252      	negs	r2, r2
 8001b7c:	1bd7      	subs	r7, r2, r7
 8001b7e:	001a      	movs	r2, r3
 8001b80:	40fa      	lsrs	r2, r7
 8001b82:	0017      	movs	r7, r2
 8001b84:	2e20      	cmp	r6, #32
 8001b86:	d004      	beq.n	8001b92 <__aeabi_d2f+0xce>
 8001b88:	4a0e      	ldr	r2, [pc, #56]	; (8001bc4 <__aeabi_d2f+0x100>)
 8001b8a:	4694      	mov	ip, r2
 8001b8c:	4464      	add	r4, ip
 8001b8e:	40a3      	lsls	r3, r4
 8001b90:	431d      	orrs	r5, r3
 8001b92:	002b      	movs	r3, r5
 8001b94:	1e5d      	subs	r5, r3, #1
 8001b96:	41ab      	sbcs	r3, r5
 8001b98:	2207      	movs	r2, #7
 8001b9a:	433b      	orrs	r3, r7
 8001b9c:	401a      	ands	r2, r3
 8001b9e:	2700      	movs	r7, #0
 8001ba0:	e7ad      	b.n	8001afe <__aeabi_d2f+0x3a>
 8001ba2:	4a09      	ldr	r2, [pc, #36]	; (8001bc8 <__aeabi_d2f+0x104>)
 8001ba4:	0028      	movs	r0, r5
 8001ba6:	18a2      	adds	r2, r4, r2
 8001ba8:	4095      	lsls	r5, r2
 8001baa:	4093      	lsls	r3, r2
 8001bac:	1e6c      	subs	r4, r5, #1
 8001bae:	41a5      	sbcs	r5, r4
 8001bb0:	40f0      	lsrs	r0, r6
 8001bb2:	2207      	movs	r2, #7
 8001bb4:	432b      	orrs	r3, r5
 8001bb6:	4303      	orrs	r3, r0
 8001bb8:	401a      	ands	r2, r3
 8001bba:	2700      	movs	r7, #0
 8001bbc:	e79f      	b.n	8001afe <__aeabi_d2f+0x3a>
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	fffffc80 	.word	0xfffffc80
 8001bc4:	fffffca2 	.word	0xfffffca2
 8001bc8:	fffffc82 	.word	0xfffffc82

08001bcc <__clzsi2>:
 8001bcc:	211c      	movs	r1, #28
 8001bce:	2301      	movs	r3, #1
 8001bd0:	041b      	lsls	r3, r3, #16
 8001bd2:	4298      	cmp	r0, r3
 8001bd4:	d301      	bcc.n	8001bda <__clzsi2+0xe>
 8001bd6:	0c00      	lsrs	r0, r0, #16
 8001bd8:	3910      	subs	r1, #16
 8001bda:	0a1b      	lsrs	r3, r3, #8
 8001bdc:	4298      	cmp	r0, r3
 8001bde:	d301      	bcc.n	8001be4 <__clzsi2+0x18>
 8001be0:	0a00      	lsrs	r0, r0, #8
 8001be2:	3908      	subs	r1, #8
 8001be4:	091b      	lsrs	r3, r3, #4
 8001be6:	4298      	cmp	r0, r3
 8001be8:	d301      	bcc.n	8001bee <__clzsi2+0x22>
 8001bea:	0900      	lsrs	r0, r0, #4
 8001bec:	3904      	subs	r1, #4
 8001bee:	a202      	add	r2, pc, #8	; (adr r2, 8001bf8 <__clzsi2+0x2c>)
 8001bf0:	5c10      	ldrb	r0, [r2, r0]
 8001bf2:	1840      	adds	r0, r0, r1
 8001bf4:	4770      	bx	lr
 8001bf6:	46c0      	nop			; (mov r8, r8)
 8001bf8:	02020304 	.word	0x02020304
 8001bfc:	01010101 	.word	0x01010101
	...

08001c08 <SPI_DC_LOW>:
static uint8_t displayHeight = 160;				// display height in pixels

// ---- lower level functions ----
void SPI_CS_LOW() {HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);}
void SPI_CS_HIGH() {HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);}
void SPI_DC_LOW() {HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);}
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	2380      	movs	r3, #128	; 0x80
 8001c0e:	01db      	lsls	r3, r3, #7
 8001c10:	4803      	ldr	r0, [pc, #12]	; (8001c20 <SPI_DC_LOW+0x18>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	0019      	movs	r1, r3
 8001c16:	f006 feb3 	bl	8008980 <HAL_GPIO_WritePin>
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	50000400 	.word	0x50000400

08001c24 <SPI_DC_HIGH>:
void SPI_DC_HIGH() {HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);}
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	2380      	movs	r3, #128	; 0x80
 8001c2a:	01db      	lsls	r3, r3, #7
 8001c2c:	4803      	ldr	r0, [pc, #12]	; (8001c3c <SPI_DC_HIGH+0x18>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	0019      	movs	r1, r3
 8001c32:	f006 fea5 	bl	8008980 <HAL_GPIO_WritePin>
 8001c36:	46c0      	nop			; (mov r8, r8)
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	50000400 	.word	0x50000400

08001c40 <sendCommand>:

void sendCommand(uint8_t cmd, uint8_t *args, uint16_t numArgs, SPI_HandleTypeDef *hspi) {
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60b9      	str	r1, [r7, #8]
 8001c48:	0011      	movs	r1, r2
 8001c4a:	607b      	str	r3, [r7, #4]
 8001c4c:	230f      	movs	r3, #15
 8001c4e:	18fb      	adds	r3, r7, r3
 8001c50:	1c02      	adds	r2, r0, #0
 8001c52:	701a      	strb	r2, [r3, #0]
 8001c54:	230c      	movs	r3, #12
 8001c56:	18fb      	adds	r3, r7, r3
 8001c58:	1c0a      	adds	r2, r1, #0
 8001c5a:	801a      	strh	r2, [r3, #0]
	while (HAL_SPI_GetState(hspi) == HAL_SPI_STATE_BUSY_TX);		// block next transfer request while DMA transfer is ongoing
 8001c5c:	46c0      	nop			; (mov r8, r8)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	0018      	movs	r0, r3
 8001c62:	f009 f919 	bl	800ae98 <HAL_SPI_GetState>
 8001c66:	0003      	movs	r3, r0
 8001c68:	2b03      	cmp	r3, #3
 8001c6a:	d0f8      	beq.n	8001c5e <sendCommand+0x1e>

	SPI_DC_LOW();	// command mode
 8001c6c:	f7ff ffcc 	bl	8001c08 <SPI_DC_LOW>
	HAL_SPI_Transmit(hspi, &cmd, 1, 1000);	// not using DMA bc it's only 1 byte
 8001c70:	23fa      	movs	r3, #250	; 0xfa
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	220f      	movs	r2, #15
 8001c76:	18b9      	adds	r1, r7, r2
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f008 fd66 	bl	800a74c <HAL_SPI_Transmit>

	SPI_DC_HIGH();	// data mode
 8001c80:	f7ff ffd0 	bl	8001c24 <SPI_DC_HIGH>
	if (numArgs) {
 8001c84:	230c      	movs	r3, #12
 8001c86:	18fb      	adds	r3, r7, r3
 8001c88:	881b      	ldrh	r3, [r3, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d007      	beq.n	8001c9e <sendCommand+0x5e>
		HAL_SPI_Transmit_IT(hspi, args, numArgs);
 8001c8e:	230c      	movs	r3, #12
 8001c90:	18fb      	adds	r3, r7, r3
 8001c92:	881a      	ldrh	r2, [r3, #0]
 8001c94:	68b9      	ldr	r1, [r7, #8]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	0018      	movs	r0, r3
 8001c9a:	f008 fea5 	bl	800a9e8 <HAL_SPI_Transmit_IT>
	}
}
 8001c9e:	46c0      	nop			; (mov r8, r8)
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	b004      	add	sp, #16
 8001ca4:	bd80      	pop	{r7, pc}
	...

08001ca8 <sendColor>:

// no need to double pixel count since we're going into 16-bit mode
void sendColor(uint16_t color, uint16_t numPixels, SPI_HandleTypeDef *hspi) {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	603a      	str	r2, [r7, #0]
 8001cb0:	1dbb      	adds	r3, r7, #6
 8001cb2:	1c02      	adds	r2, r0, #0
 8001cb4:	801a      	strh	r2, [r3, #0]
 8001cb6:	1d3b      	adds	r3, r7, #4
 8001cb8:	1c0a      	adds	r2, r1, #0
 8001cba:	801a      	strh	r2, [r3, #0]
	if (numPixels == 0) return;
 8001cbc:	1d3b      	adds	r3, r7, #4
 8001cbe:	881b      	ldrh	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d041      	beq.n	8001d48 <sendColor+0xa0>

	SPI_DC_LOW();
 8001cc4:	f7ff ffa0 	bl	8001c08 <SPI_DC_LOW>
	uint8_t cmd = ST77XX_RAMWR;
 8001cc8:	210f      	movs	r1, #15
 8001cca:	187b      	adds	r3, r7, r1
 8001ccc:	222c      	movs	r2, #44	; 0x2c
 8001cce:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(hspi, &cmd, 1, 1000);
 8001cd0:	23fa      	movs	r3, #250	; 0xfa
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	1879      	adds	r1, r7, r1
 8001cd6:	6838      	ldr	r0, [r7, #0]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f008 fd37 	bl	800a74c <HAL_SPI_Transmit>
	SPI_DC_HIGH();
 8001cde:	f7ff ffa1 	bl	8001c24 <SPI_DC_HIGH>

	__HAL_SPI_DISABLE(hspi);
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2140      	movs	r1, #64	; 0x40
 8001cee:	438a      	bics	r2, r1
 8001cf0:	601a      	str	r2, [r3, #0]
	SET_BIT(hspi->Instance->CR1, SPI_CR1_DFF);
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2180      	movs	r1, #128	; 0x80
 8001cfe:	0109      	lsls	r1, r1, #4
 8001d00:	430a      	orrs	r2, r1
 8001d02:	601a      	str	r2, [r3, #0]
	hspi->Init.DataSize = SPI_DATASIZE_16BIT;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	2280      	movs	r2, #128	; 0x80
 8001d08:	0112      	lsls	r2, r2, #4
 8001d0a:	60da      	str	r2, [r3, #12]
	__HAL_SPI_ENABLE(hspi);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2140      	movs	r1, #64	; 0x40
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	601a      	str	r2, [r3, #0]

	pixelColor = color;
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <sendColor+0xa8>)
 8001d1e:	1dba      	adds	r2, r7, #6
 8001d20:	8812      	ldrh	r2, [r2, #0]
 8001d22:	801a      	strh	r2, [r3, #0]
	CLEAR_BIT(hspi->hdmatx->Instance->CCR, DMA_CCR_MINC);
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2180      	movs	r1, #128	; 0x80
 8001d34:	438a      	bics	r2, r1
 8001d36:	601a      	str	r2, [r3, #0]
	HAL_SPI_Transmit_DMA(hspi, (uint8_t *)&pixelColor, numPixels);
 8001d38:	1d3b      	adds	r3, r7, #4
 8001d3a:	881a      	ldrh	r2, [r3, #0]
 8001d3c:	4904      	ldr	r1, [pc, #16]	; (8001d50 <sendColor+0xa8>)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	0018      	movs	r0, r3
 8001d42:	f008 fedf 	bl	800ab04 <HAL_SPI_Transmit_DMA>
 8001d46:	e000      	b.n	8001d4a <sendColor+0xa2>
	if (numPixels == 0) return;
 8001d48:	46c0      	nop			; (mov r8, r8)
}
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	b004      	add	sp, #16
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	20000108 	.word	0x20000108

08001d54 <sendColorBuffer>:

void sendColorBuffer(uint16_t *pixels, uint16_t numPixels, SPI_HandleTypeDef *hspi) {
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	607a      	str	r2, [r7, #4]
 8001d5e:	200a      	movs	r0, #10
 8001d60:	183b      	adds	r3, r7, r0
 8001d62:	1c0a      	adds	r2, r1, #0
 8001d64:	801a      	strh	r2, [r3, #0]
	if (numPixels == 0) return;
 8001d66:	183b      	adds	r3, r7, r0
 8001d68:	881b      	ldrh	r3, [r3, #0]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d034      	beq.n	8001dd8 <sendColorBuffer+0x84>
	SPI_DC_LOW();
 8001d6e:	f7ff ff4b 	bl	8001c08 <SPI_DC_LOW>
	uint8_t cmd = ST77XX_RAMWR;
 8001d72:	2117      	movs	r1, #23
 8001d74:	187b      	adds	r3, r7, r1
 8001d76:	222c      	movs	r2, #44	; 0x2c
 8001d78:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(hspi, &cmd, 1, 1000);
 8001d7a:	23fa      	movs	r3, #250	; 0xfa
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	1879      	adds	r1, r7, r1
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f008 fce2 	bl	800a74c <HAL_SPI_Transmit>
	SPI_DC_HIGH();
 8001d88:	f7ff ff4c 	bl	8001c24 <SPI_DC_HIGH>

	__HAL_SPI_DISABLE(hspi);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2140      	movs	r1, #64	; 0x40
 8001d98:	438a      	bics	r2, r1
 8001d9a:	601a      	str	r2, [r3, #0]
	SET_BIT(hspi->Instance->CR1, SPI_CR1_DFF);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2180      	movs	r1, #128	; 0x80
 8001da8:	0109      	lsls	r1, r1, #4
 8001daa:	430a      	orrs	r2, r1
 8001dac:	601a      	str	r2, [r3, #0]
	hspi->Init.DataSize = SPI_DATASIZE_16BIT;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2280      	movs	r2, #128	; 0x80
 8001db2:	0112      	lsls	r2, r2, #4
 8001db4:	60da      	str	r2, [r3, #12]
	__HAL_SPI_ENABLE(hspi);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2140      	movs	r1, #64	; 0x40
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	601a      	str	r2, [r3, #0]
	HAL_SPI_Transmit_IT(hspi, (uint8_t *)pixels, numPixels);
 8001dc6:	230a      	movs	r3, #10
 8001dc8:	18fb      	adds	r3, r7, r3
 8001dca:	881a      	ldrh	r2, [r3, #0]
 8001dcc:	68f9      	ldr	r1, [r7, #12]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	f008 fe09 	bl	800a9e8 <HAL_SPI_Transmit_IT>
 8001dd6:	e000      	b.n	8001dda <sendColorBuffer+0x86>
	if (numPixels == 0) return;
 8001dd8:	46c0      	nop			; (mov r8, r8)
}
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	b006      	add	sp, #24
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <HAL_SPI_TxCpltCallback>:

// using only for sending data, but not commands
// dont send request when transfer is ongoing
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
	__HAL_SPI_DISABLE(hspi);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2140      	movs	r1, #64	; 0x40
 8001df4:	438a      	bics	r2, r1
 8001df6:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_DFF);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4909      	ldr	r1, [pc, #36]	; (8001e28 <HAL_SPI_TxCpltCallback+0x48>)
 8001e04:	400a      	ands	r2, r1
 8001e06:	601a      	str	r2, [r3, #0]
	hspi->Init.DataSize = SPI_DATASIZE_8BIT;		// HAL_SPI_Transmit_IT() does a check on this when sending
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	60da      	str	r2, [r3, #12]
	__HAL_SPI_ENABLE(hspi);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2140      	movs	r1, #64	; 0x40
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	601a      	str	r2, [r3, #0]
}
 8001e1e:	46c0      	nop			; (mov r8, r8)
 8001e20:	46bd      	mov	sp, r7
 8001e22:	b002      	add	sp, #8
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	46c0      	nop			; (mov r8, r8)
 8001e28:	fffff7ff 	.word	0xfffff7ff

08001e2c <displayInit>:

// array parser heavily based on Adafruit library code
void displayInit(uint8_t *args, SPI_HandleTypeDef *hspi) {
 8001e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
	uint8_t  numCommands, cmd, numArgs;
	uint16_t ms;
	uint8_t index = 0;
 8001e36:	220b      	movs	r2, #11
 8001e38:	0011      	movs	r1, r2
 8001e3a:	18bb      	adds	r3, r7, r2
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	701a      	strb	r2, [r3, #0]

	numCommands = args[index++];			// Number of commands to follow
 8001e40:	000a      	movs	r2, r1
 8001e42:	18bb      	adds	r3, r7, r2
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	18ba      	adds	r2, r7, r2
 8001e48:	1c59      	adds	r1, r3, #1
 8001e4a:	7011      	strb	r1, [r2, #0]
 8001e4c:	001a      	movs	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	189a      	adds	r2, r3, r2
 8001e52:	230f      	movs	r3, #15
 8001e54:	18fb      	adds	r3, r7, r3
 8001e56:	7812      	ldrb	r2, [r2, #0]
 8001e58:	701a      	strb	r2, [r3, #0]
	while(numCommands--) {					// For each command...
 8001e5a:	e05e      	b.n	8001f1a <displayInit+0xee>
		cmd = args[index++];				// Read command
 8001e5c:	200b      	movs	r0, #11
 8001e5e:	183b      	adds	r3, r7, r0
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	183a      	adds	r2, r7, r0
 8001e64:	1c59      	adds	r1, r3, #1
 8001e66:	7011      	strb	r1, [r2, #0]
 8001e68:	001a      	movs	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	189a      	adds	r2, r3, r2
 8001e6e:	230a      	movs	r3, #10
 8001e70:	18fb      	adds	r3, r7, r3
 8001e72:	7812      	ldrb	r2, [r2, #0]
 8001e74:	701a      	strb	r2, [r3, #0]
		numArgs  = args[index++];			// Number of args to follow
 8001e76:	183b      	adds	r3, r7, r0
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	183a      	adds	r2, r7, r0
 8001e7c:	1c59      	adds	r1, r3, #1
 8001e7e:	7011      	strb	r1, [r2, #0]
 8001e80:	001a      	movs	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	189a      	adds	r2, r3, r2
 8001e86:	2609      	movs	r6, #9
 8001e88:	19bb      	adds	r3, r7, r6
 8001e8a:	7812      	ldrb	r2, [r2, #0]
 8001e8c:	701a      	strb	r2, [r3, #0]
		ms       = numArgs & ST_CMD_DELAY;	// If hibit set, delay follows args
 8001e8e:	19bb      	adds	r3, r7, r6
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	210c      	movs	r1, #12
 8001e96:	187b      	adds	r3, r7, r1
 8001e98:	2180      	movs	r1, #128	; 0x80
 8001e9a:	400a      	ands	r2, r1
 8001e9c:	801a      	strh	r2, [r3, #0]
		numArgs &= ~ST_CMD_DELAY;			// Mask out delay bit
 8001e9e:	19bb      	adds	r3, r7, r6
 8001ea0:	19ba      	adds	r2, r7, r6
 8001ea2:	7812      	ldrb	r2, [r2, #0]
 8001ea4:	217f      	movs	r1, #127	; 0x7f
 8001ea6:	400a      	ands	r2, r1
 8001ea8:	701a      	strb	r2, [r3, #0]
		sendCommand(cmd, &args[index], numArgs, hspi);
 8001eaa:	0005      	movs	r5, r0
 8001eac:	183b      	adds	r3, r7, r0
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	18d1      	adds	r1, r2, r3
 8001eb4:	19bb      	adds	r3, r7, r6
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	683c      	ldr	r4, [r7, #0]
 8001ebc:	230a      	movs	r3, #10
 8001ebe:	18fb      	adds	r3, r7, r3
 8001ec0:	7818      	ldrb	r0, [r3, #0]
 8001ec2:	0023      	movs	r3, r4
 8001ec4:	f7ff febc 	bl	8001c40 <sendCommand>
		index += numArgs;
 8001ec8:	0028      	movs	r0, r5
 8001eca:	183b      	adds	r3, r7, r0
 8001ecc:	1839      	adds	r1, r7, r0
 8001ece:	19ba      	adds	r2, r7, r6
 8001ed0:	7809      	ldrb	r1, [r1, #0]
 8001ed2:	7812      	ldrb	r2, [r2, #0]
 8001ed4:	188a      	adds	r2, r1, r2
 8001ed6:	701a      	strb	r2, [r3, #0]

		if(ms) {
 8001ed8:	210c      	movs	r1, #12
 8001eda:	187b      	adds	r3, r7, r1
 8001edc:	881b      	ldrh	r3, [r3, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d01b      	beq.n	8001f1a <displayInit+0xee>
			ms = args[index++];			// Read post-command delay time (ms)
 8001ee2:	220b      	movs	r2, #11
 8001ee4:	18bb      	adds	r3, r7, r2
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	18ba      	adds	r2, r7, r2
 8001eea:	1c59      	adds	r1, r3, #1
 8001eec:	7011      	strb	r1, [r2, #0]
 8001eee:	001a      	movs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	189b      	adds	r3, r3, r2
 8001ef4:	781a      	ldrb	r2, [r3, #0]
 8001ef6:	210c      	movs	r1, #12
 8001ef8:	187b      	adds	r3, r7, r1
 8001efa:	801a      	strh	r2, [r3, #0]
			if(ms == 255) ms = 500;		// If 255, delay for 500 ms
 8001efc:	187b      	adds	r3, r7, r1
 8001efe:	881b      	ldrh	r3, [r3, #0]
 8001f00:	2bff      	cmp	r3, #255	; 0xff
 8001f02:	d104      	bne.n	8001f0e <displayInit+0xe2>
 8001f04:	230c      	movs	r3, #12
 8001f06:	18fb      	adds	r3, r7, r3
 8001f08:	22fa      	movs	r2, #250	; 0xfa
 8001f0a:	0052      	lsls	r2, r2, #1
 8001f0c:	801a      	strh	r2, [r3, #0]
			HAL_Delay(ms);
 8001f0e:	230c      	movs	r3, #12
 8001f10:	18fb      	adds	r3, r7, r3
 8001f12:	881b      	ldrh	r3, [r3, #0]
 8001f14:	0018      	movs	r0, r3
 8001f16:	f005 fb4d 	bl	80075b4 <HAL_Delay>
	while(numCommands--) {					// For each command...
 8001f1a:	220f      	movs	r2, #15
 8001f1c:	18bb      	adds	r3, r7, r2
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	18ba      	adds	r2, r7, r2
 8001f22:	1e59      	subs	r1, r3, #1
 8001f24:	7011      	strb	r1, [r2, #0]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d198      	bne.n	8001e5c <displayInit+0x30>
		}
	}

	setDisplayOrientation(3, hspi);
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	0019      	movs	r1, r3
 8001f2e:	2003      	movs	r0, #3
 8001f30:	f000 ff7c 	bl	8002e2c <setDisplayOrientation>
}
 8001f34:	46c0      	nop			; (mov r8, r8)
 8001f36:	46bd      	mov	sp, r7
 8001f38:	b005      	add	sp, #20
 8001f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f3c <TFT_startup>:

void TFT_startup(SPI_HandleTypeDef *hspi) {
 8001f3c:	b590      	push	{r4, r7, lr}
 8001f3e:	b0a3      	sub	sp, #140	; 0x8c
 8001f40:	af02      	add	r7, sp, #8
 8001f42:	6078      	str	r0, [r7, #4]
	// array pulled from Adafruit's library for ST7735R driver
	uint8_t initCommands[] = {
 8001f44:	240c      	movs	r4, #12
 8001f46:	193a      	adds	r2, r7, r4
 8001f48:	4b16      	ldr	r3, [pc, #88]	; (8001fa4 <TFT_startup+0x68>)
 8001f4a:	0010      	movs	r0, r2
 8001f4c:	0019      	movs	r1, r3
 8001f4e:	2371      	movs	r3, #113	; 0x71
 8001f50:	001a      	movs	r2, r3
 8001f52:	f00a f8fd 	bl	800c150 <memcpy>
			10,                         //     10 ms delay
		ST77XX_DISPON,    ST_CMD_DELAY, //  4: Main screen turn on, no args w/delay
			100	                        //     100 ms delay
	};

	displayInit(initCommands, hspi);
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	193b      	adds	r3, r7, r4
 8001f5a:	0011      	movs	r1, r2
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	f7ff ff65 	bl	8001e2c <displayInit>
	setAddrWindow(0, 0, displayWidth, displayHeight, hspi);
 8001f62:	4b11      	ldr	r3, [pc, #68]	; (8001fa8 <TFT_startup+0x6c>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	4b10      	ldr	r3, [pc, #64]	; (8001fac <TFT_startup+0x70>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	b299      	uxth	r1, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	9300      	str	r3, [sp, #0]
 8001f72:	000b      	movs	r3, r1
 8001f74:	2100      	movs	r1, #0
 8001f76:	2000      	movs	r0, #0
 8001f78:	f000 f824 	bl	8001fc4 <setAddrWindow>

	// set the global variables
	cursorX = 0;
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <TFT_startup+0x74>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	701a      	strb	r2, [r3, #0]
	cursorY = 0;
 8001f82:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <TFT_startup+0x78>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	701a      	strb	r2, [r3, #0]
	textSize = 1;
 8001f88:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <TFT_startup+0x7c>)
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	701a      	strb	r2, [r3, #0]
	textColor = ST77XX_BLACK;
 8001f8e:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <TFT_startup+0x80>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	801a      	strh	r2, [r3, #0]
	bg = ST77XX_WHITE;
 8001f94:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <TFT_startup+0x84>)
 8001f96:	2201      	movs	r2, #1
 8001f98:	4252      	negs	r2, r2
 8001f9a:	801a      	strh	r2, [r3, #0]
}
 8001f9c:	46c0      	nop			; (mov r8, r8)
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	b021      	add	sp, #132	; 0x84
 8001fa2:	bd90      	pop	{r4, r7, pc}
 8001fa4:	0800c9a4 	.word	0x0800c9a4
 8001fa8:	20000005 	.word	0x20000005
 8001fac:	20000006 	.word	0x20000006
 8001fb0:	20000104 	.word	0x20000104
 8001fb4:	20000105 	.word	0x20000105
 8001fb8:	20000000 	.word	0x20000000
 8001fbc:	20000106 	.word	0x20000106
 8001fc0:	20000002 	.word	0x20000002

08001fc4 <setAddrWindow>:

// draw something: set addr window -> write to ram memory
// sets specific area on display to write pixels to
// x and y for upper left corner, w for width, h for height
void setAddrWindow(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SPI_HandleTypeDef *hspi) {
 8001fc4:	b5b0      	push	{r4, r5, r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	0005      	movs	r5, r0
 8001fcc:	000c      	movs	r4, r1
 8001fce:	0010      	movs	r0, r2
 8001fd0:	0019      	movs	r1, r3
 8001fd2:	1dbb      	adds	r3, r7, #6
 8001fd4:	1c2a      	adds	r2, r5, #0
 8001fd6:	801a      	strh	r2, [r3, #0]
 8001fd8:	1d3b      	adds	r3, r7, #4
 8001fda:	1c22      	adds	r2, r4, #0
 8001fdc:	801a      	strh	r2, [r3, #0]
 8001fde:	1cbb      	adds	r3, r7, #2
 8001fe0:	1c02      	adds	r2, r0, #0
 8001fe2:	801a      	strh	r2, [r3, #0]
 8001fe4:	003b      	movs	r3, r7
 8001fe6:	1c0a      	adds	r2, r1, #0
 8001fe8:	801a      	strh	r2, [r3, #0]
	// building 32-bit window args
	uint8_t temp[4];
	temp[0] = (x & (0xFF00)) >> 8;
 8001fea:	1dbb      	adds	r3, r7, #6
 8001fec:	881b      	ldrh	r3, [r3, #0]
 8001fee:	0a1b      	lsrs	r3, r3, #8
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	210c      	movs	r1, #12
 8001ff6:	187b      	adds	r3, r7, r1
 8001ff8:	701a      	strb	r2, [r3, #0]
	temp[1] = x & (0xFF);
 8001ffa:	1dbb      	adds	r3, r7, #6
 8001ffc:	881b      	ldrh	r3, [r3, #0]
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	187b      	adds	r3, r7, r1
 8002002:	705a      	strb	r2, [r3, #1]
	temp[2] = ((x+w-1) & (0xFF00)) >> 8;
 8002004:	1dbb      	adds	r3, r7, #6
 8002006:	881a      	ldrh	r2, [r3, #0]
 8002008:	1cbb      	adds	r3, r7, #2
 800200a:	881b      	ldrh	r3, [r3, #0]
 800200c:	18d3      	adds	r3, r2, r3
 800200e:	3b01      	subs	r3, #1
 8002010:	121b      	asrs	r3, r3, #8
 8002012:	b2da      	uxtb	r2, r3
 8002014:	187b      	adds	r3, r7, r1
 8002016:	709a      	strb	r2, [r3, #2]
	temp[3] = (x+w-1) & (0xFF);
 8002018:	1dbb      	adds	r3, r7, #6
 800201a:	881b      	ldrh	r3, [r3, #0]
 800201c:	b2da      	uxtb	r2, r3
 800201e:	1cbb      	adds	r3, r7, #2
 8002020:	881b      	ldrh	r3, [r3, #0]
 8002022:	b2db      	uxtb	r3, r3
 8002024:	18d3      	adds	r3, r2, r3
 8002026:	b2db      	uxtb	r3, r3
 8002028:	3b01      	subs	r3, #1
 800202a:	b2da      	uxtb	r2, r3
 800202c:	187b      	adds	r3, r7, r1
 800202e:	70da      	strb	r2, [r3, #3]
	sendCommand(ST77XX_CASET, temp, 4, hspi);
 8002030:	6a3b      	ldr	r3, [r7, #32]
 8002032:	000c      	movs	r4, r1
 8002034:	1879      	adds	r1, r7, r1
 8002036:	2204      	movs	r2, #4
 8002038:	202a      	movs	r0, #42	; 0x2a
 800203a:	f7ff fe01 	bl	8001c40 <sendCommand>

	temp[0] = (y & (0xFF00)) >> 8;
 800203e:	1d3b      	adds	r3, r7, #4
 8002040:	881b      	ldrh	r3, [r3, #0]
 8002042:	0a1b      	lsrs	r3, r3, #8
 8002044:	b29b      	uxth	r3, r3
 8002046:	b2da      	uxtb	r2, r3
 8002048:	0021      	movs	r1, r4
 800204a:	187b      	adds	r3, r7, r1
 800204c:	701a      	strb	r2, [r3, #0]
	temp[1] = y & (0xFF);
 800204e:	1d3b      	adds	r3, r7, #4
 8002050:	881b      	ldrh	r3, [r3, #0]
 8002052:	b2da      	uxtb	r2, r3
 8002054:	187b      	adds	r3, r7, r1
 8002056:	705a      	strb	r2, [r3, #1]
	temp[2] = ((y+h-1) & (0xFF00)) >> 8;
 8002058:	1d3b      	adds	r3, r7, #4
 800205a:	881a      	ldrh	r2, [r3, #0]
 800205c:	003b      	movs	r3, r7
 800205e:	881b      	ldrh	r3, [r3, #0]
 8002060:	18d3      	adds	r3, r2, r3
 8002062:	3b01      	subs	r3, #1
 8002064:	121b      	asrs	r3, r3, #8
 8002066:	b2da      	uxtb	r2, r3
 8002068:	187b      	adds	r3, r7, r1
 800206a:	709a      	strb	r2, [r3, #2]
	temp[3] = (y+h-1) & (0x00FF);
 800206c:	1d3b      	adds	r3, r7, #4
 800206e:	881b      	ldrh	r3, [r3, #0]
 8002070:	b2da      	uxtb	r2, r3
 8002072:	003b      	movs	r3, r7
 8002074:	881b      	ldrh	r3, [r3, #0]
 8002076:	b2db      	uxtb	r3, r3
 8002078:	18d3      	adds	r3, r2, r3
 800207a:	b2db      	uxtb	r3, r3
 800207c:	3b01      	subs	r3, #1
 800207e:	b2da      	uxtb	r2, r3
 8002080:	187b      	adds	r3, r7, r1
 8002082:	70da      	strb	r2, [r3, #3]
	sendCommand(ST77XX_RASET, temp, 4, hspi);
 8002084:	6a3b      	ldr	r3, [r7, #32]
 8002086:	1879      	adds	r1, r7, r1
 8002088:	2204      	movs	r2, #4
 800208a:	202b      	movs	r0, #43	; 0x2b
 800208c:	f7ff fdd8 	bl	8001c40 <sendCommand>
}
 8002090:	46c0      	nop			; (mov r8, r8)
 8002092:	46bd      	mov	sp, r7
 8002094:	b004      	add	sp, #16
 8002096:	bdb0      	pop	{r4, r5, r7, pc}

08002098 <drawHLine>:
	setAddrWindow(x, y, 1, 1, hspi);
	sendColor(color, 1, hspi);
}

// draw a horizontal line. coordinates are for left point
void drawHLine(int x, int y, int size, uint16_t color, SPI_HandleTypeDef *hspi) {
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af02      	add	r7, sp, #8
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
 80020a4:	001a      	movs	r2, r3
 80020a6:	1cbb      	adds	r3, r7, #2
 80020a8:	801a      	strh	r2, [r3, #0]
	if (size < 0) abs(size);		// no x adjustments for intended size

	// bounds checking. draw as much of the line as you can
	// constrain x so it's not out of bounds
	if (x < 0) x = 0;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	da01      	bge.n	80020b4 <drawHLine+0x1c>
 80020b0:	2300      	movs	r3, #0
 80020b2:	60fb      	str	r3, [r7, #12]
	if (x > displayWidth) x = displayWidth;
 80020b4:	4b1f      	ldr	r3, [pc, #124]	; (8002134 <drawHLine+0x9c>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	001a      	movs	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	4293      	cmp	r3, r2
 80020be:	dd02      	ble.n	80020c6 <drawHLine+0x2e>
 80020c0:	4b1c      	ldr	r3, [pc, #112]	; (8002134 <drawHLine+0x9c>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	60fb      	str	r3, [r7, #12]
	// constrain size so it doesn't go out of bounds
	if (x+size > displayWidth) size = displayWidth-x;
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	18d3      	adds	r3, r2, r3
 80020cc:	4a19      	ldr	r2, [pc, #100]	; (8002134 <drawHLine+0x9c>)
 80020ce:	7812      	ldrb	r2, [r2, #0]
 80020d0:	4293      	cmp	r3, r2
 80020d2:	dd05      	ble.n	80020e0 <drawHLine+0x48>
 80020d4:	4b17      	ldr	r3, [pc, #92]	; (8002134 <drawHLine+0x9c>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	001a      	movs	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	607b      	str	r3, [r7, #4]
	if (x+size < 0) size = 0-x;
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	18d3      	adds	r3, r2, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	da02      	bge.n	80020f0 <drawHLine+0x58>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	425b      	negs	r3, r3
 80020ee:	607b      	str	r3, [r7, #4]
	if ((y > displayHeight) || (y < 0)) return;		// don't draw if y is out of bounds
 80020f0:	4b11      	ldr	r3, [pc, #68]	; (8002138 <drawHLine+0xa0>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	001a      	movs	r2, r3
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	4293      	cmp	r3, r2
 80020fa:	dc16      	bgt.n	800212a <drawHLine+0x92>
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	db13      	blt.n	800212a <drawHLine+0x92>

	setAddrWindow(x, y, size, 1, hspi);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	b298      	uxth	r0, r3
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	b299      	uxth	r1, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	b29a      	uxth	r2, r3
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	2301      	movs	r3, #1
 8002114:	f7ff ff56 	bl	8001fc4 <setAddrWindow>
	sendColor(color, size, hspi);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	b299      	uxth	r1, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	1cbb      	adds	r3, r7, #2
 8002120:	881b      	ldrh	r3, [r3, #0]
 8002122:	0018      	movs	r0, r3
 8002124:	f7ff fdc0 	bl	8001ca8 <sendColor>
 8002128:	e000      	b.n	800212c <drawHLine+0x94>
	if ((y > displayHeight) || (y < 0)) return;		// don't draw if y is out of bounds
 800212a:	46c0      	nop			; (mov r8, r8)
}
 800212c:	46bd      	mov	sp, r7
 800212e:	b004      	add	sp, #16
 8002130:	bd80      	pop	{r7, pc}
 8002132:	46c0      	nop			; (mov r8, r8)
 8002134:	20000005 	.word	0x20000005
 8002138:	20000006 	.word	0x20000006

0800213c <drawVLine>:

// draws a vertical line. coordinates are for top point
void drawVLine(int x, int y, int size, uint16_t color, SPI_HandleTypeDef *hspi) {
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af02      	add	r7, sp, #8
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
 8002148:	001a      	movs	r2, r3
 800214a:	1cbb      	adds	r3, r7, #2
 800214c:	801a      	strh	r2, [r3, #0]
	if (size < 0) abs(size);		// no y adjustments for intended size

	// bounds checking
	// constrain y so it's not out of bounds
	if (y < 0) y = 0;
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	2b00      	cmp	r3, #0
 8002152:	da01      	bge.n	8002158 <drawVLine+0x1c>
 8002154:	2300      	movs	r3, #0
 8002156:	60bb      	str	r3, [r7, #8]
	if (y > displayHeight) y = displayHeight;
 8002158:	4b1f      	ldr	r3, [pc, #124]	; (80021d8 <drawVLine+0x9c>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	001a      	movs	r2, r3
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	4293      	cmp	r3, r2
 8002162:	dd02      	ble.n	800216a <drawVLine+0x2e>
 8002164:	4b1c      	ldr	r3, [pc, #112]	; (80021d8 <drawVLine+0x9c>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	60bb      	str	r3, [r7, #8]
	// constrain size so it doesn't go out of bounds
	if (y+size > displayHeight) size = displayHeight-y;
 800216a:	68ba      	ldr	r2, [r7, #8]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	18d3      	adds	r3, r2, r3
 8002170:	4a19      	ldr	r2, [pc, #100]	; (80021d8 <drawVLine+0x9c>)
 8002172:	7812      	ldrb	r2, [r2, #0]
 8002174:	4293      	cmp	r3, r2
 8002176:	dd05      	ble.n	8002184 <drawVLine+0x48>
 8002178:	4b17      	ldr	r3, [pc, #92]	; (80021d8 <drawVLine+0x9c>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	001a      	movs	r2, r3
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	607b      	str	r3, [r7, #4]
	if (y+size < 0) size = 0-y;
 8002184:	68ba      	ldr	r2, [r7, #8]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	18d3      	adds	r3, r2, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	da02      	bge.n	8002194 <drawVLine+0x58>
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	425b      	negs	r3, r3
 8002192:	607b      	str	r3, [r7, #4]
	if ((x > displayWidth) || (x < 0)) return;		// don't draw if x is out of bounds
 8002194:	4b11      	ldr	r3, [pc, #68]	; (80021dc <drawVLine+0xa0>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	001a      	movs	r2, r3
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	4293      	cmp	r3, r2
 800219e:	dc17      	bgt.n	80021d0 <drawVLine+0x94>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	db14      	blt.n	80021d0 <drawVLine+0x94>

	setAddrWindow(x, y, 1, size, hspi);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	b298      	uxth	r0, r3
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	b299      	uxth	r1, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	9300      	str	r3, [sp, #0]
 80021b6:	0013      	movs	r3, r2
 80021b8:	2201      	movs	r2, #1
 80021ba:	f7ff ff03 	bl	8001fc4 <setAddrWindow>
	sendColor(color, size, hspi);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	b299      	uxth	r1, r3
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	1cbb      	adds	r3, r7, #2
 80021c6:	881b      	ldrh	r3, [r3, #0]
 80021c8:	0018      	movs	r0, r3
 80021ca:	f7ff fd6d 	bl	8001ca8 <sendColor>
 80021ce:	e000      	b.n	80021d2 <drawVLine+0x96>
	if ((x > displayWidth) || (x < 0)) return;		// don't draw if x is out of bounds
 80021d0:	46c0      	nop			; (mov r8, r8)
}
 80021d2:	46bd      	mov	sp, r7
 80021d4:	b004      	add	sp, #16
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	20000006 	.word	0x20000006
 80021dc:	20000005 	.word	0x20000005

080021e0 <drawBuffer>:

// draws on a specific region with input 16-bit buffer
void drawBuffer(int x, int y, int w, int h, uint16_t *buffer, uint16_t bufferSize, SPI_HandleTypeDef *hspi) {
 80021e0:	b590      	push	{r4, r7, lr}
 80021e2:	b087      	sub	sp, #28
 80021e4:	af02      	add	r7, sp, #8
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
 80021ec:	603b      	str	r3, [r7, #0]
	// also don't call this with buffer size too big bc there's not enough ram for all pixels of display
	// no checking just don't do it pls thx. i don't know the number so i'm not doing it. you can just watch it crash
	if (x < 0 || y < 0 || w < 0 || h < 0) return;				// not dealing with negative numbers
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	db31      	blt.n	8002258 <drawBuffer+0x78>
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	db2e      	blt.n	8002258 <drawBuffer+0x78>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	db2b      	blt.n	8002258 <drawBuffer+0x78>
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	db28      	blt.n	8002258 <drawBuffer+0x78>
	if (x+w > displayWidth || y+h > displayHeight) return;		// not dealing with out of bounds
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	18d3      	adds	r3, r2, r3
 800220c:	4a16      	ldr	r2, [pc, #88]	; (8002268 <drawBuffer+0x88>)
 800220e:	7812      	ldrb	r2, [r2, #0]
 8002210:	4293      	cmp	r3, r2
 8002212:	dc23      	bgt.n	800225c <drawBuffer+0x7c>
 8002214:	68ba      	ldr	r2, [r7, #8]
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	18d3      	adds	r3, r2, r3
 800221a:	4a14      	ldr	r2, [pc, #80]	; (800226c <drawBuffer+0x8c>)
 800221c:	7812      	ldrb	r2, [r2, #0]
 800221e:	4293      	cmp	r3, r2
 8002220:	dc1c      	bgt.n	800225c <drawBuffer+0x7c>
	if (bufferSize == 0) return;
 8002222:	2324      	movs	r3, #36	; 0x24
 8002224:	18fb      	adds	r3, r7, r3
 8002226:	881b      	ldrh	r3, [r3, #0]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d019      	beq.n	8002260 <drawBuffer+0x80>

	setAddrWindow(x, y, w, h, hspi);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	b298      	uxth	r0, r3
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	b299      	uxth	r1, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	b29a      	uxth	r2, r3
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	b29c      	uxth	r4, r3
 800223c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	0023      	movs	r3, r4
 8002242:	f7ff febf 	bl	8001fc4 <setAddrWindow>
	sendColorBuffer(buffer, bufferSize, hspi);
 8002246:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002248:	2324      	movs	r3, #36	; 0x24
 800224a:	18fb      	adds	r3, r7, r3
 800224c:	8819      	ldrh	r1, [r3, #0]
 800224e:	6a3b      	ldr	r3, [r7, #32]
 8002250:	0018      	movs	r0, r3
 8002252:	f7ff fd7f 	bl	8001d54 <sendColorBuffer>
 8002256:	e004      	b.n	8002262 <drawBuffer+0x82>
	if (x < 0 || y < 0 || w < 0 || h < 0) return;				// not dealing with negative numbers
 8002258:	46c0      	nop			; (mov r8, r8)
 800225a:	e002      	b.n	8002262 <drawBuffer+0x82>
	if (x+w > displayWidth || y+h > displayHeight) return;		// not dealing with out of bounds
 800225c:	46c0      	nop			; (mov r8, r8)
 800225e:	e000      	b.n	8002262 <drawBuffer+0x82>
	if (bufferSize == 0) return;
 8002260:	46c0      	nop			; (mov r8, r8)
}
 8002262:	46bd      	mov	sp, r7
 8002264:	b005      	add	sp, #20
 8002266:	bd90      	pop	{r4, r7, pc}
 8002268:	20000005 	.word	0x20000005
 800226c:	20000006 	.word	0x20000006

08002270 <drawRect>:
		}
	}
}

// draw an empty rectangle
void drawRect(int x, int y, int w, int h, uint16_t color, SPI_HandleTypeDef *hspi) {
 8002270:	b5b0      	push	{r4, r5, r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af02      	add	r7, sp, #8
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
 800227c:	603b      	str	r3, [r7, #0]
	drawHLine(x, y, w, color, hspi);
 800227e:	2520      	movs	r5, #32
 8002280:	197b      	adds	r3, r7, r5
 8002282:	881c      	ldrh	r4, [r3, #0]
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	68b9      	ldr	r1, [r7, #8]
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228c:	9300      	str	r3, [sp, #0]
 800228e:	0023      	movs	r3, r4
 8002290:	f7ff ff02 	bl	8002098 <drawHLine>
	drawHLine(x, y+h-1, w, color, hspi);
 8002294:	68ba      	ldr	r2, [r7, #8]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	18d3      	adds	r3, r2, r3
 800229a:	1e59      	subs	r1, r3, #1
 800229c:	197b      	adds	r3, r7, r5
 800229e:	881c      	ldrh	r4, [r3, #0]
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	0023      	movs	r3, r4
 80022aa:	f7ff fef5 	bl	8002098 <drawHLine>
	drawVLine(x, y, h, color, hspi);
 80022ae:	197b      	adds	r3, r7, r5
 80022b0:	881c      	ldrh	r4, [r3, #0]
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	68b9      	ldr	r1, [r7, #8]
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ba:	9300      	str	r3, [sp, #0]
 80022bc:	0023      	movs	r3, r4
 80022be:	f7ff ff3d 	bl	800213c <drawVLine>
	drawVLine(x+w-1, y, h, color, hspi);
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	18d3      	adds	r3, r2, r3
 80022c8:	1e58      	subs	r0, r3, #1
 80022ca:	197b      	adds	r3, r7, r5
 80022cc:	881c      	ldrh	r4, [r3, #0]
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	68b9      	ldr	r1, [r7, #8]
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	9300      	str	r3, [sp, #0]
 80022d6:	0023      	movs	r3, r4
 80022d8:	f7ff ff30 	bl	800213c <drawVLine>
}
 80022dc:	46c0      	nop			; (mov r8, r8)
 80022de:	46bd      	mov	sp, r7
 80022e0:	b004      	add	sp, #16
 80022e2:	bdb0      	pop	{r4, r5, r7, pc}

080022e4 <fillRect>:

// draw a filled rectangle
void fillRect(int x, int y, int w, int h, uint16_t color, SPI_HandleTypeDef *hspi) {
 80022e4:	b590      	push	{r4, r7, lr}
 80022e6:	b087      	sub	sp, #28
 80022e8:	af02      	add	r7, sp, #8
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
 80022f0:	603b      	str	r3, [r7, #0]
//	if (x > displayWidth) x = displayWidth;
//	if (y > displayHeight) y = displayHeight;
//	if (x+w > displayWidth) w = displayWidth-x;
//	if (y+h > displayHeight) h = displayHeight-y;

	setAddrWindow(x, y, w, h, hspi);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	b298      	uxth	r0, r3
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	b299      	uxth	r1, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	b29c      	uxth	r4, r3
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	0023      	movs	r3, r4
 8002308:	f7ff fe5c 	bl	8001fc4 <setAddrWindow>
	sendColor(color, w*h, hspi);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	b29b      	uxth	r3, r3
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	b292      	uxth	r2, r2
 8002314:	4353      	muls	r3, r2
 8002316:	b299      	uxth	r1, r3
 8002318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800231a:	2320      	movs	r3, #32
 800231c:	18fb      	adds	r3, r7, r3
 800231e:	881b      	ldrh	r3, [r3, #0]
 8002320:	0018      	movs	r0, r3
 8002322:	f7ff fcc1 	bl	8001ca8 <sendColor>
}
 8002326:	46c0      	nop			; (mov r8, r8)
 8002328:	46bd      	mov	sp, r7
 800232a:	b005      	add	sp, #20
 800232c:	bd90      	pop	{r4, r7, pc}
	...

08002330 <fillScreen>:

// a big rectangle, but for the whole screen
void fillScreen(uint16_t color, SPI_HandleTypeDef *hspi) {
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af02      	add	r7, sp, #8
 8002336:	0002      	movs	r2, r0
 8002338:	6039      	str	r1, [r7, #0]
 800233a:	1dbb      	adds	r3, r7, #6
 800233c:	801a      	strh	r2, [r3, #0]
	setAddrWindow(0, 0, displayWidth, displayHeight, hspi);
 800233e:	4b0f      	ldr	r3, [pc, #60]	; (800237c <fillScreen+0x4c>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	b29a      	uxth	r2, r3
 8002344:	4b0e      	ldr	r3, [pc, #56]	; (8002380 <fillScreen+0x50>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	b299      	uxth	r1, r3
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	9300      	str	r3, [sp, #0]
 800234e:	000b      	movs	r3, r1
 8002350:	2100      	movs	r1, #0
 8002352:	2000      	movs	r0, #0
 8002354:	f7ff fe36 	bl	8001fc4 <setAddrWindow>
	sendColor(color, displayWidth*displayHeight, hspi);
 8002358:	4b08      	ldr	r3, [pc, #32]	; (800237c <fillScreen+0x4c>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	b29b      	uxth	r3, r3
 800235e:	4a08      	ldr	r2, [pc, #32]	; (8002380 <fillScreen+0x50>)
 8002360:	7812      	ldrb	r2, [r2, #0]
 8002362:	b292      	uxth	r2, r2
 8002364:	4353      	muls	r3, r2
 8002366:	b299      	uxth	r1, r3
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	1dbb      	adds	r3, r7, #6
 800236c:	881b      	ldrh	r3, [r3, #0]
 800236e:	0018      	movs	r0, r3
 8002370:	f7ff fc9a 	bl	8001ca8 <sendColor>
}
 8002374:	46c0      	nop			; (mov r8, r8)
 8002376:	46bd      	mov	sp, r7
 8002378:	b002      	add	sp, #8
 800237a:	bd80      	pop	{r7, pc}
 800237c:	20000005 	.word	0x20000005
 8002380:	20000006 	.word	0x20000006

08002384 <clearScreen>:

void clearScreen(uint16_t backgroundColor, SPI_HandleTypeDef *hspi) {
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	0002      	movs	r2, r0
 800238c:	6039      	str	r1, [r7, #0]
 800238e:	1dbb      	adds	r3, r7, #6
 8002390:	801a      	strh	r2, [r3, #0]
	bg = backgroundColor;
 8002392:	4b07      	ldr	r3, [pc, #28]	; (80023b0 <clearScreen+0x2c>)
 8002394:	1dba      	adds	r2, r7, #6
 8002396:	8812      	ldrh	r2, [r2, #0]
 8002398:	801a      	strh	r2, [r3, #0]
	fillScreen(backgroundColor, hspi);
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	1dbb      	adds	r3, r7, #6
 800239e:	881b      	ldrh	r3, [r3, #0]
 80023a0:	0011      	movs	r1, r2
 80023a2:	0018      	movs	r0, r3
 80023a4:	f7ff ffc4 	bl	8002330 <fillScreen>
}
 80023a8:	46c0      	nop			; (mov r8, r8)
 80023aa:	46bd      	mov	sp, r7
 80023ac:	b002      	add	sp, #8
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	20000002 	.word	0x20000002

080023b4 <drawChar>:
// ---- end of basic shapes and lines ----

// ---- text functions ----
// draw a character. based on 6x8 font, but scalable
// instead of drawing pixel by pixel, function builds a buffer first and then sends
void drawChar(uint8_t ch, SPI_HandleTypeDef *hspi) {
 80023b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023b6:	b095      	sub	sp, #84	; 0x54
 80023b8:	af04      	add	r7, sp, #16
 80023ba:	61b9      	str	r1, [r7, #24]
 80023bc:	221f      	movs	r2, #31
 80023be:	18ba      	adds	r2, r7, r2
 80023c0:	1c01      	adds	r1, r0, #0
 80023c2:	7011      	strb	r1, [r2, #0]
 80023c4:	466a      	mov	r2, sp
 80023c6:	607a      	str	r2, [r7, #4]
	uint16_t bufferSize = 6*8*textSize*textSize;
 80023c8:	4ab7      	ldr	r2, [pc, #732]	; (80026a8 <drawChar+0x2f4>)
 80023ca:	7812      	ldrb	r2, [r2, #0]
 80023cc:	b292      	uxth	r2, r2
 80023ce:	49b6      	ldr	r1, [pc, #728]	; (80026a8 <drawChar+0x2f4>)
 80023d0:	7809      	ldrb	r1, [r1, #0]
 80023d2:	b289      	uxth	r1, r1
 80023d4:	434a      	muls	r2, r1
 80023d6:	b291      	uxth	r1, r2
 80023d8:	221a      	movs	r2, #26
 80023da:	2018      	movs	r0, #24
 80023dc:	4684      	mov	ip, r0
 80023de:	44bc      	add	ip, r7
 80023e0:	4462      	add	r2, ip
 80023e2:	2030      	movs	r0, #48	; 0x30
 80023e4:	4341      	muls	r1, r0
 80023e6:	8011      	strh	r1, [r2, #0]
	uint16_t buffer[bufferSize];
 80023e8:	221a      	movs	r2, #26
 80023ea:	2118      	movs	r1, #24
 80023ec:	468c      	mov	ip, r1
 80023ee:	44bc      	add	ip, r7
 80023f0:	4462      	add	r2, ip
 80023f2:	8812      	ldrh	r2, [r2, #0]
 80023f4:	0011      	movs	r1, r2
 80023f6:	3901      	subs	r1, #1
 80023f8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80023fa:	613a      	str	r2, [r7, #16]
 80023fc:	2100      	movs	r1, #0
 80023fe:	6179      	str	r1, [r7, #20]
 8002400:	6939      	ldr	r1, [r7, #16]
 8002402:	0f09      	lsrs	r1, r1, #28
 8002404:	6978      	ldr	r0, [r7, #20]
 8002406:	0106      	lsls	r6, r0, #4
 8002408:	430e      	orrs	r6, r1
 800240a:	6939      	ldr	r1, [r7, #16]
 800240c:	010d      	lsls	r5, r1, #4
 800240e:	60ba      	str	r2, [r7, #8]
 8002410:	2100      	movs	r1, #0
 8002412:	60f9      	str	r1, [r7, #12]
 8002414:	68bd      	ldr	r5, [r7, #8]
 8002416:	68fe      	ldr	r6, [r7, #12]
 8002418:	0029      	movs	r1, r5
 800241a:	0f09      	lsrs	r1, r1, #28
 800241c:	0030      	movs	r0, r6
 800241e:	0104      	lsls	r4, r0, #4
 8002420:	430c      	orrs	r4, r1
 8002422:	0029      	movs	r1, r5
 8002424:	010b      	lsls	r3, r1, #4
 8002426:	0013      	movs	r3, r2
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	3301      	adds	r3, #1
 800242c:	3307      	adds	r3, #7
 800242e:	08db      	lsrs	r3, r3, #3
 8002430:	00db      	lsls	r3, r3, #3
 8002432:	466a      	mov	r2, sp
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	469d      	mov	sp, r3
 8002438:	ab04      	add	r3, sp, #16
 800243a:	3301      	adds	r3, #1
 800243c:	085b      	lsrs	r3, r3, #1
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	62bb      	str	r3, [r7, #40]	; 0x28
	int16_t rowOffset, address;

	// Char bitmap = 5 columns
	for (int8_t i=0; i<5; i++) {
 8002442:	2325      	movs	r3, #37	; 0x25
 8002444:	2218      	movs	r2, #24
 8002446:	4694      	mov	ip, r2
 8002448:	44bc      	add	ip, r7
 800244a:	4463      	add	r3, ip
 800244c:	2200      	movs	r2, #0
 800244e:	701a      	strb	r2, [r3, #0]
 8002450:	e1e0      	b.n	8002814 <drawChar+0x460>
		uint8_t line = font[ch*5+i];
 8002452:	231f      	movs	r3, #31
 8002454:	18fb      	adds	r3, r7, r3
 8002456:	781a      	ldrb	r2, [r3, #0]
 8002458:	0013      	movs	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	189a      	adds	r2, r3, r2
 800245e:	2325      	movs	r3, #37	; 0x25
 8002460:	2118      	movs	r1, #24
 8002462:	468c      	mov	ip, r1
 8002464:	44bc      	add	ip, r7
 8002466:	4463      	add	r3, ip
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	b25b      	sxtb	r3, r3
 800246c:	18d2      	adds	r2, r2, r3
 800246e:	2324      	movs	r3, #36	; 0x24
 8002470:	2118      	movs	r1, #24
 8002472:	468c      	mov	ip, r1
 8002474:	44bc      	add	ip, r7
 8002476:	4463      	add	r3, ip
 8002478:	498c      	ldr	r1, [pc, #560]	; (80026ac <drawChar+0x2f8>)
 800247a:	5c8a      	ldrb	r2, [r1, r2]
 800247c:	701a      	strb	r2, [r3, #0]
		for (int8_t j=0; j<8; j++, line >>= 1) {
 800247e:	2323      	movs	r3, #35	; 0x23
 8002480:	2218      	movs	r2, #24
 8002482:	4694      	mov	ip, r2
 8002484:	44bc      	add	ip, r7
 8002486:	4463      	add	r3, ip
 8002488:	2200      	movs	r2, #0
 800248a:	701a      	strb	r2, [r3, #0]
 800248c:	e1ac      	b.n	80027e8 <drawChar+0x434>
			// draw character pixel
			if (line & 1) {
 800248e:	2324      	movs	r3, #36	; 0x24
 8002490:	2218      	movs	r2, #24
 8002492:	4694      	mov	ip, r2
 8002494:	44bc      	add	ip, r7
 8002496:	4463      	add	r3, ip
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2201      	movs	r2, #1
 800249c:	4013      	ands	r3, r2
 800249e:	d100      	bne.n	80024a2 <drawChar+0xee>
 80024a0:	e0be      	b.n	8002620 <drawChar+0x26c>
				if (textSize == 1) {
 80024a2:	4b81      	ldr	r3, [pc, #516]	; (80026a8 <drawChar+0x2f4>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d118      	bne.n	80024dc <drawChar+0x128>
					buffer[i+j*6] = textColor;
 80024aa:	2325      	movs	r3, #37	; 0x25
 80024ac:	2218      	movs	r2, #24
 80024ae:	4694      	mov	ip, r2
 80024b0:	44bc      	add	ip, r7
 80024b2:	4463      	add	r3, ip
 80024b4:	2100      	movs	r1, #0
 80024b6:	5659      	ldrsb	r1, [r3, r1]
 80024b8:	2323      	movs	r3, #35	; 0x23
 80024ba:	2218      	movs	r2, #24
 80024bc:	4694      	mov	ip, r2
 80024be:	44bc      	add	ip, r7
 80024c0:	4463      	add	r3, ip
 80024c2:	2200      	movs	r2, #0
 80024c4:	569a      	ldrsb	r2, [r3, r2]
 80024c6:	0013      	movs	r3, r2
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	189b      	adds	r3, r3, r2
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	18ca      	adds	r2, r1, r3
 80024d0:	4b77      	ldr	r3, [pc, #476]	; (80026b0 <drawChar+0x2fc>)
 80024d2:	8819      	ldrh	r1, [r3, #0]
 80024d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d6:	0052      	lsls	r2, r2, #1
 80024d8:	52d1      	strh	r1, [r2, r3]
 80024da:	e16f      	b.n	80027bc <drawChar+0x408>
				}
				else {
					// indexing scheme for textSize > 1
					for (int8_t k = 0; k < textSize; k++) {
 80024dc:	2322      	movs	r3, #34	; 0x22
 80024de:	2218      	movs	r2, #24
 80024e0:	4694      	mov	ip, r2
 80024e2:	44bc      	add	ip, r7
 80024e4:	4463      	add	r3, ip
 80024e6:	2200      	movs	r2, #0
 80024e8:	701a      	strb	r2, [r3, #0]
 80024ea:	e08c      	b.n	8002606 <drawChar+0x252>
						rowOffset = textSize*6;
 80024ec:	4b6e      	ldr	r3, [pc, #440]	; (80026a8 <drawChar+0x2f4>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	1c1a      	adds	r2, r3, #0
 80024f4:	1c13      	adds	r3, r2, #0
 80024f6:	18db      	adds	r3, r3, r3
 80024f8:	189b      	adds	r3, r3, r2
 80024fa:	18db      	adds	r3, r3, r3
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	2326      	movs	r3, #38	; 0x26
 8002500:	2118      	movs	r1, #24
 8002502:	468c      	mov	ip, r1
 8002504:	44bc      	add	ip, r7
 8002506:	4463      	add	r3, ip
 8002508:	801a      	strh	r2, [r3, #0]
						for (int8_t l = 0; l < textSize; l++) {
 800250a:	2321      	movs	r3, #33	; 0x21
 800250c:	2218      	movs	r2, #24
 800250e:	4694      	mov	ip, r2
 8002510:	44bc      	add	ip, r7
 8002512:	4463      	add	r3, ip
 8002514:	2200      	movs	r2, #0
 8002516:	701a      	strb	r2, [r3, #0]
 8002518:	e05e      	b.n	80025d8 <drawChar+0x224>
							address = (textSize*textSize*j*6)+(i*textSize);
 800251a:	4b63      	ldr	r3, [pc, #396]	; (80026a8 <drawChar+0x2f4>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	b29b      	uxth	r3, r3
 8002520:	4a61      	ldr	r2, [pc, #388]	; (80026a8 <drawChar+0x2f4>)
 8002522:	7812      	ldrb	r2, [r2, #0]
 8002524:	b292      	uxth	r2, r2
 8002526:	4353      	muls	r3, r2
 8002528:	b29b      	uxth	r3, r3
 800252a:	2223      	movs	r2, #35	; 0x23
 800252c:	2118      	movs	r1, #24
 800252e:	468c      	mov	ip, r1
 8002530:	44bc      	add	ip, r7
 8002532:	4462      	add	r2, ip
 8002534:	7812      	ldrb	r2, [r2, #0]
 8002536:	b252      	sxtb	r2, r2
 8002538:	b292      	uxth	r2, r2
 800253a:	4353      	muls	r3, r2
 800253c:	b29b      	uxth	r3, r3
 800253e:	1c1a      	adds	r2, r3, #0
 8002540:	1c13      	adds	r3, r2, #0
 8002542:	18db      	adds	r3, r3, r3
 8002544:	189b      	adds	r3, r3, r2
 8002546:	18db      	adds	r3, r3, r3
 8002548:	b29a      	uxth	r2, r3
 800254a:	2325      	movs	r3, #37	; 0x25
 800254c:	2118      	movs	r1, #24
 800254e:	468c      	mov	ip, r1
 8002550:	44bc      	add	ip, r7
 8002552:	4463      	add	r3, ip
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	b25b      	sxtb	r3, r3
 8002558:	b29b      	uxth	r3, r3
 800255a:	4953      	ldr	r1, [pc, #332]	; (80026a8 <drawChar+0x2f4>)
 800255c:	7809      	ldrb	r1, [r1, #0]
 800255e:	b289      	uxth	r1, r1
 8002560:	434b      	muls	r3, r1
 8002562:	b29b      	uxth	r3, r3
 8002564:	18d3      	adds	r3, r2, r3
 8002566:	b29a      	uxth	r2, r3
 8002568:	210e      	movs	r1, #14
 800256a:	2418      	movs	r4, #24
 800256c:	193b      	adds	r3, r7, r4
 800256e:	185b      	adds	r3, r3, r1
 8002570:	801a      	strh	r2, [r3, #0]
							address += rowOffset*k+l;
 8002572:	2322      	movs	r3, #34	; 0x22
 8002574:	2218      	movs	r2, #24
 8002576:	4694      	mov	ip, r2
 8002578:	44bc      	add	ip, r7
 800257a:	4463      	add	r3, ip
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	b25b      	sxtb	r3, r3
 8002580:	b29b      	uxth	r3, r3
 8002582:	2226      	movs	r2, #38	; 0x26
 8002584:	2018      	movs	r0, #24
 8002586:	4684      	mov	ip, r0
 8002588:	44bc      	add	ip, r7
 800258a:	4462      	add	r2, ip
 800258c:	8812      	ldrh	r2, [r2, #0]
 800258e:	4353      	muls	r3, r2
 8002590:	b29a      	uxth	r2, r3
 8002592:	2021      	movs	r0, #33	; 0x21
 8002594:	193b      	adds	r3, r7, r4
 8002596:	181b      	adds	r3, r3, r0
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	b25b      	sxtb	r3, r3
 800259c:	b29b      	uxth	r3, r3
 800259e:	18d3      	adds	r3, r2, r3
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	193b      	adds	r3, r7, r4
 80025a4:	185b      	adds	r3, r3, r1
 80025a6:	881b      	ldrh	r3, [r3, #0]
 80025a8:	18d3      	adds	r3, r2, r3
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	193b      	adds	r3, r7, r4
 80025ae:	185b      	adds	r3, r3, r1
 80025b0:	801a      	strh	r2, [r3, #0]
							buffer[address] = textColor;
 80025b2:	193b      	adds	r3, r7, r4
 80025b4:	185b      	adds	r3, r3, r1
 80025b6:	2200      	movs	r2, #0
 80025b8:	5e9a      	ldrsh	r2, [r3, r2]
 80025ba:	4b3d      	ldr	r3, [pc, #244]	; (80026b0 <drawChar+0x2fc>)
 80025bc:	8819      	ldrh	r1, [r3, #0]
 80025be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c0:	0052      	lsls	r2, r2, #1
 80025c2:	52d1      	strh	r1, [r2, r3]
						for (int8_t l = 0; l < textSize; l++) {
 80025c4:	193b      	adds	r3, r7, r4
 80025c6:	181b      	adds	r3, r3, r0
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	b25b      	sxtb	r3, r3
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	3301      	adds	r3, #1
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	193b      	adds	r3, r7, r4
 80025d4:	181b      	adds	r3, r3, r0
 80025d6:	701a      	strb	r2, [r3, #0]
 80025d8:	2321      	movs	r3, #33	; 0x21
 80025da:	2218      	movs	r2, #24
 80025dc:	4694      	mov	ip, r2
 80025de:	44bc      	add	ip, r7
 80025e0:	4463      	add	r3, ip
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	b25b      	sxtb	r3, r3
 80025e6:	4a30      	ldr	r2, [pc, #192]	; (80026a8 <drawChar+0x2f4>)
 80025e8:	7812      	ldrb	r2, [r2, #0]
 80025ea:	4293      	cmp	r3, r2
 80025ec:	db95      	blt.n	800251a <drawChar+0x166>
					for (int8_t k = 0; k < textSize; k++) {
 80025ee:	2122      	movs	r1, #34	; 0x22
 80025f0:	2018      	movs	r0, #24
 80025f2:	183b      	adds	r3, r7, r0
 80025f4:	185b      	adds	r3, r3, r1
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	b25b      	sxtb	r3, r3
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	3301      	adds	r3, #1
 80025fe:	b2da      	uxtb	r2, r3
 8002600:	183b      	adds	r3, r7, r0
 8002602:	185b      	adds	r3, r3, r1
 8002604:	701a      	strb	r2, [r3, #0]
 8002606:	2322      	movs	r3, #34	; 0x22
 8002608:	2218      	movs	r2, #24
 800260a:	4694      	mov	ip, r2
 800260c:	44bc      	add	ip, r7
 800260e:	4463      	add	r3, ip
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	b25b      	sxtb	r3, r3
 8002614:	4a24      	ldr	r2, [pc, #144]	; (80026a8 <drawChar+0x2f4>)
 8002616:	7812      	ldrb	r2, [r2, #0]
 8002618:	4293      	cmp	r3, r2
 800261a:	da00      	bge.n	800261e <drawChar+0x26a>
 800261c:	e766      	b.n	80024ec <drawChar+0x138>
 800261e:	e0cd      	b.n	80027bc <drawChar+0x408>
						}
					}
				}
			}
			// draw text background
			else if (bg != textColor) {
 8002620:	4b24      	ldr	r3, [pc, #144]	; (80026b4 <drawChar+0x300>)
 8002622:	881a      	ldrh	r2, [r3, #0]
 8002624:	4b22      	ldr	r3, [pc, #136]	; (80026b0 <drawChar+0x2fc>)
 8002626:	881b      	ldrh	r3, [r3, #0]
 8002628:	429a      	cmp	r2, r3
 800262a:	d100      	bne.n	800262e <drawChar+0x27a>
 800262c:	e0c6      	b.n	80027bc <drawChar+0x408>
				if (textSize == 1) {
 800262e:	4b1e      	ldr	r3, [pc, #120]	; (80026a8 <drawChar+0x2f4>)
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d118      	bne.n	8002668 <drawChar+0x2b4>
					buffer[i+j*6] = bg;
 8002636:	2325      	movs	r3, #37	; 0x25
 8002638:	2218      	movs	r2, #24
 800263a:	4694      	mov	ip, r2
 800263c:	44bc      	add	ip, r7
 800263e:	4463      	add	r3, ip
 8002640:	2100      	movs	r1, #0
 8002642:	5659      	ldrsb	r1, [r3, r1]
 8002644:	2323      	movs	r3, #35	; 0x23
 8002646:	2218      	movs	r2, #24
 8002648:	4694      	mov	ip, r2
 800264a:	44bc      	add	ip, r7
 800264c:	4463      	add	r3, ip
 800264e:	2200      	movs	r2, #0
 8002650:	569a      	ldrsb	r2, [r3, r2]
 8002652:	0013      	movs	r3, r2
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	189b      	adds	r3, r3, r2
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	18ca      	adds	r2, r1, r3
 800265c:	4b15      	ldr	r3, [pc, #84]	; (80026b4 <drawChar+0x300>)
 800265e:	8819      	ldrh	r1, [r3, #0]
 8002660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002662:	0052      	lsls	r2, r2, #1
 8002664:	52d1      	strh	r1, [r2, r3]
 8002666:	e0a9      	b.n	80027bc <drawChar+0x408>
				}
				else {
					for (int8_t k = 0; k < textSize; k++) {
 8002668:	2320      	movs	r3, #32
 800266a:	2218      	movs	r2, #24
 800266c:	4694      	mov	ip, r2
 800266e:	44bc      	add	ip, r7
 8002670:	4463      	add	r3, ip
 8002672:	2200      	movs	r2, #0
 8002674:	701a      	strb	r2, [r3, #0]
 8002676:	e095      	b.n	80027a4 <drawChar+0x3f0>
						rowOffset = textSize*6;
 8002678:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <drawChar+0x2f4>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	b29b      	uxth	r3, r3
 800267e:	1c1a      	adds	r2, r3, #0
 8002680:	1c13      	adds	r3, r2, #0
 8002682:	18db      	adds	r3, r3, r3
 8002684:	189b      	adds	r3, r3, r2
 8002686:	18db      	adds	r3, r3, r3
 8002688:	b29a      	uxth	r2, r3
 800268a:	2326      	movs	r3, #38	; 0x26
 800268c:	2118      	movs	r1, #24
 800268e:	468c      	mov	ip, r1
 8002690:	44bc      	add	ip, r7
 8002692:	4463      	add	r3, ip
 8002694:	801a      	strh	r2, [r3, #0]
						for (int8_t l = 0; l < textSize; l++) {
 8002696:	231f      	movs	r3, #31
 8002698:	2218      	movs	r2, #24
 800269a:	4694      	mov	ip, r2
 800269c:	44bc      	add	ip, r7
 800269e:	4463      	add	r3, ip
 80026a0:	2200      	movs	r2, #0
 80026a2:	701a      	strb	r2, [r3, #0]
 80026a4:	e067      	b.n	8002776 <drawChar+0x3c2>
 80026a6:	46c0      	nop			; (mov r8, r8)
 80026a8:	20000000 	.word	0x20000000
 80026ac:	0800d030 	.word	0x0800d030
 80026b0:	20000106 	.word	0x20000106
 80026b4:	20000002 	.word	0x20000002
							address = (textSize*textSize*j*6)+(i*textSize);
 80026b8:	4bd2      	ldr	r3, [pc, #840]	; (8002a04 <drawChar+0x650>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	b29b      	uxth	r3, r3
 80026be:	4ad1      	ldr	r2, [pc, #836]	; (8002a04 <drawChar+0x650>)
 80026c0:	7812      	ldrb	r2, [r2, #0]
 80026c2:	b292      	uxth	r2, r2
 80026c4:	4353      	muls	r3, r2
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	2223      	movs	r2, #35	; 0x23
 80026ca:	2118      	movs	r1, #24
 80026cc:	468c      	mov	ip, r1
 80026ce:	44bc      	add	ip, r7
 80026d0:	4462      	add	r2, ip
 80026d2:	7812      	ldrb	r2, [r2, #0]
 80026d4:	b252      	sxtb	r2, r2
 80026d6:	b292      	uxth	r2, r2
 80026d8:	4353      	muls	r3, r2
 80026da:	b29b      	uxth	r3, r3
 80026dc:	1c1a      	adds	r2, r3, #0
 80026de:	1c13      	adds	r3, r2, #0
 80026e0:	18db      	adds	r3, r3, r3
 80026e2:	189b      	adds	r3, r3, r2
 80026e4:	18db      	adds	r3, r3, r3
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	2325      	movs	r3, #37	; 0x25
 80026ea:	2118      	movs	r1, #24
 80026ec:	468c      	mov	ip, r1
 80026ee:	44bc      	add	ip, r7
 80026f0:	4463      	add	r3, ip
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	b25b      	sxtb	r3, r3
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	49c2      	ldr	r1, [pc, #776]	; (8002a04 <drawChar+0x650>)
 80026fa:	7809      	ldrb	r1, [r1, #0]
 80026fc:	b289      	uxth	r1, r1
 80026fe:	434b      	muls	r3, r1
 8002700:	b29b      	uxth	r3, r3
 8002702:	18d3      	adds	r3, r2, r3
 8002704:	b29a      	uxth	r2, r3
 8002706:	210e      	movs	r1, #14
 8002708:	2418      	movs	r4, #24
 800270a:	193b      	adds	r3, r7, r4
 800270c:	185b      	adds	r3, r3, r1
 800270e:	801a      	strh	r2, [r3, #0]
							address += rowOffset*k+l;
 8002710:	2320      	movs	r3, #32
 8002712:	2218      	movs	r2, #24
 8002714:	4694      	mov	ip, r2
 8002716:	44bc      	add	ip, r7
 8002718:	4463      	add	r3, ip
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	b25b      	sxtb	r3, r3
 800271e:	b29b      	uxth	r3, r3
 8002720:	2226      	movs	r2, #38	; 0x26
 8002722:	2018      	movs	r0, #24
 8002724:	4684      	mov	ip, r0
 8002726:	44bc      	add	ip, r7
 8002728:	4462      	add	r2, ip
 800272a:	8812      	ldrh	r2, [r2, #0]
 800272c:	4353      	muls	r3, r2
 800272e:	b29a      	uxth	r2, r3
 8002730:	201f      	movs	r0, #31
 8002732:	193b      	adds	r3, r7, r4
 8002734:	181b      	adds	r3, r3, r0
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	b25b      	sxtb	r3, r3
 800273a:	b29b      	uxth	r3, r3
 800273c:	18d3      	adds	r3, r2, r3
 800273e:	b29a      	uxth	r2, r3
 8002740:	193b      	adds	r3, r7, r4
 8002742:	185b      	adds	r3, r3, r1
 8002744:	881b      	ldrh	r3, [r3, #0]
 8002746:	18d3      	adds	r3, r2, r3
 8002748:	b29a      	uxth	r2, r3
 800274a:	193b      	adds	r3, r7, r4
 800274c:	185b      	adds	r3, r3, r1
 800274e:	801a      	strh	r2, [r3, #0]
							buffer[address] = bg;
 8002750:	193b      	adds	r3, r7, r4
 8002752:	185b      	adds	r3, r3, r1
 8002754:	2200      	movs	r2, #0
 8002756:	5e9a      	ldrsh	r2, [r3, r2]
 8002758:	4bab      	ldr	r3, [pc, #684]	; (8002a08 <drawChar+0x654>)
 800275a:	8819      	ldrh	r1, [r3, #0]
 800275c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275e:	0052      	lsls	r2, r2, #1
 8002760:	52d1      	strh	r1, [r2, r3]
						for (int8_t l = 0; l < textSize; l++) {
 8002762:	193b      	adds	r3, r7, r4
 8002764:	181b      	adds	r3, r3, r0
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	b25b      	sxtb	r3, r3
 800276a:	b2db      	uxtb	r3, r3
 800276c:	3301      	adds	r3, #1
 800276e:	b2da      	uxtb	r2, r3
 8002770:	193b      	adds	r3, r7, r4
 8002772:	181b      	adds	r3, r3, r0
 8002774:	701a      	strb	r2, [r3, #0]
 8002776:	231f      	movs	r3, #31
 8002778:	2218      	movs	r2, #24
 800277a:	4694      	mov	ip, r2
 800277c:	44bc      	add	ip, r7
 800277e:	4463      	add	r3, ip
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	b25b      	sxtb	r3, r3
 8002784:	4a9f      	ldr	r2, [pc, #636]	; (8002a04 <drawChar+0x650>)
 8002786:	7812      	ldrb	r2, [r2, #0]
 8002788:	4293      	cmp	r3, r2
 800278a:	db95      	blt.n	80026b8 <drawChar+0x304>
					for (int8_t k = 0; k < textSize; k++) {
 800278c:	2120      	movs	r1, #32
 800278e:	2018      	movs	r0, #24
 8002790:	183b      	adds	r3, r7, r0
 8002792:	185b      	adds	r3, r3, r1
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	b25b      	sxtb	r3, r3
 8002798:	b2db      	uxtb	r3, r3
 800279a:	3301      	adds	r3, #1
 800279c:	b2da      	uxtb	r2, r3
 800279e:	183b      	adds	r3, r7, r0
 80027a0:	185b      	adds	r3, r3, r1
 80027a2:	701a      	strb	r2, [r3, #0]
 80027a4:	2320      	movs	r3, #32
 80027a6:	2218      	movs	r2, #24
 80027a8:	4694      	mov	ip, r2
 80027aa:	44bc      	add	ip, r7
 80027ac:	4463      	add	r3, ip
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	b25b      	sxtb	r3, r3
 80027b2:	4a94      	ldr	r2, [pc, #592]	; (8002a04 <drawChar+0x650>)
 80027b4:	7812      	ldrb	r2, [r2, #0]
 80027b6:	4293      	cmp	r3, r2
 80027b8:	da00      	bge.n	80027bc <drawChar+0x408>
 80027ba:	e75d      	b.n	8002678 <drawChar+0x2c4>
		for (int8_t j=0; j<8; j++, line >>= 1) {
 80027bc:	2123      	movs	r1, #35	; 0x23
 80027be:	2018      	movs	r0, #24
 80027c0:	183b      	adds	r3, r7, r0
 80027c2:	185b      	adds	r3, r3, r1
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	b25b      	sxtb	r3, r3
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	3301      	adds	r3, #1
 80027cc:	b2da      	uxtb	r2, r3
 80027ce:	183b      	adds	r3, r7, r0
 80027d0:	185b      	adds	r3, r3, r1
 80027d2:	701a      	strb	r2, [r3, #0]
 80027d4:	2224      	movs	r2, #36	; 0x24
 80027d6:	183b      	adds	r3, r7, r0
 80027d8:	189b      	adds	r3, r3, r2
 80027da:	2118      	movs	r1, #24
 80027dc:	468c      	mov	ip, r1
 80027de:	44bc      	add	ip, r7
 80027e0:	4462      	add	r2, ip
 80027e2:	7812      	ldrb	r2, [r2, #0]
 80027e4:	0852      	lsrs	r2, r2, #1
 80027e6:	701a      	strb	r2, [r3, #0]
 80027e8:	2323      	movs	r3, #35	; 0x23
 80027ea:	2218      	movs	r2, #24
 80027ec:	4694      	mov	ip, r2
 80027ee:	44bc      	add	ip, r7
 80027f0:	4463      	add	r3, ip
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	b25b      	sxtb	r3, r3
 80027f6:	2b07      	cmp	r3, #7
 80027f8:	dc00      	bgt.n	80027fc <drawChar+0x448>
 80027fa:	e648      	b.n	800248e <drawChar+0xda>
	for (int8_t i=0; i<5; i++) {
 80027fc:	2125      	movs	r1, #37	; 0x25
 80027fe:	2018      	movs	r0, #24
 8002800:	183b      	adds	r3, r7, r0
 8002802:	185b      	adds	r3, r3, r1
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	b25b      	sxtb	r3, r3
 8002808:	b2db      	uxtb	r3, r3
 800280a:	3301      	adds	r3, #1
 800280c:	b2da      	uxtb	r2, r3
 800280e:	183b      	adds	r3, r7, r0
 8002810:	185b      	adds	r3, r3, r1
 8002812:	701a      	strb	r2, [r3, #0]
 8002814:	2325      	movs	r3, #37	; 0x25
 8002816:	2218      	movs	r2, #24
 8002818:	4694      	mov	ip, r2
 800281a:	44bc      	add	ip, r7
 800281c:	4463      	add	r3, ip
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	b25b      	sxtb	r3, r3
 8002822:	2b04      	cmp	r3, #4
 8002824:	dc00      	bgt.n	8002828 <drawChar+0x474>
 8002826:	e614      	b.n	8002452 <drawChar+0x9e>
		}
	}

	// If opaque, draw vertical line for last column
	// for character 1px kerning
	if (bg != textColor) {
 8002828:	4b77      	ldr	r3, [pc, #476]	; (8002a08 <drawChar+0x654>)
 800282a:	881a      	ldrh	r2, [r3, #0]
 800282c:	4b77      	ldr	r3, [pc, #476]	; (8002a0c <drawChar+0x658>)
 800282e:	881b      	ldrh	r3, [r3, #0]
 8002830:	429a      	cmp	r2, r3
 8002832:	d100      	bne.n	8002836 <drawChar+0x482>
 8002834:	e0bf      	b.n	80029b6 <drawChar+0x602>
		for (int8_t j = 0; j < 8; j++) {
 8002836:	231e      	movs	r3, #30
 8002838:	2218      	movs	r2, #24
 800283a:	4694      	mov	ip, r2
 800283c:	44bc      	add	ip, r7
 800283e:	4463      	add	r3, ip
 8002840:	2200      	movs	r2, #0
 8002842:	701a      	strb	r2, [r3, #0]
 8002844:	e0ad      	b.n	80029a2 <drawChar+0x5ee>
			if (textSize == 1) {
 8002846:	4b6f      	ldr	r3, [pc, #444]	; (8002a04 <drawChar+0x650>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d111      	bne.n	8002872 <drawChar+0x4be>
				buffer[5+j*6] = bg;
 800284e:	231e      	movs	r3, #30
 8002850:	2218      	movs	r2, #24
 8002852:	4694      	mov	ip, r2
 8002854:	44bc      	add	ip, r7
 8002856:	4463      	add	r3, ip
 8002858:	2200      	movs	r2, #0
 800285a:	569a      	ldrsb	r2, [r3, r2]
 800285c:	0013      	movs	r3, r2
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	189b      	adds	r3, r3, r2
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	1d5a      	adds	r2, r3, #5
 8002866:	4b68      	ldr	r3, [pc, #416]	; (8002a08 <drawChar+0x654>)
 8002868:	8819      	ldrh	r1, [r3, #0]
 800286a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286c:	0052      	lsls	r2, r2, #1
 800286e:	52d1      	strh	r1, [r2, r3]
 8002870:	e08b      	b.n	800298a <drawChar+0x5d6>
			}
			else {
				for (int8_t k = 0; k < textSize; k++) {
 8002872:	231d      	movs	r3, #29
 8002874:	2218      	movs	r2, #24
 8002876:	4694      	mov	ip, r2
 8002878:	44bc      	add	ip, r7
 800287a:	4463      	add	r3, ip
 800287c:	2200      	movs	r2, #0
 800287e:	701a      	strb	r2, [r3, #0]
 8002880:	e077      	b.n	8002972 <drawChar+0x5be>
					for (int8_t l = 0; l < textSize; l++) {
 8002882:	231c      	movs	r3, #28
 8002884:	2218      	movs	r2, #24
 8002886:	4694      	mov	ip, r2
 8002888:	44bc      	add	ip, r7
 800288a:	4463      	add	r3, ip
 800288c:	2200      	movs	r2, #0
 800288e:	701a      	strb	r2, [r3, #0]
 8002890:	e058      	b.n	8002944 <drawChar+0x590>
						address = (textSize*textSize*j*6)+(5*textSize);
 8002892:	4b5c      	ldr	r3, [pc, #368]	; (8002a04 <drawChar+0x650>)
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	b29b      	uxth	r3, r3
 8002898:	4a5a      	ldr	r2, [pc, #360]	; (8002a04 <drawChar+0x650>)
 800289a:	7812      	ldrb	r2, [r2, #0]
 800289c:	b292      	uxth	r2, r2
 800289e:	4353      	muls	r3, r2
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	221e      	movs	r2, #30
 80028a4:	2118      	movs	r1, #24
 80028a6:	468c      	mov	ip, r1
 80028a8:	44bc      	add	ip, r7
 80028aa:	4462      	add	r2, ip
 80028ac:	7812      	ldrb	r2, [r2, #0]
 80028ae:	b252      	sxtb	r2, r2
 80028b0:	b292      	uxth	r2, r2
 80028b2:	4353      	muls	r3, r2
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	1c1a      	adds	r2, r3, #0
 80028b8:	1c13      	adds	r3, r2, #0
 80028ba:	18db      	adds	r3, r3, r3
 80028bc:	189b      	adds	r3, r3, r2
 80028be:	18db      	adds	r3, r3, r3
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	4b50      	ldr	r3, [pc, #320]	; (8002a04 <drawChar+0x650>)
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	1c19      	adds	r1, r3, #0
 80028ca:	0089      	lsls	r1, r1, #2
 80028cc:	18cb      	adds	r3, r1, r3
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	18d3      	adds	r3, r2, r3
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	210e      	movs	r1, #14
 80028d6:	2418      	movs	r4, #24
 80028d8:	193b      	adds	r3, r7, r4
 80028da:	185b      	adds	r3, r3, r1
 80028dc:	801a      	strh	r2, [r3, #0]
						address += rowOffset*k+l;
 80028de:	231d      	movs	r3, #29
 80028e0:	2218      	movs	r2, #24
 80028e2:	4694      	mov	ip, r2
 80028e4:	44bc      	add	ip, r7
 80028e6:	4463      	add	r3, ip
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	b25b      	sxtb	r3, r3
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	2226      	movs	r2, #38	; 0x26
 80028f0:	2018      	movs	r0, #24
 80028f2:	4684      	mov	ip, r0
 80028f4:	44bc      	add	ip, r7
 80028f6:	4462      	add	r2, ip
 80028f8:	8812      	ldrh	r2, [r2, #0]
 80028fa:	4353      	muls	r3, r2
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	201c      	movs	r0, #28
 8002900:	193b      	adds	r3, r7, r4
 8002902:	181b      	adds	r3, r3, r0
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	b25b      	sxtb	r3, r3
 8002908:	b29b      	uxth	r3, r3
 800290a:	18d3      	adds	r3, r2, r3
 800290c:	b29a      	uxth	r2, r3
 800290e:	193b      	adds	r3, r7, r4
 8002910:	185b      	adds	r3, r3, r1
 8002912:	881b      	ldrh	r3, [r3, #0]
 8002914:	18d3      	adds	r3, r2, r3
 8002916:	b29a      	uxth	r2, r3
 8002918:	193b      	adds	r3, r7, r4
 800291a:	185b      	adds	r3, r3, r1
 800291c:	801a      	strh	r2, [r3, #0]
						buffer[address] = bg;
 800291e:	193b      	adds	r3, r7, r4
 8002920:	185b      	adds	r3, r3, r1
 8002922:	2200      	movs	r2, #0
 8002924:	5e9a      	ldrsh	r2, [r3, r2]
 8002926:	4b38      	ldr	r3, [pc, #224]	; (8002a08 <drawChar+0x654>)
 8002928:	8819      	ldrh	r1, [r3, #0]
 800292a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800292c:	0052      	lsls	r2, r2, #1
 800292e:	52d1      	strh	r1, [r2, r3]
					for (int8_t l = 0; l < textSize; l++) {
 8002930:	193b      	adds	r3, r7, r4
 8002932:	181b      	adds	r3, r3, r0
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	b25b      	sxtb	r3, r3
 8002938:	b2db      	uxtb	r3, r3
 800293a:	3301      	adds	r3, #1
 800293c:	b2da      	uxtb	r2, r3
 800293e:	193b      	adds	r3, r7, r4
 8002940:	181b      	adds	r3, r3, r0
 8002942:	701a      	strb	r2, [r3, #0]
 8002944:	231c      	movs	r3, #28
 8002946:	2218      	movs	r2, #24
 8002948:	4694      	mov	ip, r2
 800294a:	44bc      	add	ip, r7
 800294c:	4463      	add	r3, ip
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	b25b      	sxtb	r3, r3
 8002952:	4a2c      	ldr	r2, [pc, #176]	; (8002a04 <drawChar+0x650>)
 8002954:	7812      	ldrb	r2, [r2, #0]
 8002956:	4293      	cmp	r3, r2
 8002958:	db9b      	blt.n	8002892 <drawChar+0x4de>
				for (int8_t k = 0; k < textSize; k++) {
 800295a:	211d      	movs	r1, #29
 800295c:	2018      	movs	r0, #24
 800295e:	183b      	adds	r3, r7, r0
 8002960:	185b      	adds	r3, r3, r1
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	b25b      	sxtb	r3, r3
 8002966:	b2db      	uxtb	r3, r3
 8002968:	3301      	adds	r3, #1
 800296a:	b2da      	uxtb	r2, r3
 800296c:	183b      	adds	r3, r7, r0
 800296e:	185b      	adds	r3, r3, r1
 8002970:	701a      	strb	r2, [r3, #0]
 8002972:	231d      	movs	r3, #29
 8002974:	2218      	movs	r2, #24
 8002976:	4694      	mov	ip, r2
 8002978:	44bc      	add	ip, r7
 800297a:	4463      	add	r3, ip
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	b25b      	sxtb	r3, r3
 8002980:	4a20      	ldr	r2, [pc, #128]	; (8002a04 <drawChar+0x650>)
 8002982:	7812      	ldrb	r2, [r2, #0]
 8002984:	4293      	cmp	r3, r2
 8002986:	da00      	bge.n	800298a <drawChar+0x5d6>
 8002988:	e77b      	b.n	8002882 <drawChar+0x4ce>
		for (int8_t j = 0; j < 8; j++) {
 800298a:	211e      	movs	r1, #30
 800298c:	2018      	movs	r0, #24
 800298e:	183b      	adds	r3, r7, r0
 8002990:	185b      	adds	r3, r3, r1
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	b25b      	sxtb	r3, r3
 8002996:	b2db      	uxtb	r3, r3
 8002998:	3301      	adds	r3, #1
 800299a:	b2da      	uxtb	r2, r3
 800299c:	183b      	adds	r3, r7, r0
 800299e:	185b      	adds	r3, r3, r1
 80029a0:	701a      	strb	r2, [r3, #0]
 80029a2:	231e      	movs	r3, #30
 80029a4:	2218      	movs	r2, #24
 80029a6:	4694      	mov	ip, r2
 80029a8:	44bc      	add	ip, r7
 80029aa:	4463      	add	r3, ip
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	b25b      	sxtb	r3, r3
 80029b0:	2b07      	cmp	r3, #7
 80029b2:	dc00      	bgt.n	80029b6 <drawChar+0x602>
 80029b4:	e747      	b.n	8002846 <drawChar+0x492>
				}
			}
		}
	}

	drawBuffer(cursorX, cursorY, 6*textSize, 8*textSize, buffer, bufferSize, hspi);
 80029b6:	4b16      	ldr	r3, [pc, #88]	; (8002a10 <drawChar+0x65c>)
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	0018      	movs	r0, r3
 80029bc:	4b15      	ldr	r3, [pc, #84]	; (8002a14 <drawChar+0x660>)
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	001c      	movs	r4, r3
 80029c2:	4b10      	ldr	r3, [pc, #64]	; (8002a04 <drawChar+0x650>)
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	001a      	movs	r2, r3
 80029c8:	0013      	movs	r3, r2
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	189b      	adds	r3, r3, r2
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	001d      	movs	r5, r3
 80029d2:	4b0c      	ldr	r3, [pc, #48]	; (8002a04 <drawChar+0x650>)
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	00d9      	lsls	r1, r3, #3
 80029d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	9202      	str	r2, [sp, #8]
 80029de:	221a      	movs	r2, #26
 80029e0:	2618      	movs	r6, #24
 80029e2:	46b4      	mov	ip, r6
 80029e4:	44bc      	add	ip, r7
 80029e6:	4462      	add	r2, ip
 80029e8:	8812      	ldrh	r2, [r2, #0]
 80029ea:	9201      	str	r2, [sp, #4]
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	000b      	movs	r3, r1
 80029f0:	002a      	movs	r2, r5
 80029f2:	0021      	movs	r1, r4
 80029f4:	f7ff fbf4 	bl	80021e0 <drawBuffer>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	469d      	mov	sp, r3
}
 80029fc:	46c0      	nop			; (mov r8, r8)
 80029fe:	46bd      	mov	sp, r7
 8002a00:	b011      	add	sp, #68	; 0x44
 8002a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a04:	20000000 	.word	0x20000000
 8002a08:	20000002 	.word	0x20000002
 8002a0c:	20000106 	.word	0x20000106
 8002a10:	20000104 	.word	0x20000104
 8002a14:	20000105 	.word	0x20000105

08002a18 <drawText>:

// draws character strings
void drawText(const char *str, SPI_HandleTypeDef *hspi) {
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
	for (int i = 0; str[i] != '\0'; i++) {
 8002a22:	2300      	movs	r3, #0
 8002a24:	60fb      	str	r3, [r7, #12]
 8002a26:	e01d      	b.n	8002a64 <drawText+0x4c>
		drawChar(str[i], hspi);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	18d3      	adds	r3, r2, r3
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	0011      	movs	r1, r2
 8002a34:	0018      	movs	r0, r3
 8002a36:	f7ff fcbd 	bl	80023b4 <drawChar>

		// moves cursor on every character print so it's not printed to the same place
		setCursor(cursorX+textSize*6, cursorY);
 8002a3a:	4b0f      	ldr	r3, [pc, #60]	; (8002a78 <drawText+0x60>)
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	1c1a      	adds	r2, r3, #0
 8002a40:	1c13      	adds	r3, r2, #0
 8002a42:	18db      	adds	r3, r3, r3
 8002a44:	189b      	adds	r3, r3, r2
 8002a46:	18db      	adds	r3, r3, r3
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	4b0c      	ldr	r3, [pc, #48]	; (8002a7c <drawText+0x64>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	18d3      	adds	r3, r2, r3
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <drawText+0x68>)
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	0019      	movs	r1, r3
 8002a58:	0010      	movs	r0, r2
 8002a5a:	f000 f9a3 	bl	8002da4 <setCursor>
	for (int i = 0; str[i] != '\0'; i++) {
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	3301      	adds	r3, #1
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	18d3      	adds	r3, r2, r3
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d1db      	bne.n	8002a28 <drawText+0x10>
	}
}
 8002a70:	46c0      	nop			; (mov r8, r8)
 8002a72:	46bd      	mov	sp, r7
 8002a74:	b004      	add	sp, #16
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	20000000 	.word	0x20000000
 8002a7c:	20000104 	.word	0x20000104
 8002a80:	20000105 	.word	0x20000105

08002a84 <drawTextAt>:

// drawText, but coordinates as arguments. coordinates are for upper left bound
void drawTextAt(uint8_t x, uint8_t y, const char *str, SPI_HandleTypeDef *hspi) {
 8002a84:	b590      	push	{r4, r7, lr}
 8002a86:	b087      	sub	sp, #28
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60ba      	str	r2, [r7, #8]
 8002a8c:	607b      	str	r3, [r7, #4]
 8002a8e:	240f      	movs	r4, #15
 8002a90:	193b      	adds	r3, r7, r4
 8002a92:	1c02      	adds	r2, r0, #0
 8002a94:	701a      	strb	r2, [r3, #0]
 8002a96:	200e      	movs	r0, #14
 8002a98:	183b      	adds	r3, r7, r0
 8002a9a:	1c0a      	adds	r2, r1, #0
 8002a9c:	701a      	strb	r2, [r3, #0]
	// add text wrap
	int i = 0;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	617b      	str	r3, [r7, #20]
	setCursor(x,y);
 8002aa2:	183b      	adds	r3, r7, r0
 8002aa4:	781a      	ldrb	r2, [r3, #0]
 8002aa6:	193b      	adds	r3, r7, r4
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	0011      	movs	r1, r2
 8002aac:	0018      	movs	r0, r3
 8002aae:	f000 f979 	bl	8002da4 <setCursor>
	for (i = 0; str[i] != '\0'; i++) {
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	617b      	str	r3, [r7, #20]
 8002ab6:	e01d      	b.n	8002af4 <drawTextAt+0x70>
		drawChar(str[i], hspi);
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	68ba      	ldr	r2, [r7, #8]
 8002abc:	18d3      	adds	r3, r2, r3
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	0011      	movs	r1, r2
 8002ac4:	0018      	movs	r0, r3
 8002ac6:	f7ff fc75 	bl	80023b4 <drawChar>
		setCursor(cursorX+textSize*6, cursorY);
 8002aca:	4b0f      	ldr	r3, [pc, #60]	; (8002b08 <drawTextAt+0x84>)
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	1c1a      	adds	r2, r3, #0
 8002ad0:	1c13      	adds	r3, r2, #0
 8002ad2:	18db      	adds	r3, r3, r3
 8002ad4:	189b      	adds	r3, r3, r2
 8002ad6:	18db      	adds	r3, r3, r3
 8002ad8:	b2da      	uxtb	r2, r3
 8002ada:	4b0c      	ldr	r3, [pc, #48]	; (8002b0c <drawTextAt+0x88>)
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	18d3      	adds	r3, r2, r3
 8002ae0:	b2da      	uxtb	r2, r3
 8002ae2:	4b0b      	ldr	r3, [pc, #44]	; (8002b10 <drawTextAt+0x8c>)
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	0019      	movs	r1, r3
 8002ae8:	0010      	movs	r0, r2
 8002aea:	f000 f95b 	bl	8002da4 <setCursor>
	for (i = 0; str[i] != '\0'; i++) {
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	3301      	adds	r3, #1
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	68ba      	ldr	r2, [r7, #8]
 8002af8:	18d3      	adds	r3, r2, r3
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1db      	bne.n	8002ab8 <drawTextAt+0x34>
	}
}
 8002b00:	46c0      	nop			; (mov r8, r8)
 8002b02:	46bd      	mov	sp, r7
 8002b04:	b007      	add	sp, #28
 8002b06:	bd90      	pop	{r4, r7, pc}
 8002b08:	20000000 	.word	0x20000000
 8002b0c:	20000104 	.word	0x20000104
 8002b10:	20000105 	.word	0x20000105

08002b14 <drawCenteredText>:
	fillRect(x, y, boxW, boxH, bg, hspi);
	drawTextAt(x, y, str, hspi);
}

// draws text centered on an x coordinate. y is upper bound of box
void drawCenteredText(uint8_t x_center, uint8_t y, const char *str, SPI_HandleTypeDef *hspi) {
 8002b14:	b590      	push	{r4, r7, lr}
 8002b16:	b089      	sub	sp, #36	; 0x24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60ba      	str	r2, [r7, #8]
 8002b1c:	607b      	str	r3, [r7, #4]
 8002b1e:	230f      	movs	r3, #15
 8002b20:	18fb      	adds	r3, r7, r3
 8002b22:	1c02      	adds	r2, r0, #0
 8002b24:	701a      	strb	r2, [r3, #0]
 8002b26:	240e      	movs	r4, #14
 8002b28:	193b      	adds	r3, r7, r4
 8002b2a:	1c0a      	adds	r2, r1, #0
 8002b2c:	701a      	strb	r2, [r3, #0]
	uint8_t strSize = strlen(str);
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	0018      	movs	r0, r3
 8002b32:	f7fd fae9 	bl	8000108 <strlen>
 8002b36:	0002      	movs	r2, r0
 8002b38:	231f      	movs	r3, #31
 8002b3a:	18fb      	adds	r3, r7, r3
 8002b3c:	701a      	strb	r2, [r3, #0]
	// bounds checking. text box needed to print text should not end up out of bounds
	// also calculating what bounds of text box should be
	if (y+textSize*8 > displayHeight) return;
 8002b3e:	193b      	adds	r3, r7, r4
 8002b40:	781a      	ldrb	r2, [r3, #0]
 8002b42:	4b27      	ldr	r3, [pc, #156]	; (8002be0 <drawCenteredText+0xcc>)
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	18d3      	adds	r3, r2, r3
 8002b4a:	4a26      	ldr	r2, [pc, #152]	; (8002be4 <drawCenteredText+0xd0>)
 8002b4c:	7812      	ldrb	r2, [r2, #0]
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	dc3d      	bgt.n	8002bce <drawCenteredText+0xba>
	int leftBound = x_center-(strSize*textSize*6)/2;
 8002b52:	230f      	movs	r3, #15
 8002b54:	18fb      	adds	r3, r7, r3
 8002b56:	7819      	ldrb	r1, [r3, #0]
 8002b58:	231f      	movs	r3, #31
 8002b5a:	18fb      	adds	r3, r7, r3
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	4a20      	ldr	r2, [pc, #128]	; (8002be0 <drawCenteredText+0xcc>)
 8002b60:	7812      	ldrb	r2, [r2, #0]
 8002b62:	435a      	muls	r2, r3
 8002b64:	0013      	movs	r3, r2
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	189b      	adds	r3, r3, r2
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	d500      	bpl.n	8002b70 <drawCenteredText+0x5c>
 8002b6e:	3301      	adds	r3, #1
 8002b70:	105b      	asrs	r3, r3, #1
 8002b72:	425b      	negs	r3, r3
 8002b74:	18cb      	adds	r3, r1, r3
 8002b76:	61bb      	str	r3, [r7, #24]
	int rightBound = x_center+(strSize*textSize*6)/2;
 8002b78:	230f      	movs	r3, #15
 8002b7a:	18fb      	adds	r3, r7, r3
 8002b7c:	7819      	ldrb	r1, [r3, #0]
 8002b7e:	231f      	movs	r3, #31
 8002b80:	18fb      	adds	r3, r7, r3
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	4a16      	ldr	r2, [pc, #88]	; (8002be0 <drawCenteredText+0xcc>)
 8002b86:	7812      	ldrb	r2, [r2, #0]
 8002b88:	435a      	muls	r2, r3
 8002b8a:	0013      	movs	r3, r2
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	189b      	adds	r3, r3, r2
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	d500      	bpl.n	8002b96 <drawCenteredText+0x82>
 8002b94:	3301      	adds	r3, #1
 8002b96:	105b      	asrs	r3, r3, #1
 8002b98:	18cb      	adds	r3, r1, r3
 8002b9a:	617b      	str	r3, [r7, #20]
	if (leftBound < 0) return;
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	db17      	blt.n	8002bd2 <drawCenteredText+0xbe>
	if (rightBound > displayWidth) return;
 8002ba2:	4b11      	ldr	r3, [pc, #68]	; (8002be8 <drawCenteredText+0xd4>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	001a      	movs	r2, r3
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	4293      	cmp	r3, r2
 8002bac:	dc13      	bgt.n	8002bd6 <drawCenteredText+0xc2>

	setCursor(leftBound, y);
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	230e      	movs	r3, #14
 8002bb4:	18fb      	adds	r3, r7, r3
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	0019      	movs	r1, r3
 8002bba:	0010      	movs	r0, r2
 8002bbc:	f000 f8f2 	bl	8002da4 <setCursor>
	drawText(str, hspi);
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	0011      	movs	r1, r2
 8002bc6:	0018      	movs	r0, r3
 8002bc8:	f7ff ff26 	bl	8002a18 <drawText>
 8002bcc:	e004      	b.n	8002bd8 <drawCenteredText+0xc4>
	if (y+textSize*8 > displayHeight) return;
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	e002      	b.n	8002bd8 <drawCenteredText+0xc4>
	if (leftBound < 0) return;
 8002bd2:	46c0      	nop			; (mov r8, r8)
 8002bd4:	e000      	b.n	8002bd8 <drawCenteredText+0xc4>
	if (rightBound > displayWidth) return;
 8002bd6:	46c0      	nop			; (mov r8, r8)
}
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	b009      	add	sp, #36	; 0x24
 8002bdc:	bd90      	pop	{r4, r7, pc}
 8002bde:	46c0      	nop			; (mov r8, r8)
 8002be0:	20000000 	.word	0x20000000
 8002be4:	20000006 	.word	0x20000006
 8002be8:	20000005 	.word	0x20000005

08002bec <drawCenteredTextWithPadding>:

// drawCenteredText, but background is filled to left and right of box
// used for cases where you're printing strings to the same place, but they have different sizes
void drawCenteredTextWithPadding(uint8_t x_center, uint8_t y, uint8_t maxLength, const char *str, SPI_HandleTypeDef *hspi) {
 8002bec:	b5b0      	push	{r4, r5, r7, lr}
 8002bee:	b088      	sub	sp, #32
 8002bf0:	af02      	add	r7, sp, #8
 8002bf2:	0004      	movs	r4, r0
 8002bf4:	0008      	movs	r0, r1
 8002bf6:	0011      	movs	r1, r2
 8002bf8:	603b      	str	r3, [r7, #0]
 8002bfa:	1dfb      	adds	r3, r7, #7
 8002bfc:	1c22      	adds	r2, r4, #0
 8002bfe:	701a      	strb	r2, [r3, #0]
 8002c00:	1dbb      	adds	r3, r7, #6
 8002c02:	1c02      	adds	r2, r0, #0
 8002c04:	701a      	strb	r2, [r3, #0]
 8002c06:	1d7b      	adds	r3, r7, #5
 8002c08:	1c0a      	adds	r2, r1, #0
 8002c0a:	701a      	strb	r2, [r3, #0]
	// bounds checking. text box needed to print text should not end up out of bounds
	if (y+textSize*8 > displayHeight) return;
 8002c0c:	1dbb      	adds	r3, r7, #6
 8002c0e:	781a      	ldrb	r2, [r3, #0]
 8002c10:	4b60      	ldr	r3, [pc, #384]	; (8002d94 <drawCenteredTextWithPadding+0x1a8>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	18d3      	adds	r3, r2, r3
 8002c18:	4a5f      	ldr	r2, [pc, #380]	; (8002d98 <drawCenteredTextWithPadding+0x1ac>)
 8002c1a:	7812      	ldrb	r2, [r2, #0]
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	dd00      	ble.n	8002c22 <drawCenteredTextWithPadding+0x36>
 8002c20:	e0ad      	b.n	8002d7e <drawCenteredTextWithPadding+0x192>
	int leftBound = x_center-(maxLength*textSize*6)/2;
 8002c22:	1dfb      	adds	r3, r7, #7
 8002c24:	7819      	ldrb	r1, [r3, #0]
 8002c26:	1d7b      	adds	r3, r7, #5
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	4a5a      	ldr	r2, [pc, #360]	; (8002d94 <drawCenteredTextWithPadding+0x1a8>)
 8002c2c:	7812      	ldrb	r2, [r2, #0]
 8002c2e:	435a      	muls	r2, r3
 8002c30:	0013      	movs	r3, r2
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	189b      	adds	r3, r3, r2
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	d500      	bpl.n	8002c3c <drawCenteredTextWithPadding+0x50>
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	105b      	asrs	r3, r3, #1
 8002c3e:	425b      	negs	r3, r3
 8002c40:	18cb      	adds	r3, r1, r3
 8002c42:	617b      	str	r3, [r7, #20]
	int rightBound = x_center+(maxLength*textSize*6)/2;
 8002c44:	1dfb      	adds	r3, r7, #7
 8002c46:	7819      	ldrb	r1, [r3, #0]
 8002c48:	1d7b      	adds	r3, r7, #5
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	4a51      	ldr	r2, [pc, #324]	; (8002d94 <drawCenteredTextWithPadding+0x1a8>)
 8002c4e:	7812      	ldrb	r2, [r2, #0]
 8002c50:	435a      	muls	r2, r3
 8002c52:	0013      	movs	r3, r2
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	189b      	adds	r3, r3, r2
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	d500      	bpl.n	8002c5e <drawCenteredTextWithPadding+0x72>
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	105b      	asrs	r3, r3, #1
 8002c60:	18cb      	adds	r3, r1, r3
 8002c62:	613b      	str	r3, [r7, #16]
	if (leftBound < 0) return;
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	da00      	bge.n	8002c6c <drawCenteredTextWithPadding+0x80>
 8002c6a:	e08a      	b.n	8002d82 <drawCenteredTextWithPadding+0x196>
	if (rightBound > displayWidth) return;
 8002c6c:	4b4b      	ldr	r3, [pc, #300]	; (8002d9c <drawCenteredTextWithPadding+0x1b0>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	001a      	movs	r2, r3
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	4293      	cmp	r3, r2
 8002c76:	dd00      	ble.n	8002c7a <drawCenteredTextWithPadding+0x8e>
 8002c78:	e085      	b.n	8002d86 <drawCenteredTextWithPadding+0x19a>

	uint8_t strSize = strlen(str);
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	f7fd fa43 	bl	8000108 <strlen>
 8002c82:	0002      	movs	r2, r0
 8002c84:	210f      	movs	r1, #15
 8002c86:	187b      	adds	r3, r7, r1
 8002c88:	701a      	strb	r2, [r3, #0]
	if (maxLength < strSize) return;		// size should not be greater than max
 8002c8a:	1d7a      	adds	r2, r7, #5
 8002c8c:	187b      	adds	r3, r7, r1
 8002c8e:	7812      	ldrb	r2, [r2, #0]
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d200      	bcs.n	8002c98 <drawCenteredTextWithPadding+0xac>
 8002c96:	e078      	b.n	8002d8a <drawCenteredTextWithPadding+0x19e>

	// draw left and right padding
	uint8_t diff = maxLength-strSize;
 8002c98:	200e      	movs	r0, #14
 8002c9a:	183b      	adds	r3, r7, r0
 8002c9c:	1d79      	adds	r1, r7, #5
 8002c9e:	220f      	movs	r2, #15
 8002ca0:	18ba      	adds	r2, r7, r2
 8002ca2:	7809      	ldrb	r1, [r1, #0]
 8002ca4:	7812      	ldrb	r2, [r2, #0]
 8002ca6:	1a8a      	subs	r2, r1, r2
 8002ca8:	701a      	strb	r2, [r3, #0]
	fillRect(leftBound, y, diff*textSize*6/2, textSize*8, bg, hspi);		// math out of order to accomodate diff/2 being a non-int
 8002caa:	1dbb      	adds	r3, r7, #6
 8002cac:	7819      	ldrb	r1, [r3, #0]
 8002cae:	183b      	adds	r3, r7, r0
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	4a38      	ldr	r2, [pc, #224]	; (8002d94 <drawCenteredTextWithPadding+0x1a8>)
 8002cb4:	7812      	ldrb	r2, [r2, #0]
 8002cb6:	435a      	muls	r2, r3
 8002cb8:	0013      	movs	r3, r2
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	189b      	adds	r3, r3, r2
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	d500      	bpl.n	8002cc4 <drawCenteredTextWithPadding+0xd8>
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	105b      	asrs	r3, r3, #1
 8002cc6:	001d      	movs	r5, r3
 8002cc8:	4b32      	ldr	r3, [pc, #200]	; (8002d94 <drawCenteredTextWithPadding+0x1a8>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	00dc      	lsls	r4, r3, #3
 8002cce:	4b34      	ldr	r3, [pc, #208]	; (8002da0 <drawCenteredTextWithPadding+0x1b4>)
 8002cd0:	881b      	ldrh	r3, [r3, #0]
 8002cd2:	6978      	ldr	r0, [r7, #20]
 8002cd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cd6:	9201      	str	r2, [sp, #4]
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	0023      	movs	r3, r4
 8002cdc:	002a      	movs	r2, r5
 8002cde:	f7ff fb01 	bl	80022e4 <fillRect>
	fillRect(rightBound-diff*textSize*6/2, y, diff*textSize*6/2, textSize*8, bg, hspi);
 8002ce2:	230e      	movs	r3, #14
 8002ce4:	18fb      	adds	r3, r7, r3
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	4a2a      	ldr	r2, [pc, #168]	; (8002d94 <drawCenteredTextWithPadding+0x1a8>)
 8002cea:	7812      	ldrb	r2, [r2, #0]
 8002cec:	435a      	muls	r2, r3
 8002cee:	0013      	movs	r3, r2
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	189b      	adds	r3, r3, r2
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	d500      	bpl.n	8002cfa <drawCenteredTextWithPadding+0x10e>
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	105b      	asrs	r3, r3, #1
 8002cfc:	425b      	negs	r3, r3
 8002cfe:	001a      	movs	r2, r3
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	18d0      	adds	r0, r2, r3
 8002d04:	1dbb      	adds	r3, r7, #6
 8002d06:	7819      	ldrb	r1, [r3, #0]
 8002d08:	230e      	movs	r3, #14
 8002d0a:	18fb      	adds	r3, r7, r3
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	4a21      	ldr	r2, [pc, #132]	; (8002d94 <drawCenteredTextWithPadding+0x1a8>)
 8002d10:	7812      	ldrb	r2, [r2, #0]
 8002d12:	435a      	muls	r2, r3
 8002d14:	0013      	movs	r3, r2
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	189b      	adds	r3, r3, r2
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	d500      	bpl.n	8002d20 <drawCenteredTextWithPadding+0x134>
 8002d1e:	3301      	adds	r3, #1
 8002d20:	105b      	asrs	r3, r3, #1
 8002d22:	001d      	movs	r5, r3
 8002d24:	4b1b      	ldr	r3, [pc, #108]	; (8002d94 <drawCenteredTextWithPadding+0x1a8>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	00dc      	lsls	r4, r3, #3
 8002d2a:	4b1d      	ldr	r3, [pc, #116]	; (8002da0 <drawCenteredTextWithPadding+0x1b4>)
 8002d2c:	881b      	ldrh	r3, [r3, #0]
 8002d2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d30:	9201      	str	r2, [sp, #4]
 8002d32:	9300      	str	r3, [sp, #0]
 8002d34:	0023      	movs	r3, r4
 8002d36:	002a      	movs	r2, r5
 8002d38:	f7ff fad4 	bl	80022e4 <fillRect>

	int textLeftBound = x_center-(strSize*textSize*6)/2;
 8002d3c:	1dfb      	adds	r3, r7, #7
 8002d3e:	7819      	ldrb	r1, [r3, #0]
 8002d40:	230f      	movs	r3, #15
 8002d42:	18fb      	adds	r3, r7, r3
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	4a13      	ldr	r2, [pc, #76]	; (8002d94 <drawCenteredTextWithPadding+0x1a8>)
 8002d48:	7812      	ldrb	r2, [r2, #0]
 8002d4a:	435a      	muls	r2, r3
 8002d4c:	0013      	movs	r3, r2
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	189b      	adds	r3, r3, r2
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	d500      	bpl.n	8002d58 <drawCenteredTextWithPadding+0x16c>
 8002d56:	3301      	adds	r3, #1
 8002d58:	105b      	asrs	r3, r3, #1
 8002d5a:	425b      	negs	r3, r3
 8002d5c:	18cb      	adds	r3, r1, r3
 8002d5e:	60bb      	str	r3, [r7, #8]
	setCursor(textLeftBound, y);
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	1dbb      	adds	r3, r7, #6
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	0019      	movs	r1, r3
 8002d6a:	0010      	movs	r0, r2
 8002d6c:	f000 f81a 	bl	8002da4 <setCursor>
	drawText(str, hspi);
 8002d70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	0011      	movs	r1, r2
 8002d76:	0018      	movs	r0, r3
 8002d78:	f7ff fe4e 	bl	8002a18 <drawText>
 8002d7c:	e006      	b.n	8002d8c <drawCenteredTextWithPadding+0x1a0>
	if (y+textSize*8 > displayHeight) return;
 8002d7e:	46c0      	nop			; (mov r8, r8)
 8002d80:	e004      	b.n	8002d8c <drawCenteredTextWithPadding+0x1a0>
	if (leftBound < 0) return;
 8002d82:	46c0      	nop			; (mov r8, r8)
 8002d84:	e002      	b.n	8002d8c <drawCenteredTextWithPadding+0x1a0>
	if (rightBound > displayWidth) return;
 8002d86:	46c0      	nop			; (mov r8, r8)
 8002d88:	e000      	b.n	8002d8c <drawCenteredTextWithPadding+0x1a0>
	if (maxLength < strSize) return;		// size should not be greater than max
 8002d8a:	46c0      	nop			; (mov r8, r8)
}
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	b006      	add	sp, #24
 8002d90:	bdb0      	pop	{r4, r5, r7, pc}
 8002d92:	46c0      	nop			; (mov r8, r8)
 8002d94:	20000000 	.word	0x20000000
 8002d98:	20000006 	.word	0x20000006
 8002d9c:	20000005 	.word	0x20000005
 8002da0:	20000002 	.word	0x20000002

08002da4 <setCursor>:
}

// ---- getters and setters ----
// sets static variables
void setBackgroundColor(uint16_t color) {bg = color;}
void setCursor(uint8_t x, uint8_t y) {cursorX = x; cursorY = y;}
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	0002      	movs	r2, r0
 8002dac:	1dfb      	adds	r3, r7, #7
 8002dae:	701a      	strb	r2, [r3, #0]
 8002db0:	1dbb      	adds	r3, r7, #6
 8002db2:	1c0a      	adds	r2, r1, #0
 8002db4:	701a      	strb	r2, [r3, #0]
 8002db6:	4b06      	ldr	r3, [pc, #24]	; (8002dd0 <setCursor+0x2c>)
 8002db8:	1dfa      	adds	r2, r7, #7
 8002dba:	7812      	ldrb	r2, [r2, #0]
 8002dbc:	701a      	strb	r2, [r3, #0]
 8002dbe:	4b05      	ldr	r3, [pc, #20]	; (8002dd4 <setCursor+0x30>)
 8002dc0:	1dba      	adds	r2, r7, #6
 8002dc2:	7812      	ldrb	r2, [r2, #0]
 8002dc4:	701a      	strb	r2, [r3, #0]
 8002dc6:	46c0      	nop			; (mov r8, r8)
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	b002      	add	sp, #8
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	46c0      	nop			; (mov r8, r8)
 8002dd0:	20000104 	.word	0x20000104
 8002dd4:	20000105 	.word	0x20000105

08002dd8 <setTextSize>:
void setTextSize(uint8_t size) {textSize = size;}
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	0002      	movs	r2, r0
 8002de0:	1dfb      	adds	r3, r7, #7
 8002de2:	701a      	strb	r2, [r3, #0]
 8002de4:	4b03      	ldr	r3, [pc, #12]	; (8002df4 <setTextSize+0x1c>)
 8002de6:	1dfa      	adds	r2, r7, #7
 8002de8:	7812      	ldrb	r2, [r2, #0]
 8002dea:	701a      	strb	r2, [r3, #0]
 8002dec:	46c0      	nop			; (mov r8, r8)
 8002dee:	46bd      	mov	sp, r7
 8002df0:	b002      	add	sp, #8
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	20000000 	.word	0x20000000

08002df8 <setTextColor>:
void setTextColor(uint16_t color) {textColor = color;}
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	0002      	movs	r2, r0
 8002e00:	1dbb      	adds	r3, r7, #6
 8002e02:	801a      	strh	r2, [r3, #0]
 8002e04:	4b03      	ldr	r3, [pc, #12]	; (8002e14 <setTextColor+0x1c>)
 8002e06:	1dba      	adds	r2, r7, #6
 8002e08:	8812      	ldrh	r2, [r2, #0]
 8002e0a:	801a      	strh	r2, [r3, #0]
 8002e0c:	46c0      	nop			; (mov r8, r8)
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	b002      	add	sp, #8
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	20000106 	.word	0x20000106

08002e18 <getBackgroundColor>:
uint16_t getBackgroundColor() {return bg;}
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	4b02      	ldr	r3, [pc, #8]	; (8002e28 <getBackgroundColor+0x10>)
 8002e1e:	881b      	ldrh	r3, [r3, #0]
 8002e20:	0018      	movs	r0, r3
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	46c0      	nop			; (mov r8, r8)
 8002e28:	20000002 	.word	0x20000002

08002e2c <setDisplayOrientation>:
// sets display MADCTL (0x00, 0x60, 0xC0, 0xA0)
// 0: default portrait
// 1: landscape (90 deg clockwise)
// 2: portrait flipped
// 3: landscape flipped
void setDisplayOrientation(uint8_t o, SPI_HandleTypeDef *hspi) {
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	0002      	movs	r2, r0
 8002e34:	6039      	str	r1, [r7, #0]
 8002e36:	1dfb      	adds	r3, r7, #7
 8002e38:	701a      	strb	r2, [r3, #0]
	uint8_t data = 0;
 8002e3a:	230f      	movs	r3, #15
 8002e3c:	18fb      	adds	r3, r7, r3
 8002e3e:	2200      	movs	r2, #0
 8002e40:	701a      	strb	r2, [r3, #0]

	o %= 4;
 8002e42:	1dfb      	adds	r3, r7, #7
 8002e44:	1dfa      	adds	r2, r7, #7
 8002e46:	7812      	ldrb	r2, [r2, #0]
 8002e48:	2103      	movs	r1, #3
 8002e4a:	400a      	ands	r2, r1
 8002e4c:	701a      	strb	r2, [r3, #0]
	orientation = o;
 8002e4e:	4b24      	ldr	r3, [pc, #144]	; (8002ee0 <setDisplayOrientation+0xb4>)
 8002e50:	1dfa      	adds	r2, r7, #7
 8002e52:	7812      	ldrb	r2, [r2, #0]
 8002e54:	701a      	strb	r2, [r3, #0]
	switch (o) {
 8002e56:	1dfb      	adds	r3, r7, #7
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d013      	beq.n	8002e86 <setDisplayOrientation+0x5a>
 8002e5e:	dc02      	bgt.n	8002e66 <setDisplayOrientation+0x3a>
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d005      	beq.n	8002e70 <setDisplayOrientation+0x44>
		case 3:
			displayHeight = 128;
			displayWidth = 160;
			data = 0xA0;
			break;
		default: break;
 8002e64:	e030      	b.n	8002ec8 <setDisplayOrientation+0x9c>
	switch (o) {
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d018      	beq.n	8002e9c <setDisplayOrientation+0x70>
 8002e6a:	2b03      	cmp	r3, #3
 8002e6c:	d021      	beq.n	8002eb2 <setDisplayOrientation+0x86>
		default: break;
 8002e6e:	e02b      	b.n	8002ec8 <setDisplayOrientation+0x9c>
			displayHeight = 160;		// TODO: use header constants
 8002e70:	4b1c      	ldr	r3, [pc, #112]	; (8002ee4 <setDisplayOrientation+0xb8>)
 8002e72:	22a0      	movs	r2, #160	; 0xa0
 8002e74:	701a      	strb	r2, [r3, #0]
			displayWidth = 128;
 8002e76:	4b1c      	ldr	r3, [pc, #112]	; (8002ee8 <setDisplayOrientation+0xbc>)
 8002e78:	2280      	movs	r2, #128	; 0x80
 8002e7a:	701a      	strb	r2, [r3, #0]
			data = 0x00;
 8002e7c:	230f      	movs	r3, #15
 8002e7e:	18fb      	adds	r3, r7, r3
 8002e80:	2200      	movs	r2, #0
 8002e82:	701a      	strb	r2, [r3, #0]
			break;
 8002e84:	e020      	b.n	8002ec8 <setDisplayOrientation+0x9c>
			displayHeight = 128;
 8002e86:	4b17      	ldr	r3, [pc, #92]	; (8002ee4 <setDisplayOrientation+0xb8>)
 8002e88:	2280      	movs	r2, #128	; 0x80
 8002e8a:	701a      	strb	r2, [r3, #0]
			displayWidth = 160;
 8002e8c:	4b16      	ldr	r3, [pc, #88]	; (8002ee8 <setDisplayOrientation+0xbc>)
 8002e8e:	22a0      	movs	r2, #160	; 0xa0
 8002e90:	701a      	strb	r2, [r3, #0]
			data = 0x60;
 8002e92:	230f      	movs	r3, #15
 8002e94:	18fb      	adds	r3, r7, r3
 8002e96:	2260      	movs	r2, #96	; 0x60
 8002e98:	701a      	strb	r2, [r3, #0]
			break;
 8002e9a:	e015      	b.n	8002ec8 <setDisplayOrientation+0x9c>
			displayHeight = 160;
 8002e9c:	4b11      	ldr	r3, [pc, #68]	; (8002ee4 <setDisplayOrientation+0xb8>)
 8002e9e:	22a0      	movs	r2, #160	; 0xa0
 8002ea0:	701a      	strb	r2, [r3, #0]
			displayWidth = 128;
 8002ea2:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <setDisplayOrientation+0xbc>)
 8002ea4:	2280      	movs	r2, #128	; 0x80
 8002ea6:	701a      	strb	r2, [r3, #0]
			data = 0xC0;
 8002ea8:	230f      	movs	r3, #15
 8002eaa:	18fb      	adds	r3, r7, r3
 8002eac:	22c0      	movs	r2, #192	; 0xc0
 8002eae:	701a      	strb	r2, [r3, #0]
			break;
 8002eb0:	e00a      	b.n	8002ec8 <setDisplayOrientation+0x9c>
			displayHeight = 128;
 8002eb2:	4b0c      	ldr	r3, [pc, #48]	; (8002ee4 <setDisplayOrientation+0xb8>)
 8002eb4:	2280      	movs	r2, #128	; 0x80
 8002eb6:	701a      	strb	r2, [r3, #0]
			displayWidth = 160;
 8002eb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ee8 <setDisplayOrientation+0xbc>)
 8002eba:	22a0      	movs	r2, #160	; 0xa0
 8002ebc:	701a      	strb	r2, [r3, #0]
			data = 0xA0;
 8002ebe:	230f      	movs	r3, #15
 8002ec0:	18fb      	adds	r3, r7, r3
 8002ec2:	22a0      	movs	r2, #160	; 0xa0
 8002ec4:	701a      	strb	r2, [r3, #0]
			break;
 8002ec6:	46c0      	nop			; (mov r8, r8)
	}
	sendCommand(ST77XX_MADCTL, &data, 1, hspi);
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	220f      	movs	r2, #15
 8002ecc:	18b9      	adds	r1, r7, r2
 8002ece:	2201      	movs	r2, #1
 8002ed0:	2036      	movs	r0, #54	; 0x36
 8002ed2:	f7fe feb5 	bl	8001c40 <sendCommand>
}
 8002ed6:	46c0      	nop			; (mov r8, r8)
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	b004      	add	sp, #16
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	46c0      	nop			; (mov r8, r8)
 8002ee0:	20000004 	.word	0x20000004
 8002ee4:	20000006 	.word	0x20000006
 8002ee8:	20000005 	.word	0x20000005

08002eec <getDisplayOrientation>:

uint8_t getDisplayOrientation() {return orientation;}
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	4b02      	ldr	r3, [pc, #8]	; (8002efc <getDisplayOrientation+0x10>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	46c0      	nop			; (mov r8, r8)
 8002efc:	20000004 	.word	0x20000004

08002f00 <getDisplayHeight>:
uint16_t getDisplayHeight() {return displayHeight;}
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	4b02      	ldr	r3, [pc, #8]	; (8002f10 <getDisplayHeight+0x10>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	20000006 	.word	0x20000006

08002f14 <getDisplayWidth>:
uint16_t getDisplayWidth() {return displayWidth;}
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	4b02      	ldr	r3, [pc, #8]	; (8002f24 <getDisplayWidth+0x10>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	0018      	movs	r0, r3
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	20000005 	.word	0x20000005

08002f28 <leftToCentered>:
	// TODO: use displayWidth variable
	if (xLeft > 0 && xLeft < displayWidth) return xLeft;
	else return 0;
}

uint16_t leftToCentered(uint16_t x, uint16_t boxW) {
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	0002      	movs	r2, r0
 8002f30:	1dbb      	adds	r3, r7, #6
 8002f32:	801a      	strh	r2, [r3, #0]
 8002f34:	1d3b      	adds	r3, r7, #4
 8002f36:	1c0a      	adds	r2, r1, #0
 8002f38:	801a      	strh	r2, [r3, #0]
	int xCentered = x+(boxW/2);
 8002f3a:	1dbb      	adds	r3, r7, #6
 8002f3c:	881b      	ldrh	r3, [r3, #0]
 8002f3e:	1d3a      	adds	r2, r7, #4
 8002f40:	8812      	ldrh	r2, [r2, #0]
 8002f42:	0852      	lsrs	r2, r2, #1
 8002f44:	b292      	uxth	r2, r2
 8002f46:	189b      	adds	r3, r3, r2
 8002f48:	60fb      	str	r3, [r7, #12]

	if (xCentered > 0 && xCentered < displayWidth) return xCentered;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	dd08      	ble.n	8002f62 <leftToCentered+0x3a>
 8002f50:	4b06      	ldr	r3, [pc, #24]	; (8002f6c <leftToCentered+0x44>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	001a      	movs	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	da02      	bge.n	8002f62 <leftToCentered+0x3a>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	e000      	b.n	8002f64 <leftToCentered+0x3c>
	else return 0;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	0018      	movs	r0, r3
 8002f66:	46bd      	mov	sp, r7
 8002f68:	b004      	add	sp, #16
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	20000005 	.word	0x20000005

08002f70 <centeredToLeft>:

uint16_t centeredToLeft(uint16_t x, uint16_t boxW) {
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	0002      	movs	r2, r0
 8002f78:	1dbb      	adds	r3, r7, #6
 8002f7a:	801a      	strh	r2, [r3, #0]
 8002f7c:	1d3b      	adds	r3, r7, #4
 8002f7e:	1c0a      	adds	r2, r1, #0
 8002f80:	801a      	strh	r2, [r3, #0]
	int xLeft = x-(boxW/2);
 8002f82:	1dbb      	adds	r3, r7, #6
 8002f84:	881b      	ldrh	r3, [r3, #0]
 8002f86:	1d3a      	adds	r2, r7, #4
 8002f88:	8812      	ldrh	r2, [r2, #0]
 8002f8a:	0852      	lsrs	r2, r2, #1
 8002f8c:	b292      	uxth	r2, r2
 8002f8e:	1a9b      	subs	r3, r3, r2
 8002f90:	60fb      	str	r3, [r7, #12]

	if (xLeft > 0 && xLeft < displayWidth) return xLeft;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	dd08      	ble.n	8002faa <centeredToLeft+0x3a>
 8002f98:	4b06      	ldr	r3, [pc, #24]	; (8002fb4 <centeredToLeft+0x44>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	001a      	movs	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	da02      	bge.n	8002faa <centeredToLeft+0x3a>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	e000      	b.n	8002fac <centeredToLeft+0x3c>
	else return 0;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	0018      	movs	r0, r3
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	b004      	add	sp, #16
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	20000005 	.word	0x20000005

08002fb8 <batteryManager>:

static const float batteryCapacity[];
static uint16_t batteryCapacityArraySize = 179;

// spi used to turn display on/off and drawing battery graphic
void batteryManager(ADC_HandleTypeDef *hadc, SPI_HandleTypeDef *hspi, TIM_HandleTypeDef *timerStopwatchTim, TIM_HandleTypeDef *backlightTim) {
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
 8002fc4:	603b      	str	r3, [r7, #0]
	if (canSampleBattery) {
 8002fc6:	4b0a      	ldr	r3, [pc, #40]	; (8002ff0 <batteryManager+0x38>)
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00a      	beq.n	8002fe6 <batteryManager+0x2e>
		canSampleBattery = 0;
 8002fd0:	4b07      	ldr	r3, [pc, #28]	; (8002ff0 <batteryManager+0x38>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	701a      	strb	r2, [r3, #0]

		battPercentage = getBatteryPercentage(hadc);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	0018      	movs	r0, r3
 8002fda:	f000 f80d 	bl	8002ff8 <getBatteryPercentage>
 8002fde:	0003      	movs	r3, r0
 8002fe0:	001a      	movs	r2, r3
 8002fe2:	4b04      	ldr	r3, [pc, #16]	; (8002ff4 <batteryManager+0x3c>)
 8002fe4:	801a      	strh	r2, [r3, #0]
//			bState = batteryNormal;
//		}
//
//		drawBattery(battPercentage, hspi);
	}
}
 8002fe6:	46c0      	nop			; (mov r8, r8)
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	b004      	add	sp, #16
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	46c0      	nop			; (mov r8, r8)
 8002ff0:	20000162 	.word	0x20000162
 8002ff4:	20000160 	.word	0x20000160

08002ff8 <getBatteryPercentage>:
	setDisplayBacklight(100, backlightTim);
	runTimerStopwatchBase(timerStopwatchTim);
}

// should return a number from 0-100
uint16_t getBatteryPercentage(ADC_HandleTypeDef *hadc) {
 8002ff8:	b5b0      	push	{r4, r5, r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
	float v, temp;
	uint8_t index;

	// enable adc voltage divider for measurements, disable after
	HAL_GPIO_WritePin(ADC_DIVIDER_PORT, ADC_DIVIDER_PIN, GPIO_PIN_SET);
 8003000:	23a0      	movs	r3, #160	; 0xa0
 8003002:	05db      	lsls	r3, r3, #23
 8003004:	2201      	movs	r2, #1
 8003006:	2102      	movs	r1, #2
 8003008:	0018      	movs	r0, r3
 800300a:	f005 fcb9 	bl	8008980 <HAL_GPIO_WritePin>
	HAL_ADC_Start(hadc);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	0018      	movs	r0, r3
 8003012:	f004 fc65 	bl	80078e0 <HAL_ADC_Start>

	HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8003016:	2301      	movs	r3, #1
 8003018:	425a      	negs	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	0011      	movs	r1, r2
 800301e:	0018      	movs	r0, r3
 8003020:	f004 fcf2 	bl	8007a08 <HAL_ADC_PollForConversion>
	v = 3.3*HAL_ADC_GetValue(hadc)/(0xFFF);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	0018      	movs	r0, r3
 8003028:	f004 fd84 	bl	8007b34 <HAL_ADC_GetValue>
 800302c:	0003      	movs	r3, r0
 800302e:	0018      	movs	r0, r3
 8003030:	f7fe fd16 	bl	8001a60 <__aeabi_ui2d>
 8003034:	4a2c      	ldr	r2, [pc, #176]	; (80030e8 <getBatteryPercentage+0xf0>)
 8003036:	4b2d      	ldr	r3, [pc, #180]	; (80030ec <getBatteryPercentage+0xf4>)
 8003038:	f7fe fa66 	bl	8001508 <__aeabi_dmul>
 800303c:	0003      	movs	r3, r0
 800303e:	000c      	movs	r4, r1
 8003040:	0018      	movs	r0, r3
 8003042:	0021      	movs	r1, r4
 8003044:	2200      	movs	r2, #0
 8003046:	4b2a      	ldr	r3, [pc, #168]	; (80030f0 <getBatteryPercentage+0xf8>)
 8003048:	f7fd ff5c 	bl	8000f04 <__aeabi_ddiv>
 800304c:	0003      	movs	r3, r0
 800304e:	000c      	movs	r4, r1
 8003050:	0018      	movs	r0, r3
 8003052:	0021      	movs	r1, r4
 8003054:	f7fe fd36 	bl	8001ac4 <__aeabi_d2f>
 8003058:	1c03      	adds	r3, r0, #0
 800305a:	617b      	str	r3, [r7, #20]

	HAL_ADC_Stop(hadc);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	0018      	movs	r0, r3
 8003060:	f004 fc92 	bl	8007988 <HAL_ADC_Stop>
	HAL_GPIO_WritePin(ADC_DIVIDER_PORT, ADC_DIVIDER_PIN, GPIO_PIN_RESET);
 8003064:	23a0      	movs	r3, #160	; 0xa0
 8003066:	05db      	lsls	r3, r3, #23
 8003068:	2200      	movs	r2, #0
 800306a:	2102      	movs	r1, #2
 800306c:	0018      	movs	r0, r3
 800306e:	f005 fc87 	bl	8008980 <HAL_GPIO_WritePin>
//	return v*10;

	// trying to look only for 4.0-3.4. anything above 4.0 is 100%, anything below 3.4 is 0%
	// scaled voltages (3.3/4.2) at 3.1429-2.6714
	// indices at 2-153. have to scale and flip to go from 100-0 since 2->100%
	index = search(v);
 8003072:	2513      	movs	r5, #19
 8003074:	197c      	adds	r4, r7, r5
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	1c18      	adds	r0, r3, #0
 800307a:	f000 f841 	bl	8003100 <search>
 800307e:	0003      	movs	r3, r0
 8003080:	7023      	strb	r3, [r4, #0]
	if (index < 2) return 100;
 8003082:	197b      	adds	r3, r7, r5
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d801      	bhi.n	800308e <getBatteryPercentage+0x96>
 800308a:	2364      	movs	r3, #100	; 0x64
 800308c:	e028      	b.n	80030e0 <getBatteryPercentage+0xe8>
	else if (index >= 153) return 0;
 800308e:	2313      	movs	r3, #19
 8003090:	18fb      	adds	r3, r7, r3
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	2b98      	cmp	r3, #152	; 0x98
 8003096:	d901      	bls.n	800309c <getBatteryPercentage+0xa4>
 8003098:	2300      	movs	r3, #0
 800309a:	e021      	b.n	80030e0 <getBatteryPercentage+0xe8>
	else {
		index -= 2;
 800309c:	2113      	movs	r1, #19
 800309e:	187b      	adds	r3, r7, r1
 80030a0:	187a      	adds	r2, r7, r1
 80030a2:	7812      	ldrb	r2, [r2, #0]
 80030a4:	3a02      	subs	r2, #2
 80030a6:	701a      	strb	r2, [r3, #0]
		temp = index*(100.0/(153-2));
 80030a8:	187b      	adds	r3, r7, r1
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	0018      	movs	r0, r3
 80030ae:	f7fe fc9d 	bl	80019ec <__aeabi_i2d>
 80030b2:	4a10      	ldr	r2, [pc, #64]	; (80030f4 <getBatteryPercentage+0xfc>)
 80030b4:	4b10      	ldr	r3, [pc, #64]	; (80030f8 <getBatteryPercentage+0x100>)
 80030b6:	f7fe fa27 	bl	8001508 <__aeabi_dmul>
 80030ba:	0003      	movs	r3, r0
 80030bc:	000c      	movs	r4, r1
 80030be:	0018      	movs	r0, r3
 80030c0:	0021      	movs	r1, r4
 80030c2:	f7fe fcff 	bl	8001ac4 <__aeabi_d2f>
 80030c6:	1c03      	adds	r3, r0, #0
 80030c8:	60fb      	str	r3, [r7, #12]
		temp = 100-temp;
 80030ca:	68f9      	ldr	r1, [r7, #12]
 80030cc:	480b      	ldr	r0, [pc, #44]	; (80030fc <getBatteryPercentage+0x104>)
 80030ce:	f7fd fcf5 	bl	8000abc <__aeabi_fsub>
 80030d2:	1c03      	adds	r3, r0, #0
 80030d4:	60fb      	str	r3, [r7, #12]
		return temp;
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f7fd f9ce 	bl	8000478 <__aeabi_f2uiz>
 80030dc:	0003      	movs	r3, r0
 80030de:	b29b      	uxth	r3, r3
	}
}
 80030e0:	0018      	movs	r0, r3
 80030e2:	46bd      	mov	sp, r7
 80030e4:	b006      	add	sp, #24
 80030e6:	bdb0      	pop	{r4, r5, r7, pc}
 80030e8:	66666666 	.word	0x66666666
 80030ec:	400a6666 	.word	0x400a6666
 80030f0:	40affe00 	.word	0x40affe00
 80030f4:	6254c4aa 	.word	0x6254c4aa
 80030f8:	3fe5312a 	.word	0x3fe5312a
 80030fc:	42c80000 	.word	0x42c80000

08003100 <search>:

// should return index in array
uint8_t search(float val) {
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
	// O(n) lookup. array is only size=179.
	uint8_t i;
	for (i = 0; i < batteryCapacityArraySize; i++) {
 8003108:	230f      	movs	r3, #15
 800310a:	18fb      	adds	r3, r7, r3
 800310c:	2200      	movs	r2, #0
 800310e:	701a      	strb	r2, [r3, #0]
 8003110:	e015      	b.n	800313e <search+0x3e>
		if (val > batteryCapacity[i]) return i;
 8003112:	230f      	movs	r3, #15
 8003114:	18fb      	adds	r3, r7, r3
 8003116:	781a      	ldrb	r2, [r3, #0]
 8003118:	4b10      	ldr	r3, [pc, #64]	; (800315c <search+0x5c>)
 800311a:	0092      	lsls	r2, r2, #2
 800311c:	58d3      	ldr	r3, [r2, r3]
 800311e:	1c19      	adds	r1, r3, #0
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f7fd f995 	bl	8000450 <__aeabi_fcmpgt>
 8003126:	1e03      	subs	r3, r0, #0
 8003128:	d003      	beq.n	8003132 <search+0x32>
 800312a:	230f      	movs	r3, #15
 800312c:	18fb      	adds	r3, r7, r3
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	e010      	b.n	8003154 <search+0x54>
	for (i = 0; i < batteryCapacityArraySize; i++) {
 8003132:	210f      	movs	r1, #15
 8003134:	187b      	adds	r3, r7, r1
 8003136:	781a      	ldrb	r2, [r3, #0]
 8003138:	187b      	adds	r3, r7, r1
 800313a:	3201      	adds	r2, #1
 800313c:	701a      	strb	r2, [r3, #0]
 800313e:	230f      	movs	r3, #15
 8003140:	18fb      	adds	r3, r7, r3
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	b29a      	uxth	r2, r3
 8003146:	4b06      	ldr	r3, [pc, #24]	; (8003160 <search+0x60>)
 8003148:	881b      	ldrh	r3, [r3, #0]
 800314a:	429a      	cmp	r2, r3
 800314c:	d3e1      	bcc.n	8003112 <search+0x12>
	}
	return batteryCapacityArraySize;
 800314e:	4b04      	ldr	r3, [pc, #16]	; (8003160 <search+0x60>)
 8003150:	881b      	ldrh	r3, [r3, #0]
 8003152:	b2db      	uxtb	r3, r3
}
 8003154:	0018      	movs	r0, r3
 8003156:	46bd      	mov	sp, r7
 8003158:	b004      	add	sp, #16
 800315a:	bd80      	pop	{r7, pc}
 800315c:	0800cd64 	.word	0x0800cd64
 8003160:	20000008 	.word	0x20000008

08003164 <setTime>:

static uint16_t century = 20;		// holds upper 2 digits of year that RTC doesn't hold
// ---- RTC setters ----
// set rtc time. uses personal struct as arg
// assumes t's fields are aleady set to something or not null
void setTime(struct times *t, RTC_HandleTypeDef *hrtc) {
 8003164:	b590      	push	{r4, r7, lr}
 8003166:	b089      	sub	sp, #36	; 0x24
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
	RTC_TimeTypeDef stime = {0};
 800316e:	210c      	movs	r1, #12
 8003170:	000c      	movs	r4, r1
 8003172:	187b      	adds	r3, r7, r1
 8003174:	0018      	movs	r0, r3
 8003176:	2314      	movs	r3, #20
 8003178:	001a      	movs	r2, r3
 800317a:	2100      	movs	r1, #0
 800317c:	f008 fff1 	bl	800c162 <memset>

	stime.Hours = t->hr;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	781a      	ldrb	r2, [r3, #0]
 8003184:	0021      	movs	r1, r4
 8003186:	187b      	adds	r3, r7, r1
 8003188:	701a      	strb	r2, [r3, #0]
	stime.Minutes = t->min;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	785a      	ldrb	r2, [r3, #1]
 800318e:	187b      	adds	r3, r7, r1
 8003190:	705a      	strb	r2, [r3, #1]
	stime.Seconds = t->sec;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	789a      	ldrb	r2, [r3, #2]
 8003196:	187b      	adds	r3, r7, r1
 8003198:	709a      	strb	r2, [r3, #2]

	stime.TimeFormat = RTC_HOURFORMAT_24;
 800319a:	187b      	adds	r3, r7, r1
 800319c:	2200      	movs	r2, #0
 800319e:	70da      	strb	r2, [r3, #3]

	// not really using
	stime.SubSeconds = 0;
 80031a0:	187b      	adds	r3, r7, r1
 80031a2:	2200      	movs	r2, #0
 80031a4:	605a      	str	r2, [r3, #4]
	stime.SecondFraction = 0;
 80031a6:	187b      	adds	r3, r7, r1
 80031a8:	2200      	movs	r2, #0
 80031aa:	609a      	str	r2, [r3, #8]
	stime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80031ac:	187b      	adds	r3, r7, r1
 80031ae:	2200      	movs	r2, #0
 80031b0:	60da      	str	r2, [r3, #12]
	stime.StoreOperation = RTC_STOREOPERATION_SET;
 80031b2:	187b      	adds	r3, r7, r1
 80031b4:	2280      	movs	r2, #128	; 0x80
 80031b6:	02d2      	lsls	r2, r2, #11
 80031b8:	611a      	str	r2, [r3, #16]

	HAL_RTC_SetTime(hrtc, &stime, RTC_FORMAT_BIN);
 80031ba:	1879      	adds	r1, r7, r1
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	2200      	movs	r2, #0
 80031c0:	0018      	movs	r0, r3
 80031c2:	f006 fd09 	bl	8009bd8 <HAL_RTC_SetTime>
}
 80031c6:	46c0      	nop			; (mov r8, r8)
 80031c8:	46bd      	mov	sp, r7
 80031ca:	b009      	add	sp, #36	; 0x24
 80031cc:	bd90      	pop	{r4, r7, pc}
	...

080031d0 <setDate>:

// set rtc date. uses personal struct as arg
// assumes struct has values
void setDate(struct dates *d, RTC_HandleTypeDef *hrtc) {
 80031d0:	b590      	push	{r4, r7, lr}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
	RTC_DateTypeDef sdate = {0};
 80031da:	240c      	movs	r4, #12
 80031dc:	193b      	adds	r3, r7, r4
 80031de:	2200      	movs	r2, #0
 80031e0:	601a      	str	r2, [r3, #0]

	sdate.Month = d->month;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	789a      	ldrb	r2, [r3, #2]
 80031e6:	193b      	adds	r3, r7, r4
 80031e8:	705a      	strb	r2, [r3, #1]
	sdate.Date = d->date;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	78da      	ldrb	r2, [r3, #3]
 80031ee:	193b      	adds	r3, r7, r4
 80031f0:	709a      	strb	r2, [r3, #2]
	sdate.Year = d->yr % 100; 		// set only between 0-99. limitation of RTC
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	881b      	ldrh	r3, [r3, #0]
 80031f6:	2164      	movs	r1, #100	; 0x64
 80031f8:	0018      	movs	r0, r3
 80031fa:	f7fd f813 	bl	8000224 <__aeabi_uidivmod>
 80031fe:	000b      	movs	r3, r1
 8003200:	b29b      	uxth	r3, r3
 8003202:	b2da      	uxtb	r2, r3
 8003204:	193b      	adds	r3, r7, r4
 8003206:	70da      	strb	r2, [r3, #3]
	century = d->yr / 100;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	881b      	ldrh	r3, [r3, #0]
 800320c:	2164      	movs	r1, #100	; 0x64
 800320e:	0018      	movs	r0, r3
 8003210:	f7fc ff82 	bl	8000118 <__udivsi3>
 8003214:	0003      	movs	r3, r0
 8003216:	b29a      	uxth	r2, r3
 8003218:	4b0c      	ldr	r3, [pc, #48]	; (800324c <setDate+0x7c>)
 800321a:	801a      	strh	r2, [r3, #0]

	sdate.WeekDay = weekdayCalculator(d->yr, d->month, d->date);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	8818      	ldrh	r0, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	7899      	ldrb	r1, [r3, #2]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	78db      	ldrb	r3, [r3, #3]
 8003228:	001a      	movs	r2, r3
 800322a:	f000 fb2f 	bl	800388c <weekdayCalculator>
 800322e:	0003      	movs	r3, r0
 8003230:	001a      	movs	r2, r3
 8003232:	193b      	adds	r3, r7, r4
 8003234:	701a      	strb	r2, [r3, #0]

	HAL_RTC_SetDate(hrtc, &sdate, RTC_FORMAT_BIN);
 8003236:	1939      	adds	r1, r7, r4
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	2200      	movs	r2, #0
 800323c:	0018      	movs	r0, r3
 800323e:	f006 fdeb 	bl	8009e18 <HAL_RTC_SetDate>
}
 8003242:	46c0      	nop			; (mov r8, r8)
 8003244:	46bd      	mov	sp, r7
 8003246:	b005      	add	sp, #20
 8003248:	bd90      	pop	{r4, r7, pc}
 800324a:	46c0      	nop			; (mov r8, r8)
 800324c:	2000000a 	.word	0x2000000a

08003250 <setDateTime>:

void setDateTime(struct dates *d, struct times *t, RTC_HandleTypeDef *hrtc) {
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
	setDate(d, hrtc);
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	0011      	movs	r1, r2
 8003262:	0018      	movs	r0, r3
 8003264:	f7ff ffb4 	bl	80031d0 <setDate>
	setTime(t, hrtc);
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	0011      	movs	r1, r2
 800326e:	0018      	movs	r0, r3
 8003270:	f7ff ff78 	bl	8003164 <setTime>
}
 8003274:	46c0      	nop			; (mov r8, r8)
 8003276:	46bd      	mov	sp, r7
 8003278:	b004      	add	sp, #16
 800327a:	bd80      	pop	{r7, pc}

0800327c <setAlarm>:

// for time of day+week
void setAlarm(struct alarmTimes *a, RTC_HandleTypeDef *hrtc) {
 800327c:	b5b0      	push	{r4, r5, r7, lr}
 800327e:	b092      	sub	sp, #72	; 0x48
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
	RTC_AlarmTypeDef salarm = {0};
 8003286:	2520      	movs	r5, #32
 8003288:	197b      	adds	r3, r7, r5
 800328a:	0018      	movs	r0, r3
 800328c:	2328      	movs	r3, #40	; 0x28
 800328e:	001a      	movs	r2, r3
 8003290:	2100      	movs	r1, #0
 8003292:	f008 ff66 	bl	800c162 <memset>
	RTC_TimeTypeDef salarmtime = {0};
 8003296:	210c      	movs	r1, #12
 8003298:	000c      	movs	r4, r1
 800329a:	187b      	adds	r3, r7, r1
 800329c:	0018      	movs	r0, r3
 800329e:	2314      	movs	r3, #20
 80032a0:	001a      	movs	r2, r3
 80032a2:	2100      	movs	r1, #0
 80032a4:	f008 ff5d 	bl	800c162 <memset>

	salarmtime.Hours = a->hr;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	781a      	ldrb	r2, [r3, #0]
 80032ac:	0021      	movs	r1, r4
 80032ae:	187b      	adds	r3, r7, r1
 80032b0:	701a      	strb	r2, [r3, #0]
	salarmtime.Minutes = a->min;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	785a      	ldrb	r2, [r3, #1]
 80032b6:	187b      	adds	r3, r7, r1
 80032b8:	705a      	strb	r2, [r3, #1]
	salarmtime.Seconds = a->sec;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	789a      	ldrb	r2, [r3, #2]
 80032be:	187b      	adds	r3, r7, r1
 80032c0:	709a      	strb	r2, [r3, #2]

	salarmtime.TimeFormat = RTC_HOURFORMAT_24;
 80032c2:	187b      	adds	r3, r7, r1
 80032c4:	2200      	movs	r2, #0
 80032c6:	70da      	strb	r2, [r3, #3]
	salarmtime.SubSeconds = 0;
 80032c8:	187b      	adds	r3, r7, r1
 80032ca:	2200      	movs	r2, #0
 80032cc:	605a      	str	r2, [r3, #4]
	salarmtime.SecondFraction = 0;
 80032ce:	187b      	adds	r3, r7, r1
 80032d0:	2200      	movs	r2, #0
 80032d2:	609a      	str	r2, [r3, #8]
	salarmtime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80032d4:	187b      	adds	r3, r7, r1
 80032d6:	2200      	movs	r2, #0
 80032d8:	60da      	str	r2, [r3, #12]
	salarmtime.StoreOperation = RTC_STOREOPERATION_RESET;
 80032da:	187b      	adds	r3, r7, r1
 80032dc:	2200      	movs	r2, #0
 80032de:	611a      	str	r2, [r3, #16]

	salarm.AlarmTime = salarmtime;
 80032e0:	197b      	adds	r3, r7, r5
 80032e2:	187a      	adds	r2, r7, r1
 80032e4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80032e6:	c313      	stmia	r3!, {r0, r1, r4}
 80032e8:	ca03      	ldmia	r2!, {r0, r1}
 80032ea:	c303      	stmia	r3!, {r0, r1}
	salarm.AlarmMask = RTC_ALARMMASK_NONE;		// allows comparison for all fields (sec, min, hour, weekday)
 80032ec:	197b      	adds	r3, r7, r5
 80032ee:	2200      	movs	r2, #0
 80032f0:	615a      	str	r2, [r3, #20]
	salarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80032f2:	197b      	adds	r3, r7, r5
 80032f4:	2200      	movs	r2, #0
 80032f6:	619a      	str	r2, [r3, #24]
	salarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 80032f8:	197b      	adds	r3, r7, r5
 80032fa:	2280      	movs	r2, #128	; 0x80
 80032fc:	05d2      	lsls	r2, r2, #23
 80032fe:	61da      	str	r2, [r3, #28]
	salarm.AlarmDateWeekDay = a->weekday;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	78d9      	ldrb	r1, [r3, #3]
 8003304:	197b      	adds	r3, r7, r5
 8003306:	2220      	movs	r2, #32
 8003308:	5499      	strb	r1, [r3, r2]
	salarm.Alarm = RTC_ALARM_A;
 800330a:	197b      	adds	r3, r7, r5
 800330c:	2280      	movs	r2, #128	; 0x80
 800330e:	0052      	lsls	r2, r2, #1
 8003310:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_RTC_SetAlarm_IT(hrtc, &salarm, RTC_FORMAT_BIN);
 8003312:	1979      	adds	r1, r7, r5
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	2200      	movs	r2, #0
 8003318:	0018      	movs	r0, r3
 800331a:	f006 fe79 	bl	800a010 <HAL_RTC_SetAlarm_IT>
}
 800331e:	46c0      	nop			; (mov r8, r8)
 8003320:	46bd      	mov	sp, r7
 8003322:	b012      	add	sp, #72	; 0x48
 8003324:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003328 <setClockAlarm>:

// set an alarm for the next second for triggering display updates
void setClockAlarm(RTC_HandleTypeDef *hrtc) {
 8003328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800332a:	b097      	sub	sp, #92	; 0x5c
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
	RTC_AlarmTypeDef salarm = {0};
 8003330:	232c      	movs	r3, #44	; 0x2c
 8003332:	18fb      	adds	r3, r7, r3
 8003334:	0018      	movs	r0, r3
 8003336:	2328      	movs	r3, #40	; 0x28
 8003338:	001a      	movs	r2, r3
 800333a:	2100      	movs	r1, #0
 800333c:	f008 ff11 	bl	800c162 <memset>
	RTC_TimeTypeDef salarmtime = {0};
 8003340:	2318      	movs	r3, #24
 8003342:	18fb      	adds	r3, r7, r3
 8003344:	0018      	movs	r0, r3
 8003346:	2314      	movs	r3, #20
 8003348:	001a      	movs	r2, r3
 800334a:	2100      	movs	r1, #0
 800334c:	f008 ff09 	bl	800c162 <memset>

	// pull current time
	struct dates currentDate = {0};
 8003350:	2410      	movs	r4, #16
 8003352:	193b      	adds	r3, r7, r4
 8003354:	0018      	movs	r0, r3
 8003356:	2306      	movs	r3, #6
 8003358:	001a      	movs	r2, r3
 800335a:	2100      	movs	r1, #0
 800335c:	f008 ff01 	bl	800c162 <memset>
	struct times currentTime = {0};
 8003360:	250c      	movs	r5, #12
 8003362:	197b      	adds	r3, r7, r5
 8003364:	0018      	movs	r0, r3
 8003366:	2303      	movs	r3, #3
 8003368:	001a      	movs	r2, r3
 800336a:	2100      	movs	r1, #0
 800336c:	f008 fef9 	bl	800c162 <memset>
	getDateTime(&currentDate, &currentTime, hrtc);
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	1979      	adds	r1, r7, r5
 8003374:	193b      	adds	r3, r7, r4
 8003376:	0018      	movs	r0, r3
 8003378:	f000 f99a 	bl	80036b0 <getDateTime>

	// start setting alarm
	struct alarmTimes a = {0};
 800337c:	2308      	movs	r3, #8
 800337e:	18fb      	adds	r3, r7, r3
 8003380:	2200      	movs	r2, #0
 8003382:	601a      	str	r2, [r3, #0]
	uint8_t s,m,h,w;
	// set for only 1/min on low battery mode
//	bState = batteryLow;
	if (bState == batteryLow || bState == batteryReallyLow) {
 8003384:	4ba1      	ldr	r3, [pc, #644]	; (800360c <setClockAlarm+0x2e4>)
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d003      	beq.n	8003394 <setClockAlarm+0x6c>
 800338c:	4b9f      	ldr	r3, [pc, #636]	; (800360c <setClockAlarm+0x2e4>)
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	2b02      	cmp	r3, #2
 8003392:	d164      	bne.n	800345e <setClockAlarm+0x136>
		s = currentTime.sec;
 8003394:	2157      	movs	r1, #87	; 0x57
 8003396:	187b      	adds	r3, r7, r1
 8003398:	250c      	movs	r5, #12
 800339a:	197a      	adds	r2, r7, r5
 800339c:	7892      	ldrb	r2, [r2, #2]
 800339e:	701a      	strb	r2, [r3, #0]
		m = currentTime.min + s/60 + 1;
 80033a0:	197b      	adds	r3, r7, r5
 80033a2:	785c      	ldrb	r4, [r3, #1]
 80033a4:	187b      	adds	r3, r7, r1
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	213c      	movs	r1, #60	; 0x3c
 80033aa:	0018      	movs	r0, r3
 80033ac:	f7fc feb4 	bl	8000118 <__udivsi3>
 80033b0:	0003      	movs	r3, r0
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	18e3      	adds	r3, r4, r3
 80033b6:	b2da      	uxtb	r2, r3
 80033b8:	2156      	movs	r1, #86	; 0x56
 80033ba:	187b      	adds	r3, r7, r1
 80033bc:	3201      	adds	r2, #1
 80033be:	701a      	strb	r2, [r3, #0]
		h = currentTime.hr + m/60;
 80033c0:	197b      	adds	r3, r7, r5
 80033c2:	781c      	ldrb	r4, [r3, #0]
 80033c4:	187b      	adds	r3, r7, r1
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	213c      	movs	r1, #60	; 0x3c
 80033ca:	0018      	movs	r0, r3
 80033cc:	f7fc fea4 	bl	8000118 <__udivsi3>
 80033d0:	0003      	movs	r3, r0
 80033d2:	b2da      	uxtb	r2, r3
 80033d4:	2155      	movs	r1, #85	; 0x55
 80033d6:	187b      	adds	r3, r7, r1
 80033d8:	18a2      	adds	r2, r4, r2
 80033da:	701a      	strb	r2, [r3, #0]
		w = currentDate.weekday + h/24;
 80033dc:	2310      	movs	r3, #16
 80033de:	18fb      	adds	r3, r7, r3
 80033e0:	791c      	ldrb	r4, [r3, #4]
 80033e2:	187b      	adds	r3, r7, r1
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	2118      	movs	r1, #24
 80033e8:	0018      	movs	r0, r3
 80033ea:	f7fc fe95 	bl	8000118 <__udivsi3>
 80033ee:	0003      	movs	r3, r0
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	2354      	movs	r3, #84	; 0x54
 80033f4:	18fb      	adds	r3, r7, r3
 80033f6:	18a2      	adds	r2, r4, r2
 80033f8:	701a      	strb	r2, [r3, #0]

		// for transitioning between centuries
		if (currentTime.min == 59 &&
 80033fa:	197b      	adds	r3, r7, r5
 80033fc:	785b      	ldrb	r3, [r3, #1]
 80033fe:	2b3b      	cmp	r3, #59	; 0x3b
 8003400:	d000      	beq.n	8003404 <setClockAlarm+0xdc>
 8003402:	e091      	b.n	8003528 <setClockAlarm+0x200>
			currentTime.hr == 23 &&
 8003404:	230c      	movs	r3, #12
 8003406:	18fb      	adds	r3, r7, r3
 8003408:	781b      	ldrb	r3, [r3, #0]
		if (currentTime.min == 59 &&
 800340a:	2b17      	cmp	r3, #23
 800340c:	d000      	beq.n	8003410 <setClockAlarm+0xe8>
 800340e:	e08b      	b.n	8003528 <setClockAlarm+0x200>
			currentDate.yr % 100 == 99 &&
 8003410:	2310      	movs	r3, #16
 8003412:	18fb      	adds	r3, r7, r3
 8003414:	881b      	ldrh	r3, [r3, #0]
 8003416:	2164      	movs	r1, #100	; 0x64
 8003418:	0018      	movs	r0, r3
 800341a:	f7fc ff03 	bl	8000224 <__aeabi_uidivmod>
 800341e:	000b      	movs	r3, r1
 8003420:	b29b      	uxth	r3, r3
			currentTime.hr == 23 &&
 8003422:	2b63      	cmp	r3, #99	; 0x63
 8003424:	d000      	beq.n	8003428 <setClockAlarm+0x100>
 8003426:	e07f      	b.n	8003528 <setClockAlarm+0x200>
			currentDate.month == 12 &&
 8003428:	2310      	movs	r3, #16
 800342a:	18fb      	adds	r3, r7, r3
 800342c:	789b      	ldrb	r3, [r3, #2]
			currentDate.yr % 100 == 99 &&
 800342e:	2b0c      	cmp	r3, #12
 8003430:	d000      	beq.n	8003434 <setClockAlarm+0x10c>
 8003432:	e079      	b.n	8003528 <setClockAlarm+0x200>
			currentDate.date == maxDaysInMonth(currentDate.month, currentDate.yr)) {
 8003434:	2110      	movs	r1, #16
 8003436:	187b      	adds	r3, r7, r1
 8003438:	78dc      	ldrb	r4, [r3, #3]
 800343a:	187b      	adds	r3, r7, r1
 800343c:	789a      	ldrb	r2, [r3, #2]
 800343e:	187b      	adds	r3, r7, r1
 8003440:	881b      	ldrh	r3, [r3, #0]
 8003442:	0019      	movs	r1, r3
 8003444:	0010      	movs	r0, r2
 8003446:	f000 fa75 	bl	8003934 <maxDaysInMonth>
 800344a:	0003      	movs	r3, r0
			currentDate.month == 12 &&
 800344c:	429c      	cmp	r4, r3
 800344e:	d16b      	bne.n	8003528 <setClockAlarm+0x200>
			century++;
 8003450:	4b6f      	ldr	r3, [pc, #444]	; (8003610 <setClockAlarm+0x2e8>)
 8003452:	881b      	ldrh	r3, [r3, #0]
 8003454:	3301      	adds	r3, #1
 8003456:	b29a      	uxth	r2, r3
 8003458:	4b6d      	ldr	r3, [pc, #436]	; (8003610 <setClockAlarm+0x2e8>)
 800345a:	801a      	strh	r2, [r3, #0]
		if (currentTime.min == 59 &&
 800345c:	e064      	b.n	8003528 <setClockAlarm+0x200>
		}
	}
	// else set 1/s
	else {
		s = currentTime.sec + 1;
 800345e:	250c      	movs	r5, #12
 8003460:	197b      	adds	r3, r7, r5
 8003462:	789a      	ldrb	r2, [r3, #2]
 8003464:	2157      	movs	r1, #87	; 0x57
 8003466:	187b      	adds	r3, r7, r1
 8003468:	3201      	adds	r2, #1
 800346a:	701a      	strb	r2, [r3, #0]
		m = currentTime.min + s/60;
 800346c:	197b      	adds	r3, r7, r5
 800346e:	785c      	ldrb	r4, [r3, #1]
 8003470:	187b      	adds	r3, r7, r1
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	213c      	movs	r1, #60	; 0x3c
 8003476:	0018      	movs	r0, r3
 8003478:	f7fc fe4e 	bl	8000118 <__udivsi3>
 800347c:	0003      	movs	r3, r0
 800347e:	b2da      	uxtb	r2, r3
 8003480:	2156      	movs	r1, #86	; 0x56
 8003482:	187b      	adds	r3, r7, r1
 8003484:	18a2      	adds	r2, r4, r2
 8003486:	701a      	strb	r2, [r3, #0]
		h = currentTime.hr + m/60;
 8003488:	197b      	adds	r3, r7, r5
 800348a:	781c      	ldrb	r4, [r3, #0]
 800348c:	187b      	adds	r3, r7, r1
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	213c      	movs	r1, #60	; 0x3c
 8003492:	0018      	movs	r0, r3
 8003494:	f7fc fe40 	bl	8000118 <__udivsi3>
 8003498:	0003      	movs	r3, r0
 800349a:	b2da      	uxtb	r2, r3
 800349c:	2155      	movs	r1, #85	; 0x55
 800349e:	187b      	adds	r3, r7, r1
 80034a0:	18a2      	adds	r2, r4, r2
 80034a2:	701a      	strb	r2, [r3, #0]
		w = currentDate.weekday + h/24;
 80034a4:	2310      	movs	r3, #16
 80034a6:	18fb      	adds	r3, r7, r3
 80034a8:	791c      	ldrb	r4, [r3, #4]
 80034aa:	187b      	adds	r3, r7, r1
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	2118      	movs	r1, #24
 80034b0:	0018      	movs	r0, r3
 80034b2:	f7fc fe31 	bl	8000118 <__udivsi3>
 80034b6:	0003      	movs	r3, r0
 80034b8:	b2da      	uxtb	r2, r3
 80034ba:	2354      	movs	r3, #84	; 0x54
 80034bc:	18fb      	adds	r3, r7, r3
 80034be:	18a2      	adds	r2, r4, r2
 80034c0:	701a      	strb	r2, [r3, #0]

		// for transitioning between centuries
		if (currentTime.sec == 59 &&			// need to check for second
 80034c2:	197b      	adds	r3, r7, r5
 80034c4:	789b      	ldrb	r3, [r3, #2]
 80034c6:	2b3b      	cmp	r3, #59	; 0x3b
 80034c8:	d12f      	bne.n	800352a <setClockAlarm+0x202>
			currentTime.min == 59 &&
 80034ca:	230c      	movs	r3, #12
 80034cc:	18fb      	adds	r3, r7, r3
 80034ce:	785b      	ldrb	r3, [r3, #1]
		if (currentTime.sec == 59 &&			// need to check for second
 80034d0:	2b3b      	cmp	r3, #59	; 0x3b
 80034d2:	d12a      	bne.n	800352a <setClockAlarm+0x202>
			currentTime.hr == 23 &&
 80034d4:	230c      	movs	r3, #12
 80034d6:	18fb      	adds	r3, r7, r3
 80034d8:	781b      	ldrb	r3, [r3, #0]
			currentTime.min == 59 &&
 80034da:	2b17      	cmp	r3, #23
 80034dc:	d125      	bne.n	800352a <setClockAlarm+0x202>
			currentDate.yr % 100 == 99 &&
 80034de:	2310      	movs	r3, #16
 80034e0:	18fb      	adds	r3, r7, r3
 80034e2:	881b      	ldrh	r3, [r3, #0]
 80034e4:	2164      	movs	r1, #100	; 0x64
 80034e6:	0018      	movs	r0, r3
 80034e8:	f7fc fe9c 	bl	8000224 <__aeabi_uidivmod>
 80034ec:	000b      	movs	r3, r1
 80034ee:	b29b      	uxth	r3, r3
			currentTime.hr == 23 &&
 80034f0:	2b63      	cmp	r3, #99	; 0x63
 80034f2:	d11a      	bne.n	800352a <setClockAlarm+0x202>
			currentDate.month == 12 &&
 80034f4:	2310      	movs	r3, #16
 80034f6:	18fb      	adds	r3, r7, r3
 80034f8:	789b      	ldrb	r3, [r3, #2]
			currentDate.yr % 100 == 99 &&
 80034fa:	2b0c      	cmp	r3, #12
 80034fc:	d115      	bne.n	800352a <setClockAlarm+0x202>
			currentDate.date == maxDaysInMonth(currentDate.month, currentDate.yr)) {
 80034fe:	2110      	movs	r1, #16
 8003500:	187b      	adds	r3, r7, r1
 8003502:	78dc      	ldrb	r4, [r3, #3]
 8003504:	187b      	adds	r3, r7, r1
 8003506:	789a      	ldrb	r2, [r3, #2]
 8003508:	187b      	adds	r3, r7, r1
 800350a:	881b      	ldrh	r3, [r3, #0]
 800350c:	0019      	movs	r1, r3
 800350e:	0010      	movs	r0, r2
 8003510:	f000 fa10 	bl	8003934 <maxDaysInMonth>
 8003514:	0003      	movs	r3, r0
			currentDate.month == 12 &&
 8003516:	429c      	cmp	r4, r3
 8003518:	d107      	bne.n	800352a <setClockAlarm+0x202>
			century++;
 800351a:	4b3d      	ldr	r3, [pc, #244]	; (8003610 <setClockAlarm+0x2e8>)
 800351c:	881b      	ldrh	r3, [r3, #0]
 800351e:	3301      	adds	r3, #1
 8003520:	b29a      	uxth	r2, r3
 8003522:	4b3b      	ldr	r3, [pc, #236]	; (8003610 <setClockAlarm+0x2e8>)
 8003524:	801a      	strh	r2, [r3, #0]
 8003526:	e000      	b.n	800352a <setClockAlarm+0x202>
		if (currentTime.min == 59 &&
 8003528:	46c0      	nop			; (mov r8, r8)
		}
	}
	a.sec = s % 60;
 800352a:	2357      	movs	r3, #87	; 0x57
 800352c:	18fb      	adds	r3, r7, r3
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	213c      	movs	r1, #60	; 0x3c
 8003532:	0018      	movs	r0, r3
 8003534:	f7fc fe76 	bl	8000224 <__aeabi_uidivmod>
 8003538:	000b      	movs	r3, r1
 800353a:	b2da      	uxtb	r2, r3
 800353c:	2408      	movs	r4, #8
 800353e:	193b      	adds	r3, r7, r4
 8003540:	709a      	strb	r2, [r3, #2]
	a.min = m % 60;
 8003542:	2356      	movs	r3, #86	; 0x56
 8003544:	18fb      	adds	r3, r7, r3
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	213c      	movs	r1, #60	; 0x3c
 800354a:	0018      	movs	r0, r3
 800354c:	f7fc fe6a 	bl	8000224 <__aeabi_uidivmod>
 8003550:	000b      	movs	r3, r1
 8003552:	b2da      	uxtb	r2, r3
 8003554:	193b      	adds	r3, r7, r4
 8003556:	705a      	strb	r2, [r3, #1]
	a.hr = h % 24;
 8003558:	2355      	movs	r3, #85	; 0x55
 800355a:	18fb      	adds	r3, r7, r3
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	2118      	movs	r1, #24
 8003560:	0018      	movs	r0, r3
 8003562:	f7fc fe5f 	bl	8000224 <__aeabi_uidivmod>
 8003566:	000b      	movs	r3, r1
 8003568:	b2da      	uxtb	r2, r3
 800356a:	193b      	adds	r3, r7, r4
 800356c:	701a      	strb	r2, [r3, #0]
	a.weekday = (w-1) % 7 + 1;
 800356e:	2354      	movs	r3, #84	; 0x54
 8003570:	18fb      	adds	r3, r7, r3
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	3b01      	subs	r3, #1
 8003576:	2107      	movs	r1, #7
 8003578:	0018      	movs	r0, r3
 800357a:	f7fc ff3d 	bl	80003f8 <__aeabi_idivmod>
 800357e:	000b      	movs	r3, r1
 8003580:	b2db      	uxtb	r3, r3
 8003582:	3301      	adds	r3, #1
 8003584:	b2da      	uxtb	r2, r3
 8003586:	0020      	movs	r0, r4
 8003588:	183b      	adds	r3, r7, r0
 800358a:	70da      	strb	r2, [r3, #3]

	salarmtime.Hours = a.hr;
 800358c:	183b      	adds	r3, r7, r0
 800358e:	781a      	ldrb	r2, [r3, #0]
 8003590:	2118      	movs	r1, #24
 8003592:	187b      	adds	r3, r7, r1
 8003594:	701a      	strb	r2, [r3, #0]
	salarmtime.Minutes = a.min;
 8003596:	183b      	adds	r3, r7, r0
 8003598:	785a      	ldrb	r2, [r3, #1]
 800359a:	187b      	adds	r3, r7, r1
 800359c:	705a      	strb	r2, [r3, #1]
	salarmtime.Seconds = a.sec;
 800359e:	183b      	adds	r3, r7, r0
 80035a0:	789a      	ldrb	r2, [r3, #2]
 80035a2:	187b      	adds	r3, r7, r1
 80035a4:	709a      	strb	r2, [r3, #2]
	salarmtime.TimeFormat = RTC_HOURFORMAT_24;
 80035a6:	187b      	adds	r3, r7, r1
 80035a8:	2200      	movs	r2, #0
 80035aa:	70da      	strb	r2, [r3, #3]
	salarmtime.SubSeconds = 0;
 80035ac:	187b      	adds	r3, r7, r1
 80035ae:	2200      	movs	r2, #0
 80035b0:	605a      	str	r2, [r3, #4]
	salarmtime.SecondFraction = 0;
 80035b2:	187b      	adds	r3, r7, r1
 80035b4:	2200      	movs	r2, #0
 80035b6:	609a      	str	r2, [r3, #8]
	salarmtime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80035b8:	187b      	adds	r3, r7, r1
 80035ba:	2200      	movs	r2, #0
 80035bc:	60da      	str	r2, [r3, #12]
	salarmtime.StoreOperation = RTC_STOREOPERATION_RESET;
 80035be:	187b      	adds	r3, r7, r1
 80035c0:	2200      	movs	r2, #0
 80035c2:	611a      	str	r2, [r3, #16]

	salarm.AlarmTime = salarmtime;
 80035c4:	242c      	movs	r4, #44	; 0x2c
 80035c6:	193b      	adds	r3, r7, r4
 80035c8:	187a      	adds	r2, r7, r1
 80035ca:	ca62      	ldmia	r2!, {r1, r5, r6}
 80035cc:	c362      	stmia	r3!, {r1, r5, r6}
 80035ce:	ca22      	ldmia	r2!, {r1, r5}
 80035d0:	c322      	stmia	r3!, {r1, r5}
	salarm.AlarmMask = RTC_ALARMMASK_NONE;
 80035d2:	193b      	adds	r3, r7, r4
 80035d4:	2200      	movs	r2, #0
 80035d6:	615a      	str	r2, [r3, #20]
	salarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80035d8:	193b      	adds	r3, r7, r4
 80035da:	2200      	movs	r2, #0
 80035dc:	619a      	str	r2, [r3, #24]
	salarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 80035de:	193b      	adds	r3, r7, r4
 80035e0:	2280      	movs	r2, #128	; 0x80
 80035e2:	05d2      	lsls	r2, r2, #23
 80035e4:	61da      	str	r2, [r3, #28]
	salarm.AlarmDateWeekDay = a.weekday;
 80035e6:	183b      	adds	r3, r7, r0
 80035e8:	78d9      	ldrb	r1, [r3, #3]
 80035ea:	193b      	adds	r3, r7, r4
 80035ec:	2220      	movs	r2, #32
 80035ee:	5499      	strb	r1, [r3, r2]
	salarm.Alarm = RTC_ALARM_B;
 80035f0:	193b      	adds	r3, r7, r4
 80035f2:	2280      	movs	r2, #128	; 0x80
 80035f4:	0092      	lsls	r2, r2, #2
 80035f6:	625a      	str	r2, [r3, #36]	; 0x24

	// do nothing until done
	HAL_RTC_SetAlarm_IT(hrtc, &salarm, RTC_FORMAT_BIN);
 80035f8:	1939      	adds	r1, r7, r4
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	0018      	movs	r0, r3
 8003600:	f006 fd06 	bl	800a010 <HAL_RTC_SetAlarm_IT>
}
 8003604:	46c0      	nop			; (mov r8, r8)
 8003606:	46bd      	mov	sp, r7
 8003608:	b017      	add	sp, #92	; 0x5c
 800360a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800360c:	20000171 	.word	0x20000171
 8003610:	2000000a 	.word	0x2000000a

08003614 <HAL_RTC_AlarmAEventCallback>:
// ---- end of RTC setters ----

// ---- callbacks for interrupts ----
// used for alarm function in project
// meant to send signal to use motor
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED1_PORT, LED1_PIN);
 800361c:	23a0      	movs	r3, #160	; 0xa0
 800361e:	05db      	lsls	r3, r3, #23
 8003620:	2120      	movs	r1, #32
 8003622:	0018      	movs	r0, r3
 8003624:	f005 f9c9 	bl	80089ba <HAL_GPIO_TogglePin>
	isAlarmDone = 1;
 8003628:	4b04      	ldr	r3, [pc, #16]	; (800363c <HAL_RTC_AlarmAEventCallback+0x28>)
 800362a:	2201      	movs	r2, #1
 800362c:	701a      	strb	r2, [r3, #0]
	updateFace.alarm = 1;
 800362e:	4b04      	ldr	r3, [pc, #16]	; (8003640 <HAL_RTC_AlarmAEventCallback+0x2c>)
 8003630:	2201      	movs	r2, #1
 8003632:	709a      	strb	r2, [r3, #2]
}
 8003634:	46c0      	nop			; (mov r8, r8)
 8003636:	46bd      	mov	sp, r7
 8003638:	b002      	add	sp, #8
 800363a:	bd80      	pop	{r7, pc}
 800363c:	20000163 	.word	0x20000163
 8003640:	20000164 	.word	0x20000164

08003644 <HAL_RTCEx_AlarmBEventCallback>:

// used to trigger display refresh every second. used because then it's synchronous with RTC updates
void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc) {
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
	updateFace.clock = 1;
 800364c:	4b05      	ldr	r3, [pc, #20]	; (8003664 <HAL_RTCEx_AlarmBEventCallback+0x20>)
 800364e:	2201      	movs	r2, #1
 8003650:	701a      	strb	r2, [r3, #0]
	setClockAlarm(hrtc);		// set something for next second
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	0018      	movs	r0, r3
 8003656:	f7ff fe67 	bl	8003328 <setClockAlarm>
}
 800365a:	46c0      	nop			; (mov r8, r8)
 800365c:	46bd      	mov	sp, r7
 800365e:	b002      	add	sp, #8
 8003660:	bd80      	pop	{r7, pc}
 8003662:	46c0      	nop			; (mov r8, r8)
 8003664:	20000164 	.word	0x20000164

08003668 <getTime>:
// ---- end of callbacks ----

// ---- RTC getters ----
void getTime(struct times *t, RTC_HandleTypeDef *hrtc) {
 8003668:	b590      	push	{r4, r7, lr}
 800366a:	b089      	sub	sp, #36	; 0x24
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
	RTC_TimeTypeDef stime;

	// programming manual says to read time after date. something shadow registers.
	// not done automatically in HAL
	HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN);
 8003672:	210c      	movs	r1, #12
 8003674:	000c      	movs	r4, r1
 8003676:	1879      	adds	r1, r7, r1
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	2200      	movs	r2, #0
 800367c:	0018      	movs	r0, r3
 800367e:	f006 fb6f 	bl	8009d60 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, NULL, RTC_FORMAT_BIN);
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	2200      	movs	r2, #0
 8003686:	2100      	movs	r1, #0
 8003688:	0018      	movs	r0, r3
 800368a:	f006 fc73 	bl	8009f74 <HAL_RTC_GetDate>

	t->hr = stime.Hours;
 800368e:	0021      	movs	r1, r4
 8003690:	187b      	adds	r3, r7, r1
 8003692:	781a      	ldrb	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	701a      	strb	r2, [r3, #0]
	t->min = stime.Minutes;
 8003698:	187b      	adds	r3, r7, r1
 800369a:	785a      	ldrb	r2, [r3, #1]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	705a      	strb	r2, [r3, #1]
	t->sec = stime.Seconds;
 80036a0:	187b      	adds	r3, r7, r1
 80036a2:	789a      	ldrb	r2, [r3, #2]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	709a      	strb	r2, [r3, #2]
}
 80036a8:	46c0      	nop			; (mov r8, r8)
 80036aa:	46bd      	mov	sp, r7
 80036ac:	b009      	add	sp, #36	; 0x24
 80036ae:	bd90      	pop	{r4, r7, pc}

080036b0 <getDateTime>:
	d->date = sdate.Date;
	d->weekday = sdate.WeekDay;
}

// not using getDate and getTime for possible efficiency
void getDateTime(struct dates *d, struct times *t, RTC_HandleTypeDef *hrtc) {
 80036b0:	b5b0      	push	{r4, r5, r7, lr}
 80036b2:	b08a      	sub	sp, #40	; 0x28
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
	RTC_DateTypeDef sdate;
	RTC_TimeTypeDef stime;

	// programming manual says to read time after date. something shadow registers.
	// not done automatically in HAL
	HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN);
 80036bc:	2510      	movs	r5, #16
 80036be:	1979      	adds	r1, r7, r5
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	0018      	movs	r0, r3
 80036c6:	f006 fb4b 	bl	8009d60 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &sdate, RTC_FORMAT_BIN);
 80036ca:	2124      	movs	r1, #36	; 0x24
 80036cc:	000c      	movs	r4, r1
 80036ce:	1879      	adds	r1, r7, r1
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	0018      	movs	r0, r3
 80036d6:	f006 fc4d 	bl	8009f74 <HAL_RTC_GetDate>

	// pulls last 2 digits from RTC and upper 2 digits from static variable
	d->yr = century*100 + sdate.Year;
 80036da:	4b14      	ldr	r3, [pc, #80]	; (800372c <getDateTime+0x7c>)
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	2264      	movs	r2, #100	; 0x64
 80036e0:	4353      	muls	r3, r2
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	0021      	movs	r1, r4
 80036e6:	187b      	adds	r3, r7, r1
 80036e8:	78db      	ldrb	r3, [r3, #3]
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	18d3      	adds	r3, r2, r3
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	801a      	strh	r2, [r3, #0]
	d->month = sdate.Month;
 80036f4:	187b      	adds	r3, r7, r1
 80036f6:	785a      	ldrb	r2, [r3, #1]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	709a      	strb	r2, [r3, #2]
	d->date = sdate.Date;
 80036fc:	187b      	adds	r3, r7, r1
 80036fe:	789a      	ldrb	r2, [r3, #2]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	70da      	strb	r2, [r3, #3]
	d->weekday = sdate.WeekDay;
 8003704:	187b      	adds	r3, r7, r1
 8003706:	781a      	ldrb	r2, [r3, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	711a      	strb	r2, [r3, #4]

	t->hr = stime.Hours;
 800370c:	197b      	adds	r3, r7, r5
 800370e:	781a      	ldrb	r2, [r3, #0]
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	701a      	strb	r2, [r3, #0]
	t->min = stime.Minutes;
 8003714:	197b      	adds	r3, r7, r5
 8003716:	785a      	ldrb	r2, [r3, #1]
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	705a      	strb	r2, [r3, #1]
	t->sec = stime.Seconds;
 800371c:	197b      	adds	r3, r7, r5
 800371e:	789a      	ldrb	r2, [r3, #2]
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	709a      	strb	r2, [r3, #2]
}
 8003724:	46c0      	nop			; (mov r8, r8)
 8003726:	46bd      	mov	sp, r7
 8003728:	b00a      	add	sp, #40	; 0x28
 800372a:	bdb0      	pop	{r4, r5, r7, pc}
 800372c:	2000000a 	.word	0x2000000a

08003730 <setRTCCalibration>:
// ---- end of RTC getters ----

// ---- RTC calibration function ----
// calibVal should be given in drift/day in seconds
// calibration output on PC13
void setRTCCalibration(int calibVal, RTC_HandleTypeDef *hrtc) {
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
	uint16_t calm = 0;
 800373a:	230e      	movs	r3, #14
 800373c:	18fb      	adds	r3, r7, r3
 800373e:	2200      	movs	r2, #0
 8003740:	801a      	strh	r2, [r3, #0]
	uint32_t temp;

	if (calibVal == 0) return;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d048      	beq.n	80037da <setRTCCalibration+0xaa>
	else if (calibVal < 0) {		// drift offset is negative. need to slow rtc down
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	da20      	bge.n	8003790 <setRTCCalibration+0x60>
		if (calibVal <= -42) {		// bounds checking. just set to max
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	3329      	adds	r3, #41	; 0x29
 8003752:	da06      	bge.n	8003762 <setRTCCalibration+0x32>
			HAL_RTCEx_SetSmoothCalib(hrtc, RTC_SMOOTHCALIB_PERIOD_32SEC, RTC_SMOOTHCALIB_PLUSPULSES_RESET, 0x1FF);
 8003754:	4b23      	ldr	r3, [pc, #140]	; (80037e4 <setRTCCalibration+0xb4>)
 8003756:	6838      	ldr	r0, [r7, #0]
 8003758:	2200      	movs	r2, #0
 800375a:	2100      	movs	r1, #0
 800375c:	f006 ff29 	bl	800a5b2 <HAL_RTCEx_SetSmoothCalib>
 8003760:	e03c      	b.n	80037dc <setRTCCalibration+0xac>
		}
		else {
			// math for setting CALM 9-bit register in RTC. formula in notes and in L0 programming reference manual
			temp = -calibVal*32768*32/86400;		// possible overflow when doing math, so reordering
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	0013      	movs	r3, r2
 8003766:	031b      	lsls	r3, r3, #12
 8003768:	1a9b      	subs	r3, r3, r2
 800376a:	051b      	lsls	r3, r3, #20
 800376c:	491e      	ldr	r1, [pc, #120]	; (80037e8 <setRTCCalibration+0xb8>)
 800376e:	0018      	movs	r0, r3
 8003770:	f7fc fd5c 	bl	800022c <__divsi3>
 8003774:	0003      	movs	r3, r0
 8003776:	60bb      	str	r3, [r7, #8]
			calm = temp;
 8003778:	210e      	movs	r1, #14
 800377a:	187b      	adds	r3, r7, r1
 800377c:	68ba      	ldr	r2, [r7, #8]
 800377e:	801a      	strh	r2, [r3, #0]
			HAL_RTCEx_SetSmoothCalib(hrtc, RTC_SMOOTHCALIB_PERIOD_32SEC, RTC_SMOOTHCALIB_PLUSPULSES_RESET, calm);
 8003780:	187b      	adds	r3, r7, r1
 8003782:	881b      	ldrh	r3, [r3, #0]
 8003784:	6838      	ldr	r0, [r7, #0]
 8003786:	2200      	movs	r2, #0
 8003788:	2100      	movs	r1, #0
 800378a:	f006 ff12 	bl	800a5b2 <HAL_RTCEx_SetSmoothCalib>
 800378e:	e025      	b.n	80037dc <setRTCCalibration+0xac>
		}
	}
	else {
		if (calibVal >= 42) { 		// drift offset is positive. need to speed rtc up
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b29      	cmp	r3, #41	; 0x29
 8003794:	dd07      	ble.n	80037a6 <setRTCCalibration+0x76>
			HAL_RTCEx_SetSmoothCalib(hrtc, RTC_SMOOTHCALIB_PERIOD_32SEC, RTC_SMOOTHCALIB_PLUSPULSES_SET, 0);
 8003796:	2380      	movs	r3, #128	; 0x80
 8003798:	021a      	lsls	r2, r3, #8
 800379a:	6838      	ldr	r0, [r7, #0]
 800379c:	2300      	movs	r3, #0
 800379e:	2100      	movs	r1, #0
 80037a0:	f006 ff07 	bl	800a5b2 <HAL_RTCEx_SetSmoothCalib>
 80037a4:	e01a      	b.n	80037dc <setRTCCalibration+0xac>
		}
		else {
			// math
			temp = 512-(calibVal*32768*32/86400);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	051b      	lsls	r3, r3, #20
 80037aa:	4910      	ldr	r1, [pc, #64]	; (80037ec <setRTCCalibration+0xbc>)
 80037ac:	0018      	movs	r0, r3
 80037ae:	f7fc fd3d 	bl	800022c <__divsi3>
 80037b2:	0003      	movs	r3, r0
 80037b4:	2280      	movs	r2, #128	; 0x80
 80037b6:	0092      	lsls	r2, r2, #2
 80037b8:	4694      	mov	ip, r2
 80037ba:	4463      	add	r3, ip
 80037bc:	60bb      	str	r3, [r7, #8]
			calm = temp;
 80037be:	210e      	movs	r1, #14
 80037c0:	187b      	adds	r3, r7, r1
 80037c2:	68ba      	ldr	r2, [r7, #8]
 80037c4:	801a      	strh	r2, [r3, #0]
			HAL_RTCEx_SetSmoothCalib(hrtc, RTC_SMOOTHCALIB_PERIOD_32SEC, RTC_SMOOTHCALIB_PLUSPULSES_SET, calm);
 80037c6:	187b      	adds	r3, r7, r1
 80037c8:	8819      	ldrh	r1, [r3, #0]
 80037ca:	2380      	movs	r3, #128	; 0x80
 80037cc:	021a      	lsls	r2, r3, #8
 80037ce:	6838      	ldr	r0, [r7, #0]
 80037d0:	000b      	movs	r3, r1
 80037d2:	2100      	movs	r1, #0
 80037d4:	f006 feed 	bl	800a5b2 <HAL_RTCEx_SetSmoothCalib>
 80037d8:	e000      	b.n	80037dc <setRTCCalibration+0xac>
	if (calibVal == 0) return;
 80037da:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 80037dc:	46bd      	mov	sp, r7
 80037de:	b004      	add	sp, #16
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	46c0      	nop			; (mov r8, r8)
 80037e4:	000001ff 	.word	0x000001ff
 80037e8:	00015180 	.word	0x00015180
 80037ec:	fffeae80 	.word	0xfffeae80

080037f0 <timeToSeconds>:
// ---- end of RTC calibration function ----

// ---- converters and calculators ----
uint32_t timeToSeconds(struct times *t) {
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
	return t->sec + t->min*60 + t->hr*3600;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	789b      	ldrb	r3, [r3, #2]
 80037fc:	0019      	movs	r1, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	785b      	ldrb	r3, [r3, #1]
 8003802:	001a      	movs	r2, r3
 8003804:	0013      	movs	r3, r2
 8003806:	011b      	lsls	r3, r3, #4
 8003808:	1a9b      	subs	r3, r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	18c9      	adds	r1, r1, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	001a      	movs	r2, r3
 8003814:	0013      	movs	r3, r2
 8003816:	011b      	lsls	r3, r3, #4
 8003818:	1a9b      	subs	r3, r3, r2
 800381a:	011a      	lsls	r2, r3, #4
 800381c:	1ad2      	subs	r2, r2, r3
 800381e:	0113      	lsls	r3, r2, #4
 8003820:	001a      	movs	r2, r3
 8003822:	0013      	movs	r3, r2
 8003824:	18cb      	adds	r3, r1, r3
}
 8003826:	0018      	movs	r0, r3
 8003828:	46bd      	mov	sp, r7
 800382a:	b002      	add	sp, #8
 800382c:	bd80      	pop	{r7, pc}

0800382e <secondsToTime>:

void secondsToTime(struct times *t, uint32_t seconds) {
 800382e:	b580      	push	{r7, lr}
 8003830:	b082      	sub	sp, #8
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
 8003836:	6039      	str	r1, [r7, #0]
	t->hr = seconds / 3600;
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	23e1      	movs	r3, #225	; 0xe1
 800383c:	0119      	lsls	r1, r3, #4
 800383e:	0010      	movs	r0, r2
 8003840:	f7fc fc6a 	bl	8000118 <__udivsi3>
 8003844:	0003      	movs	r3, r0
 8003846:	b2da      	uxtb	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	701a      	strb	r2, [r3, #0]
	seconds %= 3600;
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	23e1      	movs	r3, #225	; 0xe1
 8003850:	0119      	lsls	r1, r3, #4
 8003852:	0010      	movs	r0, r2
 8003854:	f7fc fce6 	bl	8000224 <__aeabi_uidivmod>
 8003858:	000b      	movs	r3, r1
 800385a:	603b      	str	r3, [r7, #0]
	t->min = seconds / 60;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	213c      	movs	r1, #60	; 0x3c
 8003860:	0018      	movs	r0, r3
 8003862:	f7fc fc59 	bl	8000118 <__udivsi3>
 8003866:	0003      	movs	r3, r0
 8003868:	b2da      	uxtb	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	705a      	strb	r2, [r3, #1]
	seconds %= 60;
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	213c      	movs	r1, #60	; 0x3c
 8003872:	0018      	movs	r0, r3
 8003874:	f7fc fcd6 	bl	8000224 <__aeabi_uidivmod>
 8003878:	000b      	movs	r3, r1
 800387a:	603b      	str	r3, [r7, #0]
	t->sec = seconds;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	b2da      	uxtb	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	709a      	strb	r2, [r3, #2]
}
 8003884:	46c0      	nop			; (mov r8, r8)
 8003886:	46bd      	mov	sp, r7
 8003888:	b002      	add	sp, #8
 800388a:	bd80      	pop	{r7, pc}

0800388c <weekdayCalculator>:
 * weekdays is 0-6, with 0 being sunday. hal uses 1=monday, 7=sunday - just call with % 7 to integrate with hal
 * months given in 1-12, with 1 being january. hal uses the same setup
 * rtc represents years with last 2 digits only. make sure year has all 4 numbers
 * should be accurate for any gregorian date
 */
uint8_t weekdayCalculator(uint16_t year, uint8_t month, uint8_t day) {
 800388c:	b590      	push	{r4, r7, lr}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	0004      	movs	r4, r0
 8003894:	0008      	movs	r0, r1
 8003896:	0011      	movs	r1, r2
 8003898:	1dbb      	adds	r3, r7, #6
 800389a:	1c22      	adds	r2, r4, #0
 800389c:	801a      	strh	r2, [r3, #0]
 800389e:	1d7b      	adds	r3, r7, #5
 80038a0:	1c02      	adds	r2, r0, #0
 80038a2:	701a      	strb	r2, [r3, #0]
 80038a4:	1d3b      	adds	r3, r7, #4
 80038a6:	1c0a      	adds	r2, r1, #0
 80038a8:	701a      	strb	r2, [r3, #0]
	static uint8_t table[] = {0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4};
	if (month < 3) year--;
 80038aa:	1d7b      	adds	r3, r7, #5
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d804      	bhi.n	80038bc <weekdayCalculator+0x30>
 80038b2:	1dbb      	adds	r3, r7, #6
 80038b4:	881a      	ldrh	r2, [r3, #0]
 80038b6:	1dbb      	adds	r3, r7, #6
 80038b8:	3a01      	subs	r2, #1
 80038ba:	801a      	strh	r2, [r3, #0]
	uint16_t temp = (year + year/4 - year/100 + year/400 + table[month-1] + day) % 7;
 80038bc:	1dbb      	adds	r3, r7, #6
 80038be:	881b      	ldrh	r3, [r3, #0]
 80038c0:	1dba      	adds	r2, r7, #6
 80038c2:	8812      	ldrh	r2, [r2, #0]
 80038c4:	0892      	lsrs	r2, r2, #2
 80038c6:	b292      	uxth	r2, r2
 80038c8:	189c      	adds	r4, r3, r2
 80038ca:	1dbb      	adds	r3, r7, #6
 80038cc:	881b      	ldrh	r3, [r3, #0]
 80038ce:	2164      	movs	r1, #100	; 0x64
 80038d0:	0018      	movs	r0, r3
 80038d2:	f7fc fc21 	bl	8000118 <__udivsi3>
 80038d6:	0003      	movs	r3, r0
 80038d8:	b29b      	uxth	r3, r3
 80038da:	1ae4      	subs	r4, r4, r3
 80038dc:	1dbb      	adds	r3, r7, #6
 80038de:	881a      	ldrh	r2, [r3, #0]
 80038e0:	23c8      	movs	r3, #200	; 0xc8
 80038e2:	0059      	lsls	r1, r3, #1
 80038e4:	0010      	movs	r0, r2
 80038e6:	f7fc fc17 	bl	8000118 <__udivsi3>
 80038ea:	0003      	movs	r3, r0
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	18e3      	adds	r3, r4, r3
 80038f0:	1d7a      	adds	r2, r7, #5
 80038f2:	7812      	ldrb	r2, [r2, #0]
 80038f4:	3a01      	subs	r2, #1
 80038f6:	490e      	ldr	r1, [pc, #56]	; (8003930 <weekdayCalculator+0xa4>)
 80038f8:	5c8a      	ldrb	r2, [r1, r2]
 80038fa:	189a      	adds	r2, r3, r2
 80038fc:	1d3b      	adds	r3, r7, #4
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	18d3      	adds	r3, r2, r3
 8003902:	2107      	movs	r1, #7
 8003904:	0018      	movs	r0, r3
 8003906:	f7fc fd77 	bl	80003f8 <__aeabi_idivmod>
 800390a:	000b      	movs	r3, r1
 800390c:	001a      	movs	r2, r3
 800390e:	210e      	movs	r1, #14
 8003910:	187b      	adds	r3, r7, r1
 8003912:	801a      	strh	r2, [r3, #0]
	if (temp == 0) return RTC_WEEKDAY_SUNDAY;
 8003914:	187b      	adds	r3, r7, r1
 8003916:	881b      	ldrh	r3, [r3, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d101      	bne.n	8003920 <weekdayCalculator+0x94>
 800391c:	2307      	movs	r3, #7
 800391e:	e003      	b.n	8003928 <weekdayCalculator+0x9c>
	else return temp;
 8003920:	230e      	movs	r3, #14
 8003922:	18fb      	adds	r3, r7, r3
 8003924:	881b      	ldrh	r3, [r3, #0]
 8003926:	b2db      	uxtb	r3, r3
}
 8003928:	0018      	movs	r0, r3
 800392a:	46bd      	mov	sp, r7
 800392c:	b005      	add	sp, #20
 800392e:	bd90      	pop	{r4, r7, pc}
 8003930:	2000000c 	.word	0x2000000c

08003934 <maxDaysInMonth>:

// calculator for number of days in a month given a month and accounting for leap years
// assumes month is 1-12, 1=january, 12=december
uint8_t maxDaysInMonth(uint8_t month, uint16_t year) {
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	0002      	movs	r2, r0
 800393c:	1dfb      	adds	r3, r7, #7
 800393e:	701a      	strb	r2, [r3, #0]
 8003940:	1d3b      	adds	r3, r7, #4
 8003942:	1c0a      	adds	r2, r1, #0
 8003944:	801a      	strh	r2, [r3, #0]
	if (month == 0 || month > 12) return 0;		// bounds checking
 8003946:	1dfb      	adds	r3, r7, #7
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <maxDaysInMonth+0x22>
 800394e:	1dfb      	adds	r3, r7, #7
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	2b0c      	cmp	r3, #12
 8003954:	d901      	bls.n	800395a <maxDaysInMonth+0x26>
 8003956:	2300      	movs	r3, #0
 8003958:	e052      	b.n	8003a00 <maxDaysInMonth+0xcc>

	// not using built-in defines, because they're in BCD
	if (month == 1  ||		// january
 800395a:	1dfb      	adds	r3, r7, #7
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d017      	beq.n	8003992 <maxDaysInMonth+0x5e>
 8003962:	1dfb      	adds	r3, r7, #7
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	2b03      	cmp	r3, #3
 8003968:	d013      	beq.n	8003992 <maxDaysInMonth+0x5e>
		month == 3  ||		// march
 800396a:	1dfb      	adds	r3, r7, #7
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	2b05      	cmp	r3, #5
 8003970:	d00f      	beq.n	8003992 <maxDaysInMonth+0x5e>
		month == 5  ||		// may
 8003972:	1dfb      	adds	r3, r7, #7
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	2b07      	cmp	r3, #7
 8003978:	d00b      	beq.n	8003992 <maxDaysInMonth+0x5e>
		month == 7  ||		// july
 800397a:	1dfb      	adds	r3, r7, #7
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	2b08      	cmp	r3, #8
 8003980:	d007      	beq.n	8003992 <maxDaysInMonth+0x5e>
		month == 8  ||		// august
 8003982:	1dfb      	adds	r3, r7, #7
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	2b0a      	cmp	r3, #10
 8003988:	d003      	beq.n	8003992 <maxDaysInMonth+0x5e>
		month == 10 ||		// october
 800398a:	1dfb      	adds	r3, r7, #7
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	2b0c      	cmp	r3, #12
 8003990:	d101      	bne.n	8003996 <maxDaysInMonth+0x62>
		month == 12) {		// december
		return 31;
 8003992:	231f      	movs	r3, #31
 8003994:	e034      	b.n	8003a00 <maxDaysInMonth+0xcc>
	}
	else if (month == 4 ||	// april
 8003996:	1dfb      	adds	r3, r7, #7
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	2b04      	cmp	r3, #4
 800399c:	d00b      	beq.n	80039b6 <maxDaysInMonth+0x82>
 800399e:	1dfb      	adds	r3, r7, #7
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	2b06      	cmp	r3, #6
 80039a4:	d007      	beq.n	80039b6 <maxDaysInMonth+0x82>
			 month == 6 ||	// june
 80039a6:	1dfb      	adds	r3, r7, #7
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	2b09      	cmp	r3, #9
 80039ac:	d003      	beq.n	80039b6 <maxDaysInMonth+0x82>
			 month == 9 ||	// september
 80039ae:	1dfb      	adds	r3, r7, #7
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	2b0b      	cmp	r3, #11
 80039b4:	d101      	bne.n	80039ba <maxDaysInMonth+0x86>
			 month == 11) {	// november
		return 30;
 80039b6:	231e      	movs	r3, #30
 80039b8:	e022      	b.n	8003a00 <maxDaysInMonth+0xcc>
	}

	// february/leap year calculator
	// leap year for every 4th year, but every 100th year is not a leap year except on every 400th year
	// ex. 2020 is a leap year, 2100 is not a leap year, 2000 is a leap year.
	else if (year % 400 == 0) return 29;
 80039ba:	1d3b      	adds	r3, r7, #4
 80039bc:	881a      	ldrh	r2, [r3, #0]
 80039be:	23c8      	movs	r3, #200	; 0xc8
 80039c0:	0059      	lsls	r1, r3, #1
 80039c2:	0010      	movs	r0, r2
 80039c4:	f7fc fc2e 	bl	8000224 <__aeabi_uidivmod>
 80039c8:	000b      	movs	r3, r1
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d101      	bne.n	80039d4 <maxDaysInMonth+0xa0>
 80039d0:	231d      	movs	r3, #29
 80039d2:	e015      	b.n	8003a00 <maxDaysInMonth+0xcc>
	else if (year % 100 == 0) return 28;
 80039d4:	1d3b      	adds	r3, r7, #4
 80039d6:	881b      	ldrh	r3, [r3, #0]
 80039d8:	2164      	movs	r1, #100	; 0x64
 80039da:	0018      	movs	r0, r3
 80039dc:	f7fc fc22 	bl	8000224 <__aeabi_uidivmod>
 80039e0:	000b      	movs	r3, r1
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d101      	bne.n	80039ec <maxDaysInMonth+0xb8>
 80039e8:	231c      	movs	r3, #28
 80039ea:	e009      	b.n	8003a00 <maxDaysInMonth+0xcc>
	else if (year % 4 == 0) return 29;
 80039ec:	1d3b      	adds	r3, r7, #4
 80039ee:	881b      	ldrh	r3, [r3, #0]
 80039f0:	2203      	movs	r2, #3
 80039f2:	4013      	ands	r3, r2
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <maxDaysInMonth+0xca>
 80039fa:	231d      	movs	r3, #29
 80039fc:	e000      	b.n	8003a00 <maxDaysInMonth+0xcc>
	else return 28;
 80039fe:	231c      	movs	r3, #28
}
 8003a00:	0018      	movs	r0, r3
 8003a02:	46bd      	mov	sp, r7
 8003a04:	b002      	add	sp, #8
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a08:	b590      	push	{r4, r7, lr}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003a0e:	f003 fd61 	bl	80074d4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003a12:	f000 f87d 	bl	8003b10 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003a16:	f000 fcfb 	bl	8004410 <MX_GPIO_Init>
  MX_DMA_Init();
 8003a1a:	f000 fcdb 	bl	80043d4 <MX_DMA_Init>
  MX_ADC_Init();
 8003a1e:	f000 f8ff 	bl	8003c20 <MX_ADC_Init>
  MX_RTC_Init();
 8003a22:	f000 f961 	bl	8003ce8 <MX_RTC_Init>
  MX_TIM21_Init();
 8003a26:	f000 fb87 	bl	8004138 <MX_TIM21_Init>
  MX_TIM22_Init();
 8003a2a:	f000 fc1d 	bl	8004268 <MX_TIM22_Init>
  MX_TIM2_Init();
 8003a2e:	f000 fa2f 	bl	8003e90 <MX_TIM2_Init>
  MX_TIM6_Init();
 8003a32:	f000 fb45 	bl	80040c0 <MX_TIM6_Init>
  MX_TIM3_Init();
 8003a36:	f000 fab9 	bl	8003fac <MX_TIM3_Init>
  MX_SPI2_Init();
 8003a3a:	f000 f9f1 	bl	8003e20 <MX_SPI2_Init>
  MX_USB_PCD_Init();
 8003a3e:	f000 fca3 	bl	8004388 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
	// rtc software calibration
	setRTCCalibration(-8, &hrtc);
 8003a42:	4a29      	ldr	r2, [pc, #164]	; (8003ae8 <main+0xe0>)
 8003a44:	2308      	movs	r3, #8
 8003a46:	425b      	negs	r3, r3
 8003a48:	0011      	movs	r1, r2
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	f7ff fe70 	bl	8003730 <setRTCCalibration>
//	HAL_SuspendTick();					// disable systick. unused anyway (bad practice?)

  	// initialization for display
	TFT_startup(&hspi2);
 8003a50:	4b26      	ldr	r3, [pc, #152]	; (8003aec <main+0xe4>)
 8003a52:	0018      	movs	r0, r3
 8003a54:	f7fe fa72 	bl	8001f3c <TFT_startup>
//	clearScreen(ST77XX_BLACK, &hspi2);

	// initialization for ui and hardware
	initFace();
 8003a58:	f003 fcdc 	bl	8007414 <initFace>
	setClockAlarm(&hrtc);
 8003a5c:	4b22      	ldr	r3, [pc, #136]	; (8003ae8 <main+0xe0>)
 8003a5e:	0018      	movs	r0, r3
 8003a60:	f7ff fc62 	bl	8003328 <setClockAlarm>
	runADCSampler(&htim22);
 8003a64:	4b22      	ldr	r3, [pc, #136]	; (8003af0 <main+0xe8>)
 8003a66:	0018      	movs	r0, r3
 8003a68:	f001 fa42 	bl	8004ef0 <runADCSampler>
	setDisplayBacklight(50, &htim3);
 8003a6c:	4b21      	ldr	r3, [pc, #132]	; (8003af4 <main+0xec>)
 8003a6e:	0019      	movs	r1, r3
 8003a70:	2032      	movs	r0, #50	; 0x32
 8003a72:	f001 fa99 	bl	8004fa8 <setDisplayBacklight>
//	HAL_SuspendTick();
	HAL_GPIO_WritePin(LED1_PORT, LED1_PIN, GPIO_PIN_SET);
 8003a76:	23a0      	movs	r3, #160	; 0xa0
 8003a78:	05db      	lsls	r3, r3, #23
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	2120      	movs	r1, #32
 8003a7e:	0018      	movs	r0, r3
 8003a80:	f004 ff7e 	bl	8008980 <HAL_GPIO_WritePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//		lineTest(&hspi2);
//		charTest(&hspi2);
		updateState(&hrtc, &htim21, &htim2, &htim6, &hspi2);
 8003a84:	4c1c      	ldr	r4, [pc, #112]	; (8003af8 <main+0xf0>)
 8003a86:	4a1d      	ldr	r2, [pc, #116]	; (8003afc <main+0xf4>)
 8003a88:	491d      	ldr	r1, [pc, #116]	; (8003b00 <main+0xf8>)
 8003a8a:	4817      	ldr	r0, [pc, #92]	; (8003ae8 <main+0xe0>)
 8003a8c:	4b17      	ldr	r3, [pc, #92]	; (8003aec <main+0xe4>)
 8003a8e:	9300      	str	r3, [sp, #0]
 8003a90:	0023      	movs	r3, r4
 8003a92:	f001 fb01 	bl	8005098 <updateState>
		updateDisplay(&hrtc, &hspi2);
 8003a96:	4a15      	ldr	r2, [pc, #84]	; (8003aec <main+0xe4>)
 8003a98:	4b13      	ldr	r3, [pc, #76]	; (8003ae8 <main+0xe0>)
 8003a9a:	0011      	movs	r1, r2
 8003a9c:	0018      	movs	r0, r3
 8003a9e:	f002 f923 	bl	8005ce8 <updateDisplay>

		batteryManager(&hadc, &hspi2, &htim21, &htim3);
 8003aa2:	4b14      	ldr	r3, [pc, #80]	; (8003af4 <main+0xec>)
 8003aa4:	4a16      	ldr	r2, [pc, #88]	; (8003b00 <main+0xf8>)
 8003aa6:	4911      	ldr	r1, [pc, #68]	; (8003aec <main+0xe4>)
 8003aa8:	4816      	ldr	r0, [pc, #88]	; (8003b04 <main+0xfc>)
 8003aaa:	f7ff fa85 	bl	8002fb8 <batteryManager>

		if (isTimerDone || isAlarmDone) {
 8003aae:	4b16      	ldr	r3, [pc, #88]	; (8003b08 <main+0x100>)
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d104      	bne.n	8003ac2 <main+0xba>
 8003ab8:	4b14      	ldr	r3, [pc, #80]	; (8003b0c <main+0x104>)
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d0e0      	beq.n	8003a84 <main+0x7c>
			runMotor(&htim2);
 8003ac2:	4b0e      	ldr	r3, [pc, #56]	; (8003afc <main+0xf4>)
 8003ac4:	0018      	movs	r0, r3
 8003ac6:	f001 fa25 	bl	8004f14 <runMotor>
			updateDisplay(&hrtc, &hspi2);
 8003aca:	4a08      	ldr	r2, [pc, #32]	; (8003aec <main+0xe4>)
 8003acc:	4b06      	ldr	r3, [pc, #24]	; (8003ae8 <main+0xe0>)
 8003ace:	0011      	movs	r1, r2
 8003ad0:	0018      	movs	r0, r3
 8003ad2:	f002 f909 	bl	8005ce8 <updateDisplay>
			isTimerDone = isAlarmDone = 0;
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	4b0c      	ldr	r3, [pc, #48]	; (8003b0c <main+0x104>)
 8003ada:	1c0a      	adds	r2, r1, #0
 8003adc:	701a      	strb	r2, [r3, #0]
 8003ade:	4b0a      	ldr	r3, [pc, #40]	; (8003b08 <main+0x100>)
 8003ae0:	1c0a      	adds	r2, r1, #0
 8003ae2:	701a      	strb	r2, [r3, #0]
		updateState(&hrtc, &htim21, &htim2, &htim6, &hspi2);
 8003ae4:	e7ce      	b.n	8003a84 <main+0x7c>
 8003ae6:	46c0      	nop			; (mov r8, r8)
 8003ae8:	2000028c 	.word	0x2000028c
 8003aec:	200001bc 	.word	0x200001bc
 8003af0:	20000250 	.word	0x20000250
 8003af4:	20000214 	.word	0x20000214
 8003af8:	20000174 	.word	0x20000174
 8003afc:	200002b0 	.word	0x200002b0
 8003b00:	20000684 	.word	0x20000684
 8003b04:	20000628 	.word	0x20000628
 8003b08:	20000170 	.word	0x20000170
 8003b0c:	20000163 	.word	0x20000163

08003b10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b10:	b590      	push	{r4, r7, lr}
 8003b12:	b09f      	sub	sp, #124	; 0x7c
 8003b14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b16:	2440      	movs	r4, #64	; 0x40
 8003b18:	193b      	adds	r3, r7, r4
 8003b1a:	0018      	movs	r0, r3
 8003b1c:	2338      	movs	r3, #56	; 0x38
 8003b1e:	001a      	movs	r2, r3
 8003b20:	2100      	movs	r1, #0
 8003b22:	f008 fb1e 	bl	800c162 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b26:	232c      	movs	r3, #44	; 0x2c
 8003b28:	18fb      	adds	r3, r7, r3
 8003b2a:	0018      	movs	r0, r3
 8003b2c:	2314      	movs	r3, #20
 8003b2e:	001a      	movs	r2, r3
 8003b30:	2100      	movs	r1, #0
 8003b32:	f008 fb16 	bl	800c162 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b36:	1d3b      	adds	r3, r7, #4
 8003b38:	0018      	movs	r0, r3
 8003b3a:	2328      	movs	r3, #40	; 0x28
 8003b3c:	001a      	movs	r2, r3
 8003b3e:	2100      	movs	r1, #0
 8003b40:	f008 fb0f 	bl	800c162 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b44:	4b33      	ldr	r3, [pc, #204]	; (8003c14 <SystemClock_Config+0x104>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a33      	ldr	r2, [pc, #204]	; (8003c18 <SystemClock_Config+0x108>)
 8003b4a:	401a      	ands	r2, r3
 8003b4c:	4b31      	ldr	r3, [pc, #196]	; (8003c14 <SystemClock_Config+0x104>)
 8003b4e:	2180      	movs	r1, #128	; 0x80
 8003b50:	0109      	lsls	r1, r1, #4
 8003b52:	430a      	orrs	r2, r1
 8003b54:	601a      	str	r2, [r3, #0]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003b56:	f005 f8a1 	bl	8008c9c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003b5a:	4b30      	ldr	r3, [pc, #192]	; (8003c1c <SystemClock_Config+0x10c>)
 8003b5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b5e:	4b2f      	ldr	r3, [pc, #188]	; (8003c1c <SystemClock_Config+0x10c>)
 8003b60:	492d      	ldr	r1, [pc, #180]	; (8003c18 <SystemClock_Config+0x108>)
 8003b62:	400a      	ands	r2, r1
 8003b64:	651a      	str	r2, [r3, #80]	; 0x50
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8003b66:	193b      	adds	r3, r7, r4
 8003b68:	2226      	movs	r2, #38	; 0x26
 8003b6a:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003b6c:	193b      	adds	r3, r7, r4
 8003b6e:	2280      	movs	r2, #128	; 0x80
 8003b70:	0052      	lsls	r2, r2, #1
 8003b72:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003b74:	0021      	movs	r1, r4
 8003b76:	187b      	adds	r3, r7, r1
 8003b78:	2201      	movs	r2, #1
 8003b7a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003b7c:	187b      	adds	r3, r7, r1
 8003b7e:	2210      	movs	r2, #16
 8003b80:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003b82:	187b      	adds	r3, r7, r1
 8003b84:	2201      	movs	r2, #1
 8003b86:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b88:	187b      	adds	r3, r7, r1
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003b8e:	187b      	adds	r3, r7, r1
 8003b90:	2200      	movs	r2, #0
 8003b92:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8003b94:	187b      	adds	r3, r7, r1
 8003b96:	2280      	movs	r2, #128	; 0x80
 8003b98:	02d2      	lsls	r2, r2, #11
 8003b9a:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8003b9c:	187b      	adds	r3, r7, r1
 8003b9e:	2280      	movs	r2, #128	; 0x80
 8003ba0:	03d2      	lsls	r2, r2, #15
 8003ba2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ba4:	187b      	adds	r3, r7, r1
 8003ba6:	0018      	movs	r0, r3
 8003ba8:	f005 f886 	bl	8008cb8 <HAL_RCC_OscConfig>
 8003bac:	1e03      	subs	r3, r0, #0
 8003bae:	d001      	beq.n	8003bb4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8003bb0:	f000 fce8 	bl	8004584 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003bb4:	212c      	movs	r1, #44	; 0x2c
 8003bb6:	187b      	adds	r3, r7, r1
 8003bb8:	220f      	movs	r2, #15
 8003bba:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003bbc:	187b      	adds	r3, r7, r1
 8003bbe:	2203      	movs	r2, #3
 8003bc0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003bc2:	187b      	adds	r3, r7, r1
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003bc8:	187b      	adds	r3, r7, r1
 8003bca:	2200      	movs	r2, #0
 8003bcc:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003bce:	187b      	adds	r3, r7, r1
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003bd4:	187b      	adds	r3, r7, r1
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	0018      	movs	r0, r3
 8003bda:	f005 fc3d 	bl	8009458 <HAL_RCC_ClockConfig>
 8003bde:	1e03      	subs	r3, r0, #0
 8003be0:	d001      	beq.n	8003be6 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8003be2:	f000 fccf 	bl	8004584 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 8003be6:	1d3b      	adds	r3, r7, #4
 8003be8:	2260      	movs	r2, #96	; 0x60
 8003bea:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003bec:	1d3b      	adds	r3, r7, #4
 8003bee:	2280      	movs	r2, #128	; 0x80
 8003bf0:	0252      	lsls	r2, r2, #9
 8003bf2:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8003bf4:	1d3b      	adds	r3, r7, #4
 8003bf6:	2280      	movs	r2, #128	; 0x80
 8003bf8:	04d2      	lsls	r2, r2, #19
 8003bfa:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003bfc:	1d3b      	adds	r3, r7, #4
 8003bfe:	0018      	movs	r0, r3
 8003c00:	f005 fdd8 	bl	80097b4 <HAL_RCCEx_PeriphCLKConfig>
 8003c04:	1e03      	subs	r3, r0, #0
 8003c06:	d001      	beq.n	8003c0c <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8003c08:	f000 fcbc 	bl	8004584 <Error_Handler>
  }
}
 8003c0c:	46c0      	nop			; (mov r8, r8)
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	b01f      	add	sp, #124	; 0x7c
 8003c12:	bd90      	pop	{r4, r7, pc}
 8003c14:	40007000 	.word	0x40007000
 8003c18:	ffffe7ff 	.word	0xffffe7ff
 8003c1c:	40021000 	.word	0x40021000

08003c20 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003c26:	003b      	movs	r3, r7
 8003c28:	0018      	movs	r0, r3
 8003c2a:	2308      	movs	r3, #8
 8003c2c:	001a      	movs	r2, r3
 8003c2e:	2100      	movs	r1, #0
 8003c30:	f008 fa97 	bl	800c162 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8003c34:	4b2a      	ldr	r3, [pc, #168]	; (8003ce0 <MX_ADC_Init+0xc0>)
 8003c36:	4a2b      	ldr	r2, [pc, #172]	; (8003ce4 <MX_ADC_Init+0xc4>)
 8003c38:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8003c3a:	4b29      	ldr	r3, [pc, #164]	; (8003ce0 <MX_ADC_Init+0xc0>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003c40:	4b27      	ldr	r3, [pc, #156]	; (8003ce0 <MX_ADC_Init+0xc0>)
 8003c42:	2280      	movs	r2, #128	; 0x80
 8003c44:	05d2      	lsls	r2, r2, #23
 8003c46:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003c48:	4b25      	ldr	r3, [pc, #148]	; (8003ce0 <MX_ADC_Init+0xc0>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_79CYCLES_5;
 8003c4e:	4b24      	ldr	r3, [pc, #144]	; (8003ce0 <MX_ADC_Init+0xc0>)
 8003c50:	2206      	movs	r2, #6
 8003c52:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003c54:	4b22      	ldr	r3, [pc, #136]	; (8003ce0 <MX_ADC_Init+0xc0>)
 8003c56:	2201      	movs	r2, #1
 8003c58:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003c5a:	4b21      	ldr	r3, [pc, #132]	; (8003ce0 <MX_ADC_Init+0xc0>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8003c60:	4b1f      	ldr	r3, [pc, #124]	; (8003ce0 <MX_ADC_Init+0xc0>)
 8003c62:	2220      	movs	r2, #32
 8003c64:	2100      	movs	r1, #0
 8003c66:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8003c68:	4b1d      	ldr	r3, [pc, #116]	; (8003ce0 <MX_ADC_Init+0xc0>)
 8003c6a:	2221      	movs	r2, #33	; 0x21
 8003c6c:	2100      	movs	r1, #0
 8003c6e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003c70:	4b1b      	ldr	r3, [pc, #108]	; (8003ce0 <MX_ADC_Init+0xc0>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003c76:	4b1a      	ldr	r3, [pc, #104]	; (8003ce0 <MX_ADC_Init+0xc0>)
 8003c78:	22c2      	movs	r2, #194	; 0xc2
 8003c7a:	32ff      	adds	r2, #255	; 0xff
 8003c7c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8003c7e:	4b18      	ldr	r3, [pc, #96]	; (8003ce0 <MX_ADC_Init+0xc0>)
 8003c80:	222c      	movs	r2, #44	; 0x2c
 8003c82:	2100      	movs	r1, #0
 8003c84:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003c86:	4b16      	ldr	r3, [pc, #88]	; (8003ce0 <MX_ADC_Init+0xc0>)
 8003c88:	2204      	movs	r2, #4
 8003c8a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003c8c:	4b14      	ldr	r3, [pc, #80]	; (8003ce0 <MX_ADC_Init+0xc0>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003c92:	4b13      	ldr	r3, [pc, #76]	; (8003ce0 <MX_ADC_Init+0xc0>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8003c98:	4b11      	ldr	r3, [pc, #68]	; (8003ce0 <MX_ADC_Init+0xc0>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003c9e:	4b10      	ldr	r3, [pc, #64]	; (8003ce0 <MX_ADC_Init+0xc0>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003ca4:	4b0e      	ldr	r3, [pc, #56]	; (8003ce0 <MX_ADC_Init+0xc0>)
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	f003 fca6 	bl	80075f8 <HAL_ADC_Init>
 8003cac:	1e03      	subs	r3, r0, #0
 8003cae:	d001      	beq.n	8003cb4 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8003cb0:	f000 fc68 	bl	8004584 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003cb4:	003b      	movs	r3, r7
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003cba:	003b      	movs	r3, r7
 8003cbc:	2280      	movs	r2, #128	; 0x80
 8003cbe:	0152      	lsls	r2, r2, #5
 8003cc0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003cc2:	003a      	movs	r2, r7
 8003cc4:	4b06      	ldr	r3, [pc, #24]	; (8003ce0 <MX_ADC_Init+0xc0>)
 8003cc6:	0011      	movs	r1, r2
 8003cc8:	0018      	movs	r0, r3
 8003cca:	f004 f813 	bl	8007cf4 <HAL_ADC_ConfigChannel>
 8003cce:	1e03      	subs	r3, r0, #0
 8003cd0:	d001      	beq.n	8003cd6 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8003cd2:	f000 fc57 	bl	8004584 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8003cd6:	46c0      	nop			; (mov r8, r8)
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	b002      	add	sp, #8
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	46c0      	nop			; (mov r8, r8)
 8003ce0:	20000628 	.word	0x20000628
 8003ce4:	40012400 	.word	0x40012400

08003ce8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b090      	sub	sp, #64	; 0x40
 8003cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003cee:	232c      	movs	r3, #44	; 0x2c
 8003cf0:	18fb      	adds	r3, r7, r3
 8003cf2:	0018      	movs	r0, r3
 8003cf4:	2314      	movs	r3, #20
 8003cf6:	001a      	movs	r2, r3
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	f008 fa32 	bl	800c162 <memset>
  RTC_DateTypeDef sDate = {0};
 8003cfe:	2328      	movs	r3, #40	; 0x28
 8003d00:	18fb      	adds	r3, r7, r3
 8003d02:	2200      	movs	r2, #0
 8003d04:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8003d06:	003b      	movs	r3, r7
 8003d08:	0018      	movs	r0, r3
 8003d0a:	2328      	movs	r3, #40	; 0x28
 8003d0c:	001a      	movs	r2, r3
 8003d0e:	2100      	movs	r1, #0
 8003d10:	f008 fa27 	bl	800c162 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003d14:	4b40      	ldr	r3, [pc, #256]	; (8003e18 <MX_RTC_Init+0x130>)
 8003d16:	4a41      	ldr	r2, [pc, #260]	; (8003e1c <MX_RTC_Init+0x134>)
 8003d18:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003d1a:	4b3f      	ldr	r3, [pc, #252]	; (8003e18 <MX_RTC_Init+0x130>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003d20:	4b3d      	ldr	r3, [pc, #244]	; (8003e18 <MX_RTC_Init+0x130>)
 8003d22:	227f      	movs	r2, #127	; 0x7f
 8003d24:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003d26:	4b3c      	ldr	r3, [pc, #240]	; (8003e18 <MX_RTC_Init+0x130>)
 8003d28:	22ff      	movs	r2, #255	; 0xff
 8003d2a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003d2c:	4b3a      	ldr	r3, [pc, #232]	; (8003e18 <MX_RTC_Init+0x130>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003d32:	4b39      	ldr	r3, [pc, #228]	; (8003e18 <MX_RTC_Init+0x130>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003d38:	4b37      	ldr	r3, [pc, #220]	; (8003e18 <MX_RTC_Init+0x130>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003d3e:	4b36      	ldr	r3, [pc, #216]	; (8003e18 <MX_RTC_Init+0x130>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003d44:	4b34      	ldr	r3, [pc, #208]	; (8003e18 <MX_RTC_Init+0x130>)
 8003d46:	0018      	movs	r0, r3
 8003d48:	f005 fea8 	bl	8009a9c <HAL_RTC_Init>
 8003d4c:	1e03      	subs	r3, r0, #0
 8003d4e:	d001      	beq.n	8003d54 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8003d50:	f000 fc18 	bl	8004584 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8003d54:	212c      	movs	r1, #44	; 0x2c
 8003d56:	187b      	adds	r3, r7, r1
 8003d58:	2200      	movs	r2, #0
 8003d5a:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8003d5c:	187b      	adds	r3, r7, r1
 8003d5e:	2200      	movs	r2, #0
 8003d60:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8003d62:	187b      	adds	r3, r7, r1
 8003d64:	2200      	movs	r2, #0
 8003d66:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003d68:	187b      	adds	r3, r7, r1
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003d6e:	187b      	adds	r3, r7, r1
 8003d70:	2200      	movs	r2, #0
 8003d72:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003d74:	1879      	adds	r1, r7, r1
 8003d76:	4b28      	ldr	r3, [pc, #160]	; (8003e18 <MX_RTC_Init+0x130>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	f005 ff2c 	bl	8009bd8 <HAL_RTC_SetTime>
 8003d80:	1e03      	subs	r3, r0, #0
 8003d82:	d001      	beq.n	8003d88 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8003d84:	f000 fbfe 	bl	8004584 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8003d88:	2128      	movs	r1, #40	; 0x28
 8003d8a:	187b      	adds	r3, r7, r1
 8003d8c:	2207      	movs	r2, #7
 8003d8e:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_DECEMBER;
 8003d90:	187b      	adds	r3, r7, r1
 8003d92:	2212      	movs	r2, #18
 8003d94:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8003d96:	187b      	adds	r3, r7, r1
 8003d98:	2201      	movs	r2, #1
 8003d9a:	709a      	strb	r2, [r3, #2]
  sDate.Year = 19;
 8003d9c:	187b      	adds	r3, r7, r1
 8003d9e:	2213      	movs	r2, #19
 8003da0:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003da2:	1879      	adds	r1, r7, r1
 8003da4:	4b1c      	ldr	r3, [pc, #112]	; (8003e18 <MX_RTC_Init+0x130>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	0018      	movs	r0, r3
 8003daa:	f006 f835 	bl	8009e18 <HAL_RTC_SetDate>
 8003dae:	1e03      	subs	r3, r0, #0
 8003db0:	d001      	beq.n	8003db6 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8003db2:	f000 fbe7 	bl	8004584 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.AlarmTime.Hours = 0;
 8003db6:	003b      	movs	r3, r7
 8003db8:	2200      	movs	r2, #0
 8003dba:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8003dbc:	003b      	movs	r3, r7
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8003dc2:	003b      	movs	r3, r7
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8003dc8:	003b      	movs	r3, r7
 8003dca:	2200      	movs	r2, #0
 8003dcc:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003dce:	003b      	movs	r3, r7
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003dd4:	003b      	movs	r3, r7
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8003dda:	003b      	movs	r3, r7
 8003ddc:	2200      	movs	r2, #0
 8003dde:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003de0:	003b      	movs	r3, r7
 8003de2:	2200      	movs	r2, #0
 8003de4:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003de6:	003b      	movs	r3, r7
 8003de8:	2200      	movs	r2, #0
 8003dea:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8003dec:	003b      	movs	r3, r7
 8003dee:	2220      	movs	r2, #32
 8003df0:	2101      	movs	r1, #1
 8003df2:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_B;
 8003df4:	003b      	movs	r3, r7
 8003df6:	2280      	movs	r2, #128	; 0x80
 8003df8:	0092      	lsls	r2, r2, #2
 8003dfa:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8003dfc:	0039      	movs	r1, r7
 8003dfe:	4b06      	ldr	r3, [pc, #24]	; (8003e18 <MX_RTC_Init+0x130>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	0018      	movs	r0, r3
 8003e04:	f006 f904 	bl	800a010 <HAL_RTC_SetAlarm_IT>
 8003e08:	1e03      	subs	r3, r0, #0
 8003e0a:	d001      	beq.n	8003e10 <MX_RTC_Init+0x128>
  {
    Error_Handler();
 8003e0c:	f000 fbba 	bl	8004584 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003e10:	46c0      	nop			; (mov r8, r8)
 8003e12:	46bd      	mov	sp, r7
 8003e14:	b010      	add	sp, #64	; 0x40
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	2000028c 	.word	0x2000028c
 8003e1c:	40002800 	.word	0x40002800

08003e20 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003e24:	4b18      	ldr	r3, [pc, #96]	; (8003e88 <MX_SPI2_Init+0x68>)
 8003e26:	4a19      	ldr	r2, [pc, #100]	; (8003e8c <MX_SPI2_Init+0x6c>)
 8003e28:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003e2a:	4b17      	ldr	r3, [pc, #92]	; (8003e88 <MX_SPI2_Init+0x68>)
 8003e2c:	2282      	movs	r2, #130	; 0x82
 8003e2e:	0052      	lsls	r2, r2, #1
 8003e30:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003e32:	4b15      	ldr	r3, [pc, #84]	; (8003e88 <MX_SPI2_Init+0x68>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003e38:	4b13      	ldr	r3, [pc, #76]	; (8003e88 <MX_SPI2_Init+0x68>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e3e:	4b12      	ldr	r3, [pc, #72]	; (8003e88 <MX_SPI2_Init+0x68>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003e44:	4b10      	ldr	r3, [pc, #64]	; (8003e88 <MX_SPI2_Init+0x68>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8003e4a:	4b0f      	ldr	r3, [pc, #60]	; (8003e88 <MX_SPI2_Init+0x68>)
 8003e4c:	2280      	movs	r2, #128	; 0x80
 8003e4e:	02d2      	lsls	r2, r2, #11
 8003e50:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e52:	4b0d      	ldr	r3, [pc, #52]	; (8003e88 <MX_SPI2_Init+0x68>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003e58:	4b0b      	ldr	r3, [pc, #44]	; (8003e88 <MX_SPI2_Init+0x68>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003e5e:	4b0a      	ldr	r3, [pc, #40]	; (8003e88 <MX_SPI2_Init+0x68>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e64:	4b08      	ldr	r3, [pc, #32]	; (8003e88 <MX_SPI2_Init+0x68>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003e6a:	4b07      	ldr	r3, [pc, #28]	; (8003e88 <MX_SPI2_Init+0x68>)
 8003e6c:	2207      	movs	r2, #7
 8003e6e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003e70:	4b05      	ldr	r3, [pc, #20]	; (8003e88 <MX_SPI2_Init+0x68>)
 8003e72:	0018      	movs	r0, r3
 8003e74:	f006 fc00 	bl	800a678 <HAL_SPI_Init>
 8003e78:	1e03      	subs	r3, r0, #0
 8003e7a:	d001      	beq.n	8003e80 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003e7c:	f000 fb82 	bl	8004584 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003e80:	46c0      	nop			; (mov r8, r8)
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	200001bc 	.word	0x200001bc
 8003e8c:	40003800 	.word	0x40003800

08003e90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b08a      	sub	sp, #40	; 0x28
 8003e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e96:	2318      	movs	r3, #24
 8003e98:	18fb      	adds	r3, r7, r3
 8003e9a:	0018      	movs	r0, r3
 8003e9c:	2310      	movs	r3, #16
 8003e9e:	001a      	movs	r2, r3
 8003ea0:	2100      	movs	r1, #0
 8003ea2:	f008 f95e 	bl	800c162 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ea6:	2310      	movs	r3, #16
 8003ea8:	18fb      	adds	r3, r7, r3
 8003eaa:	0018      	movs	r0, r3
 8003eac:	2308      	movs	r3, #8
 8003eae:	001a      	movs	r2, r3
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	f008 f956 	bl	800c162 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003eb6:	003b      	movs	r3, r7
 8003eb8:	0018      	movs	r0, r3
 8003eba:	2310      	movs	r3, #16
 8003ebc:	001a      	movs	r2, r3
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	f008 f94f 	bl	800c162 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003ec4:	4b37      	ldr	r3, [pc, #220]	; (8003fa4 <MX_TIM2_Init+0x114>)
 8003ec6:	2280      	movs	r2, #128	; 0x80
 8003ec8:	05d2      	lsls	r2, r2, #23
 8003eca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003ecc:	4b35      	ldr	r3, [pc, #212]	; (8003fa4 <MX_TIM2_Init+0x114>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ed2:	4b34      	ldr	r3, [pc, #208]	; (8003fa4 <MX_TIM2_Init+0x114>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0x3FFF;
 8003ed8:	4b32      	ldr	r3, [pc, #200]	; (8003fa4 <MX_TIM2_Init+0x114>)
 8003eda:	4a33      	ldr	r2, [pc, #204]	; (8003fa8 <MX_TIM2_Init+0x118>)
 8003edc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ede:	4b31      	ldr	r3, [pc, #196]	; (8003fa4 <MX_TIM2_Init+0x114>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ee4:	4b2f      	ldr	r3, [pc, #188]	; (8003fa4 <MX_TIM2_Init+0x114>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003eea:	4b2e      	ldr	r3, [pc, #184]	; (8003fa4 <MX_TIM2_Init+0x114>)
 8003eec:	0018      	movs	r0, r3
 8003eee:	f007 f9d3 	bl	800b298 <HAL_TIM_Base_Init>
 8003ef2:	1e03      	subs	r3, r0, #0
 8003ef4:	d001      	beq.n	8003efa <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003ef6:	f000 fb45 	bl	8004584 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8003efa:	2118      	movs	r1, #24
 8003efc:	187b      	adds	r3, r7, r1
 8003efe:	2280      	movs	r2, #128	; 0x80
 8003f00:	0192      	lsls	r2, r2, #6
 8003f02:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8003f04:	187b      	adds	r3, r7, r1
 8003f06:	2200      	movs	r2, #0
 8003f08:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8003f0a:	187b      	adds	r3, r7, r1
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 8003f10:	187b      	adds	r3, r7, r1
 8003f12:	2200      	movs	r2, #0
 8003f14:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003f16:	187a      	adds	r2, r7, r1
 8003f18:	4b22      	ldr	r3, [pc, #136]	; (8003fa4 <MX_TIM2_Init+0x114>)
 8003f1a:	0011      	movs	r1, r2
 8003f1c:	0018      	movs	r0, r3
 8003f1e:	f007 fd47 	bl	800b9b0 <HAL_TIM_ConfigClockSource>
 8003f22:	1e03      	subs	r3, r0, #0
 8003f24:	d001      	beq.n	8003f2a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8003f26:	f000 fb2d 	bl	8004584 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8003f2a:	4b1e      	ldr	r3, [pc, #120]	; (8003fa4 <MX_TIM2_Init+0x114>)
 8003f2c:	0018      	movs	r0, r3
 8003f2e:	f007 fa23 	bl	800b378 <HAL_TIM_OC_Init>
 8003f32:	1e03      	subs	r3, r0, #0
 8003f34:	d001      	beq.n	8003f3a <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8003f36:	f000 fb25 	bl	8004584 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f3a:	2110      	movs	r1, #16
 8003f3c:	187b      	adds	r3, r7, r1
 8003f3e:	2200      	movs	r2, #0
 8003f40:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f42:	187b      	adds	r3, r7, r1
 8003f44:	2200      	movs	r2, #0
 8003f46:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003f48:	187a      	adds	r2, r7, r1
 8003f4a:	4b16      	ldr	r3, [pc, #88]	; (8003fa4 <MX_TIM2_Init+0x114>)
 8003f4c:	0011      	movs	r1, r2
 8003f4e:	0018      	movs	r0, r3
 8003f50:	f008 f823 	bl	800bf9a <HAL_TIMEx_MasterConfigSynchronization>
 8003f54:	1e03      	subs	r3, r0, #0
 8003f56:	d001      	beq.n	8003f5c <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8003f58:	f000 fb14 	bl	8004584 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim2, TIM2_ETR_LSE) != HAL_OK)
 8003f5c:	4b11      	ldr	r3, [pc, #68]	; (8003fa4 <MX_TIM2_Init+0x114>)
 8003f5e:	2105      	movs	r1, #5
 8003f60:	0018      	movs	r0, r3
 8003f62:	f008 f85d 	bl	800c020 <HAL_TIMEx_RemapConfig>
 8003f66:	1e03      	subs	r3, r0, #0
 8003f68:	d001      	beq.n	8003f6e <MX_TIM2_Init+0xde>
  {
    Error_Handler();
 8003f6a:	f000 fb0b 	bl	8004584 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003f6e:	003b      	movs	r3, r7
 8003f70:	2200      	movs	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003f74:	003b      	movs	r3, r7
 8003f76:	2200      	movs	r2, #0
 8003f78:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f7a:	003b      	movs	r3, r7
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f80:	003b      	movs	r3, r7
 8003f82:	2200      	movs	r2, #0
 8003f84:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003f86:	0039      	movs	r1, r7
 8003f88:	4b06      	ldr	r3, [pc, #24]	; (8003fa4 <MX_TIM2_Init+0x114>)
 8003f8a:	2204      	movs	r2, #4
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	f007 fc09 	bl	800b7a4 <HAL_TIM_OC_ConfigChannel>
 8003f92:	1e03      	subs	r3, r0, #0
 8003f94:	d001      	beq.n	8003f9a <MX_TIM2_Init+0x10a>
  {
    Error_Handler();
 8003f96:	f000 faf5 	bl	8004584 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003f9a:	46c0      	nop			; (mov r8, r8)
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	b00a      	add	sp, #40	; 0x28
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	46c0      	nop			; (mov r8, r8)
 8003fa4:	200002b0 	.word	0x200002b0
 8003fa8:	00003fff 	.word	0x00003fff

08003fac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b08a      	sub	sp, #40	; 0x28
 8003fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003fb2:	2318      	movs	r3, #24
 8003fb4:	18fb      	adds	r3, r7, r3
 8003fb6:	0018      	movs	r0, r3
 8003fb8:	2310      	movs	r3, #16
 8003fba:	001a      	movs	r2, r3
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	f008 f8d0 	bl	800c162 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fc2:	2310      	movs	r3, #16
 8003fc4:	18fb      	adds	r3, r7, r3
 8003fc6:	0018      	movs	r0, r3
 8003fc8:	2308      	movs	r3, #8
 8003fca:	001a      	movs	r2, r3
 8003fcc:	2100      	movs	r1, #0
 8003fce:	f008 f8c8 	bl	800c162 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003fd2:	003b      	movs	r3, r7
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	2310      	movs	r3, #16
 8003fd8:	001a      	movs	r2, r3
 8003fda:	2100      	movs	r1, #0
 8003fdc:	f008 f8c1 	bl	800c162 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003fe0:	4b34      	ldr	r3, [pc, #208]	; (80040b4 <MX_TIM3_Init+0x108>)
 8003fe2:	4a35      	ldr	r2, [pc, #212]	; (80040b8 <MX_TIM3_Init+0x10c>)
 8003fe4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003fe6:	4b33      	ldr	r3, [pc, #204]	; (80040b4 <MX_TIM3_Init+0x108>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fec:	4b31      	ldr	r3, [pc, #196]	; (80040b4 <MX_TIM3_Init+0x108>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF;
 8003ff2:	4b30      	ldr	r3, [pc, #192]	; (80040b4 <MX_TIM3_Init+0x108>)
 8003ff4:	4a31      	ldr	r2, [pc, #196]	; (80040bc <MX_TIM3_Init+0x110>)
 8003ff6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ff8:	4b2e      	ldr	r3, [pc, #184]	; (80040b4 <MX_TIM3_Init+0x108>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ffe:	4b2d      	ldr	r3, [pc, #180]	; (80040b4 <MX_TIM3_Init+0x108>)
 8004000:	2200      	movs	r2, #0
 8004002:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004004:	4b2b      	ldr	r3, [pc, #172]	; (80040b4 <MX_TIM3_Init+0x108>)
 8004006:	0018      	movs	r0, r3
 8004008:	f007 f946 	bl	800b298 <HAL_TIM_Base_Init>
 800400c:	1e03      	subs	r3, r0, #0
 800400e:	d001      	beq.n	8004014 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8004010:	f000 fab8 	bl	8004584 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004014:	2118      	movs	r1, #24
 8004016:	187b      	adds	r3, r7, r1
 8004018:	2280      	movs	r2, #128	; 0x80
 800401a:	0152      	lsls	r2, r2, #5
 800401c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800401e:	187a      	adds	r2, r7, r1
 8004020:	4b24      	ldr	r3, [pc, #144]	; (80040b4 <MX_TIM3_Init+0x108>)
 8004022:	0011      	movs	r1, r2
 8004024:	0018      	movs	r0, r3
 8004026:	f007 fcc3 	bl	800b9b0 <HAL_TIM_ConfigClockSource>
 800402a:	1e03      	subs	r3, r0, #0
 800402c:	d001      	beq.n	8004032 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800402e:	f000 faa9 	bl	8004584 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004032:	4b20      	ldr	r3, [pc, #128]	; (80040b4 <MX_TIM3_Init+0x108>)
 8004034:	0018      	movs	r0, r3
 8004036:	f007 fa77 	bl	800b528 <HAL_TIM_PWM_Init>
 800403a:	1e03      	subs	r3, r0, #0
 800403c:	d001      	beq.n	8004042 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800403e:	f000 faa1 	bl	8004584 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004042:	2110      	movs	r1, #16
 8004044:	187b      	adds	r3, r7, r1
 8004046:	2200      	movs	r2, #0
 8004048:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800404a:	187b      	adds	r3, r7, r1
 800404c:	2200      	movs	r2, #0
 800404e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004050:	187a      	adds	r2, r7, r1
 8004052:	4b18      	ldr	r3, [pc, #96]	; (80040b4 <MX_TIM3_Init+0x108>)
 8004054:	0011      	movs	r1, r2
 8004056:	0018      	movs	r0, r3
 8004058:	f007 ff9f 	bl	800bf9a <HAL_TIMEx_MasterConfigSynchronization>
 800405c:	1e03      	subs	r3, r0, #0
 800405e:	d001      	beq.n	8004064 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8004060:	f000 fa90 	bl	8004584 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004064:	003b      	movs	r3, r7
 8004066:	2260      	movs	r2, #96	; 0x60
 8004068:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800406a:	003b      	movs	r3, r7
 800406c:	2200      	movs	r2, #0
 800406e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004070:	003b      	movs	r3, r7
 8004072:	2200      	movs	r2, #0
 8004074:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004076:	003b      	movs	r3, r7
 8004078:	2200      	movs	r2, #0
 800407a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800407c:	0039      	movs	r1, r7
 800407e:	4b0d      	ldr	r3, [pc, #52]	; (80040b4 <MX_TIM3_Init+0x108>)
 8004080:	2200      	movs	r2, #0
 8004082:	0018      	movs	r0, r3
 8004084:	f007 fbdc 	bl	800b840 <HAL_TIM_PWM_ConfigChannel>
 8004088:	1e03      	subs	r3, r0, #0
 800408a:	d001      	beq.n	8004090 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 800408c:	f000 fa7a 	bl	8004584 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 8004090:	4b08      	ldr	r3, [pc, #32]	; (80040b4 <MX_TIM3_Init+0x108>)
 8004092:	2104      	movs	r1, #4
 8004094:	0018      	movs	r0, r3
 8004096:	f007 ffc3 	bl	800c020 <HAL_TIMEx_RemapConfig>
 800409a:	1e03      	subs	r3, r0, #0
 800409c:	d001      	beq.n	80040a2 <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 800409e:	f000 fa71 	bl	8004584 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80040a2:	4b04      	ldr	r3, [pc, #16]	; (80040b4 <MX_TIM3_Init+0x108>)
 80040a4:	0018      	movs	r0, r3
 80040a6:	f000 fbcf 	bl	8004848 <HAL_TIM_MspPostInit>

}
 80040aa:	46c0      	nop			; (mov r8, r8)
 80040ac:	46bd      	mov	sp, r7
 80040ae:	b00a      	add	sp, #40	; 0x28
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	46c0      	nop			; (mov r8, r8)
 80040b4:	20000214 	.word	0x20000214
 80040b8:	40000400 	.word	0x40000400
 80040bc:	0000ffff 	.word	0x0000ffff

080040c0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040c6:	003b      	movs	r3, r7
 80040c8:	0018      	movs	r0, r3
 80040ca:	2308      	movs	r3, #8
 80040cc:	001a      	movs	r2, r3
 80040ce:	2100      	movs	r1, #0
 80040d0:	f008 f847 	bl	800c162 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80040d4:	4b15      	ldr	r3, [pc, #84]	; (800412c <MX_TIM6_Init+0x6c>)
 80040d6:	4a16      	ldr	r2, [pc, #88]	; (8004130 <MX_TIM6_Init+0x70>)
 80040d8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0x40;
 80040da:	4b14      	ldr	r3, [pc, #80]	; (800412c <MX_TIM6_Init+0x6c>)
 80040dc:	2240      	movs	r2, #64	; 0x40
 80040de:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040e0:	4b12      	ldr	r3, [pc, #72]	; (800412c <MX_TIM6_Init+0x6c>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80040e6:	4b11      	ldr	r3, [pc, #68]	; (800412c <MX_TIM6_Init+0x6c>)
 80040e8:	4a12      	ldr	r2, [pc, #72]	; (8004134 <MX_TIM6_Init+0x74>)
 80040ea:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040ec:	4b0f      	ldr	r3, [pc, #60]	; (800412c <MX_TIM6_Init+0x6c>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80040f2:	4b0e      	ldr	r3, [pc, #56]	; (800412c <MX_TIM6_Init+0x6c>)
 80040f4:	0018      	movs	r0, r3
 80040f6:	f007 f8cf 	bl	800b298 <HAL_TIM_Base_Init>
 80040fa:	1e03      	subs	r3, r0, #0
 80040fc:	d001      	beq.n	8004102 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80040fe:	f000 fa41 	bl	8004584 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004102:	003b      	movs	r3, r7
 8004104:	2200      	movs	r2, #0
 8004106:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004108:	003b      	movs	r3, r7
 800410a:	2200      	movs	r2, #0
 800410c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800410e:	003a      	movs	r2, r7
 8004110:	4b06      	ldr	r3, [pc, #24]	; (800412c <MX_TIM6_Init+0x6c>)
 8004112:	0011      	movs	r1, r2
 8004114:	0018      	movs	r0, r3
 8004116:	f007 ff40 	bl	800bf9a <HAL_TIMEx_MasterConfigSynchronization>
 800411a:	1e03      	subs	r3, r0, #0
 800411c:	d001      	beq.n	8004122 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800411e:	f000 fa31 	bl	8004584 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004122:	46c0      	nop			; (mov r8, r8)
 8004124:	46bd      	mov	sp, r7
 8004126:	b002      	add	sp, #8
 8004128:	bd80      	pop	{r7, pc}
 800412a:	46c0      	nop			; (mov r8, r8)
 800412c:	20000174 	.word	0x20000174
 8004130:	40001000 	.word	0x40001000
 8004134:	0000ffff 	.word	0x0000ffff

08004138 <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b08a      	sub	sp, #40	; 0x28
 800413c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800413e:	2318      	movs	r3, #24
 8004140:	18fb      	adds	r3, r7, r3
 8004142:	0018      	movs	r0, r3
 8004144:	2310      	movs	r3, #16
 8004146:	001a      	movs	r2, r3
 8004148:	2100      	movs	r1, #0
 800414a:	f008 f80a 	bl	800c162 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800414e:	2310      	movs	r3, #16
 8004150:	18fb      	adds	r3, r7, r3
 8004152:	0018      	movs	r0, r3
 8004154:	2308      	movs	r3, #8
 8004156:	001a      	movs	r2, r3
 8004158:	2100      	movs	r1, #0
 800415a:	f008 f802 	bl	800c162 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800415e:	003b      	movs	r3, r7
 8004160:	0018      	movs	r0, r3
 8004162:	2310      	movs	r3, #16
 8004164:	001a      	movs	r2, r3
 8004166:	2100      	movs	r1, #0
 8004168:	f007 fffb 	bl	800c162 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 800416c:	4b3b      	ldr	r3, [pc, #236]	; (800425c <MX_TIM21_Init+0x124>)
 800416e:	4a3c      	ldr	r2, [pc, #240]	; (8004260 <MX_TIM21_Init+0x128>)
 8004170:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 0;
 8004172:	4b3a      	ldr	r3, [pc, #232]	; (800425c <MX_TIM21_Init+0x124>)
 8004174:	2200      	movs	r2, #0
 8004176:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004178:	4b38      	ldr	r3, [pc, #224]	; (800425c <MX_TIM21_Init+0x124>)
 800417a:	2200      	movs	r2, #0
 800417c:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 0x7FFF;
 800417e:	4b37      	ldr	r3, [pc, #220]	; (800425c <MX_TIM21_Init+0x124>)
 8004180:	4a38      	ldr	r2, [pc, #224]	; (8004264 <MX_TIM21_Init+0x12c>)
 8004182:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004184:	4b35      	ldr	r3, [pc, #212]	; (800425c <MX_TIM21_Init+0x124>)
 8004186:	2200      	movs	r2, #0
 8004188:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800418a:	4b34      	ldr	r3, [pc, #208]	; (800425c <MX_TIM21_Init+0x124>)
 800418c:	2200      	movs	r2, #0
 800418e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8004190:	4b32      	ldr	r3, [pc, #200]	; (800425c <MX_TIM21_Init+0x124>)
 8004192:	0018      	movs	r0, r3
 8004194:	f007 f880 	bl	800b298 <HAL_TIM_Base_Init>
 8004198:	1e03      	subs	r3, r0, #0
 800419a:	d001      	beq.n	80041a0 <MX_TIM21_Init+0x68>
  {
    Error_Handler();
 800419c:	f000 f9f2 	bl	8004584 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80041a0:	2118      	movs	r1, #24
 80041a2:	187b      	adds	r3, r7, r1
 80041a4:	2280      	movs	r2, #128	; 0x80
 80041a6:	0192      	lsls	r2, r2, #6
 80041a8:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80041aa:	187b      	adds	r3, r7, r1
 80041ac:	2200      	movs	r2, #0
 80041ae:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80041b0:	187b      	adds	r3, r7, r1
 80041b2:	2200      	movs	r2, #0
 80041b4:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 80041b6:	187b      	adds	r3, r7, r1
 80041b8:	2200      	movs	r2, #0
 80041ba:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 80041bc:	187a      	adds	r2, r7, r1
 80041be:	4b27      	ldr	r3, [pc, #156]	; (800425c <MX_TIM21_Init+0x124>)
 80041c0:	0011      	movs	r1, r2
 80041c2:	0018      	movs	r0, r3
 80041c4:	f007 fbf4 	bl	800b9b0 <HAL_TIM_ConfigClockSource>
 80041c8:	1e03      	subs	r3, r0, #0
 80041ca:	d001      	beq.n	80041d0 <MX_TIM21_Init+0x98>
  {
    Error_Handler();
 80041cc:	f000 f9da 	bl	8004584 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim21) != HAL_OK)
 80041d0:	4b22      	ldr	r3, [pc, #136]	; (800425c <MX_TIM21_Init+0x124>)
 80041d2:	0018      	movs	r0, r3
 80041d4:	f007 f8d0 	bl	800b378 <HAL_TIM_OC_Init>
 80041d8:	1e03      	subs	r3, r0, #0
 80041da:	d001      	beq.n	80041e0 <MX_TIM21_Init+0xa8>
  {
    Error_Handler();
 80041dc:	f000 f9d2 	bl	8004584 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041e0:	2110      	movs	r1, #16
 80041e2:	187b      	adds	r3, r7, r1
 80041e4:	2200      	movs	r2, #0
 80041e6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041e8:	187b      	adds	r3, r7, r1
 80041ea:	2200      	movs	r2, #0
 80041ec:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 80041ee:	187a      	adds	r2, r7, r1
 80041f0:	4b1a      	ldr	r3, [pc, #104]	; (800425c <MX_TIM21_Init+0x124>)
 80041f2:	0011      	movs	r1, r2
 80041f4:	0018      	movs	r0, r3
 80041f6:	f007 fed0 	bl	800bf9a <HAL_TIMEx_MasterConfigSynchronization>
 80041fa:	1e03      	subs	r3, r0, #0
 80041fc:	d001      	beq.n	8004202 <MX_TIM21_Init+0xca>
  {
    Error_Handler();
 80041fe:	f000 f9c1 	bl	8004584 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim21, TIM21_ETR_LSE) != HAL_OK)
 8004202:	4b16      	ldr	r3, [pc, #88]	; (800425c <MX_TIM21_Init+0x124>)
 8004204:	2103      	movs	r1, #3
 8004206:	0018      	movs	r0, r3
 8004208:	f007 ff0a 	bl	800c020 <HAL_TIMEx_RemapConfig>
 800420c:	1e03      	subs	r3, r0, #0
 800420e:	d001      	beq.n	8004214 <MX_TIM21_Init+0xdc>
  {
    Error_Handler();
 8004210:	f000 f9b8 	bl	8004584 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8004214:	003b      	movs	r3, r7
 8004216:	2200      	movs	r2, #0
 8004218:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800421a:	003b      	movs	r3, r7
 800421c:	2200      	movs	r2, #0
 800421e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004220:	003b      	movs	r3, r7
 8004222:	2200      	movs	r2, #0
 8004224:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004226:	003b      	movs	r3, r7
 8004228:	2200      	movs	r2, #0
 800422a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800422c:	0039      	movs	r1, r7
 800422e:	4b0b      	ldr	r3, [pc, #44]	; (800425c <MX_TIM21_Init+0x124>)
 8004230:	2200      	movs	r2, #0
 8004232:	0018      	movs	r0, r3
 8004234:	f007 fab6 	bl	800b7a4 <HAL_TIM_OC_ConfigChannel>
 8004238:	1e03      	subs	r3, r0, #0
 800423a:	d001      	beq.n	8004240 <MX_TIM21_Init+0x108>
  {
    Error_Handler();
 800423c:	f000 f9a2 	bl	8004584 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004240:	0039      	movs	r1, r7
 8004242:	4b06      	ldr	r3, [pc, #24]	; (800425c <MX_TIM21_Init+0x124>)
 8004244:	2204      	movs	r2, #4
 8004246:	0018      	movs	r0, r3
 8004248:	f007 faac 	bl	800b7a4 <HAL_TIM_OC_ConfigChannel>
 800424c:	1e03      	subs	r3, r0, #0
 800424e:	d001      	beq.n	8004254 <MX_TIM21_Init+0x11c>
  {
    Error_Handler();
 8004250:	f000 f998 	bl	8004584 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8004254:	46c0      	nop			; (mov r8, r8)
 8004256:	46bd      	mov	sp, r7
 8004258:	b00a      	add	sp, #40	; 0x28
 800425a:	bd80      	pop	{r7, pc}
 800425c:	20000684 	.word	0x20000684
 8004260:	40010800 	.word	0x40010800
 8004264:	00007fff 	.word	0x00007fff

08004268 <MX_TIM22_Init>:
  * @brief TIM22 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM22_Init(void)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b08a      	sub	sp, #40	; 0x28
 800426c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800426e:	2318      	movs	r3, #24
 8004270:	18fb      	adds	r3, r7, r3
 8004272:	0018      	movs	r0, r3
 8004274:	2310      	movs	r3, #16
 8004276:	001a      	movs	r2, r3
 8004278:	2100      	movs	r1, #0
 800427a:	f007 ff72 	bl	800c162 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800427e:	2310      	movs	r3, #16
 8004280:	18fb      	adds	r3, r7, r3
 8004282:	0018      	movs	r0, r3
 8004284:	2308      	movs	r3, #8
 8004286:	001a      	movs	r2, r3
 8004288:	2100      	movs	r1, #0
 800428a:	f007 ff6a 	bl	800c162 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800428e:	003b      	movs	r3, r7
 8004290:	0018      	movs	r0, r3
 8004292:	2310      	movs	r3, #16
 8004294:	001a      	movs	r2, r3
 8004296:	2100      	movs	r1, #0
 8004298:	f007 ff63 	bl	800c162 <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 800429c:	4b37      	ldr	r3, [pc, #220]	; (800437c <MX_TIM22_Init+0x114>)
 800429e:	4a38      	ldr	r2, [pc, #224]	; (8004380 <MX_TIM22_Init+0x118>)
 80042a0:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 0x400;
 80042a2:	4b36      	ldr	r3, [pc, #216]	; (800437c <MX_TIM22_Init+0x114>)
 80042a4:	2280      	movs	r2, #128	; 0x80
 80042a6:	00d2      	lsls	r2, r2, #3
 80042a8:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042aa:	4b34      	ldr	r3, [pc, #208]	; (800437c <MX_TIM22_Init+0x114>)
 80042ac:	2200      	movs	r2, #0
 80042ae:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 1919;
 80042b0:	4b32      	ldr	r3, [pc, #200]	; (800437c <MX_TIM22_Init+0x114>)
 80042b2:	4a34      	ldr	r2, [pc, #208]	; (8004384 <MX_TIM22_Init+0x11c>)
 80042b4:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042b6:	4b31      	ldr	r3, [pc, #196]	; (800437c <MX_TIM22_Init+0x114>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042bc:	4b2f      	ldr	r3, [pc, #188]	; (800437c <MX_TIM22_Init+0x114>)
 80042be:	2200      	movs	r2, #0
 80042c0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim22) != HAL_OK)
 80042c2:	4b2e      	ldr	r3, [pc, #184]	; (800437c <MX_TIM22_Init+0x114>)
 80042c4:	0018      	movs	r0, r3
 80042c6:	f006 ffe7 	bl	800b298 <HAL_TIM_Base_Init>
 80042ca:	1e03      	subs	r3, r0, #0
 80042cc:	d001      	beq.n	80042d2 <MX_TIM22_Init+0x6a>
  {
    Error_Handler();
 80042ce:	f000 f959 	bl	8004584 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80042d2:	2118      	movs	r1, #24
 80042d4:	187b      	adds	r3, r7, r1
 80042d6:	2280      	movs	r2, #128	; 0x80
 80042d8:	0192      	lsls	r2, r2, #6
 80042da:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80042dc:	187b      	adds	r3, r7, r1
 80042de:	2200      	movs	r2, #0
 80042e0:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80042e2:	187b      	adds	r3, r7, r1
 80042e4:	2200      	movs	r2, #0
 80042e6:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 80042e8:	187b      	adds	r3, r7, r1
 80042ea:	2200      	movs	r2, #0
 80042ec:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig) != HAL_OK)
 80042ee:	187a      	adds	r2, r7, r1
 80042f0:	4b22      	ldr	r3, [pc, #136]	; (800437c <MX_TIM22_Init+0x114>)
 80042f2:	0011      	movs	r1, r2
 80042f4:	0018      	movs	r0, r3
 80042f6:	f007 fb5b 	bl	800b9b0 <HAL_TIM_ConfigClockSource>
 80042fa:	1e03      	subs	r3, r0, #0
 80042fc:	d001      	beq.n	8004302 <MX_TIM22_Init+0x9a>
  {
    Error_Handler();
 80042fe:	f000 f941 	bl	8004584 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim22) != HAL_OK)
 8004302:	4b1e      	ldr	r3, [pc, #120]	; (800437c <MX_TIM22_Init+0x114>)
 8004304:	0018      	movs	r0, r3
 8004306:	f007 f837 	bl	800b378 <HAL_TIM_OC_Init>
 800430a:	1e03      	subs	r3, r0, #0
 800430c:	d001      	beq.n	8004312 <MX_TIM22_Init+0xaa>
  {
    Error_Handler();
 800430e:	f000 f939 	bl	8004584 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004312:	2110      	movs	r1, #16
 8004314:	187b      	adds	r3, r7, r1
 8004316:	2200      	movs	r2, #0
 8004318:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800431a:	187b      	adds	r3, r7, r1
 800431c:	2200      	movs	r2, #0
 800431e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 8004320:	187a      	adds	r2, r7, r1
 8004322:	4b16      	ldr	r3, [pc, #88]	; (800437c <MX_TIM22_Init+0x114>)
 8004324:	0011      	movs	r1, r2
 8004326:	0018      	movs	r0, r3
 8004328:	f007 fe37 	bl	800bf9a <HAL_TIMEx_MasterConfigSynchronization>
 800432c:	1e03      	subs	r3, r0, #0
 800432e:	d001      	beq.n	8004334 <MX_TIM22_Init+0xcc>
  {
    Error_Handler();
 8004330:	f000 f928 	bl	8004584 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim22, TIM22_ETR_LSE) != HAL_OK)
 8004334:	4b11      	ldr	r3, [pc, #68]	; (800437c <MX_TIM22_Init+0x114>)
 8004336:	2103      	movs	r1, #3
 8004338:	0018      	movs	r0, r3
 800433a:	f007 fe71 	bl	800c020 <HAL_TIMEx_RemapConfig>
 800433e:	1e03      	subs	r3, r0, #0
 8004340:	d001      	beq.n	8004346 <MX_TIM22_Init+0xde>
  {
    Error_Handler();
 8004342:	f000 f91f 	bl	8004584 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8004346:	003b      	movs	r3, r7
 8004348:	2200      	movs	r2, #0
 800434a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800434c:	003b      	movs	r3, r7
 800434e:	2200      	movs	r2, #0
 8004350:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004352:	003b      	movs	r3, r7
 8004354:	2200      	movs	r2, #0
 8004356:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004358:	003b      	movs	r3, r7
 800435a:	2200      	movs	r2, #0
 800435c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800435e:	0039      	movs	r1, r7
 8004360:	4b06      	ldr	r3, [pc, #24]	; (800437c <MX_TIM22_Init+0x114>)
 8004362:	2200      	movs	r2, #0
 8004364:	0018      	movs	r0, r3
 8004366:	f007 fa1d 	bl	800b7a4 <HAL_TIM_OC_ConfigChannel>
 800436a:	1e03      	subs	r3, r0, #0
 800436c:	d001      	beq.n	8004372 <MX_TIM22_Init+0x10a>
  {
    Error_Handler();
 800436e:	f000 f909 	bl	8004584 <Error_Handler>
  }
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */

}
 8004372:	46c0      	nop			; (mov r8, r8)
 8004374:	46bd      	mov	sp, r7
 8004376:	b00a      	add	sp, #40	; 0x28
 8004378:	bd80      	pop	{r7, pc}
 800437a:	46c0      	nop			; (mov r8, r8)
 800437c:	20000250 	.word	0x20000250
 8004380:	40011400 	.word	0x40011400
 8004384:	0000077f 	.word	0x0000077f

08004388 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800438c:	4b0f      	ldr	r3, [pc, #60]	; (80043cc <MX_USB_PCD_Init+0x44>)
 800438e:	4a10      	ldr	r2, [pc, #64]	; (80043d0 <MX_USB_PCD_Init+0x48>)
 8004390:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004392:	4b0e      	ldr	r3, [pc, #56]	; (80043cc <MX_USB_PCD_Init+0x44>)
 8004394:	2208      	movs	r2, #8
 8004396:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8004398:	4b0c      	ldr	r3, [pc, #48]	; (80043cc <MX_USB_PCD_Init+0x44>)
 800439a:	2202      	movs	r2, #2
 800439c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800439e:	4b0b      	ldr	r3, [pc, #44]	; (80043cc <MX_USB_PCD_Init+0x44>)
 80043a0:	2202      	movs	r2, #2
 80043a2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80043a4:	4b09      	ldr	r3, [pc, #36]	; (80043cc <MX_USB_PCD_Init+0x44>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80043aa:	4b08      	ldr	r3, [pc, #32]	; (80043cc <MX_USB_PCD_Init+0x44>)
 80043ac:	2200      	movs	r2, #0
 80043ae:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80043b0:	4b06      	ldr	r3, [pc, #24]	; (80043cc <MX_USB_PCD_Init+0x44>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80043b6:	4b05      	ldr	r3, [pc, #20]	; (80043cc <MX_USB_PCD_Init+0x44>)
 80043b8:	0018      	movs	r0, r3
 80043ba:	f004 fb35 	bl	8008a28 <HAL_PCD_Init>
 80043be:	1e03      	subs	r3, r0, #0
 80043c0:	d001      	beq.n	80043c6 <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 80043c2:	f000 f8df 	bl	8004584 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80043c6:	46c0      	nop			; (mov r8, r8)
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	20000334 	.word	0x20000334
 80043d0:	40005c00 	.word	0x40005c00

080043d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80043da:	4b0c      	ldr	r3, [pc, #48]	; (800440c <MX_DMA_Init+0x38>)
 80043dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043de:	4b0b      	ldr	r3, [pc, #44]	; (800440c <MX_DMA_Init+0x38>)
 80043e0:	2101      	movs	r1, #1
 80043e2:	430a      	orrs	r2, r1
 80043e4:	631a      	str	r2, [r3, #48]	; 0x30
 80043e6:	4b09      	ldr	r3, [pc, #36]	; (800440c <MX_DMA_Init+0x38>)
 80043e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ea:	2201      	movs	r2, #1
 80043ec:	4013      	ands	r3, r2
 80043ee:	607b      	str	r3, [r7, #4]
 80043f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80043f2:	2200      	movs	r2, #0
 80043f4:	2100      	movs	r1, #0
 80043f6:	200b      	movs	r0, #11
 80043f8:	f003 ff00 	bl	80081fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80043fc:	200b      	movs	r0, #11
 80043fe:	f003 ff12 	bl	8008226 <HAL_NVIC_EnableIRQ>

}
 8004402:	46c0      	nop			; (mov r8, r8)
 8004404:	46bd      	mov	sp, r7
 8004406:	b002      	add	sp, #8
 8004408:	bd80      	pop	{r7, pc}
 800440a:	46c0      	nop			; (mov r8, r8)
 800440c:	40021000 	.word	0x40021000

08004410 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004410:	b590      	push	{r4, r7, lr}
 8004412:	b089      	sub	sp, #36	; 0x24
 8004414:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004416:	240c      	movs	r4, #12
 8004418:	193b      	adds	r3, r7, r4
 800441a:	0018      	movs	r0, r3
 800441c:	2314      	movs	r3, #20
 800441e:	001a      	movs	r2, r3
 8004420:	2100      	movs	r1, #0
 8004422:	f007 fe9e 	bl	800c162 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004426:	4b52      	ldr	r3, [pc, #328]	; (8004570 <MX_GPIO_Init+0x160>)
 8004428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800442a:	4b51      	ldr	r3, [pc, #324]	; (8004570 <MX_GPIO_Init+0x160>)
 800442c:	2104      	movs	r1, #4
 800442e:	430a      	orrs	r2, r1
 8004430:	62da      	str	r2, [r3, #44]	; 0x2c
 8004432:	4b4f      	ldr	r3, [pc, #316]	; (8004570 <MX_GPIO_Init+0x160>)
 8004434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004436:	2204      	movs	r2, #4
 8004438:	4013      	ands	r3, r2
 800443a:	60bb      	str	r3, [r7, #8]
 800443c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800443e:	4b4c      	ldr	r3, [pc, #304]	; (8004570 <MX_GPIO_Init+0x160>)
 8004440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004442:	4b4b      	ldr	r3, [pc, #300]	; (8004570 <MX_GPIO_Init+0x160>)
 8004444:	2101      	movs	r1, #1
 8004446:	430a      	orrs	r2, r1
 8004448:	62da      	str	r2, [r3, #44]	; 0x2c
 800444a:	4b49      	ldr	r3, [pc, #292]	; (8004570 <MX_GPIO_Init+0x160>)
 800444c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444e:	2201      	movs	r2, #1
 8004450:	4013      	ands	r3, r2
 8004452:	607b      	str	r3, [r7, #4]
 8004454:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004456:	4b46      	ldr	r3, [pc, #280]	; (8004570 <MX_GPIO_Init+0x160>)
 8004458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800445a:	4b45      	ldr	r3, [pc, #276]	; (8004570 <MX_GPIO_Init+0x160>)
 800445c:	2102      	movs	r1, #2
 800445e:	430a      	orrs	r2, r1
 8004460:	62da      	str	r2, [r3, #44]	; 0x2c
 8004462:	4b43      	ldr	r3, [pc, #268]	; (8004570 <MX_GPIO_Init+0x160>)
 8004464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004466:	2202      	movs	r2, #2
 8004468:	4013      	ands	r3, r2
 800446a:	603b      	str	r3, [r7, #0]
 800446c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ADC_DIV_EN_Pin|MOTOR_EN_Pin|LED1_Pin|LED2_Pin
 800446e:	23a0      	movs	r3, #160	; 0xa0
 8004470:	05db      	lsls	r3, r3, #23
 8004472:	2200      	movs	r2, #0
 8004474:	21f2      	movs	r1, #242	; 0xf2
 8004476:	0018      	movs	r0, r3
 8004478:	f004 fa82 	bl	8008980 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PS_EN_GPIO_Port, PS_EN_Pin, GPIO_PIN_SET);
 800447c:	23a0      	movs	r3, #160	; 0xa0
 800447e:	05db      	lsls	r3, r3, #23
 8004480:	2201      	movs	r2, #1
 8004482:	2104      	movs	r1, #4
 8004484:	0018      	movs	r0, r3
 8004486:	f004 fa7b 	bl	8008980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 800448a:	2380      	movs	r3, #128	; 0x80
 800448c:	01db      	lsls	r3, r3, #7
 800448e:	4839      	ldr	r0, [pc, #228]	; (8004574 <MX_GPIO_Init+0x164>)
 8004490:	2200      	movs	r2, #0
 8004492:	0019      	movs	r1, r3
 8004494:	f004 fa74 	bl	8008980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 8004498:	4b37      	ldr	r3, [pc, #220]	; (8004578 <MX_GPIO_Init+0x168>)
 800449a:	2201      	movs	r2, #1
 800449c:	2180      	movs	r1, #128	; 0x80
 800449e:	0018      	movs	r0, r3
 80044a0:	f004 fa6e 	bl	8008980 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADC_DIV_EN_Pin PS_EN_Pin MOTOR_EN_Pin LED1_Pin
                           LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = ADC_DIV_EN_Pin|PS_EN_Pin|MOTOR_EN_Pin|LED1_Pin
 80044a4:	193b      	adds	r3, r7, r4
 80044a6:	22f6      	movs	r2, #246	; 0xf6
 80044a8:	601a      	str	r2, [r3, #0]
                          |LED2_Pin|LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044aa:	193b      	adds	r3, r7, r4
 80044ac:	2201      	movs	r2, #1
 80044ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044b0:	193b      	adds	r3, r7, r4
 80044b2:	2200      	movs	r2, #0
 80044b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044b6:	193b      	adds	r3, r7, r4
 80044b8:	2200      	movs	r2, #0
 80044ba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044bc:	193a      	adds	r2, r7, r4
 80044be:	23a0      	movs	r3, #160	; 0xa0
 80044c0:	05db      	lsls	r3, r3, #23
 80044c2:	0011      	movs	r1, r2
 80044c4:	0018      	movs	r0, r3
 80044c6:	f004 f8dd 	bl	8008684 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11;
 80044ca:	193b      	adds	r3, r7, r4
 80044cc:	4a2b      	ldr	r2, [pc, #172]	; (800457c <MX_GPIO_Init+0x16c>)
 80044ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80044d0:	193b      	adds	r3, r7, r4
 80044d2:	4a2b      	ldr	r2, [pc, #172]	; (8004580 <MX_GPIO_Init+0x170>)
 80044d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d6:	193b      	adds	r3, r7, r4
 80044d8:	2200      	movs	r2, #0
 80044da:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044dc:	193b      	adds	r3, r7, r4
 80044de:	4a25      	ldr	r2, [pc, #148]	; (8004574 <MX_GPIO_Init+0x164>)
 80044e0:	0019      	movs	r1, r3
 80044e2:	0010      	movs	r0, r2
 80044e4:	f004 f8ce 	bl	8008684 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 80044e8:	0021      	movs	r1, r4
 80044ea:	187b      	adds	r3, r7, r1
 80044ec:	2280      	movs	r2, #128	; 0x80
 80044ee:	01d2      	lsls	r2, r2, #7
 80044f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044f2:	187b      	adds	r3, r7, r1
 80044f4:	2201      	movs	r2, #1
 80044f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044f8:	187b      	adds	r3, r7, r1
 80044fa:	2200      	movs	r2, #0
 80044fc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044fe:	187b      	adds	r3, r7, r1
 8004500:	2203      	movs	r2, #3
 8004502:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 8004504:	000c      	movs	r4, r1
 8004506:	187b      	adds	r3, r7, r1
 8004508:	4a1a      	ldr	r2, [pc, #104]	; (8004574 <MX_GPIO_Init+0x164>)
 800450a:	0019      	movs	r1, r3
 800450c:	0010      	movs	r0, r2
 800450e:	f004 f8b9 	bl	8008684 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8004512:	0021      	movs	r1, r4
 8004514:	187b      	adds	r3, r7, r1
 8004516:	2280      	movs	r2, #128	; 0x80
 8004518:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800451a:	187b      	adds	r3, r7, r1
 800451c:	2201      	movs	r2, #1
 800451e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004520:	187b      	adds	r3, r7, r1
 8004522:	2200      	movs	r2, #0
 8004524:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004526:	187b      	adds	r3, r7, r1
 8004528:	2200      	movs	r2, #0
 800452a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 800452c:	187b      	adds	r3, r7, r1
 800452e:	4a12      	ldr	r2, [pc, #72]	; (8004578 <MX_GPIO_Init+0x168>)
 8004530:	0019      	movs	r1, r3
 8004532:	0010      	movs	r0, r2
 8004534:	f004 f8a6 	bl	8008684 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8004538:	2200      	movs	r2, #0
 800453a:	2100      	movs	r1, #0
 800453c:	2005      	movs	r0, #5
 800453e:	f003 fe5d 	bl	80081fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8004542:	2005      	movs	r0, #5
 8004544:	f003 fe6f 	bl	8008226 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8004548:	2200      	movs	r2, #0
 800454a:	2100      	movs	r1, #0
 800454c:	2006      	movs	r0, #6
 800454e:	f003 fe55 	bl	80081fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8004552:	2006      	movs	r0, #6
 8004554:	f003 fe67 	bl	8008226 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8004558:	2200      	movs	r2, #0
 800455a:	2100      	movs	r1, #0
 800455c:	2007      	movs	r0, #7
 800455e:	f003 fe4d 	bl	80081fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8004562:	2007      	movs	r0, #7
 8004564:	f003 fe5f 	bl	8008226 <HAL_NVIC_EnableIRQ>

}
 8004568:	46c0      	nop			; (mov r8, r8)
 800456a:	46bd      	mov	sp, r7
 800456c:	b009      	add	sp, #36	; 0x24
 800456e:	bd90      	pop	{r4, r7, pc}
 8004570:	40021000 	.word	0x40021000
 8004574:	50000400 	.word	0x50000400
 8004578:	50000800 	.word	0x50000800
 800457c:	00000c06 	.word	0x00000c06
 8004580:	10110000 	.word	0x10110000

08004584 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004588:	46c0      	nop			; (mov r8, r8)
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
	...

08004590 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004594:	4b07      	ldr	r3, [pc, #28]	; (80045b4 <HAL_MspInit+0x24>)
 8004596:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004598:	4b06      	ldr	r3, [pc, #24]	; (80045b4 <HAL_MspInit+0x24>)
 800459a:	2101      	movs	r1, #1
 800459c:	430a      	orrs	r2, r1
 800459e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80045a0:	4b04      	ldr	r3, [pc, #16]	; (80045b4 <HAL_MspInit+0x24>)
 80045a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045a4:	4b03      	ldr	r3, [pc, #12]	; (80045b4 <HAL_MspInit+0x24>)
 80045a6:	2180      	movs	r1, #128	; 0x80
 80045a8:	0549      	lsls	r1, r1, #21
 80045aa:	430a      	orrs	r2, r1
 80045ac:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045ae:	46c0      	nop			; (mov r8, r8)
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	40021000 	.word	0x40021000

080045b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b088      	sub	sp, #32
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045c0:	230c      	movs	r3, #12
 80045c2:	18fb      	adds	r3, r7, r3
 80045c4:	0018      	movs	r0, r3
 80045c6:	2314      	movs	r3, #20
 80045c8:	001a      	movs	r2, r3
 80045ca:	2100      	movs	r1, #0
 80045cc:	f007 fdc9 	bl	800c162 <memset>
  if(hadc->Instance==ADC1)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a19      	ldr	r2, [pc, #100]	; (800463c <HAL_ADC_MspInit+0x84>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d12b      	bne.n	8004632 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80045da:	4b19      	ldr	r3, [pc, #100]	; (8004640 <HAL_ADC_MspInit+0x88>)
 80045dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045de:	4b18      	ldr	r3, [pc, #96]	; (8004640 <HAL_ADC_MspInit+0x88>)
 80045e0:	2180      	movs	r1, #128	; 0x80
 80045e2:	0089      	lsls	r1, r1, #2
 80045e4:	430a      	orrs	r2, r1
 80045e6:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045e8:	4b15      	ldr	r3, [pc, #84]	; (8004640 <HAL_ADC_MspInit+0x88>)
 80045ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ec:	4b14      	ldr	r3, [pc, #80]	; (8004640 <HAL_ADC_MspInit+0x88>)
 80045ee:	2101      	movs	r1, #1
 80045f0:	430a      	orrs	r2, r1
 80045f2:	62da      	str	r2, [r3, #44]	; 0x2c
 80045f4:	4b12      	ldr	r3, [pc, #72]	; (8004640 <HAL_ADC_MspInit+0x88>)
 80045f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f8:	2201      	movs	r2, #1
 80045fa:	4013      	ands	r3, r2
 80045fc:	60bb      	str	r3, [r7, #8]
 80045fe:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004600:	210c      	movs	r1, #12
 8004602:	187b      	adds	r3, r7, r1
 8004604:	2201      	movs	r2, #1
 8004606:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004608:	187b      	adds	r3, r7, r1
 800460a:	2203      	movs	r2, #3
 800460c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800460e:	187b      	adds	r3, r7, r1
 8004610:	2200      	movs	r2, #0
 8004612:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004614:	187a      	adds	r2, r7, r1
 8004616:	23a0      	movs	r3, #160	; 0xa0
 8004618:	05db      	lsls	r3, r3, #23
 800461a:	0011      	movs	r1, r2
 800461c:	0018      	movs	r0, r3
 800461e:	f004 f831 	bl	8008684 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8004622:	2200      	movs	r2, #0
 8004624:	2100      	movs	r1, #0
 8004626:	200c      	movs	r0, #12
 8004628:	f003 fde8 	bl	80081fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 800462c:	200c      	movs	r0, #12
 800462e:	f003 fdfa 	bl	8008226 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004632:	46c0      	nop			; (mov r8, r8)
 8004634:	46bd      	mov	sp, r7
 8004636:	b008      	add	sp, #32
 8004638:	bd80      	pop	{r7, pc}
 800463a:	46c0      	nop			; (mov r8, r8)
 800463c:	40012400 	.word	0x40012400
 8004640:	40021000 	.word	0x40021000

08004644 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a0a      	ldr	r2, [pc, #40]	; (800467c <HAL_RTC_MspInit+0x38>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d10e      	bne.n	8004674 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004656:	4b0a      	ldr	r3, [pc, #40]	; (8004680 <HAL_RTC_MspInit+0x3c>)
 8004658:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800465a:	4b09      	ldr	r3, [pc, #36]	; (8004680 <HAL_RTC_MspInit+0x3c>)
 800465c:	2180      	movs	r1, #128	; 0x80
 800465e:	02c9      	lsls	r1, r1, #11
 8004660:	430a      	orrs	r2, r1
 8004662:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8004664:	2200      	movs	r2, #0
 8004666:	2100      	movs	r1, #0
 8004668:	2002      	movs	r0, #2
 800466a:	f003 fdc7 	bl	80081fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800466e:	2002      	movs	r0, #2
 8004670:	f003 fdd9 	bl	8008226 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004674:	46c0      	nop			; (mov r8, r8)
 8004676:	46bd      	mov	sp, r7
 8004678:	b002      	add	sp, #8
 800467a:	bd80      	pop	{r7, pc}
 800467c:	40002800 	.word	0x40002800
 8004680:	40021000 	.word	0x40021000

08004684 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b088      	sub	sp, #32
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800468c:	230c      	movs	r3, #12
 800468e:	18fb      	adds	r3, r7, r3
 8004690:	0018      	movs	r0, r3
 8004692:	2314      	movs	r3, #20
 8004694:	001a      	movs	r2, r3
 8004696:	2100      	movs	r1, #0
 8004698:	f007 fd63 	bl	800c162 <memset>
  if(hspi->Instance==SPI2)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a31      	ldr	r2, [pc, #196]	; (8004768 <HAL_SPI_MspInit+0xe4>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d15c      	bne.n	8004760 <HAL_SPI_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80046a6:	4b31      	ldr	r3, [pc, #196]	; (800476c <HAL_SPI_MspInit+0xe8>)
 80046a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046aa:	4b30      	ldr	r3, [pc, #192]	; (800476c <HAL_SPI_MspInit+0xe8>)
 80046ac:	2180      	movs	r1, #128	; 0x80
 80046ae:	01c9      	lsls	r1, r1, #7
 80046b0:	430a      	orrs	r2, r1
 80046b2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046b4:	4b2d      	ldr	r3, [pc, #180]	; (800476c <HAL_SPI_MspInit+0xe8>)
 80046b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046b8:	4b2c      	ldr	r3, [pc, #176]	; (800476c <HAL_SPI_MspInit+0xe8>)
 80046ba:	2102      	movs	r1, #2
 80046bc:	430a      	orrs	r2, r1
 80046be:	62da      	str	r2, [r3, #44]	; 0x2c
 80046c0:	4b2a      	ldr	r3, [pc, #168]	; (800476c <HAL_SPI_MspInit+0xe8>)
 80046c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c4:	2202      	movs	r2, #2
 80046c6:	4013      	ands	r3, r2
 80046c8:	60bb      	str	r3, [r7, #8]
 80046ca:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80046cc:	210c      	movs	r1, #12
 80046ce:	187b      	adds	r3, r7, r1
 80046d0:	22b0      	movs	r2, #176	; 0xb0
 80046d2:	0212      	lsls	r2, r2, #8
 80046d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046d6:	187b      	adds	r3, r7, r1
 80046d8:	2202      	movs	r2, #2
 80046da:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046dc:	187b      	adds	r3, r7, r1
 80046de:	2200      	movs	r2, #0
 80046e0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046e2:	187b      	adds	r3, r7, r1
 80046e4:	2203      	movs	r2, #3
 80046e6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80046e8:	187b      	adds	r3, r7, r1
 80046ea:	2200      	movs	r2, #0
 80046ec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046ee:	187b      	adds	r3, r7, r1
 80046f0:	4a1f      	ldr	r2, [pc, #124]	; (8004770 <HAL_SPI_MspInit+0xec>)
 80046f2:	0019      	movs	r1, r3
 80046f4:	0010      	movs	r0, r2
 80046f6:	f003 ffc5 	bl	8008684 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80046fa:	4b1e      	ldr	r3, [pc, #120]	; (8004774 <HAL_SPI_MspInit+0xf0>)
 80046fc:	4a1e      	ldr	r2, [pc, #120]	; (8004778 <HAL_SPI_MspInit+0xf4>)
 80046fe:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_2;
 8004700:	4b1c      	ldr	r3, [pc, #112]	; (8004774 <HAL_SPI_MspInit+0xf0>)
 8004702:	2202      	movs	r2, #2
 8004704:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004706:	4b1b      	ldr	r3, [pc, #108]	; (8004774 <HAL_SPI_MspInit+0xf0>)
 8004708:	2210      	movs	r2, #16
 800470a:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800470c:	4b19      	ldr	r3, [pc, #100]	; (8004774 <HAL_SPI_MspInit+0xf0>)
 800470e:	2200      	movs	r2, #0
 8004710:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_DISABLE;
 8004712:	4b18      	ldr	r3, [pc, #96]	; (8004774 <HAL_SPI_MspInit+0xf0>)
 8004714:	2200      	movs	r2, #0
 8004716:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004718:	4b16      	ldr	r3, [pc, #88]	; (8004774 <HAL_SPI_MspInit+0xf0>)
 800471a:	2280      	movs	r2, #128	; 0x80
 800471c:	0052      	lsls	r2, r2, #1
 800471e:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004720:	4b14      	ldr	r3, [pc, #80]	; (8004774 <HAL_SPI_MspInit+0xf0>)
 8004722:	2280      	movs	r2, #128	; 0x80
 8004724:	00d2      	lsls	r2, r2, #3
 8004726:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8004728:	4b12      	ldr	r3, [pc, #72]	; (8004774 <HAL_SPI_MspInit+0xf0>)
 800472a:	2200      	movs	r2, #0
 800472c:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800472e:	4b11      	ldr	r3, [pc, #68]	; (8004774 <HAL_SPI_MspInit+0xf0>)
 8004730:	2200      	movs	r2, #0
 8004732:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8004734:	4b0f      	ldr	r3, [pc, #60]	; (8004774 <HAL_SPI_MspInit+0xf0>)
 8004736:	0018      	movs	r0, r3
 8004738:	f003 fda2 	bl	8008280 <HAL_DMA_Init>
 800473c:	1e03      	subs	r3, r0, #0
 800473e:	d001      	beq.n	8004744 <HAL_SPI_MspInit+0xc0>
    {
      Error_Handler();
 8004740:	f7ff ff20 	bl	8004584 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a0b      	ldr	r2, [pc, #44]	; (8004774 <HAL_SPI_MspInit+0xf0>)
 8004748:	649a      	str	r2, [r3, #72]	; 0x48
 800474a:	4b0a      	ldr	r3, [pc, #40]	; (8004774 <HAL_SPI_MspInit+0xf0>)
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8004750:	2200      	movs	r2, #0
 8004752:	2100      	movs	r1, #0
 8004754:	201a      	movs	r0, #26
 8004756:	f003 fd51 	bl	80081fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800475a:	201a      	movs	r0, #26
 800475c:	f003 fd63 	bl	8008226 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004760:	46c0      	nop			; (mov r8, r8)
 8004762:	46bd      	mov	sp, r7
 8004764:	b008      	add	sp, #32
 8004766:	bd80      	pop	{r7, pc}
 8004768:	40003800 	.word	0x40003800
 800476c:	40021000 	.word	0x40021000
 8004770:	50000400 	.word	0x50000400
 8004774:	200002ec 	.word	0x200002ec
 8004778:	40020058 	.word	0x40020058

0800477c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	2380      	movs	r3, #128	; 0x80
 800478a:	05db      	lsls	r3, r3, #23
 800478c:	429a      	cmp	r2, r3
 800478e:	d10e      	bne.n	80047ae <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004790:	4b28      	ldr	r3, [pc, #160]	; (8004834 <HAL_TIM_Base_MspInit+0xb8>)
 8004792:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004794:	4b27      	ldr	r3, [pc, #156]	; (8004834 <HAL_TIM_Base_MspInit+0xb8>)
 8004796:	2101      	movs	r1, #1
 8004798:	430a      	orrs	r2, r1
 800479a:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800479c:	2200      	movs	r2, #0
 800479e:	2100      	movs	r1, #0
 80047a0:	200f      	movs	r0, #15
 80047a2:	f003 fd2b 	bl	80081fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80047a6:	200f      	movs	r0, #15
 80047a8:	f003 fd3d 	bl	8008226 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }

}
 80047ac:	e03e      	b.n	800482c <HAL_TIM_Base_MspInit+0xb0>
  else if(htim_base->Instance==TIM3)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a21      	ldr	r2, [pc, #132]	; (8004838 <HAL_TIM_Base_MspInit+0xbc>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d106      	bne.n	80047c6 <HAL_TIM_Base_MspInit+0x4a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80047b8:	4b1e      	ldr	r3, [pc, #120]	; (8004834 <HAL_TIM_Base_MspInit+0xb8>)
 80047ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047bc:	4b1d      	ldr	r3, [pc, #116]	; (8004834 <HAL_TIM_Base_MspInit+0xb8>)
 80047be:	2102      	movs	r1, #2
 80047c0:	430a      	orrs	r2, r1
 80047c2:	639a      	str	r2, [r3, #56]	; 0x38
}
 80047c4:	e032      	b.n	800482c <HAL_TIM_Base_MspInit+0xb0>
  else if(htim_base->Instance==TIM6)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a1c      	ldr	r2, [pc, #112]	; (800483c <HAL_TIM_Base_MspInit+0xc0>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d106      	bne.n	80047de <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80047d0:	4b18      	ldr	r3, [pc, #96]	; (8004834 <HAL_TIM_Base_MspInit+0xb8>)
 80047d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047d4:	4b17      	ldr	r3, [pc, #92]	; (8004834 <HAL_TIM_Base_MspInit+0xb8>)
 80047d6:	2110      	movs	r1, #16
 80047d8:	430a      	orrs	r2, r1
 80047da:	639a      	str	r2, [r3, #56]	; 0x38
}
 80047dc:	e026      	b.n	800482c <HAL_TIM_Base_MspInit+0xb0>
  else if(htim_base->Instance==TIM21)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a17      	ldr	r2, [pc, #92]	; (8004840 <HAL_TIM_Base_MspInit+0xc4>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d10e      	bne.n	8004806 <HAL_TIM_Base_MspInit+0x8a>
    __HAL_RCC_TIM21_CLK_ENABLE();
 80047e8:	4b12      	ldr	r3, [pc, #72]	; (8004834 <HAL_TIM_Base_MspInit+0xb8>)
 80047ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047ec:	4b11      	ldr	r3, [pc, #68]	; (8004834 <HAL_TIM_Base_MspInit+0xb8>)
 80047ee:	2104      	movs	r1, #4
 80047f0:	430a      	orrs	r2, r1
 80047f2:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 80047f4:	2200      	movs	r2, #0
 80047f6:	2100      	movs	r1, #0
 80047f8:	2014      	movs	r0, #20
 80047fa:	f003 fcff 	bl	80081fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 80047fe:	2014      	movs	r0, #20
 8004800:	f003 fd11 	bl	8008226 <HAL_NVIC_EnableIRQ>
}
 8004804:	e012      	b.n	800482c <HAL_TIM_Base_MspInit+0xb0>
  else if(htim_base->Instance==TIM22)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a0e      	ldr	r2, [pc, #56]	; (8004844 <HAL_TIM_Base_MspInit+0xc8>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d10d      	bne.n	800482c <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM22_CLK_ENABLE();
 8004810:	4b08      	ldr	r3, [pc, #32]	; (8004834 <HAL_TIM_Base_MspInit+0xb8>)
 8004812:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004814:	4b07      	ldr	r3, [pc, #28]	; (8004834 <HAL_TIM_Base_MspInit+0xb8>)
 8004816:	2120      	movs	r1, #32
 8004818:	430a      	orrs	r2, r1
 800481a:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM22_IRQn, 0, 0);
 800481c:	2200      	movs	r2, #0
 800481e:	2100      	movs	r1, #0
 8004820:	2016      	movs	r0, #22
 8004822:	f003 fceb 	bl	80081fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM22_IRQn);
 8004826:	2016      	movs	r0, #22
 8004828:	f003 fcfd 	bl	8008226 <HAL_NVIC_EnableIRQ>
}
 800482c:	46c0      	nop			; (mov r8, r8)
 800482e:	46bd      	mov	sp, r7
 8004830:	b002      	add	sp, #8
 8004832:	bd80      	pop	{r7, pc}
 8004834:	40021000 	.word	0x40021000
 8004838:	40000400 	.word	0x40000400
 800483c:	40001000 	.word	0x40001000
 8004840:	40010800 	.word	0x40010800
 8004844:	40011400 	.word	0x40011400

08004848 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b088      	sub	sp, #32
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004850:	230c      	movs	r3, #12
 8004852:	18fb      	adds	r3, r7, r3
 8004854:	0018      	movs	r0, r3
 8004856:	2314      	movs	r3, #20
 8004858:	001a      	movs	r2, r3
 800485a:	2100      	movs	r1, #0
 800485c:	f007 fc81 	bl	800c162 <memset>
  if(htim->Instance==TIM3)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a14      	ldr	r2, [pc, #80]	; (80048b8 <HAL_TIM_MspPostInit+0x70>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d121      	bne.n	80048ae <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800486a:	4b14      	ldr	r3, [pc, #80]	; (80048bc <HAL_TIM_MspPostInit+0x74>)
 800486c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800486e:	4b13      	ldr	r3, [pc, #76]	; (80048bc <HAL_TIM_MspPostInit+0x74>)
 8004870:	2104      	movs	r1, #4
 8004872:	430a      	orrs	r2, r1
 8004874:	62da      	str	r2, [r3, #44]	; 0x2c
 8004876:	4b11      	ldr	r3, [pc, #68]	; (80048bc <HAL_TIM_MspPostInit+0x74>)
 8004878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487a:	2204      	movs	r2, #4
 800487c:	4013      	ands	r3, r2
 800487e:	60bb      	str	r3, [r7, #8]
 8004880:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004882:	210c      	movs	r1, #12
 8004884:	187b      	adds	r3, r7, r1
 8004886:	2240      	movs	r2, #64	; 0x40
 8004888:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800488a:	187b      	adds	r3, r7, r1
 800488c:	2202      	movs	r2, #2
 800488e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004890:	187b      	adds	r3, r7, r1
 8004892:	2200      	movs	r2, #0
 8004894:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004896:	187b      	adds	r3, r7, r1
 8004898:	2200      	movs	r2, #0
 800489a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800489c:	187b      	adds	r3, r7, r1
 800489e:	2202      	movs	r2, #2
 80048a0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048a2:	187b      	adds	r3, r7, r1
 80048a4:	4a06      	ldr	r2, [pc, #24]	; (80048c0 <HAL_TIM_MspPostInit+0x78>)
 80048a6:	0019      	movs	r1, r3
 80048a8:	0010      	movs	r0, r2
 80048aa:	f003 feeb 	bl	8008684 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80048ae:	46c0      	nop			; (mov r8, r8)
 80048b0:	46bd      	mov	sp, r7
 80048b2:	b008      	add	sp, #32
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	46c0      	nop			; (mov r8, r8)
 80048b8:	40000400 	.word	0x40000400
 80048bc:	40021000 	.word	0x40021000
 80048c0:	50000800 	.word	0x50000800

080048c4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a06      	ldr	r2, [pc, #24]	; (80048ec <HAL_PCD_MspInit+0x28>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d106      	bne.n	80048e4 <HAL_PCD_MspInit+0x20>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80048d6:	4b06      	ldr	r3, [pc, #24]	; (80048f0 <HAL_PCD_MspInit+0x2c>)
 80048d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048da:	4b05      	ldr	r3, [pc, #20]	; (80048f0 <HAL_PCD_MspInit+0x2c>)
 80048dc:	2180      	movs	r1, #128	; 0x80
 80048de:	0409      	lsls	r1, r1, #16
 80048e0:	430a      	orrs	r2, r1
 80048e2:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80048e4:	46c0      	nop			; (mov r8, r8)
 80048e6:	46bd      	mov	sp, r7
 80048e8:	b002      	add	sp, #8
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	40005c00 	.word	0x40005c00
 80048f0:	40021000 	.word	0x40021000

080048f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80048f8:	46c0      	nop			; (mov r8, r8)
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80048fe:	b580      	push	{r7, lr}
 8004900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004902:	e7fe      	b.n	8004902 <HardFault_Handler+0x4>

08004904 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004908:	46c0      	nop			; (mov r8, r8)
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800490e:	b580      	push	{r7, lr}
 8004910:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004912:	46c0      	nop			; (mov r8, r8)
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800491c:	f002 fe2e 	bl	800757c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004920:	46c0      	nop			; (mov r8, r8)
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
	...

08004928 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800492c:	4b03      	ldr	r3, [pc, #12]	; (800493c <RTC_IRQHandler+0x14>)
 800492e:	0018      	movs	r0, r3
 8004930:	f005 fd5a 	bl	800a3e8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8004934:	46c0      	nop			; (mov r8, r8)
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	46c0      	nop			; (mov r8, r8)
 800493c:	2000028c 	.word	0x2000028c

08004940 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8004944:	2002      	movs	r0, #2
 8004946:	f004 f853 	bl	80089f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800494a:	46c0      	nop			; (mov r8, r8)
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8004954:	2004      	movs	r0, #4
 8004956:	f004 f84b 	bl	80089f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 800495a:	46c0      	nop			; (mov r8, r8)
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8004964:	2380      	movs	r3, #128	; 0x80
 8004966:	00db      	lsls	r3, r3, #3
 8004968:	0018      	movs	r0, r3
 800496a:	f004 f841 	bl	80089f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800496e:	2380      	movs	r3, #128	; 0x80
 8004970:	011b      	lsls	r3, r3, #4
 8004972:	0018      	movs	r0, r3
 8004974:	f004 f83c 	bl	80089f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8004978:	46c0      	nop			; (mov r8, r8)
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
	...

08004980 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8004984:	4b03      	ldr	r3, [pc, #12]	; (8004994 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 8004986:	0018      	movs	r0, r3
 8004988:	f003 fda0 	bl	80084cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800498c:	46c0      	nop			; (mov r8, r8)
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	46c0      	nop			; (mov r8, r8)
 8004994:	200002ec 	.word	0x200002ec

08004998 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 800499c:	4b03      	ldr	r3, [pc, #12]	; (80049ac <ADC1_COMP_IRQHandler+0x14>)
 800499e:	0018      	movs	r0, r3
 80049a0:	f003 f8d4 	bl	8007b4c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 80049a4:	46c0      	nop			; (mov r8, r8)
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	46c0      	nop			; (mov r8, r8)
 80049ac:	20000628 	.word	0x20000628

080049b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80049b4:	4b03      	ldr	r3, [pc, #12]	; (80049c4 <TIM2_IRQHandler+0x14>)
 80049b6:	0018      	movs	r0, r3
 80049b8:	f006 fe0c 	bl	800b5d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80049bc:	46c0      	nop			; (mov r8, r8)
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	46c0      	nop			; (mov r8, r8)
 80049c4:	200002b0 	.word	0x200002b0

080049c8 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 80049cc:	4b03      	ldr	r3, [pc, #12]	; (80049dc <TIM21_IRQHandler+0x14>)
 80049ce:	0018      	movs	r0, r3
 80049d0:	f006 fe00 	bl	800b5d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 80049d4:	46c0      	nop			; (mov r8, r8)
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	46c0      	nop			; (mov r8, r8)
 80049dc:	20000684 	.word	0x20000684

080049e0 <TIM22_IRQHandler>:

/**
  * @brief This function handles TIM22 global interrupt.
  */
void TIM22_IRQHandler(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM22_IRQn 0 */

  /* USER CODE END TIM22_IRQn 0 */
  HAL_TIM_IRQHandler(&htim22);
 80049e4:	4b03      	ldr	r3, [pc, #12]	; (80049f4 <TIM22_IRQHandler+0x14>)
 80049e6:	0018      	movs	r0, r3
 80049e8:	f006 fdf4 	bl	800b5d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM22_IRQn 1 */

  /* USER CODE END TIM22_IRQn 1 */
}
 80049ec:	46c0      	nop			; (mov r8, r8)
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	46c0      	nop			; (mov r8, r8)
 80049f4:	20000250 	.word	0x20000250

080049f8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80049fc:	4b03      	ldr	r3, [pc, #12]	; (8004a0c <SPI2_IRQHandler+0x14>)
 80049fe:	0018      	movs	r0, r3
 8004a00:	f006 f93c 	bl	800ac7c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8004a04:	46c0      	nop			; (mov r8, r8)
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	46c0      	nop			; (mov r8, r8)
 8004a0c:	200001bc 	.word	0x200001bc

08004a10 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004a18:	4b11      	ldr	r3, [pc, #68]	; (8004a60 <_sbrk+0x50>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d102      	bne.n	8004a26 <_sbrk+0x16>
		heap_end = &end;
 8004a20:	4b0f      	ldr	r3, [pc, #60]	; (8004a60 <_sbrk+0x50>)
 8004a22:	4a10      	ldr	r2, [pc, #64]	; (8004a64 <_sbrk+0x54>)
 8004a24:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004a26:	4b0e      	ldr	r3, [pc, #56]	; (8004a60 <_sbrk+0x50>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004a2c:	4b0c      	ldr	r3, [pc, #48]	; (8004a60 <_sbrk+0x50>)
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	18d3      	adds	r3, r2, r3
 8004a34:	466a      	mov	r2, sp
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d907      	bls.n	8004a4a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004a3a:	f007 fb5f 	bl	800c0fc <__errno>
 8004a3e:	0003      	movs	r3, r0
 8004a40:	220c      	movs	r2, #12
 8004a42:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8004a44:	2301      	movs	r3, #1
 8004a46:	425b      	negs	r3, r3
 8004a48:	e006      	b.n	8004a58 <_sbrk+0x48>
	}

	heap_end += incr;
 8004a4a:	4b05      	ldr	r3, [pc, #20]	; (8004a60 <_sbrk+0x50>)
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	18d2      	adds	r2, r2, r3
 8004a52:	4b03      	ldr	r3, [pc, #12]	; (8004a60 <_sbrk+0x50>)
 8004a54:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8004a56:	68fb      	ldr	r3, [r7, #12]
}
 8004a58:	0018      	movs	r0, r3
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	b004      	add	sp, #16
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	2000010c 	.word	0x2000010c
 8004a64:	200006c8 	.word	0x200006c8

08004a68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8004a6c:	4b17      	ldr	r3, [pc, #92]	; (8004acc <SystemInit+0x64>)
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	4b16      	ldr	r3, [pc, #88]	; (8004acc <SystemInit+0x64>)
 8004a72:	2180      	movs	r1, #128	; 0x80
 8004a74:	0049      	lsls	r1, r1, #1
 8004a76:	430a      	orrs	r2, r1
 8004a78:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8004a7a:	4b14      	ldr	r3, [pc, #80]	; (8004acc <SystemInit+0x64>)
 8004a7c:	68da      	ldr	r2, [r3, #12]
 8004a7e:	4b13      	ldr	r3, [pc, #76]	; (8004acc <SystemInit+0x64>)
 8004a80:	4913      	ldr	r1, [pc, #76]	; (8004ad0 <SystemInit+0x68>)
 8004a82:	400a      	ands	r2, r1
 8004a84:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8004a86:	4b11      	ldr	r3, [pc, #68]	; (8004acc <SystemInit+0x64>)
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	4b10      	ldr	r3, [pc, #64]	; (8004acc <SystemInit+0x64>)
 8004a8c:	4911      	ldr	r1, [pc, #68]	; (8004ad4 <SystemInit+0x6c>)
 8004a8e:	400a      	ands	r2, r1
 8004a90:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004a92:	4b0e      	ldr	r3, [pc, #56]	; (8004acc <SystemInit+0x64>)
 8004a94:	689a      	ldr	r2, [r3, #8]
 8004a96:	4b0d      	ldr	r3, [pc, #52]	; (8004acc <SystemInit+0x64>)
 8004a98:	2101      	movs	r1, #1
 8004a9a:	438a      	bics	r2, r1
 8004a9c:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8004a9e:	4b0b      	ldr	r3, [pc, #44]	; (8004acc <SystemInit+0x64>)
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	4b0a      	ldr	r3, [pc, #40]	; (8004acc <SystemInit+0x64>)
 8004aa4:	490c      	ldr	r1, [pc, #48]	; (8004ad8 <SystemInit+0x70>)
 8004aa6:	400a      	ands	r2, r1
 8004aa8:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8004aaa:	4b08      	ldr	r3, [pc, #32]	; (8004acc <SystemInit+0x64>)
 8004aac:	68da      	ldr	r2, [r3, #12]
 8004aae:	4b07      	ldr	r3, [pc, #28]	; (8004acc <SystemInit+0x64>)
 8004ab0:	490a      	ldr	r1, [pc, #40]	; (8004adc <SystemInit+0x74>)
 8004ab2:	400a      	ands	r2, r1
 8004ab4:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004ab6:	4b05      	ldr	r3, [pc, #20]	; (8004acc <SystemInit+0x64>)
 8004ab8:	2200      	movs	r2, #0
 8004aba:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004abc:	4b08      	ldr	r3, [pc, #32]	; (8004ae0 <SystemInit+0x78>)
 8004abe:	2280      	movs	r2, #128	; 0x80
 8004ac0:	0512      	lsls	r2, r2, #20
 8004ac2:	609a      	str	r2, [r3, #8]
#endif
}
 8004ac4:	46c0      	nop			; (mov r8, r8)
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	46c0      	nop			; (mov r8, r8)
 8004acc:	40021000 	.word	0x40021000
 8004ad0:	88ff400c 	.word	0x88ff400c
 8004ad4:	fef6fff6 	.word	0xfef6fff6
 8004ad8:	fffbffff 	.word	0xfffbffff
 8004adc:	ff02ffff 	.word	0xff02ffff
 8004ae0:	e000ed00 	.word	0xe000ed00

08004ae4 <HAL_TIM_PeriodElapsedCallback>:
static uint32_t stopwatchStartMarker = 0;
static uint32_t stopwatchPauseMarker = 0;
static uint8_t motorStateCounter = 0;

// called for a bunch of timers when timer has to circle back (arr->0, 0->arr)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
	// button's timer
	if (htim->Instance == TIM6) {
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a16      	ldr	r2, [pc, #88]	; (8004b4c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d11e      	bne.n	8004b34 <HAL_TIM_PeriodElapsedCallback+0x50>
		// stop timer, renable button interrupts, and clear pending
		HAL_TIM_Base_Stop_IT(htim);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	0018      	movs	r0, r3
 8004afa:	f006 fc1b 	bl	800b334 <HAL_TIM_Base_Stop_IT>
		HAL_NVIC_ClearPendingIRQ(EXTI2_3_IRQn);
 8004afe:	2006      	movs	r0, #6
 8004b00:	f003 fbae 	bl	8008260 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(EXTI4_15_IRQn);
 8004b04:	2007      	movs	r0, #7
 8004b06:	f003 fbab 	bl	8008260 <HAL_NVIC_ClearPendingIRQ>
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON1);
 8004b0a:	4b11      	ldr	r3, [pc, #68]	; (8004b50 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8004b0c:	2202      	movs	r2, #2
 8004b0e:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON2);
 8004b10:	4b0f      	ldr	r3, [pc, #60]	; (8004b50 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8004b12:	2204      	movs	r2, #4
 8004b14:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON3);
 8004b16:	4b0e      	ldr	r3, [pc, #56]	; (8004b50 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8004b18:	2280      	movs	r2, #128	; 0x80
 8004b1a:	00d2      	lsls	r2, r2, #3
 8004b1c:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON4);
 8004b1e:	4b0c      	ldr	r3, [pc, #48]	; (8004b50 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8004b20:	2280      	movs	r2, #128	; 0x80
 8004b22:	0112      	lsls	r2, r2, #4
 8004b24:	615a      	str	r2, [r3, #20]

		HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8004b26:	2006      	movs	r0, #6
 8004b28:	f003 fb7d 	bl	8008226 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8004b2c:	2007      	movs	r0, #7
 8004b2e:	f003 fb7a 	bl	8008226 <HAL_NVIC_EnableIRQ>
	// sampler's timer
	else if (htim->Instance == TIM22) {
		// set flag to start ADC sample
		canSampleBattery = 1;
	}
}
 8004b32:	e007      	b.n	8004b44 <HAL_TIM_PeriodElapsedCallback+0x60>
	else if (htim->Instance == TIM22) {
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a06      	ldr	r2, [pc, #24]	; (8004b54 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d102      	bne.n	8004b44 <HAL_TIM_PeriodElapsedCallback+0x60>
		canSampleBattery = 1;
 8004b3e:	4b06      	ldr	r3, [pc, #24]	; (8004b58 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8004b40:	2201      	movs	r2, #1
 8004b42:	701a      	strb	r2, [r3, #0]
}
 8004b44:	46c0      	nop			; (mov r8, r8)
 8004b46:	46bd      	mov	sp, r7
 8004b48:	b002      	add	sp, #8
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	40001000 	.word	0x40001000
 8004b50:	40010400 	.word	0x40010400
 8004b54:	40011400 	.word	0x40011400
 8004b58:	20000162 	.word	0x20000162

08004b5c <HAL_TIM_OC_DelayElapsedCallback>:

// called for a bunch of timers when channel value = counter value
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM21) {
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a46      	ldr	r2, [pc, #280]	; (8004c84 <HAL_TIM_OC_DelayElapsedCallback+0x128>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d139      	bne.n	8004be2 <HAL_TIM_OC_DelayElapsedCallback+0x86>
		// timer's channel
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	7e1b      	ldrb	r3, [r3, #24]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d122      	bne.n	8004bbc <HAL_TIM_OC_DelayElapsedCallback+0x60>
			updateFace.timer = 1;		// set update screen flag
 8004b76:	4b44      	ldr	r3, [pc, #272]	; (8004c88 <HAL_TIM_OC_DelayElapsedCallback+0x12c>)
 8004b78:	2201      	movs	r2, #1
 8004b7a:	705a      	strb	r2, [r3, #1]

			// decrement value if non-zero, else set done flag
			if (timerCounter != 1) --timerCounter;
 8004b7c:	4b43      	ldr	r3, [pc, #268]	; (8004c8c <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d005      	beq.n	8004b90 <HAL_TIM_OC_DelayElapsedCallback+0x34>
 8004b84:	4b41      	ldr	r3, [pc, #260]	; (8004c8c <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	1e5a      	subs	r2, r3, #1
 8004b8a:	4b40      	ldr	r3, [pc, #256]	; (8004c8c <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 8004b8c:	601a      	str	r2, [r3, #0]
				stopMotor(htim);
				break;
			default: break;
		}
	}
}
 8004b8e:	e074      	b.n	8004c7a <HAL_TIM_OC_DelayElapsedCallback+0x11e>
				--timerCounter;
 8004b90:	4b3e      	ldr	r3, [pc, #248]	; (8004c8c <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	1e5a      	subs	r2, r3, #1
 8004b96:	4b3d      	ldr	r3, [pc, #244]	; (8004c8c <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 8004b98:	601a      	str	r2, [r3, #0]
				isTimerDone = 1;
 8004b9a:	4b3d      	ldr	r3, [pc, #244]	; (8004c90 <HAL_TIM_OC_DelayElapsedCallback+0x134>)
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	701a      	strb	r2, [r3, #0]
				stopTimer(htim);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	0018      	movs	r0, r3
 8004ba4:	f000 f8f0 	bl	8004d88 <stopTimer>
				updateFace.timer = 1;
 8004ba8:	4b37      	ldr	r3, [pc, #220]	; (8004c88 <HAL_TIM_OC_DelayElapsedCallback+0x12c>)
 8004baa:	2201      	movs	r2, #1
 8004bac:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_TogglePin(LED2_PORT, LED2_PIN);
 8004bae:	23a0      	movs	r3, #160	; 0xa0
 8004bb0:	05db      	lsls	r3, r3, #23
 8004bb2:	2140      	movs	r1, #64	; 0x40
 8004bb4:	0018      	movs	r0, r3
 8004bb6:	f003 ff00 	bl	80089ba <HAL_GPIO_TogglePin>
}
 8004bba:	e05e      	b.n	8004c7a <HAL_TIM_OC_DelayElapsedCallback+0x11e>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	7e1b      	ldrb	r3, [r3, #24]
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	d15a      	bne.n	8004c7a <HAL_TIM_OC_DelayElapsedCallback+0x11e>
			updateFace.stopwatch = 1;
 8004bc4:	4b30      	ldr	r3, [pc, #192]	; (8004c88 <HAL_TIM_OC_DelayElapsedCallback+0x12c>)
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	70da      	strb	r2, [r3, #3]
			++stopwatchCounter;
 8004bca:	4b32      	ldr	r3, [pc, #200]	; (8004c94 <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	1c5a      	adds	r2, r3, #1
 8004bd0:	4b30      	ldr	r3, [pc, #192]	; (8004c94 <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 8004bd2:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(LED2_PORT, LED2_PIN);
 8004bd4:	23a0      	movs	r3, #160	; 0xa0
 8004bd6:	05db      	lsls	r3, r3, #23
 8004bd8:	2140      	movs	r1, #64	; 0x40
 8004bda:	0018      	movs	r0, r3
 8004bdc:	f003 feed 	bl	80089ba <HAL_GPIO_TogglePin>
}
 8004be0:	e04b      	b.n	8004c7a <HAL_TIM_OC_DelayElapsedCallback+0x11e>
	else if (htim->Instance == TIM2) {
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	2380      	movs	r3, #128	; 0x80
 8004be8:	05db      	lsls	r3, r3, #23
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d142      	bne.n	8004c74 <HAL_TIM_OC_DelayElapsedCallback+0x118>
		++motorStateCounter;
 8004bee:	4b2a      	ldr	r3, [pc, #168]	; (8004c98 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	b2da      	uxtb	r2, r3
 8004bf6:	4b28      	ldr	r3, [pc, #160]	; (8004c98 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8004bf8:	701a      	strb	r2, [r3, #0]
		switch(motorStateCounter) {
 8004bfa:	4b27      	ldr	r3, [pc, #156]	; (8004c98 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	2b06      	cmp	r3, #6
 8004c00:	d83a      	bhi.n	8004c78 <HAL_TIM_OC_DelayElapsedCallback+0x11c>
 8004c02:	009a      	lsls	r2, r3, #2
 8004c04:	4b25      	ldr	r3, [pc, #148]	; (8004c9c <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 8004c06:	18d3      	adds	r3, r2, r3
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	469f      	mov	pc, r3
			case 1: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET); break;
 8004c0c:	23a0      	movs	r3, #160	; 0xa0
 8004c0e:	05db      	lsls	r3, r3, #23
 8004c10:	2201      	movs	r2, #1
 8004c12:	2110      	movs	r1, #16
 8004c14:	0018      	movs	r0, r3
 8004c16:	f003 feb3 	bl	8008980 <HAL_GPIO_WritePin>
 8004c1a:	e02e      	b.n	8004c7a <HAL_TIM_OC_DelayElapsedCallback+0x11e>
			case 2: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_RESET); break;
 8004c1c:	23a0      	movs	r3, #160	; 0xa0
 8004c1e:	05db      	lsls	r3, r3, #23
 8004c20:	2200      	movs	r2, #0
 8004c22:	2110      	movs	r1, #16
 8004c24:	0018      	movs	r0, r3
 8004c26:	f003 feab 	bl	8008980 <HAL_GPIO_WritePin>
 8004c2a:	e026      	b.n	8004c7a <HAL_TIM_OC_DelayElapsedCallback+0x11e>
			case 3: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET); break;
 8004c2c:	23a0      	movs	r3, #160	; 0xa0
 8004c2e:	05db      	lsls	r3, r3, #23
 8004c30:	2201      	movs	r2, #1
 8004c32:	2110      	movs	r1, #16
 8004c34:	0018      	movs	r0, r3
 8004c36:	f003 fea3 	bl	8008980 <HAL_GPIO_WritePin>
 8004c3a:	e01e      	b.n	8004c7a <HAL_TIM_OC_DelayElapsedCallback+0x11e>
			case 4: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_RESET); break;
 8004c3c:	23a0      	movs	r3, #160	; 0xa0
 8004c3e:	05db      	lsls	r3, r3, #23
 8004c40:	2200      	movs	r2, #0
 8004c42:	2110      	movs	r1, #16
 8004c44:	0018      	movs	r0, r3
 8004c46:	f003 fe9b 	bl	8008980 <HAL_GPIO_WritePin>
 8004c4a:	e016      	b.n	8004c7a <HAL_TIM_OC_DelayElapsedCallback+0x11e>
			case 5: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET); break;
 8004c4c:	23a0      	movs	r3, #160	; 0xa0
 8004c4e:	05db      	lsls	r3, r3, #23
 8004c50:	2201      	movs	r2, #1
 8004c52:	2110      	movs	r1, #16
 8004c54:	0018      	movs	r0, r3
 8004c56:	f003 fe93 	bl	8008980 <HAL_GPIO_WritePin>
 8004c5a:	e00e      	b.n	8004c7a <HAL_TIM_OC_DelayElapsedCallback+0x11e>
				HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_RESET);
 8004c5c:	23a0      	movs	r3, #160	; 0xa0
 8004c5e:	05db      	lsls	r3, r3, #23
 8004c60:	2200      	movs	r2, #0
 8004c62:	2110      	movs	r1, #16
 8004c64:	0018      	movs	r0, r3
 8004c66:	f003 fe8b 	bl	8008980 <HAL_GPIO_WritePin>
				stopMotor(htim);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	0018      	movs	r0, r3
 8004c6e:	f000 f989 	bl	8004f84 <stopMotor>
				break;
 8004c72:	e002      	b.n	8004c7a <HAL_TIM_OC_DelayElapsedCallback+0x11e>
	}
 8004c74:	46c0      	nop			; (mov r8, r8)
 8004c76:	e000      	b.n	8004c7a <HAL_TIM_OC_DelayElapsedCallback+0x11e>
			default: break;
 8004c78:	46c0      	nop			; (mov r8, r8)
}
 8004c7a:	46c0      	nop			; (mov r8, r8)
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	b002      	add	sp, #8
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	46c0      	nop			; (mov r8, r8)
 8004c84:	40010800 	.word	0x40010800
 8004c88:	20000164 	.word	0x20000164
 8004c8c:	2000016c 	.word	0x2000016c
 8004c90:	20000170 	.word	0x20000170
 8004c94:	200001b8 	.word	0x200001b8
 8004c98:	20000120 	.word	0x20000120
 8004c9c:	0800d54c 	.word	0x0800d54c

08004ca0 <runTimer>:

// ---- important timer functions  ----
void runTimer(TIM_HandleTypeDef *htim) {
 8004ca0:	b590      	push	{r4, r7, lr}
 8004ca2:	b089      	sub	sp, #36	; 0x24
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef sConfig = {0};
 8004ca8:	2408      	movs	r4, #8
 8004caa:	193b      	adds	r3, r7, r4
 8004cac:	0018      	movs	r0, r3
 8004cae:	2310      	movs	r3, #16
 8004cb0:	001a      	movs	r2, r3
 8004cb2:	2100      	movs	r1, #0
 8004cb4:	f007 fa55 	bl	800c162 <memset>
	sConfig.OCMode = TIM_OCMODE_TIMING;
 8004cb8:	193b      	adds	r3, r7, r4
 8004cba:	2200      	movs	r2, #0
 8004cbc:	601a      	str	r2, [r3, #0]
	sConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004cbe:	193b      	adds	r3, r7, r4
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	609a      	str	r2, [r3, #8]
	sConfig.OCFastMode = TIM_OCFAST_DISABLE;
 8004cc4:	193b      	adds	r3, r7, r4
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	60da      	str	r2, [r3, #12]

	// calculating pulse/OC trigger
	if (isTimerPaused == 0) {		// 1st run, hasn't been paused yet
 8004cca:	4b1f      	ldr	r3, [pc, #124]	; (8004d48 <runTimer+0xa8>)
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d107      	bne.n	8004ce4 <runTimer+0x44>
		sConfig.Pulse = htim->Instance->CNT-1;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cda:	1e5a      	subs	r2, r3, #1
 8004cdc:	2308      	movs	r3, #8
 8004cde:	18fb      	adds	r3, r7, r3
 8004ce0:	605a      	str	r2, [r3, #4]
 8004ce2:	e021      	b.n	8004d28 <runTimer+0x88>
	}
	else {		// unpausing
		uint32_t temp = htim->Instance->CNT-1;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cea:	3b01      	subs	r3, #1
 8004cec:	61fb      	str	r3, [r7, #28]

		// count needed to get from pause marker to start marker - basically how many steps it would've taken to get to next cycle
		// shifted to account for negative behavior
		uint32_t diff = ((int)(timerStartMarker-timerPauseMarker)+0x8000) % 0x8000;
 8004cee:	4b17      	ldr	r3, [pc, #92]	; (8004d4c <runTimer+0xac>)
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	4b17      	ldr	r3, [pc, #92]	; (8004d50 <runTimer+0xb0>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	2280      	movs	r2, #128	; 0x80
 8004cfa:	0212      	lsls	r2, r2, #8
 8004cfc:	4694      	mov	ip, r2
 8004cfe:	4463      	add	r3, ip
 8004d00:	4a14      	ldr	r2, [pc, #80]	; (8004d54 <runTimer+0xb4>)
 8004d02:	4013      	ands	r3, r2
 8004d04:	d503      	bpl.n	8004d0e <runTimer+0x6e>
 8004d06:	3b01      	subs	r3, #1
 8004d08:	4a13      	ldr	r2, [pc, #76]	; (8004d58 <runTimer+0xb8>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	61bb      	str	r3, [r7, #24]
		sConfig.Pulse = (temp+diff) % 0x8000;
 8004d10:	69fa      	ldr	r2, [r7, #28]
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	18d3      	adds	r3, r2, r3
 8004d16:	045b      	lsls	r3, r3, #17
 8004d18:	0c5a      	lsrs	r2, r3, #17
 8004d1a:	2108      	movs	r1, #8
 8004d1c:	187b      	adds	r3, r7, r1
 8004d1e:	605a      	str	r2, [r3, #4]
		timerStartMarker = sConfig.Pulse;		// set new start marker
 8004d20:	187b      	adds	r3, r7, r1
 8004d22:	685a      	ldr	r2, [r3, #4]
 8004d24:	4b09      	ldr	r3, [pc, #36]	; (8004d4c <runTimer+0xac>)
 8004d26:	601a      	str	r2, [r3, #0]
	}

	HAL_TIM_OC_ConfigChannel(htim, &sConfig, TIM_CHANNEL_1);
 8004d28:	2308      	movs	r3, #8
 8004d2a:	18f9      	adds	r1, r7, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	0018      	movs	r0, r3
 8004d32:	f006 fd37 	bl	800b7a4 <HAL_TIM_OC_ConfigChannel>
	HAL_TIM_OC_Start_IT(htim, TIM_CHANNEL_1);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2100      	movs	r1, #0
 8004d3a:	0018      	movs	r0, r3
 8004d3c:	f006 fb50 	bl	800b3e0 <HAL_TIM_OC_Start_IT>
}
 8004d40:	46c0      	nop			; (mov r8, r8)
 8004d42:	46bd      	mov	sp, r7
 8004d44:	b009      	add	sp, #36	; 0x24
 8004d46:	bd90      	pop	{r4, r7, pc}
 8004d48:	200001b6 	.word	0x200001b6
 8004d4c:	20000110 	.word	0x20000110
 8004d50:	20000114 	.word	0x20000114
 8004d54:	80007fff 	.word	0x80007fff
 8004d58:	ffff8000 	.word	0xffff8000

08004d5c <pauseTimer>:

void pauseTimer(TIM_HandleTypeDef *htim) {
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
	// stop timer, but hold marker so you can track milliseconds to next second
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_1);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2100      	movs	r1, #0
 8004d68:	0018      	movs	r0, r3
 8004d6a:	f006 fb8b 	bl	800b484 <HAL_TIM_OC_Stop_IT>
	timerPauseMarker = htim->Instance->CNT-1;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d74:	1e5a      	subs	r2, r3, #1
 8004d76:	4b03      	ldr	r3, [pc, #12]	; (8004d84 <pauseTimer+0x28>)
 8004d78:	601a      	str	r2, [r3, #0]
}
 8004d7a:	46c0      	nop			; (mov r8, r8)
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	b002      	add	sp, #8
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	46c0      	nop			; (mov r8, r8)
 8004d84:	20000114 	.word	0x20000114

08004d88 <stopTimer>:

void stopTimer(TIM_HandleTypeDef *htim) {
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
	// clear everything
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_1);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2100      	movs	r1, #0
 8004d94:	0018      	movs	r0, r3
 8004d96:	f006 fb75 	bl	800b484 <HAL_TIM_OC_Stop_IT>
	timerStartMarker = 0;
 8004d9a:	4b05      	ldr	r3, [pc, #20]	; (8004db0 <stopTimer+0x28>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	601a      	str	r2, [r3, #0]
	timerPauseMarker = 0;
 8004da0:	4b04      	ldr	r3, [pc, #16]	; (8004db4 <stopTimer+0x2c>)
 8004da2:	2200      	movs	r2, #0
 8004da4:	601a      	str	r2, [r3, #0]
}
 8004da6:	46c0      	nop			; (mov r8, r8)
 8004da8:	46bd      	mov	sp, r7
 8004daa:	b002      	add	sp, #8
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	46c0      	nop			; (mov r8, r8)
 8004db0:	20000110 	.word	0x20000110
 8004db4:	20000114 	.word	0x20000114

08004db8 <runStopwatch>:

void runStopwatch(TIM_HandleTypeDef *htim) {
 8004db8:	b590      	push	{r4, r7, lr}
 8004dba:	b089      	sub	sp, #36	; 0x24
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef sConfig = {0};
 8004dc0:	2408      	movs	r4, #8
 8004dc2:	193b      	adds	r3, r7, r4
 8004dc4:	0018      	movs	r0, r3
 8004dc6:	2310      	movs	r3, #16
 8004dc8:	001a      	movs	r2, r3
 8004dca:	2100      	movs	r1, #0
 8004dcc:	f007 f9c9 	bl	800c162 <memset>
	sConfig.OCMode = TIM_OCMODE_TIMING;
 8004dd0:	193b      	adds	r3, r7, r4
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	601a      	str	r2, [r3, #0]
	sConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004dd6:	193b      	adds	r3, r7, r4
 8004dd8:	2200      	movs	r2, #0
 8004dda:	609a      	str	r2, [r3, #8]
	sConfig.OCFastMode = TIM_OCFAST_DISABLE;
 8004ddc:	193b      	adds	r3, r7, r4
 8004dde:	2200      	movs	r2, #0
 8004de0:	60da      	str	r2, [r3, #12]

	// calculating pulse/OC trigger
	if (isStopwatchPaused == 0) {		// 1st run, hasn't been paused yet
 8004de2:	4b23      	ldr	r3, [pc, #140]	; (8004e70 <runStopwatch+0xb8>)
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d10e      	bne.n	8004e0a <runStopwatch+0x52>
		stopwatchCounter = 0;
 8004dec:	4b21      	ldr	r3, [pc, #132]	; (8004e74 <runStopwatch+0xbc>)
 8004dee:	2200      	movs	r2, #0
 8004df0:	601a      	str	r2, [r3, #0]
		sConfig.Pulse = htim->Instance->CNT-1;		// 32-bit unsigned going into 16-bit unsigned. no need to cast since
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df8:	1e5a      	subs	r2, r3, #1
 8004dfa:	2108      	movs	r1, #8
 8004dfc:	187b      	adds	r3, r7, r1
 8004dfe:	605a      	str	r2, [r3, #4]
													// lower level code will do it for me (cut off upper half)
		stopwatchStartMarker = sConfig.Pulse;		// set new start marker
 8004e00:	187b      	adds	r3, r7, r1
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	4b1c      	ldr	r3, [pc, #112]	; (8004e78 <runStopwatch+0xc0>)
 8004e06:	601a      	str	r2, [r3, #0]
 8004e08:	e021      	b.n	8004e4e <runStopwatch+0x96>
	}
	else {		// unpausing
		uint32_t temp = htim->Instance->CNT-1;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e10:	3b01      	subs	r3, #1
 8004e12:	61fb      	str	r3, [r7, #28]

		// count needed to get from pause marker to start marker - basically how many steps it would've taken to get to next cycle
		// shifted to account for negative behavior
		uint32_t diff = ((int)(stopwatchStartMarker-stopwatchPauseMarker)+0x8000) % 0x8000;
 8004e14:	4b18      	ldr	r3, [pc, #96]	; (8004e78 <runStopwatch+0xc0>)
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	4b18      	ldr	r3, [pc, #96]	; (8004e7c <runStopwatch+0xc4>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2280      	movs	r2, #128	; 0x80
 8004e20:	0212      	lsls	r2, r2, #8
 8004e22:	4694      	mov	ip, r2
 8004e24:	4463      	add	r3, ip
 8004e26:	4a16      	ldr	r2, [pc, #88]	; (8004e80 <runStopwatch+0xc8>)
 8004e28:	4013      	ands	r3, r2
 8004e2a:	d503      	bpl.n	8004e34 <runStopwatch+0x7c>
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	4a15      	ldr	r2, [pc, #84]	; (8004e84 <runStopwatch+0xcc>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	3301      	adds	r3, #1
 8004e34:	61bb      	str	r3, [r7, #24]
		sConfig.Pulse = (temp+diff) % 0x8000;
 8004e36:	69fa      	ldr	r2, [r7, #28]
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	18d3      	adds	r3, r2, r3
 8004e3c:	045b      	lsls	r3, r3, #17
 8004e3e:	0c5a      	lsrs	r2, r3, #17
 8004e40:	2108      	movs	r1, #8
 8004e42:	187b      	adds	r3, r7, r1
 8004e44:	605a      	str	r2, [r3, #4]
		stopwatchStartMarker = sConfig.Pulse;		// set new start marker
 8004e46:	187b      	adds	r3, r7, r1
 8004e48:	685a      	ldr	r2, [r3, #4]
 8004e4a:	4b0b      	ldr	r3, [pc, #44]	; (8004e78 <runStopwatch+0xc0>)
 8004e4c:	601a      	str	r2, [r3, #0]
	}

	HAL_TIM_OC_ConfigChannel(htim, &sConfig, TIM_CHANNEL_2);
 8004e4e:	2308      	movs	r3, #8
 8004e50:	18f9      	adds	r1, r7, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2204      	movs	r2, #4
 8004e56:	0018      	movs	r0, r3
 8004e58:	f006 fca4 	bl	800b7a4 <HAL_TIM_OC_ConfigChannel>
	HAL_TIM_OC_Start_IT(htim, TIM_CHANNEL_2);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2104      	movs	r1, #4
 8004e60:	0018      	movs	r0, r3
 8004e62:	f006 fabd 	bl	800b3e0 <HAL_TIM_OC_Start_IT>
}
 8004e66:	46c0      	nop			; (mov r8, r8)
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	b009      	add	sp, #36	; 0x24
 8004e6c:	bd90      	pop	{r4, r7, pc}
 8004e6e:	46c0      	nop			; (mov r8, r8)
 8004e70:	200001b5 	.word	0x200001b5
 8004e74:	200001b8 	.word	0x200001b8
 8004e78:	20000118 	.word	0x20000118
 8004e7c:	2000011c 	.word	0x2000011c
 8004e80:	80007fff 	.word	0x80007fff
 8004e84:	ffff8000 	.word	0xffff8000

08004e88 <pauseStopwatch>:

void pauseStopwatch(TIM_HandleTypeDef *htim) {
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
	// save marker to hold milliseconds
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_2);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2104      	movs	r1, #4
 8004e94:	0018      	movs	r0, r3
 8004e96:	f006 faf5 	bl	800b484 <HAL_TIM_OC_Stop_IT>
	stopwatchPauseMarker = htim->Instance->CNT;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ea0:	4b02      	ldr	r3, [pc, #8]	; (8004eac <pauseStopwatch+0x24>)
 8004ea2:	601a      	str	r2, [r3, #0]
}
 8004ea4:	46c0      	nop			; (mov r8, r8)
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	b002      	add	sp, #8
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	2000011c 	.word	0x2000011c

08004eb0 <clearStopwatch>:

void clearStopwatch(TIM_HandleTypeDef *htim) {
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
	// clear everything
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_2);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2104      	movs	r1, #4
 8004ebc:	0018      	movs	r0, r3
 8004ebe:	f006 fae1 	bl	800b484 <HAL_TIM_OC_Stop_IT>
	stopwatchPauseMarker = htim->Instance->CNT;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ec8:	4b06      	ldr	r3, [pc, #24]	; (8004ee4 <clearStopwatch+0x34>)
 8004eca:	601a      	str	r2, [r3, #0]
	stopwatchStartMarker = htim->Instance->CNT;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ed2:	4b05      	ldr	r3, [pc, #20]	; (8004ee8 <clearStopwatch+0x38>)
 8004ed4:	601a      	str	r2, [r3, #0]

	stopwatchCounter = 0;
 8004ed6:	4b05      	ldr	r3, [pc, #20]	; (8004eec <clearStopwatch+0x3c>)
 8004ed8:	2200      	movs	r2, #0
 8004eda:	601a      	str	r2, [r3, #0]
}
 8004edc:	46c0      	nop			; (mov r8, r8)
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	b002      	add	sp, #8
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	2000011c 	.word	0x2000011c
 8004ee8:	20000118 	.word	0x20000118
 8004eec:	200001b8 	.word	0x200001b8

08004ef0 <runADCSampler>:
void stopTimerStopwatchBase(TIM_HandleTypeDef *htim) {HAL_TIM_Base_Stop(htim);}
// ---- end of important timer functions ----

// ---- motor and other things that use timer ----
// uses LSE timer TIM22
void runADCSampler(TIM_HandleTypeDef *htim) {
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(htim);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	0018      	movs	r0, r3
 8004efc:	f006 f9f8 	bl	800b2f0 <HAL_TIM_Base_Start_IT>
	canSampleBattery = 1;			// set flag to let ADC run at the start
 8004f00:	4b03      	ldr	r3, [pc, #12]	; (8004f10 <runADCSampler+0x20>)
 8004f02:	2201      	movs	r2, #1
 8004f04:	701a      	strb	r2, [r3, #0]
}
 8004f06:	46c0      	nop			; (mov r8, r8)
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	b002      	add	sp, #8
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	46c0      	nop			; (mov r8, r8)
 8004f10:	20000162 	.word	0x20000162

08004f14 <runMotor>:

// running motor for vibration. runs for a finite amount of time
// uses LSE timer TIM2 CH2
void runMotor(TIM_HandleTypeDef *htim) {
 8004f14:	b590      	push	{r4, r7, lr}
 8004f16:	b087      	sub	sp, #28
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef sConfig = {0};
 8004f1c:	2408      	movs	r4, #8
 8004f1e:	193b      	adds	r3, r7, r4
 8004f20:	0018      	movs	r0, r3
 8004f22:	2310      	movs	r3, #16
 8004f24:	001a      	movs	r2, r3
 8004f26:	2100      	movs	r1, #0
 8004f28:	f007 f91b 	bl	800c162 <memset>
	sConfig.OCMode = TIM_OCMODE_TIMING;
 8004f2c:	0021      	movs	r1, r4
 8004f2e:	187b      	adds	r3, r7, r1
 8004f30:	2200      	movs	r2, #0
 8004f32:	601a      	str	r2, [r3, #0]
	sConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004f34:	187b      	adds	r3, r7, r1
 8004f36:	2200      	movs	r2, #0
 8004f38:	609a      	str	r2, [r3, #8]
	sConfig.OCFastMode = TIM_OCFAST_DISABLE;
 8004f3a:	187b      	adds	r3, r7, r1
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	60da      	str	r2, [r3, #12]
	sConfig.Pulse = htim->Instance->CNT;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f46:	000c      	movs	r4, r1
 8004f48:	187b      	adds	r3, r7, r1
 8004f4a:	605a      	str	r2, [r3, #4]

	HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET);
 8004f4c:	23a0      	movs	r3, #160	; 0xa0
 8004f4e:	05db      	lsls	r3, r3, #23
 8004f50:	2201      	movs	r2, #1
 8004f52:	2110      	movs	r1, #16
 8004f54:	0018      	movs	r0, r3
 8004f56:	f003 fd13 	bl	8008980 <HAL_GPIO_WritePin>
	HAL_TIM_OC_ConfigChannel(htim, &sConfig, TIM_CHANNEL_2);
 8004f5a:	0021      	movs	r1, r4
 8004f5c:	1879      	adds	r1, r7, r1
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2204      	movs	r2, #4
 8004f62:	0018      	movs	r0, r3
 8004f64:	f006 fc1e 	bl	800b7a4 <HAL_TIM_OC_ConfigChannel>
	HAL_TIM_OC_Start_IT(htim, TIM_CHANNEL_2);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2104      	movs	r1, #4
 8004f6c:	0018      	movs	r0, r3
 8004f6e:	f006 fa37 	bl	800b3e0 <HAL_TIM_OC_Start_IT>

	motorStateCounter = 0;
 8004f72:	4b03      	ldr	r3, [pc, #12]	; (8004f80 <runMotor+0x6c>)
 8004f74:	2200      	movs	r2, #0
 8004f76:	701a      	strb	r2, [r3, #0]
}
 8004f78:	46c0      	nop			; (mov r8, r8)
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	b007      	add	sp, #28
 8004f7e:	bd90      	pop	{r4, r7, pc}
 8004f80:	20000120 	.word	0x20000120

08004f84 <stopMotor>:

void stopMotor(TIM_HandleTypeDef *htim) {
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_2);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2104      	movs	r1, #4
 8004f90:	0018      	movs	r0, r3
 8004f92:	f006 fa77 	bl	800b484 <HAL_TIM_OC_Stop_IT>
	motorStateCounter = 0;
 8004f96:	4b03      	ldr	r3, [pc, #12]	; (8004fa4 <stopMotor+0x20>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	701a      	strb	r2, [r3, #0]
}
 8004f9c:	46c0      	nop			; (mov r8, r8)
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	b002      	add	sp, #8
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	20000120 	.word	0x20000120

08004fa8 <setDisplayBacklight>:
void runMotorBase(TIM_HandleTypeDef *htim) {HAL_TIM_Base_Start(htim);}
void stopMotorBase(TIM_HandleTypeDef *htim) {HAL_TIM_Base_Stop(htim);}

// should change display brightness by changing PWM pulse width. input should be from 0-100
// uses 32MHz timer TIM3 CH1
void setDisplayBacklight(uint8_t intensity, TIM_HandleTypeDef *htim) {
 8004fa8:	b5b0      	push	{r4, r5, r7, lr}
 8004faa:	b086      	sub	sp, #24
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	0002      	movs	r2, r0
 8004fb0:	6039      	str	r1, [r7, #0]
 8004fb2:	1dfb      	adds	r3, r7, #7
 8004fb4:	701a      	strb	r2, [r3, #0]
	if (intensity > 100) return;		// bounds checking
 8004fb6:	1dfb      	adds	r3, r7, #7
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	2b64      	cmp	r3, #100	; 0x64
 8004fbc:	d83a      	bhi.n	8005034 <setDisplayBacklight+0x8c>

	TIM_OC_InitTypeDef sConfig = {0};
 8004fbe:	2508      	movs	r5, #8
 8004fc0:	197b      	adds	r3, r7, r5
 8004fc2:	0018      	movs	r0, r3
 8004fc4:	2310      	movs	r3, #16
 8004fc6:	001a      	movs	r2, r3
 8004fc8:	2100      	movs	r1, #0
 8004fca:	f007 f8ca 	bl	800c162 <memset>
	sConfig.OCMode = TIM_OCMODE_PWM1;
 8004fce:	197b      	adds	r3, r7, r5
 8004fd0:	2260      	movs	r2, #96	; 0x60
 8004fd2:	601a      	str	r2, [r3, #0]
	sConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004fd4:	197b      	adds	r3, r7, r5
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	609a      	str	r2, [r3, #8]
	sConfig.OCFastMode = TIM_OCFAST_DISABLE;
 8004fda:	197b      	adds	r3, r7, r5
 8004fdc:	2200      	movs	r2, #0
 8004fde:	60da      	str	r2, [r3, #12]
	sConfig.Pulse = (htim->Instance->ARR-1)*((float)intensity/100);
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	0018      	movs	r0, r3
 8004fea:	f7fb ff4b 	bl	8000e84 <__aeabi_ui2f>
 8004fee:	1c04      	adds	r4, r0, #0
 8004ff0:	1dfb      	adds	r3, r7, #7
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	0018      	movs	r0, r3
 8004ff6:	f7fb ff45 	bl	8000e84 <__aeabi_ui2f>
 8004ffa:	1c03      	adds	r3, r0, #0
 8004ffc:	490f      	ldr	r1, [pc, #60]	; (800503c <setDisplayBacklight+0x94>)
 8004ffe:	1c18      	adds	r0, r3, #0
 8005000:	f7fb fa52 	bl	80004a8 <__aeabi_fdiv>
 8005004:	1c03      	adds	r3, r0, #0
 8005006:	1c19      	adds	r1, r3, #0
 8005008:	1c20      	adds	r0, r4, #0
 800500a:	f7fb fc25 	bl	8000858 <__aeabi_fmul>
 800500e:	1c03      	adds	r3, r0, #0
 8005010:	1c18      	adds	r0, r3, #0
 8005012:	f7fb fa31 	bl	8000478 <__aeabi_f2uiz>
 8005016:	0002      	movs	r2, r0
 8005018:	197b      	adds	r3, r7, r5
 800501a:	605a      	str	r2, [r3, #4]

	HAL_TIM_PWM_ConfigChannel(htim, &sConfig, TIM_CHANNEL_1);
 800501c:	1979      	adds	r1, r7, r5
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	2200      	movs	r2, #0
 8005022:	0018      	movs	r0, r3
 8005024:	f006 fc0c 	bl	800b840 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	2100      	movs	r1, #0
 800502c:	0018      	movs	r0, r3
 800502e:	f006 faaf 	bl	800b590 <HAL_TIM_PWM_Start>
 8005032:	e000      	b.n	8005036 <setDisplayBacklight+0x8e>
	if (intensity > 100) return;		// bounds checking
 8005034:	46c0      	nop			; (mov r8, r8)
}
 8005036:	46bd      	mov	sp, r7
 8005038:	b006      	add	sp, #24
 800503a:	bdb0      	pop	{r4, r5, r7, pc}
 800503c:	42c80000 	.word	0x42c80000

08005040 <HAL_GPIO_EXTI_Callback>:
	"Nov",
	"Dec"
};

// callback for button interrupts.
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
 8005046:	0002      	movs	r2, r0
 8005048:	1dbb      	adds	r3, r7, #6
 800504a:	801a      	strh	r2, [r3, #0]
//	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
//	HAL_NVIC_ClearPendingIRQ(EXTI2_3_IRQn);
//	HAL_NVIC_ClearPendingIRQ(EXTI4_15_IRQn);

	// updates flags
	if (GPIO_Pin == BUTTON1) buttons.is1Pressed = 1;
 800504c:	1dbb      	adds	r3, r7, #6
 800504e:	881b      	ldrh	r3, [r3, #0]
 8005050:	2b02      	cmp	r3, #2
 8005052:	d102      	bne.n	800505a <HAL_GPIO_EXTI_Callback+0x1a>
 8005054:	4b0f      	ldr	r3, [pc, #60]	; (8005094 <HAL_GPIO_EXTI_Callback+0x54>)
 8005056:	2201      	movs	r2, #1
 8005058:	701a      	strb	r2, [r3, #0]
	if (GPIO_Pin == BUTTON2) buttons.is2Pressed = 1;
 800505a:	1dbb      	adds	r3, r7, #6
 800505c:	881b      	ldrh	r3, [r3, #0]
 800505e:	2b04      	cmp	r3, #4
 8005060:	d102      	bne.n	8005068 <HAL_GPIO_EXTI_Callback+0x28>
 8005062:	4b0c      	ldr	r3, [pc, #48]	; (8005094 <HAL_GPIO_EXTI_Callback+0x54>)
 8005064:	2201      	movs	r2, #1
 8005066:	705a      	strb	r2, [r3, #1]
	if (GPIO_Pin == BUTTON3) buttons.is3Pressed = 1;
 8005068:	1dbb      	adds	r3, r7, #6
 800506a:	881a      	ldrh	r2, [r3, #0]
 800506c:	2380      	movs	r3, #128	; 0x80
 800506e:	00db      	lsls	r3, r3, #3
 8005070:	429a      	cmp	r2, r3
 8005072:	d102      	bne.n	800507a <HAL_GPIO_EXTI_Callback+0x3a>
 8005074:	4b07      	ldr	r3, [pc, #28]	; (8005094 <HAL_GPIO_EXTI_Callback+0x54>)
 8005076:	2201      	movs	r2, #1
 8005078:	709a      	strb	r2, [r3, #2]
	if (GPIO_Pin == BUTTON4) buttons.is4Pressed = 1;
 800507a:	1dbb      	adds	r3, r7, #6
 800507c:	881a      	ldrh	r2, [r3, #0]
 800507e:	2380      	movs	r3, #128	; 0x80
 8005080:	011b      	lsls	r3, r3, #4
 8005082:	429a      	cmp	r2, r3
 8005084:	d102      	bne.n	800508c <HAL_GPIO_EXTI_Callback+0x4c>
 8005086:	4b03      	ldr	r3, [pc, #12]	; (8005094 <HAL_GPIO_EXTI_Callback+0x54>)
 8005088:	2201      	movs	r2, #1
 800508a:	70da      	strb	r2, [r3, #3]

	// runs timer for software debouncing delay
//	HAL_TIM_Base_Start_IT(&htim6);
}
 800508c:	46c0      	nop			; (mov r8, r8)
 800508e:	46bd      	mov	sp, r7
 8005090:	b002      	add	sp, #8
 8005092:	bd80      	pop	{r7, pc}
 8005094:	200001b0 	.word	0x200001b0

08005098 <updateState>:

//
void updateState(RTC_HandleTypeDef *hrtc, TIM_HandleTypeDef *timerStopwatchTim, TIM_HandleTypeDef *motorBacklightTim, TIM_HandleTypeDef *buttonTim, SPI_HandleTypeDef *hspi) {
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
 80050a4:	603b      	str	r3, [r7, #0]
	if (buttons.is1Pressed || buttons.is2Pressed || buttons.is3Pressed || buttons.is4Pressed) {
 80050a6:	4bbf      	ldr	r3, [pc, #764]	; (80053a4 <updateState+0x30c>)
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d10f      	bne.n	80050d0 <updateState+0x38>
 80050b0:	4bbc      	ldr	r3, [pc, #752]	; (80053a4 <updateState+0x30c>)
 80050b2:	785b      	ldrb	r3, [r3, #1]
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10a      	bne.n	80050d0 <updateState+0x38>
 80050ba:	4bba      	ldr	r3, [pc, #744]	; (80053a4 <updateState+0x30c>)
 80050bc:	789b      	ldrb	r3, [r3, #2]
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d105      	bne.n	80050d0 <updateState+0x38>
 80050c4:	4bb7      	ldr	r3, [pc, #732]	; (80053a4 <updateState+0x30c>)
 80050c6:	78db      	ldrb	r3, [r3, #3]
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d100      	bne.n	80050d0 <updateState+0x38>
 80050ce:	e1c1      	b.n	8005454 <updateState+0x3bc>
		// button 1 changes the face on screen.
		if (buttons.is1Pressed) {
 80050d0:	4bb4      	ldr	r3, [pc, #720]	; (80053a4 <updateState+0x30c>)
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d02d      	beq.n	8005136 <updateState+0x9e>
			isFaceBeingChanged = 1;
 80050da:	4bb3      	ldr	r3, [pc, #716]	; (80053a8 <updateState+0x310>)
 80050dc:	2201      	movs	r2, #1
 80050de:	701a      	strb	r2, [r3, #0]
			faceOnDisplay = (faceOnDisplay + 1) % NUM_FACES;
 80050e0:	4bb2      	ldr	r3, [pc, #712]	; (80053ac <updateState+0x314>)
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	3301      	adds	r3, #1
 80050e6:	4ab2      	ldr	r2, [pc, #712]	; (80053b0 <updateState+0x318>)
 80050e8:	4013      	ands	r3, r2
 80050ea:	d504      	bpl.n	80050f6 <updateState+0x5e>
 80050ec:	3b01      	subs	r3, #1
 80050ee:	2204      	movs	r2, #4
 80050f0:	4252      	negs	r2, r2
 80050f2:	4313      	orrs	r3, r2
 80050f4:	3301      	adds	r3, #1
 80050f6:	b2da      	uxtb	r2, r3
 80050f8:	4bac      	ldr	r3, [pc, #688]	; (80053ac <updateState+0x314>)
 80050fa:	701a      	strb	r2, [r3, #0]
			switch (faceOnDisplay) {
 80050fc:	4bab      	ldr	r3, [pc, #684]	; (80053ac <updateState+0x314>)
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	2b01      	cmp	r3, #1
 8005102:	d00c      	beq.n	800511e <updateState+0x86>
 8005104:	dc02      	bgt.n	800510c <updateState+0x74>
 8005106:	2b00      	cmp	r3, #0
 8005108:	d005      	beq.n	8005116 <updateState+0x7e>
				case faceClock: updateFace.clock = 1; break;
				case faceTimer: updateFace.timer = 1; break;
				case faceAlarm: updateFace.alarm = 1; break;
				case faceStopwatch: updateFace.stopwatch = 1; break;
				default: break;
 800510a:	e015      	b.n	8005138 <updateState+0xa0>
			switch (faceOnDisplay) {
 800510c:	2b02      	cmp	r3, #2
 800510e:	d00a      	beq.n	8005126 <updateState+0x8e>
 8005110:	2b03      	cmp	r3, #3
 8005112:	d00c      	beq.n	800512e <updateState+0x96>
				default: break;
 8005114:	e010      	b.n	8005138 <updateState+0xa0>
				case faceClock: updateFace.clock = 1; break;
 8005116:	4ba7      	ldr	r3, [pc, #668]	; (80053b4 <updateState+0x31c>)
 8005118:	2201      	movs	r2, #1
 800511a:	701a      	strb	r2, [r3, #0]
 800511c:	e00c      	b.n	8005138 <updateState+0xa0>
				case faceTimer: updateFace.timer = 1; break;
 800511e:	4ba5      	ldr	r3, [pc, #660]	; (80053b4 <updateState+0x31c>)
 8005120:	2201      	movs	r2, #1
 8005122:	705a      	strb	r2, [r3, #1]
 8005124:	e008      	b.n	8005138 <updateState+0xa0>
				case faceAlarm: updateFace.alarm = 1; break;
 8005126:	4ba3      	ldr	r3, [pc, #652]	; (80053b4 <updateState+0x31c>)
 8005128:	2201      	movs	r2, #1
 800512a:	709a      	strb	r2, [r3, #2]
 800512c:	e004      	b.n	8005138 <updateState+0xa0>
				case faceStopwatch: updateFace.stopwatch = 1; break;
 800512e:	4ba1      	ldr	r3, [pc, #644]	; (80053b4 <updateState+0x31c>)
 8005130:	2201      	movs	r2, #1
 8005132:	70da      	strb	r2, [r3, #3]
 8005134:	e000      	b.n	8005138 <updateState+0xa0>
			}
		}
 8005136:	46c0      	nop			; (mov r8, r8)

		// button combo: press 2 and 3 alternatively 5 times to reinit display.
		// needed since screen often turns white when its power supply is rustled, and there's no way to show the information
		static uint8_t s = 0;
		switch(s) {
 8005138:	4b9f      	ldr	r3, [pc, #636]	; (80053b8 <updateState+0x320>)
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	2b09      	cmp	r3, #9
 800513e:	d900      	bls.n	8005142 <updateState+0xaa>
 8005140:	e11b      	b.n	800537a <updateState+0x2e2>
 8005142:	009a      	lsls	r2, r3, #2
 8005144:	4b9d      	ldr	r3, [pc, #628]	; (80053bc <updateState+0x324>)
 8005146:	18d3      	adds	r3, r2, r3
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	469f      	mov	pc, r3
			case 0:	if (buttons.is2Pressed) s++; break;
 800514c:	4b95      	ldr	r3, [pc, #596]	; (80053a4 <updateState+0x30c>)
 800514e:	785b      	ldrb	r3, [r3, #1]
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b00      	cmp	r3, #0
 8005154:	d100      	bne.n	8005158 <updateState+0xc0>
 8005156:	e112      	b.n	800537e <updateState+0x2e6>
 8005158:	4b97      	ldr	r3, [pc, #604]	; (80053b8 <updateState+0x320>)
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	3301      	adds	r3, #1
 800515e:	b2da      	uxtb	r2, r3
 8005160:	4b95      	ldr	r3, [pc, #596]	; (80053b8 <updateState+0x320>)
 8005162:	701a      	strb	r2, [r3, #0]
 8005164:	e10b      	b.n	800537e <updateState+0x2e6>
			case 1: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 8005166:	4b8f      	ldr	r3, [pc, #572]	; (80053a4 <updateState+0x30c>)
 8005168:	789b      	ldrb	r3, [r3, #2]
 800516a:	b2db      	uxtb	r3, r3
 800516c:	2b00      	cmp	r3, #0
 800516e:	d006      	beq.n	800517e <updateState+0xe6>
 8005170:	4b91      	ldr	r3, [pc, #580]	; (80053b8 <updateState+0x320>)
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	3301      	adds	r3, #1
 8005176:	b2da      	uxtb	r2, r3
 8005178:	4b8f      	ldr	r3, [pc, #572]	; (80053b8 <updateState+0x320>)
 800517a:	701a      	strb	r2, [r3, #0]
 800517c:	e101      	b.n	8005382 <updateState+0x2ea>
 800517e:	4b89      	ldr	r3, [pc, #548]	; (80053a4 <updateState+0x30c>)
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	b2db      	uxtb	r3, r3
 8005184:	2b00      	cmp	r3, #0
 8005186:	d10a      	bne.n	800519e <updateState+0x106>
 8005188:	4b86      	ldr	r3, [pc, #536]	; (80053a4 <updateState+0x30c>)
 800518a:	785b      	ldrb	r3, [r3, #1]
 800518c:	b2db      	uxtb	r3, r3
 800518e:	2b00      	cmp	r3, #0
 8005190:	d105      	bne.n	800519e <updateState+0x106>
 8005192:	4b84      	ldr	r3, [pc, #528]	; (80053a4 <updateState+0x30c>)
 8005194:	78db      	ldrb	r3, [r3, #3]
 8005196:	b2db      	uxtb	r3, r3
 8005198:	2b00      	cmp	r3, #0
 800519a:	d100      	bne.n	800519e <updateState+0x106>
 800519c:	e0f1      	b.n	8005382 <updateState+0x2ea>
 800519e:	4b86      	ldr	r3, [pc, #536]	; (80053b8 <updateState+0x320>)
 80051a0:	2200      	movs	r2, #0
 80051a2:	701a      	strb	r2, [r3, #0]
 80051a4:	e0ed      	b.n	8005382 <updateState+0x2ea>
			case 2: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 80051a6:	4b7f      	ldr	r3, [pc, #508]	; (80053a4 <updateState+0x30c>)
 80051a8:	785b      	ldrb	r3, [r3, #1]
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d006      	beq.n	80051be <updateState+0x126>
 80051b0:	4b81      	ldr	r3, [pc, #516]	; (80053b8 <updateState+0x320>)
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	3301      	adds	r3, #1
 80051b6:	b2da      	uxtb	r2, r3
 80051b8:	4b7f      	ldr	r3, [pc, #508]	; (80053b8 <updateState+0x320>)
 80051ba:	701a      	strb	r2, [r3, #0]
 80051bc:	e0e3      	b.n	8005386 <updateState+0x2ee>
 80051be:	4b79      	ldr	r3, [pc, #484]	; (80053a4 <updateState+0x30c>)
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d10a      	bne.n	80051de <updateState+0x146>
 80051c8:	4b76      	ldr	r3, [pc, #472]	; (80053a4 <updateState+0x30c>)
 80051ca:	789b      	ldrb	r3, [r3, #2]
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d105      	bne.n	80051de <updateState+0x146>
 80051d2:	4b74      	ldr	r3, [pc, #464]	; (80053a4 <updateState+0x30c>)
 80051d4:	78db      	ldrb	r3, [r3, #3]
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d100      	bne.n	80051de <updateState+0x146>
 80051dc:	e0d3      	b.n	8005386 <updateState+0x2ee>
 80051de:	4b76      	ldr	r3, [pc, #472]	; (80053b8 <updateState+0x320>)
 80051e0:	2200      	movs	r2, #0
 80051e2:	701a      	strb	r2, [r3, #0]
 80051e4:	e0cf      	b.n	8005386 <updateState+0x2ee>
			case 3: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 80051e6:	4b6f      	ldr	r3, [pc, #444]	; (80053a4 <updateState+0x30c>)
 80051e8:	789b      	ldrb	r3, [r3, #2]
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d006      	beq.n	80051fe <updateState+0x166>
 80051f0:	4b71      	ldr	r3, [pc, #452]	; (80053b8 <updateState+0x320>)
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	3301      	adds	r3, #1
 80051f6:	b2da      	uxtb	r2, r3
 80051f8:	4b6f      	ldr	r3, [pc, #444]	; (80053b8 <updateState+0x320>)
 80051fa:	701a      	strb	r2, [r3, #0]
 80051fc:	e0c5      	b.n	800538a <updateState+0x2f2>
 80051fe:	4b69      	ldr	r3, [pc, #420]	; (80053a4 <updateState+0x30c>)
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	b2db      	uxtb	r3, r3
 8005204:	2b00      	cmp	r3, #0
 8005206:	d10a      	bne.n	800521e <updateState+0x186>
 8005208:	4b66      	ldr	r3, [pc, #408]	; (80053a4 <updateState+0x30c>)
 800520a:	785b      	ldrb	r3, [r3, #1]
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b00      	cmp	r3, #0
 8005210:	d105      	bne.n	800521e <updateState+0x186>
 8005212:	4b64      	ldr	r3, [pc, #400]	; (80053a4 <updateState+0x30c>)
 8005214:	78db      	ldrb	r3, [r3, #3]
 8005216:	b2db      	uxtb	r3, r3
 8005218:	2b00      	cmp	r3, #0
 800521a:	d100      	bne.n	800521e <updateState+0x186>
 800521c:	e0b5      	b.n	800538a <updateState+0x2f2>
 800521e:	4b66      	ldr	r3, [pc, #408]	; (80053b8 <updateState+0x320>)
 8005220:	2200      	movs	r2, #0
 8005222:	701a      	strb	r2, [r3, #0]
 8005224:	e0b1      	b.n	800538a <updateState+0x2f2>
			case 4: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 8005226:	4b5f      	ldr	r3, [pc, #380]	; (80053a4 <updateState+0x30c>)
 8005228:	785b      	ldrb	r3, [r3, #1]
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b00      	cmp	r3, #0
 800522e:	d006      	beq.n	800523e <updateState+0x1a6>
 8005230:	4b61      	ldr	r3, [pc, #388]	; (80053b8 <updateState+0x320>)
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	3301      	adds	r3, #1
 8005236:	b2da      	uxtb	r2, r3
 8005238:	4b5f      	ldr	r3, [pc, #380]	; (80053b8 <updateState+0x320>)
 800523a:	701a      	strb	r2, [r3, #0]
 800523c:	e0a7      	b.n	800538e <updateState+0x2f6>
 800523e:	4b59      	ldr	r3, [pc, #356]	; (80053a4 <updateState+0x30c>)
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	b2db      	uxtb	r3, r3
 8005244:	2b00      	cmp	r3, #0
 8005246:	d10a      	bne.n	800525e <updateState+0x1c6>
 8005248:	4b56      	ldr	r3, [pc, #344]	; (80053a4 <updateState+0x30c>)
 800524a:	789b      	ldrb	r3, [r3, #2]
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d105      	bne.n	800525e <updateState+0x1c6>
 8005252:	4b54      	ldr	r3, [pc, #336]	; (80053a4 <updateState+0x30c>)
 8005254:	78db      	ldrb	r3, [r3, #3]
 8005256:	b2db      	uxtb	r3, r3
 8005258:	2b00      	cmp	r3, #0
 800525a:	d100      	bne.n	800525e <updateState+0x1c6>
 800525c:	e097      	b.n	800538e <updateState+0x2f6>
 800525e:	4b56      	ldr	r3, [pc, #344]	; (80053b8 <updateState+0x320>)
 8005260:	2200      	movs	r2, #0
 8005262:	701a      	strb	r2, [r3, #0]
 8005264:	e093      	b.n	800538e <updateState+0x2f6>
			case 5: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 8005266:	4b4f      	ldr	r3, [pc, #316]	; (80053a4 <updateState+0x30c>)
 8005268:	789b      	ldrb	r3, [r3, #2]
 800526a:	b2db      	uxtb	r3, r3
 800526c:	2b00      	cmp	r3, #0
 800526e:	d006      	beq.n	800527e <updateState+0x1e6>
 8005270:	4b51      	ldr	r3, [pc, #324]	; (80053b8 <updateState+0x320>)
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	3301      	adds	r3, #1
 8005276:	b2da      	uxtb	r2, r3
 8005278:	4b4f      	ldr	r3, [pc, #316]	; (80053b8 <updateState+0x320>)
 800527a:	701a      	strb	r2, [r3, #0]
 800527c:	e089      	b.n	8005392 <updateState+0x2fa>
 800527e:	4b49      	ldr	r3, [pc, #292]	; (80053a4 <updateState+0x30c>)
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	b2db      	uxtb	r3, r3
 8005284:	2b00      	cmp	r3, #0
 8005286:	d10a      	bne.n	800529e <updateState+0x206>
 8005288:	4b46      	ldr	r3, [pc, #280]	; (80053a4 <updateState+0x30c>)
 800528a:	785b      	ldrb	r3, [r3, #1]
 800528c:	b2db      	uxtb	r3, r3
 800528e:	2b00      	cmp	r3, #0
 8005290:	d105      	bne.n	800529e <updateState+0x206>
 8005292:	4b44      	ldr	r3, [pc, #272]	; (80053a4 <updateState+0x30c>)
 8005294:	78db      	ldrb	r3, [r3, #3]
 8005296:	b2db      	uxtb	r3, r3
 8005298:	2b00      	cmp	r3, #0
 800529a:	d100      	bne.n	800529e <updateState+0x206>
 800529c:	e079      	b.n	8005392 <updateState+0x2fa>
 800529e:	4b46      	ldr	r3, [pc, #280]	; (80053b8 <updateState+0x320>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	701a      	strb	r2, [r3, #0]
 80052a4:	e075      	b.n	8005392 <updateState+0x2fa>
			case 6: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 80052a6:	4b3f      	ldr	r3, [pc, #252]	; (80053a4 <updateState+0x30c>)
 80052a8:	785b      	ldrb	r3, [r3, #1]
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d006      	beq.n	80052be <updateState+0x226>
 80052b0:	4b41      	ldr	r3, [pc, #260]	; (80053b8 <updateState+0x320>)
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	3301      	adds	r3, #1
 80052b6:	b2da      	uxtb	r2, r3
 80052b8:	4b3f      	ldr	r3, [pc, #252]	; (80053b8 <updateState+0x320>)
 80052ba:	701a      	strb	r2, [r3, #0]
 80052bc:	e06b      	b.n	8005396 <updateState+0x2fe>
 80052be:	4b39      	ldr	r3, [pc, #228]	; (80053a4 <updateState+0x30c>)
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d109      	bne.n	80052dc <updateState+0x244>
 80052c8:	4b36      	ldr	r3, [pc, #216]	; (80053a4 <updateState+0x30c>)
 80052ca:	789b      	ldrb	r3, [r3, #2]
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d104      	bne.n	80052dc <updateState+0x244>
 80052d2:	4b34      	ldr	r3, [pc, #208]	; (80053a4 <updateState+0x30c>)
 80052d4:	78db      	ldrb	r3, [r3, #3]
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d05c      	beq.n	8005396 <updateState+0x2fe>
 80052dc:	4b36      	ldr	r3, [pc, #216]	; (80053b8 <updateState+0x320>)
 80052de:	2200      	movs	r2, #0
 80052e0:	701a      	strb	r2, [r3, #0]
 80052e2:	e058      	b.n	8005396 <updateState+0x2fe>
			case 7: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 80052e4:	4b2f      	ldr	r3, [pc, #188]	; (80053a4 <updateState+0x30c>)
 80052e6:	789b      	ldrb	r3, [r3, #2]
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d006      	beq.n	80052fc <updateState+0x264>
 80052ee:	4b32      	ldr	r3, [pc, #200]	; (80053b8 <updateState+0x320>)
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	3301      	adds	r3, #1
 80052f4:	b2da      	uxtb	r2, r3
 80052f6:	4b30      	ldr	r3, [pc, #192]	; (80053b8 <updateState+0x320>)
 80052f8:	701a      	strb	r2, [r3, #0]
 80052fa:	e04e      	b.n	800539a <updateState+0x302>
 80052fc:	4b29      	ldr	r3, [pc, #164]	; (80053a4 <updateState+0x30c>)
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d109      	bne.n	800531a <updateState+0x282>
 8005306:	4b27      	ldr	r3, [pc, #156]	; (80053a4 <updateState+0x30c>)
 8005308:	785b      	ldrb	r3, [r3, #1]
 800530a:	b2db      	uxtb	r3, r3
 800530c:	2b00      	cmp	r3, #0
 800530e:	d104      	bne.n	800531a <updateState+0x282>
 8005310:	4b24      	ldr	r3, [pc, #144]	; (80053a4 <updateState+0x30c>)
 8005312:	78db      	ldrb	r3, [r3, #3]
 8005314:	b2db      	uxtb	r3, r3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d03f      	beq.n	800539a <updateState+0x302>
 800531a:	4b27      	ldr	r3, [pc, #156]	; (80053b8 <updateState+0x320>)
 800531c:	2200      	movs	r2, #0
 800531e:	701a      	strb	r2, [r3, #0]
 8005320:	e03b      	b.n	800539a <updateState+0x302>
			case 8: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 8005322:	4b20      	ldr	r3, [pc, #128]	; (80053a4 <updateState+0x30c>)
 8005324:	785b      	ldrb	r3, [r3, #1]
 8005326:	b2db      	uxtb	r3, r3
 8005328:	2b00      	cmp	r3, #0
 800532a:	d006      	beq.n	800533a <updateState+0x2a2>
 800532c:	4b22      	ldr	r3, [pc, #136]	; (80053b8 <updateState+0x320>)
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	3301      	adds	r3, #1
 8005332:	b2da      	uxtb	r2, r3
 8005334:	4b20      	ldr	r3, [pc, #128]	; (80053b8 <updateState+0x320>)
 8005336:	701a      	strb	r2, [r3, #0]
 8005338:	e031      	b.n	800539e <updateState+0x306>
 800533a:	4b1a      	ldr	r3, [pc, #104]	; (80053a4 <updateState+0x30c>)
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	b2db      	uxtb	r3, r3
 8005340:	2b00      	cmp	r3, #0
 8005342:	d109      	bne.n	8005358 <updateState+0x2c0>
 8005344:	4b17      	ldr	r3, [pc, #92]	; (80053a4 <updateState+0x30c>)
 8005346:	789b      	ldrb	r3, [r3, #2]
 8005348:	b2db      	uxtb	r3, r3
 800534a:	2b00      	cmp	r3, #0
 800534c:	d104      	bne.n	8005358 <updateState+0x2c0>
 800534e:	4b15      	ldr	r3, [pc, #84]	; (80053a4 <updateState+0x30c>)
 8005350:	78db      	ldrb	r3, [r3, #3]
 8005352:	b2db      	uxtb	r3, r3
 8005354:	2b00      	cmp	r3, #0
 8005356:	d022      	beq.n	800539e <updateState+0x306>
 8005358:	4b17      	ldr	r3, [pc, #92]	; (80053b8 <updateState+0x320>)
 800535a:	2200      	movs	r2, #0
 800535c:	701a      	strb	r2, [r3, #0]
 800535e:	e01e      	b.n	800539e <updateState+0x306>
			case 9: if (buttons.is3Pressed) {s = 0; TFT_startup(hspi);} break;
 8005360:	4b10      	ldr	r3, [pc, #64]	; (80053a4 <updateState+0x30c>)
 8005362:	789b      	ldrb	r3, [r3, #2]
 8005364:	b2db      	uxtb	r3, r3
 8005366:	2b00      	cmp	r3, #0
 8005368:	d02a      	beq.n	80053c0 <updateState+0x328>
 800536a:	4b13      	ldr	r3, [pc, #76]	; (80053b8 <updateState+0x320>)
 800536c:	2200      	movs	r2, #0
 800536e:	701a      	strb	r2, [r3, #0]
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	0018      	movs	r0, r3
 8005374:	f7fc fde2 	bl	8001f3c <TFT_startup>
 8005378:	e022      	b.n	80053c0 <updateState+0x328>
			default: break;
 800537a:	46c0      	nop			; (mov r8, r8)
 800537c:	e021      	b.n	80053c2 <updateState+0x32a>
			case 0:	if (buttons.is2Pressed) s++; break;
 800537e:	46c0      	nop			; (mov r8, r8)
 8005380:	e01f      	b.n	80053c2 <updateState+0x32a>
			case 1: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 8005382:	46c0      	nop			; (mov r8, r8)
 8005384:	e01d      	b.n	80053c2 <updateState+0x32a>
			case 2: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 8005386:	46c0      	nop			; (mov r8, r8)
 8005388:	e01b      	b.n	80053c2 <updateState+0x32a>
			case 3: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 800538a:	46c0      	nop			; (mov r8, r8)
 800538c:	e019      	b.n	80053c2 <updateState+0x32a>
			case 4: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 800538e:	46c0      	nop			; (mov r8, r8)
 8005390:	e017      	b.n	80053c2 <updateState+0x32a>
			case 5: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 8005392:	46c0      	nop			; (mov r8, r8)
 8005394:	e015      	b.n	80053c2 <updateState+0x32a>
			case 6: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 8005396:	46c0      	nop			; (mov r8, r8)
 8005398:	e013      	b.n	80053c2 <updateState+0x32a>
			case 7: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 800539a:	46c0      	nop			; (mov r8, r8)
 800539c:	e011      	b.n	80053c2 <updateState+0x32a>
			case 8: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 800539e:	46c0      	nop			; (mov r8, r8)
 80053a0:	e00f      	b.n	80053c2 <updateState+0x32a>
 80053a2:	46c0      	nop			; (mov r8, r8)
 80053a4:	200001b0 	.word	0x200001b0
 80053a8:	20000078 	.word	0x20000078
 80053ac:	20000148 	.word	0x20000148
 80053b0:	80000003 	.word	0x80000003
 80053b4:	20000164 	.word	0x20000164
 80053b8:	20000154 	.word	0x20000154
 80053bc:	0800d568 	.word	0x0800d568
			case 9: if (buttons.is3Pressed) {s = 0; TFT_startup(hspi);} break;
 80053c0:	46c0      	nop			; (mov r8, r8)
		}

		static uint8_t o = 0;
		if (buttons.is3Pressed) {
 80053c2:	4b26      	ldr	r3, [pc, #152]	; (800545c <updateState+0x3c4>)
 80053c4:	789b      	ldrb	r3, [r3, #2]
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d010      	beq.n	80053ee <updateState+0x356>
			o = getDisplayOrientation() + 1;
 80053cc:	f7fd fd8e 	bl	8002eec <getDisplayOrientation>
 80053d0:	0003      	movs	r3, r0
 80053d2:	3301      	adds	r3, #1
 80053d4:	b2da      	uxtb	r2, r3
 80053d6:	4b22      	ldr	r3, [pc, #136]	; (8005460 <updateState+0x3c8>)
 80053d8:	701a      	strb	r2, [r3, #0]
			setDisplayOrientation(o, hspi);
 80053da:	4b21      	ldr	r3, [pc, #132]	; (8005460 <updateState+0x3c8>)
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	69ba      	ldr	r2, [r7, #24]
 80053e0:	0011      	movs	r1, r2
 80053e2:	0018      	movs	r0, r3
 80053e4:	f7fd fd22 	bl	8002e2c <setDisplayOrientation>
			isFaceBeingChanged = 1;
 80053e8:	4b1e      	ldr	r3, [pc, #120]	; (8005464 <updateState+0x3cc>)
 80053ea:	2201      	movs	r2, #1
 80053ec:	701a      	strb	r2, [r3, #0]
		}

		// run helper functions when their face is on screen
		if (faceOnDisplay == faceClock) updateClockState(hrtc);
 80053ee:	4b1e      	ldr	r3, [pc, #120]	; (8005468 <updateState+0x3d0>)
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d104      	bne.n	8005400 <updateState+0x368>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	0018      	movs	r0, r3
 80053fa:	f000 f837 	bl	800546c <updateClockState>
 80053fe:	e01d      	b.n	800543c <updateState+0x3a4>
		else if (faceOnDisplay == faceTimer) updateTimerState(timerStopwatchTim, motorBacklightTim);
 8005400:	4b19      	ldr	r3, [pc, #100]	; (8005468 <updateState+0x3d0>)
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d106      	bne.n	8005416 <updateState+0x37e>
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	0011      	movs	r1, r2
 800540e:	0018      	movs	r0, r3
 8005410:	f000 f9a0 	bl	8005754 <updateTimerState>
 8005414:	e012      	b.n	800543c <updateState+0x3a4>
		else if (faceOnDisplay == faceAlarm) updateAlarmState(hrtc, motorBacklightTim);
 8005416:	4b14      	ldr	r3, [pc, #80]	; (8005468 <updateState+0x3d0>)
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	2b02      	cmp	r3, #2
 800541c:	d106      	bne.n	800542c <updateState+0x394>
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	0011      	movs	r1, r2
 8005424:	0018      	movs	r0, r3
 8005426:	f000 fad1 	bl	80059cc <updateAlarmState>
 800542a:	e007      	b.n	800543c <updateState+0x3a4>
		else if (faceOnDisplay == faceStopwatch) updateStopwatchState(timerStopwatchTim);
 800542c:	4b0e      	ldr	r3, [pc, #56]	; (8005468 <updateState+0x3d0>)
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	2b03      	cmp	r3, #3
 8005432:	d103      	bne.n	800543c <updateState+0x3a4>
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	0018      	movs	r0, r3
 8005438:	f000 fbf4 	bl	8005c24 <updateStopwatchState>

		// flags cleared only when state code has finished executing once
		buttons.is1Pressed = buttons.is2Pressed = buttons.is3Pressed = buttons.is4Pressed = 0;
 800543c:	2200      	movs	r2, #0
 800543e:	4b07      	ldr	r3, [pc, #28]	; (800545c <updateState+0x3c4>)
 8005440:	1c11      	adds	r1, r2, #0
 8005442:	70d9      	strb	r1, [r3, #3]
 8005444:	4b05      	ldr	r3, [pc, #20]	; (800545c <updateState+0x3c4>)
 8005446:	1c11      	adds	r1, r2, #0
 8005448:	7099      	strb	r1, [r3, #2]
 800544a:	4b04      	ldr	r3, [pc, #16]	; (800545c <updateState+0x3c4>)
 800544c:	1c11      	adds	r1, r2, #0
 800544e:	7059      	strb	r1, [r3, #1]
 8005450:	4b02      	ldr	r3, [pc, #8]	; (800545c <updateState+0x3c4>)
 8005452:	701a      	strb	r2, [r3, #0]
	}
}
 8005454:	46c0      	nop			; (mov r8, r8)
 8005456:	46bd      	mov	sp, r7
 8005458:	b004      	add	sp, #16
 800545a:	bd80      	pop	{r7, pc}
 800545c:	200001b0 	.word	0x200001b0
 8005460:	20000155 	.word	0x20000155
 8005464:	20000078 	.word	0x20000078
 8005468:	20000148 	.word	0x20000148

0800546c <updateClockState>:
 *   button 2 changes value up
 *   button 3 changes value down
 *   button 4 changes field being set. changes between min, hr, year, month, and day. once it finishes cycling through it once,
 *     the clock is updated and we revert back to default mode.
 */
void updateClockState(RTC_HandleTypeDef *hrtc) {
 800546c:	b590      	push	{r4, r7, lr}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
	// check button pressed -> perform action
	static int8_t brightness = 50;
	if (buttons.is2Pressed) {
 8005474:	4baf      	ldr	r3, [pc, #700]	; (8005734 <updateClockState+0x2c8>)
 8005476:	785b      	ldrb	r3, [r3, #1]
 8005478:	b2db      	uxtb	r3, r3
 800547a:	2b00      	cmp	r3, #0
 800547c:	d100      	bne.n	8005480 <updateClockState+0x14>
 800547e:	e086      	b.n	800558e <updateClockState+0x122>
		updateFace.clock = 1;
 8005480:	4bad      	ldr	r3, [pc, #692]	; (8005738 <updateClockState+0x2cc>)
 8005482:	2201      	movs	r2, #1
 8005484:	701a      	strb	r2, [r3, #0]
		if (clockVars.isBeingSet) {
 8005486:	4bad      	ldr	r3, [pc, #692]	; (800573c <updateClockState+0x2d0>)
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d05f      	beq.n	800554e <updateClockState+0xe2>
			switch (clockVars.fieldBeingSet) {
 800548e:	4bab      	ldr	r3, [pc, #684]	; (800573c <updateClockState+0x2d0>)
 8005490:	785b      	ldrb	r3, [r3, #1]
 8005492:	2b05      	cmp	r3, #5
 8005494:	d900      	bls.n	8005498 <updateClockState+0x2c>
 8005496:	e079      	b.n	800558c <updateClockState+0x120>
 8005498:	009a      	lsls	r2, r3, #2
 800549a:	4ba9      	ldr	r3, [pc, #676]	; (8005740 <updateClockState+0x2d4>)
 800549c:	18d3      	adds	r3, r2, r3
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	469f      	mov	pc, r3
				case 1: clockVars.timeToSet->min = (clockVars.timeToSet->min+1) % 60; break;
 80054a2:	4ba6      	ldr	r3, [pc, #664]	; (800573c <updateClockState+0x2d0>)
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	785b      	ldrb	r3, [r3, #1]
 80054a8:	3301      	adds	r3, #1
 80054aa:	213c      	movs	r1, #60	; 0x3c
 80054ac:	0018      	movs	r0, r3
 80054ae:	f7fa ffa3 	bl	80003f8 <__aeabi_idivmod>
 80054b2:	000b      	movs	r3, r1
 80054b4:	001a      	movs	r2, r3
 80054b6:	4ba1      	ldr	r3, [pc, #644]	; (800573c <updateClockState+0x2d0>)
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	b2d2      	uxtb	r2, r2
 80054bc:	705a      	strb	r2, [r3, #1]
 80054be:	e066      	b.n	800558e <updateClockState+0x122>
				case 2: clockVars.timeToSet->hr = (clockVars.timeToSet->hr+1) % 24; break;
 80054c0:	4b9e      	ldr	r3, [pc, #632]	; (800573c <updateClockState+0x2d0>)
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	3301      	adds	r3, #1
 80054c8:	2118      	movs	r1, #24
 80054ca:	0018      	movs	r0, r3
 80054cc:	f7fa ff94 	bl	80003f8 <__aeabi_idivmod>
 80054d0:	000b      	movs	r3, r1
 80054d2:	001a      	movs	r2, r3
 80054d4:	4b99      	ldr	r3, [pc, #612]	; (800573c <updateClockState+0x2d0>)
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	b2d2      	uxtb	r2, r2
 80054da:	701a      	strb	r2, [r3, #0]
 80054dc:	e057      	b.n	800558e <updateClockState+0x122>
				case 3: clockVars.dateToSet->yr = (clockVars.dateToSet->yr + 1) % 10000; break;		// fit in 4 characters
 80054de:	4b97      	ldr	r3, [pc, #604]	; (800573c <updateClockState+0x2d0>)
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	881b      	ldrh	r3, [r3, #0]
 80054e4:	3301      	adds	r3, #1
 80054e6:	4997      	ldr	r1, [pc, #604]	; (8005744 <updateClockState+0x2d8>)
 80054e8:	0018      	movs	r0, r3
 80054ea:	f7fa ff85 	bl	80003f8 <__aeabi_idivmod>
 80054ee:	000b      	movs	r3, r1
 80054f0:	001a      	movs	r2, r3
 80054f2:	4b92      	ldr	r3, [pc, #584]	; (800573c <updateClockState+0x2d0>)
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	b292      	uxth	r2, r2
 80054f8:	801a      	strh	r2, [r3, #0]
 80054fa:	e048      	b.n	800558e <updateClockState+0x122>
				case 4: clockVars.dateToSet->month = (clockVars.dateToSet->month) % 12 + 1; break;
 80054fc:	4b8f      	ldr	r3, [pc, #572]	; (800573c <updateClockState+0x2d0>)
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	789b      	ldrb	r3, [r3, #2]
 8005502:	210c      	movs	r1, #12
 8005504:	0018      	movs	r0, r3
 8005506:	f7fa fe8d 	bl	8000224 <__aeabi_uidivmod>
 800550a:	000b      	movs	r3, r1
 800550c:	b2da      	uxtb	r2, r3
 800550e:	4b8b      	ldr	r3, [pc, #556]	; (800573c <updateClockState+0x2d0>)
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	3201      	adds	r2, #1
 8005514:	b2d2      	uxtb	r2, r2
 8005516:	709a      	strb	r2, [r3, #2]
 8005518:	e039      	b.n	800558e <updateClockState+0x122>
				case 5: clockVars.dateToSet->date = ((clockVars.dateToSet->date) % maxDaysInMonth(clockVars.dateToSet->month, clockVars.dateToSet->yr)) + 1; break;
 800551a:	4b88      	ldr	r3, [pc, #544]	; (800573c <updateClockState+0x2d0>)
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	78dc      	ldrb	r4, [r3, #3]
 8005520:	4b86      	ldr	r3, [pc, #536]	; (800573c <updateClockState+0x2d0>)
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	789a      	ldrb	r2, [r3, #2]
 8005526:	4b85      	ldr	r3, [pc, #532]	; (800573c <updateClockState+0x2d0>)
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	881b      	ldrh	r3, [r3, #0]
 800552c:	0019      	movs	r1, r3
 800552e:	0010      	movs	r0, r2
 8005530:	f7fe fa00 	bl	8003934 <maxDaysInMonth>
 8005534:	0003      	movs	r3, r0
 8005536:	0019      	movs	r1, r3
 8005538:	0020      	movs	r0, r4
 800553a:	f7fa fe73 	bl	8000224 <__aeabi_uidivmod>
 800553e:	000b      	movs	r3, r1
 8005540:	b2da      	uxtb	r2, r3
 8005542:	4b7e      	ldr	r3, [pc, #504]	; (800573c <updateClockState+0x2d0>)
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	3201      	adds	r2, #1
 8005548:	b2d2      	uxtb	r2, r2
 800554a:	70da      	strb	r2, [r3, #3]
 800554c:	e01f      	b.n	800558e <updateClockState+0x122>
				default: break;
			}
		}
		else {
//			if (brightness < 100) brightness += 10;
			if (brightness == 50) brightness = 10;
 800554e:	4b7e      	ldr	r3, [pc, #504]	; (8005748 <updateClockState+0x2dc>)
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	b25b      	sxtb	r3, r3
 8005554:	2b32      	cmp	r3, #50	; 0x32
 8005556:	d103      	bne.n	8005560 <updateClockState+0xf4>
 8005558:	4b7b      	ldr	r3, [pc, #492]	; (8005748 <updateClockState+0x2dc>)
 800555a:	220a      	movs	r2, #10
 800555c:	701a      	strb	r2, [r3, #0]
 800555e:	e00b      	b.n	8005578 <updateClockState+0x10c>
			else if (brightness == 10) brightness = 0;
 8005560:	4b79      	ldr	r3, [pc, #484]	; (8005748 <updateClockState+0x2dc>)
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	b25b      	sxtb	r3, r3
 8005566:	2b0a      	cmp	r3, #10
 8005568:	d103      	bne.n	8005572 <updateClockState+0x106>
 800556a:	4b77      	ldr	r3, [pc, #476]	; (8005748 <updateClockState+0x2dc>)
 800556c:	2200      	movs	r2, #0
 800556e:	701a      	strb	r2, [r3, #0]
 8005570:	e002      	b.n	8005578 <updateClockState+0x10c>
			else brightness = 50;
 8005572:	4b75      	ldr	r3, [pc, #468]	; (8005748 <updateClockState+0x2dc>)
 8005574:	2232      	movs	r2, #50	; 0x32
 8005576:	701a      	strb	r2, [r3, #0]
			setDisplayBacklight(brightness, &htim3);
 8005578:	4b73      	ldr	r3, [pc, #460]	; (8005748 <updateClockState+0x2dc>)
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	b25b      	sxtb	r3, r3
 800557e:	b2db      	uxtb	r3, r3
 8005580:	4a72      	ldr	r2, [pc, #456]	; (800574c <updateClockState+0x2e0>)
 8005582:	0011      	movs	r1, r2
 8005584:	0018      	movs	r0, r3
 8005586:	f7ff fd0f 	bl	8004fa8 <setDisplayBacklight>
 800558a:	e000      	b.n	800558e <updateClockState+0x122>
				default: break;
 800558c:	46c0      	nop			; (mov r8, r8)
//			sleepMode();
		}
	}
	// change fields down, do nothing if not setting clock
	if (buttons.is3Pressed) {
 800558e:	4b69      	ldr	r3, [pc, #420]	; (8005734 <updateClockState+0x2c8>)
 8005590:	789b      	ldrb	r3, [r3, #2]
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b00      	cmp	r3, #0
 8005596:	d100      	bne.n	800559a <updateClockState+0x12e>
 8005598:	e068      	b.n	800566c <updateClockState+0x200>
		updateFace.clock = 1;
 800559a:	4b67      	ldr	r3, [pc, #412]	; (8005738 <updateClockState+0x2cc>)
 800559c:	2201      	movs	r2, #1
 800559e:	701a      	strb	r2, [r3, #0]
		if (clockVars.isBeingSet) {
 80055a0:	4b66      	ldr	r3, [pc, #408]	; (800573c <updateClockState+0x2d0>)
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d061      	beq.n	800566c <updateClockState+0x200>
			switch (clockVars.fieldBeingSet) {
 80055a8:	4b64      	ldr	r3, [pc, #400]	; (800573c <updateClockState+0x2d0>)
 80055aa:	785b      	ldrb	r3, [r3, #1]
 80055ac:	2b05      	cmp	r3, #5
 80055ae:	d85f      	bhi.n	8005670 <updateClockState+0x204>
 80055b0:	009a      	lsls	r2, r3, #2
 80055b2:	4b67      	ldr	r3, [pc, #412]	; (8005750 <updateClockState+0x2e4>)
 80055b4:	18d3      	adds	r3, r2, r3
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	469f      	mov	pc, r3
				case 1:
					if (clockVars.timeToSet->min == 0) clockVars.timeToSet->min = 59;
 80055ba:	4b60      	ldr	r3, [pc, #384]	; (800573c <updateClockState+0x2d0>)
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	785b      	ldrb	r3, [r3, #1]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d104      	bne.n	80055ce <updateClockState+0x162>
 80055c4:	4b5d      	ldr	r3, [pc, #372]	; (800573c <updateClockState+0x2d0>)
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	223b      	movs	r2, #59	; 0x3b
 80055ca:	705a      	strb	r2, [r3, #1]
					else clockVars.timeToSet->min--;
					break;
 80055cc:	e053      	b.n	8005676 <updateClockState+0x20a>
					else clockVars.timeToSet->min--;
 80055ce:	4b5b      	ldr	r3, [pc, #364]	; (800573c <updateClockState+0x2d0>)
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	785a      	ldrb	r2, [r3, #1]
 80055d4:	3a01      	subs	r2, #1
 80055d6:	b2d2      	uxtb	r2, r2
 80055d8:	705a      	strb	r2, [r3, #1]
					break;
 80055da:	e04c      	b.n	8005676 <updateClockState+0x20a>
				case 2:
					if (clockVars.timeToSet->hr == 0) clockVars.timeToSet->hr = 23;
 80055dc:	4b57      	ldr	r3, [pc, #348]	; (800573c <updateClockState+0x2d0>)
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d104      	bne.n	80055f0 <updateClockState+0x184>
 80055e6:	4b55      	ldr	r3, [pc, #340]	; (800573c <updateClockState+0x2d0>)
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	2217      	movs	r2, #23
 80055ec:	701a      	strb	r2, [r3, #0]
					else clockVars.timeToSet->hr--;
					break;
 80055ee:	e042      	b.n	8005676 <updateClockState+0x20a>
					else clockVars.timeToSet->hr--;
 80055f0:	4b52      	ldr	r3, [pc, #328]	; (800573c <updateClockState+0x2d0>)
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	781a      	ldrb	r2, [r3, #0]
 80055f6:	3a01      	subs	r2, #1
 80055f8:	b2d2      	uxtb	r2, r2
 80055fa:	701a      	strb	r2, [r3, #0]
					break;
 80055fc:	e03b      	b.n	8005676 <updateClockState+0x20a>
				case 3: if (clockVars.dateToSet->yr != 0) clockVars.dateToSet->yr--; break;		// limit to positive numbers. no wrap-around
 80055fe:	4b4f      	ldr	r3, [pc, #316]	; (800573c <updateClockState+0x2d0>)
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	881b      	ldrh	r3, [r3, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d035      	beq.n	8005674 <updateClockState+0x208>
 8005608:	4b4c      	ldr	r3, [pc, #304]	; (800573c <updateClockState+0x2d0>)
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	881a      	ldrh	r2, [r3, #0]
 800560e:	3a01      	subs	r2, #1
 8005610:	b292      	uxth	r2, r2
 8005612:	801a      	strh	r2, [r3, #0]
 8005614:	e02e      	b.n	8005674 <updateClockState+0x208>
				case 4: //clockVars.dateToSet->month = clockVars.dateToSet->month == 1 ? 12 : clockVars.dateToSet->month-1; break;
					if (clockVars.dateToSet->month == 1) clockVars.dateToSet->month = 12;
 8005616:	4b49      	ldr	r3, [pc, #292]	; (800573c <updateClockState+0x2d0>)
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	789b      	ldrb	r3, [r3, #2]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d104      	bne.n	800562a <updateClockState+0x1be>
 8005620:	4b46      	ldr	r3, [pc, #280]	; (800573c <updateClockState+0x2d0>)
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	220c      	movs	r2, #12
 8005626:	709a      	strb	r2, [r3, #2]
					else clockVars.dateToSet->month--;
					break;
 8005628:	e025      	b.n	8005676 <updateClockState+0x20a>
					else clockVars.dateToSet->month--;
 800562a:	4b44      	ldr	r3, [pc, #272]	; (800573c <updateClockState+0x2d0>)
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	789a      	ldrb	r2, [r3, #2]
 8005630:	3a01      	subs	r2, #1
 8005632:	b2d2      	uxtb	r2, r2
 8005634:	709a      	strb	r2, [r3, #2]
					break;
 8005636:	e01e      	b.n	8005676 <updateClockState+0x20a>
				case 5:
					if (clockVars.dateToSet->date == 1) clockVars.dateToSet->date = maxDaysInMonth(clockVars.dateToSet->month, clockVars.dateToSet->yr);
 8005638:	4b40      	ldr	r3, [pc, #256]	; (800573c <updateClockState+0x2d0>)
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	78db      	ldrb	r3, [r3, #3]
 800563e:	2b01      	cmp	r3, #1
 8005640:	d10d      	bne.n	800565e <updateClockState+0x1f2>
 8005642:	4b3e      	ldr	r3, [pc, #248]	; (800573c <updateClockState+0x2d0>)
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	789a      	ldrb	r2, [r3, #2]
 8005648:	4b3c      	ldr	r3, [pc, #240]	; (800573c <updateClockState+0x2d0>)
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	8819      	ldrh	r1, [r3, #0]
 800564e:	4b3b      	ldr	r3, [pc, #236]	; (800573c <updateClockState+0x2d0>)
 8005650:	685c      	ldr	r4, [r3, #4]
 8005652:	0010      	movs	r0, r2
 8005654:	f7fe f96e 	bl	8003934 <maxDaysInMonth>
 8005658:	0003      	movs	r3, r0
 800565a:	70e3      	strb	r3, [r4, #3]
					else clockVars.dateToSet->date--;
					break;
 800565c:	e00b      	b.n	8005676 <updateClockState+0x20a>
					else clockVars.dateToSet->date--;
 800565e:	4b37      	ldr	r3, [pc, #220]	; (800573c <updateClockState+0x2d0>)
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	78da      	ldrb	r2, [r3, #3]
 8005664:	3a01      	subs	r2, #1
 8005666:	b2d2      	uxtb	r2, r2
 8005668:	70da      	strb	r2, [r3, #3]
					break;
 800566a:	e004      	b.n	8005676 <updateClockState+0x20a>
				default: break;
			}
		}
 800566c:	46c0      	nop			; (mov r8, r8)
 800566e:	e002      	b.n	8005676 <updateClockState+0x20a>
				default: break;
 8005670:	46c0      	nop			; (mov r8, r8)
 8005672:	e000      	b.n	8005676 <updateClockState+0x20a>
				case 3: if (clockVars.dateToSet->yr != 0) clockVars.dateToSet->yr--; break;		// limit to positive numbers. no wrap-around
 8005674:	46c0      	nop			; (mov r8, r8)
	}
	// switches between setting mode and default mode. changes between different clock fields
	if (buttons.is4Pressed) {
 8005676:	4b2f      	ldr	r3, [pc, #188]	; (8005734 <updateClockState+0x2c8>)
 8005678:	78db      	ldrb	r3, [r3, #3]
 800567a:	b2db      	uxtb	r3, r3
 800567c:	2b00      	cmp	r3, #0
 800567e:	d054      	beq.n	800572a <updateClockState+0x2be>
		updateFace.clock = 1;
 8005680:	4b2d      	ldr	r3, [pc, #180]	; (8005738 <updateClockState+0x2cc>)
 8005682:	2201      	movs	r2, #1
 8005684:	701a      	strb	r2, [r3, #0]
		clockVars.fieldBeingSet = (clockVars.fieldBeingSet + 1) % (NUM_CLOCKFIELDS + 1);
 8005686:	4b2d      	ldr	r3, [pc, #180]	; (800573c <updateClockState+0x2d0>)
 8005688:	785b      	ldrb	r3, [r3, #1]
 800568a:	3301      	adds	r3, #1
 800568c:	2106      	movs	r1, #6
 800568e:	0018      	movs	r0, r3
 8005690:	f7fa feb2 	bl	80003f8 <__aeabi_idivmod>
 8005694:	000b      	movs	r3, r1
 8005696:	b2da      	uxtb	r2, r3
 8005698:	4b28      	ldr	r3, [pc, #160]	; (800573c <updateClockState+0x2d0>)
 800569a:	705a      	strb	r2, [r3, #1]
		if (clockVars.fieldBeingSet != 0) {
 800569c:	4b27      	ldr	r3, [pc, #156]	; (800573c <updateClockState+0x2d0>)
 800569e:	785b      	ldrb	r3, [r3, #1]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d033      	beq.n	800570c <updateClockState+0x2a0>
			clockVars.isBeingSet = 1;
 80056a4:	4b25      	ldr	r3, [pc, #148]	; (800573c <updateClockState+0x2d0>)
 80056a6:	2201      	movs	r2, #1
 80056a8:	701a      	strb	r2, [r3, #0]

			// should pull current time when first entering setting mode
			if (clockVars.fieldBeingSet == 1) {
 80056aa:	4b24      	ldr	r3, [pc, #144]	; (800573c <updateClockState+0x2d0>)
 80056ac:	785b      	ldrb	r3, [r3, #1]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d10e      	bne.n	80056d0 <updateClockState+0x264>
				getDateTime(clockVars.dateToSet, clockVars.timeToSet, hrtc);
 80056b2:	4b22      	ldr	r3, [pc, #136]	; (800573c <updateClockState+0x2d0>)
 80056b4:	6858      	ldr	r0, [r3, #4]
 80056b6:	4b21      	ldr	r3, [pc, #132]	; (800573c <updateClockState+0x2d0>)
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	0019      	movs	r1, r3
 80056be:	f7fd fff7 	bl	80036b0 <getDateTime>
				HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_B);
 80056c2:	2380      	movs	r3, #128	; 0x80
 80056c4:	009a      	lsls	r2, r3, #2
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	0011      	movs	r1, r2
 80056ca:	0018      	movs	r0, r3
 80056cc:	f004 fdec 	bl	800a2a8 <HAL_RTC_DeactivateAlarm>
			}

			if (clockVars.dateToSet->date > maxDaysInMonth(clockVars.dateToSet->month, clockVars.dateToSet->yr)) {
 80056d0:	4b1a      	ldr	r3, [pc, #104]	; (800573c <updateClockState+0x2d0>)
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	78dc      	ldrb	r4, [r3, #3]
 80056d6:	4b19      	ldr	r3, [pc, #100]	; (800573c <updateClockState+0x2d0>)
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	789a      	ldrb	r2, [r3, #2]
 80056dc:	4b17      	ldr	r3, [pc, #92]	; (800573c <updateClockState+0x2d0>)
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	881b      	ldrh	r3, [r3, #0]
 80056e2:	0019      	movs	r1, r3
 80056e4:	0010      	movs	r0, r2
 80056e6:	f7fe f925 	bl	8003934 <maxDaysInMonth>
 80056ea:	0003      	movs	r3, r0
 80056ec:	429c      	cmp	r4, r3
 80056ee:	d91c      	bls.n	800572a <updateClockState+0x2be>
				clockVars.dateToSet->date = maxDaysInMonth(clockVars.dateToSet->month, clockVars.dateToSet->yr);
 80056f0:	4b12      	ldr	r3, [pc, #72]	; (800573c <updateClockState+0x2d0>)
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	789a      	ldrb	r2, [r3, #2]
 80056f6:	4b11      	ldr	r3, [pc, #68]	; (800573c <updateClockState+0x2d0>)
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	8819      	ldrh	r1, [r3, #0]
 80056fc:	4b0f      	ldr	r3, [pc, #60]	; (800573c <updateClockState+0x2d0>)
 80056fe:	685c      	ldr	r4, [r3, #4]
 8005700:	0010      	movs	r0, r2
 8005702:	f7fe f917 	bl	8003934 <maxDaysInMonth>
 8005706:	0003      	movs	r3, r0
 8005708:	70e3      	strb	r3, [r4, #3]
			// second set to 0, weekday ignored
			setDateTime(clockVars.dateToSet, clockVars.timeToSet, hrtc);
			setClockAlarm(hrtc);
		}
	}
}
 800570a:	e00e      	b.n	800572a <updateClockState+0x2be>
			clockVars.isBeingSet = 0;
 800570c:	4b0b      	ldr	r3, [pc, #44]	; (800573c <updateClockState+0x2d0>)
 800570e:	2200      	movs	r2, #0
 8005710:	701a      	strb	r2, [r3, #0]
			setDateTime(clockVars.dateToSet, clockVars.timeToSet, hrtc);
 8005712:	4b0a      	ldr	r3, [pc, #40]	; (800573c <updateClockState+0x2d0>)
 8005714:	6858      	ldr	r0, [r3, #4]
 8005716:	4b09      	ldr	r3, [pc, #36]	; (800573c <updateClockState+0x2d0>)
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	0019      	movs	r1, r3
 800571e:	f7fd fd97 	bl	8003250 <setDateTime>
			setClockAlarm(hrtc);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	0018      	movs	r0, r3
 8005726:	f7fd fdff 	bl	8003328 <setClockAlarm>
}
 800572a:	46c0      	nop			; (mov r8, r8)
 800572c:	46bd      	mov	sp, r7
 800572e:	b003      	add	sp, #12
 8005730:	bd90      	pop	{r4, r7, pc}
 8005732:	46c0      	nop			; (mov r8, r8)
 8005734:	200001b0 	.word	0x200001b0
 8005738:	20000164 	.word	0x20000164
 800573c:	20000124 	.word	0x20000124
 8005740:	0800d590 	.word	0x0800d590
 8005744:	00002710 	.word	0x00002710
 8005748:	20000079 	.word	0x20000079
 800574c:	20000214 	.word	0x20000214
 8005750:	0800d5a8 	.word	0x0800d5a8

08005754 <updateTimerState>:
 *   button 2 changes value up
 *   button 3 changes value down
 *   button 4 changes field being set. changes between sec, min, hr. returns to default mode after
 *     cycling through fields once.
 */
void updateTimerState(TIM_HandleTypeDef *timerStopwatchTim, TIM_HandleTypeDef *motorTim) {
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
	// check which button is pressed -> perform action
	if (buttons.is2Pressed) {
 800575e:	4b93      	ldr	r3, [pc, #588]	; (80059ac <updateTimerState+0x258>)
 8005760:	785b      	ldrb	r3, [r3, #1]
 8005762:	b2db      	uxtb	r3, r3
 8005764:	2b00      	cmp	r3, #0
 8005766:	d057      	beq.n	8005818 <updateTimerState+0xc4>
		updateFace.timer = 1;
 8005768:	4b91      	ldr	r3, [pc, #580]	; (80059b0 <updateTimerState+0x25c>)
 800576a:	2201      	movs	r2, #1
 800576c:	705a      	strb	r2, [r3, #1]
		if (timerVars.isBeingSet) {
 800576e:	4b91      	ldr	r3, [pc, #580]	; (80059b4 <updateTimerState+0x260>)
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d035      	beq.n	80057e2 <updateTimerState+0x8e>
			// set field up
			switch (timerVars.fieldBeingSet) {
 8005776:	4b8f      	ldr	r3, [pc, #572]	; (80059b4 <updateTimerState+0x260>)
 8005778:	785b      	ldrb	r3, [r3, #1]
 800577a:	2b02      	cmp	r3, #2
 800577c:	d013      	beq.n	80057a6 <updateTimerState+0x52>
 800577e:	2b03      	cmp	r3, #3
 8005780:	d020      	beq.n	80057c4 <updateTimerState+0x70>
 8005782:	2b01      	cmp	r3, #1
 8005784:	d000      	beq.n	8005788 <updateTimerState+0x34>
				case 1: timerVars.timeToSet->sec = (timerVars.timeToSet->sec+1) % 60; break;
				case 2: timerVars.timeToSet->min = (timerVars.timeToSet->min+1) % 60; break;
				case 3: timerVars.timeToSet->hr = (timerVars.timeToSet->hr+1) % 100; break;
				default: break;
 8005786:	e10d      	b.n	80059a4 <updateTimerState+0x250>
				case 1: timerVars.timeToSet->sec = (timerVars.timeToSet->sec+1) % 60; break;
 8005788:	4b8a      	ldr	r3, [pc, #552]	; (80059b4 <updateTimerState+0x260>)
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	789b      	ldrb	r3, [r3, #2]
 800578e:	3301      	adds	r3, #1
 8005790:	213c      	movs	r1, #60	; 0x3c
 8005792:	0018      	movs	r0, r3
 8005794:	f7fa fe30 	bl	80003f8 <__aeabi_idivmod>
 8005798:	000b      	movs	r3, r1
 800579a:	001a      	movs	r2, r3
 800579c:	4b85      	ldr	r3, [pc, #532]	; (80059b4 <updateTimerState+0x260>)
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	b2d2      	uxtb	r2, r2
 80057a2:	709a      	strb	r2, [r3, #2]
 80057a4:	e0fe      	b.n	80059a4 <updateTimerState+0x250>
				case 2: timerVars.timeToSet->min = (timerVars.timeToSet->min+1) % 60; break;
 80057a6:	4b83      	ldr	r3, [pc, #524]	; (80059b4 <updateTimerState+0x260>)
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	785b      	ldrb	r3, [r3, #1]
 80057ac:	3301      	adds	r3, #1
 80057ae:	213c      	movs	r1, #60	; 0x3c
 80057b0:	0018      	movs	r0, r3
 80057b2:	f7fa fe21 	bl	80003f8 <__aeabi_idivmod>
 80057b6:	000b      	movs	r3, r1
 80057b8:	001a      	movs	r2, r3
 80057ba:	4b7e      	ldr	r3, [pc, #504]	; (80059b4 <updateTimerState+0x260>)
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	b2d2      	uxtb	r2, r2
 80057c0:	705a      	strb	r2, [r3, #1]
 80057c2:	e0ef      	b.n	80059a4 <updateTimerState+0x250>
				case 3: timerVars.timeToSet->hr = (timerVars.timeToSet->hr+1) % 100; break;
 80057c4:	4b7b      	ldr	r3, [pc, #492]	; (80059b4 <updateTimerState+0x260>)
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	3301      	adds	r3, #1
 80057cc:	2164      	movs	r1, #100	; 0x64
 80057ce:	0018      	movs	r0, r3
 80057d0:	f7fa fe12 	bl	80003f8 <__aeabi_idivmod>
 80057d4:	000b      	movs	r3, r1
 80057d6:	001a      	movs	r2, r3
 80057d8:	4b76      	ldr	r3, [pc, #472]	; (80059b4 <updateTimerState+0x260>)
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	b2d2      	uxtb	r2, r2
 80057de:	701a      	strb	r2, [r3, #0]
 80057e0:	e0e0      	b.n	80059a4 <updateTimerState+0x250>
			}
		}
		else if (timerVars.isSet && isTimerRunning == 0 && timerCounter != 0) {
 80057e2:	4b74      	ldr	r3, [pc, #464]	; (80059b4 <updateTimerState+0x260>)
 80057e4:	789b      	ldrb	r3, [r3, #2]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d100      	bne.n	80057ec <updateTimerState+0x98>
 80057ea:	e0db      	b.n	80059a4 <updateTimerState+0x250>
 80057ec:	4b72      	ldr	r3, [pc, #456]	; (80059b8 <updateTimerState+0x264>)
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d000      	beq.n	80057f8 <updateTimerState+0xa4>
 80057f6:	e0d5      	b.n	80059a4 <updateTimerState+0x250>
 80057f8:	4b70      	ldr	r3, [pc, #448]	; (80059bc <updateTimerState+0x268>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d100      	bne.n	8005802 <updateTimerState+0xae>
 8005800:	e0d0      	b.n	80059a4 <updateTimerState+0x250>
			// start timer
			runTimer(timerStopwatchTim);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	0018      	movs	r0, r3
 8005806:	f7ff fa4b 	bl	8004ca0 <runTimer>
			isTimerRunning = 1;
 800580a:	4b6b      	ldr	r3, [pc, #428]	; (80059b8 <updateTimerState+0x264>)
 800580c:	2201      	movs	r2, #1
 800580e:	701a      	strb	r2, [r3, #0]
			isTimerPaused = 0;
 8005810:	4b6b      	ldr	r3, [pc, #428]	; (80059c0 <updateTimerState+0x26c>)
 8005812:	2200      	movs	r2, #0
 8005814:	701a      	strb	r2, [r3, #0]
				timerVars.isBeingSet = 0;
				timerVars.isSet = 0;
			}
		}
	}
}
 8005816:	e0c5      	b.n	80059a4 <updateTimerState+0x250>
	else if (buttons.is3Pressed) {
 8005818:	4b64      	ldr	r3, [pc, #400]	; (80059ac <updateTimerState+0x258>)
 800581a:	789b      	ldrb	r3, [r3, #2]
 800581c:	b2db      	uxtb	r3, r3
 800581e:	2b00      	cmp	r3, #0
 8005820:	d05d      	beq.n	80058de <updateTimerState+0x18a>
		updateFace.timer = 1;
 8005822:	4b63      	ldr	r3, [pc, #396]	; (80059b0 <updateTimerState+0x25c>)
 8005824:	2201      	movs	r2, #1
 8005826:	705a      	strb	r2, [r3, #1]
		if (timerVars.isBeingSet) {
 8005828:	4b62      	ldr	r3, [pc, #392]	; (80059b4 <updateTimerState+0x260>)
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d03b      	beq.n	80058a8 <updateTimerState+0x154>
			switch (timerVars.fieldBeingSet) {
 8005830:	4b60      	ldr	r3, [pc, #384]	; (80059b4 <updateTimerState+0x260>)
 8005832:	785b      	ldrb	r3, [r3, #1]
 8005834:	2b02      	cmp	r3, #2
 8005836:	d015      	beq.n	8005864 <updateTimerState+0x110>
 8005838:	2b03      	cmp	r3, #3
 800583a:	d024      	beq.n	8005886 <updateTimerState+0x132>
 800583c:	2b01      	cmp	r3, #1
 800583e:	d000      	beq.n	8005842 <updateTimerState+0xee>
				default: break;
 8005840:	e0b0      	b.n	80059a4 <updateTimerState+0x250>
					if (timerVars.timeToSet->sec == 0) timerVars.timeToSet->sec = 59;
 8005842:	4b5c      	ldr	r3, [pc, #368]	; (80059b4 <updateTimerState+0x260>)
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	789b      	ldrb	r3, [r3, #2]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d104      	bne.n	8005856 <updateTimerState+0x102>
 800584c:	4b59      	ldr	r3, [pc, #356]	; (80059b4 <updateTimerState+0x260>)
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	223b      	movs	r2, #59	; 0x3b
 8005852:	709a      	strb	r2, [r3, #2]
					break;
 8005854:	e0a6      	b.n	80059a4 <updateTimerState+0x250>
					else timerVars.timeToSet->sec--;
 8005856:	4b57      	ldr	r3, [pc, #348]	; (80059b4 <updateTimerState+0x260>)
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	789a      	ldrb	r2, [r3, #2]
 800585c:	3a01      	subs	r2, #1
 800585e:	b2d2      	uxtb	r2, r2
 8005860:	709a      	strb	r2, [r3, #2]
					break;
 8005862:	e09f      	b.n	80059a4 <updateTimerState+0x250>
					if (timerVars.timeToSet->min == 0) timerVars.timeToSet->min = 59;
 8005864:	4b53      	ldr	r3, [pc, #332]	; (80059b4 <updateTimerState+0x260>)
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	785b      	ldrb	r3, [r3, #1]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d104      	bne.n	8005878 <updateTimerState+0x124>
 800586e:	4b51      	ldr	r3, [pc, #324]	; (80059b4 <updateTimerState+0x260>)
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	223b      	movs	r2, #59	; 0x3b
 8005874:	705a      	strb	r2, [r3, #1]
					break;
 8005876:	e095      	b.n	80059a4 <updateTimerState+0x250>
					else timerVars.timeToSet->min--;
 8005878:	4b4e      	ldr	r3, [pc, #312]	; (80059b4 <updateTimerState+0x260>)
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	785a      	ldrb	r2, [r3, #1]
 800587e:	3a01      	subs	r2, #1
 8005880:	b2d2      	uxtb	r2, r2
 8005882:	705a      	strb	r2, [r3, #1]
					break;
 8005884:	e08e      	b.n	80059a4 <updateTimerState+0x250>
					if (timerVars.timeToSet->hr == 0) timerVars.timeToSet->hr = 99;		// no limit on hour, since we're not using day
 8005886:	4b4b      	ldr	r3, [pc, #300]	; (80059b4 <updateTimerState+0x260>)
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d104      	bne.n	800589a <updateTimerState+0x146>
 8005890:	4b48      	ldr	r3, [pc, #288]	; (80059b4 <updateTimerState+0x260>)
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	2263      	movs	r2, #99	; 0x63
 8005896:	701a      	strb	r2, [r3, #0]
					break;
 8005898:	e084      	b.n	80059a4 <updateTimerState+0x250>
					else timerVars.timeToSet->hr--;
 800589a:	4b46      	ldr	r3, [pc, #280]	; (80059b4 <updateTimerState+0x260>)
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	781a      	ldrb	r2, [r3, #0]
 80058a0:	3a01      	subs	r2, #1
 80058a2:	b2d2      	uxtb	r2, r2
 80058a4:	701a      	strb	r2, [r3, #0]
					break;
 80058a6:	e07d      	b.n	80059a4 <updateTimerState+0x250>
		else if (timerVars.isSet && isTimerRunning && timerCounter != 0) {
 80058a8:	4b42      	ldr	r3, [pc, #264]	; (80059b4 <updateTimerState+0x260>)
 80058aa:	789b      	ldrb	r3, [r3, #2]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d100      	bne.n	80058b2 <updateTimerState+0x15e>
 80058b0:	e078      	b.n	80059a4 <updateTimerState+0x250>
 80058b2:	4b41      	ldr	r3, [pc, #260]	; (80059b8 <updateTimerState+0x264>)
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d100      	bne.n	80058be <updateTimerState+0x16a>
 80058bc:	e072      	b.n	80059a4 <updateTimerState+0x250>
 80058be:	4b3f      	ldr	r3, [pc, #252]	; (80059bc <updateTimerState+0x268>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d100      	bne.n	80058c8 <updateTimerState+0x174>
 80058c6:	e06d      	b.n	80059a4 <updateTimerState+0x250>
			pauseTimer(timerStopwatchTim);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	0018      	movs	r0, r3
 80058cc:	f7ff fa46 	bl	8004d5c <pauseTimer>
			isTimerRunning = 0;
 80058d0:	4b39      	ldr	r3, [pc, #228]	; (80059b8 <updateTimerState+0x264>)
 80058d2:	2200      	movs	r2, #0
 80058d4:	701a      	strb	r2, [r3, #0]
			isTimerPaused = 1;
 80058d6:	4b3a      	ldr	r3, [pc, #232]	; (80059c0 <updateTimerState+0x26c>)
 80058d8:	2201      	movs	r2, #1
 80058da:	701a      	strb	r2, [r3, #0]
}
 80058dc:	e062      	b.n	80059a4 <updateTimerState+0x250>
	else if (buttons.is4Pressed) {
 80058de:	4b33      	ldr	r3, [pc, #204]	; (80059ac <updateTimerState+0x258>)
 80058e0:	78db      	ldrb	r3, [r3, #3]
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d05d      	beq.n	80059a4 <updateTimerState+0x250>
		updateFace.timer = 1;
 80058e8:	4b31      	ldr	r3, [pc, #196]	; (80059b0 <updateTimerState+0x25c>)
 80058ea:	2201      	movs	r2, #1
 80058ec:	705a      	strb	r2, [r3, #1]
		if (timerVars.isSet) {
 80058ee:	4b31      	ldr	r3, [pc, #196]	; (80059b4 <updateTimerState+0x260>)
 80058f0:	789b      	ldrb	r3, [r3, #2]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00d      	beq.n	8005912 <updateTimerState+0x1be>
			stopTimer(timerStopwatchTim);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	0018      	movs	r0, r3
 80058fa:	f7ff fa45 	bl	8004d88 <stopTimer>
			timerVars.isSet = 0;
 80058fe:	4b2d      	ldr	r3, [pc, #180]	; (80059b4 <updateTimerState+0x260>)
 8005900:	2200      	movs	r2, #0
 8005902:	709a      	strb	r2, [r3, #2]
			isTimerRunning = 0;
 8005904:	4b2c      	ldr	r3, [pc, #176]	; (80059b8 <updateTimerState+0x264>)
 8005906:	2200      	movs	r2, #0
 8005908:	701a      	strb	r2, [r3, #0]
			isTimerPaused = 0;
 800590a:	4b2d      	ldr	r3, [pc, #180]	; (80059c0 <updateTimerState+0x26c>)
 800590c:	2200      	movs	r2, #0
 800590e:	701a      	strb	r2, [r3, #0]
}
 8005910:	e048      	b.n	80059a4 <updateTimerState+0x250>
			timerVars.fieldBeingSet = (timerVars.fieldBeingSet + 1) % (NUM_TIMERFIELDS + 1);
 8005912:	4b28      	ldr	r3, [pc, #160]	; (80059b4 <updateTimerState+0x260>)
 8005914:	785b      	ldrb	r3, [r3, #1]
 8005916:	3301      	adds	r3, #1
 8005918:	4a2a      	ldr	r2, [pc, #168]	; (80059c4 <updateTimerState+0x270>)
 800591a:	4013      	ands	r3, r2
 800591c:	d504      	bpl.n	8005928 <updateTimerState+0x1d4>
 800591e:	3b01      	subs	r3, #1
 8005920:	2204      	movs	r2, #4
 8005922:	4252      	negs	r2, r2
 8005924:	4313      	orrs	r3, r2
 8005926:	3301      	adds	r3, #1
 8005928:	b2da      	uxtb	r2, r3
 800592a:	4b22      	ldr	r3, [pc, #136]	; (80059b4 <updateTimerState+0x260>)
 800592c:	705a      	strb	r2, [r3, #1]
			if (timerVars.fieldBeingSet != 0) {
 800592e:	4b21      	ldr	r3, [pc, #132]	; (80059b4 <updateTimerState+0x260>)
 8005930:	785b      	ldrb	r3, [r3, #1]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d016      	beq.n	8005964 <updateTimerState+0x210>
				timerVars.isBeingSet = 1;
 8005936:	4b1f      	ldr	r3, [pc, #124]	; (80059b4 <updateTimerState+0x260>)
 8005938:	2201      	movs	r2, #1
 800593a:	701a      	strb	r2, [r3, #0]
				timerVars.isSet = 0;
 800593c:	4b1d      	ldr	r3, [pc, #116]	; (80059b4 <updateTimerState+0x260>)
 800593e:	2200      	movs	r2, #0
 8005940:	709a      	strb	r2, [r3, #2]
				if (timerVars.fieldBeingSet == 1) {
 8005942:	4b1c      	ldr	r3, [pc, #112]	; (80059b4 <updateTimerState+0x260>)
 8005944:	785b      	ldrb	r3, [r3, #1]
 8005946:	2b01      	cmp	r3, #1
 8005948:	d12c      	bne.n	80059a4 <updateTimerState+0x250>
					timerVars.timeToSet->sec = 0;
 800594a:	4b1a      	ldr	r3, [pc, #104]	; (80059b4 <updateTimerState+0x260>)
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	709a      	strb	r2, [r3, #2]
					timerVars.timeToSet->min = 0;
 8005952:	4b18      	ldr	r3, [pc, #96]	; (80059b4 <updateTimerState+0x260>)
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	705a      	strb	r2, [r3, #1]
					timerVars.timeToSet->hr = 0;
 800595a:	4b16      	ldr	r3, [pc, #88]	; (80059b4 <updateTimerState+0x260>)
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	701a      	strb	r2, [r3, #0]
}
 8005962:	e01f      	b.n	80059a4 <updateTimerState+0x250>
			else if (timeToSeconds(timerVars.timeToSet) != 0) {
 8005964:	4b13      	ldr	r3, [pc, #76]	; (80059b4 <updateTimerState+0x260>)
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	0018      	movs	r0, r3
 800596a:	f7fd ff41 	bl	80037f0 <timeToSeconds>
 800596e:	1e03      	subs	r3, r0, #0
 8005970:	d011      	beq.n	8005996 <updateTimerState+0x242>
				timerVars.isBeingSet = 0;
 8005972:	4b10      	ldr	r3, [pc, #64]	; (80059b4 <updateTimerState+0x260>)
 8005974:	2200      	movs	r2, #0
 8005976:	701a      	strb	r2, [r3, #0]
				timerVars.isSet = 1;
 8005978:	4b0e      	ldr	r3, [pc, #56]	; (80059b4 <updateTimerState+0x260>)
 800597a:	2201      	movs	r2, #1
 800597c:	709a      	strb	r2, [r3, #2]
				isTimerDone = 0;
 800597e:	4b12      	ldr	r3, [pc, #72]	; (80059c8 <updateTimerState+0x274>)
 8005980:	2200      	movs	r2, #0
 8005982:	701a      	strb	r2, [r3, #0]
				timerCounter = timeToSeconds(timerVars.timeToSet);
 8005984:	4b0b      	ldr	r3, [pc, #44]	; (80059b4 <updateTimerState+0x260>)
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	0018      	movs	r0, r3
 800598a:	f7fd ff31 	bl	80037f0 <timeToSeconds>
 800598e:	0002      	movs	r2, r0
 8005990:	4b0a      	ldr	r3, [pc, #40]	; (80059bc <updateTimerState+0x268>)
 8005992:	601a      	str	r2, [r3, #0]
}
 8005994:	e006      	b.n	80059a4 <updateTimerState+0x250>
				timerVars.isBeingSet = 0;
 8005996:	4b07      	ldr	r3, [pc, #28]	; (80059b4 <updateTimerState+0x260>)
 8005998:	2200      	movs	r2, #0
 800599a:	701a      	strb	r2, [r3, #0]
				timerVars.isSet = 0;
 800599c:	4b05      	ldr	r3, [pc, #20]	; (80059b4 <updateTimerState+0x260>)
 800599e:	2200      	movs	r2, #0
 80059a0:	709a      	strb	r2, [r3, #2]
}
 80059a2:	e7ff      	b.n	80059a4 <updateTimerState+0x250>
 80059a4:	46c0      	nop			; (mov r8, r8)
 80059a6:	46bd      	mov	sp, r7
 80059a8:	b002      	add	sp, #8
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	200001b0 	.word	0x200001b0
 80059b0:	20000164 	.word	0x20000164
 80059b4:	20000130 	.word	0x20000130
 80059b8:	200001b4 	.word	0x200001b4
 80059bc:	2000016c 	.word	0x2000016c
 80059c0:	200001b6 	.word	0x200001b6
 80059c4:	80000003 	.word	0x80000003
 80059c8:	20000170 	.word	0x20000170

080059cc <updateAlarmState>:
 *   button 2 changes value up
 *   button 3 changes value down
 *   button 4 changes field being set. changes between sec, min, hr. returns to default mode after
 *     cycling through fields once.
 */
void updateAlarmState(RTC_HandleTypeDef *hrtc, TIM_HandleTypeDef *motorTim) {
 80059cc:	b5b0      	push	{r4, r5, r7, lr}
 80059ce:	b086      	sub	sp, #24
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
	// check button pressed -> perform action
	if (buttons.is2Pressed && alarmVars.isBeingSet) {
 80059d6:	4b90      	ldr	r3, [pc, #576]	; (8005c18 <updateAlarmState+0x24c>)
 80059d8:	785b      	ldrb	r3, [r3, #1]
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d04f      	beq.n	8005a80 <updateAlarmState+0xb4>
 80059e0:	4b8e      	ldr	r3, [pc, #568]	; (8005c1c <updateAlarmState+0x250>)
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d04b      	beq.n	8005a80 <updateAlarmState+0xb4>
		updateFace.alarm = 1;
 80059e8:	4b8d      	ldr	r3, [pc, #564]	; (8005c20 <updateAlarmState+0x254>)
 80059ea:	2201      	movs	r2, #1
 80059ec:	709a      	strb	r2, [r3, #2]

		// change fields up
		switch (alarmVars.fieldBeingSet) {
 80059ee:	4b8b      	ldr	r3, [pc, #556]	; (8005c1c <updateAlarmState+0x250>)
 80059f0:	785b      	ldrb	r3, [r3, #1]
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d017      	beq.n	8005a26 <updateAlarmState+0x5a>
 80059f6:	dc02      	bgt.n	80059fe <updateAlarmState+0x32>
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d005      	beq.n	8005a08 <updateAlarmState+0x3c>
			case 1: alarmVars.alarmToSet->sec = (alarmVars.alarmToSet->sec + 1) % 60; break;
			case 2: alarmVars.alarmToSet->min = (alarmVars.alarmToSet->min + 1) % 60; break;
			case 3: alarmVars.alarmToSet->hr = (alarmVars.alarmToSet->hr + 1) % 24; break;
			case 4: alarmVars.alarmToSet->weekday = (alarmVars.alarmToSet->weekday) % 7 + 1; break;
			default: break;
 80059fc:	e041      	b.n	8005a82 <updateAlarmState+0xb6>
		switch (alarmVars.fieldBeingSet) {
 80059fe:	2b03      	cmp	r3, #3
 8005a00:	d020      	beq.n	8005a44 <updateAlarmState+0x78>
 8005a02:	2b04      	cmp	r3, #4
 8005a04:	d02d      	beq.n	8005a62 <updateAlarmState+0x96>
			default: break;
 8005a06:	e03c      	b.n	8005a82 <updateAlarmState+0xb6>
			case 1: alarmVars.alarmToSet->sec = (alarmVars.alarmToSet->sec + 1) % 60; break;
 8005a08:	4b84      	ldr	r3, [pc, #528]	; (8005c1c <updateAlarmState+0x250>)
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	789b      	ldrb	r3, [r3, #2]
 8005a0e:	3301      	adds	r3, #1
 8005a10:	213c      	movs	r1, #60	; 0x3c
 8005a12:	0018      	movs	r0, r3
 8005a14:	f7fa fcf0 	bl	80003f8 <__aeabi_idivmod>
 8005a18:	000b      	movs	r3, r1
 8005a1a:	001a      	movs	r2, r3
 8005a1c:	4b7f      	ldr	r3, [pc, #508]	; (8005c1c <updateAlarmState+0x250>)
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	b2d2      	uxtb	r2, r2
 8005a22:	709a      	strb	r2, [r3, #2]
 8005a24:	e02d      	b.n	8005a82 <updateAlarmState+0xb6>
			case 2: alarmVars.alarmToSet->min = (alarmVars.alarmToSet->min + 1) % 60; break;
 8005a26:	4b7d      	ldr	r3, [pc, #500]	; (8005c1c <updateAlarmState+0x250>)
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	785b      	ldrb	r3, [r3, #1]
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	213c      	movs	r1, #60	; 0x3c
 8005a30:	0018      	movs	r0, r3
 8005a32:	f7fa fce1 	bl	80003f8 <__aeabi_idivmod>
 8005a36:	000b      	movs	r3, r1
 8005a38:	001a      	movs	r2, r3
 8005a3a:	4b78      	ldr	r3, [pc, #480]	; (8005c1c <updateAlarmState+0x250>)
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	b2d2      	uxtb	r2, r2
 8005a40:	705a      	strb	r2, [r3, #1]
 8005a42:	e01e      	b.n	8005a82 <updateAlarmState+0xb6>
			case 3: alarmVars.alarmToSet->hr = (alarmVars.alarmToSet->hr + 1) % 24; break;
 8005a44:	4b75      	ldr	r3, [pc, #468]	; (8005c1c <updateAlarmState+0x250>)
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	2118      	movs	r1, #24
 8005a4e:	0018      	movs	r0, r3
 8005a50:	f7fa fcd2 	bl	80003f8 <__aeabi_idivmod>
 8005a54:	000b      	movs	r3, r1
 8005a56:	001a      	movs	r2, r3
 8005a58:	4b70      	ldr	r3, [pc, #448]	; (8005c1c <updateAlarmState+0x250>)
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	b2d2      	uxtb	r2, r2
 8005a5e:	701a      	strb	r2, [r3, #0]
 8005a60:	e00f      	b.n	8005a82 <updateAlarmState+0xb6>
			case 4: alarmVars.alarmToSet->weekday = (alarmVars.alarmToSet->weekday) % 7 + 1; break;
 8005a62:	4b6e      	ldr	r3, [pc, #440]	; (8005c1c <updateAlarmState+0x250>)
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	78db      	ldrb	r3, [r3, #3]
 8005a68:	2107      	movs	r1, #7
 8005a6a:	0018      	movs	r0, r3
 8005a6c:	f7fa fbda 	bl	8000224 <__aeabi_uidivmod>
 8005a70:	000b      	movs	r3, r1
 8005a72:	b2da      	uxtb	r2, r3
 8005a74:	4b69      	ldr	r3, [pc, #420]	; (8005c1c <updateAlarmState+0x250>)
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	3201      	adds	r2, #1
 8005a7a:	b2d2      	uxtb	r2, r2
 8005a7c:	70da      	strb	r2, [r3, #3]
 8005a7e:	e000      	b.n	8005a82 <updateAlarmState+0xb6>
		}
	}
 8005a80:	46c0      	nop			; (mov r8, r8)
	if (buttons.is3Pressed && alarmVars.isBeingSet) {
 8005a82:	4b65      	ldr	r3, [pc, #404]	; (8005c18 <updateAlarmState+0x24c>)
 8005a84:	789b      	ldrb	r3, [r3, #2]
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d057      	beq.n	8005b3c <updateAlarmState+0x170>
 8005a8c:	4b63      	ldr	r3, [pc, #396]	; (8005c1c <updateAlarmState+0x250>)
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d053      	beq.n	8005b3c <updateAlarmState+0x170>
		updateFace.alarm = 1;
 8005a94:	4b62      	ldr	r3, [pc, #392]	; (8005c20 <updateAlarmState+0x254>)
 8005a96:	2201      	movs	r2, #1
 8005a98:	709a      	strb	r2, [r3, #2]

		// change fields down
		switch (alarmVars.fieldBeingSet) {
 8005a9a:	4b60      	ldr	r3, [pc, #384]	; (8005c1c <updateAlarmState+0x250>)
 8005a9c:	785b      	ldrb	r3, [r3, #1]
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d019      	beq.n	8005ad6 <updateAlarmState+0x10a>
 8005aa2:	dc02      	bgt.n	8005aaa <updateAlarmState+0xde>
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d005      	beq.n	8005ab4 <updateAlarmState+0xe8>
				break;
			case 4:
				if (alarmVars.alarmToSet->weekday == RTC_WEEKDAY_MONDAY) alarmVars.alarmToSet->weekday = RTC_WEEKDAY_SUNDAY;
				else alarmVars.alarmToSet->weekday--;
				break;
			default: break;
 8005aa8:	e049      	b.n	8005b3e <updateAlarmState+0x172>
		switch (alarmVars.fieldBeingSet) {
 8005aaa:	2b03      	cmp	r3, #3
 8005aac:	d024      	beq.n	8005af8 <updateAlarmState+0x12c>
 8005aae:	2b04      	cmp	r3, #4
 8005ab0:	d033      	beq.n	8005b1a <updateAlarmState+0x14e>
			default: break;
 8005ab2:	e044      	b.n	8005b3e <updateAlarmState+0x172>
				if (alarmVars.alarmToSet->sec == 0) alarmVars.alarmToSet->sec = 59;
 8005ab4:	4b59      	ldr	r3, [pc, #356]	; (8005c1c <updateAlarmState+0x250>)
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	789b      	ldrb	r3, [r3, #2]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d104      	bne.n	8005ac8 <updateAlarmState+0xfc>
 8005abe:	4b57      	ldr	r3, [pc, #348]	; (8005c1c <updateAlarmState+0x250>)
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	223b      	movs	r2, #59	; 0x3b
 8005ac4:	709a      	strb	r2, [r3, #2]
				break;
 8005ac6:	e03a      	b.n	8005b3e <updateAlarmState+0x172>
				else alarmVars.alarmToSet->sec--;
 8005ac8:	4b54      	ldr	r3, [pc, #336]	; (8005c1c <updateAlarmState+0x250>)
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	789a      	ldrb	r2, [r3, #2]
 8005ace:	3a01      	subs	r2, #1
 8005ad0:	b2d2      	uxtb	r2, r2
 8005ad2:	709a      	strb	r2, [r3, #2]
				break;
 8005ad4:	e033      	b.n	8005b3e <updateAlarmState+0x172>
				if (alarmVars.alarmToSet->min == 0) alarmVars.alarmToSet->min = 59;
 8005ad6:	4b51      	ldr	r3, [pc, #324]	; (8005c1c <updateAlarmState+0x250>)
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	785b      	ldrb	r3, [r3, #1]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d104      	bne.n	8005aea <updateAlarmState+0x11e>
 8005ae0:	4b4e      	ldr	r3, [pc, #312]	; (8005c1c <updateAlarmState+0x250>)
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	223b      	movs	r2, #59	; 0x3b
 8005ae6:	705a      	strb	r2, [r3, #1]
				break;
 8005ae8:	e029      	b.n	8005b3e <updateAlarmState+0x172>
				else alarmVars.alarmToSet->min--;
 8005aea:	4b4c      	ldr	r3, [pc, #304]	; (8005c1c <updateAlarmState+0x250>)
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	785a      	ldrb	r2, [r3, #1]
 8005af0:	3a01      	subs	r2, #1
 8005af2:	b2d2      	uxtb	r2, r2
 8005af4:	705a      	strb	r2, [r3, #1]
				break;
 8005af6:	e022      	b.n	8005b3e <updateAlarmState+0x172>
				if (alarmVars.alarmToSet->hr == 0) alarmVars.alarmToSet->hr = 23;
 8005af8:	4b48      	ldr	r3, [pc, #288]	; (8005c1c <updateAlarmState+0x250>)
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d104      	bne.n	8005b0c <updateAlarmState+0x140>
 8005b02:	4b46      	ldr	r3, [pc, #280]	; (8005c1c <updateAlarmState+0x250>)
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	2217      	movs	r2, #23
 8005b08:	701a      	strb	r2, [r3, #0]
				break;
 8005b0a:	e018      	b.n	8005b3e <updateAlarmState+0x172>
				else alarmVars.alarmToSet->hr--;
 8005b0c:	4b43      	ldr	r3, [pc, #268]	; (8005c1c <updateAlarmState+0x250>)
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	781a      	ldrb	r2, [r3, #0]
 8005b12:	3a01      	subs	r2, #1
 8005b14:	b2d2      	uxtb	r2, r2
 8005b16:	701a      	strb	r2, [r3, #0]
				break;
 8005b18:	e011      	b.n	8005b3e <updateAlarmState+0x172>
				if (alarmVars.alarmToSet->weekday == RTC_WEEKDAY_MONDAY) alarmVars.alarmToSet->weekday = RTC_WEEKDAY_SUNDAY;
 8005b1a:	4b40      	ldr	r3, [pc, #256]	; (8005c1c <updateAlarmState+0x250>)
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	78db      	ldrb	r3, [r3, #3]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d104      	bne.n	8005b2e <updateAlarmState+0x162>
 8005b24:	4b3d      	ldr	r3, [pc, #244]	; (8005c1c <updateAlarmState+0x250>)
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	2207      	movs	r2, #7
 8005b2a:	70da      	strb	r2, [r3, #3]
				break;
 8005b2c:	e007      	b.n	8005b3e <updateAlarmState+0x172>
				else alarmVars.alarmToSet->weekday--;
 8005b2e:	4b3b      	ldr	r3, [pc, #236]	; (8005c1c <updateAlarmState+0x250>)
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	78da      	ldrb	r2, [r3, #3]
 8005b34:	3a01      	subs	r2, #1
 8005b36:	b2d2      	uxtb	r2, r2
 8005b38:	70da      	strb	r2, [r3, #3]
				break;
 8005b3a:	e000      	b.n	8005b3e <updateAlarmState+0x172>
		}
	}
 8005b3c:	46c0      	nop			; (mov r8, r8)
	if (buttons.is4Pressed) {
 8005b3e:	4b36      	ldr	r3, [pc, #216]	; (8005c18 <updateAlarmState+0x24c>)
 8005b40:	78db      	ldrb	r3, [r3, #3]
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d062      	beq.n	8005c0e <updateAlarmState+0x242>
		updateFace.alarm = 1;
 8005b48:	4b35      	ldr	r3, [pc, #212]	; (8005c20 <updateAlarmState+0x254>)
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	709a      	strb	r2, [r3, #2]

		if (alarmVars.isSet == 0) {
 8005b4e:	4b33      	ldr	r3, [pc, #204]	; (8005c1c <updateAlarmState+0x250>)
 8005b50:	789b      	ldrb	r3, [r3, #2]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d151      	bne.n	8005bfa <updateAlarmState+0x22e>
			// toggle between fields
			alarmVars.fieldBeingSet = (alarmVars.fieldBeingSet + 1) % (NUM_ALARMFIELDS + 1);
 8005b56:	4b31      	ldr	r3, [pc, #196]	; (8005c1c <updateAlarmState+0x250>)
 8005b58:	785b      	ldrb	r3, [r3, #1]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	2105      	movs	r1, #5
 8005b5e:	0018      	movs	r0, r3
 8005b60:	f7fa fc4a 	bl	80003f8 <__aeabi_idivmod>
 8005b64:	000b      	movs	r3, r1
 8005b66:	b2da      	uxtb	r2, r3
 8005b68:	4b2c      	ldr	r3, [pc, #176]	; (8005c1c <updateAlarmState+0x250>)
 8005b6a:	705a      	strb	r2, [r3, #1]
			if (alarmVars.fieldBeingSet != 0) {
 8005b6c:	4b2b      	ldr	r3, [pc, #172]	; (8005c1c <updateAlarmState+0x250>)
 8005b6e:	785b      	ldrb	r3, [r3, #1]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d034      	beq.n	8005bde <updateAlarmState+0x212>
				alarmVars.isBeingSet = 1;
 8005b74:	4b29      	ldr	r3, [pc, #164]	; (8005c1c <updateAlarmState+0x250>)
 8005b76:	2201      	movs	r2, #1
 8005b78:	701a      	strb	r2, [r3, #0]
				if (alarmVars.fieldBeingSet == 1) {
 8005b7a:	4b28      	ldr	r3, [pc, #160]	; (8005c1c <updateAlarmState+0x250>)
 8005b7c:	785b      	ldrb	r3, [r3, #1]
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d145      	bne.n	8005c0e <updateAlarmState+0x242>
					struct dates d = {0};
 8005b82:	2510      	movs	r5, #16
 8005b84:	197b      	adds	r3, r7, r5
 8005b86:	0018      	movs	r0, r3
 8005b88:	2306      	movs	r3, #6
 8005b8a:	001a      	movs	r2, r3
 8005b8c:	2100      	movs	r1, #0
 8005b8e:	f006 fae8 	bl	800c162 <memset>
					struct times t = {0};
 8005b92:	240c      	movs	r4, #12
 8005b94:	193b      	adds	r3, r7, r4
 8005b96:	0018      	movs	r0, r3
 8005b98:	2303      	movs	r3, #3
 8005b9a:	001a      	movs	r2, r3
 8005b9c:	2100      	movs	r1, #0
 8005b9e:	f006 fae0 	bl	800c162 <memset>
					getDateTime(&d, &t, hrtc);
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	0021      	movs	r1, r4
 8005ba6:	000c      	movs	r4, r1
 8005ba8:	1879      	adds	r1, r7, r1
 8005baa:	197b      	adds	r3, r7, r5
 8005bac:	0018      	movs	r0, r3
 8005bae:	f7fd fd7f 	bl	80036b0 <getDateTime>
					alarmVars.alarmToSet->sec = t.sec;
 8005bb2:	4b1a      	ldr	r3, [pc, #104]	; (8005c1c <updateAlarmState+0x250>)
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	0021      	movs	r1, r4
 8005bb8:	187a      	adds	r2, r7, r1
 8005bba:	7892      	ldrb	r2, [r2, #2]
 8005bbc:	709a      	strb	r2, [r3, #2]
					alarmVars.alarmToSet->min = t.min;
 8005bbe:	4b17      	ldr	r3, [pc, #92]	; (8005c1c <updateAlarmState+0x250>)
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	187a      	adds	r2, r7, r1
 8005bc4:	7852      	ldrb	r2, [r2, #1]
 8005bc6:	705a      	strb	r2, [r3, #1]
					alarmVars.alarmToSet->hr = t.hr;
 8005bc8:	4b14      	ldr	r3, [pc, #80]	; (8005c1c <updateAlarmState+0x250>)
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	187a      	adds	r2, r7, r1
 8005bce:	7812      	ldrb	r2, [r2, #0]
 8005bd0:	701a      	strb	r2, [r3, #0]
					alarmVars.alarmToSet->weekday = d.weekday;
 8005bd2:	4b12      	ldr	r3, [pc, #72]	; (8005c1c <updateAlarmState+0x250>)
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	197a      	adds	r2, r7, r5
 8005bd8:	7912      	ldrb	r2, [r2, #4]
 8005bda:	70da      	strb	r2, [r3, #3]
			// stop and clear alarm hw
			alarmVars.isSet = 0;
			HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_A);
		}
	}
}
 8005bdc:	e017      	b.n	8005c0e <updateAlarmState+0x242>
				alarmVars.isBeingSet = 0;
 8005bde:	4b0f      	ldr	r3, [pc, #60]	; (8005c1c <updateAlarmState+0x250>)
 8005be0:	2200      	movs	r2, #0
 8005be2:	701a      	strb	r2, [r3, #0]
				alarmVars.isSet = 1;
 8005be4:	4b0d      	ldr	r3, [pc, #52]	; (8005c1c <updateAlarmState+0x250>)
 8005be6:	2201      	movs	r2, #1
 8005be8:	709a      	strb	r2, [r3, #2]
				setAlarm(alarmVars.alarmToSet, hrtc);
 8005bea:	4b0c      	ldr	r3, [pc, #48]	; (8005c1c <updateAlarmState+0x250>)
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	0011      	movs	r1, r2
 8005bf2:	0018      	movs	r0, r3
 8005bf4:	f7fd fb42 	bl	800327c <setAlarm>
}
 8005bf8:	e009      	b.n	8005c0e <updateAlarmState+0x242>
			alarmVars.isSet = 0;
 8005bfa:	4b08      	ldr	r3, [pc, #32]	; (8005c1c <updateAlarmState+0x250>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	709a      	strb	r2, [r3, #2]
			HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_A);
 8005c00:	2380      	movs	r3, #128	; 0x80
 8005c02:	005a      	lsls	r2, r3, #1
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	0011      	movs	r1, r2
 8005c08:	0018      	movs	r0, r3
 8005c0a:	f004 fb4d 	bl	800a2a8 <HAL_RTC_DeactivateAlarm>
}
 8005c0e:	46c0      	nop			; (mov r8, r8)
 8005c10:	46bd      	mov	sp, r7
 8005c12:	b006      	add	sp, #24
 8005c14:	bdb0      	pop	{r4, r5, r7, pc}
 8005c16:	46c0      	nop			; (mov r8, r8)
 8005c18:	200001b0 	.word	0x200001b0
 8005c1c:	20000138 	.word	0x20000138
 8005c20:	20000164 	.word	0x20000164

08005c24 <updateStopwatchState>:
 * in not running mode:
 *   button 2 starts stopwatch and moves to running mode
 *   button 3 captures stopwatch for lap
 *   button 4 clears stopwatch and returns to default mode
 */
void updateStopwatchState(TIM_HandleTypeDef *timerStopwatchTim) {
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
	// start/stop
	if (buttons.is2Pressed) {
 8005c2c:	4b28      	ldr	r3, [pc, #160]	; (8005cd0 <updateStopwatchState+0xac>)
 8005c2e:	785b      	ldrb	r3, [r3, #1]
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d01c      	beq.n	8005c70 <updateStopwatchState+0x4c>
		updateFace.stopwatch = 1;
 8005c36:	4b27      	ldr	r3, [pc, #156]	; (8005cd4 <updateStopwatchState+0xb0>)
 8005c38:	2201      	movs	r2, #1
 8005c3a:	70da      	strb	r2, [r3, #3]

		if (isStopwatchRunning == 0) {
 8005c3c:	4b26      	ldr	r3, [pc, #152]	; (8005cd8 <updateStopwatchState+0xb4>)
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10a      	bne.n	8005c5c <updateStopwatchState+0x38>
			runStopwatch(timerStopwatchTim);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	0018      	movs	r0, r3
 8005c4a:	f7ff f8b5 	bl	8004db8 <runStopwatch>
			isStopwatchRunning = 1;
 8005c4e:	4b22      	ldr	r3, [pc, #136]	; (8005cd8 <updateStopwatchState+0xb4>)
 8005c50:	2201      	movs	r2, #1
 8005c52:	701a      	strb	r2, [r3, #0]
			isStopwatchPaused = 0;
 8005c54:	4b21      	ldr	r3, [pc, #132]	; (8005cdc <updateStopwatchState+0xb8>)
 8005c56:	2200      	movs	r2, #0
 8005c58:	701a      	strb	r2, [r3, #0]
 8005c5a:	e009      	b.n	8005c70 <updateStopwatchState+0x4c>
		}
		else {
			pauseStopwatch(timerStopwatchTim);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	0018      	movs	r0, r3
 8005c60:	f7ff f912 	bl	8004e88 <pauseStopwatch>
			isStopwatchRunning = 0;
 8005c64:	4b1c      	ldr	r3, [pc, #112]	; (8005cd8 <updateStopwatchState+0xb4>)
 8005c66:	2200      	movs	r2, #0
 8005c68:	701a      	strb	r2, [r3, #0]
			isStopwatchPaused = 1;
 8005c6a:	4b1c      	ldr	r3, [pc, #112]	; (8005cdc <updateStopwatchState+0xb8>)
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	701a      	strb	r2, [r3, #0]
		}
	}
	if (buttons.is3Pressed && stopwatchCounter != 0) {
 8005c70:	4b17      	ldr	r3, [pc, #92]	; (8005cd0 <updateStopwatchState+0xac>)
 8005c72:	789b      	ldrb	r3, [r3, #2]
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00e      	beq.n	8005c98 <updateStopwatchState+0x74>
 8005c7a:	4b19      	ldr	r3, [pc, #100]	; (8005ce0 <updateStopwatchState+0xbc>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00a      	beq.n	8005c98 <updateStopwatchState+0x74>
		updateFace.stopwatch = 1;
 8005c82:	4b14      	ldr	r3, [pc, #80]	; (8005cd4 <updateStopwatchState+0xb0>)
 8005c84:	2201      	movs	r2, #1
 8005c86:	70da      	strb	r2, [r3, #3]

		// pull data and set lap
		stopwatchVars.lapPrev = stopwatchVars.lapCurrent;
 8005c88:	4b16      	ldr	r3, [pc, #88]	; (8005ce4 <updateStopwatchState+0xc0>)
 8005c8a:	685a      	ldr	r2, [r3, #4]
 8005c8c:	4b15      	ldr	r3, [pc, #84]	; (8005ce4 <updateStopwatchState+0xc0>)
 8005c8e:	601a      	str	r2, [r3, #0]
		stopwatchVars.lapCurrent = stopwatchCounter;
 8005c90:	4b13      	ldr	r3, [pc, #76]	; (8005ce0 <updateStopwatchState+0xbc>)
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	4b13      	ldr	r3, [pc, #76]	; (8005ce4 <updateStopwatchState+0xc0>)
 8005c96:	605a      	str	r2, [r3, #4]
	}
	if (buttons.is4Pressed) {
 8005c98:	4b0d      	ldr	r3, [pc, #52]	; (8005cd0 <updateStopwatchState+0xac>)
 8005c9a:	78db      	ldrb	r3, [r3, #3]
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d012      	beq.n	8005cc8 <updateStopwatchState+0xa4>
		updateFace.stopwatch = 1;
 8005ca2:	4b0c      	ldr	r3, [pc, #48]	; (8005cd4 <updateStopwatchState+0xb0>)
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	70da      	strb	r2, [r3, #3]

		// clear stopwatch hw
		clearStopwatch(timerStopwatchTim);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	0018      	movs	r0, r3
 8005cac:	f7ff f900 	bl	8004eb0 <clearStopwatch>
		stopwatchVars.lapCurrent = 0;
 8005cb0:	4b0c      	ldr	r3, [pc, #48]	; (8005ce4 <updateStopwatchState+0xc0>)
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	605a      	str	r2, [r3, #4]
		stopwatchVars.lapPrev = 0;
 8005cb6:	4b0b      	ldr	r3, [pc, #44]	; (8005ce4 <updateStopwatchState+0xc0>)
 8005cb8:	2200      	movs	r2, #0
 8005cba:	601a      	str	r2, [r3, #0]
		isStopwatchRunning = 0;
 8005cbc:	4b06      	ldr	r3, [pc, #24]	; (8005cd8 <updateStopwatchState+0xb4>)
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	701a      	strb	r2, [r3, #0]
		isStopwatchPaused = 0;
 8005cc2:	4b06      	ldr	r3, [pc, #24]	; (8005cdc <updateStopwatchState+0xb8>)
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	701a      	strb	r2, [r3, #0]
	}
}
 8005cc8:	46c0      	nop			; (mov r8, r8)
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	b002      	add	sp, #8
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	200001b0 	.word	0x200001b0
 8005cd4:	20000164 	.word	0x20000164
 8005cd8:	20000168 	.word	0x20000168
 8005cdc:	200001b5 	.word	0x200001b5
 8005ce0:	200001b8 	.word	0x200001b8
 8005ce4:	20000140 	.word	0x20000140

08005ce8 <updateDisplay>:

// primary function for making changes to display
void updateDisplay(RTC_HandleTypeDef *hrtc, SPI_HandleTypeDef *hspi) {
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
	// TODO: redraw efficiency improvements
	if (updateFace.clock || updateFace.timer || updateFace.alarm || updateFace.stopwatch || isFaceBeingChanged) {
 8005cf2:	4b48      	ldr	r3, [pc, #288]	; (8005e14 <updateDisplay+0x12c>)
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d113      	bne.n	8005d24 <updateDisplay+0x3c>
 8005cfc:	4b45      	ldr	r3, [pc, #276]	; (8005e14 <updateDisplay+0x12c>)
 8005cfe:	785b      	ldrb	r3, [r3, #1]
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d10e      	bne.n	8005d24 <updateDisplay+0x3c>
 8005d06:	4b43      	ldr	r3, [pc, #268]	; (8005e14 <updateDisplay+0x12c>)
 8005d08:	789b      	ldrb	r3, [r3, #2]
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d109      	bne.n	8005d24 <updateDisplay+0x3c>
 8005d10:	4b40      	ldr	r3, [pc, #256]	; (8005e14 <updateDisplay+0x12c>)
 8005d12:	78db      	ldrb	r3, [r3, #3]
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d104      	bne.n	8005d24 <updateDisplay+0x3c>
 8005d1a:	4b3f      	ldr	r3, [pc, #252]	; (8005e18 <updateDisplay+0x130>)
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d100      	bne.n	8005d24 <updateDisplay+0x3c>
 8005d22:	e073      	b.n	8005e0c <updateDisplay+0x124>
		if (getDisplayOrientation() % 2 == 0) {		// portrait
 8005d24:	f7fd f8e2 	bl	8002eec <getDisplayOrientation>
 8005d28:	0003      	movs	r3, r0
 8005d2a:	001a      	movs	r2, r3
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	4013      	ands	r3, r2
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d11d      	bne.n	8005d72 <updateDisplay+0x8a>
			buttonHSpacing = getDisplayWidth()/2;
 8005d36:	f7fd f8ed 	bl	8002f14 <getDisplayWidth>
 8005d3a:	0003      	movs	r3, r0
 8005d3c:	085b      	lsrs	r3, r3, #1
 8005d3e:	b29a      	uxth	r2, r3
 8005d40:	4b36      	ldr	r3, [pc, #216]	; (8005e1c <updateDisplay+0x134>)
 8005d42:	801a      	strh	r2, [r3, #0]
			buttonVSpacing = 24;
 8005d44:	4b36      	ldr	r3, [pc, #216]	; (8005e20 <updateDisplay+0x138>)
 8005d46:	2218      	movs	r2, #24
 8005d48:	801a      	strh	r2, [r3, #0]
			button1Coords.x = getDisplayWidth()/4;
 8005d4a:	f7fd f8e3 	bl	8002f14 <getDisplayWidth>
 8005d4e:	0003      	movs	r3, r0
 8005d50:	089b      	lsrs	r3, r3, #2
 8005d52:	b29a      	uxth	r2, r3
 8005d54:	4b33      	ldr	r3, [pc, #204]	; (8005e24 <updateDisplay+0x13c>)
 8005d56:	801a      	strh	r2, [r3, #0]
			button1Coords.y = getDisplayHeight()-(15+buttonVSpacing);
 8005d58:	f7fd f8d2 	bl	8002f00 <getDisplayHeight>
 8005d5c:	0003      	movs	r3, r0
 8005d5e:	001a      	movs	r2, r3
 8005d60:	4b2f      	ldr	r3, [pc, #188]	; (8005e20 <updateDisplay+0x138>)
 8005d62:	881b      	ldrh	r3, [r3, #0]
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	3b0f      	subs	r3, #15
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	4b2d      	ldr	r3, [pc, #180]	; (8005e24 <updateDisplay+0x13c>)
 8005d6e:	805a      	strh	r2, [r3, #2]
 8005d70:	e017      	b.n	8005da2 <updateDisplay+0xba>
		}
		else {
			buttonHSpacing = getDisplayWidth()/4;
 8005d72:	f7fd f8cf 	bl	8002f14 <getDisplayWidth>
 8005d76:	0003      	movs	r3, r0
 8005d78:	089b      	lsrs	r3, r3, #2
 8005d7a:	b29a      	uxth	r2, r3
 8005d7c:	4b27      	ldr	r3, [pc, #156]	; (8005e1c <updateDisplay+0x134>)
 8005d7e:	801a      	strh	r2, [r3, #0]
			buttonVSpacing = 0;
 8005d80:	4b27      	ldr	r3, [pc, #156]	; (8005e20 <updateDisplay+0x138>)
 8005d82:	2200      	movs	r2, #0
 8005d84:	801a      	strh	r2, [r3, #0]
			button1Coords.x = getDisplayWidth()/8;
 8005d86:	f7fd f8c5 	bl	8002f14 <getDisplayWidth>
 8005d8a:	0003      	movs	r3, r0
 8005d8c:	08db      	lsrs	r3, r3, #3
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	4b24      	ldr	r3, [pc, #144]	; (8005e24 <updateDisplay+0x13c>)
 8005d92:	801a      	strh	r2, [r3, #0]
			button1Coords.y = getDisplayHeight() - 15;
 8005d94:	f7fd f8b4 	bl	8002f00 <getDisplayHeight>
 8005d98:	0003      	movs	r3, r0
 8005d9a:	3b0f      	subs	r3, #15
 8005d9c:	b29a      	uxth	r2, r3
 8005d9e:	4b21      	ldr	r3, [pc, #132]	; (8005e24 <updateDisplay+0x13c>)
 8005da0:	805a      	strh	r2, [r3, #2]
		}

		switch (faceOnDisplay) {
 8005da2:	4b21      	ldr	r3, [pc, #132]	; (8005e28 <updateDisplay+0x140>)
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d00f      	beq.n	8005dca <updateDisplay+0xe2>
 8005daa:	dc02      	bgt.n	8005db2 <updateDisplay+0xca>
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d005      	beq.n	8005dbc <updateDisplay+0xd4>
			case faceClock: drawClockApp(hrtc, hspi); break;
			case faceTimer: drawTimerApp(hrtc, hspi); break;
			case faceAlarm: drawAlarmApp(hrtc, hspi); break;
			case faceStopwatch: drawStopwatchApp(hrtc, hspi); break;
			default: break;
 8005db0:	e020      	b.n	8005df4 <updateDisplay+0x10c>
		switch (faceOnDisplay) {
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d010      	beq.n	8005dd8 <updateDisplay+0xf0>
 8005db6:	2b03      	cmp	r3, #3
 8005db8:	d015      	beq.n	8005de6 <updateDisplay+0xfe>
			default: break;
 8005dba:	e01b      	b.n	8005df4 <updateDisplay+0x10c>
			case faceClock: drawClockApp(hrtc, hspi); break;
 8005dbc:	683a      	ldr	r2, [r7, #0]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	0011      	movs	r1, r2
 8005dc2:	0018      	movs	r0, r3
 8005dc4:	f000 f832 	bl	8005e2c <drawClockApp>
 8005dc8:	e014      	b.n	8005df4 <updateDisplay+0x10c>
			case faceTimer: drawTimerApp(hrtc, hspi); break;
 8005dca:	683a      	ldr	r2, [r7, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	0011      	movs	r1, r2
 8005dd0:	0018      	movs	r0, r3
 8005dd2:	f000 f969 	bl	80060a8 <drawTimerApp>
 8005dd6:	e00d      	b.n	8005df4 <updateDisplay+0x10c>
			case faceAlarm: drawAlarmApp(hrtc, hspi); break;
 8005dd8:	683a      	ldr	r2, [r7, #0]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	0011      	movs	r1, r2
 8005dde:	0018      	movs	r0, r3
 8005de0:	f000 fb04 	bl	80063ec <drawAlarmApp>
 8005de4:	e006      	b.n	8005df4 <updateDisplay+0x10c>
			case faceStopwatch: drawStopwatchApp(hrtc, hspi); break;
 8005de6:	683a      	ldr	r2, [r7, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	0011      	movs	r1, r2
 8005dec:	0018      	movs	r0, r3
 8005dee:	f000 fcad 	bl	800674c <drawStopwatchApp>
 8005df2:	46c0      	nop			; (mov r8, r8)
		}

		updateFace.clock = updateFace.timer = updateFace.alarm = updateFace.stopwatch = 0;
 8005df4:	2200      	movs	r2, #0
 8005df6:	4b07      	ldr	r3, [pc, #28]	; (8005e14 <updateDisplay+0x12c>)
 8005df8:	1c11      	adds	r1, r2, #0
 8005dfa:	70d9      	strb	r1, [r3, #3]
 8005dfc:	4b05      	ldr	r3, [pc, #20]	; (8005e14 <updateDisplay+0x12c>)
 8005dfe:	1c11      	adds	r1, r2, #0
 8005e00:	7099      	strb	r1, [r3, #2]
 8005e02:	4b04      	ldr	r3, [pc, #16]	; (8005e14 <updateDisplay+0x12c>)
 8005e04:	1c11      	adds	r1, r2, #0
 8005e06:	7059      	strb	r1, [r3, #1]
 8005e08:	4b02      	ldr	r3, [pc, #8]	; (8005e14 <updateDisplay+0x12c>)
 8005e0a:	701a      	strb	r2, [r3, #0]
	}
}
 8005e0c:	46c0      	nop			; (mov r8, r8)
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	b002      	add	sp, #8
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	20000164 	.word	0x20000164
 8005e18:	20000078 	.word	0x20000078
 8005e1c:	2000014a 	.word	0x2000014a
 8005e20:	2000014c 	.word	0x2000014c
 8005e24:	20000150 	.word	0x20000150
 8005e28:	20000148 	.word	0x20000148

08005e2c <drawClockApp>:

// helper function for drawing all elements for clock display
void drawClockApp(RTC_HandleTypeDef *hrtc, SPI_HandleTypeDef *hspi) {
 8005e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e2e:	b08b      	sub	sp, #44	; 0x2c
 8005e30:	af02      	add	r7, sp, #8
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
	struct dates currentDate = {0};
 8005e36:	2318      	movs	r3, #24
 8005e38:	18fb      	adds	r3, r7, r3
 8005e3a:	0018      	movs	r0, r3
 8005e3c:	2306      	movs	r3, #6
 8005e3e:	001a      	movs	r2, r3
 8005e40:	2100      	movs	r1, #0
 8005e42:	f006 f98e 	bl	800c162 <memset>
	struct times currentTime = {0};
 8005e46:	2314      	movs	r3, #20
 8005e48:	18fb      	adds	r3, r7, r3
 8005e4a:	0018      	movs	r0, r3
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	001a      	movs	r2, r3
 8005e50:	2100      	movs	r1, #0
 8005e52:	f006 f986 	bl	800c162 <memset>
	// TODO: checks for orientation
	struct coords modeTextCoords = {getDisplayWidth()/2, 44};
 8005e56:	f7fd f85d 	bl	8002f14 <getDisplayWidth>
 8005e5a:	0003      	movs	r3, r0
 8005e5c:	085b      	lsrs	r3, r3, #1
 8005e5e:	b29a      	uxth	r2, r3
 8005e60:	2110      	movs	r1, #16
 8005e62:	187b      	adds	r3, r7, r1
 8005e64:	801a      	strh	r2, [r3, #0]
 8005e66:	187b      	adds	r3, r7, r1
 8005e68:	222c      	movs	r2, #44	; 0x2c
 8005e6a:	805a      	strh	r2, [r3, #2]
	if (getDisplayOrientation() % 2 == 0) modeTextCoords.y = 44;
 8005e6c:	f7fd f83e 	bl	8002eec <getDisplayOrientation>
 8005e70:	0003      	movs	r3, r0
 8005e72:	001a      	movs	r2, r3
 8005e74:	2301      	movs	r3, #1
 8005e76:	4013      	ands	r3, r2
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d104      	bne.n	8005e88 <drawClockApp+0x5c>
 8005e7e:	2310      	movs	r3, #16
 8005e80:	18fb      	adds	r3, r7, r3
 8005e82:	222c      	movs	r2, #44	; 0x2c
 8005e84:	805a      	strh	r2, [r3, #2]
 8005e86:	e003      	b.n	8005e90 <drawClockApp+0x64>
	else modeTextCoords.y = 32;
 8005e88:	2310      	movs	r3, #16
 8005e8a:	18fb      	adds	r3, r7, r3
 8005e8c:	2220      	movs	r2, #32
 8005e8e:	805a      	strh	r2, [r3, #2]
	struct coords timeTextCoords = {centeredToLeft(getDisplayWidth()/2, 114), modeTextCoords.y+fontH*2};
 8005e90:	f7fd f840 	bl	8002f14 <getDisplayWidth>
 8005e94:	0003      	movs	r3, r0
 8005e96:	085b      	lsrs	r3, r3, #1
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	2172      	movs	r1, #114	; 0x72
 8005e9c:	0018      	movs	r0, r3
 8005e9e:	f7fd f867 	bl	8002f70 <centeredToLeft>
 8005ea2:	0003      	movs	r3, r0
 8005ea4:	001a      	movs	r2, r3
 8005ea6:	210c      	movs	r1, #12
 8005ea8:	187b      	adds	r3, r7, r1
 8005eaa:	801a      	strh	r2, [r3, #0]
 8005eac:	2310      	movs	r3, #16
 8005eae:	18fb      	adds	r3, r7, r3
 8005eb0:	885a      	ldrh	r2, [r3, #2]
 8005eb2:	4b6c      	ldr	r3, [pc, #432]	; (8006064 <drawClockApp+0x238>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	18db      	adds	r3, r3, r3
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	18d3      	adds	r3, r2, r3
 8005ebe:	b29a      	uxth	r2, r3
 8005ec0:	187b      	adds	r3, r7, r1
 8005ec2:	805a      	strh	r2, [r3, #2]

	// code for full display refresh. should be all portions that aren't rewritten
	if (isFaceBeingChanged) {
 8005ec4:	4b68      	ldr	r3, [pc, #416]	; (8006068 <drawClockApp+0x23c>)
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d018      	beq.n	8005efe <drawClockApp+0xd2>
		clearScreen(ST77XX_CYAN, hspi);
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	4a67      	ldr	r2, [pc, #412]	; (800606c <drawClockApp+0x240>)
 8005ed0:	0019      	movs	r1, r3
 8005ed2:	0010      	movs	r0, r2
 8005ed4:	f7fc fa56 	bl	8002384 <clearScreen>
		drawTitle("clock", hspi);
 8005ed8:	683a      	ldr	r2, [r7, #0]
 8005eda:	4b65      	ldr	r3, [pc, #404]	; (8006070 <drawClockApp+0x244>)
 8005edc:	0011      	movs	r1, r2
 8005ede:	0018      	movs	r0, r3
 8005ee0:	f000 ff46 	bl	8006d70 <drawTitle>
		drawButtons(hspi);
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	0018      	movs	r0, r3
 8005ee8:	f000 fd6e 	bl	80069c8 <drawButtons>
		drawButtonText(1, "timer", hspi);
 8005eec:	683a      	ldr	r2, [r7, #0]
 8005eee:	4b61      	ldr	r3, [pc, #388]	; (8006074 <drawClockApp+0x248>)
 8005ef0:	0019      	movs	r1, r3
 8005ef2:	2001      	movs	r0, #1
 8005ef4:	f000 fe32 	bl	8006b5c <drawButtonText>
		isFaceBeingChanged = 0;
 8005ef8:	4b5b      	ldr	r3, [pc, #364]	; (8006068 <drawClockApp+0x23c>)
 8005efa:	2200      	movs	r2, #0
 8005efc:	701a      	strb	r2, [r3, #0]
	}

	// different code for different modes
	drawTopBar(hrtc, hspi);
 8005efe:	683a      	ldr	r2, [r7, #0]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	0011      	movs	r1, r2
 8005f04:	0018      	movs	r0, r3
 8005f06:	f001 f8ff 	bl	8007108 <drawTopBar>
	if (clockVars.isBeingSet == 0) {
 8005f0a:	4b5b      	ldr	r3, [pc, #364]	; (8006078 <drawClockApp+0x24c>)
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d134      	bne.n	8005f7c <drawClockApp+0x150>
		drawCenteredModeText(modeTextCoords.x, modeTextCoords.y, "", hspi);
 8005f12:	2210      	movs	r2, #16
 8005f14:	18bb      	adds	r3, r7, r2
 8005f16:	881b      	ldrh	r3, [r3, #0]
 8005f18:	0018      	movs	r0, r3
 8005f1a:	18bb      	adds	r3, r7, r2
 8005f1c:	885b      	ldrh	r3, [r3, #2]
 8005f1e:	0019      	movs	r1, r3
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	4a56      	ldr	r2, [pc, #344]	; (800607c <drawClockApp+0x250>)
 8005f24:	f000 ff8c 	bl	8006e40 <drawCenteredModeText>
		getDateTime(&currentDate, &currentTime, hrtc);
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	2514      	movs	r5, #20
 8005f2c:	1979      	adds	r1, r7, r5
 8005f2e:	2618      	movs	r6, #24
 8005f30:	19bb      	adds	r3, r7, r6
 8005f32:	0018      	movs	r0, r3
 8005f34:	f7fd fbbc 	bl	80036b0 <getDateTime>
		drawDateTime(timeTextCoords.x, timeTextCoords.y, &currentDate, &currentTime, hspi);
 8005f38:	220c      	movs	r2, #12
 8005f3a:	18bb      	adds	r3, r7, r2
 8005f3c:	881b      	ldrh	r3, [r3, #0]
 8005f3e:	0018      	movs	r0, r3
 8005f40:	18bb      	adds	r3, r7, r2
 8005f42:	885b      	ldrh	r3, [r3, #2]
 8005f44:	001c      	movs	r4, r3
 8005f46:	1979      	adds	r1, r7, r5
 8005f48:	19ba      	adds	r2, r7, r6
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	9300      	str	r3, [sp, #0]
 8005f4e:	000b      	movs	r3, r1
 8005f50:	0021      	movs	r1, r4
 8005f52:	f001 f9af 	bl	80072b4 <drawDateTime>
		drawButtonText(2, "", hspi);
 8005f56:	683a      	ldr	r2, [r7, #0]
 8005f58:	4b48      	ldr	r3, [pc, #288]	; (800607c <drawClockApp+0x250>)
 8005f5a:	0019      	movs	r1, r3
 8005f5c:	2002      	movs	r0, #2
 8005f5e:	f000 fdfd 	bl	8006b5c <drawButtonText>
		drawButtonText(3, "", hspi);
 8005f62:	683a      	ldr	r2, [r7, #0]
 8005f64:	4b45      	ldr	r3, [pc, #276]	; (800607c <drawClockApp+0x250>)
 8005f66:	0019      	movs	r1, r3
 8005f68:	2003      	movs	r0, #3
 8005f6a:	f000 fdf7 	bl	8006b5c <drawButtonText>
		drawButtonText(4, "set", hspi);
 8005f6e:	683a      	ldr	r2, [r7, #0]
 8005f70:	4b43      	ldr	r3, [pc, #268]	; (8006080 <drawClockApp+0x254>)
 8005f72:	0019      	movs	r1, r3
 8005f74:	2004      	movs	r0, #4
 8005f76:	f000 fdf1 	bl	8006b5c <drawButtonText>
			case 4: drawCenteredModeText(modeTextCoords.x, modeTextCoords.y, "setting month...", hspi); break;
			case 5: drawCenteredModeText(modeTextCoords.x, modeTextCoords.y, "setting date...", hspi); break;
			default: break;
		}
	}
}
 8005f7a:	e06e      	b.n	800605a <drawClockApp+0x22e>
	else if (clockVars.isBeingSet == 1) {
 8005f7c:	4b3e      	ldr	r3, [pc, #248]	; (8006078 <drawClockApp+0x24c>)
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d167      	bne.n	8006054 <drawClockApp+0x228>
		drawDateTime(timeTextCoords.x, timeTextCoords.y, clockVars.dateToSet, clockVars.timeToSet, hspi);
 8005f84:	220c      	movs	r2, #12
 8005f86:	18bb      	adds	r3, r7, r2
 8005f88:	881b      	ldrh	r3, [r3, #0]
 8005f8a:	0018      	movs	r0, r3
 8005f8c:	18bb      	adds	r3, r7, r2
 8005f8e:	885b      	ldrh	r3, [r3, #2]
 8005f90:	001c      	movs	r4, r3
 8005f92:	4b39      	ldr	r3, [pc, #228]	; (8006078 <drawClockApp+0x24c>)
 8005f94:	685a      	ldr	r2, [r3, #4]
 8005f96:	4b38      	ldr	r3, [pc, #224]	; (8006078 <drawClockApp+0x24c>)
 8005f98:	6899      	ldr	r1, [r3, #8]
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	9300      	str	r3, [sp, #0]
 8005f9e:	000b      	movs	r3, r1
 8005fa0:	0021      	movs	r1, r4
 8005fa2:	f001 f987 	bl	80072b4 <drawDateTime>
		drawButtonText(2, "up", hspi);
 8005fa6:	683a      	ldr	r2, [r7, #0]
 8005fa8:	4b36      	ldr	r3, [pc, #216]	; (8006084 <drawClockApp+0x258>)
 8005faa:	0019      	movs	r1, r3
 8005fac:	2002      	movs	r0, #2
 8005fae:	f000 fdd5 	bl	8006b5c <drawButtonText>
		drawButtonText(3, "down", hspi);
 8005fb2:	683a      	ldr	r2, [r7, #0]
 8005fb4:	4b34      	ldr	r3, [pc, #208]	; (8006088 <drawClockApp+0x25c>)
 8005fb6:	0019      	movs	r1, r3
 8005fb8:	2003      	movs	r0, #3
 8005fba:	f000 fdcf 	bl	8006b5c <drawButtonText>
		drawButtonText(4, "next", hspi);
 8005fbe:	683a      	ldr	r2, [r7, #0]
 8005fc0:	4b32      	ldr	r3, [pc, #200]	; (800608c <drawClockApp+0x260>)
 8005fc2:	0019      	movs	r1, r3
 8005fc4:	2004      	movs	r0, #4
 8005fc6:	f000 fdc9 	bl	8006b5c <drawButtonText>
		switch (clockVars.fieldBeingSet) {
 8005fca:	4b2b      	ldr	r3, [pc, #172]	; (8006078 <drawClockApp+0x24c>)
 8005fcc:	785b      	ldrb	r3, [r3, #1]
 8005fce:	2b05      	cmp	r3, #5
 8005fd0:	d842      	bhi.n	8006058 <drawClockApp+0x22c>
 8005fd2:	009a      	lsls	r2, r3, #2
 8005fd4:	4b2e      	ldr	r3, [pc, #184]	; (8006090 <drawClockApp+0x264>)
 8005fd6:	18d3      	adds	r3, r2, r3
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	469f      	mov	pc, r3
			case 1: drawCenteredModeText(modeTextCoords.x, modeTextCoords.y, "setting minute...", hspi); break;
 8005fdc:	2210      	movs	r2, #16
 8005fde:	18bb      	adds	r3, r7, r2
 8005fe0:	881b      	ldrh	r3, [r3, #0]
 8005fe2:	0018      	movs	r0, r3
 8005fe4:	18bb      	adds	r3, r7, r2
 8005fe6:	885b      	ldrh	r3, [r3, #2]
 8005fe8:	0019      	movs	r1, r3
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	4a29      	ldr	r2, [pc, #164]	; (8006094 <drawClockApp+0x268>)
 8005fee:	f000 ff27 	bl	8006e40 <drawCenteredModeText>
 8005ff2:	e032      	b.n	800605a <drawClockApp+0x22e>
			case 2: drawCenteredModeText(modeTextCoords.x, modeTextCoords.y, "setting hour...", hspi); break;
 8005ff4:	2210      	movs	r2, #16
 8005ff6:	18bb      	adds	r3, r7, r2
 8005ff8:	881b      	ldrh	r3, [r3, #0]
 8005ffa:	0018      	movs	r0, r3
 8005ffc:	18bb      	adds	r3, r7, r2
 8005ffe:	885b      	ldrh	r3, [r3, #2]
 8006000:	0019      	movs	r1, r3
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	4a24      	ldr	r2, [pc, #144]	; (8006098 <drawClockApp+0x26c>)
 8006006:	f000 ff1b 	bl	8006e40 <drawCenteredModeText>
 800600a:	e026      	b.n	800605a <drawClockApp+0x22e>
			case 3: drawCenteredModeText(modeTextCoords.x, modeTextCoords.y, "setting year...", hspi); break;
 800600c:	2210      	movs	r2, #16
 800600e:	18bb      	adds	r3, r7, r2
 8006010:	881b      	ldrh	r3, [r3, #0]
 8006012:	0018      	movs	r0, r3
 8006014:	18bb      	adds	r3, r7, r2
 8006016:	885b      	ldrh	r3, [r3, #2]
 8006018:	0019      	movs	r1, r3
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	4a1f      	ldr	r2, [pc, #124]	; (800609c <drawClockApp+0x270>)
 800601e:	f000 ff0f 	bl	8006e40 <drawCenteredModeText>
 8006022:	e01a      	b.n	800605a <drawClockApp+0x22e>
			case 4: drawCenteredModeText(modeTextCoords.x, modeTextCoords.y, "setting month...", hspi); break;
 8006024:	2210      	movs	r2, #16
 8006026:	18bb      	adds	r3, r7, r2
 8006028:	881b      	ldrh	r3, [r3, #0]
 800602a:	0018      	movs	r0, r3
 800602c:	18bb      	adds	r3, r7, r2
 800602e:	885b      	ldrh	r3, [r3, #2]
 8006030:	0019      	movs	r1, r3
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	4a1a      	ldr	r2, [pc, #104]	; (80060a0 <drawClockApp+0x274>)
 8006036:	f000 ff03 	bl	8006e40 <drawCenteredModeText>
 800603a:	e00e      	b.n	800605a <drawClockApp+0x22e>
			case 5: drawCenteredModeText(modeTextCoords.x, modeTextCoords.y, "setting date...", hspi); break;
 800603c:	2210      	movs	r2, #16
 800603e:	18bb      	adds	r3, r7, r2
 8006040:	881b      	ldrh	r3, [r3, #0]
 8006042:	0018      	movs	r0, r3
 8006044:	18bb      	adds	r3, r7, r2
 8006046:	885b      	ldrh	r3, [r3, #2]
 8006048:	0019      	movs	r1, r3
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	4a15      	ldr	r2, [pc, #84]	; (80060a4 <drawClockApp+0x278>)
 800604e:	f000 fef7 	bl	8006e40 <drawCenteredModeText>
 8006052:	e002      	b.n	800605a <drawClockApp+0x22e>
	}
 8006054:	46c0      	nop			; (mov r8, r8)
 8006056:	e000      	b.n	800605a <drawClockApp+0x22e>
			default: break;
 8006058:	46c0      	nop			; (mov r8, r8)
}
 800605a:	46c0      	nop			; (mov r8, r8)
 800605c:	46bd      	mov	sp, r7
 800605e:	b009      	add	sp, #36	; 0x24
 8006060:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006062:	46c0      	nop			; (mov r8, r8)
 8006064:	2000001c 	.word	0x2000001c
 8006068:	20000078 	.word	0x20000078
 800606c:	000007ff 	.word	0x000007ff
 8006070:	0800ca94 	.word	0x0800ca94
 8006074:	0800ca9c 	.word	0x0800ca9c
 8006078:	20000124 	.word	0x20000124
 800607c:	0800ca18 	.word	0x0800ca18
 8006080:	0800caa4 	.word	0x0800caa4
 8006084:	0800caa8 	.word	0x0800caa8
 8006088:	0800caac 	.word	0x0800caac
 800608c:	0800cab4 	.word	0x0800cab4
 8006090:	0800d5c0 	.word	0x0800d5c0
 8006094:	0800cabc 	.word	0x0800cabc
 8006098:	0800cad0 	.word	0x0800cad0
 800609c:	0800cae0 	.word	0x0800cae0
 80060a0:	0800caf0 	.word	0x0800caf0
 80060a4:	0800cb04 	.word	0x0800cb04

080060a8 <drawTimerApp>:

// helper function for drawing all elements for timer display
void drawTimerApp(RTC_HandleTypeDef *hrtc, SPI_HandleTypeDef *hspi) {
 80060a8:	b5b0      	push	{r4, r5, r7, lr}
 80060aa:	b088      	sub	sp, #32
 80060ac:	af02      	add	r7, sp, #8
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
	struct times currentTimer = {0};
 80060b2:	2314      	movs	r3, #20
 80060b4:	18fb      	adds	r3, r7, r3
 80060b6:	0018      	movs	r0, r3
 80060b8:	2303      	movs	r3, #3
 80060ba:	001a      	movs	r2, r3
 80060bc:	2100      	movs	r1, #0
 80060be:	f006 f850 	bl	800c162 <memset>
	struct coords modeTextCoords = {getDisplayWidth()/2, 52};
 80060c2:	f7fc ff27 	bl	8002f14 <getDisplayWidth>
 80060c6:	0003      	movs	r3, r0
 80060c8:	085b      	lsrs	r3, r3, #1
 80060ca:	b29a      	uxth	r2, r3
 80060cc:	2110      	movs	r1, #16
 80060ce:	187b      	adds	r3, r7, r1
 80060d0:	801a      	strh	r2, [r3, #0]
 80060d2:	187b      	adds	r3, r7, r1
 80060d4:	2234      	movs	r2, #52	; 0x34
 80060d6:	805a      	strh	r2, [r3, #2]
	if (getDisplayOrientation() % 2 == 0) modeTextCoords.y = 52;
 80060d8:	f7fc ff08 	bl	8002eec <getDisplayOrientation>
 80060dc:	0003      	movs	r3, r0
 80060de:	001a      	movs	r2, r3
 80060e0:	2301      	movs	r3, #1
 80060e2:	4013      	ands	r3, r2
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d104      	bne.n	80060f4 <drawTimerApp+0x4c>
 80060ea:	2310      	movs	r3, #16
 80060ec:	18fb      	adds	r3, r7, r3
 80060ee:	2234      	movs	r2, #52	; 0x34
 80060f0:	805a      	strh	r2, [r3, #2]
 80060f2:	e003      	b.n	80060fc <drawTimerApp+0x54>
	else modeTextCoords.y = 48;
 80060f4:	2310      	movs	r3, #16
 80060f6:	18fb      	adds	r3, r7, r3
 80060f8:	2230      	movs	r2, #48	; 0x30
 80060fa:	805a      	strh	r2, [r3, #2]
	struct coords timeTextCoords = {centeredToLeft(getDisplayWidth()/2, 96), modeTextCoords.y+fontH*2};
 80060fc:	f7fc ff0a 	bl	8002f14 <getDisplayWidth>
 8006100:	0003      	movs	r3, r0
 8006102:	085b      	lsrs	r3, r3, #1
 8006104:	b29b      	uxth	r3, r3
 8006106:	2160      	movs	r1, #96	; 0x60
 8006108:	0018      	movs	r0, r3
 800610a:	f7fc ff31 	bl	8002f70 <centeredToLeft>
 800610e:	0003      	movs	r3, r0
 8006110:	001a      	movs	r2, r3
 8006112:	210c      	movs	r1, #12
 8006114:	187b      	adds	r3, r7, r1
 8006116:	801a      	strh	r2, [r3, #0]
 8006118:	2310      	movs	r3, #16
 800611a:	18fb      	adds	r3, r7, r3
 800611c:	885a      	ldrh	r2, [r3, #2]
 800611e:	4b9b      	ldr	r3, [pc, #620]	; (800638c <drawTimerApp+0x2e4>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	b29b      	uxth	r3, r3
 8006124:	18db      	adds	r3, r3, r3
 8006126:	b29b      	uxth	r3, r3
 8006128:	18d3      	adds	r3, r2, r3
 800612a:	b29a      	uxth	r2, r3
 800612c:	187b      	adds	r3, r7, r1
 800612e:	805a      	strh	r2, [r3, #2]


	if (isFaceBeingChanged) {
 8006130:	4b97      	ldr	r3, [pc, #604]	; (8006390 <drawTimerApp+0x2e8>)
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d019      	beq.n	800616c <drawTimerApp+0xc4>
		clearScreen(ST77XX_GREEN, hspi);
 8006138:	683a      	ldr	r2, [r7, #0]
 800613a:	23fc      	movs	r3, #252	; 0xfc
 800613c:	00db      	lsls	r3, r3, #3
 800613e:	0011      	movs	r1, r2
 8006140:	0018      	movs	r0, r3
 8006142:	f7fc f91f 	bl	8002384 <clearScreen>
		drawTitle("timer", hspi);
 8006146:	683a      	ldr	r2, [r7, #0]
 8006148:	4b92      	ldr	r3, [pc, #584]	; (8006394 <drawTimerApp+0x2ec>)
 800614a:	0011      	movs	r1, r2
 800614c:	0018      	movs	r0, r3
 800614e:	f000 fe0f 	bl	8006d70 <drawTitle>
		drawButtons(hspi);
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	0018      	movs	r0, r3
 8006156:	f000 fc37 	bl	80069c8 <drawButtons>
		drawButtonText(1, "alarm", hspi);
 800615a:	683a      	ldr	r2, [r7, #0]
 800615c:	4b8e      	ldr	r3, [pc, #568]	; (8006398 <drawTimerApp+0x2f0>)
 800615e:	0019      	movs	r1, r3
 8006160:	2001      	movs	r0, #1
 8006162:	f000 fcfb 	bl	8006b5c <drawButtonText>
		isFaceBeingChanged = 0;
 8006166:	4b8a      	ldr	r3, [pc, #552]	; (8006390 <drawTimerApp+0x2e8>)
 8006168:	2200      	movs	r2, #0
 800616a:	701a      	strb	r2, [r3, #0]
	}

	drawTopBar(hrtc, hspi);
 800616c:	683a      	ldr	r2, [r7, #0]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	0011      	movs	r1, r2
 8006172:	0018      	movs	r0, r3
 8006174:	f000 ffc8 	bl	8007108 <drawTopBar>
	if (timerVars.isBeingSet == 0) {
 8006178:	4b88      	ldr	r3, [pc, #544]	; (800639c <drawTimerApp+0x2f4>)
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d000      	beq.n	8006182 <drawTimerApp+0xda>
 8006180:	e0b0      	b.n	80062e4 <drawTimerApp+0x23c>
		if (timerVars.isSet == 0) {
 8006182:	4b86      	ldr	r3, [pc, #536]	; (800639c <drawTimerApp+0x2f4>)
 8006184:	789b      	ldrb	r3, [r3, #2]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d131      	bne.n	80061ee <drawTimerApp+0x146>
			drawButtonText(2, "", hspi);
 800618a:	683a      	ldr	r2, [r7, #0]
 800618c:	4b84      	ldr	r3, [pc, #528]	; (80063a0 <drawTimerApp+0x2f8>)
 800618e:	0019      	movs	r1, r3
 8006190:	2002      	movs	r0, #2
 8006192:	f000 fce3 	bl	8006b5c <drawButtonText>
			drawButtonText(3, "", hspi);
 8006196:	683a      	ldr	r2, [r7, #0]
 8006198:	4b81      	ldr	r3, [pc, #516]	; (80063a0 <drawTimerApp+0x2f8>)
 800619a:	0019      	movs	r1, r3
 800619c:	2003      	movs	r0, #3
 800619e:	f000 fcdd 	bl	8006b5c <drawButtonText>
			drawButtonText(4, "set", hspi);
 80061a2:	683a      	ldr	r2, [r7, #0]
 80061a4:	4b7f      	ldr	r3, [pc, #508]	; (80063a4 <drawTimerApp+0x2fc>)
 80061a6:	0019      	movs	r1, r3
 80061a8:	2004      	movs	r0, #4
 80061aa:	f000 fcd7 	bl	8006b5c <drawButtonText>

			drawCenteredModeText(modeTextCoords.x, modeTextCoords.y, "timer unset", hspi);
 80061ae:	2210      	movs	r2, #16
 80061b0:	18bb      	adds	r3, r7, r2
 80061b2:	881b      	ldrh	r3, [r3, #0]
 80061b4:	0018      	movs	r0, r3
 80061b6:	18bb      	adds	r3, r7, r2
 80061b8:	885b      	ldrh	r3, [r3, #2]
 80061ba:	0019      	movs	r1, r3
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	4a7a      	ldr	r2, [pc, #488]	; (80063a8 <drawTimerApp+0x300>)
 80061c0:	f000 fe3e 	bl	8006e40 <drawCenteredModeText>
			fillRect(timeTextCoords.x, timeTextCoords.y, 96, 16, getBackgroundColor(), hspi);
 80061c4:	220c      	movs	r2, #12
 80061c6:	18bb      	adds	r3, r7, r2
 80061c8:	881b      	ldrh	r3, [r3, #0]
 80061ca:	001c      	movs	r4, r3
 80061cc:	18bb      	adds	r3, r7, r2
 80061ce:	885b      	ldrh	r3, [r3, #2]
 80061d0:	001d      	movs	r5, r3
 80061d2:	f7fc fe21 	bl	8002e18 <getBackgroundColor>
 80061d6:	0003      	movs	r3, r0
 80061d8:	001a      	movs	r2, r3
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	9301      	str	r3, [sp, #4]
 80061de:	9200      	str	r2, [sp, #0]
 80061e0:	2310      	movs	r3, #16
 80061e2:	2260      	movs	r2, #96	; 0x60
 80061e4:	0029      	movs	r1, r5
 80061e6:	0020      	movs	r0, r4
 80061e8:	f7fc f87c 	bl	80022e4 <fillRect>
			default: break;
		}

		drawBasicTime(timeTextCoords.x, timeTextCoords.y, timerVars.timeToSet, hspi);
	}
}
 80061ec:	e0c9      	b.n	8006382 <drawTimerApp+0x2da>
		else if (isTimerDone == 0) {
 80061ee:	4b6f      	ldr	r3, [pc, #444]	; (80063ac <drawTimerApp+0x304>)
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d156      	bne.n	80062a6 <drawTimerApp+0x1fe>
			drawButtonText(2, "run", hspi);
 80061f8:	683a      	ldr	r2, [r7, #0]
 80061fa:	4b6d      	ldr	r3, [pc, #436]	; (80063b0 <drawTimerApp+0x308>)
 80061fc:	0019      	movs	r1, r3
 80061fe:	2002      	movs	r0, #2
 8006200:	f000 fcac 	bl	8006b5c <drawButtonText>
			drawButtonText(3, "pause", hspi);
 8006204:	683a      	ldr	r2, [r7, #0]
 8006206:	4b6b      	ldr	r3, [pc, #428]	; (80063b4 <drawTimerApp+0x30c>)
 8006208:	0019      	movs	r1, r3
 800620a:	2003      	movs	r0, #3
 800620c:	f000 fca6 	bl	8006b5c <drawButtonText>
			drawButtonText(4, "clear", hspi);
 8006210:	683a      	ldr	r2, [r7, #0]
 8006212:	4b69      	ldr	r3, [pc, #420]	; (80063b8 <drawTimerApp+0x310>)
 8006214:	0019      	movs	r1, r3
 8006216:	2004      	movs	r0, #4
 8006218:	f000 fca0 	bl	8006b5c <drawButtonText>
			secondsToTime(&currentTimer, timerCounter);
 800621c:	4b67      	ldr	r3, [pc, #412]	; (80063bc <drawTimerApp+0x314>)
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	2414      	movs	r4, #20
 8006222:	193b      	adds	r3, r7, r4
 8006224:	0011      	movs	r1, r2
 8006226:	0018      	movs	r0, r3
 8006228:	f7fd fb01 	bl	800382e <secondsToTime>
			drawBasicTime(timeTextCoords.x, timeTextCoords.y, &currentTimer, hspi);
 800622c:	220c      	movs	r2, #12
 800622e:	18bb      	adds	r3, r7, r2
 8006230:	881b      	ldrh	r3, [r3, #0]
 8006232:	0018      	movs	r0, r3
 8006234:	18bb      	adds	r3, r7, r2
 8006236:	885b      	ldrh	r3, [r3, #2]
 8006238:	0019      	movs	r1, r3
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	193a      	adds	r2, r7, r4
 800623e:	f001 f8bf 	bl	80073c0 <drawBasicTime>
			if (isTimerPaused == 1) drawCenteredModeText(modeTextCoords.x, modeTextCoords.y, "timer paused", hspi);
 8006242:	4b5f      	ldr	r3, [pc, #380]	; (80063c0 <drawTimerApp+0x318>)
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	b2db      	uxtb	r3, r3
 8006248:	2b01      	cmp	r3, #1
 800624a:	d10b      	bne.n	8006264 <drawTimerApp+0x1bc>
 800624c:	2210      	movs	r2, #16
 800624e:	18bb      	adds	r3, r7, r2
 8006250:	881b      	ldrh	r3, [r3, #0]
 8006252:	0018      	movs	r0, r3
 8006254:	18bb      	adds	r3, r7, r2
 8006256:	885b      	ldrh	r3, [r3, #2]
 8006258:	0019      	movs	r1, r3
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	4a59      	ldr	r2, [pc, #356]	; (80063c4 <drawTimerApp+0x31c>)
 800625e:	f000 fdef 	bl	8006e40 <drawCenteredModeText>
}
 8006262:	e08e      	b.n	8006382 <drawTimerApp+0x2da>
			else if (isTimerRunning == 0 && timerCounter != 0) drawCenteredModeText(modeTextCoords.x, modeTextCoords.y, "timer set!", hspi);
 8006264:	4b58      	ldr	r3, [pc, #352]	; (80063c8 <drawTimerApp+0x320>)
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	b2db      	uxtb	r3, r3
 800626a:	2b00      	cmp	r3, #0
 800626c:	d10f      	bne.n	800628e <drawTimerApp+0x1e6>
 800626e:	4b53      	ldr	r3, [pc, #332]	; (80063bc <drawTimerApp+0x314>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00b      	beq.n	800628e <drawTimerApp+0x1e6>
 8006276:	2210      	movs	r2, #16
 8006278:	18bb      	adds	r3, r7, r2
 800627a:	881b      	ldrh	r3, [r3, #0]
 800627c:	0018      	movs	r0, r3
 800627e:	18bb      	adds	r3, r7, r2
 8006280:	885b      	ldrh	r3, [r3, #2]
 8006282:	0019      	movs	r1, r3
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	4a51      	ldr	r2, [pc, #324]	; (80063cc <drawTimerApp+0x324>)
 8006288:	f000 fdda 	bl	8006e40 <drawCenteredModeText>
}
 800628c:	e079      	b.n	8006382 <drawTimerApp+0x2da>
			else drawCenteredModeText(modeTextCoords.x, modeTextCoords.y, "", hspi);
 800628e:	2210      	movs	r2, #16
 8006290:	18bb      	adds	r3, r7, r2
 8006292:	881b      	ldrh	r3, [r3, #0]
 8006294:	0018      	movs	r0, r3
 8006296:	18bb      	adds	r3, r7, r2
 8006298:	885b      	ldrh	r3, [r3, #2]
 800629a:	0019      	movs	r1, r3
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	4a40      	ldr	r2, [pc, #256]	; (80063a0 <drawTimerApp+0x2f8>)
 80062a0:	f000 fdce 	bl	8006e40 <drawCenteredModeText>
}
 80062a4:	e06d      	b.n	8006382 <drawTimerApp+0x2da>
			secondsToTime(&currentTimer, timerCounter);
 80062a6:	4b45      	ldr	r3, [pc, #276]	; (80063bc <drawTimerApp+0x314>)
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	2414      	movs	r4, #20
 80062ac:	193b      	adds	r3, r7, r4
 80062ae:	0011      	movs	r1, r2
 80062b0:	0018      	movs	r0, r3
 80062b2:	f7fd fabc 	bl	800382e <secondsToTime>
			drawBasicTime(timeTextCoords.x, timeTextCoords.y, &currentTimer, hspi);
 80062b6:	220c      	movs	r2, #12
 80062b8:	18bb      	adds	r3, r7, r2
 80062ba:	881b      	ldrh	r3, [r3, #0]
 80062bc:	0018      	movs	r0, r3
 80062be:	18bb      	adds	r3, r7, r2
 80062c0:	885b      	ldrh	r3, [r3, #2]
 80062c2:	0019      	movs	r1, r3
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	193a      	adds	r2, r7, r4
 80062c8:	f001 f87a 	bl	80073c0 <drawBasicTime>
			drawCenteredModeText(modeTextCoords.x, modeTextCoords.y, "timer done!", hspi);
 80062cc:	2210      	movs	r2, #16
 80062ce:	18bb      	adds	r3, r7, r2
 80062d0:	881b      	ldrh	r3, [r3, #0]
 80062d2:	0018      	movs	r0, r3
 80062d4:	18bb      	adds	r3, r7, r2
 80062d6:	885b      	ldrh	r3, [r3, #2]
 80062d8:	0019      	movs	r1, r3
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	4a3c      	ldr	r2, [pc, #240]	; (80063d0 <drawTimerApp+0x328>)
 80062de:	f000 fdaf 	bl	8006e40 <drawCenteredModeText>
}
 80062e2:	e04e      	b.n	8006382 <drawTimerApp+0x2da>
	else if (timerVars.isBeingSet == 1) {
 80062e4:	4b2d      	ldr	r3, [pc, #180]	; (800639c <drawTimerApp+0x2f4>)
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d14a      	bne.n	8006382 <drawTimerApp+0x2da>
		drawButtonText(2, "up", hspi);
 80062ec:	683a      	ldr	r2, [r7, #0]
 80062ee:	4b39      	ldr	r3, [pc, #228]	; (80063d4 <drawTimerApp+0x32c>)
 80062f0:	0019      	movs	r1, r3
 80062f2:	2002      	movs	r0, #2
 80062f4:	f000 fc32 	bl	8006b5c <drawButtonText>
		drawButtonText(3, "down", hspi);
 80062f8:	683a      	ldr	r2, [r7, #0]
 80062fa:	4b37      	ldr	r3, [pc, #220]	; (80063d8 <drawTimerApp+0x330>)
 80062fc:	0019      	movs	r1, r3
 80062fe:	2003      	movs	r0, #3
 8006300:	f000 fc2c 	bl	8006b5c <drawButtonText>
		drawButtonText(4, "next", hspi);
 8006304:	683a      	ldr	r2, [r7, #0]
 8006306:	4b35      	ldr	r3, [pc, #212]	; (80063dc <drawTimerApp+0x334>)
 8006308:	0019      	movs	r1, r3
 800630a:	2004      	movs	r0, #4
 800630c:	f000 fc26 	bl	8006b5c <drawButtonText>
		switch (timerVars.fieldBeingSet) {
 8006310:	4b22      	ldr	r3, [pc, #136]	; (800639c <drawTimerApp+0x2f4>)
 8006312:	785b      	ldrb	r3, [r3, #1]
 8006314:	2b02      	cmp	r3, #2
 8006316:	d010      	beq.n	800633a <drawTimerApp+0x292>
 8006318:	2b03      	cmp	r3, #3
 800631a:	d01a      	beq.n	8006352 <drawTimerApp+0x2aa>
 800631c:	2b01      	cmp	r3, #1
 800631e:	d000      	beq.n	8006322 <drawTimerApp+0x27a>
			default: break;
 8006320:	e023      	b.n	800636a <drawTimerApp+0x2c2>
			case 1: drawCenteredModeText(modeTextCoords.x, modeTextCoords.y, "setting second...", hspi); break;
 8006322:	2210      	movs	r2, #16
 8006324:	18bb      	adds	r3, r7, r2
 8006326:	881b      	ldrh	r3, [r3, #0]
 8006328:	0018      	movs	r0, r3
 800632a:	18bb      	adds	r3, r7, r2
 800632c:	885b      	ldrh	r3, [r3, #2]
 800632e:	0019      	movs	r1, r3
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	4a2b      	ldr	r2, [pc, #172]	; (80063e0 <drawTimerApp+0x338>)
 8006334:	f000 fd84 	bl	8006e40 <drawCenteredModeText>
 8006338:	e017      	b.n	800636a <drawTimerApp+0x2c2>
			case 2: drawCenteredModeText(modeTextCoords.x, modeTextCoords.y, "setting minute...", hspi); break;
 800633a:	2210      	movs	r2, #16
 800633c:	18bb      	adds	r3, r7, r2
 800633e:	881b      	ldrh	r3, [r3, #0]
 8006340:	0018      	movs	r0, r3
 8006342:	18bb      	adds	r3, r7, r2
 8006344:	885b      	ldrh	r3, [r3, #2]
 8006346:	0019      	movs	r1, r3
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	4a26      	ldr	r2, [pc, #152]	; (80063e4 <drawTimerApp+0x33c>)
 800634c:	f000 fd78 	bl	8006e40 <drawCenteredModeText>
 8006350:	e00b      	b.n	800636a <drawTimerApp+0x2c2>
			case 3: drawCenteredModeText(modeTextCoords.x, modeTextCoords.y, "setting hour...", hspi); break;
 8006352:	2210      	movs	r2, #16
 8006354:	18bb      	adds	r3, r7, r2
 8006356:	881b      	ldrh	r3, [r3, #0]
 8006358:	0018      	movs	r0, r3
 800635a:	18bb      	adds	r3, r7, r2
 800635c:	885b      	ldrh	r3, [r3, #2]
 800635e:	0019      	movs	r1, r3
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	4a21      	ldr	r2, [pc, #132]	; (80063e8 <drawTimerApp+0x340>)
 8006364:	f000 fd6c 	bl	8006e40 <drawCenteredModeText>
 8006368:	46c0      	nop			; (mov r8, r8)
		drawBasicTime(timeTextCoords.x, timeTextCoords.y, timerVars.timeToSet, hspi);
 800636a:	220c      	movs	r2, #12
 800636c:	18bb      	adds	r3, r7, r2
 800636e:	881b      	ldrh	r3, [r3, #0]
 8006370:	0018      	movs	r0, r3
 8006372:	18bb      	adds	r3, r7, r2
 8006374:	885b      	ldrh	r3, [r3, #2]
 8006376:	0019      	movs	r1, r3
 8006378:	4b08      	ldr	r3, [pc, #32]	; (800639c <drawTimerApp+0x2f4>)
 800637a:	685a      	ldr	r2, [r3, #4]
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	f001 f81f 	bl	80073c0 <drawBasicTime>
}
 8006382:	46c0      	nop			; (mov r8, r8)
 8006384:	46bd      	mov	sp, r7
 8006386:	b006      	add	sp, #24
 8006388:	bdb0      	pop	{r4, r5, r7, pc}
 800638a:	46c0      	nop			; (mov r8, r8)
 800638c:	2000001c 	.word	0x2000001c
 8006390:	20000078 	.word	0x20000078
 8006394:	0800ca9c 	.word	0x0800ca9c
 8006398:	0800cb14 	.word	0x0800cb14
 800639c:	20000130 	.word	0x20000130
 80063a0:	0800ca18 	.word	0x0800ca18
 80063a4:	0800caa4 	.word	0x0800caa4
 80063a8:	0800cb1c 	.word	0x0800cb1c
 80063ac:	20000170 	.word	0x20000170
 80063b0:	0800cb28 	.word	0x0800cb28
 80063b4:	0800cb2c 	.word	0x0800cb2c
 80063b8:	0800cb34 	.word	0x0800cb34
 80063bc:	2000016c 	.word	0x2000016c
 80063c0:	200001b6 	.word	0x200001b6
 80063c4:	0800cb3c 	.word	0x0800cb3c
 80063c8:	200001b4 	.word	0x200001b4
 80063cc:	0800cb4c 	.word	0x0800cb4c
 80063d0:	0800cb58 	.word	0x0800cb58
 80063d4:	0800caa8 	.word	0x0800caa8
 80063d8:	0800caac 	.word	0x0800caac
 80063dc:	0800cab4 	.word	0x0800cab4
 80063e0:	0800cb64 	.word	0x0800cb64
 80063e4:	0800cabc 	.word	0x0800cabc
 80063e8:	0800cad0 	.word	0x0800cad0

080063ec <drawAlarmApp>:

// helper function for drawing all elements for alarm display
void drawAlarmApp(RTC_HandleTypeDef *hrtc, SPI_HandleTypeDef *hspi) {
 80063ec:	b5b0      	push	{r4, r5, r7, lr}
 80063ee:	b088      	sub	sp, #32
 80063f0:	af02      	add	r7, sp, #8
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
	struct coords modeTextCoords = {getDisplayWidth()/2, 48};
 80063f6:	f7fc fd8d 	bl	8002f14 <getDisplayWidth>
 80063fa:	0003      	movs	r3, r0
 80063fc:	085b      	lsrs	r3, r3, #1
 80063fe:	b29a      	uxth	r2, r3
 8006400:	2114      	movs	r1, #20
 8006402:	187b      	adds	r3, r7, r1
 8006404:	801a      	strh	r2, [r3, #0]
 8006406:	187b      	adds	r3, r7, r1
 8006408:	2230      	movs	r2, #48	; 0x30
 800640a:	805a      	strh	r2, [r3, #2]
	if (getDisplayOrientation() % 2 == 0) modeTextCoords.y = 48;
 800640c:	f7fc fd6e 	bl	8002eec <getDisplayOrientation>
 8006410:	0003      	movs	r3, r0
 8006412:	001a      	movs	r2, r3
 8006414:	2301      	movs	r3, #1
 8006416:	4013      	ands	r3, r2
 8006418:	b2db      	uxtb	r3, r3
 800641a:	2b00      	cmp	r3, #0
 800641c:	d104      	bne.n	8006428 <drawAlarmApp+0x3c>
 800641e:	2314      	movs	r3, #20
 8006420:	18fb      	adds	r3, r7, r3
 8006422:	2230      	movs	r2, #48	; 0x30
 8006424:	805a      	strh	r2, [r3, #2]
 8006426:	e003      	b.n	8006430 <drawAlarmApp+0x44>
	else modeTextCoords.y = 36;
 8006428:	2314      	movs	r3, #20
 800642a:	18fb      	adds	r3, r7, r3
 800642c:	2224      	movs	r2, #36	; 0x24
 800642e:	805a      	strh	r2, [r3, #2]
	struct coords timeTextCoords = {centeredToLeft(getDisplayWidth()/2, 114), modeTextCoords.y+fontH*2};
 8006430:	f7fc fd70 	bl	8002f14 <getDisplayWidth>
 8006434:	0003      	movs	r3, r0
 8006436:	085b      	lsrs	r3, r3, #1
 8006438:	b29b      	uxth	r3, r3
 800643a:	2172      	movs	r1, #114	; 0x72
 800643c:	0018      	movs	r0, r3
 800643e:	f7fc fd97 	bl	8002f70 <centeredToLeft>
 8006442:	0003      	movs	r3, r0
 8006444:	001a      	movs	r2, r3
 8006446:	2110      	movs	r1, #16
 8006448:	187b      	adds	r3, r7, r1
 800644a:	801a      	strh	r2, [r3, #0]
 800644c:	2314      	movs	r3, #20
 800644e:	18fb      	adds	r3, r7, r3
 8006450:	885a      	ldrh	r2, [r3, #2]
 8006452:	4ba9      	ldr	r3, [pc, #676]	; (80066f8 <drawAlarmApp+0x30c>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	b29b      	uxth	r3, r3
 8006458:	18db      	adds	r3, r3, r3
 800645a:	b29b      	uxth	r3, r3
 800645c:	18d3      	adds	r3, r2, r3
 800645e:	b29a      	uxth	r2, r3
 8006460:	187b      	adds	r3, r7, r1
 8006462:	805a      	strh	r2, [r3, #2]
	struct times alarmTime = {0};
 8006464:	230c      	movs	r3, #12
 8006466:	18fb      	adds	r3, r7, r3
 8006468:	0018      	movs	r0, r3
 800646a:	2303      	movs	r3, #3
 800646c:	001a      	movs	r2, r3
 800646e:	2100      	movs	r1, #0
 8006470:	f005 fe77 	bl	800c162 <memset>


	if (isFaceBeingChanged) {
 8006474:	4ba1      	ldr	r3, [pc, #644]	; (80066fc <drawAlarmApp+0x310>)
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d028      	beq.n	80064ce <drawAlarmApp+0xe2>
		clearScreen(ST77XX_MAGENTA, hspi);
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	4aa0      	ldr	r2, [pc, #640]	; (8006700 <drawAlarmApp+0x314>)
 8006480:	0019      	movs	r1, r3
 8006482:	0010      	movs	r0, r2
 8006484:	f7fb ff7e 	bl	8002384 <clearScreen>
		drawTitle("alarm", hspi);
 8006488:	683a      	ldr	r2, [r7, #0]
 800648a:	4b9e      	ldr	r3, [pc, #632]	; (8006704 <drawAlarmApp+0x318>)
 800648c:	0011      	movs	r1, r2
 800648e:	0018      	movs	r0, r3
 8006490:	f000 fc6e 	bl	8006d70 <drawTitle>
		drawButtons(hspi);
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	0018      	movs	r0, r3
 8006498:	f000 fa96 	bl	80069c8 <drawButtons>
		if (getDisplayOrientation() % 2 == 0) drawButtonText(1, "stopwatch", hspi);
 800649c:	f7fc fd26 	bl	8002eec <getDisplayOrientation>
 80064a0:	0003      	movs	r3, r0
 80064a2:	001a      	movs	r2, r3
 80064a4:	2301      	movs	r3, #1
 80064a6:	4013      	ands	r3, r2
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d106      	bne.n	80064bc <drawAlarmApp+0xd0>
 80064ae:	683a      	ldr	r2, [r7, #0]
 80064b0:	4b95      	ldr	r3, [pc, #596]	; (8006708 <drawAlarmApp+0x31c>)
 80064b2:	0019      	movs	r1, r3
 80064b4:	2001      	movs	r0, #1
 80064b6:	f000 fb51 	bl	8006b5c <drawButtonText>
 80064ba:	e005      	b.n	80064c8 <drawAlarmApp+0xdc>
		else drawButtonText(1, "stopw.", hspi);
 80064bc:	683a      	ldr	r2, [r7, #0]
 80064be:	4b93      	ldr	r3, [pc, #588]	; (800670c <drawAlarmApp+0x320>)
 80064c0:	0019      	movs	r1, r3
 80064c2:	2001      	movs	r0, #1
 80064c4:	f000 fb4a 	bl	8006b5c <drawButtonText>
		isFaceBeingChanged = 0;
 80064c8:	4b8c      	ldr	r3, [pc, #560]	; (80066fc <drawAlarmApp+0x310>)
 80064ca:	2200      	movs	r2, #0
 80064cc:	701a      	strb	r2, [r3, #0]
	}

	drawTopBar(hrtc, hspi);
 80064ce:	683a      	ldr	r2, [r7, #0]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	0011      	movs	r1, r2
 80064d4:	0018      	movs	r0, r3
 80064d6:	f000 fe17 	bl	8007108 <drawTopBar>
	if (alarmVars.isBeingSet == 0) {
 80064da:	4b8d      	ldr	r3, [pc, #564]	; (8006710 <drawAlarmApp+0x324>)
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d000      	beq.n	80064e4 <drawAlarmApp+0xf8>
 80064e2:	e090      	b.n	8006606 <drawAlarmApp+0x21a>
		drawCenteredModeText(modeTextCoords.x, modeTextCoords.y, "", hspi);
 80064e4:	2214      	movs	r2, #20
 80064e6:	18bb      	adds	r3, r7, r2
 80064e8:	881b      	ldrh	r3, [r3, #0]
 80064ea:	0018      	movs	r0, r3
 80064ec:	18bb      	adds	r3, r7, r2
 80064ee:	885b      	ldrh	r3, [r3, #2]
 80064f0:	0019      	movs	r1, r3
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	4a87      	ldr	r2, [pc, #540]	; (8006714 <drawAlarmApp+0x328>)
 80064f6:	f000 fca3 	bl	8006e40 <drawCenteredModeText>
		if (alarmVars.isSet == 0) {
 80064fa:	4b85      	ldr	r3, [pc, #532]	; (8006710 <drawAlarmApp+0x324>)
 80064fc:	789b      	ldrb	r3, [r3, #2]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d131      	bne.n	8006566 <drawAlarmApp+0x17a>
			drawButtonText(2, "", hspi);
 8006502:	683a      	ldr	r2, [r7, #0]
 8006504:	4b83      	ldr	r3, [pc, #524]	; (8006714 <drawAlarmApp+0x328>)
 8006506:	0019      	movs	r1, r3
 8006508:	2002      	movs	r0, #2
 800650a:	f000 fb27 	bl	8006b5c <drawButtonText>
			drawButtonText(3, "", hspi);
 800650e:	683a      	ldr	r2, [r7, #0]
 8006510:	4b80      	ldr	r3, [pc, #512]	; (8006714 <drawAlarmApp+0x328>)
 8006512:	0019      	movs	r1, r3
 8006514:	2003      	movs	r0, #3
 8006516:	f000 fb21 	bl	8006b5c <drawButtonText>
			drawButtonText(4, "set", hspi);
 800651a:	683a      	ldr	r2, [r7, #0]
 800651c:	4b7e      	ldr	r3, [pc, #504]	; (8006718 <drawAlarmApp+0x32c>)
 800651e:	0019      	movs	r1, r3
 8006520:	2004      	movs	r0, #4
 8006522:	f000 fb1b 	bl	8006b5c <drawButtonText>
			drawCenteredModeText(modeTextCoords.x, modeTextCoords.y, "alarm unset", hspi);
 8006526:	2214      	movs	r2, #20
 8006528:	18bb      	adds	r3, r7, r2
 800652a:	881b      	ldrh	r3, [r3, #0]
 800652c:	0018      	movs	r0, r3
 800652e:	18bb      	adds	r3, r7, r2
 8006530:	885b      	ldrh	r3, [r3, #2]
 8006532:	0019      	movs	r1, r3
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	4a79      	ldr	r2, [pc, #484]	; (800671c <drawAlarmApp+0x330>)
 8006538:	f000 fc82 	bl	8006e40 <drawCenteredModeText>
			fillRect(timeTextCoords.x, timeTextCoords.y, 114, 32, getBackgroundColor(), hspi);
 800653c:	2210      	movs	r2, #16
 800653e:	18bb      	adds	r3, r7, r2
 8006540:	881b      	ldrh	r3, [r3, #0]
 8006542:	001c      	movs	r4, r3
 8006544:	18bb      	adds	r3, r7, r2
 8006546:	885b      	ldrh	r3, [r3, #2]
 8006548:	001d      	movs	r5, r3
 800654a:	f7fc fc65 	bl	8002e18 <getBackgroundColor>
 800654e:	0003      	movs	r3, r0
 8006550:	001a      	movs	r2, r3
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	9301      	str	r3, [sp, #4]
 8006556:	9200      	str	r2, [sp, #0]
 8006558:	2320      	movs	r3, #32
 800655a:	2272      	movs	r2, #114	; 0x72
 800655c:	0029      	movs	r1, r5
 800655e:	0020      	movs	r0, r4
 8006560:	f7fb fec0 	bl	80022e4 <fillRect>
		alarmTime.hr  = alarmVars.alarmToSet->hr;
		alarmTime.min = alarmVars.alarmToSet->min;
		alarmTime.sec = alarmVars.alarmToSet->sec;
		drawWeekdayTime(timeTextCoords.x, timeTextCoords.y, alarmVars.alarmToSet->weekday, &alarmTime, hspi);
	}
}
 8006564:	e0c4      	b.n	80066f0 <drawAlarmApp+0x304>
		else if (isAlarmDone == 0) {
 8006566:	4b6e      	ldr	r3, [pc, #440]	; (8006720 <drawAlarmApp+0x334>)
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	b2db      	uxtb	r3, r3
 800656c:	2b00      	cmp	r3, #0
 800656e:	d13e      	bne.n	80065ee <drawAlarmApp+0x202>
			drawButtonText(2, "", hspi);
 8006570:	683a      	ldr	r2, [r7, #0]
 8006572:	4b68      	ldr	r3, [pc, #416]	; (8006714 <drawAlarmApp+0x328>)
 8006574:	0019      	movs	r1, r3
 8006576:	2002      	movs	r0, #2
 8006578:	f000 faf0 	bl	8006b5c <drawButtonText>
			drawButtonText(3, "", hspi);
 800657c:	683a      	ldr	r2, [r7, #0]
 800657e:	4b65      	ldr	r3, [pc, #404]	; (8006714 <drawAlarmApp+0x328>)
 8006580:	0019      	movs	r1, r3
 8006582:	2003      	movs	r0, #3
 8006584:	f000 faea 	bl	8006b5c <drawButtonText>
			drawButtonText(4, "clear", hspi);
 8006588:	683a      	ldr	r2, [r7, #0]
 800658a:	4b66      	ldr	r3, [pc, #408]	; (8006724 <drawAlarmApp+0x338>)
 800658c:	0019      	movs	r1, r3
 800658e:	2004      	movs	r0, #4
 8006590:	f000 fae4 	bl	8006b5c <drawButtonText>
			drawCenteredModeText(modeTextCoords.x, modeTextCoords.y, "alarm set!", hspi);
 8006594:	2214      	movs	r2, #20
 8006596:	18bb      	adds	r3, r7, r2
 8006598:	881b      	ldrh	r3, [r3, #0]
 800659a:	0018      	movs	r0, r3
 800659c:	18bb      	adds	r3, r7, r2
 800659e:	885b      	ldrh	r3, [r3, #2]
 80065a0:	0019      	movs	r1, r3
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	4a60      	ldr	r2, [pc, #384]	; (8006728 <drawAlarmApp+0x33c>)
 80065a6:	f000 fc4b 	bl	8006e40 <drawCenteredModeText>
			alarmTime.hr  = alarmVars.alarmToSet->hr;
 80065aa:	4b59      	ldr	r3, [pc, #356]	; (8006710 <drawAlarmApp+0x324>)
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	781a      	ldrb	r2, [r3, #0]
 80065b0:	210c      	movs	r1, #12
 80065b2:	187b      	adds	r3, r7, r1
 80065b4:	701a      	strb	r2, [r3, #0]
			alarmTime.min = alarmVars.alarmToSet->min;
 80065b6:	4b56      	ldr	r3, [pc, #344]	; (8006710 <drawAlarmApp+0x324>)
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	785a      	ldrb	r2, [r3, #1]
 80065bc:	187b      	adds	r3, r7, r1
 80065be:	705a      	strb	r2, [r3, #1]
			alarmTime.sec = alarmVars.alarmToSet->sec;
 80065c0:	4b53      	ldr	r3, [pc, #332]	; (8006710 <drawAlarmApp+0x324>)
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	789a      	ldrb	r2, [r3, #2]
 80065c6:	187b      	adds	r3, r7, r1
 80065c8:	709a      	strb	r2, [r3, #2]
			drawWeekdayTime(timeTextCoords.x, timeTextCoords.y, alarmVars.alarmToSet->weekday, &alarmTime, hspi);
 80065ca:	2210      	movs	r2, #16
 80065cc:	18bb      	adds	r3, r7, r2
 80065ce:	881b      	ldrh	r3, [r3, #0]
 80065d0:	0018      	movs	r0, r3
 80065d2:	18bb      	adds	r3, r7, r2
 80065d4:	885b      	ldrh	r3, [r3, #2]
 80065d6:	001c      	movs	r4, r3
 80065d8:	4b4d      	ldr	r3, [pc, #308]	; (8006710 <drawAlarmApp+0x324>)
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	78da      	ldrb	r2, [r3, #3]
 80065de:	1879      	adds	r1, r7, r1
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	9300      	str	r3, [sp, #0]
 80065e4:	000b      	movs	r3, r1
 80065e6:	0021      	movs	r1, r4
 80065e8:	f000 febc 	bl	8007364 <drawWeekdayTime>
}
 80065ec:	e080      	b.n	80066f0 <drawAlarmApp+0x304>
			drawCenteredModeText(modeTextCoords.x, modeTextCoords.y, "alarming!", hspi);
 80065ee:	2214      	movs	r2, #20
 80065f0:	18bb      	adds	r3, r7, r2
 80065f2:	881b      	ldrh	r3, [r3, #0]
 80065f4:	0018      	movs	r0, r3
 80065f6:	18bb      	adds	r3, r7, r2
 80065f8:	885b      	ldrh	r3, [r3, #2]
 80065fa:	0019      	movs	r1, r3
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	4a4b      	ldr	r2, [pc, #300]	; (800672c <drawAlarmApp+0x340>)
 8006600:	f000 fc1e 	bl	8006e40 <drawCenteredModeText>
}
 8006604:	e074      	b.n	80066f0 <drawAlarmApp+0x304>
	else if (alarmVars.isBeingSet == 1) {
 8006606:	4b42      	ldr	r3, [pc, #264]	; (8006710 <drawAlarmApp+0x324>)
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	2b01      	cmp	r3, #1
 800660c:	d000      	beq.n	8006610 <drawAlarmApp+0x224>
 800660e:	e06f      	b.n	80066f0 <drawAlarmApp+0x304>
		switch (alarmVars.fieldBeingSet) {
 8006610:	4b3f      	ldr	r3, [pc, #252]	; (8006710 <drawAlarmApp+0x324>)
 8006612:	785b      	ldrb	r3, [r3, #1]
 8006614:	2b02      	cmp	r3, #2
 8006616:	d014      	beq.n	8006642 <drawAlarmApp+0x256>
 8006618:	dc02      	bgt.n	8006620 <drawAlarmApp+0x234>
 800661a:	2b01      	cmp	r3, #1
 800661c:	d005      	beq.n	800662a <drawAlarmApp+0x23e>
			default: break;
 800661e:	e034      	b.n	800668a <drawAlarmApp+0x29e>
		switch (alarmVars.fieldBeingSet) {
 8006620:	2b03      	cmp	r3, #3
 8006622:	d01a      	beq.n	800665a <drawAlarmApp+0x26e>
 8006624:	2b04      	cmp	r3, #4
 8006626:	d024      	beq.n	8006672 <drawAlarmApp+0x286>
			default: break;
 8006628:	e02f      	b.n	800668a <drawAlarmApp+0x29e>
			case 1: drawCenteredModeText(modeTextCoords.x, modeTextCoords.y, "setting second...", hspi); break;
 800662a:	2214      	movs	r2, #20
 800662c:	18bb      	adds	r3, r7, r2
 800662e:	881b      	ldrh	r3, [r3, #0]
 8006630:	0018      	movs	r0, r3
 8006632:	18bb      	adds	r3, r7, r2
 8006634:	885b      	ldrh	r3, [r3, #2]
 8006636:	0019      	movs	r1, r3
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	4a3d      	ldr	r2, [pc, #244]	; (8006730 <drawAlarmApp+0x344>)
 800663c:	f000 fc00 	bl	8006e40 <drawCenteredModeText>
 8006640:	e023      	b.n	800668a <drawAlarmApp+0x29e>
			case 2: drawCenteredModeText(modeTextCoords.x, modeTextCoords.y, "setting minute...", hspi); break;
 8006642:	2214      	movs	r2, #20
 8006644:	18bb      	adds	r3, r7, r2
 8006646:	881b      	ldrh	r3, [r3, #0]
 8006648:	0018      	movs	r0, r3
 800664a:	18bb      	adds	r3, r7, r2
 800664c:	885b      	ldrh	r3, [r3, #2]
 800664e:	0019      	movs	r1, r3
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	4a38      	ldr	r2, [pc, #224]	; (8006734 <drawAlarmApp+0x348>)
 8006654:	f000 fbf4 	bl	8006e40 <drawCenteredModeText>
 8006658:	e017      	b.n	800668a <drawAlarmApp+0x29e>
			case 3: drawCenteredModeText(modeTextCoords.x, modeTextCoords.y, "setting hour...", hspi); break;
 800665a:	2214      	movs	r2, #20
 800665c:	18bb      	adds	r3, r7, r2
 800665e:	881b      	ldrh	r3, [r3, #0]
 8006660:	0018      	movs	r0, r3
 8006662:	18bb      	adds	r3, r7, r2
 8006664:	885b      	ldrh	r3, [r3, #2]
 8006666:	0019      	movs	r1, r3
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	4a33      	ldr	r2, [pc, #204]	; (8006738 <drawAlarmApp+0x34c>)
 800666c:	f000 fbe8 	bl	8006e40 <drawCenteredModeText>
 8006670:	e00b      	b.n	800668a <drawAlarmApp+0x29e>
			case 4: drawCenteredModeText(modeTextCoords.x, modeTextCoords.y, "setting day...", hspi); break;
 8006672:	2214      	movs	r2, #20
 8006674:	18bb      	adds	r3, r7, r2
 8006676:	881b      	ldrh	r3, [r3, #0]
 8006678:	0018      	movs	r0, r3
 800667a:	18bb      	adds	r3, r7, r2
 800667c:	885b      	ldrh	r3, [r3, #2]
 800667e:	0019      	movs	r1, r3
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	4a2e      	ldr	r2, [pc, #184]	; (800673c <drawAlarmApp+0x350>)
 8006684:	f000 fbdc 	bl	8006e40 <drawCenteredModeText>
 8006688:	46c0      	nop			; (mov r8, r8)
		drawButtonText(2, "up", hspi);
 800668a:	683a      	ldr	r2, [r7, #0]
 800668c:	4b2c      	ldr	r3, [pc, #176]	; (8006740 <drawAlarmApp+0x354>)
 800668e:	0019      	movs	r1, r3
 8006690:	2002      	movs	r0, #2
 8006692:	f000 fa63 	bl	8006b5c <drawButtonText>
		drawButtonText(3, "down", hspi);
 8006696:	683a      	ldr	r2, [r7, #0]
 8006698:	4b2a      	ldr	r3, [pc, #168]	; (8006744 <drawAlarmApp+0x358>)
 800669a:	0019      	movs	r1, r3
 800669c:	2003      	movs	r0, #3
 800669e:	f000 fa5d 	bl	8006b5c <drawButtonText>
		drawButtonText(4, "next", hspi);
 80066a2:	683a      	ldr	r2, [r7, #0]
 80066a4:	4b28      	ldr	r3, [pc, #160]	; (8006748 <drawAlarmApp+0x35c>)
 80066a6:	0019      	movs	r1, r3
 80066a8:	2004      	movs	r0, #4
 80066aa:	f000 fa57 	bl	8006b5c <drawButtonText>
		alarmTime.hr  = alarmVars.alarmToSet->hr;
 80066ae:	4b18      	ldr	r3, [pc, #96]	; (8006710 <drawAlarmApp+0x324>)
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	781a      	ldrb	r2, [r3, #0]
 80066b4:	210c      	movs	r1, #12
 80066b6:	187b      	adds	r3, r7, r1
 80066b8:	701a      	strb	r2, [r3, #0]
		alarmTime.min = alarmVars.alarmToSet->min;
 80066ba:	4b15      	ldr	r3, [pc, #84]	; (8006710 <drawAlarmApp+0x324>)
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	785a      	ldrb	r2, [r3, #1]
 80066c0:	187b      	adds	r3, r7, r1
 80066c2:	705a      	strb	r2, [r3, #1]
		alarmTime.sec = alarmVars.alarmToSet->sec;
 80066c4:	4b12      	ldr	r3, [pc, #72]	; (8006710 <drawAlarmApp+0x324>)
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	789a      	ldrb	r2, [r3, #2]
 80066ca:	187b      	adds	r3, r7, r1
 80066cc:	709a      	strb	r2, [r3, #2]
		drawWeekdayTime(timeTextCoords.x, timeTextCoords.y, alarmVars.alarmToSet->weekday, &alarmTime, hspi);
 80066ce:	2210      	movs	r2, #16
 80066d0:	18bb      	adds	r3, r7, r2
 80066d2:	881b      	ldrh	r3, [r3, #0]
 80066d4:	0018      	movs	r0, r3
 80066d6:	18bb      	adds	r3, r7, r2
 80066d8:	885b      	ldrh	r3, [r3, #2]
 80066da:	001c      	movs	r4, r3
 80066dc:	4b0c      	ldr	r3, [pc, #48]	; (8006710 <drawAlarmApp+0x324>)
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	78da      	ldrb	r2, [r3, #3]
 80066e2:	1879      	adds	r1, r7, r1
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	9300      	str	r3, [sp, #0]
 80066e8:	000b      	movs	r3, r1
 80066ea:	0021      	movs	r1, r4
 80066ec:	f000 fe3a 	bl	8007364 <drawWeekdayTime>
}
 80066f0:	46c0      	nop			; (mov r8, r8)
 80066f2:	46bd      	mov	sp, r7
 80066f4:	b006      	add	sp, #24
 80066f6:	bdb0      	pop	{r4, r5, r7, pc}
 80066f8:	2000001c 	.word	0x2000001c
 80066fc:	20000078 	.word	0x20000078
 8006700:	0000f81f 	.word	0x0000f81f
 8006704:	0800cb14 	.word	0x0800cb14
 8006708:	0800cb78 	.word	0x0800cb78
 800670c:	0800cb84 	.word	0x0800cb84
 8006710:	20000138 	.word	0x20000138
 8006714:	0800ca18 	.word	0x0800ca18
 8006718:	0800caa4 	.word	0x0800caa4
 800671c:	0800cb8c 	.word	0x0800cb8c
 8006720:	20000163 	.word	0x20000163
 8006724:	0800cb34 	.word	0x0800cb34
 8006728:	0800cb98 	.word	0x0800cb98
 800672c:	0800cba4 	.word	0x0800cba4
 8006730:	0800cb64 	.word	0x0800cb64
 8006734:	0800cabc 	.word	0x0800cabc
 8006738:	0800cad0 	.word	0x0800cad0
 800673c:	0800cbb0 	.word	0x0800cbb0
 8006740:	0800caa8 	.word	0x0800caa8
 8006744:	0800caac 	.word	0x0800caac
 8006748:	0800cab4 	.word	0x0800cab4

0800674c <drawStopwatchApp>:

// helper function for drawing all elements for stopwatch display
void drawStopwatchApp(RTC_HandleTypeDef *hrtc, SPI_HandleTypeDef *hspi) {
 800674c:	b5b0      	push	{r4, r5, r7, lr}
 800674e:	b08e      	sub	sp, #56	; 0x38
 8006750:	af02      	add	r7, sp, #8
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
	struct coords timeTextCoords = {centeredToLeft(getDisplayWidth()/2, 96), 68};
 8006756:	f7fc fbdd 	bl	8002f14 <getDisplayWidth>
 800675a:	0003      	movs	r3, r0
 800675c:	085b      	lsrs	r3, r3, #1
 800675e:	b29b      	uxth	r3, r3
 8006760:	2160      	movs	r1, #96	; 0x60
 8006762:	0018      	movs	r0, r3
 8006764:	f7fc fc04 	bl	8002f70 <centeredToLeft>
 8006768:	0003      	movs	r3, r0
 800676a:	001a      	movs	r2, r3
 800676c:	212c      	movs	r1, #44	; 0x2c
 800676e:	187b      	adds	r3, r7, r1
 8006770:	801a      	strh	r2, [r3, #0]
 8006772:	187b      	adds	r3, r7, r1
 8006774:	2244      	movs	r2, #68	; 0x44
 8006776:	805a      	strh	r2, [r3, #2]
	if (getDisplayOrientation() % 2 == 0) timeTextCoords.y = 68;
 8006778:	f7fc fbb8 	bl	8002eec <getDisplayOrientation>
 800677c:	0003      	movs	r3, r0
 800677e:	001a      	movs	r2, r3
 8006780:	2301      	movs	r3, #1
 8006782:	4013      	ands	r3, r2
 8006784:	b2db      	uxtb	r3, r3
 8006786:	2b00      	cmp	r3, #0
 8006788:	d104      	bne.n	8006794 <drawStopwatchApp+0x48>
 800678a:	232c      	movs	r3, #44	; 0x2c
 800678c:	18fb      	adds	r3, r7, r3
 800678e:	2244      	movs	r2, #68	; 0x44
 8006790:	805a      	strh	r2, [r3, #2]
 8006792:	e003      	b.n	800679c <drawStopwatchApp+0x50>
	else timeTextCoords.y = 52;
 8006794:	232c      	movs	r3, #44	; 0x2c
 8006796:	18fb      	adds	r3, r7, r3
 8006798:	2234      	movs	r2, #52	; 0x34
 800679a:	805a      	strh	r2, [r3, #2]
	struct coords lapTextCoords = {getDisplayWidth()/2, timeTextCoords.y+fontH*2};
 800679c:	f7fc fbba 	bl	8002f14 <getDisplayWidth>
 80067a0:	0003      	movs	r3, r0
 80067a2:	085b      	lsrs	r3, r3, #1
 80067a4:	b29a      	uxth	r2, r3
 80067a6:	2128      	movs	r1, #40	; 0x28
 80067a8:	187b      	adds	r3, r7, r1
 80067aa:	801a      	strh	r2, [r3, #0]
 80067ac:	232c      	movs	r3, #44	; 0x2c
 80067ae:	18fb      	adds	r3, r7, r3
 80067b0:	885a      	ldrh	r2, [r3, #2]
 80067b2:	4b5a      	ldr	r3, [pc, #360]	; (800691c <drawStopwatchApp+0x1d0>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	18db      	adds	r3, r3, r3
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	18d3      	adds	r3, r2, r3
 80067be:	b29a      	uxth	r2, r3
 80067c0:	187b      	adds	r3, r7, r1
 80067c2:	805a      	strh	r2, [r3, #2]
	struct times t = {0};
 80067c4:	2324      	movs	r3, #36	; 0x24
 80067c6:	18fb      	adds	r3, r7, r3
 80067c8:	0018      	movs	r0, r3
 80067ca:	2303      	movs	r3, #3
 80067cc:	001a      	movs	r2, r3
 80067ce:	2100      	movs	r1, #0
 80067d0:	f005 fcc7 	bl	800c162 <memset>
	char str[24];

	if (isFaceBeingChanged) {
 80067d4:	4b52      	ldr	r3, [pc, #328]	; (8006920 <drawStopwatchApp+0x1d4>)
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d024      	beq.n	8006826 <drawStopwatchApp+0xda>
		clearScreen(ST77XX_YELLOW, hspi);
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	4a51      	ldr	r2, [pc, #324]	; (8006924 <drawStopwatchApp+0x1d8>)
 80067e0:	0019      	movs	r1, r3
 80067e2:	0010      	movs	r0, r2
 80067e4:	f7fb fdce 	bl	8002384 <clearScreen>
		drawTitle("stopwatch", hspi);
 80067e8:	683a      	ldr	r2, [r7, #0]
 80067ea:	4b4f      	ldr	r3, [pc, #316]	; (8006928 <drawStopwatchApp+0x1dc>)
 80067ec:	0011      	movs	r1, r2
 80067ee:	0018      	movs	r0, r3
 80067f0:	f000 fabe 	bl	8006d70 <drawTitle>
		drawButtons(hspi);
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	0018      	movs	r0, r3
 80067f8:	f000 f8e6 	bl	80069c8 <drawButtons>
		drawButtonText(1, "clock", hspi);
 80067fc:	683a      	ldr	r2, [r7, #0]
 80067fe:	4b4b      	ldr	r3, [pc, #300]	; (800692c <drawStopwatchApp+0x1e0>)
 8006800:	0019      	movs	r1, r3
 8006802:	2001      	movs	r0, #1
 8006804:	f000 f9aa 	bl	8006b5c <drawButtonText>
		drawButtonText(3, "lap", hspi);
 8006808:	683a      	ldr	r2, [r7, #0]
 800680a:	4b49      	ldr	r3, [pc, #292]	; (8006930 <drawStopwatchApp+0x1e4>)
 800680c:	0019      	movs	r1, r3
 800680e:	2003      	movs	r0, #3
 8006810:	f000 f9a4 	bl	8006b5c <drawButtonText>
		drawButtonText(4, "clear", hspi);
 8006814:	683a      	ldr	r2, [r7, #0]
 8006816:	4b47      	ldr	r3, [pc, #284]	; (8006934 <drawStopwatchApp+0x1e8>)
 8006818:	0019      	movs	r1, r3
 800681a:	2004      	movs	r0, #4
 800681c:	f000 f99e 	bl	8006b5c <drawButtonText>
		isFaceBeingChanged = 0;
 8006820:	4b3f      	ldr	r3, [pc, #252]	; (8006920 <drawStopwatchApp+0x1d4>)
 8006822:	2200      	movs	r2, #0
 8006824:	701a      	strb	r2, [r3, #0]
	}

	if (getDisplayOrientation() % 2 == 0) drawTopBar(hrtc, hspi);
 8006826:	f7fc fb61 	bl	8002eec <getDisplayOrientation>
 800682a:	0003      	movs	r3, r0
 800682c:	001a      	movs	r2, r3
 800682e:	2301      	movs	r3, #1
 8006830:	4013      	ands	r3, r2
 8006832:	b2db      	uxtb	r3, r3
 8006834:	2b00      	cmp	r3, #0
 8006836:	d106      	bne.n	8006846 <drawStopwatchApp+0xfa>
 8006838:	683a      	ldr	r2, [r7, #0]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	0011      	movs	r1, r2
 800683e:	0018      	movs	r0, r3
 8006840:	f000 fc62 	bl	8007108 <drawTopBar>
 8006844:	e016      	b.n	8006874 <drawStopwatchApp+0x128>
	else drawBattery(centeredToLeft(getDisplayWidth()/2, 6+4*fontW), 23, hspi);
 8006846:	f7fc fb65 	bl	8002f14 <getDisplayWidth>
 800684a:	0003      	movs	r3, r0
 800684c:	085b      	lsrs	r3, r3, #1
 800684e:	b29a      	uxth	r2, r3
 8006850:	4b39      	ldr	r3, [pc, #228]	; (8006938 <drawStopwatchApp+0x1ec>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	b29b      	uxth	r3, r3
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	b29b      	uxth	r3, r3
 800685a:	3306      	adds	r3, #6
 800685c:	b29b      	uxth	r3, r3
 800685e:	0019      	movs	r1, r3
 8006860:	0010      	movs	r0, r2
 8006862:	f7fc fb85 	bl	8002f70 <centeredToLeft>
 8006866:	0003      	movs	r3, r0
 8006868:	0018      	movs	r0, r3
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	001a      	movs	r2, r3
 800686e:	2117      	movs	r1, #23
 8006870:	f000 fb14 	bl	8006e9c <drawBattery>
	secondsToTime(&t, stopwatchCounter);
 8006874:	4b31      	ldr	r3, [pc, #196]	; (800693c <drawStopwatchApp+0x1f0>)
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	2424      	movs	r4, #36	; 0x24
 800687a:	193b      	adds	r3, r7, r4
 800687c:	0011      	movs	r1, r2
 800687e:	0018      	movs	r0, r3
 8006880:	f7fc ffd5 	bl	800382e <secondsToTime>
	drawBasicTime(timeTextCoords.x, timeTextCoords.y, &t, hspi);
 8006884:	222c      	movs	r2, #44	; 0x2c
 8006886:	18bb      	adds	r3, r7, r2
 8006888:	881b      	ldrh	r3, [r3, #0]
 800688a:	0018      	movs	r0, r3
 800688c:	18bb      	adds	r3, r7, r2
 800688e:	885b      	ldrh	r3, [r3, #2]
 8006890:	0019      	movs	r1, r3
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	193a      	adds	r2, r7, r4
 8006896:	f000 fd93 	bl	80073c0 <drawBasicTime>

	secondsToTime(&t, stopwatchVars.lapCurrent-stopwatchVars.lapPrev);		// TODO: some sort of check?
 800689a:	4b29      	ldr	r3, [pc, #164]	; (8006940 <drawStopwatchApp+0x1f4>)
 800689c:	685a      	ldr	r2, [r3, #4]
 800689e:	4b28      	ldr	r3, [pc, #160]	; (8006940 <drawStopwatchApp+0x1f4>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	1ad2      	subs	r2, r2, r3
 80068a4:	193b      	adds	r3, r7, r4
 80068a6:	0011      	movs	r1, r2
 80068a8:	0018      	movs	r0, r3
 80068aa:	f7fc ffc0 	bl	800382e <secondsToTime>
	setTextSize(1);
 80068ae:	2001      	movs	r0, #1
 80068b0:	f7fc fa92 	bl	8002dd8 <setTextSize>
	setTextColor(ST77XX_BLACK);
 80068b4:	2000      	movs	r0, #0
 80068b6:	f7fc fa9f 	bl	8002df8 <setTextColor>
	sprintf(str, "lap: %2d:%2d:%2d", t.hr, t.min, t.sec);
 80068ba:	193b      	adds	r3, r7, r4
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	001a      	movs	r2, r3
 80068c0:	0021      	movs	r1, r4
 80068c2:	193b      	adds	r3, r7, r4
 80068c4:	785b      	ldrb	r3, [r3, #1]
 80068c6:	001c      	movs	r4, r3
 80068c8:	187b      	adds	r3, r7, r1
 80068ca:	789b      	ldrb	r3, [r3, #2]
 80068cc:	491d      	ldr	r1, [pc, #116]	; (8006944 <drawStopwatchApp+0x1f8>)
 80068ce:	250c      	movs	r5, #12
 80068d0:	1978      	adds	r0, r7, r5
 80068d2:	9300      	str	r3, [sp, #0]
 80068d4:	0023      	movs	r3, r4
 80068d6:	f005 fccb 	bl	800c270 <siprintf>
	drawCenteredText(lapTextCoords.x, lapTextCoords.y, str, hspi);
 80068da:	2228      	movs	r2, #40	; 0x28
 80068dc:	18bb      	adds	r3, r7, r2
 80068de:	881b      	ldrh	r3, [r3, #0]
 80068e0:	b2d8      	uxtb	r0, r3
 80068e2:	18bb      	adds	r3, r7, r2
 80068e4:	885b      	ldrh	r3, [r3, #2]
 80068e6:	b2d9      	uxtb	r1, r3
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	197a      	adds	r2, r7, r5
 80068ec:	f7fc f912 	bl	8002b14 <drawCenteredText>

	if (isStopwatchRunning == 0) drawButtonText(2, "run", hspi);
 80068f0:	4b15      	ldr	r3, [pc, #84]	; (8006948 <drawStopwatchApp+0x1fc>)
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d106      	bne.n	8006908 <drawStopwatchApp+0x1bc>
 80068fa:	683a      	ldr	r2, [r7, #0]
 80068fc:	4b13      	ldr	r3, [pc, #76]	; (800694c <drawStopwatchApp+0x200>)
 80068fe:	0019      	movs	r1, r3
 8006900:	2002      	movs	r0, #2
 8006902:	f000 f92b 	bl	8006b5c <drawButtonText>
	else drawButtonText(2, "pause", hspi);
}
 8006906:	e005      	b.n	8006914 <drawStopwatchApp+0x1c8>
	else drawButtonText(2, "pause", hspi);
 8006908:	683a      	ldr	r2, [r7, #0]
 800690a:	4b11      	ldr	r3, [pc, #68]	; (8006950 <drawStopwatchApp+0x204>)
 800690c:	0019      	movs	r1, r3
 800690e:	2002      	movs	r0, #2
 8006910:	f000 f924 	bl	8006b5c <drawButtonText>
}
 8006914:	46c0      	nop			; (mov r8, r8)
 8006916:	46bd      	mov	sp, r7
 8006918:	b00c      	add	sp, #48	; 0x30
 800691a:	bdb0      	pop	{r4, r5, r7, pc}
 800691c:	2000001c 	.word	0x2000001c
 8006920:	20000078 	.word	0x20000078
 8006924:	0000ffe0 	.word	0x0000ffe0
 8006928:	0800cb78 	.word	0x0800cb78
 800692c:	0800ca94 	.word	0x0800ca94
 8006930:	0800cbc0 	.word	0x0800cbc0
 8006934:	0800cb34 	.word	0x0800cb34
 8006938:	20000018 	.word	0x20000018
 800693c:	200001b8 	.word	0x200001b8
 8006940:	20000140 	.word	0x20000140
 8006944:	0800cbc4 	.word	0x0800cbc4
 8006948:	20000168 	.word	0x20000168
 800694c:	0800cb28 	.word	0x0800cb28
 8006950:	0800cb2c 	.word	0x0800cb2c

08006954 <drawButton>:

// ---- drawing functions related specifically to the user interface ----
// draws a 10x10 box representing a button onto the screen
// uses upper left coords
void drawButton(int x, int y, SPI_HandleTypeDef *hspi) {
 8006954:	b590      	push	{r4, r7, lr}
 8006956:	b087      	sub	sp, #28
 8006958:	af02      	add	r7, sp, #8
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	607a      	str	r2, [r7, #4]
	// bounds checking. probably already done in draw/fillRect
	if (x < 0 || x+10 > getDisplayWidth() || y < 0 || y+10 > getDisplayHeight()) return;		// TODO: fix bounds checking
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2b00      	cmp	r3, #0
 8006964:	db29      	blt.n	80069ba <drawButton+0x66>
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	330a      	adds	r3, #10
 800696a:	001c      	movs	r4, r3
 800696c:	f7fc fad2 	bl	8002f14 <getDisplayWidth>
 8006970:	0003      	movs	r3, r0
 8006972:	429c      	cmp	r4, r3
 8006974:	dc21      	bgt.n	80069ba <drawButton+0x66>
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	2b00      	cmp	r3, #0
 800697a:	db1e      	blt.n	80069ba <drawButton+0x66>
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	330a      	adds	r3, #10
 8006980:	001c      	movs	r4, r3
 8006982:	f7fc fabd 	bl	8002f00 <getDisplayHeight>
 8006986:	0003      	movs	r3, r0
 8006988:	429c      	cmp	r4, r3
 800698a:	dc16      	bgt.n	80069ba <drawButton+0x66>

	// draw rect size 8 with 1 pixel border
	// parameters give center position of graphic
	drawRect(x, y, 10, 10, ST77XX_BLACK, hspi);
 800698c:	68b9      	ldr	r1, [r7, #8]
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	9301      	str	r3, [sp, #4]
 8006994:	2300      	movs	r3, #0
 8006996:	9300      	str	r3, [sp, #0]
 8006998:	230a      	movs	r3, #10
 800699a:	220a      	movs	r2, #10
 800699c:	f7fb fc68 	bl	8002270 <drawRect>
	fillRect(x+1, y+1, 8, 8, ST77XX_WHITE, hspi);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	1c58      	adds	r0, r3, #1
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	1c59      	adds	r1, r3, #1
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	9301      	str	r3, [sp, #4]
 80069ac:	4b05      	ldr	r3, [pc, #20]	; (80069c4 <drawButton+0x70>)
 80069ae:	9300      	str	r3, [sp, #0]
 80069b0:	2308      	movs	r3, #8
 80069b2:	2208      	movs	r2, #8
 80069b4:	f7fb fc96 	bl	80022e4 <fillRect>
 80069b8:	e000      	b.n	80069bc <drawButton+0x68>
	if (x < 0 || x+10 > getDisplayWidth() || y < 0 || y+10 > getDisplayHeight()) return;		// TODO: fix bounds checking
 80069ba:	46c0      	nop			; (mov r8, r8)
}
 80069bc:	46bd      	mov	sp, r7
 80069be:	b005      	add	sp, #20
 80069c0:	bd90      	pop	{r4, r7, pc}
 80069c2:	46c0      	nop			; (mov r8, r8)
 80069c4:	0000ffff 	.word	0x0000ffff

080069c8 <drawButtons>:

// draws 4 buttons to represent important ui buttons and tell the user their action
void drawButtons(SPI_HandleTypeDef *hspi) {
 80069c8:	b590      	push	{r4, r7, lr}
 80069ca:	b087      	sub	sp, #28
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
	struct coords b1 = {0, 0};
 80069d0:	2114      	movs	r1, #20
 80069d2:	187b      	adds	r3, r7, r1
 80069d4:	2200      	movs	r2, #0
 80069d6:	801a      	strh	r2, [r3, #0]
 80069d8:	187b      	adds	r3, r7, r1
 80069da:	2200      	movs	r2, #0
 80069dc:	805a      	strh	r2, [r3, #2]
	struct coords b2 = {0, 0};
 80069de:	2110      	movs	r1, #16
 80069e0:	187b      	adds	r3, r7, r1
 80069e2:	2200      	movs	r2, #0
 80069e4:	801a      	strh	r2, [r3, #0]
 80069e6:	187b      	adds	r3, r7, r1
 80069e8:	2200      	movs	r2, #0
 80069ea:	805a      	strh	r2, [r3, #2]
	struct coords b3 = {0, 0};
 80069ec:	210c      	movs	r1, #12
 80069ee:	187b      	adds	r3, r7, r1
 80069f0:	2200      	movs	r2, #0
 80069f2:	801a      	strh	r2, [r3, #0]
 80069f4:	187b      	adds	r3, r7, r1
 80069f6:	2200      	movs	r2, #0
 80069f8:	805a      	strh	r2, [r3, #2]
	struct coords b4 = {0, 0};
 80069fa:	2108      	movs	r1, #8
 80069fc:	187b      	adds	r3, r7, r1
 80069fe:	2200      	movs	r2, #0
 8006a00:	801a      	strh	r2, [r3, #0]
 8006a02:	187b      	adds	r3, r7, r1
 8006a04:	2200      	movs	r2, #0
 8006a06:	805a      	strh	r2, [r3, #2]

	if (getDisplayOrientation() % 2 == 0) {
 8006a08:	f7fc fa70 	bl	8002eec <getDisplayOrientation>
 8006a0c:	0003      	movs	r3, r0
 8006a0e:	001a      	movs	r2, r3
 8006a10:	2301      	movs	r3, #1
 8006a12:	4013      	ands	r3, r2
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d132      	bne.n	8006a80 <drawButtons+0xb8>
		b1.x = centeredToLeft(button1Coords.x, 10);
 8006a1a:	4b4d      	ldr	r3, [pc, #308]	; (8006b50 <drawButtons+0x188>)
 8006a1c:	881b      	ldrh	r3, [r3, #0]
 8006a1e:	210a      	movs	r1, #10
 8006a20:	0018      	movs	r0, r3
 8006a22:	f7fc faa5 	bl	8002f70 <centeredToLeft>
 8006a26:	0003      	movs	r3, r0
 8006a28:	001a      	movs	r2, r3
 8006a2a:	2114      	movs	r1, #20
 8006a2c:	187b      	adds	r3, r7, r1
 8006a2e:	801a      	strh	r2, [r3, #0]
		b1.y = button1Coords.y;
 8006a30:	4b47      	ldr	r3, [pc, #284]	; (8006b50 <drawButtons+0x188>)
 8006a32:	885a      	ldrh	r2, [r3, #2]
 8006a34:	187b      	adds	r3, r7, r1
 8006a36:	805a      	strh	r2, [r3, #2]
		b2.x = b1.x+buttonHSpacing;
 8006a38:	187b      	adds	r3, r7, r1
 8006a3a:	881a      	ldrh	r2, [r3, #0]
 8006a3c:	4b45      	ldr	r3, [pc, #276]	; (8006b54 <drawButtons+0x18c>)
 8006a3e:	881b      	ldrh	r3, [r3, #0]
 8006a40:	18d3      	adds	r3, r2, r3
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	2010      	movs	r0, #16
 8006a46:	183b      	adds	r3, r7, r0
 8006a48:	801a      	strh	r2, [r3, #0]
		b2.y = b1.y;
 8006a4a:	187b      	adds	r3, r7, r1
 8006a4c:	885a      	ldrh	r2, [r3, #2]
 8006a4e:	183b      	adds	r3, r7, r0
 8006a50:	805a      	strh	r2, [r3, #2]
		b3.x = b1.x;
 8006a52:	187b      	adds	r3, r7, r1
 8006a54:	881a      	ldrh	r2, [r3, #0]
 8006a56:	240c      	movs	r4, #12
 8006a58:	193b      	adds	r3, r7, r4
 8006a5a:	801a      	strh	r2, [r3, #0]
		b3.y = b1.y+buttonVSpacing;
 8006a5c:	187b      	adds	r3, r7, r1
 8006a5e:	885a      	ldrh	r2, [r3, #2]
 8006a60:	4b3d      	ldr	r3, [pc, #244]	; (8006b58 <drawButtons+0x190>)
 8006a62:	881b      	ldrh	r3, [r3, #0]
 8006a64:	18d3      	adds	r3, r2, r3
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	193b      	adds	r3, r7, r4
 8006a6a:	805a      	strh	r2, [r3, #2]
		b4.x = b2.x;
 8006a6c:	183b      	adds	r3, r7, r0
 8006a6e:	881a      	ldrh	r2, [r3, #0]
 8006a70:	2108      	movs	r1, #8
 8006a72:	187b      	adds	r3, r7, r1
 8006a74:	801a      	strh	r2, [r3, #0]
		b4.y = b3.y;
 8006a76:	193b      	adds	r3, r7, r4
 8006a78:	885a      	ldrh	r2, [r3, #2]
 8006a7a:	187b      	adds	r3, r7, r1
 8006a7c:	805a      	strh	r2, [r3, #2]
 8006a7e:	e036      	b.n	8006aee <drawButtons+0x126>
	}
	else {
		b1.x = centeredToLeft(button1Coords.x, 10);
 8006a80:	4b33      	ldr	r3, [pc, #204]	; (8006b50 <drawButtons+0x188>)
 8006a82:	881b      	ldrh	r3, [r3, #0]
 8006a84:	210a      	movs	r1, #10
 8006a86:	0018      	movs	r0, r3
 8006a88:	f7fc fa72 	bl	8002f70 <centeredToLeft>
 8006a8c:	0003      	movs	r3, r0
 8006a8e:	001a      	movs	r2, r3
 8006a90:	2114      	movs	r1, #20
 8006a92:	187b      	adds	r3, r7, r1
 8006a94:	801a      	strh	r2, [r3, #0]
		b1.y = button1Coords.y;
 8006a96:	4b2e      	ldr	r3, [pc, #184]	; (8006b50 <drawButtons+0x188>)
 8006a98:	885a      	ldrh	r2, [r3, #2]
 8006a9a:	187b      	adds	r3, r7, r1
 8006a9c:	805a      	strh	r2, [r3, #2]
		b2.x = b1.x+buttonHSpacing;
 8006a9e:	187b      	adds	r3, r7, r1
 8006aa0:	881a      	ldrh	r2, [r3, #0]
 8006aa2:	4b2c      	ldr	r3, [pc, #176]	; (8006b54 <drawButtons+0x18c>)
 8006aa4:	881b      	ldrh	r3, [r3, #0]
 8006aa6:	18d3      	adds	r3, r2, r3
 8006aa8:	b29a      	uxth	r2, r3
 8006aaa:	2010      	movs	r0, #16
 8006aac:	183b      	adds	r3, r7, r0
 8006aae:	801a      	strh	r2, [r3, #0]
		b2.y = b1.y;
 8006ab0:	187b      	adds	r3, r7, r1
 8006ab2:	885a      	ldrh	r2, [r3, #2]
 8006ab4:	183b      	adds	r3, r7, r0
 8006ab6:	805a      	strh	r2, [r3, #2]
		b3.x = b2.x+buttonHSpacing;
 8006ab8:	183b      	adds	r3, r7, r0
 8006aba:	881a      	ldrh	r2, [r3, #0]
 8006abc:	4b25      	ldr	r3, [pc, #148]	; (8006b54 <drawButtons+0x18c>)
 8006abe:	881b      	ldrh	r3, [r3, #0]
 8006ac0:	18d3      	adds	r3, r2, r3
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	200c      	movs	r0, #12
 8006ac6:	183b      	adds	r3, r7, r0
 8006ac8:	801a      	strh	r2, [r3, #0]
		b3.y = b1.y;
 8006aca:	187b      	adds	r3, r7, r1
 8006acc:	885a      	ldrh	r2, [r3, #2]
 8006ace:	0001      	movs	r1, r0
 8006ad0:	187b      	adds	r3, r7, r1
 8006ad2:	805a      	strh	r2, [r3, #2]
		b4.x = b3.x+buttonHSpacing;
 8006ad4:	187b      	adds	r3, r7, r1
 8006ad6:	881a      	ldrh	r2, [r3, #0]
 8006ad8:	4b1e      	ldr	r3, [pc, #120]	; (8006b54 <drawButtons+0x18c>)
 8006ada:	881b      	ldrh	r3, [r3, #0]
 8006adc:	18d3      	adds	r3, r2, r3
 8006ade:	b29a      	uxth	r2, r3
 8006ae0:	2008      	movs	r0, #8
 8006ae2:	183b      	adds	r3, r7, r0
 8006ae4:	801a      	strh	r2, [r3, #0]
		b4.y = b3.y;
 8006ae6:	187b      	adds	r3, r7, r1
 8006ae8:	885a      	ldrh	r2, [r3, #2]
 8006aea:	183b      	adds	r3, r7, r0
 8006aec:	805a      	strh	r2, [r3, #2]
	}

	drawButton(b1.x, b1.y, hspi);
 8006aee:	2214      	movs	r2, #20
 8006af0:	18bb      	adds	r3, r7, r2
 8006af2:	881b      	ldrh	r3, [r3, #0]
 8006af4:	0018      	movs	r0, r3
 8006af6:	18bb      	adds	r3, r7, r2
 8006af8:	885b      	ldrh	r3, [r3, #2]
 8006afa:	0019      	movs	r1, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	001a      	movs	r2, r3
 8006b00:	f7ff ff28 	bl	8006954 <drawButton>
	drawButton(b2.x, b2.y, hspi);
 8006b04:	2210      	movs	r2, #16
 8006b06:	18bb      	adds	r3, r7, r2
 8006b08:	881b      	ldrh	r3, [r3, #0]
 8006b0a:	0018      	movs	r0, r3
 8006b0c:	18bb      	adds	r3, r7, r2
 8006b0e:	885b      	ldrh	r3, [r3, #2]
 8006b10:	0019      	movs	r1, r3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	001a      	movs	r2, r3
 8006b16:	f7ff ff1d 	bl	8006954 <drawButton>
	drawButton(b3.x, b3.y, hspi);
 8006b1a:	220c      	movs	r2, #12
 8006b1c:	18bb      	adds	r3, r7, r2
 8006b1e:	881b      	ldrh	r3, [r3, #0]
 8006b20:	0018      	movs	r0, r3
 8006b22:	18bb      	adds	r3, r7, r2
 8006b24:	885b      	ldrh	r3, [r3, #2]
 8006b26:	0019      	movs	r1, r3
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	001a      	movs	r2, r3
 8006b2c:	f7ff ff12 	bl	8006954 <drawButton>
	drawButton(b4.x, b4.y, hspi);
 8006b30:	2208      	movs	r2, #8
 8006b32:	18bb      	adds	r3, r7, r2
 8006b34:	881b      	ldrh	r3, [r3, #0]
 8006b36:	0018      	movs	r0, r3
 8006b38:	18bb      	adds	r3, r7, r2
 8006b3a:	885b      	ldrh	r3, [r3, #2]
 8006b3c:	0019      	movs	r1, r3
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	001a      	movs	r2, r3
 8006b42:	f7ff ff07 	bl	8006954 <drawButton>
}
 8006b46:	46c0      	nop			; (mov r8, r8)
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	b007      	add	sp, #28
 8006b4c:	bd90      	pop	{r4, r7, pc}
 8006b4e:	46c0      	nop			; (mov r8, r8)
 8006b50:	20000150 	.word	0x20000150
 8006b54:	2000014a 	.word	0x2000014a
 8006b58:	2000014c 	.word	0x2000014c

08006b5c <drawButtonText>:

// draws text that goes a few pixels over the button
void drawButtonText(uint8_t buttonNo, const char *str, SPI_HandleTypeDef *hspi) {
 8006b5c:	b590      	push	{r4, r7, lr}
 8006b5e:	b08d      	sub	sp, #52	; 0x34
 8006b60:	af02      	add	r7, sp, #8
 8006b62:	60b9      	str	r1, [r7, #8]
 8006b64:	607a      	str	r2, [r7, #4]
 8006b66:	230f      	movs	r3, #15
 8006b68:	18fb      	adds	r3, r7, r3
 8006b6a:	1c02      	adds	r2, r0, #0
 8006b6c:	701a      	strb	r2, [r3, #0]
	// using centered x, not upper left x
	// TODO: make variables file wide. modified in their own function or something
	// use more variables? (button height, spacing, fontsize)
	uint8_t maxTextLength = buttonHSpacing/fontW;			// TODO: can you combine variables with nearby funcs?
 8006b6e:	4b7b      	ldr	r3, [pc, #492]	; (8006d5c <drawButtonText+0x200>)
 8006b70:	881b      	ldrh	r3, [r3, #0]
 8006b72:	001a      	movs	r2, r3
 8006b74:	4b7a      	ldr	r3, [pc, #488]	; (8006d60 <drawButtonText+0x204>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	0019      	movs	r1, r3
 8006b7a:	0010      	movs	r0, r2
 8006b7c:	f7f9 fb56 	bl	800022c <__divsi3>
 8006b80:	0003      	movs	r3, r0
 8006b82:	001a      	movs	r2, r3
 8006b84:	2327      	movs	r3, #39	; 0x27
 8006b86:	18fb      	adds	r3, r7, r3
 8006b88:	701a      	strb	r2, [r3, #0]

	struct coords b1 = {0, 0};
 8006b8a:	2120      	movs	r1, #32
 8006b8c:	187b      	adds	r3, r7, r1
 8006b8e:	2200      	movs	r2, #0
 8006b90:	801a      	strh	r2, [r3, #0]
 8006b92:	187b      	adds	r3, r7, r1
 8006b94:	2200      	movs	r2, #0
 8006b96:	805a      	strh	r2, [r3, #2]
	struct coords b2 = {0, 0};
 8006b98:	211c      	movs	r1, #28
 8006b9a:	187b      	adds	r3, r7, r1
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	801a      	strh	r2, [r3, #0]
 8006ba0:	187b      	adds	r3, r7, r1
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	805a      	strh	r2, [r3, #2]
	struct coords b3 = {0, 0};
 8006ba6:	2118      	movs	r1, #24
 8006ba8:	187b      	adds	r3, r7, r1
 8006baa:	2200      	movs	r2, #0
 8006bac:	801a      	strh	r2, [r3, #0]
 8006bae:	187b      	adds	r3, r7, r1
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	805a      	strh	r2, [r3, #2]
	struct coords b4 = {0, 0};
 8006bb4:	2114      	movs	r1, #20
 8006bb6:	187b      	adds	r3, r7, r1
 8006bb8:	2200      	movs	r2, #0
 8006bba:	801a      	strh	r2, [r3, #0]
 8006bbc:	187b      	adds	r3, r7, r1
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	805a      	strh	r2, [r3, #2]

	if (getDisplayOrientation() % 2 == 0) {
 8006bc2:	f7fc f993 	bl	8002eec <getDisplayOrientation>
 8006bc6:	0003      	movs	r3, r0
 8006bc8:	001a      	movs	r2, r3
 8006bca:	2301      	movs	r3, #1
 8006bcc:	4013      	ands	r3, r2
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d131      	bne.n	8006c38 <drawButtonText+0xdc>
		b1.x = button1Coords.x;
 8006bd4:	4b63      	ldr	r3, [pc, #396]	; (8006d64 <drawButtonText+0x208>)
 8006bd6:	881a      	ldrh	r2, [r3, #0]
 8006bd8:	2120      	movs	r1, #32
 8006bda:	187b      	adds	r3, r7, r1
 8006bdc:	801a      	strh	r2, [r3, #0]
		b1.y = button1Coords.y-fontH;
 8006bde:	4b61      	ldr	r3, [pc, #388]	; (8006d64 <drawButtonText+0x208>)
 8006be0:	885a      	ldrh	r2, [r3, #2]
 8006be2:	4b61      	ldr	r3, [pc, #388]	; (8006d68 <drawButtonText+0x20c>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	b29a      	uxth	r2, r3
 8006bec:	187b      	adds	r3, r7, r1
 8006bee:	805a      	strh	r2, [r3, #2]
		b2.x = b1.x+buttonHSpacing;
 8006bf0:	187b      	adds	r3, r7, r1
 8006bf2:	881a      	ldrh	r2, [r3, #0]
 8006bf4:	4b59      	ldr	r3, [pc, #356]	; (8006d5c <drawButtonText+0x200>)
 8006bf6:	881b      	ldrh	r3, [r3, #0]
 8006bf8:	18d3      	adds	r3, r2, r3
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	201c      	movs	r0, #28
 8006bfe:	183b      	adds	r3, r7, r0
 8006c00:	801a      	strh	r2, [r3, #0]
		b2.y = b1.y;
 8006c02:	187b      	adds	r3, r7, r1
 8006c04:	885a      	ldrh	r2, [r3, #2]
 8006c06:	183b      	adds	r3, r7, r0
 8006c08:	805a      	strh	r2, [r3, #2]
		b3.x = b1.x;
 8006c0a:	187b      	adds	r3, r7, r1
 8006c0c:	881a      	ldrh	r2, [r3, #0]
 8006c0e:	2418      	movs	r4, #24
 8006c10:	193b      	adds	r3, r7, r4
 8006c12:	801a      	strh	r2, [r3, #0]
		b3.y = b1.y+buttonVSpacing;
 8006c14:	187b      	adds	r3, r7, r1
 8006c16:	885a      	ldrh	r2, [r3, #2]
 8006c18:	4b54      	ldr	r3, [pc, #336]	; (8006d6c <drawButtonText+0x210>)
 8006c1a:	881b      	ldrh	r3, [r3, #0]
 8006c1c:	18d3      	adds	r3, r2, r3
 8006c1e:	b29a      	uxth	r2, r3
 8006c20:	193b      	adds	r3, r7, r4
 8006c22:	805a      	strh	r2, [r3, #2]
		b4.x = b2.x;
 8006c24:	183b      	adds	r3, r7, r0
 8006c26:	881a      	ldrh	r2, [r3, #0]
 8006c28:	2114      	movs	r1, #20
 8006c2a:	187b      	adds	r3, r7, r1
 8006c2c:	801a      	strh	r2, [r3, #0]
		b4.y = b3.y;
 8006c2e:	193b      	adds	r3, r7, r4
 8006c30:	885a      	ldrh	r2, [r3, #2]
 8006c32:	187b      	adds	r3, r7, r1
 8006c34:	805a      	strh	r2, [r3, #2]
 8006c36:	e035      	b.n	8006ca4 <drawButtonText+0x148>
	}
	else {
		b1.x = button1Coords.x;
 8006c38:	4b4a      	ldr	r3, [pc, #296]	; (8006d64 <drawButtonText+0x208>)
 8006c3a:	881a      	ldrh	r2, [r3, #0]
 8006c3c:	2120      	movs	r1, #32
 8006c3e:	187b      	adds	r3, r7, r1
 8006c40:	801a      	strh	r2, [r3, #0]
		b1.y = button1Coords.y-fontH;
 8006c42:	4b48      	ldr	r3, [pc, #288]	; (8006d64 <drawButtonText+0x208>)
 8006c44:	885a      	ldrh	r2, [r3, #2]
 8006c46:	4b48      	ldr	r3, [pc, #288]	; (8006d68 <drawButtonText+0x20c>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	b29a      	uxth	r2, r3
 8006c50:	187b      	adds	r3, r7, r1
 8006c52:	805a      	strh	r2, [r3, #2]
		b2.x = b1.x+buttonHSpacing;
 8006c54:	187b      	adds	r3, r7, r1
 8006c56:	881a      	ldrh	r2, [r3, #0]
 8006c58:	4b40      	ldr	r3, [pc, #256]	; (8006d5c <drawButtonText+0x200>)
 8006c5a:	881b      	ldrh	r3, [r3, #0]
 8006c5c:	18d3      	adds	r3, r2, r3
 8006c5e:	b29a      	uxth	r2, r3
 8006c60:	201c      	movs	r0, #28
 8006c62:	183b      	adds	r3, r7, r0
 8006c64:	801a      	strh	r2, [r3, #0]
		b2.y = b1.y;
 8006c66:	187b      	adds	r3, r7, r1
 8006c68:	885a      	ldrh	r2, [r3, #2]
 8006c6a:	183b      	adds	r3, r7, r0
 8006c6c:	805a      	strh	r2, [r3, #2]
		b3.x = b2.x+buttonHSpacing;
 8006c6e:	183b      	adds	r3, r7, r0
 8006c70:	881a      	ldrh	r2, [r3, #0]
 8006c72:	4b3a      	ldr	r3, [pc, #232]	; (8006d5c <drawButtonText+0x200>)
 8006c74:	881b      	ldrh	r3, [r3, #0]
 8006c76:	18d3      	adds	r3, r2, r3
 8006c78:	b29a      	uxth	r2, r3
 8006c7a:	2018      	movs	r0, #24
 8006c7c:	183b      	adds	r3, r7, r0
 8006c7e:	801a      	strh	r2, [r3, #0]
		b3.y = b1.y;
 8006c80:	187b      	adds	r3, r7, r1
 8006c82:	885a      	ldrh	r2, [r3, #2]
 8006c84:	0001      	movs	r1, r0
 8006c86:	187b      	adds	r3, r7, r1
 8006c88:	805a      	strh	r2, [r3, #2]
		b4.x = b3.x+buttonHSpacing;
 8006c8a:	187b      	adds	r3, r7, r1
 8006c8c:	881a      	ldrh	r2, [r3, #0]
 8006c8e:	4b33      	ldr	r3, [pc, #204]	; (8006d5c <drawButtonText+0x200>)
 8006c90:	881b      	ldrh	r3, [r3, #0]
 8006c92:	18d3      	adds	r3, r2, r3
 8006c94:	b29a      	uxth	r2, r3
 8006c96:	2014      	movs	r0, #20
 8006c98:	183b      	adds	r3, r7, r0
 8006c9a:	801a      	strh	r2, [r3, #0]
		b4.y = b3.y;
 8006c9c:	187b      	adds	r3, r7, r1
 8006c9e:	885a      	ldrh	r2, [r3, #2]
 8006ca0:	183b      	adds	r3, r7, r0
 8006ca2:	805a      	strh	r2, [r3, #2]
	}

	setTextSize(1);
 8006ca4:	2001      	movs	r0, #1
 8006ca6:	f7fc f897 	bl	8002dd8 <setTextSize>
	setTextColor(ST77XX_BLACK);
 8006caa:	2000      	movs	r0, #0
 8006cac:	f7fc f8a4 	bl	8002df8 <setTextColor>
	// 1-based, not 0-based
	switch(buttonNo) {
 8006cb0:	230f      	movs	r3, #15
 8006cb2:	18fb      	adds	r3, r7, r3
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	2b02      	cmp	r3, #2
 8006cb8:	d019      	beq.n	8006cee <drawButtonText+0x192>
 8006cba:	dc02      	bgt.n	8006cc2 <drawButtonText+0x166>
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d005      	beq.n	8006ccc <drawButtonText+0x170>
		case 1: drawCenteredTextWithPadding(b1.x, b1.y, maxTextLength, str, hspi); break;
		case 2: drawCenteredTextWithPadding(b2.x, b2.y, maxTextLength, str, hspi); break;
		case 3: drawCenteredTextWithPadding(b3.x, b3.y, maxTextLength, str, hspi); break;
		case 4: drawCenteredTextWithPadding(b4.x, b4.y, maxTextLength, str, hspi); break;
		default: break;
 8006cc0:	e048      	b.n	8006d54 <drawButtonText+0x1f8>
	switch(buttonNo) {
 8006cc2:	2b03      	cmp	r3, #3
 8006cc4:	d024      	beq.n	8006d10 <drawButtonText+0x1b4>
 8006cc6:	2b04      	cmp	r3, #4
 8006cc8:	d033      	beq.n	8006d32 <drawButtonText+0x1d6>
		default: break;
 8006cca:	e043      	b.n	8006d54 <drawButtonText+0x1f8>
		case 1: drawCenteredTextWithPadding(b1.x, b1.y, maxTextLength, str, hspi); break;
 8006ccc:	2220      	movs	r2, #32
 8006cce:	18bb      	adds	r3, r7, r2
 8006cd0:	881b      	ldrh	r3, [r3, #0]
 8006cd2:	b2d8      	uxtb	r0, r3
 8006cd4:	18bb      	adds	r3, r7, r2
 8006cd6:	885b      	ldrh	r3, [r3, #2]
 8006cd8:	b2d9      	uxtb	r1, r3
 8006cda:	68bc      	ldr	r4, [r7, #8]
 8006cdc:	2327      	movs	r3, #39	; 0x27
 8006cde:	18fb      	adds	r3, r7, r3
 8006ce0:	781a      	ldrb	r2, [r3, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	9300      	str	r3, [sp, #0]
 8006ce6:	0023      	movs	r3, r4
 8006ce8:	f7fb ff80 	bl	8002bec <drawCenteredTextWithPadding>
 8006cec:	e032      	b.n	8006d54 <drawButtonText+0x1f8>
		case 2: drawCenteredTextWithPadding(b2.x, b2.y, maxTextLength, str, hspi); break;
 8006cee:	221c      	movs	r2, #28
 8006cf0:	18bb      	adds	r3, r7, r2
 8006cf2:	881b      	ldrh	r3, [r3, #0]
 8006cf4:	b2d8      	uxtb	r0, r3
 8006cf6:	18bb      	adds	r3, r7, r2
 8006cf8:	885b      	ldrh	r3, [r3, #2]
 8006cfa:	b2d9      	uxtb	r1, r3
 8006cfc:	68bc      	ldr	r4, [r7, #8]
 8006cfe:	2327      	movs	r3, #39	; 0x27
 8006d00:	18fb      	adds	r3, r7, r3
 8006d02:	781a      	ldrb	r2, [r3, #0]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	9300      	str	r3, [sp, #0]
 8006d08:	0023      	movs	r3, r4
 8006d0a:	f7fb ff6f 	bl	8002bec <drawCenteredTextWithPadding>
 8006d0e:	e021      	b.n	8006d54 <drawButtonText+0x1f8>
		case 3: drawCenteredTextWithPadding(b3.x, b3.y, maxTextLength, str, hspi); break;
 8006d10:	2218      	movs	r2, #24
 8006d12:	18bb      	adds	r3, r7, r2
 8006d14:	881b      	ldrh	r3, [r3, #0]
 8006d16:	b2d8      	uxtb	r0, r3
 8006d18:	18bb      	adds	r3, r7, r2
 8006d1a:	885b      	ldrh	r3, [r3, #2]
 8006d1c:	b2d9      	uxtb	r1, r3
 8006d1e:	68bc      	ldr	r4, [r7, #8]
 8006d20:	2327      	movs	r3, #39	; 0x27
 8006d22:	18fb      	adds	r3, r7, r3
 8006d24:	781a      	ldrb	r2, [r3, #0]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	9300      	str	r3, [sp, #0]
 8006d2a:	0023      	movs	r3, r4
 8006d2c:	f7fb ff5e 	bl	8002bec <drawCenteredTextWithPadding>
 8006d30:	e010      	b.n	8006d54 <drawButtonText+0x1f8>
		case 4: drawCenteredTextWithPadding(b4.x, b4.y, maxTextLength, str, hspi); break;
 8006d32:	2214      	movs	r2, #20
 8006d34:	18bb      	adds	r3, r7, r2
 8006d36:	881b      	ldrh	r3, [r3, #0]
 8006d38:	b2d8      	uxtb	r0, r3
 8006d3a:	18bb      	adds	r3, r7, r2
 8006d3c:	885b      	ldrh	r3, [r3, #2]
 8006d3e:	b2d9      	uxtb	r1, r3
 8006d40:	68bc      	ldr	r4, [r7, #8]
 8006d42:	2327      	movs	r3, #39	; 0x27
 8006d44:	18fb      	adds	r3, r7, r3
 8006d46:	781a      	ldrb	r2, [r3, #0]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	9300      	str	r3, [sp, #0]
 8006d4c:	0023      	movs	r3, r4
 8006d4e:	f7fb ff4d 	bl	8002bec <drawCenteredTextWithPadding>
 8006d52:	46c0      	nop			; (mov r8, r8)
	}
}
 8006d54:	46c0      	nop			; (mov r8, r8)
 8006d56:	46bd      	mov	sp, r7
 8006d58:	b00b      	add	sp, #44	; 0x2c
 8006d5a:	bd90      	pop	{r4, r7, pc}
 8006d5c:	2000014a 	.word	0x2000014a
 8006d60:	20000018 	.word	0x20000018
 8006d64:	20000150 	.word	0x20000150
 8006d68:	2000001c 	.word	0x2000001c
 8006d6c:	2000014c 	.word	0x2000014c

08006d70 <drawTitle>:
	drawCenteredTextWithPadding(b3.x, b3.y, maxTextLength, str3, hspi);
	drawCenteredTextWithPadding(b4.x, b4.y, maxTextLength, str4, hspi);
}

// draws big text on top of the display
void drawTitle(char *str, SPI_HandleTypeDef *hspi) {
 8006d70:	b590      	push	{r4, r7, lr}
 8006d72:	b085      	sub	sp, #20
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
	uint8_t strSize = strlen(str);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	0018      	movs	r0, r3
 8006d7e:	f7f9 f9c3 	bl	8000108 <strlen>
 8006d82:	0002      	movs	r2, r0
 8006d84:	230d      	movs	r3, #13
 8006d86:	18fb      	adds	r3, r7, r3
 8006d88:	701a      	strb	r2, [r3, #0]
	uint16_t titleY = 20;
 8006d8a:	230e      	movs	r3, #14
 8006d8c:	18fb      	adds	r3, r7, r3
 8006d8e:	2214      	movs	r2, #20
 8006d90:	801a      	strh	r2, [r3, #0]

	if (getDisplayOrientation() % 2 == 0) titleY = 20;
 8006d92:	f7fc f8ab 	bl	8002eec <getDisplayOrientation>
 8006d96:	0003      	movs	r3, r0
 8006d98:	001a      	movs	r2, r3
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	4013      	ands	r3, r2
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d104      	bne.n	8006dae <drawTitle+0x3e>
 8006da4:	230e      	movs	r3, #14
 8006da6:	18fb      	adds	r3, r7, r3
 8006da8:	2214      	movs	r2, #20
 8006daa:	801a      	strh	r2, [r3, #0]
 8006dac:	e003      	b.n	8006db6 <drawTitle+0x46>
	else titleY = 5;
 8006dae:	230e      	movs	r3, #14
 8006db0:	18fb      	adds	r3, r7, r3
 8006db2:	2205      	movs	r2, #5
 8006db4:	801a      	strh	r2, [r3, #0]

	// drawing title
	// bounds checking
	// TODO: use fontsize variable
	if (12*strSize < getDisplayWidth()) {			// about string size = 10 for width = 128
 8006db6:	230d      	movs	r3, #13
 8006db8:	18fb      	adds	r3, r7, r3
 8006dba:	781a      	ldrb	r2, [r3, #0]
 8006dbc:	0013      	movs	r3, r2
 8006dbe:	005b      	lsls	r3, r3, #1
 8006dc0:	189b      	adds	r3, r3, r2
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	001c      	movs	r4, r3
 8006dc6:	f7fc f8a5 	bl	8002f14 <getDisplayWidth>
 8006dca:	0003      	movs	r3, r0
 8006dcc:	429c      	cmp	r4, r3
 8006dce:	da03      	bge.n	8006dd8 <drawTitle+0x68>
		setTextSize(2);
 8006dd0:	2002      	movs	r0, #2
 8006dd2:	f7fc f801 	bl	8002dd8 <setTextSize>
 8006dd6:	e01b      	b.n	8006e10 <drawTitle+0xa0>
	}
	else if (6*strSize < getDisplayWidth()) {		// about string size = 21 for getDisplayWidth() = 128
 8006dd8:	230d      	movs	r3, #13
 8006dda:	18fb      	adds	r3, r7, r3
 8006ddc:	781a      	ldrb	r2, [r3, #0]
 8006dde:	0013      	movs	r3, r2
 8006de0:	005b      	lsls	r3, r3, #1
 8006de2:	189b      	adds	r3, r3, r2
 8006de4:	005b      	lsls	r3, r3, #1
 8006de6:	001c      	movs	r4, r3
 8006de8:	f7fc f894 	bl	8002f14 <getDisplayWidth>
 8006dec:	0003      	movs	r3, r0
 8006dee:	429c      	cmp	r4, r3
 8006df0:	da03      	bge.n	8006dfa <drawTitle+0x8a>
		setTextSize(1);
 8006df2:	2001      	movs	r0, #1
 8006df4:	f7fb fff0 	bl	8002dd8 <setTextSize>
 8006df8:	e00a      	b.n	8006e10 <drawTitle+0xa0>
	}
	else {
		setTextSize(1);
 8006dfa:	2001      	movs	r0, #1
 8006dfc:	f7fb ffec 	bl	8002dd8 <setTextSize>
		sprintf(str, "it's too long");		// should not need to worry about null access, since this string is shorter than case above
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	4b0e      	ldr	r3, [pc, #56]	; (8006e3c <drawTitle+0xcc>)
 8006e04:	0010      	movs	r0, r2
 8006e06:	0019      	movs	r1, r3
 8006e08:	230e      	movs	r3, #14
 8006e0a:	001a      	movs	r2, r3
 8006e0c:	f005 f9a0 	bl	800c150 <memcpy>
	}

	setTextColor(ST77XX_BLACK);
 8006e10:	2000      	movs	r0, #0
 8006e12:	f7fb fff1 	bl	8002df8 <setTextColor>
	drawCenteredText(getDisplayWidth()/2, titleY, str, hspi);
 8006e16:	f7fc f87d 	bl	8002f14 <getDisplayWidth>
 8006e1a:	0003      	movs	r3, r0
 8006e1c:	085b      	lsrs	r3, r3, #1
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	b2d8      	uxtb	r0, r3
 8006e22:	230e      	movs	r3, #14
 8006e24:	18fb      	adds	r3, r7, r3
 8006e26:	881b      	ldrh	r3, [r3, #0]
 8006e28:	b2d9      	uxtb	r1, r3
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	f7fb fe71 	bl	8002b14 <drawCenteredText>
}
 8006e32:	46c0      	nop			; (mov r8, r8)
 8006e34:	46bd      	mov	sp, r7
 8006e36:	b005      	add	sp, #20
 8006e38:	bd90      	pop	{r4, r7, pc}
 8006e3a:	46c0      	nop			; (mov r8, r8)
 8006e3c:	0800cbd8 	.word	0x0800cbd8

08006e40 <drawCenteredModeText>:
	setTextColor(ST77XX_BLACK);
	uint8_t maxLength = getDisplayWidth()/fontW;
	drawTextWithPadding(x, y, maxLength, str, hspi);
}

void drawCenteredModeText(int x, int y, const char *str, SPI_HandleTypeDef *hspi) {
 8006e40:	b5b0      	push	{r4, r5, r7, lr}
 8006e42:	b088      	sub	sp, #32
 8006e44:	af02      	add	r7, sp, #8
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	607a      	str	r2, [r7, #4]
 8006e4c:	603b      	str	r3, [r7, #0]
	setTextSize(1);
 8006e4e:	2001      	movs	r0, #1
 8006e50:	f7fb ffc2 	bl	8002dd8 <setTextSize>
	setTextColor(ST77XX_BLACK);
 8006e54:	2000      	movs	r0, #0
 8006e56:	f7fb ffcf 	bl	8002df8 <setTextColor>
	uint8_t maxLength = getDisplayWidth()/fontW;
 8006e5a:	f7fc f85b 	bl	8002f14 <getDisplayWidth>
 8006e5e:	0003      	movs	r3, r0
 8006e60:	001a      	movs	r2, r3
 8006e62:	4b0d      	ldr	r3, [pc, #52]	; (8006e98 <drawCenteredModeText+0x58>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	0019      	movs	r1, r3
 8006e68:	0010      	movs	r0, r2
 8006e6a:	f7f9 f9df 	bl	800022c <__divsi3>
 8006e6e:	0003      	movs	r3, r0
 8006e70:	001a      	movs	r2, r3
 8006e72:	2517      	movs	r5, #23
 8006e74:	197b      	adds	r3, r7, r5
 8006e76:	701a      	strb	r2, [r3, #0]
	drawCenteredTextWithPadding(x, y, maxLength, str, hspi);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	b2d8      	uxtb	r0, r3
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	b2d9      	uxtb	r1, r3
 8006e80:	687c      	ldr	r4, [r7, #4]
 8006e82:	197b      	adds	r3, r7, r5
 8006e84:	781a      	ldrb	r2, [r3, #0]
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	9300      	str	r3, [sp, #0]
 8006e8a:	0023      	movs	r3, r4
 8006e8c:	f7fb feae 	bl	8002bec <drawCenteredTextWithPadding>
}
 8006e90:	46c0      	nop			; (mov r8, r8)
 8006e92:	46bd      	mov	sp, r7
 8006e94:	b006      	add	sp, #24
 8006e96:	bdb0      	pop	{r4, r5, r7, pc}
 8006e98:	20000018 	.word	0x20000018

08006e9c <drawBattery>:

// draws a battery graphic to represent current battery level
void drawBattery(int x, int y, SPI_HandleTypeDef *hspi) {
 8006e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e9e:	b089      	sub	sp, #36	; 0x24
 8006ea0:	af02      	add	r7, sp, #8
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	607a      	str	r2, [r7, #4]
	// doesn't move and is used on an empty screen, so shouldn't need to clear then print
	char str[5];

	// TODO: draw only when battery level changes
	// drawing battery symbol. hard coded to be 6x13, upper right corner
	drawVLine(x, y+2, 10, ST77XX_BLACK, hspi);		// left col
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	1c99      	adds	r1, r3, #2
 8006eac:	68f8      	ldr	r0, [r7, #12]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	9300      	str	r3, [sp, #0]
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	220a      	movs	r2, #10
 8006eb6:	f7fb f941 	bl	800213c <drawVLine>
	drawVLine(x+5, y+2, 10, ST77XX_BLACK, hspi);	// right col
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	1d58      	adds	r0, r3, #5
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	1c99      	adds	r1, r3, #2
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	9300      	str	r3, [sp, #0]
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	220a      	movs	r2, #10
 8006eca:	f7fb f937 	bl	800213c <drawVLine>
	drawHLine(x+1, y+12, 4, ST77XX_BLACK, hspi);	// bottom
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	1c58      	adds	r0, r3, #1
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	330c      	adds	r3, #12
 8006ed6:	0019      	movs	r1, r3
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	9300      	str	r3, [sp, #0]
 8006edc:	2300      	movs	r3, #0
 8006ede:	2204      	movs	r2, #4
 8006ee0:	f7fb f8da 	bl	8002098 <drawHLine>
	drawHLine(x+1, y+1, 4, ST77XX_BLACK, hspi);		// top bottom level
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	1c58      	adds	r0, r3, #1
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	1c59      	adds	r1, r3, #1
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	9300      	str	r3, [sp, #0]
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	2204      	movs	r2, #4
 8006ef4:	f7fb f8d0 	bl	8002098 <drawHLine>
	drawHLine(x+2, y, 2, ST77XX_BLACK, hspi);		// top upper level
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	1c98      	adds	r0, r3, #2
 8006efc:	68b9      	ldr	r1, [r7, #8]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	9300      	str	r3, [sp, #0]
 8006f02:	2300      	movs	r3, #0
 8006f04:	2202      	movs	r2, #2
 8006f06:	f7fb f8c7 	bl	8002098 <drawHLine>

	// start filling in green/red box depending on battery level
	uint16_t color = ST77XX_GREEN;
 8006f0a:	2316      	movs	r3, #22
 8006f0c:	18fb      	adds	r3, r7, r3
 8006f0e:	22fc      	movs	r2, #252	; 0xfc
 8006f10:	00d2      	lsls	r2, r2, #3
 8006f12:	801a      	strh	r2, [r3, #0]
	uint8_t batteryLevel = battPercentage;
 8006f14:	4b39      	ldr	r3, [pc, #228]	; (8006ffc <drawBattery+0x160>)
 8006f16:	881a      	ldrh	r2, [r3, #0]
 8006f18:	2115      	movs	r1, #21
 8006f1a:	187b      	adds	r3, r7, r1
 8006f1c:	701a      	strb	r2, [r3, #0]
	if (batteryLevel < 20) color = ST77XX_RED;
 8006f1e:	187b      	adds	r3, r7, r1
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	2b13      	cmp	r3, #19
 8006f24:	d803      	bhi.n	8006f2e <drawBattery+0x92>
 8006f26:	2316      	movs	r3, #22
 8006f28:	18fb      	adds	r3, r7, r3
 8006f2a:	4a35      	ldr	r2, [pc, #212]	; (8007000 <drawBattery+0x164>)
 8006f2c:	801a      	strh	r2, [r3, #0]
	fillRect(x+1, (y+2)+(100-batteryLevel)/10, 4, (batteryLevel+9)/10, color, hspi);	// +9 to avoid having to use float and round()
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	1c5d      	adds	r5, r3, #1
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	1c9c      	adds	r4, r3, #2
 8006f36:	2615      	movs	r6, #21
 8006f38:	19bb      	adds	r3, r7, r6
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	2264      	movs	r2, #100	; 0x64
 8006f3e:	1ad3      	subs	r3, r2, r3
 8006f40:	210a      	movs	r1, #10
 8006f42:	0018      	movs	r0, r3
 8006f44:	f7f9 f972 	bl	800022c <__divsi3>
 8006f48:	0003      	movs	r3, r0
 8006f4a:	18e4      	adds	r4, r4, r3
 8006f4c:	19bb      	adds	r3, r7, r6
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	3309      	adds	r3, #9
 8006f52:	210a      	movs	r1, #10
 8006f54:	0018      	movs	r0, r3
 8006f56:	f7f9 f969 	bl	800022c <__divsi3>
 8006f5a:	0003      	movs	r3, r0
 8006f5c:	001a      	movs	r2, r3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	9301      	str	r3, [sp, #4]
 8006f62:	2316      	movs	r3, #22
 8006f64:	18fb      	adds	r3, r7, r3
 8006f66:	881b      	ldrh	r3, [r3, #0]
 8006f68:	9300      	str	r3, [sp, #0]
 8006f6a:	0013      	movs	r3, r2
 8006f6c:	2204      	movs	r2, #4
 8006f6e:	0021      	movs	r1, r4
 8006f70:	0028      	movs	r0, r5
 8006f72:	f7fb f9b7 	bl	80022e4 <fillRect>
	fillRect(x+1, y+2, 4, (100-batteryLevel)/10, ST77XX_WHITE, hspi);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	1c5c      	adds	r4, r3, #1
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	1c9d      	adds	r5, r3, #2
 8006f7e:	19bb      	adds	r3, r7, r6
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	2264      	movs	r2, #100	; 0x64
 8006f84:	1ad3      	subs	r3, r2, r3
 8006f86:	210a      	movs	r1, #10
 8006f88:	0018      	movs	r0, r3
 8006f8a:	f7f9 f94f 	bl	800022c <__divsi3>
 8006f8e:	0003      	movs	r3, r0
 8006f90:	001a      	movs	r2, r3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	9301      	str	r3, [sp, #4]
 8006f96:	4b1b      	ldr	r3, [pc, #108]	; (8007004 <drawBattery+0x168>)
 8006f98:	9300      	str	r3, [sp, #0]
 8006f9a:	0013      	movs	r3, r2
 8006f9c:	2204      	movs	r2, #4
 8006f9e:	0029      	movs	r1, r5
 8006fa0:	0020      	movs	r0, r4
 8006fa2:	f7fb f99f 	bl	80022e4 <fillRect>

	// draw numerical text
	setTextSize(1);
 8006fa6:	2001      	movs	r0, #1
 8006fa8:	f7fb ff16 	bl	8002dd8 <setTextSize>
	if (batteryLevel >= 20) color = ST77XX_BLACK;		// reusing variable for more obfuscated code.
 8006fac:	19bb      	adds	r3, r7, r6
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	2b13      	cmp	r3, #19
 8006fb2:	d903      	bls.n	8006fbc <drawBattery+0x120>
 8006fb4:	2316      	movs	r3, #22
 8006fb6:	18fb      	adds	r3, r7, r3
 8006fb8:	2200      	movs	r2, #0
 8006fba:	801a      	strh	r2, [r3, #0]
	setTextColor(color);
 8006fbc:	2316      	movs	r3, #22
 8006fbe:	18fb      	adds	r3, r7, r3
 8006fc0:	881b      	ldrh	r3, [r3, #0]
 8006fc2:	0018      	movs	r0, r3
 8006fc4:	f7fb ff18 	bl	8002df8 <setTextColor>
	sprintf(str, "%3d%%", batteryLevel);
 8006fc8:	2315      	movs	r3, #21
 8006fca:	18fb      	adds	r3, r7, r3
 8006fcc:	781a      	ldrb	r2, [r3, #0]
 8006fce:	490e      	ldr	r1, [pc, #56]	; (8007008 <drawBattery+0x16c>)
 8006fd0:	2410      	movs	r4, #16
 8006fd2:	193b      	adds	r3, r7, r4
 8006fd4:	0018      	movs	r0, r3
 8006fd6:	f005 f94b 	bl	800c270 <siprintf>
	drawTextAt(x+6, y+4, str, hspi);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	3306      	adds	r3, #6
 8006fe0:	b2d8      	uxtb	r0, r3
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	3304      	adds	r3, #4
 8006fe8:	b2d9      	uxtb	r1, r3
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	193a      	adds	r2, r7, r4
 8006fee:	f7fb fd49 	bl	8002a84 <drawTextAt>
}
 8006ff2:	46c0      	nop			; (mov r8, r8)
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	b007      	add	sp, #28
 8006ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ffa:	46c0      	nop			; (mov r8, r8)
 8006ffc:	20000160 	.word	0x20000160
 8007000:	fffff800 	.word	0xfffff800
 8007004:	0000ffff 	.word	0x0000ffff
 8007008:	0800cbe8 	.word	0x0800cbe8

0800700c <drawTinyTime>:

// drawing current time on top of screen when other faces are displayed
void drawTinyTime(int x, int y, RTC_HandleTypeDef *hrtc, SPI_HandleTypeDef *hspi) {
 800700c:	b590      	push	{r4, r7, lr}
 800700e:	b089      	sub	sp, #36	; 0x24
 8007010:	af00      	add	r7, sp, #0
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	60b9      	str	r1, [r7, #8]
 8007016:	607a      	str	r2, [r7, #4]
 8007018:	603b      	str	r3, [r7, #0]
	char str[10];
	struct times currentTime = {0};
 800701a:	2410      	movs	r4, #16
 800701c:	193b      	adds	r3, r7, r4
 800701e:	0018      	movs	r0, r3
 8007020:	2303      	movs	r3, #3
 8007022:	001a      	movs	r2, r3
 8007024:	2100      	movs	r1, #0
 8007026:	f005 f89c 	bl	800c162 <memset>
	getTime(&currentTime, hrtc);
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	193b      	adds	r3, r7, r4
 800702e:	0011      	movs	r1, r2
 8007030:	0018      	movs	r0, r3
 8007032:	f7fc fb19 	bl	8003668 <getTime>

	if (currentTime.hr % 12 == 0) sprintf(str, "%2d:%02d", 12, currentTime.min);
 8007036:	193b      	adds	r3, r7, r4
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	210c      	movs	r1, #12
 800703c:	0018      	movs	r0, r3
 800703e:	f7f9 f8f1 	bl	8000224 <__aeabi_uidivmod>
 8007042:	000b      	movs	r3, r1
 8007044:	b2db      	uxtb	r3, r3
 8007046:	2b00      	cmp	r3, #0
 8007048:	d109      	bne.n	800705e <drawTinyTime+0x52>
 800704a:	2310      	movs	r3, #16
 800704c:	18fb      	adds	r3, r7, r3
 800704e:	785b      	ldrb	r3, [r3, #1]
 8007050:	4929      	ldr	r1, [pc, #164]	; (80070f8 <drawTinyTime+0xec>)
 8007052:	2214      	movs	r2, #20
 8007054:	18b8      	adds	r0, r7, r2
 8007056:	220c      	movs	r2, #12
 8007058:	f005 f90a 	bl	800c270 <siprintf>
 800705c:	e010      	b.n	8007080 <drawTinyTime+0x74>
	else sprintf(str, "%2d:%02d", currentTime.hr%12, currentTime.min);
 800705e:	2410      	movs	r4, #16
 8007060:	193b      	adds	r3, r7, r4
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	210c      	movs	r1, #12
 8007066:	0018      	movs	r0, r3
 8007068:	f7f9 f8dc 	bl	8000224 <__aeabi_uidivmod>
 800706c:	000b      	movs	r3, r1
 800706e:	b2db      	uxtb	r3, r3
 8007070:	001a      	movs	r2, r3
 8007072:	193b      	adds	r3, r7, r4
 8007074:	785b      	ldrb	r3, [r3, #1]
 8007076:	4920      	ldr	r1, [pc, #128]	; (80070f8 <drawTinyTime+0xec>)
 8007078:	2014      	movs	r0, #20
 800707a:	1838      	adds	r0, r7, r0
 800707c:	f005 f8f8 	bl	800c270 <siprintf>
	setTextSize(1);
 8007080:	2001      	movs	r0, #1
 8007082:	f7fb fea9 	bl	8002dd8 <setTextSize>
	setTextColor(ST77XX_BLACK);
 8007086:	2000      	movs	r0, #0
 8007088:	f7fb feb6 	bl	8002df8 <setTextColor>
	drawTextAt(x, y, str, hspi);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	b2d8      	uxtb	r0, r3
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	b2d9      	uxtb	r1, r3
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	2214      	movs	r2, #20
 8007098:	18ba      	adds	r2, r7, r2
 800709a:	f7fb fcf3 	bl	8002a84 <drawTextAt>

	if (currentTime.hr < 12) drawTextAt(x+fontW*5, y, "AM", hspi);
 800709e:	2310      	movs	r3, #16
 80070a0:	18fb      	adds	r3, r7, r3
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	2b0b      	cmp	r3, #11
 80070a6:	d811      	bhi.n	80070cc <drawTinyTime+0xc0>
 80070a8:	4b14      	ldr	r3, [pc, #80]	; (80070fc <drawTinyTime+0xf0>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	1c1a      	adds	r2, r3, #0
 80070b0:	0092      	lsls	r2, r2, #2
 80070b2:	18d3      	adds	r3, r2, r3
 80070b4:	b2da      	uxtb	r2, r3
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	18d3      	adds	r3, r2, r3
 80070bc:	b2d8      	uxtb	r0, r3
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	b2d9      	uxtb	r1, r3
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	4a0e      	ldr	r2, [pc, #56]	; (8007100 <drawTinyTime+0xf4>)
 80070c6:	f7fb fcdd 	bl	8002a84 <drawTextAt>
	else drawTextAt(x+fontW*5, y, "PM", hspi);
}
 80070ca:	e010      	b.n	80070ee <drawTinyTime+0xe2>
	else drawTextAt(x+fontW*5, y, "PM", hspi);
 80070cc:	4b0b      	ldr	r3, [pc, #44]	; (80070fc <drawTinyTime+0xf0>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	1c1a      	adds	r2, r3, #0
 80070d4:	0092      	lsls	r2, r2, #2
 80070d6:	18d3      	adds	r3, r2, r3
 80070d8:	b2da      	uxtb	r2, r3
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	18d3      	adds	r3, r2, r3
 80070e0:	b2d8      	uxtb	r0, r3
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	b2d9      	uxtb	r1, r3
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	4a06      	ldr	r2, [pc, #24]	; (8007104 <drawTinyTime+0xf8>)
 80070ea:	f7fb fccb 	bl	8002a84 <drawTextAt>
}
 80070ee:	46c0      	nop			; (mov r8, r8)
 80070f0:	46bd      	mov	sp, r7
 80070f2:	b009      	add	sp, #36	; 0x24
 80070f4:	bd90      	pop	{r4, r7, pc}
 80070f6:	46c0      	nop			; (mov r8, r8)
 80070f8:	0800cbf0 	.word	0x0800cbf0
 80070fc:	20000018 	.word	0x20000018
 8007100:	0800cbfc 	.word	0x0800cbfc
 8007104:	0800cc00 	.word	0x0800cc00

08007108 <drawTopBar>:

// groups the small clock and battery into a horizontal bar on top of the screen
void drawTopBar(RTC_HandleTypeDef *hrtc, SPI_HandleTypeDef *hspi) {
 8007108:	b5b0      	push	{r4, r5, r7, lr}
 800710a:	b086      	sub	sp, #24
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
	uint16_t barY = 5;
 8007112:	2516      	movs	r5, #22
 8007114:	197b      	adds	r3, r7, r5
 8007116:	2205      	movs	r2, #5
 8007118:	801a      	strh	r2, [r3, #0]
	struct coords battCoords = {getDisplayWidth()-(6+fontW*4)-5, barY};		// TODO: use fontsize variable
 800711a:	f7fb fefb 	bl	8002f14 <getDisplayWidth>
 800711e:	0003      	movs	r3, r0
 8007120:	001a      	movs	r2, r3
 8007122:	4b19      	ldr	r3, [pc, #100]	; (8007188 <drawTopBar+0x80>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	b29b      	uxth	r3, r3
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	b29b      	uxth	r3, r3
 800712c:	1ad3      	subs	r3, r2, r3
 800712e:	b29b      	uxth	r3, r3
 8007130:	3b0b      	subs	r3, #11
 8007132:	b29a      	uxth	r2, r3
 8007134:	2410      	movs	r4, #16
 8007136:	193b      	adds	r3, r7, r4
 8007138:	801a      	strh	r2, [r3, #0]
 800713a:	193b      	adds	r3, r7, r4
 800713c:	197a      	adds	r2, r7, r5
 800713e:	8812      	ldrh	r2, [r2, #0]
 8007140:	805a      	strh	r2, [r3, #2]
	struct coords clockCoords = {5, barY+4};
 8007142:	210c      	movs	r1, #12
 8007144:	187b      	adds	r3, r7, r1
 8007146:	2205      	movs	r2, #5
 8007148:	801a      	strh	r2, [r3, #0]
 800714a:	197b      	adds	r3, r7, r5
 800714c:	881b      	ldrh	r3, [r3, #0]
 800714e:	3304      	adds	r3, #4
 8007150:	b29a      	uxth	r2, r3
 8007152:	187b      	adds	r3, r7, r1
 8007154:	805a      	strh	r2, [r3, #2]

	// TODO: if checks to determine whether to redraw or not
	drawTinyTime(clockCoords.x, clockCoords.y, hrtc, hspi);
 8007156:	187b      	adds	r3, r7, r1
 8007158:	881b      	ldrh	r3, [r3, #0]
 800715a:	0018      	movs	r0, r3
 800715c:	187b      	adds	r3, r7, r1
 800715e:	885b      	ldrh	r3, [r3, #2]
 8007160:	0019      	movs	r1, r3
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	f7ff ff51 	bl	800700c <drawTinyTime>
	drawBattery(battCoords.x, battCoords.y, hspi);
 800716a:	193b      	adds	r3, r7, r4
 800716c:	881b      	ldrh	r3, [r3, #0]
 800716e:	0018      	movs	r0, r3
 8007170:	193b      	adds	r3, r7, r4
 8007172:	885b      	ldrh	r3, [r3, #2]
 8007174:	0019      	movs	r1, r3
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	001a      	movs	r2, r3
 800717a:	f7ff fe8f 	bl	8006e9c <drawBattery>
}
 800717e:	46c0      	nop			; (mov r8, r8)
 8007180:	46bd      	mov	sp, r7
 8007182:	b006      	add	sp, #24
 8007184:	bdb0      	pop	{r4, r5, r7, pc}
 8007186:	46c0      	nop			; (mov r8, r8)
 8007188:	20000018 	.word	0x20000018

0800718c <drawTime>:

// 114x24. draws time only
// use upper left coords pls ty
// originally on (7, 60)
void drawTime(int x, int y, struct times *t, SPI_HandleTypeDef *hspi) {
 800718c:	b590      	push	{r4, r7, lr}
 800718e:	b08b      	sub	sp, #44	; 0x2c
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	607a      	str	r2, [r7, #4]
 8007198:	603b      	str	r3, [r7, #0]
	// notes on paper.
	char str[24];

	// no need to draw padding for those that always have the same length
	// drawing hr and min, 12-hr format
	if (t->hr % 12 == 0) sprintf(str, "%2d:%02d", 12, t->min);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	210c      	movs	r1, #12
 80071a0:	0018      	movs	r0, r3
 80071a2:	f7f9 f83f 	bl	8000224 <__aeabi_uidivmod>
 80071a6:	000b      	movs	r3, r1
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d108      	bne.n	80071c0 <drawTime+0x34>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	785b      	ldrb	r3, [r3, #1]
 80071b2:	493a      	ldr	r1, [pc, #232]	; (800729c <drawTime+0x110>)
 80071b4:	2210      	movs	r2, #16
 80071b6:	18b8      	adds	r0, r7, r2
 80071b8:	220c      	movs	r2, #12
 80071ba:	f005 f859 	bl	800c270 <siprintf>
 80071be:	e00f      	b.n	80071e0 <drawTime+0x54>
	else sprintf(str, "%2d:%02d", t->hr%12, t->min);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	210c      	movs	r1, #12
 80071c6:	0018      	movs	r0, r3
 80071c8:	f7f9 f82c 	bl	8000224 <__aeabi_uidivmod>
 80071cc:	000b      	movs	r3, r1
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	001a      	movs	r2, r3
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	785b      	ldrb	r3, [r3, #1]
 80071d6:	4931      	ldr	r1, [pc, #196]	; (800729c <drawTime+0x110>)
 80071d8:	2010      	movs	r0, #16
 80071da:	1838      	adds	r0, r7, r0
 80071dc:	f005 f848 	bl	800c270 <siprintf>
	setTextSize(3);
 80071e0:	2003      	movs	r0, #3
 80071e2:	f7fb fdf9 	bl	8002dd8 <setTextSize>
	setTextColor(ST77XX_BLACK);
 80071e6:	2000      	movs	r0, #0
 80071e8:	f7fb fe06 	bl	8002df8 <setTextColor>
	drawTextAt(x, y, str, hspi);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	b2d8      	uxtb	r0, r3
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	b2d9      	uxtb	r1, r3
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	2410      	movs	r4, #16
 80071f8:	193a      	adds	r2, r7, r4
 80071fa:	f7fb fc43 	bl	8002a84 <drawTextAt>

	// drawing sec
	sprintf(str, "%02d", t->sec);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	789b      	ldrb	r3, [r3, #2]
 8007202:	001a      	movs	r2, r3
 8007204:	4926      	ldr	r1, [pc, #152]	; (80072a0 <drawTime+0x114>)
 8007206:	193b      	adds	r3, r7, r4
 8007208:	0018      	movs	r0, r3
 800720a:	f005 f831 	bl	800c270 <siprintf>
	setTextSize(2);
 800720e:	2002      	movs	r0, #2
 8007210:	f7fb fde2 	bl	8002dd8 <setTextSize>
	drawTextAt(x+3*fontW*5, y+fontH, str, hspi);
 8007214:	4b23      	ldr	r3, [pc, #140]	; (80072a4 <drawTime+0x118>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	b2db      	uxtb	r3, r3
 800721a:	1c1a      	adds	r2, r3, #0
 800721c:	0112      	lsls	r2, r2, #4
 800721e:	1ad3      	subs	r3, r2, r3
 8007220:	b2da      	uxtb	r2, r3
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	b2db      	uxtb	r3, r3
 8007226:	18d3      	adds	r3, r2, r3
 8007228:	b2d8      	uxtb	r0, r3
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	b2da      	uxtb	r2, r3
 800722e:	4b1e      	ldr	r3, [pc, #120]	; (80072a8 <drawTime+0x11c>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	b2db      	uxtb	r3, r3
 8007234:	18d3      	adds	r3, r2, r3
 8007236:	b2d9      	uxtb	r1, r3
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	193a      	adds	r2, r7, r4
 800723c:	f7fb fc22 	bl	8002a84 <drawTextAt>

	// drawing AM/PM text
	setTextSize(1);
 8007240:	2001      	movs	r0, #1
 8007242:	f7fb fdc9 	bl	8002dd8 <setTextSize>
	if (t->hr < 12) drawTextAt(x+3*fontW*5, y, "AM", hspi);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	2b0b      	cmp	r3, #11
 800724c:	d811      	bhi.n	8007272 <drawTime+0xe6>
 800724e:	4b15      	ldr	r3, [pc, #84]	; (80072a4 <drawTime+0x118>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	b2db      	uxtb	r3, r3
 8007254:	1c1a      	adds	r2, r3, #0
 8007256:	0112      	lsls	r2, r2, #4
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	b2da      	uxtb	r2, r3
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	b2db      	uxtb	r3, r3
 8007260:	18d3      	adds	r3, r2, r3
 8007262:	b2d8      	uxtb	r0, r3
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	b2d9      	uxtb	r1, r3
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	4a10      	ldr	r2, [pc, #64]	; (80072ac <drawTime+0x120>)
 800726c:	f7fb fc0a 	bl	8002a84 <drawTextAt>
	else drawTextAt(x+3*fontW*5, y, "PM", hspi);
}
 8007270:	e010      	b.n	8007294 <drawTime+0x108>
	else drawTextAt(x+3*fontW*5, y, "PM", hspi);
 8007272:	4b0c      	ldr	r3, [pc, #48]	; (80072a4 <drawTime+0x118>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	b2db      	uxtb	r3, r3
 8007278:	1c1a      	adds	r2, r3, #0
 800727a:	0112      	lsls	r2, r2, #4
 800727c:	1ad3      	subs	r3, r2, r3
 800727e:	b2da      	uxtb	r2, r3
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	b2db      	uxtb	r3, r3
 8007284:	18d3      	adds	r3, r2, r3
 8007286:	b2d8      	uxtb	r0, r3
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	b2d9      	uxtb	r1, r3
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	4a08      	ldr	r2, [pc, #32]	; (80072b0 <drawTime+0x124>)
 8007290:	f7fb fbf8 	bl	8002a84 <drawTextAt>
}
 8007294:	46c0      	nop			; (mov r8, r8)
 8007296:	46bd      	mov	sp, r7
 8007298:	b00b      	add	sp, #44	; 0x2c
 800729a:	bd90      	pop	{r4, r7, pc}
 800729c:	0800cbf0 	.word	0x0800cbf0
 80072a0:	0800cc04 	.word	0x0800cc04
 80072a4:	20000018 	.word	0x20000018
 80072a8:	2000001c 	.word	0x2000001c
 80072ac:	0800cbfc 	.word	0x0800cbfc
 80072b0:	0800cc00 	.word	0x0800cc00

080072b4 <drawDateTime>:

// draws both time and date (as it says right there in the function name)
// uses upper left coords
void drawDateTime(int x, int y, struct dates *d, struct times *t, SPI_HandleTypeDef *hspi) {
 80072b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072b6:	b08f      	sub	sp, #60	; 0x3c
 80072b8:	af02      	add	r7, sp, #8
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	607a      	str	r2, [r7, #4]
 80072c0:	603b      	str	r3, [r7, #0]
	char str[24];
	uint16_t xc = leftToCentered(x, 114);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	252e      	movs	r5, #46	; 0x2e
 80072c8:	197c      	adds	r4, r7, r5
 80072ca:	2172      	movs	r1, #114	; 0x72
 80072cc:	0018      	movs	r0, r3
 80072ce:	f7fb fe2b 	bl	8002f28 <leftToCentered>
 80072d2:	0003      	movs	r3, r0
 80072d4:	8023      	strh	r3, [r4, #0]

	drawTime(x, y, t, hspi);
 80072d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072d8:	683a      	ldr	r2, [r7, #0]
 80072da:	68b9      	ldr	r1, [r7, #8]
 80072dc:	68f8      	ldr	r0, [r7, #12]
 80072de:	f7ff ff55 	bl	800718c <drawTime>

	// drawing date
	setTextSize(1);
 80072e2:	2001      	movs	r0, #1
 80072e4:	f7fb fd78 	bl	8002dd8 <setTextSize>
	sprintf(str, "%s %d %04d", monthNames[d->month], d->date, d->yr);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	789b      	ldrb	r3, [r3, #2]
 80072ec:	001a      	movs	r2, r3
 80072ee:	4b1a      	ldr	r3, [pc, #104]	; (8007358 <drawDateTime+0xa4>)
 80072f0:	0092      	lsls	r2, r2, #2
 80072f2:	58d2      	ldr	r2, [r2, r3]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	78db      	ldrb	r3, [r3, #3]
 80072f8:	001c      	movs	r4, r3
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	881b      	ldrh	r3, [r3, #0]
 80072fe:	4917      	ldr	r1, [pc, #92]	; (800735c <drawDateTime+0xa8>)
 8007300:	2614      	movs	r6, #20
 8007302:	19b8      	adds	r0, r7, r6
 8007304:	9300      	str	r3, [sp, #0]
 8007306:	0023      	movs	r3, r4
 8007308:	f004 ffb2 	bl	800c270 <siprintf>
	drawCenteredTextWithPadding(xc, y+24, 12, str, hspi);
 800730c:	197b      	adds	r3, r7, r5
 800730e:	881b      	ldrh	r3, [r3, #0]
 8007310:	b2d8      	uxtb	r0, r3
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	b2db      	uxtb	r3, r3
 8007316:	3318      	adds	r3, #24
 8007318:	b2d9      	uxtb	r1, r3
 800731a:	19ba      	adds	r2, r7, r6
 800731c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800731e:	9300      	str	r3, [sp, #0]
 8007320:	0013      	movs	r3, r2
 8007322:	220c      	movs	r2, #12
 8007324:	f7fb fc62 	bl	8002bec <drawCenteredTextWithPadding>

	// drawing weekday
	drawCenteredTextWithPadding(xc, y+32, 9, weekdayNames[d->weekday], hspi);
 8007328:	197b      	adds	r3, r7, r5
 800732a:	881b      	ldrh	r3, [r3, #0]
 800732c:	b2d8      	uxtb	r0, r3
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	b2db      	uxtb	r3, r3
 8007332:	3320      	adds	r3, #32
 8007334:	b2d9      	uxtb	r1, r3
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	791b      	ldrb	r3, [r3, #4]
 800733a:	001a      	movs	r2, r3
 800733c:	4b08      	ldr	r3, [pc, #32]	; (8007360 <drawDateTime+0xac>)
 800733e:	0092      	lsls	r2, r2, #2
 8007340:	58d2      	ldr	r2, [r2, r3]
 8007342:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007344:	9300      	str	r3, [sp, #0]
 8007346:	0013      	movs	r3, r2
 8007348:	2209      	movs	r2, #9
 800734a:	f7fb fc4f 	bl	8002bec <drawCenteredTextWithPadding>
}
 800734e:	46c0      	nop			; (mov r8, r8)
 8007350:	46bd      	mov	sp, r7
 8007352:	b00d      	add	sp, #52	; 0x34
 8007354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007356:	46c0      	nop			; (mov r8, r8)
 8007358:	20000044 	.word	0x20000044
 800735c:	0800cc0c 	.word	0x0800cc0c
 8007360:	20000024 	.word	0x20000024

08007364 <drawWeekdayTime>:

// used for alarms, but like...what if...you dont use it for alarms
// uses upper left coords.
// callee's responsibility to unpack alarm struct ty
void drawWeekdayTime(int x, int y, uint8_t weekday, struct times *t, SPI_HandleTypeDef *hspi) {
 8007364:	b580      	push	{r7, lr}
 8007366:	b086      	sub	sp, #24
 8007368:	af02      	add	r7, sp, #8
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	603b      	str	r3, [r7, #0]
 8007370:	1dfb      	adds	r3, r7, #7
 8007372:	701a      	strb	r2, [r3, #0]
	drawTime(x, y, t, hspi);
 8007374:	69bb      	ldr	r3, [r7, #24]
 8007376:	683a      	ldr	r2, [r7, #0]
 8007378:	68b9      	ldr	r1, [r7, #8]
 800737a:	68f8      	ldr	r0, [r7, #12]
 800737c:	f7ff ff06 	bl	800718c <drawTime>

	setTextSize(1);
 8007380:	2001      	movs	r0, #1
 8007382:	f7fb fd29 	bl	8002dd8 <setTextSize>
	drawCenteredTextWithPadding(leftToCentered(x, 114), y+24, 9, weekdayNames[weekday], hspi);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	b29b      	uxth	r3, r3
 800738a:	2172      	movs	r1, #114	; 0x72
 800738c:	0018      	movs	r0, r3
 800738e:	f7fb fdcb 	bl	8002f28 <leftToCentered>
 8007392:	0003      	movs	r3, r0
 8007394:	b2d8      	uxtb	r0, r3
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	b2db      	uxtb	r3, r3
 800739a:	3318      	adds	r3, #24
 800739c:	b2d9      	uxtb	r1, r3
 800739e:	1dfb      	adds	r3, r7, #7
 80073a0:	781a      	ldrb	r2, [r3, #0]
 80073a2:	4b06      	ldr	r3, [pc, #24]	; (80073bc <drawWeekdayTime+0x58>)
 80073a4:	0092      	lsls	r2, r2, #2
 80073a6:	58d2      	ldr	r2, [r2, r3]
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	9300      	str	r3, [sp, #0]
 80073ac:	0013      	movs	r3, r2
 80073ae:	2209      	movs	r2, #9
 80073b0:	f7fb fc1c 	bl	8002bec <drawCenteredTextWithPadding>
}
 80073b4:	46c0      	nop			; (mov r8, r8)
 80073b6:	46bd      	mov	sp, r7
 80073b8:	b004      	add	sp, #16
 80073ba:	bd80      	pop	{r7, pc}
 80073bc:	20000024 	.word	0x20000024

080073c0 <drawBasicTime>:

// only 1-line hr:min:sec
// 96x16
// upper left coords (use helpers if you want to center uwu)
// originally on (16, 68)
void drawBasicTime(int x, int y, struct times *t, SPI_HandleTypeDef *hspi) {
 80073c0:	b5b0      	push	{r4, r5, r7, lr}
 80073c2:	b08c      	sub	sp, #48	; 0x30
 80073c4:	af02      	add	r7, sp, #8
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]
 80073cc:	603b      	str	r3, [r7, #0]
	char str[24];
	setTextSize(2);
 80073ce:	2002      	movs	r0, #2
 80073d0:	f7fb fd02 	bl	8002dd8 <setTextSize>
	setTextColor(ST77XX_BLACK);
 80073d4:	2000      	movs	r0, #0
 80073d6:	f7fb fd0f 	bl	8002df8 <setTextColor>
	sprintf(str, "%2d:%2d:%2d", t->hr, t->min, t->sec);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	001a      	movs	r2, r3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	785b      	ldrb	r3, [r3, #1]
 80073e4:	001c      	movs	r4, r3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	789b      	ldrb	r3, [r3, #2]
 80073ea:	4909      	ldr	r1, [pc, #36]	; (8007410 <drawBasicTime+0x50>)
 80073ec:	2510      	movs	r5, #16
 80073ee:	1978      	adds	r0, r7, r5
 80073f0:	9300      	str	r3, [sp, #0]
 80073f2:	0023      	movs	r3, r4
 80073f4:	f004 ff3c 	bl	800c270 <siprintf>
	drawTextAt(x, y, str, hspi);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	b2d8      	uxtb	r0, r3
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	b2d9      	uxtb	r1, r3
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	197a      	adds	r2, r7, r5
 8007404:	f7fb fb3e 	bl	8002a84 <drawTextAt>
}
 8007408:	46c0      	nop			; (mov r8, r8)
 800740a:	46bd      	mov	sp, r7
 800740c:	b00a      	add	sp, #40	; 0x28
 800740e:	bdb0      	pop	{r4, r5, r7, pc}
 8007410:	0800cc18 	.word	0x0800cc18

08007414 <initFace>:
// ---- end of drawing functions ----

// initializes variables. should be called at the start of program
void initFace() {
 8007414:	b580      	push	{r7, lr}
 8007416:	af00      	add	r7, sp, #0
	faceOnDisplay = faceClock;
 8007418:	4b14      	ldr	r3, [pc, #80]	; (800746c <initFace+0x58>)
 800741a:	2200      	movs	r2, #0
 800741c:	701a      	strb	r2, [r3, #0]
	updateFace.clock = 1;
 800741e:	4b14      	ldr	r3, [pc, #80]	; (8007470 <initFace+0x5c>)
 8007420:	2201      	movs	r2, #1
 8007422:	701a      	strb	r2, [r3, #0]

	// initializing pointers
	clockVars.dateToSet = (struct dates *)calloc(1, sizeof(struct dates *));
 8007424:	2104      	movs	r1, #4
 8007426:	2001      	movs	r0, #1
 8007428:	f004 fe5e 	bl	800c0e8 <calloc>
 800742c:	0003      	movs	r3, r0
 800742e:	001a      	movs	r2, r3
 8007430:	4b10      	ldr	r3, [pc, #64]	; (8007474 <initFace+0x60>)
 8007432:	605a      	str	r2, [r3, #4]
	clockVars.timeToSet = (struct times *)calloc(1, sizeof(struct times *));
 8007434:	2104      	movs	r1, #4
 8007436:	2001      	movs	r0, #1
 8007438:	f004 fe56 	bl	800c0e8 <calloc>
 800743c:	0003      	movs	r3, r0
 800743e:	001a      	movs	r2, r3
 8007440:	4b0c      	ldr	r3, [pc, #48]	; (8007474 <initFace+0x60>)
 8007442:	609a      	str	r2, [r3, #8]
	timerVars.timeToSet = (struct times *)calloc(1, sizeof(struct times *));
 8007444:	2104      	movs	r1, #4
 8007446:	2001      	movs	r0, #1
 8007448:	f004 fe4e 	bl	800c0e8 <calloc>
 800744c:	0003      	movs	r3, r0
 800744e:	001a      	movs	r2, r3
 8007450:	4b09      	ldr	r3, [pc, #36]	; (8007478 <initFace+0x64>)
 8007452:	605a      	str	r2, [r3, #4]
	alarmVars.alarmToSet = (struct alarmTimes *)calloc(1, sizeof(struct alarmTimes *));
 8007454:	2104      	movs	r1, #4
 8007456:	2001      	movs	r0, #1
 8007458:	f004 fe46 	bl	800c0e8 <calloc>
 800745c:	0003      	movs	r3, r0
 800745e:	001a      	movs	r2, r3
 8007460:	4b06      	ldr	r3, [pc, #24]	; (800747c <initFace+0x68>)
 8007462:	605a      	str	r2, [r3, #4]
}
 8007464:	46c0      	nop			; (mov r8, r8)
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	46c0      	nop			; (mov r8, r8)
 800746c:	20000148 	.word	0x20000148
 8007470:	20000164 	.word	0x20000164
 8007474:	20000124 	.word	0x20000124
 8007478:	20000130 	.word	0x20000130
 800747c:	20000138 	.word	0x20000138

08007480 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8007480:	480d      	ldr	r0, [pc, #52]	; (80074b8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8007482:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8007484:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007486:	e003      	b.n	8007490 <LoopCopyDataInit>

08007488 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007488:	4b0c      	ldr	r3, [pc, #48]	; (80074bc <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 800748a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800748c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800748e:	3104      	adds	r1, #4

08007490 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8007490:	480b      	ldr	r0, [pc, #44]	; (80074c0 <LoopForever+0xa>)
  ldr  r3, =_edata
 8007492:	4b0c      	ldr	r3, [pc, #48]	; (80074c4 <LoopForever+0xe>)
  adds  r2, r0, r1
 8007494:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007496:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007498:	d3f6      	bcc.n	8007488 <CopyDataInit>
  ldr  r2, =_sbss
 800749a:	4a0b      	ldr	r2, [pc, #44]	; (80074c8 <LoopForever+0x12>)
  b  LoopFillZerobss
 800749c:	e002      	b.n	80074a4 <LoopFillZerobss>

0800749e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800749e:	2300      	movs	r3, #0
  str  r3, [r2]
 80074a0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80074a2:	3204      	adds	r2, #4

080074a4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80074a4:	4b09      	ldr	r3, [pc, #36]	; (80074cc <LoopForever+0x16>)
  cmp  r2, r3
 80074a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80074a8:	d3f9      	bcc.n	800749e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80074aa:	f7fd fadd 	bl	8004a68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80074ae:	f004 fe2b 	bl	800c108 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80074b2:	f7fc faa9 	bl	8003a08 <main>

080074b6 <LoopForever>:

LoopForever:
    b LoopForever
 80074b6:	e7fe      	b.n	80074b6 <LoopForever>
   ldr   r0, =_estack
 80074b8:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 80074bc:	0800d614 	.word	0x0800d614
  ldr  r0, =_sdata
 80074c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80074c4:	200000e8 	.word	0x200000e8
  ldr  r2, =_sbss
 80074c8:	200000e8 	.word	0x200000e8
  ldr  r3, = _ebss
 80074cc:	200006c8 	.word	0x200006c8

080074d0 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80074d0:	e7fe      	b.n	80074d0 <DMA1_Channel1_IRQHandler>
	...

080074d4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80074da:	1dfb      	adds	r3, r7, #7
 80074dc:	2200      	movs	r2, #0
 80074de:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80074e0:	4b0b      	ldr	r3, [pc, #44]	; (8007510 <HAL_Init+0x3c>)
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	4b0a      	ldr	r3, [pc, #40]	; (8007510 <HAL_Init+0x3c>)
 80074e6:	2140      	movs	r1, #64	; 0x40
 80074e8:	430a      	orrs	r2, r1
 80074ea:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80074ec:	2000      	movs	r0, #0
 80074ee:	f000 f811 	bl	8007514 <HAL_InitTick>
 80074f2:	1e03      	subs	r3, r0, #0
 80074f4:	d003      	beq.n	80074fe <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80074f6:	1dfb      	adds	r3, r7, #7
 80074f8:	2201      	movs	r2, #1
 80074fa:	701a      	strb	r2, [r3, #0]
 80074fc:	e001      	b.n	8007502 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80074fe:	f7fd f847 	bl	8004590 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007502:	1dfb      	adds	r3, r7, #7
 8007504:	781b      	ldrb	r3, [r3, #0]
}
 8007506:	0018      	movs	r0, r3
 8007508:	46bd      	mov	sp, r7
 800750a:	b002      	add	sp, #8
 800750c:	bd80      	pop	{r7, pc}
 800750e:	46c0      	nop			; (mov r8, r8)
 8007510:	40022000 	.word	0x40022000

08007514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007514:	b590      	push	{r4, r7, lr}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800751c:	4b14      	ldr	r3, [pc, #80]	; (8007570 <HAL_InitTick+0x5c>)
 800751e:	681c      	ldr	r4, [r3, #0]
 8007520:	4b14      	ldr	r3, [pc, #80]	; (8007574 <HAL_InitTick+0x60>)
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	0019      	movs	r1, r3
 8007526:	23fa      	movs	r3, #250	; 0xfa
 8007528:	0098      	lsls	r0, r3, #2
 800752a:	f7f8 fdf5 	bl	8000118 <__udivsi3>
 800752e:	0003      	movs	r3, r0
 8007530:	0019      	movs	r1, r3
 8007532:	0020      	movs	r0, r4
 8007534:	f7f8 fdf0 	bl	8000118 <__udivsi3>
 8007538:	0003      	movs	r3, r0
 800753a:	0018      	movs	r0, r3
 800753c:	f000 fe83 	bl	8008246 <HAL_SYSTICK_Config>
 8007540:	1e03      	subs	r3, r0, #0
 8007542:	d001      	beq.n	8007548 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	e00f      	b.n	8007568 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2b03      	cmp	r3, #3
 800754c:	d80b      	bhi.n	8007566 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800754e:	6879      	ldr	r1, [r7, #4]
 8007550:	2301      	movs	r3, #1
 8007552:	425b      	negs	r3, r3
 8007554:	2200      	movs	r2, #0
 8007556:	0018      	movs	r0, r3
 8007558:	f000 fe50 	bl	80081fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800755c:	4b06      	ldr	r3, [pc, #24]	; (8007578 <HAL_InitTick+0x64>)
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007562:	2300      	movs	r3, #0
 8007564:	e000      	b.n	8007568 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8007566:	2301      	movs	r3, #1
}
 8007568:	0018      	movs	r0, r3
 800756a:	46bd      	mov	sp, r7
 800756c:	b003      	add	sp, #12
 800756e:	bd90      	pop	{r4, r7, pc}
 8007570:	20000020 	.word	0x20000020
 8007574:	20000080 	.word	0x20000080
 8007578:	2000007c 	.word	0x2000007c

0800757c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007580:	4b05      	ldr	r3, [pc, #20]	; (8007598 <HAL_IncTick+0x1c>)
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	001a      	movs	r2, r3
 8007586:	4b05      	ldr	r3, [pc, #20]	; (800759c <HAL_IncTick+0x20>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	18d2      	adds	r2, r2, r3
 800758c:	4b03      	ldr	r3, [pc, #12]	; (800759c <HAL_IncTick+0x20>)
 800758e:	601a      	str	r2, [r3, #0]
}
 8007590:	46c0      	nop			; (mov r8, r8)
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	46c0      	nop			; (mov r8, r8)
 8007598:	20000080 	.word	0x20000080
 800759c:	200006c0 	.word	0x200006c0

080075a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	af00      	add	r7, sp, #0
  return uwTick;
 80075a4:	4b02      	ldr	r3, [pc, #8]	; (80075b0 <HAL_GetTick+0x10>)
 80075a6:	681b      	ldr	r3, [r3, #0]
}
 80075a8:	0018      	movs	r0, r3
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	46c0      	nop			; (mov r8, r8)
 80075b0:	200006c0 	.word	0x200006c0

080075b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80075bc:	f7ff fff0 	bl	80075a0 <HAL_GetTick>
 80075c0:	0003      	movs	r3, r0
 80075c2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	3301      	adds	r3, #1
 80075cc:	d005      	beq.n	80075da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80075ce:	4b09      	ldr	r3, [pc, #36]	; (80075f4 <HAL_Delay+0x40>)
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	001a      	movs	r2, r3
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	189b      	adds	r3, r3, r2
 80075d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80075da:	46c0      	nop			; (mov r8, r8)
 80075dc:	f7ff ffe0 	bl	80075a0 <HAL_GetTick>
 80075e0:	0002      	movs	r2, r0
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	1ad3      	subs	r3, r2, r3
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d8f7      	bhi.n	80075dc <HAL_Delay+0x28>
  {
  }
}
 80075ec:	46c0      	nop			; (mov r8, r8)
 80075ee:	46bd      	mov	sp, r7
 80075f0:	b004      	add	sp, #16
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	20000080 	.word	0x20000080

080075f8 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d101      	bne.n	800760a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	e159      	b.n	80078be <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800760e:	2b00      	cmp	r3, #0
 8007610:	d10a      	bne.n	8007628 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2250      	movs	r2, #80	; 0x50
 800761c:	2100      	movs	r1, #0
 800761e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	0018      	movs	r0, r3
 8007624:	f7fc ffc8 	bl	80045b8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800762c:	2210      	movs	r2, #16
 800762e:	4013      	ands	r3, r2
 8007630:	2b10      	cmp	r3, #16
 8007632:	d005      	beq.n	8007640 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	2204      	movs	r2, #4
 800763c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800763e:	d00b      	beq.n	8007658 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007644:	2210      	movs	r2, #16
 8007646:	431a      	orrs	r2, r3
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2250      	movs	r2, #80	; 0x50
 8007650:	2100      	movs	r1, #0
 8007652:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8007654:	2301      	movs	r3, #1
 8007656:	e132      	b.n	80078be <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800765c:	4a9a      	ldr	r2, [pc, #616]	; (80078c8 <HAL_ADC_Init+0x2d0>)
 800765e:	4013      	ands	r3, r2
 8007660:	2202      	movs	r2, #2
 8007662:	431a      	orrs	r2, r3
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	2203      	movs	r2, #3
 8007670:	4013      	ands	r3, r2
 8007672:	2b01      	cmp	r3, #1
 8007674:	d108      	bne.n	8007688 <HAL_ADC_Init+0x90>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	2201      	movs	r2, #1
 800767e:	4013      	ands	r3, r2
 8007680:	2b01      	cmp	r3, #1
 8007682:	d101      	bne.n	8007688 <HAL_ADC_Init+0x90>
 8007684:	2301      	movs	r3, #1
 8007686:	e000      	b.n	800768a <HAL_ADC_Init+0x92>
 8007688:	2300      	movs	r3, #0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d149      	bne.n	8007722 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	685a      	ldr	r2, [r3, #4]
 8007692:	23c0      	movs	r3, #192	; 0xc0
 8007694:	061b      	lsls	r3, r3, #24
 8007696:	429a      	cmp	r2, r3
 8007698:	d00b      	beq.n	80076b2 <HAL_ADC_Init+0xba>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	685a      	ldr	r2, [r3, #4]
 800769e:	2380      	movs	r3, #128	; 0x80
 80076a0:	05db      	lsls	r3, r3, #23
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d005      	beq.n	80076b2 <HAL_ADC_Init+0xba>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	685a      	ldr	r2, [r3, #4]
 80076aa:	2380      	movs	r3, #128	; 0x80
 80076ac:	061b      	lsls	r3, r3, #24
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d111      	bne.n	80076d6 <HAL_ADC_Init+0xde>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	691a      	ldr	r2, [r3, #16]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	0092      	lsls	r2, r2, #2
 80076be:	0892      	lsrs	r2, r2, #2
 80076c0:	611a      	str	r2, [r3, #16]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	6919      	ldr	r1, [r3, #16]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	685a      	ldr	r2, [r3, #4]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	430a      	orrs	r2, r1
 80076d2:	611a      	str	r2, [r3, #16]
 80076d4:	e014      	b.n	8007700 <HAL_ADC_Init+0x108>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	691a      	ldr	r2, [r3, #16]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	0092      	lsls	r2, r2, #2
 80076e2:	0892      	lsrs	r2, r2, #2
 80076e4:	611a      	str	r2, [r3, #16]
 80076e6:	4b79      	ldr	r3, [pc, #484]	; (80078cc <HAL_ADC_Init+0x2d4>)
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	4b78      	ldr	r3, [pc, #480]	; (80078cc <HAL_ADC_Init+0x2d4>)
 80076ec:	4978      	ldr	r1, [pc, #480]	; (80078d0 <HAL_ADC_Init+0x2d8>)
 80076ee:	400a      	ands	r2, r1
 80076f0:	601a      	str	r2, [r3, #0]
 80076f2:	4b76      	ldr	r3, [pc, #472]	; (80078cc <HAL_ADC_Init+0x2d4>)
 80076f4:	6819      	ldr	r1, [r3, #0]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	685a      	ldr	r2, [r3, #4]
 80076fa:	4b74      	ldr	r3, [pc, #464]	; (80078cc <HAL_ADC_Init+0x2d4>)
 80076fc:	430a      	orrs	r2, r1
 80076fe:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	68da      	ldr	r2, [r3, #12]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	2118      	movs	r1, #24
 800770c:	438a      	bics	r2, r1
 800770e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	68d9      	ldr	r1, [r3, #12]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	689a      	ldr	r2, [r3, #8]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	430a      	orrs	r2, r1
 8007720:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8007722:	4b6a      	ldr	r3, [pc, #424]	; (80078cc <HAL_ADC_Init+0x2d4>)
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	4b69      	ldr	r3, [pc, #420]	; (80078cc <HAL_ADC_Init+0x2d4>)
 8007728:	496a      	ldr	r1, [pc, #424]	; (80078d4 <HAL_ADC_Init+0x2dc>)
 800772a:	400a      	ands	r2, r1
 800772c:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800772e:	4b67      	ldr	r3, [pc, #412]	; (80078cc <HAL_ADC_Init+0x2d4>)
 8007730:	6819      	ldr	r1, [r3, #0]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007736:	065a      	lsls	r2, r3, #25
 8007738:	4b64      	ldr	r3, [pc, #400]	; (80078cc <HAL_ADC_Init+0x2d4>)
 800773a:	430a      	orrs	r2, r1
 800773c:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	689a      	ldr	r2, [r3, #8]
 8007744:	2380      	movs	r3, #128	; 0x80
 8007746:	055b      	lsls	r3, r3, #21
 8007748:	4013      	ands	r3, r2
 800774a:	d108      	bne.n	800775e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	689a      	ldr	r2, [r3, #8]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	2180      	movs	r1, #128	; 0x80
 8007758:	0549      	lsls	r1, r1, #21
 800775a:	430a      	orrs	r2, r1
 800775c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	68da      	ldr	r2, [r3, #12]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	495b      	ldr	r1, [pc, #364]	; (80078d8 <HAL_ADC_Init+0x2e0>)
 800776a:	400a      	ands	r2, r1
 800776c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	68d9      	ldr	r1, [r3, #12]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	691b      	ldr	r3, [r3, #16]
 800777c:	2b02      	cmp	r3, #2
 800777e:	d101      	bne.n	8007784 <HAL_ADC_Init+0x18c>
 8007780:	2304      	movs	r3, #4
 8007782:	e000      	b.n	8007786 <HAL_ADC_Init+0x18e>
 8007784:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8007786:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2020      	movs	r0, #32
 800778c:	5c1b      	ldrb	r3, [r3, r0]
 800778e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8007790:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	202c      	movs	r0, #44	; 0x2c
 8007796:	5c1b      	ldrb	r3, [r3, r0]
 8007798:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800779a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80077a0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	699b      	ldr	r3, [r3, #24]
 80077a6:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80077a8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	69db      	ldr	r3, [r3, #28]
 80077ae:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80077b0:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	430a      	orrs	r2, r1
 80077b8:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077be:	23c2      	movs	r3, #194	; 0xc2
 80077c0:	33ff      	adds	r3, #255	; 0xff
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d00b      	beq.n	80077de <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	68d9      	ldr	r1, [r3, #12]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80077d4:	431a      	orrs	r2, r3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	430a      	orrs	r2, r1
 80077dc:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2221      	movs	r2, #33	; 0x21
 80077e2:	5c9b      	ldrb	r3, [r3, r2]
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d11a      	bne.n	800781e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2220      	movs	r2, #32
 80077ec:	5c9b      	ldrb	r3, [r3, r2]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d109      	bne.n	8007806 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	68da      	ldr	r2, [r3, #12]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	2180      	movs	r1, #128	; 0x80
 80077fe:	0249      	lsls	r1, r1, #9
 8007800:	430a      	orrs	r2, r1
 8007802:	60da      	str	r2, [r3, #12]
 8007804:	e00b      	b.n	800781e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800780a:	2220      	movs	r2, #32
 800780c:	431a      	orrs	r2, r3
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007816:	2201      	movs	r2, #1
 8007818:	431a      	orrs	r2, r3
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007822:	2b01      	cmp	r3, #1
 8007824:	d11f      	bne.n	8007866 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	691a      	ldr	r2, [r3, #16]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	492a      	ldr	r1, [pc, #168]	; (80078dc <HAL_ADC_Init+0x2e4>)
 8007832:	400a      	ands	r2, r1
 8007834:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	6919      	ldr	r1, [r3, #16]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8007844:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 800784a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	430a      	orrs	r2, r1
 8007852:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	691a      	ldr	r2, [r3, #16]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	2101      	movs	r1, #1
 8007860:	430a      	orrs	r2, r1
 8007862:	611a      	str	r2, [r3, #16]
 8007864:	e00e      	b.n	8007884 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	691b      	ldr	r3, [r3, #16]
 800786c:	2201      	movs	r2, #1
 800786e:	4013      	ands	r3, r2
 8007870:	2b01      	cmp	r3, #1
 8007872:	d107      	bne.n	8007884 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	691a      	ldr	r2, [r3, #16]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	2101      	movs	r1, #1
 8007880:	438a      	bics	r2, r1
 8007882:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	695a      	ldr	r2, [r3, #20]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	2107      	movs	r1, #7
 8007890:	438a      	bics	r2, r1
 8007892:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	6959      	ldr	r1, [r3, #20]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	430a      	orrs	r2, r1
 80078a4:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078b0:	2203      	movs	r2, #3
 80078b2:	4393      	bics	r3, r2
 80078b4:	2201      	movs	r2, #1
 80078b6:	431a      	orrs	r2, r3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80078bc:	2300      	movs	r3, #0
}
 80078be:	0018      	movs	r0, r3
 80078c0:	46bd      	mov	sp, r7
 80078c2:	b002      	add	sp, #8
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	46c0      	nop			; (mov r8, r8)
 80078c8:	fffffefd 	.word	0xfffffefd
 80078cc:	40012708 	.word	0x40012708
 80078d0:	ffc3ffff 	.word	0xffc3ffff
 80078d4:	fdffffff 	.word	0xfdffffff
 80078d8:	fffe0219 	.word	0xfffe0219
 80078dc:	fffffc03 	.word	0xfffffc03

080078e0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80078e0:	b590      	push	{r4, r7, lr}
 80078e2:	b085      	sub	sp, #20
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80078e8:	230f      	movs	r3, #15
 80078ea:	18fb      	adds	r3, r7, r3
 80078ec:	2200      	movs	r2, #0
 80078ee:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	2204      	movs	r2, #4
 80078f8:	4013      	ands	r3, r2
 80078fa:	d138      	bne.n	800796e <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2250      	movs	r2, #80	; 0x50
 8007900:	5c9b      	ldrb	r3, [r3, r2]
 8007902:	2b01      	cmp	r3, #1
 8007904:	d101      	bne.n	800790a <HAL_ADC_Start+0x2a>
 8007906:	2302      	movs	r3, #2
 8007908:	e038      	b.n	800797c <HAL_ADC_Start+0x9c>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2250      	movs	r2, #80	; 0x50
 800790e:	2101      	movs	r1, #1
 8007910:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	69db      	ldr	r3, [r3, #28]
 8007916:	2b01      	cmp	r3, #1
 8007918:	d007      	beq.n	800792a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800791a:	230f      	movs	r3, #15
 800791c:	18fc      	adds	r4, r7, r3
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	0018      	movs	r0, r3
 8007922:	f000 fa87 	bl	8007e34 <ADC_Enable>
 8007926:	0003      	movs	r3, r0
 8007928:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800792a:	230f      	movs	r3, #15
 800792c:	18fb      	adds	r3, r7, r3
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d120      	bne.n	8007976 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007938:	4a12      	ldr	r2, [pc, #72]	; (8007984 <HAL_ADC_Start+0xa4>)
 800793a:	4013      	ands	r3, r2
 800793c:	2280      	movs	r2, #128	; 0x80
 800793e:	0052      	lsls	r2, r2, #1
 8007940:	431a      	orrs	r2, r3
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2250      	movs	r2, #80	; 0x50
 8007950:	2100      	movs	r1, #0
 8007952:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	221c      	movs	r2, #28
 800795a:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	689a      	ldr	r2, [r3, #8]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	2104      	movs	r1, #4
 8007968:	430a      	orrs	r2, r1
 800796a:	609a      	str	r2, [r3, #8]
 800796c:	e003      	b.n	8007976 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800796e:	230f      	movs	r3, #15
 8007970:	18fb      	adds	r3, r7, r3
 8007972:	2202      	movs	r2, #2
 8007974:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8007976:	230f      	movs	r3, #15
 8007978:	18fb      	adds	r3, r7, r3
 800797a:	781b      	ldrb	r3, [r3, #0]
}
 800797c:	0018      	movs	r0, r3
 800797e:	46bd      	mov	sp, r7
 8007980:	b005      	add	sp, #20
 8007982:	bd90      	pop	{r4, r7, pc}
 8007984:	fffff0fe 	.word	0xfffff0fe

08007988 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8007988:	b5b0      	push	{r4, r5, r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007990:	230f      	movs	r3, #15
 8007992:	18fb      	adds	r3, r7, r3
 8007994:	2200      	movs	r2, #0
 8007996:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2250      	movs	r2, #80	; 0x50
 800799c:	5c9b      	ldrb	r3, [r3, r2]
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d101      	bne.n	80079a6 <HAL_ADC_Stop+0x1e>
 80079a2:	2302      	movs	r3, #2
 80079a4:	e02a      	b.n	80079fc <HAL_ADC_Stop+0x74>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2250      	movs	r2, #80	; 0x50
 80079aa:	2101      	movs	r1, #1
 80079ac:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80079ae:	250f      	movs	r5, #15
 80079b0:	197c      	adds	r4, r7, r5
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	0018      	movs	r0, r3
 80079b6:	f000 fafd 	bl	8007fb4 <ADC_ConversionStop>
 80079ba:	0003      	movs	r3, r0
 80079bc:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80079be:	197b      	adds	r3, r7, r5
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d113      	bne.n	80079ee <HAL_ADC_Stop+0x66>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80079c6:	250f      	movs	r5, #15
 80079c8:	197c      	adds	r4, r7, r5
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	0018      	movs	r0, r3
 80079ce:	f000 fa91 	bl	8007ef4 <ADC_Disable>
 80079d2:	0003      	movs	r3, r0
 80079d4:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80079d6:	197b      	adds	r3, r7, r5
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d107      	bne.n	80079ee <HAL_ADC_Stop+0x66>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079e2:	4a08      	ldr	r2, [pc, #32]	; (8007a04 <HAL_ADC_Stop+0x7c>)
 80079e4:	4013      	ands	r3, r2
 80079e6:	2201      	movs	r2, #1
 80079e8:	431a      	orrs	r2, r3
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2250      	movs	r2, #80	; 0x50
 80079f2:	2100      	movs	r1, #0
 80079f4:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80079f6:	230f      	movs	r3, #15
 80079f8:	18fb      	adds	r3, r7, r3
 80079fa:	781b      	ldrb	r3, [r3, #0]
}
 80079fc:	0018      	movs	r0, r3
 80079fe:	46bd      	mov	sp, r7
 8007a00:	b004      	add	sp, #16
 8007a02:	bdb0      	pop	{r4, r5, r7, pc}
 8007a04:	fffffefe 	.word	0xfffffefe

08007a08 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007a12:	2300      	movs	r3, #0
 8007a14:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8007a16:	2300      	movs	r3, #0
 8007a18:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	695b      	ldr	r3, [r3, #20]
 8007a1e:	2b08      	cmp	r3, #8
 8007a20:	d102      	bne.n	8007a28 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8007a22:	2308      	movs	r3, #8
 8007a24:	60fb      	str	r3, [r7, #12]
 8007a26:	e014      	b.n	8007a52 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	68db      	ldr	r3, [r3, #12]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	4013      	ands	r3, r2
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d10b      	bne.n	8007a4e <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a3a:	2220      	movs	r2, #32
 8007a3c:	431a      	orrs	r2, r3
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2250      	movs	r2, #80	; 0x50
 8007a46:	2100      	movs	r1, #0
 8007a48:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	e06c      	b.n	8007b28 <HAL_ADC_PollForConversion+0x120>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8007a4e:	230c      	movs	r3, #12
 8007a50:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8007a52:	f7ff fda5 	bl	80075a0 <HAL_GetTick>
 8007a56:	0003      	movs	r3, r0
 8007a58:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8007a5a:	e019      	b.n	8007a90 <HAL_ADC_PollForConversion+0x88>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	3301      	adds	r3, #1
 8007a60:	d016      	beq.n	8007a90 <HAL_ADC_PollForConversion+0x88>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d007      	beq.n	8007a78 <HAL_ADC_PollForConversion+0x70>
 8007a68:	f7ff fd9a 	bl	80075a0 <HAL_GetTick>
 8007a6c:	0002      	movs	r2, r0
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	1ad3      	subs	r3, r2, r3
 8007a72:	683a      	ldr	r2, [r7, #0]
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d20b      	bcs.n	8007a90 <HAL_ADC_PollForConversion+0x88>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a7c:	2204      	movs	r2, #4
 8007a7e:	431a      	orrs	r2, r3
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2250      	movs	r2, #80	; 0x50
 8007a88:	2100      	movs	r1, #0
 8007a8a:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 8007a8c:	2303      	movs	r3, #3
 8007a8e:	e04b      	b.n	8007b28 <HAL_ADC_PollForConversion+0x120>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	68fa      	ldr	r2, [r7, #12]
 8007a98:	4013      	ands	r3, r2
 8007a9a:	d0df      	beq.n	8007a5c <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aa0:	2280      	movs	r2, #128	; 0x80
 8007aa2:	0092      	lsls	r2, r2, #2
 8007aa4:	431a      	orrs	r2, r3
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	68da      	ldr	r2, [r3, #12]
 8007ab0:	23c0      	movs	r3, #192	; 0xc0
 8007ab2:	011b      	lsls	r3, r3, #4
 8007ab4:	4013      	ands	r3, r2
 8007ab6:	d12e      	bne.n	8007b16 <HAL_ADC_PollForConversion+0x10e>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2220      	movs	r2, #32
 8007abc:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d129      	bne.n	8007b16 <HAL_ADC_PollForConversion+0x10e>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2208      	movs	r2, #8
 8007aca:	4013      	ands	r3, r2
 8007acc:	2b08      	cmp	r3, #8
 8007ace:	d122      	bne.n	8007b16 <HAL_ADC_PollForConversion+0x10e>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	2204      	movs	r2, #4
 8007ad8:	4013      	ands	r3, r2
 8007ada:	d110      	bne.n	8007afe <HAL_ADC_PollForConversion+0xf6>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	685a      	ldr	r2, [r3, #4]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	210c      	movs	r1, #12
 8007ae8:	438a      	bics	r2, r1
 8007aea:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007af0:	4a0f      	ldr	r2, [pc, #60]	; (8007b30 <HAL_ADC_PollForConversion+0x128>)
 8007af2:	4013      	ands	r3, r2
 8007af4:	2201      	movs	r2, #1
 8007af6:	431a      	orrs	r2, r3
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	655a      	str	r2, [r3, #84]	; 0x54
 8007afc:	e00b      	b.n	8007b16 <HAL_ADC_PollForConversion+0x10e>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b02:	2220      	movs	r2, #32
 8007b04:	431a      	orrs	r2, r3
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b0e:	2201      	movs	r2, #1
 8007b10:	431a      	orrs	r2, r3
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	699b      	ldr	r3, [r3, #24]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d103      	bne.n	8007b26 <HAL_ADC_PollForConversion+0x11e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	220c      	movs	r2, #12
 8007b24:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 8007b26:	2300      	movs	r3, #0
}
 8007b28:	0018      	movs	r0, r3
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	b004      	add	sp, #16
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	fffffefe 	.word	0xfffffefe

08007b34 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8007b42:	0018      	movs	r0, r3
 8007b44:	46bd      	mov	sp, r7
 8007b46:	b002      	add	sp, #8
 8007b48:	bd80      	pop	{r7, pc}
	...

08007b4c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b082      	sub	sp, #8
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2204      	movs	r2, #4
 8007b5c:	4013      	ands	r3, r2
 8007b5e:	2b04      	cmp	r3, #4
 8007b60:	d106      	bne.n	8007b70 <HAL_ADC_IRQHandler+0x24>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	2204      	movs	r2, #4
 8007b6a:	4013      	ands	r3, r2
 8007b6c:	2b04      	cmp	r3, #4
 8007b6e:	d00d      	beq.n	8007b8c <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	2208      	movs	r2, #8
 8007b78:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8007b7a:	2b08      	cmp	r3, #8
 8007b7c:	d154      	bne.n	8007c28 <HAL_ADC_IRQHandler+0xdc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	2208      	movs	r2, #8
 8007b86:	4013      	ands	r3, r2
 8007b88:	2b08      	cmp	r3, #8
 8007b8a:	d14d      	bne.n	8007c28 <HAL_ADC_IRQHandler+0xdc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b90:	2210      	movs	r2, #16
 8007b92:	4013      	ands	r3, r2
 8007b94:	d106      	bne.n	8007ba4 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b9a:	2280      	movs	r2, #128	; 0x80
 8007b9c:	0092      	lsls	r2, r2, #2
 8007b9e:	431a      	orrs	r2, r3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	655a      	str	r2, [r3, #84]	; 0x54
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	68da      	ldr	r2, [r3, #12]
 8007baa:	23c0      	movs	r3, #192	; 0xc0
 8007bac:	011b      	lsls	r3, r3, #4
 8007bae:	4013      	ands	r3, r2
 8007bb0:	d12e      	bne.n	8007c10 <HAL_ADC_IRQHandler+0xc4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2220      	movs	r2, #32
 8007bb6:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d129      	bne.n	8007c10 <HAL_ADC_IRQHandler+0xc4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2208      	movs	r2, #8
 8007bc4:	4013      	ands	r3, r2
 8007bc6:	2b08      	cmp	r3, #8
 8007bc8:	d122      	bne.n	8007c10 <HAL_ADC_IRQHandler+0xc4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	2204      	movs	r2, #4
 8007bd2:	4013      	ands	r3, r2
 8007bd4:	d110      	bne.n	8007bf8 <HAL_ADC_IRQHandler+0xac>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	685a      	ldr	r2, [r3, #4]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	210c      	movs	r1, #12
 8007be2:	438a      	bics	r2, r1
 8007be4:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bea:	4a35      	ldr	r2, [pc, #212]	; (8007cc0 <HAL_ADC_IRQHandler+0x174>)
 8007bec:	4013      	ands	r3, r2
 8007bee:	2201      	movs	r2, #1
 8007bf0:	431a      	orrs	r2, r3
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	655a      	str	r2, [r3, #84]	; 0x54
 8007bf6:	e00b      	b.n	8007c10 <HAL_ADC_IRQHandler+0xc4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bfc:	2220      	movs	r2, #32
 8007bfe:	431a      	orrs	r2, r3
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c08:	2201      	movs	r2, #1
 8007c0a:	431a      	orrs	r2, r3
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	659a      	str	r2, [r3, #88]	; 0x58
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	0018      	movs	r0, r3
 8007c14:	f000 f856 	bl	8007cc4 <HAL_ADC_ConvCpltCallback>
    /* Note: Management of low power auto-wait enabled: flags must be cleared */
    /*       by user when fetching ADC conversion data.                       */
    /*       This case is managed in IRQ handler, but this low-power mode     */
    /*       should not be used with programming model IT or DMA.             */
    /*       Refer to comment of parameter "LowPowerAutoWait".                */
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	699b      	ldr	r3, [r3, #24]
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d003      	beq.n	8007c28 <HAL_ADC_IRQHandler+0xdc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	220c      	movs	r2, #12
 8007c26:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2280      	movs	r2, #128	; 0x80
 8007c30:	4013      	ands	r3, r2
 8007c32:	2b80      	cmp	r3, #128	; 0x80
 8007c34:	d115      	bne.n	8007c62 <HAL_ADC_IRQHandler+0x116>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	2280      	movs	r2, #128	; 0x80
 8007c3e:	4013      	ands	r3, r2
 8007c40:	2b80      	cmp	r3, #128	; 0x80
 8007c42:	d10e      	bne.n	8007c62 <HAL_ADC_IRQHandler+0x116>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c48:	2280      	movs	r2, #128	; 0x80
 8007c4a:	0252      	lsls	r2, r2, #9
 8007c4c:	431a      	orrs	r2, r3
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	655a      	str	r2, [r3, #84]	; 0x54
    
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	0018      	movs	r0, r3
 8007c56:	f000 f83d 	bl	8007cd4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	2280      	movs	r2, #128	; 0x80
 8007c60:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	2210      	movs	r2, #16
 8007c6a:	4013      	ands	r3, r2
 8007c6c:	2b10      	cmp	r3, #16
 8007c6e:	d123      	bne.n	8007cb8 <HAL_ADC_IRQHandler+0x16c>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	2210      	movs	r2, #16
 8007c78:	4013      	ands	r3, r2
 8007c7a:	2b10      	cmp	r3, #16
 8007c7c:	d11c      	bne.n	8007cb8 <HAL_ADC_IRQHandler+0x16c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d006      	beq.n	8007c94 <HAL_ADC_IRQHandler+0x148>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d10d      	bne.n	8007cb0 <HAL_ADC_IRQHandler+0x164>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c98:	2202      	movs	r2, #2
 8007c9a:	431a      	orrs	r2, r3
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	2210      	movs	r2, #16
 8007ca6:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	0018      	movs	r0, r3
 8007cac:	f000 f81a 	bl	8007ce4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	2210      	movs	r2, #16
 8007cb6:	601a      	str	r2, [r3, #0]
  }
  
}
 8007cb8:	46c0      	nop			; (mov r8, r8)
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	b002      	add	sp, #8
 8007cbe:	bd80      	pop	{r7, pc}
 8007cc0:	fffffefe 	.word	0xfffffefe

08007cc4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8007ccc:	46c0      	nop			; (mov r8, r8)
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	b002      	add	sp, #8
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b082      	sub	sp, #8
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8007cdc:	46c0      	nop			; (mov r8, r8)
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	b002      	add	sp, #8
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007cec:	46c0      	nop			; (mov r8, r8)
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	b002      	add	sp, #8
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2250      	movs	r2, #80	; 0x50
 8007d02:	5c9b      	ldrb	r3, [r3, r2]
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d101      	bne.n	8007d0c <HAL_ADC_ConfigChannel+0x18>
 8007d08:	2302      	movs	r3, #2
 8007d0a:	e085      	b.n	8007e18 <HAL_ADC_ConfigChannel+0x124>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2250      	movs	r2, #80	; 0x50
 8007d10:	2101      	movs	r1, #1
 8007d12:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	2204      	movs	r2, #4
 8007d1c:	4013      	ands	r3, r2
 8007d1e:	d00b      	beq.n	8007d38 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d24:	2220      	movs	r2, #32
 8007d26:	431a      	orrs	r2, r3
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2250      	movs	r2, #80	; 0x50
 8007d30:	2100      	movs	r1, #0
 8007d32:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8007d34:	2301      	movs	r3, #1
 8007d36:	e06f      	b.n	8007e18 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	4a38      	ldr	r2, [pc, #224]	; (8007e20 <HAL_ADC_ConfigChannel+0x12c>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d035      	beq.n	8007dae <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	035b      	lsls	r3, r3, #13
 8007d4e:	0b5a      	lsrs	r2, r3, #13
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	430a      	orrs	r2, r1
 8007d56:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	2380      	movs	r3, #128	; 0x80
 8007d5e:	02db      	lsls	r3, r3, #11
 8007d60:	4013      	ands	r3, r2
 8007d62:	d009      	beq.n	8007d78 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8007d64:	4b2f      	ldr	r3, [pc, #188]	; (8007e24 <HAL_ADC_ConfigChannel+0x130>)
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	4b2e      	ldr	r3, [pc, #184]	; (8007e24 <HAL_ADC_ConfigChannel+0x130>)
 8007d6a:	2180      	movs	r1, #128	; 0x80
 8007d6c:	0409      	lsls	r1, r1, #16
 8007d6e:	430a      	orrs	r2, r1
 8007d70:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8007d72:	200a      	movs	r0, #10
 8007d74:	f000 f964 	bl	8008040 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	2380      	movs	r3, #128	; 0x80
 8007d7e:	029b      	lsls	r3, r3, #10
 8007d80:	4013      	ands	r3, r2
 8007d82:	d006      	beq.n	8007d92 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8007d84:	4b27      	ldr	r3, [pc, #156]	; (8007e24 <HAL_ADC_ConfigChannel+0x130>)
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	4b26      	ldr	r3, [pc, #152]	; (8007e24 <HAL_ADC_ConfigChannel+0x130>)
 8007d8a:	2180      	movs	r1, #128	; 0x80
 8007d8c:	03c9      	lsls	r1, r1, #15
 8007d8e:	430a      	orrs	r2, r1
 8007d90:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	2380      	movs	r3, #128	; 0x80
 8007d98:	025b      	lsls	r3, r3, #9
 8007d9a:	4013      	ands	r3, r2
 8007d9c:	d037      	beq.n	8007e0e <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 8007d9e:	4b21      	ldr	r3, [pc, #132]	; (8007e24 <HAL_ADC_ConfigChannel+0x130>)
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	4b20      	ldr	r3, [pc, #128]	; (8007e24 <HAL_ADC_ConfigChannel+0x130>)
 8007da4:	2180      	movs	r1, #128	; 0x80
 8007da6:	0449      	lsls	r1, r1, #17
 8007da8:	430a      	orrs	r2, r1
 8007daa:	601a      	str	r2, [r3, #0]
 8007dac:	e02f      	b.n	8007e0e <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	035b      	lsls	r3, r3, #13
 8007dba:	0b5b      	lsrs	r3, r3, #13
 8007dbc:	43d9      	mvns	r1, r3
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	400a      	ands	r2, r1
 8007dc4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	2380      	movs	r3, #128	; 0x80
 8007dcc:	02db      	lsls	r3, r3, #11
 8007dce:	4013      	ands	r3, r2
 8007dd0:	d005      	beq.n	8007dde <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8007dd2:	4b14      	ldr	r3, [pc, #80]	; (8007e24 <HAL_ADC_ConfigChannel+0x130>)
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	4b13      	ldr	r3, [pc, #76]	; (8007e24 <HAL_ADC_ConfigChannel+0x130>)
 8007dd8:	4913      	ldr	r1, [pc, #76]	; (8007e28 <HAL_ADC_ConfigChannel+0x134>)
 8007dda:	400a      	ands	r2, r1
 8007ddc:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	681a      	ldr	r2, [r3, #0]
 8007de2:	2380      	movs	r3, #128	; 0x80
 8007de4:	029b      	lsls	r3, r3, #10
 8007de6:	4013      	ands	r3, r2
 8007de8:	d005      	beq.n	8007df6 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8007dea:	4b0e      	ldr	r3, [pc, #56]	; (8007e24 <HAL_ADC_ConfigChannel+0x130>)
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	4b0d      	ldr	r3, [pc, #52]	; (8007e24 <HAL_ADC_ConfigChannel+0x130>)
 8007df0:	490e      	ldr	r1, [pc, #56]	; (8007e2c <HAL_ADC_ConfigChannel+0x138>)
 8007df2:	400a      	ands	r2, r1
 8007df4:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	2380      	movs	r3, #128	; 0x80
 8007dfc:	025b      	lsls	r3, r3, #9
 8007dfe:	4013      	ands	r3, r2
 8007e00:	d005      	beq.n	8007e0e <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 8007e02:	4b08      	ldr	r3, [pc, #32]	; (8007e24 <HAL_ADC_ConfigChannel+0x130>)
 8007e04:	681a      	ldr	r2, [r3, #0]
 8007e06:	4b07      	ldr	r3, [pc, #28]	; (8007e24 <HAL_ADC_ConfigChannel+0x130>)
 8007e08:	4909      	ldr	r1, [pc, #36]	; (8007e30 <HAL_ADC_ConfigChannel+0x13c>)
 8007e0a:	400a      	ands	r2, r1
 8007e0c:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2250      	movs	r2, #80	; 0x50
 8007e12:	2100      	movs	r1, #0
 8007e14:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8007e16:	2300      	movs	r3, #0
}
 8007e18:	0018      	movs	r0, r3
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	b002      	add	sp, #8
 8007e1e:	bd80      	pop	{r7, pc}
 8007e20:	00001001 	.word	0x00001001
 8007e24:	40012708 	.word	0x40012708
 8007e28:	ff7fffff 	.word	0xff7fffff
 8007e2c:	ffbfffff 	.word	0xffbfffff
 8007e30:	feffffff 	.word	0xfeffffff

08007e34 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b084      	sub	sp, #16
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	2203      	movs	r2, #3
 8007e48:	4013      	ands	r3, r2
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d108      	bne.n	8007e60 <ADC_Enable+0x2c>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	2201      	movs	r2, #1
 8007e56:	4013      	ands	r3, r2
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d101      	bne.n	8007e60 <ADC_Enable+0x2c>
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	e000      	b.n	8007e62 <ADC_Enable+0x2e>
 8007e60:	2300      	movs	r3, #0
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d13f      	bne.n	8007ee6 <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	4a20      	ldr	r2, [pc, #128]	; (8007ef0 <ADC_Enable+0xbc>)
 8007e6e:	4013      	ands	r3, r2
 8007e70:	d00d      	beq.n	8007e8e <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e76:	2210      	movs	r2, #16
 8007e78:	431a      	orrs	r2, r3
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e82:	2201      	movs	r2, #1
 8007e84:	431a      	orrs	r2, r3
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e02c      	b.n	8007ee8 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	689a      	ldr	r2, [r3, #8]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	2101      	movs	r1, #1
 8007e9a:	430a      	orrs	r2, r1
 8007e9c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8007e9e:	2001      	movs	r0, #1
 8007ea0:	f000 f8ce 	bl	8008040 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8007ea4:	f7ff fb7c 	bl	80075a0 <HAL_GetTick>
 8007ea8:	0003      	movs	r3, r0
 8007eaa:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8007eac:	e014      	b.n	8007ed8 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007eae:	f7ff fb77 	bl	80075a0 <HAL_GetTick>
 8007eb2:	0002      	movs	r2, r0
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	1ad3      	subs	r3, r2, r3
 8007eb8:	2b0a      	cmp	r3, #10
 8007eba:	d90d      	bls.n	8007ed8 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ec0:	2210      	movs	r2, #16
 8007ec2:	431a      	orrs	r2, r3
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ecc:	2201      	movs	r2, #1
 8007ece:	431a      	orrs	r2, r3
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	e007      	b.n	8007ee8 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	4013      	ands	r3, r2
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d1e3      	bne.n	8007eae <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8007ee6:	2300      	movs	r3, #0
}
 8007ee8:	0018      	movs	r0, r3
 8007eea:	46bd      	mov	sp, r7
 8007eec:	b004      	add	sp, #16
 8007eee:	bd80      	pop	{r7, pc}
 8007ef0:	80000017 	.word	0x80000017

08007ef4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b084      	sub	sp, #16
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007efc:	2300      	movs	r3, #0
 8007efe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	2203      	movs	r2, #3
 8007f08:	4013      	ands	r3, r2
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d108      	bne.n	8007f20 <ADC_Disable+0x2c>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	2201      	movs	r2, #1
 8007f16:	4013      	ands	r3, r2
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d101      	bne.n	8007f20 <ADC_Disable+0x2c>
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	e000      	b.n	8007f22 <ADC_Disable+0x2e>
 8007f20:	2300      	movs	r3, #0
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d041      	beq.n	8007faa <ADC_Disable+0xb6>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	2205      	movs	r2, #5
 8007f2e:	4013      	ands	r3, r2
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d110      	bne.n	8007f56 <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	689a      	ldr	r2, [r3, #8]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	2102      	movs	r1, #2
 8007f40:	430a      	orrs	r2, r1
 8007f42:	609a      	str	r2, [r3, #8]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	2203      	movs	r2, #3
 8007f4a:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007f4c:	f7ff fb28 	bl	80075a0 <HAL_GetTick>
 8007f50:	0003      	movs	r3, r0
 8007f52:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8007f54:	e022      	b.n	8007f9c <ADC_Disable+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f5a:	2210      	movs	r2, #16
 8007f5c:	431a      	orrs	r2, r3
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f66:	2201      	movs	r2, #1
 8007f68:	431a      	orrs	r2, r3
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	e01c      	b.n	8007fac <ADC_Disable+0xb8>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007f72:	f7ff fb15 	bl	80075a0 <HAL_GetTick>
 8007f76:	0002      	movs	r2, r0
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	1ad3      	subs	r3, r2, r3
 8007f7c:	2b0a      	cmp	r3, #10
 8007f7e:	d90d      	bls.n	8007f9c <ADC_Disable+0xa8>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f84:	2210      	movs	r2, #16
 8007f86:	431a      	orrs	r2, r3
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f90:	2201      	movs	r2, #1
 8007f92:	431a      	orrs	r2, r3
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	e007      	b.n	8007fac <ADC_Disable+0xb8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	4013      	ands	r3, r2
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d0e3      	beq.n	8007f72 <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	0018      	movs	r0, r3
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	b004      	add	sp, #16
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	2204      	movs	r2, #4
 8007fc8:	4013      	ands	r3, r2
 8007fca:	d034      	beq.n	8008036 <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	689b      	ldr	r3, [r3, #8]
 8007fd2:	2204      	movs	r2, #4
 8007fd4:	4013      	ands	r3, r2
 8007fd6:	2b04      	cmp	r3, #4
 8007fd8:	d10d      	bne.n	8007ff6 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	2202      	movs	r2, #2
 8007fe2:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8007fe4:	d107      	bne.n	8007ff6 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	689a      	ldr	r2, [r3, #8]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2110      	movs	r1, #16
 8007ff2:	430a      	orrs	r2, r1
 8007ff4:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007ff6:	f7ff fad3 	bl	80075a0 <HAL_GetTick>
 8007ffa:	0003      	movs	r3, r0
 8007ffc:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8007ffe:	e014      	b.n	800802a <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8008000:	f7ff face 	bl	80075a0 <HAL_GetTick>
 8008004:	0002      	movs	r2, r0
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	1ad3      	subs	r3, r2, r3
 800800a:	2b0a      	cmp	r3, #10
 800800c:	d90d      	bls.n	800802a <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008012:	2210      	movs	r2, #16
 8008014:	431a      	orrs	r2, r3
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800801e:	2201      	movs	r2, #1
 8008020:	431a      	orrs	r2, r3
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8008026:	2301      	movs	r3, #1
 8008028:	e006      	b.n	8008038 <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	2204      	movs	r2, #4
 8008032:	4013      	ands	r3, r2
 8008034:	d1e4      	bne.n	8008000 <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8008036:	2300      	movs	r3, #0
}
 8008038:	0018      	movs	r0, r3
 800803a:	46bd      	mov	sp, r7
 800803c:	b004      	add	sp, #16
 800803e:	bd80      	pop	{r7, pc}

08008040 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8008048:	4b0a      	ldr	r3, [pc, #40]	; (8008074 <ADC_DelayMicroSecond+0x34>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	490a      	ldr	r1, [pc, #40]	; (8008078 <ADC_DelayMicroSecond+0x38>)
 800804e:	0018      	movs	r0, r3
 8008050:	f7f8 f862 	bl	8000118 <__udivsi3>
 8008054:	0003      	movs	r3, r0
 8008056:	001a      	movs	r2, r3
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	4353      	muls	r3, r2
 800805c:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 800805e:	e002      	b.n	8008066 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	3b01      	subs	r3, #1
 8008064:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d1f9      	bne.n	8008060 <ADC_DelayMicroSecond+0x20>
  } 
}
 800806c:	46c0      	nop			; (mov r8, r8)
 800806e:	46bd      	mov	sp, r7
 8008070:	b004      	add	sp, #16
 8008072:	bd80      	pop	{r7, pc}
 8008074:	20000020 	.word	0x20000020
 8008078:	000f4240 	.word	0x000f4240

0800807c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
 8008082:	0002      	movs	r2, r0
 8008084:	1dfb      	adds	r3, r7, #7
 8008086:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8008088:	1dfb      	adds	r3, r7, #7
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	001a      	movs	r2, r3
 800808e:	231f      	movs	r3, #31
 8008090:	401a      	ands	r2, r3
 8008092:	4b04      	ldr	r3, [pc, #16]	; (80080a4 <NVIC_EnableIRQ+0x28>)
 8008094:	2101      	movs	r1, #1
 8008096:	4091      	lsls	r1, r2
 8008098:	000a      	movs	r2, r1
 800809a:	601a      	str	r2, [r3, #0]
}
 800809c:	46c0      	nop			; (mov r8, r8)
 800809e:	46bd      	mov	sp, r7
 80080a0:	b002      	add	sp, #8
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	e000e100 	.word	0xe000e100

080080a8 <NVIC_ClearPendingIRQ>:
  \brief   Clear Pending Interrupt
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b082      	sub	sp, #8
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	0002      	movs	r2, r0
 80080b0:	1dfb      	adds	r3, r7, #7
 80080b2:	701a      	strb	r2, [r3, #0]
  NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80080b4:	1dfb      	adds	r3, r7, #7
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	001a      	movs	r2, r3
 80080ba:	231f      	movs	r3, #31
 80080bc:	4013      	ands	r3, r2
 80080be:	4905      	ldr	r1, [pc, #20]	; (80080d4 <NVIC_ClearPendingIRQ+0x2c>)
 80080c0:	2201      	movs	r2, #1
 80080c2:	409a      	lsls	r2, r3
 80080c4:	23c0      	movs	r3, #192	; 0xc0
 80080c6:	005b      	lsls	r3, r3, #1
 80080c8:	50ca      	str	r2, [r1, r3]
}
 80080ca:	46c0      	nop			; (mov r8, r8)
 80080cc:	46bd      	mov	sp, r7
 80080ce:	b002      	add	sp, #8
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	46c0      	nop			; (mov r8, r8)
 80080d4:	e000e100 	.word	0xe000e100

080080d8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80080d8:	b590      	push	{r4, r7, lr}
 80080da:	b083      	sub	sp, #12
 80080dc:	af00      	add	r7, sp, #0
 80080de:	0002      	movs	r2, r0
 80080e0:	6039      	str	r1, [r7, #0]
 80080e2:	1dfb      	adds	r3, r7, #7
 80080e4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80080e6:	1dfb      	adds	r3, r7, #7
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	2b7f      	cmp	r3, #127	; 0x7f
 80080ec:	d932      	bls.n	8008154 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80080ee:	4a2f      	ldr	r2, [pc, #188]	; (80081ac <NVIC_SetPriority+0xd4>)
 80080f0:	1dfb      	adds	r3, r7, #7
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	0019      	movs	r1, r3
 80080f6:	230f      	movs	r3, #15
 80080f8:	400b      	ands	r3, r1
 80080fa:	3b08      	subs	r3, #8
 80080fc:	089b      	lsrs	r3, r3, #2
 80080fe:	3306      	adds	r3, #6
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	18d3      	adds	r3, r2, r3
 8008104:	3304      	adds	r3, #4
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	1dfa      	adds	r2, r7, #7
 800810a:	7812      	ldrb	r2, [r2, #0]
 800810c:	0011      	movs	r1, r2
 800810e:	2203      	movs	r2, #3
 8008110:	400a      	ands	r2, r1
 8008112:	00d2      	lsls	r2, r2, #3
 8008114:	21ff      	movs	r1, #255	; 0xff
 8008116:	4091      	lsls	r1, r2
 8008118:	000a      	movs	r2, r1
 800811a:	43d2      	mvns	r2, r2
 800811c:	401a      	ands	r2, r3
 800811e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	019b      	lsls	r3, r3, #6
 8008124:	22ff      	movs	r2, #255	; 0xff
 8008126:	401a      	ands	r2, r3
 8008128:	1dfb      	adds	r3, r7, #7
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	0018      	movs	r0, r3
 800812e:	2303      	movs	r3, #3
 8008130:	4003      	ands	r3, r0
 8008132:	00db      	lsls	r3, r3, #3
 8008134:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008136:	481d      	ldr	r0, [pc, #116]	; (80081ac <NVIC_SetPriority+0xd4>)
 8008138:	1dfb      	adds	r3, r7, #7
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	001c      	movs	r4, r3
 800813e:	230f      	movs	r3, #15
 8008140:	4023      	ands	r3, r4
 8008142:	3b08      	subs	r3, #8
 8008144:	089b      	lsrs	r3, r3, #2
 8008146:	430a      	orrs	r2, r1
 8008148:	3306      	adds	r3, #6
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	18c3      	adds	r3, r0, r3
 800814e:	3304      	adds	r3, #4
 8008150:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8008152:	e027      	b.n	80081a4 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008154:	4a16      	ldr	r2, [pc, #88]	; (80081b0 <NVIC_SetPriority+0xd8>)
 8008156:	1dfb      	adds	r3, r7, #7
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	b25b      	sxtb	r3, r3
 800815c:	089b      	lsrs	r3, r3, #2
 800815e:	33c0      	adds	r3, #192	; 0xc0
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	589b      	ldr	r3, [r3, r2]
 8008164:	1dfa      	adds	r2, r7, #7
 8008166:	7812      	ldrb	r2, [r2, #0]
 8008168:	0011      	movs	r1, r2
 800816a:	2203      	movs	r2, #3
 800816c:	400a      	ands	r2, r1
 800816e:	00d2      	lsls	r2, r2, #3
 8008170:	21ff      	movs	r1, #255	; 0xff
 8008172:	4091      	lsls	r1, r2
 8008174:	000a      	movs	r2, r1
 8008176:	43d2      	mvns	r2, r2
 8008178:	401a      	ands	r2, r3
 800817a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	019b      	lsls	r3, r3, #6
 8008180:	22ff      	movs	r2, #255	; 0xff
 8008182:	401a      	ands	r2, r3
 8008184:	1dfb      	adds	r3, r7, #7
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	0018      	movs	r0, r3
 800818a:	2303      	movs	r3, #3
 800818c:	4003      	ands	r3, r0
 800818e:	00db      	lsls	r3, r3, #3
 8008190:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008192:	4807      	ldr	r0, [pc, #28]	; (80081b0 <NVIC_SetPriority+0xd8>)
 8008194:	1dfb      	adds	r3, r7, #7
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	b25b      	sxtb	r3, r3
 800819a:	089b      	lsrs	r3, r3, #2
 800819c:	430a      	orrs	r2, r1
 800819e:	33c0      	adds	r3, #192	; 0xc0
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	501a      	str	r2, [r3, r0]
}
 80081a4:	46c0      	nop			; (mov r8, r8)
 80081a6:	46bd      	mov	sp, r7
 80081a8:	b003      	add	sp, #12
 80081aa:	bd90      	pop	{r4, r7, pc}
 80081ac:	e000ed00 	.word	0xe000ed00
 80081b0:	e000e100 	.word	0xe000e100

080081b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	3b01      	subs	r3, #1
 80081c0:	4a0c      	ldr	r2, [pc, #48]	; (80081f4 <SysTick_Config+0x40>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d901      	bls.n	80081ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80081c6:	2301      	movs	r3, #1
 80081c8:	e010      	b.n	80081ec <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80081ca:	4b0b      	ldr	r3, [pc, #44]	; (80081f8 <SysTick_Config+0x44>)
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	3a01      	subs	r2, #1
 80081d0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80081d2:	2301      	movs	r3, #1
 80081d4:	425b      	negs	r3, r3
 80081d6:	2103      	movs	r1, #3
 80081d8:	0018      	movs	r0, r3
 80081da:	f7ff ff7d 	bl	80080d8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80081de:	4b06      	ldr	r3, [pc, #24]	; (80081f8 <SysTick_Config+0x44>)
 80081e0:	2200      	movs	r2, #0
 80081e2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80081e4:	4b04      	ldr	r3, [pc, #16]	; (80081f8 <SysTick_Config+0x44>)
 80081e6:	2207      	movs	r2, #7
 80081e8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80081ea:	2300      	movs	r3, #0
}
 80081ec:	0018      	movs	r0, r3
 80081ee:	46bd      	mov	sp, r7
 80081f0:	b002      	add	sp, #8
 80081f2:	bd80      	pop	{r7, pc}
 80081f4:	00ffffff 	.word	0x00ffffff
 80081f8:	e000e010 	.word	0xe000e010

080081fc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b084      	sub	sp, #16
 8008200:	af00      	add	r7, sp, #0
 8008202:	60b9      	str	r1, [r7, #8]
 8008204:	607a      	str	r2, [r7, #4]
 8008206:	210f      	movs	r1, #15
 8008208:	187b      	adds	r3, r7, r1
 800820a:	1c02      	adds	r2, r0, #0
 800820c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800820e:	68ba      	ldr	r2, [r7, #8]
 8008210:	187b      	adds	r3, r7, r1
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	b25b      	sxtb	r3, r3
 8008216:	0011      	movs	r1, r2
 8008218:	0018      	movs	r0, r3
 800821a:	f7ff ff5d 	bl	80080d8 <NVIC_SetPriority>
}
 800821e:	46c0      	nop			; (mov r8, r8)
 8008220:	46bd      	mov	sp, r7
 8008222:	b004      	add	sp, #16
 8008224:	bd80      	pop	{r7, pc}

08008226 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008226:	b580      	push	{r7, lr}
 8008228:	b082      	sub	sp, #8
 800822a:	af00      	add	r7, sp, #0
 800822c:	0002      	movs	r2, r0
 800822e:	1dfb      	adds	r3, r7, #7
 8008230:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008232:	1dfb      	adds	r3, r7, #7
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	b25b      	sxtb	r3, r3
 8008238:	0018      	movs	r0, r3
 800823a:	f7ff ff1f 	bl	800807c <NVIC_EnableIRQ>
}
 800823e:	46c0      	nop			; (mov r8, r8)
 8008240:	46bd      	mov	sp, r7
 8008242:	b002      	add	sp, #8
 8008244:	bd80      	pop	{r7, pc}

08008246 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008246:	b580      	push	{r7, lr}
 8008248:	b082      	sub	sp, #8
 800824a:	af00      	add	r7, sp, #0
 800824c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	0018      	movs	r0, r3
 8008252:	f7ff ffaf 	bl	80081b4 <SysTick_Config>
 8008256:	0003      	movs	r3, r0
}
 8008258:	0018      	movs	r0, r3
 800825a:	46bd      	mov	sp, r7
 800825c:	b002      	add	sp, #8
 800825e:	bd80      	pop	{r7, pc}

08008260 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{ 
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
 8008266:	0002      	movs	r2, r0
 8008268:	1dfb      	adds	r3, r7, #7
 800826a:	701a      	strb	r2, [r3, #0]
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800826c:	1dfb      	adds	r3, r7, #7
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	b25b      	sxtb	r3, r3
 8008272:	0018      	movs	r0, r3
 8008274:	f7ff ff18 	bl	80080a8 <NVIC_ClearPendingIRQ>
}
 8008278:	46c0      	nop			; (mov r8, r8)
 800827a:	46bd      	mov	sp, r7
 800827c:	b002      	add	sp, #8
 800827e:	bd80      	pop	{r7, pc}

08008280 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b084      	sub	sp, #16
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d101      	bne.n	8008292 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	e061      	b.n	8008356 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a32      	ldr	r2, [pc, #200]	; (8008360 <HAL_DMA_Init+0xe0>)
 8008298:	4694      	mov	ip, r2
 800829a:	4463      	add	r3, ip
 800829c:	2114      	movs	r1, #20
 800829e:	0018      	movs	r0, r3
 80082a0:	f7f7 ff3a 	bl	8000118 <__udivsi3>
 80082a4:	0003      	movs	r3, r0
 80082a6:	009a      	lsls	r2, r3, #2
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	4a2d      	ldr	r2, [pc, #180]	; (8008364 <HAL_DMA_Init+0xe4>)
 80082b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2225      	movs	r2, #37	; 0x25
 80082b6:	2102      	movs	r1, #2
 80082b8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	4a28      	ldr	r2, [pc, #160]	; (8008368 <HAL_DMA_Init+0xe8>)
 80082c6:	4013      	ands	r3, r2
 80082c8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80082d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	691b      	ldr	r3, [r3, #16]
 80082d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80082de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	699b      	ldr	r3, [r3, #24]
 80082e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80082ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6a1b      	ldr	r3, [r3, #32]
 80082f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80082f2:	68fa      	ldr	r2, [r7, #12]
 80082f4:	4313      	orrs	r3, r2
 80082f6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	68fa      	ldr	r2, [r7, #12]
 80082fe:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	689a      	ldr	r2, [r3, #8]
 8008304:	2380      	movs	r3, #128	; 0x80
 8008306:	01db      	lsls	r3, r3, #7
 8008308:	429a      	cmp	r2, r3
 800830a:	d018      	beq.n	800833e <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800830c:	4b17      	ldr	r3, [pc, #92]	; (800836c <HAL_DMA_Init+0xec>)
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008314:	211c      	movs	r1, #28
 8008316:	400b      	ands	r3, r1
 8008318:	210f      	movs	r1, #15
 800831a:	4099      	lsls	r1, r3
 800831c:	000b      	movs	r3, r1
 800831e:	43d9      	mvns	r1, r3
 8008320:	4b12      	ldr	r3, [pc, #72]	; (800836c <HAL_DMA_Init+0xec>)
 8008322:	400a      	ands	r2, r1
 8008324:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8008326:	4b11      	ldr	r3, [pc, #68]	; (800836c <HAL_DMA_Init+0xec>)
 8008328:	6819      	ldr	r1, [r3, #0]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	685a      	ldr	r2, [r3, #4]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008332:	201c      	movs	r0, #28
 8008334:	4003      	ands	r3, r0
 8008336:	409a      	lsls	r2, r3
 8008338:	4b0c      	ldr	r3, [pc, #48]	; (800836c <HAL_DMA_Init+0xec>)
 800833a:	430a      	orrs	r2, r1
 800833c:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2200      	movs	r2, #0
 8008342:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2225      	movs	r2, #37	; 0x25
 8008348:	2101      	movs	r1, #1
 800834a:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2224      	movs	r2, #36	; 0x24
 8008350:	2100      	movs	r1, #0
 8008352:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008354:	2300      	movs	r3, #0
}
 8008356:	0018      	movs	r0, r3
 8008358:	46bd      	mov	sp, r7
 800835a:	b004      	add	sp, #16
 800835c:	bd80      	pop	{r7, pc}
 800835e:	46c0      	nop			; (mov r8, r8)
 8008360:	bffdfff8 	.word	0xbffdfff8
 8008364:	40020000 	.word	0x40020000
 8008368:	ffff800f 	.word	0xffff800f
 800836c:	400200a8 	.word	0x400200a8

08008370 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b086      	sub	sp, #24
 8008374:	af00      	add	r7, sp, #0
 8008376:	60f8      	str	r0, [r7, #12]
 8008378:	60b9      	str	r1, [r7, #8]
 800837a:	607a      	str	r2, [r7, #4]
 800837c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800837e:	2317      	movs	r3, #23
 8008380:	18fb      	adds	r3, r7, r3
 8008382:	2200      	movs	r2, #0
 8008384:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2224      	movs	r2, #36	; 0x24
 800838a:	5c9b      	ldrb	r3, [r3, r2]
 800838c:	2b01      	cmp	r3, #1
 800838e:	d101      	bne.n	8008394 <HAL_DMA_Start_IT+0x24>
 8008390:	2302      	movs	r3, #2
 8008392:	e04f      	b.n	8008434 <HAL_DMA_Start_IT+0xc4>
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2224      	movs	r2, #36	; 0x24
 8008398:	2101      	movs	r1, #1
 800839a:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2225      	movs	r2, #37	; 0x25
 80083a0:	5c9b      	ldrb	r3, [r3, r2]
 80083a2:	b2db      	uxtb	r3, r3
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d13a      	bne.n	800841e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2225      	movs	r2, #37	; 0x25
 80083ac:	2102      	movs	r1, #2
 80083ae:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2200      	movs	r2, #0
 80083b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	2101      	movs	r1, #1
 80083c2:	438a      	bics	r2, r1
 80083c4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	68b9      	ldr	r1, [r7, #8]
 80083cc:	68f8      	ldr	r0, [r7, #12]
 80083ce:	f000 f92b 	bl	8008628 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d008      	beq.n	80083ec <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	210e      	movs	r1, #14
 80083e6:	430a      	orrs	r2, r1
 80083e8:	601a      	str	r2, [r3, #0]
 80083ea:	e00f      	b.n	800840c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	2104      	movs	r1, #4
 80083f8:	438a      	bics	r2, r1
 80083fa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	681a      	ldr	r2, [r3, #0]
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	210a      	movs	r1, #10
 8008408:	430a      	orrs	r2, r1
 800840a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	2101      	movs	r1, #1
 8008418:	430a      	orrs	r2, r1
 800841a:	601a      	str	r2, [r3, #0]
 800841c:	e007      	b.n	800842e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2224      	movs	r2, #36	; 0x24
 8008422:	2100      	movs	r1, #0
 8008424:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8008426:	2317      	movs	r3, #23
 8008428:	18fb      	adds	r3, r7, r3
 800842a:	2202      	movs	r2, #2
 800842c:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800842e:	2317      	movs	r3, #23
 8008430:	18fb      	adds	r3, r7, r3
 8008432:	781b      	ldrb	r3, [r3, #0]
}
 8008434:	0018      	movs	r0, r3
 8008436:	46bd      	mov	sp, r7
 8008438:	b006      	add	sp, #24
 800843a:	bd80      	pop	{r7, pc}

0800843c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008444:	230f      	movs	r3, #15
 8008446:	18fb      	adds	r3, r7, r3
 8008448:	2200      	movs	r2, #0
 800844a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2225      	movs	r2, #37	; 0x25
 8008450:	5c9b      	ldrb	r3, [r3, r2]
 8008452:	b2db      	uxtb	r3, r3
 8008454:	2b02      	cmp	r3, #2
 8008456:	d007      	beq.n	8008468 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2204      	movs	r2, #4
 800845c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800845e:	230f      	movs	r3, #15
 8008460:	18fb      	adds	r3, r7, r3
 8008462:	2201      	movs	r2, #1
 8008464:	701a      	strb	r2, [r3, #0]
 8008466:	e02a      	b.n	80084be <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	210e      	movs	r1, #14
 8008474:	438a      	bics	r2, r1
 8008476:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	681a      	ldr	r2, [r3, #0]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	2101      	movs	r1, #1
 8008484:	438a      	bics	r2, r1
 8008486:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800848c:	221c      	movs	r2, #28
 800848e:	401a      	ands	r2, r3
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008494:	2101      	movs	r1, #1
 8008496:	4091      	lsls	r1, r2
 8008498:	000a      	movs	r2, r1
 800849a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2225      	movs	r2, #37	; 0x25
 80084a0:	2101      	movs	r1, #1
 80084a2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2224      	movs	r2, #36	; 0x24
 80084a8:	2100      	movs	r1, #0
 80084aa:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d004      	beq.n	80084be <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b8:	687a      	ldr	r2, [r7, #4]
 80084ba:	0010      	movs	r0, r2
 80084bc:	4798      	blx	r3
    }
  }
  return status;
 80084be:	230f      	movs	r3, #15
 80084c0:	18fb      	adds	r3, r7, r3
 80084c2:	781b      	ldrb	r3, [r3, #0]
}
 80084c4:	0018      	movs	r0, r3
 80084c6:	46bd      	mov	sp, r7
 80084c8:	b004      	add	sp, #16
 80084ca:	bd80      	pop	{r7, pc}

080084cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084e8:	221c      	movs	r2, #28
 80084ea:	4013      	ands	r3, r2
 80084ec:	2204      	movs	r2, #4
 80084ee:	409a      	lsls	r2, r3
 80084f0:	0013      	movs	r3, r2
 80084f2:	68fa      	ldr	r2, [r7, #12]
 80084f4:	4013      	ands	r3, r2
 80084f6:	d026      	beq.n	8008546 <HAL_DMA_IRQHandler+0x7a>
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	2204      	movs	r2, #4
 80084fc:	4013      	ands	r3, r2
 80084fe:	d022      	beq.n	8008546 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	2220      	movs	r2, #32
 8008508:	4013      	ands	r3, r2
 800850a:	d107      	bne.n	800851c <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	2104      	movs	r1, #4
 8008518:	438a      	bics	r2, r1
 800851a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008520:	221c      	movs	r2, #28
 8008522:	401a      	ands	r2, r3
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008528:	2104      	movs	r1, #4
 800852a:	4091      	lsls	r1, r2
 800852c:	000a      	movs	r2, r1
 800852e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008534:	2b00      	cmp	r3, #0
 8008536:	d100      	bne.n	800853a <HAL_DMA_IRQHandler+0x6e>
 8008538:	e071      	b.n	800861e <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	0010      	movs	r0, r2
 8008542:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8008544:	e06b      	b.n	800861e <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800854a:	221c      	movs	r2, #28
 800854c:	4013      	ands	r3, r2
 800854e:	2202      	movs	r2, #2
 8008550:	409a      	lsls	r2, r3
 8008552:	0013      	movs	r3, r2
 8008554:	68fa      	ldr	r2, [r7, #12]
 8008556:	4013      	ands	r3, r2
 8008558:	d02d      	beq.n	80085b6 <HAL_DMA_IRQHandler+0xea>
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	2202      	movs	r2, #2
 800855e:	4013      	ands	r3, r2
 8008560:	d029      	beq.n	80085b6 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	2220      	movs	r2, #32
 800856a:	4013      	ands	r3, r2
 800856c:	d10b      	bne.n	8008586 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	681a      	ldr	r2, [r3, #0]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	210a      	movs	r1, #10
 800857a:	438a      	bics	r2, r1
 800857c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2225      	movs	r2, #37	; 0x25
 8008582:	2101      	movs	r1, #1
 8008584:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800858a:	221c      	movs	r2, #28
 800858c:	401a      	ands	r2, r3
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008592:	2102      	movs	r1, #2
 8008594:	4091      	lsls	r1, r2
 8008596:	000a      	movs	r2, r1
 8008598:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2224      	movs	r2, #36	; 0x24
 800859e:	2100      	movs	r1, #0
 80085a0:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d039      	beq.n	800861e <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	0010      	movs	r0, r2
 80085b2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80085b4:	e033      	b.n	800861e <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085ba:	221c      	movs	r2, #28
 80085bc:	4013      	ands	r3, r2
 80085be:	2208      	movs	r2, #8
 80085c0:	409a      	lsls	r2, r3
 80085c2:	0013      	movs	r3, r2
 80085c4:	68fa      	ldr	r2, [r7, #12]
 80085c6:	4013      	ands	r3, r2
 80085c8:	d02a      	beq.n	8008620 <HAL_DMA_IRQHandler+0x154>
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	2208      	movs	r2, #8
 80085ce:	4013      	ands	r3, r2
 80085d0:	d026      	beq.n	8008620 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	210e      	movs	r1, #14
 80085de:	438a      	bics	r2, r1
 80085e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085e6:	221c      	movs	r2, #28
 80085e8:	401a      	ands	r2, r3
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ee:	2101      	movs	r1, #1
 80085f0:	4091      	lsls	r1, r2
 80085f2:	000a      	movs	r2, r1
 80085f4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2201      	movs	r2, #1
 80085fa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2225      	movs	r2, #37	; 0x25
 8008600:	2101      	movs	r1, #1
 8008602:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2224      	movs	r2, #36	; 0x24
 8008608:	2100      	movs	r1, #0
 800860a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008610:	2b00      	cmp	r3, #0
 8008612:	d005      	beq.n	8008620 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	0010      	movs	r0, r2
 800861c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800861e:	46c0      	nop			; (mov r8, r8)
 8008620:	46c0      	nop			; (mov r8, r8)
}
 8008622:	46bd      	mov	sp, r7
 8008624:	b004      	add	sp, #16
 8008626:	bd80      	pop	{r7, pc}

08008628 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	607a      	str	r2, [r7, #4]
 8008634:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800863a:	221c      	movs	r2, #28
 800863c:	401a      	ands	r2, r3
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008642:	2101      	movs	r1, #1
 8008644:	4091      	lsls	r1, r2
 8008646:	000a      	movs	r2, r1
 8008648:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	683a      	ldr	r2, [r7, #0]
 8008650:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	2b10      	cmp	r3, #16
 8008658:	d108      	bne.n	800866c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	68ba      	ldr	r2, [r7, #8]
 8008668:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800866a:	e007      	b.n	800867c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	68ba      	ldr	r2, [r7, #8]
 8008672:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	687a      	ldr	r2, [r7, #4]
 800867a:	60da      	str	r2, [r3, #12]
}
 800867c:	46c0      	nop			; (mov r8, r8)
 800867e:	46bd      	mov	sp, r7
 8008680:	b004      	add	sp, #16
 8008682:	bd80      	pop	{r7, pc}

08008684 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b086      	sub	sp, #24
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800868e:	2300      	movs	r3, #0
 8008690:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008692:	2300      	movs	r3, #0
 8008694:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8008696:	2300      	movs	r3, #0
 8008698:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800869a:	e155      	b.n	8008948 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2101      	movs	r1, #1
 80086a2:	697a      	ldr	r2, [r7, #20]
 80086a4:	4091      	lsls	r1, r2
 80086a6:	000a      	movs	r2, r1
 80086a8:	4013      	ands	r3, r2
 80086aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d100      	bne.n	80086b4 <HAL_GPIO_Init+0x30>
 80086b2:	e146      	b.n	8008942 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d00b      	beq.n	80086d4 <HAL_GPIO_Init+0x50>
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	2b02      	cmp	r3, #2
 80086c2:	d007      	beq.n	80086d4 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80086c8:	2b11      	cmp	r3, #17
 80086ca:	d003      	beq.n	80086d4 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	2b12      	cmp	r3, #18
 80086d2:	d130      	bne.n	8008736 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	689b      	ldr	r3, [r3, #8]
 80086d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	005b      	lsls	r3, r3, #1
 80086de:	2203      	movs	r2, #3
 80086e0:	409a      	lsls	r2, r3
 80086e2:	0013      	movs	r3, r2
 80086e4:	43da      	mvns	r2, r3
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	4013      	ands	r3, r2
 80086ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	68da      	ldr	r2, [r3, #12]
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	005b      	lsls	r3, r3, #1
 80086f4:	409a      	lsls	r2, r3
 80086f6:	0013      	movs	r3, r2
 80086f8:	693a      	ldr	r2, [r7, #16]
 80086fa:	4313      	orrs	r3, r2
 80086fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	693a      	ldr	r2, [r7, #16]
 8008702:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800870a:	2201      	movs	r2, #1
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	409a      	lsls	r2, r3
 8008710:	0013      	movs	r3, r2
 8008712:	43da      	mvns	r2, r3
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	4013      	ands	r3, r2
 8008718:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	091b      	lsrs	r3, r3, #4
 8008720:	2201      	movs	r2, #1
 8008722:	401a      	ands	r2, r3
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	409a      	lsls	r2, r3
 8008728:	0013      	movs	r3, r2
 800872a:	693a      	ldr	r2, [r7, #16]
 800872c:	4313      	orrs	r3, r2
 800872e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	693a      	ldr	r2, [r7, #16]
 8008734:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	68db      	ldr	r3, [r3, #12]
 800873a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	005b      	lsls	r3, r3, #1
 8008740:	2203      	movs	r2, #3
 8008742:	409a      	lsls	r2, r3
 8008744:	0013      	movs	r3, r2
 8008746:	43da      	mvns	r2, r3
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	4013      	ands	r3, r2
 800874c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	689a      	ldr	r2, [r3, #8]
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	005b      	lsls	r3, r3, #1
 8008756:	409a      	lsls	r2, r3
 8008758:	0013      	movs	r3, r2
 800875a:	693a      	ldr	r2, [r7, #16]
 800875c:	4313      	orrs	r3, r2
 800875e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	693a      	ldr	r2, [r7, #16]
 8008764:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	2b02      	cmp	r3, #2
 800876c:	d003      	beq.n	8008776 <HAL_GPIO_Init+0xf2>
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	2b12      	cmp	r3, #18
 8008774:	d123      	bne.n	80087be <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	08da      	lsrs	r2, r3, #3
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	3208      	adds	r2, #8
 800877e:	0092      	lsls	r2, r2, #2
 8008780:	58d3      	ldr	r3, [r2, r3]
 8008782:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U));
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	2207      	movs	r2, #7
 8008788:	4013      	ands	r3, r2
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	220f      	movs	r2, #15
 800878e:	409a      	lsls	r2, r3
 8008790:	0013      	movs	r3, r2
 8008792:	43da      	mvns	r2, r3
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	4013      	ands	r3, r2
 8008798:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	691a      	ldr	r2, [r3, #16]
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	2107      	movs	r1, #7
 80087a2:	400b      	ands	r3, r1
 80087a4:	009b      	lsls	r3, r3, #2
 80087a6:	409a      	lsls	r2, r3
 80087a8:	0013      	movs	r3, r2
 80087aa:	693a      	ldr	r2, [r7, #16]
 80087ac:	4313      	orrs	r3, r2
 80087ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	08da      	lsrs	r2, r3, #3
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	3208      	adds	r2, #8
 80087b8:	0092      	lsls	r2, r2, #2
 80087ba:	6939      	ldr	r1, [r7, #16]
 80087bc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	005b      	lsls	r3, r3, #1
 80087c8:	2203      	movs	r2, #3
 80087ca:	409a      	lsls	r2, r3
 80087cc:	0013      	movs	r3, r2
 80087ce:	43da      	mvns	r2, r3
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	4013      	ands	r3, r2
 80087d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	2203      	movs	r2, #3
 80087dc:	401a      	ands	r2, r3
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	005b      	lsls	r3, r3, #1
 80087e2:	409a      	lsls	r2, r3
 80087e4:	0013      	movs	r3, r2
 80087e6:	693a      	ldr	r2, [r7, #16]
 80087e8:	4313      	orrs	r3, r2
 80087ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	693a      	ldr	r2, [r7, #16]
 80087f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	685a      	ldr	r2, [r3, #4]
 80087f6:	2380      	movs	r3, #128	; 0x80
 80087f8:	055b      	lsls	r3, r3, #21
 80087fa:	4013      	ands	r3, r2
 80087fc:	d100      	bne.n	8008800 <HAL_GPIO_Init+0x17c>
 80087fe:	e0a0      	b.n	8008942 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008800:	4b57      	ldr	r3, [pc, #348]	; (8008960 <HAL_GPIO_Init+0x2dc>)
 8008802:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008804:	4b56      	ldr	r3, [pc, #344]	; (8008960 <HAL_GPIO_Init+0x2dc>)
 8008806:	2101      	movs	r1, #1
 8008808:	430a      	orrs	r2, r1
 800880a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800880c:	4a55      	ldr	r2, [pc, #340]	; (8008964 <HAL_GPIO_Init+0x2e0>)
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	089b      	lsrs	r3, r3, #2
 8008812:	3302      	adds	r3, #2
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	589b      	ldr	r3, [r3, r2]
 8008818:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	2203      	movs	r2, #3
 800881e:	4013      	ands	r3, r2
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	220f      	movs	r2, #15
 8008824:	409a      	lsls	r2, r3
 8008826:	0013      	movs	r3, r2
 8008828:	43da      	mvns	r2, r3
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	4013      	ands	r3, r2
 800882e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	23a0      	movs	r3, #160	; 0xa0
 8008834:	05db      	lsls	r3, r3, #23
 8008836:	429a      	cmp	r2, r3
 8008838:	d01f      	beq.n	800887a <HAL_GPIO_Init+0x1f6>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	4a4a      	ldr	r2, [pc, #296]	; (8008968 <HAL_GPIO_Init+0x2e4>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d019      	beq.n	8008876 <HAL_GPIO_Init+0x1f2>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	4a49      	ldr	r2, [pc, #292]	; (800896c <HAL_GPIO_Init+0x2e8>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d013      	beq.n	8008872 <HAL_GPIO_Init+0x1ee>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	4a48      	ldr	r2, [pc, #288]	; (8008970 <HAL_GPIO_Init+0x2ec>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d00d      	beq.n	800886e <HAL_GPIO_Init+0x1ea>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	4a47      	ldr	r2, [pc, #284]	; (8008974 <HAL_GPIO_Init+0x2f0>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d007      	beq.n	800886a <HAL_GPIO_Init+0x1e6>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	4a46      	ldr	r2, [pc, #280]	; (8008978 <HAL_GPIO_Init+0x2f4>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d101      	bne.n	8008866 <HAL_GPIO_Init+0x1e2>
 8008862:	2305      	movs	r3, #5
 8008864:	e00a      	b.n	800887c <HAL_GPIO_Init+0x1f8>
 8008866:	2306      	movs	r3, #6
 8008868:	e008      	b.n	800887c <HAL_GPIO_Init+0x1f8>
 800886a:	2304      	movs	r3, #4
 800886c:	e006      	b.n	800887c <HAL_GPIO_Init+0x1f8>
 800886e:	2303      	movs	r3, #3
 8008870:	e004      	b.n	800887c <HAL_GPIO_Init+0x1f8>
 8008872:	2302      	movs	r3, #2
 8008874:	e002      	b.n	800887c <HAL_GPIO_Init+0x1f8>
 8008876:	2301      	movs	r3, #1
 8008878:	e000      	b.n	800887c <HAL_GPIO_Init+0x1f8>
 800887a:	2300      	movs	r3, #0
 800887c:	697a      	ldr	r2, [r7, #20]
 800887e:	2103      	movs	r1, #3
 8008880:	400a      	ands	r2, r1
 8008882:	0092      	lsls	r2, r2, #2
 8008884:	4093      	lsls	r3, r2
 8008886:	693a      	ldr	r2, [r7, #16]
 8008888:	4313      	orrs	r3, r2
 800888a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800888c:	4935      	ldr	r1, [pc, #212]	; (8008964 <HAL_GPIO_Init+0x2e0>)
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	089b      	lsrs	r3, r3, #2
 8008892:	3302      	adds	r3, #2
 8008894:	009b      	lsls	r3, r3, #2
 8008896:	693a      	ldr	r2, [r7, #16]
 8008898:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800889a:	4b38      	ldr	r3, [pc, #224]	; (800897c <HAL_GPIO_Init+0x2f8>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	43da      	mvns	r2, r3
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	4013      	ands	r3, r2
 80088a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	685a      	ldr	r2, [r3, #4]
 80088ae:	2380      	movs	r3, #128	; 0x80
 80088b0:	025b      	lsls	r3, r3, #9
 80088b2:	4013      	ands	r3, r2
 80088b4:	d003      	beq.n	80088be <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80088b6:	693a      	ldr	r2, [r7, #16]
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	4313      	orrs	r3, r2
 80088bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80088be:	4b2f      	ldr	r3, [pc, #188]	; (800897c <HAL_GPIO_Init+0x2f8>)
 80088c0:	693a      	ldr	r2, [r7, #16]
 80088c2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80088c4:	4b2d      	ldr	r3, [pc, #180]	; (800897c <HAL_GPIO_Init+0x2f8>)
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	43da      	mvns	r2, r3
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	4013      	ands	r3, r2
 80088d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	685a      	ldr	r2, [r3, #4]
 80088d8:	2380      	movs	r3, #128	; 0x80
 80088da:	029b      	lsls	r3, r3, #10
 80088dc:	4013      	ands	r3, r2
 80088de:	d003      	beq.n	80088e8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80088e0:	693a      	ldr	r2, [r7, #16]
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	4313      	orrs	r3, r2
 80088e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80088e8:	4b24      	ldr	r3, [pc, #144]	; (800897c <HAL_GPIO_Init+0x2f8>)
 80088ea:	693a      	ldr	r2, [r7, #16]
 80088ec:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80088ee:	4b23      	ldr	r3, [pc, #140]	; (800897c <HAL_GPIO_Init+0x2f8>)
 80088f0:	689b      	ldr	r3, [r3, #8]
 80088f2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	43da      	mvns	r2, r3
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	4013      	ands	r3, r2
 80088fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	685a      	ldr	r2, [r3, #4]
 8008902:	2380      	movs	r3, #128	; 0x80
 8008904:	035b      	lsls	r3, r3, #13
 8008906:	4013      	ands	r3, r2
 8008908:	d003      	beq.n	8008912 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800890a:	693a      	ldr	r2, [r7, #16]
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	4313      	orrs	r3, r2
 8008910:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8008912:	4b1a      	ldr	r3, [pc, #104]	; (800897c <HAL_GPIO_Init+0x2f8>)
 8008914:	693a      	ldr	r2, [r7, #16]
 8008916:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8008918:	4b18      	ldr	r3, [pc, #96]	; (800897c <HAL_GPIO_Init+0x2f8>)
 800891a:	68db      	ldr	r3, [r3, #12]
 800891c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	43da      	mvns	r2, r3
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	4013      	ands	r3, r2
 8008926:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	685a      	ldr	r2, [r3, #4]
 800892c:	2380      	movs	r3, #128	; 0x80
 800892e:	039b      	lsls	r3, r3, #14
 8008930:	4013      	ands	r3, r2
 8008932:	d003      	beq.n	800893c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8008934:	693a      	ldr	r2, [r7, #16]
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	4313      	orrs	r3, r2
 800893a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800893c:	4b0f      	ldr	r3, [pc, #60]	; (800897c <HAL_GPIO_Init+0x2f8>)
 800893e:	693a      	ldr	r2, [r7, #16]
 8008940:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	3301      	adds	r3, #1
 8008946:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	681a      	ldr	r2, [r3, #0]
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	40da      	lsrs	r2, r3
 8008950:	1e13      	subs	r3, r2, #0
 8008952:	d000      	beq.n	8008956 <HAL_GPIO_Init+0x2d2>
 8008954:	e6a2      	b.n	800869c <HAL_GPIO_Init+0x18>
  }
}
 8008956:	46c0      	nop			; (mov r8, r8)
 8008958:	46bd      	mov	sp, r7
 800895a:	b006      	add	sp, #24
 800895c:	bd80      	pop	{r7, pc}
 800895e:	46c0      	nop			; (mov r8, r8)
 8008960:	40021000 	.word	0x40021000
 8008964:	40010000 	.word	0x40010000
 8008968:	50000400 	.word	0x50000400
 800896c:	50000800 	.word	0x50000800
 8008970:	50000c00 	.word	0x50000c00
 8008974:	50001000 	.word	0x50001000
 8008978:	50001c00 	.word	0x50001c00
 800897c:	40010400 	.word	0x40010400

08008980 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b082      	sub	sp, #8
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
 8008988:	0008      	movs	r0, r1
 800898a:	0011      	movs	r1, r2
 800898c:	1cbb      	adds	r3, r7, #2
 800898e:	1c02      	adds	r2, r0, #0
 8008990:	801a      	strh	r2, [r3, #0]
 8008992:	1c7b      	adds	r3, r7, #1
 8008994:	1c0a      	adds	r2, r1, #0
 8008996:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008998:	1c7b      	adds	r3, r7, #1
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d004      	beq.n	80089aa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80089a0:	1cbb      	adds	r3, r7, #2
 80089a2:	881a      	ldrh	r2, [r3, #0]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80089a8:	e003      	b.n	80089b2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80089aa:	1cbb      	adds	r3, r7, #2
 80089ac:	881a      	ldrh	r2, [r3, #0]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80089b2:	46c0      	nop			; (mov r8, r8)
 80089b4:	46bd      	mov	sp, r7
 80089b6:	b002      	add	sp, #8
 80089b8:	bd80      	pop	{r7, pc}

080089ba <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b084      	sub	sp, #16
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
 80089c2:	000a      	movs	r2, r1
 80089c4:	1cbb      	adds	r3, r7, #2
 80089c6:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	695b      	ldr	r3, [r3, #20]
 80089cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80089ce:	1cbb      	adds	r3, r7, #2
 80089d0:	881b      	ldrh	r3, [r3, #0]
 80089d2:	68fa      	ldr	r2, [r7, #12]
 80089d4:	4013      	ands	r3, r2
 80089d6:	041a      	lsls	r2, r3, #16
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	43db      	mvns	r3, r3
 80089dc:	1cb9      	adds	r1, r7, #2
 80089de:	8809      	ldrh	r1, [r1, #0]
 80089e0:	400b      	ands	r3, r1
 80089e2:	431a      	orrs	r2, r3
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	619a      	str	r2, [r3, #24]
}
 80089e8:	46c0      	nop			; (mov r8, r8)
 80089ea:	46bd      	mov	sp, r7
 80089ec:	b004      	add	sp, #16
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b082      	sub	sp, #8
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	0002      	movs	r2, r0
 80089f8:	1dbb      	adds	r3, r7, #6
 80089fa:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80089fc:	4b09      	ldr	r3, [pc, #36]	; (8008a24 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80089fe:	695b      	ldr	r3, [r3, #20]
 8008a00:	1dba      	adds	r2, r7, #6
 8008a02:	8812      	ldrh	r2, [r2, #0]
 8008a04:	4013      	ands	r3, r2
 8008a06:	d008      	beq.n	8008a1a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008a08:	4b06      	ldr	r3, [pc, #24]	; (8008a24 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8008a0a:	1dba      	adds	r2, r7, #6
 8008a0c:	8812      	ldrh	r2, [r2, #0]
 8008a0e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008a10:	1dbb      	adds	r3, r7, #6
 8008a12:	881b      	ldrh	r3, [r3, #0]
 8008a14:	0018      	movs	r0, r3
 8008a16:	f7fc fb13 	bl	8005040 <HAL_GPIO_EXTI_Callback>
  }
}
 8008a1a:	46c0      	nop			; (mov r8, r8)
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	b002      	add	sp, #8
 8008a20:	bd80      	pop	{r7, pc}
 8008a22:	46c0      	nop			; (mov r8, r8)
 8008a24:	40010400 	.word	0x40010400

08008a28 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a2a:	b08b      	sub	sp, #44	; 0x2c
 8008a2c:	af06      	add	r7, sp, #24
 8008a2e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d101      	bne.n	8008a3a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008a36:	2301      	movs	r3, #1
 8008a38:	e100      	b.n	8008c3c <HAL_PCD_Init+0x214>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	4a81      	ldr	r2, [pc, #516]	; (8008c44 <HAL_PCD_Init+0x21c>)
 8008a3e:	5c9b      	ldrb	r3, [r3, r2]
 8008a40:	b2db      	uxtb	r3, r3
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d108      	bne.n	8008a58 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	23aa      	movs	r3, #170	; 0xaa
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	2100      	movs	r1, #0
 8008a4e:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	0018      	movs	r0, r3
 8008a54:	f7fb ff36 	bl	80048c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	4a7a      	ldr	r2, [pc, #488]	; (8008c44 <HAL_PCD_Init+0x21c>)
 8008a5c:	2103      	movs	r1, #3
 8008a5e:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	0018      	movs	r0, r3
 8008a66:	f003 faf9 	bl	800c05c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008a6a:	230f      	movs	r3, #15
 8008a6c:	18fb      	adds	r3, r7, r3
 8008a6e:	2200      	movs	r2, #0
 8008a70:	701a      	strb	r2, [r3, #0]
 8008a72:	e058      	b.n	8008b26 <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008a74:	200f      	movs	r0, #15
 8008a76:	183b      	adds	r3, r7, r0
 8008a78:	781b      	ldrb	r3, [r3, #0]
 8008a7a:	6879      	ldr	r1, [r7, #4]
 8008a7c:	1c5a      	adds	r2, r3, #1
 8008a7e:	0013      	movs	r3, r2
 8008a80:	009b      	lsls	r3, r3, #2
 8008a82:	189b      	adds	r3, r3, r2
 8008a84:	00db      	lsls	r3, r3, #3
 8008a86:	18cb      	adds	r3, r1, r3
 8008a88:	3301      	adds	r3, #1
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008a8e:	183b      	adds	r3, r7, r0
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	6879      	ldr	r1, [r7, #4]
 8008a94:	1c5a      	adds	r2, r3, #1
 8008a96:	0013      	movs	r3, r2
 8008a98:	009b      	lsls	r3, r3, #2
 8008a9a:	189b      	adds	r3, r3, r2
 8008a9c:	00db      	lsls	r3, r3, #3
 8008a9e:	183a      	adds	r2, r7, r0
 8008aa0:	7812      	ldrb	r2, [r2, #0]
 8008aa2:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008aa4:	183b      	adds	r3, r7, r0
 8008aa6:	781a      	ldrb	r2, [r3, #0]
 8008aa8:	0004      	movs	r4, r0
 8008aaa:	183b      	adds	r3, r7, r0
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	b298      	uxth	r0, r3
 8008ab0:	6879      	ldr	r1, [r7, #4]
 8008ab2:	0013      	movs	r3, r2
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	189b      	adds	r3, r3, r2
 8008ab8:	00db      	lsls	r3, r3, #3
 8008aba:	18cb      	adds	r3, r1, r3
 8008abc:	3336      	adds	r3, #54	; 0x36
 8008abe:	1c02      	adds	r2, r0, #0
 8008ac0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008ac2:	193b      	adds	r3, r7, r4
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	6879      	ldr	r1, [r7, #4]
 8008ac8:	1c5a      	adds	r2, r3, #1
 8008aca:	0013      	movs	r3, r2
 8008acc:	009b      	lsls	r3, r3, #2
 8008ace:	189b      	adds	r3, r3, r2
 8008ad0:	00db      	lsls	r3, r3, #3
 8008ad2:	18cb      	adds	r3, r1, r3
 8008ad4:	3303      	adds	r3, #3
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008ada:	193b      	adds	r3, r7, r4
 8008adc:	781a      	ldrb	r2, [r3, #0]
 8008ade:	6879      	ldr	r1, [r7, #4]
 8008ae0:	0013      	movs	r3, r2
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	189b      	adds	r3, r3, r2
 8008ae6:	00db      	lsls	r3, r3, #3
 8008ae8:	18cb      	adds	r3, r1, r3
 8008aea:	3338      	adds	r3, #56	; 0x38
 8008aec:	2200      	movs	r2, #0
 8008aee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008af0:	193b      	adds	r3, r7, r4
 8008af2:	781a      	ldrb	r2, [r3, #0]
 8008af4:	6879      	ldr	r1, [r7, #4]
 8008af6:	0013      	movs	r3, r2
 8008af8:	009b      	lsls	r3, r3, #2
 8008afa:	189b      	adds	r3, r3, r2
 8008afc:	00db      	lsls	r3, r3, #3
 8008afe:	18cb      	adds	r3, r1, r3
 8008b00:	333c      	adds	r3, #60	; 0x3c
 8008b02:	2200      	movs	r2, #0
 8008b04:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008b06:	193b      	adds	r3, r7, r4
 8008b08:	781a      	ldrb	r2, [r3, #0]
 8008b0a:	6879      	ldr	r1, [r7, #4]
 8008b0c:	0013      	movs	r3, r2
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	189b      	adds	r3, r3, r2
 8008b12:	00db      	lsls	r3, r3, #3
 8008b14:	18cb      	adds	r3, r1, r3
 8008b16:	3340      	adds	r3, #64	; 0x40
 8008b18:	2200      	movs	r2, #0
 8008b1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008b1c:	193b      	adds	r3, r7, r4
 8008b1e:	781a      	ldrb	r2, [r3, #0]
 8008b20:	193b      	adds	r3, r7, r4
 8008b22:	3201      	adds	r2, #1
 8008b24:	701a      	strb	r2, [r3, #0]
 8008b26:	230f      	movs	r3, #15
 8008b28:	18fb      	adds	r3, r7, r3
 8008b2a:	781a      	ldrb	r2, [r3, #0]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d39f      	bcc.n	8008a74 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008b34:	230f      	movs	r3, #15
 8008b36:	18fb      	adds	r3, r7, r3
 8008b38:	2200      	movs	r2, #0
 8008b3a:	701a      	strb	r2, [r3, #0]
 8008b3c:	e056      	b.n	8008bec <HAL_PCD_Init+0x1c4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008b3e:	240f      	movs	r4, #15
 8008b40:	193b      	adds	r3, r7, r4
 8008b42:	781a      	ldrb	r2, [r3, #0]
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	236a      	movs	r3, #106	; 0x6a
 8008b48:	33ff      	adds	r3, #255	; 0xff
 8008b4a:	0019      	movs	r1, r3
 8008b4c:	0013      	movs	r3, r2
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	189b      	adds	r3, r3, r2
 8008b52:	00db      	lsls	r3, r3, #3
 8008b54:	18c3      	adds	r3, r0, r3
 8008b56:	185b      	adds	r3, r3, r1
 8008b58:	2200      	movs	r2, #0
 8008b5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008b5c:	193b      	adds	r3, r7, r4
 8008b5e:	781a      	ldrb	r2, [r3, #0]
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	23b4      	movs	r3, #180	; 0xb4
 8008b64:	0059      	lsls	r1, r3, #1
 8008b66:	0013      	movs	r3, r2
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	189b      	adds	r3, r3, r2
 8008b6c:	00db      	lsls	r3, r3, #3
 8008b6e:	18c3      	adds	r3, r0, r3
 8008b70:	185b      	adds	r3, r3, r1
 8008b72:	193a      	adds	r2, r7, r4
 8008b74:	7812      	ldrb	r2, [r2, #0]
 8008b76:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008b78:	193b      	adds	r3, r7, r4
 8008b7a:	781a      	ldrb	r2, [r3, #0]
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	236c      	movs	r3, #108	; 0x6c
 8008b80:	33ff      	adds	r3, #255	; 0xff
 8008b82:	0019      	movs	r1, r3
 8008b84:	0013      	movs	r3, r2
 8008b86:	009b      	lsls	r3, r3, #2
 8008b88:	189b      	adds	r3, r3, r2
 8008b8a:	00db      	lsls	r3, r3, #3
 8008b8c:	18c3      	adds	r3, r0, r3
 8008b8e:	185b      	adds	r3, r3, r1
 8008b90:	2200      	movs	r2, #0
 8008b92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008b94:	193b      	adds	r3, r7, r4
 8008b96:	781a      	ldrb	r2, [r3, #0]
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	23bc      	movs	r3, #188	; 0xbc
 8008b9c:	0059      	lsls	r1, r3, #1
 8008b9e:	0013      	movs	r3, r2
 8008ba0:	009b      	lsls	r3, r3, #2
 8008ba2:	189b      	adds	r3, r3, r2
 8008ba4:	00db      	lsls	r3, r3, #3
 8008ba6:	18c3      	adds	r3, r0, r3
 8008ba8:	185b      	adds	r3, r3, r1
 8008baa:	2200      	movs	r2, #0
 8008bac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008bae:	193b      	adds	r3, r7, r4
 8008bb0:	781a      	ldrb	r2, [r3, #0]
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	23be      	movs	r3, #190	; 0xbe
 8008bb6:	0059      	lsls	r1, r3, #1
 8008bb8:	0013      	movs	r3, r2
 8008bba:	009b      	lsls	r3, r3, #2
 8008bbc:	189b      	adds	r3, r3, r2
 8008bbe:	00db      	lsls	r3, r3, #3
 8008bc0:	18c3      	adds	r3, r0, r3
 8008bc2:	185b      	adds	r3, r3, r1
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008bc8:	193b      	adds	r3, r7, r4
 8008bca:	781a      	ldrb	r2, [r3, #0]
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	23c0      	movs	r3, #192	; 0xc0
 8008bd0:	0059      	lsls	r1, r3, #1
 8008bd2:	0013      	movs	r3, r2
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	189b      	adds	r3, r3, r2
 8008bd8:	00db      	lsls	r3, r3, #3
 8008bda:	18c3      	adds	r3, r0, r3
 8008bdc:	185b      	adds	r3, r3, r1
 8008bde:	2200      	movs	r2, #0
 8008be0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008be2:	193b      	adds	r3, r7, r4
 8008be4:	781a      	ldrb	r2, [r3, #0]
 8008be6:	193b      	adds	r3, r7, r4
 8008be8:	3201      	adds	r2, #1
 8008bea:	701a      	strb	r2, [r3, #0]
 8008bec:	230f      	movs	r3, #15
 8008bee:	18fb      	adds	r3, r7, r3
 8008bf0:	781a      	ldrb	r2, [r3, #0]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d3a1      	bcc.n	8008b3e <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6818      	ldr	r0, [r3, #0]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	466a      	mov	r2, sp
 8008c02:	0011      	movs	r1, r2
 8008c04:	001a      	movs	r2, r3
 8008c06:	3210      	adds	r2, #16
 8008c08:	ca70      	ldmia	r2!, {r4, r5, r6}
 8008c0a:	c170      	stmia	r1!, {r4, r5, r6}
 8008c0c:	ca30      	ldmia	r2!, {r4, r5}
 8008c0e:	c130      	stmia	r1!, {r4, r5}
 8008c10:	6859      	ldr	r1, [r3, #4]
 8008c12:	689a      	ldr	r2, [r3, #8]
 8008c14:	68db      	ldr	r3, [r3, #12]
 8008c16:	f003 fa3b 	bl	800c090 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2224      	movs	r2, #36	; 0x24
 8008c1e:	2100      	movs	r1, #0
 8008c20:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	4a07      	ldr	r2, [pc, #28]	; (8008c44 <HAL_PCD_Init+0x21c>)
 8008c26:	2101      	movs	r1, #1
 8008c28:	5499      	strb	r1, [r3, r2]
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	69db      	ldr	r3, [r3, #28]
 8008c2e:	2b01      	cmp	r3, #1
 8008c30:	d103      	bne.n	8008c3a <HAL_PCD_Init+0x212>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	0018      	movs	r0, r3
 8008c36:	f000 f807 	bl	8008c48 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8008c3a:	2300      	movs	r3, #0
}
 8008c3c:	0018      	movs	r0, r3
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	b005      	add	sp, #20
 8008c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c44:	000002a9 	.word	0x000002a9

08008c48 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	23ba      	movs	r3, #186	; 0xba
 8008c5a:	009b      	lsls	r3, r3, #2
 8008c5c:	2101      	movs	r1, #1
 8008c5e:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	23b8      	movs	r3, #184	; 0xb8
 8008c64:	009b      	lsls	r3, r3, #2
 8008c66:	2100      	movs	r1, #0
 8008c68:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2254      	movs	r2, #84	; 0x54
 8008c6e:	5a9b      	ldrh	r3, [r3, r2]
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	2201      	movs	r2, #1
 8008c74:	4313      	orrs	r3, r2
 8008c76:	b299      	uxth	r1, r3
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2254      	movs	r2, #84	; 0x54
 8008c7c:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2254      	movs	r2, #84	; 0x54
 8008c82:	5a9b      	ldrh	r3, [r3, r2]
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	2202      	movs	r2, #2
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	b299      	uxth	r1, r3
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2254      	movs	r2, #84	; 0x54
 8008c90:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8008c92:	2300      	movs	r3, #0
}
 8008c94:	0018      	movs	r0, r3
 8008c96:	46bd      	mov	sp, r7
 8008c98:	b004      	add	sp, #16
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8008ca0:	4b04      	ldr	r3, [pc, #16]	; (8008cb4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	4b03      	ldr	r3, [pc, #12]	; (8008cb4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8008ca6:	2180      	movs	r1, #128	; 0x80
 8008ca8:	0049      	lsls	r1, r1, #1
 8008caa:	430a      	orrs	r2, r1
 8008cac:	601a      	str	r2, [r3, #0]
}
 8008cae:	46c0      	nop			; (mov r8, r8)
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}
 8008cb4:	40007000 	.word	0x40007000

08008cb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008cb8:	b5b0      	push	{r4, r5, r7, lr}
 8008cba:	b08a      	sub	sp, #40	; 0x28
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d102      	bne.n	8008ccc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	f000 fbbc 	bl	8009444 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ccc:	4bc8      	ldr	r3, [pc, #800]	; (8008ff0 <HAL_RCC_OscConfig+0x338>)
 8008cce:	68db      	ldr	r3, [r3, #12]
 8008cd0:	220c      	movs	r2, #12
 8008cd2:	4013      	ands	r3, r2
 8008cd4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008cd6:	4bc6      	ldr	r3, [pc, #792]	; (8008ff0 <HAL_RCC_OscConfig+0x338>)
 8008cd8:	68da      	ldr	r2, [r3, #12]
 8008cda:	2380      	movs	r3, #128	; 0x80
 8008cdc:	025b      	lsls	r3, r3, #9
 8008cde:	4013      	ands	r3, r2
 8008ce0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	4013      	ands	r3, r2
 8008cea:	d100      	bne.n	8008cee <HAL_RCC_OscConfig+0x36>
 8008cec:	e07e      	b.n	8008dec <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008cee:	69fb      	ldr	r3, [r7, #28]
 8008cf0:	2b08      	cmp	r3, #8
 8008cf2:	d007      	beq.n	8008d04 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008cf4:	69fb      	ldr	r3, [r7, #28]
 8008cf6:	2b0c      	cmp	r3, #12
 8008cf8:	d112      	bne.n	8008d20 <HAL_RCC_OscConfig+0x68>
 8008cfa:	69ba      	ldr	r2, [r7, #24]
 8008cfc:	2380      	movs	r3, #128	; 0x80
 8008cfe:	025b      	lsls	r3, r3, #9
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d10d      	bne.n	8008d20 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d04:	4bba      	ldr	r3, [pc, #744]	; (8008ff0 <HAL_RCC_OscConfig+0x338>)
 8008d06:	681a      	ldr	r2, [r3, #0]
 8008d08:	2380      	movs	r3, #128	; 0x80
 8008d0a:	029b      	lsls	r3, r3, #10
 8008d0c:	4013      	ands	r3, r2
 8008d0e:	d100      	bne.n	8008d12 <HAL_RCC_OscConfig+0x5a>
 8008d10:	e06b      	b.n	8008dea <HAL_RCC_OscConfig+0x132>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d167      	bne.n	8008dea <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	f000 fb92 	bl	8009444 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	685a      	ldr	r2, [r3, #4]
 8008d24:	2380      	movs	r3, #128	; 0x80
 8008d26:	025b      	lsls	r3, r3, #9
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d107      	bne.n	8008d3c <HAL_RCC_OscConfig+0x84>
 8008d2c:	4bb0      	ldr	r3, [pc, #704]	; (8008ff0 <HAL_RCC_OscConfig+0x338>)
 8008d2e:	681a      	ldr	r2, [r3, #0]
 8008d30:	4baf      	ldr	r3, [pc, #700]	; (8008ff0 <HAL_RCC_OscConfig+0x338>)
 8008d32:	2180      	movs	r1, #128	; 0x80
 8008d34:	0249      	lsls	r1, r1, #9
 8008d36:	430a      	orrs	r2, r1
 8008d38:	601a      	str	r2, [r3, #0]
 8008d3a:	e027      	b.n	8008d8c <HAL_RCC_OscConfig+0xd4>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	685a      	ldr	r2, [r3, #4]
 8008d40:	23a0      	movs	r3, #160	; 0xa0
 8008d42:	02db      	lsls	r3, r3, #11
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d10e      	bne.n	8008d66 <HAL_RCC_OscConfig+0xae>
 8008d48:	4ba9      	ldr	r3, [pc, #676]	; (8008ff0 <HAL_RCC_OscConfig+0x338>)
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	4ba8      	ldr	r3, [pc, #672]	; (8008ff0 <HAL_RCC_OscConfig+0x338>)
 8008d4e:	2180      	movs	r1, #128	; 0x80
 8008d50:	02c9      	lsls	r1, r1, #11
 8008d52:	430a      	orrs	r2, r1
 8008d54:	601a      	str	r2, [r3, #0]
 8008d56:	4ba6      	ldr	r3, [pc, #664]	; (8008ff0 <HAL_RCC_OscConfig+0x338>)
 8008d58:	681a      	ldr	r2, [r3, #0]
 8008d5a:	4ba5      	ldr	r3, [pc, #660]	; (8008ff0 <HAL_RCC_OscConfig+0x338>)
 8008d5c:	2180      	movs	r1, #128	; 0x80
 8008d5e:	0249      	lsls	r1, r1, #9
 8008d60:	430a      	orrs	r2, r1
 8008d62:	601a      	str	r2, [r3, #0]
 8008d64:	e012      	b.n	8008d8c <HAL_RCC_OscConfig+0xd4>
 8008d66:	4ba2      	ldr	r3, [pc, #648]	; (8008ff0 <HAL_RCC_OscConfig+0x338>)
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	4ba1      	ldr	r3, [pc, #644]	; (8008ff0 <HAL_RCC_OscConfig+0x338>)
 8008d6c:	49a1      	ldr	r1, [pc, #644]	; (8008ff4 <HAL_RCC_OscConfig+0x33c>)
 8008d6e:	400a      	ands	r2, r1
 8008d70:	601a      	str	r2, [r3, #0]
 8008d72:	4b9f      	ldr	r3, [pc, #636]	; (8008ff0 <HAL_RCC_OscConfig+0x338>)
 8008d74:	681a      	ldr	r2, [r3, #0]
 8008d76:	2380      	movs	r3, #128	; 0x80
 8008d78:	025b      	lsls	r3, r3, #9
 8008d7a:	4013      	ands	r3, r2
 8008d7c:	60fb      	str	r3, [r7, #12]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	4b9b      	ldr	r3, [pc, #620]	; (8008ff0 <HAL_RCC_OscConfig+0x338>)
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	4b9a      	ldr	r3, [pc, #616]	; (8008ff0 <HAL_RCC_OscConfig+0x338>)
 8008d86:	499c      	ldr	r1, [pc, #624]	; (8008ff8 <HAL_RCC_OscConfig+0x340>)
 8008d88:	400a      	ands	r2, r1
 8008d8a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d015      	beq.n	8008dc0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d94:	f7fe fc04 	bl	80075a0 <HAL_GetTick>
 8008d98:	0003      	movs	r3, r0
 8008d9a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008d9c:	e009      	b.n	8008db2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008d9e:	f7fe fbff 	bl	80075a0 <HAL_GetTick>
 8008da2:	0002      	movs	r2, r0
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	1ad3      	subs	r3, r2, r3
 8008da8:	2b64      	cmp	r3, #100	; 0x64
 8008daa:	d902      	bls.n	8008db2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008dac:	2303      	movs	r3, #3
 8008dae:	f000 fb49 	bl	8009444 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008db2:	4b8f      	ldr	r3, [pc, #572]	; (8008ff0 <HAL_RCC_OscConfig+0x338>)
 8008db4:	681a      	ldr	r2, [r3, #0]
 8008db6:	2380      	movs	r3, #128	; 0x80
 8008db8:	029b      	lsls	r3, r3, #10
 8008dba:	4013      	ands	r3, r2
 8008dbc:	d0ef      	beq.n	8008d9e <HAL_RCC_OscConfig+0xe6>
 8008dbe:	e015      	b.n	8008dec <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008dc0:	f7fe fbee 	bl	80075a0 <HAL_GetTick>
 8008dc4:	0003      	movs	r3, r0
 8008dc6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008dc8:	e008      	b.n	8008ddc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008dca:	f7fe fbe9 	bl	80075a0 <HAL_GetTick>
 8008dce:	0002      	movs	r2, r0
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	1ad3      	subs	r3, r2, r3
 8008dd4:	2b64      	cmp	r3, #100	; 0x64
 8008dd6:	d901      	bls.n	8008ddc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8008dd8:	2303      	movs	r3, #3
 8008dda:	e333      	b.n	8009444 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008ddc:	4b84      	ldr	r3, [pc, #528]	; (8008ff0 <HAL_RCC_OscConfig+0x338>)
 8008dde:	681a      	ldr	r2, [r3, #0]
 8008de0:	2380      	movs	r3, #128	; 0x80
 8008de2:	029b      	lsls	r3, r3, #10
 8008de4:	4013      	ands	r3, r2
 8008de6:	d1f0      	bne.n	8008dca <HAL_RCC_OscConfig+0x112>
 8008de8:	e000      	b.n	8008dec <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008dea:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	2202      	movs	r2, #2
 8008df2:	4013      	ands	r3, r2
 8008df4:	d100      	bne.n	8008df8 <HAL_RCC_OscConfig+0x140>
 8008df6:	e098      	b.n	8008f2a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	68db      	ldr	r3, [r3, #12]
 8008dfc:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8008dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e00:	2220      	movs	r2, #32
 8008e02:	4013      	ands	r3, r2
 8008e04:	d009      	beq.n	8008e1a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8008e06:	4b7a      	ldr	r3, [pc, #488]	; (8008ff0 <HAL_RCC_OscConfig+0x338>)
 8008e08:	681a      	ldr	r2, [r3, #0]
 8008e0a:	4b79      	ldr	r3, [pc, #484]	; (8008ff0 <HAL_RCC_OscConfig+0x338>)
 8008e0c:	2120      	movs	r1, #32
 8008e0e:	430a      	orrs	r2, r1
 8008e10:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8008e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e14:	2220      	movs	r2, #32
 8008e16:	4393      	bics	r3, r2
 8008e18:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008e1a:	69fb      	ldr	r3, [r7, #28]
 8008e1c:	2b04      	cmp	r3, #4
 8008e1e:	d005      	beq.n	8008e2c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008e20:	69fb      	ldr	r3, [r7, #28]
 8008e22:	2b0c      	cmp	r3, #12
 8008e24:	d13d      	bne.n	8008ea2 <HAL_RCC_OscConfig+0x1ea>
 8008e26:	69bb      	ldr	r3, [r7, #24]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d13a      	bne.n	8008ea2 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8008e2c:	4b70      	ldr	r3, [pc, #448]	; (8008ff0 <HAL_RCC_OscConfig+0x338>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	2204      	movs	r2, #4
 8008e32:	4013      	ands	r3, r2
 8008e34:	d004      	beq.n	8008e40 <HAL_RCC_OscConfig+0x188>
 8008e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d101      	bne.n	8008e40 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	e301      	b.n	8009444 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e40:	4b6b      	ldr	r3, [pc, #428]	; (8008ff0 <HAL_RCC_OscConfig+0x338>)
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	4a6d      	ldr	r2, [pc, #436]	; (8008ffc <HAL_RCC_OscConfig+0x344>)
 8008e46:	4013      	ands	r3, r2
 8008e48:	0019      	movs	r1, r3
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	691b      	ldr	r3, [r3, #16]
 8008e4e:	021a      	lsls	r2, r3, #8
 8008e50:	4b67      	ldr	r3, [pc, #412]	; (8008ff0 <HAL_RCC_OscConfig+0x338>)
 8008e52:	430a      	orrs	r2, r1
 8008e54:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8008e56:	4b66      	ldr	r3, [pc, #408]	; (8008ff0 <HAL_RCC_OscConfig+0x338>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	2209      	movs	r2, #9
 8008e5c:	4393      	bics	r3, r2
 8008e5e:	0019      	movs	r1, r3
 8008e60:	4b63      	ldr	r3, [pc, #396]	; (8008ff0 <HAL_RCC_OscConfig+0x338>)
 8008e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e64:	430a      	orrs	r2, r1
 8008e66:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008e68:	f000 fc20 	bl	80096ac <HAL_RCC_GetSysClockFreq>
 8008e6c:	0001      	movs	r1, r0
 8008e6e:	4b60      	ldr	r3, [pc, #384]	; (8008ff0 <HAL_RCC_OscConfig+0x338>)
 8008e70:	68db      	ldr	r3, [r3, #12]
 8008e72:	091b      	lsrs	r3, r3, #4
 8008e74:	220f      	movs	r2, #15
 8008e76:	4013      	ands	r3, r2
 8008e78:	4a61      	ldr	r2, [pc, #388]	; (8009000 <HAL_RCC_OscConfig+0x348>)
 8008e7a:	5cd3      	ldrb	r3, [r2, r3]
 8008e7c:	000a      	movs	r2, r1
 8008e7e:	40da      	lsrs	r2, r3
 8008e80:	4b60      	ldr	r3, [pc, #384]	; (8009004 <HAL_RCC_OscConfig+0x34c>)
 8008e82:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8008e84:	2513      	movs	r5, #19
 8008e86:	197c      	adds	r4, r7, r5
 8008e88:	2000      	movs	r0, #0
 8008e8a:	f7fe fb43 	bl	8007514 <HAL_InitTick>
 8008e8e:	0003      	movs	r3, r0
 8008e90:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8008e92:	197b      	adds	r3, r7, r5
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d047      	beq.n	8008f2a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8008e9a:	2313      	movs	r3, #19
 8008e9c:	18fb      	adds	r3, r7, r3
 8008e9e:	781b      	ldrb	r3, [r3, #0]
 8008ea0:	e2d0      	b.n	8009444 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8008ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d027      	beq.n	8008ef8 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8008ea8:	4b51      	ldr	r3, [pc, #324]	; (8008ff0 <HAL_RCC_OscConfig+0x338>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	2209      	movs	r2, #9
 8008eae:	4393      	bics	r3, r2
 8008eb0:	0019      	movs	r1, r3
 8008eb2:	4b4f      	ldr	r3, [pc, #316]	; (8008ff0 <HAL_RCC_OscConfig+0x338>)
 8008eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eb6:	430a      	orrs	r2, r1
 8008eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008eba:	f7fe fb71 	bl	80075a0 <HAL_GetTick>
 8008ebe:	0003      	movs	r3, r0
 8008ec0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008ec2:	e008      	b.n	8008ed6 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008ec4:	f7fe fb6c 	bl	80075a0 <HAL_GetTick>
 8008ec8:	0002      	movs	r2, r0
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	1ad3      	subs	r3, r2, r3
 8008ece:	2b02      	cmp	r3, #2
 8008ed0:	d901      	bls.n	8008ed6 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8008ed2:	2303      	movs	r3, #3
 8008ed4:	e2b6      	b.n	8009444 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008ed6:	4b46      	ldr	r3, [pc, #280]	; (8008ff0 <HAL_RCC_OscConfig+0x338>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2204      	movs	r2, #4
 8008edc:	4013      	ands	r3, r2
 8008ede:	d0f1      	beq.n	8008ec4 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ee0:	4b43      	ldr	r3, [pc, #268]	; (8008ff0 <HAL_RCC_OscConfig+0x338>)
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	4a45      	ldr	r2, [pc, #276]	; (8008ffc <HAL_RCC_OscConfig+0x344>)
 8008ee6:	4013      	ands	r3, r2
 8008ee8:	0019      	movs	r1, r3
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	691b      	ldr	r3, [r3, #16]
 8008eee:	021a      	lsls	r2, r3, #8
 8008ef0:	4b3f      	ldr	r3, [pc, #252]	; (8008ff0 <HAL_RCC_OscConfig+0x338>)
 8008ef2:	430a      	orrs	r2, r1
 8008ef4:	605a      	str	r2, [r3, #4]
 8008ef6:	e018      	b.n	8008f2a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008ef8:	4b3d      	ldr	r3, [pc, #244]	; (8008ff0 <HAL_RCC_OscConfig+0x338>)
 8008efa:	681a      	ldr	r2, [r3, #0]
 8008efc:	4b3c      	ldr	r3, [pc, #240]	; (8008ff0 <HAL_RCC_OscConfig+0x338>)
 8008efe:	2101      	movs	r1, #1
 8008f00:	438a      	bics	r2, r1
 8008f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f04:	f7fe fb4c 	bl	80075a0 <HAL_GetTick>
 8008f08:	0003      	movs	r3, r0
 8008f0a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008f0c:	e008      	b.n	8008f20 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008f0e:	f7fe fb47 	bl	80075a0 <HAL_GetTick>
 8008f12:	0002      	movs	r2, r0
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	1ad3      	subs	r3, r2, r3
 8008f18:	2b02      	cmp	r3, #2
 8008f1a:	d901      	bls.n	8008f20 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8008f1c:	2303      	movs	r3, #3
 8008f1e:	e291      	b.n	8009444 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008f20:	4b33      	ldr	r3, [pc, #204]	; (8008ff0 <HAL_RCC_OscConfig+0x338>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	2204      	movs	r2, #4
 8008f26:	4013      	ands	r3, r2
 8008f28:	d1f1      	bne.n	8008f0e <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	2210      	movs	r2, #16
 8008f30:	4013      	ands	r3, r2
 8008f32:	d100      	bne.n	8008f36 <HAL_RCC_OscConfig+0x27e>
 8008f34:	e09f      	b.n	8009076 <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8008f36:	69fb      	ldr	r3, [r7, #28]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d13f      	bne.n	8008fbc <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008f3c:	4b2c      	ldr	r3, [pc, #176]	; (8008ff0 <HAL_RCC_OscConfig+0x338>)
 8008f3e:	681a      	ldr	r2, [r3, #0]
 8008f40:	2380      	movs	r3, #128	; 0x80
 8008f42:	009b      	lsls	r3, r3, #2
 8008f44:	4013      	ands	r3, r2
 8008f46:	d005      	beq.n	8008f54 <HAL_RCC_OscConfig+0x29c>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	69db      	ldr	r3, [r3, #28]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d101      	bne.n	8008f54 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8008f50:	2301      	movs	r3, #1
 8008f52:	e277      	b.n	8009444 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008f54:	4b26      	ldr	r3, [pc, #152]	; (8008ff0 <HAL_RCC_OscConfig+0x338>)
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	4a2b      	ldr	r2, [pc, #172]	; (8009008 <HAL_RCC_OscConfig+0x350>)
 8008f5a:	4013      	ands	r3, r2
 8008f5c:	0019      	movs	r1, r3
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f62:	4b23      	ldr	r3, [pc, #140]	; (8008ff0 <HAL_RCC_OscConfig+0x338>)
 8008f64:	430a      	orrs	r2, r1
 8008f66:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008f68:	4b21      	ldr	r3, [pc, #132]	; (8008ff0 <HAL_RCC_OscConfig+0x338>)
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	021b      	lsls	r3, r3, #8
 8008f6e:	0a19      	lsrs	r1, r3, #8
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6a1b      	ldr	r3, [r3, #32]
 8008f74:	061a      	lsls	r2, r3, #24
 8008f76:	4b1e      	ldr	r3, [pc, #120]	; (8008ff0 <HAL_RCC_OscConfig+0x338>)
 8008f78:	430a      	orrs	r2, r1
 8008f7a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f80:	0b5b      	lsrs	r3, r3, #13
 8008f82:	3301      	adds	r3, #1
 8008f84:	2280      	movs	r2, #128	; 0x80
 8008f86:	0212      	lsls	r2, r2, #8
 8008f88:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8008f8a:	4b19      	ldr	r3, [pc, #100]	; (8008ff0 <HAL_RCC_OscConfig+0x338>)
 8008f8c:	68db      	ldr	r3, [r3, #12]
 8008f8e:	091b      	lsrs	r3, r3, #4
 8008f90:	210f      	movs	r1, #15
 8008f92:	400b      	ands	r3, r1
 8008f94:	491a      	ldr	r1, [pc, #104]	; (8009000 <HAL_RCC_OscConfig+0x348>)
 8008f96:	5ccb      	ldrb	r3, [r1, r3]
 8008f98:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8008f9a:	4b1a      	ldr	r3, [pc, #104]	; (8009004 <HAL_RCC_OscConfig+0x34c>)
 8008f9c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8008f9e:	2513      	movs	r5, #19
 8008fa0:	197c      	adds	r4, r7, r5
 8008fa2:	2000      	movs	r0, #0
 8008fa4:	f7fe fab6 	bl	8007514 <HAL_InitTick>
 8008fa8:	0003      	movs	r3, r0
 8008faa:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8008fac:	197b      	adds	r3, r7, r5
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d060      	beq.n	8009076 <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8008fb4:	2313      	movs	r3, #19
 8008fb6:	18fb      	adds	r3, r7, r3
 8008fb8:	781b      	ldrb	r3, [r3, #0]
 8008fba:	e243      	b.n	8009444 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	69db      	ldr	r3, [r3, #28]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d03e      	beq.n	8009042 <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008fc4:	4b0a      	ldr	r3, [pc, #40]	; (8008ff0 <HAL_RCC_OscConfig+0x338>)
 8008fc6:	681a      	ldr	r2, [r3, #0]
 8008fc8:	4b09      	ldr	r3, [pc, #36]	; (8008ff0 <HAL_RCC_OscConfig+0x338>)
 8008fca:	2180      	movs	r1, #128	; 0x80
 8008fcc:	0049      	lsls	r1, r1, #1
 8008fce:	430a      	orrs	r2, r1
 8008fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008fd2:	f7fe fae5 	bl	80075a0 <HAL_GetTick>
 8008fd6:	0003      	movs	r3, r0
 8008fd8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8008fda:	e017      	b.n	800900c <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008fdc:	f7fe fae0 	bl	80075a0 <HAL_GetTick>
 8008fe0:	0002      	movs	r2, r0
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	1ad3      	subs	r3, r2, r3
 8008fe6:	2b02      	cmp	r3, #2
 8008fe8:	d910      	bls.n	800900c <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8008fea:	2303      	movs	r3, #3
 8008fec:	e22a      	b.n	8009444 <HAL_RCC_OscConfig+0x78c>
 8008fee:	46c0      	nop			; (mov r8, r8)
 8008ff0:	40021000 	.word	0x40021000
 8008ff4:	fffeffff 	.word	0xfffeffff
 8008ff8:	fffbffff 	.word	0xfffbffff
 8008ffc:	ffffe0ff 	.word	0xffffe0ff
 8009000:	0800d530 	.word	0x0800d530
 8009004:	20000020 	.word	0x20000020
 8009008:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800900c:	4bc6      	ldr	r3, [pc, #792]	; (8009328 <HAL_RCC_OscConfig+0x670>)
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	2380      	movs	r3, #128	; 0x80
 8009012:	009b      	lsls	r3, r3, #2
 8009014:	4013      	ands	r3, r2
 8009016:	d0e1      	beq.n	8008fdc <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009018:	4bc3      	ldr	r3, [pc, #780]	; (8009328 <HAL_RCC_OscConfig+0x670>)
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	4ac3      	ldr	r2, [pc, #780]	; (800932c <HAL_RCC_OscConfig+0x674>)
 800901e:	4013      	ands	r3, r2
 8009020:	0019      	movs	r1, r3
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009026:	4bc0      	ldr	r3, [pc, #768]	; (8009328 <HAL_RCC_OscConfig+0x670>)
 8009028:	430a      	orrs	r2, r1
 800902a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800902c:	4bbe      	ldr	r3, [pc, #760]	; (8009328 <HAL_RCC_OscConfig+0x670>)
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	021b      	lsls	r3, r3, #8
 8009032:	0a19      	lsrs	r1, r3, #8
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6a1b      	ldr	r3, [r3, #32]
 8009038:	061a      	lsls	r2, r3, #24
 800903a:	4bbb      	ldr	r3, [pc, #748]	; (8009328 <HAL_RCC_OscConfig+0x670>)
 800903c:	430a      	orrs	r2, r1
 800903e:	605a      	str	r2, [r3, #4]
 8009040:	e019      	b.n	8009076 <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8009042:	4bb9      	ldr	r3, [pc, #740]	; (8009328 <HAL_RCC_OscConfig+0x670>)
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	4bb8      	ldr	r3, [pc, #736]	; (8009328 <HAL_RCC_OscConfig+0x670>)
 8009048:	49b9      	ldr	r1, [pc, #740]	; (8009330 <HAL_RCC_OscConfig+0x678>)
 800904a:	400a      	ands	r2, r1
 800904c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800904e:	f7fe faa7 	bl	80075a0 <HAL_GetTick>
 8009052:	0003      	movs	r3, r0
 8009054:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8009056:	e008      	b.n	800906a <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009058:	f7fe faa2 	bl	80075a0 <HAL_GetTick>
 800905c:	0002      	movs	r2, r0
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	1ad3      	subs	r3, r2, r3
 8009062:	2b02      	cmp	r3, #2
 8009064:	d901      	bls.n	800906a <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8009066:	2303      	movs	r3, #3
 8009068:	e1ec      	b.n	8009444 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800906a:	4baf      	ldr	r3, [pc, #700]	; (8009328 <HAL_RCC_OscConfig+0x670>)
 800906c:	681a      	ldr	r2, [r3, #0]
 800906e:	2380      	movs	r3, #128	; 0x80
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	4013      	ands	r3, r2
 8009074:	d1f0      	bne.n	8009058 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	2208      	movs	r2, #8
 800907c:	4013      	ands	r3, r2
 800907e:	d036      	beq.n	80090ee <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	695b      	ldr	r3, [r3, #20]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d019      	beq.n	80090bc <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009088:	4ba7      	ldr	r3, [pc, #668]	; (8009328 <HAL_RCC_OscConfig+0x670>)
 800908a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800908c:	4ba6      	ldr	r3, [pc, #664]	; (8009328 <HAL_RCC_OscConfig+0x670>)
 800908e:	2101      	movs	r1, #1
 8009090:	430a      	orrs	r2, r1
 8009092:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009094:	f7fe fa84 	bl	80075a0 <HAL_GetTick>
 8009098:	0003      	movs	r3, r0
 800909a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800909c:	e008      	b.n	80090b0 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800909e:	f7fe fa7f 	bl	80075a0 <HAL_GetTick>
 80090a2:	0002      	movs	r2, r0
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	1ad3      	subs	r3, r2, r3
 80090a8:	2b02      	cmp	r3, #2
 80090aa:	d901      	bls.n	80090b0 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 80090ac:	2303      	movs	r3, #3
 80090ae:	e1c9      	b.n	8009444 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80090b0:	4b9d      	ldr	r3, [pc, #628]	; (8009328 <HAL_RCC_OscConfig+0x670>)
 80090b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090b4:	2202      	movs	r2, #2
 80090b6:	4013      	ands	r3, r2
 80090b8:	d0f1      	beq.n	800909e <HAL_RCC_OscConfig+0x3e6>
 80090ba:	e018      	b.n	80090ee <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80090bc:	4b9a      	ldr	r3, [pc, #616]	; (8009328 <HAL_RCC_OscConfig+0x670>)
 80090be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80090c0:	4b99      	ldr	r3, [pc, #612]	; (8009328 <HAL_RCC_OscConfig+0x670>)
 80090c2:	2101      	movs	r1, #1
 80090c4:	438a      	bics	r2, r1
 80090c6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80090c8:	f7fe fa6a 	bl	80075a0 <HAL_GetTick>
 80090cc:	0003      	movs	r3, r0
 80090ce:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80090d0:	e008      	b.n	80090e4 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80090d2:	f7fe fa65 	bl	80075a0 <HAL_GetTick>
 80090d6:	0002      	movs	r2, r0
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	1ad3      	subs	r3, r2, r3
 80090dc:	2b02      	cmp	r3, #2
 80090de:	d901      	bls.n	80090e4 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80090e0:	2303      	movs	r3, #3
 80090e2:	e1af      	b.n	8009444 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80090e4:	4b90      	ldr	r3, [pc, #576]	; (8009328 <HAL_RCC_OscConfig+0x670>)
 80090e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090e8:	2202      	movs	r2, #2
 80090ea:	4013      	ands	r3, r2
 80090ec:	d1f1      	bne.n	80090d2 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	2204      	movs	r2, #4
 80090f4:	4013      	ands	r3, r2
 80090f6:	d100      	bne.n	80090fa <HAL_RCC_OscConfig+0x442>
 80090f8:	e0af      	b.n	800925a <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80090fa:	2323      	movs	r3, #35	; 0x23
 80090fc:	18fb      	adds	r3, r7, r3
 80090fe:	2200      	movs	r2, #0
 8009100:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009102:	4b89      	ldr	r3, [pc, #548]	; (8009328 <HAL_RCC_OscConfig+0x670>)
 8009104:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009106:	2380      	movs	r3, #128	; 0x80
 8009108:	055b      	lsls	r3, r3, #21
 800910a:	4013      	ands	r3, r2
 800910c:	d10a      	bne.n	8009124 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800910e:	4b86      	ldr	r3, [pc, #536]	; (8009328 <HAL_RCC_OscConfig+0x670>)
 8009110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009112:	4b85      	ldr	r3, [pc, #532]	; (8009328 <HAL_RCC_OscConfig+0x670>)
 8009114:	2180      	movs	r1, #128	; 0x80
 8009116:	0549      	lsls	r1, r1, #21
 8009118:	430a      	orrs	r2, r1
 800911a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800911c:	2323      	movs	r3, #35	; 0x23
 800911e:	18fb      	adds	r3, r7, r3
 8009120:	2201      	movs	r2, #1
 8009122:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009124:	4b83      	ldr	r3, [pc, #524]	; (8009334 <HAL_RCC_OscConfig+0x67c>)
 8009126:	681a      	ldr	r2, [r3, #0]
 8009128:	2380      	movs	r3, #128	; 0x80
 800912a:	005b      	lsls	r3, r3, #1
 800912c:	4013      	ands	r3, r2
 800912e:	d11a      	bne.n	8009166 <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009130:	4b80      	ldr	r3, [pc, #512]	; (8009334 <HAL_RCC_OscConfig+0x67c>)
 8009132:	681a      	ldr	r2, [r3, #0]
 8009134:	4b7f      	ldr	r3, [pc, #508]	; (8009334 <HAL_RCC_OscConfig+0x67c>)
 8009136:	2180      	movs	r1, #128	; 0x80
 8009138:	0049      	lsls	r1, r1, #1
 800913a:	430a      	orrs	r2, r1
 800913c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800913e:	f7fe fa2f 	bl	80075a0 <HAL_GetTick>
 8009142:	0003      	movs	r3, r0
 8009144:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009146:	e008      	b.n	800915a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009148:	f7fe fa2a 	bl	80075a0 <HAL_GetTick>
 800914c:	0002      	movs	r2, r0
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	1ad3      	subs	r3, r2, r3
 8009152:	2b64      	cmp	r3, #100	; 0x64
 8009154:	d901      	bls.n	800915a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8009156:	2303      	movs	r3, #3
 8009158:	e174      	b.n	8009444 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800915a:	4b76      	ldr	r3, [pc, #472]	; (8009334 <HAL_RCC_OscConfig+0x67c>)
 800915c:	681a      	ldr	r2, [r3, #0]
 800915e:	2380      	movs	r3, #128	; 0x80
 8009160:	005b      	lsls	r3, r3, #1
 8009162:	4013      	ands	r3, r2
 8009164:	d0f0      	beq.n	8009148 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	689a      	ldr	r2, [r3, #8]
 800916a:	2380      	movs	r3, #128	; 0x80
 800916c:	005b      	lsls	r3, r3, #1
 800916e:	429a      	cmp	r2, r3
 8009170:	d107      	bne.n	8009182 <HAL_RCC_OscConfig+0x4ca>
 8009172:	4b6d      	ldr	r3, [pc, #436]	; (8009328 <HAL_RCC_OscConfig+0x670>)
 8009174:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009176:	4b6c      	ldr	r3, [pc, #432]	; (8009328 <HAL_RCC_OscConfig+0x670>)
 8009178:	2180      	movs	r1, #128	; 0x80
 800917a:	0049      	lsls	r1, r1, #1
 800917c:	430a      	orrs	r2, r1
 800917e:	651a      	str	r2, [r3, #80]	; 0x50
 8009180:	e031      	b.n	80091e6 <HAL_RCC_OscConfig+0x52e>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	689b      	ldr	r3, [r3, #8]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d10c      	bne.n	80091a4 <HAL_RCC_OscConfig+0x4ec>
 800918a:	4b67      	ldr	r3, [pc, #412]	; (8009328 <HAL_RCC_OscConfig+0x670>)
 800918c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800918e:	4b66      	ldr	r3, [pc, #408]	; (8009328 <HAL_RCC_OscConfig+0x670>)
 8009190:	4967      	ldr	r1, [pc, #412]	; (8009330 <HAL_RCC_OscConfig+0x678>)
 8009192:	400a      	ands	r2, r1
 8009194:	651a      	str	r2, [r3, #80]	; 0x50
 8009196:	4b64      	ldr	r3, [pc, #400]	; (8009328 <HAL_RCC_OscConfig+0x670>)
 8009198:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800919a:	4b63      	ldr	r3, [pc, #396]	; (8009328 <HAL_RCC_OscConfig+0x670>)
 800919c:	4966      	ldr	r1, [pc, #408]	; (8009338 <HAL_RCC_OscConfig+0x680>)
 800919e:	400a      	ands	r2, r1
 80091a0:	651a      	str	r2, [r3, #80]	; 0x50
 80091a2:	e020      	b.n	80091e6 <HAL_RCC_OscConfig+0x52e>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	689a      	ldr	r2, [r3, #8]
 80091a8:	23a0      	movs	r3, #160	; 0xa0
 80091aa:	00db      	lsls	r3, r3, #3
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d10e      	bne.n	80091ce <HAL_RCC_OscConfig+0x516>
 80091b0:	4b5d      	ldr	r3, [pc, #372]	; (8009328 <HAL_RCC_OscConfig+0x670>)
 80091b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80091b4:	4b5c      	ldr	r3, [pc, #368]	; (8009328 <HAL_RCC_OscConfig+0x670>)
 80091b6:	2180      	movs	r1, #128	; 0x80
 80091b8:	00c9      	lsls	r1, r1, #3
 80091ba:	430a      	orrs	r2, r1
 80091bc:	651a      	str	r2, [r3, #80]	; 0x50
 80091be:	4b5a      	ldr	r3, [pc, #360]	; (8009328 <HAL_RCC_OscConfig+0x670>)
 80091c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80091c2:	4b59      	ldr	r3, [pc, #356]	; (8009328 <HAL_RCC_OscConfig+0x670>)
 80091c4:	2180      	movs	r1, #128	; 0x80
 80091c6:	0049      	lsls	r1, r1, #1
 80091c8:	430a      	orrs	r2, r1
 80091ca:	651a      	str	r2, [r3, #80]	; 0x50
 80091cc:	e00b      	b.n	80091e6 <HAL_RCC_OscConfig+0x52e>
 80091ce:	4b56      	ldr	r3, [pc, #344]	; (8009328 <HAL_RCC_OscConfig+0x670>)
 80091d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80091d2:	4b55      	ldr	r3, [pc, #340]	; (8009328 <HAL_RCC_OscConfig+0x670>)
 80091d4:	4956      	ldr	r1, [pc, #344]	; (8009330 <HAL_RCC_OscConfig+0x678>)
 80091d6:	400a      	ands	r2, r1
 80091d8:	651a      	str	r2, [r3, #80]	; 0x50
 80091da:	4b53      	ldr	r3, [pc, #332]	; (8009328 <HAL_RCC_OscConfig+0x670>)
 80091dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80091de:	4b52      	ldr	r3, [pc, #328]	; (8009328 <HAL_RCC_OscConfig+0x670>)
 80091e0:	4955      	ldr	r1, [pc, #340]	; (8009338 <HAL_RCC_OscConfig+0x680>)
 80091e2:	400a      	ands	r2, r1
 80091e4:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d015      	beq.n	800921a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80091ee:	f7fe f9d7 	bl	80075a0 <HAL_GetTick>
 80091f2:	0003      	movs	r3, r0
 80091f4:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80091f6:	e009      	b.n	800920c <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80091f8:	f7fe f9d2 	bl	80075a0 <HAL_GetTick>
 80091fc:	0002      	movs	r2, r0
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	1ad3      	subs	r3, r2, r3
 8009202:	4a4e      	ldr	r2, [pc, #312]	; (800933c <HAL_RCC_OscConfig+0x684>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d901      	bls.n	800920c <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8009208:	2303      	movs	r3, #3
 800920a:	e11b      	b.n	8009444 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800920c:	4b46      	ldr	r3, [pc, #280]	; (8009328 <HAL_RCC_OscConfig+0x670>)
 800920e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009210:	2380      	movs	r3, #128	; 0x80
 8009212:	009b      	lsls	r3, r3, #2
 8009214:	4013      	ands	r3, r2
 8009216:	d0ef      	beq.n	80091f8 <HAL_RCC_OscConfig+0x540>
 8009218:	e014      	b.n	8009244 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800921a:	f7fe f9c1 	bl	80075a0 <HAL_GetTick>
 800921e:	0003      	movs	r3, r0
 8009220:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009222:	e009      	b.n	8009238 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009224:	f7fe f9bc 	bl	80075a0 <HAL_GetTick>
 8009228:	0002      	movs	r2, r0
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	1ad3      	subs	r3, r2, r3
 800922e:	4a43      	ldr	r2, [pc, #268]	; (800933c <HAL_RCC_OscConfig+0x684>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d901      	bls.n	8009238 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8009234:	2303      	movs	r3, #3
 8009236:	e105      	b.n	8009444 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009238:	4b3b      	ldr	r3, [pc, #236]	; (8009328 <HAL_RCC_OscConfig+0x670>)
 800923a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800923c:	2380      	movs	r3, #128	; 0x80
 800923e:	009b      	lsls	r3, r3, #2
 8009240:	4013      	ands	r3, r2
 8009242:	d1ef      	bne.n	8009224 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009244:	2323      	movs	r3, #35	; 0x23
 8009246:	18fb      	adds	r3, r7, r3
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	2b01      	cmp	r3, #1
 800924c:	d105      	bne.n	800925a <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800924e:	4b36      	ldr	r3, [pc, #216]	; (8009328 <HAL_RCC_OscConfig+0x670>)
 8009250:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009252:	4b35      	ldr	r3, [pc, #212]	; (8009328 <HAL_RCC_OscConfig+0x670>)
 8009254:	493a      	ldr	r1, [pc, #232]	; (8009340 <HAL_RCC_OscConfig+0x688>)
 8009256:	400a      	ands	r2, r1
 8009258:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	2220      	movs	r2, #32
 8009260:	4013      	ands	r3, r2
 8009262:	d049      	beq.n	80092f8 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	699b      	ldr	r3, [r3, #24]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d026      	beq.n	80092ba <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800926c:	4b2e      	ldr	r3, [pc, #184]	; (8009328 <HAL_RCC_OscConfig+0x670>)
 800926e:	689a      	ldr	r2, [r3, #8]
 8009270:	4b2d      	ldr	r3, [pc, #180]	; (8009328 <HAL_RCC_OscConfig+0x670>)
 8009272:	2101      	movs	r1, #1
 8009274:	430a      	orrs	r2, r1
 8009276:	609a      	str	r2, [r3, #8]
 8009278:	4b2b      	ldr	r3, [pc, #172]	; (8009328 <HAL_RCC_OscConfig+0x670>)
 800927a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800927c:	4b2a      	ldr	r3, [pc, #168]	; (8009328 <HAL_RCC_OscConfig+0x670>)
 800927e:	2101      	movs	r1, #1
 8009280:	430a      	orrs	r2, r1
 8009282:	635a      	str	r2, [r3, #52]	; 0x34
 8009284:	4b2f      	ldr	r3, [pc, #188]	; (8009344 <HAL_RCC_OscConfig+0x68c>)
 8009286:	6a1a      	ldr	r2, [r3, #32]
 8009288:	4b2e      	ldr	r3, [pc, #184]	; (8009344 <HAL_RCC_OscConfig+0x68c>)
 800928a:	2180      	movs	r1, #128	; 0x80
 800928c:	0189      	lsls	r1, r1, #6
 800928e:	430a      	orrs	r2, r1
 8009290:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009292:	f7fe f985 	bl	80075a0 <HAL_GetTick>
 8009296:	0003      	movs	r3, r0
 8009298:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800929a:	e008      	b.n	80092ae <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800929c:	f7fe f980 	bl	80075a0 <HAL_GetTick>
 80092a0:	0002      	movs	r2, r0
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	1ad3      	subs	r3, r2, r3
 80092a6:	2b02      	cmp	r3, #2
 80092a8:	d901      	bls.n	80092ae <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 80092aa:	2303      	movs	r3, #3
 80092ac:	e0ca      	b.n	8009444 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80092ae:	4b1e      	ldr	r3, [pc, #120]	; (8009328 <HAL_RCC_OscConfig+0x670>)
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	2202      	movs	r2, #2
 80092b4:	4013      	ands	r3, r2
 80092b6:	d0f1      	beq.n	800929c <HAL_RCC_OscConfig+0x5e4>
 80092b8:	e01e      	b.n	80092f8 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80092ba:	4b1b      	ldr	r3, [pc, #108]	; (8009328 <HAL_RCC_OscConfig+0x670>)
 80092bc:	689a      	ldr	r2, [r3, #8]
 80092be:	4b1a      	ldr	r3, [pc, #104]	; (8009328 <HAL_RCC_OscConfig+0x670>)
 80092c0:	2101      	movs	r1, #1
 80092c2:	438a      	bics	r2, r1
 80092c4:	609a      	str	r2, [r3, #8]
 80092c6:	4b1f      	ldr	r3, [pc, #124]	; (8009344 <HAL_RCC_OscConfig+0x68c>)
 80092c8:	6a1a      	ldr	r2, [r3, #32]
 80092ca:	4b1e      	ldr	r3, [pc, #120]	; (8009344 <HAL_RCC_OscConfig+0x68c>)
 80092cc:	491e      	ldr	r1, [pc, #120]	; (8009348 <HAL_RCC_OscConfig+0x690>)
 80092ce:	400a      	ands	r2, r1
 80092d0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092d2:	f7fe f965 	bl	80075a0 <HAL_GetTick>
 80092d6:	0003      	movs	r3, r0
 80092d8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80092da:	e008      	b.n	80092ee <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80092dc:	f7fe f960 	bl	80075a0 <HAL_GetTick>
 80092e0:	0002      	movs	r2, r0
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	1ad3      	subs	r3, r2, r3
 80092e6:	2b02      	cmp	r3, #2
 80092e8:	d901      	bls.n	80092ee <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 80092ea:	2303      	movs	r3, #3
 80092ec:	e0aa      	b.n	8009444 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80092ee:	4b0e      	ldr	r3, [pc, #56]	; (8009328 <HAL_RCC_OscConfig+0x670>)
 80092f0:	689b      	ldr	r3, [r3, #8]
 80092f2:	2202      	movs	r2, #2
 80092f4:	4013      	ands	r3, r2
 80092f6:	d1f1      	bne.n	80092dc <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d100      	bne.n	8009302 <HAL_RCC_OscConfig+0x64a>
 8009300:	e09f      	b.n	8009442 <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009302:	69fb      	ldr	r3, [r7, #28]
 8009304:	2b0c      	cmp	r3, #12
 8009306:	d100      	bne.n	800930a <HAL_RCC_OscConfig+0x652>
 8009308:	e078      	b.n	80093fc <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800930e:	2b02      	cmp	r3, #2
 8009310:	d159      	bne.n	80093c6 <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009312:	4b05      	ldr	r3, [pc, #20]	; (8009328 <HAL_RCC_OscConfig+0x670>)
 8009314:	681a      	ldr	r2, [r3, #0]
 8009316:	4b04      	ldr	r3, [pc, #16]	; (8009328 <HAL_RCC_OscConfig+0x670>)
 8009318:	490c      	ldr	r1, [pc, #48]	; (800934c <HAL_RCC_OscConfig+0x694>)
 800931a:	400a      	ands	r2, r1
 800931c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800931e:	f7fe f93f 	bl	80075a0 <HAL_GetTick>
 8009322:	0003      	movs	r3, r0
 8009324:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8009326:	e01c      	b.n	8009362 <HAL_RCC_OscConfig+0x6aa>
 8009328:	40021000 	.word	0x40021000
 800932c:	ffff1fff 	.word	0xffff1fff
 8009330:	fffffeff 	.word	0xfffffeff
 8009334:	40007000 	.word	0x40007000
 8009338:	fffffbff 	.word	0xfffffbff
 800933c:	00001388 	.word	0x00001388
 8009340:	efffffff 	.word	0xefffffff
 8009344:	40010000 	.word	0x40010000
 8009348:	ffffdfff 	.word	0xffffdfff
 800934c:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009350:	f7fe f926 	bl	80075a0 <HAL_GetTick>
 8009354:	0002      	movs	r2, r0
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	1ad3      	subs	r3, r2, r3
 800935a:	2b02      	cmp	r3, #2
 800935c:	d901      	bls.n	8009362 <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 800935e:	2303      	movs	r3, #3
 8009360:	e070      	b.n	8009444 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8009362:	4b3a      	ldr	r3, [pc, #232]	; (800944c <HAL_RCC_OscConfig+0x794>)
 8009364:	681a      	ldr	r2, [r3, #0]
 8009366:	2380      	movs	r3, #128	; 0x80
 8009368:	049b      	lsls	r3, r3, #18
 800936a:	4013      	ands	r3, r2
 800936c:	d1f0      	bne.n	8009350 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800936e:	4b37      	ldr	r3, [pc, #220]	; (800944c <HAL_RCC_OscConfig+0x794>)
 8009370:	68db      	ldr	r3, [r3, #12]
 8009372:	4a37      	ldr	r2, [pc, #220]	; (8009450 <HAL_RCC_OscConfig+0x798>)
 8009374:	4013      	ands	r3, r2
 8009376:	0019      	movs	r1, r3
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009380:	431a      	orrs	r2, r3
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009386:	431a      	orrs	r2, r3
 8009388:	4b30      	ldr	r3, [pc, #192]	; (800944c <HAL_RCC_OscConfig+0x794>)
 800938a:	430a      	orrs	r2, r1
 800938c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800938e:	4b2f      	ldr	r3, [pc, #188]	; (800944c <HAL_RCC_OscConfig+0x794>)
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	4b2e      	ldr	r3, [pc, #184]	; (800944c <HAL_RCC_OscConfig+0x794>)
 8009394:	2180      	movs	r1, #128	; 0x80
 8009396:	0449      	lsls	r1, r1, #17
 8009398:	430a      	orrs	r2, r1
 800939a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800939c:	f7fe f900 	bl	80075a0 <HAL_GetTick>
 80093a0:	0003      	movs	r3, r0
 80093a2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80093a4:	e008      	b.n	80093b8 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80093a6:	f7fe f8fb 	bl	80075a0 <HAL_GetTick>
 80093aa:	0002      	movs	r2, r0
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	1ad3      	subs	r3, r2, r3
 80093b0:	2b02      	cmp	r3, #2
 80093b2:	d901      	bls.n	80093b8 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 80093b4:	2303      	movs	r3, #3
 80093b6:	e045      	b.n	8009444 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80093b8:	4b24      	ldr	r3, [pc, #144]	; (800944c <HAL_RCC_OscConfig+0x794>)
 80093ba:	681a      	ldr	r2, [r3, #0]
 80093bc:	2380      	movs	r3, #128	; 0x80
 80093be:	049b      	lsls	r3, r3, #18
 80093c0:	4013      	ands	r3, r2
 80093c2:	d0f0      	beq.n	80093a6 <HAL_RCC_OscConfig+0x6ee>
 80093c4:	e03d      	b.n	8009442 <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80093c6:	4b21      	ldr	r3, [pc, #132]	; (800944c <HAL_RCC_OscConfig+0x794>)
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	4b20      	ldr	r3, [pc, #128]	; (800944c <HAL_RCC_OscConfig+0x794>)
 80093cc:	4921      	ldr	r1, [pc, #132]	; (8009454 <HAL_RCC_OscConfig+0x79c>)
 80093ce:	400a      	ands	r2, r1
 80093d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80093d2:	f7fe f8e5 	bl	80075a0 <HAL_GetTick>
 80093d6:	0003      	movs	r3, r0
 80093d8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80093da:	e008      	b.n	80093ee <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80093dc:	f7fe f8e0 	bl	80075a0 <HAL_GetTick>
 80093e0:	0002      	movs	r2, r0
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	1ad3      	subs	r3, r2, r3
 80093e6:	2b02      	cmp	r3, #2
 80093e8:	d901      	bls.n	80093ee <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 80093ea:	2303      	movs	r3, #3
 80093ec:	e02a      	b.n	8009444 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80093ee:	4b17      	ldr	r3, [pc, #92]	; (800944c <HAL_RCC_OscConfig+0x794>)
 80093f0:	681a      	ldr	r2, [r3, #0]
 80093f2:	2380      	movs	r3, #128	; 0x80
 80093f4:	049b      	lsls	r3, r3, #18
 80093f6:	4013      	ands	r3, r2
 80093f8:	d1f0      	bne.n	80093dc <HAL_RCC_OscConfig+0x724>
 80093fa:	e022      	b.n	8009442 <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009400:	2b01      	cmp	r3, #1
 8009402:	d101      	bne.n	8009408 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 8009404:	2301      	movs	r3, #1
 8009406:	e01d      	b.n	8009444 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8009408:	4b10      	ldr	r3, [pc, #64]	; (800944c <HAL_RCC_OscConfig+0x794>)
 800940a:	68db      	ldr	r3, [r3, #12]
 800940c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800940e:	69ba      	ldr	r2, [r7, #24]
 8009410:	2380      	movs	r3, #128	; 0x80
 8009412:	025b      	lsls	r3, r3, #9
 8009414:	401a      	ands	r2, r3
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800941a:	429a      	cmp	r2, r3
 800941c:	d10f      	bne.n	800943e <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800941e:	69ba      	ldr	r2, [r7, #24]
 8009420:	23f0      	movs	r3, #240	; 0xf0
 8009422:	039b      	lsls	r3, r3, #14
 8009424:	401a      	ands	r2, r3
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800942a:	429a      	cmp	r2, r3
 800942c:	d107      	bne.n	800943e <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800942e:	69ba      	ldr	r2, [r7, #24]
 8009430:	23c0      	movs	r3, #192	; 0xc0
 8009432:	041b      	lsls	r3, r3, #16
 8009434:	401a      	ands	r2, r3
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800943a:	429a      	cmp	r2, r3
 800943c:	d001      	beq.n	8009442 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 800943e:	2301      	movs	r3, #1
 8009440:	e000      	b.n	8009444 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 8009442:	2300      	movs	r3, #0
}
 8009444:	0018      	movs	r0, r3
 8009446:	46bd      	mov	sp, r7
 8009448:	b00a      	add	sp, #40	; 0x28
 800944a:	bdb0      	pop	{r4, r5, r7, pc}
 800944c:	40021000 	.word	0x40021000
 8009450:	ff02ffff 	.word	0xff02ffff
 8009454:	feffffff 	.word	0xfeffffff

08009458 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009458:	b5b0      	push	{r4, r5, r7, lr}
 800945a:	b084      	sub	sp, #16
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d101      	bne.n	800946c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009468:	2301      	movs	r3, #1
 800946a:	e10d      	b.n	8009688 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800946c:	4b88      	ldr	r3, [pc, #544]	; (8009690 <HAL_RCC_ClockConfig+0x238>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	2201      	movs	r2, #1
 8009472:	4013      	ands	r3, r2
 8009474:	683a      	ldr	r2, [r7, #0]
 8009476:	429a      	cmp	r2, r3
 8009478:	d911      	bls.n	800949e <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800947a:	4b85      	ldr	r3, [pc, #532]	; (8009690 <HAL_RCC_ClockConfig+0x238>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	2201      	movs	r2, #1
 8009480:	4393      	bics	r3, r2
 8009482:	0019      	movs	r1, r3
 8009484:	4b82      	ldr	r3, [pc, #520]	; (8009690 <HAL_RCC_ClockConfig+0x238>)
 8009486:	683a      	ldr	r2, [r7, #0]
 8009488:	430a      	orrs	r2, r1
 800948a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800948c:	4b80      	ldr	r3, [pc, #512]	; (8009690 <HAL_RCC_ClockConfig+0x238>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	2201      	movs	r2, #1
 8009492:	4013      	ands	r3, r2
 8009494:	683a      	ldr	r2, [r7, #0]
 8009496:	429a      	cmp	r2, r3
 8009498:	d001      	beq.n	800949e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800949a:	2301      	movs	r3, #1
 800949c:	e0f4      	b.n	8009688 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	2202      	movs	r2, #2
 80094a4:	4013      	ands	r3, r2
 80094a6:	d009      	beq.n	80094bc <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80094a8:	4b7a      	ldr	r3, [pc, #488]	; (8009694 <HAL_RCC_ClockConfig+0x23c>)
 80094aa:	68db      	ldr	r3, [r3, #12]
 80094ac:	22f0      	movs	r2, #240	; 0xf0
 80094ae:	4393      	bics	r3, r2
 80094b0:	0019      	movs	r1, r3
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	689a      	ldr	r2, [r3, #8]
 80094b6:	4b77      	ldr	r3, [pc, #476]	; (8009694 <HAL_RCC_ClockConfig+0x23c>)
 80094b8:	430a      	orrs	r2, r1
 80094ba:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	2201      	movs	r2, #1
 80094c2:	4013      	ands	r3, r2
 80094c4:	d100      	bne.n	80094c8 <HAL_RCC_ClockConfig+0x70>
 80094c6:	e089      	b.n	80095dc <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	2b02      	cmp	r3, #2
 80094ce:	d107      	bne.n	80094e0 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80094d0:	4b70      	ldr	r3, [pc, #448]	; (8009694 <HAL_RCC_ClockConfig+0x23c>)
 80094d2:	681a      	ldr	r2, [r3, #0]
 80094d4:	2380      	movs	r3, #128	; 0x80
 80094d6:	029b      	lsls	r3, r3, #10
 80094d8:	4013      	ands	r3, r2
 80094da:	d120      	bne.n	800951e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80094dc:	2301      	movs	r3, #1
 80094de:	e0d3      	b.n	8009688 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	685b      	ldr	r3, [r3, #4]
 80094e4:	2b03      	cmp	r3, #3
 80094e6:	d107      	bne.n	80094f8 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80094e8:	4b6a      	ldr	r3, [pc, #424]	; (8009694 <HAL_RCC_ClockConfig+0x23c>)
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	2380      	movs	r3, #128	; 0x80
 80094ee:	049b      	lsls	r3, r3, #18
 80094f0:	4013      	ands	r3, r2
 80094f2:	d114      	bne.n	800951e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80094f4:	2301      	movs	r3, #1
 80094f6:	e0c7      	b.n	8009688 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	685b      	ldr	r3, [r3, #4]
 80094fc:	2b01      	cmp	r3, #1
 80094fe:	d106      	bne.n	800950e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009500:	4b64      	ldr	r3, [pc, #400]	; (8009694 <HAL_RCC_ClockConfig+0x23c>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	2204      	movs	r2, #4
 8009506:	4013      	ands	r3, r2
 8009508:	d109      	bne.n	800951e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800950a:	2301      	movs	r3, #1
 800950c:	e0bc      	b.n	8009688 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800950e:	4b61      	ldr	r3, [pc, #388]	; (8009694 <HAL_RCC_ClockConfig+0x23c>)
 8009510:	681a      	ldr	r2, [r3, #0]
 8009512:	2380      	movs	r3, #128	; 0x80
 8009514:	009b      	lsls	r3, r3, #2
 8009516:	4013      	ands	r3, r2
 8009518:	d101      	bne.n	800951e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800951a:	2301      	movs	r3, #1
 800951c:	e0b4      	b.n	8009688 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800951e:	4b5d      	ldr	r3, [pc, #372]	; (8009694 <HAL_RCC_ClockConfig+0x23c>)
 8009520:	68db      	ldr	r3, [r3, #12]
 8009522:	2203      	movs	r2, #3
 8009524:	4393      	bics	r3, r2
 8009526:	0019      	movs	r1, r3
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	685a      	ldr	r2, [r3, #4]
 800952c:	4b59      	ldr	r3, [pc, #356]	; (8009694 <HAL_RCC_ClockConfig+0x23c>)
 800952e:	430a      	orrs	r2, r1
 8009530:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009532:	f7fe f835 	bl	80075a0 <HAL_GetTick>
 8009536:	0003      	movs	r3, r0
 8009538:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	2b02      	cmp	r3, #2
 8009540:	d111      	bne.n	8009566 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009542:	e009      	b.n	8009558 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009544:	f7fe f82c 	bl	80075a0 <HAL_GetTick>
 8009548:	0002      	movs	r2, r0
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	1ad3      	subs	r3, r2, r3
 800954e:	4a52      	ldr	r2, [pc, #328]	; (8009698 <HAL_RCC_ClockConfig+0x240>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d901      	bls.n	8009558 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8009554:	2303      	movs	r3, #3
 8009556:	e097      	b.n	8009688 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009558:	4b4e      	ldr	r3, [pc, #312]	; (8009694 <HAL_RCC_ClockConfig+0x23c>)
 800955a:	68db      	ldr	r3, [r3, #12]
 800955c:	220c      	movs	r2, #12
 800955e:	4013      	ands	r3, r2
 8009560:	2b08      	cmp	r3, #8
 8009562:	d1ef      	bne.n	8009544 <HAL_RCC_ClockConfig+0xec>
 8009564:	e03a      	b.n	80095dc <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	2b03      	cmp	r3, #3
 800956c:	d111      	bne.n	8009592 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800956e:	e009      	b.n	8009584 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009570:	f7fe f816 	bl	80075a0 <HAL_GetTick>
 8009574:	0002      	movs	r2, r0
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	1ad3      	subs	r3, r2, r3
 800957a:	4a47      	ldr	r2, [pc, #284]	; (8009698 <HAL_RCC_ClockConfig+0x240>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d901      	bls.n	8009584 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8009580:	2303      	movs	r3, #3
 8009582:	e081      	b.n	8009688 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009584:	4b43      	ldr	r3, [pc, #268]	; (8009694 <HAL_RCC_ClockConfig+0x23c>)
 8009586:	68db      	ldr	r3, [r3, #12]
 8009588:	220c      	movs	r2, #12
 800958a:	4013      	ands	r3, r2
 800958c:	2b0c      	cmp	r3, #12
 800958e:	d1ef      	bne.n	8009570 <HAL_RCC_ClockConfig+0x118>
 8009590:	e024      	b.n	80095dc <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	685b      	ldr	r3, [r3, #4]
 8009596:	2b01      	cmp	r3, #1
 8009598:	d11b      	bne.n	80095d2 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800959a:	e009      	b.n	80095b0 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800959c:	f7fe f800 	bl	80075a0 <HAL_GetTick>
 80095a0:	0002      	movs	r2, r0
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	1ad3      	subs	r3, r2, r3
 80095a6:	4a3c      	ldr	r2, [pc, #240]	; (8009698 <HAL_RCC_ClockConfig+0x240>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d901      	bls.n	80095b0 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 80095ac:	2303      	movs	r3, #3
 80095ae:	e06b      	b.n	8009688 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80095b0:	4b38      	ldr	r3, [pc, #224]	; (8009694 <HAL_RCC_ClockConfig+0x23c>)
 80095b2:	68db      	ldr	r3, [r3, #12]
 80095b4:	220c      	movs	r2, #12
 80095b6:	4013      	ands	r3, r2
 80095b8:	2b04      	cmp	r3, #4
 80095ba:	d1ef      	bne.n	800959c <HAL_RCC_ClockConfig+0x144>
 80095bc:	e00e      	b.n	80095dc <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80095be:	f7fd ffef 	bl	80075a0 <HAL_GetTick>
 80095c2:	0002      	movs	r2, r0
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	1ad3      	subs	r3, r2, r3
 80095c8:	4a33      	ldr	r2, [pc, #204]	; (8009698 <HAL_RCC_ClockConfig+0x240>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d901      	bls.n	80095d2 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 80095ce:	2303      	movs	r3, #3
 80095d0:	e05a      	b.n	8009688 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80095d2:	4b30      	ldr	r3, [pc, #192]	; (8009694 <HAL_RCC_ClockConfig+0x23c>)
 80095d4:	68db      	ldr	r3, [r3, #12]
 80095d6:	220c      	movs	r2, #12
 80095d8:	4013      	ands	r3, r2
 80095da:	d1f0      	bne.n	80095be <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80095dc:	4b2c      	ldr	r3, [pc, #176]	; (8009690 <HAL_RCC_ClockConfig+0x238>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	2201      	movs	r2, #1
 80095e2:	4013      	ands	r3, r2
 80095e4:	683a      	ldr	r2, [r7, #0]
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d211      	bcs.n	800960e <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80095ea:	4b29      	ldr	r3, [pc, #164]	; (8009690 <HAL_RCC_ClockConfig+0x238>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	2201      	movs	r2, #1
 80095f0:	4393      	bics	r3, r2
 80095f2:	0019      	movs	r1, r3
 80095f4:	4b26      	ldr	r3, [pc, #152]	; (8009690 <HAL_RCC_ClockConfig+0x238>)
 80095f6:	683a      	ldr	r2, [r7, #0]
 80095f8:	430a      	orrs	r2, r1
 80095fa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80095fc:	4b24      	ldr	r3, [pc, #144]	; (8009690 <HAL_RCC_ClockConfig+0x238>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	2201      	movs	r2, #1
 8009602:	4013      	ands	r3, r2
 8009604:	683a      	ldr	r2, [r7, #0]
 8009606:	429a      	cmp	r2, r3
 8009608:	d001      	beq.n	800960e <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 800960a:	2301      	movs	r3, #1
 800960c:	e03c      	b.n	8009688 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	2204      	movs	r2, #4
 8009614:	4013      	ands	r3, r2
 8009616:	d009      	beq.n	800962c <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009618:	4b1e      	ldr	r3, [pc, #120]	; (8009694 <HAL_RCC_ClockConfig+0x23c>)
 800961a:	68db      	ldr	r3, [r3, #12]
 800961c:	4a1f      	ldr	r2, [pc, #124]	; (800969c <HAL_RCC_ClockConfig+0x244>)
 800961e:	4013      	ands	r3, r2
 8009620:	0019      	movs	r1, r3
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	68da      	ldr	r2, [r3, #12]
 8009626:	4b1b      	ldr	r3, [pc, #108]	; (8009694 <HAL_RCC_ClockConfig+0x23c>)
 8009628:	430a      	orrs	r2, r1
 800962a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	2208      	movs	r2, #8
 8009632:	4013      	ands	r3, r2
 8009634:	d00a      	beq.n	800964c <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009636:	4b17      	ldr	r3, [pc, #92]	; (8009694 <HAL_RCC_ClockConfig+0x23c>)
 8009638:	68db      	ldr	r3, [r3, #12]
 800963a:	4a19      	ldr	r2, [pc, #100]	; (80096a0 <HAL_RCC_ClockConfig+0x248>)
 800963c:	4013      	ands	r3, r2
 800963e:	0019      	movs	r1, r3
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	691b      	ldr	r3, [r3, #16]
 8009644:	00da      	lsls	r2, r3, #3
 8009646:	4b13      	ldr	r3, [pc, #76]	; (8009694 <HAL_RCC_ClockConfig+0x23c>)
 8009648:	430a      	orrs	r2, r1
 800964a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800964c:	f000 f82e 	bl	80096ac <HAL_RCC_GetSysClockFreq>
 8009650:	0001      	movs	r1, r0
 8009652:	4b10      	ldr	r3, [pc, #64]	; (8009694 <HAL_RCC_ClockConfig+0x23c>)
 8009654:	68db      	ldr	r3, [r3, #12]
 8009656:	091b      	lsrs	r3, r3, #4
 8009658:	220f      	movs	r2, #15
 800965a:	4013      	ands	r3, r2
 800965c:	4a11      	ldr	r2, [pc, #68]	; (80096a4 <HAL_RCC_ClockConfig+0x24c>)
 800965e:	5cd3      	ldrb	r3, [r2, r3]
 8009660:	000a      	movs	r2, r1
 8009662:	40da      	lsrs	r2, r3
 8009664:	4b10      	ldr	r3, [pc, #64]	; (80096a8 <HAL_RCC_ClockConfig+0x250>)
 8009666:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8009668:	250b      	movs	r5, #11
 800966a:	197c      	adds	r4, r7, r5
 800966c:	2000      	movs	r0, #0
 800966e:	f7fd ff51 	bl	8007514 <HAL_InitTick>
 8009672:	0003      	movs	r3, r0
 8009674:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8009676:	197b      	adds	r3, r7, r5
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d003      	beq.n	8009686 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 800967e:	230b      	movs	r3, #11
 8009680:	18fb      	adds	r3, r7, r3
 8009682:	781b      	ldrb	r3, [r3, #0]
 8009684:	e000      	b.n	8009688 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8009686:	2300      	movs	r3, #0
}
 8009688:	0018      	movs	r0, r3
 800968a:	46bd      	mov	sp, r7
 800968c:	b004      	add	sp, #16
 800968e:	bdb0      	pop	{r4, r5, r7, pc}
 8009690:	40022000 	.word	0x40022000
 8009694:	40021000 	.word	0x40021000
 8009698:	00001388 	.word	0x00001388
 800969c:	fffff8ff 	.word	0xfffff8ff
 80096a0:	ffffc7ff 	.word	0xffffc7ff
 80096a4:	0800d530 	.word	0x0800d530
 80096a8:	20000020 	.word	0x20000020

080096ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b086      	sub	sp, #24
 80096b0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80096b2:	4b3b      	ldr	r3, [pc, #236]	; (80097a0 <HAL_RCC_GetSysClockFreq+0xf4>)
 80096b4:	68db      	ldr	r3, [r3, #12]
 80096b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	220c      	movs	r2, #12
 80096bc:	4013      	ands	r3, r2
 80096be:	2b08      	cmp	r3, #8
 80096c0:	d00e      	beq.n	80096e0 <HAL_RCC_GetSysClockFreq+0x34>
 80096c2:	2b0c      	cmp	r3, #12
 80096c4:	d00f      	beq.n	80096e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80096c6:	2b04      	cmp	r3, #4
 80096c8:	d157      	bne.n	800977a <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80096ca:	4b35      	ldr	r3, [pc, #212]	; (80097a0 <HAL_RCC_GetSysClockFreq+0xf4>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	2210      	movs	r2, #16
 80096d0:	4013      	ands	r3, r2
 80096d2:	d002      	beq.n	80096da <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80096d4:	4b33      	ldr	r3, [pc, #204]	; (80097a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80096d6:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80096d8:	e05d      	b.n	8009796 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 80096da:	4b33      	ldr	r3, [pc, #204]	; (80097a8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80096dc:	613b      	str	r3, [r7, #16]
      break;
 80096de:	e05a      	b.n	8009796 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80096e0:	4b32      	ldr	r3, [pc, #200]	; (80097ac <HAL_RCC_GetSysClockFreq+0x100>)
 80096e2:	613b      	str	r3, [r7, #16]
      break;
 80096e4:	e057      	b.n	8009796 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	0c9b      	lsrs	r3, r3, #18
 80096ea:	220f      	movs	r2, #15
 80096ec:	4013      	ands	r3, r2
 80096ee:	4a30      	ldr	r2, [pc, #192]	; (80097b0 <HAL_RCC_GetSysClockFreq+0x104>)
 80096f0:	5cd3      	ldrb	r3, [r2, r3]
 80096f2:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	0d9b      	lsrs	r3, r3, #22
 80096f8:	2203      	movs	r2, #3
 80096fa:	4013      	ands	r3, r2
 80096fc:	3301      	adds	r3, #1
 80096fe:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009700:	4b27      	ldr	r3, [pc, #156]	; (80097a0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8009702:	68da      	ldr	r2, [r3, #12]
 8009704:	2380      	movs	r3, #128	; 0x80
 8009706:	025b      	lsls	r3, r3, #9
 8009708:	4013      	ands	r3, r2
 800970a:	d00f      	beq.n	800972c <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 800970c:	68b9      	ldr	r1, [r7, #8]
 800970e:	000a      	movs	r2, r1
 8009710:	0152      	lsls	r2, r2, #5
 8009712:	1a52      	subs	r2, r2, r1
 8009714:	0193      	lsls	r3, r2, #6
 8009716:	1a9b      	subs	r3, r3, r2
 8009718:	00db      	lsls	r3, r3, #3
 800971a:	185b      	adds	r3, r3, r1
 800971c:	025b      	lsls	r3, r3, #9
 800971e:	6879      	ldr	r1, [r7, #4]
 8009720:	0018      	movs	r0, r3
 8009722:	f7f6 fcf9 	bl	8000118 <__udivsi3>
 8009726:	0003      	movs	r3, r0
 8009728:	617b      	str	r3, [r7, #20]
 800972a:	e023      	b.n	8009774 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800972c:	4b1c      	ldr	r3, [pc, #112]	; (80097a0 <HAL_RCC_GetSysClockFreq+0xf4>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	2210      	movs	r2, #16
 8009732:	4013      	ands	r3, r2
 8009734:	d00f      	beq.n	8009756 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8009736:	68b9      	ldr	r1, [r7, #8]
 8009738:	000a      	movs	r2, r1
 800973a:	0152      	lsls	r2, r2, #5
 800973c:	1a52      	subs	r2, r2, r1
 800973e:	0193      	lsls	r3, r2, #6
 8009740:	1a9b      	subs	r3, r3, r2
 8009742:	00db      	lsls	r3, r3, #3
 8009744:	185b      	adds	r3, r3, r1
 8009746:	021b      	lsls	r3, r3, #8
 8009748:	6879      	ldr	r1, [r7, #4]
 800974a:	0018      	movs	r0, r3
 800974c:	f7f6 fce4 	bl	8000118 <__udivsi3>
 8009750:	0003      	movs	r3, r0
 8009752:	617b      	str	r3, [r7, #20]
 8009754:	e00e      	b.n	8009774 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8009756:	68b9      	ldr	r1, [r7, #8]
 8009758:	000a      	movs	r2, r1
 800975a:	0152      	lsls	r2, r2, #5
 800975c:	1a52      	subs	r2, r2, r1
 800975e:	0193      	lsls	r3, r2, #6
 8009760:	1a9b      	subs	r3, r3, r2
 8009762:	00db      	lsls	r3, r3, #3
 8009764:	185b      	adds	r3, r3, r1
 8009766:	029b      	lsls	r3, r3, #10
 8009768:	6879      	ldr	r1, [r7, #4]
 800976a:	0018      	movs	r0, r3
 800976c:	f7f6 fcd4 	bl	8000118 <__udivsi3>
 8009770:	0003      	movs	r3, r0
 8009772:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	613b      	str	r3, [r7, #16]
      break;
 8009778:	e00d      	b.n	8009796 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800977a:	4b09      	ldr	r3, [pc, #36]	; (80097a0 <HAL_RCC_GetSysClockFreq+0xf4>)
 800977c:	685b      	ldr	r3, [r3, #4]
 800977e:	0b5b      	lsrs	r3, r3, #13
 8009780:	2207      	movs	r2, #7
 8009782:	4013      	ands	r3, r2
 8009784:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	3301      	adds	r3, #1
 800978a:	2280      	movs	r2, #128	; 0x80
 800978c:	0212      	lsls	r2, r2, #8
 800978e:	409a      	lsls	r2, r3
 8009790:	0013      	movs	r3, r2
 8009792:	613b      	str	r3, [r7, #16]
      break;
 8009794:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8009796:	693b      	ldr	r3, [r7, #16]
}
 8009798:	0018      	movs	r0, r3
 800979a:	46bd      	mov	sp, r7
 800979c:	b006      	add	sp, #24
 800979e:	bd80      	pop	{r7, pc}
 80097a0:	40021000 	.word	0x40021000
 80097a4:	003d0900 	.word	0x003d0900
 80097a8:	00f42400 	.word	0x00f42400
 80097ac:	007a1200 	.word	0x007a1200
 80097b0:	0800d540 	.word	0x0800d540

080097b4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b086      	sub	sp, #24
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	2220      	movs	r2, #32
 80097c2:	4013      	ands	r3, r2
 80097c4:	d106      	bne.n	80097d4 <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681a      	ldr	r2, [r3, #0]
 80097ca:	2380      	movs	r3, #128	; 0x80
 80097cc:	011b      	lsls	r3, r3, #4
 80097ce:	4013      	ands	r3, r2
 80097d0:	d100      	bne.n	80097d4 <HAL_RCCEx_PeriphCLKConfig+0x20>
 80097d2:	e0dd      	b.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 80097d4:	2317      	movs	r3, #23
 80097d6:	18fb      	adds	r3, r7, r3
 80097d8:	2200      	movs	r2, #0
 80097da:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80097dc:	4ba4      	ldr	r3, [pc, #656]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80097de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097e0:	2380      	movs	r3, #128	; 0x80
 80097e2:	055b      	lsls	r3, r3, #21
 80097e4:	4013      	ands	r3, r2
 80097e6:	d10a      	bne.n	80097fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80097e8:	4ba1      	ldr	r3, [pc, #644]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80097ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097ec:	4ba0      	ldr	r3, [pc, #640]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80097ee:	2180      	movs	r1, #128	; 0x80
 80097f0:	0549      	lsls	r1, r1, #21
 80097f2:	430a      	orrs	r2, r1
 80097f4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80097f6:	2317      	movs	r3, #23
 80097f8:	18fb      	adds	r3, r7, r3
 80097fa:	2201      	movs	r2, #1
 80097fc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80097fe:	4b9d      	ldr	r3, [pc, #628]	; (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8009800:	681a      	ldr	r2, [r3, #0]
 8009802:	2380      	movs	r3, #128	; 0x80
 8009804:	005b      	lsls	r3, r3, #1
 8009806:	4013      	ands	r3, r2
 8009808:	d11a      	bne.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800980a:	4b9a      	ldr	r3, [pc, #616]	; (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800980c:	681a      	ldr	r2, [r3, #0]
 800980e:	4b99      	ldr	r3, [pc, #612]	; (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8009810:	2180      	movs	r1, #128	; 0x80
 8009812:	0049      	lsls	r1, r1, #1
 8009814:	430a      	orrs	r2, r1
 8009816:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009818:	f7fd fec2 	bl	80075a0 <HAL_GetTick>
 800981c:	0003      	movs	r3, r0
 800981e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009820:	e008      	b.n	8009834 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009822:	f7fd febd 	bl	80075a0 <HAL_GetTick>
 8009826:	0002      	movs	r2, r0
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	1ad3      	subs	r3, r2, r3
 800982c:	2b64      	cmp	r3, #100	; 0x64
 800982e:	d901      	bls.n	8009834 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8009830:	2303      	movs	r3, #3
 8009832:	e118      	b.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009834:	4b8f      	ldr	r3, [pc, #572]	; (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8009836:	681a      	ldr	r2, [r3, #0]
 8009838:	2380      	movs	r3, #128	; 0x80
 800983a:	005b      	lsls	r3, r3, #1
 800983c:	4013      	ands	r3, r2
 800983e:	d0f0      	beq.n	8009822 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8009840:	4b8b      	ldr	r3, [pc, #556]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8009842:	681a      	ldr	r2, [r3, #0]
 8009844:	23c0      	movs	r3, #192	; 0xc0
 8009846:	039b      	lsls	r3, r3, #14
 8009848:	4013      	ands	r3, r2
 800984a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	685a      	ldr	r2, [r3, #4]
 8009850:	23c0      	movs	r3, #192	; 0xc0
 8009852:	039b      	lsls	r3, r3, #14
 8009854:	4013      	ands	r3, r2
 8009856:	68fa      	ldr	r2, [r7, #12]
 8009858:	429a      	cmp	r2, r3
 800985a:	d107      	bne.n	800986c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	689a      	ldr	r2, [r3, #8]
 8009860:	23c0      	movs	r3, #192	; 0xc0
 8009862:	039b      	lsls	r3, r3, #14
 8009864:	4013      	ands	r3, r2
 8009866:	68fa      	ldr	r2, [r7, #12]
 8009868:	429a      	cmp	r2, r3
 800986a:	d013      	beq.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	685a      	ldr	r2, [r3, #4]
 8009870:	23c0      	movs	r3, #192	; 0xc0
 8009872:	029b      	lsls	r3, r3, #10
 8009874:	401a      	ands	r2, r3
 8009876:	23c0      	movs	r3, #192	; 0xc0
 8009878:	029b      	lsls	r3, r3, #10
 800987a:	429a      	cmp	r2, r3
 800987c:	d10a      	bne.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800987e:	4b7c      	ldr	r3, [pc, #496]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8009880:	681a      	ldr	r2, [r3, #0]
 8009882:	2380      	movs	r3, #128	; 0x80
 8009884:	029b      	lsls	r3, r3, #10
 8009886:	401a      	ands	r2, r3
 8009888:	2380      	movs	r3, #128	; 0x80
 800988a:	029b      	lsls	r3, r3, #10
 800988c:	429a      	cmp	r2, r3
 800988e:	d101      	bne.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8009890:	2301      	movs	r3, #1
 8009892:	e0e8      	b.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8009894:	4b76      	ldr	r3, [pc, #472]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8009896:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009898:	23c0      	movs	r3, #192	; 0xc0
 800989a:	029b      	lsls	r3, r3, #10
 800989c:	4013      	ands	r3, r2
 800989e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d049      	beq.n	800993a <HAL_RCCEx_PeriphCLKConfig+0x186>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	685a      	ldr	r2, [r3, #4]
 80098aa:	23c0      	movs	r3, #192	; 0xc0
 80098ac:	029b      	lsls	r3, r3, #10
 80098ae:	4013      	ands	r3, r2
 80098b0:	68fa      	ldr	r2, [r7, #12]
 80098b2:	429a      	cmp	r2, r3
 80098b4:	d004      	beq.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	2220      	movs	r2, #32
 80098bc:	4013      	ands	r3, r2
 80098be:	d10d      	bne.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	689a      	ldr	r2, [r3, #8]
 80098c4:	23c0      	movs	r3, #192	; 0xc0
 80098c6:	029b      	lsls	r3, r3, #10
 80098c8:	4013      	ands	r3, r2
 80098ca:	68fa      	ldr	r2, [r7, #12]
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d034      	beq.n	800993a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681a      	ldr	r2, [r3, #0]
 80098d4:	2380      	movs	r3, #128	; 0x80
 80098d6:	011b      	lsls	r3, r3, #4
 80098d8:	4013      	ands	r3, r2
 80098da:	d02e      	beq.n	800993a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80098dc:	4b64      	ldr	r3, [pc, #400]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80098de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098e0:	4a65      	ldr	r2, [pc, #404]	; (8009a78 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80098e2:	4013      	ands	r3, r2
 80098e4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80098e6:	4b62      	ldr	r3, [pc, #392]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80098e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80098ea:	4b61      	ldr	r3, [pc, #388]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80098ec:	2180      	movs	r1, #128	; 0x80
 80098ee:	0309      	lsls	r1, r1, #12
 80098f0:	430a      	orrs	r2, r1
 80098f2:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80098f4:	4b5e      	ldr	r3, [pc, #376]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80098f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80098f8:	4b5d      	ldr	r3, [pc, #372]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80098fa:	4960      	ldr	r1, [pc, #384]	; (8009a7c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80098fc:	400a      	ands	r2, r1
 80098fe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8009900:	4b5b      	ldr	r3, [pc, #364]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8009902:	68fa      	ldr	r2, [r7, #12]
 8009904:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8009906:	68fa      	ldr	r2, [r7, #12]
 8009908:	2380      	movs	r3, #128	; 0x80
 800990a:	005b      	lsls	r3, r3, #1
 800990c:	4013      	ands	r3, r2
 800990e:	d014      	beq.n	800993a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009910:	f7fd fe46 	bl	80075a0 <HAL_GetTick>
 8009914:	0003      	movs	r3, r0
 8009916:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009918:	e009      	b.n	800992e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800991a:	f7fd fe41 	bl	80075a0 <HAL_GetTick>
 800991e:	0002      	movs	r2, r0
 8009920:	693b      	ldr	r3, [r7, #16]
 8009922:	1ad3      	subs	r3, r2, r3
 8009924:	4a56      	ldr	r2, [pc, #344]	; (8009a80 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d901      	bls.n	800992e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800992a:	2303      	movs	r3, #3
 800992c:	e09b      	b.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800992e:	4b50      	ldr	r3, [pc, #320]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8009930:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009932:	2380      	movs	r3, #128	; 0x80
 8009934:	009b      	lsls	r3, r3, #2
 8009936:	4013      	ands	r3, r2
 8009938:	d0ef      	beq.n	800991a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	685a      	ldr	r2, [r3, #4]
 800993e:	23c0      	movs	r3, #192	; 0xc0
 8009940:	029b      	lsls	r3, r3, #10
 8009942:	401a      	ands	r2, r3
 8009944:	23c0      	movs	r3, #192	; 0xc0
 8009946:	029b      	lsls	r3, r3, #10
 8009948:	429a      	cmp	r2, r3
 800994a:	d10c      	bne.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800994c:	4b48      	ldr	r3, [pc, #288]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4a4c      	ldr	r2, [pc, #304]	; (8009a84 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8009952:	4013      	ands	r3, r2
 8009954:	0019      	movs	r1, r3
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	685a      	ldr	r2, [r3, #4]
 800995a:	23c0      	movs	r3, #192	; 0xc0
 800995c:	039b      	lsls	r3, r3, #14
 800995e:	401a      	ands	r2, r3
 8009960:	4b43      	ldr	r3, [pc, #268]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8009962:	430a      	orrs	r2, r1
 8009964:	601a      	str	r2, [r3, #0]
 8009966:	4b42      	ldr	r3, [pc, #264]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8009968:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	685a      	ldr	r2, [r3, #4]
 800996e:	23c0      	movs	r3, #192	; 0xc0
 8009970:	029b      	lsls	r3, r3, #10
 8009972:	401a      	ands	r2, r3
 8009974:	4b3e      	ldr	r3, [pc, #248]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8009976:	430a      	orrs	r2, r1
 8009978:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800997a:	2317      	movs	r3, #23
 800997c:	18fb      	adds	r3, r7, r3
 800997e:	781b      	ldrb	r3, [r3, #0]
 8009980:	2b01      	cmp	r3, #1
 8009982:	d105      	bne.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009984:	4b3a      	ldr	r3, [pc, #232]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8009986:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009988:	4b39      	ldr	r3, [pc, #228]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800998a:	493f      	ldr	r1, [pc, #252]	; (8009a88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800998c:	400a      	ands	r2, r1
 800998e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	2201      	movs	r2, #1
 8009996:	4013      	ands	r3, r2
 8009998:	d009      	beq.n	80099ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800999a:	4b35      	ldr	r3, [pc, #212]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800999c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800999e:	2203      	movs	r2, #3
 80099a0:	4393      	bics	r3, r2
 80099a2:	0019      	movs	r1, r3
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	68da      	ldr	r2, [r3, #12]
 80099a8:	4b31      	ldr	r3, [pc, #196]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80099aa:	430a      	orrs	r2, r1
 80099ac:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	2202      	movs	r2, #2
 80099b4:	4013      	ands	r3, r2
 80099b6:	d009      	beq.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80099b8:	4b2d      	ldr	r3, [pc, #180]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80099ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099bc:	220c      	movs	r2, #12
 80099be:	4393      	bics	r3, r2
 80099c0:	0019      	movs	r1, r3
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	691a      	ldr	r2, [r3, #16]
 80099c6:	4b2a      	ldr	r3, [pc, #168]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80099c8:	430a      	orrs	r2, r1
 80099ca:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	2204      	movs	r2, #4
 80099d2:	4013      	ands	r3, r2
 80099d4:	d009      	beq.n	80099ea <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80099d6:	4b26      	ldr	r3, [pc, #152]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80099d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099da:	4a2c      	ldr	r2, [pc, #176]	; (8009a8c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80099dc:	4013      	ands	r3, r2
 80099de:	0019      	movs	r1, r3
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	695a      	ldr	r2, [r3, #20]
 80099e4:	4b22      	ldr	r3, [pc, #136]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80099e6:	430a      	orrs	r2, r1
 80099e8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	2208      	movs	r2, #8
 80099f0:	4013      	ands	r3, r2
 80099f2:	d009      	beq.n	8009a08 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80099f4:	4b1e      	ldr	r3, [pc, #120]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80099f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099f8:	4a25      	ldr	r2, [pc, #148]	; (8009a90 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80099fa:	4013      	ands	r3, r2
 80099fc:	0019      	movs	r1, r3
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	699a      	ldr	r2, [r3, #24]
 8009a02:	4b1b      	ldr	r3, [pc, #108]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8009a04:	430a      	orrs	r2, r1
 8009a06:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681a      	ldr	r2, [r3, #0]
 8009a0c:	2380      	movs	r3, #128	; 0x80
 8009a0e:	005b      	lsls	r3, r3, #1
 8009a10:	4013      	ands	r3, r2
 8009a12:	d009      	beq.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009a14:	4b16      	ldr	r3, [pc, #88]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8009a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a18:	4a17      	ldr	r2, [pc, #92]	; (8009a78 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009a1a:	4013      	ands	r3, r2
 8009a1c:	0019      	movs	r1, r3
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	69da      	ldr	r2, [r3, #28]
 8009a22:	4b13      	ldr	r3, [pc, #76]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8009a24:	430a      	orrs	r2, r1
 8009a26:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	2240      	movs	r2, #64	; 0x40
 8009a2e:	4013      	ands	r3, r2
 8009a30:	d009      	beq.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009a32:	4b0f      	ldr	r3, [pc, #60]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8009a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a36:	4a17      	ldr	r2, [pc, #92]	; (8009a94 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8009a38:	4013      	ands	r3, r2
 8009a3a:	0019      	movs	r1, r3
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a40:	4b0b      	ldr	r3, [pc, #44]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8009a42:	430a      	orrs	r2, r1
 8009a44:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	2280      	movs	r2, #128	; 0x80
 8009a4c:	4013      	ands	r3, r2
 8009a4e:	d009      	beq.n	8009a64 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8009a50:	4b07      	ldr	r3, [pc, #28]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8009a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a54:	4a10      	ldr	r2, [pc, #64]	; (8009a98 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8009a56:	4013      	ands	r3, r2
 8009a58:	0019      	movs	r1, r3
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6a1a      	ldr	r2, [r3, #32]
 8009a5e:	4b04      	ldr	r3, [pc, #16]	; (8009a70 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8009a60:	430a      	orrs	r2, r1
 8009a62:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009a64:	2300      	movs	r3, #0
}
 8009a66:	0018      	movs	r0, r3
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	b006      	add	sp, #24
 8009a6c:	bd80      	pop	{r7, pc}
 8009a6e:	46c0      	nop			; (mov r8, r8)
 8009a70:	40021000 	.word	0x40021000
 8009a74:	40007000 	.word	0x40007000
 8009a78:	fffcffff 	.word	0xfffcffff
 8009a7c:	fff7ffff 	.word	0xfff7ffff
 8009a80:	00001388 	.word	0x00001388
 8009a84:	ffcfffff 	.word	0xffcfffff
 8009a88:	efffffff 	.word	0xefffffff
 8009a8c:	fffff3ff 	.word	0xfffff3ff
 8009a90:	ffffcfff 	.word	0xffffcfff
 8009a94:	fbffffff 	.word	0xfbffffff
 8009a98:	fff3ffff 	.word	0xfff3ffff

08009a9c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b082      	sub	sp, #8
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d101      	bne.n	8009aae <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8009aaa:	2301      	movs	r3, #1
 8009aac:	e08e      	b.n	8009bcc <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2221      	movs	r2, #33	; 0x21
 8009ab2:	5c9b      	ldrb	r3, [r3, r2]
 8009ab4:	b2db      	uxtb	r3, r3
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d107      	bne.n	8009aca <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2220      	movs	r2, #32
 8009abe:	2100      	movs	r1, #0
 8009ac0:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	0018      	movs	r0, r3
 8009ac6:	f7fa fdbd 	bl	8004644 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2221      	movs	r2, #33	; 0x21
 8009ace:	2102      	movs	r1, #2
 8009ad0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	22ca      	movs	r2, #202	; 0xca
 8009ad8:	625a      	str	r2, [r3, #36]	; 0x24
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	2253      	movs	r2, #83	; 0x53
 8009ae0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	0018      	movs	r0, r3
 8009ae6:	f000 fcf4 	bl	800a4d2 <RTC_EnterInitMode>
 8009aea:	1e03      	subs	r3, r0, #0
 8009aec:	d009      	beq.n	8009b02 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	22ff      	movs	r2, #255	; 0xff
 8009af4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2221      	movs	r2, #33	; 0x21
 8009afa:	2104      	movs	r1, #4
 8009afc:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8009afe:	2301      	movs	r3, #1
 8009b00:	e064      	b.n	8009bcc <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	689a      	ldr	r2, [r3, #8]
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4931      	ldr	r1, [pc, #196]	; (8009bd4 <HAL_RTC_Init+0x138>)
 8009b0e:	400a      	ands	r2, r1
 8009b10:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	6899      	ldr	r1, [r3, #8]
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	685a      	ldr	r2, [r3, #4]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	691b      	ldr	r3, [r3, #16]
 8009b20:	431a      	orrs	r2, r3
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	699b      	ldr	r3, [r3, #24]
 8009b26:	431a      	orrs	r2, r3
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	430a      	orrs	r2, r1
 8009b2e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	687a      	ldr	r2, [r7, #4]
 8009b36:	68d2      	ldr	r2, [r2, #12]
 8009b38:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	6919      	ldr	r1, [r3, #16]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	689b      	ldr	r3, [r3, #8]
 8009b44:	041a      	lsls	r2, r3, #16
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	430a      	orrs	r2, r1
 8009b4c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	68da      	ldr	r2, [r3, #12]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	2180      	movs	r1, #128	; 0x80
 8009b5a:	438a      	bics	r2, r1
 8009b5c:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	2103      	movs	r1, #3
 8009b6a:	438a      	bics	r2, r1
 8009b6c:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	69da      	ldr	r2, [r3, #28]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	695b      	ldr	r3, [r3, #20]
 8009b7c:	431a      	orrs	r2, r3
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	430a      	orrs	r2, r1
 8009b84:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	689b      	ldr	r3, [r3, #8]
 8009b8c:	2220      	movs	r2, #32
 8009b8e:	4013      	ands	r3, r2
 8009b90:	d113      	bne.n	8009bba <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	0018      	movs	r0, r3
 8009b96:	f000 fc75 	bl	800a484 <HAL_RTC_WaitForSynchro>
 8009b9a:	1e03      	subs	r3, r0, #0
 8009b9c:	d00d      	beq.n	8009bba <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	22ff      	movs	r2, #255	; 0xff
 8009ba4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2221      	movs	r2, #33	; 0x21
 8009baa:	2104      	movs	r1, #4
 8009bac:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2220      	movs	r2, #32
 8009bb2:	2100      	movs	r1, #0
 8009bb4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	e008      	b.n	8009bcc <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	22ff      	movs	r2, #255	; 0xff
 8009bc0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2221      	movs	r2, #33	; 0x21
 8009bc6:	2101      	movs	r1, #1
 8009bc8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009bca:	2300      	movs	r3, #0
  }
}
 8009bcc:	0018      	movs	r0, r3
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	b002      	add	sp, #8
 8009bd2:	bd80      	pop	{r7, pc}
 8009bd4:	ff8fffbf 	.word	0xff8fffbf

08009bd8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009bd8:	b590      	push	{r4, r7, lr}
 8009bda:	b087      	sub	sp, #28
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	60f8      	str	r0, [r7, #12]
 8009be0:	60b9      	str	r1, [r7, #8]
 8009be2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2220      	movs	r2, #32
 8009be8:	5c9b      	ldrb	r3, [r3, r2]
 8009bea:	2b01      	cmp	r3, #1
 8009bec:	d101      	bne.n	8009bf2 <HAL_RTC_SetTime+0x1a>
 8009bee:	2302      	movs	r3, #2
 8009bf0:	e0ad      	b.n	8009d4e <HAL_RTC_SetTime+0x176>
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2220      	movs	r2, #32
 8009bf6:	2101      	movs	r1, #1
 8009bf8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2221      	movs	r2, #33	; 0x21
 8009bfe:	2102      	movs	r1, #2
 8009c00:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d125      	bne.n	8009c54 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	689b      	ldr	r3, [r3, #8]
 8009c0e:	2240      	movs	r2, #64	; 0x40
 8009c10:	4013      	ands	r3, r2
 8009c12:	d102      	bne.n	8009c1a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	2200      	movs	r2, #0
 8009c18:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	781b      	ldrb	r3, [r3, #0]
 8009c1e:	0018      	movs	r0, r3
 8009c20:	f000 fc81 	bl	800a526 <RTC_ByteToBcd2>
 8009c24:	0003      	movs	r3, r0
 8009c26:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	785b      	ldrb	r3, [r3, #1]
 8009c2c:	0018      	movs	r0, r3
 8009c2e:	f000 fc7a 	bl	800a526 <RTC_ByteToBcd2>
 8009c32:	0003      	movs	r3, r0
 8009c34:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009c36:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	789b      	ldrb	r3, [r3, #2]
 8009c3c:	0018      	movs	r0, r3
 8009c3e:	f000 fc72 	bl	800a526 <RTC_ByteToBcd2>
 8009c42:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8009c44:	0022      	movs	r2, r4
 8009c46:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	78db      	ldrb	r3, [r3, #3]
 8009c4c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	617b      	str	r3, [r7, #20]
 8009c52:	e017      	b.n	8009c84 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	689b      	ldr	r3, [r3, #8]
 8009c5a:	2240      	movs	r2, #64	; 0x40
 8009c5c:	4013      	ands	r3, r2
 8009c5e:	d102      	bne.n	8009c66 <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	2200      	movs	r2, #0
 8009c64:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	781b      	ldrb	r3, [r3, #0]
 8009c6a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	785b      	ldrb	r3, [r3, #1]
 8009c70:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009c72:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8009c74:	68ba      	ldr	r2, [r7, #8]
 8009c76:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8009c78:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	78db      	ldrb	r3, [r3, #3]
 8009c7e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009c80:	4313      	orrs	r3, r2
 8009c82:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	22ca      	movs	r2, #202	; 0xca
 8009c8a:	625a      	str	r2, [r3, #36]	; 0x24
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	2253      	movs	r2, #83	; 0x53
 8009c92:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	0018      	movs	r0, r3
 8009c98:	f000 fc1b 	bl	800a4d2 <RTC_EnterInitMode>
 8009c9c:	1e03      	subs	r3, r0, #0
 8009c9e:	d00d      	beq.n	8009cbc <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	22ff      	movs	r2, #255	; 0xff
 8009ca6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	2221      	movs	r2, #33	; 0x21
 8009cac:	2104      	movs	r1, #4
 8009cae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2220      	movs	r2, #32
 8009cb4:	2100      	movs	r1, #0
 8009cb6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8009cb8:	2301      	movs	r3, #1
 8009cba:	e048      	b.n	8009d4e <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	697a      	ldr	r2, [r7, #20]
 8009cc2:	4925      	ldr	r1, [pc, #148]	; (8009d58 <HAL_RTC_SetTime+0x180>)
 8009cc4:	400a      	ands	r2, r1
 8009cc6:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	689a      	ldr	r2, [r3, #8]
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	4922      	ldr	r1, [pc, #136]	; (8009d5c <HAL_RTC_SetTime+0x184>)
 8009cd4:	400a      	ands	r2, r1
 8009cd6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	6899      	ldr	r1, [r3, #8]
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	68da      	ldr	r2, [r3, #12]
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	691b      	ldr	r3, [r3, #16]
 8009ce6:	431a      	orrs	r2, r3
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	430a      	orrs	r2, r1
 8009cee:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	68da      	ldr	r2, [r3, #12]
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	2180      	movs	r1, #128	; 0x80
 8009cfc:	438a      	bics	r2, r1
 8009cfe:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	689b      	ldr	r3, [r3, #8]
 8009d06:	2220      	movs	r2, #32
 8009d08:	4013      	ands	r3, r2
 8009d0a:	d113      	bne.n	8009d34 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	0018      	movs	r0, r3
 8009d10:	f000 fbb8 	bl	800a484 <HAL_RTC_WaitForSynchro>
 8009d14:	1e03      	subs	r3, r0, #0
 8009d16:	d00d      	beq.n	8009d34 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	22ff      	movs	r2, #255	; 0xff
 8009d1e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	2221      	movs	r2, #33	; 0x21
 8009d24:	2104      	movs	r1, #4
 8009d26:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	2220      	movs	r2, #32
 8009d2c:	2100      	movs	r1, #0
 8009d2e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8009d30:	2301      	movs	r3, #1
 8009d32:	e00c      	b.n	8009d4e <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	22ff      	movs	r2, #255	; 0xff
 8009d3a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	2221      	movs	r2, #33	; 0x21
 8009d40:	2101      	movs	r1, #1
 8009d42:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	2220      	movs	r2, #32
 8009d48:	2100      	movs	r1, #0
 8009d4a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009d4c:	2300      	movs	r3, #0
  }
}
 8009d4e:	0018      	movs	r0, r3
 8009d50:	46bd      	mov	sp, r7
 8009d52:	b007      	add	sp, #28
 8009d54:	bd90      	pop	{r4, r7, pc}
 8009d56:	46c0      	nop			; (mov r8, r8)
 8009d58:	007f7f7f 	.word	0x007f7f7f
 8009d5c:	fffbffff 	.word	0xfffbffff

08009d60 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b086      	sub	sp, #24
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	60f8      	str	r0, [r7, #12]
 8009d68:	60b9      	str	r1, [r7, #8]
 8009d6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	691b      	ldr	r3, [r3, #16]
 8009d7c:	045b      	lsls	r3, r3, #17
 8009d7e:	0c5a      	lsrs	r2, r3, #17
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	4a22      	ldr	r2, [pc, #136]	; (8009e14 <HAL_RTC_GetTime+0xb4>)
 8009d8c:	4013      	ands	r3, r2
 8009d8e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	0c1b      	lsrs	r3, r3, #16
 8009d94:	b2db      	uxtb	r3, r3
 8009d96:	223f      	movs	r2, #63	; 0x3f
 8009d98:	4013      	ands	r3, r2
 8009d9a:	b2da      	uxtb	r2, r3
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	0a1b      	lsrs	r3, r3, #8
 8009da4:	b2db      	uxtb	r3, r3
 8009da6:	227f      	movs	r2, #127	; 0x7f
 8009da8:	4013      	ands	r3, r2
 8009daa:	b2da      	uxtb	r2, r3
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	b2db      	uxtb	r3, r3
 8009db4:	227f      	movs	r2, #127	; 0x7f
 8009db6:	4013      	ands	r3, r2
 8009db8:	b2da      	uxtb	r2, r3
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	0c1b      	lsrs	r3, r3, #16
 8009dc2:	b2db      	uxtb	r3, r3
 8009dc4:	2240      	movs	r2, #64	; 0x40
 8009dc6:	4013      	ands	r3, r2
 8009dc8:	b2da      	uxtb	r2, r3
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d11a      	bne.n	8009e0a <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	781b      	ldrb	r3, [r3, #0]
 8009dd8:	0018      	movs	r0, r3
 8009dda:	f000 fbcd 	bl	800a578 <RTC_Bcd2ToByte>
 8009dde:	0003      	movs	r3, r0
 8009de0:	001a      	movs	r2, r3
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	785b      	ldrb	r3, [r3, #1]
 8009dea:	0018      	movs	r0, r3
 8009dec:	f000 fbc4 	bl	800a578 <RTC_Bcd2ToByte>
 8009df0:	0003      	movs	r3, r0
 8009df2:	001a      	movs	r2, r3
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	789b      	ldrb	r3, [r3, #2]
 8009dfc:	0018      	movs	r0, r3
 8009dfe:	f000 fbbb 	bl	800a578 <RTC_Bcd2ToByte>
 8009e02:	0003      	movs	r3, r0
 8009e04:	001a      	movs	r2, r3
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009e0a:	2300      	movs	r3, #0
}
 8009e0c:	0018      	movs	r0, r3
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	b006      	add	sp, #24
 8009e12:	bd80      	pop	{r7, pc}
 8009e14:	007f7f7f 	.word	0x007f7f7f

08009e18 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009e18:	b590      	push	{r4, r7, lr}
 8009e1a:	b087      	sub	sp, #28
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	60f8      	str	r0, [r7, #12]
 8009e20:	60b9      	str	r1, [r7, #8]
 8009e22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	2220      	movs	r2, #32
 8009e28:	5c9b      	ldrb	r3, [r3, r2]
 8009e2a:	2b01      	cmp	r3, #1
 8009e2c:	d101      	bne.n	8009e32 <HAL_RTC_SetDate+0x1a>
 8009e2e:	2302      	movs	r3, #2
 8009e30:	e099      	b.n	8009f66 <HAL_RTC_SetDate+0x14e>
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	2220      	movs	r2, #32
 8009e36:	2101      	movs	r1, #1
 8009e38:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2221      	movs	r2, #33	; 0x21
 8009e3e:	2102      	movs	r1, #2
 8009e40:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d10e      	bne.n	8009e66 <HAL_RTC_SetDate+0x4e>
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	785b      	ldrb	r3, [r3, #1]
 8009e4c:	001a      	movs	r2, r3
 8009e4e:	2310      	movs	r3, #16
 8009e50:	4013      	ands	r3, r2
 8009e52:	d008      	beq.n	8009e66 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	785b      	ldrb	r3, [r3, #1]
 8009e58:	2210      	movs	r2, #16
 8009e5a:	4393      	bics	r3, r2
 8009e5c:	b2db      	uxtb	r3, r3
 8009e5e:	330a      	adds	r3, #10
 8009e60:	b2da      	uxtb	r2, r3
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d11c      	bne.n	8009ea6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	78db      	ldrb	r3, [r3, #3]
 8009e70:	0018      	movs	r0, r3
 8009e72:	f000 fb58 	bl	800a526 <RTC_ByteToBcd2>
 8009e76:	0003      	movs	r3, r0
 8009e78:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	785b      	ldrb	r3, [r3, #1]
 8009e7e:	0018      	movs	r0, r3
 8009e80:	f000 fb51 	bl	800a526 <RTC_ByteToBcd2>
 8009e84:	0003      	movs	r3, r0
 8009e86:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009e88:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	789b      	ldrb	r3, [r3, #2]
 8009e8e:	0018      	movs	r0, r3
 8009e90:	f000 fb49 	bl	800a526 <RTC_ByteToBcd2>
 8009e94:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8009e96:	0022      	movs	r2, r4
 8009e98:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	781b      	ldrb	r3, [r3, #0]
 8009e9e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009ea0:	4313      	orrs	r3, r2
 8009ea2:	617b      	str	r3, [r7, #20]
 8009ea4:	e00e      	b.n	8009ec4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	78db      	ldrb	r3, [r3, #3]
 8009eaa:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	785b      	ldrb	r3, [r3, #1]
 8009eb0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009eb2:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8009eb4:	68ba      	ldr	r2, [r7, #8]
 8009eb6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8009eb8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	781b      	ldrb	r3, [r3, #0]
 8009ebe:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009ec0:	4313      	orrs	r3, r2
 8009ec2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	22ca      	movs	r2, #202	; 0xca
 8009eca:	625a      	str	r2, [r3, #36]	; 0x24
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	2253      	movs	r2, #83	; 0x53
 8009ed2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	0018      	movs	r0, r3
 8009ed8:	f000 fafb 	bl	800a4d2 <RTC_EnterInitMode>
 8009edc:	1e03      	subs	r3, r0, #0
 8009ede:	d00d      	beq.n	8009efc <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	22ff      	movs	r2, #255	; 0xff
 8009ee6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	2221      	movs	r2, #33	; 0x21
 8009eec:	2104      	movs	r1, #4
 8009eee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	2220      	movs	r2, #32
 8009ef4:	2100      	movs	r1, #0
 8009ef6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8009ef8:	2301      	movs	r3, #1
 8009efa:	e034      	b.n	8009f66 <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	697a      	ldr	r2, [r7, #20]
 8009f02:	491b      	ldr	r1, [pc, #108]	; (8009f70 <HAL_RTC_SetDate+0x158>)
 8009f04:	400a      	ands	r2, r1
 8009f06:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	68da      	ldr	r2, [r3, #12]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	2180      	movs	r1, #128	; 0x80
 8009f14:	438a      	bics	r2, r1
 8009f16:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	689b      	ldr	r3, [r3, #8]
 8009f1e:	2220      	movs	r2, #32
 8009f20:	4013      	ands	r3, r2
 8009f22:	d113      	bne.n	8009f4c <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	0018      	movs	r0, r3
 8009f28:	f000 faac 	bl	800a484 <HAL_RTC_WaitForSynchro>
 8009f2c:	1e03      	subs	r3, r0, #0
 8009f2e:	d00d      	beq.n	8009f4c <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	22ff      	movs	r2, #255	; 0xff
 8009f36:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	2221      	movs	r2, #33	; 0x21
 8009f3c:	2104      	movs	r1, #4
 8009f3e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	2220      	movs	r2, #32
 8009f44:	2100      	movs	r1, #0
 8009f46:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8009f48:	2301      	movs	r3, #1
 8009f4a:	e00c      	b.n	8009f66 <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	22ff      	movs	r2, #255	; 0xff
 8009f52:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	2221      	movs	r2, #33	; 0x21
 8009f58:	2101      	movs	r1, #1
 8009f5a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2220      	movs	r2, #32
 8009f60:	2100      	movs	r1, #0
 8009f62:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009f64:	2300      	movs	r3, #0
  }
}
 8009f66:	0018      	movs	r0, r3
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	b007      	add	sp, #28
 8009f6c:	bd90      	pop	{r4, r7, pc}
 8009f6e:	46c0      	nop			; (mov r8, r8)
 8009f70:	00ffff3f 	.word	0x00ffff3f

08009f74 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b086      	sub	sp, #24
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	60f8      	str	r0, [r7, #12]
 8009f7c:	60b9      	str	r1, [r7, #8]
 8009f7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	4a21      	ldr	r2, [pc, #132]	; (800a00c <HAL_RTC_GetDate+0x98>)
 8009f88:	4013      	ands	r3, r2
 8009f8a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8009f8c:	697b      	ldr	r3, [r7, #20]
 8009f8e:	0c1b      	lsrs	r3, r3, #16
 8009f90:	b2da      	uxtb	r2, r3
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	0a1b      	lsrs	r3, r3, #8
 8009f9a:	b2db      	uxtb	r3, r3
 8009f9c:	221f      	movs	r2, #31
 8009f9e:	4013      	ands	r3, r2
 8009fa0:	b2da      	uxtb	r2, r3
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009fa6:	697b      	ldr	r3, [r7, #20]
 8009fa8:	b2db      	uxtb	r3, r3
 8009faa:	223f      	movs	r2, #63	; 0x3f
 8009fac:	4013      	ands	r3, r2
 8009fae:	b2da      	uxtb	r2, r3
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	0b5b      	lsrs	r3, r3, #13
 8009fb8:	b2db      	uxtb	r3, r3
 8009fba:	2207      	movs	r2, #7
 8009fbc:	4013      	ands	r3, r2
 8009fbe:	b2da      	uxtb	r2, r3
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d11a      	bne.n	800a000 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	78db      	ldrb	r3, [r3, #3]
 8009fce:	0018      	movs	r0, r3
 8009fd0:	f000 fad2 	bl	800a578 <RTC_Bcd2ToByte>
 8009fd4:	0003      	movs	r3, r0
 8009fd6:	001a      	movs	r2, r3
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	785b      	ldrb	r3, [r3, #1]
 8009fe0:	0018      	movs	r0, r3
 8009fe2:	f000 fac9 	bl	800a578 <RTC_Bcd2ToByte>
 8009fe6:	0003      	movs	r3, r0
 8009fe8:	001a      	movs	r2, r3
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	789b      	ldrb	r3, [r3, #2]
 8009ff2:	0018      	movs	r0, r3
 8009ff4:	f000 fac0 	bl	800a578 <RTC_Bcd2ToByte>
 8009ff8:	0003      	movs	r3, r0
 8009ffa:	001a      	movs	r2, r3
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800a000:	2300      	movs	r3, #0
}
 800a002:	0018      	movs	r0, r3
 800a004:	46bd      	mov	sp, r7
 800a006:	b006      	add	sp, #24
 800a008:	bd80      	pop	{r7, pc}
 800a00a:	46c0      	nop			; (mov r8, r8)
 800a00c:	00ffff3f 	.word	0x00ffff3f

0800a010 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800a010:	b590      	push	{r4, r7, lr}
 800a012:	b089      	sub	sp, #36	; 0x24
 800a014:	af00      	add	r7, sp, #0
 800a016:	60f8      	str	r0, [r7, #12]
 800a018:	60b9      	str	r1, [r7, #8]
 800a01a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	2220      	movs	r2, #32
 800a020:	5c9b      	ldrb	r3, [r3, r2]
 800a022:	2b01      	cmp	r3, #1
 800a024:	d101      	bne.n	800a02a <HAL_RTC_SetAlarm_IT+0x1a>
 800a026:	2302      	movs	r3, #2
 800a028:	e130      	b.n	800a28c <HAL_RTC_SetAlarm_IT+0x27c>
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	2220      	movs	r2, #32
 800a02e:	2101      	movs	r1, #1
 800a030:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	2221      	movs	r2, #33	; 0x21
 800a036:	2102      	movs	r1, #2
 800a038:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d136      	bne.n	800a0ae <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	689b      	ldr	r3, [r3, #8]
 800a046:	2240      	movs	r2, #64	; 0x40
 800a048:	4013      	ands	r3, r2
 800a04a:	d102      	bne.n	800a052 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	2200      	movs	r2, #0
 800a050:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	781b      	ldrb	r3, [r3, #0]
 800a056:	0018      	movs	r0, r3
 800a058:	f000 fa65 	bl	800a526 <RTC_ByteToBcd2>
 800a05c:	0003      	movs	r3, r0
 800a05e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	785b      	ldrb	r3, [r3, #1]
 800a064:	0018      	movs	r0, r3
 800a066:	f000 fa5e 	bl	800a526 <RTC_ByteToBcd2>
 800a06a:	0003      	movs	r3, r0
 800a06c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800a06e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	789b      	ldrb	r3, [r3, #2]
 800a074:	0018      	movs	r0, r3
 800a076:	f000 fa56 	bl	800a526 <RTC_ByteToBcd2>
 800a07a:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800a07c:	0022      	movs	r2, r4
 800a07e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	78db      	ldrb	r3, [r3, #3]
 800a084:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a086:	431a      	orrs	r2, r3
 800a088:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	2220      	movs	r2, #32
 800a08e:	5c9b      	ldrb	r3, [r3, r2]
 800a090:	0018      	movs	r0, r3
 800a092:	f000 fa48 	bl	800a526 <RTC_ByteToBcd2>
 800a096:	0003      	movs	r3, r0
 800a098:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800a09a:	0022      	movs	r2, r4
 800a09c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800a0a2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	61fb      	str	r3, [r7, #28]
 800a0ac:	e022      	b.n	800a0f4 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	689b      	ldr	r3, [r3, #8]
 800a0b4:	2240      	movs	r2, #64	; 0x40
 800a0b6:	4013      	ands	r3, r2
 800a0b8:	d102      	bne.n	800a0c0 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	781b      	ldrb	r3, [r3, #0]
 800a0c4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	785b      	ldrb	r3, [r3, #1]
 800a0ca:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800a0cc:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a0ce:	68ba      	ldr	r2, [r7, #8]
 800a0d0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800a0d2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	78db      	ldrb	r3, [r3, #3]
 800a0d8:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a0da:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	2120      	movs	r1, #32
 800a0e0:	5c5b      	ldrb	r3, [r3, r1]
 800a0e2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800a0e4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800a0ea:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800a0f0:	4313      	orrs	r3, r2
 800a0f2:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	685a      	ldr	r2, [r3, #4]
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	699b      	ldr	r3, [r3, #24]
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	22ca      	movs	r2, #202	; 0xca
 800a106:	625a      	str	r2, [r3, #36]	; 0x24
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	2253      	movs	r2, #83	; 0x53
 800a10e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a114:	2380      	movs	r3, #128	; 0x80
 800a116:	005b      	lsls	r3, r3, #1
 800a118:	429a      	cmp	r2, r3
 800a11a:	d14e      	bne.n	800a1ba <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	689a      	ldr	r2, [r3, #8]
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	495b      	ldr	r1, [pc, #364]	; (800a294 <HAL_RTC_SetAlarm_IT+0x284>)
 800a128:	400a      	ands	r2, r1
 800a12a:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	68db      	ldr	r3, [r3, #12]
 800a132:	22ff      	movs	r2, #255	; 0xff
 800a134:	401a      	ands	r2, r3
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	4957      	ldr	r1, [pc, #348]	; (800a298 <HAL_RTC_SetAlarm_IT+0x288>)
 800a13c:	430a      	orrs	r2, r1
 800a13e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a140:	f7fd fa2e 	bl	80075a0 <HAL_GetTick>
 800a144:	0003      	movs	r3, r0
 800a146:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a148:	e016      	b.n	800a178 <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a14a:	f7fd fa29 	bl	80075a0 <HAL_GetTick>
 800a14e:	0002      	movs	r2, r0
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	1ad2      	subs	r2, r2, r3
 800a154:	23fa      	movs	r3, #250	; 0xfa
 800a156:	009b      	lsls	r3, r3, #2
 800a158:	429a      	cmp	r2, r3
 800a15a:	d90d      	bls.n	800a178 <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	22ff      	movs	r2, #255	; 0xff
 800a162:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	2221      	movs	r2, #33	; 0x21
 800a168:	2103      	movs	r1, #3
 800a16a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	2220      	movs	r2, #32
 800a170:	2100      	movs	r1, #0
 800a172:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a174:	2303      	movs	r3, #3
 800a176:	e089      	b.n	800a28c <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	68db      	ldr	r3, [r3, #12]
 800a17e:	2201      	movs	r2, #1
 800a180:	4013      	ands	r3, r2
 800a182:	d0e2      	beq.n	800a14a <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	69fa      	ldr	r2, [r7, #28]
 800a18a:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	69ba      	ldr	r2, [r7, #24]
 800a192:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	689a      	ldr	r2, [r3, #8]
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	2180      	movs	r1, #128	; 0x80
 800a1a0:	0049      	lsls	r1, r1, #1
 800a1a2:	430a      	orrs	r2, r1
 800a1a4:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	689a      	ldr	r2, [r3, #8]
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	2180      	movs	r1, #128	; 0x80
 800a1b2:	0149      	lsls	r1, r1, #5
 800a1b4:	430a      	orrs	r2, r1
 800a1b6:	609a      	str	r2, [r3, #8]
 800a1b8:	e04d      	b.n	800a256 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	689a      	ldr	r2, [r3, #8]
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4935      	ldr	r1, [pc, #212]	; (800a29c <HAL_RTC_SetAlarm_IT+0x28c>)
 800a1c6:	400a      	ands	r2, r1
 800a1c8:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	68db      	ldr	r3, [r3, #12]
 800a1d0:	22ff      	movs	r2, #255	; 0xff
 800a1d2:	401a      	ands	r2, r3
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4931      	ldr	r1, [pc, #196]	; (800a2a0 <HAL_RTC_SetAlarm_IT+0x290>)
 800a1da:	430a      	orrs	r2, r1
 800a1dc:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a1de:	f7fd f9df 	bl	80075a0 <HAL_GetTick>
 800a1e2:	0003      	movs	r3, r0
 800a1e4:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a1e6:	e016      	b.n	800a216 <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a1e8:	f7fd f9da 	bl	80075a0 <HAL_GetTick>
 800a1ec:	0002      	movs	r2, r0
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	1ad2      	subs	r2, r2, r3
 800a1f2:	23fa      	movs	r3, #250	; 0xfa
 800a1f4:	009b      	lsls	r3, r3, #2
 800a1f6:	429a      	cmp	r2, r3
 800a1f8:	d90d      	bls.n	800a216 <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	22ff      	movs	r2, #255	; 0xff
 800a200:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	2221      	movs	r2, #33	; 0x21
 800a206:	2103      	movs	r1, #3
 800a208:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2220      	movs	r2, #32
 800a20e:	2100      	movs	r1, #0
 800a210:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a212:	2303      	movs	r3, #3
 800a214:	e03a      	b.n	800a28c <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	68db      	ldr	r3, [r3, #12]
 800a21c:	2202      	movs	r2, #2
 800a21e:	4013      	ands	r3, r2
 800a220:	d0e2      	beq.n	800a1e8 <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	69fa      	ldr	r2, [r7, #28]
 800a228:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	69ba      	ldr	r2, [r7, #24]
 800a230:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	689a      	ldr	r2, [r3, #8]
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	2180      	movs	r1, #128	; 0x80
 800a23e:	0089      	lsls	r1, r1, #2
 800a240:	430a      	orrs	r2, r1
 800a242:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	689a      	ldr	r2, [r3, #8]
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	2180      	movs	r1, #128	; 0x80
 800a250:	0189      	lsls	r1, r1, #6
 800a252:	430a      	orrs	r2, r1
 800a254:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800a256:	4b13      	ldr	r3, [pc, #76]	; (800a2a4 <HAL_RTC_SetAlarm_IT+0x294>)
 800a258:	681a      	ldr	r2, [r3, #0]
 800a25a:	4b12      	ldr	r3, [pc, #72]	; (800a2a4 <HAL_RTC_SetAlarm_IT+0x294>)
 800a25c:	2180      	movs	r1, #128	; 0x80
 800a25e:	0289      	lsls	r1, r1, #10
 800a260:	430a      	orrs	r2, r1
 800a262:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800a264:	4b0f      	ldr	r3, [pc, #60]	; (800a2a4 <HAL_RTC_SetAlarm_IT+0x294>)
 800a266:	689a      	ldr	r2, [r3, #8]
 800a268:	4b0e      	ldr	r3, [pc, #56]	; (800a2a4 <HAL_RTC_SetAlarm_IT+0x294>)
 800a26a:	2180      	movs	r1, #128	; 0x80
 800a26c:	0289      	lsls	r1, r1, #10
 800a26e:	430a      	orrs	r2, r1
 800a270:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	22ff      	movs	r2, #255	; 0xff
 800a278:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	2221      	movs	r2, #33	; 0x21
 800a27e:	2101      	movs	r1, #1
 800a280:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2220      	movs	r2, #32
 800a286:	2100      	movs	r1, #0
 800a288:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a28a:	2300      	movs	r3, #0
}
 800a28c:	0018      	movs	r0, r3
 800a28e:	46bd      	mov	sp, r7
 800a290:	b009      	add	sp, #36	; 0x24
 800a292:	bd90      	pop	{r4, r7, pc}
 800a294:	fffffeff 	.word	0xfffffeff
 800a298:	fffffe7f 	.word	0xfffffe7f
 800a29c:	fffffdff 	.word	0xfffffdff
 800a2a0:	fffffd7f 	.word	0xfffffd7f
 800a2a4:	40010400 	.word	0x40010400

0800a2a8 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b084      	sub	sp, #16
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2220      	movs	r2, #32
 800a2b6:	5c9b      	ldrb	r3, [r3, r2]
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d101      	bne.n	800a2c0 <HAL_RTC_DeactivateAlarm+0x18>
 800a2bc:	2302      	movs	r3, #2
 800a2be:	e086      	b.n	800a3ce <HAL_RTC_DeactivateAlarm+0x126>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2220      	movs	r2, #32
 800a2c4:	2101      	movs	r1, #1
 800a2c6:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2221      	movs	r2, #33	; 0x21
 800a2cc:	2102      	movs	r1, #2
 800a2ce:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	22ca      	movs	r2, #202	; 0xca
 800a2d6:	625a      	str	r2, [r3, #36]	; 0x24
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	2253      	movs	r2, #83	; 0x53
 800a2de:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 800a2e0:	683a      	ldr	r2, [r7, #0]
 800a2e2:	2380      	movs	r3, #128	; 0x80
 800a2e4:	005b      	lsls	r3, r3, #1
 800a2e6:	429a      	cmp	r2, r3
 800a2e8:	d132      	bne.n	800a350 <HAL_RTC_DeactivateAlarm+0xa8>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	689a      	ldr	r2, [r3, #8]
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	4938      	ldr	r1, [pc, #224]	; (800a3d8 <HAL_RTC_DeactivateAlarm+0x130>)
 800a2f6:	400a      	ands	r2, r1
 800a2f8:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	689a      	ldr	r2, [r3, #8]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	4935      	ldr	r1, [pc, #212]	; (800a3dc <HAL_RTC_DeactivateAlarm+0x134>)
 800a306:	400a      	ands	r2, r1
 800a308:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 800a30a:	f7fd f949 	bl	80075a0 <HAL_GetTick>
 800a30e:	0003      	movs	r3, r0
 800a310:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a312:	e016      	b.n	800a342 <HAL_RTC_DeactivateAlarm+0x9a>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a314:	f7fd f944 	bl	80075a0 <HAL_GetTick>
 800a318:	0002      	movs	r2, r0
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	1ad2      	subs	r2, r2, r3
 800a31e:	23fa      	movs	r3, #250	; 0xfa
 800a320:	009b      	lsls	r3, r3, #2
 800a322:	429a      	cmp	r2, r3
 800a324:	d90d      	bls.n	800a342 <HAL_RTC_DeactivateAlarm+0x9a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	22ff      	movs	r2, #255	; 0xff
 800a32c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2221      	movs	r2, #33	; 0x21
 800a332:	2103      	movs	r1, #3
 800a334:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2220      	movs	r2, #32
 800a33a:	2100      	movs	r1, #0
 800a33c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a33e:	2303      	movs	r3, #3
 800a340:	e045      	b.n	800a3ce <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	68db      	ldr	r3, [r3, #12]
 800a348:	2201      	movs	r2, #1
 800a34a:	4013      	ands	r3, r2
 800a34c:	d0e2      	beq.n	800a314 <HAL_RTC_DeactivateAlarm+0x6c>
 800a34e:	e031      	b.n	800a3b4 <HAL_RTC_DeactivateAlarm+0x10c>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	689a      	ldr	r2, [r3, #8]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	4921      	ldr	r1, [pc, #132]	; (800a3e0 <HAL_RTC_DeactivateAlarm+0x138>)
 800a35c:	400a      	ands	r2, r1
 800a35e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	689a      	ldr	r2, [r3, #8]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	491e      	ldr	r1, [pc, #120]	; (800a3e4 <HAL_RTC_DeactivateAlarm+0x13c>)
 800a36c:	400a      	ands	r2, r1
 800a36e:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 800a370:	f7fd f916 	bl	80075a0 <HAL_GetTick>
 800a374:	0003      	movs	r3, r0
 800a376:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a378:	e016      	b.n	800a3a8 <HAL_RTC_DeactivateAlarm+0x100>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a37a:	f7fd f911 	bl	80075a0 <HAL_GetTick>
 800a37e:	0002      	movs	r2, r0
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	1ad2      	subs	r2, r2, r3
 800a384:	23fa      	movs	r3, #250	; 0xfa
 800a386:	009b      	lsls	r3, r3, #2
 800a388:	429a      	cmp	r2, r3
 800a38a:	d90d      	bls.n	800a3a8 <HAL_RTC_DeactivateAlarm+0x100>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	22ff      	movs	r2, #255	; 0xff
 800a392:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2221      	movs	r2, #33	; 0x21
 800a398:	2103      	movs	r1, #3
 800a39a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2220      	movs	r2, #32
 800a3a0:	2100      	movs	r1, #0
 800a3a2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a3a4:	2303      	movs	r3, #3
 800a3a6:	e012      	b.n	800a3ce <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	68db      	ldr	r3, [r3, #12]
 800a3ae:	2202      	movs	r2, #2
 800a3b0:	4013      	ands	r3, r2
 800a3b2:	d0e2      	beq.n	800a37a <HAL_RTC_DeactivateAlarm+0xd2>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	22ff      	movs	r2, #255	; 0xff
 800a3ba:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2221      	movs	r2, #33	; 0x21
 800a3c0:	2101      	movs	r1, #1
 800a3c2:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2220      	movs	r2, #32
 800a3c8:	2100      	movs	r1, #0
 800a3ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a3cc:	2300      	movs	r3, #0
}
 800a3ce:	0018      	movs	r0, r3
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	b004      	add	sp, #16
 800a3d4:	bd80      	pop	{r7, pc}
 800a3d6:	46c0      	nop			; (mov r8, r8)
 800a3d8:	fffffeff 	.word	0xfffffeff
 800a3dc:	ffffefff 	.word	0xffffefff
 800a3e0:	fffffdff 	.word	0xfffffdff
 800a3e4:	ffffdfff 	.word	0xffffdfff

0800a3e8 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b082      	sub	sp, #8
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	689a      	ldr	r2, [r3, #8]
 800a3f6:	2380      	movs	r3, #128	; 0x80
 800a3f8:	015b      	lsls	r3, r3, #5
 800a3fa:	4013      	ands	r3, r2
 800a3fc:	d014      	beq.n	800a428 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	68da      	ldr	r2, [r3, #12]
 800a404:	2380      	movs	r3, #128	; 0x80
 800a406:	005b      	lsls	r3, r3, #1
 800a408:	4013      	ands	r3, r2
 800a40a:	d00d      	beq.n	800a428 <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	0018      	movs	r0, r3
 800a410:	f7f9 f900 	bl	8003614 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	68db      	ldr	r3, [r3, #12]
 800a41a:	22ff      	movs	r2, #255	; 0xff
 800a41c:	401a      	ands	r2, r3
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	4915      	ldr	r1, [pc, #84]	; (800a478 <HAL_RTC_AlarmIRQHandler+0x90>)
 800a424:	430a      	orrs	r2, r1
 800a426:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	689a      	ldr	r2, [r3, #8]
 800a42e:	2380      	movs	r3, #128	; 0x80
 800a430:	019b      	lsls	r3, r3, #6
 800a432:	4013      	ands	r3, r2
 800a434:	d014      	beq.n	800a460 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	68da      	ldr	r2, [r3, #12]
 800a43c:	2380      	movs	r3, #128	; 0x80
 800a43e:	009b      	lsls	r3, r3, #2
 800a440:	4013      	ands	r3, r2
 800a442:	d00d      	beq.n	800a460 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	0018      	movs	r0, r3
 800a448:	f7f9 f8fc 	bl	8003644 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	68db      	ldr	r3, [r3, #12]
 800a452:	22ff      	movs	r2, #255	; 0xff
 800a454:	401a      	ands	r2, r3
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4908      	ldr	r1, [pc, #32]	; (800a47c <HAL_RTC_AlarmIRQHandler+0x94>)
 800a45c:	430a      	orrs	r2, r1
 800a45e:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800a460:	4b07      	ldr	r3, [pc, #28]	; (800a480 <HAL_RTC_AlarmIRQHandler+0x98>)
 800a462:	2280      	movs	r2, #128	; 0x80
 800a464:	0292      	lsls	r2, r2, #10
 800a466:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2221      	movs	r2, #33	; 0x21
 800a46c:	2101      	movs	r1, #1
 800a46e:	5499      	strb	r1, [r3, r2]
}
 800a470:	46c0      	nop			; (mov r8, r8)
 800a472:	46bd      	mov	sp, r7
 800a474:	b002      	add	sp, #8
 800a476:	bd80      	pop	{r7, pc}
 800a478:	fffffe7f 	.word	0xfffffe7f
 800a47c:	fffffd7f 	.word	0xfffffd7f
 800a480:	40010400 	.word	0x40010400

0800a484 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b084      	sub	sp, #16
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	68da      	ldr	r2, [r3, #12]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	21a0      	movs	r1, #160	; 0xa0
 800a498:	438a      	bics	r2, r1
 800a49a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800a49c:	f7fd f880 	bl	80075a0 <HAL_GetTick>
 800a4a0:	0003      	movs	r3, r0
 800a4a2:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a4a4:	e00a      	b.n	800a4bc <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a4a6:	f7fd f87b 	bl	80075a0 <HAL_GetTick>
 800a4aa:	0002      	movs	r2, r0
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	1ad2      	subs	r2, r2, r3
 800a4b0:	23fa      	movs	r3, #250	; 0xfa
 800a4b2:	009b      	lsls	r3, r3, #2
 800a4b4:	429a      	cmp	r2, r3
 800a4b6:	d901      	bls.n	800a4bc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a4b8:	2303      	movs	r3, #3
 800a4ba:	e006      	b.n	800a4ca <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	68db      	ldr	r3, [r3, #12]
 800a4c2:	2220      	movs	r2, #32
 800a4c4:	4013      	ands	r3, r2
 800a4c6:	d0ee      	beq.n	800a4a6 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 800a4c8:	2300      	movs	r3, #0
}
 800a4ca:	0018      	movs	r0, r3
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	b004      	add	sp, #16
 800a4d0:	bd80      	pop	{r7, pc}

0800a4d2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a4d2:	b580      	push	{r7, lr}
 800a4d4:	b084      	sub	sp, #16
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	68db      	ldr	r3, [r3, #12]
 800a4e0:	2240      	movs	r2, #64	; 0x40
 800a4e2:	4013      	ands	r3, r2
 800a4e4:	d11a      	bne.n	800a51c <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	4252      	negs	r2, r2
 800a4ee:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a4f0:	f7fd f856 	bl	80075a0 <HAL_GetTick>
 800a4f4:	0003      	movs	r3, r0
 800a4f6:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a4f8:	e00a      	b.n	800a510 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a4fa:	f7fd f851 	bl	80075a0 <HAL_GetTick>
 800a4fe:	0002      	movs	r2, r0
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	1ad2      	subs	r2, r2, r3
 800a504:	23fa      	movs	r3, #250	; 0xfa
 800a506:	009b      	lsls	r3, r3, #2
 800a508:	429a      	cmp	r2, r3
 800a50a:	d901      	bls.n	800a510 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 800a50c:	2303      	movs	r3, #3
 800a50e:	e006      	b.n	800a51e <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	68db      	ldr	r3, [r3, #12]
 800a516:	2240      	movs	r2, #64	; 0x40
 800a518:	4013      	ands	r3, r2
 800a51a:	d0ee      	beq.n	800a4fa <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800a51c:	2300      	movs	r3, #0
}
 800a51e:	0018      	movs	r0, r3
 800a520:	46bd      	mov	sp, r7
 800a522:	b004      	add	sp, #16
 800a524:	bd80      	pop	{r7, pc}

0800a526 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a526:	b580      	push	{r7, lr}
 800a528:	b084      	sub	sp, #16
 800a52a:	af00      	add	r7, sp, #0
 800a52c:	0002      	movs	r2, r0
 800a52e:	1dfb      	adds	r3, r7, #7
 800a530:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800a532:	2300      	movs	r3, #0
 800a534:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800a536:	230b      	movs	r3, #11
 800a538:	18fb      	adds	r3, r7, r3
 800a53a:	1dfa      	adds	r2, r7, #7
 800a53c:	7812      	ldrb	r2, [r2, #0]
 800a53e:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 800a540:	e008      	b.n	800a554 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	3301      	adds	r3, #1
 800a546:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800a548:	220b      	movs	r2, #11
 800a54a:	18bb      	adds	r3, r7, r2
 800a54c:	18ba      	adds	r2, r7, r2
 800a54e:	7812      	ldrb	r2, [r2, #0]
 800a550:	3a0a      	subs	r2, #10
 800a552:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 800a554:	230b      	movs	r3, #11
 800a556:	18fb      	adds	r3, r7, r3
 800a558:	781b      	ldrb	r3, [r3, #0]
 800a55a:	2b09      	cmp	r3, #9
 800a55c:	d8f1      	bhi.n	800a542 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	b2db      	uxtb	r3, r3
 800a562:	011b      	lsls	r3, r3, #4
 800a564:	b2da      	uxtb	r2, r3
 800a566:	230b      	movs	r3, #11
 800a568:	18fb      	adds	r3, r7, r3
 800a56a:	781b      	ldrb	r3, [r3, #0]
 800a56c:	4313      	orrs	r3, r2
 800a56e:	b2db      	uxtb	r3, r3
}
 800a570:	0018      	movs	r0, r3
 800a572:	46bd      	mov	sp, r7
 800a574:	b004      	add	sp, #16
 800a576:	bd80      	pop	{r7, pc}

0800a578 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b084      	sub	sp, #16
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	0002      	movs	r2, r0
 800a580:	1dfb      	adds	r3, r7, #7
 800a582:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800a584:	1dfb      	adds	r3, r7, #7
 800a586:	781b      	ldrb	r3, [r3, #0]
 800a588:	091b      	lsrs	r3, r3, #4
 800a58a:	b2db      	uxtb	r3, r3
 800a58c:	001a      	movs	r2, r3
 800a58e:	0013      	movs	r3, r2
 800a590:	009b      	lsls	r3, r3, #2
 800a592:	189b      	adds	r3, r3, r2
 800a594:	005b      	lsls	r3, r3, #1
 800a596:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	b2da      	uxtb	r2, r3
 800a59c:	1dfb      	adds	r3, r7, #7
 800a59e:	781b      	ldrb	r3, [r3, #0]
 800a5a0:	210f      	movs	r1, #15
 800a5a2:	400b      	ands	r3, r1
 800a5a4:	b2db      	uxtb	r3, r3
 800a5a6:	18d3      	adds	r3, r2, r3
 800a5a8:	b2db      	uxtb	r3, r3
}
 800a5aa:	0018      	movs	r0, r3
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	b004      	add	sp, #16
 800a5b0:	bd80      	pop	{r7, pc}

0800a5b2 <HAL_RTCEx_SetSmoothCalib>:
  *         must be equal to SMOOTHCALIB_PLUSPULSES_RESET and the field
  *         SmoothCalibMinusPulsesValue mut be equal to 0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSmoothCalib(RTC_HandleTypeDef *hrtc, uint32_t SmoothCalibPeriod, uint32_t SmoothCalibPlusPulses, uint32_t SmoothCalibMinusPulsesValue)
{
 800a5b2:	b580      	push	{r7, lr}
 800a5b4:	b086      	sub	sp, #24
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	60f8      	str	r0, [r7, #12]
 800a5ba:	60b9      	str	r1, [r7, #8]
 800a5bc:	607a      	str	r2, [r7, #4]
 800a5be:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(SmoothCalibMinusPulsesValue));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	2220      	movs	r2, #32
 800a5c4:	5c9b      	ldrb	r3, [r3, r2]
 800a5c6:	2b01      	cmp	r3, #1
 800a5c8:	d101      	bne.n	800a5ce <HAL_RTCEx_SetSmoothCalib+0x1c>
 800a5ca:	2302      	movs	r3, #2
 800a5cc:	e04f      	b.n	800a66e <HAL_RTCEx_SetSmoothCalib+0xbc>
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2220      	movs	r2, #32
 800a5d2:	2101      	movs	r1, #1
 800a5d4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	2221      	movs	r2, #33	; 0x21
 800a5da:	2102      	movs	r1, #2
 800a5dc:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	22ca      	movs	r2, #202	; 0xca
 800a5e4:	625a      	str	r2, [r3, #36]	; 0x24
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	2253      	movs	r2, #83	; 0x53
 800a5ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* check if a calibration is pending*/
  if ((hrtc->Instance->ISR & RTC_ISR_RECALPF) != 0U)
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	68da      	ldr	r2, [r3, #12]
 800a5f4:	2380      	movs	r3, #128	; 0x80
 800a5f6:	025b      	lsls	r3, r3, #9
 800a5f8:	4013      	ands	r3, r2
 800a5fa:	d022      	beq.n	800a642 <HAL_RTCEx_SetSmoothCalib+0x90>
  {
    tickstart = HAL_GetTick();
 800a5fc:	f7fc ffd0 	bl	80075a0 <HAL_GetTick>
 800a600:	0003      	movs	r3, r0
 800a602:	617b      	str	r3, [r7, #20]

    /* check if a calibration is pending*/
    while ((hrtc->Instance->ISR & RTC_ISR_RECALPF) != 0U)
 800a604:	e016      	b.n	800a634 <HAL_RTCEx_SetSmoothCalib+0x82>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a606:	f7fc ffcb 	bl	80075a0 <HAL_GetTick>
 800a60a:	0002      	movs	r2, r0
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	1ad2      	subs	r2, r2, r3
 800a610:	23fa      	movs	r3, #250	; 0xfa
 800a612:	009b      	lsls	r3, r3, #2
 800a614:	429a      	cmp	r2, r3
 800a616:	d90d      	bls.n	800a634 <HAL_RTCEx_SetSmoothCalib+0x82>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	22ff      	movs	r2, #255	; 0xff
 800a61e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	2221      	movs	r2, #33	; 0x21
 800a624:	2103      	movs	r1, #3
 800a626:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	2220      	movs	r2, #32
 800a62c:	2100      	movs	r1, #0
 800a62e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a630:	2303      	movs	r3, #3
 800a632:	e01c      	b.n	800a66e <HAL_RTCEx_SetSmoothCalib+0xbc>
    while ((hrtc->Instance->ISR & RTC_ISR_RECALPF) != 0U)
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	68da      	ldr	r2, [r3, #12]
 800a63a:	2380      	movs	r3, #128	; 0x80
 800a63c:	025b      	lsls	r3, r3, #9
 800a63e:	4013      	ands	r3, r2
 800a640:	d1e1      	bne.n	800a606 <HAL_RTCEx_SetSmoothCalib+0x54>
      }
    }
  }

  /* Configure the Smooth calibration settings */
  hrtc->Instance->CALR = (uint32_t)((uint32_t)SmoothCalibPeriod | (uint32_t)SmoothCalibPlusPulses | (uint32_t)SmoothCalibMinusPulsesValue);
 800a642:	68ba      	ldr	r2, [r7, #8]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	431a      	orrs	r2, r3
 800a648:	0011      	movs	r1, r2
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	683a      	ldr	r2, [r7, #0]
 800a650:	430a      	orrs	r2, r1
 800a652:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	22ff      	movs	r2, #255	; 0xff
 800a65a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	2221      	movs	r2, #33	; 0x21
 800a660:	2101      	movs	r1, #1
 800a662:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	2220      	movs	r2, #32
 800a668:	2100      	movs	r1, #0
 800a66a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a66c:	2300      	movs	r3, #0
}
 800a66e:	0018      	movs	r0, r3
 800a670:	46bd      	mov	sp, r7
 800a672:	b006      	add	sp, #24
 800a674:	bd80      	pop	{r7, pc}
	...

0800a678 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b082      	sub	sp, #8
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d101      	bne.n	800a68a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a686:	2301      	movs	r3, #1
 800a688:	e059      	b.n	800a73e <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2200      	movs	r2, #0
 800a68e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2251      	movs	r2, #81	; 0x51
 800a694:	5c9b      	ldrb	r3, [r3, r2]
 800a696:	b2db      	uxtb	r3, r3
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d107      	bne.n	800a6ac <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2250      	movs	r2, #80	; 0x50
 800a6a0:	2100      	movs	r1, #0
 800a6a2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	0018      	movs	r0, r3
 800a6a8:	f7f9 ffec 	bl	8004684 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2251      	movs	r2, #81	; 0x51
 800a6b0:	2102      	movs	r1, #2
 800a6b2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	681a      	ldr	r2, [r3, #0]
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	2140      	movs	r1, #64	; 0x40
 800a6c0:	438a      	bics	r2, r1
 800a6c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	685a      	ldr	r2, [r3, #4]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	689b      	ldr	r3, [r3, #8]
 800a6cc:	431a      	orrs	r2, r3
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	68db      	ldr	r3, [r3, #12]
 800a6d2:	431a      	orrs	r2, r3
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	691b      	ldr	r3, [r3, #16]
 800a6d8:	431a      	orrs	r2, r3
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	695b      	ldr	r3, [r3, #20]
 800a6de:	431a      	orrs	r2, r3
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6999      	ldr	r1, [r3, #24]
 800a6e4:	2380      	movs	r3, #128	; 0x80
 800a6e6:	009b      	lsls	r3, r3, #2
 800a6e8:	400b      	ands	r3, r1
 800a6ea:	431a      	orrs	r2, r3
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	69db      	ldr	r3, [r3, #28]
 800a6f0:	431a      	orrs	r2, r3
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6a1b      	ldr	r3, [r3, #32]
 800a6f6:	431a      	orrs	r2, r3
 800a6f8:	0011      	movs	r1, r2
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	430a      	orrs	r2, r1
 800a704:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	699b      	ldr	r3, [r3, #24]
 800a70a:	0c1b      	lsrs	r3, r3, #16
 800a70c:	2204      	movs	r2, #4
 800a70e:	4013      	ands	r3, r2
 800a710:	0019      	movs	r1, r3
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	430a      	orrs	r2, r1
 800a71c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	69da      	ldr	r2, [r3, #28]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	4907      	ldr	r1, [pc, #28]	; (800a748 <HAL_SPI_Init+0xd0>)
 800a72a:	400a      	ands	r2, r1
 800a72c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2200      	movs	r2, #0
 800a732:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2251      	movs	r2, #81	; 0x51
 800a738:	2101      	movs	r1, #1
 800a73a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a73c:	2300      	movs	r3, #0
}
 800a73e:	0018      	movs	r0, r3
 800a740:	46bd      	mov	sp, r7
 800a742:	b002      	add	sp, #8
 800a744:	bd80      	pop	{r7, pc}
 800a746:	46c0      	nop			; (mov r8, r8)
 800a748:	fffff7ff 	.word	0xfffff7ff

0800a74c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b088      	sub	sp, #32
 800a750:	af00      	add	r7, sp, #0
 800a752:	60f8      	str	r0, [r7, #12]
 800a754:	60b9      	str	r1, [r7, #8]
 800a756:	603b      	str	r3, [r7, #0]
 800a758:	1dbb      	adds	r3, r7, #6
 800a75a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a75c:	231f      	movs	r3, #31
 800a75e:	18fb      	adds	r3, r7, r3
 800a760:	2200      	movs	r2, #0
 800a762:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	2250      	movs	r2, #80	; 0x50
 800a768:	5c9b      	ldrb	r3, [r3, r2]
 800a76a:	2b01      	cmp	r3, #1
 800a76c:	d101      	bne.n	800a772 <HAL_SPI_Transmit+0x26>
 800a76e:	2302      	movs	r3, #2
 800a770:	e136      	b.n	800a9e0 <HAL_SPI_Transmit+0x294>
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	2250      	movs	r2, #80	; 0x50
 800a776:	2101      	movs	r1, #1
 800a778:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a77a:	f7fc ff11 	bl	80075a0 <HAL_GetTick>
 800a77e:	0003      	movs	r3, r0
 800a780:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800a782:	2316      	movs	r3, #22
 800a784:	18fb      	adds	r3, r7, r3
 800a786:	1dba      	adds	r2, r7, #6
 800a788:	8812      	ldrh	r2, [r2, #0]
 800a78a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	2251      	movs	r2, #81	; 0x51
 800a790:	5c9b      	ldrb	r3, [r3, r2]
 800a792:	b2db      	uxtb	r3, r3
 800a794:	2b01      	cmp	r3, #1
 800a796:	d004      	beq.n	800a7a2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800a798:	231f      	movs	r3, #31
 800a79a:	18fb      	adds	r3, r7, r3
 800a79c:	2202      	movs	r2, #2
 800a79e:	701a      	strb	r2, [r3, #0]
    goto error;
 800a7a0:	e113      	b.n	800a9ca <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a7a2:	68bb      	ldr	r3, [r7, #8]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d003      	beq.n	800a7b0 <HAL_SPI_Transmit+0x64>
 800a7a8:	1dbb      	adds	r3, r7, #6
 800a7aa:	881b      	ldrh	r3, [r3, #0]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d104      	bne.n	800a7ba <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800a7b0:	231f      	movs	r3, #31
 800a7b2:	18fb      	adds	r3, r7, r3
 800a7b4:	2201      	movs	r2, #1
 800a7b6:	701a      	strb	r2, [r3, #0]
    goto error;
 800a7b8:	e107      	b.n	800a9ca <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	2251      	movs	r2, #81	; 0x51
 800a7be:	2103      	movs	r1, #3
 800a7c0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	68ba      	ldr	r2, [r7, #8]
 800a7cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	1dba      	adds	r2, r7, #6
 800a7d2:	8812      	ldrh	r2, [r2, #0]
 800a7d4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	1dba      	adds	r2, r7, #6
 800a7da:	8812      	ldrh	r2, [r2, #0]
 800a7dc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	689a      	ldr	r2, [r3, #8]
 800a800:	2380      	movs	r3, #128	; 0x80
 800a802:	021b      	lsls	r3, r3, #8
 800a804:	429a      	cmp	r2, r3
 800a806:	d108      	bne.n	800a81a <HAL_SPI_Transmit+0xce>
  {
    SPI_1LINE_TX(hspi);
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	2180      	movs	r1, #128	; 0x80
 800a814:	01c9      	lsls	r1, r1, #7
 800a816:	430a      	orrs	r2, r1
 800a818:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	2240      	movs	r2, #64	; 0x40
 800a822:	4013      	ands	r3, r2
 800a824:	2b40      	cmp	r3, #64	; 0x40
 800a826:	d007      	beq.n	800a838 <HAL_SPI_Transmit+0xec>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	681a      	ldr	r2, [r3, #0]
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	2140      	movs	r1, #64	; 0x40
 800a834:	430a      	orrs	r2, r1
 800a836:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	68da      	ldr	r2, [r3, #12]
 800a83c:	2380      	movs	r3, #128	; 0x80
 800a83e:	011b      	lsls	r3, r3, #4
 800a840:	429a      	cmp	r2, r3
 800a842:	d14e      	bne.n	800a8e2 <HAL_SPI_Transmit+0x196>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	685b      	ldr	r3, [r3, #4]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d004      	beq.n	800a856 <HAL_SPI_Transmit+0x10a>
 800a84c:	2316      	movs	r3, #22
 800a84e:	18fb      	adds	r3, r7, r3
 800a850:	881b      	ldrh	r3, [r3, #0]
 800a852:	2b01      	cmp	r3, #1
 800a854:	d13f      	bne.n	800a8d6 <HAL_SPI_Transmit+0x18a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a85a:	881a      	ldrh	r2, [r3, #0]
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a866:	1c9a      	adds	r2, r3, #2
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a870:	b29b      	uxth	r3, r3
 800a872:	3b01      	subs	r3, #1
 800a874:	b29a      	uxth	r2, r3
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a87a:	e02c      	b.n	800a8d6 <HAL_SPI_Transmit+0x18a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	689b      	ldr	r3, [r3, #8]
 800a882:	2202      	movs	r2, #2
 800a884:	4013      	ands	r3, r2
 800a886:	2b02      	cmp	r3, #2
 800a888:	d112      	bne.n	800a8b0 <HAL_SPI_Transmit+0x164>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a88e:	881a      	ldrh	r2, [r3, #0]
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a89a:	1c9a      	adds	r2, r3, #2
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a8a4:	b29b      	uxth	r3, r3
 800a8a6:	3b01      	subs	r3, #1
 800a8a8:	b29a      	uxth	r2, r3
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	86da      	strh	r2, [r3, #54]	; 0x36
 800a8ae:	e012      	b.n	800a8d6 <HAL_SPI_Transmit+0x18a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a8b0:	f7fc fe76 	bl	80075a0 <HAL_GetTick>
 800a8b4:	0002      	movs	r2, r0
 800a8b6:	69bb      	ldr	r3, [r7, #24]
 800a8b8:	1ad3      	subs	r3, r2, r3
 800a8ba:	683a      	ldr	r2, [r7, #0]
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	d802      	bhi.n	800a8c6 <HAL_SPI_Transmit+0x17a>
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	3301      	adds	r3, #1
 800a8c4:	d102      	bne.n	800a8cc <HAL_SPI_Transmit+0x180>
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d104      	bne.n	800a8d6 <HAL_SPI_Transmit+0x18a>
        {
          errorcode = HAL_TIMEOUT;
 800a8cc:	231f      	movs	r3, #31
 800a8ce:	18fb      	adds	r3, r7, r3
 800a8d0:	2203      	movs	r2, #3
 800a8d2:	701a      	strb	r2, [r3, #0]
          goto error;
 800a8d4:	e079      	b.n	800a9ca <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a8da:	b29b      	uxth	r3, r3
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d1cd      	bne.n	800a87c <HAL_SPI_Transmit+0x130>
 800a8e0:	e04f      	b.n	800a982 <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	685b      	ldr	r3, [r3, #4]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d004      	beq.n	800a8f4 <HAL_SPI_Transmit+0x1a8>
 800a8ea:	2316      	movs	r3, #22
 800a8ec:	18fb      	adds	r3, r7, r3
 800a8ee:	881b      	ldrh	r3, [r3, #0]
 800a8f0:	2b01      	cmp	r3, #1
 800a8f2:	d141      	bne.n	800a978 <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	330c      	adds	r3, #12
 800a8fe:	7812      	ldrb	r2, [r2, #0]
 800a900:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a906:	1c5a      	adds	r2, r3, #1
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a910:	b29b      	uxth	r3, r3
 800a912:	3b01      	subs	r3, #1
 800a914:	b29a      	uxth	r2, r3
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a91a:	e02d      	b.n	800a978 <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	689b      	ldr	r3, [r3, #8]
 800a922:	2202      	movs	r2, #2
 800a924:	4013      	ands	r3, r2
 800a926:	2b02      	cmp	r3, #2
 800a928:	d113      	bne.n	800a952 <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	330c      	adds	r3, #12
 800a934:	7812      	ldrb	r2, [r2, #0]
 800a936:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a93c:	1c5a      	adds	r2, r3, #1
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a946:	b29b      	uxth	r3, r3
 800a948:	3b01      	subs	r3, #1
 800a94a:	b29a      	uxth	r2, r3
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	86da      	strh	r2, [r3, #54]	; 0x36
 800a950:	e012      	b.n	800a978 <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a952:	f7fc fe25 	bl	80075a0 <HAL_GetTick>
 800a956:	0002      	movs	r2, r0
 800a958:	69bb      	ldr	r3, [r7, #24]
 800a95a:	1ad3      	subs	r3, r2, r3
 800a95c:	683a      	ldr	r2, [r7, #0]
 800a95e:	429a      	cmp	r2, r3
 800a960:	d802      	bhi.n	800a968 <HAL_SPI_Transmit+0x21c>
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	3301      	adds	r3, #1
 800a966:	d102      	bne.n	800a96e <HAL_SPI_Transmit+0x222>
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d104      	bne.n	800a978 <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 800a96e:	231f      	movs	r3, #31
 800a970:	18fb      	adds	r3, r7, r3
 800a972:	2203      	movs	r2, #3
 800a974:	701a      	strb	r2, [r3, #0]
          goto error;
 800a976:	e028      	b.n	800a9ca <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a97c:	b29b      	uxth	r3, r3
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d1cc      	bne.n	800a91c <HAL_SPI_Transmit+0x1d0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a982:	69ba      	ldr	r2, [r7, #24]
 800a984:	6839      	ldr	r1, [r7, #0]
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	0018      	movs	r0, r3
 800a98a:	f000 fbe3 	bl	800b154 <SPI_EndRxTxTransaction>
 800a98e:	1e03      	subs	r3, r0, #0
 800a990:	d002      	beq.n	800a998 <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2220      	movs	r2, #32
 800a996:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	689b      	ldr	r3, [r3, #8]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d10a      	bne.n	800a9b6 <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	613b      	str	r3, [r7, #16]
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	68db      	ldr	r3, [r3, #12]
 800a9aa:	613b      	str	r3, [r7, #16]
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	689b      	ldr	r3, [r3, #8]
 800a9b2:	613b      	str	r3, [r7, #16]
 800a9b4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d004      	beq.n	800a9c8 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 800a9be:	231f      	movs	r3, #31
 800a9c0:	18fb      	adds	r3, r7, r3
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	701a      	strb	r2, [r3, #0]
 800a9c6:	e000      	b.n	800a9ca <HAL_SPI_Transmit+0x27e>
  }

error:
 800a9c8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	2251      	movs	r2, #81	; 0x51
 800a9ce:	2101      	movs	r1, #1
 800a9d0:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	2250      	movs	r2, #80	; 0x50
 800a9d6:	2100      	movs	r1, #0
 800a9d8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800a9da:	231f      	movs	r3, #31
 800a9dc:	18fb      	adds	r3, r7, r3
 800a9de:	781b      	ldrb	r3, [r3, #0]
}
 800a9e0:	0018      	movs	r0, r3
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	b008      	add	sp, #32
 800a9e6:	bd80      	pop	{r7, pc}

0800a9e8 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b086      	sub	sp, #24
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	60f8      	str	r0, [r7, #12]
 800a9f0:	60b9      	str	r1, [r7, #8]
 800a9f2:	1dbb      	adds	r3, r7, #6
 800a9f4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a9f6:	2317      	movs	r3, #23
 800a9f8:	18fb      	adds	r3, r7, r3
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	2250      	movs	r2, #80	; 0x50
 800aa02:	5c9b      	ldrb	r3, [r3, r2]
 800aa04:	2b01      	cmp	r3, #1
 800aa06:	d101      	bne.n	800aa0c <HAL_SPI_Transmit_IT+0x24>
 800aa08:	2302      	movs	r3, #2
 800aa0a:	e072      	b.n	800aaf2 <HAL_SPI_Transmit_IT+0x10a>
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	2250      	movs	r2, #80	; 0x50
 800aa10:	2101      	movs	r1, #1
 800aa12:	5499      	strb	r1, [r3, r2]

  if ((pData == NULL) || (Size == 0U))
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d003      	beq.n	800aa22 <HAL_SPI_Transmit_IT+0x3a>
 800aa1a:	1dbb      	adds	r3, r7, #6
 800aa1c:	881b      	ldrh	r3, [r3, #0]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d104      	bne.n	800aa2c <HAL_SPI_Transmit_IT+0x44>
  {
    errorcode = HAL_ERROR;
 800aa22:	2317      	movs	r3, #23
 800aa24:	18fb      	adds	r3, r7, r3
 800aa26:	2201      	movs	r2, #1
 800aa28:	701a      	strb	r2, [r3, #0]
    goto error;
 800aa2a:	e05b      	b.n	800aae4 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	2251      	movs	r2, #81	; 0x51
 800aa30:	5c9b      	ldrb	r3, [r3, r2]
 800aa32:	b2db      	uxtb	r3, r3
 800aa34:	2b01      	cmp	r3, #1
 800aa36:	d004      	beq.n	800aa42 <HAL_SPI_Transmit_IT+0x5a>
  {
    errorcode = HAL_BUSY;
 800aa38:	2317      	movs	r3, #23
 800aa3a:	18fb      	adds	r3, r7, r3
 800aa3c:	2202      	movs	r2, #2
 800aa3e:	701a      	strb	r2, [r3, #0]
    goto error;
 800aa40:	e050      	b.n	800aae4 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	2251      	movs	r2, #81	; 0x51
 800aa46:	2103      	movs	r1, #3
 800aa48:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	68ba      	ldr	r2, [r7, #8]
 800aa54:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	1dba      	adds	r2, r7, #6
 800aa5a:	8812      	ldrh	r2, [r2, #0]
 800aa5c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	1dba      	adds	r2, r7, #6
 800aa62:	8812      	ldrh	r2, [r2, #0]
 800aa64:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	2200      	movs	r2, #0
 800aa76:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	68db      	ldr	r3, [r3, #12]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d003      	beq.n	800aa8e <HAL_SPI_Transmit_IT+0xa6>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	4a1c      	ldr	r2, [pc, #112]	; (800aafc <HAL_SPI_Transmit_IT+0x114>)
 800aa8a:	645a      	str	r2, [r3, #68]	; 0x44
 800aa8c:	e002      	b.n	800aa94 <HAL_SPI_Transmit_IT+0xac>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	4a1b      	ldr	r2, [pc, #108]	; (800ab00 <HAL_SPI_Transmit_IT+0x118>)
 800aa92:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	689a      	ldr	r2, [r3, #8]
 800aa98:	2380      	movs	r3, #128	; 0x80
 800aa9a:	021b      	lsls	r3, r3, #8
 800aa9c:	429a      	cmp	r2, r3
 800aa9e:	d108      	bne.n	800aab2 <HAL_SPI_Transmit_IT+0xca>
  {
    SPI_1LINE_TX(hspi);
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	681a      	ldr	r2, [r3, #0]
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	2180      	movs	r1, #128	; 0x80
 800aaac:	01c9      	lsls	r1, r1, #7
 800aaae:	430a      	orrs	r2, r1
 800aab0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	685a      	ldr	r2, [r3, #4]
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	21a0      	movs	r1, #160	; 0xa0
 800aabe:	430a      	orrs	r2, r1
 800aac0:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	2240      	movs	r2, #64	; 0x40
 800aaca:	4013      	ands	r3, r2
 800aacc:	2b40      	cmp	r3, #64	; 0x40
 800aace:	d008      	beq.n	800aae2 <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	681a      	ldr	r2, [r3, #0]
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	2140      	movs	r1, #64	; 0x40
 800aadc:	430a      	orrs	r2, r1
 800aade:	601a      	str	r2, [r3, #0]
 800aae0:	e000      	b.n	800aae4 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 800aae2:	46c0      	nop			; (mov r8, r8)
  __HAL_UNLOCK(hspi);
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2250      	movs	r2, #80	; 0x50
 800aae8:	2100      	movs	r1, #0
 800aaea:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800aaec:	2317      	movs	r3, #23
 800aaee:	18fb      	adds	r3, r7, r3
 800aaf0:	781b      	ldrb	r3, [r3, #0]
}
 800aaf2:	0018      	movs	r0, r3
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	b006      	add	sp, #24
 800aaf8:	bd80      	pop	{r7, pc}
 800aafa:	46c0      	nop			; (mov r8, r8)
 800aafc:	0800b02f 	.word	0x0800b02f
 800ab00:	0800afe7 	.word	0x0800afe7

0800ab04 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b086      	sub	sp, #24
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	60f8      	str	r0, [r7, #12]
 800ab0c:	60b9      	str	r1, [r7, #8]
 800ab0e:	1dbb      	adds	r3, r7, #6
 800ab10:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ab12:	2317      	movs	r3, #23
 800ab14:	18fb      	adds	r3, r7, r3
 800ab16:	2200      	movs	r2, #0
 800ab18:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	2250      	movs	r2, #80	; 0x50
 800ab1e:	5c9b      	ldrb	r3, [r3, r2]
 800ab20:	2b01      	cmp	r3, #1
 800ab22:	d101      	bne.n	800ab28 <HAL_SPI_Transmit_DMA+0x24>
 800ab24:	2302      	movs	r3, #2
 800ab26:	e09f      	b.n	800ac68 <HAL_SPI_Transmit_DMA+0x164>
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	2250      	movs	r2, #80	; 0x50
 800ab2c:	2101      	movs	r1, #1
 800ab2e:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	2251      	movs	r2, #81	; 0x51
 800ab34:	5c9b      	ldrb	r3, [r3, r2]
 800ab36:	b2db      	uxtb	r3, r3
 800ab38:	2b01      	cmp	r3, #1
 800ab3a:	d004      	beq.n	800ab46 <HAL_SPI_Transmit_DMA+0x42>
  {
    errorcode = HAL_BUSY;
 800ab3c:	2317      	movs	r3, #23
 800ab3e:	18fb      	adds	r3, r7, r3
 800ab40:	2202      	movs	r2, #2
 800ab42:	701a      	strb	r2, [r3, #0]
    goto error;
 800ab44:	e089      	b.n	800ac5a <HAL_SPI_Transmit_DMA+0x156>
  }

  if ((pData == NULL) || (Size == 0U))
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d003      	beq.n	800ab54 <HAL_SPI_Transmit_DMA+0x50>
 800ab4c:	1dbb      	adds	r3, r7, #6
 800ab4e:	881b      	ldrh	r3, [r3, #0]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d104      	bne.n	800ab5e <HAL_SPI_Transmit_DMA+0x5a>
  {
    errorcode = HAL_ERROR;
 800ab54:	2317      	movs	r3, #23
 800ab56:	18fb      	adds	r3, r7, r3
 800ab58:	2201      	movs	r2, #1
 800ab5a:	701a      	strb	r2, [r3, #0]
    goto error;
 800ab5c:	e07d      	b.n	800ac5a <HAL_SPI_Transmit_DMA+0x156>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	2251      	movs	r2, #81	; 0x51
 800ab62:	2103      	movs	r1, #3
 800ab64:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	68ba      	ldr	r2, [r7, #8]
 800ab70:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	1dba      	adds	r2, r7, #6
 800ab76:	8812      	ldrh	r2, [r2, #0]
 800ab78:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	1dba      	adds	r2, r7, #6
 800ab7e:	8812      	ldrh	r2, [r2, #0]
 800ab80:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	2200      	movs	r2, #0
 800ab86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	2200      	movs	r2, #0
 800ab92:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	2200      	movs	r2, #0
 800ab98:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	689a      	ldr	r2, [r3, #8]
 800aba4:	2380      	movs	r3, #128	; 0x80
 800aba6:	021b      	lsls	r3, r3, #8
 800aba8:	429a      	cmp	r2, r3
 800abaa:	d108      	bne.n	800abbe <HAL_SPI_Transmit_DMA+0xba>
  {
    SPI_1LINE_TX(hspi);
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	681a      	ldr	r2, [r3, #0]
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	2180      	movs	r1, #128	; 0x80
 800abb8:	01c9      	lsls	r1, r1, #7
 800abba:	430a      	orrs	r2, r1
 800abbc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800abc2:	4a2b      	ldr	r2, [pc, #172]	; (800ac70 <HAL_SPI_Transmit_DMA+0x16c>)
 800abc4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800abca:	4a2a      	ldr	r2, [pc, #168]	; (800ac74 <HAL_SPI_Transmit_DMA+0x170>)
 800abcc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800abd2:	4a29      	ldr	r2, [pc, #164]	; (800ac78 <HAL_SPI_Transmit_DMA+0x174>)
 800abd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800abda:	2200      	movs	r2, #0
 800abdc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abe6:	0019      	movs	r1, r3
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	330c      	adds	r3, #12
 800abee:	001a      	movs	r2, r3
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800abf4:	b29b      	uxth	r3, r3
 800abf6:	f7fd fbbb 	bl	8008370 <HAL_DMA_Start_IT>
 800abfa:	1e03      	subs	r3, r0, #0
 800abfc:	d00e      	beq.n	800ac1c <HAL_SPI_Transmit_DMA+0x118>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac02:	2210      	movs	r2, #16
 800ac04:	431a      	orrs	r2, r3
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800ac0a:	2317      	movs	r3, #23
 800ac0c:	18fb      	adds	r3, r7, r3
 800ac0e:	2201      	movs	r2, #1
 800ac10:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2251      	movs	r2, #81	; 0x51
 800ac16:	2101      	movs	r1, #1
 800ac18:	5499      	strb	r1, [r3, r2]
    goto error;
 800ac1a:	e01e      	b.n	800ac5a <HAL_SPI_Transmit_DMA+0x156>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	2240      	movs	r2, #64	; 0x40
 800ac24:	4013      	ands	r3, r2
 800ac26:	2b40      	cmp	r3, #64	; 0x40
 800ac28:	d007      	beq.n	800ac3a <HAL_SPI_Transmit_DMA+0x136>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	681a      	ldr	r2, [r3, #0]
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	2140      	movs	r1, #64	; 0x40
 800ac36:	430a      	orrs	r2, r1
 800ac38:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	685a      	ldr	r2, [r3, #4]
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	2120      	movs	r1, #32
 800ac46:	430a      	orrs	r2, r1
 800ac48:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	685a      	ldr	r2, [r3, #4]
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	2102      	movs	r1, #2
 800ac56:	430a      	orrs	r2, r1
 800ac58:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2250      	movs	r2, #80	; 0x50
 800ac5e:	2100      	movs	r1, #0
 800ac60:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800ac62:	2317      	movs	r3, #23
 800ac64:	18fb      	adds	r3, r7, r3
 800ac66:	781b      	ldrb	r3, [r3, #0]
}
 800ac68:	0018      	movs	r0, r3
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	b006      	add	sp, #24
 800ac6e:	bd80      	pop	{r7, pc}
 800ac70:	0800af5d 	.word	0x0800af5d
 800ac74:	0800aeb1 	.word	0x0800aeb1
 800ac78:	0800af7b 	.word	0x0800af7b

0800ac7c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b088      	sub	sp, #32
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	685b      	ldr	r3, [r3, #4]
 800ac8a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	689b      	ldr	r3, [r3, #8]
 800ac92:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ac94:	69bb      	ldr	r3, [r7, #24]
 800ac96:	099b      	lsrs	r3, r3, #6
 800ac98:	001a      	movs	r2, r3
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	4013      	ands	r3, r2
 800ac9e:	d10f      	bne.n	800acc0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800aca0:	69bb      	ldr	r3, [r7, #24]
 800aca2:	2201      	movs	r2, #1
 800aca4:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800aca6:	d00b      	beq.n	800acc0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800aca8:	69fb      	ldr	r3, [r7, #28]
 800acaa:	099b      	lsrs	r3, r3, #6
 800acac:	001a      	movs	r2, r3
 800acae:	2301      	movs	r3, #1
 800acb0:	4013      	ands	r3, r2
 800acb2:	d005      	beq.n	800acc0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acb8:	687a      	ldr	r2, [r7, #4]
 800acba:	0010      	movs	r0, r2
 800acbc:	4798      	blx	r3
    return;
 800acbe:	e0d6      	b.n	800ae6e <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800acc0:	69bb      	ldr	r3, [r7, #24]
 800acc2:	085b      	lsrs	r3, r3, #1
 800acc4:	001a      	movs	r2, r3
 800acc6:	2301      	movs	r3, #1
 800acc8:	4013      	ands	r3, r2
 800acca:	d00b      	beq.n	800ace4 <HAL_SPI_IRQHandler+0x68>
 800accc:	69fb      	ldr	r3, [r7, #28]
 800acce:	09db      	lsrs	r3, r3, #7
 800acd0:	001a      	movs	r2, r3
 800acd2:	2301      	movs	r3, #1
 800acd4:	4013      	ands	r3, r2
 800acd6:	d005      	beq.n	800ace4 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	0010      	movs	r0, r2
 800ace0:	4798      	blx	r3
    return;
 800ace2:	e0c4      	b.n	800ae6e <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800ace4:	69bb      	ldr	r3, [r7, #24]
 800ace6:	095b      	lsrs	r3, r3, #5
 800ace8:	001a      	movs	r2, r3
 800acea:	2301      	movs	r3, #1
 800acec:	4013      	ands	r3, r2
 800acee:	d10c      	bne.n	800ad0a <HAL_SPI_IRQHandler+0x8e>
 800acf0:	69bb      	ldr	r3, [r7, #24]
 800acf2:	099b      	lsrs	r3, r3, #6
 800acf4:	001a      	movs	r2, r3
 800acf6:	2301      	movs	r3, #1
 800acf8:	4013      	ands	r3, r2
 800acfa:	d106      	bne.n	800ad0a <HAL_SPI_IRQHandler+0x8e>
 800acfc:	69bb      	ldr	r3, [r7, #24]
 800acfe:	0a1b      	lsrs	r3, r3, #8
 800ad00:	001a      	movs	r2, r3
 800ad02:	2301      	movs	r3, #1
 800ad04:	4013      	ands	r3, r2
 800ad06:	d100      	bne.n	800ad0a <HAL_SPI_IRQHandler+0x8e>
 800ad08:	e0b1      	b.n	800ae6e <HAL_SPI_IRQHandler+0x1f2>
 800ad0a:	69fb      	ldr	r3, [r7, #28]
 800ad0c:	095b      	lsrs	r3, r3, #5
 800ad0e:	001a      	movs	r2, r3
 800ad10:	2301      	movs	r3, #1
 800ad12:	4013      	ands	r3, r2
 800ad14:	d100      	bne.n	800ad18 <HAL_SPI_IRQHandler+0x9c>
 800ad16:	e0aa      	b.n	800ae6e <HAL_SPI_IRQHandler+0x1f2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ad18:	69bb      	ldr	r3, [r7, #24]
 800ad1a:	099b      	lsrs	r3, r3, #6
 800ad1c:	001a      	movs	r2, r3
 800ad1e:	2301      	movs	r3, #1
 800ad20:	4013      	ands	r3, r2
 800ad22:	d023      	beq.n	800ad6c <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2251      	movs	r2, #81	; 0x51
 800ad28:	5c9b      	ldrb	r3, [r3, r2]
 800ad2a:	b2db      	uxtb	r3, r3
 800ad2c:	2b03      	cmp	r3, #3
 800ad2e:	d011      	beq.n	800ad54 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad34:	2204      	movs	r2, #4
 800ad36:	431a      	orrs	r2, r3
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	617b      	str	r3, [r7, #20]
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	68db      	ldr	r3, [r3, #12]
 800ad46:	617b      	str	r3, [r7, #20]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	689b      	ldr	r3, [r3, #8]
 800ad4e:	617b      	str	r3, [r7, #20]
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	e00b      	b.n	800ad6c <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ad54:	2300      	movs	r3, #0
 800ad56:	613b      	str	r3, [r7, #16]
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	68db      	ldr	r3, [r3, #12]
 800ad5e:	613b      	str	r3, [r7, #16]
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	689b      	ldr	r3, [r3, #8]
 800ad66:	613b      	str	r3, [r7, #16]
 800ad68:	693b      	ldr	r3, [r7, #16]
        return;
 800ad6a:	e080      	b.n	800ae6e <HAL_SPI_IRQHandler+0x1f2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800ad6c:	69bb      	ldr	r3, [r7, #24]
 800ad6e:	095b      	lsrs	r3, r3, #5
 800ad70:	001a      	movs	r2, r3
 800ad72:	2301      	movs	r3, #1
 800ad74:	4013      	ands	r3, r2
 800ad76:	d014      	beq.n	800ada2 <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad7c:	2201      	movs	r2, #1
 800ad7e:	431a      	orrs	r2, r3
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ad84:	2300      	movs	r3, #0
 800ad86:	60fb      	str	r3, [r7, #12]
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	689b      	ldr	r3, [r3, #8]
 800ad8e:	60fb      	str	r3, [r7, #12]
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	681a      	ldr	r2, [r3, #0]
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	2140      	movs	r1, #64	; 0x40
 800ad9c:	438a      	bics	r2, r1
 800ad9e:	601a      	str	r2, [r3, #0]
 800ada0:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800ada2:	69bb      	ldr	r3, [r7, #24]
 800ada4:	0a1b      	lsrs	r3, r3, #8
 800ada6:	001a      	movs	r2, r3
 800ada8:	2301      	movs	r3, #1
 800adaa:	4013      	ands	r3, r2
 800adac:	d00c      	beq.n	800adc8 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adb2:	2208      	movs	r2, #8
 800adb4:	431a      	orrs	r2, r3
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800adba:	2300      	movs	r3, #0
 800adbc:	60bb      	str	r3, [r7, #8]
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	689b      	ldr	r3, [r3, #8]
 800adc4:	60bb      	str	r3, [r7, #8]
 800adc6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d04d      	beq.n	800ae6c <HAL_SPI_IRQHandler+0x1f0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	685a      	ldr	r2, [r3, #4]
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	21e0      	movs	r1, #224	; 0xe0
 800addc:	438a      	bics	r2, r1
 800adde:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2251      	movs	r2, #81	; 0x51
 800ade4:	2101      	movs	r1, #1
 800ade6:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800ade8:	69fb      	ldr	r3, [r7, #28]
 800adea:	2202      	movs	r2, #2
 800adec:	4013      	ands	r3, r2
 800adee:	d103      	bne.n	800adf8 <HAL_SPI_IRQHandler+0x17c>
 800adf0:	69fb      	ldr	r3, [r7, #28]
 800adf2:	2201      	movs	r2, #1
 800adf4:	4013      	ands	r3, r2
 800adf6:	d032      	beq.n	800ae5e <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	685a      	ldr	r2, [r3, #4]
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	2103      	movs	r1, #3
 800ae04:	438a      	bics	r2, r1
 800ae06:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d010      	beq.n	800ae32 <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae14:	4a17      	ldr	r2, [pc, #92]	; (800ae74 <HAL_SPI_IRQHandler+0x1f8>)
 800ae16:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae1c:	0018      	movs	r0, r3
 800ae1e:	f7fd fb0d 	bl	800843c <HAL_DMA_Abort_IT>
 800ae22:	1e03      	subs	r3, r0, #0
 800ae24:	d005      	beq.n	800ae32 <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae2a:	2240      	movs	r2, #64	; 0x40
 800ae2c:	431a      	orrs	r2, r3
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d016      	beq.n	800ae68 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae3e:	4a0d      	ldr	r2, [pc, #52]	; (800ae74 <HAL_SPI_IRQHandler+0x1f8>)
 800ae40:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae46:	0018      	movs	r0, r3
 800ae48:	f7fd faf8 	bl	800843c <HAL_DMA_Abort_IT>
 800ae4c:	1e03      	subs	r3, r0, #0
 800ae4e:	d00b      	beq.n	800ae68 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae54:	2240      	movs	r2, #64	; 0x40
 800ae56:	431a      	orrs	r2, r3
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800ae5c:	e004      	b.n	800ae68 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	0018      	movs	r0, r3
 800ae62:	f000 f811 	bl	800ae88 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800ae66:	e000      	b.n	800ae6a <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 800ae68:	46c0      	nop			; (mov r8, r8)
    return;
 800ae6a:	46c0      	nop			; (mov r8, r8)
 800ae6c:	46c0      	nop			; (mov r8, r8)
  }
}
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	b008      	add	sp, #32
 800ae72:	bd80      	pop	{r7, pc}
 800ae74:	0800afbd 	.word	0x0800afbd

0800ae78 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b082      	sub	sp, #8
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800ae80:	46c0      	nop			; (mov r8, r8)
 800ae82:	46bd      	mov	sp, r7
 800ae84:	b002      	add	sp, #8
 800ae86:	bd80      	pop	{r7, pc}

0800ae88 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b082      	sub	sp, #8
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800ae90:	46c0      	nop			; (mov r8, r8)
 800ae92:	46bd      	mov	sp, r7
 800ae94:	b002      	add	sp, #8
 800ae96:	bd80      	pop	{r7, pc}

0800ae98 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b082      	sub	sp, #8
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2251      	movs	r2, #81	; 0x51
 800aea4:	5c9b      	ldrb	r3, [r3, r2]
 800aea6:	b2db      	uxtb	r3, r3
}
 800aea8:	0018      	movs	r0, r3
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	b002      	add	sp, #8
 800aeae:	bd80      	pop	{r7, pc}

0800aeb0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b086      	sub	sp, #24
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aebc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aebe:	f7fc fb6f 	bl	80075a0 <HAL_GetTick>
 800aec2:	0003      	movs	r3, r0
 800aec4:	613b      	str	r3, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	2220      	movs	r2, #32
 800aece:	4013      	ands	r3, r2
 800aed0:	2b20      	cmp	r3, #32
 800aed2:	d03c      	beq.n	800af4e <SPI_DMATransmitCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	685a      	ldr	r2, [r3, #4]
 800aeda:	697b      	ldr	r3, [r7, #20]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	2120      	movs	r1, #32
 800aee0:	438a      	bics	r2, r1
 800aee2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	685a      	ldr	r2, [r3, #4]
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	2102      	movs	r1, #2
 800aef0:	438a      	bics	r2, r1
 800aef2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800aef4:	693a      	ldr	r2, [r7, #16]
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	2164      	movs	r1, #100	; 0x64
 800aefa:	0018      	movs	r0, r3
 800aefc:	f000 f92a 	bl	800b154 <SPI_EndRxTxTransaction>
 800af00:	1e03      	subs	r3, r0, #0
 800af02:	d005      	beq.n	800af10 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af08:	2220      	movs	r2, #32
 800af0a:	431a      	orrs	r2, r3
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	689b      	ldr	r3, [r3, #8]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d10a      	bne.n	800af2e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800af18:	2300      	movs	r3, #0
 800af1a:	60fb      	str	r3, [r7, #12]
 800af1c:	697b      	ldr	r3, [r7, #20]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	68db      	ldr	r3, [r3, #12]
 800af22:	60fb      	str	r3, [r7, #12]
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	689b      	ldr	r3, [r3, #8]
 800af2a:	60fb      	str	r3, [r7, #12]
 800af2c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	2200      	movs	r2, #0
 800af32:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	2251      	movs	r2, #81	; 0x51
 800af38:	2101      	movs	r1, #1
 800af3a:	5499      	strb	r1, [r3, r2]

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af40:	2b00      	cmp	r3, #0
 800af42:	d004      	beq.n	800af4e <SPI_DMATransmitCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	0018      	movs	r0, r3
 800af48:	f7ff ff9e 	bl	800ae88 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800af4c:	e003      	b.n	800af56 <SPI_DMATransmitCplt+0xa6>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	0018      	movs	r0, r3
 800af52:	f7f6 ff45 	bl	8001de0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800af56:	46bd      	mov	sp, r7
 800af58:	b006      	add	sp, #24
 800af5a:	bd80      	pop	{r7, pc}

0800af5c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b084      	sub	sp, #16
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af68:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	0018      	movs	r0, r3
 800af6e:	f7ff ff83 	bl	800ae78 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800af72:	46c0      	nop			; (mov r8, r8)
 800af74:	46bd      	mov	sp, r7
 800af76:	b004      	add	sp, #16
 800af78:	bd80      	pop	{r7, pc}

0800af7a <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800af7a:	b580      	push	{r7, lr}
 800af7c:	b084      	sub	sp, #16
 800af7e:	af00      	add	r7, sp, #0
 800af80:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af86:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	685a      	ldr	r2, [r3, #4]
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	2103      	movs	r1, #3
 800af94:	438a      	bics	r2, r1
 800af96:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af9c:	2210      	movs	r2, #16
 800af9e:	431a      	orrs	r2, r3
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	2251      	movs	r2, #81	; 0x51
 800afa8:	2101      	movs	r1, #1
 800afaa:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	0018      	movs	r0, r3
 800afb0:	f7ff ff6a 	bl	800ae88 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800afb4:	46c0      	nop			; (mov r8, r8)
 800afb6:	46bd      	mov	sp, r7
 800afb8:	b004      	add	sp, #16
 800afba:	bd80      	pop	{r7, pc}

0800afbc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b084      	sub	sp, #16
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afc8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	2200      	movs	r2, #0
 800afce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	2200      	movs	r2, #0
 800afd4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	0018      	movs	r0, r3
 800afda:	f7ff ff55 	bl	800ae88 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800afde:	46c0      	nop			; (mov r8, r8)
 800afe0:	46bd      	mov	sp, r7
 800afe2:	b004      	add	sp, #16
 800afe4:	bd80      	pop	{r7, pc}

0800afe6 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800afe6:	b580      	push	{r7, lr}
 800afe8:	b082      	sub	sp, #8
 800afea:	af00      	add	r7, sp, #0
 800afec:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	330c      	adds	r3, #12
 800aff8:	7812      	ldrb	r2, [r2, #0]
 800affa:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b000:	1c5a      	adds	r2, r3, #1
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b00a:	b29b      	uxth	r3, r3
 800b00c:	3b01      	subs	r3, #1
 800b00e:	b29a      	uxth	r2, r3
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b018:	b29b      	uxth	r3, r3
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d103      	bne.n	800b026 <SPI_TxISR_8BIT+0x40>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	0018      	movs	r0, r3
 800b022:	f000 f8d5 	bl	800b1d0 <SPI_CloseTx_ISR>
  }
}
 800b026:	46c0      	nop			; (mov r8, r8)
 800b028:	46bd      	mov	sp, r7
 800b02a:	b002      	add	sp, #8
 800b02c:	bd80      	pop	{r7, pc}

0800b02e <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800b02e:	b580      	push	{r7, lr}
 800b030:	b082      	sub	sp, #8
 800b032:	af00      	add	r7, sp, #0
 800b034:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b03a:	881a      	ldrh	r2, [r3, #0]
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b046:	1c9a      	adds	r2, r3, #2
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b050:	b29b      	uxth	r3, r3
 800b052:	3b01      	subs	r3, #1
 800b054:	b29a      	uxth	r2, r3
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b05e:	b29b      	uxth	r3, r3
 800b060:	2b00      	cmp	r3, #0
 800b062:	d103      	bne.n	800b06c <SPI_TxISR_16BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	0018      	movs	r0, r3
 800b068:	f000 f8b2 	bl	800b1d0 <SPI_CloseTx_ISR>
  }
}
 800b06c:	46c0      	nop			; (mov r8, r8)
 800b06e:	46bd      	mov	sp, r7
 800b070:	b002      	add	sp, #8
 800b072:	bd80      	pop	{r7, pc}

0800b074 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b084      	sub	sp, #16
 800b078:	af00      	add	r7, sp, #0
 800b07a:	60f8      	str	r0, [r7, #12]
 800b07c:	60b9      	str	r1, [r7, #8]
 800b07e:	603b      	str	r3, [r7, #0]
 800b080:	1dfb      	adds	r3, r7, #7
 800b082:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b084:	e050      	b.n	800b128 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	3301      	adds	r3, #1
 800b08a:	d04d      	beq.n	800b128 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800b08c:	f7fc fa88 	bl	80075a0 <HAL_GetTick>
 800b090:	0002      	movs	r2, r0
 800b092:	69bb      	ldr	r3, [r7, #24]
 800b094:	1ad3      	subs	r3, r2, r3
 800b096:	683a      	ldr	r2, [r7, #0]
 800b098:	429a      	cmp	r2, r3
 800b09a:	d902      	bls.n	800b0a2 <SPI_WaitFlagStateUntilTimeout+0x2e>
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d142      	bne.n	800b128 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	685a      	ldr	r2, [r3, #4]
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	21e0      	movs	r1, #224	; 0xe0
 800b0ae:	438a      	bics	r2, r1
 800b0b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	685a      	ldr	r2, [r3, #4]
 800b0b6:	2382      	movs	r3, #130	; 0x82
 800b0b8:	005b      	lsls	r3, r3, #1
 800b0ba:	429a      	cmp	r2, r3
 800b0bc:	d113      	bne.n	800b0e6 <SPI_WaitFlagStateUntilTimeout+0x72>
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	689a      	ldr	r2, [r3, #8]
 800b0c2:	2380      	movs	r3, #128	; 0x80
 800b0c4:	021b      	lsls	r3, r3, #8
 800b0c6:	429a      	cmp	r2, r3
 800b0c8:	d005      	beq.n	800b0d6 <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	689a      	ldr	r2, [r3, #8]
 800b0ce:	2380      	movs	r3, #128	; 0x80
 800b0d0:	00db      	lsls	r3, r3, #3
 800b0d2:	429a      	cmp	r2, r3
 800b0d4:	d107      	bne.n	800b0e6 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	681a      	ldr	r2, [r3, #0]
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	2140      	movs	r1, #64	; 0x40
 800b0e2:	438a      	bics	r2, r1
 800b0e4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b0ea:	2380      	movs	r3, #128	; 0x80
 800b0ec:	019b      	lsls	r3, r3, #6
 800b0ee:	429a      	cmp	r2, r3
 800b0f0:	d110      	bne.n	800b114 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	681a      	ldr	r2, [r3, #0]
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	4914      	ldr	r1, [pc, #80]	; (800b150 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 800b0fe:	400a      	ands	r2, r1
 800b100:	601a      	str	r2, [r3, #0]
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	681a      	ldr	r2, [r3, #0]
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	2180      	movs	r1, #128	; 0x80
 800b10e:	0189      	lsls	r1, r1, #6
 800b110:	430a      	orrs	r2, r1
 800b112:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	2251      	movs	r2, #81	; 0x51
 800b118:	2101      	movs	r1, #1
 800b11a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	2250      	movs	r2, #80	; 0x50
 800b120:	2100      	movs	r1, #0
 800b122:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800b124:	2303      	movs	r3, #3
 800b126:	e00f      	b.n	800b148 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	689b      	ldr	r3, [r3, #8]
 800b12e:	68ba      	ldr	r2, [r7, #8]
 800b130:	4013      	ands	r3, r2
 800b132:	68ba      	ldr	r2, [r7, #8]
 800b134:	1ad3      	subs	r3, r2, r3
 800b136:	425a      	negs	r2, r3
 800b138:	4153      	adcs	r3, r2
 800b13a:	b2db      	uxtb	r3, r3
 800b13c:	001a      	movs	r2, r3
 800b13e:	1dfb      	adds	r3, r7, #7
 800b140:	781b      	ldrb	r3, [r3, #0]
 800b142:	429a      	cmp	r2, r3
 800b144:	d19f      	bne.n	800b086 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800b146:	2300      	movs	r3, #0
}
 800b148:	0018      	movs	r0, r3
 800b14a:	46bd      	mov	sp, r7
 800b14c:	b004      	add	sp, #16
 800b14e:	bd80      	pop	{r7, pc}
 800b150:	ffffdfff 	.word	0xffffdfff

0800b154 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b086      	sub	sp, #24
 800b158:	af02      	add	r7, sp, #8
 800b15a:	60f8      	str	r0, [r7, #12]
 800b15c:	60b9      	str	r1, [r7, #8]
 800b15e:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	685a      	ldr	r2, [r3, #4]
 800b164:	2382      	movs	r3, #130	; 0x82
 800b166:	005b      	lsls	r3, r3, #1
 800b168:	429a      	cmp	r2, r3
 800b16a:	d112      	bne.n	800b192 <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b16c:	68ba      	ldr	r2, [r7, #8]
 800b16e:	68f8      	ldr	r0, [r7, #12]
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	9300      	str	r3, [sp, #0]
 800b174:	0013      	movs	r3, r2
 800b176:	2200      	movs	r2, #0
 800b178:	2180      	movs	r1, #128	; 0x80
 800b17a:	f7ff ff7b 	bl	800b074 <SPI_WaitFlagStateUntilTimeout>
 800b17e:	1e03      	subs	r3, r0, #0
 800b180:	d020      	beq.n	800b1c4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b186:	2220      	movs	r2, #32
 800b188:	431a      	orrs	r2, r3
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b18e:	2303      	movs	r3, #3
 800b190:	e019      	b.n	800b1c6 <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	2251      	movs	r2, #81	; 0x51
 800b196:	5c9b      	ldrb	r3, [r3, r2]
 800b198:	b2db      	uxtb	r3, r3
 800b19a:	2b05      	cmp	r3, #5
 800b19c:	d112      	bne.n	800b1c4 <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b19e:	68ba      	ldr	r2, [r7, #8]
 800b1a0:	68f8      	ldr	r0, [r7, #12]
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	9300      	str	r3, [sp, #0]
 800b1a6:	0013      	movs	r3, r2
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	2101      	movs	r1, #1
 800b1ac:	f7ff ff62 	bl	800b074 <SPI_WaitFlagStateUntilTimeout>
 800b1b0:	1e03      	subs	r3, r0, #0
 800b1b2:	d007      	beq.n	800b1c4 <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1b8:	2220      	movs	r2, #32
 800b1ba:	431a      	orrs	r2, r3
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800b1c0:	2303      	movs	r3, #3
 800b1c2:	e000      	b.n	800b1c6 <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 800b1c4:	2300      	movs	r3, #0
}
 800b1c6:	0018      	movs	r0, r3
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	b004      	add	sp, #16
 800b1cc:	bd80      	pop	{r7, pc}
	...

0800b1d0 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b086      	sub	sp, #24
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800b1d8:	4b2d      	ldr	r3, [pc, #180]	; (800b290 <SPI_CloseTx_ISR+0xc0>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	492d      	ldr	r1, [pc, #180]	; (800b294 <SPI_CloseTx_ISR+0xc4>)
 800b1de:	0018      	movs	r0, r3
 800b1e0:	f7f4 ff9a 	bl	8000118 <__udivsi3>
 800b1e4:	0003      	movs	r3, r0
 800b1e6:	001a      	movs	r2, r3
 800b1e8:	2364      	movs	r3, #100	; 0x64
 800b1ea:	4353      	muls	r3, r2
 800b1ec:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b1ee:	f7fc f9d7 	bl	80075a0 <HAL_GetTick>
 800b1f2:	0003      	movs	r3, r0
 800b1f4:	617b      	str	r3, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800b1f6:	693b      	ldr	r3, [r7, #16]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d106      	bne.n	800b20a <SPI_CloseTx_ISR+0x3a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b200:	2220      	movs	r2, #32
 800b202:	431a      	orrs	r2, r3
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b208:	e008      	b.n	800b21c <SPI_CloseTx_ISR+0x4c>
    }
    count--;
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	3b01      	subs	r3, #1
 800b20e:	613b      	str	r3, [r7, #16]
  }
  while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	689b      	ldr	r3, [r3, #8]
 800b216:	2202      	movs	r2, #2
 800b218:	4013      	ands	r3, r2
 800b21a:	d0ec      	beq.n	800b1f6 <SPI_CloseTx_ISR+0x26>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	685a      	ldr	r2, [r3, #4]
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	21a0      	movs	r1, #160	; 0xa0
 800b228:	438a      	bics	r2, r1
 800b22a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b22c:	697a      	ldr	r2, [r7, #20]
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2164      	movs	r1, #100	; 0x64
 800b232:	0018      	movs	r0, r3
 800b234:	f7ff ff8e 	bl	800b154 <SPI_EndRxTxTransaction>
 800b238:	1e03      	subs	r3, r0, #0
 800b23a:	d005      	beq.n	800b248 <SPI_CloseTx_ISR+0x78>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b240:	2220      	movs	r2, #32
 800b242:	431a      	orrs	r2, r3
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	689b      	ldr	r3, [r3, #8]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d10a      	bne.n	800b266 <SPI_CloseTx_ISR+0x96>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b250:	2300      	movs	r3, #0
 800b252:	60fb      	str	r3, [r7, #12]
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	68db      	ldr	r3, [r3, #12]
 800b25a:	60fb      	str	r3, [r7, #12]
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	689b      	ldr	r3, [r3, #8]
 800b262:	60fb      	str	r3, [r7, #12]
 800b264:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2251      	movs	r2, #81	; 0x51
 800b26a:	2101      	movs	r1, #1
 800b26c:	5499      	strb	r1, [r3, r2]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b272:	2b00      	cmp	r3, #0
 800b274:	d004      	beq.n	800b280 <SPI_CloseTx_ISR+0xb0>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	0018      	movs	r0, r3
 800b27a:	f7ff fe05 	bl	800ae88 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800b27e:	e003      	b.n	800b288 <SPI_CloseTx_ISR+0xb8>
    HAL_SPI_TxCpltCallback(hspi);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	0018      	movs	r0, r3
 800b284:	f7f6 fdac 	bl	8001de0 <HAL_SPI_TxCpltCallback>
}
 800b288:	46c0      	nop			; (mov r8, r8)
 800b28a:	46bd      	mov	sp, r7
 800b28c:	b006      	add	sp, #24
 800b28e:	bd80      	pop	{r7, pc}
 800b290:	20000020 	.word	0x20000020
 800b294:	00005dc0 	.word	0x00005dc0

0800b298 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b082      	sub	sp, #8
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d101      	bne.n	800b2aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	e01e      	b.n	800b2e8 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2239      	movs	r2, #57	; 0x39
 800b2ae:	5c9b      	ldrb	r3, [r3, r2]
 800b2b0:	b2db      	uxtb	r3, r3
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d107      	bne.n	800b2c6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2238      	movs	r2, #56	; 0x38
 800b2ba:	2100      	movs	r1, #0
 800b2bc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	0018      	movs	r0, r3
 800b2c2:	f7f9 fa5b 	bl	800477c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2239      	movs	r2, #57	; 0x39
 800b2ca:	2102      	movs	r1, #2
 800b2cc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681a      	ldr	r2, [r3, #0]
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	3304      	adds	r3, #4
 800b2d6:	0019      	movs	r1, r3
 800b2d8:	0010      	movs	r0, r2
 800b2da:	f000 fc3f 	bl	800bb5c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2239      	movs	r2, #57	; 0x39
 800b2e2:	2101      	movs	r1, #1
 800b2e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b2e6:	2300      	movs	r3, #0
}
 800b2e8:	0018      	movs	r0, r3
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	b002      	add	sp, #8
 800b2ee:	bd80      	pop	{r7, pc}

0800b2f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b084      	sub	sp, #16
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	68da      	ldr	r2, [r3, #12]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	2101      	movs	r1, #1
 800b304:	430a      	orrs	r2, r1
 800b306:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	689b      	ldr	r3, [r3, #8]
 800b30e:	2207      	movs	r2, #7
 800b310:	4013      	ands	r3, r2
 800b312:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	2b06      	cmp	r3, #6
 800b318:	d007      	beq.n	800b32a <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	681a      	ldr	r2, [r3, #0]
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	2101      	movs	r1, #1
 800b326:	430a      	orrs	r2, r1
 800b328:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b32a:	2300      	movs	r3, #0
}
 800b32c:	0018      	movs	r0, r3
 800b32e:	46bd      	mov	sp, r7
 800b330:	b004      	add	sp, #16
 800b332:	bd80      	pop	{r7, pc}

0800b334 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b082      	sub	sp, #8
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	68da      	ldr	r2, [r3, #12]
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	2101      	movs	r1, #1
 800b348:	438a      	bics	r2, r1
 800b34a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	6a1b      	ldr	r3, [r3, #32]
 800b352:	4a08      	ldr	r2, [pc, #32]	; (800b374 <HAL_TIM_Base_Stop_IT+0x40>)
 800b354:	4013      	ands	r3, r2
 800b356:	d107      	bne.n	800b368 <HAL_TIM_Base_Stop_IT+0x34>
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	681a      	ldr	r2, [r3, #0]
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	2101      	movs	r1, #1
 800b364:	438a      	bics	r2, r1
 800b366:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b368:	2300      	movs	r3, #0
}
 800b36a:	0018      	movs	r0, r3
 800b36c:	46bd      	mov	sp, r7
 800b36e:	b002      	add	sp, #8
 800b370:	bd80      	pop	{r7, pc}
 800b372:	46c0      	nop			; (mov r8, r8)
 800b374:	00001111 	.word	0x00001111

0800b378 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b082      	sub	sp, #8
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d101      	bne.n	800b38a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800b386:	2301      	movs	r3, #1
 800b388:	e01e      	b.n	800b3c8 <HAL_TIM_OC_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2239      	movs	r2, #57	; 0x39
 800b38e:	5c9b      	ldrb	r3, [r3, r2]
 800b390:	b2db      	uxtb	r3, r3
 800b392:	2b00      	cmp	r3, #0
 800b394:	d107      	bne.n	800b3a6 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2238      	movs	r2, #56	; 0x38
 800b39a:	2100      	movs	r1, #0
 800b39c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	0018      	movs	r0, r3
 800b3a2:	f000 f815 	bl	800b3d0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2239      	movs	r2, #57	; 0x39
 800b3aa:	2102      	movs	r1, #2
 800b3ac:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681a      	ldr	r2, [r3, #0]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	3304      	adds	r3, #4
 800b3b6:	0019      	movs	r1, r3
 800b3b8:	0010      	movs	r0, r2
 800b3ba:	f000 fbcf 	bl	800bb5c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2239      	movs	r2, #57	; 0x39
 800b3c2:	2101      	movs	r1, #1
 800b3c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b3c6:	2300      	movs	r3, #0
}
 800b3c8:	0018      	movs	r0, r3
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	b002      	add	sp, #8
 800b3ce:	bd80      	pop	{r7, pc}

0800b3d0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b082      	sub	sp, #8
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800b3d8:	46c0      	nop			; (mov r8, r8)
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	b002      	add	sp, #8
 800b3de:	bd80      	pop	{r7, pc}

0800b3e0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b084      	sub	sp, #16
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	2b04      	cmp	r3, #4
 800b3ee:	d011      	beq.n	800b414 <HAL_TIM_OC_Start_IT+0x34>
 800b3f0:	d802      	bhi.n	800b3f8 <HAL_TIM_OC_Start_IT+0x18>
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d005      	beq.n	800b402 <HAL_TIM_OC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
      break;
    }

    default:
      break;
 800b3f6:	e028      	b.n	800b44a <HAL_TIM_OC_Start_IT+0x6a>
  switch (Channel)
 800b3f8:	2b08      	cmp	r3, #8
 800b3fa:	d014      	beq.n	800b426 <HAL_TIM_OC_Start_IT+0x46>
 800b3fc:	2b0c      	cmp	r3, #12
 800b3fe:	d01b      	beq.n	800b438 <HAL_TIM_OC_Start_IT+0x58>
      break;
 800b400:	e023      	b.n	800b44a <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	68da      	ldr	r2, [r3, #12]
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	2102      	movs	r1, #2
 800b40e:	430a      	orrs	r2, r1
 800b410:	60da      	str	r2, [r3, #12]
      break;
 800b412:	e01a      	b.n	800b44a <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	68da      	ldr	r2, [r3, #12]
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	2104      	movs	r1, #4
 800b420:	430a      	orrs	r2, r1
 800b422:	60da      	str	r2, [r3, #12]
      break;
 800b424:	e011      	b.n	800b44a <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	68da      	ldr	r2, [r3, #12]
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	2108      	movs	r1, #8
 800b432:	430a      	orrs	r2, r1
 800b434:	60da      	str	r2, [r3, #12]
      break;
 800b436:	e008      	b.n	800b44a <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	68da      	ldr	r2, [r3, #12]
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	2110      	movs	r1, #16
 800b444:	430a      	orrs	r2, r1
 800b446:	60da      	str	r2, [r3, #12]
      break;
 800b448:	46c0      	nop			; (mov r8, r8)
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	6839      	ldr	r1, [r7, #0]
 800b450:	2201      	movs	r2, #1
 800b452:	0018      	movs	r0, r3
 800b454:	f000 fd7e 	bl	800bf54 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	689b      	ldr	r3, [r3, #8]
 800b45e:	2207      	movs	r2, #7
 800b460:	4013      	ands	r3, r2
 800b462:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	2b06      	cmp	r3, #6
 800b468:	d007      	beq.n	800b47a <HAL_TIM_OC_Start_IT+0x9a>
  {
    __HAL_TIM_ENABLE(htim);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	681a      	ldr	r2, [r3, #0]
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	2101      	movs	r1, #1
 800b476:	430a      	orrs	r2, r1
 800b478:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b47a:	2300      	movs	r3, #0
}
 800b47c:	0018      	movs	r0, r3
 800b47e:	46bd      	mov	sp, r7
 800b480:	b004      	add	sp, #16
 800b482:	bd80      	pop	{r7, pc}

0800b484 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b082      	sub	sp, #8
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
 800b48c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	2b04      	cmp	r3, #4
 800b492:	d011      	beq.n	800b4b8 <HAL_TIM_OC_Stop_IT+0x34>
 800b494:	d802      	bhi.n	800b49c <HAL_TIM_OC_Stop_IT+0x18>
 800b496:	2b00      	cmp	r3, #0
 800b498:	d005      	beq.n	800b4a6 <HAL_TIM_OC_Stop_IT+0x22>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
      break;
    }

    default:
      break;
 800b49a:	e028      	b.n	800b4ee <HAL_TIM_OC_Stop_IT+0x6a>
  switch (Channel)
 800b49c:	2b08      	cmp	r3, #8
 800b49e:	d014      	beq.n	800b4ca <HAL_TIM_OC_Stop_IT+0x46>
 800b4a0:	2b0c      	cmp	r3, #12
 800b4a2:	d01b      	beq.n	800b4dc <HAL_TIM_OC_Stop_IT+0x58>
      break;
 800b4a4:	e023      	b.n	800b4ee <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	68da      	ldr	r2, [r3, #12]
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	2102      	movs	r1, #2
 800b4b2:	438a      	bics	r2, r1
 800b4b4:	60da      	str	r2, [r3, #12]
      break;
 800b4b6:	e01a      	b.n	800b4ee <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	68da      	ldr	r2, [r3, #12]
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	2104      	movs	r1, #4
 800b4c4:	438a      	bics	r2, r1
 800b4c6:	60da      	str	r2, [r3, #12]
      break;
 800b4c8:	e011      	b.n	800b4ee <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	68da      	ldr	r2, [r3, #12]
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	2108      	movs	r1, #8
 800b4d6:	438a      	bics	r2, r1
 800b4d8:	60da      	str	r2, [r3, #12]
      break;
 800b4da:	e008      	b.n	800b4ee <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	68da      	ldr	r2, [r3, #12]
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	2110      	movs	r1, #16
 800b4e8:	438a      	bics	r2, r1
 800b4ea:	60da      	str	r2, [r3, #12]
      break;
 800b4ec:	46c0      	nop			; (mov r8, r8)
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	6839      	ldr	r1, [r7, #0]
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	0018      	movs	r0, r3
 800b4f8:	f000 fd2c 	bl	800bf54 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	6a1b      	ldr	r3, [r3, #32]
 800b502:	4a08      	ldr	r2, [pc, #32]	; (800b524 <HAL_TIM_OC_Stop_IT+0xa0>)
 800b504:	4013      	ands	r3, r2
 800b506:	d107      	bne.n	800b518 <HAL_TIM_OC_Stop_IT+0x94>
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	681a      	ldr	r2, [r3, #0]
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	2101      	movs	r1, #1
 800b514:	438a      	bics	r2, r1
 800b516:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b518:	2300      	movs	r3, #0
}
 800b51a:	0018      	movs	r0, r3
 800b51c:	46bd      	mov	sp, r7
 800b51e:	b002      	add	sp, #8
 800b520:	bd80      	pop	{r7, pc}
 800b522:	46c0      	nop			; (mov r8, r8)
 800b524:	00001111 	.word	0x00001111

0800b528 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b082      	sub	sp, #8
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d101      	bne.n	800b53a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b536:	2301      	movs	r3, #1
 800b538:	e01e      	b.n	800b578 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2239      	movs	r2, #57	; 0x39
 800b53e:	5c9b      	ldrb	r3, [r3, r2]
 800b540:	b2db      	uxtb	r3, r3
 800b542:	2b00      	cmp	r3, #0
 800b544:	d107      	bne.n	800b556 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2238      	movs	r2, #56	; 0x38
 800b54a:	2100      	movs	r1, #0
 800b54c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	0018      	movs	r0, r3
 800b552:	f000 f815 	bl	800b580 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2239      	movs	r2, #57	; 0x39
 800b55a:	2102      	movs	r1, #2
 800b55c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681a      	ldr	r2, [r3, #0]
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	3304      	adds	r3, #4
 800b566:	0019      	movs	r1, r3
 800b568:	0010      	movs	r0, r2
 800b56a:	f000 faf7 	bl	800bb5c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2239      	movs	r2, #57	; 0x39
 800b572:	2101      	movs	r1, #1
 800b574:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b576:	2300      	movs	r3, #0
}
 800b578:	0018      	movs	r0, r3
 800b57a:	46bd      	mov	sp, r7
 800b57c:	b002      	add	sp, #8
 800b57e:	bd80      	pop	{r7, pc}

0800b580 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b082      	sub	sp, #8
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b588:	46c0      	nop			; (mov r8, r8)
 800b58a:	46bd      	mov	sp, r7
 800b58c:	b002      	add	sp, #8
 800b58e:	bd80      	pop	{r7, pc}

0800b590 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b084      	sub	sp, #16
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
 800b598:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	6839      	ldr	r1, [r7, #0]
 800b5a0:	2201      	movs	r2, #1
 800b5a2:	0018      	movs	r0, r3
 800b5a4:	f000 fcd6 	bl	800bf54 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	689b      	ldr	r3, [r3, #8]
 800b5ae:	2207      	movs	r2, #7
 800b5b0:	4013      	ands	r3, r2
 800b5b2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	2b06      	cmp	r3, #6
 800b5b8:	d007      	beq.n	800b5ca <HAL_TIM_PWM_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	681a      	ldr	r2, [r3, #0]
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	2101      	movs	r1, #1
 800b5c6:	430a      	orrs	r2, r1
 800b5c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b5ca:	2300      	movs	r3, #0
}
 800b5cc:	0018      	movs	r0, r3
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	b004      	add	sp, #16
 800b5d2:	bd80      	pop	{r7, pc}

0800b5d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b082      	sub	sp, #8
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	691b      	ldr	r3, [r3, #16]
 800b5e2:	2202      	movs	r2, #2
 800b5e4:	4013      	ands	r3, r2
 800b5e6:	2b02      	cmp	r3, #2
 800b5e8:	d124      	bne.n	800b634 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	68db      	ldr	r3, [r3, #12]
 800b5f0:	2202      	movs	r2, #2
 800b5f2:	4013      	ands	r3, r2
 800b5f4:	2b02      	cmp	r3, #2
 800b5f6:	d11d      	bne.n	800b634 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	2203      	movs	r2, #3
 800b5fe:	4252      	negs	r2, r2
 800b600:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2201      	movs	r2, #1
 800b606:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	699b      	ldr	r3, [r3, #24]
 800b60e:	2203      	movs	r2, #3
 800b610:	4013      	ands	r3, r2
 800b612:	d004      	beq.n	800b61e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	0018      	movs	r0, r3
 800b618:	f000 fa88 	bl	800bb2c <HAL_TIM_IC_CaptureCallback>
 800b61c:	e007      	b.n	800b62e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	0018      	movs	r0, r3
 800b622:	f7f9 fa9b 	bl	8004b5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	0018      	movs	r0, r3
 800b62a:	f000 fa87 	bl	800bb3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2200      	movs	r2, #0
 800b632:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	691b      	ldr	r3, [r3, #16]
 800b63a:	2204      	movs	r2, #4
 800b63c:	4013      	ands	r3, r2
 800b63e:	2b04      	cmp	r3, #4
 800b640:	d125      	bne.n	800b68e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	68db      	ldr	r3, [r3, #12]
 800b648:	2204      	movs	r2, #4
 800b64a:	4013      	ands	r3, r2
 800b64c:	2b04      	cmp	r3, #4
 800b64e:	d11e      	bne.n	800b68e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	2205      	movs	r2, #5
 800b656:	4252      	negs	r2, r2
 800b658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2202      	movs	r2, #2
 800b65e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	699a      	ldr	r2, [r3, #24]
 800b666:	23c0      	movs	r3, #192	; 0xc0
 800b668:	009b      	lsls	r3, r3, #2
 800b66a:	4013      	ands	r3, r2
 800b66c:	d004      	beq.n	800b678 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	0018      	movs	r0, r3
 800b672:	f000 fa5b 	bl	800bb2c <HAL_TIM_IC_CaptureCallback>
 800b676:	e007      	b.n	800b688 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	0018      	movs	r0, r3
 800b67c:	f7f9 fa6e 	bl	8004b5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	0018      	movs	r0, r3
 800b684:	f000 fa5a 	bl	800bb3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2200      	movs	r2, #0
 800b68c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	691b      	ldr	r3, [r3, #16]
 800b694:	2208      	movs	r2, #8
 800b696:	4013      	ands	r3, r2
 800b698:	2b08      	cmp	r3, #8
 800b69a:	d124      	bne.n	800b6e6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	68db      	ldr	r3, [r3, #12]
 800b6a2:	2208      	movs	r2, #8
 800b6a4:	4013      	ands	r3, r2
 800b6a6:	2b08      	cmp	r3, #8
 800b6a8:	d11d      	bne.n	800b6e6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	2209      	movs	r2, #9
 800b6b0:	4252      	negs	r2, r2
 800b6b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2204      	movs	r2, #4
 800b6b8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	69db      	ldr	r3, [r3, #28]
 800b6c0:	2203      	movs	r2, #3
 800b6c2:	4013      	ands	r3, r2
 800b6c4:	d004      	beq.n	800b6d0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	0018      	movs	r0, r3
 800b6ca:	f000 fa2f 	bl	800bb2c <HAL_TIM_IC_CaptureCallback>
 800b6ce:	e007      	b.n	800b6e0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	0018      	movs	r0, r3
 800b6d4:	f7f9 fa42 	bl	8004b5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	0018      	movs	r0, r3
 800b6dc:	f000 fa2e 	bl	800bb3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	691b      	ldr	r3, [r3, #16]
 800b6ec:	2210      	movs	r2, #16
 800b6ee:	4013      	ands	r3, r2
 800b6f0:	2b10      	cmp	r3, #16
 800b6f2:	d125      	bne.n	800b740 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	68db      	ldr	r3, [r3, #12]
 800b6fa:	2210      	movs	r2, #16
 800b6fc:	4013      	ands	r3, r2
 800b6fe:	2b10      	cmp	r3, #16
 800b700:	d11e      	bne.n	800b740 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	2211      	movs	r2, #17
 800b708:	4252      	negs	r2, r2
 800b70a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2208      	movs	r2, #8
 800b710:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	69da      	ldr	r2, [r3, #28]
 800b718:	23c0      	movs	r3, #192	; 0xc0
 800b71a:	009b      	lsls	r3, r3, #2
 800b71c:	4013      	ands	r3, r2
 800b71e:	d004      	beq.n	800b72a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	0018      	movs	r0, r3
 800b724:	f000 fa02 	bl	800bb2c <HAL_TIM_IC_CaptureCallback>
 800b728:	e007      	b.n	800b73a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	0018      	movs	r0, r3
 800b72e:	f7f9 fa15 	bl	8004b5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	0018      	movs	r0, r3
 800b736:	f000 fa01 	bl	800bb3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2200      	movs	r2, #0
 800b73e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	691b      	ldr	r3, [r3, #16]
 800b746:	2201      	movs	r2, #1
 800b748:	4013      	ands	r3, r2
 800b74a:	2b01      	cmp	r3, #1
 800b74c:	d10f      	bne.n	800b76e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	68db      	ldr	r3, [r3, #12]
 800b754:	2201      	movs	r2, #1
 800b756:	4013      	ands	r3, r2
 800b758:	2b01      	cmp	r3, #1
 800b75a:	d108      	bne.n	800b76e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	2202      	movs	r2, #2
 800b762:	4252      	negs	r2, r2
 800b764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	0018      	movs	r0, r3
 800b76a:	f7f9 f9bb 	bl	8004ae4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	691b      	ldr	r3, [r3, #16]
 800b774:	2240      	movs	r2, #64	; 0x40
 800b776:	4013      	ands	r3, r2
 800b778:	2b40      	cmp	r3, #64	; 0x40
 800b77a:	d10f      	bne.n	800b79c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	68db      	ldr	r3, [r3, #12]
 800b782:	2240      	movs	r2, #64	; 0x40
 800b784:	4013      	ands	r3, r2
 800b786:	2b40      	cmp	r3, #64	; 0x40
 800b788:	d108      	bne.n	800b79c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	2241      	movs	r2, #65	; 0x41
 800b790:	4252      	negs	r2, r2
 800b792:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	0018      	movs	r0, r3
 800b798:	f000 f9d8 	bl	800bb4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b79c:	46c0      	nop			; (mov r8, r8)
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	b002      	add	sp, #8
 800b7a2:	bd80      	pop	{r7, pc}

0800b7a4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b084      	sub	sp, #16
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	60f8      	str	r0, [r7, #12]
 800b7ac:	60b9      	str	r1, [r7, #8]
 800b7ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	2238      	movs	r2, #56	; 0x38
 800b7b4:	5c9b      	ldrb	r3, [r3, r2]
 800b7b6:	2b01      	cmp	r3, #1
 800b7b8:	d101      	bne.n	800b7be <HAL_TIM_OC_ConfigChannel+0x1a>
 800b7ba:	2302      	movs	r3, #2
 800b7bc:	e03c      	b.n	800b838 <HAL_TIM_OC_ConfigChannel+0x94>
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	2238      	movs	r2, #56	; 0x38
 800b7c2:	2101      	movs	r1, #1
 800b7c4:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	2239      	movs	r2, #57	; 0x39
 800b7ca:	2102      	movs	r1, #2
 800b7cc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2b04      	cmp	r3, #4
 800b7d2:	d010      	beq.n	800b7f6 <HAL_TIM_OC_ConfigChannel+0x52>
 800b7d4:	d802      	bhi.n	800b7dc <HAL_TIM_OC_ConfigChannel+0x38>
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d005      	beq.n	800b7e6 <HAL_TIM_OC_ConfigChannel+0x42>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      break;
    }

    default:
      break;
 800b7da:	e024      	b.n	800b826 <HAL_TIM_OC_ConfigChannel+0x82>
  switch (Channel)
 800b7dc:	2b08      	cmp	r3, #8
 800b7de:	d012      	beq.n	800b806 <HAL_TIM_OC_ConfigChannel+0x62>
 800b7e0:	2b0c      	cmp	r3, #12
 800b7e2:	d018      	beq.n	800b816 <HAL_TIM_OC_ConfigChannel+0x72>
      break;
 800b7e4:	e01f      	b.n	800b826 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	68ba      	ldr	r2, [r7, #8]
 800b7ec:	0011      	movs	r1, r2
 800b7ee:	0018      	movs	r0, r3
 800b7f0:	f000 fa12 	bl	800bc18 <TIM_OC1_SetConfig>
      break;
 800b7f4:	e017      	b.n	800b826 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	68ba      	ldr	r2, [r7, #8]
 800b7fc:	0011      	movs	r1, r2
 800b7fe:	0018      	movs	r0, r3
 800b800:	f000 fa46 	bl	800bc90 <TIM_OC2_SetConfig>
      break;
 800b804:	e00f      	b.n	800b826 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	68ba      	ldr	r2, [r7, #8]
 800b80c:	0011      	movs	r1, r2
 800b80e:	0018      	movs	r0, r3
 800b810:	f000 fa80 	bl	800bd14 <TIM_OC3_SetConfig>
      break;
 800b814:	e007      	b.n	800b826 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	68ba      	ldr	r2, [r7, #8]
 800b81c:	0011      	movs	r1, r2
 800b81e:	0018      	movs	r0, r3
 800b820:	f000 fab8 	bl	800bd94 <TIM_OC4_SetConfig>
      break;
 800b824:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	2239      	movs	r2, #57	; 0x39
 800b82a:	2101      	movs	r1, #1
 800b82c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	2238      	movs	r2, #56	; 0x38
 800b832:	2100      	movs	r1, #0
 800b834:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b836:	2300      	movs	r3, #0
}
 800b838:	0018      	movs	r0, r3
 800b83a:	46bd      	mov	sp, r7
 800b83c:	b004      	add	sp, #16
 800b83e:	bd80      	pop	{r7, pc}

0800b840 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b084      	sub	sp, #16
 800b844:	af00      	add	r7, sp, #0
 800b846:	60f8      	str	r0, [r7, #12]
 800b848:	60b9      	str	r1, [r7, #8]
 800b84a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	2238      	movs	r2, #56	; 0x38
 800b850:	5c9b      	ldrb	r3, [r3, r2]
 800b852:	2b01      	cmp	r3, #1
 800b854:	d101      	bne.n	800b85a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800b856:	2302      	movs	r3, #2
 800b858:	e0a4      	b.n	800b9a4 <HAL_TIM_PWM_ConfigChannel+0x164>
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	2238      	movs	r2, #56	; 0x38
 800b85e:	2101      	movs	r1, #1
 800b860:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	2239      	movs	r2, #57	; 0x39
 800b866:	2102      	movs	r1, #2
 800b868:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2b04      	cmp	r3, #4
 800b86e:	d029      	beq.n	800b8c4 <HAL_TIM_PWM_ConfigChannel+0x84>
 800b870:	d802      	bhi.n	800b878 <HAL_TIM_PWM_ConfigChannel+0x38>
 800b872:	2b00      	cmp	r3, #0
 800b874:	d005      	beq.n	800b882 <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 800b876:	e08c      	b.n	800b992 <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 800b878:	2b08      	cmp	r3, #8
 800b87a:	d046      	beq.n	800b90a <HAL_TIM_PWM_ConfigChannel+0xca>
 800b87c:	2b0c      	cmp	r3, #12
 800b87e:	d065      	beq.n	800b94c <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 800b880:	e087      	b.n	800b992 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	68ba      	ldr	r2, [r7, #8]
 800b888:	0011      	movs	r1, r2
 800b88a:	0018      	movs	r0, r3
 800b88c:	f000 f9c4 	bl	800bc18 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	699a      	ldr	r2, [r3, #24]
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	2108      	movs	r1, #8
 800b89c:	430a      	orrs	r2, r1
 800b89e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	699a      	ldr	r2, [r3, #24]
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	2104      	movs	r1, #4
 800b8ac:	438a      	bics	r2, r1
 800b8ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	6999      	ldr	r1, [r3, #24]
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	68da      	ldr	r2, [r3, #12]
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	430a      	orrs	r2, r1
 800b8c0:	619a      	str	r2, [r3, #24]
      break;
 800b8c2:	e066      	b.n	800b992 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	68ba      	ldr	r2, [r7, #8]
 800b8ca:	0011      	movs	r1, r2
 800b8cc:	0018      	movs	r0, r3
 800b8ce:	f000 f9df 	bl	800bc90 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	699a      	ldr	r2, [r3, #24]
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	2180      	movs	r1, #128	; 0x80
 800b8de:	0109      	lsls	r1, r1, #4
 800b8e0:	430a      	orrs	r2, r1
 800b8e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	699a      	ldr	r2, [r3, #24]
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	492f      	ldr	r1, [pc, #188]	; (800b9ac <HAL_TIM_PWM_ConfigChannel+0x16c>)
 800b8f0:	400a      	ands	r2, r1
 800b8f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	6999      	ldr	r1, [r3, #24]
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	68db      	ldr	r3, [r3, #12]
 800b8fe:	021a      	lsls	r2, r3, #8
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	430a      	orrs	r2, r1
 800b906:	619a      	str	r2, [r3, #24]
      break;
 800b908:	e043      	b.n	800b992 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	68ba      	ldr	r2, [r7, #8]
 800b910:	0011      	movs	r1, r2
 800b912:	0018      	movs	r0, r3
 800b914:	f000 f9fe 	bl	800bd14 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	69da      	ldr	r2, [r3, #28]
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	2108      	movs	r1, #8
 800b924:	430a      	orrs	r2, r1
 800b926:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	69da      	ldr	r2, [r3, #28]
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	2104      	movs	r1, #4
 800b934:	438a      	bics	r2, r1
 800b936:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	69d9      	ldr	r1, [r3, #28]
 800b93e:	68bb      	ldr	r3, [r7, #8]
 800b940:	68da      	ldr	r2, [r3, #12]
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	430a      	orrs	r2, r1
 800b948:	61da      	str	r2, [r3, #28]
      break;
 800b94a:	e022      	b.n	800b992 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	68ba      	ldr	r2, [r7, #8]
 800b952:	0011      	movs	r1, r2
 800b954:	0018      	movs	r0, r3
 800b956:	f000 fa1d 	bl	800bd94 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	69da      	ldr	r2, [r3, #28]
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	2180      	movs	r1, #128	; 0x80
 800b966:	0109      	lsls	r1, r1, #4
 800b968:	430a      	orrs	r2, r1
 800b96a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	69da      	ldr	r2, [r3, #28]
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	490d      	ldr	r1, [pc, #52]	; (800b9ac <HAL_TIM_PWM_ConfigChannel+0x16c>)
 800b978:	400a      	ands	r2, r1
 800b97a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	69d9      	ldr	r1, [r3, #28]
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	68db      	ldr	r3, [r3, #12]
 800b986:	021a      	lsls	r2, r3, #8
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	430a      	orrs	r2, r1
 800b98e:	61da      	str	r2, [r3, #28]
      break;
 800b990:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	2239      	movs	r2, #57	; 0x39
 800b996:	2101      	movs	r1, #1
 800b998:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	2238      	movs	r2, #56	; 0x38
 800b99e:	2100      	movs	r1, #0
 800b9a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b9a2:	2300      	movs	r3, #0
}
 800b9a4:	0018      	movs	r0, r3
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	b004      	add	sp, #16
 800b9aa:	bd80      	pop	{r7, pc}
 800b9ac:	fffffbff 	.word	0xfffffbff

0800b9b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b084      	sub	sp, #16
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
 800b9b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2238      	movs	r2, #56	; 0x38
 800b9be:	5c9b      	ldrb	r3, [r3, r2]
 800b9c0:	2b01      	cmp	r3, #1
 800b9c2:	d101      	bne.n	800b9c8 <HAL_TIM_ConfigClockSource+0x18>
 800b9c4:	2302      	movs	r3, #2
 800b9c6:	e0ab      	b.n	800bb20 <HAL_TIM_ConfigClockSource+0x170>
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2238      	movs	r2, #56	; 0x38
 800b9cc:	2101      	movs	r1, #1
 800b9ce:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2239      	movs	r2, #57	; 0x39
 800b9d4:	2102      	movs	r1, #2
 800b9d6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	689b      	ldr	r3, [r3, #8]
 800b9de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	2277      	movs	r2, #119	; 0x77
 800b9e4:	4393      	bics	r3, r2
 800b9e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	4a4f      	ldr	r2, [pc, #316]	; (800bb28 <HAL_TIM_ConfigClockSource+0x178>)
 800b9ec:	4013      	ands	r3, r2
 800b9ee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	68fa      	ldr	r2, [r7, #12]
 800b9f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	2b40      	cmp	r3, #64	; 0x40
 800b9fe:	d100      	bne.n	800ba02 <HAL_TIM_ConfigClockSource+0x52>
 800ba00:	e06b      	b.n	800bada <HAL_TIM_ConfigClockSource+0x12a>
 800ba02:	d80e      	bhi.n	800ba22 <HAL_TIM_ConfigClockSource+0x72>
 800ba04:	2b10      	cmp	r3, #16
 800ba06:	d100      	bne.n	800ba0a <HAL_TIM_ConfigClockSource+0x5a>
 800ba08:	e077      	b.n	800bafa <HAL_TIM_ConfigClockSource+0x14a>
 800ba0a:	d803      	bhi.n	800ba14 <HAL_TIM_ConfigClockSource+0x64>
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d100      	bne.n	800ba12 <HAL_TIM_ConfigClockSource+0x62>
 800ba10:	e073      	b.n	800bafa <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800ba12:	e07c      	b.n	800bb0e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800ba14:	2b20      	cmp	r3, #32
 800ba16:	d100      	bne.n	800ba1a <HAL_TIM_ConfigClockSource+0x6a>
 800ba18:	e06f      	b.n	800bafa <HAL_TIM_ConfigClockSource+0x14a>
 800ba1a:	2b30      	cmp	r3, #48	; 0x30
 800ba1c:	d100      	bne.n	800ba20 <HAL_TIM_ConfigClockSource+0x70>
 800ba1e:	e06c      	b.n	800bafa <HAL_TIM_ConfigClockSource+0x14a>
      break;
 800ba20:	e075      	b.n	800bb0e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800ba22:	2b70      	cmp	r3, #112	; 0x70
 800ba24:	d00e      	beq.n	800ba44 <HAL_TIM_ConfigClockSource+0x94>
 800ba26:	d804      	bhi.n	800ba32 <HAL_TIM_ConfigClockSource+0x82>
 800ba28:	2b50      	cmp	r3, #80	; 0x50
 800ba2a:	d036      	beq.n	800ba9a <HAL_TIM_ConfigClockSource+0xea>
 800ba2c:	2b60      	cmp	r3, #96	; 0x60
 800ba2e:	d044      	beq.n	800baba <HAL_TIM_ConfigClockSource+0x10a>
      break;
 800ba30:	e06d      	b.n	800bb0e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800ba32:	2280      	movs	r2, #128	; 0x80
 800ba34:	0152      	lsls	r2, r2, #5
 800ba36:	4293      	cmp	r3, r2
 800ba38:	d068      	beq.n	800bb0c <HAL_TIM_ConfigClockSource+0x15c>
 800ba3a:	2280      	movs	r2, #128	; 0x80
 800ba3c:	0192      	lsls	r2, r2, #6
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	d017      	beq.n	800ba72 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 800ba42:	e064      	b.n	800bb0e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6818      	ldr	r0, [r3, #0]
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	6899      	ldr	r1, [r3, #8]
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	685a      	ldr	r2, [r3, #4]
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	68db      	ldr	r3, [r3, #12]
 800ba54:	f000 fa5e 	bl	800bf14 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	689b      	ldr	r3, [r3, #8]
 800ba5e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	2277      	movs	r2, #119	; 0x77
 800ba64:	4313      	orrs	r3, r2
 800ba66:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	68fa      	ldr	r2, [r7, #12]
 800ba6e:	609a      	str	r2, [r3, #8]
      break;
 800ba70:	e04d      	b.n	800bb0e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6818      	ldr	r0, [r3, #0]
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	6899      	ldr	r1, [r3, #8]
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	685a      	ldr	r2, [r3, #4]
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	68db      	ldr	r3, [r3, #12]
 800ba82:	f000 fa47 	bl	800bf14 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	689a      	ldr	r2, [r3, #8]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	2180      	movs	r1, #128	; 0x80
 800ba92:	01c9      	lsls	r1, r1, #7
 800ba94:	430a      	orrs	r2, r1
 800ba96:	609a      	str	r2, [r3, #8]
      break;
 800ba98:	e039      	b.n	800bb0e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	6818      	ldr	r0, [r3, #0]
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	6859      	ldr	r1, [r3, #4]
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	68db      	ldr	r3, [r3, #12]
 800baa6:	001a      	movs	r2, r3
 800baa8:	f000 f9ba 	bl	800be20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	2150      	movs	r1, #80	; 0x50
 800bab2:	0018      	movs	r0, r3
 800bab4:	f000 fa14 	bl	800bee0 <TIM_ITRx_SetConfig>
      break;
 800bab8:	e029      	b.n	800bb0e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6818      	ldr	r0, [r3, #0]
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	6859      	ldr	r1, [r3, #4]
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	68db      	ldr	r3, [r3, #12]
 800bac6:	001a      	movs	r2, r3
 800bac8:	f000 f9d8 	bl	800be7c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	2160      	movs	r1, #96	; 0x60
 800bad2:	0018      	movs	r0, r3
 800bad4:	f000 fa04 	bl	800bee0 <TIM_ITRx_SetConfig>
      break;
 800bad8:	e019      	b.n	800bb0e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6818      	ldr	r0, [r3, #0]
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	6859      	ldr	r1, [r3, #4]
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	68db      	ldr	r3, [r3, #12]
 800bae6:	001a      	movs	r2, r3
 800bae8:	f000 f99a 	bl	800be20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	2140      	movs	r1, #64	; 0x40
 800baf2:	0018      	movs	r0, r3
 800baf4:	f000 f9f4 	bl	800bee0 <TIM_ITRx_SetConfig>
      break;
 800baf8:	e009      	b.n	800bb0e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681a      	ldr	r2, [r3, #0]
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	0019      	movs	r1, r3
 800bb04:	0010      	movs	r0, r2
 800bb06:	f000 f9eb 	bl	800bee0 <TIM_ITRx_SetConfig>
      break;
 800bb0a:	e000      	b.n	800bb0e <HAL_TIM_ConfigClockSource+0x15e>
      break;
 800bb0c:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2239      	movs	r2, #57	; 0x39
 800bb12:	2101      	movs	r1, #1
 800bb14:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2238      	movs	r2, #56	; 0x38
 800bb1a:	2100      	movs	r1, #0
 800bb1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bb1e:	2300      	movs	r3, #0
}
 800bb20:	0018      	movs	r0, r3
 800bb22:	46bd      	mov	sp, r7
 800bb24:	b004      	add	sp, #16
 800bb26:	bd80      	pop	{r7, pc}
 800bb28:	ffff00ff 	.word	0xffff00ff

0800bb2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b082      	sub	sp, #8
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bb34:	46c0      	nop			; (mov r8, r8)
 800bb36:	46bd      	mov	sp, r7
 800bb38:	b002      	add	sp, #8
 800bb3a:	bd80      	pop	{r7, pc}

0800bb3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b082      	sub	sp, #8
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bb44:	46c0      	nop			; (mov r8, r8)
 800bb46:	46bd      	mov	sp, r7
 800bb48:	b002      	add	sp, #8
 800bb4a:	bd80      	pop	{r7, pc}

0800bb4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b082      	sub	sp, #8
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bb54:	46c0      	nop			; (mov r8, r8)
 800bb56:	46bd      	mov	sp, r7
 800bb58:	b002      	add	sp, #8
 800bb5a:	bd80      	pop	{r7, pc}

0800bb5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b084      	sub	sp, #16
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
 800bb64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bb6c:	687a      	ldr	r2, [r7, #4]
 800bb6e:	2380      	movs	r3, #128	; 0x80
 800bb70:	05db      	lsls	r3, r3, #23
 800bb72:	429a      	cmp	r2, r3
 800bb74:	d00b      	beq.n	800bb8e <TIM_Base_SetConfig+0x32>
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	4a23      	ldr	r2, [pc, #140]	; (800bc08 <TIM_Base_SetConfig+0xac>)
 800bb7a:	4293      	cmp	r3, r2
 800bb7c:	d007      	beq.n	800bb8e <TIM_Base_SetConfig+0x32>
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	4a22      	ldr	r2, [pc, #136]	; (800bc0c <TIM_Base_SetConfig+0xb0>)
 800bb82:	4293      	cmp	r3, r2
 800bb84:	d003      	beq.n	800bb8e <TIM_Base_SetConfig+0x32>
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	4a21      	ldr	r2, [pc, #132]	; (800bc10 <TIM_Base_SetConfig+0xb4>)
 800bb8a:	4293      	cmp	r3, r2
 800bb8c:	d108      	bne.n	800bba0 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	2270      	movs	r2, #112	; 0x70
 800bb92:	4393      	bics	r3, r2
 800bb94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	685b      	ldr	r3, [r3, #4]
 800bb9a:	68fa      	ldr	r2, [r7, #12]
 800bb9c:	4313      	orrs	r3, r2
 800bb9e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bba0:	687a      	ldr	r2, [r7, #4]
 800bba2:	2380      	movs	r3, #128	; 0x80
 800bba4:	05db      	lsls	r3, r3, #23
 800bba6:	429a      	cmp	r2, r3
 800bba8:	d00b      	beq.n	800bbc2 <TIM_Base_SetConfig+0x66>
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	4a16      	ldr	r2, [pc, #88]	; (800bc08 <TIM_Base_SetConfig+0xac>)
 800bbae:	4293      	cmp	r3, r2
 800bbb0:	d007      	beq.n	800bbc2 <TIM_Base_SetConfig+0x66>
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	4a15      	ldr	r2, [pc, #84]	; (800bc0c <TIM_Base_SetConfig+0xb0>)
 800bbb6:	4293      	cmp	r3, r2
 800bbb8:	d003      	beq.n	800bbc2 <TIM_Base_SetConfig+0x66>
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	4a14      	ldr	r2, [pc, #80]	; (800bc10 <TIM_Base_SetConfig+0xb4>)
 800bbbe:	4293      	cmp	r3, r2
 800bbc0:	d108      	bne.n	800bbd4 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	4a13      	ldr	r2, [pc, #76]	; (800bc14 <TIM_Base_SetConfig+0xb8>)
 800bbc6:	4013      	ands	r3, r2
 800bbc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	68db      	ldr	r3, [r3, #12]
 800bbce:	68fa      	ldr	r2, [r7, #12]
 800bbd0:	4313      	orrs	r3, r2
 800bbd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	2280      	movs	r2, #128	; 0x80
 800bbd8:	4393      	bics	r3, r2
 800bbda:	001a      	movs	r2, r3
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	691b      	ldr	r3, [r3, #16]
 800bbe0:	4313      	orrs	r3, r2
 800bbe2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	68fa      	ldr	r2, [r7, #12]
 800bbe8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	689a      	ldr	r2, [r3, #8]
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	681a      	ldr	r2, [r3, #0]
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	2201      	movs	r2, #1
 800bbfe:	615a      	str	r2, [r3, #20]
}
 800bc00:	46c0      	nop			; (mov r8, r8)
 800bc02:	46bd      	mov	sp, r7
 800bc04:	b004      	add	sp, #16
 800bc06:	bd80      	pop	{r7, pc}
 800bc08:	40000400 	.word	0x40000400
 800bc0c:	40010800 	.word	0x40010800
 800bc10:	40011400 	.word	0x40011400
 800bc14:	fffffcff 	.word	0xfffffcff

0800bc18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b086      	sub	sp, #24
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
 800bc20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6a1b      	ldr	r3, [r3, #32]
 800bc26:	2201      	movs	r2, #1
 800bc28:	4393      	bics	r3, r2
 800bc2a:	001a      	movs	r2, r3
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	6a1b      	ldr	r3, [r3, #32]
 800bc34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	685b      	ldr	r3, [r3, #4]
 800bc3a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	699b      	ldr	r3, [r3, #24]
 800bc40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	2270      	movs	r2, #112	; 0x70
 800bc46:	4393      	bics	r3, r2
 800bc48:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	2203      	movs	r2, #3
 800bc4e:	4393      	bics	r3, r2
 800bc50:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	68fa      	ldr	r2, [r7, #12]
 800bc58:	4313      	orrs	r3, r2
 800bc5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bc5c:	697b      	ldr	r3, [r7, #20]
 800bc5e:	2202      	movs	r2, #2
 800bc60:	4393      	bics	r3, r2
 800bc62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	689b      	ldr	r3, [r3, #8]
 800bc68:	697a      	ldr	r2, [r7, #20]
 800bc6a:	4313      	orrs	r3, r2
 800bc6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	693a      	ldr	r2, [r7, #16]
 800bc72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	68fa      	ldr	r2, [r7, #12]
 800bc78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	685a      	ldr	r2, [r3, #4]
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	697a      	ldr	r2, [r7, #20]
 800bc86:	621a      	str	r2, [r3, #32]
}
 800bc88:	46c0      	nop			; (mov r8, r8)
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	b006      	add	sp, #24
 800bc8e:	bd80      	pop	{r7, pc}

0800bc90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b086      	sub	sp, #24
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
 800bc98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6a1b      	ldr	r3, [r3, #32]
 800bc9e:	2210      	movs	r2, #16
 800bca0:	4393      	bics	r3, r2
 800bca2:	001a      	movs	r2, r3
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	6a1b      	ldr	r3, [r3, #32]
 800bcac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	685b      	ldr	r3, [r3, #4]
 800bcb2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	699b      	ldr	r3, [r3, #24]
 800bcb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	4a13      	ldr	r2, [pc, #76]	; (800bd0c <TIM_OC2_SetConfig+0x7c>)
 800bcbe:	4013      	ands	r3, r2
 800bcc0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	4a12      	ldr	r2, [pc, #72]	; (800bd10 <TIM_OC2_SetConfig+0x80>)
 800bcc6:	4013      	ands	r3, r2
 800bcc8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	021b      	lsls	r3, r3, #8
 800bcd0:	68fa      	ldr	r2, [r7, #12]
 800bcd2:	4313      	orrs	r3, r2
 800bcd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bcd6:	697b      	ldr	r3, [r7, #20]
 800bcd8:	2220      	movs	r2, #32
 800bcda:	4393      	bics	r3, r2
 800bcdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	689b      	ldr	r3, [r3, #8]
 800bce2:	011b      	lsls	r3, r3, #4
 800bce4:	697a      	ldr	r2, [r7, #20]
 800bce6:	4313      	orrs	r3, r2
 800bce8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	693a      	ldr	r2, [r7, #16]
 800bcee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	68fa      	ldr	r2, [r7, #12]
 800bcf4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	685a      	ldr	r2, [r3, #4]
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	697a      	ldr	r2, [r7, #20]
 800bd02:	621a      	str	r2, [r3, #32]
}
 800bd04:	46c0      	nop			; (mov r8, r8)
 800bd06:	46bd      	mov	sp, r7
 800bd08:	b006      	add	sp, #24
 800bd0a:	bd80      	pop	{r7, pc}
 800bd0c:	ffff8fff 	.word	0xffff8fff
 800bd10:	fffffcff 	.word	0xfffffcff

0800bd14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b086      	sub	sp, #24
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
 800bd1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6a1b      	ldr	r3, [r3, #32]
 800bd22:	4a1a      	ldr	r2, [pc, #104]	; (800bd8c <TIM_OC3_SetConfig+0x78>)
 800bd24:	401a      	ands	r2, r3
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6a1b      	ldr	r3, [r3, #32]
 800bd2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	685b      	ldr	r3, [r3, #4]
 800bd34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	69db      	ldr	r3, [r3, #28]
 800bd3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	2270      	movs	r2, #112	; 0x70
 800bd40:	4393      	bics	r3, r2
 800bd42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	2203      	movs	r2, #3
 800bd48:	4393      	bics	r3, r2
 800bd4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	68fa      	ldr	r2, [r7, #12]
 800bd52:	4313      	orrs	r3, r2
 800bd54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bd56:	697b      	ldr	r3, [r7, #20]
 800bd58:	4a0d      	ldr	r2, [pc, #52]	; (800bd90 <TIM_OC3_SetConfig+0x7c>)
 800bd5a:	4013      	ands	r3, r2
 800bd5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	689b      	ldr	r3, [r3, #8]
 800bd62:	021b      	lsls	r3, r3, #8
 800bd64:	697a      	ldr	r2, [r7, #20]
 800bd66:	4313      	orrs	r3, r2
 800bd68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	693a      	ldr	r2, [r7, #16]
 800bd6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	68fa      	ldr	r2, [r7, #12]
 800bd74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	685a      	ldr	r2, [r3, #4]
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	697a      	ldr	r2, [r7, #20]
 800bd82:	621a      	str	r2, [r3, #32]
}
 800bd84:	46c0      	nop			; (mov r8, r8)
 800bd86:	46bd      	mov	sp, r7
 800bd88:	b006      	add	sp, #24
 800bd8a:	bd80      	pop	{r7, pc}
 800bd8c:	fffffeff 	.word	0xfffffeff
 800bd90:	fffffdff 	.word	0xfffffdff

0800bd94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b086      	sub	sp, #24
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
 800bd9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	6a1b      	ldr	r3, [r3, #32]
 800bda2:	4a1b      	ldr	r2, [pc, #108]	; (800be10 <TIM_OC4_SetConfig+0x7c>)
 800bda4:	401a      	ands	r2, r3
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6a1b      	ldr	r3, [r3, #32]
 800bdae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	685b      	ldr	r3, [r3, #4]
 800bdb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	69db      	ldr	r3, [r3, #28]
 800bdba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	4a15      	ldr	r2, [pc, #84]	; (800be14 <TIM_OC4_SetConfig+0x80>)
 800bdc0:	4013      	ands	r3, r2
 800bdc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	4a14      	ldr	r2, [pc, #80]	; (800be18 <TIM_OC4_SetConfig+0x84>)
 800bdc8:	4013      	ands	r3, r2
 800bdca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	021b      	lsls	r3, r3, #8
 800bdd2:	68fa      	ldr	r2, [r7, #12]
 800bdd4:	4313      	orrs	r3, r2
 800bdd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bdd8:	697b      	ldr	r3, [r7, #20]
 800bdda:	4a10      	ldr	r2, [pc, #64]	; (800be1c <TIM_OC4_SetConfig+0x88>)
 800bddc:	4013      	ands	r3, r2
 800bdde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	689b      	ldr	r3, [r3, #8]
 800bde4:	031b      	lsls	r3, r3, #12
 800bde6:	697a      	ldr	r2, [r7, #20]
 800bde8:	4313      	orrs	r3, r2
 800bdea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	693a      	ldr	r2, [r7, #16]
 800bdf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	68fa      	ldr	r2, [r7, #12]
 800bdf6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	685a      	ldr	r2, [r3, #4]
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	697a      	ldr	r2, [r7, #20]
 800be04:	621a      	str	r2, [r3, #32]
}
 800be06:	46c0      	nop			; (mov r8, r8)
 800be08:	46bd      	mov	sp, r7
 800be0a:	b006      	add	sp, #24
 800be0c:	bd80      	pop	{r7, pc}
 800be0e:	46c0      	nop			; (mov r8, r8)
 800be10:	ffffefff 	.word	0xffffefff
 800be14:	ffff8fff 	.word	0xffff8fff
 800be18:	fffffcff 	.word	0xfffffcff
 800be1c:	ffffdfff 	.word	0xffffdfff

0800be20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b086      	sub	sp, #24
 800be24:	af00      	add	r7, sp, #0
 800be26:	60f8      	str	r0, [r7, #12]
 800be28:	60b9      	str	r1, [r7, #8]
 800be2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	6a1b      	ldr	r3, [r3, #32]
 800be30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	6a1b      	ldr	r3, [r3, #32]
 800be36:	2201      	movs	r2, #1
 800be38:	4393      	bics	r3, r2
 800be3a:	001a      	movs	r2, r3
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	699b      	ldr	r3, [r3, #24]
 800be44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800be46:	693b      	ldr	r3, [r7, #16]
 800be48:	22f0      	movs	r2, #240	; 0xf0
 800be4a:	4393      	bics	r3, r2
 800be4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	011b      	lsls	r3, r3, #4
 800be52:	693a      	ldr	r2, [r7, #16]
 800be54:	4313      	orrs	r3, r2
 800be56:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	220a      	movs	r2, #10
 800be5c:	4393      	bics	r3, r2
 800be5e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800be60:	697a      	ldr	r2, [r7, #20]
 800be62:	68bb      	ldr	r3, [r7, #8]
 800be64:	4313      	orrs	r3, r2
 800be66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	693a      	ldr	r2, [r7, #16]
 800be6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	697a      	ldr	r2, [r7, #20]
 800be72:	621a      	str	r2, [r3, #32]
}
 800be74:	46c0      	nop			; (mov r8, r8)
 800be76:	46bd      	mov	sp, r7
 800be78:	b006      	add	sp, #24
 800be7a:	bd80      	pop	{r7, pc}

0800be7c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b086      	sub	sp, #24
 800be80:	af00      	add	r7, sp, #0
 800be82:	60f8      	str	r0, [r7, #12]
 800be84:	60b9      	str	r1, [r7, #8]
 800be86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	6a1b      	ldr	r3, [r3, #32]
 800be8c:	2210      	movs	r2, #16
 800be8e:	4393      	bics	r3, r2
 800be90:	001a      	movs	r2, r3
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	699b      	ldr	r3, [r3, #24]
 800be9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	6a1b      	ldr	r3, [r3, #32]
 800bea0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bea2:	697b      	ldr	r3, [r7, #20]
 800bea4:	4a0d      	ldr	r2, [pc, #52]	; (800bedc <TIM_TI2_ConfigInputStage+0x60>)
 800bea6:	4013      	ands	r3, r2
 800bea8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	031b      	lsls	r3, r3, #12
 800beae:	697a      	ldr	r2, [r7, #20]
 800beb0:	4313      	orrs	r3, r2
 800beb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800beb4:	693b      	ldr	r3, [r7, #16]
 800beb6:	22a0      	movs	r2, #160	; 0xa0
 800beb8:	4393      	bics	r3, r2
 800beba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	011b      	lsls	r3, r3, #4
 800bec0:	693a      	ldr	r2, [r7, #16]
 800bec2:	4313      	orrs	r3, r2
 800bec4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	697a      	ldr	r2, [r7, #20]
 800beca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	693a      	ldr	r2, [r7, #16]
 800bed0:	621a      	str	r2, [r3, #32]
}
 800bed2:	46c0      	nop			; (mov r8, r8)
 800bed4:	46bd      	mov	sp, r7
 800bed6:	b006      	add	sp, #24
 800bed8:	bd80      	pop	{r7, pc}
 800beda:	46c0      	nop			; (mov r8, r8)
 800bedc:	ffff0fff 	.word	0xffff0fff

0800bee0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b084      	sub	sp, #16
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
 800bee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	689b      	ldr	r3, [r3, #8]
 800beee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	2270      	movs	r2, #112	; 0x70
 800bef4:	4393      	bics	r3, r2
 800bef6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bef8:	683a      	ldr	r2, [r7, #0]
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	4313      	orrs	r3, r2
 800befe:	2207      	movs	r2, #7
 800bf00:	4313      	orrs	r3, r2
 800bf02:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	68fa      	ldr	r2, [r7, #12]
 800bf08:	609a      	str	r2, [r3, #8]
}
 800bf0a:	46c0      	nop			; (mov r8, r8)
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	b004      	add	sp, #16
 800bf10:	bd80      	pop	{r7, pc}
	...

0800bf14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b086      	sub	sp, #24
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	60f8      	str	r0, [r7, #12]
 800bf1c:	60b9      	str	r1, [r7, #8]
 800bf1e:	607a      	str	r2, [r7, #4]
 800bf20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	689b      	ldr	r3, [r3, #8]
 800bf26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bf28:	697b      	ldr	r3, [r7, #20]
 800bf2a:	4a09      	ldr	r2, [pc, #36]	; (800bf50 <TIM_ETR_SetConfig+0x3c>)
 800bf2c:	4013      	ands	r3, r2
 800bf2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	021a      	lsls	r2, r3, #8
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	431a      	orrs	r2, r3
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	4313      	orrs	r3, r2
 800bf3c:	697a      	ldr	r2, [r7, #20]
 800bf3e:	4313      	orrs	r3, r2
 800bf40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	697a      	ldr	r2, [r7, #20]
 800bf46:	609a      	str	r2, [r3, #8]
}
 800bf48:	46c0      	nop			; (mov r8, r8)
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	b006      	add	sp, #24
 800bf4e:	bd80      	pop	{r7, pc}
 800bf50:	ffff00ff 	.word	0xffff00ff

0800bf54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b086      	sub	sp, #24
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	60f8      	str	r0, [r7, #12]
 800bf5c:	60b9      	str	r1, [r7, #8]
 800bf5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	221f      	movs	r2, #31
 800bf64:	4013      	ands	r3, r2
 800bf66:	2201      	movs	r2, #1
 800bf68:	409a      	lsls	r2, r3
 800bf6a:	0013      	movs	r3, r2
 800bf6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	6a1b      	ldr	r3, [r3, #32]
 800bf72:	697a      	ldr	r2, [r7, #20]
 800bf74:	43d2      	mvns	r2, r2
 800bf76:	401a      	ands	r2, r3
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	6a1a      	ldr	r2, [r3, #32]
 800bf80:	68bb      	ldr	r3, [r7, #8]
 800bf82:	211f      	movs	r1, #31
 800bf84:	400b      	ands	r3, r1
 800bf86:	6879      	ldr	r1, [r7, #4]
 800bf88:	4099      	lsls	r1, r3
 800bf8a:	000b      	movs	r3, r1
 800bf8c:	431a      	orrs	r2, r3
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	621a      	str	r2, [r3, #32]
}
 800bf92:	46c0      	nop			; (mov r8, r8)
 800bf94:	46bd      	mov	sp, r7
 800bf96:	b006      	add	sp, #24
 800bf98:	bd80      	pop	{r7, pc}

0800bf9a <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bf9a:	b580      	push	{r7, lr}
 800bf9c:	b084      	sub	sp, #16
 800bf9e:	af00      	add	r7, sp, #0
 800bfa0:	6078      	str	r0, [r7, #4]
 800bfa2:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2238      	movs	r2, #56	; 0x38
 800bfa8:	5c9b      	ldrb	r3, [r3, r2]
 800bfaa:	2b01      	cmp	r3, #1
 800bfac:	d101      	bne.n	800bfb2 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bfae:	2302      	movs	r3, #2
 800bfb0:	e032      	b.n	800c018 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2238      	movs	r2, #56	; 0x38
 800bfb6:	2101      	movs	r1, #1
 800bfb8:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	2239      	movs	r2, #57	; 0x39
 800bfbe:	2102      	movs	r1, #2
 800bfc0:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	685b      	ldr	r3, [r3, #4]
 800bfc8:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	689b      	ldr	r3, [r3, #8]
 800bfd0:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	2270      	movs	r2, #112	; 0x70
 800bfd6:	4393      	bics	r3, r2
 800bfd8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	68fa      	ldr	r2, [r7, #12]
 800bfe0:	4313      	orrs	r3, r2
 800bfe2:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	2280      	movs	r2, #128	; 0x80
 800bfe8:	4393      	bics	r3, r2
 800bfea:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	685b      	ldr	r3, [r3, #4]
 800bff0:	68ba      	ldr	r2, [r7, #8]
 800bff2:	4313      	orrs	r3, r2
 800bff4:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	68fa      	ldr	r2, [r7, #12]
 800bffc:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	68ba      	ldr	r2, [r7, #8]
 800c004:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2239      	movs	r2, #57	; 0x39
 800c00a:	2101      	movs	r1, #1
 800c00c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2238      	movs	r2, #56	; 0x38
 800c012:	2100      	movs	r1, #0
 800c014:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c016:	2300      	movs	r3, #0
}
 800c018:	0018      	movs	r0, r3
 800c01a:	46bd      	mov	sp, r7
 800c01c:	b004      	add	sp, #16
 800c01e:	bd80      	pop	{r7, pc}

0800c020 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b082      	sub	sp, #8
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
 800c028:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	2238      	movs	r2, #56	; 0x38
 800c02e:	5c9b      	ldrb	r3, [r3, r2]
 800c030:	2b01      	cmp	r3, #1
 800c032:	d101      	bne.n	800c038 <HAL_TIMEx_RemapConfig+0x18>
 800c034:	2302      	movs	r3, #2
 800c036:	e00c      	b.n	800c052 <HAL_TIMEx_RemapConfig+0x32>
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2238      	movs	r2, #56	; 0x38
 800c03c:	2101      	movs	r1, #1
 800c03e:	5499      	strb	r1, [r3, r2]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	683a      	ldr	r2, [r7, #0]
 800c046:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2238      	movs	r2, #56	; 0x38
 800c04c:	2100      	movs	r1, #0
 800c04e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c050:	2300      	movs	r3, #0
}
 800c052:	0018      	movs	r0, r3
 800c054:	46bd      	mov	sp, r7
 800c056:	b002      	add	sp, #8
 800c058:	bd80      	pop	{r7, pc}
	...

0800c05c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b084      	sub	sp, #16
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c064:	4b09      	ldr	r3, [pc, #36]	; (800c08c <USB_DisableGlobalInt+0x30>)
 800c066:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2240      	movs	r2, #64	; 0x40
 800c06c:	5a9b      	ldrh	r3, [r3, r2]
 800c06e:	b29b      	uxth	r3, r3
 800c070:	68fa      	ldr	r2, [r7, #12]
 800c072:	b292      	uxth	r2, r2
 800c074:	43d2      	mvns	r2, r2
 800c076:	b292      	uxth	r2, r2
 800c078:	4013      	ands	r3, r2
 800c07a:	b299      	uxth	r1, r3
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2240      	movs	r2, #64	; 0x40
 800c080:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800c082:	2300      	movs	r3, #0
}
 800c084:	0018      	movs	r0, r3
 800c086:	46bd      	mov	sp, r7
 800c088:	b004      	add	sp, #16
 800c08a:	bd80      	pop	{r7, pc}
 800c08c:	0000bf80 	.word	0x0000bf80

0800c090 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800c090:	b084      	sub	sp, #16
 800c092:	b590      	push	{r4, r7, lr}
 800c094:	46c6      	mov	lr, r8
 800c096:	b500      	push	{lr}
 800c098:	b082      	sub	sp, #8
 800c09a:	af00      	add	r7, sp, #0
 800c09c:	6078      	str	r0, [r7, #4]
 800c09e:	2004      	movs	r0, #4
 800c0a0:	2410      	movs	r4, #16
 800c0a2:	46a4      	mov	ip, r4
 800c0a4:	2408      	movs	r4, #8
 800c0a6:	46a0      	mov	r8, r4
 800c0a8:	44b8      	add	r8, r7
 800c0aa:	44c4      	add	ip, r8
 800c0ac:	4460      	add	r0, ip
 800c0ae:	6001      	str	r1, [r0, #0]
 800c0b0:	6042      	str	r2, [r0, #4]
 800c0b2:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2240      	movs	r2, #64	; 0x40
 800c0b8:	2101      	movs	r1, #1
 800c0ba:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2240      	movs	r2, #64	; 0x40
 800c0c0:	2100      	movs	r1, #0
 800c0c2:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2244      	movs	r2, #68	; 0x44
 800c0c8:	2100      	movs	r1, #0
 800c0ca:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2250      	movs	r2, #80	; 0x50
 800c0d0:	2100      	movs	r1, #0
 800c0d2:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800c0d4:	2300      	movs	r3, #0
}
 800c0d6:	0018      	movs	r0, r3
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	b002      	add	sp, #8
 800c0dc:	bc04      	pop	{r2}
 800c0de:	4690      	mov	r8, r2
 800c0e0:	bc90      	pop	{r4, r7}
 800c0e2:	bc08      	pop	{r3}
 800c0e4:	b004      	add	sp, #16
 800c0e6:	4718      	bx	r3

0800c0e8 <calloc>:
 800c0e8:	b510      	push	{r4, lr}
 800c0ea:	4b03      	ldr	r3, [pc, #12]	; (800c0f8 <calloc+0x10>)
 800c0ec:	000a      	movs	r2, r1
 800c0ee:	0001      	movs	r1, r0
 800c0f0:	6818      	ldr	r0, [r3, #0]
 800c0f2:	f000 f83e 	bl	800c172 <_calloc_r>
 800c0f6:	bd10      	pop	{r4, pc}
 800c0f8:	20000084 	.word	0x20000084

0800c0fc <__errno>:
 800c0fc:	4b01      	ldr	r3, [pc, #4]	; (800c104 <__errno+0x8>)
 800c0fe:	6818      	ldr	r0, [r3, #0]
 800c100:	4770      	bx	lr
 800c102:	46c0      	nop			; (mov r8, r8)
 800c104:	20000084 	.word	0x20000084

0800c108 <__libc_init_array>:
 800c108:	b570      	push	{r4, r5, r6, lr}
 800c10a:	2600      	movs	r6, #0
 800c10c:	4d0c      	ldr	r5, [pc, #48]	; (800c140 <__libc_init_array+0x38>)
 800c10e:	4c0d      	ldr	r4, [pc, #52]	; (800c144 <__libc_init_array+0x3c>)
 800c110:	1b64      	subs	r4, r4, r5
 800c112:	10a4      	asrs	r4, r4, #2
 800c114:	42a6      	cmp	r6, r4
 800c116:	d109      	bne.n	800c12c <__libc_init_array+0x24>
 800c118:	2600      	movs	r6, #0
 800c11a:	f000 fc37 	bl	800c98c <_init>
 800c11e:	4d0a      	ldr	r5, [pc, #40]	; (800c148 <__libc_init_array+0x40>)
 800c120:	4c0a      	ldr	r4, [pc, #40]	; (800c14c <__libc_init_array+0x44>)
 800c122:	1b64      	subs	r4, r4, r5
 800c124:	10a4      	asrs	r4, r4, #2
 800c126:	42a6      	cmp	r6, r4
 800c128:	d105      	bne.n	800c136 <__libc_init_array+0x2e>
 800c12a:	bd70      	pop	{r4, r5, r6, pc}
 800c12c:	00b3      	lsls	r3, r6, #2
 800c12e:	58eb      	ldr	r3, [r5, r3]
 800c130:	4798      	blx	r3
 800c132:	3601      	adds	r6, #1
 800c134:	e7ee      	b.n	800c114 <__libc_init_array+0xc>
 800c136:	00b3      	lsls	r3, r6, #2
 800c138:	58eb      	ldr	r3, [r5, r3]
 800c13a:	4798      	blx	r3
 800c13c:	3601      	adds	r6, #1
 800c13e:	e7f2      	b.n	800c126 <__libc_init_array+0x1e>
 800c140:	0800d60c 	.word	0x0800d60c
 800c144:	0800d60c 	.word	0x0800d60c
 800c148:	0800d60c 	.word	0x0800d60c
 800c14c:	0800d610 	.word	0x0800d610

0800c150 <memcpy>:
 800c150:	2300      	movs	r3, #0
 800c152:	b510      	push	{r4, lr}
 800c154:	429a      	cmp	r2, r3
 800c156:	d100      	bne.n	800c15a <memcpy+0xa>
 800c158:	bd10      	pop	{r4, pc}
 800c15a:	5ccc      	ldrb	r4, [r1, r3]
 800c15c:	54c4      	strb	r4, [r0, r3]
 800c15e:	3301      	adds	r3, #1
 800c160:	e7f8      	b.n	800c154 <memcpy+0x4>

0800c162 <memset>:
 800c162:	0003      	movs	r3, r0
 800c164:	1812      	adds	r2, r2, r0
 800c166:	4293      	cmp	r3, r2
 800c168:	d100      	bne.n	800c16c <memset+0xa>
 800c16a:	4770      	bx	lr
 800c16c:	7019      	strb	r1, [r3, #0]
 800c16e:	3301      	adds	r3, #1
 800c170:	e7f9      	b.n	800c166 <memset+0x4>

0800c172 <_calloc_r>:
 800c172:	434a      	muls	r2, r1
 800c174:	b570      	push	{r4, r5, r6, lr}
 800c176:	0011      	movs	r1, r2
 800c178:	0014      	movs	r4, r2
 800c17a:	f000 f809 	bl	800c190 <_malloc_r>
 800c17e:	1e05      	subs	r5, r0, #0
 800c180:	d003      	beq.n	800c18a <_calloc_r+0x18>
 800c182:	0022      	movs	r2, r4
 800c184:	2100      	movs	r1, #0
 800c186:	f7ff ffec 	bl	800c162 <memset>
 800c18a:	0028      	movs	r0, r5
 800c18c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c190 <_malloc_r>:
 800c190:	2303      	movs	r3, #3
 800c192:	b570      	push	{r4, r5, r6, lr}
 800c194:	1ccd      	adds	r5, r1, #3
 800c196:	439d      	bics	r5, r3
 800c198:	3508      	adds	r5, #8
 800c19a:	0006      	movs	r6, r0
 800c19c:	2d0c      	cmp	r5, #12
 800c19e:	d21e      	bcs.n	800c1de <_malloc_r+0x4e>
 800c1a0:	250c      	movs	r5, #12
 800c1a2:	42a9      	cmp	r1, r5
 800c1a4:	d81d      	bhi.n	800c1e2 <_malloc_r+0x52>
 800c1a6:	0030      	movs	r0, r6
 800c1a8:	f000 f882 	bl	800c2b0 <__malloc_lock>
 800c1ac:	4a25      	ldr	r2, [pc, #148]	; (800c244 <_malloc_r+0xb4>)
 800c1ae:	6814      	ldr	r4, [r2, #0]
 800c1b0:	0021      	movs	r1, r4
 800c1b2:	2900      	cmp	r1, #0
 800c1b4:	d119      	bne.n	800c1ea <_malloc_r+0x5a>
 800c1b6:	4c24      	ldr	r4, [pc, #144]	; (800c248 <_malloc_r+0xb8>)
 800c1b8:	6823      	ldr	r3, [r4, #0]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d103      	bne.n	800c1c6 <_malloc_r+0x36>
 800c1be:	0030      	movs	r0, r6
 800c1c0:	f000 f844 	bl	800c24c <_sbrk_r>
 800c1c4:	6020      	str	r0, [r4, #0]
 800c1c6:	0029      	movs	r1, r5
 800c1c8:	0030      	movs	r0, r6
 800c1ca:	f000 f83f 	bl	800c24c <_sbrk_r>
 800c1ce:	1c43      	adds	r3, r0, #1
 800c1d0:	d12b      	bne.n	800c22a <_malloc_r+0x9a>
 800c1d2:	230c      	movs	r3, #12
 800c1d4:	0030      	movs	r0, r6
 800c1d6:	6033      	str	r3, [r6, #0]
 800c1d8:	f000 f86b 	bl	800c2b2 <__malloc_unlock>
 800c1dc:	e003      	b.n	800c1e6 <_malloc_r+0x56>
 800c1de:	2d00      	cmp	r5, #0
 800c1e0:	dadf      	bge.n	800c1a2 <_malloc_r+0x12>
 800c1e2:	230c      	movs	r3, #12
 800c1e4:	6033      	str	r3, [r6, #0]
 800c1e6:	2000      	movs	r0, #0
 800c1e8:	bd70      	pop	{r4, r5, r6, pc}
 800c1ea:	680b      	ldr	r3, [r1, #0]
 800c1ec:	1b5b      	subs	r3, r3, r5
 800c1ee:	d419      	bmi.n	800c224 <_malloc_r+0x94>
 800c1f0:	2b0b      	cmp	r3, #11
 800c1f2:	d903      	bls.n	800c1fc <_malloc_r+0x6c>
 800c1f4:	600b      	str	r3, [r1, #0]
 800c1f6:	18cc      	adds	r4, r1, r3
 800c1f8:	6025      	str	r5, [r4, #0]
 800c1fa:	e003      	b.n	800c204 <_malloc_r+0x74>
 800c1fc:	684b      	ldr	r3, [r1, #4]
 800c1fe:	428c      	cmp	r4, r1
 800c200:	d10d      	bne.n	800c21e <_malloc_r+0x8e>
 800c202:	6013      	str	r3, [r2, #0]
 800c204:	0030      	movs	r0, r6
 800c206:	f000 f854 	bl	800c2b2 <__malloc_unlock>
 800c20a:	0020      	movs	r0, r4
 800c20c:	2207      	movs	r2, #7
 800c20e:	300b      	adds	r0, #11
 800c210:	1d23      	adds	r3, r4, #4
 800c212:	4390      	bics	r0, r2
 800c214:	1ac3      	subs	r3, r0, r3
 800c216:	d0e7      	beq.n	800c1e8 <_malloc_r+0x58>
 800c218:	425a      	negs	r2, r3
 800c21a:	50e2      	str	r2, [r4, r3]
 800c21c:	e7e4      	b.n	800c1e8 <_malloc_r+0x58>
 800c21e:	6063      	str	r3, [r4, #4]
 800c220:	000c      	movs	r4, r1
 800c222:	e7ef      	b.n	800c204 <_malloc_r+0x74>
 800c224:	000c      	movs	r4, r1
 800c226:	6849      	ldr	r1, [r1, #4]
 800c228:	e7c3      	b.n	800c1b2 <_malloc_r+0x22>
 800c22a:	2303      	movs	r3, #3
 800c22c:	1cc4      	adds	r4, r0, #3
 800c22e:	439c      	bics	r4, r3
 800c230:	42a0      	cmp	r0, r4
 800c232:	d0e1      	beq.n	800c1f8 <_malloc_r+0x68>
 800c234:	1a21      	subs	r1, r4, r0
 800c236:	0030      	movs	r0, r6
 800c238:	f000 f808 	bl	800c24c <_sbrk_r>
 800c23c:	1c43      	adds	r3, r0, #1
 800c23e:	d1db      	bne.n	800c1f8 <_malloc_r+0x68>
 800c240:	e7c7      	b.n	800c1d2 <_malloc_r+0x42>
 800c242:	46c0      	nop			; (mov r8, r8)
 800c244:	20000158 	.word	0x20000158
 800c248:	2000015c 	.word	0x2000015c

0800c24c <_sbrk_r>:
 800c24c:	2300      	movs	r3, #0
 800c24e:	b570      	push	{r4, r5, r6, lr}
 800c250:	4c06      	ldr	r4, [pc, #24]	; (800c26c <_sbrk_r+0x20>)
 800c252:	0005      	movs	r5, r0
 800c254:	0008      	movs	r0, r1
 800c256:	6023      	str	r3, [r4, #0]
 800c258:	f7f8 fbda 	bl	8004a10 <_sbrk>
 800c25c:	1c43      	adds	r3, r0, #1
 800c25e:	d103      	bne.n	800c268 <_sbrk_r+0x1c>
 800c260:	6823      	ldr	r3, [r4, #0]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d000      	beq.n	800c268 <_sbrk_r+0x1c>
 800c266:	602b      	str	r3, [r5, #0]
 800c268:	bd70      	pop	{r4, r5, r6, pc}
 800c26a:	46c0      	nop			; (mov r8, r8)
 800c26c:	200006c4 	.word	0x200006c4

0800c270 <siprintf>:
 800c270:	b40e      	push	{r1, r2, r3}
 800c272:	b500      	push	{lr}
 800c274:	490b      	ldr	r1, [pc, #44]	; (800c2a4 <siprintf+0x34>)
 800c276:	b09c      	sub	sp, #112	; 0x70
 800c278:	ab1d      	add	r3, sp, #116	; 0x74
 800c27a:	9002      	str	r0, [sp, #8]
 800c27c:	9006      	str	r0, [sp, #24]
 800c27e:	9107      	str	r1, [sp, #28]
 800c280:	9104      	str	r1, [sp, #16]
 800c282:	4809      	ldr	r0, [pc, #36]	; (800c2a8 <siprintf+0x38>)
 800c284:	4909      	ldr	r1, [pc, #36]	; (800c2ac <siprintf+0x3c>)
 800c286:	cb04      	ldmia	r3!, {r2}
 800c288:	9105      	str	r1, [sp, #20]
 800c28a:	6800      	ldr	r0, [r0, #0]
 800c28c:	a902      	add	r1, sp, #8
 800c28e:	9301      	str	r3, [sp, #4]
 800c290:	f000 f872 	bl	800c378 <_svfiprintf_r>
 800c294:	2300      	movs	r3, #0
 800c296:	9a02      	ldr	r2, [sp, #8]
 800c298:	7013      	strb	r3, [r2, #0]
 800c29a:	b01c      	add	sp, #112	; 0x70
 800c29c:	bc08      	pop	{r3}
 800c29e:	b003      	add	sp, #12
 800c2a0:	4718      	bx	r3
 800c2a2:	46c0      	nop			; (mov r8, r8)
 800c2a4:	7fffffff 	.word	0x7fffffff
 800c2a8:	20000084 	.word	0x20000084
 800c2ac:	ffff0208 	.word	0xffff0208

0800c2b0 <__malloc_lock>:
 800c2b0:	4770      	bx	lr

0800c2b2 <__malloc_unlock>:
 800c2b2:	4770      	bx	lr

0800c2b4 <__ssputs_r>:
 800c2b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2b6:	688e      	ldr	r6, [r1, #8]
 800c2b8:	b085      	sub	sp, #20
 800c2ba:	0007      	movs	r7, r0
 800c2bc:	000c      	movs	r4, r1
 800c2be:	9203      	str	r2, [sp, #12]
 800c2c0:	9301      	str	r3, [sp, #4]
 800c2c2:	429e      	cmp	r6, r3
 800c2c4:	d83c      	bhi.n	800c340 <__ssputs_r+0x8c>
 800c2c6:	2390      	movs	r3, #144	; 0x90
 800c2c8:	898a      	ldrh	r2, [r1, #12]
 800c2ca:	00db      	lsls	r3, r3, #3
 800c2cc:	421a      	tst	r2, r3
 800c2ce:	d034      	beq.n	800c33a <__ssputs_r+0x86>
 800c2d0:	2503      	movs	r5, #3
 800c2d2:	6909      	ldr	r1, [r1, #16]
 800c2d4:	6823      	ldr	r3, [r4, #0]
 800c2d6:	1a5b      	subs	r3, r3, r1
 800c2d8:	9302      	str	r3, [sp, #8]
 800c2da:	6963      	ldr	r3, [r4, #20]
 800c2dc:	9802      	ldr	r0, [sp, #8]
 800c2de:	435d      	muls	r5, r3
 800c2e0:	0feb      	lsrs	r3, r5, #31
 800c2e2:	195d      	adds	r5, r3, r5
 800c2e4:	9b01      	ldr	r3, [sp, #4]
 800c2e6:	106d      	asrs	r5, r5, #1
 800c2e8:	3301      	adds	r3, #1
 800c2ea:	181b      	adds	r3, r3, r0
 800c2ec:	42ab      	cmp	r3, r5
 800c2ee:	d900      	bls.n	800c2f2 <__ssputs_r+0x3e>
 800c2f0:	001d      	movs	r5, r3
 800c2f2:	0553      	lsls	r3, r2, #21
 800c2f4:	d532      	bpl.n	800c35c <__ssputs_r+0xa8>
 800c2f6:	0029      	movs	r1, r5
 800c2f8:	0038      	movs	r0, r7
 800c2fa:	f7ff ff49 	bl	800c190 <_malloc_r>
 800c2fe:	1e06      	subs	r6, r0, #0
 800c300:	d109      	bne.n	800c316 <__ssputs_r+0x62>
 800c302:	230c      	movs	r3, #12
 800c304:	603b      	str	r3, [r7, #0]
 800c306:	2340      	movs	r3, #64	; 0x40
 800c308:	2001      	movs	r0, #1
 800c30a:	89a2      	ldrh	r2, [r4, #12]
 800c30c:	4240      	negs	r0, r0
 800c30e:	4313      	orrs	r3, r2
 800c310:	81a3      	strh	r3, [r4, #12]
 800c312:	b005      	add	sp, #20
 800c314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c316:	9a02      	ldr	r2, [sp, #8]
 800c318:	6921      	ldr	r1, [r4, #16]
 800c31a:	f7ff ff19 	bl	800c150 <memcpy>
 800c31e:	89a3      	ldrh	r3, [r4, #12]
 800c320:	4a14      	ldr	r2, [pc, #80]	; (800c374 <__ssputs_r+0xc0>)
 800c322:	401a      	ands	r2, r3
 800c324:	2380      	movs	r3, #128	; 0x80
 800c326:	4313      	orrs	r3, r2
 800c328:	81a3      	strh	r3, [r4, #12]
 800c32a:	9b02      	ldr	r3, [sp, #8]
 800c32c:	6126      	str	r6, [r4, #16]
 800c32e:	18f6      	adds	r6, r6, r3
 800c330:	6026      	str	r6, [r4, #0]
 800c332:	6165      	str	r5, [r4, #20]
 800c334:	9e01      	ldr	r6, [sp, #4]
 800c336:	1aed      	subs	r5, r5, r3
 800c338:	60a5      	str	r5, [r4, #8]
 800c33a:	9b01      	ldr	r3, [sp, #4]
 800c33c:	429e      	cmp	r6, r3
 800c33e:	d900      	bls.n	800c342 <__ssputs_r+0x8e>
 800c340:	9e01      	ldr	r6, [sp, #4]
 800c342:	0032      	movs	r2, r6
 800c344:	9903      	ldr	r1, [sp, #12]
 800c346:	6820      	ldr	r0, [r4, #0]
 800c348:	f000 fa95 	bl	800c876 <memmove>
 800c34c:	68a3      	ldr	r3, [r4, #8]
 800c34e:	2000      	movs	r0, #0
 800c350:	1b9b      	subs	r3, r3, r6
 800c352:	60a3      	str	r3, [r4, #8]
 800c354:	6823      	ldr	r3, [r4, #0]
 800c356:	199e      	adds	r6, r3, r6
 800c358:	6026      	str	r6, [r4, #0]
 800c35a:	e7da      	b.n	800c312 <__ssputs_r+0x5e>
 800c35c:	002a      	movs	r2, r5
 800c35e:	0038      	movs	r0, r7
 800c360:	f000 fae6 	bl	800c930 <_realloc_r>
 800c364:	1e06      	subs	r6, r0, #0
 800c366:	d1e0      	bne.n	800c32a <__ssputs_r+0x76>
 800c368:	6921      	ldr	r1, [r4, #16]
 800c36a:	0038      	movs	r0, r7
 800c36c:	f000 fa96 	bl	800c89c <_free_r>
 800c370:	e7c7      	b.n	800c302 <__ssputs_r+0x4e>
 800c372:	46c0      	nop			; (mov r8, r8)
 800c374:	fffffb7f 	.word	0xfffffb7f

0800c378 <_svfiprintf_r>:
 800c378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c37a:	b0a1      	sub	sp, #132	; 0x84
 800c37c:	9003      	str	r0, [sp, #12]
 800c37e:	001d      	movs	r5, r3
 800c380:	898b      	ldrh	r3, [r1, #12]
 800c382:	000f      	movs	r7, r1
 800c384:	0016      	movs	r6, r2
 800c386:	061b      	lsls	r3, r3, #24
 800c388:	d511      	bpl.n	800c3ae <_svfiprintf_r+0x36>
 800c38a:	690b      	ldr	r3, [r1, #16]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d10e      	bne.n	800c3ae <_svfiprintf_r+0x36>
 800c390:	2140      	movs	r1, #64	; 0x40
 800c392:	f7ff fefd 	bl	800c190 <_malloc_r>
 800c396:	6038      	str	r0, [r7, #0]
 800c398:	6138      	str	r0, [r7, #16]
 800c39a:	2800      	cmp	r0, #0
 800c39c:	d105      	bne.n	800c3aa <_svfiprintf_r+0x32>
 800c39e:	230c      	movs	r3, #12
 800c3a0:	9a03      	ldr	r2, [sp, #12]
 800c3a2:	3801      	subs	r0, #1
 800c3a4:	6013      	str	r3, [r2, #0]
 800c3a6:	b021      	add	sp, #132	; 0x84
 800c3a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3aa:	2340      	movs	r3, #64	; 0x40
 800c3ac:	617b      	str	r3, [r7, #20]
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	ac08      	add	r4, sp, #32
 800c3b2:	6163      	str	r3, [r4, #20]
 800c3b4:	3320      	adds	r3, #32
 800c3b6:	7663      	strb	r3, [r4, #25]
 800c3b8:	3310      	adds	r3, #16
 800c3ba:	76a3      	strb	r3, [r4, #26]
 800c3bc:	9507      	str	r5, [sp, #28]
 800c3be:	0035      	movs	r5, r6
 800c3c0:	782b      	ldrb	r3, [r5, #0]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d001      	beq.n	800c3ca <_svfiprintf_r+0x52>
 800c3c6:	2b25      	cmp	r3, #37	; 0x25
 800c3c8:	d146      	bne.n	800c458 <_svfiprintf_r+0xe0>
 800c3ca:	1bab      	subs	r3, r5, r6
 800c3cc:	9305      	str	r3, [sp, #20]
 800c3ce:	d00c      	beq.n	800c3ea <_svfiprintf_r+0x72>
 800c3d0:	0032      	movs	r2, r6
 800c3d2:	0039      	movs	r1, r7
 800c3d4:	9803      	ldr	r0, [sp, #12]
 800c3d6:	f7ff ff6d 	bl	800c2b4 <__ssputs_r>
 800c3da:	1c43      	adds	r3, r0, #1
 800c3dc:	d100      	bne.n	800c3e0 <_svfiprintf_r+0x68>
 800c3de:	e0ae      	b.n	800c53e <_svfiprintf_r+0x1c6>
 800c3e0:	6962      	ldr	r2, [r4, #20]
 800c3e2:	9b05      	ldr	r3, [sp, #20]
 800c3e4:	4694      	mov	ip, r2
 800c3e6:	4463      	add	r3, ip
 800c3e8:	6163      	str	r3, [r4, #20]
 800c3ea:	782b      	ldrb	r3, [r5, #0]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d100      	bne.n	800c3f2 <_svfiprintf_r+0x7a>
 800c3f0:	e0a5      	b.n	800c53e <_svfiprintf_r+0x1c6>
 800c3f2:	2201      	movs	r2, #1
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	4252      	negs	r2, r2
 800c3f8:	6062      	str	r2, [r4, #4]
 800c3fa:	a904      	add	r1, sp, #16
 800c3fc:	3254      	adds	r2, #84	; 0x54
 800c3fe:	1852      	adds	r2, r2, r1
 800c400:	1c6e      	adds	r6, r5, #1
 800c402:	6023      	str	r3, [r4, #0]
 800c404:	60e3      	str	r3, [r4, #12]
 800c406:	60a3      	str	r3, [r4, #8]
 800c408:	7013      	strb	r3, [r2, #0]
 800c40a:	65a3      	str	r3, [r4, #88]	; 0x58
 800c40c:	7831      	ldrb	r1, [r6, #0]
 800c40e:	2205      	movs	r2, #5
 800c410:	4853      	ldr	r0, [pc, #332]	; (800c560 <_svfiprintf_r+0x1e8>)
 800c412:	f000 fa25 	bl	800c860 <memchr>
 800c416:	1c75      	adds	r5, r6, #1
 800c418:	2800      	cmp	r0, #0
 800c41a:	d11f      	bne.n	800c45c <_svfiprintf_r+0xe4>
 800c41c:	6822      	ldr	r2, [r4, #0]
 800c41e:	06d3      	lsls	r3, r2, #27
 800c420:	d504      	bpl.n	800c42c <_svfiprintf_r+0xb4>
 800c422:	2353      	movs	r3, #83	; 0x53
 800c424:	a904      	add	r1, sp, #16
 800c426:	185b      	adds	r3, r3, r1
 800c428:	2120      	movs	r1, #32
 800c42a:	7019      	strb	r1, [r3, #0]
 800c42c:	0713      	lsls	r3, r2, #28
 800c42e:	d504      	bpl.n	800c43a <_svfiprintf_r+0xc2>
 800c430:	2353      	movs	r3, #83	; 0x53
 800c432:	a904      	add	r1, sp, #16
 800c434:	185b      	adds	r3, r3, r1
 800c436:	212b      	movs	r1, #43	; 0x2b
 800c438:	7019      	strb	r1, [r3, #0]
 800c43a:	7833      	ldrb	r3, [r6, #0]
 800c43c:	2b2a      	cmp	r3, #42	; 0x2a
 800c43e:	d016      	beq.n	800c46e <_svfiprintf_r+0xf6>
 800c440:	0035      	movs	r5, r6
 800c442:	2100      	movs	r1, #0
 800c444:	200a      	movs	r0, #10
 800c446:	68e3      	ldr	r3, [r4, #12]
 800c448:	782a      	ldrb	r2, [r5, #0]
 800c44a:	1c6e      	adds	r6, r5, #1
 800c44c:	3a30      	subs	r2, #48	; 0x30
 800c44e:	2a09      	cmp	r2, #9
 800c450:	d94e      	bls.n	800c4f0 <_svfiprintf_r+0x178>
 800c452:	2900      	cmp	r1, #0
 800c454:	d018      	beq.n	800c488 <_svfiprintf_r+0x110>
 800c456:	e010      	b.n	800c47a <_svfiprintf_r+0x102>
 800c458:	3501      	adds	r5, #1
 800c45a:	e7b1      	b.n	800c3c0 <_svfiprintf_r+0x48>
 800c45c:	4b40      	ldr	r3, [pc, #256]	; (800c560 <_svfiprintf_r+0x1e8>)
 800c45e:	6822      	ldr	r2, [r4, #0]
 800c460:	1ac0      	subs	r0, r0, r3
 800c462:	2301      	movs	r3, #1
 800c464:	4083      	lsls	r3, r0
 800c466:	4313      	orrs	r3, r2
 800c468:	6023      	str	r3, [r4, #0]
 800c46a:	002e      	movs	r6, r5
 800c46c:	e7ce      	b.n	800c40c <_svfiprintf_r+0x94>
 800c46e:	9b07      	ldr	r3, [sp, #28]
 800c470:	1d19      	adds	r1, r3, #4
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	9107      	str	r1, [sp, #28]
 800c476:	2b00      	cmp	r3, #0
 800c478:	db01      	blt.n	800c47e <_svfiprintf_r+0x106>
 800c47a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c47c:	e004      	b.n	800c488 <_svfiprintf_r+0x110>
 800c47e:	425b      	negs	r3, r3
 800c480:	60e3      	str	r3, [r4, #12]
 800c482:	2302      	movs	r3, #2
 800c484:	4313      	orrs	r3, r2
 800c486:	6023      	str	r3, [r4, #0]
 800c488:	782b      	ldrb	r3, [r5, #0]
 800c48a:	2b2e      	cmp	r3, #46	; 0x2e
 800c48c:	d10a      	bne.n	800c4a4 <_svfiprintf_r+0x12c>
 800c48e:	786b      	ldrb	r3, [r5, #1]
 800c490:	2b2a      	cmp	r3, #42	; 0x2a
 800c492:	d135      	bne.n	800c500 <_svfiprintf_r+0x188>
 800c494:	9b07      	ldr	r3, [sp, #28]
 800c496:	3502      	adds	r5, #2
 800c498:	1d1a      	adds	r2, r3, #4
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	9207      	str	r2, [sp, #28]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	db2b      	blt.n	800c4fa <_svfiprintf_r+0x182>
 800c4a2:	9309      	str	r3, [sp, #36]	; 0x24
 800c4a4:	4e2f      	ldr	r6, [pc, #188]	; (800c564 <_svfiprintf_r+0x1ec>)
 800c4a6:	7829      	ldrb	r1, [r5, #0]
 800c4a8:	2203      	movs	r2, #3
 800c4aa:	0030      	movs	r0, r6
 800c4ac:	f000 f9d8 	bl	800c860 <memchr>
 800c4b0:	2800      	cmp	r0, #0
 800c4b2:	d006      	beq.n	800c4c2 <_svfiprintf_r+0x14a>
 800c4b4:	2340      	movs	r3, #64	; 0x40
 800c4b6:	1b80      	subs	r0, r0, r6
 800c4b8:	4083      	lsls	r3, r0
 800c4ba:	6822      	ldr	r2, [r4, #0]
 800c4bc:	3501      	adds	r5, #1
 800c4be:	4313      	orrs	r3, r2
 800c4c0:	6023      	str	r3, [r4, #0]
 800c4c2:	7829      	ldrb	r1, [r5, #0]
 800c4c4:	2206      	movs	r2, #6
 800c4c6:	4828      	ldr	r0, [pc, #160]	; (800c568 <_svfiprintf_r+0x1f0>)
 800c4c8:	1c6e      	adds	r6, r5, #1
 800c4ca:	7621      	strb	r1, [r4, #24]
 800c4cc:	f000 f9c8 	bl	800c860 <memchr>
 800c4d0:	2800      	cmp	r0, #0
 800c4d2:	d03c      	beq.n	800c54e <_svfiprintf_r+0x1d6>
 800c4d4:	4b25      	ldr	r3, [pc, #148]	; (800c56c <_svfiprintf_r+0x1f4>)
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d125      	bne.n	800c526 <_svfiprintf_r+0x1ae>
 800c4da:	2207      	movs	r2, #7
 800c4dc:	9b07      	ldr	r3, [sp, #28]
 800c4de:	3307      	adds	r3, #7
 800c4e0:	4393      	bics	r3, r2
 800c4e2:	3308      	adds	r3, #8
 800c4e4:	9307      	str	r3, [sp, #28]
 800c4e6:	6963      	ldr	r3, [r4, #20]
 800c4e8:	9a04      	ldr	r2, [sp, #16]
 800c4ea:	189b      	adds	r3, r3, r2
 800c4ec:	6163      	str	r3, [r4, #20]
 800c4ee:	e766      	b.n	800c3be <_svfiprintf_r+0x46>
 800c4f0:	4343      	muls	r3, r0
 800c4f2:	2101      	movs	r1, #1
 800c4f4:	189b      	adds	r3, r3, r2
 800c4f6:	0035      	movs	r5, r6
 800c4f8:	e7a6      	b.n	800c448 <_svfiprintf_r+0xd0>
 800c4fa:	2301      	movs	r3, #1
 800c4fc:	425b      	negs	r3, r3
 800c4fe:	e7d0      	b.n	800c4a2 <_svfiprintf_r+0x12a>
 800c500:	2300      	movs	r3, #0
 800c502:	200a      	movs	r0, #10
 800c504:	001a      	movs	r2, r3
 800c506:	3501      	adds	r5, #1
 800c508:	6063      	str	r3, [r4, #4]
 800c50a:	7829      	ldrb	r1, [r5, #0]
 800c50c:	1c6e      	adds	r6, r5, #1
 800c50e:	3930      	subs	r1, #48	; 0x30
 800c510:	2909      	cmp	r1, #9
 800c512:	d903      	bls.n	800c51c <_svfiprintf_r+0x1a4>
 800c514:	2b00      	cmp	r3, #0
 800c516:	d0c5      	beq.n	800c4a4 <_svfiprintf_r+0x12c>
 800c518:	9209      	str	r2, [sp, #36]	; 0x24
 800c51a:	e7c3      	b.n	800c4a4 <_svfiprintf_r+0x12c>
 800c51c:	4342      	muls	r2, r0
 800c51e:	2301      	movs	r3, #1
 800c520:	1852      	adds	r2, r2, r1
 800c522:	0035      	movs	r5, r6
 800c524:	e7f1      	b.n	800c50a <_svfiprintf_r+0x192>
 800c526:	ab07      	add	r3, sp, #28
 800c528:	9300      	str	r3, [sp, #0]
 800c52a:	003a      	movs	r2, r7
 800c52c:	4b10      	ldr	r3, [pc, #64]	; (800c570 <_svfiprintf_r+0x1f8>)
 800c52e:	0021      	movs	r1, r4
 800c530:	9803      	ldr	r0, [sp, #12]
 800c532:	e000      	b.n	800c536 <_svfiprintf_r+0x1be>
 800c534:	bf00      	nop
 800c536:	9004      	str	r0, [sp, #16]
 800c538:	9b04      	ldr	r3, [sp, #16]
 800c53a:	3301      	adds	r3, #1
 800c53c:	d1d3      	bne.n	800c4e6 <_svfiprintf_r+0x16e>
 800c53e:	89bb      	ldrh	r3, [r7, #12]
 800c540:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c542:	065b      	lsls	r3, r3, #25
 800c544:	d400      	bmi.n	800c548 <_svfiprintf_r+0x1d0>
 800c546:	e72e      	b.n	800c3a6 <_svfiprintf_r+0x2e>
 800c548:	2001      	movs	r0, #1
 800c54a:	4240      	negs	r0, r0
 800c54c:	e72b      	b.n	800c3a6 <_svfiprintf_r+0x2e>
 800c54e:	ab07      	add	r3, sp, #28
 800c550:	9300      	str	r3, [sp, #0]
 800c552:	003a      	movs	r2, r7
 800c554:	4b06      	ldr	r3, [pc, #24]	; (800c570 <_svfiprintf_r+0x1f8>)
 800c556:	0021      	movs	r1, r4
 800c558:	9803      	ldr	r0, [sp, #12]
 800c55a:	f000 f879 	bl	800c650 <_printf_i>
 800c55e:	e7ea      	b.n	800c536 <_svfiprintf_r+0x1be>
 800c560:	0800d5d8 	.word	0x0800d5d8
 800c564:	0800d5de 	.word	0x0800d5de
 800c568:	0800d5e2 	.word	0x0800d5e2
 800c56c:	00000000 	.word	0x00000000
 800c570:	0800c2b5 	.word	0x0800c2b5

0800c574 <_printf_common>:
 800c574:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c576:	0015      	movs	r5, r2
 800c578:	9301      	str	r3, [sp, #4]
 800c57a:	688a      	ldr	r2, [r1, #8]
 800c57c:	690b      	ldr	r3, [r1, #16]
 800c57e:	9000      	str	r0, [sp, #0]
 800c580:	000c      	movs	r4, r1
 800c582:	4293      	cmp	r3, r2
 800c584:	da00      	bge.n	800c588 <_printf_common+0x14>
 800c586:	0013      	movs	r3, r2
 800c588:	0022      	movs	r2, r4
 800c58a:	602b      	str	r3, [r5, #0]
 800c58c:	3243      	adds	r2, #67	; 0x43
 800c58e:	7812      	ldrb	r2, [r2, #0]
 800c590:	2a00      	cmp	r2, #0
 800c592:	d001      	beq.n	800c598 <_printf_common+0x24>
 800c594:	3301      	adds	r3, #1
 800c596:	602b      	str	r3, [r5, #0]
 800c598:	6823      	ldr	r3, [r4, #0]
 800c59a:	069b      	lsls	r3, r3, #26
 800c59c:	d502      	bpl.n	800c5a4 <_printf_common+0x30>
 800c59e:	682b      	ldr	r3, [r5, #0]
 800c5a0:	3302      	adds	r3, #2
 800c5a2:	602b      	str	r3, [r5, #0]
 800c5a4:	2706      	movs	r7, #6
 800c5a6:	6823      	ldr	r3, [r4, #0]
 800c5a8:	401f      	ands	r7, r3
 800c5aa:	d027      	beq.n	800c5fc <_printf_common+0x88>
 800c5ac:	0023      	movs	r3, r4
 800c5ae:	3343      	adds	r3, #67	; 0x43
 800c5b0:	781b      	ldrb	r3, [r3, #0]
 800c5b2:	1e5a      	subs	r2, r3, #1
 800c5b4:	4193      	sbcs	r3, r2
 800c5b6:	6822      	ldr	r2, [r4, #0]
 800c5b8:	0692      	lsls	r2, r2, #26
 800c5ba:	d430      	bmi.n	800c61e <_printf_common+0xaa>
 800c5bc:	0022      	movs	r2, r4
 800c5be:	9901      	ldr	r1, [sp, #4]
 800c5c0:	3243      	adds	r2, #67	; 0x43
 800c5c2:	9800      	ldr	r0, [sp, #0]
 800c5c4:	9e08      	ldr	r6, [sp, #32]
 800c5c6:	47b0      	blx	r6
 800c5c8:	1c43      	adds	r3, r0, #1
 800c5ca:	d025      	beq.n	800c618 <_printf_common+0xa4>
 800c5cc:	2306      	movs	r3, #6
 800c5ce:	6820      	ldr	r0, [r4, #0]
 800c5d0:	682a      	ldr	r2, [r5, #0]
 800c5d2:	68e1      	ldr	r1, [r4, #12]
 800c5d4:	4003      	ands	r3, r0
 800c5d6:	2500      	movs	r5, #0
 800c5d8:	2b04      	cmp	r3, #4
 800c5da:	d103      	bne.n	800c5e4 <_printf_common+0x70>
 800c5dc:	1a8d      	subs	r5, r1, r2
 800c5de:	43eb      	mvns	r3, r5
 800c5e0:	17db      	asrs	r3, r3, #31
 800c5e2:	401d      	ands	r5, r3
 800c5e4:	68a3      	ldr	r3, [r4, #8]
 800c5e6:	6922      	ldr	r2, [r4, #16]
 800c5e8:	4293      	cmp	r3, r2
 800c5ea:	dd01      	ble.n	800c5f0 <_printf_common+0x7c>
 800c5ec:	1a9b      	subs	r3, r3, r2
 800c5ee:	18ed      	adds	r5, r5, r3
 800c5f0:	2700      	movs	r7, #0
 800c5f2:	42bd      	cmp	r5, r7
 800c5f4:	d120      	bne.n	800c638 <_printf_common+0xc4>
 800c5f6:	2000      	movs	r0, #0
 800c5f8:	e010      	b.n	800c61c <_printf_common+0xa8>
 800c5fa:	3701      	adds	r7, #1
 800c5fc:	68e3      	ldr	r3, [r4, #12]
 800c5fe:	682a      	ldr	r2, [r5, #0]
 800c600:	1a9b      	subs	r3, r3, r2
 800c602:	42bb      	cmp	r3, r7
 800c604:	ddd2      	ble.n	800c5ac <_printf_common+0x38>
 800c606:	0022      	movs	r2, r4
 800c608:	2301      	movs	r3, #1
 800c60a:	3219      	adds	r2, #25
 800c60c:	9901      	ldr	r1, [sp, #4]
 800c60e:	9800      	ldr	r0, [sp, #0]
 800c610:	9e08      	ldr	r6, [sp, #32]
 800c612:	47b0      	blx	r6
 800c614:	1c43      	adds	r3, r0, #1
 800c616:	d1f0      	bne.n	800c5fa <_printf_common+0x86>
 800c618:	2001      	movs	r0, #1
 800c61a:	4240      	negs	r0, r0
 800c61c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c61e:	2030      	movs	r0, #48	; 0x30
 800c620:	18e1      	adds	r1, r4, r3
 800c622:	3143      	adds	r1, #67	; 0x43
 800c624:	7008      	strb	r0, [r1, #0]
 800c626:	0021      	movs	r1, r4
 800c628:	1c5a      	adds	r2, r3, #1
 800c62a:	3145      	adds	r1, #69	; 0x45
 800c62c:	7809      	ldrb	r1, [r1, #0]
 800c62e:	18a2      	adds	r2, r4, r2
 800c630:	3243      	adds	r2, #67	; 0x43
 800c632:	3302      	adds	r3, #2
 800c634:	7011      	strb	r1, [r2, #0]
 800c636:	e7c1      	b.n	800c5bc <_printf_common+0x48>
 800c638:	0022      	movs	r2, r4
 800c63a:	2301      	movs	r3, #1
 800c63c:	321a      	adds	r2, #26
 800c63e:	9901      	ldr	r1, [sp, #4]
 800c640:	9800      	ldr	r0, [sp, #0]
 800c642:	9e08      	ldr	r6, [sp, #32]
 800c644:	47b0      	blx	r6
 800c646:	1c43      	adds	r3, r0, #1
 800c648:	d0e6      	beq.n	800c618 <_printf_common+0xa4>
 800c64a:	3701      	adds	r7, #1
 800c64c:	e7d1      	b.n	800c5f2 <_printf_common+0x7e>
	...

0800c650 <_printf_i>:
 800c650:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c652:	b089      	sub	sp, #36	; 0x24
 800c654:	9204      	str	r2, [sp, #16]
 800c656:	000a      	movs	r2, r1
 800c658:	3243      	adds	r2, #67	; 0x43
 800c65a:	9305      	str	r3, [sp, #20]
 800c65c:	9003      	str	r0, [sp, #12]
 800c65e:	9202      	str	r2, [sp, #8]
 800c660:	7e0a      	ldrb	r2, [r1, #24]
 800c662:	000c      	movs	r4, r1
 800c664:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c666:	2a6e      	cmp	r2, #110	; 0x6e
 800c668:	d100      	bne.n	800c66c <_printf_i+0x1c>
 800c66a:	e086      	b.n	800c77a <_printf_i+0x12a>
 800c66c:	d81f      	bhi.n	800c6ae <_printf_i+0x5e>
 800c66e:	2a63      	cmp	r2, #99	; 0x63
 800c670:	d033      	beq.n	800c6da <_printf_i+0x8a>
 800c672:	d808      	bhi.n	800c686 <_printf_i+0x36>
 800c674:	2a00      	cmp	r2, #0
 800c676:	d100      	bne.n	800c67a <_printf_i+0x2a>
 800c678:	e08c      	b.n	800c794 <_printf_i+0x144>
 800c67a:	2a58      	cmp	r2, #88	; 0x58
 800c67c:	d04d      	beq.n	800c71a <_printf_i+0xca>
 800c67e:	0025      	movs	r5, r4
 800c680:	3542      	adds	r5, #66	; 0x42
 800c682:	702a      	strb	r2, [r5, #0]
 800c684:	e030      	b.n	800c6e8 <_printf_i+0x98>
 800c686:	2a64      	cmp	r2, #100	; 0x64
 800c688:	d001      	beq.n	800c68e <_printf_i+0x3e>
 800c68a:	2a69      	cmp	r2, #105	; 0x69
 800c68c:	d1f7      	bne.n	800c67e <_printf_i+0x2e>
 800c68e:	6819      	ldr	r1, [r3, #0]
 800c690:	6825      	ldr	r5, [r4, #0]
 800c692:	1d0a      	adds	r2, r1, #4
 800c694:	0628      	lsls	r0, r5, #24
 800c696:	d529      	bpl.n	800c6ec <_printf_i+0x9c>
 800c698:	6808      	ldr	r0, [r1, #0]
 800c69a:	601a      	str	r2, [r3, #0]
 800c69c:	2800      	cmp	r0, #0
 800c69e:	da03      	bge.n	800c6a8 <_printf_i+0x58>
 800c6a0:	232d      	movs	r3, #45	; 0x2d
 800c6a2:	9a02      	ldr	r2, [sp, #8]
 800c6a4:	4240      	negs	r0, r0
 800c6a6:	7013      	strb	r3, [r2, #0]
 800c6a8:	4e6b      	ldr	r6, [pc, #428]	; (800c858 <_printf_i+0x208>)
 800c6aa:	270a      	movs	r7, #10
 800c6ac:	e04f      	b.n	800c74e <_printf_i+0xfe>
 800c6ae:	2a73      	cmp	r2, #115	; 0x73
 800c6b0:	d074      	beq.n	800c79c <_printf_i+0x14c>
 800c6b2:	d808      	bhi.n	800c6c6 <_printf_i+0x76>
 800c6b4:	2a6f      	cmp	r2, #111	; 0x6f
 800c6b6:	d01f      	beq.n	800c6f8 <_printf_i+0xa8>
 800c6b8:	2a70      	cmp	r2, #112	; 0x70
 800c6ba:	d1e0      	bne.n	800c67e <_printf_i+0x2e>
 800c6bc:	2220      	movs	r2, #32
 800c6be:	6809      	ldr	r1, [r1, #0]
 800c6c0:	430a      	orrs	r2, r1
 800c6c2:	6022      	str	r2, [r4, #0]
 800c6c4:	e003      	b.n	800c6ce <_printf_i+0x7e>
 800c6c6:	2a75      	cmp	r2, #117	; 0x75
 800c6c8:	d016      	beq.n	800c6f8 <_printf_i+0xa8>
 800c6ca:	2a78      	cmp	r2, #120	; 0x78
 800c6cc:	d1d7      	bne.n	800c67e <_printf_i+0x2e>
 800c6ce:	0022      	movs	r2, r4
 800c6d0:	2178      	movs	r1, #120	; 0x78
 800c6d2:	3245      	adds	r2, #69	; 0x45
 800c6d4:	7011      	strb	r1, [r2, #0]
 800c6d6:	4e61      	ldr	r6, [pc, #388]	; (800c85c <_printf_i+0x20c>)
 800c6d8:	e022      	b.n	800c720 <_printf_i+0xd0>
 800c6da:	0025      	movs	r5, r4
 800c6dc:	681a      	ldr	r2, [r3, #0]
 800c6de:	3542      	adds	r5, #66	; 0x42
 800c6e0:	1d11      	adds	r1, r2, #4
 800c6e2:	6019      	str	r1, [r3, #0]
 800c6e4:	6813      	ldr	r3, [r2, #0]
 800c6e6:	702b      	strb	r3, [r5, #0]
 800c6e8:	2301      	movs	r3, #1
 800c6ea:	e065      	b.n	800c7b8 <_printf_i+0x168>
 800c6ec:	6808      	ldr	r0, [r1, #0]
 800c6ee:	601a      	str	r2, [r3, #0]
 800c6f0:	0669      	lsls	r1, r5, #25
 800c6f2:	d5d3      	bpl.n	800c69c <_printf_i+0x4c>
 800c6f4:	b200      	sxth	r0, r0
 800c6f6:	e7d1      	b.n	800c69c <_printf_i+0x4c>
 800c6f8:	6819      	ldr	r1, [r3, #0]
 800c6fa:	6825      	ldr	r5, [r4, #0]
 800c6fc:	1d08      	adds	r0, r1, #4
 800c6fe:	6018      	str	r0, [r3, #0]
 800c700:	6808      	ldr	r0, [r1, #0]
 800c702:	062e      	lsls	r6, r5, #24
 800c704:	d505      	bpl.n	800c712 <_printf_i+0xc2>
 800c706:	4e54      	ldr	r6, [pc, #336]	; (800c858 <_printf_i+0x208>)
 800c708:	2708      	movs	r7, #8
 800c70a:	2a6f      	cmp	r2, #111	; 0x6f
 800c70c:	d01b      	beq.n	800c746 <_printf_i+0xf6>
 800c70e:	270a      	movs	r7, #10
 800c710:	e019      	b.n	800c746 <_printf_i+0xf6>
 800c712:	066d      	lsls	r5, r5, #25
 800c714:	d5f7      	bpl.n	800c706 <_printf_i+0xb6>
 800c716:	b280      	uxth	r0, r0
 800c718:	e7f5      	b.n	800c706 <_printf_i+0xb6>
 800c71a:	3145      	adds	r1, #69	; 0x45
 800c71c:	4e4e      	ldr	r6, [pc, #312]	; (800c858 <_printf_i+0x208>)
 800c71e:	700a      	strb	r2, [r1, #0]
 800c720:	6818      	ldr	r0, [r3, #0]
 800c722:	6822      	ldr	r2, [r4, #0]
 800c724:	1d01      	adds	r1, r0, #4
 800c726:	6800      	ldr	r0, [r0, #0]
 800c728:	6019      	str	r1, [r3, #0]
 800c72a:	0615      	lsls	r5, r2, #24
 800c72c:	d521      	bpl.n	800c772 <_printf_i+0x122>
 800c72e:	07d3      	lsls	r3, r2, #31
 800c730:	d502      	bpl.n	800c738 <_printf_i+0xe8>
 800c732:	2320      	movs	r3, #32
 800c734:	431a      	orrs	r2, r3
 800c736:	6022      	str	r2, [r4, #0]
 800c738:	2710      	movs	r7, #16
 800c73a:	2800      	cmp	r0, #0
 800c73c:	d103      	bne.n	800c746 <_printf_i+0xf6>
 800c73e:	2320      	movs	r3, #32
 800c740:	6822      	ldr	r2, [r4, #0]
 800c742:	439a      	bics	r2, r3
 800c744:	6022      	str	r2, [r4, #0]
 800c746:	0023      	movs	r3, r4
 800c748:	2200      	movs	r2, #0
 800c74a:	3343      	adds	r3, #67	; 0x43
 800c74c:	701a      	strb	r2, [r3, #0]
 800c74e:	6863      	ldr	r3, [r4, #4]
 800c750:	60a3      	str	r3, [r4, #8]
 800c752:	2b00      	cmp	r3, #0
 800c754:	db58      	blt.n	800c808 <_printf_i+0x1b8>
 800c756:	2204      	movs	r2, #4
 800c758:	6821      	ldr	r1, [r4, #0]
 800c75a:	4391      	bics	r1, r2
 800c75c:	6021      	str	r1, [r4, #0]
 800c75e:	2800      	cmp	r0, #0
 800c760:	d154      	bne.n	800c80c <_printf_i+0x1bc>
 800c762:	9d02      	ldr	r5, [sp, #8]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d05a      	beq.n	800c81e <_printf_i+0x1ce>
 800c768:	0025      	movs	r5, r4
 800c76a:	7833      	ldrb	r3, [r6, #0]
 800c76c:	3542      	adds	r5, #66	; 0x42
 800c76e:	702b      	strb	r3, [r5, #0]
 800c770:	e055      	b.n	800c81e <_printf_i+0x1ce>
 800c772:	0655      	lsls	r5, r2, #25
 800c774:	d5db      	bpl.n	800c72e <_printf_i+0xde>
 800c776:	b280      	uxth	r0, r0
 800c778:	e7d9      	b.n	800c72e <_printf_i+0xde>
 800c77a:	681a      	ldr	r2, [r3, #0]
 800c77c:	680d      	ldr	r5, [r1, #0]
 800c77e:	1d10      	adds	r0, r2, #4
 800c780:	6949      	ldr	r1, [r1, #20]
 800c782:	6018      	str	r0, [r3, #0]
 800c784:	6813      	ldr	r3, [r2, #0]
 800c786:	062e      	lsls	r6, r5, #24
 800c788:	d501      	bpl.n	800c78e <_printf_i+0x13e>
 800c78a:	6019      	str	r1, [r3, #0]
 800c78c:	e002      	b.n	800c794 <_printf_i+0x144>
 800c78e:	066d      	lsls	r5, r5, #25
 800c790:	d5fb      	bpl.n	800c78a <_printf_i+0x13a>
 800c792:	8019      	strh	r1, [r3, #0]
 800c794:	2300      	movs	r3, #0
 800c796:	9d02      	ldr	r5, [sp, #8]
 800c798:	6123      	str	r3, [r4, #16]
 800c79a:	e04f      	b.n	800c83c <_printf_i+0x1ec>
 800c79c:	681a      	ldr	r2, [r3, #0]
 800c79e:	1d11      	adds	r1, r2, #4
 800c7a0:	6019      	str	r1, [r3, #0]
 800c7a2:	6815      	ldr	r5, [r2, #0]
 800c7a4:	2100      	movs	r1, #0
 800c7a6:	6862      	ldr	r2, [r4, #4]
 800c7a8:	0028      	movs	r0, r5
 800c7aa:	f000 f859 	bl	800c860 <memchr>
 800c7ae:	2800      	cmp	r0, #0
 800c7b0:	d001      	beq.n	800c7b6 <_printf_i+0x166>
 800c7b2:	1b40      	subs	r0, r0, r5
 800c7b4:	6060      	str	r0, [r4, #4]
 800c7b6:	6863      	ldr	r3, [r4, #4]
 800c7b8:	6123      	str	r3, [r4, #16]
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	9a02      	ldr	r2, [sp, #8]
 800c7be:	7013      	strb	r3, [r2, #0]
 800c7c0:	e03c      	b.n	800c83c <_printf_i+0x1ec>
 800c7c2:	6923      	ldr	r3, [r4, #16]
 800c7c4:	002a      	movs	r2, r5
 800c7c6:	9904      	ldr	r1, [sp, #16]
 800c7c8:	9803      	ldr	r0, [sp, #12]
 800c7ca:	9d05      	ldr	r5, [sp, #20]
 800c7cc:	47a8      	blx	r5
 800c7ce:	1c43      	adds	r3, r0, #1
 800c7d0:	d03e      	beq.n	800c850 <_printf_i+0x200>
 800c7d2:	6823      	ldr	r3, [r4, #0]
 800c7d4:	079b      	lsls	r3, r3, #30
 800c7d6:	d415      	bmi.n	800c804 <_printf_i+0x1b4>
 800c7d8:	9b07      	ldr	r3, [sp, #28]
 800c7da:	68e0      	ldr	r0, [r4, #12]
 800c7dc:	4298      	cmp	r0, r3
 800c7de:	da39      	bge.n	800c854 <_printf_i+0x204>
 800c7e0:	0018      	movs	r0, r3
 800c7e2:	e037      	b.n	800c854 <_printf_i+0x204>
 800c7e4:	0022      	movs	r2, r4
 800c7e6:	2301      	movs	r3, #1
 800c7e8:	3219      	adds	r2, #25
 800c7ea:	9904      	ldr	r1, [sp, #16]
 800c7ec:	9803      	ldr	r0, [sp, #12]
 800c7ee:	9e05      	ldr	r6, [sp, #20]
 800c7f0:	47b0      	blx	r6
 800c7f2:	1c43      	adds	r3, r0, #1
 800c7f4:	d02c      	beq.n	800c850 <_printf_i+0x200>
 800c7f6:	3501      	adds	r5, #1
 800c7f8:	68e3      	ldr	r3, [r4, #12]
 800c7fa:	9a07      	ldr	r2, [sp, #28]
 800c7fc:	1a9b      	subs	r3, r3, r2
 800c7fe:	42ab      	cmp	r3, r5
 800c800:	dcf0      	bgt.n	800c7e4 <_printf_i+0x194>
 800c802:	e7e9      	b.n	800c7d8 <_printf_i+0x188>
 800c804:	2500      	movs	r5, #0
 800c806:	e7f7      	b.n	800c7f8 <_printf_i+0x1a8>
 800c808:	2800      	cmp	r0, #0
 800c80a:	d0ad      	beq.n	800c768 <_printf_i+0x118>
 800c80c:	9d02      	ldr	r5, [sp, #8]
 800c80e:	0039      	movs	r1, r7
 800c810:	f7f3 fd08 	bl	8000224 <__aeabi_uidivmod>
 800c814:	5c73      	ldrb	r3, [r6, r1]
 800c816:	3d01      	subs	r5, #1
 800c818:	702b      	strb	r3, [r5, #0]
 800c81a:	2800      	cmp	r0, #0
 800c81c:	d1f7      	bne.n	800c80e <_printf_i+0x1be>
 800c81e:	2f08      	cmp	r7, #8
 800c820:	d109      	bne.n	800c836 <_printf_i+0x1e6>
 800c822:	6823      	ldr	r3, [r4, #0]
 800c824:	07db      	lsls	r3, r3, #31
 800c826:	d506      	bpl.n	800c836 <_printf_i+0x1e6>
 800c828:	6863      	ldr	r3, [r4, #4]
 800c82a:	6922      	ldr	r2, [r4, #16]
 800c82c:	4293      	cmp	r3, r2
 800c82e:	dc02      	bgt.n	800c836 <_printf_i+0x1e6>
 800c830:	2330      	movs	r3, #48	; 0x30
 800c832:	3d01      	subs	r5, #1
 800c834:	702b      	strb	r3, [r5, #0]
 800c836:	9b02      	ldr	r3, [sp, #8]
 800c838:	1b5b      	subs	r3, r3, r5
 800c83a:	6123      	str	r3, [r4, #16]
 800c83c:	9b05      	ldr	r3, [sp, #20]
 800c83e:	aa07      	add	r2, sp, #28
 800c840:	9300      	str	r3, [sp, #0]
 800c842:	0021      	movs	r1, r4
 800c844:	9b04      	ldr	r3, [sp, #16]
 800c846:	9803      	ldr	r0, [sp, #12]
 800c848:	f7ff fe94 	bl	800c574 <_printf_common>
 800c84c:	1c43      	adds	r3, r0, #1
 800c84e:	d1b8      	bne.n	800c7c2 <_printf_i+0x172>
 800c850:	2001      	movs	r0, #1
 800c852:	4240      	negs	r0, r0
 800c854:	b009      	add	sp, #36	; 0x24
 800c856:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c858:	0800d5e9 	.word	0x0800d5e9
 800c85c:	0800d5fa 	.word	0x0800d5fa

0800c860 <memchr>:
 800c860:	b2c9      	uxtb	r1, r1
 800c862:	1882      	adds	r2, r0, r2
 800c864:	4290      	cmp	r0, r2
 800c866:	d101      	bne.n	800c86c <memchr+0xc>
 800c868:	2000      	movs	r0, #0
 800c86a:	4770      	bx	lr
 800c86c:	7803      	ldrb	r3, [r0, #0]
 800c86e:	428b      	cmp	r3, r1
 800c870:	d0fb      	beq.n	800c86a <memchr+0xa>
 800c872:	3001      	adds	r0, #1
 800c874:	e7f6      	b.n	800c864 <memchr+0x4>

0800c876 <memmove>:
 800c876:	b510      	push	{r4, lr}
 800c878:	4288      	cmp	r0, r1
 800c87a:	d902      	bls.n	800c882 <memmove+0xc>
 800c87c:	188b      	adds	r3, r1, r2
 800c87e:	4298      	cmp	r0, r3
 800c880:	d303      	bcc.n	800c88a <memmove+0x14>
 800c882:	2300      	movs	r3, #0
 800c884:	e007      	b.n	800c896 <memmove+0x20>
 800c886:	5c8b      	ldrb	r3, [r1, r2]
 800c888:	5483      	strb	r3, [r0, r2]
 800c88a:	3a01      	subs	r2, #1
 800c88c:	d2fb      	bcs.n	800c886 <memmove+0x10>
 800c88e:	bd10      	pop	{r4, pc}
 800c890:	5ccc      	ldrb	r4, [r1, r3]
 800c892:	54c4      	strb	r4, [r0, r3]
 800c894:	3301      	adds	r3, #1
 800c896:	429a      	cmp	r2, r3
 800c898:	d1fa      	bne.n	800c890 <memmove+0x1a>
 800c89a:	e7f8      	b.n	800c88e <memmove+0x18>

0800c89c <_free_r>:
 800c89c:	b570      	push	{r4, r5, r6, lr}
 800c89e:	0005      	movs	r5, r0
 800c8a0:	2900      	cmp	r1, #0
 800c8a2:	d010      	beq.n	800c8c6 <_free_r+0x2a>
 800c8a4:	1f0c      	subs	r4, r1, #4
 800c8a6:	6823      	ldr	r3, [r4, #0]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	da00      	bge.n	800c8ae <_free_r+0x12>
 800c8ac:	18e4      	adds	r4, r4, r3
 800c8ae:	0028      	movs	r0, r5
 800c8b0:	f7ff fcfe 	bl	800c2b0 <__malloc_lock>
 800c8b4:	4a1d      	ldr	r2, [pc, #116]	; (800c92c <_free_r+0x90>)
 800c8b6:	6813      	ldr	r3, [r2, #0]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d105      	bne.n	800c8c8 <_free_r+0x2c>
 800c8bc:	6063      	str	r3, [r4, #4]
 800c8be:	6014      	str	r4, [r2, #0]
 800c8c0:	0028      	movs	r0, r5
 800c8c2:	f7ff fcf6 	bl	800c2b2 <__malloc_unlock>
 800c8c6:	bd70      	pop	{r4, r5, r6, pc}
 800c8c8:	42a3      	cmp	r3, r4
 800c8ca:	d909      	bls.n	800c8e0 <_free_r+0x44>
 800c8cc:	6821      	ldr	r1, [r4, #0]
 800c8ce:	1860      	adds	r0, r4, r1
 800c8d0:	4283      	cmp	r3, r0
 800c8d2:	d1f3      	bne.n	800c8bc <_free_r+0x20>
 800c8d4:	6818      	ldr	r0, [r3, #0]
 800c8d6:	685b      	ldr	r3, [r3, #4]
 800c8d8:	1841      	adds	r1, r0, r1
 800c8da:	6021      	str	r1, [r4, #0]
 800c8dc:	e7ee      	b.n	800c8bc <_free_r+0x20>
 800c8de:	0013      	movs	r3, r2
 800c8e0:	685a      	ldr	r2, [r3, #4]
 800c8e2:	2a00      	cmp	r2, #0
 800c8e4:	d001      	beq.n	800c8ea <_free_r+0x4e>
 800c8e6:	42a2      	cmp	r2, r4
 800c8e8:	d9f9      	bls.n	800c8de <_free_r+0x42>
 800c8ea:	6819      	ldr	r1, [r3, #0]
 800c8ec:	1858      	adds	r0, r3, r1
 800c8ee:	42a0      	cmp	r0, r4
 800c8f0:	d10b      	bne.n	800c90a <_free_r+0x6e>
 800c8f2:	6820      	ldr	r0, [r4, #0]
 800c8f4:	1809      	adds	r1, r1, r0
 800c8f6:	1858      	adds	r0, r3, r1
 800c8f8:	6019      	str	r1, [r3, #0]
 800c8fa:	4282      	cmp	r2, r0
 800c8fc:	d1e0      	bne.n	800c8c0 <_free_r+0x24>
 800c8fe:	6810      	ldr	r0, [r2, #0]
 800c900:	6852      	ldr	r2, [r2, #4]
 800c902:	1841      	adds	r1, r0, r1
 800c904:	6019      	str	r1, [r3, #0]
 800c906:	605a      	str	r2, [r3, #4]
 800c908:	e7da      	b.n	800c8c0 <_free_r+0x24>
 800c90a:	42a0      	cmp	r0, r4
 800c90c:	d902      	bls.n	800c914 <_free_r+0x78>
 800c90e:	230c      	movs	r3, #12
 800c910:	602b      	str	r3, [r5, #0]
 800c912:	e7d5      	b.n	800c8c0 <_free_r+0x24>
 800c914:	6821      	ldr	r1, [r4, #0]
 800c916:	1860      	adds	r0, r4, r1
 800c918:	4282      	cmp	r2, r0
 800c91a:	d103      	bne.n	800c924 <_free_r+0x88>
 800c91c:	6810      	ldr	r0, [r2, #0]
 800c91e:	6852      	ldr	r2, [r2, #4]
 800c920:	1841      	adds	r1, r0, r1
 800c922:	6021      	str	r1, [r4, #0]
 800c924:	6062      	str	r2, [r4, #4]
 800c926:	605c      	str	r4, [r3, #4]
 800c928:	e7ca      	b.n	800c8c0 <_free_r+0x24>
 800c92a:	46c0      	nop			; (mov r8, r8)
 800c92c:	20000158 	.word	0x20000158

0800c930 <_realloc_r>:
 800c930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c932:	0007      	movs	r7, r0
 800c934:	000d      	movs	r5, r1
 800c936:	0016      	movs	r6, r2
 800c938:	2900      	cmp	r1, #0
 800c93a:	d105      	bne.n	800c948 <_realloc_r+0x18>
 800c93c:	0011      	movs	r1, r2
 800c93e:	f7ff fc27 	bl	800c190 <_malloc_r>
 800c942:	0004      	movs	r4, r0
 800c944:	0020      	movs	r0, r4
 800c946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c948:	2a00      	cmp	r2, #0
 800c94a:	d103      	bne.n	800c954 <_realloc_r+0x24>
 800c94c:	f7ff ffa6 	bl	800c89c <_free_r>
 800c950:	0034      	movs	r4, r6
 800c952:	e7f7      	b.n	800c944 <_realloc_r+0x14>
 800c954:	f000 f812 	bl	800c97c <_malloc_usable_size_r>
 800c958:	002c      	movs	r4, r5
 800c95a:	42b0      	cmp	r0, r6
 800c95c:	d2f2      	bcs.n	800c944 <_realloc_r+0x14>
 800c95e:	0031      	movs	r1, r6
 800c960:	0038      	movs	r0, r7
 800c962:	f7ff fc15 	bl	800c190 <_malloc_r>
 800c966:	1e04      	subs	r4, r0, #0
 800c968:	d0ec      	beq.n	800c944 <_realloc_r+0x14>
 800c96a:	0029      	movs	r1, r5
 800c96c:	0032      	movs	r2, r6
 800c96e:	f7ff fbef 	bl	800c150 <memcpy>
 800c972:	0029      	movs	r1, r5
 800c974:	0038      	movs	r0, r7
 800c976:	f7ff ff91 	bl	800c89c <_free_r>
 800c97a:	e7e3      	b.n	800c944 <_realloc_r+0x14>

0800c97c <_malloc_usable_size_r>:
 800c97c:	1f0b      	subs	r3, r1, #4
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	1f18      	subs	r0, r3, #4
 800c982:	2b00      	cmp	r3, #0
 800c984:	da01      	bge.n	800c98a <_malloc_usable_size_r+0xe>
 800c986:	580b      	ldr	r3, [r1, r0]
 800c988:	18c0      	adds	r0, r0, r3
 800c98a:	4770      	bx	lr

0800c98c <_init>:
 800c98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c98e:	46c0      	nop			; (mov r8, r8)
 800c990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c992:	bc08      	pop	{r3}
 800c994:	469e      	mov	lr, r3
 800c996:	4770      	bx	lr

0800c998 <_fini>:
 800c998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c99a:	46c0      	nop			; (mov r8, r8)
 800c99c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c99e:	bc08      	pop	{r3}
 800c9a0:	469e      	mov	lr, r3
 800c9a2:	4770      	bx	lr
