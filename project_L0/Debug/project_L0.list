
project_L0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e38  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000064c  08006ef8  08006ef8  00016ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007544  08007544  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08007544  08007544  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007544  08007544  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007544  08007544  00017544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007548  08007548  00017548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800754c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  20000068  080075b4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  080075b4  000202a8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016512  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c3c  00000000  00000000  000365a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010f8  00000000  00000000  000391e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f78  00000000  00000000  0003a2d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017555  00000000  00000000  0003b250  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000eb82  00000000  00000000  000527a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008cd24  00000000  00000000  00061327  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ee04b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ea4  00000000  00000000  000ee0c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006ee0 	.word	0x08006ee0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08006ee0 	.word	0x08006ee0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <SPI_CS_LOW>:
 */

#include "TFT_display.h"

// ---- lower level functions ----
void SPI_CS_LOW() {HAL_GPIO_WritePin(CS_GPIO, CS_PIN, GPIO_PIN_RESET);}
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
 80003f8:	4b04      	ldr	r3, [pc, #16]	; (800040c <SPI_CS_LOW+0x18>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	2180      	movs	r1, #128	; 0x80
 80003fe:	0018      	movs	r0, r3
 8000400:	f002 ffc9 	bl	8003396 <HAL_GPIO_WritePin>
 8000404:	46c0      	nop			; (mov r8, r8)
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	50000800 	.word	0x50000800

08000410 <SPI_CS_HIGH>:

void SPI_CS_HIGH() {HAL_GPIO_WritePin(CS_GPIO, CS_PIN, GPIO_PIN_SET);}
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
 8000414:	4b04      	ldr	r3, [pc, #16]	; (8000428 <SPI_CS_HIGH+0x18>)
 8000416:	2201      	movs	r2, #1
 8000418:	2180      	movs	r1, #128	; 0x80
 800041a:	0018      	movs	r0, r3
 800041c:	f002 ffbb 	bl	8003396 <HAL_GPIO_WritePin>
 8000420:	46c0      	nop			; (mov r8, r8)
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	50000800 	.word	0x50000800

0800042c <SPI_DC_LOW>:

void SPI_DC_LOW() {HAL_GPIO_WritePin(DC_GPIO, DC_PIN, GPIO_PIN_RESET);}
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
 8000430:	4b04      	ldr	r3, [pc, #16]	; (8000444 <SPI_DC_LOW+0x18>)
 8000432:	2200      	movs	r2, #0
 8000434:	2140      	movs	r1, #64	; 0x40
 8000436:	0018      	movs	r0, r3
 8000438:	f002 ffad 	bl	8003396 <HAL_GPIO_WritePin>
 800043c:	46c0      	nop			; (mov r8, r8)
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	50000400 	.word	0x50000400

08000448 <SPI_DC_HIGH>:

void SPI_DC_HIGH() {HAL_GPIO_WritePin(DC_GPIO, DC_PIN, GPIO_PIN_SET);}
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
 800044c:	4b04      	ldr	r3, [pc, #16]	; (8000460 <SPI_DC_HIGH+0x18>)
 800044e:	2201      	movs	r2, #1
 8000450:	2140      	movs	r1, #64	; 0x40
 8000452:	0018      	movs	r0, r3
 8000454:	f002 ff9f 	bl	8003396 <HAL_GPIO_WritePin>
 8000458:	46c0      	nop			; (mov r8, r8)
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	46c0      	nop			; (mov r8, r8)
 8000460:	50000400 	.word	0x50000400

08000464 <sendCommand>:

// still ripped but now im changing it
void sendCommand(uint8_t cmd, uint8_t *args, uint16_t numArgs, SPI_HandleTypeDef *hspi) {
 8000464:	b580      	push	{r7, lr}
 8000466:	b084      	sub	sp, #16
 8000468:	af00      	add	r7, sp, #0
 800046a:	60b9      	str	r1, [r7, #8]
 800046c:	0011      	movs	r1, r2
 800046e:	607b      	str	r3, [r7, #4]
 8000470:	230f      	movs	r3, #15
 8000472:	18fb      	adds	r3, r7, r3
 8000474:	1c02      	adds	r2, r0, #0
 8000476:	701a      	strb	r2, [r3, #0]
 8000478:	230c      	movs	r3, #12
 800047a:	18fb      	adds	r3, r7, r3
 800047c:	1c0a      	adds	r2, r1, #0
 800047e:	801a      	strh	r2, [r3, #0]
	while (HAL_SPI_GetState(hspi) == HAL_SPI_STATE_BUSY_TX);		// block next transfer request while DMA transfer is ongoing
 8000480:	46c0      	nop			; (mov r8, r8)
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	0018      	movs	r0, r3
 8000486:	f005 fa85 	bl	8005994 <HAL_SPI_GetState>
 800048a:	0003      	movs	r3, r0
 800048c:	2b03      	cmp	r3, #3
 800048e:	d0f8      	beq.n	8000482 <sendCommand+0x1e>
	SPI_CS_LOW();	// chip select
 8000490:	f7ff ffb0 	bl	80003f4 <SPI_CS_LOW>

	SPI_DC_LOW();	// command mode
 8000494:	f7ff ffca 	bl	800042c <SPI_DC_LOW>
	HAL_SPI_Transmit(hspi, &cmd, 1, 1000);	// not using DMA bc it's only 1 byte
 8000498:	23fa      	movs	r3, #250	; 0xfa
 800049a:	009b      	lsls	r3, r3, #2
 800049c:	220f      	movs	r2, #15
 800049e:	18b9      	adds	r1, r7, r2
 80004a0:	6878      	ldr	r0, [r7, #4]
 80004a2:	2201      	movs	r2, #1
 80004a4:	f004 ff94 	bl	80053d0 <HAL_SPI_Transmit>

	SPI_DC_HIGH();	// data mode
 80004a8:	f7ff ffce 	bl	8000448 <SPI_DC_HIGH>
	if (numArgs) {
 80004ac:	230c      	movs	r3, #12
 80004ae:	18fb      	adds	r3, r7, r3
 80004b0:	881b      	ldrh	r3, [r3, #0]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d007      	beq.n	80004c6 <sendCommand+0x62>
		HAL_SPI_Transmit_IT(hspi, args, numArgs);
 80004b6:	230c      	movs	r3, #12
 80004b8:	18fb      	adds	r3, r7, r3
 80004ba:	881a      	ldrh	r2, [r3, #0]
 80004bc:	68b9      	ldr	r1, [r7, #8]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	0018      	movs	r0, r3
 80004c2:	f005 f8d3 	bl	800566c <HAL_SPI_Transmit_IT>
//		HAL_SPI_Transmit_DMA(hspi, args, numArgs);
	}

//	SPI_CS_HIGH();	// chip select disable
}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	46bd      	mov	sp, r7
 80004ca:	b004      	add	sp, #16
 80004cc:	bd80      	pop	{r7, pc}
	...

080004d0 <HAL_SPI_TxCpltCallback>:

// DMA callback on transfer compelete
// using only for sending data, but not commands
// dont send request when transfer is ongoing
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(CS_GPIO, CS_PIN) == GPIO_PIN_RESET) SPI_CS_HIGH();	// chip select disable
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <HAL_SPI_TxCpltCallback+0x24>)
 80004da:	2180      	movs	r1, #128	; 0x80
 80004dc:	0018      	movs	r0, r3
 80004de:	f002 ff3d 	bl	800335c <HAL_GPIO_ReadPin>
 80004e2:	1e03      	subs	r3, r0, #0
 80004e4:	d101      	bne.n	80004ea <HAL_SPI_TxCpltCallback+0x1a>
 80004e6:	f7ff ff93 	bl	8000410 <SPI_CS_HIGH>
}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	46bd      	mov	sp, r7
 80004ee:	b002      	add	sp, #8
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	50000800 	.word	0x50000800

080004f8 <displayInit>:

// array parser heavily based on Adafruit library code
void displayInit(uint8_t *args, SPI_HandleTypeDef *hspi) {
 80004f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004fa:	b085      	sub	sp, #20
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	6039      	str	r1, [r7, #0]
	uint8_t  numCommands, cmd, numArgs;
	uint16_t ms;
	uint8_t index = 0;
 8000502:	220b      	movs	r2, #11
 8000504:	0011      	movs	r1, r2
 8000506:	18bb      	adds	r3, r7, r2
 8000508:	2200      	movs	r2, #0
 800050a:	701a      	strb	r2, [r3, #0]
	uint8_t data;

	numCommands = args[index++];   // Number of commands to follow
 800050c:	000a      	movs	r2, r1
 800050e:	18bb      	adds	r3, r7, r2
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	18ba      	adds	r2, r7, r2
 8000514:	1c59      	adds	r1, r3, #1
 8000516:	7011      	strb	r1, [r2, #0]
 8000518:	001a      	movs	r2, r3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	189a      	adds	r2, r3, r2
 800051e:	230f      	movs	r3, #15
 8000520:	18fb      	adds	r3, r7, r3
 8000522:	7812      	ldrb	r2, [r2, #0]
 8000524:	701a      	strb	r2, [r3, #0]
	while(numCommands--) {                 // For each command...
 8000526:	e05e      	b.n	80005e6 <displayInit+0xee>
		cmd = args[index++];         // Read command
 8000528:	200b      	movs	r0, #11
 800052a:	183b      	adds	r3, r7, r0
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	183a      	adds	r2, r7, r0
 8000530:	1c59      	adds	r1, r3, #1
 8000532:	7011      	strb	r1, [r2, #0]
 8000534:	001a      	movs	r2, r3
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	189a      	adds	r2, r3, r2
 800053a:	230a      	movs	r3, #10
 800053c:	18fb      	adds	r3, r7, r3
 800053e:	7812      	ldrb	r2, [r2, #0]
 8000540:	701a      	strb	r2, [r3, #0]
		numArgs  = args[index++];    // Number of args to follow
 8000542:	183b      	adds	r3, r7, r0
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	183a      	adds	r2, r7, r0
 8000548:	1c59      	adds	r1, r3, #1
 800054a:	7011      	strb	r1, [r2, #0]
 800054c:	001a      	movs	r2, r3
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	189a      	adds	r2, r3, r2
 8000552:	2609      	movs	r6, #9
 8000554:	19bb      	adds	r3, r7, r6
 8000556:	7812      	ldrb	r2, [r2, #0]
 8000558:	701a      	strb	r2, [r3, #0]
		ms       = numArgs & ST_CMD_DELAY;   // If hibit set, delay follows args
 800055a:	19bb      	adds	r3, r7, r6
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	b29a      	uxth	r2, r3
 8000560:	210c      	movs	r1, #12
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2180      	movs	r1, #128	; 0x80
 8000566:	400a      	ands	r2, r1
 8000568:	801a      	strh	r2, [r3, #0]
		numArgs &= ~ST_CMD_DELAY;            // Mask out delay bit
 800056a:	19bb      	adds	r3, r7, r6
 800056c:	19ba      	adds	r2, r7, r6
 800056e:	7812      	ldrb	r2, [r2, #0]
 8000570:	217f      	movs	r1, #127	; 0x7f
 8000572:	400a      	ands	r2, r1
 8000574:	701a      	strb	r2, [r3, #0]
		sendCommand(cmd, &args[index], numArgs, hspi);
 8000576:	0005      	movs	r5, r0
 8000578:	183b      	adds	r3, r7, r0
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	687a      	ldr	r2, [r7, #4]
 800057e:	18d1      	adds	r1, r2, r3
 8000580:	19bb      	adds	r3, r7, r6
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	b29a      	uxth	r2, r3
 8000586:	683c      	ldr	r4, [r7, #0]
 8000588:	230a      	movs	r3, #10
 800058a:	18fb      	adds	r3, r7, r3
 800058c:	7818      	ldrb	r0, [r3, #0]
 800058e:	0023      	movs	r3, r4
 8000590:	f7ff ff68 	bl	8000464 <sendCommand>
		index += numArgs;
 8000594:	0028      	movs	r0, r5
 8000596:	183b      	adds	r3, r7, r0
 8000598:	1839      	adds	r1, r7, r0
 800059a:	19ba      	adds	r2, r7, r6
 800059c:	7809      	ldrb	r1, [r1, #0]
 800059e:	7812      	ldrb	r2, [r2, #0]
 80005a0:	188a      	adds	r2, r1, r2
 80005a2:	701a      	strb	r2, [r3, #0]

		if(ms) {
 80005a4:	210c      	movs	r1, #12
 80005a6:	187b      	adds	r3, r7, r1
 80005a8:	881b      	ldrh	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d01b      	beq.n	80005e6 <displayInit+0xee>
			ms = args[index++]; // Read post-command delay time (ms)
 80005ae:	220b      	movs	r2, #11
 80005b0:	18bb      	adds	r3, r7, r2
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	18ba      	adds	r2, r7, r2
 80005b6:	1c59      	adds	r1, r3, #1
 80005b8:	7011      	strb	r1, [r2, #0]
 80005ba:	001a      	movs	r2, r3
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	189b      	adds	r3, r3, r2
 80005c0:	781a      	ldrb	r2, [r3, #0]
 80005c2:	210c      	movs	r1, #12
 80005c4:	187b      	adds	r3, r7, r1
 80005c6:	801a      	strh	r2, [r3, #0]
			if(ms == 255) ms = 500;     // If 255, delay for 500 ms
 80005c8:	187b      	adds	r3, r7, r1
 80005ca:	881b      	ldrh	r3, [r3, #0]
 80005cc:	2bff      	cmp	r3, #255	; 0xff
 80005ce:	d104      	bne.n	80005da <displayInit+0xe2>
 80005d0:	230c      	movs	r3, #12
 80005d2:	18fb      	adds	r3, r7, r3
 80005d4:	22fa      	movs	r2, #250	; 0xfa
 80005d6:	0052      	lsls	r2, r2, #1
 80005d8:	801a      	strh	r2, [r3, #0]
			HAL_Delay(ms);
 80005da:	230c      	movs	r3, #12
 80005dc:	18fb      	adds	r3, r7, r3
 80005de:	881b      	ldrh	r3, [r3, #0]
 80005e0:	0018      	movs	r0, r3
 80005e2:	f002 f8a5 	bl	8002730 <HAL_Delay>
	while(numCommands--) {                 // For each command...
 80005e6:	220f      	movs	r2, #15
 80005e8:	18bb      	adds	r3, r7, r2
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	18ba      	adds	r2, r7, r2
 80005ee:	1e59      	subs	r1, r3, #1
 80005f0:	7011      	strb	r1, [r2, #0]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d198      	bne.n	8000528 <displayInit+0x30>
		}
	}

	// note: this line may be doing more work than I think
	// (hard to read in datasheet)
	data = 0xC0;
 80005f6:	2108      	movs	r1, #8
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	22c0      	movs	r2, #192	; 0xc0
 80005fc:	701a      	strb	r2, [r3, #0]
	sendCommand(ST77XX_MADCTL, &data, 1, hspi);
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	1879      	adds	r1, r7, r1
 8000602:	2201      	movs	r2, #1
 8000604:	2036      	movs	r0, #54	; 0x36
 8000606:	f7ff ff2d 	bl	8000464 <sendCommand>
}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	46bd      	mov	sp, r7
 800060e:	b005      	add	sp, #20
 8000610:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000614 <TFT_startup>:

void TFT_startup(SPI_HandleTypeDef *hspi) {
 8000614:	b590      	push	{r4, r7, lr}
 8000616:	b0a3      	sub	sp, #140	; 0x8c
 8000618:	af02      	add	r7, sp, #8
 800061a:	6078      	str	r0, [r7, #4]
	// startup sequence: rcmd1->rcmd2red->rcmd3
	uint8_t initCommands[] = {
 800061c:	240c      	movs	r4, #12
 800061e:	193a      	adds	r2, r7, r4
 8000620:	4b14      	ldr	r3, [pc, #80]	; (8000674 <TFT_startup+0x60>)
 8000622:	0010      	movs	r0, r2
 8000624:	0019      	movs	r1, r3
 8000626:	2371      	movs	r3, #113	; 0x71
 8000628:	001a      	movs	r2, r3
 800062a:	f006 f849 	bl	80066c0 <memcpy>
			10,                           //     10 ms delay
		ST77XX_DISPON,    ST_CMD_DELAY, //  4: Main screen turn on, no args w/delay
			100	                        //     100 ms delay
	};

	displayInit(initCommands, hspi);
 800062e:	687a      	ldr	r2, [r7, #4]
 8000630:	193b      	adds	r3, r7, r4
 8000632:	0011      	movs	r1, r2
 8000634:	0018      	movs	r0, r3
 8000636:	f7ff ff5f 	bl	80004f8 <displayInit>
	setAddrWindow(0, 0, WIDTH, HEIGHT, hspi);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	23a0      	movs	r3, #160	; 0xa0
 8000640:	2280      	movs	r2, #128	; 0x80
 8000642:	2100      	movs	r1, #0
 8000644:	2000      	movs	r0, #0
 8000646:	f000 f821 	bl	800068c <setAddrWindow>

	// set the global variables
	cursorX = 0;
 800064a:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <TFT_startup+0x64>)
 800064c:	2200      	movs	r2, #0
 800064e:	701a      	strb	r2, [r3, #0]
	cursorY = 0;
 8000650:	4b0a      	ldr	r3, [pc, #40]	; (800067c <TFT_startup+0x68>)
 8000652:	2200      	movs	r2, #0
 8000654:	701a      	strb	r2, [r3, #0]
	textSize = 1;
 8000656:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <TFT_startup+0x6c>)
 8000658:	2201      	movs	r2, #1
 800065a:	701a      	strb	r2, [r3, #0]
	textColor = ST77XX_BLACK;
 800065c:	4b09      	ldr	r3, [pc, #36]	; (8000684 <TFT_startup+0x70>)
 800065e:	2200      	movs	r2, #0
 8000660:	801a      	strh	r2, [r3, #0]
	bg = ST77XX_WHITE;
 8000662:	4b09      	ldr	r3, [pc, #36]	; (8000688 <TFT_startup+0x74>)
 8000664:	2201      	movs	r2, #1
 8000666:	4252      	negs	r2, r2
 8000668:	801a      	strh	r2, [r3, #0]
}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	46bd      	mov	sp, r7
 800066e:	b021      	add	sp, #132	; 0x84
 8000670:	bd90      	pop	{r4, r7, pc}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	08006ef8 	.word	0x08006ef8
 8000678:	200000c0 	.word	0x200000c0
 800067c:	200000c4 	.word	0x200000c4
 8000680:	200000bc 	.word	0x200000bc
 8000684:	200000be 	.word	0x200000be
 8000688:	200000c2 	.word	0x200000c2

0800068c <setAddrWindow>:

// draw something: set addr window -> write to ram memory
// sets specific area on display to write pixels to
// x and y for upper left corner, w for width, h for height
void setAddrWindow(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SPI_HandleTypeDef *hspi) {
 800068c:	b5b0      	push	{r4, r5, r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	0005      	movs	r5, r0
 8000694:	000c      	movs	r4, r1
 8000696:	0010      	movs	r0, r2
 8000698:	0019      	movs	r1, r3
 800069a:	1dbb      	adds	r3, r7, #6
 800069c:	1c2a      	adds	r2, r5, #0
 800069e:	801a      	strh	r2, [r3, #0]
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	1c22      	adds	r2, r4, #0
 80006a4:	801a      	strh	r2, [r3, #0]
 80006a6:	1cbb      	adds	r3, r7, #2
 80006a8:	1c02      	adds	r2, r0, #0
 80006aa:	801a      	strh	r2, [r3, #0]
 80006ac:	003b      	movs	r3, r7
 80006ae:	1c0a      	adds	r2, r1, #0
 80006b0:	801a      	strh	r2, [r3, #0]
	// not really needed for our display
	x += _xstart;
 80006b2:	1dbb      	adds	r3, r7, #6
 80006b4:	1dba      	adds	r2, r7, #6
 80006b6:	8812      	ldrh	r2, [r2, #0]
 80006b8:	801a      	strh	r2, [r3, #0]
	y += _ystart;
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	1d3a      	adds	r2, r7, #4
 80006be:	8812      	ldrh	r2, [r2, #0]
 80006c0:	801a      	strh	r2, [r3, #0]

	uint8_t temp[4];
	temp[0] = (x & (0xFF00)) >> 8;
 80006c2:	1dbb      	adds	r3, r7, #6
 80006c4:	881b      	ldrh	r3, [r3, #0]
 80006c6:	0a1b      	lsrs	r3, r3, #8
 80006c8:	b29b      	uxth	r3, r3
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	210c      	movs	r1, #12
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	701a      	strb	r2, [r3, #0]
	temp[1] = x & (0xFF);
 80006d2:	1dbb      	adds	r3, r7, #6
 80006d4:	881b      	ldrh	r3, [r3, #0]
 80006d6:	b2da      	uxtb	r2, r3
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	705a      	strb	r2, [r3, #1]
	temp[2] = ((x+w-1) & (0xFF00)) >> 8;
 80006dc:	1dbb      	adds	r3, r7, #6
 80006de:	881a      	ldrh	r2, [r3, #0]
 80006e0:	1cbb      	adds	r3, r7, #2
 80006e2:	881b      	ldrh	r3, [r3, #0]
 80006e4:	18d3      	adds	r3, r2, r3
 80006e6:	3b01      	subs	r3, #1
 80006e8:	121b      	asrs	r3, r3, #8
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	709a      	strb	r2, [r3, #2]
	temp[3] = (x+w-1) & (0xFF);
 80006f0:	1dbb      	adds	r3, r7, #6
 80006f2:	881b      	ldrh	r3, [r3, #0]
 80006f4:	b2da      	uxtb	r2, r3
 80006f6:	1cbb      	adds	r3, r7, #2
 80006f8:	881b      	ldrh	r3, [r3, #0]
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	18d3      	adds	r3, r2, r3
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	3b01      	subs	r3, #1
 8000702:	b2da      	uxtb	r2, r3
 8000704:	187b      	adds	r3, r7, r1
 8000706:	70da      	strb	r2, [r3, #3]
	sendCommand(ST77XX_CASET, temp, 4, hspi);
 8000708:	6a3b      	ldr	r3, [r7, #32]
 800070a:	000c      	movs	r4, r1
 800070c:	1879      	adds	r1, r7, r1
 800070e:	2204      	movs	r2, #4
 8000710:	202a      	movs	r0, #42	; 0x2a
 8000712:	f7ff fea7 	bl	8000464 <sendCommand>

	temp[0] = (y & (0xFF00)) >> 8;
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	881b      	ldrh	r3, [r3, #0]
 800071a:	0a1b      	lsrs	r3, r3, #8
 800071c:	b29b      	uxth	r3, r3
 800071e:	b2da      	uxtb	r2, r3
 8000720:	0021      	movs	r1, r4
 8000722:	187b      	adds	r3, r7, r1
 8000724:	701a      	strb	r2, [r3, #0]
	temp[1] = y & (0xFF);
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	881b      	ldrh	r3, [r3, #0]
 800072a:	b2da      	uxtb	r2, r3
 800072c:	187b      	adds	r3, r7, r1
 800072e:	705a      	strb	r2, [r3, #1]
	temp[2] = ((y+h-1) & (0xFF00)) >> 8;
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	881a      	ldrh	r2, [r3, #0]
 8000734:	003b      	movs	r3, r7
 8000736:	881b      	ldrh	r3, [r3, #0]
 8000738:	18d3      	adds	r3, r2, r3
 800073a:	3b01      	subs	r3, #1
 800073c:	121b      	asrs	r3, r3, #8
 800073e:	b2da      	uxtb	r2, r3
 8000740:	187b      	adds	r3, r7, r1
 8000742:	709a      	strb	r2, [r3, #2]
	temp[3] = (y+h-1) & (0x00FF);
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	881b      	ldrh	r3, [r3, #0]
 8000748:	b2da      	uxtb	r2, r3
 800074a:	003b      	movs	r3, r7
 800074c:	881b      	ldrh	r3, [r3, #0]
 800074e:	b2db      	uxtb	r3, r3
 8000750:	18d3      	adds	r3, r2, r3
 8000752:	b2db      	uxtb	r3, r3
 8000754:	3b01      	subs	r3, #1
 8000756:	b2da      	uxtb	r2, r3
 8000758:	187b      	adds	r3, r7, r1
 800075a:	70da      	strb	r2, [r3, #3]
	sendCommand(ST77XX_RASET, temp, 4, hspi);
 800075c:	6a3b      	ldr	r3, [r7, #32]
 800075e:	1879      	adds	r1, r7, r1
 8000760:	2204      	movs	r2, #4
 8000762:	202b      	movs	r0, #43	; 0x2b
 8000764:	f7ff fe7e 	bl	8000464 <sendCommand>
}
 8000768:	46c0      	nop			; (mov r8, r8)
 800076a:	46bd      	mov	sp, r7
 800076c:	b004      	add	sp, #16
 800076e:	bdb0      	pop	{r4, r5, r7, pc}

08000770 <colorFixer>:
// 8-bit spi bus wants msb first; in array, lowest index is sent first
// because L4 is little-endian
//   for 16-bit value, it sends lower byte before upper byte
//   resulting in device thinking lower byte is upper byte
// this switches byte order around
uint16_t colorFixer(uint16_t color) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	0002      	movs	r2, r0
 8000778:	1dbb      	adds	r3, r7, #6
 800077a:	801a      	strh	r2, [r3, #0]
	uint8_t a = color & 0xFF;
 800077c:	210f      	movs	r1, #15
 800077e:	187b      	adds	r3, r7, r1
 8000780:	1dba      	adds	r2, r7, #6
 8000782:	8812      	ldrh	r2, [r2, #0]
 8000784:	701a      	strb	r2, [r3, #0]
	uint8_t b = (color & 0xFF00) >> 8;
 8000786:	1dbb      	adds	r3, r7, #6
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	0a1b      	lsrs	r3, r3, #8
 800078c:	b29a      	uxth	r2, r3
 800078e:	200e      	movs	r0, #14
 8000790:	183b      	adds	r3, r7, r0
 8000792:	701a      	strb	r2, [r3, #0]
	uint16_t ret = (a << 8) | b;
 8000794:	187b      	adds	r3, r7, r1
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	021b      	lsls	r3, r3, #8
 800079a:	b21a      	sxth	r2, r3
 800079c:	183b      	adds	r3, r7, r0
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	b21b      	sxth	r3, r3
 80007a2:	4313      	orrs	r3, r2
 80007a4:	b21a      	sxth	r2, r3
 80007a6:	210c      	movs	r1, #12
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	801a      	strh	r2, [r3, #0]

	return ret;
 80007ac:	187b      	adds	r3, r7, r1
 80007ae:	881b      	ldrh	r3, [r3, #0]
}
 80007b0:	0018      	movs	r0, r3
 80007b2:	46bd      	mov	sp, r7
 80007b4:	b004      	add	sp, #16
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <drawPixel>:

void drawPixel(uint8_t x, uint8_t y, uint16_t color, SPI_HandleTypeDef *hspi) {
 80007b8:	b590      	push	{r4, r7, lr}
 80007ba:	b087      	sub	sp, #28
 80007bc:	af02      	add	r7, sp, #8
 80007be:	0004      	movs	r4, r0
 80007c0:	0008      	movs	r0, r1
 80007c2:	0011      	movs	r1, r2
 80007c4:	603b      	str	r3, [r7, #0]
 80007c6:	1dfb      	adds	r3, r7, #7
 80007c8:	1c22      	adds	r2, r4, #0
 80007ca:	701a      	strb	r2, [r3, #0]
 80007cc:	1dbb      	adds	r3, r7, #6
 80007ce:	1c02      	adds	r2, r0, #0
 80007d0:	701a      	strb	r2, [r3, #0]
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	1c0a      	adds	r2, r1, #0
 80007d6:	801a      	strh	r2, [r3, #0]
	// bounds checking
	// just don't draw if pixel is out of bounds
	if ((x > WIDTH) || (x < 0) || (y > HEIGHT) || (y < 0)) return;
 80007d8:	1dfb      	adds	r3, r7, #7
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b80      	cmp	r3, #128	; 0x80
 80007de:	d820      	bhi.n	8000822 <drawPixel+0x6a>
 80007e0:	1dbb      	adds	r3, r7, #6
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	2ba0      	cmp	r3, #160	; 0xa0
 80007e6:	d81c      	bhi.n	8000822 <drawPixel+0x6a>

	setAddrWindow(x, y, 1, 1, hspi);
 80007e8:	1dfb      	adds	r3, r7, #7
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	b298      	uxth	r0, r3
 80007ee:	1dbb      	adds	r3, r7, #6
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	b299      	uxth	r1, r3
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	9300      	str	r3, [sp, #0]
 80007f8:	2301      	movs	r3, #1
 80007fa:	2201      	movs	r2, #1
 80007fc:	f7ff ff46 	bl	800068c <setAddrWindow>
	uint16_t tempColor = colorFixer(color);		// else we're using address of something passed by value
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	881b      	ldrh	r3, [r3, #0]
 8000804:	0018      	movs	r0, r3
 8000806:	f7ff ffb3 	bl	8000770 <colorFixer>
 800080a:	0003      	movs	r3, r0
 800080c:	001a      	movs	r2, r3
 800080e:	210e      	movs	r1, #14
 8000810:	187b      	adds	r3, r7, r1
 8000812:	801a      	strh	r2, [r3, #0]
	sendCommand(ST77XX_RAMWR, &tempColor, 2, hspi);
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	1879      	adds	r1, r7, r1
 8000818:	2202      	movs	r2, #2
 800081a:	202c      	movs	r0, #44	; 0x2c
 800081c:	f7ff fe22 	bl	8000464 <sendCommand>
 8000820:	e000      	b.n	8000824 <drawPixel+0x6c>
	if ((x > WIDTH) || (x < 0) || (y > HEIGHT) || (y < 0)) return;
 8000822:	46c0      	nop			; (mov r8, r8)
}
 8000824:	46bd      	mov	sp, r7
 8000826:	b005      	add	sp, #20
 8000828:	bd90      	pop	{r4, r7, pc}

0800082a <drawHLine>:

void drawHLine(uint8_t x, uint8_t y, uint8_t size, uint16_t color, SPI_HandleTypeDef *hspi) {
 800082a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800082c:	b091      	sub	sp, #68	; 0x44
 800082e:	af02      	add	r7, sp, #8
 8000830:	000c      	movs	r4, r1
 8000832:	0016      	movs	r6, r2
 8000834:	0019      	movs	r1, r3
 8000836:	2327      	movs	r3, #39	; 0x27
 8000838:	18fa      	adds	r2, r7, r3
 800083a:	1c03      	adds	r3, r0, #0
 800083c:	7013      	strb	r3, [r2, #0]
 800083e:	2326      	movs	r3, #38	; 0x26
 8000840:	18fb      	adds	r3, r7, r3
 8000842:	1c22      	adds	r2, r4, #0
 8000844:	701a      	strb	r2, [r3, #0]
 8000846:	2325      	movs	r3, #37	; 0x25
 8000848:	18fb      	adds	r3, r7, r3
 800084a:	1c32      	adds	r2, r6, #0
 800084c:	701a      	strb	r2, [r3, #0]
 800084e:	2322      	movs	r3, #34	; 0x22
 8000850:	18fb      	adds	r3, r7, r3
 8000852:	1c0a      	adds	r2, r1, #0
 8000854:	801a      	strh	r2, [r3, #0]
 8000856:	466b      	mov	r3, sp
 8000858:	001e      	movs	r6, r3
	// bounds checking
	if (x < 0) x = 0;						// don't set x out of bounds
	if (x > WIDTH) x = WIDTH;
 800085a:	2327      	movs	r3, #39	; 0x27
 800085c:	18fb      	adds	r3, r7, r3
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2b80      	cmp	r3, #128	; 0x80
 8000862:	d903      	bls.n	800086c <drawHLine+0x42>
 8000864:	2327      	movs	r3, #39	; 0x27
 8000866:	18fb      	adds	r3, r7, r3
 8000868:	2280      	movs	r2, #128	; 0x80
 800086a:	701a      	strb	r2, [r3, #0]
	if (x+size > WIDTH) size = WIDTH-x;		// don't set size so line draws out of bounds
 800086c:	2327      	movs	r3, #39	; 0x27
 800086e:	18fb      	adds	r3, r7, r3
 8000870:	781a      	ldrb	r2, [r3, #0]
 8000872:	2325      	movs	r3, #37	; 0x25
 8000874:	18fb      	adds	r3, r7, r3
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	18d3      	adds	r3, r2, r3
 800087a:	2b80      	cmp	r3, #128	; 0x80
 800087c:	dd08      	ble.n	8000890 <drawHLine+0x66>
 800087e:	2325      	movs	r3, #37	; 0x25
 8000880:	18fb      	adds	r3, r7, r3
 8000882:	2227      	movs	r2, #39	; 0x27
 8000884:	18ba      	adds	r2, r7, r2
 8000886:	7812      	ldrb	r2, [r2, #0]
 8000888:	2180      	movs	r1, #128	; 0x80
 800088a:	4249      	negs	r1, r1
 800088c:	1a8a      	subs	r2, r1, r2
 800088e:	701a      	strb	r2, [r3, #0]
	if (x+size < 0) size = 0-x;
	if ((y > HEIGHT) || (y < 0)) return;	// don't draw if y is out of bounds
 8000890:	2326      	movs	r3, #38	; 0x26
 8000892:	18fb      	adds	r3, r7, r3
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	2ba0      	cmp	r3, #160	; 0xa0
 8000898:	d868      	bhi.n	800096c <drawHLine+0x142>

	setAddrWindow(x, y, size, 1, hspi);
 800089a:	2327      	movs	r3, #39	; 0x27
 800089c:	18fb      	adds	r3, r7, r3
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	b298      	uxth	r0, r3
 80008a2:	2326      	movs	r3, #38	; 0x26
 80008a4:	18fb      	adds	r3, r7, r3
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	b299      	uxth	r1, r3
 80008aa:	2325      	movs	r3, #37	; 0x25
 80008ac:	18fb      	adds	r3, r7, r3
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	b29a      	uxth	r2, r3
 80008b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80008b4:	9300      	str	r3, [sp, #0]
 80008b6:	2301      	movs	r3, #1
 80008b8:	f7ff fee8 	bl	800068c <setAddrWindow>
	uint16_t colors[size];
 80008bc:	2325      	movs	r3, #37	; 0x25
 80008be:	18fb      	adds	r3, r7, r3
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	001a      	movs	r2, r3
 80008c4:	3a01      	subs	r2, #1
 80008c6:	633a      	str	r2, [r7, #48]	; 0x30
 80008c8:	60bb      	str	r3, [r7, #8]
 80008ca:	2200      	movs	r2, #0
 80008cc:	60fa      	str	r2, [r7, #12]
 80008ce:	68b8      	ldr	r0, [r7, #8]
 80008d0:	68f9      	ldr	r1, [r7, #12]
 80008d2:	0002      	movs	r2, r0
 80008d4:	0f12      	lsrs	r2, r2, #28
 80008d6:	000c      	movs	r4, r1
 80008d8:	0124      	lsls	r4, r4, #4
 80008da:	61fc      	str	r4, [r7, #28]
 80008dc:	69fc      	ldr	r4, [r7, #28]
 80008de:	4314      	orrs	r4, r2
 80008e0:	61fc      	str	r4, [r7, #28]
 80008e2:	0002      	movs	r2, r0
 80008e4:	0112      	lsls	r2, r2, #4
 80008e6:	61ba      	str	r2, [r7, #24]
 80008e8:	603b      	str	r3, [r7, #0]
 80008ea:	2200      	movs	r2, #0
 80008ec:	607a      	str	r2, [r7, #4]
 80008ee:	6838      	ldr	r0, [r7, #0]
 80008f0:	6879      	ldr	r1, [r7, #4]
 80008f2:	0002      	movs	r2, r0
 80008f4:	0f12      	lsrs	r2, r2, #28
 80008f6:	000c      	movs	r4, r1
 80008f8:	0124      	lsls	r4, r4, #4
 80008fa:	617c      	str	r4, [r7, #20]
 80008fc:	697c      	ldr	r4, [r7, #20]
 80008fe:	4314      	orrs	r4, r2
 8000900:	617c      	str	r4, [r7, #20]
 8000902:	0002      	movs	r2, r0
 8000904:	0112      	lsls	r2, r2, #4
 8000906:	613a      	str	r2, [r7, #16]
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	3301      	adds	r3, #1
 800090c:	3307      	adds	r3, #7
 800090e:	08db      	lsrs	r3, r3, #3
 8000910:	00db      	lsls	r3, r3, #3
 8000912:	466a      	mov	r2, sp
 8000914:	1ad3      	subs	r3, r2, r3
 8000916:	469d      	mov	sp, r3
 8000918:	ab02      	add	r3, sp, #8
 800091a:	3301      	adds	r3, #1
 800091c:	085b      	lsrs	r3, r3, #1
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i < size; i++) {		// better way to make array of 1 color; SPI without moving address of sent?
 8000922:	2300      	movs	r3, #0
 8000924:	637b      	str	r3, [r7, #52]	; 0x34
 8000926:	e00e      	b.n	8000946 <drawHLine+0x11c>
		colors[i] = colorFixer(color);
 8000928:	2322      	movs	r3, #34	; 0x22
 800092a:	18fb      	adds	r3, r7, r3
 800092c:	881b      	ldrh	r3, [r3, #0]
 800092e:	0018      	movs	r0, r3
 8000930:	f7ff ff1e 	bl	8000770 <colorFixer>
 8000934:	0003      	movs	r3, r0
 8000936:	0019      	movs	r1, r3
 8000938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800093a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800093c:	0052      	lsls	r2, r2, #1
 800093e:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < size; i++) {		// better way to make array of 1 color; SPI without moving address of sent?
 8000940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000942:	3301      	adds	r3, #1
 8000944:	637b      	str	r3, [r7, #52]	; 0x34
 8000946:	2325      	movs	r3, #37	; 0x25
 8000948:	18fb      	adds	r3, r7, r3
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800094e:	429a      	cmp	r2, r3
 8000950:	dbea      	blt.n	8000928 <drawHLine+0xfe>
//		colors[i] = color;
	}

	sendCommand(ST77XX_RAMWR, colors, size*2, hspi);
 8000952:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000954:	2325      	movs	r3, #37	; 0x25
 8000956:	18fb      	adds	r3, r7, r3
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	b29b      	uxth	r3, r3
 800095c:	18db      	adds	r3, r3, r3
 800095e:	b29a      	uxth	r2, r3
 8000960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000962:	202c      	movs	r0, #44	; 0x2c
 8000964:	f7ff fd7e 	bl	8000464 <sendCommand>
 8000968:	46b5      	mov	sp, r6
 800096a:	e001      	b.n	8000970 <drawHLine+0x146>
	if ((y > HEIGHT) || (y < 0)) return;	// don't draw if y is out of bounds
 800096c:	46c0      	nop			; (mov r8, r8)
 800096e:	46b5      	mov	sp, r6
}
 8000970:	46bd      	mov	sp, r7
 8000972:	b00f      	add	sp, #60	; 0x3c
 8000974:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000976 <drawVLine>:

void drawVLine(uint8_t x, uint8_t y, uint8_t size, uint16_t color, SPI_HandleTypeDef *hspi) {
 8000976:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000978:	b091      	sub	sp, #68	; 0x44
 800097a:	af02      	add	r7, sp, #8
 800097c:	000c      	movs	r4, r1
 800097e:	0016      	movs	r6, r2
 8000980:	0019      	movs	r1, r3
 8000982:	2327      	movs	r3, #39	; 0x27
 8000984:	18fa      	adds	r2, r7, r3
 8000986:	1c03      	adds	r3, r0, #0
 8000988:	7013      	strb	r3, [r2, #0]
 800098a:	2326      	movs	r3, #38	; 0x26
 800098c:	18fb      	adds	r3, r7, r3
 800098e:	1c22      	adds	r2, r4, #0
 8000990:	701a      	strb	r2, [r3, #0]
 8000992:	2325      	movs	r3, #37	; 0x25
 8000994:	18fb      	adds	r3, r7, r3
 8000996:	1c32      	adds	r2, r6, #0
 8000998:	701a      	strb	r2, [r3, #0]
 800099a:	2322      	movs	r3, #34	; 0x22
 800099c:	18fb      	adds	r3, r7, r3
 800099e:	1c0a      	adds	r2, r1, #0
 80009a0:	801a      	strh	r2, [r3, #0]
 80009a2:	466b      	mov	r3, sp
 80009a4:	001e      	movs	r6, r3
	// bounds checking
	if (y < 0) y = 0;						// don't set x out of bounds
	if (y > HEIGHT) y = HEIGHT;
 80009a6:	2326      	movs	r3, #38	; 0x26
 80009a8:	18fb      	adds	r3, r7, r3
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2ba0      	cmp	r3, #160	; 0xa0
 80009ae:	d903      	bls.n	80009b8 <drawVLine+0x42>
 80009b0:	2326      	movs	r3, #38	; 0x26
 80009b2:	18fb      	adds	r3, r7, r3
 80009b4:	22a0      	movs	r2, #160	; 0xa0
 80009b6:	701a      	strb	r2, [r3, #0]
	if (y+size > HEIGHT) size = HEIGHT-y;	// don't set size so line draws out of bounds
 80009b8:	2326      	movs	r3, #38	; 0x26
 80009ba:	18fb      	adds	r3, r7, r3
 80009bc:	781a      	ldrb	r2, [r3, #0]
 80009be:	2325      	movs	r3, #37	; 0x25
 80009c0:	18fb      	adds	r3, r7, r3
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	18d3      	adds	r3, r2, r3
 80009c6:	2ba0      	cmp	r3, #160	; 0xa0
 80009c8:	dd08      	ble.n	80009dc <drawVLine+0x66>
 80009ca:	2325      	movs	r3, #37	; 0x25
 80009cc:	18fb      	adds	r3, r7, r3
 80009ce:	2226      	movs	r2, #38	; 0x26
 80009d0:	18ba      	adds	r2, r7, r2
 80009d2:	7812      	ldrb	r2, [r2, #0]
 80009d4:	2160      	movs	r1, #96	; 0x60
 80009d6:	4249      	negs	r1, r1
 80009d8:	1a8a      	subs	r2, r1, r2
 80009da:	701a      	strb	r2, [r3, #0]
	if (y+size < 0) size = 0-y;
	if ((x > WIDTH) || (x < 0)) return;		// don't draw if x is out of bounds
 80009dc:	2327      	movs	r3, #39	; 0x27
 80009de:	18fb      	adds	r3, r7, r3
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	2b80      	cmp	r3, #128	; 0x80
 80009e4:	d869      	bhi.n	8000aba <drawVLine+0x144>

	setAddrWindow(x, y, 1, size, hspi);
 80009e6:	2327      	movs	r3, #39	; 0x27
 80009e8:	18fb      	adds	r3, r7, r3
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	b298      	uxth	r0, r3
 80009ee:	2326      	movs	r3, #38	; 0x26
 80009f0:	18fb      	adds	r3, r7, r3
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	b299      	uxth	r1, r3
 80009f6:	2325      	movs	r3, #37	; 0x25
 80009f8:	18fb      	adds	r3, r7, r3
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	b29a      	uxth	r2, r3
 80009fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a00:	9300      	str	r3, [sp, #0]
 8000a02:	0013      	movs	r3, r2
 8000a04:	2201      	movs	r2, #1
 8000a06:	f7ff fe41 	bl	800068c <setAddrWindow>
	uint16_t colors[size];
 8000a0a:	2325      	movs	r3, #37	; 0x25
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	001a      	movs	r2, r3
 8000a12:	3a01      	subs	r2, #1
 8000a14:	633a      	str	r2, [r7, #48]	; 0x30
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	2200      	movs	r2, #0
 8000a1a:	60fa      	str	r2, [r7, #12]
 8000a1c:	68b8      	ldr	r0, [r7, #8]
 8000a1e:	68f9      	ldr	r1, [r7, #12]
 8000a20:	0002      	movs	r2, r0
 8000a22:	0f12      	lsrs	r2, r2, #28
 8000a24:	000c      	movs	r4, r1
 8000a26:	0124      	lsls	r4, r4, #4
 8000a28:	61fc      	str	r4, [r7, #28]
 8000a2a:	69fc      	ldr	r4, [r7, #28]
 8000a2c:	4314      	orrs	r4, r2
 8000a2e:	61fc      	str	r4, [r7, #28]
 8000a30:	0002      	movs	r2, r0
 8000a32:	0112      	lsls	r2, r2, #4
 8000a34:	61ba      	str	r2, [r7, #24]
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	2200      	movs	r2, #0
 8000a3a:	607a      	str	r2, [r7, #4]
 8000a3c:	6838      	ldr	r0, [r7, #0]
 8000a3e:	6879      	ldr	r1, [r7, #4]
 8000a40:	0002      	movs	r2, r0
 8000a42:	0f12      	lsrs	r2, r2, #28
 8000a44:	000c      	movs	r4, r1
 8000a46:	0124      	lsls	r4, r4, #4
 8000a48:	617c      	str	r4, [r7, #20]
 8000a4a:	697c      	ldr	r4, [r7, #20]
 8000a4c:	4314      	orrs	r4, r2
 8000a4e:	617c      	str	r4, [r7, #20]
 8000a50:	0002      	movs	r2, r0
 8000a52:	0112      	lsls	r2, r2, #4
 8000a54:	613a      	str	r2, [r7, #16]
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	3301      	adds	r3, #1
 8000a5a:	3307      	adds	r3, #7
 8000a5c:	08db      	lsrs	r3, r3, #3
 8000a5e:	00db      	lsls	r3, r3, #3
 8000a60:	466a      	mov	r2, sp
 8000a62:	1ad3      	subs	r3, r2, r3
 8000a64:	469d      	mov	sp, r3
 8000a66:	ab02      	add	r3, sp, #8
 8000a68:	3301      	adds	r3, #1
 8000a6a:	085b      	lsrs	r3, r3, #1
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i < size; i++) {		// there has to be a better way to make array of 1 color
 8000a70:	2300      	movs	r3, #0
 8000a72:	637b      	str	r3, [r7, #52]	; 0x34
 8000a74:	e00e      	b.n	8000a94 <drawVLine+0x11e>
											// SPI without moving address of sent buffer?
		colors[i] = colorFixer(color);
 8000a76:	2322      	movs	r3, #34	; 0x22
 8000a78:	18fb      	adds	r3, r7, r3
 8000a7a:	881b      	ldrh	r3, [r3, #0]
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f7ff fe77 	bl	8000770 <colorFixer>
 8000a82:	0003      	movs	r3, r0
 8000a84:	0019      	movs	r1, r3
 8000a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a8a:	0052      	lsls	r2, r2, #1
 8000a8c:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < size; i++) {		// there has to be a better way to make array of 1 color
 8000a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a90:	3301      	adds	r3, #1
 8000a92:	637b      	str	r3, [r7, #52]	; 0x34
 8000a94:	2325      	movs	r3, #37	; 0x25
 8000a96:	18fb      	adds	r3, r7, r3
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	dbea      	blt.n	8000a76 <drawVLine+0x100>
	}

	sendCommand(ST77XX_RAMWR, colors, size*2, hspi);
 8000aa0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000aa2:	2325      	movs	r3, #37	; 0x25
 8000aa4:	18fb      	adds	r3, r7, r3
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	b29b      	uxth	r3, r3
 8000aaa:	18db      	adds	r3, r3, r3
 8000aac:	b29a      	uxth	r2, r3
 8000aae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ab0:	202c      	movs	r0, #44	; 0x2c
 8000ab2:	f7ff fcd7 	bl	8000464 <sendCommand>
 8000ab6:	46b5      	mov	sp, r6
 8000ab8:	e001      	b.n	8000abe <drawVLine+0x148>
	if ((x > WIDTH) || (x < 0)) return;		// don't draw if x is out of bounds
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	46b5      	mov	sp, r6
}
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	b00f      	add	sp, #60	; 0x3c
 8000ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ac4 <fillRect>:
	drawHLine(x, y+h-1, w, color, hspi);
	drawVLine(x, y, h, color, hspi);
	drawVLine(x+w-1, y, h, color, hspi);
}

void fillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t color, SPI_HandleTypeDef *hspi) {
 8000ac4:	b5b0      	push	{r4, r5, r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af02      	add	r7, sp, #8
 8000aca:	0005      	movs	r5, r0
 8000acc:	000c      	movs	r4, r1
 8000ace:	0010      	movs	r0, r2
 8000ad0:	0019      	movs	r1, r3
 8000ad2:	1dfb      	adds	r3, r7, #7
 8000ad4:	1c2a      	adds	r2, r5, #0
 8000ad6:	701a      	strb	r2, [r3, #0]
 8000ad8:	1dbb      	adds	r3, r7, #6
 8000ada:	1c22      	adds	r2, r4, #0
 8000adc:	701a      	strb	r2, [r3, #0]
 8000ade:	1d7b      	adds	r3, r7, #5
 8000ae0:	1c02      	adds	r2, r0, #0
 8000ae2:	701a      	strb	r2, [r3, #0]
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	1c0a      	adds	r2, r1, #0
 8000ae8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < h; i++) {
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	e014      	b.n	8000b1a <fillRect+0x56>
		drawHLine(x, y+i, w, color, hspi);
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	1dbb      	adds	r3, r7, #6
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	18d3      	adds	r3, r2, r3
 8000afa:	b2d9      	uxtb	r1, r3
 8000afc:	2320      	movs	r3, #32
 8000afe:	18fb      	adds	r3, r7, r3
 8000b00:	881c      	ldrh	r4, [r3, #0]
 8000b02:	1d7b      	adds	r3, r7, #5
 8000b04:	781a      	ldrb	r2, [r3, #0]
 8000b06:	1dfb      	adds	r3, r7, #7
 8000b08:	7818      	ldrb	r0, [r3, #0]
 8000b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0c:	9300      	str	r3, [sp, #0]
 8000b0e:	0023      	movs	r3, r4
 8000b10:	f7ff fe8b 	bl	800082a <drawHLine>
	for (int i = 0; i < h; i++) {
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	3301      	adds	r3, #1
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	68fa      	ldr	r2, [r7, #12]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	dbe5      	blt.n	8000af0 <fillRect+0x2c>
	}
}
 8000b24:	46c0      	nop			; (mov r8, r8)
 8000b26:	46bd      	mov	sp, r7
 8000b28:	b004      	add	sp, #16
 8000b2a:	bdb0      	pop	{r4, r5, r7, pc}

08000b2c <fillScreen>:

void fillScreen(uint16_t color, SPI_HandleTypeDef *hspi) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af02      	add	r7, sp, #8
 8000b32:	0002      	movs	r2, r0
 8000b34:	6039      	str	r1, [r7, #0]
 8000b36:	1dbb      	adds	r3, r7, #6
 8000b38:	801a      	strh	r2, [r3, #0]
	fillRect(0, 0, WIDTH, HEIGHT, color, hspi);
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	9301      	str	r3, [sp, #4]
 8000b3e:	1dbb      	adds	r3, r7, #6
 8000b40:	881b      	ldrh	r3, [r3, #0]
 8000b42:	9300      	str	r3, [sp, #0]
 8000b44:	23a0      	movs	r3, #160	; 0xa0
 8000b46:	2280      	movs	r2, #128	; 0x80
 8000b48:	2100      	movs	r1, #0
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	f7ff ffba 	bl	8000ac4 <fillRect>
}
 8000b50:	46c0      	nop			; (mov r8, r8)
 8000b52:	46bd      	mov	sp, r7
 8000b54:	b002      	add	sp, #8
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <drawChar>:
// ---- end of basic shapes and lines ----

// ---- text functions ----
//void drawChar(uint8_t x, uint8_t y, uint8_t ch, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y, SPI_HandleTypeDef *hspi) {
void drawChar(uint8_t ch, SPI_HandleTypeDef *hspi) {
 8000b58:	b5b0      	push	{r4, r5, r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af02      	add	r7, sp, #8
 8000b5e:	0002      	movs	r2, r0
 8000b60:	6039      	str	r1, [r7, #0]
 8000b62:	1dfb      	adds	r3, r7, #7
 8000b64:	701a      	strb	r2, [r3, #0]
//	   ((y + 8 * size_y - 1) < 0))   // Clip top
//		return;

//	if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

	for (int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 8000b66:	230f      	movs	r3, #15
 8000b68:	18fb      	adds	r3, r7, r3
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	701a      	strb	r2, [r3, #0]
 8000b6e:	e0b5      	b.n	8000cdc <drawChar+0x184>
		uint8_t line = font[ch*5+i];
 8000b70:	1dfb      	adds	r3, r7, #7
 8000b72:	781a      	ldrb	r2, [r3, #0]
 8000b74:	0013      	movs	r3, r2
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	189a      	adds	r2, r3, r2
 8000b7a:	230f      	movs	r3, #15
 8000b7c:	18fb      	adds	r3, r7, r3
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	b25b      	sxtb	r3, r3
 8000b82:	18d2      	adds	r2, r2, r3
 8000b84:	230e      	movs	r3, #14
 8000b86:	18fb      	adds	r3, r7, r3
 8000b88:	4974      	ldr	r1, [pc, #464]	; (8000d5c <drawChar+0x204>)
 8000b8a:	5c8a      	ldrb	r2, [r1, r2]
 8000b8c:	701a      	strb	r2, [r3, #0]
		for (int8_t j=0; j<8; j++, line >>= 1) {
 8000b8e:	230d      	movs	r3, #13
 8000b90:	18fb      	adds	r3, r7, r3
 8000b92:	2200      	movs	r2, #0
 8000b94:	701a      	strb	r2, [r3, #0]
 8000b96:	e091      	b.n	8000cbc <drawChar+0x164>
			if (line & 1) {
 8000b98:	230e      	movs	r3, #14
 8000b9a:	18fb      	adds	r3, r7, r3
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	d03b      	beq.n	8000c1c <drawChar+0xc4>
				if (textSize == 1)
 8000ba4:	4b6e      	ldr	r3, [pc, #440]	; (8000d60 <drawChar+0x208>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d113      	bne.n	8000bd4 <drawChar+0x7c>
					drawPixel(cursorX+i, cursorY+j, textColor, hspi);
 8000bac:	4b6d      	ldr	r3, [pc, #436]	; (8000d64 <drawChar+0x20c>)
 8000bae:	781a      	ldrb	r2, [r3, #0]
 8000bb0:	230f      	movs	r3, #15
 8000bb2:	18fb      	adds	r3, r7, r3
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	18d3      	adds	r3, r2, r3
 8000bb8:	b2d8      	uxtb	r0, r3
 8000bba:	4b6b      	ldr	r3, [pc, #428]	; (8000d68 <drawChar+0x210>)
 8000bbc:	781a      	ldrb	r2, [r3, #0]
 8000bbe:	230d      	movs	r3, #13
 8000bc0:	18fb      	adds	r3, r7, r3
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	18d3      	adds	r3, r2, r3
 8000bc6:	b2d9      	uxtb	r1, r3
 8000bc8:	4b68      	ldr	r3, [pc, #416]	; (8000d6c <drawChar+0x214>)
 8000bca:	881a      	ldrh	r2, [r3, #0]
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	f7ff fdf3 	bl	80007b8 <drawPixel>
 8000bd2:	e064      	b.n	8000c9e <drawChar+0x146>
				else
					fillRect(cursorX+i*textSize, cursorY+j*textSize, textSize, textSize, textColor, hspi);
 8000bd4:	230f      	movs	r3, #15
 8000bd6:	18fb      	adds	r3, r7, r3
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	4a61      	ldr	r2, [pc, #388]	; (8000d60 <drawChar+0x208>)
 8000bdc:	7812      	ldrb	r2, [r2, #0]
 8000bde:	4353      	muls	r3, r2
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	4b60      	ldr	r3, [pc, #384]	; (8000d64 <drawChar+0x20c>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	18d3      	adds	r3, r2, r3
 8000be8:	b2d8      	uxtb	r0, r3
 8000bea:	230d      	movs	r3, #13
 8000bec:	18fb      	adds	r3, r7, r3
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	4a5b      	ldr	r2, [pc, #364]	; (8000d60 <drawChar+0x208>)
 8000bf2:	7812      	ldrb	r2, [r2, #0]
 8000bf4:	4353      	muls	r3, r2
 8000bf6:	b2da      	uxtb	r2, r3
 8000bf8:	4b5b      	ldr	r3, [pc, #364]	; (8000d68 <drawChar+0x210>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	18d3      	adds	r3, r2, r3
 8000bfe:	b2d9      	uxtb	r1, r3
 8000c00:	4b57      	ldr	r3, [pc, #348]	; (8000d60 <drawChar+0x208>)
 8000c02:	781c      	ldrb	r4, [r3, #0]
 8000c04:	4b56      	ldr	r3, [pc, #344]	; (8000d60 <drawChar+0x208>)
 8000c06:	781d      	ldrb	r5, [r3, #0]
 8000c08:	4b58      	ldr	r3, [pc, #352]	; (8000d6c <drawChar+0x214>)
 8000c0a:	881b      	ldrh	r3, [r3, #0]
 8000c0c:	683a      	ldr	r2, [r7, #0]
 8000c0e:	9201      	str	r2, [sp, #4]
 8000c10:	9300      	str	r3, [sp, #0]
 8000c12:	002b      	movs	r3, r5
 8000c14:	0022      	movs	r2, r4
 8000c16:	f7ff ff55 	bl	8000ac4 <fillRect>
 8000c1a:	e040      	b.n	8000c9e <drawChar+0x146>
			} else if (bg != textColor) {
 8000c1c:	4b54      	ldr	r3, [pc, #336]	; (8000d70 <drawChar+0x218>)
 8000c1e:	881a      	ldrh	r2, [r3, #0]
 8000c20:	4b52      	ldr	r3, [pc, #328]	; (8000d6c <drawChar+0x214>)
 8000c22:	881b      	ldrh	r3, [r3, #0]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d03a      	beq.n	8000c9e <drawChar+0x146>
				if (textSize == 1)
 8000c28:	4b4d      	ldr	r3, [pc, #308]	; (8000d60 <drawChar+0x208>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d113      	bne.n	8000c58 <drawChar+0x100>
					drawPixel(cursorX+i, cursorY+j, bg, hspi);
 8000c30:	4b4c      	ldr	r3, [pc, #304]	; (8000d64 <drawChar+0x20c>)
 8000c32:	781a      	ldrb	r2, [r3, #0]
 8000c34:	230f      	movs	r3, #15
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	18d3      	adds	r3, r2, r3
 8000c3c:	b2d8      	uxtb	r0, r3
 8000c3e:	4b4a      	ldr	r3, [pc, #296]	; (8000d68 <drawChar+0x210>)
 8000c40:	781a      	ldrb	r2, [r3, #0]
 8000c42:	230d      	movs	r3, #13
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	18d3      	adds	r3, r2, r3
 8000c4a:	b2d9      	uxtb	r1, r3
 8000c4c:	4b48      	ldr	r3, [pc, #288]	; (8000d70 <drawChar+0x218>)
 8000c4e:	881a      	ldrh	r2, [r3, #0]
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	f7ff fdb1 	bl	80007b8 <drawPixel>
 8000c56:	e022      	b.n	8000c9e <drawChar+0x146>
				else
					fillRect(cursorX+i*textSize, cursorY+j*textSize, textSize, textSize, bg, hspi);
 8000c58:	230f      	movs	r3, #15
 8000c5a:	18fb      	adds	r3, r7, r3
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	4a40      	ldr	r2, [pc, #256]	; (8000d60 <drawChar+0x208>)
 8000c60:	7812      	ldrb	r2, [r2, #0]
 8000c62:	4353      	muls	r3, r2
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	4b3f      	ldr	r3, [pc, #252]	; (8000d64 <drawChar+0x20c>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	18d3      	adds	r3, r2, r3
 8000c6c:	b2d8      	uxtb	r0, r3
 8000c6e:	230d      	movs	r3, #13
 8000c70:	18fb      	adds	r3, r7, r3
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	4a3a      	ldr	r2, [pc, #232]	; (8000d60 <drawChar+0x208>)
 8000c76:	7812      	ldrb	r2, [r2, #0]
 8000c78:	4353      	muls	r3, r2
 8000c7a:	b2da      	uxtb	r2, r3
 8000c7c:	4b3a      	ldr	r3, [pc, #232]	; (8000d68 <drawChar+0x210>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	18d3      	adds	r3, r2, r3
 8000c82:	b2d9      	uxtb	r1, r3
 8000c84:	4b36      	ldr	r3, [pc, #216]	; (8000d60 <drawChar+0x208>)
 8000c86:	781c      	ldrb	r4, [r3, #0]
 8000c88:	4b35      	ldr	r3, [pc, #212]	; (8000d60 <drawChar+0x208>)
 8000c8a:	781d      	ldrb	r5, [r3, #0]
 8000c8c:	4b38      	ldr	r3, [pc, #224]	; (8000d70 <drawChar+0x218>)
 8000c8e:	881b      	ldrh	r3, [r3, #0]
 8000c90:	683a      	ldr	r2, [r7, #0]
 8000c92:	9201      	str	r2, [sp, #4]
 8000c94:	9300      	str	r3, [sp, #0]
 8000c96:	002b      	movs	r3, r5
 8000c98:	0022      	movs	r2, r4
 8000c9a:	f7ff ff13 	bl	8000ac4 <fillRect>
		for (int8_t j=0; j<8; j++, line >>= 1) {
 8000c9e:	210d      	movs	r1, #13
 8000ca0:	187b      	adds	r3, r7, r1
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	b25b      	sxtb	r3, r3
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	3301      	adds	r3, #1
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	187b      	adds	r3, r7, r1
 8000cae:	701a      	strb	r2, [r3, #0]
 8000cb0:	220e      	movs	r2, #14
 8000cb2:	18bb      	adds	r3, r7, r2
 8000cb4:	18ba      	adds	r2, r7, r2
 8000cb6:	7812      	ldrb	r2, [r2, #0]
 8000cb8:	0852      	lsrs	r2, r2, #1
 8000cba:	701a      	strb	r2, [r3, #0]
 8000cbc:	230d      	movs	r3, #13
 8000cbe:	18fb      	adds	r3, r7, r3
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	b25b      	sxtb	r3, r3
 8000cc4:	2b07      	cmp	r3, #7
 8000cc6:	dc00      	bgt.n	8000cca <drawChar+0x172>
 8000cc8:	e766      	b.n	8000b98 <drawChar+0x40>
	for (int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 8000cca:	210f      	movs	r1, #15
 8000ccc:	187b      	adds	r3, r7, r1
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	b25b      	sxtb	r3, r3
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	187b      	adds	r3, r7, r1
 8000cda:	701a      	strb	r2, [r3, #0]
 8000cdc:	230f      	movs	r3, #15
 8000cde:	18fb      	adds	r3, r7, r3
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	b25b      	sxtb	r3, r3
 8000ce4:	2b04      	cmp	r3, #4
 8000ce6:	dc00      	bgt.n	8000cea <drawChar+0x192>
 8000ce8:	e742      	b.n	8000b70 <drawChar+0x18>
			}
		}
	}

	// 6wx8h char. this is 6th column, since it's always blank for kerning
	if (bg != textColor) { // If opaque, draw vertical line for last column
 8000cea:	4b21      	ldr	r3, [pc, #132]	; (8000d70 <drawChar+0x218>)
 8000cec:	881a      	ldrh	r2, [r3, #0]
 8000cee:	4b1f      	ldr	r3, [pc, #124]	; (8000d6c <drawChar+0x214>)
 8000cf0:	881b      	ldrh	r3, [r3, #0]
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d02d      	beq.n	8000d52 <drawChar+0x1fa>
		if (textSize == 1) drawVLine(cursorX+5, cursorY, 8, bg, hspi);
 8000cf6:	4b1a      	ldr	r3, [pc, #104]	; (8000d60 <drawChar+0x208>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d10e      	bne.n	8000d1c <drawChar+0x1c4>
 8000cfe:	4b19      	ldr	r3, [pc, #100]	; (8000d64 <drawChar+0x20c>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	3305      	adds	r3, #5
 8000d04:	b2d8      	uxtb	r0, r3
 8000d06:	4b18      	ldr	r3, [pc, #96]	; (8000d68 <drawChar+0x210>)
 8000d08:	7819      	ldrb	r1, [r3, #0]
 8000d0a:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <drawChar+0x218>)
 8000d0c:	881a      	ldrh	r2, [r3, #0]
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	0013      	movs	r3, r2
 8000d14:	2208      	movs	r2, #8
 8000d16:	f7ff fe2e 	bl	8000976 <drawVLine>
		else fillRect(cursorX+5*textSize, cursorY, textSize, 8*textSize, bg, hspi);
	}
}
 8000d1a:	e01a      	b.n	8000d52 <drawChar+0x1fa>
		else fillRect(cursorX+5*textSize, cursorY, textSize, 8*textSize, bg, hspi);
 8000d1c:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <drawChar+0x208>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	1c1a      	adds	r2, r3, #0
 8000d22:	0092      	lsls	r2, r2, #2
 8000d24:	18d3      	adds	r3, r2, r3
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <drawChar+0x20c>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	18d3      	adds	r3, r2, r3
 8000d2e:	b2d8      	uxtb	r0, r3
 8000d30:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <drawChar+0x210>)
 8000d32:	7819      	ldrb	r1, [r3, #0]
 8000d34:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <drawChar+0x208>)
 8000d36:	781c      	ldrb	r4, [r3, #0]
 8000d38:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <drawChar+0x208>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	00db      	lsls	r3, r3, #3
 8000d3e:	b2dd      	uxtb	r5, r3
 8000d40:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <drawChar+0x218>)
 8000d42:	881b      	ldrh	r3, [r3, #0]
 8000d44:	683a      	ldr	r2, [r7, #0]
 8000d46:	9201      	str	r2, [sp, #4]
 8000d48:	9300      	str	r3, [sp, #0]
 8000d4a:	002b      	movs	r3, r5
 8000d4c:	0022      	movs	r2, r4
 8000d4e:	f7ff feb9 	bl	8000ac4 <fillRect>
}
 8000d52:	46c0      	nop			; (mov r8, r8)
 8000d54:	46bd      	mov	sp, r7
 8000d56:	b004      	add	sp, #16
 8000d58:	bdb0      	pop	{r4, r5, r7, pc}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	08006fc8 	.word	0x08006fc8
 8000d60:	200000bc 	.word	0x200000bc
 8000d64:	200000c0 	.word	0x200000c0
 8000d68:	200000c4 	.word	0x200000c4
 8000d6c:	200000be 	.word	0x200000be
 8000d70:	200000c2 	.word	0x200000c2

08000d74 <drawTextAt>:
	for (int i = 0; str[i] != '\0'; i++) {
		drawChar(str[i], hspi);
	}
}

void drawTextAt(uint8_t x, uint8_t y, char *str, SPI_HandleTypeDef *hspi) {
 8000d74:	b590      	push	{r4, r7, lr}
 8000d76:	b087      	sub	sp, #28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60ba      	str	r2, [r7, #8]
 8000d7c:	607b      	str	r3, [r7, #4]
 8000d7e:	240f      	movs	r4, #15
 8000d80:	193b      	adds	r3, r7, r4
 8000d82:	1c02      	adds	r2, r0, #0
 8000d84:	701a      	strb	r2, [r3, #0]
 8000d86:	200e      	movs	r0, #14
 8000d88:	183b      	adds	r3, r7, r0
 8000d8a:	1c0a      	adds	r2, r1, #0
 8000d8c:	701a      	strb	r2, [r3, #0]
	// add text wrap
	int i = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
	setCursor(x,y);
 8000d92:	183b      	adds	r3, r7, r0
 8000d94:	781a      	ldrb	r2, [r3, #0]
 8000d96:	193b      	adds	r3, r7, r4
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	0011      	movs	r1, r2
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	f000 f831 	bl	8000e04 <setCursor>
	for (i = 0; str[i] != '\0'; i++) {
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	e01d      	b.n	8000de4 <drawTextAt+0x70>
		drawChar(str[i], hspi);
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	68ba      	ldr	r2, [r7, #8]
 8000dac:	18d3      	adds	r3, r2, r3
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	0011      	movs	r1, r2
 8000db4:	0018      	movs	r0, r3
 8000db6:	f7ff fecf 	bl	8000b58 <drawChar>
		setCursor(cursorX+textSize*6, cursorY);
 8000dba:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <drawTextAt+0x84>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	1c1a      	adds	r2, r3, #0
 8000dc0:	1c13      	adds	r3, r2, #0
 8000dc2:	18db      	adds	r3, r3, r3
 8000dc4:	189b      	adds	r3, r3, r2
 8000dc6:	18db      	adds	r3, r3, r3
 8000dc8:	b2da      	uxtb	r2, r3
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <drawTextAt+0x88>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	18d3      	adds	r3, r2, r3
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <drawTextAt+0x8c>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	0019      	movs	r1, r3
 8000dd8:	0010      	movs	r0, r2
 8000dda:	f000 f813 	bl	8000e04 <setCursor>
	for (i = 0; str[i] != '\0'; i++) {
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	3301      	adds	r3, #1
 8000de2:	617b      	str	r3, [r7, #20]
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	68ba      	ldr	r2, [r7, #8]
 8000de8:	18d3      	adds	r3, r2, r3
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d1db      	bne.n	8000da8 <drawTextAt+0x34>
	}
//	setCursor(x+i*textSize*6, y);
}
 8000df0:	46c0      	nop			; (mov r8, r8)
 8000df2:	46bd      	mov	sp, r7
 8000df4:	b007      	add	sp, #28
 8000df6:	bd90      	pop	{r4, r7, pc}
 8000df8:	200000bc 	.word	0x200000bc
 8000dfc:	200000c0 	.word	0x200000c0
 8000e00:	200000c4 	.word	0x200000c4

08000e04 <setCursor>:

void setBackgroundColor(uint16_t color) {bg = color;}

void setCursor(uint8_t x, uint8_t y) {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	0002      	movs	r2, r0
 8000e0c:	1dfb      	adds	r3, r7, #7
 8000e0e:	701a      	strb	r2, [r3, #0]
 8000e10:	1dbb      	adds	r3, r7, #6
 8000e12:	1c0a      	adds	r2, r1, #0
 8000e14:	701a      	strb	r2, [r3, #0]
	cursorX = x;
 8000e16:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <setCursor+0x2c>)
 8000e18:	1dfa      	adds	r2, r7, #7
 8000e1a:	7812      	ldrb	r2, [r2, #0]
 8000e1c:	701a      	strb	r2, [r3, #0]
	cursorY = y;
 8000e1e:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <setCursor+0x30>)
 8000e20:	1dba      	adds	r2, r7, #6
 8000e22:	7812      	ldrb	r2, [r2, #0]
 8000e24:	701a      	strb	r2, [r3, #0]
}
 8000e26:	46c0      	nop			; (mov r8, r8)
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	b002      	add	sp, #8
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	200000c0 	.word	0x200000c0
 8000e34:	200000c4 	.word	0x200000c4

08000e38 <setTime>:

#include "clocks.h"
#include "timers.h"

// set rtc time. uses perosnal struct as arg
void setTime(struct times *t, RTC_HandleTypeDef *hrtc) {
 8000e38:	b590      	push	{r4, r7, lr}
 8000e3a:	b089      	sub	sp, #36	; 0x24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
	RTC_TimeTypeDef stime = {0};	// change to malloc call? does that work in embedded?
 8000e42:	210c      	movs	r1, #12
 8000e44:	000c      	movs	r4, r1
 8000e46:	187b      	adds	r3, r7, r1
 8000e48:	0018      	movs	r0, r3
 8000e4a:	2314      	movs	r3, #20
 8000e4c:	001a      	movs	r2, r3
 8000e4e:	2100      	movs	r1, #0
 8000e50:	f005 fc3f 	bl	80066d2 <memset>

	// set using args later
	stime.Hours = t->hr;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	781a      	ldrb	r2, [r3, #0]
 8000e58:	0021      	movs	r1, r4
 8000e5a:	187b      	adds	r3, r7, r1
 8000e5c:	701a      	strb	r2, [r3, #0]
	stime.Minutes = t->min;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	785a      	ldrb	r2, [r3, #1]
 8000e62:	187b      	adds	r3, r7, r1
 8000e64:	705a      	strb	r2, [r3, #1]
	stime.Seconds = t->sec;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	789a      	ldrb	r2, [r3, #2]
 8000e6a:	187b      	adds	r3, r7, r1
 8000e6c:	709a      	strb	r2, [r3, #2]

	stime.TimeFormat = RTC_HOURFORMAT_24;
 8000e6e:	187b      	adds	r3, r7, r1
 8000e70:	2200      	movs	r2, #0
 8000e72:	70da      	strb	r2, [r3, #3]

	// not sure what these do, but probably fine if set to 0 or ignored
	stime.SubSeconds = 0;
 8000e74:	187b      	adds	r3, r7, r1
 8000e76:	2200      	movs	r2, #0
 8000e78:	605a      	str	r2, [r3, #4]
	stime.SecondFraction = 0;
 8000e7a:	187b      	adds	r3, r7, r1
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]

	stime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;		// add daylight savings later?
 8000e80:	187b      	adds	r3, r7, r1
 8000e82:	2200      	movs	r2, #0
 8000e84:	60da      	str	r2, [r3, #12]
	stime.StoreOperation = RTC_STOREOPERATION_SET;		// not sure what this does
 8000e86:	187b      	adds	r3, r7, r1
 8000e88:	2280      	movs	r2, #128	; 0x80
 8000e8a:	02d2      	lsls	r2, r2, #11
 8000e8c:	611a      	str	r2, [r3, #16]

	// do nothing until done
	// not following BCD format (4-bit digit 1, 4-bit digit 2)
	// while makes program hang? ignore instead?
//	while (HAL_RTC_SetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK);
	HAL_RTC_SetTime(hrtc, &stime, RTC_FORMAT_BIN);
 8000e8e:	1879      	adds	r1, r7, r1
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	2200      	movs	r2, #0
 8000e94:	0018      	movs	r0, r3
 8000e96:	f003 fd0b 	bl	80048b0 <HAL_RTC_SetTime>
}
 8000e9a:	46c0      	nop			; (mov r8, r8)
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	b009      	add	sp, #36	; 0x24
 8000ea0:	bd90      	pop	{r4, r7, pc}

08000ea2 <setDate>:

// set rtc date. uses personal struct
void setDate(struct dates *d, RTC_HandleTypeDef *hrtc) {
 8000ea2:	b590      	push	{r4, r7, lr}
 8000ea4:	b085      	sub	sp, #20
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
 8000eaa:	6039      	str	r1, [r7, #0]
	// ---- date ----
	RTC_DateTypeDef sdate = {0};
 8000eac:	240c      	movs	r4, #12
 8000eae:	193b      	adds	r3, r7, r4
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]

	sdate.Month = d->month;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	789a      	ldrb	r2, [r3, #2]
 8000eb8:	193b      	adds	r3, r7, r4
 8000eba:	705a      	strb	r2, [r3, #1]
	sdate.Date = d->date;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	78da      	ldrb	r2, [r3, #3]
 8000ec0:	193b      	adds	r3, r7, r4
 8000ec2:	709a      	strb	r2, [r3, #2]
	sdate.WeekDay = d->weekday;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	791a      	ldrb	r2, [r3, #4]
 8000ec8:	193b      	adds	r3, r7, r4
 8000eca:	701a      	strb	r2, [r3, #0]
	sdate.Year = d->yr % 100; 		// set only between 0-99. part of the library (!?)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	881b      	ldrh	r3, [r3, #0]
 8000ed0:	2164      	movs	r1, #100	; 0x64
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	f7ff f99e 	bl	8000214 <__aeabi_uidivmod>
 8000ed8:	000b      	movs	r3, r1
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	193b      	adds	r3, r7, r4
 8000ee0:	70da      	strb	r2, [r3, #3]

	HAL_RTC_SetDate(hrtc, &sdate, RTC_FORMAT_BIN);
 8000ee2:	1939      	adds	r1, r7, r4
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	0018      	movs	r0, r3
 8000eea:	f003 fe01 	bl	8004af0 <HAL_RTC_SetDate>
}
 8000eee:	46c0      	nop			; (mov r8, r8)
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	b005      	add	sp, #20
 8000ef4:	bd90      	pop	{r4, r7, pc}

08000ef6 <setDateTime>:

void setDateTime(struct dates *d, struct times *t, RTC_HandleTypeDef *hrtc) {
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b084      	sub	sp, #16
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	60f8      	str	r0, [r7, #12]
 8000efe:	60b9      	str	r1, [r7, #8]
 8000f00:	607a      	str	r2, [r7, #4]
	setDate(d, hrtc);
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	0011      	movs	r1, r2
 8000f08:	0018      	movs	r0, r3
 8000f0a:	f7ff ffca 	bl	8000ea2 <setDate>
	setTime(t, hrtc);
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	0011      	movs	r1, r2
 8000f14:	0018      	movs	r0, r3
 8000f16:	f7ff ff8f 	bl	8000e38 <setTime>
}
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	b004      	add	sp, #16
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <setAlarm>:

// for time of day+week
void setAlarm(struct alarmTimes *a, RTC_HandleTypeDef *hrtc) {
 8000f24:	b5b0      	push	{r4, r5, r7, lr}
 8000f26:	b092      	sub	sp, #72	; 0x48
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
	RTC_AlarmTypeDef salarm = {0};
 8000f2e:	2520      	movs	r5, #32
 8000f30:	197b      	adds	r3, r7, r5
 8000f32:	0018      	movs	r0, r3
 8000f34:	2328      	movs	r3, #40	; 0x28
 8000f36:	001a      	movs	r2, r3
 8000f38:	2100      	movs	r1, #0
 8000f3a:	f005 fbca 	bl	80066d2 <memset>
	RTC_TimeTypeDef salarmtime = {0};
 8000f3e:	240c      	movs	r4, #12
 8000f40:	193b      	adds	r3, r7, r4
 8000f42:	0018      	movs	r0, r3
 8000f44:	2314      	movs	r3, #20
 8000f46:	001a      	movs	r2, r3
 8000f48:	2100      	movs	r1, #0
 8000f4a:	f005 fbc2 	bl	80066d2 <memset>

	watchAlarm = *a;	// this is probably fine (value at a is defined already)
 8000f4e:	4a23      	ldr	r2, [pc, #140]	; (8000fdc <setAlarm+0xb8>)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	0010      	movs	r0, r2
 8000f54:	0019      	movs	r1, r3
 8000f56:	2304      	movs	r3, #4
 8000f58:	001a      	movs	r2, r3
 8000f5a:	f005 fbb1 	bl	80066c0 <memcpy>

	// change to set with args
	salarmtime.Hours = a->hr;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	781a      	ldrb	r2, [r3, #0]
 8000f62:	193b      	adds	r3, r7, r4
 8000f64:	701a      	strb	r2, [r3, #0]
	salarmtime.Minutes = a->min;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	785a      	ldrb	r2, [r3, #1]
 8000f6a:	193b      	adds	r3, r7, r4
 8000f6c:	705a      	strb	r2, [r3, #1]
	salarmtime.Seconds = a->sec;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	789a      	ldrb	r2, [r3, #2]
 8000f72:	193b      	adds	r3, r7, r4
 8000f74:	709a      	strb	r2, [r3, #2]
	salarmtime.TimeFormat = RTC_HOURFORMAT_24;
 8000f76:	193b      	adds	r3, r7, r4
 8000f78:	2200      	movs	r2, #0
 8000f7a:	70da      	strb	r2, [r3, #3]
	salarmtime.SubSeconds = 0;
 8000f7c:	0021      	movs	r1, r4
 8000f7e:	187b      	adds	r3, r7, r1
 8000f80:	2200      	movs	r2, #0
 8000f82:	605a      	str	r2, [r3, #4]
	salarmtime.SecondFraction = 0;
 8000f84:	187b      	adds	r3, r7, r1
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
	salarmtime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000f8a:	187b      	adds	r3, r7, r1
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	60da      	str	r2, [r3, #12]
	salarmtime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000f90:	187b      	adds	r3, r7, r1
 8000f92:	2200      	movs	r2, #0
 8000f94:	611a      	str	r2, [r3, #16]

	salarm.AlarmTime = salarmtime;
 8000f96:	197b      	adds	r3, r7, r5
 8000f98:	187a      	adds	r2, r7, r1
 8000f9a:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000f9c:	c313      	stmia	r3!, {r0, r1, r4}
 8000f9e:	ca03      	ldmia	r2!, {r0, r1}
 8000fa0:	c303      	stmia	r3!, {r0, r1}
	salarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000fa2:	197b      	adds	r3, r7, r5
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	615a      	str	r2, [r3, #20]
	salarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000fa8:	197b      	adds	r3, r7, r5
 8000faa:	2200      	movs	r2, #0
 8000fac:	619a      	str	r2, [r3, #24]
	salarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 8000fae:	197b      	adds	r3, r7, r5
 8000fb0:	2280      	movs	r2, #128	; 0x80
 8000fb2:	05d2      	lsls	r2, r2, #23
 8000fb4:	61da      	str	r2, [r3, #28]
	salarm.AlarmDateWeekDay = a->weekday;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	78d9      	ldrb	r1, [r3, #3]
 8000fba:	197b      	adds	r3, r7, r5
 8000fbc:	2220      	movs	r2, #32
 8000fbe:	5499      	strb	r1, [r3, r2]
	salarm.Alarm = RTC_ALARM_A;			// change if using different alarm
 8000fc0:	197b      	adds	r3, r7, r5
 8000fc2:	2280      	movs	r2, #128	; 0x80
 8000fc4:	0052      	lsls	r2, r2, #1
 8000fc6:	625a      	str	r2, [r3, #36]	; 0x24

	// do nothing until done
//	while (HAL_RTC_SetAlarm_IT(hrtc, &salarm, RTC_FORMAT_BCD) != HAL_OK);
	HAL_RTC_SetAlarm_IT(hrtc, &salarm, RTC_FORMAT_BIN);
 8000fc8:	1979      	adds	r1, r7, r5
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	0018      	movs	r0, r3
 8000fd0:	f003 ffb0 	bl	8004f34 <HAL_RTC_SetAlarm_IT>
}
 8000fd4:	46c0      	nop			; (mov r8, r8)
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	b012      	add	sp, #72	; 0x48
 8000fda:	bdb0      	pop	{r4, r5, r7, pc}
 8000fdc:	200000ec 	.word	0x200000ec

08000fe0 <setTimer>:
	HAL_RTC_SetAlarm_IT(hrtc, &salarm, RTC_FORMAT_BIN);
}

// set alarm for timer function of watch project
// using RTC alarm hardware
void setTimer(struct times *t_in, RTC_HandleTypeDef *hrtc, TIM_HandleTypeDef *htim) {
 8000fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fe2:	b099      	sub	sp, #100	; 0x64
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
	RTC_AlarmTypeDef salarm = {0};
 8000fec:	2338      	movs	r3, #56	; 0x38
 8000fee:	18fb      	adds	r3, r7, r3
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	2328      	movs	r3, #40	; 0x28
 8000ff4:	001a      	movs	r2, r3
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	f005 fb6b 	bl	80066d2 <memset>
	RTC_TimeTypeDef salarmtime = {0};
 8000ffc:	2324      	movs	r3, #36	; 0x24
 8000ffe:	18fb      	adds	r3, r7, r3
 8001000:	0018      	movs	r0, r3
 8001002:	2314      	movs	r3, #20
 8001004:	001a      	movs	r2, r3
 8001006:	2100      	movs	r1, #0
 8001008:	f005 fb63 	bl	80066d2 <memset>

	// set global variables to hold value being set
	watchTimer = *t_in;
 800100c:	4a67      	ldr	r2, [pc, #412]	; (80011ac <setTimer+0x1cc>)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	0010      	movs	r0, r2
 8001012:	0019      	movs	r1, r3
 8001014:	2303      	movs	r3, #3
 8001016:	001a      	movs	r2, r3
 8001018:	f005 fb52 	bl	80066c0 <memcpy>
	watchTimerSeconds = t_in->sec + t_in->min*60 + t_in->hr * 3600;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	789b      	ldrb	r3, [r3, #2]
 8001020:	0019      	movs	r1, r3
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	785b      	ldrb	r3, [r3, #1]
 8001026:	001a      	movs	r2, r3
 8001028:	0013      	movs	r3, r2
 800102a:	011b      	lsls	r3, r3, #4
 800102c:	1a9b      	subs	r3, r3, r2
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	18c9      	adds	r1, r1, r3
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	001a      	movs	r2, r3
 8001038:	0013      	movs	r3, r2
 800103a:	011b      	lsls	r3, r3, #4
 800103c:	1a9b      	subs	r3, r3, r2
 800103e:	011a      	lsls	r2, r3, #4
 8001040:	1ad2      	subs	r2, r2, r3
 8001042:	0113      	lsls	r3, r2, #4
 8001044:	001a      	movs	r2, r3
 8001046:	0013      	movs	r3, r2
 8001048:	18cb      	adds	r3, r1, r3
 800104a:	001a      	movs	r2, r3
 800104c:	4b58      	ldr	r3, [pc, #352]	; (80011b0 <setTimer+0x1d0>)
 800104e:	601a      	str	r2, [r3, #0]

	// pull current RTC time
	struct dates d;
	struct times t;
	getDateTime(&d, &t, hrtc);
 8001050:	68ba      	ldr	r2, [r7, #8]
 8001052:	2418      	movs	r4, #24
 8001054:	1939      	adds	r1, r7, r4
 8001056:	231c      	movs	r3, #28
 8001058:	18fb      	adds	r3, r7, r3
 800105a:	0018      	movs	r0, r3
 800105c:	f000 f8ac 	bl	80011b8 <getDateTime>

	struct alarmTimes a;

	// adding timer value to current time so we can set an alarm time
	if (t.sec + t_in->sec > 60) {		// adding seconds
 8001060:	193b      	adds	r3, r7, r4
 8001062:	789b      	ldrb	r3, [r3, #2]
 8001064:	001a      	movs	r2, r3
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	789b      	ldrb	r3, [r3, #2]
 800106a:	18d3      	adds	r3, r2, r3
 800106c:	2b3c      	cmp	r3, #60	; 0x3c
 800106e:	dd49      	ble.n	8001104 <setTimer+0x124>
		if (t.min + t_in->min > 60) {		// adding minutes
 8001070:	2318      	movs	r3, #24
 8001072:	18fb      	adds	r3, r7, r3
 8001074:	785b      	ldrb	r3, [r3, #1]
 8001076:	001a      	movs	r2, r3
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	785b      	ldrb	r3, [r3, #1]
 800107c:	18d3      	adds	r3, r2, r3
 800107e:	2b3c      	cmp	r3, #60	; 0x3c
 8001080:	dd30      	ble.n	80010e4 <setTimer+0x104>
			if (t.hr + t_in->hr > 24) {			// adding hours
 8001082:	2318      	movs	r3, #24
 8001084:	18fb      	adds	r3, r7, r3
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	001a      	movs	r2, r3
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	18d3      	adds	r3, r2, r3
 8001090:	2b18      	cmp	r3, #24
 8001092:	dd17      	ble.n	80010c4 <setTimer+0xe4>
				a.weekday = ((d.weekday + t_in->hr/24) % 7) + 1;		// bc weekday count starts from 1
 8001094:	231c      	movs	r3, #28
 8001096:	18fb      	adds	r3, r7, r3
 8001098:	791b      	ldrb	r3, [r3, #4]
 800109a:	001c      	movs	r4, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2118      	movs	r1, #24
 80010a2:	0018      	movs	r0, r3
 80010a4:	f7ff f830 	bl	8000108 <__udivsi3>
 80010a8:	0003      	movs	r3, r0
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	18e3      	adds	r3, r4, r3
 80010ae:	2107      	movs	r1, #7
 80010b0:	0018      	movs	r0, r3
 80010b2:	f7ff f999 	bl	80003e8 <__aeabi_idivmod>
 80010b6:	000b      	movs	r3, r1
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	3301      	adds	r3, #1
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	2314      	movs	r3, #20
 80010c0:	18fb      	adds	r3, r7, r3
 80010c2:	70da      	strb	r2, [r3, #3]
			}
			a.hr = (t.hr + t_in->hr) % 24;
 80010c4:	2318      	movs	r3, #24
 80010c6:	18fb      	adds	r3, r7, r3
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	001a      	movs	r2, r3
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	18d3      	adds	r3, r2, r3
 80010d2:	2118      	movs	r1, #24
 80010d4:	0018      	movs	r0, r3
 80010d6:	f7ff f987 	bl	80003e8 <__aeabi_idivmod>
 80010da:	000b      	movs	r3, r1
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	2314      	movs	r3, #20
 80010e0:	18fb      	adds	r3, r7, r3
 80010e2:	701a      	strb	r2, [r3, #0]
		}
		a.min = (t.min + t_in->min) % 60;
 80010e4:	2318      	movs	r3, #24
 80010e6:	18fb      	adds	r3, r7, r3
 80010e8:	785b      	ldrb	r3, [r3, #1]
 80010ea:	001a      	movs	r2, r3
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	785b      	ldrb	r3, [r3, #1]
 80010f0:	18d3      	adds	r3, r2, r3
 80010f2:	213c      	movs	r1, #60	; 0x3c
 80010f4:	0018      	movs	r0, r3
 80010f6:	f7ff f977 	bl	80003e8 <__aeabi_idivmod>
 80010fa:	000b      	movs	r3, r1
 80010fc:	b2da      	uxtb	r2, r3
 80010fe:	2314      	movs	r3, #20
 8001100:	18fb      	adds	r3, r7, r3
 8001102:	705a      	strb	r2, [r3, #1]
	}
	a.sec = (t.sec + t_in->sec) % 60;
 8001104:	2318      	movs	r3, #24
 8001106:	18fb      	adds	r3, r7, r3
 8001108:	789b      	ldrb	r3, [r3, #2]
 800110a:	001a      	movs	r2, r3
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	789b      	ldrb	r3, [r3, #2]
 8001110:	18d3      	adds	r3, r2, r3
 8001112:	213c      	movs	r1, #60	; 0x3c
 8001114:	0018      	movs	r0, r3
 8001116:	f7ff f967 	bl	80003e8 <__aeabi_idivmod>
 800111a:	000b      	movs	r3, r1
 800111c:	b2da      	uxtb	r2, r3
 800111e:	2414      	movs	r4, #20
 8001120:	193b      	adds	r3, r7, r4
 8001122:	709a      	strb	r2, [r3, #2]

	// setting RTC parameters
	salarmtime.Hours = a.hr;
 8001124:	193b      	adds	r3, r7, r4
 8001126:	781a      	ldrb	r2, [r3, #0]
 8001128:	2124      	movs	r1, #36	; 0x24
 800112a:	187b      	adds	r3, r7, r1
 800112c:	701a      	strb	r2, [r3, #0]
	salarmtime.Minutes = a.min;
 800112e:	193b      	adds	r3, r7, r4
 8001130:	785a      	ldrb	r2, [r3, #1]
 8001132:	187b      	adds	r3, r7, r1
 8001134:	705a      	strb	r2, [r3, #1]
	salarmtime.Seconds = a.sec;
 8001136:	193b      	adds	r3, r7, r4
 8001138:	789a      	ldrb	r2, [r3, #2]
 800113a:	187b      	adds	r3, r7, r1
 800113c:	709a      	strb	r2, [r3, #2]
	salarmtime.TimeFormat = RTC_HOURFORMAT_24;
 800113e:	187b      	adds	r3, r7, r1
 8001140:	2200      	movs	r2, #0
 8001142:	70da      	strb	r2, [r3, #3]
	salarmtime.SubSeconds = 0;
 8001144:	187b      	adds	r3, r7, r1
 8001146:	2200      	movs	r2, #0
 8001148:	605a      	str	r2, [r3, #4]
	salarmtime.SecondFraction = 0;
 800114a:	187b      	adds	r3, r7, r1
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
	salarmtime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001150:	187b      	adds	r3, r7, r1
 8001152:	2200      	movs	r2, #0
 8001154:	60da      	str	r2, [r3, #12]
	salarmtime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001156:	187b      	adds	r3, r7, r1
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]

	salarm.AlarmTime = salarmtime;
 800115c:	2038      	movs	r0, #56	; 0x38
 800115e:	183b      	adds	r3, r7, r0
 8001160:	187a      	adds	r2, r7, r1
 8001162:	ca62      	ldmia	r2!, {r1, r5, r6}
 8001164:	c362      	stmia	r3!, {r1, r5, r6}
 8001166:	ca22      	ldmia	r2!, {r1, r5}
 8001168:	c322      	stmia	r3!, {r1, r5}
	salarm.AlarmMask = RTC_ALARMMASK_ALL;
 800116a:	183b      	adds	r3, r7, r0
 800116c:	4a11      	ldr	r2, [pc, #68]	; (80011b4 <setTimer+0x1d4>)
 800116e:	615a      	str	r2, [r3, #20]
	salarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001170:	183b      	adds	r3, r7, r0
 8001172:	2200      	movs	r2, #0
 8001174:	619a      	str	r2, [r3, #24]
	salarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 8001176:	183b      	adds	r3, r7, r0
 8001178:	2280      	movs	r2, #128	; 0x80
 800117a:	05d2      	lsls	r2, r2, #23
 800117c:	61da      	str	r2, [r3, #28]
	salarm.AlarmDateWeekDay = a.weekday;
 800117e:	193b      	adds	r3, r7, r4
 8001180:	78d9      	ldrb	r1, [r3, #3]
 8001182:	183b      	adds	r3, r7, r0
 8001184:	2220      	movs	r2, #32
 8001186:	5499      	strb	r1, [r3, r2]
	salarm.Alarm = RTC_ALARM_B;			// change if using different alarm
 8001188:	183b      	adds	r3, r7, r0
 800118a:	2280      	movs	r2, #128	; 0x80
 800118c:	0092      	lsls	r2, r2, #2
 800118e:	625a      	str	r2, [r3, #36]	; 0x24

	// do nothing until done
//	while (HAL_RTC_SetAlarm_IT(hrtc, &salarm, RTC_FORMAT_BCD) != HAL_OK);
	HAL_RTC_SetAlarm_IT(hrtc, &salarm, RTC_FORMAT_BIN);
 8001190:	1839      	adds	r1, r7, r0
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	2200      	movs	r2, #0
 8001196:	0018      	movs	r0, r3
 8001198:	f003 fecc 	bl	8004f34 <HAL_RTC_SetAlarm_IT>

	runTimerDisplay(htim);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	0018      	movs	r0, r3
 80011a0:	f001 fa16 	bl	80025d0 <runTimerDisplay>
}
 80011a4:	46c0      	nop			; (mov r8, r8)
 80011a6:	46bd      	mov	sp, r7
 80011a8:	b019      	add	sp, #100	; 0x64
 80011aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ac:	200000f8 	.word	0x200000f8
 80011b0:	20000158 	.word	0x20000158
 80011b4:	80808080 	.word	0x80808080

080011b8 <getDateTime>:
	d->date = sdate.Date;
	d->weekday = sdate.WeekDay;
}

// not using getDate and getTime for efficiency (?)
void getDateTime(struct dates *d, struct times *t, RTC_HandleTypeDef *hrtc) {
 80011b8:	b590      	push	{r4, r7, lr}
 80011ba:	b08b      	sub	sp, #44	; 0x2c
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
	RTC_DateTypeDef sdate;
	RTC_TimeTypeDef stime;

	// programming manual says to read time after date. something shadow registers.
	// not done automatically in HAL
	HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN);
 80011c4:	2310      	movs	r3, #16
 80011c6:	18f9      	adds	r1, r7, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2200      	movs	r2, #0
 80011cc:	0018      	movs	r0, r3
 80011ce:	f003 fc33 	bl	8004a38 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &sdate, RTC_FORMAT_BIN);
 80011d2:	2424      	movs	r4, #36	; 0x24
 80011d4:	1939      	adds	r1, r7, r4
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2200      	movs	r2, #0
 80011da:	0018      	movs	r0, r3
 80011dc:	f003 fd36 	bl	8004c4c <HAL_RTC_GetDate>

	d->yr = sdate.Year > 50 ? sdate.Year+1900 : sdate.Year+2000;		// make assumptions on whether it's 19xx or 20xx
 80011e0:	193b      	adds	r3, r7, r4
 80011e2:	78db      	ldrb	r3, [r3, #3]
 80011e4:	2b32      	cmp	r3, #50	; 0x32
 80011e6:	d908      	bls.n	80011fa <getDateTime+0x42>
 80011e8:	2324      	movs	r3, #36	; 0x24
 80011ea:	18fb      	adds	r3, r7, r3
 80011ec:	78db      	ldrb	r3, [r3, #3]
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	4a16      	ldr	r2, [pc, #88]	; (800124c <getDateTime+0x94>)
 80011f2:	4694      	mov	ip, r2
 80011f4:	4463      	add	r3, ip
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	e008      	b.n	800120c <getDateTime+0x54>
 80011fa:	2324      	movs	r3, #36	; 0x24
 80011fc:	18fb      	adds	r3, r7, r3
 80011fe:	78db      	ldrb	r3, [r3, #3]
 8001200:	b29b      	uxth	r3, r3
 8001202:	22fa      	movs	r2, #250	; 0xfa
 8001204:	00d2      	lsls	r2, r2, #3
 8001206:	4694      	mov	ip, r2
 8001208:	4463      	add	r3, ip
 800120a:	b29b      	uxth	r3, r3
 800120c:	68fa      	ldr	r2, [r7, #12]
 800120e:	8013      	strh	r3, [r2, #0]
	d->month = sdate.Month;
 8001210:	2124      	movs	r1, #36	; 0x24
 8001212:	187b      	adds	r3, r7, r1
 8001214:	785a      	ldrb	r2, [r3, #1]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	709a      	strb	r2, [r3, #2]
	d->date = sdate.Date;
 800121a:	187b      	adds	r3, r7, r1
 800121c:	789a      	ldrb	r2, [r3, #2]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	70da      	strb	r2, [r3, #3]
	d->weekday = sdate.WeekDay;
 8001222:	187b      	adds	r3, r7, r1
 8001224:	781a      	ldrb	r2, [r3, #0]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	711a      	strb	r2, [r3, #4]

	t->hr = stime.Hours;
 800122a:	2110      	movs	r1, #16
 800122c:	187b      	adds	r3, r7, r1
 800122e:	781a      	ldrb	r2, [r3, #0]
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	701a      	strb	r2, [r3, #0]
	t->min = stime.Minutes;
 8001234:	187b      	adds	r3, r7, r1
 8001236:	785a      	ldrb	r2, [r3, #1]
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	705a      	strb	r2, [r3, #1]
	t->sec = stime.Seconds;
 800123c:	187b      	adds	r3, r7, r1
 800123e:	789a      	ldrb	r2, [r3, #2]
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	709a      	strb	r2, [r3, #2]
}
 8001244:	46c0      	nop			; (mov r8, r8)
 8001246:	46bd      	mov	sp, r7
 8001248:	b00b      	add	sp, #44	; 0x2c
 800124a:	bd90      	pop	{r4, r7, pc}
 800124c:	0000076c 	.word	0x0000076c

08001250 <alarmTest>:
	printDateTime(hrtc, hspi);
	HAL_Delay(1000);
	printDateTime(hrtc, hspi);
}

void alarmTest(RTC_HandleTypeDef *hrtc, SPI_HandleTypeDef *hspi) {
 8001250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001252:	b093      	sub	sp, #76	; 0x4c
 8001254:	af02      	add	r7, sp, #8
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
	struct dates d;
	struct times t;

	getDateTime(&d, &t, hrtc);
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	2634      	movs	r6, #52	; 0x34
 800125e:	19b9      	adds	r1, r7, r6
 8001260:	2338      	movs	r3, #56	; 0x38
 8001262:	18fb      	adds	r3, r7, r3
 8001264:	0018      	movs	r0, r3
 8001266:	f7ff ffa7 	bl	80011b8 <getDateTime>

//	if (t.sec > 60) t.min += 1;
//	t.sec = (t.sec+10) % 60;
//	struct alarmTimes a = {t.hr, t.min, t.sec, d.weekday};
	struct alarmTimes a = {0, 0, 15, RTC_WEEKDAY_MONDAY};
 800126a:	2130      	movs	r1, #48	; 0x30
 800126c:	187b      	adds	r3, r7, r1
 800126e:	4a39      	ldr	r2, [pc, #228]	; (8001354 <alarmTest+0x104>)
 8001270:	6812      	ldr	r2, [r2, #0]
 8001272:	601a      	str	r2, [r3, #0]

	HAL_Delay(1000);
 8001274:	23fa      	movs	r3, #250	; 0xfa
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	0018      	movs	r0, r3
 800127a:	f001 fa59 	bl	8002730 <HAL_Delay>

	char str[40];
	sprintf(str, "%2u:%2u:%2u %2u", t.hr, t.min, t.sec, d.weekday);
 800127e:	19bb      	adds	r3, r7, r6
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	001c      	movs	r4, r3
 8001284:	19bb      	adds	r3, r7, r6
 8001286:	785b      	ldrb	r3, [r3, #1]
 8001288:	001d      	movs	r5, r3
 800128a:	19bb      	adds	r3, r7, r6
 800128c:	789b      	ldrb	r3, [r3, #2]
 800128e:	001a      	movs	r2, r3
 8001290:	2338      	movs	r3, #56	; 0x38
 8001292:	18fb      	adds	r3, r7, r3
 8001294:	791b      	ldrb	r3, [r3, #4]
 8001296:	4930      	ldr	r1, [pc, #192]	; (8001358 <alarmTest+0x108>)
 8001298:	2008      	movs	r0, #8
 800129a:	1838      	adds	r0, r7, r0
 800129c:	9301      	str	r3, [sp, #4]
 800129e:	9200      	str	r2, [sp, #0]
 80012a0:	002b      	movs	r3, r5
 80012a2:	0022      	movs	r2, r4
 80012a4:	f005 fa1e 	bl	80066e4 <siprintf>
	drawTextAt(0, 0, str, hspi);
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	2008      	movs	r0, #8
 80012ac:	183a      	adds	r2, r7, r0
 80012ae:	2100      	movs	r1, #0
 80012b0:	2000      	movs	r0, #0
 80012b2:	f7ff fd5f 	bl	8000d74 <drawTextAt>
	sprintf(str, "%2u:%2u:%2u %2u", a.hr, a.min, a.sec, a.weekday);
 80012b6:	2130      	movs	r1, #48	; 0x30
 80012b8:	187b      	adds	r3, r7, r1
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	001c      	movs	r4, r3
 80012be:	187b      	adds	r3, r7, r1
 80012c0:	785b      	ldrb	r3, [r3, #1]
 80012c2:	001d      	movs	r5, r3
 80012c4:	187b      	adds	r3, r7, r1
 80012c6:	789b      	ldrb	r3, [r3, #2]
 80012c8:	001a      	movs	r2, r3
 80012ca:	187b      	adds	r3, r7, r1
 80012cc:	78db      	ldrb	r3, [r3, #3]
 80012ce:	4922      	ldr	r1, [pc, #136]	; (8001358 <alarmTest+0x108>)
 80012d0:	2008      	movs	r0, #8
 80012d2:	1838      	adds	r0, r7, r0
 80012d4:	9301      	str	r3, [sp, #4]
 80012d6:	9200      	str	r2, [sp, #0]
 80012d8:	002b      	movs	r3, r5
 80012da:	0022      	movs	r2, r4
 80012dc:	f005 fa02 	bl	80066e4 <siprintf>
	drawTextAt(0, 10, str, hspi);
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	2008      	movs	r0, #8
 80012e4:	183a      	adds	r2, r7, r0
 80012e6:	210a      	movs	r1, #10
 80012e8:	2000      	movs	r0, #0
 80012ea:	f7ff fd43 	bl	8000d74 <drawTextAt>

	setAlarm(&a, hrtc);
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	2130      	movs	r1, #48	; 0x30
 80012f2:	187b      	adds	r3, r7, r1
 80012f4:	0011      	movs	r1, r2
 80012f6:	0018      	movs	r0, r3
 80012f8:	f7ff fe14 	bl	8000f24 <setAlarm>

	HAL_Delay(10000);
 80012fc:	4b17      	ldr	r3, [pc, #92]	; (800135c <alarmTest+0x10c>)
 80012fe:	0018      	movs	r0, r3
 8001300:	f001 fa16 	bl	8002730 <HAL_Delay>
	getDateTime(&d, &t, hrtc);
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	19b9      	adds	r1, r7, r6
 8001308:	2338      	movs	r3, #56	; 0x38
 800130a:	18fb      	adds	r3, r7, r3
 800130c:	0018      	movs	r0, r3
 800130e:	f7ff ff53 	bl	80011b8 <getDateTime>
	sprintf(str, "%2u:%2u:%2u %2u", t.hr, t.min, t.sec, d.weekday);
 8001312:	19bb      	adds	r3, r7, r6
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	001c      	movs	r4, r3
 8001318:	19bb      	adds	r3, r7, r6
 800131a:	785b      	ldrb	r3, [r3, #1]
 800131c:	001d      	movs	r5, r3
 800131e:	19bb      	adds	r3, r7, r6
 8001320:	789b      	ldrb	r3, [r3, #2]
 8001322:	001a      	movs	r2, r3
 8001324:	2338      	movs	r3, #56	; 0x38
 8001326:	18fb      	adds	r3, r7, r3
 8001328:	791b      	ldrb	r3, [r3, #4]
 800132a:	490b      	ldr	r1, [pc, #44]	; (8001358 <alarmTest+0x108>)
 800132c:	2008      	movs	r0, #8
 800132e:	0006      	movs	r6, r0
 8001330:	1838      	adds	r0, r7, r0
 8001332:	9301      	str	r3, [sp, #4]
 8001334:	9200      	str	r2, [sp, #0]
 8001336:	002b      	movs	r3, r5
 8001338:	0022      	movs	r2, r4
 800133a:	f005 f9d3 	bl	80066e4 <siprintf>
	drawTextAt(0, 0, str, hspi);
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	19ba      	adds	r2, r7, r6
 8001342:	2100      	movs	r1, #0
 8001344:	2000      	movs	r0, #0
 8001346:	f7ff fd15 	bl	8000d74 <drawTextAt>
}
 800134a:	46c0      	nop			; (mov r8, r8)
 800134c:	46bd      	mov	sp, r7
 800134e:	b011      	add	sp, #68	; 0x44
 8001350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001352:	46c0      	nop			; (mov r8, r8)
 8001354:	08006fc4 	.word	0x08006fc4
 8001358:	08006fb4 	.word	0x08006fb4
 800135c:	00002710 	.word	0x00002710

08001360 <peripheralClockConfig>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void peripheralClockConfig() {
 8001360:	b580      	push	{r7, lr}
 8001362:	b08a      	sub	sp, #40	; 0x28
 8001364:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001366:	003b      	movs	r3, r7
 8001368:	0018      	movs	r0, r3
 800136a:	2328      	movs	r3, #40	; 0x28
 800136c:	001a      	movs	r2, r3
 800136e:	2100      	movs	r1, #0
 8001370:	f005 f9af 	bl	80066d2 <memset>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_LPTIM1;
 8001374:	003b      	movs	r3, r7
 8001376:	22a0      	movs	r2, #160	; 0xa0
 8001378:	601a      	str	r2, [r3, #0]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800137a:	003b      	movs	r3, r7
 800137c:	2280      	movs	r2, #128	; 0x80
 800137e:	0252      	lsls	r2, r2, #9
 8001380:	605a      	str	r2, [r3, #4]
	PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8001382:	003b      	movs	r3, r7
 8001384:	22c0      	movs	r2, #192	; 0xc0
 8001386:	0312      	lsls	r2, r2, #12
 8001388:	621a      	str	r2, [r3, #32]

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800138a:	003b      	movs	r3, r7
 800138c:	0018      	movs	r0, r3
 800138e:	f003 f87d 	bl	800448c <HAL_RCCEx_PeriphCLKConfig>
 8001392:	1e03      	subs	r3, r0, #0
 8001394:	d001      	beq.n	800139a <peripheralClockConfig+0x3a>
	{
		Error_Handler();
 8001396:	f000 fbab 	bl	8001af0 <Error_Handler>
	}
}
 800139a:	46c0      	nop			; (mov r8, r8)
 800139c:	46bd      	mov	sp, r7
 800139e:	b00a      	add	sp, #40	; 0x28
 80013a0:	bd80      	pop	{r7, pc}
	...

080013a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013a8:	f001 f962 	bl	8002670 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ac:	f000 f840 	bl	8001430 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  peripheralClockConfig();
 80013b0:	f7ff ffd6 	bl	8001360 <peripheralClockConfig>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013b4:	f000 fae6 	bl	8001984 <MX_GPIO_Init>
  MX_SPI1_Init();
 80013b8:	f000 f9fc 	bl	80017b4 <MX_SPI1_Init>
  MX_ADC_Init();
 80013bc:	f000 f8bc 	bl	8001538 <MX_ADC_Init>
  MX_RTC_Init();
 80013c0:	f000 f946 	bl	8001650 <MX_RTC_Init>
  MX_TIM21_Init();
 80013c4:	f000 fa32 	bl	800182c <MX_TIM21_Init>
  MX_LPTIM1_Init();
 80013c8:	f000 f91a 	bl	8001600 <MX_LPTIM1_Init>
  MX_DMA_Init();
 80013cc:	f000 fabc 	bl	8001948 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */
//	uint16_t bg = ST77XX_BLACK;
  	bg = ST77XX_BLACK;
 80013d0:	4b11      	ldr	r3, [pc, #68]	; (8001418 <main+0x74>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	801a      	strh	r2, [r3, #0]
	HAL_Delay(2000);
 80013d6:	23fa      	movs	r3, #250	; 0xfa
 80013d8:	00db      	lsls	r3, r3, #3
 80013da:	0018      	movs	r0, r3
 80013dc:	f001 f9a8 	bl	8002730 <HAL_Delay>
	TFT_startup(&hspi1);
 80013e0:	4b0e      	ldr	r3, [pc, #56]	; (800141c <main+0x78>)
 80013e2:	0018      	movs	r0, r3
 80013e4:	f7ff f916 	bl	8000614 <TFT_startup>
	fillScreen(bg, &hspi1);
 80013e8:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <main+0x74>)
 80013ea:	881b      	ldrh	r3, [r3, #0]
 80013ec:	4a0b      	ldr	r2, [pc, #44]	; (800141c <main+0x78>)
 80013ee:	0011      	movs	r1, r2
 80013f0:	0018      	movs	r0, r3
 80013f2:	f7ff fb9b 	bl	8000b2c <fillScreen>

	updateFace = 1;
 80013f6:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <main+0x7c>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	701a      	strb	r2, [r3, #0]
	face = faceClock;
 80013fc:	4b09      	ldr	r3, [pc, #36]	; (8001424 <main+0x80>)
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
	updateClock = 1;
 8001402:	4b09      	ldr	r3, [pc, #36]	; (8001428 <main+0x84>)
 8001404:	2201      	movs	r2, #1
 8001406:	701a      	strb	r2, [r3, #0]
//	runStopwatch(&hlptim1);
	alarmTest(&hrtc, &hspi1);
 8001408:	4a04      	ldr	r2, [pc, #16]	; (800141c <main+0x78>)
 800140a:	4b08      	ldr	r3, [pc, #32]	; (800142c <main+0x88>)
 800140c:	0011      	movs	r1, r2
 800140e:	0018      	movs	r0, r3
 8001410:	f7ff ff1e 	bl	8001250 <alarmTest>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001414:	e7fe      	b.n	8001414 <main+0x70>
 8001416:	46c0      	nop			; (mov r8, r8)
 8001418:	200000c2 	.word	0x200000c2
 800141c:	200001a4 	.word	0x200001a4
 8001420:	200000fb 	.word	0x200000fb
 8001424:	20000084 	.word	0x20000084
 8001428:	200000d8 	.word	0x200000d8
 800142c:	2000012c 	.word	0x2000012c

08001430 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001430:	b590      	push	{r4, r7, lr}
 8001432:	b09f      	sub	sp, #124	; 0x7c
 8001434:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001436:	2440      	movs	r4, #64	; 0x40
 8001438:	193b      	adds	r3, r7, r4
 800143a:	0018      	movs	r0, r3
 800143c:	2338      	movs	r3, #56	; 0x38
 800143e:	001a      	movs	r2, r3
 8001440:	2100      	movs	r1, #0
 8001442:	f005 f946 	bl	80066d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001446:	232c      	movs	r3, #44	; 0x2c
 8001448:	18fb      	adds	r3, r7, r3
 800144a:	0018      	movs	r0, r3
 800144c:	2314      	movs	r3, #20
 800144e:	001a      	movs	r2, r3
 8001450:	2100      	movs	r1, #0
 8001452:	f005 f93e 	bl	80066d2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	0018      	movs	r0, r3
 800145a:	2328      	movs	r3, #40	; 0x28
 800145c:	001a      	movs	r2, r3
 800145e:	2100      	movs	r1, #0
 8001460:	f005 f937 	bl	80066d2 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001464:	4b31      	ldr	r3, [pc, #196]	; (800152c <SystemClock_Config+0xfc>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a31      	ldr	r2, [pc, #196]	; (8001530 <SystemClock_Config+0x100>)
 800146a:	401a      	ands	r2, r3
 800146c:	4b2f      	ldr	r3, [pc, #188]	; (800152c <SystemClock_Config+0xfc>)
 800146e:	2180      	movs	r1, #128	; 0x80
 8001470:	0109      	lsls	r1, r1, #4
 8001472:	430a      	orrs	r2, r1
 8001474:	601a      	str	r2, [r3, #0]
  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8001476:	f002 fa7d 	bl	8003974 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800147a:	4b2e      	ldr	r3, [pc, #184]	; (8001534 <SystemClock_Config+0x104>)
 800147c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800147e:	4b2d      	ldr	r3, [pc, #180]	; (8001534 <SystemClock_Config+0x104>)
 8001480:	492b      	ldr	r1, [pc, #172]	; (8001530 <SystemClock_Config+0x100>)
 8001482:	400a      	ands	r2, r1
 8001484:	651a      	str	r2, [r3, #80]	; 0x50
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8001486:	193b      	adds	r3, r7, r4
 8001488:	223c      	movs	r2, #60	; 0x3c
 800148a:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800148c:	193b      	adds	r3, r7, r4
 800148e:	2280      	movs	r2, #128	; 0x80
 8001490:	0052      	lsls	r2, r2, #1
 8001492:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001494:	0021      	movs	r1, r4
 8001496:	187b      	adds	r3, r7, r1
 8001498:	2201      	movs	r2, #1
 800149a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800149c:	187b      	adds	r3, r7, r1
 800149e:	2201      	movs	r2, #1
 80014a0:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80014a2:	187b      	adds	r3, r7, r1
 80014a4:	2201      	movs	r2, #1
 80014a6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80014a8:	187b      	adds	r3, r7, r1
 80014aa:	2200      	movs	r2, #0
 80014ac:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80014ae:	187b      	adds	r3, r7, r1
 80014b0:	22a0      	movs	r2, #160	; 0xa0
 80014b2:	0212      	lsls	r2, r2, #8
 80014b4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014b6:	187b      	adds	r3, r7, r1
 80014b8:	2200      	movs	r2, #0
 80014ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014bc:	187b      	adds	r3, r7, r1
 80014be:	0018      	movs	r0, r3
 80014c0:	f002 fa66 	bl	8003990 <HAL_RCC_OscConfig>
 80014c4:	1e03      	subs	r3, r0, #0
 80014c6:	d001      	beq.n	80014cc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80014c8:	f000 fb12 	bl	8001af0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014cc:	212c      	movs	r1, #44	; 0x2c
 80014ce:	187b      	adds	r3, r7, r1
 80014d0:	220f      	movs	r2, #15
 80014d2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80014d4:	187b      	adds	r3, r7, r1
 80014d6:	2200      	movs	r2, #0
 80014d8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014da:	187b      	adds	r3, r7, r1
 80014dc:	2200      	movs	r2, #0
 80014de:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014e0:	187b      	adds	r3, r7, r1
 80014e2:	2200      	movs	r2, #0
 80014e4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014e6:	187b      	adds	r3, r7, r1
 80014e8:	2200      	movs	r2, #0
 80014ea:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014ec:	187b      	adds	r3, r7, r1
 80014ee:	2100      	movs	r1, #0
 80014f0:	0018      	movs	r0, r3
 80014f2:	f002 fe1d 	bl	8004130 <HAL_RCC_ClockConfig>
 80014f6:	1e03      	subs	r3, r0, #0
 80014f8:	d001      	beq.n	80014fe <SystemClock_Config+0xce>
  {
    Error_Handler();
 80014fa:	f000 faf9 	bl	8001af0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_LPTIM1;
 80014fe:	1d3b      	adds	r3, r7, #4
 8001500:	22a0      	movs	r2, #160	; 0xa0
 8001502:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	2280      	movs	r2, #128	; 0x80
 8001508:	0292      	lsls	r2, r2, #10
 800150a:	605a      	str	r2, [r3, #4]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 800150c:	1d3b      	adds	r3, r7, #4
 800150e:	2200      	movs	r2, #0
 8001510:	621a      	str	r2, [r3, #32]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	0018      	movs	r0, r3
 8001516:	f002 ffb9 	bl	800448c <HAL_RCCEx_PeriphCLKConfig>
 800151a:	1e03      	subs	r3, r0, #0
 800151c:	d001      	beq.n	8001522 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800151e:	f000 fae7 	bl	8001af0 <Error_Handler>
  }
}
 8001522:	46c0      	nop			; (mov r8, r8)
 8001524:	46bd      	mov	sp, r7
 8001526:	b01f      	add	sp, #124	; 0x7c
 8001528:	bd90      	pop	{r4, r7, pc}
 800152a:	46c0      	nop			; (mov r8, r8)
 800152c:	40007000 	.word	0x40007000
 8001530:	ffffe7ff 	.word	0xffffe7ff
 8001534:	40021000 	.word	0x40021000

08001538 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800153e:	003b      	movs	r3, r7
 8001540:	0018      	movs	r0, r3
 8001542:	2308      	movs	r3, #8
 8001544:	001a      	movs	r2, r3
 8001546:	2100      	movs	r1, #0
 8001548:	f005 f8c3 	bl	80066d2 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 800154c:	4b2a      	ldr	r3, [pc, #168]	; (80015f8 <MX_ADC_Init+0xc0>)
 800154e:	4a2b      	ldr	r2, [pc, #172]	; (80015fc <MX_ADC_Init+0xc4>)
 8001550:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8001552:	4b29      	ldr	r3, [pc, #164]	; (80015f8 <MX_ADC_Init+0xc0>)
 8001554:	2200      	movs	r2, #0
 8001556:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8001558:	4b27      	ldr	r3, [pc, #156]	; (80015f8 <MX_ADC_Init+0xc0>)
 800155a:	22c0      	movs	r2, #192	; 0xc0
 800155c:	0612      	lsls	r2, r2, #24
 800155e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001560:	4b25      	ldr	r3, [pc, #148]	; (80015f8 <MX_ADC_Init+0xc0>)
 8001562:	2200      	movs	r2, #0
 8001564:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001566:	4b24      	ldr	r3, [pc, #144]	; (80015f8 <MX_ADC_Init+0xc0>)
 8001568:	2200      	movs	r2, #0
 800156a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800156c:	4b22      	ldr	r3, [pc, #136]	; (80015f8 <MX_ADC_Init+0xc0>)
 800156e:	2201      	movs	r2, #1
 8001570:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001572:	4b21      	ldr	r3, [pc, #132]	; (80015f8 <MX_ADC_Init+0xc0>)
 8001574:	2200      	movs	r2, #0
 8001576:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001578:	4b1f      	ldr	r3, [pc, #124]	; (80015f8 <MX_ADC_Init+0xc0>)
 800157a:	2220      	movs	r2, #32
 800157c:	2100      	movs	r1, #0
 800157e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001580:	4b1d      	ldr	r3, [pc, #116]	; (80015f8 <MX_ADC_Init+0xc0>)
 8001582:	2221      	movs	r2, #33	; 0x21
 8001584:	2100      	movs	r1, #0
 8001586:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001588:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <MX_ADC_Init+0xc0>)
 800158a:	2200      	movs	r2, #0
 800158c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800158e:	4b1a      	ldr	r3, [pc, #104]	; (80015f8 <MX_ADC_Init+0xc0>)
 8001590:	22c2      	movs	r2, #194	; 0xc2
 8001592:	32ff      	adds	r2, #255	; 0xff
 8001594:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001596:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <MX_ADC_Init+0xc0>)
 8001598:	222c      	movs	r2, #44	; 0x2c
 800159a:	2100      	movs	r1, #0
 800159c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800159e:	4b16      	ldr	r3, [pc, #88]	; (80015f8 <MX_ADC_Init+0xc0>)
 80015a0:	2204      	movs	r2, #4
 80015a2:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80015a4:	4b14      	ldr	r3, [pc, #80]	; (80015f8 <MX_ADC_Init+0xc0>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80015aa:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <MX_ADC_Init+0xc0>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80015b0:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <MX_ADC_Init+0xc0>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80015b6:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <MX_ADC_Init+0xc0>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80015bc:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <MX_ADC_Init+0xc0>)
 80015be:	0018      	movs	r0, r3
 80015c0:	f001 f8d4 	bl	800276c <HAL_ADC_Init>
 80015c4:	1e03      	subs	r3, r0, #0
 80015c6:	d001      	beq.n	80015cc <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80015c8:	f000 fa92 	bl	8001af0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80015cc:	003b      	movs	r3, r7
 80015ce:	2201      	movs	r2, #1
 80015d0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80015d2:	003b      	movs	r3, r7
 80015d4:	2280      	movs	r2, #128	; 0x80
 80015d6:	0152      	lsls	r2, r2, #5
 80015d8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015da:	003a      	movs	r2, r7
 80015dc:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <MX_ADC_Init+0xc0>)
 80015de:	0011      	movs	r1, r2
 80015e0:	0018      	movs	r0, r3
 80015e2:	f001 fa37 	bl	8002a54 <HAL_ADC_ConfigChannel>
 80015e6:	1e03      	subs	r3, r0, #0
 80015e8:	d001      	beq.n	80015ee <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80015ea:	f000 fa81 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80015ee:	46c0      	nop			; (mov r8, r8)
 80015f0:	46bd      	mov	sp, r7
 80015f2:	b002      	add	sp, #8
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	46c0      	nop			; (mov r8, r8)
 80015f8:	200001fc 	.word	0x200001fc
 80015fc:	40012400 	.word	0x40012400

08001600 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001604:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <MX_LPTIM1_Init+0x44>)
 8001606:	4a10      	ldr	r2, [pc, #64]	; (8001648 <MX_LPTIM1_Init+0x48>)
 8001608:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800160a:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <MX_LPTIM1_Init+0x44>)
 800160c:	2200      	movs	r2, #0
 800160e:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001610:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <MX_LPTIM1_Init+0x44>)
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001616:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <MX_LPTIM1_Init+0x44>)
 8001618:	4a0c      	ldr	r2, [pc, #48]	; (800164c <MX_LPTIM1_Init+0x4c>)
 800161a:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800161c:	4b09      	ldr	r3, [pc, #36]	; (8001644 <MX_LPTIM1_Init+0x44>)
 800161e:	2200      	movs	r2, #0
 8001620:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001622:	4b08      	ldr	r3, [pc, #32]	; (8001644 <MX_LPTIM1_Init+0x44>)
 8001624:	2200      	movs	r2, #0
 8001626:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <MX_LPTIM1_Init+0x44>)
 800162a:	2200      	movs	r2, #0
 800162c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 800162e:	4b05      	ldr	r3, [pc, #20]	; (8001644 <MX_LPTIM1_Init+0x44>)
 8001630:	0018      	movs	r0, r3
 8001632:	f001 fefb 	bl	800342c <HAL_LPTIM_Init>
 8001636:	1e03      	subs	r3, r0, #0
 8001638:	d001      	beq.n	800163e <MX_LPTIM1_Init+0x3e>
  {
    Error_Handler();
 800163a:	f000 fa59 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 800163e:	46c0      	nop			; (mov r8, r8)
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	200000fc 	.word	0x200000fc
 8001648:	40007c00 	.word	0x40007c00
 800164c:	0000ffff 	.word	0x0000ffff

08001650 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b090      	sub	sp, #64	; 0x40
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001656:	232c      	movs	r3, #44	; 0x2c
 8001658:	18fb      	adds	r3, r7, r3
 800165a:	0018      	movs	r0, r3
 800165c:	2314      	movs	r3, #20
 800165e:	001a      	movs	r2, r3
 8001660:	2100      	movs	r1, #0
 8001662:	f005 f836 	bl	80066d2 <memset>
  RTC_DateTypeDef sDate = {0};
 8001666:	2328      	movs	r3, #40	; 0x28
 8001668:	18fb      	adds	r3, r7, r3
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 800166e:	003b      	movs	r3, r7
 8001670:	0018      	movs	r0, r3
 8001672:	2328      	movs	r3, #40	; 0x28
 8001674:	001a      	movs	r2, r3
 8001676:	2100      	movs	r1, #0
 8001678:	f005 f82b 	bl	80066d2 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800167c:	4b4b      	ldr	r3, [pc, #300]	; (80017ac <MX_RTC_Init+0x15c>)
 800167e:	4a4c      	ldr	r2, [pc, #304]	; (80017b0 <MX_RTC_Init+0x160>)
 8001680:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001682:	4b4a      	ldr	r3, [pc, #296]	; (80017ac <MX_RTC_Init+0x15c>)
 8001684:	2200      	movs	r2, #0
 8001686:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001688:	4b48      	ldr	r3, [pc, #288]	; (80017ac <MX_RTC_Init+0x15c>)
 800168a:	227f      	movs	r2, #127	; 0x7f
 800168c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800168e:	4b47      	ldr	r3, [pc, #284]	; (80017ac <MX_RTC_Init+0x15c>)
 8001690:	22ff      	movs	r2, #255	; 0xff
 8001692:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001694:	4b45      	ldr	r3, [pc, #276]	; (80017ac <MX_RTC_Init+0x15c>)
 8001696:	2200      	movs	r2, #0
 8001698:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800169a:	4b44      	ldr	r3, [pc, #272]	; (80017ac <MX_RTC_Init+0x15c>)
 800169c:	2200      	movs	r2, #0
 800169e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80016a0:	4b42      	ldr	r3, [pc, #264]	; (80017ac <MX_RTC_Init+0x15c>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80016a6:	4b41      	ldr	r3, [pc, #260]	; (80017ac <MX_RTC_Init+0x15c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80016ac:	4b3f      	ldr	r3, [pc, #252]	; (80017ac <MX_RTC_Init+0x15c>)
 80016ae:	0018      	movs	r0, r3
 80016b0:	f003 f860 	bl	8004774 <HAL_RTC_Init>
 80016b4:	1e03      	subs	r3, r0, #0
 80016b6:	d001      	beq.n	80016bc <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 80016b8:	f000 fa1a 	bl	8001af0 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0;
 80016bc:	212c      	movs	r1, #44	; 0x2c
 80016be:	187b      	adds	r3, r7, r1
 80016c0:	2200      	movs	r2, #0
 80016c2:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 80016c4:	187b      	adds	r3, r7, r1
 80016c6:	2200      	movs	r2, #0
 80016c8:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 80016ca:	187b      	adds	r3, r7, r1
 80016cc:	2200      	movs	r2, #0
 80016ce:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80016d0:	187b      	adds	r3, r7, r1
 80016d2:	2200      	movs	r2, #0
 80016d4:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80016d6:	187b      	adds	r3, r7, r1
 80016d8:	2200      	movs	r2, #0
 80016da:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80016dc:	1879      	adds	r1, r7, r1
 80016de:	4b33      	ldr	r3, [pc, #204]	; (80017ac <MX_RTC_Init+0x15c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	0018      	movs	r0, r3
 80016e4:	f003 f8e4 	bl	80048b0 <HAL_RTC_SetTime>
 80016e8:	1e03      	subs	r3, r0, #0
 80016ea:	d001      	beq.n	80016f0 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 80016ec:	f000 fa00 	bl	8001af0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80016f0:	2128      	movs	r1, #40	; 0x28
 80016f2:	187b      	adds	r3, r7, r1
 80016f4:	2201      	movs	r2, #1
 80016f6:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80016f8:	187b      	adds	r3, r7, r1
 80016fa:	2201      	movs	r2, #1
 80016fc:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 80016fe:	187b      	adds	r3, r7, r1
 8001700:	2201      	movs	r2, #1
 8001702:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 8001704:	187b      	adds	r3, r7, r1
 8001706:	2200      	movs	r2, #0
 8001708:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800170a:	1879      	adds	r1, r7, r1
 800170c:	4b27      	ldr	r3, [pc, #156]	; (80017ac <MX_RTC_Init+0x15c>)
 800170e:	2200      	movs	r2, #0
 8001710:	0018      	movs	r0, r3
 8001712:	f003 f9ed 	bl	8004af0 <HAL_RTC_SetDate>
 8001716:	1e03      	subs	r3, r0, #0
 8001718:	d001      	beq.n	800171e <MX_RTC_Init+0xce>
  {
    Error_Handler();
 800171a:	f000 f9e9 	bl	8001af0 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0;
 800171e:	003b      	movs	r3, r7
 8001720:	2200      	movs	r2, #0
 8001722:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8001724:	003b      	movs	r3, r7
 8001726:	2200      	movs	r2, #0
 8001728:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 800172a:	003b      	movs	r3, r7
 800172c:	2200      	movs	r2, #0
 800172e:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8001730:	003b      	movs	r3, r7
 8001732:	2200      	movs	r2, #0
 8001734:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001736:	003b      	movs	r3, r7
 8001738:	2200      	movs	r2, #0
 800173a:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800173c:	003b      	movs	r3, r7
 800173e:	2200      	movs	r2, #0
 8001740:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001742:	003b      	movs	r3, r7
 8001744:	2200      	movs	r2, #0
 8001746:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001748:	003b      	movs	r3, r7
 800174a:	2200      	movs	r2, #0
 800174c:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 800174e:	003b      	movs	r3, r7
 8001750:	2280      	movs	r2, #128	; 0x80
 8001752:	05d2      	lsls	r2, r2, #23
 8001754:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8001756:	003b      	movs	r3, r7
 8001758:	2220      	movs	r2, #32
 800175a:	2101      	movs	r1, #1
 800175c:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 800175e:	003b      	movs	r3, r7
 8001760:	2280      	movs	r2, #128	; 0x80
 8001762:	0052      	lsls	r2, r2, #1
 8001764:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001766:	0039      	movs	r1, r7
 8001768:	4b10      	ldr	r3, [pc, #64]	; (80017ac <MX_RTC_Init+0x15c>)
 800176a:	2200      	movs	r2, #0
 800176c:	0018      	movs	r0, r3
 800176e:	f003 fabb 	bl	8004ce8 <HAL_RTC_SetAlarm>
 8001772:	1e03      	subs	r3, r0, #0
 8001774:	d001      	beq.n	800177a <MX_RTC_Init+0x12a>
  {
    Error_Handler();
 8001776:	f000 f9bb 	bl	8001af0 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800177a:	003b      	movs	r3, r7
 800177c:	2200      	movs	r2, #0
 800177e:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8001780:	003b      	movs	r3, r7
 8001782:	2220      	movs	r2, #32
 8001784:	2101      	movs	r1, #1
 8001786:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_B;
 8001788:	003b      	movs	r3, r7
 800178a:	2280      	movs	r2, #128	; 0x80
 800178c:	0092      	lsls	r2, r2, #2
 800178e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001790:	0039      	movs	r1, r7
 8001792:	4b06      	ldr	r3, [pc, #24]	; (80017ac <MX_RTC_Init+0x15c>)
 8001794:	2200      	movs	r2, #0
 8001796:	0018      	movs	r0, r3
 8001798:	f003 faa6 	bl	8004ce8 <HAL_RTC_SetAlarm>
 800179c:	1e03      	subs	r3, r0, #0
 800179e:	d001      	beq.n	80017a4 <MX_RTC_Init+0x154>
  {
    Error_Handler();
 80017a0:	f000 f9a6 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80017a4:	46c0      	nop			; (mov r8, r8)
 80017a6:	46bd      	mov	sp, r7
 80017a8:	b010      	add	sp, #64	; 0x40
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	2000012c 	.word	0x2000012c
 80017b0:	40002800 	.word	0x40002800

080017b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017b8:	4b19      	ldr	r3, [pc, #100]	; (8001820 <MX_SPI1_Init+0x6c>)
 80017ba:	4a1a      	ldr	r2, [pc, #104]	; (8001824 <MX_SPI1_Init+0x70>)
 80017bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017be:	4b18      	ldr	r3, [pc, #96]	; (8001820 <MX_SPI1_Init+0x6c>)
 80017c0:	2282      	movs	r2, #130	; 0x82
 80017c2:	0052      	lsls	r2, r2, #1
 80017c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017c6:	4b16      	ldr	r3, [pc, #88]	; (8001820 <MX_SPI1_Init+0x6c>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017cc:	4b14      	ldr	r3, [pc, #80]	; (8001820 <MX_SPI1_Init+0x6c>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017d2:	4b13      	ldr	r3, [pc, #76]	; (8001820 <MX_SPI1_Init+0x6c>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017d8:	4b11      	ldr	r3, [pc, #68]	; (8001820 <MX_SPI1_Init+0x6c>)
 80017da:	2200      	movs	r2, #0
 80017dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017de:	4b10      	ldr	r3, [pc, #64]	; (8001820 <MX_SPI1_Init+0x6c>)
 80017e0:	2280      	movs	r2, #128	; 0x80
 80017e2:	0092      	lsls	r2, r2, #2
 80017e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017e6:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <MX_SPI1_Init+0x6c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <MX_SPI1_Init+0x6c>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017f2:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <MX_SPI1_Init+0x6c>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017f8:	4b09      	ldr	r3, [pc, #36]	; (8001820 <MX_SPI1_Init+0x6c>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80017fe:	4b08      	ldr	r3, [pc, #32]	; (8001820 <MX_SPI1_Init+0x6c>)
 8001800:	2207      	movs	r2, #7
 8001802:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <MX_SPI1_Init+0x6c>)
 8001806:	0018      	movs	r0, r3
 8001808:	f003 fd78 	bl	80052fc <HAL_SPI_Init>
 800180c:	1e03      	subs	r3, r0, #0
 800180e:	d001      	beq.n	8001814 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001810:	f000 f96e 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  hspi1.hdmatx = &hdma_spi1_tx;
 8001814:	4b02      	ldr	r3, [pc, #8]	; (8001820 <MX_SPI1_Init+0x6c>)
 8001816:	4a04      	ldr	r2, [pc, #16]	; (8001828 <MX_SPI1_Init+0x74>)
 8001818:	649a      	str	r2, [r3, #72]	; 0x48
  /* USER CODE END SPI1_Init 2 */

}
 800181a:	46c0      	nop			; (mov r8, r8)
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	200001a4 	.word	0x200001a4
 8001824:	40013000 	.word	0x40013000
 8001828:	20000258 	.word	0x20000258

0800182c <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b08a      	sub	sp, #40	; 0x28
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001832:	2318      	movs	r3, #24
 8001834:	18fb      	adds	r3, r7, r3
 8001836:	0018      	movs	r0, r3
 8001838:	2310      	movs	r3, #16
 800183a:	001a      	movs	r2, r3
 800183c:	2100      	movs	r1, #0
 800183e:	f004 ff48 	bl	80066d2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001842:	2310      	movs	r3, #16
 8001844:	18fb      	adds	r3, r7, r3
 8001846:	0018      	movs	r0, r3
 8001848:	2308      	movs	r3, #8
 800184a:	001a      	movs	r2, r3
 800184c:	2100      	movs	r1, #0
 800184e:	f004 ff40 	bl	80066d2 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001852:	003b      	movs	r3, r7
 8001854:	0018      	movs	r0, r3
 8001856:	2310      	movs	r3, #16
 8001858:	001a      	movs	r2, r3
 800185a:	2100      	movs	r1, #0
 800185c:	f004 ff39 	bl	80066d2 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8001860:	4b37      	ldr	r3, [pc, #220]	; (8001940 <MX_TIM21_Init+0x114>)
 8001862:	4a38      	ldr	r2, [pc, #224]	; (8001944 <MX_TIM21_Init+0x118>)
 8001864:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 0;
 8001866:	4b36      	ldr	r3, [pc, #216]	; (8001940 <MX_TIM21_Init+0x114>)
 8001868:	2200      	movs	r2, #0
 800186a:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800186c:	4b34      	ldr	r3, [pc, #208]	; (8001940 <MX_TIM21_Init+0x114>)
 800186e:	2210      	movs	r2, #16
 8001870:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 0x8000;
 8001872:	4b33      	ldr	r3, [pc, #204]	; (8001940 <MX_TIM21_Init+0x114>)
 8001874:	2280      	movs	r2, #128	; 0x80
 8001876:	0212      	lsls	r2, r2, #8
 8001878:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800187a:	4b31      	ldr	r3, [pc, #196]	; (8001940 <MX_TIM21_Init+0x114>)
 800187c:	2200      	movs	r2, #0
 800187e:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001880:	4b2f      	ldr	r3, [pc, #188]	; (8001940 <MX_TIM21_Init+0x114>)
 8001882:	2200      	movs	r2, #0
 8001884:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8001886:	4b2e      	ldr	r3, [pc, #184]	; (8001940 <MX_TIM21_Init+0x114>)
 8001888:	0018      	movs	r0, r3
 800188a:	f004 f9fd 	bl	8005c88 <HAL_TIM_Base_Init>
 800188e:	1e03      	subs	r3, r0, #0
 8001890:	d001      	beq.n	8001896 <MX_TIM21_Init+0x6a>
  {
    Error_Handler();
 8001892:	f000 f92d 	bl	8001af0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8001896:	2118      	movs	r1, #24
 8001898:	187b      	adds	r3, r7, r1
 800189a:	2280      	movs	r2, #128	; 0x80
 800189c:	0192      	lsls	r2, r2, #6
 800189e:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80018a0:	187b      	adds	r3, r7, r1
 80018a2:	2200      	movs	r2, #0
 80018a4:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80018a6:	187b      	adds	r3, r7, r1
 80018a8:	2200      	movs	r2, #0
 80018aa:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 80018ac:	187b      	adds	r3, r7, r1
 80018ae:	2200      	movs	r2, #0
 80018b0:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 80018b2:	187a      	adds	r2, r7, r1
 80018b4:	4b22      	ldr	r3, [pc, #136]	; (8001940 <MX_TIM21_Init+0x114>)
 80018b6:	0011      	movs	r1, r2
 80018b8:	0018      	movs	r0, r3
 80018ba:	f004 fb9d 	bl	8005ff8 <HAL_TIM_ConfigClockSource>
 80018be:	1e03      	subs	r3, r0, #0
 80018c0:	d001      	beq.n	80018c6 <MX_TIM21_Init+0x9a>
  {
    Error_Handler();
 80018c2:	f000 f915 	bl	8001af0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim21) != HAL_OK)
 80018c6:	4b1e      	ldr	r3, [pc, #120]	; (8001940 <MX_TIM21_Init+0x114>)
 80018c8:	0018      	movs	r0, r3
 80018ca:	f004 fa2b 	bl	8005d24 <HAL_TIM_OC_Init>
 80018ce:	1e03      	subs	r3, r0, #0
 80018d0:	d001      	beq.n	80018d6 <MX_TIM21_Init+0xaa>
  {
    Error_Handler();
 80018d2:	f000 f90d 	bl	8001af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018d6:	2110      	movs	r1, #16
 80018d8:	187b      	adds	r3, r7, r1
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018de:	187b      	adds	r3, r7, r1
 80018e0:	2200      	movs	r2, #0
 80018e2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 80018e4:	187a      	adds	r2, r7, r1
 80018e6:	4b16      	ldr	r3, [pc, #88]	; (8001940 <MX_TIM21_Init+0x114>)
 80018e8:	0011      	movs	r1, r2
 80018ea:	0018      	movs	r0, r3
 80018ec:	f004 fe5e 	bl	80065ac <HAL_TIMEx_MasterConfigSynchronization>
 80018f0:	1e03      	subs	r3, r0, #0
 80018f2:	d001      	beq.n	80018f8 <MX_TIM21_Init+0xcc>
  {
    Error_Handler();
 80018f4:	f000 f8fc 	bl	8001af0 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim21, TIM21_ETR_LSE) != HAL_OK)
 80018f8:	4b11      	ldr	r3, [pc, #68]	; (8001940 <MX_TIM21_Init+0x114>)
 80018fa:	2103      	movs	r1, #3
 80018fc:	0018      	movs	r0, r3
 80018fe:	f004 fe98 	bl	8006632 <HAL_TIMEx_RemapConfig>
 8001902:	1e03      	subs	r3, r0, #0
 8001904:	d001      	beq.n	800190a <MX_TIM21_Init+0xde>
  {
    Error_Handler();
 8001906:	f000 f8f3 	bl	8001af0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800190a:	003b      	movs	r3, r7
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001910:	003b      	movs	r3, r7
 8001912:	2200      	movs	r2, #0
 8001914:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001916:	003b      	movs	r3, r7
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800191c:	003b      	movs	r3, r7
 800191e:	2200      	movs	r2, #0
 8001920:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001922:	0039      	movs	r1, r7
 8001924:	4b06      	ldr	r3, [pc, #24]	; (8001940 <MX_TIM21_Init+0x114>)
 8001926:	2200      	movs	r2, #0
 8001928:	0018      	movs	r0, r3
 800192a:	f004 fb17 	bl	8005f5c <HAL_TIM_OC_ConfigChannel>
 800192e:	1e03      	subs	r3, r0, #0
 8001930:	d001      	beq.n	8001936 <MX_TIM21_Init+0x10a>
  {
    Error_Handler();
 8001932:	f000 f8dd 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8001936:	46c0      	nop			; (mov r8, r8)
 8001938:	46bd      	mov	sp, r7
 800193a:	b00a      	add	sp, #40	; 0x28
 800193c:	bd80      	pop	{r7, pc}
 800193e:	46c0      	nop			; (mov r8, r8)
 8001940:	20000168 	.word	0x20000168
 8001944:	40010800 	.word	0x40010800

08001948 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800194e:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <MX_DMA_Init+0x38>)
 8001950:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001952:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <MX_DMA_Init+0x38>)
 8001954:	2101      	movs	r1, #1
 8001956:	430a      	orrs	r2, r1
 8001958:	631a      	str	r2, [r3, #48]	; 0x30
 800195a:	4b09      	ldr	r3, [pc, #36]	; (8001980 <MX_DMA_Init+0x38>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	2201      	movs	r2, #1
 8001960:	4013      	ands	r3, r2
 8001962:	607b      	str	r3, [r7, #4]
 8001964:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001966:	2200      	movs	r2, #0
 8001968:	2100      	movs	r1, #0
 800196a:	200a      	movs	r0, #10
 800196c:	f001 f9d8 	bl	8002d20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001970:	200a      	movs	r0, #10
 8001972:	f001 f9ea 	bl	8002d4a <HAL_NVIC_EnableIRQ>

}
 8001976:	46c0      	nop			; (mov r8, r8)
 8001978:	46bd      	mov	sp, r7
 800197a:	b002      	add	sp, #8
 800197c:	bd80      	pop	{r7, pc}
 800197e:	46c0      	nop			; (mov r8, r8)
 8001980:	40021000 	.word	0x40021000

08001984 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001984:	b590      	push	{r4, r7, lr}
 8001986:	b089      	sub	sp, #36	; 0x24
 8001988:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198a:	240c      	movs	r4, #12
 800198c:	193b      	adds	r3, r7, r4
 800198e:	0018      	movs	r0, r3
 8001990:	2314      	movs	r3, #20
 8001992:	001a      	movs	r2, r3
 8001994:	2100      	movs	r1, #0
 8001996:	f004 fe9c 	bl	80066d2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800199a:	4b50      	ldr	r3, [pc, #320]	; (8001adc <MX_GPIO_Init+0x158>)
 800199c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800199e:	4b4f      	ldr	r3, [pc, #316]	; (8001adc <MX_GPIO_Init+0x158>)
 80019a0:	2104      	movs	r1, #4
 80019a2:	430a      	orrs	r2, r1
 80019a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80019a6:	4b4d      	ldr	r3, [pc, #308]	; (8001adc <MX_GPIO_Init+0x158>)
 80019a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019aa:	2204      	movs	r2, #4
 80019ac:	4013      	ands	r3, r2
 80019ae:	60bb      	str	r3, [r7, #8]
 80019b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b2:	4b4a      	ldr	r3, [pc, #296]	; (8001adc <MX_GPIO_Init+0x158>)
 80019b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019b6:	4b49      	ldr	r3, [pc, #292]	; (8001adc <MX_GPIO_Init+0x158>)
 80019b8:	2101      	movs	r1, #1
 80019ba:	430a      	orrs	r2, r1
 80019bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80019be:	4b47      	ldr	r3, [pc, #284]	; (8001adc <MX_GPIO_Init+0x158>)
 80019c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c2:	2201      	movs	r2, #1
 80019c4:	4013      	ands	r3, r2
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ca:	4b44      	ldr	r3, [pc, #272]	; (8001adc <MX_GPIO_Init+0x158>)
 80019cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019ce:	4b43      	ldr	r3, [pc, #268]	; (8001adc <MX_GPIO_Init+0x158>)
 80019d0:	2102      	movs	r1, #2
 80019d2:	430a      	orrs	r2, r1
 80019d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80019d6:	4b41      	ldr	r3, [pc, #260]	; (8001adc <MX_GPIO_Init+0x158>)
 80019d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019da:	2202      	movs	r2, #2
 80019dc:	4013      	ands	r3, r2
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_7, GPIO_PIN_RESET);
 80019e2:	4b3f      	ldr	r3, [pc, #252]	; (8001ae0 <MX_GPIO_Init+0x15c>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	2183      	movs	r1, #131	; 0x83
 80019e8:	0018      	movs	r0, r3
 80019ea:	f001 fcd4 	bl	8003396 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_6, GPIO_PIN_RESET);
 80019ee:	4b3d      	ldr	r3, [pc, #244]	; (8001ae4 <MX_GPIO_Init+0x160>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	2142      	movs	r1, #66	; 0x42
 80019f4:	0018      	movs	r0, r3
 80019f6:	f001 fcce 	bl	8003396 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_7;
 80019fa:	0021      	movs	r1, r4
 80019fc:	187b      	adds	r3, r7, r1
 80019fe:	2283      	movs	r2, #131	; 0x83
 8001a00:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a02:	187b      	adds	r3, r7, r1
 8001a04:	2201      	movs	r2, #1
 8001a06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	187b      	adds	r3, r7, r1
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0e:	187b      	adds	r3, r7, r1
 8001a10:	2200      	movs	r2, #0
 8001a12:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a14:	000c      	movs	r4, r1
 8001a16:	187b      	adds	r3, r7, r1
 8001a18:	4a31      	ldr	r2, [pc, #196]	; (8001ae0 <MX_GPIO_Init+0x15c>)
 8001a1a:	0019      	movs	r1, r3
 8001a1c:	0010      	movs	r0, r2
 8001a1e:	f001 fb1f 	bl	8003060 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8001a22:	0021      	movs	r1, r4
 8001a24:	187b      	adds	r3, r7, r1
 8001a26:	2242      	movs	r2, #66	; 0x42
 8001a28:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2a:	187b      	adds	r3, r7, r1
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	187b      	adds	r3, r7, r1
 8001a32:	2200      	movs	r2, #0
 8001a34:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a36:	187b      	adds	r3, r7, r1
 8001a38:	2200      	movs	r2, #0
 8001a3a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a3c:	000c      	movs	r4, r1
 8001a3e:	187b      	adds	r3, r7, r1
 8001a40:	4a28      	ldr	r2, [pc, #160]	; (8001ae4 <MX_GPIO_Init+0x160>)
 8001a42:	0019      	movs	r1, r3
 8001a44:	0010      	movs	r0, r2
 8001a46:	f001 fb0b 	bl	8003060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a4a:	0021      	movs	r1, r4
 8001a4c:	187b      	adds	r3, r7, r1
 8001a4e:	2204      	movs	r2, #4
 8001a50:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a52:	187b      	adds	r3, r7, r1
 8001a54:	4a24      	ldr	r2, [pc, #144]	; (8001ae8 <MX_GPIO_Init+0x164>)
 8001a56:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	187b      	adds	r3, r7, r1
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a5e:	000c      	movs	r4, r1
 8001a60:	187b      	adds	r3, r7, r1
 8001a62:	4a20      	ldr	r2, [pc, #128]	; (8001ae4 <MX_GPIO_Init+0x160>)
 8001a64:	0019      	movs	r1, r3
 8001a66:	0010      	movs	r0, r2
 8001a68:	f001 fafa 	bl	8003060 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001a6c:	0021      	movs	r1, r4
 8001a6e:	187b      	adds	r3, r7, r1
 8001a70:	22c0      	movs	r2, #192	; 0xc0
 8001a72:	01d2      	lsls	r2, r2, #7
 8001a74:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a76:	187b      	adds	r3, r7, r1
 8001a78:	4a1b      	ldr	r2, [pc, #108]	; (8001ae8 <MX_GPIO_Init+0x164>)
 8001a7a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a7c:	187b      	adds	r3, r7, r1
 8001a7e:	2202      	movs	r2, #2
 8001a80:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a82:	000c      	movs	r4, r1
 8001a84:	187b      	adds	r3, r7, r1
 8001a86:	4a17      	ldr	r2, [pc, #92]	; (8001ae4 <MX_GPIO_Init+0x160>)
 8001a88:	0019      	movs	r1, r3
 8001a8a:	0010      	movs	r0, r2
 8001a8c:	f001 fae8 	bl	8003060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a90:	0021      	movs	r1, r4
 8001a92:	187b      	adds	r3, r7, r1
 8001a94:	2280      	movs	r2, #128	; 0x80
 8001a96:	0212      	lsls	r2, r2, #8
 8001a98:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a9a:	187b      	adds	r3, r7, r1
 8001a9c:	4a13      	ldr	r2, [pc, #76]	; (8001aec <MX_GPIO_Init+0x168>)
 8001a9e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aa0:	187b      	adds	r3, r7, r1
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa6:	187b      	adds	r3, r7, r1
 8001aa8:	4a0e      	ldr	r2, [pc, #56]	; (8001ae4 <MX_GPIO_Init+0x160>)
 8001aaa:	0019      	movs	r1, r3
 8001aac:	0010      	movs	r0, r2
 8001aae:	f001 fad7 	bl	8003060 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	2006      	movs	r0, #6
 8001ab8:	f001 f932 	bl	8002d20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8001abc:	2006      	movs	r0, #6
 8001abe:	f001 f944 	bl	8002d4a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	2007      	movs	r0, #7
 8001ac8:	f001 f92a 	bl	8002d20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001acc:	2007      	movs	r0, #7
 8001ace:	f001 f93c 	bl	8002d4a <HAL_NVIC_EnableIRQ>

}
 8001ad2:	46c0      	nop			; (mov r8, r8)
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	b009      	add	sp, #36	; 0x24
 8001ad8:	bd90      	pop	{r4, r7, pc}
 8001ada:	46c0      	nop			; (mov r8, r8)
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	50000800 	.word	0x50000800
 8001ae4:	50000400 	.word	0x50000400
 8001ae8:	10110000 	.word	0x10110000
 8001aec:	10210000 	.word	0x10210000

08001af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001af4:	46c0      	nop			; (mov r8, r8)
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <HAL_GPIO_EXTI_Callback>:
	}
}

// this sure is a big callback
// need to complete
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	0002      	movs	r2, r0
 8001b04:	1dbb      	adds	r3, r7, #6
 8001b06:	801a      	strh	r2, [r3, #0]
	/* program flow:
	 *   check current face used
	 *   check current variables and check button pressed
	 */
//	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);	// should run for any button
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8001b08:	4bb9      	ldr	r3, [pc, #740]	; (8001df0 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8001b0a:	2102      	movs	r1, #2
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	f001 fc5f 	bl	80033d0 <HAL_GPIO_TogglePin>
	if (GPIO_Pin == BUTTON0) {
 8001b12:	1dbb      	adds	r3, r7, #6
 8001b14:	881b      	ldrh	r3, [r3, #0]
 8001b16:	2b04      	cmp	r3, #4
 8001b18:	d110      	bne.n	8001b3c <HAL_GPIO_EXTI_Callback+0x40>
		face = (face + 1) % NUM_FACES;
 8001b1a:	4bb6      	ldr	r3, [pc, #728]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	4ab5      	ldr	r2, [pc, #724]	; (8001df8 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8001b22:	4013      	ands	r3, r2
 8001b24:	d504      	bpl.n	8001b30 <HAL_GPIO_EXTI_Callback+0x34>
 8001b26:	3b01      	subs	r3, #1
 8001b28:	2204      	movs	r2, #4
 8001b2a:	4252      	negs	r2, r2
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	3301      	adds	r3, #1
 8001b30:	001a      	movs	r2, r3
 8001b32:	4bb0      	ldr	r3, [pc, #704]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8001b34:	601a      	str	r2, [r3, #0]
		updateFace = 1;
 8001b36:	4bb1      	ldr	r3, [pc, #708]	; (8001dfc <HAL_GPIO_EXTI_Callback+0x300>)
 8001b38:	2201      	movs	r2, #1
 8001b3a:	701a      	strb	r2, [r3, #0]
	}
	// use RTC
	if (face == faceClock) {
 8001b3c:	4bad      	ldr	r3, [pc, #692]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d000      	beq.n	8001b46 <HAL_GPIO_EXTI_Callback+0x4a>
 8001b44:	e0d1      	b.n	8001cea <HAL_GPIO_EXTI_Callback+0x1ee>
		updateClock = 1;
 8001b46:	4bae      	ldr	r3, [pc, #696]	; (8001e00 <HAL_GPIO_EXTI_Callback+0x304>)
 8001b48:	2201      	movs	r2, #1
 8001b4a:	701a      	strb	r2, [r3, #0]
		if (GPIO_Pin == BUTTON1 && clockSet) {
 8001b4c:	1dbb      	adds	r3, r7, #6
 8001b4e:	881a      	ldrh	r2, [r3, #0]
 8001b50:	2380      	movs	r3, #128	; 0x80
 8001b52:	019b      	lsls	r3, r3, #6
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d145      	bne.n	8001be4 <HAL_GPIO_EXTI_Callback+0xe8>
 8001b58:	4baa      	ldr	r3, [pc, #680]	; (8001e04 <HAL_GPIO_EXTI_Callback+0x308>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d041      	beq.n	8001be4 <HAL_GPIO_EXTI_Callback+0xe8>
			// change fields up, do nothing if not setting clock
			switch (clockField) {
 8001b60:	4ba9      	ldr	r3, [pc, #676]	; (8001e08 <HAL_GPIO_EXTI_Callback+0x30c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b05      	cmp	r3, #5
 8001b66:	d83f      	bhi.n	8001be8 <HAL_GPIO_EXTI_Callback+0xec>
 8001b68:	009a      	lsls	r2, r3, #2
 8001b6a:	4ba8      	ldr	r3, [pc, #672]	; (8001e0c <HAL_GPIO_EXTI_Callback+0x310>)
 8001b6c:	18d3      	adds	r3, r2, r3
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	469f      	mov	pc, r3
				case 1: tempClockTimes.min = (tempClockTimes.min+1) % 60; break;
 8001b72:	4ba7      	ldr	r3, [pc, #668]	; (8001e10 <HAL_GPIO_EXTI_Callback+0x314>)
 8001b74:	785b      	ldrb	r3, [r3, #1]
 8001b76:	3301      	adds	r3, #1
 8001b78:	213c      	movs	r1, #60	; 0x3c
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	f7fe fc34 	bl	80003e8 <__aeabi_idivmod>
 8001b80:	000b      	movs	r3, r1
 8001b82:	b2da      	uxtb	r2, r3
 8001b84:	4ba2      	ldr	r3, [pc, #648]	; (8001e10 <HAL_GPIO_EXTI_Callback+0x314>)
 8001b86:	705a      	strb	r2, [r3, #1]
 8001b88:	e02f      	b.n	8001bea <HAL_GPIO_EXTI_Callback+0xee>
				case 2: tempClockTimes.hr = (tempClockTimes.hr+1) % 24; break;
 8001b8a:	4ba1      	ldr	r3, [pc, #644]	; (8001e10 <HAL_GPIO_EXTI_Callback+0x314>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	2118      	movs	r1, #24
 8001b92:	0018      	movs	r0, r3
 8001b94:	f7fe fc28 	bl	80003e8 <__aeabi_idivmod>
 8001b98:	000b      	movs	r3, r1
 8001b9a:	b2da      	uxtb	r2, r3
 8001b9c:	4b9c      	ldr	r3, [pc, #624]	; (8001e10 <HAL_GPIO_EXTI_Callback+0x314>)
 8001b9e:	701a      	strb	r2, [r3, #0]
 8001ba0:	e023      	b.n	8001bea <HAL_GPIO_EXTI_Callback+0xee>
				case 3: tempClockDate.yr++; break;		// supposed to be between large numbers. no need for bounds checking
 8001ba2:	4b9c      	ldr	r3, [pc, #624]	; (8001e14 <HAL_GPIO_EXTI_Callback+0x318>)
 8001ba4:	881b      	ldrh	r3, [r3, #0]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	4b9a      	ldr	r3, [pc, #616]	; (8001e14 <HAL_GPIO_EXTI_Callback+0x318>)
 8001bac:	801a      	strh	r2, [r3, #0]
 8001bae:	e01c      	b.n	8001bea <HAL_GPIO_EXTI_Callback+0xee>
				case 4: tempClockDate.month = (tempClockDate.month+1) % 12 + 1; break;
 8001bb0:	4b98      	ldr	r3, [pc, #608]	; (8001e14 <HAL_GPIO_EXTI_Callback+0x318>)
 8001bb2:	789b      	ldrb	r3, [r3, #2]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	210c      	movs	r1, #12
 8001bb8:	0018      	movs	r0, r3
 8001bba:	f7fe fc15 	bl	80003e8 <__aeabi_idivmod>
 8001bbe:	000b      	movs	r3, r1
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	4b93      	ldr	r3, [pc, #588]	; (8001e14 <HAL_GPIO_EXTI_Callback+0x318>)
 8001bc8:	709a      	strb	r2, [r3, #2]
 8001bca:	e00e      	b.n	8001bea <HAL_GPIO_EXTI_Callback+0xee>
				case 5: tempClockDate.date = (tempClockDate.date+1) % 31; break;		// make more robust?
 8001bcc:	4b91      	ldr	r3, [pc, #580]	; (8001e14 <HAL_GPIO_EXTI_Callback+0x318>)
 8001bce:	78db      	ldrb	r3, [r3, #3]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	211f      	movs	r1, #31
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	f7fe fc07 	bl	80003e8 <__aeabi_idivmod>
 8001bda:	000b      	movs	r3, r1
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	4b8d      	ldr	r3, [pc, #564]	; (8001e14 <HAL_GPIO_EXTI_Callback+0x318>)
 8001be0:	70da      	strb	r2, [r3, #3]
 8001be2:	e002      	b.n	8001bea <HAL_GPIO_EXTI_Callback+0xee>
				default: break;
			}
		}
 8001be4:	46c0      	nop			; (mov r8, r8)
 8001be6:	e000      	b.n	8001bea <HAL_GPIO_EXTI_Callback+0xee>
				default: break;
 8001be8:	46c0      	nop			; (mov r8, r8)
		if (GPIO_Pin == BUTTON2 && clockSet) {
 8001bea:	1dbb      	adds	r3, r7, #6
 8001bec:	881a      	ldrh	r2, [r3, #0]
 8001bee:	2380      	movs	r3, #128	; 0x80
 8001bf0:	01db      	lsls	r3, r3, #7
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d147      	bne.n	8001c86 <HAL_GPIO_EXTI_Callback+0x18a>
 8001bf6:	4b83      	ldr	r3, [pc, #524]	; (8001e04 <HAL_GPIO_EXTI_Callback+0x308>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d043      	beq.n	8001c86 <HAL_GPIO_EXTI_Callback+0x18a>
			// change fields down, do nothing if not setting clock
			switch (clockField) {
 8001bfe:	4b82      	ldr	r3, [pc, #520]	; (8001e08 <HAL_GPIO_EXTI_Callback+0x30c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2b05      	cmp	r3, #5
 8001c04:	d841      	bhi.n	8001c8a <HAL_GPIO_EXTI_Callback+0x18e>
 8001c06:	009a      	lsls	r2, r3, #2
 8001c08:	4b83      	ldr	r3, [pc, #524]	; (8001e18 <HAL_GPIO_EXTI_Callback+0x31c>)
 8001c0a:	18d3      	adds	r3, r2, r3
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	469f      	mov	pc, r3
				case 1: tempClockTimes.min = tempClockTimes.min == 0 ? 59 : tempClockTimes.min-1; break;
 8001c10:	4b7f      	ldr	r3, [pc, #508]	; (8001e10 <HAL_GPIO_EXTI_Callback+0x314>)
 8001c12:	785b      	ldrb	r3, [r3, #1]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d004      	beq.n	8001c22 <HAL_GPIO_EXTI_Callback+0x126>
 8001c18:	4b7d      	ldr	r3, [pc, #500]	; (8001e10 <HAL_GPIO_EXTI_Callback+0x314>)
 8001c1a:	785b      	ldrb	r3, [r3, #1]
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	e000      	b.n	8001c24 <HAL_GPIO_EXTI_Callback+0x128>
 8001c22:	223b      	movs	r2, #59	; 0x3b
 8001c24:	4b7a      	ldr	r3, [pc, #488]	; (8001e10 <HAL_GPIO_EXTI_Callback+0x314>)
 8001c26:	705a      	strb	r2, [r3, #1]
 8001c28:	e030      	b.n	8001c8c <HAL_GPIO_EXTI_Callback+0x190>
				case 2: tempClockTimes.hr = tempClockTimes.hr == 0 ? 24 : tempClockTimes.hr-1; break;
 8001c2a:	4b79      	ldr	r3, [pc, #484]	; (8001e10 <HAL_GPIO_EXTI_Callback+0x314>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d004      	beq.n	8001c3c <HAL_GPIO_EXTI_Callback+0x140>
 8001c32:	4b77      	ldr	r3, [pc, #476]	; (8001e10 <HAL_GPIO_EXTI_Callback+0x314>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	3b01      	subs	r3, #1
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	e000      	b.n	8001c3e <HAL_GPIO_EXTI_Callback+0x142>
 8001c3c:	2218      	movs	r2, #24
 8001c3e:	4b74      	ldr	r3, [pc, #464]	; (8001e10 <HAL_GPIO_EXTI_Callback+0x314>)
 8001c40:	701a      	strb	r2, [r3, #0]
 8001c42:	e023      	b.n	8001c8c <HAL_GPIO_EXTI_Callback+0x190>
				case 3: tempClockDate.yr--; break;		// supposed to be from 1950-2050. no need to do bounds checking
 8001c44:	4b73      	ldr	r3, [pc, #460]	; (8001e14 <HAL_GPIO_EXTI_Callback+0x318>)
 8001c46:	881b      	ldrh	r3, [r3, #0]
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	4b71      	ldr	r3, [pc, #452]	; (8001e14 <HAL_GPIO_EXTI_Callback+0x318>)
 8001c4e:	801a      	strh	r2, [r3, #0]
 8001c50:	e01c      	b.n	8001c8c <HAL_GPIO_EXTI_Callback+0x190>
				case 4: tempClockDate.month = tempClockDate.month == 1 ? 12 : tempClockDate.month-1; break;
 8001c52:	4b70      	ldr	r3, [pc, #448]	; (8001e14 <HAL_GPIO_EXTI_Callback+0x318>)
 8001c54:	789b      	ldrb	r3, [r3, #2]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d004      	beq.n	8001c64 <HAL_GPIO_EXTI_Callback+0x168>
 8001c5a:	4b6e      	ldr	r3, [pc, #440]	; (8001e14 <HAL_GPIO_EXTI_Callback+0x318>)
 8001c5c:	789b      	ldrb	r3, [r3, #2]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	e000      	b.n	8001c66 <HAL_GPIO_EXTI_Callback+0x16a>
 8001c64:	220c      	movs	r2, #12
 8001c66:	4b6b      	ldr	r3, [pc, #428]	; (8001e14 <HAL_GPIO_EXTI_Callback+0x318>)
 8001c68:	709a      	strb	r2, [r3, #2]
 8001c6a:	e00f      	b.n	8001c8c <HAL_GPIO_EXTI_Callback+0x190>
				case 5: tempClockDate.date = tempClockDate.date == 0 ? 31 : tempClockDate.date-1; break;
 8001c6c:	4b69      	ldr	r3, [pc, #420]	; (8001e14 <HAL_GPIO_EXTI_Callback+0x318>)
 8001c6e:	78db      	ldrb	r3, [r3, #3]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d004      	beq.n	8001c7e <HAL_GPIO_EXTI_Callback+0x182>
 8001c74:	4b67      	ldr	r3, [pc, #412]	; (8001e14 <HAL_GPIO_EXTI_Callback+0x318>)
 8001c76:	78db      	ldrb	r3, [r3, #3]
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	e000      	b.n	8001c80 <HAL_GPIO_EXTI_Callback+0x184>
 8001c7e:	221f      	movs	r2, #31
 8001c80:	4b64      	ldr	r3, [pc, #400]	; (8001e14 <HAL_GPIO_EXTI_Callback+0x318>)
 8001c82:	70da      	strb	r2, [r3, #3]
 8001c84:	e002      	b.n	8001c8c <HAL_GPIO_EXTI_Callback+0x190>
				default: break;
			}
		}
 8001c86:	46c0      	nop			; (mov r8, r8)
 8001c88:	e000      	b.n	8001c8c <HAL_GPIO_EXTI_Callback+0x190>
				default: break;
 8001c8a:	46c0      	nop			; (mov r8, r8)
		if (GPIO_Pin == BUTTON3) {
 8001c8c:	1dbb      	adds	r3, r7, #6
 8001c8e:	881a      	ldrh	r2, [r3, #0]
 8001c90:	2380      	movs	r3, #128	; 0x80
 8001c92:	021b      	lsls	r3, r3, #8
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d000      	beq.n	8001c9a <HAL_GPIO_EXTI_Callback+0x19e>
 8001c98:	e23f      	b.n	800211a <HAL_GPIO_EXTI_Callback+0x61e>
			clockField = (clockField + 1) % (NUM_CLOCKFIELDS + 1);
 8001c9a:	4b5b      	ldr	r3, [pc, #364]	; (8001e08 <HAL_GPIO_EXTI_Callback+0x30c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	2106      	movs	r1, #6
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	f7fe fba0 	bl	80003e8 <__aeabi_idivmod>
 8001ca8:	000b      	movs	r3, r1
 8001caa:	001a      	movs	r2, r3
 8001cac:	4b56      	ldr	r3, [pc, #344]	; (8001e08 <HAL_GPIO_EXTI_Callback+0x30c>)
 8001cae:	601a      	str	r2, [r3, #0]
			if (clockField != 0) {
 8001cb0:	4b55      	ldr	r3, [pc, #340]	; (8001e08 <HAL_GPIO_EXTI_Callback+0x30c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d00e      	beq.n	8001cd6 <HAL_GPIO_EXTI_Callback+0x1da>
				clockSet = 1;
 8001cb8:	4b52      	ldr	r3, [pc, #328]	; (8001e04 <HAL_GPIO_EXTI_Callback+0x308>)
 8001cba:	2201      	movs	r2, #1
 8001cbc:	601a      	str	r2, [r3, #0]
				if (clockField == 1) getDateTime(&tempClockDate, &tempClockTimes, &hrtc);	// should pull current time on setting 1st field
 8001cbe:	4b52      	ldr	r3, [pc, #328]	; (8001e08 <HAL_GPIO_EXTI_Callback+0x30c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d000      	beq.n	8001cc8 <HAL_GPIO_EXTI_Callback+0x1cc>
 8001cc6:	e228      	b.n	800211a <HAL_GPIO_EXTI_Callback+0x61e>
 8001cc8:	4a54      	ldr	r2, [pc, #336]	; (8001e1c <HAL_GPIO_EXTI_Callback+0x320>)
 8001cca:	4951      	ldr	r1, [pc, #324]	; (8001e10 <HAL_GPIO_EXTI_Callback+0x314>)
 8001ccc:	4b51      	ldr	r3, [pc, #324]	; (8001e14 <HAL_GPIO_EXTI_Callback+0x318>)
 8001cce:	0018      	movs	r0, r3
 8001cd0:	f7ff fa72 	bl	80011b8 <getDateTime>
			// clear stopwatch hw
			stopwatchRunning = 0;
			clearStopwatch(&hlptim1);
		}
	}
}
 8001cd4:	e221      	b.n	800211a <HAL_GPIO_EXTI_Callback+0x61e>
				clockSet = 0;
 8001cd6:	4b4b      	ldr	r3, [pc, #300]	; (8001e04 <HAL_GPIO_EXTI_Callback+0x308>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
				setDateTime(&tempClockDate, &tempClockTimes, &hrtc);
 8001cdc:	4a4f      	ldr	r2, [pc, #316]	; (8001e1c <HAL_GPIO_EXTI_Callback+0x320>)
 8001cde:	494c      	ldr	r1, [pc, #304]	; (8001e10 <HAL_GPIO_EXTI_Callback+0x314>)
 8001ce0:	4b4c      	ldr	r3, [pc, #304]	; (8001e14 <HAL_GPIO_EXTI_Callback+0x318>)
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	f7ff f907 	bl	8000ef6 <setDateTime>
}
 8001ce8:	e217      	b.n	800211a <HAL_GPIO_EXTI_Callback+0x61e>
	else if (face == faceTimer) {
 8001cea:	4b42      	ldr	r3, [pc, #264]	; (8001df4 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d000      	beq.n	8001cf4 <HAL_GPIO_EXTI_Callback+0x1f8>
 8001cf2:	e0fa      	b.n	8001eea <HAL_GPIO_EXTI_Callback+0x3ee>
		updateTimer = 1;
 8001cf4:	4b4a      	ldr	r3, [pc, #296]	; (8001e20 <HAL_GPIO_EXTI_Callback+0x324>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	701a      	strb	r2, [r3, #0]
		if (timerRunning == 0) {
 8001cfa:	4b4a      	ldr	r3, [pc, #296]	; (8001e24 <HAL_GPIO_EXTI_Callback+0x328>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d000      	beq.n	8001d04 <HAL_GPIO_EXTI_Callback+0x208>
 8001d02:	e0d0      	b.n	8001ea6 <HAL_GPIO_EXTI_Callback+0x3aa>
			if (GPIO_Pin == BUTTON1) {
 8001d04:	1dbb      	adds	r3, r7, #6
 8001d06:	881a      	ldrh	r2, [r3, #0]
 8001d08:	2380      	movs	r3, #128	; 0x80
 8001d0a:	019b      	lsls	r3, r3, #6
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d134      	bne.n	8001d7a <HAL_GPIO_EXTI_Callback+0x27e>
				if (timerSet == 0) timerRunning = 1;
 8001d10:	4b45      	ldr	r3, [pc, #276]	; (8001e28 <HAL_GPIO_EXTI_Callback+0x32c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d103      	bne.n	8001d20 <HAL_GPIO_EXTI_Callback+0x224>
 8001d18:	4b42      	ldr	r3, [pc, #264]	; (8001e24 <HAL_GPIO_EXTI_Callback+0x328>)
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	e02d      	b.n	8001d7c <HAL_GPIO_EXTI_Callback+0x280>
					switch (timerField) {
 8001d20:	4b42      	ldr	r3, [pc, #264]	; (8001e2c <HAL_GPIO_EXTI_Callback+0x330>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d010      	beq.n	8001d4a <HAL_GPIO_EXTI_Callback+0x24e>
 8001d28:	2b03      	cmp	r3, #3
 8001d2a:	d01a      	beq.n	8001d62 <HAL_GPIO_EXTI_Callback+0x266>
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d000      	beq.n	8001d32 <HAL_GPIO_EXTI_Callback+0x236>
						default: break;
 8001d30:	e024      	b.n	8001d7c <HAL_GPIO_EXTI_Callback+0x280>
						case 1: tempTimer.sec = (tempTimer.sec+1) % 60; break;
 8001d32:	4b3f      	ldr	r3, [pc, #252]	; (8001e30 <HAL_GPIO_EXTI_Callback+0x334>)
 8001d34:	789b      	ldrb	r3, [r3, #2]
 8001d36:	3301      	adds	r3, #1
 8001d38:	213c      	movs	r1, #60	; 0x3c
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	f7fe fb54 	bl	80003e8 <__aeabi_idivmod>
 8001d40:	000b      	movs	r3, r1
 8001d42:	b2da      	uxtb	r2, r3
 8001d44:	4b3a      	ldr	r3, [pc, #232]	; (8001e30 <HAL_GPIO_EXTI_Callback+0x334>)
 8001d46:	709a      	strb	r2, [r3, #2]
 8001d48:	e018      	b.n	8001d7c <HAL_GPIO_EXTI_Callback+0x280>
						case 2: tempTimer.min = (tempTimer.min+1) % 60; break;
 8001d4a:	4b39      	ldr	r3, [pc, #228]	; (8001e30 <HAL_GPIO_EXTI_Callback+0x334>)
 8001d4c:	785b      	ldrb	r3, [r3, #1]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	213c      	movs	r1, #60	; 0x3c
 8001d52:	0018      	movs	r0, r3
 8001d54:	f7fe fb48 	bl	80003e8 <__aeabi_idivmod>
 8001d58:	000b      	movs	r3, r1
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	4b34      	ldr	r3, [pc, #208]	; (8001e30 <HAL_GPIO_EXTI_Callback+0x334>)
 8001d5e:	705a      	strb	r2, [r3, #1]
 8001d60:	e00c      	b.n	8001d7c <HAL_GPIO_EXTI_Callback+0x280>
						case 3: tempTimer.hr = (tempTimer.hr+1) % 24; break;
 8001d62:	4b33      	ldr	r3, [pc, #204]	; (8001e30 <HAL_GPIO_EXTI_Callback+0x334>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	3301      	adds	r3, #1
 8001d68:	2118      	movs	r1, #24
 8001d6a:	0018      	movs	r0, r3
 8001d6c:	f7fe fb3c 	bl	80003e8 <__aeabi_idivmod>
 8001d70:	000b      	movs	r3, r1
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	4b2e      	ldr	r3, [pc, #184]	; (8001e30 <HAL_GPIO_EXTI_Callback+0x334>)
 8001d76:	701a      	strb	r2, [r3, #0]
 8001d78:	e000      	b.n	8001d7c <HAL_GPIO_EXTI_Callback+0x280>
				}
 8001d7a:	46c0      	nop			; (mov r8, r8)
			if (GPIO_Pin == BUTTON2) {
 8001d7c:	1dbb      	adds	r3, r7, #6
 8001d7e:	881a      	ldrh	r2, [r3, #0]
 8001d80:	2380      	movs	r3, #128	; 0x80
 8001d82:	01db      	lsls	r3, r3, #7
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d155      	bne.n	8001e34 <HAL_GPIO_EXTI_Callback+0x338>
				if (timerSet == 1) {
 8001d88:	4b27      	ldr	r3, [pc, #156]	; (8001e28 <HAL_GPIO_EXTI_Callback+0x32c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d151      	bne.n	8001e34 <HAL_GPIO_EXTI_Callback+0x338>
					switch (timerField) {
 8001d90:	4b26      	ldr	r3, [pc, #152]	; (8001e2c <HAL_GPIO_EXTI_Callback+0x330>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d011      	beq.n	8001dbc <HAL_GPIO_EXTI_Callback+0x2c0>
 8001d98:	2b03      	cmp	r3, #3
 8001d9a:	d01c      	beq.n	8001dd6 <HAL_GPIO_EXTI_Callback+0x2da>
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d000      	beq.n	8001da2 <HAL_GPIO_EXTI_Callback+0x2a6>
						default: break;
 8001da0:	e049      	b.n	8001e36 <HAL_GPIO_EXTI_Callback+0x33a>
						case 1: tempTimer.sec = tempTimer.sec == 0 ? 59 : tempTimer.sec-1; break;
 8001da2:	4b23      	ldr	r3, [pc, #140]	; (8001e30 <HAL_GPIO_EXTI_Callback+0x334>)
 8001da4:	789b      	ldrb	r3, [r3, #2]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d004      	beq.n	8001db4 <HAL_GPIO_EXTI_Callback+0x2b8>
 8001daa:	4b21      	ldr	r3, [pc, #132]	; (8001e30 <HAL_GPIO_EXTI_Callback+0x334>)
 8001dac:	789b      	ldrb	r3, [r3, #2]
 8001dae:	3b01      	subs	r3, #1
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	e000      	b.n	8001db6 <HAL_GPIO_EXTI_Callback+0x2ba>
 8001db4:	223b      	movs	r2, #59	; 0x3b
 8001db6:	4b1e      	ldr	r3, [pc, #120]	; (8001e30 <HAL_GPIO_EXTI_Callback+0x334>)
 8001db8:	709a      	strb	r2, [r3, #2]
 8001dba:	e03c      	b.n	8001e36 <HAL_GPIO_EXTI_Callback+0x33a>
						case 2: tempTimer.min = tempTimer.min == 0 ? 59 : tempTimer.min-1; break;
 8001dbc:	4b1c      	ldr	r3, [pc, #112]	; (8001e30 <HAL_GPIO_EXTI_Callback+0x334>)
 8001dbe:	785b      	ldrb	r3, [r3, #1]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d004      	beq.n	8001dce <HAL_GPIO_EXTI_Callback+0x2d2>
 8001dc4:	4b1a      	ldr	r3, [pc, #104]	; (8001e30 <HAL_GPIO_EXTI_Callback+0x334>)
 8001dc6:	785b      	ldrb	r3, [r3, #1]
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	b2da      	uxtb	r2, r3
 8001dcc:	e000      	b.n	8001dd0 <HAL_GPIO_EXTI_Callback+0x2d4>
 8001dce:	223b      	movs	r2, #59	; 0x3b
 8001dd0:	4b17      	ldr	r3, [pc, #92]	; (8001e30 <HAL_GPIO_EXTI_Callback+0x334>)
 8001dd2:	705a      	strb	r2, [r3, #1]
 8001dd4:	e02f      	b.n	8001e36 <HAL_GPIO_EXTI_Callback+0x33a>
						case 3: tempTimer.hr = tempTimer.hr == 0 ? 23 : tempTimer.hr-1; break;
 8001dd6:	4b16      	ldr	r3, [pc, #88]	; (8001e30 <HAL_GPIO_EXTI_Callback+0x334>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d004      	beq.n	8001de8 <HAL_GPIO_EXTI_Callback+0x2ec>
 8001dde:	4b14      	ldr	r3, [pc, #80]	; (8001e30 <HAL_GPIO_EXTI_Callback+0x334>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	e000      	b.n	8001dea <HAL_GPIO_EXTI_Callback+0x2ee>
 8001de8:	2217      	movs	r2, #23
 8001dea:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <HAL_GPIO_EXTI_Callback+0x334>)
 8001dec:	701a      	strb	r2, [r3, #0]
 8001dee:	e022      	b.n	8001e36 <HAL_GPIO_EXTI_Callback+0x33a>
 8001df0:	50000400 	.word	0x50000400
 8001df4:	20000088 	.word	0x20000088
 8001df8:	80000003 	.word	0x80000003
 8001dfc:	200000fb 	.word	0x200000fb
 8001e00:	200000d8 	.word	0x200000d8
 8001e04:	2000008c 	.word	0x2000008c
 8001e08:	20000090 	.word	0x20000090
 8001e0c:	080074c8 	.word	0x080074c8
 8001e10:	200000d4 	.word	0x200000d4
 8001e14:	2000015c 	.word	0x2000015c
 8001e18:	080074e0 	.word	0x080074e0
 8001e1c:	2000012c 	.word	0x2000012c
 8001e20:	20000154 	.word	0x20000154
 8001e24:	2000009c 	.word	0x2000009c
 8001e28:	20000094 	.word	0x20000094
 8001e2c:	20000098 	.word	0x20000098
 8001e30:	200000c8 	.word	0x200000c8
				}
 8001e34:	46c0      	nop			; (mov r8, r8)
			if (GPIO_Pin == BUTTON3) {
 8001e36:	1dbb      	adds	r3, r7, #6
 8001e38:	881a      	ldrh	r2, [r3, #0]
 8001e3a:	2380      	movs	r3, #128	; 0x80
 8001e3c:	021b      	lsls	r3, r3, #8
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d000      	beq.n	8001e44 <HAL_GPIO_EXTI_Callback+0x348>
 8001e42:	e16a      	b.n	800211a <HAL_GPIO_EXTI_Callback+0x61e>
				timerField = (timerField + 1) % (NUM_TIMERFIELDS + 1);
 8001e44:	4bb7      	ldr	r3, [pc, #732]	; (8002124 <HAL_GPIO_EXTI_Callback+0x628>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	4ab7      	ldr	r2, [pc, #732]	; (8002128 <HAL_GPIO_EXTI_Callback+0x62c>)
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	d504      	bpl.n	8001e5a <HAL_GPIO_EXTI_Callback+0x35e>
 8001e50:	3b01      	subs	r3, #1
 8001e52:	2204      	movs	r2, #4
 8001e54:	4252      	negs	r2, r2
 8001e56:	4313      	orrs	r3, r2
 8001e58:	3301      	adds	r3, #1
 8001e5a:	001a      	movs	r2, r3
 8001e5c:	4bb1      	ldr	r3, [pc, #708]	; (8002124 <HAL_GPIO_EXTI_Callback+0x628>)
 8001e5e:	601a      	str	r2, [r3, #0]
				if (timerField != 0) {
 8001e60:	4bb0      	ldr	r3, [pc, #704]	; (8002124 <HAL_GPIO_EXTI_Callback+0x628>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d011      	beq.n	8001e8c <HAL_GPIO_EXTI_Callback+0x390>
					timerSet = 1;
 8001e68:	4bb0      	ldr	r3, [pc, #704]	; (800212c <HAL_GPIO_EXTI_Callback+0x630>)
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	601a      	str	r2, [r3, #0]
					if (timerField == 1) {
 8001e6e:	4bad      	ldr	r3, [pc, #692]	; (8002124 <HAL_GPIO_EXTI_Callback+0x628>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d000      	beq.n	8001e78 <HAL_GPIO_EXTI_Callback+0x37c>
 8001e76:	e150      	b.n	800211a <HAL_GPIO_EXTI_Callback+0x61e>
						tempTimer.sec = 0;
 8001e78:	4bad      	ldr	r3, [pc, #692]	; (8002130 <HAL_GPIO_EXTI_Callback+0x634>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	709a      	strb	r2, [r3, #2]
						tempTimer.min = 0;
 8001e7e:	4bac      	ldr	r3, [pc, #688]	; (8002130 <HAL_GPIO_EXTI_Callback+0x634>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	705a      	strb	r2, [r3, #1]
						tempTimer.hr = 0;
 8001e84:	4baa      	ldr	r3, [pc, #680]	; (8002130 <HAL_GPIO_EXTI_Callback+0x634>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	701a      	strb	r2, [r3, #0]
}
 8001e8a:	e146      	b.n	800211a <HAL_GPIO_EXTI_Callback+0x61e>
					timerSet = 0;
 8001e8c:	4ba7      	ldr	r3, [pc, #668]	; (800212c <HAL_GPIO_EXTI_Callback+0x630>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]
					timerRunning = 1;	// careful where this gets set/unset
 8001e92:	4ba8      	ldr	r3, [pc, #672]	; (8002134 <HAL_GPIO_EXTI_Callback+0x638>)
 8001e94:	2201      	movs	r2, #1
 8001e96:	601a      	str	r2, [r3, #0]
					setTimer(&tempTimer, &hrtc, &htim21);
 8001e98:	4aa7      	ldr	r2, [pc, #668]	; (8002138 <HAL_GPIO_EXTI_Callback+0x63c>)
 8001e9a:	49a8      	ldr	r1, [pc, #672]	; (800213c <HAL_GPIO_EXTI_Callback+0x640>)
 8001e9c:	4ba4      	ldr	r3, [pc, #656]	; (8002130 <HAL_GPIO_EXTI_Callback+0x634>)
 8001e9e:	0018      	movs	r0, r3
 8001ea0:	f7ff f89e 	bl	8000fe0 <setTimer>
}
 8001ea4:	e139      	b.n	800211a <HAL_GPIO_EXTI_Callback+0x61e>
		else if (timerRunning == 1) {
 8001ea6:	4ba3      	ldr	r3, [pc, #652]	; (8002134 <HAL_GPIO_EXTI_Callback+0x638>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d000      	beq.n	8001eb0 <HAL_GPIO_EXTI_Callback+0x3b4>
 8001eae:	e134      	b.n	800211a <HAL_GPIO_EXTI_Callback+0x61e>
			if (GPIO_Pin == BUTTON1) {
 8001eb0:	1dbb      	adds	r3, r7, #6
 8001eb2:	881a      	ldrh	r2, [r3, #0]
 8001eb4:	2380      	movs	r3, #128	; 0x80
 8001eb6:	019b      	lsls	r3, r3, #6
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d102      	bne.n	8001ec2 <HAL_GPIO_EXTI_Callback+0x3c6>
				timerRunning = 1;
 8001ebc:	4b9d      	ldr	r3, [pc, #628]	; (8002134 <HAL_GPIO_EXTI_Callback+0x638>)
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	601a      	str	r2, [r3, #0]
			if (GPIO_Pin == BUTTON2) {
 8001ec2:	1dbb      	adds	r3, r7, #6
 8001ec4:	881a      	ldrh	r2, [r3, #0]
 8001ec6:	2380      	movs	r3, #128	; 0x80
 8001ec8:	01db      	lsls	r3, r3, #7
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d102      	bne.n	8001ed4 <HAL_GPIO_EXTI_Callback+0x3d8>
				timerRunning = 0;
 8001ece:	4b99      	ldr	r3, [pc, #612]	; (8002134 <HAL_GPIO_EXTI_Callback+0x638>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
			if (GPIO_Pin == BUTTON3) {
 8001ed4:	1dbb      	adds	r3, r7, #6
 8001ed6:	881a      	ldrh	r2, [r3, #0]
 8001ed8:	2380      	movs	r3, #128	; 0x80
 8001eda:	021b      	lsls	r3, r3, #8
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d000      	beq.n	8001ee2 <HAL_GPIO_EXTI_Callback+0x3e6>
 8001ee0:	e11b      	b.n	800211a <HAL_GPIO_EXTI_Callback+0x61e>
				timerRunning = 0;
 8001ee2:	4b94      	ldr	r3, [pc, #592]	; (8002134 <HAL_GPIO_EXTI_Callback+0x638>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
}
 8001ee8:	e117      	b.n	800211a <HAL_GPIO_EXTI_Callback+0x61e>
	else if (face == faceAlarm) {
 8001eea:	4b95      	ldr	r3, [pc, #596]	; (8002140 <HAL_GPIO_EXTI_Callback+0x644>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d000      	beq.n	8001ef4 <HAL_GPIO_EXTI_Callback+0x3f8>
 8001ef2:	e0d7      	b.n	80020a4 <HAL_GPIO_EXTI_Callback+0x5a8>
		updateAlarm = 1;
 8001ef4:	4b93      	ldr	r3, [pc, #588]	; (8002144 <HAL_GPIO_EXTI_Callback+0x648>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	701a      	strb	r2, [r3, #0]
		if (alarmRunning == 0) {
 8001efa:	4b93      	ldr	r3, [pc, #588]	; (8002148 <HAL_GPIO_EXTI_Callback+0x64c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d000      	beq.n	8001f04 <HAL_GPIO_EXTI_Callback+0x408>
 8001f02:	e0c1      	b.n	8002088 <HAL_GPIO_EXTI_Callback+0x58c>
			if (GPIO_Pin == BUTTON1 && alarmSet) {
 8001f04:	1dbb      	adds	r3, r7, #6
 8001f06:	881a      	ldrh	r2, [r3, #0]
 8001f08:	2380      	movs	r3, #128	; 0x80
 8001f0a:	019b      	lsls	r3, r3, #6
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d142      	bne.n	8001f96 <HAL_GPIO_EXTI_Callback+0x49a>
 8001f10:	4b8e      	ldr	r3, [pc, #568]	; (800214c <HAL_GPIO_EXTI_Callback+0x650>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d03e      	beq.n	8001f96 <HAL_GPIO_EXTI_Callback+0x49a>
				switch (alarmField) {
 8001f18:	4b8d      	ldr	r3, [pc, #564]	; (8002150 <HAL_GPIO_EXTI_Callback+0x654>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d014      	beq.n	8001f4a <HAL_GPIO_EXTI_Callback+0x44e>
 8001f20:	dc02      	bgt.n	8001f28 <HAL_GPIO_EXTI_Callback+0x42c>
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d005      	beq.n	8001f32 <HAL_GPIO_EXTI_Callback+0x436>
					default: break;
 8001f26:	e037      	b.n	8001f98 <HAL_GPIO_EXTI_Callback+0x49c>
				switch (alarmField) {
 8001f28:	2b03      	cmp	r3, #3
 8001f2a:	d01a      	beq.n	8001f62 <HAL_GPIO_EXTI_Callback+0x466>
 8001f2c:	2b04      	cmp	r3, #4
 8001f2e:	d024      	beq.n	8001f7a <HAL_GPIO_EXTI_Callback+0x47e>
					default: break;
 8001f30:	e032      	b.n	8001f98 <HAL_GPIO_EXTI_Callback+0x49c>
					case 1: tempAlarm.sec = (tempAlarm.sec + 1) % 60; break;
 8001f32:	4b88      	ldr	r3, [pc, #544]	; (8002154 <HAL_GPIO_EXTI_Callback+0x658>)
 8001f34:	789b      	ldrb	r3, [r3, #2]
 8001f36:	3301      	adds	r3, #1
 8001f38:	213c      	movs	r1, #60	; 0x3c
 8001f3a:	0018      	movs	r0, r3
 8001f3c:	f7fe fa54 	bl	80003e8 <__aeabi_idivmod>
 8001f40:	000b      	movs	r3, r1
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	4b83      	ldr	r3, [pc, #524]	; (8002154 <HAL_GPIO_EXTI_Callback+0x658>)
 8001f46:	709a      	strb	r2, [r3, #2]
 8001f48:	e026      	b.n	8001f98 <HAL_GPIO_EXTI_Callback+0x49c>
					case 2: tempAlarm.min = (tempAlarm.min + 1) % 60; break;
 8001f4a:	4b82      	ldr	r3, [pc, #520]	; (8002154 <HAL_GPIO_EXTI_Callback+0x658>)
 8001f4c:	785b      	ldrb	r3, [r3, #1]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	213c      	movs	r1, #60	; 0x3c
 8001f52:	0018      	movs	r0, r3
 8001f54:	f7fe fa48 	bl	80003e8 <__aeabi_idivmod>
 8001f58:	000b      	movs	r3, r1
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	4b7d      	ldr	r3, [pc, #500]	; (8002154 <HAL_GPIO_EXTI_Callback+0x658>)
 8001f5e:	705a      	strb	r2, [r3, #1]
 8001f60:	e01a      	b.n	8001f98 <HAL_GPIO_EXTI_Callback+0x49c>
					case 3: tempAlarm.hr = (tempAlarm.hr + 1) % 24; break;
 8001f62:	4b7c      	ldr	r3, [pc, #496]	; (8002154 <HAL_GPIO_EXTI_Callback+0x658>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	3301      	adds	r3, #1
 8001f68:	2118      	movs	r1, #24
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	f7fe fa3c 	bl	80003e8 <__aeabi_idivmod>
 8001f70:	000b      	movs	r3, r1
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	4b77      	ldr	r3, [pc, #476]	; (8002154 <HAL_GPIO_EXTI_Callback+0x658>)
 8001f76:	701a      	strb	r2, [r3, #0]
 8001f78:	e00e      	b.n	8001f98 <HAL_GPIO_EXTI_Callback+0x49c>
					case 4: tempAlarm.weekday = (tempAlarm.weekday + 1) % 7 + 1; break;
 8001f7a:	4b76      	ldr	r3, [pc, #472]	; (8002154 <HAL_GPIO_EXTI_Callback+0x658>)
 8001f7c:	78db      	ldrb	r3, [r3, #3]
 8001f7e:	3301      	adds	r3, #1
 8001f80:	2107      	movs	r1, #7
 8001f82:	0018      	movs	r0, r3
 8001f84:	f7fe fa30 	bl	80003e8 <__aeabi_idivmod>
 8001f88:	000b      	movs	r3, r1
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	b2da      	uxtb	r2, r3
 8001f90:	4b70      	ldr	r3, [pc, #448]	; (8002154 <HAL_GPIO_EXTI_Callback+0x658>)
 8001f92:	70da      	strb	r2, [r3, #3]
 8001f94:	e000      	b.n	8001f98 <HAL_GPIO_EXTI_Callback+0x49c>
			}
 8001f96:	46c0      	nop			; (mov r8, r8)
			if (GPIO_Pin == BUTTON2 && alarmSet) {
 8001f98:	1dbb      	adds	r3, r7, #6
 8001f9a:	881a      	ldrh	r2, [r3, #0]
 8001f9c:	2380      	movs	r3, #128	; 0x80
 8001f9e:	01db      	lsls	r3, r3, #7
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d140      	bne.n	8002026 <HAL_GPIO_EXTI_Callback+0x52a>
 8001fa4:	4b69      	ldr	r3, [pc, #420]	; (800214c <HAL_GPIO_EXTI_Callback+0x650>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d03c      	beq.n	8002026 <HAL_GPIO_EXTI_Callback+0x52a>
				switch (alarmField) {
 8001fac:	4b68      	ldr	r3, [pc, #416]	; (8002150 <HAL_GPIO_EXTI_Callback+0x654>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d014      	beq.n	8001fde <HAL_GPIO_EXTI_Callback+0x4e2>
 8001fb4:	dc02      	bgt.n	8001fbc <HAL_GPIO_EXTI_Callback+0x4c0>
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d005      	beq.n	8001fc6 <HAL_GPIO_EXTI_Callback+0x4ca>
 8001fba:	e034      	b.n	8002026 <HAL_GPIO_EXTI_Callback+0x52a>
 8001fbc:	2b03      	cmp	r3, #3
 8001fbe:	d01a      	beq.n	8001ff6 <HAL_GPIO_EXTI_Callback+0x4fa>
 8001fc0:	2b04      	cmp	r3, #4
 8001fc2:	d024      	beq.n	800200e <HAL_GPIO_EXTI_Callback+0x512>
 8001fc4:	e02f      	b.n	8002026 <HAL_GPIO_EXTI_Callback+0x52a>
					case 1: tempAlarm.sec = tempAlarm.sec == 0 ? 59 : tempAlarm.sec-1;
 8001fc6:	4b63      	ldr	r3, [pc, #396]	; (8002154 <HAL_GPIO_EXTI_Callback+0x658>)
 8001fc8:	789b      	ldrb	r3, [r3, #2]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d004      	beq.n	8001fd8 <HAL_GPIO_EXTI_Callback+0x4dc>
 8001fce:	4b61      	ldr	r3, [pc, #388]	; (8002154 <HAL_GPIO_EXTI_Callback+0x658>)
 8001fd0:	789b      	ldrb	r3, [r3, #2]
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	e000      	b.n	8001fda <HAL_GPIO_EXTI_Callback+0x4de>
 8001fd8:	223b      	movs	r2, #59	; 0x3b
 8001fda:	4b5e      	ldr	r3, [pc, #376]	; (8002154 <HAL_GPIO_EXTI_Callback+0x658>)
 8001fdc:	709a      	strb	r2, [r3, #2]
					case 2: tempAlarm.min = tempAlarm.min == 0 ? 59 : tempAlarm.min-1;
 8001fde:	4b5d      	ldr	r3, [pc, #372]	; (8002154 <HAL_GPIO_EXTI_Callback+0x658>)
 8001fe0:	785b      	ldrb	r3, [r3, #1]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d004      	beq.n	8001ff0 <HAL_GPIO_EXTI_Callback+0x4f4>
 8001fe6:	4b5b      	ldr	r3, [pc, #364]	; (8002154 <HAL_GPIO_EXTI_Callback+0x658>)
 8001fe8:	785b      	ldrb	r3, [r3, #1]
 8001fea:	3b01      	subs	r3, #1
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	e000      	b.n	8001ff2 <HAL_GPIO_EXTI_Callback+0x4f6>
 8001ff0:	223b      	movs	r2, #59	; 0x3b
 8001ff2:	4b58      	ldr	r3, [pc, #352]	; (8002154 <HAL_GPIO_EXTI_Callback+0x658>)
 8001ff4:	705a      	strb	r2, [r3, #1]
					case 3: tempAlarm.hr = tempAlarm.hr == 0 ? 23 : tempAlarm.hr-1;
 8001ff6:	4b57      	ldr	r3, [pc, #348]	; (8002154 <HAL_GPIO_EXTI_Callback+0x658>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d004      	beq.n	8002008 <HAL_GPIO_EXTI_Callback+0x50c>
 8001ffe:	4b55      	ldr	r3, [pc, #340]	; (8002154 <HAL_GPIO_EXTI_Callback+0x658>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	3b01      	subs	r3, #1
 8002004:	b2da      	uxtb	r2, r3
 8002006:	e000      	b.n	800200a <HAL_GPIO_EXTI_Callback+0x50e>
 8002008:	2217      	movs	r2, #23
 800200a:	4b52      	ldr	r3, [pc, #328]	; (8002154 <HAL_GPIO_EXTI_Callback+0x658>)
 800200c:	701a      	strb	r2, [r3, #0]
					case 4: tempAlarm.weekday = tempAlarm.weekday == 1 ? 7 : tempAlarm.weekday-1;
 800200e:	4b51      	ldr	r3, [pc, #324]	; (8002154 <HAL_GPIO_EXTI_Callback+0x658>)
 8002010:	78db      	ldrb	r3, [r3, #3]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d004      	beq.n	8002020 <HAL_GPIO_EXTI_Callback+0x524>
 8002016:	4b4f      	ldr	r3, [pc, #316]	; (8002154 <HAL_GPIO_EXTI_Callback+0x658>)
 8002018:	78db      	ldrb	r3, [r3, #3]
 800201a:	3b01      	subs	r3, #1
 800201c:	b2da      	uxtb	r2, r3
 800201e:	e000      	b.n	8002022 <HAL_GPIO_EXTI_Callback+0x526>
 8002020:	2207      	movs	r2, #7
 8002022:	4b4c      	ldr	r3, [pc, #304]	; (8002154 <HAL_GPIO_EXTI_Callback+0x658>)
 8002024:	70da      	strb	r2, [r3, #3]
			if (GPIO_Pin == BUTTON3) {
 8002026:	1dbb      	adds	r3, r7, #6
 8002028:	881a      	ldrh	r2, [r3, #0]
 800202a:	2380      	movs	r3, #128	; 0x80
 800202c:	021b      	lsls	r3, r3, #8
 800202e:	429a      	cmp	r2, r3
 8002030:	d000      	beq.n	8002034 <HAL_GPIO_EXTI_Callback+0x538>
 8002032:	e072      	b.n	800211a <HAL_GPIO_EXTI_Callback+0x61e>
				alarmField = (alarmField + 1) % (NUM_ALARMFIELDS + 1);
 8002034:	4b46      	ldr	r3, [pc, #280]	; (8002150 <HAL_GPIO_EXTI_Callback+0x654>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	3301      	adds	r3, #1
 800203a:	2105      	movs	r1, #5
 800203c:	0018      	movs	r0, r3
 800203e:	f7fe f9d3 	bl	80003e8 <__aeabi_idivmod>
 8002042:	000b      	movs	r3, r1
 8002044:	001a      	movs	r2, r3
 8002046:	4b42      	ldr	r3, [pc, #264]	; (8002150 <HAL_GPIO_EXTI_Callback+0x654>)
 8002048:	601a      	str	r2, [r3, #0]
				if (alarmField != 0) {
 800204a:	4b41      	ldr	r3, [pc, #260]	; (8002150 <HAL_GPIO_EXTI_Callback+0x654>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d013      	beq.n	800207a <HAL_GPIO_EXTI_Callback+0x57e>
					alarmSet = 1;
 8002052:	4b3e      	ldr	r3, [pc, #248]	; (800214c <HAL_GPIO_EXTI_Callback+0x650>)
 8002054:	2201      	movs	r2, #1
 8002056:	601a      	str	r2, [r3, #0]
					if (alarmField == 1) {
 8002058:	4b3d      	ldr	r3, [pc, #244]	; (8002150 <HAL_GPIO_EXTI_Callback+0x654>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d15c      	bne.n	800211a <HAL_GPIO_EXTI_Callback+0x61e>
						tempAlarm.sec = 0;
 8002060:	4b3c      	ldr	r3, [pc, #240]	; (8002154 <HAL_GPIO_EXTI_Callback+0x658>)
 8002062:	2200      	movs	r2, #0
 8002064:	709a      	strb	r2, [r3, #2]
						tempAlarm.min = 0;
 8002066:	4b3b      	ldr	r3, [pc, #236]	; (8002154 <HAL_GPIO_EXTI_Callback+0x658>)
 8002068:	2200      	movs	r2, #0
 800206a:	705a      	strb	r2, [r3, #1]
						tempAlarm.hr = 0;
 800206c:	4b39      	ldr	r3, [pc, #228]	; (8002154 <HAL_GPIO_EXTI_Callback+0x658>)
 800206e:	2200      	movs	r2, #0
 8002070:	701a      	strb	r2, [r3, #0]
						tempAlarm.weekday = 1;
 8002072:	4b38      	ldr	r3, [pc, #224]	; (8002154 <HAL_GPIO_EXTI_Callback+0x658>)
 8002074:	2201      	movs	r2, #1
 8002076:	70da      	strb	r2, [r3, #3]
}
 8002078:	e04f      	b.n	800211a <HAL_GPIO_EXTI_Callback+0x61e>
					alarmSet = 0;
 800207a:	4b34      	ldr	r3, [pc, #208]	; (800214c <HAL_GPIO_EXTI_Callback+0x650>)
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
					alarmRunning = 1;
 8002080:	4b31      	ldr	r3, [pc, #196]	; (8002148 <HAL_GPIO_EXTI_Callback+0x64c>)
 8002082:	2201      	movs	r2, #1
 8002084:	601a      	str	r2, [r3, #0]
}
 8002086:	e048      	b.n	800211a <HAL_GPIO_EXTI_Callback+0x61e>
		else if (alarmRunning == 1) {
 8002088:	4b2f      	ldr	r3, [pc, #188]	; (8002148 <HAL_GPIO_EXTI_Callback+0x64c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d144      	bne.n	800211a <HAL_GPIO_EXTI_Callback+0x61e>
			if (GPIO_Pin == BUTTON3) {
 8002090:	1dbb      	adds	r3, r7, #6
 8002092:	881a      	ldrh	r2, [r3, #0]
 8002094:	2380      	movs	r3, #128	; 0x80
 8002096:	021b      	lsls	r3, r3, #8
 8002098:	429a      	cmp	r2, r3
 800209a:	d13e      	bne.n	800211a <HAL_GPIO_EXTI_Callback+0x61e>
				alarmRunning = 0;
 800209c:	4b2a      	ldr	r3, [pc, #168]	; (8002148 <HAL_GPIO_EXTI_Callback+0x64c>)
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
}
 80020a2:	e03a      	b.n	800211a <HAL_GPIO_EXTI_Callback+0x61e>
	else if (face == faceStopwatch) {
 80020a4:	4b26      	ldr	r3, [pc, #152]	; (8002140 <HAL_GPIO_EXTI_Callback+0x644>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2b03      	cmp	r3, #3
 80020aa:	d136      	bne.n	800211a <HAL_GPIO_EXTI_Callback+0x61e>
		updateStopwatch = 1;
 80020ac:	4b2a      	ldr	r3, [pc, #168]	; (8002158 <HAL_GPIO_EXTI_Callback+0x65c>)
 80020ae:	2201      	movs	r2, #1
 80020b0:	701a      	strb	r2, [r3, #0]
		if (GPIO_Pin == BUTTON1) {	// start/stop
 80020b2:	1dbb      	adds	r3, r7, #6
 80020b4:	881a      	ldrh	r2, [r3, #0]
 80020b6:	2380      	movs	r3, #128	; 0x80
 80020b8:	019b      	lsls	r3, r3, #6
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d112      	bne.n	80020e4 <HAL_GPIO_EXTI_Callback+0x5e8>
			if (stopwatchRunning == 0) {
 80020be:	4b27      	ldr	r3, [pc, #156]	; (800215c <HAL_GPIO_EXTI_Callback+0x660>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d107      	bne.n	80020d6 <HAL_GPIO_EXTI_Callback+0x5da>
				stopwatchRunning = 1;
 80020c6:	4b25      	ldr	r3, [pc, #148]	; (800215c <HAL_GPIO_EXTI_Callback+0x660>)
 80020c8:	2201      	movs	r2, #1
 80020ca:	601a      	str	r2, [r3, #0]
				runStopwatch(&hlptim1);
 80020cc:	4b24      	ldr	r3, [pc, #144]	; (8002160 <HAL_GPIO_EXTI_Callback+0x664>)
 80020ce:	0018      	movs	r0, r3
 80020d0:	f000 fa40 	bl	8002554 <runStopwatch>
 80020d4:	e006      	b.n	80020e4 <HAL_GPIO_EXTI_Callback+0x5e8>
				stopwatchRunning = 0;
 80020d6:	4b21      	ldr	r3, [pc, #132]	; (800215c <HAL_GPIO_EXTI_Callback+0x660>)
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
				pauseStopwatch(&hlptim1);
 80020dc:	4b20      	ldr	r3, [pc, #128]	; (8002160 <HAL_GPIO_EXTI_Callback+0x664>)
 80020de:	0018      	movs	r0, r3
 80020e0:	f000 fa47 	bl	8002572 <pauseStopwatch>
		if (GPIO_Pin == BUTTON2) {
 80020e4:	1dbb      	adds	r3, r7, #6
 80020e6:	881a      	ldrh	r2, [r3, #0]
 80020e8:	2380      	movs	r3, #128	; 0x80
 80020ea:	01db      	lsls	r3, r3, #7
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d107      	bne.n	8002100 <HAL_GPIO_EXTI_Callback+0x604>
			lapPrev = lapCurrent;
 80020f0:	4b1c      	ldr	r3, [pc, #112]	; (8002164 <HAL_GPIO_EXTI_Callback+0x668>)
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	4b1c      	ldr	r3, [pc, #112]	; (8002168 <HAL_GPIO_EXTI_Callback+0x66c>)
 80020f6:	601a      	str	r2, [r3, #0]
			lapCurrent = stopwatchCNT;
 80020f8:	4b1c      	ldr	r3, [pc, #112]	; (800216c <HAL_GPIO_EXTI_Callback+0x670>)
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	4b19      	ldr	r3, [pc, #100]	; (8002164 <HAL_GPIO_EXTI_Callback+0x668>)
 80020fe:	601a      	str	r2, [r3, #0]
		if (GPIO_Pin == BUTTON3) {
 8002100:	1dbb      	adds	r3, r7, #6
 8002102:	881a      	ldrh	r2, [r3, #0]
 8002104:	2380      	movs	r3, #128	; 0x80
 8002106:	021b      	lsls	r3, r3, #8
 8002108:	429a      	cmp	r2, r3
 800210a:	d106      	bne.n	800211a <HAL_GPIO_EXTI_Callback+0x61e>
			stopwatchRunning = 0;
 800210c:	4b13      	ldr	r3, [pc, #76]	; (800215c <HAL_GPIO_EXTI_Callback+0x660>)
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]
			clearStopwatch(&hlptim1);
 8002112:	4b13      	ldr	r3, [pc, #76]	; (8002160 <HAL_GPIO_EXTI_Callback+0x664>)
 8002114:	0018      	movs	r0, r3
 8002116:	f000 fa39 	bl	800258c <clearStopwatch>
}
 800211a:	46c0      	nop			; (mov r8, r8)
 800211c:	46bd      	mov	sp, r7
 800211e:	b002      	add	sp, #8
 8002120:	bd80      	pop	{r7, pc}
 8002122:	46c0      	nop			; (mov r8, r8)
 8002124:	20000098 	.word	0x20000098
 8002128:	80000003 	.word	0x80000003
 800212c:	20000094 	.word	0x20000094
 8002130:	200000c8 	.word	0x200000c8
 8002134:	2000009c 	.word	0x2000009c
 8002138:	20000168 	.word	0x20000168
 800213c:	2000012c 	.word	0x2000012c
 8002140:	20000088 	.word	0x20000088
 8002144:	200000d0 	.word	0x200000d0
 8002148:	200000a8 	.word	0x200000a8
 800214c:	200000a0 	.word	0x200000a0
 8002150:	200000a4 	.word	0x200000a4
 8002154:	200000f4 	.word	0x200000f4
 8002158:	200000d7 	.word	0x200000d7
 800215c:	200000ac 	.word	0x200000ac
 8002160:	200000fc 	.word	0x200000fc
 8002164:	200000f0 	.word	0x200000f0
 8002168:	20000150 	.word	0x20000150
 800216c:	200000cc 	.word	0x200000cc

08002170 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002174:	4b07      	ldr	r3, [pc, #28]	; (8002194 <HAL_MspInit+0x24>)
 8002176:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002178:	4b06      	ldr	r3, [pc, #24]	; (8002194 <HAL_MspInit+0x24>)
 800217a:	2101      	movs	r1, #1
 800217c:	430a      	orrs	r2, r1
 800217e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002180:	4b04      	ldr	r3, [pc, #16]	; (8002194 <HAL_MspInit+0x24>)
 8002182:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002184:	4b03      	ldr	r3, [pc, #12]	; (8002194 <HAL_MspInit+0x24>)
 8002186:	2180      	movs	r1, #128	; 0x80
 8002188:	0549      	lsls	r1, r1, #21
 800218a:	430a      	orrs	r2, r1
 800218c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800218e:	46c0      	nop			; (mov r8, r8)
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40021000 	.word	0x40021000

08002198 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b088      	sub	sp, #32
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a0:	230c      	movs	r3, #12
 80021a2:	18fb      	adds	r3, r7, r3
 80021a4:	0018      	movs	r0, r3
 80021a6:	2314      	movs	r3, #20
 80021a8:	001a      	movs	r2, r3
 80021aa:	2100      	movs	r1, #0
 80021ac:	f004 fa91 	bl	80066d2 <memset>
  if(hadc->Instance==ADC1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a15      	ldr	r2, [pc, #84]	; (800220c <HAL_ADC_MspInit+0x74>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d123      	bne.n	8002202 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80021ba:	4b15      	ldr	r3, [pc, #84]	; (8002210 <HAL_ADC_MspInit+0x78>)
 80021bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021be:	4b14      	ldr	r3, [pc, #80]	; (8002210 <HAL_ADC_MspInit+0x78>)
 80021c0:	2180      	movs	r1, #128	; 0x80
 80021c2:	0089      	lsls	r1, r1, #2
 80021c4:	430a      	orrs	r2, r1
 80021c6:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c8:	4b11      	ldr	r3, [pc, #68]	; (8002210 <HAL_ADC_MspInit+0x78>)
 80021ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021cc:	4b10      	ldr	r3, [pc, #64]	; (8002210 <HAL_ADC_MspInit+0x78>)
 80021ce:	2101      	movs	r1, #1
 80021d0:	430a      	orrs	r2, r1
 80021d2:	62da      	str	r2, [r3, #44]	; 0x2c
 80021d4:	4b0e      	ldr	r3, [pc, #56]	; (8002210 <HAL_ADC_MspInit+0x78>)
 80021d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d8:	2201      	movs	r2, #1
 80021da:	4013      	ands	r3, r2
 80021dc:	60bb      	str	r3, [r7, #8]
 80021de:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration    
    PA0     ------> ADC_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021e0:	210c      	movs	r1, #12
 80021e2:	187b      	adds	r3, r7, r1
 80021e4:	2201      	movs	r2, #1
 80021e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021e8:	187b      	adds	r3, r7, r1
 80021ea:	2203      	movs	r2, #3
 80021ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ee:	187b      	adds	r3, r7, r1
 80021f0:	2200      	movs	r2, #0
 80021f2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f4:	187a      	adds	r2, r7, r1
 80021f6:	23a0      	movs	r3, #160	; 0xa0
 80021f8:	05db      	lsls	r3, r3, #23
 80021fa:	0011      	movs	r1, r2
 80021fc:	0018      	movs	r0, r3
 80021fe:	f000 ff2f 	bl	8003060 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002202:	46c0      	nop			; (mov r8, r8)
 8002204:	46bd      	mov	sp, r7
 8002206:	b008      	add	sp, #32
 8002208:	bd80      	pop	{r7, pc}
 800220a:	46c0      	nop			; (mov r8, r8)
 800220c:	40012400 	.word	0x40012400
 8002210:	40021000 	.word	0x40021000

08002214 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  if(hlptim->Instance==LPTIM1)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a0a      	ldr	r2, [pc, #40]	; (800224c <HAL_LPTIM_MspInit+0x38>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d10e      	bne.n	8002244 <HAL_LPTIM_MspInit+0x30>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8002226:	4b0a      	ldr	r3, [pc, #40]	; (8002250 <HAL_LPTIM_MspInit+0x3c>)
 8002228:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800222a:	4b09      	ldr	r3, [pc, #36]	; (8002250 <HAL_LPTIM_MspInit+0x3c>)
 800222c:	2180      	movs	r1, #128	; 0x80
 800222e:	0609      	lsls	r1, r1, #24
 8002230:	430a      	orrs	r2, r1
 8002232:	639a      	str	r2, [r3, #56]	; 0x38
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8002234:	2200      	movs	r2, #0
 8002236:	2100      	movs	r1, #0
 8002238:	200d      	movs	r0, #13
 800223a:	f000 fd71 	bl	8002d20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 800223e:	200d      	movs	r0, #13
 8002240:	f000 fd83 	bl	8002d4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8002244:	46c0      	nop			; (mov r8, r8)
 8002246:	46bd      	mov	sp, r7
 8002248:	b002      	add	sp, #8
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40007c00 	.word	0x40007c00
 8002250:	40021000 	.word	0x40021000

08002254 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a06      	ldr	r2, [pc, #24]	; (800227c <HAL_RTC_MspInit+0x28>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d106      	bne.n	8002274 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002266:	4b06      	ldr	r3, [pc, #24]	; (8002280 <HAL_RTC_MspInit+0x2c>)
 8002268:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800226a:	4b05      	ldr	r3, [pc, #20]	; (8002280 <HAL_RTC_MspInit+0x2c>)
 800226c:	2180      	movs	r1, #128	; 0x80
 800226e:	02c9      	lsls	r1, r1, #11
 8002270:	430a      	orrs	r2, r1
 8002272:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002274:	46c0      	nop			; (mov r8, r8)
 8002276:	46bd      	mov	sp, r7
 8002278:	b002      	add	sp, #8
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40002800 	.word	0x40002800
 8002280:	40021000 	.word	0x40021000

08002284 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b088      	sub	sp, #32
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800228c:	230c      	movs	r3, #12
 800228e:	18fb      	adds	r3, r7, r3
 8002290:	0018      	movs	r0, r3
 8002292:	2314      	movs	r3, #20
 8002294:	001a      	movs	r2, r3
 8002296:	2100      	movs	r1, #0
 8002298:	f004 fa1b 	bl	80066d2 <memset>
  if(hspi->Instance==SPI1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a30      	ldr	r2, [pc, #192]	; (8002364 <HAL_SPI_MspInit+0xe0>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d15a      	bne.n	800235c <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022a6:	4b30      	ldr	r3, [pc, #192]	; (8002368 <HAL_SPI_MspInit+0xe4>)
 80022a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022aa:	4b2f      	ldr	r3, [pc, #188]	; (8002368 <HAL_SPI_MspInit+0xe4>)
 80022ac:	2180      	movs	r1, #128	; 0x80
 80022ae:	0149      	lsls	r1, r1, #5
 80022b0:	430a      	orrs	r2, r1
 80022b2:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b4:	4b2c      	ldr	r3, [pc, #176]	; (8002368 <HAL_SPI_MspInit+0xe4>)
 80022b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022b8:	4b2b      	ldr	r3, [pc, #172]	; (8002368 <HAL_SPI_MspInit+0xe4>)
 80022ba:	2101      	movs	r1, #1
 80022bc:	430a      	orrs	r2, r1
 80022be:	62da      	str	r2, [r3, #44]	; 0x2c
 80022c0:	4b29      	ldr	r3, [pc, #164]	; (8002368 <HAL_SPI_MspInit+0xe4>)
 80022c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c4:	2201      	movs	r2, #1
 80022c6:	4013      	ands	r3, r2
 80022c8:	60bb      	str	r3, [r7, #8]
 80022ca:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80022cc:	210c      	movs	r1, #12
 80022ce:	187b      	adds	r3, r7, r1
 80022d0:	22a0      	movs	r2, #160	; 0xa0
 80022d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d4:	187b      	adds	r3, r7, r1
 80022d6:	2202      	movs	r2, #2
 80022d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022da:	187b      	adds	r3, r7, r1
 80022dc:	2200      	movs	r2, #0
 80022de:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e0:	187b      	adds	r3, r7, r1
 80022e2:	2203      	movs	r2, #3
 80022e4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80022e6:	187b      	adds	r3, r7, r1
 80022e8:	2200      	movs	r2, #0
 80022ea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ec:	187a      	adds	r2, r7, r1
 80022ee:	23a0      	movs	r3, #160	; 0xa0
 80022f0:	05db      	lsls	r3, r3, #23
 80022f2:	0011      	movs	r1, r2
 80022f4:	0018      	movs	r0, r3
 80022f6:	f000 feb3 	bl	8003060 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80022fa:	4b1c      	ldr	r3, [pc, #112]	; (800236c <HAL_SPI_MspInit+0xe8>)
 80022fc:	4a1c      	ldr	r2, [pc, #112]	; (8002370 <HAL_SPI_MspInit+0xec>)
 80022fe:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8002300:	4b1a      	ldr	r3, [pc, #104]	; (800236c <HAL_SPI_MspInit+0xe8>)
 8002302:	2201      	movs	r2, #1
 8002304:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002306:	4b19      	ldr	r3, [pc, #100]	; (800236c <HAL_SPI_MspInit+0xe8>)
 8002308:	2210      	movs	r2, #16
 800230a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800230c:	4b17      	ldr	r3, [pc, #92]	; (800236c <HAL_SPI_MspInit+0xe8>)
 800230e:	2200      	movs	r2, #0
 8002310:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002312:	4b16      	ldr	r3, [pc, #88]	; (800236c <HAL_SPI_MspInit+0xe8>)
 8002314:	2280      	movs	r2, #128	; 0x80
 8002316:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002318:	4b14      	ldr	r3, [pc, #80]	; (800236c <HAL_SPI_MspInit+0xe8>)
 800231a:	2200      	movs	r2, #0
 800231c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800231e:	4b13      	ldr	r3, [pc, #76]	; (800236c <HAL_SPI_MspInit+0xe8>)
 8002320:	2200      	movs	r2, #0
 8002322:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002324:	4b11      	ldr	r3, [pc, #68]	; (800236c <HAL_SPI_MspInit+0xe8>)
 8002326:	2200      	movs	r2, #0
 8002328:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800232a:	4b10      	ldr	r3, [pc, #64]	; (800236c <HAL_SPI_MspInit+0xe8>)
 800232c:	2200      	movs	r2, #0
 800232e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002330:	4b0e      	ldr	r3, [pc, #56]	; (800236c <HAL_SPI_MspInit+0xe8>)
 8002332:	0018      	movs	r0, r3
 8002334:	f000 fd26 	bl	8002d84 <HAL_DMA_Init>
 8002338:	1e03      	subs	r3, r0, #0
 800233a:	d001      	beq.n	8002340 <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 800233c:	f7ff fbd8 	bl	8001af0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a0a      	ldr	r2, [pc, #40]	; (800236c <HAL_SPI_MspInit+0xe8>)
 8002344:	649a      	str	r2, [r3, #72]	; 0x48
 8002346:	4b09      	ldr	r3, [pc, #36]	; (800236c <HAL_SPI_MspInit+0xe8>)
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800234c:	2200      	movs	r2, #0
 800234e:	2100      	movs	r1, #0
 8002350:	2019      	movs	r0, #25
 8002352:	f000 fce5 	bl	8002d20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002356:	2019      	movs	r0, #25
 8002358:	f000 fcf7 	bl	8002d4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800235c:	46c0      	nop			; (mov r8, r8)
 800235e:	46bd      	mov	sp, r7
 8002360:	b008      	add	sp, #32
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40013000 	.word	0x40013000
 8002368:	40021000 	.word	0x40021000
 800236c:	20000258 	.word	0x20000258
 8002370:	40020030 	.word	0x40020030

08002374 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM21)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a0a      	ldr	r2, [pc, #40]	; (80023ac <HAL_TIM_Base_MspInit+0x38>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d10d      	bne.n	80023a2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 8002386:	4b0a      	ldr	r3, [pc, #40]	; (80023b0 <HAL_TIM_Base_MspInit+0x3c>)
 8002388:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800238a:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <HAL_TIM_Base_MspInit+0x3c>)
 800238c:	2104      	movs	r1, #4
 800238e:	430a      	orrs	r2, r1
 8002390:	635a      	str	r2, [r3, #52]	; 0x34
    /* TIM21 interrupt Init */
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 8002392:	2200      	movs	r2, #0
 8002394:	2100      	movs	r1, #0
 8002396:	2014      	movs	r0, #20
 8002398:	f000 fcc2 	bl	8002d20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 800239c:	2014      	movs	r0, #20
 800239e:	f000 fcd4 	bl	8002d4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }

}
 80023a2:	46c0      	nop			; (mov r8, r8)
 80023a4:	46bd      	mov	sp, r7
 80023a6:	b002      	add	sp, #8
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	46c0      	nop			; (mov r8, r8)
 80023ac:	40010800 	.word	0x40010800
 80023b0:	40021000 	.word	0x40021000

080023b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80023b8:	46c0      	nop			; (mov r8, r8)
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023be:	b580      	push	{r7, lr}
 80023c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023c2:	e7fe      	b.n	80023c2 <HardFault_Handler+0x4>

080023c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80023c8:	46c0      	nop			; (mov r8, r8)
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023d2:	46c0      	nop			; (mov r8, r8)
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023dc:	f000 f992 	bl	8002704 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023e0:	46c0      	nop			; (mov r8, r8)
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80023ea:	2004      	movs	r0, #4
 80023ec:	f001 f802 	bl	80033f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80023f0:	46c0      	nop			; (mov r8, r8)
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80023fa:	2380      	movs	r3, #128	; 0x80
 80023fc:	019b      	lsls	r3, r3, #6
 80023fe:	0018      	movs	r0, r3
 8002400:	f000 fff8 	bl	80033f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002404:	2380      	movs	r3, #128	; 0x80
 8002406:	01db      	lsls	r3, r3, #7
 8002408:	0018      	movs	r0, r3
 800240a:	f000 fff3 	bl	80033f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800240e:	2380      	movs	r3, #128	; 0x80
 8002410:	021b      	lsls	r3, r3, #8
 8002412:	0018      	movs	r0, r3
 8002414:	f000 ffee 	bl	80033f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002418:	46c0      	nop			; (mov r8, r8)
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
	...

08002420 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002424:	4b03      	ldr	r3, [pc, #12]	; (8002434 <DMA1_Channel2_3_IRQHandler+0x14>)
 8002426:	0018      	movs	r0, r3
 8002428:	f000 fd6c 	bl	8002f04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800242c:	46c0      	nop			; (mov r8, r8)
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	46c0      	nop			; (mov r8, r8)
 8002434:	20000258 	.word	0x20000258

08002438 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 800243c:	4b03      	ldr	r3, [pc, #12]	; (800244c <LPTIM1_IRQHandler+0x14>)
 800243e:	0018      	movs	r0, r3
 8002440:	f001 f8f8 	bl	8003634 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8002444:	46c0      	nop			; (mov r8, r8)
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	46c0      	nop			; (mov r8, r8)
 800244c:	200000fc 	.word	0x200000fc

08002450 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8002454:	4b03      	ldr	r3, [pc, #12]	; (8002464 <TIM21_IRQHandler+0x14>)
 8002456:	0018      	movs	r0, r3
 8002458:	f003 fc98 	bl	8005d8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 800245c:	46c0      	nop			; (mov r8, r8)
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	46c0      	nop			; (mov r8, r8)
 8002464:	20000168 	.word	0x20000168

08002468 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800246c:	4b03      	ldr	r3, [pc, #12]	; (800247c <SPI1_IRQHandler+0x14>)
 800246e:	0018      	movs	r0, r3
 8002470:	f003 f98a 	bl	8005788 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002474:	46c0      	nop			; (mov r8, r8)
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	46c0      	nop			; (mov r8, r8)
 800247c:	200001a4 	.word	0x200001a4

08002480 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002488:	4b11      	ldr	r3, [pc, #68]	; (80024d0 <_sbrk+0x50>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d102      	bne.n	8002496 <_sbrk+0x16>
		heap_end = &end;
 8002490:	4b0f      	ldr	r3, [pc, #60]	; (80024d0 <_sbrk+0x50>)
 8002492:	4a10      	ldr	r2, [pc, #64]	; (80024d4 <_sbrk+0x54>)
 8002494:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002496:	4b0e      	ldr	r3, [pc, #56]	; (80024d0 <_sbrk+0x50>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800249c:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <_sbrk+0x50>)
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	18d3      	adds	r3, r2, r3
 80024a4:	466a      	mov	r2, sp
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d907      	bls.n	80024ba <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80024aa:	f004 f8df 	bl	800666c <__errno>
 80024ae:	0003      	movs	r3, r0
 80024b0:	220c      	movs	r2, #12
 80024b2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80024b4:	2301      	movs	r3, #1
 80024b6:	425b      	negs	r3, r3
 80024b8:	e006      	b.n	80024c8 <_sbrk+0x48>
	}

	heap_end += incr;
 80024ba:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <_sbrk+0x50>)
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	18d2      	adds	r2, r2, r3
 80024c2:	4b03      	ldr	r3, [pc, #12]	; (80024d0 <_sbrk+0x50>)
 80024c4:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 80024c6:	68fb      	ldr	r3, [r7, #12]
}
 80024c8:	0018      	movs	r0, r3
 80024ca:	46bd      	mov	sp, r7
 80024cc:	b004      	add	sp, #16
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	200000b0 	.word	0x200000b0
 80024d4:	200002a8 	.word	0x200002a8

080024d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 80024dc:	4b17      	ldr	r3, [pc, #92]	; (800253c <SystemInit+0x64>)
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	4b16      	ldr	r3, [pc, #88]	; (800253c <SystemInit+0x64>)
 80024e2:	2180      	movs	r1, #128	; 0x80
 80024e4:	0049      	lsls	r1, r1, #1
 80024e6:	430a      	orrs	r2, r1
 80024e8:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80024ea:	4b14      	ldr	r3, [pc, #80]	; (800253c <SystemInit+0x64>)
 80024ec:	68da      	ldr	r2, [r3, #12]
 80024ee:	4b13      	ldr	r3, [pc, #76]	; (800253c <SystemInit+0x64>)
 80024f0:	4913      	ldr	r1, [pc, #76]	; (8002540 <SystemInit+0x68>)
 80024f2:	400a      	ands	r2, r1
 80024f4:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80024f6:	4b11      	ldr	r3, [pc, #68]	; (800253c <SystemInit+0x64>)
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	4b10      	ldr	r3, [pc, #64]	; (800253c <SystemInit+0x64>)
 80024fc:	4911      	ldr	r1, [pc, #68]	; (8002544 <SystemInit+0x6c>)
 80024fe:	400a      	ands	r2, r1
 8002500:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002502:	4b0e      	ldr	r3, [pc, #56]	; (800253c <SystemInit+0x64>)
 8002504:	689a      	ldr	r2, [r3, #8]
 8002506:	4b0d      	ldr	r3, [pc, #52]	; (800253c <SystemInit+0x64>)
 8002508:	2101      	movs	r1, #1
 800250a:	438a      	bics	r2, r1
 800250c:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800250e:	4b0b      	ldr	r3, [pc, #44]	; (800253c <SystemInit+0x64>)
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	4b0a      	ldr	r3, [pc, #40]	; (800253c <SystemInit+0x64>)
 8002514:	490c      	ldr	r1, [pc, #48]	; (8002548 <SystemInit+0x70>)
 8002516:	400a      	ands	r2, r1
 8002518:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 800251a:	4b08      	ldr	r3, [pc, #32]	; (800253c <SystemInit+0x64>)
 800251c:	68da      	ldr	r2, [r3, #12]
 800251e:	4b07      	ldr	r3, [pc, #28]	; (800253c <SystemInit+0x64>)
 8002520:	490a      	ldr	r1, [pc, #40]	; (800254c <SystemInit+0x74>)
 8002522:	400a      	ands	r2, r1
 8002524:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002526:	4b05      	ldr	r3, [pc, #20]	; (800253c <SystemInit+0x64>)
 8002528:	2200      	movs	r2, #0
 800252a:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800252c:	4b08      	ldr	r3, [pc, #32]	; (8002550 <SystemInit+0x78>)
 800252e:	2280      	movs	r2, #128	; 0x80
 8002530:	0512      	lsls	r2, r2, #20
 8002532:	609a      	str	r2, [r3, #8]
#endif
}
 8002534:	46c0      	nop			; (mov r8, r8)
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	46c0      	nop			; (mov r8, r8)
 800253c:	40021000 	.word	0x40021000
 8002540:	88ff400c 	.word	0x88ff400c
 8002544:	fef6fff6 	.word	0xfef6fff6
 8002548:	fffbffff 	.word	0xfffbffff
 800254c:	ff02ffff 	.word	0xff02ffff
 8002550:	e000ed00 	.word	0xe000ed00

08002554 <runStopwatch>:

// ---- Stopwatch functions ----
// set stopwatch. using lptimer. maybe better with regular timer?
// can operate in stop mode if using lptimer
// modify to update screen/set flags when necessary
void runStopwatch(LPTIM_HandleTypeDef *hlptim) {
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
	HAL_LPTIM_Counter_Start_IT(hlptim, 0x8000);
 800255c:	2380      	movs	r3, #128	; 0x80
 800255e:	021a      	lsls	r2, r3, #8
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	0011      	movs	r1, r2
 8002564:	0018      	movs	r0, r3
 8002566:	f000 ffe1 	bl	800352c <HAL_LPTIM_Counter_Start_IT>
}
 800256a:	46c0      	nop			; (mov r8, r8)
 800256c:	46bd      	mov	sp, r7
 800256e:	b002      	add	sp, #8
 8002570:	bd80      	pop	{r7, pc}

08002572 <pauseStopwatch>:

// stop the timer or pause it or whatever.
// counter value might reset and screw up timekeeping? should save?
void pauseStopwatch(LPTIM_HandleTypeDef *hlptim) {
 8002572:	b580      	push	{r7, lr}
 8002574:	b082      	sub	sp, #8
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
	HAL_LPTIM_Counter_Stop_IT(hlptim);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	0018      	movs	r0, r3
 800257e:	f001 f829 	bl	80035d4 <HAL_LPTIM_Counter_Stop_IT>
//	temp = hlptim->Instance->CNT;
}
 8002582:	46c0      	nop			; (mov r8, r8)
 8002584:	46bd      	mov	sp, r7
 8002586:	b002      	add	sp, #8
 8002588:	bd80      	pop	{r7, pc}
	...

0800258c <clearStopwatch>:

void clearStopwatch(LPTIM_HandleTypeDef *hlptim) {
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
	pauseStopwatch(hlptim);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	0018      	movs	r0, r3
 8002598:	f7ff ffeb 	bl	8002572 <pauseStopwatch>
	stopwatchCNT = 0;
 800259c:	4b03      	ldr	r3, [pc, #12]	; (80025ac <clearStopwatch+0x20>)
 800259e:	2200      	movs	r2, #0
 80025a0:	601a      	str	r2, [r3, #0]
}
 80025a2:	46c0      	nop			; (mov r8, r8)
 80025a4:	46bd      	mov	sp, r7
 80025a6:	b002      	add	sp, #8
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	46c0      	nop			; (mov r8, r8)
 80025ac:	200000cc 	.word	0x200000cc

080025b0 <HAL_LPTIM_AutoReloadMatchCallback>:
// increment variable for stopwatch counting.
// update screen if on
// how to set lptim internal clock to LSE???
//   I FOUND IT: RCC->CCIPR LPTIMSEL (2-bits, 11=LSE clock for LPTIM)
//   now...does hal do this automatically?
void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim) {
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
	// toggle pin, should toggle every 1s. change this pin
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 80025b8:	4b04      	ldr	r3, [pc, #16]	; (80025cc <HAL_LPTIM_AutoReloadMatchCallback+0x1c>)
 80025ba:	2102      	movs	r1, #2
 80025bc:	0018      	movs	r0, r3
 80025be:	f000 ff07 	bl	80033d0 <HAL_GPIO_TogglePin>
//	stopwatchCNT++;
//	updateStopwatch = 1;
}
 80025c2:	46c0      	nop			; (mov r8, r8)
 80025c4:	46bd      	mov	sp, r7
 80025c6:	b002      	add	sp, #8
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	46c0      	nop			; (mov r8, r8)
 80025cc:	50000400 	.word	0x50000400

080025d0 <runTimerDisplay>:
// else, we're setting rtc alarm
// uses TIM21 with LSE (external timer w/ remap and done already by ST).
//void setTimer(TIM_HandleTypeDef *htim, struct alarmTimes *a) {
//	HAL_TIM_Base_Start_IT(htim);
//}
void runTimerDisplay(TIM_HandleTypeDef *htim) {
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(htim);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	0018      	movs	r0, r3
 80025dc:	f003 fb80 	bl	8005ce0 <HAL_TIM_Base_Start>
}
 80025e0:	46c0      	nop			; (mov r8, r8)
 80025e2:	46bd      	mov	sp, r7
 80025e4:	b002      	add	sp, #8
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
	// should toggle pin every 1s. change pin
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80025f0:	23a0      	movs	r3, #160	; 0xa0
 80025f2:	05db      	lsls	r3, r3, #23
 80025f4:	2101      	movs	r1, #1
 80025f6:	0018      	movs	r0, r3
 80025f8:	f000 feea 	bl	80033d0 <HAL_GPIO_TogglePin>
	if (watchTimerSeconds != 0) watchTimerSeconds--;
 80025fc:	4b06      	ldr	r3, [pc, #24]	; (8002618 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d004      	beq.n	800260e <HAL_TIM_PeriodElapsedCallback+0x26>
 8002604:	4b04      	ldr	r3, [pc, #16]	; (8002618 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	1e5a      	subs	r2, r3, #1
 800260a:	4b03      	ldr	r3, [pc, #12]	; (8002618 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800260c:	601a      	str	r2, [r3, #0]
}
 800260e:	46c0      	nop			; (mov r8, r8)
 8002610:	46bd      	mov	sp, r7
 8002612:	b002      	add	sp, #8
 8002614:	bd80      	pop	{r7, pc}
 8002616:	46c0      	nop			; (mov r8, r8)
 8002618:	20000158 	.word	0x20000158

0800261c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800261c:	480d      	ldr	r0, [pc, #52]	; (8002654 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800261e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8002620:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002622:	e003      	b.n	800262c <LoopCopyDataInit>

08002624 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002624:	4b0c      	ldr	r3, [pc, #48]	; (8002658 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8002626:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002628:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800262a:	3104      	adds	r1, #4

0800262c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 800262c:	480b      	ldr	r0, [pc, #44]	; (800265c <LoopForever+0xa>)
  ldr  r3, =_edata
 800262e:	4b0c      	ldr	r3, [pc, #48]	; (8002660 <LoopForever+0xe>)
  adds  r2, r0, r1
 8002630:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002632:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002634:	d3f6      	bcc.n	8002624 <CopyDataInit>
  ldr  r2, =_sbss
 8002636:	4a0b      	ldr	r2, [pc, #44]	; (8002664 <LoopForever+0x12>)
  b  LoopFillZerobss
 8002638:	e002      	b.n	8002640 <LoopFillZerobss>

0800263a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800263a:	2300      	movs	r3, #0
  str  r3, [r2]
 800263c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800263e:	3204      	adds	r2, #4

08002640 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8002640:	4b09      	ldr	r3, [pc, #36]	; (8002668 <LoopForever+0x16>)
  cmp  r2, r3
 8002642:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002644:	d3f9      	bcc.n	800263a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002646:	f7ff ff47 	bl	80024d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800264a:	f004 f815 	bl	8006678 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800264e:	f7fe fea9 	bl	80013a4 <main>

08002652 <LoopForever>:

LoopForever:
    b LoopForever
 8002652:	e7fe      	b.n	8002652 <LoopForever>
   ldr   r0, =_estack
 8002654:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8002658:	0800754c 	.word	0x0800754c
  ldr  r0, =_sdata
 800265c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002660:	20000068 	.word	0x20000068
  ldr  r2, =_sbss
 8002664:	20000068 	.word	0x20000068
  ldr  r3, = _ebss
 8002668:	200002a8 	.word	0x200002a8

0800266c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800266c:	e7fe      	b.n	800266c <ADC1_COMP_IRQHandler>
	...

08002670 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002676:	1dfb      	adds	r3, r7, #7
 8002678:	2200      	movs	r2, #0
 800267a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800267c:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <HAL_Init+0x3c>)
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	4b0a      	ldr	r3, [pc, #40]	; (80026ac <HAL_Init+0x3c>)
 8002682:	2140      	movs	r1, #64	; 0x40
 8002684:	430a      	orrs	r2, r1
 8002686:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002688:	2000      	movs	r0, #0
 800268a:	f000 f811 	bl	80026b0 <HAL_InitTick>
 800268e:	1e03      	subs	r3, r0, #0
 8002690:	d003      	beq.n	800269a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002692:	1dfb      	adds	r3, r7, #7
 8002694:	2201      	movs	r2, #1
 8002696:	701a      	strb	r2, [r3, #0]
 8002698:	e001      	b.n	800269e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800269a:	f7ff fd69 	bl	8002170 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800269e:	1dfb      	adds	r3, r7, #7
 80026a0:	781b      	ldrb	r3, [r3, #0]
}
 80026a2:	0018      	movs	r0, r3
 80026a4:	46bd      	mov	sp, r7
 80026a6:	b002      	add	sp, #8
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	46c0      	nop			; (mov r8, r8)
 80026ac:	40022000 	.word	0x40022000

080026b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80026b8:	230f      	movs	r3, #15
 80026ba:	18fb      	adds	r3, r7, r3
 80026bc:	2200      	movs	r2, #0
 80026be:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80026c0:	4b0f      	ldr	r3, [pc, #60]	; (8002700 <HAL_InitTick+0x50>)
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	23fa      	movs	r3, #250	; 0xfa
 80026c6:	0099      	lsls	r1, r3, #2
 80026c8:	0010      	movs	r0, r2
 80026ca:	f7fd fd1d 	bl	8000108 <__udivsi3>
 80026ce:	0003      	movs	r3, r0
 80026d0:	0018      	movs	r0, r3
 80026d2:	f000 fb4a 	bl	8002d6a <HAL_SYSTICK_Config>
 80026d6:	1e03      	subs	r3, r0, #0
 80026d8:	d004      	beq.n	80026e4 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 80026da:	230f      	movs	r3, #15
 80026dc:	18fb      	adds	r3, r7, r3
 80026de:	2201      	movs	r2, #1
 80026e0:	701a      	strb	r2, [r3, #0]
 80026e2:	e006      	b.n	80026f2 <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 80026e4:	6879      	ldr	r1, [r7, #4]
 80026e6:	2301      	movs	r3, #1
 80026e8:	425b      	negs	r3, r3
 80026ea:	2200      	movs	r2, #0
 80026ec:	0018      	movs	r0, r3
 80026ee:	f000 fb17 	bl	8002d20 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 80026f2:	230f      	movs	r3, #15
 80026f4:	18fb      	adds	r3, r7, r3
 80026f6:	781b      	ldrb	r3, [r3, #0]
}
 80026f8:	0018      	movs	r0, r3
 80026fa:	46bd      	mov	sp, r7
 80026fc:	b004      	add	sp, #16
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	20000000 	.word	0x20000000

08002704 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  uwTick++;
 8002708:	4b03      	ldr	r3, [pc, #12]	; (8002718 <HAL_IncTick+0x14>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	1c5a      	adds	r2, r3, #1
 800270e:	4b02      	ldr	r3, [pc, #8]	; (8002718 <HAL_IncTick+0x14>)
 8002710:	601a      	str	r2, [r3, #0]
}
 8002712:	46c0      	nop			; (mov r8, r8)
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	200002a0 	.word	0x200002a0

0800271c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  return uwTick;
 8002720:	4b02      	ldr	r3, [pc, #8]	; (800272c <HAL_GetTick+0x10>)
 8002722:	681b      	ldr	r3, [r3, #0]
}
 8002724:	0018      	movs	r0, r3
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	46c0      	nop			; (mov r8, r8)
 800272c:	200002a0 	.word	0x200002a0

08002730 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002738:	f7ff fff0 	bl	800271c <HAL_GetTick>
 800273c:	0003      	movs	r3, r0
 800273e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	3301      	adds	r3, #1
 8002748:	d002      	beq.n	8002750 <HAL_Delay+0x20>
  {
    wait++;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	3301      	adds	r3, #1
 800274e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002750:	46c0      	nop			; (mov r8, r8)
 8002752:	f7ff ffe3 	bl	800271c <HAL_GetTick>
 8002756:	0002      	movs	r2, r0
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	429a      	cmp	r2, r3
 8002760:	d8f7      	bhi.n	8002752 <HAL_Delay+0x22>
  {
  }
}
 8002762:	46c0      	nop			; (mov r8, r8)
 8002764:	46bd      	mov	sp, r7
 8002766:	b004      	add	sp, #16
 8002768:	bd80      	pop	{r7, pc}
	...

0800276c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e159      	b.n	8002a32 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002782:	2b00      	cmp	r3, #0
 8002784:	d10a      	bne.n	800279c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2250      	movs	r2, #80	; 0x50
 8002790:	2100      	movs	r1, #0
 8002792:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	0018      	movs	r0, r3
 8002798:	f7ff fcfe 	bl	8002198 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a0:	2210      	movs	r2, #16
 80027a2:	4013      	ands	r3, r2
 80027a4:	2b10      	cmp	r3, #16
 80027a6:	d005      	beq.n	80027b4 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	2204      	movs	r2, #4
 80027b0:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80027b2:	d00b      	beq.n	80027cc <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b8:	2210      	movs	r2, #16
 80027ba:	431a      	orrs	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2250      	movs	r2, #80	; 0x50
 80027c4:	2100      	movs	r1, #0
 80027c6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e132      	b.n	8002a32 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d0:	4a9a      	ldr	r2, [pc, #616]	; (8002a3c <HAL_ADC_Init+0x2d0>)
 80027d2:	4013      	ands	r3, r2
 80027d4:	2202      	movs	r2, #2
 80027d6:	431a      	orrs	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	2203      	movs	r2, #3
 80027e4:	4013      	ands	r3, r2
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d108      	bne.n	80027fc <HAL_ADC_Init+0x90>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2201      	movs	r2, #1
 80027f2:	4013      	ands	r3, r2
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d101      	bne.n	80027fc <HAL_ADC_Init+0x90>
 80027f8:	2301      	movs	r3, #1
 80027fa:	e000      	b.n	80027fe <HAL_ADC_Init+0x92>
 80027fc:	2300      	movs	r3, #0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d149      	bne.n	8002896 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685a      	ldr	r2, [r3, #4]
 8002806:	23c0      	movs	r3, #192	; 0xc0
 8002808:	061b      	lsls	r3, r3, #24
 800280a:	429a      	cmp	r2, r3
 800280c:	d00b      	beq.n	8002826 <HAL_ADC_Init+0xba>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	2380      	movs	r3, #128	; 0x80
 8002814:	05db      	lsls	r3, r3, #23
 8002816:	429a      	cmp	r2, r3
 8002818:	d005      	beq.n	8002826 <HAL_ADC_Init+0xba>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	2380      	movs	r3, #128	; 0x80
 8002820:	061b      	lsls	r3, r3, #24
 8002822:	429a      	cmp	r2, r3
 8002824:	d111      	bne.n	800284a <HAL_ADC_Init+0xde>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	691a      	ldr	r2, [r3, #16]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	0092      	lsls	r2, r2, #2
 8002832:	0892      	lsrs	r2, r2, #2
 8002834:	611a      	str	r2, [r3, #16]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	6919      	ldr	r1, [r3, #16]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	430a      	orrs	r2, r1
 8002846:	611a      	str	r2, [r3, #16]
 8002848:	e014      	b.n	8002874 <HAL_ADC_Init+0x108>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	691a      	ldr	r2, [r3, #16]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	0092      	lsls	r2, r2, #2
 8002856:	0892      	lsrs	r2, r2, #2
 8002858:	611a      	str	r2, [r3, #16]
 800285a:	4b79      	ldr	r3, [pc, #484]	; (8002a40 <HAL_ADC_Init+0x2d4>)
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	4b78      	ldr	r3, [pc, #480]	; (8002a40 <HAL_ADC_Init+0x2d4>)
 8002860:	4978      	ldr	r1, [pc, #480]	; (8002a44 <HAL_ADC_Init+0x2d8>)
 8002862:	400a      	ands	r2, r1
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	4b76      	ldr	r3, [pc, #472]	; (8002a40 <HAL_ADC_Init+0x2d4>)
 8002868:	6819      	ldr	r1, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685a      	ldr	r2, [r3, #4]
 800286e:	4b74      	ldr	r3, [pc, #464]	; (8002a40 <HAL_ADC_Init+0x2d4>)
 8002870:	430a      	orrs	r2, r1
 8002872:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68da      	ldr	r2, [r3, #12]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2118      	movs	r1, #24
 8002880:	438a      	bics	r2, r1
 8002882:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68d9      	ldr	r1, [r3, #12]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689a      	ldr	r2, [r3, #8]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	430a      	orrs	r2, r1
 8002894:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8002896:	4b6a      	ldr	r3, [pc, #424]	; (8002a40 <HAL_ADC_Init+0x2d4>)
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	4b69      	ldr	r3, [pc, #420]	; (8002a40 <HAL_ADC_Init+0x2d4>)
 800289c:	496a      	ldr	r1, [pc, #424]	; (8002a48 <HAL_ADC_Init+0x2dc>)
 800289e:	400a      	ands	r2, r1
 80028a0:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80028a2:	4b67      	ldr	r3, [pc, #412]	; (8002a40 <HAL_ADC_Init+0x2d4>)
 80028a4:	6819      	ldr	r1, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028aa:	065a      	lsls	r2, r3, #25
 80028ac:	4b64      	ldr	r3, [pc, #400]	; (8002a40 <HAL_ADC_Init+0x2d4>)
 80028ae:	430a      	orrs	r2, r1
 80028b0:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	2380      	movs	r3, #128	; 0x80
 80028ba:	055b      	lsls	r3, r3, #21
 80028bc:	4013      	ands	r3, r2
 80028be:	d108      	bne.n	80028d2 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689a      	ldr	r2, [r3, #8]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2180      	movs	r1, #128	; 0x80
 80028cc:	0549      	lsls	r1, r1, #21
 80028ce:	430a      	orrs	r2, r1
 80028d0:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68da      	ldr	r2, [r3, #12]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	495b      	ldr	r1, [pc, #364]	; (8002a4c <HAL_ADC_Init+0x2e0>)
 80028de:	400a      	ands	r2, r1
 80028e0:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68d9      	ldr	r1, [r3, #12]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d101      	bne.n	80028f8 <HAL_ADC_Init+0x18c>
 80028f4:	2304      	movs	r3, #4
 80028f6:	e000      	b.n	80028fa <HAL_ADC_Init+0x18e>
 80028f8:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80028fa:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2020      	movs	r0, #32
 8002900:	5c1b      	ldrb	r3, [r3, r0]
 8002902:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002904:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	202c      	movs	r0, #44	; 0x2c
 800290a:	5c1b      	ldrb	r3, [r3, r0]
 800290c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800290e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002914:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800291c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002924:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	430a      	orrs	r2, r1
 800292c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002932:	23c2      	movs	r3, #194	; 0xc2
 8002934:	33ff      	adds	r3, #255	; 0xff
 8002936:	429a      	cmp	r2, r3
 8002938:	d00b      	beq.n	8002952 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68d9      	ldr	r1, [r3, #12]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002948:	431a      	orrs	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2221      	movs	r2, #33	; 0x21
 8002956:	5c9b      	ldrb	r3, [r3, r2]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d11a      	bne.n	8002992 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2220      	movs	r2, #32
 8002960:	5c9b      	ldrb	r3, [r3, r2]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d109      	bne.n	800297a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68da      	ldr	r2, [r3, #12]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2180      	movs	r1, #128	; 0x80
 8002972:	0249      	lsls	r1, r1, #9
 8002974:	430a      	orrs	r2, r1
 8002976:	60da      	str	r2, [r3, #12]
 8002978:	e00b      	b.n	8002992 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297e:	2220      	movs	r2, #32
 8002980:	431a      	orrs	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298a:	2201      	movs	r2, #1
 800298c:	431a      	orrs	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002996:	2b01      	cmp	r3, #1
 8002998:	d11f      	bne.n	80029da <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	691a      	ldr	r2, [r3, #16]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	492a      	ldr	r1, [pc, #168]	; (8002a50 <HAL_ADC_Init+0x2e4>)
 80029a6:	400a      	ands	r2, r1
 80029a8:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6919      	ldr	r1, [r3, #16]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80029b8:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 80029be:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	430a      	orrs	r2, r1
 80029c6:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	691a      	ldr	r2, [r3, #16]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2101      	movs	r1, #1
 80029d4:	430a      	orrs	r2, r1
 80029d6:	611a      	str	r2, [r3, #16]
 80029d8:	e00e      	b.n	80029f8 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	2201      	movs	r2, #1
 80029e2:	4013      	ands	r3, r2
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d107      	bne.n	80029f8 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	691a      	ldr	r2, [r3, #16]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2101      	movs	r1, #1
 80029f4:	438a      	bics	r2, r1
 80029f6:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	695a      	ldr	r2, [r3, #20]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2107      	movs	r1, #7
 8002a04:	438a      	bics	r2, r1
 8002a06:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6959      	ldr	r1, [r3, #20]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a24:	2203      	movs	r2, #3
 8002a26:	4393      	bics	r3, r2
 8002a28:	2201      	movs	r2, #1
 8002a2a:	431a      	orrs	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	0018      	movs	r0, r3
 8002a34:	46bd      	mov	sp, r7
 8002a36:	b002      	add	sp, #8
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	46c0      	nop			; (mov r8, r8)
 8002a3c:	fffffefd 	.word	0xfffffefd
 8002a40:	40012708 	.word	0x40012708
 8002a44:	ffc3ffff 	.word	0xffc3ffff
 8002a48:	fdffffff 	.word	0xfdffffff
 8002a4c:	fffe0219 	.word	0xfffe0219
 8002a50:	fffffc03 	.word	0xfffffc03

08002a54 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2250      	movs	r2, #80	; 0x50
 8002a62:	5c9b      	ldrb	r3, [r3, r2]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d101      	bne.n	8002a6c <HAL_ADC_ConfigChannel+0x18>
 8002a68:	2302      	movs	r3, #2
 8002a6a:	e085      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x124>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2250      	movs	r2, #80	; 0x50
 8002a70:	2101      	movs	r1, #1
 8002a72:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	2204      	movs	r2, #4
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	d00b      	beq.n	8002a98 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a84:	2220      	movs	r2, #32
 8002a86:	431a      	orrs	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2250      	movs	r2, #80	; 0x50
 8002a90:	2100      	movs	r1, #0
 8002a92:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e06f      	b.n	8002b78 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	4a38      	ldr	r2, [pc, #224]	; (8002b80 <HAL_ADC_ConfigChannel+0x12c>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d035      	beq.n	8002b0e <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	035b      	lsls	r3, r3, #13
 8002aae:	0b5a      	lsrs	r2, r3, #13
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	2380      	movs	r3, #128	; 0x80
 8002abe:	02db      	lsls	r3, r3, #11
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	d009      	beq.n	8002ad8 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8002ac4:	4b2f      	ldr	r3, [pc, #188]	; (8002b84 <HAL_ADC_ConfigChannel+0x130>)
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	4b2e      	ldr	r3, [pc, #184]	; (8002b84 <HAL_ADC_ConfigChannel+0x130>)
 8002aca:	2180      	movs	r1, #128	; 0x80
 8002acc:	0409      	lsls	r1, r1, #16
 8002ace:	430a      	orrs	r2, r1
 8002ad0:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8002ad2:	200a      	movs	r0, #10
 8002ad4:	f000 f85e 	bl	8002b94 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	2380      	movs	r3, #128	; 0x80
 8002ade:	029b      	lsls	r3, r3, #10
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	d006      	beq.n	8002af2 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8002ae4:	4b27      	ldr	r3, [pc, #156]	; (8002b84 <HAL_ADC_ConfigChannel+0x130>)
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	4b26      	ldr	r3, [pc, #152]	; (8002b84 <HAL_ADC_ConfigChannel+0x130>)
 8002aea:	2180      	movs	r1, #128	; 0x80
 8002aec:	03c9      	lsls	r1, r1, #15
 8002aee:	430a      	orrs	r2, r1
 8002af0:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	2380      	movs	r3, #128	; 0x80
 8002af8:	025b      	lsls	r3, r3, #9
 8002afa:	4013      	ands	r3, r2
 8002afc:	d037      	beq.n	8002b6e <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 8002afe:	4b21      	ldr	r3, [pc, #132]	; (8002b84 <HAL_ADC_ConfigChannel+0x130>)
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	4b20      	ldr	r3, [pc, #128]	; (8002b84 <HAL_ADC_ConfigChannel+0x130>)
 8002b04:	2180      	movs	r1, #128	; 0x80
 8002b06:	0449      	lsls	r1, r1, #17
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	e02f      	b.n	8002b6e <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	035b      	lsls	r3, r3, #13
 8002b1a:	0b5b      	lsrs	r3, r3, #13
 8002b1c:	43d9      	mvns	r1, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	400a      	ands	r2, r1
 8002b24:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	2380      	movs	r3, #128	; 0x80
 8002b2c:	02db      	lsls	r3, r3, #11
 8002b2e:	4013      	ands	r3, r2
 8002b30:	d005      	beq.n	8002b3e <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8002b32:	4b14      	ldr	r3, [pc, #80]	; (8002b84 <HAL_ADC_ConfigChannel+0x130>)
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	4b13      	ldr	r3, [pc, #76]	; (8002b84 <HAL_ADC_ConfigChannel+0x130>)
 8002b38:	4913      	ldr	r1, [pc, #76]	; (8002b88 <HAL_ADC_ConfigChannel+0x134>)
 8002b3a:	400a      	ands	r2, r1
 8002b3c:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	2380      	movs	r3, #128	; 0x80
 8002b44:	029b      	lsls	r3, r3, #10
 8002b46:	4013      	ands	r3, r2
 8002b48:	d005      	beq.n	8002b56 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8002b4a:	4b0e      	ldr	r3, [pc, #56]	; (8002b84 <HAL_ADC_ConfigChannel+0x130>)
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	4b0d      	ldr	r3, [pc, #52]	; (8002b84 <HAL_ADC_ConfigChannel+0x130>)
 8002b50:	490e      	ldr	r1, [pc, #56]	; (8002b8c <HAL_ADC_ConfigChannel+0x138>)
 8002b52:	400a      	ands	r2, r1
 8002b54:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	2380      	movs	r3, #128	; 0x80
 8002b5c:	025b      	lsls	r3, r3, #9
 8002b5e:	4013      	ands	r3, r2
 8002b60:	d005      	beq.n	8002b6e <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 8002b62:	4b08      	ldr	r3, [pc, #32]	; (8002b84 <HAL_ADC_ConfigChannel+0x130>)
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	4b07      	ldr	r3, [pc, #28]	; (8002b84 <HAL_ADC_ConfigChannel+0x130>)
 8002b68:	4909      	ldr	r1, [pc, #36]	; (8002b90 <HAL_ADC_ConfigChannel+0x13c>)
 8002b6a:	400a      	ands	r2, r1
 8002b6c:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2250      	movs	r2, #80	; 0x50
 8002b72:	2100      	movs	r1, #0
 8002b74:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	0018      	movs	r0, r3
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	b002      	add	sp, #8
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	00001001 	.word	0x00001001
 8002b84:	40012708 	.word	0x40012708
 8002b88:	ff7fffff 	.word	0xff7fffff
 8002b8c:	ffbfffff 	.word	0xffbfffff
 8002b90:	feffffff 	.word	0xfeffffff

08002b94 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8002b9c:	4b0a      	ldr	r3, [pc, #40]	; (8002bc8 <ADC_DelayMicroSecond+0x34>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	490a      	ldr	r1, [pc, #40]	; (8002bcc <ADC_DelayMicroSecond+0x38>)
 8002ba2:	0018      	movs	r0, r3
 8002ba4:	f7fd fab0 	bl	8000108 <__udivsi3>
 8002ba8:	0003      	movs	r3, r0
 8002baa:	001a      	movs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4353      	muls	r3, r2
 8002bb0:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8002bb2:	e002      	b.n	8002bba <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1f9      	bne.n	8002bb4 <ADC_DelayMicroSecond+0x20>
  } 
}
 8002bc0:	46c0      	nop			; (mov r8, r8)
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	b004      	add	sp, #16
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	20000000 	.word	0x20000000
 8002bcc:	000f4240 	.word	0x000f4240

08002bd0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	0002      	movs	r2, r0
 8002bd8:	1dfb      	adds	r3, r7, #7
 8002bda:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002bdc:	1dfb      	adds	r3, r7, #7
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	001a      	movs	r2, r3
 8002be2:	231f      	movs	r3, #31
 8002be4:	401a      	ands	r2, r3
 8002be6:	4b04      	ldr	r3, [pc, #16]	; (8002bf8 <NVIC_EnableIRQ+0x28>)
 8002be8:	2101      	movs	r1, #1
 8002bea:	4091      	lsls	r1, r2
 8002bec:	000a      	movs	r2, r1
 8002bee:	601a      	str	r2, [r3, #0]
}
 8002bf0:	46c0      	nop			; (mov r8, r8)
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	b002      	add	sp, #8
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	e000e100 	.word	0xe000e100

08002bfc <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bfc:	b590      	push	{r4, r7, lr}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	0002      	movs	r2, r0
 8002c04:	6039      	str	r1, [r7, #0]
 8002c06:	1dfb      	adds	r3, r7, #7
 8002c08:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8002c0a:	1dfb      	adds	r3, r7, #7
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	2b7f      	cmp	r3, #127	; 0x7f
 8002c10:	d932      	bls.n	8002c78 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c12:	4a2f      	ldr	r2, [pc, #188]	; (8002cd0 <NVIC_SetPriority+0xd4>)
 8002c14:	1dfb      	adds	r3, r7, #7
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	0019      	movs	r1, r3
 8002c1a:	230f      	movs	r3, #15
 8002c1c:	400b      	ands	r3, r1
 8002c1e:	3b08      	subs	r3, #8
 8002c20:	089b      	lsrs	r3, r3, #2
 8002c22:	3306      	adds	r3, #6
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	18d3      	adds	r3, r2, r3
 8002c28:	3304      	adds	r3, #4
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	1dfa      	adds	r2, r7, #7
 8002c2e:	7812      	ldrb	r2, [r2, #0]
 8002c30:	0011      	movs	r1, r2
 8002c32:	2203      	movs	r2, #3
 8002c34:	400a      	ands	r2, r1
 8002c36:	00d2      	lsls	r2, r2, #3
 8002c38:	21ff      	movs	r1, #255	; 0xff
 8002c3a:	4091      	lsls	r1, r2
 8002c3c:	000a      	movs	r2, r1
 8002c3e:	43d2      	mvns	r2, r2
 8002c40:	401a      	ands	r2, r3
 8002c42:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	019b      	lsls	r3, r3, #6
 8002c48:	22ff      	movs	r2, #255	; 0xff
 8002c4a:	401a      	ands	r2, r3
 8002c4c:	1dfb      	adds	r3, r7, #7
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	0018      	movs	r0, r3
 8002c52:	2303      	movs	r3, #3
 8002c54:	4003      	ands	r3, r0
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c5a:	481d      	ldr	r0, [pc, #116]	; (8002cd0 <NVIC_SetPriority+0xd4>)
 8002c5c:	1dfb      	adds	r3, r7, #7
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	001c      	movs	r4, r3
 8002c62:	230f      	movs	r3, #15
 8002c64:	4023      	ands	r3, r4
 8002c66:	3b08      	subs	r3, #8
 8002c68:	089b      	lsrs	r3, r3, #2
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	3306      	adds	r3, #6
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	18c3      	adds	r3, r0, r3
 8002c72:	3304      	adds	r3, #4
 8002c74:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002c76:	e027      	b.n	8002cc8 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c78:	4a16      	ldr	r2, [pc, #88]	; (8002cd4 <NVIC_SetPriority+0xd8>)
 8002c7a:	1dfb      	adds	r3, r7, #7
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	b25b      	sxtb	r3, r3
 8002c80:	089b      	lsrs	r3, r3, #2
 8002c82:	33c0      	adds	r3, #192	; 0xc0
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	589b      	ldr	r3, [r3, r2]
 8002c88:	1dfa      	adds	r2, r7, #7
 8002c8a:	7812      	ldrb	r2, [r2, #0]
 8002c8c:	0011      	movs	r1, r2
 8002c8e:	2203      	movs	r2, #3
 8002c90:	400a      	ands	r2, r1
 8002c92:	00d2      	lsls	r2, r2, #3
 8002c94:	21ff      	movs	r1, #255	; 0xff
 8002c96:	4091      	lsls	r1, r2
 8002c98:	000a      	movs	r2, r1
 8002c9a:	43d2      	mvns	r2, r2
 8002c9c:	401a      	ands	r2, r3
 8002c9e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	019b      	lsls	r3, r3, #6
 8002ca4:	22ff      	movs	r2, #255	; 0xff
 8002ca6:	401a      	ands	r2, r3
 8002ca8:	1dfb      	adds	r3, r7, #7
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	0018      	movs	r0, r3
 8002cae:	2303      	movs	r3, #3
 8002cb0:	4003      	ands	r3, r0
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002cb6:	4807      	ldr	r0, [pc, #28]	; (8002cd4 <NVIC_SetPriority+0xd8>)
 8002cb8:	1dfb      	adds	r3, r7, #7
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	b25b      	sxtb	r3, r3
 8002cbe:	089b      	lsrs	r3, r3, #2
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	33c0      	adds	r3, #192	; 0xc0
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	501a      	str	r2, [r3, r0]
}
 8002cc8:	46c0      	nop			; (mov r8, r8)
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	b003      	add	sp, #12
 8002cce:	bd90      	pop	{r4, r7, pc}
 8002cd0:	e000ed00 	.word	0xe000ed00
 8002cd4:	e000e100 	.word	0xe000e100

08002cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	4a0c      	ldr	r2, [pc, #48]	; (8002d18 <SysTick_Config+0x40>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d901      	bls.n	8002cee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cea:	2301      	movs	r3, #1
 8002cec:	e010      	b.n	8002d10 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cee:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <SysTick_Config+0x44>)
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	3a01      	subs	r2, #1
 8002cf4:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	425b      	negs	r3, r3
 8002cfa:	2103      	movs	r1, #3
 8002cfc:	0018      	movs	r0, r3
 8002cfe:	f7ff ff7d 	bl	8002bfc <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d02:	4b06      	ldr	r3, [pc, #24]	; (8002d1c <SysTick_Config+0x44>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d08:	4b04      	ldr	r3, [pc, #16]	; (8002d1c <SysTick_Config+0x44>)
 8002d0a:	2207      	movs	r2, #7
 8002d0c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	0018      	movs	r0, r3
 8002d12:	46bd      	mov	sp, r7
 8002d14:	b002      	add	sp, #8
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	00ffffff 	.word	0x00ffffff
 8002d1c:	e000e010 	.word	0xe000e010

08002d20 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60b9      	str	r1, [r7, #8]
 8002d28:	607a      	str	r2, [r7, #4]
 8002d2a:	210f      	movs	r1, #15
 8002d2c:	187b      	adds	r3, r7, r1
 8002d2e:	1c02      	adds	r2, r0, #0
 8002d30:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002d32:	68ba      	ldr	r2, [r7, #8]
 8002d34:	187b      	adds	r3, r7, r1
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	b25b      	sxtb	r3, r3
 8002d3a:	0011      	movs	r1, r2
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	f7ff ff5d 	bl	8002bfc <NVIC_SetPriority>
}
 8002d42:	46c0      	nop			; (mov r8, r8)
 8002d44:	46bd      	mov	sp, r7
 8002d46:	b004      	add	sp, #16
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b082      	sub	sp, #8
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	0002      	movs	r2, r0
 8002d52:	1dfb      	adds	r3, r7, #7
 8002d54:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d56:	1dfb      	adds	r3, r7, #7
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	b25b      	sxtb	r3, r3
 8002d5c:	0018      	movs	r0, r3
 8002d5e:	f7ff ff37 	bl	8002bd0 <NVIC_EnableIRQ>
}
 8002d62:	46c0      	nop			; (mov r8, r8)
 8002d64:	46bd      	mov	sp, r7
 8002d66:	b002      	add	sp, #8
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b082      	sub	sp, #8
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	0018      	movs	r0, r3
 8002d76:	f7ff ffaf 	bl	8002cd8 <SysTick_Config>
 8002d7a:	0003      	movs	r3, r0
}
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	b002      	add	sp, #8
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e061      	b.n	8002e5a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a32      	ldr	r2, [pc, #200]	; (8002e64 <HAL_DMA_Init+0xe0>)
 8002d9c:	4694      	mov	ip, r2
 8002d9e:	4463      	add	r3, ip
 8002da0:	2114      	movs	r1, #20
 8002da2:	0018      	movs	r0, r3
 8002da4:	f7fd f9b0 	bl	8000108 <__udivsi3>
 8002da8:	0003      	movs	r3, r0
 8002daa:	009a      	lsls	r2, r3, #2
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	4a2d      	ldr	r2, [pc, #180]	; (8002e68 <HAL_DMA_Init+0xe4>)
 8002db4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2225      	movs	r2, #37	; 0x25
 8002dba:	2102      	movs	r1, #2
 8002dbc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	4a28      	ldr	r2, [pc, #160]	; (8002e6c <HAL_DMA_Init+0xe8>)
 8002dca:	4013      	ands	r3, r2
 8002dcc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002dd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	691b      	ldr	r3, [r3, #16]
 8002ddc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002de2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a1b      	ldr	r3, [r3, #32]
 8002df4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	2380      	movs	r3, #128	; 0x80
 8002e0a:	01db      	lsls	r3, r3, #7
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d018      	beq.n	8002e42 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002e10:	4b17      	ldr	r3, [pc, #92]	; (8002e70 <HAL_DMA_Init+0xec>)
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e18:	211c      	movs	r1, #28
 8002e1a:	400b      	ands	r3, r1
 8002e1c:	210f      	movs	r1, #15
 8002e1e:	4099      	lsls	r1, r3
 8002e20:	000b      	movs	r3, r1
 8002e22:	43d9      	mvns	r1, r3
 8002e24:	4b12      	ldr	r3, [pc, #72]	; (8002e70 <HAL_DMA_Init+0xec>)
 8002e26:	400a      	ands	r2, r1
 8002e28:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002e2a:	4b11      	ldr	r3, [pc, #68]	; (8002e70 <HAL_DMA_Init+0xec>)
 8002e2c:	6819      	ldr	r1, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e36:	201c      	movs	r0, #28
 8002e38:	4003      	ands	r3, r0
 8002e3a:	409a      	lsls	r2, r3
 8002e3c:	4b0c      	ldr	r3, [pc, #48]	; (8002e70 <HAL_DMA_Init+0xec>)
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2225      	movs	r2, #37	; 0x25
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2224      	movs	r2, #36	; 0x24
 8002e54:	2100      	movs	r1, #0
 8002e56:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	b004      	add	sp, #16
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	46c0      	nop			; (mov r8, r8)
 8002e64:	bffdfff8 	.word	0xbffdfff8
 8002e68:	40020000 	.word	0x40020000
 8002e6c:	ffff800f 	.word	0xffff800f
 8002e70:	400200a8 	.word	0x400200a8

08002e74 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e7c:	230f      	movs	r3, #15
 8002e7e:	18fb      	adds	r3, r7, r3
 8002e80:	2200      	movs	r2, #0
 8002e82:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2225      	movs	r2, #37	; 0x25
 8002e88:	5c9b      	ldrb	r3, [r3, r2]
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d007      	beq.n	8002ea0 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2204      	movs	r2, #4
 8002e94:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002e96:	230f      	movs	r3, #15
 8002e98:	18fb      	adds	r3, r7, r3
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	701a      	strb	r2, [r3, #0]
 8002e9e:	e02a      	b.n	8002ef6 <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	210e      	movs	r1, #14
 8002eac:	438a      	bics	r2, r1
 8002eae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2101      	movs	r1, #1
 8002ebc:	438a      	bics	r2, r1
 8002ebe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec4:	221c      	movs	r2, #28
 8002ec6:	401a      	ands	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ecc:	2101      	movs	r1, #1
 8002ece:	4091      	lsls	r1, r2
 8002ed0:	000a      	movs	r2, r1
 8002ed2:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2225      	movs	r2, #37	; 0x25
 8002ed8:	2101      	movs	r1, #1
 8002eda:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2224      	movs	r2, #36	; 0x24
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d004      	beq.n	8002ef6 <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	0010      	movs	r0, r2
 8002ef4:	4798      	blx	r3
    }
  }
  return status;
 8002ef6:	230f      	movs	r3, #15
 8002ef8:	18fb      	adds	r3, r7, r3
 8002efa:	781b      	ldrb	r3, [r3, #0]
}
 8002efc:	0018      	movs	r0, r3
 8002efe:	46bd      	mov	sp, r7
 8002f00:	b004      	add	sp, #16
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f20:	221c      	movs	r2, #28
 8002f22:	4013      	ands	r3, r2
 8002f24:	2204      	movs	r2, #4
 8002f26:	409a      	lsls	r2, r3
 8002f28:	0013      	movs	r3, r2
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	d026      	beq.n	8002f7e <HAL_DMA_IRQHandler+0x7a>
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	2204      	movs	r2, #4
 8002f34:	4013      	ands	r3, r2
 8002f36:	d022      	beq.n	8002f7e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2220      	movs	r2, #32
 8002f40:	4013      	ands	r3, r2
 8002f42:	d107      	bne.n	8002f54 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2104      	movs	r1, #4
 8002f50:	438a      	bics	r2, r1
 8002f52:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f58:	221c      	movs	r2, #28
 8002f5a:	401a      	ands	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f60:	2104      	movs	r1, #4
 8002f62:	4091      	lsls	r1, r2
 8002f64:	000a      	movs	r2, r1
 8002f66:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d100      	bne.n	8002f72 <HAL_DMA_IRQHandler+0x6e>
 8002f70:	e071      	b.n	8003056 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	0010      	movs	r0, r2
 8002f7a:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8002f7c:	e06b      	b.n	8003056 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f82:	221c      	movs	r2, #28
 8002f84:	4013      	ands	r3, r2
 8002f86:	2202      	movs	r2, #2
 8002f88:	409a      	lsls	r2, r3
 8002f8a:	0013      	movs	r3, r2
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	d02d      	beq.n	8002fee <HAL_DMA_IRQHandler+0xea>
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	2202      	movs	r2, #2
 8002f96:	4013      	ands	r3, r2
 8002f98:	d029      	beq.n	8002fee <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2220      	movs	r2, #32
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	d10b      	bne.n	8002fbe <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	210a      	movs	r1, #10
 8002fb2:	438a      	bics	r2, r1
 8002fb4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2225      	movs	r2, #37	; 0x25
 8002fba:	2101      	movs	r1, #1
 8002fbc:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc2:	221c      	movs	r2, #28
 8002fc4:	401a      	ands	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	2102      	movs	r1, #2
 8002fcc:	4091      	lsls	r1, r2
 8002fce:	000a      	movs	r2, r1
 8002fd0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2224      	movs	r2, #36	; 0x24
 8002fd6:	2100      	movs	r1, #0
 8002fd8:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d039      	beq.n	8003056 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	0010      	movs	r0, r2
 8002fea:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002fec:	e033      	b.n	8003056 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff2:	221c      	movs	r2, #28
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	2208      	movs	r2, #8
 8002ff8:	409a      	lsls	r2, r3
 8002ffa:	0013      	movs	r3, r2
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	4013      	ands	r3, r2
 8003000:	d02a      	beq.n	8003058 <HAL_DMA_IRQHandler+0x154>
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	2208      	movs	r2, #8
 8003006:	4013      	ands	r3, r2
 8003008:	d026      	beq.n	8003058 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	210e      	movs	r1, #14
 8003016:	438a      	bics	r2, r1
 8003018:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301e:	221c      	movs	r2, #28
 8003020:	401a      	ands	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003026:	2101      	movs	r1, #1
 8003028:	4091      	lsls	r1, r2
 800302a:	000a      	movs	r2, r1
 800302c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2225      	movs	r2, #37	; 0x25
 8003038:	2101      	movs	r1, #1
 800303a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2224      	movs	r2, #36	; 0x24
 8003040:	2100      	movs	r1, #0
 8003042:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003048:	2b00      	cmp	r3, #0
 800304a:	d005      	beq.n	8003058 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	0010      	movs	r0, r2
 8003054:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003056:	46c0      	nop			; (mov r8, r8)
 8003058:	46c0      	nop			; (mov r8, r8)
}
 800305a:	46bd      	mov	sp, r7
 800305c:	b004      	add	sp, #16
 800305e:	bd80      	pop	{r7, pc}

08003060 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800306a:	2300      	movs	r3, #0
 800306c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800306e:	2300      	movs	r3, #0
 8003070:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003072:	2300      	movs	r3, #0
 8003074:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003076:	e155      	b.n	8003324 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2101      	movs	r1, #1
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	4091      	lsls	r1, r2
 8003082:	000a      	movs	r2, r1
 8003084:	4013      	ands	r3, r2
 8003086:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d100      	bne.n	8003090 <HAL_GPIO_Init+0x30>
 800308e:	e146      	b.n	800331e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	2b02      	cmp	r3, #2
 8003096:	d003      	beq.n	80030a0 <HAL_GPIO_Init+0x40>
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	2b12      	cmp	r3, #18
 800309e:	d123      	bne.n	80030e8 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	08da      	lsrs	r2, r3, #3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3208      	adds	r2, #8
 80030a8:	0092      	lsls	r2, r2, #2
 80030aa:	58d3      	ldr	r3, [r2, r3]
 80030ac:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	2207      	movs	r2, #7
 80030b2:	4013      	ands	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	220f      	movs	r2, #15
 80030b8:	409a      	lsls	r2, r3
 80030ba:	0013      	movs	r3, r2
 80030bc:	43da      	mvns	r2, r3
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	4013      	ands	r3, r2
 80030c2:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	691a      	ldr	r2, [r3, #16]
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	2107      	movs	r1, #7
 80030cc:	400b      	ands	r3, r1
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	409a      	lsls	r2, r3
 80030d2:	0013      	movs	r3, r2
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	08da      	lsrs	r2, r3, #3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	3208      	adds	r2, #8
 80030e2:	0092      	lsls	r2, r2, #2
 80030e4:	6939      	ldr	r1, [r7, #16]
 80030e6:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d00b      	beq.n	8003108 <HAL_GPIO_Init+0xa8>
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d007      	beq.n	8003108 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80030fc:	2b11      	cmp	r3, #17
 80030fe:	d003      	beq.n	8003108 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	2b12      	cmp	r3, #18
 8003106:	d130      	bne.n	800316a <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	2203      	movs	r2, #3
 8003114:	409a      	lsls	r2, r3
 8003116:	0013      	movs	r3, r2
 8003118:	43da      	mvns	r2, r3
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	4013      	ands	r3, r2
 800311e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	68da      	ldr	r2, [r3, #12]
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	409a      	lsls	r2, r3
 800312a:	0013      	movs	r3, r2
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	4313      	orrs	r3, r2
 8003130:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800313e:	2201      	movs	r2, #1
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	409a      	lsls	r2, r3
 8003144:	0013      	movs	r3, r2
 8003146:	43da      	mvns	r2, r3
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	4013      	ands	r3, r2
 800314c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	091b      	lsrs	r3, r3, #4
 8003154:	2201      	movs	r2, #1
 8003156:	401a      	ands	r2, r3
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	409a      	lsls	r2, r3
 800315c:	0013      	movs	r3, r2
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	4313      	orrs	r3, r2
 8003162:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	2203      	movs	r2, #3
 8003176:	409a      	lsls	r2, r3
 8003178:	0013      	movs	r3, r2
 800317a:	43da      	mvns	r2, r3
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	4013      	ands	r3, r2
 8003180:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2203      	movs	r2, #3
 8003188:	401a      	ands	r2, r3
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	409a      	lsls	r2, r3
 8003190:	0013      	movs	r3, r2
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	4313      	orrs	r3, r2
 8003196:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	2203      	movs	r2, #3
 80031aa:	409a      	lsls	r2, r3
 80031ac:	0013      	movs	r3, r2
 80031ae:	43da      	mvns	r2, r3
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	4013      	ands	r3, r2
 80031b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	689a      	ldr	r2, [r3, #8]
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	409a      	lsls	r2, r3
 80031c0:	0013      	movs	r3, r2
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	2380      	movs	r3, #128	; 0x80
 80031d4:	055b      	lsls	r3, r3, #21
 80031d6:	4013      	ands	r3, r2
 80031d8:	d100      	bne.n	80031dc <HAL_GPIO_Init+0x17c>
 80031da:	e0a0      	b.n	800331e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031dc:	4b57      	ldr	r3, [pc, #348]	; (800333c <HAL_GPIO_Init+0x2dc>)
 80031de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031e0:	4b56      	ldr	r3, [pc, #344]	; (800333c <HAL_GPIO_Init+0x2dc>)
 80031e2:	2101      	movs	r1, #1
 80031e4:	430a      	orrs	r2, r1
 80031e6:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 80031e8:	4a55      	ldr	r2, [pc, #340]	; (8003340 <HAL_GPIO_Init+0x2e0>)
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	089b      	lsrs	r3, r3, #2
 80031ee:	3302      	adds	r3, #2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	589b      	ldr	r3, [r3, r2]
 80031f4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	2203      	movs	r2, #3
 80031fa:	4013      	ands	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	220f      	movs	r2, #15
 8003200:	409a      	lsls	r2, r3
 8003202:	0013      	movs	r3, r2
 8003204:	43da      	mvns	r2, r3
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	4013      	ands	r3, r2
 800320a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	23a0      	movs	r3, #160	; 0xa0
 8003210:	05db      	lsls	r3, r3, #23
 8003212:	429a      	cmp	r2, r3
 8003214:	d01f      	beq.n	8003256 <HAL_GPIO_Init+0x1f6>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a4a      	ldr	r2, [pc, #296]	; (8003344 <HAL_GPIO_Init+0x2e4>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d019      	beq.n	8003252 <HAL_GPIO_Init+0x1f2>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a49      	ldr	r2, [pc, #292]	; (8003348 <HAL_GPIO_Init+0x2e8>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d013      	beq.n	800324e <HAL_GPIO_Init+0x1ee>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a48      	ldr	r2, [pc, #288]	; (800334c <HAL_GPIO_Init+0x2ec>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d00d      	beq.n	800324a <HAL_GPIO_Init+0x1ea>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a47      	ldr	r2, [pc, #284]	; (8003350 <HAL_GPIO_Init+0x2f0>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d007      	beq.n	8003246 <HAL_GPIO_Init+0x1e6>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a46      	ldr	r2, [pc, #280]	; (8003354 <HAL_GPIO_Init+0x2f4>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d101      	bne.n	8003242 <HAL_GPIO_Init+0x1e2>
 800323e:	2305      	movs	r3, #5
 8003240:	e00a      	b.n	8003258 <HAL_GPIO_Init+0x1f8>
 8003242:	2306      	movs	r3, #6
 8003244:	e008      	b.n	8003258 <HAL_GPIO_Init+0x1f8>
 8003246:	2304      	movs	r3, #4
 8003248:	e006      	b.n	8003258 <HAL_GPIO_Init+0x1f8>
 800324a:	2303      	movs	r3, #3
 800324c:	e004      	b.n	8003258 <HAL_GPIO_Init+0x1f8>
 800324e:	2302      	movs	r3, #2
 8003250:	e002      	b.n	8003258 <HAL_GPIO_Init+0x1f8>
 8003252:	2301      	movs	r3, #1
 8003254:	e000      	b.n	8003258 <HAL_GPIO_Init+0x1f8>
 8003256:	2300      	movs	r3, #0
 8003258:	697a      	ldr	r2, [r7, #20]
 800325a:	2103      	movs	r1, #3
 800325c:	400a      	ands	r2, r1
 800325e:	0092      	lsls	r2, r2, #2
 8003260:	4093      	lsls	r3, r2
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	4313      	orrs	r3, r2
 8003266:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003268:	4935      	ldr	r1, [pc, #212]	; (8003340 <HAL_GPIO_Init+0x2e0>)
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	089b      	lsrs	r3, r3, #2
 800326e:	3302      	adds	r3, #2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003276:	4b38      	ldr	r3, [pc, #224]	; (8003358 <HAL_GPIO_Init+0x2f8>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	43da      	mvns	r2, r3
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	4013      	ands	r3, r2
 8003284:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	2380      	movs	r3, #128	; 0x80
 800328c:	025b      	lsls	r3, r3, #9
 800328e:	4013      	ands	r3, r2
 8003290:	d003      	beq.n	800329a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	4313      	orrs	r3, r2
 8003298:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800329a:	4b2f      	ldr	r3, [pc, #188]	; (8003358 <HAL_GPIO_Init+0x2f8>)
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80032a0:	4b2d      	ldr	r3, [pc, #180]	; (8003358 <HAL_GPIO_Init+0x2f8>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	43da      	mvns	r2, r3
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	4013      	ands	r3, r2
 80032ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	2380      	movs	r3, #128	; 0x80
 80032b6:	029b      	lsls	r3, r3, #10
 80032b8:	4013      	ands	r3, r2
 80032ba:	d003      	beq.n	80032c4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80032c4:	4b24      	ldr	r3, [pc, #144]	; (8003358 <HAL_GPIO_Init+0x2f8>)
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032ca:	4b23      	ldr	r3, [pc, #140]	; (8003358 <HAL_GPIO_Init+0x2f8>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	43da      	mvns	r2, r3
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	4013      	ands	r3, r2
 80032d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	2380      	movs	r3, #128	; 0x80
 80032e0:	035b      	lsls	r3, r3, #13
 80032e2:	4013      	ands	r3, r2
 80032e4:	d003      	beq.n	80032ee <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80032ee:	4b1a      	ldr	r3, [pc, #104]	; (8003358 <HAL_GPIO_Init+0x2f8>)
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80032f4:	4b18      	ldr	r3, [pc, #96]	; (8003358 <HAL_GPIO_Init+0x2f8>)
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	43da      	mvns	r2, r3
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	4013      	ands	r3, r2
 8003302:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	2380      	movs	r3, #128	; 0x80
 800330a:	039b      	lsls	r3, r3, #14
 800330c:	4013      	ands	r3, r2
 800330e:	d003      	beq.n	8003318 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	4313      	orrs	r3, r2
 8003316:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003318:	4b0f      	ldr	r3, [pc, #60]	; (8003358 <HAL_GPIO_Init+0x2f8>)
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	3301      	adds	r3, #1
 8003322:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	40da      	lsrs	r2, r3
 800332c:	1e13      	subs	r3, r2, #0
 800332e:	d000      	beq.n	8003332 <HAL_GPIO_Init+0x2d2>
 8003330:	e6a2      	b.n	8003078 <HAL_GPIO_Init+0x18>
  }
}
 8003332:	46c0      	nop			; (mov r8, r8)
 8003334:	46bd      	mov	sp, r7
 8003336:	b006      	add	sp, #24
 8003338:	bd80      	pop	{r7, pc}
 800333a:	46c0      	nop			; (mov r8, r8)
 800333c:	40021000 	.word	0x40021000
 8003340:	40010000 	.word	0x40010000
 8003344:	50000400 	.word	0x50000400
 8003348:	50000800 	.word	0x50000800
 800334c:	50000c00 	.word	0x50000c00
 8003350:	50001000 	.word	0x50001000
 8003354:	50001c00 	.word	0x50001c00
 8003358:	40010400 	.word	0x40010400

0800335c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	000a      	movs	r2, r1
 8003366:	1cbb      	adds	r3, r7, #2
 8003368:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	1cba      	adds	r2, r7, #2
 8003370:	8812      	ldrh	r2, [r2, #0]
 8003372:	4013      	ands	r3, r2
 8003374:	d004      	beq.n	8003380 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003376:	230f      	movs	r3, #15
 8003378:	18fb      	adds	r3, r7, r3
 800337a:	2201      	movs	r2, #1
 800337c:	701a      	strb	r2, [r3, #0]
 800337e:	e003      	b.n	8003388 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003380:	230f      	movs	r3, #15
 8003382:	18fb      	adds	r3, r7, r3
 8003384:	2200      	movs	r2, #0
 8003386:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003388:	230f      	movs	r3, #15
 800338a:	18fb      	adds	r3, r7, r3
 800338c:	781b      	ldrb	r3, [r3, #0]
}
 800338e:	0018      	movs	r0, r3
 8003390:	46bd      	mov	sp, r7
 8003392:	b004      	add	sp, #16
 8003394:	bd80      	pop	{r7, pc}

08003396 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b082      	sub	sp, #8
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
 800339e:	0008      	movs	r0, r1
 80033a0:	0011      	movs	r1, r2
 80033a2:	1cbb      	adds	r3, r7, #2
 80033a4:	1c02      	adds	r2, r0, #0
 80033a6:	801a      	strh	r2, [r3, #0]
 80033a8:	1c7b      	adds	r3, r7, #1
 80033aa:	1c0a      	adds	r2, r1, #0
 80033ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 80033ae:	1c7b      	adds	r3, r7, #1
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d004      	beq.n	80033c0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033b6:	1cbb      	adds	r3, r7, #2
 80033b8:	881a      	ldrh	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80033be:	e003      	b.n	80033c8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80033c0:	1cbb      	adds	r3, r7, #2
 80033c2:	881a      	ldrh	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80033c8:	46c0      	nop			; (mov r8, r8)
 80033ca:	46bd      	mov	sp, r7
 80033cc:	b002      	add	sp, #8
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	000a      	movs	r2, r1
 80033da:	1cbb      	adds	r3, r7, #2
 80033dc:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	695a      	ldr	r2, [r3, #20]
 80033e2:	1cbb      	adds	r3, r7, #2
 80033e4:	881b      	ldrh	r3, [r3, #0]
 80033e6:	405a      	eors	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	615a      	str	r2, [r3, #20]
}
 80033ec:	46c0      	nop			; (mov r8, r8)
 80033ee:	46bd      	mov	sp, r7
 80033f0:	b002      	add	sp, #8
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	0002      	movs	r2, r0
 80033fc:	1dbb      	adds	r3, r7, #6
 80033fe:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8003400:	4b09      	ldr	r3, [pc, #36]	; (8003428 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	1dba      	adds	r2, r7, #6
 8003406:	8812      	ldrh	r2, [r2, #0]
 8003408:	4013      	ands	r3, r2
 800340a:	d008      	beq.n	800341e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800340c:	4b06      	ldr	r3, [pc, #24]	; (8003428 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800340e:	1dba      	adds	r2, r7, #6
 8003410:	8812      	ldrh	r2, [r2, #0]
 8003412:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003414:	1dbb      	adds	r3, r7, #6
 8003416:	881b      	ldrh	r3, [r3, #0]
 8003418:	0018      	movs	r0, r3
 800341a:	f7fe fb6f 	bl	8001afc <HAL_GPIO_EXTI_Callback>
  }
}
 800341e:	46c0      	nop			; (mov r8, r8)
 8003420:	46bd      	mov	sp, r7
 8003422:	b002      	add	sp, #8
 8003424:	bd80      	pop	{r7, pc}
 8003426:	46c0      	nop			; (mov r8, r8)
 8003428:	40010400 	.word	0x40010400

0800342c <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e06c      	b.n	8003518 <HAL_LPTIM_Init+0xec>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	222e      	movs	r2, #46	; 0x2e
 8003442:	5c9b      	ldrb	r3, [r3, r2]
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d107      	bne.n	800345a <HAL_LPTIM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	222d      	movs	r2, #45	; 0x2d
 800344e:	2100      	movs	r1, #0
 8003450:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	0018      	movs	r0, r3
 8003456:	f7fe fedd 	bl	8002214 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	222e      	movs	r2, #46	; 0x2e
 800345e:	2102      	movs	r1, #2
 8003460:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d005      	beq.n	800347e <HAL_LPTIM_Init+0x52>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003476:	2380      	movs	r3, #128	; 0x80
 8003478:	041b      	lsls	r3, r3, #16
 800347a:	429a      	cmp	r2, r3
 800347c:	d103      	bne.n	8003486 <HAL_LPTIM_Init+0x5a>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	221e      	movs	r2, #30
 8003482:	4393      	bics	r3, r2
 8003484:	60fb      	str	r3, [r7, #12]
  }
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	4a25      	ldr	r2, [pc, #148]	; (8003520 <HAL_LPTIM_Init+0xf4>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d003      	beq.n	8003498 <HAL_LPTIM_Init+0x6c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	4a24      	ldr	r2, [pc, #144]	; (8003524 <HAL_LPTIM_Init+0xf8>)
 8003494:	4013      	ands	r3, r2
 8003496:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	4a23      	ldr	r2, [pc, #140]	; (8003528 <HAL_LPTIM_Init+0xfc>)
 800349c:	4013      	ands	r3, r2
 800349e:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80034a8:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80034ae:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 80034b4:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 80034ba:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	4313      	orrs	r3, r2
 80034c0:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d005      	beq.n	80034d6 <HAL_LPTIM_Init+0xaa>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034ce:	2380      	movs	r3, #128	; 0x80
 80034d0:	041b      	lsls	r3, r3, #16
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d107      	bne.n	80034e6 <HAL_LPTIM_Init+0xba>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80034de:	4313      	orrs	r3, r2
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]
  }

  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	4a0d      	ldr	r2, [pc, #52]	; (8003520 <HAL_LPTIM_Init+0xf4>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d00a      	beq.n	8003506 <HAL_LPTIM_Init+0xda>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80034f8:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80034fe:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	4313      	orrs	r3, r2
 8003504:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	222e      	movs	r2, #46	; 0x2e
 8003512:	2101      	movs	r1, #1
 8003514:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	0018      	movs	r0, r3
 800351a:	46bd      	mov	sp, r7
 800351c:	b004      	add	sp, #16
 800351e:	bd80      	pop	{r7, pc}
 8003520:	0000ffff 	.word	0x0000ffff
 8003524:	ffff1f3f 	.word	0xffff1f3f
 8003528:	ff19f1f8 	.word	0xff19f1f8

0800352c <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	222e      	movs	r2, #46	; 0x2e
 800353a:	2102      	movs	r1, #2
 800353c:	5499      	strb	r1, [r3, r2]

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT();
 800353e:	4b23      	ldr	r3, [pc, #140]	; (80035cc <HAL_LPTIM_Counter_Start_IT+0xa0>)
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	4b22      	ldr	r3, [pc, #136]	; (80035cc <HAL_LPTIM_Counter_Start_IT+0xa0>)
 8003544:	2180      	movs	r1, #128	; 0x80
 8003546:	0589      	lsls	r1, r1, #22
 8003548:	430a      	orrs	r2, r1
 800354a:	601a      	str	r2, [r3, #0]

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM) && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d00d      	beq.n	8003570 <HAL_LPTIM_Counter_Start_IT+0x44>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003558:	2380      	movs	r3, #128	; 0x80
 800355a:	041b      	lsls	r3, r3, #16
 800355c:	429a      	cmp	r2, r3
 800355e:	d107      	bne.n	8003570 <HAL_LPTIM_Counter_Start_IT+0x44>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68da      	ldr	r2, [r3, #12]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4919      	ldr	r1, [pc, #100]	; (80035d0 <HAL_LPTIM_Counter_Start_IT+0xa4>)
 800356c:	400a      	ands	r2, r1
 800356e:	60da      	str	r2, [r3, #12]
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689a      	ldr	r2, [r3, #8]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2110      	movs	r1, #16
 800357c:	430a      	orrs	r2, r1
 800357e:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	689a      	ldr	r2, [r3, #8]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2102      	movs	r1, #2
 800358c:	430a      	orrs	r2, r1
 800358e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	691a      	ldr	r2, [r3, #16]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2101      	movs	r1, #1
 800359c:	430a      	orrs	r2, r1
 800359e:	611a      	str	r2, [r3, #16]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	619a      	str	r2, [r3, #24]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	691a      	ldr	r2, [r3, #16]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2104      	movs	r1, #4
 80035b4:	430a      	orrs	r2, r1
 80035b6:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	222e      	movs	r2, #46	; 0x2e
 80035bc:	2101      	movs	r1, #1
 80035be:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	0018      	movs	r0, r3
 80035c4:	46bd      	mov	sp, r7
 80035c6:	b002      	add	sp, #8
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	46c0      	nop			; (mov r8, r8)
 80035cc:	40010400 	.word	0x40010400
 80035d0:	fffff1ff 	.word	0xfffff1ff

080035d4 <HAL_LPTIM_Counter_Stop_IT>:
  * @brief  Stop the Counter mode in interrupt mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Stop_IT(LPTIM_HandleTypeDef *hlptim)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	222e      	movs	r2, #46	; 0x2e
 80035e0:	2102      	movs	r1, #2
 80035e2:	5499      	strb	r1, [r3, r2]

  /* Disable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_DISABLE_IT();
 80035e4:	4b11      	ldr	r3, [pc, #68]	; (800362c <HAL_LPTIM_Counter_Stop_IT+0x58>)
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	4b10      	ldr	r3, [pc, #64]	; (800362c <HAL_LPTIM_Counter_Stop_IT+0x58>)
 80035ea:	4911      	ldr	r1, [pc, #68]	; (8003630 <HAL_LPTIM_Counter_Stop_IT+0x5c>)
 80035ec:	400a      	ands	r2, r1
 80035ee:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	0018      	movs	r0, r3
 80035f4:	f000 f8f0 	bl	80037d8 <LPTIM_Disable>

  /* Disable Autoreload write complete interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARROK);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689a      	ldr	r2, [r3, #8]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2110      	movs	r1, #16
 8003604:	438a      	bics	r2, r1
 8003606:	609a      	str	r2, [r3, #8]

  /* Disable Autoreload match interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARRM);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689a      	ldr	r2, [r3, #8]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2102      	movs	r1, #2
 8003614:	438a      	bics	r2, r1
 8003616:	609a      	str	r2, [r3, #8]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	222e      	movs	r2, #46	; 0x2e
 800361c:	2101      	movs	r1, #1
 800361e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	0018      	movs	r0, r3
 8003624:	46bd      	mov	sp, r7
 8003626:	b002      	add	sp, #8
 8003628:	bd80      	pop	{r7, pc}
 800362a:	46c0      	nop			; (mov r8, r8)
 800362c:	40010400 	.word	0x40010400
 8003630:	dfffffff 	.word	0xdfffffff

08003634 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2201      	movs	r2, #1
 8003644:	4013      	ands	r3, r2
 8003646:	2b01      	cmp	r3, #1
 8003648:	d10e      	bne.n	8003668 <HAL_LPTIM_IRQHandler+0x34>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	2201      	movs	r2, #1
 8003652:	4013      	ands	r3, r2
 8003654:	2b01      	cmp	r3, #1
 8003656:	d107      	bne.n	8003668 <HAL_LPTIM_IRQHandler+0x34>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2201      	movs	r2, #1
 800365e:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	0018      	movs	r0, r3
 8003664:	f000 f888 	bl	8003778 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2202      	movs	r2, #2
 8003670:	4013      	ands	r3, r2
 8003672:	2b02      	cmp	r3, #2
 8003674:	d10e      	bne.n	8003694 <HAL_LPTIM_IRQHandler+0x60>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	2202      	movs	r2, #2
 800367e:	4013      	ands	r3, r2
 8003680:	2b02      	cmp	r3, #2
 8003682:	d107      	bne.n	8003694 <HAL_LPTIM_IRQHandler+0x60>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2202      	movs	r2, #2
 800368a:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	0018      	movs	r0, r3
 8003690:	f7fe ff8e 	bl	80025b0 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2204      	movs	r2, #4
 800369c:	4013      	ands	r3, r2
 800369e:	2b04      	cmp	r3, #4
 80036a0:	d10e      	bne.n	80036c0 <HAL_LPTIM_IRQHandler+0x8c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	2204      	movs	r2, #4
 80036aa:	4013      	ands	r3, r2
 80036ac:	2b04      	cmp	r3, #4
 80036ae:	d107      	bne.n	80036c0 <HAL_LPTIM_IRQHandler+0x8c>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2204      	movs	r2, #4
 80036b6:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	0018      	movs	r0, r3
 80036bc:	f000 f864 	bl	8003788 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2208      	movs	r2, #8
 80036c8:	4013      	ands	r3, r2
 80036ca:	2b08      	cmp	r3, #8
 80036cc:	d10e      	bne.n	80036ec <HAL_LPTIM_IRQHandler+0xb8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	2208      	movs	r2, #8
 80036d6:	4013      	ands	r3, r2
 80036d8:	2b08      	cmp	r3, #8
 80036da:	d107      	bne.n	80036ec <HAL_LPTIM_IRQHandler+0xb8>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2208      	movs	r2, #8
 80036e2:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	0018      	movs	r0, r3
 80036e8:	f000 f856 	bl	8003798 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2210      	movs	r2, #16
 80036f4:	4013      	ands	r3, r2
 80036f6:	2b10      	cmp	r3, #16
 80036f8:	d10e      	bne.n	8003718 <HAL_LPTIM_IRQHandler+0xe4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	2210      	movs	r2, #16
 8003702:	4013      	ands	r3, r2
 8003704:	2b10      	cmp	r3, #16
 8003706:	d107      	bne.n	8003718 <HAL_LPTIM_IRQHandler+0xe4>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2210      	movs	r2, #16
 800370e:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	0018      	movs	r0, r3
 8003714:	f000 f848 	bl	80037a8 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2220      	movs	r2, #32
 8003720:	4013      	ands	r3, r2
 8003722:	2b20      	cmp	r3, #32
 8003724:	d10e      	bne.n	8003744 <HAL_LPTIM_IRQHandler+0x110>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	2220      	movs	r2, #32
 800372e:	4013      	ands	r3, r2
 8003730:	2b20      	cmp	r3, #32
 8003732:	d107      	bne.n	8003744 <HAL_LPTIM_IRQHandler+0x110>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2220      	movs	r2, #32
 800373a:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	0018      	movs	r0, r3
 8003740:	f000 f83a 	bl	80037b8 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2240      	movs	r2, #64	; 0x40
 800374c:	4013      	ands	r3, r2
 800374e:	2b40      	cmp	r3, #64	; 0x40
 8003750:	d10e      	bne.n	8003770 <HAL_LPTIM_IRQHandler+0x13c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	2240      	movs	r2, #64	; 0x40
 800375a:	4013      	ands	r3, r2
 800375c:	2b40      	cmp	r3, #64	; 0x40
 800375e:	d107      	bne.n	8003770 <HAL_LPTIM_IRQHandler+0x13c>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2240      	movs	r2, #64	; 0x40
 8003766:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	0018      	movs	r0, r3
 800376c:	f000 f82c 	bl	80037c8 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8003770:	46c0      	nop			; (mov r8, r8)
 8003772:	46bd      	mov	sp, r7
 8003774:	b002      	add	sp, #8
 8003776:	bd80      	pop	{r7, pc}

08003778 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8003780:	46c0      	nop			; (mov r8, r8)
 8003782:	46bd      	mov	sp, r7
 8003784:	b002      	add	sp, #8
 8003786:	bd80      	pop	{r7, pc}

08003788 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8003790:	46c0      	nop			; (mov r8, r8)
 8003792:	46bd      	mov	sp, r7
 8003794:	b002      	add	sp, #8
 8003796:	bd80      	pop	{r7, pc}

08003798 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 80037a0:	46c0      	nop			; (mov r8, r8)
 80037a2:	46bd      	mov	sp, r7
 80037a4:	b002      	add	sp, #8
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 80037b0:	46c0      	nop			; (mov r8, r8)
 80037b2:	46bd      	mov	sp, r7
 80037b4:	b002      	add	sp, #8
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 80037c0:	46c0      	nop			; (mov r8, r8)
 80037c2:	46bd      	mov	sp, r7
 80037c4:	b002      	add	sp, #8
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 80037d0:	46c0      	nop			; (mov r8, r8)
 80037d2:	46bd      	mov	sp, r7
 80037d4:	b002      	add	sp, #8
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *lptim)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b08a      	sub	sp, #40	; 0x28
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 80037e0:	2300      	movs	r3, #0
 80037e2:	627b      	str	r3, [r7, #36]	; 0x24
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80037e4:	b672      	cpsid	i

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)lptim->Instance)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	001a      	movs	r2, r3
 80037ec:	4b5e      	ldr	r3, [pc, #376]	; (8003968 <LPTIM_Disable+0x190>)
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d000      	beq.n	80037f4 <LPTIM_Disable+0x1c>
     case LPTIM2_BASE:
       tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
       break;
#endif /* LPTIM2 */
     default:
       break;
 80037f2:	e006      	b.n	8003802 <LPTIM_Disable+0x2a>
       tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 80037f4:	4b5d      	ldr	r3, [pc, #372]	; (800396c <LPTIM_Disable+0x194>)
 80037f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037f8:	23c0      	movs	r3, #192	; 0xc0
 80037fa:	031b      	lsls	r3, r3, #12
 80037fc:	4013      	ands	r3, r2
 80037fe:	627b      	str	r3, [r7, #36]	; 0x24
       break;
 8003800:	46c0      	nop			; (mov r8, r8)
  }

  /* Save LPTIM configuration registers */
  tmpIER = lptim->Instance->IER;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	623b      	str	r3, [r7, #32]
  tmpCFGR = lptim->Instance->CFGR;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	61fb      	str	r3, [r7, #28]
  tmpCMP = lptim->Instance->CMP;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	61bb      	str	r3, [r7, #24]
  tmpARR = lptim->Instance->ARR;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)lptim->Instance)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	001a      	movs	r2, r3
 8003828:	4b4f      	ldr	r3, [pc, #316]	; (8003968 <LPTIM_Disable+0x190>)
 800382a:	429a      	cmp	r2, r3
 800382c:	d000      	beq.n	8003830 <LPTIM_Disable+0x58>
       __HAL_RCC_LPTIM2_FORCE_RESET();
       __HAL_RCC_LPTIM2_RELEASE_RESET();
       break;
#endif /* LPTIM2 */
     default:
       break;
 800382e:	e00d      	b.n	800384c <LPTIM_Disable+0x74>
       __HAL_RCC_LPTIM1_FORCE_RESET();
 8003830:	4b4e      	ldr	r3, [pc, #312]	; (800396c <LPTIM_Disable+0x194>)
 8003832:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003834:	4b4d      	ldr	r3, [pc, #308]	; (800396c <LPTIM_Disable+0x194>)
 8003836:	2180      	movs	r1, #128	; 0x80
 8003838:	0609      	lsls	r1, r1, #24
 800383a:	430a      	orrs	r2, r1
 800383c:	629a      	str	r2, [r3, #40]	; 0x28
       __HAL_RCC_LPTIM1_RELEASE_RESET();
 800383e:	4b4b      	ldr	r3, [pc, #300]	; (800396c <LPTIM_Disable+0x194>)
 8003840:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003842:	4b4a      	ldr	r3, [pc, #296]	; (800396c <LPTIM_Disable+0x194>)
 8003844:	0052      	lsls	r2, r2, #1
 8003846:	0852      	lsrs	r2, r2, #1
 8003848:	629a      	str	r2, [r3, #40]	; 0x28
       break;
 800384a:	46c0      	nop			; (mov r8, r8)

  /*********** Restore LPTIM Config ***********/
  uint32_t Ref_Time;
  uint32_t Time_Elapsed;

  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d103      	bne.n	800385a <LPTIM_Disable+0x82>
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d100      	bne.n	800385a <LPTIM_Disable+0x82>
 8003858:	e070      	b.n	800393c <LPTIM_Disable+0x164>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)lptim->Instance)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	001a      	movs	r2, r3
 8003860:	4b41      	ldr	r3, [pc, #260]	; (8003968 <LPTIM_Disable+0x190>)
 8003862:	429a      	cmp	r2, r3
 8003864:	d000      	beq.n	8003868 <LPTIM_Disable+0x90>
       case LPTIM2_BASE:
         __HAL_RCC_LPTIM2_CONFIG(0UL);
         break;
#endif /* LPTIM2 */
       default:
         break;
 8003866:	e006      	b.n	8003876 <LPTIM_Disable+0x9e>
         __HAL_RCC_LPTIM1_CONFIG(0UL);
 8003868:	4b40      	ldr	r3, [pc, #256]	; (800396c <LPTIM_Disable+0x194>)
 800386a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800386c:	4b3f      	ldr	r3, [pc, #252]	; (800396c <LPTIM_Disable+0x194>)
 800386e:	4940      	ldr	r1, [pc, #256]	; (8003970 <LPTIM_Disable+0x198>)
 8003870:	400a      	ands	r2, r1
 8003872:	64da      	str	r2, [r3, #76]	; 0x4c
         break;
 8003874:	46c0      	nop			; (mov r8, r8)
    }

    if (tmpCMP != 0UL)
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d025      	beq.n	80038c8 <LPTIM_Disable+0xf0>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      lptim->Instance->CR |= LPTIM_CR_ENABLE;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	691a      	ldr	r2, [r3, #16]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2101      	movs	r1, #1
 8003888:	430a      	orrs	r2, r1
 800388a:	611a      	str	r2, [r3, #16]
      lptim->Instance->CMP = tmpCMP;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	615a      	str	r2, [r3, #20]
      /* Polling on CMP write ok status after above restore operation */
      Ref_Time = HAL_GetTick();
 8003894:	f7fe ff42 	bl	800271c <HAL_GetTick>
 8003898:	0003      	movs	r3, r0
 800389a:	613b      	str	r3, [r7, #16]
      do
      {
        Time_Elapsed = HAL_GetTick() - Ref_Time;
 800389c:	f7fe ff3e 	bl	800271c <HAL_GetTick>
 80038a0:	0002      	movs	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	60fb      	str	r3, [r7, #12]
      } while ((!(__HAL_LPTIM_GET_FLAG(lptim, LPTIM_FLAG_CMPOK))) && (Time_Elapsed <= TIMEOUT));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2208      	movs	r2, #8
 80038b0:	4013      	ands	r3, r2
 80038b2:	2b08      	cmp	r3, #8
 80038b4:	d004      	beq.n	80038c0 <LPTIM_Disable+0xe8>
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	23fa      	movs	r3, #250	; 0xfa
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	429a      	cmp	r2, r3
 80038be:	d9ed      	bls.n	800389c <LPTIM_Disable+0xc4>

      __HAL_LPTIM_CLEAR_FLAG(lptim, LPTIM_FLAG_CMPOK);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2208      	movs	r2, #8
 80038c6:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d025      	beq.n	800391a <LPTIM_Disable+0x142>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      lptim->Instance->CR |= LPTIM_CR_ENABLE;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	691a      	ldr	r2, [r3, #16]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2101      	movs	r1, #1
 80038da:	430a      	orrs	r2, r1
 80038dc:	611a      	str	r2, [r3, #16]
      lptim->Instance->ARR = tmpARR;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	619a      	str	r2, [r3, #24]
      /* Polling on ARR write ok status after above restore operation */
      Ref_Time = HAL_GetTick();
 80038e6:	f7fe ff19 	bl	800271c <HAL_GetTick>
 80038ea:	0003      	movs	r3, r0
 80038ec:	613b      	str	r3, [r7, #16]
      do
      {
        Time_Elapsed = HAL_GetTick() - Ref_Time;
 80038ee:	f7fe ff15 	bl	800271c <HAL_GetTick>
 80038f2:	0002      	movs	r2, r0
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	60fb      	str	r3, [r7, #12]
      } while ((!(__HAL_LPTIM_GET_FLAG(lptim, LPTIM_FLAG_ARROK))) && (Time_Elapsed <= TIMEOUT));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2210      	movs	r2, #16
 8003902:	4013      	ands	r3, r2
 8003904:	2b10      	cmp	r3, #16
 8003906:	d004      	beq.n	8003912 <LPTIM_Disable+0x13a>
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	23fa      	movs	r3, #250	; 0xfa
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	429a      	cmp	r2, r3
 8003910:	d9ed      	bls.n	80038ee <LPTIM_Disable+0x116>

      __HAL_LPTIM_CLEAR_FLAG(lptim, LPTIM_FLAG_ARROK);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2210      	movs	r2, #16
 8003918:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)lptim->Instance)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	001a      	movs	r2, r3
 8003920:	4b11      	ldr	r3, [pc, #68]	; (8003968 <LPTIM_Disable+0x190>)
 8003922:	429a      	cmp	r2, r3
 8003924:	d000      	beq.n	8003928 <LPTIM_Disable+0x150>
       case LPTIM2_BASE:
         __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
         break;
#endif /* LPTIM2 */
       default:
         break;
 8003926:	e00a      	b.n	800393e <LPTIM_Disable+0x166>
         __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8003928:	4b10      	ldr	r3, [pc, #64]	; (800396c <LPTIM_Disable+0x194>)
 800392a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800392c:	4a10      	ldr	r2, [pc, #64]	; (8003970 <LPTIM_Disable+0x198>)
 800392e:	4013      	ands	r3, r2
 8003930:	0019      	movs	r1, r3
 8003932:	4b0e      	ldr	r3, [pc, #56]	; (800396c <LPTIM_Disable+0x194>)
 8003934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003936:	430a      	orrs	r2, r1
 8003938:	64da      	str	r2, [r3, #76]	; 0x4c
         break;
 800393a:	e000      	b.n	800393e <LPTIM_Disable+0x166>
    }
  }
 800393c:	46c0      	nop			; (mov r8, r8)

  /* Restore configuration registers (LPTIM should be disabled first) */
  lptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	691a      	ldr	r2, [r3, #16]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2101      	movs	r1, #1
 800394a:	438a      	bics	r2, r1
 800394c:	611a      	str	r2, [r3, #16]
  lptim->Instance->IER = tmpIER;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	6a3a      	ldr	r2, [r7, #32]
 8003954:	609a      	str	r2, [r3, #8]
  lptim->Instance->CFGR = tmpCFGR;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	69fa      	ldr	r2, [r7, #28]
 800395c:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 800395e:	b662      	cpsie	i

  __enable_irq();
}
 8003960:	46c0      	nop			; (mov r8, r8)
 8003962:	46bd      	mov	sp, r7
 8003964:	b00a      	add	sp, #40	; 0x28
 8003966:	bd80      	pop	{r7, pc}
 8003968:	40007c00 	.word	0x40007c00
 800396c:	40021000 	.word	0x40021000
 8003970:	fff3ffff 	.word	0xfff3ffff

08003974 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8003978:	4b04      	ldr	r3, [pc, #16]	; (800398c <HAL_PWR_EnableBkUpAccess+0x18>)
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	4b03      	ldr	r3, [pc, #12]	; (800398c <HAL_PWR_EnableBkUpAccess+0x18>)
 800397e:	2180      	movs	r1, #128	; 0x80
 8003980:	0049      	lsls	r1, r1, #1
 8003982:	430a      	orrs	r2, r1
 8003984:	601a      	str	r2, [r3, #0]
}
 8003986:	46c0      	nop			; (mov r8, r8)
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	40007000 	.word	0x40007000

08003990 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003990:	b5b0      	push	{r4, r5, r7, lr}
 8003992:	b08a      	sub	sp, #40	; 0x28
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d102      	bne.n	80039a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	f000 fbbc 	bl	800411c <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039a4:	4bc8      	ldr	r3, [pc, #800]	; (8003cc8 <HAL_RCC_OscConfig+0x338>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	220c      	movs	r2, #12
 80039aa:	4013      	ands	r3, r2
 80039ac:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039ae:	4bc6      	ldr	r3, [pc, #792]	; (8003cc8 <HAL_RCC_OscConfig+0x338>)
 80039b0:	68da      	ldr	r2, [r3, #12]
 80039b2:	2380      	movs	r3, #128	; 0x80
 80039b4:	025b      	lsls	r3, r3, #9
 80039b6:	4013      	ands	r3, r2
 80039b8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2201      	movs	r2, #1
 80039c0:	4013      	ands	r3, r2
 80039c2:	d100      	bne.n	80039c6 <HAL_RCC_OscConfig+0x36>
 80039c4:	e07e      	b.n	8003ac4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	2b08      	cmp	r3, #8
 80039ca:	d007      	beq.n	80039dc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	2b0c      	cmp	r3, #12
 80039d0:	d112      	bne.n	80039f8 <HAL_RCC_OscConfig+0x68>
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	2380      	movs	r3, #128	; 0x80
 80039d6:	025b      	lsls	r3, r3, #9
 80039d8:	429a      	cmp	r2, r3
 80039da:	d10d      	bne.n	80039f8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039dc:	4bba      	ldr	r3, [pc, #744]	; (8003cc8 <HAL_RCC_OscConfig+0x338>)
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	2380      	movs	r3, #128	; 0x80
 80039e2:	029b      	lsls	r3, r3, #10
 80039e4:	4013      	ands	r3, r2
 80039e6:	d100      	bne.n	80039ea <HAL_RCC_OscConfig+0x5a>
 80039e8:	e06b      	b.n	8003ac2 <HAL_RCC_OscConfig+0x132>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d167      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	f000 fb92 	bl	800411c <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685a      	ldr	r2, [r3, #4]
 80039fc:	2380      	movs	r3, #128	; 0x80
 80039fe:	025b      	lsls	r3, r3, #9
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d107      	bne.n	8003a14 <HAL_RCC_OscConfig+0x84>
 8003a04:	4bb0      	ldr	r3, [pc, #704]	; (8003cc8 <HAL_RCC_OscConfig+0x338>)
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	4baf      	ldr	r3, [pc, #700]	; (8003cc8 <HAL_RCC_OscConfig+0x338>)
 8003a0a:	2180      	movs	r1, #128	; 0x80
 8003a0c:	0249      	lsls	r1, r1, #9
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	601a      	str	r2, [r3, #0]
 8003a12:	e027      	b.n	8003a64 <HAL_RCC_OscConfig+0xd4>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685a      	ldr	r2, [r3, #4]
 8003a18:	23a0      	movs	r3, #160	; 0xa0
 8003a1a:	02db      	lsls	r3, r3, #11
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d10e      	bne.n	8003a3e <HAL_RCC_OscConfig+0xae>
 8003a20:	4ba9      	ldr	r3, [pc, #676]	; (8003cc8 <HAL_RCC_OscConfig+0x338>)
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	4ba8      	ldr	r3, [pc, #672]	; (8003cc8 <HAL_RCC_OscConfig+0x338>)
 8003a26:	2180      	movs	r1, #128	; 0x80
 8003a28:	02c9      	lsls	r1, r1, #11
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	601a      	str	r2, [r3, #0]
 8003a2e:	4ba6      	ldr	r3, [pc, #664]	; (8003cc8 <HAL_RCC_OscConfig+0x338>)
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	4ba5      	ldr	r3, [pc, #660]	; (8003cc8 <HAL_RCC_OscConfig+0x338>)
 8003a34:	2180      	movs	r1, #128	; 0x80
 8003a36:	0249      	lsls	r1, r1, #9
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	601a      	str	r2, [r3, #0]
 8003a3c:	e012      	b.n	8003a64 <HAL_RCC_OscConfig+0xd4>
 8003a3e:	4ba2      	ldr	r3, [pc, #648]	; (8003cc8 <HAL_RCC_OscConfig+0x338>)
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	4ba1      	ldr	r3, [pc, #644]	; (8003cc8 <HAL_RCC_OscConfig+0x338>)
 8003a44:	49a1      	ldr	r1, [pc, #644]	; (8003ccc <HAL_RCC_OscConfig+0x33c>)
 8003a46:	400a      	ands	r2, r1
 8003a48:	601a      	str	r2, [r3, #0]
 8003a4a:	4b9f      	ldr	r3, [pc, #636]	; (8003cc8 <HAL_RCC_OscConfig+0x338>)
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	2380      	movs	r3, #128	; 0x80
 8003a50:	025b      	lsls	r3, r3, #9
 8003a52:	4013      	ands	r3, r2
 8003a54:	60fb      	str	r3, [r7, #12]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	4b9b      	ldr	r3, [pc, #620]	; (8003cc8 <HAL_RCC_OscConfig+0x338>)
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	4b9a      	ldr	r3, [pc, #616]	; (8003cc8 <HAL_RCC_OscConfig+0x338>)
 8003a5e:	499c      	ldr	r1, [pc, #624]	; (8003cd0 <HAL_RCC_OscConfig+0x340>)
 8003a60:	400a      	ands	r2, r1
 8003a62:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d015      	beq.n	8003a98 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a6c:	f7fe fe56 	bl	800271c <HAL_GetTick>
 8003a70:	0003      	movs	r3, r0
 8003a72:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a74:	e009      	b.n	8003a8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a76:	f7fe fe51 	bl	800271c <HAL_GetTick>
 8003a7a:	0002      	movs	r2, r0
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b64      	cmp	r3, #100	; 0x64
 8003a82:	d902      	bls.n	8003a8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	f000 fb49 	bl	800411c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a8a:	4b8f      	ldr	r3, [pc, #572]	; (8003cc8 <HAL_RCC_OscConfig+0x338>)
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	2380      	movs	r3, #128	; 0x80
 8003a90:	029b      	lsls	r3, r3, #10
 8003a92:	4013      	ands	r3, r2
 8003a94:	d0ef      	beq.n	8003a76 <HAL_RCC_OscConfig+0xe6>
 8003a96:	e015      	b.n	8003ac4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a98:	f7fe fe40 	bl	800271c <HAL_GetTick>
 8003a9c:	0003      	movs	r3, r0
 8003a9e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003aa0:	e008      	b.n	8003ab4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003aa2:	f7fe fe3b 	bl	800271c <HAL_GetTick>
 8003aa6:	0002      	movs	r2, r0
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	2b64      	cmp	r3, #100	; 0x64
 8003aae:	d901      	bls.n	8003ab4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e333      	b.n	800411c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ab4:	4b84      	ldr	r3, [pc, #528]	; (8003cc8 <HAL_RCC_OscConfig+0x338>)
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	2380      	movs	r3, #128	; 0x80
 8003aba:	029b      	lsls	r3, r3, #10
 8003abc:	4013      	ands	r3, r2
 8003abe:	d1f0      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x112>
 8003ac0:	e000      	b.n	8003ac4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2202      	movs	r2, #2
 8003aca:	4013      	ands	r3, r2
 8003acc:	d100      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x140>
 8003ace:	e098      	b.n	8003c02 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad8:	2220      	movs	r2, #32
 8003ada:	4013      	ands	r3, r2
 8003adc:	d009      	beq.n	8003af2 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003ade:	4b7a      	ldr	r3, [pc, #488]	; (8003cc8 <HAL_RCC_OscConfig+0x338>)
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	4b79      	ldr	r3, [pc, #484]	; (8003cc8 <HAL_RCC_OscConfig+0x338>)
 8003ae4:	2120      	movs	r1, #32
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aec:	2220      	movs	r2, #32
 8003aee:	4393      	bics	r3, r2
 8003af0:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	2b04      	cmp	r3, #4
 8003af6:	d005      	beq.n	8003b04 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	2b0c      	cmp	r3, #12
 8003afc:	d13d      	bne.n	8003b7a <HAL_RCC_OscConfig+0x1ea>
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d13a      	bne.n	8003b7a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003b04:	4b70      	ldr	r3, [pc, #448]	; (8003cc8 <HAL_RCC_OscConfig+0x338>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2204      	movs	r2, #4
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	d004      	beq.n	8003b18 <HAL_RCC_OscConfig+0x188>
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d101      	bne.n	8003b18 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e301      	b.n	800411c <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b18:	4b6b      	ldr	r3, [pc, #428]	; (8003cc8 <HAL_RCC_OscConfig+0x338>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	4a6d      	ldr	r2, [pc, #436]	; (8003cd4 <HAL_RCC_OscConfig+0x344>)
 8003b1e:	4013      	ands	r3, r2
 8003b20:	0019      	movs	r1, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	021a      	lsls	r2, r3, #8
 8003b28:	4b67      	ldr	r3, [pc, #412]	; (8003cc8 <HAL_RCC_OscConfig+0x338>)
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003b2e:	4b66      	ldr	r3, [pc, #408]	; (8003cc8 <HAL_RCC_OscConfig+0x338>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2209      	movs	r2, #9
 8003b34:	4393      	bics	r3, r2
 8003b36:	0019      	movs	r1, r3
 8003b38:	4b63      	ldr	r3, [pc, #396]	; (8003cc8 <HAL_RCC_OscConfig+0x338>)
 8003b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b40:	f000 fc20 	bl	8004384 <HAL_RCC_GetSysClockFreq>
 8003b44:	0001      	movs	r1, r0
 8003b46:	4b60      	ldr	r3, [pc, #384]	; (8003cc8 <HAL_RCC_OscConfig+0x338>)
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	091b      	lsrs	r3, r3, #4
 8003b4c:	220f      	movs	r2, #15
 8003b4e:	4013      	ands	r3, r2
 8003b50:	4a61      	ldr	r2, [pc, #388]	; (8003cd8 <HAL_RCC_OscConfig+0x348>)
 8003b52:	5cd3      	ldrb	r3, [r2, r3]
 8003b54:	000a      	movs	r2, r1
 8003b56:	40da      	lsrs	r2, r3
 8003b58:	4b60      	ldr	r3, [pc, #384]	; (8003cdc <HAL_RCC_OscConfig+0x34c>)
 8003b5a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8003b5c:	2513      	movs	r5, #19
 8003b5e:	197c      	adds	r4, r7, r5
 8003b60:	2000      	movs	r0, #0
 8003b62:	f7fe fda5 	bl	80026b0 <HAL_InitTick>
 8003b66:	0003      	movs	r3, r0
 8003b68:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003b6a:	197b      	adds	r3, r7, r5
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d047      	beq.n	8003c02 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8003b72:	2313      	movs	r3, #19
 8003b74:	18fb      	adds	r3, r7, r3
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	e2d0      	b.n	800411c <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d027      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003b80:	4b51      	ldr	r3, [pc, #324]	; (8003cc8 <HAL_RCC_OscConfig+0x338>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2209      	movs	r2, #9
 8003b86:	4393      	bics	r3, r2
 8003b88:	0019      	movs	r1, r3
 8003b8a:	4b4f      	ldr	r3, [pc, #316]	; (8003cc8 <HAL_RCC_OscConfig+0x338>)
 8003b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b92:	f7fe fdc3 	bl	800271c <HAL_GetTick>
 8003b96:	0003      	movs	r3, r0
 8003b98:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b9c:	f7fe fdbe 	bl	800271c <HAL_GetTick>
 8003ba0:	0002      	movs	r2, r0
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e2b6      	b.n	800411c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bae:	4b46      	ldr	r3, [pc, #280]	; (8003cc8 <HAL_RCC_OscConfig+0x338>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2204      	movs	r2, #4
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	d0f1      	beq.n	8003b9c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bb8:	4b43      	ldr	r3, [pc, #268]	; (8003cc8 <HAL_RCC_OscConfig+0x338>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	4a45      	ldr	r2, [pc, #276]	; (8003cd4 <HAL_RCC_OscConfig+0x344>)
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	0019      	movs	r1, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	021a      	lsls	r2, r3, #8
 8003bc8:	4b3f      	ldr	r3, [pc, #252]	; (8003cc8 <HAL_RCC_OscConfig+0x338>)
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	605a      	str	r2, [r3, #4]
 8003bce:	e018      	b.n	8003c02 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bd0:	4b3d      	ldr	r3, [pc, #244]	; (8003cc8 <HAL_RCC_OscConfig+0x338>)
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	4b3c      	ldr	r3, [pc, #240]	; (8003cc8 <HAL_RCC_OscConfig+0x338>)
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	438a      	bics	r2, r1
 8003bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bdc:	f7fe fd9e 	bl	800271c <HAL_GetTick>
 8003be0:	0003      	movs	r3, r0
 8003be2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003be4:	e008      	b.n	8003bf8 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003be6:	f7fe fd99 	bl	800271c <HAL_GetTick>
 8003bea:	0002      	movs	r2, r0
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e291      	b.n	800411c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003bf8:	4b33      	ldr	r3, [pc, #204]	; (8003cc8 <HAL_RCC_OscConfig+0x338>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2204      	movs	r2, #4
 8003bfe:	4013      	ands	r3, r2
 8003c00:	d1f1      	bne.n	8003be6 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2210      	movs	r2, #16
 8003c08:	4013      	ands	r3, r2
 8003c0a:	d100      	bne.n	8003c0e <HAL_RCC_OscConfig+0x27e>
 8003c0c:	e09f      	b.n	8003d4e <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d13f      	bne.n	8003c94 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c14:	4b2c      	ldr	r3, [pc, #176]	; (8003cc8 <HAL_RCC_OscConfig+0x338>)
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	2380      	movs	r3, #128	; 0x80
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	d005      	beq.n	8003c2c <HAL_RCC_OscConfig+0x29c>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	69db      	ldr	r3, [r3, #28]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d101      	bne.n	8003c2c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e277      	b.n	800411c <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c2c:	4b26      	ldr	r3, [pc, #152]	; (8003cc8 <HAL_RCC_OscConfig+0x338>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	4a2b      	ldr	r2, [pc, #172]	; (8003ce0 <HAL_RCC_OscConfig+0x350>)
 8003c32:	4013      	ands	r3, r2
 8003c34:	0019      	movs	r1, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c3a:	4b23      	ldr	r3, [pc, #140]	; (8003cc8 <HAL_RCC_OscConfig+0x338>)
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c40:	4b21      	ldr	r3, [pc, #132]	; (8003cc8 <HAL_RCC_OscConfig+0x338>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	021b      	lsls	r3, r3, #8
 8003c46:	0a19      	lsrs	r1, r3, #8
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a1b      	ldr	r3, [r3, #32]
 8003c4c:	061a      	lsls	r2, r3, #24
 8003c4e:	4b1e      	ldr	r3, [pc, #120]	; (8003cc8 <HAL_RCC_OscConfig+0x338>)
 8003c50:	430a      	orrs	r2, r1
 8003c52:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c58:	0b5b      	lsrs	r3, r3, #13
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	2280      	movs	r2, #128	; 0x80
 8003c5e:	0212      	lsls	r2, r2, #8
 8003c60:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003c62:	4b19      	ldr	r3, [pc, #100]	; (8003cc8 <HAL_RCC_OscConfig+0x338>)
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	091b      	lsrs	r3, r3, #4
 8003c68:	210f      	movs	r1, #15
 8003c6a:	400b      	ands	r3, r1
 8003c6c:	491a      	ldr	r1, [pc, #104]	; (8003cd8 <HAL_RCC_OscConfig+0x348>)
 8003c6e:	5ccb      	ldrb	r3, [r1, r3]
 8003c70:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003c72:	4b1a      	ldr	r3, [pc, #104]	; (8003cdc <HAL_RCC_OscConfig+0x34c>)
 8003c74:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8003c76:	2513      	movs	r5, #19
 8003c78:	197c      	adds	r4, r7, r5
 8003c7a:	2000      	movs	r0, #0
 8003c7c:	f7fe fd18 	bl	80026b0 <HAL_InitTick>
 8003c80:	0003      	movs	r3, r0
 8003c82:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8003c84:	197b      	adds	r3, r7, r5
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d060      	beq.n	8003d4e <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8003c8c:	2313      	movs	r3, #19
 8003c8e:	18fb      	adds	r3, r7, r3
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	e243      	b.n	800411c <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	69db      	ldr	r3, [r3, #28]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d03e      	beq.n	8003d1a <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003c9c:	4b0a      	ldr	r3, [pc, #40]	; (8003cc8 <HAL_RCC_OscConfig+0x338>)
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	4b09      	ldr	r3, [pc, #36]	; (8003cc8 <HAL_RCC_OscConfig+0x338>)
 8003ca2:	2180      	movs	r1, #128	; 0x80
 8003ca4:	0049      	lsls	r1, r1, #1
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003caa:	f7fe fd37 	bl	800271c <HAL_GetTick>
 8003cae:	0003      	movs	r3, r0
 8003cb0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003cb2:	e017      	b.n	8003ce4 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003cb4:	f7fe fd32 	bl	800271c <HAL_GetTick>
 8003cb8:	0002      	movs	r2, r0
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d910      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e22a      	b.n	800411c <HAL_RCC_OscConfig+0x78c>
 8003cc6:	46c0      	nop			; (mov r8, r8)
 8003cc8:	40021000 	.word	0x40021000
 8003ccc:	fffeffff 	.word	0xfffeffff
 8003cd0:	fffbffff 	.word	0xfffbffff
 8003cd4:	ffffe0ff 	.word	0xffffe0ff
 8003cd8:	080074f8 	.word	0x080074f8
 8003cdc:	20000000 	.word	0x20000000
 8003ce0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003ce4:	4bc6      	ldr	r3, [pc, #792]	; (8004000 <HAL_RCC_OscConfig+0x670>)
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	2380      	movs	r3, #128	; 0x80
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	4013      	ands	r3, r2
 8003cee:	d0e1      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cf0:	4bc3      	ldr	r3, [pc, #780]	; (8004000 <HAL_RCC_OscConfig+0x670>)
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	4ac3      	ldr	r2, [pc, #780]	; (8004004 <HAL_RCC_OscConfig+0x674>)
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	0019      	movs	r1, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cfe:	4bc0      	ldr	r3, [pc, #768]	; (8004000 <HAL_RCC_OscConfig+0x670>)
 8003d00:	430a      	orrs	r2, r1
 8003d02:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d04:	4bbe      	ldr	r3, [pc, #760]	; (8004000 <HAL_RCC_OscConfig+0x670>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	021b      	lsls	r3, r3, #8
 8003d0a:	0a19      	lsrs	r1, r3, #8
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	061a      	lsls	r2, r3, #24
 8003d12:	4bbb      	ldr	r3, [pc, #748]	; (8004000 <HAL_RCC_OscConfig+0x670>)
 8003d14:	430a      	orrs	r2, r1
 8003d16:	605a      	str	r2, [r3, #4]
 8003d18:	e019      	b.n	8003d4e <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003d1a:	4bb9      	ldr	r3, [pc, #740]	; (8004000 <HAL_RCC_OscConfig+0x670>)
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	4bb8      	ldr	r3, [pc, #736]	; (8004000 <HAL_RCC_OscConfig+0x670>)
 8003d20:	49b9      	ldr	r1, [pc, #740]	; (8004008 <HAL_RCC_OscConfig+0x678>)
 8003d22:	400a      	ands	r2, r1
 8003d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d26:	f7fe fcf9 	bl	800271c <HAL_GetTick>
 8003d2a:	0003      	movs	r3, r0
 8003d2c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d30:	f7fe fcf4 	bl	800271c <HAL_GetTick>
 8003d34:	0002      	movs	r2, r0
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e1ec      	b.n	800411c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003d42:	4baf      	ldr	r3, [pc, #700]	; (8004000 <HAL_RCC_OscConfig+0x670>)
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	2380      	movs	r3, #128	; 0x80
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	d1f0      	bne.n	8003d30 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2208      	movs	r2, #8
 8003d54:	4013      	ands	r3, r2
 8003d56:	d036      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d019      	beq.n	8003d94 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d60:	4ba7      	ldr	r3, [pc, #668]	; (8004000 <HAL_RCC_OscConfig+0x670>)
 8003d62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d64:	4ba6      	ldr	r3, [pc, #664]	; (8004000 <HAL_RCC_OscConfig+0x670>)
 8003d66:	2101      	movs	r1, #1
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d6c:	f7fe fcd6 	bl	800271c <HAL_GetTick>
 8003d70:	0003      	movs	r3, r0
 8003d72:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d74:	e008      	b.n	8003d88 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d76:	f7fe fcd1 	bl	800271c <HAL_GetTick>
 8003d7a:	0002      	movs	r2, r0
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d901      	bls.n	8003d88 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e1c9      	b.n	800411c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d88:	4b9d      	ldr	r3, [pc, #628]	; (8004000 <HAL_RCC_OscConfig+0x670>)
 8003d8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d8c:	2202      	movs	r2, #2
 8003d8e:	4013      	ands	r3, r2
 8003d90:	d0f1      	beq.n	8003d76 <HAL_RCC_OscConfig+0x3e6>
 8003d92:	e018      	b.n	8003dc6 <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d94:	4b9a      	ldr	r3, [pc, #616]	; (8004000 <HAL_RCC_OscConfig+0x670>)
 8003d96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d98:	4b99      	ldr	r3, [pc, #612]	; (8004000 <HAL_RCC_OscConfig+0x670>)
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	438a      	bics	r2, r1
 8003d9e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003da0:	f7fe fcbc 	bl	800271c <HAL_GetTick>
 8003da4:	0003      	movs	r3, r0
 8003da6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003da8:	e008      	b.n	8003dbc <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003daa:	f7fe fcb7 	bl	800271c <HAL_GetTick>
 8003dae:	0002      	movs	r2, r0
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d901      	bls.n	8003dbc <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e1af      	b.n	800411c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003dbc:	4b90      	ldr	r3, [pc, #576]	; (8004000 <HAL_RCC_OscConfig+0x670>)
 8003dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dc0:	2202      	movs	r2, #2
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	d1f1      	bne.n	8003daa <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2204      	movs	r2, #4
 8003dcc:	4013      	ands	r3, r2
 8003dce:	d100      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x442>
 8003dd0:	e0af      	b.n	8003f32 <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dd2:	2323      	movs	r3, #35	; 0x23
 8003dd4:	18fb      	adds	r3, r7, r3
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dda:	4b89      	ldr	r3, [pc, #548]	; (8004000 <HAL_RCC_OscConfig+0x670>)
 8003ddc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dde:	2380      	movs	r3, #128	; 0x80
 8003de0:	055b      	lsls	r3, r3, #21
 8003de2:	4013      	ands	r3, r2
 8003de4:	d10a      	bne.n	8003dfc <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003de6:	4b86      	ldr	r3, [pc, #536]	; (8004000 <HAL_RCC_OscConfig+0x670>)
 8003de8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dea:	4b85      	ldr	r3, [pc, #532]	; (8004000 <HAL_RCC_OscConfig+0x670>)
 8003dec:	2180      	movs	r1, #128	; 0x80
 8003dee:	0549      	lsls	r1, r1, #21
 8003df0:	430a      	orrs	r2, r1
 8003df2:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003df4:	2323      	movs	r3, #35	; 0x23
 8003df6:	18fb      	adds	r3, r7, r3
 8003df8:	2201      	movs	r2, #1
 8003dfa:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dfc:	4b83      	ldr	r3, [pc, #524]	; (800400c <HAL_RCC_OscConfig+0x67c>)
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	2380      	movs	r3, #128	; 0x80
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	4013      	ands	r3, r2
 8003e06:	d11a      	bne.n	8003e3e <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e08:	4b80      	ldr	r3, [pc, #512]	; (800400c <HAL_RCC_OscConfig+0x67c>)
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	4b7f      	ldr	r3, [pc, #508]	; (800400c <HAL_RCC_OscConfig+0x67c>)
 8003e0e:	2180      	movs	r1, #128	; 0x80
 8003e10:	0049      	lsls	r1, r1, #1
 8003e12:	430a      	orrs	r2, r1
 8003e14:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e16:	f7fe fc81 	bl	800271c <HAL_GetTick>
 8003e1a:	0003      	movs	r3, r0
 8003e1c:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e1e:	e008      	b.n	8003e32 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e20:	f7fe fc7c 	bl	800271c <HAL_GetTick>
 8003e24:	0002      	movs	r2, r0
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	2b64      	cmp	r3, #100	; 0x64
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e174      	b.n	800411c <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e32:	4b76      	ldr	r3, [pc, #472]	; (800400c <HAL_RCC_OscConfig+0x67c>)
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	2380      	movs	r3, #128	; 0x80
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	d0f0      	beq.n	8003e20 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689a      	ldr	r2, [r3, #8]
 8003e42:	2380      	movs	r3, #128	; 0x80
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d107      	bne.n	8003e5a <HAL_RCC_OscConfig+0x4ca>
 8003e4a:	4b6d      	ldr	r3, [pc, #436]	; (8004000 <HAL_RCC_OscConfig+0x670>)
 8003e4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e4e:	4b6c      	ldr	r3, [pc, #432]	; (8004000 <HAL_RCC_OscConfig+0x670>)
 8003e50:	2180      	movs	r1, #128	; 0x80
 8003e52:	0049      	lsls	r1, r1, #1
 8003e54:	430a      	orrs	r2, r1
 8003e56:	651a      	str	r2, [r3, #80]	; 0x50
 8003e58:	e031      	b.n	8003ebe <HAL_RCC_OscConfig+0x52e>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10c      	bne.n	8003e7c <HAL_RCC_OscConfig+0x4ec>
 8003e62:	4b67      	ldr	r3, [pc, #412]	; (8004000 <HAL_RCC_OscConfig+0x670>)
 8003e64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e66:	4b66      	ldr	r3, [pc, #408]	; (8004000 <HAL_RCC_OscConfig+0x670>)
 8003e68:	4967      	ldr	r1, [pc, #412]	; (8004008 <HAL_RCC_OscConfig+0x678>)
 8003e6a:	400a      	ands	r2, r1
 8003e6c:	651a      	str	r2, [r3, #80]	; 0x50
 8003e6e:	4b64      	ldr	r3, [pc, #400]	; (8004000 <HAL_RCC_OscConfig+0x670>)
 8003e70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e72:	4b63      	ldr	r3, [pc, #396]	; (8004000 <HAL_RCC_OscConfig+0x670>)
 8003e74:	4966      	ldr	r1, [pc, #408]	; (8004010 <HAL_RCC_OscConfig+0x680>)
 8003e76:	400a      	ands	r2, r1
 8003e78:	651a      	str	r2, [r3, #80]	; 0x50
 8003e7a:	e020      	b.n	8003ebe <HAL_RCC_OscConfig+0x52e>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	23a0      	movs	r3, #160	; 0xa0
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d10e      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x516>
 8003e88:	4b5d      	ldr	r3, [pc, #372]	; (8004000 <HAL_RCC_OscConfig+0x670>)
 8003e8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e8c:	4b5c      	ldr	r3, [pc, #368]	; (8004000 <HAL_RCC_OscConfig+0x670>)
 8003e8e:	2180      	movs	r1, #128	; 0x80
 8003e90:	00c9      	lsls	r1, r1, #3
 8003e92:	430a      	orrs	r2, r1
 8003e94:	651a      	str	r2, [r3, #80]	; 0x50
 8003e96:	4b5a      	ldr	r3, [pc, #360]	; (8004000 <HAL_RCC_OscConfig+0x670>)
 8003e98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e9a:	4b59      	ldr	r3, [pc, #356]	; (8004000 <HAL_RCC_OscConfig+0x670>)
 8003e9c:	2180      	movs	r1, #128	; 0x80
 8003e9e:	0049      	lsls	r1, r1, #1
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	651a      	str	r2, [r3, #80]	; 0x50
 8003ea4:	e00b      	b.n	8003ebe <HAL_RCC_OscConfig+0x52e>
 8003ea6:	4b56      	ldr	r3, [pc, #344]	; (8004000 <HAL_RCC_OscConfig+0x670>)
 8003ea8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003eaa:	4b55      	ldr	r3, [pc, #340]	; (8004000 <HAL_RCC_OscConfig+0x670>)
 8003eac:	4956      	ldr	r1, [pc, #344]	; (8004008 <HAL_RCC_OscConfig+0x678>)
 8003eae:	400a      	ands	r2, r1
 8003eb0:	651a      	str	r2, [r3, #80]	; 0x50
 8003eb2:	4b53      	ldr	r3, [pc, #332]	; (8004000 <HAL_RCC_OscConfig+0x670>)
 8003eb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003eb6:	4b52      	ldr	r3, [pc, #328]	; (8004000 <HAL_RCC_OscConfig+0x670>)
 8003eb8:	4955      	ldr	r1, [pc, #340]	; (8004010 <HAL_RCC_OscConfig+0x680>)
 8003eba:	400a      	ands	r2, r1
 8003ebc:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d015      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ec6:	f7fe fc29 	bl	800271c <HAL_GetTick>
 8003eca:	0003      	movs	r3, r0
 8003ecc:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ece:	e009      	b.n	8003ee4 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ed0:	f7fe fc24 	bl	800271c <HAL_GetTick>
 8003ed4:	0002      	movs	r2, r0
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	4a4e      	ldr	r2, [pc, #312]	; (8004014 <HAL_RCC_OscConfig+0x684>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e11b      	b.n	800411c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ee4:	4b46      	ldr	r3, [pc, #280]	; (8004000 <HAL_RCC_OscConfig+0x670>)
 8003ee6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ee8:	2380      	movs	r3, #128	; 0x80
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	4013      	ands	r3, r2
 8003eee:	d0ef      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x540>
 8003ef0:	e014      	b.n	8003f1c <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ef2:	f7fe fc13 	bl	800271c <HAL_GetTick>
 8003ef6:	0003      	movs	r3, r0
 8003ef8:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003efa:	e009      	b.n	8003f10 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003efc:	f7fe fc0e 	bl	800271c <HAL_GetTick>
 8003f00:	0002      	movs	r2, r0
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	4a43      	ldr	r2, [pc, #268]	; (8004014 <HAL_RCC_OscConfig+0x684>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d901      	bls.n	8003f10 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e105      	b.n	800411c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f10:	4b3b      	ldr	r3, [pc, #236]	; (8004000 <HAL_RCC_OscConfig+0x670>)
 8003f12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f14:	2380      	movs	r3, #128	; 0x80
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4013      	ands	r3, r2
 8003f1a:	d1ef      	bne.n	8003efc <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f1c:	2323      	movs	r3, #35	; 0x23
 8003f1e:	18fb      	adds	r3, r7, r3
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d105      	bne.n	8003f32 <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f26:	4b36      	ldr	r3, [pc, #216]	; (8004000 <HAL_RCC_OscConfig+0x670>)
 8003f28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f2a:	4b35      	ldr	r3, [pc, #212]	; (8004000 <HAL_RCC_OscConfig+0x670>)
 8003f2c:	493a      	ldr	r1, [pc, #232]	; (8004018 <HAL_RCC_OscConfig+0x688>)
 8003f2e:	400a      	ands	r2, r1
 8003f30:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2220      	movs	r2, #32
 8003f38:	4013      	ands	r3, r2
 8003f3a:	d049      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d026      	beq.n	8003f92 <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003f44:	4b2e      	ldr	r3, [pc, #184]	; (8004000 <HAL_RCC_OscConfig+0x670>)
 8003f46:	689a      	ldr	r2, [r3, #8]
 8003f48:	4b2d      	ldr	r3, [pc, #180]	; (8004000 <HAL_RCC_OscConfig+0x670>)
 8003f4a:	2101      	movs	r1, #1
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	609a      	str	r2, [r3, #8]
 8003f50:	4b2b      	ldr	r3, [pc, #172]	; (8004000 <HAL_RCC_OscConfig+0x670>)
 8003f52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f54:	4b2a      	ldr	r3, [pc, #168]	; (8004000 <HAL_RCC_OscConfig+0x670>)
 8003f56:	2101      	movs	r1, #1
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	635a      	str	r2, [r3, #52]	; 0x34
 8003f5c:	4b2f      	ldr	r3, [pc, #188]	; (800401c <HAL_RCC_OscConfig+0x68c>)
 8003f5e:	6a1a      	ldr	r2, [r3, #32]
 8003f60:	4b2e      	ldr	r3, [pc, #184]	; (800401c <HAL_RCC_OscConfig+0x68c>)
 8003f62:	2180      	movs	r1, #128	; 0x80
 8003f64:	0189      	lsls	r1, r1, #6
 8003f66:	430a      	orrs	r2, r1
 8003f68:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f6a:	f7fe fbd7 	bl	800271c <HAL_GetTick>
 8003f6e:	0003      	movs	r3, r0
 8003f70:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f72:	e008      	b.n	8003f86 <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f74:	f7fe fbd2 	bl	800271c <HAL_GetTick>
 8003f78:	0002      	movs	r2, r0
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e0ca      	b.n	800411c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f86:	4b1e      	ldr	r3, [pc, #120]	; (8004000 <HAL_RCC_OscConfig+0x670>)
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	d0f1      	beq.n	8003f74 <HAL_RCC_OscConfig+0x5e4>
 8003f90:	e01e      	b.n	8003fd0 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003f92:	4b1b      	ldr	r3, [pc, #108]	; (8004000 <HAL_RCC_OscConfig+0x670>)
 8003f94:	689a      	ldr	r2, [r3, #8]
 8003f96:	4b1a      	ldr	r3, [pc, #104]	; (8004000 <HAL_RCC_OscConfig+0x670>)
 8003f98:	2101      	movs	r1, #1
 8003f9a:	438a      	bics	r2, r1
 8003f9c:	609a      	str	r2, [r3, #8]
 8003f9e:	4b1f      	ldr	r3, [pc, #124]	; (800401c <HAL_RCC_OscConfig+0x68c>)
 8003fa0:	6a1a      	ldr	r2, [r3, #32]
 8003fa2:	4b1e      	ldr	r3, [pc, #120]	; (800401c <HAL_RCC_OscConfig+0x68c>)
 8003fa4:	491e      	ldr	r1, [pc, #120]	; (8004020 <HAL_RCC_OscConfig+0x690>)
 8003fa6:	400a      	ands	r2, r1
 8003fa8:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003faa:	f7fe fbb7 	bl	800271c <HAL_GetTick>
 8003fae:	0003      	movs	r3, r0
 8003fb0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003fb2:	e008      	b.n	8003fc6 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fb4:	f7fe fbb2 	bl	800271c <HAL_GetTick>
 8003fb8:	0002      	movs	r2, r0
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e0aa      	b.n	800411c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003fc6:	4b0e      	ldr	r3, [pc, #56]	; (8004000 <HAL_RCC_OscConfig+0x670>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	2202      	movs	r2, #2
 8003fcc:	4013      	ands	r3, r2
 8003fce:	d1f1      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d100      	bne.n	8003fda <HAL_RCC_OscConfig+0x64a>
 8003fd8:	e09f      	b.n	800411a <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	2b0c      	cmp	r3, #12
 8003fde:	d100      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x652>
 8003fe0:	e078      	b.n	80040d4 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d159      	bne.n	800409e <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fea:	4b05      	ldr	r3, [pc, #20]	; (8004000 <HAL_RCC_OscConfig+0x670>)
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	4b04      	ldr	r3, [pc, #16]	; (8004000 <HAL_RCC_OscConfig+0x670>)
 8003ff0:	490c      	ldr	r1, [pc, #48]	; (8004024 <HAL_RCC_OscConfig+0x694>)
 8003ff2:	400a      	ands	r2, r1
 8003ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff6:	f7fe fb91 	bl	800271c <HAL_GetTick>
 8003ffa:	0003      	movs	r3, r0
 8003ffc:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003ffe:	e01c      	b.n	800403a <HAL_RCC_OscConfig+0x6aa>
 8004000:	40021000 	.word	0x40021000
 8004004:	ffff1fff 	.word	0xffff1fff
 8004008:	fffffeff 	.word	0xfffffeff
 800400c:	40007000 	.word	0x40007000
 8004010:	fffffbff 	.word	0xfffffbff
 8004014:	00001388 	.word	0x00001388
 8004018:	efffffff 	.word	0xefffffff
 800401c:	40010000 	.word	0x40010000
 8004020:	ffffdfff 	.word	0xffffdfff
 8004024:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004028:	f7fe fb78 	bl	800271c <HAL_GetTick>
 800402c:	0002      	movs	r2, r0
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b02      	cmp	r3, #2
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e070      	b.n	800411c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800403a:	4b3a      	ldr	r3, [pc, #232]	; (8004124 <HAL_RCC_OscConfig+0x794>)
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	2380      	movs	r3, #128	; 0x80
 8004040:	049b      	lsls	r3, r3, #18
 8004042:	4013      	ands	r3, r2
 8004044:	d1f0      	bne.n	8004028 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004046:	4b37      	ldr	r3, [pc, #220]	; (8004124 <HAL_RCC_OscConfig+0x794>)
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	4a37      	ldr	r2, [pc, #220]	; (8004128 <HAL_RCC_OscConfig+0x798>)
 800404c:	4013      	ands	r3, r2
 800404e:	0019      	movs	r1, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004058:	431a      	orrs	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800405e:	431a      	orrs	r2, r3
 8004060:	4b30      	ldr	r3, [pc, #192]	; (8004124 <HAL_RCC_OscConfig+0x794>)
 8004062:	430a      	orrs	r2, r1
 8004064:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004066:	4b2f      	ldr	r3, [pc, #188]	; (8004124 <HAL_RCC_OscConfig+0x794>)
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	4b2e      	ldr	r3, [pc, #184]	; (8004124 <HAL_RCC_OscConfig+0x794>)
 800406c:	2180      	movs	r1, #128	; 0x80
 800406e:	0449      	lsls	r1, r1, #17
 8004070:	430a      	orrs	r2, r1
 8004072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004074:	f7fe fb52 	bl	800271c <HAL_GetTick>
 8004078:	0003      	movs	r3, r0
 800407a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800407c:	e008      	b.n	8004090 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800407e:	f7fe fb4d 	bl	800271c <HAL_GetTick>
 8004082:	0002      	movs	r2, r0
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	2b02      	cmp	r3, #2
 800408a:	d901      	bls.n	8004090 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e045      	b.n	800411c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004090:	4b24      	ldr	r3, [pc, #144]	; (8004124 <HAL_RCC_OscConfig+0x794>)
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	2380      	movs	r3, #128	; 0x80
 8004096:	049b      	lsls	r3, r3, #18
 8004098:	4013      	ands	r3, r2
 800409a:	d0f0      	beq.n	800407e <HAL_RCC_OscConfig+0x6ee>
 800409c:	e03d      	b.n	800411a <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800409e:	4b21      	ldr	r3, [pc, #132]	; (8004124 <HAL_RCC_OscConfig+0x794>)
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	4b20      	ldr	r3, [pc, #128]	; (8004124 <HAL_RCC_OscConfig+0x794>)
 80040a4:	4921      	ldr	r1, [pc, #132]	; (800412c <HAL_RCC_OscConfig+0x79c>)
 80040a6:	400a      	ands	r2, r1
 80040a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040aa:	f7fe fb37 	bl	800271c <HAL_GetTick>
 80040ae:	0003      	movs	r3, r0
 80040b0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80040b2:	e008      	b.n	80040c6 <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040b4:	f7fe fb32 	bl	800271c <HAL_GetTick>
 80040b8:	0002      	movs	r2, r0
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e02a      	b.n	800411c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80040c6:	4b17      	ldr	r3, [pc, #92]	; (8004124 <HAL_RCC_OscConfig+0x794>)
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	2380      	movs	r3, #128	; 0x80
 80040cc:	049b      	lsls	r3, r3, #18
 80040ce:	4013      	ands	r3, r2
 80040d0:	d1f0      	bne.n	80040b4 <HAL_RCC_OscConfig+0x724>
 80040d2:	e022      	b.n	800411a <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d101      	bne.n	80040e0 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e01d      	b.n	800411c <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80040e0:	4b10      	ldr	r3, [pc, #64]	; (8004124 <HAL_RCC_OscConfig+0x794>)
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040e6:	69ba      	ldr	r2, [r7, #24]
 80040e8:	2380      	movs	r3, #128	; 0x80
 80040ea:	025b      	lsls	r3, r3, #9
 80040ec:	401a      	ands	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d10f      	bne.n	8004116 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80040f6:	69ba      	ldr	r2, [r7, #24]
 80040f8:	23f0      	movs	r3, #240	; 0xf0
 80040fa:	039b      	lsls	r3, r3, #14
 80040fc:	401a      	ands	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004102:	429a      	cmp	r2, r3
 8004104:	d107      	bne.n	8004116 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004106:	69ba      	ldr	r2, [r7, #24]
 8004108:	23c0      	movs	r3, #192	; 0xc0
 800410a:	041b      	lsls	r3, r3, #16
 800410c:	401a      	ands	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004112:	429a      	cmp	r2, r3
 8004114:	d001      	beq.n	800411a <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e000      	b.n	800411c <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	0018      	movs	r0, r3
 800411e:	46bd      	mov	sp, r7
 8004120:	b00a      	add	sp, #40	; 0x28
 8004122:	bdb0      	pop	{r4, r5, r7, pc}
 8004124:	40021000 	.word	0x40021000
 8004128:	ff02ffff 	.word	0xff02ffff
 800412c:	feffffff 	.word	0xfeffffff

08004130 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004130:	b5b0      	push	{r4, r5, r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d101      	bne.n	8004144 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e10d      	b.n	8004360 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004144:	4b88      	ldr	r3, [pc, #544]	; (8004368 <HAL_RCC_ClockConfig+0x238>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2201      	movs	r2, #1
 800414a:	4013      	ands	r3, r2
 800414c:	683a      	ldr	r2, [r7, #0]
 800414e:	429a      	cmp	r2, r3
 8004150:	d911      	bls.n	8004176 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004152:	4b85      	ldr	r3, [pc, #532]	; (8004368 <HAL_RCC_ClockConfig+0x238>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2201      	movs	r2, #1
 8004158:	4393      	bics	r3, r2
 800415a:	0019      	movs	r1, r3
 800415c:	4b82      	ldr	r3, [pc, #520]	; (8004368 <HAL_RCC_ClockConfig+0x238>)
 800415e:	683a      	ldr	r2, [r7, #0]
 8004160:	430a      	orrs	r2, r1
 8004162:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004164:	4b80      	ldr	r3, [pc, #512]	; (8004368 <HAL_RCC_ClockConfig+0x238>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2201      	movs	r2, #1
 800416a:	4013      	ands	r3, r2
 800416c:	683a      	ldr	r2, [r7, #0]
 800416e:	429a      	cmp	r2, r3
 8004170:	d001      	beq.n	8004176 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e0f4      	b.n	8004360 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2202      	movs	r2, #2
 800417c:	4013      	ands	r3, r2
 800417e:	d009      	beq.n	8004194 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004180:	4b7a      	ldr	r3, [pc, #488]	; (800436c <HAL_RCC_ClockConfig+0x23c>)
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	22f0      	movs	r2, #240	; 0xf0
 8004186:	4393      	bics	r3, r2
 8004188:	0019      	movs	r1, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	689a      	ldr	r2, [r3, #8]
 800418e:	4b77      	ldr	r3, [pc, #476]	; (800436c <HAL_RCC_ClockConfig+0x23c>)
 8004190:	430a      	orrs	r2, r1
 8004192:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2201      	movs	r2, #1
 800419a:	4013      	ands	r3, r2
 800419c:	d100      	bne.n	80041a0 <HAL_RCC_ClockConfig+0x70>
 800419e:	e089      	b.n	80042b4 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d107      	bne.n	80041b8 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041a8:	4b70      	ldr	r3, [pc, #448]	; (800436c <HAL_RCC_ClockConfig+0x23c>)
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	2380      	movs	r3, #128	; 0x80
 80041ae:	029b      	lsls	r3, r3, #10
 80041b0:	4013      	ands	r3, r2
 80041b2:	d120      	bne.n	80041f6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e0d3      	b.n	8004360 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	2b03      	cmp	r3, #3
 80041be:	d107      	bne.n	80041d0 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041c0:	4b6a      	ldr	r3, [pc, #424]	; (800436c <HAL_RCC_ClockConfig+0x23c>)
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	2380      	movs	r3, #128	; 0x80
 80041c6:	049b      	lsls	r3, r3, #18
 80041c8:	4013      	ands	r3, r2
 80041ca:	d114      	bne.n	80041f6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e0c7      	b.n	8004360 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d106      	bne.n	80041e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041d8:	4b64      	ldr	r3, [pc, #400]	; (800436c <HAL_RCC_ClockConfig+0x23c>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2204      	movs	r2, #4
 80041de:	4013      	ands	r3, r2
 80041e0:	d109      	bne.n	80041f6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e0bc      	b.n	8004360 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80041e6:	4b61      	ldr	r3, [pc, #388]	; (800436c <HAL_RCC_ClockConfig+0x23c>)
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	2380      	movs	r3, #128	; 0x80
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	4013      	ands	r3, r2
 80041f0:	d101      	bne.n	80041f6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e0b4      	b.n	8004360 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041f6:	4b5d      	ldr	r3, [pc, #372]	; (800436c <HAL_RCC_ClockConfig+0x23c>)
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	2203      	movs	r2, #3
 80041fc:	4393      	bics	r3, r2
 80041fe:	0019      	movs	r1, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	4b59      	ldr	r3, [pc, #356]	; (800436c <HAL_RCC_ClockConfig+0x23c>)
 8004206:	430a      	orrs	r2, r1
 8004208:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800420a:	f7fe fa87 	bl	800271c <HAL_GetTick>
 800420e:	0003      	movs	r3, r0
 8004210:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	2b02      	cmp	r3, #2
 8004218:	d111      	bne.n	800423e <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800421a:	e009      	b.n	8004230 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800421c:	f7fe fa7e 	bl	800271c <HAL_GetTick>
 8004220:	0002      	movs	r2, r0
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	4a52      	ldr	r2, [pc, #328]	; (8004370 <HAL_RCC_ClockConfig+0x240>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d901      	bls.n	8004230 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e097      	b.n	8004360 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004230:	4b4e      	ldr	r3, [pc, #312]	; (800436c <HAL_RCC_ClockConfig+0x23c>)
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	220c      	movs	r2, #12
 8004236:	4013      	ands	r3, r2
 8004238:	2b08      	cmp	r3, #8
 800423a:	d1ef      	bne.n	800421c <HAL_RCC_ClockConfig+0xec>
 800423c:	e03a      	b.n	80042b4 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	2b03      	cmp	r3, #3
 8004244:	d111      	bne.n	800426a <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004246:	e009      	b.n	800425c <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004248:	f7fe fa68 	bl	800271c <HAL_GetTick>
 800424c:	0002      	movs	r2, r0
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	4a47      	ldr	r2, [pc, #284]	; (8004370 <HAL_RCC_ClockConfig+0x240>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d901      	bls.n	800425c <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e081      	b.n	8004360 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800425c:	4b43      	ldr	r3, [pc, #268]	; (800436c <HAL_RCC_ClockConfig+0x23c>)
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	220c      	movs	r2, #12
 8004262:	4013      	ands	r3, r2
 8004264:	2b0c      	cmp	r3, #12
 8004266:	d1ef      	bne.n	8004248 <HAL_RCC_ClockConfig+0x118>
 8004268:	e024      	b.n	80042b4 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d11b      	bne.n	80042aa <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004272:	e009      	b.n	8004288 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004274:	f7fe fa52 	bl	800271c <HAL_GetTick>
 8004278:	0002      	movs	r2, r0
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	4a3c      	ldr	r2, [pc, #240]	; (8004370 <HAL_RCC_ClockConfig+0x240>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d901      	bls.n	8004288 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e06b      	b.n	8004360 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004288:	4b38      	ldr	r3, [pc, #224]	; (800436c <HAL_RCC_ClockConfig+0x23c>)
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	220c      	movs	r2, #12
 800428e:	4013      	ands	r3, r2
 8004290:	2b04      	cmp	r3, #4
 8004292:	d1ef      	bne.n	8004274 <HAL_RCC_ClockConfig+0x144>
 8004294:	e00e      	b.n	80042b4 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004296:	f7fe fa41 	bl	800271c <HAL_GetTick>
 800429a:	0002      	movs	r2, r0
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	4a33      	ldr	r2, [pc, #204]	; (8004370 <HAL_RCC_ClockConfig+0x240>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e05a      	b.n	8004360 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80042aa:	4b30      	ldr	r3, [pc, #192]	; (800436c <HAL_RCC_ClockConfig+0x23c>)
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	220c      	movs	r2, #12
 80042b0:	4013      	ands	r3, r2
 80042b2:	d1f0      	bne.n	8004296 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042b4:	4b2c      	ldr	r3, [pc, #176]	; (8004368 <HAL_RCC_ClockConfig+0x238>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2201      	movs	r2, #1
 80042ba:	4013      	ands	r3, r2
 80042bc:	683a      	ldr	r2, [r7, #0]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d211      	bcs.n	80042e6 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042c2:	4b29      	ldr	r3, [pc, #164]	; (8004368 <HAL_RCC_ClockConfig+0x238>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2201      	movs	r2, #1
 80042c8:	4393      	bics	r3, r2
 80042ca:	0019      	movs	r1, r3
 80042cc:	4b26      	ldr	r3, [pc, #152]	; (8004368 <HAL_RCC_ClockConfig+0x238>)
 80042ce:	683a      	ldr	r2, [r7, #0]
 80042d0:	430a      	orrs	r2, r1
 80042d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042d4:	4b24      	ldr	r3, [pc, #144]	; (8004368 <HAL_RCC_ClockConfig+0x238>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2201      	movs	r2, #1
 80042da:	4013      	ands	r3, r2
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d001      	beq.n	80042e6 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e03c      	b.n	8004360 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2204      	movs	r2, #4
 80042ec:	4013      	ands	r3, r2
 80042ee:	d009      	beq.n	8004304 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042f0:	4b1e      	ldr	r3, [pc, #120]	; (800436c <HAL_RCC_ClockConfig+0x23c>)
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	4a1f      	ldr	r2, [pc, #124]	; (8004374 <HAL_RCC_ClockConfig+0x244>)
 80042f6:	4013      	ands	r3, r2
 80042f8:	0019      	movs	r1, r3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68da      	ldr	r2, [r3, #12]
 80042fe:	4b1b      	ldr	r3, [pc, #108]	; (800436c <HAL_RCC_ClockConfig+0x23c>)
 8004300:	430a      	orrs	r2, r1
 8004302:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2208      	movs	r2, #8
 800430a:	4013      	ands	r3, r2
 800430c:	d00a      	beq.n	8004324 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800430e:	4b17      	ldr	r3, [pc, #92]	; (800436c <HAL_RCC_ClockConfig+0x23c>)
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	4a19      	ldr	r2, [pc, #100]	; (8004378 <HAL_RCC_ClockConfig+0x248>)
 8004314:	4013      	ands	r3, r2
 8004316:	0019      	movs	r1, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	00da      	lsls	r2, r3, #3
 800431e:	4b13      	ldr	r3, [pc, #76]	; (800436c <HAL_RCC_ClockConfig+0x23c>)
 8004320:	430a      	orrs	r2, r1
 8004322:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004324:	f000 f82e 	bl	8004384 <HAL_RCC_GetSysClockFreq>
 8004328:	0001      	movs	r1, r0
 800432a:	4b10      	ldr	r3, [pc, #64]	; (800436c <HAL_RCC_ClockConfig+0x23c>)
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	091b      	lsrs	r3, r3, #4
 8004330:	220f      	movs	r2, #15
 8004332:	4013      	ands	r3, r2
 8004334:	4a11      	ldr	r2, [pc, #68]	; (800437c <HAL_RCC_ClockConfig+0x24c>)
 8004336:	5cd3      	ldrb	r3, [r2, r3]
 8004338:	000a      	movs	r2, r1
 800433a:	40da      	lsrs	r2, r3
 800433c:	4b10      	ldr	r3, [pc, #64]	; (8004380 <HAL_RCC_ClockConfig+0x250>)
 800433e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8004340:	250b      	movs	r5, #11
 8004342:	197c      	adds	r4, r7, r5
 8004344:	2000      	movs	r0, #0
 8004346:	f7fe f9b3 	bl	80026b0 <HAL_InitTick>
 800434a:	0003      	movs	r3, r0
 800434c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800434e:	197b      	adds	r3, r7, r5
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d003      	beq.n	800435e <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8004356:	230b      	movs	r3, #11
 8004358:	18fb      	adds	r3, r7, r3
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	e000      	b.n	8004360 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	0018      	movs	r0, r3
 8004362:	46bd      	mov	sp, r7
 8004364:	b004      	add	sp, #16
 8004366:	bdb0      	pop	{r4, r5, r7, pc}
 8004368:	40022000 	.word	0x40022000
 800436c:	40021000 	.word	0x40021000
 8004370:	00001388 	.word	0x00001388
 8004374:	fffff8ff 	.word	0xfffff8ff
 8004378:	ffffc7ff 	.word	0xffffc7ff
 800437c:	080074f8 	.word	0x080074f8
 8004380:	20000000 	.word	0x20000000

08004384 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800438a:	4b3b      	ldr	r3, [pc, #236]	; (8004478 <HAL_RCC_GetSysClockFreq+0xf4>)
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	220c      	movs	r2, #12
 8004394:	4013      	ands	r3, r2
 8004396:	2b08      	cmp	r3, #8
 8004398:	d00e      	beq.n	80043b8 <HAL_RCC_GetSysClockFreq+0x34>
 800439a:	2b0c      	cmp	r3, #12
 800439c:	d00f      	beq.n	80043be <HAL_RCC_GetSysClockFreq+0x3a>
 800439e:	2b04      	cmp	r3, #4
 80043a0:	d157      	bne.n	8004452 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80043a2:	4b35      	ldr	r3, [pc, #212]	; (8004478 <HAL_RCC_GetSysClockFreq+0xf4>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2210      	movs	r2, #16
 80043a8:	4013      	ands	r3, r2
 80043aa:	d002      	beq.n	80043b2 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80043ac:	4b33      	ldr	r3, [pc, #204]	; (800447c <HAL_RCC_GetSysClockFreq+0xf8>)
 80043ae:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80043b0:	e05d      	b.n	800446e <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 80043b2:	4b33      	ldr	r3, [pc, #204]	; (8004480 <HAL_RCC_GetSysClockFreq+0xfc>)
 80043b4:	613b      	str	r3, [r7, #16]
      break;
 80043b6:	e05a      	b.n	800446e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043b8:	4b32      	ldr	r3, [pc, #200]	; (8004484 <HAL_RCC_GetSysClockFreq+0x100>)
 80043ba:	613b      	str	r3, [r7, #16]
      break;
 80043bc:	e057      	b.n	800446e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	0c9b      	lsrs	r3, r3, #18
 80043c2:	220f      	movs	r2, #15
 80043c4:	4013      	ands	r3, r2
 80043c6:	4a30      	ldr	r2, [pc, #192]	; (8004488 <HAL_RCC_GetSysClockFreq+0x104>)
 80043c8:	5cd3      	ldrb	r3, [r2, r3]
 80043ca:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	0d9b      	lsrs	r3, r3, #22
 80043d0:	2203      	movs	r2, #3
 80043d2:	4013      	ands	r3, r2
 80043d4:	3301      	adds	r3, #1
 80043d6:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043d8:	4b27      	ldr	r3, [pc, #156]	; (8004478 <HAL_RCC_GetSysClockFreq+0xf4>)
 80043da:	68da      	ldr	r2, [r3, #12]
 80043dc:	2380      	movs	r3, #128	; 0x80
 80043de:	025b      	lsls	r3, r3, #9
 80043e0:	4013      	ands	r3, r2
 80043e2:	d00f      	beq.n	8004404 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80043e4:	68b9      	ldr	r1, [r7, #8]
 80043e6:	000a      	movs	r2, r1
 80043e8:	0152      	lsls	r2, r2, #5
 80043ea:	1a52      	subs	r2, r2, r1
 80043ec:	0193      	lsls	r3, r2, #6
 80043ee:	1a9b      	subs	r3, r3, r2
 80043f0:	00db      	lsls	r3, r3, #3
 80043f2:	185b      	adds	r3, r3, r1
 80043f4:	025b      	lsls	r3, r3, #9
 80043f6:	6879      	ldr	r1, [r7, #4]
 80043f8:	0018      	movs	r0, r3
 80043fa:	f7fb fe85 	bl	8000108 <__udivsi3>
 80043fe:	0003      	movs	r3, r0
 8004400:	617b      	str	r3, [r7, #20]
 8004402:	e023      	b.n	800444c <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004404:	4b1c      	ldr	r3, [pc, #112]	; (8004478 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2210      	movs	r2, #16
 800440a:	4013      	ands	r3, r2
 800440c:	d00f      	beq.n	800442e <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 800440e:	68b9      	ldr	r1, [r7, #8]
 8004410:	000a      	movs	r2, r1
 8004412:	0152      	lsls	r2, r2, #5
 8004414:	1a52      	subs	r2, r2, r1
 8004416:	0193      	lsls	r3, r2, #6
 8004418:	1a9b      	subs	r3, r3, r2
 800441a:	00db      	lsls	r3, r3, #3
 800441c:	185b      	adds	r3, r3, r1
 800441e:	021b      	lsls	r3, r3, #8
 8004420:	6879      	ldr	r1, [r7, #4]
 8004422:	0018      	movs	r0, r3
 8004424:	f7fb fe70 	bl	8000108 <__udivsi3>
 8004428:	0003      	movs	r3, r0
 800442a:	617b      	str	r3, [r7, #20]
 800442c:	e00e      	b.n	800444c <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 800442e:	68b9      	ldr	r1, [r7, #8]
 8004430:	000a      	movs	r2, r1
 8004432:	0152      	lsls	r2, r2, #5
 8004434:	1a52      	subs	r2, r2, r1
 8004436:	0193      	lsls	r3, r2, #6
 8004438:	1a9b      	subs	r3, r3, r2
 800443a:	00db      	lsls	r3, r3, #3
 800443c:	185b      	adds	r3, r3, r1
 800443e:	029b      	lsls	r3, r3, #10
 8004440:	6879      	ldr	r1, [r7, #4]
 8004442:	0018      	movs	r0, r3
 8004444:	f7fb fe60 	bl	8000108 <__udivsi3>
 8004448:	0003      	movs	r3, r0
 800444a:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	613b      	str	r3, [r7, #16]
      break;
 8004450:	e00d      	b.n	800446e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004452:	4b09      	ldr	r3, [pc, #36]	; (8004478 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	0b5b      	lsrs	r3, r3, #13
 8004458:	2207      	movs	r2, #7
 800445a:	4013      	ands	r3, r2
 800445c:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	3301      	adds	r3, #1
 8004462:	2280      	movs	r2, #128	; 0x80
 8004464:	0212      	lsls	r2, r2, #8
 8004466:	409a      	lsls	r2, r3
 8004468:	0013      	movs	r3, r2
 800446a:	613b      	str	r3, [r7, #16]
      break;
 800446c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800446e:	693b      	ldr	r3, [r7, #16]
}
 8004470:	0018      	movs	r0, r3
 8004472:	46bd      	mov	sp, r7
 8004474:	b006      	add	sp, #24
 8004476:	bd80      	pop	{r7, pc}
 8004478:	40021000 	.word	0x40021000
 800447c:	003d0900 	.word	0x003d0900
 8004480:	00f42400 	.word	0x00f42400
 8004484:	007a1200 	.word	0x007a1200
 8004488:	08007508 	.word	0x08007508

0800448c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2220      	movs	r2, #32
 800449a:	4013      	ands	r3, r2
 800449c:	d106      	bne.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	2380      	movs	r3, #128	; 0x80
 80044a4:	011b      	lsls	r3, r3, #4
 80044a6:	4013      	ands	r3, r2
 80044a8:	d100      	bne.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x20>
 80044aa:	e0dd      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 80044ac:	2317      	movs	r3, #23
 80044ae:	18fb      	adds	r3, r7, r3
 80044b0:	2200      	movs	r2, #0
 80044b2:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044b4:	4ba4      	ldr	r3, [pc, #656]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80044b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044b8:	2380      	movs	r3, #128	; 0x80
 80044ba:	055b      	lsls	r3, r3, #21
 80044bc:	4013      	ands	r3, r2
 80044be:	d10a      	bne.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044c0:	4ba1      	ldr	r3, [pc, #644]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80044c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044c4:	4ba0      	ldr	r3, [pc, #640]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80044c6:	2180      	movs	r1, #128	; 0x80
 80044c8:	0549      	lsls	r1, r1, #21
 80044ca:	430a      	orrs	r2, r1
 80044cc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80044ce:	2317      	movs	r3, #23
 80044d0:	18fb      	adds	r3, r7, r3
 80044d2:	2201      	movs	r2, #1
 80044d4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d6:	4b9d      	ldr	r3, [pc, #628]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	2380      	movs	r3, #128	; 0x80
 80044dc:	005b      	lsls	r3, r3, #1
 80044de:	4013      	ands	r3, r2
 80044e0:	d11a      	bne.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044e2:	4b9a      	ldr	r3, [pc, #616]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	4b99      	ldr	r3, [pc, #612]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80044e8:	2180      	movs	r1, #128	; 0x80
 80044ea:	0049      	lsls	r1, r1, #1
 80044ec:	430a      	orrs	r2, r1
 80044ee:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044f0:	f7fe f914 	bl	800271c <HAL_GetTick>
 80044f4:	0003      	movs	r3, r0
 80044f6:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044f8:	e008      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044fa:	f7fe f90f 	bl	800271c <HAL_GetTick>
 80044fe:	0002      	movs	r2, r0
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	2b64      	cmp	r3, #100	; 0x64
 8004506:	d901      	bls.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e118      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800450c:	4b8f      	ldr	r3, [pc, #572]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	2380      	movs	r3, #128	; 0x80
 8004512:	005b      	lsls	r3, r3, #1
 8004514:	4013      	ands	r3, r2
 8004516:	d0f0      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004518:	4b8b      	ldr	r3, [pc, #556]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	23c0      	movs	r3, #192	; 0xc0
 800451e:	039b      	lsls	r3, r3, #14
 8004520:	4013      	ands	r3, r2
 8004522:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685a      	ldr	r2, [r3, #4]
 8004528:	23c0      	movs	r3, #192	; 0xc0
 800452a:	039b      	lsls	r3, r3, #14
 800452c:	4013      	ands	r3, r2
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	429a      	cmp	r2, r3
 8004532:	d107      	bne.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689a      	ldr	r2, [r3, #8]
 8004538:	23c0      	movs	r3, #192	; 0xc0
 800453a:	039b      	lsls	r3, r3, #14
 800453c:	4013      	ands	r3, r2
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	429a      	cmp	r2, r3
 8004542:	d013      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685a      	ldr	r2, [r3, #4]
 8004548:	23c0      	movs	r3, #192	; 0xc0
 800454a:	029b      	lsls	r3, r3, #10
 800454c:	401a      	ands	r2, r3
 800454e:	23c0      	movs	r3, #192	; 0xc0
 8004550:	029b      	lsls	r3, r3, #10
 8004552:	429a      	cmp	r2, r3
 8004554:	d10a      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004556:	4b7c      	ldr	r3, [pc, #496]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	2380      	movs	r3, #128	; 0x80
 800455c:	029b      	lsls	r3, r3, #10
 800455e:	401a      	ands	r2, r3
 8004560:	2380      	movs	r3, #128	; 0x80
 8004562:	029b      	lsls	r3, r3, #10
 8004564:	429a      	cmp	r2, r3
 8004566:	d101      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e0e8      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800456c:	4b76      	ldr	r3, [pc, #472]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800456e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004570:	23c0      	movs	r3, #192	; 0xc0
 8004572:	029b      	lsls	r3, r3, #10
 8004574:	4013      	ands	r3, r2
 8004576:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d049      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x186>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685a      	ldr	r2, [r3, #4]
 8004582:	23c0      	movs	r3, #192	; 0xc0
 8004584:	029b      	lsls	r3, r3, #10
 8004586:	4013      	ands	r3, r2
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	429a      	cmp	r2, r3
 800458c:	d004      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2220      	movs	r2, #32
 8004594:	4013      	ands	r3, r2
 8004596:	d10d      	bne.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689a      	ldr	r2, [r3, #8]
 800459c:	23c0      	movs	r3, #192	; 0xc0
 800459e:	029b      	lsls	r3, r3, #10
 80045a0:	4013      	ands	r3, r2
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d034      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	2380      	movs	r3, #128	; 0x80
 80045ae:	011b      	lsls	r3, r3, #4
 80045b0:	4013      	ands	r3, r2
 80045b2:	d02e      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80045b4:	4b64      	ldr	r3, [pc, #400]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80045b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045b8:	4a65      	ldr	r2, [pc, #404]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045ba:	4013      	ands	r3, r2
 80045bc:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045be:	4b62      	ldr	r3, [pc, #392]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80045c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045c2:	4b61      	ldr	r3, [pc, #388]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80045c4:	2180      	movs	r1, #128	; 0x80
 80045c6:	0309      	lsls	r1, r1, #12
 80045c8:	430a      	orrs	r2, r1
 80045ca:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045cc:	4b5e      	ldr	r3, [pc, #376]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80045ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045d0:	4b5d      	ldr	r3, [pc, #372]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80045d2:	4960      	ldr	r1, [pc, #384]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80045d4:	400a      	ands	r2, r1
 80045d6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80045d8:	4b5b      	ldr	r3, [pc, #364]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	2380      	movs	r3, #128	; 0x80
 80045e2:	005b      	lsls	r3, r3, #1
 80045e4:	4013      	ands	r3, r2
 80045e6:	d014      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e8:	f7fe f898 	bl	800271c <HAL_GetTick>
 80045ec:	0003      	movs	r3, r0
 80045ee:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045f0:	e009      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045f2:	f7fe f893 	bl	800271c <HAL_GetTick>
 80045f6:	0002      	movs	r2, r0
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	4a56      	ldr	r2, [pc, #344]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d901      	bls.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e09b      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004606:	4b50      	ldr	r3, [pc, #320]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004608:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800460a:	2380      	movs	r3, #128	; 0x80
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	4013      	ands	r3, r2
 8004610:	d0ef      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685a      	ldr	r2, [r3, #4]
 8004616:	23c0      	movs	r3, #192	; 0xc0
 8004618:	029b      	lsls	r3, r3, #10
 800461a:	401a      	ands	r2, r3
 800461c:	23c0      	movs	r3, #192	; 0xc0
 800461e:	029b      	lsls	r3, r3, #10
 8004620:	429a      	cmp	r2, r3
 8004622:	d10c      	bne.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8004624:	4b48      	ldr	r3, [pc, #288]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a4c      	ldr	r2, [pc, #304]	; (800475c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800462a:	4013      	ands	r3, r2
 800462c:	0019      	movs	r1, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685a      	ldr	r2, [r3, #4]
 8004632:	23c0      	movs	r3, #192	; 0xc0
 8004634:	039b      	lsls	r3, r3, #14
 8004636:	401a      	ands	r2, r3
 8004638:	4b43      	ldr	r3, [pc, #268]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800463a:	430a      	orrs	r2, r1
 800463c:	601a      	str	r2, [r3, #0]
 800463e:	4b42      	ldr	r3, [pc, #264]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004640:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685a      	ldr	r2, [r3, #4]
 8004646:	23c0      	movs	r3, #192	; 0xc0
 8004648:	029b      	lsls	r3, r3, #10
 800464a:	401a      	ands	r2, r3
 800464c:	4b3e      	ldr	r3, [pc, #248]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800464e:	430a      	orrs	r2, r1
 8004650:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004652:	2317      	movs	r3, #23
 8004654:	18fb      	adds	r3, r7, r3
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d105      	bne.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800465c:	4b3a      	ldr	r3, [pc, #232]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800465e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004660:	4b39      	ldr	r3, [pc, #228]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004662:	493f      	ldr	r1, [pc, #252]	; (8004760 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004664:	400a      	ands	r2, r1
 8004666:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2201      	movs	r2, #1
 800466e:	4013      	ands	r3, r2
 8004670:	d009      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004672:	4b35      	ldr	r3, [pc, #212]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004676:	2203      	movs	r2, #3
 8004678:	4393      	bics	r3, r2
 800467a:	0019      	movs	r1, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68da      	ldr	r2, [r3, #12]
 8004680:	4b31      	ldr	r3, [pc, #196]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004682:	430a      	orrs	r2, r1
 8004684:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2202      	movs	r2, #2
 800468c:	4013      	ands	r3, r2
 800468e:	d009      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004690:	4b2d      	ldr	r3, [pc, #180]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004694:	220c      	movs	r2, #12
 8004696:	4393      	bics	r3, r2
 8004698:	0019      	movs	r1, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	691a      	ldr	r2, [r3, #16]
 800469e:	4b2a      	ldr	r3, [pc, #168]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80046a0:	430a      	orrs	r2, r1
 80046a2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2204      	movs	r2, #4
 80046aa:	4013      	ands	r3, r2
 80046ac:	d009      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046ae:	4b26      	ldr	r3, [pc, #152]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80046b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046b2:	4a2c      	ldr	r2, [pc, #176]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80046b4:	4013      	ands	r3, r2
 80046b6:	0019      	movs	r1, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	695a      	ldr	r2, [r3, #20]
 80046bc:	4b22      	ldr	r3, [pc, #136]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80046be:	430a      	orrs	r2, r1
 80046c0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2208      	movs	r2, #8
 80046c8:	4013      	ands	r3, r2
 80046ca:	d009      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046cc:	4b1e      	ldr	r3, [pc, #120]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80046ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046d0:	4a25      	ldr	r2, [pc, #148]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80046d2:	4013      	ands	r3, r2
 80046d4:	0019      	movs	r1, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	699a      	ldr	r2, [r3, #24]
 80046da:	4b1b      	ldr	r3, [pc, #108]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80046dc:	430a      	orrs	r2, r1
 80046de:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	2380      	movs	r3, #128	; 0x80
 80046e6:	005b      	lsls	r3, r3, #1
 80046e8:	4013      	ands	r3, r2
 80046ea:	d009      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046ec:	4b16      	ldr	r3, [pc, #88]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80046ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046f0:	4a17      	ldr	r2, [pc, #92]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046f2:	4013      	ands	r3, r2
 80046f4:	0019      	movs	r1, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	69da      	ldr	r2, [r3, #28]
 80046fa:	4b13      	ldr	r3, [pc, #76]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80046fc:	430a      	orrs	r2, r1
 80046fe:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2240      	movs	r2, #64	; 0x40
 8004706:	4013      	ands	r3, r2
 8004708:	d009      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800470a:	4b0f      	ldr	r3, [pc, #60]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800470c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800470e:	4a17      	ldr	r2, [pc, #92]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004710:	4013      	ands	r3, r2
 8004712:	0019      	movs	r1, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004718:	4b0b      	ldr	r3, [pc, #44]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800471a:	430a      	orrs	r2, r1
 800471c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2280      	movs	r2, #128	; 0x80
 8004724:	4013      	ands	r3, r2
 8004726:	d009      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004728:	4b07      	ldr	r3, [pc, #28]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800472a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800472c:	4a10      	ldr	r2, [pc, #64]	; (8004770 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800472e:	4013      	ands	r3, r2
 8004730:	0019      	movs	r1, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a1a      	ldr	r2, [r3, #32]
 8004736:	4b04      	ldr	r3, [pc, #16]	; (8004748 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004738:	430a      	orrs	r2, r1
 800473a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	0018      	movs	r0, r3
 8004740:	46bd      	mov	sp, r7
 8004742:	b006      	add	sp, #24
 8004744:	bd80      	pop	{r7, pc}
 8004746:	46c0      	nop			; (mov r8, r8)
 8004748:	40021000 	.word	0x40021000
 800474c:	40007000 	.word	0x40007000
 8004750:	fffcffff 	.word	0xfffcffff
 8004754:	fff7ffff 	.word	0xfff7ffff
 8004758:	00001388 	.word	0x00001388
 800475c:	ffcfffff 	.word	0xffcfffff
 8004760:	efffffff 	.word	0xefffffff
 8004764:	fffff3ff 	.word	0xfffff3ff
 8004768:	ffffcfff 	.word	0xffffcfff
 800476c:	fbffffff 	.word	0xfbffffff
 8004770:	fff3ffff 	.word	0xfff3ffff

08004774 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d101      	bne.n	8004786 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e08e      	b.n	80048a4 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2221      	movs	r2, #33	; 0x21
 800478a:	5c9b      	ldrb	r3, [r3, r2]
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	d107      	bne.n	80047a2 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2220      	movs	r2, #32
 8004796:	2100      	movs	r1, #0
 8004798:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	0018      	movs	r0, r3
 800479e:	f7fd fd59 	bl	8002254 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2221      	movs	r2, #33	; 0x21
 80047a6:	2102      	movs	r1, #2
 80047a8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	22ca      	movs	r2, #202	; 0xca
 80047b0:	625a      	str	r2, [r3, #36]	; 0x24
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2253      	movs	r2, #83	; 0x53
 80047b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	0018      	movs	r0, r3
 80047be:	f000 fd2c 	bl	800521a <RTC_EnterInitMode>
 80047c2:	1e03      	subs	r3, r0, #0
 80047c4:	d009      	beq.n	80047da <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	22ff      	movs	r2, #255	; 0xff
 80047cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2221      	movs	r2, #33	; 0x21
 80047d2:	2104      	movs	r1, #4
 80047d4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e064      	b.n	80048a4 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	689a      	ldr	r2, [r3, #8]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4931      	ldr	r1, [pc, #196]	; (80048ac <HAL_RTC_Init+0x138>)
 80047e6:	400a      	ands	r2, r1
 80047e8:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6899      	ldr	r1, [r3, #8]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685a      	ldr	r2, [r3, #4]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	431a      	orrs	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	431a      	orrs	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	430a      	orrs	r2, r1
 8004806:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	68d2      	ldr	r2, [r2, #12]
 8004810:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	6919      	ldr	r1, [r3, #16]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	041a      	lsls	r2, r3, #16
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	430a      	orrs	r2, r1
 8004824:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68da      	ldr	r2, [r3, #12]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2180      	movs	r1, #128	; 0x80
 8004832:	438a      	bics	r2, r1
 8004834:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2103      	movs	r1, #3
 8004842:	438a      	bics	r2, r1
 8004844:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	69da      	ldr	r2, [r3, #28]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	695b      	ldr	r3, [r3, #20]
 8004854:	431a      	orrs	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	430a      	orrs	r2, r1
 800485c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	2220      	movs	r2, #32
 8004866:	4013      	ands	r3, r2
 8004868:	d113      	bne.n	8004892 <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	0018      	movs	r0, r3
 800486e:	f000 fcad 	bl	80051cc <HAL_RTC_WaitForSynchro>
 8004872:	1e03      	subs	r3, r0, #0
 8004874:	d00d      	beq.n	8004892 <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	22ff      	movs	r2, #255	; 0xff
 800487c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2221      	movs	r2, #33	; 0x21
 8004882:	2104      	movs	r1, #4
 8004884:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2220      	movs	r2, #32
 800488a:	2100      	movs	r1, #0
 800488c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e008      	b.n	80048a4 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	22ff      	movs	r2, #255	; 0xff
 8004898:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2221      	movs	r2, #33	; 0x21
 800489e:	2101      	movs	r1, #1
 80048a0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80048a2:	2300      	movs	r3, #0
  }
}
 80048a4:	0018      	movs	r0, r3
 80048a6:	46bd      	mov	sp, r7
 80048a8:	b002      	add	sp, #8
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	ff8fffbf 	.word	0xff8fffbf

080048b0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80048b0:	b590      	push	{r4, r7, lr}
 80048b2:	b087      	sub	sp, #28
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2220      	movs	r2, #32
 80048c0:	5c9b      	ldrb	r3, [r3, r2]
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d101      	bne.n	80048ca <HAL_RTC_SetTime+0x1a>
 80048c6:	2302      	movs	r3, #2
 80048c8:	e0ad      	b.n	8004a26 <HAL_RTC_SetTime+0x176>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2220      	movs	r2, #32
 80048ce:	2101      	movs	r1, #1
 80048d0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2221      	movs	r2, #33	; 0x21
 80048d6:	2102      	movs	r1, #2
 80048d8:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d125      	bne.n	800492c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	2240      	movs	r2, #64	; 0x40
 80048e8:	4013      	ands	r3, r2
 80048ea:	d102      	bne.n	80048f2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	2200      	movs	r2, #0
 80048f0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	0018      	movs	r0, r3
 80048f8:	f000 fcb9 	bl	800526e <RTC_ByteToBcd2>
 80048fc:	0003      	movs	r3, r0
 80048fe:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	785b      	ldrb	r3, [r3, #1]
 8004904:	0018      	movs	r0, r3
 8004906:	f000 fcb2 	bl	800526e <RTC_ByteToBcd2>
 800490a:	0003      	movs	r3, r0
 800490c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800490e:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	789b      	ldrb	r3, [r3, #2]
 8004914:	0018      	movs	r0, r3
 8004916:	f000 fcaa 	bl	800526e <RTC_ByteToBcd2>
 800491a:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800491c:	0022      	movs	r2, r4
 800491e:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	78db      	ldrb	r3, [r3, #3]
 8004924:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004926:	4313      	orrs	r3, r2
 8004928:	617b      	str	r3, [r7, #20]
 800492a:	e017      	b.n	800495c <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	2240      	movs	r2, #64	; 0x40
 8004934:	4013      	ands	r3, r2
 8004936:	d102      	bne.n	800493e <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	2200      	movs	r2, #0
 800493c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	785b      	ldrb	r3, [r3, #1]
 8004948:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800494a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800494c:	68ba      	ldr	r2, [r7, #8]
 800494e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004950:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	78db      	ldrb	r3, [r3, #3]
 8004956:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004958:	4313      	orrs	r3, r2
 800495a:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	22ca      	movs	r2, #202	; 0xca
 8004962:	625a      	str	r2, [r3, #36]	; 0x24
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2253      	movs	r2, #83	; 0x53
 800496a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	0018      	movs	r0, r3
 8004970:	f000 fc53 	bl	800521a <RTC_EnterInitMode>
 8004974:	1e03      	subs	r3, r0, #0
 8004976:	d00d      	beq.n	8004994 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	22ff      	movs	r2, #255	; 0xff
 800497e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2221      	movs	r2, #33	; 0x21
 8004984:	2104      	movs	r1, #4
 8004986:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2220      	movs	r2, #32
 800498c:	2100      	movs	r1, #0
 800498e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e048      	b.n	8004a26 <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	697a      	ldr	r2, [r7, #20]
 800499a:	4925      	ldr	r1, [pc, #148]	; (8004a30 <HAL_RTC_SetTime+0x180>)
 800499c:	400a      	ands	r2, r1
 800499e:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	689a      	ldr	r2, [r3, #8]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4922      	ldr	r1, [pc, #136]	; (8004a34 <HAL_RTC_SetTime+0x184>)
 80049ac:	400a      	ands	r2, r1
 80049ae:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	6899      	ldr	r1, [r3, #8]
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	68da      	ldr	r2, [r3, #12]
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	431a      	orrs	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	430a      	orrs	r2, r1
 80049c6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68da      	ldr	r2, [r3, #12]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2180      	movs	r1, #128	; 0x80
 80049d4:	438a      	bics	r2, r1
 80049d6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	2220      	movs	r2, #32
 80049e0:	4013      	ands	r3, r2
 80049e2:	d113      	bne.n	8004a0c <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	0018      	movs	r0, r3
 80049e8:	f000 fbf0 	bl	80051cc <HAL_RTC_WaitForSynchro>
 80049ec:	1e03      	subs	r3, r0, #0
 80049ee:	d00d      	beq.n	8004a0c <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	22ff      	movs	r2, #255	; 0xff
 80049f6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2221      	movs	r2, #33	; 0x21
 80049fc:	2104      	movs	r1, #4
 80049fe:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2220      	movs	r2, #32
 8004a04:	2100      	movs	r1, #0
 8004a06:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e00c      	b.n	8004a26 <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	22ff      	movs	r2, #255	; 0xff
 8004a12:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2221      	movs	r2, #33	; 0x21
 8004a18:	2101      	movs	r1, #1
 8004a1a:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2220      	movs	r2, #32
 8004a20:	2100      	movs	r1, #0
 8004a22:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004a24:	2300      	movs	r3, #0
  }
}
 8004a26:	0018      	movs	r0, r3
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	b007      	add	sp, #28
 8004a2c:	bd90      	pop	{r4, r7, pc}
 8004a2e:	46c0      	nop			; (mov r8, r8)
 8004a30:	007f7f7f 	.word	0x007f7f7f
 8004a34:	fffbffff 	.word	0xfffbffff

08004a38 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b086      	sub	sp, #24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	045b      	lsls	r3, r3, #17
 8004a56:	0c5a      	lsrs	r2, r3, #17
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a22      	ldr	r2, [pc, #136]	; (8004aec <HAL_RTC_GetTime+0xb4>)
 8004a64:	4013      	ands	r3, r2
 8004a66:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	0c1b      	lsrs	r3, r3, #16
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	223f      	movs	r2, #63	; 0x3f
 8004a70:	4013      	ands	r3, r2
 8004a72:	b2da      	uxtb	r2, r3
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	0a1b      	lsrs	r3, r3, #8
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	227f      	movs	r2, #127	; 0x7f
 8004a80:	4013      	ands	r3, r2
 8004a82:	b2da      	uxtb	r2, r3
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	227f      	movs	r2, #127	; 0x7f
 8004a8e:	4013      	ands	r3, r2
 8004a90:	b2da      	uxtb	r2, r3
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	0c1b      	lsrs	r3, r3, #16
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	2240      	movs	r2, #64	; 0x40
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	b2da      	uxtb	r2, r3
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d11a      	bne.n	8004ae2 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	0018      	movs	r0, r3
 8004ab2:	f000 fc05 	bl	80052c0 <RTC_Bcd2ToByte>
 8004ab6:	0003      	movs	r3, r0
 8004ab8:	001a      	movs	r2, r3
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	785b      	ldrb	r3, [r3, #1]
 8004ac2:	0018      	movs	r0, r3
 8004ac4:	f000 fbfc 	bl	80052c0 <RTC_Bcd2ToByte>
 8004ac8:	0003      	movs	r3, r0
 8004aca:	001a      	movs	r2, r3
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	789b      	ldrb	r3, [r3, #2]
 8004ad4:	0018      	movs	r0, r3
 8004ad6:	f000 fbf3 	bl	80052c0 <RTC_Bcd2ToByte>
 8004ada:	0003      	movs	r3, r0
 8004adc:	001a      	movs	r2, r3
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	0018      	movs	r0, r3
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	b006      	add	sp, #24
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	007f7f7f 	.word	0x007f7f7f

08004af0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004af0:	b590      	push	{r4, r7, lr}
 8004af2:	b087      	sub	sp, #28
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2220      	movs	r2, #32
 8004b00:	5c9b      	ldrb	r3, [r3, r2]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d101      	bne.n	8004b0a <HAL_RTC_SetDate+0x1a>
 8004b06:	2302      	movs	r3, #2
 8004b08:	e099      	b.n	8004c3e <HAL_RTC_SetDate+0x14e>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2220      	movs	r2, #32
 8004b0e:	2101      	movs	r1, #1
 8004b10:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2221      	movs	r2, #33	; 0x21
 8004b16:	2102      	movs	r1, #2
 8004b18:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d10e      	bne.n	8004b3e <HAL_RTC_SetDate+0x4e>
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	785b      	ldrb	r3, [r3, #1]
 8004b24:	001a      	movs	r2, r3
 8004b26:	2310      	movs	r3, #16
 8004b28:	4013      	ands	r3, r2
 8004b2a:	d008      	beq.n	8004b3e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	785b      	ldrb	r3, [r3, #1]
 8004b30:	2210      	movs	r2, #16
 8004b32:	4393      	bics	r3, r2
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	330a      	adds	r3, #10
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d11c      	bne.n	8004b7e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	78db      	ldrb	r3, [r3, #3]
 8004b48:	0018      	movs	r0, r3
 8004b4a:	f000 fb90 	bl	800526e <RTC_ByteToBcd2>
 8004b4e:	0003      	movs	r3, r0
 8004b50:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	785b      	ldrb	r3, [r3, #1]
 8004b56:	0018      	movs	r0, r3
 8004b58:	f000 fb89 	bl	800526e <RTC_ByteToBcd2>
 8004b5c:	0003      	movs	r3, r0
 8004b5e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004b60:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	789b      	ldrb	r3, [r3, #2]
 8004b66:	0018      	movs	r0, r3
 8004b68:	f000 fb81 	bl	800526e <RTC_ByteToBcd2>
 8004b6c:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004b6e:	0022      	movs	r2, r4
 8004b70:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	617b      	str	r3, [r7, #20]
 8004b7c:	e00e      	b.n	8004b9c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	78db      	ldrb	r3, [r3, #3]
 8004b82:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	785b      	ldrb	r3, [r3, #1]
 8004b88:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004b8a:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8004b8c:	68ba      	ldr	r2, [r7, #8]
 8004b8e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8004b90:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	22ca      	movs	r2, #202	; 0xca
 8004ba2:	625a      	str	r2, [r3, #36]	; 0x24
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2253      	movs	r2, #83	; 0x53
 8004baa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	0018      	movs	r0, r3
 8004bb0:	f000 fb33 	bl	800521a <RTC_EnterInitMode>
 8004bb4:	1e03      	subs	r3, r0, #0
 8004bb6:	d00d      	beq.n	8004bd4 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	22ff      	movs	r2, #255	; 0xff
 8004bbe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2221      	movs	r2, #33	; 0x21
 8004bc4:	2104      	movs	r1, #4
 8004bc6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2220      	movs	r2, #32
 8004bcc:	2100      	movs	r1, #0
 8004bce:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e034      	b.n	8004c3e <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	697a      	ldr	r2, [r7, #20]
 8004bda:	491b      	ldr	r1, [pc, #108]	; (8004c48 <HAL_RTC_SetDate+0x158>)
 8004bdc:	400a      	ands	r2, r1
 8004bde:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68da      	ldr	r2, [r3, #12]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2180      	movs	r1, #128	; 0x80
 8004bec:	438a      	bics	r2, r1
 8004bee:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	2220      	movs	r2, #32
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	d113      	bne.n	8004c24 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	0018      	movs	r0, r3
 8004c00:	f000 fae4 	bl	80051cc <HAL_RTC_WaitForSynchro>
 8004c04:	1e03      	subs	r3, r0, #0
 8004c06:	d00d      	beq.n	8004c24 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	22ff      	movs	r2, #255	; 0xff
 8004c0e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2221      	movs	r2, #33	; 0x21
 8004c14:	2104      	movs	r1, #4
 8004c16:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2220      	movs	r2, #32
 8004c1c:	2100      	movs	r1, #0
 8004c1e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e00c      	b.n	8004c3e <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	22ff      	movs	r2, #255	; 0xff
 8004c2a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2221      	movs	r2, #33	; 0x21
 8004c30:	2101      	movs	r1, #1
 8004c32:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2220      	movs	r2, #32
 8004c38:	2100      	movs	r1, #0
 8004c3a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
  }
}
 8004c3e:	0018      	movs	r0, r3
 8004c40:	46bd      	mov	sp, r7
 8004c42:	b007      	add	sp, #28
 8004c44:	bd90      	pop	{r4, r7, pc}
 8004c46:	46c0      	nop			; (mov r8, r8)
 8004c48:	00ffff3f 	.word	0x00ffff3f

08004c4c <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b086      	sub	sp, #24
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	4a21      	ldr	r2, [pc, #132]	; (8004ce4 <HAL_RTC_GetDate+0x98>)
 8004c60:	4013      	ands	r3, r2
 8004c62:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	0c1b      	lsrs	r3, r3, #16
 8004c68:	b2da      	uxtb	r2, r3
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	0a1b      	lsrs	r3, r3, #8
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	221f      	movs	r2, #31
 8004c76:	4013      	ands	r3, r2
 8004c78:	b2da      	uxtb	r2, r3
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	223f      	movs	r2, #63	; 0x3f
 8004c84:	4013      	ands	r3, r2
 8004c86:	b2da      	uxtb	r2, r3
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	0b5b      	lsrs	r3, r3, #13
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	2207      	movs	r2, #7
 8004c94:	4013      	ands	r3, r2
 8004c96:	b2da      	uxtb	r2, r3
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d11a      	bne.n	8004cd8 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	78db      	ldrb	r3, [r3, #3]
 8004ca6:	0018      	movs	r0, r3
 8004ca8:	f000 fb0a 	bl	80052c0 <RTC_Bcd2ToByte>
 8004cac:	0003      	movs	r3, r0
 8004cae:	001a      	movs	r2, r3
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	785b      	ldrb	r3, [r3, #1]
 8004cb8:	0018      	movs	r0, r3
 8004cba:	f000 fb01 	bl	80052c0 <RTC_Bcd2ToByte>
 8004cbe:	0003      	movs	r3, r0
 8004cc0:	001a      	movs	r2, r3
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	789b      	ldrb	r3, [r3, #2]
 8004cca:	0018      	movs	r0, r3
 8004ccc:	f000 faf8 	bl	80052c0 <RTC_Bcd2ToByte>
 8004cd0:	0003      	movs	r3, r0
 8004cd2:	001a      	movs	r2, r3
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	0018      	movs	r0, r3
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	b006      	add	sp, #24
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	46c0      	nop			; (mov r8, r8)
 8004ce4:	00ffff3f 	.word	0x00ffff3f

08004ce8 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004ce8:	b590      	push	{r4, r7, lr}
 8004cea:	b089      	sub	sp, #36	; 0x24
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	5c9b      	ldrb	r3, [r3, r2]
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d101      	bne.n	8004d02 <HAL_RTC_SetAlarm+0x1a>
 8004cfe:	2302      	movs	r3, #2
 8004d00:	e10c      	b.n	8004f1c <HAL_RTC_SetAlarm+0x234>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2220      	movs	r2, #32
 8004d06:	2101      	movs	r1, #1
 8004d08:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2221      	movs	r2, #33	; 0x21
 8004d0e:	2102      	movs	r1, #2
 8004d10:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d136      	bne.n	8004d86 <HAL_RTC_SetAlarm+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	2240      	movs	r2, #64	; 0x40
 8004d20:	4013      	ands	r3, r2
 8004d22:	d102      	bne.n	8004d2a <HAL_RTC_SetAlarm+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	2200      	movs	r2, #0
 8004d28:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	0018      	movs	r0, r3
 8004d30:	f000 fa9d 	bl	800526e <RTC_ByteToBcd2>
 8004d34:	0003      	movs	r3, r0
 8004d36:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	785b      	ldrb	r3, [r3, #1]
 8004d3c:	0018      	movs	r0, r3
 8004d3e:	f000 fa96 	bl	800526e <RTC_ByteToBcd2>
 8004d42:	0003      	movs	r3, r0
 8004d44:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004d46:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	789b      	ldrb	r3, [r3, #2]
 8004d4c:	0018      	movs	r0, r3
 8004d4e:	f000 fa8e 	bl	800526e <RTC_ByteToBcd2>
 8004d52:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004d54:	0022      	movs	r2, r4
 8004d56:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	78db      	ldrb	r3, [r3, #3]
 8004d5c:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8004d5e:	431a      	orrs	r2, r3
 8004d60:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	2220      	movs	r2, #32
 8004d66:	5c9b      	ldrb	r3, [r3, r2]
 8004d68:	0018      	movs	r0, r3
 8004d6a:	f000 fa80 	bl	800526e <RTC_ByteToBcd2>
 8004d6e:	0003      	movs	r3, r0
 8004d70:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004d72:	0022      	movs	r2, r4
 8004d74:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004d7a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004d80:	4313      	orrs	r3, r2
 8004d82:	61fb      	str	r3, [r7, #28]
 8004d84:	e022      	b.n	8004dcc <HAL_RTC_SetAlarm+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	2240      	movs	r2, #64	; 0x40
 8004d8e:	4013      	ands	r3, r2
 8004d90:	d102      	bne.n	8004d98 <HAL_RTC_SetAlarm+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	2200      	movs	r2, #0
 8004d96:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	785b      	ldrb	r3, [r3, #1]
 8004da2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004da4:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8004da6:	68ba      	ldr	r2, [r7, #8]
 8004da8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004daa:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	78db      	ldrb	r3, [r3, #3]
 8004db0:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8004db2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	2120      	movs	r1, #32
 8004db8:	5c5b      	ldrb	r3, [r3, r1]
 8004dba:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004dbc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004dc2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	685a      	ldr	r2, [r3, #4]
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	699b      	ldr	r3, [r3, #24]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	22ca      	movs	r2, #202	; 0xca
 8004dde:	625a      	str	r2, [r3, #36]	; 0x24
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2253      	movs	r2, #83	; 0x53
 8004de6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dec:	2380      	movs	r3, #128	; 0x80
 8004dee:	005b      	lsls	r3, r3, #1
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d143      	bne.n	8004e7c <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	689a      	ldr	r2, [r3, #8]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4949      	ldr	r1, [pc, #292]	; (8004f24 <HAL_RTC_SetAlarm+0x23c>)
 8004e00:	400a      	ands	r2, r1
 8004e02:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	689a      	ldr	r2, [r3, #8]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4946      	ldr	r1, [pc, #280]	; (8004f28 <HAL_RTC_SetAlarm+0x240>)
 8004e10:	400a      	ands	r2, r1
 8004e12:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8004e14:	f7fd fc82 	bl	800271c <HAL_GetTick>
 8004e18:	0003      	movs	r3, r0
 8004e1a:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004e1c:	e016      	b.n	8004e4c <HAL_RTC_SetAlarm+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004e1e:	f7fd fc7d 	bl	800271c <HAL_GetTick>
 8004e22:	0002      	movs	r2, r0
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	1ad2      	subs	r2, r2, r3
 8004e28:	23fa      	movs	r3, #250	; 0xfa
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d90d      	bls.n	8004e4c <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	22ff      	movs	r2, #255	; 0xff
 8004e36:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2221      	movs	r2, #33	; 0x21
 8004e3c:	2103      	movs	r1, #3
 8004e3e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2220      	movs	r2, #32
 8004e44:	2100      	movs	r1, #0
 8004e46:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e067      	b.n	8004f1c <HAL_RTC_SetAlarm+0x234>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	2201      	movs	r2, #1
 8004e54:	4013      	ands	r3, r2
 8004e56:	d0e2      	beq.n	8004e1e <HAL_RTC_SetAlarm+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	69fa      	ldr	r2, [r7, #28]
 8004e5e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	69ba      	ldr	r2, [r7, #24]
 8004e66:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689a      	ldr	r2, [r3, #8]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2180      	movs	r1, #128	; 0x80
 8004e74:	0049      	lsls	r1, r1, #1
 8004e76:	430a      	orrs	r2, r1
 8004e78:	609a      	str	r2, [r3, #8]
 8004e7a:	e042      	b.n	8004f02 <HAL_RTC_SetAlarm+0x21a>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689a      	ldr	r2, [r3, #8]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4929      	ldr	r1, [pc, #164]	; (8004f2c <HAL_RTC_SetAlarm+0x244>)
 8004e88:	400a      	ands	r2, r1
 8004e8a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	689a      	ldr	r2, [r3, #8]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4926      	ldr	r1, [pc, #152]	; (8004f30 <HAL_RTC_SetAlarm+0x248>)
 8004e98:	400a      	ands	r2, r1
 8004e9a:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8004e9c:	f7fd fc3e 	bl	800271c <HAL_GetTick>
 8004ea0:	0003      	movs	r3, r0
 8004ea2:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004ea4:	e016      	b.n	8004ed4 <HAL_RTC_SetAlarm+0x1ec>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004ea6:	f7fd fc39 	bl	800271c <HAL_GetTick>
 8004eaa:	0002      	movs	r2, r0
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	1ad2      	subs	r2, r2, r3
 8004eb0:	23fa      	movs	r3, #250	; 0xfa
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d90d      	bls.n	8004ed4 <HAL_RTC_SetAlarm+0x1ec>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	22ff      	movs	r2, #255	; 0xff
 8004ebe:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2221      	movs	r2, #33	; 0x21
 8004ec4:	2103      	movs	r1, #3
 8004ec6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	2100      	movs	r1, #0
 8004ece:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e023      	b.n	8004f1c <HAL_RTC_SetAlarm+0x234>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	2202      	movs	r2, #2
 8004edc:	4013      	ands	r3, r2
 8004ede:	d0e2      	beq.n	8004ea6 <HAL_RTC_SetAlarm+0x1be>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	69fa      	ldr	r2, [r7, #28]
 8004ee6:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	69ba      	ldr	r2, [r7, #24]
 8004eee:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689a      	ldr	r2, [r3, #8]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2180      	movs	r1, #128	; 0x80
 8004efc:	0089      	lsls	r1, r1, #2
 8004efe:	430a      	orrs	r2, r1
 8004f00:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	22ff      	movs	r2, #255	; 0xff
 8004f08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2221      	movs	r2, #33	; 0x21
 8004f0e:	2101      	movs	r1, #1
 8004f10:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2220      	movs	r2, #32
 8004f16:	2100      	movs	r1, #0
 8004f18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	0018      	movs	r0, r3
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	b009      	add	sp, #36	; 0x24
 8004f22:	bd90      	pop	{r4, r7, pc}
 8004f24:	fffffeff 	.word	0xfffffeff
 8004f28:	ffffefff 	.word	0xffffefff
 8004f2c:	fffffdff 	.word	0xfffffdff
 8004f30:	ffffdfff 	.word	0xffffdfff

08004f34 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004f34:	b590      	push	{r4, r7, lr}
 8004f36:	b089      	sub	sp, #36	; 0x24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2220      	movs	r2, #32
 8004f44:	5c9b      	ldrb	r3, [r3, r2]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d101      	bne.n	8004f4e <HAL_RTC_SetAlarm_IT+0x1a>
 8004f4a:	2302      	movs	r3, #2
 8004f4c:	e130      	b.n	80051b0 <HAL_RTC_SetAlarm_IT+0x27c>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2220      	movs	r2, #32
 8004f52:	2101      	movs	r1, #1
 8004f54:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2221      	movs	r2, #33	; 0x21
 8004f5a:	2102      	movs	r1, #2
 8004f5c:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d136      	bne.n	8004fd2 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	2240      	movs	r2, #64	; 0x40
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	d102      	bne.n	8004f76 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	2200      	movs	r2, #0
 8004f74:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	0018      	movs	r0, r3
 8004f7c:	f000 f977 	bl	800526e <RTC_ByteToBcd2>
 8004f80:	0003      	movs	r3, r0
 8004f82:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	785b      	ldrb	r3, [r3, #1]
 8004f88:	0018      	movs	r0, r3
 8004f8a:	f000 f970 	bl	800526e <RTC_ByteToBcd2>
 8004f8e:	0003      	movs	r3, r0
 8004f90:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004f92:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	789b      	ldrb	r3, [r3, #2]
 8004f98:	0018      	movs	r0, r3
 8004f9a:	f000 f968 	bl	800526e <RTC_ByteToBcd2>
 8004f9e:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004fa0:	0022      	movs	r2, r4
 8004fa2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	78db      	ldrb	r3, [r3, #3]
 8004fa8:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8004faa:	431a      	orrs	r2, r3
 8004fac:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	2220      	movs	r2, #32
 8004fb2:	5c9b      	ldrb	r3, [r3, r2]
 8004fb4:	0018      	movs	r0, r3
 8004fb6:	f000 f95a 	bl	800526e <RTC_ByteToBcd2>
 8004fba:	0003      	movs	r3, r0
 8004fbc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004fbe:	0022      	movs	r2, r4
 8004fc0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004fc6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	61fb      	str	r3, [r7, #28]
 8004fd0:	e022      	b.n	8005018 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	2240      	movs	r2, #64	; 0x40
 8004fda:	4013      	ands	r3, r2
 8004fdc:	d102      	bne.n	8004fe4 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	785b      	ldrb	r3, [r3, #1]
 8004fee:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004ff0:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8004ff2:	68ba      	ldr	r2, [r7, #8]
 8004ff4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004ff6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	78db      	ldrb	r3, [r3, #3]
 8004ffc:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8004ffe:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	2120      	movs	r1, #32
 8005004:	5c5b      	ldrb	r3, [r3, r1]
 8005006:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005008:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800500e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005014:	4313      	orrs	r3, r2
 8005016:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	685a      	ldr	r2, [r3, #4]
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	4313      	orrs	r3, r2
 8005022:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	22ca      	movs	r2, #202	; 0xca
 800502a:	625a      	str	r2, [r3, #36]	; 0x24
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2253      	movs	r2, #83	; 0x53
 8005032:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005038:	2380      	movs	r3, #128	; 0x80
 800503a:	005b      	lsls	r3, r3, #1
 800503c:	429a      	cmp	r2, r3
 800503e:	d14e      	bne.n	80050de <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	689a      	ldr	r2, [r3, #8]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	495b      	ldr	r1, [pc, #364]	; (80051b8 <HAL_RTC_SetAlarm_IT+0x284>)
 800504c:	400a      	ands	r2, r1
 800504e:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	22ff      	movs	r2, #255	; 0xff
 8005058:	401a      	ands	r2, r3
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4957      	ldr	r1, [pc, #348]	; (80051bc <HAL_RTC_SetAlarm_IT+0x288>)
 8005060:	430a      	orrs	r2, r1
 8005062:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005064:	f7fd fb5a 	bl	800271c <HAL_GetTick>
 8005068:	0003      	movs	r3, r0
 800506a:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800506c:	e016      	b.n	800509c <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800506e:	f7fd fb55 	bl	800271c <HAL_GetTick>
 8005072:	0002      	movs	r2, r0
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	1ad2      	subs	r2, r2, r3
 8005078:	23fa      	movs	r3, #250	; 0xfa
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	429a      	cmp	r2, r3
 800507e:	d90d      	bls.n	800509c <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	22ff      	movs	r2, #255	; 0xff
 8005086:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2221      	movs	r2, #33	; 0x21
 800508c:	2103      	movs	r1, #3
 800508e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2220      	movs	r2, #32
 8005094:	2100      	movs	r1, #0
 8005096:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e089      	b.n	80051b0 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	2201      	movs	r2, #1
 80050a4:	4013      	ands	r3, r2
 80050a6:	d0e2      	beq.n	800506e <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	69fa      	ldr	r2, [r7, #28]
 80050ae:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	69ba      	ldr	r2, [r7, #24]
 80050b6:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	689a      	ldr	r2, [r3, #8]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2180      	movs	r1, #128	; 0x80
 80050c4:	0049      	lsls	r1, r1, #1
 80050c6:	430a      	orrs	r2, r1
 80050c8:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	689a      	ldr	r2, [r3, #8]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2180      	movs	r1, #128	; 0x80
 80050d6:	0149      	lsls	r1, r1, #5
 80050d8:	430a      	orrs	r2, r1
 80050da:	609a      	str	r2, [r3, #8]
 80050dc:	e04d      	b.n	800517a <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	689a      	ldr	r2, [r3, #8]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4935      	ldr	r1, [pc, #212]	; (80051c0 <HAL_RTC_SetAlarm_IT+0x28c>)
 80050ea:	400a      	ands	r2, r1
 80050ec:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	22ff      	movs	r2, #255	; 0xff
 80050f6:	401a      	ands	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4931      	ldr	r1, [pc, #196]	; (80051c4 <HAL_RTC_SetAlarm_IT+0x290>)
 80050fe:	430a      	orrs	r2, r1
 8005100:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005102:	f7fd fb0b 	bl	800271c <HAL_GetTick>
 8005106:	0003      	movs	r3, r0
 8005108:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800510a:	e016      	b.n	800513a <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800510c:	f7fd fb06 	bl	800271c <HAL_GetTick>
 8005110:	0002      	movs	r2, r0
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	1ad2      	subs	r2, r2, r3
 8005116:	23fa      	movs	r3, #250	; 0xfa
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	429a      	cmp	r2, r3
 800511c:	d90d      	bls.n	800513a <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	22ff      	movs	r2, #255	; 0xff
 8005124:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2221      	movs	r2, #33	; 0x21
 800512a:	2103      	movs	r1, #3
 800512c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2220      	movs	r2, #32
 8005132:	2100      	movs	r1, #0
 8005134:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e03a      	b.n	80051b0 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	2202      	movs	r2, #2
 8005142:	4013      	ands	r3, r2
 8005144:	d0e2      	beq.n	800510c <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	69fa      	ldr	r2, [r7, #28]
 800514c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	69ba      	ldr	r2, [r7, #24]
 8005154:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	689a      	ldr	r2, [r3, #8]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2180      	movs	r1, #128	; 0x80
 8005162:	0089      	lsls	r1, r1, #2
 8005164:	430a      	orrs	r2, r1
 8005166:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	689a      	ldr	r2, [r3, #8]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2180      	movs	r1, #128	; 0x80
 8005174:	0189      	lsls	r1, r1, #6
 8005176:	430a      	orrs	r2, r1
 8005178:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800517a:	4b13      	ldr	r3, [pc, #76]	; (80051c8 <HAL_RTC_SetAlarm_IT+0x294>)
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	4b12      	ldr	r3, [pc, #72]	; (80051c8 <HAL_RTC_SetAlarm_IT+0x294>)
 8005180:	2180      	movs	r1, #128	; 0x80
 8005182:	0289      	lsls	r1, r1, #10
 8005184:	430a      	orrs	r2, r1
 8005186:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8005188:	4b0f      	ldr	r3, [pc, #60]	; (80051c8 <HAL_RTC_SetAlarm_IT+0x294>)
 800518a:	689a      	ldr	r2, [r3, #8]
 800518c:	4b0e      	ldr	r3, [pc, #56]	; (80051c8 <HAL_RTC_SetAlarm_IT+0x294>)
 800518e:	2180      	movs	r1, #128	; 0x80
 8005190:	0289      	lsls	r1, r1, #10
 8005192:	430a      	orrs	r2, r1
 8005194:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	22ff      	movs	r2, #255	; 0xff
 800519c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2221      	movs	r2, #33	; 0x21
 80051a2:	2101      	movs	r1, #1
 80051a4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2220      	movs	r2, #32
 80051aa:	2100      	movs	r1, #0
 80051ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	0018      	movs	r0, r3
 80051b2:	46bd      	mov	sp, r7
 80051b4:	b009      	add	sp, #36	; 0x24
 80051b6:	bd90      	pop	{r4, r7, pc}
 80051b8:	fffffeff 	.word	0xfffffeff
 80051bc:	fffffe7f 	.word	0xfffffe7f
 80051c0:	fffffdff 	.word	0xfffffdff
 80051c4:	fffffd7f 	.word	0xfffffd7f
 80051c8:	40010400 	.word	0x40010400

080051cc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68da      	ldr	r2, [r3, #12]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	21a0      	movs	r1, #160	; 0xa0
 80051e0:	438a      	bics	r2, r1
 80051e2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80051e4:	f7fd fa9a 	bl	800271c <HAL_GetTick>
 80051e8:	0003      	movs	r3, r0
 80051ea:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80051ec:	e00a      	b.n	8005204 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80051ee:	f7fd fa95 	bl	800271c <HAL_GetTick>
 80051f2:	0002      	movs	r2, r0
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	1ad2      	subs	r2, r2, r3
 80051f8:	23fa      	movs	r3, #250	; 0xfa
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d901      	bls.n	8005204 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e006      	b.n	8005212 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	2220      	movs	r2, #32
 800520c:	4013      	ands	r3, r2
 800520e:	d0ee      	beq.n	80051ee <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	0018      	movs	r0, r3
 8005214:	46bd      	mov	sp, r7
 8005216:	b004      	add	sp, #16
 8005218:	bd80      	pop	{r7, pc}

0800521a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800521a:	b580      	push	{r7, lr}
 800521c:	b084      	sub	sp, #16
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	2240      	movs	r2, #64	; 0x40
 800522a:	4013      	ands	r3, r2
 800522c:	d11a      	bne.n	8005264 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2201      	movs	r2, #1
 8005234:	4252      	negs	r2, r2
 8005236:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005238:	f7fd fa70 	bl	800271c <HAL_GetTick>
 800523c:	0003      	movs	r3, r0
 800523e:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005240:	e00a      	b.n	8005258 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005242:	f7fd fa6b 	bl	800271c <HAL_GetTick>
 8005246:	0002      	movs	r2, r0
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	1ad2      	subs	r2, r2, r3
 800524c:	23fa      	movs	r3, #250	; 0xfa
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	429a      	cmp	r2, r3
 8005252:	d901      	bls.n	8005258 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e006      	b.n	8005266 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	2240      	movs	r2, #64	; 0x40
 8005260:	4013      	ands	r3, r2
 8005262:	d0ee      	beq.n	8005242 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	0018      	movs	r0, r3
 8005268:	46bd      	mov	sp, r7
 800526a:	b004      	add	sp, #16
 800526c:	bd80      	pop	{r7, pc}

0800526e <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800526e:	b580      	push	{r7, lr}
 8005270:	b084      	sub	sp, #16
 8005272:	af00      	add	r7, sp, #0
 8005274:	0002      	movs	r2, r0
 8005276:	1dfb      	adds	r3, r7, #7
 8005278:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800527a:	2300      	movs	r3, #0
 800527c:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800527e:	230b      	movs	r3, #11
 8005280:	18fb      	adds	r3, r7, r3
 8005282:	1dfa      	adds	r2, r7, #7
 8005284:	7812      	ldrb	r2, [r2, #0]
 8005286:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8005288:	e008      	b.n	800529c <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	3301      	adds	r3, #1
 800528e:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8005290:	220b      	movs	r2, #11
 8005292:	18bb      	adds	r3, r7, r2
 8005294:	18ba      	adds	r2, r7, r2
 8005296:	7812      	ldrb	r2, [r2, #0]
 8005298:	3a0a      	subs	r2, #10
 800529a:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 800529c:	230b      	movs	r3, #11
 800529e:	18fb      	adds	r3, r7, r3
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	2b09      	cmp	r3, #9
 80052a4:	d8f1      	bhi.n	800528a <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	011b      	lsls	r3, r3, #4
 80052ac:	b2da      	uxtb	r2, r3
 80052ae:	230b      	movs	r3, #11
 80052b0:	18fb      	adds	r3, r7, r3
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	b2db      	uxtb	r3, r3
}
 80052b8:	0018      	movs	r0, r3
 80052ba:	46bd      	mov	sp, r7
 80052bc:	b004      	add	sp, #16
 80052be:	bd80      	pop	{r7, pc}

080052c0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	0002      	movs	r2, r0
 80052c8:	1dfb      	adds	r3, r7, #7
 80052ca:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80052cc:	1dfb      	adds	r3, r7, #7
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	091b      	lsrs	r3, r3, #4
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	001a      	movs	r2, r3
 80052d6:	0013      	movs	r3, r2
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	189b      	adds	r3, r3, r2
 80052dc:	005b      	lsls	r3, r3, #1
 80052de:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	b2da      	uxtb	r2, r3
 80052e4:	1dfb      	adds	r3, r7, #7
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	210f      	movs	r1, #15
 80052ea:	400b      	ands	r3, r1
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	18d3      	adds	r3, r2, r3
 80052f0:	b2db      	uxtb	r3, r3
}
 80052f2:	0018      	movs	r0, r3
 80052f4:	46bd      	mov	sp, r7
 80052f6:	b004      	add	sp, #16
 80052f8:	bd80      	pop	{r7, pc}
	...

080052fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d101      	bne.n	800530e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e059      	b.n	80053c2 <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2251      	movs	r2, #81	; 0x51
 8005318:	5c9b      	ldrb	r3, [r3, r2]
 800531a:	b2db      	uxtb	r3, r3
 800531c:	2b00      	cmp	r3, #0
 800531e:	d107      	bne.n	8005330 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2250      	movs	r2, #80	; 0x50
 8005324:	2100      	movs	r1, #0
 8005326:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	0018      	movs	r0, r3
 800532c:	f7fc ffaa 	bl	8002284 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2251      	movs	r2, #81	; 0x51
 8005334:	2102      	movs	r1, #2
 8005336:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2140      	movs	r1, #64	; 0x40
 8005344:	438a      	bics	r2, r1
 8005346:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685a      	ldr	r2, [r3, #4]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	431a      	orrs	r2, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	431a      	orrs	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	431a      	orrs	r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	431a      	orrs	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6999      	ldr	r1, [r3, #24]
 8005368:	2380      	movs	r3, #128	; 0x80
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	400b      	ands	r3, r1
 800536e:	431a      	orrs	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	69db      	ldr	r3, [r3, #28]
 8005374:	431a      	orrs	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a1b      	ldr	r3, [r3, #32]
 800537a:	431a      	orrs	r2, r3
 800537c:	0011      	movs	r1, r2
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	430a      	orrs	r2, r1
 8005388:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	0c1b      	lsrs	r3, r3, #16
 8005390:	2204      	movs	r2, #4
 8005392:	4013      	ands	r3, r2
 8005394:	0019      	movs	r1, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	69da      	ldr	r2, [r3, #28]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4907      	ldr	r1, [pc, #28]	; (80053cc <HAL_SPI_Init+0xd0>)
 80053ae:	400a      	ands	r2, r1
 80053b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2251      	movs	r2, #81	; 0x51
 80053bc:	2101      	movs	r1, #1
 80053be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	0018      	movs	r0, r3
 80053c4:	46bd      	mov	sp, r7
 80053c6:	b002      	add	sp, #8
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	46c0      	nop			; (mov r8, r8)
 80053cc:	fffff7ff 	.word	0xfffff7ff

080053d0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b088      	sub	sp, #32
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	603b      	str	r3, [r7, #0]
 80053dc:	1dbb      	adds	r3, r7, #6
 80053de:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80053e0:	231f      	movs	r3, #31
 80053e2:	18fb      	adds	r3, r7, r3
 80053e4:	2200      	movs	r2, #0
 80053e6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2250      	movs	r2, #80	; 0x50
 80053ec:	5c9b      	ldrb	r3, [r3, r2]
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d101      	bne.n	80053f6 <HAL_SPI_Transmit+0x26>
 80053f2:	2302      	movs	r3, #2
 80053f4:	e136      	b.n	8005664 <HAL_SPI_Transmit+0x294>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2250      	movs	r2, #80	; 0x50
 80053fa:	2101      	movs	r1, #1
 80053fc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053fe:	f7fd f98d 	bl	800271c <HAL_GetTick>
 8005402:	0003      	movs	r3, r0
 8005404:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005406:	2316      	movs	r3, #22
 8005408:	18fb      	adds	r3, r7, r3
 800540a:	1dba      	adds	r2, r7, #6
 800540c:	8812      	ldrh	r2, [r2, #0]
 800540e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2251      	movs	r2, #81	; 0x51
 8005414:	5c9b      	ldrb	r3, [r3, r2]
 8005416:	b2db      	uxtb	r3, r3
 8005418:	2b01      	cmp	r3, #1
 800541a:	d004      	beq.n	8005426 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800541c:	231f      	movs	r3, #31
 800541e:	18fb      	adds	r3, r7, r3
 8005420:	2202      	movs	r2, #2
 8005422:	701a      	strb	r2, [r3, #0]
    goto error;
 8005424:	e113      	b.n	800564e <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d003      	beq.n	8005434 <HAL_SPI_Transmit+0x64>
 800542c:	1dbb      	adds	r3, r7, #6
 800542e:	881b      	ldrh	r3, [r3, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d104      	bne.n	800543e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005434:	231f      	movs	r3, #31
 8005436:	18fb      	adds	r3, r7, r3
 8005438:	2201      	movs	r2, #1
 800543a:	701a      	strb	r2, [r3, #0]
    goto error;
 800543c:	e107      	b.n	800564e <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2251      	movs	r2, #81	; 0x51
 8005442:	2103      	movs	r1, #3
 8005444:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	68ba      	ldr	r2, [r7, #8]
 8005450:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	1dba      	adds	r2, r7, #6
 8005456:	8812      	ldrh	r2, [r2, #0]
 8005458:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	1dba      	adds	r2, r7, #6
 800545e:	8812      	ldrh	r2, [r2, #0]
 8005460:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2200      	movs	r2, #0
 8005466:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2200      	movs	r2, #0
 8005478:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	689a      	ldr	r2, [r3, #8]
 8005484:	2380      	movs	r3, #128	; 0x80
 8005486:	021b      	lsls	r3, r3, #8
 8005488:	429a      	cmp	r2, r3
 800548a:	d108      	bne.n	800549e <HAL_SPI_Transmit+0xce>
  {
    SPI_1LINE_TX(hspi);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2180      	movs	r1, #128	; 0x80
 8005498:	01c9      	lsls	r1, r1, #7
 800549a:	430a      	orrs	r2, r1
 800549c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2240      	movs	r2, #64	; 0x40
 80054a6:	4013      	ands	r3, r2
 80054a8:	2b40      	cmp	r3, #64	; 0x40
 80054aa:	d007      	beq.n	80054bc <HAL_SPI_Transmit+0xec>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2140      	movs	r1, #64	; 0x40
 80054b8:	430a      	orrs	r2, r1
 80054ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	68da      	ldr	r2, [r3, #12]
 80054c0:	2380      	movs	r3, #128	; 0x80
 80054c2:	011b      	lsls	r3, r3, #4
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d14e      	bne.n	8005566 <HAL_SPI_Transmit+0x196>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d004      	beq.n	80054da <HAL_SPI_Transmit+0x10a>
 80054d0:	2316      	movs	r3, #22
 80054d2:	18fb      	adds	r3, r7, r3
 80054d4:	881b      	ldrh	r3, [r3, #0]
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d13f      	bne.n	800555a <HAL_SPI_Transmit+0x18a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054de:	881a      	ldrh	r2, [r3, #0]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ea:	1c9a      	adds	r2, r3, #2
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	3b01      	subs	r3, #1
 80054f8:	b29a      	uxth	r2, r3
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80054fe:	e02c      	b.n	800555a <HAL_SPI_Transmit+0x18a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	2202      	movs	r2, #2
 8005508:	4013      	ands	r3, r2
 800550a:	2b02      	cmp	r3, #2
 800550c:	d112      	bne.n	8005534 <HAL_SPI_Transmit+0x164>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005512:	881a      	ldrh	r2, [r3, #0]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551e:	1c9a      	adds	r2, r3, #2
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005528:	b29b      	uxth	r3, r3
 800552a:	3b01      	subs	r3, #1
 800552c:	b29a      	uxth	r2, r3
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	86da      	strh	r2, [r3, #54]	; 0x36
 8005532:	e012      	b.n	800555a <HAL_SPI_Transmit+0x18a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005534:	f7fd f8f2 	bl	800271c <HAL_GetTick>
 8005538:	0002      	movs	r2, r0
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	429a      	cmp	r2, r3
 8005542:	d802      	bhi.n	800554a <HAL_SPI_Transmit+0x17a>
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	3301      	adds	r3, #1
 8005548:	d102      	bne.n	8005550 <HAL_SPI_Transmit+0x180>
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d104      	bne.n	800555a <HAL_SPI_Transmit+0x18a>
        {
          errorcode = HAL_TIMEOUT;
 8005550:	231f      	movs	r3, #31
 8005552:	18fb      	adds	r3, r7, r3
 8005554:	2203      	movs	r2, #3
 8005556:	701a      	strb	r2, [r3, #0]
          goto error;
 8005558:	e079      	b.n	800564e <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800555e:	b29b      	uxth	r3, r3
 8005560:	2b00      	cmp	r3, #0
 8005562:	d1cd      	bne.n	8005500 <HAL_SPI_Transmit+0x130>
 8005564:	e04f      	b.n	8005606 <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d004      	beq.n	8005578 <HAL_SPI_Transmit+0x1a8>
 800556e:	2316      	movs	r3, #22
 8005570:	18fb      	adds	r3, r7, r3
 8005572:	881b      	ldrh	r3, [r3, #0]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d141      	bne.n	80055fc <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	330c      	adds	r3, #12
 8005582:	7812      	ldrb	r2, [r2, #0]
 8005584:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800558a:	1c5a      	adds	r2, r3, #1
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005594:	b29b      	uxth	r3, r3
 8005596:	3b01      	subs	r3, #1
 8005598:	b29a      	uxth	r2, r3
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800559e:	e02d      	b.n	80055fc <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	2202      	movs	r2, #2
 80055a8:	4013      	ands	r3, r2
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d113      	bne.n	80055d6 <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	330c      	adds	r3, #12
 80055b8:	7812      	ldrb	r2, [r2, #0]
 80055ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c0:	1c5a      	adds	r2, r3, #1
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	3b01      	subs	r3, #1
 80055ce:	b29a      	uxth	r2, r3
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80055d4:	e012      	b.n	80055fc <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055d6:	f7fd f8a1 	bl	800271c <HAL_GetTick>
 80055da:	0002      	movs	r2, r0
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	683a      	ldr	r2, [r7, #0]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d802      	bhi.n	80055ec <HAL_SPI_Transmit+0x21c>
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	3301      	adds	r3, #1
 80055ea:	d102      	bne.n	80055f2 <HAL_SPI_Transmit+0x222>
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d104      	bne.n	80055fc <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 80055f2:	231f      	movs	r3, #31
 80055f4:	18fb      	adds	r3, r7, r3
 80055f6:	2203      	movs	r2, #3
 80055f8:	701a      	strb	r2, [r3, #0]
          goto error;
 80055fa:	e028      	b.n	800564e <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005600:	b29b      	uxth	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1cc      	bne.n	80055a0 <HAL_SPI_Transmit+0x1d0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005606:	69ba      	ldr	r2, [r7, #24]
 8005608:	6839      	ldr	r1, [r7, #0]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	0018      	movs	r0, r3
 800560e:	f000 fa99 	bl	8005b44 <SPI_EndRxTxTransaction>
 8005612:	1e03      	subs	r3, r0, #0
 8005614:	d002      	beq.n	800561c <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2220      	movs	r2, #32
 800561a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d10a      	bne.n	800563a <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005624:	2300      	movs	r3, #0
 8005626:	613b      	str	r3, [r7, #16]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	613b      	str	r3, [r7, #16]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	613b      	str	r3, [r7, #16]
 8005638:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800563e:	2b00      	cmp	r3, #0
 8005640:	d004      	beq.n	800564c <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 8005642:	231f      	movs	r3, #31
 8005644:	18fb      	adds	r3, r7, r3
 8005646:	2201      	movs	r2, #1
 8005648:	701a      	strb	r2, [r3, #0]
 800564a:	e000      	b.n	800564e <HAL_SPI_Transmit+0x27e>
  }

error:
 800564c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2251      	movs	r2, #81	; 0x51
 8005652:	2101      	movs	r1, #1
 8005654:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2250      	movs	r2, #80	; 0x50
 800565a:	2100      	movs	r1, #0
 800565c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800565e:	231f      	movs	r3, #31
 8005660:	18fb      	adds	r3, r7, r3
 8005662:	781b      	ldrb	r3, [r3, #0]
}
 8005664:	0018      	movs	r0, r3
 8005666:	46bd      	mov	sp, r7
 8005668:	b008      	add	sp, #32
 800566a:	bd80      	pop	{r7, pc}

0800566c <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b086      	sub	sp, #24
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	1dbb      	adds	r3, r7, #6
 8005678:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800567a:	2317      	movs	r3, #23
 800567c:	18fb      	adds	r3, r7, r3
 800567e:	2200      	movs	r2, #0
 8005680:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2250      	movs	r2, #80	; 0x50
 8005686:	5c9b      	ldrb	r3, [r3, r2]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d101      	bne.n	8005690 <HAL_SPI_Transmit_IT+0x24>
 800568c:	2302      	movs	r3, #2
 800568e:	e072      	b.n	8005776 <HAL_SPI_Transmit_IT+0x10a>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2250      	movs	r2, #80	; 0x50
 8005694:	2101      	movs	r1, #1
 8005696:	5499      	strb	r1, [r3, r2]

  if ((pData == NULL) || (Size == 0U))
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d003      	beq.n	80056a6 <HAL_SPI_Transmit_IT+0x3a>
 800569e:	1dbb      	adds	r3, r7, #6
 80056a0:	881b      	ldrh	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d104      	bne.n	80056b0 <HAL_SPI_Transmit_IT+0x44>
  {
    errorcode = HAL_ERROR;
 80056a6:	2317      	movs	r3, #23
 80056a8:	18fb      	adds	r3, r7, r3
 80056aa:	2201      	movs	r2, #1
 80056ac:	701a      	strb	r2, [r3, #0]
    goto error;
 80056ae:	e05b      	b.n	8005768 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2251      	movs	r2, #81	; 0x51
 80056b4:	5c9b      	ldrb	r3, [r3, r2]
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d004      	beq.n	80056c6 <HAL_SPI_Transmit_IT+0x5a>
  {
    errorcode = HAL_BUSY;
 80056bc:	2317      	movs	r3, #23
 80056be:	18fb      	adds	r3, r7, r3
 80056c0:	2202      	movs	r2, #2
 80056c2:	701a      	strb	r2, [r3, #0]
    goto error;
 80056c4:	e050      	b.n	8005768 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2251      	movs	r2, #81	; 0x51
 80056ca:	2103      	movs	r1, #3
 80056cc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	68ba      	ldr	r2, [r7, #8]
 80056d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	1dba      	adds	r2, r7, #6
 80056de:	8812      	ldrh	r2, [r2, #0]
 80056e0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	1dba      	adds	r2, r7, #6
 80056e6:	8812      	ldrh	r2, [r2, #0]
 80056e8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2200      	movs	r2, #0
 8005700:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d003      	beq.n	8005712 <HAL_SPI_Transmit_IT+0xa6>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	4a1c      	ldr	r2, [pc, #112]	; (8005780 <HAL_SPI_Transmit_IT+0x114>)
 800570e:	645a      	str	r2, [r3, #68]	; 0x44
 8005710:	e002      	b.n	8005718 <HAL_SPI_Transmit_IT+0xac>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	4a1b      	ldr	r2, [pc, #108]	; (8005784 <HAL_SPI_Transmit_IT+0x118>)
 8005716:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	689a      	ldr	r2, [r3, #8]
 800571c:	2380      	movs	r3, #128	; 0x80
 800571e:	021b      	lsls	r3, r3, #8
 8005720:	429a      	cmp	r2, r3
 8005722:	d108      	bne.n	8005736 <HAL_SPI_Transmit_IT+0xca>
  {
    SPI_1LINE_TX(hspi);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2180      	movs	r1, #128	; 0x80
 8005730:	01c9      	lsls	r1, r1, #7
 8005732:	430a      	orrs	r2, r1
 8005734:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	21a0      	movs	r1, #160	; 0xa0
 8005742:	430a      	orrs	r2, r1
 8005744:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2240      	movs	r2, #64	; 0x40
 800574e:	4013      	ands	r3, r2
 8005750:	2b40      	cmp	r3, #64	; 0x40
 8005752:	d008      	beq.n	8005766 <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2140      	movs	r1, #64	; 0x40
 8005760:	430a      	orrs	r2, r1
 8005762:	601a      	str	r2, [r3, #0]
 8005764:	e000      	b.n	8005768 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 8005766:	46c0      	nop			; (mov r8, r8)
  __HAL_UNLOCK(hspi);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2250      	movs	r2, #80	; 0x50
 800576c:	2100      	movs	r1, #0
 800576e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005770:	2317      	movs	r3, #23
 8005772:	18fb      	adds	r3, r7, r3
 8005774:	781b      	ldrb	r3, [r3, #0]
}
 8005776:	0018      	movs	r0, r3
 8005778:	46bd      	mov	sp, r7
 800577a:	b006      	add	sp, #24
 800577c:	bd80      	pop	{r7, pc}
 800577e:	46c0      	nop			; (mov r8, r8)
 8005780:	08005a1f 	.word	0x08005a1f
 8005784:	080059d7 	.word	0x080059d7

08005788 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b088      	sub	sp, #32
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	099b      	lsrs	r3, r3, #6
 80057a4:	001a      	movs	r2, r3
 80057a6:	2301      	movs	r3, #1
 80057a8:	4013      	ands	r3, r2
 80057aa:	d10f      	bne.n	80057cc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	2201      	movs	r2, #1
 80057b0:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80057b2:	d00b      	beq.n	80057cc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	099b      	lsrs	r3, r3, #6
 80057b8:	001a      	movs	r2, r3
 80057ba:	2301      	movs	r3, #1
 80057bc:	4013      	ands	r3, r2
 80057be:	d005      	beq.n	80057cc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	0010      	movs	r0, r2
 80057c8:	4798      	blx	r3
    return;
 80057ca:	e0d6      	b.n	800597a <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	085b      	lsrs	r3, r3, #1
 80057d0:	001a      	movs	r2, r3
 80057d2:	2301      	movs	r3, #1
 80057d4:	4013      	ands	r3, r2
 80057d6:	d00b      	beq.n	80057f0 <HAL_SPI_IRQHandler+0x68>
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	09db      	lsrs	r3, r3, #7
 80057dc:	001a      	movs	r2, r3
 80057de:	2301      	movs	r3, #1
 80057e0:	4013      	ands	r3, r2
 80057e2:	d005      	beq.n	80057f0 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	0010      	movs	r0, r2
 80057ec:	4798      	blx	r3
    return;
 80057ee:	e0c4      	b.n	800597a <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	095b      	lsrs	r3, r3, #5
 80057f4:	001a      	movs	r2, r3
 80057f6:	2301      	movs	r3, #1
 80057f8:	4013      	ands	r3, r2
 80057fa:	d10c      	bne.n	8005816 <HAL_SPI_IRQHandler+0x8e>
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	099b      	lsrs	r3, r3, #6
 8005800:	001a      	movs	r2, r3
 8005802:	2301      	movs	r3, #1
 8005804:	4013      	ands	r3, r2
 8005806:	d106      	bne.n	8005816 <HAL_SPI_IRQHandler+0x8e>
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	0a1b      	lsrs	r3, r3, #8
 800580c:	001a      	movs	r2, r3
 800580e:	2301      	movs	r3, #1
 8005810:	4013      	ands	r3, r2
 8005812:	d100      	bne.n	8005816 <HAL_SPI_IRQHandler+0x8e>
 8005814:	e0b1      	b.n	800597a <HAL_SPI_IRQHandler+0x1f2>
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	095b      	lsrs	r3, r3, #5
 800581a:	001a      	movs	r2, r3
 800581c:	2301      	movs	r3, #1
 800581e:	4013      	ands	r3, r2
 8005820:	d100      	bne.n	8005824 <HAL_SPI_IRQHandler+0x9c>
 8005822:	e0aa      	b.n	800597a <HAL_SPI_IRQHandler+0x1f2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	099b      	lsrs	r3, r3, #6
 8005828:	001a      	movs	r2, r3
 800582a:	2301      	movs	r3, #1
 800582c:	4013      	ands	r3, r2
 800582e:	d023      	beq.n	8005878 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2251      	movs	r2, #81	; 0x51
 8005834:	5c9b      	ldrb	r3, [r3, r2]
 8005836:	b2db      	uxtb	r3, r3
 8005838:	2b03      	cmp	r3, #3
 800583a:	d011      	beq.n	8005860 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005840:	2204      	movs	r2, #4
 8005842:	431a      	orrs	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005848:	2300      	movs	r3, #0
 800584a:	617b      	str	r3, [r7, #20]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	617b      	str	r3, [r7, #20]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	617b      	str	r3, [r7, #20]
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	e00b      	b.n	8005878 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005860:	2300      	movs	r3, #0
 8005862:	613b      	str	r3, [r7, #16]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	613b      	str	r3, [r7, #16]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	613b      	str	r3, [r7, #16]
 8005874:	693b      	ldr	r3, [r7, #16]
        return;
 8005876:	e080      	b.n	800597a <HAL_SPI_IRQHandler+0x1f2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	095b      	lsrs	r3, r3, #5
 800587c:	001a      	movs	r2, r3
 800587e:	2301      	movs	r3, #1
 8005880:	4013      	ands	r3, r2
 8005882:	d014      	beq.n	80058ae <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005888:	2201      	movs	r2, #1
 800588a:	431a      	orrs	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005890:	2300      	movs	r3, #0
 8005892:	60fb      	str	r3, [r7, #12]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	60fb      	str	r3, [r7, #12]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	2140      	movs	r1, #64	; 0x40
 80058a8:	438a      	bics	r2, r1
 80058aa:	601a      	str	r2, [r3, #0]
 80058ac:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	0a1b      	lsrs	r3, r3, #8
 80058b2:	001a      	movs	r2, r3
 80058b4:	2301      	movs	r3, #1
 80058b6:	4013      	ands	r3, r2
 80058b8:	d00c      	beq.n	80058d4 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058be:	2208      	movs	r2, #8
 80058c0:	431a      	orrs	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80058c6:	2300      	movs	r3, #0
 80058c8:	60bb      	str	r3, [r7, #8]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	60bb      	str	r3, [r7, #8]
 80058d2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d04d      	beq.n	8005978 <HAL_SPI_IRQHandler+0x1f0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	685a      	ldr	r2, [r3, #4]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	21e0      	movs	r1, #224	; 0xe0
 80058e8:	438a      	bics	r2, r1
 80058ea:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2251      	movs	r2, #81	; 0x51
 80058f0:	2101      	movs	r1, #1
 80058f2:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	2202      	movs	r2, #2
 80058f8:	4013      	ands	r3, r2
 80058fa:	d103      	bne.n	8005904 <HAL_SPI_IRQHandler+0x17c>
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	2201      	movs	r2, #1
 8005900:	4013      	ands	r3, r2
 8005902:	d032      	beq.n	800596a <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2103      	movs	r1, #3
 8005910:	438a      	bics	r2, r1
 8005912:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005918:	2b00      	cmp	r3, #0
 800591a:	d010      	beq.n	800593e <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005920:	4a17      	ldr	r2, [pc, #92]	; (8005980 <HAL_SPI_IRQHandler+0x1f8>)
 8005922:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005928:	0018      	movs	r0, r3
 800592a:	f7fd faa3 	bl	8002e74 <HAL_DMA_Abort_IT>
 800592e:	1e03      	subs	r3, r0, #0
 8005930:	d005      	beq.n	800593e <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005936:	2240      	movs	r2, #64	; 0x40
 8005938:	431a      	orrs	r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005942:	2b00      	cmp	r3, #0
 8005944:	d016      	beq.n	8005974 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800594a:	4a0d      	ldr	r2, [pc, #52]	; (8005980 <HAL_SPI_IRQHandler+0x1f8>)
 800594c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005952:	0018      	movs	r0, r3
 8005954:	f7fd fa8e 	bl	8002e74 <HAL_DMA_Abort_IT>
 8005958:	1e03      	subs	r3, r0, #0
 800595a:	d00b      	beq.n	8005974 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005960:	2240      	movs	r2, #64	; 0x40
 8005962:	431a      	orrs	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005968:	e004      	b.n	8005974 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	0018      	movs	r0, r3
 800596e:	f000 f809 	bl	8005984 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005972:	e000      	b.n	8005976 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8005974:	46c0      	nop			; (mov r8, r8)
    return;
 8005976:	46c0      	nop			; (mov r8, r8)
 8005978:	46c0      	nop			; (mov r8, r8)
  }
}
 800597a:	46bd      	mov	sp, r7
 800597c:	b008      	add	sp, #32
 800597e:	bd80      	pop	{r7, pc}
 8005980:	080059ad 	.word	0x080059ad

08005984 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800598c:	46c0      	nop			; (mov r8, r8)
 800598e:	46bd      	mov	sp, r7
 8005990:	b002      	add	sp, #8
 8005992:	bd80      	pop	{r7, pc}

08005994 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2251      	movs	r2, #81	; 0x51
 80059a0:	5c9b      	ldrb	r3, [r3, r2]
 80059a2:	b2db      	uxtb	r3, r3
}
 80059a4:	0018      	movs	r0, r3
 80059a6:	46bd      	mov	sp, r7
 80059a8:	b002      	add	sp, #8
 80059aa:	bd80      	pop	{r7, pc}

080059ac <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	0018      	movs	r0, r3
 80059ca:	f7ff ffdb 	bl	8005984 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80059ce:	46c0      	nop			; (mov r8, r8)
 80059d0:	46bd      	mov	sp, r7
 80059d2:	b004      	add	sp, #16
 80059d4:	bd80      	pop	{r7, pc}

080059d6 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b082      	sub	sp, #8
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	330c      	adds	r3, #12
 80059e8:	7812      	ldrb	r2, [r2, #0]
 80059ea:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f0:	1c5a      	adds	r2, r3, #1
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	3b01      	subs	r3, #1
 80059fe:	b29a      	uxth	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d103      	bne.n	8005a16 <SPI_TxISR_8BIT+0x40>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	0018      	movs	r0, r3
 8005a12:	f000 f8d5 	bl	8005bc0 <SPI_CloseTx_ISR>
  }
}
 8005a16:	46c0      	nop			; (mov r8, r8)
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	b002      	add	sp, #8
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b082      	sub	sp, #8
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2a:	881a      	ldrh	r2, [r3, #0]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a36:	1c9a      	adds	r2, r3, #2
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	3b01      	subs	r3, #1
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d103      	bne.n	8005a5c <SPI_TxISR_16BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	0018      	movs	r0, r3
 8005a58:	f000 f8b2 	bl	8005bc0 <SPI_CloseTx_ISR>
  }
}
 8005a5c:	46c0      	nop			; (mov r8, r8)
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	b002      	add	sp, #8
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	603b      	str	r3, [r7, #0]
 8005a70:	1dfb      	adds	r3, r7, #7
 8005a72:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a74:	e050      	b.n	8005b18 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	d04d      	beq.n	8005b18 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005a7c:	f7fc fe4e 	bl	800271c <HAL_GetTick>
 8005a80:	0002      	movs	r2, r0
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	683a      	ldr	r2, [r7, #0]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d902      	bls.n	8005a92 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d142      	bne.n	8005b18 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	685a      	ldr	r2, [r3, #4]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	21e0      	movs	r1, #224	; 0xe0
 8005a9e:	438a      	bics	r2, r1
 8005aa0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	685a      	ldr	r2, [r3, #4]
 8005aa6:	2382      	movs	r3, #130	; 0x82
 8005aa8:	005b      	lsls	r3, r3, #1
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d113      	bne.n	8005ad6 <SPI_WaitFlagStateUntilTimeout+0x72>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	689a      	ldr	r2, [r3, #8]
 8005ab2:	2380      	movs	r3, #128	; 0x80
 8005ab4:	021b      	lsls	r3, r3, #8
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d005      	beq.n	8005ac6 <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	689a      	ldr	r2, [r3, #8]
 8005abe:	2380      	movs	r3, #128	; 0x80
 8005ac0:	00db      	lsls	r3, r3, #3
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d107      	bne.n	8005ad6 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2140      	movs	r1, #64	; 0x40
 8005ad2:	438a      	bics	r2, r1
 8005ad4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ada:	2380      	movs	r3, #128	; 0x80
 8005adc:	019b      	lsls	r3, r3, #6
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d110      	bne.n	8005b04 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4914      	ldr	r1, [pc, #80]	; (8005b40 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8005aee:	400a      	ands	r2, r1
 8005af0:	601a      	str	r2, [r3, #0]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2180      	movs	r1, #128	; 0x80
 8005afe:	0189      	lsls	r1, r1, #6
 8005b00:	430a      	orrs	r2, r1
 8005b02:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2251      	movs	r2, #81	; 0x51
 8005b08:	2101      	movs	r1, #1
 8005b0a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2250      	movs	r2, #80	; 0x50
 8005b10:	2100      	movs	r1, #0
 8005b12:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005b14:	2303      	movs	r3, #3
 8005b16:	e00f      	b.n	8005b38 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	68ba      	ldr	r2, [r7, #8]
 8005b20:	4013      	ands	r3, r2
 8005b22:	68ba      	ldr	r2, [r7, #8]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	425a      	negs	r2, r3
 8005b28:	4153      	adcs	r3, r2
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	001a      	movs	r2, r3
 8005b2e:	1dfb      	adds	r3, r7, #7
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d19f      	bne.n	8005a76 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005b36:	2300      	movs	r3, #0
}
 8005b38:	0018      	movs	r0, r3
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	b004      	add	sp, #16
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	ffffdfff 	.word	0xffffdfff

08005b44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b086      	sub	sp, #24
 8005b48:	af02      	add	r7, sp, #8
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	685a      	ldr	r2, [r3, #4]
 8005b54:	2382      	movs	r3, #130	; 0x82
 8005b56:	005b      	lsls	r3, r3, #1
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d112      	bne.n	8005b82 <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b5c:	68ba      	ldr	r2, [r7, #8]
 8005b5e:	68f8      	ldr	r0, [r7, #12]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	9300      	str	r3, [sp, #0]
 8005b64:	0013      	movs	r3, r2
 8005b66:	2200      	movs	r2, #0
 8005b68:	2180      	movs	r1, #128	; 0x80
 8005b6a:	f7ff ff7b 	bl	8005a64 <SPI_WaitFlagStateUntilTimeout>
 8005b6e:	1e03      	subs	r3, r0, #0
 8005b70:	d020      	beq.n	8005bb4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b76:	2220      	movs	r2, #32
 8005b78:	431a      	orrs	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e019      	b.n	8005bb6 <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2251      	movs	r2, #81	; 0x51
 8005b86:	5c9b      	ldrb	r3, [r3, r2]
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	2b05      	cmp	r3, #5
 8005b8c:	d112      	bne.n	8005bb4 <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005b8e:	68ba      	ldr	r2, [r7, #8]
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	9300      	str	r3, [sp, #0]
 8005b96:	0013      	movs	r3, r2
 8005b98:	2200      	movs	r2, #0
 8005b9a:	2101      	movs	r1, #1
 8005b9c:	f7ff ff62 	bl	8005a64 <SPI_WaitFlagStateUntilTimeout>
 8005ba0:	1e03      	subs	r3, r0, #0
 8005ba2:	d007      	beq.n	8005bb4 <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ba8:	2220      	movs	r2, #32
 8005baa:	431a      	orrs	r2, r3
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	e000      	b.n	8005bb6 <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	0018      	movs	r0, r3
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	b004      	add	sp, #16
 8005bbc:	bd80      	pop	{r7, pc}
	...

08005bc0 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b086      	sub	sp, #24
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8005bc8:	4b2d      	ldr	r3, [pc, #180]	; (8005c80 <SPI_CloseTx_ISR+0xc0>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	492d      	ldr	r1, [pc, #180]	; (8005c84 <SPI_CloseTx_ISR+0xc4>)
 8005bce:	0018      	movs	r0, r3
 8005bd0:	f7fa fa9a 	bl	8000108 <__udivsi3>
 8005bd4:	0003      	movs	r3, r0
 8005bd6:	001a      	movs	r2, r3
 8005bd8:	2364      	movs	r3, #100	; 0x64
 8005bda:	4353      	muls	r3, r2
 8005bdc:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bde:	f7fc fd9d 	bl	800271c <HAL_GetTick>
 8005be2:	0003      	movs	r3, r0
 8005be4:	617b      	str	r3, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d106      	bne.n	8005bfa <SPI_CloseTx_ISR+0x3a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf0:	2220      	movs	r2, #32
 8005bf2:	431a      	orrs	r2, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005bf8:	e008      	b.n	8005c0c <SPI_CloseTx_ISR+0x4c>
    }
    count--;
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	613b      	str	r3, [r7, #16]
  }
  while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	2202      	movs	r2, #2
 8005c08:	4013      	ands	r3, r2
 8005c0a:	d0ec      	beq.n	8005be6 <SPI_CloseTx_ISR+0x26>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	685a      	ldr	r2, [r3, #4]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	21a0      	movs	r1, #160	; 0xa0
 8005c18:	438a      	bics	r2, r1
 8005c1a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005c1c:	697a      	ldr	r2, [r7, #20]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2164      	movs	r1, #100	; 0x64
 8005c22:	0018      	movs	r0, r3
 8005c24:	f7ff ff8e 	bl	8005b44 <SPI_EndRxTxTransaction>
 8005c28:	1e03      	subs	r3, r0, #0
 8005c2a:	d005      	beq.n	8005c38 <SPI_CloseTx_ISR+0x78>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c30:	2220      	movs	r2, #32
 8005c32:	431a      	orrs	r2, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d10a      	bne.n	8005c56 <SPI_CloseTx_ISR+0x96>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c40:	2300      	movs	r3, #0
 8005c42:	60fb      	str	r3, [r7, #12]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	60fb      	str	r3, [r7, #12]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	60fb      	str	r3, [r7, #12]
 8005c54:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2251      	movs	r2, #81	; 0x51
 8005c5a:	2101      	movs	r1, #1
 8005c5c:	5499      	strb	r1, [r3, r2]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d004      	beq.n	8005c70 <SPI_CloseTx_ISR+0xb0>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	0018      	movs	r0, r3
 8005c6a:	f7ff fe8b 	bl	8005984 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8005c6e:	e003      	b.n	8005c78 <SPI_CloseTx_ISR+0xb8>
    HAL_SPI_TxCpltCallback(hspi);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	0018      	movs	r0, r3
 8005c74:	f7fa fc2c 	bl	80004d0 <HAL_SPI_TxCpltCallback>
}
 8005c78:	46c0      	nop			; (mov r8, r8)
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	b006      	add	sp, #24
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	20000000 	.word	0x20000000
 8005c84:	00005dc0 	.word	0x00005dc0

08005c88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d101      	bne.n	8005c9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e01e      	b.n	8005cd8 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2239      	movs	r2, #57	; 0x39
 8005c9e:	5c9b      	ldrb	r3, [r3, r2]
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d107      	bne.n	8005cb6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2238      	movs	r2, #56	; 0x38
 8005caa:	2100      	movs	r1, #0
 8005cac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	0018      	movs	r0, r3
 8005cb2:	f7fc fb5f 	bl	8002374 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2239      	movs	r2, #57	; 0x39
 8005cba:	2102      	movs	r1, #2
 8005cbc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	3304      	adds	r3, #4
 8005cc6:	0019      	movs	r1, r3
 8005cc8:	0010      	movs	r0, r2
 8005cca:	f000 fa73 	bl	80061b4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2239      	movs	r2, #57	; 0x39
 8005cd2:	2101      	movs	r1, #1
 8005cd4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	0018      	movs	r0, r3
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	b002      	add	sp, #8
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2239      	movs	r2, #57	; 0x39
 8005cec:	2102      	movs	r1, #2
 8005cee:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	2207      	movs	r2, #7
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2b06      	cmp	r3, #6
 8005d00:	d007      	beq.n	8005d12 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2101      	movs	r1, #1
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2239      	movs	r2, #57	; 0x39
 8005d16:	2101      	movs	r1, #1
 8005d18:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	0018      	movs	r0, r3
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	b004      	add	sp, #16
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d101      	bne.n	8005d36 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e01e      	b.n	8005d74 <HAL_TIM_OC_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2239      	movs	r2, #57	; 0x39
 8005d3a:	5c9b      	ldrb	r3, [r3, r2]
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d107      	bne.n	8005d52 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2238      	movs	r2, #56	; 0x38
 8005d46:	2100      	movs	r1, #0
 8005d48:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	0018      	movs	r0, r3
 8005d4e:	f000 f815 	bl	8005d7c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2239      	movs	r2, #57	; 0x39
 8005d56:	2102      	movs	r1, #2
 8005d58:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	3304      	adds	r3, #4
 8005d62:	0019      	movs	r1, r3
 8005d64:	0010      	movs	r0, r2
 8005d66:	f000 fa25 	bl	80061b4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2239      	movs	r2, #57	; 0x39
 8005d6e:	2101      	movs	r1, #1
 8005d70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	0018      	movs	r0, r3
 8005d76:	46bd      	mov	sp, r7
 8005d78:	b002      	add	sp, #8
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005d84:	46c0      	nop			; (mov r8, r8)
 8005d86:	46bd      	mov	sp, r7
 8005d88:	b002      	add	sp, #8
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	2202      	movs	r2, #2
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d124      	bne.n	8005dec <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	2202      	movs	r2, #2
 8005daa:	4013      	ands	r3, r2
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d11d      	bne.n	8005dec <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2203      	movs	r2, #3
 8005db6:	4252      	negs	r2, r2
 8005db8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	699b      	ldr	r3, [r3, #24]
 8005dc6:	2203      	movs	r2, #3
 8005dc8:	4013      	ands	r3, r2
 8005dca:	d004      	beq.n	8005dd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	0018      	movs	r0, r3
 8005dd0:	f000 f9d8 	bl	8006184 <HAL_TIM_IC_CaptureCallback>
 8005dd4:	e007      	b.n	8005de6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	0018      	movs	r0, r3
 8005dda:	f000 f9cb 	bl	8006174 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	0018      	movs	r0, r3
 8005de2:	f000 f9d7 	bl	8006194 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	2204      	movs	r2, #4
 8005df4:	4013      	ands	r3, r2
 8005df6:	2b04      	cmp	r3, #4
 8005df8:	d125      	bne.n	8005e46 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	2204      	movs	r2, #4
 8005e02:	4013      	ands	r3, r2
 8005e04:	2b04      	cmp	r3, #4
 8005e06:	d11e      	bne.n	8005e46 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2205      	movs	r2, #5
 8005e0e:	4252      	negs	r2, r2
 8005e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2202      	movs	r2, #2
 8005e16:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	699a      	ldr	r2, [r3, #24]
 8005e1e:	23c0      	movs	r3, #192	; 0xc0
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	4013      	ands	r3, r2
 8005e24:	d004      	beq.n	8005e30 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	0018      	movs	r0, r3
 8005e2a:	f000 f9ab 	bl	8006184 <HAL_TIM_IC_CaptureCallback>
 8005e2e:	e007      	b.n	8005e40 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	0018      	movs	r0, r3
 8005e34:	f000 f99e 	bl	8006174 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	0018      	movs	r0, r3
 8005e3c:	f000 f9aa 	bl	8006194 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	2208      	movs	r2, #8
 8005e4e:	4013      	ands	r3, r2
 8005e50:	2b08      	cmp	r3, #8
 8005e52:	d124      	bne.n	8005e9e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	2208      	movs	r2, #8
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	2b08      	cmp	r3, #8
 8005e60:	d11d      	bne.n	8005e9e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2209      	movs	r2, #9
 8005e68:	4252      	negs	r2, r2
 8005e6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2204      	movs	r2, #4
 8005e70:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	69db      	ldr	r3, [r3, #28]
 8005e78:	2203      	movs	r2, #3
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	d004      	beq.n	8005e88 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	0018      	movs	r0, r3
 8005e82:	f000 f97f 	bl	8006184 <HAL_TIM_IC_CaptureCallback>
 8005e86:	e007      	b.n	8005e98 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	0018      	movs	r0, r3
 8005e8c:	f000 f972 	bl	8006174 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	0018      	movs	r0, r3
 8005e94:	f000 f97e 	bl	8006194 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	2210      	movs	r2, #16
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	2b10      	cmp	r3, #16
 8005eaa:	d125      	bne.n	8005ef8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	2210      	movs	r2, #16
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	2b10      	cmp	r3, #16
 8005eb8:	d11e      	bne.n	8005ef8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2211      	movs	r2, #17
 8005ec0:	4252      	negs	r2, r2
 8005ec2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2208      	movs	r2, #8
 8005ec8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	69da      	ldr	r2, [r3, #28]
 8005ed0:	23c0      	movs	r3, #192	; 0xc0
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	d004      	beq.n	8005ee2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	0018      	movs	r0, r3
 8005edc:	f000 f952 	bl	8006184 <HAL_TIM_IC_CaptureCallback>
 8005ee0:	e007      	b.n	8005ef2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	0018      	movs	r0, r3
 8005ee6:	f000 f945 	bl	8006174 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	0018      	movs	r0, r3
 8005eee:	f000 f951 	bl	8006194 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	2201      	movs	r2, #1
 8005f00:	4013      	ands	r3, r2
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d10f      	bne.n	8005f26 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	4013      	ands	r3, r2
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d108      	bne.n	8005f26 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2202      	movs	r2, #2
 8005f1a:	4252      	negs	r2, r2
 8005f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	0018      	movs	r0, r3
 8005f22:	f7fc fb61 	bl	80025e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	2240      	movs	r2, #64	; 0x40
 8005f2e:	4013      	ands	r3, r2
 8005f30:	2b40      	cmp	r3, #64	; 0x40
 8005f32:	d10f      	bne.n	8005f54 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	2240      	movs	r2, #64	; 0x40
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	2b40      	cmp	r3, #64	; 0x40
 8005f40:	d108      	bne.n	8005f54 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2241      	movs	r2, #65	; 0x41
 8005f48:	4252      	negs	r2, r2
 8005f4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	0018      	movs	r0, r3
 8005f50:	f000 f928 	bl	80061a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f54:	46c0      	nop			; (mov r8, r8)
 8005f56:	46bd      	mov	sp, r7
 8005f58:	b002      	add	sp, #8
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2238      	movs	r2, #56	; 0x38
 8005f6c:	5c9b      	ldrb	r3, [r3, r2]
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d101      	bne.n	8005f76 <HAL_TIM_OC_ConfigChannel+0x1a>
 8005f72:	2302      	movs	r3, #2
 8005f74:	e03c      	b.n	8005ff0 <HAL_TIM_OC_ConfigChannel+0x94>
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2238      	movs	r2, #56	; 0x38
 8005f7a:	2101      	movs	r1, #1
 8005f7c:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2239      	movs	r2, #57	; 0x39
 8005f82:	2102      	movs	r1, #2
 8005f84:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2b04      	cmp	r3, #4
 8005f8a:	d010      	beq.n	8005fae <HAL_TIM_OC_ConfigChannel+0x52>
 8005f8c:	d802      	bhi.n	8005f94 <HAL_TIM_OC_ConfigChannel+0x38>
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d005      	beq.n	8005f9e <HAL_TIM_OC_ConfigChannel+0x42>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      break;
    }

    default:
      break;
 8005f92:	e024      	b.n	8005fde <HAL_TIM_OC_ConfigChannel+0x82>
  switch (Channel)
 8005f94:	2b08      	cmp	r3, #8
 8005f96:	d012      	beq.n	8005fbe <HAL_TIM_OC_ConfigChannel+0x62>
 8005f98:	2b0c      	cmp	r3, #12
 8005f9a:	d018      	beq.n	8005fce <HAL_TIM_OC_ConfigChannel+0x72>
      break;
 8005f9c:	e01f      	b.n	8005fde <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	0011      	movs	r1, r2
 8005fa6:	0018      	movs	r0, r3
 8005fa8:	f000 f962 	bl	8006270 <TIM_OC1_SetConfig>
      break;
 8005fac:	e017      	b.n	8005fde <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68ba      	ldr	r2, [r7, #8]
 8005fb4:	0011      	movs	r1, r2
 8005fb6:	0018      	movs	r0, r3
 8005fb8:	f000 f996 	bl	80062e8 <TIM_OC2_SetConfig>
      break;
 8005fbc:	e00f      	b.n	8005fde <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	0011      	movs	r1, r2
 8005fc6:	0018      	movs	r0, r3
 8005fc8:	f000 f9d0 	bl	800636c <TIM_OC3_SetConfig>
      break;
 8005fcc:	e007      	b.n	8005fde <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	0011      	movs	r1, r2
 8005fd6:	0018      	movs	r0, r3
 8005fd8:	f000 fa08 	bl	80063ec <TIM_OC4_SetConfig>
      break;
 8005fdc:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2239      	movs	r2, #57	; 0x39
 8005fe2:	2101      	movs	r1, #1
 8005fe4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2238      	movs	r2, #56	; 0x38
 8005fea:	2100      	movs	r1, #0
 8005fec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	0018      	movs	r0, r3
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	b004      	add	sp, #16
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2238      	movs	r2, #56	; 0x38
 8006006:	5c9b      	ldrb	r3, [r3, r2]
 8006008:	2b01      	cmp	r3, #1
 800600a:	d101      	bne.n	8006010 <HAL_TIM_ConfigClockSource+0x18>
 800600c:	2302      	movs	r3, #2
 800600e:	e0ab      	b.n	8006168 <HAL_TIM_ConfigClockSource+0x170>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2238      	movs	r2, #56	; 0x38
 8006014:	2101      	movs	r1, #1
 8006016:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2239      	movs	r2, #57	; 0x39
 800601c:	2102      	movs	r1, #2
 800601e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2277      	movs	r2, #119	; 0x77
 800602c:	4393      	bics	r3, r2
 800602e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	4a4f      	ldr	r2, [pc, #316]	; (8006170 <HAL_TIM_ConfigClockSource+0x178>)
 8006034:	4013      	ands	r3, r2
 8006036:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2b40      	cmp	r3, #64	; 0x40
 8006046:	d100      	bne.n	800604a <HAL_TIM_ConfigClockSource+0x52>
 8006048:	e06b      	b.n	8006122 <HAL_TIM_ConfigClockSource+0x12a>
 800604a:	d80e      	bhi.n	800606a <HAL_TIM_ConfigClockSource+0x72>
 800604c:	2b10      	cmp	r3, #16
 800604e:	d100      	bne.n	8006052 <HAL_TIM_ConfigClockSource+0x5a>
 8006050:	e077      	b.n	8006142 <HAL_TIM_ConfigClockSource+0x14a>
 8006052:	d803      	bhi.n	800605c <HAL_TIM_ConfigClockSource+0x64>
 8006054:	2b00      	cmp	r3, #0
 8006056:	d100      	bne.n	800605a <HAL_TIM_ConfigClockSource+0x62>
 8006058:	e073      	b.n	8006142 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800605a:	e07c      	b.n	8006156 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800605c:	2b20      	cmp	r3, #32
 800605e:	d100      	bne.n	8006062 <HAL_TIM_ConfigClockSource+0x6a>
 8006060:	e06f      	b.n	8006142 <HAL_TIM_ConfigClockSource+0x14a>
 8006062:	2b30      	cmp	r3, #48	; 0x30
 8006064:	d100      	bne.n	8006068 <HAL_TIM_ConfigClockSource+0x70>
 8006066:	e06c      	b.n	8006142 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8006068:	e075      	b.n	8006156 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800606a:	2b70      	cmp	r3, #112	; 0x70
 800606c:	d00e      	beq.n	800608c <HAL_TIM_ConfigClockSource+0x94>
 800606e:	d804      	bhi.n	800607a <HAL_TIM_ConfigClockSource+0x82>
 8006070:	2b50      	cmp	r3, #80	; 0x50
 8006072:	d036      	beq.n	80060e2 <HAL_TIM_ConfigClockSource+0xea>
 8006074:	2b60      	cmp	r3, #96	; 0x60
 8006076:	d044      	beq.n	8006102 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8006078:	e06d      	b.n	8006156 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800607a:	2280      	movs	r2, #128	; 0x80
 800607c:	0152      	lsls	r2, r2, #5
 800607e:	4293      	cmp	r3, r2
 8006080:	d068      	beq.n	8006154 <HAL_TIM_ConfigClockSource+0x15c>
 8006082:	2280      	movs	r2, #128	; 0x80
 8006084:	0192      	lsls	r2, r2, #6
 8006086:	4293      	cmp	r3, r2
 8006088:	d017      	beq.n	80060ba <HAL_TIM_ConfigClockSource+0xc2>
      break;
 800608a:	e064      	b.n	8006156 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6818      	ldr	r0, [r3, #0]
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	6899      	ldr	r1, [r3, #8]
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	685a      	ldr	r2, [r3, #4]
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	f000 fa66 	bl	800656c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2277      	movs	r2, #119	; 0x77
 80060ac:	4313      	orrs	r3, r2
 80060ae:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	609a      	str	r2, [r3, #8]
      break;
 80060b8:	e04d      	b.n	8006156 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6818      	ldr	r0, [r3, #0]
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	6899      	ldr	r1, [r3, #8]
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	685a      	ldr	r2, [r3, #4]
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	f000 fa4f 	bl	800656c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	689a      	ldr	r2, [r3, #8]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2180      	movs	r1, #128	; 0x80
 80060da:	01c9      	lsls	r1, r1, #7
 80060dc:	430a      	orrs	r2, r1
 80060de:	609a      	str	r2, [r3, #8]
      break;
 80060e0:	e039      	b.n	8006156 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6818      	ldr	r0, [r3, #0]
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	6859      	ldr	r1, [r3, #4]
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	001a      	movs	r2, r3
 80060f0:	f000 f9c2 	bl	8006478 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2150      	movs	r1, #80	; 0x50
 80060fa:	0018      	movs	r0, r3
 80060fc:	f000 fa1c 	bl	8006538 <TIM_ITRx_SetConfig>
      break;
 8006100:	e029      	b.n	8006156 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6818      	ldr	r0, [r3, #0]
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	6859      	ldr	r1, [r3, #4]
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	001a      	movs	r2, r3
 8006110:	f000 f9e0 	bl	80064d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2160      	movs	r1, #96	; 0x60
 800611a:	0018      	movs	r0, r3
 800611c:	f000 fa0c 	bl	8006538 <TIM_ITRx_SetConfig>
      break;
 8006120:	e019      	b.n	8006156 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6818      	ldr	r0, [r3, #0]
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	6859      	ldr	r1, [r3, #4]
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	001a      	movs	r2, r3
 8006130:	f000 f9a2 	bl	8006478 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2140      	movs	r1, #64	; 0x40
 800613a:	0018      	movs	r0, r3
 800613c:	f000 f9fc 	bl	8006538 <TIM_ITRx_SetConfig>
      break;
 8006140:	e009      	b.n	8006156 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	0019      	movs	r1, r3
 800614c:	0010      	movs	r0, r2
 800614e:	f000 f9f3 	bl	8006538 <TIM_ITRx_SetConfig>
      break;
 8006152:	e000      	b.n	8006156 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8006154:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2239      	movs	r2, #57	; 0x39
 800615a:	2101      	movs	r1, #1
 800615c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2238      	movs	r2, #56	; 0x38
 8006162:	2100      	movs	r1, #0
 8006164:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006166:	2300      	movs	r3, #0
}
 8006168:	0018      	movs	r0, r3
 800616a:	46bd      	mov	sp, r7
 800616c:	b004      	add	sp, #16
 800616e:	bd80      	pop	{r7, pc}
 8006170:	ffff00ff 	.word	0xffff00ff

08006174 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800617c:	46c0      	nop			; (mov r8, r8)
 800617e:	46bd      	mov	sp, r7
 8006180:	b002      	add	sp, #8
 8006182:	bd80      	pop	{r7, pc}

08006184 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800618c:	46c0      	nop			; (mov r8, r8)
 800618e:	46bd      	mov	sp, r7
 8006190:	b002      	add	sp, #8
 8006192:	bd80      	pop	{r7, pc}

08006194 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800619c:	46c0      	nop			; (mov r8, r8)
 800619e:	46bd      	mov	sp, r7
 80061a0:	b002      	add	sp, #8
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061ac:	46c0      	nop			; (mov r8, r8)
 80061ae:	46bd      	mov	sp, r7
 80061b0:	b002      	add	sp, #8
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	2380      	movs	r3, #128	; 0x80
 80061c8:	05db      	lsls	r3, r3, #23
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d00b      	beq.n	80061e6 <TIM_Base_SetConfig+0x32>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a23      	ldr	r2, [pc, #140]	; (8006260 <TIM_Base_SetConfig+0xac>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d007      	beq.n	80061e6 <TIM_Base_SetConfig+0x32>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a22      	ldr	r2, [pc, #136]	; (8006264 <TIM_Base_SetConfig+0xb0>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d003      	beq.n	80061e6 <TIM_Base_SetConfig+0x32>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a21      	ldr	r2, [pc, #132]	; (8006268 <TIM_Base_SetConfig+0xb4>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d108      	bne.n	80061f8 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2270      	movs	r2, #112	; 0x70
 80061ea:	4393      	bics	r3, r2
 80061ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	2380      	movs	r3, #128	; 0x80
 80061fc:	05db      	lsls	r3, r3, #23
 80061fe:	429a      	cmp	r2, r3
 8006200:	d00b      	beq.n	800621a <TIM_Base_SetConfig+0x66>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a16      	ldr	r2, [pc, #88]	; (8006260 <TIM_Base_SetConfig+0xac>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d007      	beq.n	800621a <TIM_Base_SetConfig+0x66>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a15      	ldr	r2, [pc, #84]	; (8006264 <TIM_Base_SetConfig+0xb0>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d003      	beq.n	800621a <TIM_Base_SetConfig+0x66>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a14      	ldr	r2, [pc, #80]	; (8006268 <TIM_Base_SetConfig+0xb4>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d108      	bne.n	800622c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	4a13      	ldr	r2, [pc, #76]	; (800626c <TIM_Base_SetConfig+0xb8>)
 800621e:	4013      	ands	r3, r2
 8006220:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	68fa      	ldr	r2, [r7, #12]
 8006228:	4313      	orrs	r3, r2
 800622a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2280      	movs	r2, #128	; 0x80
 8006230:	4393      	bics	r3, r2
 8006232:	001a      	movs	r2, r3
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	4313      	orrs	r3, r2
 800623a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	689a      	ldr	r2, [r3, #8]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2201      	movs	r2, #1
 8006256:	615a      	str	r2, [r3, #20]
}
 8006258:	46c0      	nop			; (mov r8, r8)
 800625a:	46bd      	mov	sp, r7
 800625c:	b004      	add	sp, #16
 800625e:	bd80      	pop	{r7, pc}
 8006260:	40000400 	.word	0x40000400
 8006264:	40010800 	.word	0x40010800
 8006268:	40011400 	.word	0x40011400
 800626c:	fffffcff 	.word	0xfffffcff

08006270 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b086      	sub	sp, #24
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a1b      	ldr	r3, [r3, #32]
 800627e:	2201      	movs	r2, #1
 8006280:	4393      	bics	r3, r2
 8006282:	001a      	movs	r2, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6a1b      	ldr	r3, [r3, #32]
 800628c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	699b      	ldr	r3, [r3, #24]
 8006298:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2270      	movs	r2, #112	; 0x70
 800629e:	4393      	bics	r3, r2
 80062a0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2203      	movs	r2, #3
 80062a6:	4393      	bics	r3, r2
 80062a8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	2202      	movs	r2, #2
 80062b8:	4393      	bics	r3, r2
 80062ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	697a      	ldr	r2, [r7, #20]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	685a      	ldr	r2, [r3, #4]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	697a      	ldr	r2, [r7, #20]
 80062de:	621a      	str	r2, [r3, #32]
}
 80062e0:	46c0      	nop			; (mov r8, r8)
 80062e2:	46bd      	mov	sp, r7
 80062e4:	b006      	add	sp, #24
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b086      	sub	sp, #24
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a1b      	ldr	r3, [r3, #32]
 80062f6:	2210      	movs	r2, #16
 80062f8:	4393      	bics	r3, r2
 80062fa:	001a      	movs	r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6a1b      	ldr	r3, [r3, #32]
 8006304:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	699b      	ldr	r3, [r3, #24]
 8006310:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	4a13      	ldr	r2, [pc, #76]	; (8006364 <TIM_OC2_SetConfig+0x7c>)
 8006316:	4013      	ands	r3, r2
 8006318:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	4a12      	ldr	r2, [pc, #72]	; (8006368 <TIM_OC2_SetConfig+0x80>)
 800631e:	4013      	ands	r3, r2
 8006320:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	021b      	lsls	r3, r3, #8
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	4313      	orrs	r3, r2
 800632c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	2220      	movs	r2, #32
 8006332:	4393      	bics	r3, r2
 8006334:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	011b      	lsls	r3, r3, #4
 800633c:	697a      	ldr	r2, [r7, #20]
 800633e:	4313      	orrs	r3, r2
 8006340:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	693a      	ldr	r2, [r7, #16]
 8006346:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	68fa      	ldr	r2, [r7, #12]
 800634c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	685a      	ldr	r2, [r3, #4]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	697a      	ldr	r2, [r7, #20]
 800635a:	621a      	str	r2, [r3, #32]
}
 800635c:	46c0      	nop			; (mov r8, r8)
 800635e:	46bd      	mov	sp, r7
 8006360:	b006      	add	sp, #24
 8006362:	bd80      	pop	{r7, pc}
 8006364:	ffff8fff 	.word	0xffff8fff
 8006368:	fffffcff 	.word	0xfffffcff

0800636c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b086      	sub	sp, #24
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a1b      	ldr	r3, [r3, #32]
 800637a:	4a1a      	ldr	r2, [pc, #104]	; (80063e4 <TIM_OC3_SetConfig+0x78>)
 800637c:	401a      	ands	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a1b      	ldr	r3, [r3, #32]
 8006386:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	69db      	ldr	r3, [r3, #28]
 8006392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2270      	movs	r2, #112	; 0x70
 8006398:	4393      	bics	r3, r2
 800639a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2203      	movs	r2, #3
 80063a0:	4393      	bics	r3, r2
 80063a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	4a0d      	ldr	r2, [pc, #52]	; (80063e8 <TIM_OC3_SetConfig+0x7c>)
 80063b2:	4013      	ands	r3, r2
 80063b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	021b      	lsls	r3, r3, #8
 80063bc:	697a      	ldr	r2, [r7, #20]
 80063be:	4313      	orrs	r3, r2
 80063c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	693a      	ldr	r2, [r7, #16]
 80063c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	685a      	ldr	r2, [r3, #4]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	697a      	ldr	r2, [r7, #20]
 80063da:	621a      	str	r2, [r3, #32]
}
 80063dc:	46c0      	nop			; (mov r8, r8)
 80063de:	46bd      	mov	sp, r7
 80063e0:	b006      	add	sp, #24
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	fffffeff 	.word	0xfffffeff
 80063e8:	fffffdff 	.word	0xfffffdff

080063ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b086      	sub	sp, #24
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a1b      	ldr	r3, [r3, #32]
 80063fa:	4a1b      	ldr	r2, [pc, #108]	; (8006468 <TIM_OC4_SetConfig+0x7c>)
 80063fc:	401a      	ands	r2, r3
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a1b      	ldr	r3, [r3, #32]
 8006406:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	69db      	ldr	r3, [r3, #28]
 8006412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	4a15      	ldr	r2, [pc, #84]	; (800646c <TIM_OC4_SetConfig+0x80>)
 8006418:	4013      	ands	r3, r2
 800641a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	4a14      	ldr	r2, [pc, #80]	; (8006470 <TIM_OC4_SetConfig+0x84>)
 8006420:	4013      	ands	r3, r2
 8006422:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	021b      	lsls	r3, r3, #8
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	4313      	orrs	r3, r2
 800642e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	4a10      	ldr	r2, [pc, #64]	; (8006474 <TIM_OC4_SetConfig+0x88>)
 8006434:	4013      	ands	r3, r2
 8006436:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	031b      	lsls	r3, r3, #12
 800643e:	697a      	ldr	r2, [r7, #20]
 8006440:	4313      	orrs	r3, r2
 8006442:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	693a      	ldr	r2, [r7, #16]
 8006448:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	685a      	ldr	r2, [r3, #4]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	697a      	ldr	r2, [r7, #20]
 800645c:	621a      	str	r2, [r3, #32]
}
 800645e:	46c0      	nop			; (mov r8, r8)
 8006460:	46bd      	mov	sp, r7
 8006462:	b006      	add	sp, #24
 8006464:	bd80      	pop	{r7, pc}
 8006466:	46c0      	nop			; (mov r8, r8)
 8006468:	ffffefff 	.word	0xffffefff
 800646c:	ffff8fff 	.word	0xffff8fff
 8006470:	fffffcff 	.word	0xfffffcff
 8006474:	ffffdfff 	.word	0xffffdfff

08006478 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b086      	sub	sp, #24
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6a1b      	ldr	r3, [r3, #32]
 8006488:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6a1b      	ldr	r3, [r3, #32]
 800648e:	2201      	movs	r2, #1
 8006490:	4393      	bics	r3, r2
 8006492:	001a      	movs	r2, r3
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	699b      	ldr	r3, [r3, #24]
 800649c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	22f0      	movs	r2, #240	; 0xf0
 80064a2:	4393      	bics	r3, r2
 80064a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	011b      	lsls	r3, r3, #4
 80064aa:	693a      	ldr	r2, [r7, #16]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	220a      	movs	r2, #10
 80064b4:	4393      	bics	r3, r2
 80064b6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064b8:	697a      	ldr	r2, [r7, #20]
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	4313      	orrs	r3, r2
 80064be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	693a      	ldr	r2, [r7, #16]
 80064c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	697a      	ldr	r2, [r7, #20]
 80064ca:	621a      	str	r2, [r3, #32]
}
 80064cc:	46c0      	nop			; (mov r8, r8)
 80064ce:	46bd      	mov	sp, r7
 80064d0:	b006      	add	sp, #24
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b086      	sub	sp, #24
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6a1b      	ldr	r3, [r3, #32]
 80064e4:	2210      	movs	r2, #16
 80064e6:	4393      	bics	r3, r2
 80064e8:	001a      	movs	r2, r3
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	699b      	ldr	r3, [r3, #24]
 80064f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6a1b      	ldr	r3, [r3, #32]
 80064f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	4a0d      	ldr	r2, [pc, #52]	; (8006534 <TIM_TI2_ConfigInputStage+0x60>)
 80064fe:	4013      	ands	r3, r2
 8006500:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	031b      	lsls	r3, r3, #12
 8006506:	697a      	ldr	r2, [r7, #20]
 8006508:	4313      	orrs	r3, r2
 800650a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	22a0      	movs	r2, #160	; 0xa0
 8006510:	4393      	bics	r3, r2
 8006512:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	011b      	lsls	r3, r3, #4
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	4313      	orrs	r3, r2
 800651c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	697a      	ldr	r2, [r7, #20]
 8006522:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	693a      	ldr	r2, [r7, #16]
 8006528:	621a      	str	r2, [r3, #32]
}
 800652a:	46c0      	nop			; (mov r8, r8)
 800652c:	46bd      	mov	sp, r7
 800652e:	b006      	add	sp, #24
 8006530:	bd80      	pop	{r7, pc}
 8006532:	46c0      	nop			; (mov r8, r8)
 8006534:	ffff0fff 	.word	0xffff0fff

08006538 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2270      	movs	r2, #112	; 0x70
 800654c:	4393      	bics	r3, r2
 800654e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006550:	683a      	ldr	r2, [r7, #0]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	4313      	orrs	r3, r2
 8006556:	2207      	movs	r2, #7
 8006558:	4313      	orrs	r3, r2
 800655a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	68fa      	ldr	r2, [r7, #12]
 8006560:	609a      	str	r2, [r3, #8]
}
 8006562:	46c0      	nop			; (mov r8, r8)
 8006564:	46bd      	mov	sp, r7
 8006566:	b004      	add	sp, #16
 8006568:	bd80      	pop	{r7, pc}
	...

0800656c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b086      	sub	sp, #24
 8006570:	af00      	add	r7, sp, #0
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	607a      	str	r2, [r7, #4]
 8006578:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	4a09      	ldr	r2, [pc, #36]	; (80065a8 <TIM_ETR_SetConfig+0x3c>)
 8006584:	4013      	ands	r3, r2
 8006586:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	021a      	lsls	r2, r3, #8
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	431a      	orrs	r2, r3
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	4313      	orrs	r3, r2
 8006594:	697a      	ldr	r2, [r7, #20]
 8006596:	4313      	orrs	r3, r2
 8006598:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	697a      	ldr	r2, [r7, #20]
 800659e:	609a      	str	r2, [r3, #8]
}
 80065a0:	46c0      	nop			; (mov r8, r8)
 80065a2:	46bd      	mov	sp, r7
 80065a4:	b006      	add	sp, #24
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	ffff00ff 	.word	0xffff00ff

080065ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2238      	movs	r2, #56	; 0x38
 80065ba:	5c9b      	ldrb	r3, [r3, r2]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d101      	bne.n	80065c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065c0:	2302      	movs	r3, #2
 80065c2:	e032      	b.n	800662a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2238      	movs	r2, #56	; 0x38
 80065c8:	2101      	movs	r1, #1
 80065ca:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2239      	movs	r2, #57	; 0x39
 80065d0:	2102      	movs	r1, #2
 80065d2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2270      	movs	r2, #112	; 0x70
 80065e8:	4393      	bics	r3, r2
 80065ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	2280      	movs	r2, #128	; 0x80
 80065fa:	4393      	bics	r3, r2
 80065fc:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	68ba      	ldr	r2, [r7, #8]
 8006604:	4313      	orrs	r3, r2
 8006606:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68ba      	ldr	r2, [r7, #8]
 8006616:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2239      	movs	r2, #57	; 0x39
 800661c:	2101      	movs	r1, #1
 800661e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2238      	movs	r2, #56	; 0x38
 8006624:	2100      	movs	r1, #0
 8006626:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006628:	2300      	movs	r3, #0
}
 800662a:	0018      	movs	r0, r3
 800662c:	46bd      	mov	sp, r7
 800662e:	b004      	add	sp, #16
 8006630:	bd80      	pop	{r7, pc}

08006632 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8006632:	b580      	push	{r7, lr}
 8006634:	b082      	sub	sp, #8
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
 800663a:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2238      	movs	r2, #56	; 0x38
 8006640:	5c9b      	ldrb	r3, [r3, r2]
 8006642:	2b01      	cmp	r3, #1
 8006644:	d101      	bne.n	800664a <HAL_TIMEx_RemapConfig+0x18>
 8006646:	2302      	movs	r3, #2
 8006648:	e00c      	b.n	8006664 <HAL_TIMEx_RemapConfig+0x32>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2238      	movs	r2, #56	; 0x38
 800664e:	2101      	movs	r1, #1
 8006650:	5499      	strb	r1, [r3, r2]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	683a      	ldr	r2, [r7, #0]
 8006658:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2238      	movs	r2, #56	; 0x38
 800665e:	2100      	movs	r1, #0
 8006660:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006662:	2300      	movs	r3, #0
}
 8006664:	0018      	movs	r0, r3
 8006666:	46bd      	mov	sp, r7
 8006668:	b002      	add	sp, #8
 800666a:	bd80      	pop	{r7, pc}

0800666c <__errno>:
 800666c:	4b01      	ldr	r3, [pc, #4]	; (8006674 <__errno+0x8>)
 800666e:	6818      	ldr	r0, [r3, #0]
 8006670:	4770      	bx	lr
 8006672:	46c0      	nop			; (mov r8, r8)
 8006674:	20000004 	.word	0x20000004

08006678 <__libc_init_array>:
 8006678:	b570      	push	{r4, r5, r6, lr}
 800667a:	2600      	movs	r6, #0
 800667c:	4d0c      	ldr	r5, [pc, #48]	; (80066b0 <__libc_init_array+0x38>)
 800667e:	4c0d      	ldr	r4, [pc, #52]	; (80066b4 <__libc_init_array+0x3c>)
 8006680:	1b64      	subs	r4, r4, r5
 8006682:	10a4      	asrs	r4, r4, #2
 8006684:	42a6      	cmp	r6, r4
 8006686:	d109      	bne.n	800669c <__libc_init_array+0x24>
 8006688:	2600      	movs	r6, #0
 800668a:	f000 fc29 	bl	8006ee0 <_init>
 800668e:	4d0a      	ldr	r5, [pc, #40]	; (80066b8 <__libc_init_array+0x40>)
 8006690:	4c0a      	ldr	r4, [pc, #40]	; (80066bc <__libc_init_array+0x44>)
 8006692:	1b64      	subs	r4, r4, r5
 8006694:	10a4      	asrs	r4, r4, #2
 8006696:	42a6      	cmp	r6, r4
 8006698:	d105      	bne.n	80066a6 <__libc_init_array+0x2e>
 800669a:	bd70      	pop	{r4, r5, r6, pc}
 800669c:	00b3      	lsls	r3, r6, #2
 800669e:	58eb      	ldr	r3, [r5, r3]
 80066a0:	4798      	blx	r3
 80066a2:	3601      	adds	r6, #1
 80066a4:	e7ee      	b.n	8006684 <__libc_init_array+0xc>
 80066a6:	00b3      	lsls	r3, r6, #2
 80066a8:	58eb      	ldr	r3, [r5, r3]
 80066aa:	4798      	blx	r3
 80066ac:	3601      	adds	r6, #1
 80066ae:	e7f2      	b.n	8006696 <__libc_init_array+0x1e>
 80066b0:	08007544 	.word	0x08007544
 80066b4:	08007544 	.word	0x08007544
 80066b8:	08007544 	.word	0x08007544
 80066bc:	08007548 	.word	0x08007548

080066c0 <memcpy>:
 80066c0:	2300      	movs	r3, #0
 80066c2:	b510      	push	{r4, lr}
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d100      	bne.n	80066ca <memcpy+0xa>
 80066c8:	bd10      	pop	{r4, pc}
 80066ca:	5ccc      	ldrb	r4, [r1, r3]
 80066cc:	54c4      	strb	r4, [r0, r3]
 80066ce:	3301      	adds	r3, #1
 80066d0:	e7f8      	b.n	80066c4 <memcpy+0x4>

080066d2 <memset>:
 80066d2:	0003      	movs	r3, r0
 80066d4:	1812      	adds	r2, r2, r0
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d100      	bne.n	80066dc <memset+0xa>
 80066da:	4770      	bx	lr
 80066dc:	7019      	strb	r1, [r3, #0]
 80066de:	3301      	adds	r3, #1
 80066e0:	e7f9      	b.n	80066d6 <memset+0x4>
	...

080066e4 <siprintf>:
 80066e4:	b40e      	push	{r1, r2, r3}
 80066e6:	b500      	push	{lr}
 80066e8:	490b      	ldr	r1, [pc, #44]	; (8006718 <siprintf+0x34>)
 80066ea:	b09c      	sub	sp, #112	; 0x70
 80066ec:	ab1d      	add	r3, sp, #116	; 0x74
 80066ee:	9002      	str	r0, [sp, #8]
 80066f0:	9006      	str	r0, [sp, #24]
 80066f2:	9107      	str	r1, [sp, #28]
 80066f4:	9104      	str	r1, [sp, #16]
 80066f6:	4809      	ldr	r0, [pc, #36]	; (800671c <siprintf+0x38>)
 80066f8:	4909      	ldr	r1, [pc, #36]	; (8006720 <siprintf+0x3c>)
 80066fa:	cb04      	ldmia	r3!, {r2}
 80066fc:	9105      	str	r1, [sp, #20]
 80066fe:	6800      	ldr	r0, [r0, #0]
 8006700:	a902      	add	r1, sp, #8
 8006702:	9301      	str	r3, [sp, #4]
 8006704:	f000 f870 	bl	80067e8 <_svfiprintf_r>
 8006708:	2300      	movs	r3, #0
 800670a:	9a02      	ldr	r2, [sp, #8]
 800670c:	7013      	strb	r3, [r2, #0]
 800670e:	b01c      	add	sp, #112	; 0x70
 8006710:	bc08      	pop	{r3}
 8006712:	b003      	add	sp, #12
 8006714:	4718      	bx	r3
 8006716:	46c0      	nop			; (mov r8, r8)
 8006718:	7fffffff 	.word	0x7fffffff
 800671c:	20000004 	.word	0x20000004
 8006720:	ffff0208 	.word	0xffff0208

08006724 <__ssputs_r>:
 8006724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006726:	688e      	ldr	r6, [r1, #8]
 8006728:	b085      	sub	sp, #20
 800672a:	0007      	movs	r7, r0
 800672c:	000c      	movs	r4, r1
 800672e:	9203      	str	r2, [sp, #12]
 8006730:	9301      	str	r3, [sp, #4]
 8006732:	429e      	cmp	r6, r3
 8006734:	d83c      	bhi.n	80067b0 <__ssputs_r+0x8c>
 8006736:	2390      	movs	r3, #144	; 0x90
 8006738:	898a      	ldrh	r2, [r1, #12]
 800673a:	00db      	lsls	r3, r3, #3
 800673c:	421a      	tst	r2, r3
 800673e:	d034      	beq.n	80067aa <__ssputs_r+0x86>
 8006740:	2503      	movs	r5, #3
 8006742:	6909      	ldr	r1, [r1, #16]
 8006744:	6823      	ldr	r3, [r4, #0]
 8006746:	1a5b      	subs	r3, r3, r1
 8006748:	9302      	str	r3, [sp, #8]
 800674a:	6963      	ldr	r3, [r4, #20]
 800674c:	9802      	ldr	r0, [sp, #8]
 800674e:	435d      	muls	r5, r3
 8006750:	0feb      	lsrs	r3, r5, #31
 8006752:	195d      	adds	r5, r3, r5
 8006754:	9b01      	ldr	r3, [sp, #4]
 8006756:	106d      	asrs	r5, r5, #1
 8006758:	3301      	adds	r3, #1
 800675a:	181b      	adds	r3, r3, r0
 800675c:	42ab      	cmp	r3, r5
 800675e:	d900      	bls.n	8006762 <__ssputs_r+0x3e>
 8006760:	001d      	movs	r5, r3
 8006762:	0553      	lsls	r3, r2, #21
 8006764:	d532      	bpl.n	80067cc <__ssputs_r+0xa8>
 8006766:	0029      	movs	r1, r5
 8006768:	0038      	movs	r0, r7
 800676a:	f000 fb19 	bl	8006da0 <_malloc_r>
 800676e:	1e06      	subs	r6, r0, #0
 8006770:	d109      	bne.n	8006786 <__ssputs_r+0x62>
 8006772:	230c      	movs	r3, #12
 8006774:	603b      	str	r3, [r7, #0]
 8006776:	2340      	movs	r3, #64	; 0x40
 8006778:	2001      	movs	r0, #1
 800677a:	89a2      	ldrh	r2, [r4, #12]
 800677c:	4240      	negs	r0, r0
 800677e:	4313      	orrs	r3, r2
 8006780:	81a3      	strh	r3, [r4, #12]
 8006782:	b005      	add	sp, #20
 8006784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006786:	9a02      	ldr	r2, [sp, #8]
 8006788:	6921      	ldr	r1, [r4, #16]
 800678a:	f7ff ff99 	bl	80066c0 <memcpy>
 800678e:	89a3      	ldrh	r3, [r4, #12]
 8006790:	4a14      	ldr	r2, [pc, #80]	; (80067e4 <__ssputs_r+0xc0>)
 8006792:	401a      	ands	r2, r3
 8006794:	2380      	movs	r3, #128	; 0x80
 8006796:	4313      	orrs	r3, r2
 8006798:	81a3      	strh	r3, [r4, #12]
 800679a:	9b02      	ldr	r3, [sp, #8]
 800679c:	6126      	str	r6, [r4, #16]
 800679e:	18f6      	adds	r6, r6, r3
 80067a0:	6026      	str	r6, [r4, #0]
 80067a2:	6165      	str	r5, [r4, #20]
 80067a4:	9e01      	ldr	r6, [sp, #4]
 80067a6:	1aed      	subs	r5, r5, r3
 80067a8:	60a5      	str	r5, [r4, #8]
 80067aa:	9b01      	ldr	r3, [sp, #4]
 80067ac:	429e      	cmp	r6, r3
 80067ae:	d900      	bls.n	80067b2 <__ssputs_r+0x8e>
 80067b0:	9e01      	ldr	r6, [sp, #4]
 80067b2:	0032      	movs	r2, r6
 80067b4:	9903      	ldr	r1, [sp, #12]
 80067b6:	6820      	ldr	r0, [r4, #0]
 80067b8:	f000 fa95 	bl	8006ce6 <memmove>
 80067bc:	68a3      	ldr	r3, [r4, #8]
 80067be:	2000      	movs	r0, #0
 80067c0:	1b9b      	subs	r3, r3, r6
 80067c2:	60a3      	str	r3, [r4, #8]
 80067c4:	6823      	ldr	r3, [r4, #0]
 80067c6:	199e      	adds	r6, r3, r6
 80067c8:	6026      	str	r6, [r4, #0]
 80067ca:	e7da      	b.n	8006782 <__ssputs_r+0x5e>
 80067cc:	002a      	movs	r2, r5
 80067ce:	0038      	movs	r0, r7
 80067d0:	f000 fb44 	bl	8006e5c <_realloc_r>
 80067d4:	1e06      	subs	r6, r0, #0
 80067d6:	d1e0      	bne.n	800679a <__ssputs_r+0x76>
 80067d8:	6921      	ldr	r1, [r4, #16]
 80067da:	0038      	movs	r0, r7
 80067dc:	f000 fa96 	bl	8006d0c <_free_r>
 80067e0:	e7c7      	b.n	8006772 <__ssputs_r+0x4e>
 80067e2:	46c0      	nop			; (mov r8, r8)
 80067e4:	fffffb7f 	.word	0xfffffb7f

080067e8 <_svfiprintf_r>:
 80067e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067ea:	b0a1      	sub	sp, #132	; 0x84
 80067ec:	9003      	str	r0, [sp, #12]
 80067ee:	001d      	movs	r5, r3
 80067f0:	898b      	ldrh	r3, [r1, #12]
 80067f2:	000f      	movs	r7, r1
 80067f4:	0016      	movs	r6, r2
 80067f6:	061b      	lsls	r3, r3, #24
 80067f8:	d511      	bpl.n	800681e <_svfiprintf_r+0x36>
 80067fa:	690b      	ldr	r3, [r1, #16]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d10e      	bne.n	800681e <_svfiprintf_r+0x36>
 8006800:	2140      	movs	r1, #64	; 0x40
 8006802:	f000 facd 	bl	8006da0 <_malloc_r>
 8006806:	6038      	str	r0, [r7, #0]
 8006808:	6138      	str	r0, [r7, #16]
 800680a:	2800      	cmp	r0, #0
 800680c:	d105      	bne.n	800681a <_svfiprintf_r+0x32>
 800680e:	230c      	movs	r3, #12
 8006810:	9a03      	ldr	r2, [sp, #12]
 8006812:	3801      	subs	r0, #1
 8006814:	6013      	str	r3, [r2, #0]
 8006816:	b021      	add	sp, #132	; 0x84
 8006818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800681a:	2340      	movs	r3, #64	; 0x40
 800681c:	617b      	str	r3, [r7, #20]
 800681e:	2300      	movs	r3, #0
 8006820:	ac08      	add	r4, sp, #32
 8006822:	6163      	str	r3, [r4, #20]
 8006824:	3320      	adds	r3, #32
 8006826:	7663      	strb	r3, [r4, #25]
 8006828:	3310      	adds	r3, #16
 800682a:	76a3      	strb	r3, [r4, #26]
 800682c:	9507      	str	r5, [sp, #28]
 800682e:	0035      	movs	r5, r6
 8006830:	782b      	ldrb	r3, [r5, #0]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d001      	beq.n	800683a <_svfiprintf_r+0x52>
 8006836:	2b25      	cmp	r3, #37	; 0x25
 8006838:	d146      	bne.n	80068c8 <_svfiprintf_r+0xe0>
 800683a:	1bab      	subs	r3, r5, r6
 800683c:	9305      	str	r3, [sp, #20]
 800683e:	d00c      	beq.n	800685a <_svfiprintf_r+0x72>
 8006840:	0032      	movs	r2, r6
 8006842:	0039      	movs	r1, r7
 8006844:	9803      	ldr	r0, [sp, #12]
 8006846:	f7ff ff6d 	bl	8006724 <__ssputs_r>
 800684a:	1c43      	adds	r3, r0, #1
 800684c:	d100      	bne.n	8006850 <_svfiprintf_r+0x68>
 800684e:	e0ae      	b.n	80069ae <_svfiprintf_r+0x1c6>
 8006850:	6962      	ldr	r2, [r4, #20]
 8006852:	9b05      	ldr	r3, [sp, #20]
 8006854:	4694      	mov	ip, r2
 8006856:	4463      	add	r3, ip
 8006858:	6163      	str	r3, [r4, #20]
 800685a:	782b      	ldrb	r3, [r5, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d100      	bne.n	8006862 <_svfiprintf_r+0x7a>
 8006860:	e0a5      	b.n	80069ae <_svfiprintf_r+0x1c6>
 8006862:	2201      	movs	r2, #1
 8006864:	2300      	movs	r3, #0
 8006866:	4252      	negs	r2, r2
 8006868:	6062      	str	r2, [r4, #4]
 800686a:	a904      	add	r1, sp, #16
 800686c:	3254      	adds	r2, #84	; 0x54
 800686e:	1852      	adds	r2, r2, r1
 8006870:	1c6e      	adds	r6, r5, #1
 8006872:	6023      	str	r3, [r4, #0]
 8006874:	60e3      	str	r3, [r4, #12]
 8006876:	60a3      	str	r3, [r4, #8]
 8006878:	7013      	strb	r3, [r2, #0]
 800687a:	65a3      	str	r3, [r4, #88]	; 0x58
 800687c:	7831      	ldrb	r1, [r6, #0]
 800687e:	2205      	movs	r2, #5
 8006880:	4853      	ldr	r0, [pc, #332]	; (80069d0 <_svfiprintf_r+0x1e8>)
 8006882:	f000 fa25 	bl	8006cd0 <memchr>
 8006886:	1c75      	adds	r5, r6, #1
 8006888:	2800      	cmp	r0, #0
 800688a:	d11f      	bne.n	80068cc <_svfiprintf_r+0xe4>
 800688c:	6822      	ldr	r2, [r4, #0]
 800688e:	06d3      	lsls	r3, r2, #27
 8006890:	d504      	bpl.n	800689c <_svfiprintf_r+0xb4>
 8006892:	2353      	movs	r3, #83	; 0x53
 8006894:	a904      	add	r1, sp, #16
 8006896:	185b      	adds	r3, r3, r1
 8006898:	2120      	movs	r1, #32
 800689a:	7019      	strb	r1, [r3, #0]
 800689c:	0713      	lsls	r3, r2, #28
 800689e:	d504      	bpl.n	80068aa <_svfiprintf_r+0xc2>
 80068a0:	2353      	movs	r3, #83	; 0x53
 80068a2:	a904      	add	r1, sp, #16
 80068a4:	185b      	adds	r3, r3, r1
 80068a6:	212b      	movs	r1, #43	; 0x2b
 80068a8:	7019      	strb	r1, [r3, #0]
 80068aa:	7833      	ldrb	r3, [r6, #0]
 80068ac:	2b2a      	cmp	r3, #42	; 0x2a
 80068ae:	d016      	beq.n	80068de <_svfiprintf_r+0xf6>
 80068b0:	0035      	movs	r5, r6
 80068b2:	2100      	movs	r1, #0
 80068b4:	200a      	movs	r0, #10
 80068b6:	68e3      	ldr	r3, [r4, #12]
 80068b8:	782a      	ldrb	r2, [r5, #0]
 80068ba:	1c6e      	adds	r6, r5, #1
 80068bc:	3a30      	subs	r2, #48	; 0x30
 80068be:	2a09      	cmp	r2, #9
 80068c0:	d94e      	bls.n	8006960 <_svfiprintf_r+0x178>
 80068c2:	2900      	cmp	r1, #0
 80068c4:	d018      	beq.n	80068f8 <_svfiprintf_r+0x110>
 80068c6:	e010      	b.n	80068ea <_svfiprintf_r+0x102>
 80068c8:	3501      	adds	r5, #1
 80068ca:	e7b1      	b.n	8006830 <_svfiprintf_r+0x48>
 80068cc:	4b40      	ldr	r3, [pc, #256]	; (80069d0 <_svfiprintf_r+0x1e8>)
 80068ce:	6822      	ldr	r2, [r4, #0]
 80068d0:	1ac0      	subs	r0, r0, r3
 80068d2:	2301      	movs	r3, #1
 80068d4:	4083      	lsls	r3, r0
 80068d6:	4313      	orrs	r3, r2
 80068d8:	6023      	str	r3, [r4, #0]
 80068da:	002e      	movs	r6, r5
 80068dc:	e7ce      	b.n	800687c <_svfiprintf_r+0x94>
 80068de:	9b07      	ldr	r3, [sp, #28]
 80068e0:	1d19      	adds	r1, r3, #4
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	9107      	str	r1, [sp, #28]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	db01      	blt.n	80068ee <_svfiprintf_r+0x106>
 80068ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80068ec:	e004      	b.n	80068f8 <_svfiprintf_r+0x110>
 80068ee:	425b      	negs	r3, r3
 80068f0:	60e3      	str	r3, [r4, #12]
 80068f2:	2302      	movs	r3, #2
 80068f4:	4313      	orrs	r3, r2
 80068f6:	6023      	str	r3, [r4, #0]
 80068f8:	782b      	ldrb	r3, [r5, #0]
 80068fa:	2b2e      	cmp	r3, #46	; 0x2e
 80068fc:	d10a      	bne.n	8006914 <_svfiprintf_r+0x12c>
 80068fe:	786b      	ldrb	r3, [r5, #1]
 8006900:	2b2a      	cmp	r3, #42	; 0x2a
 8006902:	d135      	bne.n	8006970 <_svfiprintf_r+0x188>
 8006904:	9b07      	ldr	r3, [sp, #28]
 8006906:	3502      	adds	r5, #2
 8006908:	1d1a      	adds	r2, r3, #4
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	9207      	str	r2, [sp, #28]
 800690e:	2b00      	cmp	r3, #0
 8006910:	db2b      	blt.n	800696a <_svfiprintf_r+0x182>
 8006912:	9309      	str	r3, [sp, #36]	; 0x24
 8006914:	4e2f      	ldr	r6, [pc, #188]	; (80069d4 <_svfiprintf_r+0x1ec>)
 8006916:	7829      	ldrb	r1, [r5, #0]
 8006918:	2203      	movs	r2, #3
 800691a:	0030      	movs	r0, r6
 800691c:	f000 f9d8 	bl	8006cd0 <memchr>
 8006920:	2800      	cmp	r0, #0
 8006922:	d006      	beq.n	8006932 <_svfiprintf_r+0x14a>
 8006924:	2340      	movs	r3, #64	; 0x40
 8006926:	1b80      	subs	r0, r0, r6
 8006928:	4083      	lsls	r3, r0
 800692a:	6822      	ldr	r2, [r4, #0]
 800692c:	3501      	adds	r5, #1
 800692e:	4313      	orrs	r3, r2
 8006930:	6023      	str	r3, [r4, #0]
 8006932:	7829      	ldrb	r1, [r5, #0]
 8006934:	2206      	movs	r2, #6
 8006936:	4828      	ldr	r0, [pc, #160]	; (80069d8 <_svfiprintf_r+0x1f0>)
 8006938:	1c6e      	adds	r6, r5, #1
 800693a:	7621      	strb	r1, [r4, #24]
 800693c:	f000 f9c8 	bl	8006cd0 <memchr>
 8006940:	2800      	cmp	r0, #0
 8006942:	d03c      	beq.n	80069be <_svfiprintf_r+0x1d6>
 8006944:	4b25      	ldr	r3, [pc, #148]	; (80069dc <_svfiprintf_r+0x1f4>)
 8006946:	2b00      	cmp	r3, #0
 8006948:	d125      	bne.n	8006996 <_svfiprintf_r+0x1ae>
 800694a:	2207      	movs	r2, #7
 800694c:	9b07      	ldr	r3, [sp, #28]
 800694e:	3307      	adds	r3, #7
 8006950:	4393      	bics	r3, r2
 8006952:	3308      	adds	r3, #8
 8006954:	9307      	str	r3, [sp, #28]
 8006956:	6963      	ldr	r3, [r4, #20]
 8006958:	9a04      	ldr	r2, [sp, #16]
 800695a:	189b      	adds	r3, r3, r2
 800695c:	6163      	str	r3, [r4, #20]
 800695e:	e766      	b.n	800682e <_svfiprintf_r+0x46>
 8006960:	4343      	muls	r3, r0
 8006962:	2101      	movs	r1, #1
 8006964:	189b      	adds	r3, r3, r2
 8006966:	0035      	movs	r5, r6
 8006968:	e7a6      	b.n	80068b8 <_svfiprintf_r+0xd0>
 800696a:	2301      	movs	r3, #1
 800696c:	425b      	negs	r3, r3
 800696e:	e7d0      	b.n	8006912 <_svfiprintf_r+0x12a>
 8006970:	2300      	movs	r3, #0
 8006972:	200a      	movs	r0, #10
 8006974:	001a      	movs	r2, r3
 8006976:	3501      	adds	r5, #1
 8006978:	6063      	str	r3, [r4, #4]
 800697a:	7829      	ldrb	r1, [r5, #0]
 800697c:	1c6e      	adds	r6, r5, #1
 800697e:	3930      	subs	r1, #48	; 0x30
 8006980:	2909      	cmp	r1, #9
 8006982:	d903      	bls.n	800698c <_svfiprintf_r+0x1a4>
 8006984:	2b00      	cmp	r3, #0
 8006986:	d0c5      	beq.n	8006914 <_svfiprintf_r+0x12c>
 8006988:	9209      	str	r2, [sp, #36]	; 0x24
 800698a:	e7c3      	b.n	8006914 <_svfiprintf_r+0x12c>
 800698c:	4342      	muls	r2, r0
 800698e:	2301      	movs	r3, #1
 8006990:	1852      	adds	r2, r2, r1
 8006992:	0035      	movs	r5, r6
 8006994:	e7f1      	b.n	800697a <_svfiprintf_r+0x192>
 8006996:	ab07      	add	r3, sp, #28
 8006998:	9300      	str	r3, [sp, #0]
 800699a:	003a      	movs	r2, r7
 800699c:	4b10      	ldr	r3, [pc, #64]	; (80069e0 <_svfiprintf_r+0x1f8>)
 800699e:	0021      	movs	r1, r4
 80069a0:	9803      	ldr	r0, [sp, #12]
 80069a2:	e000      	b.n	80069a6 <_svfiprintf_r+0x1be>
 80069a4:	bf00      	nop
 80069a6:	9004      	str	r0, [sp, #16]
 80069a8:	9b04      	ldr	r3, [sp, #16]
 80069aa:	3301      	adds	r3, #1
 80069ac:	d1d3      	bne.n	8006956 <_svfiprintf_r+0x16e>
 80069ae:	89bb      	ldrh	r3, [r7, #12]
 80069b0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80069b2:	065b      	lsls	r3, r3, #25
 80069b4:	d400      	bmi.n	80069b8 <_svfiprintf_r+0x1d0>
 80069b6:	e72e      	b.n	8006816 <_svfiprintf_r+0x2e>
 80069b8:	2001      	movs	r0, #1
 80069ba:	4240      	negs	r0, r0
 80069bc:	e72b      	b.n	8006816 <_svfiprintf_r+0x2e>
 80069be:	ab07      	add	r3, sp, #28
 80069c0:	9300      	str	r3, [sp, #0]
 80069c2:	003a      	movs	r2, r7
 80069c4:	4b06      	ldr	r3, [pc, #24]	; (80069e0 <_svfiprintf_r+0x1f8>)
 80069c6:	0021      	movs	r1, r4
 80069c8:	9803      	ldr	r0, [sp, #12]
 80069ca:	f000 f879 	bl	8006ac0 <_printf_i>
 80069ce:	e7ea      	b.n	80069a6 <_svfiprintf_r+0x1be>
 80069d0:	08007511 	.word	0x08007511
 80069d4:	08007517 	.word	0x08007517
 80069d8:	0800751b 	.word	0x0800751b
 80069dc:	00000000 	.word	0x00000000
 80069e0:	08006725 	.word	0x08006725

080069e4 <_printf_common>:
 80069e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069e6:	0015      	movs	r5, r2
 80069e8:	9301      	str	r3, [sp, #4]
 80069ea:	688a      	ldr	r2, [r1, #8]
 80069ec:	690b      	ldr	r3, [r1, #16]
 80069ee:	9000      	str	r0, [sp, #0]
 80069f0:	000c      	movs	r4, r1
 80069f2:	4293      	cmp	r3, r2
 80069f4:	da00      	bge.n	80069f8 <_printf_common+0x14>
 80069f6:	0013      	movs	r3, r2
 80069f8:	0022      	movs	r2, r4
 80069fa:	602b      	str	r3, [r5, #0]
 80069fc:	3243      	adds	r2, #67	; 0x43
 80069fe:	7812      	ldrb	r2, [r2, #0]
 8006a00:	2a00      	cmp	r2, #0
 8006a02:	d001      	beq.n	8006a08 <_printf_common+0x24>
 8006a04:	3301      	adds	r3, #1
 8006a06:	602b      	str	r3, [r5, #0]
 8006a08:	6823      	ldr	r3, [r4, #0]
 8006a0a:	069b      	lsls	r3, r3, #26
 8006a0c:	d502      	bpl.n	8006a14 <_printf_common+0x30>
 8006a0e:	682b      	ldr	r3, [r5, #0]
 8006a10:	3302      	adds	r3, #2
 8006a12:	602b      	str	r3, [r5, #0]
 8006a14:	2706      	movs	r7, #6
 8006a16:	6823      	ldr	r3, [r4, #0]
 8006a18:	401f      	ands	r7, r3
 8006a1a:	d027      	beq.n	8006a6c <_printf_common+0x88>
 8006a1c:	0023      	movs	r3, r4
 8006a1e:	3343      	adds	r3, #67	; 0x43
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	1e5a      	subs	r2, r3, #1
 8006a24:	4193      	sbcs	r3, r2
 8006a26:	6822      	ldr	r2, [r4, #0]
 8006a28:	0692      	lsls	r2, r2, #26
 8006a2a:	d430      	bmi.n	8006a8e <_printf_common+0xaa>
 8006a2c:	0022      	movs	r2, r4
 8006a2e:	9901      	ldr	r1, [sp, #4]
 8006a30:	3243      	adds	r2, #67	; 0x43
 8006a32:	9800      	ldr	r0, [sp, #0]
 8006a34:	9e08      	ldr	r6, [sp, #32]
 8006a36:	47b0      	blx	r6
 8006a38:	1c43      	adds	r3, r0, #1
 8006a3a:	d025      	beq.n	8006a88 <_printf_common+0xa4>
 8006a3c:	2306      	movs	r3, #6
 8006a3e:	6820      	ldr	r0, [r4, #0]
 8006a40:	682a      	ldr	r2, [r5, #0]
 8006a42:	68e1      	ldr	r1, [r4, #12]
 8006a44:	4003      	ands	r3, r0
 8006a46:	2500      	movs	r5, #0
 8006a48:	2b04      	cmp	r3, #4
 8006a4a:	d103      	bne.n	8006a54 <_printf_common+0x70>
 8006a4c:	1a8d      	subs	r5, r1, r2
 8006a4e:	43eb      	mvns	r3, r5
 8006a50:	17db      	asrs	r3, r3, #31
 8006a52:	401d      	ands	r5, r3
 8006a54:	68a3      	ldr	r3, [r4, #8]
 8006a56:	6922      	ldr	r2, [r4, #16]
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	dd01      	ble.n	8006a60 <_printf_common+0x7c>
 8006a5c:	1a9b      	subs	r3, r3, r2
 8006a5e:	18ed      	adds	r5, r5, r3
 8006a60:	2700      	movs	r7, #0
 8006a62:	42bd      	cmp	r5, r7
 8006a64:	d120      	bne.n	8006aa8 <_printf_common+0xc4>
 8006a66:	2000      	movs	r0, #0
 8006a68:	e010      	b.n	8006a8c <_printf_common+0xa8>
 8006a6a:	3701      	adds	r7, #1
 8006a6c:	68e3      	ldr	r3, [r4, #12]
 8006a6e:	682a      	ldr	r2, [r5, #0]
 8006a70:	1a9b      	subs	r3, r3, r2
 8006a72:	42bb      	cmp	r3, r7
 8006a74:	ddd2      	ble.n	8006a1c <_printf_common+0x38>
 8006a76:	0022      	movs	r2, r4
 8006a78:	2301      	movs	r3, #1
 8006a7a:	3219      	adds	r2, #25
 8006a7c:	9901      	ldr	r1, [sp, #4]
 8006a7e:	9800      	ldr	r0, [sp, #0]
 8006a80:	9e08      	ldr	r6, [sp, #32]
 8006a82:	47b0      	blx	r6
 8006a84:	1c43      	adds	r3, r0, #1
 8006a86:	d1f0      	bne.n	8006a6a <_printf_common+0x86>
 8006a88:	2001      	movs	r0, #1
 8006a8a:	4240      	negs	r0, r0
 8006a8c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006a8e:	2030      	movs	r0, #48	; 0x30
 8006a90:	18e1      	adds	r1, r4, r3
 8006a92:	3143      	adds	r1, #67	; 0x43
 8006a94:	7008      	strb	r0, [r1, #0]
 8006a96:	0021      	movs	r1, r4
 8006a98:	1c5a      	adds	r2, r3, #1
 8006a9a:	3145      	adds	r1, #69	; 0x45
 8006a9c:	7809      	ldrb	r1, [r1, #0]
 8006a9e:	18a2      	adds	r2, r4, r2
 8006aa0:	3243      	adds	r2, #67	; 0x43
 8006aa2:	3302      	adds	r3, #2
 8006aa4:	7011      	strb	r1, [r2, #0]
 8006aa6:	e7c1      	b.n	8006a2c <_printf_common+0x48>
 8006aa8:	0022      	movs	r2, r4
 8006aaa:	2301      	movs	r3, #1
 8006aac:	321a      	adds	r2, #26
 8006aae:	9901      	ldr	r1, [sp, #4]
 8006ab0:	9800      	ldr	r0, [sp, #0]
 8006ab2:	9e08      	ldr	r6, [sp, #32]
 8006ab4:	47b0      	blx	r6
 8006ab6:	1c43      	adds	r3, r0, #1
 8006ab8:	d0e6      	beq.n	8006a88 <_printf_common+0xa4>
 8006aba:	3701      	adds	r7, #1
 8006abc:	e7d1      	b.n	8006a62 <_printf_common+0x7e>
	...

08006ac0 <_printf_i>:
 8006ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ac2:	b089      	sub	sp, #36	; 0x24
 8006ac4:	9204      	str	r2, [sp, #16]
 8006ac6:	000a      	movs	r2, r1
 8006ac8:	3243      	adds	r2, #67	; 0x43
 8006aca:	9305      	str	r3, [sp, #20]
 8006acc:	9003      	str	r0, [sp, #12]
 8006ace:	9202      	str	r2, [sp, #8]
 8006ad0:	7e0a      	ldrb	r2, [r1, #24]
 8006ad2:	000c      	movs	r4, r1
 8006ad4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ad6:	2a6e      	cmp	r2, #110	; 0x6e
 8006ad8:	d100      	bne.n	8006adc <_printf_i+0x1c>
 8006ada:	e086      	b.n	8006bea <_printf_i+0x12a>
 8006adc:	d81f      	bhi.n	8006b1e <_printf_i+0x5e>
 8006ade:	2a63      	cmp	r2, #99	; 0x63
 8006ae0:	d033      	beq.n	8006b4a <_printf_i+0x8a>
 8006ae2:	d808      	bhi.n	8006af6 <_printf_i+0x36>
 8006ae4:	2a00      	cmp	r2, #0
 8006ae6:	d100      	bne.n	8006aea <_printf_i+0x2a>
 8006ae8:	e08c      	b.n	8006c04 <_printf_i+0x144>
 8006aea:	2a58      	cmp	r2, #88	; 0x58
 8006aec:	d04d      	beq.n	8006b8a <_printf_i+0xca>
 8006aee:	0025      	movs	r5, r4
 8006af0:	3542      	adds	r5, #66	; 0x42
 8006af2:	702a      	strb	r2, [r5, #0]
 8006af4:	e030      	b.n	8006b58 <_printf_i+0x98>
 8006af6:	2a64      	cmp	r2, #100	; 0x64
 8006af8:	d001      	beq.n	8006afe <_printf_i+0x3e>
 8006afa:	2a69      	cmp	r2, #105	; 0x69
 8006afc:	d1f7      	bne.n	8006aee <_printf_i+0x2e>
 8006afe:	6819      	ldr	r1, [r3, #0]
 8006b00:	6825      	ldr	r5, [r4, #0]
 8006b02:	1d0a      	adds	r2, r1, #4
 8006b04:	0628      	lsls	r0, r5, #24
 8006b06:	d529      	bpl.n	8006b5c <_printf_i+0x9c>
 8006b08:	6808      	ldr	r0, [r1, #0]
 8006b0a:	601a      	str	r2, [r3, #0]
 8006b0c:	2800      	cmp	r0, #0
 8006b0e:	da03      	bge.n	8006b18 <_printf_i+0x58>
 8006b10:	232d      	movs	r3, #45	; 0x2d
 8006b12:	9a02      	ldr	r2, [sp, #8]
 8006b14:	4240      	negs	r0, r0
 8006b16:	7013      	strb	r3, [r2, #0]
 8006b18:	4e6b      	ldr	r6, [pc, #428]	; (8006cc8 <_printf_i+0x208>)
 8006b1a:	270a      	movs	r7, #10
 8006b1c:	e04f      	b.n	8006bbe <_printf_i+0xfe>
 8006b1e:	2a73      	cmp	r2, #115	; 0x73
 8006b20:	d074      	beq.n	8006c0c <_printf_i+0x14c>
 8006b22:	d808      	bhi.n	8006b36 <_printf_i+0x76>
 8006b24:	2a6f      	cmp	r2, #111	; 0x6f
 8006b26:	d01f      	beq.n	8006b68 <_printf_i+0xa8>
 8006b28:	2a70      	cmp	r2, #112	; 0x70
 8006b2a:	d1e0      	bne.n	8006aee <_printf_i+0x2e>
 8006b2c:	2220      	movs	r2, #32
 8006b2e:	6809      	ldr	r1, [r1, #0]
 8006b30:	430a      	orrs	r2, r1
 8006b32:	6022      	str	r2, [r4, #0]
 8006b34:	e003      	b.n	8006b3e <_printf_i+0x7e>
 8006b36:	2a75      	cmp	r2, #117	; 0x75
 8006b38:	d016      	beq.n	8006b68 <_printf_i+0xa8>
 8006b3a:	2a78      	cmp	r2, #120	; 0x78
 8006b3c:	d1d7      	bne.n	8006aee <_printf_i+0x2e>
 8006b3e:	0022      	movs	r2, r4
 8006b40:	2178      	movs	r1, #120	; 0x78
 8006b42:	3245      	adds	r2, #69	; 0x45
 8006b44:	7011      	strb	r1, [r2, #0]
 8006b46:	4e61      	ldr	r6, [pc, #388]	; (8006ccc <_printf_i+0x20c>)
 8006b48:	e022      	b.n	8006b90 <_printf_i+0xd0>
 8006b4a:	0025      	movs	r5, r4
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	3542      	adds	r5, #66	; 0x42
 8006b50:	1d11      	adds	r1, r2, #4
 8006b52:	6019      	str	r1, [r3, #0]
 8006b54:	6813      	ldr	r3, [r2, #0]
 8006b56:	702b      	strb	r3, [r5, #0]
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e065      	b.n	8006c28 <_printf_i+0x168>
 8006b5c:	6808      	ldr	r0, [r1, #0]
 8006b5e:	601a      	str	r2, [r3, #0]
 8006b60:	0669      	lsls	r1, r5, #25
 8006b62:	d5d3      	bpl.n	8006b0c <_printf_i+0x4c>
 8006b64:	b200      	sxth	r0, r0
 8006b66:	e7d1      	b.n	8006b0c <_printf_i+0x4c>
 8006b68:	6819      	ldr	r1, [r3, #0]
 8006b6a:	6825      	ldr	r5, [r4, #0]
 8006b6c:	1d08      	adds	r0, r1, #4
 8006b6e:	6018      	str	r0, [r3, #0]
 8006b70:	6808      	ldr	r0, [r1, #0]
 8006b72:	062e      	lsls	r6, r5, #24
 8006b74:	d505      	bpl.n	8006b82 <_printf_i+0xc2>
 8006b76:	4e54      	ldr	r6, [pc, #336]	; (8006cc8 <_printf_i+0x208>)
 8006b78:	2708      	movs	r7, #8
 8006b7a:	2a6f      	cmp	r2, #111	; 0x6f
 8006b7c:	d01b      	beq.n	8006bb6 <_printf_i+0xf6>
 8006b7e:	270a      	movs	r7, #10
 8006b80:	e019      	b.n	8006bb6 <_printf_i+0xf6>
 8006b82:	066d      	lsls	r5, r5, #25
 8006b84:	d5f7      	bpl.n	8006b76 <_printf_i+0xb6>
 8006b86:	b280      	uxth	r0, r0
 8006b88:	e7f5      	b.n	8006b76 <_printf_i+0xb6>
 8006b8a:	3145      	adds	r1, #69	; 0x45
 8006b8c:	4e4e      	ldr	r6, [pc, #312]	; (8006cc8 <_printf_i+0x208>)
 8006b8e:	700a      	strb	r2, [r1, #0]
 8006b90:	6818      	ldr	r0, [r3, #0]
 8006b92:	6822      	ldr	r2, [r4, #0]
 8006b94:	1d01      	adds	r1, r0, #4
 8006b96:	6800      	ldr	r0, [r0, #0]
 8006b98:	6019      	str	r1, [r3, #0]
 8006b9a:	0615      	lsls	r5, r2, #24
 8006b9c:	d521      	bpl.n	8006be2 <_printf_i+0x122>
 8006b9e:	07d3      	lsls	r3, r2, #31
 8006ba0:	d502      	bpl.n	8006ba8 <_printf_i+0xe8>
 8006ba2:	2320      	movs	r3, #32
 8006ba4:	431a      	orrs	r2, r3
 8006ba6:	6022      	str	r2, [r4, #0]
 8006ba8:	2710      	movs	r7, #16
 8006baa:	2800      	cmp	r0, #0
 8006bac:	d103      	bne.n	8006bb6 <_printf_i+0xf6>
 8006bae:	2320      	movs	r3, #32
 8006bb0:	6822      	ldr	r2, [r4, #0]
 8006bb2:	439a      	bics	r2, r3
 8006bb4:	6022      	str	r2, [r4, #0]
 8006bb6:	0023      	movs	r3, r4
 8006bb8:	2200      	movs	r2, #0
 8006bba:	3343      	adds	r3, #67	; 0x43
 8006bbc:	701a      	strb	r2, [r3, #0]
 8006bbe:	6863      	ldr	r3, [r4, #4]
 8006bc0:	60a3      	str	r3, [r4, #8]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	db58      	blt.n	8006c78 <_printf_i+0x1b8>
 8006bc6:	2204      	movs	r2, #4
 8006bc8:	6821      	ldr	r1, [r4, #0]
 8006bca:	4391      	bics	r1, r2
 8006bcc:	6021      	str	r1, [r4, #0]
 8006bce:	2800      	cmp	r0, #0
 8006bd0:	d154      	bne.n	8006c7c <_printf_i+0x1bc>
 8006bd2:	9d02      	ldr	r5, [sp, #8]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d05a      	beq.n	8006c8e <_printf_i+0x1ce>
 8006bd8:	0025      	movs	r5, r4
 8006bda:	7833      	ldrb	r3, [r6, #0]
 8006bdc:	3542      	adds	r5, #66	; 0x42
 8006bde:	702b      	strb	r3, [r5, #0]
 8006be0:	e055      	b.n	8006c8e <_printf_i+0x1ce>
 8006be2:	0655      	lsls	r5, r2, #25
 8006be4:	d5db      	bpl.n	8006b9e <_printf_i+0xde>
 8006be6:	b280      	uxth	r0, r0
 8006be8:	e7d9      	b.n	8006b9e <_printf_i+0xde>
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	680d      	ldr	r5, [r1, #0]
 8006bee:	1d10      	adds	r0, r2, #4
 8006bf0:	6949      	ldr	r1, [r1, #20]
 8006bf2:	6018      	str	r0, [r3, #0]
 8006bf4:	6813      	ldr	r3, [r2, #0]
 8006bf6:	062e      	lsls	r6, r5, #24
 8006bf8:	d501      	bpl.n	8006bfe <_printf_i+0x13e>
 8006bfa:	6019      	str	r1, [r3, #0]
 8006bfc:	e002      	b.n	8006c04 <_printf_i+0x144>
 8006bfe:	066d      	lsls	r5, r5, #25
 8006c00:	d5fb      	bpl.n	8006bfa <_printf_i+0x13a>
 8006c02:	8019      	strh	r1, [r3, #0]
 8006c04:	2300      	movs	r3, #0
 8006c06:	9d02      	ldr	r5, [sp, #8]
 8006c08:	6123      	str	r3, [r4, #16]
 8006c0a:	e04f      	b.n	8006cac <_printf_i+0x1ec>
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	1d11      	adds	r1, r2, #4
 8006c10:	6019      	str	r1, [r3, #0]
 8006c12:	6815      	ldr	r5, [r2, #0]
 8006c14:	2100      	movs	r1, #0
 8006c16:	6862      	ldr	r2, [r4, #4]
 8006c18:	0028      	movs	r0, r5
 8006c1a:	f000 f859 	bl	8006cd0 <memchr>
 8006c1e:	2800      	cmp	r0, #0
 8006c20:	d001      	beq.n	8006c26 <_printf_i+0x166>
 8006c22:	1b40      	subs	r0, r0, r5
 8006c24:	6060      	str	r0, [r4, #4]
 8006c26:	6863      	ldr	r3, [r4, #4]
 8006c28:	6123      	str	r3, [r4, #16]
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	9a02      	ldr	r2, [sp, #8]
 8006c2e:	7013      	strb	r3, [r2, #0]
 8006c30:	e03c      	b.n	8006cac <_printf_i+0x1ec>
 8006c32:	6923      	ldr	r3, [r4, #16]
 8006c34:	002a      	movs	r2, r5
 8006c36:	9904      	ldr	r1, [sp, #16]
 8006c38:	9803      	ldr	r0, [sp, #12]
 8006c3a:	9d05      	ldr	r5, [sp, #20]
 8006c3c:	47a8      	blx	r5
 8006c3e:	1c43      	adds	r3, r0, #1
 8006c40:	d03e      	beq.n	8006cc0 <_printf_i+0x200>
 8006c42:	6823      	ldr	r3, [r4, #0]
 8006c44:	079b      	lsls	r3, r3, #30
 8006c46:	d415      	bmi.n	8006c74 <_printf_i+0x1b4>
 8006c48:	9b07      	ldr	r3, [sp, #28]
 8006c4a:	68e0      	ldr	r0, [r4, #12]
 8006c4c:	4298      	cmp	r0, r3
 8006c4e:	da39      	bge.n	8006cc4 <_printf_i+0x204>
 8006c50:	0018      	movs	r0, r3
 8006c52:	e037      	b.n	8006cc4 <_printf_i+0x204>
 8006c54:	0022      	movs	r2, r4
 8006c56:	2301      	movs	r3, #1
 8006c58:	3219      	adds	r2, #25
 8006c5a:	9904      	ldr	r1, [sp, #16]
 8006c5c:	9803      	ldr	r0, [sp, #12]
 8006c5e:	9e05      	ldr	r6, [sp, #20]
 8006c60:	47b0      	blx	r6
 8006c62:	1c43      	adds	r3, r0, #1
 8006c64:	d02c      	beq.n	8006cc0 <_printf_i+0x200>
 8006c66:	3501      	adds	r5, #1
 8006c68:	68e3      	ldr	r3, [r4, #12]
 8006c6a:	9a07      	ldr	r2, [sp, #28]
 8006c6c:	1a9b      	subs	r3, r3, r2
 8006c6e:	42ab      	cmp	r3, r5
 8006c70:	dcf0      	bgt.n	8006c54 <_printf_i+0x194>
 8006c72:	e7e9      	b.n	8006c48 <_printf_i+0x188>
 8006c74:	2500      	movs	r5, #0
 8006c76:	e7f7      	b.n	8006c68 <_printf_i+0x1a8>
 8006c78:	2800      	cmp	r0, #0
 8006c7a:	d0ad      	beq.n	8006bd8 <_printf_i+0x118>
 8006c7c:	9d02      	ldr	r5, [sp, #8]
 8006c7e:	0039      	movs	r1, r7
 8006c80:	f7f9 fac8 	bl	8000214 <__aeabi_uidivmod>
 8006c84:	5c73      	ldrb	r3, [r6, r1]
 8006c86:	3d01      	subs	r5, #1
 8006c88:	702b      	strb	r3, [r5, #0]
 8006c8a:	2800      	cmp	r0, #0
 8006c8c:	d1f7      	bne.n	8006c7e <_printf_i+0x1be>
 8006c8e:	2f08      	cmp	r7, #8
 8006c90:	d109      	bne.n	8006ca6 <_printf_i+0x1e6>
 8006c92:	6823      	ldr	r3, [r4, #0]
 8006c94:	07db      	lsls	r3, r3, #31
 8006c96:	d506      	bpl.n	8006ca6 <_printf_i+0x1e6>
 8006c98:	6863      	ldr	r3, [r4, #4]
 8006c9a:	6922      	ldr	r2, [r4, #16]
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	dc02      	bgt.n	8006ca6 <_printf_i+0x1e6>
 8006ca0:	2330      	movs	r3, #48	; 0x30
 8006ca2:	3d01      	subs	r5, #1
 8006ca4:	702b      	strb	r3, [r5, #0]
 8006ca6:	9b02      	ldr	r3, [sp, #8]
 8006ca8:	1b5b      	subs	r3, r3, r5
 8006caa:	6123      	str	r3, [r4, #16]
 8006cac:	9b05      	ldr	r3, [sp, #20]
 8006cae:	aa07      	add	r2, sp, #28
 8006cb0:	9300      	str	r3, [sp, #0]
 8006cb2:	0021      	movs	r1, r4
 8006cb4:	9b04      	ldr	r3, [sp, #16]
 8006cb6:	9803      	ldr	r0, [sp, #12]
 8006cb8:	f7ff fe94 	bl	80069e4 <_printf_common>
 8006cbc:	1c43      	adds	r3, r0, #1
 8006cbe:	d1b8      	bne.n	8006c32 <_printf_i+0x172>
 8006cc0:	2001      	movs	r0, #1
 8006cc2:	4240      	negs	r0, r0
 8006cc4:	b009      	add	sp, #36	; 0x24
 8006cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cc8:	08007522 	.word	0x08007522
 8006ccc:	08007533 	.word	0x08007533

08006cd0 <memchr>:
 8006cd0:	b2c9      	uxtb	r1, r1
 8006cd2:	1882      	adds	r2, r0, r2
 8006cd4:	4290      	cmp	r0, r2
 8006cd6:	d101      	bne.n	8006cdc <memchr+0xc>
 8006cd8:	2000      	movs	r0, #0
 8006cda:	4770      	bx	lr
 8006cdc:	7803      	ldrb	r3, [r0, #0]
 8006cde:	428b      	cmp	r3, r1
 8006ce0:	d0fb      	beq.n	8006cda <memchr+0xa>
 8006ce2:	3001      	adds	r0, #1
 8006ce4:	e7f6      	b.n	8006cd4 <memchr+0x4>

08006ce6 <memmove>:
 8006ce6:	b510      	push	{r4, lr}
 8006ce8:	4288      	cmp	r0, r1
 8006cea:	d902      	bls.n	8006cf2 <memmove+0xc>
 8006cec:	188b      	adds	r3, r1, r2
 8006cee:	4298      	cmp	r0, r3
 8006cf0:	d303      	bcc.n	8006cfa <memmove+0x14>
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	e007      	b.n	8006d06 <memmove+0x20>
 8006cf6:	5c8b      	ldrb	r3, [r1, r2]
 8006cf8:	5483      	strb	r3, [r0, r2]
 8006cfa:	3a01      	subs	r2, #1
 8006cfc:	d2fb      	bcs.n	8006cf6 <memmove+0x10>
 8006cfe:	bd10      	pop	{r4, pc}
 8006d00:	5ccc      	ldrb	r4, [r1, r3]
 8006d02:	54c4      	strb	r4, [r0, r3]
 8006d04:	3301      	adds	r3, #1
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d1fa      	bne.n	8006d00 <memmove+0x1a>
 8006d0a:	e7f8      	b.n	8006cfe <memmove+0x18>

08006d0c <_free_r>:
 8006d0c:	b570      	push	{r4, r5, r6, lr}
 8006d0e:	0005      	movs	r5, r0
 8006d10:	2900      	cmp	r1, #0
 8006d12:	d010      	beq.n	8006d36 <_free_r+0x2a>
 8006d14:	1f0c      	subs	r4, r1, #4
 8006d16:	6823      	ldr	r3, [r4, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	da00      	bge.n	8006d1e <_free_r+0x12>
 8006d1c:	18e4      	adds	r4, r4, r3
 8006d1e:	0028      	movs	r0, r5
 8006d20:	f000 f8d4 	bl	8006ecc <__malloc_lock>
 8006d24:	4a1d      	ldr	r2, [pc, #116]	; (8006d9c <_free_r+0x90>)
 8006d26:	6813      	ldr	r3, [r2, #0]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d105      	bne.n	8006d38 <_free_r+0x2c>
 8006d2c:	6063      	str	r3, [r4, #4]
 8006d2e:	6014      	str	r4, [r2, #0]
 8006d30:	0028      	movs	r0, r5
 8006d32:	f000 f8cc 	bl	8006ece <__malloc_unlock>
 8006d36:	bd70      	pop	{r4, r5, r6, pc}
 8006d38:	42a3      	cmp	r3, r4
 8006d3a:	d909      	bls.n	8006d50 <_free_r+0x44>
 8006d3c:	6821      	ldr	r1, [r4, #0]
 8006d3e:	1860      	adds	r0, r4, r1
 8006d40:	4283      	cmp	r3, r0
 8006d42:	d1f3      	bne.n	8006d2c <_free_r+0x20>
 8006d44:	6818      	ldr	r0, [r3, #0]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	1841      	adds	r1, r0, r1
 8006d4a:	6021      	str	r1, [r4, #0]
 8006d4c:	e7ee      	b.n	8006d2c <_free_r+0x20>
 8006d4e:	0013      	movs	r3, r2
 8006d50:	685a      	ldr	r2, [r3, #4]
 8006d52:	2a00      	cmp	r2, #0
 8006d54:	d001      	beq.n	8006d5a <_free_r+0x4e>
 8006d56:	42a2      	cmp	r2, r4
 8006d58:	d9f9      	bls.n	8006d4e <_free_r+0x42>
 8006d5a:	6819      	ldr	r1, [r3, #0]
 8006d5c:	1858      	adds	r0, r3, r1
 8006d5e:	42a0      	cmp	r0, r4
 8006d60:	d10b      	bne.n	8006d7a <_free_r+0x6e>
 8006d62:	6820      	ldr	r0, [r4, #0]
 8006d64:	1809      	adds	r1, r1, r0
 8006d66:	1858      	adds	r0, r3, r1
 8006d68:	6019      	str	r1, [r3, #0]
 8006d6a:	4282      	cmp	r2, r0
 8006d6c:	d1e0      	bne.n	8006d30 <_free_r+0x24>
 8006d6e:	6810      	ldr	r0, [r2, #0]
 8006d70:	6852      	ldr	r2, [r2, #4]
 8006d72:	1841      	adds	r1, r0, r1
 8006d74:	6019      	str	r1, [r3, #0]
 8006d76:	605a      	str	r2, [r3, #4]
 8006d78:	e7da      	b.n	8006d30 <_free_r+0x24>
 8006d7a:	42a0      	cmp	r0, r4
 8006d7c:	d902      	bls.n	8006d84 <_free_r+0x78>
 8006d7e:	230c      	movs	r3, #12
 8006d80:	602b      	str	r3, [r5, #0]
 8006d82:	e7d5      	b.n	8006d30 <_free_r+0x24>
 8006d84:	6821      	ldr	r1, [r4, #0]
 8006d86:	1860      	adds	r0, r4, r1
 8006d88:	4282      	cmp	r2, r0
 8006d8a:	d103      	bne.n	8006d94 <_free_r+0x88>
 8006d8c:	6810      	ldr	r0, [r2, #0]
 8006d8e:	6852      	ldr	r2, [r2, #4]
 8006d90:	1841      	adds	r1, r0, r1
 8006d92:	6021      	str	r1, [r4, #0]
 8006d94:	6062      	str	r2, [r4, #4]
 8006d96:	605c      	str	r4, [r3, #4]
 8006d98:	e7ca      	b.n	8006d30 <_free_r+0x24>
 8006d9a:	46c0      	nop			; (mov r8, r8)
 8006d9c:	200000b4 	.word	0x200000b4

08006da0 <_malloc_r>:
 8006da0:	2303      	movs	r3, #3
 8006da2:	b570      	push	{r4, r5, r6, lr}
 8006da4:	1ccd      	adds	r5, r1, #3
 8006da6:	439d      	bics	r5, r3
 8006da8:	3508      	adds	r5, #8
 8006daa:	0006      	movs	r6, r0
 8006dac:	2d0c      	cmp	r5, #12
 8006dae:	d21e      	bcs.n	8006dee <_malloc_r+0x4e>
 8006db0:	250c      	movs	r5, #12
 8006db2:	42a9      	cmp	r1, r5
 8006db4:	d81d      	bhi.n	8006df2 <_malloc_r+0x52>
 8006db6:	0030      	movs	r0, r6
 8006db8:	f000 f888 	bl	8006ecc <__malloc_lock>
 8006dbc:	4a25      	ldr	r2, [pc, #148]	; (8006e54 <_malloc_r+0xb4>)
 8006dbe:	6814      	ldr	r4, [r2, #0]
 8006dc0:	0021      	movs	r1, r4
 8006dc2:	2900      	cmp	r1, #0
 8006dc4:	d119      	bne.n	8006dfa <_malloc_r+0x5a>
 8006dc6:	4c24      	ldr	r4, [pc, #144]	; (8006e58 <_malloc_r+0xb8>)
 8006dc8:	6823      	ldr	r3, [r4, #0]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d103      	bne.n	8006dd6 <_malloc_r+0x36>
 8006dce:	0030      	movs	r0, r6
 8006dd0:	f000 f86a 	bl	8006ea8 <_sbrk_r>
 8006dd4:	6020      	str	r0, [r4, #0]
 8006dd6:	0029      	movs	r1, r5
 8006dd8:	0030      	movs	r0, r6
 8006dda:	f000 f865 	bl	8006ea8 <_sbrk_r>
 8006dde:	1c43      	adds	r3, r0, #1
 8006de0:	d12b      	bne.n	8006e3a <_malloc_r+0x9a>
 8006de2:	230c      	movs	r3, #12
 8006de4:	0030      	movs	r0, r6
 8006de6:	6033      	str	r3, [r6, #0]
 8006de8:	f000 f871 	bl	8006ece <__malloc_unlock>
 8006dec:	e003      	b.n	8006df6 <_malloc_r+0x56>
 8006dee:	2d00      	cmp	r5, #0
 8006df0:	dadf      	bge.n	8006db2 <_malloc_r+0x12>
 8006df2:	230c      	movs	r3, #12
 8006df4:	6033      	str	r3, [r6, #0]
 8006df6:	2000      	movs	r0, #0
 8006df8:	bd70      	pop	{r4, r5, r6, pc}
 8006dfa:	680b      	ldr	r3, [r1, #0]
 8006dfc:	1b5b      	subs	r3, r3, r5
 8006dfe:	d419      	bmi.n	8006e34 <_malloc_r+0x94>
 8006e00:	2b0b      	cmp	r3, #11
 8006e02:	d903      	bls.n	8006e0c <_malloc_r+0x6c>
 8006e04:	600b      	str	r3, [r1, #0]
 8006e06:	18cc      	adds	r4, r1, r3
 8006e08:	6025      	str	r5, [r4, #0]
 8006e0a:	e003      	b.n	8006e14 <_malloc_r+0x74>
 8006e0c:	684b      	ldr	r3, [r1, #4]
 8006e0e:	428c      	cmp	r4, r1
 8006e10:	d10d      	bne.n	8006e2e <_malloc_r+0x8e>
 8006e12:	6013      	str	r3, [r2, #0]
 8006e14:	0030      	movs	r0, r6
 8006e16:	f000 f85a 	bl	8006ece <__malloc_unlock>
 8006e1a:	0020      	movs	r0, r4
 8006e1c:	2207      	movs	r2, #7
 8006e1e:	300b      	adds	r0, #11
 8006e20:	1d23      	adds	r3, r4, #4
 8006e22:	4390      	bics	r0, r2
 8006e24:	1ac3      	subs	r3, r0, r3
 8006e26:	d0e7      	beq.n	8006df8 <_malloc_r+0x58>
 8006e28:	425a      	negs	r2, r3
 8006e2a:	50e2      	str	r2, [r4, r3]
 8006e2c:	e7e4      	b.n	8006df8 <_malloc_r+0x58>
 8006e2e:	6063      	str	r3, [r4, #4]
 8006e30:	000c      	movs	r4, r1
 8006e32:	e7ef      	b.n	8006e14 <_malloc_r+0x74>
 8006e34:	000c      	movs	r4, r1
 8006e36:	6849      	ldr	r1, [r1, #4]
 8006e38:	e7c3      	b.n	8006dc2 <_malloc_r+0x22>
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	1cc4      	adds	r4, r0, #3
 8006e3e:	439c      	bics	r4, r3
 8006e40:	42a0      	cmp	r0, r4
 8006e42:	d0e1      	beq.n	8006e08 <_malloc_r+0x68>
 8006e44:	1a21      	subs	r1, r4, r0
 8006e46:	0030      	movs	r0, r6
 8006e48:	f000 f82e 	bl	8006ea8 <_sbrk_r>
 8006e4c:	1c43      	adds	r3, r0, #1
 8006e4e:	d1db      	bne.n	8006e08 <_malloc_r+0x68>
 8006e50:	e7c7      	b.n	8006de2 <_malloc_r+0x42>
 8006e52:	46c0      	nop			; (mov r8, r8)
 8006e54:	200000b4 	.word	0x200000b4
 8006e58:	200000b8 	.word	0x200000b8

08006e5c <_realloc_r>:
 8006e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e5e:	0007      	movs	r7, r0
 8006e60:	000d      	movs	r5, r1
 8006e62:	0016      	movs	r6, r2
 8006e64:	2900      	cmp	r1, #0
 8006e66:	d105      	bne.n	8006e74 <_realloc_r+0x18>
 8006e68:	0011      	movs	r1, r2
 8006e6a:	f7ff ff99 	bl	8006da0 <_malloc_r>
 8006e6e:	0004      	movs	r4, r0
 8006e70:	0020      	movs	r0, r4
 8006e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e74:	2a00      	cmp	r2, #0
 8006e76:	d103      	bne.n	8006e80 <_realloc_r+0x24>
 8006e78:	f7ff ff48 	bl	8006d0c <_free_r>
 8006e7c:	0034      	movs	r4, r6
 8006e7e:	e7f7      	b.n	8006e70 <_realloc_r+0x14>
 8006e80:	f000 f826 	bl	8006ed0 <_malloc_usable_size_r>
 8006e84:	002c      	movs	r4, r5
 8006e86:	42b0      	cmp	r0, r6
 8006e88:	d2f2      	bcs.n	8006e70 <_realloc_r+0x14>
 8006e8a:	0031      	movs	r1, r6
 8006e8c:	0038      	movs	r0, r7
 8006e8e:	f7ff ff87 	bl	8006da0 <_malloc_r>
 8006e92:	1e04      	subs	r4, r0, #0
 8006e94:	d0ec      	beq.n	8006e70 <_realloc_r+0x14>
 8006e96:	0029      	movs	r1, r5
 8006e98:	0032      	movs	r2, r6
 8006e9a:	f7ff fc11 	bl	80066c0 <memcpy>
 8006e9e:	0029      	movs	r1, r5
 8006ea0:	0038      	movs	r0, r7
 8006ea2:	f7ff ff33 	bl	8006d0c <_free_r>
 8006ea6:	e7e3      	b.n	8006e70 <_realloc_r+0x14>

08006ea8 <_sbrk_r>:
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	b570      	push	{r4, r5, r6, lr}
 8006eac:	4c06      	ldr	r4, [pc, #24]	; (8006ec8 <_sbrk_r+0x20>)
 8006eae:	0005      	movs	r5, r0
 8006eb0:	0008      	movs	r0, r1
 8006eb2:	6023      	str	r3, [r4, #0]
 8006eb4:	f7fb fae4 	bl	8002480 <_sbrk>
 8006eb8:	1c43      	adds	r3, r0, #1
 8006eba:	d103      	bne.n	8006ec4 <_sbrk_r+0x1c>
 8006ebc:	6823      	ldr	r3, [r4, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d000      	beq.n	8006ec4 <_sbrk_r+0x1c>
 8006ec2:	602b      	str	r3, [r5, #0]
 8006ec4:	bd70      	pop	{r4, r5, r6, pc}
 8006ec6:	46c0      	nop			; (mov r8, r8)
 8006ec8:	200002a4 	.word	0x200002a4

08006ecc <__malloc_lock>:
 8006ecc:	4770      	bx	lr

08006ece <__malloc_unlock>:
 8006ece:	4770      	bx	lr

08006ed0 <_malloc_usable_size_r>:
 8006ed0:	1f0b      	subs	r3, r1, #4
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	1f18      	subs	r0, r3, #4
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	da01      	bge.n	8006ede <_malloc_usable_size_r+0xe>
 8006eda:	580b      	ldr	r3, [r1, r0]
 8006edc:	18c0      	adds	r0, r0, r3
 8006ede:	4770      	bx	lr

08006ee0 <_init>:
 8006ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ee2:	46c0      	nop			; (mov r8, r8)
 8006ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ee6:	bc08      	pop	{r3}
 8006ee8:	469e      	mov	lr, r3
 8006eea:	4770      	bx	lr

08006eec <_fini>:
 8006eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eee:	46c0      	nop			; (mov r8, r8)
 8006ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ef2:	bc08      	pop	{r3}
 8006ef4:	469e      	mov	lr, r3
 8006ef6:	4770      	bx	lr
