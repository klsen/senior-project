
project_L0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9e0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000914  0800aaa0  0800aaa0  0001aaa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b3b4  0800b3b4  000200d0  2**0
                  CONTENTS
  4 .ARM          00000000  0800b3b4  0800b3b4  000200d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b3b4  0800b3b4  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b3b4  0800b3b4  0001b3b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b3b8  0800b3b8  0001b3b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  0800b3bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  200000d0  0800b48c  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005dc  0800b48c  000205dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c4d2  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003818  00000000  00000000  0003c5ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001538  00000000  00000000  0003fde8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001368  00000000  00000000  00041320  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018aff  00000000  00000000  00042688  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013235  00000000  00000000  0005b187  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008f2ff  00000000  00000000  0006e3bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fd6bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005024  00000000  00000000  000fd738  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000d0 	.word	0x200000d0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800aa88 	.word	0x0800aa88

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000d4 	.word	0x200000d4
 8000104:	0800aa88 	.word	0x0800aa88

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cfrcmple>:
 8000404:	4684      	mov	ip, r0
 8000406:	1c08      	adds	r0, r1, #0
 8000408:	4661      	mov	r1, ip
 800040a:	e7ff      	b.n	800040c <__aeabi_cfcmpeq>

0800040c <__aeabi_cfcmpeq>:
 800040c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800040e:	f000 f9d3 	bl	80007b8 <__lesf2>
 8000412:	2800      	cmp	r0, #0
 8000414:	d401      	bmi.n	800041a <__aeabi_cfcmpeq+0xe>
 8000416:	2100      	movs	r1, #0
 8000418:	42c8      	cmn	r0, r1
 800041a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800041c <__aeabi_fcmpeq>:
 800041c:	b510      	push	{r4, lr}
 800041e:	f000 f955 	bl	80006cc <__eqsf2>
 8000422:	4240      	negs	r0, r0
 8000424:	3001      	adds	r0, #1
 8000426:	bd10      	pop	{r4, pc}

08000428 <__aeabi_fcmplt>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 f9c5 	bl	80007b8 <__lesf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	db01      	blt.n	8000436 <__aeabi_fcmplt+0xe>
 8000432:	2000      	movs	r0, #0
 8000434:	bd10      	pop	{r4, pc}
 8000436:	2001      	movs	r0, #1
 8000438:	bd10      	pop	{r4, pc}
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_fcmple>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f000 f9bb 	bl	80007b8 <__lesf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	dd01      	ble.n	800044a <__aeabi_fcmple+0xe>
 8000446:	2000      	movs	r0, #0
 8000448:	bd10      	pop	{r4, pc}
 800044a:	2001      	movs	r0, #1
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_fcmpgt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 f963 	bl	800071c <__gesf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	dc01      	bgt.n	800045e <__aeabi_fcmpgt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_fcmpge>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f000 f959 	bl	800071c <__gesf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	da01      	bge.n	8000472 <__aeabi_fcmpge+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_f2uiz>:
 8000478:	219e      	movs	r1, #158	; 0x9e
 800047a:	b510      	push	{r4, lr}
 800047c:	05c9      	lsls	r1, r1, #23
 800047e:	1c04      	adds	r4, r0, #0
 8000480:	f7ff fff0 	bl	8000464 <__aeabi_fcmpge>
 8000484:	2800      	cmp	r0, #0
 8000486:	d103      	bne.n	8000490 <__aeabi_f2uiz+0x18>
 8000488:	1c20      	adds	r0, r4, #0
 800048a:	f000 fcdb 	bl	8000e44 <__aeabi_f2iz>
 800048e:	bd10      	pop	{r4, pc}
 8000490:	219e      	movs	r1, #158	; 0x9e
 8000492:	1c20      	adds	r0, r4, #0
 8000494:	05c9      	lsls	r1, r1, #23
 8000496:	f000 fb11 	bl	8000abc <__aeabi_fsub>
 800049a:	f000 fcd3 	bl	8000e44 <__aeabi_f2iz>
 800049e:	2380      	movs	r3, #128	; 0x80
 80004a0:	061b      	lsls	r3, r3, #24
 80004a2:	469c      	mov	ip, r3
 80004a4:	4460      	add	r0, ip
 80004a6:	e7f2      	b.n	800048e <__aeabi_f2uiz+0x16>

080004a8 <__aeabi_fdiv>:
 80004a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004aa:	4657      	mov	r7, sl
 80004ac:	464e      	mov	r6, r9
 80004ae:	4645      	mov	r5, r8
 80004b0:	46de      	mov	lr, fp
 80004b2:	0244      	lsls	r4, r0, #9
 80004b4:	b5e0      	push	{r5, r6, r7, lr}
 80004b6:	0046      	lsls	r6, r0, #1
 80004b8:	4688      	mov	r8, r1
 80004ba:	0a64      	lsrs	r4, r4, #9
 80004bc:	0e36      	lsrs	r6, r6, #24
 80004be:	0fc7      	lsrs	r7, r0, #31
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d063      	beq.n	800058c <__aeabi_fdiv+0xe4>
 80004c4:	2eff      	cmp	r6, #255	; 0xff
 80004c6:	d024      	beq.n	8000512 <__aeabi_fdiv+0x6a>
 80004c8:	2380      	movs	r3, #128	; 0x80
 80004ca:	00e4      	lsls	r4, r4, #3
 80004cc:	04db      	lsls	r3, r3, #19
 80004ce:	431c      	orrs	r4, r3
 80004d0:	2300      	movs	r3, #0
 80004d2:	4699      	mov	r9, r3
 80004d4:	469b      	mov	fp, r3
 80004d6:	3e7f      	subs	r6, #127	; 0x7f
 80004d8:	4643      	mov	r3, r8
 80004da:	4642      	mov	r2, r8
 80004dc:	025d      	lsls	r5, r3, #9
 80004de:	0fd2      	lsrs	r2, r2, #31
 80004e0:	005b      	lsls	r3, r3, #1
 80004e2:	0a6d      	lsrs	r5, r5, #9
 80004e4:	0e1b      	lsrs	r3, r3, #24
 80004e6:	4690      	mov	r8, r2
 80004e8:	4692      	mov	sl, r2
 80004ea:	d065      	beq.n	80005b8 <__aeabi_fdiv+0x110>
 80004ec:	2bff      	cmp	r3, #255	; 0xff
 80004ee:	d055      	beq.n	800059c <__aeabi_fdiv+0xf4>
 80004f0:	2280      	movs	r2, #128	; 0x80
 80004f2:	2100      	movs	r1, #0
 80004f4:	00ed      	lsls	r5, r5, #3
 80004f6:	04d2      	lsls	r2, r2, #19
 80004f8:	3b7f      	subs	r3, #127	; 0x7f
 80004fa:	4315      	orrs	r5, r2
 80004fc:	1af6      	subs	r6, r6, r3
 80004fe:	4643      	mov	r3, r8
 8000500:	464a      	mov	r2, r9
 8000502:	407b      	eors	r3, r7
 8000504:	2a0f      	cmp	r2, #15
 8000506:	d900      	bls.n	800050a <__aeabi_fdiv+0x62>
 8000508:	e08d      	b.n	8000626 <__aeabi_fdiv+0x17e>
 800050a:	486d      	ldr	r0, [pc, #436]	; (80006c0 <__aeabi_fdiv+0x218>)
 800050c:	0092      	lsls	r2, r2, #2
 800050e:	5882      	ldr	r2, [r0, r2]
 8000510:	4697      	mov	pc, r2
 8000512:	2c00      	cmp	r4, #0
 8000514:	d154      	bne.n	80005c0 <__aeabi_fdiv+0x118>
 8000516:	2308      	movs	r3, #8
 8000518:	4699      	mov	r9, r3
 800051a:	3b06      	subs	r3, #6
 800051c:	26ff      	movs	r6, #255	; 0xff
 800051e:	469b      	mov	fp, r3
 8000520:	e7da      	b.n	80004d8 <__aeabi_fdiv+0x30>
 8000522:	2500      	movs	r5, #0
 8000524:	4653      	mov	r3, sl
 8000526:	2902      	cmp	r1, #2
 8000528:	d01b      	beq.n	8000562 <__aeabi_fdiv+0xba>
 800052a:	2903      	cmp	r1, #3
 800052c:	d100      	bne.n	8000530 <__aeabi_fdiv+0x88>
 800052e:	e0bf      	b.n	80006b0 <__aeabi_fdiv+0x208>
 8000530:	2901      	cmp	r1, #1
 8000532:	d028      	beq.n	8000586 <__aeabi_fdiv+0xde>
 8000534:	0030      	movs	r0, r6
 8000536:	307f      	adds	r0, #127	; 0x7f
 8000538:	2800      	cmp	r0, #0
 800053a:	dd20      	ble.n	800057e <__aeabi_fdiv+0xd6>
 800053c:	076a      	lsls	r2, r5, #29
 800053e:	d004      	beq.n	800054a <__aeabi_fdiv+0xa2>
 8000540:	220f      	movs	r2, #15
 8000542:	402a      	ands	r2, r5
 8000544:	2a04      	cmp	r2, #4
 8000546:	d000      	beq.n	800054a <__aeabi_fdiv+0xa2>
 8000548:	3504      	adds	r5, #4
 800054a:	012a      	lsls	r2, r5, #4
 800054c:	d503      	bpl.n	8000556 <__aeabi_fdiv+0xae>
 800054e:	0030      	movs	r0, r6
 8000550:	4a5c      	ldr	r2, [pc, #368]	; (80006c4 <__aeabi_fdiv+0x21c>)
 8000552:	3080      	adds	r0, #128	; 0x80
 8000554:	4015      	ands	r5, r2
 8000556:	28fe      	cmp	r0, #254	; 0xfe
 8000558:	dc03      	bgt.n	8000562 <__aeabi_fdiv+0xba>
 800055a:	01ac      	lsls	r4, r5, #6
 800055c:	0a64      	lsrs	r4, r4, #9
 800055e:	b2c2      	uxtb	r2, r0
 8000560:	e001      	b.n	8000566 <__aeabi_fdiv+0xbe>
 8000562:	22ff      	movs	r2, #255	; 0xff
 8000564:	2400      	movs	r4, #0
 8000566:	0264      	lsls	r4, r4, #9
 8000568:	05d2      	lsls	r2, r2, #23
 800056a:	0a60      	lsrs	r0, r4, #9
 800056c:	07db      	lsls	r3, r3, #31
 800056e:	4310      	orrs	r0, r2
 8000570:	4318      	orrs	r0, r3
 8000572:	bc3c      	pop	{r2, r3, r4, r5}
 8000574:	4690      	mov	r8, r2
 8000576:	4699      	mov	r9, r3
 8000578:	46a2      	mov	sl, r4
 800057a:	46ab      	mov	fp, r5
 800057c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800057e:	2201      	movs	r2, #1
 8000580:	1a10      	subs	r0, r2, r0
 8000582:	281b      	cmp	r0, #27
 8000584:	dd7c      	ble.n	8000680 <__aeabi_fdiv+0x1d8>
 8000586:	2200      	movs	r2, #0
 8000588:	2400      	movs	r4, #0
 800058a:	e7ec      	b.n	8000566 <__aeabi_fdiv+0xbe>
 800058c:	2c00      	cmp	r4, #0
 800058e:	d11d      	bne.n	80005cc <__aeabi_fdiv+0x124>
 8000590:	2304      	movs	r3, #4
 8000592:	4699      	mov	r9, r3
 8000594:	3b03      	subs	r3, #3
 8000596:	2600      	movs	r6, #0
 8000598:	469b      	mov	fp, r3
 800059a:	e79d      	b.n	80004d8 <__aeabi_fdiv+0x30>
 800059c:	3eff      	subs	r6, #255	; 0xff
 800059e:	2d00      	cmp	r5, #0
 80005a0:	d120      	bne.n	80005e4 <__aeabi_fdiv+0x13c>
 80005a2:	2102      	movs	r1, #2
 80005a4:	4643      	mov	r3, r8
 80005a6:	464a      	mov	r2, r9
 80005a8:	407b      	eors	r3, r7
 80005aa:	430a      	orrs	r2, r1
 80005ac:	2a0f      	cmp	r2, #15
 80005ae:	d8d8      	bhi.n	8000562 <__aeabi_fdiv+0xba>
 80005b0:	4845      	ldr	r0, [pc, #276]	; (80006c8 <__aeabi_fdiv+0x220>)
 80005b2:	0092      	lsls	r2, r2, #2
 80005b4:	5882      	ldr	r2, [r0, r2]
 80005b6:	4697      	mov	pc, r2
 80005b8:	2d00      	cmp	r5, #0
 80005ba:	d119      	bne.n	80005f0 <__aeabi_fdiv+0x148>
 80005bc:	2101      	movs	r1, #1
 80005be:	e7f1      	b.n	80005a4 <__aeabi_fdiv+0xfc>
 80005c0:	230c      	movs	r3, #12
 80005c2:	4699      	mov	r9, r3
 80005c4:	3b09      	subs	r3, #9
 80005c6:	26ff      	movs	r6, #255	; 0xff
 80005c8:	469b      	mov	fp, r3
 80005ca:	e785      	b.n	80004d8 <__aeabi_fdiv+0x30>
 80005cc:	0020      	movs	r0, r4
 80005ce:	f000 fc99 	bl	8000f04 <__clzsi2>
 80005d2:	2676      	movs	r6, #118	; 0x76
 80005d4:	1f43      	subs	r3, r0, #5
 80005d6:	409c      	lsls	r4, r3
 80005d8:	2300      	movs	r3, #0
 80005da:	4276      	negs	r6, r6
 80005dc:	1a36      	subs	r6, r6, r0
 80005de:	4699      	mov	r9, r3
 80005e0:	469b      	mov	fp, r3
 80005e2:	e779      	b.n	80004d8 <__aeabi_fdiv+0x30>
 80005e4:	464a      	mov	r2, r9
 80005e6:	2303      	movs	r3, #3
 80005e8:	431a      	orrs	r2, r3
 80005ea:	4691      	mov	r9, r2
 80005ec:	2103      	movs	r1, #3
 80005ee:	e786      	b.n	80004fe <__aeabi_fdiv+0x56>
 80005f0:	0028      	movs	r0, r5
 80005f2:	f000 fc87 	bl	8000f04 <__clzsi2>
 80005f6:	1f43      	subs	r3, r0, #5
 80005f8:	1836      	adds	r6, r6, r0
 80005fa:	409d      	lsls	r5, r3
 80005fc:	3676      	adds	r6, #118	; 0x76
 80005fe:	2100      	movs	r1, #0
 8000600:	e77d      	b.n	80004fe <__aeabi_fdiv+0x56>
 8000602:	2480      	movs	r4, #128	; 0x80
 8000604:	2300      	movs	r3, #0
 8000606:	03e4      	lsls	r4, r4, #15
 8000608:	22ff      	movs	r2, #255	; 0xff
 800060a:	e7ac      	b.n	8000566 <__aeabi_fdiv+0xbe>
 800060c:	2500      	movs	r5, #0
 800060e:	2380      	movs	r3, #128	; 0x80
 8000610:	03db      	lsls	r3, r3, #15
 8000612:	421c      	tst	r4, r3
 8000614:	d028      	beq.n	8000668 <__aeabi_fdiv+0x1c0>
 8000616:	421d      	tst	r5, r3
 8000618:	d126      	bne.n	8000668 <__aeabi_fdiv+0x1c0>
 800061a:	432b      	orrs	r3, r5
 800061c:	025c      	lsls	r4, r3, #9
 800061e:	0a64      	lsrs	r4, r4, #9
 8000620:	4643      	mov	r3, r8
 8000622:	22ff      	movs	r2, #255	; 0xff
 8000624:	e79f      	b.n	8000566 <__aeabi_fdiv+0xbe>
 8000626:	0162      	lsls	r2, r4, #5
 8000628:	016c      	lsls	r4, r5, #5
 800062a:	42a2      	cmp	r2, r4
 800062c:	d224      	bcs.n	8000678 <__aeabi_fdiv+0x1d0>
 800062e:	211b      	movs	r1, #27
 8000630:	2500      	movs	r5, #0
 8000632:	3e01      	subs	r6, #1
 8000634:	2701      	movs	r7, #1
 8000636:	0010      	movs	r0, r2
 8000638:	006d      	lsls	r5, r5, #1
 800063a:	0052      	lsls	r2, r2, #1
 800063c:	2800      	cmp	r0, #0
 800063e:	db01      	blt.n	8000644 <__aeabi_fdiv+0x19c>
 8000640:	4294      	cmp	r4, r2
 8000642:	d801      	bhi.n	8000648 <__aeabi_fdiv+0x1a0>
 8000644:	1b12      	subs	r2, r2, r4
 8000646:	433d      	orrs	r5, r7
 8000648:	3901      	subs	r1, #1
 800064a:	2900      	cmp	r1, #0
 800064c:	d1f3      	bne.n	8000636 <__aeabi_fdiv+0x18e>
 800064e:	0014      	movs	r4, r2
 8000650:	1e62      	subs	r2, r4, #1
 8000652:	4194      	sbcs	r4, r2
 8000654:	4325      	orrs	r5, r4
 8000656:	e76d      	b.n	8000534 <__aeabi_fdiv+0x8c>
 8000658:	46ba      	mov	sl, r7
 800065a:	4659      	mov	r1, fp
 800065c:	0025      	movs	r5, r4
 800065e:	4653      	mov	r3, sl
 8000660:	2902      	cmp	r1, #2
 8000662:	d000      	beq.n	8000666 <__aeabi_fdiv+0x1be>
 8000664:	e761      	b.n	800052a <__aeabi_fdiv+0x82>
 8000666:	e77c      	b.n	8000562 <__aeabi_fdiv+0xba>
 8000668:	2380      	movs	r3, #128	; 0x80
 800066a:	03db      	lsls	r3, r3, #15
 800066c:	431c      	orrs	r4, r3
 800066e:	0264      	lsls	r4, r4, #9
 8000670:	0a64      	lsrs	r4, r4, #9
 8000672:	003b      	movs	r3, r7
 8000674:	22ff      	movs	r2, #255	; 0xff
 8000676:	e776      	b.n	8000566 <__aeabi_fdiv+0xbe>
 8000678:	1b12      	subs	r2, r2, r4
 800067a:	211a      	movs	r1, #26
 800067c:	2501      	movs	r5, #1
 800067e:	e7d9      	b.n	8000634 <__aeabi_fdiv+0x18c>
 8000680:	369e      	adds	r6, #158	; 0x9e
 8000682:	002a      	movs	r2, r5
 8000684:	40b5      	lsls	r5, r6
 8000686:	002c      	movs	r4, r5
 8000688:	40c2      	lsrs	r2, r0
 800068a:	1e65      	subs	r5, r4, #1
 800068c:	41ac      	sbcs	r4, r5
 800068e:	4314      	orrs	r4, r2
 8000690:	0762      	lsls	r2, r4, #29
 8000692:	d004      	beq.n	800069e <__aeabi_fdiv+0x1f6>
 8000694:	220f      	movs	r2, #15
 8000696:	4022      	ands	r2, r4
 8000698:	2a04      	cmp	r2, #4
 800069a:	d000      	beq.n	800069e <__aeabi_fdiv+0x1f6>
 800069c:	3404      	adds	r4, #4
 800069e:	0162      	lsls	r2, r4, #5
 80006a0:	d403      	bmi.n	80006aa <__aeabi_fdiv+0x202>
 80006a2:	01a4      	lsls	r4, r4, #6
 80006a4:	0a64      	lsrs	r4, r4, #9
 80006a6:	2200      	movs	r2, #0
 80006a8:	e75d      	b.n	8000566 <__aeabi_fdiv+0xbe>
 80006aa:	2201      	movs	r2, #1
 80006ac:	2400      	movs	r4, #0
 80006ae:	e75a      	b.n	8000566 <__aeabi_fdiv+0xbe>
 80006b0:	2480      	movs	r4, #128	; 0x80
 80006b2:	03e4      	lsls	r4, r4, #15
 80006b4:	432c      	orrs	r4, r5
 80006b6:	0264      	lsls	r4, r4, #9
 80006b8:	0a64      	lsrs	r4, r4, #9
 80006ba:	22ff      	movs	r2, #255	; 0xff
 80006bc:	e753      	b.n	8000566 <__aeabi_fdiv+0xbe>
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	0800ad18 	.word	0x0800ad18
 80006c4:	f7ffffff 	.word	0xf7ffffff
 80006c8:	0800ad58 	.word	0x0800ad58

080006cc <__eqsf2>:
 80006cc:	b570      	push	{r4, r5, r6, lr}
 80006ce:	0042      	lsls	r2, r0, #1
 80006d0:	024e      	lsls	r6, r1, #9
 80006d2:	004c      	lsls	r4, r1, #1
 80006d4:	0245      	lsls	r5, r0, #9
 80006d6:	0a6d      	lsrs	r5, r5, #9
 80006d8:	0e12      	lsrs	r2, r2, #24
 80006da:	0fc3      	lsrs	r3, r0, #31
 80006dc:	0a76      	lsrs	r6, r6, #9
 80006de:	0e24      	lsrs	r4, r4, #24
 80006e0:	0fc9      	lsrs	r1, r1, #31
 80006e2:	2aff      	cmp	r2, #255	; 0xff
 80006e4:	d00f      	beq.n	8000706 <__eqsf2+0x3a>
 80006e6:	2cff      	cmp	r4, #255	; 0xff
 80006e8:	d011      	beq.n	800070e <__eqsf2+0x42>
 80006ea:	2001      	movs	r0, #1
 80006ec:	42a2      	cmp	r2, r4
 80006ee:	d000      	beq.n	80006f2 <__eqsf2+0x26>
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	42b5      	cmp	r5, r6
 80006f4:	d1fc      	bne.n	80006f0 <__eqsf2+0x24>
 80006f6:	428b      	cmp	r3, r1
 80006f8:	d00d      	beq.n	8000716 <__eqsf2+0x4a>
 80006fa:	2a00      	cmp	r2, #0
 80006fc:	d1f8      	bne.n	80006f0 <__eqsf2+0x24>
 80006fe:	0028      	movs	r0, r5
 8000700:	1e45      	subs	r5, r0, #1
 8000702:	41a8      	sbcs	r0, r5
 8000704:	e7f4      	b.n	80006f0 <__eqsf2+0x24>
 8000706:	2001      	movs	r0, #1
 8000708:	2d00      	cmp	r5, #0
 800070a:	d1f1      	bne.n	80006f0 <__eqsf2+0x24>
 800070c:	e7eb      	b.n	80006e6 <__eqsf2+0x1a>
 800070e:	2001      	movs	r0, #1
 8000710:	2e00      	cmp	r6, #0
 8000712:	d1ed      	bne.n	80006f0 <__eqsf2+0x24>
 8000714:	e7e9      	b.n	80006ea <__eqsf2+0x1e>
 8000716:	2000      	movs	r0, #0
 8000718:	e7ea      	b.n	80006f0 <__eqsf2+0x24>
 800071a:	46c0      	nop			; (mov r8, r8)

0800071c <__gesf2>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	004a      	lsls	r2, r1, #1
 8000720:	024e      	lsls	r6, r1, #9
 8000722:	0245      	lsls	r5, r0, #9
 8000724:	0044      	lsls	r4, r0, #1
 8000726:	0a6d      	lsrs	r5, r5, #9
 8000728:	0e24      	lsrs	r4, r4, #24
 800072a:	0fc3      	lsrs	r3, r0, #31
 800072c:	0a76      	lsrs	r6, r6, #9
 800072e:	0e12      	lsrs	r2, r2, #24
 8000730:	0fc9      	lsrs	r1, r1, #31
 8000732:	2cff      	cmp	r4, #255	; 0xff
 8000734:	d015      	beq.n	8000762 <__gesf2+0x46>
 8000736:	2aff      	cmp	r2, #255	; 0xff
 8000738:	d00e      	beq.n	8000758 <__gesf2+0x3c>
 800073a:	2c00      	cmp	r4, #0
 800073c:	d115      	bne.n	800076a <__gesf2+0x4e>
 800073e:	2a00      	cmp	r2, #0
 8000740:	d101      	bne.n	8000746 <__gesf2+0x2a>
 8000742:	2e00      	cmp	r6, #0
 8000744:	d01c      	beq.n	8000780 <__gesf2+0x64>
 8000746:	2d00      	cmp	r5, #0
 8000748:	d014      	beq.n	8000774 <__gesf2+0x58>
 800074a:	428b      	cmp	r3, r1
 800074c:	d027      	beq.n	800079e <__gesf2+0x82>
 800074e:	2002      	movs	r0, #2
 8000750:	3b01      	subs	r3, #1
 8000752:	4018      	ands	r0, r3
 8000754:	3801      	subs	r0, #1
 8000756:	bd70      	pop	{r4, r5, r6, pc}
 8000758:	2e00      	cmp	r6, #0
 800075a:	d0ee      	beq.n	800073a <__gesf2+0x1e>
 800075c:	2002      	movs	r0, #2
 800075e:	4240      	negs	r0, r0
 8000760:	e7f9      	b.n	8000756 <__gesf2+0x3a>
 8000762:	2d00      	cmp	r5, #0
 8000764:	d1fa      	bne.n	800075c <__gesf2+0x40>
 8000766:	2aff      	cmp	r2, #255	; 0xff
 8000768:	d00e      	beq.n	8000788 <__gesf2+0x6c>
 800076a:	2a00      	cmp	r2, #0
 800076c:	d10e      	bne.n	800078c <__gesf2+0x70>
 800076e:	2e00      	cmp	r6, #0
 8000770:	d0ed      	beq.n	800074e <__gesf2+0x32>
 8000772:	e00b      	b.n	800078c <__gesf2+0x70>
 8000774:	2301      	movs	r3, #1
 8000776:	3901      	subs	r1, #1
 8000778:	4399      	bics	r1, r3
 800077a:	0008      	movs	r0, r1
 800077c:	3001      	adds	r0, #1
 800077e:	e7ea      	b.n	8000756 <__gesf2+0x3a>
 8000780:	2000      	movs	r0, #0
 8000782:	2d00      	cmp	r5, #0
 8000784:	d0e7      	beq.n	8000756 <__gesf2+0x3a>
 8000786:	e7e2      	b.n	800074e <__gesf2+0x32>
 8000788:	2e00      	cmp	r6, #0
 800078a:	d1e7      	bne.n	800075c <__gesf2+0x40>
 800078c:	428b      	cmp	r3, r1
 800078e:	d1de      	bne.n	800074e <__gesf2+0x32>
 8000790:	4294      	cmp	r4, r2
 8000792:	dd05      	ble.n	80007a0 <__gesf2+0x84>
 8000794:	2102      	movs	r1, #2
 8000796:	1e58      	subs	r0, r3, #1
 8000798:	4008      	ands	r0, r1
 800079a:	3801      	subs	r0, #1
 800079c:	e7db      	b.n	8000756 <__gesf2+0x3a>
 800079e:	2400      	movs	r4, #0
 80007a0:	42a2      	cmp	r2, r4
 80007a2:	dc04      	bgt.n	80007ae <__gesf2+0x92>
 80007a4:	42b5      	cmp	r5, r6
 80007a6:	d8d2      	bhi.n	800074e <__gesf2+0x32>
 80007a8:	2000      	movs	r0, #0
 80007aa:	42b5      	cmp	r5, r6
 80007ac:	d2d3      	bcs.n	8000756 <__gesf2+0x3a>
 80007ae:	1e58      	subs	r0, r3, #1
 80007b0:	2301      	movs	r3, #1
 80007b2:	4398      	bics	r0, r3
 80007b4:	3001      	adds	r0, #1
 80007b6:	e7ce      	b.n	8000756 <__gesf2+0x3a>

080007b8 <__lesf2>:
 80007b8:	b530      	push	{r4, r5, lr}
 80007ba:	0042      	lsls	r2, r0, #1
 80007bc:	0244      	lsls	r4, r0, #9
 80007be:	024d      	lsls	r5, r1, #9
 80007c0:	0fc3      	lsrs	r3, r0, #31
 80007c2:	0048      	lsls	r0, r1, #1
 80007c4:	0a64      	lsrs	r4, r4, #9
 80007c6:	0e12      	lsrs	r2, r2, #24
 80007c8:	0a6d      	lsrs	r5, r5, #9
 80007ca:	0e00      	lsrs	r0, r0, #24
 80007cc:	0fc9      	lsrs	r1, r1, #31
 80007ce:	2aff      	cmp	r2, #255	; 0xff
 80007d0:	d012      	beq.n	80007f8 <__lesf2+0x40>
 80007d2:	28ff      	cmp	r0, #255	; 0xff
 80007d4:	d00c      	beq.n	80007f0 <__lesf2+0x38>
 80007d6:	2a00      	cmp	r2, #0
 80007d8:	d112      	bne.n	8000800 <__lesf2+0x48>
 80007da:	2800      	cmp	r0, #0
 80007dc:	d119      	bne.n	8000812 <__lesf2+0x5a>
 80007de:	2d00      	cmp	r5, #0
 80007e0:	d117      	bne.n	8000812 <__lesf2+0x5a>
 80007e2:	2c00      	cmp	r4, #0
 80007e4:	d02b      	beq.n	800083e <__lesf2+0x86>
 80007e6:	2002      	movs	r0, #2
 80007e8:	3b01      	subs	r3, #1
 80007ea:	4018      	ands	r0, r3
 80007ec:	3801      	subs	r0, #1
 80007ee:	e026      	b.n	800083e <__lesf2+0x86>
 80007f0:	2d00      	cmp	r5, #0
 80007f2:	d0f0      	beq.n	80007d6 <__lesf2+0x1e>
 80007f4:	2002      	movs	r0, #2
 80007f6:	e022      	b.n	800083e <__lesf2+0x86>
 80007f8:	2c00      	cmp	r4, #0
 80007fa:	d1fb      	bne.n	80007f4 <__lesf2+0x3c>
 80007fc:	28ff      	cmp	r0, #255	; 0xff
 80007fe:	d01f      	beq.n	8000840 <__lesf2+0x88>
 8000800:	2800      	cmp	r0, #0
 8000802:	d11f      	bne.n	8000844 <__lesf2+0x8c>
 8000804:	2d00      	cmp	r5, #0
 8000806:	d11d      	bne.n	8000844 <__lesf2+0x8c>
 8000808:	2002      	movs	r0, #2
 800080a:	3b01      	subs	r3, #1
 800080c:	4018      	ands	r0, r3
 800080e:	3801      	subs	r0, #1
 8000810:	e015      	b.n	800083e <__lesf2+0x86>
 8000812:	2c00      	cmp	r4, #0
 8000814:	d00e      	beq.n	8000834 <__lesf2+0x7c>
 8000816:	428b      	cmp	r3, r1
 8000818:	d1e5      	bne.n	80007e6 <__lesf2+0x2e>
 800081a:	2200      	movs	r2, #0
 800081c:	4290      	cmp	r0, r2
 800081e:	dc04      	bgt.n	800082a <__lesf2+0x72>
 8000820:	42ac      	cmp	r4, r5
 8000822:	d8e0      	bhi.n	80007e6 <__lesf2+0x2e>
 8000824:	2000      	movs	r0, #0
 8000826:	42ac      	cmp	r4, r5
 8000828:	d209      	bcs.n	800083e <__lesf2+0x86>
 800082a:	1e58      	subs	r0, r3, #1
 800082c:	2301      	movs	r3, #1
 800082e:	4398      	bics	r0, r3
 8000830:	3001      	adds	r0, #1
 8000832:	e004      	b.n	800083e <__lesf2+0x86>
 8000834:	2301      	movs	r3, #1
 8000836:	3901      	subs	r1, #1
 8000838:	4399      	bics	r1, r3
 800083a:	0008      	movs	r0, r1
 800083c:	3001      	adds	r0, #1
 800083e:	bd30      	pop	{r4, r5, pc}
 8000840:	2d00      	cmp	r5, #0
 8000842:	d1d7      	bne.n	80007f4 <__lesf2+0x3c>
 8000844:	428b      	cmp	r3, r1
 8000846:	d1ce      	bne.n	80007e6 <__lesf2+0x2e>
 8000848:	4282      	cmp	r2, r0
 800084a:	dde7      	ble.n	800081c <__lesf2+0x64>
 800084c:	2102      	movs	r1, #2
 800084e:	1e58      	subs	r0, r3, #1
 8000850:	4008      	ands	r0, r1
 8000852:	3801      	subs	r0, #1
 8000854:	e7f3      	b.n	800083e <__lesf2+0x86>
 8000856:	46c0      	nop			; (mov r8, r8)

08000858 <__aeabi_fmul>:
 8000858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800085a:	464e      	mov	r6, r9
 800085c:	4657      	mov	r7, sl
 800085e:	4645      	mov	r5, r8
 8000860:	46de      	mov	lr, fp
 8000862:	b5e0      	push	{r5, r6, r7, lr}
 8000864:	0243      	lsls	r3, r0, #9
 8000866:	0a5b      	lsrs	r3, r3, #9
 8000868:	0045      	lsls	r5, r0, #1
 800086a:	b083      	sub	sp, #12
 800086c:	1c0f      	adds	r7, r1, #0
 800086e:	4699      	mov	r9, r3
 8000870:	0e2d      	lsrs	r5, r5, #24
 8000872:	0fc6      	lsrs	r6, r0, #31
 8000874:	2d00      	cmp	r5, #0
 8000876:	d057      	beq.n	8000928 <__aeabi_fmul+0xd0>
 8000878:	2dff      	cmp	r5, #255	; 0xff
 800087a:	d024      	beq.n	80008c6 <__aeabi_fmul+0x6e>
 800087c:	2080      	movs	r0, #128	; 0x80
 800087e:	00db      	lsls	r3, r3, #3
 8000880:	04c0      	lsls	r0, r0, #19
 8000882:	4318      	orrs	r0, r3
 8000884:	2300      	movs	r3, #0
 8000886:	4681      	mov	r9, r0
 8000888:	469a      	mov	sl, r3
 800088a:	469b      	mov	fp, r3
 800088c:	3d7f      	subs	r5, #127	; 0x7f
 800088e:	027c      	lsls	r4, r7, #9
 8000890:	007a      	lsls	r2, r7, #1
 8000892:	0ffb      	lsrs	r3, r7, #31
 8000894:	0a64      	lsrs	r4, r4, #9
 8000896:	0e12      	lsrs	r2, r2, #24
 8000898:	4698      	mov	r8, r3
 800089a:	d023      	beq.n	80008e4 <__aeabi_fmul+0x8c>
 800089c:	2aff      	cmp	r2, #255	; 0xff
 800089e:	d04b      	beq.n	8000938 <__aeabi_fmul+0xe0>
 80008a0:	00e3      	lsls	r3, r4, #3
 80008a2:	2480      	movs	r4, #128	; 0x80
 80008a4:	2000      	movs	r0, #0
 80008a6:	04e4      	lsls	r4, r4, #19
 80008a8:	3a7f      	subs	r2, #127	; 0x7f
 80008aa:	431c      	orrs	r4, r3
 80008ac:	18ad      	adds	r5, r5, r2
 80008ae:	1c6b      	adds	r3, r5, #1
 80008b0:	4647      	mov	r7, r8
 80008b2:	9301      	str	r3, [sp, #4]
 80008b4:	4653      	mov	r3, sl
 80008b6:	4077      	eors	r7, r6
 80008b8:	003a      	movs	r2, r7
 80008ba:	2b0f      	cmp	r3, #15
 80008bc:	d848      	bhi.n	8000950 <__aeabi_fmul+0xf8>
 80008be:	497d      	ldr	r1, [pc, #500]	; (8000ab4 <__aeabi_fmul+0x25c>)
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	58cb      	ldr	r3, [r1, r3]
 80008c4:	469f      	mov	pc, r3
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d000      	beq.n	80008cc <__aeabi_fmul+0x74>
 80008ca:	e085      	b.n	80009d8 <__aeabi_fmul+0x180>
 80008cc:	3308      	adds	r3, #8
 80008ce:	469a      	mov	sl, r3
 80008d0:	3b06      	subs	r3, #6
 80008d2:	469b      	mov	fp, r3
 80008d4:	027c      	lsls	r4, r7, #9
 80008d6:	007a      	lsls	r2, r7, #1
 80008d8:	0ffb      	lsrs	r3, r7, #31
 80008da:	25ff      	movs	r5, #255	; 0xff
 80008dc:	0a64      	lsrs	r4, r4, #9
 80008de:	0e12      	lsrs	r2, r2, #24
 80008e0:	4698      	mov	r8, r3
 80008e2:	d1db      	bne.n	800089c <__aeabi_fmul+0x44>
 80008e4:	2c00      	cmp	r4, #0
 80008e6:	d000      	beq.n	80008ea <__aeabi_fmul+0x92>
 80008e8:	e090      	b.n	8000a0c <__aeabi_fmul+0x1b4>
 80008ea:	4652      	mov	r2, sl
 80008ec:	2301      	movs	r3, #1
 80008ee:	431a      	orrs	r2, r3
 80008f0:	4692      	mov	sl, r2
 80008f2:	2001      	movs	r0, #1
 80008f4:	e7db      	b.n	80008ae <__aeabi_fmul+0x56>
 80008f6:	464c      	mov	r4, r9
 80008f8:	4658      	mov	r0, fp
 80008fa:	0017      	movs	r7, r2
 80008fc:	2802      	cmp	r0, #2
 80008fe:	d024      	beq.n	800094a <__aeabi_fmul+0xf2>
 8000900:	2803      	cmp	r0, #3
 8000902:	d100      	bne.n	8000906 <__aeabi_fmul+0xae>
 8000904:	e0cf      	b.n	8000aa6 <__aeabi_fmul+0x24e>
 8000906:	2200      	movs	r2, #0
 8000908:	2300      	movs	r3, #0
 800090a:	2801      	cmp	r0, #1
 800090c:	d14d      	bne.n	80009aa <__aeabi_fmul+0x152>
 800090e:	0258      	lsls	r0, r3, #9
 8000910:	05d2      	lsls	r2, r2, #23
 8000912:	0a40      	lsrs	r0, r0, #9
 8000914:	07ff      	lsls	r7, r7, #31
 8000916:	4310      	orrs	r0, r2
 8000918:	4338      	orrs	r0, r7
 800091a:	b003      	add	sp, #12
 800091c:	bc3c      	pop	{r2, r3, r4, r5}
 800091e:	4690      	mov	r8, r2
 8000920:	4699      	mov	r9, r3
 8000922:	46a2      	mov	sl, r4
 8000924:	46ab      	mov	fp, r5
 8000926:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000928:	2b00      	cmp	r3, #0
 800092a:	d15b      	bne.n	80009e4 <__aeabi_fmul+0x18c>
 800092c:	2304      	movs	r3, #4
 800092e:	469a      	mov	sl, r3
 8000930:	3b03      	subs	r3, #3
 8000932:	2500      	movs	r5, #0
 8000934:	469b      	mov	fp, r3
 8000936:	e7aa      	b.n	800088e <__aeabi_fmul+0x36>
 8000938:	35ff      	adds	r5, #255	; 0xff
 800093a:	2c00      	cmp	r4, #0
 800093c:	d160      	bne.n	8000a00 <__aeabi_fmul+0x1a8>
 800093e:	4652      	mov	r2, sl
 8000940:	2302      	movs	r3, #2
 8000942:	431a      	orrs	r2, r3
 8000944:	4692      	mov	sl, r2
 8000946:	2002      	movs	r0, #2
 8000948:	e7b1      	b.n	80008ae <__aeabi_fmul+0x56>
 800094a:	22ff      	movs	r2, #255	; 0xff
 800094c:	2300      	movs	r3, #0
 800094e:	e7de      	b.n	800090e <__aeabi_fmul+0xb6>
 8000950:	464b      	mov	r3, r9
 8000952:	0c1b      	lsrs	r3, r3, #16
 8000954:	469c      	mov	ip, r3
 8000956:	464b      	mov	r3, r9
 8000958:	0426      	lsls	r6, r4, #16
 800095a:	0c36      	lsrs	r6, r6, #16
 800095c:	0418      	lsls	r0, r3, #16
 800095e:	4661      	mov	r1, ip
 8000960:	0033      	movs	r3, r6
 8000962:	0c22      	lsrs	r2, r4, #16
 8000964:	4664      	mov	r4, ip
 8000966:	0c00      	lsrs	r0, r0, #16
 8000968:	4343      	muls	r3, r0
 800096a:	434e      	muls	r6, r1
 800096c:	4350      	muls	r0, r2
 800096e:	4354      	muls	r4, r2
 8000970:	1980      	adds	r0, r0, r6
 8000972:	0c1a      	lsrs	r2, r3, #16
 8000974:	1812      	adds	r2, r2, r0
 8000976:	4296      	cmp	r6, r2
 8000978:	d903      	bls.n	8000982 <__aeabi_fmul+0x12a>
 800097a:	2180      	movs	r1, #128	; 0x80
 800097c:	0249      	lsls	r1, r1, #9
 800097e:	468c      	mov	ip, r1
 8000980:	4464      	add	r4, ip
 8000982:	041b      	lsls	r3, r3, #16
 8000984:	0c1b      	lsrs	r3, r3, #16
 8000986:	0410      	lsls	r0, r2, #16
 8000988:	18c0      	adds	r0, r0, r3
 800098a:	0183      	lsls	r3, r0, #6
 800098c:	1e5e      	subs	r6, r3, #1
 800098e:	41b3      	sbcs	r3, r6
 8000990:	0e80      	lsrs	r0, r0, #26
 8000992:	4318      	orrs	r0, r3
 8000994:	0c13      	lsrs	r3, r2, #16
 8000996:	191b      	adds	r3, r3, r4
 8000998:	019b      	lsls	r3, r3, #6
 800099a:	4303      	orrs	r3, r0
 800099c:	001c      	movs	r4, r3
 800099e:	0123      	lsls	r3, r4, #4
 80009a0:	d579      	bpl.n	8000a96 <__aeabi_fmul+0x23e>
 80009a2:	2301      	movs	r3, #1
 80009a4:	0862      	lsrs	r2, r4, #1
 80009a6:	401c      	ands	r4, r3
 80009a8:	4314      	orrs	r4, r2
 80009aa:	9a01      	ldr	r2, [sp, #4]
 80009ac:	327f      	adds	r2, #127	; 0x7f
 80009ae:	2a00      	cmp	r2, #0
 80009b0:	dd4d      	ble.n	8000a4e <__aeabi_fmul+0x1f6>
 80009b2:	0763      	lsls	r3, r4, #29
 80009b4:	d004      	beq.n	80009c0 <__aeabi_fmul+0x168>
 80009b6:	230f      	movs	r3, #15
 80009b8:	4023      	ands	r3, r4
 80009ba:	2b04      	cmp	r3, #4
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fmul+0x168>
 80009be:	3404      	adds	r4, #4
 80009c0:	0123      	lsls	r3, r4, #4
 80009c2:	d503      	bpl.n	80009cc <__aeabi_fmul+0x174>
 80009c4:	4b3c      	ldr	r3, [pc, #240]	; (8000ab8 <__aeabi_fmul+0x260>)
 80009c6:	9a01      	ldr	r2, [sp, #4]
 80009c8:	401c      	ands	r4, r3
 80009ca:	3280      	adds	r2, #128	; 0x80
 80009cc:	2afe      	cmp	r2, #254	; 0xfe
 80009ce:	dcbc      	bgt.n	800094a <__aeabi_fmul+0xf2>
 80009d0:	01a3      	lsls	r3, r4, #6
 80009d2:	0a5b      	lsrs	r3, r3, #9
 80009d4:	b2d2      	uxtb	r2, r2
 80009d6:	e79a      	b.n	800090e <__aeabi_fmul+0xb6>
 80009d8:	230c      	movs	r3, #12
 80009da:	469a      	mov	sl, r3
 80009dc:	3b09      	subs	r3, #9
 80009de:	25ff      	movs	r5, #255	; 0xff
 80009e0:	469b      	mov	fp, r3
 80009e2:	e754      	b.n	800088e <__aeabi_fmul+0x36>
 80009e4:	0018      	movs	r0, r3
 80009e6:	f000 fa8d 	bl	8000f04 <__clzsi2>
 80009ea:	464a      	mov	r2, r9
 80009ec:	1f43      	subs	r3, r0, #5
 80009ee:	2576      	movs	r5, #118	; 0x76
 80009f0:	409a      	lsls	r2, r3
 80009f2:	2300      	movs	r3, #0
 80009f4:	426d      	negs	r5, r5
 80009f6:	4691      	mov	r9, r2
 80009f8:	1a2d      	subs	r5, r5, r0
 80009fa:	469a      	mov	sl, r3
 80009fc:	469b      	mov	fp, r3
 80009fe:	e746      	b.n	800088e <__aeabi_fmul+0x36>
 8000a00:	4652      	mov	r2, sl
 8000a02:	2303      	movs	r3, #3
 8000a04:	431a      	orrs	r2, r3
 8000a06:	4692      	mov	sl, r2
 8000a08:	2003      	movs	r0, #3
 8000a0a:	e750      	b.n	80008ae <__aeabi_fmul+0x56>
 8000a0c:	0020      	movs	r0, r4
 8000a0e:	f000 fa79 	bl	8000f04 <__clzsi2>
 8000a12:	1f43      	subs	r3, r0, #5
 8000a14:	1a2d      	subs	r5, r5, r0
 8000a16:	409c      	lsls	r4, r3
 8000a18:	3d76      	subs	r5, #118	; 0x76
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	e747      	b.n	80008ae <__aeabi_fmul+0x56>
 8000a1e:	2380      	movs	r3, #128	; 0x80
 8000a20:	2700      	movs	r7, #0
 8000a22:	03db      	lsls	r3, r3, #15
 8000a24:	22ff      	movs	r2, #255	; 0xff
 8000a26:	e772      	b.n	800090e <__aeabi_fmul+0xb6>
 8000a28:	4642      	mov	r2, r8
 8000a2a:	e766      	b.n	80008fa <__aeabi_fmul+0xa2>
 8000a2c:	464c      	mov	r4, r9
 8000a2e:	0032      	movs	r2, r6
 8000a30:	4658      	mov	r0, fp
 8000a32:	e762      	b.n	80008fa <__aeabi_fmul+0xa2>
 8000a34:	2380      	movs	r3, #128	; 0x80
 8000a36:	464a      	mov	r2, r9
 8000a38:	03db      	lsls	r3, r3, #15
 8000a3a:	421a      	tst	r2, r3
 8000a3c:	d022      	beq.n	8000a84 <__aeabi_fmul+0x22c>
 8000a3e:	421c      	tst	r4, r3
 8000a40:	d120      	bne.n	8000a84 <__aeabi_fmul+0x22c>
 8000a42:	4323      	orrs	r3, r4
 8000a44:	025b      	lsls	r3, r3, #9
 8000a46:	0a5b      	lsrs	r3, r3, #9
 8000a48:	4647      	mov	r7, r8
 8000a4a:	22ff      	movs	r2, #255	; 0xff
 8000a4c:	e75f      	b.n	800090e <__aeabi_fmul+0xb6>
 8000a4e:	2301      	movs	r3, #1
 8000a50:	1a9a      	subs	r2, r3, r2
 8000a52:	2a1b      	cmp	r2, #27
 8000a54:	dc21      	bgt.n	8000a9a <__aeabi_fmul+0x242>
 8000a56:	0023      	movs	r3, r4
 8000a58:	9901      	ldr	r1, [sp, #4]
 8000a5a:	40d3      	lsrs	r3, r2
 8000a5c:	319e      	adds	r1, #158	; 0x9e
 8000a5e:	408c      	lsls	r4, r1
 8000a60:	001a      	movs	r2, r3
 8000a62:	0023      	movs	r3, r4
 8000a64:	1e5c      	subs	r4, r3, #1
 8000a66:	41a3      	sbcs	r3, r4
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	075a      	lsls	r2, r3, #29
 8000a6c:	d004      	beq.n	8000a78 <__aeabi_fmul+0x220>
 8000a6e:	220f      	movs	r2, #15
 8000a70:	401a      	ands	r2, r3
 8000a72:	2a04      	cmp	r2, #4
 8000a74:	d000      	beq.n	8000a78 <__aeabi_fmul+0x220>
 8000a76:	3304      	adds	r3, #4
 8000a78:	015a      	lsls	r2, r3, #5
 8000a7a:	d411      	bmi.n	8000aa0 <__aeabi_fmul+0x248>
 8000a7c:	019b      	lsls	r3, r3, #6
 8000a7e:	0a5b      	lsrs	r3, r3, #9
 8000a80:	2200      	movs	r2, #0
 8000a82:	e744      	b.n	800090e <__aeabi_fmul+0xb6>
 8000a84:	2380      	movs	r3, #128	; 0x80
 8000a86:	464a      	mov	r2, r9
 8000a88:	03db      	lsls	r3, r3, #15
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	025b      	lsls	r3, r3, #9
 8000a8e:	0a5b      	lsrs	r3, r3, #9
 8000a90:	0037      	movs	r7, r6
 8000a92:	22ff      	movs	r2, #255	; 0xff
 8000a94:	e73b      	b.n	800090e <__aeabi_fmul+0xb6>
 8000a96:	9501      	str	r5, [sp, #4]
 8000a98:	e787      	b.n	80009aa <__aeabi_fmul+0x152>
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	e736      	b.n	800090e <__aeabi_fmul+0xb6>
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	e733      	b.n	800090e <__aeabi_fmul+0xb6>
 8000aa6:	2380      	movs	r3, #128	; 0x80
 8000aa8:	03db      	lsls	r3, r3, #15
 8000aaa:	4323      	orrs	r3, r4
 8000aac:	025b      	lsls	r3, r3, #9
 8000aae:	0a5b      	lsrs	r3, r3, #9
 8000ab0:	22ff      	movs	r2, #255	; 0xff
 8000ab2:	e72c      	b.n	800090e <__aeabi_fmul+0xb6>
 8000ab4:	0800ad98 	.word	0x0800ad98
 8000ab8:	f7ffffff 	.word	0xf7ffffff

08000abc <__aeabi_fsub>:
 8000abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000abe:	4647      	mov	r7, r8
 8000ac0:	46ce      	mov	lr, r9
 8000ac2:	0044      	lsls	r4, r0, #1
 8000ac4:	0fc2      	lsrs	r2, r0, #31
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	0247      	lsls	r7, r0, #9
 8000aca:	0248      	lsls	r0, r1, #9
 8000acc:	0a40      	lsrs	r0, r0, #9
 8000ace:	4684      	mov	ip, r0
 8000ad0:	4666      	mov	r6, ip
 8000ad2:	0048      	lsls	r0, r1, #1
 8000ad4:	0a7f      	lsrs	r7, r7, #9
 8000ad6:	0e24      	lsrs	r4, r4, #24
 8000ad8:	00f6      	lsls	r6, r6, #3
 8000ada:	0025      	movs	r5, r4
 8000adc:	4690      	mov	r8, r2
 8000ade:	00fb      	lsls	r3, r7, #3
 8000ae0:	0e00      	lsrs	r0, r0, #24
 8000ae2:	0fc9      	lsrs	r1, r1, #31
 8000ae4:	46b1      	mov	r9, r6
 8000ae6:	28ff      	cmp	r0, #255	; 0xff
 8000ae8:	d100      	bne.n	8000aec <__aeabi_fsub+0x30>
 8000aea:	e085      	b.n	8000bf8 <__aeabi_fsub+0x13c>
 8000aec:	2601      	movs	r6, #1
 8000aee:	4071      	eors	r1, r6
 8000af0:	1a26      	subs	r6, r4, r0
 8000af2:	4291      	cmp	r1, r2
 8000af4:	d057      	beq.n	8000ba6 <__aeabi_fsub+0xea>
 8000af6:	2e00      	cmp	r6, #0
 8000af8:	dd43      	ble.n	8000b82 <__aeabi_fsub+0xc6>
 8000afa:	2800      	cmp	r0, #0
 8000afc:	d000      	beq.n	8000b00 <__aeabi_fsub+0x44>
 8000afe:	e07f      	b.n	8000c00 <__aeabi_fsub+0x144>
 8000b00:	4649      	mov	r1, r9
 8000b02:	2900      	cmp	r1, #0
 8000b04:	d100      	bne.n	8000b08 <__aeabi_fsub+0x4c>
 8000b06:	e0aa      	b.n	8000c5e <__aeabi_fsub+0x1a2>
 8000b08:	3e01      	subs	r6, #1
 8000b0a:	2e00      	cmp	r6, #0
 8000b0c:	d000      	beq.n	8000b10 <__aeabi_fsub+0x54>
 8000b0e:	e0f7      	b.n	8000d00 <__aeabi_fsub+0x244>
 8000b10:	1a5b      	subs	r3, r3, r1
 8000b12:	015a      	lsls	r2, r3, #5
 8000b14:	d400      	bmi.n	8000b18 <__aeabi_fsub+0x5c>
 8000b16:	e08b      	b.n	8000c30 <__aeabi_fsub+0x174>
 8000b18:	019b      	lsls	r3, r3, #6
 8000b1a:	099c      	lsrs	r4, r3, #6
 8000b1c:	0020      	movs	r0, r4
 8000b1e:	f000 f9f1 	bl	8000f04 <__clzsi2>
 8000b22:	3805      	subs	r0, #5
 8000b24:	4084      	lsls	r4, r0
 8000b26:	4285      	cmp	r5, r0
 8000b28:	dd00      	ble.n	8000b2c <__aeabi_fsub+0x70>
 8000b2a:	e0d3      	b.n	8000cd4 <__aeabi_fsub+0x218>
 8000b2c:	1b45      	subs	r5, r0, r5
 8000b2e:	0023      	movs	r3, r4
 8000b30:	2020      	movs	r0, #32
 8000b32:	3501      	adds	r5, #1
 8000b34:	40eb      	lsrs	r3, r5
 8000b36:	1b45      	subs	r5, r0, r5
 8000b38:	40ac      	lsls	r4, r5
 8000b3a:	1e62      	subs	r2, r4, #1
 8000b3c:	4194      	sbcs	r4, r2
 8000b3e:	4323      	orrs	r3, r4
 8000b40:	2407      	movs	r4, #7
 8000b42:	2500      	movs	r5, #0
 8000b44:	401c      	ands	r4, r3
 8000b46:	2201      	movs	r2, #1
 8000b48:	4641      	mov	r1, r8
 8000b4a:	400a      	ands	r2, r1
 8000b4c:	2c00      	cmp	r4, #0
 8000b4e:	d004      	beq.n	8000b5a <__aeabi_fsub+0x9e>
 8000b50:	210f      	movs	r1, #15
 8000b52:	4019      	ands	r1, r3
 8000b54:	2904      	cmp	r1, #4
 8000b56:	d000      	beq.n	8000b5a <__aeabi_fsub+0x9e>
 8000b58:	3304      	adds	r3, #4
 8000b5a:	0159      	lsls	r1, r3, #5
 8000b5c:	d400      	bmi.n	8000b60 <__aeabi_fsub+0xa4>
 8000b5e:	e080      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000b60:	3501      	adds	r5, #1
 8000b62:	b2ec      	uxtb	r4, r5
 8000b64:	2dff      	cmp	r5, #255	; 0xff
 8000b66:	d000      	beq.n	8000b6a <__aeabi_fsub+0xae>
 8000b68:	e0a3      	b.n	8000cb2 <__aeabi_fsub+0x1f6>
 8000b6a:	24ff      	movs	r4, #255	; 0xff
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	025b      	lsls	r3, r3, #9
 8000b70:	05e4      	lsls	r4, r4, #23
 8000b72:	0a58      	lsrs	r0, r3, #9
 8000b74:	07d2      	lsls	r2, r2, #31
 8000b76:	4320      	orrs	r0, r4
 8000b78:	4310      	orrs	r0, r2
 8000b7a:	bc0c      	pop	{r2, r3}
 8000b7c:	4690      	mov	r8, r2
 8000b7e:	4699      	mov	r9, r3
 8000b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b82:	2e00      	cmp	r6, #0
 8000b84:	d174      	bne.n	8000c70 <__aeabi_fsub+0x1b4>
 8000b86:	1c60      	adds	r0, r4, #1
 8000b88:	b2c0      	uxtb	r0, r0
 8000b8a:	2801      	cmp	r0, #1
 8000b8c:	dc00      	bgt.n	8000b90 <__aeabi_fsub+0xd4>
 8000b8e:	e0a7      	b.n	8000ce0 <__aeabi_fsub+0x224>
 8000b90:	464a      	mov	r2, r9
 8000b92:	1a9c      	subs	r4, r3, r2
 8000b94:	0162      	lsls	r2, r4, #5
 8000b96:	d500      	bpl.n	8000b9a <__aeabi_fsub+0xde>
 8000b98:	e0b6      	b.n	8000d08 <__aeabi_fsub+0x24c>
 8000b9a:	2c00      	cmp	r4, #0
 8000b9c:	d1be      	bne.n	8000b1c <__aeabi_fsub+0x60>
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2400      	movs	r4, #0
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	e7e3      	b.n	8000b6e <__aeabi_fsub+0xb2>
 8000ba6:	2e00      	cmp	r6, #0
 8000ba8:	dc00      	bgt.n	8000bac <__aeabi_fsub+0xf0>
 8000baa:	e085      	b.n	8000cb8 <__aeabi_fsub+0x1fc>
 8000bac:	2800      	cmp	r0, #0
 8000bae:	d046      	beq.n	8000c3e <__aeabi_fsub+0x182>
 8000bb0:	2cff      	cmp	r4, #255	; 0xff
 8000bb2:	d049      	beq.n	8000c48 <__aeabi_fsub+0x18c>
 8000bb4:	2280      	movs	r2, #128	; 0x80
 8000bb6:	4648      	mov	r0, r9
 8000bb8:	04d2      	lsls	r2, r2, #19
 8000bba:	4310      	orrs	r0, r2
 8000bbc:	4681      	mov	r9, r0
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	2e1b      	cmp	r6, #27
 8000bc2:	dc09      	bgt.n	8000bd8 <__aeabi_fsub+0x11c>
 8000bc4:	2020      	movs	r0, #32
 8000bc6:	464c      	mov	r4, r9
 8000bc8:	1b80      	subs	r0, r0, r6
 8000bca:	4084      	lsls	r4, r0
 8000bcc:	464a      	mov	r2, r9
 8000bce:	0020      	movs	r0, r4
 8000bd0:	40f2      	lsrs	r2, r6
 8000bd2:	1e44      	subs	r4, r0, #1
 8000bd4:	41a0      	sbcs	r0, r4
 8000bd6:	4302      	orrs	r2, r0
 8000bd8:	189b      	adds	r3, r3, r2
 8000bda:	015a      	lsls	r2, r3, #5
 8000bdc:	d528      	bpl.n	8000c30 <__aeabi_fsub+0x174>
 8000bde:	3501      	adds	r5, #1
 8000be0:	2dff      	cmp	r5, #255	; 0xff
 8000be2:	d100      	bne.n	8000be6 <__aeabi_fsub+0x12a>
 8000be4:	e0a8      	b.n	8000d38 <__aeabi_fsub+0x27c>
 8000be6:	2201      	movs	r2, #1
 8000be8:	2407      	movs	r4, #7
 8000bea:	4994      	ldr	r1, [pc, #592]	; (8000e3c <__aeabi_fsub+0x380>)
 8000bec:	401a      	ands	r2, r3
 8000bee:	085b      	lsrs	r3, r3, #1
 8000bf0:	400b      	ands	r3, r1
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	401c      	ands	r4, r3
 8000bf6:	e7a6      	b.n	8000b46 <__aeabi_fsub+0x8a>
 8000bf8:	2e00      	cmp	r6, #0
 8000bfa:	d000      	beq.n	8000bfe <__aeabi_fsub+0x142>
 8000bfc:	e778      	b.n	8000af0 <__aeabi_fsub+0x34>
 8000bfe:	e775      	b.n	8000aec <__aeabi_fsub+0x30>
 8000c00:	2cff      	cmp	r4, #255	; 0xff
 8000c02:	d054      	beq.n	8000cae <__aeabi_fsub+0x1f2>
 8000c04:	2280      	movs	r2, #128	; 0x80
 8000c06:	4649      	mov	r1, r9
 8000c08:	04d2      	lsls	r2, r2, #19
 8000c0a:	4311      	orrs	r1, r2
 8000c0c:	4689      	mov	r9, r1
 8000c0e:	2201      	movs	r2, #1
 8000c10:	2e1b      	cmp	r6, #27
 8000c12:	dc09      	bgt.n	8000c28 <__aeabi_fsub+0x16c>
 8000c14:	2120      	movs	r1, #32
 8000c16:	4648      	mov	r0, r9
 8000c18:	1b89      	subs	r1, r1, r6
 8000c1a:	4088      	lsls	r0, r1
 8000c1c:	464a      	mov	r2, r9
 8000c1e:	0001      	movs	r1, r0
 8000c20:	40f2      	lsrs	r2, r6
 8000c22:	1e48      	subs	r0, r1, #1
 8000c24:	4181      	sbcs	r1, r0
 8000c26:	430a      	orrs	r2, r1
 8000c28:	1a9b      	subs	r3, r3, r2
 8000c2a:	015a      	lsls	r2, r3, #5
 8000c2c:	d500      	bpl.n	8000c30 <__aeabi_fsub+0x174>
 8000c2e:	e773      	b.n	8000b18 <__aeabi_fsub+0x5c>
 8000c30:	2201      	movs	r2, #1
 8000c32:	4641      	mov	r1, r8
 8000c34:	400a      	ands	r2, r1
 8000c36:	0759      	lsls	r1, r3, #29
 8000c38:	d000      	beq.n	8000c3c <__aeabi_fsub+0x180>
 8000c3a:	e789      	b.n	8000b50 <__aeabi_fsub+0x94>
 8000c3c:	e011      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000c3e:	4648      	mov	r0, r9
 8000c40:	2800      	cmp	r0, #0
 8000c42:	d158      	bne.n	8000cf6 <__aeabi_fsub+0x23a>
 8000c44:	2cff      	cmp	r4, #255	; 0xff
 8000c46:	d10c      	bne.n	8000c62 <__aeabi_fsub+0x1a6>
 8000c48:	08db      	lsrs	r3, r3, #3
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d100      	bne.n	8000c50 <__aeabi_fsub+0x194>
 8000c4e:	e78c      	b.n	8000b6a <__aeabi_fsub+0xae>
 8000c50:	2080      	movs	r0, #128	; 0x80
 8000c52:	03c0      	lsls	r0, r0, #15
 8000c54:	4303      	orrs	r3, r0
 8000c56:	025b      	lsls	r3, r3, #9
 8000c58:	0a5b      	lsrs	r3, r3, #9
 8000c5a:	24ff      	movs	r4, #255	; 0xff
 8000c5c:	e787      	b.n	8000b6e <__aeabi_fsub+0xb2>
 8000c5e:	2cff      	cmp	r4, #255	; 0xff
 8000c60:	d025      	beq.n	8000cae <__aeabi_fsub+0x1f2>
 8000c62:	08db      	lsrs	r3, r3, #3
 8000c64:	2dff      	cmp	r5, #255	; 0xff
 8000c66:	d0f0      	beq.n	8000c4a <__aeabi_fsub+0x18e>
 8000c68:	025b      	lsls	r3, r3, #9
 8000c6a:	0a5b      	lsrs	r3, r3, #9
 8000c6c:	b2ec      	uxtb	r4, r5
 8000c6e:	e77e      	b.n	8000b6e <__aeabi_fsub+0xb2>
 8000c70:	2c00      	cmp	r4, #0
 8000c72:	d04d      	beq.n	8000d10 <__aeabi_fsub+0x254>
 8000c74:	28ff      	cmp	r0, #255	; 0xff
 8000c76:	d018      	beq.n	8000caa <__aeabi_fsub+0x1ee>
 8000c78:	2480      	movs	r4, #128	; 0x80
 8000c7a:	04e4      	lsls	r4, r4, #19
 8000c7c:	4272      	negs	r2, r6
 8000c7e:	4323      	orrs	r3, r4
 8000c80:	2a1b      	cmp	r2, #27
 8000c82:	dd00      	ble.n	8000c86 <__aeabi_fsub+0x1ca>
 8000c84:	e0c4      	b.n	8000e10 <__aeabi_fsub+0x354>
 8000c86:	001c      	movs	r4, r3
 8000c88:	2520      	movs	r5, #32
 8000c8a:	40d4      	lsrs	r4, r2
 8000c8c:	1aaa      	subs	r2, r5, r2
 8000c8e:	4093      	lsls	r3, r2
 8000c90:	1e5a      	subs	r2, r3, #1
 8000c92:	4193      	sbcs	r3, r2
 8000c94:	4323      	orrs	r3, r4
 8000c96:	464a      	mov	r2, r9
 8000c98:	0005      	movs	r5, r0
 8000c9a:	1ad3      	subs	r3, r2, r3
 8000c9c:	4688      	mov	r8, r1
 8000c9e:	e738      	b.n	8000b12 <__aeabi_fsub+0x56>
 8000ca0:	1c72      	adds	r2, r6, #1
 8000ca2:	d0f8      	beq.n	8000c96 <__aeabi_fsub+0x1da>
 8000ca4:	43f2      	mvns	r2, r6
 8000ca6:	28ff      	cmp	r0, #255	; 0xff
 8000ca8:	d1ea      	bne.n	8000c80 <__aeabi_fsub+0x1c4>
 8000caa:	000a      	movs	r2, r1
 8000cac:	464b      	mov	r3, r9
 8000cae:	25ff      	movs	r5, #255	; 0xff
 8000cb0:	e7d7      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000cb2:	019b      	lsls	r3, r3, #6
 8000cb4:	0a5b      	lsrs	r3, r3, #9
 8000cb6:	e75a      	b.n	8000b6e <__aeabi_fsub+0xb2>
 8000cb8:	2e00      	cmp	r6, #0
 8000cba:	d141      	bne.n	8000d40 <__aeabi_fsub+0x284>
 8000cbc:	1c65      	adds	r5, r4, #1
 8000cbe:	b2e9      	uxtb	r1, r5
 8000cc0:	2901      	cmp	r1, #1
 8000cc2:	dd45      	ble.n	8000d50 <__aeabi_fsub+0x294>
 8000cc4:	2dff      	cmp	r5, #255	; 0xff
 8000cc6:	d100      	bne.n	8000cca <__aeabi_fsub+0x20e>
 8000cc8:	e74f      	b.n	8000b6a <__aeabi_fsub+0xae>
 8000cca:	2407      	movs	r4, #7
 8000ccc:	444b      	add	r3, r9
 8000cce:	085b      	lsrs	r3, r3, #1
 8000cd0:	401c      	ands	r4, r3
 8000cd2:	e738      	b.n	8000b46 <__aeabi_fsub+0x8a>
 8000cd4:	2207      	movs	r2, #7
 8000cd6:	4b5a      	ldr	r3, [pc, #360]	; (8000e40 <__aeabi_fsub+0x384>)
 8000cd8:	1a2d      	subs	r5, r5, r0
 8000cda:	4023      	ands	r3, r4
 8000cdc:	4014      	ands	r4, r2
 8000cde:	e732      	b.n	8000b46 <__aeabi_fsub+0x8a>
 8000ce0:	2c00      	cmp	r4, #0
 8000ce2:	d11d      	bne.n	8000d20 <__aeabi_fsub+0x264>
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d17a      	bne.n	8000dde <__aeabi_fsub+0x322>
 8000ce8:	464b      	mov	r3, r9
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d100      	bne.n	8000cf0 <__aeabi_fsub+0x234>
 8000cee:	e091      	b.n	8000e14 <__aeabi_fsub+0x358>
 8000cf0:	000a      	movs	r2, r1
 8000cf2:	2500      	movs	r5, #0
 8000cf4:	e7b5      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000cf6:	3e01      	subs	r6, #1
 8000cf8:	2e00      	cmp	r6, #0
 8000cfa:	d119      	bne.n	8000d30 <__aeabi_fsub+0x274>
 8000cfc:	444b      	add	r3, r9
 8000cfe:	e76c      	b.n	8000bda <__aeabi_fsub+0x11e>
 8000d00:	2cff      	cmp	r4, #255	; 0xff
 8000d02:	d184      	bne.n	8000c0e <__aeabi_fsub+0x152>
 8000d04:	25ff      	movs	r5, #255	; 0xff
 8000d06:	e7ac      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000d08:	464a      	mov	r2, r9
 8000d0a:	4688      	mov	r8, r1
 8000d0c:	1ad4      	subs	r4, r2, r3
 8000d0e:	e705      	b.n	8000b1c <__aeabi_fsub+0x60>
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d1c5      	bne.n	8000ca0 <__aeabi_fsub+0x1e4>
 8000d14:	000a      	movs	r2, r1
 8000d16:	28ff      	cmp	r0, #255	; 0xff
 8000d18:	d0c8      	beq.n	8000cac <__aeabi_fsub+0x1f0>
 8000d1a:	0005      	movs	r5, r0
 8000d1c:	464b      	mov	r3, r9
 8000d1e:	e7a0      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d149      	bne.n	8000db8 <__aeabi_fsub+0x2fc>
 8000d24:	464b      	mov	r3, r9
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d077      	beq.n	8000e1a <__aeabi_fsub+0x35e>
 8000d2a:	000a      	movs	r2, r1
 8000d2c:	25ff      	movs	r5, #255	; 0xff
 8000d2e:	e798      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000d30:	2cff      	cmp	r4, #255	; 0xff
 8000d32:	d000      	beq.n	8000d36 <__aeabi_fsub+0x27a>
 8000d34:	e743      	b.n	8000bbe <__aeabi_fsub+0x102>
 8000d36:	e787      	b.n	8000c48 <__aeabi_fsub+0x18c>
 8000d38:	000a      	movs	r2, r1
 8000d3a:	24ff      	movs	r4, #255	; 0xff
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	e716      	b.n	8000b6e <__aeabi_fsub+0xb2>
 8000d40:	2c00      	cmp	r4, #0
 8000d42:	d115      	bne.n	8000d70 <__aeabi_fsub+0x2b4>
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d157      	bne.n	8000df8 <__aeabi_fsub+0x33c>
 8000d48:	28ff      	cmp	r0, #255	; 0xff
 8000d4a:	d1e6      	bne.n	8000d1a <__aeabi_fsub+0x25e>
 8000d4c:	464b      	mov	r3, r9
 8000d4e:	e77b      	b.n	8000c48 <__aeabi_fsub+0x18c>
 8000d50:	2c00      	cmp	r4, #0
 8000d52:	d120      	bne.n	8000d96 <__aeabi_fsub+0x2da>
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d057      	beq.n	8000e08 <__aeabi_fsub+0x34c>
 8000d58:	4649      	mov	r1, r9
 8000d5a:	2900      	cmp	r1, #0
 8000d5c:	d053      	beq.n	8000e06 <__aeabi_fsub+0x34a>
 8000d5e:	444b      	add	r3, r9
 8000d60:	015a      	lsls	r2, r3, #5
 8000d62:	d568      	bpl.n	8000e36 <__aeabi_fsub+0x37a>
 8000d64:	2407      	movs	r4, #7
 8000d66:	4a36      	ldr	r2, [pc, #216]	; (8000e40 <__aeabi_fsub+0x384>)
 8000d68:	401c      	ands	r4, r3
 8000d6a:	2501      	movs	r5, #1
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	e6ea      	b.n	8000b46 <__aeabi_fsub+0x8a>
 8000d70:	28ff      	cmp	r0, #255	; 0xff
 8000d72:	d0eb      	beq.n	8000d4c <__aeabi_fsub+0x290>
 8000d74:	2280      	movs	r2, #128	; 0x80
 8000d76:	04d2      	lsls	r2, r2, #19
 8000d78:	4276      	negs	r6, r6
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	2e1b      	cmp	r6, #27
 8000d7e:	dc53      	bgt.n	8000e28 <__aeabi_fsub+0x36c>
 8000d80:	2520      	movs	r5, #32
 8000d82:	1bad      	subs	r5, r5, r6
 8000d84:	001a      	movs	r2, r3
 8000d86:	40ab      	lsls	r3, r5
 8000d88:	40f2      	lsrs	r2, r6
 8000d8a:	1e5c      	subs	r4, r3, #1
 8000d8c:	41a3      	sbcs	r3, r4
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	444b      	add	r3, r9
 8000d92:	0005      	movs	r5, r0
 8000d94:	e721      	b.n	8000bda <__aeabi_fsub+0x11e>
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d0d8      	beq.n	8000d4c <__aeabi_fsub+0x290>
 8000d9a:	4649      	mov	r1, r9
 8000d9c:	2900      	cmp	r1, #0
 8000d9e:	d100      	bne.n	8000da2 <__aeabi_fsub+0x2e6>
 8000da0:	e752      	b.n	8000c48 <__aeabi_fsub+0x18c>
 8000da2:	2180      	movs	r1, #128	; 0x80
 8000da4:	03c9      	lsls	r1, r1, #15
 8000da6:	420f      	tst	r7, r1
 8000da8:	d100      	bne.n	8000dac <__aeabi_fsub+0x2f0>
 8000daa:	e74d      	b.n	8000c48 <__aeabi_fsub+0x18c>
 8000dac:	4660      	mov	r0, ip
 8000dae:	4208      	tst	r0, r1
 8000db0:	d000      	beq.n	8000db4 <__aeabi_fsub+0x2f8>
 8000db2:	e749      	b.n	8000c48 <__aeabi_fsub+0x18c>
 8000db4:	464b      	mov	r3, r9
 8000db6:	e747      	b.n	8000c48 <__aeabi_fsub+0x18c>
 8000db8:	4648      	mov	r0, r9
 8000dba:	25ff      	movs	r5, #255	; 0xff
 8000dbc:	2800      	cmp	r0, #0
 8000dbe:	d100      	bne.n	8000dc2 <__aeabi_fsub+0x306>
 8000dc0:	e74f      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000dc2:	2280      	movs	r2, #128	; 0x80
 8000dc4:	03d2      	lsls	r2, r2, #15
 8000dc6:	4217      	tst	r7, r2
 8000dc8:	d004      	beq.n	8000dd4 <__aeabi_fsub+0x318>
 8000dca:	4660      	mov	r0, ip
 8000dcc:	4210      	tst	r0, r2
 8000dce:	d101      	bne.n	8000dd4 <__aeabi_fsub+0x318>
 8000dd0:	464b      	mov	r3, r9
 8000dd2:	4688      	mov	r8, r1
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	4641      	mov	r1, r8
 8000dd8:	25ff      	movs	r5, #255	; 0xff
 8000dda:	400a      	ands	r2, r1
 8000ddc:	e741      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000dde:	4648      	mov	r0, r9
 8000de0:	2800      	cmp	r0, #0
 8000de2:	d01f      	beq.n	8000e24 <__aeabi_fsub+0x368>
 8000de4:	1a1a      	subs	r2, r3, r0
 8000de6:	0150      	lsls	r0, r2, #5
 8000de8:	d520      	bpl.n	8000e2c <__aeabi_fsub+0x370>
 8000dea:	464a      	mov	r2, r9
 8000dec:	2407      	movs	r4, #7
 8000dee:	1ad3      	subs	r3, r2, r3
 8000df0:	401c      	ands	r4, r3
 8000df2:	4688      	mov	r8, r1
 8000df4:	2500      	movs	r5, #0
 8000df6:	e6a6      	b.n	8000b46 <__aeabi_fsub+0x8a>
 8000df8:	1c74      	adds	r4, r6, #1
 8000dfa:	d0c9      	beq.n	8000d90 <__aeabi_fsub+0x2d4>
 8000dfc:	43f6      	mvns	r6, r6
 8000dfe:	28ff      	cmp	r0, #255	; 0xff
 8000e00:	d1bc      	bne.n	8000d7c <__aeabi_fsub+0x2c0>
 8000e02:	464b      	mov	r3, r9
 8000e04:	e720      	b.n	8000c48 <__aeabi_fsub+0x18c>
 8000e06:	4699      	mov	r9, r3
 8000e08:	464b      	mov	r3, r9
 8000e0a:	2500      	movs	r5, #0
 8000e0c:	08db      	lsrs	r3, r3, #3
 8000e0e:	e72b      	b.n	8000c68 <__aeabi_fsub+0x1ac>
 8000e10:	2301      	movs	r3, #1
 8000e12:	e740      	b.n	8000c96 <__aeabi_fsub+0x1da>
 8000e14:	2200      	movs	r2, #0
 8000e16:	2300      	movs	r3, #0
 8000e18:	e6a9      	b.n	8000b6e <__aeabi_fsub+0xb2>
 8000e1a:	2380      	movs	r3, #128	; 0x80
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	03db      	lsls	r3, r3, #15
 8000e20:	24ff      	movs	r4, #255	; 0xff
 8000e22:	e6a4      	b.n	8000b6e <__aeabi_fsub+0xb2>
 8000e24:	2500      	movs	r5, #0
 8000e26:	e71c      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000e28:	2301      	movs	r3, #1
 8000e2a:	e7b1      	b.n	8000d90 <__aeabi_fsub+0x2d4>
 8000e2c:	2a00      	cmp	r2, #0
 8000e2e:	d0f1      	beq.n	8000e14 <__aeabi_fsub+0x358>
 8000e30:	0013      	movs	r3, r2
 8000e32:	2500      	movs	r5, #0
 8000e34:	e6fc      	b.n	8000c30 <__aeabi_fsub+0x174>
 8000e36:	2500      	movs	r5, #0
 8000e38:	e6fa      	b.n	8000c30 <__aeabi_fsub+0x174>
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	7dffffff 	.word	0x7dffffff
 8000e40:	fbffffff 	.word	0xfbffffff

08000e44 <__aeabi_f2iz>:
 8000e44:	0241      	lsls	r1, r0, #9
 8000e46:	0042      	lsls	r2, r0, #1
 8000e48:	0fc3      	lsrs	r3, r0, #31
 8000e4a:	0a49      	lsrs	r1, r1, #9
 8000e4c:	0e12      	lsrs	r2, r2, #24
 8000e4e:	2000      	movs	r0, #0
 8000e50:	2a7e      	cmp	r2, #126	; 0x7e
 8000e52:	d90d      	bls.n	8000e70 <__aeabi_f2iz+0x2c>
 8000e54:	2a9d      	cmp	r2, #157	; 0x9d
 8000e56:	d80c      	bhi.n	8000e72 <__aeabi_f2iz+0x2e>
 8000e58:	2080      	movs	r0, #128	; 0x80
 8000e5a:	0400      	lsls	r0, r0, #16
 8000e5c:	4301      	orrs	r1, r0
 8000e5e:	2a95      	cmp	r2, #149	; 0x95
 8000e60:	dc0a      	bgt.n	8000e78 <__aeabi_f2iz+0x34>
 8000e62:	2096      	movs	r0, #150	; 0x96
 8000e64:	1a82      	subs	r2, r0, r2
 8000e66:	40d1      	lsrs	r1, r2
 8000e68:	4248      	negs	r0, r1
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d100      	bne.n	8000e70 <__aeabi_f2iz+0x2c>
 8000e6e:	0008      	movs	r0, r1
 8000e70:	4770      	bx	lr
 8000e72:	4a03      	ldr	r2, [pc, #12]	; (8000e80 <__aeabi_f2iz+0x3c>)
 8000e74:	1898      	adds	r0, r3, r2
 8000e76:	e7fb      	b.n	8000e70 <__aeabi_f2iz+0x2c>
 8000e78:	3a96      	subs	r2, #150	; 0x96
 8000e7a:	4091      	lsls	r1, r2
 8000e7c:	e7f4      	b.n	8000e68 <__aeabi_f2iz+0x24>
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	7fffffff 	.word	0x7fffffff

08000e84 <__aeabi_ui2f>:
 8000e84:	b570      	push	{r4, r5, r6, lr}
 8000e86:	1e04      	subs	r4, r0, #0
 8000e88:	d034      	beq.n	8000ef4 <__aeabi_ui2f+0x70>
 8000e8a:	f000 f83b 	bl	8000f04 <__clzsi2>
 8000e8e:	229e      	movs	r2, #158	; 0x9e
 8000e90:	1a12      	subs	r2, r2, r0
 8000e92:	2a96      	cmp	r2, #150	; 0x96
 8000e94:	dc07      	bgt.n	8000ea6 <__aeabi_ui2f+0x22>
 8000e96:	b2d2      	uxtb	r2, r2
 8000e98:	2808      	cmp	r0, #8
 8000e9a:	dd2e      	ble.n	8000efa <__aeabi_ui2f+0x76>
 8000e9c:	3808      	subs	r0, #8
 8000e9e:	4084      	lsls	r4, r0
 8000ea0:	0260      	lsls	r0, r4, #9
 8000ea2:	0a40      	lsrs	r0, r0, #9
 8000ea4:	e021      	b.n	8000eea <__aeabi_ui2f+0x66>
 8000ea6:	2a99      	cmp	r2, #153	; 0x99
 8000ea8:	dd09      	ble.n	8000ebe <__aeabi_ui2f+0x3a>
 8000eaa:	0003      	movs	r3, r0
 8000eac:	0021      	movs	r1, r4
 8000eae:	331b      	adds	r3, #27
 8000eb0:	4099      	lsls	r1, r3
 8000eb2:	1e4b      	subs	r3, r1, #1
 8000eb4:	4199      	sbcs	r1, r3
 8000eb6:	2305      	movs	r3, #5
 8000eb8:	1a1b      	subs	r3, r3, r0
 8000eba:	40dc      	lsrs	r4, r3
 8000ebc:	430c      	orrs	r4, r1
 8000ebe:	2805      	cmp	r0, #5
 8000ec0:	dd01      	ble.n	8000ec6 <__aeabi_ui2f+0x42>
 8000ec2:	1f43      	subs	r3, r0, #5
 8000ec4:	409c      	lsls	r4, r3
 8000ec6:	0023      	movs	r3, r4
 8000ec8:	490d      	ldr	r1, [pc, #52]	; (8000f00 <__aeabi_ui2f+0x7c>)
 8000eca:	400b      	ands	r3, r1
 8000ecc:	0765      	lsls	r5, r4, #29
 8000ece:	d009      	beq.n	8000ee4 <__aeabi_ui2f+0x60>
 8000ed0:	250f      	movs	r5, #15
 8000ed2:	402c      	ands	r4, r5
 8000ed4:	2c04      	cmp	r4, #4
 8000ed6:	d005      	beq.n	8000ee4 <__aeabi_ui2f+0x60>
 8000ed8:	3304      	adds	r3, #4
 8000eda:	015c      	lsls	r4, r3, #5
 8000edc:	d502      	bpl.n	8000ee4 <__aeabi_ui2f+0x60>
 8000ede:	229f      	movs	r2, #159	; 0x9f
 8000ee0:	400b      	ands	r3, r1
 8000ee2:	1a12      	subs	r2, r2, r0
 8000ee4:	019b      	lsls	r3, r3, #6
 8000ee6:	0a58      	lsrs	r0, r3, #9
 8000ee8:	b2d2      	uxtb	r2, r2
 8000eea:	0240      	lsls	r0, r0, #9
 8000eec:	05d2      	lsls	r2, r2, #23
 8000eee:	0a40      	lsrs	r0, r0, #9
 8000ef0:	4310      	orrs	r0, r2
 8000ef2:	bd70      	pop	{r4, r5, r6, pc}
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	e7f7      	b.n	8000eea <__aeabi_ui2f+0x66>
 8000efa:	0260      	lsls	r0, r4, #9
 8000efc:	0a40      	lsrs	r0, r0, #9
 8000efe:	e7f4      	b.n	8000eea <__aeabi_ui2f+0x66>
 8000f00:	fbffffff 	.word	0xfbffffff

08000f04 <__clzsi2>:
 8000f04:	211c      	movs	r1, #28
 8000f06:	2301      	movs	r3, #1
 8000f08:	041b      	lsls	r3, r3, #16
 8000f0a:	4298      	cmp	r0, r3
 8000f0c:	d301      	bcc.n	8000f12 <__clzsi2+0xe>
 8000f0e:	0c00      	lsrs	r0, r0, #16
 8000f10:	3910      	subs	r1, #16
 8000f12:	0a1b      	lsrs	r3, r3, #8
 8000f14:	4298      	cmp	r0, r3
 8000f16:	d301      	bcc.n	8000f1c <__clzsi2+0x18>
 8000f18:	0a00      	lsrs	r0, r0, #8
 8000f1a:	3908      	subs	r1, #8
 8000f1c:	091b      	lsrs	r3, r3, #4
 8000f1e:	4298      	cmp	r0, r3
 8000f20:	d301      	bcc.n	8000f26 <__clzsi2+0x22>
 8000f22:	0900      	lsrs	r0, r0, #4
 8000f24:	3904      	subs	r1, #4
 8000f26:	a202      	add	r2, pc, #8	; (adr r2, 8000f30 <__clzsi2+0x2c>)
 8000f28:	5c10      	ldrb	r0, [r2, r0]
 8000f2a:	1840      	adds	r0, r0, r1
 8000f2c:	4770      	bx	lr
 8000f2e:	46c0      	nop			; (mov r8, r8)
 8000f30:	02020304 	.word	0x02020304
 8000f34:	01010101 	.word	0x01010101
	...

08000f40 <SPI_CS_LOW>:
static uint8_t textSize;		// size of characters
static uint16_t textColor;		// color of characters
static uint16_t bg;				// background color

// ---- lower level functions ----
void SPI_CS_LOW() {HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);}
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	2380      	movs	r3, #128	; 0x80
 8000f46:	015b      	lsls	r3, r3, #5
 8000f48:	4803      	ldr	r0, [pc, #12]	; (8000f58 <SPI_CS_LOW+0x18>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	0019      	movs	r1, r3
 8000f4e:	f005 fe20 	bl	8006b92 <HAL_GPIO_WritePin>
 8000f52:	46c0      	nop			; (mov r8, r8)
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	50000400 	.word	0x50000400

08000f5c <SPI_CS_HIGH>:
void SPI_CS_HIGH() {HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);}
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	2380      	movs	r3, #128	; 0x80
 8000f62:	015b      	lsls	r3, r3, #5
 8000f64:	4803      	ldr	r0, [pc, #12]	; (8000f74 <SPI_CS_HIGH+0x18>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	0019      	movs	r1, r3
 8000f6a:	f005 fe12 	bl	8006b92 <HAL_GPIO_WritePin>
 8000f6e:	46c0      	nop			; (mov r8, r8)
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	50000400 	.word	0x50000400

08000f78 <SPI_DC_LOW>:
void SPI_DC_LOW() {HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);}
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	2380      	movs	r3, #128	; 0x80
 8000f7e:	01db      	lsls	r3, r3, #7
 8000f80:	4803      	ldr	r0, [pc, #12]	; (8000f90 <SPI_DC_LOW+0x18>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	0019      	movs	r1, r3
 8000f86:	f005 fe04 	bl	8006b92 <HAL_GPIO_WritePin>
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	50000400 	.word	0x50000400

08000f94 <SPI_DC_HIGH>:
void SPI_DC_HIGH() {HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);}
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	2380      	movs	r3, #128	; 0x80
 8000f9a:	01db      	lsls	r3, r3, #7
 8000f9c:	4803      	ldr	r0, [pc, #12]	; (8000fac <SPI_DC_HIGH+0x18>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	0019      	movs	r1, r3
 8000fa2:	f005 fdf6 	bl	8006b92 <HAL_GPIO_WritePin>
 8000fa6:	46c0      	nop			; (mov r8, r8)
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	50000400 	.word	0x50000400

08000fb0 <sendCommand>:

void sendCommand(uint8_t cmd, uint8_t *args, uint16_t numArgs, SPI_HandleTypeDef *hspi) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60b9      	str	r1, [r7, #8]
 8000fb8:	0011      	movs	r1, r2
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	230f      	movs	r3, #15
 8000fbe:	18fb      	adds	r3, r7, r3
 8000fc0:	1c02      	adds	r2, r0, #0
 8000fc2:	701a      	strb	r2, [r3, #0]
 8000fc4:	230c      	movs	r3, #12
 8000fc6:	18fb      	adds	r3, r7, r3
 8000fc8:	1c0a      	adds	r2, r1, #0
 8000fca:	801a      	strh	r2, [r3, #0]
	while (HAL_SPI_GetState(hspi) == HAL_SPI_STATE_BUSY_TX);		// block next transfer request while DMA transfer is ongoing
 8000fcc:	46c0      	nop			; (mov r8, r8)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	f007 ffef 	bl	8008fb4 <HAL_SPI_GetState>
 8000fd6:	0003      	movs	r3, r0
 8000fd8:	2b03      	cmp	r3, #3
 8000fda:	d0f8      	beq.n	8000fce <sendCommand+0x1e>
	SPI_CS_LOW();	// chip select
 8000fdc:	f7ff ffb0 	bl	8000f40 <SPI_CS_LOW>

	SPI_DC_LOW();	// command mode
 8000fe0:	f7ff ffca 	bl	8000f78 <SPI_DC_LOW>
	HAL_SPI_Transmit(hspi, &cmd, 1, 1000);	// not using DMA bc it's only 1 byte
 8000fe4:	23fa      	movs	r3, #250	; 0xfa
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	220f      	movs	r2, #15
 8000fea:	18b9      	adds	r1, r7, r2
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	2201      	movs	r2, #1
 8000ff0:	f007 fcfe 	bl	80089f0 <HAL_SPI_Transmit>

	SPI_DC_HIGH();	// data mode
 8000ff4:	f7ff ffce 	bl	8000f94 <SPI_DC_HIGH>
	if (numArgs) {
 8000ff8:	230c      	movs	r3, #12
 8000ffa:	18fb      	adds	r3, r7, r3
 8000ffc:	881b      	ldrh	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d007      	beq.n	8001012 <sendCommand+0x62>
		HAL_SPI_Transmit_IT(hspi, args, numArgs);
 8001002:	230c      	movs	r3, #12
 8001004:	18fb      	adds	r3, r7, r3
 8001006:	881a      	ldrh	r2, [r3, #0]
 8001008:	68b9      	ldr	r1, [r7, #8]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	0018      	movs	r0, r3
 800100e:	f007 fe3d 	bl	8008c8c <HAL_SPI_Transmit_IT>
	}
}
 8001012:	46c0      	nop			; (mov r8, r8)
 8001014:	46bd      	mov	sp, r7
 8001016:	b004      	add	sp, #16
 8001018:	bd80      	pop	{r7, pc}
	...

0800101c <HAL_SPI_TxCpltCallback>:

// using only for sending data, but not commands
// dont send request when transfer is ongoing
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(CS_PORT, CS_PIN) == GPIO_PIN_RESET) SPI_CS_HIGH();	// chip select disable
 8001024:	2380      	movs	r3, #128	; 0x80
 8001026:	015b      	lsls	r3, r3, #5
 8001028:	4a06      	ldr	r2, [pc, #24]	; (8001044 <HAL_SPI_TxCpltCallback+0x28>)
 800102a:	0019      	movs	r1, r3
 800102c:	0010      	movs	r0, r2
 800102e:	f005 fd93 	bl	8006b58 <HAL_GPIO_ReadPin>
 8001032:	1e03      	subs	r3, r0, #0
 8001034:	d101      	bne.n	800103a <HAL_SPI_TxCpltCallback+0x1e>
 8001036:	f7ff ff91 	bl	8000f5c <SPI_CS_HIGH>
}
 800103a:	46c0      	nop			; (mov r8, r8)
 800103c:	46bd      	mov	sp, r7
 800103e:	b002      	add	sp, #8
 8001040:	bd80      	pop	{r7, pc}
 8001042:	46c0      	nop			; (mov r8, r8)
 8001044:	50000400 	.word	0x50000400

08001048 <displayInit>:

// array parser heavily based on Adafruit library code
void displayInit(uint8_t *args, SPI_HandleTypeDef *hspi) {
 8001048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
	uint8_t  numCommands, cmd, numArgs;
	uint16_t ms;
	uint8_t index = 0;
 8001052:	220b      	movs	r2, #11
 8001054:	0011      	movs	r1, r2
 8001056:	18bb      	adds	r3, r7, r2
 8001058:	2200      	movs	r2, #0
 800105a:	701a      	strb	r2, [r3, #0]
	uint8_t data;

	numCommands = args[index++];			// Number of commands to follow
 800105c:	000a      	movs	r2, r1
 800105e:	18bb      	adds	r3, r7, r2
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	18ba      	adds	r2, r7, r2
 8001064:	1c59      	adds	r1, r3, #1
 8001066:	7011      	strb	r1, [r2, #0]
 8001068:	001a      	movs	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	189a      	adds	r2, r3, r2
 800106e:	230f      	movs	r3, #15
 8001070:	18fb      	adds	r3, r7, r3
 8001072:	7812      	ldrb	r2, [r2, #0]
 8001074:	701a      	strb	r2, [r3, #0]
	while(numCommands--) {					// For each command...
 8001076:	e05e      	b.n	8001136 <displayInit+0xee>
		cmd = args[index++];				// Read command
 8001078:	200b      	movs	r0, #11
 800107a:	183b      	adds	r3, r7, r0
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	183a      	adds	r2, r7, r0
 8001080:	1c59      	adds	r1, r3, #1
 8001082:	7011      	strb	r1, [r2, #0]
 8001084:	001a      	movs	r2, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	189a      	adds	r2, r3, r2
 800108a:	230a      	movs	r3, #10
 800108c:	18fb      	adds	r3, r7, r3
 800108e:	7812      	ldrb	r2, [r2, #0]
 8001090:	701a      	strb	r2, [r3, #0]
		numArgs  = args[index++];			// Number of args to follow
 8001092:	183b      	adds	r3, r7, r0
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	183a      	adds	r2, r7, r0
 8001098:	1c59      	adds	r1, r3, #1
 800109a:	7011      	strb	r1, [r2, #0]
 800109c:	001a      	movs	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	189a      	adds	r2, r3, r2
 80010a2:	2609      	movs	r6, #9
 80010a4:	19bb      	adds	r3, r7, r6
 80010a6:	7812      	ldrb	r2, [r2, #0]
 80010a8:	701a      	strb	r2, [r3, #0]
		ms       = numArgs & ST_CMD_DELAY;	// If hibit set, delay follows args
 80010aa:	19bb      	adds	r3, r7, r6
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	210c      	movs	r1, #12
 80010b2:	187b      	adds	r3, r7, r1
 80010b4:	2180      	movs	r1, #128	; 0x80
 80010b6:	400a      	ands	r2, r1
 80010b8:	801a      	strh	r2, [r3, #0]
		numArgs &= ~ST_CMD_DELAY;			// Mask out delay bit
 80010ba:	19bb      	adds	r3, r7, r6
 80010bc:	19ba      	adds	r2, r7, r6
 80010be:	7812      	ldrb	r2, [r2, #0]
 80010c0:	217f      	movs	r1, #127	; 0x7f
 80010c2:	400a      	ands	r2, r1
 80010c4:	701a      	strb	r2, [r3, #0]
		sendCommand(cmd, &args[index], numArgs, hspi);
 80010c6:	0005      	movs	r5, r0
 80010c8:	183b      	adds	r3, r7, r0
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	18d1      	adds	r1, r2, r3
 80010d0:	19bb      	adds	r3, r7, r6
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	b29a      	uxth	r2, r3
 80010d6:	683c      	ldr	r4, [r7, #0]
 80010d8:	230a      	movs	r3, #10
 80010da:	18fb      	adds	r3, r7, r3
 80010dc:	7818      	ldrb	r0, [r3, #0]
 80010de:	0023      	movs	r3, r4
 80010e0:	f7ff ff66 	bl	8000fb0 <sendCommand>
		index += numArgs;
 80010e4:	0028      	movs	r0, r5
 80010e6:	183b      	adds	r3, r7, r0
 80010e8:	1839      	adds	r1, r7, r0
 80010ea:	19ba      	adds	r2, r7, r6
 80010ec:	7809      	ldrb	r1, [r1, #0]
 80010ee:	7812      	ldrb	r2, [r2, #0]
 80010f0:	188a      	adds	r2, r1, r2
 80010f2:	701a      	strb	r2, [r3, #0]

		if(ms) {
 80010f4:	210c      	movs	r1, #12
 80010f6:	187b      	adds	r3, r7, r1
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d01b      	beq.n	8001136 <displayInit+0xee>
			ms = args[index++];			// Read post-command delay time (ms)
 80010fe:	220b      	movs	r2, #11
 8001100:	18bb      	adds	r3, r7, r2
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	18ba      	adds	r2, r7, r2
 8001106:	1c59      	adds	r1, r3, #1
 8001108:	7011      	strb	r1, [r2, #0]
 800110a:	001a      	movs	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	189b      	adds	r3, r3, r2
 8001110:	781a      	ldrb	r2, [r3, #0]
 8001112:	210c      	movs	r1, #12
 8001114:	187b      	adds	r3, r7, r1
 8001116:	801a      	strh	r2, [r3, #0]
			if(ms == 255) ms = 500;		// If 255, delay for 500 ms
 8001118:	187b      	adds	r3, r7, r1
 800111a:	881b      	ldrh	r3, [r3, #0]
 800111c:	2bff      	cmp	r3, #255	; 0xff
 800111e:	d104      	bne.n	800112a <displayInit+0xe2>
 8001120:	230c      	movs	r3, #12
 8001122:	18fb      	adds	r3, r7, r3
 8001124:	22fa      	movs	r2, #250	; 0xfa
 8001126:	0052      	lsls	r2, r2, #1
 8001128:	801a      	strh	r2, [r3, #0]
			HAL_Delay(ms);
 800112a:	230c      	movs	r3, #12
 800112c:	18fb      	adds	r3, r7, r3
 800112e:	881b      	ldrh	r3, [r3, #0]
 8001130:	0018      	movs	r0, r3
 8001132:	f004 fefd 	bl	8005f30 <HAL_Delay>
	while(numCommands--) {					// For each command...
 8001136:	220f      	movs	r2, #15
 8001138:	18bb      	adds	r3, r7, r2
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	18ba      	adds	r2, r7, r2
 800113e:	1e59      	subs	r1, r3, #1
 8001140:	7011      	strb	r1, [r2, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d198      	bne.n	8001078 <displayInit+0x30>
		}
	}

	data = 0xC0;
 8001146:	2108      	movs	r1, #8
 8001148:	187b      	adds	r3, r7, r1
 800114a:	22c0      	movs	r2, #192	; 0xc0
 800114c:	701a      	strb	r2, [r3, #0]
	sendCommand(ST77XX_MADCTL, &data, 1, hspi);
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	1879      	adds	r1, r7, r1
 8001152:	2201      	movs	r2, #1
 8001154:	2036      	movs	r0, #54	; 0x36
 8001156:	f7ff ff2b 	bl	8000fb0 <sendCommand>
}
 800115a:	46c0      	nop			; (mov r8, r8)
 800115c:	46bd      	mov	sp, r7
 800115e:	b005      	add	sp, #20
 8001160:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001164 <TFT_startup>:

void TFT_startup(SPI_HandleTypeDef *hspi) {
 8001164:	b590      	push	{r4, r7, lr}
 8001166:	b0a3      	sub	sp, #140	; 0x8c
 8001168:	af02      	add	r7, sp, #8
 800116a:	6078      	str	r0, [r7, #4]
	// array pulled from Adafruit's library for ST7735R driver
	uint8_t initCommands[] = {
 800116c:	240c      	movs	r4, #12
 800116e:	193a      	adds	r2, r7, r4
 8001170:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <TFT_startup+0x60>)
 8001172:	0010      	movs	r0, r2
 8001174:	0019      	movs	r1, r3
 8001176:	2371      	movs	r3, #113	; 0x71
 8001178:	001a      	movs	r2, r3
 800117a:	f009 f867 	bl	800a24c <memcpy>
			10,                         //     10 ms delay
		ST77XX_DISPON,    ST_CMD_DELAY, //  4: Main screen turn on, no args w/delay
			100	                        //     100 ms delay
	};

	displayInit(initCommands, hspi);
 800117e:	687a      	ldr	r2, [r7, #4]
 8001180:	193b      	adds	r3, r7, r4
 8001182:	0011      	movs	r1, r2
 8001184:	0018      	movs	r0, r3
 8001186:	f7ff ff5f 	bl	8001048 <displayInit>
	setAddrWindow(0, 0, WIDTH, HEIGHT, hspi);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	23a0      	movs	r3, #160	; 0xa0
 8001190:	2280      	movs	r2, #128	; 0x80
 8001192:	2100      	movs	r1, #0
 8001194:	2000      	movs	r0, #0
 8001196:	f000 f821 	bl	80011dc <setAddrWindow>

	// set the global variables
	cursorX = 0;
 800119a:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <TFT_startup+0x64>)
 800119c:	2200      	movs	r2, #0
 800119e:	701a      	strb	r2, [r3, #0]
	cursorY = 0;
 80011a0:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <TFT_startup+0x68>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	701a      	strb	r2, [r3, #0]
	textSize = 1;
 80011a6:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <TFT_startup+0x6c>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	701a      	strb	r2, [r3, #0]
	textColor = ST77XX_BLACK;
 80011ac:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <TFT_startup+0x70>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	801a      	strh	r2, [r3, #0]
	bg = ST77XX_WHITE;
 80011b2:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <TFT_startup+0x74>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	4252      	negs	r2, r2
 80011b8:	801a      	strh	r2, [r3, #0]
}
 80011ba:	46c0      	nop			; (mov r8, r8)
 80011bc:	46bd      	mov	sp, r7
 80011be:	b021      	add	sp, #132	; 0x84
 80011c0:	bd90      	pop	{r4, r7, pc}
 80011c2:	46c0      	nop			; (mov r8, r8)
 80011c4:	0800aaa0 	.word	0x0800aaa0
 80011c8:	200000ec 	.word	0x200000ec
 80011cc:	200000ed 	.word	0x200000ed
 80011d0:	200000ee 	.word	0x200000ee
 80011d4:	200000f0 	.word	0x200000f0
 80011d8:	200000f2 	.word	0x200000f2

080011dc <setAddrWindow>:

// draw something: set addr window -> write to ram memory
// sets specific area on display to write pixels to
// x and y for upper left corner, w for width, h for height
void setAddrWindow(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SPI_HandleTypeDef *hspi) {
 80011dc:	b5b0      	push	{r4, r5, r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	0005      	movs	r5, r0
 80011e4:	000c      	movs	r4, r1
 80011e6:	0010      	movs	r0, r2
 80011e8:	0019      	movs	r1, r3
 80011ea:	1dbb      	adds	r3, r7, #6
 80011ec:	1c2a      	adds	r2, r5, #0
 80011ee:	801a      	strh	r2, [r3, #0]
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	1c22      	adds	r2, r4, #0
 80011f4:	801a      	strh	r2, [r3, #0]
 80011f6:	1cbb      	adds	r3, r7, #2
 80011f8:	1c02      	adds	r2, r0, #0
 80011fa:	801a      	strh	r2, [r3, #0]
 80011fc:	003b      	movs	r3, r7
 80011fe:	1c0a      	adds	r2, r1, #0
 8001200:	801a      	strh	r2, [r3, #0]
	// building 32-bit window args
	uint8_t temp[4];
	temp[0] = (x & (0xFF00)) >> 8;
 8001202:	1dbb      	adds	r3, r7, #6
 8001204:	881b      	ldrh	r3, [r3, #0]
 8001206:	0a1b      	lsrs	r3, r3, #8
 8001208:	b29b      	uxth	r3, r3
 800120a:	b2da      	uxtb	r2, r3
 800120c:	210c      	movs	r1, #12
 800120e:	187b      	adds	r3, r7, r1
 8001210:	701a      	strb	r2, [r3, #0]
	temp[1] = x & (0xFF);
 8001212:	1dbb      	adds	r3, r7, #6
 8001214:	881b      	ldrh	r3, [r3, #0]
 8001216:	b2da      	uxtb	r2, r3
 8001218:	187b      	adds	r3, r7, r1
 800121a:	705a      	strb	r2, [r3, #1]
	temp[2] = ((x+w-1) & (0xFF00)) >> 8;
 800121c:	1dbb      	adds	r3, r7, #6
 800121e:	881a      	ldrh	r2, [r3, #0]
 8001220:	1cbb      	adds	r3, r7, #2
 8001222:	881b      	ldrh	r3, [r3, #0]
 8001224:	18d3      	adds	r3, r2, r3
 8001226:	3b01      	subs	r3, #1
 8001228:	121b      	asrs	r3, r3, #8
 800122a:	b2da      	uxtb	r2, r3
 800122c:	187b      	adds	r3, r7, r1
 800122e:	709a      	strb	r2, [r3, #2]
	temp[3] = (x+w-1) & (0xFF);
 8001230:	1dbb      	adds	r3, r7, #6
 8001232:	881b      	ldrh	r3, [r3, #0]
 8001234:	b2da      	uxtb	r2, r3
 8001236:	1cbb      	adds	r3, r7, #2
 8001238:	881b      	ldrh	r3, [r3, #0]
 800123a:	b2db      	uxtb	r3, r3
 800123c:	18d3      	adds	r3, r2, r3
 800123e:	b2db      	uxtb	r3, r3
 8001240:	3b01      	subs	r3, #1
 8001242:	b2da      	uxtb	r2, r3
 8001244:	187b      	adds	r3, r7, r1
 8001246:	70da      	strb	r2, [r3, #3]
	sendCommand(ST77XX_CASET, temp, 4, hspi);
 8001248:	6a3b      	ldr	r3, [r7, #32]
 800124a:	000c      	movs	r4, r1
 800124c:	1879      	adds	r1, r7, r1
 800124e:	2204      	movs	r2, #4
 8001250:	202a      	movs	r0, #42	; 0x2a
 8001252:	f7ff fead 	bl	8000fb0 <sendCommand>

	temp[0] = (y & (0xFF00)) >> 8;
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	881b      	ldrh	r3, [r3, #0]
 800125a:	0a1b      	lsrs	r3, r3, #8
 800125c:	b29b      	uxth	r3, r3
 800125e:	b2da      	uxtb	r2, r3
 8001260:	0021      	movs	r1, r4
 8001262:	187b      	adds	r3, r7, r1
 8001264:	701a      	strb	r2, [r3, #0]
	temp[1] = y & (0xFF);
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	881b      	ldrh	r3, [r3, #0]
 800126a:	b2da      	uxtb	r2, r3
 800126c:	187b      	adds	r3, r7, r1
 800126e:	705a      	strb	r2, [r3, #1]
	temp[2] = ((y+h-1) & (0xFF00)) >> 8;
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	881a      	ldrh	r2, [r3, #0]
 8001274:	003b      	movs	r3, r7
 8001276:	881b      	ldrh	r3, [r3, #0]
 8001278:	18d3      	adds	r3, r2, r3
 800127a:	3b01      	subs	r3, #1
 800127c:	121b      	asrs	r3, r3, #8
 800127e:	b2da      	uxtb	r2, r3
 8001280:	187b      	adds	r3, r7, r1
 8001282:	709a      	strb	r2, [r3, #2]
	temp[3] = (y+h-1) & (0x00FF);
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	881b      	ldrh	r3, [r3, #0]
 8001288:	b2da      	uxtb	r2, r3
 800128a:	003b      	movs	r3, r7
 800128c:	881b      	ldrh	r3, [r3, #0]
 800128e:	b2db      	uxtb	r3, r3
 8001290:	18d3      	adds	r3, r2, r3
 8001292:	b2db      	uxtb	r3, r3
 8001294:	3b01      	subs	r3, #1
 8001296:	b2da      	uxtb	r2, r3
 8001298:	187b      	adds	r3, r7, r1
 800129a:	70da      	strb	r2, [r3, #3]
	sendCommand(ST77XX_RASET, temp, 4, hspi);
 800129c:	6a3b      	ldr	r3, [r7, #32]
 800129e:	1879      	adds	r1, r7, r1
 80012a0:	2204      	movs	r2, #4
 80012a2:	202b      	movs	r0, #43	; 0x2b
 80012a4:	f7ff fe84 	bl	8000fb0 <sendCommand>
}
 80012a8:	46c0      	nop			; (mov r8, r8)
 80012aa:	46bd      	mov	sp, r7
 80012ac:	b004      	add	sp, #16
 80012ae:	bdb0      	pop	{r4, r5, r7, pc}

080012b0 <colorFixer>:
// 8-bit spi bus wants msb first; in array, lowest index is sent first
// because ARM is little-endian
//   for 16-bit value, it sends lower byte before upper byte
//   resulting in device thinking lower byte is upper byte
// this switches byte order around
uint16_t colorFixer(uint16_t color) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	0002      	movs	r2, r0
 80012b8:	1dbb      	adds	r3, r7, #6
 80012ba:	801a      	strh	r2, [r3, #0]
	uint8_t a = color & 0xFF;
 80012bc:	210f      	movs	r1, #15
 80012be:	187b      	adds	r3, r7, r1
 80012c0:	1dba      	adds	r2, r7, #6
 80012c2:	8812      	ldrh	r2, [r2, #0]
 80012c4:	701a      	strb	r2, [r3, #0]
	uint8_t b = (color & 0xFF00) >> 8;
 80012c6:	1dbb      	adds	r3, r7, #6
 80012c8:	881b      	ldrh	r3, [r3, #0]
 80012ca:	0a1b      	lsrs	r3, r3, #8
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	200e      	movs	r0, #14
 80012d0:	183b      	adds	r3, r7, r0
 80012d2:	701a      	strb	r2, [r3, #0]
	uint16_t ret = (a << 8) | b;
 80012d4:	187b      	adds	r3, r7, r1
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	021b      	lsls	r3, r3, #8
 80012da:	b21a      	sxth	r2, r3
 80012dc:	183b      	adds	r3, r7, r0
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	b21b      	sxth	r3, r3
 80012e2:	4313      	orrs	r3, r2
 80012e4:	b21a      	sxth	r2, r3
 80012e6:	210c      	movs	r1, #12
 80012e8:	187b      	adds	r3, r7, r1
 80012ea:	801a      	strh	r2, [r3, #0]

	return ret;
 80012ec:	187b      	adds	r3, r7, r1
 80012ee:	881b      	ldrh	r3, [r3, #0]
}
 80012f0:	0018      	movs	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	b004      	add	sp, #16
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <drawHLine>:
	uint16_t tempColor = colorFixer(color);		// else we're using address of something passed by value
	sendCommand(ST77XX_RAMWR, &tempColor, 2, hspi);
}

// draw a horizontal line. coordinates are for left point
void drawHLine(uint8_t x, uint8_t y, uint8_t size, uint16_t color, SPI_HandleTypeDef *hspi) {
 80012f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012fa:	b091      	sub	sp, #68	; 0x44
 80012fc:	af02      	add	r7, sp, #8
 80012fe:	000c      	movs	r4, r1
 8001300:	0016      	movs	r6, r2
 8001302:	0019      	movs	r1, r3
 8001304:	2327      	movs	r3, #39	; 0x27
 8001306:	18fa      	adds	r2, r7, r3
 8001308:	1c03      	adds	r3, r0, #0
 800130a:	7013      	strb	r3, [r2, #0]
 800130c:	2326      	movs	r3, #38	; 0x26
 800130e:	18fb      	adds	r3, r7, r3
 8001310:	1c22      	adds	r2, r4, #0
 8001312:	701a      	strb	r2, [r3, #0]
 8001314:	2325      	movs	r3, #37	; 0x25
 8001316:	18fb      	adds	r3, r7, r3
 8001318:	1c32      	adds	r2, r6, #0
 800131a:	701a      	strb	r2, [r3, #0]
 800131c:	2322      	movs	r3, #34	; 0x22
 800131e:	18fb      	adds	r3, r7, r3
 8001320:	1c0a      	adds	r2, r1, #0
 8001322:	801a      	strh	r2, [r3, #0]
 8001324:	466b      	mov	r3, sp
 8001326:	001e      	movs	r6, r3
	// bounds checking
	if (x < 0) x = 0;						// don't set x out of bounds
	if (x > WIDTH) x = WIDTH;
 8001328:	2327      	movs	r3, #39	; 0x27
 800132a:	18fb      	adds	r3, r7, r3
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b80      	cmp	r3, #128	; 0x80
 8001330:	d903      	bls.n	800133a <drawHLine+0x42>
 8001332:	2327      	movs	r3, #39	; 0x27
 8001334:	18fb      	adds	r3, r7, r3
 8001336:	2280      	movs	r2, #128	; 0x80
 8001338:	701a      	strb	r2, [r3, #0]
	if (x+size > WIDTH) size = WIDTH-x;		// don't set size so line draws out of bounds
 800133a:	2327      	movs	r3, #39	; 0x27
 800133c:	18fb      	adds	r3, r7, r3
 800133e:	781a      	ldrb	r2, [r3, #0]
 8001340:	2325      	movs	r3, #37	; 0x25
 8001342:	18fb      	adds	r3, r7, r3
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	18d3      	adds	r3, r2, r3
 8001348:	2b80      	cmp	r3, #128	; 0x80
 800134a:	dd08      	ble.n	800135e <drawHLine+0x66>
 800134c:	2325      	movs	r3, #37	; 0x25
 800134e:	18fb      	adds	r3, r7, r3
 8001350:	2227      	movs	r2, #39	; 0x27
 8001352:	18ba      	adds	r2, r7, r2
 8001354:	7812      	ldrb	r2, [r2, #0]
 8001356:	2180      	movs	r1, #128	; 0x80
 8001358:	4249      	negs	r1, r1
 800135a:	1a8a      	subs	r2, r1, r2
 800135c:	701a      	strb	r2, [r3, #0]
	if (x+size < 0) size = 0-x;
	if ((y > HEIGHT) || (y < 0)) return;	// don't draw if y is out of bounds
 800135e:	2326      	movs	r3, #38	; 0x26
 8001360:	18fb      	adds	r3, r7, r3
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2ba0      	cmp	r3, #160	; 0xa0
 8001366:	d868      	bhi.n	800143a <drawHLine+0x142>

	setAddrWindow(x, y, size, 1, hspi);
 8001368:	2327      	movs	r3, #39	; 0x27
 800136a:	18fb      	adds	r3, r7, r3
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	b298      	uxth	r0, r3
 8001370:	2326      	movs	r3, #38	; 0x26
 8001372:	18fb      	adds	r3, r7, r3
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	b299      	uxth	r1, r3
 8001378:	2325      	movs	r3, #37	; 0x25
 800137a:	18fb      	adds	r3, r7, r3
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	b29a      	uxth	r2, r3
 8001380:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	2301      	movs	r3, #1
 8001386:	f7ff ff29 	bl	80011dc <setAddrWindow>
	uint16_t colors[size];
 800138a:	2325      	movs	r3, #37	; 0x25
 800138c:	18fb      	adds	r3, r7, r3
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	001a      	movs	r2, r3
 8001392:	3a01      	subs	r2, #1
 8001394:	633a      	str	r2, [r7, #48]	; 0x30
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	2200      	movs	r2, #0
 800139a:	60fa      	str	r2, [r7, #12]
 800139c:	68b8      	ldr	r0, [r7, #8]
 800139e:	68f9      	ldr	r1, [r7, #12]
 80013a0:	0002      	movs	r2, r0
 80013a2:	0f12      	lsrs	r2, r2, #28
 80013a4:	000c      	movs	r4, r1
 80013a6:	0124      	lsls	r4, r4, #4
 80013a8:	61fc      	str	r4, [r7, #28]
 80013aa:	69fc      	ldr	r4, [r7, #28]
 80013ac:	4314      	orrs	r4, r2
 80013ae:	61fc      	str	r4, [r7, #28]
 80013b0:	0002      	movs	r2, r0
 80013b2:	0112      	lsls	r2, r2, #4
 80013b4:	61ba      	str	r2, [r7, #24]
 80013b6:	603b      	str	r3, [r7, #0]
 80013b8:	2200      	movs	r2, #0
 80013ba:	607a      	str	r2, [r7, #4]
 80013bc:	6838      	ldr	r0, [r7, #0]
 80013be:	6879      	ldr	r1, [r7, #4]
 80013c0:	0002      	movs	r2, r0
 80013c2:	0f12      	lsrs	r2, r2, #28
 80013c4:	000c      	movs	r4, r1
 80013c6:	0124      	lsls	r4, r4, #4
 80013c8:	617c      	str	r4, [r7, #20]
 80013ca:	697c      	ldr	r4, [r7, #20]
 80013cc:	4314      	orrs	r4, r2
 80013ce:	617c      	str	r4, [r7, #20]
 80013d0:	0002      	movs	r2, r0
 80013d2:	0112      	lsls	r2, r2, #4
 80013d4:	613a      	str	r2, [r7, #16]
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	3301      	adds	r3, #1
 80013da:	3307      	adds	r3, #7
 80013dc:	08db      	lsrs	r3, r3, #3
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	466a      	mov	r2, sp
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	469d      	mov	sp, r3
 80013e6:	ab02      	add	r3, sp, #8
 80013e8:	3301      	adds	r3, #1
 80013ea:	085b      	lsrs	r3, r3, #1
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i < size; i++) {
 80013f0:	2300      	movs	r3, #0
 80013f2:	637b      	str	r3, [r7, #52]	; 0x34
 80013f4:	e00e      	b.n	8001414 <drawHLine+0x11c>
		colors[i] = colorFixer(color);
 80013f6:	2322      	movs	r3, #34	; 0x22
 80013f8:	18fb      	adds	r3, r7, r3
 80013fa:	881b      	ldrh	r3, [r3, #0]
 80013fc:	0018      	movs	r0, r3
 80013fe:	f7ff ff57 	bl	80012b0 <colorFixer>
 8001402:	0003      	movs	r3, r0
 8001404:	0019      	movs	r1, r3
 8001406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001408:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800140a:	0052      	lsls	r2, r2, #1
 800140c:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < size; i++) {
 800140e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001410:	3301      	adds	r3, #1
 8001412:	637b      	str	r3, [r7, #52]	; 0x34
 8001414:	2325      	movs	r3, #37	; 0x25
 8001416:	18fb      	adds	r3, r7, r3
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800141c:	429a      	cmp	r2, r3
 800141e:	dbea      	blt.n	80013f6 <drawHLine+0xfe>
	}

	sendCommand(ST77XX_RAMWR, colors, size*2, hspi);
 8001420:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001422:	2325      	movs	r3, #37	; 0x25
 8001424:	18fb      	adds	r3, r7, r3
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	b29b      	uxth	r3, r3
 800142a:	18db      	adds	r3, r3, r3
 800142c:	b29a      	uxth	r2, r3
 800142e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001430:	202c      	movs	r0, #44	; 0x2c
 8001432:	f7ff fdbd 	bl	8000fb0 <sendCommand>
 8001436:	46b5      	mov	sp, r6
 8001438:	e001      	b.n	800143e <drawHLine+0x146>
	if ((y > HEIGHT) || (y < 0)) return;	// don't draw if y is out of bounds
 800143a:	46c0      	nop			; (mov r8, r8)
 800143c:	46b5      	mov	sp, r6
}
 800143e:	46bd      	mov	sp, r7
 8001440:	b00f      	add	sp, #60	; 0x3c
 8001442:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001444 <drawVLine>:

// draws a vertical line. coordinates are for top point
void drawVLine(uint8_t x, uint8_t y, uint8_t size, uint16_t color, SPI_HandleTypeDef *hspi) {
 8001444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001446:	b091      	sub	sp, #68	; 0x44
 8001448:	af02      	add	r7, sp, #8
 800144a:	000c      	movs	r4, r1
 800144c:	0016      	movs	r6, r2
 800144e:	0019      	movs	r1, r3
 8001450:	2327      	movs	r3, #39	; 0x27
 8001452:	18fa      	adds	r2, r7, r3
 8001454:	1c03      	adds	r3, r0, #0
 8001456:	7013      	strb	r3, [r2, #0]
 8001458:	2326      	movs	r3, #38	; 0x26
 800145a:	18fb      	adds	r3, r7, r3
 800145c:	1c22      	adds	r2, r4, #0
 800145e:	701a      	strb	r2, [r3, #0]
 8001460:	2325      	movs	r3, #37	; 0x25
 8001462:	18fb      	adds	r3, r7, r3
 8001464:	1c32      	adds	r2, r6, #0
 8001466:	701a      	strb	r2, [r3, #0]
 8001468:	2322      	movs	r3, #34	; 0x22
 800146a:	18fb      	adds	r3, r7, r3
 800146c:	1c0a      	adds	r2, r1, #0
 800146e:	801a      	strh	r2, [r3, #0]
 8001470:	466b      	mov	r3, sp
 8001472:	001e      	movs	r6, r3
	// bounds checking
	if (y < 0) y = 0;						// don't set y out of bounds
	if (y > HEIGHT) y = HEIGHT;
 8001474:	2326      	movs	r3, #38	; 0x26
 8001476:	18fb      	adds	r3, r7, r3
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2ba0      	cmp	r3, #160	; 0xa0
 800147c:	d903      	bls.n	8001486 <drawVLine+0x42>
 800147e:	2326      	movs	r3, #38	; 0x26
 8001480:	18fb      	adds	r3, r7, r3
 8001482:	22a0      	movs	r2, #160	; 0xa0
 8001484:	701a      	strb	r2, [r3, #0]
	if (y+size > HEIGHT) size = HEIGHT-y;	// don't set size so line draws out of bounds
 8001486:	2326      	movs	r3, #38	; 0x26
 8001488:	18fb      	adds	r3, r7, r3
 800148a:	781a      	ldrb	r2, [r3, #0]
 800148c:	2325      	movs	r3, #37	; 0x25
 800148e:	18fb      	adds	r3, r7, r3
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	18d3      	adds	r3, r2, r3
 8001494:	2ba0      	cmp	r3, #160	; 0xa0
 8001496:	dd08      	ble.n	80014aa <drawVLine+0x66>
 8001498:	2325      	movs	r3, #37	; 0x25
 800149a:	18fb      	adds	r3, r7, r3
 800149c:	2226      	movs	r2, #38	; 0x26
 800149e:	18ba      	adds	r2, r7, r2
 80014a0:	7812      	ldrb	r2, [r2, #0]
 80014a2:	2160      	movs	r1, #96	; 0x60
 80014a4:	4249      	negs	r1, r1
 80014a6:	1a8a      	subs	r2, r1, r2
 80014a8:	701a      	strb	r2, [r3, #0]
	if (y+size < 0) size = 0-y;
	if ((x > WIDTH) || (x < 0)) return;		// don't draw if x is out of bounds
 80014aa:	2327      	movs	r3, #39	; 0x27
 80014ac:	18fb      	adds	r3, r7, r3
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b80      	cmp	r3, #128	; 0x80
 80014b2:	d869      	bhi.n	8001588 <drawVLine+0x144>

	setAddrWindow(x, y, 1, size, hspi);
 80014b4:	2327      	movs	r3, #39	; 0x27
 80014b6:	18fb      	adds	r3, r7, r3
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	b298      	uxth	r0, r3
 80014bc:	2326      	movs	r3, #38	; 0x26
 80014be:	18fb      	adds	r3, r7, r3
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	b299      	uxth	r1, r3
 80014c4:	2325      	movs	r3, #37	; 0x25
 80014c6:	18fb      	adds	r3, r7, r3
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	b29a      	uxth	r2, r3
 80014cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	0013      	movs	r3, r2
 80014d2:	2201      	movs	r2, #1
 80014d4:	f7ff fe82 	bl	80011dc <setAddrWindow>
	uint16_t colors[size];
 80014d8:	2325      	movs	r3, #37	; 0x25
 80014da:	18fb      	adds	r3, r7, r3
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	001a      	movs	r2, r3
 80014e0:	3a01      	subs	r2, #1
 80014e2:	633a      	str	r2, [r7, #48]	; 0x30
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	2200      	movs	r2, #0
 80014e8:	60fa      	str	r2, [r7, #12]
 80014ea:	68b8      	ldr	r0, [r7, #8]
 80014ec:	68f9      	ldr	r1, [r7, #12]
 80014ee:	0002      	movs	r2, r0
 80014f0:	0f12      	lsrs	r2, r2, #28
 80014f2:	000c      	movs	r4, r1
 80014f4:	0124      	lsls	r4, r4, #4
 80014f6:	61fc      	str	r4, [r7, #28]
 80014f8:	69fc      	ldr	r4, [r7, #28]
 80014fa:	4314      	orrs	r4, r2
 80014fc:	61fc      	str	r4, [r7, #28]
 80014fe:	0002      	movs	r2, r0
 8001500:	0112      	lsls	r2, r2, #4
 8001502:	61ba      	str	r2, [r7, #24]
 8001504:	603b      	str	r3, [r7, #0]
 8001506:	2200      	movs	r2, #0
 8001508:	607a      	str	r2, [r7, #4]
 800150a:	6838      	ldr	r0, [r7, #0]
 800150c:	6879      	ldr	r1, [r7, #4]
 800150e:	0002      	movs	r2, r0
 8001510:	0f12      	lsrs	r2, r2, #28
 8001512:	000c      	movs	r4, r1
 8001514:	0124      	lsls	r4, r4, #4
 8001516:	617c      	str	r4, [r7, #20]
 8001518:	697c      	ldr	r4, [r7, #20]
 800151a:	4314      	orrs	r4, r2
 800151c:	617c      	str	r4, [r7, #20]
 800151e:	0002      	movs	r2, r0
 8001520:	0112      	lsls	r2, r2, #4
 8001522:	613a      	str	r2, [r7, #16]
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	3301      	adds	r3, #1
 8001528:	3307      	adds	r3, #7
 800152a:	08db      	lsrs	r3, r3, #3
 800152c:	00db      	lsls	r3, r3, #3
 800152e:	466a      	mov	r2, sp
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	469d      	mov	sp, r3
 8001534:	ab02      	add	r3, sp, #8
 8001536:	3301      	adds	r3, #1
 8001538:	085b      	lsrs	r3, r3, #1
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i < size; i++) {
 800153e:	2300      	movs	r3, #0
 8001540:	637b      	str	r3, [r7, #52]	; 0x34
 8001542:	e00e      	b.n	8001562 <drawVLine+0x11e>
		colors[i] = colorFixer(color);
 8001544:	2322      	movs	r3, #34	; 0x22
 8001546:	18fb      	adds	r3, r7, r3
 8001548:	881b      	ldrh	r3, [r3, #0]
 800154a:	0018      	movs	r0, r3
 800154c:	f7ff feb0 	bl	80012b0 <colorFixer>
 8001550:	0003      	movs	r3, r0
 8001552:	0019      	movs	r1, r3
 8001554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001556:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001558:	0052      	lsls	r2, r2, #1
 800155a:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < size; i++) {
 800155c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800155e:	3301      	adds	r3, #1
 8001560:	637b      	str	r3, [r7, #52]	; 0x34
 8001562:	2325      	movs	r3, #37	; 0x25
 8001564:	18fb      	adds	r3, r7, r3
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800156a:	429a      	cmp	r2, r3
 800156c:	dbea      	blt.n	8001544 <drawVLine+0x100>
	}

	sendCommand(ST77XX_RAMWR, colors, size*2, hspi);
 800156e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001570:	2325      	movs	r3, #37	; 0x25
 8001572:	18fb      	adds	r3, r7, r3
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	b29b      	uxth	r3, r3
 8001578:	18db      	adds	r3, r3, r3
 800157a:	b29a      	uxth	r2, r3
 800157c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800157e:	202c      	movs	r0, #44	; 0x2c
 8001580:	f7ff fd16 	bl	8000fb0 <sendCommand>
 8001584:	46b5      	mov	sp, r6
 8001586:	e001      	b.n	800158c <drawVLine+0x148>
	if ((x > WIDTH) || (x < 0)) return;		// don't draw if x is out of bounds
 8001588:	46c0      	nop			; (mov r8, r8)
 800158a:	46b5      	mov	sp, r6
}
 800158c:	46bd      	mov	sp, r7
 800158e:	b00f      	add	sp, #60	; 0x3c
 8001590:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001592 <drawBuffer>:

// draws on a specific region with input 16-bit buffer
void drawBuffer(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t *buffer, uint16_t bufferSize, SPI_HandleTypeDef *hspi) {
 8001592:	b5b0      	push	{r4, r5, r7, lr}
 8001594:	b084      	sub	sp, #16
 8001596:	af02      	add	r7, sp, #8
 8001598:	0005      	movs	r5, r0
 800159a:	000c      	movs	r4, r1
 800159c:	0010      	movs	r0, r2
 800159e:	0019      	movs	r1, r3
 80015a0:	1dfb      	adds	r3, r7, #7
 80015a2:	1c2a      	adds	r2, r5, #0
 80015a4:	701a      	strb	r2, [r3, #0]
 80015a6:	1dbb      	adds	r3, r7, #6
 80015a8:	1c22      	adds	r2, r4, #0
 80015aa:	701a      	strb	r2, [r3, #0]
 80015ac:	1d7b      	adds	r3, r7, #5
 80015ae:	1c02      	adds	r2, r0, #0
 80015b0:	701a      	strb	r2, [r3, #0]
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	1c0a      	adds	r2, r1, #0
 80015b6:	701a      	strb	r2, [r3, #0]
	if (x+w > WIDTH || y+h > HEIGHT) return;
 80015b8:	1dfb      	adds	r3, r7, #7
 80015ba:	781a      	ldrb	r2, [r3, #0]
 80015bc:	1d7b      	adds	r3, r7, #5
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	18d3      	adds	r3, r2, r3
 80015c2:	2b80      	cmp	r3, #128	; 0x80
 80015c4:	dc29      	bgt.n	800161a <drawBuffer+0x88>
 80015c6:	1dbb      	adds	r3, r7, #6
 80015c8:	781a      	ldrb	r2, [r3, #0]
 80015ca:	1d3b      	adds	r3, r7, #4
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	18d3      	adds	r3, r2, r3
 80015d0:	2ba0      	cmp	r3, #160	; 0xa0
 80015d2:	dc22      	bgt.n	800161a <drawBuffer+0x88>

	// also don't call this with buffer size too big bc there's not enough ram for all pixels of display
	if (bufferSize > 10240) return;			// about 1/2 of total system ram
 80015d4:	231c      	movs	r3, #28
 80015d6:	18fb      	adds	r3, r7, r3
 80015d8:	881a      	ldrh	r2, [r3, #0]
 80015da:	23a0      	movs	r3, #160	; 0xa0
 80015dc:	019b      	lsls	r3, r3, #6
 80015de:	429a      	cmp	r2, r3
 80015e0:	d81d      	bhi.n	800161e <drawBuffer+0x8c>

	setAddrWindow(x, y, w, h, hspi);
 80015e2:	1dfb      	adds	r3, r7, #7
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	b298      	uxth	r0, r3
 80015e8:	1dbb      	adds	r3, r7, #6
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	b299      	uxth	r1, r3
 80015ee:	1d7b      	adds	r3, r7, #5
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	b29a      	uxth	r2, r3
 80015f4:	1d3b      	adds	r3, r7, #4
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	b29c      	uxth	r4, r3
 80015fa:	6a3b      	ldr	r3, [r7, #32]
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	0023      	movs	r3, r4
 8001600:	f7ff fdec 	bl	80011dc <setAddrWindow>
	sendCommand(ST77XX_RAMWR, buffer, bufferSize*2, hspi);
 8001604:	231c      	movs	r3, #28
 8001606:	18fb      	adds	r3, r7, r3
 8001608:	881b      	ldrh	r3, [r3, #0]
 800160a:	18db      	adds	r3, r3, r3
 800160c:	b29a      	uxth	r2, r3
 800160e:	6a3b      	ldr	r3, [r7, #32]
 8001610:	69b9      	ldr	r1, [r7, #24]
 8001612:	202c      	movs	r0, #44	; 0x2c
 8001614:	f7ff fccc 	bl	8000fb0 <sendCommand>
 8001618:	e002      	b.n	8001620 <drawBuffer+0x8e>
	if (x+w > WIDTH || y+h > HEIGHT) return;
 800161a:	46c0      	nop			; (mov r8, r8)
 800161c:	e000      	b.n	8001620 <drawBuffer+0x8e>
	if (bufferSize > 10240) return;			// about 1/2 of total system ram
 800161e:	46c0      	nop			; (mov r8, r8)
}
 8001620:	46bd      	mov	sp, r7
 8001622:	b002      	add	sp, #8
 8001624:	bdb0      	pop	{r4, r5, r7, pc}

08001626 <drawRect>:
		}
	}
}

// draw an empty rectangle
void drawRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t color, SPI_HandleTypeDef *hspi) {
 8001626:	b5b0      	push	{r4, r5, r7, lr}
 8001628:	b084      	sub	sp, #16
 800162a:	af02      	add	r7, sp, #8
 800162c:	0005      	movs	r5, r0
 800162e:	000c      	movs	r4, r1
 8001630:	0010      	movs	r0, r2
 8001632:	0019      	movs	r1, r3
 8001634:	1dfb      	adds	r3, r7, #7
 8001636:	1c2a      	adds	r2, r5, #0
 8001638:	701a      	strb	r2, [r3, #0]
 800163a:	1dbb      	adds	r3, r7, #6
 800163c:	1c22      	adds	r2, r4, #0
 800163e:	701a      	strb	r2, [r3, #0]
 8001640:	1d7b      	adds	r3, r7, #5
 8001642:	1c02      	adds	r2, r0, #0
 8001644:	701a      	strb	r2, [r3, #0]
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	1c0a      	adds	r2, r1, #0
 800164a:	701a      	strb	r2, [r3, #0]
	drawHLine(x, y, w, color, hspi);
 800164c:	2518      	movs	r5, #24
 800164e:	197b      	adds	r3, r7, r5
 8001650:	881c      	ldrh	r4, [r3, #0]
 8001652:	1d7b      	adds	r3, r7, #5
 8001654:	781a      	ldrb	r2, [r3, #0]
 8001656:	1dbb      	adds	r3, r7, #6
 8001658:	7819      	ldrb	r1, [r3, #0]
 800165a:	1dfb      	adds	r3, r7, #7
 800165c:	7818      	ldrb	r0, [r3, #0]
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	9300      	str	r3, [sp, #0]
 8001662:	0023      	movs	r3, r4
 8001664:	f7ff fe48 	bl	80012f8 <drawHLine>
	drawHLine(x, y+h-1, w, color, hspi);
 8001668:	1dba      	adds	r2, r7, #6
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	7812      	ldrb	r2, [r2, #0]
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	18d3      	adds	r3, r2, r3
 8001672:	b2db      	uxtb	r3, r3
 8001674:	3b01      	subs	r3, #1
 8001676:	b2d9      	uxtb	r1, r3
 8001678:	197b      	adds	r3, r7, r5
 800167a:	881c      	ldrh	r4, [r3, #0]
 800167c:	1d7b      	adds	r3, r7, #5
 800167e:	781a      	ldrb	r2, [r3, #0]
 8001680:	1dfb      	adds	r3, r7, #7
 8001682:	7818      	ldrb	r0, [r3, #0]
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	0023      	movs	r3, r4
 800168a:	f7ff fe35 	bl	80012f8 <drawHLine>
	drawVLine(x, y, h, color, hspi);
 800168e:	197b      	adds	r3, r7, r5
 8001690:	881c      	ldrh	r4, [r3, #0]
 8001692:	1d3b      	adds	r3, r7, #4
 8001694:	781a      	ldrb	r2, [r3, #0]
 8001696:	1dbb      	adds	r3, r7, #6
 8001698:	7819      	ldrb	r1, [r3, #0]
 800169a:	1dfb      	adds	r3, r7, #7
 800169c:	7818      	ldrb	r0, [r3, #0]
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	0023      	movs	r3, r4
 80016a4:	f7ff fece 	bl	8001444 <drawVLine>
	drawVLine(x+w-1, y, h, color, hspi);
 80016a8:	1dfa      	adds	r2, r7, #7
 80016aa:	1d7b      	adds	r3, r7, #5
 80016ac:	7812      	ldrb	r2, [r2, #0]
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	18d3      	adds	r3, r2, r3
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	3b01      	subs	r3, #1
 80016b6:	b2d8      	uxtb	r0, r3
 80016b8:	197b      	adds	r3, r7, r5
 80016ba:	881c      	ldrh	r4, [r3, #0]
 80016bc:	1d3b      	adds	r3, r7, #4
 80016be:	781a      	ldrb	r2, [r3, #0]
 80016c0:	1dbb      	adds	r3, r7, #6
 80016c2:	7819      	ldrb	r1, [r3, #0]
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	9300      	str	r3, [sp, #0]
 80016c8:	0023      	movs	r3, r4
 80016ca:	f7ff febb 	bl	8001444 <drawVLine>
}
 80016ce:	46c0      	nop			; (mov r8, r8)
 80016d0:	46bd      	mov	sp, r7
 80016d2:	b002      	add	sp, #8
 80016d4:	bdb0      	pop	{r4, r5, r7, pc}

080016d6 <fillRect>:

// draw a filled rectangle
void fillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t color, SPI_HandleTypeDef *hspi) {
 80016d6:	b5b0      	push	{r4, r5, r7, lr}
 80016d8:	b086      	sub	sp, #24
 80016da:	af02      	add	r7, sp, #8
 80016dc:	0005      	movs	r5, r0
 80016de:	000c      	movs	r4, r1
 80016e0:	0010      	movs	r0, r2
 80016e2:	0019      	movs	r1, r3
 80016e4:	1dfb      	adds	r3, r7, #7
 80016e6:	1c2a      	adds	r2, r5, #0
 80016e8:	701a      	strb	r2, [r3, #0]
 80016ea:	1dbb      	adds	r3, r7, #6
 80016ec:	1c22      	adds	r2, r4, #0
 80016ee:	701a      	strb	r2, [r3, #0]
 80016f0:	1d7b      	adds	r3, r7, #5
 80016f2:	1c02      	adds	r2, r0, #0
 80016f4:	701a      	strb	r2, [r3, #0]
 80016f6:	1d3b      	adds	r3, r7, #4
 80016f8:	1c0a      	adds	r2, r1, #0
 80016fa:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < h; i++) {
 80016fc:	2300      	movs	r3, #0
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	e014      	b.n	800172c <fillRect+0x56>
		drawHLine(x, y+i, w, color, hspi);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	b2da      	uxtb	r2, r3
 8001706:	1dbb      	adds	r3, r7, #6
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	18d3      	adds	r3, r2, r3
 800170c:	b2d9      	uxtb	r1, r3
 800170e:	2320      	movs	r3, #32
 8001710:	18fb      	adds	r3, r7, r3
 8001712:	881c      	ldrh	r4, [r3, #0]
 8001714:	1d7b      	adds	r3, r7, #5
 8001716:	781a      	ldrb	r2, [r3, #0]
 8001718:	1dfb      	adds	r3, r7, #7
 800171a:	7818      	ldrb	r0, [r3, #0]
 800171c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	0023      	movs	r3, r4
 8001722:	f7ff fde9 	bl	80012f8 <drawHLine>
	for (int i = 0; i < h; i++) {
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	3301      	adds	r3, #1
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	1d3b      	adds	r3, r7, #4
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	68fa      	ldr	r2, [r7, #12]
 8001732:	429a      	cmp	r2, r3
 8001734:	dbe5      	blt.n	8001702 <fillRect+0x2c>
	}
}
 8001736:	46c0      	nop			; (mov r8, r8)
 8001738:	46bd      	mov	sp, r7
 800173a:	b004      	add	sp, #16
 800173c:	bdb0      	pop	{r4, r5, r7, pc}

0800173e <fillScreen>:

// a big rectangle, but for the whole screen
void fillScreen(uint16_t color, SPI_HandleTypeDef *hspi) {
 800173e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001740:	b091      	sub	sp, #68	; 0x44
 8001742:	af04      	add	r7, sp, #16
 8001744:	61b9      	str	r1, [r7, #24]
 8001746:	221e      	movs	r2, #30
 8001748:	18ba      	adds	r2, r7, r2
 800174a:	1c01      	adds	r1, r0, #0
 800174c:	8011      	strh	r1, [r2, #0]
 800174e:	466a      	mov	r2, sp
 8001750:	607a      	str	r2, [r7, #4]
	uint16_t bufferSize = WIDTH*HEIGHT/4;
 8001752:	2012      	movs	r0, #18
 8001754:	2218      	movs	r2, #24
 8001756:	18b9      	adds	r1, r7, r2
 8001758:	180a      	adds	r2, r1, r0
 800175a:	21a0      	movs	r1, #160	; 0xa0
 800175c:	0149      	lsls	r1, r1, #5
 800175e:	8011      	strh	r1, [r2, #0]
	uint16_t buffer[bufferSize];
 8001760:	2218      	movs	r2, #24
 8001762:	18ba      	adds	r2, r7, r2
 8001764:	1812      	adds	r2, r2, r0
 8001766:	8812      	ldrh	r2, [r2, #0]
 8001768:	0011      	movs	r1, r2
 800176a:	3901      	subs	r1, #1
 800176c:	6279      	str	r1, [r7, #36]	; 0x24
 800176e:	613a      	str	r2, [r7, #16]
 8001770:	2100      	movs	r1, #0
 8001772:	6179      	str	r1, [r7, #20]
 8001774:	6939      	ldr	r1, [r7, #16]
 8001776:	0f09      	lsrs	r1, r1, #28
 8001778:	6978      	ldr	r0, [r7, #20]
 800177a:	0106      	lsls	r6, r0, #4
 800177c:	430e      	orrs	r6, r1
 800177e:	6939      	ldr	r1, [r7, #16]
 8001780:	010d      	lsls	r5, r1, #4
 8001782:	60ba      	str	r2, [r7, #8]
 8001784:	2100      	movs	r1, #0
 8001786:	60f9      	str	r1, [r7, #12]
 8001788:	68bd      	ldr	r5, [r7, #8]
 800178a:	68fe      	ldr	r6, [r7, #12]
 800178c:	0029      	movs	r1, r5
 800178e:	0f09      	lsrs	r1, r1, #28
 8001790:	0030      	movs	r0, r6
 8001792:	0104      	lsls	r4, r0, #4
 8001794:	430c      	orrs	r4, r1
 8001796:	0029      	movs	r1, r5
 8001798:	010b      	lsls	r3, r1, #4
 800179a:	0013      	movs	r3, r2
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	3301      	adds	r3, #1
 80017a0:	3307      	adds	r3, #7
 80017a2:	08db      	lsrs	r3, r3, #3
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	466a      	mov	r2, sp
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	469d      	mov	sp, r3
 80017ac:	ab04      	add	r3, sp, #16
 80017ae:	3301      	adds	r3, #1
 80017b0:	085b      	lsrs	r3, r3, #1
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	623b      	str	r3, [r7, #32]
	int i;
	for (i = 0; i < bufferSize; i++) {
 80017b6:	2300      	movs	r3, #0
 80017b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017ba:	e00e      	b.n	80017da <fillScreen+0x9c>
		buffer[i] = colorFixer(color);
 80017bc:	231e      	movs	r3, #30
 80017be:	18fb      	adds	r3, r7, r3
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	0018      	movs	r0, r3
 80017c4:	f7ff fd74 	bl	80012b0 <colorFixer>
 80017c8:	0003      	movs	r3, r0
 80017ca:	0019      	movs	r1, r3
 80017cc:	6a3b      	ldr	r3, [r7, #32]
 80017ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017d0:	0052      	lsls	r2, r2, #1
 80017d2:	52d1      	strh	r1, [r2, r3]
	for (i = 0; i < bufferSize; i++) {
 80017d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d6:	3301      	adds	r3, #1
 80017d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017da:	2312      	movs	r3, #18
 80017dc:	2218      	movs	r2, #24
 80017de:	4694      	mov	ip, r2
 80017e0:	44bc      	add	ip, r7
 80017e2:	4463      	add	r3, ip
 80017e4:	881b      	ldrh	r3, [r3, #0]
 80017e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017e8:	429a      	cmp	r2, r3
 80017ea:	dbe7      	blt.n	80017bc <fillScreen+0x7e>
	}

	// divided into 4 parts, since system ram is not big enough
	for (i = 0; i < 4; i++) {
 80017ec:	2300      	movs	r3, #0
 80017ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017f0:	e017      	b.n	8001822 <fillScreen+0xe4>
		drawBuffer(0, HEIGHT/4*i, WIDTH, HEIGHT/4, buffer, bufferSize, hspi);
 80017f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	2228      	movs	r2, #40	; 0x28
 80017f8:	4353      	muls	r3, r2
 80017fa:	b2d9      	uxtb	r1, r3
 80017fc:	6a3b      	ldr	r3, [r7, #32]
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	9202      	str	r2, [sp, #8]
 8001802:	2212      	movs	r2, #18
 8001804:	2018      	movs	r0, #24
 8001806:	4684      	mov	ip, r0
 8001808:	44bc      	add	ip, r7
 800180a:	4462      	add	r2, ip
 800180c:	8812      	ldrh	r2, [r2, #0]
 800180e:	9201      	str	r2, [sp, #4]
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	2328      	movs	r3, #40	; 0x28
 8001814:	2280      	movs	r2, #128	; 0x80
 8001816:	2000      	movs	r0, #0
 8001818:	f7ff febb 	bl	8001592 <drawBuffer>
	for (i = 0; i < 4; i++) {
 800181c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800181e:	3301      	adds	r3, #1
 8001820:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001824:	2b03      	cmp	r3, #3
 8001826:	dde4      	ble.n	80017f2 <fillScreen+0xb4>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	469d      	mov	sp, r3
	}
}
 800182c:	46c0      	nop			; (mov r8, r8)
 800182e:	46bd      	mov	sp, r7
 8001830:	b00d      	add	sp, #52	; 0x34
 8001832:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001834 <clearScreen>:

void clearScreen(uint16_t backgroundColor, SPI_HandleTypeDef *hspi) {
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	0002      	movs	r2, r0
 800183c:	6039      	str	r1, [r7, #0]
 800183e:	1dbb      	adds	r3, r7, #6
 8001840:	801a      	strh	r2, [r3, #0]
	bg = backgroundColor;
 8001842:	4b07      	ldr	r3, [pc, #28]	; (8001860 <clearScreen+0x2c>)
 8001844:	1dba      	adds	r2, r7, #6
 8001846:	8812      	ldrh	r2, [r2, #0]
 8001848:	801a      	strh	r2, [r3, #0]
	fillScreen(backgroundColor, hspi);
 800184a:	683a      	ldr	r2, [r7, #0]
 800184c:	1dbb      	adds	r3, r7, #6
 800184e:	881b      	ldrh	r3, [r3, #0]
 8001850:	0011      	movs	r1, r2
 8001852:	0018      	movs	r0, r3
 8001854:	f7ff ff73 	bl	800173e <fillScreen>
}
 8001858:	46c0      	nop			; (mov r8, r8)
 800185a:	46bd      	mov	sp, r7
 800185c:	b002      	add	sp, #8
 800185e:	bd80      	pop	{r7, pc}
 8001860:	200000f2 	.word	0x200000f2

08001864 <drawChar>:
// ---- end of basic shapes and lines ----

// ---- text functions ----
// draw a character. based on 6x8 font, but scalable
// instead of drawing pixel by pixel, function builds a buffer first and then sends
void drawChar(uint8_t ch, SPI_HandleTypeDef *hspi) {
 8001864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001866:	b095      	sub	sp, #84	; 0x54
 8001868:	af04      	add	r7, sp, #16
 800186a:	61b9      	str	r1, [r7, #24]
 800186c:	221f      	movs	r2, #31
 800186e:	18ba      	adds	r2, r7, r2
 8001870:	1c01      	adds	r1, r0, #0
 8001872:	7011      	strb	r1, [r2, #0]
 8001874:	466a      	mov	r2, sp
 8001876:	607a      	str	r2, [r7, #4]
	uint16_t bufferSize = 6*8*textSize*textSize;
 8001878:	4abe      	ldr	r2, [pc, #760]	; (8001b74 <drawChar+0x310>)
 800187a:	7812      	ldrb	r2, [r2, #0]
 800187c:	b292      	uxth	r2, r2
 800187e:	49bd      	ldr	r1, [pc, #756]	; (8001b74 <drawChar+0x310>)
 8001880:	7809      	ldrb	r1, [r1, #0]
 8001882:	b289      	uxth	r1, r1
 8001884:	434a      	muls	r2, r1
 8001886:	b291      	uxth	r1, r2
 8001888:	221a      	movs	r2, #26
 800188a:	2018      	movs	r0, #24
 800188c:	4684      	mov	ip, r0
 800188e:	44bc      	add	ip, r7
 8001890:	4462      	add	r2, ip
 8001892:	2030      	movs	r0, #48	; 0x30
 8001894:	4341      	muls	r1, r0
 8001896:	8011      	strh	r1, [r2, #0]
	uint16_t buffer[bufferSize];
 8001898:	221a      	movs	r2, #26
 800189a:	2118      	movs	r1, #24
 800189c:	468c      	mov	ip, r1
 800189e:	44bc      	add	ip, r7
 80018a0:	4462      	add	r2, ip
 80018a2:	8812      	ldrh	r2, [r2, #0]
 80018a4:	0011      	movs	r1, r2
 80018a6:	3901      	subs	r1, #1
 80018a8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80018aa:	613a      	str	r2, [r7, #16]
 80018ac:	2100      	movs	r1, #0
 80018ae:	6179      	str	r1, [r7, #20]
 80018b0:	6939      	ldr	r1, [r7, #16]
 80018b2:	0f09      	lsrs	r1, r1, #28
 80018b4:	6978      	ldr	r0, [r7, #20]
 80018b6:	0106      	lsls	r6, r0, #4
 80018b8:	430e      	orrs	r6, r1
 80018ba:	6939      	ldr	r1, [r7, #16]
 80018bc:	010d      	lsls	r5, r1, #4
 80018be:	60ba      	str	r2, [r7, #8]
 80018c0:	2100      	movs	r1, #0
 80018c2:	60f9      	str	r1, [r7, #12]
 80018c4:	68bd      	ldr	r5, [r7, #8]
 80018c6:	68fe      	ldr	r6, [r7, #12]
 80018c8:	0029      	movs	r1, r5
 80018ca:	0f09      	lsrs	r1, r1, #28
 80018cc:	0030      	movs	r0, r6
 80018ce:	0104      	lsls	r4, r0, #4
 80018d0:	430c      	orrs	r4, r1
 80018d2:	0029      	movs	r1, r5
 80018d4:	010b      	lsls	r3, r1, #4
 80018d6:	0013      	movs	r3, r2
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	3301      	adds	r3, #1
 80018dc:	3307      	adds	r3, #7
 80018de:	08db      	lsrs	r3, r3, #3
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	466a      	mov	r2, sp
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	469d      	mov	sp, r3
 80018e8:	ab04      	add	r3, sp, #16
 80018ea:	3301      	adds	r3, #1
 80018ec:	085b      	lsrs	r3, r3, #1
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	62bb      	str	r3, [r7, #40]	; 0x28
	int16_t rowOffset, address;

	// Char bitmap = 5 columns
	for (int8_t i=0; i<5; i++) {
 80018f2:	2325      	movs	r3, #37	; 0x25
 80018f4:	2218      	movs	r2, #24
 80018f6:	4694      	mov	ip, r2
 80018f8:	44bc      	add	ip, r7
 80018fa:	4463      	add	r3, ip
 80018fc:	2200      	movs	r2, #0
 80018fe:	701a      	strb	r2, [r3, #0]
 8001900:	e1f4      	b.n	8001cec <drawChar+0x488>
		uint8_t line = font[ch*5+i];
 8001902:	231f      	movs	r3, #31
 8001904:	18fb      	adds	r3, r7, r3
 8001906:	781a      	ldrb	r2, [r3, #0]
 8001908:	0013      	movs	r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	189a      	adds	r2, r3, r2
 800190e:	2325      	movs	r3, #37	; 0x25
 8001910:	2118      	movs	r1, #24
 8001912:	468c      	mov	ip, r1
 8001914:	44bc      	add	ip, r7
 8001916:	4463      	add	r3, ip
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	b25b      	sxtb	r3, r3
 800191c:	18d2      	adds	r2, r2, r3
 800191e:	2324      	movs	r3, #36	; 0x24
 8001920:	2118      	movs	r1, #24
 8001922:	468c      	mov	ip, r1
 8001924:	44bc      	add	ip, r7
 8001926:	4463      	add	r3, ip
 8001928:	4993      	ldr	r1, [pc, #588]	; (8001b78 <drawChar+0x314>)
 800192a:	5c8a      	ldrb	r2, [r1, r2]
 800192c:	701a      	strb	r2, [r3, #0]
		for (int8_t j=0; j<8; j++, line >>= 1) {
 800192e:	2323      	movs	r3, #35	; 0x23
 8001930:	2218      	movs	r2, #24
 8001932:	4694      	mov	ip, r2
 8001934:	44bc      	add	ip, r7
 8001936:	4463      	add	r3, ip
 8001938:	2200      	movs	r2, #0
 800193a:	701a      	strb	r2, [r3, #0]
 800193c:	e1c0      	b.n	8001cc0 <drawChar+0x45c>
			// draw character pixel
			if (line & 1) {
 800193e:	2324      	movs	r3, #36	; 0x24
 8001940:	2218      	movs	r2, #24
 8001942:	4694      	mov	ip, r2
 8001944:	44bc      	add	ip, r7
 8001946:	4463      	add	r3, ip
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2201      	movs	r2, #1
 800194c:	4013      	ands	r3, r2
 800194e:	d100      	bne.n	8001952 <drawChar+0xee>
 8001950:	e0c8      	b.n	8001ae4 <drawChar+0x280>
				if (textSize == 1) {
 8001952:	4b88      	ldr	r3, [pc, #544]	; (8001b74 <drawChar+0x310>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d11c      	bne.n	8001994 <drawChar+0x130>
					buffer[i+j*6] = colorFixer(textColor);
 800195a:	4b88      	ldr	r3, [pc, #544]	; (8001b7c <drawChar+0x318>)
 800195c:	8818      	ldrh	r0, [r3, #0]
 800195e:	2325      	movs	r3, #37	; 0x25
 8001960:	2218      	movs	r2, #24
 8001962:	4694      	mov	ip, r2
 8001964:	44bc      	add	ip, r7
 8001966:	4463      	add	r3, ip
 8001968:	2100      	movs	r1, #0
 800196a:	5659      	ldrsb	r1, [r3, r1]
 800196c:	2323      	movs	r3, #35	; 0x23
 800196e:	2218      	movs	r2, #24
 8001970:	4694      	mov	ip, r2
 8001972:	44bc      	add	ip, r7
 8001974:	4463      	add	r3, ip
 8001976:	2200      	movs	r2, #0
 8001978:	569a      	ldrsb	r2, [r3, r2]
 800197a:	0013      	movs	r3, r2
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	189b      	adds	r3, r3, r2
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	18cc      	adds	r4, r1, r3
 8001984:	f7ff fc94 	bl	80012b0 <colorFixer>
 8001988:	0003      	movs	r3, r0
 800198a:	0019      	movs	r1, r3
 800198c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800198e:	0062      	lsls	r2, r4, #1
 8001990:	52d1      	strh	r1, [r2, r3]
 8001992:	e17f      	b.n	8001c94 <drawChar+0x430>
				}
				else {
					// indexing scheme for textSize > 1
					for (int8_t k = 0; k < textSize; k++) {
 8001994:	2322      	movs	r3, #34	; 0x22
 8001996:	2218      	movs	r2, #24
 8001998:	4694      	mov	ip, r2
 800199a:	44bc      	add	ip, r7
 800199c:	4463      	add	r3, ip
 800199e:	2200      	movs	r2, #0
 80019a0:	701a      	strb	r2, [r3, #0]
 80019a2:	e092      	b.n	8001aca <drawChar+0x266>
						rowOffset = textSize*6;
 80019a4:	4b73      	ldr	r3, [pc, #460]	; (8001b74 <drawChar+0x310>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	1c1a      	adds	r2, r3, #0
 80019ac:	1c13      	adds	r3, r2, #0
 80019ae:	18db      	adds	r3, r3, r3
 80019b0:	189b      	adds	r3, r3, r2
 80019b2:	18db      	adds	r3, r3, r3
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	2326      	movs	r3, #38	; 0x26
 80019b8:	2118      	movs	r1, #24
 80019ba:	468c      	mov	ip, r1
 80019bc:	44bc      	add	ip, r7
 80019be:	4463      	add	r3, ip
 80019c0:	801a      	strh	r2, [r3, #0]
						for (int8_t l = 0; l < textSize; l++) {
 80019c2:	2321      	movs	r3, #33	; 0x21
 80019c4:	2218      	movs	r2, #24
 80019c6:	4694      	mov	ip, r2
 80019c8:	44bc      	add	ip, r7
 80019ca:	4463      	add	r3, ip
 80019cc:	2200      	movs	r2, #0
 80019ce:	701a      	strb	r2, [r3, #0]
 80019d0:	e064      	b.n	8001a9c <drawChar+0x238>
							address = (textSize*textSize*j*6)+(i*textSize);
 80019d2:	4b68      	ldr	r3, [pc, #416]	; (8001b74 <drawChar+0x310>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	4a66      	ldr	r2, [pc, #408]	; (8001b74 <drawChar+0x310>)
 80019da:	7812      	ldrb	r2, [r2, #0]
 80019dc:	b292      	uxth	r2, r2
 80019de:	4353      	muls	r3, r2
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	2223      	movs	r2, #35	; 0x23
 80019e4:	2118      	movs	r1, #24
 80019e6:	468c      	mov	ip, r1
 80019e8:	44bc      	add	ip, r7
 80019ea:	4462      	add	r2, ip
 80019ec:	7812      	ldrb	r2, [r2, #0]
 80019ee:	b252      	sxtb	r2, r2
 80019f0:	b292      	uxth	r2, r2
 80019f2:	4353      	muls	r3, r2
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	1c1a      	adds	r2, r3, #0
 80019f8:	1c13      	adds	r3, r2, #0
 80019fa:	18db      	adds	r3, r3, r3
 80019fc:	189b      	adds	r3, r3, r2
 80019fe:	18db      	adds	r3, r3, r3
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	2325      	movs	r3, #37	; 0x25
 8001a04:	2118      	movs	r1, #24
 8001a06:	468c      	mov	ip, r1
 8001a08:	44bc      	add	ip, r7
 8001a0a:	4463      	add	r3, ip
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	b25b      	sxtb	r3, r3
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	4958      	ldr	r1, [pc, #352]	; (8001b74 <drawChar+0x310>)
 8001a14:	7809      	ldrb	r1, [r1, #0]
 8001a16:	b289      	uxth	r1, r1
 8001a18:	434b      	muls	r3, r1
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	18d3      	adds	r3, r2, r3
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	210e      	movs	r1, #14
 8001a22:	2018      	movs	r0, #24
 8001a24:	183b      	adds	r3, r7, r0
 8001a26:	185b      	adds	r3, r3, r1
 8001a28:	801a      	strh	r2, [r3, #0]
							address += rowOffset*k+l;
 8001a2a:	2322      	movs	r3, #34	; 0x22
 8001a2c:	2218      	movs	r2, #24
 8001a2e:	4694      	mov	ip, r2
 8001a30:	44bc      	add	ip, r7
 8001a32:	4463      	add	r3, ip
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	b25b      	sxtb	r3, r3
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	2226      	movs	r2, #38	; 0x26
 8001a3c:	2418      	movs	r4, #24
 8001a3e:	46a4      	mov	ip, r4
 8001a40:	44bc      	add	ip, r7
 8001a42:	4462      	add	r2, ip
 8001a44:	8812      	ldrh	r2, [r2, #0]
 8001a46:	4353      	muls	r3, r2
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	2521      	movs	r5, #33	; 0x21
 8001a4c:	183b      	adds	r3, r7, r0
 8001a4e:	195b      	adds	r3, r3, r5
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	b25b      	sxtb	r3, r3
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	18d3      	adds	r3, r2, r3
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	183b      	adds	r3, r7, r0
 8001a5c:	185b      	adds	r3, r3, r1
 8001a5e:	881b      	ldrh	r3, [r3, #0]
 8001a60:	18d3      	adds	r3, r2, r3
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	183b      	adds	r3, r7, r0
 8001a66:	185b      	adds	r3, r3, r1
 8001a68:	801a      	strh	r2, [r3, #0]
							buffer[address] = colorFixer(textColor);
 8001a6a:	4b44      	ldr	r3, [pc, #272]	; (8001b7c <drawChar+0x318>)
 8001a6c:	881a      	ldrh	r2, [r3, #0]
 8001a6e:	0006      	movs	r6, r0
 8001a70:	183b      	adds	r3, r7, r0
 8001a72:	185b      	adds	r3, r3, r1
 8001a74:	2400      	movs	r4, #0
 8001a76:	5f1c      	ldrsh	r4, [r3, r4]
 8001a78:	0010      	movs	r0, r2
 8001a7a:	f7ff fc19 	bl	80012b0 <colorFixer>
 8001a7e:	0003      	movs	r3, r0
 8001a80:	0019      	movs	r1, r3
 8001a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a84:	0062      	lsls	r2, r4, #1
 8001a86:	52d1      	strh	r1, [r2, r3]
						for (int8_t l = 0; l < textSize; l++) {
 8001a88:	19bb      	adds	r3, r7, r6
 8001a8a:	195b      	adds	r3, r3, r5
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	b25b      	sxtb	r3, r3
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	3301      	adds	r3, #1
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	19bb      	adds	r3, r7, r6
 8001a98:	195b      	adds	r3, r3, r5
 8001a9a:	701a      	strb	r2, [r3, #0]
 8001a9c:	2321      	movs	r3, #33	; 0x21
 8001a9e:	2218      	movs	r2, #24
 8001aa0:	4694      	mov	ip, r2
 8001aa2:	44bc      	add	ip, r7
 8001aa4:	4463      	add	r3, ip
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	b25b      	sxtb	r3, r3
 8001aaa:	4a32      	ldr	r2, [pc, #200]	; (8001b74 <drawChar+0x310>)
 8001aac:	7812      	ldrb	r2, [r2, #0]
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	db8f      	blt.n	80019d2 <drawChar+0x16e>
					for (int8_t k = 0; k < textSize; k++) {
 8001ab2:	2122      	movs	r1, #34	; 0x22
 8001ab4:	2018      	movs	r0, #24
 8001ab6:	183b      	adds	r3, r7, r0
 8001ab8:	185b      	adds	r3, r3, r1
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	b25b      	sxtb	r3, r3
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	b2da      	uxtb	r2, r3
 8001ac4:	183b      	adds	r3, r7, r0
 8001ac6:	185b      	adds	r3, r3, r1
 8001ac8:	701a      	strb	r2, [r3, #0]
 8001aca:	2322      	movs	r3, #34	; 0x22
 8001acc:	2218      	movs	r2, #24
 8001ace:	4694      	mov	ip, r2
 8001ad0:	44bc      	add	ip, r7
 8001ad2:	4463      	add	r3, ip
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	b25b      	sxtb	r3, r3
 8001ad8:	4a26      	ldr	r2, [pc, #152]	; (8001b74 <drawChar+0x310>)
 8001ada:	7812      	ldrb	r2, [r2, #0]
 8001adc:	4293      	cmp	r3, r2
 8001ade:	da00      	bge.n	8001ae2 <drawChar+0x27e>
 8001ae0:	e760      	b.n	80019a4 <drawChar+0x140>
 8001ae2:	e0d7      	b.n	8001c94 <drawChar+0x430>
						}
					}
				}
			}
			// draw text background
			else if (bg != textColor) {
 8001ae4:	4b26      	ldr	r3, [pc, #152]	; (8001b80 <drawChar+0x31c>)
 8001ae6:	881a      	ldrh	r2, [r3, #0]
 8001ae8:	4b24      	ldr	r3, [pc, #144]	; (8001b7c <drawChar+0x318>)
 8001aea:	881b      	ldrh	r3, [r3, #0]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d100      	bne.n	8001af2 <drawChar+0x28e>
 8001af0:	e0d0      	b.n	8001c94 <drawChar+0x430>
				if (textSize == 1) {
 8001af2:	4b20      	ldr	r3, [pc, #128]	; (8001b74 <drawChar+0x310>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d11c      	bne.n	8001b34 <drawChar+0x2d0>
					buffer[i+j*6] = colorFixer(bg);
 8001afa:	4b21      	ldr	r3, [pc, #132]	; (8001b80 <drawChar+0x31c>)
 8001afc:	8818      	ldrh	r0, [r3, #0]
 8001afe:	2325      	movs	r3, #37	; 0x25
 8001b00:	2218      	movs	r2, #24
 8001b02:	4694      	mov	ip, r2
 8001b04:	44bc      	add	ip, r7
 8001b06:	4463      	add	r3, ip
 8001b08:	2100      	movs	r1, #0
 8001b0a:	5659      	ldrsb	r1, [r3, r1]
 8001b0c:	2323      	movs	r3, #35	; 0x23
 8001b0e:	2218      	movs	r2, #24
 8001b10:	4694      	mov	ip, r2
 8001b12:	44bc      	add	ip, r7
 8001b14:	4463      	add	r3, ip
 8001b16:	2200      	movs	r2, #0
 8001b18:	569a      	ldrsb	r2, [r3, r2]
 8001b1a:	0013      	movs	r3, r2
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	189b      	adds	r3, r3, r2
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	18cc      	adds	r4, r1, r3
 8001b24:	f7ff fbc4 	bl	80012b0 <colorFixer>
 8001b28:	0003      	movs	r3, r0
 8001b2a:	0019      	movs	r1, r3
 8001b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b2e:	0062      	lsls	r2, r4, #1
 8001b30:	52d1      	strh	r1, [r2, r3]
 8001b32:	e0af      	b.n	8001c94 <drawChar+0x430>
				}
				else {
					for (int8_t k = 0; k < textSize; k++) {
 8001b34:	2320      	movs	r3, #32
 8001b36:	2218      	movs	r2, #24
 8001b38:	4694      	mov	ip, r2
 8001b3a:	44bc      	add	ip, r7
 8001b3c:	4463      	add	r3, ip
 8001b3e:	2200      	movs	r2, #0
 8001b40:	701a      	strb	r2, [r3, #0]
 8001b42:	e09b      	b.n	8001c7c <drawChar+0x418>
						rowOffset = textSize*6;
 8001b44:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <drawChar+0x310>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	1c1a      	adds	r2, r3, #0
 8001b4c:	1c13      	adds	r3, r2, #0
 8001b4e:	18db      	adds	r3, r3, r3
 8001b50:	189b      	adds	r3, r3, r2
 8001b52:	18db      	adds	r3, r3, r3
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	2326      	movs	r3, #38	; 0x26
 8001b58:	2118      	movs	r1, #24
 8001b5a:	468c      	mov	ip, r1
 8001b5c:	44bc      	add	ip, r7
 8001b5e:	4463      	add	r3, ip
 8001b60:	801a      	strh	r2, [r3, #0]
						for (int8_t l = 0; l < textSize; l++) {
 8001b62:	231f      	movs	r3, #31
 8001b64:	2218      	movs	r2, #24
 8001b66:	4694      	mov	ip, r2
 8001b68:	44bc      	add	ip, r7
 8001b6a:	4463      	add	r3, ip
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	701a      	strb	r2, [r3, #0]
 8001b70:	e06d      	b.n	8001c4e <drawChar+0x3ea>
 8001b72:	46c0      	nop			; (mov r8, r8)
 8001b74:	200000ee 	.word	0x200000ee
 8001b78:	0800add8 	.word	0x0800add8
 8001b7c:	200000f0 	.word	0x200000f0
 8001b80:	200000f2 	.word	0x200000f2
							address = (textSize*textSize*j*6)+(i*textSize);
 8001b84:	4bda      	ldr	r3, [pc, #872]	; (8001ef0 <drawChar+0x68c>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	4ad9      	ldr	r2, [pc, #868]	; (8001ef0 <drawChar+0x68c>)
 8001b8c:	7812      	ldrb	r2, [r2, #0]
 8001b8e:	b292      	uxth	r2, r2
 8001b90:	4353      	muls	r3, r2
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	2223      	movs	r2, #35	; 0x23
 8001b96:	2118      	movs	r1, #24
 8001b98:	468c      	mov	ip, r1
 8001b9a:	44bc      	add	ip, r7
 8001b9c:	4462      	add	r2, ip
 8001b9e:	7812      	ldrb	r2, [r2, #0]
 8001ba0:	b252      	sxtb	r2, r2
 8001ba2:	b292      	uxth	r2, r2
 8001ba4:	4353      	muls	r3, r2
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	1c1a      	adds	r2, r3, #0
 8001baa:	1c13      	adds	r3, r2, #0
 8001bac:	18db      	adds	r3, r3, r3
 8001bae:	189b      	adds	r3, r3, r2
 8001bb0:	18db      	adds	r3, r3, r3
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	2325      	movs	r3, #37	; 0x25
 8001bb6:	2118      	movs	r1, #24
 8001bb8:	468c      	mov	ip, r1
 8001bba:	44bc      	add	ip, r7
 8001bbc:	4463      	add	r3, ip
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	b25b      	sxtb	r3, r3
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	49ca      	ldr	r1, [pc, #808]	; (8001ef0 <drawChar+0x68c>)
 8001bc6:	7809      	ldrb	r1, [r1, #0]
 8001bc8:	b289      	uxth	r1, r1
 8001bca:	434b      	muls	r3, r1
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	18d3      	adds	r3, r2, r3
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	210e      	movs	r1, #14
 8001bd4:	2018      	movs	r0, #24
 8001bd6:	183b      	adds	r3, r7, r0
 8001bd8:	185b      	adds	r3, r3, r1
 8001bda:	801a      	strh	r2, [r3, #0]
							address += rowOffset*k+l;
 8001bdc:	2320      	movs	r3, #32
 8001bde:	2218      	movs	r2, #24
 8001be0:	4694      	mov	ip, r2
 8001be2:	44bc      	add	ip, r7
 8001be4:	4463      	add	r3, ip
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	b25b      	sxtb	r3, r3
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	2226      	movs	r2, #38	; 0x26
 8001bee:	2418      	movs	r4, #24
 8001bf0:	46a4      	mov	ip, r4
 8001bf2:	44bc      	add	ip, r7
 8001bf4:	4462      	add	r2, ip
 8001bf6:	8812      	ldrh	r2, [r2, #0]
 8001bf8:	4353      	muls	r3, r2
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	251f      	movs	r5, #31
 8001bfe:	183b      	adds	r3, r7, r0
 8001c00:	195b      	adds	r3, r3, r5
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	b25b      	sxtb	r3, r3
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	18d3      	adds	r3, r2, r3
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	183b      	adds	r3, r7, r0
 8001c0e:	185b      	adds	r3, r3, r1
 8001c10:	881b      	ldrh	r3, [r3, #0]
 8001c12:	18d3      	adds	r3, r2, r3
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	183b      	adds	r3, r7, r0
 8001c18:	185b      	adds	r3, r3, r1
 8001c1a:	801a      	strh	r2, [r3, #0]
							buffer[address] = colorFixer(bg);
 8001c1c:	4bb5      	ldr	r3, [pc, #724]	; (8001ef4 <drawChar+0x690>)
 8001c1e:	881a      	ldrh	r2, [r3, #0]
 8001c20:	0006      	movs	r6, r0
 8001c22:	183b      	adds	r3, r7, r0
 8001c24:	185b      	adds	r3, r3, r1
 8001c26:	2400      	movs	r4, #0
 8001c28:	5f1c      	ldrsh	r4, [r3, r4]
 8001c2a:	0010      	movs	r0, r2
 8001c2c:	f7ff fb40 	bl	80012b0 <colorFixer>
 8001c30:	0003      	movs	r3, r0
 8001c32:	0019      	movs	r1, r3
 8001c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c36:	0062      	lsls	r2, r4, #1
 8001c38:	52d1      	strh	r1, [r2, r3]
						for (int8_t l = 0; l < textSize; l++) {
 8001c3a:	19bb      	adds	r3, r7, r6
 8001c3c:	195b      	adds	r3, r3, r5
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	b25b      	sxtb	r3, r3
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	3301      	adds	r3, #1
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	19bb      	adds	r3, r7, r6
 8001c4a:	195b      	adds	r3, r3, r5
 8001c4c:	701a      	strb	r2, [r3, #0]
 8001c4e:	231f      	movs	r3, #31
 8001c50:	2218      	movs	r2, #24
 8001c52:	4694      	mov	ip, r2
 8001c54:	44bc      	add	ip, r7
 8001c56:	4463      	add	r3, ip
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	b25b      	sxtb	r3, r3
 8001c5c:	4aa4      	ldr	r2, [pc, #656]	; (8001ef0 <drawChar+0x68c>)
 8001c5e:	7812      	ldrb	r2, [r2, #0]
 8001c60:	4293      	cmp	r3, r2
 8001c62:	db8f      	blt.n	8001b84 <drawChar+0x320>
					for (int8_t k = 0; k < textSize; k++) {
 8001c64:	2120      	movs	r1, #32
 8001c66:	2018      	movs	r0, #24
 8001c68:	183b      	adds	r3, r7, r0
 8001c6a:	185b      	adds	r3, r3, r1
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	b25b      	sxtb	r3, r3
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	3301      	adds	r3, #1
 8001c74:	b2da      	uxtb	r2, r3
 8001c76:	183b      	adds	r3, r7, r0
 8001c78:	185b      	adds	r3, r3, r1
 8001c7a:	701a      	strb	r2, [r3, #0]
 8001c7c:	2320      	movs	r3, #32
 8001c7e:	2218      	movs	r2, #24
 8001c80:	4694      	mov	ip, r2
 8001c82:	44bc      	add	ip, r7
 8001c84:	4463      	add	r3, ip
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	b25b      	sxtb	r3, r3
 8001c8a:	4a99      	ldr	r2, [pc, #612]	; (8001ef0 <drawChar+0x68c>)
 8001c8c:	7812      	ldrb	r2, [r2, #0]
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	da00      	bge.n	8001c94 <drawChar+0x430>
 8001c92:	e757      	b.n	8001b44 <drawChar+0x2e0>
		for (int8_t j=0; j<8; j++, line >>= 1) {
 8001c94:	2123      	movs	r1, #35	; 0x23
 8001c96:	2018      	movs	r0, #24
 8001c98:	183b      	adds	r3, r7, r0
 8001c9a:	185b      	adds	r3, r3, r1
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	b25b      	sxtb	r3, r3
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	183b      	adds	r3, r7, r0
 8001ca8:	185b      	adds	r3, r3, r1
 8001caa:	701a      	strb	r2, [r3, #0]
 8001cac:	2224      	movs	r2, #36	; 0x24
 8001cae:	183b      	adds	r3, r7, r0
 8001cb0:	189b      	adds	r3, r3, r2
 8001cb2:	2118      	movs	r1, #24
 8001cb4:	468c      	mov	ip, r1
 8001cb6:	44bc      	add	ip, r7
 8001cb8:	4462      	add	r2, ip
 8001cba:	7812      	ldrb	r2, [r2, #0]
 8001cbc:	0852      	lsrs	r2, r2, #1
 8001cbe:	701a      	strb	r2, [r3, #0]
 8001cc0:	2323      	movs	r3, #35	; 0x23
 8001cc2:	2218      	movs	r2, #24
 8001cc4:	4694      	mov	ip, r2
 8001cc6:	44bc      	add	ip, r7
 8001cc8:	4463      	add	r3, ip
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	b25b      	sxtb	r3, r3
 8001cce:	2b07      	cmp	r3, #7
 8001cd0:	dc00      	bgt.n	8001cd4 <drawChar+0x470>
 8001cd2:	e634      	b.n	800193e <drawChar+0xda>
	for (int8_t i=0; i<5; i++) {
 8001cd4:	2125      	movs	r1, #37	; 0x25
 8001cd6:	2018      	movs	r0, #24
 8001cd8:	183b      	adds	r3, r7, r0
 8001cda:	185b      	adds	r3, r3, r1
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	b25b      	sxtb	r3, r3
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	b2da      	uxtb	r2, r3
 8001ce6:	183b      	adds	r3, r7, r0
 8001ce8:	185b      	adds	r3, r3, r1
 8001cea:	701a      	strb	r2, [r3, #0]
 8001cec:	2325      	movs	r3, #37	; 0x25
 8001cee:	2218      	movs	r2, #24
 8001cf0:	4694      	mov	ip, r2
 8001cf2:	44bc      	add	ip, r7
 8001cf4:	4463      	add	r3, ip
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	b25b      	sxtb	r3, r3
 8001cfa:	2b04      	cmp	r3, #4
 8001cfc:	dc00      	bgt.n	8001d00 <drawChar+0x49c>
 8001cfe:	e600      	b.n	8001902 <drawChar+0x9e>
		}
	}

	// If opaque, draw vertical line for last column
	// for character 1px kerning
	if (bg != textColor) {
 8001d00:	4b7c      	ldr	r3, [pc, #496]	; (8001ef4 <drawChar+0x690>)
 8001d02:	881a      	ldrh	r2, [r3, #0]
 8001d04:	4b7c      	ldr	r3, [pc, #496]	; (8001ef8 <drawChar+0x694>)
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d100      	bne.n	8001d0e <drawChar+0x4aa>
 8001d0c:	e0ca      	b.n	8001ea4 <drawChar+0x640>
		for (int8_t j = 0; j < 8; j++) {
 8001d0e:	231e      	movs	r3, #30
 8001d10:	2218      	movs	r2, #24
 8001d12:	4694      	mov	ip, r2
 8001d14:	44bc      	add	ip, r7
 8001d16:	4463      	add	r3, ip
 8001d18:	2200      	movs	r2, #0
 8001d1a:	701a      	strb	r2, [r3, #0]
 8001d1c:	e0b8      	b.n	8001e90 <drawChar+0x62c>
			if (textSize == 1) {
 8001d1e:	4b74      	ldr	r3, [pc, #464]	; (8001ef0 <drawChar+0x68c>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d116      	bne.n	8001d54 <drawChar+0x4f0>
				buffer[5+j*6] = colorFixer(bg);
 8001d26:	4b73      	ldr	r3, [pc, #460]	; (8001ef4 <drawChar+0x690>)
 8001d28:	8819      	ldrh	r1, [r3, #0]
 8001d2a:	231e      	movs	r3, #30
 8001d2c:	2218      	movs	r2, #24
 8001d2e:	4694      	mov	ip, r2
 8001d30:	44bc      	add	ip, r7
 8001d32:	4463      	add	r3, ip
 8001d34:	2200      	movs	r2, #0
 8001d36:	569a      	ldrsb	r2, [r3, r2]
 8001d38:	0013      	movs	r3, r2
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	189b      	adds	r3, r3, r2
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	1d5c      	adds	r4, r3, #5
 8001d42:	0008      	movs	r0, r1
 8001d44:	f7ff fab4 	bl	80012b0 <colorFixer>
 8001d48:	0003      	movs	r3, r0
 8001d4a:	0019      	movs	r1, r3
 8001d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d4e:	0062      	lsls	r2, r4, #1
 8001d50:	52d1      	strh	r1, [r2, r3]
 8001d52:	e091      	b.n	8001e78 <drawChar+0x614>
			}
			else {
				for (int8_t k = 0; k < textSize; k++) {
 8001d54:	231d      	movs	r3, #29
 8001d56:	2218      	movs	r2, #24
 8001d58:	4694      	mov	ip, r2
 8001d5a:	44bc      	add	ip, r7
 8001d5c:	4463      	add	r3, ip
 8001d5e:	2200      	movs	r2, #0
 8001d60:	701a      	strb	r2, [r3, #0]
 8001d62:	e07d      	b.n	8001e60 <drawChar+0x5fc>
					for (int8_t l = 0; l < textSize; l++) {
 8001d64:	231c      	movs	r3, #28
 8001d66:	2218      	movs	r2, #24
 8001d68:	4694      	mov	ip, r2
 8001d6a:	44bc      	add	ip, r7
 8001d6c:	4463      	add	r3, ip
 8001d6e:	2200      	movs	r2, #0
 8001d70:	701a      	strb	r2, [r3, #0]
 8001d72:	e05e      	b.n	8001e32 <drawChar+0x5ce>
						address = (textSize*textSize*j*6)+(5*textSize);
 8001d74:	4b5e      	ldr	r3, [pc, #376]	; (8001ef0 <drawChar+0x68c>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	4a5d      	ldr	r2, [pc, #372]	; (8001ef0 <drawChar+0x68c>)
 8001d7c:	7812      	ldrb	r2, [r2, #0]
 8001d7e:	b292      	uxth	r2, r2
 8001d80:	4353      	muls	r3, r2
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	221e      	movs	r2, #30
 8001d86:	2118      	movs	r1, #24
 8001d88:	468c      	mov	ip, r1
 8001d8a:	44bc      	add	ip, r7
 8001d8c:	4462      	add	r2, ip
 8001d8e:	7812      	ldrb	r2, [r2, #0]
 8001d90:	b252      	sxtb	r2, r2
 8001d92:	b292      	uxth	r2, r2
 8001d94:	4353      	muls	r3, r2
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	1c1a      	adds	r2, r3, #0
 8001d9a:	1c13      	adds	r3, r2, #0
 8001d9c:	18db      	adds	r3, r3, r3
 8001d9e:	189b      	adds	r3, r3, r2
 8001da0:	18db      	adds	r3, r3, r3
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	4b52      	ldr	r3, [pc, #328]	; (8001ef0 <drawChar+0x68c>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	1c19      	adds	r1, r3, #0
 8001dac:	0089      	lsls	r1, r1, #2
 8001dae:	18cb      	adds	r3, r1, r3
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	18d3      	adds	r3, r2, r3
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	210e      	movs	r1, #14
 8001db8:	2018      	movs	r0, #24
 8001dba:	183b      	adds	r3, r7, r0
 8001dbc:	185b      	adds	r3, r3, r1
 8001dbe:	801a      	strh	r2, [r3, #0]
						address += rowOffset*k+l;
 8001dc0:	231d      	movs	r3, #29
 8001dc2:	2218      	movs	r2, #24
 8001dc4:	4694      	mov	ip, r2
 8001dc6:	44bc      	add	ip, r7
 8001dc8:	4463      	add	r3, ip
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	b25b      	sxtb	r3, r3
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	2226      	movs	r2, #38	; 0x26
 8001dd2:	2418      	movs	r4, #24
 8001dd4:	46a4      	mov	ip, r4
 8001dd6:	44bc      	add	ip, r7
 8001dd8:	4462      	add	r2, ip
 8001dda:	8812      	ldrh	r2, [r2, #0]
 8001ddc:	4353      	muls	r3, r2
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	251c      	movs	r5, #28
 8001de2:	183b      	adds	r3, r7, r0
 8001de4:	195b      	adds	r3, r3, r5
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	b25b      	sxtb	r3, r3
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	18d3      	adds	r3, r2, r3
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	183b      	adds	r3, r7, r0
 8001df2:	185b      	adds	r3, r3, r1
 8001df4:	881b      	ldrh	r3, [r3, #0]
 8001df6:	18d3      	adds	r3, r2, r3
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	183b      	adds	r3, r7, r0
 8001dfc:	185b      	adds	r3, r3, r1
 8001dfe:	801a      	strh	r2, [r3, #0]
						buffer[address] = colorFixer(bg);
 8001e00:	4b3c      	ldr	r3, [pc, #240]	; (8001ef4 <drawChar+0x690>)
 8001e02:	881a      	ldrh	r2, [r3, #0]
 8001e04:	0006      	movs	r6, r0
 8001e06:	183b      	adds	r3, r7, r0
 8001e08:	185b      	adds	r3, r3, r1
 8001e0a:	2400      	movs	r4, #0
 8001e0c:	5f1c      	ldrsh	r4, [r3, r4]
 8001e0e:	0010      	movs	r0, r2
 8001e10:	f7ff fa4e 	bl	80012b0 <colorFixer>
 8001e14:	0003      	movs	r3, r0
 8001e16:	0019      	movs	r1, r3
 8001e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e1a:	0062      	lsls	r2, r4, #1
 8001e1c:	52d1      	strh	r1, [r2, r3]
					for (int8_t l = 0; l < textSize; l++) {
 8001e1e:	19bb      	adds	r3, r7, r6
 8001e20:	195b      	adds	r3, r3, r5
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	b25b      	sxtb	r3, r3
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	3301      	adds	r3, #1
 8001e2a:	b2da      	uxtb	r2, r3
 8001e2c:	19bb      	adds	r3, r7, r6
 8001e2e:	195b      	adds	r3, r3, r5
 8001e30:	701a      	strb	r2, [r3, #0]
 8001e32:	231c      	movs	r3, #28
 8001e34:	2218      	movs	r2, #24
 8001e36:	4694      	mov	ip, r2
 8001e38:	44bc      	add	ip, r7
 8001e3a:	4463      	add	r3, ip
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	b25b      	sxtb	r3, r3
 8001e40:	4a2b      	ldr	r2, [pc, #172]	; (8001ef0 <drawChar+0x68c>)
 8001e42:	7812      	ldrb	r2, [r2, #0]
 8001e44:	4293      	cmp	r3, r2
 8001e46:	db95      	blt.n	8001d74 <drawChar+0x510>
				for (int8_t k = 0; k < textSize; k++) {
 8001e48:	211d      	movs	r1, #29
 8001e4a:	2018      	movs	r0, #24
 8001e4c:	183b      	adds	r3, r7, r0
 8001e4e:	185b      	adds	r3, r3, r1
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	b25b      	sxtb	r3, r3
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	3301      	adds	r3, #1
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	183b      	adds	r3, r7, r0
 8001e5c:	185b      	adds	r3, r3, r1
 8001e5e:	701a      	strb	r2, [r3, #0]
 8001e60:	231d      	movs	r3, #29
 8001e62:	2218      	movs	r2, #24
 8001e64:	4694      	mov	ip, r2
 8001e66:	44bc      	add	ip, r7
 8001e68:	4463      	add	r3, ip
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	b25b      	sxtb	r3, r3
 8001e6e:	4a20      	ldr	r2, [pc, #128]	; (8001ef0 <drawChar+0x68c>)
 8001e70:	7812      	ldrb	r2, [r2, #0]
 8001e72:	4293      	cmp	r3, r2
 8001e74:	da00      	bge.n	8001e78 <drawChar+0x614>
 8001e76:	e775      	b.n	8001d64 <drawChar+0x500>
		for (int8_t j = 0; j < 8; j++) {
 8001e78:	211e      	movs	r1, #30
 8001e7a:	2018      	movs	r0, #24
 8001e7c:	183b      	adds	r3, r7, r0
 8001e7e:	185b      	adds	r3, r3, r1
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	b25b      	sxtb	r3, r3
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	3301      	adds	r3, #1
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	183b      	adds	r3, r7, r0
 8001e8c:	185b      	adds	r3, r3, r1
 8001e8e:	701a      	strb	r2, [r3, #0]
 8001e90:	231e      	movs	r3, #30
 8001e92:	2218      	movs	r2, #24
 8001e94:	4694      	mov	ip, r2
 8001e96:	44bc      	add	ip, r7
 8001e98:	4463      	add	r3, ip
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	b25b      	sxtb	r3, r3
 8001e9e:	2b07      	cmp	r3, #7
 8001ea0:	dc00      	bgt.n	8001ea4 <drawChar+0x640>
 8001ea2:	e73c      	b.n	8001d1e <drawChar+0x4ba>
				}
			}
		}
	}

	drawBuffer(cursorX, cursorY, 6*textSize, 8*textSize, buffer, bufferSize, hspi);
 8001ea4:	4b15      	ldr	r3, [pc, #84]	; (8001efc <drawChar+0x698>)
 8001ea6:	7818      	ldrb	r0, [r3, #0]
 8001ea8:	4b15      	ldr	r3, [pc, #84]	; (8001f00 <drawChar+0x69c>)
 8001eaa:	7819      	ldrb	r1, [r3, #0]
 8001eac:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <drawChar+0x68c>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	1c1a      	adds	r2, r3, #0
 8001eb2:	1c13      	adds	r3, r2, #0
 8001eb4:	18db      	adds	r3, r3, r3
 8001eb6:	189b      	adds	r3, r3, r2
 8001eb8:	18db      	adds	r3, r3, r3
 8001eba:	b2dc      	uxtb	r4, r3
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <drawChar+0x68c>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	b2dd      	uxtb	r5, r3
 8001ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	9202      	str	r2, [sp, #8]
 8001eca:	221a      	movs	r2, #26
 8001ecc:	2618      	movs	r6, #24
 8001ece:	46b4      	mov	ip, r6
 8001ed0:	44bc      	add	ip, r7
 8001ed2:	4462      	add	r2, ip
 8001ed4:	8812      	ldrh	r2, [r2, #0]
 8001ed6:	9201      	str	r2, [sp, #4]
 8001ed8:	9300      	str	r3, [sp, #0]
 8001eda:	002b      	movs	r3, r5
 8001edc:	0022      	movs	r2, r4
 8001ede:	f7ff fb58 	bl	8001592 <drawBuffer>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	469d      	mov	sp, r3
}
 8001ee6:	46c0      	nop			; (mov r8, r8)
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	b011      	add	sp, #68	; 0x44
 8001eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001eee:	46c0      	nop			; (mov r8, r8)
 8001ef0:	200000ee 	.word	0x200000ee
 8001ef4:	200000f2 	.word	0x200000f2
 8001ef8:	200000f0 	.word	0x200000f0
 8001efc:	200000ec 	.word	0x200000ec
 8001f00:	200000ed 	.word	0x200000ed

08001f04 <drawText>:

// draws character strings
void drawText(const char *str, SPI_HandleTypeDef *hspi) {
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
	for (int i = 0; str[i] != '\0'; i++) {
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	e01d      	b.n	8001f50 <drawText+0x4c>
		drawChar(str[i], hspi);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	18d3      	adds	r3, r2, r3
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	0011      	movs	r1, r2
 8001f20:	0018      	movs	r0, r3
 8001f22:	f7ff fc9f 	bl	8001864 <drawChar>

		// moves cursor on every character print so it's not printed to the same place
		setCursor(cursorX+textSize*6, cursorY);
 8001f26:	4b0f      	ldr	r3, [pc, #60]	; (8001f64 <drawText+0x60>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	1c1a      	adds	r2, r3, #0
 8001f2c:	1c13      	adds	r3, r2, #0
 8001f2e:	18db      	adds	r3, r3, r3
 8001f30:	189b      	adds	r3, r3, r2
 8001f32:	18db      	adds	r3, r3, r3
 8001f34:	b2da      	uxtb	r2, r3
 8001f36:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <drawText+0x64>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	18d3      	adds	r3, r2, r3
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <drawText+0x68>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	0019      	movs	r1, r3
 8001f44:	0010      	movs	r0, r2
 8001f46:	f000 f9c5 	bl	80022d4 <setCursor>
	for (int i = 0; str[i] != '\0'; i++) {
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	18d3      	adds	r3, r2, r3
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1db      	bne.n	8001f14 <drawText+0x10>
	}
}
 8001f5c:	46c0      	nop			; (mov r8, r8)
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	b004      	add	sp, #16
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	200000ee 	.word	0x200000ee
 8001f68:	200000ec 	.word	0x200000ec
 8001f6c:	200000ed 	.word	0x200000ed

08001f70 <drawTextAt>:

// drawText, but coordinates as arguments. coordinates are for upper left bound
void drawTextAt(uint8_t x, uint8_t y, const char *str, SPI_HandleTypeDef *hspi) {
 8001f70:	b590      	push	{r4, r7, lr}
 8001f72:	b087      	sub	sp, #28
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60ba      	str	r2, [r7, #8]
 8001f78:	607b      	str	r3, [r7, #4]
 8001f7a:	240f      	movs	r4, #15
 8001f7c:	193b      	adds	r3, r7, r4
 8001f7e:	1c02      	adds	r2, r0, #0
 8001f80:	701a      	strb	r2, [r3, #0]
 8001f82:	200e      	movs	r0, #14
 8001f84:	183b      	adds	r3, r7, r0
 8001f86:	1c0a      	adds	r2, r1, #0
 8001f88:	701a      	strb	r2, [r3, #0]
	// add text wrap
	int i = 0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	617b      	str	r3, [r7, #20]
	setCursor(x,y);
 8001f8e:	183b      	adds	r3, r7, r0
 8001f90:	781a      	ldrb	r2, [r3, #0]
 8001f92:	193b      	adds	r3, r7, r4
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	0011      	movs	r1, r2
 8001f98:	0018      	movs	r0, r3
 8001f9a:	f000 f99b 	bl	80022d4 <setCursor>
	for (i = 0; str[i] != '\0'; i++) {
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	617b      	str	r3, [r7, #20]
 8001fa2:	e01d      	b.n	8001fe0 <drawTextAt+0x70>
		drawChar(str[i], hspi);
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	18d3      	adds	r3, r2, r3
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	0011      	movs	r1, r2
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	f7ff fc57 	bl	8001864 <drawChar>
		setCursor(cursorX+textSize*6, cursorY);
 8001fb6:	4b0f      	ldr	r3, [pc, #60]	; (8001ff4 <drawTextAt+0x84>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	1c1a      	adds	r2, r3, #0
 8001fbc:	1c13      	adds	r3, r2, #0
 8001fbe:	18db      	adds	r3, r3, r3
 8001fc0:	189b      	adds	r3, r3, r2
 8001fc2:	18db      	adds	r3, r3, r3
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	4b0c      	ldr	r3, [pc, #48]	; (8001ff8 <drawTextAt+0x88>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	18d3      	adds	r3, r2, r3
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <drawTextAt+0x8c>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	0019      	movs	r1, r3
 8001fd4:	0010      	movs	r0, r2
 8001fd6:	f000 f97d 	bl	80022d4 <setCursor>
	for (i = 0; str[i] != '\0'; i++) {
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	617b      	str	r3, [r7, #20]
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	68ba      	ldr	r2, [r7, #8]
 8001fe4:	18d3      	adds	r3, r2, r3
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1db      	bne.n	8001fa4 <drawTextAt+0x34>
	}
}
 8001fec:	46c0      	nop			; (mov r8, r8)
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	b007      	add	sp, #28
 8001ff2:	bd90      	pop	{r4, r7, pc}
 8001ff4:	200000ee 	.word	0x200000ee
 8001ff8:	200000ec 	.word	0x200000ec
 8001ffc:	200000ed 	.word	0x200000ed

08002000 <drawCenteredText>:

// draws text centered on an x coordinate. y is upper bound of box
void drawCenteredText(uint8_t x_center, uint8_t y, const char *str, SPI_HandleTypeDef *hspi) {
 8002000:	b590      	push	{r4, r7, lr}
 8002002:	b089      	sub	sp, #36	; 0x24
 8002004:	af00      	add	r7, sp, #0
 8002006:	60ba      	str	r2, [r7, #8]
 8002008:	607b      	str	r3, [r7, #4]
 800200a:	230f      	movs	r3, #15
 800200c:	18fb      	adds	r3, r7, r3
 800200e:	1c02      	adds	r2, r0, #0
 8002010:	701a      	strb	r2, [r3, #0]
 8002012:	240e      	movs	r4, #14
 8002014:	193b      	adds	r3, r7, r4
 8002016:	1c0a      	adds	r2, r1, #0
 8002018:	701a      	strb	r2, [r3, #0]
	uint8_t strSize = strlen(str);
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	0018      	movs	r0, r3
 800201e:	f7fe f873 	bl	8000108 <strlen>
 8002022:	0002      	movs	r2, r0
 8002024:	231f      	movs	r3, #31
 8002026:	18fb      	adds	r3, r7, r3
 8002028:	701a      	strb	r2, [r3, #0]
	// bounds checking. text box needed to print text should not end up out of bounds
	// also calculating what bounds of text box should be
	if (y+textSize*8 > HEIGHT) return;
 800202a:	193b      	adds	r3, r7, r4
 800202c:	781a      	ldrb	r2, [r3, #0]
 800202e:	4b24      	ldr	r3, [pc, #144]	; (80020c0 <drawCenteredText+0xc0>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	18d3      	adds	r3, r2, r3
 8002036:	2ba0      	cmp	r3, #160	; 0xa0
 8002038:	dc3a      	bgt.n	80020b0 <drawCenteredText+0xb0>
	int leftBound = x_center-(strSize*textSize*6)/2;
 800203a:	230f      	movs	r3, #15
 800203c:	18fb      	adds	r3, r7, r3
 800203e:	7819      	ldrb	r1, [r3, #0]
 8002040:	231f      	movs	r3, #31
 8002042:	18fb      	adds	r3, r7, r3
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	4a1e      	ldr	r2, [pc, #120]	; (80020c0 <drawCenteredText+0xc0>)
 8002048:	7812      	ldrb	r2, [r2, #0]
 800204a:	435a      	muls	r2, r3
 800204c:	0013      	movs	r3, r2
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	189b      	adds	r3, r3, r2
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	d500      	bpl.n	8002058 <drawCenteredText+0x58>
 8002056:	3301      	adds	r3, #1
 8002058:	105b      	asrs	r3, r3, #1
 800205a:	425b      	negs	r3, r3
 800205c:	18cb      	adds	r3, r1, r3
 800205e:	61bb      	str	r3, [r7, #24]
	int rightBound = x_center+(strSize*textSize*6)/2;
 8002060:	230f      	movs	r3, #15
 8002062:	18fb      	adds	r3, r7, r3
 8002064:	7819      	ldrb	r1, [r3, #0]
 8002066:	231f      	movs	r3, #31
 8002068:	18fb      	adds	r3, r7, r3
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	4a14      	ldr	r2, [pc, #80]	; (80020c0 <drawCenteredText+0xc0>)
 800206e:	7812      	ldrb	r2, [r2, #0]
 8002070:	435a      	muls	r2, r3
 8002072:	0013      	movs	r3, r2
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	189b      	adds	r3, r3, r2
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	d500      	bpl.n	800207e <drawCenteredText+0x7e>
 800207c:	3301      	adds	r3, #1
 800207e:	105b      	asrs	r3, r3, #1
 8002080:	18cb      	adds	r3, r1, r3
 8002082:	617b      	str	r3, [r7, #20]
	if (leftBound < 0) return;
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	2b00      	cmp	r3, #0
 8002088:	db14      	blt.n	80020b4 <drawCenteredText+0xb4>
	if (rightBound > WIDTH) return;
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	2b80      	cmp	r3, #128	; 0x80
 800208e:	dc13      	bgt.n	80020b8 <drawCenteredText+0xb8>

	setCursor(leftBound, y);
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	b2da      	uxtb	r2, r3
 8002094:	230e      	movs	r3, #14
 8002096:	18fb      	adds	r3, r7, r3
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	0019      	movs	r1, r3
 800209c:	0010      	movs	r0, r2
 800209e:	f000 f919 	bl	80022d4 <setCursor>
	drawText(str, hspi);
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	0011      	movs	r1, r2
 80020a8:	0018      	movs	r0, r3
 80020aa:	f7ff ff2b 	bl	8001f04 <drawText>
 80020ae:	e004      	b.n	80020ba <drawCenteredText+0xba>
	if (y+textSize*8 > HEIGHT) return;
 80020b0:	46c0      	nop			; (mov r8, r8)
 80020b2:	e002      	b.n	80020ba <drawCenteredText+0xba>
	if (leftBound < 0) return;
 80020b4:	46c0      	nop			; (mov r8, r8)
 80020b6:	e000      	b.n	80020ba <drawCenteredText+0xba>
	if (rightBound > WIDTH) return;
 80020b8:	46c0      	nop			; (mov r8, r8)
}
 80020ba:	46bd      	mov	sp, r7
 80020bc:	b009      	add	sp, #36	; 0x24
 80020be:	bd90      	pop	{r4, r7, pc}
 80020c0:	200000ee 	.word	0x200000ee

080020c4 <drawCenteredTextWithPadding>:

// drawCenteredText, but background is filled to left and right of box
// used for cases where you're printing strings to the same place, but they have different sizes
void drawCenteredTextWithPadding(uint8_t x_center, uint8_t y, uint8_t maxLength, const char *str, SPI_HandleTypeDef *hspi) {
 80020c4:	b5b0      	push	{r4, r5, r7, lr}
 80020c6:	b088      	sub	sp, #32
 80020c8:	af02      	add	r7, sp, #8
 80020ca:	0004      	movs	r4, r0
 80020cc:	0008      	movs	r0, r1
 80020ce:	0011      	movs	r1, r2
 80020d0:	603b      	str	r3, [r7, #0]
 80020d2:	1dfb      	adds	r3, r7, #7
 80020d4:	1c22      	adds	r2, r4, #0
 80020d6:	701a      	strb	r2, [r3, #0]
 80020d8:	1dbb      	adds	r3, r7, #6
 80020da:	1c02      	adds	r2, r0, #0
 80020dc:	701a      	strb	r2, [r3, #0]
 80020de:	1d7b      	adds	r3, r7, #5
 80020e0:	1c0a      	adds	r2, r1, #0
 80020e2:	701a      	strb	r2, [r3, #0]
	// bounds checking. text box needed to print text should not end up out of bounds
	if (y+textSize*8 > HEIGHT) return;
 80020e4:	1dbb      	adds	r3, r7, #6
 80020e6:	781a      	ldrb	r2, [r3, #0]
 80020e8:	4b60      	ldr	r3, [pc, #384]	; (800226c <drawCenteredTextWithPadding+0x1a8>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	18d3      	adds	r3, r2, r3
 80020f0:	2ba0      	cmp	r3, #160	; 0xa0
 80020f2:	dd00      	ble.n	80020f6 <drawCenteredTextWithPadding+0x32>
 80020f4:	e0af      	b.n	8002256 <drawCenteredTextWithPadding+0x192>
	int leftBound = x_center-(maxLength*textSize*6)/2;
 80020f6:	1dfb      	adds	r3, r7, #7
 80020f8:	7819      	ldrb	r1, [r3, #0]
 80020fa:	1d7b      	adds	r3, r7, #5
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	4a5b      	ldr	r2, [pc, #364]	; (800226c <drawCenteredTextWithPadding+0x1a8>)
 8002100:	7812      	ldrb	r2, [r2, #0]
 8002102:	435a      	muls	r2, r3
 8002104:	0013      	movs	r3, r2
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	189b      	adds	r3, r3, r2
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	d500      	bpl.n	8002110 <drawCenteredTextWithPadding+0x4c>
 800210e:	3301      	adds	r3, #1
 8002110:	105b      	asrs	r3, r3, #1
 8002112:	425b      	negs	r3, r3
 8002114:	18cb      	adds	r3, r1, r3
 8002116:	617b      	str	r3, [r7, #20]
	int rightBound = x_center+(maxLength*textSize*6)/2;
 8002118:	1dfb      	adds	r3, r7, #7
 800211a:	7819      	ldrb	r1, [r3, #0]
 800211c:	1d7b      	adds	r3, r7, #5
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	4a52      	ldr	r2, [pc, #328]	; (800226c <drawCenteredTextWithPadding+0x1a8>)
 8002122:	7812      	ldrb	r2, [r2, #0]
 8002124:	435a      	muls	r2, r3
 8002126:	0013      	movs	r3, r2
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	189b      	adds	r3, r3, r2
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	d500      	bpl.n	8002132 <drawCenteredTextWithPadding+0x6e>
 8002130:	3301      	adds	r3, #1
 8002132:	105b      	asrs	r3, r3, #1
 8002134:	18cb      	adds	r3, r1, r3
 8002136:	613b      	str	r3, [r7, #16]
	if (leftBound < 0) return;
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	2b00      	cmp	r3, #0
 800213c:	da00      	bge.n	8002140 <drawCenteredTextWithPadding+0x7c>
 800213e:	e08c      	b.n	800225a <drawCenteredTextWithPadding+0x196>
	if (rightBound > WIDTH) return;
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	2b80      	cmp	r3, #128	; 0x80
 8002144:	dd00      	ble.n	8002148 <drawCenteredTextWithPadding+0x84>
 8002146:	e08a      	b.n	800225e <drawCenteredTextWithPadding+0x19a>

	uint8_t strSize = strlen(str);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	0018      	movs	r0, r3
 800214c:	f7fd ffdc 	bl	8000108 <strlen>
 8002150:	0002      	movs	r2, r0
 8002152:	210f      	movs	r1, #15
 8002154:	187b      	adds	r3, r7, r1
 8002156:	701a      	strb	r2, [r3, #0]
	if (maxLength < strSize) return;		// size should not be greater than max
 8002158:	1d7a      	adds	r2, r7, #5
 800215a:	187b      	adds	r3, r7, r1
 800215c:	7812      	ldrb	r2, [r2, #0]
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	429a      	cmp	r2, r3
 8002162:	d200      	bcs.n	8002166 <drawCenteredTextWithPadding+0xa2>
 8002164:	e07d      	b.n	8002262 <drawCenteredTextWithPadding+0x19e>

	// draw left and right padding
	uint8_t diff = maxLength-strSize;
 8002166:	240e      	movs	r4, #14
 8002168:	193b      	adds	r3, r7, r4
 800216a:	1d79      	adds	r1, r7, #5
 800216c:	220f      	movs	r2, #15
 800216e:	18ba      	adds	r2, r7, r2
 8002170:	7809      	ldrb	r1, [r1, #0]
 8002172:	7812      	ldrb	r2, [r2, #0]
 8002174:	1a8a      	subs	r2, r1, r2
 8002176:	701a      	strb	r2, [r3, #0]
	fillRect(leftBound, y, diff*textSize*6/2, textSize*8, bg, hspi);		// math out of order to accomodate diff/2 being a non-int
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	b2d8      	uxtb	r0, r3
 800217c:	193b      	adds	r3, r7, r4
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	4a3a      	ldr	r2, [pc, #232]	; (800226c <drawCenteredTextWithPadding+0x1a8>)
 8002182:	7812      	ldrb	r2, [r2, #0]
 8002184:	435a      	muls	r2, r3
 8002186:	0013      	movs	r3, r2
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	189b      	adds	r3, r3, r2
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	d500      	bpl.n	8002192 <drawCenteredTextWithPadding+0xce>
 8002190:	3301      	adds	r3, #1
 8002192:	105b      	asrs	r3, r3, #1
 8002194:	b2dc      	uxtb	r4, r3
 8002196:	4b35      	ldr	r3, [pc, #212]	; (800226c <drawCenteredTextWithPadding+0x1a8>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	b2dd      	uxtb	r5, r3
 800219e:	4b34      	ldr	r3, [pc, #208]	; (8002270 <drawCenteredTextWithPadding+0x1ac>)
 80021a0:	881b      	ldrh	r3, [r3, #0]
 80021a2:	1dba      	adds	r2, r7, #6
 80021a4:	7811      	ldrb	r1, [r2, #0]
 80021a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021a8:	9201      	str	r2, [sp, #4]
 80021aa:	9300      	str	r3, [sp, #0]
 80021ac:	002b      	movs	r3, r5
 80021ae:	0022      	movs	r2, r4
 80021b0:	f7ff fa91 	bl	80016d6 <fillRect>
	fillRect(rightBound-diff*textSize*6/2, y, diff*textSize*6/2, textSize*8, bg, hspi);
 80021b4:	230e      	movs	r3, #14
 80021b6:	18fb      	adds	r3, r7, r3
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	4a2c      	ldr	r2, [pc, #176]	; (800226c <drawCenteredTextWithPadding+0x1a8>)
 80021bc:	7812      	ldrb	r2, [r2, #0]
 80021be:	435a      	muls	r2, r3
 80021c0:	0013      	movs	r3, r2
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	189b      	adds	r3, r3, r2
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	d500      	bpl.n	80021cc <drawCenteredTextWithPadding+0x108>
 80021ca:	3301      	adds	r3, #1
 80021cc:	105b      	asrs	r3, r3, #1
 80021ce:	425b      	negs	r3, r3
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	18d3      	adds	r3, r2, r3
 80021d8:	b2d8      	uxtb	r0, r3
 80021da:	230e      	movs	r3, #14
 80021dc:	18fb      	adds	r3, r7, r3
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	4a22      	ldr	r2, [pc, #136]	; (800226c <drawCenteredTextWithPadding+0x1a8>)
 80021e2:	7812      	ldrb	r2, [r2, #0]
 80021e4:	435a      	muls	r2, r3
 80021e6:	0013      	movs	r3, r2
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	189b      	adds	r3, r3, r2
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	d500      	bpl.n	80021f2 <drawCenteredTextWithPadding+0x12e>
 80021f0:	3301      	adds	r3, #1
 80021f2:	105b      	asrs	r3, r3, #1
 80021f4:	b2dc      	uxtb	r4, r3
 80021f6:	4b1d      	ldr	r3, [pc, #116]	; (800226c <drawCenteredTextWithPadding+0x1a8>)
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	b2dd      	uxtb	r5, r3
 80021fe:	4b1c      	ldr	r3, [pc, #112]	; (8002270 <drawCenteredTextWithPadding+0x1ac>)
 8002200:	881b      	ldrh	r3, [r3, #0]
 8002202:	1dba      	adds	r2, r7, #6
 8002204:	7811      	ldrb	r1, [r2, #0]
 8002206:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002208:	9201      	str	r2, [sp, #4]
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	002b      	movs	r3, r5
 800220e:	0022      	movs	r2, r4
 8002210:	f7ff fa61 	bl	80016d6 <fillRect>

	int textLeftBound = x_center-(strSize*textSize*6)/2;
 8002214:	1dfb      	adds	r3, r7, #7
 8002216:	7819      	ldrb	r1, [r3, #0]
 8002218:	230f      	movs	r3, #15
 800221a:	18fb      	adds	r3, r7, r3
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	4a13      	ldr	r2, [pc, #76]	; (800226c <drawCenteredTextWithPadding+0x1a8>)
 8002220:	7812      	ldrb	r2, [r2, #0]
 8002222:	435a      	muls	r2, r3
 8002224:	0013      	movs	r3, r2
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	189b      	adds	r3, r3, r2
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	d500      	bpl.n	8002230 <drawCenteredTextWithPadding+0x16c>
 800222e:	3301      	adds	r3, #1
 8002230:	105b      	asrs	r3, r3, #1
 8002232:	425b      	negs	r3, r3
 8002234:	18cb      	adds	r3, r1, r3
 8002236:	60bb      	str	r3, [r7, #8]
	setCursor(textLeftBound, y);
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	b2da      	uxtb	r2, r3
 800223c:	1dbb      	adds	r3, r7, #6
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	0019      	movs	r1, r3
 8002242:	0010      	movs	r0, r2
 8002244:	f000 f846 	bl	80022d4 <setCursor>
	drawText(str, hspi);
 8002248:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	0011      	movs	r1, r2
 800224e:	0018      	movs	r0, r3
 8002250:	f7ff fe58 	bl	8001f04 <drawText>
 8002254:	e006      	b.n	8002264 <drawCenteredTextWithPadding+0x1a0>
	if (y+textSize*8 > HEIGHT) return;
 8002256:	46c0      	nop			; (mov r8, r8)
 8002258:	e004      	b.n	8002264 <drawCenteredTextWithPadding+0x1a0>
	if (leftBound < 0) return;
 800225a:	46c0      	nop			; (mov r8, r8)
 800225c:	e002      	b.n	8002264 <drawCenteredTextWithPadding+0x1a0>
	if (rightBound > WIDTH) return;
 800225e:	46c0      	nop			; (mov r8, r8)
 8002260:	e000      	b.n	8002264 <drawCenteredTextWithPadding+0x1a0>
	if (maxLength < strSize) return;		// size should not be greater than max
 8002262:	46c0      	nop			; (mov r8, r8)
}
 8002264:	46bd      	mov	sp, r7
 8002266:	b006      	add	sp, #24
 8002268:	bdb0      	pop	{r4, r5, r7, pc}
 800226a:	46c0      	nop			; (mov r8, r8)
 800226c:	200000ee 	.word	0x200000ee
 8002270:	200000f2 	.word	0x200000f2

08002274 <clearTextLine>:

// clear a line of text. y gives upper bound of text box
void clearTextLine(uint8_t y, SPI_HandleTypeDef *hspi) {
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af02      	add	r7, sp, #8
 800227a:	0002      	movs	r2, r0
 800227c:	6039      	str	r1, [r7, #0]
 800227e:	1dfb      	adds	r3, r7, #7
 8002280:	701a      	strb	r2, [r3, #0]
	fillRect(0, y, WIDTH, textSize*8, bg, hspi);
 8002282:	4b0a      	ldr	r3, [pc, #40]	; (80022ac <clearTextLine+0x38>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	b2d8      	uxtb	r0, r3
 800228a:	4b09      	ldr	r3, [pc, #36]	; (80022b0 <clearTextLine+0x3c>)
 800228c:	881b      	ldrh	r3, [r3, #0]
 800228e:	1dfa      	adds	r2, r7, #7
 8002290:	7811      	ldrb	r1, [r2, #0]
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	9201      	str	r2, [sp, #4]
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	0003      	movs	r3, r0
 800229a:	2280      	movs	r2, #128	; 0x80
 800229c:	2000      	movs	r0, #0
 800229e:	f7ff fa1a 	bl	80016d6 <fillRect>
}
 80022a2:	46c0      	nop			; (mov r8, r8)
 80022a4:	46bd      	mov	sp, r7
 80022a6:	b002      	add	sp, #8
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	46c0      	nop			; (mov r8, r8)
 80022ac:	200000ee 	.word	0x200000ee
 80022b0:	200000f2 	.word	0x200000f2

080022b4 <setBackgroundColor>:

// ---- getters and setters ----
// sets static variables
void setBackgroundColor(uint16_t color) {bg = color;}
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	0002      	movs	r2, r0
 80022bc:	1dbb      	adds	r3, r7, #6
 80022be:	801a      	strh	r2, [r3, #0]
 80022c0:	4b03      	ldr	r3, [pc, #12]	; (80022d0 <setBackgroundColor+0x1c>)
 80022c2:	1dba      	adds	r2, r7, #6
 80022c4:	8812      	ldrh	r2, [r2, #0]
 80022c6:	801a      	strh	r2, [r3, #0]
 80022c8:	46c0      	nop			; (mov r8, r8)
 80022ca:	46bd      	mov	sp, r7
 80022cc:	b002      	add	sp, #8
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	200000f2 	.word	0x200000f2

080022d4 <setCursor>:

void setCursor(uint8_t x, uint8_t y) {
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	0002      	movs	r2, r0
 80022dc:	1dfb      	adds	r3, r7, #7
 80022de:	701a      	strb	r2, [r3, #0]
 80022e0:	1dbb      	adds	r3, r7, #6
 80022e2:	1c0a      	adds	r2, r1, #0
 80022e4:	701a      	strb	r2, [r3, #0]
	cursorX = x;
 80022e6:	4b06      	ldr	r3, [pc, #24]	; (8002300 <setCursor+0x2c>)
 80022e8:	1dfa      	adds	r2, r7, #7
 80022ea:	7812      	ldrb	r2, [r2, #0]
 80022ec:	701a      	strb	r2, [r3, #0]
	cursorY = y;
 80022ee:	4b05      	ldr	r3, [pc, #20]	; (8002304 <setCursor+0x30>)
 80022f0:	1dba      	adds	r2, r7, #6
 80022f2:	7812      	ldrb	r2, [r2, #0]
 80022f4:	701a      	strb	r2, [r3, #0]
}
 80022f6:	46c0      	nop			; (mov r8, r8)
 80022f8:	46bd      	mov	sp, r7
 80022fa:	b002      	add	sp, #8
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	46c0      	nop			; (mov r8, r8)
 8002300:	200000ec 	.word	0x200000ec
 8002304:	200000ed 	.word	0x200000ed

08002308 <setTextSize>:

void setTextSize(uint8_t size) {textSize = size;}
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	0002      	movs	r2, r0
 8002310:	1dfb      	adds	r3, r7, #7
 8002312:	701a      	strb	r2, [r3, #0]
 8002314:	4b03      	ldr	r3, [pc, #12]	; (8002324 <setTextSize+0x1c>)
 8002316:	1dfa      	adds	r2, r7, #7
 8002318:	7812      	ldrb	r2, [r2, #0]
 800231a:	701a      	strb	r2, [r3, #0]
 800231c:	46c0      	nop			; (mov r8, r8)
 800231e:	46bd      	mov	sp, r7
 8002320:	b002      	add	sp, #8
 8002322:	bd80      	pop	{r7, pc}
 8002324:	200000ee 	.word	0x200000ee

08002328 <setTextColor>:

void setTextColor(uint16_t color) {textColor = color;}
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	0002      	movs	r2, r0
 8002330:	1dbb      	adds	r3, r7, #6
 8002332:	801a      	strh	r2, [r3, #0]
 8002334:	4b03      	ldr	r3, [pc, #12]	; (8002344 <setTextColor+0x1c>)
 8002336:	1dba      	adds	r2, r7, #6
 8002338:	8812      	ldrh	r2, [r2, #0]
 800233a:	801a      	strh	r2, [r3, #0]
 800233c:	46c0      	nop			; (mov r8, r8)
 800233e:	46bd      	mov	sp, r7
 8002340:	b002      	add	sp, #8
 8002342:	bd80      	pop	{r7, pc}
 8002344:	200000f0 	.word	0x200000f0

08002348 <batteryManager>:

static const float batteryCapacity[];
static uint16_t batteryCapacityArraySize = 179;

// spi used to turn display on/off and drawing battery graphic
void batteryManager(ADC_HandleTypeDef *hadc, SPI_HandleTypeDef *hspi, TIM_HandleTypeDef *timerStopwatchTim, TIM_HandleTypeDef *backlightTim) {
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
 8002354:	603b      	str	r3, [r7, #0]
	if (canSampleBattery) {
 8002356:	4b09      	ldr	r3, [pc, #36]	; (800237c <batteryManager+0x34>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b00      	cmp	r3, #0
 800235e:	d009      	beq.n	8002374 <batteryManager+0x2c>
		canSampleBattery = 0;
 8002360:	4b06      	ldr	r3, [pc, #24]	; (800237c <batteryManager+0x34>)
 8002362:	2200      	movs	r2, #0
 8002364:	701a      	strb	r2, [r3, #0]
//			}
//			HAL_GPIO_WritePin(POWER_SUPPLY_ENABLE_PORT, POWER_SUPPLY_ENABLE_PIN, GPIO_PIN_SET);
//			bState = batteryNormal;
//		}

		drawBattery(battPercentage, hspi);
 8002366:	4b06      	ldr	r3, [pc, #24]	; (8002380 <batteryManager+0x38>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	0011      	movs	r1, r2
 800236e:	0018      	movs	r0, r3
 8002370:	f003 fa82 	bl	8005878 <drawBattery>
	}
}
 8002374:	46c0      	nop			; (mov r8, r8)
 8002376:	46bd      	mov	sp, r7
 8002378:	b004      	add	sp, #16
 800237a:	bd80      	pop	{r7, pc}
 800237c:	2000013d 	.word	0x2000013d
 8002380:	2000013c 	.word	0x2000013c

08002384 <setTime>:

static uint16_t century = 20;		// holds upper 2 digits of year that RTC doesn't hold
// ---- RTC setters ----
// set rtc time. uses personal struct as arg
// assumes t's fields are aleady set to something or not null
void setTime(struct times *t, RTC_HandleTypeDef *hrtc) {
 8002384:	b590      	push	{r4, r7, lr}
 8002386:	b089      	sub	sp, #36	; 0x24
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
	RTC_TimeTypeDef stime = {0};
 800238e:	210c      	movs	r1, #12
 8002390:	000c      	movs	r4, r1
 8002392:	187b      	adds	r3, r7, r1
 8002394:	0018      	movs	r0, r3
 8002396:	2314      	movs	r3, #20
 8002398:	001a      	movs	r2, r3
 800239a:	2100      	movs	r1, #0
 800239c:	f007 ff5f 	bl	800a25e <memset>

	stime.Hours = t->hr;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	781a      	ldrb	r2, [r3, #0]
 80023a4:	0021      	movs	r1, r4
 80023a6:	187b      	adds	r3, r7, r1
 80023a8:	701a      	strb	r2, [r3, #0]
	stime.Minutes = t->min;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	785a      	ldrb	r2, [r3, #1]
 80023ae:	187b      	adds	r3, r7, r1
 80023b0:	705a      	strb	r2, [r3, #1]
	stime.Seconds = t->sec;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	789a      	ldrb	r2, [r3, #2]
 80023b6:	187b      	adds	r3, r7, r1
 80023b8:	709a      	strb	r2, [r3, #2]

	stime.TimeFormat = RTC_HOURFORMAT_24;
 80023ba:	187b      	adds	r3, r7, r1
 80023bc:	2200      	movs	r2, #0
 80023be:	70da      	strb	r2, [r3, #3]

	// not really using
	stime.SubSeconds = 0;
 80023c0:	187b      	adds	r3, r7, r1
 80023c2:	2200      	movs	r2, #0
 80023c4:	605a      	str	r2, [r3, #4]
	stime.SecondFraction = 0;
 80023c6:	187b      	adds	r3, r7, r1
 80023c8:	2200      	movs	r2, #0
 80023ca:	609a      	str	r2, [r3, #8]
	stime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80023cc:	187b      	adds	r3, r7, r1
 80023ce:	2200      	movs	r2, #0
 80023d0:	60da      	str	r2, [r3, #12]
	stime.StoreOperation = RTC_STOREOPERATION_SET;
 80023d2:	187b      	adds	r3, r7, r1
 80023d4:	2280      	movs	r2, #128	; 0x80
 80023d6:	02d2      	lsls	r2, r2, #11
 80023d8:	611a      	str	r2, [r3, #16]

	HAL_RTC_SetTime(hrtc, &stime, RTC_FORMAT_BIN);
 80023da:	1879      	adds	r1, r7, r1
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	2200      	movs	r2, #0
 80023e0:	0018      	movs	r0, r3
 80023e2:	f005 fd03 	bl	8007dec <HAL_RTC_SetTime>
}
 80023e6:	46c0      	nop			; (mov r8, r8)
 80023e8:	46bd      	mov	sp, r7
 80023ea:	b009      	add	sp, #36	; 0x24
 80023ec:	bd90      	pop	{r4, r7, pc}
	...

080023f0 <setDate>:

// set rtc date. uses personal struct as arg
// assumes struct has values
void setDate(struct dates *d, RTC_HandleTypeDef *hrtc) {
 80023f0:	b590      	push	{r4, r7, lr}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
	RTC_DateTypeDef sdate = {0};
 80023fa:	240c      	movs	r4, #12
 80023fc:	193b      	adds	r3, r7, r4
 80023fe:	2200      	movs	r2, #0
 8002400:	601a      	str	r2, [r3, #0]

	sdate.Month = d->month;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	789a      	ldrb	r2, [r3, #2]
 8002406:	193b      	adds	r3, r7, r4
 8002408:	705a      	strb	r2, [r3, #1]
	sdate.Date = d->date;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	78da      	ldrb	r2, [r3, #3]
 800240e:	193b      	adds	r3, r7, r4
 8002410:	709a      	strb	r2, [r3, #2]
	sdate.Year = d->yr % 100; 		// set only between 0-99. limitation of RTC
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	881b      	ldrh	r3, [r3, #0]
 8002416:	2164      	movs	r1, #100	; 0x64
 8002418:	0018      	movs	r0, r3
 800241a:	f7fd ff03 	bl	8000224 <__aeabi_uidivmod>
 800241e:	000b      	movs	r3, r1
 8002420:	b29b      	uxth	r3, r3
 8002422:	b2da      	uxtb	r2, r3
 8002424:	193b      	adds	r3, r7, r4
 8002426:	70da      	strb	r2, [r3, #3]
	century = d->yr / 100;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	881b      	ldrh	r3, [r3, #0]
 800242c:	2164      	movs	r1, #100	; 0x64
 800242e:	0018      	movs	r0, r3
 8002430:	f7fd fe72 	bl	8000118 <__udivsi3>
 8002434:	0003      	movs	r3, r0
 8002436:	b29a      	uxth	r2, r3
 8002438:	4b0c      	ldr	r3, [pc, #48]	; (800246c <setDate+0x7c>)
 800243a:	801a      	strh	r2, [r3, #0]

	sdate.WeekDay = weekdayCalculator(d->yr, d->month, d->date);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	8818      	ldrh	r0, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	7899      	ldrb	r1, [r3, #2]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	78db      	ldrb	r3, [r3, #3]
 8002448:	001a      	movs	r2, r3
 800244a:	f000 fb2f 	bl	8002aac <weekdayCalculator>
 800244e:	0003      	movs	r3, r0
 8002450:	001a      	movs	r2, r3
 8002452:	193b      	adds	r3, r7, r4
 8002454:	701a      	strb	r2, [r3, #0]

	HAL_RTC_SetDate(hrtc, &sdate, RTC_FORMAT_BIN);
 8002456:	1939      	adds	r1, r7, r4
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	2200      	movs	r2, #0
 800245c:	0018      	movs	r0, r3
 800245e:	f005 fde5 	bl	800802c <HAL_RTC_SetDate>
}
 8002462:	46c0      	nop			; (mov r8, r8)
 8002464:	46bd      	mov	sp, r7
 8002466:	b005      	add	sp, #20
 8002468:	bd90      	pop	{r4, r7, pc}
 800246a:	46c0      	nop			; (mov r8, r8)
 800246c:	20000000 	.word	0x20000000

08002470 <setDateTime>:

void setDateTime(struct dates *d, struct times *t, RTC_HandleTypeDef *hrtc) {
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
	setDate(d, hrtc);
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	0011      	movs	r1, r2
 8002482:	0018      	movs	r0, r3
 8002484:	f7ff ffb4 	bl	80023f0 <setDate>
	setTime(t, hrtc);
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	0011      	movs	r1, r2
 800248e:	0018      	movs	r0, r3
 8002490:	f7ff ff78 	bl	8002384 <setTime>
}
 8002494:	46c0      	nop			; (mov r8, r8)
 8002496:	46bd      	mov	sp, r7
 8002498:	b004      	add	sp, #16
 800249a:	bd80      	pop	{r7, pc}

0800249c <setAlarm>:

// for time of day+week
void setAlarm(struct alarmTimes *a, RTC_HandleTypeDef *hrtc) {
 800249c:	b5b0      	push	{r4, r5, r7, lr}
 800249e:	b092      	sub	sp, #72	; 0x48
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
	RTC_AlarmTypeDef salarm = {0};
 80024a6:	2520      	movs	r5, #32
 80024a8:	197b      	adds	r3, r7, r5
 80024aa:	0018      	movs	r0, r3
 80024ac:	2328      	movs	r3, #40	; 0x28
 80024ae:	001a      	movs	r2, r3
 80024b0:	2100      	movs	r1, #0
 80024b2:	f007 fed4 	bl	800a25e <memset>
	RTC_TimeTypeDef salarmtime = {0};
 80024b6:	210c      	movs	r1, #12
 80024b8:	000c      	movs	r4, r1
 80024ba:	187b      	adds	r3, r7, r1
 80024bc:	0018      	movs	r0, r3
 80024be:	2314      	movs	r3, #20
 80024c0:	001a      	movs	r2, r3
 80024c2:	2100      	movs	r1, #0
 80024c4:	f007 fecb 	bl	800a25e <memset>

	salarmtime.Hours = a->hr;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	781a      	ldrb	r2, [r3, #0]
 80024cc:	0021      	movs	r1, r4
 80024ce:	187b      	adds	r3, r7, r1
 80024d0:	701a      	strb	r2, [r3, #0]
	salarmtime.Minutes = a->min;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	785a      	ldrb	r2, [r3, #1]
 80024d6:	187b      	adds	r3, r7, r1
 80024d8:	705a      	strb	r2, [r3, #1]
	salarmtime.Seconds = a->sec;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	789a      	ldrb	r2, [r3, #2]
 80024de:	187b      	adds	r3, r7, r1
 80024e0:	709a      	strb	r2, [r3, #2]

	salarmtime.TimeFormat = RTC_HOURFORMAT_24;
 80024e2:	187b      	adds	r3, r7, r1
 80024e4:	2200      	movs	r2, #0
 80024e6:	70da      	strb	r2, [r3, #3]
	salarmtime.SubSeconds = 0;
 80024e8:	187b      	adds	r3, r7, r1
 80024ea:	2200      	movs	r2, #0
 80024ec:	605a      	str	r2, [r3, #4]
	salarmtime.SecondFraction = 0;
 80024ee:	187b      	adds	r3, r7, r1
 80024f0:	2200      	movs	r2, #0
 80024f2:	609a      	str	r2, [r3, #8]
	salarmtime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80024f4:	187b      	adds	r3, r7, r1
 80024f6:	2200      	movs	r2, #0
 80024f8:	60da      	str	r2, [r3, #12]
	salarmtime.StoreOperation = RTC_STOREOPERATION_RESET;
 80024fa:	187b      	adds	r3, r7, r1
 80024fc:	2200      	movs	r2, #0
 80024fe:	611a      	str	r2, [r3, #16]

	salarm.AlarmTime = salarmtime;
 8002500:	197b      	adds	r3, r7, r5
 8002502:	187a      	adds	r2, r7, r1
 8002504:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002506:	c313      	stmia	r3!, {r0, r1, r4}
 8002508:	ca03      	ldmia	r2!, {r0, r1}
 800250a:	c303      	stmia	r3!, {r0, r1}
	salarm.AlarmMask = RTC_ALARMMASK_NONE;		// allows comparison for all fields (sec, min, hour, weekday)
 800250c:	197b      	adds	r3, r7, r5
 800250e:	2200      	movs	r2, #0
 8002510:	615a      	str	r2, [r3, #20]
	salarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002512:	197b      	adds	r3, r7, r5
 8002514:	2200      	movs	r2, #0
 8002516:	619a      	str	r2, [r3, #24]
	salarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 8002518:	197b      	adds	r3, r7, r5
 800251a:	2280      	movs	r2, #128	; 0x80
 800251c:	05d2      	lsls	r2, r2, #23
 800251e:	61da      	str	r2, [r3, #28]
	salarm.AlarmDateWeekDay = a->weekday;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	78d9      	ldrb	r1, [r3, #3]
 8002524:	197b      	adds	r3, r7, r5
 8002526:	2220      	movs	r2, #32
 8002528:	5499      	strb	r1, [r3, r2]
	salarm.Alarm = RTC_ALARM_A;
 800252a:	197b      	adds	r3, r7, r5
 800252c:	2280      	movs	r2, #128	; 0x80
 800252e:	0052      	lsls	r2, r2, #1
 8002530:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_RTC_SetAlarm_IT(hrtc, &salarm, RTC_FORMAT_BIN);
 8002532:	1979      	adds	r1, r7, r5
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	2200      	movs	r2, #0
 8002538:	0018      	movs	r0, r3
 800253a:	f005 fe73 	bl	8008224 <HAL_RTC_SetAlarm_IT>
}
 800253e:	46c0      	nop			; (mov r8, r8)
 8002540:	46bd      	mov	sp, r7
 8002542:	b012      	add	sp, #72	; 0x48
 8002544:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002548 <setClockAlarm>:

// set an alarm for the next second for triggering display updates
void setClockAlarm(RTC_HandleTypeDef *hrtc) {
 8002548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800254a:	b097      	sub	sp, #92	; 0x5c
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
	RTC_AlarmTypeDef salarm = {0};
 8002550:	232c      	movs	r3, #44	; 0x2c
 8002552:	18fb      	adds	r3, r7, r3
 8002554:	0018      	movs	r0, r3
 8002556:	2328      	movs	r3, #40	; 0x28
 8002558:	001a      	movs	r2, r3
 800255a:	2100      	movs	r1, #0
 800255c:	f007 fe7f 	bl	800a25e <memset>
	RTC_TimeTypeDef salarmtime = {0};
 8002560:	2318      	movs	r3, #24
 8002562:	18fb      	adds	r3, r7, r3
 8002564:	0018      	movs	r0, r3
 8002566:	2314      	movs	r3, #20
 8002568:	001a      	movs	r2, r3
 800256a:	2100      	movs	r1, #0
 800256c:	f007 fe77 	bl	800a25e <memset>

	// pull current time
	struct dates currentDate = {0};
 8002570:	2410      	movs	r4, #16
 8002572:	193b      	adds	r3, r7, r4
 8002574:	0018      	movs	r0, r3
 8002576:	2306      	movs	r3, #6
 8002578:	001a      	movs	r2, r3
 800257a:	2100      	movs	r1, #0
 800257c:	f007 fe6f 	bl	800a25e <memset>
	struct times currentTime = {0};
 8002580:	250c      	movs	r5, #12
 8002582:	197b      	adds	r3, r7, r5
 8002584:	0018      	movs	r0, r3
 8002586:	2303      	movs	r3, #3
 8002588:	001a      	movs	r2, r3
 800258a:	2100      	movs	r1, #0
 800258c:	f007 fe67 	bl	800a25e <memset>
	getDateTime(&currentDate, &currentTime, hrtc);
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	1979      	adds	r1, r7, r5
 8002594:	193b      	adds	r3, r7, r4
 8002596:	0018      	movs	r0, r3
 8002598:	f000 f99a 	bl	80028d0 <getDateTime>

	// start setting alarm
	struct alarmTimes a = {0};
 800259c:	2308      	movs	r3, #8
 800259e:	18fb      	adds	r3, r7, r3
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
	uint8_t s,m,h,w;
	// set for only 1/min on low battery mode
	if (bState == batteryLow || bState == batteryReallyLow) {
 80025a4:	4ba1      	ldr	r3, [pc, #644]	; (800282c <setClockAlarm+0x2e4>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d003      	beq.n	80025b4 <setClockAlarm+0x6c>
 80025ac:	4b9f      	ldr	r3, [pc, #636]	; (800282c <setClockAlarm+0x2e4>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d164      	bne.n	800267e <setClockAlarm+0x136>
		s = currentTime.sec;
 80025b4:	2157      	movs	r1, #87	; 0x57
 80025b6:	187b      	adds	r3, r7, r1
 80025b8:	250c      	movs	r5, #12
 80025ba:	197a      	adds	r2, r7, r5
 80025bc:	7892      	ldrb	r2, [r2, #2]
 80025be:	701a      	strb	r2, [r3, #0]
		m = currentTime.min + s/60 + 1;
 80025c0:	197b      	adds	r3, r7, r5
 80025c2:	785c      	ldrb	r4, [r3, #1]
 80025c4:	187b      	adds	r3, r7, r1
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	213c      	movs	r1, #60	; 0x3c
 80025ca:	0018      	movs	r0, r3
 80025cc:	f7fd fda4 	bl	8000118 <__udivsi3>
 80025d0:	0003      	movs	r3, r0
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	18e3      	adds	r3, r4, r3
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	2156      	movs	r1, #86	; 0x56
 80025da:	187b      	adds	r3, r7, r1
 80025dc:	3201      	adds	r2, #1
 80025de:	701a      	strb	r2, [r3, #0]
		h = currentTime.hr + m/60;
 80025e0:	197b      	adds	r3, r7, r5
 80025e2:	781c      	ldrb	r4, [r3, #0]
 80025e4:	187b      	adds	r3, r7, r1
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	213c      	movs	r1, #60	; 0x3c
 80025ea:	0018      	movs	r0, r3
 80025ec:	f7fd fd94 	bl	8000118 <__udivsi3>
 80025f0:	0003      	movs	r3, r0
 80025f2:	b2da      	uxtb	r2, r3
 80025f4:	2155      	movs	r1, #85	; 0x55
 80025f6:	187b      	adds	r3, r7, r1
 80025f8:	18a2      	adds	r2, r4, r2
 80025fa:	701a      	strb	r2, [r3, #0]
		w = currentDate.weekday + h/24;
 80025fc:	2310      	movs	r3, #16
 80025fe:	18fb      	adds	r3, r7, r3
 8002600:	791c      	ldrb	r4, [r3, #4]
 8002602:	187b      	adds	r3, r7, r1
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	2118      	movs	r1, #24
 8002608:	0018      	movs	r0, r3
 800260a:	f7fd fd85 	bl	8000118 <__udivsi3>
 800260e:	0003      	movs	r3, r0
 8002610:	b2da      	uxtb	r2, r3
 8002612:	2354      	movs	r3, #84	; 0x54
 8002614:	18fb      	adds	r3, r7, r3
 8002616:	18a2      	adds	r2, r4, r2
 8002618:	701a      	strb	r2, [r3, #0]

		// for transitioning between centuries
		if (currentTime.min == 59 &&
 800261a:	197b      	adds	r3, r7, r5
 800261c:	785b      	ldrb	r3, [r3, #1]
 800261e:	2b3b      	cmp	r3, #59	; 0x3b
 8002620:	d000      	beq.n	8002624 <setClockAlarm+0xdc>
 8002622:	e091      	b.n	8002748 <setClockAlarm+0x200>
			currentTime.hr == 23 &&
 8002624:	230c      	movs	r3, #12
 8002626:	18fb      	adds	r3, r7, r3
 8002628:	781b      	ldrb	r3, [r3, #0]
		if (currentTime.min == 59 &&
 800262a:	2b17      	cmp	r3, #23
 800262c:	d000      	beq.n	8002630 <setClockAlarm+0xe8>
 800262e:	e08b      	b.n	8002748 <setClockAlarm+0x200>
			currentDate.yr % 100 == 99 &&
 8002630:	2310      	movs	r3, #16
 8002632:	18fb      	adds	r3, r7, r3
 8002634:	881b      	ldrh	r3, [r3, #0]
 8002636:	2164      	movs	r1, #100	; 0x64
 8002638:	0018      	movs	r0, r3
 800263a:	f7fd fdf3 	bl	8000224 <__aeabi_uidivmod>
 800263e:	000b      	movs	r3, r1
 8002640:	b29b      	uxth	r3, r3
			currentTime.hr == 23 &&
 8002642:	2b63      	cmp	r3, #99	; 0x63
 8002644:	d000      	beq.n	8002648 <setClockAlarm+0x100>
 8002646:	e07f      	b.n	8002748 <setClockAlarm+0x200>
			currentDate.month == 12 &&
 8002648:	2310      	movs	r3, #16
 800264a:	18fb      	adds	r3, r7, r3
 800264c:	789b      	ldrb	r3, [r3, #2]
			currentDate.yr % 100 == 99 &&
 800264e:	2b0c      	cmp	r3, #12
 8002650:	d000      	beq.n	8002654 <setClockAlarm+0x10c>
 8002652:	e079      	b.n	8002748 <setClockAlarm+0x200>
			currentDate.date == maxDaysInMonth(currentDate.month, currentDate.yr)) {
 8002654:	2110      	movs	r1, #16
 8002656:	187b      	adds	r3, r7, r1
 8002658:	78dc      	ldrb	r4, [r3, #3]
 800265a:	187b      	adds	r3, r7, r1
 800265c:	789a      	ldrb	r2, [r3, #2]
 800265e:	187b      	adds	r3, r7, r1
 8002660:	881b      	ldrh	r3, [r3, #0]
 8002662:	0019      	movs	r1, r3
 8002664:	0010      	movs	r0, r2
 8002666:	f000 fa75 	bl	8002b54 <maxDaysInMonth>
 800266a:	0003      	movs	r3, r0
			currentDate.month == 12 &&
 800266c:	429c      	cmp	r4, r3
 800266e:	d16b      	bne.n	8002748 <setClockAlarm+0x200>
			century++;
 8002670:	4b6f      	ldr	r3, [pc, #444]	; (8002830 <setClockAlarm+0x2e8>)
 8002672:	881b      	ldrh	r3, [r3, #0]
 8002674:	3301      	adds	r3, #1
 8002676:	b29a      	uxth	r2, r3
 8002678:	4b6d      	ldr	r3, [pc, #436]	; (8002830 <setClockAlarm+0x2e8>)
 800267a:	801a      	strh	r2, [r3, #0]
		if (currentTime.min == 59 &&
 800267c:	e064      	b.n	8002748 <setClockAlarm+0x200>
		}
	}
	// else set 1/s
	else {
		s = currentTime.sec + 1;
 800267e:	250c      	movs	r5, #12
 8002680:	197b      	adds	r3, r7, r5
 8002682:	789a      	ldrb	r2, [r3, #2]
 8002684:	2157      	movs	r1, #87	; 0x57
 8002686:	187b      	adds	r3, r7, r1
 8002688:	3201      	adds	r2, #1
 800268a:	701a      	strb	r2, [r3, #0]
		m = currentTime.min + s/60;
 800268c:	197b      	adds	r3, r7, r5
 800268e:	785c      	ldrb	r4, [r3, #1]
 8002690:	187b      	adds	r3, r7, r1
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	213c      	movs	r1, #60	; 0x3c
 8002696:	0018      	movs	r0, r3
 8002698:	f7fd fd3e 	bl	8000118 <__udivsi3>
 800269c:	0003      	movs	r3, r0
 800269e:	b2da      	uxtb	r2, r3
 80026a0:	2156      	movs	r1, #86	; 0x56
 80026a2:	187b      	adds	r3, r7, r1
 80026a4:	18a2      	adds	r2, r4, r2
 80026a6:	701a      	strb	r2, [r3, #0]
		h = currentTime.hr + m/60;
 80026a8:	197b      	adds	r3, r7, r5
 80026aa:	781c      	ldrb	r4, [r3, #0]
 80026ac:	187b      	adds	r3, r7, r1
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	213c      	movs	r1, #60	; 0x3c
 80026b2:	0018      	movs	r0, r3
 80026b4:	f7fd fd30 	bl	8000118 <__udivsi3>
 80026b8:	0003      	movs	r3, r0
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	2155      	movs	r1, #85	; 0x55
 80026be:	187b      	adds	r3, r7, r1
 80026c0:	18a2      	adds	r2, r4, r2
 80026c2:	701a      	strb	r2, [r3, #0]
		w = currentDate.weekday + h/24;
 80026c4:	2310      	movs	r3, #16
 80026c6:	18fb      	adds	r3, r7, r3
 80026c8:	791c      	ldrb	r4, [r3, #4]
 80026ca:	187b      	adds	r3, r7, r1
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2118      	movs	r1, #24
 80026d0:	0018      	movs	r0, r3
 80026d2:	f7fd fd21 	bl	8000118 <__udivsi3>
 80026d6:	0003      	movs	r3, r0
 80026d8:	b2da      	uxtb	r2, r3
 80026da:	2354      	movs	r3, #84	; 0x54
 80026dc:	18fb      	adds	r3, r7, r3
 80026de:	18a2      	adds	r2, r4, r2
 80026e0:	701a      	strb	r2, [r3, #0]

		// for transitioning between centuries
		if (currentTime.sec == 59 &&
 80026e2:	197b      	adds	r3, r7, r5
 80026e4:	789b      	ldrb	r3, [r3, #2]
 80026e6:	2b3b      	cmp	r3, #59	; 0x3b
 80026e8:	d12f      	bne.n	800274a <setClockAlarm+0x202>
			currentTime.min == 59 &&
 80026ea:	230c      	movs	r3, #12
 80026ec:	18fb      	adds	r3, r7, r3
 80026ee:	785b      	ldrb	r3, [r3, #1]
		if (currentTime.sec == 59 &&
 80026f0:	2b3b      	cmp	r3, #59	; 0x3b
 80026f2:	d12a      	bne.n	800274a <setClockAlarm+0x202>
			currentTime.hr == 23 &&
 80026f4:	230c      	movs	r3, #12
 80026f6:	18fb      	adds	r3, r7, r3
 80026f8:	781b      	ldrb	r3, [r3, #0]
			currentTime.min == 59 &&
 80026fa:	2b17      	cmp	r3, #23
 80026fc:	d125      	bne.n	800274a <setClockAlarm+0x202>
			currentDate.yr % 100 == 99 &&
 80026fe:	2310      	movs	r3, #16
 8002700:	18fb      	adds	r3, r7, r3
 8002702:	881b      	ldrh	r3, [r3, #0]
 8002704:	2164      	movs	r1, #100	; 0x64
 8002706:	0018      	movs	r0, r3
 8002708:	f7fd fd8c 	bl	8000224 <__aeabi_uidivmod>
 800270c:	000b      	movs	r3, r1
 800270e:	b29b      	uxth	r3, r3
			currentTime.hr == 23 &&
 8002710:	2b63      	cmp	r3, #99	; 0x63
 8002712:	d11a      	bne.n	800274a <setClockAlarm+0x202>
			currentDate.month == 12 &&
 8002714:	2310      	movs	r3, #16
 8002716:	18fb      	adds	r3, r7, r3
 8002718:	789b      	ldrb	r3, [r3, #2]
			currentDate.yr % 100 == 99 &&
 800271a:	2b0c      	cmp	r3, #12
 800271c:	d115      	bne.n	800274a <setClockAlarm+0x202>
			currentDate.date == maxDaysInMonth(currentDate.month, currentDate.yr)) {
 800271e:	2110      	movs	r1, #16
 8002720:	187b      	adds	r3, r7, r1
 8002722:	78dc      	ldrb	r4, [r3, #3]
 8002724:	187b      	adds	r3, r7, r1
 8002726:	789a      	ldrb	r2, [r3, #2]
 8002728:	187b      	adds	r3, r7, r1
 800272a:	881b      	ldrh	r3, [r3, #0]
 800272c:	0019      	movs	r1, r3
 800272e:	0010      	movs	r0, r2
 8002730:	f000 fa10 	bl	8002b54 <maxDaysInMonth>
 8002734:	0003      	movs	r3, r0
			currentDate.month == 12 &&
 8002736:	429c      	cmp	r4, r3
 8002738:	d107      	bne.n	800274a <setClockAlarm+0x202>
			century++;
 800273a:	4b3d      	ldr	r3, [pc, #244]	; (8002830 <setClockAlarm+0x2e8>)
 800273c:	881b      	ldrh	r3, [r3, #0]
 800273e:	3301      	adds	r3, #1
 8002740:	b29a      	uxth	r2, r3
 8002742:	4b3b      	ldr	r3, [pc, #236]	; (8002830 <setClockAlarm+0x2e8>)
 8002744:	801a      	strh	r2, [r3, #0]
 8002746:	e000      	b.n	800274a <setClockAlarm+0x202>
		if (currentTime.min == 59 &&
 8002748:	46c0      	nop			; (mov r8, r8)
		}
	}
	a.sec = s % 60;
 800274a:	2357      	movs	r3, #87	; 0x57
 800274c:	18fb      	adds	r3, r7, r3
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	213c      	movs	r1, #60	; 0x3c
 8002752:	0018      	movs	r0, r3
 8002754:	f7fd fd66 	bl	8000224 <__aeabi_uidivmod>
 8002758:	000b      	movs	r3, r1
 800275a:	b2da      	uxtb	r2, r3
 800275c:	2408      	movs	r4, #8
 800275e:	193b      	adds	r3, r7, r4
 8002760:	709a      	strb	r2, [r3, #2]
	a.min = m % 60;
 8002762:	2356      	movs	r3, #86	; 0x56
 8002764:	18fb      	adds	r3, r7, r3
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	213c      	movs	r1, #60	; 0x3c
 800276a:	0018      	movs	r0, r3
 800276c:	f7fd fd5a 	bl	8000224 <__aeabi_uidivmod>
 8002770:	000b      	movs	r3, r1
 8002772:	b2da      	uxtb	r2, r3
 8002774:	193b      	adds	r3, r7, r4
 8002776:	705a      	strb	r2, [r3, #1]
	a.hr = h % 24;
 8002778:	2355      	movs	r3, #85	; 0x55
 800277a:	18fb      	adds	r3, r7, r3
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	2118      	movs	r1, #24
 8002780:	0018      	movs	r0, r3
 8002782:	f7fd fd4f 	bl	8000224 <__aeabi_uidivmod>
 8002786:	000b      	movs	r3, r1
 8002788:	b2da      	uxtb	r2, r3
 800278a:	193b      	adds	r3, r7, r4
 800278c:	701a      	strb	r2, [r3, #0]
	a.weekday = (w-1) % 7 + 1;
 800278e:	2354      	movs	r3, #84	; 0x54
 8002790:	18fb      	adds	r3, r7, r3
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	3b01      	subs	r3, #1
 8002796:	2107      	movs	r1, #7
 8002798:	0018      	movs	r0, r3
 800279a:	f7fd fe2d 	bl	80003f8 <__aeabi_idivmod>
 800279e:	000b      	movs	r3, r1
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	3301      	adds	r3, #1
 80027a4:	b2da      	uxtb	r2, r3
 80027a6:	0020      	movs	r0, r4
 80027a8:	183b      	adds	r3, r7, r0
 80027aa:	70da      	strb	r2, [r3, #3]

	salarmtime.Hours = a.hr;
 80027ac:	183b      	adds	r3, r7, r0
 80027ae:	781a      	ldrb	r2, [r3, #0]
 80027b0:	2118      	movs	r1, #24
 80027b2:	187b      	adds	r3, r7, r1
 80027b4:	701a      	strb	r2, [r3, #0]
	salarmtime.Minutes = a.min;
 80027b6:	183b      	adds	r3, r7, r0
 80027b8:	785a      	ldrb	r2, [r3, #1]
 80027ba:	187b      	adds	r3, r7, r1
 80027bc:	705a      	strb	r2, [r3, #1]
	salarmtime.Seconds = a.sec;
 80027be:	183b      	adds	r3, r7, r0
 80027c0:	789a      	ldrb	r2, [r3, #2]
 80027c2:	187b      	adds	r3, r7, r1
 80027c4:	709a      	strb	r2, [r3, #2]
	salarmtime.TimeFormat = RTC_HOURFORMAT_24;
 80027c6:	187b      	adds	r3, r7, r1
 80027c8:	2200      	movs	r2, #0
 80027ca:	70da      	strb	r2, [r3, #3]
	salarmtime.SubSeconds = 0;
 80027cc:	187b      	adds	r3, r7, r1
 80027ce:	2200      	movs	r2, #0
 80027d0:	605a      	str	r2, [r3, #4]
	salarmtime.SecondFraction = 0;
 80027d2:	187b      	adds	r3, r7, r1
 80027d4:	2200      	movs	r2, #0
 80027d6:	609a      	str	r2, [r3, #8]
	salarmtime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80027d8:	187b      	adds	r3, r7, r1
 80027da:	2200      	movs	r2, #0
 80027dc:	60da      	str	r2, [r3, #12]
	salarmtime.StoreOperation = RTC_STOREOPERATION_RESET;
 80027de:	187b      	adds	r3, r7, r1
 80027e0:	2200      	movs	r2, #0
 80027e2:	611a      	str	r2, [r3, #16]

	salarm.AlarmTime = salarmtime;
 80027e4:	242c      	movs	r4, #44	; 0x2c
 80027e6:	193b      	adds	r3, r7, r4
 80027e8:	187a      	adds	r2, r7, r1
 80027ea:	ca62      	ldmia	r2!, {r1, r5, r6}
 80027ec:	c362      	stmia	r3!, {r1, r5, r6}
 80027ee:	ca22      	ldmia	r2!, {r1, r5}
 80027f0:	c322      	stmia	r3!, {r1, r5}
	salarm.AlarmMask = RTC_ALARMMASK_NONE;
 80027f2:	193b      	adds	r3, r7, r4
 80027f4:	2200      	movs	r2, #0
 80027f6:	615a      	str	r2, [r3, #20]
	salarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80027f8:	193b      	adds	r3, r7, r4
 80027fa:	2200      	movs	r2, #0
 80027fc:	619a      	str	r2, [r3, #24]
	salarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 80027fe:	193b      	adds	r3, r7, r4
 8002800:	2280      	movs	r2, #128	; 0x80
 8002802:	05d2      	lsls	r2, r2, #23
 8002804:	61da      	str	r2, [r3, #28]
	salarm.AlarmDateWeekDay = a.weekday;
 8002806:	183b      	adds	r3, r7, r0
 8002808:	78d9      	ldrb	r1, [r3, #3]
 800280a:	193b      	adds	r3, r7, r4
 800280c:	2220      	movs	r2, #32
 800280e:	5499      	strb	r1, [r3, r2]
	salarm.Alarm = RTC_ALARM_B;
 8002810:	193b      	adds	r3, r7, r4
 8002812:	2280      	movs	r2, #128	; 0x80
 8002814:	0092      	lsls	r2, r2, #2
 8002816:	625a      	str	r2, [r3, #36]	; 0x24

	// do nothing until done
	HAL_RTC_SetAlarm_IT(hrtc, &salarm, RTC_FORMAT_BIN);
 8002818:	1939      	adds	r1, r7, r4
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	0018      	movs	r0, r3
 8002820:	f005 fd00 	bl	8008224 <HAL_RTC_SetAlarm_IT>
}
 8002824:	46c0      	nop			; (mov r8, r8)
 8002826:	46bd      	mov	sp, r7
 8002828:	b017      	add	sp, #92	; 0x5c
 800282a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800282c:	2000014d 	.word	0x2000014d
 8002830:	20000000 	.word	0x20000000

08002834 <HAL_RTC_AlarmAEventCallback>:
// ---- end of RTC setters ----

// ---- callbacks for interrupts ----
// used for alarm function in project
// meant to send signal to use motor
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED1_PORT, LED1_PIN);
 800283c:	23a0      	movs	r3, #160	; 0xa0
 800283e:	05db      	lsls	r3, r3, #23
 8002840:	2120      	movs	r1, #32
 8002842:	0018      	movs	r0, r3
 8002844:	f004 f9c2 	bl	8006bcc <HAL_GPIO_TogglePin>
	isAlarmDone = 1;
 8002848:	4b04      	ldr	r3, [pc, #16]	; (800285c <HAL_RTC_AlarmAEventCallback+0x28>)
 800284a:	2201      	movs	r2, #1
 800284c:	701a      	strb	r2, [r3, #0]
	updateFace.alarm = 1;
 800284e:	4b04      	ldr	r3, [pc, #16]	; (8002860 <HAL_RTC_AlarmAEventCallback+0x2c>)
 8002850:	2201      	movs	r2, #1
 8002852:	709a      	strb	r2, [r3, #2]
}
 8002854:	46c0      	nop			; (mov r8, r8)
 8002856:	46bd      	mov	sp, r7
 8002858:	b002      	add	sp, #8
 800285a:	bd80      	pop	{r7, pc}
 800285c:	2000013e 	.word	0x2000013e
 8002860:	20000140 	.word	0x20000140

08002864 <HAL_RTCEx_AlarmBEventCallback>:

// used to trigger display refresh every second. used because then it's synchronous with RTC updates
void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc) {
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
	updateFace.clock = 1;
 800286c:	4b05      	ldr	r3, [pc, #20]	; (8002884 <HAL_RTCEx_AlarmBEventCallback+0x20>)
 800286e:	2201      	movs	r2, #1
 8002870:	701a      	strb	r2, [r3, #0]
	setClockAlarm(hrtc);		// set something for next second
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	0018      	movs	r0, r3
 8002876:	f7ff fe67 	bl	8002548 <setClockAlarm>
}
 800287a:	46c0      	nop			; (mov r8, r8)
 800287c:	46bd      	mov	sp, r7
 800287e:	b002      	add	sp, #8
 8002880:	bd80      	pop	{r7, pc}
 8002882:	46c0      	nop			; (mov r8, r8)
 8002884:	20000140 	.word	0x20000140

08002888 <getTime>:
// ---- end of callbacks ----

// ---- RTC getters ----
void getTime(struct times *t, RTC_HandleTypeDef *hrtc) {
 8002888:	b590      	push	{r4, r7, lr}
 800288a:	b089      	sub	sp, #36	; 0x24
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
	RTC_TimeTypeDef stime;

	// programming manual says to read time after date. something shadow registers.
	// not done automatically in HAL
	HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN);
 8002892:	210c      	movs	r1, #12
 8002894:	000c      	movs	r4, r1
 8002896:	1879      	adds	r1, r7, r1
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	2200      	movs	r2, #0
 800289c:	0018      	movs	r0, r3
 800289e:	f005 fb69 	bl	8007f74 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, NULL, RTC_FORMAT_BIN);
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	2200      	movs	r2, #0
 80028a6:	2100      	movs	r1, #0
 80028a8:	0018      	movs	r0, r3
 80028aa:	f005 fc6d 	bl	8008188 <HAL_RTC_GetDate>

	t->hr = stime.Hours;
 80028ae:	0021      	movs	r1, r4
 80028b0:	187b      	adds	r3, r7, r1
 80028b2:	781a      	ldrb	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	701a      	strb	r2, [r3, #0]
	t->min = stime.Minutes;
 80028b8:	187b      	adds	r3, r7, r1
 80028ba:	785a      	ldrb	r2, [r3, #1]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	705a      	strb	r2, [r3, #1]
	t->sec = stime.Seconds;
 80028c0:	187b      	adds	r3, r7, r1
 80028c2:	789a      	ldrb	r2, [r3, #2]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	709a      	strb	r2, [r3, #2]
}
 80028c8:	46c0      	nop			; (mov r8, r8)
 80028ca:	46bd      	mov	sp, r7
 80028cc:	b009      	add	sp, #36	; 0x24
 80028ce:	bd90      	pop	{r4, r7, pc}

080028d0 <getDateTime>:
	d->date = sdate.Date;
	d->weekday = sdate.WeekDay;
}

// not using getDate and getTime for possible efficiency
void getDateTime(struct dates *d, struct times *t, RTC_HandleTypeDef *hrtc) {
 80028d0:	b5b0      	push	{r4, r5, r7, lr}
 80028d2:	b08a      	sub	sp, #40	; 0x28
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
	RTC_DateTypeDef sdate;
	RTC_TimeTypeDef stime;

	// programming manual says to read time after date. something shadow registers.
	// not done automatically in HAL
	HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN);
 80028dc:	2510      	movs	r5, #16
 80028de:	1979      	adds	r1, r7, r5
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	0018      	movs	r0, r3
 80028e6:	f005 fb45 	bl	8007f74 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &sdate, RTC_FORMAT_BIN);
 80028ea:	2124      	movs	r1, #36	; 0x24
 80028ec:	000c      	movs	r4, r1
 80028ee:	1879      	adds	r1, r7, r1
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	0018      	movs	r0, r3
 80028f6:	f005 fc47 	bl	8008188 <HAL_RTC_GetDate>

	// pulls last 2 digits from RTC and upper 2 digits from static variable
	d->yr = century*100 + sdate.Year;
 80028fa:	4b14      	ldr	r3, [pc, #80]	; (800294c <getDateTime+0x7c>)
 80028fc:	881b      	ldrh	r3, [r3, #0]
 80028fe:	2264      	movs	r2, #100	; 0x64
 8002900:	4353      	muls	r3, r2
 8002902:	b29a      	uxth	r2, r3
 8002904:	0021      	movs	r1, r4
 8002906:	187b      	adds	r3, r7, r1
 8002908:	78db      	ldrb	r3, [r3, #3]
 800290a:	b29b      	uxth	r3, r3
 800290c:	18d3      	adds	r3, r2, r3
 800290e:	b29a      	uxth	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	801a      	strh	r2, [r3, #0]
	d->month = sdate.Month;
 8002914:	187b      	adds	r3, r7, r1
 8002916:	785a      	ldrb	r2, [r3, #1]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	709a      	strb	r2, [r3, #2]
	d->date = sdate.Date;
 800291c:	187b      	adds	r3, r7, r1
 800291e:	789a      	ldrb	r2, [r3, #2]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	70da      	strb	r2, [r3, #3]
	d->weekday = sdate.WeekDay;
 8002924:	187b      	adds	r3, r7, r1
 8002926:	781a      	ldrb	r2, [r3, #0]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	711a      	strb	r2, [r3, #4]

	t->hr = stime.Hours;
 800292c:	197b      	adds	r3, r7, r5
 800292e:	781a      	ldrb	r2, [r3, #0]
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	701a      	strb	r2, [r3, #0]
	t->min = stime.Minutes;
 8002934:	197b      	adds	r3, r7, r5
 8002936:	785a      	ldrb	r2, [r3, #1]
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	705a      	strb	r2, [r3, #1]
	t->sec = stime.Seconds;
 800293c:	197b      	adds	r3, r7, r5
 800293e:	789a      	ldrb	r2, [r3, #2]
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	709a      	strb	r2, [r3, #2]
}
 8002944:	46c0      	nop			; (mov r8, r8)
 8002946:	46bd      	mov	sp, r7
 8002948:	b00a      	add	sp, #40	; 0x28
 800294a:	bdb0      	pop	{r4, r5, r7, pc}
 800294c:	20000000 	.word	0x20000000

08002950 <setRTCCalibration>:
// ---- end of RTC getters ----

// ---- RTC calibration function ----
// calibVal should be given in drift/day in seconds
// calibration output on PC13
void setRTCCalibration(int calibVal, RTC_HandleTypeDef *hrtc) {
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
	uint16_t calm = 0;
 800295a:	230e      	movs	r3, #14
 800295c:	18fb      	adds	r3, r7, r3
 800295e:	2200      	movs	r2, #0
 8002960:	801a      	strh	r2, [r3, #0]
	uint32_t temp;

	if (calibVal == 0) return;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d048      	beq.n	80029fa <setRTCCalibration+0xaa>
	else if (calibVal < 0) {		// drift offset is negative. need to slow rtc down
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	da20      	bge.n	80029b0 <setRTCCalibration+0x60>
		if (calibVal <= -42) {		// bounds checking. just set to max
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	3329      	adds	r3, #41	; 0x29
 8002972:	da06      	bge.n	8002982 <setRTCCalibration+0x32>
			HAL_RTCEx_SetSmoothCalib(hrtc, RTC_SMOOTHCALIB_PERIOD_32SEC, RTC_SMOOTHCALIB_PLUSPULSES_RESET, 0x1FF);
 8002974:	4b23      	ldr	r3, [pc, #140]	; (8002a04 <setRTCCalibration+0xb4>)
 8002976:	6838      	ldr	r0, [r7, #0]
 8002978:	2200      	movs	r2, #0
 800297a:	2100      	movs	r1, #0
 800297c:	f005 ff23 	bl	80087c6 <HAL_RTCEx_SetSmoothCalib>
 8002980:	e03c      	b.n	80029fc <setRTCCalibration+0xac>
		}
		else {
			// math for setting CALM 9-bit register in RTC. formula in notes and in L0 programming reference manual
			temp = -calibVal*32768*32/86400;		// possible overflow when doing math, so reordering
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	0013      	movs	r3, r2
 8002986:	031b      	lsls	r3, r3, #12
 8002988:	1a9b      	subs	r3, r3, r2
 800298a:	051b      	lsls	r3, r3, #20
 800298c:	491e      	ldr	r1, [pc, #120]	; (8002a08 <setRTCCalibration+0xb8>)
 800298e:	0018      	movs	r0, r3
 8002990:	f7fd fc4c 	bl	800022c <__divsi3>
 8002994:	0003      	movs	r3, r0
 8002996:	60bb      	str	r3, [r7, #8]
			calm = temp;
 8002998:	210e      	movs	r1, #14
 800299a:	187b      	adds	r3, r7, r1
 800299c:	68ba      	ldr	r2, [r7, #8]
 800299e:	801a      	strh	r2, [r3, #0]
			HAL_RTCEx_SetSmoothCalib(hrtc, RTC_SMOOTHCALIB_PERIOD_32SEC, RTC_SMOOTHCALIB_PLUSPULSES_RESET, calm);
 80029a0:	187b      	adds	r3, r7, r1
 80029a2:	881b      	ldrh	r3, [r3, #0]
 80029a4:	6838      	ldr	r0, [r7, #0]
 80029a6:	2200      	movs	r2, #0
 80029a8:	2100      	movs	r1, #0
 80029aa:	f005 ff0c 	bl	80087c6 <HAL_RTCEx_SetSmoothCalib>
 80029ae:	e025      	b.n	80029fc <setRTCCalibration+0xac>
		}
	}
	else {
		if (calibVal >= 42) { 		// drift offset is positive. need to speed rtc up
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b29      	cmp	r3, #41	; 0x29
 80029b4:	dd07      	ble.n	80029c6 <setRTCCalibration+0x76>
			HAL_RTCEx_SetSmoothCalib(hrtc, RTC_SMOOTHCALIB_PERIOD_32SEC, RTC_SMOOTHCALIB_PLUSPULSES_SET, 0);
 80029b6:	2380      	movs	r3, #128	; 0x80
 80029b8:	021a      	lsls	r2, r3, #8
 80029ba:	6838      	ldr	r0, [r7, #0]
 80029bc:	2300      	movs	r3, #0
 80029be:	2100      	movs	r1, #0
 80029c0:	f005 ff01 	bl	80087c6 <HAL_RTCEx_SetSmoothCalib>
 80029c4:	e01a      	b.n	80029fc <setRTCCalibration+0xac>
		}
		else {
			// math
			temp = 512-(calibVal*32768*32/86400);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	051b      	lsls	r3, r3, #20
 80029ca:	4910      	ldr	r1, [pc, #64]	; (8002a0c <setRTCCalibration+0xbc>)
 80029cc:	0018      	movs	r0, r3
 80029ce:	f7fd fc2d 	bl	800022c <__divsi3>
 80029d2:	0003      	movs	r3, r0
 80029d4:	2280      	movs	r2, #128	; 0x80
 80029d6:	0092      	lsls	r2, r2, #2
 80029d8:	4694      	mov	ip, r2
 80029da:	4463      	add	r3, ip
 80029dc:	60bb      	str	r3, [r7, #8]
			calm = temp;
 80029de:	210e      	movs	r1, #14
 80029e0:	187b      	adds	r3, r7, r1
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	801a      	strh	r2, [r3, #0]
			HAL_RTCEx_SetSmoothCalib(hrtc, RTC_SMOOTHCALIB_PERIOD_32SEC, RTC_SMOOTHCALIB_PLUSPULSES_SET, calm);
 80029e6:	187b      	adds	r3, r7, r1
 80029e8:	8819      	ldrh	r1, [r3, #0]
 80029ea:	2380      	movs	r3, #128	; 0x80
 80029ec:	021a      	lsls	r2, r3, #8
 80029ee:	6838      	ldr	r0, [r7, #0]
 80029f0:	000b      	movs	r3, r1
 80029f2:	2100      	movs	r1, #0
 80029f4:	f005 fee7 	bl	80087c6 <HAL_RTCEx_SetSmoothCalib>
 80029f8:	e000      	b.n	80029fc <setRTCCalibration+0xac>
	if (calibVal == 0) return;
 80029fa:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 80029fc:	46bd      	mov	sp, r7
 80029fe:	b004      	add	sp, #16
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	46c0      	nop			; (mov r8, r8)
 8002a04:	000001ff 	.word	0x000001ff
 8002a08:	00015180 	.word	0x00015180
 8002a0c:	fffeae80 	.word	0xfffeae80

08002a10 <timeToSeconds>:
// ---- end of RTC calibration function ----

// ---- converters and calculators ----
uint32_t timeToSeconds(struct times *t) {
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
	return t->sec + t->min*60 + t->hr*3600;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	789b      	ldrb	r3, [r3, #2]
 8002a1c:	0019      	movs	r1, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	785b      	ldrb	r3, [r3, #1]
 8002a22:	001a      	movs	r2, r3
 8002a24:	0013      	movs	r3, r2
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	1a9b      	subs	r3, r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	18c9      	adds	r1, r1, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	001a      	movs	r2, r3
 8002a34:	0013      	movs	r3, r2
 8002a36:	011b      	lsls	r3, r3, #4
 8002a38:	1a9b      	subs	r3, r3, r2
 8002a3a:	011a      	lsls	r2, r3, #4
 8002a3c:	1ad2      	subs	r2, r2, r3
 8002a3e:	0113      	lsls	r3, r2, #4
 8002a40:	001a      	movs	r2, r3
 8002a42:	0013      	movs	r3, r2
 8002a44:	18cb      	adds	r3, r1, r3
}
 8002a46:	0018      	movs	r0, r3
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	b002      	add	sp, #8
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <secondsToTime>:

void secondsToTime(struct times *t, uint32_t seconds) {
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b082      	sub	sp, #8
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
 8002a56:	6039      	str	r1, [r7, #0]
	t->hr = seconds / 3600;
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	23e1      	movs	r3, #225	; 0xe1
 8002a5c:	0119      	lsls	r1, r3, #4
 8002a5e:	0010      	movs	r0, r2
 8002a60:	f7fd fb5a 	bl	8000118 <__udivsi3>
 8002a64:	0003      	movs	r3, r0
 8002a66:	b2da      	uxtb	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	701a      	strb	r2, [r3, #0]
	seconds %= 3600;
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	23e1      	movs	r3, #225	; 0xe1
 8002a70:	0119      	lsls	r1, r3, #4
 8002a72:	0010      	movs	r0, r2
 8002a74:	f7fd fbd6 	bl	8000224 <__aeabi_uidivmod>
 8002a78:	000b      	movs	r3, r1
 8002a7a:	603b      	str	r3, [r7, #0]
	t->min = seconds / 60;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	213c      	movs	r1, #60	; 0x3c
 8002a80:	0018      	movs	r0, r3
 8002a82:	f7fd fb49 	bl	8000118 <__udivsi3>
 8002a86:	0003      	movs	r3, r0
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	705a      	strb	r2, [r3, #1]
	seconds %= 60;
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	213c      	movs	r1, #60	; 0x3c
 8002a92:	0018      	movs	r0, r3
 8002a94:	f7fd fbc6 	bl	8000224 <__aeabi_uidivmod>
 8002a98:	000b      	movs	r3, r1
 8002a9a:	603b      	str	r3, [r7, #0]
	t->sec = seconds;
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	709a      	strb	r2, [r3, #2]
}
 8002aa4:	46c0      	nop			; (mov r8, r8)
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	b002      	add	sp, #8
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <weekdayCalculator>:
 * weekdays is 0-6, with 0 being sunday. hal uses 1=monday, 7=sunday - just call with % 7 to integrate with hal
 * months given in 1-12, with 1 being january. hal uses the same setup
 * rtc represents years with last 2 digits only. make sure year has all 4 numbers
 * should be accurate for any gregorian date
 */
uint8_t weekdayCalculator(uint16_t year, uint8_t month, uint8_t day) {
 8002aac:	b590      	push	{r4, r7, lr}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	0004      	movs	r4, r0
 8002ab4:	0008      	movs	r0, r1
 8002ab6:	0011      	movs	r1, r2
 8002ab8:	1dbb      	adds	r3, r7, #6
 8002aba:	1c22      	adds	r2, r4, #0
 8002abc:	801a      	strh	r2, [r3, #0]
 8002abe:	1d7b      	adds	r3, r7, #5
 8002ac0:	1c02      	adds	r2, r0, #0
 8002ac2:	701a      	strb	r2, [r3, #0]
 8002ac4:	1d3b      	adds	r3, r7, #4
 8002ac6:	1c0a      	adds	r2, r1, #0
 8002ac8:	701a      	strb	r2, [r3, #0]
	static uint8_t table[] = {0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4};
	if (month < 3) year--;
 8002aca:	1d7b      	adds	r3, r7, #5
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d804      	bhi.n	8002adc <weekdayCalculator+0x30>
 8002ad2:	1dbb      	adds	r3, r7, #6
 8002ad4:	881a      	ldrh	r2, [r3, #0]
 8002ad6:	1dbb      	adds	r3, r7, #6
 8002ad8:	3a01      	subs	r2, #1
 8002ada:	801a      	strh	r2, [r3, #0]
	uint16_t temp = (year + year/4 - year/100 + year/400 + table[month-1] + day) % 7;
 8002adc:	1dbb      	adds	r3, r7, #6
 8002ade:	881b      	ldrh	r3, [r3, #0]
 8002ae0:	1dba      	adds	r2, r7, #6
 8002ae2:	8812      	ldrh	r2, [r2, #0]
 8002ae4:	0892      	lsrs	r2, r2, #2
 8002ae6:	b292      	uxth	r2, r2
 8002ae8:	189c      	adds	r4, r3, r2
 8002aea:	1dbb      	adds	r3, r7, #6
 8002aec:	881b      	ldrh	r3, [r3, #0]
 8002aee:	2164      	movs	r1, #100	; 0x64
 8002af0:	0018      	movs	r0, r3
 8002af2:	f7fd fb11 	bl	8000118 <__udivsi3>
 8002af6:	0003      	movs	r3, r0
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	1ae4      	subs	r4, r4, r3
 8002afc:	1dbb      	adds	r3, r7, #6
 8002afe:	881a      	ldrh	r2, [r3, #0]
 8002b00:	23c8      	movs	r3, #200	; 0xc8
 8002b02:	0059      	lsls	r1, r3, #1
 8002b04:	0010      	movs	r0, r2
 8002b06:	f7fd fb07 	bl	8000118 <__udivsi3>
 8002b0a:	0003      	movs	r3, r0
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	18e3      	adds	r3, r4, r3
 8002b10:	1d7a      	adds	r2, r7, #5
 8002b12:	7812      	ldrb	r2, [r2, #0]
 8002b14:	3a01      	subs	r2, #1
 8002b16:	490e      	ldr	r1, [pc, #56]	; (8002b50 <weekdayCalculator+0xa4>)
 8002b18:	5c8a      	ldrb	r2, [r1, r2]
 8002b1a:	189a      	adds	r2, r3, r2
 8002b1c:	1d3b      	adds	r3, r7, #4
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	18d3      	adds	r3, r2, r3
 8002b22:	2107      	movs	r1, #7
 8002b24:	0018      	movs	r0, r3
 8002b26:	f7fd fc67 	bl	80003f8 <__aeabi_idivmod>
 8002b2a:	000b      	movs	r3, r1
 8002b2c:	001a      	movs	r2, r3
 8002b2e:	210e      	movs	r1, #14
 8002b30:	187b      	adds	r3, r7, r1
 8002b32:	801a      	strh	r2, [r3, #0]
	if (temp == 0) return RTC_WEEKDAY_SUNDAY;
 8002b34:	187b      	adds	r3, r7, r1
 8002b36:	881b      	ldrh	r3, [r3, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <weekdayCalculator+0x94>
 8002b3c:	2307      	movs	r3, #7
 8002b3e:	e003      	b.n	8002b48 <weekdayCalculator+0x9c>
	else return temp;
 8002b40:	230e      	movs	r3, #14
 8002b42:	18fb      	adds	r3, r7, r3
 8002b44:	881b      	ldrh	r3, [r3, #0]
 8002b46:	b2db      	uxtb	r3, r3
}
 8002b48:	0018      	movs	r0, r3
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	b005      	add	sp, #20
 8002b4e:	bd90      	pop	{r4, r7, pc}
 8002b50:	20000004 	.word	0x20000004

08002b54 <maxDaysInMonth>:

// calculator for number of days in a month given a month and accounting for leap years
// assumes month is 1-12, 1=january, 12=december
uint8_t maxDaysInMonth(uint8_t month, uint16_t year) {
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	0002      	movs	r2, r0
 8002b5c:	1dfb      	adds	r3, r7, #7
 8002b5e:	701a      	strb	r2, [r3, #0]
 8002b60:	1d3b      	adds	r3, r7, #4
 8002b62:	1c0a      	adds	r2, r1, #0
 8002b64:	801a      	strh	r2, [r3, #0]
	if (month == 0 || month > 12) return 0;		// bounds checking
 8002b66:	1dfb      	adds	r3, r7, #7
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <maxDaysInMonth+0x22>
 8002b6e:	1dfb      	adds	r3, r7, #7
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	2b0c      	cmp	r3, #12
 8002b74:	d901      	bls.n	8002b7a <maxDaysInMonth+0x26>
 8002b76:	2300      	movs	r3, #0
 8002b78:	e052      	b.n	8002c20 <maxDaysInMonth+0xcc>

	// not using built-in defines, because they're in BCD
	if (month == 1  ||		// january
 8002b7a:	1dfb      	adds	r3, r7, #7
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d017      	beq.n	8002bb2 <maxDaysInMonth+0x5e>
 8002b82:	1dfb      	adds	r3, r7, #7
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	2b03      	cmp	r3, #3
 8002b88:	d013      	beq.n	8002bb2 <maxDaysInMonth+0x5e>
		month == 3  ||		// march
 8002b8a:	1dfb      	adds	r3, r7, #7
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	2b05      	cmp	r3, #5
 8002b90:	d00f      	beq.n	8002bb2 <maxDaysInMonth+0x5e>
		month == 5  ||		// may
 8002b92:	1dfb      	adds	r3, r7, #7
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	2b07      	cmp	r3, #7
 8002b98:	d00b      	beq.n	8002bb2 <maxDaysInMonth+0x5e>
		month == 7  ||		// july
 8002b9a:	1dfb      	adds	r3, r7, #7
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	2b08      	cmp	r3, #8
 8002ba0:	d007      	beq.n	8002bb2 <maxDaysInMonth+0x5e>
		month == 8  ||		// august
 8002ba2:	1dfb      	adds	r3, r7, #7
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2b0a      	cmp	r3, #10
 8002ba8:	d003      	beq.n	8002bb2 <maxDaysInMonth+0x5e>
		month == 10 ||		// october
 8002baa:	1dfb      	adds	r3, r7, #7
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	2b0c      	cmp	r3, #12
 8002bb0:	d101      	bne.n	8002bb6 <maxDaysInMonth+0x62>
		month == 12) {		// december
		return 31;
 8002bb2:	231f      	movs	r3, #31
 8002bb4:	e034      	b.n	8002c20 <maxDaysInMonth+0xcc>
	}
	else if (month == 4 ||	// april
 8002bb6:	1dfb      	adds	r3, r7, #7
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	d00b      	beq.n	8002bd6 <maxDaysInMonth+0x82>
 8002bbe:	1dfb      	adds	r3, r7, #7
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	2b06      	cmp	r3, #6
 8002bc4:	d007      	beq.n	8002bd6 <maxDaysInMonth+0x82>
			 month == 6 ||	// june
 8002bc6:	1dfb      	adds	r3, r7, #7
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	2b09      	cmp	r3, #9
 8002bcc:	d003      	beq.n	8002bd6 <maxDaysInMonth+0x82>
			 month == 9 ||	// september
 8002bce:	1dfb      	adds	r3, r7, #7
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	2b0b      	cmp	r3, #11
 8002bd4:	d101      	bne.n	8002bda <maxDaysInMonth+0x86>
			 month == 11) {	// november
		return 30;
 8002bd6:	231e      	movs	r3, #30
 8002bd8:	e022      	b.n	8002c20 <maxDaysInMonth+0xcc>
	}

	// february/leap year calculator
	// leap year for every 4th year, but every 100th year is not a leap year except on every 400th year
	// ex. 2020 is a leap year, 2100 is not a leap year, 2000 is a leap year.
	else if (year % 400 == 0) return 29;
 8002bda:	1d3b      	adds	r3, r7, #4
 8002bdc:	881a      	ldrh	r2, [r3, #0]
 8002bde:	23c8      	movs	r3, #200	; 0xc8
 8002be0:	0059      	lsls	r1, r3, #1
 8002be2:	0010      	movs	r0, r2
 8002be4:	f7fd fb1e 	bl	8000224 <__aeabi_uidivmod>
 8002be8:	000b      	movs	r3, r1
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <maxDaysInMonth+0xa0>
 8002bf0:	231d      	movs	r3, #29
 8002bf2:	e015      	b.n	8002c20 <maxDaysInMonth+0xcc>
	else if (year % 100 == 0) return 28;
 8002bf4:	1d3b      	adds	r3, r7, #4
 8002bf6:	881b      	ldrh	r3, [r3, #0]
 8002bf8:	2164      	movs	r1, #100	; 0x64
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	f7fd fb12 	bl	8000224 <__aeabi_uidivmod>
 8002c00:	000b      	movs	r3, r1
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <maxDaysInMonth+0xb8>
 8002c08:	231c      	movs	r3, #28
 8002c0a:	e009      	b.n	8002c20 <maxDaysInMonth+0xcc>
	else if (year % 4 == 0) return 29;
 8002c0c:	1d3b      	adds	r3, r7, #4
 8002c0e:	881b      	ldrh	r3, [r3, #0]
 8002c10:	2203      	movs	r2, #3
 8002c12:	4013      	ands	r3, r2
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <maxDaysInMonth+0xca>
 8002c1a:	231d      	movs	r3, #29
 8002c1c:	e000      	b.n	8002c20 <maxDaysInMonth+0xcc>
	else return 28;
 8002c1e:	231c      	movs	r3, #28
}
 8002c20:	0018      	movs	r0, r3
 8002c22:	46bd      	mov	sp, r7
 8002c24:	b002      	add	sp, #8
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c28:	b590      	push	{r4, r7, lr}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c2e:	f003 f91f 	bl	8005e70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c32:	f000 f881 	bl	8002d38 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c36:	f000 fcff 	bl	8003638 <MX_GPIO_Init>
  MX_ADC_Init();
 8002c3a:	f000 f905 	bl	8002e48 <MX_ADC_Init>
  MX_RTC_Init();
 8002c3e:	f000 f967 	bl	8002f10 <MX_RTC_Init>
  MX_TIM21_Init();
 8002c42:	f000 fbab 	bl	800339c <MX_TIM21_Init>
  MX_TIM22_Init();
 8002c46:	f000 fc41 	bl	80034cc <MX_TIM22_Init>
  MX_TIM2_Init();
 8002c4a:	f000 fa53 	bl	80030f4 <MX_TIM2_Init>
  MX_TIM6_Init();
 8002c4e:	f000 fb69 	bl	8003324 <MX_TIM6_Init>
  MX_TIM3_Init();
 8002c52:	f000 fadd 	bl	8003210 <MX_TIM3_Init>
  MX_SPI2_Init();
 8002c56:	f000 fa15 	bl	8003084 <MX_SPI2_Init>
  MX_USB_PCD_Init();
 8002c5a:	f000 fcc7 	bl	80035ec <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
	// rtc software calibration
	setRTCCalibration(-5, &hrtc);
 8002c5e:	4a2c      	ldr	r2, [pc, #176]	; (8002d10 <main+0xe8>)
 8002c60:	2305      	movs	r3, #5
 8002c62:	425b      	negs	r3, r3
 8002c64:	0011      	movs	r1, r2
 8002c66:	0018      	movs	r0, r3
 8002c68:	f7ff fe72 	bl	8002950 <setRTCCalibration>

  	// initialization for display
	TFT_startup(&hspi2);
 8002c6c:	4b29      	ldr	r3, [pc, #164]	; (8002d14 <main+0xec>)
 8002c6e:	0018      	movs	r0, r3
 8002c70:	f7fe fa78 	bl	8001164 <TFT_startup>
	clearScreen(ST77XX_BLACK, &hspi2);
 8002c74:	4b27      	ldr	r3, [pc, #156]	; (8002d14 <main+0xec>)
 8002c76:	0019      	movs	r1, r3
 8002c78:	2000      	movs	r0, #0
 8002c7a:	f7fe fddb 	bl	8001834 <clearScreen>

	// initialization for ui and hardware
	initFace();
 8002c7e:	f003 f897 	bl	8005db0 <initFace>
	setClockAlarm(&hrtc);
 8002c82:	4b23      	ldr	r3, [pc, #140]	; (8002d10 <main+0xe8>)
 8002c84:	0018      	movs	r0, r3
 8002c86:	f7ff fc5f 	bl	8002548 <setClockAlarm>
	runTimerStopwatchBase(&htim21);		// running time bases
 8002c8a:	4b23      	ldr	r3, [pc, #140]	; (8002d18 <main+0xf0>)
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	f001 fa4d 	bl	800412c <runTimerStopwatchBase>
	runMotorBase(&htim2);
 8002c92:	4b22      	ldr	r3, [pc, #136]	; (8002d1c <main+0xf4>)
 8002c94:	0018      	movs	r0, r3
 8002c96:	f001 fa9f 	bl	80041d8 <runMotorBase>
	runADCSampler(&htim22);
 8002c9a:	4b21      	ldr	r3, [pc, #132]	; (8002d20 <main+0xf8>)
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	f001 fa51 	bl	8004144 <runADCSampler>
	setDisplayBacklight(100, &htim3);
 8002ca2:	4b20      	ldr	r3, [pc, #128]	; (8002d24 <main+0xfc>)
 8002ca4:	0019      	movs	r1, r3
 8002ca6:	2064      	movs	r0, #100	; 0x64
 8002ca8:	f001 faa2 	bl	80041f0 <setDisplayBacklight>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		updateState(&hrtc, &htim21, &htim2, &htim6, &hspi2);
 8002cac:	4c1e      	ldr	r4, [pc, #120]	; (8002d28 <main+0x100>)
 8002cae:	4a1b      	ldr	r2, [pc, #108]	; (8002d1c <main+0xf4>)
 8002cb0:	4919      	ldr	r1, [pc, #100]	; (8002d18 <main+0xf0>)
 8002cb2:	4817      	ldr	r0, [pc, #92]	; (8002d10 <main+0xe8>)
 8002cb4:	4b17      	ldr	r3, [pc, #92]	; (8002d14 <main+0xec>)
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	0023      	movs	r3, r4
 8002cba:	f001 fb29 	bl	8004310 <updateState>
		updateDisplay(&hrtc, &hspi2);
 8002cbe:	4a15      	ldr	r2, [pc, #84]	; (8002d14 <main+0xec>)
 8002cc0:	4b13      	ldr	r3, [pc, #76]	; (8002d10 <main+0xe8>)
 8002cc2:	0011      	movs	r1, r2
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	f002 f90d 	bl	8004ee4 <updateDisplay>
		batteryManager(&hadc, &hspi2, &htim21, &htim3);
 8002cca:	4b16      	ldr	r3, [pc, #88]	; (8002d24 <main+0xfc>)
 8002ccc:	4a12      	ldr	r2, [pc, #72]	; (8002d18 <main+0xf0>)
 8002cce:	4911      	ldr	r1, [pc, #68]	; (8002d14 <main+0xec>)
 8002cd0:	4816      	ldr	r0, [pc, #88]	; (8002d2c <main+0x104>)
 8002cd2:	f7ff fb39 	bl	8002348 <batteryManager>

		if (isTimerDone || isAlarmDone) {
 8002cd6:	4b16      	ldr	r3, [pc, #88]	; (8002d30 <main+0x108>)
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d104      	bne.n	8002cea <main+0xc2>
 8002ce0:	4b14      	ldr	r3, [pc, #80]	; (8002d34 <main+0x10c>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d010      	beq.n	8002d0c <main+0xe4>
			runMotor(&htim2);
 8002cea:	4b0c      	ldr	r3, [pc, #48]	; (8002d1c <main+0xf4>)
 8002cec:	0018      	movs	r0, r3
 8002cee:	f001 fa3b 	bl	8004168 <runMotor>
			updateDisplay(&hrtc, &hspi2);
 8002cf2:	4a08      	ldr	r2, [pc, #32]	; (8002d14 <main+0xec>)
 8002cf4:	4b06      	ldr	r3, [pc, #24]	; (8002d10 <main+0xe8>)
 8002cf6:	0011      	movs	r1, r2
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	f002 f8f3 	bl	8004ee4 <updateDisplay>
			isTimerDone = isAlarmDone = 0;
 8002cfe:	2100      	movs	r1, #0
 8002d00:	4b0c      	ldr	r3, [pc, #48]	; (8002d34 <main+0x10c>)
 8002d02:	1c0a      	adds	r2, r1, #0
 8002d04:	701a      	strb	r2, [r3, #0]
 8002d06:	4b0a      	ldr	r3, [pc, #40]	; (8002d30 <main+0x108>)
 8002d08:	1c0a      	adds	r2, r1, #0
 8002d0a:	701a      	strb	r2, [r3, #0]
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8002d0c:	bf30      	wfi
		updateState(&hrtc, &htim21, &htim2, &htim6, &hspi2);
 8002d0e:	e7cd      	b.n	8002cac <main+0x84>
 8002d10:	20000268 	.word	0x20000268
 8002d14:	20000198 	.word	0x20000198
 8002d18:	20000598 	.word	0x20000598
 8002d1c:	2000028c 	.word	0x2000028c
 8002d20:	2000022c 	.word	0x2000022c
 8002d24:	200001f0 	.word	0x200001f0
 8002d28:	20000150 	.word	0x20000150
 8002d2c:	2000053c 	.word	0x2000053c
 8002d30:	2000014c 	.word	0x2000014c
 8002d34:	2000013e 	.word	0x2000013e

08002d38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d38:	b590      	push	{r4, r7, lr}
 8002d3a:	b09f      	sub	sp, #124	; 0x7c
 8002d3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d3e:	2440      	movs	r4, #64	; 0x40
 8002d40:	193b      	adds	r3, r7, r4
 8002d42:	0018      	movs	r0, r3
 8002d44:	2338      	movs	r3, #56	; 0x38
 8002d46:	001a      	movs	r2, r3
 8002d48:	2100      	movs	r1, #0
 8002d4a:	f007 fa88 	bl	800a25e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d4e:	232c      	movs	r3, #44	; 0x2c
 8002d50:	18fb      	adds	r3, r7, r3
 8002d52:	0018      	movs	r0, r3
 8002d54:	2314      	movs	r3, #20
 8002d56:	001a      	movs	r2, r3
 8002d58:	2100      	movs	r1, #0
 8002d5a:	f007 fa80 	bl	800a25e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d5e:	1d3b      	adds	r3, r7, #4
 8002d60:	0018      	movs	r0, r3
 8002d62:	2328      	movs	r3, #40	; 0x28
 8002d64:	001a      	movs	r2, r3
 8002d66:	2100      	movs	r1, #0
 8002d68:	f007 fa79 	bl	800a25e <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d6c:	4b33      	ldr	r3, [pc, #204]	; (8002e3c <SystemClock_Config+0x104>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a33      	ldr	r2, [pc, #204]	; (8002e40 <SystemClock_Config+0x108>)
 8002d72:	401a      	ands	r2, r3
 8002d74:	4b31      	ldr	r3, [pc, #196]	; (8002e3c <SystemClock_Config+0x104>)
 8002d76:	2180      	movs	r1, #128	; 0x80
 8002d78:	0109      	lsls	r1, r1, #4
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	601a      	str	r2, [r3, #0]
  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8002d7e:	f004 f897 	bl	8006eb0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002d82:	4b30      	ldr	r3, [pc, #192]	; (8002e44 <SystemClock_Config+0x10c>)
 8002d84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d86:	4b2f      	ldr	r3, [pc, #188]	; (8002e44 <SystemClock_Config+0x10c>)
 8002d88:	492d      	ldr	r1, [pc, #180]	; (8002e40 <SystemClock_Config+0x108>)
 8002d8a:	400a      	ands	r2, r1
 8002d8c:	651a      	str	r2, [r3, #80]	; 0x50
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8002d8e:	193b      	adds	r3, r7, r4
 8002d90:	2226      	movs	r2, #38	; 0x26
 8002d92:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002d94:	193b      	adds	r3, r7, r4
 8002d96:	2280      	movs	r2, #128	; 0x80
 8002d98:	0052      	lsls	r2, r2, #1
 8002d9a:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d9c:	0021      	movs	r1, r4
 8002d9e:	187b      	adds	r3, r7, r1
 8002da0:	2201      	movs	r2, #1
 8002da2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002da4:	187b      	adds	r3, r7, r1
 8002da6:	2210      	movs	r2, #16
 8002da8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002daa:	187b      	adds	r3, r7, r1
 8002dac:	2201      	movs	r2, #1
 8002dae:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002db0:	187b      	adds	r3, r7, r1
 8002db2:	2202      	movs	r2, #2
 8002db4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002db6:	187b      	adds	r3, r7, r1
 8002db8:	2200      	movs	r2, #0
 8002dba:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8002dbc:	187b      	adds	r3, r7, r1
 8002dbe:	2280      	movs	r2, #128	; 0x80
 8002dc0:	02d2      	lsls	r2, r2, #11
 8002dc2:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8002dc4:	187b      	adds	r3, r7, r1
 8002dc6:	2280      	movs	r2, #128	; 0x80
 8002dc8:	03d2      	lsls	r2, r2, #15
 8002dca:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002dcc:	187b      	adds	r3, r7, r1
 8002dce:	0018      	movs	r0, r3
 8002dd0:	f004 f87c 	bl	8006ecc <HAL_RCC_OscConfig>
 8002dd4:	1e03      	subs	r3, r0, #0
 8002dd6:	d001      	beq.n	8002ddc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002dd8:	f000 fcf0 	bl	80037bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ddc:	212c      	movs	r1, #44	; 0x2c
 8002dde:	187b      	adds	r3, r7, r1
 8002de0:	220f      	movs	r2, #15
 8002de2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002de4:	187b      	adds	r3, r7, r1
 8002de6:	2203      	movs	r2, #3
 8002de8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002dea:	187b      	adds	r3, r7, r1
 8002dec:	2200      	movs	r2, #0
 8002dee:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002df0:	187b      	adds	r3, r7, r1
 8002df2:	2200      	movs	r2, #0
 8002df4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002df6:	187b      	adds	r3, r7, r1
 8002df8:	2200      	movs	r2, #0
 8002dfa:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002dfc:	187b      	adds	r3, r7, r1
 8002dfe:	2101      	movs	r1, #1
 8002e00:	0018      	movs	r0, r3
 8002e02:	f004 fc33 	bl	800766c <HAL_RCC_ClockConfig>
 8002e06:	1e03      	subs	r3, r0, #0
 8002e08:	d001      	beq.n	8002e0e <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8002e0a:	f000 fcd7 	bl	80037bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 8002e0e:	1d3b      	adds	r3, r7, #4
 8002e10:	2260      	movs	r2, #96	; 0x60
 8002e12:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002e14:	1d3b      	adds	r3, r7, #4
 8002e16:	2280      	movs	r2, #128	; 0x80
 8002e18:	0252      	lsls	r2, r2, #9
 8002e1a:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8002e1c:	1d3b      	adds	r3, r7, #4
 8002e1e:	2280      	movs	r2, #128	; 0x80
 8002e20:	04d2      	lsls	r2, r2, #19
 8002e22:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e24:	1d3b      	adds	r3, r7, #4
 8002e26:	0018      	movs	r0, r3
 8002e28:	f004 fdce 	bl	80079c8 <HAL_RCCEx_PeriphCLKConfig>
 8002e2c:	1e03      	subs	r3, r0, #0
 8002e2e:	d001      	beq.n	8002e34 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8002e30:	f000 fcc4 	bl	80037bc <Error_Handler>
  }
}
 8002e34:	46c0      	nop			; (mov r8, r8)
 8002e36:	46bd      	mov	sp, r7
 8002e38:	b01f      	add	sp, #124	; 0x7c
 8002e3a:	bd90      	pop	{r4, r7, pc}
 8002e3c:	40007000 	.word	0x40007000
 8002e40:	ffffe7ff 	.word	0xffffe7ff
 8002e44:	40021000 	.word	0x40021000

08002e48 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002e4e:	003b      	movs	r3, r7
 8002e50:	0018      	movs	r0, r3
 8002e52:	2308      	movs	r3, #8
 8002e54:	001a      	movs	r2, r3
 8002e56:	2100      	movs	r1, #0
 8002e58:	f007 fa01 	bl	800a25e <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8002e5c:	4b2a      	ldr	r3, [pc, #168]	; (8002f08 <MX_ADC_Init+0xc0>)
 8002e5e:	4a2b      	ldr	r2, [pc, #172]	; (8002f0c <MX_ADC_Init+0xc4>)
 8002e60:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8002e62:	4b29      	ldr	r3, [pc, #164]	; (8002f08 <MX_ADC_Init+0xc0>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002e68:	4b27      	ldr	r3, [pc, #156]	; (8002f08 <MX_ADC_Init+0xc0>)
 8002e6a:	2280      	movs	r2, #128	; 0x80
 8002e6c:	05d2      	lsls	r2, r2, #23
 8002e6e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002e70:	4b25      	ldr	r3, [pc, #148]	; (8002f08 <MX_ADC_Init+0xc0>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_79CYCLES_5;
 8002e76:	4b24      	ldr	r3, [pc, #144]	; (8002f08 <MX_ADC_Init+0xc0>)
 8002e78:	2206      	movs	r2, #6
 8002e7a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002e7c:	4b22      	ldr	r3, [pc, #136]	; (8002f08 <MX_ADC_Init+0xc0>)
 8002e7e:	2201      	movs	r2, #1
 8002e80:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e82:	4b21      	ldr	r3, [pc, #132]	; (8002f08 <MX_ADC_Init+0xc0>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002e88:	4b1f      	ldr	r3, [pc, #124]	; (8002f08 <MX_ADC_Init+0xc0>)
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002e90:	4b1d      	ldr	r3, [pc, #116]	; (8002f08 <MX_ADC_Init+0xc0>)
 8002e92:	2221      	movs	r2, #33	; 0x21
 8002e94:	2100      	movs	r1, #0
 8002e96:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002e98:	4b1b      	ldr	r3, [pc, #108]	; (8002f08 <MX_ADC_Init+0xc0>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002e9e:	4b1a      	ldr	r3, [pc, #104]	; (8002f08 <MX_ADC_Init+0xc0>)
 8002ea0:	22c2      	movs	r2, #194	; 0xc2
 8002ea2:	32ff      	adds	r2, #255	; 0xff
 8002ea4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002ea6:	4b18      	ldr	r3, [pc, #96]	; (8002f08 <MX_ADC_Init+0xc0>)
 8002ea8:	222c      	movs	r2, #44	; 0x2c
 8002eaa:	2100      	movs	r1, #0
 8002eac:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002eae:	4b16      	ldr	r3, [pc, #88]	; (8002f08 <MX_ADC_Init+0xc0>)
 8002eb0:	2204      	movs	r2, #4
 8002eb2:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002eb4:	4b14      	ldr	r3, [pc, #80]	; (8002f08 <MX_ADC_Init+0xc0>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002eba:	4b13      	ldr	r3, [pc, #76]	; (8002f08 <MX_ADC_Init+0xc0>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8002ec0:	4b11      	ldr	r3, [pc, #68]	; (8002f08 <MX_ADC_Init+0xc0>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002ec6:	4b10      	ldr	r3, [pc, #64]	; (8002f08 <MX_ADC_Init+0xc0>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002ecc:	4b0e      	ldr	r3, [pc, #56]	; (8002f08 <MX_ADC_Init+0xc0>)
 8002ece:	0018      	movs	r0, r3
 8002ed0:	f003 f84c 	bl	8005f6c <HAL_ADC_Init>
 8002ed4:	1e03      	subs	r3, r0, #0
 8002ed6:	d001      	beq.n	8002edc <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8002ed8:	f000 fc70 	bl	80037bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002edc:	003b      	movs	r3, r7
 8002ede:	2201      	movs	r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002ee2:	003b      	movs	r3, r7
 8002ee4:	2280      	movs	r2, #128	; 0x80
 8002ee6:	0152      	lsls	r2, r2, #5
 8002ee8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002eea:	003a      	movs	r2, r7
 8002eec:	4b06      	ldr	r3, [pc, #24]	; (8002f08 <MX_ADC_Init+0xc0>)
 8002eee:	0011      	movs	r1, r2
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	f003 fa83 	bl	80063fc <HAL_ADC_ConfigChannel>
 8002ef6:	1e03      	subs	r3, r0, #0
 8002ef8:	d001      	beq.n	8002efe <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8002efa:	f000 fc5f 	bl	80037bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002efe:	46c0      	nop			; (mov r8, r8)
 8002f00:	46bd      	mov	sp, r7
 8002f02:	b002      	add	sp, #8
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	46c0      	nop			; (mov r8, r8)
 8002f08:	2000053c 	.word	0x2000053c
 8002f0c:	40012400 	.word	0x40012400

08002f10 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b090      	sub	sp, #64	; 0x40
 8002f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002f16:	232c      	movs	r3, #44	; 0x2c
 8002f18:	18fb      	adds	r3, r7, r3
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	2314      	movs	r3, #20
 8002f1e:	001a      	movs	r2, r3
 8002f20:	2100      	movs	r1, #0
 8002f22:	f007 f99c 	bl	800a25e <memset>
  RTC_DateTypeDef sDate = {0};
 8002f26:	2328      	movs	r3, #40	; 0x28
 8002f28:	18fb      	adds	r3, r7, r3
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8002f2e:	003b      	movs	r3, r7
 8002f30:	0018      	movs	r0, r3
 8002f32:	2328      	movs	r3, #40	; 0x28
 8002f34:	001a      	movs	r2, r3
 8002f36:	2100      	movs	r1, #0
 8002f38:	f007 f991 	bl	800a25e <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8002f3c:	4b4f      	ldr	r3, [pc, #316]	; (800307c <MX_RTC_Init+0x16c>)
 8002f3e:	4a50      	ldr	r2, [pc, #320]	; (8003080 <MX_RTC_Init+0x170>)
 8002f40:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002f42:	4b4e      	ldr	r3, [pc, #312]	; (800307c <MX_RTC_Init+0x16c>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002f48:	4b4c      	ldr	r3, [pc, #304]	; (800307c <MX_RTC_Init+0x16c>)
 8002f4a:	227f      	movs	r2, #127	; 0x7f
 8002f4c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002f4e:	4b4b      	ldr	r3, [pc, #300]	; (800307c <MX_RTC_Init+0x16c>)
 8002f50:	22ff      	movs	r2, #255	; 0xff
 8002f52:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002f54:	4b49      	ldr	r3, [pc, #292]	; (800307c <MX_RTC_Init+0x16c>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002f5a:	4b48      	ldr	r3, [pc, #288]	; (800307c <MX_RTC_Init+0x16c>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002f60:	4b46      	ldr	r3, [pc, #280]	; (800307c <MX_RTC_Init+0x16c>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002f66:	4b45      	ldr	r3, [pc, #276]	; (800307c <MX_RTC_Init+0x16c>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002f6c:	4b43      	ldr	r3, [pc, #268]	; (800307c <MX_RTC_Init+0x16c>)
 8002f6e:	0018      	movs	r0, r3
 8002f70:	f004 fe9e 	bl	8007cb0 <HAL_RTC_Init>
 8002f74:	1e03      	subs	r3, r0, #0
 8002f76:	d001      	beq.n	8002f7c <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8002f78:	f000 fc20 	bl	80037bc <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0;
 8002f7c:	212c      	movs	r1, #44	; 0x2c
 8002f7e:	187b      	adds	r3, r7, r1
 8002f80:	2200      	movs	r2, #0
 8002f82:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8002f84:	187b      	adds	r3, r7, r1
 8002f86:	2200      	movs	r2, #0
 8002f88:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8002f8a:	187b      	adds	r3, r7, r1
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002f90:	187b      	adds	r3, r7, r1
 8002f92:	2200      	movs	r2, #0
 8002f94:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002f96:	187b      	adds	r3, r7, r1
 8002f98:	2200      	movs	r2, #0
 8002f9a:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002f9c:	1879      	adds	r1, r7, r1
 8002f9e:	4b37      	ldr	r3, [pc, #220]	; (800307c <MX_RTC_Init+0x16c>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	f004 ff22 	bl	8007dec <HAL_RTC_SetTime>
 8002fa8:	1e03      	subs	r3, r0, #0
 8002faa:	d001      	beq.n	8002fb0 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8002fac:	f000 fc06 	bl	80037bc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8002fb0:	2128      	movs	r1, #40	; 0x28
 8002fb2:	187b      	adds	r3, r7, r1
 8002fb4:	2207      	movs	r2, #7
 8002fb6:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_DECEMBER;
 8002fb8:	187b      	adds	r3, r7, r1
 8002fba:	2212      	movs	r2, #18
 8002fbc:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8002fbe:	187b      	adds	r3, r7, r1
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	709a      	strb	r2, [r3, #2]
  sDate.Year = 19;
 8002fc4:	187b      	adds	r3, r7, r1
 8002fc6:	2213      	movs	r2, #19
 8002fc8:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002fca:	1879      	adds	r1, r7, r1
 8002fcc:	4b2b      	ldr	r3, [pc, #172]	; (800307c <MX_RTC_Init+0x16c>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	0018      	movs	r0, r3
 8002fd2:	f005 f82b 	bl	800802c <HAL_RTC_SetDate>
 8002fd6:	1e03      	subs	r3, r0, #0
 8002fd8:	d001      	beq.n	8002fde <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8002fda:	f000 fbef 	bl	80037bc <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0;
 8002fde:	003b      	movs	r3, r7
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8002fe4:	003b      	movs	r3, r7
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8002fea:	003b      	movs	r3, r7
 8002fec:	2200      	movs	r2, #0
 8002fee:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8002ff0:	003b      	movs	r3, r7
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002ff6:	003b      	movs	r3, r7
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002ffc:	003b      	movs	r3, r7
 8002ffe:	2200      	movs	r2, #0
 8003000:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8003002:	003b      	movs	r3, r7
 8003004:	2200      	movs	r2, #0
 8003006:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003008:	003b      	movs	r3, r7
 800300a:	2200      	movs	r2, #0
 800300c:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800300e:	003b      	movs	r3, r7
 8003010:	2200      	movs	r2, #0
 8003012:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8003014:	003b      	movs	r3, r7
 8003016:	2220      	movs	r2, #32
 8003018:	2101      	movs	r1, #1
 800301a:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 800301c:	003b      	movs	r3, r7
 800301e:	2280      	movs	r2, #128	; 0x80
 8003020:	0052      	lsls	r2, r2, #1
 8003022:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8003024:	0039      	movs	r1, r7
 8003026:	4b15      	ldr	r3, [pc, #84]	; (800307c <MX_RTC_Init+0x16c>)
 8003028:	2200      	movs	r2, #0
 800302a:	0018      	movs	r0, r3
 800302c:	f005 f8fa 	bl	8008224 <HAL_RTC_SetAlarm_IT>
 8003030:	1e03      	subs	r3, r0, #0
 8003032:	d001      	beq.n	8003038 <MX_RTC_Init+0x128>
  {
    Error_Handler();
 8003034:	f000 fbc2 	bl	80037bc <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 1;
 8003038:	003b      	movs	r3, r7
 800303a:	2220      	movs	r2, #32
 800303c:	2101      	movs	r1, #1
 800303e:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_B;
 8003040:	003b      	movs	r3, r7
 8003042:	2280      	movs	r2, #128	; 0x80
 8003044:	0092      	lsls	r2, r2, #2
 8003046:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8003048:	0039      	movs	r1, r7
 800304a:	4b0c      	ldr	r3, [pc, #48]	; (800307c <MX_RTC_Init+0x16c>)
 800304c:	2200      	movs	r2, #0
 800304e:	0018      	movs	r0, r3
 8003050:	f005 f8e8 	bl	8008224 <HAL_RTC_SetAlarm_IT>
 8003054:	1e03      	subs	r3, r0, #0
 8003056:	d001      	beq.n	800305c <MX_RTC_Init+0x14c>
  {
    Error_Handler();
 8003058:	f000 fbb0 	bl	80037bc <Error_Handler>
  }
  /** Enable Calibrartion 
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_1HZ) != HAL_OK)
 800305c:	2380      	movs	r3, #128	; 0x80
 800305e:	031a      	lsls	r2, r3, #12
 8003060:	4b06      	ldr	r3, [pc, #24]	; (800307c <MX_RTC_Init+0x16c>)
 8003062:	0011      	movs	r1, r2
 8003064:	0018      	movs	r0, r3
 8003066:	f005 fc11 	bl	800888c <HAL_RTCEx_SetCalibrationOutPut>
 800306a:	1e03      	subs	r3, r0, #0
 800306c:	d001      	beq.n	8003072 <MX_RTC_Init+0x162>
  {
    Error_Handler();
 800306e:	f000 fba5 	bl	80037bc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003072:	46c0      	nop			; (mov r8, r8)
 8003074:	46bd      	mov	sp, r7
 8003076:	b010      	add	sp, #64	; 0x40
 8003078:	bd80      	pop	{r7, pc}
 800307a:	46c0      	nop			; (mov r8, r8)
 800307c:	20000268 	.word	0x20000268
 8003080:	40002800 	.word	0x40002800

08003084 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003088:	4b18      	ldr	r3, [pc, #96]	; (80030ec <MX_SPI2_Init+0x68>)
 800308a:	4a19      	ldr	r2, [pc, #100]	; (80030f0 <MX_SPI2_Init+0x6c>)
 800308c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800308e:	4b17      	ldr	r3, [pc, #92]	; (80030ec <MX_SPI2_Init+0x68>)
 8003090:	2282      	movs	r2, #130	; 0x82
 8003092:	0052      	lsls	r2, r2, #1
 8003094:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003096:	4b15      	ldr	r3, [pc, #84]	; (80030ec <MX_SPI2_Init+0x68>)
 8003098:	2200      	movs	r2, #0
 800309a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800309c:	4b13      	ldr	r3, [pc, #76]	; (80030ec <MX_SPI2_Init+0x68>)
 800309e:	2200      	movs	r2, #0
 80030a0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80030a2:	4b12      	ldr	r3, [pc, #72]	; (80030ec <MX_SPI2_Init+0x68>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80030a8:	4b10      	ldr	r3, [pc, #64]	; (80030ec <MX_SPI2_Init+0x68>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80030ae:	4b0f      	ldr	r3, [pc, #60]	; (80030ec <MX_SPI2_Init+0x68>)
 80030b0:	2280      	movs	r2, #128	; 0x80
 80030b2:	0092      	lsls	r2, r2, #2
 80030b4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030b6:	4b0d      	ldr	r3, [pc, #52]	; (80030ec <MX_SPI2_Init+0x68>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030bc:	4b0b      	ldr	r3, [pc, #44]	; (80030ec <MX_SPI2_Init+0x68>)
 80030be:	2200      	movs	r2, #0
 80030c0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80030c2:	4b0a      	ldr	r3, [pc, #40]	; (80030ec <MX_SPI2_Init+0x68>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030c8:	4b08      	ldr	r3, [pc, #32]	; (80030ec <MX_SPI2_Init+0x68>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80030ce:	4b07      	ldr	r3, [pc, #28]	; (80030ec <MX_SPI2_Init+0x68>)
 80030d0:	2207      	movs	r2, #7
 80030d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80030d4:	4b05      	ldr	r3, [pc, #20]	; (80030ec <MX_SPI2_Init+0x68>)
 80030d6:	0018      	movs	r0, r3
 80030d8:	f005 fc20 	bl	800891c <HAL_SPI_Init>
 80030dc:	1e03      	subs	r3, r0, #0
 80030de:	d001      	beq.n	80030e4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80030e0:	f000 fb6c 	bl	80037bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80030e4:	46c0      	nop			; (mov r8, r8)
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	46c0      	nop			; (mov r8, r8)
 80030ec:	20000198 	.word	0x20000198
 80030f0:	40003800 	.word	0x40003800

080030f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b08a      	sub	sp, #40	; 0x28
 80030f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030fa:	2318      	movs	r3, #24
 80030fc:	18fb      	adds	r3, r7, r3
 80030fe:	0018      	movs	r0, r3
 8003100:	2310      	movs	r3, #16
 8003102:	001a      	movs	r2, r3
 8003104:	2100      	movs	r1, #0
 8003106:	f007 f8aa 	bl	800a25e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800310a:	2310      	movs	r3, #16
 800310c:	18fb      	adds	r3, r7, r3
 800310e:	0018      	movs	r0, r3
 8003110:	2308      	movs	r3, #8
 8003112:	001a      	movs	r2, r3
 8003114:	2100      	movs	r1, #0
 8003116:	f007 f8a2 	bl	800a25e <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800311a:	003b      	movs	r3, r7
 800311c:	0018      	movs	r0, r3
 800311e:	2310      	movs	r3, #16
 8003120:	001a      	movs	r2, r3
 8003122:	2100      	movs	r1, #0
 8003124:	f007 f89b 	bl	800a25e <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003128:	4b37      	ldr	r3, [pc, #220]	; (8003208 <MX_TIM2_Init+0x114>)
 800312a:	2280      	movs	r2, #128	; 0x80
 800312c:	05d2      	lsls	r2, r2, #23
 800312e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003130:	4b35      	ldr	r3, [pc, #212]	; (8003208 <MX_TIM2_Init+0x114>)
 8003132:	2200      	movs	r2, #0
 8003134:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003136:	4b34      	ldr	r3, [pc, #208]	; (8003208 <MX_TIM2_Init+0x114>)
 8003138:	2200      	movs	r2, #0
 800313a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0x3FFF;
 800313c:	4b32      	ldr	r3, [pc, #200]	; (8003208 <MX_TIM2_Init+0x114>)
 800313e:	4a33      	ldr	r2, [pc, #204]	; (800320c <MX_TIM2_Init+0x118>)
 8003140:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003142:	4b31      	ldr	r3, [pc, #196]	; (8003208 <MX_TIM2_Init+0x114>)
 8003144:	2200      	movs	r2, #0
 8003146:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003148:	4b2f      	ldr	r3, [pc, #188]	; (8003208 <MX_TIM2_Init+0x114>)
 800314a:	2200      	movs	r2, #0
 800314c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800314e:	4b2e      	ldr	r3, [pc, #184]	; (8003208 <MX_TIM2_Init+0x114>)
 8003150:	0018      	movs	r0, r3
 8003152:	f006 f8a9 	bl	80092a8 <HAL_TIM_Base_Init>
 8003156:	1e03      	subs	r3, r0, #0
 8003158:	d001      	beq.n	800315e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800315a:	f000 fb2f 	bl	80037bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800315e:	2118      	movs	r1, #24
 8003160:	187b      	adds	r3, r7, r1
 8003162:	2280      	movs	r2, #128	; 0x80
 8003164:	0192      	lsls	r2, r2, #6
 8003166:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8003168:	187b      	adds	r3, r7, r1
 800316a:	2200      	movs	r2, #0
 800316c:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 800316e:	187b      	adds	r3, r7, r1
 8003170:	2200      	movs	r2, #0
 8003172:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 8003174:	187b      	adds	r3, r7, r1
 8003176:	2200      	movs	r2, #0
 8003178:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800317a:	187a      	adds	r2, r7, r1
 800317c:	4b22      	ldr	r3, [pc, #136]	; (8003208 <MX_TIM2_Init+0x114>)
 800317e:	0011      	movs	r1, r2
 8003180:	0018      	movs	r0, r3
 8003182:	f006 fc6f 	bl	8009a64 <HAL_TIM_ConfigClockSource>
 8003186:	1e03      	subs	r3, r0, #0
 8003188:	d001      	beq.n	800318e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800318a:	f000 fb17 	bl	80037bc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800318e:	4b1e      	ldr	r3, [pc, #120]	; (8003208 <MX_TIM2_Init+0x114>)
 8003190:	0018      	movs	r0, r3
 8003192:	f006 f91b 	bl	80093cc <HAL_TIM_OC_Init>
 8003196:	1e03      	subs	r3, r0, #0
 8003198:	d001      	beq.n	800319e <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 800319a:	f000 fb0f 	bl	80037bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800319e:	2110      	movs	r1, #16
 80031a0:	187b      	adds	r3, r7, r1
 80031a2:	2200      	movs	r2, #0
 80031a4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031a6:	187b      	adds	r3, r7, r1
 80031a8:	2200      	movs	r2, #0
 80031aa:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80031ac:	187a      	adds	r2, r7, r1
 80031ae:	4b16      	ldr	r3, [pc, #88]	; (8003208 <MX_TIM2_Init+0x114>)
 80031b0:	0011      	movs	r1, r2
 80031b2:	0018      	movs	r0, r3
 80031b4:	f006 ff4b 	bl	800a04e <HAL_TIMEx_MasterConfigSynchronization>
 80031b8:	1e03      	subs	r3, r0, #0
 80031ba:	d001      	beq.n	80031c0 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 80031bc:	f000 fafe 	bl	80037bc <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim2, TIM2_ETR_LSE) != HAL_OK)
 80031c0:	4b11      	ldr	r3, [pc, #68]	; (8003208 <MX_TIM2_Init+0x114>)
 80031c2:	2105      	movs	r1, #5
 80031c4:	0018      	movs	r0, r3
 80031c6:	f006 ff85 	bl	800a0d4 <HAL_TIMEx_RemapConfig>
 80031ca:	1e03      	subs	r3, r0, #0
 80031cc:	d001      	beq.n	80031d2 <MX_TIM2_Init+0xde>
  {
    Error_Handler();
 80031ce:	f000 faf5 	bl	80037bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80031d2:	003b      	movs	r3, r7
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80031d8:	003b      	movs	r3, r7
 80031da:	2200      	movs	r2, #0
 80031dc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80031de:	003b      	movs	r3, r7
 80031e0:	2200      	movs	r2, #0
 80031e2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80031e4:	003b      	movs	r3, r7
 80031e6:	2200      	movs	r2, #0
 80031e8:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80031ea:	0039      	movs	r1, r7
 80031ec:	4b06      	ldr	r3, [pc, #24]	; (8003208 <MX_TIM2_Init+0x114>)
 80031ee:	2204      	movs	r2, #4
 80031f0:	0018      	movs	r0, r3
 80031f2:	f006 fb31 	bl	8009858 <HAL_TIM_OC_ConfigChannel>
 80031f6:	1e03      	subs	r3, r0, #0
 80031f8:	d001      	beq.n	80031fe <MX_TIM2_Init+0x10a>
  {
    Error_Handler();
 80031fa:	f000 fadf 	bl	80037bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80031fe:	46c0      	nop			; (mov r8, r8)
 8003200:	46bd      	mov	sp, r7
 8003202:	b00a      	add	sp, #40	; 0x28
 8003204:	bd80      	pop	{r7, pc}
 8003206:	46c0      	nop			; (mov r8, r8)
 8003208:	2000028c 	.word	0x2000028c
 800320c:	00003fff 	.word	0x00003fff

08003210 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b08a      	sub	sp, #40	; 0x28
 8003214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003216:	2318      	movs	r3, #24
 8003218:	18fb      	adds	r3, r7, r3
 800321a:	0018      	movs	r0, r3
 800321c:	2310      	movs	r3, #16
 800321e:	001a      	movs	r2, r3
 8003220:	2100      	movs	r1, #0
 8003222:	f007 f81c 	bl	800a25e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003226:	2310      	movs	r3, #16
 8003228:	18fb      	adds	r3, r7, r3
 800322a:	0018      	movs	r0, r3
 800322c:	2308      	movs	r3, #8
 800322e:	001a      	movs	r2, r3
 8003230:	2100      	movs	r1, #0
 8003232:	f007 f814 	bl	800a25e <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003236:	003b      	movs	r3, r7
 8003238:	0018      	movs	r0, r3
 800323a:	2310      	movs	r3, #16
 800323c:	001a      	movs	r2, r3
 800323e:	2100      	movs	r1, #0
 8003240:	f007 f80d 	bl	800a25e <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003244:	4b34      	ldr	r3, [pc, #208]	; (8003318 <MX_TIM3_Init+0x108>)
 8003246:	4a35      	ldr	r2, [pc, #212]	; (800331c <MX_TIM3_Init+0x10c>)
 8003248:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800324a:	4b33      	ldr	r3, [pc, #204]	; (8003318 <MX_TIM3_Init+0x108>)
 800324c:	2200      	movs	r2, #0
 800324e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003250:	4b31      	ldr	r3, [pc, #196]	; (8003318 <MX_TIM3_Init+0x108>)
 8003252:	2200      	movs	r2, #0
 8003254:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF;
 8003256:	4b30      	ldr	r3, [pc, #192]	; (8003318 <MX_TIM3_Init+0x108>)
 8003258:	4a31      	ldr	r2, [pc, #196]	; (8003320 <MX_TIM3_Init+0x110>)
 800325a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800325c:	4b2e      	ldr	r3, [pc, #184]	; (8003318 <MX_TIM3_Init+0x108>)
 800325e:	2200      	movs	r2, #0
 8003260:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003262:	4b2d      	ldr	r3, [pc, #180]	; (8003318 <MX_TIM3_Init+0x108>)
 8003264:	2200      	movs	r2, #0
 8003266:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003268:	4b2b      	ldr	r3, [pc, #172]	; (8003318 <MX_TIM3_Init+0x108>)
 800326a:	0018      	movs	r0, r3
 800326c:	f006 f81c 	bl	80092a8 <HAL_TIM_Base_Init>
 8003270:	1e03      	subs	r3, r0, #0
 8003272:	d001      	beq.n	8003278 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003274:	f000 faa2 	bl	80037bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003278:	2118      	movs	r1, #24
 800327a:	187b      	adds	r3, r7, r1
 800327c:	2280      	movs	r2, #128	; 0x80
 800327e:	0152      	lsls	r2, r2, #5
 8003280:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003282:	187a      	adds	r2, r7, r1
 8003284:	4b24      	ldr	r3, [pc, #144]	; (8003318 <MX_TIM3_Init+0x108>)
 8003286:	0011      	movs	r1, r2
 8003288:	0018      	movs	r0, r3
 800328a:	f006 fbeb 	bl	8009a64 <HAL_TIM_ConfigClockSource>
 800328e:	1e03      	subs	r3, r0, #0
 8003290:	d001      	beq.n	8003296 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8003292:	f000 fa93 	bl	80037bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003296:	4b20      	ldr	r3, [pc, #128]	; (8003318 <MX_TIM3_Init+0x108>)
 8003298:	0018      	movs	r0, r3
 800329a:	f006 f96f 	bl	800957c <HAL_TIM_PWM_Init>
 800329e:	1e03      	subs	r3, r0, #0
 80032a0:	d001      	beq.n	80032a6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80032a2:	f000 fa8b 	bl	80037bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032a6:	2110      	movs	r1, #16
 80032a8:	187b      	adds	r3, r7, r1
 80032aa:	2200      	movs	r2, #0
 80032ac:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032ae:	187b      	adds	r3, r7, r1
 80032b0:	2200      	movs	r2, #0
 80032b2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80032b4:	187a      	adds	r2, r7, r1
 80032b6:	4b18      	ldr	r3, [pc, #96]	; (8003318 <MX_TIM3_Init+0x108>)
 80032b8:	0011      	movs	r1, r2
 80032ba:	0018      	movs	r0, r3
 80032bc:	f006 fec7 	bl	800a04e <HAL_TIMEx_MasterConfigSynchronization>
 80032c0:	1e03      	subs	r3, r0, #0
 80032c2:	d001      	beq.n	80032c8 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80032c4:	f000 fa7a 	bl	80037bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032c8:	003b      	movs	r3, r7
 80032ca:	2260      	movs	r2, #96	; 0x60
 80032cc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80032ce:	003b      	movs	r3, r7
 80032d0:	2200      	movs	r2, #0
 80032d2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032d4:	003b      	movs	r3, r7
 80032d6:	2200      	movs	r2, #0
 80032d8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032da:	003b      	movs	r3, r7
 80032dc:	2200      	movs	r2, #0
 80032de:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032e0:	0039      	movs	r1, r7
 80032e2:	4b0d      	ldr	r3, [pc, #52]	; (8003318 <MX_TIM3_Init+0x108>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	0018      	movs	r0, r3
 80032e8:	f006 fb04 	bl	80098f4 <HAL_TIM_PWM_ConfigChannel>
 80032ec:	1e03      	subs	r3, r0, #0
 80032ee:	d001      	beq.n	80032f4 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80032f0:	f000 fa64 	bl	80037bc <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 80032f4:	4b08      	ldr	r3, [pc, #32]	; (8003318 <MX_TIM3_Init+0x108>)
 80032f6:	2104      	movs	r1, #4
 80032f8:	0018      	movs	r0, r3
 80032fa:	f006 feeb 	bl	800a0d4 <HAL_TIMEx_RemapConfig>
 80032fe:	1e03      	subs	r3, r0, #0
 8003300:	d001      	beq.n	8003306 <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 8003302:	f000 fa5b 	bl	80037bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003306:	4b04      	ldr	r3, [pc, #16]	; (8003318 <MX_TIM3_Init+0x108>)
 8003308:	0018      	movs	r0, r3
 800330a:	f000 fbb9 	bl	8003a80 <HAL_TIM_MspPostInit>

}
 800330e:	46c0      	nop			; (mov r8, r8)
 8003310:	46bd      	mov	sp, r7
 8003312:	b00a      	add	sp, #40	; 0x28
 8003314:	bd80      	pop	{r7, pc}
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	200001f0 	.word	0x200001f0
 800331c:	40000400 	.word	0x40000400
 8003320:	0000ffff 	.word	0x0000ffff

08003324 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800332a:	003b      	movs	r3, r7
 800332c:	0018      	movs	r0, r3
 800332e:	2308      	movs	r3, #8
 8003330:	001a      	movs	r2, r3
 8003332:	2100      	movs	r1, #0
 8003334:	f006 ff93 	bl	800a25e <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003338:	4b15      	ldr	r3, [pc, #84]	; (8003390 <MX_TIM6_Init+0x6c>)
 800333a:	4a16      	ldr	r2, [pc, #88]	; (8003394 <MX_TIM6_Init+0x70>)
 800333c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0x40;
 800333e:	4b14      	ldr	r3, [pc, #80]	; (8003390 <MX_TIM6_Init+0x6c>)
 8003340:	2240      	movs	r2, #64	; 0x40
 8003342:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003344:	4b12      	ldr	r3, [pc, #72]	; (8003390 <MX_TIM6_Init+0x6c>)
 8003346:	2200      	movs	r2, #0
 8003348:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800334a:	4b11      	ldr	r3, [pc, #68]	; (8003390 <MX_TIM6_Init+0x6c>)
 800334c:	4a12      	ldr	r2, [pc, #72]	; (8003398 <MX_TIM6_Init+0x74>)
 800334e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003350:	4b0f      	ldr	r3, [pc, #60]	; (8003390 <MX_TIM6_Init+0x6c>)
 8003352:	2200      	movs	r2, #0
 8003354:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003356:	4b0e      	ldr	r3, [pc, #56]	; (8003390 <MX_TIM6_Init+0x6c>)
 8003358:	0018      	movs	r0, r3
 800335a:	f005 ffa5 	bl	80092a8 <HAL_TIM_Base_Init>
 800335e:	1e03      	subs	r3, r0, #0
 8003360:	d001      	beq.n	8003366 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8003362:	f000 fa2b 	bl	80037bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003366:	003b      	movs	r3, r7
 8003368:	2200      	movs	r2, #0
 800336a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800336c:	003b      	movs	r3, r7
 800336e:	2200      	movs	r2, #0
 8003370:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003372:	003a      	movs	r2, r7
 8003374:	4b06      	ldr	r3, [pc, #24]	; (8003390 <MX_TIM6_Init+0x6c>)
 8003376:	0011      	movs	r1, r2
 8003378:	0018      	movs	r0, r3
 800337a:	f006 fe68 	bl	800a04e <HAL_TIMEx_MasterConfigSynchronization>
 800337e:	1e03      	subs	r3, r0, #0
 8003380:	d001      	beq.n	8003386 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8003382:	f000 fa1b 	bl	80037bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003386:	46c0      	nop			; (mov r8, r8)
 8003388:	46bd      	mov	sp, r7
 800338a:	b002      	add	sp, #8
 800338c:	bd80      	pop	{r7, pc}
 800338e:	46c0      	nop			; (mov r8, r8)
 8003390:	20000150 	.word	0x20000150
 8003394:	40001000 	.word	0x40001000
 8003398:	0000ffff 	.word	0x0000ffff

0800339c <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b08a      	sub	sp, #40	; 0x28
 80033a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033a2:	2318      	movs	r3, #24
 80033a4:	18fb      	adds	r3, r7, r3
 80033a6:	0018      	movs	r0, r3
 80033a8:	2310      	movs	r3, #16
 80033aa:	001a      	movs	r2, r3
 80033ac:	2100      	movs	r1, #0
 80033ae:	f006 ff56 	bl	800a25e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033b2:	2310      	movs	r3, #16
 80033b4:	18fb      	adds	r3, r7, r3
 80033b6:	0018      	movs	r0, r3
 80033b8:	2308      	movs	r3, #8
 80033ba:	001a      	movs	r2, r3
 80033bc:	2100      	movs	r1, #0
 80033be:	f006 ff4e 	bl	800a25e <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80033c2:	003b      	movs	r3, r7
 80033c4:	0018      	movs	r0, r3
 80033c6:	2310      	movs	r3, #16
 80033c8:	001a      	movs	r2, r3
 80033ca:	2100      	movs	r1, #0
 80033cc:	f006 ff47 	bl	800a25e <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 80033d0:	4b3b      	ldr	r3, [pc, #236]	; (80034c0 <MX_TIM21_Init+0x124>)
 80033d2:	4a3c      	ldr	r2, [pc, #240]	; (80034c4 <MX_TIM21_Init+0x128>)
 80033d4:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 0;
 80033d6:	4b3a      	ldr	r3, [pc, #232]	; (80034c0 <MX_TIM21_Init+0x124>)
 80033d8:	2200      	movs	r2, #0
 80033da:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033dc:	4b38      	ldr	r3, [pc, #224]	; (80034c0 <MX_TIM21_Init+0x124>)
 80033de:	2200      	movs	r2, #0
 80033e0:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 0x7FFF;
 80033e2:	4b37      	ldr	r3, [pc, #220]	; (80034c0 <MX_TIM21_Init+0x124>)
 80033e4:	4a38      	ldr	r2, [pc, #224]	; (80034c8 <MX_TIM21_Init+0x12c>)
 80033e6:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033e8:	4b35      	ldr	r3, [pc, #212]	; (80034c0 <MX_TIM21_Init+0x124>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033ee:	4b34      	ldr	r3, [pc, #208]	; (80034c0 <MX_TIM21_Init+0x124>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 80033f4:	4b32      	ldr	r3, [pc, #200]	; (80034c0 <MX_TIM21_Init+0x124>)
 80033f6:	0018      	movs	r0, r3
 80033f8:	f005 ff56 	bl	80092a8 <HAL_TIM_Base_Init>
 80033fc:	1e03      	subs	r3, r0, #0
 80033fe:	d001      	beq.n	8003404 <MX_TIM21_Init+0x68>
  {
    Error_Handler();
 8003400:	f000 f9dc 	bl	80037bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8003404:	2118      	movs	r1, #24
 8003406:	187b      	adds	r3, r7, r1
 8003408:	2280      	movs	r2, #128	; 0x80
 800340a:	0192      	lsls	r2, r2, #6
 800340c:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 800340e:	187b      	adds	r3, r7, r1
 8003410:	2200      	movs	r2, #0
 8003412:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8003414:	187b      	adds	r3, r7, r1
 8003416:	2200      	movs	r2, #0
 8003418:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 800341a:	187b      	adds	r3, r7, r1
 800341c:	2200      	movs	r2, #0
 800341e:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8003420:	187a      	adds	r2, r7, r1
 8003422:	4b27      	ldr	r3, [pc, #156]	; (80034c0 <MX_TIM21_Init+0x124>)
 8003424:	0011      	movs	r1, r2
 8003426:	0018      	movs	r0, r3
 8003428:	f006 fb1c 	bl	8009a64 <HAL_TIM_ConfigClockSource>
 800342c:	1e03      	subs	r3, r0, #0
 800342e:	d001      	beq.n	8003434 <MX_TIM21_Init+0x98>
  {
    Error_Handler();
 8003430:	f000 f9c4 	bl	80037bc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim21) != HAL_OK)
 8003434:	4b22      	ldr	r3, [pc, #136]	; (80034c0 <MX_TIM21_Init+0x124>)
 8003436:	0018      	movs	r0, r3
 8003438:	f005 ffc8 	bl	80093cc <HAL_TIM_OC_Init>
 800343c:	1e03      	subs	r3, r0, #0
 800343e:	d001      	beq.n	8003444 <MX_TIM21_Init+0xa8>
  {
    Error_Handler();
 8003440:	f000 f9bc 	bl	80037bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003444:	2110      	movs	r1, #16
 8003446:	187b      	adds	r3, r7, r1
 8003448:	2200      	movs	r2, #0
 800344a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800344c:	187b      	adds	r3, r7, r1
 800344e:	2200      	movs	r2, #0
 8003450:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8003452:	187a      	adds	r2, r7, r1
 8003454:	4b1a      	ldr	r3, [pc, #104]	; (80034c0 <MX_TIM21_Init+0x124>)
 8003456:	0011      	movs	r1, r2
 8003458:	0018      	movs	r0, r3
 800345a:	f006 fdf8 	bl	800a04e <HAL_TIMEx_MasterConfigSynchronization>
 800345e:	1e03      	subs	r3, r0, #0
 8003460:	d001      	beq.n	8003466 <MX_TIM21_Init+0xca>
  {
    Error_Handler();
 8003462:	f000 f9ab 	bl	80037bc <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim21, TIM21_ETR_LSE) != HAL_OK)
 8003466:	4b16      	ldr	r3, [pc, #88]	; (80034c0 <MX_TIM21_Init+0x124>)
 8003468:	2103      	movs	r1, #3
 800346a:	0018      	movs	r0, r3
 800346c:	f006 fe32 	bl	800a0d4 <HAL_TIMEx_RemapConfig>
 8003470:	1e03      	subs	r3, r0, #0
 8003472:	d001      	beq.n	8003478 <MX_TIM21_Init+0xdc>
  {
    Error_Handler();
 8003474:	f000 f9a2 	bl	80037bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003478:	003b      	movs	r3, r7
 800347a:	2200      	movs	r2, #0
 800347c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800347e:	003b      	movs	r3, r7
 8003480:	2200      	movs	r2, #0
 8003482:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003484:	003b      	movs	r3, r7
 8003486:	2200      	movs	r2, #0
 8003488:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800348a:	003b      	movs	r3, r7
 800348c:	2200      	movs	r2, #0
 800348e:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003490:	0039      	movs	r1, r7
 8003492:	4b0b      	ldr	r3, [pc, #44]	; (80034c0 <MX_TIM21_Init+0x124>)
 8003494:	2200      	movs	r2, #0
 8003496:	0018      	movs	r0, r3
 8003498:	f006 f9de 	bl	8009858 <HAL_TIM_OC_ConfigChannel>
 800349c:	1e03      	subs	r3, r0, #0
 800349e:	d001      	beq.n	80034a4 <MX_TIM21_Init+0x108>
  {
    Error_Handler();
 80034a0:	f000 f98c 	bl	80037bc <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80034a4:	0039      	movs	r1, r7
 80034a6:	4b06      	ldr	r3, [pc, #24]	; (80034c0 <MX_TIM21_Init+0x124>)
 80034a8:	2204      	movs	r2, #4
 80034aa:	0018      	movs	r0, r3
 80034ac:	f006 f9d4 	bl	8009858 <HAL_TIM_OC_ConfigChannel>
 80034b0:	1e03      	subs	r3, r0, #0
 80034b2:	d001      	beq.n	80034b8 <MX_TIM21_Init+0x11c>
  {
    Error_Handler();
 80034b4:	f000 f982 	bl	80037bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 80034b8:	46c0      	nop			; (mov r8, r8)
 80034ba:	46bd      	mov	sp, r7
 80034bc:	b00a      	add	sp, #40	; 0x28
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	20000598 	.word	0x20000598
 80034c4:	40010800 	.word	0x40010800
 80034c8:	00007fff 	.word	0x00007fff

080034cc <MX_TIM22_Init>:
  * @brief TIM22 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM22_Init(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b08a      	sub	sp, #40	; 0x28
 80034d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034d2:	2318      	movs	r3, #24
 80034d4:	18fb      	adds	r3, r7, r3
 80034d6:	0018      	movs	r0, r3
 80034d8:	2310      	movs	r3, #16
 80034da:	001a      	movs	r2, r3
 80034dc:	2100      	movs	r1, #0
 80034de:	f006 febe 	bl	800a25e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034e2:	2310      	movs	r3, #16
 80034e4:	18fb      	adds	r3, r7, r3
 80034e6:	0018      	movs	r0, r3
 80034e8:	2308      	movs	r3, #8
 80034ea:	001a      	movs	r2, r3
 80034ec:	2100      	movs	r1, #0
 80034ee:	f006 feb6 	bl	800a25e <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80034f2:	003b      	movs	r3, r7
 80034f4:	0018      	movs	r0, r3
 80034f6:	2310      	movs	r3, #16
 80034f8:	001a      	movs	r2, r3
 80034fa:	2100      	movs	r1, #0
 80034fc:	f006 feaf 	bl	800a25e <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 8003500:	4b37      	ldr	r3, [pc, #220]	; (80035e0 <MX_TIM22_Init+0x114>)
 8003502:	4a38      	ldr	r2, [pc, #224]	; (80035e4 <MX_TIM22_Init+0x118>)
 8003504:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 0x400;
 8003506:	4b36      	ldr	r3, [pc, #216]	; (80035e0 <MX_TIM22_Init+0x114>)
 8003508:	2280      	movs	r2, #128	; 0x80
 800350a:	00d2      	lsls	r2, r2, #3
 800350c:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 800350e:	4b34      	ldr	r3, [pc, #208]	; (80035e0 <MX_TIM22_Init+0x114>)
 8003510:	2200      	movs	r2, #0
 8003512:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 1919;
 8003514:	4b32      	ldr	r3, [pc, #200]	; (80035e0 <MX_TIM22_Init+0x114>)
 8003516:	4a34      	ldr	r2, [pc, #208]	; (80035e8 <MX_TIM22_Init+0x11c>)
 8003518:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800351a:	4b31      	ldr	r3, [pc, #196]	; (80035e0 <MX_TIM22_Init+0x114>)
 800351c:	2200      	movs	r2, #0
 800351e:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003520:	4b2f      	ldr	r3, [pc, #188]	; (80035e0 <MX_TIM22_Init+0x114>)
 8003522:	2200      	movs	r2, #0
 8003524:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim22) != HAL_OK)
 8003526:	4b2e      	ldr	r3, [pc, #184]	; (80035e0 <MX_TIM22_Init+0x114>)
 8003528:	0018      	movs	r0, r3
 800352a:	f005 febd 	bl	80092a8 <HAL_TIM_Base_Init>
 800352e:	1e03      	subs	r3, r0, #0
 8003530:	d001      	beq.n	8003536 <MX_TIM22_Init+0x6a>
  {
    Error_Handler();
 8003532:	f000 f943 	bl	80037bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8003536:	2118      	movs	r1, #24
 8003538:	187b      	adds	r3, r7, r1
 800353a:	2280      	movs	r2, #128	; 0x80
 800353c:	0192      	lsls	r2, r2, #6
 800353e:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8003540:	187b      	adds	r3, r7, r1
 8003542:	2200      	movs	r2, #0
 8003544:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8003546:	187b      	adds	r3, r7, r1
 8003548:	2200      	movs	r2, #0
 800354a:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 800354c:	187b      	adds	r3, r7, r1
 800354e:	2200      	movs	r2, #0
 8003550:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig) != HAL_OK)
 8003552:	187a      	adds	r2, r7, r1
 8003554:	4b22      	ldr	r3, [pc, #136]	; (80035e0 <MX_TIM22_Init+0x114>)
 8003556:	0011      	movs	r1, r2
 8003558:	0018      	movs	r0, r3
 800355a:	f006 fa83 	bl	8009a64 <HAL_TIM_ConfigClockSource>
 800355e:	1e03      	subs	r3, r0, #0
 8003560:	d001      	beq.n	8003566 <MX_TIM22_Init+0x9a>
  {
    Error_Handler();
 8003562:	f000 f92b 	bl	80037bc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim22) != HAL_OK)
 8003566:	4b1e      	ldr	r3, [pc, #120]	; (80035e0 <MX_TIM22_Init+0x114>)
 8003568:	0018      	movs	r0, r3
 800356a:	f005 ff2f 	bl	80093cc <HAL_TIM_OC_Init>
 800356e:	1e03      	subs	r3, r0, #0
 8003570:	d001      	beq.n	8003576 <MX_TIM22_Init+0xaa>
  {
    Error_Handler();
 8003572:	f000 f923 	bl	80037bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003576:	2110      	movs	r1, #16
 8003578:	187b      	adds	r3, r7, r1
 800357a:	2200      	movs	r2, #0
 800357c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800357e:	187b      	adds	r3, r7, r1
 8003580:	2200      	movs	r2, #0
 8003582:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 8003584:	187a      	adds	r2, r7, r1
 8003586:	4b16      	ldr	r3, [pc, #88]	; (80035e0 <MX_TIM22_Init+0x114>)
 8003588:	0011      	movs	r1, r2
 800358a:	0018      	movs	r0, r3
 800358c:	f006 fd5f 	bl	800a04e <HAL_TIMEx_MasterConfigSynchronization>
 8003590:	1e03      	subs	r3, r0, #0
 8003592:	d001      	beq.n	8003598 <MX_TIM22_Init+0xcc>
  {
    Error_Handler();
 8003594:	f000 f912 	bl	80037bc <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim22, TIM22_ETR_LSE) != HAL_OK)
 8003598:	4b11      	ldr	r3, [pc, #68]	; (80035e0 <MX_TIM22_Init+0x114>)
 800359a:	2103      	movs	r1, #3
 800359c:	0018      	movs	r0, r3
 800359e:	f006 fd99 	bl	800a0d4 <HAL_TIMEx_RemapConfig>
 80035a2:	1e03      	subs	r3, r0, #0
 80035a4:	d001      	beq.n	80035aa <MX_TIM22_Init+0xde>
  {
    Error_Handler();
 80035a6:	f000 f909 	bl	80037bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80035aa:	003b      	movs	r3, r7
 80035ac:	2200      	movs	r2, #0
 80035ae:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80035b0:	003b      	movs	r3, r7
 80035b2:	2200      	movs	r2, #0
 80035b4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035b6:	003b      	movs	r3, r7
 80035b8:	2200      	movs	r2, #0
 80035ba:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035bc:	003b      	movs	r3, r7
 80035be:	2200      	movs	r2, #0
 80035c0:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80035c2:	0039      	movs	r1, r7
 80035c4:	4b06      	ldr	r3, [pc, #24]	; (80035e0 <MX_TIM22_Init+0x114>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	0018      	movs	r0, r3
 80035ca:	f006 f945 	bl	8009858 <HAL_TIM_OC_ConfigChannel>
 80035ce:	1e03      	subs	r3, r0, #0
 80035d0:	d001      	beq.n	80035d6 <MX_TIM22_Init+0x10a>
  {
    Error_Handler();
 80035d2:	f000 f8f3 	bl	80037bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */

}
 80035d6:	46c0      	nop			; (mov r8, r8)
 80035d8:	46bd      	mov	sp, r7
 80035da:	b00a      	add	sp, #40	; 0x28
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	46c0      	nop			; (mov r8, r8)
 80035e0:	2000022c 	.word	0x2000022c
 80035e4:	40011400 	.word	0x40011400
 80035e8:	0000077f 	.word	0x0000077f

080035ec <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80035f0:	4b0f      	ldr	r3, [pc, #60]	; (8003630 <MX_USB_PCD_Init+0x44>)
 80035f2:	4a10      	ldr	r2, [pc, #64]	; (8003634 <MX_USB_PCD_Init+0x48>)
 80035f4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80035f6:	4b0e      	ldr	r3, [pc, #56]	; (8003630 <MX_USB_PCD_Init+0x44>)
 80035f8:	2208      	movs	r2, #8
 80035fa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80035fc:	4b0c      	ldr	r3, [pc, #48]	; (8003630 <MX_USB_PCD_Init+0x44>)
 80035fe:	2202      	movs	r2, #2
 8003600:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003602:	4b0b      	ldr	r3, [pc, #44]	; (8003630 <MX_USB_PCD_Init+0x44>)
 8003604:	2202      	movs	r2, #2
 8003606:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003608:	4b09      	ldr	r3, [pc, #36]	; (8003630 <MX_USB_PCD_Init+0x44>)
 800360a:	2200      	movs	r2, #0
 800360c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800360e:	4b08      	ldr	r3, [pc, #32]	; (8003630 <MX_USB_PCD_Init+0x44>)
 8003610:	2200      	movs	r2, #0
 8003612:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8003614:	4b06      	ldr	r3, [pc, #24]	; (8003630 <MX_USB_PCD_Init+0x44>)
 8003616:	2200      	movs	r2, #0
 8003618:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800361a:	4b05      	ldr	r3, [pc, #20]	; (8003630 <MX_USB_PCD_Init+0x44>)
 800361c:	0018      	movs	r0, r3
 800361e:	f003 fb03 	bl	8006c28 <HAL_PCD_Init>
 8003622:	1e03      	subs	r3, r0, #0
 8003624:	d001      	beq.n	800362a <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 8003626:	f000 f8c9 	bl	80037bc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800362a:	46c0      	nop			; (mov r8, r8)
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	200002c8 	.word	0x200002c8
 8003634:	40005c00 	.word	0x40005c00

08003638 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003638:	b590      	push	{r4, r7, lr}
 800363a:	b089      	sub	sp, #36	; 0x24
 800363c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800363e:	240c      	movs	r4, #12
 8003640:	193b      	adds	r3, r7, r4
 8003642:	0018      	movs	r0, r3
 8003644:	2314      	movs	r3, #20
 8003646:	001a      	movs	r2, r3
 8003648:	2100      	movs	r1, #0
 800364a:	f006 fe08 	bl	800a25e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800364e:	4b56      	ldr	r3, [pc, #344]	; (80037a8 <MX_GPIO_Init+0x170>)
 8003650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003652:	4b55      	ldr	r3, [pc, #340]	; (80037a8 <MX_GPIO_Init+0x170>)
 8003654:	2104      	movs	r1, #4
 8003656:	430a      	orrs	r2, r1
 8003658:	62da      	str	r2, [r3, #44]	; 0x2c
 800365a:	4b53      	ldr	r3, [pc, #332]	; (80037a8 <MX_GPIO_Init+0x170>)
 800365c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365e:	2204      	movs	r2, #4
 8003660:	4013      	ands	r3, r2
 8003662:	60bb      	str	r3, [r7, #8]
 8003664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003666:	4b50      	ldr	r3, [pc, #320]	; (80037a8 <MX_GPIO_Init+0x170>)
 8003668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800366a:	4b4f      	ldr	r3, [pc, #316]	; (80037a8 <MX_GPIO_Init+0x170>)
 800366c:	2101      	movs	r1, #1
 800366e:	430a      	orrs	r2, r1
 8003670:	62da      	str	r2, [r3, #44]	; 0x2c
 8003672:	4b4d      	ldr	r3, [pc, #308]	; (80037a8 <MX_GPIO_Init+0x170>)
 8003674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003676:	2201      	movs	r2, #1
 8003678:	4013      	ands	r3, r2
 800367a:	607b      	str	r3, [r7, #4]
 800367c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800367e:	4b4a      	ldr	r3, [pc, #296]	; (80037a8 <MX_GPIO_Init+0x170>)
 8003680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003682:	4b49      	ldr	r3, [pc, #292]	; (80037a8 <MX_GPIO_Init+0x170>)
 8003684:	2102      	movs	r1, #2
 8003686:	430a      	orrs	r2, r1
 8003688:	62da      	str	r2, [r3, #44]	; 0x2c
 800368a:	4b47      	ldr	r3, [pc, #284]	; (80037a8 <MX_GPIO_Init+0x170>)
 800368c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368e:	2202      	movs	r2, #2
 8003690:	4013      	ands	r3, r2
 8003692:	603b      	str	r3, [r7, #0]
 8003694:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 8003696:	23a0      	movs	r3, #160	; 0xa0
 8003698:	05db      	lsls	r3, r3, #23
 800369a:	2200      	movs	r2, #0
 800369c:	21f2      	movs	r1, #242	; 0xf2
 800369e:	0018      	movs	r0, r3
 80036a0:	f003 fa77 	bl	8006b92 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80036a4:	23a0      	movs	r3, #160	; 0xa0
 80036a6:	05db      	lsls	r3, r3, #23
 80036a8:	2201      	movs	r2, #1
 80036aa:	2104      	movs	r1, #4
 80036ac:	0018      	movs	r0, r3
 80036ae:	f003 fa70 	bl	8006b92 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80036b2:	2380      	movs	r3, #128	; 0x80
 80036b4:	015b      	lsls	r3, r3, #5
 80036b6:	483d      	ldr	r0, [pc, #244]	; (80037ac <MX_GPIO_Init+0x174>)
 80036b8:	2201      	movs	r2, #1
 80036ba:	0019      	movs	r1, r3
 80036bc:	f003 fa69 	bl	8006b92 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80036c0:	2380      	movs	r3, #128	; 0x80
 80036c2:	01db      	lsls	r3, r3, #7
 80036c4:	4839      	ldr	r0, [pc, #228]	; (80037ac <MX_GPIO_Init+0x174>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	0019      	movs	r1, r3
 80036ca:	f003 fa62 	bl	8006b92 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80036ce:	4b38      	ldr	r3, [pc, #224]	; (80037b0 <MX_GPIO_Init+0x178>)
 80036d0:	2201      	movs	r2, #1
 80036d2:	2180      	movs	r1, #128	; 0x80
 80036d4:	0018      	movs	r0, r3
 80036d6:	f003 fa5c 	bl	8006b92 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA4 PA5 
                           PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5 
 80036da:	193b      	adds	r3, r7, r4
 80036dc:	22f6      	movs	r2, #246	; 0xf6
 80036de:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036e0:	193b      	adds	r3, r7, r4
 80036e2:	2201      	movs	r2, #1
 80036e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e6:	193b      	adds	r3, r7, r4
 80036e8:	2200      	movs	r2, #0
 80036ea:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ec:	193b      	adds	r3, r7, r4
 80036ee:	2200      	movs	r2, #0
 80036f0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036f2:	193a      	adds	r2, r7, r4
 80036f4:	23a0      	movs	r3, #160	; 0xa0
 80036f6:	05db      	lsls	r3, r3, #23
 80036f8:	0011      	movs	r1, r2
 80036fa:	0018      	movs	r0, r3
 80036fc:	f003 f8ae 	bl	800685c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11;
 8003700:	193b      	adds	r3, r7, r4
 8003702:	4a2c      	ldr	r2, [pc, #176]	; (80037b4 <MX_GPIO_Init+0x17c>)
 8003704:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003706:	193b      	adds	r3, r7, r4
 8003708:	4a2b      	ldr	r2, [pc, #172]	; (80037b8 <MX_GPIO_Init+0x180>)
 800370a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800370c:	193b      	adds	r3, r7, r4
 800370e:	2200      	movs	r2, #0
 8003710:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003712:	193b      	adds	r3, r7, r4
 8003714:	4a25      	ldr	r2, [pc, #148]	; (80037ac <MX_GPIO_Init+0x174>)
 8003716:	0019      	movs	r1, r3
 8003718:	0010      	movs	r0, r2
 800371a:	f003 f89f 	bl	800685c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 800371e:	0021      	movs	r1, r4
 8003720:	187b      	adds	r3, r7, r1
 8003722:	22a0      	movs	r2, #160	; 0xa0
 8003724:	01d2      	lsls	r2, r2, #7
 8003726:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003728:	187b      	adds	r3, r7, r1
 800372a:	2201      	movs	r2, #1
 800372c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800372e:	187b      	adds	r3, r7, r1
 8003730:	2200      	movs	r2, #0
 8003732:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003734:	187b      	adds	r3, r7, r1
 8003736:	2200      	movs	r2, #0
 8003738:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800373a:	000c      	movs	r4, r1
 800373c:	187b      	adds	r3, r7, r1
 800373e:	4a1b      	ldr	r2, [pc, #108]	; (80037ac <MX_GPIO_Init+0x174>)
 8003740:	0019      	movs	r1, r3
 8003742:	0010      	movs	r0, r2
 8003744:	f003 f88a 	bl	800685c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003748:	0021      	movs	r1, r4
 800374a:	187b      	adds	r3, r7, r1
 800374c:	2280      	movs	r2, #128	; 0x80
 800374e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003750:	187b      	adds	r3, r7, r1
 8003752:	2201      	movs	r2, #1
 8003754:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003756:	187b      	adds	r3, r7, r1
 8003758:	2200      	movs	r2, #0
 800375a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800375c:	187b      	adds	r3, r7, r1
 800375e:	2200      	movs	r2, #0
 8003760:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003762:	187b      	adds	r3, r7, r1
 8003764:	4a12      	ldr	r2, [pc, #72]	; (80037b0 <MX_GPIO_Init+0x178>)
 8003766:	0019      	movs	r1, r3
 8003768:	0010      	movs	r0, r2
 800376a:	f003 f877 	bl	800685c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 800376e:	2200      	movs	r2, #0
 8003770:	2100      	movs	r1, #0
 8003772:	2005      	movs	r0, #5
 8003774:	f002 ffd8 	bl	8006728 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8003778:	2005      	movs	r0, #5
 800377a:	f002 ffea 	bl	8006752 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 800377e:	2200      	movs	r2, #0
 8003780:	2100      	movs	r1, #0
 8003782:	2006      	movs	r0, #6
 8003784:	f002 ffd0 	bl	8006728 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8003788:	2006      	movs	r0, #6
 800378a:	f002 ffe2 	bl	8006752 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800378e:	2200      	movs	r2, #0
 8003790:	2100      	movs	r1, #0
 8003792:	2007      	movs	r0, #7
 8003794:	f002 ffc8 	bl	8006728 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003798:	2007      	movs	r0, #7
 800379a:	f002 ffda 	bl	8006752 <HAL_NVIC_EnableIRQ>

}
 800379e:	46c0      	nop			; (mov r8, r8)
 80037a0:	46bd      	mov	sp, r7
 80037a2:	b009      	add	sp, #36	; 0x24
 80037a4:	bd90      	pop	{r4, r7, pc}
 80037a6:	46c0      	nop			; (mov r8, r8)
 80037a8:	40021000 	.word	0x40021000
 80037ac:	50000400 	.word	0x50000400
 80037b0:	50000800 	.word	0x50000800
 80037b4:	00000c06 	.word	0x00000c06
 80037b8:	10110000 	.word	0x10110000

080037bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80037c0:	46c0      	nop			; (mov r8, r8)
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
	...

080037c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037cc:	4b07      	ldr	r3, [pc, #28]	; (80037ec <HAL_MspInit+0x24>)
 80037ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037d0:	4b06      	ldr	r3, [pc, #24]	; (80037ec <HAL_MspInit+0x24>)
 80037d2:	2101      	movs	r1, #1
 80037d4:	430a      	orrs	r2, r1
 80037d6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80037d8:	4b04      	ldr	r3, [pc, #16]	; (80037ec <HAL_MspInit+0x24>)
 80037da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037dc:	4b03      	ldr	r3, [pc, #12]	; (80037ec <HAL_MspInit+0x24>)
 80037de:	2180      	movs	r1, #128	; 0x80
 80037e0:	0549      	lsls	r1, r1, #21
 80037e2:	430a      	orrs	r2, r1
 80037e4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037e6:	46c0      	nop			; (mov r8, r8)
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	40021000 	.word	0x40021000

080037f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b088      	sub	sp, #32
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037f8:	230c      	movs	r3, #12
 80037fa:	18fb      	adds	r3, r7, r3
 80037fc:	0018      	movs	r0, r3
 80037fe:	2314      	movs	r3, #20
 8003800:	001a      	movs	r2, r3
 8003802:	2100      	movs	r1, #0
 8003804:	f006 fd2b 	bl	800a25e <memset>
  if(hadc->Instance==ADC1)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a19      	ldr	r2, [pc, #100]	; (8003874 <HAL_ADC_MspInit+0x84>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d12b      	bne.n	800386a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003812:	4b19      	ldr	r3, [pc, #100]	; (8003878 <HAL_ADC_MspInit+0x88>)
 8003814:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003816:	4b18      	ldr	r3, [pc, #96]	; (8003878 <HAL_ADC_MspInit+0x88>)
 8003818:	2180      	movs	r1, #128	; 0x80
 800381a:	0089      	lsls	r1, r1, #2
 800381c:	430a      	orrs	r2, r1
 800381e:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003820:	4b15      	ldr	r3, [pc, #84]	; (8003878 <HAL_ADC_MspInit+0x88>)
 8003822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003824:	4b14      	ldr	r3, [pc, #80]	; (8003878 <HAL_ADC_MspInit+0x88>)
 8003826:	2101      	movs	r1, #1
 8003828:	430a      	orrs	r2, r1
 800382a:	62da      	str	r2, [r3, #44]	; 0x2c
 800382c:	4b12      	ldr	r3, [pc, #72]	; (8003878 <HAL_ADC_MspInit+0x88>)
 800382e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003830:	2201      	movs	r2, #1
 8003832:	4013      	ands	r3, r2
 8003834:	60bb      	str	r3, [r7, #8]
 8003836:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration    
    PA0     ------> ADC_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003838:	210c      	movs	r1, #12
 800383a:	187b      	adds	r3, r7, r1
 800383c:	2201      	movs	r2, #1
 800383e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003840:	187b      	adds	r3, r7, r1
 8003842:	2203      	movs	r2, #3
 8003844:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003846:	187b      	adds	r3, r7, r1
 8003848:	2200      	movs	r2, #0
 800384a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800384c:	187a      	adds	r2, r7, r1
 800384e:	23a0      	movs	r3, #160	; 0xa0
 8003850:	05db      	lsls	r3, r3, #23
 8003852:	0011      	movs	r1, r2
 8003854:	0018      	movs	r0, r3
 8003856:	f003 f801 	bl	800685c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 800385a:	2200      	movs	r2, #0
 800385c:	2100      	movs	r1, #0
 800385e:	200c      	movs	r0, #12
 8003860:	f002 ff62 	bl	8006728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8003864:	200c      	movs	r0, #12
 8003866:	f002 ff74 	bl	8006752 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800386a:	46c0      	nop			; (mov r8, r8)
 800386c:	46bd      	mov	sp, r7
 800386e:	b008      	add	sp, #32
 8003870:	bd80      	pop	{r7, pc}
 8003872:	46c0      	nop			; (mov r8, r8)
 8003874:	40012400 	.word	0x40012400
 8003878:	40021000 	.word	0x40021000

0800387c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b088      	sub	sp, #32
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003884:	230c      	movs	r3, #12
 8003886:	18fb      	adds	r3, r7, r3
 8003888:	0018      	movs	r0, r3
 800388a:	2314      	movs	r3, #20
 800388c:	001a      	movs	r2, r3
 800388e:	2100      	movs	r1, #0
 8003890:	f006 fce5 	bl	800a25e <memset>
  if(hrtc->Instance==RTC)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a14      	ldr	r2, [pc, #80]	; (80038ec <HAL_RTC_MspInit+0x70>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d121      	bne.n	80038e2 <HAL_RTC_MspInit+0x66>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800389e:	4b14      	ldr	r3, [pc, #80]	; (80038f0 <HAL_RTC_MspInit+0x74>)
 80038a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80038a2:	4b13      	ldr	r3, [pc, #76]	; (80038f0 <HAL_RTC_MspInit+0x74>)
 80038a4:	2180      	movs	r1, #128	; 0x80
 80038a6:	02c9      	lsls	r1, r1, #11
 80038a8:	430a      	orrs	r2, r1
 80038aa:	651a      	str	r2, [r3, #80]	; 0x50
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038ac:	4b10      	ldr	r3, [pc, #64]	; (80038f0 <HAL_RTC_MspInit+0x74>)
 80038ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b0:	4b0f      	ldr	r3, [pc, #60]	; (80038f0 <HAL_RTC_MspInit+0x74>)
 80038b2:	2104      	movs	r1, #4
 80038b4:	430a      	orrs	r2, r1
 80038b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80038b8:	4b0d      	ldr	r3, [pc, #52]	; (80038f0 <HAL_RTC_MspInit+0x74>)
 80038ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038bc:	2204      	movs	r2, #4
 80038be:	4013      	ands	r3, r2
 80038c0:	60bb      	str	r3, [r7, #8]
 80038c2:	68bb      	ldr	r3, [r7, #8]
    /**RTC GPIO Configuration    
    PC13     ------> RTC_OUT_CALIB 
    */
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038c4:	230c      	movs	r3, #12
 80038c6:	18fb      	adds	r3, r7, r3
 80038c8:	4a0a      	ldr	r2, [pc, #40]	; (80038f4 <HAL_RTC_MspInit+0x78>)
 80038ca:	0019      	movs	r1, r3
 80038cc:	0010      	movs	r0, r2
 80038ce:	f002 ffc5 	bl	800685c <HAL_GPIO_Init>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80038d2:	2200      	movs	r2, #0
 80038d4:	2100      	movs	r1, #0
 80038d6:	2002      	movs	r0, #2
 80038d8:	f002 ff26 	bl	8006728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80038dc:	2002      	movs	r0, #2
 80038de:	f002 ff38 	bl	8006752 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80038e2:	46c0      	nop			; (mov r8, r8)
 80038e4:	46bd      	mov	sp, r7
 80038e6:	b008      	add	sp, #32
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	46c0      	nop			; (mov r8, r8)
 80038ec:	40002800 	.word	0x40002800
 80038f0:	40021000 	.word	0x40021000
 80038f4:	50000800 	.word	0x50000800

080038f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b088      	sub	sp, #32
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003900:	230c      	movs	r3, #12
 8003902:	18fb      	adds	r3, r7, r3
 8003904:	0018      	movs	r0, r3
 8003906:	2314      	movs	r3, #20
 8003908:	001a      	movs	r2, r3
 800390a:	2100      	movs	r1, #0
 800390c:	f006 fca7 	bl	800a25e <memset>
  if(hspi->Instance==SPI2)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a1c      	ldr	r2, [pc, #112]	; (8003988 <HAL_SPI_MspInit+0x90>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d131      	bne.n	800397e <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800391a:	4b1c      	ldr	r3, [pc, #112]	; (800398c <HAL_SPI_MspInit+0x94>)
 800391c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800391e:	4b1b      	ldr	r3, [pc, #108]	; (800398c <HAL_SPI_MspInit+0x94>)
 8003920:	2180      	movs	r1, #128	; 0x80
 8003922:	01c9      	lsls	r1, r1, #7
 8003924:	430a      	orrs	r2, r1
 8003926:	639a      	str	r2, [r3, #56]	; 0x38
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003928:	4b18      	ldr	r3, [pc, #96]	; (800398c <HAL_SPI_MspInit+0x94>)
 800392a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800392c:	4b17      	ldr	r3, [pc, #92]	; (800398c <HAL_SPI_MspInit+0x94>)
 800392e:	2102      	movs	r1, #2
 8003930:	430a      	orrs	r2, r1
 8003932:	62da      	str	r2, [r3, #44]	; 0x2c
 8003934:	4b15      	ldr	r3, [pc, #84]	; (800398c <HAL_SPI_MspInit+0x94>)
 8003936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003938:	2202      	movs	r2, #2
 800393a:	4013      	ands	r3, r2
 800393c:	60bb      	str	r3, [r7, #8]
 800393e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8003940:	210c      	movs	r1, #12
 8003942:	187b      	adds	r3, r7, r1
 8003944:	22a0      	movs	r2, #160	; 0xa0
 8003946:	0212      	lsls	r2, r2, #8
 8003948:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800394a:	187b      	adds	r3, r7, r1
 800394c:	2202      	movs	r2, #2
 800394e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003950:	187b      	adds	r3, r7, r1
 8003952:	2200      	movs	r2, #0
 8003954:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003956:	187b      	adds	r3, r7, r1
 8003958:	2203      	movs	r2, #3
 800395a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800395c:	187b      	adds	r3, r7, r1
 800395e:	2200      	movs	r2, #0
 8003960:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003962:	187b      	adds	r3, r7, r1
 8003964:	4a0a      	ldr	r2, [pc, #40]	; (8003990 <HAL_SPI_MspInit+0x98>)
 8003966:	0019      	movs	r1, r3
 8003968:	0010      	movs	r0, r2
 800396a:	f002 ff77 	bl	800685c <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800396e:	2200      	movs	r2, #0
 8003970:	2100      	movs	r1, #0
 8003972:	201a      	movs	r0, #26
 8003974:	f002 fed8 	bl	8006728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8003978:	201a      	movs	r0, #26
 800397a:	f002 feea 	bl	8006752 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800397e:	46c0      	nop			; (mov r8, r8)
 8003980:	46bd      	mov	sp, r7
 8003982:	b008      	add	sp, #32
 8003984:	bd80      	pop	{r7, pc}
 8003986:	46c0      	nop			; (mov r8, r8)
 8003988:	40003800 	.word	0x40003800
 800398c:	40021000 	.word	0x40021000
 8003990:	50000400 	.word	0x50000400

08003994 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	2380      	movs	r3, #128	; 0x80
 80039a2:	05db      	lsls	r3, r3, #23
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d10e      	bne.n	80039c6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80039a8:	4b30      	ldr	r3, [pc, #192]	; (8003a6c <HAL_TIM_Base_MspInit+0xd8>)
 80039aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039ac:	4b2f      	ldr	r3, [pc, #188]	; (8003a6c <HAL_TIM_Base_MspInit+0xd8>)
 80039ae:	2101      	movs	r1, #1
 80039b0:	430a      	orrs	r2, r1
 80039b2:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80039b4:	2200      	movs	r2, #0
 80039b6:	2100      	movs	r1, #0
 80039b8:	200f      	movs	r0, #15
 80039ba:	f002 feb5 	bl	8006728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80039be:	200f      	movs	r0, #15
 80039c0:	f002 fec7 	bl	8006752 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }

}
 80039c4:	e04e      	b.n	8003a64 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM3)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a29      	ldr	r2, [pc, #164]	; (8003a70 <HAL_TIM_Base_MspInit+0xdc>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d10e      	bne.n	80039ee <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80039d0:	4b26      	ldr	r3, [pc, #152]	; (8003a6c <HAL_TIM_Base_MspInit+0xd8>)
 80039d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039d4:	4b25      	ldr	r3, [pc, #148]	; (8003a6c <HAL_TIM_Base_MspInit+0xd8>)
 80039d6:	2102      	movs	r1, #2
 80039d8:	430a      	orrs	r2, r1
 80039da:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80039dc:	2200      	movs	r2, #0
 80039de:	2100      	movs	r1, #0
 80039e0:	2010      	movs	r0, #16
 80039e2:	f002 fea1 	bl	8006728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80039e6:	2010      	movs	r0, #16
 80039e8:	f002 feb3 	bl	8006752 <HAL_NVIC_EnableIRQ>
}
 80039ec:	e03a      	b.n	8003a64 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM6)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a20      	ldr	r2, [pc, #128]	; (8003a74 <HAL_TIM_Base_MspInit+0xe0>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d10e      	bne.n	8003a16 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80039f8:	4b1c      	ldr	r3, [pc, #112]	; (8003a6c <HAL_TIM_Base_MspInit+0xd8>)
 80039fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039fc:	4b1b      	ldr	r3, [pc, #108]	; (8003a6c <HAL_TIM_Base_MspInit+0xd8>)
 80039fe:	2110      	movs	r1, #16
 8003a00:	430a      	orrs	r2, r1
 8003a02:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003a04:	2200      	movs	r2, #0
 8003a06:	2100      	movs	r1, #0
 8003a08:	2011      	movs	r0, #17
 8003a0a:	f002 fe8d 	bl	8006728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003a0e:	2011      	movs	r0, #17
 8003a10:	f002 fe9f 	bl	8006752 <HAL_NVIC_EnableIRQ>
}
 8003a14:	e026      	b.n	8003a64 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM21)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a17      	ldr	r2, [pc, #92]	; (8003a78 <HAL_TIM_Base_MspInit+0xe4>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d10e      	bne.n	8003a3e <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8003a20:	4b12      	ldr	r3, [pc, #72]	; (8003a6c <HAL_TIM_Base_MspInit+0xd8>)
 8003a22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a24:	4b11      	ldr	r3, [pc, #68]	; (8003a6c <HAL_TIM_Base_MspInit+0xd8>)
 8003a26:	2104      	movs	r1, #4
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	2100      	movs	r1, #0
 8003a30:	2014      	movs	r0, #20
 8003a32:	f002 fe79 	bl	8006728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8003a36:	2014      	movs	r0, #20
 8003a38:	f002 fe8b 	bl	8006752 <HAL_NVIC_EnableIRQ>
}
 8003a3c:	e012      	b.n	8003a64 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM22)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a0e      	ldr	r2, [pc, #56]	; (8003a7c <HAL_TIM_Base_MspInit+0xe8>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d10d      	bne.n	8003a64 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM22_CLK_ENABLE();
 8003a48:	4b08      	ldr	r3, [pc, #32]	; (8003a6c <HAL_TIM_Base_MspInit+0xd8>)
 8003a4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a4c:	4b07      	ldr	r3, [pc, #28]	; (8003a6c <HAL_TIM_Base_MspInit+0xd8>)
 8003a4e:	2120      	movs	r1, #32
 8003a50:	430a      	orrs	r2, r1
 8003a52:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM22_IRQn, 0, 0);
 8003a54:	2200      	movs	r2, #0
 8003a56:	2100      	movs	r1, #0
 8003a58:	2016      	movs	r0, #22
 8003a5a:	f002 fe65 	bl	8006728 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM22_IRQn);
 8003a5e:	2016      	movs	r0, #22
 8003a60:	f002 fe77 	bl	8006752 <HAL_NVIC_EnableIRQ>
}
 8003a64:	46c0      	nop			; (mov r8, r8)
 8003a66:	46bd      	mov	sp, r7
 8003a68:	b002      	add	sp, #8
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	40021000 	.word	0x40021000
 8003a70:	40000400 	.word	0x40000400
 8003a74:	40001000 	.word	0x40001000
 8003a78:	40010800 	.word	0x40010800
 8003a7c:	40011400 	.word	0x40011400

08003a80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b088      	sub	sp, #32
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a88:	230c      	movs	r3, #12
 8003a8a:	18fb      	adds	r3, r7, r3
 8003a8c:	0018      	movs	r0, r3
 8003a8e:	2314      	movs	r3, #20
 8003a90:	001a      	movs	r2, r3
 8003a92:	2100      	movs	r1, #0
 8003a94:	f006 fbe3 	bl	800a25e <memset>
  if(htim->Instance==TIM3)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a14      	ldr	r2, [pc, #80]	; (8003af0 <HAL_TIM_MspPostInit+0x70>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d121      	bne.n	8003ae6 <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003aa2:	4b14      	ldr	r3, [pc, #80]	; (8003af4 <HAL_TIM_MspPostInit+0x74>)
 8003aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa6:	4b13      	ldr	r3, [pc, #76]	; (8003af4 <HAL_TIM_MspPostInit+0x74>)
 8003aa8:	2104      	movs	r1, #4
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	62da      	str	r2, [r3, #44]	; 0x2c
 8003aae:	4b11      	ldr	r3, [pc, #68]	; (8003af4 <HAL_TIM_MspPostInit+0x74>)
 8003ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab2:	2204      	movs	r2, #4
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	60bb      	str	r3, [r7, #8]
 8003ab8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PC6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003aba:	210c      	movs	r1, #12
 8003abc:	187b      	adds	r3, r7, r1
 8003abe:	2240      	movs	r2, #64	; 0x40
 8003ac0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ac2:	187b      	adds	r3, r7, r1
 8003ac4:	2202      	movs	r2, #2
 8003ac6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac8:	187b      	adds	r3, r7, r1
 8003aca:	2200      	movs	r2, #0
 8003acc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ace:	187b      	adds	r3, r7, r1
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003ad4:	187b      	adds	r3, r7, r1
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ada:	187b      	adds	r3, r7, r1
 8003adc:	4a06      	ldr	r2, [pc, #24]	; (8003af8 <HAL_TIM_MspPostInit+0x78>)
 8003ade:	0019      	movs	r1, r3
 8003ae0:	0010      	movs	r0, r2
 8003ae2:	f002 febb 	bl	800685c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003ae6:	46c0      	nop			; (mov r8, r8)
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	b008      	add	sp, #32
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	46c0      	nop			; (mov r8, r8)
 8003af0:	40000400 	.word	0x40000400
 8003af4:	40021000 	.word	0x40021000
 8003af8:	50000800 	.word	0x50000800

08003afc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a06      	ldr	r2, [pc, #24]	; (8003b24 <HAL_PCD_MspInit+0x28>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d106      	bne.n	8003b1c <HAL_PCD_MspInit+0x20>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003b0e:	4b06      	ldr	r3, [pc, #24]	; (8003b28 <HAL_PCD_MspInit+0x2c>)
 8003b10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b12:	4b05      	ldr	r3, [pc, #20]	; (8003b28 <HAL_PCD_MspInit+0x2c>)
 8003b14:	2180      	movs	r1, #128	; 0x80
 8003b16:	0409      	lsls	r1, r1, #16
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8003b1c:	46c0      	nop			; (mov r8, r8)
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	b002      	add	sp, #8
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	40005c00 	.word	0x40005c00
 8003b28:	40021000 	.word	0x40021000

08003b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003b30:	46c0      	nop			; (mov r8, r8)
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b3a:	e7fe      	b.n	8003b3a <HardFault_Handler+0x4>

08003b3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003b40:	46c0      	nop			; (mov r8, r8)
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b4a:	46c0      	nop			; (mov r8, r8)
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b54:	f002 f9d6 	bl	8005f04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b58:	46c0      	nop			; (mov r8, r8)
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
	...

08003b60 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003b64:	4b03      	ldr	r3, [pc, #12]	; (8003b74 <RTC_IRQHandler+0x14>)
 8003b66:	0018      	movs	r0, r3
 8003b68:	f004 fd48 	bl	80085fc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8003b6c:	46c0      	nop			; (mov r8, r8)
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	46c0      	nop			; (mov r8, r8)
 8003b74:	20000268 	.word	0x20000268

08003b78 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003b7c:	2002      	movs	r0, #2
 8003b7e:	f003 f837 	bl	8006bf0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8003b82:	46c0      	nop			; (mov r8, r8)
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003b8c:	2004      	movs	r0, #4
 8003b8e:	f003 f82f 	bl	8006bf0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8003b92:	46c0      	nop			; (mov r8, r8)
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003b9c:	2380      	movs	r3, #128	; 0x80
 8003b9e:	00db      	lsls	r3, r3, #3
 8003ba0:	0018      	movs	r0, r3
 8003ba2:	f003 f825 	bl	8006bf0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003ba6:	2380      	movs	r3, #128	; 0x80
 8003ba8:	011b      	lsls	r3, r3, #4
 8003baa:	0018      	movs	r0, r3
 8003bac:	f003 f820 	bl	8006bf0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003bb0:	46c0      	nop			; (mov r8, r8)
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
	...

08003bb8 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8003bbc:	4b03      	ldr	r3, [pc, #12]	; (8003bcc <ADC1_COMP_IRQHandler+0x14>)
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	f002 fb48 	bl	8006254 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8003bc4:	46c0      	nop			; (mov r8, r8)
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	46c0      	nop			; (mov r8, r8)
 8003bcc:	2000053c 	.word	0x2000053c

08003bd0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003bd4:	4b03      	ldr	r3, [pc, #12]	; (8003be4 <TIM2_IRQHandler+0x14>)
 8003bd6:	0018      	movs	r0, r3
 8003bd8:	f005 fd56 	bl	8009688 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003bdc:	46c0      	nop			; (mov r8, r8)
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	46c0      	nop			; (mov r8, r8)
 8003be4:	2000028c 	.word	0x2000028c

08003be8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003bec:	4b03      	ldr	r3, [pc, #12]	; (8003bfc <TIM3_IRQHandler+0x14>)
 8003bee:	0018      	movs	r0, r3
 8003bf0:	f005 fd4a 	bl	8009688 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003bf4:	46c0      	nop			; (mov r8, r8)
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	46c0      	nop			; (mov r8, r8)
 8003bfc:	200001f0 	.word	0x200001f0

08003c00 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003c04:	4b03      	ldr	r3, [pc, #12]	; (8003c14 <TIM6_DAC_IRQHandler+0x14>)
 8003c06:	0018      	movs	r0, r3
 8003c08:	f005 fd3e 	bl	8009688 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003c0c:	46c0      	nop			; (mov r8, r8)
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	46c0      	nop			; (mov r8, r8)
 8003c14:	20000150 	.word	0x20000150

08003c18 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8003c1c:	4b03      	ldr	r3, [pc, #12]	; (8003c2c <TIM21_IRQHandler+0x14>)
 8003c1e:	0018      	movs	r0, r3
 8003c20:	f005 fd32 	bl	8009688 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8003c24:	46c0      	nop			; (mov r8, r8)
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	46c0      	nop			; (mov r8, r8)
 8003c2c:	20000598 	.word	0x20000598

08003c30 <TIM22_IRQHandler>:

/**
  * @brief This function handles TIM22 global interrupt.
  */
void TIM22_IRQHandler(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM22_IRQn 0 */

  /* USER CODE END TIM22_IRQn 0 */
  HAL_TIM_IRQHandler(&htim22);
 8003c34:	4b03      	ldr	r3, [pc, #12]	; (8003c44 <TIM22_IRQHandler+0x14>)
 8003c36:	0018      	movs	r0, r3
 8003c38:	f005 fd26 	bl	8009688 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM22_IRQn 1 */

  /* USER CODE END TIM22_IRQn 1 */
}
 8003c3c:	46c0      	nop			; (mov r8, r8)
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	46c0      	nop			; (mov r8, r8)
 8003c44:	2000022c 	.word	0x2000022c

08003c48 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8003c4c:	4b03      	ldr	r3, [pc, #12]	; (8003c5c <SPI2_IRQHandler+0x14>)
 8003c4e:	0018      	movs	r0, r3
 8003c50:	f005 f8aa 	bl	8008da8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003c54:	46c0      	nop			; (mov r8, r8)
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	46c0      	nop			; (mov r8, r8)
 8003c5c:	20000198 	.word	0x20000198

08003c60 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003c68:	4b11      	ldr	r3, [pc, #68]	; (8003cb0 <_sbrk+0x50>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d102      	bne.n	8003c76 <_sbrk+0x16>
		heap_end = &end;
 8003c70:	4b0f      	ldr	r3, [pc, #60]	; (8003cb0 <_sbrk+0x50>)
 8003c72:	4a10      	ldr	r2, [pc, #64]	; (8003cb4 <_sbrk+0x54>)
 8003c74:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003c76:	4b0e      	ldr	r3, [pc, #56]	; (8003cb0 <_sbrk+0x50>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003c7c:	4b0c      	ldr	r3, [pc, #48]	; (8003cb0 <_sbrk+0x50>)
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	18d3      	adds	r3, r2, r3
 8003c84:	466a      	mov	r2, sp
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d907      	bls.n	8003c9a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003c8a:	f006 fab5 	bl	800a1f8 <__errno>
 8003c8e:	0003      	movs	r3, r0
 8003c90:	220c      	movs	r2, #12
 8003c92:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003c94:	2301      	movs	r3, #1
 8003c96:	425b      	negs	r3, r3
 8003c98:	e006      	b.n	8003ca8 <_sbrk+0x48>
	}

	heap_end += incr;
 8003c9a:	4b05      	ldr	r3, [pc, #20]	; (8003cb0 <_sbrk+0x50>)
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	18d2      	adds	r2, r2, r3
 8003ca2:	4b03      	ldr	r3, [pc, #12]	; (8003cb0 <_sbrk+0x50>)
 8003ca4:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
}
 8003ca8:	0018      	movs	r0, r3
 8003caa:	46bd      	mov	sp, r7
 8003cac:	b004      	add	sp, #16
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	200000f4 	.word	0x200000f4
 8003cb4:	200005e0 	.word	0x200005e0

08003cb8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8003cbc:	4b17      	ldr	r3, [pc, #92]	; (8003d1c <SystemInit+0x64>)
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	4b16      	ldr	r3, [pc, #88]	; (8003d1c <SystemInit+0x64>)
 8003cc2:	2180      	movs	r1, #128	; 0x80
 8003cc4:	0049      	lsls	r1, r1, #1
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8003cca:	4b14      	ldr	r3, [pc, #80]	; (8003d1c <SystemInit+0x64>)
 8003ccc:	68da      	ldr	r2, [r3, #12]
 8003cce:	4b13      	ldr	r3, [pc, #76]	; (8003d1c <SystemInit+0x64>)
 8003cd0:	4913      	ldr	r1, [pc, #76]	; (8003d20 <SystemInit+0x68>)
 8003cd2:	400a      	ands	r2, r1
 8003cd4:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8003cd6:	4b11      	ldr	r3, [pc, #68]	; (8003d1c <SystemInit+0x64>)
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	4b10      	ldr	r3, [pc, #64]	; (8003d1c <SystemInit+0x64>)
 8003cdc:	4911      	ldr	r1, [pc, #68]	; (8003d24 <SystemInit+0x6c>)
 8003cde:	400a      	ands	r2, r1
 8003ce0:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003ce2:	4b0e      	ldr	r3, [pc, #56]	; (8003d1c <SystemInit+0x64>)
 8003ce4:	689a      	ldr	r2, [r3, #8]
 8003ce6:	4b0d      	ldr	r3, [pc, #52]	; (8003d1c <SystemInit+0x64>)
 8003ce8:	2101      	movs	r1, #1
 8003cea:	438a      	bics	r2, r1
 8003cec:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8003cee:	4b0b      	ldr	r3, [pc, #44]	; (8003d1c <SystemInit+0x64>)
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	4b0a      	ldr	r3, [pc, #40]	; (8003d1c <SystemInit+0x64>)
 8003cf4:	490c      	ldr	r1, [pc, #48]	; (8003d28 <SystemInit+0x70>)
 8003cf6:	400a      	ands	r2, r1
 8003cf8:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8003cfa:	4b08      	ldr	r3, [pc, #32]	; (8003d1c <SystemInit+0x64>)
 8003cfc:	68da      	ldr	r2, [r3, #12]
 8003cfe:	4b07      	ldr	r3, [pc, #28]	; (8003d1c <SystemInit+0x64>)
 8003d00:	490a      	ldr	r1, [pc, #40]	; (8003d2c <SystemInit+0x74>)
 8003d02:	400a      	ands	r2, r1
 8003d04:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003d06:	4b05      	ldr	r3, [pc, #20]	; (8003d1c <SystemInit+0x64>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003d0c:	4b08      	ldr	r3, [pc, #32]	; (8003d30 <SystemInit+0x78>)
 8003d0e:	2280      	movs	r2, #128	; 0x80
 8003d10:	0512      	lsls	r2, r2, #20
 8003d12:	609a      	str	r2, [r3, #8]
#endif
}
 8003d14:	46c0      	nop			; (mov r8, r8)
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	46c0      	nop			; (mov r8, r8)
 8003d1c:	40021000 	.word	0x40021000
 8003d20:	88ff400c 	.word	0x88ff400c
 8003d24:	fef6fff6 	.word	0xfef6fff6
 8003d28:	fffbffff 	.word	0xfffbffff
 8003d2c:	ff02ffff 	.word	0xff02ffff
 8003d30:	e000ed00 	.word	0xe000ed00

08003d34 <HAL_TIM_PeriodElapsedCallback>:
static uint32_t stopwatchStartMarker = 0;
static uint32_t stopwatchPauseMarker = 0;
static uint8_t motorStateCounter = 0;

// called for a bunch of timers when timer has to circle back (arr->0, 0->arr)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
	// button's timer
	if (htim->Instance == TIM6) {
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a16      	ldr	r2, [pc, #88]	; (8003d9c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d11e      	bne.n	8003d84 <HAL_TIM_PeriodElapsedCallback+0x50>
		// stop timer, renable button interrupts, and clear pending
		HAL_TIM_Base_Stop_IT(htim);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	0018      	movs	r0, r3
 8003d4a:	f005 fb1d 	bl	8009388 <HAL_TIM_Base_Stop_IT>
		HAL_NVIC_ClearPendingIRQ(EXTI2_3_IRQn);
 8003d4e:	2006      	movs	r0, #6
 8003d50:	f002 fd2c 	bl	80067ac <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(EXTI4_15_IRQn);
 8003d54:	2007      	movs	r0, #7
 8003d56:	f002 fd29 	bl	80067ac <HAL_NVIC_ClearPendingIRQ>
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON1);
 8003d5a:	4b11      	ldr	r3, [pc, #68]	; (8003da0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON2);
 8003d60:	4b0f      	ldr	r3, [pc, #60]	; (8003da0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003d62:	2204      	movs	r2, #4
 8003d64:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON3);
 8003d66:	4b0e      	ldr	r3, [pc, #56]	; (8003da0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003d68:	2280      	movs	r2, #128	; 0x80
 8003d6a:	00d2      	lsls	r2, r2, #3
 8003d6c:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON4);
 8003d6e:	4b0c      	ldr	r3, [pc, #48]	; (8003da0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8003d70:	2280      	movs	r2, #128	; 0x80
 8003d72:	0112      	lsls	r2, r2, #4
 8003d74:	615a      	str	r2, [r3, #20]

		HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8003d76:	2006      	movs	r0, #6
 8003d78:	f002 fceb 	bl	8006752 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003d7c:	2007      	movs	r0, #7
 8003d7e:	f002 fce8 	bl	8006752 <HAL_NVIC_EnableIRQ>
	// sampler's timer
	else if (htim->Instance == TIM22) {
		// set flag to start ADC sample
		canSampleBattery = 1;
	}
}
 8003d82:	e007      	b.n	8003d94 <HAL_TIM_PeriodElapsedCallback+0x60>
	else if (htim->Instance == TIM22) {
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a06      	ldr	r2, [pc, #24]	; (8003da4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d102      	bne.n	8003d94 <HAL_TIM_PeriodElapsedCallback+0x60>
		canSampleBattery = 1;
 8003d8e:	4b06      	ldr	r3, [pc, #24]	; (8003da8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8003d90:	2201      	movs	r2, #1
 8003d92:	701a      	strb	r2, [r3, #0]
}
 8003d94:	46c0      	nop			; (mov r8, r8)
 8003d96:	46bd      	mov	sp, r7
 8003d98:	b002      	add	sp, #8
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	40001000 	.word	0x40001000
 8003da0:	40010400 	.word	0x40010400
 8003da4:	40011400 	.word	0x40011400
 8003da8:	2000013d 	.word	0x2000013d

08003dac <HAL_TIM_OC_DelayElapsedCallback>:

// called for a bunch of timers when channel value = counter value
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM21) {
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a44      	ldr	r2, [pc, #272]	; (8003ecc <HAL_TIM_OC_DelayElapsedCallback+0x120>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d139      	bne.n	8003e32 <HAL_TIM_OC_DelayElapsedCallback+0x86>
		// timer's channel
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	7e1b      	ldrb	r3, [r3, #24]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d122      	bne.n	8003e0c <HAL_TIM_OC_DelayElapsedCallback+0x60>
			updateFace.timer = 1;		// set update screen flag
 8003dc6:	4b42      	ldr	r3, [pc, #264]	; (8003ed0 <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 8003dc8:	2201      	movs	r2, #1
 8003dca:	705a      	strb	r2, [r3, #1]

			// decrement value if non-zero, else set done flag
			if (timerCounter != 1) --timerCounter;
 8003dcc:	4b41      	ldr	r3, [pc, #260]	; (8003ed4 <HAL_TIM_OC_DelayElapsedCallback+0x128>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d005      	beq.n	8003de0 <HAL_TIM_OC_DelayElapsedCallback+0x34>
 8003dd4:	4b3f      	ldr	r3, [pc, #252]	; (8003ed4 <HAL_TIM_OC_DelayElapsedCallback+0x128>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	1e5a      	subs	r2, r3, #1
 8003dda:	4b3e      	ldr	r3, [pc, #248]	; (8003ed4 <HAL_TIM_OC_DelayElapsedCallback+0x128>)
 8003ddc:	601a      	str	r2, [r3, #0]
				stopMotor(htim);
				break;
			default: break;
		}
	}
}
 8003dde:	e070      	b.n	8003ec2 <HAL_TIM_OC_DelayElapsedCallback+0x116>
				--timerCounter;
 8003de0:	4b3c      	ldr	r3, [pc, #240]	; (8003ed4 <HAL_TIM_OC_DelayElapsedCallback+0x128>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	1e5a      	subs	r2, r3, #1
 8003de6:	4b3b      	ldr	r3, [pc, #236]	; (8003ed4 <HAL_TIM_OC_DelayElapsedCallback+0x128>)
 8003de8:	601a      	str	r2, [r3, #0]
				isTimerDone = 1;
 8003dea:	4b3b      	ldr	r3, [pc, #236]	; (8003ed8 <HAL_TIM_OC_DelayElapsedCallback+0x12c>)
 8003dec:	2201      	movs	r2, #1
 8003dee:	701a      	strb	r2, [r3, #0]
				stopTimer(htim);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	0018      	movs	r0, r3
 8003df4:	f000 f8e8 	bl	8003fc8 <stopTimer>
				updateFace.timer = 1;
 8003df8:	4b35      	ldr	r3, [pc, #212]	; (8003ed0 <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_TogglePin(LED2_PORT, LED2_PIN);
 8003dfe:	23a0      	movs	r3, #160	; 0xa0
 8003e00:	05db      	lsls	r3, r3, #23
 8003e02:	2140      	movs	r1, #64	; 0x40
 8003e04:	0018      	movs	r0, r3
 8003e06:	f002 fee1 	bl	8006bcc <HAL_GPIO_TogglePin>
}
 8003e0a:	e05a      	b.n	8003ec2 <HAL_TIM_OC_DelayElapsedCallback+0x116>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	7e1b      	ldrb	r3, [r3, #24]
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d156      	bne.n	8003ec2 <HAL_TIM_OC_DelayElapsedCallback+0x116>
			updateFace.stopwatch = 1;
 8003e14:	4b2e      	ldr	r3, [pc, #184]	; (8003ed0 <HAL_TIM_OC_DelayElapsedCallback+0x124>)
 8003e16:	2201      	movs	r2, #1
 8003e18:	70da      	strb	r2, [r3, #3]
			++stopwatchCounter;
 8003e1a:	4b30      	ldr	r3, [pc, #192]	; (8003edc <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	1c5a      	adds	r2, r3, #1
 8003e20:	4b2e      	ldr	r3, [pc, #184]	; (8003edc <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 8003e22:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(LED2_PORT, LED2_PIN);
 8003e24:	23a0      	movs	r3, #160	; 0xa0
 8003e26:	05db      	lsls	r3, r3, #23
 8003e28:	2140      	movs	r1, #64	; 0x40
 8003e2a:	0018      	movs	r0, r3
 8003e2c:	f002 fece 	bl	8006bcc <HAL_GPIO_TogglePin>
}
 8003e30:	e047      	b.n	8003ec2 <HAL_TIM_OC_DelayElapsedCallback+0x116>
	else if (htim->Instance == TIM2) {
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	2380      	movs	r3, #128	; 0x80
 8003e38:	05db      	lsls	r3, r3, #23
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d13e      	bne.n	8003ebc <HAL_TIM_OC_DelayElapsedCallback+0x110>
		++motorStateCounter;
 8003e3e:	4b28      	ldr	r3, [pc, #160]	; (8003ee0 <HAL_TIM_OC_DelayElapsedCallback+0x134>)
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	3301      	adds	r3, #1
 8003e44:	b2da      	uxtb	r2, r3
 8003e46:	4b26      	ldr	r3, [pc, #152]	; (8003ee0 <HAL_TIM_OC_DelayElapsedCallback+0x134>)
 8003e48:	701a      	strb	r2, [r3, #0]
		switch(motorStateCounter) {
 8003e4a:	4b25      	ldr	r3, [pc, #148]	; (8003ee0 <HAL_TIM_OC_DelayElapsedCallback+0x134>)
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	2b06      	cmp	r3, #6
 8003e50:	d836      	bhi.n	8003ec0 <HAL_TIM_OC_DelayElapsedCallback+0x114>
 8003e52:	009a      	lsls	r2, r3, #2
 8003e54:	4b23      	ldr	r3, [pc, #140]	; (8003ee4 <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 8003e56:	18d3      	adds	r3, r2, r3
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	469f      	mov	pc, r3
			case 1: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET); break;
 8003e5c:	23a0      	movs	r3, #160	; 0xa0
 8003e5e:	05db      	lsls	r3, r3, #23
 8003e60:	2201      	movs	r2, #1
 8003e62:	2110      	movs	r1, #16
 8003e64:	0018      	movs	r0, r3
 8003e66:	f002 fe94 	bl	8006b92 <HAL_GPIO_WritePin>
 8003e6a:	e02a      	b.n	8003ec2 <HAL_TIM_OC_DelayElapsedCallback+0x116>
			case 2: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_RESET); break;
 8003e6c:	23a0      	movs	r3, #160	; 0xa0
 8003e6e:	05db      	lsls	r3, r3, #23
 8003e70:	2200      	movs	r2, #0
 8003e72:	2110      	movs	r1, #16
 8003e74:	0018      	movs	r0, r3
 8003e76:	f002 fe8c 	bl	8006b92 <HAL_GPIO_WritePin>
 8003e7a:	e022      	b.n	8003ec2 <HAL_TIM_OC_DelayElapsedCallback+0x116>
			case 3: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET); break;
 8003e7c:	23a0      	movs	r3, #160	; 0xa0
 8003e7e:	05db      	lsls	r3, r3, #23
 8003e80:	2201      	movs	r2, #1
 8003e82:	2110      	movs	r1, #16
 8003e84:	0018      	movs	r0, r3
 8003e86:	f002 fe84 	bl	8006b92 <HAL_GPIO_WritePin>
 8003e8a:	e01a      	b.n	8003ec2 <HAL_TIM_OC_DelayElapsedCallback+0x116>
			case 4: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_RESET); break;
 8003e8c:	23a0      	movs	r3, #160	; 0xa0
 8003e8e:	05db      	lsls	r3, r3, #23
 8003e90:	2200      	movs	r2, #0
 8003e92:	2110      	movs	r1, #16
 8003e94:	0018      	movs	r0, r3
 8003e96:	f002 fe7c 	bl	8006b92 <HAL_GPIO_WritePin>
 8003e9a:	e012      	b.n	8003ec2 <HAL_TIM_OC_DelayElapsedCallback+0x116>
			case 5: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET); break;
 8003e9c:	23a0      	movs	r3, #160	; 0xa0
 8003e9e:	05db      	lsls	r3, r3, #23
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	2110      	movs	r1, #16
 8003ea4:	0018      	movs	r0, r3
 8003ea6:	f002 fe74 	bl	8006b92 <HAL_GPIO_WritePin>
 8003eaa:	e00a      	b.n	8003ec2 <HAL_TIM_OC_DelayElapsedCallback+0x116>
				HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_RESET); break;
 8003eac:	23a0      	movs	r3, #160	; 0xa0
 8003eae:	05db      	lsls	r3, r3, #23
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	2110      	movs	r1, #16
 8003eb4:	0018      	movs	r0, r3
 8003eb6:	f002 fe6c 	bl	8006b92 <HAL_GPIO_WritePin>
 8003eba:	e002      	b.n	8003ec2 <HAL_TIM_OC_DelayElapsedCallback+0x116>
	}
 8003ebc:	46c0      	nop			; (mov r8, r8)
 8003ebe:	e000      	b.n	8003ec2 <HAL_TIM_OC_DelayElapsedCallback+0x116>
			default: break;
 8003ec0:	46c0      	nop			; (mov r8, r8)
}
 8003ec2:	46c0      	nop			; (mov r8, r8)
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	b002      	add	sp, #8
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	46c0      	nop			; (mov r8, r8)
 8003ecc:	40010800 	.word	0x40010800
 8003ed0:	20000140 	.word	0x20000140
 8003ed4:	20000148 	.word	0x20000148
 8003ed8:	2000014c 	.word	0x2000014c
 8003edc:	20000194 	.word	0x20000194
 8003ee0:	20000108 	.word	0x20000108
 8003ee4:	0800b2f4 	.word	0x0800b2f4

08003ee8 <runTimer>:

// ---- important timer functions  ----
void runTimer(TIM_HandleTypeDef *htim) {
 8003ee8:	b590      	push	{r4, r7, lr}
 8003eea:	b089      	sub	sp, #36	; 0x24
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef sConfig = {0};
 8003ef0:	2408      	movs	r4, #8
 8003ef2:	193b      	adds	r3, r7, r4
 8003ef4:	0018      	movs	r0, r3
 8003ef6:	2310      	movs	r3, #16
 8003ef8:	001a      	movs	r2, r3
 8003efa:	2100      	movs	r1, #0
 8003efc:	f006 f9af 	bl	800a25e <memset>
	sConfig.OCMode = TIM_OCMODE_TIMING;
 8003f00:	193b      	adds	r3, r7, r4
 8003f02:	2200      	movs	r2, #0
 8003f04:	601a      	str	r2, [r3, #0]
	sConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f06:	193b      	adds	r3, r7, r4
 8003f08:	2200      	movs	r2, #0
 8003f0a:	609a      	str	r2, [r3, #8]
	sConfig.OCFastMode = TIM_OCFAST_DISABLE;
 8003f0c:	193b      	adds	r3, r7, r4
 8003f0e:	2200      	movs	r2, #0
 8003f10:	60da      	str	r2, [r3, #12]

	// calculating pulse/OC trigger
	if (isTimerPaused == 0) {		// 1st run, hasn't been paused yet
 8003f12:	4b1e      	ldr	r3, [pc, #120]	; (8003f8c <runTimer+0xa4>)
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d106      	bne.n	8003f2a <runTimer+0x42>
		sConfig.Pulse = htim->Instance->CNT;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f22:	2308      	movs	r3, #8
 8003f24:	18fb      	adds	r3, r7, r3
 8003f26:	605a      	str	r2, [r3, #4]
 8003f28:	e020      	b.n	8003f6c <runTimer+0x84>
	}
	else {		// unpausing
		uint32_t temp = htim->Instance->CNT;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f30:	61fb      	str	r3, [r7, #28]

		// count needed to get from pause marker to start marker - basically how many steps it would've taken to get to next cycle
		// shifted to account for negative behavior
		uint32_t diff = ((int)(timerStartMarker-timerPauseMarker)+0x8000) % 0x8000;
 8003f32:	4b17      	ldr	r3, [pc, #92]	; (8003f90 <runTimer+0xa8>)
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	4b17      	ldr	r3, [pc, #92]	; (8003f94 <runTimer+0xac>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	2280      	movs	r2, #128	; 0x80
 8003f3e:	0212      	lsls	r2, r2, #8
 8003f40:	4694      	mov	ip, r2
 8003f42:	4463      	add	r3, ip
 8003f44:	4a14      	ldr	r2, [pc, #80]	; (8003f98 <runTimer+0xb0>)
 8003f46:	4013      	ands	r3, r2
 8003f48:	d503      	bpl.n	8003f52 <runTimer+0x6a>
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	4a13      	ldr	r2, [pc, #76]	; (8003f9c <runTimer+0xb4>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	3301      	adds	r3, #1
 8003f52:	61bb      	str	r3, [r7, #24]
		sConfig.Pulse = (temp+diff) % 0x8000;
 8003f54:	69fa      	ldr	r2, [r7, #28]
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	18d3      	adds	r3, r2, r3
 8003f5a:	045b      	lsls	r3, r3, #17
 8003f5c:	0c5a      	lsrs	r2, r3, #17
 8003f5e:	2108      	movs	r1, #8
 8003f60:	187b      	adds	r3, r7, r1
 8003f62:	605a      	str	r2, [r3, #4]
		timerStartMarker = sConfig.Pulse;		// set new start marker
 8003f64:	187b      	adds	r3, r7, r1
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	4b09      	ldr	r3, [pc, #36]	; (8003f90 <runTimer+0xa8>)
 8003f6a:	601a      	str	r2, [r3, #0]
	}

	HAL_TIM_OC_ConfigChannel(htim, &sConfig, TIM_CHANNEL_1);
 8003f6c:	2308      	movs	r3, #8
 8003f6e:	18f9      	adds	r1, r7, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	0018      	movs	r0, r3
 8003f76:	f005 fc6f 	bl	8009858 <HAL_TIM_OC_ConfigChannel>
	HAL_TIM_OC_Start_IT(htim, TIM_CHANNEL_1);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	0018      	movs	r0, r3
 8003f80:	f005 fa58 	bl	8009434 <HAL_TIM_OC_Start_IT>
}
 8003f84:	46c0      	nop			; (mov r8, r8)
 8003f86:	46bd      	mov	sp, r7
 8003f88:	b009      	add	sp, #36	; 0x24
 8003f8a:	bd90      	pop	{r4, r7, pc}
 8003f8c:	20000192 	.word	0x20000192
 8003f90:	200000f8 	.word	0x200000f8
 8003f94:	200000fc 	.word	0x200000fc
 8003f98:	80007fff 	.word	0x80007fff
 8003f9c:	ffff8000 	.word	0xffff8000

08003fa0 <pauseTimer>:

void pauseTimer(TIM_HandleTypeDef *htim) {
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
	// stop timer, but hold marker so you can track milliseconds to next second
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_1);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2100      	movs	r1, #0
 8003fac:	0018      	movs	r0, r3
 8003fae:	f005 fa93 	bl	80094d8 <HAL_TIM_OC_Stop_IT>
	timerPauseMarker = htim->Instance->CNT;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fb8:	4b02      	ldr	r3, [pc, #8]	; (8003fc4 <pauseTimer+0x24>)
 8003fba:	601a      	str	r2, [r3, #0]
}
 8003fbc:	46c0      	nop			; (mov r8, r8)
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	b002      	add	sp, #8
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	200000fc 	.word	0x200000fc

08003fc8 <stopTimer>:

void stopTimer(TIM_HandleTypeDef *htim) {
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
	// clear everything
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_1);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	f005 fa7f 	bl	80094d8 <HAL_TIM_OC_Stop_IT>
	timerStartMarker = 0;
 8003fda:	4b05      	ldr	r3, [pc, #20]	; (8003ff0 <stopTimer+0x28>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	601a      	str	r2, [r3, #0]
	timerPauseMarker = 0;
 8003fe0:	4b04      	ldr	r3, [pc, #16]	; (8003ff4 <stopTimer+0x2c>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	601a      	str	r2, [r3, #0]
}
 8003fe6:	46c0      	nop			; (mov r8, r8)
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	b002      	add	sp, #8
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	46c0      	nop			; (mov r8, r8)
 8003ff0:	200000f8 	.word	0x200000f8
 8003ff4:	200000fc 	.word	0x200000fc

08003ff8 <runStopwatch>:

void runStopwatch(TIM_HandleTypeDef *htim) {
 8003ff8:	b590      	push	{r4, r7, lr}
 8003ffa:	b089      	sub	sp, #36	; 0x24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef sConfig = {0};
 8004000:	2408      	movs	r4, #8
 8004002:	193b      	adds	r3, r7, r4
 8004004:	0018      	movs	r0, r3
 8004006:	2310      	movs	r3, #16
 8004008:	001a      	movs	r2, r3
 800400a:	2100      	movs	r1, #0
 800400c:	f006 f927 	bl	800a25e <memset>
	sConfig.OCMode = TIM_OCMODE_TIMING;
 8004010:	193b      	adds	r3, r7, r4
 8004012:	2200      	movs	r2, #0
 8004014:	601a      	str	r2, [r3, #0]
	sConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004016:	193b      	adds	r3, r7, r4
 8004018:	2200      	movs	r2, #0
 800401a:	609a      	str	r2, [r3, #8]
	sConfig.OCFastMode = TIM_OCFAST_DISABLE;
 800401c:	193b      	adds	r3, r7, r4
 800401e:	2200      	movs	r2, #0
 8004020:	60da      	str	r2, [r3, #12]

	// calculating pulse/OC trigger
	if (isStopwatchPaused == 0) {		// 1st run, hasn't been paused yet
 8004022:	4b22      	ldr	r3, [pc, #136]	; (80040ac <runStopwatch+0xb4>)
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	b2db      	uxtb	r3, r3
 8004028:	2b00      	cmp	r3, #0
 800402a:	d10d      	bne.n	8004048 <runStopwatch+0x50>
		stopwatchCounter = 0;
 800402c:	4b20      	ldr	r3, [pc, #128]	; (80040b0 <runStopwatch+0xb8>)
 800402e:	2200      	movs	r2, #0
 8004030:	601a      	str	r2, [r3, #0]
		sConfig.Pulse = htim->Instance->CNT;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004038:	2108      	movs	r1, #8
 800403a:	187b      	adds	r3, r7, r1
 800403c:	605a      	str	r2, [r3, #4]
		stopwatchStartMarker = sConfig.Pulse;		// set new start marker
 800403e:	187b      	adds	r3, r7, r1
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	4b1c      	ldr	r3, [pc, #112]	; (80040b4 <runStopwatch+0xbc>)
 8004044:	601a      	str	r2, [r3, #0]
 8004046:	e020      	b.n	800408a <runStopwatch+0x92>
	}
	else {		// unpausing
		uint32_t temp = htim->Instance->CNT;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404e:	61fb      	str	r3, [r7, #28]

		// count needed to get from pause marker to start marker - basically how many steps it would've taken to get to next cycle
		// shifted to account for negative behavior
		uint32_t diff = ((int)(stopwatchStartMarker-stopwatchPauseMarker)+0x8000) % 0x8000;
 8004050:	4b18      	ldr	r3, [pc, #96]	; (80040b4 <runStopwatch+0xbc>)
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	4b18      	ldr	r3, [pc, #96]	; (80040b8 <runStopwatch+0xc0>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2280      	movs	r2, #128	; 0x80
 800405c:	0212      	lsls	r2, r2, #8
 800405e:	4694      	mov	ip, r2
 8004060:	4463      	add	r3, ip
 8004062:	4a16      	ldr	r2, [pc, #88]	; (80040bc <runStopwatch+0xc4>)
 8004064:	4013      	ands	r3, r2
 8004066:	d503      	bpl.n	8004070 <runStopwatch+0x78>
 8004068:	3b01      	subs	r3, #1
 800406a:	4a15      	ldr	r2, [pc, #84]	; (80040c0 <runStopwatch+0xc8>)
 800406c:	4313      	orrs	r3, r2
 800406e:	3301      	adds	r3, #1
 8004070:	61bb      	str	r3, [r7, #24]
		sConfig.Pulse = (temp+diff) % 0x8000;
 8004072:	69fa      	ldr	r2, [r7, #28]
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	18d3      	adds	r3, r2, r3
 8004078:	045b      	lsls	r3, r3, #17
 800407a:	0c5a      	lsrs	r2, r3, #17
 800407c:	2108      	movs	r1, #8
 800407e:	187b      	adds	r3, r7, r1
 8004080:	605a      	str	r2, [r3, #4]
		stopwatchStartMarker = sConfig.Pulse;		// set new start marker
 8004082:	187b      	adds	r3, r7, r1
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	4b0b      	ldr	r3, [pc, #44]	; (80040b4 <runStopwatch+0xbc>)
 8004088:	601a      	str	r2, [r3, #0]
	}

	HAL_TIM_OC_ConfigChannel(htim, &sConfig, TIM_CHANNEL_2);
 800408a:	2308      	movs	r3, #8
 800408c:	18f9      	adds	r1, r7, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2204      	movs	r2, #4
 8004092:	0018      	movs	r0, r3
 8004094:	f005 fbe0 	bl	8009858 <HAL_TIM_OC_ConfigChannel>
	HAL_TIM_OC_Start_IT(htim, TIM_CHANNEL_2);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2104      	movs	r1, #4
 800409c:	0018      	movs	r0, r3
 800409e:	f005 f9c9 	bl	8009434 <HAL_TIM_OC_Start_IT>
}
 80040a2:	46c0      	nop			; (mov r8, r8)
 80040a4:	46bd      	mov	sp, r7
 80040a6:	b009      	add	sp, #36	; 0x24
 80040a8:	bd90      	pop	{r4, r7, pc}
 80040aa:	46c0      	nop			; (mov r8, r8)
 80040ac:	20000191 	.word	0x20000191
 80040b0:	20000194 	.word	0x20000194
 80040b4:	20000100 	.word	0x20000100
 80040b8:	20000104 	.word	0x20000104
 80040bc:	80007fff 	.word	0x80007fff
 80040c0:	ffff8000 	.word	0xffff8000

080040c4 <pauseStopwatch>:

void pauseStopwatch(TIM_HandleTypeDef *htim) {
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
	// save marker to hold milliseconds
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_2);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2104      	movs	r1, #4
 80040d0:	0018      	movs	r0, r3
 80040d2:	f005 fa01 	bl	80094d8 <HAL_TIM_OC_Stop_IT>
	stopwatchPauseMarker = htim->Instance->CNT;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040dc:	4b02      	ldr	r3, [pc, #8]	; (80040e8 <pauseStopwatch+0x24>)
 80040de:	601a      	str	r2, [r3, #0]
}
 80040e0:	46c0      	nop			; (mov r8, r8)
 80040e2:	46bd      	mov	sp, r7
 80040e4:	b002      	add	sp, #8
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	20000104 	.word	0x20000104

080040ec <clearStopwatch>:

void clearStopwatch(TIM_HandleTypeDef *htim) {
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
	// clear everything
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_2);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2104      	movs	r1, #4
 80040f8:	0018      	movs	r0, r3
 80040fa:	f005 f9ed 	bl	80094d8 <HAL_TIM_OC_Stop_IT>
	stopwatchPauseMarker = htim->Instance->CNT;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004104:	4b06      	ldr	r3, [pc, #24]	; (8004120 <clearStopwatch+0x34>)
 8004106:	601a      	str	r2, [r3, #0]
	stopwatchStartMarker = htim->Instance->CNT;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800410e:	4b05      	ldr	r3, [pc, #20]	; (8004124 <clearStopwatch+0x38>)
 8004110:	601a      	str	r2, [r3, #0]

	stopwatchCounter = 0;
 8004112:	4b05      	ldr	r3, [pc, #20]	; (8004128 <clearStopwatch+0x3c>)
 8004114:	2200      	movs	r2, #0
 8004116:	601a      	str	r2, [r3, #0]
}
 8004118:	46c0      	nop			; (mov r8, r8)
 800411a:	46bd      	mov	sp, r7
 800411c:	b002      	add	sp, #8
 800411e:	bd80      	pop	{r7, pc}
 8004120:	20000104 	.word	0x20000104
 8004124:	20000100 	.word	0x20000100
 8004128:	20000194 	.word	0x20000194

0800412c <runTimerStopwatchBase>:

void runTimerStopwatchBase(TIM_HandleTypeDef *htim) {HAL_TIM_Base_Start(htim);}
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	0018      	movs	r0, r3
 8004138:	f005 f8e2 	bl	8009300 <HAL_TIM_Base_Start>
 800413c:	46c0      	nop			; (mov r8, r8)
 800413e:	46bd      	mov	sp, r7
 8004140:	b002      	add	sp, #8
 8004142:	bd80      	pop	{r7, pc}

08004144 <runADCSampler>:
void stopTimerStopwatchBase(TIM_HandleTypeDef *htim) {HAL_TIM_Base_Stop(htim);}
// ---- end of important timer functions ----

// ---- motor and other things that use timer ----
// uses LSE timer TIM22
void runADCSampler(TIM_HandleTypeDef *htim) {
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(htim);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	0018      	movs	r0, r3
 8004150:	f005 f8f8 	bl	8009344 <HAL_TIM_Base_Start_IT>
	canSampleBattery = 1;			// set flag to let ADC run at the start
 8004154:	4b03      	ldr	r3, [pc, #12]	; (8004164 <runADCSampler+0x20>)
 8004156:	2201      	movs	r2, #1
 8004158:	701a      	strb	r2, [r3, #0]
}
 800415a:	46c0      	nop			; (mov r8, r8)
 800415c:	46bd      	mov	sp, r7
 800415e:	b002      	add	sp, #8
 8004160:	bd80      	pop	{r7, pc}
 8004162:	46c0      	nop			; (mov r8, r8)
 8004164:	2000013d 	.word	0x2000013d

08004168 <runMotor>:

// running motor for vibration. runs for a finite amount of time
// uses LSE timer TIM2 CH2
void runMotor(TIM_HandleTypeDef *htim) {
 8004168:	b590      	push	{r4, r7, lr}
 800416a:	b087      	sub	sp, #28
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef sConfig = {0};
 8004170:	2408      	movs	r4, #8
 8004172:	193b      	adds	r3, r7, r4
 8004174:	0018      	movs	r0, r3
 8004176:	2310      	movs	r3, #16
 8004178:	001a      	movs	r2, r3
 800417a:	2100      	movs	r1, #0
 800417c:	f006 f86f 	bl	800a25e <memset>
	sConfig.OCMode = TIM_OCMODE_TIMING;
 8004180:	0021      	movs	r1, r4
 8004182:	187b      	adds	r3, r7, r1
 8004184:	2200      	movs	r2, #0
 8004186:	601a      	str	r2, [r3, #0]
	sConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004188:	187b      	adds	r3, r7, r1
 800418a:	2200      	movs	r2, #0
 800418c:	609a      	str	r2, [r3, #8]
	sConfig.OCFastMode = TIM_OCFAST_DISABLE;
 800418e:	187b      	adds	r3, r7, r1
 8004190:	2200      	movs	r2, #0
 8004192:	60da      	str	r2, [r3, #12]
	sConfig.Pulse = htim->Instance->CNT;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800419a:	000c      	movs	r4, r1
 800419c:	187b      	adds	r3, r7, r1
 800419e:	605a      	str	r2, [r3, #4]

	HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET);
 80041a0:	23a0      	movs	r3, #160	; 0xa0
 80041a2:	05db      	lsls	r3, r3, #23
 80041a4:	2201      	movs	r2, #1
 80041a6:	2110      	movs	r1, #16
 80041a8:	0018      	movs	r0, r3
 80041aa:	f002 fcf2 	bl	8006b92 <HAL_GPIO_WritePin>
	HAL_TIM_OC_ConfigChannel(htim, &sConfig, TIM_CHANNEL_2);
 80041ae:	0021      	movs	r1, r4
 80041b0:	1879      	adds	r1, r7, r1
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2204      	movs	r2, #4
 80041b6:	0018      	movs	r0, r3
 80041b8:	f005 fb4e 	bl	8009858 <HAL_TIM_OC_ConfigChannel>
	HAL_TIM_OC_Start_IT(htim, TIM_CHANNEL_2);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2104      	movs	r1, #4
 80041c0:	0018      	movs	r0, r3
 80041c2:	f005 f937 	bl	8009434 <HAL_TIM_OC_Start_IT>

	motorStateCounter = 0;
 80041c6:	4b03      	ldr	r3, [pc, #12]	; (80041d4 <runMotor+0x6c>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	701a      	strb	r2, [r3, #0]
}
 80041cc:	46c0      	nop			; (mov r8, r8)
 80041ce:	46bd      	mov	sp, r7
 80041d0:	b007      	add	sp, #28
 80041d2:	bd90      	pop	{r4, r7, pc}
 80041d4:	20000108 	.word	0x20000108

080041d8 <runMotorBase>:
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_2);
	motorStateCounter = 0;
}

// should use TIM2
void runMotorBase(TIM_HandleTypeDef *htim) {HAL_TIM_Base_Start(htim);}
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	0018      	movs	r0, r3
 80041e4:	f005 f88c 	bl	8009300 <HAL_TIM_Base_Start>
 80041e8:	46c0      	nop			; (mov r8, r8)
 80041ea:	46bd      	mov	sp, r7
 80041ec:	b002      	add	sp, #8
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <setDisplayBacklight>:
void stopMotorBase(TIM_HandleTypeDef *htim) {HAL_TIM_Base_Stop(htim);}

// should change display brightness by changing PWM pulse width. input should be from 0-100
// uses 32MHz timer TIM3 CH1
void setDisplayBacklight(uint8_t intensity, TIM_HandleTypeDef *htim) {
 80041f0:	b5b0      	push	{r4, r5, r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	0002      	movs	r2, r0
 80041f8:	6039      	str	r1, [r7, #0]
 80041fa:	1dfb      	adds	r3, r7, #7
 80041fc:	701a      	strb	r2, [r3, #0]
	if (intensity > 100) return;		// bounds checking
 80041fe:	1dfb      	adds	r3, r7, #7
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	2b64      	cmp	r3, #100	; 0x64
 8004204:	d83a      	bhi.n	800427c <setDisplayBacklight+0x8c>

	TIM_OC_InitTypeDef sConfig = {0};
 8004206:	2508      	movs	r5, #8
 8004208:	197b      	adds	r3, r7, r5
 800420a:	0018      	movs	r0, r3
 800420c:	2310      	movs	r3, #16
 800420e:	001a      	movs	r2, r3
 8004210:	2100      	movs	r1, #0
 8004212:	f006 f824 	bl	800a25e <memset>
	sConfig.OCMode = TIM_OCMODE_PWM1;
 8004216:	197b      	adds	r3, r7, r5
 8004218:	2260      	movs	r2, #96	; 0x60
 800421a:	601a      	str	r2, [r3, #0]
	sConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 800421c:	197b      	adds	r3, r7, r5
 800421e:	2200      	movs	r2, #0
 8004220:	609a      	str	r2, [r3, #8]
	sConfig.OCFastMode = TIM_OCFAST_DISABLE;
 8004222:	197b      	adds	r3, r7, r5
 8004224:	2200      	movs	r2, #0
 8004226:	60da      	str	r2, [r3, #12]
	sConfig.Pulse = (htim->Instance->ARR-1)*((float)intensity/100);
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422e:	3b01      	subs	r3, #1
 8004230:	0018      	movs	r0, r3
 8004232:	f7fc fe27 	bl	8000e84 <__aeabi_ui2f>
 8004236:	1c04      	adds	r4, r0, #0
 8004238:	1dfb      	adds	r3, r7, #7
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	0018      	movs	r0, r3
 800423e:	f7fc fe21 	bl	8000e84 <__aeabi_ui2f>
 8004242:	1c03      	adds	r3, r0, #0
 8004244:	490f      	ldr	r1, [pc, #60]	; (8004284 <setDisplayBacklight+0x94>)
 8004246:	1c18      	adds	r0, r3, #0
 8004248:	f7fc f92e 	bl	80004a8 <__aeabi_fdiv>
 800424c:	1c03      	adds	r3, r0, #0
 800424e:	1c19      	adds	r1, r3, #0
 8004250:	1c20      	adds	r0, r4, #0
 8004252:	f7fc fb01 	bl	8000858 <__aeabi_fmul>
 8004256:	1c03      	adds	r3, r0, #0
 8004258:	1c18      	adds	r0, r3, #0
 800425a:	f7fc f90d 	bl	8000478 <__aeabi_f2uiz>
 800425e:	0002      	movs	r2, r0
 8004260:	197b      	adds	r3, r7, r5
 8004262:	605a      	str	r2, [r3, #4]

	HAL_TIM_PWM_ConfigChannel(htim, &sConfig, TIM_CHANNEL_1);
 8004264:	1979      	adds	r1, r7, r5
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	2200      	movs	r2, #0
 800426a:	0018      	movs	r0, r3
 800426c:	f005 fb42 	bl	80098f4 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start_IT(htim, TIM_CHANNEL_1);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	2100      	movs	r1, #0
 8004274:	0018      	movs	r0, r3
 8004276:	f005 f9b5 	bl	80095e4 <HAL_TIM_PWM_Start_IT>
 800427a:	e000      	b.n	800427e <setDisplayBacklight+0x8e>
	if (intensity > 100) return;		// bounds checking
 800427c:	46c0      	nop			; (mov r8, r8)
}
 800427e:	46bd      	mov	sp, r7
 8004280:	b006      	add	sp, #24
 8004282:	bdb0      	pop	{r4, r5, r7, pc}
 8004284:	42c80000 	.word	0x42c80000

08004288 <HAL_GPIO_EXTI_Callback>:
	"Nov",
	"Dec"
};

// callback for button interrupts.
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	0002      	movs	r2, r0
 8004290:	1dbb      	adds	r3, r7, #6
 8004292:	801a      	strh	r2, [r3, #0]
	// toggles LED whenever a button is pressed
	HAL_GPIO_TogglePin(LED3_PORT, LED3_PIN);
 8004294:	23a0      	movs	r3, #160	; 0xa0
 8004296:	05db      	lsls	r3, r3, #23
 8004298:	2180      	movs	r1, #128	; 0x80
 800429a:	0018      	movs	r0, r3
 800429c:	f002 fc96 	bl	8006bcc <HAL_GPIO_TogglePin>

	// disables interrupts for software debouncing
	HAL_NVIC_DisableIRQ(EXTI2_3_IRQn);
 80042a0:	2006      	movs	r0, #6
 80042a2:	f002 fa66 	bl	8006772 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 80042a6:	2007      	movs	r0, #7
 80042a8:	f002 fa63 	bl	8006772 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI2_3_IRQn);
 80042ac:	2006      	movs	r0, #6
 80042ae:	f002 fa7d 	bl	80067ac <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI4_15_IRQn);
 80042b2:	2007      	movs	r0, #7
 80042b4:	f002 fa7a 	bl	80067ac <HAL_NVIC_ClearPendingIRQ>

	// updates flags
	if (GPIO_Pin == BUTTON1) buttons.is1Pressed = 1;
 80042b8:	1dbb      	adds	r3, r7, #6
 80042ba:	881b      	ldrh	r3, [r3, #0]
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d102      	bne.n	80042c6 <HAL_GPIO_EXTI_Callback+0x3e>
 80042c0:	4b11      	ldr	r3, [pc, #68]	; (8004308 <HAL_GPIO_EXTI_Callback+0x80>)
 80042c2:	2201      	movs	r2, #1
 80042c4:	701a      	strb	r2, [r3, #0]
	if (GPIO_Pin == BUTTON2) buttons.is2Pressed = 1;
 80042c6:	1dbb      	adds	r3, r7, #6
 80042c8:	881b      	ldrh	r3, [r3, #0]
 80042ca:	2b04      	cmp	r3, #4
 80042cc:	d102      	bne.n	80042d4 <HAL_GPIO_EXTI_Callback+0x4c>
 80042ce:	4b0e      	ldr	r3, [pc, #56]	; (8004308 <HAL_GPIO_EXTI_Callback+0x80>)
 80042d0:	2201      	movs	r2, #1
 80042d2:	705a      	strb	r2, [r3, #1]
	if (GPIO_Pin == BUTTON3) buttons.is3Pressed = 1;
 80042d4:	1dbb      	adds	r3, r7, #6
 80042d6:	881a      	ldrh	r2, [r3, #0]
 80042d8:	2380      	movs	r3, #128	; 0x80
 80042da:	00db      	lsls	r3, r3, #3
 80042dc:	429a      	cmp	r2, r3
 80042de:	d102      	bne.n	80042e6 <HAL_GPIO_EXTI_Callback+0x5e>
 80042e0:	4b09      	ldr	r3, [pc, #36]	; (8004308 <HAL_GPIO_EXTI_Callback+0x80>)
 80042e2:	2201      	movs	r2, #1
 80042e4:	709a      	strb	r2, [r3, #2]
	if (GPIO_Pin == BUTTON4) buttons.is4Pressed = 1;
 80042e6:	1dbb      	adds	r3, r7, #6
 80042e8:	881a      	ldrh	r2, [r3, #0]
 80042ea:	2380      	movs	r3, #128	; 0x80
 80042ec:	011b      	lsls	r3, r3, #4
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d102      	bne.n	80042f8 <HAL_GPIO_EXTI_Callback+0x70>
 80042f2:	4b05      	ldr	r3, [pc, #20]	; (8004308 <HAL_GPIO_EXTI_Callback+0x80>)
 80042f4:	2201      	movs	r2, #1
 80042f6:	70da      	strb	r2, [r3, #3]

	// runs timer for software debouncing delay
	HAL_TIM_Base_Start_IT(&htim6);
 80042f8:	4b04      	ldr	r3, [pc, #16]	; (800430c <HAL_GPIO_EXTI_Callback+0x84>)
 80042fa:	0018      	movs	r0, r3
 80042fc:	f005 f822 	bl	8009344 <HAL_TIM_Base_Start_IT>
}
 8004300:	46c0      	nop			; (mov r8, r8)
 8004302:	46bd      	mov	sp, r7
 8004304:	b002      	add	sp, #8
 8004306:	bd80      	pop	{r7, pc}
 8004308:	2000018c 	.word	0x2000018c
 800430c:	20000150 	.word	0x20000150

08004310 <updateState>:

//
void updateState(RTC_HandleTypeDef *hrtc, TIM_HandleTypeDef *timerStopwatchTim, TIM_HandleTypeDef *motorBacklightTim, TIM_HandleTypeDef *buttonTim, SPI_HandleTypeDef *hspi) {
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
 800431c:	603b      	str	r3, [r7, #0]
	if (buttons.is1Pressed || buttons.is2Pressed || buttons.is3Pressed || buttons.is4Pressed) {
 800431e:	4bbf      	ldr	r3, [pc, #764]	; (800461c <updateState+0x30c>)
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10f      	bne.n	8004348 <updateState+0x38>
 8004328:	4bbc      	ldr	r3, [pc, #752]	; (800461c <updateState+0x30c>)
 800432a:	785b      	ldrb	r3, [r3, #1]
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10a      	bne.n	8004348 <updateState+0x38>
 8004332:	4bba      	ldr	r3, [pc, #744]	; (800461c <updateState+0x30c>)
 8004334:	789b      	ldrb	r3, [r3, #2]
 8004336:	b2db      	uxtb	r3, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	d105      	bne.n	8004348 <updateState+0x38>
 800433c:	4bb7      	ldr	r3, [pc, #732]	; (800461c <updateState+0x30c>)
 800433e:	78db      	ldrb	r3, [r3, #3]
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d100      	bne.n	8004348 <updateState+0x38>
 8004346:	e1ab      	b.n	80046a0 <updateState+0x390>
		// button 1 changes the face on screen.
		if (buttons.is1Pressed) {
 8004348:	4bb4      	ldr	r3, [pc, #720]	; (800461c <updateState+0x30c>)
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d02d      	beq.n	80043ae <updateState+0x9e>
			isFaceBeingChanged = 1;
 8004352:	4bb3      	ldr	r3, [pc, #716]	; (8004620 <updateState+0x310>)
 8004354:	2201      	movs	r2, #1
 8004356:	701a      	strb	r2, [r3, #0]
			faceOnDisplay = (faceOnDisplay + 1) % NUM_FACES;
 8004358:	4bb2      	ldr	r3, [pc, #712]	; (8004624 <updateState+0x314>)
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	3301      	adds	r3, #1
 800435e:	4ab2      	ldr	r2, [pc, #712]	; (8004628 <updateState+0x318>)
 8004360:	4013      	ands	r3, r2
 8004362:	d504      	bpl.n	800436e <updateState+0x5e>
 8004364:	3b01      	subs	r3, #1
 8004366:	2204      	movs	r2, #4
 8004368:	4252      	negs	r2, r2
 800436a:	4313      	orrs	r3, r2
 800436c:	3301      	adds	r3, #1
 800436e:	b2da      	uxtb	r2, r3
 8004370:	4bac      	ldr	r3, [pc, #688]	; (8004624 <updateState+0x314>)
 8004372:	701a      	strb	r2, [r3, #0]
			switch (faceOnDisplay) {
 8004374:	4bab      	ldr	r3, [pc, #684]	; (8004624 <updateState+0x314>)
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d00c      	beq.n	8004396 <updateState+0x86>
 800437c:	dc02      	bgt.n	8004384 <updateState+0x74>
 800437e:	2b00      	cmp	r3, #0
 8004380:	d005      	beq.n	800438e <updateState+0x7e>
				case faceClock: updateFace.clock = 1; break;
				case faceTimer: updateFace.timer = 1; break;
				case faceAlarm: updateFace.alarm = 1; break;
				case faceStopwatch: updateFace.stopwatch = 1; break;
				default: break;
 8004382:	e015      	b.n	80043b0 <updateState+0xa0>
			switch (faceOnDisplay) {
 8004384:	2b02      	cmp	r3, #2
 8004386:	d00a      	beq.n	800439e <updateState+0x8e>
 8004388:	2b03      	cmp	r3, #3
 800438a:	d00c      	beq.n	80043a6 <updateState+0x96>
				default: break;
 800438c:	e010      	b.n	80043b0 <updateState+0xa0>
				case faceClock: updateFace.clock = 1; break;
 800438e:	4ba7      	ldr	r3, [pc, #668]	; (800462c <updateState+0x31c>)
 8004390:	2201      	movs	r2, #1
 8004392:	701a      	strb	r2, [r3, #0]
 8004394:	e00c      	b.n	80043b0 <updateState+0xa0>
				case faceTimer: updateFace.timer = 1; break;
 8004396:	4ba5      	ldr	r3, [pc, #660]	; (800462c <updateState+0x31c>)
 8004398:	2201      	movs	r2, #1
 800439a:	705a      	strb	r2, [r3, #1]
 800439c:	e008      	b.n	80043b0 <updateState+0xa0>
				case faceAlarm: updateFace.alarm = 1; break;
 800439e:	4ba3      	ldr	r3, [pc, #652]	; (800462c <updateState+0x31c>)
 80043a0:	2201      	movs	r2, #1
 80043a2:	709a      	strb	r2, [r3, #2]
 80043a4:	e004      	b.n	80043b0 <updateState+0xa0>
				case faceStopwatch: updateFace.stopwatch = 1; break;
 80043a6:	4ba1      	ldr	r3, [pc, #644]	; (800462c <updateState+0x31c>)
 80043a8:	2201      	movs	r2, #1
 80043aa:	70da      	strb	r2, [r3, #3]
 80043ac:	e000      	b.n	80043b0 <updateState+0xa0>
			}
		}
 80043ae:	46c0      	nop			; (mov r8, r8)

		// button combo: press 2 and 3 alternatively 5 times to reinit display.
		// needed since screen often turns white when its power supply is rustled, and there's no way to show the information
		static uint8_t s = 0;
		switch(s) {
 80043b0:	4b9f      	ldr	r3, [pc, #636]	; (8004630 <updateState+0x320>)
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	2b09      	cmp	r3, #9
 80043b6:	d900      	bls.n	80043ba <updateState+0xaa>
 80043b8:	e11b      	b.n	80045f2 <updateState+0x2e2>
 80043ba:	009a      	lsls	r2, r3, #2
 80043bc:	4b9d      	ldr	r3, [pc, #628]	; (8004634 <updateState+0x324>)
 80043be:	18d3      	adds	r3, r2, r3
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	469f      	mov	pc, r3
			case 0:	if (buttons.is2Pressed) s++; break;
 80043c4:	4b95      	ldr	r3, [pc, #596]	; (800461c <updateState+0x30c>)
 80043c6:	785b      	ldrb	r3, [r3, #1]
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d100      	bne.n	80043d0 <updateState+0xc0>
 80043ce:	e112      	b.n	80045f6 <updateState+0x2e6>
 80043d0:	4b97      	ldr	r3, [pc, #604]	; (8004630 <updateState+0x320>)
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	3301      	adds	r3, #1
 80043d6:	b2da      	uxtb	r2, r3
 80043d8:	4b95      	ldr	r3, [pc, #596]	; (8004630 <updateState+0x320>)
 80043da:	701a      	strb	r2, [r3, #0]
 80043dc:	e10b      	b.n	80045f6 <updateState+0x2e6>
			case 1: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 80043de:	4b8f      	ldr	r3, [pc, #572]	; (800461c <updateState+0x30c>)
 80043e0:	789b      	ldrb	r3, [r3, #2]
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d006      	beq.n	80043f6 <updateState+0xe6>
 80043e8:	4b91      	ldr	r3, [pc, #580]	; (8004630 <updateState+0x320>)
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	3301      	adds	r3, #1
 80043ee:	b2da      	uxtb	r2, r3
 80043f0:	4b8f      	ldr	r3, [pc, #572]	; (8004630 <updateState+0x320>)
 80043f2:	701a      	strb	r2, [r3, #0]
 80043f4:	e101      	b.n	80045fa <updateState+0x2ea>
 80043f6:	4b89      	ldr	r3, [pc, #548]	; (800461c <updateState+0x30c>)
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d10a      	bne.n	8004416 <updateState+0x106>
 8004400:	4b86      	ldr	r3, [pc, #536]	; (800461c <updateState+0x30c>)
 8004402:	785b      	ldrb	r3, [r3, #1]
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d105      	bne.n	8004416 <updateState+0x106>
 800440a:	4b84      	ldr	r3, [pc, #528]	; (800461c <updateState+0x30c>)
 800440c:	78db      	ldrb	r3, [r3, #3]
 800440e:	b2db      	uxtb	r3, r3
 8004410:	2b00      	cmp	r3, #0
 8004412:	d100      	bne.n	8004416 <updateState+0x106>
 8004414:	e0f1      	b.n	80045fa <updateState+0x2ea>
 8004416:	4b86      	ldr	r3, [pc, #536]	; (8004630 <updateState+0x320>)
 8004418:	2200      	movs	r2, #0
 800441a:	701a      	strb	r2, [r3, #0]
 800441c:	e0ed      	b.n	80045fa <updateState+0x2ea>
			case 2: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 800441e:	4b7f      	ldr	r3, [pc, #508]	; (800461c <updateState+0x30c>)
 8004420:	785b      	ldrb	r3, [r3, #1]
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b00      	cmp	r3, #0
 8004426:	d006      	beq.n	8004436 <updateState+0x126>
 8004428:	4b81      	ldr	r3, [pc, #516]	; (8004630 <updateState+0x320>)
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	3301      	adds	r3, #1
 800442e:	b2da      	uxtb	r2, r3
 8004430:	4b7f      	ldr	r3, [pc, #508]	; (8004630 <updateState+0x320>)
 8004432:	701a      	strb	r2, [r3, #0]
 8004434:	e0e3      	b.n	80045fe <updateState+0x2ee>
 8004436:	4b79      	ldr	r3, [pc, #484]	; (800461c <updateState+0x30c>)
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	b2db      	uxtb	r3, r3
 800443c:	2b00      	cmp	r3, #0
 800443e:	d10a      	bne.n	8004456 <updateState+0x146>
 8004440:	4b76      	ldr	r3, [pc, #472]	; (800461c <updateState+0x30c>)
 8004442:	789b      	ldrb	r3, [r3, #2]
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d105      	bne.n	8004456 <updateState+0x146>
 800444a:	4b74      	ldr	r3, [pc, #464]	; (800461c <updateState+0x30c>)
 800444c:	78db      	ldrb	r3, [r3, #3]
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b00      	cmp	r3, #0
 8004452:	d100      	bne.n	8004456 <updateState+0x146>
 8004454:	e0d3      	b.n	80045fe <updateState+0x2ee>
 8004456:	4b76      	ldr	r3, [pc, #472]	; (8004630 <updateState+0x320>)
 8004458:	2200      	movs	r2, #0
 800445a:	701a      	strb	r2, [r3, #0]
 800445c:	e0cf      	b.n	80045fe <updateState+0x2ee>
			case 3: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 800445e:	4b6f      	ldr	r3, [pc, #444]	; (800461c <updateState+0x30c>)
 8004460:	789b      	ldrb	r3, [r3, #2]
 8004462:	b2db      	uxtb	r3, r3
 8004464:	2b00      	cmp	r3, #0
 8004466:	d006      	beq.n	8004476 <updateState+0x166>
 8004468:	4b71      	ldr	r3, [pc, #452]	; (8004630 <updateState+0x320>)
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	3301      	adds	r3, #1
 800446e:	b2da      	uxtb	r2, r3
 8004470:	4b6f      	ldr	r3, [pc, #444]	; (8004630 <updateState+0x320>)
 8004472:	701a      	strb	r2, [r3, #0]
 8004474:	e0c5      	b.n	8004602 <updateState+0x2f2>
 8004476:	4b69      	ldr	r3, [pc, #420]	; (800461c <updateState+0x30c>)
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	b2db      	uxtb	r3, r3
 800447c:	2b00      	cmp	r3, #0
 800447e:	d10a      	bne.n	8004496 <updateState+0x186>
 8004480:	4b66      	ldr	r3, [pc, #408]	; (800461c <updateState+0x30c>)
 8004482:	785b      	ldrb	r3, [r3, #1]
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	d105      	bne.n	8004496 <updateState+0x186>
 800448a:	4b64      	ldr	r3, [pc, #400]	; (800461c <updateState+0x30c>)
 800448c:	78db      	ldrb	r3, [r3, #3]
 800448e:	b2db      	uxtb	r3, r3
 8004490:	2b00      	cmp	r3, #0
 8004492:	d100      	bne.n	8004496 <updateState+0x186>
 8004494:	e0b5      	b.n	8004602 <updateState+0x2f2>
 8004496:	4b66      	ldr	r3, [pc, #408]	; (8004630 <updateState+0x320>)
 8004498:	2200      	movs	r2, #0
 800449a:	701a      	strb	r2, [r3, #0]
 800449c:	e0b1      	b.n	8004602 <updateState+0x2f2>
			case 4: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 800449e:	4b5f      	ldr	r3, [pc, #380]	; (800461c <updateState+0x30c>)
 80044a0:	785b      	ldrb	r3, [r3, #1]
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d006      	beq.n	80044b6 <updateState+0x1a6>
 80044a8:	4b61      	ldr	r3, [pc, #388]	; (8004630 <updateState+0x320>)
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	3301      	adds	r3, #1
 80044ae:	b2da      	uxtb	r2, r3
 80044b0:	4b5f      	ldr	r3, [pc, #380]	; (8004630 <updateState+0x320>)
 80044b2:	701a      	strb	r2, [r3, #0]
 80044b4:	e0a7      	b.n	8004606 <updateState+0x2f6>
 80044b6:	4b59      	ldr	r3, [pc, #356]	; (800461c <updateState+0x30c>)
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d10a      	bne.n	80044d6 <updateState+0x1c6>
 80044c0:	4b56      	ldr	r3, [pc, #344]	; (800461c <updateState+0x30c>)
 80044c2:	789b      	ldrb	r3, [r3, #2]
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d105      	bne.n	80044d6 <updateState+0x1c6>
 80044ca:	4b54      	ldr	r3, [pc, #336]	; (800461c <updateState+0x30c>)
 80044cc:	78db      	ldrb	r3, [r3, #3]
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d100      	bne.n	80044d6 <updateState+0x1c6>
 80044d4:	e097      	b.n	8004606 <updateState+0x2f6>
 80044d6:	4b56      	ldr	r3, [pc, #344]	; (8004630 <updateState+0x320>)
 80044d8:	2200      	movs	r2, #0
 80044da:	701a      	strb	r2, [r3, #0]
 80044dc:	e093      	b.n	8004606 <updateState+0x2f6>
			case 5: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 80044de:	4b4f      	ldr	r3, [pc, #316]	; (800461c <updateState+0x30c>)
 80044e0:	789b      	ldrb	r3, [r3, #2]
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d006      	beq.n	80044f6 <updateState+0x1e6>
 80044e8:	4b51      	ldr	r3, [pc, #324]	; (8004630 <updateState+0x320>)
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	3301      	adds	r3, #1
 80044ee:	b2da      	uxtb	r2, r3
 80044f0:	4b4f      	ldr	r3, [pc, #316]	; (8004630 <updateState+0x320>)
 80044f2:	701a      	strb	r2, [r3, #0]
 80044f4:	e089      	b.n	800460a <updateState+0x2fa>
 80044f6:	4b49      	ldr	r3, [pc, #292]	; (800461c <updateState+0x30c>)
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d10a      	bne.n	8004516 <updateState+0x206>
 8004500:	4b46      	ldr	r3, [pc, #280]	; (800461c <updateState+0x30c>)
 8004502:	785b      	ldrb	r3, [r3, #1]
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d105      	bne.n	8004516 <updateState+0x206>
 800450a:	4b44      	ldr	r3, [pc, #272]	; (800461c <updateState+0x30c>)
 800450c:	78db      	ldrb	r3, [r3, #3]
 800450e:	b2db      	uxtb	r3, r3
 8004510:	2b00      	cmp	r3, #0
 8004512:	d100      	bne.n	8004516 <updateState+0x206>
 8004514:	e079      	b.n	800460a <updateState+0x2fa>
 8004516:	4b46      	ldr	r3, [pc, #280]	; (8004630 <updateState+0x320>)
 8004518:	2200      	movs	r2, #0
 800451a:	701a      	strb	r2, [r3, #0]
 800451c:	e075      	b.n	800460a <updateState+0x2fa>
			case 6: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 800451e:	4b3f      	ldr	r3, [pc, #252]	; (800461c <updateState+0x30c>)
 8004520:	785b      	ldrb	r3, [r3, #1]
 8004522:	b2db      	uxtb	r3, r3
 8004524:	2b00      	cmp	r3, #0
 8004526:	d006      	beq.n	8004536 <updateState+0x226>
 8004528:	4b41      	ldr	r3, [pc, #260]	; (8004630 <updateState+0x320>)
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	3301      	adds	r3, #1
 800452e:	b2da      	uxtb	r2, r3
 8004530:	4b3f      	ldr	r3, [pc, #252]	; (8004630 <updateState+0x320>)
 8004532:	701a      	strb	r2, [r3, #0]
 8004534:	e06b      	b.n	800460e <updateState+0x2fe>
 8004536:	4b39      	ldr	r3, [pc, #228]	; (800461c <updateState+0x30c>)
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b00      	cmp	r3, #0
 800453e:	d109      	bne.n	8004554 <updateState+0x244>
 8004540:	4b36      	ldr	r3, [pc, #216]	; (800461c <updateState+0x30c>)
 8004542:	789b      	ldrb	r3, [r3, #2]
 8004544:	b2db      	uxtb	r3, r3
 8004546:	2b00      	cmp	r3, #0
 8004548:	d104      	bne.n	8004554 <updateState+0x244>
 800454a:	4b34      	ldr	r3, [pc, #208]	; (800461c <updateState+0x30c>)
 800454c:	78db      	ldrb	r3, [r3, #3]
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b00      	cmp	r3, #0
 8004552:	d05c      	beq.n	800460e <updateState+0x2fe>
 8004554:	4b36      	ldr	r3, [pc, #216]	; (8004630 <updateState+0x320>)
 8004556:	2200      	movs	r2, #0
 8004558:	701a      	strb	r2, [r3, #0]
 800455a:	e058      	b.n	800460e <updateState+0x2fe>
			case 7: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 800455c:	4b2f      	ldr	r3, [pc, #188]	; (800461c <updateState+0x30c>)
 800455e:	789b      	ldrb	r3, [r3, #2]
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d006      	beq.n	8004574 <updateState+0x264>
 8004566:	4b32      	ldr	r3, [pc, #200]	; (8004630 <updateState+0x320>)
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	3301      	adds	r3, #1
 800456c:	b2da      	uxtb	r2, r3
 800456e:	4b30      	ldr	r3, [pc, #192]	; (8004630 <updateState+0x320>)
 8004570:	701a      	strb	r2, [r3, #0]
 8004572:	e04e      	b.n	8004612 <updateState+0x302>
 8004574:	4b29      	ldr	r3, [pc, #164]	; (800461c <updateState+0x30c>)
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d109      	bne.n	8004592 <updateState+0x282>
 800457e:	4b27      	ldr	r3, [pc, #156]	; (800461c <updateState+0x30c>)
 8004580:	785b      	ldrb	r3, [r3, #1]
 8004582:	b2db      	uxtb	r3, r3
 8004584:	2b00      	cmp	r3, #0
 8004586:	d104      	bne.n	8004592 <updateState+0x282>
 8004588:	4b24      	ldr	r3, [pc, #144]	; (800461c <updateState+0x30c>)
 800458a:	78db      	ldrb	r3, [r3, #3]
 800458c:	b2db      	uxtb	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	d03f      	beq.n	8004612 <updateState+0x302>
 8004592:	4b27      	ldr	r3, [pc, #156]	; (8004630 <updateState+0x320>)
 8004594:	2200      	movs	r2, #0
 8004596:	701a      	strb	r2, [r3, #0]
 8004598:	e03b      	b.n	8004612 <updateState+0x302>
			case 8: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 800459a:	4b20      	ldr	r3, [pc, #128]	; (800461c <updateState+0x30c>)
 800459c:	785b      	ldrb	r3, [r3, #1]
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d006      	beq.n	80045b2 <updateState+0x2a2>
 80045a4:	4b22      	ldr	r3, [pc, #136]	; (8004630 <updateState+0x320>)
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	3301      	adds	r3, #1
 80045aa:	b2da      	uxtb	r2, r3
 80045ac:	4b20      	ldr	r3, [pc, #128]	; (8004630 <updateState+0x320>)
 80045ae:	701a      	strb	r2, [r3, #0]
 80045b0:	e031      	b.n	8004616 <updateState+0x306>
 80045b2:	4b1a      	ldr	r3, [pc, #104]	; (800461c <updateState+0x30c>)
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d109      	bne.n	80045d0 <updateState+0x2c0>
 80045bc:	4b17      	ldr	r3, [pc, #92]	; (800461c <updateState+0x30c>)
 80045be:	789b      	ldrb	r3, [r3, #2]
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d104      	bne.n	80045d0 <updateState+0x2c0>
 80045c6:	4b15      	ldr	r3, [pc, #84]	; (800461c <updateState+0x30c>)
 80045c8:	78db      	ldrb	r3, [r3, #3]
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d022      	beq.n	8004616 <updateState+0x306>
 80045d0:	4b17      	ldr	r3, [pc, #92]	; (8004630 <updateState+0x320>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	701a      	strb	r2, [r3, #0]
 80045d6:	e01e      	b.n	8004616 <updateState+0x306>
			case 9: if (buttons.is3Pressed) {TFT_startup(hspi); s = 0;} break;
 80045d8:	4b10      	ldr	r3, [pc, #64]	; (800461c <updateState+0x30c>)
 80045da:	789b      	ldrb	r3, [r3, #2]
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d02a      	beq.n	8004638 <updateState+0x328>
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	0018      	movs	r0, r3
 80045e6:	f7fc fdbd 	bl	8001164 <TFT_startup>
 80045ea:	4b11      	ldr	r3, [pc, #68]	; (8004630 <updateState+0x320>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	701a      	strb	r2, [r3, #0]
 80045f0:	e022      	b.n	8004638 <updateState+0x328>
			default: break;
 80045f2:	46c0      	nop			; (mov r8, r8)
 80045f4:	e021      	b.n	800463a <updateState+0x32a>
			case 0:	if (buttons.is2Pressed) s++; break;
 80045f6:	46c0      	nop			; (mov r8, r8)
 80045f8:	e01f      	b.n	800463a <updateState+0x32a>
			case 1: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 80045fa:	46c0      	nop			; (mov r8, r8)
 80045fc:	e01d      	b.n	800463a <updateState+0x32a>
			case 2: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 80045fe:	46c0      	nop			; (mov r8, r8)
 8004600:	e01b      	b.n	800463a <updateState+0x32a>
			case 3: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 8004602:	46c0      	nop			; (mov r8, r8)
 8004604:	e019      	b.n	800463a <updateState+0x32a>
			case 4: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 8004606:	46c0      	nop			; (mov r8, r8)
 8004608:	e017      	b.n	800463a <updateState+0x32a>
			case 5: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 800460a:	46c0      	nop			; (mov r8, r8)
 800460c:	e015      	b.n	800463a <updateState+0x32a>
			case 6: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 800460e:	46c0      	nop			; (mov r8, r8)
 8004610:	e013      	b.n	800463a <updateState+0x32a>
			case 7: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 8004612:	46c0      	nop			; (mov r8, r8)
 8004614:	e011      	b.n	800463a <updateState+0x32a>
			case 8: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 8004616:	46c0      	nop			; (mov r8, r8)
 8004618:	e00f      	b.n	800463a <updateState+0x32a>
 800461a:	46c0      	nop			; (mov r8, r8)
 800461c:	2000018c 	.word	0x2000018c
 8004620:	20000068 	.word	0x20000068
 8004624:	20000130 	.word	0x20000130
 8004628:	80000003 	.word	0x80000003
 800462c:	20000140 	.word	0x20000140
 8004630:	20000131 	.word	0x20000131
 8004634:	0800b310 	.word	0x0800b310
			case 9: if (buttons.is3Pressed) {TFT_startup(hspi); s = 0;} break;
 8004638:	46c0      	nop			; (mov r8, r8)
		}

		// run helper functions when their face is on screen
		if (faceOnDisplay == faceClock) updateClockState(hrtc);
 800463a:	4b1b      	ldr	r3, [pc, #108]	; (80046a8 <updateState+0x398>)
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d104      	bne.n	800464c <updateState+0x33c>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	0018      	movs	r0, r3
 8004646:	f000 f833 	bl	80046b0 <updateClockState>
 800464a:	e01d      	b.n	8004688 <updateState+0x378>
		else if (faceOnDisplay == faceTimer) updateTimerState(timerStopwatchTim, motorBacklightTim);
 800464c:	4b16      	ldr	r3, [pc, #88]	; (80046a8 <updateState+0x398>)
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d106      	bne.n	8004662 <updateState+0x352>
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	0011      	movs	r1, r2
 800465a:	0018      	movs	r0, r3
 800465c:	f000 f978 	bl	8004950 <updateTimerState>
 8004660:	e012      	b.n	8004688 <updateState+0x378>
		else if (faceOnDisplay == faceAlarm) updateAlarmState(hrtc, motorBacklightTim);
 8004662:	4b11      	ldr	r3, [pc, #68]	; (80046a8 <updateState+0x398>)
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	2b02      	cmp	r3, #2
 8004668:	d106      	bne.n	8004678 <updateState+0x368>
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	0011      	movs	r1, r2
 8004670:	0018      	movs	r0, r3
 8004672:	f000 faa9 	bl	8004bc8 <updateAlarmState>
 8004676:	e007      	b.n	8004688 <updateState+0x378>
		else if (faceOnDisplay == faceStopwatch) updateStopwatchState(timerStopwatchTim);
 8004678:	4b0b      	ldr	r3, [pc, #44]	; (80046a8 <updateState+0x398>)
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	2b03      	cmp	r3, #3
 800467e:	d103      	bne.n	8004688 <updateState+0x378>
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	0018      	movs	r0, r3
 8004684:	f000 fbcc 	bl	8004e20 <updateStopwatchState>

		// flags cleared only when state code has finished executing once
		buttons.is1Pressed = buttons.is2Pressed = buttons.is3Pressed = buttons.is4Pressed = 0;
 8004688:	2200      	movs	r2, #0
 800468a:	4b08      	ldr	r3, [pc, #32]	; (80046ac <updateState+0x39c>)
 800468c:	1c11      	adds	r1, r2, #0
 800468e:	70d9      	strb	r1, [r3, #3]
 8004690:	4b06      	ldr	r3, [pc, #24]	; (80046ac <updateState+0x39c>)
 8004692:	1c11      	adds	r1, r2, #0
 8004694:	7099      	strb	r1, [r3, #2]
 8004696:	4b05      	ldr	r3, [pc, #20]	; (80046ac <updateState+0x39c>)
 8004698:	1c11      	adds	r1, r2, #0
 800469a:	7059      	strb	r1, [r3, #1]
 800469c:	4b03      	ldr	r3, [pc, #12]	; (80046ac <updateState+0x39c>)
 800469e:	701a      	strb	r2, [r3, #0]
	}
}
 80046a0:	46c0      	nop			; (mov r8, r8)
 80046a2:	46bd      	mov	sp, r7
 80046a4:	b004      	add	sp, #16
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	20000130 	.word	0x20000130
 80046ac:	2000018c 	.word	0x2000018c

080046b0 <updateClockState>:
 *   button 2 changes value up
 *   button 3 changes value down
 *   button 4 changes field being set. changes between min, hr, year, month, and day. once it finishes cycling through it once,
 *     the clock is updated and we revert back to default mode.
 */
void updateClockState(RTC_HandleTypeDef *hrtc) {
 80046b0:	b590      	push	{r4, r7, lr}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
	// check button pressed -> perform action
	if (buttons.is2Pressed && clockVars.isBeingSet) {
 80046b8:	4b9f      	ldr	r3, [pc, #636]	; (8004938 <updateClockState+0x288>)
 80046ba:	785b      	ldrb	r3, [r3, #1]
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d065      	beq.n	800478e <updateClockState+0xde>
 80046c2:	4b9e      	ldr	r3, [pc, #632]	; (800493c <updateClockState+0x28c>)
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d061      	beq.n	800478e <updateClockState+0xde>
		updateFace.clock = 1;
 80046ca:	4b9d      	ldr	r3, [pc, #628]	; (8004940 <updateClockState+0x290>)
 80046cc:	2201      	movs	r2, #1
 80046ce:	701a      	strb	r2, [r3, #0]
		switch (clockVars.fieldBeingSet) {
 80046d0:	4b9a      	ldr	r3, [pc, #616]	; (800493c <updateClockState+0x28c>)
 80046d2:	785b      	ldrb	r3, [r3, #1]
 80046d4:	2b05      	cmp	r3, #5
 80046d6:	d85c      	bhi.n	8004792 <updateClockState+0xe2>
 80046d8:	009a      	lsls	r2, r3, #2
 80046da:	4b9a      	ldr	r3, [pc, #616]	; (8004944 <updateClockState+0x294>)
 80046dc:	18d3      	adds	r3, r2, r3
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	469f      	mov	pc, r3
			case 1: clockVars.timeToSet->min = (clockVars.timeToSet->min+1) % 60; break;
 80046e2:	4b96      	ldr	r3, [pc, #600]	; (800493c <updateClockState+0x28c>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	785b      	ldrb	r3, [r3, #1]
 80046e8:	3301      	adds	r3, #1
 80046ea:	213c      	movs	r1, #60	; 0x3c
 80046ec:	0018      	movs	r0, r3
 80046ee:	f7fb fe83 	bl	80003f8 <__aeabi_idivmod>
 80046f2:	000b      	movs	r3, r1
 80046f4:	001a      	movs	r2, r3
 80046f6:	4b91      	ldr	r3, [pc, #580]	; (800493c <updateClockState+0x28c>)
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	b2d2      	uxtb	r2, r2
 80046fc:	705a      	strb	r2, [r3, #1]
 80046fe:	e049      	b.n	8004794 <updateClockState+0xe4>
			case 2: clockVars.timeToSet->hr = (clockVars.timeToSet->hr+1) % 24; break;
 8004700:	4b8e      	ldr	r3, [pc, #568]	; (800493c <updateClockState+0x28c>)
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	3301      	adds	r3, #1
 8004708:	2118      	movs	r1, #24
 800470a:	0018      	movs	r0, r3
 800470c:	f7fb fe74 	bl	80003f8 <__aeabi_idivmod>
 8004710:	000b      	movs	r3, r1
 8004712:	001a      	movs	r2, r3
 8004714:	4b89      	ldr	r3, [pc, #548]	; (800493c <updateClockState+0x28c>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	b2d2      	uxtb	r2, r2
 800471a:	701a      	strb	r2, [r3, #0]
 800471c:	e03a      	b.n	8004794 <updateClockState+0xe4>
			case 3: clockVars.dateToSet->yr = (clockVars.dateToSet->yr + 1) % 10000; break;		// fit in 4 characters
 800471e:	4b87      	ldr	r3, [pc, #540]	; (800493c <updateClockState+0x28c>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	881b      	ldrh	r3, [r3, #0]
 8004724:	3301      	adds	r3, #1
 8004726:	4988      	ldr	r1, [pc, #544]	; (8004948 <updateClockState+0x298>)
 8004728:	0018      	movs	r0, r3
 800472a:	f7fb fe65 	bl	80003f8 <__aeabi_idivmod>
 800472e:	000b      	movs	r3, r1
 8004730:	001a      	movs	r2, r3
 8004732:	4b82      	ldr	r3, [pc, #520]	; (800493c <updateClockState+0x28c>)
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	b292      	uxth	r2, r2
 8004738:	801a      	strh	r2, [r3, #0]
 800473a:	e02b      	b.n	8004794 <updateClockState+0xe4>
			case 4: clockVars.dateToSet->month = (clockVars.dateToSet->month) % 12 + 1; break;
 800473c:	4b7f      	ldr	r3, [pc, #508]	; (800493c <updateClockState+0x28c>)
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	789b      	ldrb	r3, [r3, #2]
 8004742:	210c      	movs	r1, #12
 8004744:	0018      	movs	r0, r3
 8004746:	f7fb fd6d 	bl	8000224 <__aeabi_uidivmod>
 800474a:	000b      	movs	r3, r1
 800474c:	b2da      	uxtb	r2, r3
 800474e:	4b7b      	ldr	r3, [pc, #492]	; (800493c <updateClockState+0x28c>)
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	3201      	adds	r2, #1
 8004754:	b2d2      	uxtb	r2, r2
 8004756:	709a      	strb	r2, [r3, #2]
 8004758:	e01c      	b.n	8004794 <updateClockState+0xe4>
			case 5: clockVars.dateToSet->date = ((clockVars.dateToSet->date) % maxDaysInMonth(clockVars.dateToSet->month, clockVars.dateToSet->yr)) + 1; break;
 800475a:	4b78      	ldr	r3, [pc, #480]	; (800493c <updateClockState+0x28c>)
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	78dc      	ldrb	r4, [r3, #3]
 8004760:	4b76      	ldr	r3, [pc, #472]	; (800493c <updateClockState+0x28c>)
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	789a      	ldrb	r2, [r3, #2]
 8004766:	4b75      	ldr	r3, [pc, #468]	; (800493c <updateClockState+0x28c>)
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	881b      	ldrh	r3, [r3, #0]
 800476c:	0019      	movs	r1, r3
 800476e:	0010      	movs	r0, r2
 8004770:	f7fe f9f0 	bl	8002b54 <maxDaysInMonth>
 8004774:	0003      	movs	r3, r0
 8004776:	0019      	movs	r1, r3
 8004778:	0020      	movs	r0, r4
 800477a:	f7fb fd53 	bl	8000224 <__aeabi_uidivmod>
 800477e:	000b      	movs	r3, r1
 8004780:	b2da      	uxtb	r2, r3
 8004782:	4b6e      	ldr	r3, [pc, #440]	; (800493c <updateClockState+0x28c>)
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	3201      	adds	r2, #1
 8004788:	b2d2      	uxtb	r2, r2
 800478a:	70da      	strb	r2, [r3, #3]
 800478c:	e002      	b.n	8004794 <updateClockState+0xe4>
			default: break;
		}
	}
 800478e:	46c0      	nop			; (mov r8, r8)
 8004790:	e000      	b.n	8004794 <updateClockState+0xe4>
			default: break;
 8004792:	46c0      	nop			; (mov r8, r8)
	// change fields down, do nothing if not setting clock
	if (buttons.is3Pressed && clockVars.isBeingSet) {
 8004794:	4b68      	ldr	r3, [pc, #416]	; (8004938 <updateClockState+0x288>)
 8004796:	789b      	ldrb	r3, [r3, #2]
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d100      	bne.n	80047a0 <updateClockState+0xf0>
 800479e:	e068      	b.n	8004872 <updateClockState+0x1c2>
 80047a0:	4b66      	ldr	r3, [pc, #408]	; (800493c <updateClockState+0x28c>)
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d064      	beq.n	8004872 <updateClockState+0x1c2>
		updateFace.clock = 1;
 80047a8:	4b65      	ldr	r3, [pc, #404]	; (8004940 <updateClockState+0x290>)
 80047aa:	2201      	movs	r2, #1
 80047ac:	701a      	strb	r2, [r3, #0]
		switch (clockVars.fieldBeingSet) {
 80047ae:	4b63      	ldr	r3, [pc, #396]	; (800493c <updateClockState+0x28c>)
 80047b0:	785b      	ldrb	r3, [r3, #1]
 80047b2:	2b05      	cmp	r3, #5
 80047b4:	d85f      	bhi.n	8004876 <updateClockState+0x1c6>
 80047b6:	009a      	lsls	r2, r3, #2
 80047b8:	4b64      	ldr	r3, [pc, #400]	; (800494c <updateClockState+0x29c>)
 80047ba:	18d3      	adds	r3, r2, r3
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	469f      	mov	pc, r3
			case 1:
				if (clockVars.timeToSet->min == 0) clockVars.timeToSet->min = 59;
 80047c0:	4b5e      	ldr	r3, [pc, #376]	; (800493c <updateClockState+0x28c>)
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	785b      	ldrb	r3, [r3, #1]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d104      	bne.n	80047d4 <updateClockState+0x124>
 80047ca:	4b5c      	ldr	r3, [pc, #368]	; (800493c <updateClockState+0x28c>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	223b      	movs	r2, #59	; 0x3b
 80047d0:	705a      	strb	r2, [r3, #1]
				else clockVars.timeToSet->min--;
				break;
 80047d2:	e053      	b.n	800487c <updateClockState+0x1cc>
				else clockVars.timeToSet->min--;
 80047d4:	4b59      	ldr	r3, [pc, #356]	; (800493c <updateClockState+0x28c>)
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	785a      	ldrb	r2, [r3, #1]
 80047da:	3a01      	subs	r2, #1
 80047dc:	b2d2      	uxtb	r2, r2
 80047de:	705a      	strb	r2, [r3, #1]
				break;
 80047e0:	e04c      	b.n	800487c <updateClockState+0x1cc>
			case 2:
				if (clockVars.timeToSet->hr == 0) clockVars.timeToSet->hr = 23;
 80047e2:	4b56      	ldr	r3, [pc, #344]	; (800493c <updateClockState+0x28c>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d104      	bne.n	80047f6 <updateClockState+0x146>
 80047ec:	4b53      	ldr	r3, [pc, #332]	; (800493c <updateClockState+0x28c>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	2217      	movs	r2, #23
 80047f2:	701a      	strb	r2, [r3, #0]
				else clockVars.timeToSet->hr--;
				break;
 80047f4:	e042      	b.n	800487c <updateClockState+0x1cc>
				else clockVars.timeToSet->hr--;
 80047f6:	4b51      	ldr	r3, [pc, #324]	; (800493c <updateClockState+0x28c>)
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	781a      	ldrb	r2, [r3, #0]
 80047fc:	3a01      	subs	r2, #1
 80047fe:	b2d2      	uxtb	r2, r2
 8004800:	701a      	strb	r2, [r3, #0]
				break;
 8004802:	e03b      	b.n	800487c <updateClockState+0x1cc>
			case 3: if (clockVars.dateToSet->yr != 0) clockVars.dateToSet->yr--; break;		// limit to positive numbers
 8004804:	4b4d      	ldr	r3, [pc, #308]	; (800493c <updateClockState+0x28c>)
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	881b      	ldrh	r3, [r3, #0]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d035      	beq.n	800487a <updateClockState+0x1ca>
 800480e:	4b4b      	ldr	r3, [pc, #300]	; (800493c <updateClockState+0x28c>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	881a      	ldrh	r2, [r3, #0]
 8004814:	3a01      	subs	r2, #1
 8004816:	b292      	uxth	r2, r2
 8004818:	801a      	strh	r2, [r3, #0]
 800481a:	e02e      	b.n	800487a <updateClockState+0x1ca>
			case 4: //clockVars.dateToSet->month = clockVars.dateToSet->month == 1 ? 12 : clockVars.dateToSet->month-1; break;
				if (clockVars.dateToSet->month == 1) clockVars.dateToSet->month = 12;
 800481c:	4b47      	ldr	r3, [pc, #284]	; (800493c <updateClockState+0x28c>)
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	789b      	ldrb	r3, [r3, #2]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d104      	bne.n	8004830 <updateClockState+0x180>
 8004826:	4b45      	ldr	r3, [pc, #276]	; (800493c <updateClockState+0x28c>)
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	220c      	movs	r2, #12
 800482c:	709a      	strb	r2, [r3, #2]
				else clockVars.dateToSet->month--;
				break;
 800482e:	e025      	b.n	800487c <updateClockState+0x1cc>
				else clockVars.dateToSet->month--;
 8004830:	4b42      	ldr	r3, [pc, #264]	; (800493c <updateClockState+0x28c>)
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	789a      	ldrb	r2, [r3, #2]
 8004836:	3a01      	subs	r2, #1
 8004838:	b2d2      	uxtb	r2, r2
 800483a:	709a      	strb	r2, [r3, #2]
				break;
 800483c:	e01e      	b.n	800487c <updateClockState+0x1cc>
			case 5:
				if (clockVars.dateToSet->date == 1) clockVars.dateToSet->date = maxDaysInMonth(clockVars.dateToSet->month, clockVars.dateToSet->yr);
 800483e:	4b3f      	ldr	r3, [pc, #252]	; (800493c <updateClockState+0x28c>)
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	78db      	ldrb	r3, [r3, #3]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d10d      	bne.n	8004864 <updateClockState+0x1b4>
 8004848:	4b3c      	ldr	r3, [pc, #240]	; (800493c <updateClockState+0x28c>)
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	789a      	ldrb	r2, [r3, #2]
 800484e:	4b3b      	ldr	r3, [pc, #236]	; (800493c <updateClockState+0x28c>)
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	8819      	ldrh	r1, [r3, #0]
 8004854:	4b39      	ldr	r3, [pc, #228]	; (800493c <updateClockState+0x28c>)
 8004856:	685c      	ldr	r4, [r3, #4]
 8004858:	0010      	movs	r0, r2
 800485a:	f7fe f97b 	bl	8002b54 <maxDaysInMonth>
 800485e:	0003      	movs	r3, r0
 8004860:	70e3      	strb	r3, [r4, #3]
				else clockVars.dateToSet->date--;
				break;
 8004862:	e00b      	b.n	800487c <updateClockState+0x1cc>
				else clockVars.dateToSet->date--;
 8004864:	4b35      	ldr	r3, [pc, #212]	; (800493c <updateClockState+0x28c>)
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	78da      	ldrb	r2, [r3, #3]
 800486a:	3a01      	subs	r2, #1
 800486c:	b2d2      	uxtb	r2, r2
 800486e:	70da      	strb	r2, [r3, #3]
				break;
 8004870:	e004      	b.n	800487c <updateClockState+0x1cc>
			default: break;
		}
	}
 8004872:	46c0      	nop			; (mov r8, r8)
 8004874:	e002      	b.n	800487c <updateClockState+0x1cc>
			default: break;
 8004876:	46c0      	nop			; (mov r8, r8)
 8004878:	e000      	b.n	800487c <updateClockState+0x1cc>
			case 3: if (clockVars.dateToSet->yr != 0) clockVars.dateToSet->yr--; break;		// limit to positive numbers
 800487a:	46c0      	nop			; (mov r8, r8)
	// switches between setting mode and default mode. changes between different clock fields
	if (buttons.is4Pressed) {
 800487c:	4b2e      	ldr	r3, [pc, #184]	; (8004938 <updateClockState+0x288>)
 800487e:	78db      	ldrb	r3, [r3, #3]
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b00      	cmp	r3, #0
 8004884:	d054      	beq.n	8004930 <updateClockState+0x280>
		updateFace.clock = 1;
 8004886:	4b2e      	ldr	r3, [pc, #184]	; (8004940 <updateClockState+0x290>)
 8004888:	2201      	movs	r2, #1
 800488a:	701a      	strb	r2, [r3, #0]
		clockVars.fieldBeingSet = (clockVars.fieldBeingSet + 1) % (NUM_CLOCKFIELDS + 1);
 800488c:	4b2b      	ldr	r3, [pc, #172]	; (800493c <updateClockState+0x28c>)
 800488e:	785b      	ldrb	r3, [r3, #1]
 8004890:	3301      	adds	r3, #1
 8004892:	2106      	movs	r1, #6
 8004894:	0018      	movs	r0, r3
 8004896:	f7fb fdaf 	bl	80003f8 <__aeabi_idivmod>
 800489a:	000b      	movs	r3, r1
 800489c:	b2da      	uxtb	r2, r3
 800489e:	4b27      	ldr	r3, [pc, #156]	; (800493c <updateClockState+0x28c>)
 80048a0:	705a      	strb	r2, [r3, #1]
		if (clockVars.fieldBeingSet != 0) {
 80048a2:	4b26      	ldr	r3, [pc, #152]	; (800493c <updateClockState+0x28c>)
 80048a4:	785b      	ldrb	r3, [r3, #1]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d033      	beq.n	8004912 <updateClockState+0x262>
			clockVars.isBeingSet = 1;
 80048aa:	4b24      	ldr	r3, [pc, #144]	; (800493c <updateClockState+0x28c>)
 80048ac:	2201      	movs	r2, #1
 80048ae:	701a      	strb	r2, [r3, #0]

			// should pull current time when first entering setting mode
			if (clockVars.fieldBeingSet == 1) {
 80048b0:	4b22      	ldr	r3, [pc, #136]	; (800493c <updateClockState+0x28c>)
 80048b2:	785b      	ldrb	r3, [r3, #1]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d10e      	bne.n	80048d6 <updateClockState+0x226>
				getDateTime(clockVars.dateToSet, clockVars.timeToSet, hrtc);
 80048b8:	4b20      	ldr	r3, [pc, #128]	; (800493c <updateClockState+0x28c>)
 80048ba:	6858      	ldr	r0, [r3, #4]
 80048bc:	4b1f      	ldr	r3, [pc, #124]	; (800493c <updateClockState+0x28c>)
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	0019      	movs	r1, r3
 80048c4:	f7fe f804 	bl	80028d0 <getDateTime>
				HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_B);
 80048c8:	2380      	movs	r3, #128	; 0x80
 80048ca:	009a      	lsls	r2, r3, #2
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	0011      	movs	r1, r2
 80048d0:	0018      	movs	r0, r3
 80048d2:	f003 fdf3 	bl	80084bc <HAL_RTC_DeactivateAlarm>
			}

			if (clockVars.dateToSet->date > maxDaysInMonth(clockVars.dateToSet->month, clockVars.dateToSet->yr)) {
 80048d6:	4b19      	ldr	r3, [pc, #100]	; (800493c <updateClockState+0x28c>)
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	78dc      	ldrb	r4, [r3, #3]
 80048dc:	4b17      	ldr	r3, [pc, #92]	; (800493c <updateClockState+0x28c>)
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	789a      	ldrb	r2, [r3, #2]
 80048e2:	4b16      	ldr	r3, [pc, #88]	; (800493c <updateClockState+0x28c>)
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	881b      	ldrh	r3, [r3, #0]
 80048e8:	0019      	movs	r1, r3
 80048ea:	0010      	movs	r0, r2
 80048ec:	f7fe f932 	bl	8002b54 <maxDaysInMonth>
 80048f0:	0003      	movs	r3, r0
 80048f2:	429c      	cmp	r4, r3
 80048f4:	d91c      	bls.n	8004930 <updateClockState+0x280>
				clockVars.dateToSet->date = maxDaysInMonth(clockVars.dateToSet->month, clockVars.dateToSet->yr);
 80048f6:	4b11      	ldr	r3, [pc, #68]	; (800493c <updateClockState+0x28c>)
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	789a      	ldrb	r2, [r3, #2]
 80048fc:	4b0f      	ldr	r3, [pc, #60]	; (800493c <updateClockState+0x28c>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	8819      	ldrh	r1, [r3, #0]
 8004902:	4b0e      	ldr	r3, [pc, #56]	; (800493c <updateClockState+0x28c>)
 8004904:	685c      	ldr	r4, [r3, #4]
 8004906:	0010      	movs	r0, r2
 8004908:	f7fe f924 	bl	8002b54 <maxDaysInMonth>
 800490c:	0003      	movs	r3, r0
 800490e:	70e3      	strb	r3, [r4, #3]
			// second set to 0, weekday ignored
			setDateTime(clockVars.dateToSet, clockVars.timeToSet, hrtc);
			setClockAlarm(hrtc);
		}
	}
}
 8004910:	e00e      	b.n	8004930 <updateClockState+0x280>
			clockVars.isBeingSet = 0;
 8004912:	4b0a      	ldr	r3, [pc, #40]	; (800493c <updateClockState+0x28c>)
 8004914:	2200      	movs	r2, #0
 8004916:	701a      	strb	r2, [r3, #0]
			setDateTime(clockVars.dateToSet, clockVars.timeToSet, hrtc);
 8004918:	4b08      	ldr	r3, [pc, #32]	; (800493c <updateClockState+0x28c>)
 800491a:	6858      	ldr	r0, [r3, #4]
 800491c:	4b07      	ldr	r3, [pc, #28]	; (800493c <updateClockState+0x28c>)
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	0019      	movs	r1, r3
 8004924:	f7fd fda4 	bl	8002470 <setDateTime>
			setClockAlarm(hrtc);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	0018      	movs	r0, r3
 800492c:	f7fd fe0c 	bl	8002548 <setClockAlarm>
}
 8004930:	46c0      	nop			; (mov r8, r8)
 8004932:	46bd      	mov	sp, r7
 8004934:	b003      	add	sp, #12
 8004936:	bd90      	pop	{r4, r7, pc}
 8004938:	2000018c 	.word	0x2000018c
 800493c:	2000010c 	.word	0x2000010c
 8004940:	20000140 	.word	0x20000140
 8004944:	0800b338 	.word	0x0800b338
 8004948:	00002710 	.word	0x00002710
 800494c:	0800b350 	.word	0x0800b350

08004950 <updateTimerState>:
 *   button 2 changes value up
 *   button 3 changes value down
 *   button 4 changes field being set. changes between sec, min, hr. returns to default mode after
 *     cycling through fields once.
 */
void updateTimerState(TIM_HandleTypeDef *timerStopwatchTim, TIM_HandleTypeDef *motorTim) {
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
	// check which button is pressed -> perform action
	if (buttons.is2Pressed) {
 800495a:	4b93      	ldr	r3, [pc, #588]	; (8004ba8 <updateTimerState+0x258>)
 800495c:	785b      	ldrb	r3, [r3, #1]
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2b00      	cmp	r3, #0
 8004962:	d057      	beq.n	8004a14 <updateTimerState+0xc4>
		updateFace.timer = 1;
 8004964:	4b91      	ldr	r3, [pc, #580]	; (8004bac <updateTimerState+0x25c>)
 8004966:	2201      	movs	r2, #1
 8004968:	705a      	strb	r2, [r3, #1]
		if (timerVars.isBeingSet) {
 800496a:	4b91      	ldr	r3, [pc, #580]	; (8004bb0 <updateTimerState+0x260>)
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d035      	beq.n	80049de <updateTimerState+0x8e>
			// set field up
			switch (timerVars.fieldBeingSet) {
 8004972:	4b8f      	ldr	r3, [pc, #572]	; (8004bb0 <updateTimerState+0x260>)
 8004974:	785b      	ldrb	r3, [r3, #1]
 8004976:	2b02      	cmp	r3, #2
 8004978:	d013      	beq.n	80049a2 <updateTimerState+0x52>
 800497a:	2b03      	cmp	r3, #3
 800497c:	d020      	beq.n	80049c0 <updateTimerState+0x70>
 800497e:	2b01      	cmp	r3, #1
 8004980:	d000      	beq.n	8004984 <updateTimerState+0x34>
				case 1: timerVars.timeToSet->sec = (timerVars.timeToSet->sec+1) % 60; break;
				case 2: timerVars.timeToSet->min = (timerVars.timeToSet->min+1) % 60; break;
				case 3: timerVars.timeToSet->hr = (timerVars.timeToSet->hr+1) % 100; break;
				default: break;
 8004982:	e10d      	b.n	8004ba0 <updateTimerState+0x250>
				case 1: timerVars.timeToSet->sec = (timerVars.timeToSet->sec+1) % 60; break;
 8004984:	4b8a      	ldr	r3, [pc, #552]	; (8004bb0 <updateTimerState+0x260>)
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	789b      	ldrb	r3, [r3, #2]
 800498a:	3301      	adds	r3, #1
 800498c:	213c      	movs	r1, #60	; 0x3c
 800498e:	0018      	movs	r0, r3
 8004990:	f7fb fd32 	bl	80003f8 <__aeabi_idivmod>
 8004994:	000b      	movs	r3, r1
 8004996:	001a      	movs	r2, r3
 8004998:	4b85      	ldr	r3, [pc, #532]	; (8004bb0 <updateTimerState+0x260>)
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	b2d2      	uxtb	r2, r2
 800499e:	709a      	strb	r2, [r3, #2]
 80049a0:	e0fe      	b.n	8004ba0 <updateTimerState+0x250>
				case 2: timerVars.timeToSet->min = (timerVars.timeToSet->min+1) % 60; break;
 80049a2:	4b83      	ldr	r3, [pc, #524]	; (8004bb0 <updateTimerState+0x260>)
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	785b      	ldrb	r3, [r3, #1]
 80049a8:	3301      	adds	r3, #1
 80049aa:	213c      	movs	r1, #60	; 0x3c
 80049ac:	0018      	movs	r0, r3
 80049ae:	f7fb fd23 	bl	80003f8 <__aeabi_idivmod>
 80049b2:	000b      	movs	r3, r1
 80049b4:	001a      	movs	r2, r3
 80049b6:	4b7e      	ldr	r3, [pc, #504]	; (8004bb0 <updateTimerState+0x260>)
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	b2d2      	uxtb	r2, r2
 80049bc:	705a      	strb	r2, [r3, #1]
 80049be:	e0ef      	b.n	8004ba0 <updateTimerState+0x250>
				case 3: timerVars.timeToSet->hr = (timerVars.timeToSet->hr+1) % 100; break;
 80049c0:	4b7b      	ldr	r3, [pc, #492]	; (8004bb0 <updateTimerState+0x260>)
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	3301      	adds	r3, #1
 80049c8:	2164      	movs	r1, #100	; 0x64
 80049ca:	0018      	movs	r0, r3
 80049cc:	f7fb fd14 	bl	80003f8 <__aeabi_idivmod>
 80049d0:	000b      	movs	r3, r1
 80049d2:	001a      	movs	r2, r3
 80049d4:	4b76      	ldr	r3, [pc, #472]	; (8004bb0 <updateTimerState+0x260>)
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	b2d2      	uxtb	r2, r2
 80049da:	701a      	strb	r2, [r3, #0]
 80049dc:	e0e0      	b.n	8004ba0 <updateTimerState+0x250>
			}
		}
		else if (timerVars.isSet && isTimerRunning == 0 && timerCounter != 0) {
 80049de:	4b74      	ldr	r3, [pc, #464]	; (8004bb0 <updateTimerState+0x260>)
 80049e0:	789b      	ldrb	r3, [r3, #2]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d100      	bne.n	80049e8 <updateTimerState+0x98>
 80049e6:	e0db      	b.n	8004ba0 <updateTimerState+0x250>
 80049e8:	4b72      	ldr	r3, [pc, #456]	; (8004bb4 <updateTimerState+0x264>)
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d000      	beq.n	80049f4 <updateTimerState+0xa4>
 80049f2:	e0d5      	b.n	8004ba0 <updateTimerState+0x250>
 80049f4:	4b70      	ldr	r3, [pc, #448]	; (8004bb8 <updateTimerState+0x268>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d100      	bne.n	80049fe <updateTimerState+0xae>
 80049fc:	e0d0      	b.n	8004ba0 <updateTimerState+0x250>
			// start timer
			runTimer(timerStopwatchTim);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	0018      	movs	r0, r3
 8004a02:	f7ff fa71 	bl	8003ee8 <runTimer>
			isTimerRunning = 1;
 8004a06:	4b6b      	ldr	r3, [pc, #428]	; (8004bb4 <updateTimerState+0x264>)
 8004a08:	2201      	movs	r2, #1
 8004a0a:	701a      	strb	r2, [r3, #0]
			isTimerPaused = 0;
 8004a0c:	4b6b      	ldr	r3, [pc, #428]	; (8004bbc <updateTimerState+0x26c>)
 8004a0e:	2200      	movs	r2, #0
 8004a10:	701a      	strb	r2, [r3, #0]
				timerVars.isBeingSet = 0;
				timerVars.isSet = 0;
			}
		}
	}
}
 8004a12:	e0c5      	b.n	8004ba0 <updateTimerState+0x250>
	else if (buttons.is3Pressed) {
 8004a14:	4b64      	ldr	r3, [pc, #400]	; (8004ba8 <updateTimerState+0x258>)
 8004a16:	789b      	ldrb	r3, [r3, #2]
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d05d      	beq.n	8004ada <updateTimerState+0x18a>
		updateFace.timer = 1;
 8004a1e:	4b63      	ldr	r3, [pc, #396]	; (8004bac <updateTimerState+0x25c>)
 8004a20:	2201      	movs	r2, #1
 8004a22:	705a      	strb	r2, [r3, #1]
		if (timerVars.isBeingSet) {
 8004a24:	4b62      	ldr	r3, [pc, #392]	; (8004bb0 <updateTimerState+0x260>)
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d03b      	beq.n	8004aa4 <updateTimerState+0x154>
			switch (timerVars.fieldBeingSet) {
 8004a2c:	4b60      	ldr	r3, [pc, #384]	; (8004bb0 <updateTimerState+0x260>)
 8004a2e:	785b      	ldrb	r3, [r3, #1]
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d015      	beq.n	8004a60 <updateTimerState+0x110>
 8004a34:	2b03      	cmp	r3, #3
 8004a36:	d024      	beq.n	8004a82 <updateTimerState+0x132>
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d000      	beq.n	8004a3e <updateTimerState+0xee>
				default: break;
 8004a3c:	e0b0      	b.n	8004ba0 <updateTimerState+0x250>
					if (timerVars.timeToSet->sec == 0) timerVars.timeToSet->sec = 59;
 8004a3e:	4b5c      	ldr	r3, [pc, #368]	; (8004bb0 <updateTimerState+0x260>)
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	789b      	ldrb	r3, [r3, #2]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d104      	bne.n	8004a52 <updateTimerState+0x102>
 8004a48:	4b59      	ldr	r3, [pc, #356]	; (8004bb0 <updateTimerState+0x260>)
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	223b      	movs	r2, #59	; 0x3b
 8004a4e:	709a      	strb	r2, [r3, #2]
					break;
 8004a50:	e0a6      	b.n	8004ba0 <updateTimerState+0x250>
					else timerVars.timeToSet->sec--;
 8004a52:	4b57      	ldr	r3, [pc, #348]	; (8004bb0 <updateTimerState+0x260>)
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	789a      	ldrb	r2, [r3, #2]
 8004a58:	3a01      	subs	r2, #1
 8004a5a:	b2d2      	uxtb	r2, r2
 8004a5c:	709a      	strb	r2, [r3, #2]
					break;
 8004a5e:	e09f      	b.n	8004ba0 <updateTimerState+0x250>
					if (timerVars.timeToSet->min == 0) timerVars.timeToSet->min = 59;
 8004a60:	4b53      	ldr	r3, [pc, #332]	; (8004bb0 <updateTimerState+0x260>)
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	785b      	ldrb	r3, [r3, #1]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d104      	bne.n	8004a74 <updateTimerState+0x124>
 8004a6a:	4b51      	ldr	r3, [pc, #324]	; (8004bb0 <updateTimerState+0x260>)
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	223b      	movs	r2, #59	; 0x3b
 8004a70:	705a      	strb	r2, [r3, #1]
					break;
 8004a72:	e095      	b.n	8004ba0 <updateTimerState+0x250>
					else timerVars.timeToSet->min--;
 8004a74:	4b4e      	ldr	r3, [pc, #312]	; (8004bb0 <updateTimerState+0x260>)
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	785a      	ldrb	r2, [r3, #1]
 8004a7a:	3a01      	subs	r2, #1
 8004a7c:	b2d2      	uxtb	r2, r2
 8004a7e:	705a      	strb	r2, [r3, #1]
					break;
 8004a80:	e08e      	b.n	8004ba0 <updateTimerState+0x250>
					if (timerVars.timeToSet->hr == 0) timerVars.timeToSet->hr = 99;		// no limit on hour, since we're not using day
 8004a82:	4b4b      	ldr	r3, [pc, #300]	; (8004bb0 <updateTimerState+0x260>)
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d104      	bne.n	8004a96 <updateTimerState+0x146>
 8004a8c:	4b48      	ldr	r3, [pc, #288]	; (8004bb0 <updateTimerState+0x260>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	2263      	movs	r2, #99	; 0x63
 8004a92:	701a      	strb	r2, [r3, #0]
					break;
 8004a94:	e084      	b.n	8004ba0 <updateTimerState+0x250>
					else timerVars.timeToSet->hr--;
 8004a96:	4b46      	ldr	r3, [pc, #280]	; (8004bb0 <updateTimerState+0x260>)
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	781a      	ldrb	r2, [r3, #0]
 8004a9c:	3a01      	subs	r2, #1
 8004a9e:	b2d2      	uxtb	r2, r2
 8004aa0:	701a      	strb	r2, [r3, #0]
					break;
 8004aa2:	e07d      	b.n	8004ba0 <updateTimerState+0x250>
		else if (timerVars.isSet && isTimerRunning && timerCounter != 0) {
 8004aa4:	4b42      	ldr	r3, [pc, #264]	; (8004bb0 <updateTimerState+0x260>)
 8004aa6:	789b      	ldrb	r3, [r3, #2]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d100      	bne.n	8004aae <updateTimerState+0x15e>
 8004aac:	e078      	b.n	8004ba0 <updateTimerState+0x250>
 8004aae:	4b41      	ldr	r3, [pc, #260]	; (8004bb4 <updateTimerState+0x264>)
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d100      	bne.n	8004aba <updateTimerState+0x16a>
 8004ab8:	e072      	b.n	8004ba0 <updateTimerState+0x250>
 8004aba:	4b3f      	ldr	r3, [pc, #252]	; (8004bb8 <updateTimerState+0x268>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d100      	bne.n	8004ac4 <updateTimerState+0x174>
 8004ac2:	e06d      	b.n	8004ba0 <updateTimerState+0x250>
			pauseTimer(timerStopwatchTim);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	0018      	movs	r0, r3
 8004ac8:	f7ff fa6a 	bl	8003fa0 <pauseTimer>
			isTimerRunning = 0;
 8004acc:	4b39      	ldr	r3, [pc, #228]	; (8004bb4 <updateTimerState+0x264>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	701a      	strb	r2, [r3, #0]
			isTimerPaused = 1;
 8004ad2:	4b3a      	ldr	r3, [pc, #232]	; (8004bbc <updateTimerState+0x26c>)
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	701a      	strb	r2, [r3, #0]
}
 8004ad8:	e062      	b.n	8004ba0 <updateTimerState+0x250>
	else if (buttons.is4Pressed) {
 8004ada:	4b33      	ldr	r3, [pc, #204]	; (8004ba8 <updateTimerState+0x258>)
 8004adc:	78db      	ldrb	r3, [r3, #3]
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d05d      	beq.n	8004ba0 <updateTimerState+0x250>
		updateFace.timer = 1;
 8004ae4:	4b31      	ldr	r3, [pc, #196]	; (8004bac <updateTimerState+0x25c>)
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	705a      	strb	r2, [r3, #1]
		if (timerVars.isSet) {
 8004aea:	4b31      	ldr	r3, [pc, #196]	; (8004bb0 <updateTimerState+0x260>)
 8004aec:	789b      	ldrb	r3, [r3, #2]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00d      	beq.n	8004b0e <updateTimerState+0x1be>
			stopTimer(timerStopwatchTim);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	0018      	movs	r0, r3
 8004af6:	f7ff fa67 	bl	8003fc8 <stopTimer>
			timerVars.isSet = 0;
 8004afa:	4b2d      	ldr	r3, [pc, #180]	; (8004bb0 <updateTimerState+0x260>)
 8004afc:	2200      	movs	r2, #0
 8004afe:	709a      	strb	r2, [r3, #2]
			isTimerRunning = 0;
 8004b00:	4b2c      	ldr	r3, [pc, #176]	; (8004bb4 <updateTimerState+0x264>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	701a      	strb	r2, [r3, #0]
			isTimerPaused = 0;
 8004b06:	4b2d      	ldr	r3, [pc, #180]	; (8004bbc <updateTimerState+0x26c>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	701a      	strb	r2, [r3, #0]
}
 8004b0c:	e048      	b.n	8004ba0 <updateTimerState+0x250>
			timerVars.fieldBeingSet = (timerVars.fieldBeingSet + 1) % (NUM_TIMERFIELDS + 1);
 8004b0e:	4b28      	ldr	r3, [pc, #160]	; (8004bb0 <updateTimerState+0x260>)
 8004b10:	785b      	ldrb	r3, [r3, #1]
 8004b12:	3301      	adds	r3, #1
 8004b14:	4a2a      	ldr	r2, [pc, #168]	; (8004bc0 <updateTimerState+0x270>)
 8004b16:	4013      	ands	r3, r2
 8004b18:	d504      	bpl.n	8004b24 <updateTimerState+0x1d4>
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	2204      	movs	r2, #4
 8004b1e:	4252      	negs	r2, r2
 8004b20:	4313      	orrs	r3, r2
 8004b22:	3301      	adds	r3, #1
 8004b24:	b2da      	uxtb	r2, r3
 8004b26:	4b22      	ldr	r3, [pc, #136]	; (8004bb0 <updateTimerState+0x260>)
 8004b28:	705a      	strb	r2, [r3, #1]
			if (timerVars.fieldBeingSet != 0) {
 8004b2a:	4b21      	ldr	r3, [pc, #132]	; (8004bb0 <updateTimerState+0x260>)
 8004b2c:	785b      	ldrb	r3, [r3, #1]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d016      	beq.n	8004b60 <updateTimerState+0x210>
				timerVars.isBeingSet = 1;
 8004b32:	4b1f      	ldr	r3, [pc, #124]	; (8004bb0 <updateTimerState+0x260>)
 8004b34:	2201      	movs	r2, #1
 8004b36:	701a      	strb	r2, [r3, #0]
				timerVars.isSet = 0;
 8004b38:	4b1d      	ldr	r3, [pc, #116]	; (8004bb0 <updateTimerState+0x260>)
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	709a      	strb	r2, [r3, #2]
				if (timerVars.fieldBeingSet == 1) {
 8004b3e:	4b1c      	ldr	r3, [pc, #112]	; (8004bb0 <updateTimerState+0x260>)
 8004b40:	785b      	ldrb	r3, [r3, #1]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d12c      	bne.n	8004ba0 <updateTimerState+0x250>
					timerVars.timeToSet->sec = 0;
 8004b46:	4b1a      	ldr	r3, [pc, #104]	; (8004bb0 <updateTimerState+0x260>)
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	709a      	strb	r2, [r3, #2]
					timerVars.timeToSet->min = 0;
 8004b4e:	4b18      	ldr	r3, [pc, #96]	; (8004bb0 <updateTimerState+0x260>)
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	705a      	strb	r2, [r3, #1]
					timerVars.timeToSet->hr = 0;
 8004b56:	4b16      	ldr	r3, [pc, #88]	; (8004bb0 <updateTimerState+0x260>)
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	701a      	strb	r2, [r3, #0]
}
 8004b5e:	e01f      	b.n	8004ba0 <updateTimerState+0x250>
			else if (timeToSeconds(timerVars.timeToSet) != 0) {
 8004b60:	4b13      	ldr	r3, [pc, #76]	; (8004bb0 <updateTimerState+0x260>)
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	0018      	movs	r0, r3
 8004b66:	f7fd ff53 	bl	8002a10 <timeToSeconds>
 8004b6a:	1e03      	subs	r3, r0, #0
 8004b6c:	d011      	beq.n	8004b92 <updateTimerState+0x242>
				timerVars.isBeingSet = 0;
 8004b6e:	4b10      	ldr	r3, [pc, #64]	; (8004bb0 <updateTimerState+0x260>)
 8004b70:	2200      	movs	r2, #0
 8004b72:	701a      	strb	r2, [r3, #0]
				timerVars.isSet = 1;
 8004b74:	4b0e      	ldr	r3, [pc, #56]	; (8004bb0 <updateTimerState+0x260>)
 8004b76:	2201      	movs	r2, #1
 8004b78:	709a      	strb	r2, [r3, #2]
				isTimerDone = 0;
 8004b7a:	4b12      	ldr	r3, [pc, #72]	; (8004bc4 <updateTimerState+0x274>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	701a      	strb	r2, [r3, #0]
				timerCounter = timeToSeconds(timerVars.timeToSet);
 8004b80:	4b0b      	ldr	r3, [pc, #44]	; (8004bb0 <updateTimerState+0x260>)
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	0018      	movs	r0, r3
 8004b86:	f7fd ff43 	bl	8002a10 <timeToSeconds>
 8004b8a:	0002      	movs	r2, r0
 8004b8c:	4b0a      	ldr	r3, [pc, #40]	; (8004bb8 <updateTimerState+0x268>)
 8004b8e:	601a      	str	r2, [r3, #0]
}
 8004b90:	e006      	b.n	8004ba0 <updateTimerState+0x250>
				timerVars.isBeingSet = 0;
 8004b92:	4b07      	ldr	r3, [pc, #28]	; (8004bb0 <updateTimerState+0x260>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	701a      	strb	r2, [r3, #0]
				timerVars.isSet = 0;
 8004b98:	4b05      	ldr	r3, [pc, #20]	; (8004bb0 <updateTimerState+0x260>)
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	709a      	strb	r2, [r3, #2]
}
 8004b9e:	e7ff      	b.n	8004ba0 <updateTimerState+0x250>
 8004ba0:	46c0      	nop			; (mov r8, r8)
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	b002      	add	sp, #8
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	2000018c 	.word	0x2000018c
 8004bac:	20000140 	.word	0x20000140
 8004bb0:	20000118 	.word	0x20000118
 8004bb4:	20000190 	.word	0x20000190
 8004bb8:	20000148 	.word	0x20000148
 8004bbc:	20000192 	.word	0x20000192
 8004bc0:	80000003 	.word	0x80000003
 8004bc4:	2000014c 	.word	0x2000014c

08004bc8 <updateAlarmState>:
 *   button 2 changes value up
 *   button 3 changes value down
 *   button 4 changes field being set. changes between sec, min, hr. returns to default mode after
 *     cycling through fields once.
 */
void updateAlarmState(RTC_HandleTypeDef *hrtc, TIM_HandleTypeDef *motorTim) {
 8004bc8:	b5b0      	push	{r4, r5, r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
	// check button pressed -> perform action
	if (buttons.is2Pressed && alarmVars.isBeingSet) {
 8004bd2:	4b90      	ldr	r3, [pc, #576]	; (8004e14 <updateAlarmState+0x24c>)
 8004bd4:	785b      	ldrb	r3, [r3, #1]
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d04f      	beq.n	8004c7c <updateAlarmState+0xb4>
 8004bdc:	4b8e      	ldr	r3, [pc, #568]	; (8004e18 <updateAlarmState+0x250>)
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d04b      	beq.n	8004c7c <updateAlarmState+0xb4>
		updateFace.alarm = 1;
 8004be4:	4b8d      	ldr	r3, [pc, #564]	; (8004e1c <updateAlarmState+0x254>)
 8004be6:	2201      	movs	r2, #1
 8004be8:	709a      	strb	r2, [r3, #2]

		// change fields up
		switch (alarmVars.fieldBeingSet) {
 8004bea:	4b8b      	ldr	r3, [pc, #556]	; (8004e18 <updateAlarmState+0x250>)
 8004bec:	785b      	ldrb	r3, [r3, #1]
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d017      	beq.n	8004c22 <updateAlarmState+0x5a>
 8004bf2:	dc02      	bgt.n	8004bfa <updateAlarmState+0x32>
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d005      	beq.n	8004c04 <updateAlarmState+0x3c>
			case 1: alarmVars.alarmToSet->sec = (alarmVars.alarmToSet->sec + 1) % 60; break;
			case 2: alarmVars.alarmToSet->min = (alarmVars.alarmToSet->min + 1) % 60; break;
			case 3: alarmVars.alarmToSet->hr = (alarmVars.alarmToSet->hr + 1) % 24; break;
			case 4: alarmVars.alarmToSet->weekday = (alarmVars.alarmToSet->weekday) % 7 + 1; break;
			default: break;
 8004bf8:	e041      	b.n	8004c7e <updateAlarmState+0xb6>
		switch (alarmVars.fieldBeingSet) {
 8004bfa:	2b03      	cmp	r3, #3
 8004bfc:	d020      	beq.n	8004c40 <updateAlarmState+0x78>
 8004bfe:	2b04      	cmp	r3, #4
 8004c00:	d02d      	beq.n	8004c5e <updateAlarmState+0x96>
			default: break;
 8004c02:	e03c      	b.n	8004c7e <updateAlarmState+0xb6>
			case 1: alarmVars.alarmToSet->sec = (alarmVars.alarmToSet->sec + 1) % 60; break;
 8004c04:	4b84      	ldr	r3, [pc, #528]	; (8004e18 <updateAlarmState+0x250>)
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	789b      	ldrb	r3, [r3, #2]
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	213c      	movs	r1, #60	; 0x3c
 8004c0e:	0018      	movs	r0, r3
 8004c10:	f7fb fbf2 	bl	80003f8 <__aeabi_idivmod>
 8004c14:	000b      	movs	r3, r1
 8004c16:	001a      	movs	r2, r3
 8004c18:	4b7f      	ldr	r3, [pc, #508]	; (8004e18 <updateAlarmState+0x250>)
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	b2d2      	uxtb	r2, r2
 8004c1e:	709a      	strb	r2, [r3, #2]
 8004c20:	e02d      	b.n	8004c7e <updateAlarmState+0xb6>
			case 2: alarmVars.alarmToSet->min = (alarmVars.alarmToSet->min + 1) % 60; break;
 8004c22:	4b7d      	ldr	r3, [pc, #500]	; (8004e18 <updateAlarmState+0x250>)
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	785b      	ldrb	r3, [r3, #1]
 8004c28:	3301      	adds	r3, #1
 8004c2a:	213c      	movs	r1, #60	; 0x3c
 8004c2c:	0018      	movs	r0, r3
 8004c2e:	f7fb fbe3 	bl	80003f8 <__aeabi_idivmod>
 8004c32:	000b      	movs	r3, r1
 8004c34:	001a      	movs	r2, r3
 8004c36:	4b78      	ldr	r3, [pc, #480]	; (8004e18 <updateAlarmState+0x250>)
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	b2d2      	uxtb	r2, r2
 8004c3c:	705a      	strb	r2, [r3, #1]
 8004c3e:	e01e      	b.n	8004c7e <updateAlarmState+0xb6>
			case 3: alarmVars.alarmToSet->hr = (alarmVars.alarmToSet->hr + 1) % 24; break;
 8004c40:	4b75      	ldr	r3, [pc, #468]	; (8004e18 <updateAlarmState+0x250>)
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	3301      	adds	r3, #1
 8004c48:	2118      	movs	r1, #24
 8004c4a:	0018      	movs	r0, r3
 8004c4c:	f7fb fbd4 	bl	80003f8 <__aeabi_idivmod>
 8004c50:	000b      	movs	r3, r1
 8004c52:	001a      	movs	r2, r3
 8004c54:	4b70      	ldr	r3, [pc, #448]	; (8004e18 <updateAlarmState+0x250>)
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	b2d2      	uxtb	r2, r2
 8004c5a:	701a      	strb	r2, [r3, #0]
 8004c5c:	e00f      	b.n	8004c7e <updateAlarmState+0xb6>
			case 4: alarmVars.alarmToSet->weekday = (alarmVars.alarmToSet->weekday) % 7 + 1; break;
 8004c5e:	4b6e      	ldr	r3, [pc, #440]	; (8004e18 <updateAlarmState+0x250>)
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	78db      	ldrb	r3, [r3, #3]
 8004c64:	2107      	movs	r1, #7
 8004c66:	0018      	movs	r0, r3
 8004c68:	f7fb fadc 	bl	8000224 <__aeabi_uidivmod>
 8004c6c:	000b      	movs	r3, r1
 8004c6e:	b2da      	uxtb	r2, r3
 8004c70:	4b69      	ldr	r3, [pc, #420]	; (8004e18 <updateAlarmState+0x250>)
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	3201      	adds	r2, #1
 8004c76:	b2d2      	uxtb	r2, r2
 8004c78:	70da      	strb	r2, [r3, #3]
 8004c7a:	e000      	b.n	8004c7e <updateAlarmState+0xb6>
		}
	}
 8004c7c:	46c0      	nop			; (mov r8, r8)
	if (buttons.is3Pressed && alarmVars.isBeingSet) {
 8004c7e:	4b65      	ldr	r3, [pc, #404]	; (8004e14 <updateAlarmState+0x24c>)
 8004c80:	789b      	ldrb	r3, [r3, #2]
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d057      	beq.n	8004d38 <updateAlarmState+0x170>
 8004c88:	4b63      	ldr	r3, [pc, #396]	; (8004e18 <updateAlarmState+0x250>)
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d053      	beq.n	8004d38 <updateAlarmState+0x170>
		updateFace.alarm = 1;
 8004c90:	4b62      	ldr	r3, [pc, #392]	; (8004e1c <updateAlarmState+0x254>)
 8004c92:	2201      	movs	r2, #1
 8004c94:	709a      	strb	r2, [r3, #2]

		// change fields down
		switch (alarmVars.fieldBeingSet) {
 8004c96:	4b60      	ldr	r3, [pc, #384]	; (8004e18 <updateAlarmState+0x250>)
 8004c98:	785b      	ldrb	r3, [r3, #1]
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d019      	beq.n	8004cd2 <updateAlarmState+0x10a>
 8004c9e:	dc02      	bgt.n	8004ca6 <updateAlarmState+0xde>
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d005      	beq.n	8004cb0 <updateAlarmState+0xe8>
				break;
			case 4:
				if (alarmVars.alarmToSet->weekday == RTC_WEEKDAY_MONDAY) alarmVars.alarmToSet->weekday = RTC_WEEKDAY_SUNDAY;
				else alarmVars.alarmToSet->weekday--;
				break;
			default: break;
 8004ca4:	e049      	b.n	8004d3a <updateAlarmState+0x172>
		switch (alarmVars.fieldBeingSet) {
 8004ca6:	2b03      	cmp	r3, #3
 8004ca8:	d024      	beq.n	8004cf4 <updateAlarmState+0x12c>
 8004caa:	2b04      	cmp	r3, #4
 8004cac:	d033      	beq.n	8004d16 <updateAlarmState+0x14e>
			default: break;
 8004cae:	e044      	b.n	8004d3a <updateAlarmState+0x172>
				if (alarmVars.alarmToSet->sec == 0) alarmVars.alarmToSet->sec = 59;
 8004cb0:	4b59      	ldr	r3, [pc, #356]	; (8004e18 <updateAlarmState+0x250>)
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	789b      	ldrb	r3, [r3, #2]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d104      	bne.n	8004cc4 <updateAlarmState+0xfc>
 8004cba:	4b57      	ldr	r3, [pc, #348]	; (8004e18 <updateAlarmState+0x250>)
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	223b      	movs	r2, #59	; 0x3b
 8004cc0:	709a      	strb	r2, [r3, #2]
				break;
 8004cc2:	e03a      	b.n	8004d3a <updateAlarmState+0x172>
				else alarmVars.alarmToSet->sec--;
 8004cc4:	4b54      	ldr	r3, [pc, #336]	; (8004e18 <updateAlarmState+0x250>)
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	789a      	ldrb	r2, [r3, #2]
 8004cca:	3a01      	subs	r2, #1
 8004ccc:	b2d2      	uxtb	r2, r2
 8004cce:	709a      	strb	r2, [r3, #2]
				break;
 8004cd0:	e033      	b.n	8004d3a <updateAlarmState+0x172>
				if (alarmVars.alarmToSet->min == 0) alarmVars.alarmToSet->min = 59;
 8004cd2:	4b51      	ldr	r3, [pc, #324]	; (8004e18 <updateAlarmState+0x250>)
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	785b      	ldrb	r3, [r3, #1]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d104      	bne.n	8004ce6 <updateAlarmState+0x11e>
 8004cdc:	4b4e      	ldr	r3, [pc, #312]	; (8004e18 <updateAlarmState+0x250>)
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	223b      	movs	r2, #59	; 0x3b
 8004ce2:	705a      	strb	r2, [r3, #1]
				break;
 8004ce4:	e029      	b.n	8004d3a <updateAlarmState+0x172>
				else alarmVars.alarmToSet->min--;
 8004ce6:	4b4c      	ldr	r3, [pc, #304]	; (8004e18 <updateAlarmState+0x250>)
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	785a      	ldrb	r2, [r3, #1]
 8004cec:	3a01      	subs	r2, #1
 8004cee:	b2d2      	uxtb	r2, r2
 8004cf0:	705a      	strb	r2, [r3, #1]
				break;
 8004cf2:	e022      	b.n	8004d3a <updateAlarmState+0x172>
				if (alarmVars.alarmToSet->hr == 0) alarmVars.alarmToSet->hr = 23;
 8004cf4:	4b48      	ldr	r3, [pc, #288]	; (8004e18 <updateAlarmState+0x250>)
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d104      	bne.n	8004d08 <updateAlarmState+0x140>
 8004cfe:	4b46      	ldr	r3, [pc, #280]	; (8004e18 <updateAlarmState+0x250>)
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	2217      	movs	r2, #23
 8004d04:	701a      	strb	r2, [r3, #0]
				break;
 8004d06:	e018      	b.n	8004d3a <updateAlarmState+0x172>
				else alarmVars.alarmToSet->hr--;
 8004d08:	4b43      	ldr	r3, [pc, #268]	; (8004e18 <updateAlarmState+0x250>)
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	781a      	ldrb	r2, [r3, #0]
 8004d0e:	3a01      	subs	r2, #1
 8004d10:	b2d2      	uxtb	r2, r2
 8004d12:	701a      	strb	r2, [r3, #0]
				break;
 8004d14:	e011      	b.n	8004d3a <updateAlarmState+0x172>
				if (alarmVars.alarmToSet->weekday == RTC_WEEKDAY_MONDAY) alarmVars.alarmToSet->weekday = RTC_WEEKDAY_SUNDAY;
 8004d16:	4b40      	ldr	r3, [pc, #256]	; (8004e18 <updateAlarmState+0x250>)
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	78db      	ldrb	r3, [r3, #3]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d104      	bne.n	8004d2a <updateAlarmState+0x162>
 8004d20:	4b3d      	ldr	r3, [pc, #244]	; (8004e18 <updateAlarmState+0x250>)
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	2207      	movs	r2, #7
 8004d26:	70da      	strb	r2, [r3, #3]
				break;
 8004d28:	e007      	b.n	8004d3a <updateAlarmState+0x172>
				else alarmVars.alarmToSet->weekday--;
 8004d2a:	4b3b      	ldr	r3, [pc, #236]	; (8004e18 <updateAlarmState+0x250>)
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	78da      	ldrb	r2, [r3, #3]
 8004d30:	3a01      	subs	r2, #1
 8004d32:	b2d2      	uxtb	r2, r2
 8004d34:	70da      	strb	r2, [r3, #3]
				break;
 8004d36:	e000      	b.n	8004d3a <updateAlarmState+0x172>
		}
	}
 8004d38:	46c0      	nop			; (mov r8, r8)
	if (buttons.is4Pressed) {
 8004d3a:	4b36      	ldr	r3, [pc, #216]	; (8004e14 <updateAlarmState+0x24c>)
 8004d3c:	78db      	ldrb	r3, [r3, #3]
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d062      	beq.n	8004e0a <updateAlarmState+0x242>
		updateFace.alarm = 1;
 8004d44:	4b35      	ldr	r3, [pc, #212]	; (8004e1c <updateAlarmState+0x254>)
 8004d46:	2201      	movs	r2, #1
 8004d48:	709a      	strb	r2, [r3, #2]

		if (alarmVars.isSet == 0) {
 8004d4a:	4b33      	ldr	r3, [pc, #204]	; (8004e18 <updateAlarmState+0x250>)
 8004d4c:	789b      	ldrb	r3, [r3, #2]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d151      	bne.n	8004df6 <updateAlarmState+0x22e>
			// toggle between fields
			alarmVars.fieldBeingSet = (alarmVars.fieldBeingSet + 1) % (NUM_ALARMFIELDS + 1);
 8004d52:	4b31      	ldr	r3, [pc, #196]	; (8004e18 <updateAlarmState+0x250>)
 8004d54:	785b      	ldrb	r3, [r3, #1]
 8004d56:	3301      	adds	r3, #1
 8004d58:	2105      	movs	r1, #5
 8004d5a:	0018      	movs	r0, r3
 8004d5c:	f7fb fb4c 	bl	80003f8 <__aeabi_idivmod>
 8004d60:	000b      	movs	r3, r1
 8004d62:	b2da      	uxtb	r2, r3
 8004d64:	4b2c      	ldr	r3, [pc, #176]	; (8004e18 <updateAlarmState+0x250>)
 8004d66:	705a      	strb	r2, [r3, #1]
			if (alarmVars.fieldBeingSet != 0) {
 8004d68:	4b2b      	ldr	r3, [pc, #172]	; (8004e18 <updateAlarmState+0x250>)
 8004d6a:	785b      	ldrb	r3, [r3, #1]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d034      	beq.n	8004dda <updateAlarmState+0x212>
				alarmVars.isBeingSet = 1;
 8004d70:	4b29      	ldr	r3, [pc, #164]	; (8004e18 <updateAlarmState+0x250>)
 8004d72:	2201      	movs	r2, #1
 8004d74:	701a      	strb	r2, [r3, #0]
				if (alarmVars.fieldBeingSet == 1) {
 8004d76:	4b28      	ldr	r3, [pc, #160]	; (8004e18 <updateAlarmState+0x250>)
 8004d78:	785b      	ldrb	r3, [r3, #1]
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d145      	bne.n	8004e0a <updateAlarmState+0x242>
					struct dates d = {0};
 8004d7e:	2510      	movs	r5, #16
 8004d80:	197b      	adds	r3, r7, r5
 8004d82:	0018      	movs	r0, r3
 8004d84:	2306      	movs	r3, #6
 8004d86:	001a      	movs	r2, r3
 8004d88:	2100      	movs	r1, #0
 8004d8a:	f005 fa68 	bl	800a25e <memset>
					struct times t = {0};
 8004d8e:	240c      	movs	r4, #12
 8004d90:	193b      	adds	r3, r7, r4
 8004d92:	0018      	movs	r0, r3
 8004d94:	2303      	movs	r3, #3
 8004d96:	001a      	movs	r2, r3
 8004d98:	2100      	movs	r1, #0
 8004d9a:	f005 fa60 	bl	800a25e <memset>
					getDateTime(&d, &t, hrtc);
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	0021      	movs	r1, r4
 8004da2:	000c      	movs	r4, r1
 8004da4:	1879      	adds	r1, r7, r1
 8004da6:	197b      	adds	r3, r7, r5
 8004da8:	0018      	movs	r0, r3
 8004daa:	f7fd fd91 	bl	80028d0 <getDateTime>
					alarmVars.alarmToSet->sec = t.sec;
 8004dae:	4b1a      	ldr	r3, [pc, #104]	; (8004e18 <updateAlarmState+0x250>)
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	0021      	movs	r1, r4
 8004db4:	187a      	adds	r2, r7, r1
 8004db6:	7892      	ldrb	r2, [r2, #2]
 8004db8:	709a      	strb	r2, [r3, #2]
					alarmVars.alarmToSet->min = t.min;
 8004dba:	4b17      	ldr	r3, [pc, #92]	; (8004e18 <updateAlarmState+0x250>)
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	187a      	adds	r2, r7, r1
 8004dc0:	7852      	ldrb	r2, [r2, #1]
 8004dc2:	705a      	strb	r2, [r3, #1]
					alarmVars.alarmToSet->hr = t.hr;
 8004dc4:	4b14      	ldr	r3, [pc, #80]	; (8004e18 <updateAlarmState+0x250>)
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	187a      	adds	r2, r7, r1
 8004dca:	7812      	ldrb	r2, [r2, #0]
 8004dcc:	701a      	strb	r2, [r3, #0]
					alarmVars.alarmToSet->weekday = d.weekday;
 8004dce:	4b12      	ldr	r3, [pc, #72]	; (8004e18 <updateAlarmState+0x250>)
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	197a      	adds	r2, r7, r5
 8004dd4:	7912      	ldrb	r2, [r2, #4]
 8004dd6:	70da      	strb	r2, [r3, #3]
			// stop and clear alarm hw
			alarmVars.isSet = 0;
			HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_A);
		}
	}
}
 8004dd8:	e017      	b.n	8004e0a <updateAlarmState+0x242>
				alarmVars.isBeingSet = 0;
 8004dda:	4b0f      	ldr	r3, [pc, #60]	; (8004e18 <updateAlarmState+0x250>)
 8004ddc:	2200      	movs	r2, #0
 8004dde:	701a      	strb	r2, [r3, #0]
				alarmVars.isSet = 1;
 8004de0:	4b0d      	ldr	r3, [pc, #52]	; (8004e18 <updateAlarmState+0x250>)
 8004de2:	2201      	movs	r2, #1
 8004de4:	709a      	strb	r2, [r3, #2]
				setAlarm(alarmVars.alarmToSet, hrtc);
 8004de6:	4b0c      	ldr	r3, [pc, #48]	; (8004e18 <updateAlarmState+0x250>)
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	0011      	movs	r1, r2
 8004dee:	0018      	movs	r0, r3
 8004df0:	f7fd fb54 	bl	800249c <setAlarm>
}
 8004df4:	e009      	b.n	8004e0a <updateAlarmState+0x242>
			alarmVars.isSet = 0;
 8004df6:	4b08      	ldr	r3, [pc, #32]	; (8004e18 <updateAlarmState+0x250>)
 8004df8:	2200      	movs	r2, #0
 8004dfa:	709a      	strb	r2, [r3, #2]
			HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_A);
 8004dfc:	2380      	movs	r3, #128	; 0x80
 8004dfe:	005a      	lsls	r2, r3, #1
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	0011      	movs	r1, r2
 8004e04:	0018      	movs	r0, r3
 8004e06:	f003 fb59 	bl	80084bc <HAL_RTC_DeactivateAlarm>
}
 8004e0a:	46c0      	nop			; (mov r8, r8)
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	b006      	add	sp, #24
 8004e10:	bdb0      	pop	{r4, r5, r7, pc}
 8004e12:	46c0      	nop			; (mov r8, r8)
 8004e14:	2000018c 	.word	0x2000018c
 8004e18:	20000120 	.word	0x20000120
 8004e1c:	20000140 	.word	0x20000140

08004e20 <updateStopwatchState>:
 * in not running mode:
 *   button 2 starts stopwatch and moves to running mode
 *   button 3 captures stopwatch for lap
 *   button 4 clears stopwatch and returns to default mode
 */
void updateStopwatchState(TIM_HandleTypeDef *timerStopwatchTim) {
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
	// start/stop
	if (buttons.is2Pressed) {
 8004e28:	4b28      	ldr	r3, [pc, #160]	; (8004ecc <updateStopwatchState+0xac>)
 8004e2a:	785b      	ldrb	r3, [r3, #1]
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d01c      	beq.n	8004e6c <updateStopwatchState+0x4c>
		updateFace.stopwatch = 1;
 8004e32:	4b27      	ldr	r3, [pc, #156]	; (8004ed0 <updateStopwatchState+0xb0>)
 8004e34:	2201      	movs	r2, #1
 8004e36:	70da      	strb	r2, [r3, #3]

		if (isStopwatchRunning == 0) {
 8004e38:	4b26      	ldr	r3, [pc, #152]	; (8004ed4 <updateStopwatchState+0xb4>)
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d10a      	bne.n	8004e58 <updateStopwatchState+0x38>
			runStopwatch(timerStopwatchTim);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	0018      	movs	r0, r3
 8004e46:	f7ff f8d7 	bl	8003ff8 <runStopwatch>
			isStopwatchRunning = 1;
 8004e4a:	4b22      	ldr	r3, [pc, #136]	; (8004ed4 <updateStopwatchState+0xb4>)
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	701a      	strb	r2, [r3, #0]
			isStopwatchPaused = 0;
 8004e50:	4b21      	ldr	r3, [pc, #132]	; (8004ed8 <updateStopwatchState+0xb8>)
 8004e52:	2200      	movs	r2, #0
 8004e54:	701a      	strb	r2, [r3, #0]
 8004e56:	e009      	b.n	8004e6c <updateStopwatchState+0x4c>
		}
		else {
			pauseStopwatch(timerStopwatchTim);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	0018      	movs	r0, r3
 8004e5c:	f7ff f932 	bl	80040c4 <pauseStopwatch>
			isStopwatchRunning = 0;
 8004e60:	4b1c      	ldr	r3, [pc, #112]	; (8004ed4 <updateStopwatchState+0xb4>)
 8004e62:	2200      	movs	r2, #0
 8004e64:	701a      	strb	r2, [r3, #0]
			isStopwatchPaused = 1;
 8004e66:	4b1c      	ldr	r3, [pc, #112]	; (8004ed8 <updateStopwatchState+0xb8>)
 8004e68:	2201      	movs	r2, #1
 8004e6a:	701a      	strb	r2, [r3, #0]
		}
	}
	if (buttons.is3Pressed && stopwatchCounter != 0) {
 8004e6c:	4b17      	ldr	r3, [pc, #92]	; (8004ecc <updateStopwatchState+0xac>)
 8004e6e:	789b      	ldrb	r3, [r3, #2]
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00e      	beq.n	8004e94 <updateStopwatchState+0x74>
 8004e76:	4b19      	ldr	r3, [pc, #100]	; (8004edc <updateStopwatchState+0xbc>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00a      	beq.n	8004e94 <updateStopwatchState+0x74>
		updateFace.stopwatch = 1;
 8004e7e:	4b14      	ldr	r3, [pc, #80]	; (8004ed0 <updateStopwatchState+0xb0>)
 8004e80:	2201      	movs	r2, #1
 8004e82:	70da      	strb	r2, [r3, #3]

		// pull data and set lap
		stopwatchVars.lapPrev = stopwatchVars.lapCurrent;
 8004e84:	4b16      	ldr	r3, [pc, #88]	; (8004ee0 <updateStopwatchState+0xc0>)
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	4b15      	ldr	r3, [pc, #84]	; (8004ee0 <updateStopwatchState+0xc0>)
 8004e8a:	601a      	str	r2, [r3, #0]
		stopwatchVars.lapCurrent = stopwatchCounter;
 8004e8c:	4b13      	ldr	r3, [pc, #76]	; (8004edc <updateStopwatchState+0xbc>)
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	4b13      	ldr	r3, [pc, #76]	; (8004ee0 <updateStopwatchState+0xc0>)
 8004e92:	605a      	str	r2, [r3, #4]
	}
	if (buttons.is4Pressed) {
 8004e94:	4b0d      	ldr	r3, [pc, #52]	; (8004ecc <updateStopwatchState+0xac>)
 8004e96:	78db      	ldrb	r3, [r3, #3]
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d012      	beq.n	8004ec4 <updateStopwatchState+0xa4>
		updateFace.stopwatch = 1;
 8004e9e:	4b0c      	ldr	r3, [pc, #48]	; (8004ed0 <updateStopwatchState+0xb0>)
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	70da      	strb	r2, [r3, #3]

		// clear stopwatch hw
		clearStopwatch(timerStopwatchTim);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	0018      	movs	r0, r3
 8004ea8:	f7ff f920 	bl	80040ec <clearStopwatch>
		stopwatchVars.lapCurrent = 0;
 8004eac:	4b0c      	ldr	r3, [pc, #48]	; (8004ee0 <updateStopwatchState+0xc0>)
 8004eae:	2200      	movs	r2, #0
 8004eb0:	605a      	str	r2, [r3, #4]
		stopwatchVars.lapPrev = 0;
 8004eb2:	4b0b      	ldr	r3, [pc, #44]	; (8004ee0 <updateStopwatchState+0xc0>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	601a      	str	r2, [r3, #0]
		isStopwatchRunning = 0;
 8004eb8:	4b06      	ldr	r3, [pc, #24]	; (8004ed4 <updateStopwatchState+0xb4>)
 8004eba:	2200      	movs	r2, #0
 8004ebc:	701a      	strb	r2, [r3, #0]
		isStopwatchPaused = 0;
 8004ebe:	4b06      	ldr	r3, [pc, #24]	; (8004ed8 <updateStopwatchState+0xb8>)
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	701a      	strb	r2, [r3, #0]
	}
}
 8004ec4:	46c0      	nop			; (mov r8, r8)
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	b002      	add	sp, #8
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	2000018c 	.word	0x2000018c
 8004ed0:	20000140 	.word	0x20000140
 8004ed4:	20000144 	.word	0x20000144
 8004ed8:	20000191 	.word	0x20000191
 8004edc:	20000194 	.word	0x20000194
 8004ee0:	20000128 	.word	0x20000128

08004ee4 <updateDisplay>:

// primary function for making changes to display
void updateDisplay(RTC_HandleTypeDef *hrtc, SPI_HandleTypeDef *hspi) {
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
	// change faces
	if (isFaceBeingChanged == 1) {
 8004eee:	4b7a      	ldr	r3, [pc, #488]	; (80050d8 <updateDisplay+0x1f4>)
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d160      	bne.n	8004fb8 <updateDisplay+0xd4>
		isFaceBeingChanged = 0;
 8004ef6:	4b78      	ldr	r3, [pc, #480]	; (80050d8 <updateDisplay+0x1f4>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	701a      	strb	r2, [r3, #0]

		// drawing titles and boxes that won't be rewritten during normal operation within
		// a specific face (titles and buttons)
		if (faceOnDisplay == faceClock) {
 8004efc:	4b77      	ldr	r3, [pc, #476]	; (80050dc <updateDisplay+0x1f8>)
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d10b      	bne.n	8004f1c <updateDisplay+0x38>
			clearScreen(ST77XX_CYAN, hspi);
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	4a76      	ldr	r2, [pc, #472]	; (80050e0 <updateDisplay+0x1fc>)
 8004f08:	0019      	movs	r1, r3
 8004f0a:	0010      	movs	r0, r2
 8004f0c:	f7fc fc92 	bl	8001834 <clearScreen>
			drawTitle("clock", hspi);
 8004f10:	683a      	ldr	r2, [r7, #0]
 8004f12:	4b74      	ldr	r3, [pc, #464]	; (80050e4 <updateDisplay+0x200>)
 8004f14:	0011      	movs	r1, r2
 8004f16:	0018      	movs	r0, r3
 8004f18:	f000 fc3a 	bl	8005790 <drawTitle>
		}
		if (faceOnDisplay == faceTimer) {
 8004f1c:	4b6f      	ldr	r3, [pc, #444]	; (80050dc <updateDisplay+0x1f8>)
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d112      	bne.n	8004f4a <updateDisplay+0x66>
			clearScreen(ST77XX_GREEN, hspi);
 8004f24:	683a      	ldr	r2, [r7, #0]
 8004f26:	23fc      	movs	r3, #252	; 0xfc
 8004f28:	00db      	lsls	r3, r3, #3
 8004f2a:	0011      	movs	r1, r2
 8004f2c:	0018      	movs	r0, r3
 8004f2e:	f7fc fc81 	bl	8001834 <clearScreen>
			drawTopClock(hrtc, hspi);
 8004f32:	683a      	ldr	r2, [r7, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	0011      	movs	r1, r2
 8004f38:	0018      	movs	r0, r3
 8004f3a:	f000 fdd1 	bl	8005ae0 <drawTopClock>
			drawTitle("timer", hspi);
 8004f3e:	683a      	ldr	r2, [r7, #0]
 8004f40:	4b69      	ldr	r3, [pc, #420]	; (80050e8 <updateDisplay+0x204>)
 8004f42:	0011      	movs	r1, r2
 8004f44:	0018      	movs	r0, r3
 8004f46:	f000 fc23 	bl	8005790 <drawTitle>
		}
		if (faceOnDisplay == faceAlarm) {
 8004f4a:	4b64      	ldr	r3, [pc, #400]	; (80050dc <updateDisplay+0x1f8>)
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d111      	bne.n	8004f76 <updateDisplay+0x92>
			clearScreen(ST77XX_MAGENTA, hspi);
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	4a65      	ldr	r2, [pc, #404]	; (80050ec <updateDisplay+0x208>)
 8004f56:	0019      	movs	r1, r3
 8004f58:	0010      	movs	r0, r2
 8004f5a:	f7fc fc6b 	bl	8001834 <clearScreen>
			drawTopClock(hrtc, hspi);
 8004f5e:	683a      	ldr	r2, [r7, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	0011      	movs	r1, r2
 8004f64:	0018      	movs	r0, r3
 8004f66:	f000 fdbb 	bl	8005ae0 <drawTopClock>
			drawTitle("alarm", hspi);
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	4b60      	ldr	r3, [pc, #384]	; (80050f0 <updateDisplay+0x20c>)
 8004f6e:	0011      	movs	r1, r2
 8004f70:	0018      	movs	r0, r3
 8004f72:	f000 fc0d 	bl	8005790 <drawTitle>
		}
		if (faceOnDisplay == faceStopwatch) {
 8004f76:	4b59      	ldr	r3, [pc, #356]	; (80050dc <updateDisplay+0x1f8>)
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	2b03      	cmp	r3, #3
 8004f7c:	d111      	bne.n	8004fa2 <updateDisplay+0xbe>
			clearScreen(ST77XX_YELLOW, hspi);
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	4a5c      	ldr	r2, [pc, #368]	; (80050f4 <updateDisplay+0x210>)
 8004f82:	0019      	movs	r1, r3
 8004f84:	0010      	movs	r0, r2
 8004f86:	f7fc fc55 	bl	8001834 <clearScreen>
			drawTopClock(hrtc, hspi);
 8004f8a:	683a      	ldr	r2, [r7, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	0011      	movs	r1, r2
 8004f90:	0018      	movs	r0, r3
 8004f92:	f000 fda5 	bl	8005ae0 <drawTopClock>
			drawTitle("stopwatch", hspi);
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	4b57      	ldr	r3, [pc, #348]	; (80050f8 <updateDisplay+0x214>)
 8004f9a:	0011      	movs	r1, r2
 8004f9c:	0018      	movs	r0, r3
 8004f9e:	f000 fbf7 	bl	8005790 <drawTitle>
		}

		drawBattery(battPercentage, hspi);
 8004fa2:	4b56      	ldr	r3, [pc, #344]	; (80050fc <updateDisplay+0x218>)
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	683a      	ldr	r2, [r7, #0]
 8004fa8:	0011      	movs	r1, r2
 8004faa:	0018      	movs	r0, r3
 8004fac:	f000 fc64 	bl	8005878 <drawBattery>
		drawButtons(hspi);
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	0018      	movs	r0, r3
 8004fb4:	f000 fba6 	bl	8005704 <drawButtons>
	}


	if (updateFace.clock || updateFace.timer || updateFace.alarm || updateFace.stopwatch) {
 8004fb8:	4b51      	ldr	r3, [pc, #324]	; (8005100 <updateDisplay+0x21c>)
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d10f      	bne.n	8004fe2 <updateDisplay+0xfe>
 8004fc2:	4b4f      	ldr	r3, [pc, #316]	; (8005100 <updateDisplay+0x21c>)
 8004fc4:	785b      	ldrb	r3, [r3, #1]
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d10a      	bne.n	8004fe2 <updateDisplay+0xfe>
 8004fcc:	4b4c      	ldr	r3, [pc, #304]	; (8005100 <updateDisplay+0x21c>)
 8004fce:	789b      	ldrb	r3, [r3, #2]
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d105      	bne.n	8004fe2 <updateDisplay+0xfe>
 8004fd6:	4b4a      	ldr	r3, [pc, #296]	; (8005100 <updateDisplay+0x21c>)
 8004fd8:	78db      	ldrb	r3, [r3, #3]
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d100      	bne.n	8004fe2 <updateDisplay+0xfe>
 8004fe0:	e076      	b.n	80050d0 <updateDisplay+0x1ec>
		// update clock face
		if (faceOnDisplay == faceClock) {
 8004fe2:	4b3e      	ldr	r3, [pc, #248]	; (80050dc <updateDisplay+0x1f8>)
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d10f      	bne.n	800500a <updateDisplay+0x126>
			if (updateFace.clock == 1) {
 8004fea:	4b45      	ldr	r3, [pc, #276]	; (8005100 <updateDisplay+0x21c>)
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d161      	bne.n	80050b8 <updateDisplay+0x1d4>
				setBackgroundColor(ST77XX_CYAN);
 8004ff4:	4b3a      	ldr	r3, [pc, #232]	; (80050e0 <updateDisplay+0x1fc>)
 8004ff6:	0018      	movs	r0, r3
 8004ff8:	f7fd f95c 	bl	80022b4 <setBackgroundColor>
				updateClockDisplay(hrtc, hspi);
 8004ffc:	683a      	ldr	r2, [r7, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	0011      	movs	r1, r2
 8005002:	0018      	movs	r0, r3
 8005004:	f000 f87e 	bl	8005104 <updateClockDisplay>
 8005008:	e056      	b.n	80050b8 <updateDisplay+0x1d4>
			}
		}
		// update timer face
		else if (faceOnDisplay == faceTimer) {
 800500a:	4b34      	ldr	r3, [pc, #208]	; (80050dc <updateDisplay+0x1f8>)
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d119      	bne.n	8005046 <updateDisplay+0x162>
			if (updateFace.timer == 1) {
 8005012:	4b3b      	ldr	r3, [pc, #236]	; (8005100 <updateDisplay+0x21c>)
 8005014:	785b      	ldrb	r3, [r3, #1]
 8005016:	b2db      	uxtb	r3, r3
 8005018:	2b01      	cmp	r3, #1
 800501a:	d108      	bne.n	800502e <updateDisplay+0x14a>
				setBackgroundColor(ST77XX_GREEN);
 800501c:	23fc      	movs	r3, #252	; 0xfc
 800501e:	00db      	lsls	r3, r3, #3
 8005020:	0018      	movs	r0, r3
 8005022:	f7fd f947 	bl	80022b4 <setBackgroundColor>
				updateTimerDisplay(hspi);
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	0018      	movs	r0, r3
 800502a:	f000 f915 	bl	8005258 <updateTimerDisplay>
			}
			if (updateFace.clock == 1) drawTopClock(hrtc, hspi);
 800502e:	4b34      	ldr	r3, [pc, #208]	; (8005100 <updateDisplay+0x21c>)
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b01      	cmp	r3, #1
 8005036:	d13f      	bne.n	80050b8 <updateDisplay+0x1d4>
 8005038:	683a      	ldr	r2, [r7, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	0011      	movs	r1, r2
 800503e:	0018      	movs	r0, r3
 8005040:	f000 fd4e 	bl	8005ae0 <drawTopClock>
 8005044:	e038      	b.n	80050b8 <updateDisplay+0x1d4>
		}
		// update alarm face
		else if (faceOnDisplay == faceAlarm) {
 8005046:	4b25      	ldr	r3, [pc, #148]	; (80050dc <updateDisplay+0x1f8>)
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	2b02      	cmp	r3, #2
 800504c:	d118      	bne.n	8005080 <updateDisplay+0x19c>
			if (updateFace.alarm == 1) {
 800504e:	4b2c      	ldr	r3, [pc, #176]	; (8005100 <updateDisplay+0x21c>)
 8005050:	789b      	ldrb	r3, [r3, #2]
 8005052:	b2db      	uxtb	r3, r3
 8005054:	2b01      	cmp	r3, #1
 8005056:	d107      	bne.n	8005068 <updateDisplay+0x184>
				setBackgroundColor(ST77XX_MAGENTA);
 8005058:	4b24      	ldr	r3, [pc, #144]	; (80050ec <updateDisplay+0x208>)
 800505a:	0018      	movs	r0, r3
 800505c:	f7fd f92a 	bl	80022b4 <setBackgroundColor>
				updateAlarmDisplay(hspi);
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	0018      	movs	r0, r3
 8005064:	f000 f9f8 	bl	8005458 <updateAlarmDisplay>
			}
			if (updateFace.clock == 1) drawTopClock(hrtc, hspi);
 8005068:	4b25      	ldr	r3, [pc, #148]	; (8005100 <updateDisplay+0x21c>)
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	b2db      	uxtb	r3, r3
 800506e:	2b01      	cmp	r3, #1
 8005070:	d122      	bne.n	80050b8 <updateDisplay+0x1d4>
 8005072:	683a      	ldr	r2, [r7, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	0011      	movs	r1, r2
 8005078:	0018      	movs	r0, r3
 800507a:	f000 fd31 	bl	8005ae0 <drawTopClock>
 800507e:	e01b      	b.n	80050b8 <updateDisplay+0x1d4>
		}
		// update stopwatch face
		else if (faceOnDisplay == faceStopwatch) {
 8005080:	4b16      	ldr	r3, [pc, #88]	; (80050dc <updateDisplay+0x1f8>)
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	2b03      	cmp	r3, #3
 8005086:	d117      	bne.n	80050b8 <updateDisplay+0x1d4>
			if (updateFace.stopwatch == 1) {
 8005088:	4b1d      	ldr	r3, [pc, #116]	; (8005100 <updateDisplay+0x21c>)
 800508a:	78db      	ldrb	r3, [r3, #3]
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b01      	cmp	r3, #1
 8005090:	d107      	bne.n	80050a2 <updateDisplay+0x1be>
				setBackgroundColor(ST77XX_YELLOW);
 8005092:	4b18      	ldr	r3, [pc, #96]	; (80050f4 <updateDisplay+0x210>)
 8005094:	0018      	movs	r0, r3
 8005096:	f7fd f90d 	bl	80022b4 <setBackgroundColor>
				updateStopwatchDisplay(hspi);
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	0018      	movs	r0, r3
 800509e:	f000 faa9 	bl	80055f4 <updateStopwatchDisplay>
			}
			if (updateFace.clock == 1) drawTopClock(hrtc, hspi);
 80050a2:	4b17      	ldr	r3, [pc, #92]	; (8005100 <updateDisplay+0x21c>)
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d105      	bne.n	80050b8 <updateDisplay+0x1d4>
 80050ac:	683a      	ldr	r2, [r7, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	0011      	movs	r1, r2
 80050b2:	0018      	movs	r0, r3
 80050b4:	f000 fd14 	bl	8005ae0 <drawTopClock>
		}

		updateFace.clock = updateFace.timer = updateFace.alarm = updateFace.stopwatch = 0;
 80050b8:	2200      	movs	r2, #0
 80050ba:	4b11      	ldr	r3, [pc, #68]	; (8005100 <updateDisplay+0x21c>)
 80050bc:	1c11      	adds	r1, r2, #0
 80050be:	70d9      	strb	r1, [r3, #3]
 80050c0:	4b0f      	ldr	r3, [pc, #60]	; (8005100 <updateDisplay+0x21c>)
 80050c2:	1c11      	adds	r1, r2, #0
 80050c4:	7099      	strb	r1, [r3, #2]
 80050c6:	4b0e      	ldr	r3, [pc, #56]	; (8005100 <updateDisplay+0x21c>)
 80050c8:	1c11      	adds	r1, r2, #0
 80050ca:	7059      	strb	r1, [r3, #1]
 80050cc:	4b0c      	ldr	r3, [pc, #48]	; (8005100 <updateDisplay+0x21c>)
 80050ce:	701a      	strb	r2, [r3, #0]
	}
}
 80050d0:	46c0      	nop			; (mov r8, r8)
 80050d2:	46bd      	mov	sp, r7
 80050d4:	b002      	add	sp, #8
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	20000068 	.word	0x20000068
 80050dc:	20000130 	.word	0x20000130
 80050e0:	000007ff 	.word	0x000007ff
 80050e4:	0800ab90 	.word	0x0800ab90
 80050e8:	0800ab98 	.word	0x0800ab98
 80050ec:	0000f81f 	.word	0x0000f81f
 80050f0:	0800aba0 	.word	0x0800aba0
 80050f4:	0000ffe0 	.word	0x0000ffe0
 80050f8:	0800aba8 	.word	0x0800aba8
 80050fc:	2000013c 	.word	0x2000013c
 8005100:	20000140 	.word	0x20000140

08005104 <updateClockDisplay>:

// helper function for drawing all elements for clock display
void updateClockDisplay(RTC_HandleTypeDef *hrtc, SPI_HandleTypeDef *hspi) {
 8005104:	b5b0      	push	{r4, r5, r7, lr}
 8005106:	b088      	sub	sp, #32
 8005108:	af02      	add	r7, sp, #8
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
	struct dates currentDate = {0};
 800510e:	2310      	movs	r3, #16
 8005110:	18fb      	adds	r3, r7, r3
 8005112:	0018      	movs	r0, r3
 8005114:	2306      	movs	r3, #6
 8005116:	001a      	movs	r2, r3
 8005118:	2100      	movs	r1, #0
 800511a:	f005 f8a0 	bl	800a25e <memset>
	struct times currentTime = {0};
 800511e:	230c      	movs	r3, #12
 8005120:	18fb      	adds	r3, r7, r3
 8005122:	0018      	movs	r0, r3
 8005124:	2303      	movs	r3, #3
 8005126:	001a      	movs	r2, r3
 8005128:	2100      	movs	r1, #0
 800512a:	f005 f898 	bl	800a25e <memset>

	setTextColor(ST77XX_BLACK);
 800512e:	2000      	movs	r0, #0
 8005130:	f7fd f8fa 	bl	8002328 <setTextColor>
	if (clockVars.isBeingSet == 0) {
 8005134:	4b3c      	ldr	r3, [pc, #240]	; (8005228 <updateClockDisplay+0x124>)
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d11c      	bne.n	8005176 <updateClockDisplay+0x72>
		getDateTime(&currentDate, &currentTime, hrtc);
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	240c      	movs	r4, #12
 8005140:	1939      	adds	r1, r7, r4
 8005142:	2510      	movs	r5, #16
 8005144:	197b      	adds	r3, r7, r5
 8005146:	0018      	movs	r0, r3
 8005148:	f7fd fbc2 	bl	80028d0 <getDateTime>
		drawClock(&currentDate, &currentTime, hspi);
 800514c:	683a      	ldr	r2, [r7, #0]
 800514e:	1939      	adds	r1, r7, r4
 8005150:	197b      	adds	r3, r7, r5
 8005152:	0018      	movs	r0, r3
 8005154:	f000 fc2a 	bl	80059ac <drawClock>

		setTextSize(1);
 8005158:	2001      	movs	r0, #1
 800515a:	f7fd f8d5 	bl	8002308 <setTextSize>
		// clear line that says "setting ___"
		clearTextLine(44, hspi);
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	0019      	movs	r1, r3
 8005162:	202c      	movs	r0, #44	; 0x2c
 8005164:	f7fd f886 	bl	8002274 <clearTextLine>

		// draw button text
		drawButtonText("", "", "set", hspi);
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	4a30      	ldr	r2, [pc, #192]	; (800522c <updateClockDisplay+0x128>)
 800516c:	4930      	ldr	r1, [pc, #192]	; (8005230 <updateClockDisplay+0x12c>)
 800516e:	4830      	ldr	r0, [pc, #192]	; (8005230 <updateClockDisplay+0x12c>)
 8005170:	f000 fae2 	bl	8005738 <drawButtonText>
			default: break;
		}

		drawClock(clockVars.dateToSet, clockVars.timeToSet, hspi);
	}
}
 8005174:	e054      	b.n	8005220 <updateClockDisplay+0x11c>
	else if (clockVars.isBeingSet == 1) {
 8005176:	4b2c      	ldr	r3, [pc, #176]	; (8005228 <updateClockDisplay+0x124>)
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	2b01      	cmp	r3, #1
 800517c:	d150      	bne.n	8005220 <updateClockDisplay+0x11c>
		if (clockVars.fieldBeingSet == 1) drawButtonText("up", "down", "change", hspi);
 800517e:	4b2a      	ldr	r3, [pc, #168]	; (8005228 <updateClockDisplay+0x124>)
 8005180:	785b      	ldrb	r3, [r3, #1]
 8005182:	2b01      	cmp	r3, #1
 8005184:	d105      	bne.n	8005192 <updateClockDisplay+0x8e>
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	4a2a      	ldr	r2, [pc, #168]	; (8005234 <updateClockDisplay+0x130>)
 800518a:	492b      	ldr	r1, [pc, #172]	; (8005238 <updateClockDisplay+0x134>)
 800518c:	482b      	ldr	r0, [pc, #172]	; (800523c <updateClockDisplay+0x138>)
 800518e:	f000 fad3 	bl	8005738 <drawButtonText>
		setTextSize(1);
 8005192:	2001      	movs	r0, #1
 8005194:	f7fd f8b8 	bl	8002308 <setTextSize>
		switch (clockVars.fieldBeingSet) {
 8005198:	4b23      	ldr	r3, [pc, #140]	; (8005228 <updateClockDisplay+0x124>)
 800519a:	785b      	ldrb	r3, [r3, #1]
 800519c:	2b05      	cmp	r3, #5
 800519e:	d836      	bhi.n	800520e <updateClockDisplay+0x10a>
 80051a0:	009a      	lsls	r2, r3, #2
 80051a2:	4b27      	ldr	r3, [pc, #156]	; (8005240 <updateClockDisplay+0x13c>)
 80051a4:	18d3      	adds	r3, r2, r3
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	469f      	mov	pc, r3
			case 1:	drawCenteredTextWithPadding(WIDTH/2, 44, 17, "setting minute...", hspi); break;
 80051aa:	4a26      	ldr	r2, [pc, #152]	; (8005244 <updateClockDisplay+0x140>)
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	9300      	str	r3, [sp, #0]
 80051b0:	0013      	movs	r3, r2
 80051b2:	2211      	movs	r2, #17
 80051b4:	212c      	movs	r1, #44	; 0x2c
 80051b6:	2040      	movs	r0, #64	; 0x40
 80051b8:	f7fc ff84 	bl	80020c4 <drawCenteredTextWithPadding>
 80051bc:	e028      	b.n	8005210 <updateClockDisplay+0x10c>
			case 2:	drawCenteredTextWithPadding(WIDTH/2, 44, 17, "setting hour...", hspi);	break;
 80051be:	4a22      	ldr	r2, [pc, #136]	; (8005248 <updateClockDisplay+0x144>)
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	9300      	str	r3, [sp, #0]
 80051c4:	0013      	movs	r3, r2
 80051c6:	2211      	movs	r2, #17
 80051c8:	212c      	movs	r1, #44	; 0x2c
 80051ca:	2040      	movs	r0, #64	; 0x40
 80051cc:	f7fc ff7a 	bl	80020c4 <drawCenteredTextWithPadding>
 80051d0:	e01e      	b.n	8005210 <updateClockDisplay+0x10c>
			case 3: drawCenteredTextWithPadding(WIDTH/2, 44, 17, "setting year...", hspi); break;
 80051d2:	4a1e      	ldr	r2, [pc, #120]	; (800524c <updateClockDisplay+0x148>)
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	9300      	str	r3, [sp, #0]
 80051d8:	0013      	movs	r3, r2
 80051da:	2211      	movs	r2, #17
 80051dc:	212c      	movs	r1, #44	; 0x2c
 80051de:	2040      	movs	r0, #64	; 0x40
 80051e0:	f7fc ff70 	bl	80020c4 <drawCenteredTextWithPadding>
 80051e4:	e014      	b.n	8005210 <updateClockDisplay+0x10c>
			case 4: drawCenteredTextWithPadding(WIDTH/2, 44, 17, "setting month...", hspi); break;
 80051e6:	4a1a      	ldr	r2, [pc, #104]	; (8005250 <updateClockDisplay+0x14c>)
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	9300      	str	r3, [sp, #0]
 80051ec:	0013      	movs	r3, r2
 80051ee:	2211      	movs	r2, #17
 80051f0:	212c      	movs	r1, #44	; 0x2c
 80051f2:	2040      	movs	r0, #64	; 0x40
 80051f4:	f7fc ff66 	bl	80020c4 <drawCenteredTextWithPadding>
 80051f8:	e00a      	b.n	8005210 <updateClockDisplay+0x10c>
			case 5: drawCenteredTextWithPadding(WIDTH/2, 44, 17, "setting date...", hspi); break;
 80051fa:	4a16      	ldr	r2, [pc, #88]	; (8005254 <updateClockDisplay+0x150>)
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	9300      	str	r3, [sp, #0]
 8005200:	0013      	movs	r3, r2
 8005202:	2211      	movs	r2, #17
 8005204:	212c      	movs	r1, #44	; 0x2c
 8005206:	2040      	movs	r0, #64	; 0x40
 8005208:	f7fc ff5c 	bl	80020c4 <drawCenteredTextWithPadding>
 800520c:	e000      	b.n	8005210 <updateClockDisplay+0x10c>
			default: break;
 800520e:	46c0      	nop			; (mov r8, r8)
		drawClock(clockVars.dateToSet, clockVars.timeToSet, hspi);
 8005210:	4b05      	ldr	r3, [pc, #20]	; (8005228 <updateClockDisplay+0x124>)
 8005212:	6858      	ldr	r0, [r3, #4]
 8005214:	4b04      	ldr	r3, [pc, #16]	; (8005228 <updateClockDisplay+0x124>)
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	683a      	ldr	r2, [r7, #0]
 800521a:	0019      	movs	r1, r3
 800521c:	f000 fbc6 	bl	80059ac <drawClock>
}
 8005220:	46c0      	nop			; (mov r8, r8)
 8005222:	46bd      	mov	sp, r7
 8005224:	b006      	add	sp, #24
 8005226:	bdb0      	pop	{r4, r5, r7, pc}
 8005228:	2000010c 	.word	0x2000010c
 800522c:	0800abb4 	.word	0x0800abb4
 8005230:	0800ab14 	.word	0x0800ab14
 8005234:	0800abb8 	.word	0x0800abb8
 8005238:	0800abc0 	.word	0x0800abc0
 800523c:	0800abc8 	.word	0x0800abc8
 8005240:	0800b368 	.word	0x0800b368
 8005244:	0800abcc 	.word	0x0800abcc
 8005248:	0800abe0 	.word	0x0800abe0
 800524c:	0800abf0 	.word	0x0800abf0
 8005250:	0800ac00 	.word	0x0800ac00
 8005254:	0800ac14 	.word	0x0800ac14

08005258 <updateTimerDisplay>:

// helper function for drawing all elements for timer display
void updateTimerDisplay(SPI_HandleTypeDef *hspi) {
 8005258:	b590      	push	{r4, r7, lr}
 800525a:	b087      	sub	sp, #28
 800525c:	af02      	add	r7, sp, #8
 800525e:	6078      	str	r0, [r7, #4]
	struct times currentTimer = {0};
 8005260:	230c      	movs	r3, #12
 8005262:	18fb      	adds	r3, r7, r3
 8005264:	0018      	movs	r0, r3
 8005266:	2303      	movs	r3, #3
 8005268:	001a      	movs	r2, r3
 800526a:	2100      	movs	r1, #0
 800526c:	f004 fff7 	bl	800a25e <memset>

	setTextColor(ST77XX_BLACK);
 8005270:	2000      	movs	r0, #0
 8005272:	f7fd f859 	bl	8002328 <setTextColor>
	if (timerVars.isBeingSet == 0) {
 8005276:	4b64      	ldr	r3, [pc, #400]	; (8005408 <updateTimerDisplay+0x1b0>)
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d000      	beq.n	8005280 <updateTimerDisplay+0x28>
 800527e:	e087      	b.n	8005390 <updateTimerDisplay+0x138>
		if (timerVars.isSet == 0) {
 8005280:	4b61      	ldr	r3, [pc, #388]	; (8005408 <updateTimerDisplay+0x1b0>)
 8005282:	789b      	ldrb	r3, [r3, #2]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d11f      	bne.n	80052c8 <updateTimerDisplay+0x70>
			setTextSize(2);
 8005288:	2002      	movs	r0, #2
 800528a:	f7fd f83d 	bl	8002308 <setTextSize>
			clearTextLine(68, hspi);	// clear timer time text
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	0019      	movs	r1, r3
 8005292:	2044      	movs	r0, #68	; 0x44
 8005294:	f7fc ffee 	bl	8002274 <clearTextLine>

			// write "timer unset"
			setTextSize(1);
 8005298:	2001      	movs	r0, #1
 800529a:	f7fd f835 	bl	8002308 <setTextSize>
			clearTextLine(52, hspi);	// clear setting ___ text
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	0019      	movs	r1, r3
 80052a2:	2034      	movs	r0, #52	; 0x34
 80052a4:	f7fc ffe6 	bl	8002274 <clearTextLine>
			drawCenteredTextWithPadding(WIDTH/2, 84, 12, "timer unset", hspi);
 80052a8:	4a58      	ldr	r2, [pc, #352]	; (800540c <updateTimerDisplay+0x1b4>)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	9300      	str	r3, [sp, #0]
 80052ae:	0013      	movs	r3, r2
 80052b0:	220c      	movs	r2, #12
 80052b2:	2154      	movs	r1, #84	; 0x54
 80052b4:	2040      	movs	r0, #64	; 0x40
 80052b6:	f7fc ff05 	bl	80020c4 <drawCenteredTextWithPadding>

			// draw button text
			drawButtonText("", "", "set", hspi);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a54      	ldr	r2, [pc, #336]	; (8005410 <updateTimerDisplay+0x1b8>)
 80052be:	4955      	ldr	r1, [pc, #340]	; (8005414 <updateTimerDisplay+0x1bc>)
 80052c0:	4854      	ldr	r0, [pc, #336]	; (8005414 <updateTimerDisplay+0x1bc>)
 80052c2:	f000 fa39 	bl	8005738 <drawButtonText>
			default: break;
		}

		drawTimer(timerVars.timeToSet, hspi);
	}
}
 80052c6:	e09b      	b.n	8005400 <updateTimerDisplay+0x1a8>
		else if (isTimerDone == 0) {
 80052c8:	4b53      	ldr	r3, [pc, #332]	; (8005418 <updateTimerDisplay+0x1c0>)
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d143      	bne.n	800535a <updateTimerDisplay+0x102>
			secondsToTime(&currentTimer, timerCounter);
 80052d2:	4b52      	ldr	r3, [pc, #328]	; (800541c <updateTimerDisplay+0x1c4>)
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	240c      	movs	r4, #12
 80052d8:	193b      	adds	r3, r7, r4
 80052da:	0011      	movs	r1, r2
 80052dc:	0018      	movs	r0, r3
 80052de:	f7fd fbb6 	bl	8002a4e <secondsToTime>
			drawTimer(&currentTimer, hspi);
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	193b      	adds	r3, r7, r4
 80052e6:	0011      	movs	r1, r2
 80052e8:	0018      	movs	r0, r3
 80052ea:	f000 fc5b 	bl	8005ba4 <drawTimer>
			setTextSize(1);
 80052ee:	2001      	movs	r0, #1
 80052f0:	f7fd f80a 	bl	8002308 <setTextSize>
			clearTextLine(52, hspi);	// clear setting ___ text
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	0019      	movs	r1, r3
 80052f8:	2034      	movs	r0, #52	; 0x34
 80052fa:	f7fc ffbb 	bl	8002274 <clearTextLine>
			if (isTimerPaused == 1) {
 80052fe:	4b48      	ldr	r3, [pc, #288]	; (8005420 <updateTimerDisplay+0x1c8>)
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	b2db      	uxtb	r3, r3
 8005304:	2b01      	cmp	r3, #1
 8005306:	d109      	bne.n	800531c <updateTimerDisplay+0xc4>
				drawCenteredTextWithPadding(WIDTH/2, 84, 12, "timer paused", hspi);
 8005308:	4a46      	ldr	r2, [pc, #280]	; (8005424 <updateTimerDisplay+0x1cc>)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	9300      	str	r3, [sp, #0]
 800530e:	0013      	movs	r3, r2
 8005310:	220c      	movs	r2, #12
 8005312:	2154      	movs	r1, #84	; 0x54
 8005314:	2040      	movs	r0, #64	; 0x40
 8005316:	f7fc fed5 	bl	80020c4 <drawCenteredTextWithPadding>
 800531a:	e017      	b.n	800534c <updateTimerDisplay+0xf4>
			else if (isTimerRunning == 0 && timerCounter != 0) {
 800531c:	4b42      	ldr	r3, [pc, #264]	; (8005428 <updateTimerDisplay+0x1d0>)
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10d      	bne.n	8005342 <updateTimerDisplay+0xea>
 8005326:	4b3d      	ldr	r3, [pc, #244]	; (800541c <updateTimerDisplay+0x1c4>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d009      	beq.n	8005342 <updateTimerDisplay+0xea>
				drawCenteredTextWithPadding(WIDTH/2, 84, 12, "timer set!", hspi);
 800532e:	4a3f      	ldr	r2, [pc, #252]	; (800542c <updateTimerDisplay+0x1d4>)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	9300      	str	r3, [sp, #0]
 8005334:	0013      	movs	r3, r2
 8005336:	220c      	movs	r2, #12
 8005338:	2154      	movs	r1, #84	; 0x54
 800533a:	2040      	movs	r0, #64	; 0x40
 800533c:	f7fc fec2 	bl	80020c4 <drawCenteredTextWithPadding>
 8005340:	e004      	b.n	800534c <updateTimerDisplay+0xf4>
				clearTextLine(84, hspi);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	0019      	movs	r1, r3
 8005346:	2054      	movs	r0, #84	; 0x54
 8005348:	f7fc ff94 	bl	8002274 <clearTextLine>
			drawButtonText("run", "pause", "clear", hspi);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a38      	ldr	r2, [pc, #224]	; (8005430 <updateTimerDisplay+0x1d8>)
 8005350:	4938      	ldr	r1, [pc, #224]	; (8005434 <updateTimerDisplay+0x1dc>)
 8005352:	4839      	ldr	r0, [pc, #228]	; (8005438 <updateTimerDisplay+0x1e0>)
 8005354:	f000 f9f0 	bl	8005738 <drawButtonText>
}
 8005358:	e052      	b.n	8005400 <updateTimerDisplay+0x1a8>
			secondsToTime(&currentTimer, timerCounter);
 800535a:	4b30      	ldr	r3, [pc, #192]	; (800541c <updateTimerDisplay+0x1c4>)
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	240c      	movs	r4, #12
 8005360:	193b      	adds	r3, r7, r4
 8005362:	0011      	movs	r1, r2
 8005364:	0018      	movs	r0, r3
 8005366:	f7fd fb72 	bl	8002a4e <secondsToTime>
			drawTimer(&currentTimer, hspi);
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	193b      	adds	r3, r7, r4
 800536e:	0011      	movs	r1, r2
 8005370:	0018      	movs	r0, r3
 8005372:	f000 fc17 	bl	8005ba4 <drawTimer>
			setTextSize(1);
 8005376:	2001      	movs	r0, #1
 8005378:	f7fc ffc6 	bl	8002308 <setTextSize>
			drawCenteredTextWithPadding(WIDTH/2, 84, 12, "timer done!", hspi);
 800537c:	4a2f      	ldr	r2, [pc, #188]	; (800543c <updateTimerDisplay+0x1e4>)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	9300      	str	r3, [sp, #0]
 8005382:	0013      	movs	r3, r2
 8005384:	220c      	movs	r2, #12
 8005386:	2154      	movs	r1, #84	; 0x54
 8005388:	2040      	movs	r0, #64	; 0x40
 800538a:	f7fc fe9b 	bl	80020c4 <drawCenteredTextWithPadding>
}
 800538e:	e037      	b.n	8005400 <updateTimerDisplay+0x1a8>
	else if (timerVars.isBeingSet == 1) {
 8005390:	4b1d      	ldr	r3, [pc, #116]	; (8005408 <updateTimerDisplay+0x1b0>)
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d133      	bne.n	8005400 <updateTimerDisplay+0x1a8>
		drawButtonText("up", "down", "change", hspi);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a29      	ldr	r2, [pc, #164]	; (8005440 <updateTimerDisplay+0x1e8>)
 800539c:	4929      	ldr	r1, [pc, #164]	; (8005444 <updateTimerDisplay+0x1ec>)
 800539e:	482a      	ldr	r0, [pc, #168]	; (8005448 <updateTimerDisplay+0x1f0>)
 80053a0:	f000 f9ca 	bl	8005738 <drawButtonText>
		switch (timerVars.fieldBeingSet) {
 80053a4:	4b18      	ldr	r3, [pc, #96]	; (8005408 <updateTimerDisplay+0x1b0>)
 80053a6:	785b      	ldrb	r3, [r3, #1]
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d00e      	beq.n	80053ca <updateTimerDisplay+0x172>
 80053ac:	2b03      	cmp	r3, #3
 80053ae:	d016      	beq.n	80053de <updateTimerDisplay+0x186>
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d000      	beq.n	80053b6 <updateTimerDisplay+0x15e>
			default: break;
 80053b4:	e01d      	b.n	80053f2 <updateTimerDisplay+0x19a>
			case 1: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting second...", hspi); break;
 80053b6:	4a25      	ldr	r2, [pc, #148]	; (800544c <updateTimerDisplay+0x1f4>)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	9300      	str	r3, [sp, #0]
 80053bc:	0013      	movs	r3, r2
 80053be:	2211      	movs	r2, #17
 80053c0:	2134      	movs	r1, #52	; 0x34
 80053c2:	2040      	movs	r0, #64	; 0x40
 80053c4:	f7fc fe7e 	bl	80020c4 <drawCenteredTextWithPadding>
 80053c8:	e013      	b.n	80053f2 <updateTimerDisplay+0x19a>
			case 2: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting minute...", hspi); break;
 80053ca:	4a21      	ldr	r2, [pc, #132]	; (8005450 <updateTimerDisplay+0x1f8>)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	9300      	str	r3, [sp, #0]
 80053d0:	0013      	movs	r3, r2
 80053d2:	2211      	movs	r2, #17
 80053d4:	2134      	movs	r1, #52	; 0x34
 80053d6:	2040      	movs	r0, #64	; 0x40
 80053d8:	f7fc fe74 	bl	80020c4 <drawCenteredTextWithPadding>
 80053dc:	e009      	b.n	80053f2 <updateTimerDisplay+0x19a>
			case 3: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting hour...", hspi); break;
 80053de:	4a1d      	ldr	r2, [pc, #116]	; (8005454 <updateTimerDisplay+0x1fc>)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	9300      	str	r3, [sp, #0]
 80053e4:	0013      	movs	r3, r2
 80053e6:	2211      	movs	r2, #17
 80053e8:	2134      	movs	r1, #52	; 0x34
 80053ea:	2040      	movs	r0, #64	; 0x40
 80053ec:	f7fc fe6a 	bl	80020c4 <drawCenteredTextWithPadding>
 80053f0:	46c0      	nop			; (mov r8, r8)
		drawTimer(timerVars.timeToSet, hspi);
 80053f2:	4b05      	ldr	r3, [pc, #20]	; (8005408 <updateTimerDisplay+0x1b0>)
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	0011      	movs	r1, r2
 80053fa:	0018      	movs	r0, r3
 80053fc:	f000 fbd2 	bl	8005ba4 <drawTimer>
}
 8005400:	46c0      	nop			; (mov r8, r8)
 8005402:	46bd      	mov	sp, r7
 8005404:	b005      	add	sp, #20
 8005406:	bd90      	pop	{r4, r7, pc}
 8005408:	20000118 	.word	0x20000118
 800540c:	0800ac24 	.word	0x0800ac24
 8005410:	0800abb4 	.word	0x0800abb4
 8005414:	0800ab14 	.word	0x0800ab14
 8005418:	2000014c 	.word	0x2000014c
 800541c:	20000148 	.word	0x20000148
 8005420:	20000192 	.word	0x20000192
 8005424:	0800ac30 	.word	0x0800ac30
 8005428:	20000190 	.word	0x20000190
 800542c:	0800ac40 	.word	0x0800ac40
 8005430:	0800ac4c 	.word	0x0800ac4c
 8005434:	0800ac54 	.word	0x0800ac54
 8005438:	0800ac5c 	.word	0x0800ac5c
 800543c:	0800ac60 	.word	0x0800ac60
 8005440:	0800abb8 	.word	0x0800abb8
 8005444:	0800abc0 	.word	0x0800abc0
 8005448:	0800abc8 	.word	0x0800abc8
 800544c:	0800ac6c 	.word	0x0800ac6c
 8005450:	0800abcc 	.word	0x0800abcc
 8005454:	0800abe0 	.word	0x0800abe0

08005458 <updateAlarmDisplay>:

// helper function for drawing all elements for alarm display
void updateAlarmDisplay(SPI_HandleTypeDef *hspi) {
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af02      	add	r7, sp, #8
 800545e:	6078      	str	r0, [r7, #4]
	setTextColor(ST77XX_BLACK);
 8005460:	2000      	movs	r0, #0
 8005462:	f7fc ff61 	bl	8002328 <setTextColor>
	if (alarmVars.isBeingSet == 0) {
 8005466:	4b54      	ldr	r3, [pc, #336]	; (80055b8 <updateAlarmDisplay+0x160>)
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d157      	bne.n	800551e <updateAlarmDisplay+0xc6>
		setTextSize(1);
 800546e:	2001      	movs	r0, #1
 8005470:	f7fc ff4a 	bl	8002308 <setTextSize>
		clearTextLine(52, hspi);	// clear "setting..." text
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	0019      	movs	r1, r3
 8005478:	2034      	movs	r0, #52	; 0x34
 800547a:	f7fc fefb 	bl	8002274 <clearTextLine>
		clearTextLine(60, hspi);	// clear am/pm text
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	0019      	movs	r1, r3
 8005482:	203c      	movs	r0, #60	; 0x3c
 8005484:	f7fc fef6 	bl	8002274 <clearTextLine>
		if (alarmVars.isSet == 0) {
 8005488:	4b4b      	ldr	r3, [pc, #300]	; (80055b8 <updateAlarmDisplay+0x160>)
 800548a:	789b      	ldrb	r3, [r3, #2]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d11a      	bne.n	80054c6 <updateAlarmDisplay+0x6e>
			setTextSize(3);
 8005490:	2003      	movs	r0, #3
 8005492:	f7fc ff39 	bl	8002308 <setTextSize>
			clearTextLine(68, hspi);	// clear alarm time text
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	0019      	movs	r1, r3
 800549a:	2044      	movs	r0, #68	; 0x44
 800549c:	f7fc feea 	bl	8002274 <clearTextLine>

			setTextSize(1);
 80054a0:	2001      	movs	r0, #1
 80054a2:	f7fc ff31 	bl	8002308 <setTextSize>
			drawCenteredTextWithPadding(WIDTH/2, 100, 11, "alarm unset", hspi);
 80054a6:	4a45      	ldr	r2, [pc, #276]	; (80055bc <updateAlarmDisplay+0x164>)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	9300      	str	r3, [sp, #0]
 80054ac:	0013      	movs	r3, r2
 80054ae:	220b      	movs	r2, #11
 80054b0:	2164      	movs	r1, #100	; 0x64
 80054b2:	2040      	movs	r0, #64	; 0x40
 80054b4:	f7fc fe06 	bl	80020c4 <drawCenteredTextWithPadding>

			// draw button text
			drawButtonText("", "", "set", hspi);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a41      	ldr	r2, [pc, #260]	; (80055c0 <updateAlarmDisplay+0x168>)
 80054bc:	4941      	ldr	r1, [pc, #260]	; (80055c4 <updateAlarmDisplay+0x16c>)
 80054be:	4841      	ldr	r0, [pc, #260]	; (80055c4 <updateAlarmDisplay+0x16c>)
 80054c0:	f000 f93a 	bl	8005738 <drawButtonText>
		drawButtonText("up", "down", "change", hspi);

		// draw alarm
		drawAlarm(alarmVars.alarmToSet, hspi);
	}
}
 80054c4:	e074      	b.n	80055b0 <updateAlarmDisplay+0x158>
		else if (isAlarmDone == 0) {
 80054c6:	4b40      	ldr	r3, [pc, #256]	; (80055c8 <updateAlarmDisplay+0x170>)
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d119      	bne.n	8005504 <updateAlarmDisplay+0xac>
			setTextSize(1);
 80054d0:	2001      	movs	r0, #1
 80054d2:	f7fc ff19 	bl	8002308 <setTextSize>
			drawCenteredTextWithPadding(WIDTH/2, 100, 11, "alarm set", hspi);
 80054d6:	4a3d      	ldr	r2, [pc, #244]	; (80055cc <updateAlarmDisplay+0x174>)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	9300      	str	r3, [sp, #0]
 80054dc:	0013      	movs	r3, r2
 80054de:	220b      	movs	r2, #11
 80054e0:	2164      	movs	r1, #100	; 0x64
 80054e2:	2040      	movs	r0, #64	; 0x40
 80054e4:	f7fc fdee 	bl	80020c4 <drawCenteredTextWithPadding>
			drawAlarm(alarmVars.alarmToSet, hspi);
 80054e8:	4b33      	ldr	r3, [pc, #204]	; (80055b8 <updateAlarmDisplay+0x160>)
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	0011      	movs	r1, r2
 80054f0:	0018      	movs	r0, r3
 80054f2:	f000 fb7d 	bl	8005bf0 <drawAlarm>
			drawButtonText("", "", "clear", hspi);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a35      	ldr	r2, [pc, #212]	; (80055d0 <updateAlarmDisplay+0x178>)
 80054fa:	4932      	ldr	r1, [pc, #200]	; (80055c4 <updateAlarmDisplay+0x16c>)
 80054fc:	4831      	ldr	r0, [pc, #196]	; (80055c4 <updateAlarmDisplay+0x16c>)
 80054fe:	f000 f91b 	bl	8005738 <drawButtonText>
}
 8005502:	e055      	b.n	80055b0 <updateAlarmDisplay+0x158>
			setTextSize(1);
 8005504:	2001      	movs	r0, #1
 8005506:	f7fc feff 	bl	8002308 <setTextSize>
			drawCenteredTextWithPadding(WIDTH/2, 100, 11, "alarm done!", hspi);
 800550a:	4a32      	ldr	r2, [pc, #200]	; (80055d4 <updateAlarmDisplay+0x17c>)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	9300      	str	r3, [sp, #0]
 8005510:	0013      	movs	r3, r2
 8005512:	220b      	movs	r2, #11
 8005514:	2164      	movs	r1, #100	; 0x64
 8005516:	2040      	movs	r0, #64	; 0x40
 8005518:	f7fc fdd4 	bl	80020c4 <drawCenteredTextWithPadding>
}
 800551c:	e048      	b.n	80055b0 <updateAlarmDisplay+0x158>
	else if (alarmVars.isBeingSet == 1) {
 800551e:	4b26      	ldr	r3, [pc, #152]	; (80055b8 <updateAlarmDisplay+0x160>)
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	2b01      	cmp	r3, #1
 8005524:	d144      	bne.n	80055b0 <updateAlarmDisplay+0x158>
		setTextSize(1);
 8005526:	2001      	movs	r0, #1
 8005528:	f7fc feee 	bl	8002308 <setTextSize>
		switch (alarmVars.fieldBeingSet) {
 800552c:	4b22      	ldr	r3, [pc, #136]	; (80055b8 <updateAlarmDisplay+0x160>)
 800552e:	785b      	ldrb	r3, [r3, #1]
 8005530:	2b02      	cmp	r3, #2
 8005532:	d012      	beq.n	800555a <updateAlarmDisplay+0x102>
 8005534:	dc02      	bgt.n	800553c <updateAlarmDisplay+0xe4>
 8005536:	2b01      	cmp	r3, #1
 8005538:	d005      	beq.n	8005546 <updateAlarmDisplay+0xee>
			default: break;
 800553a:	e02c      	b.n	8005596 <updateAlarmDisplay+0x13e>
		switch (alarmVars.fieldBeingSet) {
 800553c:	2b03      	cmp	r3, #3
 800553e:	d016      	beq.n	800556e <updateAlarmDisplay+0x116>
 8005540:	2b04      	cmp	r3, #4
 8005542:	d01e      	beq.n	8005582 <updateAlarmDisplay+0x12a>
			default: break;
 8005544:	e027      	b.n	8005596 <updateAlarmDisplay+0x13e>
			case 1: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting second...", hspi); break;
 8005546:	4a24      	ldr	r2, [pc, #144]	; (80055d8 <updateAlarmDisplay+0x180>)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	9300      	str	r3, [sp, #0]
 800554c:	0013      	movs	r3, r2
 800554e:	2211      	movs	r2, #17
 8005550:	2134      	movs	r1, #52	; 0x34
 8005552:	2040      	movs	r0, #64	; 0x40
 8005554:	f7fc fdb6 	bl	80020c4 <drawCenteredTextWithPadding>
 8005558:	e01d      	b.n	8005596 <updateAlarmDisplay+0x13e>
			case 2: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting minute...", hspi); break;
 800555a:	4a20      	ldr	r2, [pc, #128]	; (80055dc <updateAlarmDisplay+0x184>)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	9300      	str	r3, [sp, #0]
 8005560:	0013      	movs	r3, r2
 8005562:	2211      	movs	r2, #17
 8005564:	2134      	movs	r1, #52	; 0x34
 8005566:	2040      	movs	r0, #64	; 0x40
 8005568:	f7fc fdac 	bl	80020c4 <drawCenteredTextWithPadding>
 800556c:	e013      	b.n	8005596 <updateAlarmDisplay+0x13e>
			case 3: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting hour...", hspi); break;
 800556e:	4a1c      	ldr	r2, [pc, #112]	; (80055e0 <updateAlarmDisplay+0x188>)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	9300      	str	r3, [sp, #0]
 8005574:	0013      	movs	r3, r2
 8005576:	2211      	movs	r2, #17
 8005578:	2134      	movs	r1, #52	; 0x34
 800557a:	2040      	movs	r0, #64	; 0x40
 800557c:	f7fc fda2 	bl	80020c4 <drawCenteredTextWithPadding>
 8005580:	e009      	b.n	8005596 <updateAlarmDisplay+0x13e>
			case 4: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting day...", hspi); break;
 8005582:	4a18      	ldr	r2, [pc, #96]	; (80055e4 <updateAlarmDisplay+0x18c>)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	9300      	str	r3, [sp, #0]
 8005588:	0013      	movs	r3, r2
 800558a:	2211      	movs	r2, #17
 800558c:	2134      	movs	r1, #52	; 0x34
 800558e:	2040      	movs	r0, #64	; 0x40
 8005590:	f7fc fd98 	bl	80020c4 <drawCenteredTextWithPadding>
 8005594:	46c0      	nop			; (mov r8, r8)
		drawButtonText("up", "down", "change", hspi);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a13      	ldr	r2, [pc, #76]	; (80055e8 <updateAlarmDisplay+0x190>)
 800559a:	4914      	ldr	r1, [pc, #80]	; (80055ec <updateAlarmDisplay+0x194>)
 800559c:	4814      	ldr	r0, [pc, #80]	; (80055f0 <updateAlarmDisplay+0x198>)
 800559e:	f000 f8cb 	bl	8005738 <drawButtonText>
		drawAlarm(alarmVars.alarmToSet, hspi);
 80055a2:	4b05      	ldr	r3, [pc, #20]	; (80055b8 <updateAlarmDisplay+0x160>)
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	0011      	movs	r1, r2
 80055aa:	0018      	movs	r0, r3
 80055ac:	f000 fb20 	bl	8005bf0 <drawAlarm>
}
 80055b0:	46c0      	nop			; (mov r8, r8)
 80055b2:	46bd      	mov	sp, r7
 80055b4:	b002      	add	sp, #8
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	20000120 	.word	0x20000120
 80055bc:	0800ac80 	.word	0x0800ac80
 80055c0:	0800abb4 	.word	0x0800abb4
 80055c4:	0800ab14 	.word	0x0800ab14
 80055c8:	2000013e 	.word	0x2000013e
 80055cc:	0800ac8c 	.word	0x0800ac8c
 80055d0:	0800ac4c 	.word	0x0800ac4c
 80055d4:	0800ac98 	.word	0x0800ac98
 80055d8:	0800ac6c 	.word	0x0800ac6c
 80055dc:	0800abcc 	.word	0x0800abcc
 80055e0:	0800abe0 	.word	0x0800abe0
 80055e4:	0800aca4 	.word	0x0800aca4
 80055e8:	0800abb8 	.word	0x0800abb8
 80055ec:	0800abc0 	.word	0x0800abc0
 80055f0:	0800abc8 	.word	0x0800abc8

080055f4 <updateStopwatchDisplay>:

// helper function for drawing all elements for stopwatch display
void updateStopwatchDisplay(SPI_HandleTypeDef *hspi) {
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
	setTextColor(ST77XX_BLACK);
 80055fc:	2000      	movs	r0, #0
 80055fe:	f7fc fe93 	bl	8002328 <setTextColor>
	drawStopwatch(stopwatchCounter, hspi);
 8005602:	4b16      	ldr	r3, [pc, #88]	; (800565c <updateStopwatchDisplay+0x68>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	0011      	movs	r1, r2
 800560a:	0018      	movs	r0, r3
 800560c:	f000 fb60 	bl	8005cd0 <drawStopwatch>
	drawStopwatchLap(stopwatchVars.lapCurrent-stopwatchVars.lapPrev, hspi);
 8005610:	4b13      	ldr	r3, [pc, #76]	; (8005660 <updateStopwatchDisplay+0x6c>)
 8005612:	685a      	ldr	r2, [r3, #4]
 8005614:	4b12      	ldr	r3, [pc, #72]	; (8005660 <updateStopwatchDisplay+0x6c>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	0011      	movs	r1, r2
 800561e:	0018      	movs	r0, r3
 8005620:	f000 fb8e 	bl	8005d40 <drawStopwatchLap>

	if (isStopwatchRunning == 0) drawButtonText("run", "lap", "clear", hspi);
 8005624:	4b0f      	ldr	r3, [pc, #60]	; (8005664 <updateStopwatchDisplay+0x70>)
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b00      	cmp	r3, #0
 800562c:	d106      	bne.n	800563c <updateStopwatchDisplay+0x48>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a0d      	ldr	r2, [pc, #52]	; (8005668 <updateStopwatchDisplay+0x74>)
 8005632:	490e      	ldr	r1, [pc, #56]	; (800566c <updateStopwatchDisplay+0x78>)
 8005634:	480e      	ldr	r0, [pc, #56]	; (8005670 <updateStopwatchDisplay+0x7c>)
 8005636:	f000 f87f 	bl	8005738 <drawButtonText>
	else if (isStopwatchRunning == 1) drawButtonText("pause", "lap", "clear", hspi);
}
 800563a:	e00a      	b.n	8005652 <updateStopwatchDisplay+0x5e>
	else if (isStopwatchRunning == 1) drawButtonText("pause", "lap", "clear", hspi);
 800563c:	4b09      	ldr	r3, [pc, #36]	; (8005664 <updateStopwatchDisplay+0x70>)
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	b2db      	uxtb	r3, r3
 8005642:	2b01      	cmp	r3, #1
 8005644:	d105      	bne.n	8005652 <updateStopwatchDisplay+0x5e>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a07      	ldr	r2, [pc, #28]	; (8005668 <updateStopwatchDisplay+0x74>)
 800564a:	4908      	ldr	r1, [pc, #32]	; (800566c <updateStopwatchDisplay+0x78>)
 800564c:	4809      	ldr	r0, [pc, #36]	; (8005674 <updateStopwatchDisplay+0x80>)
 800564e:	f000 f873 	bl	8005738 <drawButtonText>
}
 8005652:	46c0      	nop			; (mov r8, r8)
 8005654:	46bd      	mov	sp, r7
 8005656:	b002      	add	sp, #8
 8005658:	bd80      	pop	{r7, pc}
 800565a:	46c0      	nop			; (mov r8, r8)
 800565c:	20000194 	.word	0x20000194
 8005660:	20000128 	.word	0x20000128
 8005664:	20000144 	.word	0x20000144
 8005668:	0800ac4c 	.word	0x0800ac4c
 800566c:	0800acb4 	.word	0x0800acb4
 8005670:	0800ac5c 	.word	0x0800ac5c
 8005674:	0800ac54 	.word	0x0800ac54

08005678 <drawButton>:

// ---- drawing functions related specifically to the user interface ----
// draws a 10x10 box representing a button onto the screen
void drawButton(uint8_t x_center, uint8_t y_center, SPI_HandleTypeDef *hspi) {
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af02      	add	r7, sp, #8
 800567e:	603a      	str	r2, [r7, #0]
 8005680:	1dfb      	adds	r3, r7, #7
 8005682:	1c02      	adds	r2, r0, #0
 8005684:	701a      	strb	r2, [r3, #0]
 8005686:	1dbb      	adds	r3, r7, #6
 8005688:	1c0a      	adds	r2, r1, #0
 800568a:	701a      	strb	r2, [r3, #0]
	// bounds checking. probably already done in draw/fillRect
	if (x_center-5 < 0 || x_center+5 > WIDTH || y_center-5 < 0 || y_center+5 > HEIGHT) return;
 800568c:	1dfb      	adds	r3, r7, #7
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	3b05      	subs	r3, #5
 8005692:	2b00      	cmp	r3, #0
 8005694:	db2f      	blt.n	80056f6 <drawButton+0x7e>
 8005696:	1dfb      	adds	r3, r7, #7
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	3305      	adds	r3, #5
 800569c:	2b80      	cmp	r3, #128	; 0x80
 800569e:	dc2a      	bgt.n	80056f6 <drawButton+0x7e>
 80056a0:	1dbb      	adds	r3, r7, #6
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	3b05      	subs	r3, #5
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	db25      	blt.n	80056f6 <drawButton+0x7e>
 80056aa:	1dbb      	adds	r3, r7, #6
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	3305      	adds	r3, #5
 80056b0:	2ba0      	cmp	r3, #160	; 0xa0
 80056b2:	dc20      	bgt.n	80056f6 <drawButton+0x7e>

	// draw rect size 8 with 1 pixel border
	// parameters give center position of graphic
	drawRect(x_center-5, y_center-5, 10, 10, ST77XX_BLACK, hspi);
 80056b4:	1dfb      	adds	r3, r7, #7
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	3b05      	subs	r3, #5
 80056ba:	b2d8      	uxtb	r0, r3
 80056bc:	1dbb      	adds	r3, r7, #6
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	3b05      	subs	r3, #5
 80056c2:	b2d9      	uxtb	r1, r3
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	9301      	str	r3, [sp, #4]
 80056c8:	2300      	movs	r3, #0
 80056ca:	9300      	str	r3, [sp, #0]
 80056cc:	230a      	movs	r3, #10
 80056ce:	220a      	movs	r2, #10
 80056d0:	f7fb ffa9 	bl	8001626 <drawRect>
	fillRect(x_center-4, y_center-4, 8, 8, ST77XX_WHITE, hspi);
 80056d4:	1dfb      	adds	r3, r7, #7
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	3b04      	subs	r3, #4
 80056da:	b2d8      	uxtb	r0, r3
 80056dc:	1dbb      	adds	r3, r7, #6
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	3b04      	subs	r3, #4
 80056e2:	b2d9      	uxtb	r1, r3
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	9301      	str	r3, [sp, #4]
 80056e8:	4b05      	ldr	r3, [pc, #20]	; (8005700 <drawButton+0x88>)
 80056ea:	9300      	str	r3, [sp, #0]
 80056ec:	2308      	movs	r3, #8
 80056ee:	2208      	movs	r2, #8
 80056f0:	f7fb fff1 	bl	80016d6 <fillRect>
 80056f4:	e000      	b.n	80056f8 <drawButton+0x80>
	if (x_center-5 < 0 || x_center+5 > WIDTH || y_center-5 < 0 || y_center+5 > HEIGHT) return;
 80056f6:	46c0      	nop			; (mov r8, r8)
}
 80056f8:	46bd      	mov	sp, r7
 80056fa:	b002      	add	sp, #8
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	46c0      	nop			; (mov r8, r8)
 8005700:	0000ffff 	.word	0x0000ffff

08005704 <drawButtons>:

// draws 3 buttons to represent important ui buttons and tell the user their action
void drawButtons(SPI_HandleTypeDef *hspi) {
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
	// 3 buttons. positioned so their text boxes, which are centered over button, can have equal spacing left and right
	drawButton(22, HEIGHT-15, hspi);		// button 1
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	001a      	movs	r2, r3
 8005710:	2191      	movs	r1, #145	; 0x91
 8005712:	2016      	movs	r0, #22
 8005714:	f7ff ffb0 	bl	8005678 <drawButton>
	drawButton(64, HEIGHT-15, hspi);		// button 2
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	001a      	movs	r2, r3
 800571c:	2191      	movs	r1, #145	; 0x91
 800571e:	2040      	movs	r0, #64	; 0x40
 8005720:	f7ff ffaa 	bl	8005678 <drawButton>
	drawButton(106, HEIGHT-15, hspi);		// button 3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	001a      	movs	r2, r3
 8005728:	2191      	movs	r1, #145	; 0x91
 800572a:	206a      	movs	r0, #106	; 0x6a
 800572c:	f7ff ffa4 	bl	8005678 <drawButton>
}
 8005730:	46c0      	nop			; (mov r8, r8)
 8005732:	46bd      	mov	sp, r7
 8005734:	b002      	add	sp, #8
 8005736:	bd80      	pop	{r7, pc}

08005738 <drawButtonText>:

// draws text that goes a few pixels over the button
void drawButtonText(const char *str1, const char *str2, const char *str3, SPI_HandleTypeDef *hspi) {
 8005738:	b580      	push	{r7, lr}
 800573a:	b086      	sub	sp, #24
 800573c:	af02      	add	r7, sp, #8
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]
 8005744:	603b      	str	r3, [r7, #0]
	setTextSize(1);
 8005746:	2001      	movs	r0, #1
 8005748:	f7fc fdde 	bl	8002308 <setTextSize>
	setTextColor(ST77XX_BLACK);
 800574c:	2000      	movs	r0, #0
 800574e:	f7fc fdeb 	bl	8002328 <setTextColor>
	drawCenteredTextWithPadding(22, HEIGHT-28, 7, str1, hspi);		// button 1
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	9300      	str	r3, [sp, #0]
 8005758:	0013      	movs	r3, r2
 800575a:	2207      	movs	r2, #7
 800575c:	2184      	movs	r1, #132	; 0x84
 800575e:	2016      	movs	r0, #22
 8005760:	f7fc fcb0 	bl	80020c4 <drawCenteredTextWithPadding>
	drawCenteredTextWithPadding(64, HEIGHT-28, 7, str2, hspi);		// button 2
 8005764:	68ba      	ldr	r2, [r7, #8]
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	9300      	str	r3, [sp, #0]
 800576a:	0013      	movs	r3, r2
 800576c:	2207      	movs	r2, #7
 800576e:	2184      	movs	r1, #132	; 0x84
 8005770:	2040      	movs	r0, #64	; 0x40
 8005772:	f7fc fca7 	bl	80020c4 <drawCenteredTextWithPadding>
	drawCenteredTextWithPadding(106, HEIGHT-28, 7, str3, hspi);		// button 3
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	9300      	str	r3, [sp, #0]
 800577c:	0013      	movs	r3, r2
 800577e:	2207      	movs	r2, #7
 8005780:	2184      	movs	r1, #132	; 0x84
 8005782:	206a      	movs	r0, #106	; 0x6a
 8005784:	f7fc fc9e 	bl	80020c4 <drawCenteredTextWithPadding>
}
 8005788:	46c0      	nop			; (mov r8, r8)
 800578a:	46bd      	mov	sp, r7
 800578c:	b004      	add	sp, #16
 800578e:	bd80      	pop	{r7, pc}

08005790 <drawTitle>:

// draws big text on top of the display
void drawTitle(char *str, SPI_HandleTypeDef *hspi) {
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
	uint8_t strSize = strlen(str);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	0018      	movs	r0, r3
 800579e:	f7fa fcb3 	bl	8000108 <strlen>
 80057a2:	0002      	movs	r2, r0
 80057a4:	210f      	movs	r1, #15
 80057a6:	187b      	adds	r3, r7, r1
 80057a8:	701a      	strb	r2, [r3, #0]

	// drawing title
	// bounds checking
	if (12*strSize < WIDTH) {			// about string size = 10 for width = 128
 80057aa:	187b      	adds	r3, r7, r1
 80057ac:	781a      	ldrb	r2, [r3, #0]
 80057ae:	0013      	movs	r3, r2
 80057b0:	005b      	lsls	r3, r3, #1
 80057b2:	189b      	adds	r3, r3, r2
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	2b7f      	cmp	r3, #127	; 0x7f
 80057b8:	dc14      	bgt.n	80057e4 <drawTitle+0x54>
		setTextSize(2);
 80057ba:	2002      	movs	r0, #2
 80057bc:	f7fc fda4 	bl	8002308 <setTextSize>
		setCursor((WIDTH-12*strSize)/2, 10);
 80057c0:	230f      	movs	r3, #15
 80057c2:	18fb      	adds	r3, r7, r3
 80057c4:	781a      	ldrb	r2, [r3, #0]
 80057c6:	0013      	movs	r3, r2
 80057c8:	0092      	lsls	r2, r2, #2
 80057ca:	1a9b      	subs	r3, r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	3380      	adds	r3, #128	; 0x80
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	da00      	bge.n	80057d6 <drawTitle+0x46>
 80057d4:	3301      	adds	r3, #1
 80057d6:	105b      	asrs	r3, r3, #1
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	210a      	movs	r1, #10
 80057dc:	0018      	movs	r0, r3
 80057de:	f7fc fd79 	bl	80022d4 <setCursor>
 80057e2:	e039      	b.n	8005858 <drawTitle+0xc8>
	}
	else if (6*strSize < WIDTH) {		// about string size = 21 for width = 128
 80057e4:	230f      	movs	r3, #15
 80057e6:	18fb      	adds	r3, r7, r3
 80057e8:	781a      	ldrb	r2, [r3, #0]
 80057ea:	0013      	movs	r3, r2
 80057ec:	005b      	lsls	r3, r3, #1
 80057ee:	189b      	adds	r3, r3, r2
 80057f0:	005b      	lsls	r3, r3, #1
 80057f2:	2b7f      	cmp	r3, #127	; 0x7f
 80057f4:	dc14      	bgt.n	8005820 <drawTitle+0x90>
		setTextSize(1);
 80057f6:	2001      	movs	r0, #1
 80057f8:	f7fc fd86 	bl	8002308 <setTextSize>
		setCursor((WIDTH-6*strSize)/2, 10);
 80057fc:	230f      	movs	r3, #15
 80057fe:	18fb      	adds	r3, r7, r3
 8005800:	781a      	ldrb	r2, [r3, #0]
 8005802:	0013      	movs	r3, r2
 8005804:	0092      	lsls	r2, r2, #2
 8005806:	1a9b      	subs	r3, r3, r2
 8005808:	005b      	lsls	r3, r3, #1
 800580a:	3380      	adds	r3, #128	; 0x80
 800580c:	2b00      	cmp	r3, #0
 800580e:	da00      	bge.n	8005812 <drawTitle+0x82>
 8005810:	3301      	adds	r3, #1
 8005812:	105b      	asrs	r3, r3, #1
 8005814:	b2db      	uxtb	r3, r3
 8005816:	210a      	movs	r1, #10
 8005818:	0018      	movs	r0, r3
 800581a:	f7fc fd5b 	bl	80022d4 <setCursor>
 800581e:	e01b      	b.n	8005858 <drawTitle+0xc8>
	}
	else {
		setTextSize(1);
 8005820:	2001      	movs	r0, #1
 8005822:	f7fc fd71 	bl	8002308 <setTextSize>
		sprintf(str, "it's too long");		// should not need to worry about null access, since this string is shorter than case above
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	4b12      	ldr	r3, [pc, #72]	; (8005874 <drawTitle+0xe4>)
 800582a:	0010      	movs	r0, r2
 800582c:	0019      	movs	r1, r3
 800582e:	230e      	movs	r3, #14
 8005830:	001a      	movs	r2, r3
 8005832:	f004 fd0b 	bl	800a24c <memcpy>
		setCursor((WIDTH-6*strSize)/2, 10);
 8005836:	230f      	movs	r3, #15
 8005838:	18fb      	adds	r3, r7, r3
 800583a:	781a      	ldrb	r2, [r3, #0]
 800583c:	0013      	movs	r3, r2
 800583e:	0092      	lsls	r2, r2, #2
 8005840:	1a9b      	subs	r3, r3, r2
 8005842:	005b      	lsls	r3, r3, #1
 8005844:	3380      	adds	r3, #128	; 0x80
 8005846:	2b00      	cmp	r3, #0
 8005848:	da00      	bge.n	800584c <drawTitle+0xbc>
 800584a:	3301      	adds	r3, #1
 800584c:	105b      	asrs	r3, r3, #1
 800584e:	b2db      	uxtb	r3, r3
 8005850:	210a      	movs	r1, #10
 8005852:	0018      	movs	r0, r3
 8005854:	f7fc fd3e 	bl	80022d4 <setCursor>
	}

	setTextColor(ST77XX_BLACK);
 8005858:	2000      	movs	r0, #0
 800585a:	f7fc fd65 	bl	8002328 <setTextColor>
	drawText(str, hspi);
 800585e:	683a      	ldr	r2, [r7, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	0011      	movs	r1, r2
 8005864:	0018      	movs	r0, r3
 8005866:	f7fc fb4d 	bl	8001f04 <drawText>
}
 800586a:	46c0      	nop			; (mov r8, r8)
 800586c:	46bd      	mov	sp, r7
 800586e:	b004      	add	sp, #16
 8005870:	bd80      	pop	{r7, pc}
 8005872:	46c0      	nop			; (mov r8, r8)
 8005874:	0800acb8 	.word	0x0800acb8

08005878 <drawBattery>:

// draws a battery graphic to represent current battery level
void drawBattery(uint8_t batteryLevel, SPI_HandleTypeDef *hspi) {
 8005878:	b590      	push	{r4, r7, lr}
 800587a:	b087      	sub	sp, #28
 800587c:	af02      	add	r7, sp, #8
 800587e:	0002      	movs	r2, r0
 8005880:	6039      	str	r1, [r7, #0]
 8005882:	1dfb      	adds	r3, r7, #7
 8005884:	701a      	strb	r2, [r3, #0]
	// doesn't move and is used on an empty screen, so shouldn't need to clear then print
	char str[5];

	// drawing battery symbol. hard coded to be 6x13, upper left corner on (49,26)
	drawVLine(49, 28, 10, ST77XX_BLACK, hspi);		// left col
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	9300      	str	r3, [sp, #0]
 800588a:	2300      	movs	r3, #0
 800588c:	220a      	movs	r2, #10
 800588e:	211c      	movs	r1, #28
 8005890:	2031      	movs	r0, #49	; 0x31
 8005892:	f7fb fdd7 	bl	8001444 <drawVLine>
	drawVLine(54, 28, 10, ST77XX_BLACK, hspi);		// right col
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	9300      	str	r3, [sp, #0]
 800589a:	2300      	movs	r3, #0
 800589c:	220a      	movs	r2, #10
 800589e:	211c      	movs	r1, #28
 80058a0:	2036      	movs	r0, #54	; 0x36
 80058a2:	f7fb fdcf 	bl	8001444 <drawVLine>
	drawHLine(50, 38, 4, ST77XX_BLACK, hspi);		// bottom
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	9300      	str	r3, [sp, #0]
 80058aa:	2300      	movs	r3, #0
 80058ac:	2204      	movs	r2, #4
 80058ae:	2126      	movs	r1, #38	; 0x26
 80058b0:	2032      	movs	r0, #50	; 0x32
 80058b2:	f7fb fd21 	bl	80012f8 <drawHLine>
	drawHLine(50, 27, 4, ST77XX_BLACK, hspi);		// top bottom level
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	9300      	str	r3, [sp, #0]
 80058ba:	2300      	movs	r3, #0
 80058bc:	2204      	movs	r2, #4
 80058be:	211b      	movs	r1, #27
 80058c0:	2032      	movs	r0, #50	; 0x32
 80058c2:	f7fb fd19 	bl	80012f8 <drawHLine>
	drawHLine(51, 26, 2, ST77XX_BLACK, hspi);		// top upper level
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	9300      	str	r3, [sp, #0]
 80058ca:	2300      	movs	r3, #0
 80058cc:	2202      	movs	r2, #2
 80058ce:	211a      	movs	r1, #26
 80058d0:	2033      	movs	r0, #51	; 0x33
 80058d2:	f7fb fd11 	bl	80012f8 <drawHLine>

	// start filling in green/red box depending on battery level
	uint16_t color = ST77XX_GREEN;
 80058d6:	230e      	movs	r3, #14
 80058d8:	18fb      	adds	r3, r7, r3
 80058da:	22fc      	movs	r2, #252	; 0xfc
 80058dc:	00d2      	lsls	r2, r2, #3
 80058de:	801a      	strh	r2, [r3, #0]
	if (batteryLevel < 20) color = ST77XX_RED;
 80058e0:	1dfb      	adds	r3, r7, #7
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	2b13      	cmp	r3, #19
 80058e6:	d803      	bhi.n	80058f0 <drawBattery+0x78>
 80058e8:	230e      	movs	r3, #14
 80058ea:	18fb      	adds	r3, r7, r3
 80058ec:	4a2c      	ldr	r2, [pc, #176]	; (80059a0 <drawBattery+0x128>)
 80058ee:	801a      	strh	r2, [r3, #0]
	fillRect(50, 28+(100-batteryLevel)/10, 4, (batteryLevel+9)/10, color, hspi);	// +9 to avoid having to use float and round()
 80058f0:	1dfb      	adds	r3, r7, #7
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	2264      	movs	r2, #100	; 0x64
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	210a      	movs	r1, #10
 80058fa:	0018      	movs	r0, r3
 80058fc:	f7fa fc96 	bl	800022c <__divsi3>
 8005900:	0003      	movs	r3, r0
 8005902:	b2db      	uxtb	r3, r3
 8005904:	331c      	adds	r3, #28
 8005906:	b2dc      	uxtb	r4, r3
 8005908:	1dfb      	adds	r3, r7, #7
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	3309      	adds	r3, #9
 800590e:	210a      	movs	r1, #10
 8005910:	0018      	movs	r0, r3
 8005912:	f7fa fc8b 	bl	800022c <__divsi3>
 8005916:	0003      	movs	r3, r0
 8005918:	b2da      	uxtb	r2, r3
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	9301      	str	r3, [sp, #4]
 800591e:	230e      	movs	r3, #14
 8005920:	18fb      	adds	r3, r7, r3
 8005922:	881b      	ldrh	r3, [r3, #0]
 8005924:	9300      	str	r3, [sp, #0]
 8005926:	0013      	movs	r3, r2
 8005928:	2204      	movs	r2, #4
 800592a:	0021      	movs	r1, r4
 800592c:	2032      	movs	r0, #50	; 0x32
 800592e:	f7fb fed2 	bl	80016d6 <fillRect>
	fillRect(50, 28, 4, (100-batteryLevel)/10, ST77XX_WHITE, hspi);
 8005932:	1dfb      	adds	r3, r7, #7
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	2264      	movs	r2, #100	; 0x64
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	210a      	movs	r1, #10
 800593c:	0018      	movs	r0, r3
 800593e:	f7fa fc75 	bl	800022c <__divsi3>
 8005942:	0003      	movs	r3, r0
 8005944:	b2da      	uxtb	r2, r3
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	9301      	str	r3, [sp, #4]
 800594a:	4b16      	ldr	r3, [pc, #88]	; (80059a4 <drawBattery+0x12c>)
 800594c:	9300      	str	r3, [sp, #0]
 800594e:	0013      	movs	r3, r2
 8005950:	2204      	movs	r2, #4
 8005952:	211c      	movs	r1, #28
 8005954:	2032      	movs	r0, #50	; 0x32
 8005956:	f7fb febe 	bl	80016d6 <fillRect>

	// draw numerical text
	setTextSize(1);
 800595a:	2001      	movs	r0, #1
 800595c:	f7fc fcd4 	bl	8002308 <setTextSize>
	if (batteryLevel >= 20) color = ST77XX_BLACK;		// reusing variable for more obfuscated code.
 8005960:	1dfb      	adds	r3, r7, #7
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	2b13      	cmp	r3, #19
 8005966:	d903      	bls.n	8005970 <drawBattery+0xf8>
 8005968:	230e      	movs	r3, #14
 800596a:	18fb      	adds	r3, r7, r3
 800596c:	2200      	movs	r2, #0
 800596e:	801a      	strh	r2, [r3, #0]
	setTextColor(color);
 8005970:	230e      	movs	r3, #14
 8005972:	18fb      	adds	r3, r7, r3
 8005974:	881b      	ldrh	r3, [r3, #0]
 8005976:	0018      	movs	r0, r3
 8005978:	f7fc fcd6 	bl	8002328 <setTextColor>
	sprintf(str, "%3d%%", batteryLevel);
 800597c:	1dfb      	adds	r3, r7, #7
 800597e:	781a      	ldrb	r2, [r3, #0]
 8005980:	4909      	ldr	r1, [pc, #36]	; (80059a8 <drawBattery+0x130>)
 8005982:	2408      	movs	r4, #8
 8005984:	193b      	adds	r3, r7, r4
 8005986:	0018      	movs	r0, r3
 8005988:	f004 fcf0 	bl	800a36c <siprintf>
	drawTextAt(55, 31, str, hspi);
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	193a      	adds	r2, r7, r4
 8005990:	211f      	movs	r1, #31
 8005992:	2037      	movs	r0, #55	; 0x37
 8005994:	f7fc faec 	bl	8001f70 <drawTextAt>
}
 8005998:	46c0      	nop			; (mov r8, r8)
 800599a:	46bd      	mov	sp, r7
 800599c:	b005      	add	sp, #20
 800599e:	bd90      	pop	{r4, r7, pc}
 80059a0:	fffff800 	.word	0xfffff800
 80059a4:	0000ffff 	.word	0x0000ffff
 80059a8:	0800acc8 	.word	0x0800acc8

080059ac <drawClock>:

// draw time and date on screen
void drawClock(struct dates *d, struct times *t, SPI_HandleTypeDef *hspi) {
 80059ac:	b5b0      	push	{r4, r5, r7, lr}
 80059ae:	b090      	sub	sp, #64	; 0x40
 80059b0:	af02      	add	r7, sp, #8
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
	// notes on paper.
	char str[40];

	// no need to draw padding for those that always have the same length
	// drawing hr and min, 12-hr format
	if (t->hr % 12 == 0) sprintf(str, "%2d:%02d", 12, t->min);
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	210c      	movs	r1, #12
 80059be:	0018      	movs	r0, r3
 80059c0:	f7fa fc30 	bl	8000224 <__aeabi_uidivmod>
 80059c4:	000b      	movs	r3, r1
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d108      	bne.n	80059de <drawClock+0x32>
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	785b      	ldrb	r3, [r3, #1]
 80059d0:	493c      	ldr	r1, [pc, #240]	; (8005ac4 <drawClock+0x118>)
 80059d2:	2210      	movs	r2, #16
 80059d4:	18b8      	adds	r0, r7, r2
 80059d6:	220c      	movs	r2, #12
 80059d8:	f004 fcc8 	bl	800a36c <siprintf>
 80059dc:	e00f      	b.n	80059fe <drawClock+0x52>
	else sprintf(str, "%2d:%02d", t->hr%12, t->min);
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	210c      	movs	r1, #12
 80059e4:	0018      	movs	r0, r3
 80059e6:	f7fa fc1d 	bl	8000224 <__aeabi_uidivmod>
 80059ea:	000b      	movs	r3, r1
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	001a      	movs	r2, r3
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	785b      	ldrb	r3, [r3, #1]
 80059f4:	4933      	ldr	r1, [pc, #204]	; (8005ac4 <drawClock+0x118>)
 80059f6:	2010      	movs	r0, #16
 80059f8:	1838      	adds	r0, r7, r0
 80059fa:	f004 fcb7 	bl	800a36c <siprintf>
	setTextSize(3);
 80059fe:	2003      	movs	r0, #3
 8005a00:	f7fc fc82 	bl	8002308 <setTextSize>
	setTextColor(ST77XX_BLACK);
 8005a04:	2000      	movs	r0, #0
 8005a06:	f7fc fc8f 	bl	8002328 <setTextColor>
	drawCenteredText(52, 60, str, hspi);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2410      	movs	r4, #16
 8005a0e:	193a      	adds	r2, r7, r4
 8005a10:	213c      	movs	r1, #60	; 0x3c
 8005a12:	2034      	movs	r0, #52	; 0x34
 8005a14:	f7fc faf4 	bl	8002000 <drawCenteredText>

	// drawing sec
	sprintf(str, "%02d", t->sec);
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	789b      	ldrb	r3, [r3, #2]
 8005a1c:	001a      	movs	r2, r3
 8005a1e:	492a      	ldr	r1, [pc, #168]	; (8005ac8 <drawClock+0x11c>)
 8005a20:	193b      	adds	r3, r7, r4
 8005a22:	0018      	movs	r0, r3
 8005a24:	f004 fca2 	bl	800a36c <siprintf>
	setTextSize(2);
 8005a28:	2002      	movs	r0, #2
 8005a2a:	f7fc fc6d 	bl	8002308 <setTextSize>
	drawCenteredText(109, 68, str, hspi);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	193a      	adds	r2, r7, r4
 8005a32:	2144      	movs	r1, #68	; 0x44
 8005a34:	206d      	movs	r0, #109	; 0x6d
 8005a36:	f7fc fae3 	bl	8002000 <drawCenteredText>

	// drawing AM/PM text
	setTextSize(1);
 8005a3a:	2001      	movs	r0, #1
 8005a3c:	f7fc fc64 	bl	8002308 <setTextSize>
	if (t->hr < 12) drawCenteredText(103, 60, "AM", hspi);
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	2b0b      	cmp	r3, #11
 8005a46:	d806      	bhi.n	8005a56 <drawClock+0xaa>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a20      	ldr	r2, [pc, #128]	; (8005acc <drawClock+0x120>)
 8005a4c:	213c      	movs	r1, #60	; 0x3c
 8005a4e:	2067      	movs	r0, #103	; 0x67
 8005a50:	f7fc fad6 	bl	8002000 <drawCenteredText>
 8005a54:	e005      	b.n	8005a62 <drawClock+0xb6>
	else drawCenteredText(103, 60, "PM", hspi);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a1d      	ldr	r2, [pc, #116]	; (8005ad0 <drawClock+0x124>)
 8005a5a:	213c      	movs	r1, #60	; 0x3c
 8005a5c:	2067      	movs	r0, #103	; 0x67
 8005a5e:	f7fc facf 	bl	8002000 <drawCenteredText>

	// drawing date
	setTextSize(1);
 8005a62:	2001      	movs	r0, #1
 8005a64:	f7fc fc50 	bl	8002308 <setTextSize>
	sprintf(str, "%s %d %04d", monthNames[d->month], d->date, d->yr);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	789b      	ldrb	r3, [r3, #2]
 8005a6c:	001a      	movs	r2, r3
 8005a6e:	4b19      	ldr	r3, [pc, #100]	; (8005ad4 <drawClock+0x128>)
 8005a70:	0092      	lsls	r2, r2, #2
 8005a72:	58d2      	ldr	r2, [r2, r3]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	78db      	ldrb	r3, [r3, #3]
 8005a78:	001c      	movs	r4, r3
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	881b      	ldrh	r3, [r3, #0]
 8005a7e:	4916      	ldr	r1, [pc, #88]	; (8005ad8 <drawClock+0x12c>)
 8005a80:	2510      	movs	r5, #16
 8005a82:	1978      	adds	r0, r7, r5
 8005a84:	9300      	str	r3, [sp, #0]
 8005a86:	0023      	movs	r3, r4
 8005a88:	f004 fc70 	bl	800a36c <siprintf>
	drawCenteredTextWithPadding(WIDTH/2, 84, 11, str, hspi);
 8005a8c:	197a      	adds	r2, r7, r5
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	9300      	str	r3, [sp, #0]
 8005a92:	0013      	movs	r3, r2
 8005a94:	220b      	movs	r2, #11
 8005a96:	2154      	movs	r1, #84	; 0x54
 8005a98:	2040      	movs	r0, #64	; 0x40
 8005a9a:	f7fc fb13 	bl	80020c4 <drawCenteredTextWithPadding>

	// drawing weekday
	drawCenteredTextWithPadding(WIDTH/2, 92, 9, weekdayNames[d->weekday], hspi);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	791b      	ldrb	r3, [r3, #4]
 8005aa2:	001a      	movs	r2, r3
 8005aa4:	4b0d      	ldr	r3, [pc, #52]	; (8005adc <drawClock+0x130>)
 8005aa6:	0092      	lsls	r2, r2, #2
 8005aa8:	58d2      	ldr	r2, [r2, r3]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	9300      	str	r3, [sp, #0]
 8005aae:	0013      	movs	r3, r2
 8005ab0:	2209      	movs	r2, #9
 8005ab2:	215c      	movs	r1, #92	; 0x5c
 8005ab4:	2040      	movs	r0, #64	; 0x40
 8005ab6:	f7fc fb05 	bl	80020c4 <drawCenteredTextWithPadding>
}
 8005aba:	46c0      	nop			; (mov r8, r8)
 8005abc:	46bd      	mov	sp, r7
 8005abe:	b00e      	add	sp, #56	; 0x38
 8005ac0:	bdb0      	pop	{r4, r5, r7, pc}
 8005ac2:	46c0      	nop			; (mov r8, r8)
 8005ac4:	0800acd0 	.word	0x0800acd0
 8005ac8:	0800acdc 	.word	0x0800acdc
 8005acc:	0800ace4 	.word	0x0800ace4
 8005ad0:	0800ace8 	.word	0x0800ace8
 8005ad4:	20000034 	.word	0x20000034
 8005ad8:	0800acec 	.word	0x0800acec
 8005adc:	20000014 	.word	0x20000014

08005ae0 <drawTopClock>:

// drawing current time on top of screen when other faces are displayed
void drawTopClock(RTC_HandleTypeDef *hrtc, SPI_HandleTypeDef *hspi) {
 8005ae0:	b590      	push	{r4, r7, lr}
 8005ae2:	b08f      	sub	sp, #60	; 0x3c
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
	char str[40];
	struct times currentTime = {0};
 8005aea:	240c      	movs	r4, #12
 8005aec:	193b      	adds	r3, r7, r4
 8005aee:	0018      	movs	r0, r3
 8005af0:	2303      	movs	r3, #3
 8005af2:	001a      	movs	r2, r3
 8005af4:	2100      	movs	r1, #0
 8005af6:	f004 fbb2 	bl	800a25e <memset>
	getTime(&currentTime, hrtc);
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	193b      	adds	r3, r7, r4
 8005afe:	0011      	movs	r1, r2
 8005b00:	0018      	movs	r0, r3
 8005b02:	f7fc fec1 	bl	8002888 <getTime>

	if (currentTime.hr % 12 == 0) sprintf(str, "%2d:%02d", 12, currentTime.min);
 8005b06:	193b      	adds	r3, r7, r4
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	210c      	movs	r1, #12
 8005b0c:	0018      	movs	r0, r3
 8005b0e:	f7fa fb89 	bl	8000224 <__aeabi_uidivmod>
 8005b12:	000b      	movs	r3, r1
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d109      	bne.n	8005b2e <drawTopClock+0x4e>
 8005b1a:	230c      	movs	r3, #12
 8005b1c:	18fb      	adds	r3, r7, r3
 8005b1e:	785b      	ldrb	r3, [r3, #1]
 8005b20:	491d      	ldr	r1, [pc, #116]	; (8005b98 <drawTopClock+0xb8>)
 8005b22:	2210      	movs	r2, #16
 8005b24:	18b8      	adds	r0, r7, r2
 8005b26:	220c      	movs	r2, #12
 8005b28:	f004 fc20 	bl	800a36c <siprintf>
 8005b2c:	e010      	b.n	8005b50 <drawTopClock+0x70>
	else sprintf(str, "%2d:%02d", currentTime.hr%12, currentTime.min);
 8005b2e:	240c      	movs	r4, #12
 8005b30:	193b      	adds	r3, r7, r4
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	210c      	movs	r1, #12
 8005b36:	0018      	movs	r0, r3
 8005b38:	f7fa fb74 	bl	8000224 <__aeabi_uidivmod>
 8005b3c:	000b      	movs	r3, r1
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	001a      	movs	r2, r3
 8005b42:	193b      	adds	r3, r7, r4
 8005b44:	785b      	ldrb	r3, [r3, #1]
 8005b46:	4914      	ldr	r1, [pc, #80]	; (8005b98 <drawTopClock+0xb8>)
 8005b48:	2010      	movs	r0, #16
 8005b4a:	1838      	adds	r0, r7, r0
 8005b4c:	f004 fc0e 	bl	800a36c <siprintf>
	setTextSize(1);
 8005b50:	2001      	movs	r0, #1
 8005b52:	f7fc fbd9 	bl	8002308 <setTextSize>
	setTextColor(ST77XX_BLACK);
 8005b56:	2000      	movs	r0, #0
 8005b58:	f7fc fbe6 	bl	8002328 <setTextColor>
	drawTextAt(WIDTH/2-21, 1, str, hspi);
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	2210      	movs	r2, #16
 8005b60:	18ba      	adds	r2, r7, r2
 8005b62:	2101      	movs	r1, #1
 8005b64:	202b      	movs	r0, #43	; 0x2b
 8005b66:	f7fc fa03 	bl	8001f70 <drawTextAt>

	if (currentTime.hr < 12) drawTextAt(WIDTH/2+9, 1, "AM", hspi);
 8005b6a:	230c      	movs	r3, #12
 8005b6c:	18fb      	adds	r3, r7, r3
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	2b0b      	cmp	r3, #11
 8005b72:	d806      	bhi.n	8005b82 <drawTopClock+0xa2>
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	4a09      	ldr	r2, [pc, #36]	; (8005b9c <drawTopClock+0xbc>)
 8005b78:	2101      	movs	r1, #1
 8005b7a:	2049      	movs	r0, #73	; 0x49
 8005b7c:	f7fc f9f8 	bl	8001f70 <drawTextAt>
	else drawTextAt(WIDTH/2+9, 1, "PM", hspi);
}
 8005b80:	e005      	b.n	8005b8e <drawTopClock+0xae>
	else drawTextAt(WIDTH/2+9, 1, "PM", hspi);
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	4a06      	ldr	r2, [pc, #24]	; (8005ba0 <drawTopClock+0xc0>)
 8005b86:	2101      	movs	r1, #1
 8005b88:	2049      	movs	r0, #73	; 0x49
 8005b8a:	f7fc f9f1 	bl	8001f70 <drawTextAt>
}
 8005b8e:	46c0      	nop			; (mov r8, r8)
 8005b90:	46bd      	mov	sp, r7
 8005b92:	b00f      	add	sp, #60	; 0x3c
 8005b94:	bd90      	pop	{r4, r7, pc}
 8005b96:	46c0      	nop			; (mov r8, r8)
 8005b98:	0800acd0 	.word	0x0800acd0
 8005b9c:	0800ace4 	.word	0x0800ace4
 8005ba0:	0800ace8 	.word	0x0800ace8

08005ba4 <drawTimer>:

// drawing timer on screen
void drawTimer(struct times *t, SPI_HandleTypeDef *hspi) {
 8005ba4:	b5b0      	push	{r4, r5, r7, lr}
 8005ba6:	b08e      	sub	sp, #56	; 0x38
 8005ba8:	af02      	add	r7, sp, #8
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
	char str[40];

	// only drawing hr:min:sec of timer
	setTextSize(2);
 8005bae:	2002      	movs	r0, #2
 8005bb0:	f7fc fbaa 	bl	8002308 <setTextSize>
	setTextColor(ST77XX_BLACK);
 8005bb4:	2000      	movs	r0, #0
 8005bb6:	f7fc fbb7 	bl	8002328 <setTextColor>
	sprintf(str, "%2d:%2d:%2d", t->hr, t->min, t->sec);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	001a      	movs	r2, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	785b      	ldrb	r3, [r3, #1]
 8005bc4:	001c      	movs	r4, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	789b      	ldrb	r3, [r3, #2]
 8005bca:	4908      	ldr	r1, [pc, #32]	; (8005bec <drawTimer+0x48>)
 8005bcc:	2508      	movs	r5, #8
 8005bce:	1978      	adds	r0, r7, r5
 8005bd0:	9300      	str	r3, [sp, #0]
 8005bd2:	0023      	movs	r3, r4
 8005bd4:	f004 fbca 	bl	800a36c <siprintf>
	drawCenteredText(WIDTH/2, HEIGHT/2-12, str, hspi);		// about y=68
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	197a      	adds	r2, r7, r5
 8005bdc:	2144      	movs	r1, #68	; 0x44
 8005bde:	2040      	movs	r0, #64	; 0x40
 8005be0:	f7fc fa0e 	bl	8002000 <drawCenteredText>

	// leaving room to draw "timer set!/unset" text
}
 8005be4:	46c0      	nop			; (mov r8, r8)
 8005be6:	46bd      	mov	sp, r7
 8005be8:	b00c      	add	sp, #48	; 0x30
 8005bea:	bdb0      	pop	{r4, r5, r7, pc}
 8005bec:	0800acf8 	.word	0x0800acf8

08005bf0 <drawAlarm>:

// drawing alarm on screen
void drawAlarm(struct alarmTimes *a, SPI_HandleTypeDef *hspi) {
 8005bf0:	b590      	push	{r4, r7, lr}
 8005bf2:	b08f      	sub	sp, #60	; 0x3c
 8005bf4:	af02      	add	r7, sp, #8
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
	char str[40];

	// drawing hr:min:sec
	setTextSize(2);
 8005bfa:	2002      	movs	r0, #2
 8005bfc:	f7fc fb84 	bl	8002308 <setTextSize>
	setTextColor(ST77XX_BLACK);
 8005c00:	2000      	movs	r0, #0
 8005c02:	f7fc fb91 	bl	8002328 <setTextColor>
	if (a->hr % 12 == 0) sprintf(str, "%2d:%2d:%2d", 12, a->min, a->sec);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	210c      	movs	r1, #12
 8005c0c:	0018      	movs	r0, r3
 8005c0e:	f7fa fb09 	bl	8000224 <__aeabi_uidivmod>
 8005c12:	000b      	movs	r3, r1
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d10d      	bne.n	8005c36 <drawAlarm+0x46>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	785b      	ldrb	r3, [r3, #1]
 8005c1e:	001a      	movs	r2, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	789b      	ldrb	r3, [r3, #2]
 8005c24:	4926      	ldr	r1, [pc, #152]	; (8005cc0 <drawAlarm+0xd0>)
 8005c26:	2008      	movs	r0, #8
 8005c28:	1838      	adds	r0, r7, r0
 8005c2a:	9300      	str	r3, [sp, #0]
 8005c2c:	0013      	movs	r3, r2
 8005c2e:	220c      	movs	r2, #12
 8005c30:	f004 fb9c 	bl	800a36c <siprintf>
 8005c34:	e014      	b.n	8005c60 <drawAlarm+0x70>
	else sprintf(str, "%2d:%2d:%2d", a->hr%12, a->min, a->sec);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	210c      	movs	r1, #12
 8005c3c:	0018      	movs	r0, r3
 8005c3e:	f7fa faf1 	bl	8000224 <__aeabi_uidivmod>
 8005c42:	000b      	movs	r3, r1
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	001a      	movs	r2, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	785b      	ldrb	r3, [r3, #1]
 8005c4c:	001c      	movs	r4, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	789b      	ldrb	r3, [r3, #2]
 8005c52:	491b      	ldr	r1, [pc, #108]	; (8005cc0 <drawAlarm+0xd0>)
 8005c54:	2008      	movs	r0, #8
 8005c56:	1838      	adds	r0, r7, r0
 8005c58:	9300      	str	r3, [sp, #0]
 8005c5a:	0023      	movs	r3, r4
 8005c5c:	f004 fb86 	bl	800a36c <siprintf>
	drawCenteredText(WIDTH/2, 68, str, hspi);
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	2208      	movs	r2, #8
 8005c64:	18ba      	adds	r2, r7, r2
 8005c66:	2144      	movs	r1, #68	; 0x44
 8005c68:	2040      	movs	r0, #64	; 0x40
 8005c6a:	f7fc f9c9 	bl	8002000 <drawCenteredText>

	setTextSize(1);
 8005c6e:	2001      	movs	r0, #1
 8005c70:	f7fc fb4a 	bl	8002308 <setTextSize>
	if (a->hr < 12) drawCenteredText(100, 60, "AM", hspi);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	2b0b      	cmp	r3, #11
 8005c7a:	d806      	bhi.n	8005c8a <drawAlarm+0x9a>
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	4a11      	ldr	r2, [pc, #68]	; (8005cc4 <drawAlarm+0xd4>)
 8005c80:	213c      	movs	r1, #60	; 0x3c
 8005c82:	2064      	movs	r0, #100	; 0x64
 8005c84:	f7fc f9bc 	bl	8002000 <drawCenteredText>
 8005c88:	e005      	b.n	8005c96 <drawAlarm+0xa6>
	else drawCenteredText(100, 60, "PM", hspi);
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	4a0e      	ldr	r2, [pc, #56]	; (8005cc8 <drawAlarm+0xd8>)
 8005c8e:	213c      	movs	r1, #60	; 0x3c
 8005c90:	2064      	movs	r0, #100	; 0x64
 8005c92:	f7fc f9b5 	bl	8002000 <drawCenteredText>


	// drawing weekday
	setTextSize(1);
 8005c96:	2001      	movs	r0, #1
 8005c98:	f7fc fb36 	bl	8002308 <setTextSize>
	drawCenteredTextWithPadding(WIDTH/2, 84, 9, weekdayNames[a->weekday], hspi);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	78db      	ldrb	r3, [r3, #3]
 8005ca0:	001a      	movs	r2, r3
 8005ca2:	4b0a      	ldr	r3, [pc, #40]	; (8005ccc <drawAlarm+0xdc>)
 8005ca4:	0092      	lsls	r2, r2, #2
 8005ca6:	58d2      	ldr	r2, [r2, r3]
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	9300      	str	r3, [sp, #0]
 8005cac:	0013      	movs	r3, r2
 8005cae:	2209      	movs	r2, #9
 8005cb0:	2154      	movs	r1, #84	; 0x54
 8005cb2:	2040      	movs	r0, #64	; 0x40
 8005cb4:	f7fc fa06 	bl	80020c4 <drawCenteredTextWithPadding>
}
 8005cb8:	46c0      	nop			; (mov r8, r8)
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	b00d      	add	sp, #52	; 0x34
 8005cbe:	bd90      	pop	{r4, r7, pc}
 8005cc0:	0800acf8 	.word	0x0800acf8
 8005cc4:	0800ace4 	.word	0x0800ace4
 8005cc8:	0800ace8 	.word	0x0800ace8
 8005ccc:	20000014 	.word	0x20000014

08005cd0 <drawStopwatch>:

// drawing stopwatch on screen
void drawStopwatch(uint32_t seconds, SPI_HandleTypeDef *hspi) {
 8005cd0:	b5b0      	push	{r4, r5, r7, lr}
 8005cd2:	b090      	sub	sp, #64	; 0x40
 8005cd4:	af02      	add	r7, sp, #8
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
	struct times t = {0};
 8005cda:	2134      	movs	r1, #52	; 0x34
 8005cdc:	000c      	movs	r4, r1
 8005cde:	187b      	adds	r3, r7, r1
 8005ce0:	0018      	movs	r0, r3
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	001a      	movs	r2, r3
 8005ce6:	2100      	movs	r1, #0
 8005ce8:	f004 fab9 	bl	800a25e <memset>
	char str[40];

	secondsToTime(&t, seconds);
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	0021      	movs	r1, r4
 8005cf0:	000c      	movs	r4, r1
 8005cf2:	187b      	adds	r3, r7, r1
 8005cf4:	0011      	movs	r1, r2
 8005cf6:	0018      	movs	r0, r3
 8005cf8:	f7fc fea9 	bl	8002a4e <secondsToTime>

	// drawing hr:min:sec
	setTextSize(2);
 8005cfc:	2002      	movs	r0, #2
 8005cfe:	f7fc fb03 	bl	8002308 <setTextSize>
	setTextColor(ST77XX_BLACK);
 8005d02:	2000      	movs	r0, #0
 8005d04:	f7fc fb10 	bl	8002328 <setTextColor>
	sprintf(str, "%2d:%2d:%2d", t.hr, t.min, t.sec);
 8005d08:	0021      	movs	r1, r4
 8005d0a:	187b      	adds	r3, r7, r1
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	001a      	movs	r2, r3
 8005d10:	187b      	adds	r3, r7, r1
 8005d12:	785b      	ldrb	r3, [r3, #1]
 8005d14:	001c      	movs	r4, r3
 8005d16:	187b      	adds	r3, r7, r1
 8005d18:	789b      	ldrb	r3, [r3, #2]
 8005d1a:	4908      	ldr	r1, [pc, #32]	; (8005d3c <drawStopwatch+0x6c>)
 8005d1c:	250c      	movs	r5, #12
 8005d1e:	1978      	adds	r0, r7, r5
 8005d20:	9300      	str	r3, [sp, #0]
 8005d22:	0023      	movs	r3, r4
 8005d24:	f004 fb22 	bl	800a36c <siprintf>
	drawCenteredText(WIDTH/2, 68, str, hspi);
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	197a      	adds	r2, r7, r5
 8005d2c:	2144      	movs	r1, #68	; 0x44
 8005d2e:	2040      	movs	r0, #64	; 0x40
 8005d30:	f7fc f966 	bl	8002000 <drawCenteredText>

	// leaving room for lap text
}
 8005d34:	46c0      	nop			; (mov r8, r8)
 8005d36:	46bd      	mov	sp, r7
 8005d38:	b00e      	add	sp, #56	; 0x38
 8005d3a:	bdb0      	pop	{r4, r5, r7, pc}
 8005d3c:	0800acf8 	.word	0x0800acf8

08005d40 <drawStopwatchLap>:

// drawing lap text
void drawStopwatchLap(uint32_t seconds, SPI_HandleTypeDef *hspi) {
 8005d40:	b5b0      	push	{r4, r5, r7, lr}
 8005d42:	b090      	sub	sp, #64	; 0x40
 8005d44:	af02      	add	r7, sp, #8
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
	struct times t = {0};
 8005d4a:	2134      	movs	r1, #52	; 0x34
 8005d4c:	000c      	movs	r4, r1
 8005d4e:	187b      	adds	r3, r7, r1
 8005d50:	0018      	movs	r0, r3
 8005d52:	2303      	movs	r3, #3
 8005d54:	001a      	movs	r2, r3
 8005d56:	2100      	movs	r1, #0
 8005d58:	f004 fa81 	bl	800a25e <memset>
	char str[40];

	secondsToTime(&t, seconds);		// converting
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	0021      	movs	r1, r4
 8005d60:	000c      	movs	r4, r1
 8005d62:	187b      	adds	r3, r7, r1
 8005d64:	0011      	movs	r1, r2
 8005d66:	0018      	movs	r0, r3
 8005d68:	f7fc fe71 	bl	8002a4e <secondsToTime>

	// drawing hr:min:sec
	setTextSize(1);
 8005d6c:	2001      	movs	r0, #1
 8005d6e:	f7fc facb 	bl	8002308 <setTextSize>
	setTextColor(ST77XX_BLACK);
 8005d72:	2000      	movs	r0, #0
 8005d74:	f7fc fad8 	bl	8002328 <setTextColor>
	sprintf(str, "lap: %2d:%2d:%2d", t.hr, t.min, t.sec);
 8005d78:	0021      	movs	r1, r4
 8005d7a:	187b      	adds	r3, r7, r1
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	001a      	movs	r2, r3
 8005d80:	187b      	adds	r3, r7, r1
 8005d82:	785b      	ldrb	r3, [r3, #1]
 8005d84:	001c      	movs	r4, r3
 8005d86:	187b      	adds	r3, r7, r1
 8005d88:	789b      	ldrb	r3, [r3, #2]
 8005d8a:	4908      	ldr	r1, [pc, #32]	; (8005dac <drawStopwatchLap+0x6c>)
 8005d8c:	250c      	movs	r5, #12
 8005d8e:	1978      	adds	r0, r7, r5
 8005d90:	9300      	str	r3, [sp, #0]
 8005d92:	0023      	movs	r3, r4
 8005d94:	f004 faea 	bl	800a36c <siprintf>
	drawCenteredText(WIDTH/2, 84, str, hspi);
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	197a      	adds	r2, r7, r5
 8005d9c:	2154      	movs	r1, #84	; 0x54
 8005d9e:	2040      	movs	r0, #64	; 0x40
 8005da0:	f7fc f92e 	bl	8002000 <drawCenteredText>
}
 8005da4:	46c0      	nop			; (mov r8, r8)
 8005da6:	46bd      	mov	sp, r7
 8005da8:	b00e      	add	sp, #56	; 0x38
 8005daa:	bdb0      	pop	{r4, r5, r7, pc}
 8005dac:	0800ad04 	.word	0x0800ad04

08005db0 <initFace>:
// ---- end of drawing functions ----

// initializes variables. should be called at the start of program
void initFace() {
 8005db0:	b580      	push	{r7, lr}
 8005db2:	af00      	add	r7, sp, #0
	faceOnDisplay = faceClock;
 8005db4:	4b14      	ldr	r3, [pc, #80]	; (8005e08 <initFace+0x58>)
 8005db6:	2200      	movs	r2, #0
 8005db8:	701a      	strb	r2, [r3, #0]
	updateFace.clock = 1;
 8005dba:	4b14      	ldr	r3, [pc, #80]	; (8005e0c <initFace+0x5c>)
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	701a      	strb	r2, [r3, #0]

	// initializing pointers
	clockVars.dateToSet = (struct dates *)calloc(1, sizeof(struct dates *));
 8005dc0:	2104      	movs	r1, #4
 8005dc2:	2001      	movs	r0, #1
 8005dc4:	f004 fa0e 	bl	800a1e4 <calloc>
 8005dc8:	0003      	movs	r3, r0
 8005dca:	001a      	movs	r2, r3
 8005dcc:	4b10      	ldr	r3, [pc, #64]	; (8005e10 <initFace+0x60>)
 8005dce:	605a      	str	r2, [r3, #4]
	clockVars.timeToSet = (struct times *)calloc(1, sizeof(struct times *));
 8005dd0:	2104      	movs	r1, #4
 8005dd2:	2001      	movs	r0, #1
 8005dd4:	f004 fa06 	bl	800a1e4 <calloc>
 8005dd8:	0003      	movs	r3, r0
 8005dda:	001a      	movs	r2, r3
 8005ddc:	4b0c      	ldr	r3, [pc, #48]	; (8005e10 <initFace+0x60>)
 8005dde:	609a      	str	r2, [r3, #8]
	timerVars.timeToSet = (struct times *)calloc(1, sizeof(struct times *));
 8005de0:	2104      	movs	r1, #4
 8005de2:	2001      	movs	r0, #1
 8005de4:	f004 f9fe 	bl	800a1e4 <calloc>
 8005de8:	0003      	movs	r3, r0
 8005dea:	001a      	movs	r2, r3
 8005dec:	4b09      	ldr	r3, [pc, #36]	; (8005e14 <initFace+0x64>)
 8005dee:	605a      	str	r2, [r3, #4]
	alarmVars.alarmToSet = (struct alarmTimes *)calloc(1, sizeof(struct alarmTimes *));
 8005df0:	2104      	movs	r1, #4
 8005df2:	2001      	movs	r0, #1
 8005df4:	f004 f9f6 	bl	800a1e4 <calloc>
 8005df8:	0003      	movs	r3, r0
 8005dfa:	001a      	movs	r2, r3
 8005dfc:	4b06      	ldr	r3, [pc, #24]	; (8005e18 <initFace+0x68>)
 8005dfe:	605a      	str	r2, [r3, #4]
}
 8005e00:	46c0      	nop			; (mov r8, r8)
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	46c0      	nop			; (mov r8, r8)
 8005e08:	20000130 	.word	0x20000130
 8005e0c:	20000140 	.word	0x20000140
 8005e10:	2000010c 	.word	0x2000010c
 8005e14:	20000118 	.word	0x20000118
 8005e18:	20000120 	.word	0x20000120

08005e1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8005e1c:	480d      	ldr	r0, [pc, #52]	; (8005e54 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8005e1e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8005e20:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005e22:	e003      	b.n	8005e2c <LoopCopyDataInit>

08005e24 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005e24:	4b0c      	ldr	r3, [pc, #48]	; (8005e58 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8005e26:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005e28:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005e2a:	3104      	adds	r1, #4

08005e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8005e2c:	480b      	ldr	r0, [pc, #44]	; (8005e5c <LoopForever+0xa>)
  ldr  r3, =_edata
 8005e2e:	4b0c      	ldr	r3, [pc, #48]	; (8005e60 <LoopForever+0xe>)
  adds  r2, r0, r1
 8005e30:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005e32:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005e34:	d3f6      	bcc.n	8005e24 <CopyDataInit>
  ldr  r2, =_sbss
 8005e36:	4a0b      	ldr	r2, [pc, #44]	; (8005e64 <LoopForever+0x12>)
  b  LoopFillZerobss
 8005e38:	e002      	b.n	8005e40 <LoopFillZerobss>

08005e3a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8005e3a:	2300      	movs	r3, #0
  str  r3, [r2]
 8005e3c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005e3e:	3204      	adds	r2, #4

08005e40 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8005e40:	4b09      	ldr	r3, [pc, #36]	; (8005e68 <LoopForever+0x16>)
  cmp  r2, r3
 8005e42:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005e44:	d3f9      	bcc.n	8005e3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005e46:	f7fd ff37 	bl	8003cb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005e4a:	f004 f9db 	bl	800a204 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005e4e:	f7fc feeb 	bl	8002c28 <main>

08005e52 <LoopForever>:

LoopForever:
    b LoopForever
 8005e52:	e7fe      	b.n	8005e52 <LoopForever>
   ldr   r0, =_estack
 8005e54:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8005e58:	0800b3bc 	.word	0x0800b3bc
  ldr  r0, =_sdata
 8005e5c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005e60:	200000d0 	.word	0x200000d0
  ldr  r2, =_sbss
 8005e64:	200000d0 	.word	0x200000d0
  ldr  r3, = _ebss
 8005e68:	200005dc 	.word	0x200005dc

08005e6c <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005e6c:	e7fe      	b.n	8005e6c <DMA1_Channel1_IRQHandler>
	...

08005e70 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005e76:	1dfb      	adds	r3, r7, #7
 8005e78:	2200      	movs	r2, #0
 8005e7a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8005e7c:	4b0b      	ldr	r3, [pc, #44]	; (8005eac <HAL_Init+0x3c>)
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	4b0a      	ldr	r3, [pc, #40]	; (8005eac <HAL_Init+0x3c>)
 8005e82:	2140      	movs	r1, #64	; 0x40
 8005e84:	430a      	orrs	r2, r1
 8005e86:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005e88:	2000      	movs	r0, #0
 8005e8a:	f000 f811 	bl	8005eb0 <HAL_InitTick>
 8005e8e:	1e03      	subs	r3, r0, #0
 8005e90:	d003      	beq.n	8005e9a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8005e92:	1dfb      	adds	r3, r7, #7
 8005e94:	2201      	movs	r2, #1
 8005e96:	701a      	strb	r2, [r3, #0]
 8005e98:	e001      	b.n	8005e9e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005e9a:	f7fd fc95 	bl	80037c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005e9e:	1dfb      	adds	r3, r7, #7
 8005ea0:	781b      	ldrb	r3, [r3, #0]
}
 8005ea2:	0018      	movs	r0, r3
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	b002      	add	sp, #8
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	46c0      	nop			; (mov r8, r8)
 8005eac:	40022000 	.word	0x40022000

08005eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005eb8:	230f      	movs	r3, #15
 8005eba:	18fb      	adds	r3, r7, r3
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8005ec0:	4b0f      	ldr	r3, [pc, #60]	; (8005f00 <HAL_InitTick+0x50>)
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	23fa      	movs	r3, #250	; 0xfa
 8005ec6:	0099      	lsls	r1, r3, #2
 8005ec8:	0010      	movs	r0, r2
 8005eca:	f7fa f925 	bl	8000118 <__udivsi3>
 8005ece:	0003      	movs	r3, r0
 8005ed0:	0018      	movs	r0, r3
 8005ed2:	f000 fc5e 	bl	8006792 <HAL_SYSTICK_Config>
 8005ed6:	1e03      	subs	r3, r0, #0
 8005ed8:	d004      	beq.n	8005ee4 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 8005eda:	230f      	movs	r3, #15
 8005edc:	18fb      	adds	r3, r7, r3
 8005ede:	2201      	movs	r2, #1
 8005ee0:	701a      	strb	r2, [r3, #0]
 8005ee2:	e006      	b.n	8005ef2 <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8005ee4:	6879      	ldr	r1, [r7, #4]
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	425b      	negs	r3, r3
 8005eea:	2200      	movs	r2, #0
 8005eec:	0018      	movs	r0, r3
 8005eee:	f000 fc1b 	bl	8006728 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 8005ef2:	230f      	movs	r3, #15
 8005ef4:	18fb      	adds	r3, r7, r3
 8005ef6:	781b      	ldrb	r3, [r3, #0]
}
 8005ef8:	0018      	movs	r0, r3
 8005efa:	46bd      	mov	sp, r7
 8005efc:	b004      	add	sp, #16
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	20000010 	.word	0x20000010

08005f04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	af00      	add	r7, sp, #0
  uwTick++;
 8005f08:	4b03      	ldr	r3, [pc, #12]	; (8005f18 <HAL_IncTick+0x14>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	1c5a      	adds	r2, r3, #1
 8005f0e:	4b02      	ldr	r3, [pc, #8]	; (8005f18 <HAL_IncTick+0x14>)
 8005f10:	601a      	str	r2, [r3, #0]
}
 8005f12:	46c0      	nop			; (mov r8, r8)
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	200005d4 	.word	0x200005d4

08005f1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8005f20:	4b02      	ldr	r3, [pc, #8]	; (8005f2c <HAL_GetTick+0x10>)
 8005f22:	681b      	ldr	r3, [r3, #0]
}
 8005f24:	0018      	movs	r0, r3
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	46c0      	nop			; (mov r8, r8)
 8005f2c:	200005d4 	.word	0x200005d4

08005f30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005f38:	f7ff fff0 	bl	8005f1c <HAL_GetTick>
 8005f3c:	0003      	movs	r3, r0
 8005f3e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	3301      	adds	r3, #1
 8005f48:	d002      	beq.n	8005f50 <HAL_Delay+0x20>
  {
    wait++;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005f50:	46c0      	nop			; (mov r8, r8)
 8005f52:	f7ff ffe3 	bl	8005f1c <HAL_GetTick>
 8005f56:	0002      	movs	r2, r0
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d8f7      	bhi.n	8005f52 <HAL_Delay+0x22>
  {
  }
}
 8005f62:	46c0      	nop			; (mov r8, r8)
 8005f64:	46bd      	mov	sp, r7
 8005f66:	b004      	add	sp, #16
 8005f68:	bd80      	pop	{r7, pc}
	...

08005f6c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d101      	bne.n	8005f7e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e159      	b.n	8006232 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d10a      	bne.n	8005f9c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2250      	movs	r2, #80	; 0x50
 8005f90:	2100      	movs	r1, #0
 8005f92:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	0018      	movs	r0, r3
 8005f98:	f7fd fc2a 	bl	80037f0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa0:	2210      	movs	r2, #16
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	2b10      	cmp	r3, #16
 8005fa6:	d005      	beq.n	8005fb4 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	2204      	movs	r2, #4
 8005fb0:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8005fb2:	d00b      	beq.n	8005fcc <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fb8:	2210      	movs	r2, #16
 8005fba:	431a      	orrs	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2250      	movs	r2, #80	; 0x50
 8005fc4:	2100      	movs	r1, #0
 8005fc6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e132      	b.n	8006232 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fd0:	4a9a      	ldr	r2, [pc, #616]	; (800623c <HAL_ADC_Init+0x2d0>)
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	2202      	movs	r2, #2
 8005fd6:	431a      	orrs	r2, r3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	2203      	movs	r2, #3
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d108      	bne.n	8005ffc <HAL_ADC_Init+0x90>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d101      	bne.n	8005ffc <HAL_ADC_Init+0x90>
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e000      	b.n	8005ffe <HAL_ADC_Init+0x92>
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d149      	bne.n	8006096 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	685a      	ldr	r2, [r3, #4]
 8006006:	23c0      	movs	r3, #192	; 0xc0
 8006008:	061b      	lsls	r3, r3, #24
 800600a:	429a      	cmp	r2, r3
 800600c:	d00b      	beq.n	8006026 <HAL_ADC_Init+0xba>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	685a      	ldr	r2, [r3, #4]
 8006012:	2380      	movs	r3, #128	; 0x80
 8006014:	05db      	lsls	r3, r3, #23
 8006016:	429a      	cmp	r2, r3
 8006018:	d005      	beq.n	8006026 <HAL_ADC_Init+0xba>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	685a      	ldr	r2, [r3, #4]
 800601e:	2380      	movs	r3, #128	; 0x80
 8006020:	061b      	lsls	r3, r3, #24
 8006022:	429a      	cmp	r2, r3
 8006024:	d111      	bne.n	800604a <HAL_ADC_Init+0xde>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	691a      	ldr	r2, [r3, #16]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	0092      	lsls	r2, r2, #2
 8006032:	0892      	lsrs	r2, r2, #2
 8006034:	611a      	str	r2, [r3, #16]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	6919      	ldr	r1, [r3, #16]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	685a      	ldr	r2, [r3, #4]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	430a      	orrs	r2, r1
 8006046:	611a      	str	r2, [r3, #16]
 8006048:	e014      	b.n	8006074 <HAL_ADC_Init+0x108>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	691a      	ldr	r2, [r3, #16]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	0092      	lsls	r2, r2, #2
 8006056:	0892      	lsrs	r2, r2, #2
 8006058:	611a      	str	r2, [r3, #16]
 800605a:	4b79      	ldr	r3, [pc, #484]	; (8006240 <HAL_ADC_Init+0x2d4>)
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	4b78      	ldr	r3, [pc, #480]	; (8006240 <HAL_ADC_Init+0x2d4>)
 8006060:	4978      	ldr	r1, [pc, #480]	; (8006244 <HAL_ADC_Init+0x2d8>)
 8006062:	400a      	ands	r2, r1
 8006064:	601a      	str	r2, [r3, #0]
 8006066:	4b76      	ldr	r3, [pc, #472]	; (8006240 <HAL_ADC_Init+0x2d4>)
 8006068:	6819      	ldr	r1, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	685a      	ldr	r2, [r3, #4]
 800606e:	4b74      	ldr	r3, [pc, #464]	; (8006240 <HAL_ADC_Init+0x2d4>)
 8006070:	430a      	orrs	r2, r1
 8006072:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68da      	ldr	r2, [r3, #12]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2118      	movs	r1, #24
 8006080:	438a      	bics	r2, r1
 8006082:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68d9      	ldr	r1, [r3, #12]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	689a      	ldr	r2, [r3, #8]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	430a      	orrs	r2, r1
 8006094:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8006096:	4b6a      	ldr	r3, [pc, #424]	; (8006240 <HAL_ADC_Init+0x2d4>)
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	4b69      	ldr	r3, [pc, #420]	; (8006240 <HAL_ADC_Init+0x2d4>)
 800609c:	496a      	ldr	r1, [pc, #424]	; (8006248 <HAL_ADC_Init+0x2dc>)
 800609e:	400a      	ands	r2, r1
 80060a0:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80060a2:	4b67      	ldr	r3, [pc, #412]	; (8006240 <HAL_ADC_Init+0x2d4>)
 80060a4:	6819      	ldr	r1, [r3, #0]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060aa:	065a      	lsls	r2, r3, #25
 80060ac:	4b64      	ldr	r3, [pc, #400]	; (8006240 <HAL_ADC_Init+0x2d4>)
 80060ae:	430a      	orrs	r2, r1
 80060b0:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	689a      	ldr	r2, [r3, #8]
 80060b8:	2380      	movs	r3, #128	; 0x80
 80060ba:	055b      	lsls	r3, r3, #21
 80060bc:	4013      	ands	r3, r2
 80060be:	d108      	bne.n	80060d2 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	689a      	ldr	r2, [r3, #8]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2180      	movs	r1, #128	; 0x80
 80060cc:	0549      	lsls	r1, r1, #21
 80060ce:	430a      	orrs	r2, r1
 80060d0:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68da      	ldr	r2, [r3, #12]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	495b      	ldr	r1, [pc, #364]	; (800624c <HAL_ADC_Init+0x2e0>)
 80060de:	400a      	ands	r2, r1
 80060e0:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68d9      	ldr	r1, [r3, #12]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	2b02      	cmp	r3, #2
 80060f2:	d101      	bne.n	80060f8 <HAL_ADC_Init+0x18c>
 80060f4:	2304      	movs	r3, #4
 80060f6:	e000      	b.n	80060fa <HAL_ADC_Init+0x18e>
 80060f8:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80060fa:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2020      	movs	r0, #32
 8006100:	5c1b      	ldrb	r3, [r3, r0]
 8006102:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8006104:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	202c      	movs	r0, #44	; 0x2c
 800610a:	5c1b      	ldrb	r3, [r3, r0]
 800610c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800610e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8006114:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800611c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	69db      	ldr	r3, [r3, #28]
 8006122:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8006124:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	430a      	orrs	r2, r1
 800612c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006132:	23c2      	movs	r3, #194	; 0xc2
 8006134:	33ff      	adds	r3, #255	; 0xff
 8006136:	429a      	cmp	r2, r3
 8006138:	d00b      	beq.n	8006152 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68d9      	ldr	r1, [r3, #12]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8006148:	431a      	orrs	r2, r3
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	430a      	orrs	r2, r1
 8006150:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2221      	movs	r2, #33	; 0x21
 8006156:	5c9b      	ldrb	r3, [r3, r2]
 8006158:	2b01      	cmp	r3, #1
 800615a:	d11a      	bne.n	8006192 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2220      	movs	r2, #32
 8006160:	5c9b      	ldrb	r3, [r3, r2]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d109      	bne.n	800617a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68da      	ldr	r2, [r3, #12]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2180      	movs	r1, #128	; 0x80
 8006172:	0249      	lsls	r1, r1, #9
 8006174:	430a      	orrs	r2, r1
 8006176:	60da      	str	r2, [r3, #12]
 8006178:	e00b      	b.n	8006192 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800617e:	2220      	movs	r2, #32
 8006180:	431a      	orrs	r2, r3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800618a:	2201      	movs	r2, #1
 800618c:	431a      	orrs	r2, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006196:	2b01      	cmp	r3, #1
 8006198:	d11f      	bne.n	80061da <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	691a      	ldr	r2, [r3, #16]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	492a      	ldr	r1, [pc, #168]	; (8006250 <HAL_ADC_Init+0x2e4>)
 80061a6:	400a      	ands	r2, r1
 80061a8:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	6919      	ldr	r1, [r3, #16]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80061b8:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 80061be:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	430a      	orrs	r2, r1
 80061c6:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	691a      	ldr	r2, [r3, #16]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2101      	movs	r1, #1
 80061d4:	430a      	orrs	r2, r1
 80061d6:	611a      	str	r2, [r3, #16]
 80061d8:	e00e      	b.n	80061f8 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	691b      	ldr	r3, [r3, #16]
 80061e0:	2201      	movs	r2, #1
 80061e2:	4013      	ands	r3, r2
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d107      	bne.n	80061f8 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	691a      	ldr	r2, [r3, #16]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2101      	movs	r1, #1
 80061f4:	438a      	bics	r2, r1
 80061f6:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	695a      	ldr	r2, [r3, #20]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2107      	movs	r1, #7
 8006204:	438a      	bics	r2, r1
 8006206:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	6959      	ldr	r1, [r3, #20]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	430a      	orrs	r2, r1
 8006218:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006224:	2203      	movs	r2, #3
 8006226:	4393      	bics	r3, r2
 8006228:	2201      	movs	r2, #1
 800622a:	431a      	orrs	r2, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	0018      	movs	r0, r3
 8006234:	46bd      	mov	sp, r7
 8006236:	b002      	add	sp, #8
 8006238:	bd80      	pop	{r7, pc}
 800623a:	46c0      	nop			; (mov r8, r8)
 800623c:	fffffefd 	.word	0xfffffefd
 8006240:	40012708 	.word	0x40012708
 8006244:	ffc3ffff 	.word	0xffc3ffff
 8006248:	fdffffff 	.word	0xfdffffff
 800624c:	fffe0219 	.word	0xfffe0219
 8006250:	fffffc03 	.word	0xfffffc03

08006254 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2204      	movs	r2, #4
 8006264:	4013      	ands	r3, r2
 8006266:	2b04      	cmp	r3, #4
 8006268:	d106      	bne.n	8006278 <HAL_ADC_IRQHandler+0x24>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	2204      	movs	r2, #4
 8006272:	4013      	ands	r3, r2
 8006274:	2b04      	cmp	r3, #4
 8006276:	d00d      	beq.n	8006294 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2208      	movs	r2, #8
 8006280:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8006282:	2b08      	cmp	r3, #8
 8006284:	d154      	bne.n	8006330 <HAL_ADC_IRQHandler+0xdc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	2208      	movs	r2, #8
 800628e:	4013      	ands	r3, r2
 8006290:	2b08      	cmp	r3, #8
 8006292:	d14d      	bne.n	8006330 <HAL_ADC_IRQHandler+0xdc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006298:	2210      	movs	r2, #16
 800629a:	4013      	ands	r3, r2
 800629c:	d106      	bne.n	80062ac <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062a2:	2280      	movs	r2, #128	; 0x80
 80062a4:	0092      	lsls	r2, r2, #2
 80062a6:	431a      	orrs	r2, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68da      	ldr	r2, [r3, #12]
 80062b2:	23c0      	movs	r3, #192	; 0xc0
 80062b4:	011b      	lsls	r3, r3, #4
 80062b6:	4013      	ands	r3, r2
 80062b8:	d12e      	bne.n	8006318 <HAL_ADC_IRQHandler+0xc4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2220      	movs	r2, #32
 80062be:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d129      	bne.n	8006318 <HAL_ADC_IRQHandler+0xc4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2208      	movs	r2, #8
 80062cc:	4013      	ands	r3, r2
 80062ce:	2b08      	cmp	r3, #8
 80062d0:	d122      	bne.n	8006318 <HAL_ADC_IRQHandler+0xc4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	2204      	movs	r2, #4
 80062da:	4013      	ands	r3, r2
 80062dc:	d110      	bne.n	8006300 <HAL_ADC_IRQHandler+0xac>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	685a      	ldr	r2, [r3, #4]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	210c      	movs	r1, #12
 80062ea:	438a      	bics	r2, r1
 80062ec:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062f2:	4a35      	ldr	r2, [pc, #212]	; (80063c8 <HAL_ADC_IRQHandler+0x174>)
 80062f4:	4013      	ands	r3, r2
 80062f6:	2201      	movs	r2, #1
 80062f8:	431a      	orrs	r2, r3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	655a      	str	r2, [r3, #84]	; 0x54
 80062fe:	e00b      	b.n	8006318 <HAL_ADC_IRQHandler+0xc4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006304:	2220      	movs	r2, #32
 8006306:	431a      	orrs	r2, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006310:	2201      	movs	r2, #1
 8006312:	431a      	orrs	r2, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	659a      	str	r2, [r3, #88]	; 0x58
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	0018      	movs	r0, r3
 800631c:	f000 f856 	bl	80063cc <HAL_ADC_ConvCpltCallback>
    /* Note: Management of low power auto-wait enabled: flags must be cleared */
    /*       by user when fetching ADC conversion data.                       */
    /*       This case is managed in IRQ handler, but this low-power mode     */
    /*       should not be used with programming model IT or DMA.             */
    /*       Refer to comment of parameter "LowPowerAutoWait".                */
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	699b      	ldr	r3, [r3, #24]
 8006324:	2b01      	cmp	r3, #1
 8006326:	d003      	beq.n	8006330 <HAL_ADC_IRQHandler+0xdc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	220c      	movs	r2, #12
 800632e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2280      	movs	r2, #128	; 0x80
 8006338:	4013      	ands	r3, r2
 800633a:	2b80      	cmp	r3, #128	; 0x80
 800633c:	d115      	bne.n	800636a <HAL_ADC_IRQHandler+0x116>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	2280      	movs	r2, #128	; 0x80
 8006346:	4013      	ands	r3, r2
 8006348:	2b80      	cmp	r3, #128	; 0x80
 800634a:	d10e      	bne.n	800636a <HAL_ADC_IRQHandler+0x116>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006350:	2280      	movs	r2, #128	; 0x80
 8006352:	0252      	lsls	r2, r2, #9
 8006354:	431a      	orrs	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	655a      	str	r2, [r3, #84]	; 0x54
    
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	0018      	movs	r0, r3
 800635e:	f000 f83d 	bl	80063dc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2280      	movs	r2, #128	; 0x80
 8006368:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2210      	movs	r2, #16
 8006372:	4013      	ands	r3, r2
 8006374:	2b10      	cmp	r3, #16
 8006376:	d123      	bne.n	80063c0 <HAL_ADC_IRQHandler+0x16c>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	2210      	movs	r2, #16
 8006380:	4013      	ands	r3, r2
 8006382:	2b10      	cmp	r3, #16
 8006384:	d11c      	bne.n	80063c0 <HAL_ADC_IRQHandler+0x16c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638a:	2b00      	cmp	r3, #0
 800638c:	d006      	beq.n	800639c <HAL_ADC_IRQHandler+0x148>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	2201      	movs	r2, #1
 8006396:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8006398:	2b01      	cmp	r3, #1
 800639a:	d10d      	bne.n	80063b8 <HAL_ADC_IRQHandler+0x164>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063a0:	2202      	movs	r2, #2
 80063a2:	431a      	orrs	r2, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2210      	movs	r2, #16
 80063ae:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	0018      	movs	r0, r3
 80063b4:	f000 f81a 	bl	80063ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2210      	movs	r2, #16
 80063be:	601a      	str	r2, [r3, #0]
  }
  
}
 80063c0:	46c0      	nop			; (mov r8, r8)
 80063c2:	46bd      	mov	sp, r7
 80063c4:	b002      	add	sp, #8
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	fffffefe 	.word	0xfffffefe

080063cc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80063d4:	46c0      	nop			; (mov r8, r8)
 80063d6:	46bd      	mov	sp, r7
 80063d8:	b002      	add	sp, #8
 80063da:	bd80      	pop	{r7, pc}

080063dc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80063e4:	46c0      	nop			; (mov r8, r8)
 80063e6:	46bd      	mov	sp, r7
 80063e8:	b002      	add	sp, #8
 80063ea:	bd80      	pop	{r7, pc}

080063ec <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80063f4:	46c0      	nop			; (mov r8, r8)
 80063f6:	46bd      	mov	sp, r7
 80063f8:	b002      	add	sp, #8
 80063fa:	bd80      	pop	{r7, pc}

080063fc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2250      	movs	r2, #80	; 0x50
 800640a:	5c9b      	ldrb	r3, [r3, r2]
 800640c:	2b01      	cmp	r3, #1
 800640e:	d101      	bne.n	8006414 <HAL_ADC_ConfigChannel+0x18>
 8006410:	2302      	movs	r3, #2
 8006412:	e085      	b.n	8006520 <HAL_ADC_ConfigChannel+0x124>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2250      	movs	r2, #80	; 0x50
 8006418:	2101      	movs	r1, #1
 800641a:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	2204      	movs	r2, #4
 8006424:	4013      	ands	r3, r2
 8006426:	d00b      	beq.n	8006440 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800642c:	2220      	movs	r2, #32
 800642e:	431a      	orrs	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2250      	movs	r2, #80	; 0x50
 8006438:	2100      	movs	r1, #0
 800643a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e06f      	b.n	8006520 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	4a38      	ldr	r2, [pc, #224]	; (8006528 <HAL_ADC_ConfigChannel+0x12c>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d035      	beq.n	80064b6 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	035b      	lsls	r3, r3, #13
 8006456:	0b5a      	lsrs	r2, r3, #13
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	430a      	orrs	r2, r1
 800645e:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	2380      	movs	r3, #128	; 0x80
 8006466:	02db      	lsls	r3, r3, #11
 8006468:	4013      	ands	r3, r2
 800646a:	d009      	beq.n	8006480 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 800646c:	4b2f      	ldr	r3, [pc, #188]	; (800652c <HAL_ADC_ConfigChannel+0x130>)
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	4b2e      	ldr	r3, [pc, #184]	; (800652c <HAL_ADC_ConfigChannel+0x130>)
 8006472:	2180      	movs	r1, #128	; 0x80
 8006474:	0409      	lsls	r1, r1, #16
 8006476:	430a      	orrs	r2, r1
 8006478:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800647a:	200a      	movs	r0, #10
 800647c:	f000 f85e 	bl	800653c <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	2380      	movs	r3, #128	; 0x80
 8006486:	029b      	lsls	r3, r3, #10
 8006488:	4013      	ands	r3, r2
 800648a:	d006      	beq.n	800649a <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 800648c:	4b27      	ldr	r3, [pc, #156]	; (800652c <HAL_ADC_ConfigChannel+0x130>)
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	4b26      	ldr	r3, [pc, #152]	; (800652c <HAL_ADC_ConfigChannel+0x130>)
 8006492:	2180      	movs	r1, #128	; 0x80
 8006494:	03c9      	lsls	r1, r1, #15
 8006496:	430a      	orrs	r2, r1
 8006498:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	2380      	movs	r3, #128	; 0x80
 80064a0:	025b      	lsls	r3, r3, #9
 80064a2:	4013      	ands	r3, r2
 80064a4:	d037      	beq.n	8006516 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 80064a6:	4b21      	ldr	r3, [pc, #132]	; (800652c <HAL_ADC_ConfigChannel+0x130>)
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	4b20      	ldr	r3, [pc, #128]	; (800652c <HAL_ADC_ConfigChannel+0x130>)
 80064ac:	2180      	movs	r1, #128	; 0x80
 80064ae:	0449      	lsls	r1, r1, #17
 80064b0:	430a      	orrs	r2, r1
 80064b2:	601a      	str	r2, [r3, #0]
 80064b4:	e02f      	b.n	8006516 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	035b      	lsls	r3, r3, #13
 80064c2:	0b5b      	lsrs	r3, r3, #13
 80064c4:	43d9      	mvns	r1, r3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	400a      	ands	r2, r1
 80064cc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	2380      	movs	r3, #128	; 0x80
 80064d4:	02db      	lsls	r3, r3, #11
 80064d6:	4013      	ands	r3, r2
 80064d8:	d005      	beq.n	80064e6 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80064da:	4b14      	ldr	r3, [pc, #80]	; (800652c <HAL_ADC_ConfigChannel+0x130>)
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	4b13      	ldr	r3, [pc, #76]	; (800652c <HAL_ADC_ConfigChannel+0x130>)
 80064e0:	4913      	ldr	r1, [pc, #76]	; (8006530 <HAL_ADC_ConfigChannel+0x134>)
 80064e2:	400a      	ands	r2, r1
 80064e4:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	2380      	movs	r3, #128	; 0x80
 80064ec:	029b      	lsls	r3, r3, #10
 80064ee:	4013      	ands	r3, r2
 80064f0:	d005      	beq.n	80064fe <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80064f2:	4b0e      	ldr	r3, [pc, #56]	; (800652c <HAL_ADC_ConfigChannel+0x130>)
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	4b0d      	ldr	r3, [pc, #52]	; (800652c <HAL_ADC_ConfigChannel+0x130>)
 80064f8:	490e      	ldr	r1, [pc, #56]	; (8006534 <HAL_ADC_ConfigChannel+0x138>)
 80064fa:	400a      	ands	r2, r1
 80064fc:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	2380      	movs	r3, #128	; 0x80
 8006504:	025b      	lsls	r3, r3, #9
 8006506:	4013      	ands	r3, r2
 8006508:	d005      	beq.n	8006516 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 800650a:	4b08      	ldr	r3, [pc, #32]	; (800652c <HAL_ADC_ConfigChannel+0x130>)
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	4b07      	ldr	r3, [pc, #28]	; (800652c <HAL_ADC_ConfigChannel+0x130>)
 8006510:	4909      	ldr	r1, [pc, #36]	; (8006538 <HAL_ADC_ConfigChannel+0x13c>)
 8006512:	400a      	ands	r2, r1
 8006514:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2250      	movs	r2, #80	; 0x50
 800651a:	2100      	movs	r1, #0
 800651c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	0018      	movs	r0, r3
 8006522:	46bd      	mov	sp, r7
 8006524:	b002      	add	sp, #8
 8006526:	bd80      	pop	{r7, pc}
 8006528:	00001001 	.word	0x00001001
 800652c:	40012708 	.word	0x40012708
 8006530:	ff7fffff 	.word	0xff7fffff
 8006534:	ffbfffff 	.word	0xffbfffff
 8006538:	feffffff 	.word	0xfeffffff

0800653c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8006544:	4b0a      	ldr	r3, [pc, #40]	; (8006570 <ADC_DelayMicroSecond+0x34>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	490a      	ldr	r1, [pc, #40]	; (8006574 <ADC_DelayMicroSecond+0x38>)
 800654a:	0018      	movs	r0, r3
 800654c:	f7f9 fde4 	bl	8000118 <__udivsi3>
 8006550:	0003      	movs	r3, r0
 8006552:	001a      	movs	r2, r3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4353      	muls	r3, r2
 8006558:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 800655a:	e002      	b.n	8006562 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	3b01      	subs	r3, #1
 8006560:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1f9      	bne.n	800655c <ADC_DelayMicroSecond+0x20>
  } 
}
 8006568:	46c0      	nop			; (mov r8, r8)
 800656a:	46bd      	mov	sp, r7
 800656c:	b004      	add	sp, #16
 800656e:	bd80      	pop	{r7, pc}
 8006570:	20000010 	.word	0x20000010
 8006574:	000f4240 	.word	0x000f4240

08006578 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b082      	sub	sp, #8
 800657c:	af00      	add	r7, sp, #0
 800657e:	0002      	movs	r2, r0
 8006580:	1dfb      	adds	r3, r7, #7
 8006582:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8006584:	1dfb      	adds	r3, r7, #7
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	001a      	movs	r2, r3
 800658a:	231f      	movs	r3, #31
 800658c:	401a      	ands	r2, r3
 800658e:	4b04      	ldr	r3, [pc, #16]	; (80065a0 <NVIC_EnableIRQ+0x28>)
 8006590:	2101      	movs	r1, #1
 8006592:	4091      	lsls	r1, r2
 8006594:	000a      	movs	r2, r1
 8006596:	601a      	str	r2, [r3, #0]
}
 8006598:	46c0      	nop			; (mov r8, r8)
 800659a:	46bd      	mov	sp, r7
 800659c:	b002      	add	sp, #8
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	e000e100 	.word	0xe000e100

080065a4 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	0002      	movs	r2, r0
 80065ac:	1dfb      	adds	r3, r7, #7
 80065ae:	701a      	strb	r2, [r3, #0]
  NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80065b0:	1dfb      	adds	r3, r7, #7
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	001a      	movs	r2, r3
 80065b6:	231f      	movs	r3, #31
 80065b8:	4013      	ands	r3, r2
 80065ba:	4905      	ldr	r1, [pc, #20]	; (80065d0 <NVIC_DisableIRQ+0x2c>)
 80065bc:	2201      	movs	r2, #1
 80065be:	409a      	lsls	r2, r3
 80065c0:	0013      	movs	r3, r2
 80065c2:	2280      	movs	r2, #128	; 0x80
 80065c4:	508b      	str	r3, [r1, r2]
}
 80065c6:	46c0      	nop			; (mov r8, r8)
 80065c8:	46bd      	mov	sp, r7
 80065ca:	b002      	add	sp, #8
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	46c0      	nop			; (mov r8, r8)
 80065d0:	e000e100 	.word	0xe000e100

080065d4 <NVIC_ClearPendingIRQ>:
  \brief   Clear Pending Interrupt
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	0002      	movs	r2, r0
 80065dc:	1dfb      	adds	r3, r7, #7
 80065de:	701a      	strb	r2, [r3, #0]
  NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80065e0:	1dfb      	adds	r3, r7, #7
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	001a      	movs	r2, r3
 80065e6:	231f      	movs	r3, #31
 80065e8:	4013      	ands	r3, r2
 80065ea:	4905      	ldr	r1, [pc, #20]	; (8006600 <NVIC_ClearPendingIRQ+0x2c>)
 80065ec:	2201      	movs	r2, #1
 80065ee:	409a      	lsls	r2, r3
 80065f0:	23c0      	movs	r3, #192	; 0xc0
 80065f2:	005b      	lsls	r3, r3, #1
 80065f4:	50ca      	str	r2, [r1, r3]
}
 80065f6:	46c0      	nop			; (mov r8, r8)
 80065f8:	46bd      	mov	sp, r7
 80065fa:	b002      	add	sp, #8
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	46c0      	nop			; (mov r8, r8)
 8006600:	e000e100 	.word	0xe000e100

08006604 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006604:	b590      	push	{r4, r7, lr}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	0002      	movs	r2, r0
 800660c:	6039      	str	r1, [r7, #0]
 800660e:	1dfb      	adds	r3, r7, #7
 8006610:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8006612:	1dfb      	adds	r3, r7, #7
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	2b7f      	cmp	r3, #127	; 0x7f
 8006618:	d932      	bls.n	8006680 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800661a:	4a2f      	ldr	r2, [pc, #188]	; (80066d8 <NVIC_SetPriority+0xd4>)
 800661c:	1dfb      	adds	r3, r7, #7
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	0019      	movs	r1, r3
 8006622:	230f      	movs	r3, #15
 8006624:	400b      	ands	r3, r1
 8006626:	3b08      	subs	r3, #8
 8006628:	089b      	lsrs	r3, r3, #2
 800662a:	3306      	adds	r3, #6
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	18d3      	adds	r3, r2, r3
 8006630:	3304      	adds	r3, #4
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	1dfa      	adds	r2, r7, #7
 8006636:	7812      	ldrb	r2, [r2, #0]
 8006638:	0011      	movs	r1, r2
 800663a:	2203      	movs	r2, #3
 800663c:	400a      	ands	r2, r1
 800663e:	00d2      	lsls	r2, r2, #3
 8006640:	21ff      	movs	r1, #255	; 0xff
 8006642:	4091      	lsls	r1, r2
 8006644:	000a      	movs	r2, r1
 8006646:	43d2      	mvns	r2, r2
 8006648:	401a      	ands	r2, r3
 800664a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	019b      	lsls	r3, r3, #6
 8006650:	22ff      	movs	r2, #255	; 0xff
 8006652:	401a      	ands	r2, r3
 8006654:	1dfb      	adds	r3, r7, #7
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	0018      	movs	r0, r3
 800665a:	2303      	movs	r3, #3
 800665c:	4003      	ands	r3, r0
 800665e:	00db      	lsls	r3, r3, #3
 8006660:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006662:	481d      	ldr	r0, [pc, #116]	; (80066d8 <NVIC_SetPriority+0xd4>)
 8006664:	1dfb      	adds	r3, r7, #7
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	001c      	movs	r4, r3
 800666a:	230f      	movs	r3, #15
 800666c:	4023      	ands	r3, r4
 800666e:	3b08      	subs	r3, #8
 8006670:	089b      	lsrs	r3, r3, #2
 8006672:	430a      	orrs	r2, r1
 8006674:	3306      	adds	r3, #6
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	18c3      	adds	r3, r0, r3
 800667a:	3304      	adds	r3, #4
 800667c:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800667e:	e027      	b.n	80066d0 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006680:	4a16      	ldr	r2, [pc, #88]	; (80066dc <NVIC_SetPriority+0xd8>)
 8006682:	1dfb      	adds	r3, r7, #7
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	b25b      	sxtb	r3, r3
 8006688:	089b      	lsrs	r3, r3, #2
 800668a:	33c0      	adds	r3, #192	; 0xc0
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	589b      	ldr	r3, [r3, r2]
 8006690:	1dfa      	adds	r2, r7, #7
 8006692:	7812      	ldrb	r2, [r2, #0]
 8006694:	0011      	movs	r1, r2
 8006696:	2203      	movs	r2, #3
 8006698:	400a      	ands	r2, r1
 800669a:	00d2      	lsls	r2, r2, #3
 800669c:	21ff      	movs	r1, #255	; 0xff
 800669e:	4091      	lsls	r1, r2
 80066a0:	000a      	movs	r2, r1
 80066a2:	43d2      	mvns	r2, r2
 80066a4:	401a      	ands	r2, r3
 80066a6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	019b      	lsls	r3, r3, #6
 80066ac:	22ff      	movs	r2, #255	; 0xff
 80066ae:	401a      	ands	r2, r3
 80066b0:	1dfb      	adds	r3, r7, #7
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	0018      	movs	r0, r3
 80066b6:	2303      	movs	r3, #3
 80066b8:	4003      	ands	r3, r0
 80066ba:	00db      	lsls	r3, r3, #3
 80066bc:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80066be:	4807      	ldr	r0, [pc, #28]	; (80066dc <NVIC_SetPriority+0xd8>)
 80066c0:	1dfb      	adds	r3, r7, #7
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	b25b      	sxtb	r3, r3
 80066c6:	089b      	lsrs	r3, r3, #2
 80066c8:	430a      	orrs	r2, r1
 80066ca:	33c0      	adds	r3, #192	; 0xc0
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	501a      	str	r2, [r3, r0]
}
 80066d0:	46c0      	nop			; (mov r8, r8)
 80066d2:	46bd      	mov	sp, r7
 80066d4:	b003      	add	sp, #12
 80066d6:	bd90      	pop	{r4, r7, pc}
 80066d8:	e000ed00 	.word	0xe000ed00
 80066dc:	e000e100 	.word	0xe000e100

080066e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	3b01      	subs	r3, #1
 80066ec:	4a0c      	ldr	r2, [pc, #48]	; (8006720 <SysTick_Config+0x40>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d901      	bls.n	80066f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80066f2:	2301      	movs	r3, #1
 80066f4:	e010      	b.n	8006718 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80066f6:	4b0b      	ldr	r3, [pc, #44]	; (8006724 <SysTick_Config+0x44>)
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	3a01      	subs	r2, #1
 80066fc:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80066fe:	2301      	movs	r3, #1
 8006700:	425b      	negs	r3, r3
 8006702:	2103      	movs	r1, #3
 8006704:	0018      	movs	r0, r3
 8006706:	f7ff ff7d 	bl	8006604 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800670a:	4b06      	ldr	r3, [pc, #24]	; (8006724 <SysTick_Config+0x44>)
 800670c:	2200      	movs	r2, #0
 800670e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006710:	4b04      	ldr	r3, [pc, #16]	; (8006724 <SysTick_Config+0x44>)
 8006712:	2207      	movs	r2, #7
 8006714:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006716:	2300      	movs	r3, #0
}
 8006718:	0018      	movs	r0, r3
 800671a:	46bd      	mov	sp, r7
 800671c:	b002      	add	sp, #8
 800671e:	bd80      	pop	{r7, pc}
 8006720:	00ffffff 	.word	0x00ffffff
 8006724:	e000e010 	.word	0xe000e010

08006728 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	60b9      	str	r1, [r7, #8]
 8006730:	607a      	str	r2, [r7, #4]
 8006732:	210f      	movs	r1, #15
 8006734:	187b      	adds	r3, r7, r1
 8006736:	1c02      	adds	r2, r0, #0
 8006738:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800673a:	68ba      	ldr	r2, [r7, #8]
 800673c:	187b      	adds	r3, r7, r1
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	b25b      	sxtb	r3, r3
 8006742:	0011      	movs	r1, r2
 8006744:	0018      	movs	r0, r3
 8006746:	f7ff ff5d 	bl	8006604 <NVIC_SetPriority>
}
 800674a:	46c0      	nop			; (mov r8, r8)
 800674c:	46bd      	mov	sp, r7
 800674e:	b004      	add	sp, #16
 8006750:	bd80      	pop	{r7, pc}

08006752 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b082      	sub	sp, #8
 8006756:	af00      	add	r7, sp, #0
 8006758:	0002      	movs	r2, r0
 800675a:	1dfb      	adds	r3, r7, #7
 800675c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800675e:	1dfb      	adds	r3, r7, #7
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	b25b      	sxtb	r3, r3
 8006764:	0018      	movs	r0, r3
 8006766:	f7ff ff07 	bl	8006578 <NVIC_EnableIRQ>
}
 800676a:	46c0      	nop			; (mov r8, r8)
 800676c:	46bd      	mov	sp, r7
 800676e:	b002      	add	sp, #8
 8006770:	bd80      	pop	{r7, pc}

08006772 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006772:	b580      	push	{r7, lr}
 8006774:	b082      	sub	sp, #8
 8006776:	af00      	add	r7, sp, #0
 8006778:	0002      	movs	r2, r0
 800677a:	1dfb      	adds	r3, r7, #7
 800677c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800677e:	1dfb      	adds	r3, r7, #7
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	b25b      	sxtb	r3, r3
 8006784:	0018      	movs	r0, r3
 8006786:	f7ff ff0d 	bl	80065a4 <NVIC_DisableIRQ>
}
 800678a:	46c0      	nop			; (mov r8, r8)
 800678c:	46bd      	mov	sp, r7
 800678e:	b002      	add	sp, #8
 8006790:	bd80      	pop	{r7, pc}

08006792 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006792:	b580      	push	{r7, lr}
 8006794:	b082      	sub	sp, #8
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	0018      	movs	r0, r3
 800679e:	f7ff ff9f 	bl	80066e0 <SysTick_Config>
 80067a2:	0003      	movs	r3, r0
}
 80067a4:	0018      	movs	r0, r3
 80067a6:	46bd      	mov	sp, r7
 80067a8:	b002      	add	sp, #8
 80067aa:	bd80      	pop	{r7, pc}

080067ac <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{ 
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	0002      	movs	r2, r0
 80067b4:	1dfb      	adds	r3, r7, #7
 80067b6:	701a      	strb	r2, [r3, #0]
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80067b8:	1dfb      	adds	r3, r7, #7
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	b25b      	sxtb	r3, r3
 80067be:	0018      	movs	r0, r3
 80067c0:	f7ff ff08 	bl	80065d4 <NVIC_ClearPendingIRQ>
}
 80067c4:	46c0      	nop			; (mov r8, r8)
 80067c6:	46bd      	mov	sp, r7
 80067c8:	b002      	add	sp, #8
 80067ca:	bd80      	pop	{r7, pc}

080067cc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067d4:	230f      	movs	r3, #15
 80067d6:	18fb      	adds	r3, r7, r3
 80067d8:	2200      	movs	r2, #0
 80067da:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2225      	movs	r2, #37	; 0x25
 80067e0:	5c9b      	ldrb	r3, [r3, r2]
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d007      	beq.n	80067f8 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2204      	movs	r2, #4
 80067ec:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80067ee:	230f      	movs	r3, #15
 80067f0:	18fb      	adds	r3, r7, r3
 80067f2:	2201      	movs	r2, #1
 80067f4:	701a      	strb	r2, [r3, #0]
 80067f6:	e02a      	b.n	800684e <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	210e      	movs	r1, #14
 8006804:	438a      	bics	r2, r1
 8006806:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	2101      	movs	r1, #1
 8006814:	438a      	bics	r2, r1
 8006816:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800681c:	221c      	movs	r2, #28
 800681e:	401a      	ands	r2, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006824:	2101      	movs	r1, #1
 8006826:	4091      	lsls	r1, r2
 8006828:	000a      	movs	r2, r1
 800682a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2225      	movs	r2, #37	; 0x25
 8006830:	2101      	movs	r1, #1
 8006832:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2224      	movs	r2, #36	; 0x24
 8006838:	2100      	movs	r1, #0
 800683a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006840:	2b00      	cmp	r3, #0
 8006842:	d004      	beq.n	800684e <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	0010      	movs	r0, r2
 800684c:	4798      	blx	r3
    }
  }
  return status;
 800684e:	230f      	movs	r3, #15
 8006850:	18fb      	adds	r3, r7, r3
 8006852:	781b      	ldrb	r3, [r3, #0]
}
 8006854:	0018      	movs	r0, r3
 8006856:	46bd      	mov	sp, r7
 8006858:	b004      	add	sp, #16
 800685a:	bd80      	pop	{r7, pc}

0800685c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b086      	sub	sp, #24
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006866:	2300      	movs	r3, #0
 8006868:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800686a:	2300      	movs	r3, #0
 800686c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800686e:	2300      	movs	r3, #0
 8006870:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8006872:	e155      	b.n	8006b20 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2101      	movs	r1, #1
 800687a:	697a      	ldr	r2, [r7, #20]
 800687c:	4091      	lsls	r1, r2
 800687e:	000a      	movs	r2, r1
 8006880:	4013      	ands	r3, r2
 8006882:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d100      	bne.n	800688c <HAL_GPIO_Init+0x30>
 800688a:	e146      	b.n	8006b1a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	2b02      	cmp	r3, #2
 8006892:	d003      	beq.n	800689c <HAL_GPIO_Init+0x40>
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	2b12      	cmp	r3, #18
 800689a:	d123      	bne.n	80068e4 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	08da      	lsrs	r2, r3, #3
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	3208      	adds	r2, #8
 80068a4:	0092      	lsls	r2, r2, #2
 80068a6:	58d3      	ldr	r3, [r2, r3]
 80068a8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	2207      	movs	r2, #7
 80068ae:	4013      	ands	r3, r2
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	220f      	movs	r2, #15
 80068b4:	409a      	lsls	r2, r3
 80068b6:	0013      	movs	r3, r2
 80068b8:	43da      	mvns	r2, r3
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	4013      	ands	r3, r2
 80068be:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	691a      	ldr	r2, [r3, #16]
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	2107      	movs	r1, #7
 80068c8:	400b      	ands	r3, r1
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	409a      	lsls	r2, r3
 80068ce:	0013      	movs	r3, r2
 80068d0:	693a      	ldr	r2, [r7, #16]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	08da      	lsrs	r2, r3, #3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	3208      	adds	r2, #8
 80068de:	0092      	lsls	r2, r2, #2
 80068e0:	6939      	ldr	r1, [r7, #16]
 80068e2:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d00b      	beq.n	8006904 <HAL_GPIO_Init+0xa8>
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d007      	beq.n	8006904 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80068f8:	2b11      	cmp	r3, #17
 80068fa:	d003      	beq.n	8006904 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	2b12      	cmp	r3, #18
 8006902:	d130      	bne.n	8006966 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	005b      	lsls	r3, r3, #1
 800690e:	2203      	movs	r2, #3
 8006910:	409a      	lsls	r2, r3
 8006912:	0013      	movs	r3, r2
 8006914:	43da      	mvns	r2, r3
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	4013      	ands	r3, r2
 800691a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	68da      	ldr	r2, [r3, #12]
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	005b      	lsls	r3, r3, #1
 8006924:	409a      	lsls	r2, r3
 8006926:	0013      	movs	r3, r2
 8006928:	693a      	ldr	r2, [r7, #16]
 800692a:	4313      	orrs	r3, r2
 800692c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	693a      	ldr	r2, [r7, #16]
 8006932:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800693a:	2201      	movs	r2, #1
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	409a      	lsls	r2, r3
 8006940:	0013      	movs	r3, r2
 8006942:	43da      	mvns	r2, r3
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	4013      	ands	r3, r2
 8006948:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	091b      	lsrs	r3, r3, #4
 8006950:	2201      	movs	r2, #1
 8006952:	401a      	ands	r2, r3
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	409a      	lsls	r2, r3
 8006958:	0013      	movs	r3, r2
 800695a:	693a      	ldr	r2, [r7, #16]
 800695c:	4313      	orrs	r3, r2
 800695e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	693a      	ldr	r2, [r7, #16]
 8006964:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	005b      	lsls	r3, r3, #1
 8006970:	2203      	movs	r2, #3
 8006972:	409a      	lsls	r2, r3
 8006974:	0013      	movs	r3, r2
 8006976:	43da      	mvns	r2, r3
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	4013      	ands	r3, r2
 800697c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	2203      	movs	r2, #3
 8006984:	401a      	ands	r2, r3
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	005b      	lsls	r3, r3, #1
 800698a:	409a      	lsls	r2, r3
 800698c:	0013      	movs	r3, r2
 800698e:	693a      	ldr	r2, [r7, #16]
 8006990:	4313      	orrs	r3, r2
 8006992:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	693a      	ldr	r2, [r7, #16]
 8006998:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	005b      	lsls	r3, r3, #1
 80069a4:	2203      	movs	r2, #3
 80069a6:	409a      	lsls	r2, r3
 80069a8:	0013      	movs	r3, r2
 80069aa:	43da      	mvns	r2, r3
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	4013      	ands	r3, r2
 80069b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	689a      	ldr	r2, [r3, #8]
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	005b      	lsls	r3, r3, #1
 80069ba:	409a      	lsls	r2, r3
 80069bc:	0013      	movs	r3, r2
 80069be:	693a      	ldr	r2, [r7, #16]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	693a      	ldr	r2, [r7, #16]
 80069c8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	685a      	ldr	r2, [r3, #4]
 80069ce:	2380      	movs	r3, #128	; 0x80
 80069d0:	055b      	lsls	r3, r3, #21
 80069d2:	4013      	ands	r3, r2
 80069d4:	d100      	bne.n	80069d8 <HAL_GPIO_Init+0x17c>
 80069d6:	e0a0      	b.n	8006b1a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80069d8:	4b57      	ldr	r3, [pc, #348]	; (8006b38 <HAL_GPIO_Init+0x2dc>)
 80069da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069dc:	4b56      	ldr	r3, [pc, #344]	; (8006b38 <HAL_GPIO_Init+0x2dc>)
 80069de:	2101      	movs	r1, #1
 80069e0:	430a      	orrs	r2, r1
 80069e2:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 80069e4:	4a55      	ldr	r2, [pc, #340]	; (8006b3c <HAL_GPIO_Init+0x2e0>)
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	089b      	lsrs	r3, r3, #2
 80069ea:	3302      	adds	r3, #2
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	589b      	ldr	r3, [r3, r2]
 80069f0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	2203      	movs	r2, #3
 80069f6:	4013      	ands	r3, r2
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	220f      	movs	r2, #15
 80069fc:	409a      	lsls	r2, r3
 80069fe:	0013      	movs	r3, r2
 8006a00:	43da      	mvns	r2, r3
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	4013      	ands	r3, r2
 8006a06:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	23a0      	movs	r3, #160	; 0xa0
 8006a0c:	05db      	lsls	r3, r3, #23
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d01f      	beq.n	8006a52 <HAL_GPIO_Init+0x1f6>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a4a      	ldr	r2, [pc, #296]	; (8006b40 <HAL_GPIO_Init+0x2e4>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d019      	beq.n	8006a4e <HAL_GPIO_Init+0x1f2>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4a49      	ldr	r2, [pc, #292]	; (8006b44 <HAL_GPIO_Init+0x2e8>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d013      	beq.n	8006a4a <HAL_GPIO_Init+0x1ee>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4a48      	ldr	r2, [pc, #288]	; (8006b48 <HAL_GPIO_Init+0x2ec>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d00d      	beq.n	8006a46 <HAL_GPIO_Init+0x1ea>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4a47      	ldr	r2, [pc, #284]	; (8006b4c <HAL_GPIO_Init+0x2f0>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d007      	beq.n	8006a42 <HAL_GPIO_Init+0x1e6>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a46      	ldr	r2, [pc, #280]	; (8006b50 <HAL_GPIO_Init+0x2f4>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d101      	bne.n	8006a3e <HAL_GPIO_Init+0x1e2>
 8006a3a:	2305      	movs	r3, #5
 8006a3c:	e00a      	b.n	8006a54 <HAL_GPIO_Init+0x1f8>
 8006a3e:	2306      	movs	r3, #6
 8006a40:	e008      	b.n	8006a54 <HAL_GPIO_Init+0x1f8>
 8006a42:	2304      	movs	r3, #4
 8006a44:	e006      	b.n	8006a54 <HAL_GPIO_Init+0x1f8>
 8006a46:	2303      	movs	r3, #3
 8006a48:	e004      	b.n	8006a54 <HAL_GPIO_Init+0x1f8>
 8006a4a:	2302      	movs	r3, #2
 8006a4c:	e002      	b.n	8006a54 <HAL_GPIO_Init+0x1f8>
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e000      	b.n	8006a54 <HAL_GPIO_Init+0x1f8>
 8006a52:	2300      	movs	r3, #0
 8006a54:	697a      	ldr	r2, [r7, #20]
 8006a56:	2103      	movs	r1, #3
 8006a58:	400a      	ands	r2, r1
 8006a5a:	0092      	lsls	r2, r2, #2
 8006a5c:	4093      	lsls	r3, r2
 8006a5e:	693a      	ldr	r2, [r7, #16]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006a64:	4935      	ldr	r1, [pc, #212]	; (8006b3c <HAL_GPIO_Init+0x2e0>)
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	089b      	lsrs	r3, r3, #2
 8006a6a:	3302      	adds	r3, #2
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006a72:	4b38      	ldr	r3, [pc, #224]	; (8006b54 <HAL_GPIO_Init+0x2f8>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	43da      	mvns	r2, r3
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	4013      	ands	r3, r2
 8006a80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	685a      	ldr	r2, [r3, #4]
 8006a86:	2380      	movs	r3, #128	; 0x80
 8006a88:	025b      	lsls	r3, r3, #9
 8006a8a:	4013      	ands	r3, r2
 8006a8c:	d003      	beq.n	8006a96 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8006a8e:	693a      	ldr	r2, [r7, #16]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006a96:	4b2f      	ldr	r3, [pc, #188]	; (8006b54 <HAL_GPIO_Init+0x2f8>)
 8006a98:	693a      	ldr	r2, [r7, #16]
 8006a9a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8006a9c:	4b2d      	ldr	r3, [pc, #180]	; (8006b54 <HAL_GPIO_Init+0x2f8>)
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	43da      	mvns	r2, r3
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	4013      	ands	r3, r2
 8006aaa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	685a      	ldr	r2, [r3, #4]
 8006ab0:	2380      	movs	r3, #128	; 0x80
 8006ab2:	029b      	lsls	r3, r3, #10
 8006ab4:	4013      	ands	r3, r2
 8006ab6:	d003      	beq.n	8006ac0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8006ab8:	693a      	ldr	r2, [r7, #16]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8006ac0:	4b24      	ldr	r3, [pc, #144]	; (8006b54 <HAL_GPIO_Init+0x2f8>)
 8006ac2:	693a      	ldr	r2, [r7, #16]
 8006ac4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006ac6:	4b23      	ldr	r3, [pc, #140]	; (8006b54 <HAL_GPIO_Init+0x2f8>)
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	43da      	mvns	r2, r3
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	4013      	ands	r3, r2
 8006ad4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	685a      	ldr	r2, [r3, #4]
 8006ada:	2380      	movs	r3, #128	; 0x80
 8006adc:	035b      	lsls	r3, r3, #13
 8006ade:	4013      	ands	r3, r2
 8006ae0:	d003      	beq.n	8006aea <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8006ae2:	693a      	ldr	r2, [r7, #16]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006aea:	4b1a      	ldr	r3, [pc, #104]	; (8006b54 <HAL_GPIO_Init+0x2f8>)
 8006aec:	693a      	ldr	r2, [r7, #16]
 8006aee:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8006af0:	4b18      	ldr	r3, [pc, #96]	; (8006b54 <HAL_GPIO_Init+0x2f8>)
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	43da      	mvns	r2, r3
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	4013      	ands	r3, r2
 8006afe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	685a      	ldr	r2, [r3, #4]
 8006b04:	2380      	movs	r3, #128	; 0x80
 8006b06:	039b      	lsls	r3, r3, #14
 8006b08:	4013      	ands	r3, r2
 8006b0a:	d003      	beq.n	8006b14 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8006b14:	4b0f      	ldr	r3, [pc, #60]	; (8006b54 <HAL_GPIO_Init+0x2f8>)
 8006b16:	693a      	ldr	r2, [r7, #16]
 8006b18:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	40da      	lsrs	r2, r3
 8006b28:	1e13      	subs	r3, r2, #0
 8006b2a:	d000      	beq.n	8006b2e <HAL_GPIO_Init+0x2d2>
 8006b2c:	e6a2      	b.n	8006874 <HAL_GPIO_Init+0x18>
  }
}
 8006b2e:	46c0      	nop			; (mov r8, r8)
 8006b30:	46bd      	mov	sp, r7
 8006b32:	b006      	add	sp, #24
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	46c0      	nop			; (mov r8, r8)
 8006b38:	40021000 	.word	0x40021000
 8006b3c:	40010000 	.word	0x40010000
 8006b40:	50000400 	.word	0x50000400
 8006b44:	50000800 	.word	0x50000800
 8006b48:	50000c00 	.word	0x50000c00
 8006b4c:	50001000 	.word	0x50001000
 8006b50:	50001c00 	.word	0x50001c00
 8006b54:	40010400 	.word	0x40010400

08006b58 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	000a      	movs	r2, r1
 8006b62:	1cbb      	adds	r3, r7, #2
 8006b64:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	1cba      	adds	r2, r7, #2
 8006b6c:	8812      	ldrh	r2, [r2, #0]
 8006b6e:	4013      	ands	r3, r2
 8006b70:	d004      	beq.n	8006b7c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8006b72:	230f      	movs	r3, #15
 8006b74:	18fb      	adds	r3, r7, r3
 8006b76:	2201      	movs	r2, #1
 8006b78:	701a      	strb	r2, [r3, #0]
 8006b7a:	e003      	b.n	8006b84 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006b7c:	230f      	movs	r3, #15
 8006b7e:	18fb      	adds	r3, r7, r3
 8006b80:	2200      	movs	r2, #0
 8006b82:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8006b84:	230f      	movs	r3, #15
 8006b86:	18fb      	adds	r3, r7, r3
 8006b88:	781b      	ldrb	r3, [r3, #0]
}
 8006b8a:	0018      	movs	r0, r3
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	b004      	add	sp, #16
 8006b90:	bd80      	pop	{r7, pc}

08006b92 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006b92:	b580      	push	{r7, lr}
 8006b94:	b082      	sub	sp, #8
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
 8006b9a:	0008      	movs	r0, r1
 8006b9c:	0011      	movs	r1, r2
 8006b9e:	1cbb      	adds	r3, r7, #2
 8006ba0:	1c02      	adds	r2, r0, #0
 8006ba2:	801a      	strh	r2, [r3, #0]
 8006ba4:	1c7b      	adds	r3, r7, #1
 8006ba6:	1c0a      	adds	r2, r1, #0
 8006ba8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8006baa:	1c7b      	adds	r3, r7, #1
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d004      	beq.n	8006bbc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006bb2:	1cbb      	adds	r3, r7, #2
 8006bb4:	881a      	ldrh	r2, [r3, #0]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8006bba:	e003      	b.n	8006bc4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8006bbc:	1cbb      	adds	r3, r7, #2
 8006bbe:	881a      	ldrh	r2, [r3, #0]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006bc4:	46c0      	nop			; (mov r8, r8)
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	b002      	add	sp, #8
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	000a      	movs	r2, r1
 8006bd6:	1cbb      	adds	r3, r7, #2
 8006bd8:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	695a      	ldr	r2, [r3, #20]
 8006bde:	1cbb      	adds	r3, r7, #2
 8006be0:	881b      	ldrh	r3, [r3, #0]
 8006be2:	405a      	eors	r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	615a      	str	r2, [r3, #20]
}
 8006be8:	46c0      	nop			; (mov r8, r8)
 8006bea:	46bd      	mov	sp, r7
 8006bec:	b002      	add	sp, #8
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b082      	sub	sp, #8
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	0002      	movs	r2, r0
 8006bf8:	1dbb      	adds	r3, r7, #6
 8006bfa:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8006bfc:	4b09      	ldr	r3, [pc, #36]	; (8006c24 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8006bfe:	695b      	ldr	r3, [r3, #20]
 8006c00:	1dba      	adds	r2, r7, #6
 8006c02:	8812      	ldrh	r2, [r2, #0]
 8006c04:	4013      	ands	r3, r2
 8006c06:	d008      	beq.n	8006c1a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006c08:	4b06      	ldr	r3, [pc, #24]	; (8006c24 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8006c0a:	1dba      	adds	r2, r7, #6
 8006c0c:	8812      	ldrh	r2, [r2, #0]
 8006c0e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006c10:	1dbb      	adds	r3, r7, #6
 8006c12:	881b      	ldrh	r3, [r3, #0]
 8006c14:	0018      	movs	r0, r3
 8006c16:	f7fd fb37 	bl	8004288 <HAL_GPIO_EXTI_Callback>
  }
}
 8006c1a:	46c0      	nop			; (mov r8, r8)
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	b002      	add	sp, #8
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	46c0      	nop			; (mov r8, r8)
 8006c24:	40010400 	.word	0x40010400

08006c28 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c2a:	b08b      	sub	sp, #44	; 0x2c
 8006c2c:	af06      	add	r7, sp, #24
 8006c2e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d101      	bne.n	8006c3a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e0e4      	b.n	8006e04 <HAL_PCD_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4a73      	ldr	r2, [pc, #460]	; (8006e0c <HAL_PCD_Init+0x1e4>)
 8006c3e:	5c9b      	ldrb	r3, [r3, r2]
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d108      	bne.n	8006c58 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	238a      	movs	r3, #138	; 0x8a
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	2100      	movs	r1, #0
 8006c4e:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	0018      	movs	r0, r3
 8006c54:	f7fc ff52 	bl	8003afc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4a6c      	ldr	r2, [pc, #432]	; (8006e0c <HAL_PCD_Init+0x1e4>)
 8006c5c:	2103      	movs	r1, #3
 8006c5e:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	0018      	movs	r0, r3
 8006c66:	f003 fa6d 	bl	800a144 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c6a:	230f      	movs	r3, #15
 8006c6c:	18fb      	adds	r3, r7, r3
 8006c6e:	2200      	movs	r2, #0
 8006c70:	701a      	strb	r2, [r3, #0]
 8006c72:	e043      	b.n	8006cfc <HAL_PCD_Init+0xd4>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006c74:	200f      	movs	r0, #15
 8006c76:	183b      	adds	r3, r7, r0
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	2129      	movs	r1, #41	; 0x29
 8006c7e:	015b      	lsls	r3, r3, #5
 8006c80:	18d3      	adds	r3, r2, r3
 8006c82:	185b      	adds	r3, r3, r1
 8006c84:	2201      	movs	r2, #1
 8006c86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006c88:	183b      	adds	r3, r7, r0
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	2128      	movs	r1, #40	; 0x28
 8006c90:	015b      	lsls	r3, r3, #5
 8006c92:	18d3      	adds	r3, r2, r3
 8006c94:	185b      	adds	r3, r3, r1
 8006c96:	183a      	adds	r2, r7, r0
 8006c98:	7812      	ldrb	r2, [r2, #0]
 8006c9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006c9c:	183b      	adds	r3, r7, r0
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	183a      	adds	r2, r7, r0
 8006ca2:	7812      	ldrb	r2, [r2, #0]
 8006ca4:	b291      	uxth	r1, r2
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	015b      	lsls	r3, r3, #5
 8006caa:	18d3      	adds	r3, r2, r3
 8006cac:	3336      	adds	r3, #54	; 0x36
 8006cae:	1c0a      	adds	r2, r1, #0
 8006cb0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006cb2:	183b      	adds	r3, r7, r0
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	212b      	movs	r1, #43	; 0x2b
 8006cba:	015b      	lsls	r3, r3, #5
 8006cbc:	18d3      	adds	r3, r2, r3
 8006cbe:	185b      	adds	r3, r3, r1
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006cc4:	183b      	adds	r3, r7, r0
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	015b      	lsls	r3, r3, #5
 8006ccc:	18d3      	adds	r3, r2, r3
 8006cce:	3338      	adds	r3, #56	; 0x38
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006cd4:	183b      	adds	r3, r7, r0
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	015b      	lsls	r3, r3, #5
 8006cdc:	18d3      	adds	r3, r2, r3
 8006cde:	333c      	adds	r3, #60	; 0x3c
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006ce4:	183b      	adds	r3, r7, r0
 8006ce6:	781a      	ldrb	r2, [r3, #0]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	3202      	adds	r2, #2
 8006cec:	0152      	lsls	r2, r2, #5
 8006cee:	2100      	movs	r1, #0
 8006cf0:	50d1      	str	r1, [r2, r3]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006cf2:	183b      	adds	r3, r7, r0
 8006cf4:	781a      	ldrb	r2, [r3, #0]
 8006cf6:	183b      	adds	r3, r7, r0
 8006cf8:	3201      	adds	r2, #1
 8006cfa:	701a      	strb	r2, [r3, #0]
 8006cfc:	230f      	movs	r3, #15
 8006cfe:	18fb      	adds	r3, r7, r3
 8006d00:	781a      	ldrb	r2, [r3, #0]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d3b4      	bcc.n	8006c74 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d0a:	230f      	movs	r3, #15
 8006d0c:	18fb      	adds	r3, r7, r3
 8006d0e:	2200      	movs	r2, #0
 8006d10:	701a      	strb	r2, [r3, #0]
 8006d12:	e03f      	b.n	8006d94 <HAL_PCD_Init+0x16c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006d14:	200f      	movs	r0, #15
 8006d16:	183b      	adds	r3, r7, r0
 8006d18:	781a      	ldrb	r2, [r3, #0]
 8006d1a:	6879      	ldr	r1, [r7, #4]
 8006d1c:	232a      	movs	r3, #42	; 0x2a
 8006d1e:	33ff      	adds	r3, #255	; 0xff
 8006d20:	0152      	lsls	r2, r2, #5
 8006d22:	188a      	adds	r2, r1, r2
 8006d24:	18d3      	adds	r3, r2, r3
 8006d26:	2200      	movs	r2, #0
 8006d28:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006d2a:	183b      	adds	r3, r7, r0
 8006d2c:	781a      	ldrb	r2, [r3, #0]
 8006d2e:	6879      	ldr	r1, [r7, #4]
 8006d30:	2394      	movs	r3, #148	; 0x94
 8006d32:	005b      	lsls	r3, r3, #1
 8006d34:	0152      	lsls	r2, r2, #5
 8006d36:	188a      	adds	r2, r1, r2
 8006d38:	18d3      	adds	r3, r2, r3
 8006d3a:	183a      	adds	r2, r7, r0
 8006d3c:	7812      	ldrb	r2, [r2, #0]
 8006d3e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006d40:	183b      	adds	r3, r7, r0
 8006d42:	781a      	ldrb	r2, [r3, #0]
 8006d44:	6879      	ldr	r1, [r7, #4]
 8006d46:	232c      	movs	r3, #44	; 0x2c
 8006d48:	33ff      	adds	r3, #255	; 0xff
 8006d4a:	0152      	lsls	r2, r2, #5
 8006d4c:	188a      	adds	r2, r1, r2
 8006d4e:	18d3      	adds	r3, r2, r3
 8006d50:	2200      	movs	r2, #0
 8006d52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006d54:	183b      	adds	r3, r7, r0
 8006d56:	781a      	ldrb	r2, [r3, #0]
 8006d58:	6879      	ldr	r1, [r7, #4]
 8006d5a:	239c      	movs	r3, #156	; 0x9c
 8006d5c:	005b      	lsls	r3, r3, #1
 8006d5e:	0152      	lsls	r2, r2, #5
 8006d60:	188a      	adds	r2, r1, r2
 8006d62:	18d3      	adds	r3, r2, r3
 8006d64:	2200      	movs	r2, #0
 8006d66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006d68:	183b      	adds	r3, r7, r0
 8006d6a:	781a      	ldrb	r2, [r3, #0]
 8006d6c:	6879      	ldr	r1, [r7, #4]
 8006d6e:	239e      	movs	r3, #158	; 0x9e
 8006d70:	005b      	lsls	r3, r3, #1
 8006d72:	0152      	lsls	r2, r2, #5
 8006d74:	188a      	adds	r2, r1, r2
 8006d76:	18d3      	adds	r3, r2, r3
 8006d78:	2200      	movs	r2, #0
 8006d7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006d7c:	183b      	adds	r3, r7, r0
 8006d7e:	781a      	ldrb	r2, [r3, #0]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	320a      	adds	r2, #10
 8006d84:	0152      	lsls	r2, r2, #5
 8006d86:	2100      	movs	r1, #0
 8006d88:	50d1      	str	r1, [r2, r3]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d8a:	183b      	adds	r3, r7, r0
 8006d8c:	781a      	ldrb	r2, [r3, #0]
 8006d8e:	183b      	adds	r3, r7, r0
 8006d90:	3201      	adds	r2, #1
 8006d92:	701a      	strb	r2, [r3, #0]
 8006d94:	230f      	movs	r3, #15
 8006d96:	18fb      	adds	r3, r7, r3
 8006d98:	781a      	ldrb	r2, [r3, #0]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d3b8      	bcc.n	8006d14 <HAL_PCD_Init+0xec>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6818      	ldr	r0, [r3, #0]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	466a      	mov	r2, sp
 8006daa:	0011      	movs	r1, r2
 8006dac:	001a      	movs	r2, r3
 8006dae:	3210      	adds	r2, #16
 8006db0:	ca70      	ldmia	r2!, {r4, r5, r6}
 8006db2:	c170      	stmia	r1!, {r4, r5, r6}
 8006db4:	ca30      	ldmia	r2!, {r4, r5}
 8006db6:	c130      	stmia	r1!, {r4, r5}
 8006db8:	6859      	ldr	r1, [r3, #4]
 8006dba:	689a      	ldr	r2, [r3, #8]
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	f003 f9e1 	bl	800a184 <USB_DevInit>
 8006dc2:	1e03      	subs	r3, r0, #0
 8006dc4:	d005      	beq.n	8006dd2 <HAL_PCD_Init+0x1aa>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a10      	ldr	r2, [pc, #64]	; (8006e0c <HAL_PCD_Init+0x1e4>)
 8006dca:	2102      	movs	r1, #2
 8006dcc:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e018      	b.n	8006e04 <HAL_PCD_Init+0x1dc>
  }

  hpcd->USB_Address = 0U;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2224      	movs	r2, #36	; 0x24
 8006dd6:	2100      	movs	r1, #0
 8006dd8:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a0b      	ldr	r2, [pc, #44]	; (8006e0c <HAL_PCD_Init+0x1e4>)
 8006dde:	2101      	movs	r1, #1
 8006de0:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	69db      	ldr	r3, [r3, #28]
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d103      	bne.n	8006df2 <HAL_PCD_Init+0x1ca>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	0018      	movs	r0, r3
 8006dee:	f000 f834 	bl	8006e5a <HAL_PCDEx_ActivateLPM>
  }


  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable == 1U)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a1b      	ldr	r3, [r3, #32]
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d103      	bne.n	8006e02 <HAL_PCD_Init+0x1da>
  {
    (void)HAL_PCDEx_ActivateBCD(hpcd);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	0018      	movs	r0, r3
 8006dfe:	f000 f807 	bl	8006e10 <HAL_PCDEx_ActivateBCD>
  }

  return HAL_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	0018      	movs	r0, r3
 8006e06:	46bd      	mov	sp, r7
 8006e08:	b005      	add	sp, #20
 8006e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e0c:	00000229 	.word	0x00000229

08006e10 <HAL_PCDEx_ActivateBCD>:
  * @brief  Activate BatteryCharging feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  USB_TypeDef *USBx = hpcd->Instance;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	60fb      	str	r3, [r7, #12]
  hpcd->battery_charging_active = 1U;
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	239b      	movs	r3, #155	; 0x9b
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	2101      	movs	r1, #1
 8006e26:	50d1      	str	r1, [r2, r3]

  USBx->BCDR |= (USB_BCDR_BCDEN);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2258      	movs	r2, #88	; 0x58
 8006e2c:	5a9b      	ldrh	r3, [r3, r2]
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	2201      	movs	r2, #1
 8006e32:	4313      	orrs	r3, r2
 8006e34:	b299      	uxth	r1, r3
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2258      	movs	r2, #88	; 0x58
 8006e3a:	5299      	strh	r1, [r3, r2]
  /* Enable DCD : Data Contact Detect */
  USBx->BCDR |= (USB_BCDR_DCDEN);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2258      	movs	r2, #88	; 0x58
 8006e40:	5a9b      	ldrh	r3, [r3, r2]
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	2202      	movs	r2, #2
 8006e46:	4313      	orrs	r3, r2
 8006e48:	b299      	uxth	r1, r3
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2258      	movs	r2, #88	; 0x58
 8006e4e:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	0018      	movs	r0, r3
 8006e54:	46bd      	mov	sp, r7
 8006e56:	b004      	add	sp, #16
 8006e58:	bd80      	pop	{r7, pc}

08006e5a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006e5a:	b580      	push	{r7, lr}
 8006e5c:	b084      	sub	sp, #16
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	239a      	movs	r3, #154	; 0x9a
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	2101      	movs	r1, #1
 8006e70:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8006e72:	687a      	ldr	r2, [r7, #4]
 8006e74:	2398      	movs	r3, #152	; 0x98
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	2100      	movs	r1, #0
 8006e7a:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2254      	movs	r2, #84	; 0x54
 8006e80:	5a9b      	ldrh	r3, [r3, r2]
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	2201      	movs	r2, #1
 8006e86:	4313      	orrs	r3, r2
 8006e88:	b299      	uxth	r1, r3
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2254      	movs	r2, #84	; 0x54
 8006e8e:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2254      	movs	r2, #84	; 0x54
 8006e94:	5a9b      	ldrh	r3, [r3, r2]
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	2202      	movs	r2, #2
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	b299      	uxth	r1, r3
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2254      	movs	r2, #84	; 0x54
 8006ea2:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	0018      	movs	r0, r3
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	b004      	add	sp, #16
 8006eac:	bd80      	pop	{r7, pc}
	...

08006eb0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8006eb4:	4b04      	ldr	r3, [pc, #16]	; (8006ec8 <HAL_PWR_EnableBkUpAccess+0x18>)
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	4b03      	ldr	r3, [pc, #12]	; (8006ec8 <HAL_PWR_EnableBkUpAccess+0x18>)
 8006eba:	2180      	movs	r1, #128	; 0x80
 8006ebc:	0049      	lsls	r1, r1, #1
 8006ebe:	430a      	orrs	r2, r1
 8006ec0:	601a      	str	r2, [r3, #0]
}
 8006ec2:	46c0      	nop			; (mov r8, r8)
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	40007000 	.word	0x40007000

08006ecc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ecc:	b5b0      	push	{r4, r5, r7, lr}
 8006ece:	b08a      	sub	sp, #40	; 0x28
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d102      	bne.n	8006ee0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	f000 fbbc 	bl	8007658 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ee0:	4bc8      	ldr	r3, [pc, #800]	; (8007204 <HAL_RCC_OscConfig+0x338>)
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	220c      	movs	r2, #12
 8006ee6:	4013      	ands	r3, r2
 8006ee8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006eea:	4bc6      	ldr	r3, [pc, #792]	; (8007204 <HAL_RCC_OscConfig+0x338>)
 8006eec:	68da      	ldr	r2, [r3, #12]
 8006eee:	2380      	movs	r3, #128	; 0x80
 8006ef0:	025b      	lsls	r3, r3, #9
 8006ef2:	4013      	ands	r3, r2
 8006ef4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2201      	movs	r2, #1
 8006efc:	4013      	ands	r3, r2
 8006efe:	d100      	bne.n	8006f02 <HAL_RCC_OscConfig+0x36>
 8006f00:	e07e      	b.n	8007000 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	2b08      	cmp	r3, #8
 8006f06:	d007      	beq.n	8006f18 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	2b0c      	cmp	r3, #12
 8006f0c:	d112      	bne.n	8006f34 <HAL_RCC_OscConfig+0x68>
 8006f0e:	69ba      	ldr	r2, [r7, #24]
 8006f10:	2380      	movs	r3, #128	; 0x80
 8006f12:	025b      	lsls	r3, r3, #9
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d10d      	bne.n	8006f34 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f18:	4bba      	ldr	r3, [pc, #744]	; (8007204 <HAL_RCC_OscConfig+0x338>)
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	2380      	movs	r3, #128	; 0x80
 8006f1e:	029b      	lsls	r3, r3, #10
 8006f20:	4013      	ands	r3, r2
 8006f22:	d100      	bne.n	8006f26 <HAL_RCC_OscConfig+0x5a>
 8006f24:	e06b      	b.n	8006ffe <HAL_RCC_OscConfig+0x132>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d167      	bne.n	8006ffe <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	f000 fb92 	bl	8007658 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	685a      	ldr	r2, [r3, #4]
 8006f38:	2380      	movs	r3, #128	; 0x80
 8006f3a:	025b      	lsls	r3, r3, #9
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d107      	bne.n	8006f50 <HAL_RCC_OscConfig+0x84>
 8006f40:	4bb0      	ldr	r3, [pc, #704]	; (8007204 <HAL_RCC_OscConfig+0x338>)
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	4baf      	ldr	r3, [pc, #700]	; (8007204 <HAL_RCC_OscConfig+0x338>)
 8006f46:	2180      	movs	r1, #128	; 0x80
 8006f48:	0249      	lsls	r1, r1, #9
 8006f4a:	430a      	orrs	r2, r1
 8006f4c:	601a      	str	r2, [r3, #0]
 8006f4e:	e027      	b.n	8006fa0 <HAL_RCC_OscConfig+0xd4>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	685a      	ldr	r2, [r3, #4]
 8006f54:	23a0      	movs	r3, #160	; 0xa0
 8006f56:	02db      	lsls	r3, r3, #11
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d10e      	bne.n	8006f7a <HAL_RCC_OscConfig+0xae>
 8006f5c:	4ba9      	ldr	r3, [pc, #676]	; (8007204 <HAL_RCC_OscConfig+0x338>)
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	4ba8      	ldr	r3, [pc, #672]	; (8007204 <HAL_RCC_OscConfig+0x338>)
 8006f62:	2180      	movs	r1, #128	; 0x80
 8006f64:	02c9      	lsls	r1, r1, #11
 8006f66:	430a      	orrs	r2, r1
 8006f68:	601a      	str	r2, [r3, #0]
 8006f6a:	4ba6      	ldr	r3, [pc, #664]	; (8007204 <HAL_RCC_OscConfig+0x338>)
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	4ba5      	ldr	r3, [pc, #660]	; (8007204 <HAL_RCC_OscConfig+0x338>)
 8006f70:	2180      	movs	r1, #128	; 0x80
 8006f72:	0249      	lsls	r1, r1, #9
 8006f74:	430a      	orrs	r2, r1
 8006f76:	601a      	str	r2, [r3, #0]
 8006f78:	e012      	b.n	8006fa0 <HAL_RCC_OscConfig+0xd4>
 8006f7a:	4ba2      	ldr	r3, [pc, #648]	; (8007204 <HAL_RCC_OscConfig+0x338>)
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	4ba1      	ldr	r3, [pc, #644]	; (8007204 <HAL_RCC_OscConfig+0x338>)
 8006f80:	49a1      	ldr	r1, [pc, #644]	; (8007208 <HAL_RCC_OscConfig+0x33c>)
 8006f82:	400a      	ands	r2, r1
 8006f84:	601a      	str	r2, [r3, #0]
 8006f86:	4b9f      	ldr	r3, [pc, #636]	; (8007204 <HAL_RCC_OscConfig+0x338>)
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	2380      	movs	r3, #128	; 0x80
 8006f8c:	025b      	lsls	r3, r3, #9
 8006f8e:	4013      	ands	r3, r2
 8006f90:	60fb      	str	r3, [r7, #12]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	4b9b      	ldr	r3, [pc, #620]	; (8007204 <HAL_RCC_OscConfig+0x338>)
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	4b9a      	ldr	r3, [pc, #616]	; (8007204 <HAL_RCC_OscConfig+0x338>)
 8006f9a:	499c      	ldr	r1, [pc, #624]	; (800720c <HAL_RCC_OscConfig+0x340>)
 8006f9c:	400a      	ands	r2, r1
 8006f9e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d015      	beq.n	8006fd4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fa8:	f7fe ffb8 	bl	8005f1c <HAL_GetTick>
 8006fac:	0003      	movs	r3, r0
 8006fae:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006fb0:	e009      	b.n	8006fc6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006fb2:	f7fe ffb3 	bl	8005f1c <HAL_GetTick>
 8006fb6:	0002      	movs	r2, r0
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	1ad3      	subs	r3, r2, r3
 8006fbc:	2b64      	cmp	r3, #100	; 0x64
 8006fbe:	d902      	bls.n	8006fc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006fc0:	2303      	movs	r3, #3
 8006fc2:	f000 fb49 	bl	8007658 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006fc6:	4b8f      	ldr	r3, [pc, #572]	; (8007204 <HAL_RCC_OscConfig+0x338>)
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	2380      	movs	r3, #128	; 0x80
 8006fcc:	029b      	lsls	r3, r3, #10
 8006fce:	4013      	ands	r3, r2
 8006fd0:	d0ef      	beq.n	8006fb2 <HAL_RCC_OscConfig+0xe6>
 8006fd2:	e015      	b.n	8007000 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fd4:	f7fe ffa2 	bl	8005f1c <HAL_GetTick>
 8006fd8:	0003      	movs	r3, r0
 8006fda:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006fdc:	e008      	b.n	8006ff0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006fde:	f7fe ff9d 	bl	8005f1c <HAL_GetTick>
 8006fe2:	0002      	movs	r2, r0
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	1ad3      	subs	r3, r2, r3
 8006fe8:	2b64      	cmp	r3, #100	; 0x64
 8006fea:	d901      	bls.n	8006ff0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8006fec:	2303      	movs	r3, #3
 8006fee:	e333      	b.n	8007658 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006ff0:	4b84      	ldr	r3, [pc, #528]	; (8007204 <HAL_RCC_OscConfig+0x338>)
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	2380      	movs	r3, #128	; 0x80
 8006ff6:	029b      	lsls	r3, r3, #10
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	d1f0      	bne.n	8006fde <HAL_RCC_OscConfig+0x112>
 8006ffc:	e000      	b.n	8007000 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ffe:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	2202      	movs	r2, #2
 8007006:	4013      	ands	r3, r2
 8007008:	d100      	bne.n	800700c <HAL_RCC_OscConfig+0x140>
 800700a:	e098      	b.n	800713e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8007012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007014:	2220      	movs	r2, #32
 8007016:	4013      	ands	r3, r2
 8007018:	d009      	beq.n	800702e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800701a:	4b7a      	ldr	r3, [pc, #488]	; (8007204 <HAL_RCC_OscConfig+0x338>)
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	4b79      	ldr	r3, [pc, #484]	; (8007204 <HAL_RCC_OscConfig+0x338>)
 8007020:	2120      	movs	r1, #32
 8007022:	430a      	orrs	r2, r1
 8007024:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8007026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007028:	2220      	movs	r2, #32
 800702a:	4393      	bics	r3, r2
 800702c:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	2b04      	cmp	r3, #4
 8007032:	d005      	beq.n	8007040 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	2b0c      	cmp	r3, #12
 8007038:	d13d      	bne.n	80070b6 <HAL_RCC_OscConfig+0x1ea>
 800703a:	69bb      	ldr	r3, [r7, #24]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d13a      	bne.n	80070b6 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8007040:	4b70      	ldr	r3, [pc, #448]	; (8007204 <HAL_RCC_OscConfig+0x338>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2204      	movs	r2, #4
 8007046:	4013      	ands	r3, r2
 8007048:	d004      	beq.n	8007054 <HAL_RCC_OscConfig+0x188>
 800704a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704c:	2b00      	cmp	r3, #0
 800704e:	d101      	bne.n	8007054 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	e301      	b.n	8007658 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007054:	4b6b      	ldr	r3, [pc, #428]	; (8007204 <HAL_RCC_OscConfig+0x338>)
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	4a6d      	ldr	r2, [pc, #436]	; (8007210 <HAL_RCC_OscConfig+0x344>)
 800705a:	4013      	ands	r3, r2
 800705c:	0019      	movs	r1, r3
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	021a      	lsls	r2, r3, #8
 8007064:	4b67      	ldr	r3, [pc, #412]	; (8007204 <HAL_RCC_OscConfig+0x338>)
 8007066:	430a      	orrs	r2, r1
 8007068:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800706a:	4b66      	ldr	r3, [pc, #408]	; (8007204 <HAL_RCC_OscConfig+0x338>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2209      	movs	r2, #9
 8007070:	4393      	bics	r3, r2
 8007072:	0019      	movs	r1, r3
 8007074:	4b63      	ldr	r3, [pc, #396]	; (8007204 <HAL_RCC_OscConfig+0x338>)
 8007076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007078:	430a      	orrs	r2, r1
 800707a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800707c:	f000 fc20 	bl	80078c0 <HAL_RCC_GetSysClockFreq>
 8007080:	0001      	movs	r1, r0
 8007082:	4b60      	ldr	r3, [pc, #384]	; (8007204 <HAL_RCC_OscConfig+0x338>)
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	091b      	lsrs	r3, r3, #4
 8007088:	220f      	movs	r2, #15
 800708a:	4013      	ands	r3, r2
 800708c:	4a61      	ldr	r2, [pc, #388]	; (8007214 <HAL_RCC_OscConfig+0x348>)
 800708e:	5cd3      	ldrb	r3, [r2, r3]
 8007090:	000a      	movs	r2, r1
 8007092:	40da      	lsrs	r2, r3
 8007094:	4b60      	ldr	r3, [pc, #384]	; (8007218 <HAL_RCC_OscConfig+0x34c>)
 8007096:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8007098:	2513      	movs	r5, #19
 800709a:	197c      	adds	r4, r7, r5
 800709c:	2000      	movs	r0, #0
 800709e:	f7fe ff07 	bl	8005eb0 <HAL_InitTick>
 80070a2:	0003      	movs	r3, r0
 80070a4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80070a6:	197b      	adds	r3, r7, r5
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d047      	beq.n	800713e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80070ae:	2313      	movs	r3, #19
 80070b0:	18fb      	adds	r3, r7, r3
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	e2d0      	b.n	8007658 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80070b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d027      	beq.n	800710c <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80070bc:	4b51      	ldr	r3, [pc, #324]	; (8007204 <HAL_RCC_OscConfig+0x338>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2209      	movs	r2, #9
 80070c2:	4393      	bics	r3, r2
 80070c4:	0019      	movs	r1, r3
 80070c6:	4b4f      	ldr	r3, [pc, #316]	; (8007204 <HAL_RCC_OscConfig+0x338>)
 80070c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070ca:	430a      	orrs	r2, r1
 80070cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070ce:	f7fe ff25 	bl	8005f1c <HAL_GetTick>
 80070d2:	0003      	movs	r3, r0
 80070d4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80070d6:	e008      	b.n	80070ea <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80070d8:	f7fe ff20 	bl	8005f1c <HAL_GetTick>
 80070dc:	0002      	movs	r2, r0
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	1ad3      	subs	r3, r2, r3
 80070e2:	2b02      	cmp	r3, #2
 80070e4:	d901      	bls.n	80070ea <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80070e6:	2303      	movs	r3, #3
 80070e8:	e2b6      	b.n	8007658 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80070ea:	4b46      	ldr	r3, [pc, #280]	; (8007204 <HAL_RCC_OscConfig+0x338>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	2204      	movs	r2, #4
 80070f0:	4013      	ands	r3, r2
 80070f2:	d0f1      	beq.n	80070d8 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070f4:	4b43      	ldr	r3, [pc, #268]	; (8007204 <HAL_RCC_OscConfig+0x338>)
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	4a45      	ldr	r2, [pc, #276]	; (8007210 <HAL_RCC_OscConfig+0x344>)
 80070fa:	4013      	ands	r3, r2
 80070fc:	0019      	movs	r1, r3
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	691b      	ldr	r3, [r3, #16]
 8007102:	021a      	lsls	r2, r3, #8
 8007104:	4b3f      	ldr	r3, [pc, #252]	; (8007204 <HAL_RCC_OscConfig+0x338>)
 8007106:	430a      	orrs	r2, r1
 8007108:	605a      	str	r2, [r3, #4]
 800710a:	e018      	b.n	800713e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800710c:	4b3d      	ldr	r3, [pc, #244]	; (8007204 <HAL_RCC_OscConfig+0x338>)
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	4b3c      	ldr	r3, [pc, #240]	; (8007204 <HAL_RCC_OscConfig+0x338>)
 8007112:	2101      	movs	r1, #1
 8007114:	438a      	bics	r2, r1
 8007116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007118:	f7fe ff00 	bl	8005f1c <HAL_GetTick>
 800711c:	0003      	movs	r3, r0
 800711e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007120:	e008      	b.n	8007134 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007122:	f7fe fefb 	bl	8005f1c <HAL_GetTick>
 8007126:	0002      	movs	r2, r0
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	1ad3      	subs	r3, r2, r3
 800712c:	2b02      	cmp	r3, #2
 800712e:	d901      	bls.n	8007134 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8007130:	2303      	movs	r3, #3
 8007132:	e291      	b.n	8007658 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007134:	4b33      	ldr	r3, [pc, #204]	; (8007204 <HAL_RCC_OscConfig+0x338>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2204      	movs	r2, #4
 800713a:	4013      	ands	r3, r2
 800713c:	d1f1      	bne.n	8007122 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	2210      	movs	r2, #16
 8007144:	4013      	ands	r3, r2
 8007146:	d100      	bne.n	800714a <HAL_RCC_OscConfig+0x27e>
 8007148:	e09f      	b.n	800728a <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d13f      	bne.n	80071d0 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007150:	4b2c      	ldr	r3, [pc, #176]	; (8007204 <HAL_RCC_OscConfig+0x338>)
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	2380      	movs	r3, #128	; 0x80
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	4013      	ands	r3, r2
 800715a:	d005      	beq.n	8007168 <HAL_RCC_OscConfig+0x29c>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	69db      	ldr	r3, [r3, #28]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d101      	bne.n	8007168 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8007164:	2301      	movs	r3, #1
 8007166:	e277      	b.n	8007658 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007168:	4b26      	ldr	r3, [pc, #152]	; (8007204 <HAL_RCC_OscConfig+0x338>)
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	4a2b      	ldr	r2, [pc, #172]	; (800721c <HAL_RCC_OscConfig+0x350>)
 800716e:	4013      	ands	r3, r2
 8007170:	0019      	movs	r1, r3
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007176:	4b23      	ldr	r3, [pc, #140]	; (8007204 <HAL_RCC_OscConfig+0x338>)
 8007178:	430a      	orrs	r2, r1
 800717a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800717c:	4b21      	ldr	r3, [pc, #132]	; (8007204 <HAL_RCC_OscConfig+0x338>)
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	021b      	lsls	r3, r3, #8
 8007182:	0a19      	lsrs	r1, r3, #8
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6a1b      	ldr	r3, [r3, #32]
 8007188:	061a      	lsls	r2, r3, #24
 800718a:	4b1e      	ldr	r3, [pc, #120]	; (8007204 <HAL_RCC_OscConfig+0x338>)
 800718c:	430a      	orrs	r2, r1
 800718e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007194:	0b5b      	lsrs	r3, r3, #13
 8007196:	3301      	adds	r3, #1
 8007198:	2280      	movs	r2, #128	; 0x80
 800719a:	0212      	lsls	r2, r2, #8
 800719c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800719e:	4b19      	ldr	r3, [pc, #100]	; (8007204 <HAL_RCC_OscConfig+0x338>)
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	091b      	lsrs	r3, r3, #4
 80071a4:	210f      	movs	r1, #15
 80071a6:	400b      	ands	r3, r1
 80071a8:	491a      	ldr	r1, [pc, #104]	; (8007214 <HAL_RCC_OscConfig+0x348>)
 80071aa:	5ccb      	ldrb	r3, [r1, r3]
 80071ac:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80071ae:	4b1a      	ldr	r3, [pc, #104]	; (8007218 <HAL_RCC_OscConfig+0x34c>)
 80071b0:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80071b2:	2513      	movs	r5, #19
 80071b4:	197c      	adds	r4, r7, r5
 80071b6:	2000      	movs	r0, #0
 80071b8:	f7fe fe7a 	bl	8005eb0 <HAL_InitTick>
 80071bc:	0003      	movs	r3, r0
 80071be:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80071c0:	197b      	adds	r3, r7, r5
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d060      	beq.n	800728a <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 80071c8:	2313      	movs	r3, #19
 80071ca:	18fb      	adds	r3, r7, r3
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	e243      	b.n	8007658 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	69db      	ldr	r3, [r3, #28]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d03e      	beq.n	8007256 <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80071d8:	4b0a      	ldr	r3, [pc, #40]	; (8007204 <HAL_RCC_OscConfig+0x338>)
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	4b09      	ldr	r3, [pc, #36]	; (8007204 <HAL_RCC_OscConfig+0x338>)
 80071de:	2180      	movs	r1, #128	; 0x80
 80071e0:	0049      	lsls	r1, r1, #1
 80071e2:	430a      	orrs	r2, r1
 80071e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071e6:	f7fe fe99 	bl	8005f1c <HAL_GetTick>
 80071ea:	0003      	movs	r3, r0
 80071ec:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80071ee:	e017      	b.n	8007220 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80071f0:	f7fe fe94 	bl	8005f1c <HAL_GetTick>
 80071f4:	0002      	movs	r2, r0
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	1ad3      	subs	r3, r2, r3
 80071fa:	2b02      	cmp	r3, #2
 80071fc:	d910      	bls.n	8007220 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 80071fe:	2303      	movs	r3, #3
 8007200:	e22a      	b.n	8007658 <HAL_RCC_OscConfig+0x78c>
 8007202:	46c0      	nop			; (mov r8, r8)
 8007204:	40021000 	.word	0x40021000
 8007208:	fffeffff 	.word	0xfffeffff
 800720c:	fffbffff 	.word	0xfffbffff
 8007210:	ffffe0ff 	.word	0xffffe0ff
 8007214:	0800b2d8 	.word	0x0800b2d8
 8007218:	20000010 	.word	0x20000010
 800721c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007220:	4bc6      	ldr	r3, [pc, #792]	; (800753c <HAL_RCC_OscConfig+0x670>)
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	2380      	movs	r3, #128	; 0x80
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	4013      	ands	r3, r2
 800722a:	d0e1      	beq.n	80071f0 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800722c:	4bc3      	ldr	r3, [pc, #780]	; (800753c <HAL_RCC_OscConfig+0x670>)
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	4ac3      	ldr	r2, [pc, #780]	; (8007540 <HAL_RCC_OscConfig+0x674>)
 8007232:	4013      	ands	r3, r2
 8007234:	0019      	movs	r1, r3
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800723a:	4bc0      	ldr	r3, [pc, #768]	; (800753c <HAL_RCC_OscConfig+0x670>)
 800723c:	430a      	orrs	r2, r1
 800723e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007240:	4bbe      	ldr	r3, [pc, #760]	; (800753c <HAL_RCC_OscConfig+0x670>)
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	021b      	lsls	r3, r3, #8
 8007246:	0a19      	lsrs	r1, r3, #8
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6a1b      	ldr	r3, [r3, #32]
 800724c:	061a      	lsls	r2, r3, #24
 800724e:	4bbb      	ldr	r3, [pc, #748]	; (800753c <HAL_RCC_OscConfig+0x670>)
 8007250:	430a      	orrs	r2, r1
 8007252:	605a      	str	r2, [r3, #4]
 8007254:	e019      	b.n	800728a <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007256:	4bb9      	ldr	r3, [pc, #740]	; (800753c <HAL_RCC_OscConfig+0x670>)
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	4bb8      	ldr	r3, [pc, #736]	; (800753c <HAL_RCC_OscConfig+0x670>)
 800725c:	49b9      	ldr	r1, [pc, #740]	; (8007544 <HAL_RCC_OscConfig+0x678>)
 800725e:	400a      	ands	r2, r1
 8007260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007262:	f7fe fe5b 	bl	8005f1c <HAL_GetTick>
 8007266:	0003      	movs	r3, r0
 8007268:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800726a:	e008      	b.n	800727e <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800726c:	f7fe fe56 	bl	8005f1c <HAL_GetTick>
 8007270:	0002      	movs	r2, r0
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	1ad3      	subs	r3, r2, r3
 8007276:	2b02      	cmp	r3, #2
 8007278:	d901      	bls.n	800727e <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	e1ec      	b.n	8007658 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800727e:	4baf      	ldr	r3, [pc, #700]	; (800753c <HAL_RCC_OscConfig+0x670>)
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	2380      	movs	r3, #128	; 0x80
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	4013      	ands	r3, r2
 8007288:	d1f0      	bne.n	800726c <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	2208      	movs	r2, #8
 8007290:	4013      	ands	r3, r2
 8007292:	d036      	beq.n	8007302 <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	695b      	ldr	r3, [r3, #20]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d019      	beq.n	80072d0 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800729c:	4ba7      	ldr	r3, [pc, #668]	; (800753c <HAL_RCC_OscConfig+0x670>)
 800729e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80072a0:	4ba6      	ldr	r3, [pc, #664]	; (800753c <HAL_RCC_OscConfig+0x670>)
 80072a2:	2101      	movs	r1, #1
 80072a4:	430a      	orrs	r2, r1
 80072a6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072a8:	f7fe fe38 	bl	8005f1c <HAL_GetTick>
 80072ac:	0003      	movs	r3, r0
 80072ae:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80072b0:	e008      	b.n	80072c4 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80072b2:	f7fe fe33 	bl	8005f1c <HAL_GetTick>
 80072b6:	0002      	movs	r2, r0
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	1ad3      	subs	r3, r2, r3
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d901      	bls.n	80072c4 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 80072c0:	2303      	movs	r3, #3
 80072c2:	e1c9      	b.n	8007658 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80072c4:	4b9d      	ldr	r3, [pc, #628]	; (800753c <HAL_RCC_OscConfig+0x670>)
 80072c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072c8:	2202      	movs	r2, #2
 80072ca:	4013      	ands	r3, r2
 80072cc:	d0f1      	beq.n	80072b2 <HAL_RCC_OscConfig+0x3e6>
 80072ce:	e018      	b.n	8007302 <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80072d0:	4b9a      	ldr	r3, [pc, #616]	; (800753c <HAL_RCC_OscConfig+0x670>)
 80072d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80072d4:	4b99      	ldr	r3, [pc, #612]	; (800753c <HAL_RCC_OscConfig+0x670>)
 80072d6:	2101      	movs	r1, #1
 80072d8:	438a      	bics	r2, r1
 80072da:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072dc:	f7fe fe1e 	bl	8005f1c <HAL_GetTick>
 80072e0:	0003      	movs	r3, r0
 80072e2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80072e4:	e008      	b.n	80072f8 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80072e6:	f7fe fe19 	bl	8005f1c <HAL_GetTick>
 80072ea:	0002      	movs	r2, r0
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	1ad3      	subs	r3, r2, r3
 80072f0:	2b02      	cmp	r3, #2
 80072f2:	d901      	bls.n	80072f8 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80072f4:	2303      	movs	r3, #3
 80072f6:	e1af      	b.n	8007658 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80072f8:	4b90      	ldr	r3, [pc, #576]	; (800753c <HAL_RCC_OscConfig+0x670>)
 80072fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072fc:	2202      	movs	r2, #2
 80072fe:	4013      	ands	r3, r2
 8007300:	d1f1      	bne.n	80072e6 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	2204      	movs	r2, #4
 8007308:	4013      	ands	r3, r2
 800730a:	d100      	bne.n	800730e <HAL_RCC_OscConfig+0x442>
 800730c:	e0af      	b.n	800746e <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800730e:	2323      	movs	r3, #35	; 0x23
 8007310:	18fb      	adds	r3, r7, r3
 8007312:	2200      	movs	r2, #0
 8007314:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007316:	4b89      	ldr	r3, [pc, #548]	; (800753c <HAL_RCC_OscConfig+0x670>)
 8007318:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800731a:	2380      	movs	r3, #128	; 0x80
 800731c:	055b      	lsls	r3, r3, #21
 800731e:	4013      	ands	r3, r2
 8007320:	d10a      	bne.n	8007338 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007322:	4b86      	ldr	r3, [pc, #536]	; (800753c <HAL_RCC_OscConfig+0x670>)
 8007324:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007326:	4b85      	ldr	r3, [pc, #532]	; (800753c <HAL_RCC_OscConfig+0x670>)
 8007328:	2180      	movs	r1, #128	; 0x80
 800732a:	0549      	lsls	r1, r1, #21
 800732c:	430a      	orrs	r2, r1
 800732e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8007330:	2323      	movs	r3, #35	; 0x23
 8007332:	18fb      	adds	r3, r7, r3
 8007334:	2201      	movs	r2, #1
 8007336:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007338:	4b83      	ldr	r3, [pc, #524]	; (8007548 <HAL_RCC_OscConfig+0x67c>)
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	2380      	movs	r3, #128	; 0x80
 800733e:	005b      	lsls	r3, r3, #1
 8007340:	4013      	ands	r3, r2
 8007342:	d11a      	bne.n	800737a <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007344:	4b80      	ldr	r3, [pc, #512]	; (8007548 <HAL_RCC_OscConfig+0x67c>)
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	4b7f      	ldr	r3, [pc, #508]	; (8007548 <HAL_RCC_OscConfig+0x67c>)
 800734a:	2180      	movs	r1, #128	; 0x80
 800734c:	0049      	lsls	r1, r1, #1
 800734e:	430a      	orrs	r2, r1
 8007350:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007352:	f7fe fde3 	bl	8005f1c <HAL_GetTick>
 8007356:	0003      	movs	r3, r0
 8007358:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800735a:	e008      	b.n	800736e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800735c:	f7fe fdde 	bl	8005f1c <HAL_GetTick>
 8007360:	0002      	movs	r2, r0
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	1ad3      	subs	r3, r2, r3
 8007366:	2b64      	cmp	r3, #100	; 0x64
 8007368:	d901      	bls.n	800736e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800736a:	2303      	movs	r3, #3
 800736c:	e174      	b.n	8007658 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800736e:	4b76      	ldr	r3, [pc, #472]	; (8007548 <HAL_RCC_OscConfig+0x67c>)
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	2380      	movs	r3, #128	; 0x80
 8007374:	005b      	lsls	r3, r3, #1
 8007376:	4013      	ands	r3, r2
 8007378:	d0f0      	beq.n	800735c <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	689a      	ldr	r2, [r3, #8]
 800737e:	2380      	movs	r3, #128	; 0x80
 8007380:	005b      	lsls	r3, r3, #1
 8007382:	429a      	cmp	r2, r3
 8007384:	d107      	bne.n	8007396 <HAL_RCC_OscConfig+0x4ca>
 8007386:	4b6d      	ldr	r3, [pc, #436]	; (800753c <HAL_RCC_OscConfig+0x670>)
 8007388:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800738a:	4b6c      	ldr	r3, [pc, #432]	; (800753c <HAL_RCC_OscConfig+0x670>)
 800738c:	2180      	movs	r1, #128	; 0x80
 800738e:	0049      	lsls	r1, r1, #1
 8007390:	430a      	orrs	r2, r1
 8007392:	651a      	str	r2, [r3, #80]	; 0x50
 8007394:	e031      	b.n	80073fa <HAL_RCC_OscConfig+0x52e>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d10c      	bne.n	80073b8 <HAL_RCC_OscConfig+0x4ec>
 800739e:	4b67      	ldr	r3, [pc, #412]	; (800753c <HAL_RCC_OscConfig+0x670>)
 80073a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80073a2:	4b66      	ldr	r3, [pc, #408]	; (800753c <HAL_RCC_OscConfig+0x670>)
 80073a4:	4967      	ldr	r1, [pc, #412]	; (8007544 <HAL_RCC_OscConfig+0x678>)
 80073a6:	400a      	ands	r2, r1
 80073a8:	651a      	str	r2, [r3, #80]	; 0x50
 80073aa:	4b64      	ldr	r3, [pc, #400]	; (800753c <HAL_RCC_OscConfig+0x670>)
 80073ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80073ae:	4b63      	ldr	r3, [pc, #396]	; (800753c <HAL_RCC_OscConfig+0x670>)
 80073b0:	4966      	ldr	r1, [pc, #408]	; (800754c <HAL_RCC_OscConfig+0x680>)
 80073b2:	400a      	ands	r2, r1
 80073b4:	651a      	str	r2, [r3, #80]	; 0x50
 80073b6:	e020      	b.n	80073fa <HAL_RCC_OscConfig+0x52e>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	689a      	ldr	r2, [r3, #8]
 80073bc:	23a0      	movs	r3, #160	; 0xa0
 80073be:	00db      	lsls	r3, r3, #3
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d10e      	bne.n	80073e2 <HAL_RCC_OscConfig+0x516>
 80073c4:	4b5d      	ldr	r3, [pc, #372]	; (800753c <HAL_RCC_OscConfig+0x670>)
 80073c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80073c8:	4b5c      	ldr	r3, [pc, #368]	; (800753c <HAL_RCC_OscConfig+0x670>)
 80073ca:	2180      	movs	r1, #128	; 0x80
 80073cc:	00c9      	lsls	r1, r1, #3
 80073ce:	430a      	orrs	r2, r1
 80073d0:	651a      	str	r2, [r3, #80]	; 0x50
 80073d2:	4b5a      	ldr	r3, [pc, #360]	; (800753c <HAL_RCC_OscConfig+0x670>)
 80073d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80073d6:	4b59      	ldr	r3, [pc, #356]	; (800753c <HAL_RCC_OscConfig+0x670>)
 80073d8:	2180      	movs	r1, #128	; 0x80
 80073da:	0049      	lsls	r1, r1, #1
 80073dc:	430a      	orrs	r2, r1
 80073de:	651a      	str	r2, [r3, #80]	; 0x50
 80073e0:	e00b      	b.n	80073fa <HAL_RCC_OscConfig+0x52e>
 80073e2:	4b56      	ldr	r3, [pc, #344]	; (800753c <HAL_RCC_OscConfig+0x670>)
 80073e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80073e6:	4b55      	ldr	r3, [pc, #340]	; (800753c <HAL_RCC_OscConfig+0x670>)
 80073e8:	4956      	ldr	r1, [pc, #344]	; (8007544 <HAL_RCC_OscConfig+0x678>)
 80073ea:	400a      	ands	r2, r1
 80073ec:	651a      	str	r2, [r3, #80]	; 0x50
 80073ee:	4b53      	ldr	r3, [pc, #332]	; (800753c <HAL_RCC_OscConfig+0x670>)
 80073f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80073f2:	4b52      	ldr	r3, [pc, #328]	; (800753c <HAL_RCC_OscConfig+0x670>)
 80073f4:	4955      	ldr	r1, [pc, #340]	; (800754c <HAL_RCC_OscConfig+0x680>)
 80073f6:	400a      	ands	r2, r1
 80073f8:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d015      	beq.n	800742e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007402:	f7fe fd8b 	bl	8005f1c <HAL_GetTick>
 8007406:	0003      	movs	r3, r0
 8007408:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800740a:	e009      	b.n	8007420 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800740c:	f7fe fd86 	bl	8005f1c <HAL_GetTick>
 8007410:	0002      	movs	r2, r0
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	1ad3      	subs	r3, r2, r3
 8007416:	4a4e      	ldr	r2, [pc, #312]	; (8007550 <HAL_RCC_OscConfig+0x684>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d901      	bls.n	8007420 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 800741c:	2303      	movs	r3, #3
 800741e:	e11b      	b.n	8007658 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007420:	4b46      	ldr	r3, [pc, #280]	; (800753c <HAL_RCC_OscConfig+0x670>)
 8007422:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007424:	2380      	movs	r3, #128	; 0x80
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	4013      	ands	r3, r2
 800742a:	d0ef      	beq.n	800740c <HAL_RCC_OscConfig+0x540>
 800742c:	e014      	b.n	8007458 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800742e:	f7fe fd75 	bl	8005f1c <HAL_GetTick>
 8007432:	0003      	movs	r3, r0
 8007434:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007436:	e009      	b.n	800744c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007438:	f7fe fd70 	bl	8005f1c <HAL_GetTick>
 800743c:	0002      	movs	r2, r0
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	4a43      	ldr	r2, [pc, #268]	; (8007550 <HAL_RCC_OscConfig+0x684>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d901      	bls.n	800744c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007448:	2303      	movs	r3, #3
 800744a:	e105      	b.n	8007658 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800744c:	4b3b      	ldr	r3, [pc, #236]	; (800753c <HAL_RCC_OscConfig+0x670>)
 800744e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007450:	2380      	movs	r3, #128	; 0x80
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	4013      	ands	r3, r2
 8007456:	d1ef      	bne.n	8007438 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007458:	2323      	movs	r3, #35	; 0x23
 800745a:	18fb      	adds	r3, r7, r3
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	2b01      	cmp	r3, #1
 8007460:	d105      	bne.n	800746e <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007462:	4b36      	ldr	r3, [pc, #216]	; (800753c <HAL_RCC_OscConfig+0x670>)
 8007464:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007466:	4b35      	ldr	r3, [pc, #212]	; (800753c <HAL_RCC_OscConfig+0x670>)
 8007468:	493a      	ldr	r1, [pc, #232]	; (8007554 <HAL_RCC_OscConfig+0x688>)
 800746a:	400a      	ands	r2, r1
 800746c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	2220      	movs	r2, #32
 8007474:	4013      	ands	r3, r2
 8007476:	d049      	beq.n	800750c <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	699b      	ldr	r3, [r3, #24]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d026      	beq.n	80074ce <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8007480:	4b2e      	ldr	r3, [pc, #184]	; (800753c <HAL_RCC_OscConfig+0x670>)
 8007482:	689a      	ldr	r2, [r3, #8]
 8007484:	4b2d      	ldr	r3, [pc, #180]	; (800753c <HAL_RCC_OscConfig+0x670>)
 8007486:	2101      	movs	r1, #1
 8007488:	430a      	orrs	r2, r1
 800748a:	609a      	str	r2, [r3, #8]
 800748c:	4b2b      	ldr	r3, [pc, #172]	; (800753c <HAL_RCC_OscConfig+0x670>)
 800748e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007490:	4b2a      	ldr	r3, [pc, #168]	; (800753c <HAL_RCC_OscConfig+0x670>)
 8007492:	2101      	movs	r1, #1
 8007494:	430a      	orrs	r2, r1
 8007496:	635a      	str	r2, [r3, #52]	; 0x34
 8007498:	4b2f      	ldr	r3, [pc, #188]	; (8007558 <HAL_RCC_OscConfig+0x68c>)
 800749a:	6a1a      	ldr	r2, [r3, #32]
 800749c:	4b2e      	ldr	r3, [pc, #184]	; (8007558 <HAL_RCC_OscConfig+0x68c>)
 800749e:	2180      	movs	r1, #128	; 0x80
 80074a0:	0189      	lsls	r1, r1, #6
 80074a2:	430a      	orrs	r2, r1
 80074a4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074a6:	f7fe fd39 	bl	8005f1c <HAL_GetTick>
 80074aa:	0003      	movs	r3, r0
 80074ac:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80074ae:	e008      	b.n	80074c2 <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80074b0:	f7fe fd34 	bl	8005f1c <HAL_GetTick>
 80074b4:	0002      	movs	r2, r0
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	1ad3      	subs	r3, r2, r3
 80074ba:	2b02      	cmp	r3, #2
 80074bc:	d901      	bls.n	80074c2 <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 80074be:	2303      	movs	r3, #3
 80074c0:	e0ca      	b.n	8007658 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80074c2:	4b1e      	ldr	r3, [pc, #120]	; (800753c <HAL_RCC_OscConfig+0x670>)
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	2202      	movs	r2, #2
 80074c8:	4013      	ands	r3, r2
 80074ca:	d0f1      	beq.n	80074b0 <HAL_RCC_OscConfig+0x5e4>
 80074cc:	e01e      	b.n	800750c <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80074ce:	4b1b      	ldr	r3, [pc, #108]	; (800753c <HAL_RCC_OscConfig+0x670>)
 80074d0:	689a      	ldr	r2, [r3, #8]
 80074d2:	4b1a      	ldr	r3, [pc, #104]	; (800753c <HAL_RCC_OscConfig+0x670>)
 80074d4:	2101      	movs	r1, #1
 80074d6:	438a      	bics	r2, r1
 80074d8:	609a      	str	r2, [r3, #8]
 80074da:	4b1f      	ldr	r3, [pc, #124]	; (8007558 <HAL_RCC_OscConfig+0x68c>)
 80074dc:	6a1a      	ldr	r2, [r3, #32]
 80074de:	4b1e      	ldr	r3, [pc, #120]	; (8007558 <HAL_RCC_OscConfig+0x68c>)
 80074e0:	491e      	ldr	r1, [pc, #120]	; (800755c <HAL_RCC_OscConfig+0x690>)
 80074e2:	400a      	ands	r2, r1
 80074e4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074e6:	f7fe fd19 	bl	8005f1c <HAL_GetTick>
 80074ea:	0003      	movs	r3, r0
 80074ec:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80074ee:	e008      	b.n	8007502 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80074f0:	f7fe fd14 	bl	8005f1c <HAL_GetTick>
 80074f4:	0002      	movs	r2, r0
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	1ad3      	subs	r3, r2, r3
 80074fa:	2b02      	cmp	r3, #2
 80074fc:	d901      	bls.n	8007502 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 80074fe:	2303      	movs	r3, #3
 8007500:	e0aa      	b.n	8007658 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007502:	4b0e      	ldr	r3, [pc, #56]	; (800753c <HAL_RCC_OscConfig+0x670>)
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	2202      	movs	r2, #2
 8007508:	4013      	ands	r3, r2
 800750a:	d1f1      	bne.n	80074f0 <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007510:	2b00      	cmp	r3, #0
 8007512:	d100      	bne.n	8007516 <HAL_RCC_OscConfig+0x64a>
 8007514:	e09f      	b.n	8007656 <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	2b0c      	cmp	r3, #12
 800751a:	d100      	bne.n	800751e <HAL_RCC_OscConfig+0x652>
 800751c:	e078      	b.n	8007610 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007522:	2b02      	cmp	r3, #2
 8007524:	d159      	bne.n	80075da <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007526:	4b05      	ldr	r3, [pc, #20]	; (800753c <HAL_RCC_OscConfig+0x670>)
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	4b04      	ldr	r3, [pc, #16]	; (800753c <HAL_RCC_OscConfig+0x670>)
 800752c:	490c      	ldr	r1, [pc, #48]	; (8007560 <HAL_RCC_OscConfig+0x694>)
 800752e:	400a      	ands	r2, r1
 8007530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007532:	f7fe fcf3 	bl	8005f1c <HAL_GetTick>
 8007536:	0003      	movs	r3, r0
 8007538:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800753a:	e01c      	b.n	8007576 <HAL_RCC_OscConfig+0x6aa>
 800753c:	40021000 	.word	0x40021000
 8007540:	ffff1fff 	.word	0xffff1fff
 8007544:	fffffeff 	.word	0xfffffeff
 8007548:	40007000 	.word	0x40007000
 800754c:	fffffbff 	.word	0xfffffbff
 8007550:	00001388 	.word	0x00001388
 8007554:	efffffff 	.word	0xefffffff
 8007558:	40010000 	.word	0x40010000
 800755c:	ffffdfff 	.word	0xffffdfff
 8007560:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007564:	f7fe fcda 	bl	8005f1c <HAL_GetTick>
 8007568:	0002      	movs	r2, r0
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	2b02      	cmp	r3, #2
 8007570:	d901      	bls.n	8007576 <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 8007572:	2303      	movs	r3, #3
 8007574:	e070      	b.n	8007658 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8007576:	4b3a      	ldr	r3, [pc, #232]	; (8007660 <HAL_RCC_OscConfig+0x794>)
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	2380      	movs	r3, #128	; 0x80
 800757c:	049b      	lsls	r3, r3, #18
 800757e:	4013      	ands	r3, r2
 8007580:	d1f0      	bne.n	8007564 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007582:	4b37      	ldr	r3, [pc, #220]	; (8007660 <HAL_RCC_OscConfig+0x794>)
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	4a37      	ldr	r2, [pc, #220]	; (8007664 <HAL_RCC_OscConfig+0x798>)
 8007588:	4013      	ands	r3, r2
 800758a:	0019      	movs	r1, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007594:	431a      	orrs	r2, r3
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800759a:	431a      	orrs	r2, r3
 800759c:	4b30      	ldr	r3, [pc, #192]	; (8007660 <HAL_RCC_OscConfig+0x794>)
 800759e:	430a      	orrs	r2, r1
 80075a0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80075a2:	4b2f      	ldr	r3, [pc, #188]	; (8007660 <HAL_RCC_OscConfig+0x794>)
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	4b2e      	ldr	r3, [pc, #184]	; (8007660 <HAL_RCC_OscConfig+0x794>)
 80075a8:	2180      	movs	r1, #128	; 0x80
 80075aa:	0449      	lsls	r1, r1, #17
 80075ac:	430a      	orrs	r2, r1
 80075ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075b0:	f7fe fcb4 	bl	8005f1c <HAL_GetTick>
 80075b4:	0003      	movs	r3, r0
 80075b6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80075b8:	e008      	b.n	80075cc <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075ba:	f7fe fcaf 	bl	8005f1c <HAL_GetTick>
 80075be:	0002      	movs	r2, r0
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	1ad3      	subs	r3, r2, r3
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	d901      	bls.n	80075cc <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 80075c8:	2303      	movs	r3, #3
 80075ca:	e045      	b.n	8007658 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80075cc:	4b24      	ldr	r3, [pc, #144]	; (8007660 <HAL_RCC_OscConfig+0x794>)
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	2380      	movs	r3, #128	; 0x80
 80075d2:	049b      	lsls	r3, r3, #18
 80075d4:	4013      	ands	r3, r2
 80075d6:	d0f0      	beq.n	80075ba <HAL_RCC_OscConfig+0x6ee>
 80075d8:	e03d      	b.n	8007656 <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075da:	4b21      	ldr	r3, [pc, #132]	; (8007660 <HAL_RCC_OscConfig+0x794>)
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	4b20      	ldr	r3, [pc, #128]	; (8007660 <HAL_RCC_OscConfig+0x794>)
 80075e0:	4921      	ldr	r1, [pc, #132]	; (8007668 <HAL_RCC_OscConfig+0x79c>)
 80075e2:	400a      	ands	r2, r1
 80075e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075e6:	f7fe fc99 	bl	8005f1c <HAL_GetTick>
 80075ea:	0003      	movs	r3, r0
 80075ec:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80075ee:	e008      	b.n	8007602 <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075f0:	f7fe fc94 	bl	8005f1c <HAL_GetTick>
 80075f4:	0002      	movs	r2, r0
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	1ad3      	subs	r3, r2, r3
 80075fa:	2b02      	cmp	r3, #2
 80075fc:	d901      	bls.n	8007602 <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 80075fe:	2303      	movs	r3, #3
 8007600:	e02a      	b.n	8007658 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8007602:	4b17      	ldr	r3, [pc, #92]	; (8007660 <HAL_RCC_OscConfig+0x794>)
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	2380      	movs	r3, #128	; 0x80
 8007608:	049b      	lsls	r3, r3, #18
 800760a:	4013      	ands	r3, r2
 800760c:	d1f0      	bne.n	80075f0 <HAL_RCC_OscConfig+0x724>
 800760e:	e022      	b.n	8007656 <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007614:	2b01      	cmp	r3, #1
 8007616:	d101      	bne.n	800761c <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	e01d      	b.n	8007658 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800761c:	4b10      	ldr	r3, [pc, #64]	; (8007660 <HAL_RCC_OscConfig+0x794>)
 800761e:	68db      	ldr	r3, [r3, #12]
 8007620:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007622:	69ba      	ldr	r2, [r7, #24]
 8007624:	2380      	movs	r3, #128	; 0x80
 8007626:	025b      	lsls	r3, r3, #9
 8007628:	401a      	ands	r2, r3
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800762e:	429a      	cmp	r2, r3
 8007630:	d10f      	bne.n	8007652 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8007632:	69ba      	ldr	r2, [r7, #24]
 8007634:	23f0      	movs	r3, #240	; 0xf0
 8007636:	039b      	lsls	r3, r3, #14
 8007638:	401a      	ands	r2, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800763e:	429a      	cmp	r2, r3
 8007640:	d107      	bne.n	8007652 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8007642:	69ba      	ldr	r2, [r7, #24]
 8007644:	23c0      	movs	r3, #192	; 0xc0
 8007646:	041b      	lsls	r3, r3, #16
 8007648:	401a      	ands	r2, r3
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800764e:	429a      	cmp	r2, r3
 8007650:	d001      	beq.n	8007656 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	e000      	b.n	8007658 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 8007656:	2300      	movs	r3, #0
}
 8007658:	0018      	movs	r0, r3
 800765a:	46bd      	mov	sp, r7
 800765c:	b00a      	add	sp, #40	; 0x28
 800765e:	bdb0      	pop	{r4, r5, r7, pc}
 8007660:	40021000 	.word	0x40021000
 8007664:	ff02ffff 	.word	0xff02ffff
 8007668:	feffffff 	.word	0xfeffffff

0800766c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800766c:	b5b0      	push	{r4, r5, r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d101      	bne.n	8007680 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	e10d      	b.n	800789c <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007680:	4b88      	ldr	r3, [pc, #544]	; (80078a4 <HAL_RCC_ClockConfig+0x238>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2201      	movs	r2, #1
 8007686:	4013      	ands	r3, r2
 8007688:	683a      	ldr	r2, [r7, #0]
 800768a:	429a      	cmp	r2, r3
 800768c:	d911      	bls.n	80076b2 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800768e:	4b85      	ldr	r3, [pc, #532]	; (80078a4 <HAL_RCC_ClockConfig+0x238>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	2201      	movs	r2, #1
 8007694:	4393      	bics	r3, r2
 8007696:	0019      	movs	r1, r3
 8007698:	4b82      	ldr	r3, [pc, #520]	; (80078a4 <HAL_RCC_ClockConfig+0x238>)
 800769a:	683a      	ldr	r2, [r7, #0]
 800769c:	430a      	orrs	r2, r1
 800769e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80076a0:	4b80      	ldr	r3, [pc, #512]	; (80078a4 <HAL_RCC_ClockConfig+0x238>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	2201      	movs	r2, #1
 80076a6:	4013      	ands	r3, r2
 80076a8:	683a      	ldr	r2, [r7, #0]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d001      	beq.n	80076b2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80076ae:	2301      	movs	r3, #1
 80076b0:	e0f4      	b.n	800789c <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	2202      	movs	r2, #2
 80076b8:	4013      	ands	r3, r2
 80076ba:	d009      	beq.n	80076d0 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076bc:	4b7a      	ldr	r3, [pc, #488]	; (80078a8 <HAL_RCC_ClockConfig+0x23c>)
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	22f0      	movs	r2, #240	; 0xf0
 80076c2:	4393      	bics	r3, r2
 80076c4:	0019      	movs	r1, r3
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	689a      	ldr	r2, [r3, #8]
 80076ca:	4b77      	ldr	r3, [pc, #476]	; (80078a8 <HAL_RCC_ClockConfig+0x23c>)
 80076cc:	430a      	orrs	r2, r1
 80076ce:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2201      	movs	r2, #1
 80076d6:	4013      	ands	r3, r2
 80076d8:	d100      	bne.n	80076dc <HAL_RCC_ClockConfig+0x70>
 80076da:	e089      	b.n	80077f0 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	2b02      	cmp	r3, #2
 80076e2:	d107      	bne.n	80076f4 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80076e4:	4b70      	ldr	r3, [pc, #448]	; (80078a8 <HAL_RCC_ClockConfig+0x23c>)
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	2380      	movs	r3, #128	; 0x80
 80076ea:	029b      	lsls	r3, r3, #10
 80076ec:	4013      	ands	r3, r2
 80076ee:	d120      	bne.n	8007732 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	e0d3      	b.n	800789c <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	2b03      	cmp	r3, #3
 80076fa:	d107      	bne.n	800770c <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80076fc:	4b6a      	ldr	r3, [pc, #424]	; (80078a8 <HAL_RCC_ClockConfig+0x23c>)
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	2380      	movs	r3, #128	; 0x80
 8007702:	049b      	lsls	r3, r3, #18
 8007704:	4013      	ands	r3, r2
 8007706:	d114      	bne.n	8007732 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	e0c7      	b.n	800789c <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	2b01      	cmp	r3, #1
 8007712:	d106      	bne.n	8007722 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007714:	4b64      	ldr	r3, [pc, #400]	; (80078a8 <HAL_RCC_ClockConfig+0x23c>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	2204      	movs	r2, #4
 800771a:	4013      	ands	r3, r2
 800771c:	d109      	bne.n	8007732 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	e0bc      	b.n	800789c <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007722:	4b61      	ldr	r3, [pc, #388]	; (80078a8 <HAL_RCC_ClockConfig+0x23c>)
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	2380      	movs	r3, #128	; 0x80
 8007728:	009b      	lsls	r3, r3, #2
 800772a:	4013      	ands	r3, r2
 800772c:	d101      	bne.n	8007732 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	e0b4      	b.n	800789c <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007732:	4b5d      	ldr	r3, [pc, #372]	; (80078a8 <HAL_RCC_ClockConfig+0x23c>)
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	2203      	movs	r2, #3
 8007738:	4393      	bics	r3, r2
 800773a:	0019      	movs	r1, r3
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	685a      	ldr	r2, [r3, #4]
 8007740:	4b59      	ldr	r3, [pc, #356]	; (80078a8 <HAL_RCC_ClockConfig+0x23c>)
 8007742:	430a      	orrs	r2, r1
 8007744:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007746:	f7fe fbe9 	bl	8005f1c <HAL_GetTick>
 800774a:	0003      	movs	r3, r0
 800774c:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	2b02      	cmp	r3, #2
 8007754:	d111      	bne.n	800777a <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007756:	e009      	b.n	800776c <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007758:	f7fe fbe0 	bl	8005f1c <HAL_GetTick>
 800775c:	0002      	movs	r2, r0
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	1ad3      	subs	r3, r2, r3
 8007762:	4a52      	ldr	r2, [pc, #328]	; (80078ac <HAL_RCC_ClockConfig+0x240>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d901      	bls.n	800776c <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8007768:	2303      	movs	r3, #3
 800776a:	e097      	b.n	800789c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800776c:	4b4e      	ldr	r3, [pc, #312]	; (80078a8 <HAL_RCC_ClockConfig+0x23c>)
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	220c      	movs	r2, #12
 8007772:	4013      	ands	r3, r2
 8007774:	2b08      	cmp	r3, #8
 8007776:	d1ef      	bne.n	8007758 <HAL_RCC_ClockConfig+0xec>
 8007778:	e03a      	b.n	80077f0 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	2b03      	cmp	r3, #3
 8007780:	d111      	bne.n	80077a6 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007782:	e009      	b.n	8007798 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007784:	f7fe fbca 	bl	8005f1c <HAL_GetTick>
 8007788:	0002      	movs	r2, r0
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	1ad3      	subs	r3, r2, r3
 800778e:	4a47      	ldr	r2, [pc, #284]	; (80078ac <HAL_RCC_ClockConfig+0x240>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d901      	bls.n	8007798 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8007794:	2303      	movs	r3, #3
 8007796:	e081      	b.n	800789c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007798:	4b43      	ldr	r3, [pc, #268]	; (80078a8 <HAL_RCC_ClockConfig+0x23c>)
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	220c      	movs	r2, #12
 800779e:	4013      	ands	r3, r2
 80077a0:	2b0c      	cmp	r3, #12
 80077a2:	d1ef      	bne.n	8007784 <HAL_RCC_ClockConfig+0x118>
 80077a4:	e024      	b.n	80077f0 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d11b      	bne.n	80077e6 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80077ae:	e009      	b.n	80077c4 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077b0:	f7fe fbb4 	bl	8005f1c <HAL_GetTick>
 80077b4:	0002      	movs	r2, r0
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	1ad3      	subs	r3, r2, r3
 80077ba:	4a3c      	ldr	r2, [pc, #240]	; (80078ac <HAL_RCC_ClockConfig+0x240>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d901      	bls.n	80077c4 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 80077c0:	2303      	movs	r3, #3
 80077c2:	e06b      	b.n	800789c <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80077c4:	4b38      	ldr	r3, [pc, #224]	; (80078a8 <HAL_RCC_ClockConfig+0x23c>)
 80077c6:	68db      	ldr	r3, [r3, #12]
 80077c8:	220c      	movs	r2, #12
 80077ca:	4013      	ands	r3, r2
 80077cc:	2b04      	cmp	r3, #4
 80077ce:	d1ef      	bne.n	80077b0 <HAL_RCC_ClockConfig+0x144>
 80077d0:	e00e      	b.n	80077f0 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077d2:	f7fe fba3 	bl	8005f1c <HAL_GetTick>
 80077d6:	0002      	movs	r2, r0
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	1ad3      	subs	r3, r2, r3
 80077dc:	4a33      	ldr	r2, [pc, #204]	; (80078ac <HAL_RCC_ClockConfig+0x240>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d901      	bls.n	80077e6 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 80077e2:	2303      	movs	r3, #3
 80077e4:	e05a      	b.n	800789c <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80077e6:	4b30      	ldr	r3, [pc, #192]	; (80078a8 <HAL_RCC_ClockConfig+0x23c>)
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	220c      	movs	r2, #12
 80077ec:	4013      	ands	r3, r2
 80077ee:	d1f0      	bne.n	80077d2 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80077f0:	4b2c      	ldr	r3, [pc, #176]	; (80078a4 <HAL_RCC_ClockConfig+0x238>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	2201      	movs	r2, #1
 80077f6:	4013      	ands	r3, r2
 80077f8:	683a      	ldr	r2, [r7, #0]
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d211      	bcs.n	8007822 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077fe:	4b29      	ldr	r3, [pc, #164]	; (80078a4 <HAL_RCC_ClockConfig+0x238>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	2201      	movs	r2, #1
 8007804:	4393      	bics	r3, r2
 8007806:	0019      	movs	r1, r3
 8007808:	4b26      	ldr	r3, [pc, #152]	; (80078a4 <HAL_RCC_ClockConfig+0x238>)
 800780a:	683a      	ldr	r2, [r7, #0]
 800780c:	430a      	orrs	r2, r1
 800780e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007810:	4b24      	ldr	r3, [pc, #144]	; (80078a4 <HAL_RCC_ClockConfig+0x238>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2201      	movs	r2, #1
 8007816:	4013      	ands	r3, r2
 8007818:	683a      	ldr	r2, [r7, #0]
 800781a:	429a      	cmp	r2, r3
 800781c:	d001      	beq.n	8007822 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	e03c      	b.n	800789c <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	2204      	movs	r2, #4
 8007828:	4013      	ands	r3, r2
 800782a:	d009      	beq.n	8007840 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800782c:	4b1e      	ldr	r3, [pc, #120]	; (80078a8 <HAL_RCC_ClockConfig+0x23c>)
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	4a1f      	ldr	r2, [pc, #124]	; (80078b0 <HAL_RCC_ClockConfig+0x244>)
 8007832:	4013      	ands	r3, r2
 8007834:	0019      	movs	r1, r3
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	68da      	ldr	r2, [r3, #12]
 800783a:	4b1b      	ldr	r3, [pc, #108]	; (80078a8 <HAL_RCC_ClockConfig+0x23c>)
 800783c:	430a      	orrs	r2, r1
 800783e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	2208      	movs	r2, #8
 8007846:	4013      	ands	r3, r2
 8007848:	d00a      	beq.n	8007860 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800784a:	4b17      	ldr	r3, [pc, #92]	; (80078a8 <HAL_RCC_ClockConfig+0x23c>)
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	4a19      	ldr	r2, [pc, #100]	; (80078b4 <HAL_RCC_ClockConfig+0x248>)
 8007850:	4013      	ands	r3, r2
 8007852:	0019      	movs	r1, r3
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	691b      	ldr	r3, [r3, #16]
 8007858:	00da      	lsls	r2, r3, #3
 800785a:	4b13      	ldr	r3, [pc, #76]	; (80078a8 <HAL_RCC_ClockConfig+0x23c>)
 800785c:	430a      	orrs	r2, r1
 800785e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007860:	f000 f82e 	bl	80078c0 <HAL_RCC_GetSysClockFreq>
 8007864:	0001      	movs	r1, r0
 8007866:	4b10      	ldr	r3, [pc, #64]	; (80078a8 <HAL_RCC_ClockConfig+0x23c>)
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	091b      	lsrs	r3, r3, #4
 800786c:	220f      	movs	r2, #15
 800786e:	4013      	ands	r3, r2
 8007870:	4a11      	ldr	r2, [pc, #68]	; (80078b8 <HAL_RCC_ClockConfig+0x24c>)
 8007872:	5cd3      	ldrb	r3, [r2, r3]
 8007874:	000a      	movs	r2, r1
 8007876:	40da      	lsrs	r2, r3
 8007878:	4b10      	ldr	r3, [pc, #64]	; (80078bc <HAL_RCC_ClockConfig+0x250>)
 800787a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 800787c:	250b      	movs	r5, #11
 800787e:	197c      	adds	r4, r7, r5
 8007880:	2000      	movs	r0, #0
 8007882:	f7fe fb15 	bl	8005eb0 <HAL_InitTick>
 8007886:	0003      	movs	r3, r0
 8007888:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800788a:	197b      	adds	r3, r7, r5
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d003      	beq.n	800789a <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8007892:	230b      	movs	r3, #11
 8007894:	18fb      	adds	r3, r7, r3
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	e000      	b.n	800789c <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 800789a:	2300      	movs	r3, #0
}
 800789c:	0018      	movs	r0, r3
 800789e:	46bd      	mov	sp, r7
 80078a0:	b004      	add	sp, #16
 80078a2:	bdb0      	pop	{r4, r5, r7, pc}
 80078a4:	40022000 	.word	0x40022000
 80078a8:	40021000 	.word	0x40021000
 80078ac:	00001388 	.word	0x00001388
 80078b0:	fffff8ff 	.word	0xfffff8ff
 80078b4:	ffffc7ff 	.word	0xffffc7ff
 80078b8:	0800b2d8 	.word	0x0800b2d8
 80078bc:	20000010 	.word	0x20000010

080078c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b086      	sub	sp, #24
 80078c4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80078c6:	4b3b      	ldr	r3, [pc, #236]	; (80079b4 <HAL_RCC_GetSysClockFreq+0xf4>)
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	220c      	movs	r2, #12
 80078d0:	4013      	ands	r3, r2
 80078d2:	2b08      	cmp	r3, #8
 80078d4:	d00e      	beq.n	80078f4 <HAL_RCC_GetSysClockFreq+0x34>
 80078d6:	2b0c      	cmp	r3, #12
 80078d8:	d00f      	beq.n	80078fa <HAL_RCC_GetSysClockFreq+0x3a>
 80078da:	2b04      	cmp	r3, #4
 80078dc:	d157      	bne.n	800798e <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80078de:	4b35      	ldr	r3, [pc, #212]	; (80079b4 <HAL_RCC_GetSysClockFreq+0xf4>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	2210      	movs	r2, #16
 80078e4:	4013      	ands	r3, r2
 80078e6:	d002      	beq.n	80078ee <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80078e8:	4b33      	ldr	r3, [pc, #204]	; (80079b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80078ea:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80078ec:	e05d      	b.n	80079aa <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 80078ee:	4b33      	ldr	r3, [pc, #204]	; (80079bc <HAL_RCC_GetSysClockFreq+0xfc>)
 80078f0:	613b      	str	r3, [r7, #16]
      break;
 80078f2:	e05a      	b.n	80079aa <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80078f4:	4b32      	ldr	r3, [pc, #200]	; (80079c0 <HAL_RCC_GetSysClockFreq+0x100>)
 80078f6:	613b      	str	r3, [r7, #16]
      break;
 80078f8:	e057      	b.n	80079aa <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	0c9b      	lsrs	r3, r3, #18
 80078fe:	220f      	movs	r2, #15
 8007900:	4013      	ands	r3, r2
 8007902:	4a30      	ldr	r2, [pc, #192]	; (80079c4 <HAL_RCC_GetSysClockFreq+0x104>)
 8007904:	5cd3      	ldrb	r3, [r2, r3]
 8007906:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	0d9b      	lsrs	r3, r3, #22
 800790c:	2203      	movs	r2, #3
 800790e:	4013      	ands	r3, r2
 8007910:	3301      	adds	r3, #1
 8007912:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007914:	4b27      	ldr	r3, [pc, #156]	; (80079b4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8007916:	68da      	ldr	r2, [r3, #12]
 8007918:	2380      	movs	r3, #128	; 0x80
 800791a:	025b      	lsls	r3, r3, #9
 800791c:	4013      	ands	r3, r2
 800791e:	d00f      	beq.n	8007940 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8007920:	68b9      	ldr	r1, [r7, #8]
 8007922:	000a      	movs	r2, r1
 8007924:	0152      	lsls	r2, r2, #5
 8007926:	1a52      	subs	r2, r2, r1
 8007928:	0193      	lsls	r3, r2, #6
 800792a:	1a9b      	subs	r3, r3, r2
 800792c:	00db      	lsls	r3, r3, #3
 800792e:	185b      	adds	r3, r3, r1
 8007930:	025b      	lsls	r3, r3, #9
 8007932:	6879      	ldr	r1, [r7, #4]
 8007934:	0018      	movs	r0, r3
 8007936:	f7f8 fbef 	bl	8000118 <__udivsi3>
 800793a:	0003      	movs	r3, r0
 800793c:	617b      	str	r3, [r7, #20]
 800793e:	e023      	b.n	8007988 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8007940:	4b1c      	ldr	r3, [pc, #112]	; (80079b4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2210      	movs	r2, #16
 8007946:	4013      	ands	r3, r2
 8007948:	d00f      	beq.n	800796a <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 800794a:	68b9      	ldr	r1, [r7, #8]
 800794c:	000a      	movs	r2, r1
 800794e:	0152      	lsls	r2, r2, #5
 8007950:	1a52      	subs	r2, r2, r1
 8007952:	0193      	lsls	r3, r2, #6
 8007954:	1a9b      	subs	r3, r3, r2
 8007956:	00db      	lsls	r3, r3, #3
 8007958:	185b      	adds	r3, r3, r1
 800795a:	021b      	lsls	r3, r3, #8
 800795c:	6879      	ldr	r1, [r7, #4]
 800795e:	0018      	movs	r0, r3
 8007960:	f7f8 fbda 	bl	8000118 <__udivsi3>
 8007964:	0003      	movs	r3, r0
 8007966:	617b      	str	r3, [r7, #20]
 8007968:	e00e      	b.n	8007988 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 800796a:	68b9      	ldr	r1, [r7, #8]
 800796c:	000a      	movs	r2, r1
 800796e:	0152      	lsls	r2, r2, #5
 8007970:	1a52      	subs	r2, r2, r1
 8007972:	0193      	lsls	r3, r2, #6
 8007974:	1a9b      	subs	r3, r3, r2
 8007976:	00db      	lsls	r3, r3, #3
 8007978:	185b      	adds	r3, r3, r1
 800797a:	029b      	lsls	r3, r3, #10
 800797c:	6879      	ldr	r1, [r7, #4]
 800797e:	0018      	movs	r0, r3
 8007980:	f7f8 fbca 	bl	8000118 <__udivsi3>
 8007984:	0003      	movs	r3, r0
 8007986:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	613b      	str	r3, [r7, #16]
      break;
 800798c:	e00d      	b.n	80079aa <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800798e:	4b09      	ldr	r3, [pc, #36]	; (80079b4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	0b5b      	lsrs	r3, r3, #13
 8007994:	2207      	movs	r2, #7
 8007996:	4013      	ands	r3, r2
 8007998:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	3301      	adds	r3, #1
 800799e:	2280      	movs	r2, #128	; 0x80
 80079a0:	0212      	lsls	r2, r2, #8
 80079a2:	409a      	lsls	r2, r3
 80079a4:	0013      	movs	r3, r2
 80079a6:	613b      	str	r3, [r7, #16]
      break;
 80079a8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80079aa:	693b      	ldr	r3, [r7, #16]
}
 80079ac:	0018      	movs	r0, r3
 80079ae:	46bd      	mov	sp, r7
 80079b0:	b006      	add	sp, #24
 80079b2:	bd80      	pop	{r7, pc}
 80079b4:	40021000 	.word	0x40021000
 80079b8:	003d0900 	.word	0x003d0900
 80079bc:	00f42400 	.word	0x00f42400
 80079c0:	007a1200 	.word	0x007a1200
 80079c4:	0800b2e8 	.word	0x0800b2e8

080079c8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b086      	sub	sp, #24
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	2220      	movs	r2, #32
 80079d6:	4013      	ands	r3, r2
 80079d8:	d106      	bne.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	2380      	movs	r3, #128	; 0x80
 80079e0:	011b      	lsls	r3, r3, #4
 80079e2:	4013      	ands	r3, r2
 80079e4:	d100      	bne.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x20>
 80079e6:	e0dd      	b.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 80079e8:	2317      	movs	r3, #23
 80079ea:	18fb      	adds	r3, r7, r3
 80079ec:	2200      	movs	r2, #0
 80079ee:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80079f0:	4ba4      	ldr	r3, [pc, #656]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80079f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079f4:	2380      	movs	r3, #128	; 0x80
 80079f6:	055b      	lsls	r3, r3, #21
 80079f8:	4013      	ands	r3, r2
 80079fa:	d10a      	bne.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80079fc:	4ba1      	ldr	r3, [pc, #644]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80079fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a00:	4ba0      	ldr	r3, [pc, #640]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007a02:	2180      	movs	r1, #128	; 0x80
 8007a04:	0549      	lsls	r1, r1, #21
 8007a06:	430a      	orrs	r2, r1
 8007a08:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8007a0a:	2317      	movs	r3, #23
 8007a0c:	18fb      	adds	r3, r7, r3
 8007a0e:	2201      	movs	r2, #1
 8007a10:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a12:	4b9d      	ldr	r3, [pc, #628]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	2380      	movs	r3, #128	; 0x80
 8007a18:	005b      	lsls	r3, r3, #1
 8007a1a:	4013      	ands	r3, r2
 8007a1c:	d11a      	bne.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007a1e:	4b9a      	ldr	r3, [pc, #616]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	4b99      	ldr	r3, [pc, #612]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8007a24:	2180      	movs	r1, #128	; 0x80
 8007a26:	0049      	lsls	r1, r1, #1
 8007a28:	430a      	orrs	r2, r1
 8007a2a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a2c:	f7fe fa76 	bl	8005f1c <HAL_GetTick>
 8007a30:	0003      	movs	r3, r0
 8007a32:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a34:	e008      	b.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a36:	f7fe fa71 	bl	8005f1c <HAL_GetTick>
 8007a3a:	0002      	movs	r2, r0
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	1ad3      	subs	r3, r2, r3
 8007a40:	2b64      	cmp	r3, #100	; 0x64
 8007a42:	d901      	bls.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8007a44:	2303      	movs	r3, #3
 8007a46:	e118      	b.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a48:	4b8f      	ldr	r3, [pc, #572]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8007a4a:	681a      	ldr	r2, [r3, #0]
 8007a4c:	2380      	movs	r3, #128	; 0x80
 8007a4e:	005b      	lsls	r3, r3, #1
 8007a50:	4013      	ands	r3, r2
 8007a52:	d0f0      	beq.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8007a54:	4b8b      	ldr	r3, [pc, #556]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	23c0      	movs	r3, #192	; 0xc0
 8007a5a:	039b      	lsls	r3, r3, #14
 8007a5c:	4013      	ands	r3, r2
 8007a5e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	685a      	ldr	r2, [r3, #4]
 8007a64:	23c0      	movs	r3, #192	; 0xc0
 8007a66:	039b      	lsls	r3, r3, #14
 8007a68:	4013      	ands	r3, r2
 8007a6a:	68fa      	ldr	r2, [r7, #12]
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d107      	bne.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	689a      	ldr	r2, [r3, #8]
 8007a74:	23c0      	movs	r3, #192	; 0xc0
 8007a76:	039b      	lsls	r3, r3, #14
 8007a78:	4013      	ands	r3, r2
 8007a7a:	68fa      	ldr	r2, [r7, #12]
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d013      	beq.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	685a      	ldr	r2, [r3, #4]
 8007a84:	23c0      	movs	r3, #192	; 0xc0
 8007a86:	029b      	lsls	r3, r3, #10
 8007a88:	401a      	ands	r2, r3
 8007a8a:	23c0      	movs	r3, #192	; 0xc0
 8007a8c:	029b      	lsls	r3, r3, #10
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d10a      	bne.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007a92:	4b7c      	ldr	r3, [pc, #496]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	2380      	movs	r3, #128	; 0x80
 8007a98:	029b      	lsls	r3, r3, #10
 8007a9a:	401a      	ands	r2, r3
 8007a9c:	2380      	movs	r3, #128	; 0x80
 8007a9e:	029b      	lsls	r3, r3, #10
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d101      	bne.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e0e8      	b.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8007aa8:	4b76      	ldr	r3, [pc, #472]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007aaa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007aac:	23c0      	movs	r3, #192	; 0xc0
 8007aae:	029b      	lsls	r3, r3, #10
 8007ab0:	4013      	ands	r3, r2
 8007ab2:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d049      	beq.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	685a      	ldr	r2, [r3, #4]
 8007abe:	23c0      	movs	r3, #192	; 0xc0
 8007ac0:	029b      	lsls	r3, r3, #10
 8007ac2:	4013      	ands	r3, r2
 8007ac4:	68fa      	ldr	r2, [r7, #12]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d004      	beq.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	2220      	movs	r2, #32
 8007ad0:	4013      	ands	r3, r2
 8007ad2:	d10d      	bne.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	689a      	ldr	r2, [r3, #8]
 8007ad8:	23c0      	movs	r3, #192	; 0xc0
 8007ada:	029b      	lsls	r3, r3, #10
 8007adc:	4013      	ands	r3, r2
 8007ade:	68fa      	ldr	r2, [r7, #12]
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d034      	beq.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	2380      	movs	r3, #128	; 0x80
 8007aea:	011b      	lsls	r3, r3, #4
 8007aec:	4013      	ands	r3, r2
 8007aee:	d02e      	beq.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8007af0:	4b64      	ldr	r3, [pc, #400]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007af4:	4a65      	ldr	r2, [pc, #404]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007af6:	4013      	ands	r3, r2
 8007af8:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007afa:	4b62      	ldr	r3, [pc, #392]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007afc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007afe:	4b61      	ldr	r3, [pc, #388]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007b00:	2180      	movs	r1, #128	; 0x80
 8007b02:	0309      	lsls	r1, r1, #12
 8007b04:	430a      	orrs	r2, r1
 8007b06:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007b08:	4b5e      	ldr	r3, [pc, #376]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007b0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007b0c:	4b5d      	ldr	r3, [pc, #372]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007b0e:	4960      	ldr	r1, [pc, #384]	; (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8007b10:	400a      	ands	r2, r1
 8007b12:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8007b14:	4b5b      	ldr	r3, [pc, #364]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007b16:	68fa      	ldr	r2, [r7, #12]
 8007b18:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8007b1a:	68fa      	ldr	r2, [r7, #12]
 8007b1c:	2380      	movs	r3, #128	; 0x80
 8007b1e:	005b      	lsls	r3, r3, #1
 8007b20:	4013      	ands	r3, r2
 8007b22:	d014      	beq.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b24:	f7fe f9fa 	bl	8005f1c <HAL_GetTick>
 8007b28:	0003      	movs	r3, r0
 8007b2a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b2c:	e009      	b.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b2e:	f7fe f9f5 	bl	8005f1c <HAL_GetTick>
 8007b32:	0002      	movs	r2, r0
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	1ad3      	subs	r3, r2, r3
 8007b38:	4a56      	ldr	r2, [pc, #344]	; (8007c94 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d901      	bls.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8007b3e:	2303      	movs	r3, #3
 8007b40:	e09b      	b.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b42:	4b50      	ldr	r3, [pc, #320]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007b44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007b46:	2380      	movs	r3, #128	; 0x80
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	4013      	ands	r3, r2
 8007b4c:	d0ef      	beq.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	685a      	ldr	r2, [r3, #4]
 8007b52:	23c0      	movs	r3, #192	; 0xc0
 8007b54:	029b      	lsls	r3, r3, #10
 8007b56:	401a      	ands	r2, r3
 8007b58:	23c0      	movs	r3, #192	; 0xc0
 8007b5a:	029b      	lsls	r3, r3, #10
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d10c      	bne.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8007b60:	4b48      	ldr	r3, [pc, #288]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a4c      	ldr	r2, [pc, #304]	; (8007c98 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8007b66:	4013      	ands	r3, r2
 8007b68:	0019      	movs	r1, r3
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	685a      	ldr	r2, [r3, #4]
 8007b6e:	23c0      	movs	r3, #192	; 0xc0
 8007b70:	039b      	lsls	r3, r3, #14
 8007b72:	401a      	ands	r2, r3
 8007b74:	4b43      	ldr	r3, [pc, #268]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007b76:	430a      	orrs	r2, r1
 8007b78:	601a      	str	r2, [r3, #0]
 8007b7a:	4b42      	ldr	r3, [pc, #264]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007b7c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	685a      	ldr	r2, [r3, #4]
 8007b82:	23c0      	movs	r3, #192	; 0xc0
 8007b84:	029b      	lsls	r3, r3, #10
 8007b86:	401a      	ands	r2, r3
 8007b88:	4b3e      	ldr	r3, [pc, #248]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007b8a:	430a      	orrs	r2, r1
 8007b8c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007b8e:	2317      	movs	r3, #23
 8007b90:	18fb      	adds	r3, r7, r3
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d105      	bne.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b98:	4b3a      	ldr	r3, [pc, #232]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007b9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b9c:	4b39      	ldr	r3, [pc, #228]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007b9e:	493f      	ldr	r1, [pc, #252]	; (8007c9c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007ba0:	400a      	ands	r2, r1
 8007ba2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	2201      	movs	r2, #1
 8007baa:	4013      	ands	r3, r2
 8007bac:	d009      	beq.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007bae:	4b35      	ldr	r3, [pc, #212]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bb2:	2203      	movs	r2, #3
 8007bb4:	4393      	bics	r3, r2
 8007bb6:	0019      	movs	r1, r3
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	68da      	ldr	r2, [r3, #12]
 8007bbc:	4b31      	ldr	r3, [pc, #196]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007bbe:	430a      	orrs	r2, r1
 8007bc0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	2202      	movs	r2, #2
 8007bc8:	4013      	ands	r3, r2
 8007bca:	d009      	beq.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007bcc:	4b2d      	ldr	r3, [pc, #180]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bd0:	220c      	movs	r2, #12
 8007bd2:	4393      	bics	r3, r2
 8007bd4:	0019      	movs	r1, r3
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	691a      	ldr	r2, [r3, #16]
 8007bda:	4b2a      	ldr	r3, [pc, #168]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007bdc:	430a      	orrs	r2, r1
 8007bde:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	2204      	movs	r2, #4
 8007be6:	4013      	ands	r3, r2
 8007be8:	d009      	beq.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007bea:	4b26      	ldr	r3, [pc, #152]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bee:	4a2c      	ldr	r2, [pc, #176]	; (8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8007bf0:	4013      	ands	r3, r2
 8007bf2:	0019      	movs	r1, r3
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	695a      	ldr	r2, [r3, #20]
 8007bf8:	4b22      	ldr	r3, [pc, #136]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007bfa:	430a      	orrs	r2, r1
 8007bfc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	2208      	movs	r2, #8
 8007c04:	4013      	ands	r3, r2
 8007c06:	d009      	beq.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007c08:	4b1e      	ldr	r3, [pc, #120]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c0c:	4a25      	ldr	r2, [pc, #148]	; (8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8007c0e:	4013      	ands	r3, r2
 8007c10:	0019      	movs	r1, r3
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	699a      	ldr	r2, [r3, #24]
 8007c16:	4b1b      	ldr	r3, [pc, #108]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007c18:	430a      	orrs	r2, r1
 8007c1a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	2380      	movs	r3, #128	; 0x80
 8007c22:	005b      	lsls	r3, r3, #1
 8007c24:	4013      	ands	r3, r2
 8007c26:	d009      	beq.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007c28:	4b16      	ldr	r3, [pc, #88]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c2c:	4a17      	ldr	r2, [pc, #92]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8007c2e:	4013      	ands	r3, r2
 8007c30:	0019      	movs	r1, r3
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	69da      	ldr	r2, [r3, #28]
 8007c36:	4b13      	ldr	r3, [pc, #76]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007c38:	430a      	orrs	r2, r1
 8007c3a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	2240      	movs	r2, #64	; 0x40
 8007c42:	4013      	ands	r3, r2
 8007c44:	d009      	beq.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007c46:	4b0f      	ldr	r3, [pc, #60]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c4a:	4a17      	ldr	r2, [pc, #92]	; (8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8007c4c:	4013      	ands	r3, r2
 8007c4e:	0019      	movs	r1, r3
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c54:	4b0b      	ldr	r3, [pc, #44]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007c56:	430a      	orrs	r2, r1
 8007c58:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	2280      	movs	r2, #128	; 0x80
 8007c60:	4013      	ands	r3, r2
 8007c62:	d009      	beq.n	8007c78 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8007c64:	4b07      	ldr	r3, [pc, #28]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c68:	4a10      	ldr	r2, [pc, #64]	; (8007cac <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8007c6a:	4013      	ands	r3, r2
 8007c6c:	0019      	movs	r1, r3
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6a1a      	ldr	r2, [r3, #32]
 8007c72:	4b04      	ldr	r3, [pc, #16]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8007c74:	430a      	orrs	r2, r1
 8007c76:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007c78:	2300      	movs	r3, #0
}
 8007c7a:	0018      	movs	r0, r3
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	b006      	add	sp, #24
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	46c0      	nop			; (mov r8, r8)
 8007c84:	40021000 	.word	0x40021000
 8007c88:	40007000 	.word	0x40007000
 8007c8c:	fffcffff 	.word	0xfffcffff
 8007c90:	fff7ffff 	.word	0xfff7ffff
 8007c94:	00001388 	.word	0x00001388
 8007c98:	ffcfffff 	.word	0xffcfffff
 8007c9c:	efffffff 	.word	0xefffffff
 8007ca0:	fffff3ff 	.word	0xfffff3ff
 8007ca4:	ffffcfff 	.word	0xffffcfff
 8007ca8:	fbffffff 	.word	0xfbffffff
 8007cac:	fff3ffff 	.word	0xfff3ffff

08007cb0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d101      	bne.n	8007cc2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e08e      	b.n	8007de0 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2221      	movs	r2, #33	; 0x21
 8007cc6:	5c9b      	ldrb	r3, [r3, r2]
 8007cc8:	b2db      	uxtb	r3, r3
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d107      	bne.n	8007cde <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2220      	movs	r2, #32
 8007cd2:	2100      	movs	r1, #0
 8007cd4:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	0018      	movs	r0, r3
 8007cda:	f7fb fdcf 	bl	800387c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2221      	movs	r2, #33	; 0x21
 8007ce2:	2102      	movs	r1, #2
 8007ce4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	22ca      	movs	r2, #202	; 0xca
 8007cec:	625a      	str	r2, [r3, #36]	; 0x24
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	2253      	movs	r2, #83	; 0x53
 8007cf4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	0018      	movs	r0, r3
 8007cfa:	f000 fcf4 	bl	80086e6 <RTC_EnterInitMode>
 8007cfe:	1e03      	subs	r3, r0, #0
 8007d00:	d009      	beq.n	8007d16 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	22ff      	movs	r2, #255	; 0xff
 8007d08:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2221      	movs	r2, #33	; 0x21
 8007d0e:	2104      	movs	r1, #4
 8007d10:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	e064      	b.n	8007de0 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	689a      	ldr	r2, [r3, #8]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4931      	ldr	r1, [pc, #196]	; (8007de8 <HAL_RTC_Init+0x138>)
 8007d22:	400a      	ands	r2, r1
 8007d24:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	6899      	ldr	r1, [r3, #8]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	685a      	ldr	r2, [r3, #4]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	691b      	ldr	r3, [r3, #16]
 8007d34:	431a      	orrs	r2, r3
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	699b      	ldr	r3, [r3, #24]
 8007d3a:	431a      	orrs	r2, r3
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	430a      	orrs	r2, r1
 8007d42:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	68d2      	ldr	r2, [r2, #12]
 8007d4c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	6919      	ldr	r1, [r3, #16]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	689b      	ldr	r3, [r3, #8]
 8007d58:	041a      	lsls	r2, r3, #16
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	430a      	orrs	r2, r1
 8007d60:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	68da      	ldr	r2, [r3, #12]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	2180      	movs	r1, #128	; 0x80
 8007d6e:	438a      	bics	r2, r1
 8007d70:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	2103      	movs	r1, #3
 8007d7e:	438a      	bics	r2, r1
 8007d80:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	69da      	ldr	r2, [r3, #28]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	695b      	ldr	r3, [r3, #20]
 8007d90:	431a      	orrs	r2, r3
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	430a      	orrs	r2, r1
 8007d98:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	2220      	movs	r2, #32
 8007da2:	4013      	ands	r3, r2
 8007da4:	d113      	bne.n	8007dce <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	0018      	movs	r0, r3
 8007daa:	f000 fc75 	bl	8008698 <HAL_RTC_WaitForSynchro>
 8007dae:	1e03      	subs	r3, r0, #0
 8007db0:	d00d      	beq.n	8007dce <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	22ff      	movs	r2, #255	; 0xff
 8007db8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2221      	movs	r2, #33	; 0x21
 8007dbe:	2104      	movs	r1, #4
 8007dc0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2220      	movs	r2, #32
 8007dc6:	2100      	movs	r1, #0
 8007dc8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e008      	b.n	8007de0 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	22ff      	movs	r2, #255	; 0xff
 8007dd4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2221      	movs	r2, #33	; 0x21
 8007dda:	2101      	movs	r1, #1
 8007ddc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007dde:	2300      	movs	r3, #0
  }
}
 8007de0:	0018      	movs	r0, r3
 8007de2:	46bd      	mov	sp, r7
 8007de4:	b002      	add	sp, #8
 8007de6:	bd80      	pop	{r7, pc}
 8007de8:	ff8fffbf 	.word	0xff8fffbf

08007dec <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007dec:	b590      	push	{r4, r7, lr}
 8007dee:	b087      	sub	sp, #28
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	60b9      	str	r1, [r7, #8]
 8007df6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2220      	movs	r2, #32
 8007dfc:	5c9b      	ldrb	r3, [r3, r2]
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d101      	bne.n	8007e06 <HAL_RTC_SetTime+0x1a>
 8007e02:	2302      	movs	r3, #2
 8007e04:	e0ad      	b.n	8007f62 <HAL_RTC_SetTime+0x176>
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2220      	movs	r2, #32
 8007e0a:	2101      	movs	r1, #1
 8007e0c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2221      	movs	r2, #33	; 0x21
 8007e12:	2102      	movs	r1, #2
 8007e14:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d125      	bne.n	8007e68 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	689b      	ldr	r3, [r3, #8]
 8007e22:	2240      	movs	r2, #64	; 0x40
 8007e24:	4013      	ands	r3, r2
 8007e26:	d102      	bne.n	8007e2e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	0018      	movs	r0, r3
 8007e34:	f000 fc81 	bl	800873a <RTC_ByteToBcd2>
 8007e38:	0003      	movs	r3, r0
 8007e3a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	785b      	ldrb	r3, [r3, #1]
 8007e40:	0018      	movs	r0, r3
 8007e42:	f000 fc7a 	bl	800873a <RTC_ByteToBcd2>
 8007e46:	0003      	movs	r3, r0
 8007e48:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007e4a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	789b      	ldrb	r3, [r3, #2]
 8007e50:	0018      	movs	r0, r3
 8007e52:	f000 fc72 	bl	800873a <RTC_ByteToBcd2>
 8007e56:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007e58:	0022      	movs	r2, r4
 8007e5a:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	78db      	ldrb	r3, [r3, #3]
 8007e60:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007e62:	4313      	orrs	r3, r2
 8007e64:	617b      	str	r3, [r7, #20]
 8007e66:	e017      	b.n	8007e98 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	2240      	movs	r2, #64	; 0x40
 8007e70:	4013      	ands	r3, r2
 8007e72:	d102      	bne.n	8007e7a <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	2200      	movs	r2, #0
 8007e78:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	785b      	ldrb	r3, [r3, #1]
 8007e84:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007e86:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8007e88:	68ba      	ldr	r2, [r7, #8]
 8007e8a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007e8c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	78db      	ldrb	r3, [r3, #3]
 8007e92:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007e94:	4313      	orrs	r3, r2
 8007e96:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	22ca      	movs	r2, #202	; 0xca
 8007e9e:	625a      	str	r2, [r3, #36]	; 0x24
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	2253      	movs	r2, #83	; 0x53
 8007ea6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	0018      	movs	r0, r3
 8007eac:	f000 fc1b 	bl	80086e6 <RTC_EnterInitMode>
 8007eb0:	1e03      	subs	r3, r0, #0
 8007eb2:	d00d      	beq.n	8007ed0 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	22ff      	movs	r2, #255	; 0xff
 8007eba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2221      	movs	r2, #33	; 0x21
 8007ec0:	2104      	movs	r1, #4
 8007ec2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2220      	movs	r2, #32
 8007ec8:	2100      	movs	r1, #0
 8007eca:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e048      	b.n	8007f62 <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	697a      	ldr	r2, [r7, #20]
 8007ed6:	4925      	ldr	r1, [pc, #148]	; (8007f6c <HAL_RTC_SetTime+0x180>)
 8007ed8:	400a      	ands	r2, r1
 8007eda:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	689a      	ldr	r2, [r3, #8]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4922      	ldr	r1, [pc, #136]	; (8007f70 <HAL_RTC_SetTime+0x184>)
 8007ee8:	400a      	ands	r2, r1
 8007eea:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	6899      	ldr	r1, [r3, #8]
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	68da      	ldr	r2, [r3, #12]
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	691b      	ldr	r3, [r3, #16]
 8007efa:	431a      	orrs	r2, r3
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	430a      	orrs	r2, r1
 8007f02:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	68da      	ldr	r2, [r3, #12]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	2180      	movs	r1, #128	; 0x80
 8007f10:	438a      	bics	r2, r1
 8007f12:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	2220      	movs	r2, #32
 8007f1c:	4013      	ands	r3, r2
 8007f1e:	d113      	bne.n	8007f48 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	0018      	movs	r0, r3
 8007f24:	f000 fbb8 	bl	8008698 <HAL_RTC_WaitForSynchro>
 8007f28:	1e03      	subs	r3, r0, #0
 8007f2a:	d00d      	beq.n	8007f48 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	22ff      	movs	r2, #255	; 0xff
 8007f32:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2221      	movs	r2, #33	; 0x21
 8007f38:	2104      	movs	r1, #4
 8007f3a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2220      	movs	r2, #32
 8007f40:	2100      	movs	r1, #0
 8007f42:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	e00c      	b.n	8007f62 <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	22ff      	movs	r2, #255	; 0xff
 8007f4e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2221      	movs	r2, #33	; 0x21
 8007f54:	2101      	movs	r1, #1
 8007f56:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2220      	movs	r2, #32
 8007f5c:	2100      	movs	r1, #0
 8007f5e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007f60:	2300      	movs	r3, #0
  }
}
 8007f62:	0018      	movs	r0, r3
 8007f64:	46bd      	mov	sp, r7
 8007f66:	b007      	add	sp, #28
 8007f68:	bd90      	pop	{r4, r7, pc}
 8007f6a:	46c0      	nop			; (mov r8, r8)
 8007f6c:	007f7f7f 	.word	0x007f7f7f
 8007f70:	fffbffff 	.word	0xfffbffff

08007f74 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b086      	sub	sp, #24
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	60f8      	str	r0, [r7, #12]
 8007f7c:	60b9      	str	r1, [r7, #8]
 8007f7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	691b      	ldr	r3, [r3, #16]
 8007f90:	045b      	lsls	r3, r3, #17
 8007f92:	0c5a      	lsrs	r2, r3, #17
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a22      	ldr	r2, [pc, #136]	; (8008028 <HAL_RTC_GetTime+0xb4>)
 8007fa0:	4013      	ands	r3, r2
 8007fa2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	0c1b      	lsrs	r3, r3, #16
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	223f      	movs	r2, #63	; 0x3f
 8007fac:	4013      	ands	r3, r2
 8007fae:	b2da      	uxtb	r2, r3
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	0a1b      	lsrs	r3, r3, #8
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	227f      	movs	r2, #127	; 0x7f
 8007fbc:	4013      	ands	r3, r2
 8007fbe:	b2da      	uxtb	r2, r3
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	227f      	movs	r2, #127	; 0x7f
 8007fca:	4013      	ands	r3, r2
 8007fcc:	b2da      	uxtb	r2, r3
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	0c1b      	lsrs	r3, r3, #16
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	2240      	movs	r2, #64	; 0x40
 8007fda:	4013      	ands	r3, r2
 8007fdc:	b2da      	uxtb	r2, r3
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d11a      	bne.n	800801e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	0018      	movs	r0, r3
 8007fee:	f000 fbcd 	bl	800878c <RTC_Bcd2ToByte>
 8007ff2:	0003      	movs	r3, r0
 8007ff4:	001a      	movs	r2, r3
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	785b      	ldrb	r3, [r3, #1]
 8007ffe:	0018      	movs	r0, r3
 8008000:	f000 fbc4 	bl	800878c <RTC_Bcd2ToByte>
 8008004:	0003      	movs	r3, r0
 8008006:	001a      	movs	r2, r3
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	789b      	ldrb	r3, [r3, #2]
 8008010:	0018      	movs	r0, r3
 8008012:	f000 fbbb 	bl	800878c <RTC_Bcd2ToByte>
 8008016:	0003      	movs	r3, r0
 8008018:	001a      	movs	r2, r3
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800801e:	2300      	movs	r3, #0
}
 8008020:	0018      	movs	r0, r3
 8008022:	46bd      	mov	sp, r7
 8008024:	b006      	add	sp, #24
 8008026:	bd80      	pop	{r7, pc}
 8008028:	007f7f7f 	.word	0x007f7f7f

0800802c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800802c:	b590      	push	{r4, r7, lr}
 800802e:	b087      	sub	sp, #28
 8008030:	af00      	add	r7, sp, #0
 8008032:	60f8      	str	r0, [r7, #12]
 8008034:	60b9      	str	r1, [r7, #8]
 8008036:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2220      	movs	r2, #32
 800803c:	5c9b      	ldrb	r3, [r3, r2]
 800803e:	2b01      	cmp	r3, #1
 8008040:	d101      	bne.n	8008046 <HAL_RTC_SetDate+0x1a>
 8008042:	2302      	movs	r3, #2
 8008044:	e099      	b.n	800817a <HAL_RTC_SetDate+0x14e>
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2220      	movs	r2, #32
 800804a:	2101      	movs	r1, #1
 800804c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2221      	movs	r2, #33	; 0x21
 8008052:	2102      	movs	r1, #2
 8008054:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d10e      	bne.n	800807a <HAL_RTC_SetDate+0x4e>
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	785b      	ldrb	r3, [r3, #1]
 8008060:	001a      	movs	r2, r3
 8008062:	2310      	movs	r3, #16
 8008064:	4013      	ands	r3, r2
 8008066:	d008      	beq.n	800807a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	785b      	ldrb	r3, [r3, #1]
 800806c:	2210      	movs	r2, #16
 800806e:	4393      	bics	r3, r2
 8008070:	b2db      	uxtb	r3, r3
 8008072:	330a      	adds	r3, #10
 8008074:	b2da      	uxtb	r2, r3
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d11c      	bne.n	80080ba <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	78db      	ldrb	r3, [r3, #3]
 8008084:	0018      	movs	r0, r3
 8008086:	f000 fb58 	bl	800873a <RTC_ByteToBcd2>
 800808a:	0003      	movs	r3, r0
 800808c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	785b      	ldrb	r3, [r3, #1]
 8008092:	0018      	movs	r0, r3
 8008094:	f000 fb51 	bl	800873a <RTC_ByteToBcd2>
 8008098:	0003      	movs	r3, r0
 800809a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800809c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	789b      	ldrb	r3, [r3, #2]
 80080a2:	0018      	movs	r0, r3
 80080a4:	f000 fb49 	bl	800873a <RTC_ByteToBcd2>
 80080a8:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80080aa:	0022      	movs	r2, r4
 80080ac:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80080b4:	4313      	orrs	r3, r2
 80080b6:	617b      	str	r3, [r7, #20]
 80080b8:	e00e      	b.n	80080d8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	78db      	ldrb	r3, [r3, #3]
 80080be:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	785b      	ldrb	r3, [r3, #1]
 80080c4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80080c6:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80080c8:	68ba      	ldr	r2, [r7, #8]
 80080ca:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80080cc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80080d4:	4313      	orrs	r3, r2
 80080d6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	22ca      	movs	r2, #202	; 0xca
 80080de:	625a      	str	r2, [r3, #36]	; 0x24
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	2253      	movs	r2, #83	; 0x53
 80080e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	0018      	movs	r0, r3
 80080ec:	f000 fafb 	bl	80086e6 <RTC_EnterInitMode>
 80080f0:	1e03      	subs	r3, r0, #0
 80080f2:	d00d      	beq.n	8008110 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	22ff      	movs	r2, #255	; 0xff
 80080fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2221      	movs	r2, #33	; 0x21
 8008100:	2104      	movs	r1, #4
 8008102:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2220      	movs	r2, #32
 8008108:	2100      	movs	r1, #0
 800810a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800810c:	2301      	movs	r3, #1
 800810e:	e034      	b.n	800817a <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	697a      	ldr	r2, [r7, #20]
 8008116:	491b      	ldr	r1, [pc, #108]	; (8008184 <HAL_RTC_SetDate+0x158>)
 8008118:	400a      	ands	r2, r1
 800811a:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	68da      	ldr	r2, [r3, #12]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	2180      	movs	r1, #128	; 0x80
 8008128:	438a      	bics	r2, r1
 800812a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	2220      	movs	r2, #32
 8008134:	4013      	ands	r3, r2
 8008136:	d113      	bne.n	8008160 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	0018      	movs	r0, r3
 800813c:	f000 faac 	bl	8008698 <HAL_RTC_WaitForSynchro>
 8008140:	1e03      	subs	r3, r0, #0
 8008142:	d00d      	beq.n	8008160 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	22ff      	movs	r2, #255	; 0xff
 800814a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2221      	movs	r2, #33	; 0x21
 8008150:	2104      	movs	r1, #4
 8008152:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2220      	movs	r2, #32
 8008158:	2100      	movs	r1, #0
 800815a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	e00c      	b.n	800817a <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	22ff      	movs	r2, #255	; 0xff
 8008166:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2221      	movs	r2, #33	; 0x21
 800816c:	2101      	movs	r1, #1
 800816e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2220      	movs	r2, #32
 8008174:	2100      	movs	r1, #0
 8008176:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008178:	2300      	movs	r3, #0
  }
}
 800817a:	0018      	movs	r0, r3
 800817c:	46bd      	mov	sp, r7
 800817e:	b007      	add	sp, #28
 8008180:	bd90      	pop	{r4, r7, pc}
 8008182:	46c0      	nop			; (mov r8, r8)
 8008184:	00ffff3f 	.word	0x00ffff3f

08008188 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b086      	sub	sp, #24
 800818c:	af00      	add	r7, sp, #0
 800818e:	60f8      	str	r0, [r7, #12]
 8008190:	60b9      	str	r1, [r7, #8]
 8008192:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	4a21      	ldr	r2, [pc, #132]	; (8008220 <HAL_RTC_GetDate+0x98>)
 800819c:	4013      	ands	r3, r2
 800819e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	0c1b      	lsrs	r3, r3, #16
 80081a4:	b2da      	uxtb	r2, r3
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	0a1b      	lsrs	r3, r3, #8
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	221f      	movs	r2, #31
 80081b2:	4013      	ands	r3, r2
 80081b4:	b2da      	uxtb	r2, r3
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	223f      	movs	r2, #63	; 0x3f
 80081c0:	4013      	ands	r3, r2
 80081c2:	b2da      	uxtb	r2, r3
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	0b5b      	lsrs	r3, r3, #13
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	2207      	movs	r2, #7
 80081d0:	4013      	ands	r3, r2
 80081d2:	b2da      	uxtb	r2, r3
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d11a      	bne.n	8008214 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	78db      	ldrb	r3, [r3, #3]
 80081e2:	0018      	movs	r0, r3
 80081e4:	f000 fad2 	bl	800878c <RTC_Bcd2ToByte>
 80081e8:	0003      	movs	r3, r0
 80081ea:	001a      	movs	r2, r3
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	785b      	ldrb	r3, [r3, #1]
 80081f4:	0018      	movs	r0, r3
 80081f6:	f000 fac9 	bl	800878c <RTC_Bcd2ToByte>
 80081fa:	0003      	movs	r3, r0
 80081fc:	001a      	movs	r2, r3
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	789b      	ldrb	r3, [r3, #2]
 8008206:	0018      	movs	r0, r3
 8008208:	f000 fac0 	bl	800878c <RTC_Bcd2ToByte>
 800820c:	0003      	movs	r3, r0
 800820e:	001a      	movs	r2, r3
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008214:	2300      	movs	r3, #0
}
 8008216:	0018      	movs	r0, r3
 8008218:	46bd      	mov	sp, r7
 800821a:	b006      	add	sp, #24
 800821c:	bd80      	pop	{r7, pc}
 800821e:	46c0      	nop			; (mov r8, r8)
 8008220:	00ffff3f 	.word	0x00ffff3f

08008224 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008224:	b590      	push	{r4, r7, lr}
 8008226:	b089      	sub	sp, #36	; 0x24
 8008228:	af00      	add	r7, sp, #0
 800822a:	60f8      	str	r0, [r7, #12]
 800822c:	60b9      	str	r1, [r7, #8]
 800822e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2220      	movs	r2, #32
 8008234:	5c9b      	ldrb	r3, [r3, r2]
 8008236:	2b01      	cmp	r3, #1
 8008238:	d101      	bne.n	800823e <HAL_RTC_SetAlarm_IT+0x1a>
 800823a:	2302      	movs	r3, #2
 800823c:	e130      	b.n	80084a0 <HAL_RTC_SetAlarm_IT+0x27c>
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2220      	movs	r2, #32
 8008242:	2101      	movs	r1, #1
 8008244:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2221      	movs	r2, #33	; 0x21
 800824a:	2102      	movs	r1, #2
 800824c:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d136      	bne.n	80082c2 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	2240      	movs	r2, #64	; 0x40
 800825c:	4013      	ands	r3, r2
 800825e:	d102      	bne.n	8008266 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	2200      	movs	r2, #0
 8008264:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	0018      	movs	r0, r3
 800826c:	f000 fa65 	bl	800873a <RTC_ByteToBcd2>
 8008270:	0003      	movs	r3, r0
 8008272:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	785b      	ldrb	r3, [r3, #1]
 8008278:	0018      	movs	r0, r3
 800827a:	f000 fa5e 	bl	800873a <RTC_ByteToBcd2>
 800827e:	0003      	movs	r3, r0
 8008280:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8008282:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	789b      	ldrb	r3, [r3, #2]
 8008288:	0018      	movs	r0, r3
 800828a:	f000 fa56 	bl	800873a <RTC_ByteToBcd2>
 800828e:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008290:	0022      	movs	r2, r4
 8008292:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	78db      	ldrb	r3, [r3, #3]
 8008298:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800829a:	431a      	orrs	r2, r3
 800829c:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	2220      	movs	r2, #32
 80082a2:	5c9b      	ldrb	r3, [r3, r2]
 80082a4:	0018      	movs	r0, r3
 80082a6:	f000 fa48 	bl	800873a <RTC_ByteToBcd2>
 80082aa:	0003      	movs	r3, r0
 80082ac:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80082ae:	0022      	movs	r2, r4
 80082b0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80082b6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80082bc:	4313      	orrs	r3, r2
 80082be:	61fb      	str	r3, [r7, #28]
 80082c0:	e022      	b.n	8008308 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	2240      	movs	r2, #64	; 0x40
 80082ca:	4013      	ands	r3, r2
 80082cc:	d102      	bne.n	80082d4 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	2200      	movs	r2, #0
 80082d2:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	785b      	ldrb	r3, [r3, #1]
 80082de:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80082e0:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80082e2:	68ba      	ldr	r2, [r7, #8]
 80082e4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80082e6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	78db      	ldrb	r3, [r3, #3]
 80082ec:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80082ee:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	2120      	movs	r1, #32
 80082f4:	5c5b      	ldrb	r3, [r3, r1]
 80082f6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80082f8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80082fe:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8008304:	4313      	orrs	r3, r2
 8008306:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	685a      	ldr	r2, [r3, #4]
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	699b      	ldr	r3, [r3, #24]
 8008310:	4313      	orrs	r3, r2
 8008312:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	22ca      	movs	r2, #202	; 0xca
 800831a:	625a      	str	r2, [r3, #36]	; 0x24
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2253      	movs	r2, #83	; 0x53
 8008322:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008328:	2380      	movs	r3, #128	; 0x80
 800832a:	005b      	lsls	r3, r3, #1
 800832c:	429a      	cmp	r2, r3
 800832e:	d14e      	bne.n	80083ce <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	689a      	ldr	r2, [r3, #8]
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	495b      	ldr	r1, [pc, #364]	; (80084a8 <HAL_RTC_SetAlarm_IT+0x284>)
 800833c:	400a      	ands	r2, r1
 800833e:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	68db      	ldr	r3, [r3, #12]
 8008346:	22ff      	movs	r2, #255	; 0xff
 8008348:	401a      	ands	r2, r3
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4957      	ldr	r1, [pc, #348]	; (80084ac <HAL_RTC_SetAlarm_IT+0x288>)
 8008350:	430a      	orrs	r2, r1
 8008352:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008354:	f7fd fde2 	bl	8005f1c <HAL_GetTick>
 8008358:	0003      	movs	r3, r0
 800835a:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800835c:	e016      	b.n	800838c <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800835e:	f7fd fddd 	bl	8005f1c <HAL_GetTick>
 8008362:	0002      	movs	r2, r0
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	1ad2      	subs	r2, r2, r3
 8008368:	23fa      	movs	r3, #250	; 0xfa
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	429a      	cmp	r2, r3
 800836e:	d90d      	bls.n	800838c <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	22ff      	movs	r2, #255	; 0xff
 8008376:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2221      	movs	r2, #33	; 0x21
 800837c:	2103      	movs	r1, #3
 800837e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2220      	movs	r2, #32
 8008384:	2100      	movs	r1, #0
 8008386:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008388:	2303      	movs	r3, #3
 800838a:	e089      	b.n	80084a0 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	68db      	ldr	r3, [r3, #12]
 8008392:	2201      	movs	r2, #1
 8008394:	4013      	ands	r3, r2
 8008396:	d0e2      	beq.n	800835e <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	69fa      	ldr	r2, [r7, #28]
 800839e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	69ba      	ldr	r2, [r7, #24]
 80083a6:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	689a      	ldr	r2, [r3, #8]
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	2180      	movs	r1, #128	; 0x80
 80083b4:	0049      	lsls	r1, r1, #1
 80083b6:	430a      	orrs	r2, r1
 80083b8:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	689a      	ldr	r2, [r3, #8]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	2180      	movs	r1, #128	; 0x80
 80083c6:	0149      	lsls	r1, r1, #5
 80083c8:	430a      	orrs	r2, r1
 80083ca:	609a      	str	r2, [r3, #8]
 80083cc:	e04d      	b.n	800846a <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	689a      	ldr	r2, [r3, #8]
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4935      	ldr	r1, [pc, #212]	; (80084b0 <HAL_RTC_SetAlarm_IT+0x28c>)
 80083da:	400a      	ands	r2, r1
 80083dc:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	68db      	ldr	r3, [r3, #12]
 80083e4:	22ff      	movs	r2, #255	; 0xff
 80083e6:	401a      	ands	r2, r3
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4931      	ldr	r1, [pc, #196]	; (80084b4 <HAL_RTC_SetAlarm_IT+0x290>)
 80083ee:	430a      	orrs	r2, r1
 80083f0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80083f2:	f7fd fd93 	bl	8005f1c <HAL_GetTick>
 80083f6:	0003      	movs	r3, r0
 80083f8:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80083fa:	e016      	b.n	800842a <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80083fc:	f7fd fd8e 	bl	8005f1c <HAL_GetTick>
 8008400:	0002      	movs	r2, r0
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	1ad2      	subs	r2, r2, r3
 8008406:	23fa      	movs	r3, #250	; 0xfa
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	429a      	cmp	r2, r3
 800840c:	d90d      	bls.n	800842a <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	22ff      	movs	r2, #255	; 0xff
 8008414:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	2221      	movs	r2, #33	; 0x21
 800841a:	2103      	movs	r1, #3
 800841c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2220      	movs	r2, #32
 8008422:	2100      	movs	r1, #0
 8008424:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008426:	2303      	movs	r3, #3
 8008428:	e03a      	b.n	80084a0 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	68db      	ldr	r3, [r3, #12]
 8008430:	2202      	movs	r2, #2
 8008432:	4013      	ands	r3, r2
 8008434:	d0e2      	beq.n	80083fc <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	69fa      	ldr	r2, [r7, #28]
 800843c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	69ba      	ldr	r2, [r7, #24]
 8008444:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	689a      	ldr	r2, [r3, #8]
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2180      	movs	r1, #128	; 0x80
 8008452:	0089      	lsls	r1, r1, #2
 8008454:	430a      	orrs	r2, r1
 8008456:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	689a      	ldr	r2, [r3, #8]
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	2180      	movs	r1, #128	; 0x80
 8008464:	0189      	lsls	r1, r1, #6
 8008466:	430a      	orrs	r2, r1
 8008468:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800846a:	4b13      	ldr	r3, [pc, #76]	; (80084b8 <HAL_RTC_SetAlarm_IT+0x294>)
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	4b12      	ldr	r3, [pc, #72]	; (80084b8 <HAL_RTC_SetAlarm_IT+0x294>)
 8008470:	2180      	movs	r1, #128	; 0x80
 8008472:	0289      	lsls	r1, r1, #10
 8008474:	430a      	orrs	r2, r1
 8008476:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8008478:	4b0f      	ldr	r3, [pc, #60]	; (80084b8 <HAL_RTC_SetAlarm_IT+0x294>)
 800847a:	689a      	ldr	r2, [r3, #8]
 800847c:	4b0e      	ldr	r3, [pc, #56]	; (80084b8 <HAL_RTC_SetAlarm_IT+0x294>)
 800847e:	2180      	movs	r1, #128	; 0x80
 8008480:	0289      	lsls	r1, r1, #10
 8008482:	430a      	orrs	r2, r1
 8008484:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	22ff      	movs	r2, #255	; 0xff
 800848c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2221      	movs	r2, #33	; 0x21
 8008492:	2101      	movs	r1, #1
 8008494:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2220      	movs	r2, #32
 800849a:	2100      	movs	r1, #0
 800849c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800849e:	2300      	movs	r3, #0
}
 80084a0:	0018      	movs	r0, r3
 80084a2:	46bd      	mov	sp, r7
 80084a4:	b009      	add	sp, #36	; 0x24
 80084a6:	bd90      	pop	{r4, r7, pc}
 80084a8:	fffffeff 	.word	0xfffffeff
 80084ac:	fffffe7f 	.word	0xfffffe7f
 80084b0:	fffffdff 	.word	0xfffffdff
 80084b4:	fffffd7f 	.word	0xfffffd7f
 80084b8:	40010400 	.word	0x40010400

080084bc <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2220      	movs	r2, #32
 80084ca:	5c9b      	ldrb	r3, [r3, r2]
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d101      	bne.n	80084d4 <HAL_RTC_DeactivateAlarm+0x18>
 80084d0:	2302      	movs	r3, #2
 80084d2:	e086      	b.n	80085e2 <HAL_RTC_DeactivateAlarm+0x126>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2220      	movs	r2, #32
 80084d8:	2101      	movs	r1, #1
 80084da:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2221      	movs	r2, #33	; 0x21
 80084e0:	2102      	movs	r1, #2
 80084e2:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	22ca      	movs	r2, #202	; 0xca
 80084ea:	625a      	str	r2, [r3, #36]	; 0x24
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	2253      	movs	r2, #83	; 0x53
 80084f2:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 80084f4:	683a      	ldr	r2, [r7, #0]
 80084f6:	2380      	movs	r3, #128	; 0x80
 80084f8:	005b      	lsls	r3, r3, #1
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d132      	bne.n	8008564 <HAL_RTC_DeactivateAlarm+0xa8>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	689a      	ldr	r2, [r3, #8]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4938      	ldr	r1, [pc, #224]	; (80085ec <HAL_RTC_DeactivateAlarm+0x130>)
 800850a:	400a      	ands	r2, r1
 800850c:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	689a      	ldr	r2, [r3, #8]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4935      	ldr	r1, [pc, #212]	; (80085f0 <HAL_RTC_DeactivateAlarm+0x134>)
 800851a:	400a      	ands	r2, r1
 800851c:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 800851e:	f7fd fcfd 	bl	8005f1c <HAL_GetTick>
 8008522:	0003      	movs	r3, r0
 8008524:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008526:	e016      	b.n	8008556 <HAL_RTC_DeactivateAlarm+0x9a>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008528:	f7fd fcf8 	bl	8005f1c <HAL_GetTick>
 800852c:	0002      	movs	r2, r0
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	1ad2      	subs	r2, r2, r3
 8008532:	23fa      	movs	r3, #250	; 0xfa
 8008534:	009b      	lsls	r3, r3, #2
 8008536:	429a      	cmp	r2, r3
 8008538:	d90d      	bls.n	8008556 <HAL_RTC_DeactivateAlarm+0x9a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	22ff      	movs	r2, #255	; 0xff
 8008540:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2221      	movs	r2, #33	; 0x21
 8008546:	2103      	movs	r1, #3
 8008548:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2220      	movs	r2, #32
 800854e:	2100      	movs	r1, #0
 8008550:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008552:	2303      	movs	r3, #3
 8008554:	e045      	b.n	80085e2 <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	68db      	ldr	r3, [r3, #12]
 800855c:	2201      	movs	r2, #1
 800855e:	4013      	ands	r3, r2
 8008560:	d0e2      	beq.n	8008528 <HAL_RTC_DeactivateAlarm+0x6c>
 8008562:	e031      	b.n	80085c8 <HAL_RTC_DeactivateAlarm+0x10c>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	689a      	ldr	r2, [r3, #8]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4921      	ldr	r1, [pc, #132]	; (80085f4 <HAL_RTC_DeactivateAlarm+0x138>)
 8008570:	400a      	ands	r2, r1
 8008572:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	689a      	ldr	r2, [r3, #8]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	491e      	ldr	r1, [pc, #120]	; (80085f8 <HAL_RTC_DeactivateAlarm+0x13c>)
 8008580:	400a      	ands	r2, r1
 8008582:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8008584:	f7fd fcca 	bl	8005f1c <HAL_GetTick>
 8008588:	0003      	movs	r3, r0
 800858a:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800858c:	e016      	b.n	80085bc <HAL_RTC_DeactivateAlarm+0x100>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800858e:	f7fd fcc5 	bl	8005f1c <HAL_GetTick>
 8008592:	0002      	movs	r2, r0
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	1ad2      	subs	r2, r2, r3
 8008598:	23fa      	movs	r3, #250	; 0xfa
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	429a      	cmp	r2, r3
 800859e:	d90d      	bls.n	80085bc <HAL_RTC_DeactivateAlarm+0x100>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	22ff      	movs	r2, #255	; 0xff
 80085a6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2221      	movs	r2, #33	; 0x21
 80085ac:	2103      	movs	r1, #3
 80085ae:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2220      	movs	r2, #32
 80085b4:	2100      	movs	r1, #0
 80085b6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80085b8:	2303      	movs	r3, #3
 80085ba:	e012      	b.n	80085e2 <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	68db      	ldr	r3, [r3, #12]
 80085c2:	2202      	movs	r2, #2
 80085c4:	4013      	ands	r3, r2
 80085c6:	d0e2      	beq.n	800858e <HAL_RTC_DeactivateAlarm+0xd2>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	22ff      	movs	r2, #255	; 0xff
 80085ce:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2221      	movs	r2, #33	; 0x21
 80085d4:	2101      	movs	r1, #1
 80085d6:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2220      	movs	r2, #32
 80085dc:	2100      	movs	r1, #0
 80085de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80085e0:	2300      	movs	r3, #0
}
 80085e2:	0018      	movs	r0, r3
 80085e4:	46bd      	mov	sp, r7
 80085e6:	b004      	add	sp, #16
 80085e8:	bd80      	pop	{r7, pc}
 80085ea:	46c0      	nop			; (mov r8, r8)
 80085ec:	fffffeff 	.word	0xfffffeff
 80085f0:	ffffefff 	.word	0xffffefff
 80085f4:	fffffdff 	.word	0xfffffdff
 80085f8:	ffffdfff 	.word	0xffffdfff

080085fc <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	689a      	ldr	r2, [r3, #8]
 800860a:	2380      	movs	r3, #128	; 0x80
 800860c:	015b      	lsls	r3, r3, #5
 800860e:	4013      	ands	r3, r2
 8008610:	d014      	beq.n	800863c <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	68da      	ldr	r2, [r3, #12]
 8008618:	2380      	movs	r3, #128	; 0x80
 800861a:	005b      	lsls	r3, r3, #1
 800861c:	4013      	ands	r3, r2
 800861e:	d00d      	beq.n	800863c <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	0018      	movs	r0, r3
 8008624:	f7fa f906 	bl	8002834 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	68db      	ldr	r3, [r3, #12]
 800862e:	22ff      	movs	r2, #255	; 0xff
 8008630:	401a      	ands	r2, r3
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4915      	ldr	r1, [pc, #84]	; (800868c <HAL_RTC_AlarmIRQHandler+0x90>)
 8008638:	430a      	orrs	r2, r1
 800863a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	689a      	ldr	r2, [r3, #8]
 8008642:	2380      	movs	r3, #128	; 0x80
 8008644:	019b      	lsls	r3, r3, #6
 8008646:	4013      	ands	r3, r2
 8008648:	d014      	beq.n	8008674 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	68da      	ldr	r2, [r3, #12]
 8008650:	2380      	movs	r3, #128	; 0x80
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	4013      	ands	r3, r2
 8008656:	d00d      	beq.n	8008674 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	0018      	movs	r0, r3
 800865c:	f7fa f902 	bl	8002864 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	68db      	ldr	r3, [r3, #12]
 8008666:	22ff      	movs	r2, #255	; 0xff
 8008668:	401a      	ands	r2, r3
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4908      	ldr	r1, [pc, #32]	; (8008690 <HAL_RTC_AlarmIRQHandler+0x94>)
 8008670:	430a      	orrs	r2, r1
 8008672:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8008674:	4b07      	ldr	r3, [pc, #28]	; (8008694 <HAL_RTC_AlarmIRQHandler+0x98>)
 8008676:	2280      	movs	r2, #128	; 0x80
 8008678:	0292      	lsls	r2, r2, #10
 800867a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2221      	movs	r2, #33	; 0x21
 8008680:	2101      	movs	r1, #1
 8008682:	5499      	strb	r1, [r3, r2]
}
 8008684:	46c0      	nop			; (mov r8, r8)
 8008686:	46bd      	mov	sp, r7
 8008688:	b002      	add	sp, #8
 800868a:	bd80      	pop	{r7, pc}
 800868c:	fffffe7f 	.word	0xfffffe7f
 8008690:	fffffd7f 	.word	0xfffffd7f
 8008694:	40010400 	.word	0x40010400

08008698 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b084      	sub	sp, #16
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	68da      	ldr	r2, [r3, #12]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	21a0      	movs	r1, #160	; 0xa0
 80086ac:	438a      	bics	r2, r1
 80086ae:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80086b0:	f7fd fc34 	bl	8005f1c <HAL_GetTick>
 80086b4:	0003      	movs	r3, r0
 80086b6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80086b8:	e00a      	b.n	80086d0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80086ba:	f7fd fc2f 	bl	8005f1c <HAL_GetTick>
 80086be:	0002      	movs	r2, r0
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	1ad2      	subs	r2, r2, r3
 80086c4:	23fa      	movs	r3, #250	; 0xfa
 80086c6:	009b      	lsls	r3, r3, #2
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d901      	bls.n	80086d0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80086cc:	2303      	movs	r3, #3
 80086ce:	e006      	b.n	80086de <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	68db      	ldr	r3, [r3, #12]
 80086d6:	2220      	movs	r2, #32
 80086d8:	4013      	ands	r3, r2
 80086da:	d0ee      	beq.n	80086ba <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80086dc:	2300      	movs	r3, #0
}
 80086de:	0018      	movs	r0, r3
 80086e0:	46bd      	mov	sp, r7
 80086e2:	b004      	add	sp, #16
 80086e4:	bd80      	pop	{r7, pc}

080086e6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80086e6:	b580      	push	{r7, lr}
 80086e8:	b084      	sub	sp, #16
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	68db      	ldr	r3, [r3, #12]
 80086f4:	2240      	movs	r2, #64	; 0x40
 80086f6:	4013      	ands	r3, r2
 80086f8:	d11a      	bne.n	8008730 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	2201      	movs	r2, #1
 8008700:	4252      	negs	r2, r2
 8008702:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008704:	f7fd fc0a 	bl	8005f1c <HAL_GetTick>
 8008708:	0003      	movs	r3, r0
 800870a:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800870c:	e00a      	b.n	8008724 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800870e:	f7fd fc05 	bl	8005f1c <HAL_GetTick>
 8008712:	0002      	movs	r2, r0
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	1ad2      	subs	r2, r2, r3
 8008718:	23fa      	movs	r3, #250	; 0xfa
 800871a:	009b      	lsls	r3, r3, #2
 800871c:	429a      	cmp	r2, r3
 800871e:	d901      	bls.n	8008724 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8008720:	2303      	movs	r3, #3
 8008722:	e006      	b.n	8008732 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	68db      	ldr	r3, [r3, #12]
 800872a:	2240      	movs	r2, #64	; 0x40
 800872c:	4013      	ands	r3, r2
 800872e:	d0ee      	beq.n	800870e <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8008730:	2300      	movs	r3, #0
}
 8008732:	0018      	movs	r0, r3
 8008734:	46bd      	mov	sp, r7
 8008736:	b004      	add	sp, #16
 8008738:	bd80      	pop	{r7, pc}

0800873a <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800873a:	b580      	push	{r7, lr}
 800873c:	b084      	sub	sp, #16
 800873e:	af00      	add	r7, sp, #0
 8008740:	0002      	movs	r2, r0
 8008742:	1dfb      	adds	r3, r7, #7
 8008744:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8008746:	2300      	movs	r3, #0
 8008748:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800874a:	230b      	movs	r3, #11
 800874c:	18fb      	adds	r3, r7, r3
 800874e:	1dfa      	adds	r2, r7, #7
 8008750:	7812      	ldrb	r2, [r2, #0]
 8008752:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8008754:	e008      	b.n	8008768 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	3301      	adds	r3, #1
 800875a:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800875c:	220b      	movs	r2, #11
 800875e:	18bb      	adds	r3, r7, r2
 8008760:	18ba      	adds	r2, r7, r2
 8008762:	7812      	ldrb	r2, [r2, #0]
 8008764:	3a0a      	subs	r2, #10
 8008766:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8008768:	230b      	movs	r3, #11
 800876a:	18fb      	adds	r3, r7, r3
 800876c:	781b      	ldrb	r3, [r3, #0]
 800876e:	2b09      	cmp	r3, #9
 8008770:	d8f1      	bhi.n	8008756 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	b2db      	uxtb	r3, r3
 8008776:	011b      	lsls	r3, r3, #4
 8008778:	b2da      	uxtb	r2, r3
 800877a:	230b      	movs	r3, #11
 800877c:	18fb      	adds	r3, r7, r3
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	4313      	orrs	r3, r2
 8008782:	b2db      	uxtb	r3, r3
}
 8008784:	0018      	movs	r0, r3
 8008786:	46bd      	mov	sp, r7
 8008788:	b004      	add	sp, #16
 800878a:	bd80      	pop	{r7, pc}

0800878c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	0002      	movs	r2, r0
 8008794:	1dfb      	adds	r3, r7, #7
 8008796:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8008798:	1dfb      	adds	r3, r7, #7
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	091b      	lsrs	r3, r3, #4
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	001a      	movs	r2, r3
 80087a2:	0013      	movs	r3, r2
 80087a4:	009b      	lsls	r3, r3, #2
 80087a6:	189b      	adds	r3, r3, r2
 80087a8:	005b      	lsls	r3, r3, #1
 80087aa:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	b2da      	uxtb	r2, r3
 80087b0:	1dfb      	adds	r3, r7, #7
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	210f      	movs	r1, #15
 80087b6:	400b      	ands	r3, r1
 80087b8:	b2db      	uxtb	r3, r3
 80087ba:	18d3      	adds	r3, r2, r3
 80087bc:	b2db      	uxtb	r3, r3
}
 80087be:	0018      	movs	r0, r3
 80087c0:	46bd      	mov	sp, r7
 80087c2:	b004      	add	sp, #16
 80087c4:	bd80      	pop	{r7, pc}

080087c6 <HAL_RTCEx_SetSmoothCalib>:
  *         must be equal to SMOOTHCALIB_PLUSPULSES_RESET and the field
  *         SmoothCalibMinusPulsesValue mut be equal to 0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSmoothCalib(RTC_HandleTypeDef *hrtc, uint32_t SmoothCalibPeriod, uint32_t SmoothCalibPlusPulses, uint32_t SmoothCalibMinusPulsesValue)
{
 80087c6:	b580      	push	{r7, lr}
 80087c8:	b086      	sub	sp, #24
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	60f8      	str	r0, [r7, #12]
 80087ce:	60b9      	str	r1, [r7, #8]
 80087d0:	607a      	str	r2, [r7, #4]
 80087d2:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(SmoothCalibMinusPulsesValue));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2220      	movs	r2, #32
 80087d8:	5c9b      	ldrb	r3, [r3, r2]
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d101      	bne.n	80087e2 <HAL_RTCEx_SetSmoothCalib+0x1c>
 80087de:	2302      	movs	r3, #2
 80087e0:	e04f      	b.n	8008882 <HAL_RTCEx_SetSmoothCalib+0xbc>
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2220      	movs	r2, #32
 80087e6:	2101      	movs	r1, #1
 80087e8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2221      	movs	r2, #33	; 0x21
 80087ee:	2102      	movs	r1, #2
 80087f0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	22ca      	movs	r2, #202	; 0xca
 80087f8:	625a      	str	r2, [r3, #36]	; 0x24
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	2253      	movs	r2, #83	; 0x53
 8008800:	625a      	str	r2, [r3, #36]	; 0x24

  /* check if a calibration is pending*/
  if ((hrtc->Instance->ISR & RTC_ISR_RECALPF) != 0U)
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	68da      	ldr	r2, [r3, #12]
 8008808:	2380      	movs	r3, #128	; 0x80
 800880a:	025b      	lsls	r3, r3, #9
 800880c:	4013      	ands	r3, r2
 800880e:	d022      	beq.n	8008856 <HAL_RTCEx_SetSmoothCalib+0x90>
  {
    tickstart = HAL_GetTick();
 8008810:	f7fd fb84 	bl	8005f1c <HAL_GetTick>
 8008814:	0003      	movs	r3, r0
 8008816:	617b      	str	r3, [r7, #20]

    /* check if a calibration is pending*/
    while ((hrtc->Instance->ISR & RTC_ISR_RECALPF) != 0U)
 8008818:	e016      	b.n	8008848 <HAL_RTCEx_SetSmoothCalib+0x82>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800881a:	f7fd fb7f 	bl	8005f1c <HAL_GetTick>
 800881e:	0002      	movs	r2, r0
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	1ad2      	subs	r2, r2, r3
 8008824:	23fa      	movs	r3, #250	; 0xfa
 8008826:	009b      	lsls	r3, r3, #2
 8008828:	429a      	cmp	r2, r3
 800882a:	d90d      	bls.n	8008848 <HAL_RTCEx_SetSmoothCalib+0x82>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	22ff      	movs	r2, #255	; 0xff
 8008832:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2221      	movs	r2, #33	; 0x21
 8008838:	2103      	movs	r1, #3
 800883a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2220      	movs	r2, #32
 8008840:	2100      	movs	r1, #0
 8008842:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008844:	2303      	movs	r3, #3
 8008846:	e01c      	b.n	8008882 <HAL_RTCEx_SetSmoothCalib+0xbc>
    while ((hrtc->Instance->ISR & RTC_ISR_RECALPF) != 0U)
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	68da      	ldr	r2, [r3, #12]
 800884e:	2380      	movs	r3, #128	; 0x80
 8008850:	025b      	lsls	r3, r3, #9
 8008852:	4013      	ands	r3, r2
 8008854:	d1e1      	bne.n	800881a <HAL_RTCEx_SetSmoothCalib+0x54>
      }
    }
  }

  /* Configure the Smooth calibration settings */
  hrtc->Instance->CALR = (uint32_t)((uint32_t)SmoothCalibPeriod | (uint32_t)SmoothCalibPlusPulses | (uint32_t)SmoothCalibMinusPulsesValue);
 8008856:	68ba      	ldr	r2, [r7, #8]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	431a      	orrs	r2, r3
 800885c:	0011      	movs	r1, r2
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	683a      	ldr	r2, [r7, #0]
 8008864:	430a      	orrs	r2, r1
 8008866:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	22ff      	movs	r2, #255	; 0xff
 800886e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2221      	movs	r2, #33	; 0x21
 8008874:	2101      	movs	r1, #1
 8008876:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2220      	movs	r2, #32
 800887c:	2100      	movs	r1, #0
 800887e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008880:	2300      	movs	r3, #0
}
 8008882:	0018      	movs	r0, r3
 8008884:	46bd      	mov	sp, r7
 8008886:	b006      	add	sp, #24
 8008888:	bd80      	pop	{r7, pc}
	...

0800888c <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef *hrtc, uint32_t CalibOutput)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b082      	sub	sp, #8
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2220      	movs	r2, #32
 800889a:	5c9b      	ldrb	r3, [r3, r2]
 800889c:	2b01      	cmp	r3, #1
 800889e:	d101      	bne.n	80088a4 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 80088a0:	2302      	movs	r3, #2
 80088a2:	e035      	b.n	8008910 <HAL_RTCEx_SetCalibrationOutPut+0x84>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2220      	movs	r2, #32
 80088a8:	2101      	movs	r1, #1
 80088aa:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2221      	movs	r2, #33	; 0x21
 80088b0:	2102      	movs	r1, #2
 80088b2:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	22ca      	movs	r2, #202	; 0xca
 80088ba:	625a      	str	r2, [r3, #36]	; 0x24
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2253      	movs	r2, #83	; 0x53
 80088c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	689a      	ldr	r2, [r3, #8]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4912      	ldr	r1, [pc, #72]	; (8008918 <HAL_RTCEx_SetCalibrationOutPut+0x8c>)
 80088d0:	400a      	ands	r2, r1
 80088d2:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	6899      	ldr	r1, [r3, #8]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	683a      	ldr	r2, [r7, #0]
 80088e0:	430a      	orrs	r2, r1
 80088e2:	609a      	str	r2, [r3, #8]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	689a      	ldr	r2, [r3, #8]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	2180      	movs	r1, #128	; 0x80
 80088f0:	0409      	lsls	r1, r1, #16
 80088f2:	430a      	orrs	r2, r1
 80088f4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	22ff      	movs	r2, #255	; 0xff
 80088fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2221      	movs	r2, #33	; 0x21
 8008902:	2101      	movs	r1, #1
 8008904:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2220      	movs	r2, #32
 800890a:	2100      	movs	r1, #0
 800890c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800890e:	2300      	movs	r3, #0
}
 8008910:	0018      	movs	r0, r3
 8008912:	46bd      	mov	sp, r7
 8008914:	b002      	add	sp, #8
 8008916:	bd80      	pop	{r7, pc}
 8008918:	fff7ffff 	.word	0xfff7ffff

0800891c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b082      	sub	sp, #8
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d101      	bne.n	800892e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800892a:	2301      	movs	r3, #1
 800892c:	e059      	b.n	80089e2 <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2200      	movs	r2, #0
 8008932:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2251      	movs	r2, #81	; 0x51
 8008938:	5c9b      	ldrb	r3, [r3, r2]
 800893a:	b2db      	uxtb	r3, r3
 800893c:	2b00      	cmp	r3, #0
 800893e:	d107      	bne.n	8008950 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2250      	movs	r2, #80	; 0x50
 8008944:	2100      	movs	r1, #0
 8008946:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	0018      	movs	r0, r3
 800894c:	f7fa ffd4 	bl	80038f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2251      	movs	r2, #81	; 0x51
 8008954:	2102      	movs	r1, #2
 8008956:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	2140      	movs	r1, #64	; 0x40
 8008964:	438a      	bics	r2, r1
 8008966:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	685a      	ldr	r2, [r3, #4]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	689b      	ldr	r3, [r3, #8]
 8008970:	431a      	orrs	r2, r3
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	68db      	ldr	r3, [r3, #12]
 8008976:	431a      	orrs	r2, r3
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	691b      	ldr	r3, [r3, #16]
 800897c:	431a      	orrs	r2, r3
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	695b      	ldr	r3, [r3, #20]
 8008982:	431a      	orrs	r2, r3
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6999      	ldr	r1, [r3, #24]
 8008988:	2380      	movs	r3, #128	; 0x80
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	400b      	ands	r3, r1
 800898e:	431a      	orrs	r2, r3
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	69db      	ldr	r3, [r3, #28]
 8008994:	431a      	orrs	r2, r3
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6a1b      	ldr	r3, [r3, #32]
 800899a:	431a      	orrs	r2, r3
 800899c:	0011      	movs	r1, r2
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	430a      	orrs	r2, r1
 80089a8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	699b      	ldr	r3, [r3, #24]
 80089ae:	0c1b      	lsrs	r3, r3, #16
 80089b0:	2204      	movs	r2, #4
 80089b2:	4013      	ands	r3, r2
 80089b4:	0019      	movs	r1, r3
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	430a      	orrs	r2, r1
 80089c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	69da      	ldr	r2, [r3, #28]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4907      	ldr	r1, [pc, #28]	; (80089ec <HAL_SPI_Init+0xd0>)
 80089ce:	400a      	ands	r2, r1
 80089d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2200      	movs	r2, #0
 80089d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2251      	movs	r2, #81	; 0x51
 80089dc:	2101      	movs	r1, #1
 80089de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80089e0:	2300      	movs	r3, #0
}
 80089e2:	0018      	movs	r0, r3
 80089e4:	46bd      	mov	sp, r7
 80089e6:	b002      	add	sp, #8
 80089e8:	bd80      	pop	{r7, pc}
 80089ea:	46c0      	nop			; (mov r8, r8)
 80089ec:	fffff7ff 	.word	0xfffff7ff

080089f0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b088      	sub	sp, #32
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	60b9      	str	r1, [r7, #8]
 80089fa:	603b      	str	r3, [r7, #0]
 80089fc:	1dbb      	adds	r3, r7, #6
 80089fe:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008a00:	231f      	movs	r3, #31
 8008a02:	18fb      	adds	r3, r7, r3
 8008a04:	2200      	movs	r2, #0
 8008a06:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2250      	movs	r2, #80	; 0x50
 8008a0c:	5c9b      	ldrb	r3, [r3, r2]
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	d101      	bne.n	8008a16 <HAL_SPI_Transmit+0x26>
 8008a12:	2302      	movs	r3, #2
 8008a14:	e136      	b.n	8008c84 <HAL_SPI_Transmit+0x294>
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2250      	movs	r2, #80	; 0x50
 8008a1a:	2101      	movs	r1, #1
 8008a1c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008a1e:	f7fd fa7d 	bl	8005f1c <HAL_GetTick>
 8008a22:	0003      	movs	r3, r0
 8008a24:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008a26:	2316      	movs	r3, #22
 8008a28:	18fb      	adds	r3, r7, r3
 8008a2a:	1dba      	adds	r2, r7, #6
 8008a2c:	8812      	ldrh	r2, [r2, #0]
 8008a2e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2251      	movs	r2, #81	; 0x51
 8008a34:	5c9b      	ldrb	r3, [r3, r2]
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d004      	beq.n	8008a46 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8008a3c:	231f      	movs	r3, #31
 8008a3e:	18fb      	adds	r3, r7, r3
 8008a40:	2202      	movs	r2, #2
 8008a42:	701a      	strb	r2, [r3, #0]
    goto error;
 8008a44:	e113      	b.n	8008c6e <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d003      	beq.n	8008a54 <HAL_SPI_Transmit+0x64>
 8008a4c:	1dbb      	adds	r3, r7, #6
 8008a4e:	881b      	ldrh	r3, [r3, #0]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d104      	bne.n	8008a5e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8008a54:	231f      	movs	r3, #31
 8008a56:	18fb      	adds	r3, r7, r3
 8008a58:	2201      	movs	r2, #1
 8008a5a:	701a      	strb	r2, [r3, #0]
    goto error;
 8008a5c:	e107      	b.n	8008c6e <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	2251      	movs	r2, #81	; 0x51
 8008a62:	2103      	movs	r1, #3
 8008a64:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	68ba      	ldr	r2, [r7, #8]
 8008a70:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	1dba      	adds	r2, r7, #6
 8008a76:	8812      	ldrh	r2, [r2, #0]
 8008a78:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	1dba      	adds	r2, r7, #6
 8008a7e:	8812      	ldrh	r2, [r2, #0]
 8008a80:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2200      	movs	r2, #0
 8008a86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2200      	movs	r2, #0
 8008a92:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2200      	movs	r2, #0
 8008a98:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	689a      	ldr	r2, [r3, #8]
 8008aa4:	2380      	movs	r3, #128	; 0x80
 8008aa6:	021b      	lsls	r3, r3, #8
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d108      	bne.n	8008abe <HAL_SPI_Transmit+0xce>
  {
    SPI_1LINE_TX(hspi);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	2180      	movs	r1, #128	; 0x80
 8008ab8:	01c9      	lsls	r1, r1, #7
 8008aba:	430a      	orrs	r2, r1
 8008abc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	2240      	movs	r2, #64	; 0x40
 8008ac6:	4013      	ands	r3, r2
 8008ac8:	2b40      	cmp	r3, #64	; 0x40
 8008aca:	d007      	beq.n	8008adc <HAL_SPI_Transmit+0xec>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	681a      	ldr	r2, [r3, #0]
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	2140      	movs	r1, #64	; 0x40
 8008ad8:	430a      	orrs	r2, r1
 8008ada:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	68da      	ldr	r2, [r3, #12]
 8008ae0:	2380      	movs	r3, #128	; 0x80
 8008ae2:	011b      	lsls	r3, r3, #4
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d14e      	bne.n	8008b86 <HAL_SPI_Transmit+0x196>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d004      	beq.n	8008afa <HAL_SPI_Transmit+0x10a>
 8008af0:	2316      	movs	r3, #22
 8008af2:	18fb      	adds	r3, r7, r3
 8008af4:	881b      	ldrh	r3, [r3, #0]
 8008af6:	2b01      	cmp	r3, #1
 8008af8:	d13f      	bne.n	8008b7a <HAL_SPI_Transmit+0x18a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008afe:	881a      	ldrh	r2, [r3, #0]
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b0a:	1c9a      	adds	r2, r3, #2
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b14:	b29b      	uxth	r3, r3
 8008b16:	3b01      	subs	r3, #1
 8008b18:	b29a      	uxth	r2, r3
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008b1e:	e02c      	b.n	8008b7a <HAL_SPI_Transmit+0x18a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	2202      	movs	r2, #2
 8008b28:	4013      	ands	r3, r2
 8008b2a:	2b02      	cmp	r3, #2
 8008b2c:	d112      	bne.n	8008b54 <HAL_SPI_Transmit+0x164>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b32:	881a      	ldrh	r2, [r3, #0]
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b3e:	1c9a      	adds	r2, r3, #2
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	3b01      	subs	r3, #1
 8008b4c:	b29a      	uxth	r2, r3
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	86da      	strh	r2, [r3, #54]	; 0x36
 8008b52:	e012      	b.n	8008b7a <HAL_SPI_Transmit+0x18a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b54:	f7fd f9e2 	bl	8005f1c <HAL_GetTick>
 8008b58:	0002      	movs	r2, r0
 8008b5a:	69bb      	ldr	r3, [r7, #24]
 8008b5c:	1ad3      	subs	r3, r2, r3
 8008b5e:	683a      	ldr	r2, [r7, #0]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d802      	bhi.n	8008b6a <HAL_SPI_Transmit+0x17a>
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	3301      	adds	r3, #1
 8008b68:	d102      	bne.n	8008b70 <HAL_SPI_Transmit+0x180>
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d104      	bne.n	8008b7a <HAL_SPI_Transmit+0x18a>
        {
          errorcode = HAL_TIMEOUT;
 8008b70:	231f      	movs	r3, #31
 8008b72:	18fb      	adds	r3, r7, r3
 8008b74:	2203      	movs	r2, #3
 8008b76:	701a      	strb	r2, [r3, #0]
          goto error;
 8008b78:	e079      	b.n	8008c6e <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d1cd      	bne.n	8008b20 <HAL_SPI_Transmit+0x130>
 8008b84:	e04f      	b.n	8008c26 <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d004      	beq.n	8008b98 <HAL_SPI_Transmit+0x1a8>
 8008b8e:	2316      	movs	r3, #22
 8008b90:	18fb      	adds	r3, r7, r3
 8008b92:	881b      	ldrh	r3, [r3, #0]
 8008b94:	2b01      	cmp	r3, #1
 8008b96:	d141      	bne.n	8008c1c <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	330c      	adds	r3, #12
 8008ba2:	7812      	ldrb	r2, [r2, #0]
 8008ba4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008baa:	1c5a      	adds	r2, r3, #1
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bb4:	b29b      	uxth	r3, r3
 8008bb6:	3b01      	subs	r3, #1
 8008bb8:	b29a      	uxth	r2, r3
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008bbe:	e02d      	b.n	8008c1c <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	2202      	movs	r2, #2
 8008bc8:	4013      	ands	r3, r2
 8008bca:	2b02      	cmp	r3, #2
 8008bcc:	d113      	bne.n	8008bf6 <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	330c      	adds	r3, #12
 8008bd8:	7812      	ldrb	r2, [r2, #0]
 8008bda:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008be0:	1c5a      	adds	r2, r3, #1
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008bea:	b29b      	uxth	r3, r3
 8008bec:	3b01      	subs	r3, #1
 8008bee:	b29a      	uxth	r2, r3
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	86da      	strh	r2, [r3, #54]	; 0x36
 8008bf4:	e012      	b.n	8008c1c <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008bf6:	f7fd f991 	bl	8005f1c <HAL_GetTick>
 8008bfa:	0002      	movs	r2, r0
 8008bfc:	69bb      	ldr	r3, [r7, #24]
 8008bfe:	1ad3      	subs	r3, r2, r3
 8008c00:	683a      	ldr	r2, [r7, #0]
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d802      	bhi.n	8008c0c <HAL_SPI_Transmit+0x21c>
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	3301      	adds	r3, #1
 8008c0a:	d102      	bne.n	8008c12 <HAL_SPI_Transmit+0x222>
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d104      	bne.n	8008c1c <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 8008c12:	231f      	movs	r3, #31
 8008c14:	18fb      	adds	r3, r7, r3
 8008c16:	2203      	movs	r2, #3
 8008c18:	701a      	strb	r2, [r3, #0]
          goto error;
 8008c1a:	e028      	b.n	8008c6e <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d1cc      	bne.n	8008bc0 <HAL_SPI_Transmit+0x1d0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008c26:	69ba      	ldr	r2, [r7, #24]
 8008c28:	6839      	ldr	r1, [r7, #0]
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	0018      	movs	r0, r3
 8008c2e:	f000 fa99 	bl	8009164 <SPI_EndRxTxTransaction>
 8008c32:	1e03      	subs	r3, r0, #0
 8008c34:	d002      	beq.n	8008c3c <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2220      	movs	r2, #32
 8008c3a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d10a      	bne.n	8008c5a <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008c44:	2300      	movs	r3, #0
 8008c46:	613b      	str	r3, [r7, #16]
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	68db      	ldr	r3, [r3, #12]
 8008c4e:	613b      	str	r3, [r7, #16]
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	613b      	str	r3, [r7, #16]
 8008c58:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d004      	beq.n	8008c6c <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 8008c62:	231f      	movs	r3, #31
 8008c64:	18fb      	adds	r3, r7, r3
 8008c66:	2201      	movs	r2, #1
 8008c68:	701a      	strb	r2, [r3, #0]
 8008c6a:	e000      	b.n	8008c6e <HAL_SPI_Transmit+0x27e>
  }

error:
 8008c6c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2251      	movs	r2, #81	; 0x51
 8008c72:	2101      	movs	r1, #1
 8008c74:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2250      	movs	r2, #80	; 0x50
 8008c7a:	2100      	movs	r1, #0
 8008c7c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8008c7e:	231f      	movs	r3, #31
 8008c80:	18fb      	adds	r3, r7, r3
 8008c82:	781b      	ldrb	r3, [r3, #0]
}
 8008c84:	0018      	movs	r0, r3
 8008c86:	46bd      	mov	sp, r7
 8008c88:	b008      	add	sp, #32
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b086      	sub	sp, #24
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	60f8      	str	r0, [r7, #12]
 8008c94:	60b9      	str	r1, [r7, #8]
 8008c96:	1dbb      	adds	r3, r7, #6
 8008c98:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008c9a:	2317      	movs	r3, #23
 8008c9c:	18fb      	adds	r3, r7, r3
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2250      	movs	r2, #80	; 0x50
 8008ca6:	5c9b      	ldrb	r3, [r3, r2]
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d101      	bne.n	8008cb0 <HAL_SPI_Transmit_IT+0x24>
 8008cac:	2302      	movs	r3, #2
 8008cae:	e072      	b.n	8008d96 <HAL_SPI_Transmit_IT+0x10a>
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2250      	movs	r2, #80	; 0x50
 8008cb4:	2101      	movs	r1, #1
 8008cb6:	5499      	strb	r1, [r3, r2]

  if ((pData == NULL) || (Size == 0U))
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d003      	beq.n	8008cc6 <HAL_SPI_Transmit_IT+0x3a>
 8008cbe:	1dbb      	adds	r3, r7, #6
 8008cc0:	881b      	ldrh	r3, [r3, #0]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d104      	bne.n	8008cd0 <HAL_SPI_Transmit_IT+0x44>
  {
    errorcode = HAL_ERROR;
 8008cc6:	2317      	movs	r3, #23
 8008cc8:	18fb      	adds	r3, r7, r3
 8008cca:	2201      	movs	r2, #1
 8008ccc:	701a      	strb	r2, [r3, #0]
    goto error;
 8008cce:	e05b      	b.n	8008d88 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2251      	movs	r2, #81	; 0x51
 8008cd4:	5c9b      	ldrb	r3, [r3, r2]
 8008cd6:	b2db      	uxtb	r3, r3
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d004      	beq.n	8008ce6 <HAL_SPI_Transmit_IT+0x5a>
  {
    errorcode = HAL_BUSY;
 8008cdc:	2317      	movs	r3, #23
 8008cde:	18fb      	adds	r3, r7, r3
 8008ce0:	2202      	movs	r2, #2
 8008ce2:	701a      	strb	r2, [r3, #0]
    goto error;
 8008ce4:	e050      	b.n	8008d88 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2251      	movs	r2, #81	; 0x51
 8008cea:	2103      	movs	r1, #3
 8008cec:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	68ba      	ldr	r2, [r7, #8]
 8008cf8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	1dba      	adds	r2, r7, #6
 8008cfe:	8812      	ldrh	r2, [r2, #0]
 8008d00:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	1dba      	adds	r2, r7, #6
 8008d06:	8812      	ldrh	r2, [r2, #0]
 8008d08:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2200      	movs	r2, #0
 8008d14:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	68db      	ldr	r3, [r3, #12]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d003      	beq.n	8008d32 <HAL_SPI_Transmit_IT+0xa6>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	4a1c      	ldr	r2, [pc, #112]	; (8008da0 <HAL_SPI_Transmit_IT+0x114>)
 8008d2e:	645a      	str	r2, [r3, #68]	; 0x44
 8008d30:	e002      	b.n	8008d38 <HAL_SPI_Transmit_IT+0xac>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	4a1b      	ldr	r2, [pc, #108]	; (8008da4 <HAL_SPI_Transmit_IT+0x118>)
 8008d36:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	689a      	ldr	r2, [r3, #8]
 8008d3c:	2380      	movs	r3, #128	; 0x80
 8008d3e:	021b      	lsls	r3, r3, #8
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d108      	bne.n	8008d56 <HAL_SPI_Transmit_IT+0xca>
  {
    SPI_1LINE_TX(hspi);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	681a      	ldr	r2, [r3, #0]
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	2180      	movs	r1, #128	; 0x80
 8008d50:	01c9      	lsls	r1, r1, #7
 8008d52:	430a      	orrs	r2, r1
 8008d54:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	685a      	ldr	r2, [r3, #4]
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	21a0      	movs	r1, #160	; 0xa0
 8008d62:	430a      	orrs	r2, r1
 8008d64:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	2240      	movs	r2, #64	; 0x40
 8008d6e:	4013      	ands	r3, r2
 8008d70:	2b40      	cmp	r3, #64	; 0x40
 8008d72:	d008      	beq.n	8008d86 <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	681a      	ldr	r2, [r3, #0]
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	2140      	movs	r1, #64	; 0x40
 8008d80:	430a      	orrs	r2, r1
 8008d82:	601a      	str	r2, [r3, #0]
 8008d84:	e000      	b.n	8008d88 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 8008d86:	46c0      	nop			; (mov r8, r8)
  __HAL_UNLOCK(hspi);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2250      	movs	r2, #80	; 0x50
 8008d8c:	2100      	movs	r1, #0
 8008d8e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8008d90:	2317      	movs	r3, #23
 8008d92:	18fb      	adds	r3, r7, r3
 8008d94:	781b      	ldrb	r3, [r3, #0]
}
 8008d96:	0018      	movs	r0, r3
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	b006      	add	sp, #24
 8008d9c:	bd80      	pop	{r7, pc}
 8008d9e:	46c0      	nop			; (mov r8, r8)
 8008da0:	0800903f 	.word	0x0800903f
 8008da4:	08008ff7 	.word	0x08008ff7

08008da8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b088      	sub	sp, #32
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	689b      	ldr	r3, [r3, #8]
 8008dbe:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008dc0:	69bb      	ldr	r3, [r7, #24]
 8008dc2:	099b      	lsrs	r3, r3, #6
 8008dc4:	001a      	movs	r2, r3
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	4013      	ands	r3, r2
 8008dca:	d10f      	bne.n	8008dec <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008dcc:	69bb      	ldr	r3, [r7, #24]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008dd2:	d00b      	beq.n	8008dec <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008dd4:	69fb      	ldr	r3, [r7, #28]
 8008dd6:	099b      	lsrs	r3, r3, #6
 8008dd8:	001a      	movs	r2, r3
 8008dda:	2301      	movs	r3, #1
 8008ddc:	4013      	ands	r3, r2
 8008dde:	d005      	beq.n	8008dec <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	0010      	movs	r0, r2
 8008de8:	4798      	blx	r3
    return;
 8008dea:	e0d6      	b.n	8008f9a <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008dec:	69bb      	ldr	r3, [r7, #24]
 8008dee:	085b      	lsrs	r3, r3, #1
 8008df0:	001a      	movs	r2, r3
 8008df2:	2301      	movs	r3, #1
 8008df4:	4013      	ands	r3, r2
 8008df6:	d00b      	beq.n	8008e10 <HAL_SPI_IRQHandler+0x68>
 8008df8:	69fb      	ldr	r3, [r7, #28]
 8008dfa:	09db      	lsrs	r3, r3, #7
 8008dfc:	001a      	movs	r2, r3
 8008dfe:	2301      	movs	r3, #1
 8008e00:	4013      	ands	r3, r2
 8008e02:	d005      	beq.n	8008e10 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	0010      	movs	r0, r2
 8008e0c:	4798      	blx	r3
    return;
 8008e0e:	e0c4      	b.n	8008f9a <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008e10:	69bb      	ldr	r3, [r7, #24]
 8008e12:	095b      	lsrs	r3, r3, #5
 8008e14:	001a      	movs	r2, r3
 8008e16:	2301      	movs	r3, #1
 8008e18:	4013      	ands	r3, r2
 8008e1a:	d10c      	bne.n	8008e36 <HAL_SPI_IRQHandler+0x8e>
 8008e1c:	69bb      	ldr	r3, [r7, #24]
 8008e1e:	099b      	lsrs	r3, r3, #6
 8008e20:	001a      	movs	r2, r3
 8008e22:	2301      	movs	r3, #1
 8008e24:	4013      	ands	r3, r2
 8008e26:	d106      	bne.n	8008e36 <HAL_SPI_IRQHandler+0x8e>
 8008e28:	69bb      	ldr	r3, [r7, #24]
 8008e2a:	0a1b      	lsrs	r3, r3, #8
 8008e2c:	001a      	movs	r2, r3
 8008e2e:	2301      	movs	r3, #1
 8008e30:	4013      	ands	r3, r2
 8008e32:	d100      	bne.n	8008e36 <HAL_SPI_IRQHandler+0x8e>
 8008e34:	e0b1      	b.n	8008f9a <HAL_SPI_IRQHandler+0x1f2>
 8008e36:	69fb      	ldr	r3, [r7, #28]
 8008e38:	095b      	lsrs	r3, r3, #5
 8008e3a:	001a      	movs	r2, r3
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	4013      	ands	r3, r2
 8008e40:	d100      	bne.n	8008e44 <HAL_SPI_IRQHandler+0x9c>
 8008e42:	e0aa      	b.n	8008f9a <HAL_SPI_IRQHandler+0x1f2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008e44:	69bb      	ldr	r3, [r7, #24]
 8008e46:	099b      	lsrs	r3, r3, #6
 8008e48:	001a      	movs	r2, r3
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	4013      	ands	r3, r2
 8008e4e:	d023      	beq.n	8008e98 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2251      	movs	r2, #81	; 0x51
 8008e54:	5c9b      	ldrb	r3, [r3, r2]
 8008e56:	b2db      	uxtb	r3, r3
 8008e58:	2b03      	cmp	r3, #3
 8008e5a:	d011      	beq.n	8008e80 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e60:	2204      	movs	r2, #4
 8008e62:	431a      	orrs	r2, r3
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008e68:	2300      	movs	r3, #0
 8008e6a:	617b      	str	r3, [r7, #20]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	68db      	ldr	r3, [r3, #12]
 8008e72:	617b      	str	r3, [r7, #20]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	689b      	ldr	r3, [r3, #8]
 8008e7a:	617b      	str	r3, [r7, #20]
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	e00b      	b.n	8008e98 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008e80:	2300      	movs	r3, #0
 8008e82:	613b      	str	r3, [r7, #16]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	68db      	ldr	r3, [r3, #12]
 8008e8a:	613b      	str	r3, [r7, #16]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	689b      	ldr	r3, [r3, #8]
 8008e92:	613b      	str	r3, [r7, #16]
 8008e94:	693b      	ldr	r3, [r7, #16]
        return;
 8008e96:	e080      	b.n	8008f9a <HAL_SPI_IRQHandler+0x1f2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008e98:	69bb      	ldr	r3, [r7, #24]
 8008e9a:	095b      	lsrs	r3, r3, #5
 8008e9c:	001a      	movs	r2, r3
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	4013      	ands	r3, r2
 8008ea2:	d014      	beq.n	8008ece <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	431a      	orrs	r2, r3
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	60fb      	str	r3, [r7, #12]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	689b      	ldr	r3, [r3, #8]
 8008eba:	60fb      	str	r3, [r7, #12]
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	2140      	movs	r1, #64	; 0x40
 8008ec8:	438a      	bics	r2, r1
 8008eca:	601a      	str	r2, [r3, #0]
 8008ecc:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008ece:	69bb      	ldr	r3, [r7, #24]
 8008ed0:	0a1b      	lsrs	r3, r3, #8
 8008ed2:	001a      	movs	r2, r3
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	4013      	ands	r3, r2
 8008ed8:	d00c      	beq.n	8008ef4 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ede:	2208      	movs	r2, #8
 8008ee0:	431a      	orrs	r2, r3
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	60bb      	str	r3, [r7, #8]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	60bb      	str	r3, [r7, #8]
 8008ef2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d04d      	beq.n	8008f98 <HAL_SPI_IRQHandler+0x1f0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	685a      	ldr	r2, [r3, #4]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	21e0      	movs	r1, #224	; 0xe0
 8008f08:	438a      	bics	r2, r1
 8008f0a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2251      	movs	r2, #81	; 0x51
 8008f10:	2101      	movs	r1, #1
 8008f12:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008f14:	69fb      	ldr	r3, [r7, #28]
 8008f16:	2202      	movs	r2, #2
 8008f18:	4013      	ands	r3, r2
 8008f1a:	d103      	bne.n	8008f24 <HAL_SPI_IRQHandler+0x17c>
 8008f1c:	69fb      	ldr	r3, [r7, #28]
 8008f1e:	2201      	movs	r2, #1
 8008f20:	4013      	ands	r3, r2
 8008f22:	d032      	beq.n	8008f8a <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	685a      	ldr	r2, [r3, #4]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	2103      	movs	r1, #3
 8008f30:	438a      	bics	r2, r1
 8008f32:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d010      	beq.n	8008f5e <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f40:	4a17      	ldr	r2, [pc, #92]	; (8008fa0 <HAL_SPI_IRQHandler+0x1f8>)
 8008f42:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f48:	0018      	movs	r0, r3
 8008f4a:	f7fd fc3f 	bl	80067cc <HAL_DMA_Abort_IT>
 8008f4e:	1e03      	subs	r3, r0, #0
 8008f50:	d005      	beq.n	8008f5e <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f56:	2240      	movs	r2, #64	; 0x40
 8008f58:	431a      	orrs	r2, r3
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d016      	beq.n	8008f94 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f6a:	4a0d      	ldr	r2, [pc, #52]	; (8008fa0 <HAL_SPI_IRQHandler+0x1f8>)
 8008f6c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f72:	0018      	movs	r0, r3
 8008f74:	f7fd fc2a 	bl	80067cc <HAL_DMA_Abort_IT>
 8008f78:	1e03      	subs	r3, r0, #0
 8008f7a:	d00b      	beq.n	8008f94 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f80:	2240      	movs	r2, #64	; 0x40
 8008f82:	431a      	orrs	r2, r3
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8008f88:	e004      	b.n	8008f94 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	0018      	movs	r0, r3
 8008f8e:	f000 f809 	bl	8008fa4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008f92:	e000      	b.n	8008f96 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8008f94:	46c0      	nop			; (mov r8, r8)
    return;
 8008f96:	46c0      	nop			; (mov r8, r8)
 8008f98:	46c0      	nop			; (mov r8, r8)
  }
}
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	b008      	add	sp, #32
 8008f9e:	bd80      	pop	{r7, pc}
 8008fa0:	08008fcd 	.word	0x08008fcd

08008fa4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b082      	sub	sp, #8
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008fac:	46c0      	nop			; (mov r8, r8)
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	b002      	add	sp, #8
 8008fb2:	bd80      	pop	{r7, pc}

08008fb4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b082      	sub	sp, #8
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2251      	movs	r2, #81	; 0x51
 8008fc0:	5c9b      	ldrb	r3, [r3, r2]
 8008fc2:	b2db      	uxtb	r3, r3
}
 8008fc4:	0018      	movs	r0, r3
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	b002      	add	sp, #8
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b084      	sub	sp, #16
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fd8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	0018      	movs	r0, r3
 8008fea:	f7ff ffdb 	bl	8008fa4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008fee:	46c0      	nop			; (mov r8, r8)
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	b004      	add	sp, #16
 8008ff4:	bd80      	pop	{r7, pc}

08008ff6 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8008ff6:	b580      	push	{r7, lr}
 8008ff8:	b082      	sub	sp, #8
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	330c      	adds	r3, #12
 8009008:	7812      	ldrb	r2, [r2, #0]
 800900a:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009010:	1c5a      	adds	r2, r3, #1
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800901a:	b29b      	uxth	r3, r3
 800901c:	3b01      	subs	r3, #1
 800901e:	b29a      	uxth	r2, r3
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009028:	b29b      	uxth	r3, r3
 800902a:	2b00      	cmp	r3, #0
 800902c:	d103      	bne.n	8009036 <SPI_TxISR_8BIT+0x40>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	0018      	movs	r0, r3
 8009032:	f000 f8d5 	bl	80091e0 <SPI_CloseTx_ISR>
  }
}
 8009036:	46c0      	nop			; (mov r8, r8)
 8009038:	46bd      	mov	sp, r7
 800903a:	b002      	add	sp, #8
 800903c:	bd80      	pop	{r7, pc}

0800903e <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800903e:	b580      	push	{r7, lr}
 8009040:	b082      	sub	sp, #8
 8009042:	af00      	add	r7, sp, #0
 8009044:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800904a:	881a      	ldrh	r2, [r3, #0]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009056:	1c9a      	adds	r2, r3, #2
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009060:	b29b      	uxth	r3, r3
 8009062:	3b01      	subs	r3, #1
 8009064:	b29a      	uxth	r2, r3
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800906e:	b29b      	uxth	r3, r3
 8009070:	2b00      	cmp	r3, #0
 8009072:	d103      	bne.n	800907c <SPI_TxISR_16BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	0018      	movs	r0, r3
 8009078:	f000 f8b2 	bl	80091e0 <SPI_CloseTx_ISR>
  }
}
 800907c:	46c0      	nop			; (mov r8, r8)
 800907e:	46bd      	mov	sp, r7
 8009080:	b002      	add	sp, #8
 8009082:	bd80      	pop	{r7, pc}

08009084 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b084      	sub	sp, #16
 8009088:	af00      	add	r7, sp, #0
 800908a:	60f8      	str	r0, [r7, #12]
 800908c:	60b9      	str	r1, [r7, #8]
 800908e:	603b      	str	r3, [r7, #0]
 8009090:	1dfb      	adds	r3, r7, #7
 8009092:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009094:	e050      	b.n	8009138 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	3301      	adds	r3, #1
 800909a:	d04d      	beq.n	8009138 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800909c:	f7fc ff3e 	bl	8005f1c <HAL_GetTick>
 80090a0:	0002      	movs	r2, r0
 80090a2:	69bb      	ldr	r3, [r7, #24]
 80090a4:	1ad3      	subs	r3, r2, r3
 80090a6:	683a      	ldr	r2, [r7, #0]
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d902      	bls.n	80090b2 <SPI_WaitFlagStateUntilTimeout+0x2e>
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d142      	bne.n	8009138 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	685a      	ldr	r2, [r3, #4]
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	21e0      	movs	r1, #224	; 0xe0
 80090be:	438a      	bics	r2, r1
 80090c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	685a      	ldr	r2, [r3, #4]
 80090c6:	2382      	movs	r3, #130	; 0x82
 80090c8:	005b      	lsls	r3, r3, #1
 80090ca:	429a      	cmp	r2, r3
 80090cc:	d113      	bne.n	80090f6 <SPI_WaitFlagStateUntilTimeout+0x72>
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	689a      	ldr	r2, [r3, #8]
 80090d2:	2380      	movs	r3, #128	; 0x80
 80090d4:	021b      	lsls	r3, r3, #8
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d005      	beq.n	80090e6 <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	689a      	ldr	r2, [r3, #8]
 80090de:	2380      	movs	r3, #128	; 0x80
 80090e0:	00db      	lsls	r3, r3, #3
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d107      	bne.n	80090f6 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	681a      	ldr	r2, [r3, #0]
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	2140      	movs	r1, #64	; 0x40
 80090f2:	438a      	bics	r2, r1
 80090f4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80090fa:	2380      	movs	r3, #128	; 0x80
 80090fc:	019b      	lsls	r3, r3, #6
 80090fe:	429a      	cmp	r2, r3
 8009100:	d110      	bne.n	8009124 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	681a      	ldr	r2, [r3, #0]
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4914      	ldr	r1, [pc, #80]	; (8009160 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 800910e:	400a      	ands	r2, r1
 8009110:	601a      	str	r2, [r3, #0]
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	681a      	ldr	r2, [r3, #0]
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	2180      	movs	r1, #128	; 0x80
 800911e:	0189      	lsls	r1, r1, #6
 8009120:	430a      	orrs	r2, r1
 8009122:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2251      	movs	r2, #81	; 0x51
 8009128:	2101      	movs	r1, #1
 800912a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2250      	movs	r2, #80	; 0x50
 8009130:	2100      	movs	r1, #0
 8009132:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009134:	2303      	movs	r3, #3
 8009136:	e00f      	b.n	8009158 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	689b      	ldr	r3, [r3, #8]
 800913e:	68ba      	ldr	r2, [r7, #8]
 8009140:	4013      	ands	r3, r2
 8009142:	68ba      	ldr	r2, [r7, #8]
 8009144:	1ad3      	subs	r3, r2, r3
 8009146:	425a      	negs	r2, r3
 8009148:	4153      	adcs	r3, r2
 800914a:	b2db      	uxtb	r3, r3
 800914c:	001a      	movs	r2, r3
 800914e:	1dfb      	adds	r3, r7, #7
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	429a      	cmp	r2, r3
 8009154:	d19f      	bne.n	8009096 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8009156:	2300      	movs	r3, #0
}
 8009158:	0018      	movs	r0, r3
 800915a:	46bd      	mov	sp, r7
 800915c:	b004      	add	sp, #16
 800915e:	bd80      	pop	{r7, pc}
 8009160:	ffffdfff 	.word	0xffffdfff

08009164 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b086      	sub	sp, #24
 8009168:	af02      	add	r7, sp, #8
 800916a:	60f8      	str	r0, [r7, #12]
 800916c:	60b9      	str	r1, [r7, #8]
 800916e:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	685a      	ldr	r2, [r3, #4]
 8009174:	2382      	movs	r3, #130	; 0x82
 8009176:	005b      	lsls	r3, r3, #1
 8009178:	429a      	cmp	r2, r3
 800917a:	d112      	bne.n	80091a2 <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800917c:	68ba      	ldr	r2, [r7, #8]
 800917e:	68f8      	ldr	r0, [r7, #12]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	9300      	str	r3, [sp, #0]
 8009184:	0013      	movs	r3, r2
 8009186:	2200      	movs	r2, #0
 8009188:	2180      	movs	r1, #128	; 0x80
 800918a:	f7ff ff7b 	bl	8009084 <SPI_WaitFlagStateUntilTimeout>
 800918e:	1e03      	subs	r3, r0, #0
 8009190:	d020      	beq.n	80091d4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009196:	2220      	movs	r2, #32
 8009198:	431a      	orrs	r2, r3
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800919e:	2303      	movs	r3, #3
 80091a0:	e019      	b.n	80091d6 <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2251      	movs	r2, #81	; 0x51
 80091a6:	5c9b      	ldrb	r3, [r3, r2]
 80091a8:	b2db      	uxtb	r3, r3
 80091aa:	2b05      	cmp	r3, #5
 80091ac:	d112      	bne.n	80091d4 <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80091ae:	68ba      	ldr	r2, [r7, #8]
 80091b0:	68f8      	ldr	r0, [r7, #12]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	9300      	str	r3, [sp, #0]
 80091b6:	0013      	movs	r3, r2
 80091b8:	2200      	movs	r2, #0
 80091ba:	2101      	movs	r1, #1
 80091bc:	f7ff ff62 	bl	8009084 <SPI_WaitFlagStateUntilTimeout>
 80091c0:	1e03      	subs	r3, r0, #0
 80091c2:	d007      	beq.n	80091d4 <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091c8:	2220      	movs	r2, #32
 80091ca:	431a      	orrs	r2, r3
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80091d0:	2303      	movs	r3, #3
 80091d2:	e000      	b.n	80091d6 <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 80091d4:	2300      	movs	r3, #0
}
 80091d6:	0018      	movs	r0, r3
 80091d8:	46bd      	mov	sp, r7
 80091da:	b004      	add	sp, #16
 80091dc:	bd80      	pop	{r7, pc}
	...

080091e0 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b086      	sub	sp, #24
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80091e8:	4b2d      	ldr	r3, [pc, #180]	; (80092a0 <SPI_CloseTx_ISR+0xc0>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	492d      	ldr	r1, [pc, #180]	; (80092a4 <SPI_CloseTx_ISR+0xc4>)
 80091ee:	0018      	movs	r0, r3
 80091f0:	f7f6 ff92 	bl	8000118 <__udivsi3>
 80091f4:	0003      	movs	r3, r0
 80091f6:	001a      	movs	r2, r3
 80091f8:	2364      	movs	r3, #100	; 0x64
 80091fa:	4353      	muls	r3, r2
 80091fc:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80091fe:	f7fc fe8d 	bl	8005f1c <HAL_GetTick>
 8009202:	0003      	movs	r3, r0
 8009204:	617b      	str	r3, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d106      	bne.n	800921a <SPI_CloseTx_ISR+0x3a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009210:	2220      	movs	r2, #32
 8009212:	431a      	orrs	r2, r3
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009218:	e008      	b.n	800922c <SPI_CloseTx_ISR+0x4c>
    }
    count--;
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	3b01      	subs	r3, #1
 800921e:	613b      	str	r3, [r7, #16]
  }
  while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	689b      	ldr	r3, [r3, #8]
 8009226:	2202      	movs	r2, #2
 8009228:	4013      	ands	r3, r2
 800922a:	d0ec      	beq.n	8009206 <SPI_CloseTx_ISR+0x26>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	685a      	ldr	r2, [r3, #4]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	21a0      	movs	r1, #160	; 0xa0
 8009238:	438a      	bics	r2, r1
 800923a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800923c:	697a      	ldr	r2, [r7, #20]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2164      	movs	r1, #100	; 0x64
 8009242:	0018      	movs	r0, r3
 8009244:	f7ff ff8e 	bl	8009164 <SPI_EndRxTxTransaction>
 8009248:	1e03      	subs	r3, r0, #0
 800924a:	d005      	beq.n	8009258 <SPI_CloseTx_ISR+0x78>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009250:	2220      	movs	r2, #32
 8009252:	431a      	orrs	r2, r3
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	689b      	ldr	r3, [r3, #8]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d10a      	bne.n	8009276 <SPI_CloseTx_ISR+0x96>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009260:	2300      	movs	r3, #0
 8009262:	60fb      	str	r3, [r7, #12]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	68db      	ldr	r3, [r3, #12]
 800926a:	60fb      	str	r3, [r7, #12]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	689b      	ldr	r3, [r3, #8]
 8009272:	60fb      	str	r3, [r7, #12]
 8009274:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2251      	movs	r2, #81	; 0x51
 800927a:	2101      	movs	r1, #1
 800927c:	5499      	strb	r1, [r3, r2]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009282:	2b00      	cmp	r3, #0
 8009284:	d004      	beq.n	8009290 <SPI_CloseTx_ISR+0xb0>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	0018      	movs	r0, r3
 800928a:	f7ff fe8b 	bl	8008fa4 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800928e:	e003      	b.n	8009298 <SPI_CloseTx_ISR+0xb8>
    HAL_SPI_TxCpltCallback(hspi);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	0018      	movs	r0, r3
 8009294:	f7f7 fec2 	bl	800101c <HAL_SPI_TxCpltCallback>
}
 8009298:	46c0      	nop			; (mov r8, r8)
 800929a:	46bd      	mov	sp, r7
 800929c:	b006      	add	sp, #24
 800929e:	bd80      	pop	{r7, pc}
 80092a0:	20000010 	.word	0x20000010
 80092a4:	00005dc0 	.word	0x00005dc0

080092a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d101      	bne.n	80092ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80092b6:	2301      	movs	r3, #1
 80092b8:	e01e      	b.n	80092f8 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2239      	movs	r2, #57	; 0x39
 80092be:	5c9b      	ldrb	r3, [r3, r2]
 80092c0:	b2db      	uxtb	r3, r3
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d107      	bne.n	80092d6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2238      	movs	r2, #56	; 0x38
 80092ca:	2100      	movs	r1, #0
 80092cc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	0018      	movs	r0, r3
 80092d2:	f7fa fb5f 	bl	8003994 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2239      	movs	r2, #57	; 0x39
 80092da:	2102      	movs	r1, #2
 80092dc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681a      	ldr	r2, [r3, #0]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	3304      	adds	r3, #4
 80092e6:	0019      	movs	r1, r3
 80092e8:	0010      	movs	r0, r2
 80092ea:	f000 fc91 	bl	8009c10 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2239      	movs	r2, #57	; 0x39
 80092f2:	2101      	movs	r1, #1
 80092f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80092f6:	2300      	movs	r3, #0
}
 80092f8:	0018      	movs	r0, r3
 80092fa:	46bd      	mov	sp, r7
 80092fc:	b002      	add	sp, #8
 80092fe:	bd80      	pop	{r7, pc}

08009300 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b084      	sub	sp, #16
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2239      	movs	r2, #57	; 0x39
 800930c:	2102      	movs	r1, #2
 800930e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	689b      	ldr	r3, [r3, #8]
 8009316:	2207      	movs	r2, #7
 8009318:	4013      	ands	r3, r2
 800931a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2b06      	cmp	r3, #6
 8009320:	d007      	beq.n	8009332 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	681a      	ldr	r2, [r3, #0]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	2101      	movs	r1, #1
 800932e:	430a      	orrs	r2, r1
 8009330:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2239      	movs	r2, #57	; 0x39
 8009336:	2101      	movs	r1, #1
 8009338:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800933a:	2300      	movs	r3, #0
}
 800933c:	0018      	movs	r0, r3
 800933e:	46bd      	mov	sp, r7
 8009340:	b004      	add	sp, #16
 8009342:	bd80      	pop	{r7, pc}

08009344 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b084      	sub	sp, #16
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	68da      	ldr	r2, [r3, #12]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	2101      	movs	r1, #1
 8009358:	430a      	orrs	r2, r1
 800935a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	689b      	ldr	r3, [r3, #8]
 8009362:	2207      	movs	r2, #7
 8009364:	4013      	ands	r3, r2
 8009366:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2b06      	cmp	r3, #6
 800936c:	d007      	beq.n	800937e <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	681a      	ldr	r2, [r3, #0]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	2101      	movs	r1, #1
 800937a:	430a      	orrs	r2, r1
 800937c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800937e:	2300      	movs	r3, #0
}
 8009380:	0018      	movs	r0, r3
 8009382:	46bd      	mov	sp, r7
 8009384:	b004      	add	sp, #16
 8009386:	bd80      	pop	{r7, pc}

08009388 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	68da      	ldr	r2, [r3, #12]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	2101      	movs	r1, #1
 800939c:	438a      	bics	r2, r1
 800939e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	6a1b      	ldr	r3, [r3, #32]
 80093a6:	4a08      	ldr	r2, [pc, #32]	; (80093c8 <HAL_TIM_Base_Stop_IT+0x40>)
 80093a8:	4013      	ands	r3, r2
 80093aa:	d107      	bne.n	80093bc <HAL_TIM_Base_Stop_IT+0x34>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	681a      	ldr	r2, [r3, #0]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	2101      	movs	r1, #1
 80093b8:	438a      	bics	r2, r1
 80093ba:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80093bc:	2300      	movs	r3, #0
}
 80093be:	0018      	movs	r0, r3
 80093c0:	46bd      	mov	sp, r7
 80093c2:	b002      	add	sp, #8
 80093c4:	bd80      	pop	{r7, pc}
 80093c6:	46c0      	nop			; (mov r8, r8)
 80093c8:	00001111 	.word	0x00001111

080093cc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b082      	sub	sp, #8
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d101      	bne.n	80093de <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80093da:	2301      	movs	r3, #1
 80093dc:	e01e      	b.n	800941c <HAL_TIM_OC_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2239      	movs	r2, #57	; 0x39
 80093e2:	5c9b      	ldrb	r3, [r3, r2]
 80093e4:	b2db      	uxtb	r3, r3
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d107      	bne.n	80093fa <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2238      	movs	r2, #56	; 0x38
 80093ee:	2100      	movs	r1, #0
 80093f0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	0018      	movs	r0, r3
 80093f6:	f000 f815 	bl	8009424 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2239      	movs	r2, #57	; 0x39
 80093fe:	2102      	movs	r1, #2
 8009400:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681a      	ldr	r2, [r3, #0]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	3304      	adds	r3, #4
 800940a:	0019      	movs	r1, r3
 800940c:	0010      	movs	r0, r2
 800940e:	f000 fbff 	bl	8009c10 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2239      	movs	r2, #57	; 0x39
 8009416:	2101      	movs	r1, #1
 8009418:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800941a:	2300      	movs	r3, #0
}
 800941c:	0018      	movs	r0, r3
 800941e:	46bd      	mov	sp, r7
 8009420:	b002      	add	sp, #8
 8009422:	bd80      	pop	{r7, pc}

08009424 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800942c:	46c0      	nop			; (mov r8, r8)
 800942e:	46bd      	mov	sp, r7
 8009430:	b002      	add	sp, #8
 8009432:	bd80      	pop	{r7, pc}

08009434 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b084      	sub	sp, #16
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	2b04      	cmp	r3, #4
 8009442:	d011      	beq.n	8009468 <HAL_TIM_OC_Start_IT+0x34>
 8009444:	d802      	bhi.n	800944c <HAL_TIM_OC_Start_IT+0x18>
 8009446:	2b00      	cmp	r3, #0
 8009448:	d005      	beq.n	8009456 <HAL_TIM_OC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
      break;
    }

    default:
      break;
 800944a:	e028      	b.n	800949e <HAL_TIM_OC_Start_IT+0x6a>
  switch (Channel)
 800944c:	2b08      	cmp	r3, #8
 800944e:	d014      	beq.n	800947a <HAL_TIM_OC_Start_IT+0x46>
 8009450:	2b0c      	cmp	r3, #12
 8009452:	d01b      	beq.n	800948c <HAL_TIM_OC_Start_IT+0x58>
      break;
 8009454:	e023      	b.n	800949e <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	68da      	ldr	r2, [r3, #12]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	2102      	movs	r1, #2
 8009462:	430a      	orrs	r2, r1
 8009464:	60da      	str	r2, [r3, #12]
      break;
 8009466:	e01a      	b.n	800949e <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	68da      	ldr	r2, [r3, #12]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	2104      	movs	r1, #4
 8009474:	430a      	orrs	r2, r1
 8009476:	60da      	str	r2, [r3, #12]
      break;
 8009478:	e011      	b.n	800949e <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	68da      	ldr	r2, [r3, #12]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	2108      	movs	r1, #8
 8009486:	430a      	orrs	r2, r1
 8009488:	60da      	str	r2, [r3, #12]
      break;
 800948a:	e008      	b.n	800949e <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	68da      	ldr	r2, [r3, #12]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	2110      	movs	r1, #16
 8009498:	430a      	orrs	r2, r1
 800949a:	60da      	str	r2, [r3, #12]
      break;
 800949c:	46c0      	nop			; (mov r8, r8)
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	6839      	ldr	r1, [r7, #0]
 80094a4:	2201      	movs	r2, #1
 80094a6:	0018      	movs	r0, r3
 80094a8:	f000 fdae 	bl	800a008 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	689b      	ldr	r3, [r3, #8]
 80094b2:	2207      	movs	r2, #7
 80094b4:	4013      	ands	r3, r2
 80094b6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	2b06      	cmp	r3, #6
 80094bc:	d007      	beq.n	80094ce <HAL_TIM_OC_Start_IT+0x9a>
  {
    __HAL_TIM_ENABLE(htim);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	681a      	ldr	r2, [r3, #0]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	2101      	movs	r1, #1
 80094ca:	430a      	orrs	r2, r1
 80094cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80094ce:	2300      	movs	r3, #0
}
 80094d0:	0018      	movs	r0, r3
 80094d2:	46bd      	mov	sp, r7
 80094d4:	b004      	add	sp, #16
 80094d6:	bd80      	pop	{r7, pc}

080094d8 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b082      	sub	sp, #8
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
 80094e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	2b04      	cmp	r3, #4
 80094e6:	d011      	beq.n	800950c <HAL_TIM_OC_Stop_IT+0x34>
 80094e8:	d802      	bhi.n	80094f0 <HAL_TIM_OC_Stop_IT+0x18>
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d005      	beq.n	80094fa <HAL_TIM_OC_Stop_IT+0x22>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
      break;
    }

    default:
      break;
 80094ee:	e028      	b.n	8009542 <HAL_TIM_OC_Stop_IT+0x6a>
  switch (Channel)
 80094f0:	2b08      	cmp	r3, #8
 80094f2:	d014      	beq.n	800951e <HAL_TIM_OC_Stop_IT+0x46>
 80094f4:	2b0c      	cmp	r3, #12
 80094f6:	d01b      	beq.n	8009530 <HAL_TIM_OC_Stop_IT+0x58>
      break;
 80094f8:	e023      	b.n	8009542 <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	68da      	ldr	r2, [r3, #12]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	2102      	movs	r1, #2
 8009506:	438a      	bics	r2, r1
 8009508:	60da      	str	r2, [r3, #12]
      break;
 800950a:	e01a      	b.n	8009542 <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	68da      	ldr	r2, [r3, #12]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	2104      	movs	r1, #4
 8009518:	438a      	bics	r2, r1
 800951a:	60da      	str	r2, [r3, #12]
      break;
 800951c:	e011      	b.n	8009542 <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	68da      	ldr	r2, [r3, #12]
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	2108      	movs	r1, #8
 800952a:	438a      	bics	r2, r1
 800952c:	60da      	str	r2, [r3, #12]
      break;
 800952e:	e008      	b.n	8009542 <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	68da      	ldr	r2, [r3, #12]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	2110      	movs	r1, #16
 800953c:	438a      	bics	r2, r1
 800953e:	60da      	str	r2, [r3, #12]
      break;
 8009540:	46c0      	nop			; (mov r8, r8)
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	6839      	ldr	r1, [r7, #0]
 8009548:	2200      	movs	r2, #0
 800954a:	0018      	movs	r0, r3
 800954c:	f000 fd5c 	bl	800a008 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	6a1b      	ldr	r3, [r3, #32]
 8009556:	4a08      	ldr	r2, [pc, #32]	; (8009578 <HAL_TIM_OC_Stop_IT+0xa0>)
 8009558:	4013      	ands	r3, r2
 800955a:	d107      	bne.n	800956c <HAL_TIM_OC_Stop_IT+0x94>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	681a      	ldr	r2, [r3, #0]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	2101      	movs	r1, #1
 8009568:	438a      	bics	r2, r1
 800956a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800956c:	2300      	movs	r3, #0
}
 800956e:	0018      	movs	r0, r3
 8009570:	46bd      	mov	sp, r7
 8009572:	b002      	add	sp, #8
 8009574:	bd80      	pop	{r7, pc}
 8009576:	46c0      	nop			; (mov r8, r8)
 8009578:	00001111 	.word	0x00001111

0800957c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b082      	sub	sp, #8
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d101      	bne.n	800958e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800958a:	2301      	movs	r3, #1
 800958c:	e01e      	b.n	80095cc <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2239      	movs	r2, #57	; 0x39
 8009592:	5c9b      	ldrb	r3, [r3, r2]
 8009594:	b2db      	uxtb	r3, r3
 8009596:	2b00      	cmp	r3, #0
 8009598:	d107      	bne.n	80095aa <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2238      	movs	r2, #56	; 0x38
 800959e:	2100      	movs	r1, #0
 80095a0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	0018      	movs	r0, r3
 80095a6:	f000 f815 	bl	80095d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2239      	movs	r2, #57	; 0x39
 80095ae:	2102      	movs	r1, #2
 80095b0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	3304      	adds	r3, #4
 80095ba:	0019      	movs	r1, r3
 80095bc:	0010      	movs	r0, r2
 80095be:	f000 fb27 	bl	8009c10 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2239      	movs	r2, #57	; 0x39
 80095c6:	2101      	movs	r1, #1
 80095c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80095ca:	2300      	movs	r3, #0
}
 80095cc:	0018      	movs	r0, r3
 80095ce:	46bd      	mov	sp, r7
 80095d0:	b002      	add	sp, #8
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b082      	sub	sp, #8
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80095dc:	46c0      	nop			; (mov r8, r8)
 80095de:	46bd      	mov	sp, r7
 80095e0:	b002      	add	sp, #8
 80095e2:	bd80      	pop	{r7, pc}

080095e4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b084      	sub	sp, #16
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	2b04      	cmp	r3, #4
 80095f2:	d011      	beq.n	8009618 <HAL_TIM_PWM_Start_IT+0x34>
 80095f4:	d802      	bhi.n	80095fc <HAL_TIM_PWM_Start_IT+0x18>
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d005      	beq.n	8009606 <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
      break;
    }

    default:
      break;
 80095fa:	e028      	b.n	800964e <HAL_TIM_PWM_Start_IT+0x6a>
  switch (Channel)
 80095fc:	2b08      	cmp	r3, #8
 80095fe:	d014      	beq.n	800962a <HAL_TIM_PWM_Start_IT+0x46>
 8009600:	2b0c      	cmp	r3, #12
 8009602:	d01b      	beq.n	800963c <HAL_TIM_PWM_Start_IT+0x58>
      break;
 8009604:	e023      	b.n	800964e <HAL_TIM_PWM_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	68da      	ldr	r2, [r3, #12]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	2102      	movs	r1, #2
 8009612:	430a      	orrs	r2, r1
 8009614:	60da      	str	r2, [r3, #12]
      break;
 8009616:	e01a      	b.n	800964e <HAL_TIM_PWM_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	68da      	ldr	r2, [r3, #12]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	2104      	movs	r1, #4
 8009624:	430a      	orrs	r2, r1
 8009626:	60da      	str	r2, [r3, #12]
      break;
 8009628:	e011      	b.n	800964e <HAL_TIM_PWM_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	68da      	ldr	r2, [r3, #12]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	2108      	movs	r1, #8
 8009636:	430a      	orrs	r2, r1
 8009638:	60da      	str	r2, [r3, #12]
      break;
 800963a:	e008      	b.n	800964e <HAL_TIM_PWM_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	68da      	ldr	r2, [r3, #12]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	2110      	movs	r1, #16
 8009648:	430a      	orrs	r2, r1
 800964a:	60da      	str	r2, [r3, #12]
      break;
 800964c:	46c0      	nop			; (mov r8, r8)
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	6839      	ldr	r1, [r7, #0]
 8009654:	2201      	movs	r2, #1
 8009656:	0018      	movs	r0, r3
 8009658:	f000 fcd6 	bl	800a008 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	689b      	ldr	r3, [r3, #8]
 8009662:	2207      	movs	r2, #7
 8009664:	4013      	ands	r3, r2
 8009666:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2b06      	cmp	r3, #6
 800966c:	d007      	beq.n	800967e <HAL_TIM_PWM_Start_IT+0x9a>
  {
    __HAL_TIM_ENABLE(htim);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	681a      	ldr	r2, [r3, #0]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	2101      	movs	r1, #1
 800967a:	430a      	orrs	r2, r1
 800967c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800967e:	2300      	movs	r3, #0
}
 8009680:	0018      	movs	r0, r3
 8009682:	46bd      	mov	sp, r7
 8009684:	b004      	add	sp, #16
 8009686:	bd80      	pop	{r7, pc}

08009688 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b082      	sub	sp, #8
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	691b      	ldr	r3, [r3, #16]
 8009696:	2202      	movs	r2, #2
 8009698:	4013      	ands	r3, r2
 800969a:	2b02      	cmp	r3, #2
 800969c:	d124      	bne.n	80096e8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	68db      	ldr	r3, [r3, #12]
 80096a4:	2202      	movs	r2, #2
 80096a6:	4013      	ands	r3, r2
 80096a8:	2b02      	cmp	r3, #2
 80096aa:	d11d      	bne.n	80096e8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	2203      	movs	r2, #3
 80096b2:	4252      	negs	r2, r2
 80096b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2201      	movs	r2, #1
 80096ba:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	699b      	ldr	r3, [r3, #24]
 80096c2:	2203      	movs	r2, #3
 80096c4:	4013      	ands	r3, r2
 80096c6:	d004      	beq.n	80096d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	0018      	movs	r0, r3
 80096cc:	f000 fa88 	bl	8009be0 <HAL_TIM_IC_CaptureCallback>
 80096d0:	e007      	b.n	80096e2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	0018      	movs	r0, r3
 80096d6:	f7fa fb69 	bl	8003dac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	0018      	movs	r0, r3
 80096de:	f000 fa87 	bl	8009bf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2200      	movs	r2, #0
 80096e6:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	691b      	ldr	r3, [r3, #16]
 80096ee:	2204      	movs	r2, #4
 80096f0:	4013      	ands	r3, r2
 80096f2:	2b04      	cmp	r3, #4
 80096f4:	d125      	bne.n	8009742 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	68db      	ldr	r3, [r3, #12]
 80096fc:	2204      	movs	r2, #4
 80096fe:	4013      	ands	r3, r2
 8009700:	2b04      	cmp	r3, #4
 8009702:	d11e      	bne.n	8009742 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	2205      	movs	r2, #5
 800970a:	4252      	negs	r2, r2
 800970c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2202      	movs	r2, #2
 8009712:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	699a      	ldr	r2, [r3, #24]
 800971a:	23c0      	movs	r3, #192	; 0xc0
 800971c:	009b      	lsls	r3, r3, #2
 800971e:	4013      	ands	r3, r2
 8009720:	d004      	beq.n	800972c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	0018      	movs	r0, r3
 8009726:	f000 fa5b 	bl	8009be0 <HAL_TIM_IC_CaptureCallback>
 800972a:	e007      	b.n	800973c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	0018      	movs	r0, r3
 8009730:	f7fa fb3c 	bl	8003dac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	0018      	movs	r0, r3
 8009738:	f000 fa5a 	bl	8009bf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2200      	movs	r2, #0
 8009740:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	691b      	ldr	r3, [r3, #16]
 8009748:	2208      	movs	r2, #8
 800974a:	4013      	ands	r3, r2
 800974c:	2b08      	cmp	r3, #8
 800974e:	d124      	bne.n	800979a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	68db      	ldr	r3, [r3, #12]
 8009756:	2208      	movs	r2, #8
 8009758:	4013      	ands	r3, r2
 800975a:	2b08      	cmp	r3, #8
 800975c:	d11d      	bne.n	800979a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	2209      	movs	r2, #9
 8009764:	4252      	negs	r2, r2
 8009766:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2204      	movs	r2, #4
 800976c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	69db      	ldr	r3, [r3, #28]
 8009774:	2203      	movs	r2, #3
 8009776:	4013      	ands	r3, r2
 8009778:	d004      	beq.n	8009784 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	0018      	movs	r0, r3
 800977e:	f000 fa2f 	bl	8009be0 <HAL_TIM_IC_CaptureCallback>
 8009782:	e007      	b.n	8009794 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	0018      	movs	r0, r3
 8009788:	f7fa fb10 	bl	8003dac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	0018      	movs	r0, r3
 8009790:	f000 fa2e 	bl	8009bf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2200      	movs	r2, #0
 8009798:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	691b      	ldr	r3, [r3, #16]
 80097a0:	2210      	movs	r2, #16
 80097a2:	4013      	ands	r3, r2
 80097a4:	2b10      	cmp	r3, #16
 80097a6:	d125      	bne.n	80097f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	68db      	ldr	r3, [r3, #12]
 80097ae:	2210      	movs	r2, #16
 80097b0:	4013      	ands	r3, r2
 80097b2:	2b10      	cmp	r3, #16
 80097b4:	d11e      	bne.n	80097f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	2211      	movs	r2, #17
 80097bc:	4252      	negs	r2, r2
 80097be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2208      	movs	r2, #8
 80097c4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	69da      	ldr	r2, [r3, #28]
 80097cc:	23c0      	movs	r3, #192	; 0xc0
 80097ce:	009b      	lsls	r3, r3, #2
 80097d0:	4013      	ands	r3, r2
 80097d2:	d004      	beq.n	80097de <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	0018      	movs	r0, r3
 80097d8:	f000 fa02 	bl	8009be0 <HAL_TIM_IC_CaptureCallback>
 80097dc:	e007      	b.n	80097ee <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	0018      	movs	r0, r3
 80097e2:	f7fa fae3 	bl	8003dac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	0018      	movs	r0, r3
 80097ea:	f000 fa01 	bl	8009bf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2200      	movs	r2, #0
 80097f2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	691b      	ldr	r3, [r3, #16]
 80097fa:	2201      	movs	r2, #1
 80097fc:	4013      	ands	r3, r2
 80097fe:	2b01      	cmp	r3, #1
 8009800:	d10f      	bne.n	8009822 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	68db      	ldr	r3, [r3, #12]
 8009808:	2201      	movs	r2, #1
 800980a:	4013      	ands	r3, r2
 800980c:	2b01      	cmp	r3, #1
 800980e:	d108      	bne.n	8009822 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	2202      	movs	r2, #2
 8009816:	4252      	negs	r2, r2
 8009818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	0018      	movs	r0, r3
 800981e:	f7fa fa89 	bl	8003d34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	691b      	ldr	r3, [r3, #16]
 8009828:	2240      	movs	r2, #64	; 0x40
 800982a:	4013      	ands	r3, r2
 800982c:	2b40      	cmp	r3, #64	; 0x40
 800982e:	d10f      	bne.n	8009850 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	68db      	ldr	r3, [r3, #12]
 8009836:	2240      	movs	r2, #64	; 0x40
 8009838:	4013      	ands	r3, r2
 800983a:	2b40      	cmp	r3, #64	; 0x40
 800983c:	d108      	bne.n	8009850 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	2241      	movs	r2, #65	; 0x41
 8009844:	4252      	negs	r2, r2
 8009846:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	0018      	movs	r0, r3
 800984c:	f000 f9d8 	bl	8009c00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009850:	46c0      	nop			; (mov r8, r8)
 8009852:	46bd      	mov	sp, r7
 8009854:	b002      	add	sp, #8
 8009856:	bd80      	pop	{r7, pc}

08009858 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b084      	sub	sp, #16
 800985c:	af00      	add	r7, sp, #0
 800985e:	60f8      	str	r0, [r7, #12]
 8009860:	60b9      	str	r1, [r7, #8]
 8009862:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	2238      	movs	r2, #56	; 0x38
 8009868:	5c9b      	ldrb	r3, [r3, r2]
 800986a:	2b01      	cmp	r3, #1
 800986c:	d101      	bne.n	8009872 <HAL_TIM_OC_ConfigChannel+0x1a>
 800986e:	2302      	movs	r3, #2
 8009870:	e03c      	b.n	80098ec <HAL_TIM_OC_ConfigChannel+0x94>
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	2238      	movs	r2, #56	; 0x38
 8009876:	2101      	movs	r1, #1
 8009878:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	2239      	movs	r2, #57	; 0x39
 800987e:	2102      	movs	r1, #2
 8009880:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2b04      	cmp	r3, #4
 8009886:	d010      	beq.n	80098aa <HAL_TIM_OC_ConfigChannel+0x52>
 8009888:	d802      	bhi.n	8009890 <HAL_TIM_OC_ConfigChannel+0x38>
 800988a:	2b00      	cmp	r3, #0
 800988c:	d005      	beq.n	800989a <HAL_TIM_OC_ConfigChannel+0x42>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      break;
    }

    default:
      break;
 800988e:	e024      	b.n	80098da <HAL_TIM_OC_ConfigChannel+0x82>
  switch (Channel)
 8009890:	2b08      	cmp	r3, #8
 8009892:	d012      	beq.n	80098ba <HAL_TIM_OC_ConfigChannel+0x62>
 8009894:	2b0c      	cmp	r3, #12
 8009896:	d018      	beq.n	80098ca <HAL_TIM_OC_ConfigChannel+0x72>
      break;
 8009898:	e01f      	b.n	80098da <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	68ba      	ldr	r2, [r7, #8]
 80098a0:	0011      	movs	r1, r2
 80098a2:	0018      	movs	r0, r3
 80098a4:	f000 fa12 	bl	8009ccc <TIM_OC1_SetConfig>
      break;
 80098a8:	e017      	b.n	80098da <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	68ba      	ldr	r2, [r7, #8]
 80098b0:	0011      	movs	r1, r2
 80098b2:	0018      	movs	r0, r3
 80098b4:	f000 fa46 	bl	8009d44 <TIM_OC2_SetConfig>
      break;
 80098b8:	e00f      	b.n	80098da <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	68ba      	ldr	r2, [r7, #8]
 80098c0:	0011      	movs	r1, r2
 80098c2:	0018      	movs	r0, r3
 80098c4:	f000 fa80 	bl	8009dc8 <TIM_OC3_SetConfig>
      break;
 80098c8:	e007      	b.n	80098da <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	68ba      	ldr	r2, [r7, #8]
 80098d0:	0011      	movs	r1, r2
 80098d2:	0018      	movs	r0, r3
 80098d4:	f000 fab8 	bl	8009e48 <TIM_OC4_SetConfig>
      break;
 80098d8:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	2239      	movs	r2, #57	; 0x39
 80098de:	2101      	movs	r1, #1
 80098e0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	2238      	movs	r2, #56	; 0x38
 80098e6:	2100      	movs	r1, #0
 80098e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80098ea:	2300      	movs	r3, #0
}
 80098ec:	0018      	movs	r0, r3
 80098ee:	46bd      	mov	sp, r7
 80098f0:	b004      	add	sp, #16
 80098f2:	bd80      	pop	{r7, pc}

080098f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	60f8      	str	r0, [r7, #12]
 80098fc:	60b9      	str	r1, [r7, #8]
 80098fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2238      	movs	r2, #56	; 0x38
 8009904:	5c9b      	ldrb	r3, [r3, r2]
 8009906:	2b01      	cmp	r3, #1
 8009908:	d101      	bne.n	800990e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800990a:	2302      	movs	r3, #2
 800990c:	e0a4      	b.n	8009a58 <HAL_TIM_PWM_ConfigChannel+0x164>
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2238      	movs	r2, #56	; 0x38
 8009912:	2101      	movs	r1, #1
 8009914:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	2239      	movs	r2, #57	; 0x39
 800991a:	2102      	movs	r1, #2
 800991c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2b04      	cmp	r3, #4
 8009922:	d029      	beq.n	8009978 <HAL_TIM_PWM_ConfigChannel+0x84>
 8009924:	d802      	bhi.n	800992c <HAL_TIM_PWM_ConfigChannel+0x38>
 8009926:	2b00      	cmp	r3, #0
 8009928:	d005      	beq.n	8009936 <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 800992a:	e08c      	b.n	8009a46 <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 800992c:	2b08      	cmp	r3, #8
 800992e:	d046      	beq.n	80099be <HAL_TIM_PWM_ConfigChannel+0xca>
 8009930:	2b0c      	cmp	r3, #12
 8009932:	d065      	beq.n	8009a00 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 8009934:	e087      	b.n	8009a46 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	68ba      	ldr	r2, [r7, #8]
 800993c:	0011      	movs	r1, r2
 800993e:	0018      	movs	r0, r3
 8009940:	f000 f9c4 	bl	8009ccc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	699a      	ldr	r2, [r3, #24]
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	2108      	movs	r1, #8
 8009950:	430a      	orrs	r2, r1
 8009952:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	699a      	ldr	r2, [r3, #24]
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	2104      	movs	r1, #4
 8009960:	438a      	bics	r2, r1
 8009962:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	6999      	ldr	r1, [r3, #24]
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	68da      	ldr	r2, [r3, #12]
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	430a      	orrs	r2, r1
 8009974:	619a      	str	r2, [r3, #24]
      break;
 8009976:	e066      	b.n	8009a46 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	68ba      	ldr	r2, [r7, #8]
 800997e:	0011      	movs	r1, r2
 8009980:	0018      	movs	r0, r3
 8009982:	f000 f9df 	bl	8009d44 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	699a      	ldr	r2, [r3, #24]
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	2180      	movs	r1, #128	; 0x80
 8009992:	0109      	lsls	r1, r1, #4
 8009994:	430a      	orrs	r2, r1
 8009996:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	699a      	ldr	r2, [r3, #24]
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	492f      	ldr	r1, [pc, #188]	; (8009a60 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 80099a4:	400a      	ands	r2, r1
 80099a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	6999      	ldr	r1, [r3, #24]
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	68db      	ldr	r3, [r3, #12]
 80099b2:	021a      	lsls	r2, r3, #8
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	430a      	orrs	r2, r1
 80099ba:	619a      	str	r2, [r3, #24]
      break;
 80099bc:	e043      	b.n	8009a46 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	68ba      	ldr	r2, [r7, #8]
 80099c4:	0011      	movs	r1, r2
 80099c6:	0018      	movs	r0, r3
 80099c8:	f000 f9fe 	bl	8009dc8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	69da      	ldr	r2, [r3, #28]
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	2108      	movs	r1, #8
 80099d8:	430a      	orrs	r2, r1
 80099da:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	69da      	ldr	r2, [r3, #28]
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	2104      	movs	r1, #4
 80099e8:	438a      	bics	r2, r1
 80099ea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	69d9      	ldr	r1, [r3, #28]
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	68da      	ldr	r2, [r3, #12]
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	430a      	orrs	r2, r1
 80099fc:	61da      	str	r2, [r3, #28]
      break;
 80099fe:	e022      	b.n	8009a46 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	68ba      	ldr	r2, [r7, #8]
 8009a06:	0011      	movs	r1, r2
 8009a08:	0018      	movs	r0, r3
 8009a0a:	f000 fa1d 	bl	8009e48 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	69da      	ldr	r2, [r3, #28]
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	2180      	movs	r1, #128	; 0x80
 8009a1a:	0109      	lsls	r1, r1, #4
 8009a1c:	430a      	orrs	r2, r1
 8009a1e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	69da      	ldr	r2, [r3, #28]
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	490d      	ldr	r1, [pc, #52]	; (8009a60 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8009a2c:	400a      	ands	r2, r1
 8009a2e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	69d9      	ldr	r1, [r3, #28]
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	68db      	ldr	r3, [r3, #12]
 8009a3a:	021a      	lsls	r2, r3, #8
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	430a      	orrs	r2, r1
 8009a42:	61da      	str	r2, [r3, #28]
      break;
 8009a44:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	2239      	movs	r2, #57	; 0x39
 8009a4a:	2101      	movs	r1, #1
 8009a4c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2238      	movs	r2, #56	; 0x38
 8009a52:	2100      	movs	r1, #0
 8009a54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009a56:	2300      	movs	r3, #0
}
 8009a58:	0018      	movs	r0, r3
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	b004      	add	sp, #16
 8009a5e:	bd80      	pop	{r7, pc}
 8009a60:	fffffbff 	.word	0xfffffbff

08009a64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b084      	sub	sp, #16
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2238      	movs	r2, #56	; 0x38
 8009a72:	5c9b      	ldrb	r3, [r3, r2]
 8009a74:	2b01      	cmp	r3, #1
 8009a76:	d101      	bne.n	8009a7c <HAL_TIM_ConfigClockSource+0x18>
 8009a78:	2302      	movs	r3, #2
 8009a7a:	e0ab      	b.n	8009bd4 <HAL_TIM_ConfigClockSource+0x170>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2238      	movs	r2, #56	; 0x38
 8009a80:	2101      	movs	r1, #1
 8009a82:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2239      	movs	r2, #57	; 0x39
 8009a88:	2102      	movs	r1, #2
 8009a8a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	689b      	ldr	r3, [r3, #8]
 8009a92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2277      	movs	r2, #119	; 0x77
 8009a98:	4393      	bics	r3, r2
 8009a9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	4a4f      	ldr	r2, [pc, #316]	; (8009bdc <HAL_TIM_ConfigClockSource+0x178>)
 8009aa0:	4013      	ands	r3, r2
 8009aa2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	68fa      	ldr	r2, [r7, #12]
 8009aaa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	2b40      	cmp	r3, #64	; 0x40
 8009ab2:	d100      	bne.n	8009ab6 <HAL_TIM_ConfigClockSource+0x52>
 8009ab4:	e06b      	b.n	8009b8e <HAL_TIM_ConfigClockSource+0x12a>
 8009ab6:	d80e      	bhi.n	8009ad6 <HAL_TIM_ConfigClockSource+0x72>
 8009ab8:	2b10      	cmp	r3, #16
 8009aba:	d100      	bne.n	8009abe <HAL_TIM_ConfigClockSource+0x5a>
 8009abc:	e077      	b.n	8009bae <HAL_TIM_ConfigClockSource+0x14a>
 8009abe:	d803      	bhi.n	8009ac8 <HAL_TIM_ConfigClockSource+0x64>
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d100      	bne.n	8009ac6 <HAL_TIM_ConfigClockSource+0x62>
 8009ac4:	e073      	b.n	8009bae <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009ac6:	e07c      	b.n	8009bc2 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8009ac8:	2b20      	cmp	r3, #32
 8009aca:	d100      	bne.n	8009ace <HAL_TIM_ConfigClockSource+0x6a>
 8009acc:	e06f      	b.n	8009bae <HAL_TIM_ConfigClockSource+0x14a>
 8009ace:	2b30      	cmp	r3, #48	; 0x30
 8009ad0:	d100      	bne.n	8009ad4 <HAL_TIM_ConfigClockSource+0x70>
 8009ad2:	e06c      	b.n	8009bae <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8009ad4:	e075      	b.n	8009bc2 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8009ad6:	2b70      	cmp	r3, #112	; 0x70
 8009ad8:	d00e      	beq.n	8009af8 <HAL_TIM_ConfigClockSource+0x94>
 8009ada:	d804      	bhi.n	8009ae6 <HAL_TIM_ConfigClockSource+0x82>
 8009adc:	2b50      	cmp	r3, #80	; 0x50
 8009ade:	d036      	beq.n	8009b4e <HAL_TIM_ConfigClockSource+0xea>
 8009ae0:	2b60      	cmp	r3, #96	; 0x60
 8009ae2:	d044      	beq.n	8009b6e <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8009ae4:	e06d      	b.n	8009bc2 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8009ae6:	2280      	movs	r2, #128	; 0x80
 8009ae8:	0152      	lsls	r2, r2, #5
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d068      	beq.n	8009bc0 <HAL_TIM_ConfigClockSource+0x15c>
 8009aee:	2280      	movs	r2, #128	; 0x80
 8009af0:	0192      	lsls	r2, r2, #6
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d017      	beq.n	8009b26 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8009af6:	e064      	b.n	8009bc2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6818      	ldr	r0, [r3, #0]
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	6899      	ldr	r1, [r3, #8]
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	685a      	ldr	r2, [r3, #4]
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	68db      	ldr	r3, [r3, #12]
 8009b08:	f000 fa5e 	bl	8009fc8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	689b      	ldr	r3, [r3, #8]
 8009b12:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	2277      	movs	r2, #119	; 0x77
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	68fa      	ldr	r2, [r7, #12]
 8009b22:	609a      	str	r2, [r3, #8]
      break;
 8009b24:	e04d      	b.n	8009bc2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6818      	ldr	r0, [r3, #0]
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	6899      	ldr	r1, [r3, #8]
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	685a      	ldr	r2, [r3, #4]
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	68db      	ldr	r3, [r3, #12]
 8009b36:	f000 fa47 	bl	8009fc8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	689a      	ldr	r2, [r3, #8]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	2180      	movs	r1, #128	; 0x80
 8009b46:	01c9      	lsls	r1, r1, #7
 8009b48:	430a      	orrs	r2, r1
 8009b4a:	609a      	str	r2, [r3, #8]
      break;
 8009b4c:	e039      	b.n	8009bc2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6818      	ldr	r0, [r3, #0]
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	6859      	ldr	r1, [r3, #4]
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	68db      	ldr	r3, [r3, #12]
 8009b5a:	001a      	movs	r2, r3
 8009b5c:	f000 f9ba 	bl	8009ed4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	2150      	movs	r1, #80	; 0x50
 8009b66:	0018      	movs	r0, r3
 8009b68:	f000 fa14 	bl	8009f94 <TIM_ITRx_SetConfig>
      break;
 8009b6c:	e029      	b.n	8009bc2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6818      	ldr	r0, [r3, #0]
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	6859      	ldr	r1, [r3, #4]
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	68db      	ldr	r3, [r3, #12]
 8009b7a:	001a      	movs	r2, r3
 8009b7c:	f000 f9d8 	bl	8009f30 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	2160      	movs	r1, #96	; 0x60
 8009b86:	0018      	movs	r0, r3
 8009b88:	f000 fa04 	bl	8009f94 <TIM_ITRx_SetConfig>
      break;
 8009b8c:	e019      	b.n	8009bc2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6818      	ldr	r0, [r3, #0]
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	6859      	ldr	r1, [r3, #4]
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	68db      	ldr	r3, [r3, #12]
 8009b9a:	001a      	movs	r2, r3
 8009b9c:	f000 f99a 	bl	8009ed4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	2140      	movs	r1, #64	; 0x40
 8009ba6:	0018      	movs	r0, r3
 8009ba8:	f000 f9f4 	bl	8009f94 <TIM_ITRx_SetConfig>
      break;
 8009bac:	e009      	b.n	8009bc2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681a      	ldr	r2, [r3, #0]
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	0019      	movs	r1, r3
 8009bb8:	0010      	movs	r0, r2
 8009bba:	f000 f9eb 	bl	8009f94 <TIM_ITRx_SetConfig>
      break;
 8009bbe:	e000      	b.n	8009bc2 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8009bc0:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2239      	movs	r2, #57	; 0x39
 8009bc6:	2101      	movs	r1, #1
 8009bc8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2238      	movs	r2, #56	; 0x38
 8009bce:	2100      	movs	r1, #0
 8009bd0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009bd2:	2300      	movs	r3, #0
}
 8009bd4:	0018      	movs	r0, r3
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	b004      	add	sp, #16
 8009bda:	bd80      	pop	{r7, pc}
 8009bdc:	ffff00ff 	.word	0xffff00ff

08009be0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b082      	sub	sp, #8
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009be8:	46c0      	nop			; (mov r8, r8)
 8009bea:	46bd      	mov	sp, r7
 8009bec:	b002      	add	sp, #8
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009bf8:	46c0      	nop			; (mov r8, r8)
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	b002      	add	sp, #8
 8009bfe:	bd80      	pop	{r7, pc}

08009c00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b082      	sub	sp, #8
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009c08:	46c0      	nop			; (mov r8, r8)
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	b002      	add	sp, #8
 8009c0e:	bd80      	pop	{r7, pc}

08009c10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b084      	sub	sp, #16
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c20:	687a      	ldr	r2, [r7, #4]
 8009c22:	2380      	movs	r3, #128	; 0x80
 8009c24:	05db      	lsls	r3, r3, #23
 8009c26:	429a      	cmp	r2, r3
 8009c28:	d00b      	beq.n	8009c42 <TIM_Base_SetConfig+0x32>
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	4a23      	ldr	r2, [pc, #140]	; (8009cbc <TIM_Base_SetConfig+0xac>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d007      	beq.n	8009c42 <TIM_Base_SetConfig+0x32>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	4a22      	ldr	r2, [pc, #136]	; (8009cc0 <TIM_Base_SetConfig+0xb0>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d003      	beq.n	8009c42 <TIM_Base_SetConfig+0x32>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	4a21      	ldr	r2, [pc, #132]	; (8009cc4 <TIM_Base_SetConfig+0xb4>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d108      	bne.n	8009c54 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	2270      	movs	r2, #112	; 0x70
 8009c46:	4393      	bics	r3, r2
 8009c48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	685b      	ldr	r3, [r3, #4]
 8009c4e:	68fa      	ldr	r2, [r7, #12]
 8009c50:	4313      	orrs	r3, r2
 8009c52:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c54:	687a      	ldr	r2, [r7, #4]
 8009c56:	2380      	movs	r3, #128	; 0x80
 8009c58:	05db      	lsls	r3, r3, #23
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d00b      	beq.n	8009c76 <TIM_Base_SetConfig+0x66>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	4a16      	ldr	r2, [pc, #88]	; (8009cbc <TIM_Base_SetConfig+0xac>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d007      	beq.n	8009c76 <TIM_Base_SetConfig+0x66>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	4a15      	ldr	r2, [pc, #84]	; (8009cc0 <TIM_Base_SetConfig+0xb0>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d003      	beq.n	8009c76 <TIM_Base_SetConfig+0x66>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	4a14      	ldr	r2, [pc, #80]	; (8009cc4 <TIM_Base_SetConfig+0xb4>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d108      	bne.n	8009c88 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	4a13      	ldr	r2, [pc, #76]	; (8009cc8 <TIM_Base_SetConfig+0xb8>)
 8009c7a:	4013      	ands	r3, r2
 8009c7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	68db      	ldr	r3, [r3, #12]
 8009c82:	68fa      	ldr	r2, [r7, #12]
 8009c84:	4313      	orrs	r3, r2
 8009c86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2280      	movs	r2, #128	; 0x80
 8009c8c:	4393      	bics	r3, r2
 8009c8e:	001a      	movs	r2, r3
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	691b      	ldr	r3, [r3, #16]
 8009c94:	4313      	orrs	r3, r2
 8009c96:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	68fa      	ldr	r2, [r7, #12]
 8009c9c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	689a      	ldr	r2, [r3, #8]
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	681a      	ldr	r2, [r3, #0]
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	615a      	str	r2, [r3, #20]
}
 8009cb4:	46c0      	nop			; (mov r8, r8)
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	b004      	add	sp, #16
 8009cba:	bd80      	pop	{r7, pc}
 8009cbc:	40000400 	.word	0x40000400
 8009cc0:	40010800 	.word	0x40010800
 8009cc4:	40011400 	.word	0x40011400
 8009cc8:	fffffcff 	.word	0xfffffcff

08009ccc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b086      	sub	sp, #24
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6a1b      	ldr	r3, [r3, #32]
 8009cda:	2201      	movs	r2, #1
 8009cdc:	4393      	bics	r3, r2
 8009cde:	001a      	movs	r2, r3
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6a1b      	ldr	r3, [r3, #32]
 8009ce8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	699b      	ldr	r3, [r3, #24]
 8009cf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2270      	movs	r2, #112	; 0x70
 8009cfa:	4393      	bics	r3, r2
 8009cfc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	2203      	movs	r2, #3
 8009d02:	4393      	bics	r3, r2
 8009d04:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	68fa      	ldr	r2, [r7, #12]
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	2202      	movs	r2, #2
 8009d14:	4393      	bics	r3, r2
 8009d16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	689b      	ldr	r3, [r3, #8]
 8009d1c:	697a      	ldr	r2, [r7, #20]
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	693a      	ldr	r2, [r7, #16]
 8009d26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	68fa      	ldr	r2, [r7, #12]
 8009d2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	685a      	ldr	r2, [r3, #4]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	697a      	ldr	r2, [r7, #20]
 8009d3a:	621a      	str	r2, [r3, #32]
}
 8009d3c:	46c0      	nop			; (mov r8, r8)
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	b006      	add	sp, #24
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b086      	sub	sp, #24
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6a1b      	ldr	r3, [r3, #32]
 8009d52:	2210      	movs	r2, #16
 8009d54:	4393      	bics	r3, r2
 8009d56:	001a      	movs	r2, r3
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6a1b      	ldr	r3, [r3, #32]
 8009d60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	699b      	ldr	r3, [r3, #24]
 8009d6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	4a13      	ldr	r2, [pc, #76]	; (8009dc0 <TIM_OC2_SetConfig+0x7c>)
 8009d72:	4013      	ands	r3, r2
 8009d74:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	4a12      	ldr	r2, [pc, #72]	; (8009dc4 <TIM_OC2_SetConfig+0x80>)
 8009d7a:	4013      	ands	r3, r2
 8009d7c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	021b      	lsls	r3, r3, #8
 8009d84:	68fa      	ldr	r2, [r7, #12]
 8009d86:	4313      	orrs	r3, r2
 8009d88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	2220      	movs	r2, #32
 8009d8e:	4393      	bics	r3, r2
 8009d90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	689b      	ldr	r3, [r3, #8]
 8009d96:	011b      	lsls	r3, r3, #4
 8009d98:	697a      	ldr	r2, [r7, #20]
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	693a      	ldr	r2, [r7, #16]
 8009da2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	68fa      	ldr	r2, [r7, #12]
 8009da8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	685a      	ldr	r2, [r3, #4]
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	697a      	ldr	r2, [r7, #20]
 8009db6:	621a      	str	r2, [r3, #32]
}
 8009db8:	46c0      	nop			; (mov r8, r8)
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	b006      	add	sp, #24
 8009dbe:	bd80      	pop	{r7, pc}
 8009dc0:	ffff8fff 	.word	0xffff8fff
 8009dc4:	fffffcff 	.word	0xfffffcff

08009dc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b086      	sub	sp, #24
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6a1b      	ldr	r3, [r3, #32]
 8009dd6:	4a1a      	ldr	r2, [pc, #104]	; (8009e40 <TIM_OC3_SetConfig+0x78>)
 8009dd8:	401a      	ands	r2, r3
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6a1b      	ldr	r3, [r3, #32]
 8009de2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	685b      	ldr	r3, [r3, #4]
 8009de8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	69db      	ldr	r3, [r3, #28]
 8009dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	2270      	movs	r2, #112	; 0x70
 8009df4:	4393      	bics	r3, r2
 8009df6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2203      	movs	r2, #3
 8009dfc:	4393      	bics	r3, r2
 8009dfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	68fa      	ldr	r2, [r7, #12]
 8009e06:	4313      	orrs	r3, r2
 8009e08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	4a0d      	ldr	r2, [pc, #52]	; (8009e44 <TIM_OC3_SetConfig+0x7c>)
 8009e0e:	4013      	ands	r3, r2
 8009e10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	689b      	ldr	r3, [r3, #8]
 8009e16:	021b      	lsls	r3, r3, #8
 8009e18:	697a      	ldr	r2, [r7, #20]
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	693a      	ldr	r2, [r7, #16]
 8009e22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	68fa      	ldr	r2, [r7, #12]
 8009e28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	685a      	ldr	r2, [r3, #4]
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	697a      	ldr	r2, [r7, #20]
 8009e36:	621a      	str	r2, [r3, #32]
}
 8009e38:	46c0      	nop			; (mov r8, r8)
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	b006      	add	sp, #24
 8009e3e:	bd80      	pop	{r7, pc}
 8009e40:	fffffeff 	.word	0xfffffeff
 8009e44:	fffffdff 	.word	0xfffffdff

08009e48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b086      	sub	sp, #24
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
 8009e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6a1b      	ldr	r3, [r3, #32]
 8009e56:	4a1b      	ldr	r2, [pc, #108]	; (8009ec4 <TIM_OC4_SetConfig+0x7c>)
 8009e58:	401a      	ands	r2, r3
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6a1b      	ldr	r3, [r3, #32]
 8009e62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	69db      	ldr	r3, [r3, #28]
 8009e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	4a15      	ldr	r2, [pc, #84]	; (8009ec8 <TIM_OC4_SetConfig+0x80>)
 8009e74:	4013      	ands	r3, r2
 8009e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	4a14      	ldr	r2, [pc, #80]	; (8009ecc <TIM_OC4_SetConfig+0x84>)
 8009e7c:	4013      	ands	r3, r2
 8009e7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	021b      	lsls	r3, r3, #8
 8009e86:	68fa      	ldr	r2, [r7, #12]
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009e8c:	697b      	ldr	r3, [r7, #20]
 8009e8e:	4a10      	ldr	r2, [pc, #64]	; (8009ed0 <TIM_OC4_SetConfig+0x88>)
 8009e90:	4013      	ands	r3, r2
 8009e92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	689b      	ldr	r3, [r3, #8]
 8009e98:	031b      	lsls	r3, r3, #12
 8009e9a:	697a      	ldr	r2, [r7, #20]
 8009e9c:	4313      	orrs	r3, r2
 8009e9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	693a      	ldr	r2, [r7, #16]
 8009ea4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	68fa      	ldr	r2, [r7, #12]
 8009eaa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	685a      	ldr	r2, [r3, #4]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	697a      	ldr	r2, [r7, #20]
 8009eb8:	621a      	str	r2, [r3, #32]
}
 8009eba:	46c0      	nop			; (mov r8, r8)
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	b006      	add	sp, #24
 8009ec0:	bd80      	pop	{r7, pc}
 8009ec2:	46c0      	nop			; (mov r8, r8)
 8009ec4:	ffffefff 	.word	0xffffefff
 8009ec8:	ffff8fff 	.word	0xffff8fff
 8009ecc:	fffffcff 	.word	0xfffffcff
 8009ed0:	ffffdfff 	.word	0xffffdfff

08009ed4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b086      	sub	sp, #24
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	60f8      	str	r0, [r7, #12]
 8009edc:	60b9      	str	r1, [r7, #8]
 8009ede:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	6a1b      	ldr	r3, [r3, #32]
 8009ee4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	6a1b      	ldr	r3, [r3, #32]
 8009eea:	2201      	movs	r2, #1
 8009eec:	4393      	bics	r3, r2
 8009eee:	001a      	movs	r2, r3
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	699b      	ldr	r3, [r3, #24]
 8009ef8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	22f0      	movs	r2, #240	; 0xf0
 8009efe:	4393      	bics	r3, r2
 8009f00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	011b      	lsls	r3, r3, #4
 8009f06:	693a      	ldr	r2, [r7, #16]
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	220a      	movs	r2, #10
 8009f10:	4393      	bics	r3, r2
 8009f12:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009f14:	697a      	ldr	r2, [r7, #20]
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	693a      	ldr	r2, [r7, #16]
 8009f20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	697a      	ldr	r2, [r7, #20]
 8009f26:	621a      	str	r2, [r3, #32]
}
 8009f28:	46c0      	nop			; (mov r8, r8)
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	b006      	add	sp, #24
 8009f2e:	bd80      	pop	{r7, pc}

08009f30 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b086      	sub	sp, #24
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	60f8      	str	r0, [r7, #12]
 8009f38:	60b9      	str	r1, [r7, #8]
 8009f3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	6a1b      	ldr	r3, [r3, #32]
 8009f40:	2210      	movs	r2, #16
 8009f42:	4393      	bics	r3, r2
 8009f44:	001a      	movs	r2, r3
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	699b      	ldr	r3, [r3, #24]
 8009f4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	6a1b      	ldr	r3, [r3, #32]
 8009f54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	4a0d      	ldr	r2, [pc, #52]	; (8009f90 <TIM_TI2_ConfigInputStage+0x60>)
 8009f5a:	4013      	ands	r3, r2
 8009f5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	031b      	lsls	r3, r3, #12
 8009f62:	697a      	ldr	r2, [r7, #20]
 8009f64:	4313      	orrs	r3, r2
 8009f66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	22a0      	movs	r2, #160	; 0xa0
 8009f6c:	4393      	bics	r3, r2
 8009f6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	011b      	lsls	r3, r3, #4
 8009f74:	693a      	ldr	r2, [r7, #16]
 8009f76:	4313      	orrs	r3, r2
 8009f78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	697a      	ldr	r2, [r7, #20]
 8009f7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	693a      	ldr	r2, [r7, #16]
 8009f84:	621a      	str	r2, [r3, #32]
}
 8009f86:	46c0      	nop			; (mov r8, r8)
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	b006      	add	sp, #24
 8009f8c:	bd80      	pop	{r7, pc}
 8009f8e:	46c0      	nop			; (mov r8, r8)
 8009f90:	ffff0fff 	.word	0xffff0fff

08009f94 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b084      	sub	sp, #16
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	689b      	ldr	r3, [r3, #8]
 8009fa2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2270      	movs	r2, #112	; 0x70
 8009fa8:	4393      	bics	r3, r2
 8009faa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009fac:	683a      	ldr	r2, [r7, #0]
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	2207      	movs	r2, #7
 8009fb4:	4313      	orrs	r3, r2
 8009fb6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	68fa      	ldr	r2, [r7, #12]
 8009fbc:	609a      	str	r2, [r3, #8]
}
 8009fbe:	46c0      	nop			; (mov r8, r8)
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	b004      	add	sp, #16
 8009fc4:	bd80      	pop	{r7, pc}
	...

08009fc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b086      	sub	sp, #24
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	60f8      	str	r0, [r7, #12]
 8009fd0:	60b9      	str	r1, [r7, #8]
 8009fd2:	607a      	str	r2, [r7, #4]
 8009fd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	689b      	ldr	r3, [r3, #8]
 8009fda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	4a09      	ldr	r2, [pc, #36]	; (800a004 <TIM_ETR_SetConfig+0x3c>)
 8009fe0:	4013      	ands	r3, r2
 8009fe2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	021a      	lsls	r2, r3, #8
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	431a      	orrs	r2, r3
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	4313      	orrs	r3, r2
 8009ff0:	697a      	ldr	r2, [r7, #20]
 8009ff2:	4313      	orrs	r3, r2
 8009ff4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	697a      	ldr	r2, [r7, #20]
 8009ffa:	609a      	str	r2, [r3, #8]
}
 8009ffc:	46c0      	nop			; (mov r8, r8)
 8009ffe:	46bd      	mov	sp, r7
 800a000:	b006      	add	sp, #24
 800a002:	bd80      	pop	{r7, pc}
 800a004:	ffff00ff 	.word	0xffff00ff

0800a008 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b086      	sub	sp, #24
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	60f8      	str	r0, [r7, #12]
 800a010:	60b9      	str	r1, [r7, #8]
 800a012:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	221f      	movs	r2, #31
 800a018:	4013      	ands	r3, r2
 800a01a:	2201      	movs	r2, #1
 800a01c:	409a      	lsls	r2, r3
 800a01e:	0013      	movs	r3, r2
 800a020:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	6a1b      	ldr	r3, [r3, #32]
 800a026:	697a      	ldr	r2, [r7, #20]
 800a028:	43d2      	mvns	r2, r2
 800a02a:	401a      	ands	r2, r3
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	6a1a      	ldr	r2, [r3, #32]
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	211f      	movs	r1, #31
 800a038:	400b      	ands	r3, r1
 800a03a:	6879      	ldr	r1, [r7, #4]
 800a03c:	4099      	lsls	r1, r3
 800a03e:	000b      	movs	r3, r1
 800a040:	431a      	orrs	r2, r3
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	621a      	str	r2, [r3, #32]
}
 800a046:	46c0      	nop			; (mov r8, r8)
 800a048:	46bd      	mov	sp, r7
 800a04a:	b006      	add	sp, #24
 800a04c:	bd80      	pop	{r7, pc}

0800a04e <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a04e:	b580      	push	{r7, lr}
 800a050:	b084      	sub	sp, #16
 800a052:	af00      	add	r7, sp, #0
 800a054:	6078      	str	r0, [r7, #4]
 800a056:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2238      	movs	r2, #56	; 0x38
 800a05c:	5c9b      	ldrb	r3, [r3, r2]
 800a05e:	2b01      	cmp	r3, #1
 800a060:	d101      	bne.n	800a066 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a062:	2302      	movs	r3, #2
 800a064:	e032      	b.n	800a0cc <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2238      	movs	r2, #56	; 0x38
 800a06a:	2101      	movs	r1, #1
 800a06c:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2239      	movs	r2, #57	; 0x39
 800a072:	2102      	movs	r1, #2
 800a074:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	685b      	ldr	r3, [r3, #4]
 800a07c:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	689b      	ldr	r3, [r3, #8]
 800a084:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2270      	movs	r2, #112	; 0x70
 800a08a:	4393      	bics	r3, r2
 800a08c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	68fa      	ldr	r2, [r7, #12]
 800a094:	4313      	orrs	r3, r2
 800a096:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	2280      	movs	r2, #128	; 0x80
 800a09c:	4393      	bics	r3, r2
 800a09e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	68ba      	ldr	r2, [r7, #8]
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	68fa      	ldr	r2, [r7, #12]
 800a0b0:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	68ba      	ldr	r2, [r7, #8]
 800a0b8:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2239      	movs	r2, #57	; 0x39
 800a0be:	2101      	movs	r1, #1
 800a0c0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2238      	movs	r2, #56	; 0x38
 800a0c6:	2100      	movs	r1, #0
 800a0c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a0ca:	2300      	movs	r3, #0
}
 800a0cc:	0018      	movs	r0, r3
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	b004      	add	sp, #16
 800a0d2:	bd80      	pop	{r7, pc}

0800a0d4 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b082      	sub	sp, #8
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
 800a0dc:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2238      	movs	r2, #56	; 0x38
 800a0e2:	5c9b      	ldrb	r3, [r3, r2]
 800a0e4:	2b01      	cmp	r3, #1
 800a0e6:	d101      	bne.n	800a0ec <HAL_TIMEx_RemapConfig+0x18>
 800a0e8:	2302      	movs	r3, #2
 800a0ea:	e00c      	b.n	800a106 <HAL_TIMEx_RemapConfig+0x32>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2238      	movs	r2, #56	; 0x38
 800a0f0:	2101      	movs	r1, #1
 800a0f2:	5499      	strb	r1, [r3, r2]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	683a      	ldr	r2, [r7, #0]
 800a0fa:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2238      	movs	r2, #56	; 0x38
 800a100:	2100      	movs	r1, #0
 800a102:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a104:	2300      	movs	r3, #0
}
 800a106:	0018      	movs	r0, r3
 800a108:	46bd      	mov	sp, r7
 800a10a:	b002      	add	sp, #8
 800a10c:	bd80      	pop	{r7, pc}
	...

0800a110 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b084      	sub	sp, #16
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a118:	210e      	movs	r1, #14
 800a11a:	187b      	adds	r3, r7, r1
 800a11c:	4a08      	ldr	r2, [pc, #32]	; (800a140 <USB_EnableGlobalInt+0x30>)
 800a11e:	801a      	strh	r2, [r3, #0]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2240      	movs	r2, #64	; 0x40
 800a124:	5a9b      	ldrh	r3, [r3, r2]
 800a126:	b29a      	uxth	r2, r3
 800a128:	187b      	adds	r3, r7, r1
 800a12a:	881b      	ldrh	r3, [r3, #0]
 800a12c:	4313      	orrs	r3, r2
 800a12e:	b299      	uxth	r1, r3
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2240      	movs	r2, #64	; 0x40
 800a134:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800a136:	2300      	movs	r3, #0
}
 800a138:	0018      	movs	r0, r3
 800a13a:	46bd      	mov	sp, r7
 800a13c:	b004      	add	sp, #16
 800a13e:	bd80      	pop	{r7, pc}
 800a140:	ffffbf80 	.word	0xffffbf80

0800a144 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b084      	sub	sp, #16
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a14c:	210e      	movs	r1, #14
 800a14e:	187b      	adds	r3, r7, r1
 800a150:	4a0b      	ldr	r2, [pc, #44]	; (800a180 <USB_DisableGlobalInt+0x3c>)
 800a152:	801a      	strh	r2, [r3, #0]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2240      	movs	r2, #64	; 0x40
 800a158:	5a9b      	ldrh	r3, [r3, r2]
 800a15a:	b29b      	uxth	r3, r3
 800a15c:	b21b      	sxth	r3, r3
 800a15e:	187a      	adds	r2, r7, r1
 800a160:	2100      	movs	r1, #0
 800a162:	5e52      	ldrsh	r2, [r2, r1]
 800a164:	43d2      	mvns	r2, r2
 800a166:	b212      	sxth	r2, r2
 800a168:	4013      	ands	r3, r2
 800a16a:	b21b      	sxth	r3, r3
 800a16c:	b299      	uxth	r1, r3
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2240      	movs	r2, #64	; 0x40
 800a172:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800a174:	2300      	movs	r3, #0
}
 800a176:	0018      	movs	r0, r3
 800a178:	46bd      	mov	sp, r7
 800a17a:	b004      	add	sp, #16
 800a17c:	bd80      	pop	{r7, pc}
 800a17e:	46c0      	nop			; (mov r8, r8)
 800a180:	ffffbf80 	.word	0xffffbf80

0800a184 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a184:	b084      	sub	sp, #16
 800a186:	b590      	push	{r4, r7, lr}
 800a188:	46c6      	mov	lr, r8
 800a18a:	b500      	push	{lr}
 800a18c:	b082      	sub	sp, #8
 800a18e:	af00      	add	r7, sp, #0
 800a190:	6078      	str	r0, [r7, #4]
 800a192:	2004      	movs	r0, #4
 800a194:	2410      	movs	r4, #16
 800a196:	46a4      	mov	ip, r4
 800a198:	2408      	movs	r4, #8
 800a19a:	46a0      	mov	r8, r4
 800a19c:	44b8      	add	r8, r7
 800a19e:	44c4      	add	ip, r8
 800a1a0:	4460      	add	r0, ip
 800a1a2:	6001      	str	r1, [r0, #0]
 800a1a4:	6042      	str	r2, [r0, #4]
 800a1a6:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2240      	movs	r2, #64	; 0x40
 800a1ac:	2101      	movs	r1, #1
 800a1ae:	5299      	strh	r1, [r3, r2]

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2240      	movs	r2, #64	; 0x40
 800a1b4:	2100      	movs	r1, #0
 800a1b6:	5299      	strh	r1, [r3, r2]

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2244      	movs	r2, #68	; 0x44
 800a1bc:	2100      	movs	r1, #0
 800a1be:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2250      	movs	r2, #80	; 0x50
 800a1c4:	2100      	movs	r1, #0
 800a1c6:	5299      	strh	r1, [r3, r2]

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	0018      	movs	r0, r3
 800a1cc:	f7ff ffa0 	bl	800a110 <USB_EnableGlobalInt>

  return HAL_OK;
 800a1d0:	2300      	movs	r3, #0
}
 800a1d2:	0018      	movs	r0, r3
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	b002      	add	sp, #8
 800a1d8:	bc04      	pop	{r2}
 800a1da:	4690      	mov	r8, r2
 800a1dc:	bc90      	pop	{r4, r7}
 800a1de:	bc08      	pop	{r3}
 800a1e0:	b004      	add	sp, #16
 800a1e2:	4718      	bx	r3

0800a1e4 <calloc>:
 800a1e4:	b510      	push	{r4, lr}
 800a1e6:	4b03      	ldr	r3, [pc, #12]	; (800a1f4 <calloc+0x10>)
 800a1e8:	000a      	movs	r2, r1
 800a1ea:	0001      	movs	r1, r0
 800a1ec:	6818      	ldr	r0, [r3, #0]
 800a1ee:	f000 f83e 	bl	800a26e <_calloc_r>
 800a1f2:	bd10      	pop	{r4, pc}
 800a1f4:	2000006c 	.word	0x2000006c

0800a1f8 <__errno>:
 800a1f8:	4b01      	ldr	r3, [pc, #4]	; (800a200 <__errno+0x8>)
 800a1fa:	6818      	ldr	r0, [r3, #0]
 800a1fc:	4770      	bx	lr
 800a1fe:	46c0      	nop			; (mov r8, r8)
 800a200:	2000006c 	.word	0x2000006c

0800a204 <__libc_init_array>:
 800a204:	b570      	push	{r4, r5, r6, lr}
 800a206:	2600      	movs	r6, #0
 800a208:	4d0c      	ldr	r5, [pc, #48]	; (800a23c <__libc_init_array+0x38>)
 800a20a:	4c0d      	ldr	r4, [pc, #52]	; (800a240 <__libc_init_array+0x3c>)
 800a20c:	1b64      	subs	r4, r4, r5
 800a20e:	10a4      	asrs	r4, r4, #2
 800a210:	42a6      	cmp	r6, r4
 800a212:	d109      	bne.n	800a228 <__libc_init_array+0x24>
 800a214:	2600      	movs	r6, #0
 800a216:	f000 fc37 	bl	800aa88 <_init>
 800a21a:	4d0a      	ldr	r5, [pc, #40]	; (800a244 <__libc_init_array+0x40>)
 800a21c:	4c0a      	ldr	r4, [pc, #40]	; (800a248 <__libc_init_array+0x44>)
 800a21e:	1b64      	subs	r4, r4, r5
 800a220:	10a4      	asrs	r4, r4, #2
 800a222:	42a6      	cmp	r6, r4
 800a224:	d105      	bne.n	800a232 <__libc_init_array+0x2e>
 800a226:	bd70      	pop	{r4, r5, r6, pc}
 800a228:	00b3      	lsls	r3, r6, #2
 800a22a:	58eb      	ldr	r3, [r5, r3]
 800a22c:	4798      	blx	r3
 800a22e:	3601      	adds	r6, #1
 800a230:	e7ee      	b.n	800a210 <__libc_init_array+0xc>
 800a232:	00b3      	lsls	r3, r6, #2
 800a234:	58eb      	ldr	r3, [r5, r3]
 800a236:	4798      	blx	r3
 800a238:	3601      	adds	r6, #1
 800a23a:	e7f2      	b.n	800a222 <__libc_init_array+0x1e>
 800a23c:	0800b3b4 	.word	0x0800b3b4
 800a240:	0800b3b4 	.word	0x0800b3b4
 800a244:	0800b3b4 	.word	0x0800b3b4
 800a248:	0800b3b8 	.word	0x0800b3b8

0800a24c <memcpy>:
 800a24c:	2300      	movs	r3, #0
 800a24e:	b510      	push	{r4, lr}
 800a250:	429a      	cmp	r2, r3
 800a252:	d100      	bne.n	800a256 <memcpy+0xa>
 800a254:	bd10      	pop	{r4, pc}
 800a256:	5ccc      	ldrb	r4, [r1, r3]
 800a258:	54c4      	strb	r4, [r0, r3]
 800a25a:	3301      	adds	r3, #1
 800a25c:	e7f8      	b.n	800a250 <memcpy+0x4>

0800a25e <memset>:
 800a25e:	0003      	movs	r3, r0
 800a260:	1812      	adds	r2, r2, r0
 800a262:	4293      	cmp	r3, r2
 800a264:	d100      	bne.n	800a268 <memset+0xa>
 800a266:	4770      	bx	lr
 800a268:	7019      	strb	r1, [r3, #0]
 800a26a:	3301      	adds	r3, #1
 800a26c:	e7f9      	b.n	800a262 <memset+0x4>

0800a26e <_calloc_r>:
 800a26e:	434a      	muls	r2, r1
 800a270:	b570      	push	{r4, r5, r6, lr}
 800a272:	0011      	movs	r1, r2
 800a274:	0014      	movs	r4, r2
 800a276:	f000 f809 	bl	800a28c <_malloc_r>
 800a27a:	1e05      	subs	r5, r0, #0
 800a27c:	d003      	beq.n	800a286 <_calloc_r+0x18>
 800a27e:	0022      	movs	r2, r4
 800a280:	2100      	movs	r1, #0
 800a282:	f7ff ffec 	bl	800a25e <memset>
 800a286:	0028      	movs	r0, r5
 800a288:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a28c <_malloc_r>:
 800a28c:	2303      	movs	r3, #3
 800a28e:	b570      	push	{r4, r5, r6, lr}
 800a290:	1ccd      	adds	r5, r1, #3
 800a292:	439d      	bics	r5, r3
 800a294:	3508      	adds	r5, #8
 800a296:	0006      	movs	r6, r0
 800a298:	2d0c      	cmp	r5, #12
 800a29a:	d21e      	bcs.n	800a2da <_malloc_r+0x4e>
 800a29c:	250c      	movs	r5, #12
 800a29e:	42a9      	cmp	r1, r5
 800a2a0:	d81d      	bhi.n	800a2de <_malloc_r+0x52>
 800a2a2:	0030      	movs	r0, r6
 800a2a4:	f000 f882 	bl	800a3ac <__malloc_lock>
 800a2a8:	4a25      	ldr	r2, [pc, #148]	; (800a340 <_malloc_r+0xb4>)
 800a2aa:	6814      	ldr	r4, [r2, #0]
 800a2ac:	0021      	movs	r1, r4
 800a2ae:	2900      	cmp	r1, #0
 800a2b0:	d119      	bne.n	800a2e6 <_malloc_r+0x5a>
 800a2b2:	4c24      	ldr	r4, [pc, #144]	; (800a344 <_malloc_r+0xb8>)
 800a2b4:	6823      	ldr	r3, [r4, #0]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d103      	bne.n	800a2c2 <_malloc_r+0x36>
 800a2ba:	0030      	movs	r0, r6
 800a2bc:	f000 f844 	bl	800a348 <_sbrk_r>
 800a2c0:	6020      	str	r0, [r4, #0]
 800a2c2:	0029      	movs	r1, r5
 800a2c4:	0030      	movs	r0, r6
 800a2c6:	f000 f83f 	bl	800a348 <_sbrk_r>
 800a2ca:	1c43      	adds	r3, r0, #1
 800a2cc:	d12b      	bne.n	800a326 <_malloc_r+0x9a>
 800a2ce:	230c      	movs	r3, #12
 800a2d0:	0030      	movs	r0, r6
 800a2d2:	6033      	str	r3, [r6, #0]
 800a2d4:	f000 f86b 	bl	800a3ae <__malloc_unlock>
 800a2d8:	e003      	b.n	800a2e2 <_malloc_r+0x56>
 800a2da:	2d00      	cmp	r5, #0
 800a2dc:	dadf      	bge.n	800a29e <_malloc_r+0x12>
 800a2de:	230c      	movs	r3, #12
 800a2e0:	6033      	str	r3, [r6, #0]
 800a2e2:	2000      	movs	r0, #0
 800a2e4:	bd70      	pop	{r4, r5, r6, pc}
 800a2e6:	680b      	ldr	r3, [r1, #0]
 800a2e8:	1b5b      	subs	r3, r3, r5
 800a2ea:	d419      	bmi.n	800a320 <_malloc_r+0x94>
 800a2ec:	2b0b      	cmp	r3, #11
 800a2ee:	d903      	bls.n	800a2f8 <_malloc_r+0x6c>
 800a2f0:	600b      	str	r3, [r1, #0]
 800a2f2:	18cc      	adds	r4, r1, r3
 800a2f4:	6025      	str	r5, [r4, #0]
 800a2f6:	e003      	b.n	800a300 <_malloc_r+0x74>
 800a2f8:	684b      	ldr	r3, [r1, #4]
 800a2fa:	428c      	cmp	r4, r1
 800a2fc:	d10d      	bne.n	800a31a <_malloc_r+0x8e>
 800a2fe:	6013      	str	r3, [r2, #0]
 800a300:	0030      	movs	r0, r6
 800a302:	f000 f854 	bl	800a3ae <__malloc_unlock>
 800a306:	0020      	movs	r0, r4
 800a308:	2207      	movs	r2, #7
 800a30a:	300b      	adds	r0, #11
 800a30c:	1d23      	adds	r3, r4, #4
 800a30e:	4390      	bics	r0, r2
 800a310:	1ac3      	subs	r3, r0, r3
 800a312:	d0e7      	beq.n	800a2e4 <_malloc_r+0x58>
 800a314:	425a      	negs	r2, r3
 800a316:	50e2      	str	r2, [r4, r3]
 800a318:	e7e4      	b.n	800a2e4 <_malloc_r+0x58>
 800a31a:	6063      	str	r3, [r4, #4]
 800a31c:	000c      	movs	r4, r1
 800a31e:	e7ef      	b.n	800a300 <_malloc_r+0x74>
 800a320:	000c      	movs	r4, r1
 800a322:	6849      	ldr	r1, [r1, #4]
 800a324:	e7c3      	b.n	800a2ae <_malloc_r+0x22>
 800a326:	2303      	movs	r3, #3
 800a328:	1cc4      	adds	r4, r0, #3
 800a32a:	439c      	bics	r4, r3
 800a32c:	42a0      	cmp	r0, r4
 800a32e:	d0e1      	beq.n	800a2f4 <_malloc_r+0x68>
 800a330:	1a21      	subs	r1, r4, r0
 800a332:	0030      	movs	r0, r6
 800a334:	f000 f808 	bl	800a348 <_sbrk_r>
 800a338:	1c43      	adds	r3, r0, #1
 800a33a:	d1db      	bne.n	800a2f4 <_malloc_r+0x68>
 800a33c:	e7c7      	b.n	800a2ce <_malloc_r+0x42>
 800a33e:	46c0      	nop			; (mov r8, r8)
 800a340:	20000134 	.word	0x20000134
 800a344:	20000138 	.word	0x20000138

0800a348 <_sbrk_r>:
 800a348:	2300      	movs	r3, #0
 800a34a:	b570      	push	{r4, r5, r6, lr}
 800a34c:	4c06      	ldr	r4, [pc, #24]	; (800a368 <_sbrk_r+0x20>)
 800a34e:	0005      	movs	r5, r0
 800a350:	0008      	movs	r0, r1
 800a352:	6023      	str	r3, [r4, #0]
 800a354:	f7f9 fc84 	bl	8003c60 <_sbrk>
 800a358:	1c43      	adds	r3, r0, #1
 800a35a:	d103      	bne.n	800a364 <_sbrk_r+0x1c>
 800a35c:	6823      	ldr	r3, [r4, #0]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d000      	beq.n	800a364 <_sbrk_r+0x1c>
 800a362:	602b      	str	r3, [r5, #0]
 800a364:	bd70      	pop	{r4, r5, r6, pc}
 800a366:	46c0      	nop			; (mov r8, r8)
 800a368:	200005d8 	.word	0x200005d8

0800a36c <siprintf>:
 800a36c:	b40e      	push	{r1, r2, r3}
 800a36e:	b500      	push	{lr}
 800a370:	490b      	ldr	r1, [pc, #44]	; (800a3a0 <siprintf+0x34>)
 800a372:	b09c      	sub	sp, #112	; 0x70
 800a374:	ab1d      	add	r3, sp, #116	; 0x74
 800a376:	9002      	str	r0, [sp, #8]
 800a378:	9006      	str	r0, [sp, #24]
 800a37a:	9107      	str	r1, [sp, #28]
 800a37c:	9104      	str	r1, [sp, #16]
 800a37e:	4809      	ldr	r0, [pc, #36]	; (800a3a4 <siprintf+0x38>)
 800a380:	4909      	ldr	r1, [pc, #36]	; (800a3a8 <siprintf+0x3c>)
 800a382:	cb04      	ldmia	r3!, {r2}
 800a384:	9105      	str	r1, [sp, #20]
 800a386:	6800      	ldr	r0, [r0, #0]
 800a388:	a902      	add	r1, sp, #8
 800a38a:	9301      	str	r3, [sp, #4]
 800a38c:	f000 f872 	bl	800a474 <_svfiprintf_r>
 800a390:	2300      	movs	r3, #0
 800a392:	9a02      	ldr	r2, [sp, #8]
 800a394:	7013      	strb	r3, [r2, #0]
 800a396:	b01c      	add	sp, #112	; 0x70
 800a398:	bc08      	pop	{r3}
 800a39a:	b003      	add	sp, #12
 800a39c:	4718      	bx	r3
 800a39e:	46c0      	nop			; (mov r8, r8)
 800a3a0:	7fffffff 	.word	0x7fffffff
 800a3a4:	2000006c 	.word	0x2000006c
 800a3a8:	ffff0208 	.word	0xffff0208

0800a3ac <__malloc_lock>:
 800a3ac:	4770      	bx	lr

0800a3ae <__malloc_unlock>:
 800a3ae:	4770      	bx	lr

0800a3b0 <__ssputs_r>:
 800a3b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3b2:	688e      	ldr	r6, [r1, #8]
 800a3b4:	b085      	sub	sp, #20
 800a3b6:	0007      	movs	r7, r0
 800a3b8:	000c      	movs	r4, r1
 800a3ba:	9203      	str	r2, [sp, #12]
 800a3bc:	9301      	str	r3, [sp, #4]
 800a3be:	429e      	cmp	r6, r3
 800a3c0:	d83c      	bhi.n	800a43c <__ssputs_r+0x8c>
 800a3c2:	2390      	movs	r3, #144	; 0x90
 800a3c4:	898a      	ldrh	r2, [r1, #12]
 800a3c6:	00db      	lsls	r3, r3, #3
 800a3c8:	421a      	tst	r2, r3
 800a3ca:	d034      	beq.n	800a436 <__ssputs_r+0x86>
 800a3cc:	2503      	movs	r5, #3
 800a3ce:	6909      	ldr	r1, [r1, #16]
 800a3d0:	6823      	ldr	r3, [r4, #0]
 800a3d2:	1a5b      	subs	r3, r3, r1
 800a3d4:	9302      	str	r3, [sp, #8]
 800a3d6:	6963      	ldr	r3, [r4, #20]
 800a3d8:	9802      	ldr	r0, [sp, #8]
 800a3da:	435d      	muls	r5, r3
 800a3dc:	0feb      	lsrs	r3, r5, #31
 800a3de:	195d      	adds	r5, r3, r5
 800a3e0:	9b01      	ldr	r3, [sp, #4]
 800a3e2:	106d      	asrs	r5, r5, #1
 800a3e4:	3301      	adds	r3, #1
 800a3e6:	181b      	adds	r3, r3, r0
 800a3e8:	42ab      	cmp	r3, r5
 800a3ea:	d900      	bls.n	800a3ee <__ssputs_r+0x3e>
 800a3ec:	001d      	movs	r5, r3
 800a3ee:	0553      	lsls	r3, r2, #21
 800a3f0:	d532      	bpl.n	800a458 <__ssputs_r+0xa8>
 800a3f2:	0029      	movs	r1, r5
 800a3f4:	0038      	movs	r0, r7
 800a3f6:	f7ff ff49 	bl	800a28c <_malloc_r>
 800a3fa:	1e06      	subs	r6, r0, #0
 800a3fc:	d109      	bne.n	800a412 <__ssputs_r+0x62>
 800a3fe:	230c      	movs	r3, #12
 800a400:	603b      	str	r3, [r7, #0]
 800a402:	2340      	movs	r3, #64	; 0x40
 800a404:	2001      	movs	r0, #1
 800a406:	89a2      	ldrh	r2, [r4, #12]
 800a408:	4240      	negs	r0, r0
 800a40a:	4313      	orrs	r3, r2
 800a40c:	81a3      	strh	r3, [r4, #12]
 800a40e:	b005      	add	sp, #20
 800a410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a412:	9a02      	ldr	r2, [sp, #8]
 800a414:	6921      	ldr	r1, [r4, #16]
 800a416:	f7ff ff19 	bl	800a24c <memcpy>
 800a41a:	89a3      	ldrh	r3, [r4, #12]
 800a41c:	4a14      	ldr	r2, [pc, #80]	; (800a470 <__ssputs_r+0xc0>)
 800a41e:	401a      	ands	r2, r3
 800a420:	2380      	movs	r3, #128	; 0x80
 800a422:	4313      	orrs	r3, r2
 800a424:	81a3      	strh	r3, [r4, #12]
 800a426:	9b02      	ldr	r3, [sp, #8]
 800a428:	6126      	str	r6, [r4, #16]
 800a42a:	18f6      	adds	r6, r6, r3
 800a42c:	6026      	str	r6, [r4, #0]
 800a42e:	6165      	str	r5, [r4, #20]
 800a430:	9e01      	ldr	r6, [sp, #4]
 800a432:	1aed      	subs	r5, r5, r3
 800a434:	60a5      	str	r5, [r4, #8]
 800a436:	9b01      	ldr	r3, [sp, #4]
 800a438:	429e      	cmp	r6, r3
 800a43a:	d900      	bls.n	800a43e <__ssputs_r+0x8e>
 800a43c:	9e01      	ldr	r6, [sp, #4]
 800a43e:	0032      	movs	r2, r6
 800a440:	9903      	ldr	r1, [sp, #12]
 800a442:	6820      	ldr	r0, [r4, #0]
 800a444:	f000 fa95 	bl	800a972 <memmove>
 800a448:	68a3      	ldr	r3, [r4, #8]
 800a44a:	2000      	movs	r0, #0
 800a44c:	1b9b      	subs	r3, r3, r6
 800a44e:	60a3      	str	r3, [r4, #8]
 800a450:	6823      	ldr	r3, [r4, #0]
 800a452:	199e      	adds	r6, r3, r6
 800a454:	6026      	str	r6, [r4, #0]
 800a456:	e7da      	b.n	800a40e <__ssputs_r+0x5e>
 800a458:	002a      	movs	r2, r5
 800a45a:	0038      	movs	r0, r7
 800a45c:	f000 fae6 	bl	800aa2c <_realloc_r>
 800a460:	1e06      	subs	r6, r0, #0
 800a462:	d1e0      	bne.n	800a426 <__ssputs_r+0x76>
 800a464:	6921      	ldr	r1, [r4, #16]
 800a466:	0038      	movs	r0, r7
 800a468:	f000 fa96 	bl	800a998 <_free_r>
 800a46c:	e7c7      	b.n	800a3fe <__ssputs_r+0x4e>
 800a46e:	46c0      	nop			; (mov r8, r8)
 800a470:	fffffb7f 	.word	0xfffffb7f

0800a474 <_svfiprintf_r>:
 800a474:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a476:	b0a1      	sub	sp, #132	; 0x84
 800a478:	9003      	str	r0, [sp, #12]
 800a47a:	001d      	movs	r5, r3
 800a47c:	898b      	ldrh	r3, [r1, #12]
 800a47e:	000f      	movs	r7, r1
 800a480:	0016      	movs	r6, r2
 800a482:	061b      	lsls	r3, r3, #24
 800a484:	d511      	bpl.n	800a4aa <_svfiprintf_r+0x36>
 800a486:	690b      	ldr	r3, [r1, #16]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d10e      	bne.n	800a4aa <_svfiprintf_r+0x36>
 800a48c:	2140      	movs	r1, #64	; 0x40
 800a48e:	f7ff fefd 	bl	800a28c <_malloc_r>
 800a492:	6038      	str	r0, [r7, #0]
 800a494:	6138      	str	r0, [r7, #16]
 800a496:	2800      	cmp	r0, #0
 800a498:	d105      	bne.n	800a4a6 <_svfiprintf_r+0x32>
 800a49a:	230c      	movs	r3, #12
 800a49c:	9a03      	ldr	r2, [sp, #12]
 800a49e:	3801      	subs	r0, #1
 800a4a0:	6013      	str	r3, [r2, #0]
 800a4a2:	b021      	add	sp, #132	; 0x84
 800a4a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4a6:	2340      	movs	r3, #64	; 0x40
 800a4a8:	617b      	str	r3, [r7, #20]
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	ac08      	add	r4, sp, #32
 800a4ae:	6163      	str	r3, [r4, #20]
 800a4b0:	3320      	adds	r3, #32
 800a4b2:	7663      	strb	r3, [r4, #25]
 800a4b4:	3310      	adds	r3, #16
 800a4b6:	76a3      	strb	r3, [r4, #26]
 800a4b8:	9507      	str	r5, [sp, #28]
 800a4ba:	0035      	movs	r5, r6
 800a4bc:	782b      	ldrb	r3, [r5, #0]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d001      	beq.n	800a4c6 <_svfiprintf_r+0x52>
 800a4c2:	2b25      	cmp	r3, #37	; 0x25
 800a4c4:	d146      	bne.n	800a554 <_svfiprintf_r+0xe0>
 800a4c6:	1bab      	subs	r3, r5, r6
 800a4c8:	9305      	str	r3, [sp, #20]
 800a4ca:	d00c      	beq.n	800a4e6 <_svfiprintf_r+0x72>
 800a4cc:	0032      	movs	r2, r6
 800a4ce:	0039      	movs	r1, r7
 800a4d0:	9803      	ldr	r0, [sp, #12]
 800a4d2:	f7ff ff6d 	bl	800a3b0 <__ssputs_r>
 800a4d6:	1c43      	adds	r3, r0, #1
 800a4d8:	d100      	bne.n	800a4dc <_svfiprintf_r+0x68>
 800a4da:	e0ae      	b.n	800a63a <_svfiprintf_r+0x1c6>
 800a4dc:	6962      	ldr	r2, [r4, #20]
 800a4de:	9b05      	ldr	r3, [sp, #20]
 800a4e0:	4694      	mov	ip, r2
 800a4e2:	4463      	add	r3, ip
 800a4e4:	6163      	str	r3, [r4, #20]
 800a4e6:	782b      	ldrb	r3, [r5, #0]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d100      	bne.n	800a4ee <_svfiprintf_r+0x7a>
 800a4ec:	e0a5      	b.n	800a63a <_svfiprintf_r+0x1c6>
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	4252      	negs	r2, r2
 800a4f4:	6062      	str	r2, [r4, #4]
 800a4f6:	a904      	add	r1, sp, #16
 800a4f8:	3254      	adds	r2, #84	; 0x54
 800a4fa:	1852      	adds	r2, r2, r1
 800a4fc:	1c6e      	adds	r6, r5, #1
 800a4fe:	6023      	str	r3, [r4, #0]
 800a500:	60e3      	str	r3, [r4, #12]
 800a502:	60a3      	str	r3, [r4, #8]
 800a504:	7013      	strb	r3, [r2, #0]
 800a506:	65a3      	str	r3, [r4, #88]	; 0x58
 800a508:	7831      	ldrb	r1, [r6, #0]
 800a50a:	2205      	movs	r2, #5
 800a50c:	4853      	ldr	r0, [pc, #332]	; (800a65c <_svfiprintf_r+0x1e8>)
 800a50e:	f000 fa25 	bl	800a95c <memchr>
 800a512:	1c75      	adds	r5, r6, #1
 800a514:	2800      	cmp	r0, #0
 800a516:	d11f      	bne.n	800a558 <_svfiprintf_r+0xe4>
 800a518:	6822      	ldr	r2, [r4, #0]
 800a51a:	06d3      	lsls	r3, r2, #27
 800a51c:	d504      	bpl.n	800a528 <_svfiprintf_r+0xb4>
 800a51e:	2353      	movs	r3, #83	; 0x53
 800a520:	a904      	add	r1, sp, #16
 800a522:	185b      	adds	r3, r3, r1
 800a524:	2120      	movs	r1, #32
 800a526:	7019      	strb	r1, [r3, #0]
 800a528:	0713      	lsls	r3, r2, #28
 800a52a:	d504      	bpl.n	800a536 <_svfiprintf_r+0xc2>
 800a52c:	2353      	movs	r3, #83	; 0x53
 800a52e:	a904      	add	r1, sp, #16
 800a530:	185b      	adds	r3, r3, r1
 800a532:	212b      	movs	r1, #43	; 0x2b
 800a534:	7019      	strb	r1, [r3, #0]
 800a536:	7833      	ldrb	r3, [r6, #0]
 800a538:	2b2a      	cmp	r3, #42	; 0x2a
 800a53a:	d016      	beq.n	800a56a <_svfiprintf_r+0xf6>
 800a53c:	0035      	movs	r5, r6
 800a53e:	2100      	movs	r1, #0
 800a540:	200a      	movs	r0, #10
 800a542:	68e3      	ldr	r3, [r4, #12]
 800a544:	782a      	ldrb	r2, [r5, #0]
 800a546:	1c6e      	adds	r6, r5, #1
 800a548:	3a30      	subs	r2, #48	; 0x30
 800a54a:	2a09      	cmp	r2, #9
 800a54c:	d94e      	bls.n	800a5ec <_svfiprintf_r+0x178>
 800a54e:	2900      	cmp	r1, #0
 800a550:	d018      	beq.n	800a584 <_svfiprintf_r+0x110>
 800a552:	e010      	b.n	800a576 <_svfiprintf_r+0x102>
 800a554:	3501      	adds	r5, #1
 800a556:	e7b1      	b.n	800a4bc <_svfiprintf_r+0x48>
 800a558:	4b40      	ldr	r3, [pc, #256]	; (800a65c <_svfiprintf_r+0x1e8>)
 800a55a:	6822      	ldr	r2, [r4, #0]
 800a55c:	1ac0      	subs	r0, r0, r3
 800a55e:	2301      	movs	r3, #1
 800a560:	4083      	lsls	r3, r0
 800a562:	4313      	orrs	r3, r2
 800a564:	6023      	str	r3, [r4, #0]
 800a566:	002e      	movs	r6, r5
 800a568:	e7ce      	b.n	800a508 <_svfiprintf_r+0x94>
 800a56a:	9b07      	ldr	r3, [sp, #28]
 800a56c:	1d19      	adds	r1, r3, #4
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	9107      	str	r1, [sp, #28]
 800a572:	2b00      	cmp	r3, #0
 800a574:	db01      	blt.n	800a57a <_svfiprintf_r+0x106>
 800a576:	930b      	str	r3, [sp, #44]	; 0x2c
 800a578:	e004      	b.n	800a584 <_svfiprintf_r+0x110>
 800a57a:	425b      	negs	r3, r3
 800a57c:	60e3      	str	r3, [r4, #12]
 800a57e:	2302      	movs	r3, #2
 800a580:	4313      	orrs	r3, r2
 800a582:	6023      	str	r3, [r4, #0]
 800a584:	782b      	ldrb	r3, [r5, #0]
 800a586:	2b2e      	cmp	r3, #46	; 0x2e
 800a588:	d10a      	bne.n	800a5a0 <_svfiprintf_r+0x12c>
 800a58a:	786b      	ldrb	r3, [r5, #1]
 800a58c:	2b2a      	cmp	r3, #42	; 0x2a
 800a58e:	d135      	bne.n	800a5fc <_svfiprintf_r+0x188>
 800a590:	9b07      	ldr	r3, [sp, #28]
 800a592:	3502      	adds	r5, #2
 800a594:	1d1a      	adds	r2, r3, #4
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	9207      	str	r2, [sp, #28]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	db2b      	blt.n	800a5f6 <_svfiprintf_r+0x182>
 800a59e:	9309      	str	r3, [sp, #36]	; 0x24
 800a5a0:	4e2f      	ldr	r6, [pc, #188]	; (800a660 <_svfiprintf_r+0x1ec>)
 800a5a2:	7829      	ldrb	r1, [r5, #0]
 800a5a4:	2203      	movs	r2, #3
 800a5a6:	0030      	movs	r0, r6
 800a5a8:	f000 f9d8 	bl	800a95c <memchr>
 800a5ac:	2800      	cmp	r0, #0
 800a5ae:	d006      	beq.n	800a5be <_svfiprintf_r+0x14a>
 800a5b0:	2340      	movs	r3, #64	; 0x40
 800a5b2:	1b80      	subs	r0, r0, r6
 800a5b4:	4083      	lsls	r3, r0
 800a5b6:	6822      	ldr	r2, [r4, #0]
 800a5b8:	3501      	adds	r5, #1
 800a5ba:	4313      	orrs	r3, r2
 800a5bc:	6023      	str	r3, [r4, #0]
 800a5be:	7829      	ldrb	r1, [r5, #0]
 800a5c0:	2206      	movs	r2, #6
 800a5c2:	4828      	ldr	r0, [pc, #160]	; (800a664 <_svfiprintf_r+0x1f0>)
 800a5c4:	1c6e      	adds	r6, r5, #1
 800a5c6:	7621      	strb	r1, [r4, #24]
 800a5c8:	f000 f9c8 	bl	800a95c <memchr>
 800a5cc:	2800      	cmp	r0, #0
 800a5ce:	d03c      	beq.n	800a64a <_svfiprintf_r+0x1d6>
 800a5d0:	4b25      	ldr	r3, [pc, #148]	; (800a668 <_svfiprintf_r+0x1f4>)
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d125      	bne.n	800a622 <_svfiprintf_r+0x1ae>
 800a5d6:	2207      	movs	r2, #7
 800a5d8:	9b07      	ldr	r3, [sp, #28]
 800a5da:	3307      	adds	r3, #7
 800a5dc:	4393      	bics	r3, r2
 800a5de:	3308      	adds	r3, #8
 800a5e0:	9307      	str	r3, [sp, #28]
 800a5e2:	6963      	ldr	r3, [r4, #20]
 800a5e4:	9a04      	ldr	r2, [sp, #16]
 800a5e6:	189b      	adds	r3, r3, r2
 800a5e8:	6163      	str	r3, [r4, #20]
 800a5ea:	e766      	b.n	800a4ba <_svfiprintf_r+0x46>
 800a5ec:	4343      	muls	r3, r0
 800a5ee:	2101      	movs	r1, #1
 800a5f0:	189b      	adds	r3, r3, r2
 800a5f2:	0035      	movs	r5, r6
 800a5f4:	e7a6      	b.n	800a544 <_svfiprintf_r+0xd0>
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	425b      	negs	r3, r3
 800a5fa:	e7d0      	b.n	800a59e <_svfiprintf_r+0x12a>
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	200a      	movs	r0, #10
 800a600:	001a      	movs	r2, r3
 800a602:	3501      	adds	r5, #1
 800a604:	6063      	str	r3, [r4, #4]
 800a606:	7829      	ldrb	r1, [r5, #0]
 800a608:	1c6e      	adds	r6, r5, #1
 800a60a:	3930      	subs	r1, #48	; 0x30
 800a60c:	2909      	cmp	r1, #9
 800a60e:	d903      	bls.n	800a618 <_svfiprintf_r+0x1a4>
 800a610:	2b00      	cmp	r3, #0
 800a612:	d0c5      	beq.n	800a5a0 <_svfiprintf_r+0x12c>
 800a614:	9209      	str	r2, [sp, #36]	; 0x24
 800a616:	e7c3      	b.n	800a5a0 <_svfiprintf_r+0x12c>
 800a618:	4342      	muls	r2, r0
 800a61a:	2301      	movs	r3, #1
 800a61c:	1852      	adds	r2, r2, r1
 800a61e:	0035      	movs	r5, r6
 800a620:	e7f1      	b.n	800a606 <_svfiprintf_r+0x192>
 800a622:	ab07      	add	r3, sp, #28
 800a624:	9300      	str	r3, [sp, #0]
 800a626:	003a      	movs	r2, r7
 800a628:	4b10      	ldr	r3, [pc, #64]	; (800a66c <_svfiprintf_r+0x1f8>)
 800a62a:	0021      	movs	r1, r4
 800a62c:	9803      	ldr	r0, [sp, #12]
 800a62e:	e000      	b.n	800a632 <_svfiprintf_r+0x1be>
 800a630:	bf00      	nop
 800a632:	9004      	str	r0, [sp, #16]
 800a634:	9b04      	ldr	r3, [sp, #16]
 800a636:	3301      	adds	r3, #1
 800a638:	d1d3      	bne.n	800a5e2 <_svfiprintf_r+0x16e>
 800a63a:	89bb      	ldrh	r3, [r7, #12]
 800a63c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a63e:	065b      	lsls	r3, r3, #25
 800a640:	d400      	bmi.n	800a644 <_svfiprintf_r+0x1d0>
 800a642:	e72e      	b.n	800a4a2 <_svfiprintf_r+0x2e>
 800a644:	2001      	movs	r0, #1
 800a646:	4240      	negs	r0, r0
 800a648:	e72b      	b.n	800a4a2 <_svfiprintf_r+0x2e>
 800a64a:	ab07      	add	r3, sp, #28
 800a64c:	9300      	str	r3, [sp, #0]
 800a64e:	003a      	movs	r2, r7
 800a650:	4b06      	ldr	r3, [pc, #24]	; (800a66c <_svfiprintf_r+0x1f8>)
 800a652:	0021      	movs	r1, r4
 800a654:	9803      	ldr	r0, [sp, #12]
 800a656:	f000 f879 	bl	800a74c <_printf_i>
 800a65a:	e7ea      	b.n	800a632 <_svfiprintf_r+0x1be>
 800a65c:	0800b380 	.word	0x0800b380
 800a660:	0800b386 	.word	0x0800b386
 800a664:	0800b38a 	.word	0x0800b38a
 800a668:	00000000 	.word	0x00000000
 800a66c:	0800a3b1 	.word	0x0800a3b1

0800a670 <_printf_common>:
 800a670:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a672:	0015      	movs	r5, r2
 800a674:	9301      	str	r3, [sp, #4]
 800a676:	688a      	ldr	r2, [r1, #8]
 800a678:	690b      	ldr	r3, [r1, #16]
 800a67a:	9000      	str	r0, [sp, #0]
 800a67c:	000c      	movs	r4, r1
 800a67e:	4293      	cmp	r3, r2
 800a680:	da00      	bge.n	800a684 <_printf_common+0x14>
 800a682:	0013      	movs	r3, r2
 800a684:	0022      	movs	r2, r4
 800a686:	602b      	str	r3, [r5, #0]
 800a688:	3243      	adds	r2, #67	; 0x43
 800a68a:	7812      	ldrb	r2, [r2, #0]
 800a68c:	2a00      	cmp	r2, #0
 800a68e:	d001      	beq.n	800a694 <_printf_common+0x24>
 800a690:	3301      	adds	r3, #1
 800a692:	602b      	str	r3, [r5, #0]
 800a694:	6823      	ldr	r3, [r4, #0]
 800a696:	069b      	lsls	r3, r3, #26
 800a698:	d502      	bpl.n	800a6a0 <_printf_common+0x30>
 800a69a:	682b      	ldr	r3, [r5, #0]
 800a69c:	3302      	adds	r3, #2
 800a69e:	602b      	str	r3, [r5, #0]
 800a6a0:	2706      	movs	r7, #6
 800a6a2:	6823      	ldr	r3, [r4, #0]
 800a6a4:	401f      	ands	r7, r3
 800a6a6:	d027      	beq.n	800a6f8 <_printf_common+0x88>
 800a6a8:	0023      	movs	r3, r4
 800a6aa:	3343      	adds	r3, #67	; 0x43
 800a6ac:	781b      	ldrb	r3, [r3, #0]
 800a6ae:	1e5a      	subs	r2, r3, #1
 800a6b0:	4193      	sbcs	r3, r2
 800a6b2:	6822      	ldr	r2, [r4, #0]
 800a6b4:	0692      	lsls	r2, r2, #26
 800a6b6:	d430      	bmi.n	800a71a <_printf_common+0xaa>
 800a6b8:	0022      	movs	r2, r4
 800a6ba:	9901      	ldr	r1, [sp, #4]
 800a6bc:	3243      	adds	r2, #67	; 0x43
 800a6be:	9800      	ldr	r0, [sp, #0]
 800a6c0:	9e08      	ldr	r6, [sp, #32]
 800a6c2:	47b0      	blx	r6
 800a6c4:	1c43      	adds	r3, r0, #1
 800a6c6:	d025      	beq.n	800a714 <_printf_common+0xa4>
 800a6c8:	2306      	movs	r3, #6
 800a6ca:	6820      	ldr	r0, [r4, #0]
 800a6cc:	682a      	ldr	r2, [r5, #0]
 800a6ce:	68e1      	ldr	r1, [r4, #12]
 800a6d0:	4003      	ands	r3, r0
 800a6d2:	2500      	movs	r5, #0
 800a6d4:	2b04      	cmp	r3, #4
 800a6d6:	d103      	bne.n	800a6e0 <_printf_common+0x70>
 800a6d8:	1a8d      	subs	r5, r1, r2
 800a6da:	43eb      	mvns	r3, r5
 800a6dc:	17db      	asrs	r3, r3, #31
 800a6de:	401d      	ands	r5, r3
 800a6e0:	68a3      	ldr	r3, [r4, #8]
 800a6e2:	6922      	ldr	r2, [r4, #16]
 800a6e4:	4293      	cmp	r3, r2
 800a6e6:	dd01      	ble.n	800a6ec <_printf_common+0x7c>
 800a6e8:	1a9b      	subs	r3, r3, r2
 800a6ea:	18ed      	adds	r5, r5, r3
 800a6ec:	2700      	movs	r7, #0
 800a6ee:	42bd      	cmp	r5, r7
 800a6f0:	d120      	bne.n	800a734 <_printf_common+0xc4>
 800a6f2:	2000      	movs	r0, #0
 800a6f4:	e010      	b.n	800a718 <_printf_common+0xa8>
 800a6f6:	3701      	adds	r7, #1
 800a6f8:	68e3      	ldr	r3, [r4, #12]
 800a6fa:	682a      	ldr	r2, [r5, #0]
 800a6fc:	1a9b      	subs	r3, r3, r2
 800a6fe:	42bb      	cmp	r3, r7
 800a700:	ddd2      	ble.n	800a6a8 <_printf_common+0x38>
 800a702:	0022      	movs	r2, r4
 800a704:	2301      	movs	r3, #1
 800a706:	3219      	adds	r2, #25
 800a708:	9901      	ldr	r1, [sp, #4]
 800a70a:	9800      	ldr	r0, [sp, #0]
 800a70c:	9e08      	ldr	r6, [sp, #32]
 800a70e:	47b0      	blx	r6
 800a710:	1c43      	adds	r3, r0, #1
 800a712:	d1f0      	bne.n	800a6f6 <_printf_common+0x86>
 800a714:	2001      	movs	r0, #1
 800a716:	4240      	negs	r0, r0
 800a718:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a71a:	2030      	movs	r0, #48	; 0x30
 800a71c:	18e1      	adds	r1, r4, r3
 800a71e:	3143      	adds	r1, #67	; 0x43
 800a720:	7008      	strb	r0, [r1, #0]
 800a722:	0021      	movs	r1, r4
 800a724:	1c5a      	adds	r2, r3, #1
 800a726:	3145      	adds	r1, #69	; 0x45
 800a728:	7809      	ldrb	r1, [r1, #0]
 800a72a:	18a2      	adds	r2, r4, r2
 800a72c:	3243      	adds	r2, #67	; 0x43
 800a72e:	3302      	adds	r3, #2
 800a730:	7011      	strb	r1, [r2, #0]
 800a732:	e7c1      	b.n	800a6b8 <_printf_common+0x48>
 800a734:	0022      	movs	r2, r4
 800a736:	2301      	movs	r3, #1
 800a738:	321a      	adds	r2, #26
 800a73a:	9901      	ldr	r1, [sp, #4]
 800a73c:	9800      	ldr	r0, [sp, #0]
 800a73e:	9e08      	ldr	r6, [sp, #32]
 800a740:	47b0      	blx	r6
 800a742:	1c43      	adds	r3, r0, #1
 800a744:	d0e6      	beq.n	800a714 <_printf_common+0xa4>
 800a746:	3701      	adds	r7, #1
 800a748:	e7d1      	b.n	800a6ee <_printf_common+0x7e>
	...

0800a74c <_printf_i>:
 800a74c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a74e:	b089      	sub	sp, #36	; 0x24
 800a750:	9204      	str	r2, [sp, #16]
 800a752:	000a      	movs	r2, r1
 800a754:	3243      	adds	r2, #67	; 0x43
 800a756:	9305      	str	r3, [sp, #20]
 800a758:	9003      	str	r0, [sp, #12]
 800a75a:	9202      	str	r2, [sp, #8]
 800a75c:	7e0a      	ldrb	r2, [r1, #24]
 800a75e:	000c      	movs	r4, r1
 800a760:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a762:	2a6e      	cmp	r2, #110	; 0x6e
 800a764:	d100      	bne.n	800a768 <_printf_i+0x1c>
 800a766:	e086      	b.n	800a876 <_printf_i+0x12a>
 800a768:	d81f      	bhi.n	800a7aa <_printf_i+0x5e>
 800a76a:	2a63      	cmp	r2, #99	; 0x63
 800a76c:	d033      	beq.n	800a7d6 <_printf_i+0x8a>
 800a76e:	d808      	bhi.n	800a782 <_printf_i+0x36>
 800a770:	2a00      	cmp	r2, #0
 800a772:	d100      	bne.n	800a776 <_printf_i+0x2a>
 800a774:	e08c      	b.n	800a890 <_printf_i+0x144>
 800a776:	2a58      	cmp	r2, #88	; 0x58
 800a778:	d04d      	beq.n	800a816 <_printf_i+0xca>
 800a77a:	0025      	movs	r5, r4
 800a77c:	3542      	adds	r5, #66	; 0x42
 800a77e:	702a      	strb	r2, [r5, #0]
 800a780:	e030      	b.n	800a7e4 <_printf_i+0x98>
 800a782:	2a64      	cmp	r2, #100	; 0x64
 800a784:	d001      	beq.n	800a78a <_printf_i+0x3e>
 800a786:	2a69      	cmp	r2, #105	; 0x69
 800a788:	d1f7      	bne.n	800a77a <_printf_i+0x2e>
 800a78a:	6819      	ldr	r1, [r3, #0]
 800a78c:	6825      	ldr	r5, [r4, #0]
 800a78e:	1d0a      	adds	r2, r1, #4
 800a790:	0628      	lsls	r0, r5, #24
 800a792:	d529      	bpl.n	800a7e8 <_printf_i+0x9c>
 800a794:	6808      	ldr	r0, [r1, #0]
 800a796:	601a      	str	r2, [r3, #0]
 800a798:	2800      	cmp	r0, #0
 800a79a:	da03      	bge.n	800a7a4 <_printf_i+0x58>
 800a79c:	232d      	movs	r3, #45	; 0x2d
 800a79e:	9a02      	ldr	r2, [sp, #8]
 800a7a0:	4240      	negs	r0, r0
 800a7a2:	7013      	strb	r3, [r2, #0]
 800a7a4:	4e6b      	ldr	r6, [pc, #428]	; (800a954 <_printf_i+0x208>)
 800a7a6:	270a      	movs	r7, #10
 800a7a8:	e04f      	b.n	800a84a <_printf_i+0xfe>
 800a7aa:	2a73      	cmp	r2, #115	; 0x73
 800a7ac:	d074      	beq.n	800a898 <_printf_i+0x14c>
 800a7ae:	d808      	bhi.n	800a7c2 <_printf_i+0x76>
 800a7b0:	2a6f      	cmp	r2, #111	; 0x6f
 800a7b2:	d01f      	beq.n	800a7f4 <_printf_i+0xa8>
 800a7b4:	2a70      	cmp	r2, #112	; 0x70
 800a7b6:	d1e0      	bne.n	800a77a <_printf_i+0x2e>
 800a7b8:	2220      	movs	r2, #32
 800a7ba:	6809      	ldr	r1, [r1, #0]
 800a7bc:	430a      	orrs	r2, r1
 800a7be:	6022      	str	r2, [r4, #0]
 800a7c0:	e003      	b.n	800a7ca <_printf_i+0x7e>
 800a7c2:	2a75      	cmp	r2, #117	; 0x75
 800a7c4:	d016      	beq.n	800a7f4 <_printf_i+0xa8>
 800a7c6:	2a78      	cmp	r2, #120	; 0x78
 800a7c8:	d1d7      	bne.n	800a77a <_printf_i+0x2e>
 800a7ca:	0022      	movs	r2, r4
 800a7cc:	2178      	movs	r1, #120	; 0x78
 800a7ce:	3245      	adds	r2, #69	; 0x45
 800a7d0:	7011      	strb	r1, [r2, #0]
 800a7d2:	4e61      	ldr	r6, [pc, #388]	; (800a958 <_printf_i+0x20c>)
 800a7d4:	e022      	b.n	800a81c <_printf_i+0xd0>
 800a7d6:	0025      	movs	r5, r4
 800a7d8:	681a      	ldr	r2, [r3, #0]
 800a7da:	3542      	adds	r5, #66	; 0x42
 800a7dc:	1d11      	adds	r1, r2, #4
 800a7de:	6019      	str	r1, [r3, #0]
 800a7e0:	6813      	ldr	r3, [r2, #0]
 800a7e2:	702b      	strb	r3, [r5, #0]
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	e065      	b.n	800a8b4 <_printf_i+0x168>
 800a7e8:	6808      	ldr	r0, [r1, #0]
 800a7ea:	601a      	str	r2, [r3, #0]
 800a7ec:	0669      	lsls	r1, r5, #25
 800a7ee:	d5d3      	bpl.n	800a798 <_printf_i+0x4c>
 800a7f0:	b200      	sxth	r0, r0
 800a7f2:	e7d1      	b.n	800a798 <_printf_i+0x4c>
 800a7f4:	6819      	ldr	r1, [r3, #0]
 800a7f6:	6825      	ldr	r5, [r4, #0]
 800a7f8:	1d08      	adds	r0, r1, #4
 800a7fa:	6018      	str	r0, [r3, #0]
 800a7fc:	6808      	ldr	r0, [r1, #0]
 800a7fe:	062e      	lsls	r6, r5, #24
 800a800:	d505      	bpl.n	800a80e <_printf_i+0xc2>
 800a802:	4e54      	ldr	r6, [pc, #336]	; (800a954 <_printf_i+0x208>)
 800a804:	2708      	movs	r7, #8
 800a806:	2a6f      	cmp	r2, #111	; 0x6f
 800a808:	d01b      	beq.n	800a842 <_printf_i+0xf6>
 800a80a:	270a      	movs	r7, #10
 800a80c:	e019      	b.n	800a842 <_printf_i+0xf6>
 800a80e:	066d      	lsls	r5, r5, #25
 800a810:	d5f7      	bpl.n	800a802 <_printf_i+0xb6>
 800a812:	b280      	uxth	r0, r0
 800a814:	e7f5      	b.n	800a802 <_printf_i+0xb6>
 800a816:	3145      	adds	r1, #69	; 0x45
 800a818:	4e4e      	ldr	r6, [pc, #312]	; (800a954 <_printf_i+0x208>)
 800a81a:	700a      	strb	r2, [r1, #0]
 800a81c:	6818      	ldr	r0, [r3, #0]
 800a81e:	6822      	ldr	r2, [r4, #0]
 800a820:	1d01      	adds	r1, r0, #4
 800a822:	6800      	ldr	r0, [r0, #0]
 800a824:	6019      	str	r1, [r3, #0]
 800a826:	0615      	lsls	r5, r2, #24
 800a828:	d521      	bpl.n	800a86e <_printf_i+0x122>
 800a82a:	07d3      	lsls	r3, r2, #31
 800a82c:	d502      	bpl.n	800a834 <_printf_i+0xe8>
 800a82e:	2320      	movs	r3, #32
 800a830:	431a      	orrs	r2, r3
 800a832:	6022      	str	r2, [r4, #0]
 800a834:	2710      	movs	r7, #16
 800a836:	2800      	cmp	r0, #0
 800a838:	d103      	bne.n	800a842 <_printf_i+0xf6>
 800a83a:	2320      	movs	r3, #32
 800a83c:	6822      	ldr	r2, [r4, #0]
 800a83e:	439a      	bics	r2, r3
 800a840:	6022      	str	r2, [r4, #0]
 800a842:	0023      	movs	r3, r4
 800a844:	2200      	movs	r2, #0
 800a846:	3343      	adds	r3, #67	; 0x43
 800a848:	701a      	strb	r2, [r3, #0]
 800a84a:	6863      	ldr	r3, [r4, #4]
 800a84c:	60a3      	str	r3, [r4, #8]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	db58      	blt.n	800a904 <_printf_i+0x1b8>
 800a852:	2204      	movs	r2, #4
 800a854:	6821      	ldr	r1, [r4, #0]
 800a856:	4391      	bics	r1, r2
 800a858:	6021      	str	r1, [r4, #0]
 800a85a:	2800      	cmp	r0, #0
 800a85c:	d154      	bne.n	800a908 <_printf_i+0x1bc>
 800a85e:	9d02      	ldr	r5, [sp, #8]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d05a      	beq.n	800a91a <_printf_i+0x1ce>
 800a864:	0025      	movs	r5, r4
 800a866:	7833      	ldrb	r3, [r6, #0]
 800a868:	3542      	adds	r5, #66	; 0x42
 800a86a:	702b      	strb	r3, [r5, #0]
 800a86c:	e055      	b.n	800a91a <_printf_i+0x1ce>
 800a86e:	0655      	lsls	r5, r2, #25
 800a870:	d5db      	bpl.n	800a82a <_printf_i+0xde>
 800a872:	b280      	uxth	r0, r0
 800a874:	e7d9      	b.n	800a82a <_printf_i+0xde>
 800a876:	681a      	ldr	r2, [r3, #0]
 800a878:	680d      	ldr	r5, [r1, #0]
 800a87a:	1d10      	adds	r0, r2, #4
 800a87c:	6949      	ldr	r1, [r1, #20]
 800a87e:	6018      	str	r0, [r3, #0]
 800a880:	6813      	ldr	r3, [r2, #0]
 800a882:	062e      	lsls	r6, r5, #24
 800a884:	d501      	bpl.n	800a88a <_printf_i+0x13e>
 800a886:	6019      	str	r1, [r3, #0]
 800a888:	e002      	b.n	800a890 <_printf_i+0x144>
 800a88a:	066d      	lsls	r5, r5, #25
 800a88c:	d5fb      	bpl.n	800a886 <_printf_i+0x13a>
 800a88e:	8019      	strh	r1, [r3, #0]
 800a890:	2300      	movs	r3, #0
 800a892:	9d02      	ldr	r5, [sp, #8]
 800a894:	6123      	str	r3, [r4, #16]
 800a896:	e04f      	b.n	800a938 <_printf_i+0x1ec>
 800a898:	681a      	ldr	r2, [r3, #0]
 800a89a:	1d11      	adds	r1, r2, #4
 800a89c:	6019      	str	r1, [r3, #0]
 800a89e:	6815      	ldr	r5, [r2, #0]
 800a8a0:	2100      	movs	r1, #0
 800a8a2:	6862      	ldr	r2, [r4, #4]
 800a8a4:	0028      	movs	r0, r5
 800a8a6:	f000 f859 	bl	800a95c <memchr>
 800a8aa:	2800      	cmp	r0, #0
 800a8ac:	d001      	beq.n	800a8b2 <_printf_i+0x166>
 800a8ae:	1b40      	subs	r0, r0, r5
 800a8b0:	6060      	str	r0, [r4, #4]
 800a8b2:	6863      	ldr	r3, [r4, #4]
 800a8b4:	6123      	str	r3, [r4, #16]
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	9a02      	ldr	r2, [sp, #8]
 800a8ba:	7013      	strb	r3, [r2, #0]
 800a8bc:	e03c      	b.n	800a938 <_printf_i+0x1ec>
 800a8be:	6923      	ldr	r3, [r4, #16]
 800a8c0:	002a      	movs	r2, r5
 800a8c2:	9904      	ldr	r1, [sp, #16]
 800a8c4:	9803      	ldr	r0, [sp, #12]
 800a8c6:	9d05      	ldr	r5, [sp, #20]
 800a8c8:	47a8      	blx	r5
 800a8ca:	1c43      	adds	r3, r0, #1
 800a8cc:	d03e      	beq.n	800a94c <_printf_i+0x200>
 800a8ce:	6823      	ldr	r3, [r4, #0]
 800a8d0:	079b      	lsls	r3, r3, #30
 800a8d2:	d415      	bmi.n	800a900 <_printf_i+0x1b4>
 800a8d4:	9b07      	ldr	r3, [sp, #28]
 800a8d6:	68e0      	ldr	r0, [r4, #12]
 800a8d8:	4298      	cmp	r0, r3
 800a8da:	da39      	bge.n	800a950 <_printf_i+0x204>
 800a8dc:	0018      	movs	r0, r3
 800a8de:	e037      	b.n	800a950 <_printf_i+0x204>
 800a8e0:	0022      	movs	r2, r4
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	3219      	adds	r2, #25
 800a8e6:	9904      	ldr	r1, [sp, #16]
 800a8e8:	9803      	ldr	r0, [sp, #12]
 800a8ea:	9e05      	ldr	r6, [sp, #20]
 800a8ec:	47b0      	blx	r6
 800a8ee:	1c43      	adds	r3, r0, #1
 800a8f0:	d02c      	beq.n	800a94c <_printf_i+0x200>
 800a8f2:	3501      	adds	r5, #1
 800a8f4:	68e3      	ldr	r3, [r4, #12]
 800a8f6:	9a07      	ldr	r2, [sp, #28]
 800a8f8:	1a9b      	subs	r3, r3, r2
 800a8fa:	42ab      	cmp	r3, r5
 800a8fc:	dcf0      	bgt.n	800a8e0 <_printf_i+0x194>
 800a8fe:	e7e9      	b.n	800a8d4 <_printf_i+0x188>
 800a900:	2500      	movs	r5, #0
 800a902:	e7f7      	b.n	800a8f4 <_printf_i+0x1a8>
 800a904:	2800      	cmp	r0, #0
 800a906:	d0ad      	beq.n	800a864 <_printf_i+0x118>
 800a908:	9d02      	ldr	r5, [sp, #8]
 800a90a:	0039      	movs	r1, r7
 800a90c:	f7f5 fc8a 	bl	8000224 <__aeabi_uidivmod>
 800a910:	5c73      	ldrb	r3, [r6, r1]
 800a912:	3d01      	subs	r5, #1
 800a914:	702b      	strb	r3, [r5, #0]
 800a916:	2800      	cmp	r0, #0
 800a918:	d1f7      	bne.n	800a90a <_printf_i+0x1be>
 800a91a:	2f08      	cmp	r7, #8
 800a91c:	d109      	bne.n	800a932 <_printf_i+0x1e6>
 800a91e:	6823      	ldr	r3, [r4, #0]
 800a920:	07db      	lsls	r3, r3, #31
 800a922:	d506      	bpl.n	800a932 <_printf_i+0x1e6>
 800a924:	6863      	ldr	r3, [r4, #4]
 800a926:	6922      	ldr	r2, [r4, #16]
 800a928:	4293      	cmp	r3, r2
 800a92a:	dc02      	bgt.n	800a932 <_printf_i+0x1e6>
 800a92c:	2330      	movs	r3, #48	; 0x30
 800a92e:	3d01      	subs	r5, #1
 800a930:	702b      	strb	r3, [r5, #0]
 800a932:	9b02      	ldr	r3, [sp, #8]
 800a934:	1b5b      	subs	r3, r3, r5
 800a936:	6123      	str	r3, [r4, #16]
 800a938:	9b05      	ldr	r3, [sp, #20]
 800a93a:	aa07      	add	r2, sp, #28
 800a93c:	9300      	str	r3, [sp, #0]
 800a93e:	0021      	movs	r1, r4
 800a940:	9b04      	ldr	r3, [sp, #16]
 800a942:	9803      	ldr	r0, [sp, #12]
 800a944:	f7ff fe94 	bl	800a670 <_printf_common>
 800a948:	1c43      	adds	r3, r0, #1
 800a94a:	d1b8      	bne.n	800a8be <_printf_i+0x172>
 800a94c:	2001      	movs	r0, #1
 800a94e:	4240      	negs	r0, r0
 800a950:	b009      	add	sp, #36	; 0x24
 800a952:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a954:	0800b391 	.word	0x0800b391
 800a958:	0800b3a2 	.word	0x0800b3a2

0800a95c <memchr>:
 800a95c:	b2c9      	uxtb	r1, r1
 800a95e:	1882      	adds	r2, r0, r2
 800a960:	4290      	cmp	r0, r2
 800a962:	d101      	bne.n	800a968 <memchr+0xc>
 800a964:	2000      	movs	r0, #0
 800a966:	4770      	bx	lr
 800a968:	7803      	ldrb	r3, [r0, #0]
 800a96a:	428b      	cmp	r3, r1
 800a96c:	d0fb      	beq.n	800a966 <memchr+0xa>
 800a96e:	3001      	adds	r0, #1
 800a970:	e7f6      	b.n	800a960 <memchr+0x4>

0800a972 <memmove>:
 800a972:	b510      	push	{r4, lr}
 800a974:	4288      	cmp	r0, r1
 800a976:	d902      	bls.n	800a97e <memmove+0xc>
 800a978:	188b      	adds	r3, r1, r2
 800a97a:	4298      	cmp	r0, r3
 800a97c:	d303      	bcc.n	800a986 <memmove+0x14>
 800a97e:	2300      	movs	r3, #0
 800a980:	e007      	b.n	800a992 <memmove+0x20>
 800a982:	5c8b      	ldrb	r3, [r1, r2]
 800a984:	5483      	strb	r3, [r0, r2]
 800a986:	3a01      	subs	r2, #1
 800a988:	d2fb      	bcs.n	800a982 <memmove+0x10>
 800a98a:	bd10      	pop	{r4, pc}
 800a98c:	5ccc      	ldrb	r4, [r1, r3]
 800a98e:	54c4      	strb	r4, [r0, r3]
 800a990:	3301      	adds	r3, #1
 800a992:	429a      	cmp	r2, r3
 800a994:	d1fa      	bne.n	800a98c <memmove+0x1a>
 800a996:	e7f8      	b.n	800a98a <memmove+0x18>

0800a998 <_free_r>:
 800a998:	b570      	push	{r4, r5, r6, lr}
 800a99a:	0005      	movs	r5, r0
 800a99c:	2900      	cmp	r1, #0
 800a99e:	d010      	beq.n	800a9c2 <_free_r+0x2a>
 800a9a0:	1f0c      	subs	r4, r1, #4
 800a9a2:	6823      	ldr	r3, [r4, #0]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	da00      	bge.n	800a9aa <_free_r+0x12>
 800a9a8:	18e4      	adds	r4, r4, r3
 800a9aa:	0028      	movs	r0, r5
 800a9ac:	f7ff fcfe 	bl	800a3ac <__malloc_lock>
 800a9b0:	4a1d      	ldr	r2, [pc, #116]	; (800aa28 <_free_r+0x90>)
 800a9b2:	6813      	ldr	r3, [r2, #0]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d105      	bne.n	800a9c4 <_free_r+0x2c>
 800a9b8:	6063      	str	r3, [r4, #4]
 800a9ba:	6014      	str	r4, [r2, #0]
 800a9bc:	0028      	movs	r0, r5
 800a9be:	f7ff fcf6 	bl	800a3ae <__malloc_unlock>
 800a9c2:	bd70      	pop	{r4, r5, r6, pc}
 800a9c4:	42a3      	cmp	r3, r4
 800a9c6:	d909      	bls.n	800a9dc <_free_r+0x44>
 800a9c8:	6821      	ldr	r1, [r4, #0]
 800a9ca:	1860      	adds	r0, r4, r1
 800a9cc:	4283      	cmp	r3, r0
 800a9ce:	d1f3      	bne.n	800a9b8 <_free_r+0x20>
 800a9d0:	6818      	ldr	r0, [r3, #0]
 800a9d2:	685b      	ldr	r3, [r3, #4]
 800a9d4:	1841      	adds	r1, r0, r1
 800a9d6:	6021      	str	r1, [r4, #0]
 800a9d8:	e7ee      	b.n	800a9b8 <_free_r+0x20>
 800a9da:	0013      	movs	r3, r2
 800a9dc:	685a      	ldr	r2, [r3, #4]
 800a9de:	2a00      	cmp	r2, #0
 800a9e0:	d001      	beq.n	800a9e6 <_free_r+0x4e>
 800a9e2:	42a2      	cmp	r2, r4
 800a9e4:	d9f9      	bls.n	800a9da <_free_r+0x42>
 800a9e6:	6819      	ldr	r1, [r3, #0]
 800a9e8:	1858      	adds	r0, r3, r1
 800a9ea:	42a0      	cmp	r0, r4
 800a9ec:	d10b      	bne.n	800aa06 <_free_r+0x6e>
 800a9ee:	6820      	ldr	r0, [r4, #0]
 800a9f0:	1809      	adds	r1, r1, r0
 800a9f2:	1858      	adds	r0, r3, r1
 800a9f4:	6019      	str	r1, [r3, #0]
 800a9f6:	4282      	cmp	r2, r0
 800a9f8:	d1e0      	bne.n	800a9bc <_free_r+0x24>
 800a9fa:	6810      	ldr	r0, [r2, #0]
 800a9fc:	6852      	ldr	r2, [r2, #4]
 800a9fe:	1841      	adds	r1, r0, r1
 800aa00:	6019      	str	r1, [r3, #0]
 800aa02:	605a      	str	r2, [r3, #4]
 800aa04:	e7da      	b.n	800a9bc <_free_r+0x24>
 800aa06:	42a0      	cmp	r0, r4
 800aa08:	d902      	bls.n	800aa10 <_free_r+0x78>
 800aa0a:	230c      	movs	r3, #12
 800aa0c:	602b      	str	r3, [r5, #0]
 800aa0e:	e7d5      	b.n	800a9bc <_free_r+0x24>
 800aa10:	6821      	ldr	r1, [r4, #0]
 800aa12:	1860      	adds	r0, r4, r1
 800aa14:	4282      	cmp	r2, r0
 800aa16:	d103      	bne.n	800aa20 <_free_r+0x88>
 800aa18:	6810      	ldr	r0, [r2, #0]
 800aa1a:	6852      	ldr	r2, [r2, #4]
 800aa1c:	1841      	adds	r1, r0, r1
 800aa1e:	6021      	str	r1, [r4, #0]
 800aa20:	6062      	str	r2, [r4, #4]
 800aa22:	605c      	str	r4, [r3, #4]
 800aa24:	e7ca      	b.n	800a9bc <_free_r+0x24>
 800aa26:	46c0      	nop			; (mov r8, r8)
 800aa28:	20000134 	.word	0x20000134

0800aa2c <_realloc_r>:
 800aa2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa2e:	0007      	movs	r7, r0
 800aa30:	000d      	movs	r5, r1
 800aa32:	0016      	movs	r6, r2
 800aa34:	2900      	cmp	r1, #0
 800aa36:	d105      	bne.n	800aa44 <_realloc_r+0x18>
 800aa38:	0011      	movs	r1, r2
 800aa3a:	f7ff fc27 	bl	800a28c <_malloc_r>
 800aa3e:	0004      	movs	r4, r0
 800aa40:	0020      	movs	r0, r4
 800aa42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa44:	2a00      	cmp	r2, #0
 800aa46:	d103      	bne.n	800aa50 <_realloc_r+0x24>
 800aa48:	f7ff ffa6 	bl	800a998 <_free_r>
 800aa4c:	0034      	movs	r4, r6
 800aa4e:	e7f7      	b.n	800aa40 <_realloc_r+0x14>
 800aa50:	f000 f812 	bl	800aa78 <_malloc_usable_size_r>
 800aa54:	002c      	movs	r4, r5
 800aa56:	42b0      	cmp	r0, r6
 800aa58:	d2f2      	bcs.n	800aa40 <_realloc_r+0x14>
 800aa5a:	0031      	movs	r1, r6
 800aa5c:	0038      	movs	r0, r7
 800aa5e:	f7ff fc15 	bl	800a28c <_malloc_r>
 800aa62:	1e04      	subs	r4, r0, #0
 800aa64:	d0ec      	beq.n	800aa40 <_realloc_r+0x14>
 800aa66:	0029      	movs	r1, r5
 800aa68:	0032      	movs	r2, r6
 800aa6a:	f7ff fbef 	bl	800a24c <memcpy>
 800aa6e:	0029      	movs	r1, r5
 800aa70:	0038      	movs	r0, r7
 800aa72:	f7ff ff91 	bl	800a998 <_free_r>
 800aa76:	e7e3      	b.n	800aa40 <_realloc_r+0x14>

0800aa78 <_malloc_usable_size_r>:
 800aa78:	1f0b      	subs	r3, r1, #4
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	1f18      	subs	r0, r3, #4
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	da01      	bge.n	800aa86 <_malloc_usable_size_r+0xe>
 800aa82:	580b      	ldr	r3, [r1, r0]
 800aa84:	18c0      	adds	r0, r0, r3
 800aa86:	4770      	bx	lr

0800aa88 <_init>:
 800aa88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa8a:	46c0      	nop			; (mov r8, r8)
 800aa8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa8e:	bc08      	pop	{r3}
 800aa90:	469e      	mov	lr, r3
 800aa92:	4770      	bx	lr

0800aa94 <_fini>:
 800aa94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa96:	46c0      	nop			; (mov r8, r8)
 800aa98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa9a:	bc08      	pop	{r3}
 800aa9c:	469e      	mov	lr, r3
 800aa9e:	4770      	bx	lr
