
project_L0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000833c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c0  080083fc  080083fc  000183fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bbc  08008bbc  000200bc  2**0
                  CONTENTS
  4 .ARM          00000000  08008bbc  08008bbc  000200bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008bbc  08008bbc  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bbc  08008bbc  00018bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008bc0  08008bc0  00018bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  08008bc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  200000bc  08008c80  000200bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  08008c80  00020340  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001861f  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002eb7  00000000  00000000  00038703  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001208  00000000  00000000  0003b5c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001078  00000000  00000000  0003c7c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017b6b  00000000  00000000  0003d840  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fc01  00000000  00000000  000553ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d074  00000000  00000000  00064fac  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f2020  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004260  00000000  00000000  000f209c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000bc 	.word	0x200000bc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080083e4 	.word	0x080083e4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000c0 	.word	0x200000c0
 8000104:	080083e4 	.word	0x080083e4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <SPI_CS_LOW>:
static uint8_t textSize;
static uint16_t textColor;
static uint16_t bg;

// ---- lower level functions ----
void SPI_CS_LOW() {HAL_GPIO_WritePin(CS_GPIO, CS_PIN, GPIO_PIN_RESET);}
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
 8000408:	4b04      	ldr	r3, [pc, #16]	; (800041c <SPI_CS_LOW+0x18>)
 800040a:	2200      	movs	r2, #0
 800040c:	2180      	movs	r1, #128	; 0x80
 800040e:	0018      	movs	r0, r3
 8000410:	f004 fa59 	bl	80048c6 <HAL_GPIO_WritePin>
 8000414:	46c0      	nop			; (mov r8, r8)
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	46c0      	nop			; (mov r8, r8)
 800041c:	50000800 	.word	0x50000800

08000420 <SPI_CS_HIGH>:

void SPI_CS_HIGH() {HAL_GPIO_WritePin(CS_GPIO, CS_PIN, GPIO_PIN_SET);}
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
 8000424:	4b04      	ldr	r3, [pc, #16]	; (8000438 <SPI_CS_HIGH+0x18>)
 8000426:	2201      	movs	r2, #1
 8000428:	2180      	movs	r1, #128	; 0x80
 800042a:	0018      	movs	r0, r3
 800042c:	f004 fa4b 	bl	80048c6 <HAL_GPIO_WritePin>
 8000430:	46c0      	nop			; (mov r8, r8)
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	50000800 	.word	0x50000800

0800043c <SPI_DC_LOW>:

void SPI_DC_LOW() {HAL_GPIO_WritePin(DC_GPIO, DC_PIN, GPIO_PIN_RESET);}
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
 8000440:	4b04      	ldr	r3, [pc, #16]	; (8000454 <SPI_DC_LOW+0x18>)
 8000442:	2200      	movs	r2, #0
 8000444:	2140      	movs	r1, #64	; 0x40
 8000446:	0018      	movs	r0, r3
 8000448:	f004 fa3d 	bl	80048c6 <HAL_GPIO_WritePin>
 800044c:	46c0      	nop			; (mov r8, r8)
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	46c0      	nop			; (mov r8, r8)
 8000454:	50000400 	.word	0x50000400

08000458 <SPI_DC_HIGH>:

void SPI_DC_HIGH() {HAL_GPIO_WritePin(DC_GPIO, DC_PIN, GPIO_PIN_SET);}
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
 800045c:	4b04      	ldr	r3, [pc, #16]	; (8000470 <SPI_DC_HIGH+0x18>)
 800045e:	2201      	movs	r2, #1
 8000460:	2140      	movs	r1, #64	; 0x40
 8000462:	0018      	movs	r0, r3
 8000464:	f004 fa2f 	bl	80048c6 <HAL_GPIO_WritePin>
 8000468:	46c0      	nop			; (mov r8, r8)
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	50000400 	.word	0x50000400

08000474 <sendCommand>:

// still ripped but now im changing it
void sendCommand(uint8_t cmd, uint8_t *args, uint16_t numArgs, SPI_HandleTypeDef *hspi) {
 8000474:	b580      	push	{r7, lr}
 8000476:	b084      	sub	sp, #16
 8000478:	af00      	add	r7, sp, #0
 800047a:	60b9      	str	r1, [r7, #8]
 800047c:	0011      	movs	r1, r2
 800047e:	607b      	str	r3, [r7, #4]
 8000480:	230f      	movs	r3, #15
 8000482:	18fb      	adds	r3, r7, r3
 8000484:	1c02      	adds	r2, r0, #0
 8000486:	701a      	strb	r2, [r3, #0]
 8000488:	230c      	movs	r3, #12
 800048a:	18fb      	adds	r3, r7, r3
 800048c:	1c0a      	adds	r2, r1, #0
 800048e:	801a      	strh	r2, [r3, #0]
	while (HAL_SPI_GetState(hspi) == HAL_SPI_STATE_BUSY_TX);		// block next transfer request while DMA transfer is ongoing
 8000490:	46c0      	nop			; (mov r8, r8)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	0018      	movs	r0, r3
 8000496:	f006 fcdd 	bl	8006e54 <HAL_SPI_GetState>
 800049a:	0003      	movs	r3, r0
 800049c:	2b03      	cmp	r3, #3
 800049e:	d0f8      	beq.n	8000492 <sendCommand+0x1e>
	SPI_CS_LOW();	// chip select
 80004a0:	f7ff ffb0 	bl	8000404 <SPI_CS_LOW>

	SPI_DC_LOW();	// command mode
 80004a4:	f7ff ffca 	bl	800043c <SPI_DC_LOW>
	HAL_SPI_Transmit(hspi, &cmd, 1, 1000);	// not using DMA bc it's only 1 byte
 80004a8:	23fa      	movs	r3, #250	; 0xfa
 80004aa:	009b      	lsls	r3, r3, #2
 80004ac:	220f      	movs	r2, #15
 80004ae:	18b9      	adds	r1, r7, r2
 80004b0:	6878      	ldr	r0, [r7, #4]
 80004b2:	2201      	movs	r2, #1
 80004b4:	f006 f9ec 	bl	8006890 <HAL_SPI_Transmit>

	SPI_DC_HIGH();	// data mode
 80004b8:	f7ff ffce 	bl	8000458 <SPI_DC_HIGH>
	if (numArgs) {
 80004bc:	230c      	movs	r3, #12
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	881b      	ldrh	r3, [r3, #0]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d007      	beq.n	80004d6 <sendCommand+0x62>
		HAL_SPI_Transmit_IT(hspi, args, numArgs);
 80004c6:	230c      	movs	r3, #12
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	881a      	ldrh	r2, [r3, #0]
 80004cc:	68b9      	ldr	r1, [r7, #8]
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	0018      	movs	r0, r3
 80004d2:	f006 fb2b 	bl	8006b2c <HAL_SPI_Transmit_IT>
//		HAL_SPI_Transmit_DMA(hspi, args, numArgs);
	}

//	SPI_CS_HIGH();	// chip select disable
}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	46bd      	mov	sp, r7
 80004da:	b004      	add	sp, #16
 80004dc:	bd80      	pop	{r7, pc}
	...

080004e0 <HAL_SPI_TxCpltCallback>:

// DMA callback on transfer compelete
// using only for sending data, but not commands
// dont send request when transfer is ongoing
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(CS_GPIO, CS_PIN) == GPIO_PIN_RESET) SPI_CS_HIGH();	// chip select disable
 80004e8:	4b06      	ldr	r3, [pc, #24]	; (8000504 <HAL_SPI_TxCpltCallback+0x24>)
 80004ea:	2180      	movs	r1, #128	; 0x80
 80004ec:	0018      	movs	r0, r3
 80004ee:	f004 f9cd 	bl	800488c <HAL_GPIO_ReadPin>
 80004f2:	1e03      	subs	r3, r0, #0
 80004f4:	d101      	bne.n	80004fa <HAL_SPI_TxCpltCallback+0x1a>
 80004f6:	f7ff ff93 	bl	8000420 <SPI_CS_HIGH>
}
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	46bd      	mov	sp, r7
 80004fe:	b002      	add	sp, #8
 8000500:	bd80      	pop	{r7, pc}
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	50000800 	.word	0x50000800

08000508 <displayInit>:

// array parser heavily based on Adafruit library code
void displayInit(uint8_t *args, SPI_HandleTypeDef *hspi) {
 8000508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	6039      	str	r1, [r7, #0]
	uint8_t  numCommands, cmd, numArgs;
	uint16_t ms;
	uint8_t index = 0;
 8000512:	220b      	movs	r2, #11
 8000514:	0011      	movs	r1, r2
 8000516:	18bb      	adds	r3, r7, r2
 8000518:	2200      	movs	r2, #0
 800051a:	701a      	strb	r2, [r3, #0]
	uint8_t data;

	numCommands = args[index++];   // Number of commands to follow
 800051c:	000a      	movs	r2, r1
 800051e:	18bb      	adds	r3, r7, r2
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	18ba      	adds	r2, r7, r2
 8000524:	1c59      	adds	r1, r3, #1
 8000526:	7011      	strb	r1, [r2, #0]
 8000528:	001a      	movs	r2, r3
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	189a      	adds	r2, r3, r2
 800052e:	230f      	movs	r3, #15
 8000530:	18fb      	adds	r3, r7, r3
 8000532:	7812      	ldrb	r2, [r2, #0]
 8000534:	701a      	strb	r2, [r3, #0]
	while(numCommands--) {                 // For each command...
 8000536:	e05e      	b.n	80005f6 <displayInit+0xee>
		cmd = args[index++];         // Read command
 8000538:	200b      	movs	r0, #11
 800053a:	183b      	adds	r3, r7, r0
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	183a      	adds	r2, r7, r0
 8000540:	1c59      	adds	r1, r3, #1
 8000542:	7011      	strb	r1, [r2, #0]
 8000544:	001a      	movs	r2, r3
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	189a      	adds	r2, r3, r2
 800054a:	230a      	movs	r3, #10
 800054c:	18fb      	adds	r3, r7, r3
 800054e:	7812      	ldrb	r2, [r2, #0]
 8000550:	701a      	strb	r2, [r3, #0]
		numArgs  = args[index++];    // Number of args to follow
 8000552:	183b      	adds	r3, r7, r0
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	183a      	adds	r2, r7, r0
 8000558:	1c59      	adds	r1, r3, #1
 800055a:	7011      	strb	r1, [r2, #0]
 800055c:	001a      	movs	r2, r3
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	189a      	adds	r2, r3, r2
 8000562:	2609      	movs	r6, #9
 8000564:	19bb      	adds	r3, r7, r6
 8000566:	7812      	ldrb	r2, [r2, #0]
 8000568:	701a      	strb	r2, [r3, #0]
		ms       = numArgs & ST_CMD_DELAY;   // If hibit set, delay follows args
 800056a:	19bb      	adds	r3, r7, r6
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	b29a      	uxth	r2, r3
 8000570:	210c      	movs	r1, #12
 8000572:	187b      	adds	r3, r7, r1
 8000574:	2180      	movs	r1, #128	; 0x80
 8000576:	400a      	ands	r2, r1
 8000578:	801a      	strh	r2, [r3, #0]
		numArgs &= ~ST_CMD_DELAY;            // Mask out delay bit
 800057a:	19bb      	adds	r3, r7, r6
 800057c:	19ba      	adds	r2, r7, r6
 800057e:	7812      	ldrb	r2, [r2, #0]
 8000580:	217f      	movs	r1, #127	; 0x7f
 8000582:	400a      	ands	r2, r1
 8000584:	701a      	strb	r2, [r3, #0]
		sendCommand(cmd, &args[index], numArgs, hspi);
 8000586:	0005      	movs	r5, r0
 8000588:	183b      	adds	r3, r7, r0
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	687a      	ldr	r2, [r7, #4]
 800058e:	18d1      	adds	r1, r2, r3
 8000590:	19bb      	adds	r3, r7, r6
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	b29a      	uxth	r2, r3
 8000596:	683c      	ldr	r4, [r7, #0]
 8000598:	230a      	movs	r3, #10
 800059a:	18fb      	adds	r3, r7, r3
 800059c:	7818      	ldrb	r0, [r3, #0]
 800059e:	0023      	movs	r3, r4
 80005a0:	f7ff ff68 	bl	8000474 <sendCommand>
		index += numArgs;
 80005a4:	0028      	movs	r0, r5
 80005a6:	183b      	adds	r3, r7, r0
 80005a8:	1839      	adds	r1, r7, r0
 80005aa:	19ba      	adds	r2, r7, r6
 80005ac:	7809      	ldrb	r1, [r1, #0]
 80005ae:	7812      	ldrb	r2, [r2, #0]
 80005b0:	188a      	adds	r2, r1, r2
 80005b2:	701a      	strb	r2, [r3, #0]

		if(ms) {
 80005b4:	210c      	movs	r1, #12
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	881b      	ldrh	r3, [r3, #0]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d01b      	beq.n	80005f6 <displayInit+0xee>
			ms = args[index++]; // Read post-command delay time (ms)
 80005be:	220b      	movs	r2, #11
 80005c0:	18bb      	adds	r3, r7, r2
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	18ba      	adds	r2, r7, r2
 80005c6:	1c59      	adds	r1, r3, #1
 80005c8:	7011      	strb	r1, [r2, #0]
 80005ca:	001a      	movs	r2, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	189b      	adds	r3, r3, r2
 80005d0:	781a      	ldrb	r2, [r3, #0]
 80005d2:	210c      	movs	r1, #12
 80005d4:	187b      	adds	r3, r7, r1
 80005d6:	801a      	strh	r2, [r3, #0]
			if(ms == 255) ms = 500;     // If 255, delay for 500 ms
 80005d8:	187b      	adds	r3, r7, r1
 80005da:	881b      	ldrh	r3, [r3, #0]
 80005dc:	2bff      	cmp	r3, #255	; 0xff
 80005de:	d104      	bne.n	80005ea <displayInit+0xe2>
 80005e0:	230c      	movs	r3, #12
 80005e2:	18fb      	adds	r3, r7, r3
 80005e4:	22fa      	movs	r2, #250	; 0xfa
 80005e6:	0052      	lsls	r2, r2, #1
 80005e8:	801a      	strh	r2, [r3, #0]
			HAL_Delay(ms);
 80005ea:	230c      	movs	r3, #12
 80005ec:	18fb      	adds	r3, r7, r3
 80005ee:	881b      	ldrh	r3, [r3, #0]
 80005f0:	0018      	movs	r0, r3
 80005f2:	f003 fb35 	bl	8003c60 <HAL_Delay>
	while(numCommands--) {                 // For each command...
 80005f6:	220f      	movs	r2, #15
 80005f8:	18bb      	adds	r3, r7, r2
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	18ba      	adds	r2, r7, r2
 80005fe:	1e59      	subs	r1, r3, #1
 8000600:	7011      	strb	r1, [r2, #0]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d198      	bne.n	8000538 <displayInit+0x30>
		}
	}

	// note: this line may be doing more work than I think
	// (hard to read in datasheet)
	data = 0xC0;
 8000606:	2108      	movs	r1, #8
 8000608:	187b      	adds	r3, r7, r1
 800060a:	22c0      	movs	r2, #192	; 0xc0
 800060c:	701a      	strb	r2, [r3, #0]
	sendCommand(ST77XX_MADCTL, &data, 1, hspi);
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	1879      	adds	r1, r7, r1
 8000612:	2201      	movs	r2, #1
 8000614:	2036      	movs	r0, #54	; 0x36
 8000616:	f7ff ff2d 	bl	8000474 <sendCommand>
}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	46bd      	mov	sp, r7
 800061e:	b005      	add	sp, #20
 8000620:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000624 <TFT_startup>:

void TFT_startup(SPI_HandleTypeDef *hspi) {
 8000624:	b590      	push	{r4, r7, lr}
 8000626:	b0a3      	sub	sp, #140	; 0x8c
 8000628:	af02      	add	r7, sp, #8
 800062a:	6078      	str	r0, [r7, #4]
	// startup sequence: rcmd1->rcmd2red->rcmd3
	uint8_t initCommands[] = {
 800062c:	240c      	movs	r4, #12
 800062e:	193a      	adds	r2, r7, r4
 8000630:	4b14      	ldr	r3, [pc, #80]	; (8000684 <TFT_startup+0x60>)
 8000632:	0010      	movs	r0, r2
 8000634:	0019      	movs	r1, r3
 8000636:	2371      	movs	r3, #113	; 0x71
 8000638:	001a      	movs	r2, r3
 800063a:	f007 fac3 	bl	8007bc4 <memcpy>
			10,                           //     10 ms delay
		ST77XX_DISPON,    ST_CMD_DELAY, //  4: Main screen turn on, no args w/delay
			100	                        //     100 ms delay
	};

	displayInit(initCommands, hspi);
 800063e:	687a      	ldr	r2, [r7, #4]
 8000640:	193b      	adds	r3, r7, r4
 8000642:	0011      	movs	r1, r2
 8000644:	0018      	movs	r0, r3
 8000646:	f7ff ff5f 	bl	8000508 <displayInit>
	setAddrWindow(0, 0, WIDTH, HEIGHT, hspi);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	23a0      	movs	r3, #160	; 0xa0
 8000650:	2280      	movs	r2, #128	; 0x80
 8000652:	2100      	movs	r1, #0
 8000654:	2000      	movs	r0, #0
 8000656:	f000 f821 	bl	800069c <setAddrWindow>

	// set the global variables
	cursorX = 0;
 800065a:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <TFT_startup+0x64>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	cursorY = 0;
 8000660:	4b0a      	ldr	r3, [pc, #40]	; (800068c <TFT_startup+0x68>)
 8000662:	2200      	movs	r2, #0
 8000664:	701a      	strb	r2, [r3, #0]
	textSize = 1;
 8000666:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <TFT_startup+0x6c>)
 8000668:	2201      	movs	r2, #1
 800066a:	701a      	strb	r2, [r3, #0]
	textColor = ST77XX_BLACK;
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <TFT_startup+0x70>)
 800066e:	2200      	movs	r2, #0
 8000670:	801a      	strh	r2, [r3, #0]
	bg = ST77XX_WHITE;
 8000672:	4b09      	ldr	r3, [pc, #36]	; (8000698 <TFT_startup+0x74>)
 8000674:	2201      	movs	r2, #1
 8000676:	4252      	negs	r2, r2
 8000678:	801a      	strh	r2, [r3, #0]
}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	46bd      	mov	sp, r7
 800067e:	b021      	add	sp, #132	; 0x84
 8000680:	bd90      	pop	{r4, r7, pc}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	080083fc 	.word	0x080083fc
 8000688:	200000d8 	.word	0x200000d8
 800068c:	200000d9 	.word	0x200000d9
 8000690:	200000da 	.word	0x200000da
 8000694:	200000dc 	.word	0x200000dc
 8000698:	200000de 	.word	0x200000de

0800069c <setAddrWindow>:

// draw something: set addr window -> write to ram memory
// sets specific area on display to write pixels to
// x and y for upper left corner, w for width, h for height
void setAddrWindow(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SPI_HandleTypeDef *hspi) {
 800069c:	b5b0      	push	{r4, r5, r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	0005      	movs	r5, r0
 80006a4:	000c      	movs	r4, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	1dbb      	adds	r3, r7, #6
 80006ac:	1c2a      	adds	r2, r5, #0
 80006ae:	801a      	strh	r2, [r3, #0]
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	1c22      	adds	r2, r4, #0
 80006b4:	801a      	strh	r2, [r3, #0]
 80006b6:	1cbb      	adds	r3, r7, #2
 80006b8:	1c02      	adds	r2, r0, #0
 80006ba:	801a      	strh	r2, [r3, #0]
 80006bc:	003b      	movs	r3, r7
 80006be:	1c0a      	adds	r2, r1, #0
 80006c0:	801a      	strh	r2, [r3, #0]
	// not really needed for our display
	x += _xstart;
 80006c2:	1dbb      	adds	r3, r7, #6
 80006c4:	1dba      	adds	r2, r7, #6
 80006c6:	8812      	ldrh	r2, [r2, #0]
 80006c8:	801a      	strh	r2, [r3, #0]
	y += _ystart;
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	1d3a      	adds	r2, r7, #4
 80006ce:	8812      	ldrh	r2, [r2, #0]
 80006d0:	801a      	strh	r2, [r3, #0]

	uint8_t temp[4];
	temp[0] = (x & (0xFF00)) >> 8;
 80006d2:	1dbb      	adds	r3, r7, #6
 80006d4:	881b      	ldrh	r3, [r3, #0]
 80006d6:	0a1b      	lsrs	r3, r3, #8
 80006d8:	b29b      	uxth	r3, r3
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	210c      	movs	r1, #12
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	701a      	strb	r2, [r3, #0]
	temp[1] = x & (0xFF);
 80006e2:	1dbb      	adds	r3, r7, #6
 80006e4:	881b      	ldrh	r3, [r3, #0]
 80006e6:	b2da      	uxtb	r2, r3
 80006e8:	187b      	adds	r3, r7, r1
 80006ea:	705a      	strb	r2, [r3, #1]
	temp[2] = ((x+w-1) & (0xFF00)) >> 8;
 80006ec:	1dbb      	adds	r3, r7, #6
 80006ee:	881a      	ldrh	r2, [r3, #0]
 80006f0:	1cbb      	adds	r3, r7, #2
 80006f2:	881b      	ldrh	r3, [r3, #0]
 80006f4:	18d3      	adds	r3, r2, r3
 80006f6:	3b01      	subs	r3, #1
 80006f8:	121b      	asrs	r3, r3, #8
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	187b      	adds	r3, r7, r1
 80006fe:	709a      	strb	r2, [r3, #2]
	temp[3] = (x+w-1) & (0xFF);
 8000700:	1dbb      	adds	r3, r7, #6
 8000702:	881b      	ldrh	r3, [r3, #0]
 8000704:	b2da      	uxtb	r2, r3
 8000706:	1cbb      	adds	r3, r7, #2
 8000708:	881b      	ldrh	r3, [r3, #0]
 800070a:	b2db      	uxtb	r3, r3
 800070c:	18d3      	adds	r3, r2, r3
 800070e:	b2db      	uxtb	r3, r3
 8000710:	3b01      	subs	r3, #1
 8000712:	b2da      	uxtb	r2, r3
 8000714:	187b      	adds	r3, r7, r1
 8000716:	70da      	strb	r2, [r3, #3]
	sendCommand(ST77XX_CASET, temp, 4, hspi);
 8000718:	6a3b      	ldr	r3, [r7, #32]
 800071a:	000c      	movs	r4, r1
 800071c:	1879      	adds	r1, r7, r1
 800071e:	2204      	movs	r2, #4
 8000720:	202a      	movs	r0, #42	; 0x2a
 8000722:	f7ff fea7 	bl	8000474 <sendCommand>

	temp[0] = (y & (0xFF00)) >> 8;
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	881b      	ldrh	r3, [r3, #0]
 800072a:	0a1b      	lsrs	r3, r3, #8
 800072c:	b29b      	uxth	r3, r3
 800072e:	b2da      	uxtb	r2, r3
 8000730:	0021      	movs	r1, r4
 8000732:	187b      	adds	r3, r7, r1
 8000734:	701a      	strb	r2, [r3, #0]
	temp[1] = y & (0xFF);
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	881b      	ldrh	r3, [r3, #0]
 800073a:	b2da      	uxtb	r2, r3
 800073c:	187b      	adds	r3, r7, r1
 800073e:	705a      	strb	r2, [r3, #1]
	temp[2] = ((y+h-1) & (0xFF00)) >> 8;
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	881a      	ldrh	r2, [r3, #0]
 8000744:	003b      	movs	r3, r7
 8000746:	881b      	ldrh	r3, [r3, #0]
 8000748:	18d3      	adds	r3, r2, r3
 800074a:	3b01      	subs	r3, #1
 800074c:	121b      	asrs	r3, r3, #8
 800074e:	b2da      	uxtb	r2, r3
 8000750:	187b      	adds	r3, r7, r1
 8000752:	709a      	strb	r2, [r3, #2]
	temp[3] = (y+h-1) & (0x00FF);
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	b2da      	uxtb	r2, r3
 800075a:	003b      	movs	r3, r7
 800075c:	881b      	ldrh	r3, [r3, #0]
 800075e:	b2db      	uxtb	r3, r3
 8000760:	18d3      	adds	r3, r2, r3
 8000762:	b2db      	uxtb	r3, r3
 8000764:	3b01      	subs	r3, #1
 8000766:	b2da      	uxtb	r2, r3
 8000768:	187b      	adds	r3, r7, r1
 800076a:	70da      	strb	r2, [r3, #3]
	sendCommand(ST77XX_RASET, temp, 4, hspi);
 800076c:	6a3b      	ldr	r3, [r7, #32]
 800076e:	1879      	adds	r1, r7, r1
 8000770:	2204      	movs	r2, #4
 8000772:	202b      	movs	r0, #43	; 0x2b
 8000774:	f7ff fe7e 	bl	8000474 <sendCommand>
}
 8000778:	46c0      	nop			; (mov r8, r8)
 800077a:	46bd      	mov	sp, r7
 800077c:	b004      	add	sp, #16
 800077e:	bdb0      	pop	{r4, r5, r7, pc}

08000780 <colorFixer>:
// 8-bit spi bus wants msb first; in array, lowest index is sent first
// because L4 is little-endian
//   for 16-bit value, it sends lower byte before upper byte
//   resulting in device thinking lower byte is upper byte
// this switches byte order around
uint16_t colorFixer(uint16_t color) {
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	0002      	movs	r2, r0
 8000788:	1dbb      	adds	r3, r7, #6
 800078a:	801a      	strh	r2, [r3, #0]
	uint8_t a = color & 0xFF;
 800078c:	210f      	movs	r1, #15
 800078e:	187b      	adds	r3, r7, r1
 8000790:	1dba      	adds	r2, r7, #6
 8000792:	8812      	ldrh	r2, [r2, #0]
 8000794:	701a      	strb	r2, [r3, #0]
	uint8_t b = (color & 0xFF00) >> 8;
 8000796:	1dbb      	adds	r3, r7, #6
 8000798:	881b      	ldrh	r3, [r3, #0]
 800079a:	0a1b      	lsrs	r3, r3, #8
 800079c:	b29a      	uxth	r2, r3
 800079e:	200e      	movs	r0, #14
 80007a0:	183b      	adds	r3, r7, r0
 80007a2:	701a      	strb	r2, [r3, #0]
	uint16_t ret = (a << 8) | b;
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	021b      	lsls	r3, r3, #8
 80007aa:	b21a      	sxth	r2, r3
 80007ac:	183b      	adds	r3, r7, r0
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	b21b      	sxth	r3, r3
 80007b2:	4313      	orrs	r3, r2
 80007b4:	b21a      	sxth	r2, r3
 80007b6:	210c      	movs	r1, #12
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	801a      	strh	r2, [r3, #0]

	return ret;
 80007bc:	187b      	adds	r3, r7, r1
 80007be:	881b      	ldrh	r3, [r3, #0]
}
 80007c0:	0018      	movs	r0, r3
 80007c2:	46bd      	mov	sp, r7
 80007c4:	b004      	add	sp, #16
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <drawHLine>:
	setAddrWindow(x, y, 1, 1, hspi);
	uint16_t tempColor = colorFixer(color);		// else we're using address of something passed by value
	sendCommand(ST77XX_RAMWR, &tempColor, 2, hspi);
}

void drawHLine(uint8_t x, uint8_t y, uint8_t size, uint16_t color, SPI_HandleTypeDef *hspi) {
 80007c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ca:	b091      	sub	sp, #68	; 0x44
 80007cc:	af02      	add	r7, sp, #8
 80007ce:	000c      	movs	r4, r1
 80007d0:	0016      	movs	r6, r2
 80007d2:	0019      	movs	r1, r3
 80007d4:	2327      	movs	r3, #39	; 0x27
 80007d6:	18fa      	adds	r2, r7, r3
 80007d8:	1c03      	adds	r3, r0, #0
 80007da:	7013      	strb	r3, [r2, #0]
 80007dc:	2326      	movs	r3, #38	; 0x26
 80007de:	18fb      	adds	r3, r7, r3
 80007e0:	1c22      	adds	r2, r4, #0
 80007e2:	701a      	strb	r2, [r3, #0]
 80007e4:	2325      	movs	r3, #37	; 0x25
 80007e6:	18fb      	adds	r3, r7, r3
 80007e8:	1c32      	adds	r2, r6, #0
 80007ea:	701a      	strb	r2, [r3, #0]
 80007ec:	2322      	movs	r3, #34	; 0x22
 80007ee:	18fb      	adds	r3, r7, r3
 80007f0:	1c0a      	adds	r2, r1, #0
 80007f2:	801a      	strh	r2, [r3, #0]
 80007f4:	466b      	mov	r3, sp
 80007f6:	001e      	movs	r6, r3
	// bounds checking
	if (x < 0) x = 0;						// don't set x out of bounds
	if (x > WIDTH) x = WIDTH;
 80007f8:	2327      	movs	r3, #39	; 0x27
 80007fa:	18fb      	adds	r3, r7, r3
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	2b80      	cmp	r3, #128	; 0x80
 8000800:	d903      	bls.n	800080a <drawHLine+0x42>
 8000802:	2327      	movs	r3, #39	; 0x27
 8000804:	18fb      	adds	r3, r7, r3
 8000806:	2280      	movs	r2, #128	; 0x80
 8000808:	701a      	strb	r2, [r3, #0]
	if (x+size > WIDTH) size = WIDTH-x;		// don't set size so line draws out of bounds
 800080a:	2327      	movs	r3, #39	; 0x27
 800080c:	18fb      	adds	r3, r7, r3
 800080e:	781a      	ldrb	r2, [r3, #0]
 8000810:	2325      	movs	r3, #37	; 0x25
 8000812:	18fb      	adds	r3, r7, r3
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	18d3      	adds	r3, r2, r3
 8000818:	2b80      	cmp	r3, #128	; 0x80
 800081a:	dd08      	ble.n	800082e <drawHLine+0x66>
 800081c:	2325      	movs	r3, #37	; 0x25
 800081e:	18fb      	adds	r3, r7, r3
 8000820:	2227      	movs	r2, #39	; 0x27
 8000822:	18ba      	adds	r2, r7, r2
 8000824:	7812      	ldrb	r2, [r2, #0]
 8000826:	2180      	movs	r1, #128	; 0x80
 8000828:	4249      	negs	r1, r1
 800082a:	1a8a      	subs	r2, r1, r2
 800082c:	701a      	strb	r2, [r3, #0]
	if (x+size < 0) size = 0-x;
	if ((y > HEIGHT) || (y < 0)) return;	// don't draw if y is out of bounds
 800082e:	2326      	movs	r3, #38	; 0x26
 8000830:	18fb      	adds	r3, r7, r3
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2ba0      	cmp	r3, #160	; 0xa0
 8000836:	d868      	bhi.n	800090a <drawHLine+0x142>

	setAddrWindow(x, y, size, 1, hspi);
 8000838:	2327      	movs	r3, #39	; 0x27
 800083a:	18fb      	adds	r3, r7, r3
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	b298      	uxth	r0, r3
 8000840:	2326      	movs	r3, #38	; 0x26
 8000842:	18fb      	adds	r3, r7, r3
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	b299      	uxth	r1, r3
 8000848:	2325      	movs	r3, #37	; 0x25
 800084a:	18fb      	adds	r3, r7, r3
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	b29a      	uxth	r2, r3
 8000850:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000852:	9300      	str	r3, [sp, #0]
 8000854:	2301      	movs	r3, #1
 8000856:	f7ff ff21 	bl	800069c <setAddrWindow>
	uint16_t colors[size];
 800085a:	2325      	movs	r3, #37	; 0x25
 800085c:	18fb      	adds	r3, r7, r3
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	001a      	movs	r2, r3
 8000862:	3a01      	subs	r2, #1
 8000864:	633a      	str	r2, [r7, #48]	; 0x30
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	2200      	movs	r2, #0
 800086a:	60fa      	str	r2, [r7, #12]
 800086c:	68b8      	ldr	r0, [r7, #8]
 800086e:	68f9      	ldr	r1, [r7, #12]
 8000870:	0002      	movs	r2, r0
 8000872:	0f12      	lsrs	r2, r2, #28
 8000874:	000c      	movs	r4, r1
 8000876:	0124      	lsls	r4, r4, #4
 8000878:	61fc      	str	r4, [r7, #28]
 800087a:	69fc      	ldr	r4, [r7, #28]
 800087c:	4314      	orrs	r4, r2
 800087e:	61fc      	str	r4, [r7, #28]
 8000880:	0002      	movs	r2, r0
 8000882:	0112      	lsls	r2, r2, #4
 8000884:	61ba      	str	r2, [r7, #24]
 8000886:	603b      	str	r3, [r7, #0]
 8000888:	2200      	movs	r2, #0
 800088a:	607a      	str	r2, [r7, #4]
 800088c:	6838      	ldr	r0, [r7, #0]
 800088e:	6879      	ldr	r1, [r7, #4]
 8000890:	0002      	movs	r2, r0
 8000892:	0f12      	lsrs	r2, r2, #28
 8000894:	000c      	movs	r4, r1
 8000896:	0124      	lsls	r4, r4, #4
 8000898:	617c      	str	r4, [r7, #20]
 800089a:	697c      	ldr	r4, [r7, #20]
 800089c:	4314      	orrs	r4, r2
 800089e:	617c      	str	r4, [r7, #20]
 80008a0:	0002      	movs	r2, r0
 80008a2:	0112      	lsls	r2, r2, #4
 80008a4:	613a      	str	r2, [r7, #16]
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	3301      	adds	r3, #1
 80008aa:	3307      	adds	r3, #7
 80008ac:	08db      	lsrs	r3, r3, #3
 80008ae:	00db      	lsls	r3, r3, #3
 80008b0:	466a      	mov	r2, sp
 80008b2:	1ad3      	subs	r3, r2, r3
 80008b4:	469d      	mov	sp, r3
 80008b6:	ab02      	add	r3, sp, #8
 80008b8:	3301      	adds	r3, #1
 80008ba:	085b      	lsrs	r3, r3, #1
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i < size; i++) {		// better way to make array of 1 color; SPI without moving address of sent?
 80008c0:	2300      	movs	r3, #0
 80008c2:	637b      	str	r3, [r7, #52]	; 0x34
 80008c4:	e00e      	b.n	80008e4 <drawHLine+0x11c>
		colors[i] = colorFixer(color);
 80008c6:	2322      	movs	r3, #34	; 0x22
 80008c8:	18fb      	adds	r3, r7, r3
 80008ca:	881b      	ldrh	r3, [r3, #0]
 80008cc:	0018      	movs	r0, r3
 80008ce:	f7ff ff57 	bl	8000780 <colorFixer>
 80008d2:	0003      	movs	r3, r0
 80008d4:	0019      	movs	r1, r3
 80008d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80008da:	0052      	lsls	r2, r2, #1
 80008dc:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < size; i++) {		// better way to make array of 1 color; SPI without moving address of sent?
 80008de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008e0:	3301      	adds	r3, #1
 80008e2:	637b      	str	r3, [r7, #52]	; 0x34
 80008e4:	2325      	movs	r3, #37	; 0x25
 80008e6:	18fb      	adds	r3, r7, r3
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80008ec:	429a      	cmp	r2, r3
 80008ee:	dbea      	blt.n	80008c6 <drawHLine+0xfe>
//		colors[i] = color;
	}

	sendCommand(ST77XX_RAMWR, colors, size*2, hspi);
 80008f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80008f2:	2325      	movs	r3, #37	; 0x25
 80008f4:	18fb      	adds	r3, r7, r3
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	18db      	adds	r3, r3, r3
 80008fc:	b29a      	uxth	r2, r3
 80008fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000900:	202c      	movs	r0, #44	; 0x2c
 8000902:	f7ff fdb7 	bl	8000474 <sendCommand>
 8000906:	46b5      	mov	sp, r6
 8000908:	e001      	b.n	800090e <drawHLine+0x146>
	if ((y > HEIGHT) || (y < 0)) return;	// don't draw if y is out of bounds
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	46b5      	mov	sp, r6
}
 800090e:	46bd      	mov	sp, r7
 8000910:	b00f      	add	sp, #60	; 0x3c
 8000912:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000914 <drawVLine>:

void drawVLine(uint8_t x, uint8_t y, uint8_t size, uint16_t color, SPI_HandleTypeDef *hspi) {
 8000914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000916:	b091      	sub	sp, #68	; 0x44
 8000918:	af02      	add	r7, sp, #8
 800091a:	000c      	movs	r4, r1
 800091c:	0016      	movs	r6, r2
 800091e:	0019      	movs	r1, r3
 8000920:	2327      	movs	r3, #39	; 0x27
 8000922:	18fa      	adds	r2, r7, r3
 8000924:	1c03      	adds	r3, r0, #0
 8000926:	7013      	strb	r3, [r2, #0]
 8000928:	2326      	movs	r3, #38	; 0x26
 800092a:	18fb      	adds	r3, r7, r3
 800092c:	1c22      	adds	r2, r4, #0
 800092e:	701a      	strb	r2, [r3, #0]
 8000930:	2325      	movs	r3, #37	; 0x25
 8000932:	18fb      	adds	r3, r7, r3
 8000934:	1c32      	adds	r2, r6, #0
 8000936:	701a      	strb	r2, [r3, #0]
 8000938:	2322      	movs	r3, #34	; 0x22
 800093a:	18fb      	adds	r3, r7, r3
 800093c:	1c0a      	adds	r2, r1, #0
 800093e:	801a      	strh	r2, [r3, #0]
 8000940:	466b      	mov	r3, sp
 8000942:	001e      	movs	r6, r3
	// bounds checking
	if (y < 0) y = 0;						// don't set x out of bounds
	if (y > HEIGHT) y = HEIGHT;
 8000944:	2326      	movs	r3, #38	; 0x26
 8000946:	18fb      	adds	r3, r7, r3
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	2ba0      	cmp	r3, #160	; 0xa0
 800094c:	d903      	bls.n	8000956 <drawVLine+0x42>
 800094e:	2326      	movs	r3, #38	; 0x26
 8000950:	18fb      	adds	r3, r7, r3
 8000952:	22a0      	movs	r2, #160	; 0xa0
 8000954:	701a      	strb	r2, [r3, #0]
	if (y+size > HEIGHT) size = HEIGHT-y;	// don't set size so line draws out of bounds
 8000956:	2326      	movs	r3, #38	; 0x26
 8000958:	18fb      	adds	r3, r7, r3
 800095a:	781a      	ldrb	r2, [r3, #0]
 800095c:	2325      	movs	r3, #37	; 0x25
 800095e:	18fb      	adds	r3, r7, r3
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	18d3      	adds	r3, r2, r3
 8000964:	2ba0      	cmp	r3, #160	; 0xa0
 8000966:	dd08      	ble.n	800097a <drawVLine+0x66>
 8000968:	2325      	movs	r3, #37	; 0x25
 800096a:	18fb      	adds	r3, r7, r3
 800096c:	2226      	movs	r2, #38	; 0x26
 800096e:	18ba      	adds	r2, r7, r2
 8000970:	7812      	ldrb	r2, [r2, #0]
 8000972:	2160      	movs	r1, #96	; 0x60
 8000974:	4249      	negs	r1, r1
 8000976:	1a8a      	subs	r2, r1, r2
 8000978:	701a      	strb	r2, [r3, #0]
	if (y+size < 0) size = 0-y;
	if ((x > WIDTH) || (x < 0)) return;		// don't draw if x is out of bounds
 800097a:	2327      	movs	r3, #39	; 0x27
 800097c:	18fb      	adds	r3, r7, r3
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b80      	cmp	r3, #128	; 0x80
 8000982:	d869      	bhi.n	8000a58 <drawVLine+0x144>

	setAddrWindow(x, y, 1, size, hspi);
 8000984:	2327      	movs	r3, #39	; 0x27
 8000986:	18fb      	adds	r3, r7, r3
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	b298      	uxth	r0, r3
 800098c:	2326      	movs	r3, #38	; 0x26
 800098e:	18fb      	adds	r3, r7, r3
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	b299      	uxth	r1, r3
 8000994:	2325      	movs	r3, #37	; 0x25
 8000996:	18fb      	adds	r3, r7, r3
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	b29a      	uxth	r2, r3
 800099c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800099e:	9300      	str	r3, [sp, #0]
 80009a0:	0013      	movs	r3, r2
 80009a2:	2201      	movs	r2, #1
 80009a4:	f7ff fe7a 	bl	800069c <setAddrWindow>
	uint16_t colors[size];
 80009a8:	2325      	movs	r3, #37	; 0x25
 80009aa:	18fb      	adds	r3, r7, r3
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	001a      	movs	r2, r3
 80009b0:	3a01      	subs	r2, #1
 80009b2:	633a      	str	r2, [r7, #48]	; 0x30
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	2200      	movs	r2, #0
 80009b8:	60fa      	str	r2, [r7, #12]
 80009ba:	68b8      	ldr	r0, [r7, #8]
 80009bc:	68f9      	ldr	r1, [r7, #12]
 80009be:	0002      	movs	r2, r0
 80009c0:	0f12      	lsrs	r2, r2, #28
 80009c2:	000c      	movs	r4, r1
 80009c4:	0124      	lsls	r4, r4, #4
 80009c6:	61fc      	str	r4, [r7, #28]
 80009c8:	69fc      	ldr	r4, [r7, #28]
 80009ca:	4314      	orrs	r4, r2
 80009cc:	61fc      	str	r4, [r7, #28]
 80009ce:	0002      	movs	r2, r0
 80009d0:	0112      	lsls	r2, r2, #4
 80009d2:	61ba      	str	r2, [r7, #24]
 80009d4:	603b      	str	r3, [r7, #0]
 80009d6:	2200      	movs	r2, #0
 80009d8:	607a      	str	r2, [r7, #4]
 80009da:	6838      	ldr	r0, [r7, #0]
 80009dc:	6879      	ldr	r1, [r7, #4]
 80009de:	0002      	movs	r2, r0
 80009e0:	0f12      	lsrs	r2, r2, #28
 80009e2:	000c      	movs	r4, r1
 80009e4:	0124      	lsls	r4, r4, #4
 80009e6:	617c      	str	r4, [r7, #20]
 80009e8:	697c      	ldr	r4, [r7, #20]
 80009ea:	4314      	orrs	r4, r2
 80009ec:	617c      	str	r4, [r7, #20]
 80009ee:	0002      	movs	r2, r0
 80009f0:	0112      	lsls	r2, r2, #4
 80009f2:	613a      	str	r2, [r7, #16]
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	3301      	adds	r3, #1
 80009f8:	3307      	adds	r3, #7
 80009fa:	08db      	lsrs	r3, r3, #3
 80009fc:	00db      	lsls	r3, r3, #3
 80009fe:	466a      	mov	r2, sp
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	469d      	mov	sp, r3
 8000a04:	ab02      	add	r3, sp, #8
 8000a06:	3301      	adds	r3, #1
 8000a08:	085b      	lsrs	r3, r3, #1
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i < size; i++) {		// there has to be a better way to make array of 1 color
 8000a0e:	2300      	movs	r3, #0
 8000a10:	637b      	str	r3, [r7, #52]	; 0x34
 8000a12:	e00e      	b.n	8000a32 <drawVLine+0x11e>
											// SPI without moving address of sent buffer?
		colors[i] = colorFixer(color);
 8000a14:	2322      	movs	r3, #34	; 0x22
 8000a16:	18fb      	adds	r3, r7, r3
 8000a18:	881b      	ldrh	r3, [r3, #0]
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f7ff feb0 	bl	8000780 <colorFixer>
 8000a20:	0003      	movs	r3, r0
 8000a22:	0019      	movs	r1, r3
 8000a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a28:	0052      	lsls	r2, r2, #1
 8000a2a:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < size; i++) {		// there has to be a better way to make array of 1 color
 8000a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a2e:	3301      	adds	r3, #1
 8000a30:	637b      	str	r3, [r7, #52]	; 0x34
 8000a32:	2325      	movs	r3, #37	; 0x25
 8000a34:	18fb      	adds	r3, r7, r3
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	dbea      	blt.n	8000a14 <drawVLine+0x100>
	}

	sendCommand(ST77XX_RAMWR, colors, size*2, hspi);
 8000a3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000a40:	2325      	movs	r3, #37	; 0x25
 8000a42:	18fb      	adds	r3, r7, r3
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	b29b      	uxth	r3, r3
 8000a48:	18db      	adds	r3, r3, r3
 8000a4a:	b29a      	uxth	r2, r3
 8000a4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a4e:	202c      	movs	r0, #44	; 0x2c
 8000a50:	f7ff fd10 	bl	8000474 <sendCommand>
 8000a54:	46b5      	mov	sp, r6
 8000a56:	e001      	b.n	8000a5c <drawVLine+0x148>
	if ((x > WIDTH) || (x < 0)) return;		// don't draw if x is out of bounds
 8000a58:	46c0      	nop			; (mov r8, r8)
 8000a5a:	46b5      	mov	sp, r6
}
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	b00f      	add	sp, #60	; 0x3c
 8000a60:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000a62 <drawBuffer>:

void drawBuffer(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t *buffer, uint16_t bufferSize, SPI_HandleTypeDef *hspi) {
 8000a62:	b5b0      	push	{r4, r5, r7, lr}
 8000a64:	b084      	sub	sp, #16
 8000a66:	af02      	add	r7, sp, #8
 8000a68:	0005      	movs	r5, r0
 8000a6a:	000c      	movs	r4, r1
 8000a6c:	0010      	movs	r0, r2
 8000a6e:	0019      	movs	r1, r3
 8000a70:	1dfb      	adds	r3, r7, #7
 8000a72:	1c2a      	adds	r2, r5, #0
 8000a74:	701a      	strb	r2, [r3, #0]
 8000a76:	1dbb      	adds	r3, r7, #6
 8000a78:	1c22      	adds	r2, r4, #0
 8000a7a:	701a      	strb	r2, [r3, #0]
 8000a7c:	1d7b      	adds	r3, r7, #5
 8000a7e:	1c02      	adds	r2, r0, #0
 8000a80:	701a      	strb	r2, [r3, #0]
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	1c0a      	adds	r2, r1, #0
 8000a86:	701a      	strb	r2, [r3, #0]
	// just dont call this with out-of-range vals pls.
	if (x+w > WIDTH || y+h > HEIGHT) return;
 8000a88:	1dfb      	adds	r3, r7, #7
 8000a8a:	781a      	ldrb	r2, [r3, #0]
 8000a8c:	1d7b      	adds	r3, r7, #5
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	18d3      	adds	r3, r2, r3
 8000a92:	2b80      	cmp	r3, #128	; 0x80
 8000a94:	dc29      	bgt.n	8000aea <drawBuffer+0x88>
 8000a96:	1dbb      	adds	r3, r7, #6
 8000a98:	781a      	ldrb	r2, [r3, #0]
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	18d3      	adds	r3, r2, r3
 8000aa0:	2ba0      	cmp	r3, #160	; 0xa0
 8000aa2:	dc22      	bgt.n	8000aea <drawBuffer+0x88>

	// also don't call this with buffer size too big bc there's not enough ram for all pixels of display
	if (bufferSize > 10240) return;
 8000aa4:	231c      	movs	r3, #28
 8000aa6:	18fb      	adds	r3, r7, r3
 8000aa8:	881a      	ldrh	r2, [r3, #0]
 8000aaa:	23a0      	movs	r3, #160	; 0xa0
 8000aac:	019b      	lsls	r3, r3, #6
 8000aae:	429a      	cmp	r2, r3
 8000ab0:	d81d      	bhi.n	8000aee <drawBuffer+0x8c>

	setAddrWindow(x, y, w, h, hspi);
 8000ab2:	1dfb      	adds	r3, r7, #7
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	b298      	uxth	r0, r3
 8000ab8:	1dbb      	adds	r3, r7, #6
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	b299      	uxth	r1, r3
 8000abe:	1d7b      	adds	r3, r7, #5
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	b29c      	uxth	r4, r3
 8000aca:	6a3b      	ldr	r3, [r7, #32]
 8000acc:	9300      	str	r3, [sp, #0]
 8000ace:	0023      	movs	r3, r4
 8000ad0:	f7ff fde4 	bl	800069c <setAddrWindow>
	sendCommand(ST77XX_RAMWR, buffer, bufferSize*2, hspi);
 8000ad4:	231c      	movs	r3, #28
 8000ad6:	18fb      	adds	r3, r7, r3
 8000ad8:	881b      	ldrh	r3, [r3, #0]
 8000ada:	18db      	adds	r3, r3, r3
 8000adc:	b29a      	uxth	r2, r3
 8000ade:	6a3b      	ldr	r3, [r7, #32]
 8000ae0:	69b9      	ldr	r1, [r7, #24]
 8000ae2:	202c      	movs	r0, #44	; 0x2c
 8000ae4:	f7ff fcc6 	bl	8000474 <sendCommand>
 8000ae8:	e002      	b.n	8000af0 <drawBuffer+0x8e>
	if (x+w > WIDTH || y+h > HEIGHT) return;
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	e000      	b.n	8000af0 <drawBuffer+0x8e>
	if (bufferSize > 10240) return;
 8000aee:	46c0      	nop			; (mov r8, r8)
}
 8000af0:	46bd      	mov	sp, r7
 8000af2:	b002      	add	sp, #8
 8000af4:	bdb0      	pop	{r4, r5, r7, pc}

08000af6 <drawRect>:
			err -= 1;
		}
	}
}

void drawRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t color, SPI_HandleTypeDef *hspi) {
 8000af6:	b5b0      	push	{r4, r5, r7, lr}
 8000af8:	b084      	sub	sp, #16
 8000afa:	af02      	add	r7, sp, #8
 8000afc:	0005      	movs	r5, r0
 8000afe:	000c      	movs	r4, r1
 8000b00:	0010      	movs	r0, r2
 8000b02:	0019      	movs	r1, r3
 8000b04:	1dfb      	adds	r3, r7, #7
 8000b06:	1c2a      	adds	r2, r5, #0
 8000b08:	701a      	strb	r2, [r3, #0]
 8000b0a:	1dbb      	adds	r3, r7, #6
 8000b0c:	1c22      	adds	r2, r4, #0
 8000b0e:	701a      	strb	r2, [r3, #0]
 8000b10:	1d7b      	adds	r3, r7, #5
 8000b12:	1c02      	adds	r2, r0, #0
 8000b14:	701a      	strb	r2, [r3, #0]
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	1c0a      	adds	r2, r1, #0
 8000b1a:	701a      	strb	r2, [r3, #0]
	drawHLine(x, y, w, color, hspi);
 8000b1c:	2518      	movs	r5, #24
 8000b1e:	197b      	adds	r3, r7, r5
 8000b20:	881c      	ldrh	r4, [r3, #0]
 8000b22:	1d7b      	adds	r3, r7, #5
 8000b24:	781a      	ldrb	r2, [r3, #0]
 8000b26:	1dbb      	adds	r3, r7, #6
 8000b28:	7819      	ldrb	r1, [r3, #0]
 8000b2a:	1dfb      	adds	r3, r7, #7
 8000b2c:	7818      	ldrb	r0, [r3, #0]
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	9300      	str	r3, [sp, #0]
 8000b32:	0023      	movs	r3, r4
 8000b34:	f7ff fe48 	bl	80007c8 <drawHLine>
	drawHLine(x, y+h-1, w, color, hspi);
 8000b38:	1dba      	adds	r2, r7, #6
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	7812      	ldrb	r2, [r2, #0]
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	18d3      	adds	r3, r2, r3
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	3b01      	subs	r3, #1
 8000b46:	b2d9      	uxtb	r1, r3
 8000b48:	197b      	adds	r3, r7, r5
 8000b4a:	881c      	ldrh	r4, [r3, #0]
 8000b4c:	1d7b      	adds	r3, r7, #5
 8000b4e:	781a      	ldrb	r2, [r3, #0]
 8000b50:	1dfb      	adds	r3, r7, #7
 8000b52:	7818      	ldrb	r0, [r3, #0]
 8000b54:	69fb      	ldr	r3, [r7, #28]
 8000b56:	9300      	str	r3, [sp, #0]
 8000b58:	0023      	movs	r3, r4
 8000b5a:	f7ff fe35 	bl	80007c8 <drawHLine>
	drawVLine(x, y, h, color, hspi);
 8000b5e:	197b      	adds	r3, r7, r5
 8000b60:	881c      	ldrh	r4, [r3, #0]
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	781a      	ldrb	r2, [r3, #0]
 8000b66:	1dbb      	adds	r3, r7, #6
 8000b68:	7819      	ldrb	r1, [r3, #0]
 8000b6a:	1dfb      	adds	r3, r7, #7
 8000b6c:	7818      	ldrb	r0, [r3, #0]
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	9300      	str	r3, [sp, #0]
 8000b72:	0023      	movs	r3, r4
 8000b74:	f7ff fece 	bl	8000914 <drawVLine>
	drawVLine(x+w-1, y, h, color, hspi);
 8000b78:	1dfa      	adds	r2, r7, #7
 8000b7a:	1d7b      	adds	r3, r7, #5
 8000b7c:	7812      	ldrb	r2, [r2, #0]
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	18d3      	adds	r3, r2, r3
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	3b01      	subs	r3, #1
 8000b86:	b2d8      	uxtb	r0, r3
 8000b88:	197b      	adds	r3, r7, r5
 8000b8a:	881c      	ldrh	r4, [r3, #0]
 8000b8c:	1d3b      	adds	r3, r7, #4
 8000b8e:	781a      	ldrb	r2, [r3, #0]
 8000b90:	1dbb      	adds	r3, r7, #6
 8000b92:	7819      	ldrb	r1, [r3, #0]
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	9300      	str	r3, [sp, #0]
 8000b98:	0023      	movs	r3, r4
 8000b9a:	f7ff febb 	bl	8000914 <drawVLine>
}
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	b002      	add	sp, #8
 8000ba4:	bdb0      	pop	{r4, r5, r7, pc}

08000ba6 <fillRect>:

void fillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t color, SPI_HandleTypeDef *hspi) {
 8000ba6:	b5b0      	push	{r4, r5, r7, lr}
 8000ba8:	b086      	sub	sp, #24
 8000baa:	af02      	add	r7, sp, #8
 8000bac:	0005      	movs	r5, r0
 8000bae:	000c      	movs	r4, r1
 8000bb0:	0010      	movs	r0, r2
 8000bb2:	0019      	movs	r1, r3
 8000bb4:	1dfb      	adds	r3, r7, #7
 8000bb6:	1c2a      	adds	r2, r5, #0
 8000bb8:	701a      	strb	r2, [r3, #0]
 8000bba:	1dbb      	adds	r3, r7, #6
 8000bbc:	1c22      	adds	r2, r4, #0
 8000bbe:	701a      	strb	r2, [r3, #0]
 8000bc0:	1d7b      	adds	r3, r7, #5
 8000bc2:	1c02      	adds	r2, r0, #0
 8000bc4:	701a      	strb	r2, [r3, #0]
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	1c0a      	adds	r2, r1, #0
 8000bca:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < h; i++) {
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	e014      	b.n	8000bfc <fillRect+0x56>
		drawHLine(x, y+i, w, color, hspi);
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	1dbb      	adds	r3, r7, #6
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	18d3      	adds	r3, r2, r3
 8000bdc:	b2d9      	uxtb	r1, r3
 8000bde:	2320      	movs	r3, #32
 8000be0:	18fb      	adds	r3, r7, r3
 8000be2:	881c      	ldrh	r4, [r3, #0]
 8000be4:	1d7b      	adds	r3, r7, #5
 8000be6:	781a      	ldrb	r2, [r3, #0]
 8000be8:	1dfb      	adds	r3, r7, #7
 8000bea:	7818      	ldrb	r0, [r3, #0]
 8000bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bee:	9300      	str	r3, [sp, #0]
 8000bf0:	0023      	movs	r3, r4
 8000bf2:	f7ff fde9 	bl	80007c8 <drawHLine>
	for (int i = 0; i < h; i++) {
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	68fa      	ldr	r2, [r7, #12]
 8000c02:	429a      	cmp	r2, r3
 8000c04:	dbe5      	blt.n	8000bd2 <fillRect+0x2c>
	}
}
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	b004      	add	sp, #16
 8000c0c:	bdb0      	pop	{r4, r5, r7, pc}

08000c0e <fillScreen>:

void fillScreen(uint16_t color, SPI_HandleTypeDef *hspi) {
 8000c0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c10:	b091      	sub	sp, #68	; 0x44
 8000c12:	af04      	add	r7, sp, #16
 8000c14:	61b9      	str	r1, [r7, #24]
 8000c16:	221e      	movs	r2, #30
 8000c18:	18ba      	adds	r2, r7, r2
 8000c1a:	1c01      	adds	r1, r0, #0
 8000c1c:	8011      	strh	r1, [r2, #0]
 8000c1e:	466a      	mov	r2, sp
 8000c20:	607a      	str	r2, [r7, #4]
	uint16_t bufferSize = WIDTH*HEIGHT/4;
 8000c22:	2012      	movs	r0, #18
 8000c24:	2218      	movs	r2, #24
 8000c26:	18b9      	adds	r1, r7, r2
 8000c28:	180a      	adds	r2, r1, r0
 8000c2a:	21a0      	movs	r1, #160	; 0xa0
 8000c2c:	0149      	lsls	r1, r1, #5
 8000c2e:	8011      	strh	r1, [r2, #0]
	uint16_t buffer[bufferSize];
 8000c30:	2218      	movs	r2, #24
 8000c32:	18ba      	adds	r2, r7, r2
 8000c34:	1812      	adds	r2, r2, r0
 8000c36:	8812      	ldrh	r2, [r2, #0]
 8000c38:	0011      	movs	r1, r2
 8000c3a:	3901      	subs	r1, #1
 8000c3c:	6279      	str	r1, [r7, #36]	; 0x24
 8000c3e:	613a      	str	r2, [r7, #16]
 8000c40:	2100      	movs	r1, #0
 8000c42:	6179      	str	r1, [r7, #20]
 8000c44:	6939      	ldr	r1, [r7, #16]
 8000c46:	0f09      	lsrs	r1, r1, #28
 8000c48:	6978      	ldr	r0, [r7, #20]
 8000c4a:	0106      	lsls	r6, r0, #4
 8000c4c:	430e      	orrs	r6, r1
 8000c4e:	6939      	ldr	r1, [r7, #16]
 8000c50:	010d      	lsls	r5, r1, #4
 8000c52:	60ba      	str	r2, [r7, #8]
 8000c54:	2100      	movs	r1, #0
 8000c56:	60f9      	str	r1, [r7, #12]
 8000c58:	68bd      	ldr	r5, [r7, #8]
 8000c5a:	68fe      	ldr	r6, [r7, #12]
 8000c5c:	0029      	movs	r1, r5
 8000c5e:	0f09      	lsrs	r1, r1, #28
 8000c60:	0030      	movs	r0, r6
 8000c62:	0104      	lsls	r4, r0, #4
 8000c64:	430c      	orrs	r4, r1
 8000c66:	0029      	movs	r1, r5
 8000c68:	010b      	lsls	r3, r1, #4
 8000c6a:	0013      	movs	r3, r2
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	3301      	adds	r3, #1
 8000c70:	3307      	adds	r3, #7
 8000c72:	08db      	lsrs	r3, r3, #3
 8000c74:	00db      	lsls	r3, r3, #3
 8000c76:	466a      	mov	r2, sp
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	469d      	mov	sp, r3
 8000c7c:	ab04      	add	r3, sp, #16
 8000c7e:	3301      	adds	r3, #1
 8000c80:	085b      	lsrs	r3, r3, #1
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	623b      	str	r3, [r7, #32]
	int i;
	for (i = 0; i < bufferSize; i++) {
 8000c86:	2300      	movs	r3, #0
 8000c88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c8a:	e00e      	b.n	8000caa <fillScreen+0x9c>
		buffer[i] = colorFixer(color);
 8000c8c:	231e      	movs	r3, #30
 8000c8e:	18fb      	adds	r3, r7, r3
 8000c90:	881b      	ldrh	r3, [r3, #0]
 8000c92:	0018      	movs	r0, r3
 8000c94:	f7ff fd74 	bl	8000780 <colorFixer>
 8000c98:	0003      	movs	r3, r0
 8000c9a:	0019      	movs	r1, r3
 8000c9c:	6a3b      	ldr	r3, [r7, #32]
 8000c9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ca0:	0052      	lsls	r2, r2, #1
 8000ca2:	52d1      	strh	r1, [r2, r3]
	for (i = 0; i < bufferSize; i++) {
 8000ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000caa:	2312      	movs	r3, #18
 8000cac:	2218      	movs	r2, #24
 8000cae:	4694      	mov	ip, r2
 8000cb0:	44bc      	add	ip, r7
 8000cb2:	4463      	add	r3, ip
 8000cb4:	881b      	ldrh	r3, [r3, #0]
 8000cb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	dbe7      	blt.n	8000c8c <fillScreen+0x7e>
	}

	for (i = 0; i < 4; i++) {
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cc0:	e017      	b.n	8000cf2 <fillScreen+0xe4>
		drawBuffer(0, HEIGHT/4*i, WIDTH, HEIGHT/4, buffer, bufferSize, hspi);
 8000cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	2228      	movs	r2, #40	; 0x28
 8000cc8:	4353      	muls	r3, r2
 8000cca:	b2d9      	uxtb	r1, r3
 8000ccc:	6a3b      	ldr	r3, [r7, #32]
 8000cce:	69ba      	ldr	r2, [r7, #24]
 8000cd0:	9202      	str	r2, [sp, #8]
 8000cd2:	2212      	movs	r2, #18
 8000cd4:	2018      	movs	r0, #24
 8000cd6:	4684      	mov	ip, r0
 8000cd8:	44bc      	add	ip, r7
 8000cda:	4462      	add	r2, ip
 8000cdc:	8812      	ldrh	r2, [r2, #0]
 8000cde:	9201      	str	r2, [sp, #4]
 8000ce0:	9300      	str	r3, [sp, #0]
 8000ce2:	2328      	movs	r3, #40	; 0x28
 8000ce4:	2280      	movs	r2, #128	; 0x80
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f7ff febb 	bl	8000a62 <drawBuffer>
	for (i = 0; i < 4; i++) {
 8000cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cee:	3301      	adds	r3, #1
 8000cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cf4:	2b03      	cmp	r3, #3
 8000cf6:	dde4      	ble.n	8000cc2 <fillScreen+0xb4>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	469d      	mov	sp, r3
	}
}
 8000cfc:	46c0      	nop			; (mov r8, r8)
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	b00d      	add	sp, #52	; 0x34
 8000d02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d04 <drawCenteredText>:
// ---- end of basic shapes and lines ----

// ---- start of more complicated graphics ----
void drawCenteredText(uint8_t x_center, uint8_t y, const char *str, SPI_HandleTypeDef *hspi) {
 8000d04:	b590      	push	{r4, r7, lr}
 8000d06:	b089      	sub	sp, #36	; 0x24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60ba      	str	r2, [r7, #8]
 8000d0c:	607b      	str	r3, [r7, #4]
 8000d0e:	230f      	movs	r3, #15
 8000d10:	18fb      	adds	r3, r7, r3
 8000d12:	1c02      	adds	r2, r0, #0
 8000d14:	701a      	strb	r2, [r3, #0]
 8000d16:	240e      	movs	r4, #14
 8000d18:	193b      	adds	r3, r7, r4
 8000d1a:	1c0a      	adds	r2, r1, #0
 8000d1c:	701a      	strb	r2, [r3, #0]
	uint8_t strSize = strlen(str);
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	0018      	movs	r0, r3
 8000d22:	f7ff f9f1 	bl	8000108 <strlen>
 8000d26:	0002      	movs	r2, r0
 8000d28:	231f      	movs	r3, #31
 8000d2a:	18fb      	adds	r3, r7, r3
 8000d2c:	701a      	strb	r2, [r3, #0]
	// bounds checking. text box needed to print text should not end up ouf of bounds
	if (y+textSize*8 > HEIGHT) return;
 8000d2e:	193b      	adds	r3, r7, r4
 8000d30:	781a      	ldrb	r2, [r3, #0]
 8000d32:	4b24      	ldr	r3, [pc, #144]	; (8000dc4 <drawCenteredText+0xc0>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	00db      	lsls	r3, r3, #3
 8000d38:	18d3      	adds	r3, r2, r3
 8000d3a:	2ba0      	cmp	r3, #160	; 0xa0
 8000d3c:	dc3a      	bgt.n	8000db4 <drawCenteredText+0xb0>
	int leftBound = x_center-(strSize*textSize*6)/2;
 8000d3e:	230f      	movs	r3, #15
 8000d40:	18fb      	adds	r3, r7, r3
 8000d42:	7819      	ldrb	r1, [r3, #0]
 8000d44:	231f      	movs	r3, #31
 8000d46:	18fb      	adds	r3, r7, r3
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	4a1e      	ldr	r2, [pc, #120]	; (8000dc4 <drawCenteredText+0xc0>)
 8000d4c:	7812      	ldrb	r2, [r2, #0]
 8000d4e:	435a      	muls	r2, r3
 8000d50:	0013      	movs	r3, r2
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	189b      	adds	r3, r3, r2
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	d500      	bpl.n	8000d5c <drawCenteredText+0x58>
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	105b      	asrs	r3, r3, #1
 8000d5e:	425b      	negs	r3, r3
 8000d60:	18cb      	adds	r3, r1, r3
 8000d62:	61bb      	str	r3, [r7, #24]
	int rightBound = x_center+(strSize*textSize*6)/2;
 8000d64:	230f      	movs	r3, #15
 8000d66:	18fb      	adds	r3, r7, r3
 8000d68:	7819      	ldrb	r1, [r3, #0]
 8000d6a:	231f      	movs	r3, #31
 8000d6c:	18fb      	adds	r3, r7, r3
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	4a14      	ldr	r2, [pc, #80]	; (8000dc4 <drawCenteredText+0xc0>)
 8000d72:	7812      	ldrb	r2, [r2, #0]
 8000d74:	435a      	muls	r2, r3
 8000d76:	0013      	movs	r3, r2
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	189b      	adds	r3, r3, r2
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	d500      	bpl.n	8000d82 <drawCenteredText+0x7e>
 8000d80:	3301      	adds	r3, #1
 8000d82:	105b      	asrs	r3, r3, #1
 8000d84:	18cb      	adds	r3, r1, r3
 8000d86:	617b      	str	r3, [r7, #20]
	if (leftBound < 0) return;
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	db14      	blt.n	8000db8 <drawCenteredText+0xb4>
	if (rightBound > WIDTH) return;
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	2b80      	cmp	r3, #128	; 0x80
 8000d92:	dc13      	bgt.n	8000dbc <drawCenteredText+0xb8>

	setCursor(leftBound, y);
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	b2da      	uxtb	r2, r3
 8000d98:	230e      	movs	r3, #14
 8000d9a:	18fb      	adds	r3, r7, r3
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	0019      	movs	r1, r3
 8000da0:	0010      	movs	r0, r2
 8000da2:	f000 fbaf 	bl	8001504 <setCursor>
	drawText(str, hspi);
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	0011      	movs	r1, r2
 8000dac:	0018      	movs	r0, r3
 8000dae:	f000 fb7b 	bl	80014a8 <drawText>
 8000db2:	e004      	b.n	8000dbe <drawCenteredText+0xba>
	if (y+textSize*8 > HEIGHT) return;
 8000db4:	46c0      	nop			; (mov r8, r8)
 8000db6:	e002      	b.n	8000dbe <drawCenteredText+0xba>
	if (leftBound < 0) return;
 8000db8:	46c0      	nop			; (mov r8, r8)
 8000dba:	e000      	b.n	8000dbe <drawCenteredText+0xba>
	if (rightBound > WIDTH) return;
 8000dbc:	46c0      	nop			; (mov r8, r8)
}
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	b009      	add	sp, #36	; 0x24
 8000dc2:	bd90      	pop	{r4, r7, pc}
 8000dc4:	200000da 	.word	0x200000da

08000dc8 <clearTextLine>:

void clearTextLine(uint8_t y, SPI_HandleTypeDef *hspi) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af02      	add	r7, sp, #8
 8000dce:	0002      	movs	r2, r0
 8000dd0:	6039      	str	r1, [r7, #0]
 8000dd2:	1dfb      	adds	r3, r7, #7
 8000dd4:	701a      	strb	r2, [r3, #0]
	fillRect(0, y, WIDTH, textSize*8, bg, hspi);
 8000dd6:	4b0a      	ldr	r3, [pc, #40]	; (8000e00 <clearTextLine+0x38>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	00db      	lsls	r3, r3, #3
 8000ddc:	b2d8      	uxtb	r0, r3
 8000dde:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <clearTextLine+0x3c>)
 8000de0:	881b      	ldrh	r3, [r3, #0]
 8000de2:	1dfa      	adds	r2, r7, #7
 8000de4:	7811      	ldrb	r1, [r2, #0]
 8000de6:	683a      	ldr	r2, [r7, #0]
 8000de8:	9201      	str	r2, [sp, #4]
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	0003      	movs	r3, r0
 8000dee:	2280      	movs	r2, #128	; 0x80
 8000df0:	2000      	movs	r0, #0
 8000df2:	f7ff fed8 	bl	8000ba6 <fillRect>
}
 8000df6:	46c0      	nop			; (mov r8, r8)
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	b002      	add	sp, #8
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	46c0      	nop			; (mov r8, r8)
 8000e00:	200000da 	.word	0x200000da
 8000e04:	200000de 	.word	0x200000de

08000e08 <drawChar>:
// ---- end of more complicated graphics ----

// ---- text functions ----
void drawChar(uint8_t ch, SPI_HandleTypeDef *hspi) {
 8000e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e0a:	b095      	sub	sp, #84	; 0x54
 8000e0c:	af04      	add	r7, sp, #16
 8000e0e:	61b9      	str	r1, [r7, #24]
 8000e10:	221f      	movs	r2, #31
 8000e12:	18ba      	adds	r2, r7, r2
 8000e14:	1c01      	adds	r1, r0, #0
 8000e16:	7011      	strb	r1, [r2, #0]
 8000e18:	466a      	mov	r2, sp
 8000e1a:	607a      	str	r2, [r7, #4]
	uint16_t bufferSize = 6*8*textSize*textSize;
 8000e1c:	4abe      	ldr	r2, [pc, #760]	; (8001118 <drawChar+0x310>)
 8000e1e:	7812      	ldrb	r2, [r2, #0]
 8000e20:	b292      	uxth	r2, r2
 8000e22:	49bd      	ldr	r1, [pc, #756]	; (8001118 <drawChar+0x310>)
 8000e24:	7809      	ldrb	r1, [r1, #0]
 8000e26:	b289      	uxth	r1, r1
 8000e28:	434a      	muls	r2, r1
 8000e2a:	b291      	uxth	r1, r2
 8000e2c:	221a      	movs	r2, #26
 8000e2e:	2018      	movs	r0, #24
 8000e30:	4684      	mov	ip, r0
 8000e32:	44bc      	add	ip, r7
 8000e34:	4462      	add	r2, ip
 8000e36:	2030      	movs	r0, #48	; 0x30
 8000e38:	4341      	muls	r1, r0
 8000e3a:	8011      	strh	r1, [r2, #0]
	uint16_t buffer[bufferSize];
 8000e3c:	221a      	movs	r2, #26
 8000e3e:	2118      	movs	r1, #24
 8000e40:	468c      	mov	ip, r1
 8000e42:	44bc      	add	ip, r7
 8000e44:	4462      	add	r2, ip
 8000e46:	8812      	ldrh	r2, [r2, #0]
 8000e48:	0011      	movs	r1, r2
 8000e4a:	3901      	subs	r1, #1
 8000e4c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8000e4e:	613a      	str	r2, [r7, #16]
 8000e50:	2100      	movs	r1, #0
 8000e52:	6179      	str	r1, [r7, #20]
 8000e54:	6939      	ldr	r1, [r7, #16]
 8000e56:	0f09      	lsrs	r1, r1, #28
 8000e58:	6978      	ldr	r0, [r7, #20]
 8000e5a:	0106      	lsls	r6, r0, #4
 8000e5c:	430e      	orrs	r6, r1
 8000e5e:	6939      	ldr	r1, [r7, #16]
 8000e60:	010d      	lsls	r5, r1, #4
 8000e62:	60ba      	str	r2, [r7, #8]
 8000e64:	2100      	movs	r1, #0
 8000e66:	60f9      	str	r1, [r7, #12]
 8000e68:	68bd      	ldr	r5, [r7, #8]
 8000e6a:	68fe      	ldr	r6, [r7, #12]
 8000e6c:	0029      	movs	r1, r5
 8000e6e:	0f09      	lsrs	r1, r1, #28
 8000e70:	0030      	movs	r0, r6
 8000e72:	0104      	lsls	r4, r0, #4
 8000e74:	430c      	orrs	r4, r1
 8000e76:	0029      	movs	r1, r5
 8000e78:	010b      	lsls	r3, r1, #4
 8000e7a:	0013      	movs	r3, r2
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	3301      	adds	r3, #1
 8000e80:	3307      	adds	r3, #7
 8000e82:	08db      	lsrs	r3, r3, #3
 8000e84:	00db      	lsls	r3, r3, #3
 8000e86:	466a      	mov	r2, sp
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	469d      	mov	sp, r3
 8000e8c:	ab04      	add	r3, sp, #16
 8000e8e:	3301      	adds	r3, #1
 8000e90:	085b      	lsrs	r3, r3, #1
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	62bb      	str	r3, [r7, #40]	; 0x28
	int16_t rowOffset, address;

	for (int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 8000e96:	2325      	movs	r3, #37	; 0x25
 8000e98:	2218      	movs	r2, #24
 8000e9a:	4694      	mov	ip, r2
 8000e9c:	44bc      	add	ip, r7
 8000e9e:	4463      	add	r3, ip
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	701a      	strb	r2, [r3, #0]
 8000ea4:	e1f4      	b.n	8001290 <drawChar+0x488>
		uint8_t line = font[ch*5+i];
 8000ea6:	231f      	movs	r3, #31
 8000ea8:	18fb      	adds	r3, r7, r3
 8000eaa:	781a      	ldrb	r2, [r3, #0]
 8000eac:	0013      	movs	r3, r2
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	189a      	adds	r2, r3, r2
 8000eb2:	2325      	movs	r3, #37	; 0x25
 8000eb4:	2118      	movs	r1, #24
 8000eb6:	468c      	mov	ip, r1
 8000eb8:	44bc      	add	ip, r7
 8000eba:	4463      	add	r3, ip
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	b25b      	sxtb	r3, r3
 8000ec0:	18d2      	adds	r2, r2, r3
 8000ec2:	2324      	movs	r3, #36	; 0x24
 8000ec4:	2118      	movs	r1, #24
 8000ec6:	468c      	mov	ip, r1
 8000ec8:	44bc      	add	ip, r7
 8000eca:	4463      	add	r3, ip
 8000ecc:	4993      	ldr	r1, [pc, #588]	; (800111c <drawChar+0x314>)
 8000ece:	5c8a      	ldrb	r2, [r1, r2]
 8000ed0:	701a      	strb	r2, [r3, #0]
		for (int8_t j=0; j<8; j++, line >>= 1) {
 8000ed2:	2323      	movs	r3, #35	; 0x23
 8000ed4:	2218      	movs	r2, #24
 8000ed6:	4694      	mov	ip, r2
 8000ed8:	44bc      	add	ip, r7
 8000eda:	4463      	add	r3, ip
 8000edc:	2200      	movs	r2, #0
 8000ede:	701a      	strb	r2, [r3, #0]
 8000ee0:	e1c0      	b.n	8001264 <drawChar+0x45c>
			if (line & 1) {
 8000ee2:	2324      	movs	r3, #36	; 0x24
 8000ee4:	2218      	movs	r2, #24
 8000ee6:	4694      	mov	ip, r2
 8000ee8:	44bc      	add	ip, r7
 8000eea:	4463      	add	r3, ip
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2201      	movs	r2, #1
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	d100      	bne.n	8000ef6 <drawChar+0xee>
 8000ef4:	e0c8      	b.n	8001088 <drawChar+0x280>
				if (textSize == 1) {
 8000ef6:	4b88      	ldr	r3, [pc, #544]	; (8001118 <drawChar+0x310>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d11c      	bne.n	8000f38 <drawChar+0x130>
					buffer[i+j*6] = colorFixer(textColor);
 8000efe:	4b88      	ldr	r3, [pc, #544]	; (8001120 <drawChar+0x318>)
 8000f00:	8818      	ldrh	r0, [r3, #0]
 8000f02:	2325      	movs	r3, #37	; 0x25
 8000f04:	2218      	movs	r2, #24
 8000f06:	4694      	mov	ip, r2
 8000f08:	44bc      	add	ip, r7
 8000f0a:	4463      	add	r3, ip
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	5659      	ldrsb	r1, [r3, r1]
 8000f10:	2323      	movs	r3, #35	; 0x23
 8000f12:	2218      	movs	r2, #24
 8000f14:	4694      	mov	ip, r2
 8000f16:	44bc      	add	ip, r7
 8000f18:	4463      	add	r3, ip
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	569a      	ldrsb	r2, [r3, r2]
 8000f1e:	0013      	movs	r3, r2
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	189b      	adds	r3, r3, r2
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	18cc      	adds	r4, r1, r3
 8000f28:	f7ff fc2a 	bl	8000780 <colorFixer>
 8000f2c:	0003      	movs	r3, r0
 8000f2e:	0019      	movs	r1, r3
 8000f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f32:	0062      	lsls	r2, r4, #1
 8000f34:	52d1      	strh	r1, [r2, r3]
 8000f36:	e17f      	b.n	8001238 <drawChar+0x430>
				}
				else {
					for (int8_t k = 0; k < textSize; k++) {
 8000f38:	2322      	movs	r3, #34	; 0x22
 8000f3a:	2218      	movs	r2, #24
 8000f3c:	4694      	mov	ip, r2
 8000f3e:	44bc      	add	ip, r7
 8000f40:	4463      	add	r3, ip
 8000f42:	2200      	movs	r2, #0
 8000f44:	701a      	strb	r2, [r3, #0]
 8000f46:	e092      	b.n	800106e <drawChar+0x266>
						rowOffset = textSize*6;
 8000f48:	4b73      	ldr	r3, [pc, #460]	; (8001118 <drawChar+0x310>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	1c1a      	adds	r2, r3, #0
 8000f50:	1c13      	adds	r3, r2, #0
 8000f52:	18db      	adds	r3, r3, r3
 8000f54:	189b      	adds	r3, r3, r2
 8000f56:	18db      	adds	r3, r3, r3
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	2326      	movs	r3, #38	; 0x26
 8000f5c:	2118      	movs	r1, #24
 8000f5e:	468c      	mov	ip, r1
 8000f60:	44bc      	add	ip, r7
 8000f62:	4463      	add	r3, ip
 8000f64:	801a      	strh	r2, [r3, #0]
						for (int8_t l = 0; l < textSize; l++) {
 8000f66:	2321      	movs	r3, #33	; 0x21
 8000f68:	2218      	movs	r2, #24
 8000f6a:	4694      	mov	ip, r2
 8000f6c:	44bc      	add	ip, r7
 8000f6e:	4463      	add	r3, ip
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]
 8000f74:	e064      	b.n	8001040 <drawChar+0x238>
							address = (textSize*textSize*j*6)+(i*textSize);
 8000f76:	4b68      	ldr	r3, [pc, #416]	; (8001118 <drawChar+0x310>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	4a66      	ldr	r2, [pc, #408]	; (8001118 <drawChar+0x310>)
 8000f7e:	7812      	ldrb	r2, [r2, #0]
 8000f80:	b292      	uxth	r2, r2
 8000f82:	4353      	muls	r3, r2
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	2223      	movs	r2, #35	; 0x23
 8000f88:	2118      	movs	r1, #24
 8000f8a:	468c      	mov	ip, r1
 8000f8c:	44bc      	add	ip, r7
 8000f8e:	4462      	add	r2, ip
 8000f90:	7812      	ldrb	r2, [r2, #0]
 8000f92:	b252      	sxtb	r2, r2
 8000f94:	b292      	uxth	r2, r2
 8000f96:	4353      	muls	r3, r2
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	1c1a      	adds	r2, r3, #0
 8000f9c:	1c13      	adds	r3, r2, #0
 8000f9e:	18db      	adds	r3, r3, r3
 8000fa0:	189b      	adds	r3, r3, r2
 8000fa2:	18db      	adds	r3, r3, r3
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	2325      	movs	r3, #37	; 0x25
 8000fa8:	2118      	movs	r1, #24
 8000faa:	468c      	mov	ip, r1
 8000fac:	44bc      	add	ip, r7
 8000fae:	4463      	add	r3, ip
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	b25b      	sxtb	r3, r3
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	4958      	ldr	r1, [pc, #352]	; (8001118 <drawChar+0x310>)
 8000fb8:	7809      	ldrb	r1, [r1, #0]
 8000fba:	b289      	uxth	r1, r1
 8000fbc:	434b      	muls	r3, r1
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	18d3      	adds	r3, r2, r3
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	210e      	movs	r1, #14
 8000fc6:	2018      	movs	r0, #24
 8000fc8:	183b      	adds	r3, r7, r0
 8000fca:	185b      	adds	r3, r3, r1
 8000fcc:	801a      	strh	r2, [r3, #0]
							address += rowOffset*k+l;
 8000fce:	2322      	movs	r3, #34	; 0x22
 8000fd0:	2218      	movs	r2, #24
 8000fd2:	4694      	mov	ip, r2
 8000fd4:	44bc      	add	ip, r7
 8000fd6:	4463      	add	r3, ip
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	b25b      	sxtb	r3, r3
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	2226      	movs	r2, #38	; 0x26
 8000fe0:	2418      	movs	r4, #24
 8000fe2:	46a4      	mov	ip, r4
 8000fe4:	44bc      	add	ip, r7
 8000fe6:	4462      	add	r2, ip
 8000fe8:	8812      	ldrh	r2, [r2, #0]
 8000fea:	4353      	muls	r3, r2
 8000fec:	b29a      	uxth	r2, r3
 8000fee:	2521      	movs	r5, #33	; 0x21
 8000ff0:	183b      	adds	r3, r7, r0
 8000ff2:	195b      	adds	r3, r3, r5
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	b25b      	sxtb	r3, r3
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	18d3      	adds	r3, r2, r3
 8000ffc:	b29a      	uxth	r2, r3
 8000ffe:	183b      	adds	r3, r7, r0
 8001000:	185b      	adds	r3, r3, r1
 8001002:	881b      	ldrh	r3, [r3, #0]
 8001004:	18d3      	adds	r3, r2, r3
 8001006:	b29a      	uxth	r2, r3
 8001008:	183b      	adds	r3, r7, r0
 800100a:	185b      	adds	r3, r3, r1
 800100c:	801a      	strh	r2, [r3, #0]
							buffer[address] = colorFixer(textColor);
 800100e:	4b44      	ldr	r3, [pc, #272]	; (8001120 <drawChar+0x318>)
 8001010:	881a      	ldrh	r2, [r3, #0]
 8001012:	0006      	movs	r6, r0
 8001014:	183b      	adds	r3, r7, r0
 8001016:	185b      	adds	r3, r3, r1
 8001018:	2400      	movs	r4, #0
 800101a:	5f1c      	ldrsh	r4, [r3, r4]
 800101c:	0010      	movs	r0, r2
 800101e:	f7ff fbaf 	bl	8000780 <colorFixer>
 8001022:	0003      	movs	r3, r0
 8001024:	0019      	movs	r1, r3
 8001026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001028:	0062      	lsls	r2, r4, #1
 800102a:	52d1      	strh	r1, [r2, r3]
						for (int8_t l = 0; l < textSize; l++) {
 800102c:	19bb      	adds	r3, r7, r6
 800102e:	195b      	adds	r3, r3, r5
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	b25b      	sxtb	r3, r3
 8001034:	b2db      	uxtb	r3, r3
 8001036:	3301      	adds	r3, #1
 8001038:	b2da      	uxtb	r2, r3
 800103a:	19bb      	adds	r3, r7, r6
 800103c:	195b      	adds	r3, r3, r5
 800103e:	701a      	strb	r2, [r3, #0]
 8001040:	2321      	movs	r3, #33	; 0x21
 8001042:	2218      	movs	r2, #24
 8001044:	4694      	mov	ip, r2
 8001046:	44bc      	add	ip, r7
 8001048:	4463      	add	r3, ip
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	b25b      	sxtb	r3, r3
 800104e:	4a32      	ldr	r2, [pc, #200]	; (8001118 <drawChar+0x310>)
 8001050:	7812      	ldrb	r2, [r2, #0]
 8001052:	4293      	cmp	r3, r2
 8001054:	db8f      	blt.n	8000f76 <drawChar+0x16e>
					for (int8_t k = 0; k < textSize; k++) {
 8001056:	2122      	movs	r1, #34	; 0x22
 8001058:	2018      	movs	r0, #24
 800105a:	183b      	adds	r3, r7, r0
 800105c:	185b      	adds	r3, r3, r1
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	b25b      	sxtb	r3, r3
 8001062:	b2db      	uxtb	r3, r3
 8001064:	3301      	adds	r3, #1
 8001066:	b2da      	uxtb	r2, r3
 8001068:	183b      	adds	r3, r7, r0
 800106a:	185b      	adds	r3, r3, r1
 800106c:	701a      	strb	r2, [r3, #0]
 800106e:	2322      	movs	r3, #34	; 0x22
 8001070:	2218      	movs	r2, #24
 8001072:	4694      	mov	ip, r2
 8001074:	44bc      	add	ip, r7
 8001076:	4463      	add	r3, ip
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	b25b      	sxtb	r3, r3
 800107c:	4a26      	ldr	r2, [pc, #152]	; (8001118 <drawChar+0x310>)
 800107e:	7812      	ldrb	r2, [r2, #0]
 8001080:	4293      	cmp	r3, r2
 8001082:	da00      	bge.n	8001086 <drawChar+0x27e>
 8001084:	e760      	b.n	8000f48 <drawChar+0x140>
 8001086:	e0d7      	b.n	8001238 <drawChar+0x430>
						}
					}
//					fillRect(cursorX+i*textSize, cursorY+j*textSize, textSize, textSize, textColor, hspi);
				}
			} else if (bg != textColor) {
 8001088:	4b26      	ldr	r3, [pc, #152]	; (8001124 <drawChar+0x31c>)
 800108a:	881a      	ldrh	r2, [r3, #0]
 800108c:	4b24      	ldr	r3, [pc, #144]	; (8001120 <drawChar+0x318>)
 800108e:	881b      	ldrh	r3, [r3, #0]
 8001090:	429a      	cmp	r2, r3
 8001092:	d100      	bne.n	8001096 <drawChar+0x28e>
 8001094:	e0d0      	b.n	8001238 <drawChar+0x430>
				if (textSize == 1) {
 8001096:	4b20      	ldr	r3, [pc, #128]	; (8001118 <drawChar+0x310>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d11c      	bne.n	80010d8 <drawChar+0x2d0>
					buffer[i+j*6] = colorFixer(bg);
 800109e:	4b21      	ldr	r3, [pc, #132]	; (8001124 <drawChar+0x31c>)
 80010a0:	8818      	ldrh	r0, [r3, #0]
 80010a2:	2325      	movs	r3, #37	; 0x25
 80010a4:	2218      	movs	r2, #24
 80010a6:	4694      	mov	ip, r2
 80010a8:	44bc      	add	ip, r7
 80010aa:	4463      	add	r3, ip
 80010ac:	2100      	movs	r1, #0
 80010ae:	5659      	ldrsb	r1, [r3, r1]
 80010b0:	2323      	movs	r3, #35	; 0x23
 80010b2:	2218      	movs	r2, #24
 80010b4:	4694      	mov	ip, r2
 80010b6:	44bc      	add	ip, r7
 80010b8:	4463      	add	r3, ip
 80010ba:	2200      	movs	r2, #0
 80010bc:	569a      	ldrsb	r2, [r3, r2]
 80010be:	0013      	movs	r3, r2
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	189b      	adds	r3, r3, r2
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	18cc      	adds	r4, r1, r3
 80010c8:	f7ff fb5a 	bl	8000780 <colorFixer>
 80010cc:	0003      	movs	r3, r0
 80010ce:	0019      	movs	r1, r3
 80010d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010d2:	0062      	lsls	r2, r4, #1
 80010d4:	52d1      	strh	r1, [r2, r3]
 80010d6:	e0af      	b.n	8001238 <drawChar+0x430>
				}
				else {
					for (int8_t k = 0; k < textSize; k++) {
 80010d8:	2320      	movs	r3, #32
 80010da:	2218      	movs	r2, #24
 80010dc:	4694      	mov	ip, r2
 80010de:	44bc      	add	ip, r7
 80010e0:	4463      	add	r3, ip
 80010e2:	2200      	movs	r2, #0
 80010e4:	701a      	strb	r2, [r3, #0]
 80010e6:	e09b      	b.n	8001220 <drawChar+0x418>
						rowOffset = textSize*6;
 80010e8:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <drawChar+0x310>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	1c1a      	adds	r2, r3, #0
 80010f0:	1c13      	adds	r3, r2, #0
 80010f2:	18db      	adds	r3, r3, r3
 80010f4:	189b      	adds	r3, r3, r2
 80010f6:	18db      	adds	r3, r3, r3
 80010f8:	b29a      	uxth	r2, r3
 80010fa:	2326      	movs	r3, #38	; 0x26
 80010fc:	2118      	movs	r1, #24
 80010fe:	468c      	mov	ip, r1
 8001100:	44bc      	add	ip, r7
 8001102:	4463      	add	r3, ip
 8001104:	801a      	strh	r2, [r3, #0]
						for (int8_t l = 0; l < textSize; l++) {
 8001106:	231f      	movs	r3, #31
 8001108:	2218      	movs	r2, #24
 800110a:	4694      	mov	ip, r2
 800110c:	44bc      	add	ip, r7
 800110e:	4463      	add	r3, ip
 8001110:	2200      	movs	r2, #0
 8001112:	701a      	strb	r2, [r3, #0]
 8001114:	e06d      	b.n	80011f2 <drawChar+0x3ea>
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	200000da 	.word	0x200000da
 800111c:	08008628 	.word	0x08008628
 8001120:	200000dc 	.word	0x200000dc
 8001124:	200000de 	.word	0x200000de
							address = (textSize*textSize*j*6)+(i*textSize);
 8001128:	4bda      	ldr	r3, [pc, #872]	; (8001494 <drawChar+0x68c>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	b29b      	uxth	r3, r3
 800112e:	4ad9      	ldr	r2, [pc, #868]	; (8001494 <drawChar+0x68c>)
 8001130:	7812      	ldrb	r2, [r2, #0]
 8001132:	b292      	uxth	r2, r2
 8001134:	4353      	muls	r3, r2
 8001136:	b29b      	uxth	r3, r3
 8001138:	2223      	movs	r2, #35	; 0x23
 800113a:	2118      	movs	r1, #24
 800113c:	468c      	mov	ip, r1
 800113e:	44bc      	add	ip, r7
 8001140:	4462      	add	r2, ip
 8001142:	7812      	ldrb	r2, [r2, #0]
 8001144:	b252      	sxtb	r2, r2
 8001146:	b292      	uxth	r2, r2
 8001148:	4353      	muls	r3, r2
 800114a:	b29b      	uxth	r3, r3
 800114c:	1c1a      	adds	r2, r3, #0
 800114e:	1c13      	adds	r3, r2, #0
 8001150:	18db      	adds	r3, r3, r3
 8001152:	189b      	adds	r3, r3, r2
 8001154:	18db      	adds	r3, r3, r3
 8001156:	b29a      	uxth	r2, r3
 8001158:	2325      	movs	r3, #37	; 0x25
 800115a:	2118      	movs	r1, #24
 800115c:	468c      	mov	ip, r1
 800115e:	44bc      	add	ip, r7
 8001160:	4463      	add	r3, ip
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	b25b      	sxtb	r3, r3
 8001166:	b29b      	uxth	r3, r3
 8001168:	49ca      	ldr	r1, [pc, #808]	; (8001494 <drawChar+0x68c>)
 800116a:	7809      	ldrb	r1, [r1, #0]
 800116c:	b289      	uxth	r1, r1
 800116e:	434b      	muls	r3, r1
 8001170:	b29b      	uxth	r3, r3
 8001172:	18d3      	adds	r3, r2, r3
 8001174:	b29a      	uxth	r2, r3
 8001176:	210e      	movs	r1, #14
 8001178:	2018      	movs	r0, #24
 800117a:	183b      	adds	r3, r7, r0
 800117c:	185b      	adds	r3, r3, r1
 800117e:	801a      	strh	r2, [r3, #0]
							address += rowOffset*k+l;
 8001180:	2320      	movs	r3, #32
 8001182:	2218      	movs	r2, #24
 8001184:	4694      	mov	ip, r2
 8001186:	44bc      	add	ip, r7
 8001188:	4463      	add	r3, ip
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	b25b      	sxtb	r3, r3
 800118e:	b29b      	uxth	r3, r3
 8001190:	2226      	movs	r2, #38	; 0x26
 8001192:	2418      	movs	r4, #24
 8001194:	46a4      	mov	ip, r4
 8001196:	44bc      	add	ip, r7
 8001198:	4462      	add	r2, ip
 800119a:	8812      	ldrh	r2, [r2, #0]
 800119c:	4353      	muls	r3, r2
 800119e:	b29a      	uxth	r2, r3
 80011a0:	251f      	movs	r5, #31
 80011a2:	183b      	adds	r3, r7, r0
 80011a4:	195b      	adds	r3, r3, r5
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	b25b      	sxtb	r3, r3
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	18d3      	adds	r3, r2, r3
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	183b      	adds	r3, r7, r0
 80011b2:	185b      	adds	r3, r3, r1
 80011b4:	881b      	ldrh	r3, [r3, #0]
 80011b6:	18d3      	adds	r3, r2, r3
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	183b      	adds	r3, r7, r0
 80011bc:	185b      	adds	r3, r3, r1
 80011be:	801a      	strh	r2, [r3, #0]
							buffer[address] = colorFixer(bg);
 80011c0:	4bb5      	ldr	r3, [pc, #724]	; (8001498 <drawChar+0x690>)
 80011c2:	881a      	ldrh	r2, [r3, #0]
 80011c4:	0006      	movs	r6, r0
 80011c6:	183b      	adds	r3, r7, r0
 80011c8:	185b      	adds	r3, r3, r1
 80011ca:	2400      	movs	r4, #0
 80011cc:	5f1c      	ldrsh	r4, [r3, r4]
 80011ce:	0010      	movs	r0, r2
 80011d0:	f7ff fad6 	bl	8000780 <colorFixer>
 80011d4:	0003      	movs	r3, r0
 80011d6:	0019      	movs	r1, r3
 80011d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011da:	0062      	lsls	r2, r4, #1
 80011dc:	52d1      	strh	r1, [r2, r3]
						for (int8_t l = 0; l < textSize; l++) {
 80011de:	19bb      	adds	r3, r7, r6
 80011e0:	195b      	adds	r3, r3, r5
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	b25b      	sxtb	r3, r3
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	3301      	adds	r3, #1
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	19bb      	adds	r3, r7, r6
 80011ee:	195b      	adds	r3, r3, r5
 80011f0:	701a      	strb	r2, [r3, #0]
 80011f2:	231f      	movs	r3, #31
 80011f4:	2218      	movs	r2, #24
 80011f6:	4694      	mov	ip, r2
 80011f8:	44bc      	add	ip, r7
 80011fa:	4463      	add	r3, ip
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	b25b      	sxtb	r3, r3
 8001200:	4aa4      	ldr	r2, [pc, #656]	; (8001494 <drawChar+0x68c>)
 8001202:	7812      	ldrb	r2, [r2, #0]
 8001204:	4293      	cmp	r3, r2
 8001206:	db8f      	blt.n	8001128 <drawChar+0x320>
					for (int8_t k = 0; k < textSize; k++) {
 8001208:	2120      	movs	r1, #32
 800120a:	2018      	movs	r0, #24
 800120c:	183b      	adds	r3, r7, r0
 800120e:	185b      	adds	r3, r3, r1
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	b25b      	sxtb	r3, r3
 8001214:	b2db      	uxtb	r3, r3
 8001216:	3301      	adds	r3, #1
 8001218:	b2da      	uxtb	r2, r3
 800121a:	183b      	adds	r3, r7, r0
 800121c:	185b      	adds	r3, r3, r1
 800121e:	701a      	strb	r2, [r3, #0]
 8001220:	2320      	movs	r3, #32
 8001222:	2218      	movs	r2, #24
 8001224:	4694      	mov	ip, r2
 8001226:	44bc      	add	ip, r7
 8001228:	4463      	add	r3, ip
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	b25b      	sxtb	r3, r3
 800122e:	4a99      	ldr	r2, [pc, #612]	; (8001494 <drawChar+0x68c>)
 8001230:	7812      	ldrb	r2, [r2, #0]
 8001232:	4293      	cmp	r3, r2
 8001234:	da00      	bge.n	8001238 <drawChar+0x430>
 8001236:	e757      	b.n	80010e8 <drawChar+0x2e0>
		for (int8_t j=0; j<8; j++, line >>= 1) {
 8001238:	2123      	movs	r1, #35	; 0x23
 800123a:	2018      	movs	r0, #24
 800123c:	183b      	adds	r3, r7, r0
 800123e:	185b      	adds	r3, r3, r1
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	b25b      	sxtb	r3, r3
 8001244:	b2db      	uxtb	r3, r3
 8001246:	3301      	adds	r3, #1
 8001248:	b2da      	uxtb	r2, r3
 800124a:	183b      	adds	r3, r7, r0
 800124c:	185b      	adds	r3, r3, r1
 800124e:	701a      	strb	r2, [r3, #0]
 8001250:	2224      	movs	r2, #36	; 0x24
 8001252:	183b      	adds	r3, r7, r0
 8001254:	189b      	adds	r3, r3, r2
 8001256:	2118      	movs	r1, #24
 8001258:	468c      	mov	ip, r1
 800125a:	44bc      	add	ip, r7
 800125c:	4462      	add	r2, ip
 800125e:	7812      	ldrb	r2, [r2, #0]
 8001260:	0852      	lsrs	r2, r2, #1
 8001262:	701a      	strb	r2, [r3, #0]
 8001264:	2323      	movs	r3, #35	; 0x23
 8001266:	2218      	movs	r2, #24
 8001268:	4694      	mov	ip, r2
 800126a:	44bc      	add	ip, r7
 800126c:	4463      	add	r3, ip
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	b25b      	sxtb	r3, r3
 8001272:	2b07      	cmp	r3, #7
 8001274:	dc00      	bgt.n	8001278 <drawChar+0x470>
 8001276:	e634      	b.n	8000ee2 <drawChar+0xda>
	for (int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 8001278:	2125      	movs	r1, #37	; 0x25
 800127a:	2018      	movs	r0, #24
 800127c:	183b      	adds	r3, r7, r0
 800127e:	185b      	adds	r3, r3, r1
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	b25b      	sxtb	r3, r3
 8001284:	b2db      	uxtb	r3, r3
 8001286:	3301      	adds	r3, #1
 8001288:	b2da      	uxtb	r2, r3
 800128a:	183b      	adds	r3, r7, r0
 800128c:	185b      	adds	r3, r3, r1
 800128e:	701a      	strb	r2, [r3, #0]
 8001290:	2325      	movs	r3, #37	; 0x25
 8001292:	2218      	movs	r2, #24
 8001294:	4694      	mov	ip, r2
 8001296:	44bc      	add	ip, r7
 8001298:	4463      	add	r3, ip
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	b25b      	sxtb	r3, r3
 800129e:	2b04      	cmp	r3, #4
 80012a0:	dc00      	bgt.n	80012a4 <drawChar+0x49c>
 80012a2:	e600      	b.n	8000ea6 <drawChar+0x9e>
				}
			}
		}
	}

	if (bg != textColor) { // If opaque, draw vertical line for last column
 80012a4:	4b7c      	ldr	r3, [pc, #496]	; (8001498 <drawChar+0x690>)
 80012a6:	881a      	ldrh	r2, [r3, #0]
 80012a8:	4b7c      	ldr	r3, [pc, #496]	; (800149c <drawChar+0x694>)
 80012aa:	881b      	ldrh	r3, [r3, #0]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d100      	bne.n	80012b2 <drawChar+0x4aa>
 80012b0:	e0ca      	b.n	8001448 <drawChar+0x640>
		for (int8_t j = 0; j < 8; j++) {
 80012b2:	231e      	movs	r3, #30
 80012b4:	2218      	movs	r2, #24
 80012b6:	4694      	mov	ip, r2
 80012b8:	44bc      	add	ip, r7
 80012ba:	4463      	add	r3, ip
 80012bc:	2200      	movs	r2, #0
 80012be:	701a      	strb	r2, [r3, #0]
 80012c0:	e0b8      	b.n	8001434 <drawChar+0x62c>
			if (textSize == 1) {
 80012c2:	4b74      	ldr	r3, [pc, #464]	; (8001494 <drawChar+0x68c>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d116      	bne.n	80012f8 <drawChar+0x4f0>
				buffer[5+j*6] = colorFixer(bg);
 80012ca:	4b73      	ldr	r3, [pc, #460]	; (8001498 <drawChar+0x690>)
 80012cc:	8819      	ldrh	r1, [r3, #0]
 80012ce:	231e      	movs	r3, #30
 80012d0:	2218      	movs	r2, #24
 80012d2:	4694      	mov	ip, r2
 80012d4:	44bc      	add	ip, r7
 80012d6:	4463      	add	r3, ip
 80012d8:	2200      	movs	r2, #0
 80012da:	569a      	ldrsb	r2, [r3, r2]
 80012dc:	0013      	movs	r3, r2
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	189b      	adds	r3, r3, r2
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	1d5c      	adds	r4, r3, #5
 80012e6:	0008      	movs	r0, r1
 80012e8:	f7ff fa4a 	bl	8000780 <colorFixer>
 80012ec:	0003      	movs	r3, r0
 80012ee:	0019      	movs	r1, r3
 80012f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f2:	0062      	lsls	r2, r4, #1
 80012f4:	52d1      	strh	r1, [r2, r3]
 80012f6:	e091      	b.n	800141c <drawChar+0x614>
			}
			else {
				for (int8_t k = 0; k < textSize; k++) {
 80012f8:	231d      	movs	r3, #29
 80012fa:	2218      	movs	r2, #24
 80012fc:	4694      	mov	ip, r2
 80012fe:	44bc      	add	ip, r7
 8001300:	4463      	add	r3, ip
 8001302:	2200      	movs	r2, #0
 8001304:	701a      	strb	r2, [r3, #0]
 8001306:	e07d      	b.n	8001404 <drawChar+0x5fc>
					for (int8_t l = 0; l < textSize; l++) {
 8001308:	231c      	movs	r3, #28
 800130a:	2218      	movs	r2, #24
 800130c:	4694      	mov	ip, r2
 800130e:	44bc      	add	ip, r7
 8001310:	4463      	add	r3, ip
 8001312:	2200      	movs	r2, #0
 8001314:	701a      	strb	r2, [r3, #0]
 8001316:	e05e      	b.n	80013d6 <drawChar+0x5ce>
						address = (textSize*textSize*j*6)+(5*textSize);
 8001318:	4b5e      	ldr	r3, [pc, #376]	; (8001494 <drawChar+0x68c>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	b29b      	uxth	r3, r3
 800131e:	4a5d      	ldr	r2, [pc, #372]	; (8001494 <drawChar+0x68c>)
 8001320:	7812      	ldrb	r2, [r2, #0]
 8001322:	b292      	uxth	r2, r2
 8001324:	4353      	muls	r3, r2
 8001326:	b29b      	uxth	r3, r3
 8001328:	221e      	movs	r2, #30
 800132a:	2118      	movs	r1, #24
 800132c:	468c      	mov	ip, r1
 800132e:	44bc      	add	ip, r7
 8001330:	4462      	add	r2, ip
 8001332:	7812      	ldrb	r2, [r2, #0]
 8001334:	b252      	sxtb	r2, r2
 8001336:	b292      	uxth	r2, r2
 8001338:	4353      	muls	r3, r2
 800133a:	b29b      	uxth	r3, r3
 800133c:	1c1a      	adds	r2, r3, #0
 800133e:	1c13      	adds	r3, r2, #0
 8001340:	18db      	adds	r3, r3, r3
 8001342:	189b      	adds	r3, r3, r2
 8001344:	18db      	adds	r3, r3, r3
 8001346:	b29a      	uxth	r2, r3
 8001348:	4b52      	ldr	r3, [pc, #328]	; (8001494 <drawChar+0x68c>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	b29b      	uxth	r3, r3
 800134e:	1c19      	adds	r1, r3, #0
 8001350:	0089      	lsls	r1, r1, #2
 8001352:	18cb      	adds	r3, r1, r3
 8001354:	b29b      	uxth	r3, r3
 8001356:	18d3      	adds	r3, r2, r3
 8001358:	b29a      	uxth	r2, r3
 800135a:	210e      	movs	r1, #14
 800135c:	2018      	movs	r0, #24
 800135e:	183b      	adds	r3, r7, r0
 8001360:	185b      	adds	r3, r3, r1
 8001362:	801a      	strh	r2, [r3, #0]
						address += rowOffset*k+l;
 8001364:	231d      	movs	r3, #29
 8001366:	2218      	movs	r2, #24
 8001368:	4694      	mov	ip, r2
 800136a:	44bc      	add	ip, r7
 800136c:	4463      	add	r3, ip
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	b25b      	sxtb	r3, r3
 8001372:	b29b      	uxth	r3, r3
 8001374:	2226      	movs	r2, #38	; 0x26
 8001376:	2418      	movs	r4, #24
 8001378:	46a4      	mov	ip, r4
 800137a:	44bc      	add	ip, r7
 800137c:	4462      	add	r2, ip
 800137e:	8812      	ldrh	r2, [r2, #0]
 8001380:	4353      	muls	r3, r2
 8001382:	b29a      	uxth	r2, r3
 8001384:	251c      	movs	r5, #28
 8001386:	183b      	adds	r3, r7, r0
 8001388:	195b      	adds	r3, r3, r5
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	b25b      	sxtb	r3, r3
 800138e:	b29b      	uxth	r3, r3
 8001390:	18d3      	adds	r3, r2, r3
 8001392:	b29a      	uxth	r2, r3
 8001394:	183b      	adds	r3, r7, r0
 8001396:	185b      	adds	r3, r3, r1
 8001398:	881b      	ldrh	r3, [r3, #0]
 800139a:	18d3      	adds	r3, r2, r3
 800139c:	b29a      	uxth	r2, r3
 800139e:	183b      	adds	r3, r7, r0
 80013a0:	185b      	adds	r3, r3, r1
 80013a2:	801a      	strh	r2, [r3, #0]
						buffer[address] = colorFixer(bg);
 80013a4:	4b3c      	ldr	r3, [pc, #240]	; (8001498 <drawChar+0x690>)
 80013a6:	881a      	ldrh	r2, [r3, #0]
 80013a8:	0006      	movs	r6, r0
 80013aa:	183b      	adds	r3, r7, r0
 80013ac:	185b      	adds	r3, r3, r1
 80013ae:	2400      	movs	r4, #0
 80013b0:	5f1c      	ldrsh	r4, [r3, r4]
 80013b2:	0010      	movs	r0, r2
 80013b4:	f7ff f9e4 	bl	8000780 <colorFixer>
 80013b8:	0003      	movs	r3, r0
 80013ba:	0019      	movs	r1, r3
 80013bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013be:	0062      	lsls	r2, r4, #1
 80013c0:	52d1      	strh	r1, [r2, r3]
					for (int8_t l = 0; l < textSize; l++) {
 80013c2:	19bb      	adds	r3, r7, r6
 80013c4:	195b      	adds	r3, r3, r5
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	b25b      	sxtb	r3, r3
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	3301      	adds	r3, #1
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	19bb      	adds	r3, r7, r6
 80013d2:	195b      	adds	r3, r3, r5
 80013d4:	701a      	strb	r2, [r3, #0]
 80013d6:	231c      	movs	r3, #28
 80013d8:	2218      	movs	r2, #24
 80013da:	4694      	mov	ip, r2
 80013dc:	44bc      	add	ip, r7
 80013de:	4463      	add	r3, ip
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	b25b      	sxtb	r3, r3
 80013e4:	4a2b      	ldr	r2, [pc, #172]	; (8001494 <drawChar+0x68c>)
 80013e6:	7812      	ldrb	r2, [r2, #0]
 80013e8:	4293      	cmp	r3, r2
 80013ea:	db95      	blt.n	8001318 <drawChar+0x510>
				for (int8_t k = 0; k < textSize; k++) {
 80013ec:	211d      	movs	r1, #29
 80013ee:	2018      	movs	r0, #24
 80013f0:	183b      	adds	r3, r7, r0
 80013f2:	185b      	adds	r3, r3, r1
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	b25b      	sxtb	r3, r3
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	3301      	adds	r3, #1
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	183b      	adds	r3, r7, r0
 8001400:	185b      	adds	r3, r3, r1
 8001402:	701a      	strb	r2, [r3, #0]
 8001404:	231d      	movs	r3, #29
 8001406:	2218      	movs	r2, #24
 8001408:	4694      	mov	ip, r2
 800140a:	44bc      	add	ip, r7
 800140c:	4463      	add	r3, ip
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	b25b      	sxtb	r3, r3
 8001412:	4a20      	ldr	r2, [pc, #128]	; (8001494 <drawChar+0x68c>)
 8001414:	7812      	ldrb	r2, [r2, #0]
 8001416:	4293      	cmp	r3, r2
 8001418:	da00      	bge.n	800141c <drawChar+0x614>
 800141a:	e775      	b.n	8001308 <drawChar+0x500>
		for (int8_t j = 0; j < 8; j++) {
 800141c:	211e      	movs	r1, #30
 800141e:	2018      	movs	r0, #24
 8001420:	183b      	adds	r3, r7, r0
 8001422:	185b      	adds	r3, r3, r1
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	b25b      	sxtb	r3, r3
 8001428:	b2db      	uxtb	r3, r3
 800142a:	3301      	adds	r3, #1
 800142c:	b2da      	uxtb	r2, r3
 800142e:	183b      	adds	r3, r7, r0
 8001430:	185b      	adds	r3, r3, r1
 8001432:	701a      	strb	r2, [r3, #0]
 8001434:	231e      	movs	r3, #30
 8001436:	2218      	movs	r2, #24
 8001438:	4694      	mov	ip, r2
 800143a:	44bc      	add	ip, r7
 800143c:	4463      	add	r3, ip
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	b25b      	sxtb	r3, r3
 8001442:	2b07      	cmp	r3, #7
 8001444:	dc00      	bgt.n	8001448 <drawChar+0x640>
 8001446:	e73c      	b.n	80012c2 <drawChar+0x4ba>
			}
		}
//		else fillRect(cursorX+5*textSize, cursorY, textSize, 8*textSize, bg, hspi);
	}

	drawBuffer(cursorX, cursorY, 6*textSize, 8*textSize, buffer, bufferSize, hspi);
 8001448:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <drawChar+0x698>)
 800144a:	7818      	ldrb	r0, [r3, #0]
 800144c:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <drawChar+0x69c>)
 800144e:	7819      	ldrb	r1, [r3, #0]
 8001450:	4b10      	ldr	r3, [pc, #64]	; (8001494 <drawChar+0x68c>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	1c1a      	adds	r2, r3, #0
 8001456:	1c13      	adds	r3, r2, #0
 8001458:	18db      	adds	r3, r3, r3
 800145a:	189b      	adds	r3, r3, r2
 800145c:	18db      	adds	r3, r3, r3
 800145e:	b2dc      	uxtb	r4, r3
 8001460:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <drawChar+0x68c>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	b2dd      	uxtb	r5, r3
 8001468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	9202      	str	r2, [sp, #8]
 800146e:	221a      	movs	r2, #26
 8001470:	2618      	movs	r6, #24
 8001472:	46b4      	mov	ip, r6
 8001474:	44bc      	add	ip, r7
 8001476:	4462      	add	r2, ip
 8001478:	8812      	ldrh	r2, [r2, #0]
 800147a:	9201      	str	r2, [sp, #4]
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	002b      	movs	r3, r5
 8001480:	0022      	movs	r2, r4
 8001482:	f7ff faee 	bl	8000a62 <drawBuffer>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	469d      	mov	sp, r3
//	setCursor(cursorX+6, cursorY);
}
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	46bd      	mov	sp, r7
 800148e:	b011      	add	sp, #68	; 0x44
 8001490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001492:	46c0      	nop			; (mov r8, r8)
 8001494:	200000da 	.word	0x200000da
 8001498:	200000de 	.word	0x200000de
 800149c:	200000dc 	.word	0x200000dc
 80014a0:	200000d8 	.word	0x200000d8
 80014a4:	200000d9 	.word	0x200000d9

080014a8 <drawText>:

// this function is slow, and you can definitely see a scrolling speed thing going on
// how to remove this so it prints near instantly?
// maybe not needed if all we're doing is printing time (very few characters)
void drawText(const char *str, SPI_HandleTypeDef *hspi) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
	// add text wrap
	for (int i = 0; str[i] != '\0'; i++) {
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	e00b      	b.n	80014d0 <drawText+0x28>
		drawChar(str[i], hspi);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	18d3      	adds	r3, r2, r3
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	0011      	movs	r1, r2
 80014c4:	0018      	movs	r0, r3
 80014c6:	f7ff fc9f 	bl	8000e08 <drawChar>
	for (int i = 0; str[i] != '\0'; i++) {
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	3301      	adds	r3, #1
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	18d3      	adds	r3, r2, r3
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1ed      	bne.n	80014b8 <drawText+0x10>
	}
}
 80014dc:	46c0      	nop			; (mov r8, r8)
 80014de:	46bd      	mov	sp, r7
 80014e0:	b004      	add	sp, #16
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <setBackgroundColor>:
		setCursor(cursorX+textSize*6, cursorY);
	}
//	setCursor(x+i*textSize*6, y);
}

void setBackgroundColor(uint16_t color) {bg = color;}
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	0002      	movs	r2, r0
 80014ec:	1dbb      	adds	r3, r7, #6
 80014ee:	801a      	strh	r2, [r3, #0]
 80014f0:	4b03      	ldr	r3, [pc, #12]	; (8001500 <setBackgroundColor+0x1c>)
 80014f2:	1dba      	adds	r2, r7, #6
 80014f4:	8812      	ldrh	r2, [r2, #0]
 80014f6:	801a      	strh	r2, [r3, #0]
 80014f8:	46c0      	nop			; (mov r8, r8)
 80014fa:	46bd      	mov	sp, r7
 80014fc:	b002      	add	sp, #8
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	200000de 	.word	0x200000de

08001504 <setCursor>:

void setCursor(uint8_t x, uint8_t y) {
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	0002      	movs	r2, r0
 800150c:	1dfb      	adds	r3, r7, #7
 800150e:	701a      	strb	r2, [r3, #0]
 8001510:	1dbb      	adds	r3, r7, #6
 8001512:	1c0a      	adds	r2, r1, #0
 8001514:	701a      	strb	r2, [r3, #0]
	cursorX = x;
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <setCursor+0x2c>)
 8001518:	1dfa      	adds	r2, r7, #7
 800151a:	7812      	ldrb	r2, [r2, #0]
 800151c:	701a      	strb	r2, [r3, #0]
	cursorY = y;
 800151e:	4b05      	ldr	r3, [pc, #20]	; (8001534 <setCursor+0x30>)
 8001520:	1dba      	adds	r2, r7, #6
 8001522:	7812      	ldrb	r2, [r2, #0]
 8001524:	701a      	strb	r2, [r3, #0]
}
 8001526:	46c0      	nop			; (mov r8, r8)
 8001528:	46bd      	mov	sp, r7
 800152a:	b002      	add	sp, #8
 800152c:	bd80      	pop	{r7, pc}
 800152e:	46c0      	nop			; (mov r8, r8)
 8001530:	200000d8 	.word	0x200000d8
 8001534:	200000d9 	.word	0x200000d9

08001538 <setTextSize>:

void setTextSize(uint8_t size) {textSize = size;}
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	0002      	movs	r2, r0
 8001540:	1dfb      	adds	r3, r7, #7
 8001542:	701a      	strb	r2, [r3, #0]
 8001544:	4b03      	ldr	r3, [pc, #12]	; (8001554 <setTextSize+0x1c>)
 8001546:	1dfa      	adds	r2, r7, #7
 8001548:	7812      	ldrb	r2, [r2, #0]
 800154a:	701a      	strb	r2, [r3, #0]
 800154c:	46c0      	nop			; (mov r8, r8)
 800154e:	46bd      	mov	sp, r7
 8001550:	b002      	add	sp, #8
 8001552:	bd80      	pop	{r7, pc}
 8001554:	200000da 	.word	0x200000da

08001558 <setTextColor>:

void setTextColor(uint16_t color) {textColor = color;}
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	0002      	movs	r2, r0
 8001560:	1dbb      	adds	r3, r7, #6
 8001562:	801a      	strh	r2, [r3, #0]
 8001564:	4b03      	ldr	r3, [pc, #12]	; (8001574 <setTextColor+0x1c>)
 8001566:	1dba      	adds	r2, r7, #6
 8001568:	8812      	ldrh	r2, [r2, #0]
 800156a:	801a      	strh	r2, [r3, #0]
 800156c:	46c0      	nop			; (mov r8, r8)
 800156e:	46bd      	mov	sp, r7
 8001570:	b002      	add	sp, #8
 8001572:	bd80      	pop	{r7, pc}
 8001574:	200000dc 	.word	0x200000dc

08001578 <clearScreen>:

void clearScreen(uint16_t backgroundColor, SPI_HandleTypeDef *hspi) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	0002      	movs	r2, r0
 8001580:	6039      	str	r1, [r7, #0]
 8001582:	1dbb      	adds	r3, r7, #6
 8001584:	801a      	strh	r2, [r3, #0]
	bg = backgroundColor;
 8001586:	4b07      	ldr	r3, [pc, #28]	; (80015a4 <clearScreen+0x2c>)
 8001588:	1dba      	adds	r2, r7, #6
 800158a:	8812      	ldrh	r2, [r2, #0]
 800158c:	801a      	strh	r2, [r3, #0]
	fillScreen(backgroundColor, hspi);
 800158e:	683a      	ldr	r2, [r7, #0]
 8001590:	1dbb      	adds	r3, r7, #6
 8001592:	881b      	ldrh	r3, [r3, #0]
 8001594:	0011      	movs	r1, r2
 8001596:	0018      	movs	r0, r3
 8001598:	f7ff fb39 	bl	8000c0e <fillScreen>
}
 800159c:	46c0      	nop			; (mov r8, r8)
 800159e:	46bd      	mov	sp, r7
 80015a0:	b002      	add	sp, #8
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	200000de 	.word	0x200000de

080015a8 <setTime>:

#include "clocks.h"

// set rtc time. uses perosnal struct as arg
// assert members not null for set functions?
void setTime(struct times *t) {
 80015a8:	b590      	push	{r4, r7, lr}
 80015aa:	b089      	sub	sp, #36	; 0x24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef stime = {0};	// change to malloc call? does that work in embedded?
 80015b0:	210c      	movs	r1, #12
 80015b2:	000c      	movs	r4, r1
 80015b4:	187b      	adds	r3, r7, r1
 80015b6:	0018      	movs	r0, r3
 80015b8:	2314      	movs	r3, #20
 80015ba:	001a      	movs	r2, r3
 80015bc:	2100      	movs	r1, #0
 80015be:	f006 fb0a 	bl	8007bd6 <memset>

	// set using args later
	stime.Hours = t->hr;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	781a      	ldrb	r2, [r3, #0]
 80015c6:	0021      	movs	r1, r4
 80015c8:	187b      	adds	r3, r7, r1
 80015ca:	701a      	strb	r2, [r3, #0]
	stime.Minutes = t->min;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	785a      	ldrb	r2, [r3, #1]
 80015d0:	187b      	adds	r3, r7, r1
 80015d2:	705a      	strb	r2, [r3, #1]
	stime.Seconds = t->sec;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	789a      	ldrb	r2, [r3, #2]
 80015d8:	187b      	adds	r3, r7, r1
 80015da:	709a      	strb	r2, [r3, #2]

	stime.TimeFormat = RTC_HOURFORMAT_24;
 80015dc:	187b      	adds	r3, r7, r1
 80015de:	2200      	movs	r2, #0
 80015e0:	70da      	strb	r2, [r3, #3]

	// not sure what these do, but probably fine if set to 0 or ignored
	stime.SubSeconds = 0;
 80015e2:	187b      	adds	r3, r7, r1
 80015e4:	2200      	movs	r2, #0
 80015e6:	605a      	str	r2, [r3, #4]
	stime.SecondFraction = 0;
 80015e8:	187b      	adds	r3, r7, r1
 80015ea:	2200      	movs	r2, #0
 80015ec:	609a      	str	r2, [r3, #8]

	stime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;		// add daylight savings later?
 80015ee:	187b      	adds	r3, r7, r1
 80015f0:	2200      	movs	r2, #0
 80015f2:	60da      	str	r2, [r3, #12]
	stime.StoreOperation = RTC_STOREOPERATION_SET;		// not sure what this does
 80015f4:	187b      	adds	r3, r7, r1
 80015f6:	2280      	movs	r2, #128	; 0x80
 80015f8:	02d2      	lsls	r2, r2, #11
 80015fa:	611a      	str	r2, [r3, #16]

	// do nothing until done
	// not following BCD format (4-bit digit 1, 4-bit digit 2)
	// while makes program hang? ignore instead?
//	while (HAL_RTC_SetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK);
	HAL_RTC_SetTime(&hrtc, &stime, RTC_FORMAT_BIN);
 80015fc:	1879      	adds	r1, r7, r1
 80015fe:	4b06      	ldr	r3, [pc, #24]	; (8001618 <setTime+0x70>)
 8001600:	2200      	movs	r2, #0
 8001602:	0018      	movs	r0, r3
 8001604:	f004 fbec 	bl	8005de0 <HAL_RTC_SetTime>

	runClockDisplay(&htim22);
 8001608:	4b04      	ldr	r3, [pc, #16]	; (800161c <setTime+0x74>)
 800160a:	0018      	movs	r0, r3
 800160c:	f002 fa5c 	bl	8003ac8 <runClockDisplay>
}
 8001610:	46c0      	nop			; (mov r8, r8)
 8001612:	46bd      	mov	sp, r7
 8001614:	b009      	add	sp, #36	; 0x24
 8001616:	bd90      	pop	{r4, r7, pc}
 8001618:	20000194 	.word	0x20000194
 800161c:	20000120 	.word	0x20000120

08001620 <setDate>:

// set rtc date. uses personal struct
void setDate(struct dates *d) {
 8001620:	b590      	push	{r4, r7, lr}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
	// ---- date ----
	RTC_DateTypeDef sdate = {0};
 8001628:	240c      	movs	r4, #12
 800162a:	193b      	adds	r3, r7, r4
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]

	sdate.Month = d->month;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	789a      	ldrb	r2, [r3, #2]
 8001634:	193b      	adds	r3, r7, r4
 8001636:	705a      	strb	r2, [r3, #1]
	sdate.Date = d->date;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	78da      	ldrb	r2, [r3, #3]
 800163c:	193b      	adds	r3, r7, r4
 800163e:	709a      	strb	r2, [r3, #2]
	sdate.WeekDay = d->weekday;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	791a      	ldrb	r2, [r3, #4]
 8001644:	193b      	adds	r3, r7, r4
 8001646:	701a      	strb	r2, [r3, #0]
	sdate.Year = d->yr % 100; 		// set only between 0-99. part of the library (!?)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	881b      	ldrh	r3, [r3, #0]
 800164c:	2164      	movs	r1, #100	; 0x64
 800164e:	0018      	movs	r0, r3
 8001650:	f7fe fde8 	bl	8000224 <__aeabi_uidivmod>
 8001654:	000b      	movs	r3, r1
 8001656:	b29b      	uxth	r3, r3
 8001658:	b2da      	uxtb	r2, r3
 800165a:	193b      	adds	r3, r7, r4
 800165c:	70da      	strb	r2, [r3, #3]

	HAL_RTC_SetDate(&hrtc, &sdate, RTC_FORMAT_BIN);
 800165e:	1939      	adds	r1, r7, r4
 8001660:	4b06      	ldr	r3, [pc, #24]	; (800167c <setDate+0x5c>)
 8001662:	2200      	movs	r2, #0
 8001664:	0018      	movs	r0, r3
 8001666:	f004 fcdb 	bl	8006020 <HAL_RTC_SetDate>

	runClockDisplay(&htim22);
 800166a:	4b05      	ldr	r3, [pc, #20]	; (8001680 <setDate+0x60>)
 800166c:	0018      	movs	r0, r3
 800166e:	f002 fa2b 	bl	8003ac8 <runClockDisplay>
}
 8001672:	46c0      	nop			; (mov r8, r8)
 8001674:	46bd      	mov	sp, r7
 8001676:	b005      	add	sp, #20
 8001678:	bd90      	pop	{r4, r7, pc}
 800167a:	46c0      	nop			; (mov r8, r8)
 800167c:	20000194 	.word	0x20000194
 8001680:	20000120 	.word	0x20000120

08001684 <setDateTime>:

void setDateTime(struct dates *d, struct times *t) {
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
	setDate(d);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	0018      	movs	r0, r3
 8001692:	f7ff ffc5 	bl	8001620 <setDate>
	setTime(t);
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	0018      	movs	r0, r3
 800169a:	f7ff ff85 	bl	80015a8 <setTime>
}
 800169e:	46c0      	nop			; (mov r8, r8)
 80016a0:	46bd      	mov	sp, r7
 80016a2:	b002      	add	sp, #8
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <setAlarm>:

// for time of day+week
void setAlarm(struct alarmTimes *a) {
 80016a8:	b5b0      	push	{r4, r5, r7, lr}
 80016aa:	b092      	sub	sp, #72	; 0x48
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	RTC_AlarmTypeDef salarm = {0};
 80016b0:	2520      	movs	r5, #32
 80016b2:	197b      	adds	r3, r7, r5
 80016b4:	0018      	movs	r0, r3
 80016b6:	2328      	movs	r3, #40	; 0x28
 80016b8:	001a      	movs	r2, r3
 80016ba:	2100      	movs	r1, #0
 80016bc:	f006 fa8b 	bl	8007bd6 <memset>
	RTC_TimeTypeDef salarmtime = {0};
 80016c0:	240c      	movs	r4, #12
 80016c2:	193b      	adds	r3, r7, r4
 80016c4:	0018      	movs	r0, r3
 80016c6:	2314      	movs	r3, #20
 80016c8:	001a      	movs	r2, r3
 80016ca:	2100      	movs	r1, #0
 80016cc:	f006 fa83 	bl	8007bd6 <memset>

	watchAlarm = *a;	// this is probably fine (value at a is defined already)
 80016d0:	4a23      	ldr	r2, [pc, #140]	; (8001760 <setAlarm+0xb8>)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	0010      	movs	r0, r2
 80016d6:	0019      	movs	r1, r3
 80016d8:	2304      	movs	r3, #4
 80016da:	001a      	movs	r2, r3
 80016dc:	f006 fa72 	bl	8007bc4 <memcpy>

	// change to set with args
	salarmtime.Hours = a->hr;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	781a      	ldrb	r2, [r3, #0]
 80016e4:	193b      	adds	r3, r7, r4
 80016e6:	701a      	strb	r2, [r3, #0]
	salarmtime.Minutes = a->min;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	785a      	ldrb	r2, [r3, #1]
 80016ec:	193b      	adds	r3, r7, r4
 80016ee:	705a      	strb	r2, [r3, #1]
	salarmtime.Seconds = a->sec;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	789a      	ldrb	r2, [r3, #2]
 80016f4:	193b      	adds	r3, r7, r4
 80016f6:	709a      	strb	r2, [r3, #2]
	salarmtime.TimeFormat = RTC_HOURFORMAT_24;
 80016f8:	193b      	adds	r3, r7, r4
 80016fa:	2200      	movs	r2, #0
 80016fc:	70da      	strb	r2, [r3, #3]
	salarmtime.SubSeconds = 0;
 80016fe:	0021      	movs	r1, r4
 8001700:	187b      	adds	r3, r7, r1
 8001702:	2200      	movs	r2, #0
 8001704:	605a      	str	r2, [r3, #4]
	salarmtime.SecondFraction = 0;
 8001706:	187b      	adds	r3, r7, r1
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
	salarmtime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800170c:	187b      	adds	r3, r7, r1
 800170e:	2200      	movs	r2, #0
 8001710:	60da      	str	r2, [r3, #12]
	salarmtime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001712:	187b      	adds	r3, r7, r1
 8001714:	2200      	movs	r2, #0
 8001716:	611a      	str	r2, [r3, #16]

	salarm.AlarmTime = salarmtime;
 8001718:	197b      	adds	r3, r7, r5
 800171a:	187a      	adds	r2, r7, r1
 800171c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800171e:	c313      	stmia	r3!, {r0, r1, r4}
 8001720:	ca03      	ldmia	r2!, {r0, r1}
 8001722:	c303      	stmia	r3!, {r0, r1}
	salarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001724:	197b      	adds	r3, r7, r5
 8001726:	2200      	movs	r2, #0
 8001728:	615a      	str	r2, [r3, #20]
	salarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800172a:	197b      	adds	r3, r7, r5
 800172c:	2200      	movs	r2, #0
 800172e:	619a      	str	r2, [r3, #24]
	salarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 8001730:	197b      	adds	r3, r7, r5
 8001732:	2280      	movs	r2, #128	; 0x80
 8001734:	05d2      	lsls	r2, r2, #23
 8001736:	61da      	str	r2, [r3, #28]
	salarm.AlarmDateWeekDay = a->weekday;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	78d9      	ldrb	r1, [r3, #3]
 800173c:	197b      	adds	r3, r7, r5
 800173e:	2220      	movs	r2, #32
 8001740:	5499      	strb	r1, [r3, r2]
	salarm.Alarm = RTC_ALARM_A;			// change if using different alarm
 8001742:	197b      	adds	r3, r7, r5
 8001744:	2280      	movs	r2, #128	; 0x80
 8001746:	0052      	lsls	r2, r2, #1
 8001748:	625a      	str	r2, [r3, #36]	; 0x24

	// do nothing until done
	HAL_RTC_SetAlarm_IT(&hrtc, &salarm, RTC_FORMAT_BIN);
 800174a:	1979      	adds	r1, r7, r5
 800174c:	4b05      	ldr	r3, [pc, #20]	; (8001764 <setAlarm+0xbc>)
 800174e:	2200      	movs	r2, #0
 8001750:	0018      	movs	r0, r3
 8001752:	f004 fd61 	bl	8006218 <HAL_RTC_SetAlarm_IT>
}
 8001756:	46c0      	nop			; (mov r8, r8)
 8001758:	46bd      	mov	sp, r7
 800175a:	b012      	add	sp, #72	; 0x48
 800175c:	bdb0      	pop	{r4, r5, r7, pc}
 800175e:	46c0      	nop			; (mov r8, r8)
 8001760:	20000118 	.word	0x20000118
 8001764:	20000194 	.word	0x20000194

08001768 <HAL_RTC_AlarmAEventCallback>:

// ---- callbacks for interrupts ----
// used for alarm function in project
// meant to send signal to use motor
// change to use hw timer so signal is temporary
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
	// change pin to whatever's accessible
	// using PC0
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 8001770:	4b0a      	ldr	r3, [pc, #40]	; (800179c <HAL_RTC_AlarmAEventCallback+0x34>)
 8001772:	2101      	movs	r1, #1
 8001774:	0018      	movs	r0, r3
 8001776:	f003 f8c3 	bl	8004900 <HAL_GPIO_TogglePin>
	HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_A);
 800177a:	2380      	movs	r3, #128	; 0x80
 800177c:	005a      	lsls	r2, r3, #1
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	0011      	movs	r1, r2
 8001782:	0018      	movs	r0, r3
 8001784:	f004 fe94 	bl	80064b0 <HAL_RTC_DeactivateAlarm>
	isAlarmRunning = 0;
 8001788:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <HAL_RTC_AlarmAEventCallback+0x38>)
 800178a:	2200      	movs	r2, #0
 800178c:	701a      	strb	r2, [r3, #0]
	updateFace.alarm = 1;
 800178e:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <HAL_RTC_AlarmAEventCallback+0x3c>)
 8001790:	2201      	movs	r2, #1
 8001792:	709a      	strb	r2, [r3, #2]
//	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
//	HAL_Delay(500);			// does this work in interrupt/callback? might not
//	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
}
 8001794:	46c0      	nop			; (mov r8, r8)
 8001796:	46bd      	mov	sp, r7
 8001798:	b002      	add	sp, #8
 800179a:	bd80      	pop	{r7, pc}
 800179c:	50000800 	.word	0x50000800
 80017a0:	20000161 	.word	0x20000161
 80017a4:	2000015c 	.word	0x2000015c

080017a8 <HAL_RTCEx_AlarmBEventCallback>:

void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc) {
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
	// toggles pin on end of timer. clears alarm
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 80017b0:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <HAL_RTCEx_AlarmBEventCallback+0x34>)
 80017b2:	2102      	movs	r1, #2
 80017b4:	0018      	movs	r0, r3
 80017b6:	f003 f8a3 	bl	8004900 <HAL_GPIO_TogglePin>
	HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_B);
 80017ba:	2380      	movs	r3, #128	; 0x80
 80017bc:	009a      	lsls	r2, r3, #2
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	0011      	movs	r1, r2
 80017c2:	0018      	movs	r0, r3
 80017c4:	f004 fe74 	bl	80064b0 <HAL_RTC_DeactivateAlarm>
	isTimerRunning = 0;
 80017c8:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <HAL_RTCEx_AlarmBEventCallback+0x38>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	701a      	strb	r2, [r3, #0]
	updateFace.timer = 1;
 80017ce:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <HAL_RTCEx_AlarmBEventCallback+0x3c>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	705a      	strb	r2, [r3, #1]
	/*
	 * should run motor thing and update display to signal user
	 * also clear alarm
	 */
}
 80017d4:	46c0      	nop			; (mov r8, r8)
 80017d6:	46bd      	mov	sp, r7
 80017d8:	b002      	add	sp, #8
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	50000800 	.word	0x50000800
 80017e0:	200001bc 	.word	0x200001bc
 80017e4:	2000015c 	.word	0x2000015c

080017e8 <getDateTime>:
	d->date = sdate.Date;
	d->weekday = sdate.WeekDay;
}

// not using getDate and getTime for efficiency (?)
void getDateTime(struct dates *d, struct times *t) {
 80017e8:	b590      	push	{r4, r7, lr}
 80017ea:	b089      	sub	sp, #36	; 0x24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
	RTC_DateTypeDef sdate;
	RTC_TimeTypeDef stime;

	// programming manual says to read time after date. something shadow registers.
	// not done automatically in HAL
	HAL_RTC_GetTime(&hrtc, &stime, RTC_FORMAT_BIN);
 80017f2:	2308      	movs	r3, #8
 80017f4:	18f9      	adds	r1, r7, r3
 80017f6:	4b21      	ldr	r3, [pc, #132]	; (800187c <getDateTime+0x94>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	0018      	movs	r0, r3
 80017fc:	f004 fbb4 	bl	8005f68 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sdate, RTC_FORMAT_BIN);
 8001800:	241c      	movs	r4, #28
 8001802:	1939      	adds	r1, r7, r4
 8001804:	4b1d      	ldr	r3, [pc, #116]	; (800187c <getDateTime+0x94>)
 8001806:	2200      	movs	r2, #0
 8001808:	0018      	movs	r0, r3
 800180a:	f004 fcb7 	bl	800617c <HAL_RTC_GetDate>

	d->yr = sdate.Year > 50 ? sdate.Year+1900 : sdate.Year+2000;		// make assumptions on whether it's 19xx or 20xx
 800180e:	193b      	adds	r3, r7, r4
 8001810:	78db      	ldrb	r3, [r3, #3]
 8001812:	2b32      	cmp	r3, #50	; 0x32
 8001814:	d908      	bls.n	8001828 <getDateTime+0x40>
 8001816:	231c      	movs	r3, #28
 8001818:	18fb      	adds	r3, r7, r3
 800181a:	78db      	ldrb	r3, [r3, #3]
 800181c:	b29b      	uxth	r3, r3
 800181e:	4a18      	ldr	r2, [pc, #96]	; (8001880 <getDateTime+0x98>)
 8001820:	4694      	mov	ip, r2
 8001822:	4463      	add	r3, ip
 8001824:	b29b      	uxth	r3, r3
 8001826:	e008      	b.n	800183a <getDateTime+0x52>
 8001828:	231c      	movs	r3, #28
 800182a:	18fb      	adds	r3, r7, r3
 800182c:	78db      	ldrb	r3, [r3, #3]
 800182e:	b29b      	uxth	r3, r3
 8001830:	22fa      	movs	r2, #250	; 0xfa
 8001832:	00d2      	lsls	r2, r2, #3
 8001834:	4694      	mov	ip, r2
 8001836:	4463      	add	r3, ip
 8001838:	b29b      	uxth	r3, r3
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	8013      	strh	r3, [r2, #0]
	d->month = sdate.Month;
 800183e:	211c      	movs	r1, #28
 8001840:	187b      	adds	r3, r7, r1
 8001842:	785a      	ldrb	r2, [r3, #1]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	709a      	strb	r2, [r3, #2]
	d->date = sdate.Date;
 8001848:	187b      	adds	r3, r7, r1
 800184a:	789a      	ldrb	r2, [r3, #2]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	70da      	strb	r2, [r3, #3]
	d->weekday = sdate.WeekDay;
 8001850:	187b      	adds	r3, r7, r1
 8001852:	781a      	ldrb	r2, [r3, #0]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	711a      	strb	r2, [r3, #4]

	t->hr = stime.Hours;
 8001858:	2108      	movs	r1, #8
 800185a:	187b      	adds	r3, r7, r1
 800185c:	781a      	ldrb	r2, [r3, #0]
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	701a      	strb	r2, [r3, #0]
	t->min = stime.Minutes;
 8001862:	187b      	adds	r3, r7, r1
 8001864:	785a      	ldrb	r2, [r3, #1]
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	705a      	strb	r2, [r3, #1]
	t->sec = stime.Seconds;
 800186a:	187b      	adds	r3, r7, r1
 800186c:	789a      	ldrb	r2, [r3, #2]
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	709a      	strb	r2, [r3, #2]
}
 8001872:	46c0      	nop			; (mov r8, r8)
 8001874:	46bd      	mov	sp, r7
 8001876:	b009      	add	sp, #36	; 0x24
 8001878:	bd90      	pop	{r4, r7, pc}
 800187a:	46c0      	nop			; (mov r8, r8)
 800187c:	20000194 	.word	0x20000194
 8001880:	0000076c 	.word	0x0000076c

08001884 <secondsToTime>:
// converters
uint32_t timeToSeconds(struct times *t) {
	return t->sec + t->min*60 + t->hr*3600;
}

void secondsToTime(struct times *t, uint32_t seconds) {
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
	t->hr = seconds / 3600;
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	23e1      	movs	r3, #225	; 0xe1
 8001892:	0119      	lsls	r1, r3, #4
 8001894:	0010      	movs	r0, r2
 8001896:	f7fe fc3f 	bl	8000118 <__udivsi3>
 800189a:	0003      	movs	r3, r0
 800189c:	b2da      	uxtb	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	701a      	strb	r2, [r3, #0]
	seconds %= 3600;
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	23e1      	movs	r3, #225	; 0xe1
 80018a6:	0119      	lsls	r1, r3, #4
 80018a8:	0010      	movs	r0, r2
 80018aa:	f7fe fcbb 	bl	8000224 <__aeabi_uidivmod>
 80018ae:	000b      	movs	r3, r1
 80018b0:	603b      	str	r3, [r7, #0]
	t->min = seconds / 60;
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	213c      	movs	r1, #60	; 0x3c
 80018b6:	0018      	movs	r0, r3
 80018b8:	f7fe fc2e 	bl	8000118 <__udivsi3>
 80018bc:	0003      	movs	r3, r0
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	705a      	strb	r2, [r3, #1]
	seconds %= 60;
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	213c      	movs	r1, #60	; 0x3c
 80018c8:	0018      	movs	r0, r3
 80018ca:	f7fe fcab 	bl	8000224 <__aeabi_uidivmod>
 80018ce:	000b      	movs	r3, r1
 80018d0:	603b      	str	r3, [r7, #0]
	t->sec = seconds;
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	709a      	strb	r2, [r3, #2]
}
 80018da:	46c0      	nop			; (mov r8, r8)
 80018dc:	46bd      	mov	sp, r7
 80018de:	b002      	add	sp, #8
 80018e0:	bd80      	pop	{r7, pc}
	...

080018e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018e8:	f002 f95a 	bl	8003ba0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018ec:	f000 f82e 	bl	800194c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
//  peripheralClockConfig();
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018f0:	f000 fbbe 	bl	8002070 <MX_GPIO_Init>
  MX_SPI1_Init();
 80018f4:	f000 f9e2 	bl	8001cbc <MX_SPI1_Init>
  MX_ADC_Init();
 80018f8:	f000 f8a6 	bl	8001a48 <MX_ADC_Init>
  MX_RTC_Init();
 80018fc:	f000 f930 	bl	8001b60 <MX_RTC_Init>
  MX_TIM21_Init();
 8001900:	f000 fa7c 	bl	8001dfc <MX_TIM21_Init>
  MX_LPTIM1_Init();
 8001904:	f000 f904 	bl	8001b10 <MX_LPTIM1_Init>
  MX_DMA_Init();
 8001908:	f000 fb94 	bl	8002034 <MX_DMA_Init>
  MX_TIM22_Init();
 800190c:	f000 fb04 	bl	8001f18 <MX_TIM22_Init>
  MX_TIM2_Init();
 8001910:	f000 fa10 	bl	8001d34 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  	/* initialization for display */
	HAL_Delay(2000);
 8001914:	23fa      	movs	r3, #250	; 0xfa
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	0018      	movs	r0, r3
 800191a:	f002 f9a1 	bl	8003c60 <HAL_Delay>
	TFT_startup(&hspi1);
 800191e:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <main+0x64>)
 8001920:	0018      	movs	r0, r3
 8001922:	f7fe fe7f 	bl	8000624 <TFT_startup>
	clearScreen(ST77XX_BLACK, &hspi1);
 8001926:	4b08      	ldr	r3, [pc, #32]	; (8001948 <main+0x64>)
 8001928:	0019      	movs	r1, r3
 800192a:	2000      	movs	r0, #0
 800192c:	f7ff fe24 	bl	8001578 <clearScreen>

	/* start updating display for ui */
	initFace();
 8001930:	f001 fe34 	bl	800359c <initFace>
	runClockDisplay();
 8001934:	f002 f8c8 	bl	8003ac8 <runClockDisplay>
//	  lineTest(&hspi1);
//	  charTest(&hspi1);
//	  textTest(bg, &hspi1);

	  // ui/nav tests or full run. uncomment when ready
	  updateWithButtons();
 8001938:	f000 fc60 	bl	80021fc <updateWithButtons>
	  updateDisplay(&hspi1);
 800193c:	4b02      	ldr	r3, [pc, #8]	; (8001948 <main+0x64>)
 800193e:	0018      	movs	r0, r3
 8001940:	f001 f868 	bl	8002a14 <updateDisplay>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8001944:	bf30      	wfi
	  updateWithButtons();
 8001946:	e7f7      	b.n	8001938 <main+0x54>
 8001948:	200001c0 	.word	0x200001c0

0800194c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800194c:	b590      	push	{r4, r7, lr}
 800194e:	b09f      	sub	sp, #124	; 0x7c
 8001950:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001952:	2440      	movs	r4, #64	; 0x40
 8001954:	193b      	adds	r3, r7, r4
 8001956:	0018      	movs	r0, r3
 8001958:	2338      	movs	r3, #56	; 0x38
 800195a:	001a      	movs	r2, r3
 800195c:	2100      	movs	r1, #0
 800195e:	f006 f93a 	bl	8007bd6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001962:	232c      	movs	r3, #44	; 0x2c
 8001964:	18fb      	adds	r3, r7, r3
 8001966:	0018      	movs	r0, r3
 8001968:	2314      	movs	r3, #20
 800196a:	001a      	movs	r2, r3
 800196c:	2100      	movs	r1, #0
 800196e:	f006 f932 	bl	8007bd6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001972:	1d3b      	adds	r3, r7, #4
 8001974:	0018      	movs	r0, r3
 8001976:	2328      	movs	r3, #40	; 0x28
 8001978:	001a      	movs	r2, r3
 800197a:	2100      	movs	r1, #0
 800197c:	f006 f92b 	bl	8007bd6 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001980:	4b2e      	ldr	r3, [pc, #184]	; (8001a3c <SystemClock_Config+0xf0>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a2e      	ldr	r2, [pc, #184]	; (8001a40 <SystemClock_Config+0xf4>)
 8001986:	401a      	ands	r2, r3
 8001988:	4b2c      	ldr	r3, [pc, #176]	; (8001a3c <SystemClock_Config+0xf0>)
 800198a:	2180      	movs	r1, #128	; 0x80
 800198c:	0109      	lsls	r1, r1, #4
 800198e:	430a      	orrs	r2, r1
 8001990:	601a      	str	r2, [r3, #0]
  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8001992:	f003 fa87 	bl	8004ea4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001996:	4b2b      	ldr	r3, [pc, #172]	; (8001a44 <SystemClock_Config+0xf8>)
 8001998:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800199a:	4b2a      	ldr	r3, [pc, #168]	; (8001a44 <SystemClock_Config+0xf8>)
 800199c:	4928      	ldr	r1, [pc, #160]	; (8001a40 <SystemClock_Config+0xf4>)
 800199e:	400a      	ands	r2, r1
 80019a0:	651a      	str	r2, [r3, #80]	; 0x50
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 80019a2:	193b      	adds	r3, r7, r4
 80019a4:	2226      	movs	r2, #38	; 0x26
 80019a6:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80019a8:	193b      	adds	r3, r7, r4
 80019aa:	2280      	movs	r2, #128	; 0x80
 80019ac:	0052      	lsls	r2, r2, #1
 80019ae:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019b0:	0021      	movs	r1, r4
 80019b2:	187b      	adds	r3, r7, r1
 80019b4:	2201      	movs	r2, #1
 80019b6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019b8:	187b      	adds	r3, r7, r1
 80019ba:	2210      	movs	r2, #16
 80019bc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80019be:	187b      	adds	r3, r7, r1
 80019c0:	2201      	movs	r2, #1
 80019c2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80019c4:	187b      	adds	r3, r7, r1
 80019c6:	2200      	movs	r2, #0
 80019c8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ca:	187b      	adds	r3, r7, r1
 80019cc:	0018      	movs	r0, r3
 80019ce:	f003 fa77 	bl	8004ec0 <HAL_RCC_OscConfig>
 80019d2:	1e03      	subs	r3, r0, #0
 80019d4:	d001      	beq.n	80019da <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80019d6:	f000 fbdd 	bl	8002194 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019da:	212c      	movs	r1, #44	; 0x2c
 80019dc:	187b      	adds	r3, r7, r1
 80019de:	220f      	movs	r2, #15
 80019e0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80019e2:	187b      	adds	r3, r7, r1
 80019e4:	2201      	movs	r2, #1
 80019e6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019e8:	187b      	adds	r3, r7, r1
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019ee:	187b      	adds	r3, r7, r1
 80019f0:	2200      	movs	r2, #0
 80019f2:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019f4:	187b      	adds	r3, r7, r1
 80019f6:	2200      	movs	r2, #0
 80019f8:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019fa:	187b      	adds	r3, r7, r1
 80019fc:	2100      	movs	r1, #0
 80019fe:	0018      	movs	r0, r3
 8001a00:	f003 fe2e 	bl	8005660 <HAL_RCC_ClockConfig>
 8001a04:	1e03      	subs	r3, r0, #0
 8001a06:	d001      	beq.n	8001a0c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001a08:	f000 fbc4 	bl	8002194 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_LPTIM1;
 8001a0c:	1d3b      	adds	r3, r7, #4
 8001a0e:	22a0      	movs	r2, #160	; 0xa0
 8001a10:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001a12:	1d3b      	adds	r3, r7, #4
 8001a14:	2280      	movs	r2, #128	; 0x80
 8001a16:	0252      	lsls	r2, r2, #9
 8001a18:	605a      	str	r2, [r3, #4]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8001a1a:	1d3b      	adds	r3, r7, #4
 8001a1c:	22c0      	movs	r2, #192	; 0xc0
 8001a1e:	0312      	lsls	r2, r2, #12
 8001a20:	621a      	str	r2, [r3, #32]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a22:	1d3b      	adds	r3, r7, #4
 8001a24:	0018      	movs	r0, r3
 8001a26:	f003 ffc9 	bl	80059bc <HAL_RCCEx_PeriphCLKConfig>
 8001a2a:	1e03      	subs	r3, r0, #0
 8001a2c:	d001      	beq.n	8001a32 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001a2e:	f000 fbb1 	bl	8002194 <Error_Handler>
  }
}
 8001a32:	46c0      	nop			; (mov r8, r8)
 8001a34:	46bd      	mov	sp, r7
 8001a36:	b01f      	add	sp, #124	; 0x7c
 8001a38:	bd90      	pop	{r4, r7, pc}
 8001a3a:	46c0      	nop			; (mov r8, r8)
 8001a3c:	40007000 	.word	0x40007000
 8001a40:	ffffe7ff 	.word	0xffffe7ff
 8001a44:	40021000 	.word	0x40021000

08001a48 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a4e:	003b      	movs	r3, r7
 8001a50:	0018      	movs	r0, r3
 8001a52:	2308      	movs	r3, #8
 8001a54:	001a      	movs	r2, r3
 8001a56:	2100      	movs	r1, #0
 8001a58:	f006 f8bd 	bl	8007bd6 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8001a5c:	4b2a      	ldr	r3, [pc, #168]	; (8001b08 <MX_ADC_Init+0xc0>)
 8001a5e:	4a2b      	ldr	r2, [pc, #172]	; (8001b0c <MX_ADC_Init+0xc4>)
 8001a60:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8001a62:	4b29      	ldr	r3, [pc, #164]	; (8001b08 <MX_ADC_Init+0xc0>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8001a68:	4b27      	ldr	r3, [pc, #156]	; (8001b08 <MX_ADC_Init+0xc0>)
 8001a6a:	22c0      	movs	r2, #192	; 0xc0
 8001a6c:	0612      	lsls	r2, r2, #24
 8001a6e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001a70:	4b25      	ldr	r3, [pc, #148]	; (8001b08 <MX_ADC_Init+0xc0>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001a76:	4b24      	ldr	r3, [pc, #144]	; (8001b08 <MX_ADC_Init+0xc0>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001a7c:	4b22      	ldr	r3, [pc, #136]	; (8001b08 <MX_ADC_Init+0xc0>)
 8001a7e:	2201      	movs	r2, #1
 8001a80:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a82:	4b21      	ldr	r3, [pc, #132]	; (8001b08 <MX_ADC_Init+0xc0>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001a88:	4b1f      	ldr	r3, [pc, #124]	; (8001b08 <MX_ADC_Init+0xc0>)
 8001a8a:	2220      	movs	r2, #32
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001a90:	4b1d      	ldr	r3, [pc, #116]	; (8001b08 <MX_ADC_Init+0xc0>)
 8001a92:	2221      	movs	r2, #33	; 0x21
 8001a94:	2100      	movs	r1, #0
 8001a96:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a98:	4b1b      	ldr	r3, [pc, #108]	; (8001b08 <MX_ADC_Init+0xc0>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a9e:	4b1a      	ldr	r3, [pc, #104]	; (8001b08 <MX_ADC_Init+0xc0>)
 8001aa0:	22c2      	movs	r2, #194	; 0xc2
 8001aa2:	32ff      	adds	r2, #255	; 0xff
 8001aa4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001aa6:	4b18      	ldr	r3, [pc, #96]	; (8001b08 <MX_ADC_Init+0xc0>)
 8001aa8:	222c      	movs	r2, #44	; 0x2c
 8001aaa:	2100      	movs	r1, #0
 8001aac:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001aae:	4b16      	ldr	r3, [pc, #88]	; (8001b08 <MX_ADC_Init+0xc0>)
 8001ab0:	2204      	movs	r2, #4
 8001ab2:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001ab4:	4b14      	ldr	r3, [pc, #80]	; (8001b08 <MX_ADC_Init+0xc0>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001aba:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <MX_ADC_Init+0xc0>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8001ac0:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <MX_ADC_Init+0xc0>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001ac6:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <MX_ADC_Init+0xc0>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001acc:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <MX_ADC_Init+0xc0>)
 8001ace:	0018      	movs	r0, r3
 8001ad0:	f002 f8e4 	bl	8003c9c <HAL_ADC_Init>
 8001ad4:	1e03      	subs	r3, r0, #0
 8001ad6:	d001      	beq.n	8001adc <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8001ad8:	f000 fb5c 	bl	8002194 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001adc:	003b      	movs	r3, r7
 8001ade:	2201      	movs	r2, #1
 8001ae0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001ae2:	003b      	movs	r3, r7
 8001ae4:	2280      	movs	r2, #128	; 0x80
 8001ae6:	0152      	lsls	r2, r2, #5
 8001ae8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001aea:	003a      	movs	r2, r7
 8001aec:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <MX_ADC_Init+0xc0>)
 8001aee:	0011      	movs	r1, r2
 8001af0:	0018      	movs	r0, r3
 8001af2:	f002 fa47 	bl	8003f84 <HAL_ADC_ConfigChannel>
 8001af6:	1e03      	subs	r3, r0, #0
 8001af8:	d001      	beq.n	8001afe <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8001afa:	f000 fb4b 	bl	8002194 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001afe:	46c0      	nop			; (mov r8, r8)
 8001b00:	46bd      	mov	sp, r7
 8001b02:	b002      	add	sp, #8
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	46c0      	nop			; (mov r8, r8)
 8001b08:	20000294 	.word	0x20000294
 8001b0c:	40012400 	.word	0x40012400

08001b10 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001b14:	4b0f      	ldr	r3, [pc, #60]	; (8001b54 <MX_LPTIM1_Init+0x44>)
 8001b16:	4a10      	ldr	r2, [pc, #64]	; (8001b58 <MX_LPTIM1_Init+0x48>)
 8001b18:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <MX_LPTIM1_Init+0x44>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001b20:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <MX_LPTIM1_Init+0x44>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001b26:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <MX_LPTIM1_Init+0x44>)
 8001b28:	4a0c      	ldr	r2, [pc, #48]	; (8001b5c <MX_LPTIM1_Init+0x4c>)
 8001b2a:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001b2c:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <MX_LPTIM1_Init+0x44>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001b32:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <MX_LPTIM1_Init+0x44>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001b38:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <MX_LPTIM1_Init+0x44>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001b3e:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <MX_LPTIM1_Init+0x44>)
 8001b40:	0018      	movs	r0, r3
 8001b42:	f002 ff0b 	bl	800495c <HAL_LPTIM_Init>
 8001b46:	1e03      	subs	r3, r0, #0
 8001b48:	d001      	beq.n	8001b4e <MX_LPTIM1_Init+0x3e>
  {
    Error_Handler();
 8001b4a:	f000 fb23 	bl	8002194 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8001b4e:	46c0      	nop			; (mov r8, r8)
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	20000164 	.word	0x20000164
 8001b58:	40007c00 	.word	0x40007c00
 8001b5c:	0000ffff 	.word	0x0000ffff

08001b60 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b090      	sub	sp, #64	; 0x40
 8001b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001b66:	232c      	movs	r3, #44	; 0x2c
 8001b68:	18fb      	adds	r3, r7, r3
 8001b6a:	0018      	movs	r0, r3
 8001b6c:	2314      	movs	r3, #20
 8001b6e:	001a      	movs	r2, r3
 8001b70:	2100      	movs	r1, #0
 8001b72:	f006 f830 	bl	8007bd6 <memset>
  RTC_DateTypeDef sDate = {0};
 8001b76:	2328      	movs	r3, #40	; 0x28
 8001b78:	18fb      	adds	r3, r7, r3
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8001b7e:	003b      	movs	r3, r7
 8001b80:	0018      	movs	r0, r3
 8001b82:	2328      	movs	r3, #40	; 0x28
 8001b84:	001a      	movs	r2, r3
 8001b86:	2100      	movs	r1, #0
 8001b88:	f006 f825 	bl	8007bd6 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8001b8c:	4b49      	ldr	r3, [pc, #292]	; (8001cb4 <MX_RTC_Init+0x154>)
 8001b8e:	4a4a      	ldr	r2, [pc, #296]	; (8001cb8 <MX_RTC_Init+0x158>)
 8001b90:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001b92:	4b48      	ldr	r3, [pc, #288]	; (8001cb4 <MX_RTC_Init+0x154>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001b98:	4b46      	ldr	r3, [pc, #280]	; (8001cb4 <MX_RTC_Init+0x154>)
 8001b9a:	227f      	movs	r2, #127	; 0x7f
 8001b9c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001b9e:	4b45      	ldr	r3, [pc, #276]	; (8001cb4 <MX_RTC_Init+0x154>)
 8001ba0:	22ff      	movs	r2, #255	; 0xff
 8001ba2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001ba4:	4b43      	ldr	r3, [pc, #268]	; (8001cb4 <MX_RTC_Init+0x154>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001baa:	4b42      	ldr	r3, [pc, #264]	; (8001cb4 <MX_RTC_Init+0x154>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001bb0:	4b40      	ldr	r3, [pc, #256]	; (8001cb4 <MX_RTC_Init+0x154>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001bb6:	4b3f      	ldr	r3, [pc, #252]	; (8001cb4 <MX_RTC_Init+0x154>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001bbc:	4b3d      	ldr	r3, [pc, #244]	; (8001cb4 <MX_RTC_Init+0x154>)
 8001bbe:	0018      	movs	r0, r3
 8001bc0:	f004 f870 	bl	8005ca4 <HAL_RTC_Init>
 8001bc4:	1e03      	subs	r3, r0, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8001bc8:	f000 fae4 	bl	8002194 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0;
 8001bcc:	212c      	movs	r1, #44	; 0x2c
 8001bce:	187b      	adds	r3, r7, r1
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8001bd4:	187b      	adds	r3, r7, r1
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8001bda:	187b      	adds	r3, r7, r1
 8001bdc:	2200      	movs	r2, #0
 8001bde:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001be0:	187b      	adds	r3, r7, r1
 8001be2:	2200      	movs	r2, #0
 8001be4:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001be6:	187b      	adds	r3, r7, r1
 8001be8:	2200      	movs	r2, #0
 8001bea:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001bec:	1879      	adds	r1, r7, r1
 8001bee:	4b31      	ldr	r3, [pc, #196]	; (8001cb4 <MX_RTC_Init+0x154>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	0018      	movs	r0, r3
 8001bf4:	f004 f8f4 	bl	8005de0 <HAL_RTC_SetTime>
 8001bf8:	1e03      	subs	r3, r0, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8001bfc:	f000 faca 	bl	8002194 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001c00:	2128      	movs	r1, #40	; 0x28
 8001c02:	187b      	adds	r3, r7, r1
 8001c04:	2201      	movs	r2, #1
 8001c06:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001c08:	187b      	adds	r3, r7, r1
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8001c0e:	187b      	adds	r3, r7, r1
 8001c10:	2201      	movs	r2, #1
 8001c12:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 8001c14:	187b      	adds	r3, r7, r1
 8001c16:	2200      	movs	r2, #0
 8001c18:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001c1a:	1879      	adds	r1, r7, r1
 8001c1c:	4b25      	ldr	r3, [pc, #148]	; (8001cb4 <MX_RTC_Init+0x154>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	0018      	movs	r0, r3
 8001c22:	f004 f9fd 	bl	8006020 <HAL_RTC_SetDate>
 8001c26:	1e03      	subs	r3, r0, #0
 8001c28:	d001      	beq.n	8001c2e <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8001c2a:	f000 fab3 	bl	8002194 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0;
 8001c2e:	003b      	movs	r3, r7
 8001c30:	2200      	movs	r2, #0
 8001c32:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8001c34:	003b      	movs	r3, r7
 8001c36:	2200      	movs	r2, #0
 8001c38:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8001c3a:	003b      	movs	r3, r7
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8001c40:	003b      	movs	r3, r7
 8001c42:	2200      	movs	r2, #0
 8001c44:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c46:	003b      	movs	r3, r7
 8001c48:	2200      	movs	r2, #0
 8001c4a:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c4c:	003b      	movs	r3, r7
 8001c4e:	2200      	movs	r2, #0
 8001c50:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001c52:	003b      	movs	r3, r7
 8001c54:	2200      	movs	r2, #0
 8001c56:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001c58:	003b      	movs	r3, r7
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001c5e:	003b      	movs	r3, r7
 8001c60:	2200      	movs	r2, #0
 8001c62:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8001c64:	003b      	movs	r3, r7
 8001c66:	2220      	movs	r2, #32
 8001c68:	2101      	movs	r1, #1
 8001c6a:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8001c6c:	003b      	movs	r3, r7
 8001c6e:	2280      	movs	r2, #128	; 0x80
 8001c70:	0052      	lsls	r2, r2, #1
 8001c72:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001c74:	0039      	movs	r1, r7
 8001c76:	4b0f      	ldr	r3, [pc, #60]	; (8001cb4 <MX_RTC_Init+0x154>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	f004 facc 	bl	8006218 <HAL_RTC_SetAlarm_IT>
 8001c80:	1e03      	subs	r3, r0, #0
 8001c82:	d001      	beq.n	8001c88 <MX_RTC_Init+0x128>
  {
    Error_Handler();
 8001c84:	f000 fa86 	bl	8002194 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 1;
 8001c88:	003b      	movs	r3, r7
 8001c8a:	2220      	movs	r2, #32
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_B;
 8001c90:	003b      	movs	r3, r7
 8001c92:	2280      	movs	r2, #128	; 0x80
 8001c94:	0092      	lsls	r2, r2, #2
 8001c96:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001c98:	0039      	movs	r1, r7
 8001c9a:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <MX_RTC_Init+0x154>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	0018      	movs	r0, r3
 8001ca0:	f004 faba 	bl	8006218 <HAL_RTC_SetAlarm_IT>
 8001ca4:	1e03      	subs	r3, r0, #0
 8001ca6:	d001      	beq.n	8001cac <MX_RTC_Init+0x14c>
  {
    Error_Handler();
 8001ca8:	f000 fa74 	bl	8002194 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001cac:	46c0      	nop			; (mov r8, r8)
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	b010      	add	sp, #64	; 0x40
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20000194 	.word	0x20000194
 8001cb8:	40002800 	.word	0x40002800

08001cbc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001cc0:	4b19      	ldr	r3, [pc, #100]	; (8001d28 <MX_SPI1_Init+0x6c>)
 8001cc2:	4a1a      	ldr	r2, [pc, #104]	; (8001d2c <MX_SPI1_Init+0x70>)
 8001cc4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cc6:	4b18      	ldr	r3, [pc, #96]	; (8001d28 <MX_SPI1_Init+0x6c>)
 8001cc8:	2282      	movs	r2, #130	; 0x82
 8001cca:	0052      	lsls	r2, r2, #1
 8001ccc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cce:	4b16      	ldr	r3, [pc, #88]	; (8001d28 <MX_SPI1_Init+0x6c>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cd4:	4b14      	ldr	r3, [pc, #80]	; (8001d28 <MX_SPI1_Init+0x6c>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cda:	4b13      	ldr	r3, [pc, #76]	; (8001d28 <MX_SPI1_Init+0x6c>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ce0:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <MX_SPI1_Init+0x6c>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ce6:	4b10      	ldr	r3, [pc, #64]	; (8001d28 <MX_SPI1_Init+0x6c>)
 8001ce8:	2280      	movs	r2, #128	; 0x80
 8001cea:	0092      	lsls	r2, r2, #2
 8001cec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cee:	4b0e      	ldr	r3, [pc, #56]	; (8001d28 <MX_SPI1_Init+0x6c>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <MX_SPI1_Init+0x6c>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cfa:	4b0b      	ldr	r3, [pc, #44]	; (8001d28 <MX_SPI1_Init+0x6c>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d00:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <MX_SPI1_Init+0x6c>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001d06:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <MX_SPI1_Init+0x6c>)
 8001d08:	2207      	movs	r2, #7
 8001d0a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d0c:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <MX_SPI1_Init+0x6c>)
 8001d0e:	0018      	movs	r0, r3
 8001d10:	f004 fd54 	bl	80067bc <HAL_SPI_Init>
 8001d14:	1e03      	subs	r3, r0, #0
 8001d16:	d001      	beq.n	8001d1c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d18:	f000 fa3c 	bl	8002194 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  hspi1.hdmatx = &hdma_spi1_tx;
 8001d1c:	4b02      	ldr	r3, [pc, #8]	; (8001d28 <MX_SPI1_Init+0x6c>)
 8001d1e:	4a04      	ldr	r2, [pc, #16]	; (8001d30 <MX_SPI1_Init+0x74>)
 8001d20:	649a      	str	r2, [r3, #72]	; 0x48
  /* USER CODE END SPI1_Init 2 */

}
 8001d22:	46c0      	nop			; (mov r8, r8)
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	200001c0 	.word	0x200001c0
 8001d2c:	40013000 	.word	0x40013000
 8001d30:	200002f0 	.word	0x200002f0

08001d34 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d3a:	2308      	movs	r3, #8
 8001d3c:	18fb      	adds	r3, r7, r3
 8001d3e:	0018      	movs	r0, r3
 8001d40:	2310      	movs	r3, #16
 8001d42:	001a      	movs	r2, r3
 8001d44:	2100      	movs	r1, #0
 8001d46:	f005 ff46 	bl	8007bd6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d4a:	003b      	movs	r3, r7
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	2308      	movs	r3, #8
 8001d50:	001a      	movs	r2, r3
 8001d52:	2100      	movs	r1, #0
 8001d54:	f005 ff3f 	bl	8007bd6 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d58:	4b27      	ldr	r3, [pc, #156]	; (8001df8 <MX_TIM2_Init+0xc4>)
 8001d5a:	2280      	movs	r2, #128	; 0x80
 8001d5c:	05d2      	lsls	r2, r2, #23
 8001d5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001d60:	4b25      	ldr	r3, [pc, #148]	; (8001df8 <MX_TIM2_Init+0xc4>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d66:	4b24      	ldr	r3, [pc, #144]	; (8001df8 <MX_TIM2_Init+0xc4>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001d6c:	4b22      	ldr	r3, [pc, #136]	; (8001df8 <MX_TIM2_Init+0xc4>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d72:	4b21      	ldr	r3, [pc, #132]	; (8001df8 <MX_TIM2_Init+0xc4>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d78:	4b1f      	ldr	r3, [pc, #124]	; (8001df8 <MX_TIM2_Init+0xc4>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d7e:	4b1e      	ldr	r3, [pc, #120]	; (8001df8 <MX_TIM2_Init+0xc4>)
 8001d80:	0018      	movs	r0, r3
 8001d82:	f005 f9e1 	bl	8007148 <HAL_TIM_Base_Init>
 8001d86:	1e03      	subs	r3, r0, #0
 8001d88:	d001      	beq.n	8001d8e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001d8a:	f000 fa03 	bl	8002194 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8001d8e:	2108      	movs	r1, #8
 8001d90:	187b      	adds	r3, r7, r1
 8001d92:	2280      	movs	r2, #128	; 0x80
 8001d94:	0192      	lsls	r2, r2, #6
 8001d96:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8001d98:	187b      	adds	r3, r7, r1
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8001d9e:	187b      	adds	r3, r7, r1
 8001da0:	2200      	movs	r2, #0
 8001da2:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 8001da4:	187b      	adds	r3, r7, r1
 8001da6:	2200      	movs	r2, #0
 8001da8:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001daa:	187a      	adds	r2, r7, r1
 8001dac:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <MX_TIM2_Init+0xc4>)
 8001dae:	0011      	movs	r1, r2
 8001db0:	0018      	movs	r0, r3
 8001db2:	f005 fba3 	bl	80074fc <HAL_TIM_ConfigClockSource>
 8001db6:	1e03      	subs	r3, r0, #0
 8001db8:	d001      	beq.n	8001dbe <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001dba:	f000 f9eb 	bl	8002194 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dbe:	003b      	movs	r3, r7
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dc4:	003b      	movs	r3, r7
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001dca:	003a      	movs	r2, r7
 8001dcc:	4b0a      	ldr	r3, [pc, #40]	; (8001df8 <MX_TIM2_Init+0xc4>)
 8001dce:	0011      	movs	r1, r2
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	f005 fe6d 	bl	8007ab0 <HAL_TIMEx_MasterConfigSynchronization>
 8001dd6:	1e03      	subs	r3, r0, #0
 8001dd8:	d001      	beq.n	8001dde <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8001dda:	f000 f9db 	bl	8002194 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim2, TIM2_ETR_LSE) != HAL_OK)
 8001dde:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <MX_TIM2_Init+0xc4>)
 8001de0:	2105      	movs	r1, #5
 8001de2:	0018      	movs	r0, r3
 8001de4:	f005 fea7 	bl	8007b36 <HAL_TIMEx_RemapConfig>
 8001de8:	1e03      	subs	r3, r0, #0
 8001dea:	d001      	beq.n	8001df0 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8001dec:	f000 f9d2 	bl	8002194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001df0:	46c0      	nop			; (mov r8, r8)
 8001df2:	46bd      	mov	sp, r7
 8001df4:	b006      	add	sp, #24
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20000258 	.word	0x20000258

08001dfc <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08a      	sub	sp, #40	; 0x28
 8001e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e02:	2318      	movs	r3, #24
 8001e04:	18fb      	adds	r3, r7, r3
 8001e06:	0018      	movs	r0, r3
 8001e08:	2310      	movs	r3, #16
 8001e0a:	001a      	movs	r2, r3
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	f005 fee2 	bl	8007bd6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e12:	2310      	movs	r3, #16
 8001e14:	18fb      	adds	r3, r7, r3
 8001e16:	0018      	movs	r0, r3
 8001e18:	2308      	movs	r3, #8
 8001e1a:	001a      	movs	r2, r3
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	f005 feda 	bl	8007bd6 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e22:	003b      	movs	r3, r7
 8001e24:	0018      	movs	r0, r3
 8001e26:	2310      	movs	r3, #16
 8001e28:	001a      	movs	r2, r3
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	f005 fed3 	bl	8007bd6 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8001e30:	4b37      	ldr	r3, [pc, #220]	; (8001f10 <MX_TIM21_Init+0x114>)
 8001e32:	4a38      	ldr	r2, [pc, #224]	; (8001f14 <MX_TIM21_Init+0x118>)
 8001e34:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 0;
 8001e36:	4b36      	ldr	r3, [pc, #216]	; (8001f10 <MX_TIM21_Init+0x114>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001e3c:	4b34      	ldr	r3, [pc, #208]	; (8001f10 <MX_TIM21_Init+0x114>)
 8001e3e:	2210      	movs	r2, #16
 8001e40:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 0x8000;
 8001e42:	4b33      	ldr	r3, [pc, #204]	; (8001f10 <MX_TIM21_Init+0x114>)
 8001e44:	2280      	movs	r2, #128	; 0x80
 8001e46:	0212      	lsls	r2, r2, #8
 8001e48:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e4a:	4b31      	ldr	r3, [pc, #196]	; (8001f10 <MX_TIM21_Init+0x114>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e50:	4b2f      	ldr	r3, [pc, #188]	; (8001f10 <MX_TIM21_Init+0x114>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8001e56:	4b2e      	ldr	r3, [pc, #184]	; (8001f10 <MX_TIM21_Init+0x114>)
 8001e58:	0018      	movs	r0, r3
 8001e5a:	f005 f975 	bl	8007148 <HAL_TIM_Base_Init>
 8001e5e:	1e03      	subs	r3, r0, #0
 8001e60:	d001      	beq.n	8001e66 <MX_TIM21_Init+0x6a>
  {
    Error_Handler();
 8001e62:	f000 f997 	bl	8002194 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8001e66:	2118      	movs	r1, #24
 8001e68:	187b      	adds	r3, r7, r1
 8001e6a:	2280      	movs	r2, #128	; 0x80
 8001e6c:	0192      	lsls	r2, r2, #6
 8001e6e:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8001e70:	187b      	adds	r3, r7, r1
 8001e72:	2200      	movs	r2, #0
 8001e74:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8001e76:	187b      	adds	r3, r7, r1
 8001e78:	2200      	movs	r2, #0
 8001e7a:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 8001e7c:	187b      	adds	r3, r7, r1
 8001e7e:	2200      	movs	r2, #0
 8001e80:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8001e82:	187a      	adds	r2, r7, r1
 8001e84:	4b22      	ldr	r3, [pc, #136]	; (8001f10 <MX_TIM21_Init+0x114>)
 8001e86:	0011      	movs	r1, r2
 8001e88:	0018      	movs	r0, r3
 8001e8a:	f005 fb37 	bl	80074fc <HAL_TIM_ConfigClockSource>
 8001e8e:	1e03      	subs	r3, r0, #0
 8001e90:	d001      	beq.n	8001e96 <MX_TIM21_Init+0x9a>
  {
    Error_Handler();
 8001e92:	f000 f97f 	bl	8002194 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim21) != HAL_OK)
 8001e96:	4b1e      	ldr	r3, [pc, #120]	; (8001f10 <MX_TIM21_Init+0x114>)
 8001e98:	0018      	movs	r0, r3
 8001e9a:	f005 f9c5 	bl	8007228 <HAL_TIM_OC_Init>
 8001e9e:	1e03      	subs	r3, r0, #0
 8001ea0:	d001      	beq.n	8001ea6 <MX_TIM21_Init+0xaa>
  {
    Error_Handler();
 8001ea2:	f000 f977 	bl	8002194 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ea6:	2110      	movs	r1, #16
 8001ea8:	187b      	adds	r3, r7, r1
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eae:	187b      	adds	r3, r7, r1
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8001eb4:	187a      	adds	r2, r7, r1
 8001eb6:	4b16      	ldr	r3, [pc, #88]	; (8001f10 <MX_TIM21_Init+0x114>)
 8001eb8:	0011      	movs	r1, r2
 8001eba:	0018      	movs	r0, r3
 8001ebc:	f005 fdf8 	bl	8007ab0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ec0:	1e03      	subs	r3, r0, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_TIM21_Init+0xcc>
  {
    Error_Handler();
 8001ec4:	f000 f966 	bl	8002194 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim21, TIM21_ETR_LSE) != HAL_OK)
 8001ec8:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <MX_TIM21_Init+0x114>)
 8001eca:	2103      	movs	r1, #3
 8001ecc:	0018      	movs	r0, r3
 8001ece:	f005 fe32 	bl	8007b36 <HAL_TIMEx_RemapConfig>
 8001ed2:	1e03      	subs	r3, r0, #0
 8001ed4:	d001      	beq.n	8001eda <MX_TIM21_Init+0xde>
  {
    Error_Handler();
 8001ed6:	f000 f95d 	bl	8002194 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001eda:	003b      	movs	r3, r7
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001ee0:	003b      	movs	r3, r7
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ee6:	003b      	movs	r3, r7
 8001ee8:	2200      	movs	r2, #0
 8001eea:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eec:	003b      	movs	r3, r7
 8001eee:	2200      	movs	r2, #0
 8001ef0:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ef2:	0039      	movs	r1, r7
 8001ef4:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <MX_TIM21_Init+0x114>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	0018      	movs	r0, r3
 8001efa:	f005 fab1 	bl	8007460 <HAL_TIM_OC_ConfigChannel>
 8001efe:	1e03      	subs	r3, r0, #0
 8001f00:	d001      	beq.n	8001f06 <MX_TIM21_Init+0x10a>
  {
    Error_Handler();
 8001f02:	f000 f947 	bl	8002194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8001f06:	46c0      	nop			; (mov r8, r8)
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	b00a      	add	sp, #40	; 0x28
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	46c0      	nop			; (mov r8, r8)
 8001f10:	2000021c 	.word	0x2000021c
 8001f14:	40010800 	.word	0x40010800

08001f18 <MX_TIM22_Init>:
  * @brief TIM22 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM22_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b08a      	sub	sp, #40	; 0x28
 8001f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f1e:	2318      	movs	r3, #24
 8001f20:	18fb      	adds	r3, r7, r3
 8001f22:	0018      	movs	r0, r3
 8001f24:	2310      	movs	r3, #16
 8001f26:	001a      	movs	r2, r3
 8001f28:	2100      	movs	r1, #0
 8001f2a:	f005 fe54 	bl	8007bd6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f2e:	2310      	movs	r3, #16
 8001f30:	18fb      	adds	r3, r7, r3
 8001f32:	0018      	movs	r0, r3
 8001f34:	2308      	movs	r3, #8
 8001f36:	001a      	movs	r2, r3
 8001f38:	2100      	movs	r1, #0
 8001f3a:	f005 fe4c 	bl	8007bd6 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f3e:	003b      	movs	r3, r7
 8001f40:	0018      	movs	r0, r3
 8001f42:	2310      	movs	r3, #16
 8001f44:	001a      	movs	r2, r3
 8001f46:	2100      	movs	r1, #0
 8001f48:	f005 fe45 	bl	8007bd6 <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 8001f4c:	4b37      	ldr	r3, [pc, #220]	; (800202c <MX_TIM22_Init+0x114>)
 8001f4e:	4a38      	ldr	r2, [pc, #224]	; (8002030 <MX_TIM22_Init+0x118>)
 8001f50:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 0;
 8001f52:	4b36      	ldr	r3, [pc, #216]	; (800202c <MX_TIM22_Init+0x114>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001f58:	4b34      	ldr	r3, [pc, #208]	; (800202c <MX_TIM22_Init+0x114>)
 8001f5a:	2210      	movs	r2, #16
 8001f5c:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 0x8000;
 8001f5e:	4b33      	ldr	r3, [pc, #204]	; (800202c <MX_TIM22_Init+0x114>)
 8001f60:	2280      	movs	r2, #128	; 0x80
 8001f62:	0212      	lsls	r2, r2, #8
 8001f64:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f66:	4b31      	ldr	r3, [pc, #196]	; (800202c <MX_TIM22_Init+0x114>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f6c:	4b2f      	ldr	r3, [pc, #188]	; (800202c <MX_TIM22_Init+0x114>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim22) != HAL_OK)
 8001f72:	4b2e      	ldr	r3, [pc, #184]	; (800202c <MX_TIM22_Init+0x114>)
 8001f74:	0018      	movs	r0, r3
 8001f76:	f005 f8e7 	bl	8007148 <HAL_TIM_Base_Init>
 8001f7a:	1e03      	subs	r3, r0, #0
 8001f7c:	d001      	beq.n	8001f82 <MX_TIM22_Init+0x6a>
  {
    Error_Handler();
 8001f7e:	f000 f909 	bl	8002194 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8001f82:	2118      	movs	r1, #24
 8001f84:	187b      	adds	r3, r7, r1
 8001f86:	2280      	movs	r2, #128	; 0x80
 8001f88:	0192      	lsls	r2, r2, #6
 8001f8a:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8001f8c:	187b      	adds	r3, r7, r1
 8001f8e:	2200      	movs	r2, #0
 8001f90:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8001f92:	187b      	adds	r3, r7, r1
 8001f94:	2200      	movs	r2, #0
 8001f96:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 8001f98:	187b      	adds	r3, r7, r1
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig) != HAL_OK)
 8001f9e:	187a      	adds	r2, r7, r1
 8001fa0:	4b22      	ldr	r3, [pc, #136]	; (800202c <MX_TIM22_Init+0x114>)
 8001fa2:	0011      	movs	r1, r2
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	f005 faa9 	bl	80074fc <HAL_TIM_ConfigClockSource>
 8001faa:	1e03      	subs	r3, r0, #0
 8001fac:	d001      	beq.n	8001fb2 <MX_TIM22_Init+0x9a>
  {
    Error_Handler();
 8001fae:	f000 f8f1 	bl	8002194 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim22) != HAL_OK)
 8001fb2:	4b1e      	ldr	r3, [pc, #120]	; (800202c <MX_TIM22_Init+0x114>)
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	f005 f937 	bl	8007228 <HAL_TIM_OC_Init>
 8001fba:	1e03      	subs	r3, r0, #0
 8001fbc:	d001      	beq.n	8001fc2 <MX_TIM22_Init+0xaa>
  {
    Error_Handler();
 8001fbe:	f000 f8e9 	bl	8002194 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fc2:	2110      	movs	r1, #16
 8001fc4:	187b      	adds	r3, r7, r1
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fca:	187b      	adds	r3, r7, r1
 8001fcc:	2200      	movs	r2, #0
 8001fce:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 8001fd0:	187a      	adds	r2, r7, r1
 8001fd2:	4b16      	ldr	r3, [pc, #88]	; (800202c <MX_TIM22_Init+0x114>)
 8001fd4:	0011      	movs	r1, r2
 8001fd6:	0018      	movs	r0, r3
 8001fd8:	f005 fd6a 	bl	8007ab0 <HAL_TIMEx_MasterConfigSynchronization>
 8001fdc:	1e03      	subs	r3, r0, #0
 8001fde:	d001      	beq.n	8001fe4 <MX_TIM22_Init+0xcc>
  {
    Error_Handler();
 8001fe0:	f000 f8d8 	bl	8002194 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim22, TIM22_ETR_LSE) != HAL_OK)
 8001fe4:	4b11      	ldr	r3, [pc, #68]	; (800202c <MX_TIM22_Init+0x114>)
 8001fe6:	2103      	movs	r1, #3
 8001fe8:	0018      	movs	r0, r3
 8001fea:	f005 fda4 	bl	8007b36 <HAL_TIMEx_RemapConfig>
 8001fee:	1e03      	subs	r3, r0, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_TIM22_Init+0xde>
  {
    Error_Handler();
 8001ff2:	f000 f8cf 	bl	8002194 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001ff6:	003b      	movs	r3, r7
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001ffc:	003b      	movs	r3, r7
 8001ffe:	2200      	movs	r2, #0
 8002000:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002002:	003b      	movs	r3, r7
 8002004:	2200      	movs	r2, #0
 8002006:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002008:	003b      	movs	r3, r7
 800200a:	2200      	movs	r2, #0
 800200c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800200e:	0039      	movs	r1, r7
 8002010:	4b06      	ldr	r3, [pc, #24]	; (800202c <MX_TIM22_Init+0x114>)
 8002012:	2200      	movs	r2, #0
 8002014:	0018      	movs	r0, r3
 8002016:	f005 fa23 	bl	8007460 <HAL_TIM_OC_ConfigChannel>
 800201a:	1e03      	subs	r3, r0, #0
 800201c:	d001      	beq.n	8002022 <MX_TIM22_Init+0x10a>
  {
    Error_Handler();
 800201e:	f000 f8b9 	bl	8002194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */

}
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	46bd      	mov	sp, r7
 8002026:	b00a      	add	sp, #40	; 0x28
 8002028:	bd80      	pop	{r7, pc}
 800202a:	46c0      	nop			; (mov r8, r8)
 800202c:	20000120 	.word	0x20000120
 8002030:	40011400 	.word	0x40011400

08002034 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800203a:	4b0c      	ldr	r3, [pc, #48]	; (800206c <MX_DMA_Init+0x38>)
 800203c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800203e:	4b0b      	ldr	r3, [pc, #44]	; (800206c <MX_DMA_Init+0x38>)
 8002040:	2101      	movs	r1, #1
 8002042:	430a      	orrs	r2, r1
 8002044:	631a      	str	r2, [r3, #48]	; 0x30
 8002046:	4b09      	ldr	r3, [pc, #36]	; (800206c <MX_DMA_Init+0x38>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	2201      	movs	r2, #1
 800204c:	4013      	ands	r3, r2
 800204e:	607b      	str	r3, [r7, #4]
 8002050:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8002052:	2200      	movs	r2, #0
 8002054:	2100      	movs	r1, #0
 8002056:	200a      	movs	r0, #10
 8002058:	f002 f8fa 	bl	8004250 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800205c:	200a      	movs	r0, #10
 800205e:	f002 f90c 	bl	800427a <HAL_NVIC_EnableIRQ>

}
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	46bd      	mov	sp, r7
 8002066:	b002      	add	sp, #8
 8002068:	bd80      	pop	{r7, pc}
 800206a:	46c0      	nop			; (mov r8, r8)
 800206c:	40021000 	.word	0x40021000

08002070 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002070:	b590      	push	{r4, r7, lr}
 8002072:	b089      	sub	sp, #36	; 0x24
 8002074:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002076:	240c      	movs	r4, #12
 8002078:	193b      	adds	r3, r7, r4
 800207a:	0018      	movs	r0, r3
 800207c:	2314      	movs	r3, #20
 800207e:	001a      	movs	r2, r3
 8002080:	2100      	movs	r1, #0
 8002082:	f005 fda8 	bl	8007bd6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002086:	4b3e      	ldr	r3, [pc, #248]	; (8002180 <MX_GPIO_Init+0x110>)
 8002088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800208a:	4b3d      	ldr	r3, [pc, #244]	; (8002180 <MX_GPIO_Init+0x110>)
 800208c:	2104      	movs	r1, #4
 800208e:	430a      	orrs	r2, r1
 8002090:	62da      	str	r2, [r3, #44]	; 0x2c
 8002092:	4b3b      	ldr	r3, [pc, #236]	; (8002180 <MX_GPIO_Init+0x110>)
 8002094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002096:	2204      	movs	r2, #4
 8002098:	4013      	ands	r3, r2
 800209a:	60bb      	str	r3, [r7, #8]
 800209c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800209e:	4b38      	ldr	r3, [pc, #224]	; (8002180 <MX_GPIO_Init+0x110>)
 80020a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020a2:	4b37      	ldr	r3, [pc, #220]	; (8002180 <MX_GPIO_Init+0x110>)
 80020a4:	2101      	movs	r1, #1
 80020a6:	430a      	orrs	r2, r1
 80020a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80020aa:	4b35      	ldr	r3, [pc, #212]	; (8002180 <MX_GPIO_Init+0x110>)
 80020ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ae:	2201      	movs	r2, #1
 80020b0:	4013      	ands	r3, r2
 80020b2:	607b      	str	r3, [r7, #4]
 80020b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b6:	4b32      	ldr	r3, [pc, #200]	; (8002180 <MX_GPIO_Init+0x110>)
 80020b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020ba:	4b31      	ldr	r3, [pc, #196]	; (8002180 <MX_GPIO_Init+0x110>)
 80020bc:	2102      	movs	r1, #2
 80020be:	430a      	orrs	r2, r1
 80020c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80020c2:	4b2f      	ldr	r3, [pc, #188]	; (8002180 <MX_GPIO_Init+0x110>)
 80020c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c6:	2202      	movs	r2, #2
 80020c8:	4013      	ands	r3, r2
 80020ca:	603b      	str	r3, [r7, #0]
 80020cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_7, GPIO_PIN_RESET);
 80020ce:	4b2d      	ldr	r3, [pc, #180]	; (8002184 <MX_GPIO_Init+0x114>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	218b      	movs	r1, #139	; 0x8b
 80020d4:	0018      	movs	r0, r3
 80020d6:	f002 fbf6 	bl	80048c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_6, GPIO_PIN_RESET);
 80020da:	4b2b      	ldr	r3, [pc, #172]	; (8002188 <MX_GPIO_Init+0x118>)
 80020dc:	2200      	movs	r2, #0
 80020de:	2142      	movs	r1, #66	; 0x42
 80020e0:	0018      	movs	r0, r3
 80020e2:	f002 fbf0 	bl	80048c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC3 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_7;
 80020e6:	0021      	movs	r1, r4
 80020e8:	187b      	adds	r3, r7, r1
 80020ea:	228b      	movs	r2, #139	; 0x8b
 80020ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ee:	187b      	adds	r3, r7, r1
 80020f0:	2201      	movs	r2, #1
 80020f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f4:	187b      	adds	r3, r7, r1
 80020f6:	2200      	movs	r2, #0
 80020f8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fa:	187b      	adds	r3, r7, r1
 80020fc:	2200      	movs	r2, #0
 80020fe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002100:	000c      	movs	r4, r1
 8002102:	187b      	adds	r3, r7, r1
 8002104:	4a1f      	ldr	r2, [pc, #124]	; (8002184 <MX_GPIO_Init+0x114>)
 8002106:	0019      	movs	r1, r3
 8002108:	0010      	movs	r0, r2
 800210a:	f002 fa41 	bl	8004590 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 800210e:	0021      	movs	r1, r4
 8002110:	187b      	adds	r3, r7, r1
 8002112:	2242      	movs	r2, #66	; 0x42
 8002114:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002116:	187b      	adds	r3, r7, r1
 8002118:	2201      	movs	r2, #1
 800211a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211c:	187b      	adds	r3, r7, r1
 800211e:	2200      	movs	r2, #0
 8002120:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002122:	187b      	adds	r3, r7, r1
 8002124:	2200      	movs	r2, #0
 8002126:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002128:	000c      	movs	r4, r1
 800212a:	187b      	adds	r3, r7, r1
 800212c:	4a16      	ldr	r2, [pc, #88]	; (8002188 <MX_GPIO_Init+0x118>)
 800212e:	0019      	movs	r1, r3
 8002130:	0010      	movs	r0, r2
 8002132:	f002 fa2d 	bl	8004590 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002136:	0021      	movs	r1, r4
 8002138:	187b      	adds	r3, r7, r1
 800213a:	4a14      	ldr	r2, [pc, #80]	; (800218c <MX_GPIO_Init+0x11c>)
 800213c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800213e:	187b      	adds	r3, r7, r1
 8002140:	4a13      	ldr	r2, [pc, #76]	; (8002190 <MX_GPIO_Init+0x120>)
 8002142:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002144:	187b      	adds	r3, r7, r1
 8002146:	2202      	movs	r2, #2
 8002148:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800214a:	187b      	adds	r3, r7, r1
 800214c:	4a0e      	ldr	r2, [pc, #56]	; (8002188 <MX_GPIO_Init+0x118>)
 800214e:	0019      	movs	r1, r3
 8002150:	0010      	movs	r0, r2
 8002152:	f002 fa1d 	bl	8004590 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8002156:	2200      	movs	r2, #0
 8002158:	2100      	movs	r1, #0
 800215a:	2006      	movs	r0, #6
 800215c:	f002 f878 	bl	8004250 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8002160:	2006      	movs	r0, #6
 8002162:	f002 f88a 	bl	800427a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002166:	2200      	movs	r2, #0
 8002168:	2100      	movs	r1, #0
 800216a:	2007      	movs	r0, #7
 800216c:	f002 f870 	bl	8004250 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002170:	2007      	movs	r0, #7
 8002172:	f002 f882 	bl	800427a <HAL_NVIC_EnableIRQ>

}
 8002176:	46c0      	nop			; (mov r8, r8)
 8002178:	46bd      	mov	sp, r7
 800217a:	b009      	add	sp, #36	; 0x24
 800217c:	bd90      	pop	{r4, r7, pc}
 800217e:	46c0      	nop			; (mov r8, r8)
 8002180:	40021000 	.word	0x40021000
 8002184:	50000800 	.word	0x50000800
 8002188:	50000400 	.word	0x50000400
 800218c:	0000e004 	.word	0x0000e004
 8002190:	10110000 	.word	0x10110000

08002194 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002198:	46c0      	nop			; (mov r8, r8)
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
	...

080021a0 <HAL_GPIO_EXTI_Callback>:
	"Nov",
	"Dec"
};

// button interrupt(s)
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	0002      	movs	r2, r0
 80021a8:	1dbb      	adds	r3, r7, #6
 80021aa:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == BUTTON1) buttons.is1Pressed = 1;
 80021ac:	1dbb      	adds	r3, r7, #6
 80021ae:	881b      	ldrh	r3, [r3, #0]
 80021b0:	2b04      	cmp	r3, #4
 80021b2:	d102      	bne.n	80021ba <HAL_GPIO_EXTI_Callback+0x1a>
 80021b4:	4b10      	ldr	r3, [pc, #64]	; (80021f8 <HAL_GPIO_EXTI_Callback+0x58>)
 80021b6:	2201      	movs	r2, #1
 80021b8:	701a      	strb	r2, [r3, #0]
	if (GPIO_Pin == BUTTON2) buttons.is2Pressed = 1;
 80021ba:	1dbb      	adds	r3, r7, #6
 80021bc:	881a      	ldrh	r2, [r3, #0]
 80021be:	2380      	movs	r3, #128	; 0x80
 80021c0:	019b      	lsls	r3, r3, #6
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d102      	bne.n	80021cc <HAL_GPIO_EXTI_Callback+0x2c>
 80021c6:	4b0c      	ldr	r3, [pc, #48]	; (80021f8 <HAL_GPIO_EXTI_Callback+0x58>)
 80021c8:	2201      	movs	r2, #1
 80021ca:	705a      	strb	r2, [r3, #1]
	if (GPIO_Pin == BUTTON3) buttons.is3Pressed = 1;
 80021cc:	1dbb      	adds	r3, r7, #6
 80021ce:	881a      	ldrh	r2, [r3, #0]
 80021d0:	2380      	movs	r3, #128	; 0x80
 80021d2:	01db      	lsls	r3, r3, #7
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d102      	bne.n	80021de <HAL_GPIO_EXTI_Callback+0x3e>
 80021d8:	4b07      	ldr	r3, [pc, #28]	; (80021f8 <HAL_GPIO_EXTI_Callback+0x58>)
 80021da:	2201      	movs	r2, #1
 80021dc:	709a      	strb	r2, [r3, #2]
	if (GPIO_Pin == BUTTON4) buttons.is4Pressed = 1;
 80021de:	1dbb      	adds	r3, r7, #6
 80021e0:	881a      	ldrh	r2, [r3, #0]
 80021e2:	2380      	movs	r3, #128	; 0x80
 80021e4:	021b      	lsls	r3, r3, #8
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d102      	bne.n	80021f0 <HAL_GPIO_EXTI_Callback+0x50>
 80021ea:	4b03      	ldr	r3, [pc, #12]	; (80021f8 <HAL_GPIO_EXTI_Callback+0x58>)
 80021ec:	2201      	movs	r2, #1
 80021ee:	70da      	strb	r2, [r3, #3]
}
 80021f0:	46c0      	nop			; (mov r8, r8)
 80021f2:	46bd      	mov	sp, r7
 80021f4:	b002      	add	sp, #8
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	200001b8 	.word	0x200001b8

080021fc <updateWithButtons>:

void updateWithButtons() {
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
	/* program flow:
	 *   check current face used
	 *   check current variables and check button pressed
	 */
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);		// should run for any button
 8002200:	4b2c      	ldr	r3, [pc, #176]	; (80022b4 <updateWithButtons+0xb8>)
 8002202:	2108      	movs	r1, #8
 8002204:	0018      	movs	r0, r3
 8002206:	f002 fb7b 	bl	8004900 <HAL_GPIO_TogglePin>

	// button 1 changes the face on screen.
	if (buttons.is1Pressed) {
 800220a:	4b2b      	ldr	r3, [pc, #172]	; (80022b8 <updateWithButtons+0xbc>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2b00      	cmp	r3, #0
 8002212:	d030      	beq.n	8002276 <updateWithButtons+0x7a>
		buttons.is1Pressed = 0;
 8002214:	4b28      	ldr	r3, [pc, #160]	; (80022b8 <updateWithButtons+0xbc>)
 8002216:	2200      	movs	r2, #0
 8002218:	701a      	strb	r2, [r3, #0]
		faceOnDisplay = (faceOnDisplay + 1) % NUM_FACES;
 800221a:	4b28      	ldr	r3, [pc, #160]	; (80022bc <updateWithButtons+0xc0>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	3301      	adds	r3, #1
 8002220:	4a27      	ldr	r2, [pc, #156]	; (80022c0 <updateWithButtons+0xc4>)
 8002222:	4013      	ands	r3, r2
 8002224:	d504      	bpl.n	8002230 <updateWithButtons+0x34>
 8002226:	3b01      	subs	r3, #1
 8002228:	2204      	movs	r2, #4
 800222a:	4252      	negs	r2, r2
 800222c:	4313      	orrs	r3, r2
 800222e:	3301      	adds	r3, #1
 8002230:	b2da      	uxtb	r2, r3
 8002232:	4b22      	ldr	r3, [pc, #136]	; (80022bc <updateWithButtons+0xc0>)
 8002234:	701a      	strb	r2, [r3, #0]
		isFaceBeingChanged = 1;
 8002236:	4b23      	ldr	r3, [pc, #140]	; (80022c4 <updateWithButtons+0xc8>)
 8002238:	2201      	movs	r2, #1
 800223a:	701a      	strb	r2, [r3, #0]
		switch (faceOnDisplay) {
 800223c:	4b1f      	ldr	r3, [pc, #124]	; (80022bc <updateWithButtons+0xc0>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d00c      	beq.n	800225e <updateWithButtons+0x62>
 8002244:	dc02      	bgt.n	800224c <updateWithButtons+0x50>
 8002246:	2b00      	cmp	r3, #0
 8002248:	d005      	beq.n	8002256 <updateWithButtons+0x5a>
			case faceClock: updateFace.clock = 1; break;
			case faceTimer: updateFace.timer = 1; break;
			case faceAlarm: updateFace.alarm = 1; break;
			case faceStopwatch: updateFace.stopwatch = 1; break;
			default: break;
 800224a:	e015      	b.n	8002278 <updateWithButtons+0x7c>
		switch (faceOnDisplay) {
 800224c:	2b02      	cmp	r3, #2
 800224e:	d00a      	beq.n	8002266 <updateWithButtons+0x6a>
 8002250:	2b03      	cmp	r3, #3
 8002252:	d00c      	beq.n	800226e <updateWithButtons+0x72>
			default: break;
 8002254:	e010      	b.n	8002278 <updateWithButtons+0x7c>
			case faceClock: updateFace.clock = 1; break;
 8002256:	4b1c      	ldr	r3, [pc, #112]	; (80022c8 <updateWithButtons+0xcc>)
 8002258:	2201      	movs	r2, #1
 800225a:	701a      	strb	r2, [r3, #0]
 800225c:	e00c      	b.n	8002278 <updateWithButtons+0x7c>
			case faceTimer: updateFace.timer = 1; break;
 800225e:	4b1a      	ldr	r3, [pc, #104]	; (80022c8 <updateWithButtons+0xcc>)
 8002260:	2201      	movs	r2, #1
 8002262:	705a      	strb	r2, [r3, #1]
 8002264:	e008      	b.n	8002278 <updateWithButtons+0x7c>
			case faceAlarm: updateFace.alarm = 1; break;
 8002266:	4b18      	ldr	r3, [pc, #96]	; (80022c8 <updateWithButtons+0xcc>)
 8002268:	2201      	movs	r2, #1
 800226a:	709a      	strb	r2, [r3, #2]
 800226c:	e004      	b.n	8002278 <updateWithButtons+0x7c>
			case faceStopwatch: updateFace.stopwatch = 1; break;
 800226e:	4b16      	ldr	r3, [pc, #88]	; (80022c8 <updateWithButtons+0xcc>)
 8002270:	2201      	movs	r2, #1
 8002272:	70da      	strb	r2, [r3, #3]
 8002274:	e000      	b.n	8002278 <updateWithButtons+0x7c>
		}
	}
 8002276:	46c0      	nop			; (mov r8, r8)

	if (faceOnDisplay == faceClock) updateClockState();
 8002278:	4b10      	ldr	r3, [pc, #64]	; (80022bc <updateWithButtons+0xc0>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d102      	bne.n	8002286 <updateWithButtons+0x8a>
 8002280:	f000 f824 	bl	80022cc <updateClockState>
	else if (faceOnDisplay == faceTimer) updateTimerState();
	else if (faceOnDisplay == faceAlarm) updateAlarmState();
	else if (faceOnDisplay == faceStopwatch) updateStopwatchState();
}
 8002284:	e013      	b.n	80022ae <updateWithButtons+0xb2>
	else if (faceOnDisplay == faceTimer) updateTimerState();
 8002286:	4b0d      	ldr	r3, [pc, #52]	; (80022bc <updateWithButtons+0xc0>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d102      	bne.n	8002294 <updateWithButtons+0x98>
 800228e:	f000 f939 	bl	8002504 <updateTimerState>
}
 8002292:	e00c      	b.n	80022ae <updateWithButtons+0xb2>
	else if (faceOnDisplay == faceAlarm) updateAlarmState();
 8002294:	4b09      	ldr	r3, [pc, #36]	; (80022bc <updateWithButtons+0xc0>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b02      	cmp	r3, #2
 800229a:	d102      	bne.n	80022a2 <updateWithButtons+0xa6>
 800229c:	f000 fa48 	bl	8002730 <updateAlarmState>
}
 80022a0:	e005      	b.n	80022ae <updateWithButtons+0xb2>
	else if (faceOnDisplay == faceStopwatch) updateStopwatchState();
 80022a2:	4b06      	ldr	r3, [pc, #24]	; (80022bc <updateWithButtons+0xc0>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	2b03      	cmp	r3, #3
 80022a8:	d101      	bne.n	80022ae <updateWithButtons+0xb2>
 80022aa:	f000 fb65 	bl	8002978 <updateStopwatchState>
}
 80022ae:	46c0      	nop			; (mov r8, r8)
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	50000800 	.word	0x50000800
 80022b8:	200001b8 	.word	0x200001b8
 80022bc:	20000105 	.word	0x20000105
 80022c0:	80000003 	.word	0x80000003
 80022c4:	20000104 	.word	0x20000104
 80022c8:	2000015c 	.word	0x2000015c

080022cc <updateClockState>:
 *     the clock is updated and we revert back to default mode.
 *
 * notes:
 *   make date setting more robust (invalidate date entries when that day of month doesn't exist or just change modulo)
 */
void updateClockState() {
 80022cc:	b5b0      	push	{r4, r5, r7, lr}
 80022ce:	af00      	add	r7, sp, #0
	// change fields up, do nothing if not setting clock
	if (buttons.is2Pressed && clockVars.isBeingSet) {
 80022d0:	4b87      	ldr	r3, [pc, #540]	; (80024f0 <updateClockState+0x224>)
 80022d2:	785b      	ldrb	r3, [r3, #1]
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d061      	beq.n	800239e <updateClockState+0xd2>
 80022da:	4b86      	ldr	r3, [pc, #536]	; (80024f4 <updateClockState+0x228>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d05d      	beq.n	800239e <updateClockState+0xd2>
		buttons.is2Pressed = 0;
 80022e2:	4b83      	ldr	r3, [pc, #524]	; (80024f0 <updateClockState+0x224>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	705a      	strb	r2, [r3, #1]
		updateFace.clock = 1;
 80022e8:	4b83      	ldr	r3, [pc, #524]	; (80024f8 <updateClockState+0x22c>)
 80022ea:	2201      	movs	r2, #1
 80022ec:	701a      	strb	r2, [r3, #0]
		switch (clockVars.fieldBeingSet) {
 80022ee:	4b81      	ldr	r3, [pc, #516]	; (80024f4 <updateClockState+0x228>)
 80022f0:	785b      	ldrb	r3, [r3, #1]
 80022f2:	2b05      	cmp	r3, #5
 80022f4:	d855      	bhi.n	80023a2 <updateClockState+0xd6>
 80022f6:	009a      	lsls	r2, r3, #2
 80022f8:	4b80      	ldr	r3, [pc, #512]	; (80024fc <updateClockState+0x230>)
 80022fa:	18d3      	adds	r3, r2, r3
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	469f      	mov	pc, r3
			case 1: clockVars.timeToSet->min = (clockVars.timeToSet->min+1) % 60; break;
 8002300:	4b7c      	ldr	r3, [pc, #496]	; (80024f4 <updateClockState+0x228>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	785b      	ldrb	r3, [r3, #1]
 8002306:	3301      	adds	r3, #1
 8002308:	213c      	movs	r1, #60	; 0x3c
 800230a:	0018      	movs	r0, r3
 800230c:	f7fe f874 	bl	80003f8 <__aeabi_idivmod>
 8002310:	000b      	movs	r3, r1
 8002312:	001a      	movs	r2, r3
 8002314:	4b77      	ldr	r3, [pc, #476]	; (80024f4 <updateClockState+0x228>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	b2d2      	uxtb	r2, r2
 800231a:	705a      	strb	r2, [r3, #1]
 800231c:	e042      	b.n	80023a4 <updateClockState+0xd8>
			case 2: clockVars.timeToSet->hr = (clockVars.timeToSet->hr+1) % 24; break;
 800231e:	4b75      	ldr	r3, [pc, #468]	; (80024f4 <updateClockState+0x228>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	3301      	adds	r3, #1
 8002326:	2118      	movs	r1, #24
 8002328:	0018      	movs	r0, r3
 800232a:	f7fe f865 	bl	80003f8 <__aeabi_idivmod>
 800232e:	000b      	movs	r3, r1
 8002330:	001a      	movs	r2, r3
 8002332:	4b70      	ldr	r3, [pc, #448]	; (80024f4 <updateClockState+0x228>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	701a      	strb	r2, [r3, #0]
 800233a:	e033      	b.n	80023a4 <updateClockState+0xd8>
			case 3: clockVars.dateToSet->yr++; break;		// supposed to be between large numbers. no need for bounds checking
 800233c:	4b6d      	ldr	r3, [pc, #436]	; (80024f4 <updateClockState+0x228>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	881a      	ldrh	r2, [r3, #0]
 8002342:	3201      	adds	r2, #1
 8002344:	b292      	uxth	r2, r2
 8002346:	801a      	strh	r2, [r3, #0]
 8002348:	e02c      	b.n	80023a4 <updateClockState+0xd8>
			case 4: clockVars.dateToSet->month = (clockVars.dateToSet->month+1) % 12 + 1; break;
 800234a:	4b6a      	ldr	r3, [pc, #424]	; (80024f4 <updateClockState+0x228>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	789b      	ldrb	r3, [r3, #2]
 8002350:	3301      	adds	r3, #1
 8002352:	210c      	movs	r1, #12
 8002354:	0018      	movs	r0, r3
 8002356:	f7fe f84f 	bl	80003f8 <__aeabi_idivmod>
 800235a:	000b      	movs	r3, r1
 800235c:	b2da      	uxtb	r2, r3
 800235e:	4b65      	ldr	r3, [pc, #404]	; (80024f4 <updateClockState+0x228>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	3201      	adds	r2, #1
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	709a      	strb	r2, [r3, #2]
 8002368:	e01c      	b.n	80023a4 <updateClockState+0xd8>
			case 5: clockVars.dateToSet->date = (clockVars.dateToSet->date+1) % maxDaysInMonth(clockVars.dateToSet->month, clockVars.dateToSet->yr); break;		// make more robust?
 800236a:	4b62      	ldr	r3, [pc, #392]	; (80024f4 <updateClockState+0x228>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	78db      	ldrb	r3, [r3, #3]
 8002370:	1c5c      	adds	r4, r3, #1
 8002372:	4b60      	ldr	r3, [pc, #384]	; (80024f4 <updateClockState+0x228>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	789a      	ldrb	r2, [r3, #2]
 8002378:	4b5e      	ldr	r3, [pc, #376]	; (80024f4 <updateClockState+0x228>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	881b      	ldrh	r3, [r3, #0]
 800237e:	0019      	movs	r1, r3
 8002380:	0010      	movs	r0, r2
 8002382:	f001 f8a1 	bl	80034c8 <maxDaysInMonth>
 8002386:	0003      	movs	r3, r0
 8002388:	0019      	movs	r1, r3
 800238a:	0020      	movs	r0, r4
 800238c:	f7fe f834 	bl	80003f8 <__aeabi_idivmod>
 8002390:	000b      	movs	r3, r1
 8002392:	001a      	movs	r2, r3
 8002394:	4b57      	ldr	r3, [pc, #348]	; (80024f4 <updateClockState+0x228>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	70da      	strb	r2, [r3, #3]
 800239c:	e002      	b.n	80023a4 <updateClockState+0xd8>
			default: break;
		}
	}
 800239e:	46c0      	nop			; (mov r8, r8)
 80023a0:	e000      	b.n	80023a4 <updateClockState+0xd8>
			default: break;
 80023a2:	46c0      	nop			; (mov r8, r8)
	// change fields down, do nothing if not setting clock
	if (buttons.is3Pressed && clockVars.isBeingSet) {
 80023a4:	4b52      	ldr	r3, [pc, #328]	; (80024f0 <updateClockState+0x224>)
 80023a6:	789b      	ldrb	r3, [r3, #2]
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d065      	beq.n	800247a <updateClockState+0x1ae>
 80023ae:	4b51      	ldr	r3, [pc, #324]	; (80024f4 <updateClockState+0x228>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d061      	beq.n	800247a <updateClockState+0x1ae>
		buttons.is3Pressed = 0;
 80023b6:	4b4e      	ldr	r3, [pc, #312]	; (80024f0 <updateClockState+0x224>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	709a      	strb	r2, [r3, #2]
		updateFace.clock = 1;
 80023bc:	4b4e      	ldr	r3, [pc, #312]	; (80024f8 <updateClockState+0x22c>)
 80023be:	2201      	movs	r2, #1
 80023c0:	701a      	strb	r2, [r3, #0]
		switch (clockVars.fieldBeingSet) {
 80023c2:	4b4c      	ldr	r3, [pc, #304]	; (80024f4 <updateClockState+0x228>)
 80023c4:	785b      	ldrb	r3, [r3, #1]
 80023c6:	2b05      	cmp	r3, #5
 80023c8:	d859      	bhi.n	800247e <updateClockState+0x1b2>
 80023ca:	009a      	lsls	r2, r3, #2
 80023cc:	4b4c      	ldr	r3, [pc, #304]	; (8002500 <updateClockState+0x234>)
 80023ce:	18d3      	adds	r3, r2, r3
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	469f      	mov	pc, r3
			case 1:
				if (clockVars.timeToSet->min == 0) clockVars.timeToSet->min = 59;
 80023d4:	4b47      	ldr	r3, [pc, #284]	; (80024f4 <updateClockState+0x228>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	785b      	ldrb	r3, [r3, #1]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d104      	bne.n	80023e8 <updateClockState+0x11c>
 80023de:	4b45      	ldr	r3, [pc, #276]	; (80024f4 <updateClockState+0x228>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	223b      	movs	r2, #59	; 0x3b
 80023e4:	705a      	strb	r2, [r3, #1]
				else clockVars.timeToSet->min--;
				break;
 80023e6:	e04b      	b.n	8002480 <updateClockState+0x1b4>
				else clockVars.timeToSet->min--;
 80023e8:	4b42      	ldr	r3, [pc, #264]	; (80024f4 <updateClockState+0x228>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	785a      	ldrb	r2, [r3, #1]
 80023ee:	3a01      	subs	r2, #1
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	705a      	strb	r2, [r3, #1]
				break;
 80023f4:	e044      	b.n	8002480 <updateClockState+0x1b4>
			case 2:
				if (clockVars.timeToSet->hr == 0) clockVars.timeToSet->hr = 23;
 80023f6:	4b3f      	ldr	r3, [pc, #252]	; (80024f4 <updateClockState+0x228>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d104      	bne.n	800240a <updateClockState+0x13e>
 8002400:	4b3c      	ldr	r3, [pc, #240]	; (80024f4 <updateClockState+0x228>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	2217      	movs	r2, #23
 8002406:	701a      	strb	r2, [r3, #0]
				else clockVars.timeToSet->hr--;
				break;
 8002408:	e03a      	b.n	8002480 <updateClockState+0x1b4>
				else clockVars.timeToSet->hr--;
 800240a:	4b3a      	ldr	r3, [pc, #232]	; (80024f4 <updateClockState+0x228>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	781a      	ldrb	r2, [r3, #0]
 8002410:	3a01      	subs	r2, #1
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	701a      	strb	r2, [r3, #0]
				break;
 8002416:	e033      	b.n	8002480 <updateClockState+0x1b4>
			case 3: clockVars.dateToSet->yr--; break;		// supposed to be from 1950-2050. no need to do bounds checking
 8002418:	4b36      	ldr	r3, [pc, #216]	; (80024f4 <updateClockState+0x228>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	881a      	ldrh	r2, [r3, #0]
 800241e:	3a01      	subs	r2, #1
 8002420:	b292      	uxth	r2, r2
 8002422:	801a      	strh	r2, [r3, #0]
 8002424:	e02c      	b.n	8002480 <updateClockState+0x1b4>
			case 4: clockVars.dateToSet->month = clockVars.dateToSet->month == 1 ? 12 : clockVars.dateToSet->month-1; break;
 8002426:	4b33      	ldr	r3, [pc, #204]	; (80024f4 <updateClockState+0x228>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	789b      	ldrb	r3, [r3, #2]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d005      	beq.n	800243c <updateClockState+0x170>
 8002430:	4b30      	ldr	r3, [pc, #192]	; (80024f4 <updateClockState+0x228>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	789b      	ldrb	r3, [r3, #2]
 8002436:	3b01      	subs	r3, #1
 8002438:	b2da      	uxtb	r2, r3
 800243a:	e000      	b.n	800243e <updateClockState+0x172>
 800243c:	220c      	movs	r2, #12
 800243e:	4b2d      	ldr	r3, [pc, #180]	; (80024f4 <updateClockState+0x228>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	709a      	strb	r2, [r3, #2]
 8002444:	e01c      	b.n	8002480 <updateClockState+0x1b4>
				if (clockVars.dateToSet->month == RTC_MONTH_JANUARY) clockVars.dateToSet->month = RTC_MONTH_DECEMBER;
				else clockVars.dateToSet->month--;
			case 5:
				if (clockVars.dateToSet->date == 0) clockVars.dateToSet->date = maxDaysInMonth(clockVars.dateToSet->month, clockVars.dateToSet->yr);
 8002446:	4b2b      	ldr	r3, [pc, #172]	; (80024f4 <updateClockState+0x228>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	78db      	ldrb	r3, [r3, #3]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d10d      	bne.n	800246c <updateClockState+0x1a0>
 8002450:	4b28      	ldr	r3, [pc, #160]	; (80024f4 <updateClockState+0x228>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	789a      	ldrb	r2, [r3, #2]
 8002456:	4b27      	ldr	r3, [pc, #156]	; (80024f4 <updateClockState+0x228>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	8819      	ldrh	r1, [r3, #0]
 800245c:	4b25      	ldr	r3, [pc, #148]	; (80024f4 <updateClockState+0x228>)
 800245e:	685c      	ldr	r4, [r3, #4]
 8002460:	0010      	movs	r0, r2
 8002462:	f001 f831 	bl	80034c8 <maxDaysInMonth>
 8002466:	0003      	movs	r3, r0
 8002468:	70e3      	strb	r3, [r4, #3]
				else clockVars.dateToSet->date--;
				break;
 800246a:	e009      	b.n	8002480 <updateClockState+0x1b4>
				else clockVars.dateToSet->date--;
 800246c:	4b21      	ldr	r3, [pc, #132]	; (80024f4 <updateClockState+0x228>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	78da      	ldrb	r2, [r3, #3]
 8002472:	3a01      	subs	r2, #1
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	70da      	strb	r2, [r3, #3]
				break;
 8002478:	e002      	b.n	8002480 <updateClockState+0x1b4>
			default: break;
		}
	}
 800247a:	46c0      	nop			; (mov r8, r8)
 800247c:	e000      	b.n	8002480 <updateClockState+0x1b4>
			default: break;
 800247e:	46c0      	nop			; (mov r8, r8)
	// switches between setting mode and default mode. changes between different clock fields
	if (buttons.is4Pressed) {
 8002480:	4b1b      	ldr	r3, [pc, #108]	; (80024f0 <updateClockState+0x224>)
 8002482:	78db      	ldrb	r3, [r3, #3]
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d02f      	beq.n	80024ea <updateClockState+0x21e>
		buttons.is4Pressed = 0;
 800248a:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <updateClockState+0x224>)
 800248c:	2200      	movs	r2, #0
 800248e:	70da      	strb	r2, [r3, #3]
		updateFace.clock = 1;
 8002490:	4b19      	ldr	r3, [pc, #100]	; (80024f8 <updateClockState+0x22c>)
 8002492:	2201      	movs	r2, #1
 8002494:	701a      	strb	r2, [r3, #0]
		clockVars.fieldBeingSet = (clockVars.fieldBeingSet + 1) % (NUM_CLOCKFIELDS + 1);
 8002496:	4b17      	ldr	r3, [pc, #92]	; (80024f4 <updateClockState+0x228>)
 8002498:	785b      	ldrb	r3, [r3, #1]
 800249a:	3301      	adds	r3, #1
 800249c:	2106      	movs	r1, #6
 800249e:	0018      	movs	r0, r3
 80024a0:	f7fd ffaa 	bl	80003f8 <__aeabi_idivmod>
 80024a4:	000b      	movs	r3, r1
 80024a6:	b2da      	uxtb	r2, r3
 80024a8:	4b12      	ldr	r3, [pc, #72]	; (80024f4 <updateClockState+0x228>)
 80024aa:	705a      	strb	r2, [r3, #1]
		if (clockVars.fieldBeingSet != 0) {
 80024ac:	4b11      	ldr	r3, [pc, #68]	; (80024f4 <updateClockState+0x228>)
 80024ae:	785b      	ldrb	r3, [r3, #1]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00f      	beq.n	80024d4 <updateClockState+0x208>
			clockVars.isBeingSet = 1;
 80024b4:	4b0f      	ldr	r3, [pc, #60]	; (80024f4 <updateClockState+0x228>)
 80024b6:	2201      	movs	r2, #1
 80024b8:	701a      	strb	r2, [r3, #0]

			// should pull current time when first entering setting mode
			if (clockVars.fieldBeingSet == 1) getDateTime(clockVars.dateToSet, clockVars.timeToSet);
 80024ba:	4b0e      	ldr	r3, [pc, #56]	; (80024f4 <updateClockState+0x228>)
 80024bc:	785b      	ldrb	r3, [r3, #1]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d113      	bne.n	80024ea <updateClockState+0x21e>
 80024c2:	4b0c      	ldr	r3, [pc, #48]	; (80024f4 <updateClockState+0x228>)
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <updateClockState+0x228>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	0019      	movs	r1, r3
 80024cc:	0010      	movs	r0, r2
 80024ce:	f7ff f98b 	bl	80017e8 <getDateTime>
			// second set to 0, weekday ignored
			setDateTime(clockVars.dateToSet, clockVars.timeToSet);
		}
	}
	// checks on clock set for other buttons here (what did this note mean??)
}
 80024d2:	e00a      	b.n	80024ea <updateClockState+0x21e>
			clockVars.isBeingSet = 0;
 80024d4:	4b07      	ldr	r3, [pc, #28]	; (80024f4 <updateClockState+0x228>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	701a      	strb	r2, [r3, #0]
			setDateTime(clockVars.dateToSet, clockVars.timeToSet);
 80024da:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <updateClockState+0x228>)
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <updateClockState+0x228>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	0019      	movs	r1, r3
 80024e4:	0010      	movs	r0, r2
 80024e6:	f7ff f8cd 	bl	8001684 <setDateTime>
}
 80024ea:	46c0      	nop			; (mov r8, r8)
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bdb0      	pop	{r4, r5, r7, pc}
 80024f0:	200001b8 	.word	0x200001b8
 80024f4:	200000e0 	.word	0x200000e0
 80024f8:	2000015c 	.word	0x2000015c
 80024fc:	08008b28 	.word	0x08008b28
 8002500:	08008b40 	.word	0x08008b40

08002504 <updateTimerState>:
 *     second, timer only runs for half second.)
 *     also not sure how to implement pause using rtc (alarm value has to change depending on how long timer is paused for)
 *   might need to change to using only hardware timer for this instead of rtc because of problems listed above
 *   insert a few more functions into this (those that need to use the hardware)
 */
void updateTimerState() {
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
	if (timerVars.isBeingSet) {
 8002508:	4b84      	ldr	r3, [pc, #528]	; (800271c <updateTimerState+0x218>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d100      	bne.n	8002512 <updateTimerState+0xe>
 8002510:	e089      	b.n	8002626 <updateTimerState+0x122>
		if (buttons.is2Pressed) {
 8002512:	4b83      	ldr	r3, [pc, #524]	; (8002720 <updateTimerState+0x21c>)
 8002514:	785b      	ldrb	r3, [r3, #1]
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2b00      	cmp	r3, #0
 800251a:	d03b      	beq.n	8002594 <updateTimerState+0x90>
			buttons.is2Pressed = 0;
 800251c:	4b80      	ldr	r3, [pc, #512]	; (8002720 <updateTimerState+0x21c>)
 800251e:	2200      	movs	r2, #0
 8002520:	705a      	strb	r2, [r3, #1]
			updateFace.timer = 1;
 8002522:	4b80      	ldr	r3, [pc, #512]	; (8002724 <updateTimerState+0x220>)
 8002524:	2201      	movs	r2, #1
 8002526:	705a      	strb	r2, [r3, #1]

			// set field up
			switch (timerVars.fieldBeingSet) {
 8002528:	4b7c      	ldr	r3, [pc, #496]	; (800271c <updateTimerState+0x218>)
 800252a:	785b      	ldrb	r3, [r3, #1]
 800252c:	2b02      	cmp	r3, #2
 800252e:	d013      	beq.n	8002558 <updateTimerState+0x54>
 8002530:	2b03      	cmp	r3, #3
 8002532:	d020      	beq.n	8002576 <updateTimerState+0x72>
 8002534:	2b01      	cmp	r3, #1
 8002536:	d000      	beq.n	800253a <updateTimerState+0x36>
				case 1: timerVars.timeToSet->sec = (timerVars.timeToSet->sec+1) % 60; break;
				case 2: timerVars.timeToSet->min = (timerVars.timeToSet->min+1) % 60; break;
				case 3: timerVars.timeToSet->hr = (timerVars.timeToSet->hr+1) % 24; break;
				default: break;
 8002538:	e02d      	b.n	8002596 <updateTimerState+0x92>
				case 1: timerVars.timeToSet->sec = (timerVars.timeToSet->sec+1) % 60; break;
 800253a:	4b78      	ldr	r3, [pc, #480]	; (800271c <updateTimerState+0x218>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	789b      	ldrb	r3, [r3, #2]
 8002540:	3301      	adds	r3, #1
 8002542:	213c      	movs	r1, #60	; 0x3c
 8002544:	0018      	movs	r0, r3
 8002546:	f7fd ff57 	bl	80003f8 <__aeabi_idivmod>
 800254a:	000b      	movs	r3, r1
 800254c:	001a      	movs	r2, r3
 800254e:	4b73      	ldr	r3, [pc, #460]	; (800271c <updateTimerState+0x218>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	709a      	strb	r2, [r3, #2]
 8002556:	e01e      	b.n	8002596 <updateTimerState+0x92>
				case 2: timerVars.timeToSet->min = (timerVars.timeToSet->min+1) % 60; break;
 8002558:	4b70      	ldr	r3, [pc, #448]	; (800271c <updateTimerState+0x218>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	785b      	ldrb	r3, [r3, #1]
 800255e:	3301      	adds	r3, #1
 8002560:	213c      	movs	r1, #60	; 0x3c
 8002562:	0018      	movs	r0, r3
 8002564:	f7fd ff48 	bl	80003f8 <__aeabi_idivmod>
 8002568:	000b      	movs	r3, r1
 800256a:	001a      	movs	r2, r3
 800256c:	4b6b      	ldr	r3, [pc, #428]	; (800271c <updateTimerState+0x218>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	b2d2      	uxtb	r2, r2
 8002572:	705a      	strb	r2, [r3, #1]
 8002574:	e00f      	b.n	8002596 <updateTimerState+0x92>
				case 3: timerVars.timeToSet->hr = (timerVars.timeToSet->hr+1) % 24; break;
 8002576:	4b69      	ldr	r3, [pc, #420]	; (800271c <updateTimerState+0x218>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	3301      	adds	r3, #1
 800257e:	2118      	movs	r1, #24
 8002580:	0018      	movs	r0, r3
 8002582:	f7fd ff39 	bl	80003f8 <__aeabi_idivmod>
 8002586:	000b      	movs	r3, r1
 8002588:	001a      	movs	r2, r3
 800258a:	4b64      	ldr	r3, [pc, #400]	; (800271c <updateTimerState+0x218>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	b2d2      	uxtb	r2, r2
 8002590:	701a      	strb	r2, [r3, #0]
 8002592:	e000      	b.n	8002596 <updateTimerState+0x92>
			}
		}
 8002594:	46c0      	nop			; (mov r8, r8)
		if (buttons.is3Pressed) {
 8002596:	4b62      	ldr	r3, [pc, #392]	; (8002720 <updateTimerState+0x21c>)
 8002598:	789b      	ldrb	r3, [r3, #2]
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	d100      	bne.n	80025a2 <updateTimerState+0x9e>
 80025a0:	e0b8      	b.n	8002714 <updateTimerState+0x210>
			buttons.is3Pressed = 0;
 80025a2:	4b5f      	ldr	r3, [pc, #380]	; (8002720 <updateTimerState+0x21c>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	709a      	strb	r2, [r3, #2]
			updateFace.timer = 1;
 80025a8:	4b5e      	ldr	r3, [pc, #376]	; (8002724 <updateTimerState+0x220>)
 80025aa:	2201      	movs	r2, #1
 80025ac:	705a      	strb	r2, [r3, #1]

			// set field down
			switch (timerVars.fieldBeingSet) {
 80025ae:	4b5b      	ldr	r3, [pc, #364]	; (800271c <updateTimerState+0x218>)
 80025b0:	785b      	ldrb	r3, [r3, #1]
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d015      	beq.n	80025e2 <updateTimerState+0xde>
 80025b6:	2b03      	cmp	r3, #3
 80025b8:	d024      	beq.n	8002604 <updateTimerState+0x100>
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d000      	beq.n	80025c0 <updateTimerState+0xbc>
					break;
				case 3:
					if (timerVars.timeToSet->hr == 0) timerVars.timeToSet->hr = 23;
					else timerVars.timeToSet->hr--;
					break;
				default: break;
 80025be:	e0aa      	b.n	8002716 <updateTimerState+0x212>
					if (timerVars.timeToSet->sec == 0) timerVars.timeToSet->sec = 59;
 80025c0:	4b56      	ldr	r3, [pc, #344]	; (800271c <updateTimerState+0x218>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	789b      	ldrb	r3, [r3, #2]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d104      	bne.n	80025d4 <updateTimerState+0xd0>
 80025ca:	4b54      	ldr	r3, [pc, #336]	; (800271c <updateTimerState+0x218>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	223b      	movs	r2, #59	; 0x3b
 80025d0:	709a      	strb	r2, [r3, #2]
					break;
 80025d2:	e0a0      	b.n	8002716 <updateTimerState+0x212>
					else timerVars.timeToSet->sec--;
 80025d4:	4b51      	ldr	r3, [pc, #324]	; (800271c <updateTimerState+0x218>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	789a      	ldrb	r2, [r3, #2]
 80025da:	3a01      	subs	r2, #1
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	709a      	strb	r2, [r3, #2]
					break;
 80025e0:	e099      	b.n	8002716 <updateTimerState+0x212>
					if (timerVars.timeToSet->min == 0) timerVars.timeToSet->min = 59;
 80025e2:	4b4e      	ldr	r3, [pc, #312]	; (800271c <updateTimerState+0x218>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	785b      	ldrb	r3, [r3, #1]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d104      	bne.n	80025f6 <updateTimerState+0xf2>
 80025ec:	4b4b      	ldr	r3, [pc, #300]	; (800271c <updateTimerState+0x218>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	223b      	movs	r2, #59	; 0x3b
 80025f2:	705a      	strb	r2, [r3, #1]
					break;
 80025f4:	e08f      	b.n	8002716 <updateTimerState+0x212>
					else timerVars.timeToSet->min--;
 80025f6:	4b49      	ldr	r3, [pc, #292]	; (800271c <updateTimerState+0x218>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	785a      	ldrb	r2, [r3, #1]
 80025fc:	3a01      	subs	r2, #1
 80025fe:	b2d2      	uxtb	r2, r2
 8002600:	705a      	strb	r2, [r3, #1]
					break;
 8002602:	e088      	b.n	8002716 <updateTimerState+0x212>
					if (timerVars.timeToSet->hr == 0) timerVars.timeToSet->hr = 23;
 8002604:	4b45      	ldr	r3, [pc, #276]	; (800271c <updateTimerState+0x218>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d104      	bne.n	8002618 <updateTimerState+0x114>
 800260e:	4b43      	ldr	r3, [pc, #268]	; (800271c <updateTimerState+0x218>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	2217      	movs	r2, #23
 8002614:	701a      	strb	r2, [r3, #0]
					break;
 8002616:	e07e      	b.n	8002716 <updateTimerState+0x212>
					else timerVars.timeToSet->hr--;
 8002618:	4b40      	ldr	r3, [pc, #256]	; (800271c <updateTimerState+0x218>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	781a      	ldrb	r2, [r3, #0]
 800261e:	3a01      	subs	r2, #1
 8002620:	b2d2      	uxtb	r2, r2
 8002622:	701a      	strb	r2, [r3, #0]
					break;
 8002624:	e077      	b.n	8002716 <updateTimerState+0x212>
			}
		}
	}
	// not done
	else if (timerVars.isSet) {
 8002626:	4b3d      	ldr	r3, [pc, #244]	; (800271c <updateTimerState+0x218>)
 8002628:	789b      	ldrb	r3, [r3, #2]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d037      	beq.n	800269e <updateTimerState+0x19a>
		if (buttons.is2Pressed && isTimerRunning == 0) {
 800262e:	4b3c      	ldr	r3, [pc, #240]	; (8002720 <updateTimerState+0x21c>)
 8002630:	785b      	ldrb	r3, [r3, #1]
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00d      	beq.n	8002654 <updateTimerState+0x150>
 8002638:	4b3b      	ldr	r3, [pc, #236]	; (8002728 <updateTimerState+0x224>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d108      	bne.n	8002654 <updateTimerState+0x150>
			buttons.is2Pressed = 0;
 8002642:	4b37      	ldr	r3, [pc, #220]	; (8002720 <updateTimerState+0x21c>)
 8002644:	2200      	movs	r2, #0
 8002646:	705a      	strb	r2, [r3, #1]
			updateFace.timer = 1;
 8002648:	4b36      	ldr	r3, [pc, #216]	; (8002724 <updateTimerState+0x220>)
 800264a:	2201      	movs	r2, #1
 800264c:	705a      	strb	r2, [r3, #1]
			// start timer
			isTimerRunning = 1;
 800264e:	4b36      	ldr	r3, [pc, #216]	; (8002728 <updateTimerState+0x224>)
 8002650:	2201      	movs	r2, #1
 8002652:	701a      	strb	r2, [r3, #0]
		}
		if (buttons.is3Pressed && isTimerRunning) {
 8002654:	4b32      	ldr	r3, [pc, #200]	; (8002720 <updateTimerState+0x21c>)
 8002656:	789b      	ldrb	r3, [r3, #2]
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00d      	beq.n	800267a <updateTimerState+0x176>
 800265e:	4b32      	ldr	r3, [pc, #200]	; (8002728 <updateTimerState+0x224>)
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b00      	cmp	r3, #0
 8002666:	d008      	beq.n	800267a <updateTimerState+0x176>
			buttons.is3Pressed = 0;
 8002668:	4b2d      	ldr	r3, [pc, #180]	; (8002720 <updateTimerState+0x21c>)
 800266a:	2200      	movs	r2, #0
 800266c:	709a      	strb	r2, [r3, #2]
			updateFace.timer = 1;
 800266e:	4b2d      	ldr	r3, [pc, #180]	; (8002724 <updateTimerState+0x220>)
 8002670:	2201      	movs	r2, #1
 8002672:	705a      	strb	r2, [r3, #1]
			// pause timer
			isTimerRunning = 0;
 8002674:	4b2c      	ldr	r3, [pc, #176]	; (8002728 <updateTimerState+0x224>)
 8002676:	2200      	movs	r2, #0
 8002678:	701a      	strb	r2, [r3, #0]
		}
		if (buttons.is4Pressed) {
 800267a:	4b29      	ldr	r3, [pc, #164]	; (8002720 <updateTimerState+0x21c>)
 800267c:	78db      	ldrb	r3, [r3, #3]
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b00      	cmp	r3, #0
 8002682:	d048      	beq.n	8002716 <updateTimerState+0x212>
			buttons.is4Pressed = 0;
 8002684:	4b26      	ldr	r3, [pc, #152]	; (8002720 <updateTimerState+0x21c>)
 8002686:	2200      	movs	r2, #0
 8002688:	70da      	strb	r2, [r3, #3]
			updateFace.timer = 1;
 800268a:	4b26      	ldr	r3, [pc, #152]	; (8002724 <updateTimerState+0x220>)
 800268c:	2201      	movs	r2, #1
 800268e:	705a      	strb	r2, [r3, #1]

			// stop and clear timer
			timerVars.isSet = 0;
 8002690:	4b22      	ldr	r3, [pc, #136]	; (800271c <updateTimerState+0x218>)
 8002692:	2200      	movs	r2, #0
 8002694:	709a      	strb	r2, [r3, #2]
			isTimerRunning = 0;
 8002696:	4b24      	ldr	r3, [pc, #144]	; (8002728 <updateTimerState+0x224>)
 8002698:	2200      	movs	r2, #0
 800269a:	701a      	strb	r2, [r3, #0]
			timerVars.isBeingSet = 0;
			timerVars.isSet = 1;
			// setTimer(&timerVars.timeToSet);
		}
	}
}
 800269c:	e03b      	b.n	8002716 <updateTimerState+0x212>
	else if (buttons.is4Pressed) {
 800269e:	4b20      	ldr	r3, [pc, #128]	; (8002720 <updateTimerState+0x21c>)
 80026a0:	78db      	ldrb	r3, [r3, #3]
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d036      	beq.n	8002716 <updateTimerState+0x212>
		buttons.is4Pressed = 0;
 80026a8:	4b1d      	ldr	r3, [pc, #116]	; (8002720 <updateTimerState+0x21c>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	70da      	strb	r2, [r3, #3]
		updateFace.timer = 1;
 80026ae:	4b1d      	ldr	r3, [pc, #116]	; (8002724 <updateTimerState+0x220>)
 80026b0:	2201      	movs	r2, #1
 80026b2:	705a      	strb	r2, [r3, #1]
		timerVars.fieldBeingSet = (timerVars.fieldBeingSet + 1) % (NUM_TIMERFIELDS + 1);
 80026b4:	4b19      	ldr	r3, [pc, #100]	; (800271c <updateTimerState+0x218>)
 80026b6:	785b      	ldrb	r3, [r3, #1]
 80026b8:	3301      	adds	r3, #1
 80026ba:	4a1c      	ldr	r2, [pc, #112]	; (800272c <updateTimerState+0x228>)
 80026bc:	4013      	ands	r3, r2
 80026be:	d504      	bpl.n	80026ca <updateTimerState+0x1c6>
 80026c0:	3b01      	subs	r3, #1
 80026c2:	2204      	movs	r2, #4
 80026c4:	4252      	negs	r2, r2
 80026c6:	4313      	orrs	r3, r2
 80026c8:	3301      	adds	r3, #1
 80026ca:	b2da      	uxtb	r2, r3
 80026cc:	4b13      	ldr	r3, [pc, #76]	; (800271c <updateTimerState+0x218>)
 80026ce:	705a      	strb	r2, [r3, #1]
		if (timerVars.fieldBeingSet != 0) {
 80026d0:	4b12      	ldr	r3, [pc, #72]	; (800271c <updateTimerState+0x218>)
 80026d2:	785b      	ldrb	r3, [r3, #1]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d016      	beq.n	8002706 <updateTimerState+0x202>
			timerVars.isBeingSet = 1;
 80026d8:	4b10      	ldr	r3, [pc, #64]	; (800271c <updateTimerState+0x218>)
 80026da:	2201      	movs	r2, #1
 80026dc:	701a      	strb	r2, [r3, #0]
			timerVars.isSet = 0;
 80026de:	4b0f      	ldr	r3, [pc, #60]	; (800271c <updateTimerState+0x218>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	709a      	strb	r2, [r3, #2]
			if (timerVars.fieldBeingSet == 1) {
 80026e4:	4b0d      	ldr	r3, [pc, #52]	; (800271c <updateTimerState+0x218>)
 80026e6:	785b      	ldrb	r3, [r3, #1]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d114      	bne.n	8002716 <updateTimerState+0x212>
				timerVars.timeToSet->sec = 0;
 80026ec:	4b0b      	ldr	r3, [pc, #44]	; (800271c <updateTimerState+0x218>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	709a      	strb	r2, [r3, #2]
				timerVars.timeToSet->min = 0;
 80026f4:	4b09      	ldr	r3, [pc, #36]	; (800271c <updateTimerState+0x218>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	705a      	strb	r2, [r3, #1]
				timerVars.timeToSet->hr = 0;
 80026fc:	4b07      	ldr	r3, [pc, #28]	; (800271c <updateTimerState+0x218>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	701a      	strb	r2, [r3, #0]
}
 8002704:	e007      	b.n	8002716 <updateTimerState+0x212>
			timerVars.isBeingSet = 0;
 8002706:	4b05      	ldr	r3, [pc, #20]	; (800271c <updateTimerState+0x218>)
 8002708:	2200      	movs	r2, #0
 800270a:	701a      	strb	r2, [r3, #0]
			timerVars.isSet = 1;
 800270c:	4b03      	ldr	r3, [pc, #12]	; (800271c <updateTimerState+0x218>)
 800270e:	2201      	movs	r2, #1
 8002710:	709a      	strb	r2, [r3, #2]
}
 8002712:	e000      	b.n	8002716 <updateTimerState+0x212>
		}
 8002714:	46c0      	nop			; (mov r8, r8)
}
 8002716:	46c0      	nop			; (mov r8, r8)
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	200000ec 	.word	0x200000ec
 8002720:	200001b8 	.word	0x200001b8
 8002724:	2000015c 	.word	0x2000015c
 8002728:	200001bc 	.word	0x200001bc
 800272c:	80000003 	.word	0x80000003

08002730 <updateAlarmState>:
 *   should change to make it possible to have multiple alarms
 *   also pick alarms that repeat and alarms that don't
 *   need to make changes to ui to make this happen
 *   currently just does old behavior (only 1 alarm)
 */
void updateAlarmState() {
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
	if (buttons.is2Pressed && alarmVars.isBeingSet) {
 8002736:	4b8b      	ldr	r3, [pc, #556]	; (8002964 <updateAlarmState+0x234>)
 8002738:	785b      	ldrb	r3, [r3, #1]
 800273a:	b2db      	uxtb	r3, r3
 800273c:	2b00      	cmp	r3, #0
 800273e:	d053      	beq.n	80027e8 <updateAlarmState+0xb8>
 8002740:	4b89      	ldr	r3, [pc, #548]	; (8002968 <updateAlarmState+0x238>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d04f      	beq.n	80027e8 <updateAlarmState+0xb8>
		buttons.is2Pressed = 0;
 8002748:	4b86      	ldr	r3, [pc, #536]	; (8002964 <updateAlarmState+0x234>)
 800274a:	2200      	movs	r2, #0
 800274c:	705a      	strb	r2, [r3, #1]
		updateFace.alarm = 1;
 800274e:	4b87      	ldr	r3, [pc, #540]	; (800296c <updateAlarmState+0x23c>)
 8002750:	2201      	movs	r2, #1
 8002752:	709a      	strb	r2, [r3, #2]

		// change fields up
		switch (alarmVars.fieldBeingSet) {
 8002754:	4b84      	ldr	r3, [pc, #528]	; (8002968 <updateAlarmState+0x238>)
 8002756:	785b      	ldrb	r3, [r3, #1]
 8002758:	2b02      	cmp	r3, #2
 800275a:	d017      	beq.n	800278c <updateAlarmState+0x5c>
 800275c:	dc02      	bgt.n	8002764 <updateAlarmState+0x34>
 800275e:	2b01      	cmp	r3, #1
 8002760:	d005      	beq.n	800276e <updateAlarmState+0x3e>
			case 1: alarmVars.alarmToSet->sec = (alarmVars.alarmToSet->sec + 1) % 60; break;
			case 2: alarmVars.alarmToSet->min = (alarmVars.alarmToSet->min + 1) % 60; break;
			case 3: alarmVars.alarmToSet->hr = (alarmVars.alarmToSet->hr + 1) % 24; break;
			case 4: alarmVars.alarmToSet->weekday = (alarmVars.alarmToSet->weekday + 1) % 7 + 1; break;
			default: break;
 8002762:	e042      	b.n	80027ea <updateAlarmState+0xba>
		switch (alarmVars.fieldBeingSet) {
 8002764:	2b03      	cmp	r3, #3
 8002766:	d020      	beq.n	80027aa <updateAlarmState+0x7a>
 8002768:	2b04      	cmp	r3, #4
 800276a:	d02d      	beq.n	80027c8 <updateAlarmState+0x98>
			default: break;
 800276c:	e03d      	b.n	80027ea <updateAlarmState+0xba>
			case 1: alarmVars.alarmToSet->sec = (alarmVars.alarmToSet->sec + 1) % 60; break;
 800276e:	4b7e      	ldr	r3, [pc, #504]	; (8002968 <updateAlarmState+0x238>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	789b      	ldrb	r3, [r3, #2]
 8002774:	3301      	adds	r3, #1
 8002776:	213c      	movs	r1, #60	; 0x3c
 8002778:	0018      	movs	r0, r3
 800277a:	f7fd fe3d 	bl	80003f8 <__aeabi_idivmod>
 800277e:	000b      	movs	r3, r1
 8002780:	001a      	movs	r2, r3
 8002782:	4b79      	ldr	r3, [pc, #484]	; (8002968 <updateAlarmState+0x238>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	b2d2      	uxtb	r2, r2
 8002788:	709a      	strb	r2, [r3, #2]
 800278a:	e02e      	b.n	80027ea <updateAlarmState+0xba>
			case 2: alarmVars.alarmToSet->min = (alarmVars.alarmToSet->min + 1) % 60; break;
 800278c:	4b76      	ldr	r3, [pc, #472]	; (8002968 <updateAlarmState+0x238>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	785b      	ldrb	r3, [r3, #1]
 8002792:	3301      	adds	r3, #1
 8002794:	213c      	movs	r1, #60	; 0x3c
 8002796:	0018      	movs	r0, r3
 8002798:	f7fd fe2e 	bl	80003f8 <__aeabi_idivmod>
 800279c:	000b      	movs	r3, r1
 800279e:	001a      	movs	r2, r3
 80027a0:	4b71      	ldr	r3, [pc, #452]	; (8002968 <updateAlarmState+0x238>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	b2d2      	uxtb	r2, r2
 80027a6:	705a      	strb	r2, [r3, #1]
 80027a8:	e01f      	b.n	80027ea <updateAlarmState+0xba>
			case 3: alarmVars.alarmToSet->hr = (alarmVars.alarmToSet->hr + 1) % 24; break;
 80027aa:	4b6f      	ldr	r3, [pc, #444]	; (8002968 <updateAlarmState+0x238>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	3301      	adds	r3, #1
 80027b2:	2118      	movs	r1, #24
 80027b4:	0018      	movs	r0, r3
 80027b6:	f7fd fe1f 	bl	80003f8 <__aeabi_idivmod>
 80027ba:	000b      	movs	r3, r1
 80027bc:	001a      	movs	r2, r3
 80027be:	4b6a      	ldr	r3, [pc, #424]	; (8002968 <updateAlarmState+0x238>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	b2d2      	uxtb	r2, r2
 80027c4:	701a      	strb	r2, [r3, #0]
 80027c6:	e010      	b.n	80027ea <updateAlarmState+0xba>
			case 4: alarmVars.alarmToSet->weekday = (alarmVars.alarmToSet->weekday + 1) % 7 + 1; break;
 80027c8:	4b67      	ldr	r3, [pc, #412]	; (8002968 <updateAlarmState+0x238>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	78db      	ldrb	r3, [r3, #3]
 80027ce:	3301      	adds	r3, #1
 80027d0:	2107      	movs	r1, #7
 80027d2:	0018      	movs	r0, r3
 80027d4:	f7fd fe10 	bl	80003f8 <__aeabi_idivmod>
 80027d8:	000b      	movs	r3, r1
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	4b62      	ldr	r3, [pc, #392]	; (8002968 <updateAlarmState+0x238>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	3201      	adds	r2, #1
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	70da      	strb	r2, [r3, #3]
 80027e6:	e000      	b.n	80027ea <updateAlarmState+0xba>
		}
	}
 80027e8:	46c0      	nop			; (mov r8, r8)
	if (buttons.is3Pressed && alarmVars.isBeingSet) {
 80027ea:	4b5e      	ldr	r3, [pc, #376]	; (8002964 <updateAlarmState+0x234>)
 80027ec:	789b      	ldrb	r3, [r3, #2]
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d05a      	beq.n	80028aa <updateAlarmState+0x17a>
 80027f4:	4b5c      	ldr	r3, [pc, #368]	; (8002968 <updateAlarmState+0x238>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d056      	beq.n	80028aa <updateAlarmState+0x17a>
		buttons.is3Pressed = 0;
 80027fc:	4b59      	ldr	r3, [pc, #356]	; (8002964 <updateAlarmState+0x234>)
 80027fe:	2200      	movs	r2, #0
 8002800:	709a      	strb	r2, [r3, #2]
		updateFace.alarm = 1;
 8002802:	4b5a      	ldr	r3, [pc, #360]	; (800296c <updateAlarmState+0x23c>)
 8002804:	2201      	movs	r2, #1
 8002806:	709a      	strb	r2, [r3, #2]

		// change fields down
		switch (alarmVars.fieldBeingSet) {
 8002808:	4b57      	ldr	r3, [pc, #348]	; (8002968 <updateAlarmState+0x238>)
 800280a:	785b      	ldrb	r3, [r3, #1]
 800280c:	2b02      	cmp	r3, #2
 800280e:	d019      	beq.n	8002844 <updateAlarmState+0x114>
 8002810:	dc02      	bgt.n	8002818 <updateAlarmState+0xe8>
 8002812:	2b01      	cmp	r3, #1
 8002814:	d005      	beq.n	8002822 <updateAlarmState+0xf2>
				break;
			case 4:
				if (alarmVars.alarmToSet->weekday == RTC_WEEKDAY_MONDAY) alarmVars.alarmToSet->weekday = RTC_WEEKDAY_SUNDAY;
				else alarmVars.alarmToSet->weekday--;
				break;
			default: break;
 8002816:	e049      	b.n	80028ac <updateAlarmState+0x17c>
		switch (alarmVars.fieldBeingSet) {
 8002818:	2b03      	cmp	r3, #3
 800281a:	d024      	beq.n	8002866 <updateAlarmState+0x136>
 800281c:	2b04      	cmp	r3, #4
 800281e:	d033      	beq.n	8002888 <updateAlarmState+0x158>
			default: break;
 8002820:	e044      	b.n	80028ac <updateAlarmState+0x17c>
				if (alarmVars.alarmToSet->sec == 0) alarmVars.alarmToSet->sec = 59;
 8002822:	4b51      	ldr	r3, [pc, #324]	; (8002968 <updateAlarmState+0x238>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	789b      	ldrb	r3, [r3, #2]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d104      	bne.n	8002836 <updateAlarmState+0x106>
 800282c:	4b4e      	ldr	r3, [pc, #312]	; (8002968 <updateAlarmState+0x238>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	223b      	movs	r2, #59	; 0x3b
 8002832:	709a      	strb	r2, [r3, #2]
				break;
 8002834:	e03a      	b.n	80028ac <updateAlarmState+0x17c>
				else alarmVars.alarmToSet->sec--;
 8002836:	4b4c      	ldr	r3, [pc, #304]	; (8002968 <updateAlarmState+0x238>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	789a      	ldrb	r2, [r3, #2]
 800283c:	3a01      	subs	r2, #1
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	709a      	strb	r2, [r3, #2]
				break;
 8002842:	e033      	b.n	80028ac <updateAlarmState+0x17c>
				if (alarmVars.alarmToSet->min == 0) alarmVars.alarmToSet->min = 59;
 8002844:	4b48      	ldr	r3, [pc, #288]	; (8002968 <updateAlarmState+0x238>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	785b      	ldrb	r3, [r3, #1]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d104      	bne.n	8002858 <updateAlarmState+0x128>
 800284e:	4b46      	ldr	r3, [pc, #280]	; (8002968 <updateAlarmState+0x238>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	223b      	movs	r2, #59	; 0x3b
 8002854:	705a      	strb	r2, [r3, #1]
				break;
 8002856:	e029      	b.n	80028ac <updateAlarmState+0x17c>
				else alarmVars.alarmToSet->min--;
 8002858:	4b43      	ldr	r3, [pc, #268]	; (8002968 <updateAlarmState+0x238>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	785a      	ldrb	r2, [r3, #1]
 800285e:	3a01      	subs	r2, #1
 8002860:	b2d2      	uxtb	r2, r2
 8002862:	705a      	strb	r2, [r3, #1]
				break;
 8002864:	e022      	b.n	80028ac <updateAlarmState+0x17c>
				if (alarmVars.alarmToSet->hr == 0) alarmVars.alarmToSet->hr = 23;
 8002866:	4b40      	ldr	r3, [pc, #256]	; (8002968 <updateAlarmState+0x238>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d104      	bne.n	800287a <updateAlarmState+0x14a>
 8002870:	4b3d      	ldr	r3, [pc, #244]	; (8002968 <updateAlarmState+0x238>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	2217      	movs	r2, #23
 8002876:	701a      	strb	r2, [r3, #0]
				break;
 8002878:	e018      	b.n	80028ac <updateAlarmState+0x17c>
				else alarmVars.alarmToSet->hr--;
 800287a:	4b3b      	ldr	r3, [pc, #236]	; (8002968 <updateAlarmState+0x238>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	781a      	ldrb	r2, [r3, #0]
 8002880:	3a01      	subs	r2, #1
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	701a      	strb	r2, [r3, #0]
				break;
 8002886:	e011      	b.n	80028ac <updateAlarmState+0x17c>
				if (alarmVars.alarmToSet->weekday == RTC_WEEKDAY_MONDAY) alarmVars.alarmToSet->weekday = RTC_WEEKDAY_SUNDAY;
 8002888:	4b37      	ldr	r3, [pc, #220]	; (8002968 <updateAlarmState+0x238>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	78db      	ldrb	r3, [r3, #3]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d104      	bne.n	800289c <updateAlarmState+0x16c>
 8002892:	4b35      	ldr	r3, [pc, #212]	; (8002968 <updateAlarmState+0x238>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	2207      	movs	r2, #7
 8002898:	70da      	strb	r2, [r3, #3]
				break;
 800289a:	e007      	b.n	80028ac <updateAlarmState+0x17c>
				else alarmVars.alarmToSet->weekday--;
 800289c:	4b32      	ldr	r3, [pc, #200]	; (8002968 <updateAlarmState+0x238>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	78da      	ldrb	r2, [r3, #3]
 80028a2:	3a01      	subs	r2, #1
 80028a4:	b2d2      	uxtb	r2, r2
 80028a6:	70da      	strb	r2, [r3, #3]
				break;
 80028a8:	e000      	b.n	80028ac <updateAlarmState+0x17c>
		}
	}
 80028aa:	46c0      	nop			; (mov r8, r8)
	if (buttons.is4Pressed) {
 80028ac:	4b2d      	ldr	r3, [pc, #180]	; (8002964 <updateAlarmState+0x234>)
 80028ae:	78db      	ldrb	r3, [r3, #3]
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d051      	beq.n	800295a <updateAlarmState+0x22a>
		buttons.is4Pressed = 0;
 80028b6:	4b2b      	ldr	r3, [pc, #172]	; (8002964 <updateAlarmState+0x234>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	70da      	strb	r2, [r3, #3]
		updateFace.alarm = 1;
 80028bc:	4b2b      	ldr	r3, [pc, #172]	; (800296c <updateAlarmState+0x23c>)
 80028be:	2201      	movs	r2, #1
 80028c0:	709a      	strb	r2, [r3, #2]

		if (isAlarmRunning == 0) {
 80028c2:	4b2b      	ldr	r3, [pc, #172]	; (8002970 <updateAlarmState+0x240>)
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d13c      	bne.n	8002946 <updateAlarmState+0x216>
			// toggle between fields
			alarmVars.fieldBeingSet = (alarmVars.fieldBeingSet + 1) % (NUM_ALARMFIELDS + 1);
 80028cc:	4b26      	ldr	r3, [pc, #152]	; (8002968 <updateAlarmState+0x238>)
 80028ce:	785b      	ldrb	r3, [r3, #1]
 80028d0:	3301      	adds	r3, #1
 80028d2:	2105      	movs	r1, #5
 80028d4:	0018      	movs	r0, r3
 80028d6:	f7fd fd8f 	bl	80003f8 <__aeabi_idivmod>
 80028da:	000b      	movs	r3, r1
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	4b22      	ldr	r3, [pc, #136]	; (8002968 <updateAlarmState+0x238>)
 80028e0:	705a      	strb	r2, [r3, #1]
			if (alarmVars.fieldBeingSet != 0) {
 80028e2:	4b21      	ldr	r3, [pc, #132]	; (8002968 <updateAlarmState+0x238>)
 80028e4:	785b      	ldrb	r3, [r3, #1]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d021      	beq.n	800292e <updateAlarmState+0x1fe>
				alarmVars.isBeingSet = 1;
 80028ea:	4b1f      	ldr	r3, [pc, #124]	; (8002968 <updateAlarmState+0x238>)
 80028ec:	2201      	movs	r2, #1
 80028ee:	701a      	strb	r2, [r3, #0]
				if (alarmVars.fieldBeingSet == 1) {
 80028f0:	4b1d      	ldr	r3, [pc, #116]	; (8002968 <updateAlarmState+0x238>)
 80028f2:	785b      	ldrb	r3, [r3, #1]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d130      	bne.n	800295a <updateAlarmState+0x22a>
					struct dates *d;
					struct times *t;
					getDateTime(d, t);
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	0011      	movs	r1, r2
 80028fe:	0018      	movs	r0, r3
 8002900:	f7fe ff72 	bl	80017e8 <getDateTime>
					alarmVars.alarmToSet->sec = t->sec;
 8002904:	4b18      	ldr	r3, [pc, #96]	; (8002968 <updateAlarmState+0x238>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	7892      	ldrb	r2, [r2, #2]
 800290c:	709a      	strb	r2, [r3, #2]
					alarmVars.alarmToSet->min = t->min;
 800290e:	4b16      	ldr	r3, [pc, #88]	; (8002968 <updateAlarmState+0x238>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	7852      	ldrb	r2, [r2, #1]
 8002916:	705a      	strb	r2, [r3, #1]
					alarmVars.alarmToSet->hr = t->hr;
 8002918:	4b13      	ldr	r3, [pc, #76]	; (8002968 <updateAlarmState+0x238>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	7812      	ldrb	r2, [r2, #0]
 8002920:	701a      	strb	r2, [r3, #0]
					alarmVars.alarmToSet->weekday = d->weekday;
 8002922:	4b11      	ldr	r3, [pc, #68]	; (8002968 <updateAlarmState+0x238>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	7912      	ldrb	r2, [r2, #4]
 800292a:	70da      	strb	r2, [r3, #3]
			// stop and clear alarm hw
			isAlarmRunning = 0;
			HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
		}
	}
}
 800292c:	e015      	b.n	800295a <updateAlarmState+0x22a>
				alarmVars.isBeingSet = 0;
 800292e:	4b0e      	ldr	r3, [pc, #56]	; (8002968 <updateAlarmState+0x238>)
 8002930:	2200      	movs	r2, #0
 8002932:	701a      	strb	r2, [r3, #0]
				isAlarmRunning = 1;
 8002934:	4b0e      	ldr	r3, [pc, #56]	; (8002970 <updateAlarmState+0x240>)
 8002936:	2201      	movs	r2, #1
 8002938:	701a      	strb	r2, [r3, #0]
				setAlarm(alarmVars.alarmToSet);
 800293a:	4b0b      	ldr	r3, [pc, #44]	; (8002968 <updateAlarmState+0x238>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	0018      	movs	r0, r3
 8002940:	f7fe feb2 	bl	80016a8 <setAlarm>
}
 8002944:	e009      	b.n	800295a <updateAlarmState+0x22a>
			isAlarmRunning = 0;
 8002946:	4b0a      	ldr	r3, [pc, #40]	; (8002970 <updateAlarmState+0x240>)
 8002948:	2200      	movs	r2, #0
 800294a:	701a      	strb	r2, [r3, #0]
			HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800294c:	2380      	movs	r3, #128	; 0x80
 800294e:	005a      	lsls	r2, r3, #1
 8002950:	4b08      	ldr	r3, [pc, #32]	; (8002974 <updateAlarmState+0x244>)
 8002952:	0011      	movs	r1, r2
 8002954:	0018      	movs	r0, r3
 8002956:	f003 fdab 	bl	80064b0 <HAL_RTC_DeactivateAlarm>
}
 800295a:	46c0      	nop			; (mov r8, r8)
 800295c:	46bd      	mov	sp, r7
 800295e:	b002      	add	sp, #8
 8002960:	bd80      	pop	{r7, pc}
 8002962:	46c0      	nop			; (mov r8, r8)
 8002964:	200001b8 	.word	0x200001b8
 8002968:	200000f4 	.word	0x200000f4
 800296c:	2000015c 	.word	0x2000015c
 8002970:	20000161 	.word	0x20000161
 8002974:	20000194 	.word	0x20000194

08002978 <updateStopwatchState>:
 * notes:
 *   using lptim now, but might need to change to use other timer as lptim might be used by adc
 *     to take regular measurements of the battery
 *   would just have to modify functions in timers.c
 */
void updateStopwatchState() {
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
	if (buttons.is2Pressed) {	// start/stop
 800297c:	4b20      	ldr	r3, [pc, #128]	; (8002a00 <updateStopwatchState+0x88>)
 800297e:	785b      	ldrb	r3, [r3, #1]
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d015      	beq.n	80029b2 <updateStopwatchState+0x3a>
		buttons.is2Pressed = 0;
 8002986:	4b1e      	ldr	r3, [pc, #120]	; (8002a00 <updateStopwatchState+0x88>)
 8002988:	2200      	movs	r2, #0
 800298a:	705a      	strb	r2, [r3, #1]
		updateFace.stopwatch = 1;
 800298c:	4b1d      	ldr	r3, [pc, #116]	; (8002a04 <updateStopwatchState+0x8c>)
 800298e:	2201      	movs	r2, #1
 8002990:	70da      	strb	r2, [r3, #3]

		if (isStopwatchRunning == 0) {
 8002992:	4b1d      	ldr	r3, [pc, #116]	; (8002a08 <updateStopwatchState+0x90>)
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b00      	cmp	r3, #0
 800299a:	d105      	bne.n	80029a8 <updateStopwatchState+0x30>
			isStopwatchRunning = 1;
 800299c:	4b1a      	ldr	r3, [pc, #104]	; (8002a08 <updateStopwatchState+0x90>)
 800299e:	2201      	movs	r2, #1
 80029a0:	701a      	strb	r2, [r3, #0]
			runStopwatch();
 80029a2:	f001 f843 	bl	8003a2c <runStopwatch>
 80029a6:	e004      	b.n	80029b2 <updateStopwatchState+0x3a>
		}
		else {
			isStopwatchRunning = 0;
 80029a8:	4b17      	ldr	r3, [pc, #92]	; (8002a08 <updateStopwatchState+0x90>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	701a      	strb	r2, [r3, #0]
			pauseStopwatch();
 80029ae:	f001 f84b 	bl	8003a48 <pauseStopwatch>
		}
	}
	if (buttons.is3Pressed) {
 80029b2:	4b13      	ldr	r3, [pc, #76]	; (8002a00 <updateStopwatchState+0x88>)
 80029b4:	789b      	ldrb	r3, [r3, #2]
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00d      	beq.n	80029d8 <updateStopwatchState+0x60>
		buttons.is3Pressed = 0;
 80029bc:	4b10      	ldr	r3, [pc, #64]	; (8002a00 <updateStopwatchState+0x88>)
 80029be:	2200      	movs	r2, #0
 80029c0:	709a      	strb	r2, [r3, #2]
		updateFace.stopwatch = 1;
 80029c2:	4b10      	ldr	r3, [pc, #64]	; (8002a04 <updateStopwatchState+0x8c>)
 80029c4:	2201      	movs	r2, #1
 80029c6:	70da      	strb	r2, [r3, #3]

		// pull data and set lap
		stopwatchVars.lapPrev = stopwatchVars.lapCurrent;
 80029c8:	4b10      	ldr	r3, [pc, #64]	; (8002a0c <updateStopwatchState+0x94>)
 80029ca:	685a      	ldr	r2, [r3, #4]
 80029cc:	4b0f      	ldr	r3, [pc, #60]	; (8002a0c <updateStopwatchState+0x94>)
 80029ce:	601a      	str	r2, [r3, #0]
		stopwatchVars.lapCurrent = stopwatchCNT;		// did this variable get changed to something else?
 80029d0:	4b0f      	ldr	r3, [pc, #60]	; (8002a10 <updateStopwatchState+0x98>)
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	4b0d      	ldr	r3, [pc, #52]	; (8002a0c <updateStopwatchState+0x94>)
 80029d6:	605a      	str	r2, [r3, #4]
	}
	if (buttons.is4Pressed) {
 80029d8:	4b09      	ldr	r3, [pc, #36]	; (8002a00 <updateStopwatchState+0x88>)
 80029da:	78db      	ldrb	r3, [r3, #3]
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00a      	beq.n	80029f8 <updateStopwatchState+0x80>
		buttons.is4Pressed = 0;
 80029e2:	4b07      	ldr	r3, [pc, #28]	; (8002a00 <updateStopwatchState+0x88>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	70da      	strb	r2, [r3, #3]
		updateFace.stopwatch = 1;
 80029e8:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <updateStopwatchState+0x8c>)
 80029ea:	2201      	movs	r2, #1
 80029ec:	70da      	strb	r2, [r3, #3]

		// clear stopwatch hw
		isStopwatchRunning = 0;
 80029ee:	4b06      	ldr	r3, [pc, #24]	; (8002a08 <updateStopwatchState+0x90>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	701a      	strb	r2, [r3, #0]
		clearStopwatch();
 80029f4:	f001 f834 	bl	8003a60 <clearStopwatch>
	}
}
 80029f8:	46c0      	nop			; (mov r8, r8)
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	46c0      	nop			; (mov r8, r8)
 8002a00:	200001b8 	.word	0x200001b8
 8002a04:	2000015c 	.word	0x2000015c
 8002a08:	20000160 	.word	0x20000160
 8002a0c:	200000fc 	.word	0x200000fc
 8002a10:	20000114 	.word	0x20000114

08002a14 <updateDisplay>:

// update screen based on global variables
// going in main, so it's executing in a while loop
//   software interrupt on flag so that this doesn't run all the time?
void updateDisplay(SPI_HandleTypeDef *hspi) {
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
	// change faces
	if (isFaceBeingChanged == 1) {
 8002a1c:	4b50      	ldr	r3, [pc, #320]	; (8002b60 <updateDisplay+0x14c>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d155      	bne.n	8002ad0 <updateDisplay+0xbc>
		isFaceBeingChanged = 0;
 8002a24:	4b4e      	ldr	r3, [pc, #312]	; (8002b60 <updateDisplay+0x14c>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	701a      	strb	r2, [r3, #0]

		// drawing titles and boxes that won't be rewritten during normal operation within
		// a specific face (titles and buttons)
		if (faceOnDisplay == faceClock) {
 8002a2a:	4b4e      	ldr	r3, [pc, #312]	; (8002b64 <updateDisplay+0x150>)
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10b      	bne.n	8002a4a <updateDisplay+0x36>
			clearScreen(ST77XX_CYAN, hspi);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a4c      	ldr	r2, [pc, #304]	; (8002b68 <updateDisplay+0x154>)
 8002a36:	0019      	movs	r1, r3
 8002a38:	0010      	movs	r0, r2
 8002a3a:	f7fe fd9d 	bl	8001578 <clearScreen>
			drawTitle("clock", hspi);
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	4b4a      	ldr	r3, [pc, #296]	; (8002b6c <updateDisplay+0x158>)
 8002a42:	0011      	movs	r1, r2
 8002a44:	0018      	movs	r0, r3
 8002a46:	f000 fb79 	bl	800313c <drawTitle>
		}
		if (faceOnDisplay == faceTimer) {
 8002a4a:	4b46      	ldr	r3, [pc, #280]	; (8002b64 <updateDisplay+0x150>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d10c      	bne.n	8002a6c <updateDisplay+0x58>
			clearScreen(ST77XX_GREEN, hspi);
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	23fc      	movs	r3, #252	; 0xfc
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	0011      	movs	r1, r2
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f7fe fd8c 	bl	8001578 <clearScreen>
			drawTitle("timer", hspi);
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	4b43      	ldr	r3, [pc, #268]	; (8002b70 <updateDisplay+0x15c>)
 8002a64:	0011      	movs	r1, r2
 8002a66:	0018      	movs	r0, r3
 8002a68:	f000 fb68 	bl	800313c <drawTitle>
		}
		if (faceOnDisplay == faceAlarm) {
 8002a6c:	4b3d      	ldr	r3, [pc, #244]	; (8002b64 <updateDisplay+0x150>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d10b      	bne.n	8002a8c <updateDisplay+0x78>
			clearScreen(ST77XX_MAGENTA, hspi);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a3f      	ldr	r2, [pc, #252]	; (8002b74 <updateDisplay+0x160>)
 8002a78:	0019      	movs	r1, r3
 8002a7a:	0010      	movs	r0, r2
 8002a7c:	f7fe fd7c 	bl	8001578 <clearScreen>
			drawTitle("alarm", hspi);
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	4b3d      	ldr	r3, [pc, #244]	; (8002b78 <updateDisplay+0x164>)
 8002a84:	0011      	movs	r1, r2
 8002a86:	0018      	movs	r0, r3
 8002a88:	f000 fb58 	bl	800313c <drawTitle>
		}
		if (faceOnDisplay == faceStopwatch) {
 8002a8c:	4b35      	ldr	r3, [pc, #212]	; (8002b64 <updateDisplay+0x150>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	2b03      	cmp	r3, #3
 8002a92:	d10b      	bne.n	8002aac <updateDisplay+0x98>
			clearScreen(ST77XX_YELLOW, hspi);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a39      	ldr	r2, [pc, #228]	; (8002b7c <updateDisplay+0x168>)
 8002a98:	0019      	movs	r1, r3
 8002a9a:	0010      	movs	r0, r2
 8002a9c:	f7fe fd6c 	bl	8001578 <clearScreen>
			drawTitle("stopwatch", hspi);
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	4b37      	ldr	r3, [pc, #220]	; (8002b80 <updateDisplay+0x16c>)
 8002aa4:	0011      	movs	r1, r2
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	f000 fb48 	bl	800313c <drawTitle>
		}

		drawButton(WIDTH/4-5, HEIGHT-20, hspi);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	001a      	movs	r2, r3
 8002ab0:	218c      	movs	r1, #140	; 0x8c
 8002ab2:	201b      	movs	r0, #27
 8002ab4:	f000 fafe 	bl	80030b4 <drawButton>
		drawButton(WIDTH/2-5, HEIGHT-20, hspi);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	001a      	movs	r2, r3
 8002abc:	218c      	movs	r1, #140	; 0x8c
 8002abe:	203b      	movs	r0, #59	; 0x3b
 8002ac0:	f000 faf8 	bl	80030b4 <drawButton>
		drawButton(WIDTH/4*3-5, HEIGHT-20, hspi);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	001a      	movs	r2, r3
 8002ac8:	218c      	movs	r1, #140	; 0x8c
 8002aca:	205b      	movs	r0, #91	; 0x5b
 8002acc:	f000 faf2 	bl	80030b4 <drawButton>
	}

	// update clock face
	if (faceOnDisplay == faceClock) {
 8002ad0:	4b24      	ldr	r3, [pc, #144]	; (8002b64 <updateDisplay+0x150>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10c      	bne.n	8002af2 <updateDisplay+0xde>
		if (updateFace.clock == 1) {
 8002ad8:	4b2a      	ldr	r3, [pc, #168]	; (8002b84 <updateDisplay+0x170>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d139      	bne.n	8002b56 <updateDisplay+0x142>
			updateFace.clock = 0;
 8002ae2:	4b28      	ldr	r3, [pc, #160]	; (8002b84 <updateDisplay+0x170>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	701a      	strb	r2, [r3, #0]
			updateClockDisplay(hspi);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	0018      	movs	r0, r3
 8002aec:	f000 f84c 	bl	8002b88 <updateClockDisplay>
		if (updateFace.stopwatch == 1) {
			updateFace.stopwatch = 0;
			updateStopwatchDisplay(hspi);
		}
	}
}
 8002af0:	e031      	b.n	8002b56 <updateDisplay+0x142>
	else if (faceOnDisplay == faceTimer) {
 8002af2:	4b1c      	ldr	r3, [pc, #112]	; (8002b64 <updateDisplay+0x150>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d10c      	bne.n	8002b14 <updateDisplay+0x100>
		if (updateFace.timer == 1) {
 8002afa:	4b22      	ldr	r3, [pc, #136]	; (8002b84 <updateDisplay+0x170>)
 8002afc:	785b      	ldrb	r3, [r3, #1]
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d128      	bne.n	8002b56 <updateDisplay+0x142>
			updateFace.timer = 0;
 8002b04:	4b1f      	ldr	r3, [pc, #124]	; (8002b84 <updateDisplay+0x170>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	705a      	strb	r2, [r3, #1]
			updateTimerDisplay(hspi);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	f000 f8d9 	bl	8002cc4 <updateTimerDisplay>
}
 8002b12:	e020      	b.n	8002b56 <updateDisplay+0x142>
	else if (faceOnDisplay == faceAlarm) {
 8002b14:	4b13      	ldr	r3, [pc, #76]	; (8002b64 <updateDisplay+0x150>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d10c      	bne.n	8002b36 <updateDisplay+0x122>
		if (updateFace.alarm == 1) {
 8002b1c:	4b19      	ldr	r3, [pc, #100]	; (8002b84 <updateDisplay+0x170>)
 8002b1e:	789b      	ldrb	r3, [r3, #2]
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d117      	bne.n	8002b56 <updateDisplay+0x142>
			updateFace.alarm = 0;
 8002b26:	4b17      	ldr	r3, [pc, #92]	; (8002b84 <updateDisplay+0x170>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	709a      	strb	r2, [r3, #2]
			updateAlarmDisplay(hspi);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	0018      	movs	r0, r3
 8002b30:	f000 f9b8 	bl	8002ea4 <updateAlarmDisplay>
}
 8002b34:	e00f      	b.n	8002b56 <updateDisplay+0x142>
	else if (faceOnDisplay == faceStopwatch) {
 8002b36:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <updateDisplay+0x150>)
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	2b03      	cmp	r3, #3
 8002b3c:	d10b      	bne.n	8002b56 <updateDisplay+0x142>
		if (updateFace.stopwatch == 1) {
 8002b3e:	4b11      	ldr	r3, [pc, #68]	; (8002b84 <updateDisplay+0x170>)
 8002b40:	78db      	ldrb	r3, [r3, #3]
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d106      	bne.n	8002b56 <updateDisplay+0x142>
			updateFace.stopwatch = 0;
 8002b48:	4b0e      	ldr	r3, [pc, #56]	; (8002b84 <updateDisplay+0x170>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	70da      	strb	r2, [r3, #3]
			updateStopwatchDisplay(hspi);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	0018      	movs	r0, r3
 8002b52:	f000 fa61 	bl	8003018 <updateStopwatchDisplay>
}
 8002b56:	46c0      	nop			; (mov r8, r8)
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	b002      	add	sp, #8
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	46c0      	nop			; (mov r8, r8)
 8002b60:	20000104 	.word	0x20000104
 8002b64:	20000105 	.word	0x20000105
 8002b68:	000007ff 	.word	0x000007ff
 8002b6c:	080084ec 	.word	0x080084ec
 8002b70:	080084f4 	.word	0x080084f4
 8002b74:	0000f81f 	.word	0x0000f81f
 8002b78:	080084fc 	.word	0x080084fc
 8002b7c:	0000ffe0 	.word	0x0000ffe0
 8002b80:	08008504 	.word	0x08008504
 8002b84:	2000015c 	.word	0x2000015c

08002b88 <updateClockDisplay>:

void updateClockDisplay(SPI_HandleTypeDef *hspi) {
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
	struct dates *currentDate;
	struct times *currentTime;

	if (clockVars.isBeingSet == 0) {
 8002b90:	4b41      	ldr	r3, [pc, #260]	; (8002c98 <updateClockDisplay+0x110>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d11f      	bne.n	8002bd8 <updateClockDisplay+0x50>
		getDateTime(currentDate, currentTime);
 8002b98:	68ba      	ldr	r2, [r7, #8]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	0011      	movs	r1, r2
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	f7fe fe22 	bl	80017e8 <getDateTime>
		drawClock(currentDate, currentTime, hspi);
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	68b9      	ldr	r1, [r7, #8]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	0018      	movs	r0, r3
 8002bac:	f000 fb46 	bl	800323c <drawClock>

		setTextSize(1);
 8002bb0:	2001      	movs	r0, #1
 8002bb2:	f7fe fcc1 	bl	8001538 <setTextSize>
		// clear line that says "setting ___"
		clearTextLine(52, hspi);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	0019      	movs	r1, r3
 8002bba:	2034      	movs	r0, #52	; 0x34
 8002bbc:	f7fe f904 	bl	8000dc8 <clearTextLine>

		// draw button text
		clearTextLine(HEIGHT-28, hspi);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	0019      	movs	r1, r3
 8002bc4:	2084      	movs	r0, #132	; 0x84
 8002bc6:	f7fe f8ff 	bl	8000dc8 <clearTextLine>
		drawCenteredText(WIDTH*3/4, HEIGHT-28, "set", hspi);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a33      	ldr	r2, [pc, #204]	; (8002c9c <updateClockDisplay+0x114>)
 8002bce:	2184      	movs	r1, #132	; 0x84
 8002bd0:	2060      	movs	r0, #96	; 0x60
 8002bd2:	f7fe f897 	bl	8000d04 <drawCenteredText>
			default: break;
		}

		drawClock(clockVars.dateToSet, clockVars.timeToSet, hspi);
	}
}
 8002bd6:	e05a      	b.n	8002c8e <updateClockDisplay+0x106>
	else if (clockVars.isBeingSet == 1) {
 8002bd8:	4b2f      	ldr	r3, [pc, #188]	; (8002c98 <updateClockDisplay+0x110>)
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d156      	bne.n	8002c8e <updateClockDisplay+0x106>
		setTextSize(1);
 8002be0:	2001      	movs	r0, #1
 8002be2:	f7fe fca9 	bl	8001538 <setTextSize>
		clearTextLine(HEIGHT-28, hspi);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	0019      	movs	r1, r3
 8002bea:	2084      	movs	r0, #132	; 0x84
 8002bec:	f7fe f8ec 	bl	8000dc8 <clearTextLine>
		drawCenteredText(WIDTH/4, HEIGHT-28, "up", hspi);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a2b      	ldr	r2, [pc, #172]	; (8002ca0 <updateClockDisplay+0x118>)
 8002bf4:	2184      	movs	r1, #132	; 0x84
 8002bf6:	2020      	movs	r0, #32
 8002bf8:	f7fe f884 	bl	8000d04 <drawCenteredText>
		drawCenteredText(WIDTH/2, HEIGHT-28, "down", hspi);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a29      	ldr	r2, [pc, #164]	; (8002ca4 <updateClockDisplay+0x11c>)
 8002c00:	2184      	movs	r1, #132	; 0x84
 8002c02:	2040      	movs	r0, #64	; 0x40
 8002c04:	f7fe f87e 	bl	8000d04 <drawCenteredText>
		drawCenteredText(WIDTH*3/4, HEIGHT-28, "change", hspi);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a27      	ldr	r2, [pc, #156]	; (8002ca8 <updateClockDisplay+0x120>)
 8002c0c:	2184      	movs	r1, #132	; 0x84
 8002c0e:	2060      	movs	r0, #96	; 0x60
 8002c10:	f7fe f878 	bl	8000d04 <drawCenteredText>
		clearTextLine(52, hspi);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	0019      	movs	r1, r3
 8002c18:	2034      	movs	r0, #52	; 0x34
 8002c1a:	f7fe f8d5 	bl	8000dc8 <clearTextLine>
		setTextSize(1);
 8002c1e:	2001      	movs	r0, #1
 8002c20:	f7fe fc8a 	bl	8001538 <setTextSize>
		switch (clockVars.fieldBeingSet) {
 8002c24:	4b1c      	ldr	r3, [pc, #112]	; (8002c98 <updateClockDisplay+0x110>)
 8002c26:	785b      	ldrb	r3, [r3, #1]
 8002c28:	2b05      	cmp	r3, #5
 8002c2a:	d827      	bhi.n	8002c7c <updateClockDisplay+0xf4>
 8002c2c:	009a      	lsls	r2, r3, #2
 8002c2e:	4b1f      	ldr	r3, [pc, #124]	; (8002cac <updateClockDisplay+0x124>)
 8002c30:	18d3      	adds	r3, r2, r3
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	469f      	mov	pc, r3
			case 1:	drawCenteredText(WIDTH/2, 52, "setting minute...", hspi); break;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a1d      	ldr	r2, [pc, #116]	; (8002cb0 <updateClockDisplay+0x128>)
 8002c3a:	2134      	movs	r1, #52	; 0x34
 8002c3c:	2040      	movs	r0, #64	; 0x40
 8002c3e:	f7fe f861 	bl	8000d04 <drawCenteredText>
 8002c42:	e01c      	b.n	8002c7e <updateClockDisplay+0xf6>
			case 2:	drawCenteredText(WIDTH/2, 52, "setting hour...", hspi);	break;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a1b      	ldr	r2, [pc, #108]	; (8002cb4 <updateClockDisplay+0x12c>)
 8002c48:	2134      	movs	r1, #52	; 0x34
 8002c4a:	2040      	movs	r0, #64	; 0x40
 8002c4c:	f7fe f85a 	bl	8000d04 <drawCenteredText>
 8002c50:	e015      	b.n	8002c7e <updateClockDisplay+0xf6>
			case 3: drawCenteredText(WIDTH/2, 52, "setting year...", hspi); break;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a18      	ldr	r2, [pc, #96]	; (8002cb8 <updateClockDisplay+0x130>)
 8002c56:	2134      	movs	r1, #52	; 0x34
 8002c58:	2040      	movs	r0, #64	; 0x40
 8002c5a:	f7fe f853 	bl	8000d04 <drawCenteredText>
 8002c5e:	e00e      	b.n	8002c7e <updateClockDisplay+0xf6>
			case 4: drawCenteredText(WIDTH/2, 52, "setting month...", hspi); break;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a16      	ldr	r2, [pc, #88]	; (8002cbc <updateClockDisplay+0x134>)
 8002c64:	2134      	movs	r1, #52	; 0x34
 8002c66:	2040      	movs	r0, #64	; 0x40
 8002c68:	f7fe f84c 	bl	8000d04 <drawCenteredText>
 8002c6c:	e007      	b.n	8002c7e <updateClockDisplay+0xf6>
			case 5: drawCenteredText(WIDTH/2, 52, "setting date...", hspi); break;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a13      	ldr	r2, [pc, #76]	; (8002cc0 <updateClockDisplay+0x138>)
 8002c72:	2134      	movs	r1, #52	; 0x34
 8002c74:	2040      	movs	r0, #64	; 0x40
 8002c76:	f7fe f845 	bl	8000d04 <drawCenteredText>
 8002c7a:	e000      	b.n	8002c7e <updateClockDisplay+0xf6>
			default: break;
 8002c7c:	46c0      	nop			; (mov r8, r8)
		drawClock(clockVars.dateToSet, clockVars.timeToSet, hspi);
 8002c7e:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <updateClockDisplay+0x110>)
 8002c80:	6858      	ldr	r0, [r3, #4]
 8002c82:	4b05      	ldr	r3, [pc, #20]	; (8002c98 <updateClockDisplay+0x110>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	0019      	movs	r1, r3
 8002c8a:	f000 fad7 	bl	800323c <drawClock>
}
 8002c8e:	46c0      	nop			; (mov r8, r8)
 8002c90:	46bd      	mov	sp, r7
 8002c92:	b004      	add	sp, #16
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	46c0      	nop			; (mov r8, r8)
 8002c98:	200000e0 	.word	0x200000e0
 8002c9c:	08008510 	.word	0x08008510
 8002ca0:	08008514 	.word	0x08008514
 8002ca4:	08008518 	.word	0x08008518
 8002ca8:	08008520 	.word	0x08008520
 8002cac:	08008b58 	.word	0x08008b58
 8002cb0:	08008528 	.word	0x08008528
 8002cb4:	0800853c 	.word	0x0800853c
 8002cb8:	0800854c 	.word	0x0800854c
 8002cbc:	0800855c 	.word	0x0800855c
 8002cc0:	08008570 	.word	0x08008570

08002cc4 <updateTimerDisplay>:

void updateTimerDisplay(SPI_HandleTypeDef *hspi) {
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
	struct times *currentTimer;
	uint32_t timerVal;

	if (timerVars.isBeingSet == 0) {
 8002ccc:	4b66      	ldr	r3, [pc, #408]	; (8002e68 <updateTimerDisplay+0x1a4>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d000      	beq.n	8002cd6 <updateTimerDisplay+0x12>
 8002cd4:	e07c      	b.n	8002dd0 <updateTimerDisplay+0x10c>
		if (timerVars.isSet == 0) {
 8002cd6:	4b64      	ldr	r3, [pc, #400]	; (8002e68 <updateTimerDisplay+0x1a4>)
 8002cd8:	789b      	ldrb	r3, [r3, #2]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d119      	bne.n	8002d12 <updateTimerDisplay+0x4e>
			// write "timer unset"
			setTextSize(1);
 8002cde:	2001      	movs	r0, #1
 8002ce0:	f7fe fc2a 	bl	8001538 <setTextSize>
			clearTextLine(84, hspi);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	0019      	movs	r1, r3
 8002ce8:	2054      	movs	r0, #84	; 0x54
 8002cea:	f7fe f86d 	bl	8000dc8 <clearTextLine>
			drawCenteredText(WIDTH/2, 84, "timer unset", hspi);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a5e      	ldr	r2, [pc, #376]	; (8002e6c <updateTimerDisplay+0x1a8>)
 8002cf2:	2154      	movs	r1, #84	; 0x54
 8002cf4:	2040      	movs	r0, #64	; 0x40
 8002cf6:	f7fe f805 	bl	8000d04 <drawCenteredText>

			// draw button text
			clearTextLine(HEIGHT-28, hspi);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	0019      	movs	r1, r3
 8002cfe:	2084      	movs	r0, #132	; 0x84
 8002d00:	f7fe f862 	bl	8000dc8 <clearTextLine>
			drawCenteredText(WIDTH*3/4, HEIGHT-28, "set", hspi);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a5a      	ldr	r2, [pc, #360]	; (8002e70 <updateTimerDisplay+0x1ac>)
 8002d08:	2184      	movs	r1, #132	; 0x84
 8002d0a:	2060      	movs	r0, #96	; 0x60
 8002d0c:	f7fd fffa 	bl	8000d04 <drawCenteredText>
			default: break;
		}

		drawTimer(timerVars.timeToSet, hspi);
	}
}
 8002d10:	e0a6      	b.n	8002e60 <updateTimerDisplay+0x19c>
			timerVal = watchTimerSeconds;
 8002d12:	4b58      	ldr	r3, [pc, #352]	; (8002e74 <updateTimerDisplay+0x1b0>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	60fb      	str	r3, [r7, #12]
			currentTimer->hr = timerVal/3600;
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	23e1      	movs	r3, #225	; 0xe1
 8002d1c:	0119      	lsls	r1, r3, #4
 8002d1e:	0010      	movs	r0, r2
 8002d20:	f7fd f9fa 	bl	8000118 <__udivsi3>
 8002d24:	0003      	movs	r3, r0
 8002d26:	b2da      	uxtb	r2, r3
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	701a      	strb	r2, [r3, #0]
			timerVal %= 3600;
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	23e1      	movs	r3, #225	; 0xe1
 8002d30:	0119      	lsls	r1, r3, #4
 8002d32:	0010      	movs	r0, r2
 8002d34:	f7fd fa76 	bl	8000224 <__aeabi_uidivmod>
 8002d38:	000b      	movs	r3, r1
 8002d3a:	60fb      	str	r3, [r7, #12]
			currentTimer->min = timerVal/60;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	213c      	movs	r1, #60	; 0x3c
 8002d40:	0018      	movs	r0, r3
 8002d42:	f7fd f9e9 	bl	8000118 <__udivsi3>
 8002d46:	0003      	movs	r3, r0
 8002d48:	b2da      	uxtb	r2, r3
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	705a      	strb	r2, [r3, #1]
			timerVal %= 60;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	213c      	movs	r1, #60	; 0x3c
 8002d52:	0018      	movs	r0, r3
 8002d54:	f7fd fa66 	bl	8000224 <__aeabi_uidivmod>
 8002d58:	000b      	movs	r3, r1
 8002d5a:	60fb      	str	r3, [r7, #12]
			currentTimer->sec = timerVal;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	709a      	strb	r2, [r3, #2]
			drawTimer(currentTimer, hspi);
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	0011      	movs	r1, r2
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	f000 faec 	bl	8003348 <drawTimer>
			setTextSize(1);
 8002d70:	2001      	movs	r0, #1
 8002d72:	f7fe fbe1 	bl	8001538 <setTextSize>
			if (isTimerRunning == 0 && watchTimerSeconds != 0) {
 8002d76:	4b40      	ldr	r3, [pc, #256]	; (8002e78 <updateTimerDisplay+0x1b4>)
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10a      	bne.n	8002d96 <updateTimerDisplay+0xd2>
 8002d80:	4b3c      	ldr	r3, [pc, #240]	; (8002e74 <updateTimerDisplay+0x1b0>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d006      	beq.n	8002d96 <updateTimerDisplay+0xd2>
				drawCenteredText(WIDTH/2, 84, "timer set!", hspi);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a3c      	ldr	r2, [pc, #240]	; (8002e7c <updateTimerDisplay+0x1b8>)
 8002d8c:	2154      	movs	r1, #84	; 0x54
 8002d8e:	2040      	movs	r0, #64	; 0x40
 8002d90:	f7fd ffb8 	bl	8000d04 <drawCenteredText>
 8002d94:	e004      	b.n	8002da0 <updateTimerDisplay+0xdc>
				clearTextLine(84, hspi);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	0019      	movs	r1, r3
 8002d9a:	2054      	movs	r0, #84	; 0x54
 8002d9c:	f7fe f814 	bl	8000dc8 <clearTextLine>
			clearTextLine(HEIGHT-28, hspi);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	0019      	movs	r1, r3
 8002da4:	2084      	movs	r0, #132	; 0x84
 8002da6:	f7fe f80f 	bl	8000dc8 <clearTextLine>
			drawCenteredText(WIDTH/4, HEIGHT-28, "run", hspi);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a34      	ldr	r2, [pc, #208]	; (8002e80 <updateTimerDisplay+0x1bc>)
 8002dae:	2184      	movs	r1, #132	; 0x84
 8002db0:	2020      	movs	r0, #32
 8002db2:	f7fd ffa7 	bl	8000d04 <drawCenteredText>
			drawCenteredText(WIDTH/2, HEIGHT-28, "pause", hspi);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a32      	ldr	r2, [pc, #200]	; (8002e84 <updateTimerDisplay+0x1c0>)
 8002dba:	2184      	movs	r1, #132	; 0x84
 8002dbc:	2040      	movs	r0, #64	; 0x40
 8002dbe:	f7fd ffa1 	bl	8000d04 <drawCenteredText>
			drawCenteredText(WIDTH*3/4, HEIGHT-28, "clear", hspi);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a30      	ldr	r2, [pc, #192]	; (8002e88 <updateTimerDisplay+0x1c4>)
 8002dc6:	2184      	movs	r1, #132	; 0x84
 8002dc8:	2060      	movs	r0, #96	; 0x60
 8002dca:	f7fd ff9b 	bl	8000d04 <drawCenteredText>
}
 8002dce:	e047      	b.n	8002e60 <updateTimerDisplay+0x19c>
	else if (timerVars.isBeingSet == 1) {
 8002dd0:	4b25      	ldr	r3, [pc, #148]	; (8002e68 <updateTimerDisplay+0x1a4>)
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d143      	bne.n	8002e60 <updateTimerDisplay+0x19c>
		setTextSize(1);
 8002dd8:	2001      	movs	r0, #1
 8002dda:	f7fe fbad 	bl	8001538 <setTextSize>
		clearTextLine(HEIGHT-28, hspi);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	0019      	movs	r1, r3
 8002de2:	2084      	movs	r0, #132	; 0x84
 8002de4:	f7fd fff0 	bl	8000dc8 <clearTextLine>
		drawCenteredText(WIDTH/4, HEIGHT-28, "up", hspi);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a28      	ldr	r2, [pc, #160]	; (8002e8c <updateTimerDisplay+0x1c8>)
 8002dec:	2184      	movs	r1, #132	; 0x84
 8002dee:	2020      	movs	r0, #32
 8002df0:	f7fd ff88 	bl	8000d04 <drawCenteredText>
		drawCenteredText(WIDTH/2, HEIGHT-28, "down", hspi);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a26      	ldr	r2, [pc, #152]	; (8002e90 <updateTimerDisplay+0x1cc>)
 8002df8:	2184      	movs	r1, #132	; 0x84
 8002dfa:	2040      	movs	r0, #64	; 0x40
 8002dfc:	f7fd ff82 	bl	8000d04 <drawCenteredText>
		drawCenteredText(WIDTH*3/4, HEIGHT-28, "change", hspi);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a24      	ldr	r2, [pc, #144]	; (8002e94 <updateTimerDisplay+0x1d0>)
 8002e04:	2184      	movs	r1, #132	; 0x84
 8002e06:	2060      	movs	r0, #96	; 0x60
 8002e08:	f7fd ff7c 	bl	8000d04 <drawCenteredText>
		clearTextLine(60, hspi);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	0019      	movs	r1, r3
 8002e10:	203c      	movs	r0, #60	; 0x3c
 8002e12:	f7fd ffd9 	bl	8000dc8 <clearTextLine>
		switch (timerVars.fieldBeingSet) {
 8002e16:	4b14      	ldr	r3, [pc, #80]	; (8002e68 <updateTimerDisplay+0x1a4>)
 8002e18:	785b      	ldrb	r3, [r3, #1]
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d00b      	beq.n	8002e36 <updateTimerDisplay+0x172>
 8002e1e:	2b03      	cmp	r3, #3
 8002e20:	d010      	beq.n	8002e44 <updateTimerDisplay+0x180>
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d000      	beq.n	8002e28 <updateTimerDisplay+0x164>
			default: break;
 8002e26:	e014      	b.n	8002e52 <updateTimerDisplay+0x18e>
			case 1: drawCenteredText(WIDTH/2, 60, "setting hour...", hspi); break;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a1b      	ldr	r2, [pc, #108]	; (8002e98 <updateTimerDisplay+0x1d4>)
 8002e2c:	213c      	movs	r1, #60	; 0x3c
 8002e2e:	2040      	movs	r0, #64	; 0x40
 8002e30:	f7fd ff68 	bl	8000d04 <drawCenteredText>
 8002e34:	e00d      	b.n	8002e52 <updateTimerDisplay+0x18e>
			case 2: drawCenteredText(WIDTH/2, 60, "setting minute...", hspi); break;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a18      	ldr	r2, [pc, #96]	; (8002e9c <updateTimerDisplay+0x1d8>)
 8002e3a:	213c      	movs	r1, #60	; 0x3c
 8002e3c:	2040      	movs	r0, #64	; 0x40
 8002e3e:	f7fd ff61 	bl	8000d04 <drawCenteredText>
 8002e42:	e006      	b.n	8002e52 <updateTimerDisplay+0x18e>
			case 3: drawCenteredText(WIDTH/2, 60, "setting second...", hspi); break;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a16      	ldr	r2, [pc, #88]	; (8002ea0 <updateTimerDisplay+0x1dc>)
 8002e48:	213c      	movs	r1, #60	; 0x3c
 8002e4a:	2040      	movs	r0, #64	; 0x40
 8002e4c:	f7fd ff5a 	bl	8000d04 <drawCenteredText>
 8002e50:	46c0      	nop			; (mov r8, r8)
		drawTimer(timerVars.timeToSet, hspi);
 8002e52:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <updateTimerDisplay+0x1a4>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	0011      	movs	r1, r2
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	f000 fa74 	bl	8003348 <drawTimer>
}
 8002e60:	46c0      	nop			; (mov r8, r8)
 8002e62:	46bd      	mov	sp, r7
 8002e64:	b004      	add	sp, #16
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	200000ec 	.word	0x200000ec
 8002e6c:	08008580 	.word	0x08008580
 8002e70:	08008510 	.word	0x08008510
 8002e74:	20000218 	.word	0x20000218
 8002e78:	200001bc 	.word	0x200001bc
 8002e7c:	0800858c 	.word	0x0800858c
 8002e80:	08008598 	.word	0x08008598
 8002e84:	0800859c 	.word	0x0800859c
 8002e88:	080085a4 	.word	0x080085a4
 8002e8c:	08008514 	.word	0x08008514
 8002e90:	08008518 	.word	0x08008518
 8002e94:	08008520 	.word	0x08008520
 8002e98:	0800853c 	.word	0x0800853c
 8002e9c:	08008528 	.word	0x08008528
 8002ea0:	080085ac 	.word	0x080085ac

08002ea4 <updateAlarmDisplay>:

void updateAlarmDisplay(SPI_HandleTypeDef *hspi) {
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
	if (alarmVars.isBeingSet == 0) {
 8002eac:	4b4e      	ldr	r3, [pc, #312]	; (8002fe8 <updateAlarmDisplay+0x144>)
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d147      	bne.n	8002f44 <updateAlarmDisplay+0xa0>
		if (isAlarmRunning == 0) {
 8002eb4:	4b4d      	ldr	r3, [pc, #308]	; (8002fec <updateAlarmDisplay+0x148>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d121      	bne.n	8002f02 <updateAlarmDisplay+0x5e>
			setTextSize(3);
 8002ebe:	2003      	movs	r0, #3
 8002ec0:	f7fe fb3a 	bl	8001538 <setTextSize>
			clearTextLine(68, hspi);	// clear alarm time text
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	0019      	movs	r1, r3
 8002ec8:	2044      	movs	r0, #68	; 0x44
 8002eca:	f7fd ff7d 	bl	8000dc8 <clearTextLine>

			setTextSize(1);
 8002ece:	2001      	movs	r0, #1
 8002ed0:	f7fe fb32 	bl	8001538 <setTextSize>
			clearTextLine(92, hspi);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	0019      	movs	r1, r3
 8002ed8:	205c      	movs	r0, #92	; 0x5c
 8002eda:	f7fd ff75 	bl	8000dc8 <clearTextLine>
			drawCenteredText(WIDTH/2, 92, "alarm unset", hspi);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a43      	ldr	r2, [pc, #268]	; (8002ff0 <updateAlarmDisplay+0x14c>)
 8002ee2:	215c      	movs	r1, #92	; 0x5c
 8002ee4:	2040      	movs	r0, #64	; 0x40
 8002ee6:	f7fd ff0d 	bl	8000d04 <drawCenteredText>

			// draw button text
			clearTextLine(HEIGHT-28, hspi);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	0019      	movs	r1, r3
 8002eee:	2084      	movs	r0, #132	; 0x84
 8002ef0:	f7fd ff6a 	bl	8000dc8 <clearTextLine>
			drawCenteredText(WIDTH*3/4, HEIGHT-28, "clear", hspi);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a3f      	ldr	r2, [pc, #252]	; (8002ff4 <updateAlarmDisplay+0x150>)
 8002ef8:	2184      	movs	r1, #132	; 0x84
 8002efa:	2060      	movs	r0, #96	; 0x60
 8002efc:	f7fd ff02 	bl	8000d04 <drawCenteredText>
		drawCenteredText(WIDTH/2, HEIGHT-28, "down", hspi);
		drawCenteredText(WIDTH*3/4, HEIGHT-28, "change", hspi);

		drawAlarm(alarmVars.alarmToSet, hspi);
	}
}
 8002f00:	e06e      	b.n	8002fe0 <updateAlarmDisplay+0x13c>
			setTextSize(1);
 8002f02:	2001      	movs	r0, #1
 8002f04:	f7fe fb18 	bl	8001538 <setTextSize>
			clearTextLine(92, hspi);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	0019      	movs	r1, r3
 8002f0c:	205c      	movs	r0, #92	; 0x5c
 8002f0e:	f7fd ff5b 	bl	8000dc8 <clearTextLine>
			drawCenteredText(WIDTH/2, 92, "alarm set", hspi);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a38      	ldr	r2, [pc, #224]	; (8002ff8 <updateAlarmDisplay+0x154>)
 8002f16:	215c      	movs	r1, #92	; 0x5c
 8002f18:	2040      	movs	r0, #64	; 0x40
 8002f1a:	f7fd fef3 	bl	8000d04 <drawCenteredText>
			drawAlarm(alarmVars.alarmToSet, hspi);
 8002f1e:	4b32      	ldr	r3, [pc, #200]	; (8002fe8 <updateAlarmDisplay+0x144>)
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	0011      	movs	r1, r2
 8002f26:	0018      	movs	r0, r3
 8002f28:	f000 fa36 	bl	8003398 <drawAlarm>
			clearTextLine(HEIGHT-28, hspi);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	0019      	movs	r1, r3
 8002f30:	2084      	movs	r0, #132	; 0x84
 8002f32:	f7fd ff49 	bl	8000dc8 <clearTextLine>
			drawCenteredText(WIDTH*3/4, HEIGHT-28, "clear", hspi);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a2e      	ldr	r2, [pc, #184]	; (8002ff4 <updateAlarmDisplay+0x150>)
 8002f3a:	2184      	movs	r1, #132	; 0x84
 8002f3c:	2060      	movs	r0, #96	; 0x60
 8002f3e:	f7fd fee1 	bl	8000d04 <drawCenteredText>
}
 8002f42:	e04d      	b.n	8002fe0 <updateAlarmDisplay+0x13c>
	else if (alarmVars.isBeingSet == 1) {
 8002f44:	4b28      	ldr	r3, [pc, #160]	; (8002fe8 <updateAlarmDisplay+0x144>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d149      	bne.n	8002fe0 <updateAlarmDisplay+0x13c>
		setTextSize(1);
 8002f4c:	2001      	movs	r0, #1
 8002f4e:	f7fe faf3 	bl	8001538 <setTextSize>
		switch (alarmVars.fieldBeingSet) {
 8002f52:	4b25      	ldr	r3, [pc, #148]	; (8002fe8 <updateAlarmDisplay+0x144>)
 8002f54:	785b      	ldrb	r3, [r3, #1]
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d00f      	beq.n	8002f7a <updateAlarmDisplay+0xd6>
 8002f5a:	dc02      	bgt.n	8002f62 <updateAlarmDisplay+0xbe>
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d005      	beq.n	8002f6c <updateAlarmDisplay+0xc8>
			default: break;
 8002f60:	e020      	b.n	8002fa4 <updateAlarmDisplay+0x100>
		switch (alarmVars.fieldBeingSet) {
 8002f62:	2b03      	cmp	r3, #3
 8002f64:	d010      	beq.n	8002f88 <updateAlarmDisplay+0xe4>
 8002f66:	2b04      	cmp	r3, #4
 8002f68:	d015      	beq.n	8002f96 <updateAlarmDisplay+0xf2>
			default: break;
 8002f6a:	e01b      	b.n	8002fa4 <updateAlarmDisplay+0x100>
			case 1: drawCenteredText(WIDTH/2, 60, "setting second...", hspi); break;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a23      	ldr	r2, [pc, #140]	; (8002ffc <updateAlarmDisplay+0x158>)
 8002f70:	213c      	movs	r1, #60	; 0x3c
 8002f72:	2040      	movs	r0, #64	; 0x40
 8002f74:	f7fd fec6 	bl	8000d04 <drawCenteredText>
 8002f78:	e014      	b.n	8002fa4 <updateAlarmDisplay+0x100>
			case 2: drawCenteredText(WIDTH/2, 60, "setting minute...", hspi); break;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a20      	ldr	r2, [pc, #128]	; (8003000 <updateAlarmDisplay+0x15c>)
 8002f7e:	213c      	movs	r1, #60	; 0x3c
 8002f80:	2040      	movs	r0, #64	; 0x40
 8002f82:	f7fd febf 	bl	8000d04 <drawCenteredText>
 8002f86:	e00d      	b.n	8002fa4 <updateAlarmDisplay+0x100>
			case 3: drawCenteredText(WIDTH/2, 60, "setting hour...", hspi); break;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a1e      	ldr	r2, [pc, #120]	; (8003004 <updateAlarmDisplay+0x160>)
 8002f8c:	213c      	movs	r1, #60	; 0x3c
 8002f8e:	2040      	movs	r0, #64	; 0x40
 8002f90:	f7fd feb8 	bl	8000d04 <drawCenteredText>
 8002f94:	e006      	b.n	8002fa4 <updateAlarmDisplay+0x100>
			case 4: drawCenteredText(WIDTH/2, 60, "setting day...", hspi); break;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a1b      	ldr	r2, [pc, #108]	; (8003008 <updateAlarmDisplay+0x164>)
 8002f9a:	213c      	movs	r1, #60	; 0x3c
 8002f9c:	2040      	movs	r0, #64	; 0x40
 8002f9e:	f7fd feb1 	bl	8000d04 <drawCenteredText>
 8002fa2:	46c0      	nop			; (mov r8, r8)
		clearTextLine(HEIGHT-28, hspi);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	0019      	movs	r1, r3
 8002fa8:	2084      	movs	r0, #132	; 0x84
 8002faa:	f7fd ff0d 	bl	8000dc8 <clearTextLine>
		drawCenteredText(WIDTH/4, HEIGHT-28, "up", hspi);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a16      	ldr	r2, [pc, #88]	; (800300c <updateAlarmDisplay+0x168>)
 8002fb2:	2184      	movs	r1, #132	; 0x84
 8002fb4:	2020      	movs	r0, #32
 8002fb6:	f7fd fea5 	bl	8000d04 <drawCenteredText>
		drawCenteredText(WIDTH/2, HEIGHT-28, "down", hspi);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a14      	ldr	r2, [pc, #80]	; (8003010 <updateAlarmDisplay+0x16c>)
 8002fbe:	2184      	movs	r1, #132	; 0x84
 8002fc0:	2040      	movs	r0, #64	; 0x40
 8002fc2:	f7fd fe9f 	bl	8000d04 <drawCenteredText>
		drawCenteredText(WIDTH*3/4, HEIGHT-28, "change", hspi);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a12      	ldr	r2, [pc, #72]	; (8003014 <updateAlarmDisplay+0x170>)
 8002fca:	2184      	movs	r1, #132	; 0x84
 8002fcc:	2060      	movs	r0, #96	; 0x60
 8002fce:	f7fd fe99 	bl	8000d04 <drawCenteredText>
		drawAlarm(alarmVars.alarmToSet, hspi);
 8002fd2:	4b05      	ldr	r3, [pc, #20]	; (8002fe8 <updateAlarmDisplay+0x144>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	0011      	movs	r1, r2
 8002fda:	0018      	movs	r0, r3
 8002fdc:	f000 f9dc 	bl	8003398 <drawAlarm>
}
 8002fe0:	46c0      	nop			; (mov r8, r8)
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	b002      	add	sp, #8
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	200000f4 	.word	0x200000f4
 8002fec:	20000161 	.word	0x20000161
 8002ff0:	080085c0 	.word	0x080085c0
 8002ff4:	080085a4 	.word	0x080085a4
 8002ff8:	080085cc 	.word	0x080085cc
 8002ffc:	080085ac 	.word	0x080085ac
 8003000:	08008528 	.word	0x08008528
 8003004:	0800853c 	.word	0x0800853c
 8003008:	080085d8 	.word	0x080085d8
 800300c:	08008514 	.word	0x08008514
 8003010:	08008518 	.word	0x08008518
 8003014:	08008520 	.word	0x08008520

08003018 <updateStopwatchDisplay>:

void updateStopwatchDisplay(SPI_HandleTypeDef *hspi) {
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
	drawStopwatch(stopwatchCNT, hspi);
 8003020:	4b1e      	ldr	r3, [pc, #120]	; (800309c <updateStopwatchDisplay+0x84>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	0011      	movs	r1, r2
 8003028:	0018      	movs	r0, r3
 800302a:	f000 f9f1 	bl	8003410 <drawStopwatch>
	drawStopwatchLap(stopwatchCNT, hspi);
 800302e:	4b1b      	ldr	r3, [pc, #108]	; (800309c <updateStopwatchDisplay+0x84>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	0011      	movs	r1, r2
 8003036:	0018      	movs	r0, r3
 8003038:	f000 fa18 	bl	800346c <drawStopwatchLap>

	setTextSize(1);
 800303c:	2001      	movs	r0, #1
 800303e:	f7fe fa7b 	bl	8001538 <setTextSize>
	clearTextLine(HEIGHT-28, hspi);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	0019      	movs	r1, r3
 8003046:	2084      	movs	r0, #132	; 0x84
 8003048:	f7fd febe 	bl	8000dc8 <clearTextLine>
	drawCenteredText(WIDTH/2, HEIGHT-28, "lap", hspi);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a14      	ldr	r2, [pc, #80]	; (80030a0 <updateStopwatchDisplay+0x88>)
 8003050:	2184      	movs	r1, #132	; 0x84
 8003052:	2040      	movs	r0, #64	; 0x40
 8003054:	f7fd fe56 	bl	8000d04 <drawCenteredText>
	drawCenteredText(WIDTH*3/4, HEIGHT-28, "clear", hspi);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a12      	ldr	r2, [pc, #72]	; (80030a4 <updateStopwatchDisplay+0x8c>)
 800305c:	2184      	movs	r1, #132	; 0x84
 800305e:	2060      	movs	r0, #96	; 0x60
 8003060:	f7fd fe50 	bl	8000d04 <drawCenteredText>

	if (isStopwatchRunning == 0) drawCenteredText(WIDTH/4, HEIGHT-28, "run", hspi);
 8003064:	4b10      	ldr	r3, [pc, #64]	; (80030a8 <updateStopwatchDisplay+0x90>)
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d106      	bne.n	800307c <updateStopwatchDisplay+0x64>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a0e      	ldr	r2, [pc, #56]	; (80030ac <updateStopwatchDisplay+0x94>)
 8003072:	2184      	movs	r1, #132	; 0x84
 8003074:	2020      	movs	r0, #32
 8003076:	f7fd fe45 	bl	8000d04 <drawCenteredText>
	else if (isStopwatchRunning == 1) drawCenteredText(WIDTH/4, HEIGHT-28, "pause", hspi);
}
 800307a:	e00a      	b.n	8003092 <updateStopwatchDisplay+0x7a>
	else if (isStopwatchRunning == 1) drawCenteredText(WIDTH/4, HEIGHT-28, "pause", hspi);
 800307c:	4b0a      	ldr	r3, [pc, #40]	; (80030a8 <updateStopwatchDisplay+0x90>)
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b01      	cmp	r3, #1
 8003084:	d105      	bne.n	8003092 <updateStopwatchDisplay+0x7a>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a09      	ldr	r2, [pc, #36]	; (80030b0 <updateStopwatchDisplay+0x98>)
 800308a:	2184      	movs	r1, #132	; 0x84
 800308c:	2020      	movs	r0, #32
 800308e:	f7fd fe39 	bl	8000d04 <drawCenteredText>
}
 8003092:	46c0      	nop			; (mov r8, r8)
 8003094:	46bd      	mov	sp, r7
 8003096:	b002      	add	sp, #8
 8003098:	bd80      	pop	{r7, pc}
 800309a:	46c0      	nop			; (mov r8, r8)
 800309c:	20000114 	.word	0x20000114
 80030a0:	080085e8 	.word	0x080085e8
 80030a4:	080085a4 	.word	0x080085a4
 80030a8:	20000160 	.word	0x20000160
 80030ac:	08008598 	.word	0x08008598
 80030b0:	0800859c 	.word	0x0800859c

080030b4 <drawButton>:

void drawButton(uint8_t x, uint8_t y, SPI_HandleTypeDef *hspi) {
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af02      	add	r7, sp, #8
 80030ba:	603a      	str	r2, [r7, #0]
 80030bc:	1dfb      	adds	r3, r7, #7
 80030be:	1c02      	adds	r2, r0, #0
 80030c0:	701a      	strb	r2, [r3, #0]
 80030c2:	1dbb      	adds	r3, r7, #6
 80030c4:	1c0a      	adds	r2, r1, #0
 80030c6:	701a      	strb	r2, [r3, #0]
	// draw rect size 8 with 1 pixel border
	drawRect(x, y, 10, 10, ST77XX_BLACK, hspi);
 80030c8:	1dbb      	adds	r3, r7, #6
 80030ca:	7819      	ldrb	r1, [r3, #0]
 80030cc:	1dfb      	adds	r3, r7, #7
 80030ce:	7818      	ldrb	r0, [r3, #0]
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	9301      	str	r3, [sp, #4]
 80030d4:	2300      	movs	r3, #0
 80030d6:	9300      	str	r3, [sp, #0]
 80030d8:	230a      	movs	r3, #10
 80030da:	220a      	movs	r2, #10
 80030dc:	f7fd fd0b 	bl	8000af6 <drawRect>
	fillRect(x+1, y+1, 8, 8, ST77XX_WHITE, hspi);
 80030e0:	1dfb      	adds	r3, r7, #7
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	3301      	adds	r3, #1
 80030e6:	b2d8      	uxtb	r0, r3
 80030e8:	1dbb      	adds	r3, r7, #6
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	3301      	adds	r3, #1
 80030ee:	b2d9      	uxtb	r1, r3
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	9301      	str	r3, [sp, #4]
 80030f4:	4b10      	ldr	r3, [pc, #64]	; (8003138 <drawButton+0x84>)
 80030f6:	9300      	str	r3, [sp, #0]
 80030f8:	2308      	movs	r3, #8
 80030fa:	2208      	movs	r2, #8
 80030fc:	f7fd fd53 	bl	8000ba6 <fillRect>

	// draw circle in the middle
	setCursor(x+3, y+1);
 8003100:	1dfb      	adds	r3, r7, #7
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	3303      	adds	r3, #3
 8003106:	b2da      	uxtb	r2, r3
 8003108:	1dbb      	adds	r3, r7, #6
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	3301      	adds	r3, #1
 800310e:	b2db      	uxtb	r3, r3
 8003110:	0019      	movs	r1, r3
 8003112:	0010      	movs	r0, r2
 8003114:	f7fe f9f6 	bl	8001504 <setCursor>
	setTextColor(ST77XX_BLACK);
 8003118:	2000      	movs	r0, #0
 800311a:	f7fe fa1d 	bl	8001558 <setTextColor>
	setBackgroundColor(ST77XX_WHITE);
 800311e:	4b06      	ldr	r3, [pc, #24]	; (8003138 <drawButton+0x84>)
 8003120:	0018      	movs	r0, r3
 8003122:	f7fe f9df 	bl	80014e4 <setBackgroundColor>
	drawChar('O', hspi);
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	0019      	movs	r1, r3
 800312a:	204f      	movs	r0, #79	; 0x4f
 800312c:	f7fd fe6c 	bl	8000e08 <drawChar>
}
 8003130:	46c0      	nop			; (mov r8, r8)
 8003132:	46bd      	mov	sp, r7
 8003134:	b002      	add	sp, #8
 8003136:	bd80      	pop	{r7, pc}
 8003138:	0000ffff 	.word	0x0000ffff

0800313c <drawTitle>:

void drawTitle(char *str, SPI_HandleTypeDef *hspi) {
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
	uint8_t strSize = strlen(str);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	0018      	movs	r0, r3
 800314a:	f7fc ffdd 	bl	8000108 <strlen>
 800314e:	0002      	movs	r2, r0
 8003150:	210f      	movs	r1, #15
 8003152:	187b      	adds	r3, r7, r1
 8003154:	701a      	strb	r2, [r3, #0]

	// drawing title
	if (12*strSize < WIDTH) {		// about string size = 10 for width = 128
 8003156:	187b      	adds	r3, r7, r1
 8003158:	781a      	ldrb	r2, [r3, #0]
 800315a:	0013      	movs	r3, r2
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	189b      	adds	r3, r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	2b7f      	cmp	r3, #127	; 0x7f
 8003164:	dc22      	bgt.n	80031ac <drawTitle+0x70>
		setTextSize(2);
 8003166:	2002      	movs	r0, #2
 8003168:	f7fe f9e6 	bl	8001538 <setTextSize>
		clearTextLine(10, hspi);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	0019      	movs	r1, r3
 8003170:	200a      	movs	r0, #10
 8003172:	f7fd fe29 	bl	8000dc8 <clearTextLine>
		setCursor((WIDTH-12*strSize)/2, 10);
 8003176:	230f      	movs	r3, #15
 8003178:	18fb      	adds	r3, r7, r3
 800317a:	781a      	ldrb	r2, [r3, #0]
 800317c:	0013      	movs	r3, r2
 800317e:	0092      	lsls	r2, r2, #2
 8003180:	1a9b      	subs	r3, r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	3380      	adds	r3, #128	; 0x80
 8003186:	2b00      	cmp	r3, #0
 8003188:	da00      	bge.n	800318c <drawTitle+0x50>
 800318a:	3301      	adds	r3, #1
 800318c:	105b      	asrs	r3, r3, #1
 800318e:	b2db      	uxtb	r3, r3
 8003190:	210a      	movs	r1, #10
 8003192:	0018      	movs	r0, r3
 8003194:	f7fe f9b6 	bl	8001504 <setCursor>
		setTextColor(ST77XX_BLACK);
 8003198:	2000      	movs	r0, #0
 800319a:	f7fe f9dd 	bl	8001558 <setTextColor>
		drawText(str, hspi);
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	0011      	movs	r1, r2
 80031a4:	0018      	movs	r0, r3
 80031a6:	f7fe f97f 	bl	80014a8 <drawText>
		clearTextLine(10, hspi);
		setCursor((WIDTH-6*15)/2, 10);
		setTextColor(ST77XX_BLACK);
		drawText("shit's too long", hspi);
	}
}
 80031aa:	e040      	b.n	800322e <drawTitle+0xf2>
	else if (6*strSize < WIDTH) {	// about string size = 21 for width = 128
 80031ac:	230f      	movs	r3, #15
 80031ae:	18fb      	adds	r3, r7, r3
 80031b0:	781a      	ldrb	r2, [r3, #0]
 80031b2:	0013      	movs	r3, r2
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	189b      	adds	r3, r3, r2
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	2b7f      	cmp	r3, #127	; 0x7f
 80031bc:	dc22      	bgt.n	8003204 <drawTitle+0xc8>
		setTextSize(1);
 80031be:	2001      	movs	r0, #1
 80031c0:	f7fe f9ba 	bl	8001538 <setTextSize>
		clearTextLine(10, hspi);
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	0019      	movs	r1, r3
 80031c8:	200a      	movs	r0, #10
 80031ca:	f7fd fdfd 	bl	8000dc8 <clearTextLine>
		setCursor((WIDTH-6*strSize)/2, 10);
 80031ce:	230f      	movs	r3, #15
 80031d0:	18fb      	adds	r3, r7, r3
 80031d2:	781a      	ldrb	r2, [r3, #0]
 80031d4:	0013      	movs	r3, r2
 80031d6:	0092      	lsls	r2, r2, #2
 80031d8:	1a9b      	subs	r3, r3, r2
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	3380      	adds	r3, #128	; 0x80
 80031de:	2b00      	cmp	r3, #0
 80031e0:	da00      	bge.n	80031e4 <drawTitle+0xa8>
 80031e2:	3301      	adds	r3, #1
 80031e4:	105b      	asrs	r3, r3, #1
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	210a      	movs	r1, #10
 80031ea:	0018      	movs	r0, r3
 80031ec:	f7fe f98a 	bl	8001504 <setCursor>
		setTextColor(ST77XX_BLACK);
 80031f0:	2000      	movs	r0, #0
 80031f2:	f7fe f9b1 	bl	8001558 <setTextColor>
		drawText(str, hspi);
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	0011      	movs	r1, r2
 80031fc:	0018      	movs	r0, r3
 80031fe:	f7fe f953 	bl	80014a8 <drawText>
}
 8003202:	e014      	b.n	800322e <drawTitle+0xf2>
		setTextSize(1);
 8003204:	2001      	movs	r0, #1
 8003206:	f7fe f997 	bl	8001538 <setTextSize>
		clearTextLine(10, hspi);
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	0019      	movs	r1, r3
 800320e:	200a      	movs	r0, #10
 8003210:	f7fd fdda 	bl	8000dc8 <clearTextLine>
		setCursor((WIDTH-6*15)/2, 10);
 8003214:	210a      	movs	r1, #10
 8003216:	2013      	movs	r0, #19
 8003218:	f7fe f974 	bl	8001504 <setCursor>
		setTextColor(ST77XX_BLACK);
 800321c:	2000      	movs	r0, #0
 800321e:	f7fe f99b 	bl	8001558 <setTextColor>
		drawText("shit's too long", hspi);
 8003222:	683a      	ldr	r2, [r7, #0]
 8003224:	4b04      	ldr	r3, [pc, #16]	; (8003238 <drawTitle+0xfc>)
 8003226:	0011      	movs	r1, r2
 8003228:	0018      	movs	r0, r3
 800322a:	f7fe f93d 	bl	80014a8 <drawText>
}
 800322e:	46c0      	nop			; (mov r8, r8)
 8003230:	46bd      	mov	sp, r7
 8003232:	b004      	add	sp, #16
 8003234:	bd80      	pop	{r7, pc}
 8003236:	46c0      	nop			; (mov r8, r8)
 8003238:	080085ec 	.word	0x080085ec

0800323c <drawClock>:

// draw time and date
// should optimize to only redraw part that changed
void drawClock(struct dates *d, struct times *t, SPI_HandleTypeDef *hspi) {
 800323c:	b5b0      	push	{r4, r5, r7, lr}
 800323e:	b090      	sub	sp, #64	; 0x40
 8003240:	af02      	add	r7, sp, #8
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
	// notes on paper.
	char str[40];

	// drawing hr and min
	// should change to print 12-hr format instead of 24 if using am/pm
	sprintf(str, "%2d:%2d", t->hr, t->min);
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	001a      	movs	r2, r3
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	785b      	ldrb	r3, [r3, #1]
 8003252:	4936      	ldr	r1, [pc, #216]	; (800332c <drawClock+0xf0>)
 8003254:	2410      	movs	r4, #16
 8003256:	1938      	adds	r0, r7, r4
 8003258:	f004 fcc6 	bl	8007be8 <siprintf>
	setTextSize(3);
 800325c:	2003      	movs	r0, #3
 800325e:	f7fe f96b 	bl	8001538 <setTextSize>
	setTextColor(ST77XX_BLACK);
 8003262:	2000      	movs	r0, #0
 8003264:	f7fe f978 	bl	8001558 <setTextColor>
	clearTextLine(68, hspi);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	0019      	movs	r1, r3
 800326c:	2044      	movs	r0, #68	; 0x44
 800326e:	f7fd fdab 	bl	8000dc8 <clearTextLine>
	drawCenteredText(45, 60, str, hspi);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	193a      	adds	r2, r7, r4
 8003276:	213c      	movs	r1, #60	; 0x3c
 8003278:	202d      	movs	r0, #45	; 0x2d
 800327a:	f7fd fd43 	bl	8000d04 <drawCenteredText>

	// drawing sec
	sprintf(str, "%2d", t->sec);
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	789b      	ldrb	r3, [r3, #2]
 8003282:	001a      	movs	r2, r3
 8003284:	492a      	ldr	r1, [pc, #168]	; (8003330 <drawClock+0xf4>)
 8003286:	193b      	adds	r3, r7, r4
 8003288:	0018      	movs	r0, r3
 800328a:	f004 fcad 	bl	8007be8 <siprintf>
	setTextSize(2);
 800328e:	2002      	movs	r0, #2
 8003290:	f7fe f952 	bl	8001538 <setTextSize>
	drawCenteredText(109, 68, str, hspi);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	193a      	adds	r2, r7, r4
 8003298:	2144      	movs	r1, #68	; 0x44
 800329a:	206d      	movs	r0, #109	; 0x6d
 800329c:	f7fd fd32 	bl	8000d04 <drawCenteredText>

	// drawing AM/PM text
	setTextSize(1);
 80032a0:	2001      	movs	r0, #1
 80032a2:	f7fe f949 	bl	8001538 <setTextSize>
	if (t->hr < 12) drawCenteredText(103, 60, "AM", hspi);
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	2b0b      	cmp	r3, #11
 80032ac:	d806      	bhi.n	80032bc <drawClock+0x80>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a20      	ldr	r2, [pc, #128]	; (8003334 <drawClock+0xf8>)
 80032b2:	213c      	movs	r1, #60	; 0x3c
 80032b4:	2067      	movs	r0, #103	; 0x67
 80032b6:	f7fd fd25 	bl	8000d04 <drawCenteredText>
 80032ba:	e005      	b.n	80032c8 <drawClock+0x8c>
	else drawCenteredText(103, 60, "PM", hspi);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a1e      	ldr	r2, [pc, #120]	; (8003338 <drawClock+0xfc>)
 80032c0:	213c      	movs	r1, #60	; 0x3c
 80032c2:	2067      	movs	r0, #103	; 0x67
 80032c4:	f7fd fd1e 	bl	8000d04 <drawCenteredText>

	// drawing date
	setTextSize(2);
 80032c8:	2002      	movs	r0, #2
 80032ca:	f7fe f935 	bl	8001538 <setTextSize>
	clearTextLine(84, hspi);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	0019      	movs	r1, r3
 80032d2:	2054      	movs	r0, #84	; 0x54
 80032d4:	f7fd fd78 	bl	8000dc8 <clearTextLine>
	setTextSize(1);
 80032d8:	2001      	movs	r0, #1
 80032da:	f7fe f92d 	bl	8001538 <setTextSize>
	sprintf(str, "%s %2d %04d", monthNames[d->month], d->date, d->yr);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	789b      	ldrb	r3, [r3, #2]
 80032e2:	001a      	movs	r2, r3
 80032e4:	4b15      	ldr	r3, [pc, #84]	; (800333c <drawClock+0x100>)
 80032e6:	0092      	lsls	r2, r2, #2
 80032e8:	58d2      	ldr	r2, [r2, r3]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	78db      	ldrb	r3, [r3, #3]
 80032ee:	001c      	movs	r4, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	881b      	ldrh	r3, [r3, #0]
 80032f4:	4912      	ldr	r1, [pc, #72]	; (8003340 <drawClock+0x104>)
 80032f6:	2510      	movs	r5, #16
 80032f8:	1978      	adds	r0, r7, r5
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	0023      	movs	r3, r4
 80032fe:	f004 fc73 	bl	8007be8 <siprintf>
	drawCenteredText(WIDTH/2, 84, str, hspi);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	197a      	adds	r2, r7, r5
 8003306:	2154      	movs	r1, #84	; 0x54
 8003308:	2040      	movs	r0, #64	; 0x40
 800330a:	f7fd fcfb 	bl	8000d04 <drawCenteredText>

	// drawing weekday
	drawCenteredText(WIDTH/2, 92, weekdayNames[d->weekday], hspi);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	791b      	ldrb	r3, [r3, #4]
 8003312:	001a      	movs	r2, r3
 8003314:	4b0b      	ldr	r3, [pc, #44]	; (8003344 <drawClock+0x108>)
 8003316:	0092      	lsls	r2, r2, #2
 8003318:	58d2      	ldr	r2, [r2, r3]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	215c      	movs	r1, #92	; 0x5c
 800331e:	2040      	movs	r0, #64	; 0x40
 8003320:	f7fd fcf0 	bl	8000d04 <drawCenteredText>
}
 8003324:	46c0      	nop			; (mov r8, r8)
 8003326:	46bd      	mov	sp, r7
 8003328:	b00e      	add	sp, #56	; 0x38
 800332a:	bdb0      	pop	{r4, r5, r7, pc}
 800332c:	080085fc 	.word	0x080085fc
 8003330:	08008604 	.word	0x08008604
 8003334:	08008608 	.word	0x08008608
 8003338:	0800860c 	.word	0x0800860c
 800333c:	20000020 	.word	0x20000020
 8003340:	08008610 	.word	0x08008610
 8003344:	20000000 	.word	0x20000000

08003348 <drawTimer>:

void drawTimer(struct times *t, SPI_HandleTypeDef *hspi) {
 8003348:	b5b0      	push	{r4, r5, r7, lr}
 800334a:	b08e      	sub	sp, #56	; 0x38
 800334c:	af02      	add	r7, sp, #8
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
	char str[40];

	// only drawing hr:min:sec of timer
	setTextSize(2);
 8003352:	2002      	movs	r0, #2
 8003354:	f7fe f8f0 	bl	8001538 <setTextSize>
	clearTextLine(68, hspi);
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	0019      	movs	r1, r3
 800335c:	2044      	movs	r0, #68	; 0x44
 800335e:	f7fd fd33 	bl	8000dc8 <clearTextLine>
	sprintf(str, "%2d:%2d:%2d", t->hr, t->min, t->sec);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	001a      	movs	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	785b      	ldrb	r3, [r3, #1]
 800336c:	001c      	movs	r4, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	789b      	ldrb	r3, [r3, #2]
 8003372:	4908      	ldr	r1, [pc, #32]	; (8003394 <drawTimer+0x4c>)
 8003374:	2508      	movs	r5, #8
 8003376:	1978      	adds	r0, r7, r5
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	0023      	movs	r3, r4
 800337c:	f004 fc34 	bl	8007be8 <siprintf>
	drawCenteredText(WIDTH/2, HEIGHT/2-12, str, hspi);		// about y=68
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	197a      	adds	r2, r7, r5
 8003384:	2144      	movs	r1, #68	; 0x44
 8003386:	2040      	movs	r0, #64	; 0x40
 8003388:	f7fd fcbc 	bl	8000d04 <drawCenteredText>

	// leaving room to draw "timer set!/unset"
}
 800338c:	46c0      	nop			; (mov r8, r8)
 800338e:	46bd      	mov	sp, r7
 8003390:	b00c      	add	sp, #48	; 0x30
 8003392:	bdb0      	pop	{r4, r5, r7, pc}
 8003394:	0800861c 	.word	0x0800861c

08003398 <drawAlarm>:

void drawAlarm(struct alarmTimes *a, SPI_HandleTypeDef *hspi) {
 8003398:	b5b0      	push	{r4, r5, r7, lr}
 800339a:	b08e      	sub	sp, #56	; 0x38
 800339c:	af02      	add	r7, sp, #8
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
	char str[40];
	setTextSize(3);
 80033a2:	2003      	movs	r0, #3
 80033a4:	f7fe f8c8 	bl	8001538 <setTextSize>
	clearTextLine(68, hspi);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	0019      	movs	r1, r3
 80033ac:	2044      	movs	r0, #68	; 0x44
 80033ae:	f7fd fd0b 	bl	8000dc8 <clearTextLine>

	// drawing hr:min:sec
	setTextSize(2);
 80033b2:	2002      	movs	r0, #2
 80033b4:	f7fe f8c0 	bl	8001538 <setTextSize>
	sprintf(str, "%2d:%2d:%2d", a->hr, a->min, a->sec);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	001a      	movs	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	785b      	ldrb	r3, [r3, #1]
 80033c2:	001c      	movs	r4, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	789b      	ldrb	r3, [r3, #2]
 80033c8:	490f      	ldr	r1, [pc, #60]	; (8003408 <drawAlarm+0x70>)
 80033ca:	2508      	movs	r5, #8
 80033cc:	1978      	adds	r0, r7, r5
 80033ce:	9300      	str	r3, [sp, #0]
 80033d0:	0023      	movs	r3, r4
 80033d2:	f004 fc09 	bl	8007be8 <siprintf>
	drawCenteredText(WIDTH/2, 68, str, hspi);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	197a      	adds	r2, r7, r5
 80033da:	2144      	movs	r1, #68	; 0x44
 80033dc:	2040      	movs	r0, #64	; 0x40
 80033de:	f7fd fc91 	bl	8000d04 <drawCenteredText>

	// drawing weekday
	setTextSize(1);
 80033e2:	2001      	movs	r0, #1
 80033e4:	f7fe f8a8 	bl	8001538 <setTextSize>
	drawCenteredText(WIDTH/2, 84, weekdayNames[a->weekday], hspi);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	78db      	ldrb	r3, [r3, #3]
 80033ec:	001a      	movs	r2, r3
 80033ee:	4b07      	ldr	r3, [pc, #28]	; (800340c <drawAlarm+0x74>)
 80033f0:	0092      	lsls	r2, r2, #2
 80033f2:	58d2      	ldr	r2, [r2, r3]
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	2154      	movs	r1, #84	; 0x54
 80033f8:	2040      	movs	r0, #64	; 0x40
 80033fa:	f7fd fc83 	bl	8000d04 <drawCenteredText>
}
 80033fe:	46c0      	nop			; (mov r8, r8)
 8003400:	46bd      	mov	sp, r7
 8003402:	b00c      	add	sp, #48	; 0x30
 8003404:	bdb0      	pop	{r4, r5, r7, pc}
 8003406:	46c0      	nop			; (mov r8, r8)
 8003408:	0800861c 	.word	0x0800861c
 800340c:	20000000 	.word	0x20000000

08003410 <drawStopwatch>:

void drawStopwatch(uint32_t seconds, SPI_HandleTypeDef *hspi) {
 8003410:	b5b0      	push	{r4, r5, r7, lr}
 8003412:	b090      	sub	sp, #64	; 0x40
 8003414:	af02      	add	r7, sp, #8
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
	struct times *t;
	char str[40];

	secondsToTime(t, seconds);
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800341e:	0011      	movs	r1, r2
 8003420:	0018      	movs	r0, r3
 8003422:	f7fe fa2f 	bl	8001884 <secondsToTime>

	// drawing hr:min:sec
	setTextSize(2);
 8003426:	2002      	movs	r0, #2
 8003428:	f7fe f886 	bl	8001538 <setTextSize>
	clearTextLine(68, hspi);
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	0019      	movs	r1, r3
 8003430:	2044      	movs	r0, #68	; 0x44
 8003432:	f7fd fcc9 	bl	8000dc8 <clearTextLine>
	sprintf(str, "%2d:%2d:%2d", t->hr, t->min, t->sec);
 8003436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	001a      	movs	r2, r3
 800343c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800343e:	785b      	ldrb	r3, [r3, #1]
 8003440:	001c      	movs	r4, r3
 8003442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003444:	789b      	ldrb	r3, [r3, #2]
 8003446:	4908      	ldr	r1, [pc, #32]	; (8003468 <drawStopwatch+0x58>)
 8003448:	250c      	movs	r5, #12
 800344a:	1978      	adds	r0, r7, r5
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	0023      	movs	r3, r4
 8003450:	f004 fbca 	bl	8007be8 <siprintf>
	drawCenteredText(WIDTH/2, 68, str, hspi);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	197a      	adds	r2, r7, r5
 8003458:	2144      	movs	r1, #68	; 0x44
 800345a:	2040      	movs	r0, #64	; 0x40
 800345c:	f7fd fc52 	bl	8000d04 <drawCenteredText>

	// leaving room for lap
}
 8003460:	46c0      	nop			; (mov r8, r8)
 8003462:	46bd      	mov	sp, r7
 8003464:	b00e      	add	sp, #56	; 0x38
 8003466:	bdb0      	pop	{r4, r5, r7, pc}
 8003468:	0800861c 	.word	0x0800861c

0800346c <drawStopwatchLap>:

void drawStopwatchLap(uint32_t seconds, SPI_HandleTypeDef *hspi) {
 800346c:	b5b0      	push	{r4, r5, r7, lr}
 800346e:	b090      	sub	sp, #64	; 0x40
 8003470:	af02      	add	r7, sp, #8
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
	struct times *t;
	char str[40];

	secondsToTime(t, seconds);
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800347a:	0011      	movs	r1, r2
 800347c:	0018      	movs	r0, r3
 800347e:	f7fe fa01 	bl	8001884 <secondsToTime>

	// drawing hr:min:sec
	setTextSize(1);
 8003482:	2001      	movs	r0, #1
 8003484:	f7fe f858 	bl	8001538 <setTextSize>
	clearTextLine(84, hspi);
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	0019      	movs	r1, r3
 800348c:	2054      	movs	r0, #84	; 0x54
 800348e:	f7fd fc9b 	bl	8000dc8 <clearTextLine>
	sprintf(str, "%2d:%2d:%2d", t->hr, t->min, t->sec);
 8003492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	001a      	movs	r2, r3
 8003498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800349a:	785b      	ldrb	r3, [r3, #1]
 800349c:	001c      	movs	r4, r3
 800349e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034a0:	789b      	ldrb	r3, [r3, #2]
 80034a2:	4908      	ldr	r1, [pc, #32]	; (80034c4 <drawStopwatchLap+0x58>)
 80034a4:	250c      	movs	r5, #12
 80034a6:	1978      	adds	r0, r7, r5
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	0023      	movs	r3, r4
 80034ac:	f004 fb9c 	bl	8007be8 <siprintf>
	drawCenteredText(WIDTH/2, 84, str, hspi);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	197a      	adds	r2, r7, r5
 80034b4:	2154      	movs	r1, #84	; 0x54
 80034b6:	2040      	movs	r0, #64	; 0x40
 80034b8:	f7fd fc24 	bl	8000d04 <drawCenteredText>
}
 80034bc:	46c0      	nop			; (mov r8, r8)
 80034be:	46bd      	mov	sp, r7
 80034c0:	b00e      	add	sp, #56	; 0x38
 80034c2:	bdb0      	pop	{r4, r5, r7, pc}
 80034c4:	0800861c 	.word	0x0800861c

080034c8 <maxDaysInMonth>:

// calculator for number of days in a month given a month and accounting for leap years
uint8_t maxDaysInMonth(uint8_t month, uint16_t year) {
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	0002      	movs	r2, r0
 80034d0:	1dfb      	adds	r3, r7, #7
 80034d2:	701a      	strb	r2, [r3, #0]
 80034d4:	1d3b      	adds	r3, r7, #4
 80034d6:	1c0a      	adds	r2, r1, #0
 80034d8:	801a      	strh	r2, [r3, #0]
	if (month == 0 || month > 12) return 0;		// bounds checking
 80034da:	1dfb      	adds	r3, r7, #7
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <maxDaysInMonth+0x22>
 80034e2:	1dfb      	adds	r3, r7, #7
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	2b0c      	cmp	r3, #12
 80034e8:	d901      	bls.n	80034ee <maxDaysInMonth+0x26>
 80034ea:	2300      	movs	r3, #0
 80034ec:	e052      	b.n	8003594 <maxDaysInMonth+0xcc>

	if (month == RTC_MONTH_JANUARY ||
 80034ee:	1dfb      	adds	r3, r7, #7
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d017      	beq.n	8003526 <maxDaysInMonth+0x5e>
 80034f6:	1dfb      	adds	r3, r7, #7
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	2b03      	cmp	r3, #3
 80034fc:	d013      	beq.n	8003526 <maxDaysInMonth+0x5e>
		month == RTC_MONTH_MARCH   ||
 80034fe:	1dfb      	adds	r3, r7, #7
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	2b05      	cmp	r3, #5
 8003504:	d00f      	beq.n	8003526 <maxDaysInMonth+0x5e>
		month == RTC_MONTH_MAY     ||
 8003506:	1dfb      	adds	r3, r7, #7
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	2b07      	cmp	r3, #7
 800350c:	d00b      	beq.n	8003526 <maxDaysInMonth+0x5e>
		month == RTC_MONTH_JULY    ||
 800350e:	1dfb      	adds	r3, r7, #7
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	2b08      	cmp	r3, #8
 8003514:	d007      	beq.n	8003526 <maxDaysInMonth+0x5e>
		month == RTC_MONTH_AUGUST  ||
 8003516:	1dfb      	adds	r3, r7, #7
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	2b10      	cmp	r3, #16
 800351c:	d003      	beq.n	8003526 <maxDaysInMonth+0x5e>
		month == RTC_MONTH_OCTOBER ||
 800351e:	1dfb      	adds	r3, r7, #7
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	2b12      	cmp	r3, #18
 8003524:	d101      	bne.n	800352a <maxDaysInMonth+0x62>
		month == RTC_MONTH_DECEMBER) {
		return 31;
 8003526:	231f      	movs	r3, #31
 8003528:	e034      	b.n	8003594 <maxDaysInMonth+0xcc>
	}
	else if (month == RTC_MONTH_APRIL     ||
 800352a:	1dfb      	adds	r3, r7, #7
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	2b04      	cmp	r3, #4
 8003530:	d00b      	beq.n	800354a <maxDaysInMonth+0x82>
 8003532:	1dfb      	adds	r3, r7, #7
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	2b06      	cmp	r3, #6
 8003538:	d007      	beq.n	800354a <maxDaysInMonth+0x82>
			 month == RTC_MONTH_JUNE      ||
 800353a:	1dfb      	adds	r3, r7, #7
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	2b09      	cmp	r3, #9
 8003540:	d003      	beq.n	800354a <maxDaysInMonth+0x82>
			 month == RTC_MONTH_SEPTEMBER ||
 8003542:	1dfb      	adds	r3, r7, #7
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	2b11      	cmp	r3, #17
 8003548:	d101      	bne.n	800354e <maxDaysInMonth+0x86>
			 month == RTC_MONTH_NOVEMBER) {
		return 30;
 800354a:	231e      	movs	r3, #30
 800354c:	e022      	b.n	8003594 <maxDaysInMonth+0xcc>
	}

	// february/leap year calculator
	// leap year for every 4th year, but every 100th year is not a leap year except on every 400th year
	// ex. 2020 is a leap year, 2100 is not a leap year, 2000 is a leap year.
	else if (year % 400 == 0) return 29;
 800354e:	1d3b      	adds	r3, r7, #4
 8003550:	881a      	ldrh	r2, [r3, #0]
 8003552:	23c8      	movs	r3, #200	; 0xc8
 8003554:	0059      	lsls	r1, r3, #1
 8003556:	0010      	movs	r0, r2
 8003558:	f7fc fe64 	bl	8000224 <__aeabi_uidivmod>
 800355c:	000b      	movs	r3, r1
 800355e:	b29b      	uxth	r3, r3
 8003560:	2b00      	cmp	r3, #0
 8003562:	d101      	bne.n	8003568 <maxDaysInMonth+0xa0>
 8003564:	231d      	movs	r3, #29
 8003566:	e015      	b.n	8003594 <maxDaysInMonth+0xcc>
	else if (year % 100 == 0) return 28;
 8003568:	1d3b      	adds	r3, r7, #4
 800356a:	881b      	ldrh	r3, [r3, #0]
 800356c:	2164      	movs	r1, #100	; 0x64
 800356e:	0018      	movs	r0, r3
 8003570:	f7fc fe58 	bl	8000224 <__aeabi_uidivmod>
 8003574:	000b      	movs	r3, r1
 8003576:	b29b      	uxth	r3, r3
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <maxDaysInMonth+0xb8>
 800357c:	231c      	movs	r3, #28
 800357e:	e009      	b.n	8003594 <maxDaysInMonth+0xcc>
	else if (year % 4 == 0) return 29;
 8003580:	1d3b      	adds	r3, r7, #4
 8003582:	881b      	ldrh	r3, [r3, #0]
 8003584:	2203      	movs	r2, #3
 8003586:	4013      	ands	r3, r2
 8003588:	b29b      	uxth	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <maxDaysInMonth+0xca>
 800358e:	231d      	movs	r3, #29
 8003590:	e000      	b.n	8003594 <maxDaysInMonth+0xcc>
	else return 28;
 8003592:	231c      	movs	r3, #28
}
 8003594:	0018      	movs	r0, r3
 8003596:	46bd      	mov	sp, r7
 8003598:	b002      	add	sp, #8
 800359a:	bd80      	pop	{r7, pc}

0800359c <initFace>:

void initFace() {
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
	isFaceBeingChanged = 1;
 80035a0:	4b05      	ldr	r3, [pc, #20]	; (80035b8 <initFace+0x1c>)
 80035a2:	2201      	movs	r2, #1
 80035a4:	701a      	strb	r2, [r3, #0]
	faceOnDisplay = faceClock;
 80035a6:	4b05      	ldr	r3, [pc, #20]	; (80035bc <initFace+0x20>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	701a      	strb	r2, [r3, #0]
	updateFace.clock = 1;
 80035ac:	4b04      	ldr	r3, [pc, #16]	; (80035c0 <initFace+0x24>)
 80035ae:	2201      	movs	r2, #1
 80035b0:	701a      	strb	r2, [r3, #0]
}
 80035b2:	46c0      	nop			; (mov r8, r8)
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	20000104 	.word	0x20000104
 80035bc:	20000105 	.word	0x20000105
 80035c0:	2000015c 	.word	0x2000015c

080035c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035c8:	4b07      	ldr	r3, [pc, #28]	; (80035e8 <HAL_MspInit+0x24>)
 80035ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035cc:	4b06      	ldr	r3, [pc, #24]	; (80035e8 <HAL_MspInit+0x24>)
 80035ce:	2101      	movs	r1, #1
 80035d0:	430a      	orrs	r2, r1
 80035d2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80035d4:	4b04      	ldr	r3, [pc, #16]	; (80035e8 <HAL_MspInit+0x24>)
 80035d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035d8:	4b03      	ldr	r3, [pc, #12]	; (80035e8 <HAL_MspInit+0x24>)
 80035da:	2180      	movs	r1, #128	; 0x80
 80035dc:	0549      	lsls	r1, r1, #21
 80035de:	430a      	orrs	r2, r1
 80035e0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035e2:	46c0      	nop			; (mov r8, r8)
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	40021000 	.word	0x40021000

080035ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b088      	sub	sp, #32
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035f4:	230c      	movs	r3, #12
 80035f6:	18fb      	adds	r3, r7, r3
 80035f8:	0018      	movs	r0, r3
 80035fa:	2314      	movs	r3, #20
 80035fc:	001a      	movs	r2, r3
 80035fe:	2100      	movs	r1, #0
 8003600:	f004 fae9 	bl	8007bd6 <memset>
  if(hadc->Instance==ADC1)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a15      	ldr	r2, [pc, #84]	; (8003660 <HAL_ADC_MspInit+0x74>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d123      	bne.n	8003656 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800360e:	4b15      	ldr	r3, [pc, #84]	; (8003664 <HAL_ADC_MspInit+0x78>)
 8003610:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003612:	4b14      	ldr	r3, [pc, #80]	; (8003664 <HAL_ADC_MspInit+0x78>)
 8003614:	2180      	movs	r1, #128	; 0x80
 8003616:	0089      	lsls	r1, r1, #2
 8003618:	430a      	orrs	r2, r1
 800361a:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800361c:	4b11      	ldr	r3, [pc, #68]	; (8003664 <HAL_ADC_MspInit+0x78>)
 800361e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003620:	4b10      	ldr	r3, [pc, #64]	; (8003664 <HAL_ADC_MspInit+0x78>)
 8003622:	2101      	movs	r1, #1
 8003624:	430a      	orrs	r2, r1
 8003626:	62da      	str	r2, [r3, #44]	; 0x2c
 8003628:	4b0e      	ldr	r3, [pc, #56]	; (8003664 <HAL_ADC_MspInit+0x78>)
 800362a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362c:	2201      	movs	r2, #1
 800362e:	4013      	ands	r3, r2
 8003630:	60bb      	str	r3, [r7, #8]
 8003632:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration    
    PA0     ------> ADC_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003634:	210c      	movs	r1, #12
 8003636:	187b      	adds	r3, r7, r1
 8003638:	2201      	movs	r2, #1
 800363a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800363c:	187b      	adds	r3, r7, r1
 800363e:	2203      	movs	r2, #3
 8003640:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003642:	187b      	adds	r3, r7, r1
 8003644:	2200      	movs	r2, #0
 8003646:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003648:	187a      	adds	r2, r7, r1
 800364a:	23a0      	movs	r3, #160	; 0xa0
 800364c:	05db      	lsls	r3, r3, #23
 800364e:	0011      	movs	r1, r2
 8003650:	0018      	movs	r0, r3
 8003652:	f000 ff9d 	bl	8004590 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003656:	46c0      	nop			; (mov r8, r8)
 8003658:	46bd      	mov	sp, r7
 800365a:	b008      	add	sp, #32
 800365c:	bd80      	pop	{r7, pc}
 800365e:	46c0      	nop			; (mov r8, r8)
 8003660:	40012400 	.word	0x40012400
 8003664:	40021000 	.word	0x40021000

08003668 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  if(hlptim->Instance==LPTIM1)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a0a      	ldr	r2, [pc, #40]	; (80036a0 <HAL_LPTIM_MspInit+0x38>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d10e      	bne.n	8003698 <HAL_LPTIM_MspInit+0x30>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800367a:	4b0a      	ldr	r3, [pc, #40]	; (80036a4 <HAL_LPTIM_MspInit+0x3c>)
 800367c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800367e:	4b09      	ldr	r3, [pc, #36]	; (80036a4 <HAL_LPTIM_MspInit+0x3c>)
 8003680:	2180      	movs	r1, #128	; 0x80
 8003682:	0609      	lsls	r1, r1, #24
 8003684:	430a      	orrs	r2, r1
 8003686:	639a      	str	r2, [r3, #56]	; 0x38
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8003688:	2200      	movs	r2, #0
 800368a:	2100      	movs	r1, #0
 800368c:	200d      	movs	r0, #13
 800368e:	f000 fddf 	bl	8004250 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8003692:	200d      	movs	r0, #13
 8003694:	f000 fdf1 	bl	800427a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8003698:	46c0      	nop			; (mov r8, r8)
 800369a:	46bd      	mov	sp, r7
 800369c:	b002      	add	sp, #8
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	40007c00 	.word	0x40007c00
 80036a4:	40021000 	.word	0x40021000

080036a8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a0a      	ldr	r2, [pc, #40]	; (80036e0 <HAL_RTC_MspInit+0x38>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d10e      	bne.n	80036d8 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80036ba:	4b0a      	ldr	r3, [pc, #40]	; (80036e4 <HAL_RTC_MspInit+0x3c>)
 80036bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036be:	4b09      	ldr	r3, [pc, #36]	; (80036e4 <HAL_RTC_MspInit+0x3c>)
 80036c0:	2180      	movs	r1, #128	; 0x80
 80036c2:	02c9      	lsls	r1, r1, #11
 80036c4:	430a      	orrs	r2, r1
 80036c6:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80036c8:	2200      	movs	r2, #0
 80036ca:	2100      	movs	r1, #0
 80036cc:	2002      	movs	r0, #2
 80036ce:	f000 fdbf 	bl	8004250 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80036d2:	2002      	movs	r0, #2
 80036d4:	f000 fdd1 	bl	800427a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80036d8:	46c0      	nop			; (mov r8, r8)
 80036da:	46bd      	mov	sp, r7
 80036dc:	b002      	add	sp, #8
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	40002800 	.word	0x40002800
 80036e4:	40021000 	.word	0x40021000

080036e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b088      	sub	sp, #32
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036f0:	230c      	movs	r3, #12
 80036f2:	18fb      	adds	r3, r7, r3
 80036f4:	0018      	movs	r0, r3
 80036f6:	2314      	movs	r3, #20
 80036f8:	001a      	movs	r2, r3
 80036fa:	2100      	movs	r1, #0
 80036fc:	f004 fa6b 	bl	8007bd6 <memset>
  if(hspi->Instance==SPI1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a30      	ldr	r2, [pc, #192]	; (80037c8 <HAL_SPI_MspInit+0xe0>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d15a      	bne.n	80037c0 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800370a:	4b30      	ldr	r3, [pc, #192]	; (80037cc <HAL_SPI_MspInit+0xe4>)
 800370c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800370e:	4b2f      	ldr	r3, [pc, #188]	; (80037cc <HAL_SPI_MspInit+0xe4>)
 8003710:	2180      	movs	r1, #128	; 0x80
 8003712:	0149      	lsls	r1, r1, #5
 8003714:	430a      	orrs	r2, r1
 8003716:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003718:	4b2c      	ldr	r3, [pc, #176]	; (80037cc <HAL_SPI_MspInit+0xe4>)
 800371a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800371c:	4b2b      	ldr	r3, [pc, #172]	; (80037cc <HAL_SPI_MspInit+0xe4>)
 800371e:	2101      	movs	r1, #1
 8003720:	430a      	orrs	r2, r1
 8003722:	62da      	str	r2, [r3, #44]	; 0x2c
 8003724:	4b29      	ldr	r3, [pc, #164]	; (80037cc <HAL_SPI_MspInit+0xe4>)
 8003726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003728:	2201      	movs	r2, #1
 800372a:	4013      	ands	r3, r2
 800372c:	60bb      	str	r3, [r7, #8]
 800372e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003730:	210c      	movs	r1, #12
 8003732:	187b      	adds	r3, r7, r1
 8003734:	22a0      	movs	r2, #160	; 0xa0
 8003736:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003738:	187b      	adds	r3, r7, r1
 800373a:	2202      	movs	r2, #2
 800373c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800373e:	187b      	adds	r3, r7, r1
 8003740:	2200      	movs	r2, #0
 8003742:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003744:	187b      	adds	r3, r7, r1
 8003746:	2203      	movs	r2, #3
 8003748:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800374a:	187b      	adds	r3, r7, r1
 800374c:	2200      	movs	r2, #0
 800374e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003750:	187a      	adds	r2, r7, r1
 8003752:	23a0      	movs	r3, #160	; 0xa0
 8003754:	05db      	lsls	r3, r3, #23
 8003756:	0011      	movs	r1, r2
 8003758:	0018      	movs	r0, r3
 800375a:	f000 ff19 	bl	8004590 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800375e:	4b1c      	ldr	r3, [pc, #112]	; (80037d0 <HAL_SPI_MspInit+0xe8>)
 8003760:	4a1c      	ldr	r2, [pc, #112]	; (80037d4 <HAL_SPI_MspInit+0xec>)
 8003762:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8003764:	4b1a      	ldr	r3, [pc, #104]	; (80037d0 <HAL_SPI_MspInit+0xe8>)
 8003766:	2201      	movs	r2, #1
 8003768:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800376a:	4b19      	ldr	r3, [pc, #100]	; (80037d0 <HAL_SPI_MspInit+0xe8>)
 800376c:	2210      	movs	r2, #16
 800376e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003770:	4b17      	ldr	r3, [pc, #92]	; (80037d0 <HAL_SPI_MspInit+0xe8>)
 8003772:	2200      	movs	r2, #0
 8003774:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003776:	4b16      	ldr	r3, [pc, #88]	; (80037d0 <HAL_SPI_MspInit+0xe8>)
 8003778:	2280      	movs	r2, #128	; 0x80
 800377a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800377c:	4b14      	ldr	r3, [pc, #80]	; (80037d0 <HAL_SPI_MspInit+0xe8>)
 800377e:	2200      	movs	r2, #0
 8003780:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003782:	4b13      	ldr	r3, [pc, #76]	; (80037d0 <HAL_SPI_MspInit+0xe8>)
 8003784:	2200      	movs	r2, #0
 8003786:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003788:	4b11      	ldr	r3, [pc, #68]	; (80037d0 <HAL_SPI_MspInit+0xe8>)
 800378a:	2200      	movs	r2, #0
 800378c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800378e:	4b10      	ldr	r3, [pc, #64]	; (80037d0 <HAL_SPI_MspInit+0xe8>)
 8003790:	2200      	movs	r2, #0
 8003792:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003794:	4b0e      	ldr	r3, [pc, #56]	; (80037d0 <HAL_SPI_MspInit+0xe8>)
 8003796:	0018      	movs	r0, r3
 8003798:	f000 fd8c 	bl	80042b4 <HAL_DMA_Init>
 800379c:	1e03      	subs	r3, r0, #0
 800379e:	d001      	beq.n	80037a4 <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 80037a0:	f7fe fcf8 	bl	8002194 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a0a      	ldr	r2, [pc, #40]	; (80037d0 <HAL_SPI_MspInit+0xe8>)
 80037a8:	649a      	str	r2, [r3, #72]	; 0x48
 80037aa:	4b09      	ldr	r3, [pc, #36]	; (80037d0 <HAL_SPI_MspInit+0xe8>)
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80037b0:	2200      	movs	r2, #0
 80037b2:	2100      	movs	r1, #0
 80037b4:	2019      	movs	r0, #25
 80037b6:	f000 fd4b 	bl	8004250 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80037ba:	2019      	movs	r0, #25
 80037bc:	f000 fd5d 	bl	800427a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80037c0:	46c0      	nop			; (mov r8, r8)
 80037c2:	46bd      	mov	sp, r7
 80037c4:	b008      	add	sp, #32
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	40013000 	.word	0x40013000
 80037cc:	40021000 	.word	0x40021000
 80037d0:	200002f0 	.word	0x200002f0
 80037d4:	40020030 	.word	0x40020030

080037d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	2380      	movs	r3, #128	; 0x80
 80037e6:	05db      	lsls	r3, r3, #23
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d106      	bne.n	80037fa <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80037ec:	4b18      	ldr	r3, [pc, #96]	; (8003850 <HAL_TIM_Base_MspInit+0x78>)
 80037ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037f0:	4b17      	ldr	r3, [pc, #92]	; (8003850 <HAL_TIM_Base_MspInit+0x78>)
 80037f2:	2101      	movs	r1, #1
 80037f4:	430a      	orrs	r2, r1
 80037f6:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }

}
 80037f8:	e026      	b.n	8003848 <HAL_TIM_Base_MspInit+0x70>
  else if(htim_base->Instance==TIM21)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a15      	ldr	r2, [pc, #84]	; (8003854 <HAL_TIM_Base_MspInit+0x7c>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d10e      	bne.n	8003822 <HAL_TIM_Base_MspInit+0x4a>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8003804:	4b12      	ldr	r3, [pc, #72]	; (8003850 <HAL_TIM_Base_MspInit+0x78>)
 8003806:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003808:	4b11      	ldr	r3, [pc, #68]	; (8003850 <HAL_TIM_Base_MspInit+0x78>)
 800380a:	2104      	movs	r1, #4
 800380c:	430a      	orrs	r2, r1
 800380e:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 8003810:	2200      	movs	r2, #0
 8003812:	2100      	movs	r1, #0
 8003814:	2014      	movs	r0, #20
 8003816:	f000 fd1b 	bl	8004250 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 800381a:	2014      	movs	r0, #20
 800381c:	f000 fd2d 	bl	800427a <HAL_NVIC_EnableIRQ>
}
 8003820:	e012      	b.n	8003848 <HAL_TIM_Base_MspInit+0x70>
  else if(htim_base->Instance==TIM22)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a0c      	ldr	r2, [pc, #48]	; (8003858 <HAL_TIM_Base_MspInit+0x80>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d10d      	bne.n	8003848 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM22_CLK_ENABLE();
 800382c:	4b08      	ldr	r3, [pc, #32]	; (8003850 <HAL_TIM_Base_MspInit+0x78>)
 800382e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003830:	4b07      	ldr	r3, [pc, #28]	; (8003850 <HAL_TIM_Base_MspInit+0x78>)
 8003832:	2120      	movs	r1, #32
 8003834:	430a      	orrs	r2, r1
 8003836:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM22_IRQn, 0, 0);
 8003838:	2200      	movs	r2, #0
 800383a:	2100      	movs	r1, #0
 800383c:	2016      	movs	r0, #22
 800383e:	f000 fd07 	bl	8004250 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM22_IRQn);
 8003842:	2016      	movs	r0, #22
 8003844:	f000 fd19 	bl	800427a <HAL_NVIC_EnableIRQ>
}
 8003848:	46c0      	nop			; (mov r8, r8)
 800384a:	46bd      	mov	sp, r7
 800384c:	b002      	add	sp, #8
 800384e:	bd80      	pop	{r7, pc}
 8003850:	40021000 	.word	0x40021000
 8003854:	40010800 	.word	0x40010800
 8003858:	40011400 	.word	0x40011400

0800385c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003860:	46c0      	nop			; (mov r8, r8)
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800386a:	e7fe      	b.n	800386a <HardFault_Handler+0x4>

0800386c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003870:	46c0      	nop			; (mov r8, r8)
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800387a:	46c0      	nop			; (mov r8, r8)
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003884:	f000 f9d6 	bl	8003c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003888:	46c0      	nop			; (mov r8, r8)
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
	...

08003890 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003894:	4b03      	ldr	r3, [pc, #12]	; (80038a4 <RTC_IRQHandler+0x14>)
 8003896:	0018      	movs	r0, r3
 8003898:	f002 feaa 	bl	80065f0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800389c:	46c0      	nop			; (mov r8, r8)
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	46c0      	nop			; (mov r8, r8)
 80038a4:	20000194 	.word	0x20000194

080038a8 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80038ac:	2004      	movs	r0, #4
 80038ae:	f001 f839 	bl	8004924 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80038b2:	46c0      	nop			; (mov r8, r8)
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80038bc:	2380      	movs	r3, #128	; 0x80
 80038be:	019b      	lsls	r3, r3, #6
 80038c0:	0018      	movs	r0, r3
 80038c2:	f001 f82f 	bl	8004924 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80038c6:	2380      	movs	r3, #128	; 0x80
 80038c8:	01db      	lsls	r3, r3, #7
 80038ca:	0018      	movs	r0, r3
 80038cc:	f001 f82a 	bl	8004924 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80038d0:	2380      	movs	r3, #128	; 0x80
 80038d2:	021b      	lsls	r3, r3, #8
 80038d4:	0018      	movs	r0, r3
 80038d6:	f001 f825 	bl	8004924 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80038da:	46c0      	nop			; (mov r8, r8)
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80038e4:	4b03      	ldr	r3, [pc, #12]	; (80038f4 <DMA1_Channel2_3_IRQHandler+0x14>)
 80038e6:	0018      	movs	r0, r3
 80038e8:	f000 fda4 	bl	8004434 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80038ec:	46c0      	nop			; (mov r8, r8)
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	46c0      	nop			; (mov r8, r8)
 80038f4:	200002f0 	.word	0x200002f0

080038f8 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 80038fc:	4b03      	ldr	r3, [pc, #12]	; (800390c <LPTIM1_IRQHandler+0x14>)
 80038fe:	0018      	movs	r0, r3
 8003900:	f001 f930 	bl	8004b64 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8003904:	46c0      	nop			; (mov r8, r8)
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	46c0      	nop			; (mov r8, r8)
 800390c:	20000164 	.word	0x20000164

08003910 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8003914:	4b03      	ldr	r3, [pc, #12]	; (8003924 <TIM21_IRQHandler+0x14>)
 8003916:	0018      	movs	r0, r3
 8003918:	f003 fcba 	bl	8007290 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 800391c:	46c0      	nop			; (mov r8, r8)
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	46c0      	nop			; (mov r8, r8)
 8003924:	2000021c 	.word	0x2000021c

08003928 <TIM22_IRQHandler>:

/**
  * @brief This function handles TIM22 global interrupt.
  */
void TIM22_IRQHandler(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM22_IRQn 0 */

  /* USER CODE END TIM22_IRQn 0 */
  HAL_TIM_IRQHandler(&htim22);
 800392c:	4b03      	ldr	r3, [pc, #12]	; (800393c <TIM22_IRQHandler+0x14>)
 800392e:	0018      	movs	r0, r3
 8003930:	f003 fcae 	bl	8007290 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM22_IRQn 1 */

  /* USER CODE END TIM22_IRQn 1 */
}
 8003934:	46c0      	nop			; (mov r8, r8)
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	46c0      	nop			; (mov r8, r8)
 800393c:	20000120 	.word	0x20000120

08003940 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003944:	4b03      	ldr	r3, [pc, #12]	; (8003954 <SPI1_IRQHandler+0x14>)
 8003946:	0018      	movs	r0, r3
 8003948:	f003 f97e 	bl	8006c48 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800394c:	46c0      	nop			; (mov r8, r8)
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	46c0      	nop			; (mov r8, r8)
 8003954:	200001c0 	.word	0x200001c0

08003958 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003960:	4b11      	ldr	r3, [pc, #68]	; (80039a8 <_sbrk+0x50>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d102      	bne.n	800396e <_sbrk+0x16>
		heap_end = &end;
 8003968:	4b0f      	ldr	r3, [pc, #60]	; (80039a8 <_sbrk+0x50>)
 800396a:	4a10      	ldr	r2, [pc, #64]	; (80039ac <_sbrk+0x54>)
 800396c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800396e:	4b0e      	ldr	r3, [pc, #56]	; (80039a8 <_sbrk+0x50>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003974:	4b0c      	ldr	r3, [pc, #48]	; (80039a8 <_sbrk+0x50>)
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	18d3      	adds	r3, r2, r3
 800397c:	466a      	mov	r2, sp
 800397e:	4293      	cmp	r3, r2
 8003980:	d907      	bls.n	8003992 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003982:	f004 f8f5 	bl	8007b70 <__errno>
 8003986:	0003      	movs	r3, r0
 8003988:	220c      	movs	r2, #12
 800398a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800398c:	2301      	movs	r3, #1
 800398e:	425b      	negs	r3, r3
 8003990:	e006      	b.n	80039a0 <_sbrk+0x48>
	}

	heap_end += incr;
 8003992:	4b05      	ldr	r3, [pc, #20]	; (80039a8 <_sbrk+0x50>)
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	18d2      	adds	r2, r2, r3
 800399a:	4b03      	ldr	r3, [pc, #12]	; (80039a8 <_sbrk+0x50>)
 800399c:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 800399e:	68fb      	ldr	r3, [r7, #12]
}
 80039a0:	0018      	movs	r0, r3
 80039a2:	46bd      	mov	sp, r7
 80039a4:	b004      	add	sp, #16
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	20000108 	.word	0x20000108
 80039ac:	20000340 	.word	0x20000340

080039b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 80039b4:	4b17      	ldr	r3, [pc, #92]	; (8003a14 <SystemInit+0x64>)
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	4b16      	ldr	r3, [pc, #88]	; (8003a14 <SystemInit+0x64>)
 80039ba:	2180      	movs	r1, #128	; 0x80
 80039bc:	0049      	lsls	r1, r1, #1
 80039be:	430a      	orrs	r2, r1
 80039c0:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80039c2:	4b14      	ldr	r3, [pc, #80]	; (8003a14 <SystemInit+0x64>)
 80039c4:	68da      	ldr	r2, [r3, #12]
 80039c6:	4b13      	ldr	r3, [pc, #76]	; (8003a14 <SystemInit+0x64>)
 80039c8:	4913      	ldr	r1, [pc, #76]	; (8003a18 <SystemInit+0x68>)
 80039ca:	400a      	ands	r2, r1
 80039cc:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80039ce:	4b11      	ldr	r3, [pc, #68]	; (8003a14 <SystemInit+0x64>)
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	4b10      	ldr	r3, [pc, #64]	; (8003a14 <SystemInit+0x64>)
 80039d4:	4911      	ldr	r1, [pc, #68]	; (8003a1c <SystemInit+0x6c>)
 80039d6:	400a      	ands	r2, r1
 80039d8:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80039da:	4b0e      	ldr	r3, [pc, #56]	; (8003a14 <SystemInit+0x64>)
 80039dc:	689a      	ldr	r2, [r3, #8]
 80039de:	4b0d      	ldr	r3, [pc, #52]	; (8003a14 <SystemInit+0x64>)
 80039e0:	2101      	movs	r1, #1
 80039e2:	438a      	bics	r2, r1
 80039e4:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80039e6:	4b0b      	ldr	r3, [pc, #44]	; (8003a14 <SystemInit+0x64>)
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	4b0a      	ldr	r3, [pc, #40]	; (8003a14 <SystemInit+0x64>)
 80039ec:	490c      	ldr	r1, [pc, #48]	; (8003a20 <SystemInit+0x70>)
 80039ee:	400a      	ands	r2, r1
 80039f0:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80039f2:	4b08      	ldr	r3, [pc, #32]	; (8003a14 <SystemInit+0x64>)
 80039f4:	68da      	ldr	r2, [r3, #12]
 80039f6:	4b07      	ldr	r3, [pc, #28]	; (8003a14 <SystemInit+0x64>)
 80039f8:	490a      	ldr	r1, [pc, #40]	; (8003a24 <SystemInit+0x74>)
 80039fa:	400a      	ands	r2, r1
 80039fc:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80039fe:	4b05      	ldr	r3, [pc, #20]	; (8003a14 <SystemInit+0x64>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003a04:	4b08      	ldr	r3, [pc, #32]	; (8003a28 <SystemInit+0x78>)
 8003a06:	2280      	movs	r2, #128	; 0x80
 8003a08:	0512      	lsls	r2, r2, #20
 8003a0a:	609a      	str	r2, [r3, #8]
#endif
}
 8003a0c:	46c0      	nop			; (mov r8, r8)
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	46c0      	nop			; (mov r8, r8)
 8003a14:	40021000 	.word	0x40021000
 8003a18:	88ff400c 	.word	0x88ff400c
 8003a1c:	fef6fff6 	.word	0xfef6fff6
 8003a20:	fffbffff 	.word	0xfffbffff
 8003a24:	ff02ffff 	.word	0xff02ffff
 8003a28:	e000ed00 	.word	0xe000ed00

08003a2c <runStopwatch>:

// ---- Stopwatch functions ----
// set stopwatch. using lptimer. maybe better with regular timer?
// can operate in stop mode if using lptimer
// modify to update screen/set flags when necessary
void runStopwatch() {
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0
	HAL_LPTIM_Counter_Start_IT(&hlptim1, 0x8000);
 8003a30:	2380      	movs	r3, #128	; 0x80
 8003a32:	021a      	lsls	r2, r3, #8
 8003a34:	4b03      	ldr	r3, [pc, #12]	; (8003a44 <runStopwatch+0x18>)
 8003a36:	0011      	movs	r1, r2
 8003a38:	0018      	movs	r0, r3
 8003a3a:	f001 f80f 	bl	8004a5c <HAL_LPTIM_Counter_Start_IT>
}
 8003a3e:	46c0      	nop			; (mov r8, r8)
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	20000164 	.word	0x20000164

08003a48 <pauseStopwatch>:

// stop the timer or pause it or whatever.
// counter value might reset and screw up timekeeping? should save?
void pauseStopwatch() {
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
	HAL_LPTIM_Counter_Stop_IT(&hlptim1);
 8003a4c:	4b03      	ldr	r3, [pc, #12]	; (8003a5c <pauseStopwatch+0x14>)
 8003a4e:	0018      	movs	r0, r3
 8003a50:	f001 f858 	bl	8004b04 <HAL_LPTIM_Counter_Stop_IT>
//	temp = hlptim->Instance->CNT;
}
 8003a54:	46c0      	nop			; (mov r8, r8)
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	46c0      	nop			; (mov r8, r8)
 8003a5c:	20000164 	.word	0x20000164

08003a60 <clearStopwatch>:

void clearStopwatch() {
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
	pauseStopwatch();
 8003a64:	f7ff fff0 	bl	8003a48 <pauseStopwatch>
	stopwatchCNT = 0;
 8003a68:	4b02      	ldr	r3, [pc, #8]	; (8003a74 <clearStopwatch+0x14>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	601a      	str	r2, [r3, #0]
}
 8003a6e:	46c0      	nop			; (mov r8, r8)
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	20000114 	.word	0x20000114

08003a78 <HAL_LPTIM_AutoReloadMatchCallback>:
// increment variable for stopwatch counting.
// update screen if on
// how to set lptim internal clock to LSE???
//   I FOUND IT: RCC->CCIPR LPTIMSEL (2-bits, 11=LSE clock for LPTIM)
//   now...does hal do this automatically?
void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim) {
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
	// toggle pin, should toggle every 1s. change this pin
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8003a80:	4b08      	ldr	r3, [pc, #32]	; (8003aa4 <HAL_LPTIM_AutoReloadMatchCallback+0x2c>)
 8003a82:	2102      	movs	r1, #2
 8003a84:	0018      	movs	r0, r3
 8003a86:	f000 ff3b 	bl	8004900 <HAL_GPIO_TogglePin>
	stopwatchCNT++;
 8003a8a:	4b07      	ldr	r3, [pc, #28]	; (8003aa8 <HAL_LPTIM_AutoReloadMatchCallback+0x30>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	1c5a      	adds	r2, r3, #1
 8003a90:	4b05      	ldr	r3, [pc, #20]	; (8003aa8 <HAL_LPTIM_AutoReloadMatchCallback+0x30>)
 8003a92:	601a      	str	r2, [r3, #0]
	updateFace.stopwatch = 1;
 8003a94:	4b05      	ldr	r3, [pc, #20]	; (8003aac <HAL_LPTIM_AutoReloadMatchCallback+0x34>)
 8003a96:	2201      	movs	r2, #1
 8003a98:	70da      	strb	r2, [r3, #3]
}
 8003a9a:	46c0      	nop			; (mov r8, r8)
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	b002      	add	sp, #8
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	46c0      	nop			; (mov r8, r8)
 8003aa4:	50000400 	.word	0x50000400
 8003aa8:	20000114 	.word	0x20000114
 8003aac:	2000015c 	.word	0x2000015c

08003ab0 <stopTimerDisplay>:
// uses TIM21 with LSE (external timer w/ remap and done already by ST).
void runTimerDisplay() {
	HAL_TIM_Base_Start_IT(&htim21);
}

void stopTimerDisplay() {
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim21);
 8003ab4:	4b03      	ldr	r3, [pc, #12]	; (8003ac4 <stopTimerDisplay+0x14>)
 8003ab6:	0018      	movs	r0, r3
 8003ab8:	f003 fb94 	bl	80071e4 <HAL_TIM_Base_Stop_IT>
}
 8003abc:	46c0      	nop			; (mov r8, r8)
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	46c0      	nop			; (mov r8, r8)
 8003ac4:	2000021c 	.word	0x2000021c

08003ac8 <runClockDisplay>:

void runClockDisplay() {
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim22);
 8003acc:	4b03      	ldr	r3, [pc, #12]	; (8003adc <runClockDisplay+0x14>)
 8003ace:	0018      	movs	r0, r3
 8003ad0:	f003 fb66 	bl	80071a0 <HAL_TIM_Base_Start_IT>
}
 8003ad4:	46c0      	nop			; (mov r8, r8)
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	46c0      	nop			; (mov r8, r8)
 8003adc:	20000120 	.word	0x20000120

08003ae0 <HAL_TIM_PeriodElapsedCallback>:

void stopClockDisplay() {
	HAL_TIM_Base_Stop_IT(&htim22);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM21) {
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a12      	ldr	r2, [pc, #72]	; (8003b38 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d115      	bne.n	8003b1e <HAL_TIM_PeriodElapsedCallback+0x3e>
		updateFace.timer = 1;
 8003af2:	4b12      	ldr	r3, [pc, #72]	; (8003b3c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003af4:	2201      	movs	r2, #1
 8003af6:	705a      	strb	r2, [r3, #1]
//		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
		// should toggle pin every 1s. change pin
		if (watchTimerSeconds != 0) {
 8003af8:	4b11      	ldr	r3, [pc, #68]	; (8003b40 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d005      	beq.n	8003b0c <HAL_TIM_PeriodElapsedCallback+0x2c>
//			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
			watchTimerSeconds--;
 8003b00:	4b0f      	ldr	r3, [pc, #60]	; (8003b40 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	1e5a      	subs	r2, r3, #1
 8003b06:	4b0e      	ldr	r3, [pc, #56]	; (8003b40 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8003b08:	601a      	str	r2, [r3, #0]
		}
	}
	else if (htim->Instance == TIM22) {
		updateFace.clock = 1;
	}
}
 8003b0a:	e010      	b.n	8003b2e <HAL_TIM_PeriodElapsedCallback+0x4e>
			stopTimerDisplay();
 8003b0c:	f7ff ffd0 	bl	8003ab0 <stopTimerDisplay>
			isTimerRunning = 0;
 8003b10:	4b0c      	ldr	r3, [pc, #48]	; (8003b44 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	701a      	strb	r2, [r3, #0]
			updateFace.timer = 1;
 8003b16:	4b09      	ldr	r3, [pc, #36]	; (8003b3c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003b18:	2201      	movs	r2, #1
 8003b1a:	705a      	strb	r2, [r3, #1]
}
 8003b1c:	e007      	b.n	8003b2e <HAL_TIM_PeriodElapsedCallback+0x4e>
	else if (htim->Instance == TIM22) {
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a09      	ldr	r2, [pc, #36]	; (8003b48 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d102      	bne.n	8003b2e <HAL_TIM_PeriodElapsedCallback+0x4e>
		updateFace.clock = 1;
 8003b28:	4b04      	ldr	r3, [pc, #16]	; (8003b3c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	701a      	strb	r2, [r3, #0]
}
 8003b2e:	46c0      	nop			; (mov r8, r8)
 8003b30:	46bd      	mov	sp, r7
 8003b32:	b002      	add	sp, #8
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	46c0      	nop			; (mov r8, r8)
 8003b38:	40010800 	.word	0x40010800
 8003b3c:	2000015c 	.word	0x2000015c
 8003b40:	20000218 	.word	0x20000218
 8003b44:	200001bc 	.word	0x200001bc
 8003b48:	40011400 	.word	0x40011400

08003b4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003b4c:	480d      	ldr	r0, [pc, #52]	; (8003b84 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003b4e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8003b50:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003b52:	e003      	b.n	8003b5c <LoopCopyDataInit>

08003b54 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003b54:	4b0c      	ldr	r3, [pc, #48]	; (8003b88 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8003b56:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003b58:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003b5a:	3104      	adds	r1, #4

08003b5c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8003b5c:	480b      	ldr	r0, [pc, #44]	; (8003b8c <LoopForever+0xa>)
  ldr  r3, =_edata
 8003b5e:	4b0c      	ldr	r3, [pc, #48]	; (8003b90 <LoopForever+0xe>)
  adds  r2, r0, r1
 8003b60:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003b62:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003b64:	d3f6      	bcc.n	8003b54 <CopyDataInit>
  ldr  r2, =_sbss
 8003b66:	4a0b      	ldr	r2, [pc, #44]	; (8003b94 <LoopForever+0x12>)
  b  LoopFillZerobss
 8003b68:	e002      	b.n	8003b70 <LoopFillZerobss>

08003b6a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8003b6a:	2300      	movs	r3, #0
  str  r3, [r2]
 8003b6c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b6e:	3204      	adds	r2, #4

08003b70 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8003b70:	4b09      	ldr	r3, [pc, #36]	; (8003b98 <LoopForever+0x16>)
  cmp  r2, r3
 8003b72:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003b74:	d3f9      	bcc.n	8003b6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003b76:	f7ff ff1b 	bl	80039b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b7a:	f003 ffff 	bl	8007b7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b7e:	f7fd feb1 	bl	80018e4 <main>

08003b82 <LoopForever>:

LoopForever:
    b LoopForever
 8003b82:	e7fe      	b.n	8003b82 <LoopForever>
   ldr   r0, =_estack
 8003b84:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8003b88:	08008bc4 	.word	0x08008bc4
  ldr  r0, =_sdata
 8003b8c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003b90:	200000bc 	.word	0x200000bc
  ldr  r2, =_sbss
 8003b94:	200000bc 	.word	0x200000bc
  ldr  r3, = _ebss
 8003b98:	20000340 	.word	0x20000340

08003b9c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b9c:	e7fe      	b.n	8003b9c <ADC1_COMP_IRQHandler>
	...

08003ba0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003ba6:	1dfb      	adds	r3, r7, #7
 8003ba8:	2200      	movs	r2, #0
 8003baa:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003bac:	4b0b      	ldr	r3, [pc, #44]	; (8003bdc <HAL_Init+0x3c>)
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	4b0a      	ldr	r3, [pc, #40]	; (8003bdc <HAL_Init+0x3c>)
 8003bb2:	2140      	movs	r1, #64	; 0x40
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003bb8:	2000      	movs	r0, #0
 8003bba:	f000 f811 	bl	8003be0 <HAL_InitTick>
 8003bbe:	1e03      	subs	r3, r0, #0
 8003bc0:	d003      	beq.n	8003bca <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8003bc2:	1dfb      	adds	r3, r7, #7
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	701a      	strb	r2, [r3, #0]
 8003bc8:	e001      	b.n	8003bce <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003bca:	f7ff fcfb 	bl	80035c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003bce:	1dfb      	adds	r3, r7, #7
 8003bd0:	781b      	ldrb	r3, [r3, #0]
}
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	b002      	add	sp, #8
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	46c0      	nop			; (mov r8, r8)
 8003bdc:	40022000 	.word	0x40022000

08003be0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003be8:	230f      	movs	r3, #15
 8003bea:	18fb      	adds	r3, r7, r3
 8003bec:	2200      	movs	r2, #0
 8003bee:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8003bf0:	4b0f      	ldr	r3, [pc, #60]	; (8003c30 <HAL_InitTick+0x50>)
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	23fa      	movs	r3, #250	; 0xfa
 8003bf6:	0099      	lsls	r1, r3, #2
 8003bf8:	0010      	movs	r0, r2
 8003bfa:	f7fc fa8d 	bl	8000118 <__udivsi3>
 8003bfe:	0003      	movs	r3, r0
 8003c00:	0018      	movs	r0, r3
 8003c02:	f000 fb4a 	bl	800429a <HAL_SYSTICK_Config>
 8003c06:	1e03      	subs	r3, r0, #0
 8003c08:	d004      	beq.n	8003c14 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 8003c0a:	230f      	movs	r3, #15
 8003c0c:	18fb      	adds	r3, r7, r3
 8003c0e:	2201      	movs	r2, #1
 8003c10:	701a      	strb	r2, [r3, #0]
 8003c12:	e006      	b.n	8003c22 <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8003c14:	6879      	ldr	r1, [r7, #4]
 8003c16:	2301      	movs	r3, #1
 8003c18:	425b      	negs	r3, r3
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	0018      	movs	r0, r3
 8003c1e:	f000 fb17 	bl	8004250 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 8003c22:	230f      	movs	r3, #15
 8003c24:	18fb      	adds	r3, r7, r3
 8003c26:	781b      	ldrb	r3, [r3, #0]
}
 8003c28:	0018      	movs	r0, r3
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	b004      	add	sp, #16
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	20000054 	.word	0x20000054

08003c34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
  uwTick++;
 8003c38:	4b03      	ldr	r3, [pc, #12]	; (8003c48 <HAL_IncTick+0x14>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	1c5a      	adds	r2, r3, #1
 8003c3e:	4b02      	ldr	r3, [pc, #8]	; (8003c48 <HAL_IncTick+0x14>)
 8003c40:	601a      	str	r2, [r3, #0]
}
 8003c42:	46c0      	nop			; (mov r8, r8)
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	20000338 	.word	0x20000338

08003c4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8003c50:	4b02      	ldr	r3, [pc, #8]	; (8003c5c <HAL_GetTick+0x10>)
 8003c52:	681b      	ldr	r3, [r3, #0]
}
 8003c54:	0018      	movs	r0, r3
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	46c0      	nop			; (mov r8, r8)
 8003c5c:	20000338 	.word	0x20000338

08003c60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c68:	f7ff fff0 	bl	8003c4c <HAL_GetTick>
 8003c6c:	0003      	movs	r3, r0
 8003c6e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	3301      	adds	r3, #1
 8003c78:	d002      	beq.n	8003c80 <HAL_Delay+0x20>
  {
    wait++;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c80:	46c0      	nop			; (mov r8, r8)
 8003c82:	f7ff ffe3 	bl	8003c4c <HAL_GetTick>
 8003c86:	0002      	movs	r2, r0
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d8f7      	bhi.n	8003c82 <HAL_Delay+0x22>
  {
  }
}
 8003c92:	46c0      	nop			; (mov r8, r8)
 8003c94:	46bd      	mov	sp, r7
 8003c96:	b004      	add	sp, #16
 8003c98:	bd80      	pop	{r7, pc}
	...

08003c9c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e159      	b.n	8003f62 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10a      	bne.n	8003ccc <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2250      	movs	r2, #80	; 0x50
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	f7ff fc90 	bl	80035ec <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd0:	2210      	movs	r2, #16
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	2b10      	cmp	r3, #16
 8003cd6:	d005      	beq.n	8003ce4 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	2204      	movs	r2, #4
 8003ce0:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003ce2:	d00b      	beq.n	8003cfc <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce8:	2210      	movs	r2, #16
 8003cea:	431a      	orrs	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2250      	movs	r2, #80	; 0x50
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e132      	b.n	8003f62 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d00:	4a9a      	ldr	r2, [pc, #616]	; (8003f6c <HAL_ADC_Init+0x2d0>)
 8003d02:	4013      	ands	r3, r2
 8003d04:	2202      	movs	r2, #2
 8003d06:	431a      	orrs	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	2203      	movs	r2, #3
 8003d14:	4013      	ands	r3, r2
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d108      	bne.n	8003d2c <HAL_ADC_Init+0x90>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2201      	movs	r2, #1
 8003d22:	4013      	ands	r3, r2
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d101      	bne.n	8003d2c <HAL_ADC_Init+0x90>
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e000      	b.n	8003d2e <HAL_ADC_Init+0x92>
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d149      	bne.n	8003dc6 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685a      	ldr	r2, [r3, #4]
 8003d36:	23c0      	movs	r3, #192	; 0xc0
 8003d38:	061b      	lsls	r3, r3, #24
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d00b      	beq.n	8003d56 <HAL_ADC_Init+0xba>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685a      	ldr	r2, [r3, #4]
 8003d42:	2380      	movs	r3, #128	; 0x80
 8003d44:	05db      	lsls	r3, r3, #23
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d005      	beq.n	8003d56 <HAL_ADC_Init+0xba>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	2380      	movs	r3, #128	; 0x80
 8003d50:	061b      	lsls	r3, r3, #24
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d111      	bne.n	8003d7a <HAL_ADC_Init+0xde>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	691a      	ldr	r2, [r3, #16]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	0092      	lsls	r2, r2, #2
 8003d62:	0892      	lsrs	r2, r2, #2
 8003d64:	611a      	str	r2, [r3, #16]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	6919      	ldr	r1, [r3, #16]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685a      	ldr	r2, [r3, #4]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	430a      	orrs	r2, r1
 8003d76:	611a      	str	r2, [r3, #16]
 8003d78:	e014      	b.n	8003da4 <HAL_ADC_Init+0x108>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	691a      	ldr	r2, [r3, #16]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	0092      	lsls	r2, r2, #2
 8003d86:	0892      	lsrs	r2, r2, #2
 8003d88:	611a      	str	r2, [r3, #16]
 8003d8a:	4b79      	ldr	r3, [pc, #484]	; (8003f70 <HAL_ADC_Init+0x2d4>)
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	4b78      	ldr	r3, [pc, #480]	; (8003f70 <HAL_ADC_Init+0x2d4>)
 8003d90:	4978      	ldr	r1, [pc, #480]	; (8003f74 <HAL_ADC_Init+0x2d8>)
 8003d92:	400a      	ands	r2, r1
 8003d94:	601a      	str	r2, [r3, #0]
 8003d96:	4b76      	ldr	r3, [pc, #472]	; (8003f70 <HAL_ADC_Init+0x2d4>)
 8003d98:	6819      	ldr	r1, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685a      	ldr	r2, [r3, #4]
 8003d9e:	4b74      	ldr	r3, [pc, #464]	; (8003f70 <HAL_ADC_Init+0x2d4>)
 8003da0:	430a      	orrs	r2, r1
 8003da2:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68da      	ldr	r2, [r3, #12]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2118      	movs	r1, #24
 8003db0:	438a      	bics	r2, r1
 8003db2:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68d9      	ldr	r1, [r3, #12]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	689a      	ldr	r2, [r3, #8]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8003dc6:	4b6a      	ldr	r3, [pc, #424]	; (8003f70 <HAL_ADC_Init+0x2d4>)
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	4b69      	ldr	r3, [pc, #420]	; (8003f70 <HAL_ADC_Init+0x2d4>)
 8003dcc:	496a      	ldr	r1, [pc, #424]	; (8003f78 <HAL_ADC_Init+0x2dc>)
 8003dce:	400a      	ands	r2, r1
 8003dd0:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8003dd2:	4b67      	ldr	r3, [pc, #412]	; (8003f70 <HAL_ADC_Init+0x2d4>)
 8003dd4:	6819      	ldr	r1, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dda:	065a      	lsls	r2, r3, #25
 8003ddc:	4b64      	ldr	r3, [pc, #400]	; (8003f70 <HAL_ADC_Init+0x2d4>)
 8003dde:	430a      	orrs	r2, r1
 8003de0:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	2380      	movs	r3, #128	; 0x80
 8003dea:	055b      	lsls	r3, r3, #21
 8003dec:	4013      	ands	r3, r2
 8003dee:	d108      	bne.n	8003e02 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	689a      	ldr	r2, [r3, #8]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2180      	movs	r1, #128	; 0x80
 8003dfc:	0549      	lsls	r1, r1, #21
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68da      	ldr	r2, [r3, #12]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	495b      	ldr	r1, [pc, #364]	; (8003f7c <HAL_ADC_Init+0x2e0>)
 8003e0e:	400a      	ands	r2, r1
 8003e10:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68d9      	ldr	r1, [r3, #12]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d101      	bne.n	8003e28 <HAL_ADC_Init+0x18c>
 8003e24:	2304      	movs	r3, #4
 8003e26:	e000      	b.n	8003e2a <HAL_ADC_Init+0x18e>
 8003e28:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003e2a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2020      	movs	r0, #32
 8003e30:	5c1b      	ldrb	r3, [r3, r0]
 8003e32:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003e34:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	202c      	movs	r0, #44	; 0x2c
 8003e3a:	5c1b      	ldrb	r3, [r3, r0]
 8003e3c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003e3e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003e44:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8003e4c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	69db      	ldr	r3, [r3, #28]
 8003e52:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003e54:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e62:	23c2      	movs	r3, #194	; 0xc2
 8003e64:	33ff      	adds	r3, #255	; 0xff
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d00b      	beq.n	8003e82 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68d9      	ldr	r1, [r3, #12]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2221      	movs	r2, #33	; 0x21
 8003e86:	5c9b      	ldrb	r3, [r3, r2]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d11a      	bne.n	8003ec2 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2220      	movs	r2, #32
 8003e90:	5c9b      	ldrb	r3, [r3, r2]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d109      	bne.n	8003eaa <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68da      	ldr	r2, [r3, #12]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2180      	movs	r1, #128	; 0x80
 8003ea2:	0249      	lsls	r1, r1, #9
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	60da      	str	r2, [r3, #12]
 8003ea8:	e00b      	b.n	8003ec2 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eae:	2220      	movs	r2, #32
 8003eb0:	431a      	orrs	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eba:	2201      	movs	r2, #1
 8003ebc:	431a      	orrs	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d11f      	bne.n	8003f0a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	691a      	ldr	r2, [r3, #16]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	492a      	ldr	r1, [pc, #168]	; (8003f80 <HAL_ADC_Init+0x2e4>)
 8003ed6:	400a      	ands	r2, r1
 8003ed8:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	6919      	ldr	r1, [r3, #16]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003ee8:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8003eee:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	691a      	ldr	r2, [r3, #16]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2101      	movs	r1, #1
 8003f04:	430a      	orrs	r2, r1
 8003f06:	611a      	str	r2, [r3, #16]
 8003f08:	e00e      	b.n	8003f28 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	2201      	movs	r2, #1
 8003f12:	4013      	ands	r3, r2
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d107      	bne.n	8003f28 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	691a      	ldr	r2, [r3, #16]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2101      	movs	r1, #1
 8003f24:	438a      	bics	r2, r1
 8003f26:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	695a      	ldr	r2, [r3, #20]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2107      	movs	r1, #7
 8003f34:	438a      	bics	r2, r1
 8003f36:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6959      	ldr	r1, [r3, #20]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	430a      	orrs	r2, r1
 8003f48:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f54:	2203      	movs	r2, #3
 8003f56:	4393      	bics	r3, r2
 8003f58:	2201      	movs	r2, #1
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	0018      	movs	r0, r3
 8003f64:	46bd      	mov	sp, r7
 8003f66:	b002      	add	sp, #8
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	46c0      	nop			; (mov r8, r8)
 8003f6c:	fffffefd 	.word	0xfffffefd
 8003f70:	40012708 	.word	0x40012708
 8003f74:	ffc3ffff 	.word	0xffc3ffff
 8003f78:	fdffffff 	.word	0xfdffffff
 8003f7c:	fffe0219 	.word	0xfffe0219
 8003f80:	fffffc03 	.word	0xfffffc03

08003f84 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2250      	movs	r2, #80	; 0x50
 8003f92:	5c9b      	ldrb	r3, [r3, r2]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d101      	bne.n	8003f9c <HAL_ADC_ConfigChannel+0x18>
 8003f98:	2302      	movs	r3, #2
 8003f9a:	e085      	b.n	80040a8 <HAL_ADC_ConfigChannel+0x124>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2250      	movs	r2, #80	; 0x50
 8003fa0:	2101      	movs	r1, #1
 8003fa2:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	2204      	movs	r2, #4
 8003fac:	4013      	ands	r3, r2
 8003fae:	d00b      	beq.n	8003fc8 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb4:	2220      	movs	r2, #32
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2250      	movs	r2, #80	; 0x50
 8003fc0:	2100      	movs	r1, #0
 8003fc2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e06f      	b.n	80040a8 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	4a38      	ldr	r2, [pc, #224]	; (80040b0 <HAL_ADC_ConfigChannel+0x12c>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d035      	beq.n	800403e <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	035b      	lsls	r3, r3, #13
 8003fde:	0b5a      	lsrs	r2, r3, #13
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	2380      	movs	r3, #128	; 0x80
 8003fee:	02db      	lsls	r3, r3, #11
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	d009      	beq.n	8004008 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8003ff4:	4b2f      	ldr	r3, [pc, #188]	; (80040b4 <HAL_ADC_ConfigChannel+0x130>)
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	4b2e      	ldr	r3, [pc, #184]	; (80040b4 <HAL_ADC_ConfigChannel+0x130>)
 8003ffa:	2180      	movs	r1, #128	; 0x80
 8003ffc:	0409      	lsls	r1, r1, #16
 8003ffe:	430a      	orrs	r2, r1
 8004000:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8004002:	200a      	movs	r0, #10
 8004004:	f000 f85e 	bl	80040c4 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	2380      	movs	r3, #128	; 0x80
 800400e:	029b      	lsls	r3, r3, #10
 8004010:	4013      	ands	r3, r2
 8004012:	d006      	beq.n	8004022 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8004014:	4b27      	ldr	r3, [pc, #156]	; (80040b4 <HAL_ADC_ConfigChannel+0x130>)
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	4b26      	ldr	r3, [pc, #152]	; (80040b4 <HAL_ADC_ConfigChannel+0x130>)
 800401a:	2180      	movs	r1, #128	; 0x80
 800401c:	03c9      	lsls	r1, r1, #15
 800401e:	430a      	orrs	r2, r1
 8004020:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	2380      	movs	r3, #128	; 0x80
 8004028:	025b      	lsls	r3, r3, #9
 800402a:	4013      	ands	r3, r2
 800402c:	d037      	beq.n	800409e <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 800402e:	4b21      	ldr	r3, [pc, #132]	; (80040b4 <HAL_ADC_ConfigChannel+0x130>)
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	4b20      	ldr	r3, [pc, #128]	; (80040b4 <HAL_ADC_ConfigChannel+0x130>)
 8004034:	2180      	movs	r1, #128	; 0x80
 8004036:	0449      	lsls	r1, r1, #17
 8004038:	430a      	orrs	r2, r1
 800403a:	601a      	str	r2, [r3, #0]
 800403c:	e02f      	b.n	800409e <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	035b      	lsls	r3, r3, #13
 800404a:	0b5b      	lsrs	r3, r3, #13
 800404c:	43d9      	mvns	r1, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	400a      	ands	r2, r1
 8004054:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	2380      	movs	r3, #128	; 0x80
 800405c:	02db      	lsls	r3, r3, #11
 800405e:	4013      	ands	r3, r2
 8004060:	d005      	beq.n	800406e <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8004062:	4b14      	ldr	r3, [pc, #80]	; (80040b4 <HAL_ADC_ConfigChannel+0x130>)
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	4b13      	ldr	r3, [pc, #76]	; (80040b4 <HAL_ADC_ConfigChannel+0x130>)
 8004068:	4913      	ldr	r1, [pc, #76]	; (80040b8 <HAL_ADC_ConfigChannel+0x134>)
 800406a:	400a      	ands	r2, r1
 800406c:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	2380      	movs	r3, #128	; 0x80
 8004074:	029b      	lsls	r3, r3, #10
 8004076:	4013      	ands	r3, r2
 8004078:	d005      	beq.n	8004086 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 800407a:	4b0e      	ldr	r3, [pc, #56]	; (80040b4 <HAL_ADC_ConfigChannel+0x130>)
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	4b0d      	ldr	r3, [pc, #52]	; (80040b4 <HAL_ADC_ConfigChannel+0x130>)
 8004080:	490e      	ldr	r1, [pc, #56]	; (80040bc <HAL_ADC_ConfigChannel+0x138>)
 8004082:	400a      	ands	r2, r1
 8004084:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	2380      	movs	r3, #128	; 0x80
 800408c:	025b      	lsls	r3, r3, #9
 800408e:	4013      	ands	r3, r2
 8004090:	d005      	beq.n	800409e <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 8004092:	4b08      	ldr	r3, [pc, #32]	; (80040b4 <HAL_ADC_ConfigChannel+0x130>)
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	4b07      	ldr	r3, [pc, #28]	; (80040b4 <HAL_ADC_ConfigChannel+0x130>)
 8004098:	4909      	ldr	r1, [pc, #36]	; (80040c0 <HAL_ADC_ConfigChannel+0x13c>)
 800409a:	400a      	ands	r2, r1
 800409c:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2250      	movs	r2, #80	; 0x50
 80040a2:	2100      	movs	r1, #0
 80040a4:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	0018      	movs	r0, r3
 80040aa:	46bd      	mov	sp, r7
 80040ac:	b002      	add	sp, #8
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	00001001 	.word	0x00001001
 80040b4:	40012708 	.word	0x40012708
 80040b8:	ff7fffff 	.word	0xff7fffff
 80040bc:	ffbfffff 	.word	0xffbfffff
 80040c0:	feffffff 	.word	0xfeffffff

080040c4 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80040cc:	4b0a      	ldr	r3, [pc, #40]	; (80040f8 <ADC_DelayMicroSecond+0x34>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	490a      	ldr	r1, [pc, #40]	; (80040fc <ADC_DelayMicroSecond+0x38>)
 80040d2:	0018      	movs	r0, r3
 80040d4:	f7fc f820 	bl	8000118 <__udivsi3>
 80040d8:	0003      	movs	r3, r0
 80040da:	001a      	movs	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4353      	muls	r3, r2
 80040e0:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 80040e2:	e002      	b.n	80040ea <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	3b01      	subs	r3, #1
 80040e8:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1f9      	bne.n	80040e4 <ADC_DelayMicroSecond+0x20>
  } 
}
 80040f0:	46c0      	nop			; (mov r8, r8)
 80040f2:	46bd      	mov	sp, r7
 80040f4:	b004      	add	sp, #16
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	20000054 	.word	0x20000054
 80040fc:	000f4240 	.word	0x000f4240

08004100 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	0002      	movs	r2, r0
 8004108:	1dfb      	adds	r3, r7, #7
 800410a:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800410c:	1dfb      	adds	r3, r7, #7
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	001a      	movs	r2, r3
 8004112:	231f      	movs	r3, #31
 8004114:	401a      	ands	r2, r3
 8004116:	4b04      	ldr	r3, [pc, #16]	; (8004128 <NVIC_EnableIRQ+0x28>)
 8004118:	2101      	movs	r1, #1
 800411a:	4091      	lsls	r1, r2
 800411c:	000a      	movs	r2, r1
 800411e:	601a      	str	r2, [r3, #0]
}
 8004120:	46c0      	nop			; (mov r8, r8)
 8004122:	46bd      	mov	sp, r7
 8004124:	b002      	add	sp, #8
 8004126:	bd80      	pop	{r7, pc}
 8004128:	e000e100 	.word	0xe000e100

0800412c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800412c:	b590      	push	{r4, r7, lr}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	0002      	movs	r2, r0
 8004134:	6039      	str	r1, [r7, #0]
 8004136:	1dfb      	adds	r3, r7, #7
 8004138:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800413a:	1dfb      	adds	r3, r7, #7
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	2b7f      	cmp	r3, #127	; 0x7f
 8004140:	d932      	bls.n	80041a8 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004142:	4a2f      	ldr	r2, [pc, #188]	; (8004200 <NVIC_SetPriority+0xd4>)
 8004144:	1dfb      	adds	r3, r7, #7
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	0019      	movs	r1, r3
 800414a:	230f      	movs	r3, #15
 800414c:	400b      	ands	r3, r1
 800414e:	3b08      	subs	r3, #8
 8004150:	089b      	lsrs	r3, r3, #2
 8004152:	3306      	adds	r3, #6
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	18d3      	adds	r3, r2, r3
 8004158:	3304      	adds	r3, #4
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	1dfa      	adds	r2, r7, #7
 800415e:	7812      	ldrb	r2, [r2, #0]
 8004160:	0011      	movs	r1, r2
 8004162:	2203      	movs	r2, #3
 8004164:	400a      	ands	r2, r1
 8004166:	00d2      	lsls	r2, r2, #3
 8004168:	21ff      	movs	r1, #255	; 0xff
 800416a:	4091      	lsls	r1, r2
 800416c:	000a      	movs	r2, r1
 800416e:	43d2      	mvns	r2, r2
 8004170:	401a      	ands	r2, r3
 8004172:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	019b      	lsls	r3, r3, #6
 8004178:	22ff      	movs	r2, #255	; 0xff
 800417a:	401a      	ands	r2, r3
 800417c:	1dfb      	adds	r3, r7, #7
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	0018      	movs	r0, r3
 8004182:	2303      	movs	r3, #3
 8004184:	4003      	ands	r3, r0
 8004186:	00db      	lsls	r3, r3, #3
 8004188:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800418a:	481d      	ldr	r0, [pc, #116]	; (8004200 <NVIC_SetPriority+0xd4>)
 800418c:	1dfb      	adds	r3, r7, #7
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	001c      	movs	r4, r3
 8004192:	230f      	movs	r3, #15
 8004194:	4023      	ands	r3, r4
 8004196:	3b08      	subs	r3, #8
 8004198:	089b      	lsrs	r3, r3, #2
 800419a:	430a      	orrs	r2, r1
 800419c:	3306      	adds	r3, #6
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	18c3      	adds	r3, r0, r3
 80041a2:	3304      	adds	r3, #4
 80041a4:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80041a6:	e027      	b.n	80041f8 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80041a8:	4a16      	ldr	r2, [pc, #88]	; (8004204 <NVIC_SetPriority+0xd8>)
 80041aa:	1dfb      	adds	r3, r7, #7
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	b25b      	sxtb	r3, r3
 80041b0:	089b      	lsrs	r3, r3, #2
 80041b2:	33c0      	adds	r3, #192	; 0xc0
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	589b      	ldr	r3, [r3, r2]
 80041b8:	1dfa      	adds	r2, r7, #7
 80041ba:	7812      	ldrb	r2, [r2, #0]
 80041bc:	0011      	movs	r1, r2
 80041be:	2203      	movs	r2, #3
 80041c0:	400a      	ands	r2, r1
 80041c2:	00d2      	lsls	r2, r2, #3
 80041c4:	21ff      	movs	r1, #255	; 0xff
 80041c6:	4091      	lsls	r1, r2
 80041c8:	000a      	movs	r2, r1
 80041ca:	43d2      	mvns	r2, r2
 80041cc:	401a      	ands	r2, r3
 80041ce:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	019b      	lsls	r3, r3, #6
 80041d4:	22ff      	movs	r2, #255	; 0xff
 80041d6:	401a      	ands	r2, r3
 80041d8:	1dfb      	adds	r3, r7, #7
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	0018      	movs	r0, r3
 80041de:	2303      	movs	r3, #3
 80041e0:	4003      	ands	r3, r0
 80041e2:	00db      	lsls	r3, r3, #3
 80041e4:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80041e6:	4807      	ldr	r0, [pc, #28]	; (8004204 <NVIC_SetPriority+0xd8>)
 80041e8:	1dfb      	adds	r3, r7, #7
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	b25b      	sxtb	r3, r3
 80041ee:	089b      	lsrs	r3, r3, #2
 80041f0:	430a      	orrs	r2, r1
 80041f2:	33c0      	adds	r3, #192	; 0xc0
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	501a      	str	r2, [r3, r0]
}
 80041f8:	46c0      	nop			; (mov r8, r8)
 80041fa:	46bd      	mov	sp, r7
 80041fc:	b003      	add	sp, #12
 80041fe:	bd90      	pop	{r4, r7, pc}
 8004200:	e000ed00 	.word	0xe000ed00
 8004204:	e000e100 	.word	0xe000e100

08004208 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	3b01      	subs	r3, #1
 8004214:	4a0c      	ldr	r2, [pc, #48]	; (8004248 <SysTick_Config+0x40>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d901      	bls.n	800421e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800421a:	2301      	movs	r3, #1
 800421c:	e010      	b.n	8004240 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800421e:	4b0b      	ldr	r3, [pc, #44]	; (800424c <SysTick_Config+0x44>)
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	3a01      	subs	r2, #1
 8004224:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004226:	2301      	movs	r3, #1
 8004228:	425b      	negs	r3, r3
 800422a:	2103      	movs	r1, #3
 800422c:	0018      	movs	r0, r3
 800422e:	f7ff ff7d 	bl	800412c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004232:	4b06      	ldr	r3, [pc, #24]	; (800424c <SysTick_Config+0x44>)
 8004234:	2200      	movs	r2, #0
 8004236:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004238:	4b04      	ldr	r3, [pc, #16]	; (800424c <SysTick_Config+0x44>)
 800423a:	2207      	movs	r2, #7
 800423c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800423e:	2300      	movs	r3, #0
}
 8004240:	0018      	movs	r0, r3
 8004242:	46bd      	mov	sp, r7
 8004244:	b002      	add	sp, #8
 8004246:	bd80      	pop	{r7, pc}
 8004248:	00ffffff 	.word	0x00ffffff
 800424c:	e000e010 	.word	0xe000e010

08004250 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	60b9      	str	r1, [r7, #8]
 8004258:	607a      	str	r2, [r7, #4]
 800425a:	210f      	movs	r1, #15
 800425c:	187b      	adds	r3, r7, r1
 800425e:	1c02      	adds	r2, r0, #0
 8004260:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004262:	68ba      	ldr	r2, [r7, #8]
 8004264:	187b      	adds	r3, r7, r1
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	b25b      	sxtb	r3, r3
 800426a:	0011      	movs	r1, r2
 800426c:	0018      	movs	r0, r3
 800426e:	f7ff ff5d 	bl	800412c <NVIC_SetPriority>
}
 8004272:	46c0      	nop			; (mov r8, r8)
 8004274:	46bd      	mov	sp, r7
 8004276:	b004      	add	sp, #16
 8004278:	bd80      	pop	{r7, pc}

0800427a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b082      	sub	sp, #8
 800427e:	af00      	add	r7, sp, #0
 8004280:	0002      	movs	r2, r0
 8004282:	1dfb      	adds	r3, r7, #7
 8004284:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004286:	1dfb      	adds	r3, r7, #7
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	b25b      	sxtb	r3, r3
 800428c:	0018      	movs	r0, r3
 800428e:	f7ff ff37 	bl	8004100 <NVIC_EnableIRQ>
}
 8004292:	46c0      	nop			; (mov r8, r8)
 8004294:	46bd      	mov	sp, r7
 8004296:	b002      	add	sp, #8
 8004298:	bd80      	pop	{r7, pc}

0800429a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b082      	sub	sp, #8
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	0018      	movs	r0, r3
 80042a6:	f7ff ffaf 	bl	8004208 <SysTick_Config>
 80042aa:	0003      	movs	r3, r0
}
 80042ac:	0018      	movs	r0, r3
 80042ae:	46bd      	mov	sp, r7
 80042b0:	b002      	add	sp, #8
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e061      	b.n	800438a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a32      	ldr	r2, [pc, #200]	; (8004394 <HAL_DMA_Init+0xe0>)
 80042cc:	4694      	mov	ip, r2
 80042ce:	4463      	add	r3, ip
 80042d0:	2114      	movs	r1, #20
 80042d2:	0018      	movs	r0, r3
 80042d4:	f7fb ff20 	bl	8000118 <__udivsi3>
 80042d8:	0003      	movs	r3, r0
 80042da:	009a      	lsls	r2, r3, #2
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a2d      	ldr	r2, [pc, #180]	; (8004398 <HAL_DMA_Init+0xe4>)
 80042e4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2225      	movs	r2, #37	; 0x25
 80042ea:	2102      	movs	r1, #2
 80042ec:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	4a28      	ldr	r2, [pc, #160]	; (800439c <HAL_DMA_Init+0xe8>)
 80042fa:	4013      	ands	r3, r2
 80042fc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004306:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004312:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800431e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a1b      	ldr	r3, [r3, #32]
 8004324:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	4313      	orrs	r3, r2
 800432a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689a      	ldr	r2, [r3, #8]
 8004338:	2380      	movs	r3, #128	; 0x80
 800433a:	01db      	lsls	r3, r3, #7
 800433c:	429a      	cmp	r2, r3
 800433e:	d018      	beq.n	8004372 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004340:	4b17      	ldr	r3, [pc, #92]	; (80043a0 <HAL_DMA_Init+0xec>)
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004348:	211c      	movs	r1, #28
 800434a:	400b      	ands	r3, r1
 800434c:	210f      	movs	r1, #15
 800434e:	4099      	lsls	r1, r3
 8004350:	000b      	movs	r3, r1
 8004352:	43d9      	mvns	r1, r3
 8004354:	4b12      	ldr	r3, [pc, #72]	; (80043a0 <HAL_DMA_Init+0xec>)
 8004356:	400a      	ands	r2, r1
 8004358:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800435a:	4b11      	ldr	r3, [pc, #68]	; (80043a0 <HAL_DMA_Init+0xec>)
 800435c:	6819      	ldr	r1, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685a      	ldr	r2, [r3, #4]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004366:	201c      	movs	r0, #28
 8004368:	4003      	ands	r3, r0
 800436a:	409a      	lsls	r2, r3
 800436c:	4b0c      	ldr	r3, [pc, #48]	; (80043a0 <HAL_DMA_Init+0xec>)
 800436e:	430a      	orrs	r2, r1
 8004370:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2225      	movs	r2, #37	; 0x25
 800437c:	2101      	movs	r1, #1
 800437e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2224      	movs	r2, #36	; 0x24
 8004384:	2100      	movs	r1, #0
 8004386:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	0018      	movs	r0, r3
 800438c:	46bd      	mov	sp, r7
 800438e:	b004      	add	sp, #16
 8004390:	bd80      	pop	{r7, pc}
 8004392:	46c0      	nop			; (mov r8, r8)
 8004394:	bffdfff8 	.word	0xbffdfff8
 8004398:	40020000 	.word	0x40020000
 800439c:	ffff800f 	.word	0xffff800f
 80043a0:	400200a8 	.word	0x400200a8

080043a4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043ac:	230f      	movs	r3, #15
 80043ae:	18fb      	adds	r3, r7, r3
 80043b0:	2200      	movs	r2, #0
 80043b2:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2225      	movs	r2, #37	; 0x25
 80043b8:	5c9b      	ldrb	r3, [r3, r2]
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d007      	beq.n	80043d0 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2204      	movs	r2, #4
 80043c4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80043c6:	230f      	movs	r3, #15
 80043c8:	18fb      	adds	r3, r7, r3
 80043ca:	2201      	movs	r2, #1
 80043cc:	701a      	strb	r2, [r3, #0]
 80043ce:	e02a      	b.n	8004426 <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	210e      	movs	r1, #14
 80043dc:	438a      	bics	r2, r1
 80043de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2101      	movs	r1, #1
 80043ec:	438a      	bics	r2, r1
 80043ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f4:	221c      	movs	r2, #28
 80043f6:	401a      	ands	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fc:	2101      	movs	r1, #1
 80043fe:	4091      	lsls	r1, r2
 8004400:	000a      	movs	r2, r1
 8004402:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2225      	movs	r2, #37	; 0x25
 8004408:	2101      	movs	r1, #1
 800440a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2224      	movs	r2, #36	; 0x24
 8004410:	2100      	movs	r1, #0
 8004412:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004418:	2b00      	cmp	r3, #0
 800441a:	d004      	beq.n	8004426 <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	0010      	movs	r0, r2
 8004424:	4798      	blx	r3
    }
  }
  return status;
 8004426:	230f      	movs	r3, #15
 8004428:	18fb      	adds	r3, r7, r3
 800442a:	781b      	ldrb	r3, [r3, #0]
}
 800442c:	0018      	movs	r0, r3
 800442e:	46bd      	mov	sp, r7
 8004430:	b004      	add	sp, #16
 8004432:	bd80      	pop	{r7, pc}

08004434 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004450:	221c      	movs	r2, #28
 8004452:	4013      	ands	r3, r2
 8004454:	2204      	movs	r2, #4
 8004456:	409a      	lsls	r2, r3
 8004458:	0013      	movs	r3, r2
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	4013      	ands	r3, r2
 800445e:	d026      	beq.n	80044ae <HAL_DMA_IRQHandler+0x7a>
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	2204      	movs	r2, #4
 8004464:	4013      	ands	r3, r2
 8004466:	d022      	beq.n	80044ae <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2220      	movs	r2, #32
 8004470:	4013      	ands	r3, r2
 8004472:	d107      	bne.n	8004484 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2104      	movs	r1, #4
 8004480:	438a      	bics	r2, r1
 8004482:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004488:	221c      	movs	r2, #28
 800448a:	401a      	ands	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004490:	2104      	movs	r1, #4
 8004492:	4091      	lsls	r1, r2
 8004494:	000a      	movs	r2, r1
 8004496:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449c:	2b00      	cmp	r3, #0
 800449e:	d100      	bne.n	80044a2 <HAL_DMA_IRQHandler+0x6e>
 80044a0:	e071      	b.n	8004586 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	0010      	movs	r0, r2
 80044aa:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80044ac:	e06b      	b.n	8004586 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b2:	221c      	movs	r2, #28
 80044b4:	4013      	ands	r3, r2
 80044b6:	2202      	movs	r2, #2
 80044b8:	409a      	lsls	r2, r3
 80044ba:	0013      	movs	r3, r2
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	4013      	ands	r3, r2
 80044c0:	d02d      	beq.n	800451e <HAL_DMA_IRQHandler+0xea>
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	2202      	movs	r2, #2
 80044c6:	4013      	ands	r3, r2
 80044c8:	d029      	beq.n	800451e <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2220      	movs	r2, #32
 80044d2:	4013      	ands	r3, r2
 80044d4:	d10b      	bne.n	80044ee <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	210a      	movs	r1, #10
 80044e2:	438a      	bics	r2, r1
 80044e4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2225      	movs	r2, #37	; 0x25
 80044ea:	2101      	movs	r1, #1
 80044ec:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f2:	221c      	movs	r2, #28
 80044f4:	401a      	ands	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fa:	2102      	movs	r1, #2
 80044fc:	4091      	lsls	r1, r2
 80044fe:	000a      	movs	r2, r1
 8004500:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2224      	movs	r2, #36	; 0x24
 8004506:	2100      	movs	r1, #0
 8004508:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450e:	2b00      	cmp	r3, #0
 8004510:	d039      	beq.n	8004586 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	0010      	movs	r0, r2
 800451a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800451c:	e033      	b.n	8004586 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004522:	221c      	movs	r2, #28
 8004524:	4013      	ands	r3, r2
 8004526:	2208      	movs	r2, #8
 8004528:	409a      	lsls	r2, r3
 800452a:	0013      	movs	r3, r2
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	4013      	ands	r3, r2
 8004530:	d02a      	beq.n	8004588 <HAL_DMA_IRQHandler+0x154>
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	2208      	movs	r2, #8
 8004536:	4013      	ands	r3, r2
 8004538:	d026      	beq.n	8004588 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	210e      	movs	r1, #14
 8004546:	438a      	bics	r2, r1
 8004548:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800454e:	221c      	movs	r2, #28
 8004550:	401a      	ands	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004556:	2101      	movs	r1, #1
 8004558:	4091      	lsls	r1, r2
 800455a:	000a      	movs	r2, r1
 800455c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2201      	movs	r2, #1
 8004562:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2225      	movs	r2, #37	; 0x25
 8004568:	2101      	movs	r1, #1
 800456a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2224      	movs	r2, #36	; 0x24
 8004570:	2100      	movs	r1, #0
 8004572:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004578:	2b00      	cmp	r3, #0
 800457a:	d005      	beq.n	8004588 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	0010      	movs	r0, r2
 8004584:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004586:	46c0      	nop			; (mov r8, r8)
 8004588:	46c0      	nop			; (mov r8, r8)
}
 800458a:	46bd      	mov	sp, r7
 800458c:	b004      	add	sp, #16
 800458e:	bd80      	pop	{r7, pc}

08004590 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b086      	sub	sp, #24
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800459a:	2300      	movs	r3, #0
 800459c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800459e:	2300      	movs	r3, #0
 80045a0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80045a2:	2300      	movs	r3, #0
 80045a4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80045a6:	e155      	b.n	8004854 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2101      	movs	r1, #1
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	4091      	lsls	r1, r2
 80045b2:	000a      	movs	r2, r1
 80045b4:	4013      	ands	r3, r2
 80045b6:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d100      	bne.n	80045c0 <HAL_GPIO_Init+0x30>
 80045be:	e146      	b.n	800484e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d003      	beq.n	80045d0 <HAL_GPIO_Init+0x40>
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	2b12      	cmp	r3, #18
 80045ce:	d123      	bne.n	8004618 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	08da      	lsrs	r2, r3, #3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	3208      	adds	r2, #8
 80045d8:	0092      	lsls	r2, r2, #2
 80045da:	58d3      	ldr	r3, [r2, r3]
 80045dc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	2207      	movs	r2, #7
 80045e2:	4013      	ands	r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	220f      	movs	r2, #15
 80045e8:	409a      	lsls	r2, r3
 80045ea:	0013      	movs	r3, r2
 80045ec:	43da      	mvns	r2, r3
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	4013      	ands	r3, r2
 80045f2:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	691a      	ldr	r2, [r3, #16]
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	2107      	movs	r1, #7
 80045fc:	400b      	ands	r3, r1
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	409a      	lsls	r2, r3
 8004602:	0013      	movs	r3, r2
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	4313      	orrs	r3, r2
 8004608:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	08da      	lsrs	r2, r3, #3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	3208      	adds	r2, #8
 8004612:	0092      	lsls	r2, r2, #2
 8004614:	6939      	ldr	r1, [r7, #16]
 8004616:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d00b      	beq.n	8004638 <HAL_GPIO_Init+0xa8>
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	2b02      	cmp	r3, #2
 8004626:	d007      	beq.n	8004638 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800462c:	2b11      	cmp	r3, #17
 800462e:	d003      	beq.n	8004638 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	2b12      	cmp	r3, #18
 8004636:	d130      	bne.n	800469a <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	005b      	lsls	r3, r3, #1
 8004642:	2203      	movs	r2, #3
 8004644:	409a      	lsls	r2, r3
 8004646:	0013      	movs	r3, r2
 8004648:	43da      	mvns	r2, r3
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	4013      	ands	r3, r2
 800464e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	68da      	ldr	r2, [r3, #12]
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	005b      	lsls	r3, r3, #1
 8004658:	409a      	lsls	r2, r3
 800465a:	0013      	movs	r3, r2
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	4313      	orrs	r3, r2
 8004660:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800466e:	2201      	movs	r2, #1
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	409a      	lsls	r2, r3
 8004674:	0013      	movs	r3, r2
 8004676:	43da      	mvns	r2, r3
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	4013      	ands	r3, r2
 800467c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	091b      	lsrs	r3, r3, #4
 8004684:	2201      	movs	r2, #1
 8004686:	401a      	ands	r2, r3
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	409a      	lsls	r2, r3
 800468c:	0013      	movs	r3, r2
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	4313      	orrs	r3, r2
 8004692:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	2203      	movs	r2, #3
 80046a6:	409a      	lsls	r2, r3
 80046a8:	0013      	movs	r3, r2
 80046aa:	43da      	mvns	r2, r3
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	4013      	ands	r3, r2
 80046b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	2203      	movs	r2, #3
 80046b8:	401a      	ands	r2, r3
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	005b      	lsls	r3, r3, #1
 80046be:	409a      	lsls	r2, r3
 80046c0:	0013      	movs	r3, r2
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	005b      	lsls	r3, r3, #1
 80046d8:	2203      	movs	r2, #3
 80046da:	409a      	lsls	r2, r3
 80046dc:	0013      	movs	r3, r2
 80046de:	43da      	mvns	r2, r3
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	4013      	ands	r3, r2
 80046e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	689a      	ldr	r2, [r3, #8]
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	409a      	lsls	r2, r3
 80046f0:	0013      	movs	r3, r2
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	2380      	movs	r3, #128	; 0x80
 8004704:	055b      	lsls	r3, r3, #21
 8004706:	4013      	ands	r3, r2
 8004708:	d100      	bne.n	800470c <HAL_GPIO_Init+0x17c>
 800470a:	e0a0      	b.n	800484e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800470c:	4b57      	ldr	r3, [pc, #348]	; (800486c <HAL_GPIO_Init+0x2dc>)
 800470e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004710:	4b56      	ldr	r3, [pc, #344]	; (800486c <HAL_GPIO_Init+0x2dc>)
 8004712:	2101      	movs	r1, #1
 8004714:	430a      	orrs	r2, r1
 8004716:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8004718:	4a55      	ldr	r2, [pc, #340]	; (8004870 <HAL_GPIO_Init+0x2e0>)
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	089b      	lsrs	r3, r3, #2
 800471e:	3302      	adds	r3, #2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	589b      	ldr	r3, [r3, r2]
 8004724:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	2203      	movs	r2, #3
 800472a:	4013      	ands	r3, r2
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	220f      	movs	r2, #15
 8004730:	409a      	lsls	r2, r3
 8004732:	0013      	movs	r3, r2
 8004734:	43da      	mvns	r2, r3
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	4013      	ands	r3, r2
 800473a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	23a0      	movs	r3, #160	; 0xa0
 8004740:	05db      	lsls	r3, r3, #23
 8004742:	429a      	cmp	r2, r3
 8004744:	d01f      	beq.n	8004786 <HAL_GPIO_Init+0x1f6>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a4a      	ldr	r2, [pc, #296]	; (8004874 <HAL_GPIO_Init+0x2e4>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d019      	beq.n	8004782 <HAL_GPIO_Init+0x1f2>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a49      	ldr	r2, [pc, #292]	; (8004878 <HAL_GPIO_Init+0x2e8>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d013      	beq.n	800477e <HAL_GPIO_Init+0x1ee>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a48      	ldr	r2, [pc, #288]	; (800487c <HAL_GPIO_Init+0x2ec>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d00d      	beq.n	800477a <HAL_GPIO_Init+0x1ea>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a47      	ldr	r2, [pc, #284]	; (8004880 <HAL_GPIO_Init+0x2f0>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d007      	beq.n	8004776 <HAL_GPIO_Init+0x1e6>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a46      	ldr	r2, [pc, #280]	; (8004884 <HAL_GPIO_Init+0x2f4>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d101      	bne.n	8004772 <HAL_GPIO_Init+0x1e2>
 800476e:	2305      	movs	r3, #5
 8004770:	e00a      	b.n	8004788 <HAL_GPIO_Init+0x1f8>
 8004772:	2306      	movs	r3, #6
 8004774:	e008      	b.n	8004788 <HAL_GPIO_Init+0x1f8>
 8004776:	2304      	movs	r3, #4
 8004778:	e006      	b.n	8004788 <HAL_GPIO_Init+0x1f8>
 800477a:	2303      	movs	r3, #3
 800477c:	e004      	b.n	8004788 <HAL_GPIO_Init+0x1f8>
 800477e:	2302      	movs	r3, #2
 8004780:	e002      	b.n	8004788 <HAL_GPIO_Init+0x1f8>
 8004782:	2301      	movs	r3, #1
 8004784:	e000      	b.n	8004788 <HAL_GPIO_Init+0x1f8>
 8004786:	2300      	movs	r3, #0
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	2103      	movs	r1, #3
 800478c:	400a      	ands	r2, r1
 800478e:	0092      	lsls	r2, r2, #2
 8004790:	4093      	lsls	r3, r2
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	4313      	orrs	r3, r2
 8004796:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004798:	4935      	ldr	r1, [pc, #212]	; (8004870 <HAL_GPIO_Init+0x2e0>)
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	089b      	lsrs	r3, r3, #2
 800479e:	3302      	adds	r3, #2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047a6:	4b38      	ldr	r3, [pc, #224]	; (8004888 <HAL_GPIO_Init+0x2f8>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	43da      	mvns	r2, r3
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	4013      	ands	r3, r2
 80047b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	685a      	ldr	r2, [r3, #4]
 80047ba:	2380      	movs	r3, #128	; 0x80
 80047bc:	025b      	lsls	r3, r3, #9
 80047be:	4013      	ands	r3, r2
 80047c0:	d003      	beq.n	80047ca <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80047ca:	4b2f      	ldr	r3, [pc, #188]	; (8004888 <HAL_GPIO_Init+0x2f8>)
 80047cc:	693a      	ldr	r2, [r7, #16]
 80047ce:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80047d0:	4b2d      	ldr	r3, [pc, #180]	; (8004888 <HAL_GPIO_Init+0x2f8>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	43da      	mvns	r2, r3
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	4013      	ands	r3, r2
 80047de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	685a      	ldr	r2, [r3, #4]
 80047e4:	2380      	movs	r3, #128	; 0x80
 80047e6:	029b      	lsls	r3, r3, #10
 80047e8:	4013      	ands	r3, r2
 80047ea:	d003      	beq.n	80047f4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80047f4:	4b24      	ldr	r3, [pc, #144]	; (8004888 <HAL_GPIO_Init+0x2f8>)
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80047fa:	4b23      	ldr	r3, [pc, #140]	; (8004888 <HAL_GPIO_Init+0x2f8>)
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	43da      	mvns	r2, r3
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	4013      	ands	r3, r2
 8004808:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685a      	ldr	r2, [r3, #4]
 800480e:	2380      	movs	r3, #128	; 0x80
 8004810:	035b      	lsls	r3, r3, #13
 8004812:	4013      	ands	r3, r2
 8004814:	d003      	beq.n	800481e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	4313      	orrs	r3, r2
 800481c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800481e:	4b1a      	ldr	r3, [pc, #104]	; (8004888 <HAL_GPIO_Init+0x2f8>)
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004824:	4b18      	ldr	r3, [pc, #96]	; (8004888 <HAL_GPIO_Init+0x2f8>)
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	43da      	mvns	r2, r3
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	4013      	ands	r3, r2
 8004832:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	685a      	ldr	r2, [r3, #4]
 8004838:	2380      	movs	r3, #128	; 0x80
 800483a:	039b      	lsls	r3, r3, #14
 800483c:	4013      	ands	r3, r2
 800483e:	d003      	beq.n	8004848 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	4313      	orrs	r3, r2
 8004846:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004848:	4b0f      	ldr	r3, [pc, #60]	; (8004888 <HAL_GPIO_Init+0x2f8>)
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	3301      	adds	r3, #1
 8004852:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	40da      	lsrs	r2, r3
 800485c:	1e13      	subs	r3, r2, #0
 800485e:	d000      	beq.n	8004862 <HAL_GPIO_Init+0x2d2>
 8004860:	e6a2      	b.n	80045a8 <HAL_GPIO_Init+0x18>
  }
}
 8004862:	46c0      	nop			; (mov r8, r8)
 8004864:	46bd      	mov	sp, r7
 8004866:	b006      	add	sp, #24
 8004868:	bd80      	pop	{r7, pc}
 800486a:	46c0      	nop			; (mov r8, r8)
 800486c:	40021000 	.word	0x40021000
 8004870:	40010000 	.word	0x40010000
 8004874:	50000400 	.word	0x50000400
 8004878:	50000800 	.word	0x50000800
 800487c:	50000c00 	.word	0x50000c00
 8004880:	50001000 	.word	0x50001000
 8004884:	50001c00 	.word	0x50001c00
 8004888:	40010400 	.word	0x40010400

0800488c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	000a      	movs	r2, r1
 8004896:	1cbb      	adds	r3, r7, #2
 8004898:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	1cba      	adds	r2, r7, #2
 80048a0:	8812      	ldrh	r2, [r2, #0]
 80048a2:	4013      	ands	r3, r2
 80048a4:	d004      	beq.n	80048b0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80048a6:	230f      	movs	r3, #15
 80048a8:	18fb      	adds	r3, r7, r3
 80048aa:	2201      	movs	r2, #1
 80048ac:	701a      	strb	r2, [r3, #0]
 80048ae:	e003      	b.n	80048b8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80048b0:	230f      	movs	r3, #15
 80048b2:	18fb      	adds	r3, r7, r3
 80048b4:	2200      	movs	r2, #0
 80048b6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80048b8:	230f      	movs	r3, #15
 80048ba:	18fb      	adds	r3, r7, r3
 80048bc:	781b      	ldrb	r3, [r3, #0]
}
 80048be:	0018      	movs	r0, r3
 80048c0:	46bd      	mov	sp, r7
 80048c2:	b004      	add	sp, #16
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b082      	sub	sp, #8
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
 80048ce:	0008      	movs	r0, r1
 80048d0:	0011      	movs	r1, r2
 80048d2:	1cbb      	adds	r3, r7, #2
 80048d4:	1c02      	adds	r2, r0, #0
 80048d6:	801a      	strh	r2, [r3, #0]
 80048d8:	1c7b      	adds	r3, r7, #1
 80048da:	1c0a      	adds	r2, r1, #0
 80048dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 80048de:	1c7b      	adds	r3, r7, #1
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d004      	beq.n	80048f0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048e6:	1cbb      	adds	r3, r7, #2
 80048e8:	881a      	ldrh	r2, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80048ee:	e003      	b.n	80048f8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80048f0:	1cbb      	adds	r3, r7, #2
 80048f2:	881a      	ldrh	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80048f8:	46c0      	nop			; (mov r8, r8)
 80048fa:	46bd      	mov	sp, r7
 80048fc:	b002      	add	sp, #8
 80048fe:	bd80      	pop	{r7, pc}

08004900 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	000a      	movs	r2, r1
 800490a:	1cbb      	adds	r3, r7, #2
 800490c:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	695a      	ldr	r2, [r3, #20]
 8004912:	1cbb      	adds	r3, r7, #2
 8004914:	881b      	ldrh	r3, [r3, #0]
 8004916:	405a      	eors	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	615a      	str	r2, [r3, #20]
}
 800491c:	46c0      	nop			; (mov r8, r8)
 800491e:	46bd      	mov	sp, r7
 8004920:	b002      	add	sp, #8
 8004922:	bd80      	pop	{r7, pc}

08004924 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	0002      	movs	r2, r0
 800492c:	1dbb      	adds	r3, r7, #6
 800492e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8004930:	4b09      	ldr	r3, [pc, #36]	; (8004958 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004932:	695b      	ldr	r3, [r3, #20]
 8004934:	1dba      	adds	r2, r7, #6
 8004936:	8812      	ldrh	r2, [r2, #0]
 8004938:	4013      	ands	r3, r2
 800493a:	d008      	beq.n	800494e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800493c:	4b06      	ldr	r3, [pc, #24]	; (8004958 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800493e:	1dba      	adds	r2, r7, #6
 8004940:	8812      	ldrh	r2, [r2, #0]
 8004942:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004944:	1dbb      	adds	r3, r7, #6
 8004946:	881b      	ldrh	r3, [r3, #0]
 8004948:	0018      	movs	r0, r3
 800494a:	f7fd fc29 	bl	80021a0 <HAL_GPIO_EXTI_Callback>
  }
}
 800494e:	46c0      	nop			; (mov r8, r8)
 8004950:	46bd      	mov	sp, r7
 8004952:	b002      	add	sp, #8
 8004954:	bd80      	pop	{r7, pc}
 8004956:	46c0      	nop			; (mov r8, r8)
 8004958:	40010400 	.word	0x40010400

0800495c <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e06c      	b.n	8004a48 <HAL_LPTIM_Init+0xec>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	222e      	movs	r2, #46	; 0x2e
 8004972:	5c9b      	ldrb	r3, [r3, r2]
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d107      	bne.n	800498a <HAL_LPTIM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	222d      	movs	r2, #45	; 0x2d
 800497e:	2100      	movs	r1, #0
 8004980:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	0018      	movs	r0, r3
 8004986:	f7fe fe6f 	bl	8003668 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	222e      	movs	r2, #46	; 0x2e
 800498e:	2102      	movs	r1, #2
 8004990:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d005      	beq.n	80049ae <HAL_LPTIM_Init+0x52>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049a6:	2380      	movs	r3, #128	; 0x80
 80049a8:	041b      	lsls	r3, r3, #16
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d103      	bne.n	80049b6 <HAL_LPTIM_Init+0x5a>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	221e      	movs	r2, #30
 80049b2:	4393      	bics	r3, r2
 80049b4:	60fb      	str	r3, [r7, #12]
  }
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	4a25      	ldr	r2, [pc, #148]	; (8004a50 <HAL_LPTIM_Init+0xf4>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d003      	beq.n	80049c8 <HAL_LPTIM_Init+0x6c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	4a24      	ldr	r2, [pc, #144]	; (8004a54 <HAL_LPTIM_Init+0xf8>)
 80049c4:	4013      	ands	r3, r2
 80049c6:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	4a23      	ldr	r2, [pc, #140]	; (8004a58 <HAL_LPTIM_Init+0xfc>)
 80049cc:	4013      	ands	r3, r2
 80049ce:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80049d8:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80049de:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 80049e4:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 80049ea:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d005      	beq.n	8004a06 <HAL_LPTIM_Init+0xaa>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049fe:	2380      	movs	r3, #128	; 0x80
 8004a00:	041b      	lsls	r3, r3, #16
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d107      	bne.n	8004a16 <HAL_LPTIM_Init+0xba>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	68fa      	ldr	r2, [r7, #12]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	60fb      	str	r3, [r7, #12]
  }

  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	4a0d      	ldr	r2, [pc, #52]	; (8004a50 <HAL_LPTIM_Init+0xf4>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d00a      	beq.n	8004a36 <HAL_LPTIM_Init+0xda>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004a28:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8004a2e:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	222e      	movs	r2, #46	; 0x2e
 8004a42:	2101      	movs	r1, #1
 8004a44:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	0018      	movs	r0, r3
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	b004      	add	sp, #16
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	0000ffff 	.word	0x0000ffff
 8004a54:	ffff1f3f 	.word	0xffff1f3f
 8004a58:	ff19f1f8 	.word	0xff19f1f8

08004a5c <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	222e      	movs	r2, #46	; 0x2e
 8004a6a:	2102      	movs	r1, #2
 8004a6c:	5499      	strb	r1, [r3, r2]

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT();
 8004a6e:	4b23      	ldr	r3, [pc, #140]	; (8004afc <HAL_LPTIM_Counter_Start_IT+0xa0>)
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	4b22      	ldr	r3, [pc, #136]	; (8004afc <HAL_LPTIM_Counter_Start_IT+0xa0>)
 8004a74:	2180      	movs	r1, #128	; 0x80
 8004a76:	0589      	lsls	r1, r1, #22
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	601a      	str	r2, [r3, #0]

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM) && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d00d      	beq.n	8004aa0 <HAL_LPTIM_Counter_Start_IT+0x44>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a88:	2380      	movs	r3, #128	; 0x80
 8004a8a:	041b      	lsls	r3, r3, #16
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d107      	bne.n	8004aa0 <HAL_LPTIM_Counter_Start_IT+0x44>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68da      	ldr	r2, [r3, #12]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4919      	ldr	r1, [pc, #100]	; (8004b00 <HAL_LPTIM_Counter_Start_IT+0xa4>)
 8004a9c:	400a      	ands	r2, r1
 8004a9e:	60da      	str	r2, [r3, #12]
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689a      	ldr	r2, [r3, #8]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2110      	movs	r1, #16
 8004aac:	430a      	orrs	r2, r1
 8004aae:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	689a      	ldr	r2, [r3, #8]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2102      	movs	r1, #2
 8004abc:	430a      	orrs	r2, r1
 8004abe:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	691a      	ldr	r2, [r3, #16]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2101      	movs	r1, #1
 8004acc:	430a      	orrs	r2, r1
 8004ace:	611a      	str	r2, [r3, #16]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	683a      	ldr	r2, [r7, #0]
 8004ad6:	619a      	str	r2, [r3, #24]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	691a      	ldr	r2, [r3, #16]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2104      	movs	r1, #4
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	222e      	movs	r2, #46	; 0x2e
 8004aec:	2101      	movs	r1, #1
 8004aee:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	0018      	movs	r0, r3
 8004af4:	46bd      	mov	sp, r7
 8004af6:	b002      	add	sp, #8
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	46c0      	nop			; (mov r8, r8)
 8004afc:	40010400 	.word	0x40010400
 8004b00:	fffff1ff 	.word	0xfffff1ff

08004b04 <HAL_LPTIM_Counter_Stop_IT>:
  * @brief  Stop the Counter mode in interrupt mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Stop_IT(LPTIM_HandleTypeDef *hlptim)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	222e      	movs	r2, #46	; 0x2e
 8004b10:	2102      	movs	r1, #2
 8004b12:	5499      	strb	r1, [r3, r2]

  /* Disable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_DISABLE_IT();
 8004b14:	4b11      	ldr	r3, [pc, #68]	; (8004b5c <HAL_LPTIM_Counter_Stop_IT+0x58>)
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	4b10      	ldr	r3, [pc, #64]	; (8004b5c <HAL_LPTIM_Counter_Stop_IT+0x58>)
 8004b1a:	4911      	ldr	r1, [pc, #68]	; (8004b60 <HAL_LPTIM_Counter_Stop_IT+0x5c>)
 8004b1c:	400a      	ands	r2, r1
 8004b1e:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	0018      	movs	r0, r3
 8004b24:	f000 f8f0 	bl	8004d08 <LPTIM_Disable>

  /* Disable Autoreload write complete interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARROK);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	689a      	ldr	r2, [r3, #8]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2110      	movs	r1, #16
 8004b34:	438a      	bics	r2, r1
 8004b36:	609a      	str	r2, [r3, #8]

  /* Disable Autoreload match interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARRM);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	689a      	ldr	r2, [r3, #8]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2102      	movs	r1, #2
 8004b44:	438a      	bics	r2, r1
 8004b46:	609a      	str	r2, [r3, #8]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	222e      	movs	r2, #46	; 0x2e
 8004b4c:	2101      	movs	r1, #1
 8004b4e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	0018      	movs	r0, r3
 8004b54:	46bd      	mov	sp, r7
 8004b56:	b002      	add	sp, #8
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	46c0      	nop			; (mov r8, r8)
 8004b5c:	40010400 	.word	0x40010400
 8004b60:	dfffffff 	.word	0xdfffffff

08004b64 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2201      	movs	r2, #1
 8004b74:	4013      	ands	r3, r2
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d10e      	bne.n	8004b98 <HAL_LPTIM_IRQHandler+0x34>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	2201      	movs	r2, #1
 8004b82:	4013      	ands	r3, r2
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d107      	bne.n	8004b98 <HAL_LPTIM_IRQHandler+0x34>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	0018      	movs	r0, r3
 8004b94:	f000 f888 	bl	8004ca8 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2202      	movs	r2, #2
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d10e      	bne.n	8004bc4 <HAL_LPTIM_IRQHandler+0x60>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	2202      	movs	r2, #2
 8004bae:	4013      	ands	r3, r2
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d107      	bne.n	8004bc4 <HAL_LPTIM_IRQHandler+0x60>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2202      	movs	r2, #2
 8004bba:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	0018      	movs	r0, r3
 8004bc0:	f7fe ff5a 	bl	8003a78 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2204      	movs	r2, #4
 8004bcc:	4013      	ands	r3, r2
 8004bce:	2b04      	cmp	r3, #4
 8004bd0:	d10e      	bne.n	8004bf0 <HAL_LPTIM_IRQHandler+0x8c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	2204      	movs	r2, #4
 8004bda:	4013      	ands	r3, r2
 8004bdc:	2b04      	cmp	r3, #4
 8004bde:	d107      	bne.n	8004bf0 <HAL_LPTIM_IRQHandler+0x8c>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2204      	movs	r2, #4
 8004be6:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	0018      	movs	r0, r3
 8004bec:	f000 f864 	bl	8004cb8 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2208      	movs	r2, #8
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	2b08      	cmp	r3, #8
 8004bfc:	d10e      	bne.n	8004c1c <HAL_LPTIM_IRQHandler+0xb8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	2208      	movs	r2, #8
 8004c06:	4013      	ands	r3, r2
 8004c08:	2b08      	cmp	r3, #8
 8004c0a:	d107      	bne.n	8004c1c <HAL_LPTIM_IRQHandler+0xb8>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2208      	movs	r2, #8
 8004c12:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	0018      	movs	r0, r3
 8004c18:	f000 f856 	bl	8004cc8 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2210      	movs	r2, #16
 8004c24:	4013      	ands	r3, r2
 8004c26:	2b10      	cmp	r3, #16
 8004c28:	d10e      	bne.n	8004c48 <HAL_LPTIM_IRQHandler+0xe4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	2210      	movs	r2, #16
 8004c32:	4013      	ands	r3, r2
 8004c34:	2b10      	cmp	r3, #16
 8004c36:	d107      	bne.n	8004c48 <HAL_LPTIM_IRQHandler+0xe4>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2210      	movs	r2, #16
 8004c3e:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	0018      	movs	r0, r3
 8004c44:	f000 f848 	bl	8004cd8 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2220      	movs	r2, #32
 8004c50:	4013      	ands	r3, r2
 8004c52:	2b20      	cmp	r3, #32
 8004c54:	d10e      	bne.n	8004c74 <HAL_LPTIM_IRQHandler+0x110>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	2220      	movs	r2, #32
 8004c5e:	4013      	ands	r3, r2
 8004c60:	2b20      	cmp	r3, #32
 8004c62:	d107      	bne.n	8004c74 <HAL_LPTIM_IRQHandler+0x110>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2220      	movs	r2, #32
 8004c6a:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	0018      	movs	r0, r3
 8004c70:	f000 f83a 	bl	8004ce8 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2240      	movs	r2, #64	; 0x40
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	2b40      	cmp	r3, #64	; 0x40
 8004c80:	d10e      	bne.n	8004ca0 <HAL_LPTIM_IRQHandler+0x13c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	2240      	movs	r2, #64	; 0x40
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	2b40      	cmp	r3, #64	; 0x40
 8004c8e:	d107      	bne.n	8004ca0 <HAL_LPTIM_IRQHandler+0x13c>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2240      	movs	r2, #64	; 0x40
 8004c96:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	0018      	movs	r0, r3
 8004c9c:	f000 f82c 	bl	8004cf8 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ca0:	46c0      	nop			; (mov r8, r8)
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	b002      	add	sp, #8
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8004cb0:	46c0      	nop			; (mov r8, r8)
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	b002      	add	sp, #8
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8004cc0:	46c0      	nop			; (mov r8, r8)
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	b002      	add	sp, #8
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8004cd0:	46c0      	nop			; (mov r8, r8)
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	b002      	add	sp, #8
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8004ce0:	46c0      	nop			; (mov r8, r8)
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	b002      	add	sp, #8
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8004cf0:	46c0      	nop			; (mov r8, r8)
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	b002      	add	sp, #8
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8004d00:	46c0      	nop			; (mov r8, r8)
 8004d02:	46bd      	mov	sp, r7
 8004d04:	b002      	add	sp, #8
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *lptim)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b08a      	sub	sp, #40	; 0x28
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8004d10:	2300      	movs	r3, #0
 8004d12:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8004d14:	b672      	cpsid	i

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)lptim->Instance)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	001a      	movs	r2, r3
 8004d1c:	4b5e      	ldr	r3, [pc, #376]	; (8004e98 <LPTIM_Disable+0x190>)
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d000      	beq.n	8004d24 <LPTIM_Disable+0x1c>
     case LPTIM2_BASE:
       tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
       break;
#endif /* LPTIM2 */
     default:
       break;
 8004d22:	e006      	b.n	8004d32 <LPTIM_Disable+0x2a>
       tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004d24:	4b5d      	ldr	r3, [pc, #372]	; (8004e9c <LPTIM_Disable+0x194>)
 8004d26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d28:	23c0      	movs	r3, #192	; 0xc0
 8004d2a:	031b      	lsls	r3, r3, #12
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	627b      	str	r3, [r7, #36]	; 0x24
       break;
 8004d30:	46c0      	nop			; (mov r8, r8)
  }

  /* Save LPTIM configuration registers */
  tmpIER = lptim->Instance->IER;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	623b      	str	r3, [r7, #32]
  tmpCFGR = lptim->Instance->CFGR;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	61fb      	str	r3, [r7, #28]
  tmpCMP = lptim->Instance->CMP;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	695b      	ldr	r3, [r3, #20]
 8004d48:	61bb      	str	r3, [r7, #24]
  tmpARR = lptim->Instance->ARR;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)lptim->Instance)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	001a      	movs	r2, r3
 8004d58:	4b4f      	ldr	r3, [pc, #316]	; (8004e98 <LPTIM_Disable+0x190>)
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d000      	beq.n	8004d60 <LPTIM_Disable+0x58>
       __HAL_RCC_LPTIM2_FORCE_RESET();
       __HAL_RCC_LPTIM2_RELEASE_RESET();
       break;
#endif /* LPTIM2 */
     default:
       break;
 8004d5e:	e00d      	b.n	8004d7c <LPTIM_Disable+0x74>
       __HAL_RCC_LPTIM1_FORCE_RESET();
 8004d60:	4b4e      	ldr	r3, [pc, #312]	; (8004e9c <LPTIM_Disable+0x194>)
 8004d62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d64:	4b4d      	ldr	r3, [pc, #308]	; (8004e9c <LPTIM_Disable+0x194>)
 8004d66:	2180      	movs	r1, #128	; 0x80
 8004d68:	0609      	lsls	r1, r1, #24
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	629a      	str	r2, [r3, #40]	; 0x28
       __HAL_RCC_LPTIM1_RELEASE_RESET();
 8004d6e:	4b4b      	ldr	r3, [pc, #300]	; (8004e9c <LPTIM_Disable+0x194>)
 8004d70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d72:	4b4a      	ldr	r3, [pc, #296]	; (8004e9c <LPTIM_Disable+0x194>)
 8004d74:	0052      	lsls	r2, r2, #1
 8004d76:	0852      	lsrs	r2, r2, #1
 8004d78:	629a      	str	r2, [r3, #40]	; 0x28
       break;
 8004d7a:	46c0      	nop			; (mov r8, r8)

  /*********** Restore LPTIM Config ***********/
  uint32_t Ref_Time;
  uint32_t Time_Elapsed;

  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d103      	bne.n	8004d8a <LPTIM_Disable+0x82>
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d100      	bne.n	8004d8a <LPTIM_Disable+0x82>
 8004d88:	e070      	b.n	8004e6c <LPTIM_Disable+0x164>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)lptim->Instance)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	001a      	movs	r2, r3
 8004d90:	4b41      	ldr	r3, [pc, #260]	; (8004e98 <LPTIM_Disable+0x190>)
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d000      	beq.n	8004d98 <LPTIM_Disable+0x90>
       case LPTIM2_BASE:
         __HAL_RCC_LPTIM2_CONFIG(0UL);
         break;
#endif /* LPTIM2 */
       default:
         break;
 8004d96:	e006      	b.n	8004da6 <LPTIM_Disable+0x9e>
         __HAL_RCC_LPTIM1_CONFIG(0UL);
 8004d98:	4b40      	ldr	r3, [pc, #256]	; (8004e9c <LPTIM_Disable+0x194>)
 8004d9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d9c:	4b3f      	ldr	r3, [pc, #252]	; (8004e9c <LPTIM_Disable+0x194>)
 8004d9e:	4940      	ldr	r1, [pc, #256]	; (8004ea0 <LPTIM_Disable+0x198>)
 8004da0:	400a      	ands	r2, r1
 8004da2:	64da      	str	r2, [r3, #76]	; 0x4c
         break;
 8004da4:	46c0      	nop			; (mov r8, r8)
    }

    if (tmpCMP != 0UL)
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d025      	beq.n	8004df8 <LPTIM_Disable+0xf0>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      lptim->Instance->CR |= LPTIM_CR_ENABLE;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	691a      	ldr	r2, [r3, #16]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2101      	movs	r1, #1
 8004db8:	430a      	orrs	r2, r1
 8004dba:	611a      	str	r2, [r3, #16]
      lptim->Instance->CMP = tmpCMP;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	69ba      	ldr	r2, [r7, #24]
 8004dc2:	615a      	str	r2, [r3, #20]
      /* Polling on CMP write ok status after above restore operation */
      Ref_Time = HAL_GetTick();
 8004dc4:	f7fe ff42 	bl	8003c4c <HAL_GetTick>
 8004dc8:	0003      	movs	r3, r0
 8004dca:	613b      	str	r3, [r7, #16]
      do
      {
        Time_Elapsed = HAL_GetTick() - Ref_Time;
 8004dcc:	f7fe ff3e 	bl	8003c4c <HAL_GetTick>
 8004dd0:	0002      	movs	r2, r0
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	60fb      	str	r3, [r7, #12]
      } while ((!(__HAL_LPTIM_GET_FLAG(lptim, LPTIM_FLAG_CMPOK))) && (Time_Elapsed <= TIMEOUT));
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2208      	movs	r2, #8
 8004de0:	4013      	ands	r3, r2
 8004de2:	2b08      	cmp	r3, #8
 8004de4:	d004      	beq.n	8004df0 <LPTIM_Disable+0xe8>
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	23fa      	movs	r3, #250	; 0xfa
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d9ed      	bls.n	8004dcc <LPTIM_Disable+0xc4>

      __HAL_LPTIM_CLEAR_FLAG(lptim, LPTIM_FLAG_CMPOK);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2208      	movs	r2, #8
 8004df6:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d025      	beq.n	8004e4a <LPTIM_Disable+0x142>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      lptim->Instance->CR |= LPTIM_CR_ENABLE;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	691a      	ldr	r2, [r3, #16]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2101      	movs	r1, #1
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	611a      	str	r2, [r3, #16]
      lptim->Instance->ARR = tmpARR;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	619a      	str	r2, [r3, #24]
      /* Polling on ARR write ok status after above restore operation */
      Ref_Time = HAL_GetTick();
 8004e16:	f7fe ff19 	bl	8003c4c <HAL_GetTick>
 8004e1a:	0003      	movs	r3, r0
 8004e1c:	613b      	str	r3, [r7, #16]
      do
      {
        Time_Elapsed = HAL_GetTick() - Ref_Time;
 8004e1e:	f7fe ff15 	bl	8003c4c <HAL_GetTick>
 8004e22:	0002      	movs	r2, r0
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	60fb      	str	r3, [r7, #12]
      } while ((!(__HAL_LPTIM_GET_FLAG(lptim, LPTIM_FLAG_ARROK))) && (Time_Elapsed <= TIMEOUT));
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2210      	movs	r2, #16
 8004e32:	4013      	ands	r3, r2
 8004e34:	2b10      	cmp	r3, #16
 8004e36:	d004      	beq.n	8004e42 <LPTIM_Disable+0x13a>
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	23fa      	movs	r3, #250	; 0xfa
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d9ed      	bls.n	8004e1e <LPTIM_Disable+0x116>

      __HAL_LPTIM_CLEAR_FLAG(lptim, LPTIM_FLAG_ARROK);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2210      	movs	r2, #16
 8004e48:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)lptim->Instance)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	001a      	movs	r2, r3
 8004e50:	4b11      	ldr	r3, [pc, #68]	; (8004e98 <LPTIM_Disable+0x190>)
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d000      	beq.n	8004e58 <LPTIM_Disable+0x150>
       case LPTIM2_BASE:
         __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
         break;
#endif /* LPTIM2 */
       default:
         break;
 8004e56:	e00a      	b.n	8004e6e <LPTIM_Disable+0x166>
         __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8004e58:	4b10      	ldr	r3, [pc, #64]	; (8004e9c <LPTIM_Disable+0x194>)
 8004e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e5c:	4a10      	ldr	r2, [pc, #64]	; (8004ea0 <LPTIM_Disable+0x198>)
 8004e5e:	4013      	ands	r3, r2
 8004e60:	0019      	movs	r1, r3
 8004e62:	4b0e      	ldr	r3, [pc, #56]	; (8004e9c <LPTIM_Disable+0x194>)
 8004e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e66:	430a      	orrs	r2, r1
 8004e68:	64da      	str	r2, [r3, #76]	; 0x4c
         break;
 8004e6a:	e000      	b.n	8004e6e <LPTIM_Disable+0x166>
    }
  }
 8004e6c:	46c0      	nop			; (mov r8, r8)

  /* Restore configuration registers (LPTIM should be disabled first) */
  lptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	691a      	ldr	r2, [r3, #16]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2101      	movs	r1, #1
 8004e7a:	438a      	bics	r2, r1
 8004e7c:	611a      	str	r2, [r3, #16]
  lptim->Instance->IER = tmpIER;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	6a3a      	ldr	r2, [r7, #32]
 8004e84:	609a      	str	r2, [r3, #8]
  lptim->Instance->CFGR = tmpCFGR;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	69fa      	ldr	r2, [r7, #28]
 8004e8c:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8004e8e:	b662      	cpsie	i

  __enable_irq();
}
 8004e90:	46c0      	nop			; (mov r8, r8)
 8004e92:	46bd      	mov	sp, r7
 8004e94:	b00a      	add	sp, #40	; 0x28
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	40007c00 	.word	0x40007c00
 8004e9c:	40021000 	.word	0x40021000
 8004ea0:	fff3ffff 	.word	0xfff3ffff

08004ea4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ea8:	4b04      	ldr	r3, [pc, #16]	; (8004ebc <HAL_PWR_EnableBkUpAccess+0x18>)
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	4b03      	ldr	r3, [pc, #12]	; (8004ebc <HAL_PWR_EnableBkUpAccess+0x18>)
 8004eae:	2180      	movs	r1, #128	; 0x80
 8004eb0:	0049      	lsls	r1, r1, #1
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	601a      	str	r2, [r3, #0]
}
 8004eb6:	46c0      	nop			; (mov r8, r8)
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	40007000 	.word	0x40007000

08004ec0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ec0:	b5b0      	push	{r4, r5, r7, lr}
 8004ec2:	b08a      	sub	sp, #40	; 0x28
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d102      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	f000 fbbc 	bl	800564c <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ed4:	4bc8      	ldr	r3, [pc, #800]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	220c      	movs	r2, #12
 8004eda:	4013      	ands	r3, r2
 8004edc:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ede:	4bc6      	ldr	r3, [pc, #792]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8004ee0:	68da      	ldr	r2, [r3, #12]
 8004ee2:	2380      	movs	r3, #128	; 0x80
 8004ee4:	025b      	lsls	r3, r3, #9
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	d100      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x36>
 8004ef4:	e07e      	b.n	8004ff4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	2b08      	cmp	r3, #8
 8004efa:	d007      	beq.n	8004f0c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	2b0c      	cmp	r3, #12
 8004f00:	d112      	bne.n	8004f28 <HAL_RCC_OscConfig+0x68>
 8004f02:	69ba      	ldr	r2, [r7, #24]
 8004f04:	2380      	movs	r3, #128	; 0x80
 8004f06:	025b      	lsls	r3, r3, #9
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d10d      	bne.n	8004f28 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f0c:	4bba      	ldr	r3, [pc, #744]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	2380      	movs	r3, #128	; 0x80
 8004f12:	029b      	lsls	r3, r3, #10
 8004f14:	4013      	ands	r3, r2
 8004f16:	d100      	bne.n	8004f1a <HAL_RCC_OscConfig+0x5a>
 8004f18:	e06b      	b.n	8004ff2 <HAL_RCC_OscConfig+0x132>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d167      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	f000 fb92 	bl	800564c <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685a      	ldr	r2, [r3, #4]
 8004f2c:	2380      	movs	r3, #128	; 0x80
 8004f2e:	025b      	lsls	r3, r3, #9
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d107      	bne.n	8004f44 <HAL_RCC_OscConfig+0x84>
 8004f34:	4bb0      	ldr	r3, [pc, #704]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	4baf      	ldr	r3, [pc, #700]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8004f3a:	2180      	movs	r1, #128	; 0x80
 8004f3c:	0249      	lsls	r1, r1, #9
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	601a      	str	r2, [r3, #0]
 8004f42:	e027      	b.n	8004f94 <HAL_RCC_OscConfig+0xd4>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	685a      	ldr	r2, [r3, #4]
 8004f48:	23a0      	movs	r3, #160	; 0xa0
 8004f4a:	02db      	lsls	r3, r3, #11
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d10e      	bne.n	8004f6e <HAL_RCC_OscConfig+0xae>
 8004f50:	4ba9      	ldr	r3, [pc, #676]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	4ba8      	ldr	r3, [pc, #672]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8004f56:	2180      	movs	r1, #128	; 0x80
 8004f58:	02c9      	lsls	r1, r1, #11
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	601a      	str	r2, [r3, #0]
 8004f5e:	4ba6      	ldr	r3, [pc, #664]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	4ba5      	ldr	r3, [pc, #660]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8004f64:	2180      	movs	r1, #128	; 0x80
 8004f66:	0249      	lsls	r1, r1, #9
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	601a      	str	r2, [r3, #0]
 8004f6c:	e012      	b.n	8004f94 <HAL_RCC_OscConfig+0xd4>
 8004f6e:	4ba2      	ldr	r3, [pc, #648]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	4ba1      	ldr	r3, [pc, #644]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8004f74:	49a1      	ldr	r1, [pc, #644]	; (80051fc <HAL_RCC_OscConfig+0x33c>)
 8004f76:	400a      	ands	r2, r1
 8004f78:	601a      	str	r2, [r3, #0]
 8004f7a:	4b9f      	ldr	r3, [pc, #636]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	2380      	movs	r3, #128	; 0x80
 8004f80:	025b      	lsls	r3, r3, #9
 8004f82:	4013      	ands	r3, r2
 8004f84:	60fb      	str	r3, [r7, #12]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	4b9b      	ldr	r3, [pc, #620]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	4b9a      	ldr	r3, [pc, #616]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8004f8e:	499c      	ldr	r1, [pc, #624]	; (8005200 <HAL_RCC_OscConfig+0x340>)
 8004f90:	400a      	ands	r2, r1
 8004f92:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d015      	beq.n	8004fc8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f9c:	f7fe fe56 	bl	8003c4c <HAL_GetTick>
 8004fa0:	0003      	movs	r3, r0
 8004fa2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004fa4:	e009      	b.n	8004fba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fa6:	f7fe fe51 	bl	8003c4c <HAL_GetTick>
 8004faa:	0002      	movs	r2, r0
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	2b64      	cmp	r3, #100	; 0x64
 8004fb2:	d902      	bls.n	8004fba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	f000 fb49 	bl	800564c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004fba:	4b8f      	ldr	r3, [pc, #572]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	2380      	movs	r3, #128	; 0x80
 8004fc0:	029b      	lsls	r3, r3, #10
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	d0ef      	beq.n	8004fa6 <HAL_RCC_OscConfig+0xe6>
 8004fc6:	e015      	b.n	8004ff4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc8:	f7fe fe40 	bl	8003c4c <HAL_GetTick>
 8004fcc:	0003      	movs	r3, r0
 8004fce:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004fd0:	e008      	b.n	8004fe4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fd2:	f7fe fe3b 	bl	8003c4c <HAL_GetTick>
 8004fd6:	0002      	movs	r2, r0
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	2b64      	cmp	r3, #100	; 0x64
 8004fde:	d901      	bls.n	8004fe4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e333      	b.n	800564c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004fe4:	4b84      	ldr	r3, [pc, #528]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	2380      	movs	r3, #128	; 0x80
 8004fea:	029b      	lsls	r3, r3, #10
 8004fec:	4013      	ands	r3, r2
 8004fee:	d1f0      	bne.n	8004fd2 <HAL_RCC_OscConfig+0x112>
 8004ff0:	e000      	b.n	8004ff4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ff2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2202      	movs	r2, #2
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	d100      	bne.n	8005000 <HAL_RCC_OscConfig+0x140>
 8004ffe:	e098      	b.n	8005132 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8005006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005008:	2220      	movs	r2, #32
 800500a:	4013      	ands	r3, r2
 800500c:	d009      	beq.n	8005022 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800500e:	4b7a      	ldr	r3, [pc, #488]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	4b79      	ldr	r3, [pc, #484]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8005014:	2120      	movs	r1, #32
 8005016:	430a      	orrs	r2, r1
 8005018:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800501a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501c:	2220      	movs	r2, #32
 800501e:	4393      	bics	r3, r2
 8005020:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	2b04      	cmp	r3, #4
 8005026:	d005      	beq.n	8005034 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	2b0c      	cmp	r3, #12
 800502c:	d13d      	bne.n	80050aa <HAL_RCC_OscConfig+0x1ea>
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d13a      	bne.n	80050aa <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8005034:	4b70      	ldr	r3, [pc, #448]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2204      	movs	r2, #4
 800503a:	4013      	ands	r3, r2
 800503c:	d004      	beq.n	8005048 <HAL_RCC_OscConfig+0x188>
 800503e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005040:	2b00      	cmp	r3, #0
 8005042:	d101      	bne.n	8005048 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e301      	b.n	800564c <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005048:	4b6b      	ldr	r3, [pc, #428]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	4a6d      	ldr	r2, [pc, #436]	; (8005204 <HAL_RCC_OscConfig+0x344>)
 800504e:	4013      	ands	r3, r2
 8005050:	0019      	movs	r1, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	021a      	lsls	r2, r3, #8
 8005058:	4b67      	ldr	r3, [pc, #412]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 800505a:	430a      	orrs	r2, r1
 800505c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800505e:	4b66      	ldr	r3, [pc, #408]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2209      	movs	r2, #9
 8005064:	4393      	bics	r3, r2
 8005066:	0019      	movs	r1, r3
 8005068:	4b63      	ldr	r3, [pc, #396]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 800506a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800506c:	430a      	orrs	r2, r1
 800506e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005070:	f000 fc20 	bl	80058b4 <HAL_RCC_GetSysClockFreq>
 8005074:	0001      	movs	r1, r0
 8005076:	4b60      	ldr	r3, [pc, #384]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	091b      	lsrs	r3, r3, #4
 800507c:	220f      	movs	r2, #15
 800507e:	4013      	ands	r3, r2
 8005080:	4a61      	ldr	r2, [pc, #388]	; (8005208 <HAL_RCC_OscConfig+0x348>)
 8005082:	5cd3      	ldrb	r3, [r2, r3]
 8005084:	000a      	movs	r2, r1
 8005086:	40da      	lsrs	r2, r3
 8005088:	4b60      	ldr	r3, [pc, #384]	; (800520c <HAL_RCC_OscConfig+0x34c>)
 800508a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 800508c:	2513      	movs	r5, #19
 800508e:	197c      	adds	r4, r7, r5
 8005090:	2000      	movs	r0, #0
 8005092:	f7fe fda5 	bl	8003be0 <HAL_InitTick>
 8005096:	0003      	movs	r3, r0
 8005098:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800509a:	197b      	adds	r3, r7, r5
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d047      	beq.n	8005132 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80050a2:	2313      	movs	r3, #19
 80050a4:	18fb      	adds	r3, r7, r3
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	e2d0      	b.n	800564c <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80050aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d027      	beq.n	8005100 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80050b0:	4b51      	ldr	r3, [pc, #324]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2209      	movs	r2, #9
 80050b6:	4393      	bics	r3, r2
 80050b8:	0019      	movs	r1, r3
 80050ba:	4b4f      	ldr	r3, [pc, #316]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 80050bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050be:	430a      	orrs	r2, r1
 80050c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050c2:	f7fe fdc3 	bl	8003c4c <HAL_GetTick>
 80050c6:	0003      	movs	r3, r0
 80050c8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050ca:	e008      	b.n	80050de <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050cc:	f7fe fdbe 	bl	8003c4c <HAL_GetTick>
 80050d0:	0002      	movs	r2, r0
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d901      	bls.n	80050de <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e2b6      	b.n	800564c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050de:	4b46      	ldr	r3, [pc, #280]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2204      	movs	r2, #4
 80050e4:	4013      	ands	r3, r2
 80050e6:	d0f1      	beq.n	80050cc <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050e8:	4b43      	ldr	r3, [pc, #268]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	4a45      	ldr	r2, [pc, #276]	; (8005204 <HAL_RCC_OscConfig+0x344>)
 80050ee:	4013      	ands	r3, r2
 80050f0:	0019      	movs	r1, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	021a      	lsls	r2, r3, #8
 80050f8:	4b3f      	ldr	r3, [pc, #252]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 80050fa:	430a      	orrs	r2, r1
 80050fc:	605a      	str	r2, [r3, #4]
 80050fe:	e018      	b.n	8005132 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005100:	4b3d      	ldr	r3, [pc, #244]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	4b3c      	ldr	r3, [pc, #240]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8005106:	2101      	movs	r1, #1
 8005108:	438a      	bics	r2, r1
 800510a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800510c:	f7fe fd9e 	bl	8003c4c <HAL_GetTick>
 8005110:	0003      	movs	r3, r0
 8005112:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005114:	e008      	b.n	8005128 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005116:	f7fe fd99 	bl	8003c4c <HAL_GetTick>
 800511a:	0002      	movs	r2, r0
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	2b02      	cmp	r3, #2
 8005122:	d901      	bls.n	8005128 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e291      	b.n	800564c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005128:	4b33      	ldr	r3, [pc, #204]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2204      	movs	r2, #4
 800512e:	4013      	ands	r3, r2
 8005130:	d1f1      	bne.n	8005116 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2210      	movs	r2, #16
 8005138:	4013      	ands	r3, r2
 800513a:	d100      	bne.n	800513e <HAL_RCC_OscConfig+0x27e>
 800513c:	e09f      	b.n	800527e <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d13f      	bne.n	80051c4 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005144:	4b2c      	ldr	r3, [pc, #176]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	2380      	movs	r3, #128	; 0x80
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	4013      	ands	r3, r2
 800514e:	d005      	beq.n	800515c <HAL_RCC_OscConfig+0x29c>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	69db      	ldr	r3, [r3, #28]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d101      	bne.n	800515c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e277      	b.n	800564c <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800515c:	4b26      	ldr	r3, [pc, #152]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	4a2b      	ldr	r2, [pc, #172]	; (8005210 <HAL_RCC_OscConfig+0x350>)
 8005162:	4013      	ands	r3, r2
 8005164:	0019      	movs	r1, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800516a:	4b23      	ldr	r3, [pc, #140]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 800516c:	430a      	orrs	r2, r1
 800516e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005170:	4b21      	ldr	r3, [pc, #132]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	021b      	lsls	r3, r3, #8
 8005176:	0a19      	lsrs	r1, r3, #8
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a1b      	ldr	r3, [r3, #32]
 800517c:	061a      	lsls	r2, r3, #24
 800517e:	4b1e      	ldr	r3, [pc, #120]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8005180:	430a      	orrs	r2, r1
 8005182:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005188:	0b5b      	lsrs	r3, r3, #13
 800518a:	3301      	adds	r3, #1
 800518c:	2280      	movs	r2, #128	; 0x80
 800518e:	0212      	lsls	r2, r2, #8
 8005190:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005192:	4b19      	ldr	r3, [pc, #100]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	091b      	lsrs	r3, r3, #4
 8005198:	210f      	movs	r1, #15
 800519a:	400b      	ands	r3, r1
 800519c:	491a      	ldr	r1, [pc, #104]	; (8005208 <HAL_RCC_OscConfig+0x348>)
 800519e:	5ccb      	ldrb	r3, [r1, r3]
 80051a0:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80051a2:	4b1a      	ldr	r3, [pc, #104]	; (800520c <HAL_RCC_OscConfig+0x34c>)
 80051a4:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80051a6:	2513      	movs	r5, #19
 80051a8:	197c      	adds	r4, r7, r5
 80051aa:	2000      	movs	r0, #0
 80051ac:	f7fe fd18 	bl	8003be0 <HAL_InitTick>
 80051b0:	0003      	movs	r3, r0
 80051b2:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80051b4:	197b      	adds	r3, r7, r5
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d060      	beq.n	800527e <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 80051bc:	2313      	movs	r3, #19
 80051be:	18fb      	adds	r3, r7, r3
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	e243      	b.n	800564c <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	69db      	ldr	r3, [r3, #28]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d03e      	beq.n	800524a <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80051cc:	4b0a      	ldr	r3, [pc, #40]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	4b09      	ldr	r3, [pc, #36]	; (80051f8 <HAL_RCC_OscConfig+0x338>)
 80051d2:	2180      	movs	r1, #128	; 0x80
 80051d4:	0049      	lsls	r1, r1, #1
 80051d6:	430a      	orrs	r2, r1
 80051d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051da:	f7fe fd37 	bl	8003c4c <HAL_GetTick>
 80051de:	0003      	movs	r3, r0
 80051e0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80051e2:	e017      	b.n	8005214 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80051e4:	f7fe fd32 	bl	8003c4c <HAL_GetTick>
 80051e8:	0002      	movs	r2, r0
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d910      	bls.n	8005214 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e22a      	b.n	800564c <HAL_RCC_OscConfig+0x78c>
 80051f6:	46c0      	nop			; (mov r8, r8)
 80051f8:	40021000 	.word	0x40021000
 80051fc:	fffeffff 	.word	0xfffeffff
 8005200:	fffbffff 	.word	0xfffbffff
 8005204:	ffffe0ff 	.word	0xffffe0ff
 8005208:	08008b70 	.word	0x08008b70
 800520c:	20000054 	.word	0x20000054
 8005210:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005214:	4bc6      	ldr	r3, [pc, #792]	; (8005530 <HAL_RCC_OscConfig+0x670>)
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	2380      	movs	r3, #128	; 0x80
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	4013      	ands	r3, r2
 800521e:	d0e1      	beq.n	80051e4 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005220:	4bc3      	ldr	r3, [pc, #780]	; (8005530 <HAL_RCC_OscConfig+0x670>)
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	4ac3      	ldr	r2, [pc, #780]	; (8005534 <HAL_RCC_OscConfig+0x674>)
 8005226:	4013      	ands	r3, r2
 8005228:	0019      	movs	r1, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800522e:	4bc0      	ldr	r3, [pc, #768]	; (8005530 <HAL_RCC_OscConfig+0x670>)
 8005230:	430a      	orrs	r2, r1
 8005232:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005234:	4bbe      	ldr	r3, [pc, #760]	; (8005530 <HAL_RCC_OscConfig+0x670>)
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	021b      	lsls	r3, r3, #8
 800523a:	0a19      	lsrs	r1, r3, #8
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a1b      	ldr	r3, [r3, #32]
 8005240:	061a      	lsls	r2, r3, #24
 8005242:	4bbb      	ldr	r3, [pc, #748]	; (8005530 <HAL_RCC_OscConfig+0x670>)
 8005244:	430a      	orrs	r2, r1
 8005246:	605a      	str	r2, [r3, #4]
 8005248:	e019      	b.n	800527e <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800524a:	4bb9      	ldr	r3, [pc, #740]	; (8005530 <HAL_RCC_OscConfig+0x670>)
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	4bb8      	ldr	r3, [pc, #736]	; (8005530 <HAL_RCC_OscConfig+0x670>)
 8005250:	49b9      	ldr	r1, [pc, #740]	; (8005538 <HAL_RCC_OscConfig+0x678>)
 8005252:	400a      	ands	r2, r1
 8005254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005256:	f7fe fcf9 	bl	8003c4c <HAL_GetTick>
 800525a:	0003      	movs	r3, r0
 800525c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800525e:	e008      	b.n	8005272 <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005260:	f7fe fcf4 	bl	8003c4c <HAL_GetTick>
 8005264:	0002      	movs	r2, r0
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	2b02      	cmp	r3, #2
 800526c:	d901      	bls.n	8005272 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e1ec      	b.n	800564c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005272:	4baf      	ldr	r3, [pc, #700]	; (8005530 <HAL_RCC_OscConfig+0x670>)
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	2380      	movs	r3, #128	; 0x80
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	4013      	ands	r3, r2
 800527c:	d1f0      	bne.n	8005260 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2208      	movs	r2, #8
 8005284:	4013      	ands	r3, r2
 8005286:	d036      	beq.n	80052f6 <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	695b      	ldr	r3, [r3, #20]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d019      	beq.n	80052c4 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005290:	4ba7      	ldr	r3, [pc, #668]	; (8005530 <HAL_RCC_OscConfig+0x670>)
 8005292:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005294:	4ba6      	ldr	r3, [pc, #664]	; (8005530 <HAL_RCC_OscConfig+0x670>)
 8005296:	2101      	movs	r1, #1
 8005298:	430a      	orrs	r2, r1
 800529a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800529c:	f7fe fcd6 	bl	8003c4c <HAL_GetTick>
 80052a0:	0003      	movs	r3, r0
 80052a2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80052a4:	e008      	b.n	80052b8 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052a6:	f7fe fcd1 	bl	8003c4c <HAL_GetTick>
 80052aa:	0002      	movs	r2, r0
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d901      	bls.n	80052b8 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e1c9      	b.n	800564c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80052b8:	4b9d      	ldr	r3, [pc, #628]	; (8005530 <HAL_RCC_OscConfig+0x670>)
 80052ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052bc:	2202      	movs	r2, #2
 80052be:	4013      	ands	r3, r2
 80052c0:	d0f1      	beq.n	80052a6 <HAL_RCC_OscConfig+0x3e6>
 80052c2:	e018      	b.n	80052f6 <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052c4:	4b9a      	ldr	r3, [pc, #616]	; (8005530 <HAL_RCC_OscConfig+0x670>)
 80052c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80052c8:	4b99      	ldr	r3, [pc, #612]	; (8005530 <HAL_RCC_OscConfig+0x670>)
 80052ca:	2101      	movs	r1, #1
 80052cc:	438a      	bics	r2, r1
 80052ce:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052d0:	f7fe fcbc 	bl	8003c4c <HAL_GetTick>
 80052d4:	0003      	movs	r3, r0
 80052d6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80052d8:	e008      	b.n	80052ec <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052da:	f7fe fcb7 	bl	8003c4c <HAL_GetTick>
 80052de:	0002      	movs	r2, r0
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d901      	bls.n	80052ec <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80052e8:	2303      	movs	r3, #3
 80052ea:	e1af      	b.n	800564c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80052ec:	4b90      	ldr	r3, [pc, #576]	; (8005530 <HAL_RCC_OscConfig+0x670>)
 80052ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052f0:	2202      	movs	r2, #2
 80052f2:	4013      	ands	r3, r2
 80052f4:	d1f1      	bne.n	80052da <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2204      	movs	r2, #4
 80052fc:	4013      	ands	r3, r2
 80052fe:	d100      	bne.n	8005302 <HAL_RCC_OscConfig+0x442>
 8005300:	e0af      	b.n	8005462 <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005302:	2323      	movs	r3, #35	; 0x23
 8005304:	18fb      	adds	r3, r7, r3
 8005306:	2200      	movs	r2, #0
 8005308:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800530a:	4b89      	ldr	r3, [pc, #548]	; (8005530 <HAL_RCC_OscConfig+0x670>)
 800530c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800530e:	2380      	movs	r3, #128	; 0x80
 8005310:	055b      	lsls	r3, r3, #21
 8005312:	4013      	ands	r3, r2
 8005314:	d10a      	bne.n	800532c <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005316:	4b86      	ldr	r3, [pc, #536]	; (8005530 <HAL_RCC_OscConfig+0x670>)
 8005318:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800531a:	4b85      	ldr	r3, [pc, #532]	; (8005530 <HAL_RCC_OscConfig+0x670>)
 800531c:	2180      	movs	r1, #128	; 0x80
 800531e:	0549      	lsls	r1, r1, #21
 8005320:	430a      	orrs	r2, r1
 8005322:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005324:	2323      	movs	r3, #35	; 0x23
 8005326:	18fb      	adds	r3, r7, r3
 8005328:	2201      	movs	r2, #1
 800532a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800532c:	4b83      	ldr	r3, [pc, #524]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	2380      	movs	r3, #128	; 0x80
 8005332:	005b      	lsls	r3, r3, #1
 8005334:	4013      	ands	r3, r2
 8005336:	d11a      	bne.n	800536e <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005338:	4b80      	ldr	r3, [pc, #512]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	4b7f      	ldr	r3, [pc, #508]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 800533e:	2180      	movs	r1, #128	; 0x80
 8005340:	0049      	lsls	r1, r1, #1
 8005342:	430a      	orrs	r2, r1
 8005344:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005346:	f7fe fc81 	bl	8003c4c <HAL_GetTick>
 800534a:	0003      	movs	r3, r0
 800534c:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800534e:	e008      	b.n	8005362 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005350:	f7fe fc7c 	bl	8003c4c <HAL_GetTick>
 8005354:	0002      	movs	r2, r0
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	2b64      	cmp	r3, #100	; 0x64
 800535c:	d901      	bls.n	8005362 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e174      	b.n	800564c <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005362:	4b76      	ldr	r3, [pc, #472]	; (800553c <HAL_RCC_OscConfig+0x67c>)
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	2380      	movs	r3, #128	; 0x80
 8005368:	005b      	lsls	r3, r3, #1
 800536a:	4013      	ands	r3, r2
 800536c:	d0f0      	beq.n	8005350 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	689a      	ldr	r2, [r3, #8]
 8005372:	2380      	movs	r3, #128	; 0x80
 8005374:	005b      	lsls	r3, r3, #1
 8005376:	429a      	cmp	r2, r3
 8005378:	d107      	bne.n	800538a <HAL_RCC_OscConfig+0x4ca>
 800537a:	4b6d      	ldr	r3, [pc, #436]	; (8005530 <HAL_RCC_OscConfig+0x670>)
 800537c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800537e:	4b6c      	ldr	r3, [pc, #432]	; (8005530 <HAL_RCC_OscConfig+0x670>)
 8005380:	2180      	movs	r1, #128	; 0x80
 8005382:	0049      	lsls	r1, r1, #1
 8005384:	430a      	orrs	r2, r1
 8005386:	651a      	str	r2, [r3, #80]	; 0x50
 8005388:	e031      	b.n	80053ee <HAL_RCC_OscConfig+0x52e>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d10c      	bne.n	80053ac <HAL_RCC_OscConfig+0x4ec>
 8005392:	4b67      	ldr	r3, [pc, #412]	; (8005530 <HAL_RCC_OscConfig+0x670>)
 8005394:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005396:	4b66      	ldr	r3, [pc, #408]	; (8005530 <HAL_RCC_OscConfig+0x670>)
 8005398:	4967      	ldr	r1, [pc, #412]	; (8005538 <HAL_RCC_OscConfig+0x678>)
 800539a:	400a      	ands	r2, r1
 800539c:	651a      	str	r2, [r3, #80]	; 0x50
 800539e:	4b64      	ldr	r3, [pc, #400]	; (8005530 <HAL_RCC_OscConfig+0x670>)
 80053a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80053a2:	4b63      	ldr	r3, [pc, #396]	; (8005530 <HAL_RCC_OscConfig+0x670>)
 80053a4:	4966      	ldr	r1, [pc, #408]	; (8005540 <HAL_RCC_OscConfig+0x680>)
 80053a6:	400a      	ands	r2, r1
 80053a8:	651a      	str	r2, [r3, #80]	; 0x50
 80053aa:	e020      	b.n	80053ee <HAL_RCC_OscConfig+0x52e>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	689a      	ldr	r2, [r3, #8]
 80053b0:	23a0      	movs	r3, #160	; 0xa0
 80053b2:	00db      	lsls	r3, r3, #3
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d10e      	bne.n	80053d6 <HAL_RCC_OscConfig+0x516>
 80053b8:	4b5d      	ldr	r3, [pc, #372]	; (8005530 <HAL_RCC_OscConfig+0x670>)
 80053ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80053bc:	4b5c      	ldr	r3, [pc, #368]	; (8005530 <HAL_RCC_OscConfig+0x670>)
 80053be:	2180      	movs	r1, #128	; 0x80
 80053c0:	00c9      	lsls	r1, r1, #3
 80053c2:	430a      	orrs	r2, r1
 80053c4:	651a      	str	r2, [r3, #80]	; 0x50
 80053c6:	4b5a      	ldr	r3, [pc, #360]	; (8005530 <HAL_RCC_OscConfig+0x670>)
 80053c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80053ca:	4b59      	ldr	r3, [pc, #356]	; (8005530 <HAL_RCC_OscConfig+0x670>)
 80053cc:	2180      	movs	r1, #128	; 0x80
 80053ce:	0049      	lsls	r1, r1, #1
 80053d0:	430a      	orrs	r2, r1
 80053d2:	651a      	str	r2, [r3, #80]	; 0x50
 80053d4:	e00b      	b.n	80053ee <HAL_RCC_OscConfig+0x52e>
 80053d6:	4b56      	ldr	r3, [pc, #344]	; (8005530 <HAL_RCC_OscConfig+0x670>)
 80053d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80053da:	4b55      	ldr	r3, [pc, #340]	; (8005530 <HAL_RCC_OscConfig+0x670>)
 80053dc:	4956      	ldr	r1, [pc, #344]	; (8005538 <HAL_RCC_OscConfig+0x678>)
 80053de:	400a      	ands	r2, r1
 80053e0:	651a      	str	r2, [r3, #80]	; 0x50
 80053e2:	4b53      	ldr	r3, [pc, #332]	; (8005530 <HAL_RCC_OscConfig+0x670>)
 80053e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80053e6:	4b52      	ldr	r3, [pc, #328]	; (8005530 <HAL_RCC_OscConfig+0x670>)
 80053e8:	4955      	ldr	r1, [pc, #340]	; (8005540 <HAL_RCC_OscConfig+0x680>)
 80053ea:	400a      	ands	r2, r1
 80053ec:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d015      	beq.n	8005422 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053f6:	f7fe fc29 	bl	8003c4c <HAL_GetTick>
 80053fa:	0003      	movs	r3, r0
 80053fc:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80053fe:	e009      	b.n	8005414 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005400:	f7fe fc24 	bl	8003c4c <HAL_GetTick>
 8005404:	0002      	movs	r2, r0
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	4a4e      	ldr	r2, [pc, #312]	; (8005544 <HAL_RCC_OscConfig+0x684>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d901      	bls.n	8005414 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	e11b      	b.n	800564c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005414:	4b46      	ldr	r3, [pc, #280]	; (8005530 <HAL_RCC_OscConfig+0x670>)
 8005416:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005418:	2380      	movs	r3, #128	; 0x80
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	4013      	ands	r3, r2
 800541e:	d0ef      	beq.n	8005400 <HAL_RCC_OscConfig+0x540>
 8005420:	e014      	b.n	800544c <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005422:	f7fe fc13 	bl	8003c4c <HAL_GetTick>
 8005426:	0003      	movs	r3, r0
 8005428:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800542a:	e009      	b.n	8005440 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800542c:	f7fe fc0e 	bl	8003c4c <HAL_GetTick>
 8005430:	0002      	movs	r2, r0
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	4a43      	ldr	r2, [pc, #268]	; (8005544 <HAL_RCC_OscConfig+0x684>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d901      	bls.n	8005440 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800543c:	2303      	movs	r3, #3
 800543e:	e105      	b.n	800564c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005440:	4b3b      	ldr	r3, [pc, #236]	; (8005530 <HAL_RCC_OscConfig+0x670>)
 8005442:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005444:	2380      	movs	r3, #128	; 0x80
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	4013      	ands	r3, r2
 800544a:	d1ef      	bne.n	800542c <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800544c:	2323      	movs	r3, #35	; 0x23
 800544e:	18fb      	adds	r3, r7, r3
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	2b01      	cmp	r3, #1
 8005454:	d105      	bne.n	8005462 <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005456:	4b36      	ldr	r3, [pc, #216]	; (8005530 <HAL_RCC_OscConfig+0x670>)
 8005458:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800545a:	4b35      	ldr	r3, [pc, #212]	; (8005530 <HAL_RCC_OscConfig+0x670>)
 800545c:	493a      	ldr	r1, [pc, #232]	; (8005548 <HAL_RCC_OscConfig+0x688>)
 800545e:	400a      	ands	r2, r1
 8005460:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2220      	movs	r2, #32
 8005468:	4013      	ands	r3, r2
 800546a:	d049      	beq.n	8005500 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d026      	beq.n	80054c2 <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005474:	4b2e      	ldr	r3, [pc, #184]	; (8005530 <HAL_RCC_OscConfig+0x670>)
 8005476:	689a      	ldr	r2, [r3, #8]
 8005478:	4b2d      	ldr	r3, [pc, #180]	; (8005530 <HAL_RCC_OscConfig+0x670>)
 800547a:	2101      	movs	r1, #1
 800547c:	430a      	orrs	r2, r1
 800547e:	609a      	str	r2, [r3, #8]
 8005480:	4b2b      	ldr	r3, [pc, #172]	; (8005530 <HAL_RCC_OscConfig+0x670>)
 8005482:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005484:	4b2a      	ldr	r3, [pc, #168]	; (8005530 <HAL_RCC_OscConfig+0x670>)
 8005486:	2101      	movs	r1, #1
 8005488:	430a      	orrs	r2, r1
 800548a:	635a      	str	r2, [r3, #52]	; 0x34
 800548c:	4b2f      	ldr	r3, [pc, #188]	; (800554c <HAL_RCC_OscConfig+0x68c>)
 800548e:	6a1a      	ldr	r2, [r3, #32]
 8005490:	4b2e      	ldr	r3, [pc, #184]	; (800554c <HAL_RCC_OscConfig+0x68c>)
 8005492:	2180      	movs	r1, #128	; 0x80
 8005494:	0189      	lsls	r1, r1, #6
 8005496:	430a      	orrs	r2, r1
 8005498:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800549a:	f7fe fbd7 	bl	8003c4c <HAL_GetTick>
 800549e:	0003      	movs	r3, r0
 80054a0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80054a2:	e008      	b.n	80054b6 <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054a4:	f7fe fbd2 	bl	8003c4c <HAL_GetTick>
 80054a8:	0002      	movs	r2, r0
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d901      	bls.n	80054b6 <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e0ca      	b.n	800564c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80054b6:	4b1e      	ldr	r3, [pc, #120]	; (8005530 <HAL_RCC_OscConfig+0x670>)
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	2202      	movs	r2, #2
 80054bc:	4013      	ands	r3, r2
 80054be:	d0f1      	beq.n	80054a4 <HAL_RCC_OscConfig+0x5e4>
 80054c0:	e01e      	b.n	8005500 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80054c2:	4b1b      	ldr	r3, [pc, #108]	; (8005530 <HAL_RCC_OscConfig+0x670>)
 80054c4:	689a      	ldr	r2, [r3, #8]
 80054c6:	4b1a      	ldr	r3, [pc, #104]	; (8005530 <HAL_RCC_OscConfig+0x670>)
 80054c8:	2101      	movs	r1, #1
 80054ca:	438a      	bics	r2, r1
 80054cc:	609a      	str	r2, [r3, #8]
 80054ce:	4b1f      	ldr	r3, [pc, #124]	; (800554c <HAL_RCC_OscConfig+0x68c>)
 80054d0:	6a1a      	ldr	r2, [r3, #32]
 80054d2:	4b1e      	ldr	r3, [pc, #120]	; (800554c <HAL_RCC_OscConfig+0x68c>)
 80054d4:	491e      	ldr	r1, [pc, #120]	; (8005550 <HAL_RCC_OscConfig+0x690>)
 80054d6:	400a      	ands	r2, r1
 80054d8:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054da:	f7fe fbb7 	bl	8003c4c <HAL_GetTick>
 80054de:	0003      	movs	r3, r0
 80054e0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80054e2:	e008      	b.n	80054f6 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054e4:	f7fe fbb2 	bl	8003c4c <HAL_GetTick>
 80054e8:	0002      	movs	r2, r0
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e0aa      	b.n	800564c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80054f6:	4b0e      	ldr	r3, [pc, #56]	; (8005530 <HAL_RCC_OscConfig+0x670>)
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	2202      	movs	r2, #2
 80054fc:	4013      	ands	r3, r2
 80054fe:	d1f1      	bne.n	80054e4 <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005504:	2b00      	cmp	r3, #0
 8005506:	d100      	bne.n	800550a <HAL_RCC_OscConfig+0x64a>
 8005508:	e09f      	b.n	800564a <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	2b0c      	cmp	r3, #12
 800550e:	d100      	bne.n	8005512 <HAL_RCC_OscConfig+0x652>
 8005510:	e078      	b.n	8005604 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005516:	2b02      	cmp	r3, #2
 8005518:	d159      	bne.n	80055ce <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800551a:	4b05      	ldr	r3, [pc, #20]	; (8005530 <HAL_RCC_OscConfig+0x670>)
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	4b04      	ldr	r3, [pc, #16]	; (8005530 <HAL_RCC_OscConfig+0x670>)
 8005520:	490c      	ldr	r1, [pc, #48]	; (8005554 <HAL_RCC_OscConfig+0x694>)
 8005522:	400a      	ands	r2, r1
 8005524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005526:	f7fe fb91 	bl	8003c4c <HAL_GetTick>
 800552a:	0003      	movs	r3, r0
 800552c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800552e:	e01c      	b.n	800556a <HAL_RCC_OscConfig+0x6aa>
 8005530:	40021000 	.word	0x40021000
 8005534:	ffff1fff 	.word	0xffff1fff
 8005538:	fffffeff 	.word	0xfffffeff
 800553c:	40007000 	.word	0x40007000
 8005540:	fffffbff 	.word	0xfffffbff
 8005544:	00001388 	.word	0x00001388
 8005548:	efffffff 	.word	0xefffffff
 800554c:	40010000 	.word	0x40010000
 8005550:	ffffdfff 	.word	0xffffdfff
 8005554:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005558:	f7fe fb78 	bl	8003c4c <HAL_GetTick>
 800555c:	0002      	movs	r2, r0
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	2b02      	cmp	r3, #2
 8005564:	d901      	bls.n	800556a <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e070      	b.n	800564c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800556a:	4b3a      	ldr	r3, [pc, #232]	; (8005654 <HAL_RCC_OscConfig+0x794>)
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	2380      	movs	r3, #128	; 0x80
 8005570:	049b      	lsls	r3, r3, #18
 8005572:	4013      	ands	r3, r2
 8005574:	d1f0      	bne.n	8005558 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005576:	4b37      	ldr	r3, [pc, #220]	; (8005654 <HAL_RCC_OscConfig+0x794>)
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	4a37      	ldr	r2, [pc, #220]	; (8005658 <HAL_RCC_OscConfig+0x798>)
 800557c:	4013      	ands	r3, r2
 800557e:	0019      	movs	r1, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005588:	431a      	orrs	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800558e:	431a      	orrs	r2, r3
 8005590:	4b30      	ldr	r3, [pc, #192]	; (8005654 <HAL_RCC_OscConfig+0x794>)
 8005592:	430a      	orrs	r2, r1
 8005594:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005596:	4b2f      	ldr	r3, [pc, #188]	; (8005654 <HAL_RCC_OscConfig+0x794>)
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	4b2e      	ldr	r3, [pc, #184]	; (8005654 <HAL_RCC_OscConfig+0x794>)
 800559c:	2180      	movs	r1, #128	; 0x80
 800559e:	0449      	lsls	r1, r1, #17
 80055a0:	430a      	orrs	r2, r1
 80055a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055a4:	f7fe fb52 	bl	8003c4c <HAL_GetTick>
 80055a8:	0003      	movs	r3, r0
 80055aa:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80055ac:	e008      	b.n	80055c0 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055ae:	f7fe fb4d 	bl	8003c4c <HAL_GetTick>
 80055b2:	0002      	movs	r2, r0
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d901      	bls.n	80055c0 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e045      	b.n	800564c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80055c0:	4b24      	ldr	r3, [pc, #144]	; (8005654 <HAL_RCC_OscConfig+0x794>)
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	2380      	movs	r3, #128	; 0x80
 80055c6:	049b      	lsls	r3, r3, #18
 80055c8:	4013      	ands	r3, r2
 80055ca:	d0f0      	beq.n	80055ae <HAL_RCC_OscConfig+0x6ee>
 80055cc:	e03d      	b.n	800564a <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055ce:	4b21      	ldr	r3, [pc, #132]	; (8005654 <HAL_RCC_OscConfig+0x794>)
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	4b20      	ldr	r3, [pc, #128]	; (8005654 <HAL_RCC_OscConfig+0x794>)
 80055d4:	4921      	ldr	r1, [pc, #132]	; (800565c <HAL_RCC_OscConfig+0x79c>)
 80055d6:	400a      	ands	r2, r1
 80055d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055da:	f7fe fb37 	bl	8003c4c <HAL_GetTick>
 80055de:	0003      	movs	r3, r0
 80055e0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80055e2:	e008      	b.n	80055f6 <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055e4:	f7fe fb32 	bl	8003c4c <HAL_GetTick>
 80055e8:	0002      	movs	r2, r0
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d901      	bls.n	80055f6 <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e02a      	b.n	800564c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80055f6:	4b17      	ldr	r3, [pc, #92]	; (8005654 <HAL_RCC_OscConfig+0x794>)
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	2380      	movs	r3, #128	; 0x80
 80055fc:	049b      	lsls	r3, r3, #18
 80055fe:	4013      	ands	r3, r2
 8005600:	d1f0      	bne.n	80055e4 <HAL_RCC_OscConfig+0x724>
 8005602:	e022      	b.n	800564a <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005608:	2b01      	cmp	r3, #1
 800560a:	d101      	bne.n	8005610 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e01d      	b.n	800564c <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005610:	4b10      	ldr	r3, [pc, #64]	; (8005654 <HAL_RCC_OscConfig+0x794>)
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005616:	69ba      	ldr	r2, [r7, #24]
 8005618:	2380      	movs	r3, #128	; 0x80
 800561a:	025b      	lsls	r3, r3, #9
 800561c:	401a      	ands	r2, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005622:	429a      	cmp	r2, r3
 8005624:	d10f      	bne.n	8005646 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005626:	69ba      	ldr	r2, [r7, #24]
 8005628:	23f0      	movs	r3, #240	; 0xf0
 800562a:	039b      	lsls	r3, r3, #14
 800562c:	401a      	ands	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005632:	429a      	cmp	r2, r3
 8005634:	d107      	bne.n	8005646 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005636:	69ba      	ldr	r2, [r7, #24]
 8005638:	23c0      	movs	r3, #192	; 0xc0
 800563a:	041b      	lsls	r3, r3, #16
 800563c:	401a      	ands	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005642:	429a      	cmp	r2, r3
 8005644:	d001      	beq.n	800564a <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e000      	b.n	800564c <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	0018      	movs	r0, r3
 800564e:	46bd      	mov	sp, r7
 8005650:	b00a      	add	sp, #40	; 0x28
 8005652:	bdb0      	pop	{r4, r5, r7, pc}
 8005654:	40021000 	.word	0x40021000
 8005658:	ff02ffff 	.word	0xff02ffff
 800565c:	feffffff 	.word	0xfeffffff

08005660 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005660:	b5b0      	push	{r4, r5, r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d101      	bne.n	8005674 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e10d      	b.n	8005890 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005674:	4b88      	ldr	r3, [pc, #544]	; (8005898 <HAL_RCC_ClockConfig+0x238>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2201      	movs	r2, #1
 800567a:	4013      	ands	r3, r2
 800567c:	683a      	ldr	r2, [r7, #0]
 800567e:	429a      	cmp	r2, r3
 8005680:	d911      	bls.n	80056a6 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005682:	4b85      	ldr	r3, [pc, #532]	; (8005898 <HAL_RCC_ClockConfig+0x238>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2201      	movs	r2, #1
 8005688:	4393      	bics	r3, r2
 800568a:	0019      	movs	r1, r3
 800568c:	4b82      	ldr	r3, [pc, #520]	; (8005898 <HAL_RCC_ClockConfig+0x238>)
 800568e:	683a      	ldr	r2, [r7, #0]
 8005690:	430a      	orrs	r2, r1
 8005692:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005694:	4b80      	ldr	r3, [pc, #512]	; (8005898 <HAL_RCC_ClockConfig+0x238>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2201      	movs	r2, #1
 800569a:	4013      	ands	r3, r2
 800569c:	683a      	ldr	r2, [r7, #0]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d001      	beq.n	80056a6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e0f4      	b.n	8005890 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2202      	movs	r2, #2
 80056ac:	4013      	ands	r3, r2
 80056ae:	d009      	beq.n	80056c4 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056b0:	4b7a      	ldr	r3, [pc, #488]	; (800589c <HAL_RCC_ClockConfig+0x23c>)
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	22f0      	movs	r2, #240	; 0xf0
 80056b6:	4393      	bics	r3, r2
 80056b8:	0019      	movs	r1, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	689a      	ldr	r2, [r3, #8]
 80056be:	4b77      	ldr	r3, [pc, #476]	; (800589c <HAL_RCC_ClockConfig+0x23c>)
 80056c0:	430a      	orrs	r2, r1
 80056c2:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2201      	movs	r2, #1
 80056ca:	4013      	ands	r3, r2
 80056cc:	d100      	bne.n	80056d0 <HAL_RCC_ClockConfig+0x70>
 80056ce:	e089      	b.n	80057e4 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d107      	bne.n	80056e8 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80056d8:	4b70      	ldr	r3, [pc, #448]	; (800589c <HAL_RCC_ClockConfig+0x23c>)
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	2380      	movs	r3, #128	; 0x80
 80056de:	029b      	lsls	r3, r3, #10
 80056e0:	4013      	ands	r3, r2
 80056e2:	d120      	bne.n	8005726 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e0d3      	b.n	8005890 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	2b03      	cmp	r3, #3
 80056ee:	d107      	bne.n	8005700 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80056f0:	4b6a      	ldr	r3, [pc, #424]	; (800589c <HAL_RCC_ClockConfig+0x23c>)
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	2380      	movs	r3, #128	; 0x80
 80056f6:	049b      	lsls	r3, r3, #18
 80056f8:	4013      	ands	r3, r2
 80056fa:	d114      	bne.n	8005726 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e0c7      	b.n	8005890 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	2b01      	cmp	r3, #1
 8005706:	d106      	bne.n	8005716 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005708:	4b64      	ldr	r3, [pc, #400]	; (800589c <HAL_RCC_ClockConfig+0x23c>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2204      	movs	r2, #4
 800570e:	4013      	ands	r3, r2
 8005710:	d109      	bne.n	8005726 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e0bc      	b.n	8005890 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005716:	4b61      	ldr	r3, [pc, #388]	; (800589c <HAL_RCC_ClockConfig+0x23c>)
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	2380      	movs	r3, #128	; 0x80
 800571c:	009b      	lsls	r3, r3, #2
 800571e:	4013      	ands	r3, r2
 8005720:	d101      	bne.n	8005726 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e0b4      	b.n	8005890 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005726:	4b5d      	ldr	r3, [pc, #372]	; (800589c <HAL_RCC_ClockConfig+0x23c>)
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	2203      	movs	r2, #3
 800572c:	4393      	bics	r3, r2
 800572e:	0019      	movs	r1, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685a      	ldr	r2, [r3, #4]
 8005734:	4b59      	ldr	r3, [pc, #356]	; (800589c <HAL_RCC_ClockConfig+0x23c>)
 8005736:	430a      	orrs	r2, r1
 8005738:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800573a:	f7fe fa87 	bl	8003c4c <HAL_GetTick>
 800573e:	0003      	movs	r3, r0
 8005740:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	2b02      	cmp	r3, #2
 8005748:	d111      	bne.n	800576e <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800574a:	e009      	b.n	8005760 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800574c:	f7fe fa7e 	bl	8003c4c <HAL_GetTick>
 8005750:	0002      	movs	r2, r0
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	4a52      	ldr	r2, [pc, #328]	; (80058a0 <HAL_RCC_ClockConfig+0x240>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d901      	bls.n	8005760 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	e097      	b.n	8005890 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005760:	4b4e      	ldr	r3, [pc, #312]	; (800589c <HAL_RCC_ClockConfig+0x23c>)
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	220c      	movs	r2, #12
 8005766:	4013      	ands	r3, r2
 8005768:	2b08      	cmp	r3, #8
 800576a:	d1ef      	bne.n	800574c <HAL_RCC_ClockConfig+0xec>
 800576c:	e03a      	b.n	80057e4 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	2b03      	cmp	r3, #3
 8005774:	d111      	bne.n	800579a <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005776:	e009      	b.n	800578c <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005778:	f7fe fa68 	bl	8003c4c <HAL_GetTick>
 800577c:	0002      	movs	r2, r0
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	4a47      	ldr	r2, [pc, #284]	; (80058a0 <HAL_RCC_ClockConfig+0x240>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d901      	bls.n	800578c <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e081      	b.n	8005890 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800578c:	4b43      	ldr	r3, [pc, #268]	; (800589c <HAL_RCC_ClockConfig+0x23c>)
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	220c      	movs	r2, #12
 8005792:	4013      	ands	r3, r2
 8005794:	2b0c      	cmp	r3, #12
 8005796:	d1ef      	bne.n	8005778 <HAL_RCC_ClockConfig+0x118>
 8005798:	e024      	b.n	80057e4 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d11b      	bne.n	80057da <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80057a2:	e009      	b.n	80057b8 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057a4:	f7fe fa52 	bl	8003c4c <HAL_GetTick>
 80057a8:	0002      	movs	r2, r0
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	4a3c      	ldr	r2, [pc, #240]	; (80058a0 <HAL_RCC_ClockConfig+0x240>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d901      	bls.n	80057b8 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e06b      	b.n	8005890 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80057b8:	4b38      	ldr	r3, [pc, #224]	; (800589c <HAL_RCC_ClockConfig+0x23c>)
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	220c      	movs	r2, #12
 80057be:	4013      	ands	r3, r2
 80057c0:	2b04      	cmp	r3, #4
 80057c2:	d1ef      	bne.n	80057a4 <HAL_RCC_ClockConfig+0x144>
 80057c4:	e00e      	b.n	80057e4 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057c6:	f7fe fa41 	bl	8003c4c <HAL_GetTick>
 80057ca:	0002      	movs	r2, r0
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	4a33      	ldr	r2, [pc, #204]	; (80058a0 <HAL_RCC_ClockConfig+0x240>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d901      	bls.n	80057da <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e05a      	b.n	8005890 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80057da:	4b30      	ldr	r3, [pc, #192]	; (800589c <HAL_RCC_ClockConfig+0x23c>)
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	220c      	movs	r2, #12
 80057e0:	4013      	ands	r3, r2
 80057e2:	d1f0      	bne.n	80057c6 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057e4:	4b2c      	ldr	r3, [pc, #176]	; (8005898 <HAL_RCC_ClockConfig+0x238>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2201      	movs	r2, #1
 80057ea:	4013      	ands	r3, r2
 80057ec:	683a      	ldr	r2, [r7, #0]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d211      	bcs.n	8005816 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057f2:	4b29      	ldr	r3, [pc, #164]	; (8005898 <HAL_RCC_ClockConfig+0x238>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2201      	movs	r2, #1
 80057f8:	4393      	bics	r3, r2
 80057fa:	0019      	movs	r1, r3
 80057fc:	4b26      	ldr	r3, [pc, #152]	; (8005898 <HAL_RCC_ClockConfig+0x238>)
 80057fe:	683a      	ldr	r2, [r7, #0]
 8005800:	430a      	orrs	r2, r1
 8005802:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005804:	4b24      	ldr	r3, [pc, #144]	; (8005898 <HAL_RCC_ClockConfig+0x238>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2201      	movs	r2, #1
 800580a:	4013      	ands	r3, r2
 800580c:	683a      	ldr	r2, [r7, #0]
 800580e:	429a      	cmp	r2, r3
 8005810:	d001      	beq.n	8005816 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e03c      	b.n	8005890 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	2204      	movs	r2, #4
 800581c:	4013      	ands	r3, r2
 800581e:	d009      	beq.n	8005834 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005820:	4b1e      	ldr	r3, [pc, #120]	; (800589c <HAL_RCC_ClockConfig+0x23c>)
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	4a1f      	ldr	r2, [pc, #124]	; (80058a4 <HAL_RCC_ClockConfig+0x244>)
 8005826:	4013      	ands	r3, r2
 8005828:	0019      	movs	r1, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	68da      	ldr	r2, [r3, #12]
 800582e:	4b1b      	ldr	r3, [pc, #108]	; (800589c <HAL_RCC_ClockConfig+0x23c>)
 8005830:	430a      	orrs	r2, r1
 8005832:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2208      	movs	r2, #8
 800583a:	4013      	ands	r3, r2
 800583c:	d00a      	beq.n	8005854 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800583e:	4b17      	ldr	r3, [pc, #92]	; (800589c <HAL_RCC_ClockConfig+0x23c>)
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	4a19      	ldr	r2, [pc, #100]	; (80058a8 <HAL_RCC_ClockConfig+0x248>)
 8005844:	4013      	ands	r3, r2
 8005846:	0019      	movs	r1, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	00da      	lsls	r2, r3, #3
 800584e:	4b13      	ldr	r3, [pc, #76]	; (800589c <HAL_RCC_ClockConfig+0x23c>)
 8005850:	430a      	orrs	r2, r1
 8005852:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005854:	f000 f82e 	bl	80058b4 <HAL_RCC_GetSysClockFreq>
 8005858:	0001      	movs	r1, r0
 800585a:	4b10      	ldr	r3, [pc, #64]	; (800589c <HAL_RCC_ClockConfig+0x23c>)
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	091b      	lsrs	r3, r3, #4
 8005860:	220f      	movs	r2, #15
 8005862:	4013      	ands	r3, r2
 8005864:	4a11      	ldr	r2, [pc, #68]	; (80058ac <HAL_RCC_ClockConfig+0x24c>)
 8005866:	5cd3      	ldrb	r3, [r2, r3]
 8005868:	000a      	movs	r2, r1
 800586a:	40da      	lsrs	r2, r3
 800586c:	4b10      	ldr	r3, [pc, #64]	; (80058b0 <HAL_RCC_ClockConfig+0x250>)
 800586e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8005870:	250b      	movs	r5, #11
 8005872:	197c      	adds	r4, r7, r5
 8005874:	2000      	movs	r0, #0
 8005876:	f7fe f9b3 	bl	8003be0 <HAL_InitTick>
 800587a:	0003      	movs	r3, r0
 800587c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800587e:	197b      	adds	r3, r7, r5
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d003      	beq.n	800588e <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8005886:	230b      	movs	r3, #11
 8005888:	18fb      	adds	r3, r7, r3
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	e000      	b.n	8005890 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 800588e:	2300      	movs	r3, #0
}
 8005890:	0018      	movs	r0, r3
 8005892:	46bd      	mov	sp, r7
 8005894:	b004      	add	sp, #16
 8005896:	bdb0      	pop	{r4, r5, r7, pc}
 8005898:	40022000 	.word	0x40022000
 800589c:	40021000 	.word	0x40021000
 80058a0:	00001388 	.word	0x00001388
 80058a4:	fffff8ff 	.word	0xfffff8ff
 80058a8:	ffffc7ff 	.word	0xffffc7ff
 80058ac:	08008b70 	.word	0x08008b70
 80058b0:	20000054 	.word	0x20000054

080058b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b086      	sub	sp, #24
 80058b8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80058ba:	4b3b      	ldr	r3, [pc, #236]	; (80059a8 <HAL_RCC_GetSysClockFreq+0xf4>)
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	220c      	movs	r2, #12
 80058c4:	4013      	ands	r3, r2
 80058c6:	2b08      	cmp	r3, #8
 80058c8:	d00e      	beq.n	80058e8 <HAL_RCC_GetSysClockFreq+0x34>
 80058ca:	2b0c      	cmp	r3, #12
 80058cc:	d00f      	beq.n	80058ee <HAL_RCC_GetSysClockFreq+0x3a>
 80058ce:	2b04      	cmp	r3, #4
 80058d0:	d157      	bne.n	8005982 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80058d2:	4b35      	ldr	r3, [pc, #212]	; (80059a8 <HAL_RCC_GetSysClockFreq+0xf4>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2210      	movs	r2, #16
 80058d8:	4013      	ands	r3, r2
 80058da:	d002      	beq.n	80058e2 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80058dc:	4b33      	ldr	r3, [pc, #204]	; (80059ac <HAL_RCC_GetSysClockFreq+0xf8>)
 80058de:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80058e0:	e05d      	b.n	800599e <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 80058e2:	4b33      	ldr	r3, [pc, #204]	; (80059b0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80058e4:	613b      	str	r3, [r7, #16]
      break;
 80058e6:	e05a      	b.n	800599e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80058e8:	4b32      	ldr	r3, [pc, #200]	; (80059b4 <HAL_RCC_GetSysClockFreq+0x100>)
 80058ea:	613b      	str	r3, [r7, #16]
      break;
 80058ec:	e057      	b.n	800599e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	0c9b      	lsrs	r3, r3, #18
 80058f2:	220f      	movs	r2, #15
 80058f4:	4013      	ands	r3, r2
 80058f6:	4a30      	ldr	r2, [pc, #192]	; (80059b8 <HAL_RCC_GetSysClockFreq+0x104>)
 80058f8:	5cd3      	ldrb	r3, [r2, r3]
 80058fa:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	0d9b      	lsrs	r3, r3, #22
 8005900:	2203      	movs	r2, #3
 8005902:	4013      	ands	r3, r2
 8005904:	3301      	adds	r3, #1
 8005906:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005908:	4b27      	ldr	r3, [pc, #156]	; (80059a8 <HAL_RCC_GetSysClockFreq+0xf4>)
 800590a:	68da      	ldr	r2, [r3, #12]
 800590c:	2380      	movs	r3, #128	; 0x80
 800590e:	025b      	lsls	r3, r3, #9
 8005910:	4013      	ands	r3, r2
 8005912:	d00f      	beq.n	8005934 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8005914:	68b9      	ldr	r1, [r7, #8]
 8005916:	000a      	movs	r2, r1
 8005918:	0152      	lsls	r2, r2, #5
 800591a:	1a52      	subs	r2, r2, r1
 800591c:	0193      	lsls	r3, r2, #6
 800591e:	1a9b      	subs	r3, r3, r2
 8005920:	00db      	lsls	r3, r3, #3
 8005922:	185b      	adds	r3, r3, r1
 8005924:	025b      	lsls	r3, r3, #9
 8005926:	6879      	ldr	r1, [r7, #4]
 8005928:	0018      	movs	r0, r3
 800592a:	f7fa fbf5 	bl	8000118 <__udivsi3>
 800592e:	0003      	movs	r3, r0
 8005930:	617b      	str	r3, [r7, #20]
 8005932:	e023      	b.n	800597c <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005934:	4b1c      	ldr	r3, [pc, #112]	; (80059a8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2210      	movs	r2, #16
 800593a:	4013      	ands	r3, r2
 800593c:	d00f      	beq.n	800595e <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 800593e:	68b9      	ldr	r1, [r7, #8]
 8005940:	000a      	movs	r2, r1
 8005942:	0152      	lsls	r2, r2, #5
 8005944:	1a52      	subs	r2, r2, r1
 8005946:	0193      	lsls	r3, r2, #6
 8005948:	1a9b      	subs	r3, r3, r2
 800594a:	00db      	lsls	r3, r3, #3
 800594c:	185b      	adds	r3, r3, r1
 800594e:	021b      	lsls	r3, r3, #8
 8005950:	6879      	ldr	r1, [r7, #4]
 8005952:	0018      	movs	r0, r3
 8005954:	f7fa fbe0 	bl	8000118 <__udivsi3>
 8005958:	0003      	movs	r3, r0
 800595a:	617b      	str	r3, [r7, #20]
 800595c:	e00e      	b.n	800597c <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 800595e:	68b9      	ldr	r1, [r7, #8]
 8005960:	000a      	movs	r2, r1
 8005962:	0152      	lsls	r2, r2, #5
 8005964:	1a52      	subs	r2, r2, r1
 8005966:	0193      	lsls	r3, r2, #6
 8005968:	1a9b      	subs	r3, r3, r2
 800596a:	00db      	lsls	r3, r3, #3
 800596c:	185b      	adds	r3, r3, r1
 800596e:	029b      	lsls	r3, r3, #10
 8005970:	6879      	ldr	r1, [r7, #4]
 8005972:	0018      	movs	r0, r3
 8005974:	f7fa fbd0 	bl	8000118 <__udivsi3>
 8005978:	0003      	movs	r3, r0
 800597a:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	613b      	str	r3, [r7, #16]
      break;
 8005980:	e00d      	b.n	800599e <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005982:	4b09      	ldr	r3, [pc, #36]	; (80059a8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	0b5b      	lsrs	r3, r3, #13
 8005988:	2207      	movs	r2, #7
 800598a:	4013      	ands	r3, r2
 800598c:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	3301      	adds	r3, #1
 8005992:	2280      	movs	r2, #128	; 0x80
 8005994:	0212      	lsls	r2, r2, #8
 8005996:	409a      	lsls	r2, r3
 8005998:	0013      	movs	r3, r2
 800599a:	613b      	str	r3, [r7, #16]
      break;
 800599c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800599e:	693b      	ldr	r3, [r7, #16]
}
 80059a0:	0018      	movs	r0, r3
 80059a2:	46bd      	mov	sp, r7
 80059a4:	b006      	add	sp, #24
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	40021000 	.word	0x40021000
 80059ac:	003d0900 	.word	0x003d0900
 80059b0:	00f42400 	.word	0x00f42400
 80059b4:	007a1200 	.word	0x007a1200
 80059b8:	08008b80 	.word	0x08008b80

080059bc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b086      	sub	sp, #24
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2220      	movs	r2, #32
 80059ca:	4013      	ands	r3, r2
 80059cc:	d106      	bne.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	2380      	movs	r3, #128	; 0x80
 80059d4:	011b      	lsls	r3, r3, #4
 80059d6:	4013      	ands	r3, r2
 80059d8:	d100      	bne.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x20>
 80059da:	e0dd      	b.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 80059dc:	2317      	movs	r3, #23
 80059de:	18fb      	adds	r3, r7, r3
 80059e0:	2200      	movs	r2, #0
 80059e2:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059e4:	4ba4      	ldr	r3, [pc, #656]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80059e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059e8:	2380      	movs	r3, #128	; 0x80
 80059ea:	055b      	lsls	r3, r3, #21
 80059ec:	4013      	ands	r3, r2
 80059ee:	d10a      	bne.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059f0:	4ba1      	ldr	r3, [pc, #644]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80059f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059f4:	4ba0      	ldr	r3, [pc, #640]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80059f6:	2180      	movs	r1, #128	; 0x80
 80059f8:	0549      	lsls	r1, r1, #21
 80059fa:	430a      	orrs	r2, r1
 80059fc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80059fe:	2317      	movs	r3, #23
 8005a00:	18fb      	adds	r3, r7, r3
 8005a02:	2201      	movs	r2, #1
 8005a04:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a06:	4b9d      	ldr	r3, [pc, #628]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	2380      	movs	r3, #128	; 0x80
 8005a0c:	005b      	lsls	r3, r3, #1
 8005a0e:	4013      	ands	r3, r2
 8005a10:	d11a      	bne.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a12:	4b9a      	ldr	r3, [pc, #616]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	4b99      	ldr	r3, [pc, #612]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8005a18:	2180      	movs	r1, #128	; 0x80
 8005a1a:	0049      	lsls	r1, r1, #1
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a20:	f7fe f914 	bl	8003c4c <HAL_GetTick>
 8005a24:	0003      	movs	r3, r0
 8005a26:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a28:	e008      	b.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a2a:	f7fe f90f 	bl	8003c4c <HAL_GetTick>
 8005a2e:	0002      	movs	r2, r0
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	2b64      	cmp	r3, #100	; 0x64
 8005a36:	d901      	bls.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	e118      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a3c:	4b8f      	ldr	r3, [pc, #572]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	2380      	movs	r3, #128	; 0x80
 8005a42:	005b      	lsls	r3, r3, #1
 8005a44:	4013      	ands	r3, r2
 8005a46:	d0f0      	beq.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005a48:	4b8b      	ldr	r3, [pc, #556]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	23c0      	movs	r3, #192	; 0xc0
 8005a4e:	039b      	lsls	r3, r3, #14
 8005a50:	4013      	ands	r3, r2
 8005a52:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685a      	ldr	r2, [r3, #4]
 8005a58:	23c0      	movs	r3, #192	; 0xc0
 8005a5a:	039b      	lsls	r3, r3, #14
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d107      	bne.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	689a      	ldr	r2, [r3, #8]
 8005a68:	23c0      	movs	r3, #192	; 0xc0
 8005a6a:	039b      	lsls	r3, r3, #14
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	68fa      	ldr	r2, [r7, #12]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d013      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685a      	ldr	r2, [r3, #4]
 8005a78:	23c0      	movs	r3, #192	; 0xc0
 8005a7a:	029b      	lsls	r3, r3, #10
 8005a7c:	401a      	ands	r2, r3
 8005a7e:	23c0      	movs	r3, #192	; 0xc0
 8005a80:	029b      	lsls	r3, r3, #10
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d10a      	bne.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005a86:	4b7c      	ldr	r3, [pc, #496]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	2380      	movs	r3, #128	; 0x80
 8005a8c:	029b      	lsls	r3, r3, #10
 8005a8e:	401a      	ands	r2, r3
 8005a90:	2380      	movs	r3, #128	; 0x80
 8005a92:	029b      	lsls	r3, r3, #10
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d101      	bne.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e0e8      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005a9c:	4b76      	ldr	r3, [pc, #472]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005a9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005aa0:	23c0      	movs	r3, #192	; 0xc0
 8005aa2:	029b      	lsls	r3, r3, #10
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d049      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	685a      	ldr	r2, [r3, #4]
 8005ab2:	23c0      	movs	r3, #192	; 0xc0
 8005ab4:	029b      	lsls	r3, r3, #10
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d004      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2220      	movs	r2, #32
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	d10d      	bne.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	689a      	ldr	r2, [r3, #8]
 8005acc:	23c0      	movs	r3, #192	; 0xc0
 8005ace:	029b      	lsls	r3, r3, #10
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d034      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	2380      	movs	r3, #128	; 0x80
 8005ade:	011b      	lsls	r3, r3, #4
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	d02e      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005ae4:	4b64      	ldr	r3, [pc, #400]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ae8:	4a65      	ldr	r2, [pc, #404]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005aea:	4013      	ands	r3, r2
 8005aec:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005aee:	4b62      	ldr	r3, [pc, #392]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005af0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005af2:	4b61      	ldr	r3, [pc, #388]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005af4:	2180      	movs	r1, #128	; 0x80
 8005af6:	0309      	lsls	r1, r1, #12
 8005af8:	430a      	orrs	r2, r1
 8005afa:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005afc:	4b5e      	ldr	r3, [pc, #376]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005afe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b00:	4b5d      	ldr	r3, [pc, #372]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005b02:	4960      	ldr	r1, [pc, #384]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8005b04:	400a      	ands	r2, r1
 8005b06:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005b08:	4b5b      	ldr	r3, [pc, #364]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	2380      	movs	r3, #128	; 0x80
 8005b12:	005b      	lsls	r3, r3, #1
 8005b14:	4013      	ands	r3, r2
 8005b16:	d014      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b18:	f7fe f898 	bl	8003c4c <HAL_GetTick>
 8005b1c:	0003      	movs	r3, r0
 8005b1e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b20:	e009      	b.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b22:	f7fe f893 	bl	8003c4c <HAL_GetTick>
 8005b26:	0002      	movs	r2, r0
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	4a56      	ldr	r2, [pc, #344]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d901      	bls.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	e09b      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b36:	4b50      	ldr	r3, [pc, #320]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005b38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b3a:	2380      	movs	r3, #128	; 0x80
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	4013      	ands	r3, r2
 8005b40:	d0ef      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	685a      	ldr	r2, [r3, #4]
 8005b46:	23c0      	movs	r3, #192	; 0xc0
 8005b48:	029b      	lsls	r3, r3, #10
 8005b4a:	401a      	ands	r2, r3
 8005b4c:	23c0      	movs	r3, #192	; 0xc0
 8005b4e:	029b      	lsls	r3, r3, #10
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d10c      	bne.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8005b54:	4b48      	ldr	r3, [pc, #288]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a4c      	ldr	r2, [pc, #304]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	0019      	movs	r1, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	685a      	ldr	r2, [r3, #4]
 8005b62:	23c0      	movs	r3, #192	; 0xc0
 8005b64:	039b      	lsls	r3, r3, #14
 8005b66:	401a      	ands	r2, r3
 8005b68:	4b43      	ldr	r3, [pc, #268]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005b6a:	430a      	orrs	r2, r1
 8005b6c:	601a      	str	r2, [r3, #0]
 8005b6e:	4b42      	ldr	r3, [pc, #264]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005b70:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685a      	ldr	r2, [r3, #4]
 8005b76:	23c0      	movs	r3, #192	; 0xc0
 8005b78:	029b      	lsls	r3, r3, #10
 8005b7a:	401a      	ands	r2, r3
 8005b7c:	4b3e      	ldr	r3, [pc, #248]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005b7e:	430a      	orrs	r2, r1
 8005b80:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005b82:	2317      	movs	r3, #23
 8005b84:	18fb      	adds	r3, r7, r3
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d105      	bne.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b8c:	4b3a      	ldr	r3, [pc, #232]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005b8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b90:	4b39      	ldr	r3, [pc, #228]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005b92:	493f      	ldr	r1, [pc, #252]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005b94:	400a      	ands	r2, r1
 8005b96:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	d009      	beq.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ba2:	4b35      	ldr	r3, [pc, #212]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ba6:	2203      	movs	r2, #3
 8005ba8:	4393      	bics	r3, r2
 8005baa:	0019      	movs	r1, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	68da      	ldr	r2, [r3, #12]
 8005bb0:	4b31      	ldr	r3, [pc, #196]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005bb2:	430a      	orrs	r2, r1
 8005bb4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2202      	movs	r2, #2
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	d009      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005bc0:	4b2d      	ldr	r3, [pc, #180]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bc4:	220c      	movs	r2, #12
 8005bc6:	4393      	bics	r3, r2
 8005bc8:	0019      	movs	r1, r3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	691a      	ldr	r2, [r3, #16]
 8005bce:	4b2a      	ldr	r3, [pc, #168]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2204      	movs	r2, #4
 8005bda:	4013      	ands	r3, r2
 8005bdc:	d009      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005bde:	4b26      	ldr	r3, [pc, #152]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005be2:	4a2c      	ldr	r2, [pc, #176]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005be4:	4013      	ands	r3, r2
 8005be6:	0019      	movs	r1, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	695a      	ldr	r2, [r3, #20]
 8005bec:	4b22      	ldr	r3, [pc, #136]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005bee:	430a      	orrs	r2, r1
 8005bf0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2208      	movs	r2, #8
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	d009      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005bfc:	4b1e      	ldr	r3, [pc, #120]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c00:	4a25      	ldr	r2, [pc, #148]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8005c02:	4013      	ands	r3, r2
 8005c04:	0019      	movs	r1, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	699a      	ldr	r2, [r3, #24]
 8005c0a:	4b1b      	ldr	r3, [pc, #108]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005c0c:	430a      	orrs	r2, r1
 8005c0e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	2380      	movs	r3, #128	; 0x80
 8005c16:	005b      	lsls	r3, r3, #1
 8005c18:	4013      	ands	r3, r2
 8005c1a:	d009      	beq.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005c1c:	4b16      	ldr	r3, [pc, #88]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c20:	4a17      	ldr	r2, [pc, #92]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005c22:	4013      	ands	r3, r2
 8005c24:	0019      	movs	r1, r3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	69da      	ldr	r2, [r3, #28]
 8005c2a:	4b13      	ldr	r3, [pc, #76]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005c2c:	430a      	orrs	r2, r1
 8005c2e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2240      	movs	r2, #64	; 0x40
 8005c36:	4013      	ands	r3, r2
 8005c38:	d009      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c3a:	4b0f      	ldr	r3, [pc, #60]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c3e:	4a17      	ldr	r2, [pc, #92]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005c40:	4013      	ands	r3, r2
 8005c42:	0019      	movs	r1, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c48:	4b0b      	ldr	r3, [pc, #44]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2280      	movs	r2, #128	; 0x80
 8005c54:	4013      	ands	r3, r2
 8005c56:	d009      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005c58:	4b07      	ldr	r3, [pc, #28]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c5c:	4a10      	ldr	r2, [pc, #64]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005c5e:	4013      	ands	r3, r2
 8005c60:	0019      	movs	r1, r3
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a1a      	ldr	r2, [r3, #32]
 8005c66:	4b04      	ldr	r3, [pc, #16]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005c68:	430a      	orrs	r2, r1
 8005c6a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	0018      	movs	r0, r3
 8005c70:	46bd      	mov	sp, r7
 8005c72:	b006      	add	sp, #24
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	46c0      	nop			; (mov r8, r8)
 8005c78:	40021000 	.word	0x40021000
 8005c7c:	40007000 	.word	0x40007000
 8005c80:	fffcffff 	.word	0xfffcffff
 8005c84:	fff7ffff 	.word	0xfff7ffff
 8005c88:	00001388 	.word	0x00001388
 8005c8c:	ffcfffff 	.word	0xffcfffff
 8005c90:	efffffff 	.word	0xefffffff
 8005c94:	fffff3ff 	.word	0xfffff3ff
 8005c98:	ffffcfff 	.word	0xffffcfff
 8005c9c:	fbffffff 	.word	0xfbffffff
 8005ca0:	fff3ffff 	.word	0xfff3ffff

08005ca4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d101      	bne.n	8005cb6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e08e      	b.n	8005dd4 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2221      	movs	r2, #33	; 0x21
 8005cba:	5c9b      	ldrb	r3, [r3, r2]
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d107      	bne.n	8005cd2 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2220      	movs	r2, #32
 8005cc6:	2100      	movs	r1, #0
 8005cc8:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	0018      	movs	r0, r3
 8005cce:	f7fd fceb 	bl	80036a8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2221      	movs	r2, #33	; 0x21
 8005cd6:	2102      	movs	r1, #2
 8005cd8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	22ca      	movs	r2, #202	; 0xca
 8005ce0:	625a      	str	r2, [r3, #36]	; 0x24
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2253      	movs	r2, #83	; 0x53
 8005ce8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	0018      	movs	r0, r3
 8005cee:	f000 fcf4 	bl	80066da <RTC_EnterInitMode>
 8005cf2:	1e03      	subs	r3, r0, #0
 8005cf4:	d009      	beq.n	8005d0a <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	22ff      	movs	r2, #255	; 0xff
 8005cfc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2221      	movs	r2, #33	; 0x21
 8005d02:	2104      	movs	r1, #4
 8005d04:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e064      	b.n	8005dd4 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	689a      	ldr	r2, [r3, #8]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4931      	ldr	r1, [pc, #196]	; (8005ddc <HAL_RTC_Init+0x138>)
 8005d16:	400a      	ands	r2, r1
 8005d18:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	6899      	ldr	r1, [r3, #8]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	431a      	orrs	r2, r3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	699b      	ldr	r3, [r3, #24]
 8005d2e:	431a      	orrs	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	430a      	orrs	r2, r1
 8005d36:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	68d2      	ldr	r2, [r2, #12]
 8005d40:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	6919      	ldr	r1, [r3, #16]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	041a      	lsls	r2, r3, #16
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	430a      	orrs	r2, r1
 8005d54:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68da      	ldr	r2, [r3, #12]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2180      	movs	r1, #128	; 0x80
 8005d62:	438a      	bics	r2, r1
 8005d64:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2103      	movs	r1, #3
 8005d72:	438a      	bics	r2, r1
 8005d74:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	69da      	ldr	r2, [r3, #28]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	695b      	ldr	r3, [r3, #20]
 8005d84:	431a      	orrs	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	2220      	movs	r2, #32
 8005d96:	4013      	ands	r3, r2
 8005d98:	d113      	bne.n	8005dc2 <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	0018      	movs	r0, r3
 8005d9e:	f000 fc75 	bl	800668c <HAL_RTC_WaitForSynchro>
 8005da2:	1e03      	subs	r3, r0, #0
 8005da4:	d00d      	beq.n	8005dc2 <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	22ff      	movs	r2, #255	; 0xff
 8005dac:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2221      	movs	r2, #33	; 0x21
 8005db2:	2104      	movs	r1, #4
 8005db4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2220      	movs	r2, #32
 8005dba:	2100      	movs	r1, #0
 8005dbc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e008      	b.n	8005dd4 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	22ff      	movs	r2, #255	; 0xff
 8005dc8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2221      	movs	r2, #33	; 0x21
 8005dce:	2101      	movs	r1, #1
 8005dd0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005dd2:	2300      	movs	r3, #0
  }
}
 8005dd4:	0018      	movs	r0, r3
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	b002      	add	sp, #8
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	ff8fffbf 	.word	0xff8fffbf

08005de0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005de0:	b590      	push	{r4, r7, lr}
 8005de2:	b087      	sub	sp, #28
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2220      	movs	r2, #32
 8005df0:	5c9b      	ldrb	r3, [r3, r2]
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d101      	bne.n	8005dfa <HAL_RTC_SetTime+0x1a>
 8005df6:	2302      	movs	r3, #2
 8005df8:	e0ad      	b.n	8005f56 <HAL_RTC_SetTime+0x176>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2220      	movs	r2, #32
 8005dfe:	2101      	movs	r1, #1
 8005e00:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2221      	movs	r2, #33	; 0x21
 8005e06:	2102      	movs	r1, #2
 8005e08:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d125      	bne.n	8005e5c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	2240      	movs	r2, #64	; 0x40
 8005e18:	4013      	ands	r3, r2
 8005e1a:	d102      	bne.n	8005e22 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	0018      	movs	r0, r3
 8005e28:	f000 fc81 	bl	800672e <RTC_ByteToBcd2>
 8005e2c:	0003      	movs	r3, r0
 8005e2e:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	785b      	ldrb	r3, [r3, #1]
 8005e34:	0018      	movs	r0, r3
 8005e36:	f000 fc7a 	bl	800672e <RTC_ByteToBcd2>
 8005e3a:	0003      	movs	r3, r0
 8005e3c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005e3e:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	789b      	ldrb	r3, [r3, #2]
 8005e44:	0018      	movs	r0, r3
 8005e46:	f000 fc72 	bl	800672e <RTC_ByteToBcd2>
 8005e4a:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005e4c:	0022      	movs	r2, r4
 8005e4e:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	78db      	ldrb	r3, [r3, #3]
 8005e54:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005e56:	4313      	orrs	r3, r2
 8005e58:	617b      	str	r3, [r7, #20]
 8005e5a:	e017      	b.n	8005e8c <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	2240      	movs	r2, #64	; 0x40
 8005e64:	4013      	ands	r3, r2
 8005e66:	d102      	bne.n	8005e6e <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	785b      	ldrb	r3, [r3, #1]
 8005e78:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005e7a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005e80:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	78db      	ldrb	r3, [r3, #3]
 8005e86:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	22ca      	movs	r2, #202	; 0xca
 8005e92:	625a      	str	r2, [r3, #36]	; 0x24
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2253      	movs	r2, #83	; 0x53
 8005e9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	0018      	movs	r0, r3
 8005ea0:	f000 fc1b 	bl	80066da <RTC_EnterInitMode>
 8005ea4:	1e03      	subs	r3, r0, #0
 8005ea6:	d00d      	beq.n	8005ec4 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	22ff      	movs	r2, #255	; 0xff
 8005eae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2221      	movs	r2, #33	; 0x21
 8005eb4:	2104      	movs	r1, #4
 8005eb6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2220      	movs	r2, #32
 8005ebc:	2100      	movs	r1, #0
 8005ebe:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e048      	b.n	8005f56 <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	697a      	ldr	r2, [r7, #20]
 8005eca:	4925      	ldr	r1, [pc, #148]	; (8005f60 <HAL_RTC_SetTime+0x180>)
 8005ecc:	400a      	ands	r2, r1
 8005ece:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	689a      	ldr	r2, [r3, #8]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4922      	ldr	r1, [pc, #136]	; (8005f64 <HAL_RTC_SetTime+0x184>)
 8005edc:	400a      	ands	r2, r1
 8005ede:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	6899      	ldr	r1, [r3, #8]
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	68da      	ldr	r2, [r3, #12]
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	431a      	orrs	r2, r3
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	430a      	orrs	r2, r1
 8005ef6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68da      	ldr	r2, [r3, #12]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2180      	movs	r1, #128	; 0x80
 8005f04:	438a      	bics	r2, r1
 8005f06:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	2220      	movs	r2, #32
 8005f10:	4013      	ands	r3, r2
 8005f12:	d113      	bne.n	8005f3c <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	0018      	movs	r0, r3
 8005f18:	f000 fbb8 	bl	800668c <HAL_RTC_WaitForSynchro>
 8005f1c:	1e03      	subs	r3, r0, #0
 8005f1e:	d00d      	beq.n	8005f3c <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	22ff      	movs	r2, #255	; 0xff
 8005f26:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2221      	movs	r2, #33	; 0x21
 8005f2c:	2104      	movs	r1, #4
 8005f2e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2220      	movs	r2, #32
 8005f34:	2100      	movs	r1, #0
 8005f36:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e00c      	b.n	8005f56 <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	22ff      	movs	r2, #255	; 0xff
 8005f42:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2221      	movs	r2, #33	; 0x21
 8005f48:	2101      	movs	r1, #1
 8005f4a:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2220      	movs	r2, #32
 8005f50:	2100      	movs	r1, #0
 8005f52:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005f54:	2300      	movs	r3, #0
  }
}
 8005f56:	0018      	movs	r0, r3
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	b007      	add	sp, #28
 8005f5c:	bd90      	pop	{r4, r7, pc}
 8005f5e:	46c0      	nop			; (mov r8, r8)
 8005f60:	007f7f7f 	.word	0x007f7f7f
 8005f64:	fffbffff 	.word	0xfffbffff

08005f68 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b086      	sub	sp, #24
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	045b      	lsls	r3, r3, #17
 8005f86:	0c5a      	lsrs	r2, r3, #17
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a22      	ldr	r2, [pc, #136]	; (800601c <HAL_RTC_GetTime+0xb4>)
 8005f94:	4013      	ands	r3, r2
 8005f96:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	0c1b      	lsrs	r3, r3, #16
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	223f      	movs	r2, #63	; 0x3f
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	b2da      	uxtb	r2, r3
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	0a1b      	lsrs	r3, r3, #8
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	227f      	movs	r2, #127	; 0x7f
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	b2da      	uxtb	r2, r3
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	227f      	movs	r2, #127	; 0x7f
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	b2da      	uxtb	r2, r3
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	0c1b      	lsrs	r3, r3, #16
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	2240      	movs	r2, #64	; 0x40
 8005fce:	4013      	ands	r3, r2
 8005fd0:	b2da      	uxtb	r2, r3
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d11a      	bne.n	8006012 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	0018      	movs	r0, r3
 8005fe2:	f000 fbcd 	bl	8006780 <RTC_Bcd2ToByte>
 8005fe6:	0003      	movs	r3, r0
 8005fe8:	001a      	movs	r2, r3
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	785b      	ldrb	r3, [r3, #1]
 8005ff2:	0018      	movs	r0, r3
 8005ff4:	f000 fbc4 	bl	8006780 <RTC_Bcd2ToByte>
 8005ff8:	0003      	movs	r3, r0
 8005ffa:	001a      	movs	r2, r3
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	789b      	ldrb	r3, [r3, #2]
 8006004:	0018      	movs	r0, r3
 8006006:	f000 fbbb 	bl	8006780 <RTC_Bcd2ToByte>
 800600a:	0003      	movs	r3, r0
 800600c:	001a      	movs	r2, r3
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	0018      	movs	r0, r3
 8006016:	46bd      	mov	sp, r7
 8006018:	b006      	add	sp, #24
 800601a:	bd80      	pop	{r7, pc}
 800601c:	007f7f7f 	.word	0x007f7f7f

08006020 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006020:	b590      	push	{r4, r7, lr}
 8006022:	b087      	sub	sp, #28
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2220      	movs	r2, #32
 8006030:	5c9b      	ldrb	r3, [r3, r2]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d101      	bne.n	800603a <HAL_RTC_SetDate+0x1a>
 8006036:	2302      	movs	r3, #2
 8006038:	e099      	b.n	800616e <HAL_RTC_SetDate+0x14e>
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2220      	movs	r2, #32
 800603e:	2101      	movs	r1, #1
 8006040:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2221      	movs	r2, #33	; 0x21
 8006046:	2102      	movs	r1, #2
 8006048:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d10e      	bne.n	800606e <HAL_RTC_SetDate+0x4e>
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	785b      	ldrb	r3, [r3, #1]
 8006054:	001a      	movs	r2, r3
 8006056:	2310      	movs	r3, #16
 8006058:	4013      	ands	r3, r2
 800605a:	d008      	beq.n	800606e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	785b      	ldrb	r3, [r3, #1]
 8006060:	2210      	movs	r2, #16
 8006062:	4393      	bics	r3, r2
 8006064:	b2db      	uxtb	r3, r3
 8006066:	330a      	adds	r3, #10
 8006068:	b2da      	uxtb	r2, r3
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d11c      	bne.n	80060ae <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	78db      	ldrb	r3, [r3, #3]
 8006078:	0018      	movs	r0, r3
 800607a:	f000 fb58 	bl	800672e <RTC_ByteToBcd2>
 800607e:	0003      	movs	r3, r0
 8006080:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	785b      	ldrb	r3, [r3, #1]
 8006086:	0018      	movs	r0, r3
 8006088:	f000 fb51 	bl	800672e <RTC_ByteToBcd2>
 800608c:	0003      	movs	r3, r0
 800608e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006090:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	789b      	ldrb	r3, [r3, #2]
 8006096:	0018      	movs	r0, r3
 8006098:	f000 fb49 	bl	800672e <RTC_ByteToBcd2>
 800609c:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800609e:	0022      	movs	r2, r4
 80060a0:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80060a8:	4313      	orrs	r3, r2
 80060aa:	617b      	str	r3, [r7, #20]
 80060ac:	e00e      	b.n	80060cc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	78db      	ldrb	r3, [r3, #3]
 80060b2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	785b      	ldrb	r3, [r3, #1]
 80060b8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80060ba:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80060bc:	68ba      	ldr	r2, [r7, #8]
 80060be:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80060c0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80060c8:	4313      	orrs	r3, r2
 80060ca:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	22ca      	movs	r2, #202	; 0xca
 80060d2:	625a      	str	r2, [r3, #36]	; 0x24
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2253      	movs	r2, #83	; 0x53
 80060da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	0018      	movs	r0, r3
 80060e0:	f000 fafb 	bl	80066da <RTC_EnterInitMode>
 80060e4:	1e03      	subs	r3, r0, #0
 80060e6:	d00d      	beq.n	8006104 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	22ff      	movs	r2, #255	; 0xff
 80060ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2221      	movs	r2, #33	; 0x21
 80060f4:	2104      	movs	r1, #4
 80060f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2220      	movs	r2, #32
 80060fc:	2100      	movs	r1, #0
 80060fe:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e034      	b.n	800616e <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	697a      	ldr	r2, [r7, #20]
 800610a:	491b      	ldr	r1, [pc, #108]	; (8006178 <HAL_RTC_SetDate+0x158>)
 800610c:	400a      	ands	r2, r1
 800610e:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68da      	ldr	r2, [r3, #12]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2180      	movs	r1, #128	; 0x80
 800611c:	438a      	bics	r2, r1
 800611e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	2220      	movs	r2, #32
 8006128:	4013      	ands	r3, r2
 800612a:	d113      	bne.n	8006154 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	0018      	movs	r0, r3
 8006130:	f000 faac 	bl	800668c <HAL_RTC_WaitForSynchro>
 8006134:	1e03      	subs	r3, r0, #0
 8006136:	d00d      	beq.n	8006154 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	22ff      	movs	r2, #255	; 0xff
 800613e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2221      	movs	r2, #33	; 0x21
 8006144:	2104      	movs	r1, #4
 8006146:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2220      	movs	r2, #32
 800614c:	2100      	movs	r1, #0
 800614e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e00c      	b.n	800616e <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	22ff      	movs	r2, #255	; 0xff
 800615a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2221      	movs	r2, #33	; 0x21
 8006160:	2101      	movs	r1, #1
 8006162:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2220      	movs	r2, #32
 8006168:	2100      	movs	r1, #0
 800616a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800616c:	2300      	movs	r3, #0
  }
}
 800616e:	0018      	movs	r0, r3
 8006170:	46bd      	mov	sp, r7
 8006172:	b007      	add	sp, #28
 8006174:	bd90      	pop	{r4, r7, pc}
 8006176:	46c0      	nop			; (mov r8, r8)
 8006178:	00ffff3f 	.word	0x00ffff3f

0800617c <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b086      	sub	sp, #24
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	4a21      	ldr	r2, [pc, #132]	; (8006214 <HAL_RTC_GetDate+0x98>)
 8006190:	4013      	ands	r3, r2
 8006192:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	0c1b      	lsrs	r3, r3, #16
 8006198:	b2da      	uxtb	r2, r3
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	0a1b      	lsrs	r3, r3, #8
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	221f      	movs	r2, #31
 80061a6:	4013      	ands	r3, r2
 80061a8:	b2da      	uxtb	r2, r3
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	223f      	movs	r2, #63	; 0x3f
 80061b4:	4013      	ands	r3, r2
 80061b6:	b2da      	uxtb	r2, r3
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	0b5b      	lsrs	r3, r3, #13
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	2207      	movs	r2, #7
 80061c4:	4013      	ands	r3, r2
 80061c6:	b2da      	uxtb	r2, r3
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d11a      	bne.n	8006208 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	78db      	ldrb	r3, [r3, #3]
 80061d6:	0018      	movs	r0, r3
 80061d8:	f000 fad2 	bl	8006780 <RTC_Bcd2ToByte>
 80061dc:	0003      	movs	r3, r0
 80061de:	001a      	movs	r2, r3
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	785b      	ldrb	r3, [r3, #1]
 80061e8:	0018      	movs	r0, r3
 80061ea:	f000 fac9 	bl	8006780 <RTC_Bcd2ToByte>
 80061ee:	0003      	movs	r3, r0
 80061f0:	001a      	movs	r2, r3
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	789b      	ldrb	r3, [r3, #2]
 80061fa:	0018      	movs	r0, r3
 80061fc:	f000 fac0 	bl	8006780 <RTC_Bcd2ToByte>
 8006200:	0003      	movs	r3, r0
 8006202:	001a      	movs	r2, r3
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	0018      	movs	r0, r3
 800620c:	46bd      	mov	sp, r7
 800620e:	b006      	add	sp, #24
 8006210:	bd80      	pop	{r7, pc}
 8006212:	46c0      	nop			; (mov r8, r8)
 8006214:	00ffff3f 	.word	0x00ffff3f

08006218 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006218:	b590      	push	{r4, r7, lr}
 800621a:	b089      	sub	sp, #36	; 0x24
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2220      	movs	r2, #32
 8006228:	5c9b      	ldrb	r3, [r3, r2]
 800622a:	2b01      	cmp	r3, #1
 800622c:	d101      	bne.n	8006232 <HAL_RTC_SetAlarm_IT+0x1a>
 800622e:	2302      	movs	r3, #2
 8006230:	e130      	b.n	8006494 <HAL_RTC_SetAlarm_IT+0x27c>
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2220      	movs	r2, #32
 8006236:	2101      	movs	r1, #1
 8006238:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2221      	movs	r2, #33	; 0x21
 800623e:	2102      	movs	r1, #2
 8006240:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d136      	bne.n	80062b6 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	2240      	movs	r2, #64	; 0x40
 8006250:	4013      	ands	r3, r2
 8006252:	d102      	bne.n	800625a <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	2200      	movs	r2, #0
 8006258:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	0018      	movs	r0, r3
 8006260:	f000 fa65 	bl	800672e <RTC_ByteToBcd2>
 8006264:	0003      	movs	r3, r0
 8006266:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	785b      	ldrb	r3, [r3, #1]
 800626c:	0018      	movs	r0, r3
 800626e:	f000 fa5e 	bl	800672e <RTC_ByteToBcd2>
 8006272:	0003      	movs	r3, r0
 8006274:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8006276:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	789b      	ldrb	r3, [r3, #2]
 800627c:	0018      	movs	r0, r3
 800627e:	f000 fa56 	bl	800672e <RTC_ByteToBcd2>
 8006282:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006284:	0022      	movs	r2, r4
 8006286:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	78db      	ldrb	r3, [r3, #3]
 800628c:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800628e:	431a      	orrs	r2, r3
 8006290:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	2220      	movs	r2, #32
 8006296:	5c9b      	ldrb	r3, [r3, r2]
 8006298:	0018      	movs	r0, r3
 800629a:	f000 fa48 	bl	800672e <RTC_ByteToBcd2>
 800629e:	0003      	movs	r3, r0
 80062a0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80062a2:	0022      	movs	r2, r4
 80062a4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80062aa:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80062b0:	4313      	orrs	r3, r2
 80062b2:	61fb      	str	r3, [r7, #28]
 80062b4:	e022      	b.n	80062fc <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	2240      	movs	r2, #64	; 0x40
 80062be:	4013      	ands	r3, r2
 80062c0:	d102      	bne.n	80062c8 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	2200      	movs	r2, #0
 80062c6:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	785b      	ldrb	r3, [r3, #1]
 80062d2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80062d4:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80062d6:	68ba      	ldr	r2, [r7, #8]
 80062d8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80062da:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	78db      	ldrb	r3, [r3, #3]
 80062e0:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80062e2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	2120      	movs	r1, #32
 80062e8:	5c5b      	ldrb	r3, [r3, r1]
 80062ea:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80062ec:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80062f2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80062f8:	4313      	orrs	r3, r2
 80062fa:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	685a      	ldr	r2, [r3, #4]
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	699b      	ldr	r3, [r3, #24]
 8006304:	4313      	orrs	r3, r2
 8006306:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	22ca      	movs	r2, #202	; 0xca
 800630e:	625a      	str	r2, [r3, #36]	; 0x24
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2253      	movs	r2, #83	; 0x53
 8006316:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800631c:	2380      	movs	r3, #128	; 0x80
 800631e:	005b      	lsls	r3, r3, #1
 8006320:	429a      	cmp	r2, r3
 8006322:	d14e      	bne.n	80063c2 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	689a      	ldr	r2, [r3, #8]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	495b      	ldr	r1, [pc, #364]	; (800649c <HAL_RTC_SetAlarm_IT+0x284>)
 8006330:	400a      	ands	r2, r1
 8006332:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	22ff      	movs	r2, #255	; 0xff
 800633c:	401a      	ands	r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4957      	ldr	r1, [pc, #348]	; (80064a0 <HAL_RTC_SetAlarm_IT+0x288>)
 8006344:	430a      	orrs	r2, r1
 8006346:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006348:	f7fd fc80 	bl	8003c4c <HAL_GetTick>
 800634c:	0003      	movs	r3, r0
 800634e:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006350:	e016      	b.n	8006380 <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006352:	f7fd fc7b 	bl	8003c4c <HAL_GetTick>
 8006356:	0002      	movs	r2, r0
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	1ad2      	subs	r2, r2, r3
 800635c:	23fa      	movs	r3, #250	; 0xfa
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	429a      	cmp	r2, r3
 8006362:	d90d      	bls.n	8006380 <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	22ff      	movs	r2, #255	; 0xff
 800636a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2221      	movs	r2, #33	; 0x21
 8006370:	2103      	movs	r1, #3
 8006372:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2220      	movs	r2, #32
 8006378:	2100      	movs	r1, #0
 800637a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800637c:	2303      	movs	r3, #3
 800637e:	e089      	b.n	8006494 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	2201      	movs	r2, #1
 8006388:	4013      	ands	r3, r2
 800638a:	d0e2      	beq.n	8006352 <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	69fa      	ldr	r2, [r7, #28]
 8006392:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	69ba      	ldr	r2, [r7, #24]
 800639a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	689a      	ldr	r2, [r3, #8]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	2180      	movs	r1, #128	; 0x80
 80063a8:	0049      	lsls	r1, r1, #1
 80063aa:	430a      	orrs	r2, r1
 80063ac:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	689a      	ldr	r2, [r3, #8]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2180      	movs	r1, #128	; 0x80
 80063ba:	0149      	lsls	r1, r1, #5
 80063bc:	430a      	orrs	r2, r1
 80063be:	609a      	str	r2, [r3, #8]
 80063c0:	e04d      	b.n	800645e <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	689a      	ldr	r2, [r3, #8]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4935      	ldr	r1, [pc, #212]	; (80064a4 <HAL_RTC_SetAlarm_IT+0x28c>)
 80063ce:	400a      	ands	r2, r1
 80063d0:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	22ff      	movs	r2, #255	; 0xff
 80063da:	401a      	ands	r2, r3
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4931      	ldr	r1, [pc, #196]	; (80064a8 <HAL_RTC_SetAlarm_IT+0x290>)
 80063e2:	430a      	orrs	r2, r1
 80063e4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80063e6:	f7fd fc31 	bl	8003c4c <HAL_GetTick>
 80063ea:	0003      	movs	r3, r0
 80063ec:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80063ee:	e016      	b.n	800641e <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80063f0:	f7fd fc2c 	bl	8003c4c <HAL_GetTick>
 80063f4:	0002      	movs	r2, r0
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	1ad2      	subs	r2, r2, r3
 80063fa:	23fa      	movs	r3, #250	; 0xfa
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	429a      	cmp	r2, r3
 8006400:	d90d      	bls.n	800641e <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	22ff      	movs	r2, #255	; 0xff
 8006408:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2221      	movs	r2, #33	; 0x21
 800640e:	2103      	movs	r1, #3
 8006410:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2220      	movs	r2, #32
 8006416:	2100      	movs	r1, #0
 8006418:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800641a:	2303      	movs	r3, #3
 800641c:	e03a      	b.n	8006494 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	2202      	movs	r2, #2
 8006426:	4013      	ands	r3, r2
 8006428:	d0e2      	beq.n	80063f0 <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	69fa      	ldr	r2, [r7, #28]
 8006430:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	69ba      	ldr	r2, [r7, #24]
 8006438:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	689a      	ldr	r2, [r3, #8]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2180      	movs	r1, #128	; 0x80
 8006446:	0089      	lsls	r1, r1, #2
 8006448:	430a      	orrs	r2, r1
 800644a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	689a      	ldr	r2, [r3, #8]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2180      	movs	r1, #128	; 0x80
 8006458:	0189      	lsls	r1, r1, #6
 800645a:	430a      	orrs	r2, r1
 800645c:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800645e:	4b13      	ldr	r3, [pc, #76]	; (80064ac <HAL_RTC_SetAlarm_IT+0x294>)
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	4b12      	ldr	r3, [pc, #72]	; (80064ac <HAL_RTC_SetAlarm_IT+0x294>)
 8006464:	2180      	movs	r1, #128	; 0x80
 8006466:	0289      	lsls	r1, r1, #10
 8006468:	430a      	orrs	r2, r1
 800646a:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800646c:	4b0f      	ldr	r3, [pc, #60]	; (80064ac <HAL_RTC_SetAlarm_IT+0x294>)
 800646e:	689a      	ldr	r2, [r3, #8]
 8006470:	4b0e      	ldr	r3, [pc, #56]	; (80064ac <HAL_RTC_SetAlarm_IT+0x294>)
 8006472:	2180      	movs	r1, #128	; 0x80
 8006474:	0289      	lsls	r1, r1, #10
 8006476:	430a      	orrs	r2, r1
 8006478:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	22ff      	movs	r2, #255	; 0xff
 8006480:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2221      	movs	r2, #33	; 0x21
 8006486:	2101      	movs	r1, #1
 8006488:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2220      	movs	r2, #32
 800648e:	2100      	movs	r1, #0
 8006490:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006492:	2300      	movs	r3, #0
}
 8006494:	0018      	movs	r0, r3
 8006496:	46bd      	mov	sp, r7
 8006498:	b009      	add	sp, #36	; 0x24
 800649a:	bd90      	pop	{r4, r7, pc}
 800649c:	fffffeff 	.word	0xfffffeff
 80064a0:	fffffe7f 	.word	0xfffffe7f
 80064a4:	fffffdff 	.word	0xfffffdff
 80064a8:	fffffd7f 	.word	0xfffffd7f
 80064ac:	40010400 	.word	0x40010400

080064b0 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2220      	movs	r2, #32
 80064be:	5c9b      	ldrb	r3, [r3, r2]
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d101      	bne.n	80064c8 <HAL_RTC_DeactivateAlarm+0x18>
 80064c4:	2302      	movs	r3, #2
 80064c6:	e086      	b.n	80065d6 <HAL_RTC_DeactivateAlarm+0x126>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2220      	movs	r2, #32
 80064cc:	2101      	movs	r1, #1
 80064ce:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2221      	movs	r2, #33	; 0x21
 80064d4:	2102      	movs	r1, #2
 80064d6:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	22ca      	movs	r2, #202	; 0xca
 80064de:	625a      	str	r2, [r3, #36]	; 0x24
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2253      	movs	r2, #83	; 0x53
 80064e6:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 80064e8:	683a      	ldr	r2, [r7, #0]
 80064ea:	2380      	movs	r3, #128	; 0x80
 80064ec:	005b      	lsls	r3, r3, #1
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d132      	bne.n	8006558 <HAL_RTC_DeactivateAlarm+0xa8>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	689a      	ldr	r2, [r3, #8]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4938      	ldr	r1, [pc, #224]	; (80065e0 <HAL_RTC_DeactivateAlarm+0x130>)
 80064fe:	400a      	ands	r2, r1
 8006500:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	689a      	ldr	r2, [r3, #8]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4935      	ldr	r1, [pc, #212]	; (80065e4 <HAL_RTC_DeactivateAlarm+0x134>)
 800650e:	400a      	ands	r2, r1
 8006510:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8006512:	f7fd fb9b 	bl	8003c4c <HAL_GetTick>
 8006516:	0003      	movs	r3, r0
 8006518:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800651a:	e016      	b.n	800654a <HAL_RTC_DeactivateAlarm+0x9a>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800651c:	f7fd fb96 	bl	8003c4c <HAL_GetTick>
 8006520:	0002      	movs	r2, r0
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	1ad2      	subs	r2, r2, r3
 8006526:	23fa      	movs	r3, #250	; 0xfa
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	429a      	cmp	r2, r3
 800652c:	d90d      	bls.n	800654a <HAL_RTC_DeactivateAlarm+0x9a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	22ff      	movs	r2, #255	; 0xff
 8006534:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2221      	movs	r2, #33	; 0x21
 800653a:	2103      	movs	r1, #3
 800653c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2220      	movs	r2, #32
 8006542:	2100      	movs	r1, #0
 8006544:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006546:	2303      	movs	r3, #3
 8006548:	e045      	b.n	80065d6 <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	2201      	movs	r2, #1
 8006552:	4013      	ands	r3, r2
 8006554:	d0e2      	beq.n	800651c <HAL_RTC_DeactivateAlarm+0x6c>
 8006556:	e031      	b.n	80065bc <HAL_RTC_DeactivateAlarm+0x10c>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	689a      	ldr	r2, [r3, #8]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4921      	ldr	r1, [pc, #132]	; (80065e8 <HAL_RTC_DeactivateAlarm+0x138>)
 8006564:	400a      	ands	r2, r1
 8006566:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	689a      	ldr	r2, [r3, #8]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	491e      	ldr	r1, [pc, #120]	; (80065ec <HAL_RTC_DeactivateAlarm+0x13c>)
 8006574:	400a      	ands	r2, r1
 8006576:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8006578:	f7fd fb68 	bl	8003c4c <HAL_GetTick>
 800657c:	0003      	movs	r3, r0
 800657e:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006580:	e016      	b.n	80065b0 <HAL_RTC_DeactivateAlarm+0x100>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006582:	f7fd fb63 	bl	8003c4c <HAL_GetTick>
 8006586:	0002      	movs	r2, r0
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	1ad2      	subs	r2, r2, r3
 800658c:	23fa      	movs	r3, #250	; 0xfa
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	429a      	cmp	r2, r3
 8006592:	d90d      	bls.n	80065b0 <HAL_RTC_DeactivateAlarm+0x100>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	22ff      	movs	r2, #255	; 0xff
 800659a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2221      	movs	r2, #33	; 0x21
 80065a0:	2103      	movs	r1, #3
 80065a2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2220      	movs	r2, #32
 80065a8:	2100      	movs	r1, #0
 80065aa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80065ac:	2303      	movs	r3, #3
 80065ae:	e012      	b.n	80065d6 <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	2202      	movs	r2, #2
 80065b8:	4013      	ands	r3, r2
 80065ba:	d0e2      	beq.n	8006582 <HAL_RTC_DeactivateAlarm+0xd2>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	22ff      	movs	r2, #255	; 0xff
 80065c2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2221      	movs	r2, #33	; 0x21
 80065c8:	2101      	movs	r1, #1
 80065ca:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2220      	movs	r2, #32
 80065d0:	2100      	movs	r1, #0
 80065d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	0018      	movs	r0, r3
 80065d8:	46bd      	mov	sp, r7
 80065da:	b004      	add	sp, #16
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	46c0      	nop			; (mov r8, r8)
 80065e0:	fffffeff 	.word	0xfffffeff
 80065e4:	ffffefff 	.word	0xffffefff
 80065e8:	fffffdff 	.word	0xfffffdff
 80065ec:	ffffdfff 	.word	0xffffdfff

080065f0 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b082      	sub	sp, #8
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	689a      	ldr	r2, [r3, #8]
 80065fe:	2380      	movs	r3, #128	; 0x80
 8006600:	015b      	lsls	r3, r3, #5
 8006602:	4013      	ands	r3, r2
 8006604:	d014      	beq.n	8006630 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68da      	ldr	r2, [r3, #12]
 800660c:	2380      	movs	r3, #128	; 0x80
 800660e:	005b      	lsls	r3, r3, #1
 8006610:	4013      	ands	r3, r2
 8006612:	d00d      	beq.n	8006630 <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	0018      	movs	r0, r3
 8006618:	f7fb f8a6 	bl	8001768 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	22ff      	movs	r2, #255	; 0xff
 8006624:	401a      	ands	r2, r3
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4915      	ldr	r1, [pc, #84]	; (8006680 <HAL_RTC_AlarmIRQHandler+0x90>)
 800662c:	430a      	orrs	r2, r1
 800662e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	689a      	ldr	r2, [r3, #8]
 8006636:	2380      	movs	r3, #128	; 0x80
 8006638:	019b      	lsls	r3, r3, #6
 800663a:	4013      	ands	r3, r2
 800663c:	d014      	beq.n	8006668 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	68da      	ldr	r2, [r3, #12]
 8006644:	2380      	movs	r3, #128	; 0x80
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	4013      	ands	r3, r2
 800664a:	d00d      	beq.n	8006668 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	0018      	movs	r0, r3
 8006650:	f7fb f8aa 	bl	80017a8 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	22ff      	movs	r2, #255	; 0xff
 800665c:	401a      	ands	r2, r3
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4908      	ldr	r1, [pc, #32]	; (8006684 <HAL_RTC_AlarmIRQHandler+0x94>)
 8006664:	430a      	orrs	r2, r1
 8006666:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006668:	4b07      	ldr	r3, [pc, #28]	; (8006688 <HAL_RTC_AlarmIRQHandler+0x98>)
 800666a:	2280      	movs	r2, #128	; 0x80
 800666c:	0292      	lsls	r2, r2, #10
 800666e:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2221      	movs	r2, #33	; 0x21
 8006674:	2101      	movs	r1, #1
 8006676:	5499      	strb	r1, [r3, r2]
}
 8006678:	46c0      	nop			; (mov r8, r8)
 800667a:	46bd      	mov	sp, r7
 800667c:	b002      	add	sp, #8
 800667e:	bd80      	pop	{r7, pc}
 8006680:	fffffe7f 	.word	0xfffffe7f
 8006684:	fffffd7f 	.word	0xfffffd7f
 8006688:	40010400 	.word	0x40010400

0800668c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	68da      	ldr	r2, [r3, #12]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	21a0      	movs	r1, #160	; 0xa0
 80066a0:	438a      	bics	r2, r1
 80066a2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80066a4:	f7fd fad2 	bl	8003c4c <HAL_GetTick>
 80066a8:	0003      	movs	r3, r0
 80066aa:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80066ac:	e00a      	b.n	80066c4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80066ae:	f7fd facd 	bl	8003c4c <HAL_GetTick>
 80066b2:	0002      	movs	r2, r0
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	1ad2      	subs	r2, r2, r3
 80066b8:	23fa      	movs	r3, #250	; 0xfa
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	429a      	cmp	r2, r3
 80066be:	d901      	bls.n	80066c4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80066c0:	2303      	movs	r3, #3
 80066c2:	e006      	b.n	80066d2 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	2220      	movs	r2, #32
 80066cc:	4013      	ands	r3, r2
 80066ce:	d0ee      	beq.n	80066ae <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	0018      	movs	r0, r3
 80066d4:	46bd      	mov	sp, r7
 80066d6:	b004      	add	sp, #16
 80066d8:	bd80      	pop	{r7, pc}

080066da <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80066da:	b580      	push	{r7, lr}
 80066dc:	b084      	sub	sp, #16
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	2240      	movs	r2, #64	; 0x40
 80066ea:	4013      	ands	r3, r2
 80066ec:	d11a      	bne.n	8006724 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	2201      	movs	r2, #1
 80066f4:	4252      	negs	r2, r2
 80066f6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80066f8:	f7fd faa8 	bl	8003c4c <HAL_GetTick>
 80066fc:	0003      	movs	r3, r0
 80066fe:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006700:	e00a      	b.n	8006718 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006702:	f7fd faa3 	bl	8003c4c <HAL_GetTick>
 8006706:	0002      	movs	r2, r0
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	1ad2      	subs	r2, r2, r3
 800670c:	23fa      	movs	r3, #250	; 0xfa
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	429a      	cmp	r2, r3
 8006712:	d901      	bls.n	8006718 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8006714:	2303      	movs	r3, #3
 8006716:	e006      	b.n	8006726 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	2240      	movs	r2, #64	; 0x40
 8006720:	4013      	ands	r3, r2
 8006722:	d0ee      	beq.n	8006702 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	0018      	movs	r0, r3
 8006728:	46bd      	mov	sp, r7
 800672a:	b004      	add	sp, #16
 800672c:	bd80      	pop	{r7, pc}

0800672e <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b084      	sub	sp, #16
 8006732:	af00      	add	r7, sp, #0
 8006734:	0002      	movs	r2, r0
 8006736:	1dfb      	adds	r3, r7, #7
 8006738:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800673a:	2300      	movs	r3, #0
 800673c:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800673e:	230b      	movs	r3, #11
 8006740:	18fb      	adds	r3, r7, r3
 8006742:	1dfa      	adds	r2, r7, #7
 8006744:	7812      	ldrb	r2, [r2, #0]
 8006746:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8006748:	e008      	b.n	800675c <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	3301      	adds	r3, #1
 800674e:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8006750:	220b      	movs	r2, #11
 8006752:	18bb      	adds	r3, r7, r2
 8006754:	18ba      	adds	r2, r7, r2
 8006756:	7812      	ldrb	r2, [r2, #0]
 8006758:	3a0a      	subs	r2, #10
 800675a:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 800675c:	230b      	movs	r3, #11
 800675e:	18fb      	adds	r3, r7, r3
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	2b09      	cmp	r3, #9
 8006764:	d8f1      	bhi.n	800674a <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	b2db      	uxtb	r3, r3
 800676a:	011b      	lsls	r3, r3, #4
 800676c:	b2da      	uxtb	r2, r3
 800676e:	230b      	movs	r3, #11
 8006770:	18fb      	adds	r3, r7, r3
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	4313      	orrs	r3, r2
 8006776:	b2db      	uxtb	r3, r3
}
 8006778:	0018      	movs	r0, r3
 800677a:	46bd      	mov	sp, r7
 800677c:	b004      	add	sp, #16
 800677e:	bd80      	pop	{r7, pc}

08006780 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	0002      	movs	r2, r0
 8006788:	1dfb      	adds	r3, r7, #7
 800678a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800678c:	1dfb      	adds	r3, r7, #7
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	091b      	lsrs	r3, r3, #4
 8006792:	b2db      	uxtb	r3, r3
 8006794:	001a      	movs	r2, r3
 8006796:	0013      	movs	r3, r2
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	189b      	adds	r3, r3, r2
 800679c:	005b      	lsls	r3, r3, #1
 800679e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	b2da      	uxtb	r2, r3
 80067a4:	1dfb      	adds	r3, r7, #7
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	210f      	movs	r1, #15
 80067aa:	400b      	ands	r3, r1
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	18d3      	adds	r3, r2, r3
 80067b0:	b2db      	uxtb	r3, r3
}
 80067b2:	0018      	movs	r0, r3
 80067b4:	46bd      	mov	sp, r7
 80067b6:	b004      	add	sp, #16
 80067b8:	bd80      	pop	{r7, pc}
	...

080067bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d101      	bne.n	80067ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e059      	b.n	8006882 <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2251      	movs	r2, #81	; 0x51
 80067d8:	5c9b      	ldrb	r3, [r3, r2]
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d107      	bne.n	80067f0 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2250      	movs	r2, #80	; 0x50
 80067e4:	2100      	movs	r1, #0
 80067e6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	0018      	movs	r0, r3
 80067ec:	f7fc ff7c 	bl	80036e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2251      	movs	r2, #81	; 0x51
 80067f4:	2102      	movs	r1, #2
 80067f6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2140      	movs	r1, #64	; 0x40
 8006804:	438a      	bics	r2, r1
 8006806:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	685a      	ldr	r2, [r3, #4]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	431a      	orrs	r2, r3
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	431a      	orrs	r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	431a      	orrs	r2, r3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	695b      	ldr	r3, [r3, #20]
 8006822:	431a      	orrs	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6999      	ldr	r1, [r3, #24]
 8006828:	2380      	movs	r3, #128	; 0x80
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	400b      	ands	r3, r1
 800682e:	431a      	orrs	r2, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	69db      	ldr	r3, [r3, #28]
 8006834:	431a      	orrs	r2, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a1b      	ldr	r3, [r3, #32]
 800683a:	431a      	orrs	r2, r3
 800683c:	0011      	movs	r1, r2
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	430a      	orrs	r2, r1
 8006848:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	699b      	ldr	r3, [r3, #24]
 800684e:	0c1b      	lsrs	r3, r3, #16
 8006850:	2204      	movs	r2, #4
 8006852:	4013      	ands	r3, r2
 8006854:	0019      	movs	r1, r3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	430a      	orrs	r2, r1
 8006860:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	69da      	ldr	r2, [r3, #28]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4907      	ldr	r1, [pc, #28]	; (800688c <HAL_SPI_Init+0xd0>)
 800686e:	400a      	ands	r2, r1
 8006870:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2251      	movs	r2, #81	; 0x51
 800687c:	2101      	movs	r1, #1
 800687e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	0018      	movs	r0, r3
 8006884:	46bd      	mov	sp, r7
 8006886:	b002      	add	sp, #8
 8006888:	bd80      	pop	{r7, pc}
 800688a:	46c0      	nop			; (mov r8, r8)
 800688c:	fffff7ff 	.word	0xfffff7ff

08006890 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b088      	sub	sp, #32
 8006894:	af00      	add	r7, sp, #0
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	603b      	str	r3, [r7, #0]
 800689c:	1dbb      	adds	r3, r7, #6
 800689e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80068a0:	231f      	movs	r3, #31
 80068a2:	18fb      	adds	r3, r7, r3
 80068a4:	2200      	movs	r2, #0
 80068a6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2250      	movs	r2, #80	; 0x50
 80068ac:	5c9b      	ldrb	r3, [r3, r2]
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d101      	bne.n	80068b6 <HAL_SPI_Transmit+0x26>
 80068b2:	2302      	movs	r3, #2
 80068b4:	e136      	b.n	8006b24 <HAL_SPI_Transmit+0x294>
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2250      	movs	r2, #80	; 0x50
 80068ba:	2101      	movs	r1, #1
 80068bc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068be:	f7fd f9c5 	bl	8003c4c <HAL_GetTick>
 80068c2:	0003      	movs	r3, r0
 80068c4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80068c6:	2316      	movs	r3, #22
 80068c8:	18fb      	adds	r3, r7, r3
 80068ca:	1dba      	adds	r2, r7, #6
 80068cc:	8812      	ldrh	r2, [r2, #0]
 80068ce:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2251      	movs	r2, #81	; 0x51
 80068d4:	5c9b      	ldrb	r3, [r3, r2]
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d004      	beq.n	80068e6 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80068dc:	231f      	movs	r3, #31
 80068de:	18fb      	adds	r3, r7, r3
 80068e0:	2202      	movs	r2, #2
 80068e2:	701a      	strb	r2, [r3, #0]
    goto error;
 80068e4:	e113      	b.n	8006b0e <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d003      	beq.n	80068f4 <HAL_SPI_Transmit+0x64>
 80068ec:	1dbb      	adds	r3, r7, #6
 80068ee:	881b      	ldrh	r3, [r3, #0]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d104      	bne.n	80068fe <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80068f4:	231f      	movs	r3, #31
 80068f6:	18fb      	adds	r3, r7, r3
 80068f8:	2201      	movs	r2, #1
 80068fa:	701a      	strb	r2, [r3, #0]
    goto error;
 80068fc:	e107      	b.n	8006b0e <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2251      	movs	r2, #81	; 0x51
 8006902:	2103      	movs	r1, #3
 8006904:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	68ba      	ldr	r2, [r7, #8]
 8006910:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	1dba      	adds	r2, r7, #6
 8006916:	8812      	ldrh	r2, [r2, #0]
 8006918:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	1dba      	adds	r2, r7, #6
 800691e:	8812      	ldrh	r2, [r2, #0]
 8006920:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2200      	movs	r2, #0
 8006926:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2200      	movs	r2, #0
 800692c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2200      	movs	r2, #0
 8006932:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2200      	movs	r2, #0
 8006938:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	689a      	ldr	r2, [r3, #8]
 8006944:	2380      	movs	r3, #128	; 0x80
 8006946:	021b      	lsls	r3, r3, #8
 8006948:	429a      	cmp	r2, r3
 800694a:	d108      	bne.n	800695e <HAL_SPI_Transmit+0xce>
  {
    SPI_1LINE_TX(hspi);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	2180      	movs	r1, #128	; 0x80
 8006958:	01c9      	lsls	r1, r1, #7
 800695a:	430a      	orrs	r2, r1
 800695c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2240      	movs	r2, #64	; 0x40
 8006966:	4013      	ands	r3, r2
 8006968:	2b40      	cmp	r3, #64	; 0x40
 800696a:	d007      	beq.n	800697c <HAL_SPI_Transmit+0xec>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2140      	movs	r1, #64	; 0x40
 8006978:	430a      	orrs	r2, r1
 800697a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	68da      	ldr	r2, [r3, #12]
 8006980:	2380      	movs	r3, #128	; 0x80
 8006982:	011b      	lsls	r3, r3, #4
 8006984:	429a      	cmp	r2, r3
 8006986:	d14e      	bne.n	8006a26 <HAL_SPI_Transmit+0x196>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d004      	beq.n	800699a <HAL_SPI_Transmit+0x10a>
 8006990:	2316      	movs	r3, #22
 8006992:	18fb      	adds	r3, r7, r3
 8006994:	881b      	ldrh	r3, [r3, #0]
 8006996:	2b01      	cmp	r3, #1
 8006998:	d13f      	bne.n	8006a1a <HAL_SPI_Transmit+0x18a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800699e:	881a      	ldrh	r2, [r3, #0]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069aa:	1c9a      	adds	r2, r3, #2
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	3b01      	subs	r3, #1
 80069b8:	b29a      	uxth	r2, r3
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80069be:	e02c      	b.n	8006a1a <HAL_SPI_Transmit+0x18a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	2202      	movs	r2, #2
 80069c8:	4013      	ands	r3, r2
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d112      	bne.n	80069f4 <HAL_SPI_Transmit+0x164>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d2:	881a      	ldrh	r2, [r3, #0]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069de:	1c9a      	adds	r2, r3, #2
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	3b01      	subs	r3, #1
 80069ec:	b29a      	uxth	r2, r3
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	86da      	strh	r2, [r3, #54]	; 0x36
 80069f2:	e012      	b.n	8006a1a <HAL_SPI_Transmit+0x18a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069f4:	f7fd f92a 	bl	8003c4c <HAL_GetTick>
 80069f8:	0002      	movs	r2, r0
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	1ad3      	subs	r3, r2, r3
 80069fe:	683a      	ldr	r2, [r7, #0]
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d802      	bhi.n	8006a0a <HAL_SPI_Transmit+0x17a>
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	3301      	adds	r3, #1
 8006a08:	d102      	bne.n	8006a10 <HAL_SPI_Transmit+0x180>
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d104      	bne.n	8006a1a <HAL_SPI_Transmit+0x18a>
        {
          errorcode = HAL_TIMEOUT;
 8006a10:	231f      	movs	r3, #31
 8006a12:	18fb      	adds	r3, r7, r3
 8006a14:	2203      	movs	r2, #3
 8006a16:	701a      	strb	r2, [r3, #0]
          goto error;
 8006a18:	e079      	b.n	8006b0e <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d1cd      	bne.n	80069c0 <HAL_SPI_Transmit+0x130>
 8006a24:	e04f      	b.n	8006ac6 <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d004      	beq.n	8006a38 <HAL_SPI_Transmit+0x1a8>
 8006a2e:	2316      	movs	r3, #22
 8006a30:	18fb      	adds	r3, r7, r3
 8006a32:	881b      	ldrh	r3, [r3, #0]
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d141      	bne.n	8006abc <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	330c      	adds	r3, #12
 8006a42:	7812      	ldrb	r2, [r2, #0]
 8006a44:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a4a:	1c5a      	adds	r2, r3, #1
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	3b01      	subs	r3, #1
 8006a58:	b29a      	uxth	r2, r3
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006a5e:	e02d      	b.n	8006abc <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	2202      	movs	r2, #2
 8006a68:	4013      	ands	r3, r2
 8006a6a:	2b02      	cmp	r3, #2
 8006a6c:	d113      	bne.n	8006a96 <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	330c      	adds	r3, #12
 8006a78:	7812      	ldrb	r2, [r2, #0]
 8006a7a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a80:	1c5a      	adds	r2, r3, #1
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	3b01      	subs	r3, #1
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	86da      	strh	r2, [r3, #54]	; 0x36
 8006a94:	e012      	b.n	8006abc <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a96:	f7fd f8d9 	bl	8003c4c <HAL_GetTick>
 8006a9a:	0002      	movs	r2, r0
 8006a9c:	69bb      	ldr	r3, [r7, #24]
 8006a9e:	1ad3      	subs	r3, r2, r3
 8006aa0:	683a      	ldr	r2, [r7, #0]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d802      	bhi.n	8006aac <HAL_SPI_Transmit+0x21c>
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	d102      	bne.n	8006ab2 <HAL_SPI_Transmit+0x222>
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d104      	bne.n	8006abc <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 8006ab2:	231f      	movs	r3, #31
 8006ab4:	18fb      	adds	r3, r7, r3
 8006ab6:	2203      	movs	r2, #3
 8006ab8:	701a      	strb	r2, [r3, #0]
          goto error;
 8006aba:	e028      	b.n	8006b0e <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d1cc      	bne.n	8006a60 <HAL_SPI_Transmit+0x1d0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ac6:	69ba      	ldr	r2, [r7, #24]
 8006ac8:	6839      	ldr	r1, [r7, #0]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	0018      	movs	r0, r3
 8006ace:	f000 fa99 	bl	8007004 <SPI_EndRxTxTransaction>
 8006ad2:	1e03      	subs	r3, r0, #0
 8006ad4:	d002      	beq.n	8006adc <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2220      	movs	r2, #32
 8006ada:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d10a      	bne.n	8006afa <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	613b      	str	r3, [r7, #16]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	613b      	str	r3, [r7, #16]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	613b      	str	r3, [r7, #16]
 8006af8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d004      	beq.n	8006b0c <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 8006b02:	231f      	movs	r3, #31
 8006b04:	18fb      	adds	r3, r7, r3
 8006b06:	2201      	movs	r2, #1
 8006b08:	701a      	strb	r2, [r3, #0]
 8006b0a:	e000      	b.n	8006b0e <HAL_SPI_Transmit+0x27e>
  }

error:
 8006b0c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2251      	movs	r2, #81	; 0x51
 8006b12:	2101      	movs	r1, #1
 8006b14:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2250      	movs	r2, #80	; 0x50
 8006b1a:	2100      	movs	r1, #0
 8006b1c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006b1e:	231f      	movs	r3, #31
 8006b20:	18fb      	adds	r3, r7, r3
 8006b22:	781b      	ldrb	r3, [r3, #0]
}
 8006b24:	0018      	movs	r0, r3
 8006b26:	46bd      	mov	sp, r7
 8006b28:	b008      	add	sp, #32
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b086      	sub	sp, #24
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	1dbb      	adds	r3, r7, #6
 8006b38:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006b3a:	2317      	movs	r3, #23
 8006b3c:	18fb      	adds	r3, r7, r3
 8006b3e:	2200      	movs	r2, #0
 8006b40:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2250      	movs	r2, #80	; 0x50
 8006b46:	5c9b      	ldrb	r3, [r3, r2]
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d101      	bne.n	8006b50 <HAL_SPI_Transmit_IT+0x24>
 8006b4c:	2302      	movs	r3, #2
 8006b4e:	e072      	b.n	8006c36 <HAL_SPI_Transmit_IT+0x10a>
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2250      	movs	r2, #80	; 0x50
 8006b54:	2101      	movs	r1, #1
 8006b56:	5499      	strb	r1, [r3, r2]

  if ((pData == NULL) || (Size == 0U))
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d003      	beq.n	8006b66 <HAL_SPI_Transmit_IT+0x3a>
 8006b5e:	1dbb      	adds	r3, r7, #6
 8006b60:	881b      	ldrh	r3, [r3, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d104      	bne.n	8006b70 <HAL_SPI_Transmit_IT+0x44>
  {
    errorcode = HAL_ERROR;
 8006b66:	2317      	movs	r3, #23
 8006b68:	18fb      	adds	r3, r7, r3
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	701a      	strb	r2, [r3, #0]
    goto error;
 8006b6e:	e05b      	b.n	8006c28 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2251      	movs	r2, #81	; 0x51
 8006b74:	5c9b      	ldrb	r3, [r3, r2]
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d004      	beq.n	8006b86 <HAL_SPI_Transmit_IT+0x5a>
  {
    errorcode = HAL_BUSY;
 8006b7c:	2317      	movs	r3, #23
 8006b7e:	18fb      	adds	r3, r7, r3
 8006b80:	2202      	movs	r2, #2
 8006b82:	701a      	strb	r2, [r3, #0]
    goto error;
 8006b84:	e050      	b.n	8006c28 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2251      	movs	r2, #81	; 0x51
 8006b8a:	2103      	movs	r1, #3
 8006b8c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2200      	movs	r2, #0
 8006b92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	68ba      	ldr	r2, [r7, #8]
 8006b98:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	1dba      	adds	r2, r7, #6
 8006b9e:	8812      	ldrh	r2, [r2, #0]
 8006ba0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	1dba      	adds	r2, r7, #6
 8006ba6:	8812      	ldrh	r2, [r2, #0]
 8006ba8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2200      	movs	r2, #0
 8006bae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d003      	beq.n	8006bd2 <HAL_SPI_Transmit_IT+0xa6>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	4a1c      	ldr	r2, [pc, #112]	; (8006c40 <HAL_SPI_Transmit_IT+0x114>)
 8006bce:	645a      	str	r2, [r3, #68]	; 0x44
 8006bd0:	e002      	b.n	8006bd8 <HAL_SPI_Transmit_IT+0xac>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	4a1b      	ldr	r2, [pc, #108]	; (8006c44 <HAL_SPI_Transmit_IT+0x118>)
 8006bd6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	689a      	ldr	r2, [r3, #8]
 8006bdc:	2380      	movs	r3, #128	; 0x80
 8006bde:	021b      	lsls	r3, r3, #8
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d108      	bne.n	8006bf6 <HAL_SPI_Transmit_IT+0xca>
  {
    SPI_1LINE_TX(hspi);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2180      	movs	r1, #128	; 0x80
 8006bf0:	01c9      	lsls	r1, r1, #7
 8006bf2:	430a      	orrs	r2, r1
 8006bf4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	685a      	ldr	r2, [r3, #4]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	21a0      	movs	r1, #160	; 0xa0
 8006c02:	430a      	orrs	r2, r1
 8006c04:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2240      	movs	r2, #64	; 0x40
 8006c0e:	4013      	ands	r3, r2
 8006c10:	2b40      	cmp	r3, #64	; 0x40
 8006c12:	d008      	beq.n	8006c26 <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2140      	movs	r1, #64	; 0x40
 8006c20:	430a      	orrs	r2, r1
 8006c22:	601a      	str	r2, [r3, #0]
 8006c24:	e000      	b.n	8006c28 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 8006c26:	46c0      	nop			; (mov r8, r8)
  __HAL_UNLOCK(hspi);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2250      	movs	r2, #80	; 0x50
 8006c2c:	2100      	movs	r1, #0
 8006c2e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006c30:	2317      	movs	r3, #23
 8006c32:	18fb      	adds	r3, r7, r3
 8006c34:	781b      	ldrb	r3, [r3, #0]
}
 8006c36:	0018      	movs	r0, r3
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	b006      	add	sp, #24
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	46c0      	nop			; (mov r8, r8)
 8006c40:	08006edf 	.word	0x08006edf
 8006c44:	08006e97 	.word	0x08006e97

08006c48 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b088      	sub	sp, #32
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	099b      	lsrs	r3, r3, #6
 8006c64:	001a      	movs	r2, r3
 8006c66:	2301      	movs	r3, #1
 8006c68:	4013      	ands	r3, r2
 8006c6a:	d10f      	bne.n	8006c8c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006c72:	d00b      	beq.n	8006c8c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	099b      	lsrs	r3, r3, #6
 8006c78:	001a      	movs	r2, r3
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	d005      	beq.n	8006c8c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	0010      	movs	r0, r2
 8006c88:	4798      	blx	r3
    return;
 8006c8a:	e0d6      	b.n	8006e3a <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	085b      	lsrs	r3, r3, #1
 8006c90:	001a      	movs	r2, r3
 8006c92:	2301      	movs	r3, #1
 8006c94:	4013      	ands	r3, r2
 8006c96:	d00b      	beq.n	8006cb0 <HAL_SPI_IRQHandler+0x68>
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	09db      	lsrs	r3, r3, #7
 8006c9c:	001a      	movs	r2, r3
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	d005      	beq.n	8006cb0 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	0010      	movs	r0, r2
 8006cac:	4798      	blx	r3
    return;
 8006cae:	e0c4      	b.n	8006e3a <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	095b      	lsrs	r3, r3, #5
 8006cb4:	001a      	movs	r2, r3
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	4013      	ands	r3, r2
 8006cba:	d10c      	bne.n	8006cd6 <HAL_SPI_IRQHandler+0x8e>
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	099b      	lsrs	r3, r3, #6
 8006cc0:	001a      	movs	r2, r3
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	d106      	bne.n	8006cd6 <HAL_SPI_IRQHandler+0x8e>
 8006cc8:	69bb      	ldr	r3, [r7, #24]
 8006cca:	0a1b      	lsrs	r3, r3, #8
 8006ccc:	001a      	movs	r2, r3
 8006cce:	2301      	movs	r3, #1
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	d100      	bne.n	8006cd6 <HAL_SPI_IRQHandler+0x8e>
 8006cd4:	e0b1      	b.n	8006e3a <HAL_SPI_IRQHandler+0x1f2>
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	095b      	lsrs	r3, r3, #5
 8006cda:	001a      	movs	r2, r3
 8006cdc:	2301      	movs	r3, #1
 8006cde:	4013      	ands	r3, r2
 8006ce0:	d100      	bne.n	8006ce4 <HAL_SPI_IRQHandler+0x9c>
 8006ce2:	e0aa      	b.n	8006e3a <HAL_SPI_IRQHandler+0x1f2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006ce4:	69bb      	ldr	r3, [r7, #24]
 8006ce6:	099b      	lsrs	r3, r3, #6
 8006ce8:	001a      	movs	r2, r3
 8006cea:	2301      	movs	r3, #1
 8006cec:	4013      	ands	r3, r2
 8006cee:	d023      	beq.n	8006d38 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2251      	movs	r2, #81	; 0x51
 8006cf4:	5c9b      	ldrb	r3, [r3, r2]
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	2b03      	cmp	r3, #3
 8006cfa:	d011      	beq.n	8006d20 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d00:	2204      	movs	r2, #4
 8006d02:	431a      	orrs	r2, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d08:	2300      	movs	r3, #0
 8006d0a:	617b      	str	r3, [r7, #20]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	617b      	str	r3, [r7, #20]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	617b      	str	r3, [r7, #20]
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	e00b      	b.n	8006d38 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d20:	2300      	movs	r3, #0
 8006d22:	613b      	str	r3, [r7, #16]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	613b      	str	r3, [r7, #16]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	613b      	str	r3, [r7, #16]
 8006d34:	693b      	ldr	r3, [r7, #16]
        return;
 8006d36:	e080      	b.n	8006e3a <HAL_SPI_IRQHandler+0x1f2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006d38:	69bb      	ldr	r3, [r7, #24]
 8006d3a:	095b      	lsrs	r3, r3, #5
 8006d3c:	001a      	movs	r2, r3
 8006d3e:	2301      	movs	r3, #1
 8006d40:	4013      	ands	r3, r2
 8006d42:	d014      	beq.n	8006d6e <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d48:	2201      	movs	r2, #1
 8006d4a:	431a      	orrs	r2, r3
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006d50:	2300      	movs	r3, #0
 8006d52:	60fb      	str	r3, [r7, #12]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	60fb      	str	r3, [r7, #12]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	2140      	movs	r1, #64	; 0x40
 8006d68:	438a      	bics	r2, r1
 8006d6a:	601a      	str	r2, [r3, #0]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	0a1b      	lsrs	r3, r3, #8
 8006d72:	001a      	movs	r2, r3
 8006d74:	2301      	movs	r3, #1
 8006d76:	4013      	ands	r3, r2
 8006d78:	d00c      	beq.n	8006d94 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d7e:	2208      	movs	r2, #8
 8006d80:	431a      	orrs	r2, r3
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006d86:	2300      	movs	r3, #0
 8006d88:	60bb      	str	r3, [r7, #8]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	60bb      	str	r3, [r7, #8]
 8006d92:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d04d      	beq.n	8006e38 <HAL_SPI_IRQHandler+0x1f0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	685a      	ldr	r2, [r3, #4]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	21e0      	movs	r1, #224	; 0xe0
 8006da8:	438a      	bics	r2, r1
 8006daa:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2251      	movs	r2, #81	; 0x51
 8006db0:	2101      	movs	r1, #1
 8006db2:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	2202      	movs	r2, #2
 8006db8:	4013      	ands	r3, r2
 8006dba:	d103      	bne.n	8006dc4 <HAL_SPI_IRQHandler+0x17c>
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	d032      	beq.n	8006e2a <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	685a      	ldr	r2, [r3, #4]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	2103      	movs	r1, #3
 8006dd0:	438a      	bics	r2, r1
 8006dd2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d010      	beq.n	8006dfe <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006de0:	4a17      	ldr	r2, [pc, #92]	; (8006e40 <HAL_SPI_IRQHandler+0x1f8>)
 8006de2:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006de8:	0018      	movs	r0, r3
 8006dea:	f7fd fadb 	bl	80043a4 <HAL_DMA_Abort_IT>
 8006dee:	1e03      	subs	r3, r0, #0
 8006df0:	d005      	beq.n	8006dfe <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006df6:	2240      	movs	r2, #64	; 0x40
 8006df8:	431a      	orrs	r2, r3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d016      	beq.n	8006e34 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e0a:	4a0d      	ldr	r2, [pc, #52]	; (8006e40 <HAL_SPI_IRQHandler+0x1f8>)
 8006e0c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e12:	0018      	movs	r0, r3
 8006e14:	f7fd fac6 	bl	80043a4 <HAL_DMA_Abort_IT>
 8006e18:	1e03      	subs	r3, r0, #0
 8006e1a:	d00b      	beq.n	8006e34 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e20:	2240      	movs	r2, #64	; 0x40
 8006e22:	431a      	orrs	r2, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006e28:	e004      	b.n	8006e34 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	0018      	movs	r0, r3
 8006e2e:	f000 f809 	bl	8006e44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006e32:	e000      	b.n	8006e36 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8006e34:	46c0      	nop			; (mov r8, r8)
    return;
 8006e36:	46c0      	nop			; (mov r8, r8)
 8006e38:	46c0      	nop			; (mov r8, r8)
  }
}
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	b008      	add	sp, #32
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	08006e6d 	.word	0x08006e6d

08006e44 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006e4c:	46c0      	nop			; (mov r8, r8)
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	b002      	add	sp, #8
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b082      	sub	sp, #8
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2251      	movs	r2, #81	; 0x51
 8006e60:	5c9b      	ldrb	r3, [r3, r2]
 8006e62:	b2db      	uxtb	r3, r3
}
 8006e64:	0018      	movs	r0, r3
 8006e66:	46bd      	mov	sp, r7
 8006e68:	b002      	add	sp, #8
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e78:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2200      	movs	r2, #0
 8006e84:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	0018      	movs	r0, r3
 8006e8a:	f7ff ffdb 	bl	8006e44 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006e8e:	46c0      	nop			; (mov r8, r8)
 8006e90:	46bd      	mov	sp, r7
 8006e92:	b004      	add	sp, #16
 8006e94:	bd80      	pop	{r7, pc}

08006e96 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006e96:	b580      	push	{r7, lr}
 8006e98:	b082      	sub	sp, #8
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	330c      	adds	r3, #12
 8006ea8:	7812      	ldrb	r2, [r2, #0]
 8006eaa:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb0:	1c5a      	adds	r2, r3, #1
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	3b01      	subs	r3, #1
 8006ebe:	b29a      	uxth	r2, r3
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d103      	bne.n	8006ed6 <SPI_TxISR_8BIT+0x40>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	0018      	movs	r0, r3
 8006ed2:	f000 f8d5 	bl	8007080 <SPI_CloseTx_ISR>
  }
}
 8006ed6:	46c0      	nop			; (mov r8, r8)
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	b002      	add	sp, #8
 8006edc:	bd80      	pop	{r7, pc}

08006ede <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006ede:	b580      	push	{r7, lr}
 8006ee0:	b082      	sub	sp, #8
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eea:	881a      	ldrh	r2, [r3, #0]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef6:	1c9a      	adds	r2, r3, #2
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	3b01      	subs	r3, #1
 8006f04:	b29a      	uxth	r2, r3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d103      	bne.n	8006f1c <SPI_TxISR_16BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	0018      	movs	r0, r3
 8006f18:	f000 f8b2 	bl	8007080 <SPI_CloseTx_ISR>
  }
}
 8006f1c:	46c0      	nop			; (mov r8, r8)
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	b002      	add	sp, #8
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	603b      	str	r3, [r7, #0]
 8006f30:	1dfb      	adds	r3, r7, #7
 8006f32:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f34:	e050      	b.n	8006fd8 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	3301      	adds	r3, #1
 8006f3a:	d04d      	beq.n	8006fd8 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006f3c:	f7fc fe86 	bl	8003c4c <HAL_GetTick>
 8006f40:	0002      	movs	r2, r0
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	683a      	ldr	r2, [r7, #0]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d902      	bls.n	8006f52 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d142      	bne.n	8006fd8 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	685a      	ldr	r2, [r3, #4]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	21e0      	movs	r1, #224	; 0xe0
 8006f5e:	438a      	bics	r2, r1
 8006f60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	685a      	ldr	r2, [r3, #4]
 8006f66:	2382      	movs	r3, #130	; 0x82
 8006f68:	005b      	lsls	r3, r3, #1
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d113      	bne.n	8006f96 <SPI_WaitFlagStateUntilTimeout+0x72>
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	689a      	ldr	r2, [r3, #8]
 8006f72:	2380      	movs	r3, #128	; 0x80
 8006f74:	021b      	lsls	r3, r3, #8
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d005      	beq.n	8006f86 <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	689a      	ldr	r2, [r3, #8]
 8006f7e:	2380      	movs	r3, #128	; 0x80
 8006f80:	00db      	lsls	r3, r3, #3
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d107      	bne.n	8006f96 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	2140      	movs	r1, #64	; 0x40
 8006f92:	438a      	bics	r2, r1
 8006f94:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f9a:	2380      	movs	r3, #128	; 0x80
 8006f9c:	019b      	lsls	r3, r3, #6
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d110      	bne.n	8006fc4 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4914      	ldr	r1, [pc, #80]	; (8007000 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8006fae:	400a      	ands	r2, r1
 8006fb0:	601a      	str	r2, [r3, #0]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2180      	movs	r1, #128	; 0x80
 8006fbe:	0189      	lsls	r1, r1, #6
 8006fc0:	430a      	orrs	r2, r1
 8006fc2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2251      	movs	r2, #81	; 0x51
 8006fc8:	2101      	movs	r1, #1
 8006fca:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2250      	movs	r2, #80	; 0x50
 8006fd0:	2100      	movs	r1, #0
 8006fd2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006fd4:	2303      	movs	r3, #3
 8006fd6:	e00f      	b.n	8006ff8 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	68ba      	ldr	r2, [r7, #8]
 8006fe0:	4013      	ands	r3, r2
 8006fe2:	68ba      	ldr	r2, [r7, #8]
 8006fe4:	1ad3      	subs	r3, r2, r3
 8006fe6:	425a      	negs	r2, r3
 8006fe8:	4153      	adcs	r3, r2
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	001a      	movs	r2, r3
 8006fee:	1dfb      	adds	r3, r7, #7
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d19f      	bne.n	8006f36 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006ff6:	2300      	movs	r3, #0
}
 8006ff8:	0018      	movs	r0, r3
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	b004      	add	sp, #16
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	ffffdfff 	.word	0xffffdfff

08007004 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b086      	sub	sp, #24
 8007008:	af02      	add	r7, sp, #8
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	685a      	ldr	r2, [r3, #4]
 8007014:	2382      	movs	r3, #130	; 0x82
 8007016:	005b      	lsls	r3, r3, #1
 8007018:	429a      	cmp	r2, r3
 800701a:	d112      	bne.n	8007042 <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800701c:	68ba      	ldr	r2, [r7, #8]
 800701e:	68f8      	ldr	r0, [r7, #12]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	9300      	str	r3, [sp, #0]
 8007024:	0013      	movs	r3, r2
 8007026:	2200      	movs	r2, #0
 8007028:	2180      	movs	r1, #128	; 0x80
 800702a:	f7ff ff7b 	bl	8006f24 <SPI_WaitFlagStateUntilTimeout>
 800702e:	1e03      	subs	r3, r0, #0
 8007030:	d020      	beq.n	8007074 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007036:	2220      	movs	r2, #32
 8007038:	431a      	orrs	r2, r3
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800703e:	2303      	movs	r3, #3
 8007040:	e019      	b.n	8007076 <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2251      	movs	r2, #81	; 0x51
 8007046:	5c9b      	ldrb	r3, [r3, r2]
 8007048:	b2db      	uxtb	r3, r3
 800704a:	2b05      	cmp	r3, #5
 800704c:	d112      	bne.n	8007074 <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800704e:	68ba      	ldr	r2, [r7, #8]
 8007050:	68f8      	ldr	r0, [r7, #12]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	9300      	str	r3, [sp, #0]
 8007056:	0013      	movs	r3, r2
 8007058:	2200      	movs	r2, #0
 800705a:	2101      	movs	r1, #1
 800705c:	f7ff ff62 	bl	8006f24 <SPI_WaitFlagStateUntilTimeout>
 8007060:	1e03      	subs	r3, r0, #0
 8007062:	d007      	beq.n	8007074 <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007068:	2220      	movs	r2, #32
 800706a:	431a      	orrs	r2, r3
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007070:	2303      	movs	r3, #3
 8007072:	e000      	b.n	8007076 <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	0018      	movs	r0, r3
 8007078:	46bd      	mov	sp, r7
 800707a:	b004      	add	sp, #16
 800707c:	bd80      	pop	{r7, pc}
	...

08007080 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b086      	sub	sp, #24
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8007088:	4b2d      	ldr	r3, [pc, #180]	; (8007140 <SPI_CloseTx_ISR+0xc0>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	492d      	ldr	r1, [pc, #180]	; (8007144 <SPI_CloseTx_ISR+0xc4>)
 800708e:	0018      	movs	r0, r3
 8007090:	f7f9 f842 	bl	8000118 <__udivsi3>
 8007094:	0003      	movs	r3, r0
 8007096:	001a      	movs	r2, r3
 8007098:	2364      	movs	r3, #100	; 0x64
 800709a:	4353      	muls	r3, r2
 800709c:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800709e:	f7fc fdd5 	bl	8003c4c <HAL_GetTick>
 80070a2:	0003      	movs	r3, r0
 80070a4:	617b      	str	r3, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d106      	bne.n	80070ba <SPI_CloseTx_ISR+0x3a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070b0:	2220      	movs	r2, #32
 80070b2:	431a      	orrs	r2, r3
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80070b8:	e008      	b.n	80070cc <SPI_CloseTx_ISR+0x4c>
    }
    count--;
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	3b01      	subs	r3, #1
 80070be:	613b      	str	r3, [r7, #16]
  }
  while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	2202      	movs	r2, #2
 80070c8:	4013      	ands	r3, r2
 80070ca:	d0ec      	beq.n	80070a6 <SPI_CloseTx_ISR+0x26>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	685a      	ldr	r2, [r3, #4]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	21a0      	movs	r1, #160	; 0xa0
 80070d8:	438a      	bics	r2, r1
 80070da:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80070dc:	697a      	ldr	r2, [r7, #20]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2164      	movs	r1, #100	; 0x64
 80070e2:	0018      	movs	r0, r3
 80070e4:	f7ff ff8e 	bl	8007004 <SPI_EndRxTxTransaction>
 80070e8:	1e03      	subs	r3, r0, #0
 80070ea:	d005      	beq.n	80070f8 <SPI_CloseTx_ISR+0x78>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070f0:	2220      	movs	r2, #32
 80070f2:	431a      	orrs	r2, r3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d10a      	bne.n	8007116 <SPI_CloseTx_ISR+0x96>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007100:	2300      	movs	r3, #0
 8007102:	60fb      	str	r3, [r7, #12]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	60fb      	str	r3, [r7, #12]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	60fb      	str	r3, [r7, #12]
 8007114:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2251      	movs	r2, #81	; 0x51
 800711a:	2101      	movs	r1, #1
 800711c:	5499      	strb	r1, [r3, r2]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007122:	2b00      	cmp	r3, #0
 8007124:	d004      	beq.n	8007130 <SPI_CloseTx_ISR+0xb0>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	0018      	movs	r0, r3
 800712a:	f7ff fe8b 	bl	8006e44 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800712e:	e003      	b.n	8007138 <SPI_CloseTx_ISR+0xb8>
    HAL_SPI_TxCpltCallback(hspi);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	0018      	movs	r0, r3
 8007134:	f7f9 f9d4 	bl	80004e0 <HAL_SPI_TxCpltCallback>
}
 8007138:	46c0      	nop			; (mov r8, r8)
 800713a:	46bd      	mov	sp, r7
 800713c:	b006      	add	sp, #24
 800713e:	bd80      	pop	{r7, pc}
 8007140:	20000054 	.word	0x20000054
 8007144:	00005dc0 	.word	0x00005dc0

08007148 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d101      	bne.n	800715a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	e01e      	b.n	8007198 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2239      	movs	r2, #57	; 0x39
 800715e:	5c9b      	ldrb	r3, [r3, r2]
 8007160:	b2db      	uxtb	r3, r3
 8007162:	2b00      	cmp	r3, #0
 8007164:	d107      	bne.n	8007176 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2238      	movs	r2, #56	; 0x38
 800716a:	2100      	movs	r1, #0
 800716c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	0018      	movs	r0, r3
 8007172:	f7fc fb31 	bl	80037d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2239      	movs	r2, #57	; 0x39
 800717a:	2102      	movs	r1, #2
 800717c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	3304      	adds	r3, #4
 8007186:	0019      	movs	r1, r3
 8007188:	0010      	movs	r0, r2
 800718a:	f000 fa95 	bl	80076b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2239      	movs	r2, #57	; 0x39
 8007192:	2101      	movs	r1, #1
 8007194:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	0018      	movs	r0, r3
 800719a:	46bd      	mov	sp, r7
 800719c:	b002      	add	sp, #8
 800719e:	bd80      	pop	{r7, pc}

080071a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68da      	ldr	r2, [r3, #12]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	2101      	movs	r1, #1
 80071b4:	430a      	orrs	r2, r1
 80071b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	2207      	movs	r2, #7
 80071c0:	4013      	ands	r3, r2
 80071c2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2b06      	cmp	r3, #6
 80071c8:	d007      	beq.n	80071da <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	2101      	movs	r1, #1
 80071d6:	430a      	orrs	r2, r1
 80071d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80071da:	2300      	movs	r3, #0
}
 80071dc:	0018      	movs	r0, r3
 80071de:	46bd      	mov	sp, r7
 80071e0:	b004      	add	sp, #16
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68da      	ldr	r2, [r3, #12]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	2101      	movs	r1, #1
 80071f8:	438a      	bics	r2, r1
 80071fa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	6a1b      	ldr	r3, [r3, #32]
 8007202:	4a08      	ldr	r2, [pc, #32]	; (8007224 <HAL_TIM_Base_Stop_IT+0x40>)
 8007204:	4013      	ands	r3, r2
 8007206:	d107      	bne.n	8007218 <HAL_TIM_Base_Stop_IT+0x34>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2101      	movs	r1, #1
 8007214:	438a      	bics	r2, r1
 8007216:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007218:	2300      	movs	r3, #0
}
 800721a:	0018      	movs	r0, r3
 800721c:	46bd      	mov	sp, r7
 800721e:	b002      	add	sp, #8
 8007220:	bd80      	pop	{r7, pc}
 8007222:	46c0      	nop			; (mov r8, r8)
 8007224:	00001111 	.word	0x00001111

08007228 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d101      	bne.n	800723a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	e01e      	b.n	8007278 <HAL_TIM_OC_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2239      	movs	r2, #57	; 0x39
 800723e:	5c9b      	ldrb	r3, [r3, r2]
 8007240:	b2db      	uxtb	r3, r3
 8007242:	2b00      	cmp	r3, #0
 8007244:	d107      	bne.n	8007256 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2238      	movs	r2, #56	; 0x38
 800724a:	2100      	movs	r1, #0
 800724c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	0018      	movs	r0, r3
 8007252:	f000 f815 	bl	8007280 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2239      	movs	r2, #57	; 0x39
 800725a:	2102      	movs	r1, #2
 800725c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	3304      	adds	r3, #4
 8007266:	0019      	movs	r1, r3
 8007268:	0010      	movs	r0, r2
 800726a:	f000 fa25 	bl	80076b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2239      	movs	r2, #57	; 0x39
 8007272:	2101      	movs	r1, #1
 8007274:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007276:	2300      	movs	r3, #0
}
 8007278:	0018      	movs	r0, r3
 800727a:	46bd      	mov	sp, r7
 800727c:	b002      	add	sp, #8
 800727e:	bd80      	pop	{r7, pc}

08007280 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007288:	46c0      	nop			; (mov r8, r8)
 800728a:	46bd      	mov	sp, r7
 800728c:	b002      	add	sp, #8
 800728e:	bd80      	pop	{r7, pc}

08007290 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	2202      	movs	r2, #2
 80072a0:	4013      	ands	r3, r2
 80072a2:	2b02      	cmp	r3, #2
 80072a4:	d124      	bne.n	80072f0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	2202      	movs	r2, #2
 80072ae:	4013      	ands	r3, r2
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	d11d      	bne.n	80072f0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	2203      	movs	r2, #3
 80072ba:	4252      	negs	r2, r2
 80072bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2201      	movs	r2, #1
 80072c2:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	699b      	ldr	r3, [r3, #24]
 80072ca:	2203      	movs	r2, #3
 80072cc:	4013      	ands	r3, r2
 80072ce:	d004      	beq.n	80072da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	0018      	movs	r0, r3
 80072d4:	f000 f9d8 	bl	8007688 <HAL_TIM_IC_CaptureCallback>
 80072d8:	e007      	b.n	80072ea <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	0018      	movs	r0, r3
 80072de:	f000 f9cb 	bl	8007678 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	0018      	movs	r0, r3
 80072e6:	f000 f9d7 	bl	8007698 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	691b      	ldr	r3, [r3, #16]
 80072f6:	2204      	movs	r2, #4
 80072f8:	4013      	ands	r3, r2
 80072fa:	2b04      	cmp	r3, #4
 80072fc:	d125      	bne.n	800734a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	2204      	movs	r2, #4
 8007306:	4013      	ands	r3, r2
 8007308:	2b04      	cmp	r3, #4
 800730a:	d11e      	bne.n	800734a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	2205      	movs	r2, #5
 8007312:	4252      	negs	r2, r2
 8007314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2202      	movs	r2, #2
 800731a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	699a      	ldr	r2, [r3, #24]
 8007322:	23c0      	movs	r3, #192	; 0xc0
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	4013      	ands	r3, r2
 8007328:	d004      	beq.n	8007334 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	0018      	movs	r0, r3
 800732e:	f000 f9ab 	bl	8007688 <HAL_TIM_IC_CaptureCallback>
 8007332:	e007      	b.n	8007344 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	0018      	movs	r0, r3
 8007338:	f000 f99e 	bl	8007678 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	0018      	movs	r0, r3
 8007340:	f000 f9aa 	bl	8007698 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	2208      	movs	r2, #8
 8007352:	4013      	ands	r3, r2
 8007354:	2b08      	cmp	r3, #8
 8007356:	d124      	bne.n	80073a2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	2208      	movs	r2, #8
 8007360:	4013      	ands	r3, r2
 8007362:	2b08      	cmp	r3, #8
 8007364:	d11d      	bne.n	80073a2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2209      	movs	r2, #9
 800736c:	4252      	negs	r2, r2
 800736e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2204      	movs	r2, #4
 8007374:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	69db      	ldr	r3, [r3, #28]
 800737c:	2203      	movs	r2, #3
 800737e:	4013      	ands	r3, r2
 8007380:	d004      	beq.n	800738c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	0018      	movs	r0, r3
 8007386:	f000 f97f 	bl	8007688 <HAL_TIM_IC_CaptureCallback>
 800738a:	e007      	b.n	800739c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	0018      	movs	r0, r3
 8007390:	f000 f972 	bl	8007678 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	0018      	movs	r0, r3
 8007398:	f000 f97e 	bl	8007698 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	2210      	movs	r2, #16
 80073aa:	4013      	ands	r3, r2
 80073ac:	2b10      	cmp	r3, #16
 80073ae:	d125      	bne.n	80073fc <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	2210      	movs	r2, #16
 80073b8:	4013      	ands	r3, r2
 80073ba:	2b10      	cmp	r3, #16
 80073bc:	d11e      	bne.n	80073fc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	2211      	movs	r2, #17
 80073c4:	4252      	negs	r2, r2
 80073c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2208      	movs	r2, #8
 80073cc:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	69da      	ldr	r2, [r3, #28]
 80073d4:	23c0      	movs	r3, #192	; 0xc0
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	4013      	ands	r3, r2
 80073da:	d004      	beq.n	80073e6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	0018      	movs	r0, r3
 80073e0:	f000 f952 	bl	8007688 <HAL_TIM_IC_CaptureCallback>
 80073e4:	e007      	b.n	80073f6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	0018      	movs	r0, r3
 80073ea:	f000 f945 	bl	8007678 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	0018      	movs	r0, r3
 80073f2:	f000 f951 	bl	8007698 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	691b      	ldr	r3, [r3, #16]
 8007402:	2201      	movs	r2, #1
 8007404:	4013      	ands	r3, r2
 8007406:	2b01      	cmp	r3, #1
 8007408:	d10f      	bne.n	800742a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	2201      	movs	r2, #1
 8007412:	4013      	ands	r3, r2
 8007414:	2b01      	cmp	r3, #1
 8007416:	d108      	bne.n	800742a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2202      	movs	r2, #2
 800741e:	4252      	negs	r2, r2
 8007420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	0018      	movs	r0, r3
 8007426:	f7fc fb5b 	bl	8003ae0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	691b      	ldr	r3, [r3, #16]
 8007430:	2240      	movs	r2, #64	; 0x40
 8007432:	4013      	ands	r3, r2
 8007434:	2b40      	cmp	r3, #64	; 0x40
 8007436:	d10f      	bne.n	8007458 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	2240      	movs	r2, #64	; 0x40
 8007440:	4013      	ands	r3, r2
 8007442:	2b40      	cmp	r3, #64	; 0x40
 8007444:	d108      	bne.n	8007458 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2241      	movs	r2, #65	; 0x41
 800744c:	4252      	negs	r2, r2
 800744e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	0018      	movs	r0, r3
 8007454:	f000 f928 	bl	80076a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007458:	46c0      	nop			; (mov r8, r8)
 800745a:	46bd      	mov	sp, r7
 800745c:	b002      	add	sp, #8
 800745e:	bd80      	pop	{r7, pc}

08007460 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2238      	movs	r2, #56	; 0x38
 8007470:	5c9b      	ldrb	r3, [r3, r2]
 8007472:	2b01      	cmp	r3, #1
 8007474:	d101      	bne.n	800747a <HAL_TIM_OC_ConfigChannel+0x1a>
 8007476:	2302      	movs	r3, #2
 8007478:	e03c      	b.n	80074f4 <HAL_TIM_OC_ConfigChannel+0x94>
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2238      	movs	r2, #56	; 0x38
 800747e:	2101      	movs	r1, #1
 8007480:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2239      	movs	r2, #57	; 0x39
 8007486:	2102      	movs	r1, #2
 8007488:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2b04      	cmp	r3, #4
 800748e:	d010      	beq.n	80074b2 <HAL_TIM_OC_ConfigChannel+0x52>
 8007490:	d802      	bhi.n	8007498 <HAL_TIM_OC_ConfigChannel+0x38>
 8007492:	2b00      	cmp	r3, #0
 8007494:	d005      	beq.n	80074a2 <HAL_TIM_OC_ConfigChannel+0x42>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      break;
    }

    default:
      break;
 8007496:	e024      	b.n	80074e2 <HAL_TIM_OC_ConfigChannel+0x82>
  switch (Channel)
 8007498:	2b08      	cmp	r3, #8
 800749a:	d012      	beq.n	80074c2 <HAL_TIM_OC_ConfigChannel+0x62>
 800749c:	2b0c      	cmp	r3, #12
 800749e:	d018      	beq.n	80074d2 <HAL_TIM_OC_ConfigChannel+0x72>
      break;
 80074a0:	e01f      	b.n	80074e2 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68ba      	ldr	r2, [r7, #8]
 80074a8:	0011      	movs	r1, r2
 80074aa:	0018      	movs	r0, r3
 80074ac:	f000 f962 	bl	8007774 <TIM_OC1_SetConfig>
      break;
 80074b0:	e017      	b.n	80074e2 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68ba      	ldr	r2, [r7, #8]
 80074b8:	0011      	movs	r1, r2
 80074ba:	0018      	movs	r0, r3
 80074bc:	f000 f996 	bl	80077ec <TIM_OC2_SetConfig>
      break;
 80074c0:	e00f      	b.n	80074e2 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	68ba      	ldr	r2, [r7, #8]
 80074c8:	0011      	movs	r1, r2
 80074ca:	0018      	movs	r0, r3
 80074cc:	f000 f9d0 	bl	8007870 <TIM_OC3_SetConfig>
      break;
 80074d0:	e007      	b.n	80074e2 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	68ba      	ldr	r2, [r7, #8]
 80074d8:	0011      	movs	r1, r2
 80074da:	0018      	movs	r0, r3
 80074dc:	f000 fa08 	bl	80078f0 <TIM_OC4_SetConfig>
      break;
 80074e0:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2239      	movs	r2, #57	; 0x39
 80074e6:	2101      	movs	r1, #1
 80074e8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2238      	movs	r2, #56	; 0x38
 80074ee:	2100      	movs	r1, #0
 80074f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80074f2:	2300      	movs	r3, #0
}
 80074f4:	0018      	movs	r0, r3
 80074f6:	46bd      	mov	sp, r7
 80074f8:	b004      	add	sp, #16
 80074fa:	bd80      	pop	{r7, pc}

080074fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2238      	movs	r2, #56	; 0x38
 800750a:	5c9b      	ldrb	r3, [r3, r2]
 800750c:	2b01      	cmp	r3, #1
 800750e:	d101      	bne.n	8007514 <HAL_TIM_ConfigClockSource+0x18>
 8007510:	2302      	movs	r3, #2
 8007512:	e0ab      	b.n	800766c <HAL_TIM_ConfigClockSource+0x170>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2238      	movs	r2, #56	; 0x38
 8007518:	2101      	movs	r1, #1
 800751a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2239      	movs	r2, #57	; 0x39
 8007520:	2102      	movs	r1, #2
 8007522:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2277      	movs	r2, #119	; 0x77
 8007530:	4393      	bics	r3, r2
 8007532:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	4a4f      	ldr	r2, [pc, #316]	; (8007674 <HAL_TIM_ConfigClockSource+0x178>)
 8007538:	4013      	ands	r3, r2
 800753a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	68fa      	ldr	r2, [r7, #12]
 8007542:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	2b40      	cmp	r3, #64	; 0x40
 800754a:	d100      	bne.n	800754e <HAL_TIM_ConfigClockSource+0x52>
 800754c:	e06b      	b.n	8007626 <HAL_TIM_ConfigClockSource+0x12a>
 800754e:	d80e      	bhi.n	800756e <HAL_TIM_ConfigClockSource+0x72>
 8007550:	2b10      	cmp	r3, #16
 8007552:	d100      	bne.n	8007556 <HAL_TIM_ConfigClockSource+0x5a>
 8007554:	e077      	b.n	8007646 <HAL_TIM_ConfigClockSource+0x14a>
 8007556:	d803      	bhi.n	8007560 <HAL_TIM_ConfigClockSource+0x64>
 8007558:	2b00      	cmp	r3, #0
 800755a:	d100      	bne.n	800755e <HAL_TIM_ConfigClockSource+0x62>
 800755c:	e073      	b.n	8007646 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800755e:	e07c      	b.n	800765a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8007560:	2b20      	cmp	r3, #32
 8007562:	d100      	bne.n	8007566 <HAL_TIM_ConfigClockSource+0x6a>
 8007564:	e06f      	b.n	8007646 <HAL_TIM_ConfigClockSource+0x14a>
 8007566:	2b30      	cmp	r3, #48	; 0x30
 8007568:	d100      	bne.n	800756c <HAL_TIM_ConfigClockSource+0x70>
 800756a:	e06c      	b.n	8007646 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 800756c:	e075      	b.n	800765a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800756e:	2b70      	cmp	r3, #112	; 0x70
 8007570:	d00e      	beq.n	8007590 <HAL_TIM_ConfigClockSource+0x94>
 8007572:	d804      	bhi.n	800757e <HAL_TIM_ConfigClockSource+0x82>
 8007574:	2b50      	cmp	r3, #80	; 0x50
 8007576:	d036      	beq.n	80075e6 <HAL_TIM_ConfigClockSource+0xea>
 8007578:	2b60      	cmp	r3, #96	; 0x60
 800757a:	d044      	beq.n	8007606 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 800757c:	e06d      	b.n	800765a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800757e:	2280      	movs	r2, #128	; 0x80
 8007580:	0152      	lsls	r2, r2, #5
 8007582:	4293      	cmp	r3, r2
 8007584:	d068      	beq.n	8007658 <HAL_TIM_ConfigClockSource+0x15c>
 8007586:	2280      	movs	r2, #128	; 0x80
 8007588:	0192      	lsls	r2, r2, #6
 800758a:	4293      	cmp	r3, r2
 800758c:	d017      	beq.n	80075be <HAL_TIM_ConfigClockSource+0xc2>
      break;
 800758e:	e064      	b.n	800765a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6818      	ldr	r0, [r3, #0]
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	6899      	ldr	r1, [r3, #8]
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	685a      	ldr	r2, [r3, #4]
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	f000 fa66 	bl	8007a70 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2277      	movs	r2, #119	; 0x77
 80075b0:	4313      	orrs	r3, r2
 80075b2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	68fa      	ldr	r2, [r7, #12]
 80075ba:	609a      	str	r2, [r3, #8]
      break;
 80075bc:	e04d      	b.n	800765a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6818      	ldr	r0, [r3, #0]
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	6899      	ldr	r1, [r3, #8]
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	685a      	ldr	r2, [r3, #4]
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	f000 fa4f 	bl	8007a70 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	689a      	ldr	r2, [r3, #8]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	2180      	movs	r1, #128	; 0x80
 80075de:	01c9      	lsls	r1, r1, #7
 80075e0:	430a      	orrs	r2, r1
 80075e2:	609a      	str	r2, [r3, #8]
      break;
 80075e4:	e039      	b.n	800765a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6818      	ldr	r0, [r3, #0]
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	6859      	ldr	r1, [r3, #4]
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	001a      	movs	r2, r3
 80075f4:	f000 f9c2 	bl	800797c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2150      	movs	r1, #80	; 0x50
 80075fe:	0018      	movs	r0, r3
 8007600:	f000 fa1c 	bl	8007a3c <TIM_ITRx_SetConfig>
      break;
 8007604:	e029      	b.n	800765a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6818      	ldr	r0, [r3, #0]
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	6859      	ldr	r1, [r3, #4]
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	001a      	movs	r2, r3
 8007614:	f000 f9e0 	bl	80079d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	2160      	movs	r1, #96	; 0x60
 800761e:	0018      	movs	r0, r3
 8007620:	f000 fa0c 	bl	8007a3c <TIM_ITRx_SetConfig>
      break;
 8007624:	e019      	b.n	800765a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6818      	ldr	r0, [r3, #0]
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	6859      	ldr	r1, [r3, #4]
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	68db      	ldr	r3, [r3, #12]
 8007632:	001a      	movs	r2, r3
 8007634:	f000 f9a2 	bl	800797c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2140      	movs	r1, #64	; 0x40
 800763e:	0018      	movs	r0, r3
 8007640:	f000 f9fc 	bl	8007a3c <TIM_ITRx_SetConfig>
      break;
 8007644:	e009      	b.n	800765a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	0019      	movs	r1, r3
 8007650:	0010      	movs	r0, r2
 8007652:	f000 f9f3 	bl	8007a3c <TIM_ITRx_SetConfig>
      break;
 8007656:	e000      	b.n	800765a <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8007658:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2239      	movs	r2, #57	; 0x39
 800765e:	2101      	movs	r1, #1
 8007660:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2238      	movs	r2, #56	; 0x38
 8007666:	2100      	movs	r1, #0
 8007668:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800766a:	2300      	movs	r3, #0
}
 800766c:	0018      	movs	r0, r3
 800766e:	46bd      	mov	sp, r7
 8007670:	b004      	add	sp, #16
 8007672:	bd80      	pop	{r7, pc}
 8007674:	ffff00ff 	.word	0xffff00ff

08007678 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007680:	46c0      	nop			; (mov r8, r8)
 8007682:	46bd      	mov	sp, r7
 8007684:	b002      	add	sp, #8
 8007686:	bd80      	pop	{r7, pc}

08007688 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b082      	sub	sp, #8
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007690:	46c0      	nop			; (mov r8, r8)
 8007692:	46bd      	mov	sp, r7
 8007694:	b002      	add	sp, #8
 8007696:	bd80      	pop	{r7, pc}

08007698 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b082      	sub	sp, #8
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80076a0:	46c0      	nop			; (mov r8, r8)
 80076a2:	46bd      	mov	sp, r7
 80076a4:	b002      	add	sp, #8
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80076b0:	46c0      	nop			; (mov r8, r8)
 80076b2:	46bd      	mov	sp, r7
 80076b4:	b002      	add	sp, #8
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	2380      	movs	r3, #128	; 0x80
 80076cc:	05db      	lsls	r3, r3, #23
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d00b      	beq.n	80076ea <TIM_Base_SetConfig+0x32>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	4a23      	ldr	r2, [pc, #140]	; (8007764 <TIM_Base_SetConfig+0xac>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d007      	beq.n	80076ea <TIM_Base_SetConfig+0x32>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4a22      	ldr	r2, [pc, #136]	; (8007768 <TIM_Base_SetConfig+0xb0>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d003      	beq.n	80076ea <TIM_Base_SetConfig+0x32>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	4a21      	ldr	r2, [pc, #132]	; (800776c <TIM_Base_SetConfig+0xb4>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d108      	bne.n	80076fc <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2270      	movs	r2, #112	; 0x70
 80076ee:	4393      	bics	r3, r2
 80076f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	68fa      	ldr	r2, [r7, #12]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	2380      	movs	r3, #128	; 0x80
 8007700:	05db      	lsls	r3, r3, #23
 8007702:	429a      	cmp	r2, r3
 8007704:	d00b      	beq.n	800771e <TIM_Base_SetConfig+0x66>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4a16      	ldr	r2, [pc, #88]	; (8007764 <TIM_Base_SetConfig+0xac>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d007      	beq.n	800771e <TIM_Base_SetConfig+0x66>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	4a15      	ldr	r2, [pc, #84]	; (8007768 <TIM_Base_SetConfig+0xb0>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d003      	beq.n	800771e <TIM_Base_SetConfig+0x66>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	4a14      	ldr	r2, [pc, #80]	; (800776c <TIM_Base_SetConfig+0xb4>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d108      	bne.n	8007730 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	4a13      	ldr	r2, [pc, #76]	; (8007770 <TIM_Base_SetConfig+0xb8>)
 8007722:	4013      	ands	r3, r2
 8007724:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	68db      	ldr	r3, [r3, #12]
 800772a:	68fa      	ldr	r2, [r7, #12]
 800772c:	4313      	orrs	r3, r2
 800772e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2280      	movs	r2, #128	; 0x80
 8007734:	4393      	bics	r3, r2
 8007736:	001a      	movs	r2, r3
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	691b      	ldr	r3, [r3, #16]
 800773c:	4313      	orrs	r3, r2
 800773e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	68fa      	ldr	r2, [r7, #12]
 8007744:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	689a      	ldr	r2, [r3, #8]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2201      	movs	r2, #1
 800775a:	615a      	str	r2, [r3, #20]
}
 800775c:	46c0      	nop			; (mov r8, r8)
 800775e:	46bd      	mov	sp, r7
 8007760:	b004      	add	sp, #16
 8007762:	bd80      	pop	{r7, pc}
 8007764:	40000400 	.word	0x40000400
 8007768:	40010800 	.word	0x40010800
 800776c:	40011400 	.word	0x40011400
 8007770:	fffffcff 	.word	0xfffffcff

08007774 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b086      	sub	sp, #24
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a1b      	ldr	r3, [r3, #32]
 8007782:	2201      	movs	r2, #1
 8007784:	4393      	bics	r3, r2
 8007786:	001a      	movs	r2, r3
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6a1b      	ldr	r3, [r3, #32]
 8007790:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	699b      	ldr	r3, [r3, #24]
 800779c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2270      	movs	r2, #112	; 0x70
 80077a2:	4393      	bics	r3, r2
 80077a4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2203      	movs	r2, #3
 80077aa:	4393      	bics	r3, r2
 80077ac:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	68fa      	ldr	r2, [r7, #12]
 80077b4:	4313      	orrs	r3, r2
 80077b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	2202      	movs	r2, #2
 80077bc:	4393      	bics	r3, r2
 80077be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	697a      	ldr	r2, [r7, #20]
 80077c6:	4313      	orrs	r3, r2
 80077c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	693a      	ldr	r2, [r7, #16]
 80077ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	68fa      	ldr	r2, [r7, #12]
 80077d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	685a      	ldr	r2, [r3, #4]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	697a      	ldr	r2, [r7, #20]
 80077e2:	621a      	str	r2, [r3, #32]
}
 80077e4:	46c0      	nop			; (mov r8, r8)
 80077e6:	46bd      	mov	sp, r7
 80077e8:	b006      	add	sp, #24
 80077ea:	bd80      	pop	{r7, pc}

080077ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b086      	sub	sp, #24
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6a1b      	ldr	r3, [r3, #32]
 80077fa:	2210      	movs	r2, #16
 80077fc:	4393      	bics	r3, r2
 80077fe:	001a      	movs	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6a1b      	ldr	r3, [r3, #32]
 8007808:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	699b      	ldr	r3, [r3, #24]
 8007814:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	4a13      	ldr	r2, [pc, #76]	; (8007868 <TIM_OC2_SetConfig+0x7c>)
 800781a:	4013      	ands	r3, r2
 800781c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	4a12      	ldr	r2, [pc, #72]	; (800786c <TIM_OC2_SetConfig+0x80>)
 8007822:	4013      	ands	r3, r2
 8007824:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	021b      	lsls	r3, r3, #8
 800782c:	68fa      	ldr	r2, [r7, #12]
 800782e:	4313      	orrs	r3, r2
 8007830:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	2220      	movs	r2, #32
 8007836:	4393      	bics	r3, r2
 8007838:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	011b      	lsls	r3, r3, #4
 8007840:	697a      	ldr	r2, [r7, #20]
 8007842:	4313      	orrs	r3, r2
 8007844:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	693a      	ldr	r2, [r7, #16]
 800784a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	68fa      	ldr	r2, [r7, #12]
 8007850:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	685a      	ldr	r2, [r3, #4]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	697a      	ldr	r2, [r7, #20]
 800785e:	621a      	str	r2, [r3, #32]
}
 8007860:	46c0      	nop			; (mov r8, r8)
 8007862:	46bd      	mov	sp, r7
 8007864:	b006      	add	sp, #24
 8007866:	bd80      	pop	{r7, pc}
 8007868:	ffff8fff 	.word	0xffff8fff
 800786c:	fffffcff 	.word	0xfffffcff

08007870 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b086      	sub	sp, #24
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6a1b      	ldr	r3, [r3, #32]
 800787e:	4a1a      	ldr	r2, [pc, #104]	; (80078e8 <TIM_OC3_SetConfig+0x78>)
 8007880:	401a      	ands	r2, r3
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6a1b      	ldr	r3, [r3, #32]
 800788a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	69db      	ldr	r3, [r3, #28]
 8007896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2270      	movs	r2, #112	; 0x70
 800789c:	4393      	bics	r3, r2
 800789e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2203      	movs	r2, #3
 80078a4:	4393      	bics	r3, r2
 80078a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	68fa      	ldr	r2, [r7, #12]
 80078ae:	4313      	orrs	r3, r2
 80078b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	4a0d      	ldr	r2, [pc, #52]	; (80078ec <TIM_OC3_SetConfig+0x7c>)
 80078b6:	4013      	ands	r3, r2
 80078b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	021b      	lsls	r3, r3, #8
 80078c0:	697a      	ldr	r2, [r7, #20]
 80078c2:	4313      	orrs	r3, r2
 80078c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	693a      	ldr	r2, [r7, #16]
 80078ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	68fa      	ldr	r2, [r7, #12]
 80078d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	685a      	ldr	r2, [r3, #4]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	697a      	ldr	r2, [r7, #20]
 80078de:	621a      	str	r2, [r3, #32]
}
 80078e0:	46c0      	nop			; (mov r8, r8)
 80078e2:	46bd      	mov	sp, r7
 80078e4:	b006      	add	sp, #24
 80078e6:	bd80      	pop	{r7, pc}
 80078e8:	fffffeff 	.word	0xfffffeff
 80078ec:	fffffdff 	.word	0xfffffdff

080078f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b086      	sub	sp, #24
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6a1b      	ldr	r3, [r3, #32]
 80078fe:	4a1b      	ldr	r2, [pc, #108]	; (800796c <TIM_OC4_SetConfig+0x7c>)
 8007900:	401a      	ands	r2, r3
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6a1b      	ldr	r3, [r3, #32]
 800790a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	69db      	ldr	r3, [r3, #28]
 8007916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	4a15      	ldr	r2, [pc, #84]	; (8007970 <TIM_OC4_SetConfig+0x80>)
 800791c:	4013      	ands	r3, r2
 800791e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	4a14      	ldr	r2, [pc, #80]	; (8007974 <TIM_OC4_SetConfig+0x84>)
 8007924:	4013      	ands	r3, r2
 8007926:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	021b      	lsls	r3, r3, #8
 800792e:	68fa      	ldr	r2, [r7, #12]
 8007930:	4313      	orrs	r3, r2
 8007932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	4a10      	ldr	r2, [pc, #64]	; (8007978 <TIM_OC4_SetConfig+0x88>)
 8007938:	4013      	ands	r3, r2
 800793a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	031b      	lsls	r3, r3, #12
 8007942:	697a      	ldr	r2, [r7, #20]
 8007944:	4313      	orrs	r3, r2
 8007946:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	693a      	ldr	r2, [r7, #16]
 800794c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	68fa      	ldr	r2, [r7, #12]
 8007952:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	685a      	ldr	r2, [r3, #4]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	697a      	ldr	r2, [r7, #20]
 8007960:	621a      	str	r2, [r3, #32]
}
 8007962:	46c0      	nop			; (mov r8, r8)
 8007964:	46bd      	mov	sp, r7
 8007966:	b006      	add	sp, #24
 8007968:	bd80      	pop	{r7, pc}
 800796a:	46c0      	nop			; (mov r8, r8)
 800796c:	ffffefff 	.word	0xffffefff
 8007970:	ffff8fff 	.word	0xffff8fff
 8007974:	fffffcff 	.word	0xfffffcff
 8007978:	ffffdfff 	.word	0xffffdfff

0800797c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b086      	sub	sp, #24
 8007980:	af00      	add	r7, sp, #0
 8007982:	60f8      	str	r0, [r7, #12]
 8007984:	60b9      	str	r1, [r7, #8]
 8007986:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	6a1b      	ldr	r3, [r3, #32]
 800798c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	6a1b      	ldr	r3, [r3, #32]
 8007992:	2201      	movs	r2, #1
 8007994:	4393      	bics	r3, r2
 8007996:	001a      	movs	r2, r3
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	699b      	ldr	r3, [r3, #24]
 80079a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	22f0      	movs	r2, #240	; 0xf0
 80079a6:	4393      	bics	r3, r2
 80079a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	011b      	lsls	r3, r3, #4
 80079ae:	693a      	ldr	r2, [r7, #16]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	220a      	movs	r2, #10
 80079b8:	4393      	bics	r3, r2
 80079ba:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80079bc:	697a      	ldr	r2, [r7, #20]
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	4313      	orrs	r3, r2
 80079c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	693a      	ldr	r2, [r7, #16]
 80079c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	697a      	ldr	r2, [r7, #20]
 80079ce:	621a      	str	r2, [r3, #32]
}
 80079d0:	46c0      	nop			; (mov r8, r8)
 80079d2:	46bd      	mov	sp, r7
 80079d4:	b006      	add	sp, #24
 80079d6:	bd80      	pop	{r7, pc}

080079d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b086      	sub	sp, #24
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	60b9      	str	r1, [r7, #8]
 80079e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6a1b      	ldr	r3, [r3, #32]
 80079e8:	2210      	movs	r2, #16
 80079ea:	4393      	bics	r3, r2
 80079ec:	001a      	movs	r2, r3
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	699b      	ldr	r3, [r3, #24]
 80079f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	6a1b      	ldr	r3, [r3, #32]
 80079fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	4a0d      	ldr	r2, [pc, #52]	; (8007a38 <TIM_TI2_ConfigInputStage+0x60>)
 8007a02:	4013      	ands	r3, r2
 8007a04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	031b      	lsls	r3, r3, #12
 8007a0a:	697a      	ldr	r2, [r7, #20]
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	22a0      	movs	r2, #160	; 0xa0
 8007a14:	4393      	bics	r3, r2
 8007a16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	011b      	lsls	r3, r3, #4
 8007a1c:	693a      	ldr	r2, [r7, #16]
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	697a      	ldr	r2, [r7, #20]
 8007a26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	693a      	ldr	r2, [r7, #16]
 8007a2c:	621a      	str	r2, [r3, #32]
}
 8007a2e:	46c0      	nop			; (mov r8, r8)
 8007a30:	46bd      	mov	sp, r7
 8007a32:	b006      	add	sp, #24
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	46c0      	nop			; (mov r8, r8)
 8007a38:	ffff0fff 	.word	0xffff0fff

08007a3c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2270      	movs	r2, #112	; 0x70
 8007a50:	4393      	bics	r3, r2
 8007a52:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a54:	683a      	ldr	r2, [r7, #0]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	2207      	movs	r2, #7
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	68fa      	ldr	r2, [r7, #12]
 8007a64:	609a      	str	r2, [r3, #8]
}
 8007a66:	46c0      	nop			; (mov r8, r8)
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	b004      	add	sp, #16
 8007a6c:	bd80      	pop	{r7, pc}
	...

08007a70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b086      	sub	sp, #24
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	607a      	str	r2, [r7, #4]
 8007a7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	4a09      	ldr	r2, [pc, #36]	; (8007aac <TIM_ETR_SetConfig+0x3c>)
 8007a88:	4013      	ands	r3, r2
 8007a8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	021a      	lsls	r2, r3, #8
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	431a      	orrs	r2, r3
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	4313      	orrs	r3, r2
 8007a98:	697a      	ldr	r2, [r7, #20]
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	697a      	ldr	r2, [r7, #20]
 8007aa2:	609a      	str	r2, [r3, #8]
}
 8007aa4:	46c0      	nop			; (mov r8, r8)
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	b006      	add	sp, #24
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	ffff00ff 	.word	0xffff00ff

08007ab0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2238      	movs	r2, #56	; 0x38
 8007abe:	5c9b      	ldrb	r3, [r3, r2]
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d101      	bne.n	8007ac8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ac4:	2302      	movs	r3, #2
 8007ac6:	e032      	b.n	8007b2e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2238      	movs	r2, #56	; 0x38
 8007acc:	2101      	movs	r1, #1
 8007ace:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2239      	movs	r2, #57	; 0x39
 8007ad4:	2102      	movs	r1, #2
 8007ad6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2270      	movs	r2, #112	; 0x70
 8007aec:	4393      	bics	r3, r2
 8007aee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68fa      	ldr	r2, [r7, #12]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	2280      	movs	r2, #128	; 0x80
 8007afe:	4393      	bics	r3, r2
 8007b00:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	68ba      	ldr	r2, [r7, #8]
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	68fa      	ldr	r2, [r7, #12]
 8007b12:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	68ba      	ldr	r2, [r7, #8]
 8007b1a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2239      	movs	r2, #57	; 0x39
 8007b20:	2101      	movs	r1, #1
 8007b22:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2238      	movs	r2, #56	; 0x38
 8007b28:	2100      	movs	r1, #0
 8007b2a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	0018      	movs	r0, r3
 8007b30:	46bd      	mov	sp, r7
 8007b32:	b004      	add	sp, #16
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b082      	sub	sp, #8
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
 8007b3e:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2238      	movs	r2, #56	; 0x38
 8007b44:	5c9b      	ldrb	r3, [r3, r2]
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d101      	bne.n	8007b4e <HAL_TIMEx_RemapConfig+0x18>
 8007b4a:	2302      	movs	r3, #2
 8007b4c:	e00c      	b.n	8007b68 <HAL_TIMEx_RemapConfig+0x32>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2238      	movs	r2, #56	; 0x38
 8007b52:	2101      	movs	r1, #1
 8007b54:	5499      	strb	r1, [r3, r2]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	683a      	ldr	r2, [r7, #0]
 8007b5c:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2238      	movs	r2, #56	; 0x38
 8007b62:	2100      	movs	r1, #0
 8007b64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007b66:	2300      	movs	r3, #0
}
 8007b68:	0018      	movs	r0, r3
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	b002      	add	sp, #8
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <__errno>:
 8007b70:	4b01      	ldr	r3, [pc, #4]	; (8007b78 <__errno+0x8>)
 8007b72:	6818      	ldr	r0, [r3, #0]
 8007b74:	4770      	bx	lr
 8007b76:	46c0      	nop			; (mov r8, r8)
 8007b78:	20000058 	.word	0x20000058

08007b7c <__libc_init_array>:
 8007b7c:	b570      	push	{r4, r5, r6, lr}
 8007b7e:	2600      	movs	r6, #0
 8007b80:	4d0c      	ldr	r5, [pc, #48]	; (8007bb4 <__libc_init_array+0x38>)
 8007b82:	4c0d      	ldr	r4, [pc, #52]	; (8007bb8 <__libc_init_array+0x3c>)
 8007b84:	1b64      	subs	r4, r4, r5
 8007b86:	10a4      	asrs	r4, r4, #2
 8007b88:	42a6      	cmp	r6, r4
 8007b8a:	d109      	bne.n	8007ba0 <__libc_init_array+0x24>
 8007b8c:	2600      	movs	r6, #0
 8007b8e:	f000 fc29 	bl	80083e4 <_init>
 8007b92:	4d0a      	ldr	r5, [pc, #40]	; (8007bbc <__libc_init_array+0x40>)
 8007b94:	4c0a      	ldr	r4, [pc, #40]	; (8007bc0 <__libc_init_array+0x44>)
 8007b96:	1b64      	subs	r4, r4, r5
 8007b98:	10a4      	asrs	r4, r4, #2
 8007b9a:	42a6      	cmp	r6, r4
 8007b9c:	d105      	bne.n	8007baa <__libc_init_array+0x2e>
 8007b9e:	bd70      	pop	{r4, r5, r6, pc}
 8007ba0:	00b3      	lsls	r3, r6, #2
 8007ba2:	58eb      	ldr	r3, [r5, r3]
 8007ba4:	4798      	blx	r3
 8007ba6:	3601      	adds	r6, #1
 8007ba8:	e7ee      	b.n	8007b88 <__libc_init_array+0xc>
 8007baa:	00b3      	lsls	r3, r6, #2
 8007bac:	58eb      	ldr	r3, [r5, r3]
 8007bae:	4798      	blx	r3
 8007bb0:	3601      	adds	r6, #1
 8007bb2:	e7f2      	b.n	8007b9a <__libc_init_array+0x1e>
 8007bb4:	08008bbc 	.word	0x08008bbc
 8007bb8:	08008bbc 	.word	0x08008bbc
 8007bbc:	08008bbc 	.word	0x08008bbc
 8007bc0:	08008bc0 	.word	0x08008bc0

08007bc4 <memcpy>:
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	b510      	push	{r4, lr}
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d100      	bne.n	8007bce <memcpy+0xa>
 8007bcc:	bd10      	pop	{r4, pc}
 8007bce:	5ccc      	ldrb	r4, [r1, r3]
 8007bd0:	54c4      	strb	r4, [r0, r3]
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	e7f8      	b.n	8007bc8 <memcpy+0x4>

08007bd6 <memset>:
 8007bd6:	0003      	movs	r3, r0
 8007bd8:	1812      	adds	r2, r2, r0
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d100      	bne.n	8007be0 <memset+0xa>
 8007bde:	4770      	bx	lr
 8007be0:	7019      	strb	r1, [r3, #0]
 8007be2:	3301      	adds	r3, #1
 8007be4:	e7f9      	b.n	8007bda <memset+0x4>
	...

08007be8 <siprintf>:
 8007be8:	b40e      	push	{r1, r2, r3}
 8007bea:	b500      	push	{lr}
 8007bec:	490b      	ldr	r1, [pc, #44]	; (8007c1c <siprintf+0x34>)
 8007bee:	b09c      	sub	sp, #112	; 0x70
 8007bf0:	ab1d      	add	r3, sp, #116	; 0x74
 8007bf2:	9002      	str	r0, [sp, #8]
 8007bf4:	9006      	str	r0, [sp, #24]
 8007bf6:	9107      	str	r1, [sp, #28]
 8007bf8:	9104      	str	r1, [sp, #16]
 8007bfa:	4809      	ldr	r0, [pc, #36]	; (8007c20 <siprintf+0x38>)
 8007bfc:	4909      	ldr	r1, [pc, #36]	; (8007c24 <siprintf+0x3c>)
 8007bfe:	cb04      	ldmia	r3!, {r2}
 8007c00:	9105      	str	r1, [sp, #20]
 8007c02:	6800      	ldr	r0, [r0, #0]
 8007c04:	a902      	add	r1, sp, #8
 8007c06:	9301      	str	r3, [sp, #4]
 8007c08:	f000 f870 	bl	8007cec <_svfiprintf_r>
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	9a02      	ldr	r2, [sp, #8]
 8007c10:	7013      	strb	r3, [r2, #0]
 8007c12:	b01c      	add	sp, #112	; 0x70
 8007c14:	bc08      	pop	{r3}
 8007c16:	b003      	add	sp, #12
 8007c18:	4718      	bx	r3
 8007c1a:	46c0      	nop			; (mov r8, r8)
 8007c1c:	7fffffff 	.word	0x7fffffff
 8007c20:	20000058 	.word	0x20000058
 8007c24:	ffff0208 	.word	0xffff0208

08007c28 <__ssputs_r>:
 8007c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c2a:	688e      	ldr	r6, [r1, #8]
 8007c2c:	b085      	sub	sp, #20
 8007c2e:	0007      	movs	r7, r0
 8007c30:	000c      	movs	r4, r1
 8007c32:	9203      	str	r2, [sp, #12]
 8007c34:	9301      	str	r3, [sp, #4]
 8007c36:	429e      	cmp	r6, r3
 8007c38:	d83c      	bhi.n	8007cb4 <__ssputs_r+0x8c>
 8007c3a:	2390      	movs	r3, #144	; 0x90
 8007c3c:	898a      	ldrh	r2, [r1, #12]
 8007c3e:	00db      	lsls	r3, r3, #3
 8007c40:	421a      	tst	r2, r3
 8007c42:	d034      	beq.n	8007cae <__ssputs_r+0x86>
 8007c44:	2503      	movs	r5, #3
 8007c46:	6909      	ldr	r1, [r1, #16]
 8007c48:	6823      	ldr	r3, [r4, #0]
 8007c4a:	1a5b      	subs	r3, r3, r1
 8007c4c:	9302      	str	r3, [sp, #8]
 8007c4e:	6963      	ldr	r3, [r4, #20]
 8007c50:	9802      	ldr	r0, [sp, #8]
 8007c52:	435d      	muls	r5, r3
 8007c54:	0feb      	lsrs	r3, r5, #31
 8007c56:	195d      	adds	r5, r3, r5
 8007c58:	9b01      	ldr	r3, [sp, #4]
 8007c5a:	106d      	asrs	r5, r5, #1
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	181b      	adds	r3, r3, r0
 8007c60:	42ab      	cmp	r3, r5
 8007c62:	d900      	bls.n	8007c66 <__ssputs_r+0x3e>
 8007c64:	001d      	movs	r5, r3
 8007c66:	0553      	lsls	r3, r2, #21
 8007c68:	d532      	bpl.n	8007cd0 <__ssputs_r+0xa8>
 8007c6a:	0029      	movs	r1, r5
 8007c6c:	0038      	movs	r0, r7
 8007c6e:	f000 fb19 	bl	80082a4 <_malloc_r>
 8007c72:	1e06      	subs	r6, r0, #0
 8007c74:	d109      	bne.n	8007c8a <__ssputs_r+0x62>
 8007c76:	230c      	movs	r3, #12
 8007c78:	603b      	str	r3, [r7, #0]
 8007c7a:	2340      	movs	r3, #64	; 0x40
 8007c7c:	2001      	movs	r0, #1
 8007c7e:	89a2      	ldrh	r2, [r4, #12]
 8007c80:	4240      	negs	r0, r0
 8007c82:	4313      	orrs	r3, r2
 8007c84:	81a3      	strh	r3, [r4, #12]
 8007c86:	b005      	add	sp, #20
 8007c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c8a:	9a02      	ldr	r2, [sp, #8]
 8007c8c:	6921      	ldr	r1, [r4, #16]
 8007c8e:	f7ff ff99 	bl	8007bc4 <memcpy>
 8007c92:	89a3      	ldrh	r3, [r4, #12]
 8007c94:	4a14      	ldr	r2, [pc, #80]	; (8007ce8 <__ssputs_r+0xc0>)
 8007c96:	401a      	ands	r2, r3
 8007c98:	2380      	movs	r3, #128	; 0x80
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	81a3      	strh	r3, [r4, #12]
 8007c9e:	9b02      	ldr	r3, [sp, #8]
 8007ca0:	6126      	str	r6, [r4, #16]
 8007ca2:	18f6      	adds	r6, r6, r3
 8007ca4:	6026      	str	r6, [r4, #0]
 8007ca6:	6165      	str	r5, [r4, #20]
 8007ca8:	9e01      	ldr	r6, [sp, #4]
 8007caa:	1aed      	subs	r5, r5, r3
 8007cac:	60a5      	str	r5, [r4, #8]
 8007cae:	9b01      	ldr	r3, [sp, #4]
 8007cb0:	429e      	cmp	r6, r3
 8007cb2:	d900      	bls.n	8007cb6 <__ssputs_r+0x8e>
 8007cb4:	9e01      	ldr	r6, [sp, #4]
 8007cb6:	0032      	movs	r2, r6
 8007cb8:	9903      	ldr	r1, [sp, #12]
 8007cba:	6820      	ldr	r0, [r4, #0]
 8007cbc:	f000 fa95 	bl	80081ea <memmove>
 8007cc0:	68a3      	ldr	r3, [r4, #8]
 8007cc2:	2000      	movs	r0, #0
 8007cc4:	1b9b      	subs	r3, r3, r6
 8007cc6:	60a3      	str	r3, [r4, #8]
 8007cc8:	6823      	ldr	r3, [r4, #0]
 8007cca:	199e      	adds	r6, r3, r6
 8007ccc:	6026      	str	r6, [r4, #0]
 8007cce:	e7da      	b.n	8007c86 <__ssputs_r+0x5e>
 8007cd0:	002a      	movs	r2, r5
 8007cd2:	0038      	movs	r0, r7
 8007cd4:	f000 fb44 	bl	8008360 <_realloc_r>
 8007cd8:	1e06      	subs	r6, r0, #0
 8007cda:	d1e0      	bne.n	8007c9e <__ssputs_r+0x76>
 8007cdc:	6921      	ldr	r1, [r4, #16]
 8007cde:	0038      	movs	r0, r7
 8007ce0:	f000 fa96 	bl	8008210 <_free_r>
 8007ce4:	e7c7      	b.n	8007c76 <__ssputs_r+0x4e>
 8007ce6:	46c0      	nop			; (mov r8, r8)
 8007ce8:	fffffb7f 	.word	0xfffffb7f

08007cec <_svfiprintf_r>:
 8007cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cee:	b0a1      	sub	sp, #132	; 0x84
 8007cf0:	9003      	str	r0, [sp, #12]
 8007cf2:	001d      	movs	r5, r3
 8007cf4:	898b      	ldrh	r3, [r1, #12]
 8007cf6:	000f      	movs	r7, r1
 8007cf8:	0016      	movs	r6, r2
 8007cfa:	061b      	lsls	r3, r3, #24
 8007cfc:	d511      	bpl.n	8007d22 <_svfiprintf_r+0x36>
 8007cfe:	690b      	ldr	r3, [r1, #16]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d10e      	bne.n	8007d22 <_svfiprintf_r+0x36>
 8007d04:	2140      	movs	r1, #64	; 0x40
 8007d06:	f000 facd 	bl	80082a4 <_malloc_r>
 8007d0a:	6038      	str	r0, [r7, #0]
 8007d0c:	6138      	str	r0, [r7, #16]
 8007d0e:	2800      	cmp	r0, #0
 8007d10:	d105      	bne.n	8007d1e <_svfiprintf_r+0x32>
 8007d12:	230c      	movs	r3, #12
 8007d14:	9a03      	ldr	r2, [sp, #12]
 8007d16:	3801      	subs	r0, #1
 8007d18:	6013      	str	r3, [r2, #0]
 8007d1a:	b021      	add	sp, #132	; 0x84
 8007d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d1e:	2340      	movs	r3, #64	; 0x40
 8007d20:	617b      	str	r3, [r7, #20]
 8007d22:	2300      	movs	r3, #0
 8007d24:	ac08      	add	r4, sp, #32
 8007d26:	6163      	str	r3, [r4, #20]
 8007d28:	3320      	adds	r3, #32
 8007d2a:	7663      	strb	r3, [r4, #25]
 8007d2c:	3310      	adds	r3, #16
 8007d2e:	76a3      	strb	r3, [r4, #26]
 8007d30:	9507      	str	r5, [sp, #28]
 8007d32:	0035      	movs	r5, r6
 8007d34:	782b      	ldrb	r3, [r5, #0]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d001      	beq.n	8007d3e <_svfiprintf_r+0x52>
 8007d3a:	2b25      	cmp	r3, #37	; 0x25
 8007d3c:	d146      	bne.n	8007dcc <_svfiprintf_r+0xe0>
 8007d3e:	1bab      	subs	r3, r5, r6
 8007d40:	9305      	str	r3, [sp, #20]
 8007d42:	d00c      	beq.n	8007d5e <_svfiprintf_r+0x72>
 8007d44:	0032      	movs	r2, r6
 8007d46:	0039      	movs	r1, r7
 8007d48:	9803      	ldr	r0, [sp, #12]
 8007d4a:	f7ff ff6d 	bl	8007c28 <__ssputs_r>
 8007d4e:	1c43      	adds	r3, r0, #1
 8007d50:	d100      	bne.n	8007d54 <_svfiprintf_r+0x68>
 8007d52:	e0ae      	b.n	8007eb2 <_svfiprintf_r+0x1c6>
 8007d54:	6962      	ldr	r2, [r4, #20]
 8007d56:	9b05      	ldr	r3, [sp, #20]
 8007d58:	4694      	mov	ip, r2
 8007d5a:	4463      	add	r3, ip
 8007d5c:	6163      	str	r3, [r4, #20]
 8007d5e:	782b      	ldrb	r3, [r5, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d100      	bne.n	8007d66 <_svfiprintf_r+0x7a>
 8007d64:	e0a5      	b.n	8007eb2 <_svfiprintf_r+0x1c6>
 8007d66:	2201      	movs	r2, #1
 8007d68:	2300      	movs	r3, #0
 8007d6a:	4252      	negs	r2, r2
 8007d6c:	6062      	str	r2, [r4, #4]
 8007d6e:	a904      	add	r1, sp, #16
 8007d70:	3254      	adds	r2, #84	; 0x54
 8007d72:	1852      	adds	r2, r2, r1
 8007d74:	1c6e      	adds	r6, r5, #1
 8007d76:	6023      	str	r3, [r4, #0]
 8007d78:	60e3      	str	r3, [r4, #12]
 8007d7a:	60a3      	str	r3, [r4, #8]
 8007d7c:	7013      	strb	r3, [r2, #0]
 8007d7e:	65a3      	str	r3, [r4, #88]	; 0x58
 8007d80:	7831      	ldrb	r1, [r6, #0]
 8007d82:	2205      	movs	r2, #5
 8007d84:	4853      	ldr	r0, [pc, #332]	; (8007ed4 <_svfiprintf_r+0x1e8>)
 8007d86:	f000 fa25 	bl	80081d4 <memchr>
 8007d8a:	1c75      	adds	r5, r6, #1
 8007d8c:	2800      	cmp	r0, #0
 8007d8e:	d11f      	bne.n	8007dd0 <_svfiprintf_r+0xe4>
 8007d90:	6822      	ldr	r2, [r4, #0]
 8007d92:	06d3      	lsls	r3, r2, #27
 8007d94:	d504      	bpl.n	8007da0 <_svfiprintf_r+0xb4>
 8007d96:	2353      	movs	r3, #83	; 0x53
 8007d98:	a904      	add	r1, sp, #16
 8007d9a:	185b      	adds	r3, r3, r1
 8007d9c:	2120      	movs	r1, #32
 8007d9e:	7019      	strb	r1, [r3, #0]
 8007da0:	0713      	lsls	r3, r2, #28
 8007da2:	d504      	bpl.n	8007dae <_svfiprintf_r+0xc2>
 8007da4:	2353      	movs	r3, #83	; 0x53
 8007da6:	a904      	add	r1, sp, #16
 8007da8:	185b      	adds	r3, r3, r1
 8007daa:	212b      	movs	r1, #43	; 0x2b
 8007dac:	7019      	strb	r1, [r3, #0]
 8007dae:	7833      	ldrb	r3, [r6, #0]
 8007db0:	2b2a      	cmp	r3, #42	; 0x2a
 8007db2:	d016      	beq.n	8007de2 <_svfiprintf_r+0xf6>
 8007db4:	0035      	movs	r5, r6
 8007db6:	2100      	movs	r1, #0
 8007db8:	200a      	movs	r0, #10
 8007dba:	68e3      	ldr	r3, [r4, #12]
 8007dbc:	782a      	ldrb	r2, [r5, #0]
 8007dbe:	1c6e      	adds	r6, r5, #1
 8007dc0:	3a30      	subs	r2, #48	; 0x30
 8007dc2:	2a09      	cmp	r2, #9
 8007dc4:	d94e      	bls.n	8007e64 <_svfiprintf_r+0x178>
 8007dc6:	2900      	cmp	r1, #0
 8007dc8:	d018      	beq.n	8007dfc <_svfiprintf_r+0x110>
 8007dca:	e010      	b.n	8007dee <_svfiprintf_r+0x102>
 8007dcc:	3501      	adds	r5, #1
 8007dce:	e7b1      	b.n	8007d34 <_svfiprintf_r+0x48>
 8007dd0:	4b40      	ldr	r3, [pc, #256]	; (8007ed4 <_svfiprintf_r+0x1e8>)
 8007dd2:	6822      	ldr	r2, [r4, #0]
 8007dd4:	1ac0      	subs	r0, r0, r3
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	4083      	lsls	r3, r0
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	6023      	str	r3, [r4, #0]
 8007dde:	002e      	movs	r6, r5
 8007de0:	e7ce      	b.n	8007d80 <_svfiprintf_r+0x94>
 8007de2:	9b07      	ldr	r3, [sp, #28]
 8007de4:	1d19      	adds	r1, r3, #4
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	9107      	str	r1, [sp, #28]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	db01      	blt.n	8007df2 <_svfiprintf_r+0x106>
 8007dee:	930b      	str	r3, [sp, #44]	; 0x2c
 8007df0:	e004      	b.n	8007dfc <_svfiprintf_r+0x110>
 8007df2:	425b      	negs	r3, r3
 8007df4:	60e3      	str	r3, [r4, #12]
 8007df6:	2302      	movs	r3, #2
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	6023      	str	r3, [r4, #0]
 8007dfc:	782b      	ldrb	r3, [r5, #0]
 8007dfe:	2b2e      	cmp	r3, #46	; 0x2e
 8007e00:	d10a      	bne.n	8007e18 <_svfiprintf_r+0x12c>
 8007e02:	786b      	ldrb	r3, [r5, #1]
 8007e04:	2b2a      	cmp	r3, #42	; 0x2a
 8007e06:	d135      	bne.n	8007e74 <_svfiprintf_r+0x188>
 8007e08:	9b07      	ldr	r3, [sp, #28]
 8007e0a:	3502      	adds	r5, #2
 8007e0c:	1d1a      	adds	r2, r3, #4
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	9207      	str	r2, [sp, #28]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	db2b      	blt.n	8007e6e <_svfiprintf_r+0x182>
 8007e16:	9309      	str	r3, [sp, #36]	; 0x24
 8007e18:	4e2f      	ldr	r6, [pc, #188]	; (8007ed8 <_svfiprintf_r+0x1ec>)
 8007e1a:	7829      	ldrb	r1, [r5, #0]
 8007e1c:	2203      	movs	r2, #3
 8007e1e:	0030      	movs	r0, r6
 8007e20:	f000 f9d8 	bl	80081d4 <memchr>
 8007e24:	2800      	cmp	r0, #0
 8007e26:	d006      	beq.n	8007e36 <_svfiprintf_r+0x14a>
 8007e28:	2340      	movs	r3, #64	; 0x40
 8007e2a:	1b80      	subs	r0, r0, r6
 8007e2c:	4083      	lsls	r3, r0
 8007e2e:	6822      	ldr	r2, [r4, #0]
 8007e30:	3501      	adds	r5, #1
 8007e32:	4313      	orrs	r3, r2
 8007e34:	6023      	str	r3, [r4, #0]
 8007e36:	7829      	ldrb	r1, [r5, #0]
 8007e38:	2206      	movs	r2, #6
 8007e3a:	4828      	ldr	r0, [pc, #160]	; (8007edc <_svfiprintf_r+0x1f0>)
 8007e3c:	1c6e      	adds	r6, r5, #1
 8007e3e:	7621      	strb	r1, [r4, #24]
 8007e40:	f000 f9c8 	bl	80081d4 <memchr>
 8007e44:	2800      	cmp	r0, #0
 8007e46:	d03c      	beq.n	8007ec2 <_svfiprintf_r+0x1d6>
 8007e48:	4b25      	ldr	r3, [pc, #148]	; (8007ee0 <_svfiprintf_r+0x1f4>)
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d125      	bne.n	8007e9a <_svfiprintf_r+0x1ae>
 8007e4e:	2207      	movs	r2, #7
 8007e50:	9b07      	ldr	r3, [sp, #28]
 8007e52:	3307      	adds	r3, #7
 8007e54:	4393      	bics	r3, r2
 8007e56:	3308      	adds	r3, #8
 8007e58:	9307      	str	r3, [sp, #28]
 8007e5a:	6963      	ldr	r3, [r4, #20]
 8007e5c:	9a04      	ldr	r2, [sp, #16]
 8007e5e:	189b      	adds	r3, r3, r2
 8007e60:	6163      	str	r3, [r4, #20]
 8007e62:	e766      	b.n	8007d32 <_svfiprintf_r+0x46>
 8007e64:	4343      	muls	r3, r0
 8007e66:	2101      	movs	r1, #1
 8007e68:	189b      	adds	r3, r3, r2
 8007e6a:	0035      	movs	r5, r6
 8007e6c:	e7a6      	b.n	8007dbc <_svfiprintf_r+0xd0>
 8007e6e:	2301      	movs	r3, #1
 8007e70:	425b      	negs	r3, r3
 8007e72:	e7d0      	b.n	8007e16 <_svfiprintf_r+0x12a>
 8007e74:	2300      	movs	r3, #0
 8007e76:	200a      	movs	r0, #10
 8007e78:	001a      	movs	r2, r3
 8007e7a:	3501      	adds	r5, #1
 8007e7c:	6063      	str	r3, [r4, #4]
 8007e7e:	7829      	ldrb	r1, [r5, #0]
 8007e80:	1c6e      	adds	r6, r5, #1
 8007e82:	3930      	subs	r1, #48	; 0x30
 8007e84:	2909      	cmp	r1, #9
 8007e86:	d903      	bls.n	8007e90 <_svfiprintf_r+0x1a4>
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d0c5      	beq.n	8007e18 <_svfiprintf_r+0x12c>
 8007e8c:	9209      	str	r2, [sp, #36]	; 0x24
 8007e8e:	e7c3      	b.n	8007e18 <_svfiprintf_r+0x12c>
 8007e90:	4342      	muls	r2, r0
 8007e92:	2301      	movs	r3, #1
 8007e94:	1852      	adds	r2, r2, r1
 8007e96:	0035      	movs	r5, r6
 8007e98:	e7f1      	b.n	8007e7e <_svfiprintf_r+0x192>
 8007e9a:	ab07      	add	r3, sp, #28
 8007e9c:	9300      	str	r3, [sp, #0]
 8007e9e:	003a      	movs	r2, r7
 8007ea0:	4b10      	ldr	r3, [pc, #64]	; (8007ee4 <_svfiprintf_r+0x1f8>)
 8007ea2:	0021      	movs	r1, r4
 8007ea4:	9803      	ldr	r0, [sp, #12]
 8007ea6:	e000      	b.n	8007eaa <_svfiprintf_r+0x1be>
 8007ea8:	bf00      	nop
 8007eaa:	9004      	str	r0, [sp, #16]
 8007eac:	9b04      	ldr	r3, [sp, #16]
 8007eae:	3301      	adds	r3, #1
 8007eb0:	d1d3      	bne.n	8007e5a <_svfiprintf_r+0x16e>
 8007eb2:	89bb      	ldrh	r3, [r7, #12]
 8007eb4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007eb6:	065b      	lsls	r3, r3, #25
 8007eb8:	d400      	bmi.n	8007ebc <_svfiprintf_r+0x1d0>
 8007eba:	e72e      	b.n	8007d1a <_svfiprintf_r+0x2e>
 8007ebc:	2001      	movs	r0, #1
 8007ebe:	4240      	negs	r0, r0
 8007ec0:	e72b      	b.n	8007d1a <_svfiprintf_r+0x2e>
 8007ec2:	ab07      	add	r3, sp, #28
 8007ec4:	9300      	str	r3, [sp, #0]
 8007ec6:	003a      	movs	r2, r7
 8007ec8:	4b06      	ldr	r3, [pc, #24]	; (8007ee4 <_svfiprintf_r+0x1f8>)
 8007eca:	0021      	movs	r1, r4
 8007ecc:	9803      	ldr	r0, [sp, #12]
 8007ece:	f000 f879 	bl	8007fc4 <_printf_i>
 8007ed2:	e7ea      	b.n	8007eaa <_svfiprintf_r+0x1be>
 8007ed4:	08008b89 	.word	0x08008b89
 8007ed8:	08008b8f 	.word	0x08008b8f
 8007edc:	08008b93 	.word	0x08008b93
 8007ee0:	00000000 	.word	0x00000000
 8007ee4:	08007c29 	.word	0x08007c29

08007ee8 <_printf_common>:
 8007ee8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007eea:	0015      	movs	r5, r2
 8007eec:	9301      	str	r3, [sp, #4]
 8007eee:	688a      	ldr	r2, [r1, #8]
 8007ef0:	690b      	ldr	r3, [r1, #16]
 8007ef2:	9000      	str	r0, [sp, #0]
 8007ef4:	000c      	movs	r4, r1
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	da00      	bge.n	8007efc <_printf_common+0x14>
 8007efa:	0013      	movs	r3, r2
 8007efc:	0022      	movs	r2, r4
 8007efe:	602b      	str	r3, [r5, #0]
 8007f00:	3243      	adds	r2, #67	; 0x43
 8007f02:	7812      	ldrb	r2, [r2, #0]
 8007f04:	2a00      	cmp	r2, #0
 8007f06:	d001      	beq.n	8007f0c <_printf_common+0x24>
 8007f08:	3301      	adds	r3, #1
 8007f0a:	602b      	str	r3, [r5, #0]
 8007f0c:	6823      	ldr	r3, [r4, #0]
 8007f0e:	069b      	lsls	r3, r3, #26
 8007f10:	d502      	bpl.n	8007f18 <_printf_common+0x30>
 8007f12:	682b      	ldr	r3, [r5, #0]
 8007f14:	3302      	adds	r3, #2
 8007f16:	602b      	str	r3, [r5, #0]
 8007f18:	2706      	movs	r7, #6
 8007f1a:	6823      	ldr	r3, [r4, #0]
 8007f1c:	401f      	ands	r7, r3
 8007f1e:	d027      	beq.n	8007f70 <_printf_common+0x88>
 8007f20:	0023      	movs	r3, r4
 8007f22:	3343      	adds	r3, #67	; 0x43
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	1e5a      	subs	r2, r3, #1
 8007f28:	4193      	sbcs	r3, r2
 8007f2a:	6822      	ldr	r2, [r4, #0]
 8007f2c:	0692      	lsls	r2, r2, #26
 8007f2e:	d430      	bmi.n	8007f92 <_printf_common+0xaa>
 8007f30:	0022      	movs	r2, r4
 8007f32:	9901      	ldr	r1, [sp, #4]
 8007f34:	3243      	adds	r2, #67	; 0x43
 8007f36:	9800      	ldr	r0, [sp, #0]
 8007f38:	9e08      	ldr	r6, [sp, #32]
 8007f3a:	47b0      	blx	r6
 8007f3c:	1c43      	adds	r3, r0, #1
 8007f3e:	d025      	beq.n	8007f8c <_printf_common+0xa4>
 8007f40:	2306      	movs	r3, #6
 8007f42:	6820      	ldr	r0, [r4, #0]
 8007f44:	682a      	ldr	r2, [r5, #0]
 8007f46:	68e1      	ldr	r1, [r4, #12]
 8007f48:	4003      	ands	r3, r0
 8007f4a:	2500      	movs	r5, #0
 8007f4c:	2b04      	cmp	r3, #4
 8007f4e:	d103      	bne.n	8007f58 <_printf_common+0x70>
 8007f50:	1a8d      	subs	r5, r1, r2
 8007f52:	43eb      	mvns	r3, r5
 8007f54:	17db      	asrs	r3, r3, #31
 8007f56:	401d      	ands	r5, r3
 8007f58:	68a3      	ldr	r3, [r4, #8]
 8007f5a:	6922      	ldr	r2, [r4, #16]
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	dd01      	ble.n	8007f64 <_printf_common+0x7c>
 8007f60:	1a9b      	subs	r3, r3, r2
 8007f62:	18ed      	adds	r5, r5, r3
 8007f64:	2700      	movs	r7, #0
 8007f66:	42bd      	cmp	r5, r7
 8007f68:	d120      	bne.n	8007fac <_printf_common+0xc4>
 8007f6a:	2000      	movs	r0, #0
 8007f6c:	e010      	b.n	8007f90 <_printf_common+0xa8>
 8007f6e:	3701      	adds	r7, #1
 8007f70:	68e3      	ldr	r3, [r4, #12]
 8007f72:	682a      	ldr	r2, [r5, #0]
 8007f74:	1a9b      	subs	r3, r3, r2
 8007f76:	42bb      	cmp	r3, r7
 8007f78:	ddd2      	ble.n	8007f20 <_printf_common+0x38>
 8007f7a:	0022      	movs	r2, r4
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	3219      	adds	r2, #25
 8007f80:	9901      	ldr	r1, [sp, #4]
 8007f82:	9800      	ldr	r0, [sp, #0]
 8007f84:	9e08      	ldr	r6, [sp, #32]
 8007f86:	47b0      	blx	r6
 8007f88:	1c43      	adds	r3, r0, #1
 8007f8a:	d1f0      	bne.n	8007f6e <_printf_common+0x86>
 8007f8c:	2001      	movs	r0, #1
 8007f8e:	4240      	negs	r0, r0
 8007f90:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007f92:	2030      	movs	r0, #48	; 0x30
 8007f94:	18e1      	adds	r1, r4, r3
 8007f96:	3143      	adds	r1, #67	; 0x43
 8007f98:	7008      	strb	r0, [r1, #0]
 8007f9a:	0021      	movs	r1, r4
 8007f9c:	1c5a      	adds	r2, r3, #1
 8007f9e:	3145      	adds	r1, #69	; 0x45
 8007fa0:	7809      	ldrb	r1, [r1, #0]
 8007fa2:	18a2      	adds	r2, r4, r2
 8007fa4:	3243      	adds	r2, #67	; 0x43
 8007fa6:	3302      	adds	r3, #2
 8007fa8:	7011      	strb	r1, [r2, #0]
 8007faa:	e7c1      	b.n	8007f30 <_printf_common+0x48>
 8007fac:	0022      	movs	r2, r4
 8007fae:	2301      	movs	r3, #1
 8007fb0:	321a      	adds	r2, #26
 8007fb2:	9901      	ldr	r1, [sp, #4]
 8007fb4:	9800      	ldr	r0, [sp, #0]
 8007fb6:	9e08      	ldr	r6, [sp, #32]
 8007fb8:	47b0      	blx	r6
 8007fba:	1c43      	adds	r3, r0, #1
 8007fbc:	d0e6      	beq.n	8007f8c <_printf_common+0xa4>
 8007fbe:	3701      	adds	r7, #1
 8007fc0:	e7d1      	b.n	8007f66 <_printf_common+0x7e>
	...

08007fc4 <_printf_i>:
 8007fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fc6:	b089      	sub	sp, #36	; 0x24
 8007fc8:	9204      	str	r2, [sp, #16]
 8007fca:	000a      	movs	r2, r1
 8007fcc:	3243      	adds	r2, #67	; 0x43
 8007fce:	9305      	str	r3, [sp, #20]
 8007fd0:	9003      	str	r0, [sp, #12]
 8007fd2:	9202      	str	r2, [sp, #8]
 8007fd4:	7e0a      	ldrb	r2, [r1, #24]
 8007fd6:	000c      	movs	r4, r1
 8007fd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007fda:	2a6e      	cmp	r2, #110	; 0x6e
 8007fdc:	d100      	bne.n	8007fe0 <_printf_i+0x1c>
 8007fde:	e086      	b.n	80080ee <_printf_i+0x12a>
 8007fe0:	d81f      	bhi.n	8008022 <_printf_i+0x5e>
 8007fe2:	2a63      	cmp	r2, #99	; 0x63
 8007fe4:	d033      	beq.n	800804e <_printf_i+0x8a>
 8007fe6:	d808      	bhi.n	8007ffa <_printf_i+0x36>
 8007fe8:	2a00      	cmp	r2, #0
 8007fea:	d100      	bne.n	8007fee <_printf_i+0x2a>
 8007fec:	e08c      	b.n	8008108 <_printf_i+0x144>
 8007fee:	2a58      	cmp	r2, #88	; 0x58
 8007ff0:	d04d      	beq.n	800808e <_printf_i+0xca>
 8007ff2:	0025      	movs	r5, r4
 8007ff4:	3542      	adds	r5, #66	; 0x42
 8007ff6:	702a      	strb	r2, [r5, #0]
 8007ff8:	e030      	b.n	800805c <_printf_i+0x98>
 8007ffa:	2a64      	cmp	r2, #100	; 0x64
 8007ffc:	d001      	beq.n	8008002 <_printf_i+0x3e>
 8007ffe:	2a69      	cmp	r2, #105	; 0x69
 8008000:	d1f7      	bne.n	8007ff2 <_printf_i+0x2e>
 8008002:	6819      	ldr	r1, [r3, #0]
 8008004:	6825      	ldr	r5, [r4, #0]
 8008006:	1d0a      	adds	r2, r1, #4
 8008008:	0628      	lsls	r0, r5, #24
 800800a:	d529      	bpl.n	8008060 <_printf_i+0x9c>
 800800c:	6808      	ldr	r0, [r1, #0]
 800800e:	601a      	str	r2, [r3, #0]
 8008010:	2800      	cmp	r0, #0
 8008012:	da03      	bge.n	800801c <_printf_i+0x58>
 8008014:	232d      	movs	r3, #45	; 0x2d
 8008016:	9a02      	ldr	r2, [sp, #8]
 8008018:	4240      	negs	r0, r0
 800801a:	7013      	strb	r3, [r2, #0]
 800801c:	4e6b      	ldr	r6, [pc, #428]	; (80081cc <_printf_i+0x208>)
 800801e:	270a      	movs	r7, #10
 8008020:	e04f      	b.n	80080c2 <_printf_i+0xfe>
 8008022:	2a73      	cmp	r2, #115	; 0x73
 8008024:	d074      	beq.n	8008110 <_printf_i+0x14c>
 8008026:	d808      	bhi.n	800803a <_printf_i+0x76>
 8008028:	2a6f      	cmp	r2, #111	; 0x6f
 800802a:	d01f      	beq.n	800806c <_printf_i+0xa8>
 800802c:	2a70      	cmp	r2, #112	; 0x70
 800802e:	d1e0      	bne.n	8007ff2 <_printf_i+0x2e>
 8008030:	2220      	movs	r2, #32
 8008032:	6809      	ldr	r1, [r1, #0]
 8008034:	430a      	orrs	r2, r1
 8008036:	6022      	str	r2, [r4, #0]
 8008038:	e003      	b.n	8008042 <_printf_i+0x7e>
 800803a:	2a75      	cmp	r2, #117	; 0x75
 800803c:	d016      	beq.n	800806c <_printf_i+0xa8>
 800803e:	2a78      	cmp	r2, #120	; 0x78
 8008040:	d1d7      	bne.n	8007ff2 <_printf_i+0x2e>
 8008042:	0022      	movs	r2, r4
 8008044:	2178      	movs	r1, #120	; 0x78
 8008046:	3245      	adds	r2, #69	; 0x45
 8008048:	7011      	strb	r1, [r2, #0]
 800804a:	4e61      	ldr	r6, [pc, #388]	; (80081d0 <_printf_i+0x20c>)
 800804c:	e022      	b.n	8008094 <_printf_i+0xd0>
 800804e:	0025      	movs	r5, r4
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	3542      	adds	r5, #66	; 0x42
 8008054:	1d11      	adds	r1, r2, #4
 8008056:	6019      	str	r1, [r3, #0]
 8008058:	6813      	ldr	r3, [r2, #0]
 800805a:	702b      	strb	r3, [r5, #0]
 800805c:	2301      	movs	r3, #1
 800805e:	e065      	b.n	800812c <_printf_i+0x168>
 8008060:	6808      	ldr	r0, [r1, #0]
 8008062:	601a      	str	r2, [r3, #0]
 8008064:	0669      	lsls	r1, r5, #25
 8008066:	d5d3      	bpl.n	8008010 <_printf_i+0x4c>
 8008068:	b200      	sxth	r0, r0
 800806a:	e7d1      	b.n	8008010 <_printf_i+0x4c>
 800806c:	6819      	ldr	r1, [r3, #0]
 800806e:	6825      	ldr	r5, [r4, #0]
 8008070:	1d08      	adds	r0, r1, #4
 8008072:	6018      	str	r0, [r3, #0]
 8008074:	6808      	ldr	r0, [r1, #0]
 8008076:	062e      	lsls	r6, r5, #24
 8008078:	d505      	bpl.n	8008086 <_printf_i+0xc2>
 800807a:	4e54      	ldr	r6, [pc, #336]	; (80081cc <_printf_i+0x208>)
 800807c:	2708      	movs	r7, #8
 800807e:	2a6f      	cmp	r2, #111	; 0x6f
 8008080:	d01b      	beq.n	80080ba <_printf_i+0xf6>
 8008082:	270a      	movs	r7, #10
 8008084:	e019      	b.n	80080ba <_printf_i+0xf6>
 8008086:	066d      	lsls	r5, r5, #25
 8008088:	d5f7      	bpl.n	800807a <_printf_i+0xb6>
 800808a:	b280      	uxth	r0, r0
 800808c:	e7f5      	b.n	800807a <_printf_i+0xb6>
 800808e:	3145      	adds	r1, #69	; 0x45
 8008090:	4e4e      	ldr	r6, [pc, #312]	; (80081cc <_printf_i+0x208>)
 8008092:	700a      	strb	r2, [r1, #0]
 8008094:	6818      	ldr	r0, [r3, #0]
 8008096:	6822      	ldr	r2, [r4, #0]
 8008098:	1d01      	adds	r1, r0, #4
 800809a:	6800      	ldr	r0, [r0, #0]
 800809c:	6019      	str	r1, [r3, #0]
 800809e:	0615      	lsls	r5, r2, #24
 80080a0:	d521      	bpl.n	80080e6 <_printf_i+0x122>
 80080a2:	07d3      	lsls	r3, r2, #31
 80080a4:	d502      	bpl.n	80080ac <_printf_i+0xe8>
 80080a6:	2320      	movs	r3, #32
 80080a8:	431a      	orrs	r2, r3
 80080aa:	6022      	str	r2, [r4, #0]
 80080ac:	2710      	movs	r7, #16
 80080ae:	2800      	cmp	r0, #0
 80080b0:	d103      	bne.n	80080ba <_printf_i+0xf6>
 80080b2:	2320      	movs	r3, #32
 80080b4:	6822      	ldr	r2, [r4, #0]
 80080b6:	439a      	bics	r2, r3
 80080b8:	6022      	str	r2, [r4, #0]
 80080ba:	0023      	movs	r3, r4
 80080bc:	2200      	movs	r2, #0
 80080be:	3343      	adds	r3, #67	; 0x43
 80080c0:	701a      	strb	r2, [r3, #0]
 80080c2:	6863      	ldr	r3, [r4, #4]
 80080c4:	60a3      	str	r3, [r4, #8]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	db58      	blt.n	800817c <_printf_i+0x1b8>
 80080ca:	2204      	movs	r2, #4
 80080cc:	6821      	ldr	r1, [r4, #0]
 80080ce:	4391      	bics	r1, r2
 80080d0:	6021      	str	r1, [r4, #0]
 80080d2:	2800      	cmp	r0, #0
 80080d4:	d154      	bne.n	8008180 <_printf_i+0x1bc>
 80080d6:	9d02      	ldr	r5, [sp, #8]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d05a      	beq.n	8008192 <_printf_i+0x1ce>
 80080dc:	0025      	movs	r5, r4
 80080de:	7833      	ldrb	r3, [r6, #0]
 80080e0:	3542      	adds	r5, #66	; 0x42
 80080e2:	702b      	strb	r3, [r5, #0]
 80080e4:	e055      	b.n	8008192 <_printf_i+0x1ce>
 80080e6:	0655      	lsls	r5, r2, #25
 80080e8:	d5db      	bpl.n	80080a2 <_printf_i+0xde>
 80080ea:	b280      	uxth	r0, r0
 80080ec:	e7d9      	b.n	80080a2 <_printf_i+0xde>
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	680d      	ldr	r5, [r1, #0]
 80080f2:	1d10      	adds	r0, r2, #4
 80080f4:	6949      	ldr	r1, [r1, #20]
 80080f6:	6018      	str	r0, [r3, #0]
 80080f8:	6813      	ldr	r3, [r2, #0]
 80080fa:	062e      	lsls	r6, r5, #24
 80080fc:	d501      	bpl.n	8008102 <_printf_i+0x13e>
 80080fe:	6019      	str	r1, [r3, #0]
 8008100:	e002      	b.n	8008108 <_printf_i+0x144>
 8008102:	066d      	lsls	r5, r5, #25
 8008104:	d5fb      	bpl.n	80080fe <_printf_i+0x13a>
 8008106:	8019      	strh	r1, [r3, #0]
 8008108:	2300      	movs	r3, #0
 800810a:	9d02      	ldr	r5, [sp, #8]
 800810c:	6123      	str	r3, [r4, #16]
 800810e:	e04f      	b.n	80081b0 <_printf_i+0x1ec>
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	1d11      	adds	r1, r2, #4
 8008114:	6019      	str	r1, [r3, #0]
 8008116:	6815      	ldr	r5, [r2, #0]
 8008118:	2100      	movs	r1, #0
 800811a:	6862      	ldr	r2, [r4, #4]
 800811c:	0028      	movs	r0, r5
 800811e:	f000 f859 	bl	80081d4 <memchr>
 8008122:	2800      	cmp	r0, #0
 8008124:	d001      	beq.n	800812a <_printf_i+0x166>
 8008126:	1b40      	subs	r0, r0, r5
 8008128:	6060      	str	r0, [r4, #4]
 800812a:	6863      	ldr	r3, [r4, #4]
 800812c:	6123      	str	r3, [r4, #16]
 800812e:	2300      	movs	r3, #0
 8008130:	9a02      	ldr	r2, [sp, #8]
 8008132:	7013      	strb	r3, [r2, #0]
 8008134:	e03c      	b.n	80081b0 <_printf_i+0x1ec>
 8008136:	6923      	ldr	r3, [r4, #16]
 8008138:	002a      	movs	r2, r5
 800813a:	9904      	ldr	r1, [sp, #16]
 800813c:	9803      	ldr	r0, [sp, #12]
 800813e:	9d05      	ldr	r5, [sp, #20]
 8008140:	47a8      	blx	r5
 8008142:	1c43      	adds	r3, r0, #1
 8008144:	d03e      	beq.n	80081c4 <_printf_i+0x200>
 8008146:	6823      	ldr	r3, [r4, #0]
 8008148:	079b      	lsls	r3, r3, #30
 800814a:	d415      	bmi.n	8008178 <_printf_i+0x1b4>
 800814c:	9b07      	ldr	r3, [sp, #28]
 800814e:	68e0      	ldr	r0, [r4, #12]
 8008150:	4298      	cmp	r0, r3
 8008152:	da39      	bge.n	80081c8 <_printf_i+0x204>
 8008154:	0018      	movs	r0, r3
 8008156:	e037      	b.n	80081c8 <_printf_i+0x204>
 8008158:	0022      	movs	r2, r4
 800815a:	2301      	movs	r3, #1
 800815c:	3219      	adds	r2, #25
 800815e:	9904      	ldr	r1, [sp, #16]
 8008160:	9803      	ldr	r0, [sp, #12]
 8008162:	9e05      	ldr	r6, [sp, #20]
 8008164:	47b0      	blx	r6
 8008166:	1c43      	adds	r3, r0, #1
 8008168:	d02c      	beq.n	80081c4 <_printf_i+0x200>
 800816a:	3501      	adds	r5, #1
 800816c:	68e3      	ldr	r3, [r4, #12]
 800816e:	9a07      	ldr	r2, [sp, #28]
 8008170:	1a9b      	subs	r3, r3, r2
 8008172:	42ab      	cmp	r3, r5
 8008174:	dcf0      	bgt.n	8008158 <_printf_i+0x194>
 8008176:	e7e9      	b.n	800814c <_printf_i+0x188>
 8008178:	2500      	movs	r5, #0
 800817a:	e7f7      	b.n	800816c <_printf_i+0x1a8>
 800817c:	2800      	cmp	r0, #0
 800817e:	d0ad      	beq.n	80080dc <_printf_i+0x118>
 8008180:	9d02      	ldr	r5, [sp, #8]
 8008182:	0039      	movs	r1, r7
 8008184:	f7f8 f84e 	bl	8000224 <__aeabi_uidivmod>
 8008188:	5c73      	ldrb	r3, [r6, r1]
 800818a:	3d01      	subs	r5, #1
 800818c:	702b      	strb	r3, [r5, #0]
 800818e:	2800      	cmp	r0, #0
 8008190:	d1f7      	bne.n	8008182 <_printf_i+0x1be>
 8008192:	2f08      	cmp	r7, #8
 8008194:	d109      	bne.n	80081aa <_printf_i+0x1e6>
 8008196:	6823      	ldr	r3, [r4, #0]
 8008198:	07db      	lsls	r3, r3, #31
 800819a:	d506      	bpl.n	80081aa <_printf_i+0x1e6>
 800819c:	6863      	ldr	r3, [r4, #4]
 800819e:	6922      	ldr	r2, [r4, #16]
 80081a0:	4293      	cmp	r3, r2
 80081a2:	dc02      	bgt.n	80081aa <_printf_i+0x1e6>
 80081a4:	2330      	movs	r3, #48	; 0x30
 80081a6:	3d01      	subs	r5, #1
 80081a8:	702b      	strb	r3, [r5, #0]
 80081aa:	9b02      	ldr	r3, [sp, #8]
 80081ac:	1b5b      	subs	r3, r3, r5
 80081ae:	6123      	str	r3, [r4, #16]
 80081b0:	9b05      	ldr	r3, [sp, #20]
 80081b2:	aa07      	add	r2, sp, #28
 80081b4:	9300      	str	r3, [sp, #0]
 80081b6:	0021      	movs	r1, r4
 80081b8:	9b04      	ldr	r3, [sp, #16]
 80081ba:	9803      	ldr	r0, [sp, #12]
 80081bc:	f7ff fe94 	bl	8007ee8 <_printf_common>
 80081c0:	1c43      	adds	r3, r0, #1
 80081c2:	d1b8      	bne.n	8008136 <_printf_i+0x172>
 80081c4:	2001      	movs	r0, #1
 80081c6:	4240      	negs	r0, r0
 80081c8:	b009      	add	sp, #36	; 0x24
 80081ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081cc:	08008b9a 	.word	0x08008b9a
 80081d0:	08008bab 	.word	0x08008bab

080081d4 <memchr>:
 80081d4:	b2c9      	uxtb	r1, r1
 80081d6:	1882      	adds	r2, r0, r2
 80081d8:	4290      	cmp	r0, r2
 80081da:	d101      	bne.n	80081e0 <memchr+0xc>
 80081dc:	2000      	movs	r0, #0
 80081de:	4770      	bx	lr
 80081e0:	7803      	ldrb	r3, [r0, #0]
 80081e2:	428b      	cmp	r3, r1
 80081e4:	d0fb      	beq.n	80081de <memchr+0xa>
 80081e6:	3001      	adds	r0, #1
 80081e8:	e7f6      	b.n	80081d8 <memchr+0x4>

080081ea <memmove>:
 80081ea:	b510      	push	{r4, lr}
 80081ec:	4288      	cmp	r0, r1
 80081ee:	d902      	bls.n	80081f6 <memmove+0xc>
 80081f0:	188b      	adds	r3, r1, r2
 80081f2:	4298      	cmp	r0, r3
 80081f4:	d303      	bcc.n	80081fe <memmove+0x14>
 80081f6:	2300      	movs	r3, #0
 80081f8:	e007      	b.n	800820a <memmove+0x20>
 80081fa:	5c8b      	ldrb	r3, [r1, r2]
 80081fc:	5483      	strb	r3, [r0, r2]
 80081fe:	3a01      	subs	r2, #1
 8008200:	d2fb      	bcs.n	80081fa <memmove+0x10>
 8008202:	bd10      	pop	{r4, pc}
 8008204:	5ccc      	ldrb	r4, [r1, r3]
 8008206:	54c4      	strb	r4, [r0, r3]
 8008208:	3301      	adds	r3, #1
 800820a:	429a      	cmp	r2, r3
 800820c:	d1fa      	bne.n	8008204 <memmove+0x1a>
 800820e:	e7f8      	b.n	8008202 <memmove+0x18>

08008210 <_free_r>:
 8008210:	b570      	push	{r4, r5, r6, lr}
 8008212:	0005      	movs	r5, r0
 8008214:	2900      	cmp	r1, #0
 8008216:	d010      	beq.n	800823a <_free_r+0x2a>
 8008218:	1f0c      	subs	r4, r1, #4
 800821a:	6823      	ldr	r3, [r4, #0]
 800821c:	2b00      	cmp	r3, #0
 800821e:	da00      	bge.n	8008222 <_free_r+0x12>
 8008220:	18e4      	adds	r4, r4, r3
 8008222:	0028      	movs	r0, r5
 8008224:	f000 f8d4 	bl	80083d0 <__malloc_lock>
 8008228:	4a1d      	ldr	r2, [pc, #116]	; (80082a0 <_free_r+0x90>)
 800822a:	6813      	ldr	r3, [r2, #0]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d105      	bne.n	800823c <_free_r+0x2c>
 8008230:	6063      	str	r3, [r4, #4]
 8008232:	6014      	str	r4, [r2, #0]
 8008234:	0028      	movs	r0, r5
 8008236:	f000 f8cc 	bl	80083d2 <__malloc_unlock>
 800823a:	bd70      	pop	{r4, r5, r6, pc}
 800823c:	42a3      	cmp	r3, r4
 800823e:	d909      	bls.n	8008254 <_free_r+0x44>
 8008240:	6821      	ldr	r1, [r4, #0]
 8008242:	1860      	adds	r0, r4, r1
 8008244:	4283      	cmp	r3, r0
 8008246:	d1f3      	bne.n	8008230 <_free_r+0x20>
 8008248:	6818      	ldr	r0, [r3, #0]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	1841      	adds	r1, r0, r1
 800824e:	6021      	str	r1, [r4, #0]
 8008250:	e7ee      	b.n	8008230 <_free_r+0x20>
 8008252:	0013      	movs	r3, r2
 8008254:	685a      	ldr	r2, [r3, #4]
 8008256:	2a00      	cmp	r2, #0
 8008258:	d001      	beq.n	800825e <_free_r+0x4e>
 800825a:	42a2      	cmp	r2, r4
 800825c:	d9f9      	bls.n	8008252 <_free_r+0x42>
 800825e:	6819      	ldr	r1, [r3, #0]
 8008260:	1858      	adds	r0, r3, r1
 8008262:	42a0      	cmp	r0, r4
 8008264:	d10b      	bne.n	800827e <_free_r+0x6e>
 8008266:	6820      	ldr	r0, [r4, #0]
 8008268:	1809      	adds	r1, r1, r0
 800826a:	1858      	adds	r0, r3, r1
 800826c:	6019      	str	r1, [r3, #0]
 800826e:	4282      	cmp	r2, r0
 8008270:	d1e0      	bne.n	8008234 <_free_r+0x24>
 8008272:	6810      	ldr	r0, [r2, #0]
 8008274:	6852      	ldr	r2, [r2, #4]
 8008276:	1841      	adds	r1, r0, r1
 8008278:	6019      	str	r1, [r3, #0]
 800827a:	605a      	str	r2, [r3, #4]
 800827c:	e7da      	b.n	8008234 <_free_r+0x24>
 800827e:	42a0      	cmp	r0, r4
 8008280:	d902      	bls.n	8008288 <_free_r+0x78>
 8008282:	230c      	movs	r3, #12
 8008284:	602b      	str	r3, [r5, #0]
 8008286:	e7d5      	b.n	8008234 <_free_r+0x24>
 8008288:	6821      	ldr	r1, [r4, #0]
 800828a:	1860      	adds	r0, r4, r1
 800828c:	4282      	cmp	r2, r0
 800828e:	d103      	bne.n	8008298 <_free_r+0x88>
 8008290:	6810      	ldr	r0, [r2, #0]
 8008292:	6852      	ldr	r2, [r2, #4]
 8008294:	1841      	adds	r1, r0, r1
 8008296:	6021      	str	r1, [r4, #0]
 8008298:	6062      	str	r2, [r4, #4]
 800829a:	605c      	str	r4, [r3, #4]
 800829c:	e7ca      	b.n	8008234 <_free_r+0x24>
 800829e:	46c0      	nop			; (mov r8, r8)
 80082a0:	2000010c 	.word	0x2000010c

080082a4 <_malloc_r>:
 80082a4:	2303      	movs	r3, #3
 80082a6:	b570      	push	{r4, r5, r6, lr}
 80082a8:	1ccd      	adds	r5, r1, #3
 80082aa:	439d      	bics	r5, r3
 80082ac:	3508      	adds	r5, #8
 80082ae:	0006      	movs	r6, r0
 80082b0:	2d0c      	cmp	r5, #12
 80082b2:	d21e      	bcs.n	80082f2 <_malloc_r+0x4e>
 80082b4:	250c      	movs	r5, #12
 80082b6:	42a9      	cmp	r1, r5
 80082b8:	d81d      	bhi.n	80082f6 <_malloc_r+0x52>
 80082ba:	0030      	movs	r0, r6
 80082bc:	f000 f888 	bl	80083d0 <__malloc_lock>
 80082c0:	4a25      	ldr	r2, [pc, #148]	; (8008358 <_malloc_r+0xb4>)
 80082c2:	6814      	ldr	r4, [r2, #0]
 80082c4:	0021      	movs	r1, r4
 80082c6:	2900      	cmp	r1, #0
 80082c8:	d119      	bne.n	80082fe <_malloc_r+0x5a>
 80082ca:	4c24      	ldr	r4, [pc, #144]	; (800835c <_malloc_r+0xb8>)
 80082cc:	6823      	ldr	r3, [r4, #0]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d103      	bne.n	80082da <_malloc_r+0x36>
 80082d2:	0030      	movs	r0, r6
 80082d4:	f000 f86a 	bl	80083ac <_sbrk_r>
 80082d8:	6020      	str	r0, [r4, #0]
 80082da:	0029      	movs	r1, r5
 80082dc:	0030      	movs	r0, r6
 80082de:	f000 f865 	bl	80083ac <_sbrk_r>
 80082e2:	1c43      	adds	r3, r0, #1
 80082e4:	d12b      	bne.n	800833e <_malloc_r+0x9a>
 80082e6:	230c      	movs	r3, #12
 80082e8:	0030      	movs	r0, r6
 80082ea:	6033      	str	r3, [r6, #0]
 80082ec:	f000 f871 	bl	80083d2 <__malloc_unlock>
 80082f0:	e003      	b.n	80082fa <_malloc_r+0x56>
 80082f2:	2d00      	cmp	r5, #0
 80082f4:	dadf      	bge.n	80082b6 <_malloc_r+0x12>
 80082f6:	230c      	movs	r3, #12
 80082f8:	6033      	str	r3, [r6, #0]
 80082fa:	2000      	movs	r0, #0
 80082fc:	bd70      	pop	{r4, r5, r6, pc}
 80082fe:	680b      	ldr	r3, [r1, #0]
 8008300:	1b5b      	subs	r3, r3, r5
 8008302:	d419      	bmi.n	8008338 <_malloc_r+0x94>
 8008304:	2b0b      	cmp	r3, #11
 8008306:	d903      	bls.n	8008310 <_malloc_r+0x6c>
 8008308:	600b      	str	r3, [r1, #0]
 800830a:	18cc      	adds	r4, r1, r3
 800830c:	6025      	str	r5, [r4, #0]
 800830e:	e003      	b.n	8008318 <_malloc_r+0x74>
 8008310:	684b      	ldr	r3, [r1, #4]
 8008312:	428c      	cmp	r4, r1
 8008314:	d10d      	bne.n	8008332 <_malloc_r+0x8e>
 8008316:	6013      	str	r3, [r2, #0]
 8008318:	0030      	movs	r0, r6
 800831a:	f000 f85a 	bl	80083d2 <__malloc_unlock>
 800831e:	0020      	movs	r0, r4
 8008320:	2207      	movs	r2, #7
 8008322:	300b      	adds	r0, #11
 8008324:	1d23      	adds	r3, r4, #4
 8008326:	4390      	bics	r0, r2
 8008328:	1ac3      	subs	r3, r0, r3
 800832a:	d0e7      	beq.n	80082fc <_malloc_r+0x58>
 800832c:	425a      	negs	r2, r3
 800832e:	50e2      	str	r2, [r4, r3]
 8008330:	e7e4      	b.n	80082fc <_malloc_r+0x58>
 8008332:	6063      	str	r3, [r4, #4]
 8008334:	000c      	movs	r4, r1
 8008336:	e7ef      	b.n	8008318 <_malloc_r+0x74>
 8008338:	000c      	movs	r4, r1
 800833a:	6849      	ldr	r1, [r1, #4]
 800833c:	e7c3      	b.n	80082c6 <_malloc_r+0x22>
 800833e:	2303      	movs	r3, #3
 8008340:	1cc4      	adds	r4, r0, #3
 8008342:	439c      	bics	r4, r3
 8008344:	42a0      	cmp	r0, r4
 8008346:	d0e1      	beq.n	800830c <_malloc_r+0x68>
 8008348:	1a21      	subs	r1, r4, r0
 800834a:	0030      	movs	r0, r6
 800834c:	f000 f82e 	bl	80083ac <_sbrk_r>
 8008350:	1c43      	adds	r3, r0, #1
 8008352:	d1db      	bne.n	800830c <_malloc_r+0x68>
 8008354:	e7c7      	b.n	80082e6 <_malloc_r+0x42>
 8008356:	46c0      	nop			; (mov r8, r8)
 8008358:	2000010c 	.word	0x2000010c
 800835c:	20000110 	.word	0x20000110

08008360 <_realloc_r>:
 8008360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008362:	0007      	movs	r7, r0
 8008364:	000d      	movs	r5, r1
 8008366:	0016      	movs	r6, r2
 8008368:	2900      	cmp	r1, #0
 800836a:	d105      	bne.n	8008378 <_realloc_r+0x18>
 800836c:	0011      	movs	r1, r2
 800836e:	f7ff ff99 	bl	80082a4 <_malloc_r>
 8008372:	0004      	movs	r4, r0
 8008374:	0020      	movs	r0, r4
 8008376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008378:	2a00      	cmp	r2, #0
 800837a:	d103      	bne.n	8008384 <_realloc_r+0x24>
 800837c:	f7ff ff48 	bl	8008210 <_free_r>
 8008380:	0034      	movs	r4, r6
 8008382:	e7f7      	b.n	8008374 <_realloc_r+0x14>
 8008384:	f000 f826 	bl	80083d4 <_malloc_usable_size_r>
 8008388:	002c      	movs	r4, r5
 800838a:	42b0      	cmp	r0, r6
 800838c:	d2f2      	bcs.n	8008374 <_realloc_r+0x14>
 800838e:	0031      	movs	r1, r6
 8008390:	0038      	movs	r0, r7
 8008392:	f7ff ff87 	bl	80082a4 <_malloc_r>
 8008396:	1e04      	subs	r4, r0, #0
 8008398:	d0ec      	beq.n	8008374 <_realloc_r+0x14>
 800839a:	0029      	movs	r1, r5
 800839c:	0032      	movs	r2, r6
 800839e:	f7ff fc11 	bl	8007bc4 <memcpy>
 80083a2:	0029      	movs	r1, r5
 80083a4:	0038      	movs	r0, r7
 80083a6:	f7ff ff33 	bl	8008210 <_free_r>
 80083aa:	e7e3      	b.n	8008374 <_realloc_r+0x14>

080083ac <_sbrk_r>:
 80083ac:	2300      	movs	r3, #0
 80083ae:	b570      	push	{r4, r5, r6, lr}
 80083b0:	4c06      	ldr	r4, [pc, #24]	; (80083cc <_sbrk_r+0x20>)
 80083b2:	0005      	movs	r5, r0
 80083b4:	0008      	movs	r0, r1
 80083b6:	6023      	str	r3, [r4, #0]
 80083b8:	f7fb face 	bl	8003958 <_sbrk>
 80083bc:	1c43      	adds	r3, r0, #1
 80083be:	d103      	bne.n	80083c8 <_sbrk_r+0x1c>
 80083c0:	6823      	ldr	r3, [r4, #0]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d000      	beq.n	80083c8 <_sbrk_r+0x1c>
 80083c6:	602b      	str	r3, [r5, #0]
 80083c8:	bd70      	pop	{r4, r5, r6, pc}
 80083ca:	46c0      	nop			; (mov r8, r8)
 80083cc:	2000033c 	.word	0x2000033c

080083d0 <__malloc_lock>:
 80083d0:	4770      	bx	lr

080083d2 <__malloc_unlock>:
 80083d2:	4770      	bx	lr

080083d4 <_malloc_usable_size_r>:
 80083d4:	1f0b      	subs	r3, r1, #4
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	1f18      	subs	r0, r3, #4
 80083da:	2b00      	cmp	r3, #0
 80083dc:	da01      	bge.n	80083e2 <_malloc_usable_size_r+0xe>
 80083de:	580b      	ldr	r3, [r1, r0]
 80083e0:	18c0      	adds	r0, r0, r3
 80083e2:	4770      	bx	lr

080083e4 <_init>:
 80083e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083e6:	46c0      	nop			; (mov r8, r8)
 80083e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ea:	bc08      	pop	{r3}
 80083ec:	469e      	mov	lr, r3
 80083ee:	4770      	bx	lr

080083f0 <_fini>:
 80083f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083f2:	46c0      	nop			; (mov r8, r8)
 80083f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083f6:	bc08      	pop	{r3}
 80083f8:	469e      	mov	lr, r3
 80083fa:	4770      	bx	lr
