
project_L0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008dd4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000804  08008e94  08008e94  00018e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009698  08009698  000200cc  2**0
                  CONTENTS
  4 .ARM          00000000  08009698  08009698  000200cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009698  08009698  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009698  08009698  00019698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800969c  0800969c  0001969c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  080096a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  200000cc  0800976c  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ac  0800976c  000203ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017de0  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ebd  00000000  00000000  00037ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001258  00000000  00000000  0003ad98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010c8  00000000  00000000  0003bff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017d8d  00000000  00000000  0003d0b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fe25  00000000  00000000  00054e45  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d2c2  00000000  00000000  00064c6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f1f2c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004428  00000000  00000000  000f1fa8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000cc 	.word	0x200000cc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008e7c 	.word	0x08008e7c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000d0 	.word	0x200000d0
 8000104:	08008e7c 	.word	0x08008e7c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <SPI_CS_LOW>:
static uint8_t textSize;
static uint16_t textColor;
static uint16_t bg;

// ---- lower level functions ----
void SPI_CS_LOW() {HAL_GPIO_WritePin(CS_GPIO, CS_PIN, GPIO_PIN_RESET);}
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
 8000408:	4b04      	ldr	r3, [pc, #16]	; (800041c <SPI_CS_LOW+0x18>)
 800040a:	2200      	movs	r2, #0
 800040c:	2180      	movs	r1, #128	; 0x80
 800040e:	0018      	movs	r0, r3
 8000410:	f004 ff2b 	bl	800526a <HAL_GPIO_WritePin>
 8000414:	46c0      	nop			; (mov r8, r8)
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	46c0      	nop			; (mov r8, r8)
 800041c:	50000800 	.word	0x50000800

08000420 <SPI_CS_HIGH>:

void SPI_CS_HIGH() {HAL_GPIO_WritePin(CS_GPIO, CS_PIN, GPIO_PIN_SET);}
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
 8000424:	4b04      	ldr	r3, [pc, #16]	; (8000438 <SPI_CS_HIGH+0x18>)
 8000426:	2201      	movs	r2, #1
 8000428:	2180      	movs	r1, #128	; 0x80
 800042a:	0018      	movs	r0, r3
 800042c:	f004 ff1d 	bl	800526a <HAL_GPIO_WritePin>
 8000430:	46c0      	nop			; (mov r8, r8)
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	50000800 	.word	0x50000800

0800043c <SPI_DC_LOW>:

void SPI_DC_LOW() {HAL_GPIO_WritePin(DC_GPIO, DC_PIN, GPIO_PIN_RESET);}
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
 8000440:	4b04      	ldr	r3, [pc, #16]	; (8000454 <SPI_DC_LOW+0x18>)
 8000442:	2200      	movs	r2, #0
 8000444:	2140      	movs	r1, #64	; 0x40
 8000446:	0018      	movs	r0, r3
 8000448:	f004 ff0f 	bl	800526a <HAL_GPIO_WritePin>
 800044c:	46c0      	nop			; (mov r8, r8)
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	46c0      	nop			; (mov r8, r8)
 8000454:	50000400 	.word	0x50000400

08000458 <SPI_DC_HIGH>:

void SPI_DC_HIGH() {HAL_GPIO_WritePin(DC_GPIO, DC_PIN, GPIO_PIN_SET);}
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
 800045c:	4b04      	ldr	r3, [pc, #16]	; (8000470 <SPI_DC_HIGH+0x18>)
 800045e:	2201      	movs	r2, #1
 8000460:	2140      	movs	r1, #64	; 0x40
 8000462:	0018      	movs	r0, r3
 8000464:	f004 ff01 	bl	800526a <HAL_GPIO_WritePin>
 8000468:	46c0      	nop			; (mov r8, r8)
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	50000400 	.word	0x50000400

08000474 <sendCommand>:

// still ripped but now im changing it
void sendCommand(uint8_t cmd, uint8_t *args, uint16_t numArgs, SPI_HandleTypeDef *hspi) {
 8000474:	b580      	push	{r7, lr}
 8000476:	b084      	sub	sp, #16
 8000478:	af00      	add	r7, sp, #0
 800047a:	60b9      	str	r1, [r7, #8]
 800047c:	0011      	movs	r1, r2
 800047e:	607b      	str	r3, [r7, #4]
 8000480:	230f      	movs	r3, #15
 8000482:	18fb      	adds	r3, r7, r3
 8000484:	1c02      	adds	r2, r0, #0
 8000486:	701a      	strb	r2, [r3, #0]
 8000488:	230c      	movs	r3, #12
 800048a:	18fb      	adds	r3, r7, r3
 800048c:	1c0a      	adds	r2, r1, #0
 800048e:	801a      	strh	r2, [r3, #0]
	while (HAL_SPI_GetState(hspi) == HAL_SPI_STATE_BUSY_TX);		// block next transfer request while DMA transfer is ongoing
 8000490:	46c0      	nop			; (mov r8, r8)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	0018      	movs	r0, r3
 8000496:	f007 f865 	bl	8007564 <HAL_SPI_GetState>
 800049a:	0003      	movs	r3, r0
 800049c:	2b03      	cmp	r3, #3
 800049e:	d0f8      	beq.n	8000492 <sendCommand+0x1e>
	SPI_CS_LOW();	// chip select
 80004a0:	f7ff ffb0 	bl	8000404 <SPI_CS_LOW>

	SPI_DC_LOW();	// command mode
 80004a4:	f7ff ffca 	bl	800043c <SPI_DC_LOW>
	HAL_SPI_Transmit(hspi, &cmd, 1, 1000);	// not using DMA bc it's only 1 byte
 80004a8:	23fa      	movs	r3, #250	; 0xfa
 80004aa:	009b      	lsls	r3, r3, #2
 80004ac:	220f      	movs	r2, #15
 80004ae:	18b9      	adds	r1, r7, r2
 80004b0:	6878      	ldr	r0, [r7, #4]
 80004b2:	2201      	movs	r2, #1
 80004b4:	f006 fd74 	bl	8006fa0 <HAL_SPI_Transmit>

	SPI_DC_HIGH();	// data mode
 80004b8:	f7ff ffce 	bl	8000458 <SPI_DC_HIGH>
	if (numArgs) {
 80004bc:	230c      	movs	r3, #12
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	881b      	ldrh	r3, [r3, #0]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d007      	beq.n	80004d6 <sendCommand+0x62>
		HAL_SPI_Transmit_IT(hspi, args, numArgs);
 80004c6:	230c      	movs	r3, #12
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	881a      	ldrh	r2, [r3, #0]
 80004cc:	68b9      	ldr	r1, [r7, #8]
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	0018      	movs	r0, r3
 80004d2:	f006 feb3 	bl	800723c <HAL_SPI_Transmit_IT>
//		HAL_SPI_Transmit_DMA(hspi, args, numArgs);
	}

//	SPI_CS_HIGH();	// chip select disable
}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	46bd      	mov	sp, r7
 80004da:	b004      	add	sp, #16
 80004dc:	bd80      	pop	{r7, pc}
	...

080004e0 <HAL_SPI_TxCpltCallback>:

// DMA callback on transfer compelete
// using only for sending data, but not commands
// dont send request when transfer is ongoing
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(CS_GPIO, CS_PIN) == GPIO_PIN_RESET) SPI_CS_HIGH();	// chip select disable
 80004e8:	4b06      	ldr	r3, [pc, #24]	; (8000504 <HAL_SPI_TxCpltCallback+0x24>)
 80004ea:	2180      	movs	r1, #128	; 0x80
 80004ec:	0018      	movs	r0, r3
 80004ee:	f004 fe9f 	bl	8005230 <HAL_GPIO_ReadPin>
 80004f2:	1e03      	subs	r3, r0, #0
 80004f4:	d101      	bne.n	80004fa <HAL_SPI_TxCpltCallback+0x1a>
 80004f6:	f7ff ff93 	bl	8000420 <SPI_CS_HIGH>
}
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	46bd      	mov	sp, r7
 80004fe:	b002      	add	sp, #8
 8000500:	bd80      	pop	{r7, pc}
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	50000800 	.word	0x50000800

08000508 <displayInit>:

// array parser heavily based on Adafruit library code
void displayInit(uint8_t *args, SPI_HandleTypeDef *hspi) {
 8000508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	6039      	str	r1, [r7, #0]
	uint8_t  numCommands, cmd, numArgs;
	uint16_t ms;
	uint8_t index = 0;
 8000512:	220b      	movs	r2, #11
 8000514:	0011      	movs	r1, r2
 8000516:	18bb      	adds	r3, r7, r2
 8000518:	2200      	movs	r2, #0
 800051a:	701a      	strb	r2, [r3, #0]
	uint8_t data;

	numCommands = args[index++];   // Number of commands to follow
 800051c:	000a      	movs	r2, r1
 800051e:	18bb      	adds	r3, r7, r2
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	18ba      	adds	r2, r7, r2
 8000524:	1c59      	adds	r1, r3, #1
 8000526:	7011      	strb	r1, [r2, #0]
 8000528:	001a      	movs	r2, r3
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	189a      	adds	r2, r3, r2
 800052e:	230f      	movs	r3, #15
 8000530:	18fb      	adds	r3, r7, r3
 8000532:	7812      	ldrb	r2, [r2, #0]
 8000534:	701a      	strb	r2, [r3, #0]
	while(numCommands--) {                 // For each command...
 8000536:	e05e      	b.n	80005f6 <displayInit+0xee>
		cmd = args[index++];         // Read command
 8000538:	200b      	movs	r0, #11
 800053a:	183b      	adds	r3, r7, r0
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	183a      	adds	r2, r7, r0
 8000540:	1c59      	adds	r1, r3, #1
 8000542:	7011      	strb	r1, [r2, #0]
 8000544:	001a      	movs	r2, r3
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	189a      	adds	r2, r3, r2
 800054a:	230a      	movs	r3, #10
 800054c:	18fb      	adds	r3, r7, r3
 800054e:	7812      	ldrb	r2, [r2, #0]
 8000550:	701a      	strb	r2, [r3, #0]
		numArgs  = args[index++];    // Number of args to follow
 8000552:	183b      	adds	r3, r7, r0
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	183a      	adds	r2, r7, r0
 8000558:	1c59      	adds	r1, r3, #1
 800055a:	7011      	strb	r1, [r2, #0]
 800055c:	001a      	movs	r2, r3
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	189a      	adds	r2, r3, r2
 8000562:	2609      	movs	r6, #9
 8000564:	19bb      	adds	r3, r7, r6
 8000566:	7812      	ldrb	r2, [r2, #0]
 8000568:	701a      	strb	r2, [r3, #0]
		ms       = numArgs & ST_CMD_DELAY;   // If hibit set, delay follows args
 800056a:	19bb      	adds	r3, r7, r6
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	b29a      	uxth	r2, r3
 8000570:	210c      	movs	r1, #12
 8000572:	187b      	adds	r3, r7, r1
 8000574:	2180      	movs	r1, #128	; 0x80
 8000576:	400a      	ands	r2, r1
 8000578:	801a      	strh	r2, [r3, #0]
		numArgs &= ~ST_CMD_DELAY;            // Mask out delay bit
 800057a:	19bb      	adds	r3, r7, r6
 800057c:	19ba      	adds	r2, r7, r6
 800057e:	7812      	ldrb	r2, [r2, #0]
 8000580:	217f      	movs	r1, #127	; 0x7f
 8000582:	400a      	ands	r2, r1
 8000584:	701a      	strb	r2, [r3, #0]
		sendCommand(cmd, &args[index], numArgs, hspi);
 8000586:	0005      	movs	r5, r0
 8000588:	183b      	adds	r3, r7, r0
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	687a      	ldr	r2, [r7, #4]
 800058e:	18d1      	adds	r1, r2, r3
 8000590:	19bb      	adds	r3, r7, r6
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	b29a      	uxth	r2, r3
 8000596:	683c      	ldr	r4, [r7, #0]
 8000598:	230a      	movs	r3, #10
 800059a:	18fb      	adds	r3, r7, r3
 800059c:	7818      	ldrb	r0, [r3, #0]
 800059e:	0023      	movs	r3, r4
 80005a0:	f7ff ff68 	bl	8000474 <sendCommand>
		index += numArgs;
 80005a4:	0028      	movs	r0, r5
 80005a6:	183b      	adds	r3, r7, r0
 80005a8:	1839      	adds	r1, r7, r0
 80005aa:	19ba      	adds	r2, r7, r6
 80005ac:	7809      	ldrb	r1, [r1, #0]
 80005ae:	7812      	ldrb	r2, [r2, #0]
 80005b0:	188a      	adds	r2, r1, r2
 80005b2:	701a      	strb	r2, [r3, #0]

		if(ms) {
 80005b4:	210c      	movs	r1, #12
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	881b      	ldrh	r3, [r3, #0]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d01b      	beq.n	80005f6 <displayInit+0xee>
			ms = args[index++]; // Read post-command delay time (ms)
 80005be:	220b      	movs	r2, #11
 80005c0:	18bb      	adds	r3, r7, r2
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	18ba      	adds	r2, r7, r2
 80005c6:	1c59      	adds	r1, r3, #1
 80005c8:	7011      	strb	r1, [r2, #0]
 80005ca:	001a      	movs	r2, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	189b      	adds	r3, r3, r2
 80005d0:	781a      	ldrb	r2, [r3, #0]
 80005d2:	210c      	movs	r1, #12
 80005d4:	187b      	adds	r3, r7, r1
 80005d6:	801a      	strh	r2, [r3, #0]
			if(ms == 255) ms = 500;     // If 255, delay for 500 ms
 80005d8:	187b      	adds	r3, r7, r1
 80005da:	881b      	ldrh	r3, [r3, #0]
 80005dc:	2bff      	cmp	r3, #255	; 0xff
 80005de:	d104      	bne.n	80005ea <displayInit+0xe2>
 80005e0:	230c      	movs	r3, #12
 80005e2:	18fb      	adds	r3, r7, r3
 80005e4:	22fa      	movs	r2, #250	; 0xfa
 80005e6:	0052      	lsls	r2, r2, #1
 80005e8:	801a      	strh	r2, [r3, #0]
			HAL_Delay(ms);
 80005ea:	230c      	movs	r3, #12
 80005ec:	18fb      	adds	r3, r7, r3
 80005ee:	881b      	ldrh	r3, [r3, #0]
 80005f0:	0018      	movs	r0, r3
 80005f2:	f003 ffb7 	bl	8004564 <HAL_Delay>
	while(numCommands--) {                 // For each command...
 80005f6:	220f      	movs	r2, #15
 80005f8:	18bb      	adds	r3, r7, r2
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	18ba      	adds	r2, r7, r2
 80005fe:	1e59      	subs	r1, r3, #1
 8000600:	7011      	strb	r1, [r2, #0]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d198      	bne.n	8000538 <displayInit+0x30>
		}
	}

	// note: this line may be doing more work than I think
	// (hard to read in datasheet)
	data = 0xC0;
 8000606:	2108      	movs	r1, #8
 8000608:	187b      	adds	r3, r7, r1
 800060a:	22c0      	movs	r2, #192	; 0xc0
 800060c:	701a      	strb	r2, [r3, #0]
	sendCommand(ST77XX_MADCTL, &data, 1, hspi);
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	1879      	adds	r1, r7, r1
 8000612:	2201      	movs	r2, #1
 8000614:	2036      	movs	r0, #54	; 0x36
 8000616:	f7ff ff2d 	bl	8000474 <sendCommand>
}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	46bd      	mov	sp, r7
 800061e:	b005      	add	sp, #20
 8000620:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000624 <TFT_startup>:

void TFT_startup(SPI_HandleTypeDef *hspi) {
 8000624:	b590      	push	{r4, r7, lr}
 8000626:	b0a3      	sub	sp, #140	; 0x8c
 8000628:	af02      	add	r7, sp, #8
 800062a:	6078      	str	r0, [r7, #4]
	// startup sequence: rcmd1->rcmd2red->rcmd3
	uint8_t initCommands[] = {
 800062c:	240c      	movs	r4, #12
 800062e:	193a      	adds	r2, r7, r4
 8000630:	4b14      	ldr	r3, [pc, #80]	; (8000684 <TFT_startup+0x60>)
 8000632:	0010      	movs	r0, r2
 8000634:	0019      	movs	r1, r3
 8000636:	2371      	movs	r3, #113	; 0x71
 8000638:	001a      	movs	r2, r3
 800063a:	f008 f801 	bl	8008640 <memcpy>
			10,                           //     10 ms delay
		ST77XX_DISPON,    ST_CMD_DELAY, //  4: Main screen turn on, no args w/delay
			100	                        //     100 ms delay
	};

	displayInit(initCommands, hspi);
 800063e:	687a      	ldr	r2, [r7, #4]
 8000640:	193b      	adds	r3, r7, r4
 8000642:	0011      	movs	r1, r2
 8000644:	0018      	movs	r0, r3
 8000646:	f7ff ff5f 	bl	8000508 <displayInit>
	setAddrWindow(0, 0, WIDTH, HEIGHT, hspi);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	23a0      	movs	r3, #160	; 0xa0
 8000650:	2280      	movs	r2, #128	; 0x80
 8000652:	2100      	movs	r1, #0
 8000654:	2000      	movs	r0, #0
 8000656:	f000 f821 	bl	800069c <setAddrWindow>

	// set the global variables
	cursorX = 0;
 800065a:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <TFT_startup+0x64>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	cursorY = 0;
 8000660:	4b0a      	ldr	r3, [pc, #40]	; (800068c <TFT_startup+0x68>)
 8000662:	2200      	movs	r2, #0
 8000664:	701a      	strb	r2, [r3, #0]
	textSize = 1;
 8000666:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <TFT_startup+0x6c>)
 8000668:	2201      	movs	r2, #1
 800066a:	701a      	strb	r2, [r3, #0]
	textColor = ST77XX_BLACK;
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <TFT_startup+0x70>)
 800066e:	2200      	movs	r2, #0
 8000670:	801a      	strh	r2, [r3, #0]
	bg = ST77XX_WHITE;
 8000672:	4b09      	ldr	r3, [pc, #36]	; (8000698 <TFT_startup+0x74>)
 8000674:	2201      	movs	r2, #1
 8000676:	4252      	negs	r2, r2
 8000678:	801a      	strh	r2, [r3, #0]
}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	46bd      	mov	sp, r7
 800067e:	b021      	add	sp, #132	; 0x84
 8000680:	bd90      	pop	{r4, r7, pc}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	08008e94 	.word	0x08008e94
 8000688:	200000e8 	.word	0x200000e8
 800068c:	200000e9 	.word	0x200000e9
 8000690:	200000ea 	.word	0x200000ea
 8000694:	200000ec 	.word	0x200000ec
 8000698:	200000ee 	.word	0x200000ee

0800069c <setAddrWindow>:

// draw something: set addr window -> write to ram memory
// sets specific area on display to write pixels to
// x and y for upper left corner, w for width, h for height
void setAddrWindow(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SPI_HandleTypeDef *hspi) {
 800069c:	b5b0      	push	{r4, r5, r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	0005      	movs	r5, r0
 80006a4:	000c      	movs	r4, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	1dbb      	adds	r3, r7, #6
 80006ac:	1c2a      	adds	r2, r5, #0
 80006ae:	801a      	strh	r2, [r3, #0]
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	1c22      	adds	r2, r4, #0
 80006b4:	801a      	strh	r2, [r3, #0]
 80006b6:	1cbb      	adds	r3, r7, #2
 80006b8:	1c02      	adds	r2, r0, #0
 80006ba:	801a      	strh	r2, [r3, #0]
 80006bc:	003b      	movs	r3, r7
 80006be:	1c0a      	adds	r2, r1, #0
 80006c0:	801a      	strh	r2, [r3, #0]
	// not really needed for our display
	x += _xstart;
 80006c2:	1dbb      	adds	r3, r7, #6
 80006c4:	1dba      	adds	r2, r7, #6
 80006c6:	8812      	ldrh	r2, [r2, #0]
 80006c8:	801a      	strh	r2, [r3, #0]
	y += _ystart;
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	1d3a      	adds	r2, r7, #4
 80006ce:	8812      	ldrh	r2, [r2, #0]
 80006d0:	801a      	strh	r2, [r3, #0]

	uint8_t temp[4];
	temp[0] = (x & (0xFF00)) >> 8;
 80006d2:	1dbb      	adds	r3, r7, #6
 80006d4:	881b      	ldrh	r3, [r3, #0]
 80006d6:	0a1b      	lsrs	r3, r3, #8
 80006d8:	b29b      	uxth	r3, r3
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	210c      	movs	r1, #12
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	701a      	strb	r2, [r3, #0]
	temp[1] = x & (0xFF);
 80006e2:	1dbb      	adds	r3, r7, #6
 80006e4:	881b      	ldrh	r3, [r3, #0]
 80006e6:	b2da      	uxtb	r2, r3
 80006e8:	187b      	adds	r3, r7, r1
 80006ea:	705a      	strb	r2, [r3, #1]
	temp[2] = ((x+w-1) & (0xFF00)) >> 8;
 80006ec:	1dbb      	adds	r3, r7, #6
 80006ee:	881a      	ldrh	r2, [r3, #0]
 80006f0:	1cbb      	adds	r3, r7, #2
 80006f2:	881b      	ldrh	r3, [r3, #0]
 80006f4:	18d3      	adds	r3, r2, r3
 80006f6:	3b01      	subs	r3, #1
 80006f8:	121b      	asrs	r3, r3, #8
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	187b      	adds	r3, r7, r1
 80006fe:	709a      	strb	r2, [r3, #2]
	temp[3] = (x+w-1) & (0xFF);
 8000700:	1dbb      	adds	r3, r7, #6
 8000702:	881b      	ldrh	r3, [r3, #0]
 8000704:	b2da      	uxtb	r2, r3
 8000706:	1cbb      	adds	r3, r7, #2
 8000708:	881b      	ldrh	r3, [r3, #0]
 800070a:	b2db      	uxtb	r3, r3
 800070c:	18d3      	adds	r3, r2, r3
 800070e:	b2db      	uxtb	r3, r3
 8000710:	3b01      	subs	r3, #1
 8000712:	b2da      	uxtb	r2, r3
 8000714:	187b      	adds	r3, r7, r1
 8000716:	70da      	strb	r2, [r3, #3]
	sendCommand(ST77XX_CASET, temp, 4, hspi);
 8000718:	6a3b      	ldr	r3, [r7, #32]
 800071a:	000c      	movs	r4, r1
 800071c:	1879      	adds	r1, r7, r1
 800071e:	2204      	movs	r2, #4
 8000720:	202a      	movs	r0, #42	; 0x2a
 8000722:	f7ff fea7 	bl	8000474 <sendCommand>

	temp[0] = (y & (0xFF00)) >> 8;
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	881b      	ldrh	r3, [r3, #0]
 800072a:	0a1b      	lsrs	r3, r3, #8
 800072c:	b29b      	uxth	r3, r3
 800072e:	b2da      	uxtb	r2, r3
 8000730:	0021      	movs	r1, r4
 8000732:	187b      	adds	r3, r7, r1
 8000734:	701a      	strb	r2, [r3, #0]
	temp[1] = y & (0xFF);
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	881b      	ldrh	r3, [r3, #0]
 800073a:	b2da      	uxtb	r2, r3
 800073c:	187b      	adds	r3, r7, r1
 800073e:	705a      	strb	r2, [r3, #1]
	temp[2] = ((y+h-1) & (0xFF00)) >> 8;
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	881a      	ldrh	r2, [r3, #0]
 8000744:	003b      	movs	r3, r7
 8000746:	881b      	ldrh	r3, [r3, #0]
 8000748:	18d3      	adds	r3, r2, r3
 800074a:	3b01      	subs	r3, #1
 800074c:	121b      	asrs	r3, r3, #8
 800074e:	b2da      	uxtb	r2, r3
 8000750:	187b      	adds	r3, r7, r1
 8000752:	709a      	strb	r2, [r3, #2]
	temp[3] = (y+h-1) & (0x00FF);
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	b2da      	uxtb	r2, r3
 800075a:	003b      	movs	r3, r7
 800075c:	881b      	ldrh	r3, [r3, #0]
 800075e:	b2db      	uxtb	r3, r3
 8000760:	18d3      	adds	r3, r2, r3
 8000762:	b2db      	uxtb	r3, r3
 8000764:	3b01      	subs	r3, #1
 8000766:	b2da      	uxtb	r2, r3
 8000768:	187b      	adds	r3, r7, r1
 800076a:	70da      	strb	r2, [r3, #3]
	sendCommand(ST77XX_RASET, temp, 4, hspi);
 800076c:	6a3b      	ldr	r3, [r7, #32]
 800076e:	1879      	adds	r1, r7, r1
 8000770:	2204      	movs	r2, #4
 8000772:	202b      	movs	r0, #43	; 0x2b
 8000774:	f7ff fe7e 	bl	8000474 <sendCommand>
}
 8000778:	46c0      	nop			; (mov r8, r8)
 800077a:	46bd      	mov	sp, r7
 800077c:	b004      	add	sp, #16
 800077e:	bdb0      	pop	{r4, r5, r7, pc}

08000780 <colorFixer>:
// 8-bit spi bus wants msb first; in array, lowest index is sent first
// because L4 is little-endian
//   for 16-bit value, it sends lower byte before upper byte
//   resulting in device thinking lower byte is upper byte
// this switches byte order around
uint16_t colorFixer(uint16_t color) {
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	0002      	movs	r2, r0
 8000788:	1dbb      	adds	r3, r7, #6
 800078a:	801a      	strh	r2, [r3, #0]
	uint8_t a = color & 0xFF;
 800078c:	210f      	movs	r1, #15
 800078e:	187b      	adds	r3, r7, r1
 8000790:	1dba      	adds	r2, r7, #6
 8000792:	8812      	ldrh	r2, [r2, #0]
 8000794:	701a      	strb	r2, [r3, #0]
	uint8_t b = (color & 0xFF00) >> 8;
 8000796:	1dbb      	adds	r3, r7, #6
 8000798:	881b      	ldrh	r3, [r3, #0]
 800079a:	0a1b      	lsrs	r3, r3, #8
 800079c:	b29a      	uxth	r2, r3
 800079e:	200e      	movs	r0, #14
 80007a0:	183b      	adds	r3, r7, r0
 80007a2:	701a      	strb	r2, [r3, #0]
	uint16_t ret = (a << 8) | b;
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	021b      	lsls	r3, r3, #8
 80007aa:	b21a      	sxth	r2, r3
 80007ac:	183b      	adds	r3, r7, r0
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	b21b      	sxth	r3, r3
 80007b2:	4313      	orrs	r3, r2
 80007b4:	b21a      	sxth	r2, r3
 80007b6:	210c      	movs	r1, #12
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	801a      	strh	r2, [r3, #0]

	return ret;
 80007bc:	187b      	adds	r3, r7, r1
 80007be:	881b      	ldrh	r3, [r3, #0]
}
 80007c0:	0018      	movs	r0, r3
 80007c2:	46bd      	mov	sp, r7
 80007c4:	b004      	add	sp, #16
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <drawHLine>:
	setAddrWindow(x, y, 1, 1, hspi);
	uint16_t tempColor = colorFixer(color);		// else we're using address of something passed by value
	sendCommand(ST77XX_RAMWR, &tempColor, 2, hspi);
}

void drawHLine(uint8_t x, uint8_t y, uint8_t size, uint16_t color, SPI_HandleTypeDef *hspi) {
 80007c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ca:	b091      	sub	sp, #68	; 0x44
 80007cc:	af02      	add	r7, sp, #8
 80007ce:	000c      	movs	r4, r1
 80007d0:	0016      	movs	r6, r2
 80007d2:	0019      	movs	r1, r3
 80007d4:	2327      	movs	r3, #39	; 0x27
 80007d6:	18fa      	adds	r2, r7, r3
 80007d8:	1c03      	adds	r3, r0, #0
 80007da:	7013      	strb	r3, [r2, #0]
 80007dc:	2326      	movs	r3, #38	; 0x26
 80007de:	18fb      	adds	r3, r7, r3
 80007e0:	1c22      	adds	r2, r4, #0
 80007e2:	701a      	strb	r2, [r3, #0]
 80007e4:	2325      	movs	r3, #37	; 0x25
 80007e6:	18fb      	adds	r3, r7, r3
 80007e8:	1c32      	adds	r2, r6, #0
 80007ea:	701a      	strb	r2, [r3, #0]
 80007ec:	2322      	movs	r3, #34	; 0x22
 80007ee:	18fb      	adds	r3, r7, r3
 80007f0:	1c0a      	adds	r2, r1, #0
 80007f2:	801a      	strh	r2, [r3, #0]
 80007f4:	466b      	mov	r3, sp
 80007f6:	001e      	movs	r6, r3
	// bounds checking
	if (x < 0) x = 0;						// don't set x out of bounds
	if (x > WIDTH) x = WIDTH;
 80007f8:	2327      	movs	r3, #39	; 0x27
 80007fa:	18fb      	adds	r3, r7, r3
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	2b80      	cmp	r3, #128	; 0x80
 8000800:	d903      	bls.n	800080a <drawHLine+0x42>
 8000802:	2327      	movs	r3, #39	; 0x27
 8000804:	18fb      	adds	r3, r7, r3
 8000806:	2280      	movs	r2, #128	; 0x80
 8000808:	701a      	strb	r2, [r3, #0]
	if (x+size > WIDTH) size = WIDTH-x;		// don't set size so line draws out of bounds
 800080a:	2327      	movs	r3, #39	; 0x27
 800080c:	18fb      	adds	r3, r7, r3
 800080e:	781a      	ldrb	r2, [r3, #0]
 8000810:	2325      	movs	r3, #37	; 0x25
 8000812:	18fb      	adds	r3, r7, r3
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	18d3      	adds	r3, r2, r3
 8000818:	2b80      	cmp	r3, #128	; 0x80
 800081a:	dd08      	ble.n	800082e <drawHLine+0x66>
 800081c:	2325      	movs	r3, #37	; 0x25
 800081e:	18fb      	adds	r3, r7, r3
 8000820:	2227      	movs	r2, #39	; 0x27
 8000822:	18ba      	adds	r2, r7, r2
 8000824:	7812      	ldrb	r2, [r2, #0]
 8000826:	2180      	movs	r1, #128	; 0x80
 8000828:	4249      	negs	r1, r1
 800082a:	1a8a      	subs	r2, r1, r2
 800082c:	701a      	strb	r2, [r3, #0]
	if (x+size < 0) size = 0-x;
	if ((y > HEIGHT) || (y < 0)) return;	// don't draw if y is out of bounds
 800082e:	2326      	movs	r3, #38	; 0x26
 8000830:	18fb      	adds	r3, r7, r3
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2ba0      	cmp	r3, #160	; 0xa0
 8000836:	d868      	bhi.n	800090a <drawHLine+0x142>

	setAddrWindow(x, y, size, 1, hspi);
 8000838:	2327      	movs	r3, #39	; 0x27
 800083a:	18fb      	adds	r3, r7, r3
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	b298      	uxth	r0, r3
 8000840:	2326      	movs	r3, #38	; 0x26
 8000842:	18fb      	adds	r3, r7, r3
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	b299      	uxth	r1, r3
 8000848:	2325      	movs	r3, #37	; 0x25
 800084a:	18fb      	adds	r3, r7, r3
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	b29a      	uxth	r2, r3
 8000850:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000852:	9300      	str	r3, [sp, #0]
 8000854:	2301      	movs	r3, #1
 8000856:	f7ff ff21 	bl	800069c <setAddrWindow>
	uint16_t colors[size];
 800085a:	2325      	movs	r3, #37	; 0x25
 800085c:	18fb      	adds	r3, r7, r3
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	001a      	movs	r2, r3
 8000862:	3a01      	subs	r2, #1
 8000864:	633a      	str	r2, [r7, #48]	; 0x30
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	2200      	movs	r2, #0
 800086a:	60fa      	str	r2, [r7, #12]
 800086c:	68b8      	ldr	r0, [r7, #8]
 800086e:	68f9      	ldr	r1, [r7, #12]
 8000870:	0002      	movs	r2, r0
 8000872:	0f12      	lsrs	r2, r2, #28
 8000874:	000c      	movs	r4, r1
 8000876:	0124      	lsls	r4, r4, #4
 8000878:	61fc      	str	r4, [r7, #28]
 800087a:	69fc      	ldr	r4, [r7, #28]
 800087c:	4314      	orrs	r4, r2
 800087e:	61fc      	str	r4, [r7, #28]
 8000880:	0002      	movs	r2, r0
 8000882:	0112      	lsls	r2, r2, #4
 8000884:	61ba      	str	r2, [r7, #24]
 8000886:	603b      	str	r3, [r7, #0]
 8000888:	2200      	movs	r2, #0
 800088a:	607a      	str	r2, [r7, #4]
 800088c:	6838      	ldr	r0, [r7, #0]
 800088e:	6879      	ldr	r1, [r7, #4]
 8000890:	0002      	movs	r2, r0
 8000892:	0f12      	lsrs	r2, r2, #28
 8000894:	000c      	movs	r4, r1
 8000896:	0124      	lsls	r4, r4, #4
 8000898:	617c      	str	r4, [r7, #20]
 800089a:	697c      	ldr	r4, [r7, #20]
 800089c:	4314      	orrs	r4, r2
 800089e:	617c      	str	r4, [r7, #20]
 80008a0:	0002      	movs	r2, r0
 80008a2:	0112      	lsls	r2, r2, #4
 80008a4:	613a      	str	r2, [r7, #16]
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	3301      	adds	r3, #1
 80008aa:	3307      	adds	r3, #7
 80008ac:	08db      	lsrs	r3, r3, #3
 80008ae:	00db      	lsls	r3, r3, #3
 80008b0:	466a      	mov	r2, sp
 80008b2:	1ad3      	subs	r3, r2, r3
 80008b4:	469d      	mov	sp, r3
 80008b6:	ab02      	add	r3, sp, #8
 80008b8:	3301      	adds	r3, #1
 80008ba:	085b      	lsrs	r3, r3, #1
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i < size; i++) {		// better way to make array of 1 color; SPI without moving address of sent?
 80008c0:	2300      	movs	r3, #0
 80008c2:	637b      	str	r3, [r7, #52]	; 0x34
 80008c4:	e00e      	b.n	80008e4 <drawHLine+0x11c>
		colors[i] = colorFixer(color);
 80008c6:	2322      	movs	r3, #34	; 0x22
 80008c8:	18fb      	adds	r3, r7, r3
 80008ca:	881b      	ldrh	r3, [r3, #0]
 80008cc:	0018      	movs	r0, r3
 80008ce:	f7ff ff57 	bl	8000780 <colorFixer>
 80008d2:	0003      	movs	r3, r0
 80008d4:	0019      	movs	r1, r3
 80008d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80008da:	0052      	lsls	r2, r2, #1
 80008dc:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < size; i++) {		// better way to make array of 1 color; SPI without moving address of sent?
 80008de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008e0:	3301      	adds	r3, #1
 80008e2:	637b      	str	r3, [r7, #52]	; 0x34
 80008e4:	2325      	movs	r3, #37	; 0x25
 80008e6:	18fb      	adds	r3, r7, r3
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80008ec:	429a      	cmp	r2, r3
 80008ee:	dbea      	blt.n	80008c6 <drawHLine+0xfe>
//		colors[i] = color;
	}

	sendCommand(ST77XX_RAMWR, colors, size*2, hspi);
 80008f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80008f2:	2325      	movs	r3, #37	; 0x25
 80008f4:	18fb      	adds	r3, r7, r3
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	18db      	adds	r3, r3, r3
 80008fc:	b29a      	uxth	r2, r3
 80008fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000900:	202c      	movs	r0, #44	; 0x2c
 8000902:	f7ff fdb7 	bl	8000474 <sendCommand>
 8000906:	46b5      	mov	sp, r6
 8000908:	e001      	b.n	800090e <drawHLine+0x146>
	if ((y > HEIGHT) || (y < 0)) return;	// don't draw if y is out of bounds
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	46b5      	mov	sp, r6
}
 800090e:	46bd      	mov	sp, r7
 8000910:	b00f      	add	sp, #60	; 0x3c
 8000912:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000914 <drawVLine>:

void drawVLine(uint8_t x, uint8_t y, uint8_t size, uint16_t color, SPI_HandleTypeDef *hspi) {
 8000914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000916:	b091      	sub	sp, #68	; 0x44
 8000918:	af02      	add	r7, sp, #8
 800091a:	000c      	movs	r4, r1
 800091c:	0016      	movs	r6, r2
 800091e:	0019      	movs	r1, r3
 8000920:	2327      	movs	r3, #39	; 0x27
 8000922:	18fa      	adds	r2, r7, r3
 8000924:	1c03      	adds	r3, r0, #0
 8000926:	7013      	strb	r3, [r2, #0]
 8000928:	2326      	movs	r3, #38	; 0x26
 800092a:	18fb      	adds	r3, r7, r3
 800092c:	1c22      	adds	r2, r4, #0
 800092e:	701a      	strb	r2, [r3, #0]
 8000930:	2325      	movs	r3, #37	; 0x25
 8000932:	18fb      	adds	r3, r7, r3
 8000934:	1c32      	adds	r2, r6, #0
 8000936:	701a      	strb	r2, [r3, #0]
 8000938:	2322      	movs	r3, #34	; 0x22
 800093a:	18fb      	adds	r3, r7, r3
 800093c:	1c0a      	adds	r2, r1, #0
 800093e:	801a      	strh	r2, [r3, #0]
 8000940:	466b      	mov	r3, sp
 8000942:	001e      	movs	r6, r3
	// bounds checking
	if (y < 0) y = 0;						// don't set x out of bounds
	if (y > HEIGHT) y = HEIGHT;
 8000944:	2326      	movs	r3, #38	; 0x26
 8000946:	18fb      	adds	r3, r7, r3
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	2ba0      	cmp	r3, #160	; 0xa0
 800094c:	d903      	bls.n	8000956 <drawVLine+0x42>
 800094e:	2326      	movs	r3, #38	; 0x26
 8000950:	18fb      	adds	r3, r7, r3
 8000952:	22a0      	movs	r2, #160	; 0xa0
 8000954:	701a      	strb	r2, [r3, #0]
	if (y+size > HEIGHT) size = HEIGHT-y;	// don't set size so line draws out of bounds
 8000956:	2326      	movs	r3, #38	; 0x26
 8000958:	18fb      	adds	r3, r7, r3
 800095a:	781a      	ldrb	r2, [r3, #0]
 800095c:	2325      	movs	r3, #37	; 0x25
 800095e:	18fb      	adds	r3, r7, r3
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	18d3      	adds	r3, r2, r3
 8000964:	2ba0      	cmp	r3, #160	; 0xa0
 8000966:	dd08      	ble.n	800097a <drawVLine+0x66>
 8000968:	2325      	movs	r3, #37	; 0x25
 800096a:	18fb      	adds	r3, r7, r3
 800096c:	2226      	movs	r2, #38	; 0x26
 800096e:	18ba      	adds	r2, r7, r2
 8000970:	7812      	ldrb	r2, [r2, #0]
 8000972:	2160      	movs	r1, #96	; 0x60
 8000974:	4249      	negs	r1, r1
 8000976:	1a8a      	subs	r2, r1, r2
 8000978:	701a      	strb	r2, [r3, #0]
	if (y+size < 0) size = 0-y;
	if ((x > WIDTH) || (x < 0)) return;		// don't draw if x is out of bounds
 800097a:	2327      	movs	r3, #39	; 0x27
 800097c:	18fb      	adds	r3, r7, r3
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b80      	cmp	r3, #128	; 0x80
 8000982:	d869      	bhi.n	8000a58 <drawVLine+0x144>

	setAddrWindow(x, y, 1, size, hspi);
 8000984:	2327      	movs	r3, #39	; 0x27
 8000986:	18fb      	adds	r3, r7, r3
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	b298      	uxth	r0, r3
 800098c:	2326      	movs	r3, #38	; 0x26
 800098e:	18fb      	adds	r3, r7, r3
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	b299      	uxth	r1, r3
 8000994:	2325      	movs	r3, #37	; 0x25
 8000996:	18fb      	adds	r3, r7, r3
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	b29a      	uxth	r2, r3
 800099c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800099e:	9300      	str	r3, [sp, #0]
 80009a0:	0013      	movs	r3, r2
 80009a2:	2201      	movs	r2, #1
 80009a4:	f7ff fe7a 	bl	800069c <setAddrWindow>
	uint16_t colors[size];
 80009a8:	2325      	movs	r3, #37	; 0x25
 80009aa:	18fb      	adds	r3, r7, r3
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	001a      	movs	r2, r3
 80009b0:	3a01      	subs	r2, #1
 80009b2:	633a      	str	r2, [r7, #48]	; 0x30
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	2200      	movs	r2, #0
 80009b8:	60fa      	str	r2, [r7, #12]
 80009ba:	68b8      	ldr	r0, [r7, #8]
 80009bc:	68f9      	ldr	r1, [r7, #12]
 80009be:	0002      	movs	r2, r0
 80009c0:	0f12      	lsrs	r2, r2, #28
 80009c2:	000c      	movs	r4, r1
 80009c4:	0124      	lsls	r4, r4, #4
 80009c6:	61fc      	str	r4, [r7, #28]
 80009c8:	69fc      	ldr	r4, [r7, #28]
 80009ca:	4314      	orrs	r4, r2
 80009cc:	61fc      	str	r4, [r7, #28]
 80009ce:	0002      	movs	r2, r0
 80009d0:	0112      	lsls	r2, r2, #4
 80009d2:	61ba      	str	r2, [r7, #24]
 80009d4:	603b      	str	r3, [r7, #0]
 80009d6:	2200      	movs	r2, #0
 80009d8:	607a      	str	r2, [r7, #4]
 80009da:	6838      	ldr	r0, [r7, #0]
 80009dc:	6879      	ldr	r1, [r7, #4]
 80009de:	0002      	movs	r2, r0
 80009e0:	0f12      	lsrs	r2, r2, #28
 80009e2:	000c      	movs	r4, r1
 80009e4:	0124      	lsls	r4, r4, #4
 80009e6:	617c      	str	r4, [r7, #20]
 80009e8:	697c      	ldr	r4, [r7, #20]
 80009ea:	4314      	orrs	r4, r2
 80009ec:	617c      	str	r4, [r7, #20]
 80009ee:	0002      	movs	r2, r0
 80009f0:	0112      	lsls	r2, r2, #4
 80009f2:	613a      	str	r2, [r7, #16]
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	3301      	adds	r3, #1
 80009f8:	3307      	adds	r3, #7
 80009fa:	08db      	lsrs	r3, r3, #3
 80009fc:	00db      	lsls	r3, r3, #3
 80009fe:	466a      	mov	r2, sp
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	469d      	mov	sp, r3
 8000a04:	ab02      	add	r3, sp, #8
 8000a06:	3301      	adds	r3, #1
 8000a08:	085b      	lsrs	r3, r3, #1
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i < size; i++) {		// there has to be a better way to make array of 1 color
 8000a0e:	2300      	movs	r3, #0
 8000a10:	637b      	str	r3, [r7, #52]	; 0x34
 8000a12:	e00e      	b.n	8000a32 <drawVLine+0x11e>
											// SPI without moving address of sent buffer?
		colors[i] = colorFixer(color);
 8000a14:	2322      	movs	r3, #34	; 0x22
 8000a16:	18fb      	adds	r3, r7, r3
 8000a18:	881b      	ldrh	r3, [r3, #0]
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f7ff feb0 	bl	8000780 <colorFixer>
 8000a20:	0003      	movs	r3, r0
 8000a22:	0019      	movs	r1, r3
 8000a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a28:	0052      	lsls	r2, r2, #1
 8000a2a:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < size; i++) {		// there has to be a better way to make array of 1 color
 8000a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a2e:	3301      	adds	r3, #1
 8000a30:	637b      	str	r3, [r7, #52]	; 0x34
 8000a32:	2325      	movs	r3, #37	; 0x25
 8000a34:	18fb      	adds	r3, r7, r3
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	dbea      	blt.n	8000a14 <drawVLine+0x100>
	}

	sendCommand(ST77XX_RAMWR, colors, size*2, hspi);
 8000a3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000a40:	2325      	movs	r3, #37	; 0x25
 8000a42:	18fb      	adds	r3, r7, r3
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	b29b      	uxth	r3, r3
 8000a48:	18db      	adds	r3, r3, r3
 8000a4a:	b29a      	uxth	r2, r3
 8000a4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a4e:	202c      	movs	r0, #44	; 0x2c
 8000a50:	f7ff fd10 	bl	8000474 <sendCommand>
 8000a54:	46b5      	mov	sp, r6
 8000a56:	e001      	b.n	8000a5c <drawVLine+0x148>
	if ((x > WIDTH) || (x < 0)) return;		// don't draw if x is out of bounds
 8000a58:	46c0      	nop			; (mov r8, r8)
 8000a5a:	46b5      	mov	sp, r6
}
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	b00f      	add	sp, #60	; 0x3c
 8000a60:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000a62 <drawBuffer>:

void drawBuffer(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t *buffer, uint16_t bufferSize, SPI_HandleTypeDef *hspi) {
 8000a62:	b5b0      	push	{r4, r5, r7, lr}
 8000a64:	b084      	sub	sp, #16
 8000a66:	af02      	add	r7, sp, #8
 8000a68:	0005      	movs	r5, r0
 8000a6a:	000c      	movs	r4, r1
 8000a6c:	0010      	movs	r0, r2
 8000a6e:	0019      	movs	r1, r3
 8000a70:	1dfb      	adds	r3, r7, #7
 8000a72:	1c2a      	adds	r2, r5, #0
 8000a74:	701a      	strb	r2, [r3, #0]
 8000a76:	1dbb      	adds	r3, r7, #6
 8000a78:	1c22      	adds	r2, r4, #0
 8000a7a:	701a      	strb	r2, [r3, #0]
 8000a7c:	1d7b      	adds	r3, r7, #5
 8000a7e:	1c02      	adds	r2, r0, #0
 8000a80:	701a      	strb	r2, [r3, #0]
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	1c0a      	adds	r2, r1, #0
 8000a86:	701a      	strb	r2, [r3, #0]
	// just dont call this with out-of-range vals pls.
	if (x+w > WIDTH || y+h > HEIGHT) return;
 8000a88:	1dfb      	adds	r3, r7, #7
 8000a8a:	781a      	ldrb	r2, [r3, #0]
 8000a8c:	1d7b      	adds	r3, r7, #5
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	18d3      	adds	r3, r2, r3
 8000a92:	2b80      	cmp	r3, #128	; 0x80
 8000a94:	dc29      	bgt.n	8000aea <drawBuffer+0x88>
 8000a96:	1dbb      	adds	r3, r7, #6
 8000a98:	781a      	ldrb	r2, [r3, #0]
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	18d3      	adds	r3, r2, r3
 8000aa0:	2ba0      	cmp	r3, #160	; 0xa0
 8000aa2:	dc22      	bgt.n	8000aea <drawBuffer+0x88>

	// also don't call this with buffer size too big bc there's not enough ram for all pixels of display
	if (bufferSize > 10240) return;
 8000aa4:	231c      	movs	r3, #28
 8000aa6:	18fb      	adds	r3, r7, r3
 8000aa8:	881a      	ldrh	r2, [r3, #0]
 8000aaa:	23a0      	movs	r3, #160	; 0xa0
 8000aac:	019b      	lsls	r3, r3, #6
 8000aae:	429a      	cmp	r2, r3
 8000ab0:	d81d      	bhi.n	8000aee <drawBuffer+0x8c>

	setAddrWindow(x, y, w, h, hspi);
 8000ab2:	1dfb      	adds	r3, r7, #7
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	b298      	uxth	r0, r3
 8000ab8:	1dbb      	adds	r3, r7, #6
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	b299      	uxth	r1, r3
 8000abe:	1d7b      	adds	r3, r7, #5
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	b29c      	uxth	r4, r3
 8000aca:	6a3b      	ldr	r3, [r7, #32]
 8000acc:	9300      	str	r3, [sp, #0]
 8000ace:	0023      	movs	r3, r4
 8000ad0:	f7ff fde4 	bl	800069c <setAddrWindow>
	sendCommand(ST77XX_RAMWR, buffer, bufferSize*2, hspi);
 8000ad4:	231c      	movs	r3, #28
 8000ad6:	18fb      	adds	r3, r7, r3
 8000ad8:	881b      	ldrh	r3, [r3, #0]
 8000ada:	18db      	adds	r3, r3, r3
 8000adc:	b29a      	uxth	r2, r3
 8000ade:	6a3b      	ldr	r3, [r7, #32]
 8000ae0:	69b9      	ldr	r1, [r7, #24]
 8000ae2:	202c      	movs	r0, #44	; 0x2c
 8000ae4:	f7ff fcc6 	bl	8000474 <sendCommand>
 8000ae8:	e002      	b.n	8000af0 <drawBuffer+0x8e>
	if (x+w > WIDTH || y+h > HEIGHT) return;
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	e000      	b.n	8000af0 <drawBuffer+0x8e>
	if (bufferSize > 10240) return;
 8000aee:	46c0      	nop			; (mov r8, r8)
}
 8000af0:	46bd      	mov	sp, r7
 8000af2:	b002      	add	sp, #8
 8000af4:	bdb0      	pop	{r4, r5, r7, pc}

08000af6 <drawRect>:
			err -= 1;
		}
	}
}

void drawRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t color, SPI_HandleTypeDef *hspi) {
 8000af6:	b5b0      	push	{r4, r5, r7, lr}
 8000af8:	b084      	sub	sp, #16
 8000afa:	af02      	add	r7, sp, #8
 8000afc:	0005      	movs	r5, r0
 8000afe:	000c      	movs	r4, r1
 8000b00:	0010      	movs	r0, r2
 8000b02:	0019      	movs	r1, r3
 8000b04:	1dfb      	adds	r3, r7, #7
 8000b06:	1c2a      	adds	r2, r5, #0
 8000b08:	701a      	strb	r2, [r3, #0]
 8000b0a:	1dbb      	adds	r3, r7, #6
 8000b0c:	1c22      	adds	r2, r4, #0
 8000b0e:	701a      	strb	r2, [r3, #0]
 8000b10:	1d7b      	adds	r3, r7, #5
 8000b12:	1c02      	adds	r2, r0, #0
 8000b14:	701a      	strb	r2, [r3, #0]
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	1c0a      	adds	r2, r1, #0
 8000b1a:	701a      	strb	r2, [r3, #0]
	drawHLine(x, y, w, color, hspi);
 8000b1c:	2518      	movs	r5, #24
 8000b1e:	197b      	adds	r3, r7, r5
 8000b20:	881c      	ldrh	r4, [r3, #0]
 8000b22:	1d7b      	adds	r3, r7, #5
 8000b24:	781a      	ldrb	r2, [r3, #0]
 8000b26:	1dbb      	adds	r3, r7, #6
 8000b28:	7819      	ldrb	r1, [r3, #0]
 8000b2a:	1dfb      	adds	r3, r7, #7
 8000b2c:	7818      	ldrb	r0, [r3, #0]
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	9300      	str	r3, [sp, #0]
 8000b32:	0023      	movs	r3, r4
 8000b34:	f7ff fe48 	bl	80007c8 <drawHLine>
	drawHLine(x, y+h-1, w, color, hspi);
 8000b38:	1dba      	adds	r2, r7, #6
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	7812      	ldrb	r2, [r2, #0]
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	18d3      	adds	r3, r2, r3
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	3b01      	subs	r3, #1
 8000b46:	b2d9      	uxtb	r1, r3
 8000b48:	197b      	adds	r3, r7, r5
 8000b4a:	881c      	ldrh	r4, [r3, #0]
 8000b4c:	1d7b      	adds	r3, r7, #5
 8000b4e:	781a      	ldrb	r2, [r3, #0]
 8000b50:	1dfb      	adds	r3, r7, #7
 8000b52:	7818      	ldrb	r0, [r3, #0]
 8000b54:	69fb      	ldr	r3, [r7, #28]
 8000b56:	9300      	str	r3, [sp, #0]
 8000b58:	0023      	movs	r3, r4
 8000b5a:	f7ff fe35 	bl	80007c8 <drawHLine>
	drawVLine(x, y, h, color, hspi);
 8000b5e:	197b      	adds	r3, r7, r5
 8000b60:	881c      	ldrh	r4, [r3, #0]
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	781a      	ldrb	r2, [r3, #0]
 8000b66:	1dbb      	adds	r3, r7, #6
 8000b68:	7819      	ldrb	r1, [r3, #0]
 8000b6a:	1dfb      	adds	r3, r7, #7
 8000b6c:	7818      	ldrb	r0, [r3, #0]
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	9300      	str	r3, [sp, #0]
 8000b72:	0023      	movs	r3, r4
 8000b74:	f7ff fece 	bl	8000914 <drawVLine>
	drawVLine(x+w-1, y, h, color, hspi);
 8000b78:	1dfa      	adds	r2, r7, #7
 8000b7a:	1d7b      	adds	r3, r7, #5
 8000b7c:	7812      	ldrb	r2, [r2, #0]
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	18d3      	adds	r3, r2, r3
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	3b01      	subs	r3, #1
 8000b86:	b2d8      	uxtb	r0, r3
 8000b88:	197b      	adds	r3, r7, r5
 8000b8a:	881c      	ldrh	r4, [r3, #0]
 8000b8c:	1d3b      	adds	r3, r7, #4
 8000b8e:	781a      	ldrb	r2, [r3, #0]
 8000b90:	1dbb      	adds	r3, r7, #6
 8000b92:	7819      	ldrb	r1, [r3, #0]
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	9300      	str	r3, [sp, #0]
 8000b98:	0023      	movs	r3, r4
 8000b9a:	f7ff febb 	bl	8000914 <drawVLine>
}
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	b002      	add	sp, #8
 8000ba4:	bdb0      	pop	{r4, r5, r7, pc}

08000ba6 <fillRect>:

void fillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t color, SPI_HandleTypeDef *hspi) {
 8000ba6:	b5b0      	push	{r4, r5, r7, lr}
 8000ba8:	b086      	sub	sp, #24
 8000baa:	af02      	add	r7, sp, #8
 8000bac:	0005      	movs	r5, r0
 8000bae:	000c      	movs	r4, r1
 8000bb0:	0010      	movs	r0, r2
 8000bb2:	0019      	movs	r1, r3
 8000bb4:	1dfb      	adds	r3, r7, #7
 8000bb6:	1c2a      	adds	r2, r5, #0
 8000bb8:	701a      	strb	r2, [r3, #0]
 8000bba:	1dbb      	adds	r3, r7, #6
 8000bbc:	1c22      	adds	r2, r4, #0
 8000bbe:	701a      	strb	r2, [r3, #0]
 8000bc0:	1d7b      	adds	r3, r7, #5
 8000bc2:	1c02      	adds	r2, r0, #0
 8000bc4:	701a      	strb	r2, [r3, #0]
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	1c0a      	adds	r2, r1, #0
 8000bca:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < h; i++) {
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	e014      	b.n	8000bfc <fillRect+0x56>
		drawHLine(x, y+i, w, color, hspi);
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	1dbb      	adds	r3, r7, #6
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	18d3      	adds	r3, r2, r3
 8000bdc:	b2d9      	uxtb	r1, r3
 8000bde:	2320      	movs	r3, #32
 8000be0:	18fb      	adds	r3, r7, r3
 8000be2:	881c      	ldrh	r4, [r3, #0]
 8000be4:	1d7b      	adds	r3, r7, #5
 8000be6:	781a      	ldrb	r2, [r3, #0]
 8000be8:	1dfb      	adds	r3, r7, #7
 8000bea:	7818      	ldrb	r0, [r3, #0]
 8000bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bee:	9300      	str	r3, [sp, #0]
 8000bf0:	0023      	movs	r3, r4
 8000bf2:	f7ff fde9 	bl	80007c8 <drawHLine>
	for (int i = 0; i < h; i++) {
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	68fa      	ldr	r2, [r7, #12]
 8000c02:	429a      	cmp	r2, r3
 8000c04:	dbe5      	blt.n	8000bd2 <fillRect+0x2c>
	}
}
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	b004      	add	sp, #16
 8000c0c:	bdb0      	pop	{r4, r5, r7, pc}

08000c0e <fillScreen>:

void fillScreen(uint16_t color, SPI_HandleTypeDef *hspi) {
 8000c0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c10:	b091      	sub	sp, #68	; 0x44
 8000c12:	af04      	add	r7, sp, #16
 8000c14:	61b9      	str	r1, [r7, #24]
 8000c16:	221e      	movs	r2, #30
 8000c18:	18ba      	adds	r2, r7, r2
 8000c1a:	1c01      	adds	r1, r0, #0
 8000c1c:	8011      	strh	r1, [r2, #0]
 8000c1e:	466a      	mov	r2, sp
 8000c20:	607a      	str	r2, [r7, #4]
	uint16_t bufferSize = WIDTH*HEIGHT/4;
 8000c22:	2012      	movs	r0, #18
 8000c24:	2218      	movs	r2, #24
 8000c26:	18b9      	adds	r1, r7, r2
 8000c28:	180a      	adds	r2, r1, r0
 8000c2a:	21a0      	movs	r1, #160	; 0xa0
 8000c2c:	0149      	lsls	r1, r1, #5
 8000c2e:	8011      	strh	r1, [r2, #0]
	uint16_t buffer[bufferSize];
 8000c30:	2218      	movs	r2, #24
 8000c32:	18ba      	adds	r2, r7, r2
 8000c34:	1812      	adds	r2, r2, r0
 8000c36:	8812      	ldrh	r2, [r2, #0]
 8000c38:	0011      	movs	r1, r2
 8000c3a:	3901      	subs	r1, #1
 8000c3c:	6279      	str	r1, [r7, #36]	; 0x24
 8000c3e:	613a      	str	r2, [r7, #16]
 8000c40:	2100      	movs	r1, #0
 8000c42:	6179      	str	r1, [r7, #20]
 8000c44:	6939      	ldr	r1, [r7, #16]
 8000c46:	0f09      	lsrs	r1, r1, #28
 8000c48:	6978      	ldr	r0, [r7, #20]
 8000c4a:	0106      	lsls	r6, r0, #4
 8000c4c:	430e      	orrs	r6, r1
 8000c4e:	6939      	ldr	r1, [r7, #16]
 8000c50:	010d      	lsls	r5, r1, #4
 8000c52:	60ba      	str	r2, [r7, #8]
 8000c54:	2100      	movs	r1, #0
 8000c56:	60f9      	str	r1, [r7, #12]
 8000c58:	68bd      	ldr	r5, [r7, #8]
 8000c5a:	68fe      	ldr	r6, [r7, #12]
 8000c5c:	0029      	movs	r1, r5
 8000c5e:	0f09      	lsrs	r1, r1, #28
 8000c60:	0030      	movs	r0, r6
 8000c62:	0104      	lsls	r4, r0, #4
 8000c64:	430c      	orrs	r4, r1
 8000c66:	0029      	movs	r1, r5
 8000c68:	010b      	lsls	r3, r1, #4
 8000c6a:	0013      	movs	r3, r2
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	3301      	adds	r3, #1
 8000c70:	3307      	adds	r3, #7
 8000c72:	08db      	lsrs	r3, r3, #3
 8000c74:	00db      	lsls	r3, r3, #3
 8000c76:	466a      	mov	r2, sp
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	469d      	mov	sp, r3
 8000c7c:	ab04      	add	r3, sp, #16
 8000c7e:	3301      	adds	r3, #1
 8000c80:	085b      	lsrs	r3, r3, #1
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	623b      	str	r3, [r7, #32]
	int i;
	for (i = 0; i < bufferSize; i++) {
 8000c86:	2300      	movs	r3, #0
 8000c88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c8a:	e00e      	b.n	8000caa <fillScreen+0x9c>
		buffer[i] = colorFixer(color);
 8000c8c:	231e      	movs	r3, #30
 8000c8e:	18fb      	adds	r3, r7, r3
 8000c90:	881b      	ldrh	r3, [r3, #0]
 8000c92:	0018      	movs	r0, r3
 8000c94:	f7ff fd74 	bl	8000780 <colorFixer>
 8000c98:	0003      	movs	r3, r0
 8000c9a:	0019      	movs	r1, r3
 8000c9c:	6a3b      	ldr	r3, [r7, #32]
 8000c9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ca0:	0052      	lsls	r2, r2, #1
 8000ca2:	52d1      	strh	r1, [r2, r3]
	for (i = 0; i < bufferSize; i++) {
 8000ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000caa:	2312      	movs	r3, #18
 8000cac:	2218      	movs	r2, #24
 8000cae:	4694      	mov	ip, r2
 8000cb0:	44bc      	add	ip, r7
 8000cb2:	4463      	add	r3, ip
 8000cb4:	881b      	ldrh	r3, [r3, #0]
 8000cb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	dbe7      	blt.n	8000c8c <fillScreen+0x7e>
	}

	for (i = 0; i < 4; i++) {
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cc0:	e017      	b.n	8000cf2 <fillScreen+0xe4>
		drawBuffer(0, HEIGHT/4*i, WIDTH, HEIGHT/4, buffer, bufferSize, hspi);
 8000cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	2228      	movs	r2, #40	; 0x28
 8000cc8:	4353      	muls	r3, r2
 8000cca:	b2d9      	uxtb	r1, r3
 8000ccc:	6a3b      	ldr	r3, [r7, #32]
 8000cce:	69ba      	ldr	r2, [r7, #24]
 8000cd0:	9202      	str	r2, [sp, #8]
 8000cd2:	2212      	movs	r2, #18
 8000cd4:	2018      	movs	r0, #24
 8000cd6:	4684      	mov	ip, r0
 8000cd8:	44bc      	add	ip, r7
 8000cda:	4462      	add	r2, ip
 8000cdc:	8812      	ldrh	r2, [r2, #0]
 8000cde:	9201      	str	r2, [sp, #4]
 8000ce0:	9300      	str	r3, [sp, #0]
 8000ce2:	2328      	movs	r3, #40	; 0x28
 8000ce4:	2280      	movs	r2, #128	; 0x80
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f7ff febb 	bl	8000a62 <drawBuffer>
	for (i = 0; i < 4; i++) {
 8000cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cee:	3301      	adds	r3, #1
 8000cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cf4:	2b03      	cmp	r3, #3
 8000cf6:	dde4      	ble.n	8000cc2 <fillScreen+0xb4>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	469d      	mov	sp, r3
	}
}
 8000cfc:	46c0      	nop			; (mov r8, r8)
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	b00d      	add	sp, #52	; 0x34
 8000d02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d04 <drawCenteredText>:
// ---- end of basic shapes and lines ----

// ---- start of more complicated graphics ----
void drawCenteredText(uint8_t x_center, uint8_t y, const char *str, SPI_HandleTypeDef *hspi) {
 8000d04:	b590      	push	{r4, r7, lr}
 8000d06:	b089      	sub	sp, #36	; 0x24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60ba      	str	r2, [r7, #8]
 8000d0c:	607b      	str	r3, [r7, #4]
 8000d0e:	230f      	movs	r3, #15
 8000d10:	18fb      	adds	r3, r7, r3
 8000d12:	1c02      	adds	r2, r0, #0
 8000d14:	701a      	strb	r2, [r3, #0]
 8000d16:	240e      	movs	r4, #14
 8000d18:	193b      	adds	r3, r7, r4
 8000d1a:	1c0a      	adds	r2, r1, #0
 8000d1c:	701a      	strb	r2, [r3, #0]
	uint8_t strSize = strlen(str);
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	0018      	movs	r0, r3
 8000d22:	f7ff f9f1 	bl	8000108 <strlen>
 8000d26:	0002      	movs	r2, r0
 8000d28:	231f      	movs	r3, #31
 8000d2a:	18fb      	adds	r3, r7, r3
 8000d2c:	701a      	strb	r2, [r3, #0]
	// bounds checking. text box needed to print text should not end up ouf of bounds
	if (y+textSize*8 > HEIGHT) return;
 8000d2e:	193b      	adds	r3, r7, r4
 8000d30:	781a      	ldrb	r2, [r3, #0]
 8000d32:	4b24      	ldr	r3, [pc, #144]	; (8000dc4 <drawCenteredText+0xc0>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	00db      	lsls	r3, r3, #3
 8000d38:	18d3      	adds	r3, r2, r3
 8000d3a:	2ba0      	cmp	r3, #160	; 0xa0
 8000d3c:	dc3a      	bgt.n	8000db4 <drawCenteredText+0xb0>
	int leftBound = x_center-(strSize*textSize*6)/2;
 8000d3e:	230f      	movs	r3, #15
 8000d40:	18fb      	adds	r3, r7, r3
 8000d42:	7819      	ldrb	r1, [r3, #0]
 8000d44:	231f      	movs	r3, #31
 8000d46:	18fb      	adds	r3, r7, r3
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	4a1e      	ldr	r2, [pc, #120]	; (8000dc4 <drawCenteredText+0xc0>)
 8000d4c:	7812      	ldrb	r2, [r2, #0]
 8000d4e:	435a      	muls	r2, r3
 8000d50:	0013      	movs	r3, r2
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	189b      	adds	r3, r3, r2
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	d500      	bpl.n	8000d5c <drawCenteredText+0x58>
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	105b      	asrs	r3, r3, #1
 8000d5e:	425b      	negs	r3, r3
 8000d60:	18cb      	adds	r3, r1, r3
 8000d62:	61bb      	str	r3, [r7, #24]
	int rightBound = x_center+(strSize*textSize*6)/2;
 8000d64:	230f      	movs	r3, #15
 8000d66:	18fb      	adds	r3, r7, r3
 8000d68:	7819      	ldrb	r1, [r3, #0]
 8000d6a:	231f      	movs	r3, #31
 8000d6c:	18fb      	adds	r3, r7, r3
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	4a14      	ldr	r2, [pc, #80]	; (8000dc4 <drawCenteredText+0xc0>)
 8000d72:	7812      	ldrb	r2, [r2, #0]
 8000d74:	435a      	muls	r2, r3
 8000d76:	0013      	movs	r3, r2
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	189b      	adds	r3, r3, r2
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	d500      	bpl.n	8000d82 <drawCenteredText+0x7e>
 8000d80:	3301      	adds	r3, #1
 8000d82:	105b      	asrs	r3, r3, #1
 8000d84:	18cb      	adds	r3, r1, r3
 8000d86:	617b      	str	r3, [r7, #20]
	if (leftBound < 0) return;
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	db14      	blt.n	8000db8 <drawCenteredText+0xb4>
	if (rightBound > WIDTH) return;
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	2b80      	cmp	r3, #128	; 0x80
 8000d92:	dc13      	bgt.n	8000dbc <drawCenteredText+0xb8>

	setCursor(leftBound, y);
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	b2da      	uxtb	r2, r3
 8000d98:	230e      	movs	r3, #14
 8000d9a:	18fb      	adds	r3, r7, r3
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	0019      	movs	r1, r3
 8000da0:	0010      	movs	r0, r2
 8000da2:	f000 fbc7 	bl	8001534 <setCursor>
	drawText(str, hspi);
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	0011      	movs	r1, r2
 8000dac:	0018      	movs	r0, r3
 8000dae:	f000 fb7b 	bl	80014a8 <drawText>
 8000db2:	e004      	b.n	8000dbe <drawCenteredText+0xba>
	if (y+textSize*8 > HEIGHT) return;
 8000db4:	46c0      	nop			; (mov r8, r8)
 8000db6:	e002      	b.n	8000dbe <drawCenteredText+0xba>
	if (leftBound < 0) return;
 8000db8:	46c0      	nop			; (mov r8, r8)
 8000dba:	e000      	b.n	8000dbe <drawCenteredText+0xba>
	if (rightBound > WIDTH) return;
 8000dbc:	46c0      	nop			; (mov r8, r8)
}
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	b009      	add	sp, #36	; 0x24
 8000dc2:	bd90      	pop	{r4, r7, pc}
 8000dc4:	200000ea 	.word	0x200000ea

08000dc8 <clearTextLine>:

void clearTextLine(uint8_t y, SPI_HandleTypeDef *hspi) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af02      	add	r7, sp, #8
 8000dce:	0002      	movs	r2, r0
 8000dd0:	6039      	str	r1, [r7, #0]
 8000dd2:	1dfb      	adds	r3, r7, #7
 8000dd4:	701a      	strb	r2, [r3, #0]
	fillRect(0, y, WIDTH, textSize*8, bg, hspi);
 8000dd6:	4b0a      	ldr	r3, [pc, #40]	; (8000e00 <clearTextLine+0x38>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	00db      	lsls	r3, r3, #3
 8000ddc:	b2d8      	uxtb	r0, r3
 8000dde:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <clearTextLine+0x3c>)
 8000de0:	881b      	ldrh	r3, [r3, #0]
 8000de2:	1dfa      	adds	r2, r7, #7
 8000de4:	7811      	ldrb	r1, [r2, #0]
 8000de6:	683a      	ldr	r2, [r7, #0]
 8000de8:	9201      	str	r2, [sp, #4]
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	0003      	movs	r3, r0
 8000dee:	2280      	movs	r2, #128	; 0x80
 8000df0:	2000      	movs	r0, #0
 8000df2:	f7ff fed8 	bl	8000ba6 <fillRect>
}
 8000df6:	46c0      	nop			; (mov r8, r8)
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	b002      	add	sp, #8
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	46c0      	nop			; (mov r8, r8)
 8000e00:	200000ea 	.word	0x200000ea
 8000e04:	200000ee 	.word	0x200000ee

08000e08 <drawChar>:
// ---- end of more complicated graphics ----

// ---- text functions ----
void drawChar(uint8_t ch, SPI_HandleTypeDef *hspi) {
 8000e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e0a:	b095      	sub	sp, #84	; 0x54
 8000e0c:	af04      	add	r7, sp, #16
 8000e0e:	61b9      	str	r1, [r7, #24]
 8000e10:	221f      	movs	r2, #31
 8000e12:	18ba      	adds	r2, r7, r2
 8000e14:	1c01      	adds	r1, r0, #0
 8000e16:	7011      	strb	r1, [r2, #0]
 8000e18:	466a      	mov	r2, sp
 8000e1a:	607a      	str	r2, [r7, #4]
	uint16_t bufferSize = 6*8*textSize*textSize;
 8000e1c:	4abe      	ldr	r2, [pc, #760]	; (8001118 <drawChar+0x310>)
 8000e1e:	7812      	ldrb	r2, [r2, #0]
 8000e20:	b292      	uxth	r2, r2
 8000e22:	49bd      	ldr	r1, [pc, #756]	; (8001118 <drawChar+0x310>)
 8000e24:	7809      	ldrb	r1, [r1, #0]
 8000e26:	b289      	uxth	r1, r1
 8000e28:	434a      	muls	r2, r1
 8000e2a:	b291      	uxth	r1, r2
 8000e2c:	221a      	movs	r2, #26
 8000e2e:	2018      	movs	r0, #24
 8000e30:	4684      	mov	ip, r0
 8000e32:	44bc      	add	ip, r7
 8000e34:	4462      	add	r2, ip
 8000e36:	2030      	movs	r0, #48	; 0x30
 8000e38:	4341      	muls	r1, r0
 8000e3a:	8011      	strh	r1, [r2, #0]
	uint16_t buffer[bufferSize];
 8000e3c:	221a      	movs	r2, #26
 8000e3e:	2118      	movs	r1, #24
 8000e40:	468c      	mov	ip, r1
 8000e42:	44bc      	add	ip, r7
 8000e44:	4462      	add	r2, ip
 8000e46:	8812      	ldrh	r2, [r2, #0]
 8000e48:	0011      	movs	r1, r2
 8000e4a:	3901      	subs	r1, #1
 8000e4c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8000e4e:	613a      	str	r2, [r7, #16]
 8000e50:	2100      	movs	r1, #0
 8000e52:	6179      	str	r1, [r7, #20]
 8000e54:	6939      	ldr	r1, [r7, #16]
 8000e56:	0f09      	lsrs	r1, r1, #28
 8000e58:	6978      	ldr	r0, [r7, #20]
 8000e5a:	0106      	lsls	r6, r0, #4
 8000e5c:	430e      	orrs	r6, r1
 8000e5e:	6939      	ldr	r1, [r7, #16]
 8000e60:	010d      	lsls	r5, r1, #4
 8000e62:	60ba      	str	r2, [r7, #8]
 8000e64:	2100      	movs	r1, #0
 8000e66:	60f9      	str	r1, [r7, #12]
 8000e68:	68bd      	ldr	r5, [r7, #8]
 8000e6a:	68fe      	ldr	r6, [r7, #12]
 8000e6c:	0029      	movs	r1, r5
 8000e6e:	0f09      	lsrs	r1, r1, #28
 8000e70:	0030      	movs	r0, r6
 8000e72:	0104      	lsls	r4, r0, #4
 8000e74:	430c      	orrs	r4, r1
 8000e76:	0029      	movs	r1, r5
 8000e78:	010b      	lsls	r3, r1, #4
 8000e7a:	0013      	movs	r3, r2
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	3301      	adds	r3, #1
 8000e80:	3307      	adds	r3, #7
 8000e82:	08db      	lsrs	r3, r3, #3
 8000e84:	00db      	lsls	r3, r3, #3
 8000e86:	466a      	mov	r2, sp
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	469d      	mov	sp, r3
 8000e8c:	ab04      	add	r3, sp, #16
 8000e8e:	3301      	adds	r3, #1
 8000e90:	085b      	lsrs	r3, r3, #1
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	62bb      	str	r3, [r7, #40]	; 0x28
	int16_t rowOffset, address;

	for (int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 8000e96:	2325      	movs	r3, #37	; 0x25
 8000e98:	2218      	movs	r2, #24
 8000e9a:	4694      	mov	ip, r2
 8000e9c:	44bc      	add	ip, r7
 8000e9e:	4463      	add	r3, ip
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	701a      	strb	r2, [r3, #0]
 8000ea4:	e1f4      	b.n	8001290 <drawChar+0x488>
		uint8_t line = font[ch*5+i];
 8000ea6:	231f      	movs	r3, #31
 8000ea8:	18fb      	adds	r3, r7, r3
 8000eaa:	781a      	ldrb	r2, [r3, #0]
 8000eac:	0013      	movs	r3, r2
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	189a      	adds	r2, r3, r2
 8000eb2:	2325      	movs	r3, #37	; 0x25
 8000eb4:	2118      	movs	r1, #24
 8000eb6:	468c      	mov	ip, r1
 8000eb8:	44bc      	add	ip, r7
 8000eba:	4463      	add	r3, ip
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	b25b      	sxtb	r3, r3
 8000ec0:	18d2      	adds	r2, r2, r3
 8000ec2:	2324      	movs	r3, #36	; 0x24
 8000ec4:	2118      	movs	r1, #24
 8000ec6:	468c      	mov	ip, r1
 8000ec8:	44bc      	add	ip, r7
 8000eca:	4463      	add	r3, ip
 8000ecc:	4993      	ldr	r1, [pc, #588]	; (800111c <drawChar+0x314>)
 8000ece:	5c8a      	ldrb	r2, [r1, r2]
 8000ed0:	701a      	strb	r2, [r3, #0]
		for (int8_t j=0; j<8; j++, line >>= 1) {
 8000ed2:	2323      	movs	r3, #35	; 0x23
 8000ed4:	2218      	movs	r2, #24
 8000ed6:	4694      	mov	ip, r2
 8000ed8:	44bc      	add	ip, r7
 8000eda:	4463      	add	r3, ip
 8000edc:	2200      	movs	r2, #0
 8000ede:	701a      	strb	r2, [r3, #0]
 8000ee0:	e1c0      	b.n	8001264 <drawChar+0x45c>
			if (line & 1) {
 8000ee2:	2324      	movs	r3, #36	; 0x24
 8000ee4:	2218      	movs	r2, #24
 8000ee6:	4694      	mov	ip, r2
 8000ee8:	44bc      	add	ip, r7
 8000eea:	4463      	add	r3, ip
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2201      	movs	r2, #1
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	d100      	bne.n	8000ef6 <drawChar+0xee>
 8000ef4:	e0c8      	b.n	8001088 <drawChar+0x280>
				if (textSize == 1) {
 8000ef6:	4b88      	ldr	r3, [pc, #544]	; (8001118 <drawChar+0x310>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d11c      	bne.n	8000f38 <drawChar+0x130>
					buffer[i+j*6] = colorFixer(textColor);
 8000efe:	4b88      	ldr	r3, [pc, #544]	; (8001120 <drawChar+0x318>)
 8000f00:	8818      	ldrh	r0, [r3, #0]
 8000f02:	2325      	movs	r3, #37	; 0x25
 8000f04:	2218      	movs	r2, #24
 8000f06:	4694      	mov	ip, r2
 8000f08:	44bc      	add	ip, r7
 8000f0a:	4463      	add	r3, ip
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	5659      	ldrsb	r1, [r3, r1]
 8000f10:	2323      	movs	r3, #35	; 0x23
 8000f12:	2218      	movs	r2, #24
 8000f14:	4694      	mov	ip, r2
 8000f16:	44bc      	add	ip, r7
 8000f18:	4463      	add	r3, ip
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	569a      	ldrsb	r2, [r3, r2]
 8000f1e:	0013      	movs	r3, r2
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	189b      	adds	r3, r3, r2
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	18cc      	adds	r4, r1, r3
 8000f28:	f7ff fc2a 	bl	8000780 <colorFixer>
 8000f2c:	0003      	movs	r3, r0
 8000f2e:	0019      	movs	r1, r3
 8000f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f32:	0062      	lsls	r2, r4, #1
 8000f34:	52d1      	strh	r1, [r2, r3]
 8000f36:	e17f      	b.n	8001238 <drawChar+0x430>
				}
				else {
					for (int8_t k = 0; k < textSize; k++) {
 8000f38:	2322      	movs	r3, #34	; 0x22
 8000f3a:	2218      	movs	r2, #24
 8000f3c:	4694      	mov	ip, r2
 8000f3e:	44bc      	add	ip, r7
 8000f40:	4463      	add	r3, ip
 8000f42:	2200      	movs	r2, #0
 8000f44:	701a      	strb	r2, [r3, #0]
 8000f46:	e092      	b.n	800106e <drawChar+0x266>
						rowOffset = textSize*6;
 8000f48:	4b73      	ldr	r3, [pc, #460]	; (8001118 <drawChar+0x310>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	1c1a      	adds	r2, r3, #0
 8000f50:	1c13      	adds	r3, r2, #0
 8000f52:	18db      	adds	r3, r3, r3
 8000f54:	189b      	adds	r3, r3, r2
 8000f56:	18db      	adds	r3, r3, r3
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	2326      	movs	r3, #38	; 0x26
 8000f5c:	2118      	movs	r1, #24
 8000f5e:	468c      	mov	ip, r1
 8000f60:	44bc      	add	ip, r7
 8000f62:	4463      	add	r3, ip
 8000f64:	801a      	strh	r2, [r3, #0]
						for (int8_t l = 0; l < textSize; l++) {
 8000f66:	2321      	movs	r3, #33	; 0x21
 8000f68:	2218      	movs	r2, #24
 8000f6a:	4694      	mov	ip, r2
 8000f6c:	44bc      	add	ip, r7
 8000f6e:	4463      	add	r3, ip
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]
 8000f74:	e064      	b.n	8001040 <drawChar+0x238>
							address = (textSize*textSize*j*6)+(i*textSize);
 8000f76:	4b68      	ldr	r3, [pc, #416]	; (8001118 <drawChar+0x310>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	4a66      	ldr	r2, [pc, #408]	; (8001118 <drawChar+0x310>)
 8000f7e:	7812      	ldrb	r2, [r2, #0]
 8000f80:	b292      	uxth	r2, r2
 8000f82:	4353      	muls	r3, r2
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	2223      	movs	r2, #35	; 0x23
 8000f88:	2118      	movs	r1, #24
 8000f8a:	468c      	mov	ip, r1
 8000f8c:	44bc      	add	ip, r7
 8000f8e:	4462      	add	r2, ip
 8000f90:	7812      	ldrb	r2, [r2, #0]
 8000f92:	b252      	sxtb	r2, r2
 8000f94:	b292      	uxth	r2, r2
 8000f96:	4353      	muls	r3, r2
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	1c1a      	adds	r2, r3, #0
 8000f9c:	1c13      	adds	r3, r2, #0
 8000f9e:	18db      	adds	r3, r3, r3
 8000fa0:	189b      	adds	r3, r3, r2
 8000fa2:	18db      	adds	r3, r3, r3
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	2325      	movs	r3, #37	; 0x25
 8000fa8:	2118      	movs	r1, #24
 8000faa:	468c      	mov	ip, r1
 8000fac:	44bc      	add	ip, r7
 8000fae:	4463      	add	r3, ip
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	b25b      	sxtb	r3, r3
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	4958      	ldr	r1, [pc, #352]	; (8001118 <drawChar+0x310>)
 8000fb8:	7809      	ldrb	r1, [r1, #0]
 8000fba:	b289      	uxth	r1, r1
 8000fbc:	434b      	muls	r3, r1
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	18d3      	adds	r3, r2, r3
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	210e      	movs	r1, #14
 8000fc6:	2018      	movs	r0, #24
 8000fc8:	183b      	adds	r3, r7, r0
 8000fca:	185b      	adds	r3, r3, r1
 8000fcc:	801a      	strh	r2, [r3, #0]
							address += rowOffset*k+l;
 8000fce:	2322      	movs	r3, #34	; 0x22
 8000fd0:	2218      	movs	r2, #24
 8000fd2:	4694      	mov	ip, r2
 8000fd4:	44bc      	add	ip, r7
 8000fd6:	4463      	add	r3, ip
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	b25b      	sxtb	r3, r3
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	2226      	movs	r2, #38	; 0x26
 8000fe0:	2418      	movs	r4, #24
 8000fe2:	46a4      	mov	ip, r4
 8000fe4:	44bc      	add	ip, r7
 8000fe6:	4462      	add	r2, ip
 8000fe8:	8812      	ldrh	r2, [r2, #0]
 8000fea:	4353      	muls	r3, r2
 8000fec:	b29a      	uxth	r2, r3
 8000fee:	2521      	movs	r5, #33	; 0x21
 8000ff0:	183b      	adds	r3, r7, r0
 8000ff2:	195b      	adds	r3, r3, r5
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	b25b      	sxtb	r3, r3
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	18d3      	adds	r3, r2, r3
 8000ffc:	b29a      	uxth	r2, r3
 8000ffe:	183b      	adds	r3, r7, r0
 8001000:	185b      	adds	r3, r3, r1
 8001002:	881b      	ldrh	r3, [r3, #0]
 8001004:	18d3      	adds	r3, r2, r3
 8001006:	b29a      	uxth	r2, r3
 8001008:	183b      	adds	r3, r7, r0
 800100a:	185b      	adds	r3, r3, r1
 800100c:	801a      	strh	r2, [r3, #0]
							buffer[address] = colorFixer(textColor);
 800100e:	4b44      	ldr	r3, [pc, #272]	; (8001120 <drawChar+0x318>)
 8001010:	881a      	ldrh	r2, [r3, #0]
 8001012:	0006      	movs	r6, r0
 8001014:	183b      	adds	r3, r7, r0
 8001016:	185b      	adds	r3, r3, r1
 8001018:	2400      	movs	r4, #0
 800101a:	5f1c      	ldrsh	r4, [r3, r4]
 800101c:	0010      	movs	r0, r2
 800101e:	f7ff fbaf 	bl	8000780 <colorFixer>
 8001022:	0003      	movs	r3, r0
 8001024:	0019      	movs	r1, r3
 8001026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001028:	0062      	lsls	r2, r4, #1
 800102a:	52d1      	strh	r1, [r2, r3]
						for (int8_t l = 0; l < textSize; l++) {
 800102c:	19bb      	adds	r3, r7, r6
 800102e:	195b      	adds	r3, r3, r5
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	b25b      	sxtb	r3, r3
 8001034:	b2db      	uxtb	r3, r3
 8001036:	3301      	adds	r3, #1
 8001038:	b2da      	uxtb	r2, r3
 800103a:	19bb      	adds	r3, r7, r6
 800103c:	195b      	adds	r3, r3, r5
 800103e:	701a      	strb	r2, [r3, #0]
 8001040:	2321      	movs	r3, #33	; 0x21
 8001042:	2218      	movs	r2, #24
 8001044:	4694      	mov	ip, r2
 8001046:	44bc      	add	ip, r7
 8001048:	4463      	add	r3, ip
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	b25b      	sxtb	r3, r3
 800104e:	4a32      	ldr	r2, [pc, #200]	; (8001118 <drawChar+0x310>)
 8001050:	7812      	ldrb	r2, [r2, #0]
 8001052:	4293      	cmp	r3, r2
 8001054:	db8f      	blt.n	8000f76 <drawChar+0x16e>
					for (int8_t k = 0; k < textSize; k++) {
 8001056:	2122      	movs	r1, #34	; 0x22
 8001058:	2018      	movs	r0, #24
 800105a:	183b      	adds	r3, r7, r0
 800105c:	185b      	adds	r3, r3, r1
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	b25b      	sxtb	r3, r3
 8001062:	b2db      	uxtb	r3, r3
 8001064:	3301      	adds	r3, #1
 8001066:	b2da      	uxtb	r2, r3
 8001068:	183b      	adds	r3, r7, r0
 800106a:	185b      	adds	r3, r3, r1
 800106c:	701a      	strb	r2, [r3, #0]
 800106e:	2322      	movs	r3, #34	; 0x22
 8001070:	2218      	movs	r2, #24
 8001072:	4694      	mov	ip, r2
 8001074:	44bc      	add	ip, r7
 8001076:	4463      	add	r3, ip
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	b25b      	sxtb	r3, r3
 800107c:	4a26      	ldr	r2, [pc, #152]	; (8001118 <drawChar+0x310>)
 800107e:	7812      	ldrb	r2, [r2, #0]
 8001080:	4293      	cmp	r3, r2
 8001082:	da00      	bge.n	8001086 <drawChar+0x27e>
 8001084:	e760      	b.n	8000f48 <drawChar+0x140>
 8001086:	e0d7      	b.n	8001238 <drawChar+0x430>
						}
					}
//					fillRect(cursorX+i*textSize, cursorY+j*textSize, textSize, textSize, textColor, hspi);
				}
			} else if (bg != textColor) {
 8001088:	4b26      	ldr	r3, [pc, #152]	; (8001124 <drawChar+0x31c>)
 800108a:	881a      	ldrh	r2, [r3, #0]
 800108c:	4b24      	ldr	r3, [pc, #144]	; (8001120 <drawChar+0x318>)
 800108e:	881b      	ldrh	r3, [r3, #0]
 8001090:	429a      	cmp	r2, r3
 8001092:	d100      	bne.n	8001096 <drawChar+0x28e>
 8001094:	e0d0      	b.n	8001238 <drawChar+0x430>
				if (textSize == 1) {
 8001096:	4b20      	ldr	r3, [pc, #128]	; (8001118 <drawChar+0x310>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d11c      	bne.n	80010d8 <drawChar+0x2d0>
					buffer[i+j*6] = colorFixer(bg);
 800109e:	4b21      	ldr	r3, [pc, #132]	; (8001124 <drawChar+0x31c>)
 80010a0:	8818      	ldrh	r0, [r3, #0]
 80010a2:	2325      	movs	r3, #37	; 0x25
 80010a4:	2218      	movs	r2, #24
 80010a6:	4694      	mov	ip, r2
 80010a8:	44bc      	add	ip, r7
 80010aa:	4463      	add	r3, ip
 80010ac:	2100      	movs	r1, #0
 80010ae:	5659      	ldrsb	r1, [r3, r1]
 80010b0:	2323      	movs	r3, #35	; 0x23
 80010b2:	2218      	movs	r2, #24
 80010b4:	4694      	mov	ip, r2
 80010b6:	44bc      	add	ip, r7
 80010b8:	4463      	add	r3, ip
 80010ba:	2200      	movs	r2, #0
 80010bc:	569a      	ldrsb	r2, [r3, r2]
 80010be:	0013      	movs	r3, r2
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	189b      	adds	r3, r3, r2
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	18cc      	adds	r4, r1, r3
 80010c8:	f7ff fb5a 	bl	8000780 <colorFixer>
 80010cc:	0003      	movs	r3, r0
 80010ce:	0019      	movs	r1, r3
 80010d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010d2:	0062      	lsls	r2, r4, #1
 80010d4:	52d1      	strh	r1, [r2, r3]
 80010d6:	e0af      	b.n	8001238 <drawChar+0x430>
				}
				else {
					for (int8_t k = 0; k < textSize; k++) {
 80010d8:	2320      	movs	r3, #32
 80010da:	2218      	movs	r2, #24
 80010dc:	4694      	mov	ip, r2
 80010de:	44bc      	add	ip, r7
 80010e0:	4463      	add	r3, ip
 80010e2:	2200      	movs	r2, #0
 80010e4:	701a      	strb	r2, [r3, #0]
 80010e6:	e09b      	b.n	8001220 <drawChar+0x418>
						rowOffset = textSize*6;
 80010e8:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <drawChar+0x310>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	1c1a      	adds	r2, r3, #0
 80010f0:	1c13      	adds	r3, r2, #0
 80010f2:	18db      	adds	r3, r3, r3
 80010f4:	189b      	adds	r3, r3, r2
 80010f6:	18db      	adds	r3, r3, r3
 80010f8:	b29a      	uxth	r2, r3
 80010fa:	2326      	movs	r3, #38	; 0x26
 80010fc:	2118      	movs	r1, #24
 80010fe:	468c      	mov	ip, r1
 8001100:	44bc      	add	ip, r7
 8001102:	4463      	add	r3, ip
 8001104:	801a      	strh	r2, [r3, #0]
						for (int8_t l = 0; l < textSize; l++) {
 8001106:	231f      	movs	r3, #31
 8001108:	2218      	movs	r2, #24
 800110a:	4694      	mov	ip, r2
 800110c:	44bc      	add	ip, r7
 800110e:	4463      	add	r3, ip
 8001110:	2200      	movs	r2, #0
 8001112:	701a      	strb	r2, [r3, #0]
 8001114:	e06d      	b.n	80011f2 <drawChar+0x3ea>
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	200000ea 	.word	0x200000ea
 800111c:	080090ec 	.word	0x080090ec
 8001120:	200000ec 	.word	0x200000ec
 8001124:	200000ee 	.word	0x200000ee
							address = (textSize*textSize*j*6)+(i*textSize);
 8001128:	4bda      	ldr	r3, [pc, #872]	; (8001494 <drawChar+0x68c>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	b29b      	uxth	r3, r3
 800112e:	4ad9      	ldr	r2, [pc, #868]	; (8001494 <drawChar+0x68c>)
 8001130:	7812      	ldrb	r2, [r2, #0]
 8001132:	b292      	uxth	r2, r2
 8001134:	4353      	muls	r3, r2
 8001136:	b29b      	uxth	r3, r3
 8001138:	2223      	movs	r2, #35	; 0x23
 800113a:	2118      	movs	r1, #24
 800113c:	468c      	mov	ip, r1
 800113e:	44bc      	add	ip, r7
 8001140:	4462      	add	r2, ip
 8001142:	7812      	ldrb	r2, [r2, #0]
 8001144:	b252      	sxtb	r2, r2
 8001146:	b292      	uxth	r2, r2
 8001148:	4353      	muls	r3, r2
 800114a:	b29b      	uxth	r3, r3
 800114c:	1c1a      	adds	r2, r3, #0
 800114e:	1c13      	adds	r3, r2, #0
 8001150:	18db      	adds	r3, r3, r3
 8001152:	189b      	adds	r3, r3, r2
 8001154:	18db      	adds	r3, r3, r3
 8001156:	b29a      	uxth	r2, r3
 8001158:	2325      	movs	r3, #37	; 0x25
 800115a:	2118      	movs	r1, #24
 800115c:	468c      	mov	ip, r1
 800115e:	44bc      	add	ip, r7
 8001160:	4463      	add	r3, ip
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	b25b      	sxtb	r3, r3
 8001166:	b29b      	uxth	r3, r3
 8001168:	49ca      	ldr	r1, [pc, #808]	; (8001494 <drawChar+0x68c>)
 800116a:	7809      	ldrb	r1, [r1, #0]
 800116c:	b289      	uxth	r1, r1
 800116e:	434b      	muls	r3, r1
 8001170:	b29b      	uxth	r3, r3
 8001172:	18d3      	adds	r3, r2, r3
 8001174:	b29a      	uxth	r2, r3
 8001176:	210e      	movs	r1, #14
 8001178:	2018      	movs	r0, #24
 800117a:	183b      	adds	r3, r7, r0
 800117c:	185b      	adds	r3, r3, r1
 800117e:	801a      	strh	r2, [r3, #0]
							address += rowOffset*k+l;
 8001180:	2320      	movs	r3, #32
 8001182:	2218      	movs	r2, #24
 8001184:	4694      	mov	ip, r2
 8001186:	44bc      	add	ip, r7
 8001188:	4463      	add	r3, ip
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	b25b      	sxtb	r3, r3
 800118e:	b29b      	uxth	r3, r3
 8001190:	2226      	movs	r2, #38	; 0x26
 8001192:	2418      	movs	r4, #24
 8001194:	46a4      	mov	ip, r4
 8001196:	44bc      	add	ip, r7
 8001198:	4462      	add	r2, ip
 800119a:	8812      	ldrh	r2, [r2, #0]
 800119c:	4353      	muls	r3, r2
 800119e:	b29a      	uxth	r2, r3
 80011a0:	251f      	movs	r5, #31
 80011a2:	183b      	adds	r3, r7, r0
 80011a4:	195b      	adds	r3, r3, r5
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	b25b      	sxtb	r3, r3
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	18d3      	adds	r3, r2, r3
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	183b      	adds	r3, r7, r0
 80011b2:	185b      	adds	r3, r3, r1
 80011b4:	881b      	ldrh	r3, [r3, #0]
 80011b6:	18d3      	adds	r3, r2, r3
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	183b      	adds	r3, r7, r0
 80011bc:	185b      	adds	r3, r3, r1
 80011be:	801a      	strh	r2, [r3, #0]
							buffer[address] = colorFixer(bg);
 80011c0:	4bb5      	ldr	r3, [pc, #724]	; (8001498 <drawChar+0x690>)
 80011c2:	881a      	ldrh	r2, [r3, #0]
 80011c4:	0006      	movs	r6, r0
 80011c6:	183b      	adds	r3, r7, r0
 80011c8:	185b      	adds	r3, r3, r1
 80011ca:	2400      	movs	r4, #0
 80011cc:	5f1c      	ldrsh	r4, [r3, r4]
 80011ce:	0010      	movs	r0, r2
 80011d0:	f7ff fad6 	bl	8000780 <colorFixer>
 80011d4:	0003      	movs	r3, r0
 80011d6:	0019      	movs	r1, r3
 80011d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011da:	0062      	lsls	r2, r4, #1
 80011dc:	52d1      	strh	r1, [r2, r3]
						for (int8_t l = 0; l < textSize; l++) {
 80011de:	19bb      	adds	r3, r7, r6
 80011e0:	195b      	adds	r3, r3, r5
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	b25b      	sxtb	r3, r3
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	3301      	adds	r3, #1
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	19bb      	adds	r3, r7, r6
 80011ee:	195b      	adds	r3, r3, r5
 80011f0:	701a      	strb	r2, [r3, #0]
 80011f2:	231f      	movs	r3, #31
 80011f4:	2218      	movs	r2, #24
 80011f6:	4694      	mov	ip, r2
 80011f8:	44bc      	add	ip, r7
 80011fa:	4463      	add	r3, ip
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	b25b      	sxtb	r3, r3
 8001200:	4aa4      	ldr	r2, [pc, #656]	; (8001494 <drawChar+0x68c>)
 8001202:	7812      	ldrb	r2, [r2, #0]
 8001204:	4293      	cmp	r3, r2
 8001206:	db8f      	blt.n	8001128 <drawChar+0x320>
					for (int8_t k = 0; k < textSize; k++) {
 8001208:	2120      	movs	r1, #32
 800120a:	2018      	movs	r0, #24
 800120c:	183b      	adds	r3, r7, r0
 800120e:	185b      	adds	r3, r3, r1
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	b25b      	sxtb	r3, r3
 8001214:	b2db      	uxtb	r3, r3
 8001216:	3301      	adds	r3, #1
 8001218:	b2da      	uxtb	r2, r3
 800121a:	183b      	adds	r3, r7, r0
 800121c:	185b      	adds	r3, r3, r1
 800121e:	701a      	strb	r2, [r3, #0]
 8001220:	2320      	movs	r3, #32
 8001222:	2218      	movs	r2, #24
 8001224:	4694      	mov	ip, r2
 8001226:	44bc      	add	ip, r7
 8001228:	4463      	add	r3, ip
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	b25b      	sxtb	r3, r3
 800122e:	4a99      	ldr	r2, [pc, #612]	; (8001494 <drawChar+0x68c>)
 8001230:	7812      	ldrb	r2, [r2, #0]
 8001232:	4293      	cmp	r3, r2
 8001234:	da00      	bge.n	8001238 <drawChar+0x430>
 8001236:	e757      	b.n	80010e8 <drawChar+0x2e0>
		for (int8_t j=0; j<8; j++, line >>= 1) {
 8001238:	2123      	movs	r1, #35	; 0x23
 800123a:	2018      	movs	r0, #24
 800123c:	183b      	adds	r3, r7, r0
 800123e:	185b      	adds	r3, r3, r1
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	b25b      	sxtb	r3, r3
 8001244:	b2db      	uxtb	r3, r3
 8001246:	3301      	adds	r3, #1
 8001248:	b2da      	uxtb	r2, r3
 800124a:	183b      	adds	r3, r7, r0
 800124c:	185b      	adds	r3, r3, r1
 800124e:	701a      	strb	r2, [r3, #0]
 8001250:	2224      	movs	r2, #36	; 0x24
 8001252:	183b      	adds	r3, r7, r0
 8001254:	189b      	adds	r3, r3, r2
 8001256:	2118      	movs	r1, #24
 8001258:	468c      	mov	ip, r1
 800125a:	44bc      	add	ip, r7
 800125c:	4462      	add	r2, ip
 800125e:	7812      	ldrb	r2, [r2, #0]
 8001260:	0852      	lsrs	r2, r2, #1
 8001262:	701a      	strb	r2, [r3, #0]
 8001264:	2323      	movs	r3, #35	; 0x23
 8001266:	2218      	movs	r2, #24
 8001268:	4694      	mov	ip, r2
 800126a:	44bc      	add	ip, r7
 800126c:	4463      	add	r3, ip
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	b25b      	sxtb	r3, r3
 8001272:	2b07      	cmp	r3, #7
 8001274:	dc00      	bgt.n	8001278 <drawChar+0x470>
 8001276:	e634      	b.n	8000ee2 <drawChar+0xda>
	for (int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 8001278:	2125      	movs	r1, #37	; 0x25
 800127a:	2018      	movs	r0, #24
 800127c:	183b      	adds	r3, r7, r0
 800127e:	185b      	adds	r3, r3, r1
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	b25b      	sxtb	r3, r3
 8001284:	b2db      	uxtb	r3, r3
 8001286:	3301      	adds	r3, #1
 8001288:	b2da      	uxtb	r2, r3
 800128a:	183b      	adds	r3, r7, r0
 800128c:	185b      	adds	r3, r3, r1
 800128e:	701a      	strb	r2, [r3, #0]
 8001290:	2325      	movs	r3, #37	; 0x25
 8001292:	2218      	movs	r2, #24
 8001294:	4694      	mov	ip, r2
 8001296:	44bc      	add	ip, r7
 8001298:	4463      	add	r3, ip
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	b25b      	sxtb	r3, r3
 800129e:	2b04      	cmp	r3, #4
 80012a0:	dc00      	bgt.n	80012a4 <drawChar+0x49c>
 80012a2:	e600      	b.n	8000ea6 <drawChar+0x9e>
				}
			}
		}
	}

	if (bg != textColor) { // If opaque, draw vertical line for last column
 80012a4:	4b7c      	ldr	r3, [pc, #496]	; (8001498 <drawChar+0x690>)
 80012a6:	881a      	ldrh	r2, [r3, #0]
 80012a8:	4b7c      	ldr	r3, [pc, #496]	; (800149c <drawChar+0x694>)
 80012aa:	881b      	ldrh	r3, [r3, #0]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d100      	bne.n	80012b2 <drawChar+0x4aa>
 80012b0:	e0ca      	b.n	8001448 <drawChar+0x640>
		for (int8_t j = 0; j < 8; j++) {
 80012b2:	231e      	movs	r3, #30
 80012b4:	2218      	movs	r2, #24
 80012b6:	4694      	mov	ip, r2
 80012b8:	44bc      	add	ip, r7
 80012ba:	4463      	add	r3, ip
 80012bc:	2200      	movs	r2, #0
 80012be:	701a      	strb	r2, [r3, #0]
 80012c0:	e0b8      	b.n	8001434 <drawChar+0x62c>
			if (textSize == 1) {
 80012c2:	4b74      	ldr	r3, [pc, #464]	; (8001494 <drawChar+0x68c>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d116      	bne.n	80012f8 <drawChar+0x4f0>
				buffer[5+j*6] = colorFixer(bg);
 80012ca:	4b73      	ldr	r3, [pc, #460]	; (8001498 <drawChar+0x690>)
 80012cc:	8819      	ldrh	r1, [r3, #0]
 80012ce:	231e      	movs	r3, #30
 80012d0:	2218      	movs	r2, #24
 80012d2:	4694      	mov	ip, r2
 80012d4:	44bc      	add	ip, r7
 80012d6:	4463      	add	r3, ip
 80012d8:	2200      	movs	r2, #0
 80012da:	569a      	ldrsb	r2, [r3, r2]
 80012dc:	0013      	movs	r3, r2
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	189b      	adds	r3, r3, r2
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	1d5c      	adds	r4, r3, #5
 80012e6:	0008      	movs	r0, r1
 80012e8:	f7ff fa4a 	bl	8000780 <colorFixer>
 80012ec:	0003      	movs	r3, r0
 80012ee:	0019      	movs	r1, r3
 80012f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f2:	0062      	lsls	r2, r4, #1
 80012f4:	52d1      	strh	r1, [r2, r3]
 80012f6:	e091      	b.n	800141c <drawChar+0x614>
			}
			else {
				for (int8_t k = 0; k < textSize; k++) {
 80012f8:	231d      	movs	r3, #29
 80012fa:	2218      	movs	r2, #24
 80012fc:	4694      	mov	ip, r2
 80012fe:	44bc      	add	ip, r7
 8001300:	4463      	add	r3, ip
 8001302:	2200      	movs	r2, #0
 8001304:	701a      	strb	r2, [r3, #0]
 8001306:	e07d      	b.n	8001404 <drawChar+0x5fc>
					for (int8_t l = 0; l < textSize; l++) {
 8001308:	231c      	movs	r3, #28
 800130a:	2218      	movs	r2, #24
 800130c:	4694      	mov	ip, r2
 800130e:	44bc      	add	ip, r7
 8001310:	4463      	add	r3, ip
 8001312:	2200      	movs	r2, #0
 8001314:	701a      	strb	r2, [r3, #0]
 8001316:	e05e      	b.n	80013d6 <drawChar+0x5ce>
						address = (textSize*textSize*j*6)+(5*textSize);
 8001318:	4b5e      	ldr	r3, [pc, #376]	; (8001494 <drawChar+0x68c>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	b29b      	uxth	r3, r3
 800131e:	4a5d      	ldr	r2, [pc, #372]	; (8001494 <drawChar+0x68c>)
 8001320:	7812      	ldrb	r2, [r2, #0]
 8001322:	b292      	uxth	r2, r2
 8001324:	4353      	muls	r3, r2
 8001326:	b29b      	uxth	r3, r3
 8001328:	221e      	movs	r2, #30
 800132a:	2118      	movs	r1, #24
 800132c:	468c      	mov	ip, r1
 800132e:	44bc      	add	ip, r7
 8001330:	4462      	add	r2, ip
 8001332:	7812      	ldrb	r2, [r2, #0]
 8001334:	b252      	sxtb	r2, r2
 8001336:	b292      	uxth	r2, r2
 8001338:	4353      	muls	r3, r2
 800133a:	b29b      	uxth	r3, r3
 800133c:	1c1a      	adds	r2, r3, #0
 800133e:	1c13      	adds	r3, r2, #0
 8001340:	18db      	adds	r3, r3, r3
 8001342:	189b      	adds	r3, r3, r2
 8001344:	18db      	adds	r3, r3, r3
 8001346:	b29a      	uxth	r2, r3
 8001348:	4b52      	ldr	r3, [pc, #328]	; (8001494 <drawChar+0x68c>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	b29b      	uxth	r3, r3
 800134e:	1c19      	adds	r1, r3, #0
 8001350:	0089      	lsls	r1, r1, #2
 8001352:	18cb      	adds	r3, r1, r3
 8001354:	b29b      	uxth	r3, r3
 8001356:	18d3      	adds	r3, r2, r3
 8001358:	b29a      	uxth	r2, r3
 800135a:	210e      	movs	r1, #14
 800135c:	2018      	movs	r0, #24
 800135e:	183b      	adds	r3, r7, r0
 8001360:	185b      	adds	r3, r3, r1
 8001362:	801a      	strh	r2, [r3, #0]
						address += rowOffset*k+l;
 8001364:	231d      	movs	r3, #29
 8001366:	2218      	movs	r2, #24
 8001368:	4694      	mov	ip, r2
 800136a:	44bc      	add	ip, r7
 800136c:	4463      	add	r3, ip
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	b25b      	sxtb	r3, r3
 8001372:	b29b      	uxth	r3, r3
 8001374:	2226      	movs	r2, #38	; 0x26
 8001376:	2418      	movs	r4, #24
 8001378:	46a4      	mov	ip, r4
 800137a:	44bc      	add	ip, r7
 800137c:	4462      	add	r2, ip
 800137e:	8812      	ldrh	r2, [r2, #0]
 8001380:	4353      	muls	r3, r2
 8001382:	b29a      	uxth	r2, r3
 8001384:	251c      	movs	r5, #28
 8001386:	183b      	adds	r3, r7, r0
 8001388:	195b      	adds	r3, r3, r5
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	b25b      	sxtb	r3, r3
 800138e:	b29b      	uxth	r3, r3
 8001390:	18d3      	adds	r3, r2, r3
 8001392:	b29a      	uxth	r2, r3
 8001394:	183b      	adds	r3, r7, r0
 8001396:	185b      	adds	r3, r3, r1
 8001398:	881b      	ldrh	r3, [r3, #0]
 800139a:	18d3      	adds	r3, r2, r3
 800139c:	b29a      	uxth	r2, r3
 800139e:	183b      	adds	r3, r7, r0
 80013a0:	185b      	adds	r3, r3, r1
 80013a2:	801a      	strh	r2, [r3, #0]
						buffer[address] = colorFixer(bg);
 80013a4:	4b3c      	ldr	r3, [pc, #240]	; (8001498 <drawChar+0x690>)
 80013a6:	881a      	ldrh	r2, [r3, #0]
 80013a8:	0006      	movs	r6, r0
 80013aa:	183b      	adds	r3, r7, r0
 80013ac:	185b      	adds	r3, r3, r1
 80013ae:	2400      	movs	r4, #0
 80013b0:	5f1c      	ldrsh	r4, [r3, r4]
 80013b2:	0010      	movs	r0, r2
 80013b4:	f7ff f9e4 	bl	8000780 <colorFixer>
 80013b8:	0003      	movs	r3, r0
 80013ba:	0019      	movs	r1, r3
 80013bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013be:	0062      	lsls	r2, r4, #1
 80013c0:	52d1      	strh	r1, [r2, r3]
					for (int8_t l = 0; l < textSize; l++) {
 80013c2:	19bb      	adds	r3, r7, r6
 80013c4:	195b      	adds	r3, r3, r5
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	b25b      	sxtb	r3, r3
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	3301      	adds	r3, #1
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	19bb      	adds	r3, r7, r6
 80013d2:	195b      	adds	r3, r3, r5
 80013d4:	701a      	strb	r2, [r3, #0]
 80013d6:	231c      	movs	r3, #28
 80013d8:	2218      	movs	r2, #24
 80013da:	4694      	mov	ip, r2
 80013dc:	44bc      	add	ip, r7
 80013de:	4463      	add	r3, ip
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	b25b      	sxtb	r3, r3
 80013e4:	4a2b      	ldr	r2, [pc, #172]	; (8001494 <drawChar+0x68c>)
 80013e6:	7812      	ldrb	r2, [r2, #0]
 80013e8:	4293      	cmp	r3, r2
 80013ea:	db95      	blt.n	8001318 <drawChar+0x510>
				for (int8_t k = 0; k < textSize; k++) {
 80013ec:	211d      	movs	r1, #29
 80013ee:	2018      	movs	r0, #24
 80013f0:	183b      	adds	r3, r7, r0
 80013f2:	185b      	adds	r3, r3, r1
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	b25b      	sxtb	r3, r3
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	3301      	adds	r3, #1
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	183b      	adds	r3, r7, r0
 8001400:	185b      	adds	r3, r3, r1
 8001402:	701a      	strb	r2, [r3, #0]
 8001404:	231d      	movs	r3, #29
 8001406:	2218      	movs	r2, #24
 8001408:	4694      	mov	ip, r2
 800140a:	44bc      	add	ip, r7
 800140c:	4463      	add	r3, ip
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	b25b      	sxtb	r3, r3
 8001412:	4a20      	ldr	r2, [pc, #128]	; (8001494 <drawChar+0x68c>)
 8001414:	7812      	ldrb	r2, [r2, #0]
 8001416:	4293      	cmp	r3, r2
 8001418:	da00      	bge.n	800141c <drawChar+0x614>
 800141a:	e775      	b.n	8001308 <drawChar+0x500>
		for (int8_t j = 0; j < 8; j++) {
 800141c:	211e      	movs	r1, #30
 800141e:	2018      	movs	r0, #24
 8001420:	183b      	adds	r3, r7, r0
 8001422:	185b      	adds	r3, r3, r1
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	b25b      	sxtb	r3, r3
 8001428:	b2db      	uxtb	r3, r3
 800142a:	3301      	adds	r3, #1
 800142c:	b2da      	uxtb	r2, r3
 800142e:	183b      	adds	r3, r7, r0
 8001430:	185b      	adds	r3, r3, r1
 8001432:	701a      	strb	r2, [r3, #0]
 8001434:	231e      	movs	r3, #30
 8001436:	2218      	movs	r2, #24
 8001438:	4694      	mov	ip, r2
 800143a:	44bc      	add	ip, r7
 800143c:	4463      	add	r3, ip
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	b25b      	sxtb	r3, r3
 8001442:	2b07      	cmp	r3, #7
 8001444:	dc00      	bgt.n	8001448 <drawChar+0x640>
 8001446:	e73c      	b.n	80012c2 <drawChar+0x4ba>
			}
		}
//		else fillRect(cursorX+5*textSize, cursorY, textSize, 8*textSize, bg, hspi);
	}

	drawBuffer(cursorX, cursorY, 6*textSize, 8*textSize, buffer, bufferSize, hspi);
 8001448:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <drawChar+0x698>)
 800144a:	7818      	ldrb	r0, [r3, #0]
 800144c:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <drawChar+0x69c>)
 800144e:	7819      	ldrb	r1, [r3, #0]
 8001450:	4b10      	ldr	r3, [pc, #64]	; (8001494 <drawChar+0x68c>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	1c1a      	adds	r2, r3, #0
 8001456:	1c13      	adds	r3, r2, #0
 8001458:	18db      	adds	r3, r3, r3
 800145a:	189b      	adds	r3, r3, r2
 800145c:	18db      	adds	r3, r3, r3
 800145e:	b2dc      	uxtb	r4, r3
 8001460:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <drawChar+0x68c>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	b2dd      	uxtb	r5, r3
 8001468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	9202      	str	r2, [sp, #8]
 800146e:	221a      	movs	r2, #26
 8001470:	2618      	movs	r6, #24
 8001472:	46b4      	mov	ip, r6
 8001474:	44bc      	add	ip, r7
 8001476:	4462      	add	r2, ip
 8001478:	8812      	ldrh	r2, [r2, #0]
 800147a:	9201      	str	r2, [sp, #4]
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	002b      	movs	r3, r5
 8001480:	0022      	movs	r2, r4
 8001482:	f7ff faee 	bl	8000a62 <drawBuffer>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	469d      	mov	sp, r3
//	setCursor(cursorX+6, cursorY);
}
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	46bd      	mov	sp, r7
 800148e:	b011      	add	sp, #68	; 0x44
 8001490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001492:	46c0      	nop			; (mov r8, r8)
 8001494:	200000ea 	.word	0x200000ea
 8001498:	200000ee 	.word	0x200000ee
 800149c:	200000ec 	.word	0x200000ec
 80014a0:	200000e8 	.word	0x200000e8
 80014a4:	200000e9 	.word	0x200000e9

080014a8 <drawText>:

// this function is slow, and you can definitely see a scrolling speed thing going on
// how to remove this so it prints near instantly?
// maybe not needed if all we're doing is printing time (very few characters)
void drawText(const char *str, SPI_HandleTypeDef *hspi) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
	// add text wrap
	for (int i = 0; str[i] != '\0'; i++) {
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	e01d      	b.n	80014f4 <drawText+0x4c>
		drawChar(str[i], hspi);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	18d3      	adds	r3, r2, r3
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	0011      	movs	r1, r2
 80014c4:	0018      	movs	r0, r3
 80014c6:	f7ff fc9f 	bl	8000e08 <drawChar>
		setCursor(cursorX+textSize*6, cursorY);
 80014ca:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <drawText+0x60>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	1c1a      	adds	r2, r3, #0
 80014d0:	1c13      	adds	r3, r2, #0
 80014d2:	18db      	adds	r3, r3, r3
 80014d4:	189b      	adds	r3, r3, r2
 80014d6:	18db      	adds	r3, r3, r3
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	4b0c      	ldr	r3, [pc, #48]	; (800150c <drawText+0x64>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	18d3      	adds	r3, r2, r3
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <drawText+0x68>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	0019      	movs	r1, r3
 80014e8:	0010      	movs	r0, r2
 80014ea:	f000 f823 	bl	8001534 <setCursor>
	for (int i = 0; str[i] != '\0'; i++) {
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	3301      	adds	r3, #1
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	18d3      	adds	r3, r2, r3
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1db      	bne.n	80014b8 <drawText+0x10>
	}
}
 8001500:	46c0      	nop			; (mov r8, r8)
 8001502:	46bd      	mov	sp, r7
 8001504:	b004      	add	sp, #16
 8001506:	bd80      	pop	{r7, pc}
 8001508:	200000ea 	.word	0x200000ea
 800150c:	200000e8 	.word	0x200000e8
 8001510:	200000e9 	.word	0x200000e9

08001514 <setBackgroundColor>:
		setCursor(cursorX+textSize*6, cursorY);
	}
//	setCursor(x+i*textSize*6, y);
}

void setBackgroundColor(uint16_t color) {bg = color;}
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	0002      	movs	r2, r0
 800151c:	1dbb      	adds	r3, r7, #6
 800151e:	801a      	strh	r2, [r3, #0]
 8001520:	4b03      	ldr	r3, [pc, #12]	; (8001530 <setBackgroundColor+0x1c>)
 8001522:	1dba      	adds	r2, r7, #6
 8001524:	8812      	ldrh	r2, [r2, #0]
 8001526:	801a      	strh	r2, [r3, #0]
 8001528:	46c0      	nop			; (mov r8, r8)
 800152a:	46bd      	mov	sp, r7
 800152c:	b002      	add	sp, #8
 800152e:	bd80      	pop	{r7, pc}
 8001530:	200000ee 	.word	0x200000ee

08001534 <setCursor>:

void setCursor(uint8_t x, uint8_t y) {
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	0002      	movs	r2, r0
 800153c:	1dfb      	adds	r3, r7, #7
 800153e:	701a      	strb	r2, [r3, #0]
 8001540:	1dbb      	adds	r3, r7, #6
 8001542:	1c0a      	adds	r2, r1, #0
 8001544:	701a      	strb	r2, [r3, #0]
	cursorX = x;
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <setCursor+0x2c>)
 8001548:	1dfa      	adds	r2, r7, #7
 800154a:	7812      	ldrb	r2, [r2, #0]
 800154c:	701a      	strb	r2, [r3, #0]
	cursorY = y;
 800154e:	4b05      	ldr	r3, [pc, #20]	; (8001564 <setCursor+0x30>)
 8001550:	1dba      	adds	r2, r7, #6
 8001552:	7812      	ldrb	r2, [r2, #0]
 8001554:	701a      	strb	r2, [r3, #0]
}
 8001556:	46c0      	nop			; (mov r8, r8)
 8001558:	46bd      	mov	sp, r7
 800155a:	b002      	add	sp, #8
 800155c:	bd80      	pop	{r7, pc}
 800155e:	46c0      	nop			; (mov r8, r8)
 8001560:	200000e8 	.word	0x200000e8
 8001564:	200000e9 	.word	0x200000e9

08001568 <setTextSize>:

void setTextSize(uint8_t size) {textSize = size;}
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	0002      	movs	r2, r0
 8001570:	1dfb      	adds	r3, r7, #7
 8001572:	701a      	strb	r2, [r3, #0]
 8001574:	4b03      	ldr	r3, [pc, #12]	; (8001584 <setTextSize+0x1c>)
 8001576:	1dfa      	adds	r2, r7, #7
 8001578:	7812      	ldrb	r2, [r2, #0]
 800157a:	701a      	strb	r2, [r3, #0]
 800157c:	46c0      	nop			; (mov r8, r8)
 800157e:	46bd      	mov	sp, r7
 8001580:	b002      	add	sp, #8
 8001582:	bd80      	pop	{r7, pc}
 8001584:	200000ea 	.word	0x200000ea

08001588 <setTextColor>:

void setTextColor(uint16_t color) {textColor = color;}
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	0002      	movs	r2, r0
 8001590:	1dbb      	adds	r3, r7, #6
 8001592:	801a      	strh	r2, [r3, #0]
 8001594:	4b03      	ldr	r3, [pc, #12]	; (80015a4 <setTextColor+0x1c>)
 8001596:	1dba      	adds	r2, r7, #6
 8001598:	8812      	ldrh	r2, [r2, #0]
 800159a:	801a      	strh	r2, [r3, #0]
 800159c:	46c0      	nop			; (mov r8, r8)
 800159e:	46bd      	mov	sp, r7
 80015a0:	b002      	add	sp, #8
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	200000ec 	.word	0x200000ec

080015a8 <clearScreen>:

void clearScreen(uint16_t backgroundColor, SPI_HandleTypeDef *hspi) {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	0002      	movs	r2, r0
 80015b0:	6039      	str	r1, [r7, #0]
 80015b2:	1dbb      	adds	r3, r7, #6
 80015b4:	801a      	strh	r2, [r3, #0]
	bg = backgroundColor;
 80015b6:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <clearScreen+0x2c>)
 80015b8:	1dba      	adds	r2, r7, #6
 80015ba:	8812      	ldrh	r2, [r2, #0]
 80015bc:	801a      	strh	r2, [r3, #0]
	fillScreen(backgroundColor, hspi);
 80015be:	683a      	ldr	r2, [r7, #0]
 80015c0:	1dbb      	adds	r3, r7, #6
 80015c2:	881b      	ldrh	r3, [r3, #0]
 80015c4:	0011      	movs	r1, r2
 80015c6:	0018      	movs	r0, r3
 80015c8:	f7ff fb21 	bl	8000c0e <fillScreen>
}
 80015cc:	46c0      	nop			; (mov r8, r8)
 80015ce:	46bd      	mov	sp, r7
 80015d0:	b002      	add	sp, #8
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	200000ee 	.word	0x200000ee

080015d8 <setTime>:

#include "clocks.h"

// set rtc time. uses perosnal struct as arg
// assert members not null for set functions?
void setTime(struct times *t, RTC_HandleTypeDef *hrtc) {
 80015d8:	b590      	push	{r4, r7, lr}
 80015da:	b089      	sub	sp, #36	; 0x24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
	RTC_TimeTypeDef stime = {0};	// change to malloc call? does that work in embedded?
 80015e2:	210c      	movs	r1, #12
 80015e4:	000c      	movs	r4, r1
 80015e6:	187b      	adds	r3, r7, r1
 80015e8:	0018      	movs	r0, r3
 80015ea:	2314      	movs	r3, #20
 80015ec:	001a      	movs	r2, r3
 80015ee:	2100      	movs	r1, #0
 80015f0:	f007 f82f 	bl	8008652 <memset>

	// set using args later
	stime.Hours = t->hr;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	781a      	ldrb	r2, [r3, #0]
 80015f8:	0021      	movs	r1, r4
 80015fa:	187b      	adds	r3, r7, r1
 80015fc:	701a      	strb	r2, [r3, #0]
	stime.Minutes = t->min;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	785a      	ldrb	r2, [r3, #1]
 8001602:	187b      	adds	r3, r7, r1
 8001604:	705a      	strb	r2, [r3, #1]
	stime.Seconds = t->sec;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	789a      	ldrb	r2, [r3, #2]
 800160a:	187b      	adds	r3, r7, r1
 800160c:	709a      	strb	r2, [r3, #2]

	stime.TimeFormat = RTC_HOURFORMAT_24;
 800160e:	187b      	adds	r3, r7, r1
 8001610:	2200      	movs	r2, #0
 8001612:	70da      	strb	r2, [r3, #3]

	// not sure what these do, but probably fine if set to 0 or ignored
	stime.SubSeconds = 0;
 8001614:	187b      	adds	r3, r7, r1
 8001616:	2200      	movs	r2, #0
 8001618:	605a      	str	r2, [r3, #4]
	stime.SecondFraction = 0;
 800161a:	187b      	adds	r3, r7, r1
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]

	stime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;		// add daylight savings later?
 8001620:	187b      	adds	r3, r7, r1
 8001622:	2200      	movs	r2, #0
 8001624:	60da      	str	r2, [r3, #12]
	stime.StoreOperation = RTC_STOREOPERATION_SET;		// not sure what this does
 8001626:	187b      	adds	r3, r7, r1
 8001628:	2280      	movs	r2, #128	; 0x80
 800162a:	02d2      	lsls	r2, r2, #11
 800162c:	611a      	str	r2, [r3, #16]

	// do nothing until done
	// not following BCD format (4-bit digit 1, 4-bit digit 2)
	// while makes program hang? ignore instead?
//	while (HAL_RTC_SetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK);
	HAL_RTC_SetTime(hrtc, &stime, RTC_FORMAT_BIN);
 800162e:	1879      	adds	r1, r7, r1
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	2200      	movs	r2, #0
 8001634:	0018      	movs	r0, r3
 8001636:	f004 ff5b 	bl	80064f0 <HAL_RTC_SetTime>

//	runClockDisplay(&htim22);
}
 800163a:	46c0      	nop			; (mov r8, r8)
 800163c:	46bd      	mov	sp, r7
 800163e:	b009      	add	sp, #36	; 0x24
 8001640:	bd90      	pop	{r4, r7, pc}

08001642 <setDate>:

// set rtc date. uses personal struct
void setDate(struct dates *d, RTC_HandleTypeDef *hrtc) {
 8001642:	b590      	push	{r4, r7, lr}
 8001644:	b085      	sub	sp, #20
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
 800164a:	6039      	str	r1, [r7, #0]
	// ---- date ----
	RTC_DateTypeDef sdate = {0};
 800164c:	240c      	movs	r4, #12
 800164e:	193b      	adds	r3, r7, r4
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]

	sdate.Month = d->month;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	789a      	ldrb	r2, [r3, #2]
 8001658:	193b      	adds	r3, r7, r4
 800165a:	705a      	strb	r2, [r3, #1]
	sdate.Date = d->date;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	78da      	ldrb	r2, [r3, #3]
 8001660:	193b      	adds	r3, r7, r4
 8001662:	709a      	strb	r2, [r3, #2]
	sdate.WeekDay = weekdayCalculator(d->yr, d->month, d->date) % 7;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	8818      	ldrh	r0, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	7899      	ldrb	r1, [r3, #2]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	78db      	ldrb	r3, [r3, #3]
 8001670:	001a      	movs	r2, r3
 8001672:	f000 fa35 	bl	8001ae0 <weekdayCalculator>
 8001676:	0003      	movs	r3, r0
 8001678:	2107      	movs	r1, #7
 800167a:	0018      	movs	r0, r3
 800167c:	f7fe fdd2 	bl	8000224 <__aeabi_uidivmod>
 8001680:	000b      	movs	r3, r1
 8001682:	b2da      	uxtb	r2, r3
 8001684:	193b      	adds	r3, r7, r4
 8001686:	701a      	strb	r2, [r3, #0]
	sdate.Year = d->yr % 100; 		// set only between 0-99. part of the library (!?)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	881b      	ldrh	r3, [r3, #0]
 800168c:	2164      	movs	r1, #100	; 0x64
 800168e:	0018      	movs	r0, r3
 8001690:	f7fe fdc8 	bl	8000224 <__aeabi_uidivmod>
 8001694:	000b      	movs	r3, r1
 8001696:	b29b      	uxth	r3, r3
 8001698:	b2da      	uxtb	r2, r3
 800169a:	193b      	adds	r3, r7, r4
 800169c:	70da      	strb	r2, [r3, #3]

	HAL_RTC_SetDate(hrtc, &sdate, RTC_FORMAT_BIN);
 800169e:	1939      	adds	r1, r7, r4
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	2200      	movs	r2, #0
 80016a4:	0018      	movs	r0, r3
 80016a6:	f005 f843 	bl	8006730 <HAL_RTC_SetDate>

//	runClockDisplay(&htim22);
}
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	46bd      	mov	sp, r7
 80016ae:	b005      	add	sp, #20
 80016b0:	bd90      	pop	{r4, r7, pc}

080016b2 <setDateTime>:

void setDateTime(struct dates *d, struct times *t, RTC_HandleTypeDef *hrtc) {
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b084      	sub	sp, #16
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	60f8      	str	r0, [r7, #12]
 80016ba:	60b9      	str	r1, [r7, #8]
 80016bc:	607a      	str	r2, [r7, #4]
	setDate(d, hrtc);
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	0011      	movs	r1, r2
 80016c4:	0018      	movs	r0, r3
 80016c6:	f7ff ffbc 	bl	8001642 <setDate>
	setTime(t, hrtc);
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	0011      	movs	r1, r2
 80016d0:	0018      	movs	r0, r3
 80016d2:	f7ff ff81 	bl	80015d8 <setTime>
}
 80016d6:	46c0      	nop			; (mov r8, r8)
 80016d8:	46bd      	mov	sp, r7
 80016da:	b004      	add	sp, #16
 80016dc:	bd80      	pop	{r7, pc}
	...

080016e0 <setAlarm>:

// for time of day+week
void setAlarm(struct alarmTimes *a, RTC_HandleTypeDef *hrtc) {
 80016e0:	b5b0      	push	{r4, r5, r7, lr}
 80016e2:	b092      	sub	sp, #72	; 0x48
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
	RTC_AlarmTypeDef salarm = {0};		// is there a problem with using pointers instead?
 80016ea:	2520      	movs	r5, #32
 80016ec:	197b      	adds	r3, r7, r5
 80016ee:	0018      	movs	r0, r3
 80016f0:	2328      	movs	r3, #40	; 0x28
 80016f2:	001a      	movs	r2, r3
 80016f4:	2100      	movs	r1, #0
 80016f6:	f006 ffac 	bl	8008652 <memset>
	RTC_TimeTypeDef salarmtime = {0};
 80016fa:	240c      	movs	r4, #12
 80016fc:	193b      	adds	r3, r7, r4
 80016fe:	0018      	movs	r0, r3
 8001700:	2314      	movs	r3, #20
 8001702:	001a      	movs	r2, r3
 8001704:	2100      	movs	r1, #0
 8001706:	f006 ffa4 	bl	8008652 <memset>

	watchAlarm = *a;	// this is probably fine (value at a is defined already)
 800170a:	4a23      	ldr	r2, [pc, #140]	; (8001798 <setAlarm+0xb8>)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	0010      	movs	r0, r2
 8001710:	0019      	movs	r1, r3
 8001712:	2304      	movs	r3, #4
 8001714:	001a      	movs	r2, r3
 8001716:	f006 ff93 	bl	8008640 <memcpy>

	// change to set with args
	salarmtime.Hours = a->hr;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	781a      	ldrb	r2, [r3, #0]
 800171e:	193b      	adds	r3, r7, r4
 8001720:	701a      	strb	r2, [r3, #0]
	salarmtime.Minutes = a->min;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	785a      	ldrb	r2, [r3, #1]
 8001726:	193b      	adds	r3, r7, r4
 8001728:	705a      	strb	r2, [r3, #1]
	salarmtime.Seconds = a->sec;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	789a      	ldrb	r2, [r3, #2]
 800172e:	193b      	adds	r3, r7, r4
 8001730:	709a      	strb	r2, [r3, #2]
	salarmtime.TimeFormat = RTC_HOURFORMAT_24;
 8001732:	193b      	adds	r3, r7, r4
 8001734:	2200      	movs	r2, #0
 8001736:	70da      	strb	r2, [r3, #3]
	salarmtime.SubSeconds = 0;
 8001738:	0021      	movs	r1, r4
 800173a:	187b      	adds	r3, r7, r1
 800173c:	2200      	movs	r2, #0
 800173e:	605a      	str	r2, [r3, #4]
	salarmtime.SecondFraction = 0;
 8001740:	187b      	adds	r3, r7, r1
 8001742:	2200      	movs	r2, #0
 8001744:	609a      	str	r2, [r3, #8]
	salarmtime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001746:	187b      	adds	r3, r7, r1
 8001748:	2200      	movs	r2, #0
 800174a:	60da      	str	r2, [r3, #12]
	salarmtime.StoreOperation = RTC_STOREOPERATION_RESET;
 800174c:	187b      	adds	r3, r7, r1
 800174e:	2200      	movs	r2, #0
 8001750:	611a      	str	r2, [r3, #16]

	salarm.AlarmTime = salarmtime;
 8001752:	197b      	adds	r3, r7, r5
 8001754:	187a      	adds	r2, r7, r1
 8001756:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001758:	c313      	stmia	r3!, {r0, r1, r4}
 800175a:	ca03      	ldmia	r2!, {r0, r1}
 800175c:	c303      	stmia	r3!, {r0, r1}
	salarm.AlarmMask = RTC_ALARMMASK_NONE;
 800175e:	197b      	adds	r3, r7, r5
 8001760:	2200      	movs	r2, #0
 8001762:	615a      	str	r2, [r3, #20]
	salarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001764:	197b      	adds	r3, r7, r5
 8001766:	2200      	movs	r2, #0
 8001768:	619a      	str	r2, [r3, #24]
	salarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 800176a:	197b      	adds	r3, r7, r5
 800176c:	2280      	movs	r2, #128	; 0x80
 800176e:	05d2      	lsls	r2, r2, #23
 8001770:	61da      	str	r2, [r3, #28]
	salarm.AlarmDateWeekDay = a->weekday;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	78d9      	ldrb	r1, [r3, #3]
 8001776:	197b      	adds	r3, r7, r5
 8001778:	2220      	movs	r2, #32
 800177a:	5499      	strb	r1, [r3, r2]
	salarm.Alarm = RTC_ALARM_A;			// change if using different alarm
 800177c:	197b      	adds	r3, r7, r5
 800177e:	2280      	movs	r2, #128	; 0x80
 8001780:	0052      	lsls	r2, r2, #1
 8001782:	625a      	str	r2, [r3, #36]	; 0x24

	// do nothing until done
	HAL_RTC_SetAlarm_IT(hrtc, &salarm, RTC_FORMAT_BIN);
 8001784:	1979      	adds	r1, r7, r5
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	2200      	movs	r2, #0
 800178a:	0018      	movs	r0, r3
 800178c:	f005 f8cc 	bl	8006928 <HAL_RTC_SetAlarm_IT>
}
 8001790:	46c0      	nop			; (mov r8, r8)
 8001792:	46bd      	mov	sp, r7
 8001794:	b012      	add	sp, #72	; 0x48
 8001796:	bdb0      	pop	{r4, r5, r7, pc}
 8001798:	20000138 	.word	0x20000138

0800179c <setClockAlarm>:

// set an alarm for the next second.
// for triggering display updates.
// uses rtc weekday. should have weekday calculator integrated before using
void setClockAlarm(RTC_HandleTypeDef *hrtc) {
 800179c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800179e:	b097      	sub	sp, #92	; 0x5c
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
	RTC_AlarmTypeDef salarm = {0};			// malloc if using pointers
 80017a4:	242c      	movs	r4, #44	; 0x2c
 80017a6:	193b      	adds	r3, r7, r4
 80017a8:	0018      	movs	r0, r3
 80017aa:	2328      	movs	r3, #40	; 0x28
 80017ac:	001a      	movs	r2, r3
 80017ae:	2100      	movs	r1, #0
 80017b0:	f006 ff4f 	bl	8008652 <memset>
	RTC_TimeTypeDef salarmtime = {0};
 80017b4:	2518      	movs	r5, #24
 80017b6:	197b      	adds	r3, r7, r5
 80017b8:	0018      	movs	r0, r3
 80017ba:	2314      	movs	r3, #20
 80017bc:	001a      	movs	r2, r3
 80017be:	2100      	movs	r1, #0
 80017c0:	f006 ff47 	bl	8008652 <memset>

	struct dates currentDate = {0};
 80017c4:	2310      	movs	r3, #16
 80017c6:	18fb      	adds	r3, r7, r3
 80017c8:	0018      	movs	r0, r3
 80017ca:	2306      	movs	r3, #6
 80017cc:	001a      	movs	r2, r3
 80017ce:	2100      	movs	r1, #0
 80017d0:	f006 ff3f 	bl	8008652 <memset>
	struct times currentTime = {0};
 80017d4:	210c      	movs	r1, #12
 80017d6:	000e      	movs	r6, r1
 80017d8:	187b      	adds	r3, r7, r1
 80017da:	0018      	movs	r0, r3
 80017dc:	2303      	movs	r3, #3
 80017de:	001a      	movs	r2, r3
 80017e0:	2100      	movs	r1, #0
 80017e2:	f006 ff36 	bl	8008652 <memset>

	getDateTime(&currentDate, &currentTime, hrtc);
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	0031      	movs	r1, r6
 80017ea:	000c      	movs	r4, r1
 80017ec:	1879      	adds	r1, r7, r1
 80017ee:	2310      	movs	r3, #16
 80017f0:	18fb      	adds	r3, r7, r3
 80017f2:	0018      	movs	r0, r3
 80017f4:	f000 f8da 	bl	80019ac <getDateTime>

	struct alarmTimes a = {0};
 80017f8:	2608      	movs	r6, #8
 80017fa:	19bb      	adds	r3, r7, r6
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
	uint8_t s,m,h,w;
	s = currentTime.sec + 1;
 8001800:	0021      	movs	r1, r4
 8001802:	187b      	adds	r3, r7, r1
 8001804:	789a      	ldrb	r2, [r3, #2]
 8001806:	2057      	movs	r0, #87	; 0x57
 8001808:	183b      	adds	r3, r7, r0
 800180a:	3201      	adds	r2, #1
 800180c:	701a      	strb	r2, [r3, #0]
	m = currentTime.min + s/60;
 800180e:	187b      	adds	r3, r7, r1
 8001810:	785c      	ldrb	r4, [r3, #1]
 8001812:	183b      	adds	r3, r7, r0
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	213c      	movs	r1, #60	; 0x3c
 8001818:	0018      	movs	r0, r3
 800181a:	f7fe fc7d 	bl	8000118 <__udivsi3>
 800181e:	0003      	movs	r3, r0
 8001820:	b2da      	uxtb	r2, r3
 8001822:	2056      	movs	r0, #86	; 0x56
 8001824:	183b      	adds	r3, r7, r0
 8001826:	18a2      	adds	r2, r4, r2
 8001828:	701a      	strb	r2, [r3, #0]
	h = currentTime.hr + m/60;
 800182a:	210c      	movs	r1, #12
 800182c:	187b      	adds	r3, r7, r1
 800182e:	781c      	ldrb	r4, [r3, #0]
 8001830:	0002      	movs	r2, r0
 8001832:	18bb      	adds	r3, r7, r2
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	213c      	movs	r1, #60	; 0x3c
 8001838:	0018      	movs	r0, r3
 800183a:	f7fe fc6d 	bl	8000118 <__udivsi3>
 800183e:	0003      	movs	r3, r0
 8001840:	b2da      	uxtb	r2, r3
 8001842:	2155      	movs	r1, #85	; 0x55
 8001844:	187b      	adds	r3, r7, r1
 8001846:	18a2      	adds	r2, r4, r2
 8001848:	701a      	strb	r2, [r3, #0]
	w = currentDate.weekday + h/24;
 800184a:	2310      	movs	r3, #16
 800184c:	18fb      	adds	r3, r7, r3
 800184e:	791c      	ldrb	r4, [r3, #4]
 8001850:	187b      	adds	r3, r7, r1
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2118      	movs	r1, #24
 8001856:	0018      	movs	r0, r3
 8001858:	f7fe fc5e 	bl	8000118 <__udivsi3>
 800185c:	0003      	movs	r3, r0
 800185e:	b2da      	uxtb	r2, r3
 8001860:	2354      	movs	r3, #84	; 0x54
 8001862:	18fb      	adds	r3, r7, r3
 8001864:	18a2      	adds	r2, r4, r2
 8001866:	701a      	strb	r2, [r3, #0]
	a.sec = s % 60;
 8001868:	2057      	movs	r0, #87	; 0x57
 800186a:	183b      	adds	r3, r7, r0
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	213c      	movs	r1, #60	; 0x3c
 8001870:	0018      	movs	r0, r3
 8001872:	f7fe fcd7 	bl	8000224 <__aeabi_uidivmod>
 8001876:	000b      	movs	r3, r1
 8001878:	b2da      	uxtb	r2, r3
 800187a:	19bb      	adds	r3, r7, r6
 800187c:	709a      	strb	r2, [r3, #2]
	a.min = m % 60;
 800187e:	2256      	movs	r2, #86	; 0x56
 8001880:	18bb      	adds	r3, r7, r2
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	213c      	movs	r1, #60	; 0x3c
 8001886:	0018      	movs	r0, r3
 8001888:	f7fe fccc 	bl	8000224 <__aeabi_uidivmod>
 800188c:	000b      	movs	r3, r1
 800188e:	b2da      	uxtb	r2, r3
 8001890:	19bb      	adds	r3, r7, r6
 8001892:	705a      	strb	r2, [r3, #1]
	a.hr = h % 24;
 8001894:	2155      	movs	r1, #85	; 0x55
 8001896:	187b      	adds	r3, r7, r1
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2118      	movs	r1, #24
 800189c:	0018      	movs	r0, r3
 800189e:	f7fe fcc1 	bl	8000224 <__aeabi_uidivmod>
 80018a2:	000b      	movs	r3, r1
 80018a4:	b2da      	uxtb	r2, r3
 80018a6:	19bb      	adds	r3, r7, r6
 80018a8:	701a      	strb	r2, [r3, #0]
	a.weekday = (w-1) % 7 + 1;
 80018aa:	2354      	movs	r3, #84	; 0x54
 80018ac:	18fb      	adds	r3, r7, r3
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	3b01      	subs	r3, #1
 80018b2:	2107      	movs	r1, #7
 80018b4:	0018      	movs	r0, r3
 80018b6:	f7fe fd9f 	bl	80003f8 <__aeabi_idivmod>
 80018ba:	000b      	movs	r3, r1
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	3301      	adds	r3, #1
 80018c0:	b2da      	uxtb	r2, r3
 80018c2:	0030      	movs	r0, r6
 80018c4:	183b      	adds	r3, r7, r0
 80018c6:	70da      	strb	r2, [r3, #3]

	salarmtime.Hours = a.hr;
 80018c8:	183b      	adds	r3, r7, r0
 80018ca:	781a      	ldrb	r2, [r3, #0]
 80018cc:	197b      	adds	r3, r7, r5
 80018ce:	701a      	strb	r2, [r3, #0]
	salarmtime.Minutes = a.min;
 80018d0:	183b      	adds	r3, r7, r0
 80018d2:	785a      	ldrb	r2, [r3, #1]
 80018d4:	197b      	adds	r3, r7, r5
 80018d6:	705a      	strb	r2, [r3, #1]
	salarmtime.Seconds = a.sec;
 80018d8:	183b      	adds	r3, r7, r0
 80018da:	789a      	ldrb	r2, [r3, #2]
 80018dc:	197b      	adds	r3, r7, r5
 80018de:	709a      	strb	r2, [r3, #2]
	salarmtime.TimeFormat = RTC_HOURFORMAT_24;
 80018e0:	197b      	adds	r3, r7, r5
 80018e2:	2200      	movs	r2, #0
 80018e4:	70da      	strb	r2, [r3, #3]
	salarmtime.SubSeconds = 0;
 80018e6:	0029      	movs	r1, r5
 80018e8:	187b      	adds	r3, r7, r1
 80018ea:	2200      	movs	r2, #0
 80018ec:	605a      	str	r2, [r3, #4]
	salarmtime.SecondFraction = 0;
 80018ee:	187b      	adds	r3, r7, r1
 80018f0:	2200      	movs	r2, #0
 80018f2:	609a      	str	r2, [r3, #8]
	salarmtime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80018f4:	187b      	adds	r3, r7, r1
 80018f6:	2200      	movs	r2, #0
 80018f8:	60da      	str	r2, [r3, #12]
	salarmtime.StoreOperation = RTC_STOREOPERATION_RESET;
 80018fa:	187b      	adds	r3, r7, r1
 80018fc:	2200      	movs	r2, #0
 80018fe:	611a      	str	r2, [r3, #16]

	salarm.AlarmTime = salarmtime;
 8001900:	242c      	movs	r4, #44	; 0x2c
 8001902:	193b      	adds	r3, r7, r4
 8001904:	187a      	adds	r2, r7, r1
 8001906:	ca62      	ldmia	r2!, {r1, r5, r6}
 8001908:	c362      	stmia	r3!, {r1, r5, r6}
 800190a:	ca22      	ldmia	r2!, {r1, r5}
 800190c:	c322      	stmia	r3!, {r1, r5}
	salarm.AlarmMask = RTC_ALARMMASK_NONE;
 800190e:	193b      	adds	r3, r7, r4
 8001910:	2200      	movs	r2, #0
 8001912:	615a      	str	r2, [r3, #20]
	salarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001914:	193b      	adds	r3, r7, r4
 8001916:	2200      	movs	r2, #0
 8001918:	619a      	str	r2, [r3, #24]
	salarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 800191a:	193b      	adds	r3, r7, r4
 800191c:	2280      	movs	r2, #128	; 0x80
 800191e:	05d2      	lsls	r2, r2, #23
 8001920:	61da      	str	r2, [r3, #28]
	salarm.AlarmDateWeekDay = a.weekday;
 8001922:	183b      	adds	r3, r7, r0
 8001924:	78d9      	ldrb	r1, [r3, #3]
 8001926:	193b      	adds	r3, r7, r4
 8001928:	2220      	movs	r2, #32
 800192a:	5499      	strb	r1, [r3, r2]
	salarm.Alarm = RTC_ALARM_B;			// change if using different alarm
 800192c:	193b      	adds	r3, r7, r4
 800192e:	2280      	movs	r2, #128	; 0x80
 8001930:	0092      	lsls	r2, r2, #2
 8001932:	625a      	str	r2, [r3, #36]	; 0x24

	// do nothing until done
	HAL_RTC_SetAlarm_IT(hrtc, &salarm, RTC_FORMAT_BIN);
 8001934:	1939      	adds	r1, r7, r4
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	0018      	movs	r0, r3
 800193c:	f004 fff4 	bl	8006928 <HAL_RTC_SetAlarm_IT>
}
 8001940:	46c0      	nop			; (mov r8, r8)
 8001942:	46bd      	mov	sp, r7
 8001944:	b017      	add	sp, #92	; 0x5c
 8001946:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001948 <HAL_RTC_AlarmAEventCallback>:

// ---- callbacks for interrupts ----
// used for alarm function in project
// meant to send signal to use motor
// change to use hw timer so signal is temporary
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
	// change pin to whatever's accessible
	// using PC0
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 8001950:	4b0a      	ldr	r3, [pc, #40]	; (800197c <HAL_RTC_AlarmAEventCallback+0x34>)
 8001952:	2101      	movs	r1, #1
 8001954:	0018      	movs	r0, r3
 8001956:	f003 fca5 	bl	80052a4 <HAL_GPIO_TogglePin>

	HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_A);
 800195a:	2380      	movs	r3, #128	; 0x80
 800195c:	005a      	lsls	r2, r3, #1
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	0011      	movs	r1, r2
 8001962:	0018      	movs	r0, r3
 8001964:	f005 f92c 	bl	8006bc0 <HAL_RTC_DeactivateAlarm>
	isAlarmRunning = 0;
 8001968:	4b05      	ldr	r3, [pc, #20]	; (8001980 <HAL_RTC_AlarmAEventCallback+0x38>)
 800196a:	2200      	movs	r2, #0
 800196c:	701a      	strb	r2, [r3, #0]
	updateFace.alarm = 1;
 800196e:	4b05      	ldr	r3, [pc, #20]	; (8001984 <HAL_RTC_AlarmAEventCallback+0x3c>)
 8001970:	2201      	movs	r2, #1
 8001972:	709a      	strb	r2, [r3, #2]
}
 8001974:	46c0      	nop			; (mov r8, r8)
 8001976:	46bd      	mov	sp, r7
 8001978:	b002      	add	sp, #8
 800197a:	bd80      	pop	{r7, pc}
 800197c:	50000800 	.word	0x50000800
 8001980:	2000014c 	.word	0x2000014c
 8001984:	20000140 	.word	0x20000140

08001988 <HAL_RTCEx_AlarmBEventCallback>:

void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc) {
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
//	HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_B);
//	isTimerRunning = 0;
//	updateFace.timer = 1;

	updateFace.clock = 1;
 8001990:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <HAL_RTCEx_AlarmBEventCallback+0x20>)
 8001992:	2201      	movs	r2, #1
 8001994:	701a      	strb	r2, [r3, #0]
	setClockAlarm(hrtc);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	0018      	movs	r0, r3
 800199a:	f7ff feff 	bl	800179c <setClockAlarm>
}
 800199e:	46c0      	nop			; (mov r8, r8)
 80019a0:	46bd      	mov	sp, r7
 80019a2:	b002      	add	sp, #8
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	46c0      	nop			; (mov r8, r8)
 80019a8:	20000140 	.word	0x20000140

080019ac <getDateTime>:
	d->date = sdate.Date;
	d->weekday = sdate.WeekDay;
}

// not using getDate and getTime for efficiency (?)
void getDateTime(struct dates *d, struct times *t, RTC_HandleTypeDef *hrtc) {
 80019ac:	b590      	push	{r4, r7, lr}
 80019ae:	b08b      	sub	sp, #44	; 0x2c
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
	RTC_DateTypeDef sdate;
	RTC_TimeTypeDef stime;

	// programming manual says to read time after date. something shadow registers.
	// not done automatically in HAL
	HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN);
 80019b8:	2310      	movs	r3, #16
 80019ba:	18f9      	adds	r1, r7, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	0018      	movs	r0, r3
 80019c2:	f004 fe59 	bl	8006678 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &sdate, RTC_FORMAT_BIN);
 80019c6:	2424      	movs	r4, #36	; 0x24
 80019c8:	1939      	adds	r1, r7, r4
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	0018      	movs	r0, r3
 80019d0:	f004 ff5c 	bl	800688c <HAL_RTC_GetDate>

	d->yr = sdate.Year > 50 ? sdate.Year+1900 : sdate.Year+2000;		// make assumptions on whether it's 19xx or 20xx
 80019d4:	193b      	adds	r3, r7, r4
 80019d6:	78db      	ldrb	r3, [r3, #3]
 80019d8:	2b32      	cmp	r3, #50	; 0x32
 80019da:	d908      	bls.n	80019ee <getDateTime+0x42>
 80019dc:	2324      	movs	r3, #36	; 0x24
 80019de:	18fb      	adds	r3, r7, r3
 80019e0:	78db      	ldrb	r3, [r3, #3]
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	4a16      	ldr	r2, [pc, #88]	; (8001a40 <getDateTime+0x94>)
 80019e6:	4694      	mov	ip, r2
 80019e8:	4463      	add	r3, ip
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	e008      	b.n	8001a00 <getDateTime+0x54>
 80019ee:	2324      	movs	r3, #36	; 0x24
 80019f0:	18fb      	adds	r3, r7, r3
 80019f2:	78db      	ldrb	r3, [r3, #3]
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	22fa      	movs	r2, #250	; 0xfa
 80019f8:	00d2      	lsls	r2, r2, #3
 80019fa:	4694      	mov	ip, r2
 80019fc:	4463      	add	r3, ip
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	68fa      	ldr	r2, [r7, #12]
 8001a02:	8013      	strh	r3, [r2, #0]
	d->month = sdate.Month;
 8001a04:	2124      	movs	r1, #36	; 0x24
 8001a06:	187b      	adds	r3, r7, r1
 8001a08:	785a      	ldrb	r2, [r3, #1]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	709a      	strb	r2, [r3, #2]
	d->date = sdate.Date;
 8001a0e:	187b      	adds	r3, r7, r1
 8001a10:	789a      	ldrb	r2, [r3, #2]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	70da      	strb	r2, [r3, #3]
	d->weekday = sdate.WeekDay;
 8001a16:	187b      	adds	r3, r7, r1
 8001a18:	781a      	ldrb	r2, [r3, #0]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	711a      	strb	r2, [r3, #4]

	t->hr = stime.Hours;
 8001a1e:	2110      	movs	r1, #16
 8001a20:	187b      	adds	r3, r7, r1
 8001a22:	781a      	ldrb	r2, [r3, #0]
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	701a      	strb	r2, [r3, #0]
	t->min = stime.Minutes;
 8001a28:	187b      	adds	r3, r7, r1
 8001a2a:	785a      	ldrb	r2, [r3, #1]
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	705a      	strb	r2, [r3, #1]
	t->sec = stime.Seconds;
 8001a30:	187b      	adds	r3, r7, r1
 8001a32:	789a      	ldrb	r2, [r3, #2]
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	709a      	strb	r2, [r3, #2]
}
 8001a38:	46c0      	nop			; (mov r8, r8)
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	b00b      	add	sp, #44	; 0x2c
 8001a3e:	bd90      	pop	{r4, r7, pc}
 8001a40:	0000076c 	.word	0x0000076c

08001a44 <timeToSeconds>:
// ---- end of clock get functions ----

// ---- converters ----
uint32_t timeToSeconds(struct times *t) {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
	return t->sec + t->min*60 + t->hr*3600;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	789b      	ldrb	r3, [r3, #2]
 8001a50:	0019      	movs	r1, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	785b      	ldrb	r3, [r3, #1]
 8001a56:	001a      	movs	r2, r3
 8001a58:	0013      	movs	r3, r2
 8001a5a:	011b      	lsls	r3, r3, #4
 8001a5c:	1a9b      	subs	r3, r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	18c9      	adds	r1, r1, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	001a      	movs	r2, r3
 8001a68:	0013      	movs	r3, r2
 8001a6a:	011b      	lsls	r3, r3, #4
 8001a6c:	1a9b      	subs	r3, r3, r2
 8001a6e:	011a      	lsls	r2, r3, #4
 8001a70:	1ad2      	subs	r2, r2, r3
 8001a72:	0113      	lsls	r3, r2, #4
 8001a74:	001a      	movs	r2, r3
 8001a76:	0013      	movs	r3, r2
 8001a78:	18cb      	adds	r3, r1, r3
}
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	b002      	add	sp, #8
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <secondsToTime>:

void secondsToTime(struct times *t, uint32_t seconds) {
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b082      	sub	sp, #8
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
 8001a8a:	6039      	str	r1, [r7, #0]
	t->hr = seconds / 3600;
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	23e1      	movs	r3, #225	; 0xe1
 8001a90:	0119      	lsls	r1, r3, #4
 8001a92:	0010      	movs	r0, r2
 8001a94:	f7fe fb40 	bl	8000118 <__udivsi3>
 8001a98:	0003      	movs	r3, r0
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	701a      	strb	r2, [r3, #0]
	seconds %= 3600;
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	23e1      	movs	r3, #225	; 0xe1
 8001aa4:	0119      	lsls	r1, r3, #4
 8001aa6:	0010      	movs	r0, r2
 8001aa8:	f7fe fbbc 	bl	8000224 <__aeabi_uidivmod>
 8001aac:	000b      	movs	r3, r1
 8001aae:	603b      	str	r3, [r7, #0]
	t->min = seconds / 60;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	213c      	movs	r1, #60	; 0x3c
 8001ab4:	0018      	movs	r0, r3
 8001ab6:	f7fe fb2f 	bl	8000118 <__udivsi3>
 8001aba:	0003      	movs	r3, r0
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	705a      	strb	r2, [r3, #1]
	seconds %= 60;
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	213c      	movs	r1, #60	; 0x3c
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	f7fe fbac 	bl	8000224 <__aeabi_uidivmod>
 8001acc:	000b      	movs	r3, r1
 8001ace:	603b      	str	r3, [r7, #0]
	t->sec = seconds;
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	709a      	strb	r2, [r3, #2]
}
 8001ad8:	46c0      	nop			; (mov r8, r8)
 8001ada:	46bd      	mov	sp, r7
 8001adc:	b002      	add	sp, #8
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <weekdayCalculator>:
 * weekdays is 0-6, with 0 being sunday. hal uses 1=monday, 7=sunday - just call with % 7 to integrate with hal
 * months given in 1-12, with 1 being january. hal uses the same setup
 * rtc represents years with last 2 digits only. make sure year has all 4 numbers
 * should be accurate for any gregorian date
 */
uint8_t weekdayCalculator(uint16_t year, uint8_t month, uint8_t day) {
 8001ae0:	b590      	push	{r4, r7, lr}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	0004      	movs	r4, r0
 8001ae8:	0008      	movs	r0, r1
 8001aea:	0011      	movs	r1, r2
 8001aec:	1dbb      	adds	r3, r7, #6
 8001aee:	1c22      	adds	r2, r4, #0
 8001af0:	801a      	strh	r2, [r3, #0]
 8001af2:	1d7b      	adds	r3, r7, #5
 8001af4:	1c02      	adds	r2, r0, #0
 8001af6:	701a      	strb	r2, [r3, #0]
 8001af8:	1d3b      	adds	r3, r7, #4
 8001afa:	1c0a      	adds	r2, r1, #0
 8001afc:	701a      	strb	r2, [r3, #0]
	static uint8_t table[] = {0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4};
	if (month < 3) year--;
 8001afe:	1d7b      	adds	r3, r7, #5
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d804      	bhi.n	8001b10 <weekdayCalculator+0x30>
 8001b06:	1dbb      	adds	r3, r7, #6
 8001b08:	881a      	ldrh	r2, [r3, #0]
 8001b0a:	1dbb      	adds	r3, r7, #6
 8001b0c:	3a01      	subs	r2, #1
 8001b0e:	801a      	strh	r2, [r3, #0]
	uint16_t temp = (year + year/4 - year/100 + year/400 + table[month-1] + day) % 7;
 8001b10:	1dbb      	adds	r3, r7, #6
 8001b12:	881b      	ldrh	r3, [r3, #0]
 8001b14:	1dba      	adds	r2, r7, #6
 8001b16:	8812      	ldrh	r2, [r2, #0]
 8001b18:	0892      	lsrs	r2, r2, #2
 8001b1a:	b292      	uxth	r2, r2
 8001b1c:	189c      	adds	r4, r3, r2
 8001b1e:	1dbb      	adds	r3, r7, #6
 8001b20:	881b      	ldrh	r3, [r3, #0]
 8001b22:	2164      	movs	r1, #100	; 0x64
 8001b24:	0018      	movs	r0, r3
 8001b26:	f7fe faf7 	bl	8000118 <__udivsi3>
 8001b2a:	0003      	movs	r3, r0
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	1ae4      	subs	r4, r4, r3
 8001b30:	1dbb      	adds	r3, r7, #6
 8001b32:	881a      	ldrh	r2, [r3, #0]
 8001b34:	23c8      	movs	r3, #200	; 0xc8
 8001b36:	0059      	lsls	r1, r3, #1
 8001b38:	0010      	movs	r0, r2
 8001b3a:	f7fe faed 	bl	8000118 <__udivsi3>
 8001b3e:	0003      	movs	r3, r0
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	18e3      	adds	r3, r4, r3
 8001b44:	1d7a      	adds	r2, r7, #5
 8001b46:	7812      	ldrb	r2, [r2, #0]
 8001b48:	3a01      	subs	r2, #1
 8001b4a:	490b      	ldr	r1, [pc, #44]	; (8001b78 <weekdayCalculator+0x98>)
 8001b4c:	5c8a      	ldrb	r2, [r1, r2]
 8001b4e:	189a      	adds	r2, r3, r2
 8001b50:	1d3b      	adds	r3, r7, #4
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	18d3      	adds	r3, r2, r3
 8001b56:	2107      	movs	r1, #7
 8001b58:	0018      	movs	r0, r3
 8001b5a:	f7fe fc4d 	bl	80003f8 <__aeabi_idivmod>
 8001b5e:	000b      	movs	r3, r1
 8001b60:	001a      	movs	r2, r3
 8001b62:	210e      	movs	r1, #14
 8001b64:	187b      	adds	r3, r7, r1
 8001b66:	801a      	strh	r2, [r3, #0]
	return temp;
 8001b68:	187b      	adds	r3, r7, r1
 8001b6a:	881b      	ldrh	r3, [r3, #0]
 8001b6c:	b2db      	uxtb	r3, r3
}
 8001b6e:	0018      	movs	r0, r3
 8001b70:	46bd      	mov	sp, r7
 8001b72:	b005      	add	sp, #20
 8001b74:	bd90      	pop	{r4, r7, pc}
 8001b76:	46c0      	nop			; (mov r8, r8)
 8001b78:	20000000 	.word	0x20000000

08001b7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b80:	f002 fc90 	bl	80044a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b84:	f000 f846 	bl	8001c14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
//  peripheralClockConfig();
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b88:	f000 fc54 	bl	8002434 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001b8c:	f000 fa04 	bl	8001f98 <MX_SPI1_Init>
  MX_ADC_Init();
 8001b90:	f000 f8c8 	bl	8001d24 <MX_ADC_Init>
  MX_RTC_Init();
 8001b94:	f000 f952 	bl	8001e3c <MX_RTC_Init>
  MX_TIM21_Init();
 8001b98:	f000 fb08 	bl	80021ac <MX_TIM21_Init>
  MX_LPTIM1_Init();
 8001b9c:	f000 f926 	bl	8001dec <MX_LPTIM1_Init>
  MX_DMA_Init();
 8001ba0:	f000 fc2a 	bl	80023f8 <MX_DMA_Init>
  MX_TIM22_Init();
 8001ba4:	f000 fb9a 	bl	80022dc <MX_TIM22_Init>
  MX_TIM2_Init();
 8001ba8:	f000 fa32 	bl	8002010 <MX_TIM2_Init>
  MX_TIM6_Init();
 8001bac:	f000 fac4 	bl	8002138 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  	/* initialization for display */
	HAL_Delay(2000);
 8001bb0:	23fa      	movs	r3, #250	; 0xfa
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	f002 fcd5 	bl	8004564 <HAL_Delay>
	TFT_startup(&hspi1);
 8001bba:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <main+0x84>)
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	f7fe fd31 	bl	8000624 <TFT_startup>
	clearScreen(ST77XX_RED, &hspi1);
 8001bc2:	4a0f      	ldr	r2, [pc, #60]	; (8001c00 <main+0x84>)
 8001bc4:	23f8      	movs	r3, #248	; 0xf8
 8001bc6:	021b      	lsls	r3, r3, #8
 8001bc8:	0011      	movs	r1, r2
 8001bca:	0018      	movs	r0, r3
 8001bcc:	f7ff fcec 	bl	80015a8 <clearScreen>

	/* start updating display for ui */
	initFace();
 8001bd0:	f001 ff70 	bl	8003ab4 <initFace>
//	runClockDisplay();
	setClockAlarm(&hrtc);
 8001bd4:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <main+0x88>)
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	f7ff fde0 	bl	800179c <setClockAlarm>
	runTimerStopwatchBase(&htim21);
 8001bdc:	4b0a      	ldr	r3, [pc, #40]	; (8001c08 <main+0x8c>)
 8001bde:	0018      	movs	r0, r3
 8001be0:	f002 fc2a 	bl	8004438 <runTimerStopwatchBase>
//	  lineTest(&hspi1);
//	  charTest(&hspi1);
//	  textTest(bg, &hspi1);

	  // ui/nav tests or full run. uncomment when ready
	  updateWithButtons(&hrtc, &htim21, &htim2, &htim6);
 8001be4:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <main+0x90>)
 8001be6:	4a0a      	ldr	r2, [pc, #40]	; (8001c10 <main+0x94>)
 8001be8:	4907      	ldr	r1, [pc, #28]	; (8001c08 <main+0x8c>)
 8001bea:	4806      	ldr	r0, [pc, #24]	; (8001c04 <main+0x88>)
 8001bec:	f000 fd02 	bl	80025f4 <updateWithButtons>
	  updateDisplay(&hrtc, &hspi1);
 8001bf0:	4a03      	ldr	r2, [pc, #12]	; (8001c00 <main+0x84>)
 8001bf2:	4b04      	ldr	r3, [pc, #16]	; (8001c04 <main+0x88>)
 8001bf4:	0011      	movs	r1, r2
 8001bf6:	0018      	movs	r0, r3
 8001bf8:	f001 f968 	bl	8002ecc <updateDisplay>
	  updateWithButtons(&hrtc, &htim21, &htim2, &htim6);
 8001bfc:	e7f2      	b.n	8001be4 <main+0x68>
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	20000230 	.word	0x20000230
 8001c04:	2000020c 	.word	0x2000020c
 8001c08:	20000368 	.word	0x20000368
 8001c0c:	20000150 	.word	0x20000150
 8001c10:	20000288 	.word	0x20000288

08001c14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c14:	b590      	push	{r4, r7, lr}
 8001c16:	b09f      	sub	sp, #124	; 0x7c
 8001c18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c1a:	2440      	movs	r4, #64	; 0x40
 8001c1c:	193b      	adds	r3, r7, r4
 8001c1e:	0018      	movs	r0, r3
 8001c20:	2338      	movs	r3, #56	; 0x38
 8001c22:	001a      	movs	r2, r3
 8001c24:	2100      	movs	r1, #0
 8001c26:	f006 fd14 	bl	8008652 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c2a:	232c      	movs	r3, #44	; 0x2c
 8001c2c:	18fb      	adds	r3, r7, r3
 8001c2e:	0018      	movs	r0, r3
 8001c30:	2314      	movs	r3, #20
 8001c32:	001a      	movs	r2, r3
 8001c34:	2100      	movs	r1, #0
 8001c36:	f006 fd0c 	bl	8008652 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c3a:	1d3b      	adds	r3, r7, #4
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	2328      	movs	r3, #40	; 0x28
 8001c40:	001a      	movs	r2, r3
 8001c42:	2100      	movs	r1, #0
 8001c44:	f006 fd05 	bl	8008652 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c48:	4b33      	ldr	r3, [pc, #204]	; (8001d18 <SystemClock_Config+0x104>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a33      	ldr	r2, [pc, #204]	; (8001d1c <SystemClock_Config+0x108>)
 8001c4e:	401a      	ands	r2, r3
 8001c50:	4b31      	ldr	r3, [pc, #196]	; (8001d18 <SystemClock_Config+0x104>)
 8001c52:	2180      	movs	r1, #128	; 0x80
 8001c54:	0109      	lsls	r1, r1, #4
 8001c56:	430a      	orrs	r2, r1
 8001c58:	601a      	str	r2, [r3, #0]
  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8001c5a:	f003 fcab 	bl	80055b4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001c5e:	4b30      	ldr	r3, [pc, #192]	; (8001d20 <SystemClock_Config+0x10c>)
 8001c60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c62:	4b2f      	ldr	r3, [pc, #188]	; (8001d20 <SystemClock_Config+0x10c>)
 8001c64:	492d      	ldr	r1, [pc, #180]	; (8001d1c <SystemClock_Config+0x108>)
 8001c66:	400a      	ands	r2, r1
 8001c68:	651a      	str	r2, [r3, #80]	; 0x50
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8001c6a:	193b      	adds	r3, r7, r4
 8001c6c:	2226      	movs	r2, #38	; 0x26
 8001c6e:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001c70:	193b      	adds	r3, r7, r4
 8001c72:	2280      	movs	r2, #128	; 0x80
 8001c74:	0052      	lsls	r2, r2, #1
 8001c76:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c78:	0021      	movs	r1, r4
 8001c7a:	187b      	adds	r3, r7, r1
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c80:	187b      	adds	r3, r7, r1
 8001c82:	2210      	movs	r2, #16
 8001c84:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001c86:	187b      	adds	r3, r7, r1
 8001c88:	2201      	movs	r2, #1
 8001c8a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c8c:	187b      	adds	r3, r7, r1
 8001c8e:	2202      	movs	r2, #2
 8001c90:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c92:	187b      	adds	r3, r7, r1
 8001c94:	2200      	movs	r2, #0
 8001c96:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8001c98:	187b      	adds	r3, r7, r1
 8001c9a:	2280      	movs	r2, #128	; 0x80
 8001c9c:	02d2      	lsls	r2, r2, #11
 8001c9e:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001ca0:	187b      	adds	r3, r7, r1
 8001ca2:	2280      	movs	r2, #128	; 0x80
 8001ca4:	03d2      	lsls	r2, r2, #15
 8001ca6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ca8:	187b      	adds	r3, r7, r1
 8001caa:	0018      	movs	r0, r3
 8001cac:	f003 fc90 	bl	80055d0 <HAL_RCC_OscConfig>
 8001cb0:	1e03      	subs	r3, r0, #0
 8001cb2:	d001      	beq.n	8001cb8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001cb4:	f000 fc50 	bl	8002558 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cb8:	212c      	movs	r1, #44	; 0x2c
 8001cba:	187b      	adds	r3, r7, r1
 8001cbc:	220f      	movs	r2, #15
 8001cbe:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cc0:	187b      	adds	r3, r7, r1
 8001cc2:	2203      	movs	r2, #3
 8001cc4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cc6:	187b      	adds	r3, r7, r1
 8001cc8:	2200      	movs	r2, #0
 8001cca:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ccc:	187b      	adds	r3, r7, r1
 8001cce:	2200      	movs	r2, #0
 8001cd0:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cd2:	187b      	adds	r3, r7, r1
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001cd8:	187b      	adds	r3, r7, r1
 8001cda:	2101      	movs	r1, #1
 8001cdc:	0018      	movs	r0, r3
 8001cde:	f004 f847 	bl	8005d70 <HAL_RCC_ClockConfig>
 8001ce2:	1e03      	subs	r3, r0, #0
 8001ce4:	d001      	beq.n	8001cea <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8001ce6:	f000 fc37 	bl	8002558 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_LPTIM1;
 8001cea:	1d3b      	adds	r3, r7, #4
 8001cec:	22a0      	movs	r2, #160	; 0xa0
 8001cee:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001cf0:	1d3b      	adds	r3, r7, #4
 8001cf2:	2280      	movs	r2, #128	; 0x80
 8001cf4:	0252      	lsls	r2, r2, #9
 8001cf6:	605a      	str	r2, [r3, #4]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8001cf8:	1d3b      	adds	r3, r7, #4
 8001cfa:	22c0      	movs	r2, #192	; 0xc0
 8001cfc:	0312      	lsls	r2, r2, #12
 8001cfe:	621a      	str	r2, [r3, #32]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d00:	1d3b      	adds	r3, r7, #4
 8001d02:	0018      	movs	r0, r3
 8001d04:	f004 f9e2 	bl	80060cc <HAL_RCCEx_PeriphCLKConfig>
 8001d08:	1e03      	subs	r3, r0, #0
 8001d0a:	d001      	beq.n	8001d10 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8001d0c:	f000 fc24 	bl	8002558 <Error_Handler>
  }
}
 8001d10:	46c0      	nop			; (mov r8, r8)
 8001d12:	46bd      	mov	sp, r7
 8001d14:	b01f      	add	sp, #124	; 0x7c
 8001d16:	bd90      	pop	{r4, r7, pc}
 8001d18:	40007000 	.word	0x40007000
 8001d1c:	ffffe7ff 	.word	0xffffe7ff
 8001d20:	40021000 	.word	0x40021000

08001d24 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d2a:	003b      	movs	r3, r7
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	2308      	movs	r3, #8
 8001d30:	001a      	movs	r2, r3
 8001d32:	2100      	movs	r1, #0
 8001d34:	f006 fc8d 	bl	8008652 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8001d38:	4b2a      	ldr	r3, [pc, #168]	; (8001de4 <MX_ADC_Init+0xc0>)
 8001d3a:	4a2b      	ldr	r2, [pc, #172]	; (8001de8 <MX_ADC_Init+0xc4>)
 8001d3c:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8001d3e:	4b29      	ldr	r3, [pc, #164]	; (8001de4 <MX_ADC_Init+0xc0>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001d44:	4b27      	ldr	r3, [pc, #156]	; (8001de4 <MX_ADC_Init+0xc0>)
 8001d46:	2280      	movs	r2, #128	; 0x80
 8001d48:	05d2      	lsls	r2, r2, #23
 8001d4a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001d4c:	4b25      	ldr	r3, [pc, #148]	; (8001de4 <MX_ADC_Init+0xc0>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001d52:	4b24      	ldr	r3, [pc, #144]	; (8001de4 <MX_ADC_Init+0xc0>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001d58:	4b22      	ldr	r3, [pc, #136]	; (8001de4 <MX_ADC_Init+0xc0>)
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d5e:	4b21      	ldr	r3, [pc, #132]	; (8001de4 <MX_ADC_Init+0xc0>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001d64:	4b1f      	ldr	r3, [pc, #124]	; (8001de4 <MX_ADC_Init+0xc0>)
 8001d66:	2220      	movs	r2, #32
 8001d68:	2100      	movs	r1, #0
 8001d6a:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001d6c:	4b1d      	ldr	r3, [pc, #116]	; (8001de4 <MX_ADC_Init+0xc0>)
 8001d6e:	2221      	movs	r2, #33	; 0x21
 8001d70:	2100      	movs	r1, #0
 8001d72:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d74:	4b1b      	ldr	r3, [pc, #108]	; (8001de4 <MX_ADC_Init+0xc0>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d7a:	4b1a      	ldr	r3, [pc, #104]	; (8001de4 <MX_ADC_Init+0xc0>)
 8001d7c:	22c2      	movs	r2, #194	; 0xc2
 8001d7e:	32ff      	adds	r2, #255	; 0xff
 8001d80:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001d82:	4b18      	ldr	r3, [pc, #96]	; (8001de4 <MX_ADC_Init+0xc0>)
 8001d84:	222c      	movs	r2, #44	; 0x2c
 8001d86:	2100      	movs	r1, #0
 8001d88:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d8a:	4b16      	ldr	r3, [pc, #88]	; (8001de4 <MX_ADC_Init+0xc0>)
 8001d8c:	2204      	movs	r2, #4
 8001d8e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001d90:	4b14      	ldr	r3, [pc, #80]	; (8001de4 <MX_ADC_Init+0xc0>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001d96:	4b13      	ldr	r3, [pc, #76]	; (8001de4 <MX_ADC_Init+0xc0>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8001d9c:	4b11      	ldr	r3, [pc, #68]	; (8001de4 <MX_ADC_Init+0xc0>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001da2:	4b10      	ldr	r3, [pc, #64]	; (8001de4 <MX_ADC_Init+0xc0>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001da8:	4b0e      	ldr	r3, [pc, #56]	; (8001de4 <MX_ADC_Init+0xc0>)
 8001daa:	0018      	movs	r0, r3
 8001dac:	f002 fbf8 	bl	80045a0 <HAL_ADC_Init>
 8001db0:	1e03      	subs	r3, r0, #0
 8001db2:	d001      	beq.n	8001db8 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8001db4:	f000 fbd0 	bl	8002558 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001db8:	003b      	movs	r3, r7
 8001dba:	2201      	movs	r2, #1
 8001dbc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001dbe:	003b      	movs	r3, r7
 8001dc0:	2280      	movs	r2, #128	; 0x80
 8001dc2:	0152      	lsls	r2, r2, #5
 8001dc4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001dc6:	003a      	movs	r2, r7
 8001dc8:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <MX_ADC_Init+0xc0>)
 8001dca:	0011      	movs	r1, r2
 8001dcc:	0018      	movs	r0, r3
 8001dce:	f002 fd5b 	bl	8004888 <HAL_ADC_ConfigChannel>
 8001dd2:	1e03      	subs	r3, r0, #0
 8001dd4:	d001      	beq.n	8001dda <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8001dd6:	f000 fbbf 	bl	8002558 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001dda:	46c0      	nop			; (mov r8, r8)
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	b002      	add	sp, #8
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	46c0      	nop			; (mov r8, r8)
 8001de4:	200002c4 	.word	0x200002c4
 8001de8:	40012400 	.word	0x40012400

08001dec <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001df0:	4b0f      	ldr	r3, [pc, #60]	; (8001e30 <MX_LPTIM1_Init+0x44>)
 8001df2:	4a10      	ldr	r2, [pc, #64]	; (8001e34 <MX_LPTIM1_Init+0x48>)
 8001df4:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001df6:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <MX_LPTIM1_Init+0x44>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <MX_LPTIM1_Init+0x44>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001e02:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <MX_LPTIM1_Init+0x44>)
 8001e04:	4a0c      	ldr	r2, [pc, #48]	; (8001e38 <MX_LPTIM1_Init+0x4c>)
 8001e06:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001e08:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <MX_LPTIM1_Init+0x44>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001e0e:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <MX_LPTIM1_Init+0x44>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <MX_LPTIM1_Init+0x44>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001e1a:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <MX_LPTIM1_Init+0x44>)
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	f003 fa6f 	bl	8005300 <HAL_LPTIM_Init>
 8001e22:	1e03      	subs	r3, r0, #0
 8001e24:	d001      	beq.n	8001e2a <MX_LPTIM1_Init+0x3e>
  {
    Error_Handler();
 8001e26:	f000 fb97 	bl	8002558 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8001e2a:	46c0      	nop			; (mov r8, r8)
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	200001dc 	.word	0x200001dc
 8001e34:	40007c00 	.word	0x40007c00
 8001e38:	0000ffff 	.word	0x0000ffff

08001e3c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b090      	sub	sp, #64	; 0x40
 8001e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001e42:	232c      	movs	r3, #44	; 0x2c
 8001e44:	18fb      	adds	r3, r7, r3
 8001e46:	0018      	movs	r0, r3
 8001e48:	2314      	movs	r3, #20
 8001e4a:	001a      	movs	r2, r3
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	f006 fc00 	bl	8008652 <memset>
  RTC_DateTypeDef sDate = {0};
 8001e52:	2328      	movs	r3, #40	; 0x28
 8001e54:	18fb      	adds	r3, r7, r3
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8001e5a:	003b      	movs	r3, r7
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	2328      	movs	r3, #40	; 0x28
 8001e60:	001a      	movs	r2, r3
 8001e62:	2100      	movs	r1, #0
 8001e64:	f006 fbf5 	bl	8008652 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8001e68:	4b49      	ldr	r3, [pc, #292]	; (8001f90 <MX_RTC_Init+0x154>)
 8001e6a:	4a4a      	ldr	r2, [pc, #296]	; (8001f94 <MX_RTC_Init+0x158>)
 8001e6c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001e6e:	4b48      	ldr	r3, [pc, #288]	; (8001f90 <MX_RTC_Init+0x154>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001e74:	4b46      	ldr	r3, [pc, #280]	; (8001f90 <MX_RTC_Init+0x154>)
 8001e76:	227f      	movs	r2, #127	; 0x7f
 8001e78:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001e7a:	4b45      	ldr	r3, [pc, #276]	; (8001f90 <MX_RTC_Init+0x154>)
 8001e7c:	22ff      	movs	r2, #255	; 0xff
 8001e7e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001e80:	4b43      	ldr	r3, [pc, #268]	; (8001f90 <MX_RTC_Init+0x154>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001e86:	4b42      	ldr	r3, [pc, #264]	; (8001f90 <MX_RTC_Init+0x154>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001e8c:	4b40      	ldr	r3, [pc, #256]	; (8001f90 <MX_RTC_Init+0x154>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001e92:	4b3f      	ldr	r3, [pc, #252]	; (8001f90 <MX_RTC_Init+0x154>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001e98:	4b3d      	ldr	r3, [pc, #244]	; (8001f90 <MX_RTC_Init+0x154>)
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	f004 fa8a 	bl	80063b4 <HAL_RTC_Init>
 8001ea0:	1e03      	subs	r3, r0, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8001ea4:	f000 fb58 	bl	8002558 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0;
 8001ea8:	212c      	movs	r1, #44	; 0x2c
 8001eaa:	187b      	adds	r3, r7, r1
 8001eac:	2200      	movs	r2, #0
 8001eae:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8001eb0:	187b      	adds	r3, r7, r1
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8001eb6:	187b      	adds	r3, r7, r1
 8001eb8:	2200      	movs	r2, #0
 8001eba:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001ebc:	187b      	adds	r3, r7, r1
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001ec2:	187b      	adds	r3, r7, r1
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001ec8:	1879      	adds	r1, r7, r1
 8001eca:	4b31      	ldr	r3, [pc, #196]	; (8001f90 <MX_RTC_Init+0x154>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	0018      	movs	r0, r3
 8001ed0:	f004 fb0e 	bl	80064f0 <HAL_RTC_SetTime>
 8001ed4:	1e03      	subs	r3, r0, #0
 8001ed6:	d001      	beq.n	8001edc <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8001ed8:	f000 fb3e 	bl	8002558 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8001edc:	2128      	movs	r1, #40	; 0x28
 8001ede:	187b      	adds	r3, r7, r1
 8001ee0:	2207      	movs	r2, #7
 8001ee2:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_DECEMBER;
 8001ee4:	187b      	adds	r3, r7, r1
 8001ee6:	2212      	movs	r2, #18
 8001ee8:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8001eea:	187b      	adds	r3, r7, r1
 8001eec:	2201      	movs	r2, #1
 8001eee:	709a      	strb	r2, [r3, #2]
  sDate.Year = 19;
 8001ef0:	187b      	adds	r3, r7, r1
 8001ef2:	2213      	movs	r2, #19
 8001ef4:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001ef6:	1879      	adds	r1, r7, r1
 8001ef8:	4b25      	ldr	r3, [pc, #148]	; (8001f90 <MX_RTC_Init+0x154>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	0018      	movs	r0, r3
 8001efe:	f004 fc17 	bl	8006730 <HAL_RTC_SetDate>
 8001f02:	1e03      	subs	r3, r0, #0
 8001f04:	d001      	beq.n	8001f0a <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8001f06:	f000 fb27 	bl	8002558 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0;
 8001f0a:	003b      	movs	r3, r7
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8001f10:	003b      	movs	r3, r7
 8001f12:	2200      	movs	r2, #0
 8001f14:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8001f16:	003b      	movs	r3, r7
 8001f18:	2200      	movs	r2, #0
 8001f1a:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8001f1c:	003b      	movs	r3, r7
 8001f1e:	2200      	movs	r2, #0
 8001f20:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001f22:	003b      	movs	r3, r7
 8001f24:	2200      	movs	r2, #0
 8001f26:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001f28:	003b      	movs	r3, r7
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001f2e:	003b      	movs	r3, r7
 8001f30:	2200      	movs	r2, #0
 8001f32:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001f34:	003b      	movs	r3, r7
 8001f36:	2200      	movs	r2, #0
 8001f38:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001f3a:	003b      	movs	r3, r7
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8001f40:	003b      	movs	r3, r7
 8001f42:	2220      	movs	r2, #32
 8001f44:	2101      	movs	r1, #1
 8001f46:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8001f48:	003b      	movs	r3, r7
 8001f4a:	2280      	movs	r2, #128	; 0x80
 8001f4c:	0052      	lsls	r2, r2, #1
 8001f4e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001f50:	0039      	movs	r1, r7
 8001f52:	4b0f      	ldr	r3, [pc, #60]	; (8001f90 <MX_RTC_Init+0x154>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	0018      	movs	r0, r3
 8001f58:	f004 fce6 	bl	8006928 <HAL_RTC_SetAlarm_IT>
 8001f5c:	1e03      	subs	r3, r0, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_RTC_Init+0x128>
  {
    Error_Handler();
 8001f60:	f000 fafa 	bl	8002558 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 1;
 8001f64:	003b      	movs	r3, r7
 8001f66:	2220      	movs	r2, #32
 8001f68:	2101      	movs	r1, #1
 8001f6a:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_B;
 8001f6c:	003b      	movs	r3, r7
 8001f6e:	2280      	movs	r2, #128	; 0x80
 8001f70:	0092      	lsls	r2, r2, #2
 8001f72:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001f74:	0039      	movs	r1, r7
 8001f76:	4b06      	ldr	r3, [pc, #24]	; (8001f90 <MX_RTC_Init+0x154>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	0018      	movs	r0, r3
 8001f7c:	f004 fcd4 	bl	8006928 <HAL_RTC_SetAlarm_IT>
 8001f80:	1e03      	subs	r3, r0, #0
 8001f82:	d001      	beq.n	8001f88 <MX_RTC_Init+0x14c>
  {
    Error_Handler();
 8001f84:	f000 fae8 	bl	8002558 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001f88:	46c0      	nop			; (mov r8, r8)
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	b010      	add	sp, #64	; 0x40
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	2000020c 	.word	0x2000020c
 8001f94:	40002800 	.word	0x40002800

08001f98 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f9c:	4b19      	ldr	r3, [pc, #100]	; (8002004 <MX_SPI1_Init+0x6c>)
 8001f9e:	4a1a      	ldr	r2, [pc, #104]	; (8002008 <MX_SPI1_Init+0x70>)
 8001fa0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001fa2:	4b18      	ldr	r3, [pc, #96]	; (8002004 <MX_SPI1_Init+0x6c>)
 8001fa4:	2282      	movs	r2, #130	; 0x82
 8001fa6:	0052      	lsls	r2, r2, #1
 8001fa8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001faa:	4b16      	ldr	r3, [pc, #88]	; (8002004 <MX_SPI1_Init+0x6c>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fb0:	4b14      	ldr	r3, [pc, #80]	; (8002004 <MX_SPI1_Init+0x6c>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fb6:	4b13      	ldr	r3, [pc, #76]	; (8002004 <MX_SPI1_Init+0x6c>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fbc:	4b11      	ldr	r3, [pc, #68]	; (8002004 <MX_SPI1_Init+0x6c>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001fc2:	4b10      	ldr	r3, [pc, #64]	; (8002004 <MX_SPI1_Init+0x6c>)
 8001fc4:	2280      	movs	r2, #128	; 0x80
 8001fc6:	0092      	lsls	r2, r2, #2
 8001fc8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fca:	4b0e      	ldr	r3, [pc, #56]	; (8002004 <MX_SPI1_Init+0x6c>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fd0:	4b0c      	ldr	r3, [pc, #48]	; (8002004 <MX_SPI1_Init+0x6c>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fd6:	4b0b      	ldr	r3, [pc, #44]	; (8002004 <MX_SPI1_Init+0x6c>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fdc:	4b09      	ldr	r3, [pc, #36]	; (8002004 <MX_SPI1_Init+0x6c>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001fe2:	4b08      	ldr	r3, [pc, #32]	; (8002004 <MX_SPI1_Init+0x6c>)
 8001fe4:	2207      	movs	r2, #7
 8001fe6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001fe8:	4b06      	ldr	r3, [pc, #24]	; (8002004 <MX_SPI1_Init+0x6c>)
 8001fea:	0018      	movs	r0, r3
 8001fec:	f004 ff6e 	bl	8006ecc <HAL_SPI_Init>
 8001ff0:	1e03      	subs	r3, r0, #0
 8001ff2:	d001      	beq.n	8001ff8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ff4:	f000 fab0 	bl	8002558 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  hspi1.hdmatx = &hdma_spi1_tx;
 8001ff8:	4b02      	ldr	r3, [pc, #8]	; (8002004 <MX_SPI1_Init+0x6c>)
 8001ffa:	4a04      	ldr	r2, [pc, #16]	; (800200c <MX_SPI1_Init+0x74>)
 8001ffc:	649a      	str	r2, [r3, #72]	; 0x48
  /* USER CODE END SPI1_Init 2 */

}
 8001ffe:	46c0      	nop			; (mov r8, r8)
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	20000230 	.word	0x20000230
 8002008:	40013000 	.word	0x40013000
 800200c:	20000320 	.word	0x20000320

08002010 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b08a      	sub	sp, #40	; 0x28
 8002014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002016:	2318      	movs	r3, #24
 8002018:	18fb      	adds	r3, r7, r3
 800201a:	0018      	movs	r0, r3
 800201c:	2310      	movs	r3, #16
 800201e:	001a      	movs	r2, r3
 8002020:	2100      	movs	r1, #0
 8002022:	f006 fb16 	bl	8008652 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002026:	2310      	movs	r3, #16
 8002028:	18fb      	adds	r3, r7, r3
 800202a:	0018      	movs	r0, r3
 800202c:	2308      	movs	r3, #8
 800202e:	001a      	movs	r2, r3
 8002030:	2100      	movs	r1, #0
 8002032:	f006 fb0e 	bl	8008652 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002036:	003b      	movs	r3, r7
 8002038:	0018      	movs	r0, r3
 800203a:	2310      	movs	r3, #16
 800203c:	001a      	movs	r2, r3
 800203e:	2100      	movs	r1, #0
 8002040:	f006 fb07 	bl	8008652 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002044:	4b3b      	ldr	r3, [pc, #236]	; (8002134 <MX_TIM2_Init+0x124>)
 8002046:	2280      	movs	r2, #128	; 0x80
 8002048:	05d2      	lsls	r2, r2, #23
 800204a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800204c:	4b39      	ldr	r3, [pc, #228]	; (8002134 <MX_TIM2_Init+0x124>)
 800204e:	2200      	movs	r2, #0
 8002050:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002052:	4b38      	ldr	r3, [pc, #224]	; (8002134 <MX_TIM2_Init+0x124>)
 8002054:	2200      	movs	r2, #0
 8002056:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0x8000;
 8002058:	4b36      	ldr	r3, [pc, #216]	; (8002134 <MX_TIM2_Init+0x124>)
 800205a:	2280      	movs	r2, #128	; 0x80
 800205c:	0212      	lsls	r2, r2, #8
 800205e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002060:	4b34      	ldr	r3, [pc, #208]	; (8002134 <MX_TIM2_Init+0x124>)
 8002062:	2200      	movs	r2, #0
 8002064:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002066:	4b33      	ldr	r3, [pc, #204]	; (8002134 <MX_TIM2_Init+0x124>)
 8002068:	2200      	movs	r2, #0
 800206a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800206c:	4b31      	ldr	r3, [pc, #196]	; (8002134 <MX_TIM2_Init+0x124>)
 800206e:	0018      	movs	r0, r3
 8002070:	f005 fbf2 	bl	8007858 <HAL_TIM_Base_Init>
 8002074:	1e03      	subs	r3, r0, #0
 8002076:	d001      	beq.n	800207c <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8002078:	f000 fa6e 	bl	8002558 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800207c:	2118      	movs	r1, #24
 800207e:	187b      	adds	r3, r7, r1
 8002080:	2280      	movs	r2, #128	; 0x80
 8002082:	0152      	lsls	r2, r2, #5
 8002084:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002086:	187a      	adds	r2, r7, r1
 8002088:	4b2a      	ldr	r3, [pc, #168]	; (8002134 <MX_TIM2_Init+0x124>)
 800208a:	0011      	movs	r1, r2
 800208c:	0018      	movs	r0, r3
 800208e:	f005 ff4d 	bl	8007f2c <HAL_TIM_ConfigClockSource>
 8002092:	1e03      	subs	r3, r0, #0
 8002094:	d001      	beq.n	800209a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8002096:	f000 fa5f 	bl	8002558 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800209a:	4b26      	ldr	r3, [pc, #152]	; (8002134 <MX_TIM2_Init+0x124>)
 800209c:	0018      	movs	r0, r3
 800209e:	f005 fd23 	bl	8007ae8 <HAL_TIM_PWM_Init>
 80020a2:	1e03      	subs	r3, r0, #0
 80020a4:	d001      	beq.n	80020aa <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80020a6:	f000 fa57 	bl	8002558 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80020aa:	4b22      	ldr	r3, [pc, #136]	; (8002134 <MX_TIM2_Init+0x124>)
 80020ac:	0018      	movs	r0, r3
 80020ae:	f005 fc43 	bl	8007938 <HAL_TIM_OC_Init>
 80020b2:	1e03      	subs	r3, r0, #0
 80020b4:	d001      	beq.n	80020ba <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 80020b6:	f000 fa4f 	bl	8002558 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ba:	2110      	movs	r1, #16
 80020bc:	187b      	adds	r3, r7, r1
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020c2:	187b      	adds	r3, r7, r1
 80020c4:	2200      	movs	r2, #0
 80020c6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020c8:	187a      	adds	r2, r7, r1
 80020ca:	4b1a      	ldr	r3, [pc, #104]	; (8002134 <MX_TIM2_Init+0x124>)
 80020cc:	0011      	movs	r1, r2
 80020ce:	0018      	movs	r0, r3
 80020d0:	f006 fa21 	bl	8008516 <HAL_TIMEx_MasterConfigSynchronization>
 80020d4:	1e03      	subs	r3, r0, #0
 80020d6:	d001      	beq.n	80020dc <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 80020d8:	f000 fa3e 	bl	8002558 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020dc:	003b      	movs	r3, r7
 80020de:	2260      	movs	r2, #96	; 0x60
 80020e0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80020e2:	003b      	movs	r3, r7
 80020e4:	2200      	movs	r2, #0
 80020e6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020e8:	003b      	movs	r3, r7
 80020ea:	2200      	movs	r2, #0
 80020ec:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020ee:	003b      	movs	r3, r7
 80020f0:	2200      	movs	r2, #0
 80020f2:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020f4:	0039      	movs	r1, r7
 80020f6:	4b0f      	ldr	r3, [pc, #60]	; (8002134 <MX_TIM2_Init+0x124>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	0018      	movs	r0, r3
 80020fc:	f005 fe5e 	bl	8007dbc <HAL_TIM_PWM_ConfigChannel>
 8002100:	1e03      	subs	r3, r0, #0
 8002102:	d001      	beq.n	8002108 <MX_TIM2_Init+0xf8>
  {
    Error_Handler();
 8002104:	f000 fa28 	bl	8002558 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002108:	003b      	movs	r3, r7
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800210e:	0039      	movs	r1, r7
 8002110:	4b08      	ldr	r3, [pc, #32]	; (8002134 <MX_TIM2_Init+0x124>)
 8002112:	2204      	movs	r2, #4
 8002114:	0018      	movs	r0, r3
 8002116:	f005 fe03 	bl	8007d20 <HAL_TIM_OC_ConfigChannel>
 800211a:	1e03      	subs	r3, r0, #0
 800211c:	d001      	beq.n	8002122 <MX_TIM2_Init+0x112>
  {
    Error_Handler();
 800211e:	f000 fa1b 	bl	8002558 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002122:	4b04      	ldr	r3, [pc, #16]	; (8002134 <MX_TIM2_Init+0x124>)
 8002124:	0018      	movs	r0, r3
 8002126:	f001 fe5f 	bl	8003de8 <HAL_TIM_MspPostInit>

}
 800212a:	46c0      	nop			; (mov r8, r8)
 800212c:	46bd      	mov	sp, r7
 800212e:	b00a      	add	sp, #40	; 0x28
 8002130:	bd80      	pop	{r7, pc}
 8002132:	46c0      	nop			; (mov r8, r8)
 8002134:	20000288 	.word	0x20000288

08002138 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800213e:	003b      	movs	r3, r7
 8002140:	0018      	movs	r0, r3
 8002142:	2308      	movs	r3, #8
 8002144:	001a      	movs	r2, r3
 8002146:	2100      	movs	r1, #0
 8002148:	f006 fa83 	bl	8008652 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800214c:	4b15      	ldr	r3, [pc, #84]	; (80021a4 <MX_TIM6_Init+0x6c>)
 800214e:	4a16      	ldr	r2, [pc, #88]	; (80021a8 <MX_TIM6_Init+0x70>)
 8002150:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0x80;
 8002152:	4b14      	ldr	r3, [pc, #80]	; (80021a4 <MX_TIM6_Init+0x6c>)
 8002154:	2280      	movs	r2, #128	; 0x80
 8002156:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002158:	4b12      	ldr	r3, [pc, #72]	; (80021a4 <MX_TIM6_Init+0x6c>)
 800215a:	2200      	movs	r2, #0
 800215c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 32768;
 800215e:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <MX_TIM6_Init+0x6c>)
 8002160:	2280      	movs	r2, #128	; 0x80
 8002162:	0212      	lsls	r2, r2, #8
 8002164:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002166:	4b0f      	ldr	r3, [pc, #60]	; (80021a4 <MX_TIM6_Init+0x6c>)
 8002168:	2200      	movs	r2, #0
 800216a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800216c:	4b0d      	ldr	r3, [pc, #52]	; (80021a4 <MX_TIM6_Init+0x6c>)
 800216e:	0018      	movs	r0, r3
 8002170:	f005 fb72 	bl	8007858 <HAL_TIM_Base_Init>
 8002174:	1e03      	subs	r3, r0, #0
 8002176:	d001      	beq.n	800217c <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 8002178:	f000 f9ee 	bl	8002558 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800217c:	003b      	movs	r3, r7
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002182:	003b      	movs	r3, r7
 8002184:	2200      	movs	r2, #0
 8002186:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002188:	003a      	movs	r2, r7
 800218a:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <MX_TIM6_Init+0x6c>)
 800218c:	0011      	movs	r1, r2
 800218e:	0018      	movs	r0, r3
 8002190:	f006 f9c1 	bl	8008516 <HAL_TIMEx_MasterConfigSynchronization>
 8002194:	1e03      	subs	r3, r0, #0
 8002196:	d001      	beq.n	800219c <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 8002198:	f000 f9de 	bl	8002558 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800219c:	46c0      	nop			; (mov r8, r8)
 800219e:	46bd      	mov	sp, r7
 80021a0:	b002      	add	sp, #8
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	20000150 	.word	0x20000150
 80021a8:	40001000 	.word	0x40001000

080021ac <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b08a      	sub	sp, #40	; 0x28
 80021b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021b2:	2318      	movs	r3, #24
 80021b4:	18fb      	adds	r3, r7, r3
 80021b6:	0018      	movs	r0, r3
 80021b8:	2310      	movs	r3, #16
 80021ba:	001a      	movs	r2, r3
 80021bc:	2100      	movs	r1, #0
 80021be:	f006 fa48 	bl	8008652 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021c2:	2310      	movs	r3, #16
 80021c4:	18fb      	adds	r3, r7, r3
 80021c6:	0018      	movs	r0, r3
 80021c8:	2308      	movs	r3, #8
 80021ca:	001a      	movs	r2, r3
 80021cc:	2100      	movs	r1, #0
 80021ce:	f006 fa40 	bl	8008652 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021d2:	003b      	movs	r3, r7
 80021d4:	0018      	movs	r0, r3
 80021d6:	2310      	movs	r3, #16
 80021d8:	001a      	movs	r2, r3
 80021da:	2100      	movs	r1, #0
 80021dc:	f006 fa39 	bl	8008652 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 80021e0:	4b3c      	ldr	r3, [pc, #240]	; (80022d4 <MX_TIM21_Init+0x128>)
 80021e2:	4a3d      	ldr	r2, [pc, #244]	; (80022d8 <MX_TIM21_Init+0x12c>)
 80021e4:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 0;
 80021e6:	4b3b      	ldr	r3, [pc, #236]	; (80022d4 <MX_TIM21_Init+0x128>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ec:	4b39      	ldr	r3, [pc, #228]	; (80022d4 <MX_TIM21_Init+0x128>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 0x8000;
 80021f2:	4b38      	ldr	r3, [pc, #224]	; (80022d4 <MX_TIM21_Init+0x128>)
 80021f4:	2280      	movs	r2, #128	; 0x80
 80021f6:	0212      	lsls	r2, r2, #8
 80021f8:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021fa:	4b36      	ldr	r3, [pc, #216]	; (80022d4 <MX_TIM21_Init+0x128>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002200:	4b34      	ldr	r3, [pc, #208]	; (80022d4 <MX_TIM21_Init+0x128>)
 8002202:	2200      	movs	r2, #0
 8002204:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8002206:	4b33      	ldr	r3, [pc, #204]	; (80022d4 <MX_TIM21_Init+0x128>)
 8002208:	0018      	movs	r0, r3
 800220a:	f005 fb25 	bl	8007858 <HAL_TIM_Base_Init>
 800220e:	1e03      	subs	r3, r0, #0
 8002210:	d001      	beq.n	8002216 <MX_TIM21_Init+0x6a>
  {
    Error_Handler();
 8002212:	f000 f9a1 	bl	8002558 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8002216:	2118      	movs	r1, #24
 8002218:	187b      	adds	r3, r7, r1
 800221a:	2280      	movs	r2, #128	; 0x80
 800221c:	0192      	lsls	r2, r2, #6
 800221e:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8002220:	187b      	adds	r3, r7, r1
 8002222:	2200      	movs	r2, #0
 8002224:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8002226:	187b      	adds	r3, r7, r1
 8002228:	2200      	movs	r2, #0
 800222a:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 800222c:	187b      	adds	r3, r7, r1
 800222e:	2200      	movs	r2, #0
 8002230:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8002232:	187a      	adds	r2, r7, r1
 8002234:	4b27      	ldr	r3, [pc, #156]	; (80022d4 <MX_TIM21_Init+0x128>)
 8002236:	0011      	movs	r1, r2
 8002238:	0018      	movs	r0, r3
 800223a:	f005 fe77 	bl	8007f2c <HAL_TIM_ConfigClockSource>
 800223e:	1e03      	subs	r3, r0, #0
 8002240:	d001      	beq.n	8002246 <MX_TIM21_Init+0x9a>
  {
    Error_Handler();
 8002242:	f000 f989 	bl	8002558 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim21) != HAL_OK)
 8002246:	4b23      	ldr	r3, [pc, #140]	; (80022d4 <MX_TIM21_Init+0x128>)
 8002248:	0018      	movs	r0, r3
 800224a:	f005 fb75 	bl	8007938 <HAL_TIM_OC_Init>
 800224e:	1e03      	subs	r3, r0, #0
 8002250:	d001      	beq.n	8002256 <MX_TIM21_Init+0xaa>
  {
    Error_Handler();
 8002252:	f000 f981 	bl	8002558 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002256:	2110      	movs	r1, #16
 8002258:	187b      	adds	r3, r7, r1
 800225a:	2200      	movs	r2, #0
 800225c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800225e:	187b      	adds	r3, r7, r1
 8002260:	2200      	movs	r2, #0
 8002262:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8002264:	187a      	adds	r2, r7, r1
 8002266:	4b1b      	ldr	r3, [pc, #108]	; (80022d4 <MX_TIM21_Init+0x128>)
 8002268:	0011      	movs	r1, r2
 800226a:	0018      	movs	r0, r3
 800226c:	f006 f953 	bl	8008516 <HAL_TIMEx_MasterConfigSynchronization>
 8002270:	1e03      	subs	r3, r0, #0
 8002272:	d001      	beq.n	8002278 <MX_TIM21_Init+0xcc>
  {
    Error_Handler();
 8002274:	f000 f970 	bl	8002558 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim21, TIM21_ETR_LSE) != HAL_OK)
 8002278:	4b16      	ldr	r3, [pc, #88]	; (80022d4 <MX_TIM21_Init+0x128>)
 800227a:	2103      	movs	r1, #3
 800227c:	0018      	movs	r0, r3
 800227e:	f006 f98d 	bl	800859c <HAL_TIMEx_RemapConfig>
 8002282:	1e03      	subs	r3, r0, #0
 8002284:	d001      	beq.n	800228a <MX_TIM21_Init+0xde>
  {
    Error_Handler();
 8002286:	f000 f967 	bl	8002558 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800228a:	003b      	movs	r3, r7
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002290:	003b      	movs	r3, r7
 8002292:	2200      	movs	r2, #0
 8002294:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002296:	003b      	movs	r3, r7
 8002298:	2200      	movs	r2, #0
 800229a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800229c:	003b      	movs	r3, r7
 800229e:	2200      	movs	r2, #0
 80022a0:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022a2:	0039      	movs	r1, r7
 80022a4:	4b0b      	ldr	r3, [pc, #44]	; (80022d4 <MX_TIM21_Init+0x128>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	0018      	movs	r0, r3
 80022aa:	f005 fd39 	bl	8007d20 <HAL_TIM_OC_ConfigChannel>
 80022ae:	1e03      	subs	r3, r0, #0
 80022b0:	d001      	beq.n	80022b6 <MX_TIM21_Init+0x10a>
  {
    Error_Handler();
 80022b2:	f000 f951 	bl	8002558 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022b6:	0039      	movs	r1, r7
 80022b8:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <MX_TIM21_Init+0x128>)
 80022ba:	2204      	movs	r2, #4
 80022bc:	0018      	movs	r0, r3
 80022be:	f005 fd2f 	bl	8007d20 <HAL_TIM_OC_ConfigChannel>
 80022c2:	1e03      	subs	r3, r0, #0
 80022c4:	d001      	beq.n	80022ca <MX_TIM21_Init+0x11e>
  {
    Error_Handler();
 80022c6:	f000 f947 	bl	8002558 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 80022ca:	46c0      	nop			; (mov r8, r8)
 80022cc:	46bd      	mov	sp, r7
 80022ce:	b00a      	add	sp, #40	; 0x28
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	20000368 	.word	0x20000368
 80022d8:	40010800 	.word	0x40010800

080022dc <MX_TIM22_Init>:
  * @brief TIM22 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM22_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08a      	sub	sp, #40	; 0x28
 80022e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022e2:	2318      	movs	r3, #24
 80022e4:	18fb      	adds	r3, r7, r3
 80022e6:	0018      	movs	r0, r3
 80022e8:	2310      	movs	r3, #16
 80022ea:	001a      	movs	r2, r3
 80022ec:	2100      	movs	r1, #0
 80022ee:	f006 f9b0 	bl	8008652 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022f2:	2310      	movs	r3, #16
 80022f4:	18fb      	adds	r3, r7, r3
 80022f6:	0018      	movs	r0, r3
 80022f8:	2308      	movs	r3, #8
 80022fa:	001a      	movs	r2, r3
 80022fc:	2100      	movs	r1, #0
 80022fe:	f006 f9a8 	bl	8008652 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002302:	003b      	movs	r3, r7
 8002304:	0018      	movs	r0, r3
 8002306:	2310      	movs	r3, #16
 8002308:	001a      	movs	r2, r3
 800230a:	2100      	movs	r1, #0
 800230c:	f006 f9a1 	bl	8008652 <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 8002310:	4b37      	ldr	r3, [pc, #220]	; (80023f0 <MX_TIM22_Init+0x114>)
 8002312:	4a38      	ldr	r2, [pc, #224]	; (80023f4 <MX_TIM22_Init+0x118>)
 8002314:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 0x400;
 8002316:	4b36      	ldr	r3, [pc, #216]	; (80023f0 <MX_TIM22_Init+0x114>)
 8002318:	2280      	movs	r2, #128	; 0x80
 800231a:	00d2      	lsls	r2, r2, #3
 800231c:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 800231e:	4b34      	ldr	r3, [pc, #208]	; (80023f0 <MX_TIM22_Init+0x114>)
 8002320:	2200      	movs	r2, #0
 8002322:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 1920;
 8002324:	4b32      	ldr	r3, [pc, #200]	; (80023f0 <MX_TIM22_Init+0x114>)
 8002326:	22f0      	movs	r2, #240	; 0xf0
 8002328:	00d2      	lsls	r2, r2, #3
 800232a:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800232c:	4b30      	ldr	r3, [pc, #192]	; (80023f0 <MX_TIM22_Init+0x114>)
 800232e:	2200      	movs	r2, #0
 8002330:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002332:	4b2f      	ldr	r3, [pc, #188]	; (80023f0 <MX_TIM22_Init+0x114>)
 8002334:	2200      	movs	r2, #0
 8002336:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim22) != HAL_OK)
 8002338:	4b2d      	ldr	r3, [pc, #180]	; (80023f0 <MX_TIM22_Init+0x114>)
 800233a:	0018      	movs	r0, r3
 800233c:	f005 fa8c 	bl	8007858 <HAL_TIM_Base_Init>
 8002340:	1e03      	subs	r3, r0, #0
 8002342:	d001      	beq.n	8002348 <MX_TIM22_Init+0x6c>
  {
    Error_Handler();
 8002344:	f000 f908 	bl	8002558 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8002348:	2118      	movs	r1, #24
 800234a:	187b      	adds	r3, r7, r1
 800234c:	2280      	movs	r2, #128	; 0x80
 800234e:	0192      	lsls	r2, r2, #6
 8002350:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8002352:	187b      	adds	r3, r7, r1
 8002354:	2200      	movs	r2, #0
 8002356:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8002358:	187b      	adds	r3, r7, r1
 800235a:	2200      	movs	r2, #0
 800235c:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 800235e:	187b      	adds	r3, r7, r1
 8002360:	2200      	movs	r2, #0
 8002362:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig) != HAL_OK)
 8002364:	187a      	adds	r2, r7, r1
 8002366:	4b22      	ldr	r3, [pc, #136]	; (80023f0 <MX_TIM22_Init+0x114>)
 8002368:	0011      	movs	r1, r2
 800236a:	0018      	movs	r0, r3
 800236c:	f005 fdde 	bl	8007f2c <HAL_TIM_ConfigClockSource>
 8002370:	1e03      	subs	r3, r0, #0
 8002372:	d001      	beq.n	8002378 <MX_TIM22_Init+0x9c>
  {
    Error_Handler();
 8002374:	f000 f8f0 	bl	8002558 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim22) != HAL_OK)
 8002378:	4b1d      	ldr	r3, [pc, #116]	; (80023f0 <MX_TIM22_Init+0x114>)
 800237a:	0018      	movs	r0, r3
 800237c:	f005 fadc 	bl	8007938 <HAL_TIM_OC_Init>
 8002380:	1e03      	subs	r3, r0, #0
 8002382:	d001      	beq.n	8002388 <MX_TIM22_Init+0xac>
  {
    Error_Handler();
 8002384:	f000 f8e8 	bl	8002558 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002388:	2110      	movs	r1, #16
 800238a:	187b      	adds	r3, r7, r1
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002390:	187b      	adds	r3, r7, r1
 8002392:	2200      	movs	r2, #0
 8002394:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 8002396:	187a      	adds	r2, r7, r1
 8002398:	4b15      	ldr	r3, [pc, #84]	; (80023f0 <MX_TIM22_Init+0x114>)
 800239a:	0011      	movs	r1, r2
 800239c:	0018      	movs	r0, r3
 800239e:	f006 f8ba 	bl	8008516 <HAL_TIMEx_MasterConfigSynchronization>
 80023a2:	1e03      	subs	r3, r0, #0
 80023a4:	d001      	beq.n	80023aa <MX_TIM22_Init+0xce>
  {
    Error_Handler();
 80023a6:	f000 f8d7 	bl	8002558 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim22, TIM22_ETR_LSE) != HAL_OK)
 80023aa:	4b11      	ldr	r3, [pc, #68]	; (80023f0 <MX_TIM22_Init+0x114>)
 80023ac:	2103      	movs	r1, #3
 80023ae:	0018      	movs	r0, r3
 80023b0:	f006 f8f4 	bl	800859c <HAL_TIMEx_RemapConfig>
 80023b4:	1e03      	subs	r3, r0, #0
 80023b6:	d001      	beq.n	80023bc <MX_TIM22_Init+0xe0>
  {
    Error_Handler();
 80023b8:	f000 f8ce 	bl	8002558 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80023bc:	003b      	movs	r3, r7
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80023c2:	003b      	movs	r3, r7
 80023c4:	2200      	movs	r2, #0
 80023c6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023c8:	003b      	movs	r3, r7
 80023ca:	2200      	movs	r2, #0
 80023cc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023ce:	003b      	movs	r3, r7
 80023d0:	2200      	movs	r2, #0
 80023d2:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023d4:	0039      	movs	r1, r7
 80023d6:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <MX_TIM22_Init+0x114>)
 80023d8:	2200      	movs	r2, #0
 80023da:	0018      	movs	r0, r3
 80023dc:	f005 fca0 	bl	8007d20 <HAL_TIM_OC_ConfigChannel>
 80023e0:	1e03      	subs	r3, r0, #0
 80023e2:	d001      	beq.n	80023e8 <MX_TIM22_Init+0x10c>
  {
    Error_Handler();
 80023e4:	f000 f8b8 	bl	8002558 <Error_Handler>
  }
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */

}
 80023e8:	46c0      	nop			; (mov r8, r8)
 80023ea:	46bd      	mov	sp, r7
 80023ec:	b00a      	add	sp, #40	; 0x28
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	200001a0 	.word	0x200001a0
 80023f4:	40011400 	.word	0x40011400

080023f8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023fe:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <MX_DMA_Init+0x38>)
 8002400:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002402:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <MX_DMA_Init+0x38>)
 8002404:	2101      	movs	r1, #1
 8002406:	430a      	orrs	r2, r1
 8002408:	631a      	str	r2, [r3, #48]	; 0x30
 800240a:	4b09      	ldr	r3, [pc, #36]	; (8002430 <MX_DMA_Init+0x38>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	2201      	movs	r2, #1
 8002410:	4013      	ands	r3, r2
 8002412:	607b      	str	r3, [r7, #4]
 8002414:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8002416:	2200      	movs	r2, #0
 8002418:	2100      	movs	r1, #0
 800241a:	200a      	movs	r0, #10
 800241c:	f002 fbca 	bl	8004bb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8002420:	200a      	movs	r0, #10
 8002422:	f002 fbdc 	bl	8004bde <HAL_NVIC_EnableIRQ>

}
 8002426:	46c0      	nop			; (mov r8, r8)
 8002428:	46bd      	mov	sp, r7
 800242a:	b002      	add	sp, #8
 800242c:	bd80      	pop	{r7, pc}
 800242e:	46c0      	nop			; (mov r8, r8)
 8002430:	40021000 	.word	0x40021000

08002434 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002434:	b590      	push	{r4, r7, lr}
 8002436:	b089      	sub	sp, #36	; 0x24
 8002438:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800243a:	240c      	movs	r4, #12
 800243c:	193b      	adds	r3, r7, r4
 800243e:	0018      	movs	r0, r3
 8002440:	2314      	movs	r3, #20
 8002442:	001a      	movs	r2, r3
 8002444:	2100      	movs	r1, #0
 8002446:	f006 f904 	bl	8008652 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800244a:	4b3e      	ldr	r3, [pc, #248]	; (8002544 <MX_GPIO_Init+0x110>)
 800244c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800244e:	4b3d      	ldr	r3, [pc, #244]	; (8002544 <MX_GPIO_Init+0x110>)
 8002450:	2104      	movs	r1, #4
 8002452:	430a      	orrs	r2, r1
 8002454:	62da      	str	r2, [r3, #44]	; 0x2c
 8002456:	4b3b      	ldr	r3, [pc, #236]	; (8002544 <MX_GPIO_Init+0x110>)
 8002458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245a:	2204      	movs	r2, #4
 800245c:	4013      	ands	r3, r2
 800245e:	60bb      	str	r3, [r7, #8]
 8002460:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002462:	4b38      	ldr	r3, [pc, #224]	; (8002544 <MX_GPIO_Init+0x110>)
 8002464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002466:	4b37      	ldr	r3, [pc, #220]	; (8002544 <MX_GPIO_Init+0x110>)
 8002468:	2101      	movs	r1, #1
 800246a:	430a      	orrs	r2, r1
 800246c:	62da      	str	r2, [r3, #44]	; 0x2c
 800246e:	4b35      	ldr	r3, [pc, #212]	; (8002544 <MX_GPIO_Init+0x110>)
 8002470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002472:	2201      	movs	r2, #1
 8002474:	4013      	ands	r3, r2
 8002476:	607b      	str	r3, [r7, #4]
 8002478:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800247a:	4b32      	ldr	r3, [pc, #200]	; (8002544 <MX_GPIO_Init+0x110>)
 800247c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800247e:	4b31      	ldr	r3, [pc, #196]	; (8002544 <MX_GPIO_Init+0x110>)
 8002480:	2102      	movs	r1, #2
 8002482:	430a      	orrs	r2, r1
 8002484:	62da      	str	r2, [r3, #44]	; 0x2c
 8002486:	4b2f      	ldr	r3, [pc, #188]	; (8002544 <MX_GPIO_Init+0x110>)
 8002488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248a:	2202      	movs	r2, #2
 800248c:	4013      	ands	r3, r2
 800248e:	603b      	str	r3, [r7, #0]
 8002490:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_7, GPIO_PIN_RESET);
 8002492:	4b2d      	ldr	r3, [pc, #180]	; (8002548 <MX_GPIO_Init+0x114>)
 8002494:	2200      	movs	r2, #0
 8002496:	218b      	movs	r1, #139	; 0x8b
 8002498:	0018      	movs	r0, r3
 800249a:	f002 fee6 	bl	800526a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_6, GPIO_PIN_RESET);
 800249e:	4b2b      	ldr	r3, [pc, #172]	; (800254c <MX_GPIO_Init+0x118>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	2142      	movs	r1, #66	; 0x42
 80024a4:	0018      	movs	r0, r3
 80024a6:	f002 fee0 	bl	800526a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC3 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_7;
 80024aa:	0021      	movs	r1, r4
 80024ac:	187b      	adds	r3, r7, r1
 80024ae:	228b      	movs	r2, #139	; 0x8b
 80024b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024b2:	187b      	adds	r3, r7, r1
 80024b4:	2201      	movs	r2, #1
 80024b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b8:	187b      	adds	r3, r7, r1
 80024ba:	2200      	movs	r2, #0
 80024bc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024be:	187b      	adds	r3, r7, r1
 80024c0:	2200      	movs	r2, #0
 80024c2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024c4:	000c      	movs	r4, r1
 80024c6:	187b      	adds	r3, r7, r1
 80024c8:	4a1f      	ldr	r2, [pc, #124]	; (8002548 <MX_GPIO_Init+0x114>)
 80024ca:	0019      	movs	r1, r3
 80024cc:	0010      	movs	r0, r2
 80024ce:	f002 fd31 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 80024d2:	0021      	movs	r1, r4
 80024d4:	187b      	adds	r3, r7, r1
 80024d6:	2242      	movs	r2, #66	; 0x42
 80024d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024da:	187b      	adds	r3, r7, r1
 80024dc:	2201      	movs	r2, #1
 80024de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e0:	187b      	adds	r3, r7, r1
 80024e2:	2200      	movs	r2, #0
 80024e4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e6:	187b      	adds	r3, r7, r1
 80024e8:	2200      	movs	r2, #0
 80024ea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ec:	000c      	movs	r4, r1
 80024ee:	187b      	adds	r3, r7, r1
 80024f0:	4a16      	ldr	r2, [pc, #88]	; (800254c <MX_GPIO_Init+0x118>)
 80024f2:	0019      	movs	r1, r3
 80024f4:	0010      	movs	r0, r2
 80024f6:	f002 fd1d 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80024fa:	0021      	movs	r1, r4
 80024fc:	187b      	adds	r3, r7, r1
 80024fe:	4a14      	ldr	r2, [pc, #80]	; (8002550 <MX_GPIO_Init+0x11c>)
 8002500:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002502:	187b      	adds	r3, r7, r1
 8002504:	4a13      	ldr	r2, [pc, #76]	; (8002554 <MX_GPIO_Init+0x120>)
 8002506:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002508:	187b      	adds	r3, r7, r1
 800250a:	2202      	movs	r2, #2
 800250c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800250e:	187b      	adds	r3, r7, r1
 8002510:	4a0e      	ldr	r2, [pc, #56]	; (800254c <MX_GPIO_Init+0x118>)
 8002512:	0019      	movs	r1, r3
 8002514:	0010      	movs	r0, r2
 8002516:	f002 fd0d 	bl	8004f34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 800251a:	2200      	movs	r2, #0
 800251c:	2100      	movs	r1, #0
 800251e:	2006      	movs	r0, #6
 8002520:	f002 fb48 	bl	8004bb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8002524:	2006      	movs	r0, #6
 8002526:	f002 fb5a 	bl	8004bde <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800252a:	2200      	movs	r2, #0
 800252c:	2100      	movs	r1, #0
 800252e:	2007      	movs	r0, #7
 8002530:	f002 fb40 	bl	8004bb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002534:	2007      	movs	r0, #7
 8002536:	f002 fb52 	bl	8004bde <HAL_NVIC_EnableIRQ>

}
 800253a:	46c0      	nop			; (mov r8, r8)
 800253c:	46bd      	mov	sp, r7
 800253e:	b009      	add	sp, #36	; 0x24
 8002540:	bd90      	pop	{r4, r7, pc}
 8002542:	46c0      	nop			; (mov r8, r8)
 8002544:	40021000 	.word	0x40021000
 8002548:	50000800 	.word	0x50000800
 800254c:	50000400 	.word	0x50000400
 8002550:	0000e004 	.word	0x0000e004
 8002554:	10110000 	.word	0x10110000

08002558 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800255c:	46c0      	nop			; (mov r8, r8)
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
	...

08002564 <HAL_GPIO_EXTI_Callback>:
	"Nov",
	"Dec"
};

// button interrupt(s)
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	0002      	movs	r2, r0
 800256c:	1dbb      	adds	r3, r7, #6
 800256e:	801a      	strh	r2, [r3, #0]
	HAL_NVIC_DisableIRQ(EXTI2_3_IRQn);
 8002570:	2006      	movs	r0, #6
 8002572:	f002 fb44 	bl	8004bfe <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 8002576:	2007      	movs	r0, #7
 8002578:	f002 fb41 	bl	8004bfe <HAL_NVIC_DisableIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI2_3_IRQn);
 800257c:	2006      	movs	r0, #6
 800257e:	f002 fb5b 	bl	8004c38 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI4_15_IRQn);
 8002582:	2007      	movs	r0, #7
 8002584:	f002 fb58 	bl	8004c38 <HAL_NVIC_ClearPendingIRQ>

	if (GPIO_Pin == BUTTON1) buttons.is1Pressed = 1;
 8002588:	1dbb      	adds	r3, r7, #6
 800258a:	881b      	ldrh	r3, [r3, #0]
 800258c:	2b04      	cmp	r3, #4
 800258e:	d102      	bne.n	8002596 <HAL_GPIO_EXTI_Callback+0x32>
 8002590:	4b15      	ldr	r3, [pc, #84]	; (80025e8 <HAL_GPIO_EXTI_Callback+0x84>)
 8002592:	2201      	movs	r2, #1
 8002594:	701a      	strb	r2, [r3, #0]
	if (GPIO_Pin == BUTTON2) buttons.is2Pressed = 1;
 8002596:	1dbb      	adds	r3, r7, #6
 8002598:	881a      	ldrh	r2, [r3, #0]
 800259a:	2380      	movs	r3, #128	; 0x80
 800259c:	019b      	lsls	r3, r3, #6
 800259e:	429a      	cmp	r2, r3
 80025a0:	d102      	bne.n	80025a8 <HAL_GPIO_EXTI_Callback+0x44>
 80025a2:	4b11      	ldr	r3, [pc, #68]	; (80025e8 <HAL_GPIO_EXTI_Callback+0x84>)
 80025a4:	2201      	movs	r2, #1
 80025a6:	705a      	strb	r2, [r3, #1]
	if (GPIO_Pin == BUTTON3) buttons.is3Pressed = 1;
 80025a8:	1dbb      	adds	r3, r7, #6
 80025aa:	881a      	ldrh	r2, [r3, #0]
 80025ac:	2380      	movs	r3, #128	; 0x80
 80025ae:	01db      	lsls	r3, r3, #7
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d102      	bne.n	80025ba <HAL_GPIO_EXTI_Callback+0x56>
 80025b4:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <HAL_GPIO_EXTI_Callback+0x84>)
 80025b6:	2201      	movs	r2, #1
 80025b8:	709a      	strb	r2, [r3, #2]
	if (GPIO_Pin == BUTTON4) buttons.is4Pressed = 1;
 80025ba:	1dbb      	adds	r3, r7, #6
 80025bc:	881a      	ldrh	r2, [r3, #0]
 80025be:	2380      	movs	r3, #128	; 0x80
 80025c0:	021b      	lsls	r3, r3, #8
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d102      	bne.n	80025cc <HAL_GPIO_EXTI_Callback+0x68>
 80025c6:	4b08      	ldr	r3, [pc, #32]	; (80025e8 <HAL_GPIO_EXTI_Callback+0x84>)
 80025c8:	2201      	movs	r2, #1
 80025ca:	70da      	strb	r2, [r3, #3]

	HAL_TIM_Base_Start_IT(&htim6);
 80025cc:	4b07      	ldr	r3, [pc, #28]	; (80025ec <HAL_GPIO_EXTI_Callback+0x88>)
 80025ce:	0018      	movs	r0, r3
 80025d0:	f005 f96e 	bl	80078b0 <HAL_TIM_Base_Start_IT>

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);		// should run for any button
 80025d4:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <HAL_GPIO_EXTI_Callback+0x8c>)
 80025d6:	2108      	movs	r1, #8
 80025d8:	0018      	movs	r0, r3
 80025da:	f002 fe63 	bl	80052a4 <HAL_GPIO_TogglePin>
}
 80025de:	46c0      	nop			; (mov r8, r8)
 80025e0:	46bd      	mov	sp, r7
 80025e2:	b002      	add	sp, #8
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	46c0      	nop			; (mov r8, r8)
 80025e8:	2000018c 	.word	0x2000018c
 80025ec:	20000150 	.word	0x20000150
 80025f0:	50000800 	.word	0x50000800

080025f4 <updateWithButtons>:

void updateWithButtons(RTC_HandleTypeDef *hrtc, TIM_HandleTypeDef *timerStopwatchTim, TIM_HandleTypeDef *motorBacklightTim, TIM_HandleTypeDef *buttonTim) {
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
 8002600:	603b      	str	r3, [r7, #0]
	/* program flow:
	 *   check current face used
	 *   check current variables and check button pressed
	 */
	// button 1 changes the face on screen.
	if (buttons.is1Pressed) {
 8002602:	4b2f      	ldr	r3, [pc, #188]	; (80026c0 <updateWithButtons+0xcc>)
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	b2db      	uxtb	r3, r3
 8002608:	2b00      	cmp	r3, #0
 800260a:	d030      	beq.n	800266e <updateWithButtons+0x7a>
		buttons.is1Pressed = 0;
 800260c:	4b2c      	ldr	r3, [pc, #176]	; (80026c0 <updateWithButtons+0xcc>)
 800260e:	2200      	movs	r2, #0
 8002610:	701a      	strb	r2, [r3, #0]
		isFaceBeingChanged = 1;
 8002612:	4b2c      	ldr	r3, [pc, #176]	; (80026c4 <updateWithButtons+0xd0>)
 8002614:	2201      	movs	r2, #1
 8002616:	701a      	strb	r2, [r3, #0]
		faceOnDisplay = (faceOnDisplay + 1) % NUM_FACES;
 8002618:	4b2b      	ldr	r3, [pc, #172]	; (80026c8 <updateWithButtons+0xd4>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	3301      	adds	r3, #1
 800261e:	4a2b      	ldr	r2, [pc, #172]	; (80026cc <updateWithButtons+0xd8>)
 8002620:	4013      	ands	r3, r2
 8002622:	d504      	bpl.n	800262e <updateWithButtons+0x3a>
 8002624:	3b01      	subs	r3, #1
 8002626:	2204      	movs	r2, #4
 8002628:	4252      	negs	r2, r2
 800262a:	4313      	orrs	r3, r2
 800262c:	3301      	adds	r3, #1
 800262e:	b2da      	uxtb	r2, r3
 8002630:	4b25      	ldr	r3, [pc, #148]	; (80026c8 <updateWithButtons+0xd4>)
 8002632:	701a      	strb	r2, [r3, #0]
		switch (faceOnDisplay) {
 8002634:	4b24      	ldr	r3, [pc, #144]	; (80026c8 <updateWithButtons+0xd4>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d00c      	beq.n	8002656 <updateWithButtons+0x62>
 800263c:	dc02      	bgt.n	8002644 <updateWithButtons+0x50>
 800263e:	2b00      	cmp	r3, #0
 8002640:	d005      	beq.n	800264e <updateWithButtons+0x5a>
			case faceClock: updateFace.clock = 1; break;
			case faceTimer: updateFace.timer = 1; break;
			case faceAlarm: updateFace.alarm = 1; break;
			case faceStopwatch: updateFace.stopwatch = 1; break;
			default: break;
 8002642:	e015      	b.n	8002670 <updateWithButtons+0x7c>
		switch (faceOnDisplay) {
 8002644:	2b02      	cmp	r3, #2
 8002646:	d00a      	beq.n	800265e <updateWithButtons+0x6a>
 8002648:	2b03      	cmp	r3, #3
 800264a:	d00c      	beq.n	8002666 <updateWithButtons+0x72>
			default: break;
 800264c:	e010      	b.n	8002670 <updateWithButtons+0x7c>
			case faceClock: updateFace.clock = 1; break;
 800264e:	4b20      	ldr	r3, [pc, #128]	; (80026d0 <updateWithButtons+0xdc>)
 8002650:	2201      	movs	r2, #1
 8002652:	701a      	strb	r2, [r3, #0]
 8002654:	e00c      	b.n	8002670 <updateWithButtons+0x7c>
			case faceTimer: updateFace.timer = 1; break;
 8002656:	4b1e      	ldr	r3, [pc, #120]	; (80026d0 <updateWithButtons+0xdc>)
 8002658:	2201      	movs	r2, #1
 800265a:	705a      	strb	r2, [r3, #1]
 800265c:	e008      	b.n	8002670 <updateWithButtons+0x7c>
			case faceAlarm: updateFace.alarm = 1; break;
 800265e:	4b1c      	ldr	r3, [pc, #112]	; (80026d0 <updateWithButtons+0xdc>)
 8002660:	2201      	movs	r2, #1
 8002662:	709a      	strb	r2, [r3, #2]
 8002664:	e004      	b.n	8002670 <updateWithButtons+0x7c>
			case faceStopwatch: updateFace.stopwatch = 1; break;
 8002666:	4b1a      	ldr	r3, [pc, #104]	; (80026d0 <updateWithButtons+0xdc>)
 8002668:	2201      	movs	r2, #1
 800266a:	70da      	strb	r2, [r3, #3]
 800266c:	e000      	b.n	8002670 <updateWithButtons+0x7c>
		}
	}
 800266e:	46c0      	nop			; (mov r8, r8)

	if (faceOnDisplay == faceClock) updateClockState(hrtc);
 8002670:	4b15      	ldr	r3, [pc, #84]	; (80026c8 <updateWithButtons+0xd4>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d104      	bne.n	8002682 <updateWithButtons+0x8e>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	0018      	movs	r0, r3
 800267c:	f000 f82a 	bl	80026d4 <updateClockState>
	else if (faceOnDisplay == faceTimer) updateTimerState(timerStopwatchTim);
	else if (faceOnDisplay == faceAlarm) updateAlarmState(hrtc);
	else if (faceOnDisplay == faceStopwatch) updateStopwatchState(timerStopwatchTim);
}
 8002680:	e019      	b.n	80026b6 <updateWithButtons+0xc2>
	else if (faceOnDisplay == faceTimer) updateTimerState(timerStopwatchTim);
 8002682:	4b11      	ldr	r3, [pc, #68]	; (80026c8 <updateWithButtons+0xd4>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d104      	bne.n	8002694 <updateWithButtons+0xa0>
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	0018      	movs	r0, r3
 800268e:	f000 f94b 	bl	8002928 <updateTimerState>
}
 8002692:	e010      	b.n	80026b6 <updateWithButtons+0xc2>
	else if (faceOnDisplay == faceAlarm) updateAlarmState(hrtc);
 8002694:	4b0c      	ldr	r3, [pc, #48]	; (80026c8 <updateWithButtons+0xd4>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	2b02      	cmp	r3, #2
 800269a:	d104      	bne.n	80026a6 <updateWithButtons+0xb2>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	0018      	movs	r0, r3
 80026a0:	f000 fa7c 	bl	8002b9c <updateAlarmState>
}
 80026a4:	e007      	b.n	80026b6 <updateWithButtons+0xc2>
	else if (faceOnDisplay == faceStopwatch) updateStopwatchState(timerStopwatchTim);
 80026a6:	4b08      	ldr	r3, [pc, #32]	; (80026c8 <updateWithButtons+0xd4>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	2b03      	cmp	r3, #3
 80026ac:	d103      	bne.n	80026b6 <updateWithButtons+0xc2>
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	0018      	movs	r0, r3
 80026b2:	f000 fba9 	bl	8002e08 <updateStopwatchState>
}
 80026b6:	46c0      	nop			; (mov r8, r8)
 80026b8:	46bd      	mov	sp, r7
 80026ba:	b004      	add	sp, #16
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	46c0      	nop			; (mov r8, r8)
 80026c0:	2000018c 	.word	0x2000018c
 80026c4:	20000060 	.word	0x20000060
 80026c8:	20000114 	.word	0x20000114
 80026cc:	80000003 	.word	0x80000003
 80026d0:	20000140 	.word	0x20000140

080026d4 <updateClockState>:
 *     the clock is updated and we revert back to default mode.
 *
 * notes:
 *   make date setting more robust (invalidate date entries when that day of month doesn't exist or just change modulo)
 */
void updateClockState(RTC_HandleTypeDef *hrtc) {
 80026d4:	b590      	push	{r4, r7, lr}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
	// change fields up, do nothing if not setting clock
	if (buttons.is2Pressed && clockVars.isBeingSet) {
 80026dc:	4b8d      	ldr	r3, [pc, #564]	; (8002914 <updateClockState+0x240>)
 80026de:	785b      	ldrb	r3, [r3, #1]
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d060      	beq.n	80027a8 <updateClockState+0xd4>
 80026e6:	4b8c      	ldr	r3, [pc, #560]	; (8002918 <updateClockState+0x244>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d05c      	beq.n	80027a8 <updateClockState+0xd4>
		buttons.is2Pressed = 0;
 80026ee:	4b89      	ldr	r3, [pc, #548]	; (8002914 <updateClockState+0x240>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	705a      	strb	r2, [r3, #1]
		updateFace.clock = 1;
 80026f4:	4b89      	ldr	r3, [pc, #548]	; (800291c <updateClockState+0x248>)
 80026f6:	2201      	movs	r2, #1
 80026f8:	701a      	strb	r2, [r3, #0]
		switch (clockVars.fieldBeingSet) {
 80026fa:	4b87      	ldr	r3, [pc, #540]	; (8002918 <updateClockState+0x244>)
 80026fc:	785b      	ldrb	r3, [r3, #1]
 80026fe:	2b05      	cmp	r3, #5
 8002700:	d854      	bhi.n	80027ac <updateClockState+0xd8>
 8002702:	009a      	lsls	r2, r3, #2
 8002704:	4b86      	ldr	r3, [pc, #536]	; (8002920 <updateClockState+0x24c>)
 8002706:	18d3      	adds	r3, r2, r3
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	469f      	mov	pc, r3
			case 1: clockVars.timeToSet->min = (clockVars.timeToSet->min+1) % 60; break;
 800270c:	4b82      	ldr	r3, [pc, #520]	; (8002918 <updateClockState+0x244>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	785b      	ldrb	r3, [r3, #1]
 8002712:	3301      	adds	r3, #1
 8002714:	213c      	movs	r1, #60	; 0x3c
 8002716:	0018      	movs	r0, r3
 8002718:	f7fd fe6e 	bl	80003f8 <__aeabi_idivmod>
 800271c:	000b      	movs	r3, r1
 800271e:	001a      	movs	r2, r3
 8002720:	4b7d      	ldr	r3, [pc, #500]	; (8002918 <updateClockState+0x244>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	705a      	strb	r2, [r3, #1]
 8002728:	e041      	b.n	80027ae <updateClockState+0xda>
			case 2: clockVars.timeToSet->hr = (clockVars.timeToSet->hr+1) % 24; break;
 800272a:	4b7b      	ldr	r3, [pc, #492]	; (8002918 <updateClockState+0x244>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	3301      	adds	r3, #1
 8002732:	2118      	movs	r1, #24
 8002734:	0018      	movs	r0, r3
 8002736:	f7fd fe5f 	bl	80003f8 <__aeabi_idivmod>
 800273a:	000b      	movs	r3, r1
 800273c:	001a      	movs	r2, r3
 800273e:	4b76      	ldr	r3, [pc, #472]	; (8002918 <updateClockState+0x244>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	701a      	strb	r2, [r3, #0]
 8002746:	e032      	b.n	80027ae <updateClockState+0xda>
			case 3: clockVars.dateToSet->yr++; break;		// supposed to be between large numbers. no need for bounds checking
 8002748:	4b73      	ldr	r3, [pc, #460]	; (8002918 <updateClockState+0x244>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	881a      	ldrh	r2, [r3, #0]
 800274e:	3201      	adds	r2, #1
 8002750:	b292      	uxth	r2, r2
 8002752:	801a      	strh	r2, [r3, #0]
 8002754:	e02b      	b.n	80027ae <updateClockState+0xda>
			case 4: clockVars.dateToSet->month = (clockVars.dateToSet->month) % 12 + 1; break;
 8002756:	4b70      	ldr	r3, [pc, #448]	; (8002918 <updateClockState+0x244>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	789b      	ldrb	r3, [r3, #2]
 800275c:	210c      	movs	r1, #12
 800275e:	0018      	movs	r0, r3
 8002760:	f7fd fd60 	bl	8000224 <__aeabi_uidivmod>
 8002764:	000b      	movs	r3, r1
 8002766:	b2da      	uxtb	r2, r3
 8002768:	4b6b      	ldr	r3, [pc, #428]	; (8002918 <updateClockState+0x244>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	3201      	adds	r2, #1
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	709a      	strb	r2, [r3, #2]
 8002772:	e01c      	b.n	80027ae <updateClockState+0xda>
			case 5: clockVars.dateToSet->date = ((clockVars.dateToSet->date) % maxDaysInMonth(clockVars.dateToSet->month, clockVars.dateToSet->yr)) + 1; break;
 8002774:	4b68      	ldr	r3, [pc, #416]	; (8002918 <updateClockState+0x244>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	78dc      	ldrb	r4, [r3, #3]
 800277a:	4b67      	ldr	r3, [pc, #412]	; (8002918 <updateClockState+0x244>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	789a      	ldrb	r2, [r3, #2]
 8002780:	4b65      	ldr	r3, [pc, #404]	; (8002918 <updateClockState+0x244>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	881b      	ldrh	r3, [r3, #0]
 8002786:	0019      	movs	r1, r3
 8002788:	0010      	movs	r0, r2
 800278a:	f001 f929 	bl	80039e0 <maxDaysInMonth>
 800278e:	0003      	movs	r3, r0
 8002790:	0019      	movs	r1, r3
 8002792:	0020      	movs	r0, r4
 8002794:	f7fd fd46 	bl	8000224 <__aeabi_uidivmod>
 8002798:	000b      	movs	r3, r1
 800279a:	b2da      	uxtb	r2, r3
 800279c:	4b5e      	ldr	r3, [pc, #376]	; (8002918 <updateClockState+0x244>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	3201      	adds	r2, #1
 80027a2:	b2d2      	uxtb	r2, r2
 80027a4:	70da      	strb	r2, [r3, #3]
 80027a6:	e002      	b.n	80027ae <updateClockState+0xda>
			default: break;
		}
	}
 80027a8:	46c0      	nop			; (mov r8, r8)
 80027aa:	e000      	b.n	80027ae <updateClockState+0xda>
			default: break;
 80027ac:	46c0      	nop			; (mov r8, r8)
	// change fields down, do nothing if not setting clock
	if (buttons.is3Pressed && clockVars.isBeingSet) {
 80027ae:	4b59      	ldr	r3, [pc, #356]	; (8002914 <updateClockState+0x240>)
 80027b0:	789b      	ldrb	r3, [r3, #2]
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d066      	beq.n	8002886 <updateClockState+0x1b2>
 80027b8:	4b57      	ldr	r3, [pc, #348]	; (8002918 <updateClockState+0x244>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d062      	beq.n	8002886 <updateClockState+0x1b2>
		buttons.is3Pressed = 0;
 80027c0:	4b54      	ldr	r3, [pc, #336]	; (8002914 <updateClockState+0x240>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	709a      	strb	r2, [r3, #2]
		updateFace.clock = 1;
 80027c6:	4b55      	ldr	r3, [pc, #340]	; (800291c <updateClockState+0x248>)
 80027c8:	2201      	movs	r2, #1
 80027ca:	701a      	strb	r2, [r3, #0]
		switch (clockVars.fieldBeingSet) {
 80027cc:	4b52      	ldr	r3, [pc, #328]	; (8002918 <updateClockState+0x244>)
 80027ce:	785b      	ldrb	r3, [r3, #1]
 80027d0:	2b05      	cmp	r3, #5
 80027d2:	d85a      	bhi.n	800288a <updateClockState+0x1b6>
 80027d4:	009a      	lsls	r2, r3, #2
 80027d6:	4b53      	ldr	r3, [pc, #332]	; (8002924 <updateClockState+0x250>)
 80027d8:	18d3      	adds	r3, r2, r3
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	469f      	mov	pc, r3
			case 1:
				if (clockVars.timeToSet->min == 0) clockVars.timeToSet->min = 59;
 80027de:	4b4e      	ldr	r3, [pc, #312]	; (8002918 <updateClockState+0x244>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	785b      	ldrb	r3, [r3, #1]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d104      	bne.n	80027f2 <updateClockState+0x11e>
 80027e8:	4b4b      	ldr	r3, [pc, #300]	; (8002918 <updateClockState+0x244>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	223b      	movs	r2, #59	; 0x3b
 80027ee:	705a      	strb	r2, [r3, #1]
				else clockVars.timeToSet->min--;
				break;
 80027f0:	e04c      	b.n	800288c <updateClockState+0x1b8>
				else clockVars.timeToSet->min--;
 80027f2:	4b49      	ldr	r3, [pc, #292]	; (8002918 <updateClockState+0x244>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	785a      	ldrb	r2, [r3, #1]
 80027f8:	3a01      	subs	r2, #1
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	705a      	strb	r2, [r3, #1]
				break;
 80027fe:	e045      	b.n	800288c <updateClockState+0x1b8>
			case 2:
				if (clockVars.timeToSet->hr == 0) clockVars.timeToSet->hr = 23;
 8002800:	4b45      	ldr	r3, [pc, #276]	; (8002918 <updateClockState+0x244>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d104      	bne.n	8002814 <updateClockState+0x140>
 800280a:	4b43      	ldr	r3, [pc, #268]	; (8002918 <updateClockState+0x244>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	2217      	movs	r2, #23
 8002810:	701a      	strb	r2, [r3, #0]
				else clockVars.timeToSet->hr--;
				break;
 8002812:	e03b      	b.n	800288c <updateClockState+0x1b8>
				else clockVars.timeToSet->hr--;
 8002814:	4b40      	ldr	r3, [pc, #256]	; (8002918 <updateClockState+0x244>)
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	781a      	ldrb	r2, [r3, #0]
 800281a:	3a01      	subs	r2, #1
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	701a      	strb	r2, [r3, #0]
				break;
 8002820:	e034      	b.n	800288c <updateClockState+0x1b8>
			case 3: clockVars.dateToSet->yr--; break;		// supposed to be from 1950-2050. no need to do bounds checking
 8002822:	4b3d      	ldr	r3, [pc, #244]	; (8002918 <updateClockState+0x244>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	881a      	ldrh	r2, [r3, #0]
 8002828:	3a01      	subs	r2, #1
 800282a:	b292      	uxth	r2, r2
 800282c:	801a      	strh	r2, [r3, #0]
 800282e:	e02d      	b.n	800288c <updateClockState+0x1b8>
			case 4: //clockVars.dateToSet->month = clockVars.dateToSet->month == 1 ? 12 : clockVars.dateToSet->month-1; break;
				if (clockVars.dateToSet->month == 1) clockVars.dateToSet->month = 12;
 8002830:	4b39      	ldr	r3, [pc, #228]	; (8002918 <updateClockState+0x244>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	789b      	ldrb	r3, [r3, #2]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d104      	bne.n	8002844 <updateClockState+0x170>
 800283a:	4b37      	ldr	r3, [pc, #220]	; (8002918 <updateClockState+0x244>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	220c      	movs	r2, #12
 8002840:	709a      	strb	r2, [r3, #2]
				else clockVars.dateToSet->month--;
				break;
 8002842:	e023      	b.n	800288c <updateClockState+0x1b8>
				else clockVars.dateToSet->month--;
 8002844:	4b34      	ldr	r3, [pc, #208]	; (8002918 <updateClockState+0x244>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	789a      	ldrb	r2, [r3, #2]
 800284a:	3a01      	subs	r2, #1
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	709a      	strb	r2, [r3, #2]
				break;
 8002850:	e01c      	b.n	800288c <updateClockState+0x1b8>
			case 5:
				if (clockVars.dateToSet->date == 1) clockVars.dateToSet->date = maxDaysInMonth(clockVars.dateToSet->month, clockVars.dateToSet->yr);
 8002852:	4b31      	ldr	r3, [pc, #196]	; (8002918 <updateClockState+0x244>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	78db      	ldrb	r3, [r3, #3]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d10d      	bne.n	8002878 <updateClockState+0x1a4>
 800285c:	4b2e      	ldr	r3, [pc, #184]	; (8002918 <updateClockState+0x244>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	789a      	ldrb	r2, [r3, #2]
 8002862:	4b2d      	ldr	r3, [pc, #180]	; (8002918 <updateClockState+0x244>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	8819      	ldrh	r1, [r3, #0]
 8002868:	4b2b      	ldr	r3, [pc, #172]	; (8002918 <updateClockState+0x244>)
 800286a:	685c      	ldr	r4, [r3, #4]
 800286c:	0010      	movs	r0, r2
 800286e:	f001 f8b7 	bl	80039e0 <maxDaysInMonth>
 8002872:	0003      	movs	r3, r0
 8002874:	70e3      	strb	r3, [r4, #3]
				else clockVars.dateToSet->date--;
				break;
 8002876:	e009      	b.n	800288c <updateClockState+0x1b8>
				else clockVars.dateToSet->date--;
 8002878:	4b27      	ldr	r3, [pc, #156]	; (8002918 <updateClockState+0x244>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	78da      	ldrb	r2, [r3, #3]
 800287e:	3a01      	subs	r2, #1
 8002880:	b2d2      	uxtb	r2, r2
 8002882:	70da      	strb	r2, [r3, #3]
				break;
 8002884:	e002      	b.n	800288c <updateClockState+0x1b8>
			default: break;
		}
	}
 8002886:	46c0      	nop			; (mov r8, r8)
 8002888:	e000      	b.n	800288c <updateClockState+0x1b8>
			default: break;
 800288a:	46c0      	nop			; (mov r8, r8)
	// switches between setting mode and default mode. changes between different clock fields
	if (buttons.is4Pressed) {
 800288c:	4b21      	ldr	r3, [pc, #132]	; (8002914 <updateClockState+0x240>)
 800288e:	78db      	ldrb	r3, [r3, #3]
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d03a      	beq.n	800290c <updateClockState+0x238>
		buttons.is4Pressed = 0;
 8002896:	4b1f      	ldr	r3, [pc, #124]	; (8002914 <updateClockState+0x240>)
 8002898:	2200      	movs	r2, #0
 800289a:	70da      	strb	r2, [r3, #3]
		updateFace.clock = 1;
 800289c:	4b1f      	ldr	r3, [pc, #124]	; (800291c <updateClockState+0x248>)
 800289e:	2201      	movs	r2, #1
 80028a0:	701a      	strb	r2, [r3, #0]
		clockVars.fieldBeingSet = (clockVars.fieldBeingSet + 1) % (NUM_CLOCKFIELDS + 1);
 80028a2:	4b1d      	ldr	r3, [pc, #116]	; (8002918 <updateClockState+0x244>)
 80028a4:	785b      	ldrb	r3, [r3, #1]
 80028a6:	3301      	adds	r3, #1
 80028a8:	2106      	movs	r1, #6
 80028aa:	0018      	movs	r0, r3
 80028ac:	f7fd fda4 	bl	80003f8 <__aeabi_idivmod>
 80028b0:	000b      	movs	r3, r1
 80028b2:	b2da      	uxtb	r2, r3
 80028b4:	4b18      	ldr	r3, [pc, #96]	; (8002918 <updateClockState+0x244>)
 80028b6:	705a      	strb	r2, [r3, #1]
		if (clockVars.fieldBeingSet != 0) {
 80028b8:	4b17      	ldr	r3, [pc, #92]	; (8002918 <updateClockState+0x244>)
 80028ba:	785b      	ldrb	r3, [r3, #1]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d016      	beq.n	80028ee <updateClockState+0x21a>
			clockVars.isBeingSet = 1;
 80028c0:	4b15      	ldr	r3, [pc, #84]	; (8002918 <updateClockState+0x244>)
 80028c2:	2201      	movs	r2, #1
 80028c4:	701a      	strb	r2, [r3, #0]

			// should pull current time when first entering setting mode
			if (clockVars.fieldBeingSet == 1) {
 80028c6:	4b14      	ldr	r3, [pc, #80]	; (8002918 <updateClockState+0x244>)
 80028c8:	785b      	ldrb	r3, [r3, #1]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d11e      	bne.n	800290c <updateClockState+0x238>
				getDateTime(clockVars.dateToSet, clockVars.timeToSet, hrtc);
 80028ce:	4b12      	ldr	r3, [pc, #72]	; (8002918 <updateClockState+0x244>)
 80028d0:	6858      	ldr	r0, [r3, #4]
 80028d2:	4b11      	ldr	r3, [pc, #68]	; (8002918 <updateClockState+0x244>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	0019      	movs	r1, r3
 80028da:	f7ff f867 	bl	80019ac <getDateTime>
				HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_B);
 80028de:	2380      	movs	r3, #128	; 0x80
 80028e0:	009a      	lsls	r2, r3, #2
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	0011      	movs	r1, r2
 80028e6:	0018      	movs	r0, r3
 80028e8:	f004 f96a 	bl	8006bc0 <HAL_RTC_DeactivateAlarm>
			setDateTime(clockVars.dateToSet, clockVars.timeToSet, hrtc);
			setClockAlarm(hrtc);
		}
	}
	// checks on clock set for other buttons here (what did this note mean??)
}
 80028ec:	e00e      	b.n	800290c <updateClockState+0x238>
			clockVars.isBeingSet = 0;
 80028ee:	4b0a      	ldr	r3, [pc, #40]	; (8002918 <updateClockState+0x244>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	701a      	strb	r2, [r3, #0]
			setDateTime(clockVars.dateToSet, clockVars.timeToSet, hrtc);
 80028f4:	4b08      	ldr	r3, [pc, #32]	; (8002918 <updateClockState+0x244>)
 80028f6:	6858      	ldr	r0, [r3, #4]
 80028f8:	4b07      	ldr	r3, [pc, #28]	; (8002918 <updateClockState+0x244>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	0019      	movs	r1, r3
 8002900:	f7fe fed7 	bl	80016b2 <setDateTime>
			setClockAlarm(hrtc);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	0018      	movs	r0, r3
 8002908:	f7fe ff48 	bl	800179c <setClockAlarm>
}
 800290c:	46c0      	nop			; (mov r8, r8)
 800290e:	46bd      	mov	sp, r7
 8002910:	b003      	add	sp, #12
 8002912:	bd90      	pop	{r4, r7, pc}
 8002914:	2000018c 	.word	0x2000018c
 8002918:	200000f0 	.word	0x200000f0
 800291c:	20000140 	.word	0x20000140
 8002920:	080095ec 	.word	0x080095ec
 8002924:	08009604 	.word	0x08009604

08002928 <updateTimerState>:
 *     second, timer only runs for half second.)
 *     also not sure how to implement pause using rtc (alarm value has to change depending on how long timer is paused for)
 *   might need to change to using only hardware timer for this instead of rtc because of problems listed above
 *   insert a few more functions into this (those that need to use the hardware)
 */
void updateTimerState(TIM_HandleTypeDef *timerStopwatchTim) {
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
	if (timerVars.isBeingSet) {
 8002930:	4b93      	ldr	r3, [pc, #588]	; (8002b80 <updateTimerState+0x258>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d100      	bne.n	800293a <updateTimerState+0x12>
 8002938:	e089      	b.n	8002a4e <updateTimerState+0x126>
		if (buttons.is2Pressed) {
 800293a:	4b92      	ldr	r3, [pc, #584]	; (8002b84 <updateTimerState+0x25c>)
 800293c:	785b      	ldrb	r3, [r3, #1]
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2b00      	cmp	r3, #0
 8002942:	d03b      	beq.n	80029bc <updateTimerState+0x94>
			buttons.is2Pressed = 0;
 8002944:	4b8f      	ldr	r3, [pc, #572]	; (8002b84 <updateTimerState+0x25c>)
 8002946:	2200      	movs	r2, #0
 8002948:	705a      	strb	r2, [r3, #1]
			updateFace.timer = 1;
 800294a:	4b8f      	ldr	r3, [pc, #572]	; (8002b88 <updateTimerState+0x260>)
 800294c:	2201      	movs	r2, #1
 800294e:	705a      	strb	r2, [r3, #1]

			// set field up
			switch (timerVars.fieldBeingSet) {
 8002950:	4b8b      	ldr	r3, [pc, #556]	; (8002b80 <updateTimerState+0x258>)
 8002952:	785b      	ldrb	r3, [r3, #1]
 8002954:	2b02      	cmp	r3, #2
 8002956:	d013      	beq.n	8002980 <updateTimerState+0x58>
 8002958:	2b03      	cmp	r3, #3
 800295a:	d020      	beq.n	800299e <updateTimerState+0x76>
 800295c:	2b01      	cmp	r3, #1
 800295e:	d000      	beq.n	8002962 <updateTimerState+0x3a>
				case 1: timerVars.timeToSet->sec = (timerVars.timeToSet->sec+1) % 60; break;
				case 2: timerVars.timeToSet->min = (timerVars.timeToSet->min+1) % 60; break;
				case 3: timerVars.timeToSet->hr = (timerVars.timeToSet->hr+1) % 100; break;
				default: break;
 8002960:	e02d      	b.n	80029be <updateTimerState+0x96>
				case 1: timerVars.timeToSet->sec = (timerVars.timeToSet->sec+1) % 60; break;
 8002962:	4b87      	ldr	r3, [pc, #540]	; (8002b80 <updateTimerState+0x258>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	789b      	ldrb	r3, [r3, #2]
 8002968:	3301      	adds	r3, #1
 800296a:	213c      	movs	r1, #60	; 0x3c
 800296c:	0018      	movs	r0, r3
 800296e:	f7fd fd43 	bl	80003f8 <__aeabi_idivmod>
 8002972:	000b      	movs	r3, r1
 8002974:	001a      	movs	r2, r3
 8002976:	4b82      	ldr	r3, [pc, #520]	; (8002b80 <updateTimerState+0x258>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	b2d2      	uxtb	r2, r2
 800297c:	709a      	strb	r2, [r3, #2]
 800297e:	e01e      	b.n	80029be <updateTimerState+0x96>
				case 2: timerVars.timeToSet->min = (timerVars.timeToSet->min+1) % 60; break;
 8002980:	4b7f      	ldr	r3, [pc, #508]	; (8002b80 <updateTimerState+0x258>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	785b      	ldrb	r3, [r3, #1]
 8002986:	3301      	adds	r3, #1
 8002988:	213c      	movs	r1, #60	; 0x3c
 800298a:	0018      	movs	r0, r3
 800298c:	f7fd fd34 	bl	80003f8 <__aeabi_idivmod>
 8002990:	000b      	movs	r3, r1
 8002992:	001a      	movs	r2, r3
 8002994:	4b7a      	ldr	r3, [pc, #488]	; (8002b80 <updateTimerState+0x258>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	b2d2      	uxtb	r2, r2
 800299a:	705a      	strb	r2, [r3, #1]
 800299c:	e00f      	b.n	80029be <updateTimerState+0x96>
				case 3: timerVars.timeToSet->hr = (timerVars.timeToSet->hr+1) % 100; break;
 800299e:	4b78      	ldr	r3, [pc, #480]	; (8002b80 <updateTimerState+0x258>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	3301      	adds	r3, #1
 80029a6:	2164      	movs	r1, #100	; 0x64
 80029a8:	0018      	movs	r0, r3
 80029aa:	f7fd fd25 	bl	80003f8 <__aeabi_idivmod>
 80029ae:	000b      	movs	r3, r1
 80029b0:	001a      	movs	r2, r3
 80029b2:	4b73      	ldr	r3, [pc, #460]	; (8002b80 <updateTimerState+0x258>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	b2d2      	uxtb	r2, r2
 80029b8:	701a      	strb	r2, [r3, #0]
 80029ba:	e000      	b.n	80029be <updateTimerState+0x96>
			}
		}
 80029bc:	46c0      	nop			; (mov r8, r8)
		if (buttons.is3Pressed) {
 80029be:	4b71      	ldr	r3, [pc, #452]	; (8002b84 <updateTimerState+0x25c>)
 80029c0:	789b      	ldrb	r3, [r3, #2]
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d100      	bne.n	80029ca <updateTimerState+0xa2>
 80029c8:	e092      	b.n	8002af0 <updateTimerState+0x1c8>
			buttons.is3Pressed = 0;
 80029ca:	4b6e      	ldr	r3, [pc, #440]	; (8002b84 <updateTimerState+0x25c>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	709a      	strb	r2, [r3, #2]
			updateFace.timer = 1;
 80029d0:	4b6d      	ldr	r3, [pc, #436]	; (8002b88 <updateTimerState+0x260>)
 80029d2:	2201      	movs	r2, #1
 80029d4:	705a      	strb	r2, [r3, #1]

			// set field down
			switch (timerVars.fieldBeingSet) {
 80029d6:	4b6a      	ldr	r3, [pc, #424]	; (8002b80 <updateTimerState+0x258>)
 80029d8:	785b      	ldrb	r3, [r3, #1]
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d015      	beq.n	8002a0a <updateTimerState+0xe2>
 80029de:	2b03      	cmp	r3, #3
 80029e0:	d024      	beq.n	8002a2c <updateTimerState+0x104>
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d000      	beq.n	80029e8 <updateTimerState+0xc0>
					break;
				case 3:
					if (timerVars.timeToSet->hr == 0) timerVars.timeToSet->hr = 99;		// no limit on hour, since we're not using day
					else timerVars.timeToSet->hr--;
					break;
				default: break;
 80029e6:	e084      	b.n	8002af2 <updateTimerState+0x1ca>
					if (timerVars.timeToSet->sec == 0) timerVars.timeToSet->sec = 59;
 80029e8:	4b65      	ldr	r3, [pc, #404]	; (8002b80 <updateTimerState+0x258>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	789b      	ldrb	r3, [r3, #2]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d104      	bne.n	80029fc <updateTimerState+0xd4>
 80029f2:	4b63      	ldr	r3, [pc, #396]	; (8002b80 <updateTimerState+0x258>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	223b      	movs	r2, #59	; 0x3b
 80029f8:	709a      	strb	r2, [r3, #2]
					break;
 80029fa:	e07a      	b.n	8002af2 <updateTimerState+0x1ca>
					else timerVars.timeToSet->sec--;
 80029fc:	4b60      	ldr	r3, [pc, #384]	; (8002b80 <updateTimerState+0x258>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	789a      	ldrb	r2, [r3, #2]
 8002a02:	3a01      	subs	r2, #1
 8002a04:	b2d2      	uxtb	r2, r2
 8002a06:	709a      	strb	r2, [r3, #2]
					break;
 8002a08:	e073      	b.n	8002af2 <updateTimerState+0x1ca>
					if (timerVars.timeToSet->min == 0) timerVars.timeToSet->min = 59;
 8002a0a:	4b5d      	ldr	r3, [pc, #372]	; (8002b80 <updateTimerState+0x258>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	785b      	ldrb	r3, [r3, #1]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d104      	bne.n	8002a1e <updateTimerState+0xf6>
 8002a14:	4b5a      	ldr	r3, [pc, #360]	; (8002b80 <updateTimerState+0x258>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	223b      	movs	r2, #59	; 0x3b
 8002a1a:	705a      	strb	r2, [r3, #1]
					break;
 8002a1c:	e069      	b.n	8002af2 <updateTimerState+0x1ca>
					else timerVars.timeToSet->min--;
 8002a1e:	4b58      	ldr	r3, [pc, #352]	; (8002b80 <updateTimerState+0x258>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	785a      	ldrb	r2, [r3, #1]
 8002a24:	3a01      	subs	r2, #1
 8002a26:	b2d2      	uxtb	r2, r2
 8002a28:	705a      	strb	r2, [r3, #1]
					break;
 8002a2a:	e062      	b.n	8002af2 <updateTimerState+0x1ca>
					if (timerVars.timeToSet->hr == 0) timerVars.timeToSet->hr = 99;		// no limit on hour, since we're not using day
 8002a2c:	4b54      	ldr	r3, [pc, #336]	; (8002b80 <updateTimerState+0x258>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d104      	bne.n	8002a40 <updateTimerState+0x118>
 8002a36:	4b52      	ldr	r3, [pc, #328]	; (8002b80 <updateTimerState+0x258>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	2263      	movs	r2, #99	; 0x63
 8002a3c:	701a      	strb	r2, [r3, #0]
					break;
 8002a3e:	e058      	b.n	8002af2 <updateTimerState+0x1ca>
					else timerVars.timeToSet->hr--;
 8002a40:	4b4f      	ldr	r3, [pc, #316]	; (8002b80 <updateTimerState+0x258>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	781a      	ldrb	r2, [r3, #0]
 8002a46:	3a01      	subs	r2, #1
 8002a48:	b2d2      	uxtb	r2, r2
 8002a4a:	701a      	strb	r2, [r3, #0]
					break;
 8002a4c:	e051      	b.n	8002af2 <updateTimerState+0x1ca>
			}
		}
	}
	// not done
	else if (timerVars.isSet) {
 8002a4e:	4b4c      	ldr	r3, [pc, #304]	; (8002b80 <updateTimerState+0x258>)
 8002a50:	789b      	ldrb	r3, [r3, #2]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d04d      	beq.n	8002af2 <updateTimerState+0x1ca>
		if (buttons.is2Pressed && isTimerRunning == 0) {
 8002a56:	4b4b      	ldr	r3, [pc, #300]	; (8002b84 <updateTimerState+0x25c>)
 8002a58:	785b      	ldrb	r3, [r3, #1]
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d014      	beq.n	8002a8a <updateTimerState+0x162>
 8002a60:	4b4a      	ldr	r3, [pc, #296]	; (8002b8c <updateTimerState+0x264>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10f      	bne.n	8002a8a <updateTimerState+0x162>
			buttons.is2Pressed = 0;
 8002a6a:	4b46      	ldr	r3, [pc, #280]	; (8002b84 <updateTimerState+0x25c>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	705a      	strb	r2, [r3, #1]
			updateFace.timer = 1;
 8002a70:	4b45      	ldr	r3, [pc, #276]	; (8002b88 <updateTimerState+0x260>)
 8002a72:	2201      	movs	r2, #1
 8002a74:	705a      	strb	r2, [r3, #1]

			// start timer
			runTimer(timerStopwatchTim);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	0018      	movs	r0, r3
 8002a7a:	f001 fbbf 	bl	80041fc <runTimer>
			isTimerRunning = 1;
 8002a7e:	4b43      	ldr	r3, [pc, #268]	; (8002b8c <updateTimerState+0x264>)
 8002a80:	2201      	movs	r2, #1
 8002a82:	701a      	strb	r2, [r3, #0]
			isTimerPaused = 0;
 8002a84:	4b42      	ldr	r3, [pc, #264]	; (8002b90 <updateTimerState+0x268>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	701a      	strb	r2, [r3, #0]
		}
		if (buttons.is3Pressed && isTimerRunning) {
 8002a8a:	4b3e      	ldr	r3, [pc, #248]	; (8002b84 <updateTimerState+0x25c>)
 8002a8c:	789b      	ldrb	r3, [r3, #2]
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d014      	beq.n	8002abe <updateTimerState+0x196>
 8002a94:	4b3d      	ldr	r3, [pc, #244]	; (8002b8c <updateTimerState+0x264>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00f      	beq.n	8002abe <updateTimerState+0x196>
			buttons.is3Pressed = 0;
 8002a9e:	4b39      	ldr	r3, [pc, #228]	; (8002b84 <updateTimerState+0x25c>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	709a      	strb	r2, [r3, #2]
			updateFace.timer = 1;
 8002aa4:	4b38      	ldr	r3, [pc, #224]	; (8002b88 <updateTimerState+0x260>)
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	705a      	strb	r2, [r3, #1]

			// pause timer
			pauseTimer(timerStopwatchTim);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	0018      	movs	r0, r3
 8002aae:	f001 fc01 	bl	80042b4 <pauseTimer>
			isTimerRunning = 0;
 8002ab2:	4b36      	ldr	r3, [pc, #216]	; (8002b8c <updateTimerState+0x264>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	701a      	strb	r2, [r3, #0]
			isTimerPaused = 1;
 8002ab8:	4b35      	ldr	r3, [pc, #212]	; (8002b90 <updateTimerState+0x268>)
 8002aba:	2201      	movs	r2, #1
 8002abc:	701a      	strb	r2, [r3, #0]
		}
		if (buttons.is4Pressed) {
 8002abe:	4b31      	ldr	r3, [pc, #196]	; (8002b84 <updateTimerState+0x25c>)
 8002ac0:	78db      	ldrb	r3, [r3, #3]
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d014      	beq.n	8002af2 <updateTimerState+0x1ca>
			buttons.is4Pressed = 0;
 8002ac8:	4b2e      	ldr	r3, [pc, #184]	; (8002b84 <updateTimerState+0x25c>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	70da      	strb	r2, [r3, #3]
			updateFace.timer = 1;
 8002ace:	4b2e      	ldr	r3, [pc, #184]	; (8002b88 <updateTimerState+0x260>)
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	705a      	strb	r2, [r3, #1]

			// stop and clear timer
			stopTimer(timerStopwatchTim);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	0018      	movs	r0, r3
 8002ad8:	f001 fc00 	bl	80042dc <stopTimer>
			timerVars.isSet = 0;
 8002adc:	4b28      	ldr	r3, [pc, #160]	; (8002b80 <updateTimerState+0x258>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	709a      	strb	r2, [r3, #2]
			isTimerRunning = 0;
 8002ae2:	4b2a      	ldr	r3, [pc, #168]	; (8002b8c <updateTimerState+0x264>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	701a      	strb	r2, [r3, #0]
			isTimerPaused = 0;
 8002ae8:	4b29      	ldr	r3, [pc, #164]	; (8002b90 <updateTimerState+0x268>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	701a      	strb	r2, [r3, #0]
 8002aee:	e000      	b.n	8002af2 <updateTimerState+0x1ca>
		}
 8002af0:	46c0      	nop			; (mov r8, r8)
		}
	}
	// not done? might be done (other buttons start/stop timer)
	if (buttons.is4Pressed) {
 8002af2:	4b24      	ldr	r3, [pc, #144]	; (8002b84 <updateTimerState+0x25c>)
 8002af4:	78db      	ldrb	r3, [r3, #3]
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d03c      	beq.n	8002b76 <updateTimerState+0x24e>
		buttons.is4Pressed = 0;
 8002afc:	4b21      	ldr	r3, [pc, #132]	; (8002b84 <updateTimerState+0x25c>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	70da      	strb	r2, [r3, #3]
		updateFace.timer = 1;
 8002b02:	4b21      	ldr	r3, [pc, #132]	; (8002b88 <updateTimerState+0x260>)
 8002b04:	2201      	movs	r2, #1
 8002b06:	705a      	strb	r2, [r3, #1]

		// change field/mode
		timerVars.fieldBeingSet = (timerVars.fieldBeingSet + 1) % (NUM_TIMERFIELDS + 1);
 8002b08:	4b1d      	ldr	r3, [pc, #116]	; (8002b80 <updateTimerState+0x258>)
 8002b0a:	785b      	ldrb	r3, [r3, #1]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	4a21      	ldr	r2, [pc, #132]	; (8002b94 <updateTimerState+0x26c>)
 8002b10:	4013      	ands	r3, r2
 8002b12:	d504      	bpl.n	8002b1e <updateTimerState+0x1f6>
 8002b14:	3b01      	subs	r3, #1
 8002b16:	2204      	movs	r2, #4
 8002b18:	4252      	negs	r2, r2
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	b2da      	uxtb	r2, r3
 8002b20:	4b17      	ldr	r3, [pc, #92]	; (8002b80 <updateTimerState+0x258>)
 8002b22:	705a      	strb	r2, [r3, #1]
		if (timerVars.fieldBeingSet != 0) {
 8002b24:	4b16      	ldr	r3, [pc, #88]	; (8002b80 <updateTimerState+0x258>)
 8002b26:	785b      	ldrb	r3, [r3, #1]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d016      	beq.n	8002b5a <updateTimerState+0x232>
			timerVars.isBeingSet = 1;
 8002b2c:	4b14      	ldr	r3, [pc, #80]	; (8002b80 <updateTimerState+0x258>)
 8002b2e:	2201      	movs	r2, #1
 8002b30:	701a      	strb	r2, [r3, #0]
			timerVars.isSet = 0;
 8002b32:	4b13      	ldr	r3, [pc, #76]	; (8002b80 <updateTimerState+0x258>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	709a      	strb	r2, [r3, #2]

			// set temp fields to 0 when first entering setting mode
			if (timerVars.fieldBeingSet == 1) {
 8002b38:	4b11      	ldr	r3, [pc, #68]	; (8002b80 <updateTimerState+0x258>)
 8002b3a:	785b      	ldrb	r3, [r3, #1]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d11a      	bne.n	8002b76 <updateTimerState+0x24e>
				timerVars.timeToSet->sec = 0;
 8002b40:	4b0f      	ldr	r3, [pc, #60]	; (8002b80 <updateTimerState+0x258>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	709a      	strb	r2, [r3, #2]
				timerVars.timeToSet->min = 0;
 8002b48:	4b0d      	ldr	r3, [pc, #52]	; (8002b80 <updateTimerState+0x258>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	705a      	strb	r2, [r3, #1]
				timerVars.timeToSet->hr = 0;
 8002b50:	4b0b      	ldr	r3, [pc, #44]	; (8002b80 <updateTimerState+0x258>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	701a      	strb	r2, [r3, #0]
			timerVars.isBeingSet = 0;
			timerVars.isSet = 1;
			timerCounter = timeToSeconds(timerVars.timeToSet);
		}
	}
}
 8002b58:	e00d      	b.n	8002b76 <updateTimerState+0x24e>
			timerVars.isBeingSet = 0;
 8002b5a:	4b09      	ldr	r3, [pc, #36]	; (8002b80 <updateTimerState+0x258>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	701a      	strb	r2, [r3, #0]
			timerVars.isSet = 1;
 8002b60:	4b07      	ldr	r3, [pc, #28]	; (8002b80 <updateTimerState+0x258>)
 8002b62:	2201      	movs	r2, #1
 8002b64:	709a      	strb	r2, [r3, #2]
			timerCounter = timeToSeconds(timerVars.timeToSet);
 8002b66:	4b06      	ldr	r3, [pc, #24]	; (8002b80 <updateTimerState+0x258>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	f7fe ff6a 	bl	8001a44 <timeToSeconds>
 8002b70:	0002      	movs	r2, r0
 8002b72:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <updateTimerState+0x270>)
 8002b74:	601a      	str	r2, [r3, #0]
}
 8002b76:	46c0      	nop			; (mov r8, r8)
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	b002      	add	sp, #8
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	46c0      	nop			; (mov r8, r8)
 8002b80:	200000fc 	.word	0x200000fc
 8002b84:	2000018c 	.word	0x2000018c
 8002b88:	20000140 	.word	0x20000140
 8002b8c:	20000190 	.word	0x20000190
 8002b90:	20000198 	.word	0x20000198
 8002b94:	80000003 	.word	0x80000003
 8002b98:	20000148 	.word	0x20000148

08002b9c <updateAlarmState>:
 *   should change to make it possible to have multiple alarms
 *   also pick alarms that repeat and alarms that don't
 *   need to make changes to ui to make this happen
 *   currently just does old behavior (only 1 alarm)
 */
void updateAlarmState(RTC_HandleTypeDef *hrtc) {
 8002b9c:	b5b0      	push	{r4, r5, r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
	if (buttons.is2Pressed && alarmVars.isBeingSet) {
 8002ba4:	4b94      	ldr	r3, [pc, #592]	; (8002df8 <updateAlarmState+0x25c>)
 8002ba6:	785b      	ldrb	r3, [r3, #1]
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d052      	beq.n	8002c54 <updateAlarmState+0xb8>
 8002bae:	4b93      	ldr	r3, [pc, #588]	; (8002dfc <updateAlarmState+0x260>)
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d04e      	beq.n	8002c54 <updateAlarmState+0xb8>
		buttons.is2Pressed = 0;
 8002bb6:	4b90      	ldr	r3, [pc, #576]	; (8002df8 <updateAlarmState+0x25c>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	705a      	strb	r2, [r3, #1]
		updateFace.alarm = 1;
 8002bbc:	4b90      	ldr	r3, [pc, #576]	; (8002e00 <updateAlarmState+0x264>)
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	709a      	strb	r2, [r3, #2]

		// change fields up
		switch (alarmVars.fieldBeingSet) {
 8002bc2:	4b8e      	ldr	r3, [pc, #568]	; (8002dfc <updateAlarmState+0x260>)
 8002bc4:	785b      	ldrb	r3, [r3, #1]
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d017      	beq.n	8002bfa <updateAlarmState+0x5e>
 8002bca:	dc02      	bgt.n	8002bd2 <updateAlarmState+0x36>
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d005      	beq.n	8002bdc <updateAlarmState+0x40>
			case 1: alarmVars.alarmToSet->sec = (alarmVars.alarmToSet->sec + 1) % 60; break;
			case 2: alarmVars.alarmToSet->min = (alarmVars.alarmToSet->min + 1) % 60; break;
			case 3: alarmVars.alarmToSet->hr = (alarmVars.alarmToSet->hr + 1) % 24; break;
			case 4: alarmVars.alarmToSet->weekday = (alarmVars.alarmToSet->weekday) % 7 + 1; break;
			default: break;
 8002bd0:	e041      	b.n	8002c56 <updateAlarmState+0xba>
		switch (alarmVars.fieldBeingSet) {
 8002bd2:	2b03      	cmp	r3, #3
 8002bd4:	d020      	beq.n	8002c18 <updateAlarmState+0x7c>
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	d02d      	beq.n	8002c36 <updateAlarmState+0x9a>
			default: break;
 8002bda:	e03c      	b.n	8002c56 <updateAlarmState+0xba>
			case 1: alarmVars.alarmToSet->sec = (alarmVars.alarmToSet->sec + 1) % 60; break;
 8002bdc:	4b87      	ldr	r3, [pc, #540]	; (8002dfc <updateAlarmState+0x260>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	789b      	ldrb	r3, [r3, #2]
 8002be2:	3301      	adds	r3, #1
 8002be4:	213c      	movs	r1, #60	; 0x3c
 8002be6:	0018      	movs	r0, r3
 8002be8:	f7fd fc06 	bl	80003f8 <__aeabi_idivmod>
 8002bec:	000b      	movs	r3, r1
 8002bee:	001a      	movs	r2, r3
 8002bf0:	4b82      	ldr	r3, [pc, #520]	; (8002dfc <updateAlarmState+0x260>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	b2d2      	uxtb	r2, r2
 8002bf6:	709a      	strb	r2, [r3, #2]
 8002bf8:	e02d      	b.n	8002c56 <updateAlarmState+0xba>
			case 2: alarmVars.alarmToSet->min = (alarmVars.alarmToSet->min + 1) % 60; break;
 8002bfa:	4b80      	ldr	r3, [pc, #512]	; (8002dfc <updateAlarmState+0x260>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	785b      	ldrb	r3, [r3, #1]
 8002c00:	3301      	adds	r3, #1
 8002c02:	213c      	movs	r1, #60	; 0x3c
 8002c04:	0018      	movs	r0, r3
 8002c06:	f7fd fbf7 	bl	80003f8 <__aeabi_idivmod>
 8002c0a:	000b      	movs	r3, r1
 8002c0c:	001a      	movs	r2, r3
 8002c0e:	4b7b      	ldr	r3, [pc, #492]	; (8002dfc <updateAlarmState+0x260>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	b2d2      	uxtb	r2, r2
 8002c14:	705a      	strb	r2, [r3, #1]
 8002c16:	e01e      	b.n	8002c56 <updateAlarmState+0xba>
			case 3: alarmVars.alarmToSet->hr = (alarmVars.alarmToSet->hr + 1) % 24; break;
 8002c18:	4b78      	ldr	r3, [pc, #480]	; (8002dfc <updateAlarmState+0x260>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	2118      	movs	r1, #24
 8002c22:	0018      	movs	r0, r3
 8002c24:	f7fd fbe8 	bl	80003f8 <__aeabi_idivmod>
 8002c28:	000b      	movs	r3, r1
 8002c2a:	001a      	movs	r2, r3
 8002c2c:	4b73      	ldr	r3, [pc, #460]	; (8002dfc <updateAlarmState+0x260>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	701a      	strb	r2, [r3, #0]
 8002c34:	e00f      	b.n	8002c56 <updateAlarmState+0xba>
			case 4: alarmVars.alarmToSet->weekday = (alarmVars.alarmToSet->weekday) % 7 + 1; break;
 8002c36:	4b71      	ldr	r3, [pc, #452]	; (8002dfc <updateAlarmState+0x260>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	78db      	ldrb	r3, [r3, #3]
 8002c3c:	2107      	movs	r1, #7
 8002c3e:	0018      	movs	r0, r3
 8002c40:	f7fd faf0 	bl	8000224 <__aeabi_uidivmod>
 8002c44:	000b      	movs	r3, r1
 8002c46:	b2da      	uxtb	r2, r3
 8002c48:	4b6c      	ldr	r3, [pc, #432]	; (8002dfc <updateAlarmState+0x260>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	3201      	adds	r2, #1
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	70da      	strb	r2, [r3, #3]
 8002c52:	e000      	b.n	8002c56 <updateAlarmState+0xba>
		}
	}
 8002c54:	46c0      	nop			; (mov r8, r8)
	if (buttons.is3Pressed && alarmVars.isBeingSet) {
 8002c56:	4b68      	ldr	r3, [pc, #416]	; (8002df8 <updateAlarmState+0x25c>)
 8002c58:	789b      	ldrb	r3, [r3, #2]
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d05a      	beq.n	8002d16 <updateAlarmState+0x17a>
 8002c60:	4b66      	ldr	r3, [pc, #408]	; (8002dfc <updateAlarmState+0x260>)
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d056      	beq.n	8002d16 <updateAlarmState+0x17a>
		buttons.is3Pressed = 0;
 8002c68:	4b63      	ldr	r3, [pc, #396]	; (8002df8 <updateAlarmState+0x25c>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	709a      	strb	r2, [r3, #2]
		updateFace.alarm = 1;
 8002c6e:	4b64      	ldr	r3, [pc, #400]	; (8002e00 <updateAlarmState+0x264>)
 8002c70:	2201      	movs	r2, #1
 8002c72:	709a      	strb	r2, [r3, #2]

		// change fields down
		switch (alarmVars.fieldBeingSet) {
 8002c74:	4b61      	ldr	r3, [pc, #388]	; (8002dfc <updateAlarmState+0x260>)
 8002c76:	785b      	ldrb	r3, [r3, #1]
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d019      	beq.n	8002cb0 <updateAlarmState+0x114>
 8002c7c:	dc02      	bgt.n	8002c84 <updateAlarmState+0xe8>
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d005      	beq.n	8002c8e <updateAlarmState+0xf2>
				break;
			case 4:
				if (alarmVars.alarmToSet->weekday == RTC_WEEKDAY_MONDAY) alarmVars.alarmToSet->weekday = RTC_WEEKDAY_SUNDAY;
				else alarmVars.alarmToSet->weekday--;
				break;
			default: break;
 8002c82:	e049      	b.n	8002d18 <updateAlarmState+0x17c>
		switch (alarmVars.fieldBeingSet) {
 8002c84:	2b03      	cmp	r3, #3
 8002c86:	d024      	beq.n	8002cd2 <updateAlarmState+0x136>
 8002c88:	2b04      	cmp	r3, #4
 8002c8a:	d033      	beq.n	8002cf4 <updateAlarmState+0x158>
			default: break;
 8002c8c:	e044      	b.n	8002d18 <updateAlarmState+0x17c>
				if (alarmVars.alarmToSet->sec == 0) alarmVars.alarmToSet->sec = 59;
 8002c8e:	4b5b      	ldr	r3, [pc, #364]	; (8002dfc <updateAlarmState+0x260>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	789b      	ldrb	r3, [r3, #2]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d104      	bne.n	8002ca2 <updateAlarmState+0x106>
 8002c98:	4b58      	ldr	r3, [pc, #352]	; (8002dfc <updateAlarmState+0x260>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	223b      	movs	r2, #59	; 0x3b
 8002c9e:	709a      	strb	r2, [r3, #2]
				break;
 8002ca0:	e03a      	b.n	8002d18 <updateAlarmState+0x17c>
				else alarmVars.alarmToSet->sec--;
 8002ca2:	4b56      	ldr	r3, [pc, #344]	; (8002dfc <updateAlarmState+0x260>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	789a      	ldrb	r2, [r3, #2]
 8002ca8:	3a01      	subs	r2, #1
 8002caa:	b2d2      	uxtb	r2, r2
 8002cac:	709a      	strb	r2, [r3, #2]
				break;
 8002cae:	e033      	b.n	8002d18 <updateAlarmState+0x17c>
				if (alarmVars.alarmToSet->min == 0) alarmVars.alarmToSet->min = 59;
 8002cb0:	4b52      	ldr	r3, [pc, #328]	; (8002dfc <updateAlarmState+0x260>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	785b      	ldrb	r3, [r3, #1]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d104      	bne.n	8002cc4 <updateAlarmState+0x128>
 8002cba:	4b50      	ldr	r3, [pc, #320]	; (8002dfc <updateAlarmState+0x260>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	223b      	movs	r2, #59	; 0x3b
 8002cc0:	705a      	strb	r2, [r3, #1]
				break;
 8002cc2:	e029      	b.n	8002d18 <updateAlarmState+0x17c>
				else alarmVars.alarmToSet->min--;
 8002cc4:	4b4d      	ldr	r3, [pc, #308]	; (8002dfc <updateAlarmState+0x260>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	785a      	ldrb	r2, [r3, #1]
 8002cca:	3a01      	subs	r2, #1
 8002ccc:	b2d2      	uxtb	r2, r2
 8002cce:	705a      	strb	r2, [r3, #1]
				break;
 8002cd0:	e022      	b.n	8002d18 <updateAlarmState+0x17c>
				if (alarmVars.alarmToSet->hr == 0) alarmVars.alarmToSet->hr = 23;
 8002cd2:	4b4a      	ldr	r3, [pc, #296]	; (8002dfc <updateAlarmState+0x260>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d104      	bne.n	8002ce6 <updateAlarmState+0x14a>
 8002cdc:	4b47      	ldr	r3, [pc, #284]	; (8002dfc <updateAlarmState+0x260>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	2217      	movs	r2, #23
 8002ce2:	701a      	strb	r2, [r3, #0]
				break;
 8002ce4:	e018      	b.n	8002d18 <updateAlarmState+0x17c>
				else alarmVars.alarmToSet->hr--;
 8002ce6:	4b45      	ldr	r3, [pc, #276]	; (8002dfc <updateAlarmState+0x260>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	781a      	ldrb	r2, [r3, #0]
 8002cec:	3a01      	subs	r2, #1
 8002cee:	b2d2      	uxtb	r2, r2
 8002cf0:	701a      	strb	r2, [r3, #0]
				break;
 8002cf2:	e011      	b.n	8002d18 <updateAlarmState+0x17c>
				if (alarmVars.alarmToSet->weekday == RTC_WEEKDAY_MONDAY) alarmVars.alarmToSet->weekday = RTC_WEEKDAY_SUNDAY;
 8002cf4:	4b41      	ldr	r3, [pc, #260]	; (8002dfc <updateAlarmState+0x260>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	78db      	ldrb	r3, [r3, #3]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d104      	bne.n	8002d08 <updateAlarmState+0x16c>
 8002cfe:	4b3f      	ldr	r3, [pc, #252]	; (8002dfc <updateAlarmState+0x260>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	2207      	movs	r2, #7
 8002d04:	70da      	strb	r2, [r3, #3]
				break;
 8002d06:	e007      	b.n	8002d18 <updateAlarmState+0x17c>
				else alarmVars.alarmToSet->weekday--;
 8002d08:	4b3c      	ldr	r3, [pc, #240]	; (8002dfc <updateAlarmState+0x260>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	78da      	ldrb	r2, [r3, #3]
 8002d0e:	3a01      	subs	r2, #1
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	70da      	strb	r2, [r3, #3]
				break;
 8002d14:	e000      	b.n	8002d18 <updateAlarmState+0x17c>
		}
	}
 8002d16:	46c0      	nop			; (mov r8, r8)
	if (buttons.is4Pressed) {
 8002d18:	4b37      	ldr	r3, [pc, #220]	; (8002df8 <updateAlarmState+0x25c>)
 8002d1a:	78db      	ldrb	r3, [r3, #3]
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d066      	beq.n	8002df0 <updateAlarmState+0x254>
		buttons.is4Pressed = 0;
 8002d22:	4b35      	ldr	r3, [pc, #212]	; (8002df8 <updateAlarmState+0x25c>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	70da      	strb	r2, [r3, #3]
		updateFace.alarm = 1;
 8002d28:	4b35      	ldr	r3, [pc, #212]	; (8002e00 <updateAlarmState+0x264>)
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	709a      	strb	r2, [r3, #2]

		if (isAlarmRunning == 0) {
 8002d2e:	4b35      	ldr	r3, [pc, #212]	; (8002e04 <updateAlarmState+0x268>)
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d151      	bne.n	8002ddc <updateAlarmState+0x240>
			// toggle between fields
			alarmVars.fieldBeingSet = (alarmVars.fieldBeingSet + 1) % (NUM_ALARMFIELDS + 1);
 8002d38:	4b30      	ldr	r3, [pc, #192]	; (8002dfc <updateAlarmState+0x260>)
 8002d3a:	785b      	ldrb	r3, [r3, #1]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	2105      	movs	r1, #5
 8002d40:	0018      	movs	r0, r3
 8002d42:	f7fd fb59 	bl	80003f8 <__aeabi_idivmod>
 8002d46:	000b      	movs	r3, r1
 8002d48:	b2da      	uxtb	r2, r3
 8002d4a:	4b2c      	ldr	r3, [pc, #176]	; (8002dfc <updateAlarmState+0x260>)
 8002d4c:	705a      	strb	r2, [r3, #1]
			if (alarmVars.fieldBeingSet != 0) {
 8002d4e:	4b2b      	ldr	r3, [pc, #172]	; (8002dfc <updateAlarmState+0x260>)
 8002d50:	785b      	ldrb	r3, [r3, #1]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d034      	beq.n	8002dc0 <updateAlarmState+0x224>
				alarmVars.isBeingSet = 1;
 8002d56:	4b29      	ldr	r3, [pc, #164]	; (8002dfc <updateAlarmState+0x260>)
 8002d58:	2201      	movs	r2, #1
 8002d5a:	701a      	strb	r2, [r3, #0]
				if (alarmVars.fieldBeingSet == 1) {
 8002d5c:	4b27      	ldr	r3, [pc, #156]	; (8002dfc <updateAlarmState+0x260>)
 8002d5e:	785b      	ldrb	r3, [r3, #1]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d145      	bne.n	8002df0 <updateAlarmState+0x254>
					struct dates d = {0};
 8002d64:	2510      	movs	r5, #16
 8002d66:	197b      	adds	r3, r7, r5
 8002d68:	0018      	movs	r0, r3
 8002d6a:	2306      	movs	r3, #6
 8002d6c:	001a      	movs	r2, r3
 8002d6e:	2100      	movs	r1, #0
 8002d70:	f005 fc6f 	bl	8008652 <memset>
					struct times t = {0};
 8002d74:	240c      	movs	r4, #12
 8002d76:	193b      	adds	r3, r7, r4
 8002d78:	0018      	movs	r0, r3
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	001a      	movs	r2, r3
 8002d7e:	2100      	movs	r1, #0
 8002d80:	f005 fc67 	bl	8008652 <memset>
					getDateTime(&d, &t, hrtc);
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	0021      	movs	r1, r4
 8002d88:	000c      	movs	r4, r1
 8002d8a:	1879      	adds	r1, r7, r1
 8002d8c:	197b      	adds	r3, r7, r5
 8002d8e:	0018      	movs	r0, r3
 8002d90:	f7fe fe0c 	bl	80019ac <getDateTime>
					alarmVars.alarmToSet->sec = t.sec;
 8002d94:	4b19      	ldr	r3, [pc, #100]	; (8002dfc <updateAlarmState+0x260>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	0021      	movs	r1, r4
 8002d9a:	187a      	adds	r2, r7, r1
 8002d9c:	7892      	ldrb	r2, [r2, #2]
 8002d9e:	709a      	strb	r2, [r3, #2]
					alarmVars.alarmToSet->min = t.min;
 8002da0:	4b16      	ldr	r3, [pc, #88]	; (8002dfc <updateAlarmState+0x260>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	187a      	adds	r2, r7, r1
 8002da6:	7852      	ldrb	r2, [r2, #1]
 8002da8:	705a      	strb	r2, [r3, #1]
					alarmVars.alarmToSet->hr = t.hr;
 8002daa:	4b14      	ldr	r3, [pc, #80]	; (8002dfc <updateAlarmState+0x260>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	187a      	adds	r2, r7, r1
 8002db0:	7812      	ldrb	r2, [r2, #0]
 8002db2:	701a      	strb	r2, [r3, #0]
					alarmVars.alarmToSet->weekday = d.weekday;
 8002db4:	4b11      	ldr	r3, [pc, #68]	; (8002dfc <updateAlarmState+0x260>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	197a      	adds	r2, r7, r5
 8002dba:	7912      	ldrb	r2, [r2, #4]
 8002dbc:	70da      	strb	r2, [r3, #3]
			// stop and clear alarm hw
			isAlarmRunning = 0;
			HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_A);
		}
	}
}
 8002dbe:	e017      	b.n	8002df0 <updateAlarmState+0x254>
				alarmVars.isBeingSet = 0;
 8002dc0:	4b0e      	ldr	r3, [pc, #56]	; (8002dfc <updateAlarmState+0x260>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	701a      	strb	r2, [r3, #0]
				isAlarmRunning = 1;
 8002dc6:	4b0f      	ldr	r3, [pc, #60]	; (8002e04 <updateAlarmState+0x268>)
 8002dc8:	2201      	movs	r2, #1
 8002dca:	701a      	strb	r2, [r3, #0]
				setAlarm(alarmVars.alarmToSet, hrtc);
 8002dcc:	4b0b      	ldr	r3, [pc, #44]	; (8002dfc <updateAlarmState+0x260>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	0011      	movs	r1, r2
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	f7fe fc83 	bl	80016e0 <setAlarm>
}
 8002dda:	e009      	b.n	8002df0 <updateAlarmState+0x254>
			isAlarmRunning = 0;
 8002ddc:	4b09      	ldr	r3, [pc, #36]	; (8002e04 <updateAlarmState+0x268>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	701a      	strb	r2, [r3, #0]
			HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_A);
 8002de2:	2380      	movs	r3, #128	; 0x80
 8002de4:	005a      	lsls	r2, r3, #1
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	0011      	movs	r1, r2
 8002dea:	0018      	movs	r0, r3
 8002dec:	f003 fee8 	bl	8006bc0 <HAL_RTC_DeactivateAlarm>
}
 8002df0:	46c0      	nop			; (mov r8, r8)
 8002df2:	46bd      	mov	sp, r7
 8002df4:	b006      	add	sp, #24
 8002df6:	bdb0      	pop	{r4, r5, r7, pc}
 8002df8:	2000018c 	.word	0x2000018c
 8002dfc:	20000104 	.word	0x20000104
 8002e00:	20000140 	.word	0x20000140
 8002e04:	2000014c 	.word	0x2000014c

08002e08 <updateStopwatchState>:
 * notes:
 *   using lptim now, but might need to change to use other timer as lptim might be used by adc
 *     to take regular measurements of the battery
 *   would just have to modify functions in timers.c
 */
void updateStopwatchState(TIM_HandleTypeDef *timerStopwatchTim) {
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
	if (buttons.is2Pressed) {	// start/stop
 8002e10:	4b28      	ldr	r3, [pc, #160]	; (8002eb4 <updateStopwatchState+0xac>)
 8002e12:	785b      	ldrb	r3, [r3, #1]
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d01f      	beq.n	8002e5a <updateStopwatchState+0x52>
		buttons.is2Pressed = 0;
 8002e1a:	4b26      	ldr	r3, [pc, #152]	; (8002eb4 <updateStopwatchState+0xac>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	705a      	strb	r2, [r3, #1]
		updateFace.stopwatch = 1;
 8002e20:	4b25      	ldr	r3, [pc, #148]	; (8002eb8 <updateStopwatchState+0xb0>)
 8002e22:	2201      	movs	r2, #1
 8002e24:	70da      	strb	r2, [r3, #3]

		if (isStopwatchRunning == 0) {
 8002e26:	4b25      	ldr	r3, [pc, #148]	; (8002ebc <updateStopwatchState+0xb4>)
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d10a      	bne.n	8002e46 <updateStopwatchState+0x3e>
			runStopwatch(timerStopwatchTim);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	0018      	movs	r0, r3
 8002e34:	f001 fa6a 	bl	800430c <runStopwatch>
			isStopwatchRunning = 1;
 8002e38:	4b20      	ldr	r3, [pc, #128]	; (8002ebc <updateStopwatchState+0xb4>)
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	701a      	strb	r2, [r3, #0]
			isStopwatchPaused = 0;
 8002e3e:	4b20      	ldr	r3, [pc, #128]	; (8002ec0 <updateStopwatchState+0xb8>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	701a      	strb	r2, [r3, #0]
 8002e44:	e009      	b.n	8002e5a <updateStopwatchState+0x52>
		}
		else {
			pauseStopwatch(timerStopwatchTim);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	0018      	movs	r0, r3
 8002e4a:	f001 fac1 	bl	80043d0 <pauseStopwatch>
			isStopwatchRunning = 0;
 8002e4e:	4b1b      	ldr	r3, [pc, #108]	; (8002ebc <updateStopwatchState+0xb4>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	701a      	strb	r2, [r3, #0]
			isStopwatchPaused = 1;
 8002e54:	4b1a      	ldr	r3, [pc, #104]	; (8002ec0 <updateStopwatchState+0xb8>)
 8002e56:	2201      	movs	r2, #1
 8002e58:	701a      	strb	r2, [r3, #0]
		}
	}
	if (buttons.is3Pressed) {
 8002e5a:	4b16      	ldr	r3, [pc, #88]	; (8002eb4 <updateStopwatchState+0xac>)
 8002e5c:	789b      	ldrb	r3, [r3, #2]
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00d      	beq.n	8002e80 <updateStopwatchState+0x78>
		buttons.is3Pressed = 0;
 8002e64:	4b13      	ldr	r3, [pc, #76]	; (8002eb4 <updateStopwatchState+0xac>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	709a      	strb	r2, [r3, #2]
		updateFace.stopwatch = 1;
 8002e6a:	4b13      	ldr	r3, [pc, #76]	; (8002eb8 <updateStopwatchState+0xb0>)
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	70da      	strb	r2, [r3, #3]

		// pull data and set lap
		stopwatchVars.lapPrev = stopwatchVars.lapCurrent;
 8002e70:	4b14      	ldr	r3, [pc, #80]	; (8002ec4 <updateStopwatchState+0xbc>)
 8002e72:	685a      	ldr	r2, [r3, #4]
 8002e74:	4b13      	ldr	r3, [pc, #76]	; (8002ec4 <updateStopwatchState+0xbc>)
 8002e76:	601a      	str	r2, [r3, #0]
		stopwatchVars.lapCurrent = stopwatchCounter;
 8002e78:	4b13      	ldr	r3, [pc, #76]	; (8002ec8 <updateStopwatchState+0xc0>)
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	4b11      	ldr	r3, [pc, #68]	; (8002ec4 <updateStopwatchState+0xbc>)
 8002e7e:	605a      	str	r2, [r3, #4]
	}
	if (buttons.is4Pressed) {
 8002e80:	4b0c      	ldr	r3, [pc, #48]	; (8002eb4 <updateStopwatchState+0xac>)
 8002e82:	78db      	ldrb	r3, [r3, #3]
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00f      	beq.n	8002eaa <updateStopwatchState+0xa2>
		buttons.is4Pressed = 0;
 8002e8a:	4b0a      	ldr	r3, [pc, #40]	; (8002eb4 <updateStopwatchState+0xac>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	70da      	strb	r2, [r3, #3]
		updateFace.stopwatch = 1;
 8002e90:	4b09      	ldr	r3, [pc, #36]	; (8002eb8 <updateStopwatchState+0xb0>)
 8002e92:	2201      	movs	r2, #1
 8002e94:	70da      	strb	r2, [r3, #3]

		// clear stopwatch hw
		clearStopwatch(timerStopwatchTim);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	0018      	movs	r0, r3
 8002e9a:	f001 faad 	bl	80043f8 <clearStopwatch>
		isStopwatchRunning = 0;
 8002e9e:	4b07      	ldr	r3, [pc, #28]	; (8002ebc <updateStopwatchState+0xb4>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	701a      	strb	r2, [r3, #0]
		isStopwatchPaused = 0;
 8002ea4:	4b06      	ldr	r3, [pc, #24]	; (8002ec0 <updateStopwatchState+0xb8>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	701a      	strb	r2, [r3, #0]
	}
}
 8002eaa:	46c0      	nop			; (mov r8, r8)
 8002eac:	46bd      	mov	sp, r7
 8002eae:	b002      	add	sp, #8
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	46c0      	nop			; (mov r8, r8)
 8002eb4:	2000018c 	.word	0x2000018c
 8002eb8:	20000140 	.word	0x20000140
 8002ebc:	20000144 	.word	0x20000144
 8002ec0:	20000191 	.word	0x20000191
 8002ec4:	2000010c 	.word	0x2000010c
 8002ec8:	2000019c 	.word	0x2000019c

08002ecc <updateDisplay>:

// update screen based on global variables
// going in main, so it's executing in a while loop
//   software interrupt on flag so that this doesn't run all the time?
void updateDisplay(RTC_HandleTypeDef *hrtc, SPI_HandleTypeDef *hspi) {
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
	// change faces
	if (isFaceBeingChanged == 1) {
 8002ed6:	4b5a      	ldr	r3, [pc, #360]	; (8003040 <updateDisplay+0x174>)
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d155      	bne.n	8002f8a <updateDisplay+0xbe>
		isFaceBeingChanged = 0;
 8002ede:	4b58      	ldr	r3, [pc, #352]	; (8003040 <updateDisplay+0x174>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	701a      	strb	r2, [r3, #0]

		// drawing titles and boxes that won't be rewritten during normal operation within
		// a specific face (titles and buttons)
		if (faceOnDisplay == faceClock) {
 8002ee4:	4b57      	ldr	r3, [pc, #348]	; (8003044 <updateDisplay+0x178>)
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d10b      	bne.n	8002f04 <updateDisplay+0x38>
			clearScreen(ST77XX_CYAN, hspi);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	4a56      	ldr	r2, [pc, #344]	; (8003048 <updateDisplay+0x17c>)
 8002ef0:	0019      	movs	r1, r3
 8002ef2:	0010      	movs	r0, r2
 8002ef4:	f7fe fb58 	bl	80015a8 <clearScreen>
			drawTitle("clock", hspi);
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	4b54      	ldr	r3, [pc, #336]	; (800304c <updateDisplay+0x180>)
 8002efc:	0011      	movs	r1, r2
 8002efe:	0018      	movs	r0, r3
 8002f00:	f000 fba2 	bl	8003648 <drawTitle>
		}
		if (faceOnDisplay == faceTimer) {
 8002f04:	4b4f      	ldr	r3, [pc, #316]	; (8003044 <updateDisplay+0x178>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d10c      	bne.n	8002f26 <updateDisplay+0x5a>
			clearScreen(ST77XX_GREEN, hspi);
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	23fc      	movs	r3, #252	; 0xfc
 8002f10:	00db      	lsls	r3, r3, #3
 8002f12:	0011      	movs	r1, r2
 8002f14:	0018      	movs	r0, r3
 8002f16:	f7fe fb47 	bl	80015a8 <clearScreen>
			drawTitle("timer", hspi);
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	4b4c      	ldr	r3, [pc, #304]	; (8003050 <updateDisplay+0x184>)
 8002f1e:	0011      	movs	r1, r2
 8002f20:	0018      	movs	r0, r3
 8002f22:	f000 fb91 	bl	8003648 <drawTitle>
		}
		if (faceOnDisplay == faceAlarm) {
 8002f26:	4b47      	ldr	r3, [pc, #284]	; (8003044 <updateDisplay+0x178>)
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d10b      	bne.n	8002f46 <updateDisplay+0x7a>
			clearScreen(ST77XX_MAGENTA, hspi);
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	4a48      	ldr	r2, [pc, #288]	; (8003054 <updateDisplay+0x188>)
 8002f32:	0019      	movs	r1, r3
 8002f34:	0010      	movs	r0, r2
 8002f36:	f7fe fb37 	bl	80015a8 <clearScreen>
			drawTitle("alarm", hspi);
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	4b46      	ldr	r3, [pc, #280]	; (8003058 <updateDisplay+0x18c>)
 8002f3e:	0011      	movs	r1, r2
 8002f40:	0018      	movs	r0, r3
 8002f42:	f000 fb81 	bl	8003648 <drawTitle>
		}
		if (faceOnDisplay == faceStopwatch) {
 8002f46:	4b3f      	ldr	r3, [pc, #252]	; (8003044 <updateDisplay+0x178>)
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	2b03      	cmp	r3, #3
 8002f4c:	d10b      	bne.n	8002f66 <updateDisplay+0x9a>
			clearScreen(ST77XX_YELLOW, hspi);
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	4a42      	ldr	r2, [pc, #264]	; (800305c <updateDisplay+0x190>)
 8002f52:	0019      	movs	r1, r3
 8002f54:	0010      	movs	r0, r2
 8002f56:	f7fe fb27 	bl	80015a8 <clearScreen>
			drawTitle("stopwatch", hspi);
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	4b40      	ldr	r3, [pc, #256]	; (8003060 <updateDisplay+0x194>)
 8002f5e:	0011      	movs	r1, r2
 8002f60:	0018      	movs	r0, r3
 8002f62:	f000 fb71 	bl	8003648 <drawTitle>
		}

		drawButton(WIDTH/4-5, HEIGHT-20, hspi);
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	001a      	movs	r2, r3
 8002f6a:	218c      	movs	r1, #140	; 0x8c
 8002f6c:	201b      	movs	r0, #27
 8002f6e:	f000 fb3f 	bl	80035f0 <drawButton>
		drawButton(WIDTH/2-5, HEIGHT-20, hspi);
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	001a      	movs	r2, r3
 8002f76:	218c      	movs	r1, #140	; 0x8c
 8002f78:	203b      	movs	r0, #59	; 0x3b
 8002f7a:	f000 fb39 	bl	80035f0 <drawButton>
		drawButton(WIDTH/4*3-5, HEIGHT-20, hspi);
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	001a      	movs	r2, r3
 8002f82:	218c      	movs	r1, #140	; 0x8c
 8002f84:	205b      	movs	r0, #91	; 0x5b
 8002f86:	f000 fb33 	bl	80035f0 <drawButton>
	}

	// update clock face
	if (faceOnDisplay == faceClock) {
 8002f8a:	4b2e      	ldr	r3, [pc, #184]	; (8003044 <updateDisplay+0x178>)
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d112      	bne.n	8002fb8 <updateDisplay+0xec>
		if (updateFace.clock == 1) {
 8002f92:	4b34      	ldr	r3, [pc, #208]	; (8003064 <updateDisplay+0x198>)
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d14c      	bne.n	8003036 <updateDisplay+0x16a>
			updateFace.clock = 0;
 8002f9c:	4b31      	ldr	r3, [pc, #196]	; (8003064 <updateDisplay+0x198>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	701a      	strb	r2, [r3, #0]
			setBackgroundColor(ST77XX_CYAN);
 8002fa2:	4b29      	ldr	r3, [pc, #164]	; (8003048 <updateDisplay+0x17c>)
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	f7fe fab5 	bl	8001514 <setBackgroundColor>
			updateClockDisplay(hrtc, hspi);
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	0011      	movs	r1, r2
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	f000 f859 	bl	8003068 <updateClockDisplay>
			updateFace.stopwatch = 0;
			setBackgroundColor(ST77XX_YELLOW);
			updateStopwatchDisplay(hspi);
		}
	}
}
 8002fb6:	e03e      	b.n	8003036 <updateDisplay+0x16a>
	else if (faceOnDisplay == faceTimer) {
 8002fb8:	4b22      	ldr	r3, [pc, #136]	; (8003044 <updateDisplay+0x178>)
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d111      	bne.n	8002fe4 <updateDisplay+0x118>
		if (updateFace.timer == 1) {
 8002fc0:	4b28      	ldr	r3, [pc, #160]	; (8003064 <updateDisplay+0x198>)
 8002fc2:	785b      	ldrb	r3, [r3, #1]
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d135      	bne.n	8003036 <updateDisplay+0x16a>
			updateFace.timer = 0;
 8002fca:	4b26      	ldr	r3, [pc, #152]	; (8003064 <updateDisplay+0x198>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	705a      	strb	r2, [r3, #1]
			setBackgroundColor(ST77XX_GREEN);
 8002fd0:	23fc      	movs	r3, #252	; 0xfc
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	f7fe fa9d 	bl	8001514 <setBackgroundColor>
			updateTimerDisplay(hspi);
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	0018      	movs	r0, r3
 8002fde:	f000 f8f3 	bl	80031c8 <updateTimerDisplay>
}
 8002fe2:	e028      	b.n	8003036 <updateDisplay+0x16a>
	else if (faceOnDisplay == faceAlarm) {
 8002fe4:	4b17      	ldr	r3, [pc, #92]	; (8003044 <updateDisplay+0x178>)
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d110      	bne.n	800300e <updateDisplay+0x142>
		if (updateFace.alarm == 1) {
 8002fec:	4b1d      	ldr	r3, [pc, #116]	; (8003064 <updateDisplay+0x198>)
 8002fee:	789b      	ldrb	r3, [r3, #2]
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d11f      	bne.n	8003036 <updateDisplay+0x16a>
			updateFace.alarm = 0;
 8002ff6:	4b1b      	ldr	r3, [pc, #108]	; (8003064 <updateDisplay+0x198>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	709a      	strb	r2, [r3, #2]
			setBackgroundColor(ST77XX_MAGENTA);
 8002ffc:	4b15      	ldr	r3, [pc, #84]	; (8003054 <updateDisplay+0x188>)
 8002ffe:	0018      	movs	r0, r3
 8003000:	f7fe fa88 	bl	8001514 <setBackgroundColor>
			updateAlarmDisplay(hspi);
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	0018      	movs	r0, r3
 8003008:	f000 f9e0 	bl	80033cc <updateAlarmDisplay>
}
 800300c:	e013      	b.n	8003036 <updateDisplay+0x16a>
	else if (faceOnDisplay == faceStopwatch) {
 800300e:	4b0d      	ldr	r3, [pc, #52]	; (8003044 <updateDisplay+0x178>)
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	2b03      	cmp	r3, #3
 8003014:	d10f      	bne.n	8003036 <updateDisplay+0x16a>
		if (updateFace.stopwatch == 1) {
 8003016:	4b13      	ldr	r3, [pc, #76]	; (8003064 <updateDisplay+0x198>)
 8003018:	78db      	ldrb	r3, [r3, #3]
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b01      	cmp	r3, #1
 800301e:	d10a      	bne.n	8003036 <updateDisplay+0x16a>
			updateFace.stopwatch = 0;
 8003020:	4b10      	ldr	r3, [pc, #64]	; (8003064 <updateDisplay+0x198>)
 8003022:	2200      	movs	r2, #0
 8003024:	70da      	strb	r2, [r3, #3]
			setBackgroundColor(ST77XX_YELLOW);
 8003026:	4b0d      	ldr	r3, [pc, #52]	; (800305c <updateDisplay+0x190>)
 8003028:	0018      	movs	r0, r3
 800302a:	f7fe fa73 	bl	8001514 <setBackgroundColor>
			updateStopwatchDisplay(hspi);
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	0018      	movs	r0, r3
 8003032:	f000 fa8b 	bl	800354c <updateStopwatchDisplay>
}
 8003036:	46c0      	nop			; (mov r8, r8)
 8003038:	46bd      	mov	sp, r7
 800303a:	b002      	add	sp, #8
 800303c:	bd80      	pop	{r7, pc}
 800303e:	46c0      	nop			; (mov r8, r8)
 8003040:	20000060 	.word	0x20000060
 8003044:	20000114 	.word	0x20000114
 8003048:	000007ff 	.word	0x000007ff
 800304c:	08008f84 	.word	0x08008f84
 8003050:	08008f8c 	.word	0x08008f8c
 8003054:	0000f81f 	.word	0x0000f81f
 8003058:	08008f94 	.word	0x08008f94
 800305c:	0000ffe0 	.word	0x0000ffe0
 8003060:	08008f9c 	.word	0x08008f9c
 8003064:	20000140 	.word	0x20000140

08003068 <updateClockDisplay>:

void updateClockDisplay(RTC_HandleTypeDef *hrtc, SPI_HandleTypeDef *hspi) {
 8003068:	b5b0      	push	{r4, r5, r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
	struct dates currentDate = {0};
 8003072:	2310      	movs	r3, #16
 8003074:	18fb      	adds	r3, r7, r3
 8003076:	0018      	movs	r0, r3
 8003078:	2306      	movs	r3, #6
 800307a:	001a      	movs	r2, r3
 800307c:	2100      	movs	r1, #0
 800307e:	f005 fae8 	bl	8008652 <memset>
	struct times currentTime = {0};
 8003082:	230c      	movs	r3, #12
 8003084:	18fb      	adds	r3, r7, r3
 8003086:	0018      	movs	r0, r3
 8003088:	2303      	movs	r3, #3
 800308a:	001a      	movs	r2, r3
 800308c:	2100      	movs	r1, #0
 800308e:	f005 fae0 	bl	8008652 <memset>

	if (clockVars.isBeingSet == 0) {
 8003092:	4b42      	ldr	r3, [pc, #264]	; (800319c <updateClockDisplay+0x134>)
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d121      	bne.n	80030de <updateClockDisplay+0x76>
		getDateTime(&currentDate, &currentTime, hrtc);
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	240c      	movs	r4, #12
 800309e:	1939      	adds	r1, r7, r4
 80030a0:	2510      	movs	r5, #16
 80030a2:	197b      	adds	r3, r7, r5
 80030a4:	0018      	movs	r0, r3
 80030a6:	f7fe fc81 	bl	80019ac <getDateTime>
		drawClock(&currentDate, &currentTime, hspi);
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	1939      	adds	r1, r7, r4
 80030ae:	197b      	adds	r3, r7, r5
 80030b0:	0018      	movs	r0, r3
 80030b2:	f000 fb49 	bl	8003748 <drawClock>

		setTextSize(1);
 80030b6:	2001      	movs	r0, #1
 80030b8:	f7fe fa56 	bl	8001568 <setTextSize>
		// clear line that says "setting ___"
		clearTextLine(44, hspi);
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	0019      	movs	r1, r3
 80030c0:	202c      	movs	r0, #44	; 0x2c
 80030c2:	f7fd fe81 	bl	8000dc8 <clearTextLine>

		// draw button text
		clearTextLine(HEIGHT-28, hspi);
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	0019      	movs	r1, r3
 80030ca:	2084      	movs	r0, #132	; 0x84
 80030cc:	f7fd fe7c 	bl	8000dc8 <clearTextLine>
		drawCenteredText(WIDTH*3/4, HEIGHT-28, "set", hspi);
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	4a33      	ldr	r2, [pc, #204]	; (80031a0 <updateClockDisplay+0x138>)
 80030d4:	2184      	movs	r1, #132	; 0x84
 80030d6:	2060      	movs	r0, #96	; 0x60
 80030d8:	f7fd fe14 	bl	8000d04 <drawCenteredText>
			default: break;
		}

		drawClock(clockVars.dateToSet, clockVars.timeToSet, hspi);
	}
}
 80030dc:	e05a      	b.n	8003194 <updateClockDisplay+0x12c>
	else if (clockVars.isBeingSet == 1) {
 80030de:	4b2f      	ldr	r3, [pc, #188]	; (800319c <updateClockDisplay+0x134>)
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d156      	bne.n	8003194 <updateClockDisplay+0x12c>
		setTextSize(1);
 80030e6:	2001      	movs	r0, #1
 80030e8:	f7fe fa3e 	bl	8001568 <setTextSize>
		clearTextLine(HEIGHT-28, hspi);
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	0019      	movs	r1, r3
 80030f0:	2084      	movs	r0, #132	; 0x84
 80030f2:	f7fd fe69 	bl	8000dc8 <clearTextLine>
		drawCenteredText(WIDTH/4, HEIGHT-28, "up", hspi);
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	4a2a      	ldr	r2, [pc, #168]	; (80031a4 <updateClockDisplay+0x13c>)
 80030fa:	2184      	movs	r1, #132	; 0x84
 80030fc:	2020      	movs	r0, #32
 80030fe:	f7fd fe01 	bl	8000d04 <drawCenteredText>
		drawCenteredText(WIDTH/2, HEIGHT-28, "down", hspi);
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	4a28      	ldr	r2, [pc, #160]	; (80031a8 <updateClockDisplay+0x140>)
 8003106:	2184      	movs	r1, #132	; 0x84
 8003108:	2040      	movs	r0, #64	; 0x40
 800310a:	f7fd fdfb 	bl	8000d04 <drawCenteredText>
		drawCenteredText(WIDTH*3/4, HEIGHT-28, "change", hspi);
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	4a26      	ldr	r2, [pc, #152]	; (80031ac <updateClockDisplay+0x144>)
 8003112:	2184      	movs	r1, #132	; 0x84
 8003114:	2060      	movs	r0, #96	; 0x60
 8003116:	f7fd fdf5 	bl	8000d04 <drawCenteredText>
		clearTextLine(44, hspi);
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	0019      	movs	r1, r3
 800311e:	202c      	movs	r0, #44	; 0x2c
 8003120:	f7fd fe52 	bl	8000dc8 <clearTextLine>
		setTextSize(1);
 8003124:	2001      	movs	r0, #1
 8003126:	f7fe fa1f 	bl	8001568 <setTextSize>
		switch (clockVars.fieldBeingSet) {
 800312a:	4b1c      	ldr	r3, [pc, #112]	; (800319c <updateClockDisplay+0x134>)
 800312c:	785b      	ldrb	r3, [r3, #1]
 800312e:	2b05      	cmp	r3, #5
 8003130:	d827      	bhi.n	8003182 <updateClockDisplay+0x11a>
 8003132:	009a      	lsls	r2, r3, #2
 8003134:	4b1e      	ldr	r3, [pc, #120]	; (80031b0 <updateClockDisplay+0x148>)
 8003136:	18d3      	adds	r3, r2, r3
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	469f      	mov	pc, r3
			case 1:	drawCenteredText(WIDTH/2, 44, "setting minute...", hspi); break;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	4a1d      	ldr	r2, [pc, #116]	; (80031b4 <updateClockDisplay+0x14c>)
 8003140:	212c      	movs	r1, #44	; 0x2c
 8003142:	2040      	movs	r0, #64	; 0x40
 8003144:	f7fd fdde 	bl	8000d04 <drawCenteredText>
 8003148:	e01c      	b.n	8003184 <updateClockDisplay+0x11c>
			case 2:	drawCenteredText(WIDTH/2, 44, "setting hour...", hspi);	break;
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	4a1a      	ldr	r2, [pc, #104]	; (80031b8 <updateClockDisplay+0x150>)
 800314e:	212c      	movs	r1, #44	; 0x2c
 8003150:	2040      	movs	r0, #64	; 0x40
 8003152:	f7fd fdd7 	bl	8000d04 <drawCenteredText>
 8003156:	e015      	b.n	8003184 <updateClockDisplay+0x11c>
			case 3: drawCenteredText(WIDTH/2, 44, "setting year...", hspi); break;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	4a18      	ldr	r2, [pc, #96]	; (80031bc <updateClockDisplay+0x154>)
 800315c:	212c      	movs	r1, #44	; 0x2c
 800315e:	2040      	movs	r0, #64	; 0x40
 8003160:	f7fd fdd0 	bl	8000d04 <drawCenteredText>
 8003164:	e00e      	b.n	8003184 <updateClockDisplay+0x11c>
			case 4: drawCenteredText(WIDTH/2, 44, "setting month...", hspi); break;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	4a15      	ldr	r2, [pc, #84]	; (80031c0 <updateClockDisplay+0x158>)
 800316a:	212c      	movs	r1, #44	; 0x2c
 800316c:	2040      	movs	r0, #64	; 0x40
 800316e:	f7fd fdc9 	bl	8000d04 <drawCenteredText>
 8003172:	e007      	b.n	8003184 <updateClockDisplay+0x11c>
			case 5: drawCenteredText(WIDTH/2, 44, "setting date...", hspi); break;
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	4a13      	ldr	r2, [pc, #76]	; (80031c4 <updateClockDisplay+0x15c>)
 8003178:	212c      	movs	r1, #44	; 0x2c
 800317a:	2040      	movs	r0, #64	; 0x40
 800317c:	f7fd fdc2 	bl	8000d04 <drawCenteredText>
 8003180:	e000      	b.n	8003184 <updateClockDisplay+0x11c>
			default: break;
 8003182:	46c0      	nop			; (mov r8, r8)
		drawClock(clockVars.dateToSet, clockVars.timeToSet, hspi);
 8003184:	4b05      	ldr	r3, [pc, #20]	; (800319c <updateClockDisplay+0x134>)
 8003186:	6858      	ldr	r0, [r3, #4]
 8003188:	4b04      	ldr	r3, [pc, #16]	; (800319c <updateClockDisplay+0x134>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	683a      	ldr	r2, [r7, #0]
 800318e:	0019      	movs	r1, r3
 8003190:	f000 fada 	bl	8003748 <drawClock>
}
 8003194:	46c0      	nop			; (mov r8, r8)
 8003196:	46bd      	mov	sp, r7
 8003198:	b006      	add	sp, #24
 800319a:	bdb0      	pop	{r4, r5, r7, pc}
 800319c:	200000f0 	.word	0x200000f0
 80031a0:	08008fa8 	.word	0x08008fa8
 80031a4:	08008fac 	.word	0x08008fac
 80031a8:	08008fb0 	.word	0x08008fb0
 80031ac:	08008fb8 	.word	0x08008fb8
 80031b0:	0800961c 	.word	0x0800961c
 80031b4:	08008fc0 	.word	0x08008fc0
 80031b8:	08008fd4 	.word	0x08008fd4
 80031bc:	08008fe4 	.word	0x08008fe4
 80031c0:	08008ff4 	.word	0x08008ff4
 80031c4:	08009008 	.word	0x08009008

080031c8 <updateTimerDisplay>:

void updateTimerDisplay(SPI_HandleTypeDef *hspi) {
 80031c8:	b590      	push	{r4, r7, lr}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
	struct times currentTimer = {0};
 80031d0:	230c      	movs	r3, #12
 80031d2:	18fb      	adds	r3, r7, r3
 80031d4:	0018      	movs	r0, r3
 80031d6:	2303      	movs	r3, #3
 80031d8:	001a      	movs	r2, r3
 80031da:	2100      	movs	r1, #0
 80031dc:	f005 fa39 	bl	8008652 <memset>

	if (timerVars.isBeingSet == 0) {
 80031e0:	4b69      	ldr	r3, [pc, #420]	; (8003388 <updateTimerDisplay+0x1c0>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d000      	beq.n	80031ea <updateTimerDisplay+0x22>
 80031e8:	e082      	b.n	80032f0 <updateTimerDisplay+0x128>
		if (timerVars.isSet == 0) {
 80031ea:	4b67      	ldr	r3, [pc, #412]	; (8003388 <updateTimerDisplay+0x1c0>)
 80031ec:	789b      	ldrb	r3, [r3, #2]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d12a      	bne.n	8003248 <updateTimerDisplay+0x80>
			secondsToTime(&currentTimer, 0);
 80031f2:	240c      	movs	r4, #12
 80031f4:	193b      	adds	r3, r7, r4
 80031f6:	2100      	movs	r1, #0
 80031f8:	0018      	movs	r0, r3
 80031fa:	f7fe fc42 	bl	8001a82 <secondsToTime>
			drawTimer(&currentTimer, hspi);
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	193b      	adds	r3, r7, r4
 8003202:	0011      	movs	r1, r2
 8003204:	0018      	movs	r0, r3
 8003206:	f000 fb1b 	bl	8003840 <drawTimer>

			// write "timer unset"
			setTextSize(1);
 800320a:	2001      	movs	r0, #1
 800320c:	f7fe f9ac 	bl	8001568 <setTextSize>
			clearTextLine(52, hspi);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	0019      	movs	r1, r3
 8003214:	2034      	movs	r0, #52	; 0x34
 8003216:	f7fd fdd7 	bl	8000dc8 <clearTextLine>
			clearTextLine(84, hspi);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	0019      	movs	r1, r3
 800321e:	2054      	movs	r0, #84	; 0x54
 8003220:	f7fd fdd2 	bl	8000dc8 <clearTextLine>
			drawCenteredText(WIDTH/2, 84, "timer unset", hspi);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a59      	ldr	r2, [pc, #356]	; (800338c <updateTimerDisplay+0x1c4>)
 8003228:	2154      	movs	r1, #84	; 0x54
 800322a:	2040      	movs	r0, #64	; 0x40
 800322c:	f7fd fd6a 	bl	8000d04 <drawCenteredText>

			// draw button text
			clearTextLine(HEIGHT-28, hspi);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	0019      	movs	r1, r3
 8003234:	2084      	movs	r0, #132	; 0x84
 8003236:	f7fd fdc7 	bl	8000dc8 <clearTextLine>
			drawCenteredText(WIDTH*3/4, HEIGHT-28, "set", hspi);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a54      	ldr	r2, [pc, #336]	; (8003390 <updateTimerDisplay+0x1c8>)
 800323e:	2184      	movs	r1, #132	; 0x84
 8003240:	2060      	movs	r0, #96	; 0x60
 8003242:	f7fd fd5f 	bl	8000d04 <drawCenteredText>
			default: break;
		}

		drawTimer(timerVars.timeToSet, hspi);
	}
}
 8003246:	e09b      	b.n	8003380 <updateTimerDisplay+0x1b8>
			secondsToTime(&currentTimer, timerCounter);
 8003248:	4b52      	ldr	r3, [pc, #328]	; (8003394 <updateTimerDisplay+0x1cc>)
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	240c      	movs	r4, #12
 800324e:	193b      	adds	r3, r7, r4
 8003250:	0011      	movs	r1, r2
 8003252:	0018      	movs	r0, r3
 8003254:	f7fe fc15 	bl	8001a82 <secondsToTime>
			drawTimer(&currentTimer, hspi);
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	193b      	adds	r3, r7, r4
 800325c:	0011      	movs	r1, r2
 800325e:	0018      	movs	r0, r3
 8003260:	f000 faee 	bl	8003840 <drawTimer>
			setTextSize(1);
 8003264:	2001      	movs	r0, #1
 8003266:	f7fe f97f 	bl	8001568 <setTextSize>
			clearTextLine(52, hspi);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	0019      	movs	r1, r3
 800326e:	2034      	movs	r0, #52	; 0x34
 8003270:	f7fd fdaa 	bl	8000dc8 <clearTextLine>
			clearTextLine(84, hspi);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	0019      	movs	r1, r3
 8003278:	2054      	movs	r0, #84	; 0x54
 800327a:	f7fd fda5 	bl	8000dc8 <clearTextLine>
			if (isTimerPaused == 1) {
 800327e:	4b46      	ldr	r3, [pc, #280]	; (8003398 <updateTimerDisplay+0x1d0>)
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b01      	cmp	r3, #1
 8003286:	d106      	bne.n	8003296 <updateTimerDisplay+0xce>
				drawCenteredText(WIDTH/2, 84, "timer paused", hspi);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a44      	ldr	r2, [pc, #272]	; (800339c <updateTimerDisplay+0x1d4>)
 800328c:	2154      	movs	r1, #84	; 0x54
 800328e:	2040      	movs	r0, #64	; 0x40
 8003290:	f7fd fd38 	bl	8000d04 <drawCenteredText>
 8003294:	e014      	b.n	80032c0 <updateTimerDisplay+0xf8>
			else if (isTimerRunning == 0 && timerCounter != 0) {
 8003296:	4b42      	ldr	r3, [pc, #264]	; (80033a0 <updateTimerDisplay+0x1d8>)
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10a      	bne.n	80032b6 <updateTimerDisplay+0xee>
 80032a0:	4b3c      	ldr	r3, [pc, #240]	; (8003394 <updateTimerDisplay+0x1cc>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d006      	beq.n	80032b6 <updateTimerDisplay+0xee>
				drawCenteredText(WIDTH/2, 84, "timer set!", hspi);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a3e      	ldr	r2, [pc, #248]	; (80033a4 <updateTimerDisplay+0x1dc>)
 80032ac:	2154      	movs	r1, #84	; 0x54
 80032ae:	2040      	movs	r0, #64	; 0x40
 80032b0:	f7fd fd28 	bl	8000d04 <drawCenteredText>
 80032b4:	e004      	b.n	80032c0 <updateTimerDisplay+0xf8>
				clearTextLine(84, hspi);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	0019      	movs	r1, r3
 80032ba:	2054      	movs	r0, #84	; 0x54
 80032bc:	f7fd fd84 	bl	8000dc8 <clearTextLine>
			clearTextLine(HEIGHT-28, hspi);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	0019      	movs	r1, r3
 80032c4:	2084      	movs	r0, #132	; 0x84
 80032c6:	f7fd fd7f 	bl	8000dc8 <clearTextLine>
			drawCenteredText(WIDTH/4, HEIGHT-28, "run", hspi);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a36      	ldr	r2, [pc, #216]	; (80033a8 <updateTimerDisplay+0x1e0>)
 80032ce:	2184      	movs	r1, #132	; 0x84
 80032d0:	2020      	movs	r0, #32
 80032d2:	f7fd fd17 	bl	8000d04 <drawCenteredText>
			drawCenteredText(WIDTH/2, HEIGHT-28, "pause", hspi);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a34      	ldr	r2, [pc, #208]	; (80033ac <updateTimerDisplay+0x1e4>)
 80032da:	2184      	movs	r1, #132	; 0x84
 80032dc:	2040      	movs	r0, #64	; 0x40
 80032de:	f7fd fd11 	bl	8000d04 <drawCenteredText>
			drawCenteredText(WIDTH*3/4, HEIGHT-28, "clear", hspi);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a32      	ldr	r2, [pc, #200]	; (80033b0 <updateTimerDisplay+0x1e8>)
 80032e6:	2184      	movs	r1, #132	; 0x84
 80032e8:	2060      	movs	r0, #96	; 0x60
 80032ea:	f7fd fd0b 	bl	8000d04 <drawCenteredText>
}
 80032ee:	e047      	b.n	8003380 <updateTimerDisplay+0x1b8>
	else if (timerVars.isBeingSet == 1) {
 80032f0:	4b25      	ldr	r3, [pc, #148]	; (8003388 <updateTimerDisplay+0x1c0>)
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d143      	bne.n	8003380 <updateTimerDisplay+0x1b8>
		setTextSize(1);
 80032f8:	2001      	movs	r0, #1
 80032fa:	f7fe f935 	bl	8001568 <setTextSize>
		clearTextLine(HEIGHT-28, hspi);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	0019      	movs	r1, r3
 8003302:	2084      	movs	r0, #132	; 0x84
 8003304:	f7fd fd60 	bl	8000dc8 <clearTextLine>
		drawCenteredText(WIDTH/4, HEIGHT-28, "up", hspi);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a2a      	ldr	r2, [pc, #168]	; (80033b4 <updateTimerDisplay+0x1ec>)
 800330c:	2184      	movs	r1, #132	; 0x84
 800330e:	2020      	movs	r0, #32
 8003310:	f7fd fcf8 	bl	8000d04 <drawCenteredText>
		drawCenteredText(WIDTH/2, HEIGHT-28, "down", hspi);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a28      	ldr	r2, [pc, #160]	; (80033b8 <updateTimerDisplay+0x1f0>)
 8003318:	2184      	movs	r1, #132	; 0x84
 800331a:	2040      	movs	r0, #64	; 0x40
 800331c:	f7fd fcf2 	bl	8000d04 <drawCenteredText>
		drawCenteredText(WIDTH*3/4, HEIGHT-28, "change", hspi);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a26      	ldr	r2, [pc, #152]	; (80033bc <updateTimerDisplay+0x1f4>)
 8003324:	2184      	movs	r1, #132	; 0x84
 8003326:	2060      	movs	r0, #96	; 0x60
 8003328:	f7fd fcec 	bl	8000d04 <drawCenteredText>
		clearTextLine(52, hspi);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	0019      	movs	r1, r3
 8003330:	2034      	movs	r0, #52	; 0x34
 8003332:	f7fd fd49 	bl	8000dc8 <clearTextLine>
		switch (timerVars.fieldBeingSet) {
 8003336:	4b14      	ldr	r3, [pc, #80]	; (8003388 <updateTimerDisplay+0x1c0>)
 8003338:	785b      	ldrb	r3, [r3, #1]
 800333a:	2b02      	cmp	r3, #2
 800333c:	d00b      	beq.n	8003356 <updateTimerDisplay+0x18e>
 800333e:	2b03      	cmp	r3, #3
 8003340:	d010      	beq.n	8003364 <updateTimerDisplay+0x19c>
 8003342:	2b01      	cmp	r3, #1
 8003344:	d000      	beq.n	8003348 <updateTimerDisplay+0x180>
			default: break;
 8003346:	e014      	b.n	8003372 <updateTimerDisplay+0x1aa>
			case 1: drawCenteredText(WIDTH/2, 52, "setting second...", hspi); break;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a1d      	ldr	r2, [pc, #116]	; (80033c0 <updateTimerDisplay+0x1f8>)
 800334c:	2134      	movs	r1, #52	; 0x34
 800334e:	2040      	movs	r0, #64	; 0x40
 8003350:	f7fd fcd8 	bl	8000d04 <drawCenteredText>
 8003354:	e00d      	b.n	8003372 <updateTimerDisplay+0x1aa>
			case 2: drawCenteredText(WIDTH/2, 52, "setting minute...", hspi); break;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a1a      	ldr	r2, [pc, #104]	; (80033c4 <updateTimerDisplay+0x1fc>)
 800335a:	2134      	movs	r1, #52	; 0x34
 800335c:	2040      	movs	r0, #64	; 0x40
 800335e:	f7fd fcd1 	bl	8000d04 <drawCenteredText>
 8003362:	e006      	b.n	8003372 <updateTimerDisplay+0x1aa>
			case 3: drawCenteredText(WIDTH/2, 52, "setting hour...", hspi); break;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a18      	ldr	r2, [pc, #96]	; (80033c8 <updateTimerDisplay+0x200>)
 8003368:	2134      	movs	r1, #52	; 0x34
 800336a:	2040      	movs	r0, #64	; 0x40
 800336c:	f7fd fcca 	bl	8000d04 <drawCenteredText>
 8003370:	46c0      	nop			; (mov r8, r8)
		drawTimer(timerVars.timeToSet, hspi);
 8003372:	4b05      	ldr	r3, [pc, #20]	; (8003388 <updateTimerDisplay+0x1c0>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	0011      	movs	r1, r2
 800337a:	0018      	movs	r0, r3
 800337c:	f000 fa60 	bl	8003840 <drawTimer>
}
 8003380:	46c0      	nop			; (mov r8, r8)
 8003382:	46bd      	mov	sp, r7
 8003384:	b005      	add	sp, #20
 8003386:	bd90      	pop	{r4, r7, pc}
 8003388:	200000fc 	.word	0x200000fc
 800338c:	08009018 	.word	0x08009018
 8003390:	08008fa8 	.word	0x08008fa8
 8003394:	20000148 	.word	0x20000148
 8003398:	20000198 	.word	0x20000198
 800339c:	08009024 	.word	0x08009024
 80033a0:	20000190 	.word	0x20000190
 80033a4:	08009034 	.word	0x08009034
 80033a8:	08009040 	.word	0x08009040
 80033ac:	08009044 	.word	0x08009044
 80033b0:	0800904c 	.word	0x0800904c
 80033b4:	08008fac 	.word	0x08008fac
 80033b8:	08008fb0 	.word	0x08008fb0
 80033bc:	08008fb8 	.word	0x08008fb8
 80033c0:	08009054 	.word	0x08009054
 80033c4:	08008fc0 	.word	0x08008fc0
 80033c8:	08008fd4 	.word	0x08008fd4

080033cc <updateAlarmDisplay>:

void updateAlarmDisplay(SPI_HandleTypeDef *hspi) {
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
	if (alarmVars.isBeingSet == 0) {
 80033d4:	4b51      	ldr	r3, [pc, #324]	; (800351c <updateAlarmDisplay+0x150>)
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d14c      	bne.n	8003476 <updateAlarmDisplay+0xaa>
		if (isAlarmRunning == 0) {
 80033dc:	4b50      	ldr	r3, [pc, #320]	; (8003520 <updateAlarmDisplay+0x154>)
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d121      	bne.n	800342a <updateAlarmDisplay+0x5e>
			setTextSize(3);
 80033e6:	2003      	movs	r0, #3
 80033e8:	f7fe f8be 	bl	8001568 <setTextSize>
			clearTextLine(68, hspi);	// clear alarm time text
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	0019      	movs	r1, r3
 80033f0:	2044      	movs	r0, #68	; 0x44
 80033f2:	f7fd fce9 	bl	8000dc8 <clearTextLine>

			setTextSize(1);
 80033f6:	2001      	movs	r0, #1
 80033f8:	f7fe f8b6 	bl	8001568 <setTextSize>
			clearTextLine(92, hspi);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	0019      	movs	r1, r3
 8003400:	205c      	movs	r0, #92	; 0x5c
 8003402:	f7fd fce1 	bl	8000dc8 <clearTextLine>
			drawCenteredText(WIDTH/2, 92, "alarm unset", hspi);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a46      	ldr	r2, [pc, #280]	; (8003524 <updateAlarmDisplay+0x158>)
 800340a:	215c      	movs	r1, #92	; 0x5c
 800340c:	2040      	movs	r0, #64	; 0x40
 800340e:	f7fd fc79 	bl	8000d04 <drawCenteredText>

			// draw button text
			clearTextLine(HEIGHT-28, hspi);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	0019      	movs	r1, r3
 8003416:	2084      	movs	r0, #132	; 0x84
 8003418:	f7fd fcd6 	bl	8000dc8 <clearTextLine>
			drawCenteredText(WIDTH*3/4, HEIGHT-28, "clear", hspi);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a42      	ldr	r2, [pc, #264]	; (8003528 <updateAlarmDisplay+0x15c>)
 8003420:	2184      	movs	r1, #132	; 0x84
 8003422:	2060      	movs	r0, #96	; 0x60
 8003424:	f7fd fc6e 	bl	8000d04 <drawCenteredText>
		drawCenteredText(WIDTH/2, HEIGHT-28, "down", hspi);
		drawCenteredText(WIDTH*3/4, HEIGHT-28, "change", hspi);

		drawAlarm(alarmVars.alarmToSet, hspi);
	}
}
 8003428:	e073      	b.n	8003512 <updateAlarmDisplay+0x146>
			setTextSize(1);
 800342a:	2001      	movs	r0, #1
 800342c:	f7fe f89c 	bl	8001568 <setTextSize>
			clearTextLine(52, hspi);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	0019      	movs	r1, r3
 8003434:	2034      	movs	r0, #52	; 0x34
 8003436:	f7fd fcc7 	bl	8000dc8 <clearTextLine>
			clearTextLine(92, hspi);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	0019      	movs	r1, r3
 800343e:	205c      	movs	r0, #92	; 0x5c
 8003440:	f7fd fcc2 	bl	8000dc8 <clearTextLine>
			drawCenteredText(WIDTH/2, 92, "alarm set", hspi);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a39      	ldr	r2, [pc, #228]	; (800352c <updateAlarmDisplay+0x160>)
 8003448:	215c      	movs	r1, #92	; 0x5c
 800344a:	2040      	movs	r0, #64	; 0x40
 800344c:	f7fd fc5a 	bl	8000d04 <drawCenteredText>
			drawAlarm(alarmVars.alarmToSet, hspi);
 8003450:	4b32      	ldr	r3, [pc, #200]	; (800351c <updateAlarmDisplay+0x150>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	0011      	movs	r1, r2
 8003458:	0018      	movs	r0, r3
 800345a:	f000 fa19 	bl	8003890 <drawAlarm>
			clearTextLine(HEIGHT-28, hspi);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	0019      	movs	r1, r3
 8003462:	2084      	movs	r0, #132	; 0x84
 8003464:	f7fd fcb0 	bl	8000dc8 <clearTextLine>
			drawCenteredText(WIDTH*3/4, HEIGHT-28, "clear", hspi);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a2f      	ldr	r2, [pc, #188]	; (8003528 <updateAlarmDisplay+0x15c>)
 800346c:	2184      	movs	r1, #132	; 0x84
 800346e:	2060      	movs	r0, #96	; 0x60
 8003470:	f7fd fc48 	bl	8000d04 <drawCenteredText>
}
 8003474:	e04d      	b.n	8003512 <updateAlarmDisplay+0x146>
	else if (alarmVars.isBeingSet == 1) {
 8003476:	4b29      	ldr	r3, [pc, #164]	; (800351c <updateAlarmDisplay+0x150>)
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d149      	bne.n	8003512 <updateAlarmDisplay+0x146>
		setTextSize(1);
 800347e:	2001      	movs	r0, #1
 8003480:	f7fe f872 	bl	8001568 <setTextSize>
		switch (alarmVars.fieldBeingSet) {
 8003484:	4b25      	ldr	r3, [pc, #148]	; (800351c <updateAlarmDisplay+0x150>)
 8003486:	785b      	ldrb	r3, [r3, #1]
 8003488:	2b02      	cmp	r3, #2
 800348a:	d00f      	beq.n	80034ac <updateAlarmDisplay+0xe0>
 800348c:	dc02      	bgt.n	8003494 <updateAlarmDisplay+0xc8>
 800348e:	2b01      	cmp	r3, #1
 8003490:	d005      	beq.n	800349e <updateAlarmDisplay+0xd2>
			default: break;
 8003492:	e020      	b.n	80034d6 <updateAlarmDisplay+0x10a>
		switch (alarmVars.fieldBeingSet) {
 8003494:	2b03      	cmp	r3, #3
 8003496:	d010      	beq.n	80034ba <updateAlarmDisplay+0xee>
 8003498:	2b04      	cmp	r3, #4
 800349a:	d015      	beq.n	80034c8 <updateAlarmDisplay+0xfc>
			default: break;
 800349c:	e01b      	b.n	80034d6 <updateAlarmDisplay+0x10a>
			case 1: drawCenteredText(WIDTH/2, 52, "setting second...", hspi); break;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a23      	ldr	r2, [pc, #140]	; (8003530 <updateAlarmDisplay+0x164>)
 80034a2:	2134      	movs	r1, #52	; 0x34
 80034a4:	2040      	movs	r0, #64	; 0x40
 80034a6:	f7fd fc2d 	bl	8000d04 <drawCenteredText>
 80034aa:	e014      	b.n	80034d6 <updateAlarmDisplay+0x10a>
			case 2: drawCenteredText(WIDTH/2, 52, "setting minute...", hspi); break;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a21      	ldr	r2, [pc, #132]	; (8003534 <updateAlarmDisplay+0x168>)
 80034b0:	2134      	movs	r1, #52	; 0x34
 80034b2:	2040      	movs	r0, #64	; 0x40
 80034b4:	f7fd fc26 	bl	8000d04 <drawCenteredText>
 80034b8:	e00d      	b.n	80034d6 <updateAlarmDisplay+0x10a>
			case 3: drawCenteredText(WIDTH/2, 52, "setting hour...", hspi); break;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a1e      	ldr	r2, [pc, #120]	; (8003538 <updateAlarmDisplay+0x16c>)
 80034be:	2134      	movs	r1, #52	; 0x34
 80034c0:	2040      	movs	r0, #64	; 0x40
 80034c2:	f7fd fc1f 	bl	8000d04 <drawCenteredText>
 80034c6:	e006      	b.n	80034d6 <updateAlarmDisplay+0x10a>
			case 4: drawCenteredText(WIDTH/2, 52, "setting day...", hspi); break;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a1c      	ldr	r2, [pc, #112]	; (800353c <updateAlarmDisplay+0x170>)
 80034cc:	2134      	movs	r1, #52	; 0x34
 80034ce:	2040      	movs	r0, #64	; 0x40
 80034d0:	f7fd fc18 	bl	8000d04 <drawCenteredText>
 80034d4:	46c0      	nop			; (mov r8, r8)
		clearTextLine(HEIGHT-28, hspi);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	0019      	movs	r1, r3
 80034da:	2084      	movs	r0, #132	; 0x84
 80034dc:	f7fd fc74 	bl	8000dc8 <clearTextLine>
		drawCenteredText(WIDTH/4, HEIGHT-28, "up", hspi);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a17      	ldr	r2, [pc, #92]	; (8003540 <updateAlarmDisplay+0x174>)
 80034e4:	2184      	movs	r1, #132	; 0x84
 80034e6:	2020      	movs	r0, #32
 80034e8:	f7fd fc0c 	bl	8000d04 <drawCenteredText>
		drawCenteredText(WIDTH/2, HEIGHT-28, "down", hspi);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a15      	ldr	r2, [pc, #84]	; (8003544 <updateAlarmDisplay+0x178>)
 80034f0:	2184      	movs	r1, #132	; 0x84
 80034f2:	2040      	movs	r0, #64	; 0x40
 80034f4:	f7fd fc06 	bl	8000d04 <drawCenteredText>
		drawCenteredText(WIDTH*3/4, HEIGHT-28, "change", hspi);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a13      	ldr	r2, [pc, #76]	; (8003548 <updateAlarmDisplay+0x17c>)
 80034fc:	2184      	movs	r1, #132	; 0x84
 80034fe:	2060      	movs	r0, #96	; 0x60
 8003500:	f7fd fc00 	bl	8000d04 <drawCenteredText>
		drawAlarm(alarmVars.alarmToSet, hspi);
 8003504:	4b05      	ldr	r3, [pc, #20]	; (800351c <updateAlarmDisplay+0x150>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	0011      	movs	r1, r2
 800350c:	0018      	movs	r0, r3
 800350e:	f000 f9bf 	bl	8003890 <drawAlarm>
}
 8003512:	46c0      	nop			; (mov r8, r8)
 8003514:	46bd      	mov	sp, r7
 8003516:	b002      	add	sp, #8
 8003518:	bd80      	pop	{r7, pc}
 800351a:	46c0      	nop			; (mov r8, r8)
 800351c:	20000104 	.word	0x20000104
 8003520:	2000014c 	.word	0x2000014c
 8003524:	08009068 	.word	0x08009068
 8003528:	0800904c 	.word	0x0800904c
 800352c:	08009074 	.word	0x08009074
 8003530:	08009054 	.word	0x08009054
 8003534:	08008fc0 	.word	0x08008fc0
 8003538:	08008fd4 	.word	0x08008fd4
 800353c:	08009080 	.word	0x08009080
 8003540:	08008fac 	.word	0x08008fac
 8003544:	08008fb0 	.word	0x08008fb0
 8003548:	08008fb8 	.word	0x08008fb8

0800354c <updateStopwatchDisplay>:

void updateStopwatchDisplay(SPI_HandleTypeDef *hspi) {
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
	drawStopwatch(stopwatchCounter, hspi);
 8003554:	4b1f      	ldr	r3, [pc, #124]	; (80035d4 <updateStopwatchDisplay+0x88>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	0011      	movs	r1, r2
 800355c:	0018      	movs	r0, r3
 800355e:	f000 f9d3 	bl	8003908 <drawStopwatch>
	drawStopwatchLap(stopwatchVars.lapCurrent-stopwatchVars.lapPrev, hspi);
 8003562:	4b1d      	ldr	r3, [pc, #116]	; (80035d8 <updateStopwatchDisplay+0x8c>)
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	4b1c      	ldr	r3, [pc, #112]	; (80035d8 <updateStopwatchDisplay+0x8c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	0011      	movs	r1, r2
 8003570:	0018      	movs	r0, r3
 8003572:	f000 f9ff 	bl	8003974 <drawStopwatchLap>

	setTextSize(1);
 8003576:	2001      	movs	r0, #1
 8003578:	f7fd fff6 	bl	8001568 <setTextSize>
	clearTextLine(HEIGHT-28, hspi);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	0019      	movs	r1, r3
 8003580:	2084      	movs	r0, #132	; 0x84
 8003582:	f7fd fc21 	bl	8000dc8 <clearTextLine>
	drawCenteredText(WIDTH/2, HEIGHT-28, "lap", hspi);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a14      	ldr	r2, [pc, #80]	; (80035dc <updateStopwatchDisplay+0x90>)
 800358a:	2184      	movs	r1, #132	; 0x84
 800358c:	2040      	movs	r0, #64	; 0x40
 800358e:	f7fd fbb9 	bl	8000d04 <drawCenteredText>
	drawCenteredText(WIDTH*3/4, HEIGHT-28, "clear", hspi);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a12      	ldr	r2, [pc, #72]	; (80035e0 <updateStopwatchDisplay+0x94>)
 8003596:	2184      	movs	r1, #132	; 0x84
 8003598:	2060      	movs	r0, #96	; 0x60
 800359a:	f7fd fbb3 	bl	8000d04 <drawCenteredText>

	if (isStopwatchRunning == 0) drawCenteredText(WIDTH/4, HEIGHT-28, "run", hspi);
 800359e:	4b11      	ldr	r3, [pc, #68]	; (80035e4 <updateStopwatchDisplay+0x98>)
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d106      	bne.n	80035b6 <updateStopwatchDisplay+0x6a>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a0f      	ldr	r2, [pc, #60]	; (80035e8 <updateStopwatchDisplay+0x9c>)
 80035ac:	2184      	movs	r1, #132	; 0x84
 80035ae:	2020      	movs	r0, #32
 80035b0:	f7fd fba8 	bl	8000d04 <drawCenteredText>
	else if (isStopwatchRunning == 1) drawCenteredText(WIDTH/4, HEIGHT-28, "pause", hspi);
}
 80035b4:	e00a      	b.n	80035cc <updateStopwatchDisplay+0x80>
	else if (isStopwatchRunning == 1) drawCenteredText(WIDTH/4, HEIGHT-28, "pause", hspi);
 80035b6:	4b0b      	ldr	r3, [pc, #44]	; (80035e4 <updateStopwatchDisplay+0x98>)
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d105      	bne.n	80035cc <updateStopwatchDisplay+0x80>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a0a      	ldr	r2, [pc, #40]	; (80035ec <updateStopwatchDisplay+0xa0>)
 80035c4:	2184      	movs	r1, #132	; 0x84
 80035c6:	2020      	movs	r0, #32
 80035c8:	f7fd fb9c 	bl	8000d04 <drawCenteredText>
}
 80035cc:	46c0      	nop			; (mov r8, r8)
 80035ce:	46bd      	mov	sp, r7
 80035d0:	b002      	add	sp, #8
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	2000019c 	.word	0x2000019c
 80035d8:	2000010c 	.word	0x2000010c
 80035dc:	08009090 	.word	0x08009090
 80035e0:	0800904c 	.word	0x0800904c
 80035e4:	20000144 	.word	0x20000144
 80035e8:	08009040 	.word	0x08009040
 80035ec:	08009044 	.word	0x08009044

080035f0 <drawButton>:

void drawButton(uint8_t x, uint8_t y, SPI_HandleTypeDef *hspi) {
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af02      	add	r7, sp, #8
 80035f6:	603a      	str	r2, [r7, #0]
 80035f8:	1dfb      	adds	r3, r7, #7
 80035fa:	1c02      	adds	r2, r0, #0
 80035fc:	701a      	strb	r2, [r3, #0]
 80035fe:	1dbb      	adds	r3, r7, #6
 8003600:	1c0a      	adds	r2, r1, #0
 8003602:	701a      	strb	r2, [r3, #0]
	// draw rect size 8 with 1 pixel border
	drawRect(x, y, 10, 10, ST77XX_BLACK, hspi);
 8003604:	1dbb      	adds	r3, r7, #6
 8003606:	7819      	ldrb	r1, [r3, #0]
 8003608:	1dfb      	adds	r3, r7, #7
 800360a:	7818      	ldrb	r0, [r3, #0]
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	9301      	str	r3, [sp, #4]
 8003610:	2300      	movs	r3, #0
 8003612:	9300      	str	r3, [sp, #0]
 8003614:	230a      	movs	r3, #10
 8003616:	220a      	movs	r2, #10
 8003618:	f7fd fa6d 	bl	8000af6 <drawRect>
	fillRect(x+1, y+1, 8, 8, ST77XX_WHITE, hspi);
 800361c:	1dfb      	adds	r3, r7, #7
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	3301      	adds	r3, #1
 8003622:	b2d8      	uxtb	r0, r3
 8003624:	1dbb      	adds	r3, r7, #6
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	3301      	adds	r3, #1
 800362a:	b2d9      	uxtb	r1, r3
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	9301      	str	r3, [sp, #4]
 8003630:	4b04      	ldr	r3, [pc, #16]	; (8003644 <drawButton+0x54>)
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	2308      	movs	r3, #8
 8003636:	2208      	movs	r2, #8
 8003638:	f7fd fab5 	bl	8000ba6 <fillRect>
//	setCursor(x+3, y+1);
//	setTextColor(ST77XX_BLACK);
//	setBackgroundColor(ST77XX_WHITE);
//	setTextSize(1);
//	drawChar('O', hspi);
}
 800363c:	46c0      	nop			; (mov r8, r8)
 800363e:	46bd      	mov	sp, r7
 8003640:	b002      	add	sp, #8
 8003642:	bd80      	pop	{r7, pc}
 8003644:	0000ffff 	.word	0x0000ffff

08003648 <drawTitle>:

void drawTitle(char *str, SPI_HandleTypeDef *hspi) {
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
	uint8_t strSize = strlen(str);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	0018      	movs	r0, r3
 8003656:	f7fc fd57 	bl	8000108 <strlen>
 800365a:	0002      	movs	r2, r0
 800365c:	210f      	movs	r1, #15
 800365e:	187b      	adds	r3, r7, r1
 8003660:	701a      	strb	r2, [r3, #0]

	// drawing title
	if (12*strSize < WIDTH) {		// about string size = 10 for width = 128
 8003662:	187b      	adds	r3, r7, r1
 8003664:	781a      	ldrb	r2, [r3, #0]
 8003666:	0013      	movs	r3, r2
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	189b      	adds	r3, r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	2b7f      	cmp	r3, #127	; 0x7f
 8003670:	dc22      	bgt.n	80036b8 <drawTitle+0x70>
		setTextSize(2);
 8003672:	2002      	movs	r0, #2
 8003674:	f7fd ff78 	bl	8001568 <setTextSize>
		clearTextLine(10, hspi);
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	0019      	movs	r1, r3
 800367c:	200a      	movs	r0, #10
 800367e:	f7fd fba3 	bl	8000dc8 <clearTextLine>
		setCursor((WIDTH-12*strSize)/2, 10);
 8003682:	230f      	movs	r3, #15
 8003684:	18fb      	adds	r3, r7, r3
 8003686:	781a      	ldrb	r2, [r3, #0]
 8003688:	0013      	movs	r3, r2
 800368a:	0092      	lsls	r2, r2, #2
 800368c:	1a9b      	subs	r3, r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	3380      	adds	r3, #128	; 0x80
 8003692:	2b00      	cmp	r3, #0
 8003694:	da00      	bge.n	8003698 <drawTitle+0x50>
 8003696:	3301      	adds	r3, #1
 8003698:	105b      	asrs	r3, r3, #1
 800369a:	b2db      	uxtb	r3, r3
 800369c:	210a      	movs	r1, #10
 800369e:	0018      	movs	r0, r3
 80036a0:	f7fd ff48 	bl	8001534 <setCursor>
		setTextColor(ST77XX_BLACK);
 80036a4:	2000      	movs	r0, #0
 80036a6:	f7fd ff6f 	bl	8001588 <setTextColor>
		drawText(str, hspi);
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	0011      	movs	r1, r2
 80036b0:	0018      	movs	r0, r3
 80036b2:	f7fd fef9 	bl	80014a8 <drawText>
		clearTextLine(10, hspi);
		setCursor((WIDTH-6*15)/2, 10);
		setTextColor(ST77XX_BLACK);
		drawText("shit's too long", hspi);
	}
}
 80036b6:	e040      	b.n	800373a <drawTitle+0xf2>
	else if (6*strSize < WIDTH) {	// about string size = 21 for width = 128
 80036b8:	230f      	movs	r3, #15
 80036ba:	18fb      	adds	r3, r7, r3
 80036bc:	781a      	ldrb	r2, [r3, #0]
 80036be:	0013      	movs	r3, r2
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	189b      	adds	r3, r3, r2
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	2b7f      	cmp	r3, #127	; 0x7f
 80036c8:	dc22      	bgt.n	8003710 <drawTitle+0xc8>
		setTextSize(1);
 80036ca:	2001      	movs	r0, #1
 80036cc:	f7fd ff4c 	bl	8001568 <setTextSize>
		clearTextLine(10, hspi);
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	0019      	movs	r1, r3
 80036d4:	200a      	movs	r0, #10
 80036d6:	f7fd fb77 	bl	8000dc8 <clearTextLine>
		setCursor((WIDTH-6*strSize)/2, 10);
 80036da:	230f      	movs	r3, #15
 80036dc:	18fb      	adds	r3, r7, r3
 80036de:	781a      	ldrb	r2, [r3, #0]
 80036e0:	0013      	movs	r3, r2
 80036e2:	0092      	lsls	r2, r2, #2
 80036e4:	1a9b      	subs	r3, r3, r2
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	3380      	adds	r3, #128	; 0x80
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	da00      	bge.n	80036f0 <drawTitle+0xa8>
 80036ee:	3301      	adds	r3, #1
 80036f0:	105b      	asrs	r3, r3, #1
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	210a      	movs	r1, #10
 80036f6:	0018      	movs	r0, r3
 80036f8:	f7fd ff1c 	bl	8001534 <setCursor>
		setTextColor(ST77XX_BLACK);
 80036fc:	2000      	movs	r0, #0
 80036fe:	f7fd ff43 	bl	8001588 <setTextColor>
		drawText(str, hspi);
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	0011      	movs	r1, r2
 8003708:	0018      	movs	r0, r3
 800370a:	f7fd fecd 	bl	80014a8 <drawText>
}
 800370e:	e014      	b.n	800373a <drawTitle+0xf2>
		setTextSize(1);
 8003710:	2001      	movs	r0, #1
 8003712:	f7fd ff29 	bl	8001568 <setTextSize>
		clearTextLine(10, hspi);
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	0019      	movs	r1, r3
 800371a:	200a      	movs	r0, #10
 800371c:	f7fd fb54 	bl	8000dc8 <clearTextLine>
		setCursor((WIDTH-6*15)/2, 10);
 8003720:	210a      	movs	r1, #10
 8003722:	2013      	movs	r0, #19
 8003724:	f7fd ff06 	bl	8001534 <setCursor>
		setTextColor(ST77XX_BLACK);
 8003728:	2000      	movs	r0, #0
 800372a:	f7fd ff2d 	bl	8001588 <setTextColor>
		drawText("shit's too long", hspi);
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	4b04      	ldr	r3, [pc, #16]	; (8003744 <drawTitle+0xfc>)
 8003732:	0011      	movs	r1, r2
 8003734:	0018      	movs	r0, r3
 8003736:	f7fd feb7 	bl	80014a8 <drawText>
}
 800373a:	46c0      	nop			; (mov r8, r8)
 800373c:	46bd      	mov	sp, r7
 800373e:	b004      	add	sp, #16
 8003740:	bd80      	pop	{r7, pc}
 8003742:	46c0      	nop			; (mov r8, r8)
 8003744:	08009094 	.word	0x08009094

08003748 <drawClock>:

// draw time and date
// should optimize to only redraw part that changed
void drawClock(struct dates *d, struct times *t, SPI_HandleTypeDef *hspi) {
 8003748:	b5b0      	push	{r4, r5, r7, lr}
 800374a:	b090      	sub	sp, #64	; 0x40
 800374c:	af02      	add	r7, sp, #8
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
	// notes on paper.
	char str[40];

	// drawing hr and min
	// should change to print 12-hr format instead of 24 if using am/pm
	sprintf(str, "%2d:%02d", t->hr, t->min);
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	001a      	movs	r2, r3
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	785b      	ldrb	r3, [r3, #1]
 800375e:	4931      	ldr	r1, [pc, #196]	; (8003824 <drawClock+0xdc>)
 8003760:	2410      	movs	r4, #16
 8003762:	1938      	adds	r0, r7, r4
 8003764:	f004 fffc 	bl	8008760 <siprintf>
	setTextSize(3);
 8003768:	2003      	movs	r0, #3
 800376a:	f7fd fefd 	bl	8001568 <setTextSize>
	setTextColor(ST77XX_BLACK);
 800376e:	2000      	movs	r0, #0
 8003770:	f7fd ff0a 	bl	8001588 <setTextColor>
//	clearTextLine(60, hspi);
	drawCenteredText(52, 60, str, hspi);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	193a      	adds	r2, r7, r4
 8003778:	213c      	movs	r1, #60	; 0x3c
 800377a:	2034      	movs	r0, #52	; 0x34
 800377c:	f7fd fac2 	bl	8000d04 <drawCenteredText>

	// drawing sec
	sprintf(str, "%02d", t->sec);
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	789b      	ldrb	r3, [r3, #2]
 8003784:	001a      	movs	r2, r3
 8003786:	4928      	ldr	r1, [pc, #160]	; (8003828 <drawClock+0xe0>)
 8003788:	193b      	adds	r3, r7, r4
 800378a:	0018      	movs	r0, r3
 800378c:	f004 ffe8 	bl	8008760 <siprintf>
	setTextSize(2);
 8003790:	2002      	movs	r0, #2
 8003792:	f7fd fee9 	bl	8001568 <setTextSize>
	drawCenteredText(109, 68, str, hspi);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	193a      	adds	r2, r7, r4
 800379a:	2144      	movs	r1, #68	; 0x44
 800379c:	206d      	movs	r0, #109	; 0x6d
 800379e:	f7fd fab1 	bl	8000d04 <drawCenteredText>

	// drawing AM/PM text
	setTextSize(1);
 80037a2:	2001      	movs	r0, #1
 80037a4:	f7fd fee0 	bl	8001568 <setTextSize>
	if (t->hr < 12) drawCenteredText(103, 60, "AM", hspi);
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	2b0b      	cmp	r3, #11
 80037ae:	d806      	bhi.n	80037be <drawClock+0x76>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a1e      	ldr	r2, [pc, #120]	; (800382c <drawClock+0xe4>)
 80037b4:	213c      	movs	r1, #60	; 0x3c
 80037b6:	2067      	movs	r0, #103	; 0x67
 80037b8:	f7fd faa4 	bl	8000d04 <drawCenteredText>
 80037bc:	e005      	b.n	80037ca <drawClock+0x82>
	else drawCenteredText(103, 60, "PM", hspi);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a1b      	ldr	r2, [pc, #108]	; (8003830 <drawClock+0xe8>)
 80037c2:	213c      	movs	r1, #60	; 0x3c
 80037c4:	2067      	movs	r0, #103	; 0x67
 80037c6:	f7fd fa9d 	bl	8000d04 <drawCenteredText>

	// drawing date
	setTextSize(2);
 80037ca:	2002      	movs	r0, #2
 80037cc:	f7fd fecc 	bl	8001568 <setTextSize>
//	clearTextLine(84, hspi);
	setTextSize(1);
 80037d0:	2001      	movs	r0, #1
 80037d2:	f7fd fec9 	bl	8001568 <setTextSize>
	sprintf(str, "%s %d %04d", monthNames[d->month], d->date, d->yr);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	789b      	ldrb	r3, [r3, #2]
 80037da:	001a      	movs	r2, r3
 80037dc:	4b15      	ldr	r3, [pc, #84]	; (8003834 <drawClock+0xec>)
 80037de:	0092      	lsls	r2, r2, #2
 80037e0:	58d2      	ldr	r2, [r2, r3]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	78db      	ldrb	r3, [r3, #3]
 80037e6:	001c      	movs	r4, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	881b      	ldrh	r3, [r3, #0]
 80037ec:	4912      	ldr	r1, [pc, #72]	; (8003838 <drawClock+0xf0>)
 80037ee:	2510      	movs	r5, #16
 80037f0:	1978      	adds	r0, r7, r5
 80037f2:	9300      	str	r3, [sp, #0]
 80037f4:	0023      	movs	r3, r4
 80037f6:	f004 ffb3 	bl	8008760 <siprintf>
	drawCenteredText(WIDTH/2, 84, str, hspi);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	197a      	adds	r2, r7, r5
 80037fe:	2154      	movs	r1, #84	; 0x54
 8003800:	2040      	movs	r0, #64	; 0x40
 8003802:	f7fd fa7f 	bl	8000d04 <drawCenteredText>

	// drawing weekday
	drawCenteredText(WIDTH/2, 92, weekdayNames[d->weekday], hspi);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	791b      	ldrb	r3, [r3, #4]
 800380a:	001a      	movs	r2, r3
 800380c:	4b0b      	ldr	r3, [pc, #44]	; (800383c <drawClock+0xf4>)
 800380e:	0092      	lsls	r2, r2, #2
 8003810:	58d2      	ldr	r2, [r2, r3]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	215c      	movs	r1, #92	; 0x5c
 8003816:	2040      	movs	r0, #64	; 0x40
 8003818:	f7fd fa74 	bl	8000d04 <drawCenteredText>
}
 800381c:	46c0      	nop			; (mov r8, r8)
 800381e:	46bd      	mov	sp, r7
 8003820:	b00e      	add	sp, #56	; 0x38
 8003822:	bdb0      	pop	{r4, r5, r7, pc}
 8003824:	080090a4 	.word	0x080090a4
 8003828:	080090b0 	.word	0x080090b0
 800382c:	080090b8 	.word	0x080090b8
 8003830:	080090bc 	.word	0x080090bc
 8003834:	2000002c 	.word	0x2000002c
 8003838:	080090c0 	.word	0x080090c0
 800383c:	2000000c 	.word	0x2000000c

08003840 <drawTimer>:

void drawTimer(struct times *t, SPI_HandleTypeDef *hspi) {
 8003840:	b5b0      	push	{r4, r5, r7, lr}
 8003842:	b08e      	sub	sp, #56	; 0x38
 8003844:	af02      	add	r7, sp, #8
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
	char str[40];

	// only drawing hr:min:sec of timer
	setTextSize(2);
 800384a:	2002      	movs	r0, #2
 800384c:	f7fd fe8c 	bl	8001568 <setTextSize>
	clearTextLine(68, hspi);
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	0019      	movs	r1, r3
 8003854:	2044      	movs	r0, #68	; 0x44
 8003856:	f7fd fab7 	bl	8000dc8 <clearTextLine>
	sprintf(str, "%2d:%2d:%2d", t->hr, t->min, t->sec);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	001a      	movs	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	785b      	ldrb	r3, [r3, #1]
 8003864:	001c      	movs	r4, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	789b      	ldrb	r3, [r3, #2]
 800386a:	4908      	ldr	r1, [pc, #32]	; (800388c <drawTimer+0x4c>)
 800386c:	2508      	movs	r5, #8
 800386e:	1978      	adds	r0, r7, r5
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	0023      	movs	r3, r4
 8003874:	f004 ff74 	bl	8008760 <siprintf>
	drawCenteredText(WIDTH/2, HEIGHT/2-12, str, hspi);		// about y=68
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	197a      	adds	r2, r7, r5
 800387c:	2144      	movs	r1, #68	; 0x44
 800387e:	2040      	movs	r0, #64	; 0x40
 8003880:	f7fd fa40 	bl	8000d04 <drawCenteredText>

	// leaving room to draw "timer set!/unset"
}
 8003884:	46c0      	nop			; (mov r8, r8)
 8003886:	46bd      	mov	sp, r7
 8003888:	b00c      	add	sp, #48	; 0x30
 800388a:	bdb0      	pop	{r4, r5, r7, pc}
 800388c:	080090cc 	.word	0x080090cc

08003890 <drawAlarm>:

void drawAlarm(struct alarmTimes *a, SPI_HandleTypeDef *hspi) {
 8003890:	b5b0      	push	{r4, r5, r7, lr}
 8003892:	b08e      	sub	sp, #56	; 0x38
 8003894:	af02      	add	r7, sp, #8
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
	char str[40];
	setTextSize(3);
 800389a:	2003      	movs	r0, #3
 800389c:	f7fd fe64 	bl	8001568 <setTextSize>
	clearTextLine(68, hspi);
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	0019      	movs	r1, r3
 80038a4:	2044      	movs	r0, #68	; 0x44
 80038a6:	f7fd fa8f 	bl	8000dc8 <clearTextLine>

	// drawing hr:min:sec
	setTextSize(2);
 80038aa:	2002      	movs	r0, #2
 80038ac:	f7fd fe5c 	bl	8001568 <setTextSize>
	sprintf(str, "%2d:%2d:%2d", a->hr, a->min, a->sec);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	001a      	movs	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	785b      	ldrb	r3, [r3, #1]
 80038ba:	001c      	movs	r4, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	789b      	ldrb	r3, [r3, #2]
 80038c0:	490f      	ldr	r1, [pc, #60]	; (8003900 <drawAlarm+0x70>)
 80038c2:	2508      	movs	r5, #8
 80038c4:	1978      	adds	r0, r7, r5
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	0023      	movs	r3, r4
 80038ca:	f004 ff49 	bl	8008760 <siprintf>
	drawCenteredText(WIDTH/2, 68, str, hspi);
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	197a      	adds	r2, r7, r5
 80038d2:	2144      	movs	r1, #68	; 0x44
 80038d4:	2040      	movs	r0, #64	; 0x40
 80038d6:	f7fd fa15 	bl	8000d04 <drawCenteredText>

	// drawing weekday
	setTextSize(1);
 80038da:	2001      	movs	r0, #1
 80038dc:	f7fd fe44 	bl	8001568 <setTextSize>
	drawCenteredText(WIDTH/2, 84, weekdayNames[a->weekday], hspi);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	78db      	ldrb	r3, [r3, #3]
 80038e4:	001a      	movs	r2, r3
 80038e6:	4b07      	ldr	r3, [pc, #28]	; (8003904 <drawAlarm+0x74>)
 80038e8:	0092      	lsls	r2, r2, #2
 80038ea:	58d2      	ldr	r2, [r2, r3]
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	2154      	movs	r1, #84	; 0x54
 80038f0:	2040      	movs	r0, #64	; 0x40
 80038f2:	f7fd fa07 	bl	8000d04 <drawCenteredText>
}
 80038f6:	46c0      	nop			; (mov r8, r8)
 80038f8:	46bd      	mov	sp, r7
 80038fa:	b00c      	add	sp, #48	; 0x30
 80038fc:	bdb0      	pop	{r4, r5, r7, pc}
 80038fe:	46c0      	nop			; (mov r8, r8)
 8003900:	080090cc 	.word	0x080090cc
 8003904:	2000000c 	.word	0x2000000c

08003908 <drawStopwatch>:

void drawStopwatch(uint32_t seconds, SPI_HandleTypeDef *hspi) {
 8003908:	b5b0      	push	{r4, r5, r7, lr}
 800390a:	b090      	sub	sp, #64	; 0x40
 800390c:	af02      	add	r7, sp, #8
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
	struct times t = {0};
 8003912:	2134      	movs	r1, #52	; 0x34
 8003914:	000c      	movs	r4, r1
 8003916:	187b      	adds	r3, r7, r1
 8003918:	0018      	movs	r0, r3
 800391a:	2303      	movs	r3, #3
 800391c:	001a      	movs	r2, r3
 800391e:	2100      	movs	r1, #0
 8003920:	f004 fe97 	bl	8008652 <memset>
	char str[40];

	secondsToTime(&t, seconds);
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	0021      	movs	r1, r4
 8003928:	000c      	movs	r4, r1
 800392a:	187b      	adds	r3, r7, r1
 800392c:	0011      	movs	r1, r2
 800392e:	0018      	movs	r0, r3
 8003930:	f7fe f8a7 	bl	8001a82 <secondsToTime>

	// drawing hr:min:sec
	setTextSize(2);
 8003934:	2002      	movs	r0, #2
 8003936:	f7fd fe17 	bl	8001568 <setTextSize>
//	clearTextLine(68, hspi);
	sprintf(str, "%2d:%2d:%2d", t.hr, t.min, t.sec);
 800393a:	0021      	movs	r1, r4
 800393c:	187b      	adds	r3, r7, r1
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	001a      	movs	r2, r3
 8003942:	187b      	adds	r3, r7, r1
 8003944:	785b      	ldrb	r3, [r3, #1]
 8003946:	001c      	movs	r4, r3
 8003948:	187b      	adds	r3, r7, r1
 800394a:	789b      	ldrb	r3, [r3, #2]
 800394c:	4908      	ldr	r1, [pc, #32]	; (8003970 <drawStopwatch+0x68>)
 800394e:	250c      	movs	r5, #12
 8003950:	1978      	adds	r0, r7, r5
 8003952:	9300      	str	r3, [sp, #0]
 8003954:	0023      	movs	r3, r4
 8003956:	f004 ff03 	bl	8008760 <siprintf>
	drawCenteredText(WIDTH/2, 68, str, hspi);
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	197a      	adds	r2, r7, r5
 800395e:	2144      	movs	r1, #68	; 0x44
 8003960:	2040      	movs	r0, #64	; 0x40
 8003962:	f7fd f9cf 	bl	8000d04 <drawCenteredText>

	// leaving room for lap
}
 8003966:	46c0      	nop			; (mov r8, r8)
 8003968:	46bd      	mov	sp, r7
 800396a:	b00e      	add	sp, #56	; 0x38
 800396c:	bdb0      	pop	{r4, r5, r7, pc}
 800396e:	46c0      	nop			; (mov r8, r8)
 8003970:	080090cc 	.word	0x080090cc

08003974 <drawStopwatchLap>:

void drawStopwatchLap(uint32_t seconds, SPI_HandleTypeDef *hspi) {
 8003974:	b5b0      	push	{r4, r5, r7, lr}
 8003976:	b090      	sub	sp, #64	; 0x40
 8003978:	af02      	add	r7, sp, #8
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
	struct times t = {0};
 800397e:	2134      	movs	r1, #52	; 0x34
 8003980:	000c      	movs	r4, r1
 8003982:	187b      	adds	r3, r7, r1
 8003984:	0018      	movs	r0, r3
 8003986:	2303      	movs	r3, #3
 8003988:	001a      	movs	r2, r3
 800398a:	2100      	movs	r1, #0
 800398c:	f004 fe61 	bl	8008652 <memset>
	char str[40];

	secondsToTime(&t, seconds);
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	0021      	movs	r1, r4
 8003994:	000c      	movs	r4, r1
 8003996:	187b      	adds	r3, r7, r1
 8003998:	0011      	movs	r1, r2
 800399a:	0018      	movs	r0, r3
 800399c:	f7fe f871 	bl	8001a82 <secondsToTime>

	// drawing hr:min:sec
	setTextSize(1);
 80039a0:	2001      	movs	r0, #1
 80039a2:	f7fd fde1 	bl	8001568 <setTextSize>
//	clearTextLine(84, hspi);
	sprintf(str, "lap: %2d:%2d:%2d", t.hr, t.min, t.sec);
 80039a6:	0021      	movs	r1, r4
 80039a8:	187b      	adds	r3, r7, r1
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	001a      	movs	r2, r3
 80039ae:	187b      	adds	r3, r7, r1
 80039b0:	785b      	ldrb	r3, [r3, #1]
 80039b2:	001c      	movs	r4, r3
 80039b4:	187b      	adds	r3, r7, r1
 80039b6:	789b      	ldrb	r3, [r3, #2]
 80039b8:	4908      	ldr	r1, [pc, #32]	; (80039dc <drawStopwatchLap+0x68>)
 80039ba:	250c      	movs	r5, #12
 80039bc:	1978      	adds	r0, r7, r5
 80039be:	9300      	str	r3, [sp, #0]
 80039c0:	0023      	movs	r3, r4
 80039c2:	f004 fecd 	bl	8008760 <siprintf>
	drawCenteredText(WIDTH/2, 84, str, hspi);
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	197a      	adds	r2, r7, r5
 80039ca:	2154      	movs	r1, #84	; 0x54
 80039cc:	2040      	movs	r0, #64	; 0x40
 80039ce:	f7fd f999 	bl	8000d04 <drawCenteredText>
}
 80039d2:	46c0      	nop			; (mov r8, r8)
 80039d4:	46bd      	mov	sp, r7
 80039d6:	b00e      	add	sp, #56	; 0x38
 80039d8:	bdb0      	pop	{r4, r5, r7, pc}
 80039da:	46c0      	nop			; (mov r8, r8)
 80039dc:	080090d8 	.word	0x080090d8

080039e0 <maxDaysInMonth>:

// calculator for number of days in a month given a month and accounting for leap years
// assumes month is 1-12, 1=january, 12=december
uint8_t maxDaysInMonth(uint8_t month, uint16_t year) {
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	0002      	movs	r2, r0
 80039e8:	1dfb      	adds	r3, r7, #7
 80039ea:	701a      	strb	r2, [r3, #0]
 80039ec:	1d3b      	adds	r3, r7, #4
 80039ee:	1c0a      	adds	r2, r1, #0
 80039f0:	801a      	strh	r2, [r3, #0]
	if (month == 0 || month > 12) return 0;		// bounds checking
 80039f2:	1dfb      	adds	r3, r7, #7
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d003      	beq.n	8003a02 <maxDaysInMonth+0x22>
 80039fa:	1dfb      	adds	r3, r7, #7
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	2b0c      	cmp	r3, #12
 8003a00:	d901      	bls.n	8003a06 <maxDaysInMonth+0x26>
 8003a02:	2300      	movs	r3, #0
 8003a04:	e052      	b.n	8003aac <maxDaysInMonth+0xcc>

	// not using built-in defines, because they're in BCD
	if (month == 1  ||		// january
 8003a06:	1dfb      	adds	r3, r7, #7
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d017      	beq.n	8003a3e <maxDaysInMonth+0x5e>
 8003a0e:	1dfb      	adds	r3, r7, #7
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	2b03      	cmp	r3, #3
 8003a14:	d013      	beq.n	8003a3e <maxDaysInMonth+0x5e>
		month == 3  ||		// march
 8003a16:	1dfb      	adds	r3, r7, #7
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	2b05      	cmp	r3, #5
 8003a1c:	d00f      	beq.n	8003a3e <maxDaysInMonth+0x5e>
		month == 5  ||		// may
 8003a1e:	1dfb      	adds	r3, r7, #7
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	2b07      	cmp	r3, #7
 8003a24:	d00b      	beq.n	8003a3e <maxDaysInMonth+0x5e>
		month == 7  ||		// july
 8003a26:	1dfb      	adds	r3, r7, #7
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	2b08      	cmp	r3, #8
 8003a2c:	d007      	beq.n	8003a3e <maxDaysInMonth+0x5e>
		month == 8  ||		// august
 8003a2e:	1dfb      	adds	r3, r7, #7
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	2b0a      	cmp	r3, #10
 8003a34:	d003      	beq.n	8003a3e <maxDaysInMonth+0x5e>
		month == 10 ||		// october
 8003a36:	1dfb      	adds	r3, r7, #7
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	2b0c      	cmp	r3, #12
 8003a3c:	d101      	bne.n	8003a42 <maxDaysInMonth+0x62>
		month == 12) {		// december
		return 31;
 8003a3e:	231f      	movs	r3, #31
 8003a40:	e034      	b.n	8003aac <maxDaysInMonth+0xcc>
	}
	else if (month == 4 ||	// april
 8003a42:	1dfb      	adds	r3, r7, #7
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	2b04      	cmp	r3, #4
 8003a48:	d00b      	beq.n	8003a62 <maxDaysInMonth+0x82>
 8003a4a:	1dfb      	adds	r3, r7, #7
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	2b06      	cmp	r3, #6
 8003a50:	d007      	beq.n	8003a62 <maxDaysInMonth+0x82>
			 month == 6 ||	// june
 8003a52:	1dfb      	adds	r3, r7, #7
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	2b09      	cmp	r3, #9
 8003a58:	d003      	beq.n	8003a62 <maxDaysInMonth+0x82>
			 month == 9 ||	// september
 8003a5a:	1dfb      	adds	r3, r7, #7
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	2b0b      	cmp	r3, #11
 8003a60:	d101      	bne.n	8003a66 <maxDaysInMonth+0x86>
			 month == 11) {	// november
		return 30;
 8003a62:	231e      	movs	r3, #30
 8003a64:	e022      	b.n	8003aac <maxDaysInMonth+0xcc>
	}

	// february/leap year calculator
	// leap year for every 4th year, but every 100th year is not a leap year except on every 400th year
	// ex. 2020 is a leap year, 2100 is not a leap year, 2000 is a leap year.
	else if (year % 400 == 0) return 29;
 8003a66:	1d3b      	adds	r3, r7, #4
 8003a68:	881a      	ldrh	r2, [r3, #0]
 8003a6a:	23c8      	movs	r3, #200	; 0xc8
 8003a6c:	0059      	lsls	r1, r3, #1
 8003a6e:	0010      	movs	r0, r2
 8003a70:	f7fc fbd8 	bl	8000224 <__aeabi_uidivmod>
 8003a74:	000b      	movs	r3, r1
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d101      	bne.n	8003a80 <maxDaysInMonth+0xa0>
 8003a7c:	231d      	movs	r3, #29
 8003a7e:	e015      	b.n	8003aac <maxDaysInMonth+0xcc>
	else if (year % 100 == 0) return 28;
 8003a80:	1d3b      	adds	r3, r7, #4
 8003a82:	881b      	ldrh	r3, [r3, #0]
 8003a84:	2164      	movs	r1, #100	; 0x64
 8003a86:	0018      	movs	r0, r3
 8003a88:	f7fc fbcc 	bl	8000224 <__aeabi_uidivmod>
 8003a8c:	000b      	movs	r3, r1
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d101      	bne.n	8003a98 <maxDaysInMonth+0xb8>
 8003a94:	231c      	movs	r3, #28
 8003a96:	e009      	b.n	8003aac <maxDaysInMonth+0xcc>
	else if (year % 4 == 0) return 29;
 8003a98:	1d3b      	adds	r3, r7, #4
 8003a9a:	881b      	ldrh	r3, [r3, #0]
 8003a9c:	2203      	movs	r2, #3
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <maxDaysInMonth+0xca>
 8003aa6:	231d      	movs	r3, #29
 8003aa8:	e000      	b.n	8003aac <maxDaysInMonth+0xcc>
	else return 28;
 8003aaa:	231c      	movs	r3, #28
}
 8003aac:	0018      	movs	r0, r3
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	b002      	add	sp, #8
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <initFace>:

void initFace() {
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
//	isFaceBeingChanged = 1;
//	faceOnDisplay = faceClock;
	updateFace.clock = 1;
 8003ab8:	4b12      	ldr	r3, [pc, #72]	; (8003b04 <initFace+0x50>)
 8003aba:	2201      	movs	r2, #1
 8003abc:	701a      	strb	r2, [r3, #0]

	clockVars.dateToSet = (struct dates *)calloc(1, sizeof(struct dates *));
 8003abe:	2104      	movs	r1, #4
 8003ac0:	2001      	movs	r0, #1
 8003ac2:	f004 fd89 	bl	80085d8 <calloc>
 8003ac6:	0003      	movs	r3, r0
 8003ac8:	001a      	movs	r2, r3
 8003aca:	4b0f      	ldr	r3, [pc, #60]	; (8003b08 <initFace+0x54>)
 8003acc:	605a      	str	r2, [r3, #4]
	clockVars.timeToSet = (struct times *)calloc(1, sizeof(struct times *));
 8003ace:	2104      	movs	r1, #4
 8003ad0:	2001      	movs	r0, #1
 8003ad2:	f004 fd81 	bl	80085d8 <calloc>
 8003ad6:	0003      	movs	r3, r0
 8003ad8:	001a      	movs	r2, r3
 8003ada:	4b0b      	ldr	r3, [pc, #44]	; (8003b08 <initFace+0x54>)
 8003adc:	609a      	str	r2, [r3, #8]
	timerVars.timeToSet = (struct times *)calloc(1, sizeof(struct times *));
 8003ade:	2104      	movs	r1, #4
 8003ae0:	2001      	movs	r0, #1
 8003ae2:	f004 fd79 	bl	80085d8 <calloc>
 8003ae6:	0003      	movs	r3, r0
 8003ae8:	001a      	movs	r2, r3
 8003aea:	4b08      	ldr	r3, [pc, #32]	; (8003b0c <initFace+0x58>)
 8003aec:	605a      	str	r2, [r3, #4]
	alarmVars.alarmToSet = (struct alarmTimes *)calloc(1, sizeof(struct alarmTimes *));
 8003aee:	2104      	movs	r1, #4
 8003af0:	2001      	movs	r0, #1
 8003af2:	f004 fd71 	bl	80085d8 <calloc>
 8003af6:	0003      	movs	r3, r0
 8003af8:	001a      	movs	r2, r3
 8003afa:	4b05      	ldr	r3, [pc, #20]	; (8003b10 <initFace+0x5c>)
 8003afc:	605a      	str	r2, [r3, #4]
//	struct alarmTimes tempalarm = {0};
//	*clockVars.dateToSet = tempclockdate;
//	*clockVars.timeToSet = tempclocktime;
//	*timerVars.timeToSet = temptimer;
//	*alarmVars.alarmToSet = tempalarm;
}
 8003afe:	46c0      	nop			; (mov r8, r8)
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	20000140 	.word	0x20000140
 8003b08:	200000f0 	.word	0x200000f0
 8003b0c:	200000fc 	.word	0x200000fc
 8003b10:	20000104 	.word	0x20000104

08003b14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b18:	4b07      	ldr	r3, [pc, #28]	; (8003b38 <HAL_MspInit+0x24>)
 8003b1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b1c:	4b06      	ldr	r3, [pc, #24]	; (8003b38 <HAL_MspInit+0x24>)
 8003b1e:	2101      	movs	r1, #1
 8003b20:	430a      	orrs	r2, r1
 8003b22:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b24:	4b04      	ldr	r3, [pc, #16]	; (8003b38 <HAL_MspInit+0x24>)
 8003b26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b28:	4b03      	ldr	r3, [pc, #12]	; (8003b38 <HAL_MspInit+0x24>)
 8003b2a:	2180      	movs	r1, #128	; 0x80
 8003b2c:	0549      	lsls	r1, r1, #21
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b32:	46c0      	nop			; (mov r8, r8)
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	40021000 	.word	0x40021000

08003b3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b088      	sub	sp, #32
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b44:	230c      	movs	r3, #12
 8003b46:	18fb      	adds	r3, r7, r3
 8003b48:	0018      	movs	r0, r3
 8003b4a:	2314      	movs	r3, #20
 8003b4c:	001a      	movs	r2, r3
 8003b4e:	2100      	movs	r1, #0
 8003b50:	f004 fd7f 	bl	8008652 <memset>
  if(hadc->Instance==ADC1)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a15      	ldr	r2, [pc, #84]	; (8003bb0 <HAL_ADC_MspInit+0x74>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d123      	bne.n	8003ba6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003b5e:	4b15      	ldr	r3, [pc, #84]	; (8003bb4 <HAL_ADC_MspInit+0x78>)
 8003b60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b62:	4b14      	ldr	r3, [pc, #80]	; (8003bb4 <HAL_ADC_MspInit+0x78>)
 8003b64:	2180      	movs	r1, #128	; 0x80
 8003b66:	0089      	lsls	r1, r1, #2
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b6c:	4b11      	ldr	r3, [pc, #68]	; (8003bb4 <HAL_ADC_MspInit+0x78>)
 8003b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b70:	4b10      	ldr	r3, [pc, #64]	; (8003bb4 <HAL_ADC_MspInit+0x78>)
 8003b72:	2101      	movs	r1, #1
 8003b74:	430a      	orrs	r2, r1
 8003b76:	62da      	str	r2, [r3, #44]	; 0x2c
 8003b78:	4b0e      	ldr	r3, [pc, #56]	; (8003bb4 <HAL_ADC_MspInit+0x78>)
 8003b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	4013      	ands	r3, r2
 8003b80:	60bb      	str	r3, [r7, #8]
 8003b82:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration    
    PA0     ------> ADC_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003b84:	210c      	movs	r1, #12
 8003b86:	187b      	adds	r3, r7, r1
 8003b88:	2201      	movs	r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b8c:	187b      	adds	r3, r7, r1
 8003b8e:	2203      	movs	r2, #3
 8003b90:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b92:	187b      	adds	r3, r7, r1
 8003b94:	2200      	movs	r2, #0
 8003b96:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b98:	187a      	adds	r2, r7, r1
 8003b9a:	23a0      	movs	r3, #160	; 0xa0
 8003b9c:	05db      	lsls	r3, r3, #23
 8003b9e:	0011      	movs	r1, r2
 8003ba0:	0018      	movs	r0, r3
 8003ba2:	f001 f9c7 	bl	8004f34 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003ba6:	46c0      	nop			; (mov r8, r8)
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	b008      	add	sp, #32
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	46c0      	nop			; (mov r8, r8)
 8003bb0:	40012400 	.word	0x40012400
 8003bb4:	40021000 	.word	0x40021000

08003bb8 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  if(hlptim->Instance==LPTIM1)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a0a      	ldr	r2, [pc, #40]	; (8003bf0 <HAL_LPTIM_MspInit+0x38>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d10e      	bne.n	8003be8 <HAL_LPTIM_MspInit+0x30>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8003bca:	4b0a      	ldr	r3, [pc, #40]	; (8003bf4 <HAL_LPTIM_MspInit+0x3c>)
 8003bcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bce:	4b09      	ldr	r3, [pc, #36]	; (8003bf4 <HAL_LPTIM_MspInit+0x3c>)
 8003bd0:	2180      	movs	r1, #128	; 0x80
 8003bd2:	0609      	lsls	r1, r1, #24
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	639a      	str	r2, [r3, #56]	; 0x38
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8003bd8:	2200      	movs	r2, #0
 8003bda:	2100      	movs	r1, #0
 8003bdc:	200d      	movs	r0, #13
 8003bde:	f000 ffe9 	bl	8004bb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8003be2:	200d      	movs	r0, #13
 8003be4:	f000 fffb 	bl	8004bde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8003be8:	46c0      	nop			; (mov r8, r8)
 8003bea:	46bd      	mov	sp, r7
 8003bec:	b002      	add	sp, #8
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	40007c00 	.word	0x40007c00
 8003bf4:	40021000 	.word	0x40021000

08003bf8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a0a      	ldr	r2, [pc, #40]	; (8003c30 <HAL_RTC_MspInit+0x38>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d10e      	bne.n	8003c28 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003c0a:	4b0a      	ldr	r3, [pc, #40]	; (8003c34 <HAL_RTC_MspInit+0x3c>)
 8003c0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c0e:	4b09      	ldr	r3, [pc, #36]	; (8003c34 <HAL_RTC_MspInit+0x3c>)
 8003c10:	2180      	movs	r1, #128	; 0x80
 8003c12:	02c9      	lsls	r1, r1, #11
 8003c14:	430a      	orrs	r2, r1
 8003c16:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8003c18:	2200      	movs	r2, #0
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	2002      	movs	r0, #2
 8003c1e:	f000 ffc9 	bl	8004bb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8003c22:	2002      	movs	r0, #2
 8003c24:	f000 ffdb 	bl	8004bde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003c28:	46c0      	nop			; (mov r8, r8)
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	b002      	add	sp, #8
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	40002800 	.word	0x40002800
 8003c34:	40021000 	.word	0x40021000

08003c38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b088      	sub	sp, #32
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c40:	230c      	movs	r3, #12
 8003c42:	18fb      	adds	r3, r7, r3
 8003c44:	0018      	movs	r0, r3
 8003c46:	2314      	movs	r3, #20
 8003c48:	001a      	movs	r2, r3
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	f004 fd01 	bl	8008652 <memset>
  if(hspi->Instance==SPI1)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a30      	ldr	r2, [pc, #192]	; (8003d18 <HAL_SPI_MspInit+0xe0>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d15a      	bne.n	8003d10 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003c5a:	4b30      	ldr	r3, [pc, #192]	; (8003d1c <HAL_SPI_MspInit+0xe4>)
 8003c5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c5e:	4b2f      	ldr	r3, [pc, #188]	; (8003d1c <HAL_SPI_MspInit+0xe4>)
 8003c60:	2180      	movs	r1, #128	; 0x80
 8003c62:	0149      	lsls	r1, r1, #5
 8003c64:	430a      	orrs	r2, r1
 8003c66:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c68:	4b2c      	ldr	r3, [pc, #176]	; (8003d1c <HAL_SPI_MspInit+0xe4>)
 8003c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c6c:	4b2b      	ldr	r3, [pc, #172]	; (8003d1c <HAL_SPI_MspInit+0xe4>)
 8003c6e:	2101      	movs	r1, #1
 8003c70:	430a      	orrs	r2, r1
 8003c72:	62da      	str	r2, [r3, #44]	; 0x2c
 8003c74:	4b29      	ldr	r3, [pc, #164]	; (8003d1c <HAL_SPI_MspInit+0xe4>)
 8003c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c78:	2201      	movs	r2, #1
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	60bb      	str	r3, [r7, #8]
 8003c7e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003c80:	210c      	movs	r1, #12
 8003c82:	187b      	adds	r3, r7, r1
 8003c84:	22a0      	movs	r2, #160	; 0xa0
 8003c86:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c88:	187b      	adds	r3, r7, r1
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c8e:	187b      	adds	r3, r7, r1
 8003c90:	2200      	movs	r2, #0
 8003c92:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c94:	187b      	adds	r3, r7, r1
 8003c96:	2203      	movs	r2, #3
 8003c98:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003c9a:	187b      	adds	r3, r7, r1
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ca0:	187a      	adds	r2, r7, r1
 8003ca2:	23a0      	movs	r3, #160	; 0xa0
 8003ca4:	05db      	lsls	r3, r3, #23
 8003ca6:	0011      	movs	r1, r2
 8003ca8:	0018      	movs	r0, r3
 8003caa:	f001 f943 	bl	8004f34 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8003cae:	4b1c      	ldr	r3, [pc, #112]	; (8003d20 <HAL_SPI_MspInit+0xe8>)
 8003cb0:	4a1c      	ldr	r2, [pc, #112]	; (8003d24 <HAL_SPI_MspInit+0xec>)
 8003cb2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8003cb4:	4b1a      	ldr	r3, [pc, #104]	; (8003d20 <HAL_SPI_MspInit+0xe8>)
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003cba:	4b19      	ldr	r3, [pc, #100]	; (8003d20 <HAL_SPI_MspInit+0xe8>)
 8003cbc:	2210      	movs	r2, #16
 8003cbe:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cc0:	4b17      	ldr	r3, [pc, #92]	; (8003d20 <HAL_SPI_MspInit+0xe8>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003cc6:	4b16      	ldr	r3, [pc, #88]	; (8003d20 <HAL_SPI_MspInit+0xe8>)
 8003cc8:	2280      	movs	r2, #128	; 0x80
 8003cca:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ccc:	4b14      	ldr	r3, [pc, #80]	; (8003d20 <HAL_SPI_MspInit+0xe8>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003cd2:	4b13      	ldr	r3, [pc, #76]	; (8003d20 <HAL_SPI_MspInit+0xe8>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003cd8:	4b11      	ldr	r3, [pc, #68]	; (8003d20 <HAL_SPI_MspInit+0xe8>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003cde:	4b10      	ldr	r3, [pc, #64]	; (8003d20 <HAL_SPI_MspInit+0xe8>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003ce4:	4b0e      	ldr	r3, [pc, #56]	; (8003d20 <HAL_SPI_MspInit+0xe8>)
 8003ce6:	0018      	movs	r0, r3
 8003ce8:	f000 ffb6 	bl	8004c58 <HAL_DMA_Init>
 8003cec:	1e03      	subs	r3, r0, #0
 8003cee:	d001      	beq.n	8003cf4 <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 8003cf0:	f7fe fc32 	bl	8002558 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a0a      	ldr	r2, [pc, #40]	; (8003d20 <HAL_SPI_MspInit+0xe8>)
 8003cf8:	649a      	str	r2, [r3, #72]	; 0x48
 8003cfa:	4b09      	ldr	r3, [pc, #36]	; (8003d20 <HAL_SPI_MspInit+0xe8>)
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003d00:	2200      	movs	r2, #0
 8003d02:	2100      	movs	r1, #0
 8003d04:	2019      	movs	r0, #25
 8003d06:	f000 ff55 	bl	8004bb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003d0a:	2019      	movs	r0, #25
 8003d0c:	f000 ff67 	bl	8004bde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003d10:	46c0      	nop			; (mov r8, r8)
 8003d12:	46bd      	mov	sp, r7
 8003d14:	b008      	add	sp, #32
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	40013000 	.word	0x40013000
 8003d1c:	40021000 	.word	0x40021000
 8003d20:	20000320 	.word	0x20000320
 8003d24:	40020030 	.word	0x40020030

08003d28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	2380      	movs	r3, #128	; 0x80
 8003d36:	05db      	lsls	r3, r3, #23
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d10e      	bne.n	8003d5a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d3c:	4b26      	ldr	r3, [pc, #152]	; (8003dd8 <HAL_TIM_Base_MspInit+0xb0>)
 8003d3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d40:	4b25      	ldr	r3, [pc, #148]	; (8003dd8 <HAL_TIM_Base_MspInit+0xb0>)
 8003d42:	2101      	movs	r1, #1
 8003d44:	430a      	orrs	r2, r1
 8003d46:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003d48:	2200      	movs	r2, #0
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	200f      	movs	r0, #15
 8003d4e:	f000 ff31 	bl	8004bb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003d52:	200f      	movs	r0, #15
 8003d54:	f000 ff43 	bl	8004bde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }

}
 8003d58:	e03a      	b.n	8003dd0 <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM6)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a1f      	ldr	r2, [pc, #124]	; (8003ddc <HAL_TIM_Base_MspInit+0xb4>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d10e      	bne.n	8003d82 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003d64:	4b1c      	ldr	r3, [pc, #112]	; (8003dd8 <HAL_TIM_Base_MspInit+0xb0>)
 8003d66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d68:	4b1b      	ldr	r3, [pc, #108]	; (8003dd8 <HAL_TIM_Base_MspInit+0xb0>)
 8003d6a:	2110      	movs	r1, #16
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003d70:	2200      	movs	r2, #0
 8003d72:	2100      	movs	r1, #0
 8003d74:	2011      	movs	r0, #17
 8003d76:	f000 ff1d 	bl	8004bb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003d7a:	2011      	movs	r0, #17
 8003d7c:	f000 ff2f 	bl	8004bde <HAL_NVIC_EnableIRQ>
}
 8003d80:	e026      	b.n	8003dd0 <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM21)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a16      	ldr	r2, [pc, #88]	; (8003de0 <HAL_TIM_Base_MspInit+0xb8>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d10e      	bne.n	8003daa <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8003d8c:	4b12      	ldr	r3, [pc, #72]	; (8003dd8 <HAL_TIM_Base_MspInit+0xb0>)
 8003d8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d90:	4b11      	ldr	r3, [pc, #68]	; (8003dd8 <HAL_TIM_Base_MspInit+0xb0>)
 8003d92:	2104      	movs	r1, #4
 8003d94:	430a      	orrs	r2, r1
 8003d96:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 8003d98:	2200      	movs	r2, #0
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	2014      	movs	r0, #20
 8003d9e:	f000 ff09 	bl	8004bb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8003da2:	2014      	movs	r0, #20
 8003da4:	f000 ff1b 	bl	8004bde <HAL_NVIC_EnableIRQ>
}
 8003da8:	e012      	b.n	8003dd0 <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM22)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a0d      	ldr	r2, [pc, #52]	; (8003de4 <HAL_TIM_Base_MspInit+0xbc>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d10d      	bne.n	8003dd0 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM22_CLK_ENABLE();
 8003db4:	4b08      	ldr	r3, [pc, #32]	; (8003dd8 <HAL_TIM_Base_MspInit+0xb0>)
 8003db6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003db8:	4b07      	ldr	r3, [pc, #28]	; (8003dd8 <HAL_TIM_Base_MspInit+0xb0>)
 8003dba:	2120      	movs	r1, #32
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM22_IRQn, 0, 0);
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	2016      	movs	r0, #22
 8003dc6:	f000 fef5 	bl	8004bb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM22_IRQn);
 8003dca:	2016      	movs	r0, #22
 8003dcc:	f000 ff07 	bl	8004bde <HAL_NVIC_EnableIRQ>
}
 8003dd0:	46c0      	nop			; (mov r8, r8)
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	b002      	add	sp, #8
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	40021000 	.word	0x40021000
 8003ddc:	40001000 	.word	0x40001000
 8003de0:	40010800 	.word	0x40010800
 8003de4:	40011400 	.word	0x40011400

08003de8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b088      	sub	sp, #32
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003df0:	230c      	movs	r3, #12
 8003df2:	18fb      	adds	r3, r7, r3
 8003df4:	0018      	movs	r0, r3
 8003df6:	2314      	movs	r3, #20
 8003df8:	001a      	movs	r2, r3
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	f004 fc29 	bl	8008652 <memset>
  if(htim->Instance==TIM2)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	2380      	movs	r3, #128	; 0x80
 8003e06:	05db      	lsls	r3, r3, #23
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d123      	bne.n	8003e54 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e0c:	4b13      	ldr	r3, [pc, #76]	; (8003e5c <HAL_TIM_MspPostInit+0x74>)
 8003e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e10:	4b12      	ldr	r3, [pc, #72]	; (8003e5c <HAL_TIM_MspPostInit+0x74>)
 8003e12:	2101      	movs	r1, #1
 8003e14:	430a      	orrs	r2, r1
 8003e16:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e18:	4b10      	ldr	r3, [pc, #64]	; (8003e5c <HAL_TIM_MspPostInit+0x74>)
 8003e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	4013      	ands	r3, r2
 8003e20:	60bb      	str	r3, [r7, #8]
 8003e22:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003e24:	210c      	movs	r1, #12
 8003e26:	187b      	adds	r3, r7, r1
 8003e28:	2280      	movs	r2, #128	; 0x80
 8003e2a:	0212      	lsls	r2, r2, #8
 8003e2c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e2e:	187b      	adds	r3, r7, r1
 8003e30:	2202      	movs	r2, #2
 8003e32:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e34:	187b      	adds	r3, r7, r1
 8003e36:	2200      	movs	r2, #0
 8003e38:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e3a:	187b      	adds	r3, r7, r1
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM2;
 8003e40:	187b      	adds	r3, r7, r1
 8003e42:	2205      	movs	r2, #5
 8003e44:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e46:	187a      	adds	r2, r7, r1
 8003e48:	23a0      	movs	r3, #160	; 0xa0
 8003e4a:	05db      	lsls	r3, r3, #23
 8003e4c:	0011      	movs	r1, r2
 8003e4e:	0018      	movs	r0, r3
 8003e50:	f001 f870 	bl	8004f34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003e54:	46c0      	nop			; (mov r8, r8)
 8003e56:	46bd      	mov	sp, r7
 8003e58:	b008      	add	sp, #32
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	40021000 	.word	0x40021000

08003e60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003e64:	46c0      	nop			; (mov r8, r8)
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e6e:	e7fe      	b.n	8003e6e <HardFault_Handler+0x4>

08003e70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003e74:	46c0      	nop			; (mov r8, r8)
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e7e:	46c0      	nop			; (mov r8, r8)
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e88:	f000 fb56 	bl	8004538 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e8c:	46c0      	nop			; (mov r8, r8)
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
	...

08003e94 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003e98:	4b03      	ldr	r3, [pc, #12]	; (8003ea8 <RTC_IRQHandler+0x14>)
 8003e9a:	0018      	movs	r0, r3
 8003e9c:	f002 ff30 	bl	8006d00 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8003ea0:	46c0      	nop			; (mov r8, r8)
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	46c0      	nop			; (mov r8, r8)
 8003ea8:	2000020c 	.word	0x2000020c

08003eac <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003eb0:	2004      	movs	r0, #4
 8003eb2:	f001 fa09 	bl	80052c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8003eb6:	46c0      	nop			; (mov r8, r8)
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003ec0:	2380      	movs	r3, #128	; 0x80
 8003ec2:	019b      	lsls	r3, r3, #6
 8003ec4:	0018      	movs	r0, r3
 8003ec6:	f001 f9ff 	bl	80052c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003eca:	2380      	movs	r3, #128	; 0x80
 8003ecc:	01db      	lsls	r3, r3, #7
 8003ece:	0018      	movs	r0, r3
 8003ed0:	f001 f9fa 	bl	80052c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003ed4:	2380      	movs	r3, #128	; 0x80
 8003ed6:	021b      	lsls	r3, r3, #8
 8003ed8:	0018      	movs	r0, r3
 8003eda:	f001 f9f5 	bl	80052c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003ede:	46c0      	nop			; (mov r8, r8)
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003ee8:	4b03      	ldr	r3, [pc, #12]	; (8003ef8 <DMA1_Channel2_3_IRQHandler+0x14>)
 8003eea:	0018      	movs	r0, r3
 8003eec:	f000 ff74 	bl	8004dd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8003ef0:	46c0      	nop			; (mov r8, r8)
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	46c0      	nop			; (mov r8, r8)
 8003ef8:	20000320 	.word	0x20000320

08003efc <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8003f00:	4b03      	ldr	r3, [pc, #12]	; (8003f10 <LPTIM1_IRQHandler+0x14>)
 8003f02:	0018      	movs	r0, r3
 8003f04:	f001 fa7c 	bl	8005400 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8003f08:	46c0      	nop			; (mov r8, r8)
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	46c0      	nop			; (mov r8, r8)
 8003f10:	200001dc 	.word	0x200001dc

08003f14 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003f18:	4b03      	ldr	r3, [pc, #12]	; (8003f28 <TIM2_IRQHandler+0x14>)
 8003f1a:	0018      	movs	r0, r3
 8003f1c:	f003 fe18 	bl	8007b50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003f20:	46c0      	nop			; (mov r8, r8)
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	46c0      	nop			; (mov r8, r8)
 8003f28:	20000288 	.word	0x20000288

08003f2c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003f30:	4b03      	ldr	r3, [pc, #12]	; (8003f40 <TIM6_DAC_IRQHandler+0x14>)
 8003f32:	0018      	movs	r0, r3
 8003f34:	f003 fe0c 	bl	8007b50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003f38:	46c0      	nop			; (mov r8, r8)
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	46c0      	nop			; (mov r8, r8)
 8003f40:	20000150 	.word	0x20000150

08003f44 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8003f48:	4b03      	ldr	r3, [pc, #12]	; (8003f58 <TIM21_IRQHandler+0x14>)
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	f003 fe00 	bl	8007b50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8003f50:	46c0      	nop			; (mov r8, r8)
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	46c0      	nop			; (mov r8, r8)
 8003f58:	20000368 	.word	0x20000368

08003f5c <TIM22_IRQHandler>:

/**
  * @brief This function handles TIM22 global interrupt.
  */
void TIM22_IRQHandler(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM22_IRQn 0 */

  /* USER CODE END TIM22_IRQn 0 */
  HAL_TIM_IRQHandler(&htim22);
 8003f60:	4b03      	ldr	r3, [pc, #12]	; (8003f70 <TIM22_IRQHandler+0x14>)
 8003f62:	0018      	movs	r0, r3
 8003f64:	f003 fdf4 	bl	8007b50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM22_IRQn 1 */

  /* USER CODE END TIM22_IRQn 1 */
}
 8003f68:	46c0      	nop			; (mov r8, r8)
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	46c0      	nop			; (mov r8, r8)
 8003f70:	200001a0 	.word	0x200001a0

08003f74 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003f78:	4b03      	ldr	r3, [pc, #12]	; (8003f88 <SPI1_IRQHandler+0x14>)
 8003f7a:	0018      	movs	r0, r3
 8003f7c:	f003 f9ec 	bl	8007358 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003f80:	46c0      	nop			; (mov r8, r8)
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	46c0      	nop			; (mov r8, r8)
 8003f88:	20000230 	.word	0x20000230

08003f8c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003f94:	4b11      	ldr	r3, [pc, #68]	; (8003fdc <_sbrk+0x50>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d102      	bne.n	8003fa2 <_sbrk+0x16>
		heap_end = &end;
 8003f9c:	4b0f      	ldr	r3, [pc, #60]	; (8003fdc <_sbrk+0x50>)
 8003f9e:	4a10      	ldr	r2, [pc, #64]	; (8003fe0 <_sbrk+0x54>)
 8003fa0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003fa2:	4b0e      	ldr	r3, [pc, #56]	; (8003fdc <_sbrk+0x50>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003fa8:	4b0c      	ldr	r3, [pc, #48]	; (8003fdc <_sbrk+0x50>)
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	18d3      	adds	r3, r2, r3
 8003fb0:	466a      	mov	r2, sp
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d907      	bls.n	8003fc6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003fb6:	f004 fb19 	bl	80085ec <__errno>
 8003fba:	0003      	movs	r3, r0
 8003fbc:	220c      	movs	r2, #12
 8003fbe:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	425b      	negs	r3, r3
 8003fc4:	e006      	b.n	8003fd4 <_sbrk+0x48>
	}

	heap_end += incr;
 8003fc6:	4b05      	ldr	r3, [pc, #20]	; (8003fdc <_sbrk+0x50>)
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	18d2      	adds	r2, r2, r3
 8003fce:	4b03      	ldr	r3, [pc, #12]	; (8003fdc <_sbrk+0x50>)
 8003fd0:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
}
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	b004      	add	sp, #16
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	20000118 	.word	0x20000118
 8003fe0:	200003b0 	.word	0x200003b0

08003fe4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8003fe8:	4b17      	ldr	r3, [pc, #92]	; (8004048 <SystemInit+0x64>)
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	4b16      	ldr	r3, [pc, #88]	; (8004048 <SystemInit+0x64>)
 8003fee:	2180      	movs	r1, #128	; 0x80
 8003ff0:	0049      	lsls	r1, r1, #1
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8003ff6:	4b14      	ldr	r3, [pc, #80]	; (8004048 <SystemInit+0x64>)
 8003ff8:	68da      	ldr	r2, [r3, #12]
 8003ffa:	4b13      	ldr	r3, [pc, #76]	; (8004048 <SystemInit+0x64>)
 8003ffc:	4913      	ldr	r1, [pc, #76]	; (800404c <SystemInit+0x68>)
 8003ffe:	400a      	ands	r2, r1
 8004000:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8004002:	4b11      	ldr	r3, [pc, #68]	; (8004048 <SystemInit+0x64>)
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	4b10      	ldr	r3, [pc, #64]	; (8004048 <SystemInit+0x64>)
 8004008:	4911      	ldr	r1, [pc, #68]	; (8004050 <SystemInit+0x6c>)
 800400a:	400a      	ands	r2, r1
 800400c:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800400e:	4b0e      	ldr	r3, [pc, #56]	; (8004048 <SystemInit+0x64>)
 8004010:	689a      	ldr	r2, [r3, #8]
 8004012:	4b0d      	ldr	r3, [pc, #52]	; (8004048 <SystemInit+0x64>)
 8004014:	2101      	movs	r1, #1
 8004016:	438a      	bics	r2, r1
 8004018:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800401a:	4b0b      	ldr	r3, [pc, #44]	; (8004048 <SystemInit+0x64>)
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	4b0a      	ldr	r3, [pc, #40]	; (8004048 <SystemInit+0x64>)
 8004020:	490c      	ldr	r1, [pc, #48]	; (8004054 <SystemInit+0x70>)
 8004022:	400a      	ands	r2, r1
 8004024:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8004026:	4b08      	ldr	r3, [pc, #32]	; (8004048 <SystemInit+0x64>)
 8004028:	68da      	ldr	r2, [r3, #12]
 800402a:	4b07      	ldr	r3, [pc, #28]	; (8004048 <SystemInit+0x64>)
 800402c:	490a      	ldr	r1, [pc, #40]	; (8004058 <SystemInit+0x74>)
 800402e:	400a      	ands	r2, r1
 8004030:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004032:	4b05      	ldr	r3, [pc, #20]	; (8004048 <SystemInit+0x64>)
 8004034:	2200      	movs	r2, #0
 8004036:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004038:	4b08      	ldr	r3, [pc, #32]	; (800405c <SystemInit+0x78>)
 800403a:	2280      	movs	r2, #128	; 0x80
 800403c:	0512      	lsls	r2, r2, #20
 800403e:	609a      	str	r2, [r3, #8]
#endif
}
 8004040:	46c0      	nop			; (mov r8, r8)
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	46c0      	nop			; (mov r8, r8)
 8004048:	40021000 	.word	0x40021000
 800404c:	88ff400c 	.word	0x88ff400c
 8004050:	fef6fff6 	.word	0xfef6fff6
 8004054:	fffbffff 	.word	0xfffbffff
 8004058:	ff02ffff 	.word	0xff02ffff
 800405c:	e000ed00 	.word	0xe000ed00

08004060 <HAL_TIM_PeriodElapsedCallback>:
static uint32_t stopwatchPauseMarker = 0;
static uint8_t isMotorRunning = 0;
static uint8_t motorStateCounter = 0;

// important boye that is called for a bunch of different timers
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
	// button's timer
	if (htim->Instance == TIM6) {
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a39      	ldr	r2, [pc, #228]	; (8004154 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d11f      	bne.n	80040b2 <HAL_TIM_PeriodElapsedCallback+0x52>
		// renable button interrupts and clear pending
		HAL_TIM_Base_Stop_IT(htim);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	0018      	movs	r0, r3
 8004076:	f003 fc3d 	bl	80078f4 <HAL_TIM_Base_Stop_IT>
		HAL_NVIC_ClearPendingIRQ(EXTI2_3_IRQn);
 800407a:	2006      	movs	r0, #6
 800407c:	f000 fddc 	bl	8004c38 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(EXTI4_15_IRQn);
 8004080:	2007      	movs	r0, #7
 8004082:	f000 fdd9 	bl	8004c38 <HAL_NVIC_ClearPendingIRQ>
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON1);
 8004086:	4b34      	ldr	r3, [pc, #208]	; (8004158 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8004088:	2204      	movs	r2, #4
 800408a:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON2);
 800408c:	4b32      	ldr	r3, [pc, #200]	; (8004158 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800408e:	2280      	movs	r2, #128	; 0x80
 8004090:	0192      	lsls	r2, r2, #6
 8004092:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON3);
 8004094:	4b30      	ldr	r3, [pc, #192]	; (8004158 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8004096:	2280      	movs	r2, #128	; 0x80
 8004098:	01d2      	lsls	r2, r2, #7
 800409a:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON4);
 800409c:	4b2e      	ldr	r3, [pc, #184]	; (8004158 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800409e:	2280      	movs	r2, #128	; 0x80
 80040a0:	0212      	lsls	r2, r2, #8
 80040a2:	615a      	str	r2, [r3, #20]

		HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80040a4:	2006      	movs	r0, #6
 80040a6:	f000 fd9a 	bl	8004bde <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80040aa:	2007      	movs	r0, #7
 80040ac:	f000 fd97 	bl	8004bde <HAL_NVIC_EnableIRQ>
	}
	// sampler's timer
	else if (htim->Instance == TIM22) {
//		canSampleADC = 1;
	}
}
 80040b0:	e04b      	b.n	800414a <HAL_TIM_PeriodElapsedCallback+0xea>
	else if (htim->Instance == TIM2) {
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	2380      	movs	r3, #128	; 0x80
 80040b8:	05db      	lsls	r3, r3, #23
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d145      	bne.n	800414a <HAL_TIM_PeriodElapsedCallback+0xea>
		if (motorStateCounter == 5) {
 80040be:	4b27      	ldr	r3, [pc, #156]	; (800415c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	2b05      	cmp	r3, #5
 80040c4:	d10b      	bne.n	80040de <HAL_TIM_PeriodElapsedCallback+0x7e>
			isMotorRunning = 0;
 80040c6:	4b26      	ldr	r3, [pc, #152]	; (8004160 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	701a      	strb	r2, [r3, #0]
			motorStateCounter = 0;
 80040cc:	4b23      	ldr	r3, [pc, #140]	; (800415c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_RESET);
 80040d2:	4b24      	ldr	r3, [pc, #144]	; (8004164 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80040d4:	2200      	movs	r2, #0
 80040d6:	2101      	movs	r1, #1
 80040d8:	0018      	movs	r0, r3
 80040da:	f001 f8c6 	bl	800526a <HAL_GPIO_WritePin>
		if (isMotorRunning) {
 80040de:	4b20      	ldr	r3, [pc, #128]	; (8004160 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d031      	beq.n	800414a <HAL_TIM_PeriodElapsedCallback+0xea>
			switch(motorStateCounter) {
 80040e6:	4b1d      	ldr	r3, [pc, #116]	; (800415c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	2b04      	cmp	r3, #4
 80040ec:	d827      	bhi.n	800413e <HAL_TIM_PeriodElapsedCallback+0xde>
 80040ee:	009a      	lsls	r2, r3, #2
 80040f0:	4b1d      	ldr	r3, [pc, #116]	; (8004168 <HAL_TIM_PeriodElapsedCallback+0x108>)
 80040f2:	18d3      	adds	r3, r2, r3
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	469f      	mov	pc, r3
				case 0: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET); break;
 80040f8:	4b1a      	ldr	r3, [pc, #104]	; (8004164 <HAL_TIM_PeriodElapsedCallback+0x104>)
 80040fa:	2201      	movs	r2, #1
 80040fc:	2101      	movs	r1, #1
 80040fe:	0018      	movs	r0, r3
 8004100:	f001 f8b3 	bl	800526a <HAL_GPIO_WritePin>
 8004104:	e01b      	b.n	800413e <HAL_TIM_PeriodElapsedCallback+0xde>
				case 1: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_RESET); break;
 8004106:	4b17      	ldr	r3, [pc, #92]	; (8004164 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8004108:	2200      	movs	r2, #0
 800410a:	2101      	movs	r1, #1
 800410c:	0018      	movs	r0, r3
 800410e:	f001 f8ac 	bl	800526a <HAL_GPIO_WritePin>
 8004112:	e014      	b.n	800413e <HAL_TIM_PeriodElapsedCallback+0xde>
				case 2: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET); break;
 8004114:	4b13      	ldr	r3, [pc, #76]	; (8004164 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8004116:	2201      	movs	r2, #1
 8004118:	2101      	movs	r1, #1
 800411a:	0018      	movs	r0, r3
 800411c:	f001 f8a5 	bl	800526a <HAL_GPIO_WritePin>
 8004120:	e00d      	b.n	800413e <HAL_TIM_PeriodElapsedCallback+0xde>
				case 3: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_RESET); break;
 8004122:	4b10      	ldr	r3, [pc, #64]	; (8004164 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8004124:	2200      	movs	r2, #0
 8004126:	2101      	movs	r1, #1
 8004128:	0018      	movs	r0, r3
 800412a:	f001 f89e 	bl	800526a <HAL_GPIO_WritePin>
 800412e:	e006      	b.n	800413e <HAL_TIM_PeriodElapsedCallback+0xde>
				case 4: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET); break;
 8004130:	4b0c      	ldr	r3, [pc, #48]	; (8004164 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8004132:	2201      	movs	r2, #1
 8004134:	2101      	movs	r1, #1
 8004136:	0018      	movs	r0, r3
 8004138:	f001 f897 	bl	800526a <HAL_GPIO_WritePin>
 800413c:	46c0      	nop			; (mov r8, r8)
			++motorStateCounter;
 800413e:	4b07      	ldr	r3, [pc, #28]	; (800415c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	3301      	adds	r3, #1
 8004144:	b2da      	uxtb	r2, r3
 8004146:	4b05      	ldr	r3, [pc, #20]	; (800415c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8004148:	701a      	strb	r2, [r3, #0]
}
 800414a:	46c0      	nop			; (mov r8, r8)
 800414c:	46bd      	mov	sp, r7
 800414e:	b002      	add	sp, #8
 8004150:	bd80      	pop	{r7, pc}
 8004152:	46c0      	nop			; (mov r8, r8)
 8004154:	40001000 	.word	0x40001000
 8004158:	40010400 	.word	0x40010400
 800415c:	2000012d 	.word	0x2000012d
 8004160:	2000012c 	.word	0x2000012c
 8004164:	50000400 	.word	0x50000400
 8004168:	08009650 	.word	0x08009650

0800416c <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM21) {
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a1a      	ldr	r2, [pc, #104]	; (80041e4 <HAL_TIM_OC_DelayElapsedCallback+0x78>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d129      	bne.n	80041d2 <HAL_TIM_OC_DelayElapsedCallback+0x66>
		// timer's channel
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	7e1b      	ldrb	r3, [r3, #24]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d119      	bne.n	80041ba <HAL_TIM_OC_DelayElapsedCallback+0x4e>
			updateFace.timer = 1;
 8004186:	4b18      	ldr	r3, [pc, #96]	; (80041e8 <HAL_TIM_OC_DelayElapsedCallback+0x7c>)
 8004188:	2201      	movs	r2, #1
 800418a:	705a      	strb	r2, [r3, #1]
			if (timerCounter != 1) --timerCounter;
 800418c:	4b17      	ldr	r3, [pc, #92]	; (80041ec <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d005      	beq.n	80041a0 <HAL_TIM_OC_DelayElapsedCallback+0x34>
 8004194:	4b15      	ldr	r3, [pc, #84]	; (80041ec <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	1e5a      	subs	r2, r3, #1
 800419a:	4b14      	ldr	r3, [pc, #80]	; (80041ec <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 800419c:	601a      	str	r2, [r3, #0]
 800419e:	e018      	b.n	80041d2 <HAL_TIM_OC_DelayElapsedCallback+0x66>
			else {
				--timerCounter;
 80041a0:	4b12      	ldr	r3, [pc, #72]	; (80041ec <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	1e5a      	subs	r2, r3, #1
 80041a6:	4b11      	ldr	r3, [pc, #68]	; (80041ec <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 80041a8:	601a      	str	r2, [r3, #0]
				isTimerRunning = 0;
 80041aa:	4b11      	ldr	r3, [pc, #68]	; (80041f0 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 80041ac:	2200      	movs	r2, #0
 80041ae:	701a      	strb	r2, [r3, #0]
				stopTimer(htim);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	0018      	movs	r0, r3
 80041b4:	f000 f892 	bl	80042dc <stopTimer>
 80041b8:	e00b      	b.n	80041d2 <HAL_TIM_OC_DelayElapsedCallback+0x66>
			}
		}
		// stopwatch's channel
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	7e1b      	ldrb	r3, [r3, #24]
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d107      	bne.n	80041d2 <HAL_TIM_OC_DelayElapsedCallback+0x66>
			updateFace.stopwatch = 1;
 80041c2:	4b09      	ldr	r3, [pc, #36]	; (80041e8 <HAL_TIM_OC_DelayElapsedCallback+0x7c>)
 80041c4:	2201      	movs	r2, #1
 80041c6:	70da      	strb	r2, [r3, #3]
			++stopwatchCounter;
 80041c8:	4b0a      	ldr	r3, [pc, #40]	; (80041f4 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	1c5a      	adds	r2, r3, #1
 80041ce:	4b09      	ldr	r3, [pc, #36]	; (80041f4 <HAL_TIM_OC_DelayElapsedCallback+0x88>)
 80041d0:	601a      	str	r2, [r3, #0]
		}
	}
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 80041d2:	4b09      	ldr	r3, [pc, #36]	; (80041f8 <HAL_TIM_OC_DelayElapsedCallback+0x8c>)
 80041d4:	2102      	movs	r1, #2
 80041d6:	0018      	movs	r0, r3
 80041d8:	f001 f864 	bl	80052a4 <HAL_GPIO_TogglePin>
}
 80041dc:	46c0      	nop			; (mov r8, r8)
 80041de:	46bd      	mov	sp, r7
 80041e0:	b002      	add	sp, #8
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	40010800 	.word	0x40010800
 80041e8:	20000140 	.word	0x20000140
 80041ec:	20000148 	.word	0x20000148
 80041f0:	20000190 	.word	0x20000190
 80041f4:	2000019c 	.word	0x2000019c
 80041f8:	50000800 	.word	0x50000800

080041fc <runTimer>:

// ---- important timer functions  ----
void runTimer(TIM_HandleTypeDef *htim) {
 80041fc:	b590      	push	{r4, r7, lr}
 80041fe:	b089      	sub	sp, #36	; 0x24
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef sConfig = {0};
 8004204:	2408      	movs	r4, #8
 8004206:	193b      	adds	r3, r7, r4
 8004208:	0018      	movs	r0, r3
 800420a:	2310      	movs	r3, #16
 800420c:	001a      	movs	r2, r3
 800420e:	2100      	movs	r1, #0
 8004210:	f004 fa1f 	bl	8008652 <memset>
	sConfig.OCMode = TIM_OCMODE_TIMING;
 8004214:	193b      	adds	r3, r7, r4
 8004216:	2200      	movs	r2, #0
 8004218:	601a      	str	r2, [r3, #0]
	sConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 800421a:	193b      	adds	r3, r7, r4
 800421c:	2200      	movs	r2, #0
 800421e:	609a      	str	r2, [r3, #8]
	sConfig.OCFastMode = TIM_OCFAST_DISABLE;
 8004220:	193b      	adds	r3, r7, r4
 8004222:	2200      	movs	r2, #0
 8004224:	60da      	str	r2, [r3, #12]

	// calculating pulse/OC trigger
	if (isTimerPaused == 0) {		// 1st run, hasn't been paused yet
 8004226:	4b1e      	ldr	r3, [pc, #120]	; (80042a0 <runTimer+0xa4>)
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	b2db      	uxtb	r3, r3
 800422c:	2b00      	cmp	r3, #0
 800422e:	d106      	bne.n	800423e <runTimer+0x42>
		sConfig.Pulse = htim->Instance->CNT;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004236:	2308      	movs	r3, #8
 8004238:	18fb      	adds	r3, r7, r3
 800423a:	605a      	str	r2, [r3, #4]
 800423c:	e020      	b.n	8004280 <runTimer+0x84>
	}
	else {		// unpausing
		uint32_t temp = htim->Instance->CNT;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004244:	61fb      	str	r3, [r7, #28]

		// count needed to get from pause marker to start marker - basically how many steps it would've taken to get to next cycle
		// shifted to account for negative behavior
		uint32_t diff = ((int)(timerStartMarker-timerPauseMarker)+0x8000) % 0x8000;
 8004246:	4b17      	ldr	r3, [pc, #92]	; (80042a4 <runTimer+0xa8>)
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	4b17      	ldr	r3, [pc, #92]	; (80042a8 <runTimer+0xac>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	2280      	movs	r2, #128	; 0x80
 8004252:	0212      	lsls	r2, r2, #8
 8004254:	4694      	mov	ip, r2
 8004256:	4463      	add	r3, ip
 8004258:	4a14      	ldr	r2, [pc, #80]	; (80042ac <runTimer+0xb0>)
 800425a:	4013      	ands	r3, r2
 800425c:	d503      	bpl.n	8004266 <runTimer+0x6a>
 800425e:	3b01      	subs	r3, #1
 8004260:	4a13      	ldr	r2, [pc, #76]	; (80042b0 <runTimer+0xb4>)
 8004262:	4313      	orrs	r3, r2
 8004264:	3301      	adds	r3, #1
 8004266:	61bb      	str	r3, [r7, #24]
		sConfig.Pulse = (temp+diff) % 0x8000;
 8004268:	69fa      	ldr	r2, [r7, #28]
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	18d3      	adds	r3, r2, r3
 800426e:	045b      	lsls	r3, r3, #17
 8004270:	0c5a      	lsrs	r2, r3, #17
 8004272:	2108      	movs	r1, #8
 8004274:	187b      	adds	r3, r7, r1
 8004276:	605a      	str	r2, [r3, #4]
		timerStartMarker = sConfig.Pulse;		// set new start marker
 8004278:	187b      	adds	r3, r7, r1
 800427a:	685a      	ldr	r2, [r3, #4]
 800427c:	4b09      	ldr	r3, [pc, #36]	; (80042a4 <runTimer+0xa8>)
 800427e:	601a      	str	r2, [r3, #0]
	}

	HAL_TIM_OC_ConfigChannel(htim, &sConfig, TIM_CHANNEL_1);
 8004280:	2308      	movs	r3, #8
 8004282:	18f9      	adds	r1, r7, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	0018      	movs	r0, r3
 800428a:	f003 fd49 	bl	8007d20 <HAL_TIM_OC_ConfigChannel>
	HAL_TIM_OC_Start_IT(htim, TIM_CHANNEL_1);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2100      	movs	r1, #0
 8004292:	0018      	movs	r0, r3
 8004294:	f003 fb84 	bl	80079a0 <HAL_TIM_OC_Start_IT>
}
 8004298:	46c0      	nop			; (mov r8, r8)
 800429a:	46bd      	mov	sp, r7
 800429c:	b009      	add	sp, #36	; 0x24
 800429e:	bd90      	pop	{r4, r7, pc}
 80042a0:	20000198 	.word	0x20000198
 80042a4:	2000011c 	.word	0x2000011c
 80042a8:	20000120 	.word	0x20000120
 80042ac:	80007fff 	.word	0x80007fff
 80042b0:	ffff8000 	.word	0xffff8000

080042b4 <pauseTimer>:

// flags should be set in nav
void pauseTimer(TIM_HandleTypeDef *htim) {
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_1);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2100      	movs	r1, #0
 80042c0:	0018      	movs	r0, r3
 80042c2:	f003 fbbf 	bl	8007a44 <HAL_TIM_OC_Stop_IT>
	timerPauseMarker = htim->Instance->CNT;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042cc:	4b02      	ldr	r3, [pc, #8]	; (80042d8 <pauseTimer+0x24>)
 80042ce:	601a      	str	r2, [r3, #0]
}
 80042d0:	46c0      	nop			; (mov r8, r8)
 80042d2:	46bd      	mov	sp, r7
 80042d4:	b002      	add	sp, #8
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	20000120 	.word	0x20000120

080042dc <stopTimer>:

void stopTimer(TIM_HandleTypeDef *htim) {
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_1);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2100      	movs	r1, #0
 80042e8:	0018      	movs	r0, r3
 80042ea:	f003 fbab 	bl	8007a44 <HAL_TIM_OC_Stop_IT>
	timerStartMarker = 0;
 80042ee:	4b05      	ldr	r3, [pc, #20]	; (8004304 <stopTimer+0x28>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	601a      	str	r2, [r3, #0]
	timerPauseMarker = 0;
 80042f4:	4b04      	ldr	r3, [pc, #16]	; (8004308 <stopTimer+0x2c>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	601a      	str	r2, [r3, #0]
}
 80042fa:	46c0      	nop			; (mov r8, r8)
 80042fc:	46bd      	mov	sp, r7
 80042fe:	b002      	add	sp, #8
 8004300:	bd80      	pop	{r7, pc}
 8004302:	46c0      	nop			; (mov r8, r8)
 8004304:	2000011c 	.word	0x2000011c
 8004308:	20000120 	.word	0x20000120

0800430c <runStopwatch>:

// set stopwatch. using lptimer. maybe better with regular timer?
// can operate in stop mode if using lptimer
// modify to update screen/set flags when necessary
// uses TIM21 clocked by LSE (or at least should)
void runStopwatch(TIM_HandleTypeDef *htim) {
 800430c:	b590      	push	{r4, r7, lr}
 800430e:	b089      	sub	sp, #36	; 0x24
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
//	htim->Instance->CNT = tempStopwatchCounter;
//	HAL_TIM_Base_Start_IT(htim);
	TIM_OC_InitTypeDef sConfig = {0};
 8004314:	2408      	movs	r4, #8
 8004316:	193b      	adds	r3, r7, r4
 8004318:	0018      	movs	r0, r3
 800431a:	2310      	movs	r3, #16
 800431c:	001a      	movs	r2, r3
 800431e:	2100      	movs	r1, #0
 8004320:	f004 f997 	bl	8008652 <memset>
	sConfig.OCMode = TIM_OCMODE_TIMING;
 8004324:	193b      	adds	r3, r7, r4
 8004326:	2200      	movs	r2, #0
 8004328:	601a      	str	r2, [r3, #0]
	sConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 800432a:	193b      	adds	r3, r7, r4
 800432c:	2200      	movs	r2, #0
 800432e:	609a      	str	r2, [r3, #8]
	sConfig.OCFastMode = TIM_OCFAST_DISABLE;
 8004330:	193b      	adds	r3, r7, r4
 8004332:	2200      	movs	r2, #0
 8004334:	60da      	str	r2, [r3, #12]

	// calculating pulse/OC trigger
	if (isStopwatchPaused == 0) {		// 1st run, hasn't been paused yet
 8004336:	4b20      	ldr	r3, [pc, #128]	; (80043b8 <runStopwatch+0xac>)
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	b2db      	uxtb	r3, r3
 800433c:	2b00      	cmp	r3, #0
 800433e:	d109      	bne.n	8004354 <runStopwatch+0x48>
		stopwatchCounter = 0;
 8004340:	4b1e      	ldr	r3, [pc, #120]	; (80043bc <runStopwatch+0xb0>)
 8004342:	2200      	movs	r2, #0
 8004344:	601a      	str	r2, [r3, #0]
		sConfig.Pulse = htim->Instance->CNT;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800434c:	2308      	movs	r3, #8
 800434e:	18fb      	adds	r3, r7, r3
 8004350:	605a      	str	r2, [r3, #4]
 8004352:	e020      	b.n	8004396 <runStopwatch+0x8a>
	}
	else {		// unpausing
		uint32_t temp = htim->Instance->CNT;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435a:	61fb      	str	r3, [r7, #28]

		// count needed to get from pause marker to start marker - basically how many steps it would've taken to get to next cycle
		// shifted to account for negative behavior
		uint32_t diff = ((int)(stopwatchStartMarker-stopwatchPauseMarker)+0x8000) % 0x8000;
 800435c:	4b18      	ldr	r3, [pc, #96]	; (80043c0 <runStopwatch+0xb4>)
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	4b18      	ldr	r3, [pc, #96]	; (80043c4 <runStopwatch+0xb8>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2280      	movs	r2, #128	; 0x80
 8004368:	0212      	lsls	r2, r2, #8
 800436a:	4694      	mov	ip, r2
 800436c:	4463      	add	r3, ip
 800436e:	4a16      	ldr	r2, [pc, #88]	; (80043c8 <runStopwatch+0xbc>)
 8004370:	4013      	ands	r3, r2
 8004372:	d503      	bpl.n	800437c <runStopwatch+0x70>
 8004374:	3b01      	subs	r3, #1
 8004376:	4a15      	ldr	r2, [pc, #84]	; (80043cc <runStopwatch+0xc0>)
 8004378:	4313      	orrs	r3, r2
 800437a:	3301      	adds	r3, #1
 800437c:	61bb      	str	r3, [r7, #24]
		sConfig.Pulse = (temp+diff) % 0x8000;
 800437e:	69fa      	ldr	r2, [r7, #28]
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	18d3      	adds	r3, r2, r3
 8004384:	045b      	lsls	r3, r3, #17
 8004386:	0c5a      	lsrs	r2, r3, #17
 8004388:	2108      	movs	r1, #8
 800438a:	187b      	adds	r3, r7, r1
 800438c:	605a      	str	r2, [r3, #4]
		stopwatchStartMarker = sConfig.Pulse;		// set new start marker
 800438e:	187b      	adds	r3, r7, r1
 8004390:	685a      	ldr	r2, [r3, #4]
 8004392:	4b0b      	ldr	r3, [pc, #44]	; (80043c0 <runStopwatch+0xb4>)
 8004394:	601a      	str	r2, [r3, #0]
	}

	HAL_TIM_OC_ConfigChannel(htim, &sConfig, TIM_CHANNEL_2);
 8004396:	2308      	movs	r3, #8
 8004398:	18f9      	adds	r1, r7, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2204      	movs	r2, #4
 800439e:	0018      	movs	r0, r3
 80043a0:	f003 fcbe 	bl	8007d20 <HAL_TIM_OC_ConfigChannel>
	HAL_TIM_OC_Start_IT(htim, TIM_CHANNEL_2);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2104      	movs	r1, #4
 80043a8:	0018      	movs	r0, r3
 80043aa:	f003 faf9 	bl	80079a0 <HAL_TIM_OC_Start_IT>
}
 80043ae:	46c0      	nop			; (mov r8, r8)
 80043b0:	46bd      	mov	sp, r7
 80043b2:	b009      	add	sp, #36	; 0x24
 80043b4:	bd90      	pop	{r4, r7, pc}
 80043b6:	46c0      	nop			; (mov r8, r8)
 80043b8:	20000191 	.word	0x20000191
 80043bc:	2000019c 	.word	0x2000019c
 80043c0:	20000124 	.word	0x20000124
 80043c4:	20000128 	.word	0x20000128
 80043c8:	80007fff 	.word	0x80007fff
 80043cc:	ffff8000 	.word	0xffff8000

080043d0 <pauseStopwatch>:

// stop the timer or pause it or whatever.
// counter value might reset and screw up timekeeping? should save?
void pauseStopwatch(TIM_HandleTypeDef *htim) {
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_2);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2104      	movs	r1, #4
 80043dc:	0018      	movs	r0, r3
 80043de:	f003 fb31 	bl	8007a44 <HAL_TIM_OC_Stop_IT>
	stopwatchPauseMarker = htim->Instance->CNT;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043e8:	4b02      	ldr	r3, [pc, #8]	; (80043f4 <pauseStopwatch+0x24>)
 80043ea:	601a      	str	r2, [r3, #0]
}
 80043ec:	46c0      	nop			; (mov r8, r8)
 80043ee:	46bd      	mov	sp, r7
 80043f0:	b002      	add	sp, #8
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	20000128 	.word	0x20000128

080043f8 <clearStopwatch>:

void clearStopwatch(TIM_HandleTypeDef *htim) {
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_2);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2104      	movs	r1, #4
 8004404:	0018      	movs	r0, r3
 8004406:	f003 fb1d 	bl	8007a44 <HAL_TIM_OC_Stop_IT>
	stopwatchPauseMarker = htim->Instance->CNT;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004410:	4b06      	ldr	r3, [pc, #24]	; (800442c <clearStopwatch+0x34>)
 8004412:	601a      	str	r2, [r3, #0]
	stopwatchStartMarker = htim->Instance->CNT;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800441a:	4b05      	ldr	r3, [pc, #20]	; (8004430 <clearStopwatch+0x38>)
 800441c:	601a      	str	r2, [r3, #0]

	stopwatchCounter = 0;
 800441e:	4b05      	ldr	r3, [pc, #20]	; (8004434 <clearStopwatch+0x3c>)
 8004420:	2200      	movs	r2, #0
 8004422:	601a      	str	r2, [r3, #0]
}
 8004424:	46c0      	nop			; (mov r8, r8)
 8004426:	46bd      	mov	sp, r7
 8004428:	b002      	add	sp, #8
 800442a:	bd80      	pop	{r7, pc}
 800442c:	20000128 	.word	0x20000128
 8004430:	20000124 	.word	0x20000124
 8004434:	2000019c 	.word	0x2000019c

08004438 <runTimerStopwatchBase>:

void runTimerStopwatchBase(TIM_HandleTypeDef *htim) {HAL_TIM_Base_Start_IT(htim);}
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	0018      	movs	r0, r3
 8004444:	f003 fa34 	bl	80078b0 <HAL_TIM_Base_Start_IT>
 8004448:	46c0      	nop			; (mov r8, r8)
 800444a:	46bd      	mov	sp, r7
 800444c:	b002      	add	sp, #8
 800444e:	bd80      	pop	{r7, pc}

08004450 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8004450:	480d      	ldr	r0, [pc, #52]	; (8004488 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8004452:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8004454:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004456:	e003      	b.n	8004460 <LoopCopyDataInit>

08004458 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004458:	4b0c      	ldr	r3, [pc, #48]	; (800448c <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 800445a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800445c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800445e:	3104      	adds	r1, #4

08004460 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8004460:	480b      	ldr	r0, [pc, #44]	; (8004490 <LoopForever+0xa>)
  ldr  r3, =_edata
 8004462:	4b0c      	ldr	r3, [pc, #48]	; (8004494 <LoopForever+0xe>)
  adds  r2, r0, r1
 8004464:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004466:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004468:	d3f6      	bcc.n	8004458 <CopyDataInit>
  ldr  r2, =_sbss
 800446a:	4a0b      	ldr	r2, [pc, #44]	; (8004498 <LoopForever+0x12>)
  b  LoopFillZerobss
 800446c:	e002      	b.n	8004474 <LoopFillZerobss>

0800446e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800446e:	2300      	movs	r3, #0
  str  r3, [r2]
 8004470:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004472:	3204      	adds	r2, #4

08004474 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8004474:	4b09      	ldr	r3, [pc, #36]	; (800449c <LoopForever+0x16>)
  cmp  r2, r3
 8004476:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004478:	d3f9      	bcc.n	800446e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800447a:	f7ff fdb3 	bl	8003fe4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800447e:	f004 f8bb 	bl	80085f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004482:	f7fd fb7b 	bl	8001b7c <main>

08004486 <LoopForever>:

LoopForever:
    b LoopForever
 8004486:	e7fe      	b.n	8004486 <LoopForever>
   ldr   r0, =_estack
 8004488:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 800448c:	080096a0 	.word	0x080096a0
  ldr  r0, =_sdata
 8004490:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004494:	200000cc 	.word	0x200000cc
  ldr  r2, =_sbss
 8004498:	200000cc 	.word	0x200000cc
  ldr  r3, = _ebss
 800449c:	200003ac 	.word	0x200003ac

080044a0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80044a0:	e7fe      	b.n	80044a0 <ADC1_COMP_IRQHandler>
	...

080044a4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80044aa:	1dfb      	adds	r3, r7, #7
 80044ac:	2200      	movs	r2, #0
 80044ae:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80044b0:	4b0b      	ldr	r3, [pc, #44]	; (80044e0 <HAL_Init+0x3c>)
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	4b0a      	ldr	r3, [pc, #40]	; (80044e0 <HAL_Init+0x3c>)
 80044b6:	2140      	movs	r1, #64	; 0x40
 80044b8:	430a      	orrs	r2, r1
 80044ba:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80044bc:	2000      	movs	r0, #0
 80044be:	f000 f811 	bl	80044e4 <HAL_InitTick>
 80044c2:	1e03      	subs	r3, r0, #0
 80044c4:	d003      	beq.n	80044ce <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80044c6:	1dfb      	adds	r3, r7, #7
 80044c8:	2201      	movs	r2, #1
 80044ca:	701a      	strb	r2, [r3, #0]
 80044cc:	e001      	b.n	80044d2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80044ce:	f7ff fb21 	bl	8003b14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80044d2:	1dfb      	adds	r3, r7, #7
 80044d4:	781b      	ldrb	r3, [r3, #0]
}
 80044d6:	0018      	movs	r0, r3
 80044d8:	46bd      	mov	sp, r7
 80044da:	b002      	add	sp, #8
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	46c0      	nop			; (mov r8, r8)
 80044e0:	40022000 	.word	0x40022000

080044e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80044ec:	230f      	movs	r3, #15
 80044ee:	18fb      	adds	r3, r7, r3
 80044f0:	2200      	movs	r2, #0
 80044f2:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80044f4:	4b0f      	ldr	r3, [pc, #60]	; (8004534 <HAL_InitTick+0x50>)
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	23fa      	movs	r3, #250	; 0xfa
 80044fa:	0099      	lsls	r1, r3, #2
 80044fc:	0010      	movs	r0, r2
 80044fe:	f7fb fe0b 	bl	8000118 <__udivsi3>
 8004502:	0003      	movs	r3, r0
 8004504:	0018      	movs	r0, r3
 8004506:	f000 fb8a 	bl	8004c1e <HAL_SYSTICK_Config>
 800450a:	1e03      	subs	r3, r0, #0
 800450c:	d004      	beq.n	8004518 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 800450e:	230f      	movs	r3, #15
 8004510:	18fb      	adds	r3, r7, r3
 8004512:	2201      	movs	r2, #1
 8004514:	701a      	strb	r2, [r3, #0]
 8004516:	e006      	b.n	8004526 <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8004518:	6879      	ldr	r1, [r7, #4]
 800451a:	2301      	movs	r3, #1
 800451c:	425b      	negs	r3, r3
 800451e:	2200      	movs	r2, #0
 8004520:	0018      	movs	r0, r3
 8004522:	f000 fb47 	bl	8004bb4 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 8004526:	230f      	movs	r3, #15
 8004528:	18fb      	adds	r3, r7, r3
 800452a:	781b      	ldrb	r3, [r3, #0]
}
 800452c:	0018      	movs	r0, r3
 800452e:	46bd      	mov	sp, r7
 8004530:	b004      	add	sp, #16
 8004532:	bd80      	pop	{r7, pc}
 8004534:	20000064 	.word	0x20000064

08004538 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	af00      	add	r7, sp, #0
  uwTick++;
 800453c:	4b03      	ldr	r3, [pc, #12]	; (800454c <HAL_IncTick+0x14>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	1c5a      	adds	r2, r3, #1
 8004542:	4b02      	ldr	r3, [pc, #8]	; (800454c <HAL_IncTick+0x14>)
 8004544:	601a      	str	r2, [r3, #0]
}
 8004546:	46c0      	nop			; (mov r8, r8)
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	200003a4 	.word	0x200003a4

08004550 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	af00      	add	r7, sp, #0
  return uwTick;
 8004554:	4b02      	ldr	r3, [pc, #8]	; (8004560 <HAL_GetTick+0x10>)
 8004556:	681b      	ldr	r3, [r3, #0]
}
 8004558:	0018      	movs	r0, r3
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	46c0      	nop			; (mov r8, r8)
 8004560:	200003a4 	.word	0x200003a4

08004564 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800456c:	f7ff fff0 	bl	8004550 <HAL_GetTick>
 8004570:	0003      	movs	r3, r0
 8004572:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	3301      	adds	r3, #1
 800457c:	d002      	beq.n	8004584 <HAL_Delay+0x20>
  {
    wait++;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	3301      	adds	r3, #1
 8004582:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004584:	46c0      	nop			; (mov r8, r8)
 8004586:	f7ff ffe3 	bl	8004550 <HAL_GetTick>
 800458a:	0002      	movs	r2, r0
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	429a      	cmp	r2, r3
 8004594:	d8f7      	bhi.n	8004586 <HAL_Delay+0x22>
  {
  }
}
 8004596:	46c0      	nop			; (mov r8, r8)
 8004598:	46bd      	mov	sp, r7
 800459a:	b004      	add	sp, #16
 800459c:	bd80      	pop	{r7, pc}
	...

080045a0 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e159      	b.n	8004866 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10a      	bne.n	80045d0 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2250      	movs	r2, #80	; 0x50
 80045c4:	2100      	movs	r1, #0
 80045c6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	0018      	movs	r0, r3
 80045cc:	f7ff fab6 	bl	8003b3c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d4:	2210      	movs	r2, #16
 80045d6:	4013      	ands	r3, r2
 80045d8:	2b10      	cmp	r3, #16
 80045da:	d005      	beq.n	80045e8 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	2204      	movs	r2, #4
 80045e4:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80045e6:	d00b      	beq.n	8004600 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ec:	2210      	movs	r2, #16
 80045ee:	431a      	orrs	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2250      	movs	r2, #80	; 0x50
 80045f8:	2100      	movs	r1, #0
 80045fa:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e132      	b.n	8004866 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004604:	4a9a      	ldr	r2, [pc, #616]	; (8004870 <HAL_ADC_Init+0x2d0>)
 8004606:	4013      	ands	r3, r2
 8004608:	2202      	movs	r2, #2
 800460a:	431a      	orrs	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	2203      	movs	r2, #3
 8004618:	4013      	ands	r3, r2
 800461a:	2b01      	cmp	r3, #1
 800461c:	d108      	bne.n	8004630 <HAL_ADC_Init+0x90>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2201      	movs	r2, #1
 8004626:	4013      	ands	r3, r2
 8004628:	2b01      	cmp	r3, #1
 800462a:	d101      	bne.n	8004630 <HAL_ADC_Init+0x90>
 800462c:	2301      	movs	r3, #1
 800462e:	e000      	b.n	8004632 <HAL_ADC_Init+0x92>
 8004630:	2300      	movs	r3, #0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d149      	bne.n	80046ca <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685a      	ldr	r2, [r3, #4]
 800463a:	23c0      	movs	r3, #192	; 0xc0
 800463c:	061b      	lsls	r3, r3, #24
 800463e:	429a      	cmp	r2, r3
 8004640:	d00b      	beq.n	800465a <HAL_ADC_Init+0xba>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685a      	ldr	r2, [r3, #4]
 8004646:	2380      	movs	r3, #128	; 0x80
 8004648:	05db      	lsls	r3, r3, #23
 800464a:	429a      	cmp	r2, r3
 800464c:	d005      	beq.n	800465a <HAL_ADC_Init+0xba>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685a      	ldr	r2, [r3, #4]
 8004652:	2380      	movs	r3, #128	; 0x80
 8004654:	061b      	lsls	r3, r3, #24
 8004656:	429a      	cmp	r2, r3
 8004658:	d111      	bne.n	800467e <HAL_ADC_Init+0xde>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	691a      	ldr	r2, [r3, #16]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	0092      	lsls	r2, r2, #2
 8004666:	0892      	lsrs	r2, r2, #2
 8004668:	611a      	str	r2, [r3, #16]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	6919      	ldr	r1, [r3, #16]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685a      	ldr	r2, [r3, #4]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	430a      	orrs	r2, r1
 800467a:	611a      	str	r2, [r3, #16]
 800467c:	e014      	b.n	80046a8 <HAL_ADC_Init+0x108>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	691a      	ldr	r2, [r3, #16]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	0092      	lsls	r2, r2, #2
 800468a:	0892      	lsrs	r2, r2, #2
 800468c:	611a      	str	r2, [r3, #16]
 800468e:	4b79      	ldr	r3, [pc, #484]	; (8004874 <HAL_ADC_Init+0x2d4>)
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	4b78      	ldr	r3, [pc, #480]	; (8004874 <HAL_ADC_Init+0x2d4>)
 8004694:	4978      	ldr	r1, [pc, #480]	; (8004878 <HAL_ADC_Init+0x2d8>)
 8004696:	400a      	ands	r2, r1
 8004698:	601a      	str	r2, [r3, #0]
 800469a:	4b76      	ldr	r3, [pc, #472]	; (8004874 <HAL_ADC_Init+0x2d4>)
 800469c:	6819      	ldr	r1, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685a      	ldr	r2, [r3, #4]
 80046a2:	4b74      	ldr	r3, [pc, #464]	; (8004874 <HAL_ADC_Init+0x2d4>)
 80046a4:	430a      	orrs	r2, r1
 80046a6:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68da      	ldr	r2, [r3, #12]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2118      	movs	r1, #24
 80046b4:	438a      	bics	r2, r1
 80046b6:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68d9      	ldr	r1, [r3, #12]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	689a      	ldr	r2, [r3, #8]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80046ca:	4b6a      	ldr	r3, [pc, #424]	; (8004874 <HAL_ADC_Init+0x2d4>)
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	4b69      	ldr	r3, [pc, #420]	; (8004874 <HAL_ADC_Init+0x2d4>)
 80046d0:	496a      	ldr	r1, [pc, #424]	; (800487c <HAL_ADC_Init+0x2dc>)
 80046d2:	400a      	ands	r2, r1
 80046d4:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80046d6:	4b67      	ldr	r3, [pc, #412]	; (8004874 <HAL_ADC_Init+0x2d4>)
 80046d8:	6819      	ldr	r1, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046de:	065a      	lsls	r2, r3, #25
 80046e0:	4b64      	ldr	r3, [pc, #400]	; (8004874 <HAL_ADC_Init+0x2d4>)
 80046e2:	430a      	orrs	r2, r1
 80046e4:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	689a      	ldr	r2, [r3, #8]
 80046ec:	2380      	movs	r3, #128	; 0x80
 80046ee:	055b      	lsls	r3, r3, #21
 80046f0:	4013      	ands	r3, r2
 80046f2:	d108      	bne.n	8004706 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689a      	ldr	r2, [r3, #8]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2180      	movs	r1, #128	; 0x80
 8004700:	0549      	lsls	r1, r1, #21
 8004702:	430a      	orrs	r2, r1
 8004704:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68da      	ldr	r2, [r3, #12]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	495b      	ldr	r1, [pc, #364]	; (8004880 <HAL_ADC_Init+0x2e0>)
 8004712:	400a      	ands	r2, r1
 8004714:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68d9      	ldr	r1, [r3, #12]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	2b02      	cmp	r3, #2
 8004726:	d101      	bne.n	800472c <HAL_ADC_Init+0x18c>
 8004728:	2304      	movs	r3, #4
 800472a:	e000      	b.n	800472e <HAL_ADC_Init+0x18e>
 800472c:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800472e:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2020      	movs	r0, #32
 8004734:	5c1b      	ldrb	r3, [r3, r0]
 8004736:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004738:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	202c      	movs	r0, #44	; 0x2c
 800473e:	5c1b      	ldrb	r3, [r3, r0]
 8004740:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004742:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004748:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8004750:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	69db      	ldr	r3, [r3, #28]
 8004756:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004758:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	430a      	orrs	r2, r1
 8004760:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004766:	23c2      	movs	r3, #194	; 0xc2
 8004768:	33ff      	adds	r3, #255	; 0xff
 800476a:	429a      	cmp	r2, r3
 800476c:	d00b      	beq.n	8004786 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68d9      	ldr	r1, [r3, #12]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800477c:	431a      	orrs	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	430a      	orrs	r2, r1
 8004784:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2221      	movs	r2, #33	; 0x21
 800478a:	5c9b      	ldrb	r3, [r3, r2]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d11a      	bne.n	80047c6 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2220      	movs	r2, #32
 8004794:	5c9b      	ldrb	r3, [r3, r2]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d109      	bne.n	80047ae <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68da      	ldr	r2, [r3, #12]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2180      	movs	r1, #128	; 0x80
 80047a6:	0249      	lsls	r1, r1, #9
 80047a8:	430a      	orrs	r2, r1
 80047aa:	60da      	str	r2, [r3, #12]
 80047ac:	e00b      	b.n	80047c6 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b2:	2220      	movs	r2, #32
 80047b4:	431a      	orrs	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047be:	2201      	movs	r2, #1
 80047c0:	431a      	orrs	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d11f      	bne.n	800480e <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	691a      	ldr	r2, [r3, #16]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	492a      	ldr	r1, [pc, #168]	; (8004884 <HAL_ADC_Init+0x2e4>)
 80047da:	400a      	ands	r2, r1
 80047dc:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	6919      	ldr	r1, [r3, #16]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80047ec:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 80047f2:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	430a      	orrs	r2, r1
 80047fa:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	691a      	ldr	r2, [r3, #16]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2101      	movs	r1, #1
 8004808:	430a      	orrs	r2, r1
 800480a:	611a      	str	r2, [r3, #16]
 800480c:	e00e      	b.n	800482c <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	2201      	movs	r2, #1
 8004816:	4013      	ands	r3, r2
 8004818:	2b01      	cmp	r3, #1
 800481a:	d107      	bne.n	800482c <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	691a      	ldr	r2, [r3, #16]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2101      	movs	r1, #1
 8004828:	438a      	bics	r2, r1
 800482a:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	695a      	ldr	r2, [r3, #20]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2107      	movs	r1, #7
 8004838:	438a      	bics	r2, r1
 800483a:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6959      	ldr	r1, [r3, #20]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	430a      	orrs	r2, r1
 800484c:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004858:	2203      	movs	r2, #3
 800485a:	4393      	bics	r3, r2
 800485c:	2201      	movs	r2, #1
 800485e:	431a      	orrs	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	0018      	movs	r0, r3
 8004868:	46bd      	mov	sp, r7
 800486a:	b002      	add	sp, #8
 800486c:	bd80      	pop	{r7, pc}
 800486e:	46c0      	nop			; (mov r8, r8)
 8004870:	fffffefd 	.word	0xfffffefd
 8004874:	40012708 	.word	0x40012708
 8004878:	ffc3ffff 	.word	0xffc3ffff
 800487c:	fdffffff 	.word	0xfdffffff
 8004880:	fffe0219 	.word	0xfffe0219
 8004884:	fffffc03 	.word	0xfffffc03

08004888 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2250      	movs	r2, #80	; 0x50
 8004896:	5c9b      	ldrb	r3, [r3, r2]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d101      	bne.n	80048a0 <HAL_ADC_ConfigChannel+0x18>
 800489c:	2302      	movs	r3, #2
 800489e:	e085      	b.n	80049ac <HAL_ADC_ConfigChannel+0x124>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2250      	movs	r2, #80	; 0x50
 80048a4:	2101      	movs	r1, #1
 80048a6:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	2204      	movs	r2, #4
 80048b0:	4013      	ands	r3, r2
 80048b2:	d00b      	beq.n	80048cc <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b8:	2220      	movs	r2, #32
 80048ba:	431a      	orrs	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2250      	movs	r2, #80	; 0x50
 80048c4:	2100      	movs	r1, #0
 80048c6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e06f      	b.n	80049ac <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	4a38      	ldr	r2, [pc, #224]	; (80049b4 <HAL_ADC_ConfigChannel+0x12c>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d035      	beq.n	8004942 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	035b      	lsls	r3, r3, #13
 80048e2:	0b5a      	lsrs	r2, r3, #13
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	430a      	orrs	r2, r1
 80048ea:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	2380      	movs	r3, #128	; 0x80
 80048f2:	02db      	lsls	r3, r3, #11
 80048f4:	4013      	ands	r3, r2
 80048f6:	d009      	beq.n	800490c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 80048f8:	4b2f      	ldr	r3, [pc, #188]	; (80049b8 <HAL_ADC_ConfigChannel+0x130>)
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	4b2e      	ldr	r3, [pc, #184]	; (80049b8 <HAL_ADC_ConfigChannel+0x130>)
 80048fe:	2180      	movs	r1, #128	; 0x80
 8004900:	0409      	lsls	r1, r1, #16
 8004902:	430a      	orrs	r2, r1
 8004904:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8004906:	200a      	movs	r0, #10
 8004908:	f000 f85e 	bl	80049c8 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	2380      	movs	r3, #128	; 0x80
 8004912:	029b      	lsls	r3, r3, #10
 8004914:	4013      	ands	r3, r2
 8004916:	d006      	beq.n	8004926 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8004918:	4b27      	ldr	r3, [pc, #156]	; (80049b8 <HAL_ADC_ConfigChannel+0x130>)
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	4b26      	ldr	r3, [pc, #152]	; (80049b8 <HAL_ADC_ConfigChannel+0x130>)
 800491e:	2180      	movs	r1, #128	; 0x80
 8004920:	03c9      	lsls	r1, r1, #15
 8004922:	430a      	orrs	r2, r1
 8004924:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	2380      	movs	r3, #128	; 0x80
 800492c:	025b      	lsls	r3, r3, #9
 800492e:	4013      	ands	r3, r2
 8004930:	d037      	beq.n	80049a2 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 8004932:	4b21      	ldr	r3, [pc, #132]	; (80049b8 <HAL_ADC_ConfigChannel+0x130>)
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	4b20      	ldr	r3, [pc, #128]	; (80049b8 <HAL_ADC_ConfigChannel+0x130>)
 8004938:	2180      	movs	r1, #128	; 0x80
 800493a:	0449      	lsls	r1, r1, #17
 800493c:	430a      	orrs	r2, r1
 800493e:	601a      	str	r2, [r3, #0]
 8004940:	e02f      	b.n	80049a2 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	035b      	lsls	r3, r3, #13
 800494e:	0b5b      	lsrs	r3, r3, #13
 8004950:	43d9      	mvns	r1, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	400a      	ands	r2, r1
 8004958:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	2380      	movs	r3, #128	; 0x80
 8004960:	02db      	lsls	r3, r3, #11
 8004962:	4013      	ands	r3, r2
 8004964:	d005      	beq.n	8004972 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8004966:	4b14      	ldr	r3, [pc, #80]	; (80049b8 <HAL_ADC_ConfigChannel+0x130>)
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	4b13      	ldr	r3, [pc, #76]	; (80049b8 <HAL_ADC_ConfigChannel+0x130>)
 800496c:	4913      	ldr	r1, [pc, #76]	; (80049bc <HAL_ADC_ConfigChannel+0x134>)
 800496e:	400a      	ands	r2, r1
 8004970:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	2380      	movs	r3, #128	; 0x80
 8004978:	029b      	lsls	r3, r3, #10
 800497a:	4013      	ands	r3, r2
 800497c:	d005      	beq.n	800498a <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 800497e:	4b0e      	ldr	r3, [pc, #56]	; (80049b8 <HAL_ADC_ConfigChannel+0x130>)
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	4b0d      	ldr	r3, [pc, #52]	; (80049b8 <HAL_ADC_ConfigChannel+0x130>)
 8004984:	490e      	ldr	r1, [pc, #56]	; (80049c0 <HAL_ADC_ConfigChannel+0x138>)
 8004986:	400a      	ands	r2, r1
 8004988:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	2380      	movs	r3, #128	; 0x80
 8004990:	025b      	lsls	r3, r3, #9
 8004992:	4013      	ands	r3, r2
 8004994:	d005      	beq.n	80049a2 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 8004996:	4b08      	ldr	r3, [pc, #32]	; (80049b8 <HAL_ADC_ConfigChannel+0x130>)
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	4b07      	ldr	r3, [pc, #28]	; (80049b8 <HAL_ADC_ConfigChannel+0x130>)
 800499c:	4909      	ldr	r1, [pc, #36]	; (80049c4 <HAL_ADC_ConfigChannel+0x13c>)
 800499e:	400a      	ands	r2, r1
 80049a0:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2250      	movs	r2, #80	; 0x50
 80049a6:	2100      	movs	r1, #0
 80049a8:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	0018      	movs	r0, r3
 80049ae:	46bd      	mov	sp, r7
 80049b0:	b002      	add	sp, #8
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	00001001 	.word	0x00001001
 80049b8:	40012708 	.word	0x40012708
 80049bc:	ff7fffff 	.word	0xff7fffff
 80049c0:	ffbfffff 	.word	0xffbfffff
 80049c4:	feffffff 	.word	0xfeffffff

080049c8 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80049d0:	4b0a      	ldr	r3, [pc, #40]	; (80049fc <ADC_DelayMicroSecond+0x34>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	490a      	ldr	r1, [pc, #40]	; (8004a00 <ADC_DelayMicroSecond+0x38>)
 80049d6:	0018      	movs	r0, r3
 80049d8:	f7fb fb9e 	bl	8000118 <__udivsi3>
 80049dc:	0003      	movs	r3, r0
 80049de:	001a      	movs	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4353      	muls	r3, r2
 80049e4:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 80049e6:	e002      	b.n	80049ee <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	3b01      	subs	r3, #1
 80049ec:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1f9      	bne.n	80049e8 <ADC_DelayMicroSecond+0x20>
  } 
}
 80049f4:	46c0      	nop			; (mov r8, r8)
 80049f6:	46bd      	mov	sp, r7
 80049f8:	b004      	add	sp, #16
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	20000064 	.word	0x20000064
 8004a00:	000f4240 	.word	0x000f4240

08004a04 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	0002      	movs	r2, r0
 8004a0c:	1dfb      	adds	r3, r7, #7
 8004a0e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8004a10:	1dfb      	adds	r3, r7, #7
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	001a      	movs	r2, r3
 8004a16:	231f      	movs	r3, #31
 8004a18:	401a      	ands	r2, r3
 8004a1a:	4b04      	ldr	r3, [pc, #16]	; (8004a2c <NVIC_EnableIRQ+0x28>)
 8004a1c:	2101      	movs	r1, #1
 8004a1e:	4091      	lsls	r1, r2
 8004a20:	000a      	movs	r2, r1
 8004a22:	601a      	str	r2, [r3, #0]
}
 8004a24:	46c0      	nop			; (mov r8, r8)
 8004a26:	46bd      	mov	sp, r7
 8004a28:	b002      	add	sp, #8
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	e000e100 	.word	0xe000e100

08004a30 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	0002      	movs	r2, r0
 8004a38:	1dfb      	adds	r3, r7, #7
 8004a3a:	701a      	strb	r2, [r3, #0]
  NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8004a3c:	1dfb      	adds	r3, r7, #7
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	001a      	movs	r2, r3
 8004a42:	231f      	movs	r3, #31
 8004a44:	4013      	ands	r3, r2
 8004a46:	4905      	ldr	r1, [pc, #20]	; (8004a5c <NVIC_DisableIRQ+0x2c>)
 8004a48:	2201      	movs	r2, #1
 8004a4a:	409a      	lsls	r2, r3
 8004a4c:	0013      	movs	r3, r2
 8004a4e:	2280      	movs	r2, #128	; 0x80
 8004a50:	508b      	str	r3, [r1, r2]
}
 8004a52:	46c0      	nop			; (mov r8, r8)
 8004a54:	46bd      	mov	sp, r7
 8004a56:	b002      	add	sp, #8
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	46c0      	nop			; (mov r8, r8)
 8004a5c:	e000e100 	.word	0xe000e100

08004a60 <NVIC_ClearPendingIRQ>:
  \brief   Clear Pending Interrupt
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	0002      	movs	r2, r0
 8004a68:	1dfb      	adds	r3, r7, #7
 8004a6a:	701a      	strb	r2, [r3, #0]
  NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8004a6c:	1dfb      	adds	r3, r7, #7
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	001a      	movs	r2, r3
 8004a72:	231f      	movs	r3, #31
 8004a74:	4013      	ands	r3, r2
 8004a76:	4905      	ldr	r1, [pc, #20]	; (8004a8c <NVIC_ClearPendingIRQ+0x2c>)
 8004a78:	2201      	movs	r2, #1
 8004a7a:	409a      	lsls	r2, r3
 8004a7c:	23c0      	movs	r3, #192	; 0xc0
 8004a7e:	005b      	lsls	r3, r3, #1
 8004a80:	50ca      	str	r2, [r1, r3]
}
 8004a82:	46c0      	nop			; (mov r8, r8)
 8004a84:	46bd      	mov	sp, r7
 8004a86:	b002      	add	sp, #8
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	46c0      	nop			; (mov r8, r8)
 8004a8c:	e000e100 	.word	0xe000e100

08004a90 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a90:	b590      	push	{r4, r7, lr}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	0002      	movs	r2, r0
 8004a98:	6039      	str	r1, [r7, #0]
 8004a9a:	1dfb      	adds	r3, r7, #7
 8004a9c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8004a9e:	1dfb      	adds	r3, r7, #7
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	2b7f      	cmp	r3, #127	; 0x7f
 8004aa4:	d932      	bls.n	8004b0c <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004aa6:	4a2f      	ldr	r2, [pc, #188]	; (8004b64 <NVIC_SetPriority+0xd4>)
 8004aa8:	1dfb      	adds	r3, r7, #7
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	0019      	movs	r1, r3
 8004aae:	230f      	movs	r3, #15
 8004ab0:	400b      	ands	r3, r1
 8004ab2:	3b08      	subs	r3, #8
 8004ab4:	089b      	lsrs	r3, r3, #2
 8004ab6:	3306      	adds	r3, #6
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	18d3      	adds	r3, r2, r3
 8004abc:	3304      	adds	r3, #4
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	1dfa      	adds	r2, r7, #7
 8004ac2:	7812      	ldrb	r2, [r2, #0]
 8004ac4:	0011      	movs	r1, r2
 8004ac6:	2203      	movs	r2, #3
 8004ac8:	400a      	ands	r2, r1
 8004aca:	00d2      	lsls	r2, r2, #3
 8004acc:	21ff      	movs	r1, #255	; 0xff
 8004ace:	4091      	lsls	r1, r2
 8004ad0:	000a      	movs	r2, r1
 8004ad2:	43d2      	mvns	r2, r2
 8004ad4:	401a      	ands	r2, r3
 8004ad6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	019b      	lsls	r3, r3, #6
 8004adc:	22ff      	movs	r2, #255	; 0xff
 8004ade:	401a      	ands	r2, r3
 8004ae0:	1dfb      	adds	r3, r7, #7
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	0018      	movs	r0, r3
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	4003      	ands	r3, r0
 8004aea:	00db      	lsls	r3, r3, #3
 8004aec:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004aee:	481d      	ldr	r0, [pc, #116]	; (8004b64 <NVIC_SetPriority+0xd4>)
 8004af0:	1dfb      	adds	r3, r7, #7
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	001c      	movs	r4, r3
 8004af6:	230f      	movs	r3, #15
 8004af8:	4023      	ands	r3, r4
 8004afa:	3b08      	subs	r3, #8
 8004afc:	089b      	lsrs	r3, r3, #2
 8004afe:	430a      	orrs	r2, r1
 8004b00:	3306      	adds	r3, #6
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	18c3      	adds	r3, r0, r3
 8004b06:	3304      	adds	r3, #4
 8004b08:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004b0a:	e027      	b.n	8004b5c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004b0c:	4a16      	ldr	r2, [pc, #88]	; (8004b68 <NVIC_SetPriority+0xd8>)
 8004b0e:	1dfb      	adds	r3, r7, #7
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	b25b      	sxtb	r3, r3
 8004b14:	089b      	lsrs	r3, r3, #2
 8004b16:	33c0      	adds	r3, #192	; 0xc0
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	589b      	ldr	r3, [r3, r2]
 8004b1c:	1dfa      	adds	r2, r7, #7
 8004b1e:	7812      	ldrb	r2, [r2, #0]
 8004b20:	0011      	movs	r1, r2
 8004b22:	2203      	movs	r2, #3
 8004b24:	400a      	ands	r2, r1
 8004b26:	00d2      	lsls	r2, r2, #3
 8004b28:	21ff      	movs	r1, #255	; 0xff
 8004b2a:	4091      	lsls	r1, r2
 8004b2c:	000a      	movs	r2, r1
 8004b2e:	43d2      	mvns	r2, r2
 8004b30:	401a      	ands	r2, r3
 8004b32:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	019b      	lsls	r3, r3, #6
 8004b38:	22ff      	movs	r2, #255	; 0xff
 8004b3a:	401a      	ands	r2, r3
 8004b3c:	1dfb      	adds	r3, r7, #7
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	0018      	movs	r0, r3
 8004b42:	2303      	movs	r3, #3
 8004b44:	4003      	ands	r3, r0
 8004b46:	00db      	lsls	r3, r3, #3
 8004b48:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004b4a:	4807      	ldr	r0, [pc, #28]	; (8004b68 <NVIC_SetPriority+0xd8>)
 8004b4c:	1dfb      	adds	r3, r7, #7
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	b25b      	sxtb	r3, r3
 8004b52:	089b      	lsrs	r3, r3, #2
 8004b54:	430a      	orrs	r2, r1
 8004b56:	33c0      	adds	r3, #192	; 0xc0
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	501a      	str	r2, [r3, r0]
}
 8004b5c:	46c0      	nop			; (mov r8, r8)
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	b003      	add	sp, #12
 8004b62:	bd90      	pop	{r4, r7, pc}
 8004b64:	e000ed00 	.word	0xe000ed00
 8004b68:	e000e100 	.word	0xe000e100

08004b6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	3b01      	subs	r3, #1
 8004b78:	4a0c      	ldr	r2, [pc, #48]	; (8004bac <SysTick_Config+0x40>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d901      	bls.n	8004b82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e010      	b.n	8004ba4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b82:	4b0b      	ldr	r3, [pc, #44]	; (8004bb0 <SysTick_Config+0x44>)
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	3a01      	subs	r2, #1
 8004b88:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	425b      	negs	r3, r3
 8004b8e:	2103      	movs	r1, #3
 8004b90:	0018      	movs	r0, r3
 8004b92:	f7ff ff7d 	bl	8004a90 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b96:	4b06      	ldr	r3, [pc, #24]	; (8004bb0 <SysTick_Config+0x44>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b9c:	4b04      	ldr	r3, [pc, #16]	; (8004bb0 <SysTick_Config+0x44>)
 8004b9e:	2207      	movs	r2, #7
 8004ba0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	0018      	movs	r0, r3
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	b002      	add	sp, #8
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	00ffffff 	.word	0x00ffffff
 8004bb0:	e000e010 	.word	0xe000e010

08004bb4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60b9      	str	r1, [r7, #8]
 8004bbc:	607a      	str	r2, [r7, #4]
 8004bbe:	210f      	movs	r1, #15
 8004bc0:	187b      	adds	r3, r7, r1
 8004bc2:	1c02      	adds	r2, r0, #0
 8004bc4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	187b      	adds	r3, r7, r1
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	b25b      	sxtb	r3, r3
 8004bce:	0011      	movs	r1, r2
 8004bd0:	0018      	movs	r0, r3
 8004bd2:	f7ff ff5d 	bl	8004a90 <NVIC_SetPriority>
}
 8004bd6:	46c0      	nop			; (mov r8, r8)
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	b004      	add	sp, #16
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b082      	sub	sp, #8
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	0002      	movs	r2, r0
 8004be6:	1dfb      	adds	r3, r7, #7
 8004be8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004bea:	1dfb      	adds	r3, r7, #7
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	b25b      	sxtb	r3, r3
 8004bf0:	0018      	movs	r0, r3
 8004bf2:	f7ff ff07 	bl	8004a04 <NVIC_EnableIRQ>
}
 8004bf6:	46c0      	nop			; (mov r8, r8)
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	b002      	add	sp, #8
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b082      	sub	sp, #8
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	0002      	movs	r2, r0
 8004c06:	1dfb      	adds	r3, r7, #7
 8004c08:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004c0a:	1dfb      	adds	r3, r7, #7
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	b25b      	sxtb	r3, r3
 8004c10:	0018      	movs	r0, r3
 8004c12:	f7ff ff0d 	bl	8004a30 <NVIC_DisableIRQ>
}
 8004c16:	46c0      	nop			; (mov r8, r8)
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	b002      	add	sp, #8
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b082      	sub	sp, #8
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	0018      	movs	r0, r3
 8004c2a:	f7ff ff9f 	bl	8004b6c <SysTick_Config>
 8004c2e:	0003      	movs	r3, r0
}
 8004c30:	0018      	movs	r0, r3
 8004c32:	46bd      	mov	sp, r7
 8004c34:	b002      	add	sp, #8
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{ 
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	0002      	movs	r2, r0
 8004c40:	1dfb      	adds	r3, r7, #7
 8004c42:	701a      	strb	r2, [r3, #0]
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004c44:	1dfb      	adds	r3, r7, #7
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	b25b      	sxtb	r3, r3
 8004c4a:	0018      	movs	r0, r3
 8004c4c:	f7ff ff08 	bl	8004a60 <NVIC_ClearPendingIRQ>
}
 8004c50:	46c0      	nop			; (mov r8, r8)
 8004c52:	46bd      	mov	sp, r7
 8004c54:	b002      	add	sp, #8
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e061      	b.n	8004d2e <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a32      	ldr	r2, [pc, #200]	; (8004d38 <HAL_DMA_Init+0xe0>)
 8004c70:	4694      	mov	ip, r2
 8004c72:	4463      	add	r3, ip
 8004c74:	2114      	movs	r1, #20
 8004c76:	0018      	movs	r0, r3
 8004c78:	f7fb fa4e 	bl	8000118 <__udivsi3>
 8004c7c:	0003      	movs	r3, r0
 8004c7e:	009a      	lsls	r2, r3, #2
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a2d      	ldr	r2, [pc, #180]	; (8004d3c <HAL_DMA_Init+0xe4>)
 8004c88:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2225      	movs	r2, #37	; 0x25
 8004c8e:	2102      	movs	r1, #2
 8004c90:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	4a28      	ldr	r2, [pc, #160]	; (8004d40 <HAL_DMA_Init+0xe8>)
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004caa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cc2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a1b      	ldr	r3, [r3, #32]
 8004cc8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689a      	ldr	r2, [r3, #8]
 8004cdc:	2380      	movs	r3, #128	; 0x80
 8004cde:	01db      	lsls	r3, r3, #7
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d018      	beq.n	8004d16 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004ce4:	4b17      	ldr	r3, [pc, #92]	; (8004d44 <HAL_DMA_Init+0xec>)
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cec:	211c      	movs	r1, #28
 8004cee:	400b      	ands	r3, r1
 8004cf0:	210f      	movs	r1, #15
 8004cf2:	4099      	lsls	r1, r3
 8004cf4:	000b      	movs	r3, r1
 8004cf6:	43d9      	mvns	r1, r3
 8004cf8:	4b12      	ldr	r3, [pc, #72]	; (8004d44 <HAL_DMA_Init+0xec>)
 8004cfa:	400a      	ands	r2, r1
 8004cfc:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004cfe:	4b11      	ldr	r3, [pc, #68]	; (8004d44 <HAL_DMA_Init+0xec>)
 8004d00:	6819      	ldr	r1, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685a      	ldr	r2, [r3, #4]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d0a:	201c      	movs	r0, #28
 8004d0c:	4003      	ands	r3, r0
 8004d0e:	409a      	lsls	r2, r3
 8004d10:	4b0c      	ldr	r3, [pc, #48]	; (8004d44 <HAL_DMA_Init+0xec>)
 8004d12:	430a      	orrs	r2, r1
 8004d14:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2225      	movs	r2, #37	; 0x25
 8004d20:	2101      	movs	r1, #1
 8004d22:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2224      	movs	r2, #36	; 0x24
 8004d28:	2100      	movs	r1, #0
 8004d2a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	0018      	movs	r0, r3
 8004d30:	46bd      	mov	sp, r7
 8004d32:	b004      	add	sp, #16
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	46c0      	nop			; (mov r8, r8)
 8004d38:	bffdfff8 	.word	0xbffdfff8
 8004d3c:	40020000 	.word	0x40020000
 8004d40:	ffff800f 	.word	0xffff800f
 8004d44:	400200a8 	.word	0x400200a8

08004d48 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d50:	230f      	movs	r3, #15
 8004d52:	18fb      	adds	r3, r7, r3
 8004d54:	2200      	movs	r2, #0
 8004d56:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2225      	movs	r2, #37	; 0x25
 8004d5c:	5c9b      	ldrb	r3, [r3, r2]
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d007      	beq.n	8004d74 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2204      	movs	r2, #4
 8004d68:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004d6a:	230f      	movs	r3, #15
 8004d6c:	18fb      	adds	r3, r7, r3
 8004d6e:	2201      	movs	r2, #1
 8004d70:	701a      	strb	r2, [r3, #0]
 8004d72:	e02a      	b.n	8004dca <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	210e      	movs	r1, #14
 8004d80:	438a      	bics	r2, r1
 8004d82:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2101      	movs	r1, #1
 8004d90:	438a      	bics	r2, r1
 8004d92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d98:	221c      	movs	r2, #28
 8004d9a:	401a      	ands	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da0:	2101      	movs	r1, #1
 8004da2:	4091      	lsls	r1, r2
 8004da4:	000a      	movs	r2, r1
 8004da6:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2225      	movs	r2, #37	; 0x25
 8004dac:	2101      	movs	r1, #1
 8004dae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2224      	movs	r2, #36	; 0x24
 8004db4:	2100      	movs	r1, #0
 8004db6:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d004      	beq.n	8004dca <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	0010      	movs	r0, r2
 8004dc8:	4798      	blx	r3
    }
  }
  return status;
 8004dca:	230f      	movs	r3, #15
 8004dcc:	18fb      	adds	r3, r7, r3
 8004dce:	781b      	ldrb	r3, [r3, #0]
}
 8004dd0:	0018      	movs	r0, r3
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	b004      	add	sp, #16
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df4:	221c      	movs	r2, #28
 8004df6:	4013      	ands	r3, r2
 8004df8:	2204      	movs	r2, #4
 8004dfa:	409a      	lsls	r2, r3
 8004dfc:	0013      	movs	r3, r2
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	4013      	ands	r3, r2
 8004e02:	d026      	beq.n	8004e52 <HAL_DMA_IRQHandler+0x7a>
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	2204      	movs	r2, #4
 8004e08:	4013      	ands	r3, r2
 8004e0a:	d022      	beq.n	8004e52 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2220      	movs	r2, #32
 8004e14:	4013      	ands	r3, r2
 8004e16:	d107      	bne.n	8004e28 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2104      	movs	r1, #4
 8004e24:	438a      	bics	r2, r1
 8004e26:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e2c:	221c      	movs	r2, #28
 8004e2e:	401a      	ands	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e34:	2104      	movs	r1, #4
 8004e36:	4091      	lsls	r1, r2
 8004e38:	000a      	movs	r2, r1
 8004e3a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d100      	bne.n	8004e46 <HAL_DMA_IRQHandler+0x6e>
 8004e44:	e071      	b.n	8004f2a <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	0010      	movs	r0, r2
 8004e4e:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8004e50:	e06b      	b.n	8004f2a <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e56:	221c      	movs	r2, #28
 8004e58:	4013      	ands	r3, r2
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	409a      	lsls	r2, r3
 8004e5e:	0013      	movs	r3, r2
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	4013      	ands	r3, r2
 8004e64:	d02d      	beq.n	8004ec2 <HAL_DMA_IRQHandler+0xea>
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	2202      	movs	r2, #2
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	d029      	beq.n	8004ec2 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2220      	movs	r2, #32
 8004e76:	4013      	ands	r3, r2
 8004e78:	d10b      	bne.n	8004e92 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	210a      	movs	r1, #10
 8004e86:	438a      	bics	r2, r1
 8004e88:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2225      	movs	r2, #37	; 0x25
 8004e8e:	2101      	movs	r1, #1
 8004e90:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e96:	221c      	movs	r2, #28
 8004e98:	401a      	ands	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9e:	2102      	movs	r1, #2
 8004ea0:	4091      	lsls	r1, r2
 8004ea2:	000a      	movs	r2, r1
 8004ea4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2224      	movs	r2, #36	; 0x24
 8004eaa:	2100      	movs	r1, #0
 8004eac:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d039      	beq.n	8004f2a <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	0010      	movs	r0, r2
 8004ebe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004ec0:	e033      	b.n	8004f2a <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec6:	221c      	movs	r2, #28
 8004ec8:	4013      	ands	r3, r2
 8004eca:	2208      	movs	r2, #8
 8004ecc:	409a      	lsls	r2, r3
 8004ece:	0013      	movs	r3, r2
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	d02a      	beq.n	8004f2c <HAL_DMA_IRQHandler+0x154>
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	2208      	movs	r2, #8
 8004eda:	4013      	ands	r3, r2
 8004edc:	d026      	beq.n	8004f2c <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	210e      	movs	r1, #14
 8004eea:	438a      	bics	r2, r1
 8004eec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef2:	221c      	movs	r2, #28
 8004ef4:	401a      	ands	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efa:	2101      	movs	r1, #1
 8004efc:	4091      	lsls	r1, r2
 8004efe:	000a      	movs	r2, r1
 8004f00:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2201      	movs	r2, #1
 8004f06:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2225      	movs	r2, #37	; 0x25
 8004f0c:	2101      	movs	r1, #1
 8004f0e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2224      	movs	r2, #36	; 0x24
 8004f14:	2100      	movs	r1, #0
 8004f16:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d005      	beq.n	8004f2c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	0010      	movs	r0, r2
 8004f28:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004f2a:	46c0      	nop			; (mov r8, r8)
 8004f2c:	46c0      	nop			; (mov r8, r8)
}
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	b004      	add	sp, #16
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b086      	sub	sp, #24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004f42:	2300      	movs	r3, #0
 8004f44:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8004f46:	2300      	movs	r3, #0
 8004f48:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004f4a:	e155      	b.n	80051f8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2101      	movs	r1, #1
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	4091      	lsls	r1, r2
 8004f56:	000a      	movs	r2, r1
 8004f58:	4013      	ands	r3, r2
 8004f5a:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d100      	bne.n	8004f64 <HAL_GPIO_Init+0x30>
 8004f62:	e146      	b.n	80051f2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d003      	beq.n	8004f74 <HAL_GPIO_Init+0x40>
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	2b12      	cmp	r3, #18
 8004f72:	d123      	bne.n	8004fbc <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	08da      	lsrs	r2, r3, #3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	3208      	adds	r2, #8
 8004f7c:	0092      	lsls	r2, r2, #2
 8004f7e:	58d3      	ldr	r3, [r2, r3]
 8004f80:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	2207      	movs	r2, #7
 8004f86:	4013      	ands	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	220f      	movs	r2, #15
 8004f8c:	409a      	lsls	r2, r3
 8004f8e:	0013      	movs	r3, r2
 8004f90:	43da      	mvns	r2, r3
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	4013      	ands	r3, r2
 8004f96:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	691a      	ldr	r2, [r3, #16]
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	2107      	movs	r1, #7
 8004fa0:	400b      	ands	r3, r1
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	409a      	lsls	r2, r3
 8004fa6:	0013      	movs	r3, r2
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	08da      	lsrs	r2, r3, #3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	3208      	adds	r2, #8
 8004fb6:	0092      	lsls	r2, r2, #2
 8004fb8:	6939      	ldr	r1, [r7, #16]
 8004fba:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d00b      	beq.n	8004fdc <HAL_GPIO_Init+0xa8>
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d007      	beq.n	8004fdc <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004fd0:	2b11      	cmp	r3, #17
 8004fd2:	d003      	beq.n	8004fdc <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	2b12      	cmp	r3, #18
 8004fda:	d130      	bne.n	800503e <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	005b      	lsls	r3, r3, #1
 8004fe6:	2203      	movs	r2, #3
 8004fe8:	409a      	lsls	r2, r3
 8004fea:	0013      	movs	r3, r2
 8004fec:	43da      	mvns	r2, r3
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	68da      	ldr	r2, [r3, #12]
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	005b      	lsls	r3, r3, #1
 8004ffc:	409a      	lsls	r2, r3
 8004ffe:	0013      	movs	r3, r2
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	4313      	orrs	r3, r2
 8005004:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005012:	2201      	movs	r2, #1
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	409a      	lsls	r2, r3
 8005018:	0013      	movs	r3, r2
 800501a:	43da      	mvns	r2, r3
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	4013      	ands	r3, r2
 8005020:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	091b      	lsrs	r3, r3, #4
 8005028:	2201      	movs	r2, #1
 800502a:	401a      	ands	r2, r3
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	409a      	lsls	r2, r3
 8005030:	0013      	movs	r3, r2
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	4313      	orrs	r3, r2
 8005036:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	005b      	lsls	r3, r3, #1
 8005048:	2203      	movs	r2, #3
 800504a:	409a      	lsls	r2, r3
 800504c:	0013      	movs	r3, r2
 800504e:	43da      	mvns	r2, r3
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	4013      	ands	r3, r2
 8005054:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	2203      	movs	r2, #3
 800505c:	401a      	ands	r2, r3
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	005b      	lsls	r3, r3, #1
 8005062:	409a      	lsls	r2, r3
 8005064:	0013      	movs	r3, r2
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	4313      	orrs	r3, r2
 800506a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	005b      	lsls	r3, r3, #1
 800507c:	2203      	movs	r2, #3
 800507e:	409a      	lsls	r2, r3
 8005080:	0013      	movs	r3, r2
 8005082:	43da      	mvns	r2, r3
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	4013      	ands	r3, r2
 8005088:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	689a      	ldr	r2, [r3, #8]
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	005b      	lsls	r3, r3, #1
 8005092:	409a      	lsls	r2, r3
 8005094:	0013      	movs	r3, r2
 8005096:	693a      	ldr	r2, [r7, #16]
 8005098:	4313      	orrs	r3, r2
 800509a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	693a      	ldr	r2, [r7, #16]
 80050a0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	685a      	ldr	r2, [r3, #4]
 80050a6:	2380      	movs	r3, #128	; 0x80
 80050a8:	055b      	lsls	r3, r3, #21
 80050aa:	4013      	ands	r3, r2
 80050ac:	d100      	bne.n	80050b0 <HAL_GPIO_Init+0x17c>
 80050ae:	e0a0      	b.n	80051f2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050b0:	4b57      	ldr	r3, [pc, #348]	; (8005210 <HAL_GPIO_Init+0x2dc>)
 80050b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050b4:	4b56      	ldr	r3, [pc, #344]	; (8005210 <HAL_GPIO_Init+0x2dc>)
 80050b6:	2101      	movs	r1, #1
 80050b8:	430a      	orrs	r2, r1
 80050ba:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 80050bc:	4a55      	ldr	r2, [pc, #340]	; (8005214 <HAL_GPIO_Init+0x2e0>)
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	089b      	lsrs	r3, r3, #2
 80050c2:	3302      	adds	r3, #2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	589b      	ldr	r3, [r3, r2]
 80050c8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	2203      	movs	r2, #3
 80050ce:	4013      	ands	r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	220f      	movs	r2, #15
 80050d4:	409a      	lsls	r2, r3
 80050d6:	0013      	movs	r3, r2
 80050d8:	43da      	mvns	r2, r3
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	4013      	ands	r3, r2
 80050de:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	23a0      	movs	r3, #160	; 0xa0
 80050e4:	05db      	lsls	r3, r3, #23
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d01f      	beq.n	800512a <HAL_GPIO_Init+0x1f6>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a4a      	ldr	r2, [pc, #296]	; (8005218 <HAL_GPIO_Init+0x2e4>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d019      	beq.n	8005126 <HAL_GPIO_Init+0x1f2>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a49      	ldr	r2, [pc, #292]	; (800521c <HAL_GPIO_Init+0x2e8>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d013      	beq.n	8005122 <HAL_GPIO_Init+0x1ee>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a48      	ldr	r2, [pc, #288]	; (8005220 <HAL_GPIO_Init+0x2ec>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d00d      	beq.n	800511e <HAL_GPIO_Init+0x1ea>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a47      	ldr	r2, [pc, #284]	; (8005224 <HAL_GPIO_Init+0x2f0>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d007      	beq.n	800511a <HAL_GPIO_Init+0x1e6>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a46      	ldr	r2, [pc, #280]	; (8005228 <HAL_GPIO_Init+0x2f4>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d101      	bne.n	8005116 <HAL_GPIO_Init+0x1e2>
 8005112:	2305      	movs	r3, #5
 8005114:	e00a      	b.n	800512c <HAL_GPIO_Init+0x1f8>
 8005116:	2306      	movs	r3, #6
 8005118:	e008      	b.n	800512c <HAL_GPIO_Init+0x1f8>
 800511a:	2304      	movs	r3, #4
 800511c:	e006      	b.n	800512c <HAL_GPIO_Init+0x1f8>
 800511e:	2303      	movs	r3, #3
 8005120:	e004      	b.n	800512c <HAL_GPIO_Init+0x1f8>
 8005122:	2302      	movs	r3, #2
 8005124:	e002      	b.n	800512c <HAL_GPIO_Init+0x1f8>
 8005126:	2301      	movs	r3, #1
 8005128:	e000      	b.n	800512c <HAL_GPIO_Init+0x1f8>
 800512a:	2300      	movs	r3, #0
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	2103      	movs	r1, #3
 8005130:	400a      	ands	r2, r1
 8005132:	0092      	lsls	r2, r2, #2
 8005134:	4093      	lsls	r3, r2
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	4313      	orrs	r3, r2
 800513a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800513c:	4935      	ldr	r1, [pc, #212]	; (8005214 <HAL_GPIO_Init+0x2e0>)
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	089b      	lsrs	r3, r3, #2
 8005142:	3302      	adds	r3, #2
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800514a:	4b38      	ldr	r3, [pc, #224]	; (800522c <HAL_GPIO_Init+0x2f8>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	43da      	mvns	r2, r3
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	4013      	ands	r3, r2
 8005158:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	685a      	ldr	r2, [r3, #4]
 800515e:	2380      	movs	r3, #128	; 0x80
 8005160:	025b      	lsls	r3, r3, #9
 8005162:	4013      	ands	r3, r2
 8005164:	d003      	beq.n	800516e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8005166:	693a      	ldr	r2, [r7, #16]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	4313      	orrs	r3, r2
 800516c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800516e:	4b2f      	ldr	r3, [pc, #188]	; (800522c <HAL_GPIO_Init+0x2f8>)
 8005170:	693a      	ldr	r2, [r7, #16]
 8005172:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8005174:	4b2d      	ldr	r3, [pc, #180]	; (800522c <HAL_GPIO_Init+0x2f8>)
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	43da      	mvns	r2, r3
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	4013      	ands	r3, r2
 8005182:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	685a      	ldr	r2, [r3, #4]
 8005188:	2380      	movs	r3, #128	; 0x80
 800518a:	029b      	lsls	r3, r3, #10
 800518c:	4013      	ands	r3, r2
 800518e:	d003      	beq.n	8005198 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8005190:	693a      	ldr	r2, [r7, #16]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	4313      	orrs	r3, r2
 8005196:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005198:	4b24      	ldr	r3, [pc, #144]	; (800522c <HAL_GPIO_Init+0x2f8>)
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800519e:	4b23      	ldr	r3, [pc, #140]	; (800522c <HAL_GPIO_Init+0x2f8>)
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	43da      	mvns	r2, r3
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	4013      	ands	r3, r2
 80051ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	685a      	ldr	r2, [r3, #4]
 80051b2:	2380      	movs	r3, #128	; 0x80
 80051b4:	035b      	lsls	r3, r3, #13
 80051b6:	4013      	ands	r3, r2
 80051b8:	d003      	beq.n	80051c2 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80051ba:	693a      	ldr	r2, [r7, #16]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	4313      	orrs	r3, r2
 80051c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80051c2:	4b1a      	ldr	r3, [pc, #104]	; (800522c <HAL_GPIO_Init+0x2f8>)
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80051c8:	4b18      	ldr	r3, [pc, #96]	; (800522c <HAL_GPIO_Init+0x2f8>)
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	43da      	mvns	r2, r3
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	4013      	ands	r3, r2
 80051d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	2380      	movs	r3, #128	; 0x80
 80051de:	039b      	lsls	r3, r3, #14
 80051e0:	4013      	ands	r3, r2
 80051e2:	d003      	beq.n	80051ec <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80051ec:	4b0f      	ldr	r3, [pc, #60]	; (800522c <HAL_GPIO_Init+0x2f8>)
 80051ee:	693a      	ldr	r2, [r7, #16]
 80051f0:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	3301      	adds	r3, #1
 80051f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	40da      	lsrs	r2, r3
 8005200:	1e13      	subs	r3, r2, #0
 8005202:	d000      	beq.n	8005206 <HAL_GPIO_Init+0x2d2>
 8005204:	e6a2      	b.n	8004f4c <HAL_GPIO_Init+0x18>
  }
}
 8005206:	46c0      	nop			; (mov r8, r8)
 8005208:	46bd      	mov	sp, r7
 800520a:	b006      	add	sp, #24
 800520c:	bd80      	pop	{r7, pc}
 800520e:	46c0      	nop			; (mov r8, r8)
 8005210:	40021000 	.word	0x40021000
 8005214:	40010000 	.word	0x40010000
 8005218:	50000400 	.word	0x50000400
 800521c:	50000800 	.word	0x50000800
 8005220:	50000c00 	.word	0x50000c00
 8005224:	50001000 	.word	0x50001000
 8005228:	50001c00 	.word	0x50001c00
 800522c:	40010400 	.word	0x40010400

08005230 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	000a      	movs	r2, r1
 800523a:	1cbb      	adds	r3, r7, #2
 800523c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	1cba      	adds	r2, r7, #2
 8005244:	8812      	ldrh	r2, [r2, #0]
 8005246:	4013      	ands	r3, r2
 8005248:	d004      	beq.n	8005254 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800524a:	230f      	movs	r3, #15
 800524c:	18fb      	adds	r3, r7, r3
 800524e:	2201      	movs	r2, #1
 8005250:	701a      	strb	r2, [r3, #0]
 8005252:	e003      	b.n	800525c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005254:	230f      	movs	r3, #15
 8005256:	18fb      	adds	r3, r7, r3
 8005258:	2200      	movs	r2, #0
 800525a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800525c:	230f      	movs	r3, #15
 800525e:	18fb      	adds	r3, r7, r3
 8005260:	781b      	ldrb	r3, [r3, #0]
}
 8005262:	0018      	movs	r0, r3
 8005264:	46bd      	mov	sp, r7
 8005266:	b004      	add	sp, #16
 8005268:	bd80      	pop	{r7, pc}

0800526a <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800526a:	b580      	push	{r7, lr}
 800526c:	b082      	sub	sp, #8
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
 8005272:	0008      	movs	r0, r1
 8005274:	0011      	movs	r1, r2
 8005276:	1cbb      	adds	r3, r7, #2
 8005278:	1c02      	adds	r2, r0, #0
 800527a:	801a      	strh	r2, [r3, #0]
 800527c:	1c7b      	adds	r3, r7, #1
 800527e:	1c0a      	adds	r2, r1, #0
 8005280:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8005282:	1c7b      	adds	r3, r7, #1
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d004      	beq.n	8005294 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800528a:	1cbb      	adds	r3, r7, #2
 800528c:	881a      	ldrh	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8005292:	e003      	b.n	800529c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8005294:	1cbb      	adds	r3, r7, #2
 8005296:	881a      	ldrh	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800529c:	46c0      	nop			; (mov r8, r8)
 800529e:	46bd      	mov	sp, r7
 80052a0:	b002      	add	sp, #8
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	000a      	movs	r2, r1
 80052ae:	1cbb      	adds	r3, r7, #2
 80052b0:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	695a      	ldr	r2, [r3, #20]
 80052b6:	1cbb      	adds	r3, r7, #2
 80052b8:	881b      	ldrh	r3, [r3, #0]
 80052ba:	405a      	eors	r2, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	615a      	str	r2, [r3, #20]
}
 80052c0:	46c0      	nop			; (mov r8, r8)
 80052c2:	46bd      	mov	sp, r7
 80052c4:	b002      	add	sp, #8
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	0002      	movs	r2, r0
 80052d0:	1dbb      	adds	r3, r7, #6
 80052d2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 80052d4:	4b09      	ldr	r3, [pc, #36]	; (80052fc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80052d6:	695b      	ldr	r3, [r3, #20]
 80052d8:	1dba      	adds	r2, r7, #6
 80052da:	8812      	ldrh	r2, [r2, #0]
 80052dc:	4013      	ands	r3, r2
 80052de:	d008      	beq.n	80052f2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80052e0:	4b06      	ldr	r3, [pc, #24]	; (80052fc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80052e2:	1dba      	adds	r2, r7, #6
 80052e4:	8812      	ldrh	r2, [r2, #0]
 80052e6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80052e8:	1dbb      	adds	r3, r7, #6
 80052ea:	881b      	ldrh	r3, [r3, #0]
 80052ec:	0018      	movs	r0, r3
 80052ee:	f7fd f939 	bl	8002564 <HAL_GPIO_EXTI_Callback>
  }
}
 80052f2:	46c0      	nop			; (mov r8, r8)
 80052f4:	46bd      	mov	sp, r7
 80052f6:	b002      	add	sp, #8
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	46c0      	nop			; (mov r8, r8)
 80052fc:	40010400 	.word	0x40010400

08005300 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d101      	bne.n	8005312 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e06c      	b.n	80053ec <HAL_LPTIM_Init+0xec>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	222e      	movs	r2, #46	; 0x2e
 8005316:	5c9b      	ldrb	r3, [r3, r2]
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d107      	bne.n	800532e <HAL_LPTIM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	222d      	movs	r2, #45	; 0x2d
 8005322:	2100      	movs	r1, #0
 8005324:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	0018      	movs	r0, r3
 800532a:	f7fe fc45 	bl	8003bb8 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	222e      	movs	r2, #46	; 0x2e
 8005332:	2102      	movs	r1, #2
 8005334:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d005      	beq.n	8005352 <HAL_LPTIM_Init+0x52>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800534a:	2380      	movs	r3, #128	; 0x80
 800534c:	041b      	lsls	r3, r3, #16
 800534e:	429a      	cmp	r2, r3
 8005350:	d103      	bne.n	800535a <HAL_LPTIM_Init+0x5a>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	221e      	movs	r2, #30
 8005356:	4393      	bics	r3, r2
 8005358:	60fb      	str	r3, [r7, #12]
  }
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	4a25      	ldr	r2, [pc, #148]	; (80053f4 <HAL_LPTIM_Init+0xf4>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d003      	beq.n	800536c <HAL_LPTIM_Init+0x6c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	4a24      	ldr	r2, [pc, #144]	; (80053f8 <HAL_LPTIM_Init+0xf8>)
 8005368:	4013      	ands	r3, r2
 800536a:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	4a23      	ldr	r2, [pc, #140]	; (80053fc <HAL_LPTIM_Init+0xfc>)
 8005370:	4013      	ands	r3, r2
 8005372:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800537c:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8005382:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8005388:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800538e:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	4313      	orrs	r3, r2
 8005394:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	2b01      	cmp	r3, #1
 800539c:	d005      	beq.n	80053aa <HAL_LPTIM_Init+0xaa>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053a2:	2380      	movs	r3, #128	; 0x80
 80053a4:	041b      	lsls	r3, r3, #16
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d107      	bne.n	80053ba <HAL_LPTIM_Init+0xba>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80053b2:	4313      	orrs	r3, r2
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	60fb      	str	r3, [r7, #12]
  }

  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	4a0d      	ldr	r2, [pc, #52]	; (80053f4 <HAL_LPTIM_Init+0xf4>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d00a      	beq.n	80053da <HAL_LPTIM_Init+0xda>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80053cc:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80053d2:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	222e      	movs	r2, #46	; 0x2e
 80053e6:	2101      	movs	r1, #1
 80053e8:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	0018      	movs	r0, r3
 80053ee:	46bd      	mov	sp, r7
 80053f0:	b004      	add	sp, #16
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	0000ffff 	.word	0x0000ffff
 80053f8:	ffff1f3f 	.word	0xffff1f3f
 80053fc:	ff19f1f8 	.word	0xff19f1f8

08005400 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2201      	movs	r2, #1
 8005410:	4013      	ands	r3, r2
 8005412:	2b01      	cmp	r3, #1
 8005414:	d10e      	bne.n	8005434 <HAL_LPTIM_IRQHandler+0x34>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	2201      	movs	r2, #1
 800541e:	4013      	ands	r3, r2
 8005420:	2b01      	cmp	r3, #1
 8005422:	d107      	bne.n	8005434 <HAL_LPTIM_IRQHandler+0x34>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2201      	movs	r2, #1
 800542a:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	0018      	movs	r0, r3
 8005430:	f000 f888 	bl	8005544 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2202      	movs	r2, #2
 800543c:	4013      	ands	r3, r2
 800543e:	2b02      	cmp	r3, #2
 8005440:	d10e      	bne.n	8005460 <HAL_LPTIM_IRQHandler+0x60>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	2202      	movs	r2, #2
 800544a:	4013      	ands	r3, r2
 800544c:	2b02      	cmp	r3, #2
 800544e:	d107      	bne.n	8005460 <HAL_LPTIM_IRQHandler+0x60>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2202      	movs	r2, #2
 8005456:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	0018      	movs	r0, r3
 800545c:	f000 f87a 	bl	8005554 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2204      	movs	r2, #4
 8005468:	4013      	ands	r3, r2
 800546a:	2b04      	cmp	r3, #4
 800546c:	d10e      	bne.n	800548c <HAL_LPTIM_IRQHandler+0x8c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	2204      	movs	r2, #4
 8005476:	4013      	ands	r3, r2
 8005478:	2b04      	cmp	r3, #4
 800547a:	d107      	bne.n	800548c <HAL_LPTIM_IRQHandler+0x8c>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2204      	movs	r2, #4
 8005482:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	0018      	movs	r0, r3
 8005488:	f000 f86c 	bl	8005564 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2208      	movs	r2, #8
 8005494:	4013      	ands	r3, r2
 8005496:	2b08      	cmp	r3, #8
 8005498:	d10e      	bne.n	80054b8 <HAL_LPTIM_IRQHandler+0xb8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	2208      	movs	r2, #8
 80054a2:	4013      	ands	r3, r2
 80054a4:	2b08      	cmp	r3, #8
 80054a6:	d107      	bne.n	80054b8 <HAL_LPTIM_IRQHandler+0xb8>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2208      	movs	r2, #8
 80054ae:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	0018      	movs	r0, r3
 80054b4:	f000 f85e 	bl	8005574 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2210      	movs	r2, #16
 80054c0:	4013      	ands	r3, r2
 80054c2:	2b10      	cmp	r3, #16
 80054c4:	d10e      	bne.n	80054e4 <HAL_LPTIM_IRQHandler+0xe4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	2210      	movs	r2, #16
 80054ce:	4013      	ands	r3, r2
 80054d0:	2b10      	cmp	r3, #16
 80054d2:	d107      	bne.n	80054e4 <HAL_LPTIM_IRQHandler+0xe4>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2210      	movs	r2, #16
 80054da:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	0018      	movs	r0, r3
 80054e0:	f000 f850 	bl	8005584 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2220      	movs	r2, #32
 80054ec:	4013      	ands	r3, r2
 80054ee:	2b20      	cmp	r3, #32
 80054f0:	d10e      	bne.n	8005510 <HAL_LPTIM_IRQHandler+0x110>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	2220      	movs	r2, #32
 80054fa:	4013      	ands	r3, r2
 80054fc:	2b20      	cmp	r3, #32
 80054fe:	d107      	bne.n	8005510 <HAL_LPTIM_IRQHandler+0x110>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2220      	movs	r2, #32
 8005506:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	0018      	movs	r0, r3
 800550c:	f000 f842 	bl	8005594 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2240      	movs	r2, #64	; 0x40
 8005518:	4013      	ands	r3, r2
 800551a:	2b40      	cmp	r3, #64	; 0x40
 800551c:	d10e      	bne.n	800553c <HAL_LPTIM_IRQHandler+0x13c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	2240      	movs	r2, #64	; 0x40
 8005526:	4013      	ands	r3, r2
 8005528:	2b40      	cmp	r3, #64	; 0x40
 800552a:	d107      	bne.n	800553c <HAL_LPTIM_IRQHandler+0x13c>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2240      	movs	r2, #64	; 0x40
 8005532:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	0018      	movs	r0, r3
 8005538:	f000 f834 	bl	80055a4 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 800553c:	46c0      	nop			; (mov r8, r8)
 800553e:	46bd      	mov	sp, r7
 8005540:	b002      	add	sp, #8
 8005542:	bd80      	pop	{r7, pc}

08005544 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 800554c:	46c0      	nop			; (mov r8, r8)
 800554e:	46bd      	mov	sp, r7
 8005550:	b002      	add	sp, #8
 8005552:	bd80      	pop	{r7, pc}

08005554 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 800555c:	46c0      	nop			; (mov r8, r8)
 800555e:	46bd      	mov	sp, r7
 8005560:	b002      	add	sp, #8
 8005562:	bd80      	pop	{r7, pc}

08005564 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 800556c:	46c0      	nop			; (mov r8, r8)
 800556e:	46bd      	mov	sp, r7
 8005570:	b002      	add	sp, #8
 8005572:	bd80      	pop	{r7, pc}

08005574 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 800557c:	46c0      	nop			; (mov r8, r8)
 800557e:	46bd      	mov	sp, r7
 8005580:	b002      	add	sp, #8
 8005582:	bd80      	pop	{r7, pc}

08005584 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 800558c:	46c0      	nop			; (mov r8, r8)
 800558e:	46bd      	mov	sp, r7
 8005590:	b002      	add	sp, #8
 8005592:	bd80      	pop	{r7, pc}

08005594 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 800559c:	46c0      	nop			; (mov r8, r8)
 800559e:	46bd      	mov	sp, r7
 80055a0:	b002      	add	sp, #8
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 80055ac:	46c0      	nop			; (mov r8, r8)
 80055ae:	46bd      	mov	sp, r7
 80055b0:	b002      	add	sp, #8
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 80055b8:	4b04      	ldr	r3, [pc, #16]	; (80055cc <HAL_PWR_EnableBkUpAccess+0x18>)
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	4b03      	ldr	r3, [pc, #12]	; (80055cc <HAL_PWR_EnableBkUpAccess+0x18>)
 80055be:	2180      	movs	r1, #128	; 0x80
 80055c0:	0049      	lsls	r1, r1, #1
 80055c2:	430a      	orrs	r2, r1
 80055c4:	601a      	str	r2, [r3, #0]
}
 80055c6:	46c0      	nop			; (mov r8, r8)
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	40007000 	.word	0x40007000

080055d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055d0:	b5b0      	push	{r4, r5, r7, lr}
 80055d2:	b08a      	sub	sp, #40	; 0x28
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d102      	bne.n	80055e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	f000 fbbc 	bl	8005d5c <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055e4:	4bc8      	ldr	r3, [pc, #800]	; (8005908 <HAL_RCC_OscConfig+0x338>)
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	220c      	movs	r2, #12
 80055ea:	4013      	ands	r3, r2
 80055ec:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055ee:	4bc6      	ldr	r3, [pc, #792]	; (8005908 <HAL_RCC_OscConfig+0x338>)
 80055f0:	68da      	ldr	r2, [r3, #12]
 80055f2:	2380      	movs	r3, #128	; 0x80
 80055f4:	025b      	lsls	r3, r3, #9
 80055f6:	4013      	ands	r3, r2
 80055f8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2201      	movs	r2, #1
 8005600:	4013      	ands	r3, r2
 8005602:	d100      	bne.n	8005606 <HAL_RCC_OscConfig+0x36>
 8005604:	e07e      	b.n	8005704 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	2b08      	cmp	r3, #8
 800560a:	d007      	beq.n	800561c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	2b0c      	cmp	r3, #12
 8005610:	d112      	bne.n	8005638 <HAL_RCC_OscConfig+0x68>
 8005612:	69ba      	ldr	r2, [r7, #24]
 8005614:	2380      	movs	r3, #128	; 0x80
 8005616:	025b      	lsls	r3, r3, #9
 8005618:	429a      	cmp	r2, r3
 800561a:	d10d      	bne.n	8005638 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800561c:	4bba      	ldr	r3, [pc, #744]	; (8005908 <HAL_RCC_OscConfig+0x338>)
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	2380      	movs	r3, #128	; 0x80
 8005622:	029b      	lsls	r3, r3, #10
 8005624:	4013      	ands	r3, r2
 8005626:	d100      	bne.n	800562a <HAL_RCC_OscConfig+0x5a>
 8005628:	e06b      	b.n	8005702 <HAL_RCC_OscConfig+0x132>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d167      	bne.n	8005702 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	f000 fb92 	bl	8005d5c <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	685a      	ldr	r2, [r3, #4]
 800563c:	2380      	movs	r3, #128	; 0x80
 800563e:	025b      	lsls	r3, r3, #9
 8005640:	429a      	cmp	r2, r3
 8005642:	d107      	bne.n	8005654 <HAL_RCC_OscConfig+0x84>
 8005644:	4bb0      	ldr	r3, [pc, #704]	; (8005908 <HAL_RCC_OscConfig+0x338>)
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	4baf      	ldr	r3, [pc, #700]	; (8005908 <HAL_RCC_OscConfig+0x338>)
 800564a:	2180      	movs	r1, #128	; 0x80
 800564c:	0249      	lsls	r1, r1, #9
 800564e:	430a      	orrs	r2, r1
 8005650:	601a      	str	r2, [r3, #0]
 8005652:	e027      	b.n	80056a4 <HAL_RCC_OscConfig+0xd4>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685a      	ldr	r2, [r3, #4]
 8005658:	23a0      	movs	r3, #160	; 0xa0
 800565a:	02db      	lsls	r3, r3, #11
 800565c:	429a      	cmp	r2, r3
 800565e:	d10e      	bne.n	800567e <HAL_RCC_OscConfig+0xae>
 8005660:	4ba9      	ldr	r3, [pc, #676]	; (8005908 <HAL_RCC_OscConfig+0x338>)
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	4ba8      	ldr	r3, [pc, #672]	; (8005908 <HAL_RCC_OscConfig+0x338>)
 8005666:	2180      	movs	r1, #128	; 0x80
 8005668:	02c9      	lsls	r1, r1, #11
 800566a:	430a      	orrs	r2, r1
 800566c:	601a      	str	r2, [r3, #0]
 800566e:	4ba6      	ldr	r3, [pc, #664]	; (8005908 <HAL_RCC_OscConfig+0x338>)
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	4ba5      	ldr	r3, [pc, #660]	; (8005908 <HAL_RCC_OscConfig+0x338>)
 8005674:	2180      	movs	r1, #128	; 0x80
 8005676:	0249      	lsls	r1, r1, #9
 8005678:	430a      	orrs	r2, r1
 800567a:	601a      	str	r2, [r3, #0]
 800567c:	e012      	b.n	80056a4 <HAL_RCC_OscConfig+0xd4>
 800567e:	4ba2      	ldr	r3, [pc, #648]	; (8005908 <HAL_RCC_OscConfig+0x338>)
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	4ba1      	ldr	r3, [pc, #644]	; (8005908 <HAL_RCC_OscConfig+0x338>)
 8005684:	49a1      	ldr	r1, [pc, #644]	; (800590c <HAL_RCC_OscConfig+0x33c>)
 8005686:	400a      	ands	r2, r1
 8005688:	601a      	str	r2, [r3, #0]
 800568a:	4b9f      	ldr	r3, [pc, #636]	; (8005908 <HAL_RCC_OscConfig+0x338>)
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	2380      	movs	r3, #128	; 0x80
 8005690:	025b      	lsls	r3, r3, #9
 8005692:	4013      	ands	r3, r2
 8005694:	60fb      	str	r3, [r7, #12]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	4b9b      	ldr	r3, [pc, #620]	; (8005908 <HAL_RCC_OscConfig+0x338>)
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	4b9a      	ldr	r3, [pc, #616]	; (8005908 <HAL_RCC_OscConfig+0x338>)
 800569e:	499c      	ldr	r1, [pc, #624]	; (8005910 <HAL_RCC_OscConfig+0x340>)
 80056a0:	400a      	ands	r2, r1
 80056a2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d015      	beq.n	80056d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ac:	f7fe ff50 	bl	8004550 <HAL_GetTick>
 80056b0:	0003      	movs	r3, r0
 80056b2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80056b4:	e009      	b.n	80056ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056b6:	f7fe ff4b 	bl	8004550 <HAL_GetTick>
 80056ba:	0002      	movs	r2, r0
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	2b64      	cmp	r3, #100	; 0x64
 80056c2:	d902      	bls.n	80056ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	f000 fb49 	bl	8005d5c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80056ca:	4b8f      	ldr	r3, [pc, #572]	; (8005908 <HAL_RCC_OscConfig+0x338>)
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	2380      	movs	r3, #128	; 0x80
 80056d0:	029b      	lsls	r3, r3, #10
 80056d2:	4013      	ands	r3, r2
 80056d4:	d0ef      	beq.n	80056b6 <HAL_RCC_OscConfig+0xe6>
 80056d6:	e015      	b.n	8005704 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056d8:	f7fe ff3a 	bl	8004550 <HAL_GetTick>
 80056dc:	0003      	movs	r3, r0
 80056de:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80056e0:	e008      	b.n	80056f4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056e2:	f7fe ff35 	bl	8004550 <HAL_GetTick>
 80056e6:	0002      	movs	r2, r0
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	2b64      	cmp	r3, #100	; 0x64
 80056ee:	d901      	bls.n	80056f4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80056f0:	2303      	movs	r3, #3
 80056f2:	e333      	b.n	8005d5c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80056f4:	4b84      	ldr	r3, [pc, #528]	; (8005908 <HAL_RCC_OscConfig+0x338>)
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	2380      	movs	r3, #128	; 0x80
 80056fa:	029b      	lsls	r3, r3, #10
 80056fc:	4013      	ands	r3, r2
 80056fe:	d1f0      	bne.n	80056e2 <HAL_RCC_OscConfig+0x112>
 8005700:	e000      	b.n	8005704 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005702:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2202      	movs	r2, #2
 800570a:	4013      	ands	r3, r2
 800570c:	d100      	bne.n	8005710 <HAL_RCC_OscConfig+0x140>
 800570e:	e098      	b.n	8005842 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8005716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005718:	2220      	movs	r2, #32
 800571a:	4013      	ands	r3, r2
 800571c:	d009      	beq.n	8005732 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800571e:	4b7a      	ldr	r3, [pc, #488]	; (8005908 <HAL_RCC_OscConfig+0x338>)
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	4b79      	ldr	r3, [pc, #484]	; (8005908 <HAL_RCC_OscConfig+0x338>)
 8005724:	2120      	movs	r1, #32
 8005726:	430a      	orrs	r2, r1
 8005728:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572c:	2220      	movs	r2, #32
 800572e:	4393      	bics	r3, r2
 8005730:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	2b04      	cmp	r3, #4
 8005736:	d005      	beq.n	8005744 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	2b0c      	cmp	r3, #12
 800573c:	d13d      	bne.n	80057ba <HAL_RCC_OscConfig+0x1ea>
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d13a      	bne.n	80057ba <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8005744:	4b70      	ldr	r3, [pc, #448]	; (8005908 <HAL_RCC_OscConfig+0x338>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2204      	movs	r2, #4
 800574a:	4013      	ands	r3, r2
 800574c:	d004      	beq.n	8005758 <HAL_RCC_OscConfig+0x188>
 800574e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005750:	2b00      	cmp	r3, #0
 8005752:	d101      	bne.n	8005758 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e301      	b.n	8005d5c <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005758:	4b6b      	ldr	r3, [pc, #428]	; (8005908 <HAL_RCC_OscConfig+0x338>)
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	4a6d      	ldr	r2, [pc, #436]	; (8005914 <HAL_RCC_OscConfig+0x344>)
 800575e:	4013      	ands	r3, r2
 8005760:	0019      	movs	r1, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	021a      	lsls	r2, r3, #8
 8005768:	4b67      	ldr	r3, [pc, #412]	; (8005908 <HAL_RCC_OscConfig+0x338>)
 800576a:	430a      	orrs	r2, r1
 800576c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800576e:	4b66      	ldr	r3, [pc, #408]	; (8005908 <HAL_RCC_OscConfig+0x338>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2209      	movs	r2, #9
 8005774:	4393      	bics	r3, r2
 8005776:	0019      	movs	r1, r3
 8005778:	4b63      	ldr	r3, [pc, #396]	; (8005908 <HAL_RCC_OscConfig+0x338>)
 800577a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800577c:	430a      	orrs	r2, r1
 800577e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005780:	f000 fc20 	bl	8005fc4 <HAL_RCC_GetSysClockFreq>
 8005784:	0001      	movs	r1, r0
 8005786:	4b60      	ldr	r3, [pc, #384]	; (8005908 <HAL_RCC_OscConfig+0x338>)
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	091b      	lsrs	r3, r3, #4
 800578c:	220f      	movs	r2, #15
 800578e:	4013      	ands	r3, r2
 8005790:	4a61      	ldr	r2, [pc, #388]	; (8005918 <HAL_RCC_OscConfig+0x348>)
 8005792:	5cd3      	ldrb	r3, [r2, r3]
 8005794:	000a      	movs	r2, r1
 8005796:	40da      	lsrs	r2, r3
 8005798:	4b60      	ldr	r3, [pc, #384]	; (800591c <HAL_RCC_OscConfig+0x34c>)
 800579a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 800579c:	2513      	movs	r5, #19
 800579e:	197c      	adds	r4, r7, r5
 80057a0:	2000      	movs	r0, #0
 80057a2:	f7fe fe9f 	bl	80044e4 <HAL_InitTick>
 80057a6:	0003      	movs	r3, r0
 80057a8:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80057aa:	197b      	adds	r3, r7, r5
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d047      	beq.n	8005842 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80057b2:	2313      	movs	r3, #19
 80057b4:	18fb      	adds	r3, r7, r3
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	e2d0      	b.n	8005d5c <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80057ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d027      	beq.n	8005810 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80057c0:	4b51      	ldr	r3, [pc, #324]	; (8005908 <HAL_RCC_OscConfig+0x338>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2209      	movs	r2, #9
 80057c6:	4393      	bics	r3, r2
 80057c8:	0019      	movs	r1, r3
 80057ca:	4b4f      	ldr	r3, [pc, #316]	; (8005908 <HAL_RCC_OscConfig+0x338>)
 80057cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ce:	430a      	orrs	r2, r1
 80057d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057d2:	f7fe febd 	bl	8004550 <HAL_GetTick>
 80057d6:	0003      	movs	r3, r0
 80057d8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80057da:	e008      	b.n	80057ee <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057dc:	f7fe feb8 	bl	8004550 <HAL_GetTick>
 80057e0:	0002      	movs	r2, r0
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d901      	bls.n	80057ee <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	e2b6      	b.n	8005d5c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80057ee:	4b46      	ldr	r3, [pc, #280]	; (8005908 <HAL_RCC_OscConfig+0x338>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2204      	movs	r2, #4
 80057f4:	4013      	ands	r3, r2
 80057f6:	d0f1      	beq.n	80057dc <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057f8:	4b43      	ldr	r3, [pc, #268]	; (8005908 <HAL_RCC_OscConfig+0x338>)
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	4a45      	ldr	r2, [pc, #276]	; (8005914 <HAL_RCC_OscConfig+0x344>)
 80057fe:	4013      	ands	r3, r2
 8005800:	0019      	movs	r1, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	021a      	lsls	r2, r3, #8
 8005808:	4b3f      	ldr	r3, [pc, #252]	; (8005908 <HAL_RCC_OscConfig+0x338>)
 800580a:	430a      	orrs	r2, r1
 800580c:	605a      	str	r2, [r3, #4]
 800580e:	e018      	b.n	8005842 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005810:	4b3d      	ldr	r3, [pc, #244]	; (8005908 <HAL_RCC_OscConfig+0x338>)
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	4b3c      	ldr	r3, [pc, #240]	; (8005908 <HAL_RCC_OscConfig+0x338>)
 8005816:	2101      	movs	r1, #1
 8005818:	438a      	bics	r2, r1
 800581a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800581c:	f7fe fe98 	bl	8004550 <HAL_GetTick>
 8005820:	0003      	movs	r3, r0
 8005822:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005824:	e008      	b.n	8005838 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005826:	f7fe fe93 	bl	8004550 <HAL_GetTick>
 800582a:	0002      	movs	r2, r0
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	2b02      	cmp	r3, #2
 8005832:	d901      	bls.n	8005838 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e291      	b.n	8005d5c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005838:	4b33      	ldr	r3, [pc, #204]	; (8005908 <HAL_RCC_OscConfig+0x338>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2204      	movs	r2, #4
 800583e:	4013      	ands	r3, r2
 8005840:	d1f1      	bne.n	8005826 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2210      	movs	r2, #16
 8005848:	4013      	ands	r3, r2
 800584a:	d100      	bne.n	800584e <HAL_RCC_OscConfig+0x27e>
 800584c:	e09f      	b.n	800598e <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d13f      	bne.n	80058d4 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005854:	4b2c      	ldr	r3, [pc, #176]	; (8005908 <HAL_RCC_OscConfig+0x338>)
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	2380      	movs	r3, #128	; 0x80
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	4013      	ands	r3, r2
 800585e:	d005      	beq.n	800586c <HAL_RCC_OscConfig+0x29c>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	69db      	ldr	r3, [r3, #28]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d101      	bne.n	800586c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e277      	b.n	8005d5c <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800586c:	4b26      	ldr	r3, [pc, #152]	; (8005908 <HAL_RCC_OscConfig+0x338>)
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	4a2b      	ldr	r2, [pc, #172]	; (8005920 <HAL_RCC_OscConfig+0x350>)
 8005872:	4013      	ands	r3, r2
 8005874:	0019      	movs	r1, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800587a:	4b23      	ldr	r3, [pc, #140]	; (8005908 <HAL_RCC_OscConfig+0x338>)
 800587c:	430a      	orrs	r2, r1
 800587e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005880:	4b21      	ldr	r3, [pc, #132]	; (8005908 <HAL_RCC_OscConfig+0x338>)
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	021b      	lsls	r3, r3, #8
 8005886:	0a19      	lsrs	r1, r3, #8
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6a1b      	ldr	r3, [r3, #32]
 800588c:	061a      	lsls	r2, r3, #24
 800588e:	4b1e      	ldr	r3, [pc, #120]	; (8005908 <HAL_RCC_OscConfig+0x338>)
 8005890:	430a      	orrs	r2, r1
 8005892:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005898:	0b5b      	lsrs	r3, r3, #13
 800589a:	3301      	adds	r3, #1
 800589c:	2280      	movs	r2, #128	; 0x80
 800589e:	0212      	lsls	r2, r2, #8
 80058a0:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80058a2:	4b19      	ldr	r3, [pc, #100]	; (8005908 <HAL_RCC_OscConfig+0x338>)
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	091b      	lsrs	r3, r3, #4
 80058a8:	210f      	movs	r1, #15
 80058aa:	400b      	ands	r3, r1
 80058ac:	491a      	ldr	r1, [pc, #104]	; (8005918 <HAL_RCC_OscConfig+0x348>)
 80058ae:	5ccb      	ldrb	r3, [r1, r3]
 80058b0:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80058b2:	4b1a      	ldr	r3, [pc, #104]	; (800591c <HAL_RCC_OscConfig+0x34c>)
 80058b4:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80058b6:	2513      	movs	r5, #19
 80058b8:	197c      	adds	r4, r7, r5
 80058ba:	2000      	movs	r0, #0
 80058bc:	f7fe fe12 	bl	80044e4 <HAL_InitTick>
 80058c0:	0003      	movs	r3, r0
 80058c2:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80058c4:	197b      	adds	r3, r7, r5
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d060      	beq.n	800598e <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 80058cc:	2313      	movs	r3, #19
 80058ce:	18fb      	adds	r3, r7, r3
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	e243      	b.n	8005d5c <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	69db      	ldr	r3, [r3, #28]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d03e      	beq.n	800595a <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80058dc:	4b0a      	ldr	r3, [pc, #40]	; (8005908 <HAL_RCC_OscConfig+0x338>)
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	4b09      	ldr	r3, [pc, #36]	; (8005908 <HAL_RCC_OscConfig+0x338>)
 80058e2:	2180      	movs	r1, #128	; 0x80
 80058e4:	0049      	lsls	r1, r1, #1
 80058e6:	430a      	orrs	r2, r1
 80058e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058ea:	f7fe fe31 	bl	8004550 <HAL_GetTick>
 80058ee:	0003      	movs	r3, r0
 80058f0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80058f2:	e017      	b.n	8005924 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80058f4:	f7fe fe2c 	bl	8004550 <HAL_GetTick>
 80058f8:	0002      	movs	r2, r0
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	2b02      	cmp	r3, #2
 8005900:	d910      	bls.n	8005924 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e22a      	b.n	8005d5c <HAL_RCC_OscConfig+0x78c>
 8005906:	46c0      	nop			; (mov r8, r8)
 8005908:	40021000 	.word	0x40021000
 800590c:	fffeffff 	.word	0xfffeffff
 8005910:	fffbffff 	.word	0xfffbffff
 8005914:	ffffe0ff 	.word	0xffffe0ff
 8005918:	08009634 	.word	0x08009634
 800591c:	20000064 	.word	0x20000064
 8005920:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005924:	4bc6      	ldr	r3, [pc, #792]	; (8005c40 <HAL_RCC_OscConfig+0x670>)
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	2380      	movs	r3, #128	; 0x80
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	4013      	ands	r3, r2
 800592e:	d0e1      	beq.n	80058f4 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005930:	4bc3      	ldr	r3, [pc, #780]	; (8005c40 <HAL_RCC_OscConfig+0x670>)
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	4ac3      	ldr	r2, [pc, #780]	; (8005c44 <HAL_RCC_OscConfig+0x674>)
 8005936:	4013      	ands	r3, r2
 8005938:	0019      	movs	r1, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800593e:	4bc0      	ldr	r3, [pc, #768]	; (8005c40 <HAL_RCC_OscConfig+0x670>)
 8005940:	430a      	orrs	r2, r1
 8005942:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005944:	4bbe      	ldr	r3, [pc, #760]	; (8005c40 <HAL_RCC_OscConfig+0x670>)
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	021b      	lsls	r3, r3, #8
 800594a:	0a19      	lsrs	r1, r3, #8
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a1b      	ldr	r3, [r3, #32]
 8005950:	061a      	lsls	r2, r3, #24
 8005952:	4bbb      	ldr	r3, [pc, #748]	; (8005c40 <HAL_RCC_OscConfig+0x670>)
 8005954:	430a      	orrs	r2, r1
 8005956:	605a      	str	r2, [r3, #4]
 8005958:	e019      	b.n	800598e <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800595a:	4bb9      	ldr	r3, [pc, #740]	; (8005c40 <HAL_RCC_OscConfig+0x670>)
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	4bb8      	ldr	r3, [pc, #736]	; (8005c40 <HAL_RCC_OscConfig+0x670>)
 8005960:	49b9      	ldr	r1, [pc, #740]	; (8005c48 <HAL_RCC_OscConfig+0x678>)
 8005962:	400a      	ands	r2, r1
 8005964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005966:	f7fe fdf3 	bl	8004550 <HAL_GetTick>
 800596a:	0003      	movs	r3, r0
 800596c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800596e:	e008      	b.n	8005982 <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005970:	f7fe fdee 	bl	8004550 <HAL_GetTick>
 8005974:	0002      	movs	r2, r0
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	2b02      	cmp	r3, #2
 800597c:	d901      	bls.n	8005982 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	e1ec      	b.n	8005d5c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005982:	4baf      	ldr	r3, [pc, #700]	; (8005c40 <HAL_RCC_OscConfig+0x670>)
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	2380      	movs	r3, #128	; 0x80
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	4013      	ands	r3, r2
 800598c:	d1f0      	bne.n	8005970 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2208      	movs	r2, #8
 8005994:	4013      	ands	r3, r2
 8005996:	d036      	beq.n	8005a06 <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	695b      	ldr	r3, [r3, #20]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d019      	beq.n	80059d4 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059a0:	4ba7      	ldr	r3, [pc, #668]	; (8005c40 <HAL_RCC_OscConfig+0x670>)
 80059a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80059a4:	4ba6      	ldr	r3, [pc, #664]	; (8005c40 <HAL_RCC_OscConfig+0x670>)
 80059a6:	2101      	movs	r1, #1
 80059a8:	430a      	orrs	r2, r1
 80059aa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059ac:	f7fe fdd0 	bl	8004550 <HAL_GetTick>
 80059b0:	0003      	movs	r3, r0
 80059b2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80059b4:	e008      	b.n	80059c8 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059b6:	f7fe fdcb 	bl	8004550 <HAL_GetTick>
 80059ba:	0002      	movs	r2, r0
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d901      	bls.n	80059c8 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 80059c4:	2303      	movs	r3, #3
 80059c6:	e1c9      	b.n	8005d5c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80059c8:	4b9d      	ldr	r3, [pc, #628]	; (8005c40 <HAL_RCC_OscConfig+0x670>)
 80059ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059cc:	2202      	movs	r2, #2
 80059ce:	4013      	ands	r3, r2
 80059d0:	d0f1      	beq.n	80059b6 <HAL_RCC_OscConfig+0x3e6>
 80059d2:	e018      	b.n	8005a06 <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059d4:	4b9a      	ldr	r3, [pc, #616]	; (8005c40 <HAL_RCC_OscConfig+0x670>)
 80059d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80059d8:	4b99      	ldr	r3, [pc, #612]	; (8005c40 <HAL_RCC_OscConfig+0x670>)
 80059da:	2101      	movs	r1, #1
 80059dc:	438a      	bics	r2, r1
 80059de:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059e0:	f7fe fdb6 	bl	8004550 <HAL_GetTick>
 80059e4:	0003      	movs	r3, r0
 80059e6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80059e8:	e008      	b.n	80059fc <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059ea:	f7fe fdb1 	bl	8004550 <HAL_GetTick>
 80059ee:	0002      	movs	r2, r0
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d901      	bls.n	80059fc <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e1af      	b.n	8005d5c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80059fc:	4b90      	ldr	r3, [pc, #576]	; (8005c40 <HAL_RCC_OscConfig+0x670>)
 80059fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a00:	2202      	movs	r2, #2
 8005a02:	4013      	ands	r3, r2
 8005a04:	d1f1      	bne.n	80059ea <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2204      	movs	r2, #4
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	d100      	bne.n	8005a12 <HAL_RCC_OscConfig+0x442>
 8005a10:	e0af      	b.n	8005b72 <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a12:	2323      	movs	r3, #35	; 0x23
 8005a14:	18fb      	adds	r3, r7, r3
 8005a16:	2200      	movs	r2, #0
 8005a18:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a1a:	4b89      	ldr	r3, [pc, #548]	; (8005c40 <HAL_RCC_OscConfig+0x670>)
 8005a1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a1e:	2380      	movs	r3, #128	; 0x80
 8005a20:	055b      	lsls	r3, r3, #21
 8005a22:	4013      	ands	r3, r2
 8005a24:	d10a      	bne.n	8005a3c <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a26:	4b86      	ldr	r3, [pc, #536]	; (8005c40 <HAL_RCC_OscConfig+0x670>)
 8005a28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a2a:	4b85      	ldr	r3, [pc, #532]	; (8005c40 <HAL_RCC_OscConfig+0x670>)
 8005a2c:	2180      	movs	r1, #128	; 0x80
 8005a2e:	0549      	lsls	r1, r1, #21
 8005a30:	430a      	orrs	r2, r1
 8005a32:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005a34:	2323      	movs	r3, #35	; 0x23
 8005a36:	18fb      	adds	r3, r7, r3
 8005a38:	2201      	movs	r2, #1
 8005a3a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a3c:	4b83      	ldr	r3, [pc, #524]	; (8005c4c <HAL_RCC_OscConfig+0x67c>)
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	2380      	movs	r3, #128	; 0x80
 8005a42:	005b      	lsls	r3, r3, #1
 8005a44:	4013      	ands	r3, r2
 8005a46:	d11a      	bne.n	8005a7e <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a48:	4b80      	ldr	r3, [pc, #512]	; (8005c4c <HAL_RCC_OscConfig+0x67c>)
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	4b7f      	ldr	r3, [pc, #508]	; (8005c4c <HAL_RCC_OscConfig+0x67c>)
 8005a4e:	2180      	movs	r1, #128	; 0x80
 8005a50:	0049      	lsls	r1, r1, #1
 8005a52:	430a      	orrs	r2, r1
 8005a54:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a56:	f7fe fd7b 	bl	8004550 <HAL_GetTick>
 8005a5a:	0003      	movs	r3, r0
 8005a5c:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a5e:	e008      	b.n	8005a72 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a60:	f7fe fd76 	bl	8004550 <HAL_GetTick>
 8005a64:	0002      	movs	r2, r0
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	2b64      	cmp	r3, #100	; 0x64
 8005a6c:	d901      	bls.n	8005a72 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e174      	b.n	8005d5c <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a72:	4b76      	ldr	r3, [pc, #472]	; (8005c4c <HAL_RCC_OscConfig+0x67c>)
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	2380      	movs	r3, #128	; 0x80
 8005a78:	005b      	lsls	r3, r3, #1
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	d0f0      	beq.n	8005a60 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	689a      	ldr	r2, [r3, #8]
 8005a82:	2380      	movs	r3, #128	; 0x80
 8005a84:	005b      	lsls	r3, r3, #1
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d107      	bne.n	8005a9a <HAL_RCC_OscConfig+0x4ca>
 8005a8a:	4b6d      	ldr	r3, [pc, #436]	; (8005c40 <HAL_RCC_OscConfig+0x670>)
 8005a8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a8e:	4b6c      	ldr	r3, [pc, #432]	; (8005c40 <HAL_RCC_OscConfig+0x670>)
 8005a90:	2180      	movs	r1, #128	; 0x80
 8005a92:	0049      	lsls	r1, r1, #1
 8005a94:	430a      	orrs	r2, r1
 8005a96:	651a      	str	r2, [r3, #80]	; 0x50
 8005a98:	e031      	b.n	8005afe <HAL_RCC_OscConfig+0x52e>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d10c      	bne.n	8005abc <HAL_RCC_OscConfig+0x4ec>
 8005aa2:	4b67      	ldr	r3, [pc, #412]	; (8005c40 <HAL_RCC_OscConfig+0x670>)
 8005aa4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005aa6:	4b66      	ldr	r3, [pc, #408]	; (8005c40 <HAL_RCC_OscConfig+0x670>)
 8005aa8:	4967      	ldr	r1, [pc, #412]	; (8005c48 <HAL_RCC_OscConfig+0x678>)
 8005aaa:	400a      	ands	r2, r1
 8005aac:	651a      	str	r2, [r3, #80]	; 0x50
 8005aae:	4b64      	ldr	r3, [pc, #400]	; (8005c40 <HAL_RCC_OscConfig+0x670>)
 8005ab0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ab2:	4b63      	ldr	r3, [pc, #396]	; (8005c40 <HAL_RCC_OscConfig+0x670>)
 8005ab4:	4966      	ldr	r1, [pc, #408]	; (8005c50 <HAL_RCC_OscConfig+0x680>)
 8005ab6:	400a      	ands	r2, r1
 8005ab8:	651a      	str	r2, [r3, #80]	; 0x50
 8005aba:	e020      	b.n	8005afe <HAL_RCC_OscConfig+0x52e>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	689a      	ldr	r2, [r3, #8]
 8005ac0:	23a0      	movs	r3, #160	; 0xa0
 8005ac2:	00db      	lsls	r3, r3, #3
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d10e      	bne.n	8005ae6 <HAL_RCC_OscConfig+0x516>
 8005ac8:	4b5d      	ldr	r3, [pc, #372]	; (8005c40 <HAL_RCC_OscConfig+0x670>)
 8005aca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005acc:	4b5c      	ldr	r3, [pc, #368]	; (8005c40 <HAL_RCC_OscConfig+0x670>)
 8005ace:	2180      	movs	r1, #128	; 0x80
 8005ad0:	00c9      	lsls	r1, r1, #3
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	651a      	str	r2, [r3, #80]	; 0x50
 8005ad6:	4b5a      	ldr	r3, [pc, #360]	; (8005c40 <HAL_RCC_OscConfig+0x670>)
 8005ad8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ada:	4b59      	ldr	r3, [pc, #356]	; (8005c40 <HAL_RCC_OscConfig+0x670>)
 8005adc:	2180      	movs	r1, #128	; 0x80
 8005ade:	0049      	lsls	r1, r1, #1
 8005ae0:	430a      	orrs	r2, r1
 8005ae2:	651a      	str	r2, [r3, #80]	; 0x50
 8005ae4:	e00b      	b.n	8005afe <HAL_RCC_OscConfig+0x52e>
 8005ae6:	4b56      	ldr	r3, [pc, #344]	; (8005c40 <HAL_RCC_OscConfig+0x670>)
 8005ae8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005aea:	4b55      	ldr	r3, [pc, #340]	; (8005c40 <HAL_RCC_OscConfig+0x670>)
 8005aec:	4956      	ldr	r1, [pc, #344]	; (8005c48 <HAL_RCC_OscConfig+0x678>)
 8005aee:	400a      	ands	r2, r1
 8005af0:	651a      	str	r2, [r3, #80]	; 0x50
 8005af2:	4b53      	ldr	r3, [pc, #332]	; (8005c40 <HAL_RCC_OscConfig+0x670>)
 8005af4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005af6:	4b52      	ldr	r3, [pc, #328]	; (8005c40 <HAL_RCC_OscConfig+0x670>)
 8005af8:	4955      	ldr	r1, [pc, #340]	; (8005c50 <HAL_RCC_OscConfig+0x680>)
 8005afa:	400a      	ands	r2, r1
 8005afc:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d015      	beq.n	8005b32 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b06:	f7fe fd23 	bl	8004550 <HAL_GetTick>
 8005b0a:	0003      	movs	r3, r0
 8005b0c:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b0e:	e009      	b.n	8005b24 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b10:	f7fe fd1e 	bl	8004550 <HAL_GetTick>
 8005b14:	0002      	movs	r2, r0
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	4a4e      	ldr	r2, [pc, #312]	; (8005c54 <HAL_RCC_OscConfig+0x684>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d901      	bls.n	8005b24 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	e11b      	b.n	8005d5c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b24:	4b46      	ldr	r3, [pc, #280]	; (8005c40 <HAL_RCC_OscConfig+0x670>)
 8005b26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b28:	2380      	movs	r3, #128	; 0x80
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	d0ef      	beq.n	8005b10 <HAL_RCC_OscConfig+0x540>
 8005b30:	e014      	b.n	8005b5c <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b32:	f7fe fd0d 	bl	8004550 <HAL_GetTick>
 8005b36:	0003      	movs	r3, r0
 8005b38:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005b3a:	e009      	b.n	8005b50 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b3c:	f7fe fd08 	bl	8004550 <HAL_GetTick>
 8005b40:	0002      	movs	r2, r0
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	4a43      	ldr	r2, [pc, #268]	; (8005c54 <HAL_RCC_OscConfig+0x684>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d901      	bls.n	8005b50 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e105      	b.n	8005d5c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005b50:	4b3b      	ldr	r3, [pc, #236]	; (8005c40 <HAL_RCC_OscConfig+0x670>)
 8005b52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b54:	2380      	movs	r3, #128	; 0x80
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	4013      	ands	r3, r2
 8005b5a:	d1ef      	bne.n	8005b3c <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005b5c:	2323      	movs	r3, #35	; 0x23
 8005b5e:	18fb      	adds	r3, r7, r3
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d105      	bne.n	8005b72 <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b66:	4b36      	ldr	r3, [pc, #216]	; (8005c40 <HAL_RCC_OscConfig+0x670>)
 8005b68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b6a:	4b35      	ldr	r3, [pc, #212]	; (8005c40 <HAL_RCC_OscConfig+0x670>)
 8005b6c:	493a      	ldr	r1, [pc, #232]	; (8005c58 <HAL_RCC_OscConfig+0x688>)
 8005b6e:	400a      	ands	r2, r1
 8005b70:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2220      	movs	r2, #32
 8005b78:	4013      	ands	r3, r2
 8005b7a:	d049      	beq.n	8005c10 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	699b      	ldr	r3, [r3, #24]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d026      	beq.n	8005bd2 <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005b84:	4b2e      	ldr	r3, [pc, #184]	; (8005c40 <HAL_RCC_OscConfig+0x670>)
 8005b86:	689a      	ldr	r2, [r3, #8]
 8005b88:	4b2d      	ldr	r3, [pc, #180]	; (8005c40 <HAL_RCC_OscConfig+0x670>)
 8005b8a:	2101      	movs	r1, #1
 8005b8c:	430a      	orrs	r2, r1
 8005b8e:	609a      	str	r2, [r3, #8]
 8005b90:	4b2b      	ldr	r3, [pc, #172]	; (8005c40 <HAL_RCC_OscConfig+0x670>)
 8005b92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b94:	4b2a      	ldr	r3, [pc, #168]	; (8005c40 <HAL_RCC_OscConfig+0x670>)
 8005b96:	2101      	movs	r1, #1
 8005b98:	430a      	orrs	r2, r1
 8005b9a:	635a      	str	r2, [r3, #52]	; 0x34
 8005b9c:	4b2f      	ldr	r3, [pc, #188]	; (8005c5c <HAL_RCC_OscConfig+0x68c>)
 8005b9e:	6a1a      	ldr	r2, [r3, #32]
 8005ba0:	4b2e      	ldr	r3, [pc, #184]	; (8005c5c <HAL_RCC_OscConfig+0x68c>)
 8005ba2:	2180      	movs	r1, #128	; 0x80
 8005ba4:	0189      	lsls	r1, r1, #6
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005baa:	f7fe fcd1 	bl	8004550 <HAL_GetTick>
 8005bae:	0003      	movs	r3, r0
 8005bb0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005bb2:	e008      	b.n	8005bc6 <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005bb4:	f7fe fccc 	bl	8004550 <HAL_GetTick>
 8005bb8:	0002      	movs	r2, r0
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d901      	bls.n	8005bc6 <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e0ca      	b.n	8005d5c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005bc6:	4b1e      	ldr	r3, [pc, #120]	; (8005c40 <HAL_RCC_OscConfig+0x670>)
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	2202      	movs	r2, #2
 8005bcc:	4013      	ands	r3, r2
 8005bce:	d0f1      	beq.n	8005bb4 <HAL_RCC_OscConfig+0x5e4>
 8005bd0:	e01e      	b.n	8005c10 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005bd2:	4b1b      	ldr	r3, [pc, #108]	; (8005c40 <HAL_RCC_OscConfig+0x670>)
 8005bd4:	689a      	ldr	r2, [r3, #8]
 8005bd6:	4b1a      	ldr	r3, [pc, #104]	; (8005c40 <HAL_RCC_OscConfig+0x670>)
 8005bd8:	2101      	movs	r1, #1
 8005bda:	438a      	bics	r2, r1
 8005bdc:	609a      	str	r2, [r3, #8]
 8005bde:	4b1f      	ldr	r3, [pc, #124]	; (8005c5c <HAL_RCC_OscConfig+0x68c>)
 8005be0:	6a1a      	ldr	r2, [r3, #32]
 8005be2:	4b1e      	ldr	r3, [pc, #120]	; (8005c5c <HAL_RCC_OscConfig+0x68c>)
 8005be4:	491e      	ldr	r1, [pc, #120]	; (8005c60 <HAL_RCC_OscConfig+0x690>)
 8005be6:	400a      	ands	r2, r1
 8005be8:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bea:	f7fe fcb1 	bl	8004550 <HAL_GetTick>
 8005bee:	0003      	movs	r3, r0
 8005bf0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005bf2:	e008      	b.n	8005c06 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005bf4:	f7fe fcac 	bl	8004550 <HAL_GetTick>
 8005bf8:	0002      	movs	r2, r0
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	2b02      	cmp	r3, #2
 8005c00:	d901      	bls.n	8005c06 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e0aa      	b.n	8005d5c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005c06:	4b0e      	ldr	r3, [pc, #56]	; (8005c40 <HAL_RCC_OscConfig+0x670>)
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	2202      	movs	r2, #2
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	d1f1      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d100      	bne.n	8005c1a <HAL_RCC_OscConfig+0x64a>
 8005c18:	e09f      	b.n	8005d5a <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	2b0c      	cmp	r3, #12
 8005c1e:	d100      	bne.n	8005c22 <HAL_RCC_OscConfig+0x652>
 8005c20:	e078      	b.n	8005d14 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d159      	bne.n	8005cde <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c2a:	4b05      	ldr	r3, [pc, #20]	; (8005c40 <HAL_RCC_OscConfig+0x670>)
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	4b04      	ldr	r3, [pc, #16]	; (8005c40 <HAL_RCC_OscConfig+0x670>)
 8005c30:	490c      	ldr	r1, [pc, #48]	; (8005c64 <HAL_RCC_OscConfig+0x694>)
 8005c32:	400a      	ands	r2, r1
 8005c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c36:	f7fe fc8b 	bl	8004550 <HAL_GetTick>
 8005c3a:	0003      	movs	r3, r0
 8005c3c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005c3e:	e01c      	b.n	8005c7a <HAL_RCC_OscConfig+0x6aa>
 8005c40:	40021000 	.word	0x40021000
 8005c44:	ffff1fff 	.word	0xffff1fff
 8005c48:	fffffeff 	.word	0xfffffeff
 8005c4c:	40007000 	.word	0x40007000
 8005c50:	fffffbff 	.word	0xfffffbff
 8005c54:	00001388 	.word	0x00001388
 8005c58:	efffffff 	.word	0xefffffff
 8005c5c:	40010000 	.word	0x40010000
 8005c60:	ffffdfff 	.word	0xffffdfff
 8005c64:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c68:	f7fe fc72 	bl	8004550 <HAL_GetTick>
 8005c6c:	0002      	movs	r2, r0
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d901      	bls.n	8005c7a <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 8005c76:	2303      	movs	r3, #3
 8005c78:	e070      	b.n	8005d5c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005c7a:	4b3a      	ldr	r3, [pc, #232]	; (8005d64 <HAL_RCC_OscConfig+0x794>)
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	2380      	movs	r3, #128	; 0x80
 8005c80:	049b      	lsls	r3, r3, #18
 8005c82:	4013      	ands	r3, r2
 8005c84:	d1f0      	bne.n	8005c68 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c86:	4b37      	ldr	r3, [pc, #220]	; (8005d64 <HAL_RCC_OscConfig+0x794>)
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	4a37      	ldr	r2, [pc, #220]	; (8005d68 <HAL_RCC_OscConfig+0x798>)
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	0019      	movs	r1, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c98:	431a      	orrs	r2, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c9e:	431a      	orrs	r2, r3
 8005ca0:	4b30      	ldr	r3, [pc, #192]	; (8005d64 <HAL_RCC_OscConfig+0x794>)
 8005ca2:	430a      	orrs	r2, r1
 8005ca4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ca6:	4b2f      	ldr	r3, [pc, #188]	; (8005d64 <HAL_RCC_OscConfig+0x794>)
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	4b2e      	ldr	r3, [pc, #184]	; (8005d64 <HAL_RCC_OscConfig+0x794>)
 8005cac:	2180      	movs	r1, #128	; 0x80
 8005cae:	0449      	lsls	r1, r1, #17
 8005cb0:	430a      	orrs	r2, r1
 8005cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cb4:	f7fe fc4c 	bl	8004550 <HAL_GetTick>
 8005cb8:	0003      	movs	r3, r0
 8005cba:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005cbc:	e008      	b.n	8005cd0 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cbe:	f7fe fc47 	bl	8004550 <HAL_GetTick>
 8005cc2:	0002      	movs	r2, r0
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	d901      	bls.n	8005cd0 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 8005ccc:	2303      	movs	r3, #3
 8005cce:	e045      	b.n	8005d5c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005cd0:	4b24      	ldr	r3, [pc, #144]	; (8005d64 <HAL_RCC_OscConfig+0x794>)
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	2380      	movs	r3, #128	; 0x80
 8005cd6:	049b      	lsls	r3, r3, #18
 8005cd8:	4013      	ands	r3, r2
 8005cda:	d0f0      	beq.n	8005cbe <HAL_RCC_OscConfig+0x6ee>
 8005cdc:	e03d      	b.n	8005d5a <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cde:	4b21      	ldr	r3, [pc, #132]	; (8005d64 <HAL_RCC_OscConfig+0x794>)
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	4b20      	ldr	r3, [pc, #128]	; (8005d64 <HAL_RCC_OscConfig+0x794>)
 8005ce4:	4921      	ldr	r1, [pc, #132]	; (8005d6c <HAL_RCC_OscConfig+0x79c>)
 8005ce6:	400a      	ands	r2, r1
 8005ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cea:	f7fe fc31 	bl	8004550 <HAL_GetTick>
 8005cee:	0003      	movs	r3, r0
 8005cf0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005cf2:	e008      	b.n	8005d06 <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cf4:	f7fe fc2c 	bl	8004550 <HAL_GetTick>
 8005cf8:	0002      	movs	r2, r0
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d901      	bls.n	8005d06 <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e02a      	b.n	8005d5c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005d06:	4b17      	ldr	r3, [pc, #92]	; (8005d64 <HAL_RCC_OscConfig+0x794>)
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	2380      	movs	r3, #128	; 0x80
 8005d0c:	049b      	lsls	r3, r3, #18
 8005d0e:	4013      	ands	r3, r2
 8005d10:	d1f0      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x724>
 8005d12:	e022      	b.n	8005d5a <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d101      	bne.n	8005d20 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e01d      	b.n	8005d5c <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005d20:	4b10      	ldr	r3, [pc, #64]	; (8005d64 <HAL_RCC_OscConfig+0x794>)
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d26:	69ba      	ldr	r2, [r7, #24]
 8005d28:	2380      	movs	r3, #128	; 0x80
 8005d2a:	025b      	lsls	r3, r3, #9
 8005d2c:	401a      	ands	r2, r3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d10f      	bne.n	8005d56 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005d36:	69ba      	ldr	r2, [r7, #24]
 8005d38:	23f0      	movs	r3, #240	; 0xf0
 8005d3a:	039b      	lsls	r3, r3, #14
 8005d3c:	401a      	ands	r2, r3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d107      	bne.n	8005d56 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005d46:	69ba      	ldr	r2, [r7, #24]
 8005d48:	23c0      	movs	r3, #192	; 0xc0
 8005d4a:	041b      	lsls	r3, r3, #16
 8005d4c:	401a      	ands	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d001      	beq.n	8005d5a <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e000      	b.n	8005d5c <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	0018      	movs	r0, r3
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	b00a      	add	sp, #40	; 0x28
 8005d62:	bdb0      	pop	{r4, r5, r7, pc}
 8005d64:	40021000 	.word	0x40021000
 8005d68:	ff02ffff 	.word	0xff02ffff
 8005d6c:	feffffff 	.word	0xfeffffff

08005d70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d70:	b5b0      	push	{r4, r5, r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d101      	bne.n	8005d84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e10d      	b.n	8005fa0 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d84:	4b88      	ldr	r3, [pc, #544]	; (8005fa8 <HAL_RCC_ClockConfig+0x238>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	683a      	ldr	r2, [r7, #0]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d911      	bls.n	8005db6 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d92:	4b85      	ldr	r3, [pc, #532]	; (8005fa8 <HAL_RCC_ClockConfig+0x238>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2201      	movs	r2, #1
 8005d98:	4393      	bics	r3, r2
 8005d9a:	0019      	movs	r1, r3
 8005d9c:	4b82      	ldr	r3, [pc, #520]	; (8005fa8 <HAL_RCC_ClockConfig+0x238>)
 8005d9e:	683a      	ldr	r2, [r7, #0]
 8005da0:	430a      	orrs	r2, r1
 8005da2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005da4:	4b80      	ldr	r3, [pc, #512]	; (8005fa8 <HAL_RCC_ClockConfig+0x238>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2201      	movs	r2, #1
 8005daa:	4013      	ands	r3, r2
 8005dac:	683a      	ldr	r2, [r7, #0]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d001      	beq.n	8005db6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e0f4      	b.n	8005fa0 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2202      	movs	r2, #2
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	d009      	beq.n	8005dd4 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005dc0:	4b7a      	ldr	r3, [pc, #488]	; (8005fac <HAL_RCC_ClockConfig+0x23c>)
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	22f0      	movs	r2, #240	; 0xf0
 8005dc6:	4393      	bics	r3, r2
 8005dc8:	0019      	movs	r1, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	689a      	ldr	r2, [r3, #8]
 8005dce:	4b77      	ldr	r3, [pc, #476]	; (8005fac <HAL_RCC_ClockConfig+0x23c>)
 8005dd0:	430a      	orrs	r2, r1
 8005dd2:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	4013      	ands	r3, r2
 8005ddc:	d100      	bne.n	8005de0 <HAL_RCC_ClockConfig+0x70>
 8005dde:	e089      	b.n	8005ef4 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	d107      	bne.n	8005df8 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005de8:	4b70      	ldr	r3, [pc, #448]	; (8005fac <HAL_RCC_ClockConfig+0x23c>)
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	2380      	movs	r3, #128	; 0x80
 8005dee:	029b      	lsls	r3, r3, #10
 8005df0:	4013      	ands	r3, r2
 8005df2:	d120      	bne.n	8005e36 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e0d3      	b.n	8005fa0 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	2b03      	cmp	r3, #3
 8005dfe:	d107      	bne.n	8005e10 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005e00:	4b6a      	ldr	r3, [pc, #424]	; (8005fac <HAL_RCC_ClockConfig+0x23c>)
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	2380      	movs	r3, #128	; 0x80
 8005e06:	049b      	lsls	r3, r3, #18
 8005e08:	4013      	ands	r3, r2
 8005e0a:	d114      	bne.n	8005e36 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e0c7      	b.n	8005fa0 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d106      	bne.n	8005e26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e18:	4b64      	ldr	r3, [pc, #400]	; (8005fac <HAL_RCC_ClockConfig+0x23c>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2204      	movs	r2, #4
 8005e1e:	4013      	ands	r3, r2
 8005e20:	d109      	bne.n	8005e36 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e0bc      	b.n	8005fa0 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005e26:	4b61      	ldr	r3, [pc, #388]	; (8005fac <HAL_RCC_ClockConfig+0x23c>)
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	2380      	movs	r3, #128	; 0x80
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	4013      	ands	r3, r2
 8005e30:	d101      	bne.n	8005e36 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e0b4      	b.n	8005fa0 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e36:	4b5d      	ldr	r3, [pc, #372]	; (8005fac <HAL_RCC_ClockConfig+0x23c>)
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	2203      	movs	r2, #3
 8005e3c:	4393      	bics	r3, r2
 8005e3e:	0019      	movs	r1, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685a      	ldr	r2, [r3, #4]
 8005e44:	4b59      	ldr	r3, [pc, #356]	; (8005fac <HAL_RCC_ClockConfig+0x23c>)
 8005e46:	430a      	orrs	r2, r1
 8005e48:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e4a:	f7fe fb81 	bl	8004550 <HAL_GetTick>
 8005e4e:	0003      	movs	r3, r0
 8005e50:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d111      	bne.n	8005e7e <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005e5a:	e009      	b.n	8005e70 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e5c:	f7fe fb78 	bl	8004550 <HAL_GetTick>
 8005e60:	0002      	movs	r2, r0
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	4a52      	ldr	r2, [pc, #328]	; (8005fb0 <HAL_RCC_ClockConfig+0x240>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d901      	bls.n	8005e70 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e097      	b.n	8005fa0 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005e70:	4b4e      	ldr	r3, [pc, #312]	; (8005fac <HAL_RCC_ClockConfig+0x23c>)
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	220c      	movs	r2, #12
 8005e76:	4013      	ands	r3, r2
 8005e78:	2b08      	cmp	r3, #8
 8005e7a:	d1ef      	bne.n	8005e5c <HAL_RCC_ClockConfig+0xec>
 8005e7c:	e03a      	b.n	8005ef4 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	2b03      	cmp	r3, #3
 8005e84:	d111      	bne.n	8005eaa <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e86:	e009      	b.n	8005e9c <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e88:	f7fe fb62 	bl	8004550 <HAL_GetTick>
 8005e8c:	0002      	movs	r2, r0
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	4a47      	ldr	r2, [pc, #284]	; (8005fb0 <HAL_RCC_ClockConfig+0x240>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d901      	bls.n	8005e9c <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	e081      	b.n	8005fa0 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e9c:	4b43      	ldr	r3, [pc, #268]	; (8005fac <HAL_RCC_ClockConfig+0x23c>)
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	220c      	movs	r2, #12
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	2b0c      	cmp	r3, #12
 8005ea6:	d1ef      	bne.n	8005e88 <HAL_RCC_ClockConfig+0x118>
 8005ea8:	e024      	b.n	8005ef4 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d11b      	bne.n	8005eea <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005eb2:	e009      	b.n	8005ec8 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005eb4:	f7fe fb4c 	bl	8004550 <HAL_GetTick>
 8005eb8:	0002      	movs	r2, r0
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	4a3c      	ldr	r2, [pc, #240]	; (8005fb0 <HAL_RCC_ClockConfig+0x240>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d901      	bls.n	8005ec8 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	e06b      	b.n	8005fa0 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005ec8:	4b38      	ldr	r3, [pc, #224]	; (8005fac <HAL_RCC_ClockConfig+0x23c>)
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	220c      	movs	r2, #12
 8005ece:	4013      	ands	r3, r2
 8005ed0:	2b04      	cmp	r3, #4
 8005ed2:	d1ef      	bne.n	8005eb4 <HAL_RCC_ClockConfig+0x144>
 8005ed4:	e00e      	b.n	8005ef4 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ed6:	f7fe fb3b 	bl	8004550 <HAL_GetTick>
 8005eda:	0002      	movs	r2, r0
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	4a33      	ldr	r2, [pc, #204]	; (8005fb0 <HAL_RCC_ClockConfig+0x240>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d901      	bls.n	8005eea <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e05a      	b.n	8005fa0 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005eea:	4b30      	ldr	r3, [pc, #192]	; (8005fac <HAL_RCC_ClockConfig+0x23c>)
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	220c      	movs	r2, #12
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	d1f0      	bne.n	8005ed6 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ef4:	4b2c      	ldr	r3, [pc, #176]	; (8005fa8 <HAL_RCC_ClockConfig+0x238>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	4013      	ands	r3, r2
 8005efc:	683a      	ldr	r2, [r7, #0]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d211      	bcs.n	8005f26 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f02:	4b29      	ldr	r3, [pc, #164]	; (8005fa8 <HAL_RCC_ClockConfig+0x238>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2201      	movs	r2, #1
 8005f08:	4393      	bics	r3, r2
 8005f0a:	0019      	movs	r1, r3
 8005f0c:	4b26      	ldr	r3, [pc, #152]	; (8005fa8 <HAL_RCC_ClockConfig+0x238>)
 8005f0e:	683a      	ldr	r2, [r7, #0]
 8005f10:	430a      	orrs	r2, r1
 8005f12:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f14:	4b24      	ldr	r3, [pc, #144]	; (8005fa8 <HAL_RCC_ClockConfig+0x238>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	683a      	ldr	r2, [r7, #0]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d001      	beq.n	8005f26 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e03c      	b.n	8005fa0 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2204      	movs	r2, #4
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	d009      	beq.n	8005f44 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f30:	4b1e      	ldr	r3, [pc, #120]	; (8005fac <HAL_RCC_ClockConfig+0x23c>)
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	4a1f      	ldr	r2, [pc, #124]	; (8005fb4 <HAL_RCC_ClockConfig+0x244>)
 8005f36:	4013      	ands	r3, r2
 8005f38:	0019      	movs	r1, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	68da      	ldr	r2, [r3, #12]
 8005f3e:	4b1b      	ldr	r3, [pc, #108]	; (8005fac <HAL_RCC_ClockConfig+0x23c>)
 8005f40:	430a      	orrs	r2, r1
 8005f42:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2208      	movs	r2, #8
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	d00a      	beq.n	8005f64 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005f4e:	4b17      	ldr	r3, [pc, #92]	; (8005fac <HAL_RCC_ClockConfig+0x23c>)
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	4a19      	ldr	r2, [pc, #100]	; (8005fb8 <HAL_RCC_ClockConfig+0x248>)
 8005f54:	4013      	ands	r3, r2
 8005f56:	0019      	movs	r1, r3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	00da      	lsls	r2, r3, #3
 8005f5e:	4b13      	ldr	r3, [pc, #76]	; (8005fac <HAL_RCC_ClockConfig+0x23c>)
 8005f60:	430a      	orrs	r2, r1
 8005f62:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f64:	f000 f82e 	bl	8005fc4 <HAL_RCC_GetSysClockFreq>
 8005f68:	0001      	movs	r1, r0
 8005f6a:	4b10      	ldr	r3, [pc, #64]	; (8005fac <HAL_RCC_ClockConfig+0x23c>)
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	091b      	lsrs	r3, r3, #4
 8005f70:	220f      	movs	r2, #15
 8005f72:	4013      	ands	r3, r2
 8005f74:	4a11      	ldr	r2, [pc, #68]	; (8005fbc <HAL_RCC_ClockConfig+0x24c>)
 8005f76:	5cd3      	ldrb	r3, [r2, r3]
 8005f78:	000a      	movs	r2, r1
 8005f7a:	40da      	lsrs	r2, r3
 8005f7c:	4b10      	ldr	r3, [pc, #64]	; (8005fc0 <HAL_RCC_ClockConfig+0x250>)
 8005f7e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8005f80:	250b      	movs	r5, #11
 8005f82:	197c      	adds	r4, r7, r5
 8005f84:	2000      	movs	r0, #0
 8005f86:	f7fe faad 	bl	80044e4 <HAL_InitTick>
 8005f8a:	0003      	movs	r3, r0
 8005f8c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8005f8e:	197b      	adds	r3, r7, r5
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d003      	beq.n	8005f9e <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8005f96:	230b      	movs	r3, #11
 8005f98:	18fb      	adds	r3, r7, r3
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	e000      	b.n	8005fa0 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	0018      	movs	r0, r3
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	b004      	add	sp, #16
 8005fa6:	bdb0      	pop	{r4, r5, r7, pc}
 8005fa8:	40022000 	.word	0x40022000
 8005fac:	40021000 	.word	0x40021000
 8005fb0:	00001388 	.word	0x00001388
 8005fb4:	fffff8ff 	.word	0xfffff8ff
 8005fb8:	ffffc7ff 	.word	0xffffc7ff
 8005fbc:	08009634 	.word	0x08009634
 8005fc0:	20000064 	.word	0x20000064

08005fc4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b086      	sub	sp, #24
 8005fc8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8005fca:	4b3b      	ldr	r3, [pc, #236]	; (80060b8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	220c      	movs	r2, #12
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	2b08      	cmp	r3, #8
 8005fd8:	d00e      	beq.n	8005ff8 <HAL_RCC_GetSysClockFreq+0x34>
 8005fda:	2b0c      	cmp	r3, #12
 8005fdc:	d00f      	beq.n	8005ffe <HAL_RCC_GetSysClockFreq+0x3a>
 8005fde:	2b04      	cmp	r3, #4
 8005fe0:	d157      	bne.n	8006092 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005fe2:	4b35      	ldr	r3, [pc, #212]	; (80060b8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2210      	movs	r2, #16
 8005fe8:	4013      	ands	r3, r2
 8005fea:	d002      	beq.n	8005ff2 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8005fec:	4b33      	ldr	r3, [pc, #204]	; (80060bc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005fee:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005ff0:	e05d      	b.n	80060ae <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8005ff2:	4b33      	ldr	r3, [pc, #204]	; (80060c0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005ff4:	613b      	str	r3, [r7, #16]
      break;
 8005ff6:	e05a      	b.n	80060ae <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005ff8:	4b32      	ldr	r3, [pc, #200]	; (80060c4 <HAL_RCC_GetSysClockFreq+0x100>)
 8005ffa:	613b      	str	r3, [r7, #16]
      break;
 8005ffc:	e057      	b.n	80060ae <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	0c9b      	lsrs	r3, r3, #18
 8006002:	220f      	movs	r2, #15
 8006004:	4013      	ands	r3, r2
 8006006:	4a30      	ldr	r2, [pc, #192]	; (80060c8 <HAL_RCC_GetSysClockFreq+0x104>)
 8006008:	5cd3      	ldrb	r3, [r2, r3]
 800600a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	0d9b      	lsrs	r3, r3, #22
 8006010:	2203      	movs	r2, #3
 8006012:	4013      	ands	r3, r2
 8006014:	3301      	adds	r3, #1
 8006016:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006018:	4b27      	ldr	r3, [pc, #156]	; (80060b8 <HAL_RCC_GetSysClockFreq+0xf4>)
 800601a:	68da      	ldr	r2, [r3, #12]
 800601c:	2380      	movs	r3, #128	; 0x80
 800601e:	025b      	lsls	r3, r3, #9
 8006020:	4013      	ands	r3, r2
 8006022:	d00f      	beq.n	8006044 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8006024:	68b9      	ldr	r1, [r7, #8]
 8006026:	000a      	movs	r2, r1
 8006028:	0152      	lsls	r2, r2, #5
 800602a:	1a52      	subs	r2, r2, r1
 800602c:	0193      	lsls	r3, r2, #6
 800602e:	1a9b      	subs	r3, r3, r2
 8006030:	00db      	lsls	r3, r3, #3
 8006032:	185b      	adds	r3, r3, r1
 8006034:	025b      	lsls	r3, r3, #9
 8006036:	6879      	ldr	r1, [r7, #4]
 8006038:	0018      	movs	r0, r3
 800603a:	f7fa f86d 	bl	8000118 <__udivsi3>
 800603e:	0003      	movs	r3, r0
 8006040:	617b      	str	r3, [r7, #20]
 8006042:	e023      	b.n	800608c <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006044:	4b1c      	ldr	r3, [pc, #112]	; (80060b8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2210      	movs	r2, #16
 800604a:	4013      	ands	r3, r2
 800604c:	d00f      	beq.n	800606e <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 800604e:	68b9      	ldr	r1, [r7, #8]
 8006050:	000a      	movs	r2, r1
 8006052:	0152      	lsls	r2, r2, #5
 8006054:	1a52      	subs	r2, r2, r1
 8006056:	0193      	lsls	r3, r2, #6
 8006058:	1a9b      	subs	r3, r3, r2
 800605a:	00db      	lsls	r3, r3, #3
 800605c:	185b      	adds	r3, r3, r1
 800605e:	021b      	lsls	r3, r3, #8
 8006060:	6879      	ldr	r1, [r7, #4]
 8006062:	0018      	movs	r0, r3
 8006064:	f7fa f858 	bl	8000118 <__udivsi3>
 8006068:	0003      	movs	r3, r0
 800606a:	617b      	str	r3, [r7, #20]
 800606c:	e00e      	b.n	800608c <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 800606e:	68b9      	ldr	r1, [r7, #8]
 8006070:	000a      	movs	r2, r1
 8006072:	0152      	lsls	r2, r2, #5
 8006074:	1a52      	subs	r2, r2, r1
 8006076:	0193      	lsls	r3, r2, #6
 8006078:	1a9b      	subs	r3, r3, r2
 800607a:	00db      	lsls	r3, r3, #3
 800607c:	185b      	adds	r3, r3, r1
 800607e:	029b      	lsls	r3, r3, #10
 8006080:	6879      	ldr	r1, [r7, #4]
 8006082:	0018      	movs	r0, r3
 8006084:	f7fa f848 	bl	8000118 <__udivsi3>
 8006088:	0003      	movs	r3, r0
 800608a:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	613b      	str	r3, [r7, #16]
      break;
 8006090:	e00d      	b.n	80060ae <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8006092:	4b09      	ldr	r3, [pc, #36]	; (80060b8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	0b5b      	lsrs	r3, r3, #13
 8006098:	2207      	movs	r2, #7
 800609a:	4013      	ands	r3, r2
 800609c:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	3301      	adds	r3, #1
 80060a2:	2280      	movs	r2, #128	; 0x80
 80060a4:	0212      	lsls	r2, r2, #8
 80060a6:	409a      	lsls	r2, r3
 80060a8:	0013      	movs	r3, r2
 80060aa:	613b      	str	r3, [r7, #16]
      break;
 80060ac:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80060ae:	693b      	ldr	r3, [r7, #16]
}
 80060b0:	0018      	movs	r0, r3
 80060b2:	46bd      	mov	sp, r7
 80060b4:	b006      	add	sp, #24
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	40021000 	.word	0x40021000
 80060bc:	003d0900 	.word	0x003d0900
 80060c0:	00f42400 	.word	0x00f42400
 80060c4:	007a1200 	.word	0x007a1200
 80060c8:	08009644 	.word	0x08009644

080060cc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b086      	sub	sp, #24
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2220      	movs	r2, #32
 80060da:	4013      	ands	r3, r2
 80060dc:	d106      	bne.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	2380      	movs	r3, #128	; 0x80
 80060e4:	011b      	lsls	r3, r3, #4
 80060e6:	4013      	ands	r3, r2
 80060e8:	d100      	bne.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x20>
 80060ea:	e0dd      	b.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 80060ec:	2317      	movs	r3, #23
 80060ee:	18fb      	adds	r3, r7, r3
 80060f0:	2200      	movs	r2, #0
 80060f2:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060f4:	4ba4      	ldr	r3, [pc, #656]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80060f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060f8:	2380      	movs	r3, #128	; 0x80
 80060fa:	055b      	lsls	r3, r3, #21
 80060fc:	4013      	ands	r3, r2
 80060fe:	d10a      	bne.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006100:	4ba1      	ldr	r3, [pc, #644]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006102:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006104:	4ba0      	ldr	r3, [pc, #640]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006106:	2180      	movs	r1, #128	; 0x80
 8006108:	0549      	lsls	r1, r1, #21
 800610a:	430a      	orrs	r2, r1
 800610c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800610e:	2317      	movs	r3, #23
 8006110:	18fb      	adds	r3, r7, r3
 8006112:	2201      	movs	r2, #1
 8006114:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006116:	4b9d      	ldr	r3, [pc, #628]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	2380      	movs	r3, #128	; 0x80
 800611c:	005b      	lsls	r3, r3, #1
 800611e:	4013      	ands	r3, r2
 8006120:	d11a      	bne.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006122:	4b9a      	ldr	r3, [pc, #616]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	4b99      	ldr	r3, [pc, #612]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8006128:	2180      	movs	r1, #128	; 0x80
 800612a:	0049      	lsls	r1, r1, #1
 800612c:	430a      	orrs	r2, r1
 800612e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006130:	f7fe fa0e 	bl	8004550 <HAL_GetTick>
 8006134:	0003      	movs	r3, r0
 8006136:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006138:	e008      	b.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800613a:	f7fe fa09 	bl	8004550 <HAL_GetTick>
 800613e:	0002      	movs	r2, r0
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	2b64      	cmp	r3, #100	; 0x64
 8006146:	d901      	bls.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006148:	2303      	movs	r3, #3
 800614a:	e118      	b.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800614c:	4b8f      	ldr	r3, [pc, #572]	; (800638c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	2380      	movs	r3, #128	; 0x80
 8006152:	005b      	lsls	r3, r3, #1
 8006154:	4013      	ands	r3, r2
 8006156:	d0f0      	beq.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8006158:	4b8b      	ldr	r3, [pc, #556]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	23c0      	movs	r3, #192	; 0xc0
 800615e:	039b      	lsls	r3, r3, #14
 8006160:	4013      	ands	r3, r2
 8006162:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	685a      	ldr	r2, [r3, #4]
 8006168:	23c0      	movs	r3, #192	; 0xc0
 800616a:	039b      	lsls	r3, r3, #14
 800616c:	4013      	ands	r3, r2
 800616e:	68fa      	ldr	r2, [r7, #12]
 8006170:	429a      	cmp	r2, r3
 8006172:	d107      	bne.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	689a      	ldr	r2, [r3, #8]
 8006178:	23c0      	movs	r3, #192	; 0xc0
 800617a:	039b      	lsls	r3, r3, #14
 800617c:	4013      	ands	r3, r2
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	429a      	cmp	r2, r3
 8006182:	d013      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685a      	ldr	r2, [r3, #4]
 8006188:	23c0      	movs	r3, #192	; 0xc0
 800618a:	029b      	lsls	r3, r3, #10
 800618c:	401a      	ands	r2, r3
 800618e:	23c0      	movs	r3, #192	; 0xc0
 8006190:	029b      	lsls	r3, r3, #10
 8006192:	429a      	cmp	r2, r3
 8006194:	d10a      	bne.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006196:	4b7c      	ldr	r3, [pc, #496]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	2380      	movs	r3, #128	; 0x80
 800619c:	029b      	lsls	r3, r3, #10
 800619e:	401a      	ands	r2, r3
 80061a0:	2380      	movs	r3, #128	; 0x80
 80061a2:	029b      	lsls	r3, r3, #10
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d101      	bne.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e0e8      	b.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80061ac:	4b76      	ldr	r3, [pc, #472]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80061ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80061b0:	23c0      	movs	r3, #192	; 0xc0
 80061b2:	029b      	lsls	r3, r3, #10
 80061b4:	4013      	ands	r3, r2
 80061b6:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d049      	beq.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	685a      	ldr	r2, [r3, #4]
 80061c2:	23c0      	movs	r3, #192	; 0xc0
 80061c4:	029b      	lsls	r3, r3, #10
 80061c6:	4013      	ands	r3, r2
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d004      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2220      	movs	r2, #32
 80061d4:	4013      	ands	r3, r2
 80061d6:	d10d      	bne.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	689a      	ldr	r2, [r3, #8]
 80061dc:	23c0      	movs	r3, #192	; 0xc0
 80061de:	029b      	lsls	r3, r3, #10
 80061e0:	4013      	ands	r3, r2
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d034      	beq.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	2380      	movs	r3, #128	; 0x80
 80061ee:	011b      	lsls	r3, r3, #4
 80061f0:	4013      	ands	r3, r2
 80061f2:	d02e      	beq.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80061f4:	4b64      	ldr	r3, [pc, #400]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80061f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061f8:	4a65      	ldr	r2, [pc, #404]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80061fa:	4013      	ands	r3, r2
 80061fc:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80061fe:	4b62      	ldr	r3, [pc, #392]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006200:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006202:	4b61      	ldr	r3, [pc, #388]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006204:	2180      	movs	r1, #128	; 0x80
 8006206:	0309      	lsls	r1, r1, #12
 8006208:	430a      	orrs	r2, r1
 800620a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800620c:	4b5e      	ldr	r3, [pc, #376]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800620e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006210:	4b5d      	ldr	r3, [pc, #372]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006212:	4960      	ldr	r1, [pc, #384]	; (8006394 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8006214:	400a      	ands	r2, r1
 8006216:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8006218:	4b5b      	ldr	r3, [pc, #364]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	2380      	movs	r3, #128	; 0x80
 8006222:	005b      	lsls	r3, r3, #1
 8006224:	4013      	ands	r3, r2
 8006226:	d014      	beq.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006228:	f7fe f992 	bl	8004550 <HAL_GetTick>
 800622c:	0003      	movs	r3, r0
 800622e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006230:	e009      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006232:	f7fe f98d 	bl	8004550 <HAL_GetTick>
 8006236:	0002      	movs	r2, r0
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	4a56      	ldr	r2, [pc, #344]	; (8006398 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d901      	bls.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	e09b      	b.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006246:	4b50      	ldr	r3, [pc, #320]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006248:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800624a:	2380      	movs	r3, #128	; 0x80
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	4013      	ands	r3, r2
 8006250:	d0ef      	beq.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	685a      	ldr	r2, [r3, #4]
 8006256:	23c0      	movs	r3, #192	; 0xc0
 8006258:	029b      	lsls	r3, r3, #10
 800625a:	401a      	ands	r2, r3
 800625c:	23c0      	movs	r3, #192	; 0xc0
 800625e:	029b      	lsls	r3, r3, #10
 8006260:	429a      	cmp	r2, r3
 8006262:	d10c      	bne.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8006264:	4b48      	ldr	r3, [pc, #288]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a4c      	ldr	r2, [pc, #304]	; (800639c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800626a:	4013      	ands	r3, r2
 800626c:	0019      	movs	r1, r3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	685a      	ldr	r2, [r3, #4]
 8006272:	23c0      	movs	r3, #192	; 0xc0
 8006274:	039b      	lsls	r3, r3, #14
 8006276:	401a      	ands	r2, r3
 8006278:	4b43      	ldr	r3, [pc, #268]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800627a:	430a      	orrs	r2, r1
 800627c:	601a      	str	r2, [r3, #0]
 800627e:	4b42      	ldr	r3, [pc, #264]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006280:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	685a      	ldr	r2, [r3, #4]
 8006286:	23c0      	movs	r3, #192	; 0xc0
 8006288:	029b      	lsls	r3, r3, #10
 800628a:	401a      	ands	r2, r3
 800628c:	4b3e      	ldr	r3, [pc, #248]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800628e:	430a      	orrs	r2, r1
 8006290:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006292:	2317      	movs	r3, #23
 8006294:	18fb      	adds	r3, r7, r3
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	2b01      	cmp	r3, #1
 800629a:	d105      	bne.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800629c:	4b3a      	ldr	r3, [pc, #232]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800629e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062a0:	4b39      	ldr	r3, [pc, #228]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80062a2:	493f      	ldr	r1, [pc, #252]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80062a4:	400a      	ands	r2, r1
 80062a6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2201      	movs	r2, #1
 80062ae:	4013      	ands	r3, r2
 80062b0:	d009      	beq.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80062b2:	4b35      	ldr	r3, [pc, #212]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80062b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062b6:	2203      	movs	r2, #3
 80062b8:	4393      	bics	r3, r2
 80062ba:	0019      	movs	r1, r3
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	68da      	ldr	r2, [r3, #12]
 80062c0:	4b31      	ldr	r3, [pc, #196]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80062c2:	430a      	orrs	r2, r1
 80062c4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2202      	movs	r2, #2
 80062cc:	4013      	ands	r3, r2
 80062ce:	d009      	beq.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80062d0:	4b2d      	ldr	r3, [pc, #180]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80062d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062d4:	220c      	movs	r2, #12
 80062d6:	4393      	bics	r3, r2
 80062d8:	0019      	movs	r1, r3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	691a      	ldr	r2, [r3, #16]
 80062de:	4b2a      	ldr	r3, [pc, #168]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80062e0:	430a      	orrs	r2, r1
 80062e2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2204      	movs	r2, #4
 80062ea:	4013      	ands	r3, r2
 80062ec:	d009      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80062ee:	4b26      	ldr	r3, [pc, #152]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80062f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062f2:	4a2c      	ldr	r2, [pc, #176]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80062f4:	4013      	ands	r3, r2
 80062f6:	0019      	movs	r1, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	695a      	ldr	r2, [r3, #20]
 80062fc:	4b22      	ldr	r3, [pc, #136]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80062fe:	430a      	orrs	r2, r1
 8006300:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2208      	movs	r2, #8
 8006308:	4013      	ands	r3, r2
 800630a:	d009      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800630c:	4b1e      	ldr	r3, [pc, #120]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800630e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006310:	4a25      	ldr	r2, [pc, #148]	; (80063a8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8006312:	4013      	ands	r3, r2
 8006314:	0019      	movs	r1, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	699a      	ldr	r2, [r3, #24]
 800631a:	4b1b      	ldr	r3, [pc, #108]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800631c:	430a      	orrs	r2, r1
 800631e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	2380      	movs	r3, #128	; 0x80
 8006326:	005b      	lsls	r3, r3, #1
 8006328:	4013      	ands	r3, r2
 800632a:	d009      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800632c:	4b16      	ldr	r3, [pc, #88]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800632e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006330:	4a17      	ldr	r2, [pc, #92]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006332:	4013      	ands	r3, r2
 8006334:	0019      	movs	r1, r3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	69da      	ldr	r2, [r3, #28]
 800633a:	4b13      	ldr	r3, [pc, #76]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800633c:	430a      	orrs	r2, r1
 800633e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2240      	movs	r2, #64	; 0x40
 8006346:	4013      	ands	r3, r2
 8006348:	d009      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800634a:	4b0f      	ldr	r3, [pc, #60]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800634c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800634e:	4a17      	ldr	r2, [pc, #92]	; (80063ac <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006350:	4013      	ands	r3, r2
 8006352:	0019      	movs	r1, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006358:	4b0b      	ldr	r3, [pc, #44]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800635a:	430a      	orrs	r2, r1
 800635c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2280      	movs	r2, #128	; 0x80
 8006364:	4013      	ands	r3, r2
 8006366:	d009      	beq.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8006368:	4b07      	ldr	r3, [pc, #28]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800636a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800636c:	4a10      	ldr	r2, [pc, #64]	; (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800636e:	4013      	ands	r3, r2
 8006370:	0019      	movs	r1, r3
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a1a      	ldr	r2, [r3, #32]
 8006376:	4b04      	ldr	r3, [pc, #16]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006378:	430a      	orrs	r2, r1
 800637a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800637c:	2300      	movs	r3, #0
}
 800637e:	0018      	movs	r0, r3
 8006380:	46bd      	mov	sp, r7
 8006382:	b006      	add	sp, #24
 8006384:	bd80      	pop	{r7, pc}
 8006386:	46c0      	nop			; (mov r8, r8)
 8006388:	40021000 	.word	0x40021000
 800638c:	40007000 	.word	0x40007000
 8006390:	fffcffff 	.word	0xfffcffff
 8006394:	fff7ffff 	.word	0xfff7ffff
 8006398:	00001388 	.word	0x00001388
 800639c:	ffcfffff 	.word	0xffcfffff
 80063a0:	efffffff 	.word	0xefffffff
 80063a4:	fffff3ff 	.word	0xfffff3ff
 80063a8:	ffffcfff 	.word	0xffffcfff
 80063ac:	fbffffff 	.word	0xfbffffff
 80063b0:	fff3ffff 	.word	0xfff3ffff

080063b4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b082      	sub	sp, #8
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d101      	bne.n	80063c6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e08e      	b.n	80064e4 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2221      	movs	r2, #33	; 0x21
 80063ca:	5c9b      	ldrb	r3, [r3, r2]
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d107      	bne.n	80063e2 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2220      	movs	r2, #32
 80063d6:	2100      	movs	r1, #0
 80063d8:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	0018      	movs	r0, r3
 80063de:	f7fd fc0b 	bl	8003bf8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2221      	movs	r2, #33	; 0x21
 80063e6:	2102      	movs	r1, #2
 80063e8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	22ca      	movs	r2, #202	; 0xca
 80063f0:	625a      	str	r2, [r3, #36]	; 0x24
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2253      	movs	r2, #83	; 0x53
 80063f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	0018      	movs	r0, r3
 80063fe:	f000 fcf4 	bl	8006dea <RTC_EnterInitMode>
 8006402:	1e03      	subs	r3, r0, #0
 8006404:	d009      	beq.n	800641a <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	22ff      	movs	r2, #255	; 0xff
 800640c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2221      	movs	r2, #33	; 0x21
 8006412:	2104      	movs	r1, #4
 8006414:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e064      	b.n	80064e4 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	689a      	ldr	r2, [r3, #8]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4931      	ldr	r1, [pc, #196]	; (80064ec <HAL_RTC_Init+0x138>)
 8006426:	400a      	ands	r2, r1
 8006428:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	6899      	ldr	r1, [r3, #8]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685a      	ldr	r2, [r3, #4]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	431a      	orrs	r2, r3
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	699b      	ldr	r3, [r3, #24]
 800643e:	431a      	orrs	r2, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	430a      	orrs	r2, r1
 8006446:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	68d2      	ldr	r2, [r2, #12]
 8006450:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	6919      	ldr	r1, [r3, #16]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	041a      	lsls	r2, r3, #16
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	430a      	orrs	r2, r1
 8006464:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68da      	ldr	r2, [r3, #12]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2180      	movs	r1, #128	; 0x80
 8006472:	438a      	bics	r2, r1
 8006474:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2103      	movs	r1, #3
 8006482:	438a      	bics	r2, r1
 8006484:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	69da      	ldr	r2, [r3, #28]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	695b      	ldr	r3, [r3, #20]
 8006494:	431a      	orrs	r2, r3
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	430a      	orrs	r2, r1
 800649c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	2220      	movs	r2, #32
 80064a6:	4013      	ands	r3, r2
 80064a8:	d113      	bne.n	80064d2 <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	0018      	movs	r0, r3
 80064ae:	f000 fc75 	bl	8006d9c <HAL_RTC_WaitForSynchro>
 80064b2:	1e03      	subs	r3, r0, #0
 80064b4:	d00d      	beq.n	80064d2 <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	22ff      	movs	r2, #255	; 0xff
 80064bc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2221      	movs	r2, #33	; 0x21
 80064c2:	2104      	movs	r1, #4
 80064c4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2220      	movs	r2, #32
 80064ca:	2100      	movs	r1, #0
 80064cc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e008      	b.n	80064e4 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	22ff      	movs	r2, #255	; 0xff
 80064d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2221      	movs	r2, #33	; 0x21
 80064de:	2101      	movs	r1, #1
 80064e0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80064e2:	2300      	movs	r3, #0
  }
}
 80064e4:	0018      	movs	r0, r3
 80064e6:	46bd      	mov	sp, r7
 80064e8:	b002      	add	sp, #8
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	ff8fffbf 	.word	0xff8fffbf

080064f0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80064f0:	b590      	push	{r4, r7, lr}
 80064f2:	b087      	sub	sp, #28
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2220      	movs	r2, #32
 8006500:	5c9b      	ldrb	r3, [r3, r2]
 8006502:	2b01      	cmp	r3, #1
 8006504:	d101      	bne.n	800650a <HAL_RTC_SetTime+0x1a>
 8006506:	2302      	movs	r3, #2
 8006508:	e0ad      	b.n	8006666 <HAL_RTC_SetTime+0x176>
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2220      	movs	r2, #32
 800650e:	2101      	movs	r1, #1
 8006510:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2221      	movs	r2, #33	; 0x21
 8006516:	2102      	movs	r1, #2
 8006518:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d125      	bne.n	800656c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	2240      	movs	r2, #64	; 0x40
 8006528:	4013      	ands	r3, r2
 800652a:	d102      	bne.n	8006532 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	2200      	movs	r2, #0
 8006530:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	0018      	movs	r0, r3
 8006538:	f000 fc81 	bl	8006e3e <RTC_ByteToBcd2>
 800653c:	0003      	movs	r3, r0
 800653e:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	785b      	ldrb	r3, [r3, #1]
 8006544:	0018      	movs	r0, r3
 8006546:	f000 fc7a 	bl	8006e3e <RTC_ByteToBcd2>
 800654a:	0003      	movs	r3, r0
 800654c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800654e:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	789b      	ldrb	r3, [r3, #2]
 8006554:	0018      	movs	r0, r3
 8006556:	f000 fc72 	bl	8006e3e <RTC_ByteToBcd2>
 800655a:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800655c:	0022      	movs	r2, r4
 800655e:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	78db      	ldrb	r3, [r3, #3]
 8006564:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006566:	4313      	orrs	r3, r2
 8006568:	617b      	str	r3, [r7, #20]
 800656a:	e017      	b.n	800659c <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	2240      	movs	r2, #64	; 0x40
 8006574:	4013      	ands	r3, r2
 8006576:	d102      	bne.n	800657e <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	2200      	movs	r2, #0
 800657c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	785b      	ldrb	r3, [r3, #1]
 8006588:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800658a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006590:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	78db      	ldrb	r3, [r3, #3]
 8006596:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006598:	4313      	orrs	r3, r2
 800659a:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	22ca      	movs	r2, #202	; 0xca
 80065a2:	625a      	str	r2, [r3, #36]	; 0x24
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2253      	movs	r2, #83	; 0x53
 80065aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	0018      	movs	r0, r3
 80065b0:	f000 fc1b 	bl	8006dea <RTC_EnterInitMode>
 80065b4:	1e03      	subs	r3, r0, #0
 80065b6:	d00d      	beq.n	80065d4 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	22ff      	movs	r2, #255	; 0xff
 80065be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2221      	movs	r2, #33	; 0x21
 80065c4:	2104      	movs	r1, #4
 80065c6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2220      	movs	r2, #32
 80065cc:	2100      	movs	r1, #0
 80065ce:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e048      	b.n	8006666 <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	697a      	ldr	r2, [r7, #20]
 80065da:	4925      	ldr	r1, [pc, #148]	; (8006670 <HAL_RTC_SetTime+0x180>)
 80065dc:	400a      	ands	r2, r1
 80065de:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	689a      	ldr	r2, [r3, #8]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4922      	ldr	r1, [pc, #136]	; (8006674 <HAL_RTC_SetTime+0x184>)
 80065ec:	400a      	ands	r2, r1
 80065ee:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	6899      	ldr	r1, [r3, #8]
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	68da      	ldr	r2, [r3, #12]
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	431a      	orrs	r2, r3
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	430a      	orrs	r2, r1
 8006606:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68da      	ldr	r2, [r3, #12]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2180      	movs	r1, #128	; 0x80
 8006614:	438a      	bics	r2, r1
 8006616:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	2220      	movs	r2, #32
 8006620:	4013      	ands	r3, r2
 8006622:	d113      	bne.n	800664c <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	0018      	movs	r0, r3
 8006628:	f000 fbb8 	bl	8006d9c <HAL_RTC_WaitForSynchro>
 800662c:	1e03      	subs	r3, r0, #0
 800662e:	d00d      	beq.n	800664c <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	22ff      	movs	r2, #255	; 0xff
 8006636:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2221      	movs	r2, #33	; 0x21
 800663c:	2104      	movs	r1, #4
 800663e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2220      	movs	r2, #32
 8006644:	2100      	movs	r1, #0
 8006646:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	e00c      	b.n	8006666 <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	22ff      	movs	r2, #255	; 0xff
 8006652:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2221      	movs	r2, #33	; 0x21
 8006658:	2101      	movs	r1, #1
 800665a:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2220      	movs	r2, #32
 8006660:	2100      	movs	r1, #0
 8006662:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006664:	2300      	movs	r3, #0
  }
}
 8006666:	0018      	movs	r0, r3
 8006668:	46bd      	mov	sp, r7
 800666a:	b007      	add	sp, #28
 800666c:	bd90      	pop	{r4, r7, pc}
 800666e:	46c0      	nop			; (mov r8, r8)
 8006670:	007f7f7f 	.word	0x007f7f7f
 8006674:	fffbffff 	.word	0xfffbffff

08006678 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b086      	sub	sp, #24
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	691b      	ldr	r3, [r3, #16]
 8006694:	045b      	lsls	r3, r3, #17
 8006696:	0c5a      	lsrs	r2, r3, #17
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a22      	ldr	r2, [pc, #136]	; (800672c <HAL_RTC_GetTime+0xb4>)
 80066a4:	4013      	ands	r3, r2
 80066a6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	0c1b      	lsrs	r3, r3, #16
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	223f      	movs	r2, #63	; 0x3f
 80066b0:	4013      	ands	r3, r2
 80066b2:	b2da      	uxtb	r2, r3
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	0a1b      	lsrs	r3, r3, #8
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	227f      	movs	r2, #127	; 0x7f
 80066c0:	4013      	ands	r3, r2
 80066c2:	b2da      	uxtb	r2, r3
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	227f      	movs	r2, #127	; 0x7f
 80066ce:	4013      	ands	r3, r2
 80066d0:	b2da      	uxtb	r2, r3
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	0c1b      	lsrs	r3, r3, #16
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	2240      	movs	r2, #64	; 0x40
 80066de:	4013      	ands	r3, r2
 80066e0:	b2da      	uxtb	r2, r3
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d11a      	bne.n	8006722 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	0018      	movs	r0, r3
 80066f2:	f000 fbcd 	bl	8006e90 <RTC_Bcd2ToByte>
 80066f6:	0003      	movs	r3, r0
 80066f8:	001a      	movs	r2, r3
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	785b      	ldrb	r3, [r3, #1]
 8006702:	0018      	movs	r0, r3
 8006704:	f000 fbc4 	bl	8006e90 <RTC_Bcd2ToByte>
 8006708:	0003      	movs	r3, r0
 800670a:	001a      	movs	r2, r3
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	789b      	ldrb	r3, [r3, #2]
 8006714:	0018      	movs	r0, r3
 8006716:	f000 fbbb 	bl	8006e90 <RTC_Bcd2ToByte>
 800671a:	0003      	movs	r3, r0
 800671c:	001a      	movs	r2, r3
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006722:	2300      	movs	r3, #0
}
 8006724:	0018      	movs	r0, r3
 8006726:	46bd      	mov	sp, r7
 8006728:	b006      	add	sp, #24
 800672a:	bd80      	pop	{r7, pc}
 800672c:	007f7f7f 	.word	0x007f7f7f

08006730 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006730:	b590      	push	{r4, r7, lr}
 8006732:	b087      	sub	sp, #28
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2220      	movs	r2, #32
 8006740:	5c9b      	ldrb	r3, [r3, r2]
 8006742:	2b01      	cmp	r3, #1
 8006744:	d101      	bne.n	800674a <HAL_RTC_SetDate+0x1a>
 8006746:	2302      	movs	r3, #2
 8006748:	e099      	b.n	800687e <HAL_RTC_SetDate+0x14e>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2220      	movs	r2, #32
 800674e:	2101      	movs	r1, #1
 8006750:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2221      	movs	r2, #33	; 0x21
 8006756:	2102      	movs	r1, #2
 8006758:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d10e      	bne.n	800677e <HAL_RTC_SetDate+0x4e>
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	785b      	ldrb	r3, [r3, #1]
 8006764:	001a      	movs	r2, r3
 8006766:	2310      	movs	r3, #16
 8006768:	4013      	ands	r3, r2
 800676a:	d008      	beq.n	800677e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	785b      	ldrb	r3, [r3, #1]
 8006770:	2210      	movs	r2, #16
 8006772:	4393      	bics	r3, r2
 8006774:	b2db      	uxtb	r3, r3
 8006776:	330a      	adds	r3, #10
 8006778:	b2da      	uxtb	r2, r3
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d11c      	bne.n	80067be <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	78db      	ldrb	r3, [r3, #3]
 8006788:	0018      	movs	r0, r3
 800678a:	f000 fb58 	bl	8006e3e <RTC_ByteToBcd2>
 800678e:	0003      	movs	r3, r0
 8006790:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	785b      	ldrb	r3, [r3, #1]
 8006796:	0018      	movs	r0, r3
 8006798:	f000 fb51 	bl	8006e3e <RTC_ByteToBcd2>
 800679c:	0003      	movs	r3, r0
 800679e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80067a0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	789b      	ldrb	r3, [r3, #2]
 80067a6:	0018      	movs	r0, r3
 80067a8:	f000 fb49 	bl	8006e3e <RTC_ByteToBcd2>
 80067ac:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80067ae:	0022      	movs	r2, r4
 80067b0:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80067b8:	4313      	orrs	r3, r2
 80067ba:	617b      	str	r3, [r7, #20]
 80067bc:	e00e      	b.n	80067dc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	78db      	ldrb	r3, [r3, #3]
 80067c2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	785b      	ldrb	r3, [r3, #1]
 80067c8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80067ca:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80067cc:	68ba      	ldr	r2, [r7, #8]
 80067ce:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80067d0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	781b      	ldrb	r3, [r3, #0]
 80067d6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80067d8:	4313      	orrs	r3, r2
 80067da:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	22ca      	movs	r2, #202	; 0xca
 80067e2:	625a      	str	r2, [r3, #36]	; 0x24
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2253      	movs	r2, #83	; 0x53
 80067ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	0018      	movs	r0, r3
 80067f0:	f000 fafb 	bl	8006dea <RTC_EnterInitMode>
 80067f4:	1e03      	subs	r3, r0, #0
 80067f6:	d00d      	beq.n	8006814 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	22ff      	movs	r2, #255	; 0xff
 80067fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2221      	movs	r2, #33	; 0x21
 8006804:	2104      	movs	r1, #4
 8006806:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2220      	movs	r2, #32
 800680c:	2100      	movs	r1, #0
 800680e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	e034      	b.n	800687e <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	697a      	ldr	r2, [r7, #20]
 800681a:	491b      	ldr	r1, [pc, #108]	; (8006888 <HAL_RTC_SetDate+0x158>)
 800681c:	400a      	ands	r2, r1
 800681e:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68da      	ldr	r2, [r3, #12]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2180      	movs	r1, #128	; 0x80
 800682c:	438a      	bics	r2, r1
 800682e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	2220      	movs	r2, #32
 8006838:	4013      	ands	r3, r2
 800683a:	d113      	bne.n	8006864 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	0018      	movs	r0, r3
 8006840:	f000 faac 	bl	8006d9c <HAL_RTC_WaitForSynchro>
 8006844:	1e03      	subs	r3, r0, #0
 8006846:	d00d      	beq.n	8006864 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	22ff      	movs	r2, #255	; 0xff
 800684e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2221      	movs	r2, #33	; 0x21
 8006854:	2104      	movs	r1, #4
 8006856:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2220      	movs	r2, #32
 800685c:	2100      	movs	r1, #0
 800685e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	e00c      	b.n	800687e <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	22ff      	movs	r2, #255	; 0xff
 800686a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2221      	movs	r2, #33	; 0x21
 8006870:	2101      	movs	r1, #1
 8006872:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2220      	movs	r2, #32
 8006878:	2100      	movs	r1, #0
 800687a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800687c:	2300      	movs	r3, #0
  }
}
 800687e:	0018      	movs	r0, r3
 8006880:	46bd      	mov	sp, r7
 8006882:	b007      	add	sp, #28
 8006884:	bd90      	pop	{r4, r7, pc}
 8006886:	46c0      	nop			; (mov r8, r8)
 8006888:	00ffff3f 	.word	0x00ffff3f

0800688c <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b086      	sub	sp, #24
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	4a21      	ldr	r2, [pc, #132]	; (8006924 <HAL_RTC_GetDate+0x98>)
 80068a0:	4013      	ands	r3, r2
 80068a2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	0c1b      	lsrs	r3, r3, #16
 80068a8:	b2da      	uxtb	r2, r3
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	0a1b      	lsrs	r3, r3, #8
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	221f      	movs	r2, #31
 80068b6:	4013      	ands	r3, r2
 80068b8:	b2da      	uxtb	r2, r3
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	223f      	movs	r2, #63	; 0x3f
 80068c4:	4013      	ands	r3, r2
 80068c6:	b2da      	uxtb	r2, r3
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	0b5b      	lsrs	r3, r3, #13
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	2207      	movs	r2, #7
 80068d4:	4013      	ands	r3, r2
 80068d6:	b2da      	uxtb	r2, r3
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d11a      	bne.n	8006918 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	78db      	ldrb	r3, [r3, #3]
 80068e6:	0018      	movs	r0, r3
 80068e8:	f000 fad2 	bl	8006e90 <RTC_Bcd2ToByte>
 80068ec:	0003      	movs	r3, r0
 80068ee:	001a      	movs	r2, r3
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	785b      	ldrb	r3, [r3, #1]
 80068f8:	0018      	movs	r0, r3
 80068fa:	f000 fac9 	bl	8006e90 <RTC_Bcd2ToByte>
 80068fe:	0003      	movs	r3, r0
 8006900:	001a      	movs	r2, r3
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	789b      	ldrb	r3, [r3, #2]
 800690a:	0018      	movs	r0, r3
 800690c:	f000 fac0 	bl	8006e90 <RTC_Bcd2ToByte>
 8006910:	0003      	movs	r3, r0
 8006912:	001a      	movs	r2, r3
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	0018      	movs	r0, r3
 800691c:	46bd      	mov	sp, r7
 800691e:	b006      	add	sp, #24
 8006920:	bd80      	pop	{r7, pc}
 8006922:	46c0      	nop			; (mov r8, r8)
 8006924:	00ffff3f 	.word	0x00ffff3f

08006928 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006928:	b590      	push	{r4, r7, lr}
 800692a:	b089      	sub	sp, #36	; 0x24
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2220      	movs	r2, #32
 8006938:	5c9b      	ldrb	r3, [r3, r2]
 800693a:	2b01      	cmp	r3, #1
 800693c:	d101      	bne.n	8006942 <HAL_RTC_SetAlarm_IT+0x1a>
 800693e:	2302      	movs	r3, #2
 8006940:	e130      	b.n	8006ba4 <HAL_RTC_SetAlarm_IT+0x27c>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2220      	movs	r2, #32
 8006946:	2101      	movs	r1, #1
 8006948:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2221      	movs	r2, #33	; 0x21
 800694e:	2102      	movs	r1, #2
 8006950:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d136      	bne.n	80069c6 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	2240      	movs	r2, #64	; 0x40
 8006960:	4013      	ands	r3, r2
 8006962:	d102      	bne.n	800696a <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	2200      	movs	r2, #0
 8006968:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	0018      	movs	r0, r3
 8006970:	f000 fa65 	bl	8006e3e <RTC_ByteToBcd2>
 8006974:	0003      	movs	r3, r0
 8006976:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	785b      	ldrb	r3, [r3, #1]
 800697c:	0018      	movs	r0, r3
 800697e:	f000 fa5e 	bl	8006e3e <RTC_ByteToBcd2>
 8006982:	0003      	movs	r3, r0
 8006984:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8006986:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	789b      	ldrb	r3, [r3, #2]
 800698c:	0018      	movs	r0, r3
 800698e:	f000 fa56 	bl	8006e3e <RTC_ByteToBcd2>
 8006992:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006994:	0022      	movs	r2, r4
 8006996:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	78db      	ldrb	r3, [r3, #3]
 800699c:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800699e:	431a      	orrs	r2, r3
 80069a0:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	2220      	movs	r2, #32
 80069a6:	5c9b      	ldrb	r3, [r3, r2]
 80069a8:	0018      	movs	r0, r3
 80069aa:	f000 fa48 	bl	8006e3e <RTC_ByteToBcd2>
 80069ae:	0003      	movs	r3, r0
 80069b0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80069b2:	0022      	movs	r2, r4
 80069b4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80069ba:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80069c0:	4313      	orrs	r3, r2
 80069c2:	61fb      	str	r3, [r7, #28]
 80069c4:	e022      	b.n	8006a0c <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	2240      	movs	r2, #64	; 0x40
 80069ce:	4013      	ands	r3, r2
 80069d0:	d102      	bne.n	80069d8 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	2200      	movs	r2, #0
 80069d6:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	785b      	ldrb	r3, [r3, #1]
 80069e2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80069e4:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80069e6:	68ba      	ldr	r2, [r7, #8]
 80069e8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80069ea:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	78db      	ldrb	r3, [r3, #3]
 80069f0:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80069f2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	2120      	movs	r1, #32
 80069f8:	5c5b      	ldrb	r3, [r3, r1]
 80069fa:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80069fc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006a02:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	685a      	ldr	r2, [r3, #4]
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	699b      	ldr	r3, [r3, #24]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	22ca      	movs	r2, #202	; 0xca
 8006a1e:	625a      	str	r2, [r3, #36]	; 0x24
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2253      	movs	r2, #83	; 0x53
 8006a26:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a2c:	2380      	movs	r3, #128	; 0x80
 8006a2e:	005b      	lsls	r3, r3, #1
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d14e      	bne.n	8006ad2 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	689a      	ldr	r2, [r3, #8]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	495b      	ldr	r1, [pc, #364]	; (8006bac <HAL_RTC_SetAlarm_IT+0x284>)
 8006a40:	400a      	ands	r2, r1
 8006a42:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	22ff      	movs	r2, #255	; 0xff
 8006a4c:	401a      	ands	r2, r3
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4957      	ldr	r1, [pc, #348]	; (8006bb0 <HAL_RTC_SetAlarm_IT+0x288>)
 8006a54:	430a      	orrs	r2, r1
 8006a56:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006a58:	f7fd fd7a 	bl	8004550 <HAL_GetTick>
 8006a5c:	0003      	movs	r3, r0
 8006a5e:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006a60:	e016      	b.n	8006a90 <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006a62:	f7fd fd75 	bl	8004550 <HAL_GetTick>
 8006a66:	0002      	movs	r2, r0
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	1ad2      	subs	r2, r2, r3
 8006a6c:	23fa      	movs	r3, #250	; 0xfa
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d90d      	bls.n	8006a90 <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	22ff      	movs	r2, #255	; 0xff
 8006a7a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2221      	movs	r2, #33	; 0x21
 8006a80:	2103      	movs	r1, #3
 8006a82:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2220      	movs	r2, #32
 8006a88:	2100      	movs	r1, #0
 8006a8a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006a8c:	2303      	movs	r3, #3
 8006a8e:	e089      	b.n	8006ba4 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	2201      	movs	r2, #1
 8006a98:	4013      	ands	r3, r2
 8006a9a:	d0e2      	beq.n	8006a62 <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	69fa      	ldr	r2, [r7, #28]
 8006aa2:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	69ba      	ldr	r2, [r7, #24]
 8006aaa:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	689a      	ldr	r2, [r3, #8]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	2180      	movs	r1, #128	; 0x80
 8006ab8:	0049      	lsls	r1, r1, #1
 8006aba:	430a      	orrs	r2, r1
 8006abc:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	689a      	ldr	r2, [r3, #8]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2180      	movs	r1, #128	; 0x80
 8006aca:	0149      	lsls	r1, r1, #5
 8006acc:	430a      	orrs	r2, r1
 8006ace:	609a      	str	r2, [r3, #8]
 8006ad0:	e04d      	b.n	8006b6e <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	689a      	ldr	r2, [r3, #8]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4935      	ldr	r1, [pc, #212]	; (8006bb4 <HAL_RTC_SetAlarm_IT+0x28c>)
 8006ade:	400a      	ands	r2, r1
 8006ae0:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	22ff      	movs	r2, #255	; 0xff
 8006aea:	401a      	ands	r2, r3
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4931      	ldr	r1, [pc, #196]	; (8006bb8 <HAL_RTC_SetAlarm_IT+0x290>)
 8006af2:	430a      	orrs	r2, r1
 8006af4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006af6:	f7fd fd2b 	bl	8004550 <HAL_GetTick>
 8006afa:	0003      	movs	r3, r0
 8006afc:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006afe:	e016      	b.n	8006b2e <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006b00:	f7fd fd26 	bl	8004550 <HAL_GetTick>
 8006b04:	0002      	movs	r2, r0
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	1ad2      	subs	r2, r2, r3
 8006b0a:	23fa      	movs	r3, #250	; 0xfa
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d90d      	bls.n	8006b2e <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	22ff      	movs	r2, #255	; 0xff
 8006b18:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2221      	movs	r2, #33	; 0x21
 8006b1e:	2103      	movs	r1, #3
 8006b20:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2220      	movs	r2, #32
 8006b26:	2100      	movs	r1, #0
 8006b28:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006b2a:	2303      	movs	r3, #3
 8006b2c:	e03a      	b.n	8006ba4 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	2202      	movs	r2, #2
 8006b36:	4013      	ands	r3, r2
 8006b38:	d0e2      	beq.n	8006b00 <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	69fa      	ldr	r2, [r7, #28]
 8006b40:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	69ba      	ldr	r2, [r7, #24]
 8006b48:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	689a      	ldr	r2, [r3, #8]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2180      	movs	r1, #128	; 0x80
 8006b56:	0089      	lsls	r1, r1, #2
 8006b58:	430a      	orrs	r2, r1
 8006b5a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	689a      	ldr	r2, [r3, #8]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2180      	movs	r1, #128	; 0x80
 8006b68:	0189      	lsls	r1, r1, #6
 8006b6a:	430a      	orrs	r2, r1
 8006b6c:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006b6e:	4b13      	ldr	r3, [pc, #76]	; (8006bbc <HAL_RTC_SetAlarm_IT+0x294>)
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	4b12      	ldr	r3, [pc, #72]	; (8006bbc <HAL_RTC_SetAlarm_IT+0x294>)
 8006b74:	2180      	movs	r1, #128	; 0x80
 8006b76:	0289      	lsls	r1, r1, #10
 8006b78:	430a      	orrs	r2, r1
 8006b7a:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8006b7c:	4b0f      	ldr	r3, [pc, #60]	; (8006bbc <HAL_RTC_SetAlarm_IT+0x294>)
 8006b7e:	689a      	ldr	r2, [r3, #8]
 8006b80:	4b0e      	ldr	r3, [pc, #56]	; (8006bbc <HAL_RTC_SetAlarm_IT+0x294>)
 8006b82:	2180      	movs	r1, #128	; 0x80
 8006b84:	0289      	lsls	r1, r1, #10
 8006b86:	430a      	orrs	r2, r1
 8006b88:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	22ff      	movs	r2, #255	; 0xff
 8006b90:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2221      	movs	r2, #33	; 0x21
 8006b96:	2101      	movs	r1, #1
 8006b98:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2220      	movs	r2, #32
 8006b9e:	2100      	movs	r1, #0
 8006ba0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	0018      	movs	r0, r3
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	b009      	add	sp, #36	; 0x24
 8006baa:	bd90      	pop	{r4, r7, pc}
 8006bac:	fffffeff 	.word	0xfffffeff
 8006bb0:	fffffe7f 	.word	0xfffffe7f
 8006bb4:	fffffdff 	.word	0xfffffdff
 8006bb8:	fffffd7f 	.word	0xfffffd7f
 8006bbc:	40010400 	.word	0x40010400

08006bc0 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2220      	movs	r2, #32
 8006bce:	5c9b      	ldrb	r3, [r3, r2]
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d101      	bne.n	8006bd8 <HAL_RTC_DeactivateAlarm+0x18>
 8006bd4:	2302      	movs	r3, #2
 8006bd6:	e086      	b.n	8006ce6 <HAL_RTC_DeactivateAlarm+0x126>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2220      	movs	r2, #32
 8006bdc:	2101      	movs	r1, #1
 8006bde:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2221      	movs	r2, #33	; 0x21
 8006be4:	2102      	movs	r1, #2
 8006be6:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	22ca      	movs	r2, #202	; 0xca
 8006bee:	625a      	str	r2, [r3, #36]	; 0x24
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2253      	movs	r2, #83	; 0x53
 8006bf6:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8006bf8:	683a      	ldr	r2, [r7, #0]
 8006bfa:	2380      	movs	r3, #128	; 0x80
 8006bfc:	005b      	lsls	r3, r3, #1
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d132      	bne.n	8006c68 <HAL_RTC_DeactivateAlarm+0xa8>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	689a      	ldr	r2, [r3, #8]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4938      	ldr	r1, [pc, #224]	; (8006cf0 <HAL_RTC_DeactivateAlarm+0x130>)
 8006c0e:	400a      	ands	r2, r1
 8006c10:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	689a      	ldr	r2, [r3, #8]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4935      	ldr	r1, [pc, #212]	; (8006cf4 <HAL_RTC_DeactivateAlarm+0x134>)
 8006c1e:	400a      	ands	r2, r1
 8006c20:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8006c22:	f7fd fc95 	bl	8004550 <HAL_GetTick>
 8006c26:	0003      	movs	r3, r0
 8006c28:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006c2a:	e016      	b.n	8006c5a <HAL_RTC_DeactivateAlarm+0x9a>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006c2c:	f7fd fc90 	bl	8004550 <HAL_GetTick>
 8006c30:	0002      	movs	r2, r0
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	1ad2      	subs	r2, r2, r3
 8006c36:	23fa      	movs	r3, #250	; 0xfa
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d90d      	bls.n	8006c5a <HAL_RTC_DeactivateAlarm+0x9a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	22ff      	movs	r2, #255	; 0xff
 8006c44:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2221      	movs	r2, #33	; 0x21
 8006c4a:	2103      	movs	r1, #3
 8006c4c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2220      	movs	r2, #32
 8006c52:	2100      	movs	r1, #0
 8006c54:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006c56:	2303      	movs	r3, #3
 8006c58:	e045      	b.n	8006ce6 <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	2201      	movs	r2, #1
 8006c62:	4013      	ands	r3, r2
 8006c64:	d0e2      	beq.n	8006c2c <HAL_RTC_DeactivateAlarm+0x6c>
 8006c66:	e031      	b.n	8006ccc <HAL_RTC_DeactivateAlarm+0x10c>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	689a      	ldr	r2, [r3, #8]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4921      	ldr	r1, [pc, #132]	; (8006cf8 <HAL_RTC_DeactivateAlarm+0x138>)
 8006c74:	400a      	ands	r2, r1
 8006c76:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	689a      	ldr	r2, [r3, #8]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	491e      	ldr	r1, [pc, #120]	; (8006cfc <HAL_RTC_DeactivateAlarm+0x13c>)
 8006c84:	400a      	ands	r2, r1
 8006c86:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8006c88:	f7fd fc62 	bl	8004550 <HAL_GetTick>
 8006c8c:	0003      	movs	r3, r0
 8006c8e:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006c90:	e016      	b.n	8006cc0 <HAL_RTC_DeactivateAlarm+0x100>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006c92:	f7fd fc5d 	bl	8004550 <HAL_GetTick>
 8006c96:	0002      	movs	r2, r0
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	1ad2      	subs	r2, r2, r3
 8006c9c:	23fa      	movs	r3, #250	; 0xfa
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d90d      	bls.n	8006cc0 <HAL_RTC_DeactivateAlarm+0x100>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	22ff      	movs	r2, #255	; 0xff
 8006caa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2221      	movs	r2, #33	; 0x21
 8006cb0:	2103      	movs	r1, #3
 8006cb2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2220      	movs	r2, #32
 8006cb8:	2100      	movs	r1, #0
 8006cba:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	e012      	b.n	8006ce6 <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	2202      	movs	r2, #2
 8006cc8:	4013      	ands	r3, r2
 8006cca:	d0e2      	beq.n	8006c92 <HAL_RTC_DeactivateAlarm+0xd2>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	22ff      	movs	r2, #255	; 0xff
 8006cd2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2221      	movs	r2, #33	; 0x21
 8006cd8:	2101      	movs	r1, #1
 8006cda:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2220      	movs	r2, #32
 8006ce0:	2100      	movs	r1, #0
 8006ce2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	0018      	movs	r0, r3
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	b004      	add	sp, #16
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	46c0      	nop			; (mov r8, r8)
 8006cf0:	fffffeff 	.word	0xfffffeff
 8006cf4:	ffffefff 	.word	0xffffefff
 8006cf8:	fffffdff 	.word	0xfffffdff
 8006cfc:	ffffdfff 	.word	0xffffdfff

08006d00 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	689a      	ldr	r2, [r3, #8]
 8006d0e:	2380      	movs	r3, #128	; 0x80
 8006d10:	015b      	lsls	r3, r3, #5
 8006d12:	4013      	ands	r3, r2
 8006d14:	d014      	beq.n	8006d40 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	68da      	ldr	r2, [r3, #12]
 8006d1c:	2380      	movs	r3, #128	; 0x80
 8006d1e:	005b      	lsls	r3, r3, #1
 8006d20:	4013      	ands	r3, r2
 8006d22:	d00d      	beq.n	8006d40 <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	0018      	movs	r0, r3
 8006d28:	f7fa fe0e 	bl	8001948 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	22ff      	movs	r2, #255	; 0xff
 8006d34:	401a      	ands	r2, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4915      	ldr	r1, [pc, #84]	; (8006d90 <HAL_RTC_AlarmIRQHandler+0x90>)
 8006d3c:	430a      	orrs	r2, r1
 8006d3e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	689a      	ldr	r2, [r3, #8]
 8006d46:	2380      	movs	r3, #128	; 0x80
 8006d48:	019b      	lsls	r3, r3, #6
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	d014      	beq.n	8006d78 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68da      	ldr	r2, [r3, #12]
 8006d54:	2380      	movs	r3, #128	; 0x80
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	4013      	ands	r3, r2
 8006d5a:	d00d      	beq.n	8006d78 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	0018      	movs	r0, r3
 8006d60:	f7fa fe12 	bl	8001988 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	22ff      	movs	r2, #255	; 0xff
 8006d6c:	401a      	ands	r2, r3
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4908      	ldr	r1, [pc, #32]	; (8006d94 <HAL_RTC_AlarmIRQHandler+0x94>)
 8006d74:	430a      	orrs	r2, r1
 8006d76:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006d78:	4b07      	ldr	r3, [pc, #28]	; (8006d98 <HAL_RTC_AlarmIRQHandler+0x98>)
 8006d7a:	2280      	movs	r2, #128	; 0x80
 8006d7c:	0292      	lsls	r2, r2, #10
 8006d7e:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2221      	movs	r2, #33	; 0x21
 8006d84:	2101      	movs	r1, #1
 8006d86:	5499      	strb	r1, [r3, r2]
}
 8006d88:	46c0      	nop			; (mov r8, r8)
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	b002      	add	sp, #8
 8006d8e:	bd80      	pop	{r7, pc}
 8006d90:	fffffe7f 	.word	0xfffffe7f
 8006d94:	fffffd7f 	.word	0xfffffd7f
 8006d98:	40010400 	.word	0x40010400

08006d9c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	68da      	ldr	r2, [r3, #12]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	21a0      	movs	r1, #160	; 0xa0
 8006db0:	438a      	bics	r2, r1
 8006db2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006db4:	f7fd fbcc 	bl	8004550 <HAL_GetTick>
 8006db8:	0003      	movs	r3, r0
 8006dba:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006dbc:	e00a      	b.n	8006dd4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006dbe:	f7fd fbc7 	bl	8004550 <HAL_GetTick>
 8006dc2:	0002      	movs	r2, r0
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	1ad2      	subs	r2, r2, r3
 8006dc8:	23fa      	movs	r3, #250	; 0xfa
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d901      	bls.n	8006dd4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	e006      	b.n	8006de2 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	2220      	movs	r2, #32
 8006ddc:	4013      	ands	r3, r2
 8006dde:	d0ee      	beq.n	8006dbe <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	0018      	movs	r0, r3
 8006de4:	46bd      	mov	sp, r7
 8006de6:	b004      	add	sp, #16
 8006de8:	bd80      	pop	{r7, pc}

08006dea <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b084      	sub	sp, #16
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	2240      	movs	r2, #64	; 0x40
 8006dfa:	4013      	ands	r3, r2
 8006dfc:	d11a      	bne.n	8006e34 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2201      	movs	r2, #1
 8006e04:	4252      	negs	r2, r2
 8006e06:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006e08:	f7fd fba2 	bl	8004550 <HAL_GetTick>
 8006e0c:	0003      	movs	r3, r0
 8006e0e:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006e10:	e00a      	b.n	8006e28 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006e12:	f7fd fb9d 	bl	8004550 <HAL_GetTick>
 8006e16:	0002      	movs	r2, r0
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	1ad2      	subs	r2, r2, r3
 8006e1c:	23fa      	movs	r3, #250	; 0xfa
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d901      	bls.n	8006e28 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8006e24:	2303      	movs	r3, #3
 8006e26:	e006      	b.n	8006e36 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68db      	ldr	r3, [r3, #12]
 8006e2e:	2240      	movs	r2, #64	; 0x40
 8006e30:	4013      	ands	r3, r2
 8006e32:	d0ee      	beq.n	8006e12 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	0018      	movs	r0, r3
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	b004      	add	sp, #16
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b084      	sub	sp, #16
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	0002      	movs	r2, r0
 8006e46:	1dfb      	adds	r3, r7, #7
 8006e48:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8006e4e:	230b      	movs	r3, #11
 8006e50:	18fb      	adds	r3, r7, r3
 8006e52:	1dfa      	adds	r2, r7, #7
 8006e54:	7812      	ldrb	r2, [r2, #0]
 8006e56:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8006e58:	e008      	b.n	8006e6c <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8006e60:	220b      	movs	r2, #11
 8006e62:	18bb      	adds	r3, r7, r2
 8006e64:	18ba      	adds	r2, r7, r2
 8006e66:	7812      	ldrb	r2, [r2, #0]
 8006e68:	3a0a      	subs	r2, #10
 8006e6a:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8006e6c:	230b      	movs	r3, #11
 8006e6e:	18fb      	adds	r3, r7, r3
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	2b09      	cmp	r3, #9
 8006e74:	d8f1      	bhi.n	8006e5a <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	011b      	lsls	r3, r3, #4
 8006e7c:	b2da      	uxtb	r2, r3
 8006e7e:	230b      	movs	r3, #11
 8006e80:	18fb      	adds	r3, r7, r3
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	b2db      	uxtb	r3, r3
}
 8006e88:	0018      	movs	r0, r3
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	b004      	add	sp, #16
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	0002      	movs	r2, r0
 8006e98:	1dfb      	adds	r3, r7, #7
 8006e9a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8006e9c:	1dfb      	adds	r3, r7, #7
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	091b      	lsrs	r3, r3, #4
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	001a      	movs	r2, r3
 8006ea6:	0013      	movs	r3, r2
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	189b      	adds	r3, r3, r2
 8006eac:	005b      	lsls	r3, r3, #1
 8006eae:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	b2da      	uxtb	r2, r3
 8006eb4:	1dfb      	adds	r3, r7, #7
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	210f      	movs	r1, #15
 8006eba:	400b      	ands	r3, r1
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	18d3      	adds	r3, r2, r3
 8006ec0:	b2db      	uxtb	r3, r3
}
 8006ec2:	0018      	movs	r0, r3
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	b004      	add	sp, #16
 8006ec8:	bd80      	pop	{r7, pc}
	...

08006ecc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d101      	bne.n	8006ede <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e059      	b.n	8006f92 <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2251      	movs	r2, #81	; 0x51
 8006ee8:	5c9b      	ldrb	r3, [r3, r2]
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d107      	bne.n	8006f00 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2250      	movs	r2, #80	; 0x50
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	0018      	movs	r0, r3
 8006efc:	f7fc fe9c 	bl	8003c38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2251      	movs	r2, #81	; 0x51
 8006f04:	2102      	movs	r1, #2
 8006f06:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	2140      	movs	r1, #64	; 0x40
 8006f14:	438a      	bics	r2, r1
 8006f16:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	685a      	ldr	r2, [r3, #4]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	431a      	orrs	r2, r3
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	431a      	orrs	r2, r3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	691b      	ldr	r3, [r3, #16]
 8006f2c:	431a      	orrs	r2, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	695b      	ldr	r3, [r3, #20]
 8006f32:	431a      	orrs	r2, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6999      	ldr	r1, [r3, #24]
 8006f38:	2380      	movs	r3, #128	; 0x80
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	400b      	ands	r3, r1
 8006f3e:	431a      	orrs	r2, r3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	69db      	ldr	r3, [r3, #28]
 8006f44:	431a      	orrs	r2, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6a1b      	ldr	r3, [r3, #32]
 8006f4a:	431a      	orrs	r2, r3
 8006f4c:	0011      	movs	r1, r2
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	430a      	orrs	r2, r1
 8006f58:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	699b      	ldr	r3, [r3, #24]
 8006f5e:	0c1b      	lsrs	r3, r3, #16
 8006f60:	2204      	movs	r2, #4
 8006f62:	4013      	ands	r3, r2
 8006f64:	0019      	movs	r1, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	430a      	orrs	r2, r1
 8006f70:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	69da      	ldr	r2, [r3, #28]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4907      	ldr	r1, [pc, #28]	; (8006f9c <HAL_SPI_Init+0xd0>)
 8006f7e:	400a      	ands	r2, r1
 8006f80:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2251      	movs	r2, #81	; 0x51
 8006f8c:	2101      	movs	r1, #1
 8006f8e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	0018      	movs	r0, r3
 8006f94:	46bd      	mov	sp, r7
 8006f96:	b002      	add	sp, #8
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	46c0      	nop			; (mov r8, r8)
 8006f9c:	fffff7ff 	.word	0xfffff7ff

08006fa0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b088      	sub	sp, #32
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	603b      	str	r3, [r7, #0]
 8006fac:	1dbb      	adds	r3, r7, #6
 8006fae:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006fb0:	231f      	movs	r3, #31
 8006fb2:	18fb      	adds	r3, r7, r3
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2250      	movs	r2, #80	; 0x50
 8006fbc:	5c9b      	ldrb	r3, [r3, r2]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d101      	bne.n	8006fc6 <HAL_SPI_Transmit+0x26>
 8006fc2:	2302      	movs	r3, #2
 8006fc4:	e136      	b.n	8007234 <HAL_SPI_Transmit+0x294>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2250      	movs	r2, #80	; 0x50
 8006fca:	2101      	movs	r1, #1
 8006fcc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006fce:	f7fd fabf 	bl	8004550 <HAL_GetTick>
 8006fd2:	0003      	movs	r3, r0
 8006fd4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006fd6:	2316      	movs	r3, #22
 8006fd8:	18fb      	adds	r3, r7, r3
 8006fda:	1dba      	adds	r2, r7, #6
 8006fdc:	8812      	ldrh	r2, [r2, #0]
 8006fde:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2251      	movs	r2, #81	; 0x51
 8006fe4:	5c9b      	ldrb	r3, [r3, r2]
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d004      	beq.n	8006ff6 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8006fec:	231f      	movs	r3, #31
 8006fee:	18fb      	adds	r3, r7, r3
 8006ff0:	2202      	movs	r2, #2
 8006ff2:	701a      	strb	r2, [r3, #0]
    goto error;
 8006ff4:	e113      	b.n	800721e <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d003      	beq.n	8007004 <HAL_SPI_Transmit+0x64>
 8006ffc:	1dbb      	adds	r3, r7, #6
 8006ffe:	881b      	ldrh	r3, [r3, #0]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d104      	bne.n	800700e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8007004:	231f      	movs	r3, #31
 8007006:	18fb      	adds	r3, r7, r3
 8007008:	2201      	movs	r2, #1
 800700a:	701a      	strb	r2, [r3, #0]
    goto error;
 800700c:	e107      	b.n	800721e <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2251      	movs	r2, #81	; 0x51
 8007012:	2103      	movs	r1, #3
 8007014:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2200      	movs	r2, #0
 800701a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	68ba      	ldr	r2, [r7, #8]
 8007020:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	1dba      	adds	r2, r7, #6
 8007026:	8812      	ldrh	r2, [r2, #0]
 8007028:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	1dba      	adds	r2, r7, #6
 800702e:	8812      	ldrh	r2, [r2, #0]
 8007030:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2200      	movs	r2, #0
 8007036:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2200      	movs	r2, #0
 800703c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2200      	movs	r2, #0
 8007042:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2200      	movs	r2, #0
 8007048:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2200      	movs	r2, #0
 800704e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	689a      	ldr	r2, [r3, #8]
 8007054:	2380      	movs	r3, #128	; 0x80
 8007056:	021b      	lsls	r3, r3, #8
 8007058:	429a      	cmp	r2, r3
 800705a:	d108      	bne.n	800706e <HAL_SPI_Transmit+0xce>
  {
    SPI_1LINE_TX(hspi);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	2180      	movs	r1, #128	; 0x80
 8007068:	01c9      	lsls	r1, r1, #7
 800706a:	430a      	orrs	r2, r1
 800706c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	2240      	movs	r2, #64	; 0x40
 8007076:	4013      	ands	r3, r2
 8007078:	2b40      	cmp	r3, #64	; 0x40
 800707a:	d007      	beq.n	800708c <HAL_SPI_Transmit+0xec>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2140      	movs	r1, #64	; 0x40
 8007088:	430a      	orrs	r2, r1
 800708a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	68da      	ldr	r2, [r3, #12]
 8007090:	2380      	movs	r3, #128	; 0x80
 8007092:	011b      	lsls	r3, r3, #4
 8007094:	429a      	cmp	r2, r3
 8007096:	d14e      	bne.n	8007136 <HAL_SPI_Transmit+0x196>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d004      	beq.n	80070aa <HAL_SPI_Transmit+0x10a>
 80070a0:	2316      	movs	r3, #22
 80070a2:	18fb      	adds	r3, r7, r3
 80070a4:	881b      	ldrh	r3, [r3, #0]
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d13f      	bne.n	800712a <HAL_SPI_Transmit+0x18a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ae:	881a      	ldrh	r2, [r3, #0]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ba:	1c9a      	adds	r2, r3, #2
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	3b01      	subs	r3, #1
 80070c8:	b29a      	uxth	r2, r3
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80070ce:	e02c      	b.n	800712a <HAL_SPI_Transmit+0x18a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	2202      	movs	r2, #2
 80070d8:	4013      	ands	r3, r2
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d112      	bne.n	8007104 <HAL_SPI_Transmit+0x164>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e2:	881a      	ldrh	r2, [r3, #0]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ee:	1c9a      	adds	r2, r3, #2
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	3b01      	subs	r3, #1
 80070fc:	b29a      	uxth	r2, r3
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	86da      	strh	r2, [r3, #54]	; 0x36
 8007102:	e012      	b.n	800712a <HAL_SPI_Transmit+0x18a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007104:	f7fd fa24 	bl	8004550 <HAL_GetTick>
 8007108:	0002      	movs	r2, r0
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	683a      	ldr	r2, [r7, #0]
 8007110:	429a      	cmp	r2, r3
 8007112:	d802      	bhi.n	800711a <HAL_SPI_Transmit+0x17a>
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	3301      	adds	r3, #1
 8007118:	d102      	bne.n	8007120 <HAL_SPI_Transmit+0x180>
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d104      	bne.n	800712a <HAL_SPI_Transmit+0x18a>
        {
          errorcode = HAL_TIMEOUT;
 8007120:	231f      	movs	r3, #31
 8007122:	18fb      	adds	r3, r7, r3
 8007124:	2203      	movs	r2, #3
 8007126:	701a      	strb	r2, [r3, #0]
          goto error;
 8007128:	e079      	b.n	800721e <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800712e:	b29b      	uxth	r3, r3
 8007130:	2b00      	cmp	r3, #0
 8007132:	d1cd      	bne.n	80070d0 <HAL_SPI_Transmit+0x130>
 8007134:	e04f      	b.n	80071d6 <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d004      	beq.n	8007148 <HAL_SPI_Transmit+0x1a8>
 800713e:	2316      	movs	r3, #22
 8007140:	18fb      	adds	r3, r7, r3
 8007142:	881b      	ldrh	r3, [r3, #0]
 8007144:	2b01      	cmp	r3, #1
 8007146:	d141      	bne.n	80071cc <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	330c      	adds	r3, #12
 8007152:	7812      	ldrb	r2, [r2, #0]
 8007154:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800715a:	1c5a      	adds	r2, r3, #1
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007164:	b29b      	uxth	r3, r3
 8007166:	3b01      	subs	r3, #1
 8007168:	b29a      	uxth	r2, r3
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800716e:	e02d      	b.n	80071cc <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	2202      	movs	r2, #2
 8007178:	4013      	ands	r3, r2
 800717a:	2b02      	cmp	r3, #2
 800717c:	d113      	bne.n	80071a6 <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	330c      	adds	r3, #12
 8007188:	7812      	ldrb	r2, [r2, #0]
 800718a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007190:	1c5a      	adds	r2, r3, #1
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800719a:	b29b      	uxth	r3, r3
 800719c:	3b01      	subs	r3, #1
 800719e:	b29a      	uxth	r2, r3
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	86da      	strh	r2, [r3, #54]	; 0x36
 80071a4:	e012      	b.n	80071cc <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071a6:	f7fd f9d3 	bl	8004550 <HAL_GetTick>
 80071aa:	0002      	movs	r2, r0
 80071ac:	69bb      	ldr	r3, [r7, #24]
 80071ae:	1ad3      	subs	r3, r2, r3
 80071b0:	683a      	ldr	r2, [r7, #0]
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d802      	bhi.n	80071bc <HAL_SPI_Transmit+0x21c>
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	3301      	adds	r3, #1
 80071ba:	d102      	bne.n	80071c2 <HAL_SPI_Transmit+0x222>
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d104      	bne.n	80071cc <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 80071c2:	231f      	movs	r3, #31
 80071c4:	18fb      	adds	r3, r7, r3
 80071c6:	2203      	movs	r2, #3
 80071c8:	701a      	strb	r2, [r3, #0]
          goto error;
 80071ca:	e028      	b.n	800721e <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d1cc      	bne.n	8007170 <HAL_SPI_Transmit+0x1d0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80071d6:	69ba      	ldr	r2, [r7, #24]
 80071d8:	6839      	ldr	r1, [r7, #0]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	0018      	movs	r0, r3
 80071de:	f000 fa99 	bl	8007714 <SPI_EndRxTxTransaction>
 80071e2:	1e03      	subs	r3, r0, #0
 80071e4:	d002      	beq.n	80071ec <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2220      	movs	r2, #32
 80071ea:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d10a      	bne.n	800720a <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80071f4:	2300      	movs	r3, #0
 80071f6:	613b      	str	r3, [r7, #16]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	613b      	str	r3, [r7, #16]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	613b      	str	r3, [r7, #16]
 8007208:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800720e:	2b00      	cmp	r3, #0
 8007210:	d004      	beq.n	800721c <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 8007212:	231f      	movs	r3, #31
 8007214:	18fb      	adds	r3, r7, r3
 8007216:	2201      	movs	r2, #1
 8007218:	701a      	strb	r2, [r3, #0]
 800721a:	e000      	b.n	800721e <HAL_SPI_Transmit+0x27e>
  }

error:
 800721c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2251      	movs	r2, #81	; 0x51
 8007222:	2101      	movs	r1, #1
 8007224:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2250      	movs	r2, #80	; 0x50
 800722a:	2100      	movs	r1, #0
 800722c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800722e:	231f      	movs	r3, #31
 8007230:	18fb      	adds	r3, r7, r3
 8007232:	781b      	ldrb	r3, [r3, #0]
}
 8007234:	0018      	movs	r0, r3
 8007236:	46bd      	mov	sp, r7
 8007238:	b008      	add	sp, #32
 800723a:	bd80      	pop	{r7, pc}

0800723c <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b086      	sub	sp, #24
 8007240:	af00      	add	r7, sp, #0
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	60b9      	str	r1, [r7, #8]
 8007246:	1dbb      	adds	r3, r7, #6
 8007248:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800724a:	2317      	movs	r3, #23
 800724c:	18fb      	adds	r3, r7, r3
 800724e:	2200      	movs	r2, #0
 8007250:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2250      	movs	r2, #80	; 0x50
 8007256:	5c9b      	ldrb	r3, [r3, r2]
 8007258:	2b01      	cmp	r3, #1
 800725a:	d101      	bne.n	8007260 <HAL_SPI_Transmit_IT+0x24>
 800725c:	2302      	movs	r3, #2
 800725e:	e072      	b.n	8007346 <HAL_SPI_Transmit_IT+0x10a>
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2250      	movs	r2, #80	; 0x50
 8007264:	2101      	movs	r1, #1
 8007266:	5499      	strb	r1, [r3, r2]

  if ((pData == NULL) || (Size == 0U))
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d003      	beq.n	8007276 <HAL_SPI_Transmit_IT+0x3a>
 800726e:	1dbb      	adds	r3, r7, #6
 8007270:	881b      	ldrh	r3, [r3, #0]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d104      	bne.n	8007280 <HAL_SPI_Transmit_IT+0x44>
  {
    errorcode = HAL_ERROR;
 8007276:	2317      	movs	r3, #23
 8007278:	18fb      	adds	r3, r7, r3
 800727a:	2201      	movs	r2, #1
 800727c:	701a      	strb	r2, [r3, #0]
    goto error;
 800727e:	e05b      	b.n	8007338 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2251      	movs	r2, #81	; 0x51
 8007284:	5c9b      	ldrb	r3, [r3, r2]
 8007286:	b2db      	uxtb	r3, r3
 8007288:	2b01      	cmp	r3, #1
 800728a:	d004      	beq.n	8007296 <HAL_SPI_Transmit_IT+0x5a>
  {
    errorcode = HAL_BUSY;
 800728c:	2317      	movs	r3, #23
 800728e:	18fb      	adds	r3, r7, r3
 8007290:	2202      	movs	r2, #2
 8007292:	701a      	strb	r2, [r3, #0]
    goto error;
 8007294:	e050      	b.n	8007338 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2251      	movs	r2, #81	; 0x51
 800729a:	2103      	movs	r1, #3
 800729c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2200      	movs	r2, #0
 80072a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	68ba      	ldr	r2, [r7, #8]
 80072a8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	1dba      	adds	r2, r7, #6
 80072ae:	8812      	ldrh	r2, [r2, #0]
 80072b0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	1dba      	adds	r2, r7, #6
 80072b6:	8812      	ldrh	r2, [r2, #0]
 80072b8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2200      	movs	r2, #0
 80072be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2200      	movs	r2, #0
 80072c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2200      	movs	r2, #0
 80072ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2200      	movs	r2, #0
 80072d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	68db      	ldr	r3, [r3, #12]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d003      	beq.n	80072e2 <HAL_SPI_Transmit_IT+0xa6>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	4a1c      	ldr	r2, [pc, #112]	; (8007350 <HAL_SPI_Transmit_IT+0x114>)
 80072de:	645a      	str	r2, [r3, #68]	; 0x44
 80072e0:	e002      	b.n	80072e8 <HAL_SPI_Transmit_IT+0xac>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	4a1b      	ldr	r2, [pc, #108]	; (8007354 <HAL_SPI_Transmit_IT+0x118>)
 80072e6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	689a      	ldr	r2, [r3, #8]
 80072ec:	2380      	movs	r3, #128	; 0x80
 80072ee:	021b      	lsls	r3, r3, #8
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d108      	bne.n	8007306 <HAL_SPI_Transmit_IT+0xca>
  {
    SPI_1LINE_TX(hspi);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	2180      	movs	r1, #128	; 0x80
 8007300:	01c9      	lsls	r1, r1, #7
 8007302:	430a      	orrs	r2, r1
 8007304:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	685a      	ldr	r2, [r3, #4]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	21a0      	movs	r1, #160	; 0xa0
 8007312:	430a      	orrs	r2, r1
 8007314:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	2240      	movs	r2, #64	; 0x40
 800731e:	4013      	ands	r3, r2
 8007320:	2b40      	cmp	r3, #64	; 0x40
 8007322:	d008      	beq.n	8007336 <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2140      	movs	r1, #64	; 0x40
 8007330:	430a      	orrs	r2, r1
 8007332:	601a      	str	r2, [r3, #0]
 8007334:	e000      	b.n	8007338 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 8007336:	46c0      	nop			; (mov r8, r8)
  __HAL_UNLOCK(hspi);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2250      	movs	r2, #80	; 0x50
 800733c:	2100      	movs	r1, #0
 800733e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007340:	2317      	movs	r3, #23
 8007342:	18fb      	adds	r3, r7, r3
 8007344:	781b      	ldrb	r3, [r3, #0]
}
 8007346:	0018      	movs	r0, r3
 8007348:	46bd      	mov	sp, r7
 800734a:	b006      	add	sp, #24
 800734c:	bd80      	pop	{r7, pc}
 800734e:	46c0      	nop			; (mov r8, r8)
 8007350:	080075ef 	.word	0x080075ef
 8007354:	080075a7 	.word	0x080075a7

08007358 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b088      	sub	sp, #32
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	099b      	lsrs	r3, r3, #6
 8007374:	001a      	movs	r2, r3
 8007376:	2301      	movs	r3, #1
 8007378:	4013      	ands	r3, r2
 800737a:	d10f      	bne.n	800739c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	2201      	movs	r2, #1
 8007380:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007382:	d00b      	beq.n	800739c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	099b      	lsrs	r3, r3, #6
 8007388:	001a      	movs	r2, r3
 800738a:	2301      	movs	r3, #1
 800738c:	4013      	ands	r3, r2
 800738e:	d005      	beq.n	800739c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	0010      	movs	r0, r2
 8007398:	4798      	blx	r3
    return;
 800739a:	e0d6      	b.n	800754a <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800739c:	69bb      	ldr	r3, [r7, #24]
 800739e:	085b      	lsrs	r3, r3, #1
 80073a0:	001a      	movs	r2, r3
 80073a2:	2301      	movs	r3, #1
 80073a4:	4013      	ands	r3, r2
 80073a6:	d00b      	beq.n	80073c0 <HAL_SPI_IRQHandler+0x68>
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	09db      	lsrs	r3, r3, #7
 80073ac:	001a      	movs	r2, r3
 80073ae:	2301      	movs	r3, #1
 80073b0:	4013      	ands	r3, r2
 80073b2:	d005      	beq.n	80073c0 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	0010      	movs	r0, r2
 80073bc:	4798      	blx	r3
    return;
 80073be:	e0c4      	b.n	800754a <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	095b      	lsrs	r3, r3, #5
 80073c4:	001a      	movs	r2, r3
 80073c6:	2301      	movs	r3, #1
 80073c8:	4013      	ands	r3, r2
 80073ca:	d10c      	bne.n	80073e6 <HAL_SPI_IRQHandler+0x8e>
 80073cc:	69bb      	ldr	r3, [r7, #24]
 80073ce:	099b      	lsrs	r3, r3, #6
 80073d0:	001a      	movs	r2, r3
 80073d2:	2301      	movs	r3, #1
 80073d4:	4013      	ands	r3, r2
 80073d6:	d106      	bne.n	80073e6 <HAL_SPI_IRQHandler+0x8e>
 80073d8:	69bb      	ldr	r3, [r7, #24]
 80073da:	0a1b      	lsrs	r3, r3, #8
 80073dc:	001a      	movs	r2, r3
 80073de:	2301      	movs	r3, #1
 80073e0:	4013      	ands	r3, r2
 80073e2:	d100      	bne.n	80073e6 <HAL_SPI_IRQHandler+0x8e>
 80073e4:	e0b1      	b.n	800754a <HAL_SPI_IRQHandler+0x1f2>
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	095b      	lsrs	r3, r3, #5
 80073ea:	001a      	movs	r2, r3
 80073ec:	2301      	movs	r3, #1
 80073ee:	4013      	ands	r3, r2
 80073f0:	d100      	bne.n	80073f4 <HAL_SPI_IRQHandler+0x9c>
 80073f2:	e0aa      	b.n	800754a <HAL_SPI_IRQHandler+0x1f2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	099b      	lsrs	r3, r3, #6
 80073f8:	001a      	movs	r2, r3
 80073fa:	2301      	movs	r3, #1
 80073fc:	4013      	ands	r3, r2
 80073fe:	d023      	beq.n	8007448 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2251      	movs	r2, #81	; 0x51
 8007404:	5c9b      	ldrb	r3, [r3, r2]
 8007406:	b2db      	uxtb	r3, r3
 8007408:	2b03      	cmp	r3, #3
 800740a:	d011      	beq.n	8007430 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007410:	2204      	movs	r2, #4
 8007412:	431a      	orrs	r2, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007418:	2300      	movs	r3, #0
 800741a:	617b      	str	r3, [r7, #20]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	617b      	str	r3, [r7, #20]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	617b      	str	r3, [r7, #20]
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	e00b      	b.n	8007448 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007430:	2300      	movs	r3, #0
 8007432:	613b      	str	r3, [r7, #16]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	613b      	str	r3, [r7, #16]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	613b      	str	r3, [r7, #16]
 8007444:	693b      	ldr	r3, [r7, #16]
        return;
 8007446:	e080      	b.n	800754a <HAL_SPI_IRQHandler+0x1f2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007448:	69bb      	ldr	r3, [r7, #24]
 800744a:	095b      	lsrs	r3, r3, #5
 800744c:	001a      	movs	r2, r3
 800744e:	2301      	movs	r3, #1
 8007450:	4013      	ands	r3, r2
 8007452:	d014      	beq.n	800747e <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007458:	2201      	movs	r2, #1
 800745a:	431a      	orrs	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007460:	2300      	movs	r3, #0
 8007462:	60fb      	str	r3, [r7, #12]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	60fb      	str	r3, [r7, #12]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2140      	movs	r1, #64	; 0x40
 8007478:	438a      	bics	r2, r1
 800747a:	601a      	str	r2, [r3, #0]
 800747c:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	0a1b      	lsrs	r3, r3, #8
 8007482:	001a      	movs	r2, r3
 8007484:	2301      	movs	r3, #1
 8007486:	4013      	ands	r3, r2
 8007488:	d00c      	beq.n	80074a4 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800748e:	2208      	movs	r2, #8
 8007490:	431a      	orrs	r2, r3
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007496:	2300      	movs	r3, #0
 8007498:	60bb      	str	r3, [r7, #8]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	60bb      	str	r3, [r7, #8]
 80074a2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d04d      	beq.n	8007548 <HAL_SPI_IRQHandler+0x1f0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	685a      	ldr	r2, [r3, #4]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	21e0      	movs	r1, #224	; 0xe0
 80074b8:	438a      	bics	r2, r1
 80074ba:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2251      	movs	r2, #81	; 0x51
 80074c0:	2101      	movs	r1, #1
 80074c2:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	2202      	movs	r2, #2
 80074c8:	4013      	ands	r3, r2
 80074ca:	d103      	bne.n	80074d4 <HAL_SPI_IRQHandler+0x17c>
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	2201      	movs	r2, #1
 80074d0:	4013      	ands	r3, r2
 80074d2:	d032      	beq.n	800753a <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	685a      	ldr	r2, [r3, #4]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	2103      	movs	r1, #3
 80074e0:	438a      	bics	r2, r1
 80074e2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d010      	beq.n	800750e <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074f0:	4a17      	ldr	r2, [pc, #92]	; (8007550 <HAL_SPI_IRQHandler+0x1f8>)
 80074f2:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074f8:	0018      	movs	r0, r3
 80074fa:	f7fd fc25 	bl	8004d48 <HAL_DMA_Abort_IT>
 80074fe:	1e03      	subs	r3, r0, #0
 8007500:	d005      	beq.n	800750e <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007506:	2240      	movs	r2, #64	; 0x40
 8007508:	431a      	orrs	r2, r3
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007512:	2b00      	cmp	r3, #0
 8007514:	d016      	beq.n	8007544 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800751a:	4a0d      	ldr	r2, [pc, #52]	; (8007550 <HAL_SPI_IRQHandler+0x1f8>)
 800751c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007522:	0018      	movs	r0, r3
 8007524:	f7fd fc10 	bl	8004d48 <HAL_DMA_Abort_IT>
 8007528:	1e03      	subs	r3, r0, #0
 800752a:	d00b      	beq.n	8007544 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007530:	2240      	movs	r2, #64	; 0x40
 8007532:	431a      	orrs	r2, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8007538:	e004      	b.n	8007544 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	0018      	movs	r0, r3
 800753e:	f000 f809 	bl	8007554 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007542:	e000      	b.n	8007546 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8007544:	46c0      	nop			; (mov r8, r8)
    return;
 8007546:	46c0      	nop			; (mov r8, r8)
 8007548:	46c0      	nop			; (mov r8, r8)
  }
}
 800754a:	46bd      	mov	sp, r7
 800754c:	b008      	add	sp, #32
 800754e:	bd80      	pop	{r7, pc}
 8007550:	0800757d 	.word	0x0800757d

08007554 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800755c:	46c0      	nop			; (mov r8, r8)
 800755e:	46bd      	mov	sp, r7
 8007560:	b002      	add	sp, #8
 8007562:	bd80      	pop	{r7, pc}

08007564 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2251      	movs	r2, #81	; 0x51
 8007570:	5c9b      	ldrb	r3, [r3, r2]
 8007572:	b2db      	uxtb	r3, r3
}
 8007574:	0018      	movs	r0, r3
 8007576:	46bd      	mov	sp, r7
 8007578:	b002      	add	sp, #8
 800757a:	bd80      	pop	{r7, pc}

0800757c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007588:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2200      	movs	r2, #0
 800758e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2200      	movs	r2, #0
 8007594:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	0018      	movs	r0, r3
 800759a:	f7ff ffdb 	bl	8007554 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800759e:	46c0      	nop			; (mov r8, r8)
 80075a0:	46bd      	mov	sp, r7
 80075a2:	b004      	add	sp, #16
 80075a4:	bd80      	pop	{r7, pc}

080075a6 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b082      	sub	sp, #8
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	330c      	adds	r3, #12
 80075b8:	7812      	ldrb	r2, [r2, #0]
 80075ba:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c0:	1c5a      	adds	r2, r3, #1
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	3b01      	subs	r3, #1
 80075ce:	b29a      	uxth	r2, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075d8:	b29b      	uxth	r3, r3
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d103      	bne.n	80075e6 <SPI_TxISR_8BIT+0x40>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	0018      	movs	r0, r3
 80075e2:	f000 f8d5 	bl	8007790 <SPI_CloseTx_ISR>
  }
}
 80075e6:	46c0      	nop			; (mov r8, r8)
 80075e8:	46bd      	mov	sp, r7
 80075ea:	b002      	add	sp, #8
 80075ec:	bd80      	pop	{r7, pc}

080075ee <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b082      	sub	sp, #8
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075fa:	881a      	ldrh	r2, [r3, #0]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007606:	1c9a      	adds	r2, r3, #2
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007610:	b29b      	uxth	r3, r3
 8007612:	3b01      	subs	r3, #1
 8007614:	b29a      	uxth	r2, r3
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800761e:	b29b      	uxth	r3, r3
 8007620:	2b00      	cmp	r3, #0
 8007622:	d103      	bne.n	800762c <SPI_TxISR_16BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	0018      	movs	r0, r3
 8007628:	f000 f8b2 	bl	8007790 <SPI_CloseTx_ISR>
  }
}
 800762c:	46c0      	nop			; (mov r8, r8)
 800762e:	46bd      	mov	sp, r7
 8007630:	b002      	add	sp, #8
 8007632:	bd80      	pop	{r7, pc}

08007634 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	603b      	str	r3, [r7, #0]
 8007640:	1dfb      	adds	r3, r7, #7
 8007642:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007644:	e050      	b.n	80076e8 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	3301      	adds	r3, #1
 800764a:	d04d      	beq.n	80076e8 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800764c:	f7fc ff80 	bl	8004550 <HAL_GetTick>
 8007650:	0002      	movs	r2, r0
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	1ad3      	subs	r3, r2, r3
 8007656:	683a      	ldr	r2, [r7, #0]
 8007658:	429a      	cmp	r2, r3
 800765a:	d902      	bls.n	8007662 <SPI_WaitFlagStateUntilTimeout+0x2e>
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d142      	bne.n	80076e8 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	685a      	ldr	r2, [r3, #4]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	21e0      	movs	r1, #224	; 0xe0
 800766e:	438a      	bics	r2, r1
 8007670:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	685a      	ldr	r2, [r3, #4]
 8007676:	2382      	movs	r3, #130	; 0x82
 8007678:	005b      	lsls	r3, r3, #1
 800767a:	429a      	cmp	r2, r3
 800767c:	d113      	bne.n	80076a6 <SPI_WaitFlagStateUntilTimeout+0x72>
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	689a      	ldr	r2, [r3, #8]
 8007682:	2380      	movs	r3, #128	; 0x80
 8007684:	021b      	lsls	r3, r3, #8
 8007686:	429a      	cmp	r2, r3
 8007688:	d005      	beq.n	8007696 <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	689a      	ldr	r2, [r3, #8]
 800768e:	2380      	movs	r3, #128	; 0x80
 8007690:	00db      	lsls	r3, r3, #3
 8007692:	429a      	cmp	r2, r3
 8007694:	d107      	bne.n	80076a6 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2140      	movs	r1, #64	; 0x40
 80076a2:	438a      	bics	r2, r1
 80076a4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80076aa:	2380      	movs	r3, #128	; 0x80
 80076ac:	019b      	lsls	r3, r3, #6
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d110      	bne.n	80076d4 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4914      	ldr	r1, [pc, #80]	; (8007710 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 80076be:	400a      	ands	r2, r1
 80076c0:	601a      	str	r2, [r3, #0]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2180      	movs	r1, #128	; 0x80
 80076ce:	0189      	lsls	r1, r1, #6
 80076d0:	430a      	orrs	r2, r1
 80076d2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2251      	movs	r2, #81	; 0x51
 80076d8:	2101      	movs	r1, #1
 80076da:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2250      	movs	r2, #80	; 0x50
 80076e0:	2100      	movs	r1, #0
 80076e2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80076e4:	2303      	movs	r3, #3
 80076e6:	e00f      	b.n	8007708 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	68ba      	ldr	r2, [r7, #8]
 80076f0:	4013      	ands	r3, r2
 80076f2:	68ba      	ldr	r2, [r7, #8]
 80076f4:	1ad3      	subs	r3, r2, r3
 80076f6:	425a      	negs	r2, r3
 80076f8:	4153      	adcs	r3, r2
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	001a      	movs	r2, r3
 80076fe:	1dfb      	adds	r3, r7, #7
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	429a      	cmp	r2, r3
 8007704:	d19f      	bne.n	8007646 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007706:	2300      	movs	r3, #0
}
 8007708:	0018      	movs	r0, r3
 800770a:	46bd      	mov	sp, r7
 800770c:	b004      	add	sp, #16
 800770e:	bd80      	pop	{r7, pc}
 8007710:	ffffdfff 	.word	0xffffdfff

08007714 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b086      	sub	sp, #24
 8007718:	af02      	add	r7, sp, #8
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	60b9      	str	r1, [r7, #8]
 800771e:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	685a      	ldr	r2, [r3, #4]
 8007724:	2382      	movs	r3, #130	; 0x82
 8007726:	005b      	lsls	r3, r3, #1
 8007728:	429a      	cmp	r2, r3
 800772a:	d112      	bne.n	8007752 <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800772c:	68ba      	ldr	r2, [r7, #8]
 800772e:	68f8      	ldr	r0, [r7, #12]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	9300      	str	r3, [sp, #0]
 8007734:	0013      	movs	r3, r2
 8007736:	2200      	movs	r2, #0
 8007738:	2180      	movs	r1, #128	; 0x80
 800773a:	f7ff ff7b 	bl	8007634 <SPI_WaitFlagStateUntilTimeout>
 800773e:	1e03      	subs	r3, r0, #0
 8007740:	d020      	beq.n	8007784 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007746:	2220      	movs	r2, #32
 8007748:	431a      	orrs	r2, r3
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800774e:	2303      	movs	r3, #3
 8007750:	e019      	b.n	8007786 <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2251      	movs	r2, #81	; 0x51
 8007756:	5c9b      	ldrb	r3, [r3, r2]
 8007758:	b2db      	uxtb	r3, r3
 800775a:	2b05      	cmp	r3, #5
 800775c:	d112      	bne.n	8007784 <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800775e:	68ba      	ldr	r2, [r7, #8]
 8007760:	68f8      	ldr	r0, [r7, #12]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	9300      	str	r3, [sp, #0]
 8007766:	0013      	movs	r3, r2
 8007768:	2200      	movs	r2, #0
 800776a:	2101      	movs	r1, #1
 800776c:	f7ff ff62 	bl	8007634 <SPI_WaitFlagStateUntilTimeout>
 8007770:	1e03      	subs	r3, r0, #0
 8007772:	d007      	beq.n	8007784 <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007778:	2220      	movs	r2, #32
 800777a:	431a      	orrs	r2, r3
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007780:	2303      	movs	r3, #3
 8007782:	e000      	b.n	8007786 <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 8007784:	2300      	movs	r3, #0
}
 8007786:	0018      	movs	r0, r3
 8007788:	46bd      	mov	sp, r7
 800778a:	b004      	add	sp, #16
 800778c:	bd80      	pop	{r7, pc}
	...

08007790 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b086      	sub	sp, #24
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8007798:	4b2d      	ldr	r3, [pc, #180]	; (8007850 <SPI_CloseTx_ISR+0xc0>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	492d      	ldr	r1, [pc, #180]	; (8007854 <SPI_CloseTx_ISR+0xc4>)
 800779e:	0018      	movs	r0, r3
 80077a0:	f7f8 fcba 	bl	8000118 <__udivsi3>
 80077a4:	0003      	movs	r3, r0
 80077a6:	001a      	movs	r2, r3
 80077a8:	2364      	movs	r3, #100	; 0x64
 80077aa:	4353      	muls	r3, r2
 80077ac:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80077ae:	f7fc fecf 	bl	8004550 <HAL_GetTick>
 80077b2:	0003      	movs	r3, r0
 80077b4:	617b      	str	r3, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d106      	bne.n	80077ca <SPI_CloseTx_ISR+0x3a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077c0:	2220      	movs	r2, #32
 80077c2:	431a      	orrs	r2, r3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80077c8:	e008      	b.n	80077dc <SPI_CloseTx_ISR+0x4c>
    }
    count--;
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	3b01      	subs	r3, #1
 80077ce:	613b      	str	r3, [r7, #16]
  }
  while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	2202      	movs	r2, #2
 80077d8:	4013      	ands	r3, r2
 80077da:	d0ec      	beq.n	80077b6 <SPI_CloseTx_ISR+0x26>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	685a      	ldr	r2, [r3, #4]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	21a0      	movs	r1, #160	; 0xa0
 80077e8:	438a      	bics	r2, r1
 80077ea:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80077ec:	697a      	ldr	r2, [r7, #20]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2164      	movs	r1, #100	; 0x64
 80077f2:	0018      	movs	r0, r3
 80077f4:	f7ff ff8e 	bl	8007714 <SPI_EndRxTxTransaction>
 80077f8:	1e03      	subs	r3, r0, #0
 80077fa:	d005      	beq.n	8007808 <SPI_CloseTx_ISR+0x78>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007800:	2220      	movs	r2, #32
 8007802:	431a      	orrs	r2, r3
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d10a      	bne.n	8007826 <SPI_CloseTx_ISR+0x96>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007810:	2300      	movs	r3, #0
 8007812:	60fb      	str	r3, [r7, #12]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	60fb      	str	r3, [r7, #12]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	60fb      	str	r3, [r7, #12]
 8007824:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2251      	movs	r2, #81	; 0x51
 800782a:	2101      	movs	r1, #1
 800782c:	5499      	strb	r1, [r3, r2]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007832:	2b00      	cmp	r3, #0
 8007834:	d004      	beq.n	8007840 <SPI_CloseTx_ISR+0xb0>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	0018      	movs	r0, r3
 800783a:	f7ff fe8b 	bl	8007554 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800783e:	e003      	b.n	8007848 <SPI_CloseTx_ISR+0xb8>
    HAL_SPI_TxCpltCallback(hspi);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	0018      	movs	r0, r3
 8007844:	f7f8 fe4c 	bl	80004e0 <HAL_SPI_TxCpltCallback>
}
 8007848:	46c0      	nop			; (mov r8, r8)
 800784a:	46bd      	mov	sp, r7
 800784c:	b006      	add	sp, #24
 800784e:	bd80      	pop	{r7, pc}
 8007850:	20000064 	.word	0x20000064
 8007854:	00005dc0 	.word	0x00005dc0

08007858 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b082      	sub	sp, #8
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d101      	bne.n	800786a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	e01e      	b.n	80078a8 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2239      	movs	r2, #57	; 0x39
 800786e:	5c9b      	ldrb	r3, [r3, r2]
 8007870:	b2db      	uxtb	r3, r3
 8007872:	2b00      	cmp	r3, #0
 8007874:	d107      	bne.n	8007886 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2238      	movs	r2, #56	; 0x38
 800787a:	2100      	movs	r1, #0
 800787c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	0018      	movs	r0, r3
 8007882:	f7fc fa51 	bl	8003d28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2239      	movs	r2, #57	; 0x39
 800788a:	2102      	movs	r1, #2
 800788c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	3304      	adds	r3, #4
 8007896:	0019      	movs	r1, r3
 8007898:	0010      	movs	r0, r2
 800789a:	f000 fc1d 	bl	80080d8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2239      	movs	r2, #57	; 0x39
 80078a2:	2101      	movs	r1, #1
 80078a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	0018      	movs	r0, r3
 80078aa:	46bd      	mov	sp, r7
 80078ac:	b002      	add	sp, #8
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	68da      	ldr	r2, [r3, #12]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	2101      	movs	r1, #1
 80078c4:	430a      	orrs	r2, r1
 80078c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	2207      	movs	r2, #7
 80078d0:	4013      	ands	r3, r2
 80078d2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2b06      	cmp	r3, #6
 80078d8:	d007      	beq.n	80078ea <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	2101      	movs	r1, #1
 80078e6:	430a      	orrs	r2, r1
 80078e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80078ea:	2300      	movs	r3, #0
}
 80078ec:	0018      	movs	r0, r3
 80078ee:	46bd      	mov	sp, r7
 80078f0:	b004      	add	sp, #16
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b082      	sub	sp, #8
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	68da      	ldr	r2, [r3, #12]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2101      	movs	r1, #1
 8007908:	438a      	bics	r2, r1
 800790a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	6a1b      	ldr	r3, [r3, #32]
 8007912:	4a08      	ldr	r2, [pc, #32]	; (8007934 <HAL_TIM_Base_Stop_IT+0x40>)
 8007914:	4013      	ands	r3, r2
 8007916:	d107      	bne.n	8007928 <HAL_TIM_Base_Stop_IT+0x34>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	2101      	movs	r1, #1
 8007924:	438a      	bics	r2, r1
 8007926:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007928:	2300      	movs	r3, #0
}
 800792a:	0018      	movs	r0, r3
 800792c:	46bd      	mov	sp, r7
 800792e:	b002      	add	sp, #8
 8007930:	bd80      	pop	{r7, pc}
 8007932:	46c0      	nop			; (mov r8, r8)
 8007934:	00001111 	.word	0x00001111

08007938 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d101      	bne.n	800794a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	e01e      	b.n	8007988 <HAL_TIM_OC_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2239      	movs	r2, #57	; 0x39
 800794e:	5c9b      	ldrb	r3, [r3, r2]
 8007950:	b2db      	uxtb	r3, r3
 8007952:	2b00      	cmp	r3, #0
 8007954:	d107      	bne.n	8007966 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2238      	movs	r2, #56	; 0x38
 800795a:	2100      	movs	r1, #0
 800795c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	0018      	movs	r0, r3
 8007962:	f000 f815 	bl	8007990 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2239      	movs	r2, #57	; 0x39
 800796a:	2102      	movs	r1, #2
 800796c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	3304      	adds	r3, #4
 8007976:	0019      	movs	r1, r3
 8007978:	0010      	movs	r0, r2
 800797a:	f000 fbad 	bl	80080d8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2239      	movs	r2, #57	; 0x39
 8007982:	2101      	movs	r1, #1
 8007984:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007986:	2300      	movs	r3, #0
}
 8007988:	0018      	movs	r0, r3
 800798a:	46bd      	mov	sp, r7
 800798c:	b002      	add	sp, #8
 800798e:	bd80      	pop	{r7, pc}

08007990 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b082      	sub	sp, #8
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007998:	46c0      	nop			; (mov r8, r8)
 800799a:	46bd      	mov	sp, r7
 800799c:	b002      	add	sp, #8
 800799e:	bd80      	pop	{r7, pc}

080079a0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b084      	sub	sp, #16
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	2b04      	cmp	r3, #4
 80079ae:	d011      	beq.n	80079d4 <HAL_TIM_OC_Start_IT+0x34>
 80079b0:	d802      	bhi.n	80079b8 <HAL_TIM_OC_Start_IT+0x18>
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d005      	beq.n	80079c2 <HAL_TIM_OC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
      break;
    }

    default:
      break;
 80079b6:	e028      	b.n	8007a0a <HAL_TIM_OC_Start_IT+0x6a>
  switch (Channel)
 80079b8:	2b08      	cmp	r3, #8
 80079ba:	d014      	beq.n	80079e6 <HAL_TIM_OC_Start_IT+0x46>
 80079bc:	2b0c      	cmp	r3, #12
 80079be:	d01b      	beq.n	80079f8 <HAL_TIM_OC_Start_IT+0x58>
      break;
 80079c0:	e023      	b.n	8007a0a <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	68da      	ldr	r2, [r3, #12]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2102      	movs	r1, #2
 80079ce:	430a      	orrs	r2, r1
 80079d0:	60da      	str	r2, [r3, #12]
      break;
 80079d2:	e01a      	b.n	8007a0a <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	68da      	ldr	r2, [r3, #12]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	2104      	movs	r1, #4
 80079e0:	430a      	orrs	r2, r1
 80079e2:	60da      	str	r2, [r3, #12]
      break;
 80079e4:	e011      	b.n	8007a0a <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68da      	ldr	r2, [r3, #12]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	2108      	movs	r1, #8
 80079f2:	430a      	orrs	r2, r1
 80079f4:	60da      	str	r2, [r3, #12]
      break;
 80079f6:	e008      	b.n	8007a0a <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	68da      	ldr	r2, [r3, #12]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	2110      	movs	r1, #16
 8007a04:	430a      	orrs	r2, r1
 8007a06:	60da      	str	r2, [r3, #12]
      break;
 8007a08:	46c0      	nop			; (mov r8, r8)
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	6839      	ldr	r1, [r7, #0]
 8007a10:	2201      	movs	r2, #1
 8007a12:	0018      	movs	r0, r3
 8007a14:	f000 fd5c 	bl	80084d0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	2207      	movs	r2, #7
 8007a20:	4013      	ands	r3, r2
 8007a22:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2b06      	cmp	r3, #6
 8007a28:	d007      	beq.n	8007a3a <HAL_TIM_OC_Start_IT+0x9a>
  {
    __HAL_TIM_ENABLE(htim);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	2101      	movs	r1, #1
 8007a36:	430a      	orrs	r2, r1
 8007a38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a3a:	2300      	movs	r3, #0
}
 8007a3c:	0018      	movs	r0, r3
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	b004      	add	sp, #16
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b082      	sub	sp, #8
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	2b04      	cmp	r3, #4
 8007a52:	d011      	beq.n	8007a78 <HAL_TIM_OC_Stop_IT+0x34>
 8007a54:	d802      	bhi.n	8007a5c <HAL_TIM_OC_Stop_IT+0x18>
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d005      	beq.n	8007a66 <HAL_TIM_OC_Stop_IT+0x22>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
      break;
    }

    default:
      break;
 8007a5a:	e028      	b.n	8007aae <HAL_TIM_OC_Stop_IT+0x6a>
  switch (Channel)
 8007a5c:	2b08      	cmp	r3, #8
 8007a5e:	d014      	beq.n	8007a8a <HAL_TIM_OC_Stop_IT+0x46>
 8007a60:	2b0c      	cmp	r3, #12
 8007a62:	d01b      	beq.n	8007a9c <HAL_TIM_OC_Stop_IT+0x58>
      break;
 8007a64:	e023      	b.n	8007aae <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	68da      	ldr	r2, [r3, #12]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	2102      	movs	r1, #2
 8007a72:	438a      	bics	r2, r1
 8007a74:	60da      	str	r2, [r3, #12]
      break;
 8007a76:	e01a      	b.n	8007aae <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	68da      	ldr	r2, [r3, #12]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	2104      	movs	r1, #4
 8007a84:	438a      	bics	r2, r1
 8007a86:	60da      	str	r2, [r3, #12]
      break;
 8007a88:	e011      	b.n	8007aae <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	68da      	ldr	r2, [r3, #12]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	2108      	movs	r1, #8
 8007a96:	438a      	bics	r2, r1
 8007a98:	60da      	str	r2, [r3, #12]
      break;
 8007a9a:	e008      	b.n	8007aae <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	68da      	ldr	r2, [r3, #12]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	2110      	movs	r1, #16
 8007aa8:	438a      	bics	r2, r1
 8007aaa:	60da      	str	r2, [r3, #12]
      break;
 8007aac:	46c0      	nop			; (mov r8, r8)
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	6839      	ldr	r1, [r7, #0]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	0018      	movs	r0, r3
 8007ab8:	f000 fd0a 	bl	80084d0 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	6a1b      	ldr	r3, [r3, #32]
 8007ac2:	4a08      	ldr	r2, [pc, #32]	; (8007ae4 <HAL_TIM_OC_Stop_IT+0xa0>)
 8007ac4:	4013      	ands	r3, r2
 8007ac6:	d107      	bne.n	8007ad8 <HAL_TIM_OC_Stop_IT+0x94>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	2101      	movs	r1, #1
 8007ad4:	438a      	bics	r2, r1
 8007ad6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007ad8:	2300      	movs	r3, #0
}
 8007ada:	0018      	movs	r0, r3
 8007adc:	46bd      	mov	sp, r7
 8007ade:	b002      	add	sp, #8
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	46c0      	nop			; (mov r8, r8)
 8007ae4:	00001111 	.word	0x00001111

08007ae8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d101      	bne.n	8007afa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	e01e      	b.n	8007b38 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2239      	movs	r2, #57	; 0x39
 8007afe:	5c9b      	ldrb	r3, [r3, r2]
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d107      	bne.n	8007b16 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2238      	movs	r2, #56	; 0x38
 8007b0a:	2100      	movs	r1, #0
 8007b0c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	0018      	movs	r0, r3
 8007b12:	f000 f815 	bl	8007b40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2239      	movs	r2, #57	; 0x39
 8007b1a:	2102      	movs	r1, #2
 8007b1c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681a      	ldr	r2, [r3, #0]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	3304      	adds	r3, #4
 8007b26:	0019      	movs	r1, r3
 8007b28:	0010      	movs	r0, r2
 8007b2a:	f000 fad5 	bl	80080d8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2239      	movs	r2, #57	; 0x39
 8007b32:	2101      	movs	r1, #1
 8007b34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007b36:	2300      	movs	r3, #0
}
 8007b38:	0018      	movs	r0, r3
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	b002      	add	sp, #8
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b082      	sub	sp, #8
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007b48:	46c0      	nop			; (mov r8, r8)
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	b002      	add	sp, #8
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	691b      	ldr	r3, [r3, #16]
 8007b5e:	2202      	movs	r2, #2
 8007b60:	4013      	ands	r3, r2
 8007b62:	2b02      	cmp	r3, #2
 8007b64:	d124      	bne.n	8007bb0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	68db      	ldr	r3, [r3, #12]
 8007b6c:	2202      	movs	r2, #2
 8007b6e:	4013      	ands	r3, r2
 8007b70:	2b02      	cmp	r3, #2
 8007b72:	d11d      	bne.n	8007bb0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	2203      	movs	r2, #3
 8007b7a:	4252      	negs	r2, r2
 8007b7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2201      	movs	r2, #1
 8007b82:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	699b      	ldr	r3, [r3, #24]
 8007b8a:	2203      	movs	r2, #3
 8007b8c:	4013      	ands	r3, r2
 8007b8e:	d004      	beq.n	8007b9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	0018      	movs	r0, r3
 8007b94:	f000 fa88 	bl	80080a8 <HAL_TIM_IC_CaptureCallback>
 8007b98:	e007      	b.n	8007baa <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	0018      	movs	r0, r3
 8007b9e:	f7fc fae5 	bl	800416c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	0018      	movs	r0, r3
 8007ba6:	f000 fa87 	bl	80080b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	691b      	ldr	r3, [r3, #16]
 8007bb6:	2204      	movs	r2, #4
 8007bb8:	4013      	ands	r3, r2
 8007bba:	2b04      	cmp	r3, #4
 8007bbc:	d125      	bne.n	8007c0a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	2204      	movs	r2, #4
 8007bc6:	4013      	ands	r3, r2
 8007bc8:	2b04      	cmp	r3, #4
 8007bca:	d11e      	bne.n	8007c0a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2205      	movs	r2, #5
 8007bd2:	4252      	negs	r2, r2
 8007bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2202      	movs	r2, #2
 8007bda:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	699a      	ldr	r2, [r3, #24]
 8007be2:	23c0      	movs	r3, #192	; 0xc0
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	4013      	ands	r3, r2
 8007be8:	d004      	beq.n	8007bf4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	0018      	movs	r0, r3
 8007bee:	f000 fa5b 	bl	80080a8 <HAL_TIM_IC_CaptureCallback>
 8007bf2:	e007      	b.n	8007c04 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	0018      	movs	r0, r3
 8007bf8:	f7fc fab8 	bl	800416c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	0018      	movs	r0, r3
 8007c00:	f000 fa5a 	bl	80080b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	691b      	ldr	r3, [r3, #16]
 8007c10:	2208      	movs	r2, #8
 8007c12:	4013      	ands	r3, r2
 8007c14:	2b08      	cmp	r3, #8
 8007c16:	d124      	bne.n	8007c62 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	68db      	ldr	r3, [r3, #12]
 8007c1e:	2208      	movs	r2, #8
 8007c20:	4013      	ands	r3, r2
 8007c22:	2b08      	cmp	r3, #8
 8007c24:	d11d      	bne.n	8007c62 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	2209      	movs	r2, #9
 8007c2c:	4252      	negs	r2, r2
 8007c2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2204      	movs	r2, #4
 8007c34:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	69db      	ldr	r3, [r3, #28]
 8007c3c:	2203      	movs	r2, #3
 8007c3e:	4013      	ands	r3, r2
 8007c40:	d004      	beq.n	8007c4c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	0018      	movs	r0, r3
 8007c46:	f000 fa2f 	bl	80080a8 <HAL_TIM_IC_CaptureCallback>
 8007c4a:	e007      	b.n	8007c5c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	0018      	movs	r0, r3
 8007c50:	f7fc fa8c 	bl	800416c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	0018      	movs	r0, r3
 8007c58:	f000 fa2e 	bl	80080b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	691b      	ldr	r3, [r3, #16]
 8007c68:	2210      	movs	r2, #16
 8007c6a:	4013      	ands	r3, r2
 8007c6c:	2b10      	cmp	r3, #16
 8007c6e:	d125      	bne.n	8007cbc <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	68db      	ldr	r3, [r3, #12]
 8007c76:	2210      	movs	r2, #16
 8007c78:	4013      	ands	r3, r2
 8007c7a:	2b10      	cmp	r3, #16
 8007c7c:	d11e      	bne.n	8007cbc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	2211      	movs	r2, #17
 8007c84:	4252      	negs	r2, r2
 8007c86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2208      	movs	r2, #8
 8007c8c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	69da      	ldr	r2, [r3, #28]
 8007c94:	23c0      	movs	r3, #192	; 0xc0
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	4013      	ands	r3, r2
 8007c9a:	d004      	beq.n	8007ca6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	0018      	movs	r0, r3
 8007ca0:	f000 fa02 	bl	80080a8 <HAL_TIM_IC_CaptureCallback>
 8007ca4:	e007      	b.n	8007cb6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	0018      	movs	r0, r3
 8007caa:	f7fc fa5f 	bl	800416c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	0018      	movs	r0, r3
 8007cb2:	f000 fa01 	bl	80080b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	691b      	ldr	r3, [r3, #16]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	4013      	ands	r3, r2
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d10f      	bne.n	8007cea <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	4013      	ands	r3, r2
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d108      	bne.n	8007cea <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	2202      	movs	r2, #2
 8007cde:	4252      	negs	r2, r2
 8007ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	0018      	movs	r0, r3
 8007ce6:	f7fc f9bb 	bl	8004060 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	2240      	movs	r2, #64	; 0x40
 8007cf2:	4013      	ands	r3, r2
 8007cf4:	2b40      	cmp	r3, #64	; 0x40
 8007cf6:	d10f      	bne.n	8007d18 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	2240      	movs	r2, #64	; 0x40
 8007d00:	4013      	ands	r3, r2
 8007d02:	2b40      	cmp	r3, #64	; 0x40
 8007d04:	d108      	bne.n	8007d18 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	2241      	movs	r2, #65	; 0x41
 8007d0c:	4252      	negs	r2, r2
 8007d0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	0018      	movs	r0, r3
 8007d14:	f000 f9d8 	bl	80080c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d18:	46c0      	nop			; (mov r8, r8)
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	b002      	add	sp, #8
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b084      	sub	sp, #16
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2238      	movs	r2, #56	; 0x38
 8007d30:	5c9b      	ldrb	r3, [r3, r2]
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d101      	bne.n	8007d3a <HAL_TIM_OC_ConfigChannel+0x1a>
 8007d36:	2302      	movs	r3, #2
 8007d38:	e03c      	b.n	8007db4 <HAL_TIM_OC_ConfigChannel+0x94>
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2238      	movs	r2, #56	; 0x38
 8007d3e:	2101      	movs	r1, #1
 8007d40:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2239      	movs	r2, #57	; 0x39
 8007d46:	2102      	movs	r1, #2
 8007d48:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2b04      	cmp	r3, #4
 8007d4e:	d010      	beq.n	8007d72 <HAL_TIM_OC_ConfigChannel+0x52>
 8007d50:	d802      	bhi.n	8007d58 <HAL_TIM_OC_ConfigChannel+0x38>
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d005      	beq.n	8007d62 <HAL_TIM_OC_ConfigChannel+0x42>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      break;
    }

    default:
      break;
 8007d56:	e024      	b.n	8007da2 <HAL_TIM_OC_ConfigChannel+0x82>
  switch (Channel)
 8007d58:	2b08      	cmp	r3, #8
 8007d5a:	d012      	beq.n	8007d82 <HAL_TIM_OC_ConfigChannel+0x62>
 8007d5c:	2b0c      	cmp	r3, #12
 8007d5e:	d018      	beq.n	8007d92 <HAL_TIM_OC_ConfigChannel+0x72>
      break;
 8007d60:	e01f      	b.n	8007da2 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	68ba      	ldr	r2, [r7, #8]
 8007d68:	0011      	movs	r1, r2
 8007d6a:	0018      	movs	r0, r3
 8007d6c:	f000 fa12 	bl	8008194 <TIM_OC1_SetConfig>
      break;
 8007d70:	e017      	b.n	8007da2 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	68ba      	ldr	r2, [r7, #8]
 8007d78:	0011      	movs	r1, r2
 8007d7a:	0018      	movs	r0, r3
 8007d7c:	f000 fa46 	bl	800820c <TIM_OC2_SetConfig>
      break;
 8007d80:	e00f      	b.n	8007da2 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	68ba      	ldr	r2, [r7, #8]
 8007d88:	0011      	movs	r1, r2
 8007d8a:	0018      	movs	r0, r3
 8007d8c:	f000 fa80 	bl	8008290 <TIM_OC3_SetConfig>
      break;
 8007d90:	e007      	b.n	8007da2 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	68ba      	ldr	r2, [r7, #8]
 8007d98:	0011      	movs	r1, r2
 8007d9a:	0018      	movs	r0, r3
 8007d9c:	f000 fab8 	bl	8008310 <TIM_OC4_SetConfig>
      break;
 8007da0:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2239      	movs	r2, #57	; 0x39
 8007da6:	2101      	movs	r1, #1
 8007da8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2238      	movs	r2, #56	; 0x38
 8007dae:	2100      	movs	r1, #0
 8007db0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007db2:	2300      	movs	r3, #0
}
 8007db4:	0018      	movs	r0, r3
 8007db6:	46bd      	mov	sp, r7
 8007db8:	b004      	add	sp, #16
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	60f8      	str	r0, [r7, #12]
 8007dc4:	60b9      	str	r1, [r7, #8]
 8007dc6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2238      	movs	r2, #56	; 0x38
 8007dcc:	5c9b      	ldrb	r3, [r3, r2]
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d101      	bne.n	8007dd6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007dd2:	2302      	movs	r3, #2
 8007dd4:	e0a4      	b.n	8007f20 <HAL_TIM_PWM_ConfigChannel+0x164>
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2238      	movs	r2, #56	; 0x38
 8007dda:	2101      	movs	r1, #1
 8007ddc:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2239      	movs	r2, #57	; 0x39
 8007de2:	2102      	movs	r1, #2
 8007de4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2b04      	cmp	r3, #4
 8007dea:	d029      	beq.n	8007e40 <HAL_TIM_PWM_ConfigChannel+0x84>
 8007dec:	d802      	bhi.n	8007df4 <HAL_TIM_PWM_ConfigChannel+0x38>
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d005      	beq.n	8007dfe <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8007df2:	e08c      	b.n	8007f0e <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8007df4:	2b08      	cmp	r3, #8
 8007df6:	d046      	beq.n	8007e86 <HAL_TIM_PWM_ConfigChannel+0xca>
 8007df8:	2b0c      	cmp	r3, #12
 8007dfa:	d065      	beq.n	8007ec8 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 8007dfc:	e087      	b.n	8007f0e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	68ba      	ldr	r2, [r7, #8]
 8007e04:	0011      	movs	r1, r2
 8007e06:	0018      	movs	r0, r3
 8007e08:	f000 f9c4 	bl	8008194 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	699a      	ldr	r2, [r3, #24]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	2108      	movs	r1, #8
 8007e18:	430a      	orrs	r2, r1
 8007e1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	699a      	ldr	r2, [r3, #24]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2104      	movs	r1, #4
 8007e28:	438a      	bics	r2, r1
 8007e2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	6999      	ldr	r1, [r3, #24]
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	68da      	ldr	r2, [r3, #12]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	430a      	orrs	r2, r1
 8007e3c:	619a      	str	r2, [r3, #24]
      break;
 8007e3e:	e066      	b.n	8007f0e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	68ba      	ldr	r2, [r7, #8]
 8007e46:	0011      	movs	r1, r2
 8007e48:	0018      	movs	r0, r3
 8007e4a:	f000 f9df 	bl	800820c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	699a      	ldr	r2, [r3, #24]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	2180      	movs	r1, #128	; 0x80
 8007e5a:	0109      	lsls	r1, r1, #4
 8007e5c:	430a      	orrs	r2, r1
 8007e5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	699a      	ldr	r2, [r3, #24]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	492f      	ldr	r1, [pc, #188]	; (8007f28 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8007e6c:	400a      	ands	r2, r1
 8007e6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	6999      	ldr	r1, [r3, #24]
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	021a      	lsls	r2, r3, #8
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	430a      	orrs	r2, r1
 8007e82:	619a      	str	r2, [r3, #24]
      break;
 8007e84:	e043      	b.n	8007f0e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	68ba      	ldr	r2, [r7, #8]
 8007e8c:	0011      	movs	r1, r2
 8007e8e:	0018      	movs	r0, r3
 8007e90:	f000 f9fe 	bl	8008290 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	69da      	ldr	r2, [r3, #28]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	2108      	movs	r1, #8
 8007ea0:	430a      	orrs	r2, r1
 8007ea2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	69da      	ldr	r2, [r3, #28]
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	2104      	movs	r1, #4
 8007eb0:	438a      	bics	r2, r1
 8007eb2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	69d9      	ldr	r1, [r3, #28]
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	68da      	ldr	r2, [r3, #12]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	430a      	orrs	r2, r1
 8007ec4:	61da      	str	r2, [r3, #28]
      break;
 8007ec6:	e022      	b.n	8007f0e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	68ba      	ldr	r2, [r7, #8]
 8007ece:	0011      	movs	r1, r2
 8007ed0:	0018      	movs	r0, r3
 8007ed2:	f000 fa1d 	bl	8008310 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	69da      	ldr	r2, [r3, #28]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	2180      	movs	r1, #128	; 0x80
 8007ee2:	0109      	lsls	r1, r1, #4
 8007ee4:	430a      	orrs	r2, r1
 8007ee6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	69da      	ldr	r2, [r3, #28]
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	490d      	ldr	r1, [pc, #52]	; (8007f28 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8007ef4:	400a      	ands	r2, r1
 8007ef6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	69d9      	ldr	r1, [r3, #28]
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	68db      	ldr	r3, [r3, #12]
 8007f02:	021a      	lsls	r2, r3, #8
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	430a      	orrs	r2, r1
 8007f0a:	61da      	str	r2, [r3, #28]
      break;
 8007f0c:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2239      	movs	r2, #57	; 0x39
 8007f12:	2101      	movs	r1, #1
 8007f14:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2238      	movs	r2, #56	; 0x38
 8007f1a:	2100      	movs	r1, #0
 8007f1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007f1e:	2300      	movs	r3, #0
}
 8007f20:	0018      	movs	r0, r3
 8007f22:	46bd      	mov	sp, r7
 8007f24:	b004      	add	sp, #16
 8007f26:	bd80      	pop	{r7, pc}
 8007f28:	fffffbff 	.word	0xfffffbff

08007f2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2238      	movs	r2, #56	; 0x38
 8007f3a:	5c9b      	ldrb	r3, [r3, r2]
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d101      	bne.n	8007f44 <HAL_TIM_ConfigClockSource+0x18>
 8007f40:	2302      	movs	r3, #2
 8007f42:	e0ab      	b.n	800809c <HAL_TIM_ConfigClockSource+0x170>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2238      	movs	r2, #56	; 0x38
 8007f48:	2101      	movs	r1, #1
 8007f4a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2239      	movs	r2, #57	; 0x39
 8007f50:	2102      	movs	r1, #2
 8007f52:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2277      	movs	r2, #119	; 0x77
 8007f60:	4393      	bics	r3, r2
 8007f62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	4a4f      	ldr	r2, [pc, #316]	; (80080a4 <HAL_TIM_ConfigClockSource+0x178>)
 8007f68:	4013      	ands	r3, r2
 8007f6a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	68fa      	ldr	r2, [r7, #12]
 8007f72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2b40      	cmp	r3, #64	; 0x40
 8007f7a:	d100      	bne.n	8007f7e <HAL_TIM_ConfigClockSource+0x52>
 8007f7c:	e06b      	b.n	8008056 <HAL_TIM_ConfigClockSource+0x12a>
 8007f7e:	d80e      	bhi.n	8007f9e <HAL_TIM_ConfigClockSource+0x72>
 8007f80:	2b10      	cmp	r3, #16
 8007f82:	d100      	bne.n	8007f86 <HAL_TIM_ConfigClockSource+0x5a>
 8007f84:	e077      	b.n	8008076 <HAL_TIM_ConfigClockSource+0x14a>
 8007f86:	d803      	bhi.n	8007f90 <HAL_TIM_ConfigClockSource+0x64>
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d100      	bne.n	8007f8e <HAL_TIM_ConfigClockSource+0x62>
 8007f8c:	e073      	b.n	8008076 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007f8e:	e07c      	b.n	800808a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8007f90:	2b20      	cmp	r3, #32
 8007f92:	d100      	bne.n	8007f96 <HAL_TIM_ConfigClockSource+0x6a>
 8007f94:	e06f      	b.n	8008076 <HAL_TIM_ConfigClockSource+0x14a>
 8007f96:	2b30      	cmp	r3, #48	; 0x30
 8007f98:	d100      	bne.n	8007f9c <HAL_TIM_ConfigClockSource+0x70>
 8007f9a:	e06c      	b.n	8008076 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8007f9c:	e075      	b.n	800808a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8007f9e:	2b70      	cmp	r3, #112	; 0x70
 8007fa0:	d00e      	beq.n	8007fc0 <HAL_TIM_ConfigClockSource+0x94>
 8007fa2:	d804      	bhi.n	8007fae <HAL_TIM_ConfigClockSource+0x82>
 8007fa4:	2b50      	cmp	r3, #80	; 0x50
 8007fa6:	d036      	beq.n	8008016 <HAL_TIM_ConfigClockSource+0xea>
 8007fa8:	2b60      	cmp	r3, #96	; 0x60
 8007faa:	d044      	beq.n	8008036 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8007fac:	e06d      	b.n	800808a <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8007fae:	2280      	movs	r2, #128	; 0x80
 8007fb0:	0152      	lsls	r2, r2, #5
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d068      	beq.n	8008088 <HAL_TIM_ConfigClockSource+0x15c>
 8007fb6:	2280      	movs	r2, #128	; 0x80
 8007fb8:	0192      	lsls	r2, r2, #6
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d017      	beq.n	8007fee <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8007fbe:	e064      	b.n	800808a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6818      	ldr	r0, [r3, #0]
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	6899      	ldr	r1, [r3, #8]
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	685a      	ldr	r2, [r3, #4]
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	68db      	ldr	r3, [r3, #12]
 8007fd0:	f000 fa5e 	bl	8008490 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2277      	movs	r2, #119	; 0x77
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	68fa      	ldr	r2, [r7, #12]
 8007fea:	609a      	str	r2, [r3, #8]
      break;
 8007fec:	e04d      	b.n	800808a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6818      	ldr	r0, [r3, #0]
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	6899      	ldr	r1, [r3, #8]
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	685a      	ldr	r2, [r3, #4]
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	f000 fa47 	bl	8008490 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	689a      	ldr	r2, [r3, #8]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	2180      	movs	r1, #128	; 0x80
 800800e:	01c9      	lsls	r1, r1, #7
 8008010:	430a      	orrs	r2, r1
 8008012:	609a      	str	r2, [r3, #8]
      break;
 8008014:	e039      	b.n	800808a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6818      	ldr	r0, [r3, #0]
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	6859      	ldr	r1, [r3, #4]
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	68db      	ldr	r3, [r3, #12]
 8008022:	001a      	movs	r2, r3
 8008024:	f000 f9ba 	bl	800839c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	2150      	movs	r1, #80	; 0x50
 800802e:	0018      	movs	r0, r3
 8008030:	f000 fa14 	bl	800845c <TIM_ITRx_SetConfig>
      break;
 8008034:	e029      	b.n	800808a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6818      	ldr	r0, [r3, #0]
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	6859      	ldr	r1, [r3, #4]
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	68db      	ldr	r3, [r3, #12]
 8008042:	001a      	movs	r2, r3
 8008044:	f000 f9d8 	bl	80083f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	2160      	movs	r1, #96	; 0x60
 800804e:	0018      	movs	r0, r3
 8008050:	f000 fa04 	bl	800845c <TIM_ITRx_SetConfig>
      break;
 8008054:	e019      	b.n	800808a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6818      	ldr	r0, [r3, #0]
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	6859      	ldr	r1, [r3, #4]
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	68db      	ldr	r3, [r3, #12]
 8008062:	001a      	movs	r2, r3
 8008064:	f000 f99a 	bl	800839c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	2140      	movs	r1, #64	; 0x40
 800806e:	0018      	movs	r0, r3
 8008070:	f000 f9f4 	bl	800845c <TIM_ITRx_SetConfig>
      break;
 8008074:	e009      	b.n	800808a <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	0019      	movs	r1, r3
 8008080:	0010      	movs	r0, r2
 8008082:	f000 f9eb 	bl	800845c <TIM_ITRx_SetConfig>
      break;
 8008086:	e000      	b.n	800808a <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8008088:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2239      	movs	r2, #57	; 0x39
 800808e:	2101      	movs	r1, #1
 8008090:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2238      	movs	r2, #56	; 0x38
 8008096:	2100      	movs	r1, #0
 8008098:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800809a:	2300      	movs	r3, #0
}
 800809c:	0018      	movs	r0, r3
 800809e:	46bd      	mov	sp, r7
 80080a0:	b004      	add	sp, #16
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	ffff00ff 	.word	0xffff00ff

080080a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b082      	sub	sp, #8
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80080b0:	46c0      	nop			; (mov r8, r8)
 80080b2:	46bd      	mov	sp, r7
 80080b4:	b002      	add	sp, #8
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80080c0:	46c0      	nop			; (mov r8, r8)
 80080c2:	46bd      	mov	sp, r7
 80080c4:	b002      	add	sp, #8
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80080d0:	46c0      	nop			; (mov r8, r8)
 80080d2:	46bd      	mov	sp, r7
 80080d4:	b002      	add	sp, #8
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	2380      	movs	r3, #128	; 0x80
 80080ec:	05db      	lsls	r3, r3, #23
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d00b      	beq.n	800810a <TIM_Base_SetConfig+0x32>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	4a23      	ldr	r2, [pc, #140]	; (8008184 <TIM_Base_SetConfig+0xac>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d007      	beq.n	800810a <TIM_Base_SetConfig+0x32>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	4a22      	ldr	r2, [pc, #136]	; (8008188 <TIM_Base_SetConfig+0xb0>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d003      	beq.n	800810a <TIM_Base_SetConfig+0x32>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	4a21      	ldr	r2, [pc, #132]	; (800818c <TIM_Base_SetConfig+0xb4>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d108      	bne.n	800811c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2270      	movs	r2, #112	; 0x70
 800810e:	4393      	bics	r3, r2
 8008110:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	68fa      	ldr	r2, [r7, #12]
 8008118:	4313      	orrs	r3, r2
 800811a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	2380      	movs	r3, #128	; 0x80
 8008120:	05db      	lsls	r3, r3, #23
 8008122:	429a      	cmp	r2, r3
 8008124:	d00b      	beq.n	800813e <TIM_Base_SetConfig+0x66>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	4a16      	ldr	r2, [pc, #88]	; (8008184 <TIM_Base_SetConfig+0xac>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d007      	beq.n	800813e <TIM_Base_SetConfig+0x66>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	4a15      	ldr	r2, [pc, #84]	; (8008188 <TIM_Base_SetConfig+0xb0>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d003      	beq.n	800813e <TIM_Base_SetConfig+0x66>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	4a14      	ldr	r2, [pc, #80]	; (800818c <TIM_Base_SetConfig+0xb4>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d108      	bne.n	8008150 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	4a13      	ldr	r2, [pc, #76]	; (8008190 <TIM_Base_SetConfig+0xb8>)
 8008142:	4013      	ands	r3, r2
 8008144:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	68db      	ldr	r3, [r3, #12]
 800814a:	68fa      	ldr	r2, [r7, #12]
 800814c:	4313      	orrs	r3, r2
 800814e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2280      	movs	r2, #128	; 0x80
 8008154:	4393      	bics	r3, r2
 8008156:	001a      	movs	r2, r3
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	691b      	ldr	r3, [r3, #16]
 800815c:	4313      	orrs	r3, r2
 800815e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	68fa      	ldr	r2, [r7, #12]
 8008164:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	689a      	ldr	r2, [r3, #8]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2201      	movs	r2, #1
 800817a:	615a      	str	r2, [r3, #20]
}
 800817c:	46c0      	nop			; (mov r8, r8)
 800817e:	46bd      	mov	sp, r7
 8008180:	b004      	add	sp, #16
 8008182:	bd80      	pop	{r7, pc}
 8008184:	40000400 	.word	0x40000400
 8008188:	40010800 	.word	0x40010800
 800818c:	40011400 	.word	0x40011400
 8008190:	fffffcff 	.word	0xfffffcff

08008194 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b086      	sub	sp, #24
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6a1b      	ldr	r3, [r3, #32]
 80081a2:	2201      	movs	r2, #1
 80081a4:	4393      	bics	r3, r2
 80081a6:	001a      	movs	r2, r3
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6a1b      	ldr	r3, [r3, #32]
 80081b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	699b      	ldr	r3, [r3, #24]
 80081bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2270      	movs	r2, #112	; 0x70
 80081c2:	4393      	bics	r3, r2
 80081c4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2203      	movs	r2, #3
 80081ca:	4393      	bics	r3, r2
 80081cc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	68fa      	ldr	r2, [r7, #12]
 80081d4:	4313      	orrs	r3, r2
 80081d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	2202      	movs	r2, #2
 80081dc:	4393      	bics	r3, r2
 80081de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	697a      	ldr	r2, [r7, #20]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	693a      	ldr	r2, [r7, #16]
 80081ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	68fa      	ldr	r2, [r7, #12]
 80081f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	685a      	ldr	r2, [r3, #4]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	697a      	ldr	r2, [r7, #20]
 8008202:	621a      	str	r2, [r3, #32]
}
 8008204:	46c0      	nop			; (mov r8, r8)
 8008206:	46bd      	mov	sp, r7
 8008208:	b006      	add	sp, #24
 800820a:	bd80      	pop	{r7, pc}

0800820c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b086      	sub	sp, #24
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6a1b      	ldr	r3, [r3, #32]
 800821a:	2210      	movs	r2, #16
 800821c:	4393      	bics	r3, r2
 800821e:	001a      	movs	r2, r3
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6a1b      	ldr	r3, [r3, #32]
 8008228:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	699b      	ldr	r3, [r3, #24]
 8008234:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	4a13      	ldr	r2, [pc, #76]	; (8008288 <TIM_OC2_SetConfig+0x7c>)
 800823a:	4013      	ands	r3, r2
 800823c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	4a12      	ldr	r2, [pc, #72]	; (800828c <TIM_OC2_SetConfig+0x80>)
 8008242:	4013      	ands	r3, r2
 8008244:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	021b      	lsls	r3, r3, #8
 800824c:	68fa      	ldr	r2, [r7, #12]
 800824e:	4313      	orrs	r3, r2
 8008250:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	2220      	movs	r2, #32
 8008256:	4393      	bics	r3, r2
 8008258:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	011b      	lsls	r3, r3, #4
 8008260:	697a      	ldr	r2, [r7, #20]
 8008262:	4313      	orrs	r3, r2
 8008264:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	693a      	ldr	r2, [r7, #16]
 800826a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	68fa      	ldr	r2, [r7, #12]
 8008270:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	685a      	ldr	r2, [r3, #4]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	697a      	ldr	r2, [r7, #20]
 800827e:	621a      	str	r2, [r3, #32]
}
 8008280:	46c0      	nop			; (mov r8, r8)
 8008282:	46bd      	mov	sp, r7
 8008284:	b006      	add	sp, #24
 8008286:	bd80      	pop	{r7, pc}
 8008288:	ffff8fff 	.word	0xffff8fff
 800828c:	fffffcff 	.word	0xfffffcff

08008290 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b086      	sub	sp, #24
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6a1b      	ldr	r3, [r3, #32]
 800829e:	4a1a      	ldr	r2, [pc, #104]	; (8008308 <TIM_OC3_SetConfig+0x78>)
 80082a0:	401a      	ands	r2, r3
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6a1b      	ldr	r3, [r3, #32]
 80082aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	69db      	ldr	r3, [r3, #28]
 80082b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2270      	movs	r2, #112	; 0x70
 80082bc:	4393      	bics	r3, r2
 80082be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2203      	movs	r2, #3
 80082c4:	4393      	bics	r3, r2
 80082c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	68fa      	ldr	r2, [r7, #12]
 80082ce:	4313      	orrs	r3, r2
 80082d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	4a0d      	ldr	r2, [pc, #52]	; (800830c <TIM_OC3_SetConfig+0x7c>)
 80082d6:	4013      	ands	r3, r2
 80082d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	021b      	lsls	r3, r3, #8
 80082e0:	697a      	ldr	r2, [r7, #20]
 80082e2:	4313      	orrs	r3, r2
 80082e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	693a      	ldr	r2, [r7, #16]
 80082ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	68fa      	ldr	r2, [r7, #12]
 80082f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	685a      	ldr	r2, [r3, #4]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	697a      	ldr	r2, [r7, #20]
 80082fe:	621a      	str	r2, [r3, #32]
}
 8008300:	46c0      	nop			; (mov r8, r8)
 8008302:	46bd      	mov	sp, r7
 8008304:	b006      	add	sp, #24
 8008306:	bd80      	pop	{r7, pc}
 8008308:	fffffeff 	.word	0xfffffeff
 800830c:	fffffdff 	.word	0xfffffdff

08008310 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b086      	sub	sp, #24
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6a1b      	ldr	r3, [r3, #32]
 800831e:	4a1b      	ldr	r2, [pc, #108]	; (800838c <TIM_OC4_SetConfig+0x7c>)
 8008320:	401a      	ands	r2, r3
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6a1b      	ldr	r3, [r3, #32]
 800832a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	69db      	ldr	r3, [r3, #28]
 8008336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	4a15      	ldr	r2, [pc, #84]	; (8008390 <TIM_OC4_SetConfig+0x80>)
 800833c:	4013      	ands	r3, r2
 800833e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	4a14      	ldr	r2, [pc, #80]	; (8008394 <TIM_OC4_SetConfig+0x84>)
 8008344:	4013      	ands	r3, r2
 8008346:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	021b      	lsls	r3, r3, #8
 800834e:	68fa      	ldr	r2, [r7, #12]
 8008350:	4313      	orrs	r3, r2
 8008352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	4a10      	ldr	r2, [pc, #64]	; (8008398 <TIM_OC4_SetConfig+0x88>)
 8008358:	4013      	ands	r3, r2
 800835a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	689b      	ldr	r3, [r3, #8]
 8008360:	031b      	lsls	r3, r3, #12
 8008362:	697a      	ldr	r2, [r7, #20]
 8008364:	4313      	orrs	r3, r2
 8008366:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	693a      	ldr	r2, [r7, #16]
 800836c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	68fa      	ldr	r2, [r7, #12]
 8008372:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	685a      	ldr	r2, [r3, #4]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	697a      	ldr	r2, [r7, #20]
 8008380:	621a      	str	r2, [r3, #32]
}
 8008382:	46c0      	nop			; (mov r8, r8)
 8008384:	46bd      	mov	sp, r7
 8008386:	b006      	add	sp, #24
 8008388:	bd80      	pop	{r7, pc}
 800838a:	46c0      	nop			; (mov r8, r8)
 800838c:	ffffefff 	.word	0xffffefff
 8008390:	ffff8fff 	.word	0xffff8fff
 8008394:	fffffcff 	.word	0xfffffcff
 8008398:	ffffdfff 	.word	0xffffdfff

0800839c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b086      	sub	sp, #24
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	60f8      	str	r0, [r7, #12]
 80083a4:	60b9      	str	r1, [r7, #8]
 80083a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	6a1b      	ldr	r3, [r3, #32]
 80083ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	6a1b      	ldr	r3, [r3, #32]
 80083b2:	2201      	movs	r2, #1
 80083b4:	4393      	bics	r3, r2
 80083b6:	001a      	movs	r2, r3
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	699b      	ldr	r3, [r3, #24]
 80083c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	22f0      	movs	r2, #240	; 0xf0
 80083c6:	4393      	bics	r3, r2
 80083c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	011b      	lsls	r3, r3, #4
 80083ce:	693a      	ldr	r2, [r7, #16]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	220a      	movs	r2, #10
 80083d8:	4393      	bics	r3, r2
 80083da:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80083dc:	697a      	ldr	r2, [r7, #20]
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	4313      	orrs	r3, r2
 80083e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	693a      	ldr	r2, [r7, #16]
 80083e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	697a      	ldr	r2, [r7, #20]
 80083ee:	621a      	str	r2, [r3, #32]
}
 80083f0:	46c0      	nop			; (mov r8, r8)
 80083f2:	46bd      	mov	sp, r7
 80083f4:	b006      	add	sp, #24
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b086      	sub	sp, #24
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	60b9      	str	r1, [r7, #8]
 8008402:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	6a1b      	ldr	r3, [r3, #32]
 8008408:	2210      	movs	r2, #16
 800840a:	4393      	bics	r3, r2
 800840c:	001a      	movs	r2, r3
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	699b      	ldr	r3, [r3, #24]
 8008416:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6a1b      	ldr	r3, [r3, #32]
 800841c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	4a0d      	ldr	r2, [pc, #52]	; (8008458 <TIM_TI2_ConfigInputStage+0x60>)
 8008422:	4013      	ands	r3, r2
 8008424:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	031b      	lsls	r3, r3, #12
 800842a:	697a      	ldr	r2, [r7, #20]
 800842c:	4313      	orrs	r3, r2
 800842e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	22a0      	movs	r2, #160	; 0xa0
 8008434:	4393      	bics	r3, r2
 8008436:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	011b      	lsls	r3, r3, #4
 800843c:	693a      	ldr	r2, [r7, #16]
 800843e:	4313      	orrs	r3, r2
 8008440:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	697a      	ldr	r2, [r7, #20]
 8008446:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	693a      	ldr	r2, [r7, #16]
 800844c:	621a      	str	r2, [r3, #32]
}
 800844e:	46c0      	nop			; (mov r8, r8)
 8008450:	46bd      	mov	sp, r7
 8008452:	b006      	add	sp, #24
 8008454:	bd80      	pop	{r7, pc}
 8008456:	46c0      	nop			; (mov r8, r8)
 8008458:	ffff0fff 	.word	0xffff0fff

0800845c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b084      	sub	sp, #16
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2270      	movs	r2, #112	; 0x70
 8008470:	4393      	bics	r3, r2
 8008472:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008474:	683a      	ldr	r2, [r7, #0]
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	4313      	orrs	r3, r2
 800847a:	2207      	movs	r2, #7
 800847c:	4313      	orrs	r3, r2
 800847e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	68fa      	ldr	r2, [r7, #12]
 8008484:	609a      	str	r2, [r3, #8]
}
 8008486:	46c0      	nop			; (mov r8, r8)
 8008488:	46bd      	mov	sp, r7
 800848a:	b004      	add	sp, #16
 800848c:	bd80      	pop	{r7, pc}
	...

08008490 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b086      	sub	sp, #24
 8008494:	af00      	add	r7, sp, #0
 8008496:	60f8      	str	r0, [r7, #12]
 8008498:	60b9      	str	r1, [r7, #8]
 800849a:	607a      	str	r2, [r7, #4]
 800849c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	4a09      	ldr	r2, [pc, #36]	; (80084cc <TIM_ETR_SetConfig+0x3c>)
 80084a8:	4013      	ands	r3, r2
 80084aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	021a      	lsls	r2, r3, #8
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	431a      	orrs	r2, r3
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	4313      	orrs	r3, r2
 80084b8:	697a      	ldr	r2, [r7, #20]
 80084ba:	4313      	orrs	r3, r2
 80084bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	697a      	ldr	r2, [r7, #20]
 80084c2:	609a      	str	r2, [r3, #8]
}
 80084c4:	46c0      	nop			; (mov r8, r8)
 80084c6:	46bd      	mov	sp, r7
 80084c8:	b006      	add	sp, #24
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	ffff00ff 	.word	0xffff00ff

080084d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b086      	sub	sp, #24
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	60f8      	str	r0, [r7, #12]
 80084d8:	60b9      	str	r1, [r7, #8]
 80084da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	221f      	movs	r2, #31
 80084e0:	4013      	ands	r3, r2
 80084e2:	2201      	movs	r2, #1
 80084e4:	409a      	lsls	r2, r3
 80084e6:	0013      	movs	r3, r2
 80084e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	6a1b      	ldr	r3, [r3, #32]
 80084ee:	697a      	ldr	r2, [r7, #20]
 80084f0:	43d2      	mvns	r2, r2
 80084f2:	401a      	ands	r2, r3
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	6a1a      	ldr	r2, [r3, #32]
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	211f      	movs	r1, #31
 8008500:	400b      	ands	r3, r1
 8008502:	6879      	ldr	r1, [r7, #4]
 8008504:	4099      	lsls	r1, r3
 8008506:	000b      	movs	r3, r1
 8008508:	431a      	orrs	r2, r3
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	621a      	str	r2, [r3, #32]
}
 800850e:	46c0      	nop			; (mov r8, r8)
 8008510:	46bd      	mov	sp, r7
 8008512:	b006      	add	sp, #24
 8008514:	bd80      	pop	{r7, pc}

08008516 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008516:	b580      	push	{r7, lr}
 8008518:	b084      	sub	sp, #16
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
 800851e:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2238      	movs	r2, #56	; 0x38
 8008524:	5c9b      	ldrb	r3, [r3, r2]
 8008526:	2b01      	cmp	r3, #1
 8008528:	d101      	bne.n	800852e <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800852a:	2302      	movs	r3, #2
 800852c:	e032      	b.n	8008594 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2238      	movs	r2, #56	; 0x38
 8008532:	2101      	movs	r1, #1
 8008534:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2239      	movs	r2, #57	; 0x39
 800853a:	2102      	movs	r1, #2
 800853c:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	689b      	ldr	r3, [r3, #8]
 800854c:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2270      	movs	r2, #112	; 0x70
 8008552:	4393      	bics	r3, r2
 8008554:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	68fa      	ldr	r2, [r7, #12]
 800855c:	4313      	orrs	r3, r2
 800855e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	2280      	movs	r2, #128	; 0x80
 8008564:	4393      	bics	r3, r2
 8008566:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	68ba      	ldr	r2, [r7, #8]
 800856e:	4313      	orrs	r3, r2
 8008570:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	68ba      	ldr	r2, [r7, #8]
 8008580:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2239      	movs	r2, #57	; 0x39
 8008586:	2101      	movs	r1, #1
 8008588:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2238      	movs	r2, #56	; 0x38
 800858e:	2100      	movs	r1, #0
 8008590:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008592:	2300      	movs	r3, #0
}
 8008594:	0018      	movs	r0, r3
 8008596:	46bd      	mov	sp, r7
 8008598:	b004      	add	sp, #16
 800859a:	bd80      	pop	{r7, pc}

0800859c <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b082      	sub	sp, #8
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2238      	movs	r2, #56	; 0x38
 80085aa:	5c9b      	ldrb	r3, [r3, r2]
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d101      	bne.n	80085b4 <HAL_TIMEx_RemapConfig+0x18>
 80085b0:	2302      	movs	r3, #2
 80085b2:	e00c      	b.n	80085ce <HAL_TIMEx_RemapConfig+0x32>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2238      	movs	r2, #56	; 0x38
 80085b8:	2101      	movs	r1, #1
 80085ba:	5499      	strb	r1, [r3, r2]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	683a      	ldr	r2, [r7, #0]
 80085c2:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2238      	movs	r2, #56	; 0x38
 80085c8:	2100      	movs	r1, #0
 80085ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80085cc:	2300      	movs	r3, #0
}
 80085ce:	0018      	movs	r0, r3
 80085d0:	46bd      	mov	sp, r7
 80085d2:	b002      	add	sp, #8
 80085d4:	bd80      	pop	{r7, pc}
	...

080085d8 <calloc>:
 80085d8:	b510      	push	{r4, lr}
 80085da:	4b03      	ldr	r3, [pc, #12]	; (80085e8 <calloc+0x10>)
 80085dc:	000a      	movs	r2, r1
 80085de:	0001      	movs	r1, r0
 80085e0:	6818      	ldr	r0, [r3, #0]
 80085e2:	f000 f83e 	bl	8008662 <_calloc_r>
 80085e6:	bd10      	pop	{r4, pc}
 80085e8:	20000068 	.word	0x20000068

080085ec <__errno>:
 80085ec:	4b01      	ldr	r3, [pc, #4]	; (80085f4 <__errno+0x8>)
 80085ee:	6818      	ldr	r0, [r3, #0]
 80085f0:	4770      	bx	lr
 80085f2:	46c0      	nop			; (mov r8, r8)
 80085f4:	20000068 	.word	0x20000068

080085f8 <__libc_init_array>:
 80085f8:	b570      	push	{r4, r5, r6, lr}
 80085fa:	2600      	movs	r6, #0
 80085fc:	4d0c      	ldr	r5, [pc, #48]	; (8008630 <__libc_init_array+0x38>)
 80085fe:	4c0d      	ldr	r4, [pc, #52]	; (8008634 <__libc_init_array+0x3c>)
 8008600:	1b64      	subs	r4, r4, r5
 8008602:	10a4      	asrs	r4, r4, #2
 8008604:	42a6      	cmp	r6, r4
 8008606:	d109      	bne.n	800861c <__libc_init_array+0x24>
 8008608:	2600      	movs	r6, #0
 800860a:	f000 fc37 	bl	8008e7c <_init>
 800860e:	4d0a      	ldr	r5, [pc, #40]	; (8008638 <__libc_init_array+0x40>)
 8008610:	4c0a      	ldr	r4, [pc, #40]	; (800863c <__libc_init_array+0x44>)
 8008612:	1b64      	subs	r4, r4, r5
 8008614:	10a4      	asrs	r4, r4, #2
 8008616:	42a6      	cmp	r6, r4
 8008618:	d105      	bne.n	8008626 <__libc_init_array+0x2e>
 800861a:	bd70      	pop	{r4, r5, r6, pc}
 800861c:	00b3      	lsls	r3, r6, #2
 800861e:	58eb      	ldr	r3, [r5, r3]
 8008620:	4798      	blx	r3
 8008622:	3601      	adds	r6, #1
 8008624:	e7ee      	b.n	8008604 <__libc_init_array+0xc>
 8008626:	00b3      	lsls	r3, r6, #2
 8008628:	58eb      	ldr	r3, [r5, r3]
 800862a:	4798      	blx	r3
 800862c:	3601      	adds	r6, #1
 800862e:	e7f2      	b.n	8008616 <__libc_init_array+0x1e>
 8008630:	08009698 	.word	0x08009698
 8008634:	08009698 	.word	0x08009698
 8008638:	08009698 	.word	0x08009698
 800863c:	0800969c 	.word	0x0800969c

08008640 <memcpy>:
 8008640:	2300      	movs	r3, #0
 8008642:	b510      	push	{r4, lr}
 8008644:	429a      	cmp	r2, r3
 8008646:	d100      	bne.n	800864a <memcpy+0xa>
 8008648:	bd10      	pop	{r4, pc}
 800864a:	5ccc      	ldrb	r4, [r1, r3]
 800864c:	54c4      	strb	r4, [r0, r3]
 800864e:	3301      	adds	r3, #1
 8008650:	e7f8      	b.n	8008644 <memcpy+0x4>

08008652 <memset>:
 8008652:	0003      	movs	r3, r0
 8008654:	1812      	adds	r2, r2, r0
 8008656:	4293      	cmp	r3, r2
 8008658:	d100      	bne.n	800865c <memset+0xa>
 800865a:	4770      	bx	lr
 800865c:	7019      	strb	r1, [r3, #0]
 800865e:	3301      	adds	r3, #1
 8008660:	e7f9      	b.n	8008656 <memset+0x4>

08008662 <_calloc_r>:
 8008662:	434a      	muls	r2, r1
 8008664:	b570      	push	{r4, r5, r6, lr}
 8008666:	0011      	movs	r1, r2
 8008668:	0014      	movs	r4, r2
 800866a:	f000 f809 	bl	8008680 <_malloc_r>
 800866e:	1e05      	subs	r5, r0, #0
 8008670:	d003      	beq.n	800867a <_calloc_r+0x18>
 8008672:	0022      	movs	r2, r4
 8008674:	2100      	movs	r1, #0
 8008676:	f7ff ffec 	bl	8008652 <memset>
 800867a:	0028      	movs	r0, r5
 800867c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008680 <_malloc_r>:
 8008680:	2303      	movs	r3, #3
 8008682:	b570      	push	{r4, r5, r6, lr}
 8008684:	1ccd      	adds	r5, r1, #3
 8008686:	439d      	bics	r5, r3
 8008688:	3508      	adds	r5, #8
 800868a:	0006      	movs	r6, r0
 800868c:	2d0c      	cmp	r5, #12
 800868e:	d21e      	bcs.n	80086ce <_malloc_r+0x4e>
 8008690:	250c      	movs	r5, #12
 8008692:	42a9      	cmp	r1, r5
 8008694:	d81d      	bhi.n	80086d2 <_malloc_r+0x52>
 8008696:	0030      	movs	r0, r6
 8008698:	f000 f882 	bl	80087a0 <__malloc_lock>
 800869c:	4a25      	ldr	r2, [pc, #148]	; (8008734 <_malloc_r+0xb4>)
 800869e:	6814      	ldr	r4, [r2, #0]
 80086a0:	0021      	movs	r1, r4
 80086a2:	2900      	cmp	r1, #0
 80086a4:	d119      	bne.n	80086da <_malloc_r+0x5a>
 80086a6:	4c24      	ldr	r4, [pc, #144]	; (8008738 <_malloc_r+0xb8>)
 80086a8:	6823      	ldr	r3, [r4, #0]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d103      	bne.n	80086b6 <_malloc_r+0x36>
 80086ae:	0030      	movs	r0, r6
 80086b0:	f000 f844 	bl	800873c <_sbrk_r>
 80086b4:	6020      	str	r0, [r4, #0]
 80086b6:	0029      	movs	r1, r5
 80086b8:	0030      	movs	r0, r6
 80086ba:	f000 f83f 	bl	800873c <_sbrk_r>
 80086be:	1c43      	adds	r3, r0, #1
 80086c0:	d12b      	bne.n	800871a <_malloc_r+0x9a>
 80086c2:	230c      	movs	r3, #12
 80086c4:	0030      	movs	r0, r6
 80086c6:	6033      	str	r3, [r6, #0]
 80086c8:	f000 f86b 	bl	80087a2 <__malloc_unlock>
 80086cc:	e003      	b.n	80086d6 <_malloc_r+0x56>
 80086ce:	2d00      	cmp	r5, #0
 80086d0:	dadf      	bge.n	8008692 <_malloc_r+0x12>
 80086d2:	230c      	movs	r3, #12
 80086d4:	6033      	str	r3, [r6, #0]
 80086d6:	2000      	movs	r0, #0
 80086d8:	bd70      	pop	{r4, r5, r6, pc}
 80086da:	680b      	ldr	r3, [r1, #0]
 80086dc:	1b5b      	subs	r3, r3, r5
 80086de:	d419      	bmi.n	8008714 <_malloc_r+0x94>
 80086e0:	2b0b      	cmp	r3, #11
 80086e2:	d903      	bls.n	80086ec <_malloc_r+0x6c>
 80086e4:	600b      	str	r3, [r1, #0]
 80086e6:	18cc      	adds	r4, r1, r3
 80086e8:	6025      	str	r5, [r4, #0]
 80086ea:	e003      	b.n	80086f4 <_malloc_r+0x74>
 80086ec:	684b      	ldr	r3, [r1, #4]
 80086ee:	428c      	cmp	r4, r1
 80086f0:	d10d      	bne.n	800870e <_malloc_r+0x8e>
 80086f2:	6013      	str	r3, [r2, #0]
 80086f4:	0030      	movs	r0, r6
 80086f6:	f000 f854 	bl	80087a2 <__malloc_unlock>
 80086fa:	0020      	movs	r0, r4
 80086fc:	2207      	movs	r2, #7
 80086fe:	300b      	adds	r0, #11
 8008700:	1d23      	adds	r3, r4, #4
 8008702:	4390      	bics	r0, r2
 8008704:	1ac3      	subs	r3, r0, r3
 8008706:	d0e7      	beq.n	80086d8 <_malloc_r+0x58>
 8008708:	425a      	negs	r2, r3
 800870a:	50e2      	str	r2, [r4, r3]
 800870c:	e7e4      	b.n	80086d8 <_malloc_r+0x58>
 800870e:	6063      	str	r3, [r4, #4]
 8008710:	000c      	movs	r4, r1
 8008712:	e7ef      	b.n	80086f4 <_malloc_r+0x74>
 8008714:	000c      	movs	r4, r1
 8008716:	6849      	ldr	r1, [r1, #4]
 8008718:	e7c3      	b.n	80086a2 <_malloc_r+0x22>
 800871a:	2303      	movs	r3, #3
 800871c:	1cc4      	adds	r4, r0, #3
 800871e:	439c      	bics	r4, r3
 8008720:	42a0      	cmp	r0, r4
 8008722:	d0e1      	beq.n	80086e8 <_malloc_r+0x68>
 8008724:	1a21      	subs	r1, r4, r0
 8008726:	0030      	movs	r0, r6
 8008728:	f000 f808 	bl	800873c <_sbrk_r>
 800872c:	1c43      	adds	r3, r0, #1
 800872e:	d1db      	bne.n	80086e8 <_malloc_r+0x68>
 8008730:	e7c7      	b.n	80086c2 <_malloc_r+0x42>
 8008732:	46c0      	nop			; (mov r8, r8)
 8008734:	20000130 	.word	0x20000130
 8008738:	20000134 	.word	0x20000134

0800873c <_sbrk_r>:
 800873c:	2300      	movs	r3, #0
 800873e:	b570      	push	{r4, r5, r6, lr}
 8008740:	4c06      	ldr	r4, [pc, #24]	; (800875c <_sbrk_r+0x20>)
 8008742:	0005      	movs	r5, r0
 8008744:	0008      	movs	r0, r1
 8008746:	6023      	str	r3, [r4, #0]
 8008748:	f7fb fc20 	bl	8003f8c <_sbrk>
 800874c:	1c43      	adds	r3, r0, #1
 800874e:	d103      	bne.n	8008758 <_sbrk_r+0x1c>
 8008750:	6823      	ldr	r3, [r4, #0]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d000      	beq.n	8008758 <_sbrk_r+0x1c>
 8008756:	602b      	str	r3, [r5, #0]
 8008758:	bd70      	pop	{r4, r5, r6, pc}
 800875a:	46c0      	nop			; (mov r8, r8)
 800875c:	200003a8 	.word	0x200003a8

08008760 <siprintf>:
 8008760:	b40e      	push	{r1, r2, r3}
 8008762:	b500      	push	{lr}
 8008764:	490b      	ldr	r1, [pc, #44]	; (8008794 <siprintf+0x34>)
 8008766:	b09c      	sub	sp, #112	; 0x70
 8008768:	ab1d      	add	r3, sp, #116	; 0x74
 800876a:	9002      	str	r0, [sp, #8]
 800876c:	9006      	str	r0, [sp, #24]
 800876e:	9107      	str	r1, [sp, #28]
 8008770:	9104      	str	r1, [sp, #16]
 8008772:	4809      	ldr	r0, [pc, #36]	; (8008798 <siprintf+0x38>)
 8008774:	4909      	ldr	r1, [pc, #36]	; (800879c <siprintf+0x3c>)
 8008776:	cb04      	ldmia	r3!, {r2}
 8008778:	9105      	str	r1, [sp, #20]
 800877a:	6800      	ldr	r0, [r0, #0]
 800877c:	a902      	add	r1, sp, #8
 800877e:	9301      	str	r3, [sp, #4]
 8008780:	f000 f872 	bl	8008868 <_svfiprintf_r>
 8008784:	2300      	movs	r3, #0
 8008786:	9a02      	ldr	r2, [sp, #8]
 8008788:	7013      	strb	r3, [r2, #0]
 800878a:	b01c      	add	sp, #112	; 0x70
 800878c:	bc08      	pop	{r3}
 800878e:	b003      	add	sp, #12
 8008790:	4718      	bx	r3
 8008792:	46c0      	nop			; (mov r8, r8)
 8008794:	7fffffff 	.word	0x7fffffff
 8008798:	20000068 	.word	0x20000068
 800879c:	ffff0208 	.word	0xffff0208

080087a0 <__malloc_lock>:
 80087a0:	4770      	bx	lr

080087a2 <__malloc_unlock>:
 80087a2:	4770      	bx	lr

080087a4 <__ssputs_r>:
 80087a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087a6:	688e      	ldr	r6, [r1, #8]
 80087a8:	b085      	sub	sp, #20
 80087aa:	0007      	movs	r7, r0
 80087ac:	000c      	movs	r4, r1
 80087ae:	9203      	str	r2, [sp, #12]
 80087b0:	9301      	str	r3, [sp, #4]
 80087b2:	429e      	cmp	r6, r3
 80087b4:	d83c      	bhi.n	8008830 <__ssputs_r+0x8c>
 80087b6:	2390      	movs	r3, #144	; 0x90
 80087b8:	898a      	ldrh	r2, [r1, #12]
 80087ba:	00db      	lsls	r3, r3, #3
 80087bc:	421a      	tst	r2, r3
 80087be:	d034      	beq.n	800882a <__ssputs_r+0x86>
 80087c0:	2503      	movs	r5, #3
 80087c2:	6909      	ldr	r1, [r1, #16]
 80087c4:	6823      	ldr	r3, [r4, #0]
 80087c6:	1a5b      	subs	r3, r3, r1
 80087c8:	9302      	str	r3, [sp, #8]
 80087ca:	6963      	ldr	r3, [r4, #20]
 80087cc:	9802      	ldr	r0, [sp, #8]
 80087ce:	435d      	muls	r5, r3
 80087d0:	0feb      	lsrs	r3, r5, #31
 80087d2:	195d      	adds	r5, r3, r5
 80087d4:	9b01      	ldr	r3, [sp, #4]
 80087d6:	106d      	asrs	r5, r5, #1
 80087d8:	3301      	adds	r3, #1
 80087da:	181b      	adds	r3, r3, r0
 80087dc:	42ab      	cmp	r3, r5
 80087de:	d900      	bls.n	80087e2 <__ssputs_r+0x3e>
 80087e0:	001d      	movs	r5, r3
 80087e2:	0553      	lsls	r3, r2, #21
 80087e4:	d532      	bpl.n	800884c <__ssputs_r+0xa8>
 80087e6:	0029      	movs	r1, r5
 80087e8:	0038      	movs	r0, r7
 80087ea:	f7ff ff49 	bl	8008680 <_malloc_r>
 80087ee:	1e06      	subs	r6, r0, #0
 80087f0:	d109      	bne.n	8008806 <__ssputs_r+0x62>
 80087f2:	230c      	movs	r3, #12
 80087f4:	603b      	str	r3, [r7, #0]
 80087f6:	2340      	movs	r3, #64	; 0x40
 80087f8:	2001      	movs	r0, #1
 80087fa:	89a2      	ldrh	r2, [r4, #12]
 80087fc:	4240      	negs	r0, r0
 80087fe:	4313      	orrs	r3, r2
 8008800:	81a3      	strh	r3, [r4, #12]
 8008802:	b005      	add	sp, #20
 8008804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008806:	9a02      	ldr	r2, [sp, #8]
 8008808:	6921      	ldr	r1, [r4, #16]
 800880a:	f7ff ff19 	bl	8008640 <memcpy>
 800880e:	89a3      	ldrh	r3, [r4, #12]
 8008810:	4a14      	ldr	r2, [pc, #80]	; (8008864 <__ssputs_r+0xc0>)
 8008812:	401a      	ands	r2, r3
 8008814:	2380      	movs	r3, #128	; 0x80
 8008816:	4313      	orrs	r3, r2
 8008818:	81a3      	strh	r3, [r4, #12]
 800881a:	9b02      	ldr	r3, [sp, #8]
 800881c:	6126      	str	r6, [r4, #16]
 800881e:	18f6      	adds	r6, r6, r3
 8008820:	6026      	str	r6, [r4, #0]
 8008822:	6165      	str	r5, [r4, #20]
 8008824:	9e01      	ldr	r6, [sp, #4]
 8008826:	1aed      	subs	r5, r5, r3
 8008828:	60a5      	str	r5, [r4, #8]
 800882a:	9b01      	ldr	r3, [sp, #4]
 800882c:	429e      	cmp	r6, r3
 800882e:	d900      	bls.n	8008832 <__ssputs_r+0x8e>
 8008830:	9e01      	ldr	r6, [sp, #4]
 8008832:	0032      	movs	r2, r6
 8008834:	9903      	ldr	r1, [sp, #12]
 8008836:	6820      	ldr	r0, [r4, #0]
 8008838:	f000 fa95 	bl	8008d66 <memmove>
 800883c:	68a3      	ldr	r3, [r4, #8]
 800883e:	2000      	movs	r0, #0
 8008840:	1b9b      	subs	r3, r3, r6
 8008842:	60a3      	str	r3, [r4, #8]
 8008844:	6823      	ldr	r3, [r4, #0]
 8008846:	199e      	adds	r6, r3, r6
 8008848:	6026      	str	r6, [r4, #0]
 800884a:	e7da      	b.n	8008802 <__ssputs_r+0x5e>
 800884c:	002a      	movs	r2, r5
 800884e:	0038      	movs	r0, r7
 8008850:	f000 fae6 	bl	8008e20 <_realloc_r>
 8008854:	1e06      	subs	r6, r0, #0
 8008856:	d1e0      	bne.n	800881a <__ssputs_r+0x76>
 8008858:	6921      	ldr	r1, [r4, #16]
 800885a:	0038      	movs	r0, r7
 800885c:	f000 fa96 	bl	8008d8c <_free_r>
 8008860:	e7c7      	b.n	80087f2 <__ssputs_r+0x4e>
 8008862:	46c0      	nop			; (mov r8, r8)
 8008864:	fffffb7f 	.word	0xfffffb7f

08008868 <_svfiprintf_r>:
 8008868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800886a:	b0a1      	sub	sp, #132	; 0x84
 800886c:	9003      	str	r0, [sp, #12]
 800886e:	001d      	movs	r5, r3
 8008870:	898b      	ldrh	r3, [r1, #12]
 8008872:	000f      	movs	r7, r1
 8008874:	0016      	movs	r6, r2
 8008876:	061b      	lsls	r3, r3, #24
 8008878:	d511      	bpl.n	800889e <_svfiprintf_r+0x36>
 800887a:	690b      	ldr	r3, [r1, #16]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d10e      	bne.n	800889e <_svfiprintf_r+0x36>
 8008880:	2140      	movs	r1, #64	; 0x40
 8008882:	f7ff fefd 	bl	8008680 <_malloc_r>
 8008886:	6038      	str	r0, [r7, #0]
 8008888:	6138      	str	r0, [r7, #16]
 800888a:	2800      	cmp	r0, #0
 800888c:	d105      	bne.n	800889a <_svfiprintf_r+0x32>
 800888e:	230c      	movs	r3, #12
 8008890:	9a03      	ldr	r2, [sp, #12]
 8008892:	3801      	subs	r0, #1
 8008894:	6013      	str	r3, [r2, #0]
 8008896:	b021      	add	sp, #132	; 0x84
 8008898:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800889a:	2340      	movs	r3, #64	; 0x40
 800889c:	617b      	str	r3, [r7, #20]
 800889e:	2300      	movs	r3, #0
 80088a0:	ac08      	add	r4, sp, #32
 80088a2:	6163      	str	r3, [r4, #20]
 80088a4:	3320      	adds	r3, #32
 80088a6:	7663      	strb	r3, [r4, #25]
 80088a8:	3310      	adds	r3, #16
 80088aa:	76a3      	strb	r3, [r4, #26]
 80088ac:	9507      	str	r5, [sp, #28]
 80088ae:	0035      	movs	r5, r6
 80088b0:	782b      	ldrb	r3, [r5, #0]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d001      	beq.n	80088ba <_svfiprintf_r+0x52>
 80088b6:	2b25      	cmp	r3, #37	; 0x25
 80088b8:	d146      	bne.n	8008948 <_svfiprintf_r+0xe0>
 80088ba:	1bab      	subs	r3, r5, r6
 80088bc:	9305      	str	r3, [sp, #20]
 80088be:	d00c      	beq.n	80088da <_svfiprintf_r+0x72>
 80088c0:	0032      	movs	r2, r6
 80088c2:	0039      	movs	r1, r7
 80088c4:	9803      	ldr	r0, [sp, #12]
 80088c6:	f7ff ff6d 	bl	80087a4 <__ssputs_r>
 80088ca:	1c43      	adds	r3, r0, #1
 80088cc:	d100      	bne.n	80088d0 <_svfiprintf_r+0x68>
 80088ce:	e0ae      	b.n	8008a2e <_svfiprintf_r+0x1c6>
 80088d0:	6962      	ldr	r2, [r4, #20]
 80088d2:	9b05      	ldr	r3, [sp, #20]
 80088d4:	4694      	mov	ip, r2
 80088d6:	4463      	add	r3, ip
 80088d8:	6163      	str	r3, [r4, #20]
 80088da:	782b      	ldrb	r3, [r5, #0]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d100      	bne.n	80088e2 <_svfiprintf_r+0x7a>
 80088e0:	e0a5      	b.n	8008a2e <_svfiprintf_r+0x1c6>
 80088e2:	2201      	movs	r2, #1
 80088e4:	2300      	movs	r3, #0
 80088e6:	4252      	negs	r2, r2
 80088e8:	6062      	str	r2, [r4, #4]
 80088ea:	a904      	add	r1, sp, #16
 80088ec:	3254      	adds	r2, #84	; 0x54
 80088ee:	1852      	adds	r2, r2, r1
 80088f0:	1c6e      	adds	r6, r5, #1
 80088f2:	6023      	str	r3, [r4, #0]
 80088f4:	60e3      	str	r3, [r4, #12]
 80088f6:	60a3      	str	r3, [r4, #8]
 80088f8:	7013      	strb	r3, [r2, #0]
 80088fa:	65a3      	str	r3, [r4, #88]	; 0x58
 80088fc:	7831      	ldrb	r1, [r6, #0]
 80088fe:	2205      	movs	r2, #5
 8008900:	4853      	ldr	r0, [pc, #332]	; (8008a50 <_svfiprintf_r+0x1e8>)
 8008902:	f000 fa25 	bl	8008d50 <memchr>
 8008906:	1c75      	adds	r5, r6, #1
 8008908:	2800      	cmp	r0, #0
 800890a:	d11f      	bne.n	800894c <_svfiprintf_r+0xe4>
 800890c:	6822      	ldr	r2, [r4, #0]
 800890e:	06d3      	lsls	r3, r2, #27
 8008910:	d504      	bpl.n	800891c <_svfiprintf_r+0xb4>
 8008912:	2353      	movs	r3, #83	; 0x53
 8008914:	a904      	add	r1, sp, #16
 8008916:	185b      	adds	r3, r3, r1
 8008918:	2120      	movs	r1, #32
 800891a:	7019      	strb	r1, [r3, #0]
 800891c:	0713      	lsls	r3, r2, #28
 800891e:	d504      	bpl.n	800892a <_svfiprintf_r+0xc2>
 8008920:	2353      	movs	r3, #83	; 0x53
 8008922:	a904      	add	r1, sp, #16
 8008924:	185b      	adds	r3, r3, r1
 8008926:	212b      	movs	r1, #43	; 0x2b
 8008928:	7019      	strb	r1, [r3, #0]
 800892a:	7833      	ldrb	r3, [r6, #0]
 800892c:	2b2a      	cmp	r3, #42	; 0x2a
 800892e:	d016      	beq.n	800895e <_svfiprintf_r+0xf6>
 8008930:	0035      	movs	r5, r6
 8008932:	2100      	movs	r1, #0
 8008934:	200a      	movs	r0, #10
 8008936:	68e3      	ldr	r3, [r4, #12]
 8008938:	782a      	ldrb	r2, [r5, #0]
 800893a:	1c6e      	adds	r6, r5, #1
 800893c:	3a30      	subs	r2, #48	; 0x30
 800893e:	2a09      	cmp	r2, #9
 8008940:	d94e      	bls.n	80089e0 <_svfiprintf_r+0x178>
 8008942:	2900      	cmp	r1, #0
 8008944:	d018      	beq.n	8008978 <_svfiprintf_r+0x110>
 8008946:	e010      	b.n	800896a <_svfiprintf_r+0x102>
 8008948:	3501      	adds	r5, #1
 800894a:	e7b1      	b.n	80088b0 <_svfiprintf_r+0x48>
 800894c:	4b40      	ldr	r3, [pc, #256]	; (8008a50 <_svfiprintf_r+0x1e8>)
 800894e:	6822      	ldr	r2, [r4, #0]
 8008950:	1ac0      	subs	r0, r0, r3
 8008952:	2301      	movs	r3, #1
 8008954:	4083      	lsls	r3, r0
 8008956:	4313      	orrs	r3, r2
 8008958:	6023      	str	r3, [r4, #0]
 800895a:	002e      	movs	r6, r5
 800895c:	e7ce      	b.n	80088fc <_svfiprintf_r+0x94>
 800895e:	9b07      	ldr	r3, [sp, #28]
 8008960:	1d19      	adds	r1, r3, #4
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	9107      	str	r1, [sp, #28]
 8008966:	2b00      	cmp	r3, #0
 8008968:	db01      	blt.n	800896e <_svfiprintf_r+0x106>
 800896a:	930b      	str	r3, [sp, #44]	; 0x2c
 800896c:	e004      	b.n	8008978 <_svfiprintf_r+0x110>
 800896e:	425b      	negs	r3, r3
 8008970:	60e3      	str	r3, [r4, #12]
 8008972:	2302      	movs	r3, #2
 8008974:	4313      	orrs	r3, r2
 8008976:	6023      	str	r3, [r4, #0]
 8008978:	782b      	ldrb	r3, [r5, #0]
 800897a:	2b2e      	cmp	r3, #46	; 0x2e
 800897c:	d10a      	bne.n	8008994 <_svfiprintf_r+0x12c>
 800897e:	786b      	ldrb	r3, [r5, #1]
 8008980:	2b2a      	cmp	r3, #42	; 0x2a
 8008982:	d135      	bne.n	80089f0 <_svfiprintf_r+0x188>
 8008984:	9b07      	ldr	r3, [sp, #28]
 8008986:	3502      	adds	r5, #2
 8008988:	1d1a      	adds	r2, r3, #4
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	9207      	str	r2, [sp, #28]
 800898e:	2b00      	cmp	r3, #0
 8008990:	db2b      	blt.n	80089ea <_svfiprintf_r+0x182>
 8008992:	9309      	str	r3, [sp, #36]	; 0x24
 8008994:	4e2f      	ldr	r6, [pc, #188]	; (8008a54 <_svfiprintf_r+0x1ec>)
 8008996:	7829      	ldrb	r1, [r5, #0]
 8008998:	2203      	movs	r2, #3
 800899a:	0030      	movs	r0, r6
 800899c:	f000 f9d8 	bl	8008d50 <memchr>
 80089a0:	2800      	cmp	r0, #0
 80089a2:	d006      	beq.n	80089b2 <_svfiprintf_r+0x14a>
 80089a4:	2340      	movs	r3, #64	; 0x40
 80089a6:	1b80      	subs	r0, r0, r6
 80089a8:	4083      	lsls	r3, r0
 80089aa:	6822      	ldr	r2, [r4, #0]
 80089ac:	3501      	adds	r5, #1
 80089ae:	4313      	orrs	r3, r2
 80089b0:	6023      	str	r3, [r4, #0]
 80089b2:	7829      	ldrb	r1, [r5, #0]
 80089b4:	2206      	movs	r2, #6
 80089b6:	4828      	ldr	r0, [pc, #160]	; (8008a58 <_svfiprintf_r+0x1f0>)
 80089b8:	1c6e      	adds	r6, r5, #1
 80089ba:	7621      	strb	r1, [r4, #24]
 80089bc:	f000 f9c8 	bl	8008d50 <memchr>
 80089c0:	2800      	cmp	r0, #0
 80089c2:	d03c      	beq.n	8008a3e <_svfiprintf_r+0x1d6>
 80089c4:	4b25      	ldr	r3, [pc, #148]	; (8008a5c <_svfiprintf_r+0x1f4>)
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d125      	bne.n	8008a16 <_svfiprintf_r+0x1ae>
 80089ca:	2207      	movs	r2, #7
 80089cc:	9b07      	ldr	r3, [sp, #28]
 80089ce:	3307      	adds	r3, #7
 80089d0:	4393      	bics	r3, r2
 80089d2:	3308      	adds	r3, #8
 80089d4:	9307      	str	r3, [sp, #28]
 80089d6:	6963      	ldr	r3, [r4, #20]
 80089d8:	9a04      	ldr	r2, [sp, #16]
 80089da:	189b      	adds	r3, r3, r2
 80089dc:	6163      	str	r3, [r4, #20]
 80089de:	e766      	b.n	80088ae <_svfiprintf_r+0x46>
 80089e0:	4343      	muls	r3, r0
 80089e2:	2101      	movs	r1, #1
 80089e4:	189b      	adds	r3, r3, r2
 80089e6:	0035      	movs	r5, r6
 80089e8:	e7a6      	b.n	8008938 <_svfiprintf_r+0xd0>
 80089ea:	2301      	movs	r3, #1
 80089ec:	425b      	negs	r3, r3
 80089ee:	e7d0      	b.n	8008992 <_svfiprintf_r+0x12a>
 80089f0:	2300      	movs	r3, #0
 80089f2:	200a      	movs	r0, #10
 80089f4:	001a      	movs	r2, r3
 80089f6:	3501      	adds	r5, #1
 80089f8:	6063      	str	r3, [r4, #4]
 80089fa:	7829      	ldrb	r1, [r5, #0]
 80089fc:	1c6e      	adds	r6, r5, #1
 80089fe:	3930      	subs	r1, #48	; 0x30
 8008a00:	2909      	cmp	r1, #9
 8008a02:	d903      	bls.n	8008a0c <_svfiprintf_r+0x1a4>
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d0c5      	beq.n	8008994 <_svfiprintf_r+0x12c>
 8008a08:	9209      	str	r2, [sp, #36]	; 0x24
 8008a0a:	e7c3      	b.n	8008994 <_svfiprintf_r+0x12c>
 8008a0c:	4342      	muls	r2, r0
 8008a0e:	2301      	movs	r3, #1
 8008a10:	1852      	adds	r2, r2, r1
 8008a12:	0035      	movs	r5, r6
 8008a14:	e7f1      	b.n	80089fa <_svfiprintf_r+0x192>
 8008a16:	ab07      	add	r3, sp, #28
 8008a18:	9300      	str	r3, [sp, #0]
 8008a1a:	003a      	movs	r2, r7
 8008a1c:	4b10      	ldr	r3, [pc, #64]	; (8008a60 <_svfiprintf_r+0x1f8>)
 8008a1e:	0021      	movs	r1, r4
 8008a20:	9803      	ldr	r0, [sp, #12]
 8008a22:	e000      	b.n	8008a26 <_svfiprintf_r+0x1be>
 8008a24:	bf00      	nop
 8008a26:	9004      	str	r0, [sp, #16]
 8008a28:	9b04      	ldr	r3, [sp, #16]
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	d1d3      	bne.n	80089d6 <_svfiprintf_r+0x16e>
 8008a2e:	89bb      	ldrh	r3, [r7, #12]
 8008a30:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008a32:	065b      	lsls	r3, r3, #25
 8008a34:	d400      	bmi.n	8008a38 <_svfiprintf_r+0x1d0>
 8008a36:	e72e      	b.n	8008896 <_svfiprintf_r+0x2e>
 8008a38:	2001      	movs	r0, #1
 8008a3a:	4240      	negs	r0, r0
 8008a3c:	e72b      	b.n	8008896 <_svfiprintf_r+0x2e>
 8008a3e:	ab07      	add	r3, sp, #28
 8008a40:	9300      	str	r3, [sp, #0]
 8008a42:	003a      	movs	r2, r7
 8008a44:	4b06      	ldr	r3, [pc, #24]	; (8008a60 <_svfiprintf_r+0x1f8>)
 8008a46:	0021      	movs	r1, r4
 8008a48:	9803      	ldr	r0, [sp, #12]
 8008a4a:	f000 f879 	bl	8008b40 <_printf_i>
 8008a4e:	e7ea      	b.n	8008a26 <_svfiprintf_r+0x1be>
 8008a50:	08009664 	.word	0x08009664
 8008a54:	0800966a 	.word	0x0800966a
 8008a58:	0800966e 	.word	0x0800966e
 8008a5c:	00000000 	.word	0x00000000
 8008a60:	080087a5 	.word	0x080087a5

08008a64 <_printf_common>:
 8008a64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a66:	0015      	movs	r5, r2
 8008a68:	9301      	str	r3, [sp, #4]
 8008a6a:	688a      	ldr	r2, [r1, #8]
 8008a6c:	690b      	ldr	r3, [r1, #16]
 8008a6e:	9000      	str	r0, [sp, #0]
 8008a70:	000c      	movs	r4, r1
 8008a72:	4293      	cmp	r3, r2
 8008a74:	da00      	bge.n	8008a78 <_printf_common+0x14>
 8008a76:	0013      	movs	r3, r2
 8008a78:	0022      	movs	r2, r4
 8008a7a:	602b      	str	r3, [r5, #0]
 8008a7c:	3243      	adds	r2, #67	; 0x43
 8008a7e:	7812      	ldrb	r2, [r2, #0]
 8008a80:	2a00      	cmp	r2, #0
 8008a82:	d001      	beq.n	8008a88 <_printf_common+0x24>
 8008a84:	3301      	adds	r3, #1
 8008a86:	602b      	str	r3, [r5, #0]
 8008a88:	6823      	ldr	r3, [r4, #0]
 8008a8a:	069b      	lsls	r3, r3, #26
 8008a8c:	d502      	bpl.n	8008a94 <_printf_common+0x30>
 8008a8e:	682b      	ldr	r3, [r5, #0]
 8008a90:	3302      	adds	r3, #2
 8008a92:	602b      	str	r3, [r5, #0]
 8008a94:	2706      	movs	r7, #6
 8008a96:	6823      	ldr	r3, [r4, #0]
 8008a98:	401f      	ands	r7, r3
 8008a9a:	d027      	beq.n	8008aec <_printf_common+0x88>
 8008a9c:	0023      	movs	r3, r4
 8008a9e:	3343      	adds	r3, #67	; 0x43
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	1e5a      	subs	r2, r3, #1
 8008aa4:	4193      	sbcs	r3, r2
 8008aa6:	6822      	ldr	r2, [r4, #0]
 8008aa8:	0692      	lsls	r2, r2, #26
 8008aaa:	d430      	bmi.n	8008b0e <_printf_common+0xaa>
 8008aac:	0022      	movs	r2, r4
 8008aae:	9901      	ldr	r1, [sp, #4]
 8008ab0:	3243      	adds	r2, #67	; 0x43
 8008ab2:	9800      	ldr	r0, [sp, #0]
 8008ab4:	9e08      	ldr	r6, [sp, #32]
 8008ab6:	47b0      	blx	r6
 8008ab8:	1c43      	adds	r3, r0, #1
 8008aba:	d025      	beq.n	8008b08 <_printf_common+0xa4>
 8008abc:	2306      	movs	r3, #6
 8008abe:	6820      	ldr	r0, [r4, #0]
 8008ac0:	682a      	ldr	r2, [r5, #0]
 8008ac2:	68e1      	ldr	r1, [r4, #12]
 8008ac4:	4003      	ands	r3, r0
 8008ac6:	2500      	movs	r5, #0
 8008ac8:	2b04      	cmp	r3, #4
 8008aca:	d103      	bne.n	8008ad4 <_printf_common+0x70>
 8008acc:	1a8d      	subs	r5, r1, r2
 8008ace:	43eb      	mvns	r3, r5
 8008ad0:	17db      	asrs	r3, r3, #31
 8008ad2:	401d      	ands	r5, r3
 8008ad4:	68a3      	ldr	r3, [r4, #8]
 8008ad6:	6922      	ldr	r2, [r4, #16]
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	dd01      	ble.n	8008ae0 <_printf_common+0x7c>
 8008adc:	1a9b      	subs	r3, r3, r2
 8008ade:	18ed      	adds	r5, r5, r3
 8008ae0:	2700      	movs	r7, #0
 8008ae2:	42bd      	cmp	r5, r7
 8008ae4:	d120      	bne.n	8008b28 <_printf_common+0xc4>
 8008ae6:	2000      	movs	r0, #0
 8008ae8:	e010      	b.n	8008b0c <_printf_common+0xa8>
 8008aea:	3701      	adds	r7, #1
 8008aec:	68e3      	ldr	r3, [r4, #12]
 8008aee:	682a      	ldr	r2, [r5, #0]
 8008af0:	1a9b      	subs	r3, r3, r2
 8008af2:	42bb      	cmp	r3, r7
 8008af4:	ddd2      	ble.n	8008a9c <_printf_common+0x38>
 8008af6:	0022      	movs	r2, r4
 8008af8:	2301      	movs	r3, #1
 8008afa:	3219      	adds	r2, #25
 8008afc:	9901      	ldr	r1, [sp, #4]
 8008afe:	9800      	ldr	r0, [sp, #0]
 8008b00:	9e08      	ldr	r6, [sp, #32]
 8008b02:	47b0      	blx	r6
 8008b04:	1c43      	adds	r3, r0, #1
 8008b06:	d1f0      	bne.n	8008aea <_printf_common+0x86>
 8008b08:	2001      	movs	r0, #1
 8008b0a:	4240      	negs	r0, r0
 8008b0c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008b0e:	2030      	movs	r0, #48	; 0x30
 8008b10:	18e1      	adds	r1, r4, r3
 8008b12:	3143      	adds	r1, #67	; 0x43
 8008b14:	7008      	strb	r0, [r1, #0]
 8008b16:	0021      	movs	r1, r4
 8008b18:	1c5a      	adds	r2, r3, #1
 8008b1a:	3145      	adds	r1, #69	; 0x45
 8008b1c:	7809      	ldrb	r1, [r1, #0]
 8008b1e:	18a2      	adds	r2, r4, r2
 8008b20:	3243      	adds	r2, #67	; 0x43
 8008b22:	3302      	adds	r3, #2
 8008b24:	7011      	strb	r1, [r2, #0]
 8008b26:	e7c1      	b.n	8008aac <_printf_common+0x48>
 8008b28:	0022      	movs	r2, r4
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	321a      	adds	r2, #26
 8008b2e:	9901      	ldr	r1, [sp, #4]
 8008b30:	9800      	ldr	r0, [sp, #0]
 8008b32:	9e08      	ldr	r6, [sp, #32]
 8008b34:	47b0      	blx	r6
 8008b36:	1c43      	adds	r3, r0, #1
 8008b38:	d0e6      	beq.n	8008b08 <_printf_common+0xa4>
 8008b3a:	3701      	adds	r7, #1
 8008b3c:	e7d1      	b.n	8008ae2 <_printf_common+0x7e>
	...

08008b40 <_printf_i>:
 8008b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b42:	b089      	sub	sp, #36	; 0x24
 8008b44:	9204      	str	r2, [sp, #16]
 8008b46:	000a      	movs	r2, r1
 8008b48:	3243      	adds	r2, #67	; 0x43
 8008b4a:	9305      	str	r3, [sp, #20]
 8008b4c:	9003      	str	r0, [sp, #12]
 8008b4e:	9202      	str	r2, [sp, #8]
 8008b50:	7e0a      	ldrb	r2, [r1, #24]
 8008b52:	000c      	movs	r4, r1
 8008b54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b56:	2a6e      	cmp	r2, #110	; 0x6e
 8008b58:	d100      	bne.n	8008b5c <_printf_i+0x1c>
 8008b5a:	e086      	b.n	8008c6a <_printf_i+0x12a>
 8008b5c:	d81f      	bhi.n	8008b9e <_printf_i+0x5e>
 8008b5e:	2a63      	cmp	r2, #99	; 0x63
 8008b60:	d033      	beq.n	8008bca <_printf_i+0x8a>
 8008b62:	d808      	bhi.n	8008b76 <_printf_i+0x36>
 8008b64:	2a00      	cmp	r2, #0
 8008b66:	d100      	bne.n	8008b6a <_printf_i+0x2a>
 8008b68:	e08c      	b.n	8008c84 <_printf_i+0x144>
 8008b6a:	2a58      	cmp	r2, #88	; 0x58
 8008b6c:	d04d      	beq.n	8008c0a <_printf_i+0xca>
 8008b6e:	0025      	movs	r5, r4
 8008b70:	3542      	adds	r5, #66	; 0x42
 8008b72:	702a      	strb	r2, [r5, #0]
 8008b74:	e030      	b.n	8008bd8 <_printf_i+0x98>
 8008b76:	2a64      	cmp	r2, #100	; 0x64
 8008b78:	d001      	beq.n	8008b7e <_printf_i+0x3e>
 8008b7a:	2a69      	cmp	r2, #105	; 0x69
 8008b7c:	d1f7      	bne.n	8008b6e <_printf_i+0x2e>
 8008b7e:	6819      	ldr	r1, [r3, #0]
 8008b80:	6825      	ldr	r5, [r4, #0]
 8008b82:	1d0a      	adds	r2, r1, #4
 8008b84:	0628      	lsls	r0, r5, #24
 8008b86:	d529      	bpl.n	8008bdc <_printf_i+0x9c>
 8008b88:	6808      	ldr	r0, [r1, #0]
 8008b8a:	601a      	str	r2, [r3, #0]
 8008b8c:	2800      	cmp	r0, #0
 8008b8e:	da03      	bge.n	8008b98 <_printf_i+0x58>
 8008b90:	232d      	movs	r3, #45	; 0x2d
 8008b92:	9a02      	ldr	r2, [sp, #8]
 8008b94:	4240      	negs	r0, r0
 8008b96:	7013      	strb	r3, [r2, #0]
 8008b98:	4e6b      	ldr	r6, [pc, #428]	; (8008d48 <_printf_i+0x208>)
 8008b9a:	270a      	movs	r7, #10
 8008b9c:	e04f      	b.n	8008c3e <_printf_i+0xfe>
 8008b9e:	2a73      	cmp	r2, #115	; 0x73
 8008ba0:	d074      	beq.n	8008c8c <_printf_i+0x14c>
 8008ba2:	d808      	bhi.n	8008bb6 <_printf_i+0x76>
 8008ba4:	2a6f      	cmp	r2, #111	; 0x6f
 8008ba6:	d01f      	beq.n	8008be8 <_printf_i+0xa8>
 8008ba8:	2a70      	cmp	r2, #112	; 0x70
 8008baa:	d1e0      	bne.n	8008b6e <_printf_i+0x2e>
 8008bac:	2220      	movs	r2, #32
 8008bae:	6809      	ldr	r1, [r1, #0]
 8008bb0:	430a      	orrs	r2, r1
 8008bb2:	6022      	str	r2, [r4, #0]
 8008bb4:	e003      	b.n	8008bbe <_printf_i+0x7e>
 8008bb6:	2a75      	cmp	r2, #117	; 0x75
 8008bb8:	d016      	beq.n	8008be8 <_printf_i+0xa8>
 8008bba:	2a78      	cmp	r2, #120	; 0x78
 8008bbc:	d1d7      	bne.n	8008b6e <_printf_i+0x2e>
 8008bbe:	0022      	movs	r2, r4
 8008bc0:	2178      	movs	r1, #120	; 0x78
 8008bc2:	3245      	adds	r2, #69	; 0x45
 8008bc4:	7011      	strb	r1, [r2, #0]
 8008bc6:	4e61      	ldr	r6, [pc, #388]	; (8008d4c <_printf_i+0x20c>)
 8008bc8:	e022      	b.n	8008c10 <_printf_i+0xd0>
 8008bca:	0025      	movs	r5, r4
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	3542      	adds	r5, #66	; 0x42
 8008bd0:	1d11      	adds	r1, r2, #4
 8008bd2:	6019      	str	r1, [r3, #0]
 8008bd4:	6813      	ldr	r3, [r2, #0]
 8008bd6:	702b      	strb	r3, [r5, #0]
 8008bd8:	2301      	movs	r3, #1
 8008bda:	e065      	b.n	8008ca8 <_printf_i+0x168>
 8008bdc:	6808      	ldr	r0, [r1, #0]
 8008bde:	601a      	str	r2, [r3, #0]
 8008be0:	0669      	lsls	r1, r5, #25
 8008be2:	d5d3      	bpl.n	8008b8c <_printf_i+0x4c>
 8008be4:	b200      	sxth	r0, r0
 8008be6:	e7d1      	b.n	8008b8c <_printf_i+0x4c>
 8008be8:	6819      	ldr	r1, [r3, #0]
 8008bea:	6825      	ldr	r5, [r4, #0]
 8008bec:	1d08      	adds	r0, r1, #4
 8008bee:	6018      	str	r0, [r3, #0]
 8008bf0:	6808      	ldr	r0, [r1, #0]
 8008bf2:	062e      	lsls	r6, r5, #24
 8008bf4:	d505      	bpl.n	8008c02 <_printf_i+0xc2>
 8008bf6:	4e54      	ldr	r6, [pc, #336]	; (8008d48 <_printf_i+0x208>)
 8008bf8:	2708      	movs	r7, #8
 8008bfa:	2a6f      	cmp	r2, #111	; 0x6f
 8008bfc:	d01b      	beq.n	8008c36 <_printf_i+0xf6>
 8008bfe:	270a      	movs	r7, #10
 8008c00:	e019      	b.n	8008c36 <_printf_i+0xf6>
 8008c02:	066d      	lsls	r5, r5, #25
 8008c04:	d5f7      	bpl.n	8008bf6 <_printf_i+0xb6>
 8008c06:	b280      	uxth	r0, r0
 8008c08:	e7f5      	b.n	8008bf6 <_printf_i+0xb6>
 8008c0a:	3145      	adds	r1, #69	; 0x45
 8008c0c:	4e4e      	ldr	r6, [pc, #312]	; (8008d48 <_printf_i+0x208>)
 8008c0e:	700a      	strb	r2, [r1, #0]
 8008c10:	6818      	ldr	r0, [r3, #0]
 8008c12:	6822      	ldr	r2, [r4, #0]
 8008c14:	1d01      	adds	r1, r0, #4
 8008c16:	6800      	ldr	r0, [r0, #0]
 8008c18:	6019      	str	r1, [r3, #0]
 8008c1a:	0615      	lsls	r5, r2, #24
 8008c1c:	d521      	bpl.n	8008c62 <_printf_i+0x122>
 8008c1e:	07d3      	lsls	r3, r2, #31
 8008c20:	d502      	bpl.n	8008c28 <_printf_i+0xe8>
 8008c22:	2320      	movs	r3, #32
 8008c24:	431a      	orrs	r2, r3
 8008c26:	6022      	str	r2, [r4, #0]
 8008c28:	2710      	movs	r7, #16
 8008c2a:	2800      	cmp	r0, #0
 8008c2c:	d103      	bne.n	8008c36 <_printf_i+0xf6>
 8008c2e:	2320      	movs	r3, #32
 8008c30:	6822      	ldr	r2, [r4, #0]
 8008c32:	439a      	bics	r2, r3
 8008c34:	6022      	str	r2, [r4, #0]
 8008c36:	0023      	movs	r3, r4
 8008c38:	2200      	movs	r2, #0
 8008c3a:	3343      	adds	r3, #67	; 0x43
 8008c3c:	701a      	strb	r2, [r3, #0]
 8008c3e:	6863      	ldr	r3, [r4, #4]
 8008c40:	60a3      	str	r3, [r4, #8]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	db58      	blt.n	8008cf8 <_printf_i+0x1b8>
 8008c46:	2204      	movs	r2, #4
 8008c48:	6821      	ldr	r1, [r4, #0]
 8008c4a:	4391      	bics	r1, r2
 8008c4c:	6021      	str	r1, [r4, #0]
 8008c4e:	2800      	cmp	r0, #0
 8008c50:	d154      	bne.n	8008cfc <_printf_i+0x1bc>
 8008c52:	9d02      	ldr	r5, [sp, #8]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d05a      	beq.n	8008d0e <_printf_i+0x1ce>
 8008c58:	0025      	movs	r5, r4
 8008c5a:	7833      	ldrb	r3, [r6, #0]
 8008c5c:	3542      	adds	r5, #66	; 0x42
 8008c5e:	702b      	strb	r3, [r5, #0]
 8008c60:	e055      	b.n	8008d0e <_printf_i+0x1ce>
 8008c62:	0655      	lsls	r5, r2, #25
 8008c64:	d5db      	bpl.n	8008c1e <_printf_i+0xde>
 8008c66:	b280      	uxth	r0, r0
 8008c68:	e7d9      	b.n	8008c1e <_printf_i+0xde>
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	680d      	ldr	r5, [r1, #0]
 8008c6e:	1d10      	adds	r0, r2, #4
 8008c70:	6949      	ldr	r1, [r1, #20]
 8008c72:	6018      	str	r0, [r3, #0]
 8008c74:	6813      	ldr	r3, [r2, #0]
 8008c76:	062e      	lsls	r6, r5, #24
 8008c78:	d501      	bpl.n	8008c7e <_printf_i+0x13e>
 8008c7a:	6019      	str	r1, [r3, #0]
 8008c7c:	e002      	b.n	8008c84 <_printf_i+0x144>
 8008c7e:	066d      	lsls	r5, r5, #25
 8008c80:	d5fb      	bpl.n	8008c7a <_printf_i+0x13a>
 8008c82:	8019      	strh	r1, [r3, #0]
 8008c84:	2300      	movs	r3, #0
 8008c86:	9d02      	ldr	r5, [sp, #8]
 8008c88:	6123      	str	r3, [r4, #16]
 8008c8a:	e04f      	b.n	8008d2c <_printf_i+0x1ec>
 8008c8c:	681a      	ldr	r2, [r3, #0]
 8008c8e:	1d11      	adds	r1, r2, #4
 8008c90:	6019      	str	r1, [r3, #0]
 8008c92:	6815      	ldr	r5, [r2, #0]
 8008c94:	2100      	movs	r1, #0
 8008c96:	6862      	ldr	r2, [r4, #4]
 8008c98:	0028      	movs	r0, r5
 8008c9a:	f000 f859 	bl	8008d50 <memchr>
 8008c9e:	2800      	cmp	r0, #0
 8008ca0:	d001      	beq.n	8008ca6 <_printf_i+0x166>
 8008ca2:	1b40      	subs	r0, r0, r5
 8008ca4:	6060      	str	r0, [r4, #4]
 8008ca6:	6863      	ldr	r3, [r4, #4]
 8008ca8:	6123      	str	r3, [r4, #16]
 8008caa:	2300      	movs	r3, #0
 8008cac:	9a02      	ldr	r2, [sp, #8]
 8008cae:	7013      	strb	r3, [r2, #0]
 8008cb0:	e03c      	b.n	8008d2c <_printf_i+0x1ec>
 8008cb2:	6923      	ldr	r3, [r4, #16]
 8008cb4:	002a      	movs	r2, r5
 8008cb6:	9904      	ldr	r1, [sp, #16]
 8008cb8:	9803      	ldr	r0, [sp, #12]
 8008cba:	9d05      	ldr	r5, [sp, #20]
 8008cbc:	47a8      	blx	r5
 8008cbe:	1c43      	adds	r3, r0, #1
 8008cc0:	d03e      	beq.n	8008d40 <_printf_i+0x200>
 8008cc2:	6823      	ldr	r3, [r4, #0]
 8008cc4:	079b      	lsls	r3, r3, #30
 8008cc6:	d415      	bmi.n	8008cf4 <_printf_i+0x1b4>
 8008cc8:	9b07      	ldr	r3, [sp, #28]
 8008cca:	68e0      	ldr	r0, [r4, #12]
 8008ccc:	4298      	cmp	r0, r3
 8008cce:	da39      	bge.n	8008d44 <_printf_i+0x204>
 8008cd0:	0018      	movs	r0, r3
 8008cd2:	e037      	b.n	8008d44 <_printf_i+0x204>
 8008cd4:	0022      	movs	r2, r4
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	3219      	adds	r2, #25
 8008cda:	9904      	ldr	r1, [sp, #16]
 8008cdc:	9803      	ldr	r0, [sp, #12]
 8008cde:	9e05      	ldr	r6, [sp, #20]
 8008ce0:	47b0      	blx	r6
 8008ce2:	1c43      	adds	r3, r0, #1
 8008ce4:	d02c      	beq.n	8008d40 <_printf_i+0x200>
 8008ce6:	3501      	adds	r5, #1
 8008ce8:	68e3      	ldr	r3, [r4, #12]
 8008cea:	9a07      	ldr	r2, [sp, #28]
 8008cec:	1a9b      	subs	r3, r3, r2
 8008cee:	42ab      	cmp	r3, r5
 8008cf0:	dcf0      	bgt.n	8008cd4 <_printf_i+0x194>
 8008cf2:	e7e9      	b.n	8008cc8 <_printf_i+0x188>
 8008cf4:	2500      	movs	r5, #0
 8008cf6:	e7f7      	b.n	8008ce8 <_printf_i+0x1a8>
 8008cf8:	2800      	cmp	r0, #0
 8008cfa:	d0ad      	beq.n	8008c58 <_printf_i+0x118>
 8008cfc:	9d02      	ldr	r5, [sp, #8]
 8008cfe:	0039      	movs	r1, r7
 8008d00:	f7f7 fa90 	bl	8000224 <__aeabi_uidivmod>
 8008d04:	5c73      	ldrb	r3, [r6, r1]
 8008d06:	3d01      	subs	r5, #1
 8008d08:	702b      	strb	r3, [r5, #0]
 8008d0a:	2800      	cmp	r0, #0
 8008d0c:	d1f7      	bne.n	8008cfe <_printf_i+0x1be>
 8008d0e:	2f08      	cmp	r7, #8
 8008d10:	d109      	bne.n	8008d26 <_printf_i+0x1e6>
 8008d12:	6823      	ldr	r3, [r4, #0]
 8008d14:	07db      	lsls	r3, r3, #31
 8008d16:	d506      	bpl.n	8008d26 <_printf_i+0x1e6>
 8008d18:	6863      	ldr	r3, [r4, #4]
 8008d1a:	6922      	ldr	r2, [r4, #16]
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	dc02      	bgt.n	8008d26 <_printf_i+0x1e6>
 8008d20:	2330      	movs	r3, #48	; 0x30
 8008d22:	3d01      	subs	r5, #1
 8008d24:	702b      	strb	r3, [r5, #0]
 8008d26:	9b02      	ldr	r3, [sp, #8]
 8008d28:	1b5b      	subs	r3, r3, r5
 8008d2a:	6123      	str	r3, [r4, #16]
 8008d2c:	9b05      	ldr	r3, [sp, #20]
 8008d2e:	aa07      	add	r2, sp, #28
 8008d30:	9300      	str	r3, [sp, #0]
 8008d32:	0021      	movs	r1, r4
 8008d34:	9b04      	ldr	r3, [sp, #16]
 8008d36:	9803      	ldr	r0, [sp, #12]
 8008d38:	f7ff fe94 	bl	8008a64 <_printf_common>
 8008d3c:	1c43      	adds	r3, r0, #1
 8008d3e:	d1b8      	bne.n	8008cb2 <_printf_i+0x172>
 8008d40:	2001      	movs	r0, #1
 8008d42:	4240      	negs	r0, r0
 8008d44:	b009      	add	sp, #36	; 0x24
 8008d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d48:	08009675 	.word	0x08009675
 8008d4c:	08009686 	.word	0x08009686

08008d50 <memchr>:
 8008d50:	b2c9      	uxtb	r1, r1
 8008d52:	1882      	adds	r2, r0, r2
 8008d54:	4290      	cmp	r0, r2
 8008d56:	d101      	bne.n	8008d5c <memchr+0xc>
 8008d58:	2000      	movs	r0, #0
 8008d5a:	4770      	bx	lr
 8008d5c:	7803      	ldrb	r3, [r0, #0]
 8008d5e:	428b      	cmp	r3, r1
 8008d60:	d0fb      	beq.n	8008d5a <memchr+0xa>
 8008d62:	3001      	adds	r0, #1
 8008d64:	e7f6      	b.n	8008d54 <memchr+0x4>

08008d66 <memmove>:
 8008d66:	b510      	push	{r4, lr}
 8008d68:	4288      	cmp	r0, r1
 8008d6a:	d902      	bls.n	8008d72 <memmove+0xc>
 8008d6c:	188b      	adds	r3, r1, r2
 8008d6e:	4298      	cmp	r0, r3
 8008d70:	d303      	bcc.n	8008d7a <memmove+0x14>
 8008d72:	2300      	movs	r3, #0
 8008d74:	e007      	b.n	8008d86 <memmove+0x20>
 8008d76:	5c8b      	ldrb	r3, [r1, r2]
 8008d78:	5483      	strb	r3, [r0, r2]
 8008d7a:	3a01      	subs	r2, #1
 8008d7c:	d2fb      	bcs.n	8008d76 <memmove+0x10>
 8008d7e:	bd10      	pop	{r4, pc}
 8008d80:	5ccc      	ldrb	r4, [r1, r3]
 8008d82:	54c4      	strb	r4, [r0, r3]
 8008d84:	3301      	adds	r3, #1
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d1fa      	bne.n	8008d80 <memmove+0x1a>
 8008d8a:	e7f8      	b.n	8008d7e <memmove+0x18>

08008d8c <_free_r>:
 8008d8c:	b570      	push	{r4, r5, r6, lr}
 8008d8e:	0005      	movs	r5, r0
 8008d90:	2900      	cmp	r1, #0
 8008d92:	d010      	beq.n	8008db6 <_free_r+0x2a>
 8008d94:	1f0c      	subs	r4, r1, #4
 8008d96:	6823      	ldr	r3, [r4, #0]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	da00      	bge.n	8008d9e <_free_r+0x12>
 8008d9c:	18e4      	adds	r4, r4, r3
 8008d9e:	0028      	movs	r0, r5
 8008da0:	f7ff fcfe 	bl	80087a0 <__malloc_lock>
 8008da4:	4a1d      	ldr	r2, [pc, #116]	; (8008e1c <_free_r+0x90>)
 8008da6:	6813      	ldr	r3, [r2, #0]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d105      	bne.n	8008db8 <_free_r+0x2c>
 8008dac:	6063      	str	r3, [r4, #4]
 8008dae:	6014      	str	r4, [r2, #0]
 8008db0:	0028      	movs	r0, r5
 8008db2:	f7ff fcf6 	bl	80087a2 <__malloc_unlock>
 8008db6:	bd70      	pop	{r4, r5, r6, pc}
 8008db8:	42a3      	cmp	r3, r4
 8008dba:	d909      	bls.n	8008dd0 <_free_r+0x44>
 8008dbc:	6821      	ldr	r1, [r4, #0]
 8008dbe:	1860      	adds	r0, r4, r1
 8008dc0:	4283      	cmp	r3, r0
 8008dc2:	d1f3      	bne.n	8008dac <_free_r+0x20>
 8008dc4:	6818      	ldr	r0, [r3, #0]
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	1841      	adds	r1, r0, r1
 8008dca:	6021      	str	r1, [r4, #0]
 8008dcc:	e7ee      	b.n	8008dac <_free_r+0x20>
 8008dce:	0013      	movs	r3, r2
 8008dd0:	685a      	ldr	r2, [r3, #4]
 8008dd2:	2a00      	cmp	r2, #0
 8008dd4:	d001      	beq.n	8008dda <_free_r+0x4e>
 8008dd6:	42a2      	cmp	r2, r4
 8008dd8:	d9f9      	bls.n	8008dce <_free_r+0x42>
 8008dda:	6819      	ldr	r1, [r3, #0]
 8008ddc:	1858      	adds	r0, r3, r1
 8008dde:	42a0      	cmp	r0, r4
 8008de0:	d10b      	bne.n	8008dfa <_free_r+0x6e>
 8008de2:	6820      	ldr	r0, [r4, #0]
 8008de4:	1809      	adds	r1, r1, r0
 8008de6:	1858      	adds	r0, r3, r1
 8008de8:	6019      	str	r1, [r3, #0]
 8008dea:	4282      	cmp	r2, r0
 8008dec:	d1e0      	bne.n	8008db0 <_free_r+0x24>
 8008dee:	6810      	ldr	r0, [r2, #0]
 8008df0:	6852      	ldr	r2, [r2, #4]
 8008df2:	1841      	adds	r1, r0, r1
 8008df4:	6019      	str	r1, [r3, #0]
 8008df6:	605a      	str	r2, [r3, #4]
 8008df8:	e7da      	b.n	8008db0 <_free_r+0x24>
 8008dfa:	42a0      	cmp	r0, r4
 8008dfc:	d902      	bls.n	8008e04 <_free_r+0x78>
 8008dfe:	230c      	movs	r3, #12
 8008e00:	602b      	str	r3, [r5, #0]
 8008e02:	e7d5      	b.n	8008db0 <_free_r+0x24>
 8008e04:	6821      	ldr	r1, [r4, #0]
 8008e06:	1860      	adds	r0, r4, r1
 8008e08:	4282      	cmp	r2, r0
 8008e0a:	d103      	bne.n	8008e14 <_free_r+0x88>
 8008e0c:	6810      	ldr	r0, [r2, #0]
 8008e0e:	6852      	ldr	r2, [r2, #4]
 8008e10:	1841      	adds	r1, r0, r1
 8008e12:	6021      	str	r1, [r4, #0]
 8008e14:	6062      	str	r2, [r4, #4]
 8008e16:	605c      	str	r4, [r3, #4]
 8008e18:	e7ca      	b.n	8008db0 <_free_r+0x24>
 8008e1a:	46c0      	nop			; (mov r8, r8)
 8008e1c:	20000130 	.word	0x20000130

08008e20 <_realloc_r>:
 8008e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e22:	0007      	movs	r7, r0
 8008e24:	000d      	movs	r5, r1
 8008e26:	0016      	movs	r6, r2
 8008e28:	2900      	cmp	r1, #0
 8008e2a:	d105      	bne.n	8008e38 <_realloc_r+0x18>
 8008e2c:	0011      	movs	r1, r2
 8008e2e:	f7ff fc27 	bl	8008680 <_malloc_r>
 8008e32:	0004      	movs	r4, r0
 8008e34:	0020      	movs	r0, r4
 8008e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e38:	2a00      	cmp	r2, #0
 8008e3a:	d103      	bne.n	8008e44 <_realloc_r+0x24>
 8008e3c:	f7ff ffa6 	bl	8008d8c <_free_r>
 8008e40:	0034      	movs	r4, r6
 8008e42:	e7f7      	b.n	8008e34 <_realloc_r+0x14>
 8008e44:	f000 f812 	bl	8008e6c <_malloc_usable_size_r>
 8008e48:	002c      	movs	r4, r5
 8008e4a:	42b0      	cmp	r0, r6
 8008e4c:	d2f2      	bcs.n	8008e34 <_realloc_r+0x14>
 8008e4e:	0031      	movs	r1, r6
 8008e50:	0038      	movs	r0, r7
 8008e52:	f7ff fc15 	bl	8008680 <_malloc_r>
 8008e56:	1e04      	subs	r4, r0, #0
 8008e58:	d0ec      	beq.n	8008e34 <_realloc_r+0x14>
 8008e5a:	0029      	movs	r1, r5
 8008e5c:	0032      	movs	r2, r6
 8008e5e:	f7ff fbef 	bl	8008640 <memcpy>
 8008e62:	0029      	movs	r1, r5
 8008e64:	0038      	movs	r0, r7
 8008e66:	f7ff ff91 	bl	8008d8c <_free_r>
 8008e6a:	e7e3      	b.n	8008e34 <_realloc_r+0x14>

08008e6c <_malloc_usable_size_r>:
 8008e6c:	1f0b      	subs	r3, r1, #4
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	1f18      	subs	r0, r3, #4
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	da01      	bge.n	8008e7a <_malloc_usable_size_r+0xe>
 8008e76:	580b      	ldr	r3, [r1, r0]
 8008e78:	18c0      	adds	r0, r0, r3
 8008e7a:	4770      	bx	lr

08008e7c <_init>:
 8008e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e7e:	46c0      	nop			; (mov r8, r8)
 8008e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e82:	bc08      	pop	{r3}
 8008e84:	469e      	mov	lr, r3
 8008e86:	4770      	bx	lr

08008e88 <_fini>:
 8008e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e8a:	46c0      	nop			; (mov r8, r8)
 8008e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e8e:	bc08      	pop	{r3}
 8008e90:	469e      	mov	lr, r3
 8008e92:	4770      	bx	lr
