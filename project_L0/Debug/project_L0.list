
project_L0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e6c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08002f2c  08002f2c  00012f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fbc  08002fbc  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08002fbc  08002fbc  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fbc  08002fbc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fbc  08002fbc  00012fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fc0  08002fc0  00012fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08002fc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  20000004  08002fc8  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08002fc8  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008858  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001865  00000000  00000000  00028884  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000818  00000000  00000000  0002a0f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000740  00000000  00000000  0002a908  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013a18  00000000  00000000  0002b048  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007788  00000000  00000000  0003ea60  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00078ee2  00000000  00000000  000461e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bf0ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bec  00000000  00000000  000bf148  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002f14 	.word	0x08002f14

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08002f14 	.word	0x08002f14

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <SPI_CS_LOW>:
// code ripped from Adafruit library

#include "TFT_display.h"

void SPI_CS_LOW() {HAL_GPIO_WritePin(CS_GPIO, CS_PIN, GPIO_PIN_RESET);}
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
 80003f8:	4b04      	ldr	r3, [pc, #16]	; (800040c <SPI_CS_LOW+0x18>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	2180      	movs	r1, #128	; 0x80
 80003fe:	0018      	movs	r0, r3
 8000400:	f001 fc06 	bl	8001c10 <HAL_GPIO_WritePin>
 8000404:	46c0      	nop			; (mov r8, r8)
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	50000800 	.word	0x50000800

08000410 <SPI_CS_HIGH>:

void SPI_CS_HIGH() {HAL_GPIO_WritePin(CS_GPIO, CS_PIN, GPIO_PIN_SET);}
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
 8000414:	4b04      	ldr	r3, [pc, #16]	; (8000428 <SPI_CS_HIGH+0x18>)
 8000416:	2201      	movs	r2, #1
 8000418:	2180      	movs	r1, #128	; 0x80
 800041a:	0018      	movs	r0, r3
 800041c:	f001 fbf8 	bl	8001c10 <HAL_GPIO_WritePin>
 8000420:	46c0      	nop			; (mov r8, r8)
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	50000800 	.word	0x50000800

0800042c <SPI_DC_LOW>:

void SPI_DC_LOW() {HAL_GPIO_WritePin(DC_GPIO, DC_PIN, GPIO_PIN_RESET);}
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
 8000430:	4b04      	ldr	r3, [pc, #16]	; (8000444 <SPI_DC_LOW+0x18>)
 8000432:	2200      	movs	r2, #0
 8000434:	2140      	movs	r1, #64	; 0x40
 8000436:	0018      	movs	r0, r3
 8000438:	f001 fbea 	bl	8001c10 <HAL_GPIO_WritePin>
 800043c:	46c0      	nop			; (mov r8, r8)
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	50000400 	.word	0x50000400

08000448 <SPI_DC_HIGH>:

void SPI_DC_HIGH() {HAL_GPIO_WritePin(DC_GPIO, DC_PIN, GPIO_PIN_SET);}
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
 800044c:	4b04      	ldr	r3, [pc, #16]	; (8000460 <SPI_DC_HIGH+0x18>)
 800044e:	2201      	movs	r2, #1
 8000450:	2140      	movs	r1, #64	; 0x40
 8000452:	0018      	movs	r0, r3
 8000454:	f001 fbdc 	bl	8001c10 <HAL_GPIO_WritePin>
 8000458:	46c0      	nop			; (mov r8, r8)
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	46c0      	nop			; (mov r8, r8)
 8000460:	50000400 	.word	0x50000400

08000464 <sendCommand>:

// still ripped but now im changing it
void sendCommand(uint8_t cmd, uint8_t *args, uint16_t numArgs, SPI_HandleTypeDef *hspi) {
 8000464:	b5b0      	push	{r4, r5, r7, lr}
 8000466:	b084      	sub	sp, #16
 8000468:	af00      	add	r7, sp, #0
 800046a:	60b9      	str	r1, [r7, #8]
 800046c:	0011      	movs	r1, r2
 800046e:	607b      	str	r3, [r7, #4]
 8000470:	240f      	movs	r4, #15
 8000472:	193b      	adds	r3, r7, r4
 8000474:	1c02      	adds	r2, r0, #0
 8000476:	701a      	strb	r2, [r3, #0]
 8000478:	250c      	movs	r5, #12
 800047a:	197b      	adds	r3, r7, r5
 800047c:	1c0a      	adds	r2, r1, #0
 800047e:	801a      	strh	r2, [r3, #0]
	SPI_CS_LOW();	// chip select
 8000480:	f7ff ffb8 	bl	80003f4 <SPI_CS_LOW>

	SPI_DC_LOW();	// command mode
 8000484:	f7ff ffd2 	bl	800042c <SPI_DC_LOW>
	HAL_SPI_Transmit(hspi, &cmd, 1, 1000);
 8000488:	23fa      	movs	r3, #250	; 0xfa
 800048a:	009b      	lsls	r3, r3, #2
 800048c:	1939      	adds	r1, r7, r4
 800048e:	6878      	ldr	r0, [r7, #4]
 8000490:	2201      	movs	r2, #1
 8000492:	f002 f9f1 	bl	8002878 <HAL_SPI_Transmit>

	SPI_DC_HIGH();	// data mode
 8000496:	f7ff ffd7 	bl	8000448 <SPI_DC_HIGH>
	if (numArgs) {
 800049a:	197b      	adds	r3, r7, r5
 800049c:	881b      	ldrh	r3, [r3, #0]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d009      	beq.n	80004b6 <sendCommand+0x52>
		HAL_SPI_Transmit(hspi, args, numArgs, 1000);
 80004a2:	23fa      	movs	r3, #250	; 0xfa
 80004a4:	009c      	lsls	r4, r3, #2
 80004a6:	230c      	movs	r3, #12
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	881a      	ldrh	r2, [r3, #0]
 80004ac:	68b9      	ldr	r1, [r7, #8]
 80004ae:	6878      	ldr	r0, [r7, #4]
 80004b0:	0023      	movs	r3, r4
 80004b2:	f002 f9e1 	bl	8002878 <HAL_SPI_Transmit>
	}

	SPI_CS_HIGH();	// chip select disable
 80004b6:	f7ff ffab 	bl	8000410 <SPI_CS_HIGH>
}
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	46bd      	mov	sp, r7
 80004be:	b004      	add	sp, #16
 80004c0:	bdb0      	pop	{r4, r5, r7, pc}

080004c2 <displayInit>:

// array parser heavily based on Adafruit library code
void displayInit(uint8_t *args, SPI_HandleTypeDef *hspi) {
 80004c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004c4:	b085      	sub	sp, #20
 80004c6:	af00      	add	r7, sp, #0
 80004c8:	6078      	str	r0, [r7, #4]
 80004ca:	6039      	str	r1, [r7, #0]
	uint8_t  numCommands, cmd, numArgs;
	uint16_t ms;
	uint8_t index = 0;
 80004cc:	220b      	movs	r2, #11
 80004ce:	0011      	movs	r1, r2
 80004d0:	18bb      	adds	r3, r7, r2
 80004d2:	2200      	movs	r2, #0
 80004d4:	701a      	strb	r2, [r3, #0]
	uint8_t data;

	numCommands = args[index++];   // Number of commands to follow
 80004d6:	000a      	movs	r2, r1
 80004d8:	18bb      	adds	r3, r7, r2
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	18ba      	adds	r2, r7, r2
 80004de:	1c59      	adds	r1, r3, #1
 80004e0:	7011      	strb	r1, [r2, #0]
 80004e2:	001a      	movs	r2, r3
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	189a      	adds	r2, r3, r2
 80004e8:	230f      	movs	r3, #15
 80004ea:	18fb      	adds	r3, r7, r3
 80004ec:	7812      	ldrb	r2, [r2, #0]
 80004ee:	701a      	strb	r2, [r3, #0]
	while(numCommands--) {                 // For each command...
 80004f0:	e05e      	b.n	80005b0 <displayInit+0xee>
		cmd = args[index++];         // Read command
 80004f2:	200b      	movs	r0, #11
 80004f4:	183b      	adds	r3, r7, r0
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	183a      	adds	r2, r7, r0
 80004fa:	1c59      	adds	r1, r3, #1
 80004fc:	7011      	strb	r1, [r2, #0]
 80004fe:	001a      	movs	r2, r3
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	189a      	adds	r2, r3, r2
 8000504:	230a      	movs	r3, #10
 8000506:	18fb      	adds	r3, r7, r3
 8000508:	7812      	ldrb	r2, [r2, #0]
 800050a:	701a      	strb	r2, [r3, #0]
		numArgs  = args[index++];    // Number of args to follow
 800050c:	183b      	adds	r3, r7, r0
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	183a      	adds	r2, r7, r0
 8000512:	1c59      	adds	r1, r3, #1
 8000514:	7011      	strb	r1, [r2, #0]
 8000516:	001a      	movs	r2, r3
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	189a      	adds	r2, r3, r2
 800051c:	2609      	movs	r6, #9
 800051e:	19bb      	adds	r3, r7, r6
 8000520:	7812      	ldrb	r2, [r2, #0]
 8000522:	701a      	strb	r2, [r3, #0]
		ms       = numArgs & ST_CMD_DELAY;   // If hibit set, delay follows args
 8000524:	19bb      	adds	r3, r7, r6
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	b29a      	uxth	r2, r3
 800052a:	210c      	movs	r1, #12
 800052c:	187b      	adds	r3, r7, r1
 800052e:	2180      	movs	r1, #128	; 0x80
 8000530:	400a      	ands	r2, r1
 8000532:	801a      	strh	r2, [r3, #0]
		numArgs &= ~ST_CMD_DELAY;            // Mask out delay bit
 8000534:	19bb      	adds	r3, r7, r6
 8000536:	19ba      	adds	r2, r7, r6
 8000538:	7812      	ldrb	r2, [r2, #0]
 800053a:	217f      	movs	r1, #127	; 0x7f
 800053c:	400a      	ands	r2, r1
 800053e:	701a      	strb	r2, [r3, #0]
		sendCommand(cmd, &args[index], numArgs, hspi);
 8000540:	0005      	movs	r5, r0
 8000542:	183b      	adds	r3, r7, r0
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	687a      	ldr	r2, [r7, #4]
 8000548:	18d1      	adds	r1, r2, r3
 800054a:	19bb      	adds	r3, r7, r6
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	b29a      	uxth	r2, r3
 8000550:	683c      	ldr	r4, [r7, #0]
 8000552:	230a      	movs	r3, #10
 8000554:	18fb      	adds	r3, r7, r3
 8000556:	7818      	ldrb	r0, [r3, #0]
 8000558:	0023      	movs	r3, r4
 800055a:	f7ff ff83 	bl	8000464 <sendCommand>
		index += numArgs;
 800055e:	0028      	movs	r0, r5
 8000560:	183b      	adds	r3, r7, r0
 8000562:	1839      	adds	r1, r7, r0
 8000564:	19ba      	adds	r2, r7, r6
 8000566:	7809      	ldrb	r1, [r1, #0]
 8000568:	7812      	ldrb	r2, [r2, #0]
 800056a:	188a      	adds	r2, r1, r2
 800056c:	701a      	strb	r2, [r3, #0]

		if(ms) {
 800056e:	210c      	movs	r1, #12
 8000570:	187b      	adds	r3, r7, r1
 8000572:	881b      	ldrh	r3, [r3, #0]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d01b      	beq.n	80005b0 <displayInit+0xee>
			ms = args[index++]; // Read post-command delay time (ms)
 8000578:	220b      	movs	r2, #11
 800057a:	18bb      	adds	r3, r7, r2
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	18ba      	adds	r2, r7, r2
 8000580:	1c59      	adds	r1, r3, #1
 8000582:	7011      	strb	r1, [r2, #0]
 8000584:	001a      	movs	r2, r3
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	189b      	adds	r3, r3, r2
 800058a:	781a      	ldrb	r2, [r3, #0]
 800058c:	210c      	movs	r1, #12
 800058e:	187b      	adds	r3, r7, r1
 8000590:	801a      	strh	r2, [r3, #0]
			if(ms == 255) ms = 500;     // If 255, delay for 500 ms
 8000592:	187b      	adds	r3, r7, r1
 8000594:	881b      	ldrh	r3, [r3, #0]
 8000596:	2bff      	cmp	r3, #255	; 0xff
 8000598:	d104      	bne.n	80005a4 <displayInit+0xe2>
 800059a:	230c      	movs	r3, #12
 800059c:	18fb      	adds	r3, r7, r3
 800059e:	22fa      	movs	r2, #250	; 0xfa
 80005a0:	0052      	lsls	r2, r2, #1
 80005a2:	801a      	strh	r2, [r3, #0]
			HAL_Delay(ms);
 80005a4:	230c      	movs	r3, #12
 80005a6:	18fb      	adds	r3, r7, r3
 80005a8:	881b      	ldrh	r3, [r3, #0]
 80005aa:	0018      	movs	r0, r3
 80005ac:	f000 fe40 	bl	8001230 <HAL_Delay>
	while(numCommands--) {                 // For each command...
 80005b0:	220f      	movs	r2, #15
 80005b2:	18bb      	adds	r3, r7, r2
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	18ba      	adds	r2, r7, r2
 80005b8:	1e59      	subs	r1, r3, #1
 80005ba:	7011      	strb	r1, [r2, #0]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d198      	bne.n	80004f2 <displayInit+0x30>
		}
	}

	// note: this line may be doing more work than I think
	// (hard to read in datasheet)
	data = 0xC0;
 80005c0:	2108      	movs	r1, #8
 80005c2:	187b      	adds	r3, r7, r1
 80005c4:	22c0      	movs	r2, #192	; 0xc0
 80005c6:	701a      	strb	r2, [r3, #0]
	sendCommand(ST77XX_MADCTL, &data, 1, hspi);
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	1879      	adds	r1, r7, r1
 80005cc:	2201      	movs	r2, #1
 80005ce:	2036      	movs	r0, #54	; 0x36
 80005d0:	f7ff ff48 	bl	8000464 <sendCommand>
}
 80005d4:	46c0      	nop			; (mov r8, r8)
 80005d6:	46bd      	mov	sp, r7
 80005d8:	b005      	add	sp, #20
 80005da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005dc <TFT_startup>:

void TFT_startup(SPI_HandleTypeDef *hspi) {
 80005dc:	b590      	push	{r4, r7, lr}
 80005de:	b0a3      	sub	sp, #140	; 0x8c
 80005e0:	af02      	add	r7, sp, #8
 80005e2:	6078      	str	r0, [r7, #4]
	// startup sequence: rcmd1->rcmd2red->rcmd3
	uint8_t initCommands[] = {
 80005e4:	240c      	movs	r4, #12
 80005e6:	193a      	adds	r2, r7, r4
 80005e8:	4b0c      	ldr	r3, [pc, #48]	; (800061c <TFT_startup+0x40>)
 80005ea:	0010      	movs	r0, r2
 80005ec:	0019      	movs	r1, r3
 80005ee:	2371      	movs	r3, #113	; 0x71
 80005f0:	001a      	movs	r2, r3
 80005f2:	f002 fc7d 	bl	8002ef0 <memcpy>
			10,                           //     10 ms delay
		ST77XX_DISPON,    ST_CMD_DELAY, //  4: Main screen turn on, no args w/delay
			100	                        //     100 ms delay
	};

	displayInit(initCommands, hspi);
 80005f6:	687a      	ldr	r2, [r7, #4]
 80005f8:	193b      	adds	r3, r7, r4
 80005fa:	0011      	movs	r1, r2
 80005fc:	0018      	movs	r0, r3
 80005fe:	f7ff ff60 	bl	80004c2 <displayInit>
	setAddrWindow(0, 0, WIDTH, HEIGHT, hspi);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	23a0      	movs	r3, #160	; 0xa0
 8000608:	2280      	movs	r2, #128	; 0x80
 800060a:	2100      	movs	r1, #0
 800060c:	2000      	movs	r0, #0
 800060e:	f000 f807 	bl	8000620 <setAddrWindow>
}
 8000612:	46c0      	nop			; (mov r8, r8)
 8000614:	46bd      	mov	sp, r7
 8000616:	b021      	add	sp, #132	; 0x84
 8000618:	bd90      	pop	{r4, r7, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	08002f2c 	.word	0x08002f2c

08000620 <setAddrWindow>:

// draw something: set addr window -> write to ram memory
// sets specific area on display to write pixels to
// x and y for upper left corner, w for width, h for height
void setAddrWindow(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SPI_HandleTypeDef *hspi) {
 8000620:	b5b0      	push	{r4, r5, r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	0005      	movs	r5, r0
 8000628:	000c      	movs	r4, r1
 800062a:	0010      	movs	r0, r2
 800062c:	0019      	movs	r1, r3
 800062e:	1dbb      	adds	r3, r7, #6
 8000630:	1c2a      	adds	r2, r5, #0
 8000632:	801a      	strh	r2, [r3, #0]
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	1c22      	adds	r2, r4, #0
 8000638:	801a      	strh	r2, [r3, #0]
 800063a:	1cbb      	adds	r3, r7, #2
 800063c:	1c02      	adds	r2, r0, #0
 800063e:	801a      	strh	r2, [r3, #0]
 8000640:	003b      	movs	r3, r7
 8000642:	1c0a      	adds	r2, r1, #0
 8000644:	801a      	strh	r2, [r3, #0]
	// not really needed for our display
	x += _xstart;
 8000646:	1dbb      	adds	r3, r7, #6
 8000648:	1dba      	adds	r2, r7, #6
 800064a:	8812      	ldrh	r2, [r2, #0]
 800064c:	801a      	strh	r2, [r3, #0]
	y += _ystart;
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	1d3a      	adds	r2, r7, #4
 8000652:	8812      	ldrh	r2, [r2, #0]
 8000654:	801a      	strh	r2, [r3, #0]

	uint8_t temp[4];
	temp[0] = (x & (0xFF00)) >> 8;
 8000656:	1dbb      	adds	r3, r7, #6
 8000658:	881b      	ldrh	r3, [r3, #0]
 800065a:	0a1b      	lsrs	r3, r3, #8
 800065c:	b29b      	uxth	r3, r3
 800065e:	b2da      	uxtb	r2, r3
 8000660:	210c      	movs	r1, #12
 8000662:	187b      	adds	r3, r7, r1
 8000664:	701a      	strb	r2, [r3, #0]
	temp[1] = x & (0xFF);
 8000666:	1dbb      	adds	r3, r7, #6
 8000668:	881b      	ldrh	r3, [r3, #0]
 800066a:	b2da      	uxtb	r2, r3
 800066c:	187b      	adds	r3, r7, r1
 800066e:	705a      	strb	r2, [r3, #1]
	temp[2] = ((x+w-1) & (0xFF00)) >> 8;
 8000670:	1dbb      	adds	r3, r7, #6
 8000672:	881a      	ldrh	r2, [r3, #0]
 8000674:	1cbb      	adds	r3, r7, #2
 8000676:	881b      	ldrh	r3, [r3, #0]
 8000678:	18d3      	adds	r3, r2, r3
 800067a:	3b01      	subs	r3, #1
 800067c:	121b      	asrs	r3, r3, #8
 800067e:	b2da      	uxtb	r2, r3
 8000680:	187b      	adds	r3, r7, r1
 8000682:	709a      	strb	r2, [r3, #2]
	temp[3] = (x+w-1) & (0xFF);
 8000684:	1dbb      	adds	r3, r7, #6
 8000686:	881b      	ldrh	r3, [r3, #0]
 8000688:	b2da      	uxtb	r2, r3
 800068a:	1cbb      	adds	r3, r7, #2
 800068c:	881b      	ldrh	r3, [r3, #0]
 800068e:	b2db      	uxtb	r3, r3
 8000690:	18d3      	adds	r3, r2, r3
 8000692:	b2db      	uxtb	r3, r3
 8000694:	3b01      	subs	r3, #1
 8000696:	b2da      	uxtb	r2, r3
 8000698:	187b      	adds	r3, r7, r1
 800069a:	70da      	strb	r2, [r3, #3]
	sendCommand(ST77XX_CASET, temp, 4, hspi);
 800069c:	6a3b      	ldr	r3, [r7, #32]
 800069e:	000c      	movs	r4, r1
 80006a0:	1879      	adds	r1, r7, r1
 80006a2:	2204      	movs	r2, #4
 80006a4:	202a      	movs	r0, #42	; 0x2a
 80006a6:	f7ff fedd 	bl	8000464 <sendCommand>

	temp[0] = (y & (0xFF00)) >> 8;
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	881b      	ldrh	r3, [r3, #0]
 80006ae:	0a1b      	lsrs	r3, r3, #8
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	b2da      	uxtb	r2, r3
 80006b4:	0021      	movs	r1, r4
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	701a      	strb	r2, [r3, #0]
	temp[1] = y & (0xFF);
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	705a      	strb	r2, [r3, #1]
	temp[2] = ((y+h-1) & (0xFF00)) >> 8;
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	881a      	ldrh	r2, [r3, #0]
 80006c8:	003b      	movs	r3, r7
 80006ca:	881b      	ldrh	r3, [r3, #0]
 80006cc:	18d3      	adds	r3, r2, r3
 80006ce:	3b01      	subs	r3, #1
 80006d0:	121b      	asrs	r3, r3, #8
 80006d2:	b2da      	uxtb	r2, r3
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	709a      	strb	r2, [r3, #2]
	temp[3] = (y+h-1) & (0x00FF);
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	881b      	ldrh	r3, [r3, #0]
 80006dc:	b2da      	uxtb	r2, r3
 80006de:	003b      	movs	r3, r7
 80006e0:	881b      	ldrh	r3, [r3, #0]
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	18d3      	adds	r3, r2, r3
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	3b01      	subs	r3, #1
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	70da      	strb	r2, [r3, #3]
	sendCommand(ST77XX_RASET, temp, 4, hspi);
 80006f0:	6a3b      	ldr	r3, [r7, #32]
 80006f2:	1879      	adds	r1, r7, r1
 80006f4:	2204      	movs	r2, #4
 80006f6:	202b      	movs	r0, #43	; 0x2b
 80006f8:	f7ff feb4 	bl	8000464 <sendCommand>
}
 80006fc:	46c0      	nop			; (mov r8, r8)
 80006fe:	46bd      	mov	sp, r7
 8000700:	b004      	add	sp, #16
 8000702:	bdb0      	pop	{r4, r5, r7, pc}

08000704 <colorFixer>:
// 8-bit spi bus wants msb first; in array, lowest index is sent first
// because L4 is little-endian
//   for 16-bit value, it sends lower byte before upper byte
//   resulting in device thinking lower byte is upper byte
// this switches byte order around
uint16_t colorFixer(uint16_t color) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	0002      	movs	r2, r0
 800070c:	1dbb      	adds	r3, r7, #6
 800070e:	801a      	strh	r2, [r3, #0]
	uint8_t a = color & 0xFF;
 8000710:	210f      	movs	r1, #15
 8000712:	187b      	adds	r3, r7, r1
 8000714:	1dba      	adds	r2, r7, #6
 8000716:	8812      	ldrh	r2, [r2, #0]
 8000718:	701a      	strb	r2, [r3, #0]
	uint8_t b = (color & 0xFF00) >> 8;
 800071a:	1dbb      	adds	r3, r7, #6
 800071c:	881b      	ldrh	r3, [r3, #0]
 800071e:	0a1b      	lsrs	r3, r3, #8
 8000720:	b29a      	uxth	r2, r3
 8000722:	200e      	movs	r0, #14
 8000724:	183b      	adds	r3, r7, r0
 8000726:	701a      	strb	r2, [r3, #0]
	uint16_t ret = (a << 8) | b;
 8000728:	187b      	adds	r3, r7, r1
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	021b      	lsls	r3, r3, #8
 800072e:	b21a      	sxth	r2, r3
 8000730:	183b      	adds	r3, r7, r0
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	b21b      	sxth	r3, r3
 8000736:	4313      	orrs	r3, r2
 8000738:	b21a      	sxth	r2, r3
 800073a:	210c      	movs	r1, #12
 800073c:	187b      	adds	r3, r7, r1
 800073e:	801a      	strh	r2, [r3, #0]

	return ret;
 8000740:	187b      	adds	r3, r7, r1
 8000742:	881b      	ldrh	r3, [r3, #0]
}
 8000744:	0018      	movs	r0, r3
 8000746:	46bd      	mov	sp, r7
 8000748:	b004      	add	sp, #16
 800074a:	bd80      	pop	{r7, pc}

0800074c <drawHLine>:
	setAddrWindow(x, y, 1, 1, hspi);
	uint16_t tempColor = colorFixer(color);		// else we're using address of something passed by value
	sendCommand(ST77XX_RAMWR, &tempColor, 2, hspi);
}

void drawHLine(uint8_t x, uint8_t y, uint8_t size, uint16_t color, SPI_HandleTypeDef *hspi) {
 800074c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800074e:	b091      	sub	sp, #68	; 0x44
 8000750:	af02      	add	r7, sp, #8
 8000752:	000c      	movs	r4, r1
 8000754:	0016      	movs	r6, r2
 8000756:	0019      	movs	r1, r3
 8000758:	2327      	movs	r3, #39	; 0x27
 800075a:	18fa      	adds	r2, r7, r3
 800075c:	1c03      	adds	r3, r0, #0
 800075e:	7013      	strb	r3, [r2, #0]
 8000760:	2326      	movs	r3, #38	; 0x26
 8000762:	18fb      	adds	r3, r7, r3
 8000764:	1c22      	adds	r2, r4, #0
 8000766:	701a      	strb	r2, [r3, #0]
 8000768:	2325      	movs	r3, #37	; 0x25
 800076a:	18fb      	adds	r3, r7, r3
 800076c:	1c32      	adds	r2, r6, #0
 800076e:	701a      	strb	r2, [r3, #0]
 8000770:	2322      	movs	r3, #34	; 0x22
 8000772:	18fb      	adds	r3, r7, r3
 8000774:	1c0a      	adds	r2, r1, #0
 8000776:	801a      	strh	r2, [r3, #0]
 8000778:	466b      	mov	r3, sp
 800077a:	001e      	movs	r6, r3
	// bounds checking
	if (x < 0) x = 0;						// don't set x out of bounds
	if (x > WIDTH) x = WIDTH;
 800077c:	2327      	movs	r3, #39	; 0x27
 800077e:	18fb      	adds	r3, r7, r3
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	2b80      	cmp	r3, #128	; 0x80
 8000784:	d903      	bls.n	800078e <drawHLine+0x42>
 8000786:	2327      	movs	r3, #39	; 0x27
 8000788:	18fb      	adds	r3, r7, r3
 800078a:	2280      	movs	r2, #128	; 0x80
 800078c:	701a      	strb	r2, [r3, #0]
	if (x+size > WIDTH) size = WIDTH-x;		// don't set size so line draws out of bounds
 800078e:	2327      	movs	r3, #39	; 0x27
 8000790:	18fb      	adds	r3, r7, r3
 8000792:	781a      	ldrb	r2, [r3, #0]
 8000794:	2325      	movs	r3, #37	; 0x25
 8000796:	18fb      	adds	r3, r7, r3
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	18d3      	adds	r3, r2, r3
 800079c:	2b80      	cmp	r3, #128	; 0x80
 800079e:	dd08      	ble.n	80007b2 <drawHLine+0x66>
 80007a0:	2325      	movs	r3, #37	; 0x25
 80007a2:	18fb      	adds	r3, r7, r3
 80007a4:	2227      	movs	r2, #39	; 0x27
 80007a6:	18ba      	adds	r2, r7, r2
 80007a8:	7812      	ldrb	r2, [r2, #0]
 80007aa:	2180      	movs	r1, #128	; 0x80
 80007ac:	4249      	negs	r1, r1
 80007ae:	1a8a      	subs	r2, r1, r2
 80007b0:	701a      	strb	r2, [r3, #0]
	if (x+size < 0) size = 0-x;
	if ((y > HEIGHT) || (y < 0)) return;	// don't draw if y is out of bounds
 80007b2:	2326      	movs	r3, #38	; 0x26
 80007b4:	18fb      	adds	r3, r7, r3
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2ba0      	cmp	r3, #160	; 0xa0
 80007ba:	d868      	bhi.n	800088e <drawHLine+0x142>

	setAddrWindow(x, y, size, 1, hspi);
 80007bc:	2327      	movs	r3, #39	; 0x27
 80007be:	18fb      	adds	r3, r7, r3
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	b298      	uxth	r0, r3
 80007c4:	2326      	movs	r3, #38	; 0x26
 80007c6:	18fb      	adds	r3, r7, r3
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	b299      	uxth	r1, r3
 80007cc:	2325      	movs	r3, #37	; 0x25
 80007ce:	18fb      	adds	r3, r7, r3
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	b29a      	uxth	r2, r3
 80007d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80007d6:	9300      	str	r3, [sp, #0]
 80007d8:	2301      	movs	r3, #1
 80007da:	f7ff ff21 	bl	8000620 <setAddrWindow>
	uint16_t colors[size];
 80007de:	2325      	movs	r3, #37	; 0x25
 80007e0:	18fb      	adds	r3, r7, r3
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	001a      	movs	r2, r3
 80007e6:	3a01      	subs	r2, #1
 80007e8:	633a      	str	r2, [r7, #48]	; 0x30
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	2200      	movs	r2, #0
 80007ee:	60fa      	str	r2, [r7, #12]
 80007f0:	68b8      	ldr	r0, [r7, #8]
 80007f2:	68f9      	ldr	r1, [r7, #12]
 80007f4:	0002      	movs	r2, r0
 80007f6:	0f12      	lsrs	r2, r2, #28
 80007f8:	000c      	movs	r4, r1
 80007fa:	0124      	lsls	r4, r4, #4
 80007fc:	61fc      	str	r4, [r7, #28]
 80007fe:	69fc      	ldr	r4, [r7, #28]
 8000800:	4314      	orrs	r4, r2
 8000802:	61fc      	str	r4, [r7, #28]
 8000804:	0002      	movs	r2, r0
 8000806:	0112      	lsls	r2, r2, #4
 8000808:	61ba      	str	r2, [r7, #24]
 800080a:	603b      	str	r3, [r7, #0]
 800080c:	2200      	movs	r2, #0
 800080e:	607a      	str	r2, [r7, #4]
 8000810:	6838      	ldr	r0, [r7, #0]
 8000812:	6879      	ldr	r1, [r7, #4]
 8000814:	0002      	movs	r2, r0
 8000816:	0f12      	lsrs	r2, r2, #28
 8000818:	000c      	movs	r4, r1
 800081a:	0124      	lsls	r4, r4, #4
 800081c:	617c      	str	r4, [r7, #20]
 800081e:	697c      	ldr	r4, [r7, #20]
 8000820:	4314      	orrs	r4, r2
 8000822:	617c      	str	r4, [r7, #20]
 8000824:	0002      	movs	r2, r0
 8000826:	0112      	lsls	r2, r2, #4
 8000828:	613a      	str	r2, [r7, #16]
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	3301      	adds	r3, #1
 800082e:	3307      	adds	r3, #7
 8000830:	08db      	lsrs	r3, r3, #3
 8000832:	00db      	lsls	r3, r3, #3
 8000834:	466a      	mov	r2, sp
 8000836:	1ad3      	subs	r3, r2, r3
 8000838:	469d      	mov	sp, r3
 800083a:	ab02      	add	r3, sp, #8
 800083c:	3301      	adds	r3, #1
 800083e:	085b      	lsrs	r3, r3, #1
 8000840:	005b      	lsls	r3, r3, #1
 8000842:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i < size; i++) {		// better way to make array of 1 color; SPI without moving address of sent?
 8000844:	2300      	movs	r3, #0
 8000846:	637b      	str	r3, [r7, #52]	; 0x34
 8000848:	e00e      	b.n	8000868 <drawHLine+0x11c>
		colors[i] = colorFixer(color);
 800084a:	2322      	movs	r3, #34	; 0x22
 800084c:	18fb      	adds	r3, r7, r3
 800084e:	881b      	ldrh	r3, [r3, #0]
 8000850:	0018      	movs	r0, r3
 8000852:	f7ff ff57 	bl	8000704 <colorFixer>
 8000856:	0003      	movs	r3, r0
 8000858:	0019      	movs	r1, r3
 800085a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800085c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800085e:	0052      	lsls	r2, r2, #1
 8000860:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < size; i++) {		// better way to make array of 1 color; SPI without moving address of sent?
 8000862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000864:	3301      	adds	r3, #1
 8000866:	637b      	str	r3, [r7, #52]	; 0x34
 8000868:	2325      	movs	r3, #37	; 0x25
 800086a:	18fb      	adds	r3, r7, r3
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000870:	429a      	cmp	r2, r3
 8000872:	dbea      	blt.n	800084a <drawHLine+0xfe>
//		colors[i] = color;
	}

	sendCommand(ST77XX_RAMWR, colors, size*2, hspi);
 8000874:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000876:	2325      	movs	r3, #37	; 0x25
 8000878:	18fb      	adds	r3, r7, r3
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	b29b      	uxth	r3, r3
 800087e:	18db      	adds	r3, r3, r3
 8000880:	b29a      	uxth	r2, r3
 8000882:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000884:	202c      	movs	r0, #44	; 0x2c
 8000886:	f7ff fded 	bl	8000464 <sendCommand>
 800088a:	46b5      	mov	sp, r6
 800088c:	e001      	b.n	8000892 <drawHLine+0x146>
	if ((y > HEIGHT) || (y < 0)) return;	// don't draw if y is out of bounds
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	46b5      	mov	sp, r6
}
 8000892:	46bd      	mov	sp, r7
 8000894:	b00f      	add	sp, #60	; 0x3c
 8000896:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000898 <fillRect>:
	drawHLine(x, y+h-1, w, color, hspi);
	drawVLine(x, y, h, color, hspi);
	drawVLine(x+w-1, y, h, color, hspi);
}

void fillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t color, SPI_HandleTypeDef *hspi) {
 8000898:	b5b0      	push	{r4, r5, r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af02      	add	r7, sp, #8
 800089e:	0005      	movs	r5, r0
 80008a0:	000c      	movs	r4, r1
 80008a2:	0010      	movs	r0, r2
 80008a4:	0019      	movs	r1, r3
 80008a6:	1dfb      	adds	r3, r7, #7
 80008a8:	1c2a      	adds	r2, r5, #0
 80008aa:	701a      	strb	r2, [r3, #0]
 80008ac:	1dbb      	adds	r3, r7, #6
 80008ae:	1c22      	adds	r2, r4, #0
 80008b0:	701a      	strb	r2, [r3, #0]
 80008b2:	1d7b      	adds	r3, r7, #5
 80008b4:	1c02      	adds	r2, r0, #0
 80008b6:	701a      	strb	r2, [r3, #0]
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	1c0a      	adds	r2, r1, #0
 80008bc:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < h; i++) {
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	e014      	b.n	80008ee <fillRect+0x56>
		drawHLine(x, y+i, w, color, hspi);
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	b2da      	uxtb	r2, r3
 80008c8:	1dbb      	adds	r3, r7, #6
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	18d3      	adds	r3, r2, r3
 80008ce:	b2d9      	uxtb	r1, r3
 80008d0:	2320      	movs	r3, #32
 80008d2:	18fb      	adds	r3, r7, r3
 80008d4:	881c      	ldrh	r4, [r3, #0]
 80008d6:	1d7b      	adds	r3, r7, #5
 80008d8:	781a      	ldrb	r2, [r3, #0]
 80008da:	1dfb      	adds	r3, r7, #7
 80008dc:	7818      	ldrb	r0, [r3, #0]
 80008de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e0:	9300      	str	r3, [sp, #0]
 80008e2:	0023      	movs	r3, r4
 80008e4:	f7ff ff32 	bl	800074c <drawHLine>
	for (int i = 0; i < h; i++) {
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	3301      	adds	r3, #1
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	68fa      	ldr	r2, [r7, #12]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	dbe5      	blt.n	80008c4 <fillRect+0x2c>
	}
}
 80008f8:	46c0      	nop			; (mov r8, r8)
 80008fa:	46bd      	mov	sp, r7
 80008fc:	b004      	add	sp, #16
 80008fe:	bdb0      	pop	{r4, r5, r7, pc}

08000900 <fillScreen>:

void fillScreen(uint16_t color, SPI_HandleTypeDef *hspi) {
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af02      	add	r7, sp, #8
 8000906:	0002      	movs	r2, r0
 8000908:	6039      	str	r1, [r7, #0]
 800090a:	1dbb      	adds	r3, r7, #6
 800090c:	801a      	strh	r2, [r3, #0]
	fillRect(0, 0, WIDTH, HEIGHT, color, hspi);
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	9301      	str	r3, [sp, #4]
 8000912:	1dbb      	adds	r3, r7, #6
 8000914:	881b      	ldrh	r3, [r3, #0]
 8000916:	9300      	str	r3, [sp, #0]
 8000918:	23a0      	movs	r3, #160	; 0xa0
 800091a:	2280      	movs	r2, #128	; 0x80
 800091c:	2100      	movs	r1, #0
 800091e:	2000      	movs	r0, #0
 8000920:	f7ff ffba 	bl	8000898 <fillRect>
}
 8000924:	46c0      	nop			; (mov r8, r8)
 8000926:	46bd      	mov	sp, r7
 8000928:	b002      	add	sp, #8
 800092a:	bd80      	pop	{r7, pc}

0800092c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000932:	f000 fc1d 	bl	8001170 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000936:	f000 f829 	bl	800098c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800093a:	f000 f917 	bl	8000b6c <MX_GPIO_Init>
  MX_SPI1_Init();
 800093e:	f000 f8dd 	bl	8000afc <MX_SPI1_Init>
  MX_ADC_Init();
 8000942:	f000 f877 	bl	8000a34 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
	uint16_t bg = ST77XX_BLACK;
 8000946:	1dbb      	adds	r3, r7, #6
 8000948:	2200      	movs	r2, #0
 800094a:	801a      	strh	r2, [r3, #0]
	HAL_Delay(2000);
 800094c:	23fa      	movs	r3, #250	; 0xfa
 800094e:	00db      	lsls	r3, r3, #3
 8000950:	0018      	movs	r0, r3
 8000952:	f000 fc6d 	bl	8001230 <HAL_Delay>
	TFT_startup(&hspi1);
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <main+0x58>)
 8000958:	0018      	movs	r0, r3
 800095a:	f7ff fe3f 	bl	80005dc <TFT_startup>
	fillScreen(bg, &hspi1);
 800095e:	4a09      	ldr	r2, [pc, #36]	; (8000984 <main+0x58>)
 8000960:	1dbb      	adds	r3, r7, #6
 8000962:	881b      	ldrh	r3, [r3, #0]
 8000964:	0011      	movs	r1, r2
 8000966:	0018      	movs	r0, r3
 8000968:	f7ff ffca 	bl	8000900 <fillScreen>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <main+0x5c>)
 800096e:	2102      	movs	r1, #2
 8000970:	0018      	movs	r0, r3
 8000972:	f001 f96a 	bl	8001c4a <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000976:	23fa      	movs	r3, #250	; 0xfa
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	0018      	movs	r0, r3
 800097c:	f000 fc58 	bl	8001230 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8000980:	e7f4      	b.n	800096c <main+0x40>
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	20000078 	.word	0x20000078
 8000988:	50000400 	.word	0x50000400

0800098c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800098c:	b590      	push	{r4, r7, lr}
 800098e:	b095      	sub	sp, #84	; 0x54
 8000990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000992:	2418      	movs	r4, #24
 8000994:	193b      	adds	r3, r7, r4
 8000996:	0018      	movs	r0, r3
 8000998:	2338      	movs	r3, #56	; 0x38
 800099a:	001a      	movs	r2, r3
 800099c:	2100      	movs	r1, #0
 800099e:	f002 fab0 	bl	8002f02 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	0018      	movs	r0, r3
 80009a6:	2314      	movs	r3, #20
 80009a8:	001a      	movs	r2, r3
 80009aa:	2100      	movs	r1, #0
 80009ac:	f002 faa9 	bl	8002f02 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009b0:	4b1e      	ldr	r3, [pc, #120]	; (8000a2c <SystemClock_Config+0xa0>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a1e      	ldr	r2, [pc, #120]	; (8000a30 <SystemClock_Config+0xa4>)
 80009b6:	401a      	ands	r2, r3
 80009b8:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <SystemClock_Config+0xa0>)
 80009ba:	2180      	movs	r1, #128	; 0x80
 80009bc:	0109      	lsls	r1, r1, #4
 80009be:	430a      	orrs	r2, r1
 80009c0:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80009c2:	0021      	movs	r1, r4
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	2210      	movs	r2, #16
 80009c8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	2201      	movs	r2, #1
 80009ce:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80009d0:	187b      	adds	r3, r7, r1
 80009d2:	2200      	movs	r2, #0
 80009d4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80009d6:	187b      	adds	r3, r7, r1
 80009d8:	22a0      	movs	r2, #160	; 0xa0
 80009da:	0212      	lsls	r2, r2, #8
 80009dc:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009de:	187b      	adds	r3, r7, r1
 80009e0:	2200      	movs	r2, #0
 80009e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e4:	187b      	adds	r3, r7, r1
 80009e6:	0018      	movs	r0, r3
 80009e8:	f001 f95e 	bl	8001ca8 <HAL_RCC_OscConfig>
 80009ec:	1e03      	subs	r3, r0, #0
 80009ee:	d001      	beq.n	80009f4 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80009f0:	f000 f962 	bl	8000cb8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	220f      	movs	r2, #15
 80009f8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	2200      	movs	r2, #0
 80009fe:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	2200      	movs	r2, #0
 8000a0a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	2100      	movs	r1, #0
 8000a16:	0018      	movs	r0, r3
 8000a18:	f001 fd16 	bl	8002448 <HAL_RCC_ClockConfig>
 8000a1c:	1e03      	subs	r3, r0, #0
 8000a1e:	d001      	beq.n	8000a24 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a20:	f000 f94a 	bl	8000cb8 <Error_Handler>
  }
}
 8000a24:	46c0      	nop			; (mov r8, r8)
 8000a26:	46bd      	mov	sp, r7
 8000a28:	b015      	add	sp, #84	; 0x54
 8000a2a:	bd90      	pop	{r4, r7, pc}
 8000a2c:	40007000 	.word	0x40007000
 8000a30:	ffffe7ff 	.word	0xffffe7ff

08000a34 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a3a:	003b      	movs	r3, r7
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	2308      	movs	r3, #8
 8000a40:	001a      	movs	r2, r3
 8000a42:	2100      	movs	r1, #0
 8000a44:	f002 fa5d 	bl	8002f02 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8000a48:	4b2a      	ldr	r3, [pc, #168]	; (8000af4 <MX_ADC_Init+0xc0>)
 8000a4a:	4a2b      	ldr	r2, [pc, #172]	; (8000af8 <MX_ADC_Init+0xc4>)
 8000a4c:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000a4e:	4b29      	ldr	r3, [pc, #164]	; (8000af4 <MX_ADC_Init+0xc0>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000a54:	4b27      	ldr	r3, [pc, #156]	; (8000af4 <MX_ADC_Init+0xc0>)
 8000a56:	22c0      	movs	r2, #192	; 0xc0
 8000a58:	0612      	lsls	r2, r2, #24
 8000a5a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000a5c:	4b25      	ldr	r3, [pc, #148]	; (8000af4 <MX_ADC_Init+0xc0>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a62:	4b24      	ldr	r3, [pc, #144]	; (8000af4 <MX_ADC_Init+0xc0>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000a68:	4b22      	ldr	r3, [pc, #136]	; (8000af4 <MX_ADC_Init+0xc0>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a6e:	4b21      	ldr	r3, [pc, #132]	; (8000af4 <MX_ADC_Init+0xc0>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000a74:	4b1f      	ldr	r3, [pc, #124]	; (8000af4 <MX_ADC_Init+0xc0>)
 8000a76:	2220      	movs	r2, #32
 8000a78:	2100      	movs	r1, #0
 8000a7a:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000a7c:	4b1d      	ldr	r3, [pc, #116]	; (8000af4 <MX_ADC_Init+0xc0>)
 8000a7e:	2221      	movs	r2, #33	; 0x21
 8000a80:	2100      	movs	r1, #0
 8000a82:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a84:	4b1b      	ldr	r3, [pc, #108]	; (8000af4 <MX_ADC_Init+0xc0>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a8a:	4b1a      	ldr	r3, [pc, #104]	; (8000af4 <MX_ADC_Init+0xc0>)
 8000a8c:	22c2      	movs	r2, #194	; 0xc2
 8000a8e:	32ff      	adds	r2, #255	; 0xff
 8000a90:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000a92:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <MX_ADC_Init+0xc0>)
 8000a94:	222c      	movs	r2, #44	; 0x2c
 8000a96:	2100      	movs	r1, #0
 8000a98:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a9a:	4b16      	ldr	r3, [pc, #88]	; (8000af4 <MX_ADC_Init+0xc0>)
 8000a9c:	2204      	movs	r2, #4
 8000a9e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000aa0:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <MX_ADC_Init+0xc0>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000aa6:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <MX_ADC_Init+0xc0>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000aac:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <MX_ADC_Init+0xc0>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000ab2:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <MX_ADC_Init+0xc0>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000ab8:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <MX_ADC_Init+0xc0>)
 8000aba:	0018      	movs	r0, r3
 8000abc:	f000 fbd6 	bl	800126c <HAL_ADC_Init>
 8000ac0:	1e03      	subs	r3, r0, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000ac4:	f000 f8f8 	bl	8000cb8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ac8:	003b      	movs	r3, r7
 8000aca:	2201      	movs	r2, #1
 8000acc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000ace:	003b      	movs	r3, r7
 8000ad0:	2280      	movs	r2, #128	; 0x80
 8000ad2:	0152      	lsls	r2, r2, #5
 8000ad4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ad6:	003a      	movs	r2, r7
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <MX_ADC_Init+0xc0>)
 8000ada:	0011      	movs	r1, r2
 8000adc:	0018      	movs	r0, r3
 8000ade:	f000 fd39 	bl	8001554 <HAL_ADC_ConfigChannel>
 8000ae2:	1e03      	subs	r3, r0, #0
 8000ae4:	d001      	beq.n	8000aea <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000ae6:	f000 f8e7 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	46bd      	mov	sp, r7
 8000aee:	b002      	add	sp, #8
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	200000d0 	.word	0x200000d0
 8000af8:	40012400 	.word	0x40012400

08000afc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b00:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <MX_SPI1_Init+0x68>)
 8000b02:	4a19      	ldr	r2, [pc, #100]	; (8000b68 <MX_SPI1_Init+0x6c>)
 8000b04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b06:	4b17      	ldr	r3, [pc, #92]	; (8000b64 <MX_SPI1_Init+0x68>)
 8000b08:	2282      	movs	r2, #130	; 0x82
 8000b0a:	0052      	lsls	r2, r2, #1
 8000b0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b0e:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <MX_SPI1_Init+0x68>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b14:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <MX_SPI1_Init+0x68>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b1a:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <MX_SPI1_Init+0x68>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b20:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <MX_SPI1_Init+0x68>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b26:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <MX_SPI1_Init+0x68>)
 8000b28:	2280      	movs	r2, #128	; 0x80
 8000b2a:	0092      	lsls	r2, r2, #2
 8000b2c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b2e:	4b0d      	ldr	r3, [pc, #52]	; (8000b64 <MX_SPI1_Init+0x68>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b34:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <MX_SPI1_Init+0x68>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <MX_SPI1_Init+0x68>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <MX_SPI1_Init+0x68>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b46:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <MX_SPI1_Init+0x68>)
 8000b48:	2207      	movs	r2, #7
 8000b4a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b4c:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <MX_SPI1_Init+0x68>)
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f001 fe28 	bl	80027a4 <HAL_SPI_Init>
 8000b54:	1e03      	subs	r3, r0, #0
 8000b56:	d001      	beq.n	8000b5c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b58:	f000 f8ae 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b5c:	46c0      	nop			; (mov r8, r8)
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	20000078 	.word	0x20000078
 8000b68:	40013000 	.word	0x40013000

08000b6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b6c:	b590      	push	{r4, r7, lr}
 8000b6e:	b089      	sub	sp, #36	; 0x24
 8000b70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b72:	240c      	movs	r4, #12
 8000b74:	193b      	adds	r3, r7, r4
 8000b76:	0018      	movs	r0, r3
 8000b78:	2314      	movs	r3, #20
 8000b7a:	001a      	movs	r2, r3
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	f002 f9c0 	bl	8002f02 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b82:	4b47      	ldr	r3, [pc, #284]	; (8000ca0 <MX_GPIO_Init+0x134>)
 8000b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b86:	4b46      	ldr	r3, [pc, #280]	; (8000ca0 <MX_GPIO_Init+0x134>)
 8000b88:	2101      	movs	r1, #1
 8000b8a:	430a      	orrs	r2, r1
 8000b8c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b8e:	4b44      	ldr	r3, [pc, #272]	; (8000ca0 <MX_GPIO_Init+0x134>)
 8000b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b92:	2201      	movs	r2, #1
 8000b94:	4013      	ands	r3, r2
 8000b96:	60bb      	str	r3, [r7, #8]
 8000b98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9a:	4b41      	ldr	r3, [pc, #260]	; (8000ca0 <MX_GPIO_Init+0x134>)
 8000b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b9e:	4b40      	ldr	r3, [pc, #256]	; (8000ca0 <MX_GPIO_Init+0x134>)
 8000ba0:	2102      	movs	r1, #2
 8000ba2:	430a      	orrs	r2, r1
 8000ba4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ba6:	4b3e      	ldr	r3, [pc, #248]	; (8000ca0 <MX_GPIO_Init+0x134>)
 8000ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000baa:	2202      	movs	r2, #2
 8000bac:	4013      	ands	r3, r2
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb2:	4b3b      	ldr	r3, [pc, #236]	; (8000ca0 <MX_GPIO_Init+0x134>)
 8000bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bb6:	4b3a      	ldr	r3, [pc, #232]	; (8000ca0 <MX_GPIO_Init+0x134>)
 8000bb8:	2104      	movs	r1, #4
 8000bba:	430a      	orrs	r2, r1
 8000bbc:	62da      	str	r2, [r3, #44]	; 0x2c
 8000bbe:	4b38      	ldr	r3, [pc, #224]	; (8000ca0 <MX_GPIO_Init+0x134>)
 8000bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bc2:	2204      	movs	r2, #4
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	603b      	str	r3, [r7, #0]
 8000bc8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_6, GPIO_PIN_RESET);
 8000bca:	4b36      	ldr	r3, [pc, #216]	; (8000ca4 <MX_GPIO_Init+0x138>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2142      	movs	r1, #66	; 0x42
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	f001 f81d 	bl	8001c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000bd6:	4b34      	ldr	r3, [pc, #208]	; (8000ca8 <MX_GPIO_Init+0x13c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2180      	movs	r1, #128	; 0x80
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f001 f817 	bl	8001c10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB1 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8000be2:	0021      	movs	r1, r4
 8000be4:	187b      	adds	r3, r7, r1
 8000be6:	2242      	movs	r2, #66	; 0x42
 8000be8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bea:	187b      	adds	r3, r7, r1
 8000bec:	2201      	movs	r2, #1
 8000bee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	187b      	adds	r3, r7, r1
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	187b      	adds	r3, r7, r1
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfc:	000c      	movs	r4, r1
 8000bfe:	187b      	adds	r3, r7, r1
 8000c00:	4a28      	ldr	r2, [pc, #160]	; (8000ca4 <MX_GPIO_Init+0x138>)
 8000c02:	0019      	movs	r1, r3
 8000c04:	0010      	movs	r0, r2
 8000c06:	f000 fe85 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_14;
 8000c0a:	0021      	movs	r1, r4
 8000c0c:	187b      	adds	r3, r7, r1
 8000c0e:	4a27      	ldr	r2, [pc, #156]	; (8000cac <MX_GPIO_Init+0x140>)
 8000c10:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c12:	187b      	adds	r3, r7, r1
 8000c14:	4a26      	ldr	r2, [pc, #152]	; (8000cb0 <MX_GPIO_Init+0x144>)
 8000c16:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c18:	187b      	adds	r3, r7, r1
 8000c1a:	2202      	movs	r2, #2
 8000c1c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1e:	000c      	movs	r4, r1
 8000c20:	187b      	adds	r3, r7, r1
 8000c22:	4a20      	ldr	r2, [pc, #128]	; (8000ca4 <MX_GPIO_Init+0x138>)
 8000c24:	0019      	movs	r1, r3
 8000c26:	0010      	movs	r0, r2
 8000c28:	f000 fe74 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c2c:	0021      	movs	r1, r4
 8000c2e:	187b      	adds	r3, r7, r1
 8000c30:	2280      	movs	r2, #128	; 0x80
 8000c32:	0212      	lsls	r2, r2, #8
 8000c34:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c36:	187b      	adds	r3, r7, r1
 8000c38:	4a1e      	ldr	r2, [pc, #120]	; (8000cb4 <MX_GPIO_Init+0x148>)
 8000c3a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c3c:	187b      	adds	r3, r7, r1
 8000c3e:	2201      	movs	r2, #1
 8000c40:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c42:	000c      	movs	r4, r1
 8000c44:	187b      	adds	r3, r7, r1
 8000c46:	4a17      	ldr	r2, [pc, #92]	; (8000ca4 <MX_GPIO_Init+0x138>)
 8000c48:	0019      	movs	r1, r3
 8000c4a:	0010      	movs	r0, r2
 8000c4c:	f000 fe62 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c50:	0021      	movs	r1, r4
 8000c52:	187b      	adds	r3, r7, r1
 8000c54:	2280      	movs	r2, #128	; 0x80
 8000c56:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c58:	187b      	adds	r3, r7, r1
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	187b      	adds	r3, r7, r1
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c64:	187b      	adds	r3, r7, r1
 8000c66:	2200      	movs	r2, #0
 8000c68:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c6a:	187b      	adds	r3, r7, r1
 8000c6c:	4a0e      	ldr	r2, [pc, #56]	; (8000ca8 <MX_GPIO_Init+0x13c>)
 8000c6e:	0019      	movs	r1, r3
 8000c70:	0010      	movs	r0, r2
 8000c72:	f000 fe4f 	bl	8001914 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2100      	movs	r1, #0
 8000c7a:	2006      	movs	r0, #6
 8000c7c:	f000 fdd0 	bl	8001820 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000c80:	2006      	movs	r0, #6
 8000c82:	f000 fde2 	bl	800184a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000c86:	2200      	movs	r2, #0
 8000c88:	2100      	movs	r1, #0
 8000c8a:	2007      	movs	r0, #7
 8000c8c:	f000 fdc8 	bl	8001820 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000c90:	2007      	movs	r0, #7
 8000c92:	f000 fdda 	bl	800184a <HAL_NVIC_EnableIRQ>

}
 8000c96:	46c0      	nop			; (mov r8, r8)
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	b009      	add	sp, #36	; 0x24
 8000c9c:	bd90      	pop	{r4, r7, pc}
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	50000400 	.word	0x50000400
 8000ca8:	50000800 	.word	0x50000800
 8000cac:	00006004 	.word	0x00006004
 8000cb0:	10110000 	.word	0x10110000
 8000cb4:	10210000 	.word	0x10210000

08000cb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000cbc:	46c0      	nop			; (mov r8, r8)
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
	...

08000cc4 <HAL_GPIO_EXTI_Callback>:
	}
}

// this sure is a big callback
// need to complete
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	0002      	movs	r2, r0
 8000ccc:	1dbb      	adds	r3, r7, #6
 8000cce:	801a      	strh	r2, [r3, #0]
	/* program flow:
	 *   check current face used
	 *   check current variables and check button pressed
	 */
//	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);	// should run for any button
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8000cd0:	4b76      	ldr	r3, [pc, #472]	; (8000eac <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000cd2:	2102      	movs	r1, #2
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	f000 ffb8 	bl	8001c4a <HAL_GPIO_TogglePin>
	if (GPIO_Pin == BUTTON0) {
 8000cda:	1dbb      	adds	r3, r7, #6
 8000cdc:	881b      	ldrh	r3, [r3, #0]
 8000cde:	2b04      	cmp	r3, #4
 8000ce0:	d110      	bne.n	8000d04 <HAL_GPIO_EXTI_Callback+0x40>
		face = (face + 1) % NUM_FACES;
 8000ce2:	4b73      	ldr	r3, [pc, #460]	; (8000eb0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	4a72      	ldr	r2, [pc, #456]	; (8000eb4 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000cea:	4013      	ands	r3, r2
 8000cec:	d504      	bpl.n	8000cf8 <HAL_GPIO_EXTI_Callback+0x34>
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	2204      	movs	r2, #4
 8000cf2:	4252      	negs	r2, r2
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	001a      	movs	r2, r3
 8000cfa:	4b6d      	ldr	r3, [pc, #436]	; (8000eb0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000cfc:	601a      	str	r2, [r3, #0]
		faceChange = 1;
 8000cfe:	4b6e      	ldr	r3, [pc, #440]	; (8000eb8 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	601a      	str	r2, [r3, #0]
	}
	// use RTC
	if (face == faceMain) {
 8000d04:	4b6a      	ldr	r3, [pc, #424]	; (8000eb0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d11d      	bne.n	8000d48 <HAL_GPIO_EXTI_Callback+0x84>
			// change fields up, do nothing if not setting clock
		}
		if (GPIO_Pin == BUTTON2 && clockSet) {
			// change fields down, do nothing if not setting clock
		}
		if (GPIO_Pin == BUTTON3) {
 8000d0c:	1dbb      	adds	r3, r7, #6
 8000d0e:	881a      	ldrh	r2, [r3, #0]
 8000d10:	2380      	movs	r3, #128	; 0x80
 8000d12:	021b      	lsls	r3, r3, #8
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d000      	beq.n	8000d1a <HAL_GPIO_EXTI_Callback+0x56>
 8000d18:	e0c4      	b.n	8000ea4 <HAL_GPIO_EXTI_Callback+0x1e0>
			clockField = (clockField + 1) % (NUM_CLOCKFIELDS + 1);
 8000d1a:	4b68      	ldr	r3, [pc, #416]	; (8000ebc <HAL_GPIO_EXTI_Callback+0x1f8>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	2106      	movs	r1, #6
 8000d22:	0018      	movs	r0, r3
 8000d24:	f7ff fb60 	bl	80003e8 <__aeabi_idivmod>
 8000d28:	000b      	movs	r3, r1
 8000d2a:	001a      	movs	r2, r3
 8000d2c:	4b63      	ldr	r3, [pc, #396]	; (8000ebc <HAL_GPIO_EXTI_Callback+0x1f8>)
 8000d2e:	601a      	str	r2, [r3, #0]
			if (clockField != 0) clockSet = 1;
 8000d30:	4b62      	ldr	r3, [pc, #392]	; (8000ebc <HAL_GPIO_EXTI_Callback+0x1f8>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d003      	beq.n	8000d40 <HAL_GPIO_EXTI_Callback+0x7c>
 8000d38:	4b61      	ldr	r3, [pc, #388]	; (8000ec0 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	601a      	str	r2, [r3, #0]
		if (GPIO_Pin == BUTTON3) {
			// clear stopwatch hw
			stopwatchRunning = 0;
		}
	}
}
 8000d3e:	e0b1      	b.n	8000ea4 <HAL_GPIO_EXTI_Callback+0x1e0>
			else clockSet = 0;
 8000d40:	4b5f      	ldr	r3, [pc, #380]	; (8000ec0 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
}
 8000d46:	e0ad      	b.n	8000ea4 <HAL_GPIO_EXTI_Callback+0x1e0>
	else if (face == faceTimer) {
 8000d48:	4b59      	ldr	r3, [pc, #356]	; (8000eb0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d155      	bne.n	8000dfc <HAL_GPIO_EXTI_Callback+0x138>
		if (timerRunning == 0) {
 8000d50:	4b5c      	ldr	r3, [pc, #368]	; (8000ec4 <HAL_GPIO_EXTI_Callback+0x200>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d130      	bne.n	8000dba <HAL_GPIO_EXTI_Callback+0xf6>
			if (GPIO_Pin == BUTTON1) {
 8000d58:	1dbb      	adds	r3, r7, #6
 8000d5a:	881a      	ldrh	r2, [r3, #0]
 8000d5c:	2380      	movs	r3, #128	; 0x80
 8000d5e:	019b      	lsls	r3, r3, #6
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d106      	bne.n	8000d72 <HAL_GPIO_EXTI_Callback+0xae>
				if (timerSet == 0) timerRunning = 1;
 8000d64:	4b58      	ldr	r3, [pc, #352]	; (8000ec8 <HAL_GPIO_EXTI_Callback+0x204>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d102      	bne.n	8000d72 <HAL_GPIO_EXTI_Callback+0xae>
 8000d6c:	4b55      	ldr	r3, [pc, #340]	; (8000ec4 <HAL_GPIO_EXTI_Callback+0x200>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	601a      	str	r2, [r3, #0]
			if (GPIO_Pin == BUTTON3) {
 8000d72:	1dbb      	adds	r3, r7, #6
 8000d74:	881a      	ldrh	r2, [r3, #0]
 8000d76:	2380      	movs	r3, #128	; 0x80
 8000d78:	021b      	lsls	r3, r3, #8
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	d000      	beq.n	8000d80 <HAL_GPIO_EXTI_Callback+0xbc>
 8000d7e:	e091      	b.n	8000ea4 <HAL_GPIO_EXTI_Callback+0x1e0>
				timerField = (timerField + 1) % (NUM_TIMERFIELDS + 1);
 8000d80:	4b52      	ldr	r3, [pc, #328]	; (8000ecc <HAL_GPIO_EXTI_Callback+0x208>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	3301      	adds	r3, #1
 8000d86:	4a4b      	ldr	r2, [pc, #300]	; (8000eb4 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000d88:	4013      	ands	r3, r2
 8000d8a:	d504      	bpl.n	8000d96 <HAL_GPIO_EXTI_Callback+0xd2>
 8000d8c:	3b01      	subs	r3, #1
 8000d8e:	2204      	movs	r2, #4
 8000d90:	4252      	negs	r2, r2
 8000d92:	4313      	orrs	r3, r2
 8000d94:	3301      	adds	r3, #1
 8000d96:	001a      	movs	r2, r3
 8000d98:	4b4c      	ldr	r3, [pc, #304]	; (8000ecc <HAL_GPIO_EXTI_Callback+0x208>)
 8000d9a:	601a      	str	r2, [r3, #0]
				if (timerField != 0) timerSet = 1;
 8000d9c:	4b4b      	ldr	r3, [pc, #300]	; (8000ecc <HAL_GPIO_EXTI_Callback+0x208>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d003      	beq.n	8000dac <HAL_GPIO_EXTI_Callback+0xe8>
 8000da4:	4b48      	ldr	r3, [pc, #288]	; (8000ec8 <HAL_GPIO_EXTI_Callback+0x204>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	601a      	str	r2, [r3, #0]
}
 8000daa:	e07b      	b.n	8000ea4 <HAL_GPIO_EXTI_Callback+0x1e0>
					timerSet = 0;
 8000dac:	4b46      	ldr	r3, [pc, #280]	; (8000ec8 <HAL_GPIO_EXTI_Callback+0x204>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
					timerRunning = 1;	// careful where this gets set/unset
 8000db2:	4b44      	ldr	r3, [pc, #272]	; (8000ec4 <HAL_GPIO_EXTI_Callback+0x200>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	601a      	str	r2, [r3, #0]
}
 8000db8:	e074      	b.n	8000ea4 <HAL_GPIO_EXTI_Callback+0x1e0>
		else if (timerRunning == 1) {
 8000dba:	4b42      	ldr	r3, [pc, #264]	; (8000ec4 <HAL_GPIO_EXTI_Callback+0x200>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d000      	beq.n	8000dc4 <HAL_GPIO_EXTI_Callback+0x100>
 8000dc2:	e06f      	b.n	8000ea4 <HAL_GPIO_EXTI_Callback+0x1e0>
			if (GPIO_Pin == BUTTON1) {
 8000dc4:	1dbb      	adds	r3, r7, #6
 8000dc6:	881a      	ldrh	r2, [r3, #0]
 8000dc8:	2380      	movs	r3, #128	; 0x80
 8000dca:	019b      	lsls	r3, r3, #6
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d102      	bne.n	8000dd6 <HAL_GPIO_EXTI_Callback+0x112>
				timerRunning = 1;
 8000dd0:	4b3c      	ldr	r3, [pc, #240]	; (8000ec4 <HAL_GPIO_EXTI_Callback+0x200>)
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	601a      	str	r2, [r3, #0]
			if (GPIO_Pin == BUTTON2) {
 8000dd6:	1dbb      	adds	r3, r7, #6
 8000dd8:	881a      	ldrh	r2, [r3, #0]
 8000dda:	2380      	movs	r3, #128	; 0x80
 8000ddc:	01db      	lsls	r3, r3, #7
 8000dde:	429a      	cmp	r2, r3
 8000de0:	d102      	bne.n	8000de8 <HAL_GPIO_EXTI_Callback+0x124>
				timerRunning = 0;
 8000de2:	4b38      	ldr	r3, [pc, #224]	; (8000ec4 <HAL_GPIO_EXTI_Callback+0x200>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
			if (GPIO_Pin == BUTTON3) {
 8000de8:	1dbb      	adds	r3, r7, #6
 8000dea:	881a      	ldrh	r2, [r3, #0]
 8000dec:	2380      	movs	r3, #128	; 0x80
 8000dee:	021b      	lsls	r3, r3, #8
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d157      	bne.n	8000ea4 <HAL_GPIO_EXTI_Callback+0x1e0>
				timerRunning = 0;
 8000df4:	4b33      	ldr	r3, [pc, #204]	; (8000ec4 <HAL_GPIO_EXTI_Callback+0x200>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
}
 8000dfa:	e053      	b.n	8000ea4 <HAL_GPIO_EXTI_Callback+0x1e0>
	else if (face == faceAlarm) {
 8000dfc:	4b2c      	ldr	r3, [pc, #176]	; (8000eb0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d131      	bne.n	8000e68 <HAL_GPIO_EXTI_Callback+0x1a4>
		if (alarmRunning == 0) {
 8000e04:	4b32      	ldr	r3, [pc, #200]	; (8000ed0 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d11f      	bne.n	8000e4c <HAL_GPIO_EXTI_Callback+0x188>
			if (GPIO_Pin == BUTTON3) {
 8000e0c:	1dbb      	adds	r3, r7, #6
 8000e0e:	881a      	ldrh	r2, [r3, #0]
 8000e10:	2380      	movs	r3, #128	; 0x80
 8000e12:	021b      	lsls	r3, r3, #8
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d145      	bne.n	8000ea4 <HAL_GPIO_EXTI_Callback+0x1e0>
				alarmField = (alarmField + 1) % (NUM_ALARMFIELDS + 1);
 8000e18:	4b2e      	ldr	r3, [pc, #184]	; (8000ed4 <HAL_GPIO_EXTI_Callback+0x210>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	2105      	movs	r1, #5
 8000e20:	0018      	movs	r0, r3
 8000e22:	f7ff fae1 	bl	80003e8 <__aeabi_idivmod>
 8000e26:	000b      	movs	r3, r1
 8000e28:	001a      	movs	r2, r3
 8000e2a:	4b2a      	ldr	r3, [pc, #168]	; (8000ed4 <HAL_GPIO_EXTI_Callback+0x210>)
 8000e2c:	601a      	str	r2, [r3, #0]
				if (alarmField != 0) {
 8000e2e:	4b29      	ldr	r3, [pc, #164]	; (8000ed4 <HAL_GPIO_EXTI_Callback+0x210>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d003      	beq.n	8000e3e <HAL_GPIO_EXTI_Callback+0x17a>
					alarmSet = 1;
 8000e36:	4b28      	ldr	r3, [pc, #160]	; (8000ed8 <HAL_GPIO_EXTI_Callback+0x214>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	601a      	str	r2, [r3, #0]
}
 8000e3c:	e032      	b.n	8000ea4 <HAL_GPIO_EXTI_Callback+0x1e0>
					alarmSet = 0;
 8000e3e:	4b26      	ldr	r3, [pc, #152]	; (8000ed8 <HAL_GPIO_EXTI_Callback+0x214>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
					alarmRunning = 1;
 8000e44:	4b22      	ldr	r3, [pc, #136]	; (8000ed0 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	601a      	str	r2, [r3, #0]
}
 8000e4a:	e02b      	b.n	8000ea4 <HAL_GPIO_EXTI_Callback+0x1e0>
		else if (alarmRunning == 1) {
 8000e4c:	4b20      	ldr	r3, [pc, #128]	; (8000ed0 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d127      	bne.n	8000ea4 <HAL_GPIO_EXTI_Callback+0x1e0>
			if (GPIO_Pin == BUTTON3) {
 8000e54:	1dbb      	adds	r3, r7, #6
 8000e56:	881a      	ldrh	r2, [r3, #0]
 8000e58:	2380      	movs	r3, #128	; 0x80
 8000e5a:	021b      	lsls	r3, r3, #8
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d121      	bne.n	8000ea4 <HAL_GPIO_EXTI_Callback+0x1e0>
				alarmRunning = 0;
 8000e60:	4b1b      	ldr	r3, [pc, #108]	; (8000ed0 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
}
 8000e66:	e01d      	b.n	8000ea4 <HAL_GPIO_EXTI_Callback+0x1e0>
	else if (face == faceStopwatch) {
 8000e68:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2b03      	cmp	r3, #3
 8000e6e:	d119      	bne.n	8000ea4 <HAL_GPIO_EXTI_Callback+0x1e0>
		if (GPIO_Pin == BUTTON1) {	// start/stop
 8000e70:	1dbb      	adds	r3, r7, #6
 8000e72:	881a      	ldrh	r2, [r3, #0]
 8000e74:	2380      	movs	r3, #128	; 0x80
 8000e76:	019b      	lsls	r3, r3, #6
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d10a      	bne.n	8000e92 <HAL_GPIO_EXTI_Callback+0x1ce>
			if (stopwatchRunning == 0) stopwatchRunning = 1;
 8000e7c:	4b17      	ldr	r3, [pc, #92]	; (8000edc <HAL_GPIO_EXTI_Callback+0x218>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d103      	bne.n	8000e8c <HAL_GPIO_EXTI_Callback+0x1c8>
 8000e84:	4b15      	ldr	r3, [pc, #84]	; (8000edc <HAL_GPIO_EXTI_Callback+0x218>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	e002      	b.n	8000e92 <HAL_GPIO_EXTI_Callback+0x1ce>
			else stopwatchRunning = 0;
 8000e8c:	4b13      	ldr	r3, [pc, #76]	; (8000edc <HAL_GPIO_EXTI_Callback+0x218>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
		if (GPIO_Pin == BUTTON3) {
 8000e92:	1dbb      	adds	r3, r7, #6
 8000e94:	881a      	ldrh	r2, [r3, #0]
 8000e96:	2380      	movs	r3, #128	; 0x80
 8000e98:	021b      	lsls	r3, r3, #8
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	d102      	bne.n	8000ea4 <HAL_GPIO_EXTI_Callback+0x1e0>
			stopwatchRunning = 0;
 8000e9e:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <HAL_GPIO_EXTI_Callback+0x218>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
}
 8000ea4:	46c0      	nop			; (mov r8, r8)
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	b002      	add	sp, #8
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	50000400 	.word	0x50000400
 8000eb0:	20000020 	.word	0x20000020
 8000eb4:	80000003 	.word	0x80000003
 8000eb8:	20000024 	.word	0x20000024
 8000ebc:	2000002c 	.word	0x2000002c
 8000ec0:	20000028 	.word	0x20000028
 8000ec4:	20000038 	.word	0x20000038
 8000ec8:	20000030 	.word	0x20000030
 8000ecc:	20000034 	.word	0x20000034
 8000ed0:	20000044 	.word	0x20000044
 8000ed4:	20000040 	.word	0x20000040
 8000ed8:	2000003c 	.word	0x2000003c
 8000edc:	20000048 	.word	0x20000048

08000ee0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee4:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <HAL_MspInit+0x24>)
 8000ee6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <HAL_MspInit+0x24>)
 8000eea:	2101      	movs	r1, #1
 8000eec:	430a      	orrs	r2, r1
 8000eee:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef0:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <HAL_MspInit+0x24>)
 8000ef2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ef4:	4b03      	ldr	r3, [pc, #12]	; (8000f04 <HAL_MspInit+0x24>)
 8000ef6:	2180      	movs	r1, #128	; 0x80
 8000ef8:	0549      	lsls	r1, r1, #21
 8000efa:	430a      	orrs	r2, r1
 8000efc:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efe:	46c0      	nop			; (mov r8, r8)
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40021000 	.word	0x40021000

08000f08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b088      	sub	sp, #32
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f10:	230c      	movs	r3, #12
 8000f12:	18fb      	adds	r3, r7, r3
 8000f14:	0018      	movs	r0, r3
 8000f16:	2314      	movs	r3, #20
 8000f18:	001a      	movs	r2, r3
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	f001 fff1 	bl	8002f02 <memset>
  if(hadc->Instance==ADC1)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a15      	ldr	r2, [pc, #84]	; (8000f7c <HAL_ADC_MspInit+0x74>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d123      	bne.n	8000f72 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f2a:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <HAL_ADC_MspInit+0x78>)
 8000f2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f2e:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <HAL_ADC_MspInit+0x78>)
 8000f30:	2180      	movs	r1, #128	; 0x80
 8000f32:	0089      	lsls	r1, r1, #2
 8000f34:	430a      	orrs	r2, r1
 8000f36:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f38:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <HAL_ADC_MspInit+0x78>)
 8000f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f3c:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <HAL_ADC_MspInit+0x78>)
 8000f3e:	2101      	movs	r1, #1
 8000f40:	430a      	orrs	r2, r1
 8000f42:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f44:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <HAL_ADC_MspInit+0x78>)
 8000f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f48:	2201      	movs	r2, #1
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	60bb      	str	r3, [r7, #8]
 8000f4e:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration    
    PA0     ------> ADC_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f50:	210c      	movs	r1, #12
 8000f52:	187b      	adds	r3, r7, r1
 8000f54:	2201      	movs	r2, #1
 8000f56:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f58:	187b      	adds	r3, r7, r1
 8000f5a:	2203      	movs	r2, #3
 8000f5c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	187b      	adds	r3, r7, r1
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f64:	187a      	adds	r2, r7, r1
 8000f66:	23a0      	movs	r3, #160	; 0xa0
 8000f68:	05db      	lsls	r3, r3, #23
 8000f6a:	0011      	movs	r1, r2
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	f000 fcd1 	bl	8001914 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f72:	46c0      	nop			; (mov r8, r8)
 8000f74:	46bd      	mov	sp, r7
 8000f76:	b008      	add	sp, #32
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	46c0      	nop			; (mov r8, r8)
 8000f7c:	40012400 	.word	0x40012400
 8000f80:	40021000 	.word	0x40021000

08000f84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b088      	sub	sp, #32
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	230c      	movs	r3, #12
 8000f8e:	18fb      	adds	r3, r7, r3
 8000f90:	0018      	movs	r0, r3
 8000f92:	2314      	movs	r3, #20
 8000f94:	001a      	movs	r2, r3
 8000f96:	2100      	movs	r1, #0
 8000f98:	f001 ffb3 	bl	8002f02 <memset>
  if(hspi->Instance==SPI1)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a1c      	ldr	r2, [pc, #112]	; (8001014 <HAL_SPI_MspInit+0x90>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d131      	bne.n	800100a <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fa6:	4b1c      	ldr	r3, [pc, #112]	; (8001018 <HAL_SPI_MspInit+0x94>)
 8000fa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000faa:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <HAL_SPI_MspInit+0x94>)
 8000fac:	2180      	movs	r1, #128	; 0x80
 8000fae:	0149      	lsls	r1, r1, #5
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb4:	4b18      	ldr	r3, [pc, #96]	; (8001018 <HAL_SPI_MspInit+0x94>)
 8000fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fb8:	4b17      	ldr	r3, [pc, #92]	; (8001018 <HAL_SPI_MspInit+0x94>)
 8000fba:	2101      	movs	r1, #1
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	62da      	str	r2, [r3, #44]	; 0x2c
 8000fc0:	4b15      	ldr	r3, [pc, #84]	; (8001018 <HAL_SPI_MspInit+0x94>)
 8000fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000fcc:	210c      	movs	r1, #12
 8000fce:	187b      	adds	r3, r7, r1
 8000fd0:	22a0      	movs	r2, #160	; 0xa0
 8000fd2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd4:	187b      	adds	r3, r7, r1
 8000fd6:	2202      	movs	r2, #2
 8000fd8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	187b      	adds	r3, r7, r1
 8000fdc:	2200      	movs	r2, #0
 8000fde:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe0:	187b      	adds	r3, r7, r1
 8000fe2:	2203      	movs	r2, #3
 8000fe4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000fe6:	187b      	adds	r3, r7, r1
 8000fe8:	2200      	movs	r2, #0
 8000fea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fec:	187a      	adds	r2, r7, r1
 8000fee:	23a0      	movs	r3, #160	; 0xa0
 8000ff0:	05db      	lsls	r3, r3, #23
 8000ff2:	0011      	movs	r1, r2
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	f000 fc8d 	bl	8001914 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	2019      	movs	r0, #25
 8001000:	f000 fc0e 	bl	8001820 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001004:	2019      	movs	r0, #25
 8001006:	f000 fc20 	bl	800184a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	46bd      	mov	sp, r7
 800100e:	b008      	add	sp, #32
 8001010:	bd80      	pop	{r7, pc}
 8001012:	46c0      	nop			; (mov r8, r8)
 8001014:	40013000 	.word	0x40013000
 8001018:	40021000 	.word	0x40021000

0800101c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001020:	46c0      	nop			; (mov r8, r8)
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800102a:	e7fe      	b.n	800102a <HardFault_Handler+0x4>

0800102c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001030:	46c0      	nop			; (mov r8, r8)
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800103a:	46c0      	nop			; (mov r8, r8)
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001044:	f000 f8de 	bl	8001204 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001048:	46c0      	nop			; (mov r8, r8)
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001052:	2004      	movs	r0, #4
 8001054:	f000 fe0c 	bl	8001c70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8001058:	46c0      	nop			; (mov r8, r8)
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001062:	2380      	movs	r3, #128	; 0x80
 8001064:	019b      	lsls	r3, r3, #6
 8001066:	0018      	movs	r0, r3
 8001068:	f000 fe02 	bl	8001c70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800106c:	2380      	movs	r3, #128	; 0x80
 800106e:	01db      	lsls	r3, r3, #7
 8001070:	0018      	movs	r0, r3
 8001072:	f000 fdfd 	bl	8001c70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001076:	2380      	movs	r3, #128	; 0x80
 8001078:	021b      	lsls	r3, r3, #8
 800107a:	0018      	movs	r0, r3
 800107c:	f000 fdf8 	bl	8001c70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001080:	46c0      	nop			; (mov r8, r8)
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800108c:	4b03      	ldr	r3, [pc, #12]	; (800109c <SPI1_IRQHandler+0x14>)
 800108e:	0018      	movs	r0, r3
 8001090:	f001 fd40 	bl	8002b14 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001094:	46c0      	nop			; (mov r8, r8)
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	46c0      	nop			; (mov r8, r8)
 800109c:	20000078 	.word	0x20000078

080010a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 80010a4:	4b17      	ldr	r3, [pc, #92]	; (8001104 <SystemInit+0x64>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4b16      	ldr	r3, [pc, #88]	; (8001104 <SystemInit+0x64>)
 80010aa:	2180      	movs	r1, #128	; 0x80
 80010ac:	0049      	lsls	r1, r1, #1
 80010ae:	430a      	orrs	r2, r1
 80010b0:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80010b2:	4b14      	ldr	r3, [pc, #80]	; (8001104 <SystemInit+0x64>)
 80010b4:	68da      	ldr	r2, [r3, #12]
 80010b6:	4b13      	ldr	r3, [pc, #76]	; (8001104 <SystemInit+0x64>)
 80010b8:	4913      	ldr	r1, [pc, #76]	; (8001108 <SystemInit+0x68>)
 80010ba:	400a      	ands	r2, r1
 80010bc:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80010be:	4b11      	ldr	r3, [pc, #68]	; (8001104 <SystemInit+0x64>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	4b10      	ldr	r3, [pc, #64]	; (8001104 <SystemInit+0x64>)
 80010c4:	4911      	ldr	r1, [pc, #68]	; (800110c <SystemInit+0x6c>)
 80010c6:	400a      	ands	r2, r1
 80010c8:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80010ca:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <SystemInit+0x64>)
 80010cc:	689a      	ldr	r2, [r3, #8]
 80010ce:	4b0d      	ldr	r3, [pc, #52]	; (8001104 <SystemInit+0x64>)
 80010d0:	2101      	movs	r1, #1
 80010d2:	438a      	bics	r2, r1
 80010d4:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80010d6:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <SystemInit+0x64>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	4b0a      	ldr	r3, [pc, #40]	; (8001104 <SystemInit+0x64>)
 80010dc:	490c      	ldr	r1, [pc, #48]	; (8001110 <SystemInit+0x70>)
 80010de:	400a      	ands	r2, r1
 80010e0:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80010e2:	4b08      	ldr	r3, [pc, #32]	; (8001104 <SystemInit+0x64>)
 80010e4:	68da      	ldr	r2, [r3, #12]
 80010e6:	4b07      	ldr	r3, [pc, #28]	; (8001104 <SystemInit+0x64>)
 80010e8:	490a      	ldr	r1, [pc, #40]	; (8001114 <SystemInit+0x74>)
 80010ea:	400a      	ands	r2, r1
 80010ec:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80010ee:	4b05      	ldr	r3, [pc, #20]	; (8001104 <SystemInit+0x64>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010f4:	4b08      	ldr	r3, [pc, #32]	; (8001118 <SystemInit+0x78>)
 80010f6:	2280      	movs	r2, #128	; 0x80
 80010f8:	0512      	lsls	r2, r2, #20
 80010fa:	609a      	str	r2, [r3, #8]
#endif
}
 80010fc:	46c0      	nop			; (mov r8, r8)
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	46c0      	nop			; (mov r8, r8)
 8001104:	40021000 	.word	0x40021000
 8001108:	88ff400c 	.word	0x88ff400c
 800110c:	fef6fff6 	.word	0xfef6fff6
 8001110:	fffbffff 	.word	0xfffbffff
 8001114:	ff02ffff 	.word	0xff02ffff
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800111c:	480d      	ldr	r0, [pc, #52]	; (8001154 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800111e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001120:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001122:	e003      	b.n	800112c <LoopCopyDataInit>

08001124 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001124:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8001126:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001128:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800112a:	3104      	adds	r1, #4

0800112c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 800112c:	480b      	ldr	r0, [pc, #44]	; (800115c <LoopForever+0xa>)
  ldr  r3, =_edata
 800112e:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <LoopForever+0xe>)
  adds  r2, r0, r1
 8001130:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001132:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001134:	d3f6      	bcc.n	8001124 <CopyDataInit>
  ldr  r2, =_sbss
 8001136:	4a0b      	ldr	r2, [pc, #44]	; (8001164 <LoopForever+0x12>)
  b  LoopFillZerobss
 8001138:	e002      	b.n	8001140 <LoopFillZerobss>

0800113a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800113a:	2300      	movs	r3, #0
  str  r3, [r2]
 800113c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800113e:	3204      	adds	r2, #4

08001140 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8001140:	4b09      	ldr	r3, [pc, #36]	; (8001168 <LoopForever+0x16>)
  cmp  r2, r3
 8001142:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001144:	d3f9      	bcc.n	800113a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001146:	f7ff ffab 	bl	80010a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800114a:	f001 fead 	bl	8002ea8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800114e:	f7ff fbed 	bl	800092c <main>

08001152 <LoopForever>:

LoopForever:
    b LoopForever
 8001152:	e7fe      	b.n	8001152 <LoopForever>
   ldr   r0, =_estack
 8001154:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8001158:	08002fc4 	.word	0x08002fc4
  ldr  r0, =_sdata
 800115c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001160:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8001164:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8001168:	20000144 	.word	0x20000144

0800116c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800116c:	e7fe      	b.n	800116c <ADC1_COMP_IRQHandler>
	...

08001170 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001176:	1dfb      	adds	r3, r7, #7
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800117c:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <HAL_Init+0x3c>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <HAL_Init+0x3c>)
 8001182:	2140      	movs	r1, #64	; 0x40
 8001184:	430a      	orrs	r2, r1
 8001186:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001188:	2000      	movs	r0, #0
 800118a:	f000 f811 	bl	80011b0 <HAL_InitTick>
 800118e:	1e03      	subs	r3, r0, #0
 8001190:	d003      	beq.n	800119a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001192:	1dfb      	adds	r3, r7, #7
 8001194:	2201      	movs	r2, #1
 8001196:	701a      	strb	r2, [r3, #0]
 8001198:	e001      	b.n	800119e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800119a:	f7ff fea1 	bl	8000ee0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800119e:	1dfb      	adds	r3, r7, #7
 80011a0:	781b      	ldrb	r3, [r3, #0]
}
 80011a2:	0018      	movs	r0, r3
 80011a4:	46bd      	mov	sp, r7
 80011a6:	b002      	add	sp, #8
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	46c0      	nop			; (mov r8, r8)
 80011ac:	40022000 	.word	0x40022000

080011b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011b8:	230f      	movs	r3, #15
 80011ba:	18fb      	adds	r3, r7, r3
 80011bc:	2200      	movs	r2, #0
 80011be:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 80011c0:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <HAL_InitTick+0x50>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	23fa      	movs	r3, #250	; 0xfa
 80011c6:	0099      	lsls	r1, r3, #2
 80011c8:	0010      	movs	r0, r2
 80011ca:	f7fe ff9d 	bl	8000108 <__udivsi3>
 80011ce:	0003      	movs	r3, r0
 80011d0:	0018      	movs	r0, r3
 80011d2:	f000 fb4a 	bl	800186a <HAL_SYSTICK_Config>
 80011d6:	1e03      	subs	r3, r0, #0
 80011d8:	d004      	beq.n	80011e4 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 80011da:	230f      	movs	r3, #15
 80011dc:	18fb      	adds	r3, r7, r3
 80011de:	2201      	movs	r2, #1
 80011e0:	701a      	strb	r2, [r3, #0]
 80011e2:	e006      	b.n	80011f2 <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 80011e4:	6879      	ldr	r1, [r7, #4]
 80011e6:	2301      	movs	r3, #1
 80011e8:	425b      	negs	r3, r3
 80011ea:	2200      	movs	r2, #0
 80011ec:	0018      	movs	r0, r3
 80011ee:	f000 fb17 	bl	8001820 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 80011f2:	230f      	movs	r3, #15
 80011f4:	18fb      	adds	r3, r7, r3
 80011f6:	781b      	ldrb	r3, [r3, #0]
}
 80011f8:	0018      	movs	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	b004      	add	sp, #16
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000000 	.word	0x20000000

08001204 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  uwTick++;
 8001208:	4b03      	ldr	r3, [pc, #12]	; (8001218 <HAL_IncTick+0x14>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	1c5a      	adds	r2, r3, #1
 800120e:	4b02      	ldr	r3, [pc, #8]	; (8001218 <HAL_IncTick+0x14>)
 8001210:	601a      	str	r2, [r3, #0]
}
 8001212:	46c0      	nop			; (mov r8, r8)
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000140 	.word	0x20000140

0800121c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  return uwTick;
 8001220:	4b02      	ldr	r3, [pc, #8]	; (800122c <HAL_GetTick+0x10>)
 8001222:	681b      	ldr	r3, [r3, #0]
}
 8001224:	0018      	movs	r0, r3
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	46c0      	nop			; (mov r8, r8)
 800122c:	20000140 	.word	0x20000140

08001230 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001238:	f7ff fff0 	bl	800121c <HAL_GetTick>
 800123c:	0003      	movs	r3, r0
 800123e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	3301      	adds	r3, #1
 8001248:	d002      	beq.n	8001250 <HAL_Delay+0x20>
  {
    wait++;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	3301      	adds	r3, #1
 800124e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001250:	46c0      	nop			; (mov r8, r8)
 8001252:	f7ff ffe3 	bl	800121c <HAL_GetTick>
 8001256:	0002      	movs	r2, r0
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	68fa      	ldr	r2, [r7, #12]
 800125e:	429a      	cmp	r2, r3
 8001260:	d8f7      	bhi.n	8001252 <HAL_Delay+0x22>
  {
  }
}
 8001262:	46c0      	nop			; (mov r8, r8)
 8001264:	46bd      	mov	sp, r7
 8001266:	b004      	add	sp, #16
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d101      	bne.n	800127e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e159      	b.n	8001532 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001282:	2b00      	cmp	r3, #0
 8001284:	d10a      	bne.n	800129c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2250      	movs	r2, #80	; 0x50
 8001290:	2100      	movs	r1, #0
 8001292:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	0018      	movs	r0, r3
 8001298:	f7ff fe36 	bl	8000f08 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012a0:	2210      	movs	r2, #16
 80012a2:	4013      	ands	r3, r2
 80012a4:	2b10      	cmp	r3, #16
 80012a6:	d005      	beq.n	80012b4 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	2204      	movs	r2, #4
 80012b0:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80012b2:	d00b      	beq.n	80012cc <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012b8:	2210      	movs	r2, #16
 80012ba:	431a      	orrs	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2250      	movs	r2, #80	; 0x50
 80012c4:	2100      	movs	r1, #0
 80012c6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e132      	b.n	8001532 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012d0:	4a9a      	ldr	r2, [pc, #616]	; (800153c <HAL_ADC_Init+0x2d0>)
 80012d2:	4013      	ands	r3, r2
 80012d4:	2202      	movs	r2, #2
 80012d6:	431a      	orrs	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	2203      	movs	r2, #3
 80012e4:	4013      	ands	r3, r2
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d108      	bne.n	80012fc <HAL_ADC_Init+0x90>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2201      	movs	r2, #1
 80012f2:	4013      	ands	r3, r2
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d101      	bne.n	80012fc <HAL_ADC_Init+0x90>
 80012f8:	2301      	movs	r3, #1
 80012fa:	e000      	b.n	80012fe <HAL_ADC_Init+0x92>
 80012fc:	2300      	movs	r3, #0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d149      	bne.n	8001396 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685a      	ldr	r2, [r3, #4]
 8001306:	23c0      	movs	r3, #192	; 0xc0
 8001308:	061b      	lsls	r3, r3, #24
 800130a:	429a      	cmp	r2, r3
 800130c:	d00b      	beq.n	8001326 <HAL_ADC_Init+0xba>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685a      	ldr	r2, [r3, #4]
 8001312:	2380      	movs	r3, #128	; 0x80
 8001314:	05db      	lsls	r3, r3, #23
 8001316:	429a      	cmp	r2, r3
 8001318:	d005      	beq.n	8001326 <HAL_ADC_Init+0xba>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685a      	ldr	r2, [r3, #4]
 800131e:	2380      	movs	r3, #128	; 0x80
 8001320:	061b      	lsls	r3, r3, #24
 8001322:	429a      	cmp	r2, r3
 8001324:	d111      	bne.n	800134a <HAL_ADC_Init+0xde>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	691a      	ldr	r2, [r3, #16]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	0092      	lsls	r2, r2, #2
 8001332:	0892      	lsrs	r2, r2, #2
 8001334:	611a      	str	r2, [r3, #16]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	6919      	ldr	r1, [r3, #16]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685a      	ldr	r2, [r3, #4]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	430a      	orrs	r2, r1
 8001346:	611a      	str	r2, [r3, #16]
 8001348:	e014      	b.n	8001374 <HAL_ADC_Init+0x108>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	691a      	ldr	r2, [r3, #16]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	0092      	lsls	r2, r2, #2
 8001356:	0892      	lsrs	r2, r2, #2
 8001358:	611a      	str	r2, [r3, #16]
 800135a:	4b79      	ldr	r3, [pc, #484]	; (8001540 <HAL_ADC_Init+0x2d4>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	4b78      	ldr	r3, [pc, #480]	; (8001540 <HAL_ADC_Init+0x2d4>)
 8001360:	4978      	ldr	r1, [pc, #480]	; (8001544 <HAL_ADC_Init+0x2d8>)
 8001362:	400a      	ands	r2, r1
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	4b76      	ldr	r3, [pc, #472]	; (8001540 <HAL_ADC_Init+0x2d4>)
 8001368:	6819      	ldr	r1, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685a      	ldr	r2, [r3, #4]
 800136e:	4b74      	ldr	r3, [pc, #464]	; (8001540 <HAL_ADC_Init+0x2d4>)
 8001370:	430a      	orrs	r2, r1
 8001372:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	68da      	ldr	r2, [r3, #12]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2118      	movs	r1, #24
 8001380:	438a      	bics	r2, r1
 8001382:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	68d9      	ldr	r1, [r3, #12]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	689a      	ldr	r2, [r3, #8]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	430a      	orrs	r2, r1
 8001394:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001396:	4b6a      	ldr	r3, [pc, #424]	; (8001540 <HAL_ADC_Init+0x2d4>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	4b69      	ldr	r3, [pc, #420]	; (8001540 <HAL_ADC_Init+0x2d4>)
 800139c:	496a      	ldr	r1, [pc, #424]	; (8001548 <HAL_ADC_Init+0x2dc>)
 800139e:	400a      	ands	r2, r1
 80013a0:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80013a2:	4b67      	ldr	r3, [pc, #412]	; (8001540 <HAL_ADC_Init+0x2d4>)
 80013a4:	6819      	ldr	r1, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013aa:	065a      	lsls	r2, r3, #25
 80013ac:	4b64      	ldr	r3, [pc, #400]	; (8001540 <HAL_ADC_Init+0x2d4>)
 80013ae:	430a      	orrs	r2, r1
 80013b0:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	689a      	ldr	r2, [r3, #8]
 80013b8:	2380      	movs	r3, #128	; 0x80
 80013ba:	055b      	lsls	r3, r3, #21
 80013bc:	4013      	ands	r3, r2
 80013be:	d108      	bne.n	80013d2 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	689a      	ldr	r2, [r3, #8]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2180      	movs	r1, #128	; 0x80
 80013cc:	0549      	lsls	r1, r1, #21
 80013ce:	430a      	orrs	r2, r1
 80013d0:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	68da      	ldr	r2, [r3, #12]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	495b      	ldr	r1, [pc, #364]	; (800154c <HAL_ADC_Init+0x2e0>)
 80013de:	400a      	ands	r2, r1
 80013e0:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	68d9      	ldr	r1, [r3, #12]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	691b      	ldr	r3, [r3, #16]
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d101      	bne.n	80013f8 <HAL_ADC_Init+0x18c>
 80013f4:	2304      	movs	r3, #4
 80013f6:	e000      	b.n	80013fa <HAL_ADC_Init+0x18e>
 80013f8:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80013fa:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2020      	movs	r0, #32
 8001400:	5c1b      	ldrb	r3, [r3, r0]
 8001402:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001404:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	202c      	movs	r0, #44	; 0x2c
 800140a:	5c1b      	ldrb	r3, [r3, r0]
 800140c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800140e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001414:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800141c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001424:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	430a      	orrs	r2, r1
 800142c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001432:	23c2      	movs	r3, #194	; 0xc2
 8001434:	33ff      	adds	r3, #255	; 0xff
 8001436:	429a      	cmp	r2, r3
 8001438:	d00b      	beq.n	8001452 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	68d9      	ldr	r1, [r3, #12]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001448:	431a      	orrs	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	430a      	orrs	r2, r1
 8001450:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2221      	movs	r2, #33	; 0x21
 8001456:	5c9b      	ldrb	r3, [r3, r2]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d11a      	bne.n	8001492 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2220      	movs	r2, #32
 8001460:	5c9b      	ldrb	r3, [r3, r2]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d109      	bne.n	800147a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	68da      	ldr	r2, [r3, #12]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2180      	movs	r1, #128	; 0x80
 8001472:	0249      	lsls	r1, r1, #9
 8001474:	430a      	orrs	r2, r1
 8001476:	60da      	str	r2, [r3, #12]
 8001478:	e00b      	b.n	8001492 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800147e:	2220      	movs	r2, #32
 8001480:	431a      	orrs	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800148a:	2201      	movs	r2, #1
 800148c:	431a      	orrs	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001496:	2b01      	cmp	r3, #1
 8001498:	d11f      	bne.n	80014da <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	691a      	ldr	r2, [r3, #16]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	492a      	ldr	r1, [pc, #168]	; (8001550 <HAL_ADC_Init+0x2e4>)
 80014a6:	400a      	ands	r2, r1
 80014a8:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6919      	ldr	r1, [r3, #16]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80014b8:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 80014be:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	430a      	orrs	r2, r1
 80014c6:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	691a      	ldr	r2, [r3, #16]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2101      	movs	r1, #1
 80014d4:	430a      	orrs	r2, r1
 80014d6:	611a      	str	r2, [r3, #16]
 80014d8:	e00e      	b.n	80014f8 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	691b      	ldr	r3, [r3, #16]
 80014e0:	2201      	movs	r2, #1
 80014e2:	4013      	ands	r3, r2
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d107      	bne.n	80014f8 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	691a      	ldr	r2, [r3, #16]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2101      	movs	r1, #1
 80014f4:	438a      	bics	r2, r1
 80014f6:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	695a      	ldr	r2, [r3, #20]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2107      	movs	r1, #7
 8001504:	438a      	bics	r2, r1
 8001506:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6959      	ldr	r1, [r3, #20]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	430a      	orrs	r2, r1
 8001518:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001524:	2203      	movs	r2, #3
 8001526:	4393      	bics	r3, r2
 8001528:	2201      	movs	r2, #1
 800152a:	431a      	orrs	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001530:	2300      	movs	r3, #0
}
 8001532:	0018      	movs	r0, r3
 8001534:	46bd      	mov	sp, r7
 8001536:	b002      	add	sp, #8
 8001538:	bd80      	pop	{r7, pc}
 800153a:	46c0      	nop			; (mov r8, r8)
 800153c:	fffffefd 	.word	0xfffffefd
 8001540:	40012708 	.word	0x40012708
 8001544:	ffc3ffff 	.word	0xffc3ffff
 8001548:	fdffffff 	.word	0xfdffffff
 800154c:	fffe0219 	.word	0xfffe0219
 8001550:	fffffc03 	.word	0xfffffc03

08001554 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2250      	movs	r2, #80	; 0x50
 8001562:	5c9b      	ldrb	r3, [r3, r2]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d101      	bne.n	800156c <HAL_ADC_ConfigChannel+0x18>
 8001568:	2302      	movs	r3, #2
 800156a:	e085      	b.n	8001678 <HAL_ADC_ConfigChannel+0x124>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2250      	movs	r2, #80	; 0x50
 8001570:	2101      	movs	r1, #1
 8001572:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	2204      	movs	r2, #4
 800157c:	4013      	ands	r3, r2
 800157e:	d00b      	beq.n	8001598 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001584:	2220      	movs	r2, #32
 8001586:	431a      	orrs	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2250      	movs	r2, #80	; 0x50
 8001590:	2100      	movs	r1, #0
 8001592:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e06f      	b.n	8001678 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	4a38      	ldr	r2, [pc, #224]	; (8001680 <HAL_ADC_ConfigChannel+0x12c>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d035      	beq.n	800160e <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	035b      	lsls	r3, r3, #13
 80015ae:	0b5a      	lsrs	r2, r3, #13
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	430a      	orrs	r2, r1
 80015b6:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	2380      	movs	r3, #128	; 0x80
 80015be:	02db      	lsls	r3, r3, #11
 80015c0:	4013      	ands	r3, r2
 80015c2:	d009      	beq.n	80015d8 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 80015c4:	4b2f      	ldr	r3, [pc, #188]	; (8001684 <HAL_ADC_ConfigChannel+0x130>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	4b2e      	ldr	r3, [pc, #184]	; (8001684 <HAL_ADC_ConfigChannel+0x130>)
 80015ca:	2180      	movs	r1, #128	; 0x80
 80015cc:	0409      	lsls	r1, r1, #16
 80015ce:	430a      	orrs	r2, r1
 80015d0:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80015d2:	200a      	movs	r0, #10
 80015d4:	f000 f85e 	bl	8001694 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	2380      	movs	r3, #128	; 0x80
 80015de:	029b      	lsls	r3, r3, #10
 80015e0:	4013      	ands	r3, r2
 80015e2:	d006      	beq.n	80015f2 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 80015e4:	4b27      	ldr	r3, [pc, #156]	; (8001684 <HAL_ADC_ConfigChannel+0x130>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	4b26      	ldr	r3, [pc, #152]	; (8001684 <HAL_ADC_ConfigChannel+0x130>)
 80015ea:	2180      	movs	r1, #128	; 0x80
 80015ec:	03c9      	lsls	r1, r1, #15
 80015ee:	430a      	orrs	r2, r1
 80015f0:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	2380      	movs	r3, #128	; 0x80
 80015f8:	025b      	lsls	r3, r3, #9
 80015fa:	4013      	ands	r3, r2
 80015fc:	d037      	beq.n	800166e <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 80015fe:	4b21      	ldr	r3, [pc, #132]	; (8001684 <HAL_ADC_ConfigChannel+0x130>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	4b20      	ldr	r3, [pc, #128]	; (8001684 <HAL_ADC_ConfigChannel+0x130>)
 8001604:	2180      	movs	r1, #128	; 0x80
 8001606:	0449      	lsls	r1, r1, #17
 8001608:	430a      	orrs	r2, r1
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	e02f      	b.n	800166e <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	035b      	lsls	r3, r3, #13
 800161a:	0b5b      	lsrs	r3, r3, #13
 800161c:	43d9      	mvns	r1, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	400a      	ands	r2, r1
 8001624:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	2380      	movs	r3, #128	; 0x80
 800162c:	02db      	lsls	r3, r3, #11
 800162e:	4013      	ands	r3, r2
 8001630:	d005      	beq.n	800163e <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8001632:	4b14      	ldr	r3, [pc, #80]	; (8001684 <HAL_ADC_ConfigChannel+0x130>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	4b13      	ldr	r3, [pc, #76]	; (8001684 <HAL_ADC_ConfigChannel+0x130>)
 8001638:	4913      	ldr	r1, [pc, #76]	; (8001688 <HAL_ADC_ConfigChannel+0x134>)
 800163a:	400a      	ands	r2, r1
 800163c:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	2380      	movs	r3, #128	; 0x80
 8001644:	029b      	lsls	r3, r3, #10
 8001646:	4013      	ands	r3, r2
 8001648:	d005      	beq.n	8001656 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 800164a:	4b0e      	ldr	r3, [pc, #56]	; (8001684 <HAL_ADC_ConfigChannel+0x130>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	4b0d      	ldr	r3, [pc, #52]	; (8001684 <HAL_ADC_ConfigChannel+0x130>)
 8001650:	490e      	ldr	r1, [pc, #56]	; (800168c <HAL_ADC_ConfigChannel+0x138>)
 8001652:	400a      	ands	r2, r1
 8001654:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	2380      	movs	r3, #128	; 0x80
 800165c:	025b      	lsls	r3, r3, #9
 800165e:	4013      	ands	r3, r2
 8001660:	d005      	beq.n	800166e <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 8001662:	4b08      	ldr	r3, [pc, #32]	; (8001684 <HAL_ADC_ConfigChannel+0x130>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	4b07      	ldr	r3, [pc, #28]	; (8001684 <HAL_ADC_ConfigChannel+0x130>)
 8001668:	4909      	ldr	r1, [pc, #36]	; (8001690 <HAL_ADC_ConfigChannel+0x13c>)
 800166a:	400a      	ands	r2, r1
 800166c:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2250      	movs	r2, #80	; 0x50
 8001672:	2100      	movs	r1, #0
 8001674:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8001676:	2300      	movs	r3, #0
}
 8001678:	0018      	movs	r0, r3
 800167a:	46bd      	mov	sp, r7
 800167c:	b002      	add	sp, #8
 800167e:	bd80      	pop	{r7, pc}
 8001680:	00001001 	.word	0x00001001
 8001684:	40012708 	.word	0x40012708
 8001688:	ff7fffff 	.word	0xff7fffff
 800168c:	ffbfffff 	.word	0xffbfffff
 8001690:	feffffff 	.word	0xfeffffff

08001694 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800169c:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <ADC_DelayMicroSecond+0x34>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	490a      	ldr	r1, [pc, #40]	; (80016cc <ADC_DelayMicroSecond+0x38>)
 80016a2:	0018      	movs	r0, r3
 80016a4:	f7fe fd30 	bl	8000108 <__udivsi3>
 80016a8:	0003      	movs	r3, r0
 80016aa:	001a      	movs	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4353      	muls	r3, r2
 80016b0:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 80016b2:	e002      	b.n	80016ba <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1f9      	bne.n	80016b4 <ADC_DelayMicroSecond+0x20>
  } 
}
 80016c0:	46c0      	nop			; (mov r8, r8)
 80016c2:	46bd      	mov	sp, r7
 80016c4:	b004      	add	sp, #16
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000000 	.word	0x20000000
 80016cc:	000f4240 	.word	0x000f4240

080016d0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	0002      	movs	r2, r0
 80016d8:	1dfb      	adds	r3, r7, #7
 80016da:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80016dc:	1dfb      	adds	r3, r7, #7
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	001a      	movs	r2, r3
 80016e2:	231f      	movs	r3, #31
 80016e4:	401a      	ands	r2, r3
 80016e6:	4b04      	ldr	r3, [pc, #16]	; (80016f8 <NVIC_EnableIRQ+0x28>)
 80016e8:	2101      	movs	r1, #1
 80016ea:	4091      	lsls	r1, r2
 80016ec:	000a      	movs	r2, r1
 80016ee:	601a      	str	r2, [r3, #0]
}
 80016f0:	46c0      	nop			; (mov r8, r8)
 80016f2:	46bd      	mov	sp, r7
 80016f4:	b002      	add	sp, #8
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	e000e100 	.word	0xe000e100

080016fc <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016fc:	b590      	push	{r4, r7, lr}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	0002      	movs	r2, r0
 8001704:	6039      	str	r1, [r7, #0]
 8001706:	1dfb      	adds	r3, r7, #7
 8001708:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800170a:	1dfb      	adds	r3, r7, #7
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	2b7f      	cmp	r3, #127	; 0x7f
 8001710:	d932      	bls.n	8001778 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001712:	4a2f      	ldr	r2, [pc, #188]	; (80017d0 <NVIC_SetPriority+0xd4>)
 8001714:	1dfb      	adds	r3, r7, #7
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	0019      	movs	r1, r3
 800171a:	230f      	movs	r3, #15
 800171c:	400b      	ands	r3, r1
 800171e:	3b08      	subs	r3, #8
 8001720:	089b      	lsrs	r3, r3, #2
 8001722:	3306      	adds	r3, #6
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	18d3      	adds	r3, r2, r3
 8001728:	3304      	adds	r3, #4
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	1dfa      	adds	r2, r7, #7
 800172e:	7812      	ldrb	r2, [r2, #0]
 8001730:	0011      	movs	r1, r2
 8001732:	2203      	movs	r2, #3
 8001734:	400a      	ands	r2, r1
 8001736:	00d2      	lsls	r2, r2, #3
 8001738:	21ff      	movs	r1, #255	; 0xff
 800173a:	4091      	lsls	r1, r2
 800173c:	000a      	movs	r2, r1
 800173e:	43d2      	mvns	r2, r2
 8001740:	401a      	ands	r2, r3
 8001742:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	019b      	lsls	r3, r3, #6
 8001748:	22ff      	movs	r2, #255	; 0xff
 800174a:	401a      	ands	r2, r3
 800174c:	1dfb      	adds	r3, r7, #7
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	0018      	movs	r0, r3
 8001752:	2303      	movs	r3, #3
 8001754:	4003      	ands	r3, r0
 8001756:	00db      	lsls	r3, r3, #3
 8001758:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800175a:	481d      	ldr	r0, [pc, #116]	; (80017d0 <NVIC_SetPriority+0xd4>)
 800175c:	1dfb      	adds	r3, r7, #7
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	001c      	movs	r4, r3
 8001762:	230f      	movs	r3, #15
 8001764:	4023      	ands	r3, r4
 8001766:	3b08      	subs	r3, #8
 8001768:	089b      	lsrs	r3, r3, #2
 800176a:	430a      	orrs	r2, r1
 800176c:	3306      	adds	r3, #6
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	18c3      	adds	r3, r0, r3
 8001772:	3304      	adds	r3, #4
 8001774:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001776:	e027      	b.n	80017c8 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001778:	4a16      	ldr	r2, [pc, #88]	; (80017d4 <NVIC_SetPriority+0xd8>)
 800177a:	1dfb      	adds	r3, r7, #7
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	b25b      	sxtb	r3, r3
 8001780:	089b      	lsrs	r3, r3, #2
 8001782:	33c0      	adds	r3, #192	; 0xc0
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	589b      	ldr	r3, [r3, r2]
 8001788:	1dfa      	adds	r2, r7, #7
 800178a:	7812      	ldrb	r2, [r2, #0]
 800178c:	0011      	movs	r1, r2
 800178e:	2203      	movs	r2, #3
 8001790:	400a      	ands	r2, r1
 8001792:	00d2      	lsls	r2, r2, #3
 8001794:	21ff      	movs	r1, #255	; 0xff
 8001796:	4091      	lsls	r1, r2
 8001798:	000a      	movs	r2, r1
 800179a:	43d2      	mvns	r2, r2
 800179c:	401a      	ands	r2, r3
 800179e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	019b      	lsls	r3, r3, #6
 80017a4:	22ff      	movs	r2, #255	; 0xff
 80017a6:	401a      	ands	r2, r3
 80017a8:	1dfb      	adds	r3, r7, #7
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	0018      	movs	r0, r3
 80017ae:	2303      	movs	r3, #3
 80017b0:	4003      	ands	r3, r0
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017b6:	4807      	ldr	r0, [pc, #28]	; (80017d4 <NVIC_SetPriority+0xd8>)
 80017b8:	1dfb      	adds	r3, r7, #7
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	b25b      	sxtb	r3, r3
 80017be:	089b      	lsrs	r3, r3, #2
 80017c0:	430a      	orrs	r2, r1
 80017c2:	33c0      	adds	r3, #192	; 0xc0
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	501a      	str	r2, [r3, r0]
}
 80017c8:	46c0      	nop			; (mov r8, r8)
 80017ca:	46bd      	mov	sp, r7
 80017cc:	b003      	add	sp, #12
 80017ce:	bd90      	pop	{r4, r7, pc}
 80017d0:	e000ed00 	.word	0xe000ed00
 80017d4:	e000e100 	.word	0xe000e100

080017d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	4a0c      	ldr	r2, [pc, #48]	; (8001818 <SysTick_Config+0x40>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d901      	bls.n	80017ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ea:	2301      	movs	r3, #1
 80017ec:	e010      	b.n	8001810 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ee:	4b0b      	ldr	r3, [pc, #44]	; (800181c <SysTick_Config+0x44>)
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	3a01      	subs	r2, #1
 80017f4:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017f6:	2301      	movs	r3, #1
 80017f8:	425b      	negs	r3, r3
 80017fa:	2103      	movs	r1, #3
 80017fc:	0018      	movs	r0, r3
 80017fe:	f7ff ff7d 	bl	80016fc <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001802:	4b06      	ldr	r3, [pc, #24]	; (800181c <SysTick_Config+0x44>)
 8001804:	2200      	movs	r2, #0
 8001806:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001808:	4b04      	ldr	r3, [pc, #16]	; (800181c <SysTick_Config+0x44>)
 800180a:	2207      	movs	r2, #7
 800180c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800180e:	2300      	movs	r3, #0
}
 8001810:	0018      	movs	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	b002      	add	sp, #8
 8001816:	bd80      	pop	{r7, pc}
 8001818:	00ffffff 	.word	0x00ffffff
 800181c:	e000e010 	.word	0xe000e010

08001820 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	60b9      	str	r1, [r7, #8]
 8001828:	607a      	str	r2, [r7, #4]
 800182a:	210f      	movs	r1, #15
 800182c:	187b      	adds	r3, r7, r1
 800182e:	1c02      	adds	r2, r0, #0
 8001830:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001832:	68ba      	ldr	r2, [r7, #8]
 8001834:	187b      	adds	r3, r7, r1
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	b25b      	sxtb	r3, r3
 800183a:	0011      	movs	r1, r2
 800183c:	0018      	movs	r0, r3
 800183e:	f7ff ff5d 	bl	80016fc <NVIC_SetPriority>
}
 8001842:	46c0      	nop			; (mov r8, r8)
 8001844:	46bd      	mov	sp, r7
 8001846:	b004      	add	sp, #16
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b082      	sub	sp, #8
 800184e:	af00      	add	r7, sp, #0
 8001850:	0002      	movs	r2, r0
 8001852:	1dfb      	adds	r3, r7, #7
 8001854:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001856:	1dfb      	adds	r3, r7, #7
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	b25b      	sxtb	r3, r3
 800185c:	0018      	movs	r0, r3
 800185e:	f7ff ff37 	bl	80016d0 <NVIC_EnableIRQ>
}
 8001862:	46c0      	nop			; (mov r8, r8)
 8001864:	46bd      	mov	sp, r7
 8001866:	b002      	add	sp, #8
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b082      	sub	sp, #8
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	0018      	movs	r0, r3
 8001876:	f7ff ffaf 	bl	80017d8 <SysTick_Config>
 800187a:	0003      	movs	r3, r0
}
 800187c:	0018      	movs	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	b002      	add	sp, #8
 8001882:	bd80      	pop	{r7, pc}

08001884 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800188c:	230f      	movs	r3, #15
 800188e:	18fb      	adds	r3, r7, r3
 8001890:	2200      	movs	r2, #0
 8001892:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2225      	movs	r2, #37	; 0x25
 8001898:	5c9b      	ldrb	r3, [r3, r2]
 800189a:	b2db      	uxtb	r3, r3
 800189c:	2b02      	cmp	r3, #2
 800189e:	d007      	beq.n	80018b0 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2204      	movs	r2, #4
 80018a4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80018a6:	230f      	movs	r3, #15
 80018a8:	18fb      	adds	r3, r7, r3
 80018aa:	2201      	movs	r2, #1
 80018ac:	701a      	strb	r2, [r3, #0]
 80018ae:	e02a      	b.n	8001906 <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	210e      	movs	r1, #14
 80018bc:	438a      	bics	r2, r1
 80018be:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2101      	movs	r1, #1
 80018cc:	438a      	bics	r2, r1
 80018ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d4:	221c      	movs	r2, #28
 80018d6:	401a      	ands	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018dc:	2101      	movs	r1, #1
 80018de:	4091      	lsls	r1, r2
 80018e0:	000a      	movs	r2, r1
 80018e2:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2225      	movs	r2, #37	; 0x25
 80018e8:	2101      	movs	r1, #1
 80018ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2224      	movs	r2, #36	; 0x24
 80018f0:	2100      	movs	r1, #0
 80018f2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d004      	beq.n	8001906 <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	0010      	movs	r0, r2
 8001904:	4798      	blx	r3
    }
  }
  return status;
 8001906:	230f      	movs	r3, #15
 8001908:	18fb      	adds	r3, r7, r3
 800190a:	781b      	ldrb	r3, [r3, #0]
}
 800190c:	0018      	movs	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	b004      	add	sp, #16
 8001912:	bd80      	pop	{r7, pc}

08001914 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001926:	2300      	movs	r3, #0
 8001928:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800192a:	e155      	b.n	8001bd8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2101      	movs	r1, #1
 8001932:	697a      	ldr	r2, [r7, #20]
 8001934:	4091      	lsls	r1, r2
 8001936:	000a      	movs	r2, r1
 8001938:	4013      	ands	r3, r2
 800193a:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d100      	bne.n	8001944 <HAL_GPIO_Init+0x30>
 8001942:	e146      	b.n	8001bd2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	2b02      	cmp	r3, #2
 800194a:	d003      	beq.n	8001954 <HAL_GPIO_Init+0x40>
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	2b12      	cmp	r3, #18
 8001952:	d123      	bne.n	800199c <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	08da      	lsrs	r2, r3, #3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3208      	adds	r2, #8
 800195c:	0092      	lsls	r2, r2, #2
 800195e:	58d3      	ldr	r3, [r2, r3]
 8001960:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	2207      	movs	r2, #7
 8001966:	4013      	ands	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	220f      	movs	r2, #15
 800196c:	409a      	lsls	r2, r3
 800196e:	0013      	movs	r3, r2
 8001970:	43da      	mvns	r2, r3
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	4013      	ands	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	691a      	ldr	r2, [r3, #16]
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	2107      	movs	r1, #7
 8001980:	400b      	ands	r3, r1
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	409a      	lsls	r2, r3
 8001986:	0013      	movs	r3, r2
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	4313      	orrs	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	08da      	lsrs	r2, r3, #3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	3208      	adds	r2, #8
 8001996:	0092      	lsls	r2, r2, #2
 8001998:	6939      	ldr	r1, [r7, #16]
 800199a:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d00b      	beq.n	80019bc <HAL_GPIO_Init+0xa8>
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d007      	beq.n	80019bc <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019b0:	2b11      	cmp	r3, #17
 80019b2:	d003      	beq.n	80019bc <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	2b12      	cmp	r3, #18
 80019ba:	d130      	bne.n	8001a1e <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	2203      	movs	r2, #3
 80019c8:	409a      	lsls	r2, r3
 80019ca:	0013      	movs	r3, r2
 80019cc:	43da      	mvns	r2, r3
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	4013      	ands	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	68da      	ldr	r2, [r3, #12]
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	409a      	lsls	r2, r3
 80019de:	0013      	movs	r3, r2
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019f2:	2201      	movs	r2, #1
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	409a      	lsls	r2, r3
 80019f8:	0013      	movs	r3, r2
 80019fa:	43da      	mvns	r2, r3
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	4013      	ands	r3, r2
 8001a00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	091b      	lsrs	r3, r3, #4
 8001a08:	2201      	movs	r2, #1
 8001a0a:	401a      	ands	r2, r3
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	409a      	lsls	r2, r3
 8001a10:	0013      	movs	r3, r2
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	2203      	movs	r2, #3
 8001a2a:	409a      	lsls	r2, r3
 8001a2c:	0013      	movs	r3, r2
 8001a2e:	43da      	mvns	r2, r3
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	4013      	ands	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	2203      	movs	r2, #3
 8001a3c:	401a      	ands	r2, r3
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	409a      	lsls	r2, r3
 8001a44:	0013      	movs	r3, r2
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	2203      	movs	r2, #3
 8001a5e:	409a      	lsls	r2, r3
 8001a60:	0013      	movs	r3, r2
 8001a62:	43da      	mvns	r2, r3
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	4013      	ands	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	689a      	ldr	r2, [r3, #8]
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	409a      	lsls	r2, r3
 8001a74:	0013      	movs	r3, r2
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	2380      	movs	r3, #128	; 0x80
 8001a88:	055b      	lsls	r3, r3, #21
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	d100      	bne.n	8001a90 <HAL_GPIO_Init+0x17c>
 8001a8e:	e0a0      	b.n	8001bd2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a90:	4b57      	ldr	r3, [pc, #348]	; (8001bf0 <HAL_GPIO_Init+0x2dc>)
 8001a92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a94:	4b56      	ldr	r3, [pc, #344]	; (8001bf0 <HAL_GPIO_Init+0x2dc>)
 8001a96:	2101      	movs	r1, #1
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8001a9c:	4a55      	ldr	r2, [pc, #340]	; (8001bf4 <HAL_GPIO_Init+0x2e0>)
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	089b      	lsrs	r3, r3, #2
 8001aa2:	3302      	adds	r3, #2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	589b      	ldr	r3, [r3, r2]
 8001aa8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	2203      	movs	r2, #3
 8001aae:	4013      	ands	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	220f      	movs	r2, #15
 8001ab4:	409a      	lsls	r2, r3
 8001ab6:	0013      	movs	r3, r2
 8001ab8:	43da      	mvns	r2, r3
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	4013      	ands	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	23a0      	movs	r3, #160	; 0xa0
 8001ac4:	05db      	lsls	r3, r3, #23
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d01f      	beq.n	8001b0a <HAL_GPIO_Init+0x1f6>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a4a      	ldr	r2, [pc, #296]	; (8001bf8 <HAL_GPIO_Init+0x2e4>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d019      	beq.n	8001b06 <HAL_GPIO_Init+0x1f2>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a49      	ldr	r2, [pc, #292]	; (8001bfc <HAL_GPIO_Init+0x2e8>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d013      	beq.n	8001b02 <HAL_GPIO_Init+0x1ee>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a48      	ldr	r2, [pc, #288]	; (8001c00 <HAL_GPIO_Init+0x2ec>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d00d      	beq.n	8001afe <HAL_GPIO_Init+0x1ea>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a47      	ldr	r2, [pc, #284]	; (8001c04 <HAL_GPIO_Init+0x2f0>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d007      	beq.n	8001afa <HAL_GPIO_Init+0x1e6>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a46      	ldr	r2, [pc, #280]	; (8001c08 <HAL_GPIO_Init+0x2f4>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d101      	bne.n	8001af6 <HAL_GPIO_Init+0x1e2>
 8001af2:	2305      	movs	r3, #5
 8001af4:	e00a      	b.n	8001b0c <HAL_GPIO_Init+0x1f8>
 8001af6:	2306      	movs	r3, #6
 8001af8:	e008      	b.n	8001b0c <HAL_GPIO_Init+0x1f8>
 8001afa:	2304      	movs	r3, #4
 8001afc:	e006      	b.n	8001b0c <HAL_GPIO_Init+0x1f8>
 8001afe:	2303      	movs	r3, #3
 8001b00:	e004      	b.n	8001b0c <HAL_GPIO_Init+0x1f8>
 8001b02:	2302      	movs	r3, #2
 8001b04:	e002      	b.n	8001b0c <HAL_GPIO_Init+0x1f8>
 8001b06:	2301      	movs	r3, #1
 8001b08:	e000      	b.n	8001b0c <HAL_GPIO_Init+0x1f8>
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	697a      	ldr	r2, [r7, #20]
 8001b0e:	2103      	movs	r1, #3
 8001b10:	400a      	ands	r2, r1
 8001b12:	0092      	lsls	r2, r2, #2
 8001b14:	4093      	lsls	r3, r2
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b1c:	4935      	ldr	r1, [pc, #212]	; (8001bf4 <HAL_GPIO_Init+0x2e0>)
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	089b      	lsrs	r3, r3, #2
 8001b22:	3302      	adds	r3, #2
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b2a:	4b38      	ldr	r3, [pc, #224]	; (8001c0c <HAL_GPIO_Init+0x2f8>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	43da      	mvns	r2, r3
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	4013      	ands	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685a      	ldr	r2, [r3, #4]
 8001b3e:	2380      	movs	r3, #128	; 0x80
 8001b40:	025b      	lsls	r3, r3, #9
 8001b42:	4013      	ands	r3, r2
 8001b44:	d003      	beq.n	8001b4e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b4e:	4b2f      	ldr	r3, [pc, #188]	; (8001c0c <HAL_GPIO_Init+0x2f8>)
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001b54:	4b2d      	ldr	r3, [pc, #180]	; (8001c0c <HAL_GPIO_Init+0x2f8>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	43da      	mvns	r2, r3
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	4013      	ands	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685a      	ldr	r2, [r3, #4]
 8001b68:	2380      	movs	r3, #128	; 0x80
 8001b6a:	029b      	lsls	r3, r3, #10
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	d003      	beq.n	8001b78 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b78:	4b24      	ldr	r3, [pc, #144]	; (8001c0c <HAL_GPIO_Init+0x2f8>)
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b7e:	4b23      	ldr	r3, [pc, #140]	; (8001c0c <HAL_GPIO_Init+0x2f8>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	43da      	mvns	r2, r3
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	2380      	movs	r3, #128	; 0x80
 8001b94:	035b      	lsls	r3, r3, #13
 8001b96:	4013      	ands	r3, r2
 8001b98:	d003      	beq.n	8001ba2 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ba2:	4b1a      	ldr	r3, [pc, #104]	; (8001c0c <HAL_GPIO_Init+0x2f8>)
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001ba8:	4b18      	ldr	r3, [pc, #96]	; (8001c0c <HAL_GPIO_Init+0x2f8>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	43da      	mvns	r2, r3
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685a      	ldr	r2, [r3, #4]
 8001bbc:	2380      	movs	r3, #128	; 0x80
 8001bbe:	039b      	lsls	r3, r3, #14
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	d003      	beq.n	8001bcc <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001bcc:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <HAL_GPIO_Init+0x2f8>)
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	40da      	lsrs	r2, r3
 8001be0:	1e13      	subs	r3, r2, #0
 8001be2:	d000      	beq.n	8001be6 <HAL_GPIO_Init+0x2d2>
 8001be4:	e6a2      	b.n	800192c <HAL_GPIO_Init+0x18>
  }
}
 8001be6:	46c0      	nop			; (mov r8, r8)
 8001be8:	46bd      	mov	sp, r7
 8001bea:	b006      	add	sp, #24
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	46c0      	nop			; (mov r8, r8)
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	40010000 	.word	0x40010000
 8001bf8:	50000400 	.word	0x50000400
 8001bfc:	50000800 	.word	0x50000800
 8001c00:	50000c00 	.word	0x50000c00
 8001c04:	50001000 	.word	0x50001000
 8001c08:	50001c00 	.word	0x50001c00
 8001c0c:	40010400 	.word	0x40010400

08001c10 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	0008      	movs	r0, r1
 8001c1a:	0011      	movs	r1, r2
 8001c1c:	1cbb      	adds	r3, r7, #2
 8001c1e:	1c02      	adds	r2, r0, #0
 8001c20:	801a      	strh	r2, [r3, #0]
 8001c22:	1c7b      	adds	r3, r7, #1
 8001c24:	1c0a      	adds	r2, r1, #0
 8001c26:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8001c28:	1c7b      	adds	r3, r7, #1
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d004      	beq.n	8001c3a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c30:	1cbb      	adds	r3, r7, #2
 8001c32:	881a      	ldrh	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001c38:	e003      	b.n	8001c42 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001c3a:	1cbb      	adds	r3, r7, #2
 8001c3c:	881a      	ldrh	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c42:	46c0      	nop			; (mov r8, r8)
 8001c44:	46bd      	mov	sp, r7
 8001c46:	b002      	add	sp, #8
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
 8001c52:	000a      	movs	r2, r1
 8001c54:	1cbb      	adds	r3, r7, #2
 8001c56:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	695a      	ldr	r2, [r3, #20]
 8001c5c:	1cbb      	adds	r3, r7, #2
 8001c5e:	881b      	ldrh	r3, [r3, #0]
 8001c60:	405a      	eors	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	615a      	str	r2, [r3, #20]
}
 8001c66:	46c0      	nop			; (mov r8, r8)
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	b002      	add	sp, #8
 8001c6c:	bd80      	pop	{r7, pc}
	...

08001c70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	0002      	movs	r2, r0
 8001c78:	1dbb      	adds	r3, r7, #6
 8001c7a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8001c7c:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001c7e:	695b      	ldr	r3, [r3, #20]
 8001c80:	1dba      	adds	r2, r7, #6
 8001c82:	8812      	ldrh	r2, [r2, #0]
 8001c84:	4013      	ands	r3, r2
 8001c86:	d008      	beq.n	8001c9a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c88:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001c8a:	1dba      	adds	r2, r7, #6
 8001c8c:	8812      	ldrh	r2, [r2, #0]
 8001c8e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c90:	1dbb      	adds	r3, r7, #6
 8001c92:	881b      	ldrh	r3, [r3, #0]
 8001c94:	0018      	movs	r0, r3
 8001c96:	f7ff f815 	bl	8000cc4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c9a:	46c0      	nop			; (mov r8, r8)
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	b002      	add	sp, #8
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	46c0      	nop			; (mov r8, r8)
 8001ca4:	40010400 	.word	0x40010400

08001ca8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ca8:	b5b0      	push	{r4, r5, r7, lr}
 8001caa:	b08a      	sub	sp, #40	; 0x28
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d102      	bne.n	8001cbc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	f000 fbbc 	bl	8002434 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cbc:	4bc8      	ldr	r3, [pc, #800]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	220c      	movs	r2, #12
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cc6:	4bc6      	ldr	r3, [pc, #792]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001cc8:	68da      	ldr	r2, [r3, #12]
 8001cca:	2380      	movs	r3, #128	; 0x80
 8001ccc:	025b      	lsls	r3, r3, #9
 8001cce:	4013      	ands	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	4013      	ands	r3, r2
 8001cda:	d100      	bne.n	8001cde <HAL_RCC_OscConfig+0x36>
 8001cdc:	e07e      	b.n	8001ddc <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	2b08      	cmp	r3, #8
 8001ce2:	d007      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	2b0c      	cmp	r3, #12
 8001ce8:	d112      	bne.n	8001d10 <HAL_RCC_OscConfig+0x68>
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	2380      	movs	r3, #128	; 0x80
 8001cee:	025b      	lsls	r3, r3, #9
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d10d      	bne.n	8001d10 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf4:	4bba      	ldr	r3, [pc, #744]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	2380      	movs	r3, #128	; 0x80
 8001cfa:	029b      	lsls	r3, r3, #10
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	d100      	bne.n	8001d02 <HAL_RCC_OscConfig+0x5a>
 8001d00:	e06b      	b.n	8001dda <HAL_RCC_OscConfig+0x132>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d167      	bne.n	8001dda <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	f000 fb92 	bl	8002434 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685a      	ldr	r2, [r3, #4]
 8001d14:	2380      	movs	r3, #128	; 0x80
 8001d16:	025b      	lsls	r3, r3, #9
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d107      	bne.n	8001d2c <HAL_RCC_OscConfig+0x84>
 8001d1c:	4bb0      	ldr	r3, [pc, #704]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	4baf      	ldr	r3, [pc, #700]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001d22:	2180      	movs	r1, #128	; 0x80
 8001d24:	0249      	lsls	r1, r1, #9
 8001d26:	430a      	orrs	r2, r1
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	e027      	b.n	8001d7c <HAL_RCC_OscConfig+0xd4>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685a      	ldr	r2, [r3, #4]
 8001d30:	23a0      	movs	r3, #160	; 0xa0
 8001d32:	02db      	lsls	r3, r3, #11
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d10e      	bne.n	8001d56 <HAL_RCC_OscConfig+0xae>
 8001d38:	4ba9      	ldr	r3, [pc, #676]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	4ba8      	ldr	r3, [pc, #672]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001d3e:	2180      	movs	r1, #128	; 0x80
 8001d40:	02c9      	lsls	r1, r1, #11
 8001d42:	430a      	orrs	r2, r1
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	4ba6      	ldr	r3, [pc, #664]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	4ba5      	ldr	r3, [pc, #660]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001d4c:	2180      	movs	r1, #128	; 0x80
 8001d4e:	0249      	lsls	r1, r1, #9
 8001d50:	430a      	orrs	r2, r1
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	e012      	b.n	8001d7c <HAL_RCC_OscConfig+0xd4>
 8001d56:	4ba2      	ldr	r3, [pc, #648]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	4ba1      	ldr	r3, [pc, #644]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001d5c:	49a1      	ldr	r1, [pc, #644]	; (8001fe4 <HAL_RCC_OscConfig+0x33c>)
 8001d5e:	400a      	ands	r2, r1
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	4b9f      	ldr	r3, [pc, #636]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	2380      	movs	r3, #128	; 0x80
 8001d68:	025b      	lsls	r3, r3, #9
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	4b9b      	ldr	r3, [pc, #620]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	4b9a      	ldr	r3, [pc, #616]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001d76:	499c      	ldr	r1, [pc, #624]	; (8001fe8 <HAL_RCC_OscConfig+0x340>)
 8001d78:	400a      	ands	r2, r1
 8001d7a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d015      	beq.n	8001db0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d84:	f7ff fa4a 	bl	800121c <HAL_GetTick>
 8001d88:	0003      	movs	r3, r0
 8001d8a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d8c:	e009      	b.n	8001da2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d8e:	f7ff fa45 	bl	800121c <HAL_GetTick>
 8001d92:	0002      	movs	r2, r0
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b64      	cmp	r3, #100	; 0x64
 8001d9a:	d902      	bls.n	8001da2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	f000 fb49 	bl	8002434 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001da2:	4b8f      	ldr	r3, [pc, #572]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	2380      	movs	r3, #128	; 0x80
 8001da8:	029b      	lsls	r3, r3, #10
 8001daa:	4013      	ands	r3, r2
 8001dac:	d0ef      	beq.n	8001d8e <HAL_RCC_OscConfig+0xe6>
 8001dae:	e015      	b.n	8001ddc <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db0:	f7ff fa34 	bl	800121c <HAL_GetTick>
 8001db4:	0003      	movs	r3, r0
 8001db6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001db8:	e008      	b.n	8001dcc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dba:	f7ff fa2f 	bl	800121c <HAL_GetTick>
 8001dbe:	0002      	movs	r2, r0
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b64      	cmp	r3, #100	; 0x64
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e333      	b.n	8002434 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001dcc:	4b84      	ldr	r3, [pc, #528]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	2380      	movs	r3, #128	; 0x80
 8001dd2:	029b      	lsls	r3, r3, #10
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	d1f0      	bne.n	8001dba <HAL_RCC_OscConfig+0x112>
 8001dd8:	e000      	b.n	8001ddc <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dda:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2202      	movs	r2, #2
 8001de2:	4013      	ands	r3, r2
 8001de4:	d100      	bne.n	8001de8 <HAL_RCC_OscConfig+0x140>
 8001de6:	e098      	b.n	8001f1a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df0:	2220      	movs	r2, #32
 8001df2:	4013      	ands	r3, r2
 8001df4:	d009      	beq.n	8001e0a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001df6:	4b7a      	ldr	r3, [pc, #488]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	4b79      	ldr	r3, [pc, #484]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001dfc:	2120      	movs	r1, #32
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e04:	2220      	movs	r2, #32
 8001e06:	4393      	bics	r3, r2
 8001e08:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	2b04      	cmp	r3, #4
 8001e0e:	d005      	beq.n	8001e1c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	2b0c      	cmp	r3, #12
 8001e14:	d13d      	bne.n	8001e92 <HAL_RCC_OscConfig+0x1ea>
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d13a      	bne.n	8001e92 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001e1c:	4b70      	ldr	r3, [pc, #448]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2204      	movs	r2, #4
 8001e22:	4013      	ands	r3, r2
 8001e24:	d004      	beq.n	8001e30 <HAL_RCC_OscConfig+0x188>
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d101      	bne.n	8001e30 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e301      	b.n	8002434 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e30:	4b6b      	ldr	r3, [pc, #428]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	4a6d      	ldr	r2, [pc, #436]	; (8001fec <HAL_RCC_OscConfig+0x344>)
 8001e36:	4013      	ands	r3, r2
 8001e38:	0019      	movs	r1, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	021a      	lsls	r2, r3, #8
 8001e40:	4b67      	ldr	r3, [pc, #412]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001e42:	430a      	orrs	r2, r1
 8001e44:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001e46:	4b66      	ldr	r3, [pc, #408]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2209      	movs	r2, #9
 8001e4c:	4393      	bics	r3, r2
 8001e4e:	0019      	movs	r1, r3
 8001e50:	4b63      	ldr	r3, [pc, #396]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e54:	430a      	orrs	r2, r1
 8001e56:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e58:	f000 fc20 	bl	800269c <HAL_RCC_GetSysClockFreq>
 8001e5c:	0001      	movs	r1, r0
 8001e5e:	4b60      	ldr	r3, [pc, #384]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	091b      	lsrs	r3, r3, #4
 8001e64:	220f      	movs	r2, #15
 8001e66:	4013      	ands	r3, r2
 8001e68:	4a61      	ldr	r2, [pc, #388]	; (8001ff0 <HAL_RCC_OscConfig+0x348>)
 8001e6a:	5cd3      	ldrb	r3, [r2, r3]
 8001e6c:	000a      	movs	r2, r1
 8001e6e:	40da      	lsrs	r2, r3
 8001e70:	4b60      	ldr	r3, [pc, #384]	; (8001ff4 <HAL_RCC_OscConfig+0x34c>)
 8001e72:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8001e74:	2513      	movs	r5, #19
 8001e76:	197c      	adds	r4, r7, r5
 8001e78:	2000      	movs	r0, #0
 8001e7a:	f7ff f999 	bl	80011b0 <HAL_InitTick>
 8001e7e:	0003      	movs	r3, r0
 8001e80:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001e82:	197b      	adds	r3, r7, r5
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d047      	beq.n	8001f1a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001e8a:	2313      	movs	r3, #19
 8001e8c:	18fb      	adds	r3, r7, r3
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	e2d0      	b.n	8002434 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d027      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001e98:	4b51      	ldr	r3, [pc, #324]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2209      	movs	r2, #9
 8001e9e:	4393      	bics	r3, r2
 8001ea0:	0019      	movs	r1, r3
 8001ea2:	4b4f      	ldr	r3, [pc, #316]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eaa:	f7ff f9b7 	bl	800121c <HAL_GetTick>
 8001eae:	0003      	movs	r3, r0
 8001eb0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eb4:	f7ff f9b2 	bl	800121c <HAL_GetTick>
 8001eb8:	0002      	movs	r2, r0
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e2b6      	b.n	8002434 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ec6:	4b46      	ldr	r3, [pc, #280]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2204      	movs	r2, #4
 8001ecc:	4013      	ands	r3, r2
 8001ece:	d0f1      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed0:	4b43      	ldr	r3, [pc, #268]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	4a45      	ldr	r2, [pc, #276]	; (8001fec <HAL_RCC_OscConfig+0x344>)
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	0019      	movs	r1, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	021a      	lsls	r2, r3, #8
 8001ee0:	4b3f      	ldr	r3, [pc, #252]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	605a      	str	r2, [r3, #4]
 8001ee6:	e018      	b.n	8001f1a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ee8:	4b3d      	ldr	r3, [pc, #244]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	4b3c      	ldr	r3, [pc, #240]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001eee:	2101      	movs	r1, #1
 8001ef0:	438a      	bics	r2, r1
 8001ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef4:	f7ff f992 	bl	800121c <HAL_GetTick>
 8001ef8:	0003      	movs	r3, r0
 8001efa:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001efc:	e008      	b.n	8001f10 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001efe:	f7ff f98d 	bl	800121c <HAL_GetTick>
 8001f02:	0002      	movs	r2, r0
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e291      	b.n	8002434 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f10:	4b33      	ldr	r3, [pc, #204]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2204      	movs	r2, #4
 8001f16:	4013      	ands	r3, r2
 8001f18:	d1f1      	bne.n	8001efe <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2210      	movs	r2, #16
 8001f20:	4013      	ands	r3, r2
 8001f22:	d100      	bne.n	8001f26 <HAL_RCC_OscConfig+0x27e>
 8001f24:	e09f      	b.n	8002066 <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d13f      	bne.n	8001fac <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f2c:	4b2c      	ldr	r3, [pc, #176]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	2380      	movs	r3, #128	; 0x80
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4013      	ands	r3, r2
 8001f36:	d005      	beq.n	8001f44 <HAL_RCC_OscConfig+0x29c>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	69db      	ldr	r3, [r3, #28]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e277      	b.n	8002434 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f44:	4b26      	ldr	r3, [pc, #152]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	4a2b      	ldr	r2, [pc, #172]	; (8001ff8 <HAL_RCC_OscConfig+0x350>)
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	0019      	movs	r1, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f52:	4b23      	ldr	r3, [pc, #140]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001f54:	430a      	orrs	r2, r1
 8001f56:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f58:	4b21      	ldr	r3, [pc, #132]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	021b      	lsls	r3, r3, #8
 8001f5e:	0a19      	lsrs	r1, r3, #8
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	061a      	lsls	r2, r3, #24
 8001f66:	4b1e      	ldr	r3, [pc, #120]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f70:	0b5b      	lsrs	r3, r3, #13
 8001f72:	3301      	adds	r3, #1
 8001f74:	2280      	movs	r2, #128	; 0x80
 8001f76:	0212      	lsls	r2, r2, #8
 8001f78:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001f7a:	4b19      	ldr	r3, [pc, #100]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	091b      	lsrs	r3, r3, #4
 8001f80:	210f      	movs	r1, #15
 8001f82:	400b      	ands	r3, r1
 8001f84:	491a      	ldr	r1, [pc, #104]	; (8001ff0 <HAL_RCC_OscConfig+0x348>)
 8001f86:	5ccb      	ldrb	r3, [r1, r3]
 8001f88:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001f8a:	4b1a      	ldr	r3, [pc, #104]	; (8001ff4 <HAL_RCC_OscConfig+0x34c>)
 8001f8c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001f8e:	2513      	movs	r5, #19
 8001f90:	197c      	adds	r4, r7, r5
 8001f92:	2000      	movs	r0, #0
 8001f94:	f7ff f90c 	bl	80011b0 <HAL_InitTick>
 8001f98:	0003      	movs	r3, r0
 8001f9a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001f9c:	197b      	adds	r3, r7, r5
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d060      	beq.n	8002066 <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8001fa4:	2313      	movs	r3, #19
 8001fa6:	18fb      	adds	r3, r7, r3
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	e243      	b.n	8002434 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	69db      	ldr	r3, [r3, #28]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d03e      	beq.n	8002032 <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001fb4:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	4b09      	ldr	r3, [pc, #36]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001fba:	2180      	movs	r1, #128	; 0x80
 8001fbc:	0049      	lsls	r1, r1, #1
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc2:	f7ff f92b 	bl	800121c <HAL_GetTick>
 8001fc6:	0003      	movs	r3, r0
 8001fc8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001fca:	e017      	b.n	8001ffc <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fcc:	f7ff f926 	bl	800121c <HAL_GetTick>
 8001fd0:	0002      	movs	r2, r0
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d910      	bls.n	8001ffc <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e22a      	b.n	8002434 <HAL_RCC_OscConfig+0x78c>
 8001fde:	46c0      	nop			; (mov r8, r8)
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	fffeffff 	.word	0xfffeffff
 8001fe8:	fffbffff 	.word	0xfffbffff
 8001fec:	ffffe0ff 	.word	0xffffe0ff
 8001ff0:	08002fa0 	.word	0x08002fa0
 8001ff4:	20000000 	.word	0x20000000
 8001ff8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001ffc:	4bc6      	ldr	r3, [pc, #792]	; (8002318 <HAL_RCC_OscConfig+0x670>)
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	2380      	movs	r3, #128	; 0x80
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4013      	ands	r3, r2
 8002006:	d0e1      	beq.n	8001fcc <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002008:	4bc3      	ldr	r3, [pc, #780]	; (8002318 <HAL_RCC_OscConfig+0x670>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	4ac3      	ldr	r2, [pc, #780]	; (800231c <HAL_RCC_OscConfig+0x674>)
 800200e:	4013      	ands	r3, r2
 8002010:	0019      	movs	r1, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002016:	4bc0      	ldr	r3, [pc, #768]	; (8002318 <HAL_RCC_OscConfig+0x670>)
 8002018:	430a      	orrs	r2, r1
 800201a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800201c:	4bbe      	ldr	r3, [pc, #760]	; (8002318 <HAL_RCC_OscConfig+0x670>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	021b      	lsls	r3, r3, #8
 8002022:	0a19      	lsrs	r1, r3, #8
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a1b      	ldr	r3, [r3, #32]
 8002028:	061a      	lsls	r2, r3, #24
 800202a:	4bbb      	ldr	r3, [pc, #748]	; (8002318 <HAL_RCC_OscConfig+0x670>)
 800202c:	430a      	orrs	r2, r1
 800202e:	605a      	str	r2, [r3, #4]
 8002030:	e019      	b.n	8002066 <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002032:	4bb9      	ldr	r3, [pc, #740]	; (8002318 <HAL_RCC_OscConfig+0x670>)
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	4bb8      	ldr	r3, [pc, #736]	; (8002318 <HAL_RCC_OscConfig+0x670>)
 8002038:	49b9      	ldr	r1, [pc, #740]	; (8002320 <HAL_RCC_OscConfig+0x678>)
 800203a:	400a      	ands	r2, r1
 800203c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203e:	f7ff f8ed 	bl	800121c <HAL_GetTick>
 8002042:	0003      	movs	r3, r0
 8002044:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002048:	f7ff f8e8 	bl	800121c <HAL_GetTick>
 800204c:	0002      	movs	r2, r0
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e1ec      	b.n	8002434 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800205a:	4baf      	ldr	r3, [pc, #700]	; (8002318 <HAL_RCC_OscConfig+0x670>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	2380      	movs	r3, #128	; 0x80
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4013      	ands	r3, r2
 8002064:	d1f0      	bne.n	8002048 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2208      	movs	r2, #8
 800206c:	4013      	ands	r3, r2
 800206e:	d036      	beq.n	80020de <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d019      	beq.n	80020ac <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002078:	4ba7      	ldr	r3, [pc, #668]	; (8002318 <HAL_RCC_OscConfig+0x670>)
 800207a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800207c:	4ba6      	ldr	r3, [pc, #664]	; (8002318 <HAL_RCC_OscConfig+0x670>)
 800207e:	2101      	movs	r1, #1
 8002080:	430a      	orrs	r2, r1
 8002082:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002084:	f7ff f8ca 	bl	800121c <HAL_GetTick>
 8002088:	0003      	movs	r3, r0
 800208a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800208c:	e008      	b.n	80020a0 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800208e:	f7ff f8c5 	bl	800121c <HAL_GetTick>
 8002092:	0002      	movs	r2, r0
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e1c9      	b.n	8002434 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80020a0:	4b9d      	ldr	r3, [pc, #628]	; (8002318 <HAL_RCC_OscConfig+0x670>)
 80020a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020a4:	2202      	movs	r2, #2
 80020a6:	4013      	ands	r3, r2
 80020a8:	d0f1      	beq.n	800208e <HAL_RCC_OscConfig+0x3e6>
 80020aa:	e018      	b.n	80020de <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020ac:	4b9a      	ldr	r3, [pc, #616]	; (8002318 <HAL_RCC_OscConfig+0x670>)
 80020ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020b0:	4b99      	ldr	r3, [pc, #612]	; (8002318 <HAL_RCC_OscConfig+0x670>)
 80020b2:	2101      	movs	r1, #1
 80020b4:	438a      	bics	r2, r1
 80020b6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b8:	f7ff f8b0 	bl	800121c <HAL_GetTick>
 80020bc:	0003      	movs	r3, r0
 80020be:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80020c0:	e008      	b.n	80020d4 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020c2:	f7ff f8ab 	bl	800121c <HAL_GetTick>
 80020c6:	0002      	movs	r2, r0
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e1af      	b.n	8002434 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80020d4:	4b90      	ldr	r3, [pc, #576]	; (8002318 <HAL_RCC_OscConfig+0x670>)
 80020d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020d8:	2202      	movs	r2, #2
 80020da:	4013      	ands	r3, r2
 80020dc:	d1f1      	bne.n	80020c2 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2204      	movs	r2, #4
 80020e4:	4013      	ands	r3, r2
 80020e6:	d100      	bne.n	80020ea <HAL_RCC_OscConfig+0x442>
 80020e8:	e0af      	b.n	800224a <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ea:	2323      	movs	r3, #35	; 0x23
 80020ec:	18fb      	adds	r3, r7, r3
 80020ee:	2200      	movs	r2, #0
 80020f0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020f2:	4b89      	ldr	r3, [pc, #548]	; (8002318 <HAL_RCC_OscConfig+0x670>)
 80020f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020f6:	2380      	movs	r3, #128	; 0x80
 80020f8:	055b      	lsls	r3, r3, #21
 80020fa:	4013      	ands	r3, r2
 80020fc:	d10a      	bne.n	8002114 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020fe:	4b86      	ldr	r3, [pc, #536]	; (8002318 <HAL_RCC_OscConfig+0x670>)
 8002100:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002102:	4b85      	ldr	r3, [pc, #532]	; (8002318 <HAL_RCC_OscConfig+0x670>)
 8002104:	2180      	movs	r1, #128	; 0x80
 8002106:	0549      	lsls	r1, r1, #21
 8002108:	430a      	orrs	r2, r1
 800210a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800210c:	2323      	movs	r3, #35	; 0x23
 800210e:	18fb      	adds	r3, r7, r3
 8002110:	2201      	movs	r2, #1
 8002112:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002114:	4b83      	ldr	r3, [pc, #524]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	2380      	movs	r3, #128	; 0x80
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	4013      	ands	r3, r2
 800211e:	d11a      	bne.n	8002156 <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002120:	4b80      	ldr	r3, [pc, #512]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	4b7f      	ldr	r3, [pc, #508]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 8002126:	2180      	movs	r1, #128	; 0x80
 8002128:	0049      	lsls	r1, r1, #1
 800212a:	430a      	orrs	r2, r1
 800212c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800212e:	f7ff f875 	bl	800121c <HAL_GetTick>
 8002132:	0003      	movs	r3, r0
 8002134:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002138:	f7ff f870 	bl	800121c <HAL_GetTick>
 800213c:	0002      	movs	r2, r0
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b64      	cmp	r3, #100	; 0x64
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e174      	b.n	8002434 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800214a:	4b76      	ldr	r3, [pc, #472]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	2380      	movs	r3, #128	; 0x80
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	4013      	ands	r3, r2
 8002154:	d0f0      	beq.n	8002138 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689a      	ldr	r2, [r3, #8]
 800215a:	2380      	movs	r3, #128	; 0x80
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	429a      	cmp	r2, r3
 8002160:	d107      	bne.n	8002172 <HAL_RCC_OscConfig+0x4ca>
 8002162:	4b6d      	ldr	r3, [pc, #436]	; (8002318 <HAL_RCC_OscConfig+0x670>)
 8002164:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002166:	4b6c      	ldr	r3, [pc, #432]	; (8002318 <HAL_RCC_OscConfig+0x670>)
 8002168:	2180      	movs	r1, #128	; 0x80
 800216a:	0049      	lsls	r1, r1, #1
 800216c:	430a      	orrs	r2, r1
 800216e:	651a      	str	r2, [r3, #80]	; 0x50
 8002170:	e031      	b.n	80021d6 <HAL_RCC_OscConfig+0x52e>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10c      	bne.n	8002194 <HAL_RCC_OscConfig+0x4ec>
 800217a:	4b67      	ldr	r3, [pc, #412]	; (8002318 <HAL_RCC_OscConfig+0x670>)
 800217c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800217e:	4b66      	ldr	r3, [pc, #408]	; (8002318 <HAL_RCC_OscConfig+0x670>)
 8002180:	4967      	ldr	r1, [pc, #412]	; (8002320 <HAL_RCC_OscConfig+0x678>)
 8002182:	400a      	ands	r2, r1
 8002184:	651a      	str	r2, [r3, #80]	; 0x50
 8002186:	4b64      	ldr	r3, [pc, #400]	; (8002318 <HAL_RCC_OscConfig+0x670>)
 8002188:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800218a:	4b63      	ldr	r3, [pc, #396]	; (8002318 <HAL_RCC_OscConfig+0x670>)
 800218c:	4966      	ldr	r1, [pc, #408]	; (8002328 <HAL_RCC_OscConfig+0x680>)
 800218e:	400a      	ands	r2, r1
 8002190:	651a      	str	r2, [r3, #80]	; 0x50
 8002192:	e020      	b.n	80021d6 <HAL_RCC_OscConfig+0x52e>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	23a0      	movs	r3, #160	; 0xa0
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	429a      	cmp	r2, r3
 800219e:	d10e      	bne.n	80021be <HAL_RCC_OscConfig+0x516>
 80021a0:	4b5d      	ldr	r3, [pc, #372]	; (8002318 <HAL_RCC_OscConfig+0x670>)
 80021a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021a4:	4b5c      	ldr	r3, [pc, #368]	; (8002318 <HAL_RCC_OscConfig+0x670>)
 80021a6:	2180      	movs	r1, #128	; 0x80
 80021a8:	00c9      	lsls	r1, r1, #3
 80021aa:	430a      	orrs	r2, r1
 80021ac:	651a      	str	r2, [r3, #80]	; 0x50
 80021ae:	4b5a      	ldr	r3, [pc, #360]	; (8002318 <HAL_RCC_OscConfig+0x670>)
 80021b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021b2:	4b59      	ldr	r3, [pc, #356]	; (8002318 <HAL_RCC_OscConfig+0x670>)
 80021b4:	2180      	movs	r1, #128	; 0x80
 80021b6:	0049      	lsls	r1, r1, #1
 80021b8:	430a      	orrs	r2, r1
 80021ba:	651a      	str	r2, [r3, #80]	; 0x50
 80021bc:	e00b      	b.n	80021d6 <HAL_RCC_OscConfig+0x52e>
 80021be:	4b56      	ldr	r3, [pc, #344]	; (8002318 <HAL_RCC_OscConfig+0x670>)
 80021c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021c2:	4b55      	ldr	r3, [pc, #340]	; (8002318 <HAL_RCC_OscConfig+0x670>)
 80021c4:	4956      	ldr	r1, [pc, #344]	; (8002320 <HAL_RCC_OscConfig+0x678>)
 80021c6:	400a      	ands	r2, r1
 80021c8:	651a      	str	r2, [r3, #80]	; 0x50
 80021ca:	4b53      	ldr	r3, [pc, #332]	; (8002318 <HAL_RCC_OscConfig+0x670>)
 80021cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021ce:	4b52      	ldr	r3, [pc, #328]	; (8002318 <HAL_RCC_OscConfig+0x670>)
 80021d0:	4955      	ldr	r1, [pc, #340]	; (8002328 <HAL_RCC_OscConfig+0x680>)
 80021d2:	400a      	ands	r2, r1
 80021d4:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d015      	beq.n	800220a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021de:	f7ff f81d 	bl	800121c <HAL_GetTick>
 80021e2:	0003      	movs	r3, r0
 80021e4:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021e6:	e009      	b.n	80021fc <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021e8:	f7ff f818 	bl	800121c <HAL_GetTick>
 80021ec:	0002      	movs	r2, r0
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	4a4e      	ldr	r2, [pc, #312]	; (800232c <HAL_RCC_OscConfig+0x684>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e11b      	b.n	8002434 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021fc:	4b46      	ldr	r3, [pc, #280]	; (8002318 <HAL_RCC_OscConfig+0x670>)
 80021fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002200:	2380      	movs	r3, #128	; 0x80
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4013      	ands	r3, r2
 8002206:	d0ef      	beq.n	80021e8 <HAL_RCC_OscConfig+0x540>
 8002208:	e014      	b.n	8002234 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800220a:	f7ff f807 	bl	800121c <HAL_GetTick>
 800220e:	0003      	movs	r3, r0
 8002210:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002212:	e009      	b.n	8002228 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002214:	f7ff f802 	bl	800121c <HAL_GetTick>
 8002218:	0002      	movs	r2, r0
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	4a43      	ldr	r2, [pc, #268]	; (800232c <HAL_RCC_OscConfig+0x684>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e105      	b.n	8002434 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002228:	4b3b      	ldr	r3, [pc, #236]	; (8002318 <HAL_RCC_OscConfig+0x670>)
 800222a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800222c:	2380      	movs	r3, #128	; 0x80
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4013      	ands	r3, r2
 8002232:	d1ef      	bne.n	8002214 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002234:	2323      	movs	r3, #35	; 0x23
 8002236:	18fb      	adds	r3, r7, r3
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d105      	bne.n	800224a <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800223e:	4b36      	ldr	r3, [pc, #216]	; (8002318 <HAL_RCC_OscConfig+0x670>)
 8002240:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002242:	4b35      	ldr	r3, [pc, #212]	; (8002318 <HAL_RCC_OscConfig+0x670>)
 8002244:	493a      	ldr	r1, [pc, #232]	; (8002330 <HAL_RCC_OscConfig+0x688>)
 8002246:	400a      	ands	r2, r1
 8002248:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2220      	movs	r2, #32
 8002250:	4013      	ands	r3, r2
 8002252:	d049      	beq.n	80022e8 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d026      	beq.n	80022aa <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800225c:	4b2e      	ldr	r3, [pc, #184]	; (8002318 <HAL_RCC_OscConfig+0x670>)
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	4b2d      	ldr	r3, [pc, #180]	; (8002318 <HAL_RCC_OscConfig+0x670>)
 8002262:	2101      	movs	r1, #1
 8002264:	430a      	orrs	r2, r1
 8002266:	609a      	str	r2, [r3, #8]
 8002268:	4b2b      	ldr	r3, [pc, #172]	; (8002318 <HAL_RCC_OscConfig+0x670>)
 800226a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800226c:	4b2a      	ldr	r3, [pc, #168]	; (8002318 <HAL_RCC_OscConfig+0x670>)
 800226e:	2101      	movs	r1, #1
 8002270:	430a      	orrs	r2, r1
 8002272:	635a      	str	r2, [r3, #52]	; 0x34
 8002274:	4b2f      	ldr	r3, [pc, #188]	; (8002334 <HAL_RCC_OscConfig+0x68c>)
 8002276:	6a1a      	ldr	r2, [r3, #32]
 8002278:	4b2e      	ldr	r3, [pc, #184]	; (8002334 <HAL_RCC_OscConfig+0x68c>)
 800227a:	2180      	movs	r1, #128	; 0x80
 800227c:	0189      	lsls	r1, r1, #6
 800227e:	430a      	orrs	r2, r1
 8002280:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002282:	f7fe ffcb 	bl	800121c <HAL_GetTick>
 8002286:	0003      	movs	r3, r0
 8002288:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800228c:	f7fe ffc6 	bl	800121c <HAL_GetTick>
 8002290:	0002      	movs	r2, r0
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e0ca      	b.n	8002434 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800229e:	4b1e      	ldr	r3, [pc, #120]	; (8002318 <HAL_RCC_OscConfig+0x670>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	2202      	movs	r2, #2
 80022a4:	4013      	ands	r3, r2
 80022a6:	d0f1      	beq.n	800228c <HAL_RCC_OscConfig+0x5e4>
 80022a8:	e01e      	b.n	80022e8 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80022aa:	4b1b      	ldr	r3, [pc, #108]	; (8002318 <HAL_RCC_OscConfig+0x670>)
 80022ac:	689a      	ldr	r2, [r3, #8]
 80022ae:	4b1a      	ldr	r3, [pc, #104]	; (8002318 <HAL_RCC_OscConfig+0x670>)
 80022b0:	2101      	movs	r1, #1
 80022b2:	438a      	bics	r2, r1
 80022b4:	609a      	str	r2, [r3, #8]
 80022b6:	4b1f      	ldr	r3, [pc, #124]	; (8002334 <HAL_RCC_OscConfig+0x68c>)
 80022b8:	6a1a      	ldr	r2, [r3, #32]
 80022ba:	4b1e      	ldr	r3, [pc, #120]	; (8002334 <HAL_RCC_OscConfig+0x68c>)
 80022bc:	491e      	ldr	r1, [pc, #120]	; (8002338 <HAL_RCC_OscConfig+0x690>)
 80022be:	400a      	ands	r2, r1
 80022c0:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c2:	f7fe ffab 	bl	800121c <HAL_GetTick>
 80022c6:	0003      	movs	r3, r0
 80022c8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022cc:	f7fe ffa6 	bl	800121c <HAL_GetTick>
 80022d0:	0002      	movs	r2, r0
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e0aa      	b.n	8002434 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80022de:	4b0e      	ldr	r3, [pc, #56]	; (8002318 <HAL_RCC_OscConfig+0x670>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	2202      	movs	r2, #2
 80022e4:	4013      	ands	r3, r2
 80022e6:	d1f1      	bne.n	80022cc <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d100      	bne.n	80022f2 <HAL_RCC_OscConfig+0x64a>
 80022f0:	e09f      	b.n	8002432 <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	2b0c      	cmp	r3, #12
 80022f6:	d100      	bne.n	80022fa <HAL_RCC_OscConfig+0x652>
 80022f8:	e078      	b.n	80023ec <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d159      	bne.n	80023b6 <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002302:	4b05      	ldr	r3, [pc, #20]	; (8002318 <HAL_RCC_OscConfig+0x670>)
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	4b04      	ldr	r3, [pc, #16]	; (8002318 <HAL_RCC_OscConfig+0x670>)
 8002308:	490c      	ldr	r1, [pc, #48]	; (800233c <HAL_RCC_OscConfig+0x694>)
 800230a:	400a      	ands	r2, r1
 800230c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230e:	f7fe ff85 	bl	800121c <HAL_GetTick>
 8002312:	0003      	movs	r3, r0
 8002314:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002316:	e01c      	b.n	8002352 <HAL_RCC_OscConfig+0x6aa>
 8002318:	40021000 	.word	0x40021000
 800231c:	ffff1fff 	.word	0xffff1fff
 8002320:	fffffeff 	.word	0xfffffeff
 8002324:	40007000 	.word	0x40007000
 8002328:	fffffbff 	.word	0xfffffbff
 800232c:	00001388 	.word	0x00001388
 8002330:	efffffff 	.word	0xefffffff
 8002334:	40010000 	.word	0x40010000
 8002338:	ffffdfff 	.word	0xffffdfff
 800233c:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002340:	f7fe ff6c 	bl	800121c <HAL_GetTick>
 8002344:	0002      	movs	r2, r0
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e070      	b.n	8002434 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002352:	4b3a      	ldr	r3, [pc, #232]	; (800243c <HAL_RCC_OscConfig+0x794>)
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	2380      	movs	r3, #128	; 0x80
 8002358:	049b      	lsls	r3, r3, #18
 800235a:	4013      	ands	r3, r2
 800235c:	d1f0      	bne.n	8002340 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800235e:	4b37      	ldr	r3, [pc, #220]	; (800243c <HAL_RCC_OscConfig+0x794>)
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	4a37      	ldr	r2, [pc, #220]	; (8002440 <HAL_RCC_OscConfig+0x798>)
 8002364:	4013      	ands	r3, r2
 8002366:	0019      	movs	r1, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002370:	431a      	orrs	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002376:	431a      	orrs	r2, r3
 8002378:	4b30      	ldr	r3, [pc, #192]	; (800243c <HAL_RCC_OscConfig+0x794>)
 800237a:	430a      	orrs	r2, r1
 800237c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800237e:	4b2f      	ldr	r3, [pc, #188]	; (800243c <HAL_RCC_OscConfig+0x794>)
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	4b2e      	ldr	r3, [pc, #184]	; (800243c <HAL_RCC_OscConfig+0x794>)
 8002384:	2180      	movs	r1, #128	; 0x80
 8002386:	0449      	lsls	r1, r1, #17
 8002388:	430a      	orrs	r2, r1
 800238a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238c:	f7fe ff46 	bl	800121c <HAL_GetTick>
 8002390:	0003      	movs	r3, r0
 8002392:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002394:	e008      	b.n	80023a8 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002396:	f7fe ff41 	bl	800121c <HAL_GetTick>
 800239a:	0002      	movs	r2, r0
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e045      	b.n	8002434 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80023a8:	4b24      	ldr	r3, [pc, #144]	; (800243c <HAL_RCC_OscConfig+0x794>)
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	2380      	movs	r3, #128	; 0x80
 80023ae:	049b      	lsls	r3, r3, #18
 80023b0:	4013      	ands	r3, r2
 80023b2:	d0f0      	beq.n	8002396 <HAL_RCC_OscConfig+0x6ee>
 80023b4:	e03d      	b.n	8002432 <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023b6:	4b21      	ldr	r3, [pc, #132]	; (800243c <HAL_RCC_OscConfig+0x794>)
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	4b20      	ldr	r3, [pc, #128]	; (800243c <HAL_RCC_OscConfig+0x794>)
 80023bc:	4921      	ldr	r1, [pc, #132]	; (8002444 <HAL_RCC_OscConfig+0x79c>)
 80023be:	400a      	ands	r2, r1
 80023c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c2:	f7fe ff2b 	bl	800121c <HAL_GetTick>
 80023c6:	0003      	movs	r3, r0
 80023c8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023cc:	f7fe ff26 	bl	800121c <HAL_GetTick>
 80023d0:	0002      	movs	r2, r0
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e02a      	b.n	8002434 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80023de:	4b17      	ldr	r3, [pc, #92]	; (800243c <HAL_RCC_OscConfig+0x794>)
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	2380      	movs	r3, #128	; 0x80
 80023e4:	049b      	lsls	r3, r3, #18
 80023e6:	4013      	ands	r3, r2
 80023e8:	d1f0      	bne.n	80023cc <HAL_RCC_OscConfig+0x724>
 80023ea:	e022      	b.n	8002432 <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d101      	bne.n	80023f8 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e01d      	b.n	8002434 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023f8:	4b10      	ldr	r3, [pc, #64]	; (800243c <HAL_RCC_OscConfig+0x794>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	2380      	movs	r3, #128	; 0x80
 8002402:	025b      	lsls	r3, r3, #9
 8002404:	401a      	ands	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240a:	429a      	cmp	r2, r3
 800240c:	d10f      	bne.n	800242e <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	23f0      	movs	r3, #240	; 0xf0
 8002412:	039b      	lsls	r3, r3, #14
 8002414:	401a      	ands	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800241a:	429a      	cmp	r2, r3
 800241c:	d107      	bne.n	800242e <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	23c0      	movs	r3, #192	; 0xc0
 8002422:	041b      	lsls	r3, r3, #16
 8002424:	401a      	ands	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800242a:	429a      	cmp	r2, r3
 800242c:	d001      	beq.n	8002432 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e000      	b.n	8002434 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	0018      	movs	r0, r3
 8002436:	46bd      	mov	sp, r7
 8002438:	b00a      	add	sp, #40	; 0x28
 800243a:	bdb0      	pop	{r4, r5, r7, pc}
 800243c:	40021000 	.word	0x40021000
 8002440:	ff02ffff 	.word	0xff02ffff
 8002444:	feffffff 	.word	0xfeffffff

08002448 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002448:	b5b0      	push	{r4, r5, r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d101      	bne.n	800245c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e10d      	b.n	8002678 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800245c:	4b88      	ldr	r3, [pc, #544]	; (8002680 <HAL_RCC_ClockConfig+0x238>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2201      	movs	r2, #1
 8002462:	4013      	ands	r3, r2
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	429a      	cmp	r2, r3
 8002468:	d911      	bls.n	800248e <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800246a:	4b85      	ldr	r3, [pc, #532]	; (8002680 <HAL_RCC_ClockConfig+0x238>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2201      	movs	r2, #1
 8002470:	4393      	bics	r3, r2
 8002472:	0019      	movs	r1, r3
 8002474:	4b82      	ldr	r3, [pc, #520]	; (8002680 <HAL_RCC_ClockConfig+0x238>)
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	430a      	orrs	r2, r1
 800247a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800247c:	4b80      	ldr	r3, [pc, #512]	; (8002680 <HAL_RCC_ClockConfig+0x238>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2201      	movs	r2, #1
 8002482:	4013      	ands	r3, r2
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	429a      	cmp	r2, r3
 8002488:	d001      	beq.n	800248e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e0f4      	b.n	8002678 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2202      	movs	r2, #2
 8002494:	4013      	ands	r3, r2
 8002496:	d009      	beq.n	80024ac <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002498:	4b7a      	ldr	r3, [pc, #488]	; (8002684 <HAL_RCC_ClockConfig+0x23c>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	22f0      	movs	r2, #240	; 0xf0
 800249e:	4393      	bics	r3, r2
 80024a0:	0019      	movs	r1, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	689a      	ldr	r2, [r3, #8]
 80024a6:	4b77      	ldr	r3, [pc, #476]	; (8002684 <HAL_RCC_ClockConfig+0x23c>)
 80024a8:	430a      	orrs	r2, r1
 80024aa:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2201      	movs	r2, #1
 80024b2:	4013      	ands	r3, r2
 80024b4:	d100      	bne.n	80024b8 <HAL_RCC_ClockConfig+0x70>
 80024b6:	e089      	b.n	80025cc <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d107      	bne.n	80024d0 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024c0:	4b70      	ldr	r3, [pc, #448]	; (8002684 <HAL_RCC_ClockConfig+0x23c>)
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	2380      	movs	r3, #128	; 0x80
 80024c6:	029b      	lsls	r3, r3, #10
 80024c8:	4013      	ands	r3, r2
 80024ca:	d120      	bne.n	800250e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e0d3      	b.n	8002678 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2b03      	cmp	r3, #3
 80024d6:	d107      	bne.n	80024e8 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80024d8:	4b6a      	ldr	r3, [pc, #424]	; (8002684 <HAL_RCC_ClockConfig+0x23c>)
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	2380      	movs	r3, #128	; 0x80
 80024de:	049b      	lsls	r3, r3, #18
 80024e0:	4013      	ands	r3, r2
 80024e2:	d114      	bne.n	800250e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e0c7      	b.n	8002678 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d106      	bne.n	80024fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024f0:	4b64      	ldr	r3, [pc, #400]	; (8002684 <HAL_RCC_ClockConfig+0x23c>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2204      	movs	r2, #4
 80024f6:	4013      	ands	r3, r2
 80024f8:	d109      	bne.n	800250e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e0bc      	b.n	8002678 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80024fe:	4b61      	ldr	r3, [pc, #388]	; (8002684 <HAL_RCC_ClockConfig+0x23c>)
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	2380      	movs	r3, #128	; 0x80
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	4013      	ands	r3, r2
 8002508:	d101      	bne.n	800250e <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e0b4      	b.n	8002678 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800250e:	4b5d      	ldr	r3, [pc, #372]	; (8002684 <HAL_RCC_ClockConfig+0x23c>)
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	2203      	movs	r2, #3
 8002514:	4393      	bics	r3, r2
 8002516:	0019      	movs	r1, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685a      	ldr	r2, [r3, #4]
 800251c:	4b59      	ldr	r3, [pc, #356]	; (8002684 <HAL_RCC_ClockConfig+0x23c>)
 800251e:	430a      	orrs	r2, r1
 8002520:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002522:	f7fe fe7b 	bl	800121c <HAL_GetTick>
 8002526:	0003      	movs	r3, r0
 8002528:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	2b02      	cmp	r3, #2
 8002530:	d111      	bne.n	8002556 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002532:	e009      	b.n	8002548 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002534:	f7fe fe72 	bl	800121c <HAL_GetTick>
 8002538:	0002      	movs	r2, r0
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	4a52      	ldr	r2, [pc, #328]	; (8002688 <HAL_RCC_ClockConfig+0x240>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e097      	b.n	8002678 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002548:	4b4e      	ldr	r3, [pc, #312]	; (8002684 <HAL_RCC_ClockConfig+0x23c>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	220c      	movs	r2, #12
 800254e:	4013      	ands	r3, r2
 8002550:	2b08      	cmp	r3, #8
 8002552:	d1ef      	bne.n	8002534 <HAL_RCC_ClockConfig+0xec>
 8002554:	e03a      	b.n	80025cc <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b03      	cmp	r3, #3
 800255c:	d111      	bne.n	8002582 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800255e:	e009      	b.n	8002574 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002560:	f7fe fe5c 	bl	800121c <HAL_GetTick>
 8002564:	0002      	movs	r2, r0
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	4a47      	ldr	r2, [pc, #284]	; (8002688 <HAL_RCC_ClockConfig+0x240>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e081      	b.n	8002678 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002574:	4b43      	ldr	r3, [pc, #268]	; (8002684 <HAL_RCC_ClockConfig+0x23c>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	220c      	movs	r2, #12
 800257a:	4013      	ands	r3, r2
 800257c:	2b0c      	cmp	r3, #12
 800257e:	d1ef      	bne.n	8002560 <HAL_RCC_ClockConfig+0x118>
 8002580:	e024      	b.n	80025cc <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d11b      	bne.n	80025c2 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800258a:	e009      	b.n	80025a0 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800258c:	f7fe fe46 	bl	800121c <HAL_GetTick>
 8002590:	0002      	movs	r2, r0
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	4a3c      	ldr	r2, [pc, #240]	; (8002688 <HAL_RCC_ClockConfig+0x240>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e06b      	b.n	8002678 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80025a0:	4b38      	ldr	r3, [pc, #224]	; (8002684 <HAL_RCC_ClockConfig+0x23c>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	220c      	movs	r2, #12
 80025a6:	4013      	ands	r3, r2
 80025a8:	2b04      	cmp	r3, #4
 80025aa:	d1ef      	bne.n	800258c <HAL_RCC_ClockConfig+0x144>
 80025ac:	e00e      	b.n	80025cc <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ae:	f7fe fe35 	bl	800121c <HAL_GetTick>
 80025b2:	0002      	movs	r2, r0
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	4a33      	ldr	r2, [pc, #204]	; (8002688 <HAL_RCC_ClockConfig+0x240>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e05a      	b.n	8002678 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80025c2:	4b30      	ldr	r3, [pc, #192]	; (8002684 <HAL_RCC_ClockConfig+0x23c>)
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	220c      	movs	r2, #12
 80025c8:	4013      	ands	r3, r2
 80025ca:	d1f0      	bne.n	80025ae <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025cc:	4b2c      	ldr	r3, [pc, #176]	; (8002680 <HAL_RCC_ClockConfig+0x238>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2201      	movs	r2, #1
 80025d2:	4013      	ands	r3, r2
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d211      	bcs.n	80025fe <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025da:	4b29      	ldr	r3, [pc, #164]	; (8002680 <HAL_RCC_ClockConfig+0x238>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2201      	movs	r2, #1
 80025e0:	4393      	bics	r3, r2
 80025e2:	0019      	movs	r1, r3
 80025e4:	4b26      	ldr	r3, [pc, #152]	; (8002680 <HAL_RCC_ClockConfig+0x238>)
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	430a      	orrs	r2, r1
 80025ea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ec:	4b24      	ldr	r3, [pc, #144]	; (8002680 <HAL_RCC_ClockConfig+0x238>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2201      	movs	r2, #1
 80025f2:	4013      	ands	r3, r2
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d001      	beq.n	80025fe <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e03c      	b.n	8002678 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2204      	movs	r2, #4
 8002604:	4013      	ands	r3, r2
 8002606:	d009      	beq.n	800261c <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002608:	4b1e      	ldr	r3, [pc, #120]	; (8002684 <HAL_RCC_ClockConfig+0x23c>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	4a1f      	ldr	r2, [pc, #124]	; (800268c <HAL_RCC_ClockConfig+0x244>)
 800260e:	4013      	ands	r3, r2
 8002610:	0019      	movs	r1, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	68da      	ldr	r2, [r3, #12]
 8002616:	4b1b      	ldr	r3, [pc, #108]	; (8002684 <HAL_RCC_ClockConfig+0x23c>)
 8002618:	430a      	orrs	r2, r1
 800261a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2208      	movs	r2, #8
 8002622:	4013      	ands	r3, r2
 8002624:	d00a      	beq.n	800263c <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002626:	4b17      	ldr	r3, [pc, #92]	; (8002684 <HAL_RCC_ClockConfig+0x23c>)
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	4a19      	ldr	r2, [pc, #100]	; (8002690 <HAL_RCC_ClockConfig+0x248>)
 800262c:	4013      	ands	r3, r2
 800262e:	0019      	movs	r1, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	00da      	lsls	r2, r3, #3
 8002636:	4b13      	ldr	r3, [pc, #76]	; (8002684 <HAL_RCC_ClockConfig+0x23c>)
 8002638:	430a      	orrs	r2, r1
 800263a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800263c:	f000 f82e 	bl	800269c <HAL_RCC_GetSysClockFreq>
 8002640:	0001      	movs	r1, r0
 8002642:	4b10      	ldr	r3, [pc, #64]	; (8002684 <HAL_RCC_ClockConfig+0x23c>)
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	091b      	lsrs	r3, r3, #4
 8002648:	220f      	movs	r2, #15
 800264a:	4013      	ands	r3, r2
 800264c:	4a11      	ldr	r2, [pc, #68]	; (8002694 <HAL_RCC_ClockConfig+0x24c>)
 800264e:	5cd3      	ldrb	r3, [r2, r3]
 8002650:	000a      	movs	r2, r1
 8002652:	40da      	lsrs	r2, r3
 8002654:	4b10      	ldr	r3, [pc, #64]	; (8002698 <HAL_RCC_ClockConfig+0x250>)
 8002656:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8002658:	250b      	movs	r5, #11
 800265a:	197c      	adds	r4, r7, r5
 800265c:	2000      	movs	r0, #0
 800265e:	f7fe fda7 	bl	80011b0 <HAL_InitTick>
 8002662:	0003      	movs	r3, r0
 8002664:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002666:	197b      	adds	r3, r7, r5
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 800266e:	230b      	movs	r3, #11
 8002670:	18fb      	adds	r3, r7, r3
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	e000      	b.n	8002678 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	0018      	movs	r0, r3
 800267a:	46bd      	mov	sp, r7
 800267c:	b004      	add	sp, #16
 800267e:	bdb0      	pop	{r4, r5, r7, pc}
 8002680:	40022000 	.word	0x40022000
 8002684:	40021000 	.word	0x40021000
 8002688:	00001388 	.word	0x00001388
 800268c:	fffff8ff 	.word	0xfffff8ff
 8002690:	ffffc7ff 	.word	0xffffc7ff
 8002694:	08002fa0 	.word	0x08002fa0
 8002698:	20000000 	.word	0x20000000

0800269c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80026a2:	4b3b      	ldr	r3, [pc, #236]	; (8002790 <HAL_RCC_GetSysClockFreq+0xf4>)
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	220c      	movs	r2, #12
 80026ac:	4013      	ands	r3, r2
 80026ae:	2b08      	cmp	r3, #8
 80026b0:	d00e      	beq.n	80026d0 <HAL_RCC_GetSysClockFreq+0x34>
 80026b2:	2b0c      	cmp	r3, #12
 80026b4:	d00f      	beq.n	80026d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	d157      	bne.n	800276a <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80026ba:	4b35      	ldr	r3, [pc, #212]	; (8002790 <HAL_RCC_GetSysClockFreq+0xf4>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2210      	movs	r2, #16
 80026c0:	4013      	ands	r3, r2
 80026c2:	d002      	beq.n	80026ca <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80026c4:	4b33      	ldr	r3, [pc, #204]	; (8002794 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026c6:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80026c8:	e05d      	b.n	8002786 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 80026ca:	4b33      	ldr	r3, [pc, #204]	; (8002798 <HAL_RCC_GetSysClockFreq+0xfc>)
 80026cc:	613b      	str	r3, [r7, #16]
      break;
 80026ce:	e05a      	b.n	8002786 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026d0:	4b32      	ldr	r3, [pc, #200]	; (800279c <HAL_RCC_GetSysClockFreq+0x100>)
 80026d2:	613b      	str	r3, [r7, #16]
      break;
 80026d4:	e057      	b.n	8002786 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	0c9b      	lsrs	r3, r3, #18
 80026da:	220f      	movs	r2, #15
 80026dc:	4013      	ands	r3, r2
 80026de:	4a30      	ldr	r2, [pc, #192]	; (80027a0 <HAL_RCC_GetSysClockFreq+0x104>)
 80026e0:	5cd3      	ldrb	r3, [r2, r3]
 80026e2:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	0d9b      	lsrs	r3, r3, #22
 80026e8:	2203      	movs	r2, #3
 80026ea:	4013      	ands	r3, r2
 80026ec:	3301      	adds	r3, #1
 80026ee:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026f0:	4b27      	ldr	r3, [pc, #156]	; (8002790 <HAL_RCC_GetSysClockFreq+0xf4>)
 80026f2:	68da      	ldr	r2, [r3, #12]
 80026f4:	2380      	movs	r3, #128	; 0x80
 80026f6:	025b      	lsls	r3, r3, #9
 80026f8:	4013      	ands	r3, r2
 80026fa:	d00f      	beq.n	800271c <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80026fc:	68b9      	ldr	r1, [r7, #8]
 80026fe:	000a      	movs	r2, r1
 8002700:	0152      	lsls	r2, r2, #5
 8002702:	1a52      	subs	r2, r2, r1
 8002704:	0193      	lsls	r3, r2, #6
 8002706:	1a9b      	subs	r3, r3, r2
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	185b      	adds	r3, r3, r1
 800270c:	025b      	lsls	r3, r3, #9
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	0018      	movs	r0, r3
 8002712:	f7fd fcf9 	bl	8000108 <__udivsi3>
 8002716:	0003      	movs	r3, r0
 8002718:	617b      	str	r3, [r7, #20]
 800271a:	e023      	b.n	8002764 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800271c:	4b1c      	ldr	r3, [pc, #112]	; (8002790 <HAL_RCC_GetSysClockFreq+0xf4>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2210      	movs	r2, #16
 8002722:	4013      	ands	r3, r2
 8002724:	d00f      	beq.n	8002746 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8002726:	68b9      	ldr	r1, [r7, #8]
 8002728:	000a      	movs	r2, r1
 800272a:	0152      	lsls	r2, r2, #5
 800272c:	1a52      	subs	r2, r2, r1
 800272e:	0193      	lsls	r3, r2, #6
 8002730:	1a9b      	subs	r3, r3, r2
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	185b      	adds	r3, r3, r1
 8002736:	021b      	lsls	r3, r3, #8
 8002738:	6879      	ldr	r1, [r7, #4]
 800273a:	0018      	movs	r0, r3
 800273c:	f7fd fce4 	bl	8000108 <__udivsi3>
 8002740:	0003      	movs	r3, r0
 8002742:	617b      	str	r3, [r7, #20]
 8002744:	e00e      	b.n	8002764 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8002746:	68b9      	ldr	r1, [r7, #8]
 8002748:	000a      	movs	r2, r1
 800274a:	0152      	lsls	r2, r2, #5
 800274c:	1a52      	subs	r2, r2, r1
 800274e:	0193      	lsls	r3, r2, #6
 8002750:	1a9b      	subs	r3, r3, r2
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	185b      	adds	r3, r3, r1
 8002756:	029b      	lsls	r3, r3, #10
 8002758:	6879      	ldr	r1, [r7, #4]
 800275a:	0018      	movs	r0, r3
 800275c:	f7fd fcd4 	bl	8000108 <__udivsi3>
 8002760:	0003      	movs	r3, r0
 8002762:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	613b      	str	r3, [r7, #16]
      break;
 8002768:	e00d      	b.n	8002786 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800276a:	4b09      	ldr	r3, [pc, #36]	; (8002790 <HAL_RCC_GetSysClockFreq+0xf4>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	0b5b      	lsrs	r3, r3, #13
 8002770:	2207      	movs	r2, #7
 8002772:	4013      	ands	r3, r2
 8002774:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	3301      	adds	r3, #1
 800277a:	2280      	movs	r2, #128	; 0x80
 800277c:	0212      	lsls	r2, r2, #8
 800277e:	409a      	lsls	r2, r3
 8002780:	0013      	movs	r3, r2
 8002782:	613b      	str	r3, [r7, #16]
      break;
 8002784:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002786:	693b      	ldr	r3, [r7, #16]
}
 8002788:	0018      	movs	r0, r3
 800278a:	46bd      	mov	sp, r7
 800278c:	b006      	add	sp, #24
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40021000 	.word	0x40021000
 8002794:	003d0900 	.word	0x003d0900
 8002798:	00f42400 	.word	0x00f42400
 800279c:	007a1200 	.word	0x007a1200
 80027a0:	08002fb0 	.word	0x08002fb0

080027a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e059      	b.n	800286a <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2251      	movs	r2, #81	; 0x51
 80027c0:	5c9b      	ldrb	r3, [r3, r2]
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d107      	bne.n	80027d8 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2250      	movs	r2, #80	; 0x50
 80027cc:	2100      	movs	r1, #0
 80027ce:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	0018      	movs	r0, r3
 80027d4:	f7fe fbd6 	bl	8000f84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2251      	movs	r2, #81	; 0x51
 80027dc:	2102      	movs	r1, #2
 80027de:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2140      	movs	r1, #64	; 0x40
 80027ec:	438a      	bics	r2, r1
 80027ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	431a      	orrs	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	431a      	orrs	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	431a      	orrs	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	431a      	orrs	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6999      	ldr	r1, [r3, #24]
 8002810:	2380      	movs	r3, #128	; 0x80
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	400b      	ands	r3, r1
 8002816:	431a      	orrs	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	69db      	ldr	r3, [r3, #28]
 800281c:	431a      	orrs	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	431a      	orrs	r2, r3
 8002824:	0011      	movs	r1, r2
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	430a      	orrs	r2, r1
 8002830:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	0c1b      	lsrs	r3, r3, #16
 8002838:	2204      	movs	r2, #4
 800283a:	4013      	ands	r3, r2
 800283c:	0019      	movs	r1, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	430a      	orrs	r2, r1
 8002848:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	69da      	ldr	r2, [r3, #28]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4907      	ldr	r1, [pc, #28]	; (8002874 <HAL_SPI_Init+0xd0>)
 8002856:	400a      	ands	r2, r1
 8002858:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2251      	movs	r2, #81	; 0x51
 8002864:	2101      	movs	r1, #1
 8002866:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	0018      	movs	r0, r3
 800286c:	46bd      	mov	sp, r7
 800286e:	b002      	add	sp, #8
 8002870:	bd80      	pop	{r7, pc}
 8002872:	46c0      	nop			; (mov r8, r8)
 8002874:	fffff7ff 	.word	0xfffff7ff

08002878 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b088      	sub	sp, #32
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	603b      	str	r3, [r7, #0]
 8002884:	1dbb      	adds	r3, r7, #6
 8002886:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002888:	231f      	movs	r3, #31
 800288a:	18fb      	adds	r3, r7, r3
 800288c:	2200      	movs	r2, #0
 800288e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2250      	movs	r2, #80	; 0x50
 8002894:	5c9b      	ldrb	r3, [r3, r2]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d101      	bne.n	800289e <HAL_SPI_Transmit+0x26>
 800289a:	2302      	movs	r3, #2
 800289c:	e136      	b.n	8002b0c <HAL_SPI_Transmit+0x294>
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2250      	movs	r2, #80	; 0x50
 80028a2:	2101      	movs	r1, #1
 80028a4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028a6:	f7fe fcb9 	bl	800121c <HAL_GetTick>
 80028aa:	0003      	movs	r3, r0
 80028ac:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80028ae:	2316      	movs	r3, #22
 80028b0:	18fb      	adds	r3, r7, r3
 80028b2:	1dba      	adds	r2, r7, #6
 80028b4:	8812      	ldrh	r2, [r2, #0]
 80028b6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2251      	movs	r2, #81	; 0x51
 80028bc:	5c9b      	ldrb	r3, [r3, r2]
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d004      	beq.n	80028ce <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80028c4:	231f      	movs	r3, #31
 80028c6:	18fb      	adds	r3, r7, r3
 80028c8:	2202      	movs	r2, #2
 80028ca:	701a      	strb	r2, [r3, #0]
    goto error;
 80028cc:	e113      	b.n	8002af6 <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d003      	beq.n	80028dc <HAL_SPI_Transmit+0x64>
 80028d4:	1dbb      	adds	r3, r7, #6
 80028d6:	881b      	ldrh	r3, [r3, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d104      	bne.n	80028e6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80028dc:	231f      	movs	r3, #31
 80028de:	18fb      	adds	r3, r7, r3
 80028e0:	2201      	movs	r2, #1
 80028e2:	701a      	strb	r2, [r3, #0]
    goto error;
 80028e4:	e107      	b.n	8002af6 <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2251      	movs	r2, #81	; 0x51
 80028ea:	2103      	movs	r1, #3
 80028ec:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	68ba      	ldr	r2, [r7, #8]
 80028f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	1dba      	adds	r2, r7, #6
 80028fe:	8812      	ldrh	r2, [r2, #0]
 8002900:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	1dba      	adds	r2, r7, #6
 8002906:	8812      	ldrh	r2, [r2, #0]
 8002908:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	2380      	movs	r3, #128	; 0x80
 800292e:	021b      	lsls	r3, r3, #8
 8002930:	429a      	cmp	r2, r3
 8002932:	d108      	bne.n	8002946 <HAL_SPI_Transmit+0xce>
  {
    SPI_1LINE_TX(hspi);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2180      	movs	r1, #128	; 0x80
 8002940:	01c9      	lsls	r1, r1, #7
 8002942:	430a      	orrs	r2, r1
 8002944:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2240      	movs	r2, #64	; 0x40
 800294e:	4013      	ands	r3, r2
 8002950:	2b40      	cmp	r3, #64	; 0x40
 8002952:	d007      	beq.n	8002964 <HAL_SPI_Transmit+0xec>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2140      	movs	r1, #64	; 0x40
 8002960:	430a      	orrs	r2, r1
 8002962:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	68da      	ldr	r2, [r3, #12]
 8002968:	2380      	movs	r3, #128	; 0x80
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	429a      	cmp	r2, r3
 800296e:	d14e      	bne.n	8002a0e <HAL_SPI_Transmit+0x196>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d004      	beq.n	8002982 <HAL_SPI_Transmit+0x10a>
 8002978:	2316      	movs	r3, #22
 800297a:	18fb      	adds	r3, r7, r3
 800297c:	881b      	ldrh	r3, [r3, #0]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d13f      	bne.n	8002a02 <HAL_SPI_Transmit+0x18a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	881a      	ldrh	r2, [r3, #0]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	1c9a      	adds	r2, r3, #2
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800299c:	b29b      	uxth	r3, r3
 800299e:	3b01      	subs	r3, #1
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80029a6:	e02c      	b.n	8002a02 <HAL_SPI_Transmit+0x18a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	2202      	movs	r2, #2
 80029b0:	4013      	ands	r3, r2
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d112      	bne.n	80029dc <HAL_SPI_Transmit+0x164>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ba:	881a      	ldrh	r2, [r3, #0]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	1c9a      	adds	r2, r3, #2
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	3b01      	subs	r3, #1
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	86da      	strh	r2, [r3, #54]	; 0x36
 80029da:	e012      	b.n	8002a02 <HAL_SPI_Transmit+0x18a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029dc:	f7fe fc1e 	bl	800121c <HAL_GetTick>
 80029e0:	0002      	movs	r2, r0
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d802      	bhi.n	80029f2 <HAL_SPI_Transmit+0x17a>
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	3301      	adds	r3, #1
 80029f0:	d102      	bne.n	80029f8 <HAL_SPI_Transmit+0x180>
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d104      	bne.n	8002a02 <HAL_SPI_Transmit+0x18a>
        {
          errorcode = HAL_TIMEOUT;
 80029f8:	231f      	movs	r3, #31
 80029fa:	18fb      	adds	r3, r7, r3
 80029fc:	2203      	movs	r2, #3
 80029fe:	701a      	strb	r2, [r3, #0]
          goto error;
 8002a00:	e079      	b.n	8002af6 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1cd      	bne.n	80029a8 <HAL_SPI_Transmit+0x130>
 8002a0c:	e04f      	b.n	8002aae <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d004      	beq.n	8002a20 <HAL_SPI_Transmit+0x1a8>
 8002a16:	2316      	movs	r3, #22
 8002a18:	18fb      	adds	r3, r7, r3
 8002a1a:	881b      	ldrh	r3, [r3, #0]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d141      	bne.n	8002aa4 <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	330c      	adds	r3, #12
 8002a2a:	7812      	ldrb	r2, [r2, #0]
 8002a2c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	1c5a      	adds	r2, r3, #1
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002a46:	e02d      	b.n	8002aa4 <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	2202      	movs	r2, #2
 8002a50:	4013      	ands	r3, r2
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d113      	bne.n	8002a7e <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	330c      	adds	r3, #12
 8002a60:	7812      	ldrb	r2, [r2, #0]
 8002a62:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a68:	1c5a      	adds	r2, r3, #1
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	3b01      	subs	r3, #1
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a7c:	e012      	b.n	8002aa4 <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a7e:	f7fe fbcd 	bl	800121c <HAL_GetTick>
 8002a82:	0002      	movs	r2, r0
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d802      	bhi.n	8002a94 <HAL_SPI_Transmit+0x21c>
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	3301      	adds	r3, #1
 8002a92:	d102      	bne.n	8002a9a <HAL_SPI_Transmit+0x222>
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d104      	bne.n	8002aa4 <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 8002a9a:	231f      	movs	r3, #31
 8002a9c:	18fb      	adds	r3, r7, r3
 8002a9e:	2203      	movs	r2, #3
 8002aa0:	701a      	strb	r2, [r3, #0]
          goto error;
 8002aa2:	e028      	b.n	8002af6 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1cc      	bne.n	8002a48 <HAL_SPI_Transmit+0x1d0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	6839      	ldr	r1, [r7, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	0018      	movs	r0, r3
 8002ab6:	f000 f9b9 	bl	8002e2c <SPI_EndRxTxTransaction>
 8002aba:	1e03      	subs	r3, r0, #0
 8002abc:	d002      	beq.n	8002ac4 <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2220      	movs	r2, #32
 8002ac2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d10a      	bne.n	8002ae2 <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002acc:	2300      	movs	r3, #0
 8002ace:	613b      	str	r3, [r7, #16]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	613b      	str	r3, [r7, #16]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	613b      	str	r3, [r7, #16]
 8002ae0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d004      	beq.n	8002af4 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 8002aea:	231f      	movs	r3, #31
 8002aec:	18fb      	adds	r3, r7, r3
 8002aee:	2201      	movs	r2, #1
 8002af0:	701a      	strb	r2, [r3, #0]
 8002af2:	e000      	b.n	8002af6 <HAL_SPI_Transmit+0x27e>
  }

error:
 8002af4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2251      	movs	r2, #81	; 0x51
 8002afa:	2101      	movs	r1, #1
 8002afc:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2250      	movs	r2, #80	; 0x50
 8002b02:	2100      	movs	r1, #0
 8002b04:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002b06:	231f      	movs	r3, #31
 8002b08:	18fb      	adds	r3, r7, r3
 8002b0a:	781b      	ldrb	r3, [r3, #0]
}
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	b008      	add	sp, #32
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b088      	sub	sp, #32
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	099b      	lsrs	r3, r3, #6
 8002b30:	001a      	movs	r2, r3
 8002b32:	2301      	movs	r3, #1
 8002b34:	4013      	ands	r3, r2
 8002b36:	d10f      	bne.n	8002b58 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002b3e:	d00b      	beq.n	8002b58 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	099b      	lsrs	r3, r3, #6
 8002b44:	001a      	movs	r2, r3
 8002b46:	2301      	movs	r3, #1
 8002b48:	4013      	ands	r3, r2
 8002b4a:	d005      	beq.n	8002b58 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	0010      	movs	r0, r2
 8002b54:	4798      	blx	r3
    return;
 8002b56:	e0d6      	b.n	8002d06 <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	085b      	lsrs	r3, r3, #1
 8002b5c:	001a      	movs	r2, r3
 8002b5e:	2301      	movs	r3, #1
 8002b60:	4013      	ands	r3, r2
 8002b62:	d00b      	beq.n	8002b7c <HAL_SPI_IRQHandler+0x68>
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	09db      	lsrs	r3, r3, #7
 8002b68:	001a      	movs	r2, r3
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	d005      	beq.n	8002b7c <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	0010      	movs	r0, r2
 8002b78:	4798      	blx	r3
    return;
 8002b7a:	e0c4      	b.n	8002d06 <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	095b      	lsrs	r3, r3, #5
 8002b80:	001a      	movs	r2, r3
 8002b82:	2301      	movs	r3, #1
 8002b84:	4013      	ands	r3, r2
 8002b86:	d10c      	bne.n	8002ba2 <HAL_SPI_IRQHandler+0x8e>
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	099b      	lsrs	r3, r3, #6
 8002b8c:	001a      	movs	r2, r3
 8002b8e:	2301      	movs	r3, #1
 8002b90:	4013      	ands	r3, r2
 8002b92:	d106      	bne.n	8002ba2 <HAL_SPI_IRQHandler+0x8e>
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	0a1b      	lsrs	r3, r3, #8
 8002b98:	001a      	movs	r2, r3
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	d100      	bne.n	8002ba2 <HAL_SPI_IRQHandler+0x8e>
 8002ba0:	e0b1      	b.n	8002d06 <HAL_SPI_IRQHandler+0x1f2>
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	095b      	lsrs	r3, r3, #5
 8002ba6:	001a      	movs	r2, r3
 8002ba8:	2301      	movs	r3, #1
 8002baa:	4013      	ands	r3, r2
 8002bac:	d100      	bne.n	8002bb0 <HAL_SPI_IRQHandler+0x9c>
 8002bae:	e0aa      	b.n	8002d06 <HAL_SPI_IRQHandler+0x1f2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	099b      	lsrs	r3, r3, #6
 8002bb4:	001a      	movs	r2, r3
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	4013      	ands	r3, r2
 8002bba:	d023      	beq.n	8002c04 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2251      	movs	r2, #81	; 0x51
 8002bc0:	5c9b      	ldrb	r3, [r3, r2]
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b03      	cmp	r3, #3
 8002bc6:	d011      	beq.n	8002bec <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bcc:	2204      	movs	r2, #4
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	617b      	str	r3, [r7, #20]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	617b      	str	r3, [r7, #20]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	617b      	str	r3, [r7, #20]
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	e00b      	b.n	8002c04 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002bec:	2300      	movs	r3, #0
 8002bee:	613b      	str	r3, [r7, #16]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	613b      	str	r3, [r7, #16]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	613b      	str	r3, [r7, #16]
 8002c00:	693b      	ldr	r3, [r7, #16]
        return;
 8002c02:	e080      	b.n	8002d06 <HAL_SPI_IRQHandler+0x1f2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	095b      	lsrs	r3, r3, #5
 8002c08:	001a      	movs	r2, r3
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	d014      	beq.n	8002c3a <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c14:	2201      	movs	r2, #1
 8002c16:	431a      	orrs	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2140      	movs	r1, #64	; 0x40
 8002c34:	438a      	bics	r2, r1
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	0a1b      	lsrs	r3, r3, #8
 8002c3e:	001a      	movs	r2, r3
 8002c40:	2301      	movs	r3, #1
 8002c42:	4013      	ands	r3, r2
 8002c44:	d00c      	beq.n	8002c60 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c4a:	2208      	movs	r2, #8
 8002c4c:	431a      	orrs	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002c52:	2300      	movs	r3, #0
 8002c54:	60bb      	str	r3, [r7, #8]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	60bb      	str	r3, [r7, #8]
 8002c5e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d04d      	beq.n	8002d04 <HAL_SPI_IRQHandler+0x1f0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	685a      	ldr	r2, [r3, #4]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	21e0      	movs	r1, #224	; 0xe0
 8002c74:	438a      	bics	r2, r1
 8002c76:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2251      	movs	r2, #81	; 0x51
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	2202      	movs	r2, #2
 8002c84:	4013      	ands	r3, r2
 8002c86:	d103      	bne.n	8002c90 <HAL_SPI_IRQHandler+0x17c>
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	d032      	beq.n	8002cf6 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	685a      	ldr	r2, [r3, #4]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2103      	movs	r1, #3
 8002c9c:	438a      	bics	r2, r1
 8002c9e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d010      	beq.n	8002cca <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cac:	4a17      	ldr	r2, [pc, #92]	; (8002d0c <HAL_SPI_IRQHandler+0x1f8>)
 8002cae:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	f7fe fde5 	bl	8001884 <HAL_DMA_Abort_IT>
 8002cba:	1e03      	subs	r3, r0, #0
 8002cbc:	d005      	beq.n	8002cca <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc2:	2240      	movs	r2, #64	; 0x40
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d016      	beq.n	8002d00 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cd6:	4a0d      	ldr	r2, [pc, #52]	; (8002d0c <HAL_SPI_IRQHandler+0x1f8>)
 8002cd8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cde:	0018      	movs	r0, r3
 8002ce0:	f7fe fdd0 	bl	8001884 <HAL_DMA_Abort_IT>
 8002ce4:	1e03      	subs	r3, r0, #0
 8002ce6:	d00b      	beq.n	8002d00 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cec:	2240      	movs	r2, #64	; 0x40
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002cf4:	e004      	b.n	8002d00 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	f000 f809 	bl	8002d10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002cfe:	e000      	b.n	8002d02 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8002d00:	46c0      	nop			; (mov r8, r8)
    return;
 8002d02:	46c0      	nop			; (mov r8, r8)
 8002d04:	46c0      	nop			; (mov r8, r8)
  }
}
 8002d06:	46bd      	mov	sp, r7
 8002d08:	b008      	add	sp, #32
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	08002d21 	.word	0x08002d21

08002d10 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002d18:	46c0      	nop			; (mov r8, r8)
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	b002      	add	sp, #8
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	f7ff ffe7 	bl	8002d10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002d42:	46c0      	nop			; (mov r8, r8)
 8002d44:	46bd      	mov	sp, r7
 8002d46:	b004      	add	sp, #16
 8002d48:	bd80      	pop	{r7, pc}
	...

08002d4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	603b      	str	r3, [r7, #0]
 8002d58:	1dfb      	adds	r3, r7, #7
 8002d5a:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d5c:	e050      	b.n	8002e00 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	3301      	adds	r3, #1
 8002d62:	d04d      	beq.n	8002e00 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002d64:	f7fe fa5a 	bl	800121c <HAL_GetTick>
 8002d68:	0002      	movs	r2, r0
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d902      	bls.n	8002d7a <SPI_WaitFlagStateUntilTimeout+0x2e>
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d142      	bne.n	8002e00 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	685a      	ldr	r2, [r3, #4]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	21e0      	movs	r1, #224	; 0xe0
 8002d86:	438a      	bics	r2, r1
 8002d88:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	2382      	movs	r3, #130	; 0x82
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d113      	bne.n	8002dbe <SPI_WaitFlagStateUntilTimeout+0x72>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	689a      	ldr	r2, [r3, #8]
 8002d9a:	2380      	movs	r3, #128	; 0x80
 8002d9c:	021b      	lsls	r3, r3, #8
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d005      	beq.n	8002dae <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	689a      	ldr	r2, [r3, #8]
 8002da6:	2380      	movs	r3, #128	; 0x80
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d107      	bne.n	8002dbe <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2140      	movs	r1, #64	; 0x40
 8002dba:	438a      	bics	r2, r1
 8002dbc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dc2:	2380      	movs	r3, #128	; 0x80
 8002dc4:	019b      	lsls	r3, r3, #6
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d110      	bne.n	8002dec <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4914      	ldr	r1, [pc, #80]	; (8002e28 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8002dd6:	400a      	ands	r2, r1
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2180      	movs	r1, #128	; 0x80
 8002de6:	0189      	lsls	r1, r1, #6
 8002de8:	430a      	orrs	r2, r1
 8002dea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2251      	movs	r2, #81	; 0x51
 8002df0:	2101      	movs	r1, #1
 8002df2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2250      	movs	r2, #80	; 0x50
 8002df8:	2100      	movs	r1, #0
 8002dfa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e00f      	b.n	8002e20 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	68ba      	ldr	r2, [r7, #8]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	425a      	negs	r2, r3
 8002e10:	4153      	adcs	r3, r2
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	001a      	movs	r2, r3
 8002e16:	1dfb      	adds	r3, r7, #7
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d19f      	bne.n	8002d5e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	0018      	movs	r0, r3
 8002e22:	46bd      	mov	sp, r7
 8002e24:	b004      	add	sp, #16
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	ffffdfff 	.word	0xffffdfff

08002e2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af02      	add	r7, sp, #8
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	685a      	ldr	r2, [r3, #4]
 8002e3c:	2382      	movs	r3, #130	; 0x82
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d112      	bne.n	8002e6a <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e44:	68ba      	ldr	r2, [r7, #8]
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	9300      	str	r3, [sp, #0]
 8002e4c:	0013      	movs	r3, r2
 8002e4e:	2200      	movs	r2, #0
 8002e50:	2180      	movs	r1, #128	; 0x80
 8002e52:	f7ff ff7b 	bl	8002d4c <SPI_WaitFlagStateUntilTimeout>
 8002e56:	1e03      	subs	r3, r0, #0
 8002e58:	d020      	beq.n	8002e9c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e5e:	2220      	movs	r2, #32
 8002e60:	431a      	orrs	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e019      	b.n	8002e9e <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2251      	movs	r2, #81	; 0x51
 8002e6e:	5c9b      	ldrb	r3, [r3, r2]
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b05      	cmp	r3, #5
 8002e74:	d112      	bne.n	8002e9c <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002e76:	68ba      	ldr	r2, [r7, #8]
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	9300      	str	r3, [sp, #0]
 8002e7e:	0013      	movs	r3, r2
 8002e80:	2200      	movs	r2, #0
 8002e82:	2101      	movs	r1, #1
 8002e84:	f7ff ff62 	bl	8002d4c <SPI_WaitFlagStateUntilTimeout>
 8002e88:	1e03      	subs	r3, r0, #0
 8002e8a:	d007      	beq.n	8002e9c <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e90:	2220      	movs	r2, #32
 8002e92:	431a      	orrs	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e000      	b.n	8002e9e <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	b004      	add	sp, #16
 8002ea4:	bd80      	pop	{r7, pc}
	...

08002ea8 <__libc_init_array>:
 8002ea8:	b570      	push	{r4, r5, r6, lr}
 8002eaa:	2600      	movs	r6, #0
 8002eac:	4d0c      	ldr	r5, [pc, #48]	; (8002ee0 <__libc_init_array+0x38>)
 8002eae:	4c0d      	ldr	r4, [pc, #52]	; (8002ee4 <__libc_init_array+0x3c>)
 8002eb0:	1b64      	subs	r4, r4, r5
 8002eb2:	10a4      	asrs	r4, r4, #2
 8002eb4:	42a6      	cmp	r6, r4
 8002eb6:	d109      	bne.n	8002ecc <__libc_init_array+0x24>
 8002eb8:	2600      	movs	r6, #0
 8002eba:	f000 f82b 	bl	8002f14 <_init>
 8002ebe:	4d0a      	ldr	r5, [pc, #40]	; (8002ee8 <__libc_init_array+0x40>)
 8002ec0:	4c0a      	ldr	r4, [pc, #40]	; (8002eec <__libc_init_array+0x44>)
 8002ec2:	1b64      	subs	r4, r4, r5
 8002ec4:	10a4      	asrs	r4, r4, #2
 8002ec6:	42a6      	cmp	r6, r4
 8002ec8:	d105      	bne.n	8002ed6 <__libc_init_array+0x2e>
 8002eca:	bd70      	pop	{r4, r5, r6, pc}
 8002ecc:	00b3      	lsls	r3, r6, #2
 8002ece:	58eb      	ldr	r3, [r5, r3]
 8002ed0:	4798      	blx	r3
 8002ed2:	3601      	adds	r6, #1
 8002ed4:	e7ee      	b.n	8002eb4 <__libc_init_array+0xc>
 8002ed6:	00b3      	lsls	r3, r6, #2
 8002ed8:	58eb      	ldr	r3, [r5, r3]
 8002eda:	4798      	blx	r3
 8002edc:	3601      	adds	r6, #1
 8002ede:	e7f2      	b.n	8002ec6 <__libc_init_array+0x1e>
 8002ee0:	08002fbc 	.word	0x08002fbc
 8002ee4:	08002fbc 	.word	0x08002fbc
 8002ee8:	08002fbc 	.word	0x08002fbc
 8002eec:	08002fc0 	.word	0x08002fc0

08002ef0 <memcpy>:
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	b510      	push	{r4, lr}
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d100      	bne.n	8002efa <memcpy+0xa>
 8002ef8:	bd10      	pop	{r4, pc}
 8002efa:	5ccc      	ldrb	r4, [r1, r3]
 8002efc:	54c4      	strb	r4, [r0, r3]
 8002efe:	3301      	adds	r3, #1
 8002f00:	e7f8      	b.n	8002ef4 <memcpy+0x4>

08002f02 <memset>:
 8002f02:	0003      	movs	r3, r0
 8002f04:	1812      	adds	r2, r2, r0
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d100      	bne.n	8002f0c <memset+0xa>
 8002f0a:	4770      	bx	lr
 8002f0c:	7019      	strb	r1, [r3, #0]
 8002f0e:	3301      	adds	r3, #1
 8002f10:	e7f9      	b.n	8002f06 <memset+0x4>
	...

08002f14 <_init>:
 8002f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f16:	46c0      	nop			; (mov r8, r8)
 8002f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f1a:	bc08      	pop	{r3}
 8002f1c:	469e      	mov	lr, r3
 8002f1e:	4770      	bx	lr

08002f20 <_fini>:
 8002f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f22:	46c0      	nop			; (mov r8, r8)
 8002f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f26:	bc08      	pop	{r3}
 8002f28:	469e      	mov	lr, r3
 8002f2a:	4770      	bx	lr
