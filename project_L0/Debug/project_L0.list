
project_L0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005814  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000604  080058d4  080058d4  000158d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ed8  08005ed8  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08005ed8  08005ed8  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005ed8  08005ed8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ed8  08005ed8  00015ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005edc  08005edc  00015edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005ee0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  20000068  08005f48  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  08005f48  00020248  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012be4  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000293a  00000000  00000000  00032c74  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001098  00000000  00000000  000355b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f28  00000000  00000000  00036648  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016fa7  00000000  00000000  00037570  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e157  00000000  00000000  0004e517  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008cf6a  00000000  00000000  0005c66e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e95d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003da4  00000000  00000000  000e9654  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080058bc 	.word	0x080058bc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	080058bc 	.word	0x080058bc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <SPI_CS_LOW>:
 *   Print characters
 */

#include "TFT_display.h"

void SPI_CS_LOW() {HAL_GPIO_WritePin(CS_GPIO, CS_PIN, GPIO_PIN_RESET);}
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
 80003f8:	4b04      	ldr	r3, [pc, #16]	; (800040c <SPI_CS_LOW+0x18>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	2180      	movs	r1, #128	; 0x80
 80003fe:	0018      	movs	r0, r3
 8000400:	f002 fa3a 	bl	8002878 <HAL_GPIO_WritePin>
 8000404:	46c0      	nop			; (mov r8, r8)
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	50000800 	.word	0x50000800

08000410 <SPI_CS_HIGH>:

void SPI_CS_HIGH() {HAL_GPIO_WritePin(CS_GPIO, CS_PIN, GPIO_PIN_SET);}
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
 8000414:	4b04      	ldr	r3, [pc, #16]	; (8000428 <SPI_CS_HIGH+0x18>)
 8000416:	2201      	movs	r2, #1
 8000418:	2180      	movs	r1, #128	; 0x80
 800041a:	0018      	movs	r0, r3
 800041c:	f002 fa2c 	bl	8002878 <HAL_GPIO_WritePin>
 8000420:	46c0      	nop			; (mov r8, r8)
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	50000800 	.word	0x50000800

0800042c <SPI_DC_LOW>:

void SPI_DC_LOW() {HAL_GPIO_WritePin(DC_GPIO, DC_PIN, GPIO_PIN_RESET);}
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
 8000430:	4b04      	ldr	r3, [pc, #16]	; (8000444 <SPI_DC_LOW+0x18>)
 8000432:	2200      	movs	r2, #0
 8000434:	2140      	movs	r1, #64	; 0x40
 8000436:	0018      	movs	r0, r3
 8000438:	f002 fa1e 	bl	8002878 <HAL_GPIO_WritePin>
 800043c:	46c0      	nop			; (mov r8, r8)
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	50000400 	.word	0x50000400

08000448 <SPI_DC_HIGH>:

void SPI_DC_HIGH() {HAL_GPIO_WritePin(DC_GPIO, DC_PIN, GPIO_PIN_SET);}
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
 800044c:	4b04      	ldr	r3, [pc, #16]	; (8000460 <SPI_DC_HIGH+0x18>)
 800044e:	2201      	movs	r2, #1
 8000450:	2140      	movs	r1, #64	; 0x40
 8000452:	0018      	movs	r0, r3
 8000454:	f002 fa10 	bl	8002878 <HAL_GPIO_WritePin>
 8000458:	46c0      	nop			; (mov r8, r8)
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	46c0      	nop			; (mov r8, r8)
 8000460:	50000400 	.word	0x50000400

08000464 <sendCommand>:

// still ripped but now im changing it
void sendCommand(uint8_t cmd, uint8_t *args, uint16_t numArgs, SPI_HandleTypeDef *hspi) {
 8000464:	b5b0      	push	{r4, r5, r7, lr}
 8000466:	b084      	sub	sp, #16
 8000468:	af00      	add	r7, sp, #0
 800046a:	60b9      	str	r1, [r7, #8]
 800046c:	0011      	movs	r1, r2
 800046e:	607b      	str	r3, [r7, #4]
 8000470:	240f      	movs	r4, #15
 8000472:	193b      	adds	r3, r7, r4
 8000474:	1c02      	adds	r2, r0, #0
 8000476:	701a      	strb	r2, [r3, #0]
 8000478:	250c      	movs	r5, #12
 800047a:	197b      	adds	r3, r7, r5
 800047c:	1c0a      	adds	r2, r1, #0
 800047e:	801a      	strh	r2, [r3, #0]
	SPI_CS_LOW();	// chip select
 8000480:	f7ff ffb8 	bl	80003f4 <SPI_CS_LOW>

	SPI_DC_LOW();	// command mode
 8000484:	f7ff ffd2 	bl	800042c <SPI_DC_LOW>
	HAL_SPI_Transmit(hspi, &cmd, 1, 1000);
 8000488:	23fa      	movs	r3, #250	; 0xfa
 800048a:	009b      	lsls	r3, r3, #2
 800048c:	1939      	adds	r1, r7, r4
 800048e:	6878      	ldr	r0, [r7, #4]
 8000490:	2201      	movs	r2, #1
 8000492:	f003 ff15 	bl	80042c0 <HAL_SPI_Transmit>

	SPI_DC_HIGH();	// data mode
 8000496:	f7ff ffd7 	bl	8000448 <SPI_DC_HIGH>
	if (numArgs) {
 800049a:	197b      	adds	r3, r7, r5
 800049c:	881b      	ldrh	r3, [r3, #0]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d009      	beq.n	80004b6 <sendCommand+0x52>
		HAL_SPI_Transmit(hspi, args, numArgs, 1000);
 80004a2:	23fa      	movs	r3, #250	; 0xfa
 80004a4:	009c      	lsls	r4, r3, #2
 80004a6:	230c      	movs	r3, #12
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	881a      	ldrh	r2, [r3, #0]
 80004ac:	68b9      	ldr	r1, [r7, #8]
 80004ae:	6878      	ldr	r0, [r7, #4]
 80004b0:	0023      	movs	r3, r4
 80004b2:	f003 ff05 	bl	80042c0 <HAL_SPI_Transmit>
	}

	SPI_CS_HIGH();	// chip select disable
 80004b6:	f7ff ffab 	bl	8000410 <SPI_CS_HIGH>
}
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	46bd      	mov	sp, r7
 80004be:	b004      	add	sp, #16
 80004c0:	bdb0      	pop	{r4, r5, r7, pc}

080004c2 <displayInit>:

// array parser heavily based on Adafruit library code
void displayInit(uint8_t *args, SPI_HandleTypeDef *hspi) {
 80004c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004c4:	b085      	sub	sp, #20
 80004c6:	af00      	add	r7, sp, #0
 80004c8:	6078      	str	r0, [r7, #4]
 80004ca:	6039      	str	r1, [r7, #0]
	uint8_t  numCommands, cmd, numArgs;
	uint16_t ms;
	uint8_t index = 0;
 80004cc:	220b      	movs	r2, #11
 80004ce:	0011      	movs	r1, r2
 80004d0:	18bb      	adds	r3, r7, r2
 80004d2:	2200      	movs	r2, #0
 80004d4:	701a      	strb	r2, [r3, #0]
	uint8_t data;

	numCommands = args[index++];   // Number of commands to follow
 80004d6:	000a      	movs	r2, r1
 80004d8:	18bb      	adds	r3, r7, r2
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	18ba      	adds	r2, r7, r2
 80004de:	1c59      	adds	r1, r3, #1
 80004e0:	7011      	strb	r1, [r2, #0]
 80004e2:	001a      	movs	r2, r3
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	189a      	adds	r2, r3, r2
 80004e8:	230f      	movs	r3, #15
 80004ea:	18fb      	adds	r3, r7, r3
 80004ec:	7812      	ldrb	r2, [r2, #0]
 80004ee:	701a      	strb	r2, [r3, #0]
	while(numCommands--) {                 // For each command...
 80004f0:	e05e      	b.n	80005b0 <displayInit+0xee>
		cmd = args[index++];         // Read command
 80004f2:	200b      	movs	r0, #11
 80004f4:	183b      	adds	r3, r7, r0
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	183a      	adds	r2, r7, r0
 80004fa:	1c59      	adds	r1, r3, #1
 80004fc:	7011      	strb	r1, [r2, #0]
 80004fe:	001a      	movs	r2, r3
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	189a      	adds	r2, r3, r2
 8000504:	230a      	movs	r3, #10
 8000506:	18fb      	adds	r3, r7, r3
 8000508:	7812      	ldrb	r2, [r2, #0]
 800050a:	701a      	strb	r2, [r3, #0]
		numArgs  = args[index++];    // Number of args to follow
 800050c:	183b      	adds	r3, r7, r0
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	183a      	adds	r2, r7, r0
 8000512:	1c59      	adds	r1, r3, #1
 8000514:	7011      	strb	r1, [r2, #0]
 8000516:	001a      	movs	r2, r3
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	189a      	adds	r2, r3, r2
 800051c:	2609      	movs	r6, #9
 800051e:	19bb      	adds	r3, r7, r6
 8000520:	7812      	ldrb	r2, [r2, #0]
 8000522:	701a      	strb	r2, [r3, #0]
		ms       = numArgs & ST_CMD_DELAY;   // If hibit set, delay follows args
 8000524:	19bb      	adds	r3, r7, r6
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	b29a      	uxth	r2, r3
 800052a:	210c      	movs	r1, #12
 800052c:	187b      	adds	r3, r7, r1
 800052e:	2180      	movs	r1, #128	; 0x80
 8000530:	400a      	ands	r2, r1
 8000532:	801a      	strh	r2, [r3, #0]
		numArgs &= ~ST_CMD_DELAY;            // Mask out delay bit
 8000534:	19bb      	adds	r3, r7, r6
 8000536:	19ba      	adds	r2, r7, r6
 8000538:	7812      	ldrb	r2, [r2, #0]
 800053a:	217f      	movs	r1, #127	; 0x7f
 800053c:	400a      	ands	r2, r1
 800053e:	701a      	strb	r2, [r3, #0]
		sendCommand(cmd, &args[index], numArgs, hspi);
 8000540:	0005      	movs	r5, r0
 8000542:	183b      	adds	r3, r7, r0
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	687a      	ldr	r2, [r7, #4]
 8000548:	18d1      	adds	r1, r2, r3
 800054a:	19bb      	adds	r3, r7, r6
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	b29a      	uxth	r2, r3
 8000550:	683c      	ldr	r4, [r7, #0]
 8000552:	230a      	movs	r3, #10
 8000554:	18fb      	adds	r3, r7, r3
 8000556:	7818      	ldrb	r0, [r3, #0]
 8000558:	0023      	movs	r3, r4
 800055a:	f7ff ff83 	bl	8000464 <sendCommand>
		index += numArgs;
 800055e:	0028      	movs	r0, r5
 8000560:	183b      	adds	r3, r7, r0
 8000562:	1839      	adds	r1, r7, r0
 8000564:	19ba      	adds	r2, r7, r6
 8000566:	7809      	ldrb	r1, [r1, #0]
 8000568:	7812      	ldrb	r2, [r2, #0]
 800056a:	188a      	adds	r2, r1, r2
 800056c:	701a      	strb	r2, [r3, #0]

		if(ms) {
 800056e:	210c      	movs	r1, #12
 8000570:	187b      	adds	r3, r7, r1
 8000572:	881b      	ldrh	r3, [r3, #0]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d01b      	beq.n	80005b0 <displayInit+0xee>
			ms = args[index++]; // Read post-command delay time (ms)
 8000578:	220b      	movs	r2, #11
 800057a:	18bb      	adds	r3, r7, r2
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	18ba      	adds	r2, r7, r2
 8000580:	1c59      	adds	r1, r3, #1
 8000582:	7011      	strb	r1, [r2, #0]
 8000584:	001a      	movs	r2, r3
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	189b      	adds	r3, r3, r2
 800058a:	781a      	ldrb	r2, [r3, #0]
 800058c:	210c      	movs	r1, #12
 800058e:	187b      	adds	r3, r7, r1
 8000590:	801a      	strh	r2, [r3, #0]
			if(ms == 255) ms = 500;     // If 255, delay for 500 ms
 8000592:	187b      	adds	r3, r7, r1
 8000594:	881b      	ldrh	r3, [r3, #0]
 8000596:	2bff      	cmp	r3, #255	; 0xff
 8000598:	d104      	bne.n	80005a4 <displayInit+0xe2>
 800059a:	230c      	movs	r3, #12
 800059c:	18fb      	adds	r3, r7, r3
 800059e:	22fa      	movs	r2, #250	; 0xfa
 80005a0:	0052      	lsls	r2, r2, #1
 80005a2:	801a      	strh	r2, [r3, #0]
			HAL_Delay(ms);
 80005a4:	230c      	movs	r3, #12
 80005a6:	18fb      	adds	r3, r7, r3
 80005a8:	881b      	ldrh	r3, [r3, #0]
 80005aa:	0018      	movs	r0, r3
 80005ac:	f001 fc74 	bl	8001e98 <HAL_Delay>
	while(numCommands--) {                 // For each command...
 80005b0:	220f      	movs	r2, #15
 80005b2:	18bb      	adds	r3, r7, r2
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	18ba      	adds	r2, r7, r2
 80005b8:	1e59      	subs	r1, r3, #1
 80005ba:	7011      	strb	r1, [r2, #0]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d198      	bne.n	80004f2 <displayInit+0x30>
		}
	}

	// note: this line may be doing more work than I think
	// (hard to read in datasheet)
	data = 0xC0;
 80005c0:	2108      	movs	r1, #8
 80005c2:	187b      	adds	r3, r7, r1
 80005c4:	22c0      	movs	r2, #192	; 0xc0
 80005c6:	701a      	strb	r2, [r3, #0]
	sendCommand(ST77XX_MADCTL, &data, 1, hspi);
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	1879      	adds	r1, r7, r1
 80005cc:	2201      	movs	r2, #1
 80005ce:	2036      	movs	r0, #54	; 0x36
 80005d0:	f7ff ff48 	bl	8000464 <sendCommand>
}
 80005d4:	46c0      	nop			; (mov r8, r8)
 80005d6:	46bd      	mov	sp, r7
 80005d8:	b005      	add	sp, #20
 80005da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005dc <TFT_startup>:

void TFT_startup(SPI_HandleTypeDef *hspi) {
 80005dc:	b590      	push	{r4, r7, lr}
 80005de:	b0a3      	sub	sp, #140	; 0x8c
 80005e0:	af02      	add	r7, sp, #8
 80005e2:	6078      	str	r0, [r7, #4]
	// startup sequence: rcmd1->rcmd2red->rcmd3
	uint8_t initCommands[] = {
 80005e4:	240c      	movs	r4, #12
 80005e6:	193a      	adds	r2, r7, r4
 80005e8:	4b0c      	ldr	r3, [pc, #48]	; (800061c <TFT_startup+0x40>)
 80005ea:	0010      	movs	r0, r2
 80005ec:	0019      	movs	r1, r3
 80005ee:	2371      	movs	r3, #113	; 0x71
 80005f0:	001a      	movs	r2, r3
 80005f2:	f004 fd53 	bl	800509c <memcpy>
			10,                           //     10 ms delay
		ST77XX_DISPON,    ST_CMD_DELAY, //  4: Main screen turn on, no args w/delay
			100	                        //     100 ms delay
	};

	displayInit(initCommands, hspi);
 80005f6:	687a      	ldr	r2, [r7, #4]
 80005f8:	193b      	adds	r3, r7, r4
 80005fa:	0011      	movs	r1, r2
 80005fc:	0018      	movs	r0, r3
 80005fe:	f7ff ff60 	bl	80004c2 <displayInit>
	setAddrWindow(0, 0, WIDTH, HEIGHT, hspi);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	23a0      	movs	r3, #160	; 0xa0
 8000608:	2280      	movs	r2, #128	; 0x80
 800060a:	2100      	movs	r1, #0
 800060c:	2000      	movs	r0, #0
 800060e:	f000 f807 	bl	8000620 <setAddrWindow>
}
 8000612:	46c0      	nop			; (mov r8, r8)
 8000614:	46bd      	mov	sp, r7
 8000616:	b021      	add	sp, #132	; 0x84
 8000618:	bd90      	pop	{r4, r7, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	080058d4 	.word	0x080058d4

08000620 <setAddrWindow>:

// draw something: set addr window -> write to ram memory
// sets specific area on display to write pixels to
// x and y for upper left corner, w for width, h for height
void setAddrWindow(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SPI_HandleTypeDef *hspi) {
 8000620:	b5b0      	push	{r4, r5, r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	0005      	movs	r5, r0
 8000628:	000c      	movs	r4, r1
 800062a:	0010      	movs	r0, r2
 800062c:	0019      	movs	r1, r3
 800062e:	1dbb      	adds	r3, r7, #6
 8000630:	1c2a      	adds	r2, r5, #0
 8000632:	801a      	strh	r2, [r3, #0]
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	1c22      	adds	r2, r4, #0
 8000638:	801a      	strh	r2, [r3, #0]
 800063a:	1cbb      	adds	r3, r7, #2
 800063c:	1c02      	adds	r2, r0, #0
 800063e:	801a      	strh	r2, [r3, #0]
 8000640:	003b      	movs	r3, r7
 8000642:	1c0a      	adds	r2, r1, #0
 8000644:	801a      	strh	r2, [r3, #0]
	// not really needed for our display
	x += _xstart;
 8000646:	1dbb      	adds	r3, r7, #6
 8000648:	1dba      	adds	r2, r7, #6
 800064a:	8812      	ldrh	r2, [r2, #0]
 800064c:	801a      	strh	r2, [r3, #0]
	y += _ystart;
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	1d3a      	adds	r2, r7, #4
 8000652:	8812      	ldrh	r2, [r2, #0]
 8000654:	801a      	strh	r2, [r3, #0]

	uint8_t temp[4];
	temp[0] = (x & (0xFF00)) >> 8;
 8000656:	1dbb      	adds	r3, r7, #6
 8000658:	881b      	ldrh	r3, [r3, #0]
 800065a:	0a1b      	lsrs	r3, r3, #8
 800065c:	b29b      	uxth	r3, r3
 800065e:	b2da      	uxtb	r2, r3
 8000660:	210c      	movs	r1, #12
 8000662:	187b      	adds	r3, r7, r1
 8000664:	701a      	strb	r2, [r3, #0]
	temp[1] = x & (0xFF);
 8000666:	1dbb      	adds	r3, r7, #6
 8000668:	881b      	ldrh	r3, [r3, #0]
 800066a:	b2da      	uxtb	r2, r3
 800066c:	187b      	adds	r3, r7, r1
 800066e:	705a      	strb	r2, [r3, #1]
	temp[2] = ((x+w-1) & (0xFF00)) >> 8;
 8000670:	1dbb      	adds	r3, r7, #6
 8000672:	881a      	ldrh	r2, [r3, #0]
 8000674:	1cbb      	adds	r3, r7, #2
 8000676:	881b      	ldrh	r3, [r3, #0]
 8000678:	18d3      	adds	r3, r2, r3
 800067a:	3b01      	subs	r3, #1
 800067c:	121b      	asrs	r3, r3, #8
 800067e:	b2da      	uxtb	r2, r3
 8000680:	187b      	adds	r3, r7, r1
 8000682:	709a      	strb	r2, [r3, #2]
	temp[3] = (x+w-1) & (0xFF);
 8000684:	1dbb      	adds	r3, r7, #6
 8000686:	881b      	ldrh	r3, [r3, #0]
 8000688:	b2da      	uxtb	r2, r3
 800068a:	1cbb      	adds	r3, r7, #2
 800068c:	881b      	ldrh	r3, [r3, #0]
 800068e:	b2db      	uxtb	r3, r3
 8000690:	18d3      	adds	r3, r2, r3
 8000692:	b2db      	uxtb	r3, r3
 8000694:	3b01      	subs	r3, #1
 8000696:	b2da      	uxtb	r2, r3
 8000698:	187b      	adds	r3, r7, r1
 800069a:	70da      	strb	r2, [r3, #3]
	sendCommand(ST77XX_CASET, temp, 4, hspi);
 800069c:	6a3b      	ldr	r3, [r7, #32]
 800069e:	000c      	movs	r4, r1
 80006a0:	1879      	adds	r1, r7, r1
 80006a2:	2204      	movs	r2, #4
 80006a4:	202a      	movs	r0, #42	; 0x2a
 80006a6:	f7ff fedd 	bl	8000464 <sendCommand>

	temp[0] = (y & (0xFF00)) >> 8;
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	881b      	ldrh	r3, [r3, #0]
 80006ae:	0a1b      	lsrs	r3, r3, #8
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	b2da      	uxtb	r2, r3
 80006b4:	0021      	movs	r1, r4
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	701a      	strb	r2, [r3, #0]
	temp[1] = y & (0xFF);
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	705a      	strb	r2, [r3, #1]
	temp[2] = ((y+h-1) & (0xFF00)) >> 8;
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	881a      	ldrh	r2, [r3, #0]
 80006c8:	003b      	movs	r3, r7
 80006ca:	881b      	ldrh	r3, [r3, #0]
 80006cc:	18d3      	adds	r3, r2, r3
 80006ce:	3b01      	subs	r3, #1
 80006d0:	121b      	asrs	r3, r3, #8
 80006d2:	b2da      	uxtb	r2, r3
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	709a      	strb	r2, [r3, #2]
	temp[3] = (y+h-1) & (0x00FF);
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	881b      	ldrh	r3, [r3, #0]
 80006dc:	b2da      	uxtb	r2, r3
 80006de:	003b      	movs	r3, r7
 80006e0:	881b      	ldrh	r3, [r3, #0]
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	18d3      	adds	r3, r2, r3
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	3b01      	subs	r3, #1
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	70da      	strb	r2, [r3, #3]
	sendCommand(ST77XX_RASET, temp, 4, hspi);
 80006f0:	6a3b      	ldr	r3, [r7, #32]
 80006f2:	1879      	adds	r1, r7, r1
 80006f4:	2204      	movs	r2, #4
 80006f6:	202b      	movs	r0, #43	; 0x2b
 80006f8:	f7ff feb4 	bl	8000464 <sendCommand>
}
 80006fc:	46c0      	nop			; (mov r8, r8)
 80006fe:	46bd      	mov	sp, r7
 8000700:	b004      	add	sp, #16
 8000702:	bdb0      	pop	{r4, r5, r7, pc}

08000704 <colorFixer>:
// 8-bit spi bus wants msb first; in array, lowest index is sent first
// because L4 is little-endian
//   for 16-bit value, it sends lower byte before upper byte
//   resulting in device thinking lower byte is upper byte
// this switches byte order around
uint16_t colorFixer(uint16_t color) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	0002      	movs	r2, r0
 800070c:	1dbb      	adds	r3, r7, #6
 800070e:	801a      	strh	r2, [r3, #0]
	uint8_t a = color & 0xFF;
 8000710:	210f      	movs	r1, #15
 8000712:	187b      	adds	r3, r7, r1
 8000714:	1dba      	adds	r2, r7, #6
 8000716:	8812      	ldrh	r2, [r2, #0]
 8000718:	701a      	strb	r2, [r3, #0]
	uint8_t b = (color & 0xFF00) >> 8;
 800071a:	1dbb      	adds	r3, r7, #6
 800071c:	881b      	ldrh	r3, [r3, #0]
 800071e:	0a1b      	lsrs	r3, r3, #8
 8000720:	b29a      	uxth	r2, r3
 8000722:	200e      	movs	r0, #14
 8000724:	183b      	adds	r3, r7, r0
 8000726:	701a      	strb	r2, [r3, #0]
	uint16_t ret = (a << 8) | b;
 8000728:	187b      	adds	r3, r7, r1
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	021b      	lsls	r3, r3, #8
 800072e:	b21a      	sxth	r2, r3
 8000730:	183b      	adds	r3, r7, r0
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	b21b      	sxth	r3, r3
 8000736:	4313      	orrs	r3, r2
 8000738:	b21a      	sxth	r2, r3
 800073a:	210c      	movs	r1, #12
 800073c:	187b      	adds	r3, r7, r1
 800073e:	801a      	strh	r2, [r3, #0]

	return ret;
 8000740:	187b      	adds	r3, r7, r1
 8000742:	881b      	ldrh	r3, [r3, #0]
}
 8000744:	0018      	movs	r0, r3
 8000746:	46bd      	mov	sp, r7
 8000748:	b004      	add	sp, #16
 800074a:	bd80      	pop	{r7, pc}

0800074c <drawPixel>:

void drawPixel(uint8_t x, uint8_t y, uint16_t color, SPI_HandleTypeDef *hspi) {
 800074c:	b590      	push	{r4, r7, lr}
 800074e:	b087      	sub	sp, #28
 8000750:	af02      	add	r7, sp, #8
 8000752:	0004      	movs	r4, r0
 8000754:	0008      	movs	r0, r1
 8000756:	0011      	movs	r1, r2
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	1dfb      	adds	r3, r7, #7
 800075c:	1c22      	adds	r2, r4, #0
 800075e:	701a      	strb	r2, [r3, #0]
 8000760:	1dbb      	adds	r3, r7, #6
 8000762:	1c02      	adds	r2, r0, #0
 8000764:	701a      	strb	r2, [r3, #0]
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	1c0a      	adds	r2, r1, #0
 800076a:	801a      	strh	r2, [r3, #0]
	// bounds checking
	// just don't draw if pixel is out of bounds
	if ((x > WIDTH) || (x < 0) || (y > HEIGHT) || (y < 0)) return;
 800076c:	1dfb      	adds	r3, r7, #7
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b80      	cmp	r3, #128	; 0x80
 8000772:	d820      	bhi.n	80007b6 <drawPixel+0x6a>
 8000774:	1dbb      	adds	r3, r7, #6
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	2ba0      	cmp	r3, #160	; 0xa0
 800077a:	d81c      	bhi.n	80007b6 <drawPixel+0x6a>

	setAddrWindow(x, y, 1, 1, hspi);
 800077c:	1dfb      	adds	r3, r7, #7
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	b298      	uxth	r0, r3
 8000782:	1dbb      	adds	r3, r7, #6
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	b299      	uxth	r1, r3
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	9300      	str	r3, [sp, #0]
 800078c:	2301      	movs	r3, #1
 800078e:	2201      	movs	r2, #1
 8000790:	f7ff ff46 	bl	8000620 <setAddrWindow>
	uint16_t tempColor = colorFixer(color);		// else we're using address of something passed by value
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	881b      	ldrh	r3, [r3, #0]
 8000798:	0018      	movs	r0, r3
 800079a:	f7ff ffb3 	bl	8000704 <colorFixer>
 800079e:	0003      	movs	r3, r0
 80007a0:	001a      	movs	r2, r3
 80007a2:	210e      	movs	r1, #14
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	801a      	strh	r2, [r3, #0]
	sendCommand(ST77XX_RAMWR, &tempColor, 2, hspi);
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	1879      	adds	r1, r7, r1
 80007ac:	2202      	movs	r2, #2
 80007ae:	202c      	movs	r0, #44	; 0x2c
 80007b0:	f7ff fe58 	bl	8000464 <sendCommand>
 80007b4:	e000      	b.n	80007b8 <drawPixel+0x6c>
	if ((x > WIDTH) || (x < 0) || (y > HEIGHT) || (y < 0)) return;
 80007b6:	46c0      	nop			; (mov r8, r8)
}
 80007b8:	46bd      	mov	sp, r7
 80007ba:	b005      	add	sp, #20
 80007bc:	bd90      	pop	{r4, r7, pc}

080007be <drawHLine>:

void drawHLine(uint8_t x, uint8_t y, uint8_t size, uint16_t color, SPI_HandleTypeDef *hspi) {
 80007be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007c0:	b091      	sub	sp, #68	; 0x44
 80007c2:	af02      	add	r7, sp, #8
 80007c4:	000c      	movs	r4, r1
 80007c6:	0016      	movs	r6, r2
 80007c8:	0019      	movs	r1, r3
 80007ca:	2327      	movs	r3, #39	; 0x27
 80007cc:	18fa      	adds	r2, r7, r3
 80007ce:	1c03      	adds	r3, r0, #0
 80007d0:	7013      	strb	r3, [r2, #0]
 80007d2:	2326      	movs	r3, #38	; 0x26
 80007d4:	18fb      	adds	r3, r7, r3
 80007d6:	1c22      	adds	r2, r4, #0
 80007d8:	701a      	strb	r2, [r3, #0]
 80007da:	2325      	movs	r3, #37	; 0x25
 80007dc:	18fb      	adds	r3, r7, r3
 80007de:	1c32      	adds	r2, r6, #0
 80007e0:	701a      	strb	r2, [r3, #0]
 80007e2:	2322      	movs	r3, #34	; 0x22
 80007e4:	18fb      	adds	r3, r7, r3
 80007e6:	1c0a      	adds	r2, r1, #0
 80007e8:	801a      	strh	r2, [r3, #0]
 80007ea:	466b      	mov	r3, sp
 80007ec:	001e      	movs	r6, r3
	// bounds checking
	if (x < 0) x = 0;						// don't set x out of bounds
	if (x > WIDTH) x = WIDTH;
 80007ee:	2327      	movs	r3, #39	; 0x27
 80007f0:	18fb      	adds	r3, r7, r3
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	2b80      	cmp	r3, #128	; 0x80
 80007f6:	d903      	bls.n	8000800 <drawHLine+0x42>
 80007f8:	2327      	movs	r3, #39	; 0x27
 80007fa:	18fb      	adds	r3, r7, r3
 80007fc:	2280      	movs	r2, #128	; 0x80
 80007fe:	701a      	strb	r2, [r3, #0]
	if (x+size > WIDTH) size = WIDTH-x;		// don't set size so line draws out of bounds
 8000800:	2327      	movs	r3, #39	; 0x27
 8000802:	18fb      	adds	r3, r7, r3
 8000804:	781a      	ldrb	r2, [r3, #0]
 8000806:	2325      	movs	r3, #37	; 0x25
 8000808:	18fb      	adds	r3, r7, r3
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	18d3      	adds	r3, r2, r3
 800080e:	2b80      	cmp	r3, #128	; 0x80
 8000810:	dd08      	ble.n	8000824 <drawHLine+0x66>
 8000812:	2325      	movs	r3, #37	; 0x25
 8000814:	18fb      	adds	r3, r7, r3
 8000816:	2227      	movs	r2, #39	; 0x27
 8000818:	18ba      	adds	r2, r7, r2
 800081a:	7812      	ldrb	r2, [r2, #0]
 800081c:	2180      	movs	r1, #128	; 0x80
 800081e:	4249      	negs	r1, r1
 8000820:	1a8a      	subs	r2, r1, r2
 8000822:	701a      	strb	r2, [r3, #0]
	if (x+size < 0) size = 0-x;
	if ((y > HEIGHT) || (y < 0)) return;	// don't draw if y is out of bounds
 8000824:	2326      	movs	r3, #38	; 0x26
 8000826:	18fb      	adds	r3, r7, r3
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2ba0      	cmp	r3, #160	; 0xa0
 800082c:	d868      	bhi.n	8000900 <drawHLine+0x142>

	setAddrWindow(x, y, size, 1, hspi);
 800082e:	2327      	movs	r3, #39	; 0x27
 8000830:	18fb      	adds	r3, r7, r3
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	b298      	uxth	r0, r3
 8000836:	2326      	movs	r3, #38	; 0x26
 8000838:	18fb      	adds	r3, r7, r3
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	b299      	uxth	r1, r3
 800083e:	2325      	movs	r3, #37	; 0x25
 8000840:	18fb      	adds	r3, r7, r3
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	b29a      	uxth	r2, r3
 8000846:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000848:	9300      	str	r3, [sp, #0]
 800084a:	2301      	movs	r3, #1
 800084c:	f7ff fee8 	bl	8000620 <setAddrWindow>
	uint16_t colors[size];
 8000850:	2325      	movs	r3, #37	; 0x25
 8000852:	18fb      	adds	r3, r7, r3
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	001a      	movs	r2, r3
 8000858:	3a01      	subs	r2, #1
 800085a:	633a      	str	r2, [r7, #48]	; 0x30
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	2200      	movs	r2, #0
 8000860:	60fa      	str	r2, [r7, #12]
 8000862:	68b8      	ldr	r0, [r7, #8]
 8000864:	68f9      	ldr	r1, [r7, #12]
 8000866:	0002      	movs	r2, r0
 8000868:	0f12      	lsrs	r2, r2, #28
 800086a:	000c      	movs	r4, r1
 800086c:	0124      	lsls	r4, r4, #4
 800086e:	61fc      	str	r4, [r7, #28]
 8000870:	69fc      	ldr	r4, [r7, #28]
 8000872:	4314      	orrs	r4, r2
 8000874:	61fc      	str	r4, [r7, #28]
 8000876:	0002      	movs	r2, r0
 8000878:	0112      	lsls	r2, r2, #4
 800087a:	61ba      	str	r2, [r7, #24]
 800087c:	603b      	str	r3, [r7, #0]
 800087e:	2200      	movs	r2, #0
 8000880:	607a      	str	r2, [r7, #4]
 8000882:	6838      	ldr	r0, [r7, #0]
 8000884:	6879      	ldr	r1, [r7, #4]
 8000886:	0002      	movs	r2, r0
 8000888:	0f12      	lsrs	r2, r2, #28
 800088a:	000c      	movs	r4, r1
 800088c:	0124      	lsls	r4, r4, #4
 800088e:	617c      	str	r4, [r7, #20]
 8000890:	697c      	ldr	r4, [r7, #20]
 8000892:	4314      	orrs	r4, r2
 8000894:	617c      	str	r4, [r7, #20]
 8000896:	0002      	movs	r2, r0
 8000898:	0112      	lsls	r2, r2, #4
 800089a:	613a      	str	r2, [r7, #16]
 800089c:	005b      	lsls	r3, r3, #1
 800089e:	3301      	adds	r3, #1
 80008a0:	3307      	adds	r3, #7
 80008a2:	08db      	lsrs	r3, r3, #3
 80008a4:	00db      	lsls	r3, r3, #3
 80008a6:	466a      	mov	r2, sp
 80008a8:	1ad3      	subs	r3, r2, r3
 80008aa:	469d      	mov	sp, r3
 80008ac:	ab02      	add	r3, sp, #8
 80008ae:	3301      	adds	r3, #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i < size; i++) {		// better way to make array of 1 color; SPI without moving address of sent?
 80008b6:	2300      	movs	r3, #0
 80008b8:	637b      	str	r3, [r7, #52]	; 0x34
 80008ba:	e00e      	b.n	80008da <drawHLine+0x11c>
		colors[i] = colorFixer(color);
 80008bc:	2322      	movs	r3, #34	; 0x22
 80008be:	18fb      	adds	r3, r7, r3
 80008c0:	881b      	ldrh	r3, [r3, #0]
 80008c2:	0018      	movs	r0, r3
 80008c4:	f7ff ff1e 	bl	8000704 <colorFixer>
 80008c8:	0003      	movs	r3, r0
 80008ca:	0019      	movs	r1, r3
 80008cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80008d0:	0052      	lsls	r2, r2, #1
 80008d2:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < size; i++) {		// better way to make array of 1 color; SPI without moving address of sent?
 80008d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008d6:	3301      	adds	r3, #1
 80008d8:	637b      	str	r3, [r7, #52]	; 0x34
 80008da:	2325      	movs	r3, #37	; 0x25
 80008dc:	18fb      	adds	r3, r7, r3
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80008e2:	429a      	cmp	r2, r3
 80008e4:	dbea      	blt.n	80008bc <drawHLine+0xfe>
//		colors[i] = color;
	}

	sendCommand(ST77XX_RAMWR, colors, size*2, hspi);
 80008e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80008e8:	2325      	movs	r3, #37	; 0x25
 80008ea:	18fb      	adds	r3, r7, r3
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	18db      	adds	r3, r3, r3
 80008f2:	b29a      	uxth	r2, r3
 80008f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80008f6:	202c      	movs	r0, #44	; 0x2c
 80008f8:	f7ff fdb4 	bl	8000464 <sendCommand>
 80008fc:	46b5      	mov	sp, r6
 80008fe:	e001      	b.n	8000904 <drawHLine+0x146>
	if ((y > HEIGHT) || (y < 0)) return;	// don't draw if y is out of bounds
 8000900:	46c0      	nop			; (mov r8, r8)
 8000902:	46b5      	mov	sp, r6
}
 8000904:	46bd      	mov	sp, r7
 8000906:	b00f      	add	sp, #60	; 0x3c
 8000908:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800090a <drawVLine>:

void drawVLine(uint8_t x, uint8_t y, uint8_t size, uint16_t color, SPI_HandleTypeDef *hspi) {
 800090a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800090c:	b091      	sub	sp, #68	; 0x44
 800090e:	af02      	add	r7, sp, #8
 8000910:	000c      	movs	r4, r1
 8000912:	0016      	movs	r6, r2
 8000914:	0019      	movs	r1, r3
 8000916:	2327      	movs	r3, #39	; 0x27
 8000918:	18fa      	adds	r2, r7, r3
 800091a:	1c03      	adds	r3, r0, #0
 800091c:	7013      	strb	r3, [r2, #0]
 800091e:	2326      	movs	r3, #38	; 0x26
 8000920:	18fb      	adds	r3, r7, r3
 8000922:	1c22      	adds	r2, r4, #0
 8000924:	701a      	strb	r2, [r3, #0]
 8000926:	2325      	movs	r3, #37	; 0x25
 8000928:	18fb      	adds	r3, r7, r3
 800092a:	1c32      	adds	r2, r6, #0
 800092c:	701a      	strb	r2, [r3, #0]
 800092e:	2322      	movs	r3, #34	; 0x22
 8000930:	18fb      	adds	r3, r7, r3
 8000932:	1c0a      	adds	r2, r1, #0
 8000934:	801a      	strh	r2, [r3, #0]
 8000936:	466b      	mov	r3, sp
 8000938:	001e      	movs	r6, r3
	// bounds checking
	if (y < 0) x = 0;						// don't set x out of bounds
	if (y > HEIGHT) x = HEIGHT;
 800093a:	2326      	movs	r3, #38	; 0x26
 800093c:	18fb      	adds	r3, r7, r3
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2ba0      	cmp	r3, #160	; 0xa0
 8000942:	d903      	bls.n	800094c <drawVLine+0x42>
 8000944:	2327      	movs	r3, #39	; 0x27
 8000946:	18fb      	adds	r3, r7, r3
 8000948:	22a0      	movs	r2, #160	; 0xa0
 800094a:	701a      	strb	r2, [r3, #0]
	if (y+size > HEIGHT) size = HEIGHT-y;	// don't set size so line draws out of bounds
 800094c:	2326      	movs	r3, #38	; 0x26
 800094e:	18fb      	adds	r3, r7, r3
 8000950:	781a      	ldrb	r2, [r3, #0]
 8000952:	2325      	movs	r3, #37	; 0x25
 8000954:	18fb      	adds	r3, r7, r3
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	18d3      	adds	r3, r2, r3
 800095a:	2ba0      	cmp	r3, #160	; 0xa0
 800095c:	dd08      	ble.n	8000970 <drawVLine+0x66>
 800095e:	2325      	movs	r3, #37	; 0x25
 8000960:	18fb      	adds	r3, r7, r3
 8000962:	2226      	movs	r2, #38	; 0x26
 8000964:	18ba      	adds	r2, r7, r2
 8000966:	7812      	ldrb	r2, [r2, #0]
 8000968:	2160      	movs	r1, #96	; 0x60
 800096a:	4249      	negs	r1, r1
 800096c:	1a8a      	subs	r2, r1, r2
 800096e:	701a      	strb	r2, [r3, #0]
	if (y+size < 0) size = 0-y;
	if ((x > WIDTH) || (x < 0)) return;		// don't draw if y is out of bounds
 8000970:	2327      	movs	r3, #39	; 0x27
 8000972:	18fb      	adds	r3, r7, r3
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	2b80      	cmp	r3, #128	; 0x80
 8000978:	d869      	bhi.n	8000a4e <drawVLine+0x144>

	setAddrWindow(x, y, 1, size, hspi);
 800097a:	2327      	movs	r3, #39	; 0x27
 800097c:	18fb      	adds	r3, r7, r3
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	b298      	uxth	r0, r3
 8000982:	2326      	movs	r3, #38	; 0x26
 8000984:	18fb      	adds	r3, r7, r3
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	b299      	uxth	r1, r3
 800098a:	2325      	movs	r3, #37	; 0x25
 800098c:	18fb      	adds	r3, r7, r3
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	b29a      	uxth	r2, r3
 8000992:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000994:	9300      	str	r3, [sp, #0]
 8000996:	0013      	movs	r3, r2
 8000998:	2201      	movs	r2, #1
 800099a:	f7ff fe41 	bl	8000620 <setAddrWindow>
	uint16_t colors[size];
 800099e:	2325      	movs	r3, #37	; 0x25
 80009a0:	18fb      	adds	r3, r7, r3
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	001a      	movs	r2, r3
 80009a6:	3a01      	subs	r2, #1
 80009a8:	633a      	str	r2, [r7, #48]	; 0x30
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	2200      	movs	r2, #0
 80009ae:	60fa      	str	r2, [r7, #12]
 80009b0:	68b8      	ldr	r0, [r7, #8]
 80009b2:	68f9      	ldr	r1, [r7, #12]
 80009b4:	0002      	movs	r2, r0
 80009b6:	0f12      	lsrs	r2, r2, #28
 80009b8:	000c      	movs	r4, r1
 80009ba:	0124      	lsls	r4, r4, #4
 80009bc:	61fc      	str	r4, [r7, #28]
 80009be:	69fc      	ldr	r4, [r7, #28]
 80009c0:	4314      	orrs	r4, r2
 80009c2:	61fc      	str	r4, [r7, #28]
 80009c4:	0002      	movs	r2, r0
 80009c6:	0112      	lsls	r2, r2, #4
 80009c8:	61ba      	str	r2, [r7, #24]
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	2200      	movs	r2, #0
 80009ce:	607a      	str	r2, [r7, #4]
 80009d0:	6838      	ldr	r0, [r7, #0]
 80009d2:	6879      	ldr	r1, [r7, #4]
 80009d4:	0002      	movs	r2, r0
 80009d6:	0f12      	lsrs	r2, r2, #28
 80009d8:	000c      	movs	r4, r1
 80009da:	0124      	lsls	r4, r4, #4
 80009dc:	617c      	str	r4, [r7, #20]
 80009de:	697c      	ldr	r4, [r7, #20]
 80009e0:	4314      	orrs	r4, r2
 80009e2:	617c      	str	r4, [r7, #20]
 80009e4:	0002      	movs	r2, r0
 80009e6:	0112      	lsls	r2, r2, #4
 80009e8:	613a      	str	r2, [r7, #16]
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	3301      	adds	r3, #1
 80009ee:	3307      	adds	r3, #7
 80009f0:	08db      	lsrs	r3, r3, #3
 80009f2:	00db      	lsls	r3, r3, #3
 80009f4:	466a      	mov	r2, sp
 80009f6:	1ad3      	subs	r3, r2, r3
 80009f8:	469d      	mov	sp, r3
 80009fa:	ab02      	add	r3, sp, #8
 80009fc:	3301      	adds	r3, #1
 80009fe:	085b      	lsrs	r3, r3, #1
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i < size; i++) {		// there has to be a better way to make array of 1 color
 8000a04:	2300      	movs	r3, #0
 8000a06:	637b      	str	r3, [r7, #52]	; 0x34
 8000a08:	e00e      	b.n	8000a28 <drawVLine+0x11e>
											// SPI without moving address of sent buffer?
		colors[i] = colorFixer(color);
 8000a0a:	2322      	movs	r3, #34	; 0x22
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	881b      	ldrh	r3, [r3, #0]
 8000a10:	0018      	movs	r0, r3
 8000a12:	f7ff fe77 	bl	8000704 <colorFixer>
 8000a16:	0003      	movs	r3, r0
 8000a18:	0019      	movs	r1, r3
 8000a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a1e:	0052      	lsls	r2, r2, #1
 8000a20:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < size; i++) {		// there has to be a better way to make array of 1 color
 8000a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a24:	3301      	adds	r3, #1
 8000a26:	637b      	str	r3, [r7, #52]	; 0x34
 8000a28:	2325      	movs	r3, #37	; 0x25
 8000a2a:	18fb      	adds	r3, r7, r3
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a30:	429a      	cmp	r2, r3
 8000a32:	dbea      	blt.n	8000a0a <drawVLine+0x100>
	}

	sendCommand(ST77XX_RAMWR, colors, size*2, hspi);
 8000a34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000a36:	2325      	movs	r3, #37	; 0x25
 8000a38:	18fb      	adds	r3, r7, r3
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	18db      	adds	r3, r3, r3
 8000a40:	b29a      	uxth	r2, r3
 8000a42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a44:	202c      	movs	r0, #44	; 0x2c
 8000a46:	f7ff fd0d 	bl	8000464 <sendCommand>
 8000a4a:	46b5      	mov	sp, r6
 8000a4c:	e001      	b.n	8000a52 <drawVLine+0x148>
	if ((x > WIDTH) || (x < 0)) return;		// don't draw if y is out of bounds
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	46b5      	mov	sp, r6
}
 8000a52:	46bd      	mov	sp, r7
 8000a54:	b00f      	add	sp, #60	; 0x3c
 8000a56:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000a58 <fillRect>:
	drawHLine(x, y+h-1, w, color, hspi);
	drawVLine(x, y, h, color, hspi);
	drawVLine(x+w-1, y, h, color, hspi);
}

void fillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t color, SPI_HandleTypeDef *hspi) {
 8000a58:	b5b0      	push	{r4, r5, r7, lr}
 8000a5a:	b086      	sub	sp, #24
 8000a5c:	af02      	add	r7, sp, #8
 8000a5e:	0005      	movs	r5, r0
 8000a60:	000c      	movs	r4, r1
 8000a62:	0010      	movs	r0, r2
 8000a64:	0019      	movs	r1, r3
 8000a66:	1dfb      	adds	r3, r7, #7
 8000a68:	1c2a      	adds	r2, r5, #0
 8000a6a:	701a      	strb	r2, [r3, #0]
 8000a6c:	1dbb      	adds	r3, r7, #6
 8000a6e:	1c22      	adds	r2, r4, #0
 8000a70:	701a      	strb	r2, [r3, #0]
 8000a72:	1d7b      	adds	r3, r7, #5
 8000a74:	1c02      	adds	r2, r0, #0
 8000a76:	701a      	strb	r2, [r3, #0]
 8000a78:	1d3b      	adds	r3, r7, #4
 8000a7a:	1c0a      	adds	r2, r1, #0
 8000a7c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < h; i++) {
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	e014      	b.n	8000aae <fillRect+0x56>
		drawHLine(x, y+i, w, color, hspi);
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	1dbb      	adds	r3, r7, #6
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	18d3      	adds	r3, r2, r3
 8000a8e:	b2d9      	uxtb	r1, r3
 8000a90:	2320      	movs	r3, #32
 8000a92:	18fb      	adds	r3, r7, r3
 8000a94:	881c      	ldrh	r4, [r3, #0]
 8000a96:	1d7b      	adds	r3, r7, #5
 8000a98:	781a      	ldrb	r2, [r3, #0]
 8000a9a:	1dfb      	adds	r3, r7, #7
 8000a9c:	7818      	ldrb	r0, [r3, #0]
 8000a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa0:	9300      	str	r3, [sp, #0]
 8000aa2:	0023      	movs	r3, r4
 8000aa4:	f7ff fe8b 	bl	80007be <drawHLine>
	for (int i = 0; i < h; i++) {
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	1d3b      	adds	r3, r7, #4
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	68fa      	ldr	r2, [r7, #12]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	dbe5      	blt.n	8000a84 <fillRect+0x2c>
	}
}
 8000ab8:	46c0      	nop			; (mov r8, r8)
 8000aba:	46bd      	mov	sp, r7
 8000abc:	b004      	add	sp, #16
 8000abe:	bdb0      	pop	{r4, r5, r7, pc}

08000ac0 <fillScreen>:

void fillScreen(uint16_t color, SPI_HandleTypeDef *hspi) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af02      	add	r7, sp, #8
 8000ac6:	0002      	movs	r2, r0
 8000ac8:	6039      	str	r1, [r7, #0]
 8000aca:	1dbb      	adds	r3, r7, #6
 8000acc:	801a      	strh	r2, [r3, #0]
	fillRect(0, 0, WIDTH, HEIGHT, color, hspi);
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	9301      	str	r3, [sp, #4]
 8000ad2:	1dbb      	adds	r3, r7, #6
 8000ad4:	881b      	ldrh	r3, [r3, #0]
 8000ad6:	9300      	str	r3, [sp, #0]
 8000ad8:	23a0      	movs	r3, #160	; 0xa0
 8000ada:	2280      	movs	r2, #128	; 0x80
 8000adc:	2100      	movs	r1, #0
 8000ade:	2000      	movs	r0, #0
 8000ae0:	f7ff ffba 	bl	8000a58 <fillRect>
}
 8000ae4:	46c0      	nop			; (mov r8, r8)
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	b002      	add	sp, #8
 8000aea:	bd80      	pop	{r7, pc}

08000aec <drawChar>:

void drawChar(uint8_t x, uint8_t y, uint8_t ch, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y, SPI_HandleTypeDef *hspi) {
 8000aec:	b5b0      	push	{r4, r5, r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af02      	add	r7, sp, #8
 8000af2:	0005      	movs	r5, r0
 8000af4:	000c      	movs	r4, r1
 8000af6:	0010      	movs	r0, r2
 8000af8:	0019      	movs	r1, r3
 8000afa:	1dfb      	adds	r3, r7, #7
 8000afc:	1c2a      	adds	r2, r5, #0
 8000afe:	701a      	strb	r2, [r3, #0]
 8000b00:	1dbb      	adds	r3, r7, #6
 8000b02:	1c22      	adds	r2, r4, #0
 8000b04:	701a      	strb	r2, [r3, #0]
 8000b06:	1d7b      	adds	r3, r7, #5
 8000b08:	1c02      	adds	r2, r0, #0
 8000b0a:	701a      	strb	r2, [r3, #0]
 8000b0c:	1cbb      	adds	r3, r7, #2
 8000b0e:	1c0a      	adds	r2, r1, #0
 8000b10:	801a      	strh	r2, [r3, #0]
//	   ((y + 8 * size_y - 1) < 0))   // Clip top
//		return;

//	if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

	for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 8000b12:	230f      	movs	r3, #15
 8000b14:	18fb      	adds	r3, r7, r3
 8000b16:	2200      	movs	r2, #0
 8000b18:	701a      	strb	r2, [r3, #0]
 8000b1a:	e0c7      	b.n	8000cac <drawChar+0x1c0>
		uint8_t line = font[ch*5+i];
 8000b1c:	1d7b      	adds	r3, r7, #5
 8000b1e:	781a      	ldrb	r2, [r3, #0]
 8000b20:	0013      	movs	r3, r2
 8000b22:	009b      	lsls	r3, r3, #2
 8000b24:	189a      	adds	r2, r3, r2
 8000b26:	230f      	movs	r3, #15
 8000b28:	18fb      	adds	r3, r7, r3
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	b25b      	sxtb	r3, r3
 8000b2e:	18d2      	adds	r2, r2, r3
 8000b30:	230e      	movs	r3, #14
 8000b32:	18fb      	adds	r3, r7, r3
 8000b34:	4982      	ldr	r1, [pc, #520]	; (8000d40 <drawChar+0x254>)
 8000b36:	5c8a      	ldrb	r2, [r1, r2]
 8000b38:	701a      	strb	r2, [r3, #0]
		for(int8_t j=0; j<8; j++, line >>= 1) {
 8000b3a:	230d      	movs	r3, #13
 8000b3c:	18fb      	adds	r3, r7, r3
 8000b3e:	2200      	movs	r2, #0
 8000b40:	701a      	strb	r2, [r3, #0]
 8000b42:	e0a3      	b.n	8000c8c <drawChar+0x1a0>
			if(line & 1) {
 8000b44:	230e      	movs	r3, #14
 8000b46:	18fb      	adds	r3, r7, r3
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	d043      	beq.n	8000bd8 <drawChar+0xec>
				if(size_x == 1 && size_y == 1)
 8000b50:	2324      	movs	r3, #36	; 0x24
 8000b52:	18fb      	adds	r3, r7, r3
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d119      	bne.n	8000b8e <drawChar+0xa2>
 8000b5a:	2328      	movs	r3, #40	; 0x28
 8000b5c:	18fb      	adds	r3, r7, r3
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d114      	bne.n	8000b8e <drawChar+0xa2>
					drawPixel(x+i, y+j, color, hspi);
 8000b64:	230f      	movs	r3, #15
 8000b66:	18fb      	adds	r3, r7, r3
 8000b68:	781a      	ldrb	r2, [r3, #0]
 8000b6a:	1dfb      	adds	r3, r7, #7
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	18d3      	adds	r3, r2, r3
 8000b70:	b2d8      	uxtb	r0, r3
 8000b72:	230d      	movs	r3, #13
 8000b74:	18fb      	adds	r3, r7, r3
 8000b76:	781a      	ldrb	r2, [r3, #0]
 8000b78:	1dbb      	adds	r3, r7, #6
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	18d3      	adds	r3, r2, r3
 8000b7e:	b2d9      	uxtb	r1, r3
 8000b80:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8000b82:	1cbb      	adds	r3, r7, #2
 8000b84:	881a      	ldrh	r2, [r3, #0]
 8000b86:	0023      	movs	r3, r4
 8000b88:	f7ff fde0 	bl	800074c <drawPixel>
 8000b8c:	e06f      	b.n	8000c6e <drawChar+0x182>
				else
					fillRect(x+i*size_x, y+j*size_y, size_x, size_y, color, hspi);
 8000b8e:	230f      	movs	r3, #15
 8000b90:	18fb      	adds	r3, r7, r3
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2524      	movs	r5, #36	; 0x24
 8000b96:	197a      	adds	r2, r7, r5
 8000b98:	7812      	ldrb	r2, [r2, #0]
 8000b9a:	4353      	muls	r3, r2
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	1dfb      	adds	r3, r7, #7
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	18d3      	adds	r3, r2, r3
 8000ba4:	b2d8      	uxtb	r0, r3
 8000ba6:	230d      	movs	r3, #13
 8000ba8:	18fb      	adds	r3, r7, r3
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2428      	movs	r4, #40	; 0x28
 8000bae:	193a      	adds	r2, r7, r4
 8000bb0:	7812      	ldrb	r2, [r2, #0]
 8000bb2:	4353      	muls	r3, r2
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	1dbb      	adds	r3, r7, #6
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	18d3      	adds	r3, r2, r3
 8000bbc:	b2d9      	uxtb	r1, r3
 8000bbe:	193b      	adds	r3, r7, r4
 8000bc0:	781c      	ldrb	r4, [r3, #0]
 8000bc2:	197b      	adds	r3, r7, r5
 8000bc4:	781a      	ldrb	r2, [r3, #0]
 8000bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bc8:	9301      	str	r3, [sp, #4]
 8000bca:	1cbb      	adds	r3, r7, #2
 8000bcc:	881b      	ldrh	r3, [r3, #0]
 8000bce:	9300      	str	r3, [sp, #0]
 8000bd0:	0023      	movs	r3, r4
 8000bd2:	f7ff ff41 	bl	8000a58 <fillRect>
 8000bd6:	e04a      	b.n	8000c6e <drawChar+0x182>
			} else if(bg != color) {
 8000bd8:	2320      	movs	r3, #32
 8000bda:	18fa      	adds	r2, r7, r3
 8000bdc:	1cbb      	adds	r3, r7, #2
 8000bde:	8812      	ldrh	r2, [r2, #0]
 8000be0:	881b      	ldrh	r3, [r3, #0]
 8000be2:	429a      	cmp	r2, r3
 8000be4:	d043      	beq.n	8000c6e <drawChar+0x182>
				if(size_x == 1 && size_y == 1)
 8000be6:	2324      	movs	r3, #36	; 0x24
 8000be8:	18fb      	adds	r3, r7, r3
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d119      	bne.n	8000c24 <drawChar+0x138>
 8000bf0:	2328      	movs	r3, #40	; 0x28
 8000bf2:	18fb      	adds	r3, r7, r3
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d114      	bne.n	8000c24 <drawChar+0x138>
					drawPixel(x+i, y+j, bg, hspi);
 8000bfa:	230f      	movs	r3, #15
 8000bfc:	18fb      	adds	r3, r7, r3
 8000bfe:	781a      	ldrb	r2, [r3, #0]
 8000c00:	1dfb      	adds	r3, r7, #7
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	18d3      	adds	r3, r2, r3
 8000c06:	b2d8      	uxtb	r0, r3
 8000c08:	230d      	movs	r3, #13
 8000c0a:	18fb      	adds	r3, r7, r3
 8000c0c:	781a      	ldrb	r2, [r3, #0]
 8000c0e:	1dbb      	adds	r3, r7, #6
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	18d3      	adds	r3, r2, r3
 8000c14:	b2d9      	uxtb	r1, r3
 8000c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c18:	2220      	movs	r2, #32
 8000c1a:	18ba      	adds	r2, r7, r2
 8000c1c:	8812      	ldrh	r2, [r2, #0]
 8000c1e:	f7ff fd95 	bl	800074c <drawPixel>
 8000c22:	e024      	b.n	8000c6e <drawChar+0x182>
				else
					fillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg, hspi);
 8000c24:	230f      	movs	r3, #15
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2524      	movs	r5, #36	; 0x24
 8000c2c:	197a      	adds	r2, r7, r5
 8000c2e:	7812      	ldrb	r2, [r2, #0]
 8000c30:	4353      	muls	r3, r2
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	1dfb      	adds	r3, r7, #7
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	18d3      	adds	r3, r2, r3
 8000c3a:	b2d8      	uxtb	r0, r3
 8000c3c:	230d      	movs	r3, #13
 8000c3e:	18fb      	adds	r3, r7, r3
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2428      	movs	r4, #40	; 0x28
 8000c44:	193a      	adds	r2, r7, r4
 8000c46:	7812      	ldrb	r2, [r2, #0]
 8000c48:	4353      	muls	r3, r2
 8000c4a:	b2da      	uxtb	r2, r3
 8000c4c:	1dbb      	adds	r3, r7, #6
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	18d3      	adds	r3, r2, r3
 8000c52:	b2d9      	uxtb	r1, r3
 8000c54:	193b      	adds	r3, r7, r4
 8000c56:	781c      	ldrb	r4, [r3, #0]
 8000c58:	197b      	adds	r3, r7, r5
 8000c5a:	781a      	ldrb	r2, [r3, #0]
 8000c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c5e:	9301      	str	r3, [sp, #4]
 8000c60:	2320      	movs	r3, #32
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	881b      	ldrh	r3, [r3, #0]
 8000c66:	9300      	str	r3, [sp, #0]
 8000c68:	0023      	movs	r3, r4
 8000c6a:	f7ff fef5 	bl	8000a58 <fillRect>
		for(int8_t j=0; j<8; j++, line >>= 1) {
 8000c6e:	210d      	movs	r1, #13
 8000c70:	187b      	adds	r3, r7, r1
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	b25b      	sxtb	r3, r3
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	3301      	adds	r3, #1
 8000c7a:	b2da      	uxtb	r2, r3
 8000c7c:	187b      	adds	r3, r7, r1
 8000c7e:	701a      	strb	r2, [r3, #0]
 8000c80:	220e      	movs	r2, #14
 8000c82:	18bb      	adds	r3, r7, r2
 8000c84:	18ba      	adds	r2, r7, r2
 8000c86:	7812      	ldrb	r2, [r2, #0]
 8000c88:	0852      	lsrs	r2, r2, #1
 8000c8a:	701a      	strb	r2, [r3, #0]
 8000c8c:	230d      	movs	r3, #13
 8000c8e:	18fb      	adds	r3, r7, r3
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	b25b      	sxtb	r3, r3
 8000c94:	2b07      	cmp	r3, #7
 8000c96:	dc00      	bgt.n	8000c9a <drawChar+0x1ae>
 8000c98:	e754      	b.n	8000b44 <drawChar+0x58>
	for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 8000c9a:	210f      	movs	r1, #15
 8000c9c:	187b      	adds	r3, r7, r1
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	b25b      	sxtb	r3, r3
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	187b      	adds	r3, r7, r1
 8000caa:	701a      	strb	r2, [r3, #0]
 8000cac:	230f      	movs	r3, #15
 8000cae:	18fb      	adds	r3, r7, r3
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	b25b      	sxtb	r3, r3
 8000cb4:	2b04      	cmp	r3, #4
 8000cb6:	dc00      	bgt.n	8000cba <drawChar+0x1ce>
 8000cb8:	e730      	b.n	8000b1c <drawChar+0x30>
			}
		}
	}
	if(bg != color) { // If opaque, draw vertical line for last column
 8000cba:	2320      	movs	r3, #32
 8000cbc:	18fa      	adds	r2, r7, r3
 8000cbe:	1cbb      	adds	r3, r7, #2
 8000cc0:	8812      	ldrh	r2, [r2, #0]
 8000cc2:	881b      	ldrh	r3, [r3, #0]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d036      	beq.n	8000d36 <drawChar+0x24a>
		if(size_x == 1 && size_y == 1) drawVLine(x+5, y, 8, bg, hspi);
 8000cc8:	2324      	movs	r3, #36	; 0x24
 8000cca:	18fb      	adds	r3, r7, r3
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d114      	bne.n	8000cfc <drawChar+0x210>
 8000cd2:	2328      	movs	r3, #40	; 0x28
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d10f      	bne.n	8000cfc <drawChar+0x210>
 8000cdc:	1dfb      	adds	r3, r7, #7
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	3305      	adds	r3, #5
 8000ce2:	b2d8      	uxtb	r0, r3
 8000ce4:	2320      	movs	r3, #32
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	881a      	ldrh	r2, [r3, #0]
 8000cea:	1dbb      	adds	r3, r7, #6
 8000cec:	7819      	ldrb	r1, [r3, #0]
 8000cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cf0:	9300      	str	r3, [sp, #0]
 8000cf2:	0013      	movs	r3, r2
 8000cf4:	2208      	movs	r2, #8
 8000cf6:	f7ff fe08 	bl	800090a <drawVLine>
		else          fillRect(x+5*size_x, y, size_x, 8*size_y, bg, hspi);
	}
}
 8000cfa:	e01c      	b.n	8000d36 <drawChar+0x24a>
		else          fillRect(x+5*size_x, y, size_x, 8*size_y, bg, hspi);
 8000cfc:	2124      	movs	r1, #36	; 0x24
 8000cfe:	187b      	adds	r3, r7, r1
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	1c1a      	adds	r2, r3, #0
 8000d04:	0092      	lsls	r2, r2, #2
 8000d06:	18d3      	adds	r3, r2, r3
 8000d08:	b2da      	uxtb	r2, r3
 8000d0a:	1dfb      	adds	r3, r7, #7
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	18d3      	adds	r3, r2, r3
 8000d10:	b2d8      	uxtb	r0, r3
 8000d12:	2328      	movs	r3, #40	; 0x28
 8000d14:	18fb      	adds	r3, r7, r3
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	00db      	lsls	r3, r3, #3
 8000d1a:	b2dc      	uxtb	r4, r3
 8000d1c:	187b      	adds	r3, r7, r1
 8000d1e:	781a      	ldrb	r2, [r3, #0]
 8000d20:	1dbb      	adds	r3, r7, #6
 8000d22:	7819      	ldrb	r1, [r3, #0]
 8000d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d26:	9301      	str	r3, [sp, #4]
 8000d28:	2320      	movs	r3, #32
 8000d2a:	18fb      	adds	r3, r7, r3
 8000d2c:	881b      	ldrh	r3, [r3, #0]
 8000d2e:	9300      	str	r3, [sp, #0]
 8000d30:	0023      	movs	r3, r4
 8000d32:	f7ff fe91 	bl	8000a58 <fillRect>
}
 8000d36:	46c0      	nop			; (mov r8, r8)
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	b004      	add	sp, #16
 8000d3c:	bdb0      	pop	{r4, r5, r7, pc}
 8000d3e:	46c0      	nop			; (mov r8, r8)
 8000d40:	0800598c 	.word	0x0800598c

08000d44 <drawText>:

// this function is slow, and you can definitely see a scrolling speed thing going on
// how to remove this so it prints near instantly?
// maybe not needed if all we're doing is printing time (very few characters)
void drawText(uint8_t x, uint8_t y, uint8_t size, uint16_t color, uint16_t bg, char *str, SPI_HandleTypeDef *hspi) {
 8000d44:	b5b0      	push	{r4, r5, r7, lr}
 8000d46:	b088      	sub	sp, #32
 8000d48:	af04      	add	r7, sp, #16
 8000d4a:	0005      	movs	r5, r0
 8000d4c:	000c      	movs	r4, r1
 8000d4e:	0010      	movs	r0, r2
 8000d50:	0019      	movs	r1, r3
 8000d52:	1dfb      	adds	r3, r7, #7
 8000d54:	1c2a      	adds	r2, r5, #0
 8000d56:	701a      	strb	r2, [r3, #0]
 8000d58:	1dbb      	adds	r3, r7, #6
 8000d5a:	1c22      	adds	r2, r4, #0
 8000d5c:	701a      	strb	r2, [r3, #0]
 8000d5e:	1d7b      	adds	r3, r7, #5
 8000d60:	1c02      	adds	r2, r0, #0
 8000d62:	701a      	strb	r2, [r3, #0]
 8000d64:	1cbb      	adds	r3, r7, #2
 8000d66:	1c0a      	adds	r2, r1, #0
 8000d68:	801a      	strh	r2, [r3, #0]
//	for (int i = 0; str[i] != '\0'; i++) {
//		strsize++;
//	}
//	fillRect(x, y, strsize*size*6, size*8, bg, hspi);
	// add text wrap
	for (int i = 0; str[i] != '\0'; i++) {
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	e029      	b.n	8000dc4 <drawText+0x80>
		drawChar(x+i*6*size, y, str[i], color, bg, size, size, hspi);
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	1d7a      	adds	r2, r7, #5
 8000d76:	7812      	ldrb	r2, [r2, #0]
 8000d78:	4353      	muls	r3, r2
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	1c1a      	adds	r2, r3, #0
 8000d7e:	1c13      	adds	r3, r2, #0
 8000d80:	18db      	adds	r3, r3, r3
 8000d82:	189b      	adds	r3, r3, r2
 8000d84:	18db      	adds	r3, r3, r3
 8000d86:	b2da      	uxtb	r2, r3
 8000d88:	1dfb      	adds	r3, r7, #7
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	18d3      	adds	r3, r2, r3
 8000d8e:	b2d8      	uxtb	r0, r3
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d94:	18d3      	adds	r3, r2, r3
 8000d96:	781a      	ldrb	r2, [r3, #0]
 8000d98:	1cbb      	adds	r3, r7, #2
 8000d9a:	881c      	ldrh	r4, [r3, #0]
 8000d9c:	1dbb      	adds	r3, r7, #6
 8000d9e:	7819      	ldrb	r1, [r3, #0]
 8000da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000da2:	9303      	str	r3, [sp, #12]
 8000da4:	1d7b      	adds	r3, r7, #5
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	9302      	str	r3, [sp, #8]
 8000daa:	1d7b      	adds	r3, r7, #5
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	9301      	str	r3, [sp, #4]
 8000db0:	2320      	movs	r3, #32
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	881b      	ldrh	r3, [r3, #0]
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	0023      	movs	r3, r4
 8000dba:	f7ff fe97 	bl	8000aec <drawChar>
	for (int i = 0; str[i] != '\0'; i++) {
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dc8:	18d3      	adds	r3, r2, r3
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d1cf      	bne.n	8000d70 <drawText+0x2c>
	}
}
 8000dd0:	46c0      	nop			; (mov r8, r8)
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	b004      	add	sp, #16
 8000dd6:	bdb0      	pop	{r4, r5, r7, pc}

08000dd8 <setTime>:
// set_timer();
// set_alarm();


// change to use arguments
void setTime(RTC_HandleTypeDef *hrtc) {
 8000dd8:	b590      	push	{r4, r7, lr}
 8000dda:	b089      	sub	sp, #36	; 0x24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef stime = {0};	// change to malloc call? does that work in embedded?
 8000de0:	210c      	movs	r1, #12
 8000de2:	000c      	movs	r4, r1
 8000de4:	187b      	adds	r3, r7, r1
 8000de6:	0018      	movs	r0, r3
 8000de8:	2314      	movs	r3, #20
 8000dea:	001a      	movs	r2, r3
 8000dec:	2100      	movs	r1, #0
 8000dee:	f004 f95e 	bl	80050ae <memset>

	// set using args later
	stime.Hours = 1;
 8000df2:	0021      	movs	r1, r4
 8000df4:	187b      	adds	r3, r7, r1
 8000df6:	2201      	movs	r2, #1
 8000df8:	701a      	strb	r2, [r3, #0]
	stime.Minutes = 1;
 8000dfa:	187b      	adds	r3, r7, r1
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	705a      	strb	r2, [r3, #1]
	stime.Seconds = 1;
 8000e00:	187b      	adds	r3, r7, r1
 8000e02:	2201      	movs	r2, #1
 8000e04:	709a      	strb	r2, [r3, #2]

	stime.TimeFormat = RTC_HOURFORMAT_24;
 8000e06:	187b      	adds	r3, r7, r1
 8000e08:	2200      	movs	r2, #0
 8000e0a:	70da      	strb	r2, [r3, #3]

	// not sure what these do, but probably fine if set to 0 or ignored
	stime.SubSeconds = 0;
 8000e0c:	187b      	adds	r3, r7, r1
 8000e0e:	2200      	movs	r2, #0
 8000e10:	605a      	str	r2, [r3, #4]
	stime.SecondFraction = 0;
 8000e12:	187b      	adds	r3, r7, r1
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]

	stime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;		// add daylight savings later?
 8000e18:	187b      	adds	r3, r7, r1
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	60da      	str	r2, [r3, #12]
	stime.StoreOperation = RTC_STOREOPERATION_SET;		// not sure what this does
 8000e1e:	187b      	adds	r3, r7, r1
 8000e20:	2280      	movs	r2, #128	; 0x80
 8000e22:	02d2      	lsls	r2, r2, #11
 8000e24:	611a      	str	r2, [r3, #16]

	// do nothing until done
	// not following BCD format (4-bit digit 1, 4-bit digit 2)
	// while makes program hang? ignore instead?
//	while (HAL_RTC_SetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK);
	HAL_RTC_SetTime(hrtc, &stime, RTC_FORMAT_BIN);
 8000e26:	1879      	adds	r1, r7, r1
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f002 fd7f 	bl	8003930 <HAL_RTC_SetTime>
}
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	46bd      	mov	sp, r7
 8000e36:	b009      	add	sp, #36	; 0x24
 8000e38:	bd90      	pop	{r4, r7, pc}

08000e3a <setDateTime>:

// change to use args
void setDateTime(RTC_HandleTypeDef *hrtc) {
 8000e3a:	b590      	push	{r4, r7, lr}
 8000e3c:	b089      	sub	sp, #36	; 0x24
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
	// ---- time ----
	RTC_TimeTypeDef stime = {0};
 8000e42:	210c      	movs	r1, #12
 8000e44:	000c      	movs	r4, r1
 8000e46:	187b      	adds	r3, r7, r1
 8000e48:	0018      	movs	r0, r3
 8000e4a:	2314      	movs	r3, #20
 8000e4c:	001a      	movs	r2, r3
 8000e4e:	2100      	movs	r1, #0
 8000e50:	f004 f92d 	bl	80050ae <memset>

	// set with args later
	stime.Hours = 2;
 8000e54:	0021      	movs	r1, r4
 8000e56:	187b      	adds	r3, r7, r1
 8000e58:	2202      	movs	r2, #2
 8000e5a:	701a      	strb	r2, [r3, #0]
	stime.Minutes = 2;
 8000e5c:	187b      	adds	r3, r7, r1
 8000e5e:	2202      	movs	r2, #2
 8000e60:	705a      	strb	r2, [r3, #1]
	stime.Seconds = 2;
 8000e62:	187b      	adds	r3, r7, r1
 8000e64:	2202      	movs	r2, #2
 8000e66:	709a      	strb	r2, [r3, #2]

	stime.TimeFormat = RTC_HOURFORMAT_24;
 8000e68:	187b      	adds	r3, r7, r1
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	70da      	strb	r2, [r3, #3]

	// not sure what these do
	stime.SubSeconds = 0;
 8000e6e:	187b      	adds	r3, r7, r1
 8000e70:	2200      	movs	r2, #0
 8000e72:	605a      	str	r2, [r3, #4]
	stime.SecondFraction = 0;
 8000e74:	187b      	adds	r3, r7, r1
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]

	stime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;		// add daylight savings later?
 8000e7a:	187b      	adds	r3, r7, r1
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	60da      	str	r2, [r3, #12]
	stime.StoreOperation = RTC_STOREOPERATION_SET;		// not sure what this does
 8000e80:	187b      	adds	r3, r7, r1
 8000e82:	2280      	movs	r2, #128	; 0x80
 8000e84:	02d2      	lsls	r2, r2, #11
 8000e86:	611a      	str	r2, [r3, #16]
	// ---- end time ----

	// ---- date ----
	RTC_DateTypeDef sdate = {0};
 8000e88:	2408      	movs	r4, #8
 8000e8a:	193b      	adds	r3, r7, r4
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]

	// set with args later
	sdate.Month = RTC_MONTH_NOVEMBER;
 8000e90:	193b      	adds	r3, r7, r4
 8000e92:	2211      	movs	r2, #17
 8000e94:	705a      	strb	r2, [r3, #1]
	sdate.Date = 8;
 8000e96:	193b      	adds	r3, r7, r4
 8000e98:	2208      	movs	r2, #8
 8000e9a:	709a      	strb	r2, [r3, #2]
	sdate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8000e9c:	193b      	adds	r3, r7, r4
 8000e9e:	2205      	movs	r2, #5
 8000ea0:	701a      	strb	r2, [r3, #0]
	sdate.Year = 19; 		// set only between 0-99. part of the library (!?)
 8000ea2:	193b      	adds	r3, r7, r4
 8000ea4:	2213      	movs	r2, #19
 8000ea6:	70da      	strb	r2, [r3, #3]

	// do nothing until done
//	while (HAL_RTC_SetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK);
//	while (HAL_RTC_SetDate(hrtc, &sdate, RTC_FORMAT_BIN) != HAL_OK);

	HAL_RTC_SetTime(hrtc, &stime, RTC_FORMAT_BIN);
 8000ea8:	1879      	adds	r1, r7, r1
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2200      	movs	r2, #0
 8000eae:	0018      	movs	r0, r3
 8000eb0:	f002 fd3e 	bl	8003930 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(hrtc, &sdate, RTC_FORMAT_BIN);
 8000eb4:	1939      	adds	r1, r7, r4
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f002 fe58 	bl	8003b70 <HAL_RTC_SetDate>
}
 8000ec0:	46c0      	nop			; (mov r8, r8)
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	b009      	add	sp, #36	; 0x24
 8000ec6:	bd90      	pop	{r4, r7, pc}

08000ec8 <printTime>:

// ---- clock print functions ----
// print functions for RTC
// assumes we're using SPI display and file TFT_display.c
// pulls date and time structs automatically to only print current time in RTC
void printTime(RTC_HandleTypeDef *hrtc, SPI_HandleTypeDef *hspi) {
 8000ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eca:	b097      	sub	sp, #92	; 0x5c
 8000ecc:	af04      	add	r7, sp, #16
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
	char str[40];		// problems when using only char*

	RTC_TimeTypeDef stime;		// problems when unitialized? doesn't look like it so far
	HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN);
 8000ed2:	2108      	movs	r1, #8
 8000ed4:	000c      	movs	r4, r1
 8000ed6:	1879      	adds	r1, r7, r1
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	0018      	movs	r0, r3
 8000ede:	f002 fdeb 	bl	8003ab8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, NULL, RTC_FORMAT_BIN);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	0018      	movs	r0, r3
 8000eea:	f002 feef 	bl	8003ccc <HAL_RTC_GetDate>

	uint8_t sec = stime.Seconds;
 8000eee:	2047      	movs	r0, #71	; 0x47
 8000ef0:	183b      	adds	r3, r7, r0
 8000ef2:	0021      	movs	r1, r4
 8000ef4:	187a      	adds	r2, r7, r1
 8000ef6:	7892      	ldrb	r2, [r2, #2]
 8000ef8:	701a      	strb	r2, [r3, #0]
	uint8_t min = stime.Minutes;
 8000efa:	2546      	movs	r5, #70	; 0x46
 8000efc:	197b      	adds	r3, r7, r5
 8000efe:	187a      	adds	r2, r7, r1
 8000f00:	7852      	ldrb	r2, [r2, #1]
 8000f02:	701a      	strb	r2, [r3, #0]
	uint8_t hr = stime.Hours;
 8000f04:	2645      	movs	r6, #69	; 0x45
 8000f06:	19bb      	adds	r3, r7, r6
 8000f08:	187a      	adds	r2, r7, r1
 8000f0a:	7812      	ldrb	r2, [r2, #0]
 8000f0c:	701a      	strb	r2, [r3, #0]
	sprintf(str, "sec: %2d", sec);
 8000f0e:	183b      	adds	r3, r7, r0
 8000f10:	781a      	ldrb	r2, [r3, #0]
 8000f12:	491e      	ldr	r1, [pc, #120]	; (8000f8c <printTime+0xc4>)
 8000f14:	241c      	movs	r4, #28
 8000f16:	193b      	adds	r3, r7, r4
 8000f18:	0018      	movs	r0, r3
 8000f1a:	f004 f8d1 	bl	80050c0 <siprintf>
	drawText(0, 0, 1, ST77XX_BLACK, ST77XX_WHITE, str, hspi);
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	9302      	str	r3, [sp, #8]
 8000f22:	193b      	adds	r3, r7, r4
 8000f24:	9301      	str	r3, [sp, #4]
 8000f26:	4b1a      	ldr	r3, [pc, #104]	; (8000f90 <printTime+0xc8>)
 8000f28:	9300      	str	r3, [sp, #0]
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	2100      	movs	r1, #0
 8000f30:	2000      	movs	r0, #0
 8000f32:	f7ff ff07 	bl	8000d44 <drawText>
	sprintf(str, "min: %2d", min);
 8000f36:	197b      	adds	r3, r7, r5
 8000f38:	781a      	ldrb	r2, [r3, #0]
 8000f3a:	4916      	ldr	r1, [pc, #88]	; (8000f94 <printTime+0xcc>)
 8000f3c:	193b      	adds	r3, r7, r4
 8000f3e:	0018      	movs	r0, r3
 8000f40:	f004 f8be 	bl	80050c0 <siprintf>
	drawText(0, 10, 1, ST77XX_BLACK, ST77XX_WHITE, str, hspi);
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	9302      	str	r3, [sp, #8]
 8000f48:	193b      	adds	r3, r7, r4
 8000f4a:	9301      	str	r3, [sp, #4]
 8000f4c:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <printTime+0xc8>)
 8000f4e:	9300      	str	r3, [sp, #0]
 8000f50:	2300      	movs	r3, #0
 8000f52:	2201      	movs	r2, #1
 8000f54:	210a      	movs	r1, #10
 8000f56:	2000      	movs	r0, #0
 8000f58:	f7ff fef4 	bl	8000d44 <drawText>
	sprintf(str, "hr: %3d", hr);
 8000f5c:	19bb      	adds	r3, r7, r6
 8000f5e:	781a      	ldrb	r2, [r3, #0]
 8000f60:	490d      	ldr	r1, [pc, #52]	; (8000f98 <printTime+0xd0>)
 8000f62:	193b      	adds	r3, r7, r4
 8000f64:	0018      	movs	r0, r3
 8000f66:	f004 f8ab 	bl	80050c0 <siprintf>
	drawText(0, 20, 1, ST77XX_BLACK, ST77XX_WHITE, str, hspi);
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	9302      	str	r3, [sp, #8]
 8000f6e:	193b      	adds	r3, r7, r4
 8000f70:	9301      	str	r3, [sp, #4]
 8000f72:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <printTime+0xc8>)
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	2300      	movs	r3, #0
 8000f78:	2201      	movs	r2, #1
 8000f7a:	2114      	movs	r1, #20
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	f7ff fee1 	bl	8000d44 <drawText>
}
 8000f82:	46c0      	nop			; (mov r8, r8)
 8000f84:	46bd      	mov	sp, r7
 8000f86:	b013      	add	sp, #76	; 0x4c
 8000f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	08005948 	.word	0x08005948
 8000f90:	0000ffff 	.word	0x0000ffff
 8000f94:	08005954 	.word	0x08005954
 8000f98:	08005960 	.word	0x08005960

08000f9c <printDate>:

void printDate(RTC_HandleTypeDef *hrtc, SPI_HandleTypeDef *hspi) {
 8000f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f9e:	b093      	sub	sp, #76	; 0x4c
 8000fa0:	af04      	add	r7, sp, #16
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
	char str[40];		// problems when using only char*

	RTC_DateTypeDef sdate;		// problems when unitialized? doesn't look like it so far
	HAL_RTC_GetTime(hrtc, NULL, RTC_FORMAT_BIN);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2100      	movs	r1, #0
 8000fac:	0018      	movs	r0, r3
 8000fae:	f002 fd83 	bl	8003ab8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &sdate, RTC_FORMAT_BIN);
 8000fb2:	2108      	movs	r1, #8
 8000fb4:	000c      	movs	r4, r1
 8000fb6:	1879      	adds	r1, r7, r1
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	f002 fe85 	bl	8003ccc <HAL_RTC_GetDate>

	uint8_t yr = sdate.Year;
 8000fc2:	2037      	movs	r0, #55	; 0x37
 8000fc4:	183b      	adds	r3, r7, r0
 8000fc6:	0021      	movs	r1, r4
 8000fc8:	187a      	adds	r2, r7, r1
 8000fca:	78d2      	ldrb	r2, [r2, #3]
 8000fcc:	701a      	strb	r2, [r3, #0]
	uint8_t month = sdate.Month;
 8000fce:	2536      	movs	r5, #54	; 0x36
 8000fd0:	197b      	adds	r3, r7, r5
 8000fd2:	187a      	adds	r2, r7, r1
 8000fd4:	7852      	ldrb	r2, [r2, #1]
 8000fd6:	701a      	strb	r2, [r3, #0]
	uint8_t day = sdate.Date;
 8000fd8:	2635      	movs	r6, #53	; 0x35
 8000fda:	19bb      	adds	r3, r7, r6
 8000fdc:	187a      	adds	r2, r7, r1
 8000fde:	7892      	ldrb	r2, [r2, #2]
 8000fe0:	701a      	strb	r2, [r3, #0]
	sprintf(str, "year: %3d", yr);
 8000fe2:	183b      	adds	r3, r7, r0
 8000fe4:	781a      	ldrb	r2, [r3, #0]
 8000fe6:	491e      	ldr	r1, [pc, #120]	; (8001060 <printDate+0xc4>)
 8000fe8:	240c      	movs	r4, #12
 8000fea:	193b      	adds	r3, r7, r4
 8000fec:	0018      	movs	r0, r3
 8000fee:	f004 f867 	bl	80050c0 <siprintf>
	drawText(0, 40, 1, ST77XX_BLACK, ST77XX_WHITE, str, hspi);
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	9302      	str	r3, [sp, #8]
 8000ff6:	193b      	adds	r3, r7, r4
 8000ff8:	9301      	str	r3, [sp, #4]
 8000ffa:	4b1a      	ldr	r3, [pc, #104]	; (8001064 <printDate+0xc8>)
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	2300      	movs	r3, #0
 8001000:	2201      	movs	r2, #1
 8001002:	2128      	movs	r1, #40	; 0x28
 8001004:	2000      	movs	r0, #0
 8001006:	f7ff fe9d 	bl	8000d44 <drawText>
	sprintf(str, "month: %4d", month);
 800100a:	197b      	adds	r3, r7, r5
 800100c:	781a      	ldrb	r2, [r3, #0]
 800100e:	4916      	ldr	r1, [pc, #88]	; (8001068 <printDate+0xcc>)
 8001010:	193b      	adds	r3, r7, r4
 8001012:	0018      	movs	r0, r3
 8001014:	f004 f854 	bl	80050c0 <siprintf>
	drawText(0, 50, 1, ST77XX_BLACK, ST77XX_WHITE, str, hspi);
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	9302      	str	r3, [sp, #8]
 800101c:	193b      	adds	r3, r7, r4
 800101e:	9301      	str	r3, [sp, #4]
 8001020:	4b10      	ldr	r3, [pc, #64]	; (8001064 <printDate+0xc8>)
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	2300      	movs	r3, #0
 8001026:	2201      	movs	r2, #1
 8001028:	2132      	movs	r1, #50	; 0x32
 800102a:	2000      	movs	r0, #0
 800102c:	f7ff fe8a 	bl	8000d44 <drawText>
	sprintf(str, "day: %2d", day);
 8001030:	19bb      	adds	r3, r7, r6
 8001032:	781a      	ldrb	r2, [r3, #0]
 8001034:	490d      	ldr	r1, [pc, #52]	; (800106c <printDate+0xd0>)
 8001036:	193b      	adds	r3, r7, r4
 8001038:	0018      	movs	r0, r3
 800103a:	f004 f841 	bl	80050c0 <siprintf>
	drawText(0, 60, 1, ST77XX_BLACK, ST77XX_WHITE, str, hspi);
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	9302      	str	r3, [sp, #8]
 8001042:	193b      	adds	r3, r7, r4
 8001044:	9301      	str	r3, [sp, #4]
 8001046:	4b07      	ldr	r3, [pc, #28]	; (8001064 <printDate+0xc8>)
 8001048:	9300      	str	r3, [sp, #0]
 800104a:	2300      	movs	r3, #0
 800104c:	2201      	movs	r2, #1
 800104e:	213c      	movs	r1, #60	; 0x3c
 8001050:	2000      	movs	r0, #0
 8001052:	f7ff fe77 	bl	8000d44 <drawText>
}
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	46bd      	mov	sp, r7
 800105a:	b00f      	add	sp, #60	; 0x3c
 800105c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800105e:	46c0      	nop			; (mov r8, r8)
 8001060:	08005968 	.word	0x08005968
 8001064:	0000ffff 	.word	0x0000ffff
 8001068:	08005974 	.word	0x08005974
 800106c:	08005980 	.word	0x08005980

08001070 <printDateTime>:

void printDateTime(RTC_HandleTypeDef *hrtc, SPI_HandleTypeDef *hspi) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
	printTime(hrtc, hspi);
 800107a:	683a      	ldr	r2, [r7, #0]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	0011      	movs	r1, r2
 8001080:	0018      	movs	r0, r3
 8001082:	f7ff ff21 	bl	8000ec8 <printTime>
	printDate(hrtc, hspi);
 8001086:	683a      	ldr	r2, [r7, #0]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	0011      	movs	r1, r2
 800108c:	0018      	movs	r0, r3
 800108e:	f7ff ff85 	bl	8000f9c <printDate>
}
 8001092:	46c0      	nop			; (mov r8, r8)
 8001094:	46bd      	mov	sp, r7
 8001096:	b002      	add	sp, #8
 8001098:	bd80      	pop	{r7, pc}

0800109a <clockTest>:
// ---- end of clock print functions ----

// tests clock functions. assumes SPI display using TFT_display.c is available
void clockTest(RTC_HandleTypeDef *hrtc, SPI_HandleTypeDef *hspi) {
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
 80010a2:	6039      	str	r1, [r7, #0]
	HAL_Delay(1000);
 80010a4:	23fa      	movs	r3, #250	; 0xfa
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	0018      	movs	r0, r3
 80010aa:	f000 fef5 	bl	8001e98 <HAL_Delay>
	printDateTime(hrtc, hspi);
 80010ae:	683a      	ldr	r2, [r7, #0]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	0011      	movs	r1, r2
 80010b4:	0018      	movs	r0, r3
 80010b6:	f7ff ffdb 	bl	8001070 <printDateTime>
	HAL_Delay(2000);
 80010ba:	23fa      	movs	r3, #250	; 0xfa
 80010bc:	00db      	lsls	r3, r3, #3
 80010be:	0018      	movs	r0, r3
 80010c0:	f000 feea 	bl	8001e98 <HAL_Delay>
	printDateTime(hrtc, hspi);
 80010c4:	683a      	ldr	r2, [r7, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	0011      	movs	r1, r2
 80010ca:	0018      	movs	r0, r3
 80010cc:	f7ff ffd0 	bl	8001070 <printDateTime>

	HAL_Delay(1000);
 80010d0:	23fa      	movs	r3, #250	; 0xfa
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	0018      	movs	r0, r3
 80010d6:	f000 fedf 	bl	8001e98 <HAL_Delay>
	setTime(hrtc);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	0018      	movs	r0, r3
 80010de:	f7ff fe7b 	bl	8000dd8 <setTime>
	printDateTime(hrtc, hspi);
 80010e2:	683a      	ldr	r2, [r7, #0]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	0011      	movs	r1, r2
 80010e8:	0018      	movs	r0, r3
 80010ea:	f7ff ffc1 	bl	8001070 <printDateTime>
	HAL_Delay(1000);
 80010ee:	23fa      	movs	r3, #250	; 0xfa
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	0018      	movs	r0, r3
 80010f4:	f000 fed0 	bl	8001e98 <HAL_Delay>
	printDateTime(hrtc, hspi);
 80010f8:	683a      	ldr	r2, [r7, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	0011      	movs	r1, r2
 80010fe:	0018      	movs	r0, r3
 8001100:	f7ff ffb6 	bl	8001070 <printDateTime>

	HAL_Delay(1000);
 8001104:	23fa      	movs	r3, #250	; 0xfa
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	0018      	movs	r0, r3
 800110a:	f000 fec5 	bl	8001e98 <HAL_Delay>
	setDateTime(hrtc);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	0018      	movs	r0, r3
 8001112:	f7ff fe92 	bl	8000e3a <setDateTime>
	printDateTime(hrtc, hspi);
 8001116:	683a      	ldr	r2, [r7, #0]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	0011      	movs	r1, r2
 800111c:	0018      	movs	r0, r3
 800111e:	f7ff ffa7 	bl	8001070 <printDateTime>
	HAL_Delay(1000);
 8001122:	23fa      	movs	r3, #250	; 0xfa
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	0018      	movs	r0, r3
 8001128:	f000 feb6 	bl	8001e98 <HAL_Delay>
	printDateTime(hrtc, hspi);
 800112c:	683a      	ldr	r2, [r7, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	0011      	movs	r1, r2
 8001132:	0018      	movs	r0, r3
 8001134:	f7ff ff9c 	bl	8001070 <printDateTime>
}
 8001138:	46c0      	nop			; (mov r8, r8)
 800113a:	46bd      	mov	sp, r7
 800113c:	b002      	add	sp, #8
 800113e:	bd80      	pop	{r7, pc}

08001140 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001146:	f000 fe47 	bl	8001dd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800114a:	f000 f837 	bl	80011bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800114e:	f000 fa8f 	bl	8001670 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001152:	f000 f9d1 	bl	80014f8 <MX_SPI1_Init>
  MX_ADC_Init();
 8001156:	f000 f8a7 	bl	80012a8 <MX_ADC_Init>
  MX_RTC_Init();
 800115a:	f000 f931 	bl	80013c0 <MX_RTC_Init>
  MX_TIM21_Init();
 800115e:	f000 fa03 	bl	8001568 <MX_TIM21_Init>
  MX_LPTIM1_Init();
 8001162:	f000 f905 	bl	8001370 <MX_LPTIM1_Init>
  /* USER CODE BEGIN 2 */
	uint16_t bg = ST77XX_BLACK;
 8001166:	1dbb      	adds	r3, r7, #6
 8001168:	2200      	movs	r2, #0
 800116a:	801a      	strh	r2, [r3, #0]
	HAL_Delay(2000);
 800116c:	23fa      	movs	r3, #250	; 0xfa
 800116e:	00db      	lsls	r3, r3, #3
 8001170:	0018      	movs	r0, r3
 8001172:	f000 fe91 	bl	8001e98 <HAL_Delay>
	TFT_startup(&hspi1);
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <main+0x70>)
 8001178:	0018      	movs	r0, r3
 800117a:	f7ff fa2f 	bl	80005dc <TFT_startup>
	fillScreen(bg, &hspi1);
 800117e:	4a0c      	ldr	r2, [pc, #48]	; (80011b0 <main+0x70>)
 8001180:	1dbb      	adds	r3, r7, #6
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	0011      	movs	r1, r2
 8001186:	0018      	movs	r0, r3
 8001188:	f7ff fc9a 	bl	8000ac0 <fillScreen>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // default
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 800118c:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <main+0x74>)
 800118e:	2102      	movs	r1, #2
 8001190:	0018      	movs	r0, r3
 8001192:	f001 fb8e 	bl	80028b2 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8001196:	23fa      	movs	r3, #250	; 0xfa
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	0018      	movs	r0, r3
 800119c:	f000 fe7c 	bl	8001e98 <HAL_Delay>

	  // clocks tests
	  // not a loopable test yet; just print time after test, i guess
	  clockTest(&hrtc, &hspi1);
 80011a0:	4a03      	ldr	r2, [pc, #12]	; (80011b0 <main+0x70>)
 80011a2:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <main+0x78>)
 80011a4:	0011      	movs	r1, r2
 80011a6:	0018      	movs	r0, r3
 80011a8:	f7ff ff77 	bl	800109a <clockTest>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 80011ac:	e7ee      	b.n	800118c <main+0x4c>
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	2000013c 	.word	0x2000013c
 80011b4:	50000400 	.word	0x50000400
 80011b8:	20000118 	.word	0x20000118

080011bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011bc:	b590      	push	{r4, r7, lr}
 80011be:	b09f      	sub	sp, #124	; 0x7c
 80011c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011c2:	2440      	movs	r4, #64	; 0x40
 80011c4:	193b      	adds	r3, r7, r4
 80011c6:	0018      	movs	r0, r3
 80011c8:	2338      	movs	r3, #56	; 0x38
 80011ca:	001a      	movs	r2, r3
 80011cc:	2100      	movs	r1, #0
 80011ce:	f003 ff6e 	bl	80050ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d2:	232c      	movs	r3, #44	; 0x2c
 80011d4:	18fb      	adds	r3, r7, r3
 80011d6:	0018      	movs	r0, r3
 80011d8:	2314      	movs	r3, #20
 80011da:	001a      	movs	r2, r3
 80011dc:	2100      	movs	r1, #0
 80011de:	f003 ff66 	bl	80050ae <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011e2:	1d3b      	adds	r3, r7, #4
 80011e4:	0018      	movs	r0, r3
 80011e6:	2328      	movs	r3, #40	; 0x28
 80011e8:	001a      	movs	r2, r3
 80011ea:	2100      	movs	r1, #0
 80011ec:	f003 ff5f 	bl	80050ae <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011f0:	4b2b      	ldr	r3, [pc, #172]	; (80012a0 <SystemClock_Config+0xe4>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a2b      	ldr	r2, [pc, #172]	; (80012a4 <SystemClock_Config+0xe8>)
 80011f6:	401a      	ands	r2, r3
 80011f8:	4b29      	ldr	r3, [pc, #164]	; (80012a0 <SystemClock_Config+0xe4>)
 80011fa:	2180      	movs	r1, #128	; 0x80
 80011fc:	0109      	lsls	r1, r1, #4
 80011fe:	430a      	orrs	r2, r1
 8001200:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSI48
 8001202:	0021      	movs	r1, r4
 8001204:	187b      	adds	r3, r7, r1
 8001206:	2238      	movs	r2, #56	; 0x38
 8001208:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800120a:	187b      	adds	r3, r7, r1
 800120c:	2201      	movs	r2, #1
 800120e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001210:	187b      	adds	r3, r7, r1
 8001212:	2201      	movs	r2, #1
 8001214:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001216:	187b      	adds	r3, r7, r1
 8001218:	2201      	movs	r2, #1
 800121a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800121c:	187b      	adds	r3, r7, r1
 800121e:	2200      	movs	r2, #0
 8001220:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8001222:	187b      	adds	r3, r7, r1
 8001224:	22a0      	movs	r2, #160	; 0xa0
 8001226:	0212      	lsls	r2, r2, #8
 8001228:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800122a:	187b      	adds	r3, r7, r1
 800122c:	2200      	movs	r2, #0
 800122e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001230:	187b      	adds	r3, r7, r1
 8001232:	0018      	movs	r0, r3
 8001234:	f001 fbec 	bl	8002a10 <HAL_RCC_OscConfig>
 8001238:	1e03      	subs	r3, r0, #0
 800123a:	d001      	beq.n	8001240 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800123c:	f000 fabe 	bl	80017bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001240:	212c      	movs	r1, #44	; 0x2c
 8001242:	187b      	adds	r3, r7, r1
 8001244:	220f      	movs	r2, #15
 8001246:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001248:	187b      	adds	r3, r7, r1
 800124a:	2200      	movs	r2, #0
 800124c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800124e:	187b      	adds	r3, r7, r1
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001254:	187b      	adds	r3, r7, r1
 8001256:	2200      	movs	r2, #0
 8001258:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800125a:	187b      	adds	r3, r7, r1
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001260:	187b      	adds	r3, r7, r1
 8001262:	2100      	movs	r1, #0
 8001264:	0018      	movs	r0, r3
 8001266:	f001 ffa3 	bl	80031b0 <HAL_RCC_ClockConfig>
 800126a:	1e03      	subs	r3, r0, #0
 800126c:	d001      	beq.n	8001272 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800126e:	f000 faa5 	bl	80017bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_LPTIM1;
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	22a0      	movs	r2, #160	; 0xa0
 8001276:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	2280      	movs	r2, #128	; 0x80
 800127c:	0292      	lsls	r2, r2, #10
 800127e:	605a      	str	r2, [r3, #4]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	2200      	movs	r2, #0
 8001284:	621a      	str	r2, [r3, #32]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001286:	1d3b      	adds	r3, r7, #4
 8001288:	0018      	movs	r0, r3
 800128a:	f002 f93f 	bl	800350c <HAL_RCCEx_PeriphCLKConfig>
 800128e:	1e03      	subs	r3, r0, #0
 8001290:	d001      	beq.n	8001296 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8001292:	f000 fa93 	bl	80017bc <Error_Handler>
  }
}
 8001296:	46c0      	nop			; (mov r8, r8)
 8001298:	46bd      	mov	sp, r7
 800129a:	b01f      	add	sp, #124	; 0x7c
 800129c:	bd90      	pop	{r4, r7, pc}
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	40007000 	.word	0x40007000
 80012a4:	ffffe7ff 	.word	0xffffe7ff

080012a8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012ae:	003b      	movs	r3, r7
 80012b0:	0018      	movs	r0, r3
 80012b2:	2308      	movs	r3, #8
 80012b4:	001a      	movs	r2, r3
 80012b6:	2100      	movs	r1, #0
 80012b8:	f003 fef9 	bl	80050ae <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 80012bc:	4b2a      	ldr	r3, [pc, #168]	; (8001368 <MX_ADC_Init+0xc0>)
 80012be:	4a2b      	ldr	r2, [pc, #172]	; (800136c <MX_ADC_Init+0xc4>)
 80012c0:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80012c2:	4b29      	ldr	r3, [pc, #164]	; (8001368 <MX_ADC_Init+0xc0>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80012c8:	4b27      	ldr	r3, [pc, #156]	; (8001368 <MX_ADC_Init+0xc0>)
 80012ca:	22c0      	movs	r2, #192	; 0xc0
 80012cc:	0612      	lsls	r2, r2, #24
 80012ce:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80012d0:	4b25      	ldr	r3, [pc, #148]	; (8001368 <MX_ADC_Init+0xc0>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80012d6:	4b24      	ldr	r3, [pc, #144]	; (8001368 <MX_ADC_Init+0xc0>)
 80012d8:	2200      	movs	r2, #0
 80012da:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80012dc:	4b22      	ldr	r3, [pc, #136]	; (8001368 <MX_ADC_Init+0xc0>)
 80012de:	2201      	movs	r2, #1
 80012e0:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012e2:	4b21      	ldr	r3, [pc, #132]	; (8001368 <MX_ADC_Init+0xc0>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80012e8:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <MX_ADC_Init+0xc0>)
 80012ea:	2220      	movs	r2, #32
 80012ec:	2100      	movs	r1, #0
 80012ee:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80012f0:	4b1d      	ldr	r3, [pc, #116]	; (8001368 <MX_ADC_Init+0xc0>)
 80012f2:	2221      	movs	r2, #33	; 0x21
 80012f4:	2100      	movs	r1, #0
 80012f6:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012f8:	4b1b      	ldr	r3, [pc, #108]	; (8001368 <MX_ADC_Init+0xc0>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012fe:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <MX_ADC_Init+0xc0>)
 8001300:	22c2      	movs	r2, #194	; 0xc2
 8001302:	32ff      	adds	r2, #255	; 0xff
 8001304:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001306:	4b18      	ldr	r3, [pc, #96]	; (8001368 <MX_ADC_Init+0xc0>)
 8001308:	222c      	movs	r2, #44	; 0x2c
 800130a:	2100      	movs	r1, #0
 800130c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800130e:	4b16      	ldr	r3, [pc, #88]	; (8001368 <MX_ADC_Init+0xc0>)
 8001310:	2204      	movs	r2, #4
 8001312:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001314:	4b14      	ldr	r3, [pc, #80]	; (8001368 <MX_ADC_Init+0xc0>)
 8001316:	2200      	movs	r2, #0
 8001318:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800131a:	4b13      	ldr	r3, [pc, #76]	; (8001368 <MX_ADC_Init+0xc0>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8001320:	4b11      	ldr	r3, [pc, #68]	; (8001368 <MX_ADC_Init+0xc0>)
 8001322:	2200      	movs	r2, #0
 8001324:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001326:	4b10      	ldr	r3, [pc, #64]	; (8001368 <MX_ADC_Init+0xc0>)
 8001328:	2200      	movs	r2, #0
 800132a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800132c:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <MX_ADC_Init+0xc0>)
 800132e:	0018      	movs	r0, r3
 8001330:	f000 fdd0 	bl	8001ed4 <HAL_ADC_Init>
 8001334:	1e03      	subs	r3, r0, #0
 8001336:	d001      	beq.n	800133c <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8001338:	f000 fa40 	bl	80017bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800133c:	003b      	movs	r3, r7
 800133e:	2201      	movs	r2, #1
 8001340:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001342:	003b      	movs	r3, r7
 8001344:	2280      	movs	r2, #128	; 0x80
 8001346:	0152      	lsls	r2, r2, #5
 8001348:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800134a:	003a      	movs	r2, r7
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <MX_ADC_Init+0xc0>)
 800134e:	0011      	movs	r1, r2
 8001350:	0018      	movs	r0, r3
 8001352:	f000 ff33 	bl	80021bc <HAL_ADC_ConfigChannel>
 8001356:	1e03      	subs	r3, r0, #0
 8001358:	d001      	beq.n	800135e <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800135a:	f000 fa2f 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	46bd      	mov	sp, r7
 8001362:	b002      	add	sp, #8
 8001364:	bd80      	pop	{r7, pc}
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	20000194 	.word	0x20000194
 800136c:	40012400 	.word	0x40012400

08001370 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001374:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <MX_LPTIM1_Init+0x44>)
 8001376:	4a10      	ldr	r2, [pc, #64]	; (80013b8 <MX_LPTIM1_Init+0x48>)
 8001378:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800137a:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <MX_LPTIM1_Init+0x44>)
 800137c:	2200      	movs	r2, #0
 800137e:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001380:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <MX_LPTIM1_Init+0x44>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001386:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <MX_LPTIM1_Init+0x44>)
 8001388:	4a0c      	ldr	r2, [pc, #48]	; (80013bc <MX_LPTIM1_Init+0x4c>)
 800138a:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800138c:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <MX_LPTIM1_Init+0x44>)
 800138e:	2200      	movs	r2, #0
 8001390:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001392:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <MX_LPTIM1_Init+0x44>)
 8001394:	2200      	movs	r2, #0
 8001396:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <MX_LPTIM1_Init+0x44>)
 800139a:	2200      	movs	r2, #0
 800139c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 800139e:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <MX_LPTIM1_Init+0x44>)
 80013a0:	0018      	movs	r0, r3
 80013a2:	f001 fab5 	bl	8002910 <HAL_LPTIM_Init>
 80013a6:	1e03      	subs	r3, r0, #0
 80013a8:	d001      	beq.n	80013ae <MX_LPTIM1_Init+0x3e>
  {
    Error_Handler();
 80013aa:	f000 fa07 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 80013ae:	46c0      	nop			; (mov r8, r8)
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	200000e8 	.word	0x200000e8
 80013b8:	40007c00 	.word	0x40007c00
 80013bc:	0000ffff 	.word	0x0000ffff

080013c0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b090      	sub	sp, #64	; 0x40
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80013c6:	232c      	movs	r3, #44	; 0x2c
 80013c8:	18fb      	adds	r3, r7, r3
 80013ca:	0018      	movs	r0, r3
 80013cc:	2314      	movs	r3, #20
 80013ce:	001a      	movs	r2, r3
 80013d0:	2100      	movs	r1, #0
 80013d2:	f003 fe6c 	bl	80050ae <memset>
  RTC_DateTypeDef sDate = {0};
 80013d6:	2328      	movs	r3, #40	; 0x28
 80013d8:	18fb      	adds	r3, r7, r3
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80013de:	003b      	movs	r3, r7
 80013e0:	0018      	movs	r0, r3
 80013e2:	2328      	movs	r3, #40	; 0x28
 80013e4:	001a      	movs	r2, r3
 80013e6:	2100      	movs	r1, #0
 80013e8:	f003 fe61 	bl	80050ae <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80013ec:	4b40      	ldr	r3, [pc, #256]	; (80014f0 <MX_RTC_Init+0x130>)
 80013ee:	4a41      	ldr	r2, [pc, #260]	; (80014f4 <MX_RTC_Init+0x134>)
 80013f0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80013f2:	4b3f      	ldr	r3, [pc, #252]	; (80014f0 <MX_RTC_Init+0x130>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80013f8:	4b3d      	ldr	r3, [pc, #244]	; (80014f0 <MX_RTC_Init+0x130>)
 80013fa:	227f      	movs	r2, #127	; 0x7f
 80013fc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80013fe:	4b3c      	ldr	r3, [pc, #240]	; (80014f0 <MX_RTC_Init+0x130>)
 8001400:	22ff      	movs	r2, #255	; 0xff
 8001402:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001404:	4b3a      	ldr	r3, [pc, #232]	; (80014f0 <MX_RTC_Init+0x130>)
 8001406:	2200      	movs	r2, #0
 8001408:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800140a:	4b39      	ldr	r3, [pc, #228]	; (80014f0 <MX_RTC_Init+0x130>)
 800140c:	2200      	movs	r2, #0
 800140e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001410:	4b37      	ldr	r3, [pc, #220]	; (80014f0 <MX_RTC_Init+0x130>)
 8001412:	2200      	movs	r2, #0
 8001414:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001416:	4b36      	ldr	r3, [pc, #216]	; (80014f0 <MX_RTC_Init+0x130>)
 8001418:	2200      	movs	r2, #0
 800141a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800141c:	4b34      	ldr	r3, [pc, #208]	; (80014f0 <MX_RTC_Init+0x130>)
 800141e:	0018      	movs	r0, r3
 8001420:	f002 f9e8 	bl	80037f4 <HAL_RTC_Init>
 8001424:	1e03      	subs	r3, r0, #0
 8001426:	d001      	beq.n	800142c <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8001428:	f000 f9c8 	bl	80017bc <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0;
 800142c:	212c      	movs	r1, #44	; 0x2c
 800142e:	187b      	adds	r3, r7, r1
 8001430:	2200      	movs	r2, #0
 8001432:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8001434:	187b      	adds	r3, r7, r1
 8001436:	2200      	movs	r2, #0
 8001438:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 800143a:	187b      	adds	r3, r7, r1
 800143c:	2200      	movs	r2, #0
 800143e:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001440:	187b      	adds	r3, r7, r1
 8001442:	2200      	movs	r2, #0
 8001444:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001446:	187b      	adds	r3, r7, r1
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800144c:	1879      	adds	r1, r7, r1
 800144e:	4b28      	ldr	r3, [pc, #160]	; (80014f0 <MX_RTC_Init+0x130>)
 8001450:	2200      	movs	r2, #0
 8001452:	0018      	movs	r0, r3
 8001454:	f002 fa6c 	bl	8003930 <HAL_RTC_SetTime>
 8001458:	1e03      	subs	r3, r0, #0
 800145a:	d001      	beq.n	8001460 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 800145c:	f000 f9ae 	bl	80017bc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001460:	2128      	movs	r1, #40	; 0x28
 8001462:	187b      	adds	r3, r7, r1
 8001464:	2201      	movs	r2, #1
 8001466:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001468:	187b      	adds	r3, r7, r1
 800146a:	2201      	movs	r2, #1
 800146c:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 800146e:	187b      	adds	r3, r7, r1
 8001470:	2201      	movs	r2, #1
 8001472:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 8001474:	187b      	adds	r3, r7, r1
 8001476:	2200      	movs	r2, #0
 8001478:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800147a:	1879      	adds	r1, r7, r1
 800147c:	4b1c      	ldr	r3, [pc, #112]	; (80014f0 <MX_RTC_Init+0x130>)
 800147e:	2200      	movs	r2, #0
 8001480:	0018      	movs	r0, r3
 8001482:	f002 fb75 	bl	8003b70 <HAL_RTC_SetDate>
 8001486:	1e03      	subs	r3, r0, #0
 8001488:	d001      	beq.n	800148e <MX_RTC_Init+0xce>
  {
    Error_Handler();
 800148a:	f000 f997 	bl	80017bc <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0;
 800148e:	003b      	movs	r3, r7
 8001490:	2200      	movs	r2, #0
 8001492:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8001494:	003b      	movs	r3, r7
 8001496:	2200      	movs	r2, #0
 8001498:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 800149a:	003b      	movs	r3, r7
 800149c:	2200      	movs	r2, #0
 800149e:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 80014a0:	003b      	movs	r3, r7
 80014a2:	2200      	movs	r2, #0
 80014a4:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80014a6:	003b      	movs	r3, r7
 80014a8:	2200      	movs	r2, #0
 80014aa:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80014ac:	003b      	movs	r3, r7
 80014ae:	2200      	movs	r2, #0
 80014b0:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80014b2:	003b      	movs	r3, r7
 80014b4:	2200      	movs	r2, #0
 80014b6:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80014b8:	003b      	movs	r3, r7
 80014ba:	2200      	movs	r2, #0
 80014bc:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80014be:	003b      	movs	r3, r7
 80014c0:	2200      	movs	r2, #0
 80014c2:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 80014c4:	003b      	movs	r3, r7
 80014c6:	2220      	movs	r2, #32
 80014c8:	2101      	movs	r1, #1
 80014ca:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80014cc:	003b      	movs	r3, r7
 80014ce:	2280      	movs	r2, #128	; 0x80
 80014d0:	0052      	lsls	r2, r2, #1
 80014d2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80014d4:	0039      	movs	r1, r7
 80014d6:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <MX_RTC_Init+0x130>)
 80014d8:	2200      	movs	r2, #0
 80014da:	0018      	movs	r0, r3
 80014dc:	f002 fc44 	bl	8003d68 <HAL_RTC_SetAlarm_IT>
 80014e0:	1e03      	subs	r3, r0, #0
 80014e2:	d001      	beq.n	80014e8 <MX_RTC_Init+0x128>
  {
    Error_Handler();
 80014e4:	f000 f96a 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80014e8:	46c0      	nop			; (mov r8, r8)
 80014ea:	46bd      	mov	sp, r7
 80014ec:	b010      	add	sp, #64	; 0x40
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000118 	.word	0x20000118
 80014f4:	40002800 	.word	0x40002800

080014f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014fc:	4b18      	ldr	r3, [pc, #96]	; (8001560 <MX_SPI1_Init+0x68>)
 80014fe:	4a19      	ldr	r2, [pc, #100]	; (8001564 <MX_SPI1_Init+0x6c>)
 8001500:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001502:	4b17      	ldr	r3, [pc, #92]	; (8001560 <MX_SPI1_Init+0x68>)
 8001504:	2282      	movs	r2, #130	; 0x82
 8001506:	0052      	lsls	r2, r2, #1
 8001508:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800150a:	4b15      	ldr	r3, [pc, #84]	; (8001560 <MX_SPI1_Init+0x68>)
 800150c:	2200      	movs	r2, #0
 800150e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001510:	4b13      	ldr	r3, [pc, #76]	; (8001560 <MX_SPI1_Init+0x68>)
 8001512:	2200      	movs	r2, #0
 8001514:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001516:	4b12      	ldr	r3, [pc, #72]	; (8001560 <MX_SPI1_Init+0x68>)
 8001518:	2200      	movs	r2, #0
 800151a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800151c:	4b10      	ldr	r3, [pc, #64]	; (8001560 <MX_SPI1_Init+0x68>)
 800151e:	2200      	movs	r2, #0
 8001520:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001522:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <MX_SPI1_Init+0x68>)
 8001524:	2280      	movs	r2, #128	; 0x80
 8001526:	0092      	lsls	r2, r2, #2
 8001528:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800152a:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <MX_SPI1_Init+0x68>)
 800152c:	2200      	movs	r2, #0
 800152e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001530:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <MX_SPI1_Init+0x68>)
 8001532:	2200      	movs	r2, #0
 8001534:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001536:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <MX_SPI1_Init+0x68>)
 8001538:	2200      	movs	r2, #0
 800153a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800153c:	4b08      	ldr	r3, [pc, #32]	; (8001560 <MX_SPI1_Init+0x68>)
 800153e:	2200      	movs	r2, #0
 8001540:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001542:	4b07      	ldr	r3, [pc, #28]	; (8001560 <MX_SPI1_Init+0x68>)
 8001544:	2207      	movs	r2, #7
 8001546:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <MX_SPI1_Init+0x68>)
 800154a:	0018      	movs	r0, r3
 800154c:	f002 fe4e 	bl	80041ec <HAL_SPI_Init>
 8001550:	1e03      	subs	r3, r0, #0
 8001552:	d001      	beq.n	8001558 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001554:	f000 f932 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001558:	46c0      	nop			; (mov r8, r8)
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	46c0      	nop			; (mov r8, r8)
 8001560:	2000013c 	.word	0x2000013c
 8001564:	40013000 	.word	0x40013000

08001568 <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b08a      	sub	sp, #40	; 0x28
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800156e:	2318      	movs	r3, #24
 8001570:	18fb      	adds	r3, r7, r3
 8001572:	0018      	movs	r0, r3
 8001574:	2310      	movs	r3, #16
 8001576:	001a      	movs	r2, r3
 8001578:	2100      	movs	r1, #0
 800157a:	f003 fd98 	bl	80050ae <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800157e:	2310      	movs	r3, #16
 8001580:	18fb      	adds	r3, r7, r3
 8001582:	0018      	movs	r0, r3
 8001584:	2308      	movs	r3, #8
 8001586:	001a      	movs	r2, r3
 8001588:	2100      	movs	r1, #0
 800158a:	f003 fd90 	bl	80050ae <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800158e:	003b      	movs	r3, r7
 8001590:	0018      	movs	r0, r3
 8001592:	2310      	movs	r3, #16
 8001594:	001a      	movs	r2, r3
 8001596:	2100      	movs	r1, #0
 8001598:	f003 fd89 	bl	80050ae <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 800159c:	4b32      	ldr	r3, [pc, #200]	; (8001668 <MX_TIM21_Init+0x100>)
 800159e:	4a33      	ldr	r2, [pc, #204]	; (800166c <MX_TIM21_Init+0x104>)
 80015a0:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 0;
 80015a2:	4b31      	ldr	r3, [pc, #196]	; (8001668 <MX_TIM21_Init+0x100>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a8:	4b2f      	ldr	r3, [pc, #188]	; (8001668 <MX_TIM21_Init+0x100>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 0;
 80015ae:	4b2e      	ldr	r3, [pc, #184]	; (8001668 <MX_TIM21_Init+0x100>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b4:	4b2c      	ldr	r3, [pc, #176]	; (8001668 <MX_TIM21_Init+0x100>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ba:	4b2b      	ldr	r3, [pc, #172]	; (8001668 <MX_TIM21_Init+0x100>)
 80015bc:	2200      	movs	r2, #0
 80015be:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 80015c0:	4b29      	ldr	r3, [pc, #164]	; (8001668 <MX_TIM21_Init+0x100>)
 80015c2:	0018      	movs	r0, r3
 80015c4:	f003 f993 	bl	80048ee <HAL_TIM_Base_Init>
 80015c8:	1e03      	subs	r3, r0, #0
 80015ca:	d001      	beq.n	80015d0 <MX_TIM21_Init+0x68>
  {
    Error_Handler();
 80015cc:	f000 f8f6 	bl	80017bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80015d0:	2118      	movs	r1, #24
 80015d2:	187b      	adds	r3, r7, r1
 80015d4:	2280      	movs	r2, #128	; 0x80
 80015d6:	0192      	lsls	r2, r2, #6
 80015d8:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80015da:	187b      	adds	r3, r7, r1
 80015dc:	2200      	movs	r2, #0
 80015de:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80015e0:	187b      	adds	r3, r7, r1
 80015e2:	2200      	movs	r2, #0
 80015e4:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 80015e6:	187b      	adds	r3, r7, r1
 80015e8:	2200      	movs	r2, #0
 80015ea:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 80015ec:	187a      	adds	r2, r7, r1
 80015ee:	4b1e      	ldr	r3, [pc, #120]	; (8001668 <MX_TIM21_Init+0x100>)
 80015f0:	0011      	movs	r1, r2
 80015f2:	0018      	movs	r0, r3
 80015f4:	f003 fa2a 	bl	8004a4c <HAL_TIM_ConfigClockSource>
 80015f8:	1e03      	subs	r3, r0, #0
 80015fa:	d001      	beq.n	8001600 <MX_TIM21_Init+0x98>
  {
    Error_Handler();
 80015fc:	f000 f8de 	bl	80017bc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim21) != HAL_OK)
 8001600:	4b19      	ldr	r3, [pc, #100]	; (8001668 <MX_TIM21_Init+0x100>)
 8001602:	0018      	movs	r0, r3
 8001604:	f003 f99f 	bl	8004946 <HAL_TIM_OC_Init>
 8001608:	1e03      	subs	r3, r0, #0
 800160a:	d001      	beq.n	8001610 <MX_TIM21_Init+0xa8>
  {
    Error_Handler();
 800160c:	f000 f8d6 	bl	80017bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001610:	2110      	movs	r1, #16
 8001612:	187b      	adds	r3, r7, r1
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001618:	187b      	adds	r3, r7, r1
 800161a:	2200      	movs	r2, #0
 800161c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 800161e:	187a      	adds	r2, r7, r1
 8001620:	4b11      	ldr	r3, [pc, #68]	; (8001668 <MX_TIM21_Init+0x100>)
 8001622:	0011      	movs	r1, r2
 8001624:	0018      	movs	r0, r3
 8001626:	f003 fccb 	bl	8004fc0 <HAL_TIMEx_MasterConfigSynchronization>
 800162a:	1e03      	subs	r3, r0, #0
 800162c:	d001      	beq.n	8001632 <MX_TIM21_Init+0xca>
  {
    Error_Handler();
 800162e:	f000 f8c5 	bl	80017bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001632:	003b      	movs	r3, r7
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001638:	003b      	movs	r3, r7
 800163a:	2200      	movs	r2, #0
 800163c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800163e:	003b      	movs	r3, r7
 8001640:	2200      	movs	r2, #0
 8001642:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001644:	003b      	movs	r3, r7
 8001646:	2200      	movs	r2, #0
 8001648:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800164a:	0039      	movs	r1, r7
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <MX_TIM21_Init+0x100>)
 800164e:	2200      	movs	r2, #0
 8001650:	0018      	movs	r0, r3
 8001652:	f003 f9ac 	bl	80049ae <HAL_TIM_OC_ConfigChannel>
 8001656:	1e03      	subs	r3, r0, #0
 8001658:	d001      	beq.n	800165e <MX_TIM21_Init+0xf6>
  {
    Error_Handler();
 800165a:	f000 f8af 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 800165e:	46c0      	nop			; (mov r8, r8)
 8001660:	46bd      	mov	sp, r7
 8001662:	b00a      	add	sp, #40	; 0x28
 8001664:	bd80      	pop	{r7, pc}
 8001666:	46c0      	nop			; (mov r8, r8)
 8001668:	20000204 	.word	0x20000204
 800166c:	40010800 	.word	0x40010800

08001670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001670:	b590      	push	{r4, r7, lr}
 8001672:	b089      	sub	sp, #36	; 0x24
 8001674:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001676:	240c      	movs	r4, #12
 8001678:	193b      	adds	r3, r7, r4
 800167a:	0018      	movs	r0, r3
 800167c:	2314      	movs	r3, #20
 800167e:	001a      	movs	r2, r3
 8001680:	2100      	movs	r1, #0
 8001682:	f003 fd14 	bl	80050ae <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001686:	4b47      	ldr	r3, [pc, #284]	; (80017a4 <MX_GPIO_Init+0x134>)
 8001688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800168a:	4b46      	ldr	r3, [pc, #280]	; (80017a4 <MX_GPIO_Init+0x134>)
 800168c:	2104      	movs	r1, #4
 800168e:	430a      	orrs	r2, r1
 8001690:	62da      	str	r2, [r3, #44]	; 0x2c
 8001692:	4b44      	ldr	r3, [pc, #272]	; (80017a4 <MX_GPIO_Init+0x134>)
 8001694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001696:	2204      	movs	r2, #4
 8001698:	4013      	ands	r3, r2
 800169a:	60bb      	str	r3, [r7, #8]
 800169c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800169e:	4b41      	ldr	r3, [pc, #260]	; (80017a4 <MX_GPIO_Init+0x134>)
 80016a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016a2:	4b40      	ldr	r3, [pc, #256]	; (80017a4 <MX_GPIO_Init+0x134>)
 80016a4:	2101      	movs	r1, #1
 80016a6:	430a      	orrs	r2, r1
 80016a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80016aa:	4b3e      	ldr	r3, [pc, #248]	; (80017a4 <MX_GPIO_Init+0x134>)
 80016ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ae:	2201      	movs	r2, #1
 80016b0:	4013      	ands	r3, r2
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b6:	4b3b      	ldr	r3, [pc, #236]	; (80017a4 <MX_GPIO_Init+0x134>)
 80016b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016ba:	4b3a      	ldr	r3, [pc, #232]	; (80017a4 <MX_GPIO_Init+0x134>)
 80016bc:	2102      	movs	r1, #2
 80016be:	430a      	orrs	r2, r1
 80016c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80016c2:	4b38      	ldr	r3, [pc, #224]	; (80017a4 <MX_GPIO_Init+0x134>)
 80016c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c6:	2202      	movs	r2, #2
 80016c8:	4013      	ands	r3, r2
 80016ca:	603b      	str	r3, [r7, #0]
 80016cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_6, GPIO_PIN_RESET);
 80016ce:	4b36      	ldr	r3, [pc, #216]	; (80017a8 <MX_GPIO_Init+0x138>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	2142      	movs	r1, #66	; 0x42
 80016d4:	0018      	movs	r0, r3
 80016d6:	f001 f8cf 	bl	8002878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80016da:	4b34      	ldr	r3, [pc, #208]	; (80017ac <MX_GPIO_Init+0x13c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	2180      	movs	r1, #128	; 0x80
 80016e0:	0018      	movs	r0, r3
 80016e2:	f001 f8c9 	bl	8002878 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB1 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 80016e6:	0021      	movs	r1, r4
 80016e8:	187b      	adds	r3, r7, r1
 80016ea:	2242      	movs	r2, #66	; 0x42
 80016ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ee:	187b      	adds	r3, r7, r1
 80016f0:	2201      	movs	r2, #1
 80016f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	187b      	adds	r3, r7, r1
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fa:	187b      	adds	r3, r7, r1
 80016fc:	2200      	movs	r2, #0
 80016fe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001700:	000c      	movs	r4, r1
 8001702:	187b      	adds	r3, r7, r1
 8001704:	4a28      	ldr	r2, [pc, #160]	; (80017a8 <MX_GPIO_Init+0x138>)
 8001706:	0019      	movs	r1, r3
 8001708:	0010      	movs	r0, r2
 800170a:	f000 ff37 	bl	800257c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_14;
 800170e:	0021      	movs	r1, r4
 8001710:	187b      	adds	r3, r7, r1
 8001712:	4a27      	ldr	r2, [pc, #156]	; (80017b0 <MX_GPIO_Init+0x140>)
 8001714:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001716:	187b      	adds	r3, r7, r1
 8001718:	4a26      	ldr	r2, [pc, #152]	; (80017b4 <MX_GPIO_Init+0x144>)
 800171a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800171c:	187b      	adds	r3, r7, r1
 800171e:	2202      	movs	r2, #2
 8001720:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001722:	000c      	movs	r4, r1
 8001724:	187b      	adds	r3, r7, r1
 8001726:	4a20      	ldr	r2, [pc, #128]	; (80017a8 <MX_GPIO_Init+0x138>)
 8001728:	0019      	movs	r1, r3
 800172a:	0010      	movs	r0, r2
 800172c:	f000 ff26 	bl	800257c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001730:	0021      	movs	r1, r4
 8001732:	187b      	adds	r3, r7, r1
 8001734:	2280      	movs	r2, #128	; 0x80
 8001736:	0212      	lsls	r2, r2, #8
 8001738:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800173a:	187b      	adds	r3, r7, r1
 800173c:	4a1e      	ldr	r2, [pc, #120]	; (80017b8 <MX_GPIO_Init+0x148>)
 800173e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001740:	187b      	adds	r3, r7, r1
 8001742:	2201      	movs	r2, #1
 8001744:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001746:	000c      	movs	r4, r1
 8001748:	187b      	adds	r3, r7, r1
 800174a:	4a17      	ldr	r2, [pc, #92]	; (80017a8 <MX_GPIO_Init+0x138>)
 800174c:	0019      	movs	r1, r3
 800174e:	0010      	movs	r0, r2
 8001750:	f000 ff14 	bl	800257c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001754:	0021      	movs	r1, r4
 8001756:	187b      	adds	r3, r7, r1
 8001758:	2280      	movs	r2, #128	; 0x80
 800175a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175c:	187b      	adds	r3, r7, r1
 800175e:	2201      	movs	r2, #1
 8001760:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	187b      	adds	r3, r7, r1
 8001764:	2200      	movs	r2, #0
 8001766:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001768:	187b      	adds	r3, r7, r1
 800176a:	2200      	movs	r2, #0
 800176c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800176e:	187b      	adds	r3, r7, r1
 8001770:	4a0e      	ldr	r2, [pc, #56]	; (80017ac <MX_GPIO_Init+0x13c>)
 8001772:	0019      	movs	r1, r3
 8001774:	0010      	movs	r0, r2
 8001776:	f000 ff01 	bl	800257c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 800177a:	2200      	movs	r2, #0
 800177c:	2100      	movs	r1, #0
 800177e:	2006      	movs	r0, #6
 8001780:	f000 fe82 	bl	8002488 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8001784:	2006      	movs	r0, #6
 8001786:	f000 fe94 	bl	80024b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800178a:	2200      	movs	r2, #0
 800178c:	2100      	movs	r1, #0
 800178e:	2007      	movs	r0, #7
 8001790:	f000 fe7a 	bl	8002488 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001794:	2007      	movs	r0, #7
 8001796:	f000 fe8c 	bl	80024b2 <HAL_NVIC_EnableIRQ>

}
 800179a:	46c0      	nop			; (mov r8, r8)
 800179c:	46bd      	mov	sp, r7
 800179e:	b009      	add	sp, #36	; 0x24
 80017a0:	bd90      	pop	{r4, r7, pc}
 80017a2:	46c0      	nop			; (mov r8, r8)
 80017a4:	40021000 	.word	0x40021000
 80017a8:	50000400 	.word	0x50000400
 80017ac:	50000800 	.word	0x50000800
 80017b0:	00006004 	.word	0x00006004
 80017b4:	10110000 	.word	0x10110000
 80017b8:	10210000 	.word	0x10210000

080017bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80017c0:	46c0      	nop			; (mov r8, r8)
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
	...

080017c8 <HAL_GPIO_EXTI_Callback>:
	}
}

// this sure is a big callback
// need to complete
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	0002      	movs	r2, r0
 80017d0:	1dbb      	adds	r3, r7, #6
 80017d2:	801a      	strh	r2, [r3, #0]
	/* program flow:
	 *   check current face used
	 *   check current variables and check button pressed
	 */
//	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);	// should run for any button
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 80017d4:	4b76      	ldr	r3, [pc, #472]	; (80019b0 <HAL_GPIO_EXTI_Callback+0x1e8>)
 80017d6:	2102      	movs	r1, #2
 80017d8:	0018      	movs	r0, r3
 80017da:	f001 f86a 	bl	80028b2 <HAL_GPIO_TogglePin>
	if (GPIO_Pin == BUTTON0) {
 80017de:	1dbb      	adds	r3, r7, #6
 80017e0:	881b      	ldrh	r3, [r3, #0]
 80017e2:	2b04      	cmp	r3, #4
 80017e4:	d110      	bne.n	8001808 <HAL_GPIO_EXTI_Callback+0x40>
		face = (face + 1) % NUM_FACES;
 80017e6:	4b73      	ldr	r3, [pc, #460]	; (80019b4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	3301      	adds	r3, #1
 80017ec:	4a72      	ldr	r2, [pc, #456]	; (80019b8 <HAL_GPIO_EXTI_Callback+0x1f0>)
 80017ee:	4013      	ands	r3, r2
 80017f0:	d504      	bpl.n	80017fc <HAL_GPIO_EXTI_Callback+0x34>
 80017f2:	3b01      	subs	r3, #1
 80017f4:	2204      	movs	r2, #4
 80017f6:	4252      	negs	r2, r2
 80017f8:	4313      	orrs	r3, r2
 80017fa:	3301      	adds	r3, #1
 80017fc:	001a      	movs	r2, r3
 80017fe:	4b6d      	ldr	r3, [pc, #436]	; (80019b4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001800:	601a      	str	r2, [r3, #0]
		faceChange = 1;
 8001802:	4b6e      	ldr	r3, [pc, #440]	; (80019bc <HAL_GPIO_EXTI_Callback+0x1f4>)
 8001804:	2201      	movs	r2, #1
 8001806:	601a      	str	r2, [r3, #0]
	}
	// use RTC
	if (face == faceMain) {
 8001808:	4b6a      	ldr	r3, [pc, #424]	; (80019b4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d11d      	bne.n	800184c <HAL_GPIO_EXTI_Callback+0x84>
			// change fields up, do nothing if not setting clock
		}
		if (GPIO_Pin == BUTTON2 && clockSet) {
			// change fields down, do nothing if not setting clock
		}
		if (GPIO_Pin == BUTTON3) {
 8001810:	1dbb      	adds	r3, r7, #6
 8001812:	881a      	ldrh	r2, [r3, #0]
 8001814:	2380      	movs	r3, #128	; 0x80
 8001816:	021b      	lsls	r3, r3, #8
 8001818:	429a      	cmp	r2, r3
 800181a:	d000      	beq.n	800181e <HAL_GPIO_EXTI_Callback+0x56>
 800181c:	e0c4      	b.n	80019a8 <HAL_GPIO_EXTI_Callback+0x1e0>
			clockField = (clockField + 1) % (NUM_CLOCKFIELDS + 1);
 800181e:	4b68      	ldr	r3, [pc, #416]	; (80019c0 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	3301      	adds	r3, #1
 8001824:	2106      	movs	r1, #6
 8001826:	0018      	movs	r0, r3
 8001828:	f7fe fdde 	bl	80003e8 <__aeabi_idivmod>
 800182c:	000b      	movs	r3, r1
 800182e:	001a      	movs	r2, r3
 8001830:	4b63      	ldr	r3, [pc, #396]	; (80019c0 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8001832:	601a      	str	r2, [r3, #0]
			if (clockField != 0) clockSet = 1;
 8001834:	4b62      	ldr	r3, [pc, #392]	; (80019c0 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d003      	beq.n	8001844 <HAL_GPIO_EXTI_Callback+0x7c>
 800183c:	4b61      	ldr	r3, [pc, #388]	; (80019c4 <HAL_GPIO_EXTI_Callback+0x1fc>)
 800183e:	2201      	movs	r2, #1
 8001840:	601a      	str	r2, [r3, #0]
		if (GPIO_Pin == BUTTON3) {
			// clear stopwatch hw
			stopwatchRunning = 0;
		}
	}
}
 8001842:	e0b1      	b.n	80019a8 <HAL_GPIO_EXTI_Callback+0x1e0>
			else clockSet = 0;
 8001844:	4b5f      	ldr	r3, [pc, #380]	; (80019c4 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
}
 800184a:	e0ad      	b.n	80019a8 <HAL_GPIO_EXTI_Callback+0x1e0>
	else if (face == faceTimer) {
 800184c:	4b59      	ldr	r3, [pc, #356]	; (80019b4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d155      	bne.n	8001900 <HAL_GPIO_EXTI_Callback+0x138>
		if (timerRunning == 0) {
 8001854:	4b5c      	ldr	r3, [pc, #368]	; (80019c8 <HAL_GPIO_EXTI_Callback+0x200>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d130      	bne.n	80018be <HAL_GPIO_EXTI_Callback+0xf6>
			if (GPIO_Pin == BUTTON1) {
 800185c:	1dbb      	adds	r3, r7, #6
 800185e:	881a      	ldrh	r2, [r3, #0]
 8001860:	2380      	movs	r3, #128	; 0x80
 8001862:	019b      	lsls	r3, r3, #6
 8001864:	429a      	cmp	r2, r3
 8001866:	d106      	bne.n	8001876 <HAL_GPIO_EXTI_Callback+0xae>
				if (timerSet == 0) timerRunning = 1;
 8001868:	4b58      	ldr	r3, [pc, #352]	; (80019cc <HAL_GPIO_EXTI_Callback+0x204>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d102      	bne.n	8001876 <HAL_GPIO_EXTI_Callback+0xae>
 8001870:	4b55      	ldr	r3, [pc, #340]	; (80019c8 <HAL_GPIO_EXTI_Callback+0x200>)
 8001872:	2201      	movs	r2, #1
 8001874:	601a      	str	r2, [r3, #0]
			if (GPIO_Pin == BUTTON3) {
 8001876:	1dbb      	adds	r3, r7, #6
 8001878:	881a      	ldrh	r2, [r3, #0]
 800187a:	2380      	movs	r3, #128	; 0x80
 800187c:	021b      	lsls	r3, r3, #8
 800187e:	429a      	cmp	r2, r3
 8001880:	d000      	beq.n	8001884 <HAL_GPIO_EXTI_Callback+0xbc>
 8001882:	e091      	b.n	80019a8 <HAL_GPIO_EXTI_Callback+0x1e0>
				timerField = (timerField + 1) % (NUM_TIMERFIELDS + 1);
 8001884:	4b52      	ldr	r3, [pc, #328]	; (80019d0 <HAL_GPIO_EXTI_Callback+0x208>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	3301      	adds	r3, #1
 800188a:	4a4b      	ldr	r2, [pc, #300]	; (80019b8 <HAL_GPIO_EXTI_Callback+0x1f0>)
 800188c:	4013      	ands	r3, r2
 800188e:	d504      	bpl.n	800189a <HAL_GPIO_EXTI_Callback+0xd2>
 8001890:	3b01      	subs	r3, #1
 8001892:	2204      	movs	r2, #4
 8001894:	4252      	negs	r2, r2
 8001896:	4313      	orrs	r3, r2
 8001898:	3301      	adds	r3, #1
 800189a:	001a      	movs	r2, r3
 800189c:	4b4c      	ldr	r3, [pc, #304]	; (80019d0 <HAL_GPIO_EXTI_Callback+0x208>)
 800189e:	601a      	str	r2, [r3, #0]
				if (timerField != 0) timerSet = 1;
 80018a0:	4b4b      	ldr	r3, [pc, #300]	; (80019d0 <HAL_GPIO_EXTI_Callback+0x208>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d003      	beq.n	80018b0 <HAL_GPIO_EXTI_Callback+0xe8>
 80018a8:	4b48      	ldr	r3, [pc, #288]	; (80019cc <HAL_GPIO_EXTI_Callback+0x204>)
 80018aa:	2201      	movs	r2, #1
 80018ac:	601a      	str	r2, [r3, #0]
}
 80018ae:	e07b      	b.n	80019a8 <HAL_GPIO_EXTI_Callback+0x1e0>
					timerSet = 0;
 80018b0:	4b46      	ldr	r3, [pc, #280]	; (80019cc <HAL_GPIO_EXTI_Callback+0x204>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
					timerRunning = 1;	// careful where this gets set/unset
 80018b6:	4b44      	ldr	r3, [pc, #272]	; (80019c8 <HAL_GPIO_EXTI_Callback+0x200>)
 80018b8:	2201      	movs	r2, #1
 80018ba:	601a      	str	r2, [r3, #0]
}
 80018bc:	e074      	b.n	80019a8 <HAL_GPIO_EXTI_Callback+0x1e0>
		else if (timerRunning == 1) {
 80018be:	4b42      	ldr	r3, [pc, #264]	; (80019c8 <HAL_GPIO_EXTI_Callback+0x200>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d000      	beq.n	80018c8 <HAL_GPIO_EXTI_Callback+0x100>
 80018c6:	e06f      	b.n	80019a8 <HAL_GPIO_EXTI_Callback+0x1e0>
			if (GPIO_Pin == BUTTON1) {
 80018c8:	1dbb      	adds	r3, r7, #6
 80018ca:	881a      	ldrh	r2, [r3, #0]
 80018cc:	2380      	movs	r3, #128	; 0x80
 80018ce:	019b      	lsls	r3, r3, #6
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d102      	bne.n	80018da <HAL_GPIO_EXTI_Callback+0x112>
				timerRunning = 1;
 80018d4:	4b3c      	ldr	r3, [pc, #240]	; (80019c8 <HAL_GPIO_EXTI_Callback+0x200>)
 80018d6:	2201      	movs	r2, #1
 80018d8:	601a      	str	r2, [r3, #0]
			if (GPIO_Pin == BUTTON2) {
 80018da:	1dbb      	adds	r3, r7, #6
 80018dc:	881a      	ldrh	r2, [r3, #0]
 80018de:	2380      	movs	r3, #128	; 0x80
 80018e0:	01db      	lsls	r3, r3, #7
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d102      	bne.n	80018ec <HAL_GPIO_EXTI_Callback+0x124>
				timerRunning = 0;
 80018e6:	4b38      	ldr	r3, [pc, #224]	; (80019c8 <HAL_GPIO_EXTI_Callback+0x200>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
			if (GPIO_Pin == BUTTON3) {
 80018ec:	1dbb      	adds	r3, r7, #6
 80018ee:	881a      	ldrh	r2, [r3, #0]
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	021b      	lsls	r3, r3, #8
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d157      	bne.n	80019a8 <HAL_GPIO_EXTI_Callback+0x1e0>
				timerRunning = 0;
 80018f8:	4b33      	ldr	r3, [pc, #204]	; (80019c8 <HAL_GPIO_EXTI_Callback+0x200>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
}
 80018fe:	e053      	b.n	80019a8 <HAL_GPIO_EXTI_Callback+0x1e0>
	else if (face == faceAlarm) {
 8001900:	4b2c      	ldr	r3, [pc, #176]	; (80019b4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b02      	cmp	r3, #2
 8001906:	d131      	bne.n	800196c <HAL_GPIO_EXTI_Callback+0x1a4>
		if (alarmRunning == 0) {
 8001908:	4b32      	ldr	r3, [pc, #200]	; (80019d4 <HAL_GPIO_EXTI_Callback+0x20c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d11f      	bne.n	8001950 <HAL_GPIO_EXTI_Callback+0x188>
			if (GPIO_Pin == BUTTON3) {
 8001910:	1dbb      	adds	r3, r7, #6
 8001912:	881a      	ldrh	r2, [r3, #0]
 8001914:	2380      	movs	r3, #128	; 0x80
 8001916:	021b      	lsls	r3, r3, #8
 8001918:	429a      	cmp	r2, r3
 800191a:	d145      	bne.n	80019a8 <HAL_GPIO_EXTI_Callback+0x1e0>
				alarmField = (alarmField + 1) % (NUM_ALARMFIELDS + 1);
 800191c:	4b2e      	ldr	r3, [pc, #184]	; (80019d8 <HAL_GPIO_EXTI_Callback+0x210>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	3301      	adds	r3, #1
 8001922:	2105      	movs	r1, #5
 8001924:	0018      	movs	r0, r3
 8001926:	f7fe fd5f 	bl	80003e8 <__aeabi_idivmod>
 800192a:	000b      	movs	r3, r1
 800192c:	001a      	movs	r2, r3
 800192e:	4b2a      	ldr	r3, [pc, #168]	; (80019d8 <HAL_GPIO_EXTI_Callback+0x210>)
 8001930:	601a      	str	r2, [r3, #0]
				if (alarmField != 0) {
 8001932:	4b29      	ldr	r3, [pc, #164]	; (80019d8 <HAL_GPIO_EXTI_Callback+0x210>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <HAL_GPIO_EXTI_Callback+0x17a>
					alarmSet = 1;
 800193a:	4b28      	ldr	r3, [pc, #160]	; (80019dc <HAL_GPIO_EXTI_Callback+0x214>)
 800193c:	2201      	movs	r2, #1
 800193e:	601a      	str	r2, [r3, #0]
}
 8001940:	e032      	b.n	80019a8 <HAL_GPIO_EXTI_Callback+0x1e0>
					alarmSet = 0;
 8001942:	4b26      	ldr	r3, [pc, #152]	; (80019dc <HAL_GPIO_EXTI_Callback+0x214>)
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
					alarmRunning = 1;
 8001948:	4b22      	ldr	r3, [pc, #136]	; (80019d4 <HAL_GPIO_EXTI_Callback+0x20c>)
 800194a:	2201      	movs	r2, #1
 800194c:	601a      	str	r2, [r3, #0]
}
 800194e:	e02b      	b.n	80019a8 <HAL_GPIO_EXTI_Callback+0x1e0>
		else if (alarmRunning == 1) {
 8001950:	4b20      	ldr	r3, [pc, #128]	; (80019d4 <HAL_GPIO_EXTI_Callback+0x20c>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d127      	bne.n	80019a8 <HAL_GPIO_EXTI_Callback+0x1e0>
			if (GPIO_Pin == BUTTON3) {
 8001958:	1dbb      	adds	r3, r7, #6
 800195a:	881a      	ldrh	r2, [r3, #0]
 800195c:	2380      	movs	r3, #128	; 0x80
 800195e:	021b      	lsls	r3, r3, #8
 8001960:	429a      	cmp	r2, r3
 8001962:	d121      	bne.n	80019a8 <HAL_GPIO_EXTI_Callback+0x1e0>
				alarmRunning = 0;
 8001964:	4b1b      	ldr	r3, [pc, #108]	; (80019d4 <HAL_GPIO_EXTI_Callback+0x20c>)
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
}
 800196a:	e01d      	b.n	80019a8 <HAL_GPIO_EXTI_Callback+0x1e0>
	else if (face == faceStopwatch) {
 800196c:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <HAL_GPIO_EXTI_Callback+0x1ec>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2b03      	cmp	r3, #3
 8001972:	d119      	bne.n	80019a8 <HAL_GPIO_EXTI_Callback+0x1e0>
		if (GPIO_Pin == BUTTON1) {	// start/stop
 8001974:	1dbb      	adds	r3, r7, #6
 8001976:	881a      	ldrh	r2, [r3, #0]
 8001978:	2380      	movs	r3, #128	; 0x80
 800197a:	019b      	lsls	r3, r3, #6
 800197c:	429a      	cmp	r2, r3
 800197e:	d10a      	bne.n	8001996 <HAL_GPIO_EXTI_Callback+0x1ce>
			if (stopwatchRunning == 0) stopwatchRunning = 1;
 8001980:	4b17      	ldr	r3, [pc, #92]	; (80019e0 <HAL_GPIO_EXTI_Callback+0x218>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d103      	bne.n	8001990 <HAL_GPIO_EXTI_Callback+0x1c8>
 8001988:	4b15      	ldr	r3, [pc, #84]	; (80019e0 <HAL_GPIO_EXTI_Callback+0x218>)
 800198a:	2201      	movs	r2, #1
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	e002      	b.n	8001996 <HAL_GPIO_EXTI_Callback+0x1ce>
			else stopwatchRunning = 0;
 8001990:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <HAL_GPIO_EXTI_Callback+0x218>)
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
		if (GPIO_Pin == BUTTON3) {
 8001996:	1dbb      	adds	r3, r7, #6
 8001998:	881a      	ldrh	r2, [r3, #0]
 800199a:	2380      	movs	r3, #128	; 0x80
 800199c:	021b      	lsls	r3, r3, #8
 800199e:	429a      	cmp	r2, r3
 80019a0:	d102      	bne.n	80019a8 <HAL_GPIO_EXTI_Callback+0x1e0>
			stopwatchRunning = 0;
 80019a2:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <HAL_GPIO_EXTI_Callback+0x218>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
}
 80019a8:	46c0      	nop			; (mov r8, r8)
 80019aa:	46bd      	mov	sp, r7
 80019ac:	b002      	add	sp, #8
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	50000400 	.word	0x50000400
 80019b4:	20000084 	.word	0x20000084
 80019b8:	80000003 	.word	0x80000003
 80019bc:	20000088 	.word	0x20000088
 80019c0:	20000090 	.word	0x20000090
 80019c4:	2000008c 	.word	0x2000008c
 80019c8:	2000009c 	.word	0x2000009c
 80019cc:	20000094 	.word	0x20000094
 80019d0:	20000098 	.word	0x20000098
 80019d4:	200000a8 	.word	0x200000a8
 80019d8:	200000a4 	.word	0x200000a4
 80019dc:	200000a0 	.word	0x200000a0
 80019e0:	200000ac 	.word	0x200000ac

080019e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019e8:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <HAL_MspInit+0x24>)
 80019ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019ec:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <HAL_MspInit+0x24>)
 80019ee:	2101      	movs	r1, #1
 80019f0:	430a      	orrs	r2, r1
 80019f2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f4:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <HAL_MspInit+0x24>)
 80019f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019f8:	4b03      	ldr	r3, [pc, #12]	; (8001a08 <HAL_MspInit+0x24>)
 80019fa:	2180      	movs	r1, #128	; 0x80
 80019fc:	0549      	lsls	r1, r1, #21
 80019fe:	430a      	orrs	r2, r1
 8001a00:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a02:	46c0      	nop			; (mov r8, r8)
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40021000 	.word	0x40021000

08001a0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b088      	sub	sp, #32
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a14:	230c      	movs	r3, #12
 8001a16:	18fb      	adds	r3, r7, r3
 8001a18:	0018      	movs	r0, r3
 8001a1a:	2314      	movs	r3, #20
 8001a1c:	001a      	movs	r2, r3
 8001a1e:	2100      	movs	r1, #0
 8001a20:	f003 fb45 	bl	80050ae <memset>
  if(hadc->Instance==ADC1)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a15      	ldr	r2, [pc, #84]	; (8001a80 <HAL_ADC_MspInit+0x74>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d123      	bne.n	8001a76 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a2e:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <HAL_ADC_MspInit+0x78>)
 8001a30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a32:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <HAL_ADC_MspInit+0x78>)
 8001a34:	2180      	movs	r1, #128	; 0x80
 8001a36:	0089      	lsls	r1, r1, #2
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3c:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <HAL_ADC_MspInit+0x78>)
 8001a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a40:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <HAL_ADC_MspInit+0x78>)
 8001a42:	2101      	movs	r1, #1
 8001a44:	430a      	orrs	r2, r1
 8001a46:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a48:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <HAL_ADC_MspInit+0x78>)
 8001a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	4013      	ands	r3, r2
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration    
    PA0     ------> ADC_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a54:	210c      	movs	r1, #12
 8001a56:	187b      	adds	r3, r7, r1
 8001a58:	2201      	movs	r2, #1
 8001a5a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a5c:	187b      	adds	r3, r7, r1
 8001a5e:	2203      	movs	r2, #3
 8001a60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	187b      	adds	r3, r7, r1
 8001a64:	2200      	movs	r2, #0
 8001a66:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a68:	187a      	adds	r2, r7, r1
 8001a6a:	23a0      	movs	r3, #160	; 0xa0
 8001a6c:	05db      	lsls	r3, r3, #23
 8001a6e:	0011      	movs	r1, r2
 8001a70:	0018      	movs	r0, r3
 8001a72:	f000 fd83 	bl	800257c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a76:	46c0      	nop			; (mov r8, r8)
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	b008      	add	sp, #32
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	46c0      	nop			; (mov r8, r8)
 8001a80:	40012400 	.word	0x40012400
 8001a84:	40021000 	.word	0x40021000

08001a88 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  if(hlptim->Instance==LPTIM1)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a06      	ldr	r2, [pc, #24]	; (8001ab0 <HAL_LPTIM_MspInit+0x28>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d106      	bne.n	8001aa8 <HAL_LPTIM_MspInit+0x20>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8001a9a:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <HAL_LPTIM_MspInit+0x2c>)
 8001a9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a9e:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <HAL_LPTIM_MspInit+0x2c>)
 8001aa0:	2180      	movs	r1, #128	; 0x80
 8001aa2:	0609      	lsls	r1, r1, #24
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8001aa8:	46c0      	nop			; (mov r8, r8)
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	b002      	add	sp, #8
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40007c00 	.word	0x40007c00
 8001ab4:	40021000 	.word	0x40021000

08001ab8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a0a      	ldr	r2, [pc, #40]	; (8001af0 <HAL_RTC_MspInit+0x38>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d10e      	bne.n	8001ae8 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001aca:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <HAL_RTC_MspInit+0x3c>)
 8001acc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ace:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <HAL_RTC_MspInit+0x3c>)
 8001ad0:	2180      	movs	r1, #128	; 0x80
 8001ad2:	02c9      	lsls	r1, r1, #11
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	2100      	movs	r1, #0
 8001adc:	2002      	movs	r0, #2
 8001ade:	f000 fcd3 	bl	8002488 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8001ae2:	2002      	movs	r0, #2
 8001ae4:	f000 fce5 	bl	80024b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001ae8:	46c0      	nop			; (mov r8, r8)
 8001aea:	46bd      	mov	sp, r7
 8001aec:	b002      	add	sp, #8
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40002800 	.word	0x40002800
 8001af4:	40021000 	.word	0x40021000

08001af8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b088      	sub	sp, #32
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b00:	230c      	movs	r3, #12
 8001b02:	18fb      	adds	r3, r7, r3
 8001b04:	0018      	movs	r0, r3
 8001b06:	2314      	movs	r3, #20
 8001b08:	001a      	movs	r2, r3
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	f003 facf 	bl	80050ae <memset>
  if(hspi->Instance==SPI1)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a1c      	ldr	r2, [pc, #112]	; (8001b88 <HAL_SPI_MspInit+0x90>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d131      	bne.n	8001b7e <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b1a:	4b1c      	ldr	r3, [pc, #112]	; (8001b8c <HAL_SPI_MspInit+0x94>)
 8001b1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b1e:	4b1b      	ldr	r3, [pc, #108]	; (8001b8c <HAL_SPI_MspInit+0x94>)
 8001b20:	2180      	movs	r1, #128	; 0x80
 8001b22:	0149      	lsls	r1, r1, #5
 8001b24:	430a      	orrs	r2, r1
 8001b26:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b28:	4b18      	ldr	r3, [pc, #96]	; (8001b8c <HAL_SPI_MspInit+0x94>)
 8001b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b2c:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <HAL_SPI_MspInit+0x94>)
 8001b2e:	2101      	movs	r1, #1
 8001b30:	430a      	orrs	r2, r1
 8001b32:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b34:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <HAL_SPI_MspInit+0x94>)
 8001b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b38:	2201      	movs	r2, #1
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	60bb      	str	r3, [r7, #8]
 8001b3e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001b40:	210c      	movs	r1, #12
 8001b42:	187b      	adds	r3, r7, r1
 8001b44:	22a0      	movs	r2, #160	; 0xa0
 8001b46:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b48:	187b      	adds	r3, r7, r1
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	187b      	adds	r3, r7, r1
 8001b50:	2200      	movs	r2, #0
 8001b52:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b54:	187b      	adds	r3, r7, r1
 8001b56:	2203      	movs	r2, #3
 8001b58:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001b5a:	187b      	adds	r3, r7, r1
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b60:	187a      	adds	r2, r7, r1
 8001b62:	23a0      	movs	r3, #160	; 0xa0
 8001b64:	05db      	lsls	r3, r3, #23
 8001b66:	0011      	movs	r1, r2
 8001b68:	0018      	movs	r0, r3
 8001b6a:	f000 fd07 	bl	800257c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2100      	movs	r1, #0
 8001b72:	2019      	movs	r0, #25
 8001b74:	f000 fc88 	bl	8002488 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001b78:	2019      	movs	r0, #25
 8001b7a:	f000 fc9a 	bl	80024b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b7e:	46c0      	nop			; (mov r8, r8)
 8001b80:	46bd      	mov	sp, r7
 8001b82:	b008      	add	sp, #32
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	46c0      	nop			; (mov r8, r8)
 8001b88:	40013000 	.word	0x40013000
 8001b8c:	40021000 	.word	0x40021000

08001b90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b088      	sub	sp, #32
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b98:	230c      	movs	r3, #12
 8001b9a:	18fb      	adds	r3, r7, r3
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	2314      	movs	r3, #20
 8001ba0:	001a      	movs	r2, r3
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	f003 fa83 	bl	80050ae <memset>
  if(htim_base->Instance==TIM21)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a17      	ldr	r2, [pc, #92]	; (8001c0c <HAL_TIM_Base_MspInit+0x7c>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d128      	bne.n	8001c04 <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 8001bb2:	4b17      	ldr	r3, [pc, #92]	; (8001c10 <HAL_TIM_Base_MspInit+0x80>)
 8001bb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bb6:	4b16      	ldr	r3, [pc, #88]	; (8001c10 <HAL_TIM_Base_MspInit+0x80>)
 8001bb8:	2104      	movs	r1, #4
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bbe:	4b14      	ldr	r3, [pc, #80]	; (8001c10 <HAL_TIM_Base_MspInit+0x80>)
 8001bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bc2:	4b13      	ldr	r3, [pc, #76]	; (8001c10 <HAL_TIM_Base_MspInit+0x80>)
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	62da      	str	r2, [r3, #44]	; 0x2c
 8001bca:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <HAL_TIM_Base_MspInit+0x80>)
 8001bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bce:	2201      	movs	r2, #1
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	60bb      	str	r3, [r7, #8]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
    /**TIM21 GPIO Configuration    
    PA1     ------> TIM21_ETR 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001bd6:	210c      	movs	r1, #12
 8001bd8:	187b      	adds	r3, r7, r1
 8001bda:	2202      	movs	r2, #2
 8001bdc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bde:	187b      	adds	r3, r7, r1
 8001be0:	2202      	movs	r2, #2
 8001be2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be4:	187b      	adds	r3, r7, r1
 8001be6:	2200      	movs	r2, #0
 8001be8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bea:	187b      	adds	r3, r7, r1
 8001bec:	2200      	movs	r2, #0
 8001bee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM21;
 8001bf0:	187b      	adds	r3, r7, r1
 8001bf2:	2205      	movs	r2, #5
 8001bf4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf6:	187a      	adds	r2, r7, r1
 8001bf8:	23a0      	movs	r3, #160	; 0xa0
 8001bfa:	05db      	lsls	r3, r3, #23
 8001bfc:	0011      	movs	r1, r2
 8001bfe:	0018      	movs	r0, r3
 8001c00:	f000 fcbc 	bl	800257c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }

}
 8001c04:	46c0      	nop			; (mov r8, r8)
 8001c06:	46bd      	mov	sp, r7
 8001c08:	b008      	add	sp, #32
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40010800 	.word	0x40010800
 8001c10:	40021000 	.word	0x40021000

08001c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c18:	46c0      	nop			; (mov r8, r8)
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c22:	e7fe      	b.n	8001c22 <HardFault_Handler+0x4>

08001c24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001c28:	46c0      	nop			; (mov r8, r8)
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c32:	46c0      	nop			; (mov r8, r8)
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c3c:	f000 f916 	bl	8001e6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c40:	46c0      	nop			; (mov r8, r8)
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
	...

08001c48 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001c4c:	4b03      	ldr	r3, [pc, #12]	; (8001c5c <RTC_IRQHandler+0x14>)
 8001c4e:	0018      	movs	r0, r3
 8001c50:	f002 f9d6 	bl	8004000 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8001c54:	46c0      	nop			; (mov r8, r8)
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	46c0      	nop			; (mov r8, r8)
 8001c5c:	20000118 	.word	0x20000118

08001c60 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001c64:	2004      	movs	r0, #4
 8001c66:	f000 fe37 	bl	80028d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8001c6a:	46c0      	nop			; (mov r8, r8)
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001c74:	2380      	movs	r3, #128	; 0x80
 8001c76:	019b      	lsls	r3, r3, #6
 8001c78:	0018      	movs	r0, r3
 8001c7a:	f000 fe2d 	bl	80028d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001c7e:	2380      	movs	r3, #128	; 0x80
 8001c80:	01db      	lsls	r3, r3, #7
 8001c82:	0018      	movs	r0, r3
 8001c84:	f000 fe28 	bl	80028d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001c88:	2380      	movs	r3, #128	; 0x80
 8001c8a:	021b      	lsls	r3, r3, #8
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	f000 fe23 	bl	80028d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001c92:	46c0      	nop			; (mov r8, r8)
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001c9c:	4b03      	ldr	r3, [pc, #12]	; (8001cac <SPI1_IRQHandler+0x14>)
 8001c9e:	0018      	movs	r0, r3
 8001ca0:	f002 fc5c 	bl	800455c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001ca4:	46c0      	nop			; (mov r8, r8)
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	46c0      	nop			; (mov r8, r8)
 8001cac:	2000013c 	.word	0x2000013c

08001cb0 <_sbrk>:
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	4b11      	ldr	r3, [pc, #68]	; (8001d00 <_sbrk+0x50>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d102      	bne.n	8001cc6 <_sbrk+0x16>
 8001cc0:	4b0f      	ldr	r3, [pc, #60]	; (8001d00 <_sbrk+0x50>)
 8001cc2:	4a10      	ldr	r2, [pc, #64]	; (8001d04 <_sbrk+0x54>)
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	4b0e      	ldr	r3, [pc, #56]	; (8001d00 <_sbrk+0x50>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <_sbrk+0x50>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	18d3      	adds	r3, r2, r3
 8001cd4:	466a      	mov	r2, sp
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d907      	bls.n	8001cea <_sbrk+0x3a>
 8001cda:	f003 f9b5 	bl	8005048 <__errno>
 8001cde:	0003      	movs	r3, r0
 8001ce0:	220c      	movs	r2, #12
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	425b      	negs	r3, r3
 8001ce8:	e006      	b.n	8001cf8 <_sbrk+0x48>
 8001cea:	4b05      	ldr	r3, [pc, #20]	; (8001d00 <_sbrk+0x50>)
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	18d2      	adds	r2, r2, r3
 8001cf2:	4b03      	ldr	r3, [pc, #12]	; (8001d00 <_sbrk+0x50>)
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	0018      	movs	r0, r3
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	b004      	add	sp, #16
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	200000b0 	.word	0x200000b0
 8001d04:	20000248 	.word	0x20000248

08001d08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8001d0c:	4b17      	ldr	r3, [pc, #92]	; (8001d6c <SystemInit+0x64>)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	4b16      	ldr	r3, [pc, #88]	; (8001d6c <SystemInit+0x64>)
 8001d12:	2180      	movs	r1, #128	; 0x80
 8001d14:	0049      	lsls	r1, r1, #1
 8001d16:	430a      	orrs	r2, r1
 8001d18:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8001d1a:	4b14      	ldr	r3, [pc, #80]	; (8001d6c <SystemInit+0x64>)
 8001d1c:	68da      	ldr	r2, [r3, #12]
 8001d1e:	4b13      	ldr	r3, [pc, #76]	; (8001d6c <SystemInit+0x64>)
 8001d20:	4913      	ldr	r1, [pc, #76]	; (8001d70 <SystemInit+0x68>)
 8001d22:	400a      	ands	r2, r1
 8001d24:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8001d26:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <SystemInit+0x64>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <SystemInit+0x64>)
 8001d2c:	4911      	ldr	r1, [pc, #68]	; (8001d74 <SystemInit+0x6c>)
 8001d2e:	400a      	ands	r2, r1
 8001d30:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001d32:	4b0e      	ldr	r3, [pc, #56]	; (8001d6c <SystemInit+0x64>)
 8001d34:	689a      	ldr	r2, [r3, #8]
 8001d36:	4b0d      	ldr	r3, [pc, #52]	; (8001d6c <SystemInit+0x64>)
 8001d38:	2101      	movs	r1, #1
 8001d3a:	438a      	bics	r2, r1
 8001d3c:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8001d3e:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <SystemInit+0x64>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	4b0a      	ldr	r3, [pc, #40]	; (8001d6c <SystemInit+0x64>)
 8001d44:	490c      	ldr	r1, [pc, #48]	; (8001d78 <SystemInit+0x70>)
 8001d46:	400a      	ands	r2, r1
 8001d48:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8001d4a:	4b08      	ldr	r3, [pc, #32]	; (8001d6c <SystemInit+0x64>)
 8001d4c:	68da      	ldr	r2, [r3, #12]
 8001d4e:	4b07      	ldr	r3, [pc, #28]	; (8001d6c <SystemInit+0x64>)
 8001d50:	490a      	ldr	r1, [pc, #40]	; (8001d7c <SystemInit+0x74>)
 8001d52:	400a      	ands	r2, r1
 8001d54:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001d56:	4b05      	ldr	r3, [pc, #20]	; (8001d6c <SystemInit+0x64>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d5c:	4b08      	ldr	r3, [pc, #32]	; (8001d80 <SystemInit+0x78>)
 8001d5e:	2280      	movs	r2, #128	; 0x80
 8001d60:	0512      	lsls	r2, r2, #20
 8001d62:	609a      	str	r2, [r3, #8]
#endif
}
 8001d64:	46c0      	nop			; (mov r8, r8)
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	46c0      	nop			; (mov r8, r8)
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	88ff400c 	.word	0x88ff400c
 8001d74:	fef6fff6 	.word	0xfef6fff6
 8001d78:	fffbffff 	.word	0xfffbffff
 8001d7c:	ff02ffff 	.word	0xff02ffff
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <Reset_Handler>:
 8001d84:	480d      	ldr	r0, [pc, #52]	; (8001dbc <LoopForever+0x2>)
 8001d86:	4685      	mov	sp, r0
 8001d88:	2100      	movs	r1, #0
 8001d8a:	e003      	b.n	8001d94 <LoopCopyDataInit>

08001d8c <CopyDataInit>:
 8001d8c:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <LoopForever+0x6>)
 8001d8e:	585b      	ldr	r3, [r3, r1]
 8001d90:	5043      	str	r3, [r0, r1]
 8001d92:	3104      	adds	r1, #4

08001d94 <LoopCopyDataInit>:
 8001d94:	480b      	ldr	r0, [pc, #44]	; (8001dc4 <LoopForever+0xa>)
 8001d96:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <LoopForever+0xe>)
 8001d98:	1842      	adds	r2, r0, r1
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d3f6      	bcc.n	8001d8c <CopyDataInit>
 8001d9e:	4a0b      	ldr	r2, [pc, #44]	; (8001dcc <LoopForever+0x12>)
 8001da0:	e002      	b.n	8001da8 <LoopFillZerobss>

08001da2 <FillZerobss>:
 8001da2:	2300      	movs	r3, #0
 8001da4:	6013      	str	r3, [r2, #0]
 8001da6:	3204      	adds	r2, #4

08001da8 <LoopFillZerobss>:
 8001da8:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <LoopForever+0x16>)
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d3f9      	bcc.n	8001da2 <FillZerobss>
 8001dae:	f7ff ffab 	bl	8001d08 <SystemInit>
 8001db2:	f003 f94f 	bl	8005054 <__libc_init_array>
 8001db6:	f7ff f9c3 	bl	8001140 <main>

08001dba <LoopForever>:
 8001dba:	e7fe      	b.n	8001dba <LoopForever>
 8001dbc:	20005000 	.word	0x20005000
 8001dc0:	08005ee0 	.word	0x08005ee0
 8001dc4:	20000000 	.word	0x20000000
 8001dc8:	20000068 	.word	0x20000068
 8001dcc:	20000068 	.word	0x20000068
 8001dd0:	20000248 	.word	0x20000248

08001dd4 <ADC1_COMP_IRQHandler>:
 8001dd4:	e7fe      	b.n	8001dd4 <ADC1_COMP_IRQHandler>
	...

08001dd8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001dde:	1dfb      	adds	r3, r7, #7
 8001de0:	2200      	movs	r2, #0
 8001de2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001de4:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <HAL_Init+0x3c>)
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	4b0a      	ldr	r3, [pc, #40]	; (8001e14 <HAL_Init+0x3c>)
 8001dea:	2140      	movs	r1, #64	; 0x40
 8001dec:	430a      	orrs	r2, r1
 8001dee:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001df0:	2000      	movs	r0, #0
 8001df2:	f000 f811 	bl	8001e18 <HAL_InitTick>
 8001df6:	1e03      	subs	r3, r0, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001dfa:	1dfb      	adds	r3, r7, #7
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	701a      	strb	r2, [r3, #0]
 8001e00:	e001      	b.n	8001e06 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e02:	f7ff fdef 	bl	80019e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e06:	1dfb      	adds	r3, r7, #7
 8001e08:	781b      	ldrb	r3, [r3, #0]
}
 8001e0a:	0018      	movs	r0, r3
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	b002      	add	sp, #8
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	46c0      	nop			; (mov r8, r8)
 8001e14:	40022000 	.word	0x40022000

08001e18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e20:	230f      	movs	r3, #15
 8001e22:	18fb      	adds	r3, r7, r3
 8001e24:	2200      	movs	r2, #0
 8001e26:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8001e28:	4b0f      	ldr	r3, [pc, #60]	; (8001e68 <HAL_InitTick+0x50>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	23fa      	movs	r3, #250	; 0xfa
 8001e2e:	0099      	lsls	r1, r3, #2
 8001e30:	0010      	movs	r0, r2
 8001e32:	f7fe f969 	bl	8000108 <__udivsi3>
 8001e36:	0003      	movs	r3, r0
 8001e38:	0018      	movs	r0, r3
 8001e3a:	f000 fb4a 	bl	80024d2 <HAL_SYSTICK_Config>
 8001e3e:	1e03      	subs	r3, r0, #0
 8001e40:	d004      	beq.n	8001e4c <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 8001e42:	230f      	movs	r3, #15
 8001e44:	18fb      	adds	r3, r7, r3
 8001e46:	2201      	movs	r2, #1
 8001e48:	701a      	strb	r2, [r3, #0]
 8001e4a:	e006      	b.n	8001e5a <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8001e4c:	6879      	ldr	r1, [r7, #4]
 8001e4e:	2301      	movs	r3, #1
 8001e50:	425b      	negs	r3, r3
 8001e52:	2200      	movs	r2, #0
 8001e54:	0018      	movs	r0, r3
 8001e56:	f000 fb17 	bl	8002488 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 8001e5a:	230f      	movs	r3, #15
 8001e5c:	18fb      	adds	r3, r7, r3
 8001e5e:	781b      	ldrb	r3, [r3, #0]
}
 8001e60:	0018      	movs	r0, r3
 8001e62:	46bd      	mov	sp, r7
 8001e64:	b004      	add	sp, #16
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	20000000 	.word	0x20000000

08001e6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  uwTick++;
 8001e70:	4b03      	ldr	r3, [pc, #12]	; (8001e80 <HAL_IncTick+0x14>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	1c5a      	adds	r2, r3, #1
 8001e76:	4b02      	ldr	r3, [pc, #8]	; (8001e80 <HAL_IncTick+0x14>)
 8001e78:	601a      	str	r2, [r3, #0]
}
 8001e7a:	46c0      	nop			; (mov r8, r8)
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	20000240 	.word	0x20000240

08001e84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  return uwTick;
 8001e88:	4b02      	ldr	r3, [pc, #8]	; (8001e94 <HAL_GetTick+0x10>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
}
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	46c0      	nop			; (mov r8, r8)
 8001e94:	20000240 	.word	0x20000240

08001e98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ea0:	f7ff fff0 	bl	8001e84 <HAL_GetTick>
 8001ea4:	0003      	movs	r3, r0
 8001ea6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	d002      	beq.n	8001eb8 <HAL_Delay+0x20>
  {
    wait++;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001eb8:	46c0      	nop			; (mov r8, r8)
 8001eba:	f7ff ffe3 	bl	8001e84 <HAL_GetTick>
 8001ebe:	0002      	movs	r2, r0
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d8f7      	bhi.n	8001eba <HAL_Delay+0x22>
  {
  }
}
 8001eca:	46c0      	nop			; (mov r8, r8)
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	b004      	add	sp, #16
 8001ed0:	bd80      	pop	{r7, pc}
	...

08001ed4 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e159      	b.n	800219a <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d10a      	bne.n	8001f04 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2250      	movs	r2, #80	; 0x50
 8001ef8:	2100      	movs	r1, #0
 8001efa:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	0018      	movs	r0, r3
 8001f00:	f7ff fd84 	bl	8001a0c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f08:	2210      	movs	r2, #16
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	2b10      	cmp	r3, #16
 8001f0e:	d005      	beq.n	8001f1c <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	2204      	movs	r2, #4
 8001f18:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001f1a:	d00b      	beq.n	8001f34 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f20:	2210      	movs	r2, #16
 8001f22:	431a      	orrs	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2250      	movs	r2, #80	; 0x50
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e132      	b.n	800219a <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f38:	4a9a      	ldr	r2, [pc, #616]	; (80021a4 <HAL_ADC_Init+0x2d0>)
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	2203      	movs	r2, #3
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d108      	bne.n	8001f64 <HAL_ADC_Init+0x90>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d101      	bne.n	8001f64 <HAL_ADC_Init+0x90>
 8001f60:	2301      	movs	r3, #1
 8001f62:	e000      	b.n	8001f66 <HAL_ADC_Init+0x92>
 8001f64:	2300      	movs	r3, #0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d149      	bne.n	8001ffe <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685a      	ldr	r2, [r3, #4]
 8001f6e:	23c0      	movs	r3, #192	; 0xc0
 8001f70:	061b      	lsls	r3, r3, #24
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d00b      	beq.n	8001f8e <HAL_ADC_Init+0xba>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	2380      	movs	r3, #128	; 0x80
 8001f7c:	05db      	lsls	r3, r3, #23
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d005      	beq.n	8001f8e <HAL_ADC_Init+0xba>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685a      	ldr	r2, [r3, #4]
 8001f86:	2380      	movs	r3, #128	; 0x80
 8001f88:	061b      	lsls	r3, r3, #24
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d111      	bne.n	8001fb2 <HAL_ADC_Init+0xde>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	691a      	ldr	r2, [r3, #16]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	0092      	lsls	r2, r2, #2
 8001f9a:	0892      	lsrs	r2, r2, #2
 8001f9c:	611a      	str	r2, [r3, #16]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	6919      	ldr	r1, [r3, #16]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	611a      	str	r2, [r3, #16]
 8001fb0:	e014      	b.n	8001fdc <HAL_ADC_Init+0x108>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	691a      	ldr	r2, [r3, #16]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	0092      	lsls	r2, r2, #2
 8001fbe:	0892      	lsrs	r2, r2, #2
 8001fc0:	611a      	str	r2, [r3, #16]
 8001fc2:	4b79      	ldr	r3, [pc, #484]	; (80021a8 <HAL_ADC_Init+0x2d4>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	4b78      	ldr	r3, [pc, #480]	; (80021a8 <HAL_ADC_Init+0x2d4>)
 8001fc8:	4978      	ldr	r1, [pc, #480]	; (80021ac <HAL_ADC_Init+0x2d8>)
 8001fca:	400a      	ands	r2, r1
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	4b76      	ldr	r3, [pc, #472]	; (80021a8 <HAL_ADC_Init+0x2d4>)
 8001fd0:	6819      	ldr	r1, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	4b74      	ldr	r3, [pc, #464]	; (80021a8 <HAL_ADC_Init+0x2d4>)
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68da      	ldr	r2, [r3, #12]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2118      	movs	r1, #24
 8001fe8:	438a      	bics	r2, r1
 8001fea:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68d9      	ldr	r1, [r3, #12]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689a      	ldr	r2, [r3, #8]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001ffe:	4b6a      	ldr	r3, [pc, #424]	; (80021a8 <HAL_ADC_Init+0x2d4>)
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	4b69      	ldr	r3, [pc, #420]	; (80021a8 <HAL_ADC_Init+0x2d4>)
 8002004:	496a      	ldr	r1, [pc, #424]	; (80021b0 <HAL_ADC_Init+0x2dc>)
 8002006:	400a      	ands	r2, r1
 8002008:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800200a:	4b67      	ldr	r3, [pc, #412]	; (80021a8 <HAL_ADC_Init+0x2d4>)
 800200c:	6819      	ldr	r1, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002012:	065a      	lsls	r2, r3, #25
 8002014:	4b64      	ldr	r3, [pc, #400]	; (80021a8 <HAL_ADC_Init+0x2d4>)
 8002016:	430a      	orrs	r2, r1
 8002018:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	2380      	movs	r3, #128	; 0x80
 8002022:	055b      	lsls	r3, r3, #21
 8002024:	4013      	ands	r3, r2
 8002026:	d108      	bne.n	800203a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	689a      	ldr	r2, [r3, #8]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2180      	movs	r1, #128	; 0x80
 8002034:	0549      	lsls	r1, r1, #21
 8002036:	430a      	orrs	r2, r1
 8002038:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68da      	ldr	r2, [r3, #12]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	495b      	ldr	r1, [pc, #364]	; (80021b4 <HAL_ADC_Init+0x2e0>)
 8002046:	400a      	ands	r2, r1
 8002048:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68d9      	ldr	r1, [r3, #12]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	2b02      	cmp	r3, #2
 800205a:	d101      	bne.n	8002060 <HAL_ADC_Init+0x18c>
 800205c:	2304      	movs	r3, #4
 800205e:	e000      	b.n	8002062 <HAL_ADC_Init+0x18e>
 8002060:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002062:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2020      	movs	r0, #32
 8002068:	5c1b      	ldrb	r3, [r3, r0]
 800206a:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800206c:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	202c      	movs	r0, #44	; 0x2c
 8002072:	5c1b      	ldrb	r3, [r3, r0]
 8002074:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002076:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800207c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8002084:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800208c:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	430a      	orrs	r2, r1
 8002094:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800209a:	23c2      	movs	r3, #194	; 0xc2
 800209c:	33ff      	adds	r3, #255	; 0xff
 800209e:	429a      	cmp	r2, r3
 80020a0:	d00b      	beq.n	80020ba <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68d9      	ldr	r1, [r3, #12]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80020b0:	431a      	orrs	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	430a      	orrs	r2, r1
 80020b8:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2221      	movs	r2, #33	; 0x21
 80020be:	5c9b      	ldrb	r3, [r3, r2]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d11a      	bne.n	80020fa <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2220      	movs	r2, #32
 80020c8:	5c9b      	ldrb	r3, [r3, r2]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d109      	bne.n	80020e2 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68da      	ldr	r2, [r3, #12]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2180      	movs	r1, #128	; 0x80
 80020da:	0249      	lsls	r1, r1, #9
 80020dc:	430a      	orrs	r2, r1
 80020de:	60da      	str	r2, [r3, #12]
 80020e0:	e00b      	b.n	80020fa <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e6:	2220      	movs	r2, #32
 80020e8:	431a      	orrs	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f2:	2201      	movs	r2, #1
 80020f4:	431a      	orrs	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d11f      	bne.n	8002142 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	691a      	ldr	r2, [r3, #16]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	492a      	ldr	r1, [pc, #168]	; (80021b8 <HAL_ADC_Init+0x2e4>)
 800210e:	400a      	ands	r2, r1
 8002110:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6919      	ldr	r1, [r3, #16]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002120:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8002126:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	430a      	orrs	r2, r1
 800212e:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	691a      	ldr	r2, [r3, #16]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2101      	movs	r1, #1
 800213c:	430a      	orrs	r2, r1
 800213e:	611a      	str	r2, [r3, #16]
 8002140:	e00e      	b.n	8002160 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	2201      	movs	r2, #1
 800214a:	4013      	ands	r3, r2
 800214c:	2b01      	cmp	r3, #1
 800214e:	d107      	bne.n	8002160 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	691a      	ldr	r2, [r3, #16]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2101      	movs	r1, #1
 800215c:	438a      	bics	r2, r1
 800215e:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	695a      	ldr	r2, [r3, #20]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2107      	movs	r1, #7
 800216c:	438a      	bics	r2, r1
 800216e:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6959      	ldr	r1, [r3, #20]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	430a      	orrs	r2, r1
 8002180:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800218c:	2203      	movs	r2, #3
 800218e:	4393      	bics	r3, r2
 8002190:	2201      	movs	r2, #1
 8002192:	431a      	orrs	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	0018      	movs	r0, r3
 800219c:	46bd      	mov	sp, r7
 800219e:	b002      	add	sp, #8
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	46c0      	nop			; (mov r8, r8)
 80021a4:	fffffefd 	.word	0xfffffefd
 80021a8:	40012708 	.word	0x40012708
 80021ac:	ffc3ffff 	.word	0xffc3ffff
 80021b0:	fdffffff 	.word	0xfdffffff
 80021b4:	fffe0219 	.word	0xfffe0219
 80021b8:	fffffc03 	.word	0xfffffc03

080021bc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2250      	movs	r2, #80	; 0x50
 80021ca:	5c9b      	ldrb	r3, [r3, r2]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d101      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x18>
 80021d0:	2302      	movs	r3, #2
 80021d2:	e085      	b.n	80022e0 <HAL_ADC_ConfigChannel+0x124>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2250      	movs	r2, #80	; 0x50
 80021d8:	2101      	movs	r1, #1
 80021da:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	2204      	movs	r2, #4
 80021e4:	4013      	ands	r3, r2
 80021e6:	d00b      	beq.n	8002200 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ec:	2220      	movs	r2, #32
 80021ee:	431a      	orrs	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2250      	movs	r2, #80	; 0x50
 80021f8:	2100      	movs	r1, #0
 80021fa:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e06f      	b.n	80022e0 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	4a38      	ldr	r2, [pc, #224]	; (80022e8 <HAL_ADC_ConfigChannel+0x12c>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d035      	beq.n	8002276 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	035b      	lsls	r3, r3, #13
 8002216:	0b5a      	lsrs	r2, r3, #13
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	430a      	orrs	r2, r1
 800221e:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	2380      	movs	r3, #128	; 0x80
 8002226:	02db      	lsls	r3, r3, #11
 8002228:	4013      	ands	r3, r2
 800222a:	d009      	beq.n	8002240 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 800222c:	4b2f      	ldr	r3, [pc, #188]	; (80022ec <HAL_ADC_ConfigChannel+0x130>)
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	4b2e      	ldr	r3, [pc, #184]	; (80022ec <HAL_ADC_ConfigChannel+0x130>)
 8002232:	2180      	movs	r1, #128	; 0x80
 8002234:	0409      	lsls	r1, r1, #16
 8002236:	430a      	orrs	r2, r1
 8002238:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800223a:	200a      	movs	r0, #10
 800223c:	f000 f85e 	bl	80022fc <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	2380      	movs	r3, #128	; 0x80
 8002246:	029b      	lsls	r3, r3, #10
 8002248:	4013      	ands	r3, r2
 800224a:	d006      	beq.n	800225a <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 800224c:	4b27      	ldr	r3, [pc, #156]	; (80022ec <HAL_ADC_ConfigChannel+0x130>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	4b26      	ldr	r3, [pc, #152]	; (80022ec <HAL_ADC_ConfigChannel+0x130>)
 8002252:	2180      	movs	r1, #128	; 0x80
 8002254:	03c9      	lsls	r1, r1, #15
 8002256:	430a      	orrs	r2, r1
 8002258:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	2380      	movs	r3, #128	; 0x80
 8002260:	025b      	lsls	r3, r3, #9
 8002262:	4013      	ands	r3, r2
 8002264:	d037      	beq.n	80022d6 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 8002266:	4b21      	ldr	r3, [pc, #132]	; (80022ec <HAL_ADC_ConfigChannel+0x130>)
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	4b20      	ldr	r3, [pc, #128]	; (80022ec <HAL_ADC_ConfigChannel+0x130>)
 800226c:	2180      	movs	r1, #128	; 0x80
 800226e:	0449      	lsls	r1, r1, #17
 8002270:	430a      	orrs	r2, r1
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	e02f      	b.n	80022d6 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	035b      	lsls	r3, r3, #13
 8002282:	0b5b      	lsrs	r3, r3, #13
 8002284:	43d9      	mvns	r1, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	400a      	ands	r2, r1
 800228c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	2380      	movs	r3, #128	; 0x80
 8002294:	02db      	lsls	r3, r3, #11
 8002296:	4013      	ands	r3, r2
 8002298:	d005      	beq.n	80022a6 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 800229a:	4b14      	ldr	r3, [pc, #80]	; (80022ec <HAL_ADC_ConfigChannel+0x130>)
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	4b13      	ldr	r3, [pc, #76]	; (80022ec <HAL_ADC_ConfigChannel+0x130>)
 80022a0:	4913      	ldr	r1, [pc, #76]	; (80022f0 <HAL_ADC_ConfigChannel+0x134>)
 80022a2:	400a      	ands	r2, r1
 80022a4:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	2380      	movs	r3, #128	; 0x80
 80022ac:	029b      	lsls	r3, r3, #10
 80022ae:	4013      	ands	r3, r2
 80022b0:	d005      	beq.n	80022be <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80022b2:	4b0e      	ldr	r3, [pc, #56]	; (80022ec <HAL_ADC_ConfigChannel+0x130>)
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	4b0d      	ldr	r3, [pc, #52]	; (80022ec <HAL_ADC_ConfigChannel+0x130>)
 80022b8:	490e      	ldr	r1, [pc, #56]	; (80022f4 <HAL_ADC_ConfigChannel+0x138>)
 80022ba:	400a      	ands	r2, r1
 80022bc:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	2380      	movs	r3, #128	; 0x80
 80022c4:	025b      	lsls	r3, r3, #9
 80022c6:	4013      	ands	r3, r2
 80022c8:	d005      	beq.n	80022d6 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 80022ca:	4b08      	ldr	r3, [pc, #32]	; (80022ec <HAL_ADC_ConfigChannel+0x130>)
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	4b07      	ldr	r3, [pc, #28]	; (80022ec <HAL_ADC_ConfigChannel+0x130>)
 80022d0:	4909      	ldr	r1, [pc, #36]	; (80022f8 <HAL_ADC_ConfigChannel+0x13c>)
 80022d2:	400a      	ands	r2, r1
 80022d4:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2250      	movs	r2, #80	; 0x50
 80022da:	2100      	movs	r1, #0
 80022dc:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	0018      	movs	r0, r3
 80022e2:	46bd      	mov	sp, r7
 80022e4:	b002      	add	sp, #8
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	00001001 	.word	0x00001001
 80022ec:	40012708 	.word	0x40012708
 80022f0:	ff7fffff 	.word	0xff7fffff
 80022f4:	ffbfffff 	.word	0xffbfffff
 80022f8:	feffffff 	.word	0xfeffffff

080022fc <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8002304:	4b0a      	ldr	r3, [pc, #40]	; (8002330 <ADC_DelayMicroSecond+0x34>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	490a      	ldr	r1, [pc, #40]	; (8002334 <ADC_DelayMicroSecond+0x38>)
 800230a:	0018      	movs	r0, r3
 800230c:	f7fd fefc 	bl	8000108 <__udivsi3>
 8002310:	0003      	movs	r3, r0
 8002312:	001a      	movs	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4353      	muls	r3, r2
 8002318:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 800231a:	e002      	b.n	8002322 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	3b01      	subs	r3, #1
 8002320:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1f9      	bne.n	800231c <ADC_DelayMicroSecond+0x20>
  } 
}
 8002328:	46c0      	nop			; (mov r8, r8)
 800232a:	46bd      	mov	sp, r7
 800232c:	b004      	add	sp, #16
 800232e:	bd80      	pop	{r7, pc}
 8002330:	20000000 	.word	0x20000000
 8002334:	000f4240 	.word	0x000f4240

08002338 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	0002      	movs	r2, r0
 8002340:	1dfb      	adds	r3, r7, #7
 8002342:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002344:	1dfb      	adds	r3, r7, #7
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	001a      	movs	r2, r3
 800234a:	231f      	movs	r3, #31
 800234c:	401a      	ands	r2, r3
 800234e:	4b04      	ldr	r3, [pc, #16]	; (8002360 <NVIC_EnableIRQ+0x28>)
 8002350:	2101      	movs	r1, #1
 8002352:	4091      	lsls	r1, r2
 8002354:	000a      	movs	r2, r1
 8002356:	601a      	str	r2, [r3, #0]
}
 8002358:	46c0      	nop			; (mov r8, r8)
 800235a:	46bd      	mov	sp, r7
 800235c:	b002      	add	sp, #8
 800235e:	bd80      	pop	{r7, pc}
 8002360:	e000e100 	.word	0xe000e100

08002364 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002364:	b590      	push	{r4, r7, lr}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	0002      	movs	r2, r0
 800236c:	6039      	str	r1, [r7, #0]
 800236e:	1dfb      	adds	r3, r7, #7
 8002370:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8002372:	1dfb      	adds	r3, r7, #7
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b7f      	cmp	r3, #127	; 0x7f
 8002378:	d932      	bls.n	80023e0 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800237a:	4a2f      	ldr	r2, [pc, #188]	; (8002438 <NVIC_SetPriority+0xd4>)
 800237c:	1dfb      	adds	r3, r7, #7
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	0019      	movs	r1, r3
 8002382:	230f      	movs	r3, #15
 8002384:	400b      	ands	r3, r1
 8002386:	3b08      	subs	r3, #8
 8002388:	089b      	lsrs	r3, r3, #2
 800238a:	3306      	adds	r3, #6
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	18d3      	adds	r3, r2, r3
 8002390:	3304      	adds	r3, #4
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	1dfa      	adds	r2, r7, #7
 8002396:	7812      	ldrb	r2, [r2, #0]
 8002398:	0011      	movs	r1, r2
 800239a:	2203      	movs	r2, #3
 800239c:	400a      	ands	r2, r1
 800239e:	00d2      	lsls	r2, r2, #3
 80023a0:	21ff      	movs	r1, #255	; 0xff
 80023a2:	4091      	lsls	r1, r2
 80023a4:	000a      	movs	r2, r1
 80023a6:	43d2      	mvns	r2, r2
 80023a8:	401a      	ands	r2, r3
 80023aa:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	019b      	lsls	r3, r3, #6
 80023b0:	22ff      	movs	r2, #255	; 0xff
 80023b2:	401a      	ands	r2, r3
 80023b4:	1dfb      	adds	r3, r7, #7
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	0018      	movs	r0, r3
 80023ba:	2303      	movs	r3, #3
 80023bc:	4003      	ands	r3, r0
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023c2:	481d      	ldr	r0, [pc, #116]	; (8002438 <NVIC_SetPriority+0xd4>)
 80023c4:	1dfb      	adds	r3, r7, #7
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	001c      	movs	r4, r3
 80023ca:	230f      	movs	r3, #15
 80023cc:	4023      	ands	r3, r4
 80023ce:	3b08      	subs	r3, #8
 80023d0:	089b      	lsrs	r3, r3, #2
 80023d2:	430a      	orrs	r2, r1
 80023d4:	3306      	adds	r3, #6
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	18c3      	adds	r3, r0, r3
 80023da:	3304      	adds	r3, #4
 80023dc:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80023de:	e027      	b.n	8002430 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023e0:	4a16      	ldr	r2, [pc, #88]	; (800243c <NVIC_SetPriority+0xd8>)
 80023e2:	1dfb      	adds	r3, r7, #7
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	b25b      	sxtb	r3, r3
 80023e8:	089b      	lsrs	r3, r3, #2
 80023ea:	33c0      	adds	r3, #192	; 0xc0
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	589b      	ldr	r3, [r3, r2]
 80023f0:	1dfa      	adds	r2, r7, #7
 80023f2:	7812      	ldrb	r2, [r2, #0]
 80023f4:	0011      	movs	r1, r2
 80023f6:	2203      	movs	r2, #3
 80023f8:	400a      	ands	r2, r1
 80023fa:	00d2      	lsls	r2, r2, #3
 80023fc:	21ff      	movs	r1, #255	; 0xff
 80023fe:	4091      	lsls	r1, r2
 8002400:	000a      	movs	r2, r1
 8002402:	43d2      	mvns	r2, r2
 8002404:	401a      	ands	r2, r3
 8002406:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	019b      	lsls	r3, r3, #6
 800240c:	22ff      	movs	r2, #255	; 0xff
 800240e:	401a      	ands	r2, r3
 8002410:	1dfb      	adds	r3, r7, #7
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	0018      	movs	r0, r3
 8002416:	2303      	movs	r3, #3
 8002418:	4003      	ands	r3, r0
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800241e:	4807      	ldr	r0, [pc, #28]	; (800243c <NVIC_SetPriority+0xd8>)
 8002420:	1dfb      	adds	r3, r7, #7
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	b25b      	sxtb	r3, r3
 8002426:	089b      	lsrs	r3, r3, #2
 8002428:	430a      	orrs	r2, r1
 800242a:	33c0      	adds	r3, #192	; 0xc0
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	501a      	str	r2, [r3, r0]
}
 8002430:	46c0      	nop			; (mov r8, r8)
 8002432:	46bd      	mov	sp, r7
 8002434:	b003      	add	sp, #12
 8002436:	bd90      	pop	{r4, r7, pc}
 8002438:	e000ed00 	.word	0xe000ed00
 800243c:	e000e100 	.word	0xe000e100

08002440 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3b01      	subs	r3, #1
 800244c:	4a0c      	ldr	r2, [pc, #48]	; (8002480 <SysTick_Config+0x40>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d901      	bls.n	8002456 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002452:	2301      	movs	r3, #1
 8002454:	e010      	b.n	8002478 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002456:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <SysTick_Config+0x44>)
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	3a01      	subs	r2, #1
 800245c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800245e:	2301      	movs	r3, #1
 8002460:	425b      	negs	r3, r3
 8002462:	2103      	movs	r1, #3
 8002464:	0018      	movs	r0, r3
 8002466:	f7ff ff7d 	bl	8002364 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800246a:	4b06      	ldr	r3, [pc, #24]	; (8002484 <SysTick_Config+0x44>)
 800246c:	2200      	movs	r2, #0
 800246e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002470:	4b04      	ldr	r3, [pc, #16]	; (8002484 <SysTick_Config+0x44>)
 8002472:	2207      	movs	r2, #7
 8002474:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002476:	2300      	movs	r3, #0
}
 8002478:	0018      	movs	r0, r3
 800247a:	46bd      	mov	sp, r7
 800247c:	b002      	add	sp, #8
 800247e:	bd80      	pop	{r7, pc}
 8002480:	00ffffff 	.word	0x00ffffff
 8002484:	e000e010 	.word	0xe000e010

08002488 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	60b9      	str	r1, [r7, #8]
 8002490:	607a      	str	r2, [r7, #4]
 8002492:	210f      	movs	r1, #15
 8002494:	187b      	adds	r3, r7, r1
 8002496:	1c02      	adds	r2, r0, #0
 8002498:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	187b      	adds	r3, r7, r1
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	b25b      	sxtb	r3, r3
 80024a2:	0011      	movs	r1, r2
 80024a4:	0018      	movs	r0, r3
 80024a6:	f7ff ff5d 	bl	8002364 <NVIC_SetPriority>
}
 80024aa:	46c0      	nop			; (mov r8, r8)
 80024ac:	46bd      	mov	sp, r7
 80024ae:	b004      	add	sp, #16
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b082      	sub	sp, #8
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	0002      	movs	r2, r0
 80024ba:	1dfb      	adds	r3, r7, #7
 80024bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024be:	1dfb      	adds	r3, r7, #7
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	b25b      	sxtb	r3, r3
 80024c4:	0018      	movs	r0, r3
 80024c6:	f7ff ff37 	bl	8002338 <NVIC_EnableIRQ>
}
 80024ca:	46c0      	nop			; (mov r8, r8)
 80024cc:	46bd      	mov	sp, r7
 80024ce:	b002      	add	sp, #8
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b082      	sub	sp, #8
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	0018      	movs	r0, r3
 80024de:	f7ff ffaf 	bl	8002440 <SysTick_Config>
 80024e2:	0003      	movs	r3, r0
}
 80024e4:	0018      	movs	r0, r3
 80024e6:	46bd      	mov	sp, r7
 80024e8:	b002      	add	sp, #8
 80024ea:	bd80      	pop	{r7, pc}

080024ec <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024f4:	230f      	movs	r3, #15
 80024f6:	18fb      	adds	r3, r7, r3
 80024f8:	2200      	movs	r2, #0
 80024fa:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2225      	movs	r2, #37	; 0x25
 8002500:	5c9b      	ldrb	r3, [r3, r2]
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d007      	beq.n	8002518 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2204      	movs	r2, #4
 800250c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800250e:	230f      	movs	r3, #15
 8002510:	18fb      	adds	r3, r7, r3
 8002512:	2201      	movs	r2, #1
 8002514:	701a      	strb	r2, [r3, #0]
 8002516:	e02a      	b.n	800256e <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	210e      	movs	r1, #14
 8002524:	438a      	bics	r2, r1
 8002526:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2101      	movs	r1, #1
 8002534:	438a      	bics	r2, r1
 8002536:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253c:	221c      	movs	r2, #28
 800253e:	401a      	ands	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002544:	2101      	movs	r1, #1
 8002546:	4091      	lsls	r1, r2
 8002548:	000a      	movs	r2, r1
 800254a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2225      	movs	r2, #37	; 0x25
 8002550:	2101      	movs	r1, #1
 8002552:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2224      	movs	r2, #36	; 0x24
 8002558:	2100      	movs	r1, #0
 800255a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002560:	2b00      	cmp	r3, #0
 8002562:	d004      	beq.n	800256e <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	0010      	movs	r0, r2
 800256c:	4798      	blx	r3
    }
  }
  return status;
 800256e:	230f      	movs	r3, #15
 8002570:	18fb      	adds	r3, r7, r3
 8002572:	781b      	ldrb	r3, [r3, #0]
}
 8002574:	0018      	movs	r0, r3
 8002576:	46bd      	mov	sp, r7
 8002578:	b004      	add	sp, #16
 800257a:	bd80      	pop	{r7, pc}

0800257c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002586:	2300      	movs	r3, #0
 8002588:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800258a:	2300      	movs	r3, #0
 800258c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800258e:	2300      	movs	r3, #0
 8002590:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002592:	e155      	b.n	8002840 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2101      	movs	r1, #1
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	4091      	lsls	r1, r2
 800259e:	000a      	movs	r2, r1
 80025a0:	4013      	ands	r3, r2
 80025a2:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d100      	bne.n	80025ac <HAL_GPIO_Init+0x30>
 80025aa:	e146      	b.n	800283a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d003      	beq.n	80025bc <HAL_GPIO_Init+0x40>
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	2b12      	cmp	r3, #18
 80025ba:	d123      	bne.n	8002604 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	08da      	lsrs	r2, r3, #3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3208      	adds	r2, #8
 80025c4:	0092      	lsls	r2, r2, #2
 80025c6:	58d3      	ldr	r3, [r2, r3]
 80025c8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	2207      	movs	r2, #7
 80025ce:	4013      	ands	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	220f      	movs	r2, #15
 80025d4:	409a      	lsls	r2, r3
 80025d6:	0013      	movs	r3, r2
 80025d8:	43da      	mvns	r2, r3
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	4013      	ands	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	691a      	ldr	r2, [r3, #16]
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	2107      	movs	r1, #7
 80025e8:	400b      	ands	r3, r1
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	409a      	lsls	r2, r3
 80025ee:	0013      	movs	r3, r2
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	08da      	lsrs	r2, r3, #3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	3208      	adds	r2, #8
 80025fe:	0092      	lsls	r2, r2, #2
 8002600:	6939      	ldr	r1, [r7, #16]
 8002602:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d00b      	beq.n	8002624 <HAL_GPIO_Init+0xa8>
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	2b02      	cmp	r3, #2
 8002612:	d007      	beq.n	8002624 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002618:	2b11      	cmp	r3, #17
 800261a:	d003      	beq.n	8002624 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b12      	cmp	r3, #18
 8002622:	d130      	bne.n	8002686 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	2203      	movs	r2, #3
 8002630:	409a      	lsls	r2, r3
 8002632:	0013      	movs	r3, r2
 8002634:	43da      	mvns	r2, r3
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	4013      	ands	r3, r2
 800263a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	68da      	ldr	r2, [r3, #12]
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	409a      	lsls	r2, r3
 8002646:	0013      	movs	r3, r2
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	4313      	orrs	r3, r2
 800264c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800265a:	2201      	movs	r2, #1
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	409a      	lsls	r2, r3
 8002660:	0013      	movs	r3, r2
 8002662:	43da      	mvns	r2, r3
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	4013      	ands	r3, r2
 8002668:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	091b      	lsrs	r3, r3, #4
 8002670:	2201      	movs	r2, #1
 8002672:	401a      	ands	r2, r3
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	409a      	lsls	r2, r3
 8002678:	0013      	movs	r3, r2
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	4313      	orrs	r3, r2
 800267e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	2203      	movs	r2, #3
 8002692:	409a      	lsls	r2, r3
 8002694:	0013      	movs	r3, r2
 8002696:	43da      	mvns	r2, r3
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	4013      	ands	r3, r2
 800269c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2203      	movs	r2, #3
 80026a4:	401a      	ands	r2, r3
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	409a      	lsls	r2, r3
 80026ac:	0013      	movs	r3, r2
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	2203      	movs	r2, #3
 80026c6:	409a      	lsls	r2, r3
 80026c8:	0013      	movs	r3, r2
 80026ca:	43da      	mvns	r2, r3
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	4013      	ands	r3, r2
 80026d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	689a      	ldr	r2, [r3, #8]
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	409a      	lsls	r2, r3
 80026dc:	0013      	movs	r3, r2
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	2380      	movs	r3, #128	; 0x80
 80026f0:	055b      	lsls	r3, r3, #21
 80026f2:	4013      	ands	r3, r2
 80026f4:	d100      	bne.n	80026f8 <HAL_GPIO_Init+0x17c>
 80026f6:	e0a0      	b.n	800283a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026f8:	4b57      	ldr	r3, [pc, #348]	; (8002858 <HAL_GPIO_Init+0x2dc>)
 80026fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026fc:	4b56      	ldr	r3, [pc, #344]	; (8002858 <HAL_GPIO_Init+0x2dc>)
 80026fe:	2101      	movs	r1, #1
 8002700:	430a      	orrs	r2, r1
 8002702:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8002704:	4a55      	ldr	r2, [pc, #340]	; (800285c <HAL_GPIO_Init+0x2e0>)
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	089b      	lsrs	r3, r3, #2
 800270a:	3302      	adds	r3, #2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	589b      	ldr	r3, [r3, r2]
 8002710:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	2203      	movs	r2, #3
 8002716:	4013      	ands	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	220f      	movs	r2, #15
 800271c:	409a      	lsls	r2, r3
 800271e:	0013      	movs	r3, r2
 8002720:	43da      	mvns	r2, r3
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	4013      	ands	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	23a0      	movs	r3, #160	; 0xa0
 800272c:	05db      	lsls	r3, r3, #23
 800272e:	429a      	cmp	r2, r3
 8002730:	d01f      	beq.n	8002772 <HAL_GPIO_Init+0x1f6>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a4a      	ldr	r2, [pc, #296]	; (8002860 <HAL_GPIO_Init+0x2e4>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d019      	beq.n	800276e <HAL_GPIO_Init+0x1f2>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a49      	ldr	r2, [pc, #292]	; (8002864 <HAL_GPIO_Init+0x2e8>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d013      	beq.n	800276a <HAL_GPIO_Init+0x1ee>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a48      	ldr	r2, [pc, #288]	; (8002868 <HAL_GPIO_Init+0x2ec>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d00d      	beq.n	8002766 <HAL_GPIO_Init+0x1ea>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a47      	ldr	r2, [pc, #284]	; (800286c <HAL_GPIO_Init+0x2f0>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d007      	beq.n	8002762 <HAL_GPIO_Init+0x1e6>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a46      	ldr	r2, [pc, #280]	; (8002870 <HAL_GPIO_Init+0x2f4>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d101      	bne.n	800275e <HAL_GPIO_Init+0x1e2>
 800275a:	2305      	movs	r3, #5
 800275c:	e00a      	b.n	8002774 <HAL_GPIO_Init+0x1f8>
 800275e:	2306      	movs	r3, #6
 8002760:	e008      	b.n	8002774 <HAL_GPIO_Init+0x1f8>
 8002762:	2304      	movs	r3, #4
 8002764:	e006      	b.n	8002774 <HAL_GPIO_Init+0x1f8>
 8002766:	2303      	movs	r3, #3
 8002768:	e004      	b.n	8002774 <HAL_GPIO_Init+0x1f8>
 800276a:	2302      	movs	r3, #2
 800276c:	e002      	b.n	8002774 <HAL_GPIO_Init+0x1f8>
 800276e:	2301      	movs	r3, #1
 8002770:	e000      	b.n	8002774 <HAL_GPIO_Init+0x1f8>
 8002772:	2300      	movs	r3, #0
 8002774:	697a      	ldr	r2, [r7, #20]
 8002776:	2103      	movs	r1, #3
 8002778:	400a      	ands	r2, r1
 800277a:	0092      	lsls	r2, r2, #2
 800277c:	4093      	lsls	r3, r2
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	4313      	orrs	r3, r2
 8002782:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002784:	4935      	ldr	r1, [pc, #212]	; (800285c <HAL_GPIO_Init+0x2e0>)
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	089b      	lsrs	r3, r3, #2
 800278a:	3302      	adds	r3, #2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002792:	4b38      	ldr	r3, [pc, #224]	; (8002874 <HAL_GPIO_Init+0x2f8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	43da      	mvns	r2, r3
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	4013      	ands	r3, r2
 80027a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685a      	ldr	r2, [r3, #4]
 80027a6:	2380      	movs	r3, #128	; 0x80
 80027a8:	025b      	lsls	r3, r3, #9
 80027aa:	4013      	ands	r3, r2
 80027ac:	d003      	beq.n	80027b6 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80027b6:	4b2f      	ldr	r3, [pc, #188]	; (8002874 <HAL_GPIO_Init+0x2f8>)
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80027bc:	4b2d      	ldr	r3, [pc, #180]	; (8002874 <HAL_GPIO_Init+0x2f8>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	43da      	mvns	r2, r3
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	4013      	ands	r3, r2
 80027ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685a      	ldr	r2, [r3, #4]
 80027d0:	2380      	movs	r3, #128	; 0x80
 80027d2:	029b      	lsls	r3, r3, #10
 80027d4:	4013      	ands	r3, r2
 80027d6:	d003      	beq.n	80027e0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	4313      	orrs	r3, r2
 80027de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80027e0:	4b24      	ldr	r3, [pc, #144]	; (8002874 <HAL_GPIO_Init+0x2f8>)
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027e6:	4b23      	ldr	r3, [pc, #140]	; (8002874 <HAL_GPIO_Init+0x2f8>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	43da      	mvns	r2, r3
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	4013      	ands	r3, r2
 80027f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	2380      	movs	r3, #128	; 0x80
 80027fc:	035b      	lsls	r3, r3, #13
 80027fe:	4013      	ands	r3, r2
 8002800:	d003      	beq.n	800280a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4313      	orrs	r3, r2
 8002808:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800280a:	4b1a      	ldr	r3, [pc, #104]	; (8002874 <HAL_GPIO_Init+0x2f8>)
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002810:	4b18      	ldr	r3, [pc, #96]	; (8002874 <HAL_GPIO_Init+0x2f8>)
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	43da      	mvns	r2, r3
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	4013      	ands	r3, r2
 800281e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	2380      	movs	r3, #128	; 0x80
 8002826:	039b      	lsls	r3, r3, #14
 8002828:	4013      	ands	r3, r2
 800282a:	d003      	beq.n	8002834 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	4313      	orrs	r3, r2
 8002832:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002834:	4b0f      	ldr	r3, [pc, #60]	; (8002874 <HAL_GPIO_Init+0x2f8>)
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	3301      	adds	r3, #1
 800283e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	40da      	lsrs	r2, r3
 8002848:	1e13      	subs	r3, r2, #0
 800284a:	d000      	beq.n	800284e <HAL_GPIO_Init+0x2d2>
 800284c:	e6a2      	b.n	8002594 <HAL_GPIO_Init+0x18>
  }
}
 800284e:	46c0      	nop			; (mov r8, r8)
 8002850:	46bd      	mov	sp, r7
 8002852:	b006      	add	sp, #24
 8002854:	bd80      	pop	{r7, pc}
 8002856:	46c0      	nop			; (mov r8, r8)
 8002858:	40021000 	.word	0x40021000
 800285c:	40010000 	.word	0x40010000
 8002860:	50000400 	.word	0x50000400
 8002864:	50000800 	.word	0x50000800
 8002868:	50000c00 	.word	0x50000c00
 800286c:	50001000 	.word	0x50001000
 8002870:	50001c00 	.word	0x50001c00
 8002874:	40010400 	.word	0x40010400

08002878 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	0008      	movs	r0, r1
 8002882:	0011      	movs	r1, r2
 8002884:	1cbb      	adds	r3, r7, #2
 8002886:	1c02      	adds	r2, r0, #0
 8002888:	801a      	strh	r2, [r3, #0]
 800288a:	1c7b      	adds	r3, r7, #1
 800288c:	1c0a      	adds	r2, r1, #0
 800288e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8002890:	1c7b      	adds	r3, r7, #1
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d004      	beq.n	80028a2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002898:	1cbb      	adds	r3, r7, #2
 800289a:	881a      	ldrh	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80028a0:	e003      	b.n	80028aa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80028a2:	1cbb      	adds	r3, r7, #2
 80028a4:	881a      	ldrh	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028aa:	46c0      	nop			; (mov r8, r8)
 80028ac:	46bd      	mov	sp, r7
 80028ae:	b002      	add	sp, #8
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b082      	sub	sp, #8
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
 80028ba:	000a      	movs	r2, r1
 80028bc:	1cbb      	adds	r3, r7, #2
 80028be:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	695a      	ldr	r2, [r3, #20]
 80028c4:	1cbb      	adds	r3, r7, #2
 80028c6:	881b      	ldrh	r3, [r3, #0]
 80028c8:	405a      	eors	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	615a      	str	r2, [r3, #20]
}
 80028ce:	46c0      	nop			; (mov r8, r8)
 80028d0:	46bd      	mov	sp, r7
 80028d2:	b002      	add	sp, #8
 80028d4:	bd80      	pop	{r7, pc}
	...

080028d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	0002      	movs	r2, r0
 80028e0:	1dbb      	adds	r3, r7, #6
 80028e2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 80028e4:	4b09      	ldr	r3, [pc, #36]	; (800290c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80028e6:	695b      	ldr	r3, [r3, #20]
 80028e8:	1dba      	adds	r2, r7, #6
 80028ea:	8812      	ldrh	r2, [r2, #0]
 80028ec:	4013      	ands	r3, r2
 80028ee:	d008      	beq.n	8002902 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028f0:	4b06      	ldr	r3, [pc, #24]	; (800290c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80028f2:	1dba      	adds	r2, r7, #6
 80028f4:	8812      	ldrh	r2, [r2, #0]
 80028f6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028f8:	1dbb      	adds	r3, r7, #6
 80028fa:	881b      	ldrh	r3, [r3, #0]
 80028fc:	0018      	movs	r0, r3
 80028fe:	f7fe ff63 	bl	80017c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002902:	46c0      	nop			; (mov r8, r8)
 8002904:	46bd      	mov	sp, r7
 8002906:	b002      	add	sp, #8
 8002908:	bd80      	pop	{r7, pc}
 800290a:	46c0      	nop			; (mov r8, r8)
 800290c:	40010400 	.word	0x40010400

08002910 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e06c      	b.n	80029fc <HAL_LPTIM_Init+0xec>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	222e      	movs	r2, #46	; 0x2e
 8002926:	5c9b      	ldrb	r3, [r3, r2]
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d107      	bne.n	800293e <HAL_LPTIM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	222d      	movs	r2, #45	; 0x2d
 8002932:	2100      	movs	r1, #0
 8002934:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	0018      	movs	r0, r3
 800293a:	f7ff f8a5 	bl	8001a88 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	222e      	movs	r2, #46	; 0x2e
 8002942:	2102      	movs	r1, #2
 8002944:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d005      	beq.n	8002962 <HAL_LPTIM_Init+0x52>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800295a:	2380      	movs	r3, #128	; 0x80
 800295c:	041b      	lsls	r3, r3, #16
 800295e:	429a      	cmp	r2, r3
 8002960:	d103      	bne.n	800296a <HAL_LPTIM_Init+0x5a>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	221e      	movs	r2, #30
 8002966:	4393      	bics	r3, r2
 8002968:	60fb      	str	r3, [r7, #12]
  }
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	4a25      	ldr	r2, [pc, #148]	; (8002a04 <HAL_LPTIM_Init+0xf4>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d003      	beq.n	800297c <HAL_LPTIM_Init+0x6c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	4a24      	ldr	r2, [pc, #144]	; (8002a08 <HAL_LPTIM_Init+0xf8>)
 8002978:	4013      	ands	r3, r2
 800297a:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	4a23      	ldr	r2, [pc, #140]	; (8002a0c <HAL_LPTIM_Init+0xfc>)
 8002980:	4013      	ands	r3, r2
 8002982:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800298c:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8002992:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8002998:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800299e:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d005      	beq.n	80029ba <HAL_LPTIM_Init+0xaa>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029b2:	2380      	movs	r3, #128	; 0x80
 80029b4:	041b      	lsls	r3, r3, #16
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d107      	bne.n	80029ca <HAL_LPTIM_Init+0xba>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80029c2:	4313      	orrs	r3, r2
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	60fb      	str	r3, [r7, #12]
  }

  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	4a0d      	ldr	r2, [pc, #52]	; (8002a04 <HAL_LPTIM_Init+0xf4>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d00a      	beq.n	80029ea <HAL_LPTIM_Init+0xda>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80029dc:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80029e2:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	222e      	movs	r2, #46	; 0x2e
 80029f6:	2101      	movs	r1, #1
 80029f8:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	0018      	movs	r0, r3
 80029fe:	46bd      	mov	sp, r7
 8002a00:	b004      	add	sp, #16
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	0000ffff 	.word	0x0000ffff
 8002a08:	ffff1f3f 	.word	0xffff1f3f
 8002a0c:	ff19f1f8 	.word	0xff19f1f8

08002a10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a10:	b5b0      	push	{r4, r5, r7, lr}
 8002a12:	b08a      	sub	sp, #40	; 0x28
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d102      	bne.n	8002a24 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	f000 fbbc 	bl	800319c <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a24:	4bc8      	ldr	r3, [pc, #800]	; (8002d48 <HAL_RCC_OscConfig+0x338>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	220c      	movs	r2, #12
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a2e:	4bc6      	ldr	r3, [pc, #792]	; (8002d48 <HAL_RCC_OscConfig+0x338>)
 8002a30:	68da      	ldr	r2, [r3, #12]
 8002a32:	2380      	movs	r3, #128	; 0x80
 8002a34:	025b      	lsls	r3, r3, #9
 8002a36:	4013      	ands	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	4013      	ands	r3, r2
 8002a42:	d100      	bne.n	8002a46 <HAL_RCC_OscConfig+0x36>
 8002a44:	e07e      	b.n	8002b44 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	2b08      	cmp	r3, #8
 8002a4a:	d007      	beq.n	8002a5c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	2b0c      	cmp	r3, #12
 8002a50:	d112      	bne.n	8002a78 <HAL_RCC_OscConfig+0x68>
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	2380      	movs	r3, #128	; 0x80
 8002a56:	025b      	lsls	r3, r3, #9
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d10d      	bne.n	8002a78 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a5c:	4bba      	ldr	r3, [pc, #744]	; (8002d48 <HAL_RCC_OscConfig+0x338>)
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	2380      	movs	r3, #128	; 0x80
 8002a62:	029b      	lsls	r3, r3, #10
 8002a64:	4013      	ands	r3, r2
 8002a66:	d100      	bne.n	8002a6a <HAL_RCC_OscConfig+0x5a>
 8002a68:	e06b      	b.n	8002b42 <HAL_RCC_OscConfig+0x132>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d167      	bne.n	8002b42 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	f000 fb92 	bl	800319c <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	2380      	movs	r3, #128	; 0x80
 8002a7e:	025b      	lsls	r3, r3, #9
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d107      	bne.n	8002a94 <HAL_RCC_OscConfig+0x84>
 8002a84:	4bb0      	ldr	r3, [pc, #704]	; (8002d48 <HAL_RCC_OscConfig+0x338>)
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	4baf      	ldr	r3, [pc, #700]	; (8002d48 <HAL_RCC_OscConfig+0x338>)
 8002a8a:	2180      	movs	r1, #128	; 0x80
 8002a8c:	0249      	lsls	r1, r1, #9
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	e027      	b.n	8002ae4 <HAL_RCC_OscConfig+0xd4>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	23a0      	movs	r3, #160	; 0xa0
 8002a9a:	02db      	lsls	r3, r3, #11
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d10e      	bne.n	8002abe <HAL_RCC_OscConfig+0xae>
 8002aa0:	4ba9      	ldr	r3, [pc, #676]	; (8002d48 <HAL_RCC_OscConfig+0x338>)
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	4ba8      	ldr	r3, [pc, #672]	; (8002d48 <HAL_RCC_OscConfig+0x338>)
 8002aa6:	2180      	movs	r1, #128	; 0x80
 8002aa8:	02c9      	lsls	r1, r1, #11
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	4ba6      	ldr	r3, [pc, #664]	; (8002d48 <HAL_RCC_OscConfig+0x338>)
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	4ba5      	ldr	r3, [pc, #660]	; (8002d48 <HAL_RCC_OscConfig+0x338>)
 8002ab4:	2180      	movs	r1, #128	; 0x80
 8002ab6:	0249      	lsls	r1, r1, #9
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	e012      	b.n	8002ae4 <HAL_RCC_OscConfig+0xd4>
 8002abe:	4ba2      	ldr	r3, [pc, #648]	; (8002d48 <HAL_RCC_OscConfig+0x338>)
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	4ba1      	ldr	r3, [pc, #644]	; (8002d48 <HAL_RCC_OscConfig+0x338>)
 8002ac4:	49a1      	ldr	r1, [pc, #644]	; (8002d4c <HAL_RCC_OscConfig+0x33c>)
 8002ac6:	400a      	ands	r2, r1
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	4b9f      	ldr	r3, [pc, #636]	; (8002d48 <HAL_RCC_OscConfig+0x338>)
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	2380      	movs	r3, #128	; 0x80
 8002ad0:	025b      	lsls	r3, r3, #9
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	60fb      	str	r3, [r7, #12]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	4b9b      	ldr	r3, [pc, #620]	; (8002d48 <HAL_RCC_OscConfig+0x338>)
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	4b9a      	ldr	r3, [pc, #616]	; (8002d48 <HAL_RCC_OscConfig+0x338>)
 8002ade:	499c      	ldr	r1, [pc, #624]	; (8002d50 <HAL_RCC_OscConfig+0x340>)
 8002ae0:	400a      	ands	r2, r1
 8002ae2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d015      	beq.n	8002b18 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aec:	f7ff f9ca 	bl	8001e84 <HAL_GetTick>
 8002af0:	0003      	movs	r3, r0
 8002af2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002af4:	e009      	b.n	8002b0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002af6:	f7ff f9c5 	bl	8001e84 <HAL_GetTick>
 8002afa:	0002      	movs	r2, r0
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b64      	cmp	r3, #100	; 0x64
 8002b02:	d902      	bls.n	8002b0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	f000 fb49 	bl	800319c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b0a:	4b8f      	ldr	r3, [pc, #572]	; (8002d48 <HAL_RCC_OscConfig+0x338>)
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	2380      	movs	r3, #128	; 0x80
 8002b10:	029b      	lsls	r3, r3, #10
 8002b12:	4013      	ands	r3, r2
 8002b14:	d0ef      	beq.n	8002af6 <HAL_RCC_OscConfig+0xe6>
 8002b16:	e015      	b.n	8002b44 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b18:	f7ff f9b4 	bl	8001e84 <HAL_GetTick>
 8002b1c:	0003      	movs	r3, r0
 8002b1e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b22:	f7ff f9af 	bl	8001e84 <HAL_GetTick>
 8002b26:	0002      	movs	r2, r0
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b64      	cmp	r3, #100	; 0x64
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e333      	b.n	800319c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b34:	4b84      	ldr	r3, [pc, #528]	; (8002d48 <HAL_RCC_OscConfig+0x338>)
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	2380      	movs	r3, #128	; 0x80
 8002b3a:	029b      	lsls	r3, r3, #10
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	d1f0      	bne.n	8002b22 <HAL_RCC_OscConfig+0x112>
 8002b40:	e000      	b.n	8002b44 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b42:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2202      	movs	r2, #2
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	d100      	bne.n	8002b50 <HAL_RCC_OscConfig+0x140>
 8002b4e:	e098      	b.n	8002c82 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b58:	2220      	movs	r2, #32
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	d009      	beq.n	8002b72 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002b5e:	4b7a      	ldr	r3, [pc, #488]	; (8002d48 <HAL_RCC_OscConfig+0x338>)
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	4b79      	ldr	r3, [pc, #484]	; (8002d48 <HAL_RCC_OscConfig+0x338>)
 8002b64:	2120      	movs	r1, #32
 8002b66:	430a      	orrs	r2, r1
 8002b68:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6c:	2220      	movs	r2, #32
 8002b6e:	4393      	bics	r3, r2
 8002b70:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	2b04      	cmp	r3, #4
 8002b76:	d005      	beq.n	8002b84 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	2b0c      	cmp	r3, #12
 8002b7c:	d13d      	bne.n	8002bfa <HAL_RCC_OscConfig+0x1ea>
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d13a      	bne.n	8002bfa <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002b84:	4b70      	ldr	r3, [pc, #448]	; (8002d48 <HAL_RCC_OscConfig+0x338>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2204      	movs	r2, #4
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	d004      	beq.n	8002b98 <HAL_RCC_OscConfig+0x188>
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d101      	bne.n	8002b98 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e301      	b.n	800319c <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b98:	4b6b      	ldr	r3, [pc, #428]	; (8002d48 <HAL_RCC_OscConfig+0x338>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	4a6d      	ldr	r2, [pc, #436]	; (8002d54 <HAL_RCC_OscConfig+0x344>)
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	0019      	movs	r1, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	021a      	lsls	r2, r3, #8
 8002ba8:	4b67      	ldr	r3, [pc, #412]	; (8002d48 <HAL_RCC_OscConfig+0x338>)
 8002baa:	430a      	orrs	r2, r1
 8002bac:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002bae:	4b66      	ldr	r3, [pc, #408]	; (8002d48 <HAL_RCC_OscConfig+0x338>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2209      	movs	r2, #9
 8002bb4:	4393      	bics	r3, r2
 8002bb6:	0019      	movs	r1, r3
 8002bb8:	4b63      	ldr	r3, [pc, #396]	; (8002d48 <HAL_RCC_OscConfig+0x338>)
 8002bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bc0:	f000 fc20 	bl	8003404 <HAL_RCC_GetSysClockFreq>
 8002bc4:	0001      	movs	r1, r0
 8002bc6:	4b60      	ldr	r3, [pc, #384]	; (8002d48 <HAL_RCC_OscConfig+0x338>)
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	091b      	lsrs	r3, r3, #4
 8002bcc:	220f      	movs	r2, #15
 8002bce:	4013      	ands	r3, r2
 8002bd0:	4a61      	ldr	r2, [pc, #388]	; (8002d58 <HAL_RCC_OscConfig+0x348>)
 8002bd2:	5cd3      	ldrb	r3, [r2, r3]
 8002bd4:	000a      	movs	r2, r1
 8002bd6:	40da      	lsrs	r2, r3
 8002bd8:	4b60      	ldr	r3, [pc, #384]	; (8002d5c <HAL_RCC_OscConfig+0x34c>)
 8002bda:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8002bdc:	2513      	movs	r5, #19
 8002bde:	197c      	adds	r4, r7, r5
 8002be0:	2000      	movs	r0, #0
 8002be2:	f7ff f919 	bl	8001e18 <HAL_InitTick>
 8002be6:	0003      	movs	r3, r0
 8002be8:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002bea:	197b      	adds	r3, r7, r5
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d047      	beq.n	8002c82 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8002bf2:	2313      	movs	r3, #19
 8002bf4:	18fb      	adds	r3, r7, r3
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	e2d0      	b.n	800319c <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d027      	beq.n	8002c50 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002c00:	4b51      	ldr	r3, [pc, #324]	; (8002d48 <HAL_RCC_OscConfig+0x338>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2209      	movs	r2, #9
 8002c06:	4393      	bics	r3, r2
 8002c08:	0019      	movs	r1, r3
 8002c0a:	4b4f      	ldr	r3, [pc, #316]	; (8002d48 <HAL_RCC_OscConfig+0x338>)
 8002c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c12:	f7ff f937 	bl	8001e84 <HAL_GetTick>
 8002c16:	0003      	movs	r3, r0
 8002c18:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c1c:	f7ff f932 	bl	8001e84 <HAL_GetTick>
 8002c20:	0002      	movs	r2, r0
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e2b6      	b.n	800319c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c2e:	4b46      	ldr	r3, [pc, #280]	; (8002d48 <HAL_RCC_OscConfig+0x338>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2204      	movs	r2, #4
 8002c34:	4013      	ands	r3, r2
 8002c36:	d0f1      	beq.n	8002c1c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c38:	4b43      	ldr	r3, [pc, #268]	; (8002d48 <HAL_RCC_OscConfig+0x338>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	4a45      	ldr	r2, [pc, #276]	; (8002d54 <HAL_RCC_OscConfig+0x344>)
 8002c3e:	4013      	ands	r3, r2
 8002c40:	0019      	movs	r1, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	021a      	lsls	r2, r3, #8
 8002c48:	4b3f      	ldr	r3, [pc, #252]	; (8002d48 <HAL_RCC_OscConfig+0x338>)
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	605a      	str	r2, [r3, #4]
 8002c4e:	e018      	b.n	8002c82 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c50:	4b3d      	ldr	r3, [pc, #244]	; (8002d48 <HAL_RCC_OscConfig+0x338>)
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	4b3c      	ldr	r3, [pc, #240]	; (8002d48 <HAL_RCC_OscConfig+0x338>)
 8002c56:	2101      	movs	r1, #1
 8002c58:	438a      	bics	r2, r1
 8002c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c5c:	f7ff f912 	bl	8001e84 <HAL_GetTick>
 8002c60:	0003      	movs	r3, r0
 8002c62:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c64:	e008      	b.n	8002c78 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c66:	f7ff f90d 	bl	8001e84 <HAL_GetTick>
 8002c6a:	0002      	movs	r2, r0
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d901      	bls.n	8002c78 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e291      	b.n	800319c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c78:	4b33      	ldr	r3, [pc, #204]	; (8002d48 <HAL_RCC_OscConfig+0x338>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2204      	movs	r2, #4
 8002c7e:	4013      	ands	r3, r2
 8002c80:	d1f1      	bne.n	8002c66 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2210      	movs	r2, #16
 8002c88:	4013      	ands	r3, r2
 8002c8a:	d100      	bne.n	8002c8e <HAL_RCC_OscConfig+0x27e>
 8002c8c:	e09f      	b.n	8002dce <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d13f      	bne.n	8002d14 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c94:	4b2c      	ldr	r3, [pc, #176]	; (8002d48 <HAL_RCC_OscConfig+0x338>)
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	2380      	movs	r3, #128	; 0x80
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	d005      	beq.n	8002cac <HAL_RCC_OscConfig+0x29c>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	69db      	ldr	r3, [r3, #28]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e277      	b.n	800319c <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cac:	4b26      	ldr	r3, [pc, #152]	; (8002d48 <HAL_RCC_OscConfig+0x338>)
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	4a2b      	ldr	r2, [pc, #172]	; (8002d60 <HAL_RCC_OscConfig+0x350>)
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	0019      	movs	r1, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cba:	4b23      	ldr	r3, [pc, #140]	; (8002d48 <HAL_RCC_OscConfig+0x338>)
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cc0:	4b21      	ldr	r3, [pc, #132]	; (8002d48 <HAL_RCC_OscConfig+0x338>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	021b      	lsls	r3, r3, #8
 8002cc6:	0a19      	lsrs	r1, r3, #8
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	061a      	lsls	r2, r3, #24
 8002cce:	4b1e      	ldr	r3, [pc, #120]	; (8002d48 <HAL_RCC_OscConfig+0x338>)
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd8:	0b5b      	lsrs	r3, r3, #13
 8002cda:	3301      	adds	r3, #1
 8002cdc:	2280      	movs	r2, #128	; 0x80
 8002cde:	0212      	lsls	r2, r2, #8
 8002ce0:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002ce2:	4b19      	ldr	r3, [pc, #100]	; (8002d48 <HAL_RCC_OscConfig+0x338>)
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	091b      	lsrs	r3, r3, #4
 8002ce8:	210f      	movs	r1, #15
 8002cea:	400b      	ands	r3, r1
 8002cec:	491a      	ldr	r1, [pc, #104]	; (8002d58 <HAL_RCC_OscConfig+0x348>)
 8002cee:	5ccb      	ldrb	r3, [r1, r3]
 8002cf0:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002cf2:	4b1a      	ldr	r3, [pc, #104]	; (8002d5c <HAL_RCC_OscConfig+0x34c>)
 8002cf4:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8002cf6:	2513      	movs	r5, #19
 8002cf8:	197c      	adds	r4, r7, r5
 8002cfa:	2000      	movs	r0, #0
 8002cfc:	f7ff f88c 	bl	8001e18 <HAL_InitTick>
 8002d00:	0003      	movs	r3, r0
 8002d02:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002d04:	197b      	adds	r3, r7, r5
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d060      	beq.n	8002dce <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8002d0c:	2313      	movs	r3, #19
 8002d0e:	18fb      	adds	r3, r7, r3
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	e243      	b.n	800319c <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	69db      	ldr	r3, [r3, #28]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d03e      	beq.n	8002d9a <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d1c:	4b0a      	ldr	r3, [pc, #40]	; (8002d48 <HAL_RCC_OscConfig+0x338>)
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	4b09      	ldr	r3, [pc, #36]	; (8002d48 <HAL_RCC_OscConfig+0x338>)
 8002d22:	2180      	movs	r1, #128	; 0x80
 8002d24:	0049      	lsls	r1, r1, #1
 8002d26:	430a      	orrs	r2, r1
 8002d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2a:	f7ff f8ab 	bl	8001e84 <HAL_GetTick>
 8002d2e:	0003      	movs	r3, r0
 8002d30:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002d32:	e017      	b.n	8002d64 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d34:	f7ff f8a6 	bl	8001e84 <HAL_GetTick>
 8002d38:	0002      	movs	r2, r0
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d910      	bls.n	8002d64 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e22a      	b.n	800319c <HAL_RCC_OscConfig+0x78c>
 8002d46:	46c0      	nop			; (mov r8, r8)
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	fffeffff 	.word	0xfffeffff
 8002d50:	fffbffff 	.word	0xfffbffff
 8002d54:	ffffe0ff 	.word	0xffffe0ff
 8002d58:	08005e8c 	.word	0x08005e8c
 8002d5c:	20000000 	.word	0x20000000
 8002d60:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002d64:	4bc6      	ldr	r3, [pc, #792]	; (8003080 <HAL_RCC_OscConfig+0x670>)
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	2380      	movs	r3, #128	; 0x80
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	d0e1      	beq.n	8002d34 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d70:	4bc3      	ldr	r3, [pc, #780]	; (8003080 <HAL_RCC_OscConfig+0x670>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	4ac3      	ldr	r2, [pc, #780]	; (8003084 <HAL_RCC_OscConfig+0x674>)
 8002d76:	4013      	ands	r3, r2
 8002d78:	0019      	movs	r1, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d7e:	4bc0      	ldr	r3, [pc, #768]	; (8003080 <HAL_RCC_OscConfig+0x670>)
 8002d80:	430a      	orrs	r2, r1
 8002d82:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d84:	4bbe      	ldr	r3, [pc, #760]	; (8003080 <HAL_RCC_OscConfig+0x670>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	021b      	lsls	r3, r3, #8
 8002d8a:	0a19      	lsrs	r1, r3, #8
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	061a      	lsls	r2, r3, #24
 8002d92:	4bbb      	ldr	r3, [pc, #748]	; (8003080 <HAL_RCC_OscConfig+0x670>)
 8002d94:	430a      	orrs	r2, r1
 8002d96:	605a      	str	r2, [r3, #4]
 8002d98:	e019      	b.n	8002dce <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d9a:	4bb9      	ldr	r3, [pc, #740]	; (8003080 <HAL_RCC_OscConfig+0x670>)
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	4bb8      	ldr	r3, [pc, #736]	; (8003080 <HAL_RCC_OscConfig+0x670>)
 8002da0:	49b9      	ldr	r1, [pc, #740]	; (8003088 <HAL_RCC_OscConfig+0x678>)
 8002da2:	400a      	ands	r2, r1
 8002da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da6:	f7ff f86d 	bl	8001e84 <HAL_GetTick>
 8002daa:	0003      	movs	r3, r0
 8002dac:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002db0:	f7ff f868 	bl	8001e84 <HAL_GetTick>
 8002db4:	0002      	movs	r2, r0
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e1ec      	b.n	800319c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002dc2:	4baf      	ldr	r3, [pc, #700]	; (8003080 <HAL_RCC_OscConfig+0x670>)
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	2380      	movs	r3, #128	; 0x80
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4013      	ands	r3, r2
 8002dcc:	d1f0      	bne.n	8002db0 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2208      	movs	r2, #8
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	d036      	beq.n	8002e46 <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	695b      	ldr	r3, [r3, #20]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d019      	beq.n	8002e14 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002de0:	4ba7      	ldr	r3, [pc, #668]	; (8003080 <HAL_RCC_OscConfig+0x670>)
 8002de2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002de4:	4ba6      	ldr	r3, [pc, #664]	; (8003080 <HAL_RCC_OscConfig+0x670>)
 8002de6:	2101      	movs	r1, #1
 8002de8:	430a      	orrs	r2, r1
 8002dea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dec:	f7ff f84a 	bl	8001e84 <HAL_GetTick>
 8002df0:	0003      	movs	r3, r0
 8002df2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002df4:	e008      	b.n	8002e08 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002df6:	f7ff f845 	bl	8001e84 <HAL_GetTick>
 8002dfa:	0002      	movs	r2, r0
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e1c9      	b.n	800319c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e08:	4b9d      	ldr	r3, [pc, #628]	; (8003080 <HAL_RCC_OscConfig+0x670>)
 8002e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e0c:	2202      	movs	r2, #2
 8002e0e:	4013      	ands	r3, r2
 8002e10:	d0f1      	beq.n	8002df6 <HAL_RCC_OscConfig+0x3e6>
 8002e12:	e018      	b.n	8002e46 <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e14:	4b9a      	ldr	r3, [pc, #616]	; (8003080 <HAL_RCC_OscConfig+0x670>)
 8002e16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e18:	4b99      	ldr	r3, [pc, #612]	; (8003080 <HAL_RCC_OscConfig+0x670>)
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	438a      	bics	r2, r1
 8002e1e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e20:	f7ff f830 	bl	8001e84 <HAL_GetTick>
 8002e24:	0003      	movs	r3, r0
 8002e26:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e28:	e008      	b.n	8002e3c <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e2a:	f7ff f82b 	bl	8001e84 <HAL_GetTick>
 8002e2e:	0002      	movs	r2, r0
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e1af      	b.n	800319c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e3c:	4b90      	ldr	r3, [pc, #576]	; (8003080 <HAL_RCC_OscConfig+0x670>)
 8002e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e40:	2202      	movs	r2, #2
 8002e42:	4013      	ands	r3, r2
 8002e44:	d1f1      	bne.n	8002e2a <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2204      	movs	r2, #4
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	d100      	bne.n	8002e52 <HAL_RCC_OscConfig+0x442>
 8002e50:	e0af      	b.n	8002fb2 <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e52:	2323      	movs	r3, #35	; 0x23
 8002e54:	18fb      	adds	r3, r7, r3
 8002e56:	2200      	movs	r2, #0
 8002e58:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e5a:	4b89      	ldr	r3, [pc, #548]	; (8003080 <HAL_RCC_OscConfig+0x670>)
 8002e5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e5e:	2380      	movs	r3, #128	; 0x80
 8002e60:	055b      	lsls	r3, r3, #21
 8002e62:	4013      	ands	r3, r2
 8002e64:	d10a      	bne.n	8002e7c <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e66:	4b86      	ldr	r3, [pc, #536]	; (8003080 <HAL_RCC_OscConfig+0x670>)
 8002e68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e6a:	4b85      	ldr	r3, [pc, #532]	; (8003080 <HAL_RCC_OscConfig+0x670>)
 8002e6c:	2180      	movs	r1, #128	; 0x80
 8002e6e:	0549      	lsls	r1, r1, #21
 8002e70:	430a      	orrs	r2, r1
 8002e72:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002e74:	2323      	movs	r3, #35	; 0x23
 8002e76:	18fb      	adds	r3, r7, r3
 8002e78:	2201      	movs	r2, #1
 8002e7a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7c:	4b83      	ldr	r3, [pc, #524]	; (800308c <HAL_RCC_OscConfig+0x67c>)
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	2380      	movs	r3, #128	; 0x80
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	4013      	ands	r3, r2
 8002e86:	d11a      	bne.n	8002ebe <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e88:	4b80      	ldr	r3, [pc, #512]	; (800308c <HAL_RCC_OscConfig+0x67c>)
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	4b7f      	ldr	r3, [pc, #508]	; (800308c <HAL_RCC_OscConfig+0x67c>)
 8002e8e:	2180      	movs	r1, #128	; 0x80
 8002e90:	0049      	lsls	r1, r1, #1
 8002e92:	430a      	orrs	r2, r1
 8002e94:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e96:	f7fe fff5 	bl	8001e84 <HAL_GetTick>
 8002e9a:	0003      	movs	r3, r0
 8002e9c:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ea0:	f7fe fff0 	bl	8001e84 <HAL_GetTick>
 8002ea4:	0002      	movs	r2, r0
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b64      	cmp	r3, #100	; 0x64
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e174      	b.n	800319c <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb2:	4b76      	ldr	r3, [pc, #472]	; (800308c <HAL_RCC_OscConfig+0x67c>)
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	2380      	movs	r3, #128	; 0x80
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	4013      	ands	r3, r2
 8002ebc:	d0f0      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	689a      	ldr	r2, [r3, #8]
 8002ec2:	2380      	movs	r3, #128	; 0x80
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d107      	bne.n	8002eda <HAL_RCC_OscConfig+0x4ca>
 8002eca:	4b6d      	ldr	r3, [pc, #436]	; (8003080 <HAL_RCC_OscConfig+0x670>)
 8002ecc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ece:	4b6c      	ldr	r3, [pc, #432]	; (8003080 <HAL_RCC_OscConfig+0x670>)
 8002ed0:	2180      	movs	r1, #128	; 0x80
 8002ed2:	0049      	lsls	r1, r1, #1
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	651a      	str	r2, [r3, #80]	; 0x50
 8002ed8:	e031      	b.n	8002f3e <HAL_RCC_OscConfig+0x52e>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10c      	bne.n	8002efc <HAL_RCC_OscConfig+0x4ec>
 8002ee2:	4b67      	ldr	r3, [pc, #412]	; (8003080 <HAL_RCC_OscConfig+0x670>)
 8002ee4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ee6:	4b66      	ldr	r3, [pc, #408]	; (8003080 <HAL_RCC_OscConfig+0x670>)
 8002ee8:	4967      	ldr	r1, [pc, #412]	; (8003088 <HAL_RCC_OscConfig+0x678>)
 8002eea:	400a      	ands	r2, r1
 8002eec:	651a      	str	r2, [r3, #80]	; 0x50
 8002eee:	4b64      	ldr	r3, [pc, #400]	; (8003080 <HAL_RCC_OscConfig+0x670>)
 8002ef0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ef2:	4b63      	ldr	r3, [pc, #396]	; (8003080 <HAL_RCC_OscConfig+0x670>)
 8002ef4:	4966      	ldr	r1, [pc, #408]	; (8003090 <HAL_RCC_OscConfig+0x680>)
 8002ef6:	400a      	ands	r2, r1
 8002ef8:	651a      	str	r2, [r3, #80]	; 0x50
 8002efa:	e020      	b.n	8002f3e <HAL_RCC_OscConfig+0x52e>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689a      	ldr	r2, [r3, #8]
 8002f00:	23a0      	movs	r3, #160	; 0xa0
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d10e      	bne.n	8002f26 <HAL_RCC_OscConfig+0x516>
 8002f08:	4b5d      	ldr	r3, [pc, #372]	; (8003080 <HAL_RCC_OscConfig+0x670>)
 8002f0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f0c:	4b5c      	ldr	r3, [pc, #368]	; (8003080 <HAL_RCC_OscConfig+0x670>)
 8002f0e:	2180      	movs	r1, #128	; 0x80
 8002f10:	00c9      	lsls	r1, r1, #3
 8002f12:	430a      	orrs	r2, r1
 8002f14:	651a      	str	r2, [r3, #80]	; 0x50
 8002f16:	4b5a      	ldr	r3, [pc, #360]	; (8003080 <HAL_RCC_OscConfig+0x670>)
 8002f18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f1a:	4b59      	ldr	r3, [pc, #356]	; (8003080 <HAL_RCC_OscConfig+0x670>)
 8002f1c:	2180      	movs	r1, #128	; 0x80
 8002f1e:	0049      	lsls	r1, r1, #1
 8002f20:	430a      	orrs	r2, r1
 8002f22:	651a      	str	r2, [r3, #80]	; 0x50
 8002f24:	e00b      	b.n	8002f3e <HAL_RCC_OscConfig+0x52e>
 8002f26:	4b56      	ldr	r3, [pc, #344]	; (8003080 <HAL_RCC_OscConfig+0x670>)
 8002f28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f2a:	4b55      	ldr	r3, [pc, #340]	; (8003080 <HAL_RCC_OscConfig+0x670>)
 8002f2c:	4956      	ldr	r1, [pc, #344]	; (8003088 <HAL_RCC_OscConfig+0x678>)
 8002f2e:	400a      	ands	r2, r1
 8002f30:	651a      	str	r2, [r3, #80]	; 0x50
 8002f32:	4b53      	ldr	r3, [pc, #332]	; (8003080 <HAL_RCC_OscConfig+0x670>)
 8002f34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f36:	4b52      	ldr	r3, [pc, #328]	; (8003080 <HAL_RCC_OscConfig+0x670>)
 8002f38:	4955      	ldr	r1, [pc, #340]	; (8003090 <HAL_RCC_OscConfig+0x680>)
 8002f3a:	400a      	ands	r2, r1
 8002f3c:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d015      	beq.n	8002f72 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f46:	f7fe ff9d 	bl	8001e84 <HAL_GetTick>
 8002f4a:	0003      	movs	r3, r0
 8002f4c:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f4e:	e009      	b.n	8002f64 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f50:	f7fe ff98 	bl	8001e84 <HAL_GetTick>
 8002f54:	0002      	movs	r2, r0
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	4a4e      	ldr	r2, [pc, #312]	; (8003094 <HAL_RCC_OscConfig+0x684>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e11b      	b.n	800319c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f64:	4b46      	ldr	r3, [pc, #280]	; (8003080 <HAL_RCC_OscConfig+0x670>)
 8002f66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f68:	2380      	movs	r3, #128	; 0x80
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	d0ef      	beq.n	8002f50 <HAL_RCC_OscConfig+0x540>
 8002f70:	e014      	b.n	8002f9c <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f72:	f7fe ff87 	bl	8001e84 <HAL_GetTick>
 8002f76:	0003      	movs	r3, r0
 8002f78:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f7a:	e009      	b.n	8002f90 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f7c:	f7fe ff82 	bl	8001e84 <HAL_GetTick>
 8002f80:	0002      	movs	r2, r0
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	4a43      	ldr	r2, [pc, #268]	; (8003094 <HAL_RCC_OscConfig+0x684>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e105      	b.n	800319c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f90:	4b3b      	ldr	r3, [pc, #236]	; (8003080 <HAL_RCC_OscConfig+0x670>)
 8002f92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f94:	2380      	movs	r3, #128	; 0x80
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	4013      	ands	r3, r2
 8002f9a:	d1ef      	bne.n	8002f7c <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f9c:	2323      	movs	r3, #35	; 0x23
 8002f9e:	18fb      	adds	r3, r7, r3
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d105      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fa6:	4b36      	ldr	r3, [pc, #216]	; (8003080 <HAL_RCC_OscConfig+0x670>)
 8002fa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002faa:	4b35      	ldr	r3, [pc, #212]	; (8003080 <HAL_RCC_OscConfig+0x670>)
 8002fac:	493a      	ldr	r1, [pc, #232]	; (8003098 <HAL_RCC_OscConfig+0x688>)
 8002fae:	400a      	ands	r2, r1
 8002fb0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	4013      	ands	r3, r2
 8002fba:	d049      	beq.n	8003050 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d026      	beq.n	8003012 <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002fc4:	4b2e      	ldr	r3, [pc, #184]	; (8003080 <HAL_RCC_OscConfig+0x670>)
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	4b2d      	ldr	r3, [pc, #180]	; (8003080 <HAL_RCC_OscConfig+0x670>)
 8002fca:	2101      	movs	r1, #1
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	609a      	str	r2, [r3, #8]
 8002fd0:	4b2b      	ldr	r3, [pc, #172]	; (8003080 <HAL_RCC_OscConfig+0x670>)
 8002fd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fd4:	4b2a      	ldr	r3, [pc, #168]	; (8003080 <HAL_RCC_OscConfig+0x670>)
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	635a      	str	r2, [r3, #52]	; 0x34
 8002fdc:	4b2f      	ldr	r3, [pc, #188]	; (800309c <HAL_RCC_OscConfig+0x68c>)
 8002fde:	6a1a      	ldr	r2, [r3, #32]
 8002fe0:	4b2e      	ldr	r3, [pc, #184]	; (800309c <HAL_RCC_OscConfig+0x68c>)
 8002fe2:	2180      	movs	r1, #128	; 0x80
 8002fe4:	0189      	lsls	r1, r1, #6
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fea:	f7fe ff4b 	bl	8001e84 <HAL_GetTick>
 8002fee:	0003      	movs	r3, r0
 8002ff0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ff4:	f7fe ff46 	bl	8001e84 <HAL_GetTick>
 8002ff8:	0002      	movs	r2, r0
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e0ca      	b.n	800319c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003006:	4b1e      	ldr	r3, [pc, #120]	; (8003080 <HAL_RCC_OscConfig+0x670>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	2202      	movs	r2, #2
 800300c:	4013      	ands	r3, r2
 800300e:	d0f1      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x5e4>
 8003010:	e01e      	b.n	8003050 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003012:	4b1b      	ldr	r3, [pc, #108]	; (8003080 <HAL_RCC_OscConfig+0x670>)
 8003014:	689a      	ldr	r2, [r3, #8]
 8003016:	4b1a      	ldr	r3, [pc, #104]	; (8003080 <HAL_RCC_OscConfig+0x670>)
 8003018:	2101      	movs	r1, #1
 800301a:	438a      	bics	r2, r1
 800301c:	609a      	str	r2, [r3, #8]
 800301e:	4b1f      	ldr	r3, [pc, #124]	; (800309c <HAL_RCC_OscConfig+0x68c>)
 8003020:	6a1a      	ldr	r2, [r3, #32]
 8003022:	4b1e      	ldr	r3, [pc, #120]	; (800309c <HAL_RCC_OscConfig+0x68c>)
 8003024:	491e      	ldr	r1, [pc, #120]	; (80030a0 <HAL_RCC_OscConfig+0x690>)
 8003026:	400a      	ands	r2, r1
 8003028:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800302a:	f7fe ff2b 	bl	8001e84 <HAL_GetTick>
 800302e:	0003      	movs	r3, r0
 8003030:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003034:	f7fe ff26 	bl	8001e84 <HAL_GetTick>
 8003038:	0002      	movs	r2, r0
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e0aa      	b.n	800319c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003046:	4b0e      	ldr	r3, [pc, #56]	; (8003080 <HAL_RCC_OscConfig+0x670>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	2202      	movs	r2, #2
 800304c:	4013      	ands	r3, r2
 800304e:	d1f1      	bne.n	8003034 <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003054:	2b00      	cmp	r3, #0
 8003056:	d100      	bne.n	800305a <HAL_RCC_OscConfig+0x64a>
 8003058:	e09f      	b.n	800319a <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	2b0c      	cmp	r3, #12
 800305e:	d100      	bne.n	8003062 <HAL_RCC_OscConfig+0x652>
 8003060:	e078      	b.n	8003154 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003066:	2b02      	cmp	r3, #2
 8003068:	d159      	bne.n	800311e <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800306a:	4b05      	ldr	r3, [pc, #20]	; (8003080 <HAL_RCC_OscConfig+0x670>)
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	4b04      	ldr	r3, [pc, #16]	; (8003080 <HAL_RCC_OscConfig+0x670>)
 8003070:	490c      	ldr	r1, [pc, #48]	; (80030a4 <HAL_RCC_OscConfig+0x694>)
 8003072:	400a      	ands	r2, r1
 8003074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003076:	f7fe ff05 	bl	8001e84 <HAL_GetTick>
 800307a:	0003      	movs	r3, r0
 800307c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800307e:	e01c      	b.n	80030ba <HAL_RCC_OscConfig+0x6aa>
 8003080:	40021000 	.word	0x40021000
 8003084:	ffff1fff 	.word	0xffff1fff
 8003088:	fffffeff 	.word	0xfffffeff
 800308c:	40007000 	.word	0x40007000
 8003090:	fffffbff 	.word	0xfffffbff
 8003094:	00001388 	.word	0x00001388
 8003098:	efffffff 	.word	0xefffffff
 800309c:	40010000 	.word	0x40010000
 80030a0:	ffffdfff 	.word	0xffffdfff
 80030a4:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030a8:	f7fe feec 	bl	8001e84 <HAL_GetTick>
 80030ac:	0002      	movs	r2, r0
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e070      	b.n	800319c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80030ba:	4b3a      	ldr	r3, [pc, #232]	; (80031a4 <HAL_RCC_OscConfig+0x794>)
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	2380      	movs	r3, #128	; 0x80
 80030c0:	049b      	lsls	r3, r3, #18
 80030c2:	4013      	ands	r3, r2
 80030c4:	d1f0      	bne.n	80030a8 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030c6:	4b37      	ldr	r3, [pc, #220]	; (80031a4 <HAL_RCC_OscConfig+0x794>)
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	4a37      	ldr	r2, [pc, #220]	; (80031a8 <HAL_RCC_OscConfig+0x798>)
 80030cc:	4013      	ands	r3, r2
 80030ce:	0019      	movs	r1, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d8:	431a      	orrs	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030de:	431a      	orrs	r2, r3
 80030e0:	4b30      	ldr	r3, [pc, #192]	; (80031a4 <HAL_RCC_OscConfig+0x794>)
 80030e2:	430a      	orrs	r2, r1
 80030e4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030e6:	4b2f      	ldr	r3, [pc, #188]	; (80031a4 <HAL_RCC_OscConfig+0x794>)
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	4b2e      	ldr	r3, [pc, #184]	; (80031a4 <HAL_RCC_OscConfig+0x794>)
 80030ec:	2180      	movs	r1, #128	; 0x80
 80030ee:	0449      	lsls	r1, r1, #17
 80030f0:	430a      	orrs	r2, r1
 80030f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f4:	f7fe fec6 	bl	8001e84 <HAL_GetTick>
 80030f8:	0003      	movs	r3, r0
 80030fa:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80030fc:	e008      	b.n	8003110 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030fe:	f7fe fec1 	bl	8001e84 <HAL_GetTick>
 8003102:	0002      	movs	r2, r0
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e045      	b.n	800319c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003110:	4b24      	ldr	r3, [pc, #144]	; (80031a4 <HAL_RCC_OscConfig+0x794>)
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	2380      	movs	r3, #128	; 0x80
 8003116:	049b      	lsls	r3, r3, #18
 8003118:	4013      	ands	r3, r2
 800311a:	d0f0      	beq.n	80030fe <HAL_RCC_OscConfig+0x6ee>
 800311c:	e03d      	b.n	800319a <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800311e:	4b21      	ldr	r3, [pc, #132]	; (80031a4 <HAL_RCC_OscConfig+0x794>)
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	4b20      	ldr	r3, [pc, #128]	; (80031a4 <HAL_RCC_OscConfig+0x794>)
 8003124:	4921      	ldr	r1, [pc, #132]	; (80031ac <HAL_RCC_OscConfig+0x79c>)
 8003126:	400a      	ands	r2, r1
 8003128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312a:	f7fe feab 	bl	8001e84 <HAL_GetTick>
 800312e:	0003      	movs	r3, r0
 8003130:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003132:	e008      	b.n	8003146 <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003134:	f7fe fea6 	bl	8001e84 <HAL_GetTick>
 8003138:	0002      	movs	r2, r0
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e02a      	b.n	800319c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003146:	4b17      	ldr	r3, [pc, #92]	; (80031a4 <HAL_RCC_OscConfig+0x794>)
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	2380      	movs	r3, #128	; 0x80
 800314c:	049b      	lsls	r3, r3, #18
 800314e:	4013      	ands	r3, r2
 8003150:	d1f0      	bne.n	8003134 <HAL_RCC_OscConfig+0x724>
 8003152:	e022      	b.n	800319a <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003158:	2b01      	cmp	r3, #1
 800315a:	d101      	bne.n	8003160 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e01d      	b.n	800319c <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003160:	4b10      	ldr	r3, [pc, #64]	; (80031a4 <HAL_RCC_OscConfig+0x794>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	2380      	movs	r3, #128	; 0x80
 800316a:	025b      	lsls	r3, r3, #9
 800316c:	401a      	ands	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003172:	429a      	cmp	r2, r3
 8003174:	d10f      	bne.n	8003196 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	23f0      	movs	r3, #240	; 0xf0
 800317a:	039b      	lsls	r3, r3, #14
 800317c:	401a      	ands	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003182:	429a      	cmp	r2, r3
 8003184:	d107      	bne.n	8003196 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	23c0      	movs	r3, #192	; 0xc0
 800318a:	041b      	lsls	r3, r3, #16
 800318c:	401a      	ands	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003192:	429a      	cmp	r2, r3
 8003194:	d001      	beq.n	800319a <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e000      	b.n	800319c <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	0018      	movs	r0, r3
 800319e:	46bd      	mov	sp, r7
 80031a0:	b00a      	add	sp, #40	; 0x28
 80031a2:	bdb0      	pop	{r4, r5, r7, pc}
 80031a4:	40021000 	.word	0x40021000
 80031a8:	ff02ffff 	.word	0xff02ffff
 80031ac:	feffffff 	.word	0xfeffffff

080031b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031b0:	b5b0      	push	{r4, r5, r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d101      	bne.n	80031c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e10d      	b.n	80033e0 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031c4:	4b88      	ldr	r3, [pc, #544]	; (80033e8 <HAL_RCC_ClockConfig+0x238>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2201      	movs	r2, #1
 80031ca:	4013      	ands	r3, r2
 80031cc:	683a      	ldr	r2, [r7, #0]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d911      	bls.n	80031f6 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031d2:	4b85      	ldr	r3, [pc, #532]	; (80033e8 <HAL_RCC_ClockConfig+0x238>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2201      	movs	r2, #1
 80031d8:	4393      	bics	r3, r2
 80031da:	0019      	movs	r1, r3
 80031dc:	4b82      	ldr	r3, [pc, #520]	; (80033e8 <HAL_RCC_ClockConfig+0x238>)
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031e4:	4b80      	ldr	r3, [pc, #512]	; (80033e8 <HAL_RCC_ClockConfig+0x238>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2201      	movs	r2, #1
 80031ea:	4013      	ands	r3, r2
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d001      	beq.n	80031f6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e0f4      	b.n	80033e0 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2202      	movs	r2, #2
 80031fc:	4013      	ands	r3, r2
 80031fe:	d009      	beq.n	8003214 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003200:	4b7a      	ldr	r3, [pc, #488]	; (80033ec <HAL_RCC_ClockConfig+0x23c>)
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	22f0      	movs	r2, #240	; 0xf0
 8003206:	4393      	bics	r3, r2
 8003208:	0019      	movs	r1, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689a      	ldr	r2, [r3, #8]
 800320e:	4b77      	ldr	r3, [pc, #476]	; (80033ec <HAL_RCC_ClockConfig+0x23c>)
 8003210:	430a      	orrs	r2, r1
 8003212:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2201      	movs	r2, #1
 800321a:	4013      	ands	r3, r2
 800321c:	d100      	bne.n	8003220 <HAL_RCC_ClockConfig+0x70>
 800321e:	e089      	b.n	8003334 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	2b02      	cmp	r3, #2
 8003226:	d107      	bne.n	8003238 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003228:	4b70      	ldr	r3, [pc, #448]	; (80033ec <HAL_RCC_ClockConfig+0x23c>)
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	2380      	movs	r3, #128	; 0x80
 800322e:	029b      	lsls	r3, r3, #10
 8003230:	4013      	ands	r3, r2
 8003232:	d120      	bne.n	8003276 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e0d3      	b.n	80033e0 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	2b03      	cmp	r3, #3
 800323e:	d107      	bne.n	8003250 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003240:	4b6a      	ldr	r3, [pc, #424]	; (80033ec <HAL_RCC_ClockConfig+0x23c>)
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	2380      	movs	r3, #128	; 0x80
 8003246:	049b      	lsls	r3, r3, #18
 8003248:	4013      	ands	r3, r2
 800324a:	d114      	bne.n	8003276 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e0c7      	b.n	80033e0 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d106      	bne.n	8003266 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003258:	4b64      	ldr	r3, [pc, #400]	; (80033ec <HAL_RCC_ClockConfig+0x23c>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2204      	movs	r2, #4
 800325e:	4013      	ands	r3, r2
 8003260:	d109      	bne.n	8003276 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e0bc      	b.n	80033e0 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003266:	4b61      	ldr	r3, [pc, #388]	; (80033ec <HAL_RCC_ClockConfig+0x23c>)
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	2380      	movs	r3, #128	; 0x80
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4013      	ands	r3, r2
 8003270:	d101      	bne.n	8003276 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e0b4      	b.n	80033e0 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003276:	4b5d      	ldr	r3, [pc, #372]	; (80033ec <HAL_RCC_ClockConfig+0x23c>)
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	2203      	movs	r2, #3
 800327c:	4393      	bics	r3, r2
 800327e:	0019      	movs	r1, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	4b59      	ldr	r3, [pc, #356]	; (80033ec <HAL_RCC_ClockConfig+0x23c>)
 8003286:	430a      	orrs	r2, r1
 8003288:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800328a:	f7fe fdfb 	bl	8001e84 <HAL_GetTick>
 800328e:	0003      	movs	r3, r0
 8003290:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	2b02      	cmp	r3, #2
 8003298:	d111      	bne.n	80032be <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800329a:	e009      	b.n	80032b0 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800329c:	f7fe fdf2 	bl	8001e84 <HAL_GetTick>
 80032a0:	0002      	movs	r2, r0
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	4a52      	ldr	r2, [pc, #328]	; (80033f0 <HAL_RCC_ClockConfig+0x240>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d901      	bls.n	80032b0 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e097      	b.n	80033e0 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80032b0:	4b4e      	ldr	r3, [pc, #312]	; (80033ec <HAL_RCC_ClockConfig+0x23c>)
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	220c      	movs	r2, #12
 80032b6:	4013      	ands	r3, r2
 80032b8:	2b08      	cmp	r3, #8
 80032ba:	d1ef      	bne.n	800329c <HAL_RCC_ClockConfig+0xec>
 80032bc:	e03a      	b.n	8003334 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	2b03      	cmp	r3, #3
 80032c4:	d111      	bne.n	80032ea <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032c6:	e009      	b.n	80032dc <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032c8:	f7fe fddc 	bl	8001e84 <HAL_GetTick>
 80032cc:	0002      	movs	r2, r0
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	4a47      	ldr	r2, [pc, #284]	; (80033f0 <HAL_RCC_ClockConfig+0x240>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e081      	b.n	80033e0 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032dc:	4b43      	ldr	r3, [pc, #268]	; (80033ec <HAL_RCC_ClockConfig+0x23c>)
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	220c      	movs	r2, #12
 80032e2:	4013      	ands	r3, r2
 80032e4:	2b0c      	cmp	r3, #12
 80032e6:	d1ef      	bne.n	80032c8 <HAL_RCC_ClockConfig+0x118>
 80032e8:	e024      	b.n	8003334 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d11b      	bne.n	800332a <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80032f2:	e009      	b.n	8003308 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032f4:	f7fe fdc6 	bl	8001e84 <HAL_GetTick>
 80032f8:	0002      	movs	r2, r0
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	4a3c      	ldr	r2, [pc, #240]	; (80033f0 <HAL_RCC_ClockConfig+0x240>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e06b      	b.n	80033e0 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003308:	4b38      	ldr	r3, [pc, #224]	; (80033ec <HAL_RCC_ClockConfig+0x23c>)
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	220c      	movs	r2, #12
 800330e:	4013      	ands	r3, r2
 8003310:	2b04      	cmp	r3, #4
 8003312:	d1ef      	bne.n	80032f4 <HAL_RCC_ClockConfig+0x144>
 8003314:	e00e      	b.n	8003334 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003316:	f7fe fdb5 	bl	8001e84 <HAL_GetTick>
 800331a:	0002      	movs	r2, r0
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	4a33      	ldr	r2, [pc, #204]	; (80033f0 <HAL_RCC_ClockConfig+0x240>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d901      	bls.n	800332a <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e05a      	b.n	80033e0 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800332a:	4b30      	ldr	r3, [pc, #192]	; (80033ec <HAL_RCC_ClockConfig+0x23c>)
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	220c      	movs	r2, #12
 8003330:	4013      	ands	r3, r2
 8003332:	d1f0      	bne.n	8003316 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003334:	4b2c      	ldr	r3, [pc, #176]	; (80033e8 <HAL_RCC_ClockConfig+0x238>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2201      	movs	r2, #1
 800333a:	4013      	ands	r3, r2
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	429a      	cmp	r2, r3
 8003340:	d211      	bcs.n	8003366 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003342:	4b29      	ldr	r3, [pc, #164]	; (80033e8 <HAL_RCC_ClockConfig+0x238>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2201      	movs	r2, #1
 8003348:	4393      	bics	r3, r2
 800334a:	0019      	movs	r1, r3
 800334c:	4b26      	ldr	r3, [pc, #152]	; (80033e8 <HAL_RCC_ClockConfig+0x238>)
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	430a      	orrs	r2, r1
 8003352:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003354:	4b24      	ldr	r3, [pc, #144]	; (80033e8 <HAL_RCC_ClockConfig+0x238>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2201      	movs	r2, #1
 800335a:	4013      	ands	r3, r2
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	429a      	cmp	r2, r3
 8003360:	d001      	beq.n	8003366 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e03c      	b.n	80033e0 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2204      	movs	r2, #4
 800336c:	4013      	ands	r3, r2
 800336e:	d009      	beq.n	8003384 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003370:	4b1e      	ldr	r3, [pc, #120]	; (80033ec <HAL_RCC_ClockConfig+0x23c>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	4a1f      	ldr	r2, [pc, #124]	; (80033f4 <HAL_RCC_ClockConfig+0x244>)
 8003376:	4013      	ands	r3, r2
 8003378:	0019      	movs	r1, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68da      	ldr	r2, [r3, #12]
 800337e:	4b1b      	ldr	r3, [pc, #108]	; (80033ec <HAL_RCC_ClockConfig+0x23c>)
 8003380:	430a      	orrs	r2, r1
 8003382:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2208      	movs	r2, #8
 800338a:	4013      	ands	r3, r2
 800338c:	d00a      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800338e:	4b17      	ldr	r3, [pc, #92]	; (80033ec <HAL_RCC_ClockConfig+0x23c>)
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	4a19      	ldr	r2, [pc, #100]	; (80033f8 <HAL_RCC_ClockConfig+0x248>)
 8003394:	4013      	ands	r3, r2
 8003396:	0019      	movs	r1, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	00da      	lsls	r2, r3, #3
 800339e:	4b13      	ldr	r3, [pc, #76]	; (80033ec <HAL_RCC_ClockConfig+0x23c>)
 80033a0:	430a      	orrs	r2, r1
 80033a2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033a4:	f000 f82e 	bl	8003404 <HAL_RCC_GetSysClockFreq>
 80033a8:	0001      	movs	r1, r0
 80033aa:	4b10      	ldr	r3, [pc, #64]	; (80033ec <HAL_RCC_ClockConfig+0x23c>)
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	091b      	lsrs	r3, r3, #4
 80033b0:	220f      	movs	r2, #15
 80033b2:	4013      	ands	r3, r2
 80033b4:	4a11      	ldr	r2, [pc, #68]	; (80033fc <HAL_RCC_ClockConfig+0x24c>)
 80033b6:	5cd3      	ldrb	r3, [r2, r3]
 80033b8:	000a      	movs	r2, r1
 80033ba:	40da      	lsrs	r2, r3
 80033bc:	4b10      	ldr	r3, [pc, #64]	; (8003400 <HAL_RCC_ClockConfig+0x250>)
 80033be:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 80033c0:	250b      	movs	r5, #11
 80033c2:	197c      	adds	r4, r7, r5
 80033c4:	2000      	movs	r0, #0
 80033c6:	f7fe fd27 	bl	8001e18 <HAL_InitTick>
 80033ca:	0003      	movs	r3, r0
 80033cc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80033ce:	197b      	adds	r3, r7, r5
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d003      	beq.n	80033de <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 80033d6:	230b      	movs	r3, #11
 80033d8:	18fb      	adds	r3, r7, r3
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	e000      	b.n	80033e0 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	0018      	movs	r0, r3
 80033e2:	46bd      	mov	sp, r7
 80033e4:	b004      	add	sp, #16
 80033e6:	bdb0      	pop	{r4, r5, r7, pc}
 80033e8:	40022000 	.word	0x40022000
 80033ec:	40021000 	.word	0x40021000
 80033f0:	00001388 	.word	0x00001388
 80033f4:	fffff8ff 	.word	0xfffff8ff
 80033f8:	ffffc7ff 	.word	0xffffc7ff
 80033fc:	08005e8c 	.word	0x08005e8c
 8003400:	20000000 	.word	0x20000000

08003404 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800340a:	4b3b      	ldr	r3, [pc, #236]	; (80034f8 <HAL_RCC_GetSysClockFreq+0xf4>)
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	220c      	movs	r2, #12
 8003414:	4013      	ands	r3, r2
 8003416:	2b08      	cmp	r3, #8
 8003418:	d00e      	beq.n	8003438 <HAL_RCC_GetSysClockFreq+0x34>
 800341a:	2b0c      	cmp	r3, #12
 800341c:	d00f      	beq.n	800343e <HAL_RCC_GetSysClockFreq+0x3a>
 800341e:	2b04      	cmp	r3, #4
 8003420:	d157      	bne.n	80034d2 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003422:	4b35      	ldr	r3, [pc, #212]	; (80034f8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2210      	movs	r2, #16
 8003428:	4013      	ands	r3, r2
 800342a:	d002      	beq.n	8003432 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800342c:	4b33      	ldr	r3, [pc, #204]	; (80034fc <HAL_RCC_GetSysClockFreq+0xf8>)
 800342e:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003430:	e05d      	b.n	80034ee <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8003432:	4b33      	ldr	r3, [pc, #204]	; (8003500 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003434:	613b      	str	r3, [r7, #16]
      break;
 8003436:	e05a      	b.n	80034ee <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003438:	4b32      	ldr	r3, [pc, #200]	; (8003504 <HAL_RCC_GetSysClockFreq+0x100>)
 800343a:	613b      	str	r3, [r7, #16]
      break;
 800343c:	e057      	b.n	80034ee <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	0c9b      	lsrs	r3, r3, #18
 8003442:	220f      	movs	r2, #15
 8003444:	4013      	ands	r3, r2
 8003446:	4a30      	ldr	r2, [pc, #192]	; (8003508 <HAL_RCC_GetSysClockFreq+0x104>)
 8003448:	5cd3      	ldrb	r3, [r2, r3]
 800344a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	0d9b      	lsrs	r3, r3, #22
 8003450:	2203      	movs	r2, #3
 8003452:	4013      	ands	r3, r2
 8003454:	3301      	adds	r3, #1
 8003456:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003458:	4b27      	ldr	r3, [pc, #156]	; (80034f8 <HAL_RCC_GetSysClockFreq+0xf4>)
 800345a:	68da      	ldr	r2, [r3, #12]
 800345c:	2380      	movs	r3, #128	; 0x80
 800345e:	025b      	lsls	r3, r3, #9
 8003460:	4013      	ands	r3, r2
 8003462:	d00f      	beq.n	8003484 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8003464:	68b9      	ldr	r1, [r7, #8]
 8003466:	000a      	movs	r2, r1
 8003468:	0152      	lsls	r2, r2, #5
 800346a:	1a52      	subs	r2, r2, r1
 800346c:	0193      	lsls	r3, r2, #6
 800346e:	1a9b      	subs	r3, r3, r2
 8003470:	00db      	lsls	r3, r3, #3
 8003472:	185b      	adds	r3, r3, r1
 8003474:	025b      	lsls	r3, r3, #9
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	0018      	movs	r0, r3
 800347a:	f7fc fe45 	bl	8000108 <__udivsi3>
 800347e:	0003      	movs	r3, r0
 8003480:	617b      	str	r3, [r7, #20]
 8003482:	e023      	b.n	80034cc <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003484:	4b1c      	ldr	r3, [pc, #112]	; (80034f8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2210      	movs	r2, #16
 800348a:	4013      	ands	r3, r2
 800348c:	d00f      	beq.n	80034ae <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 800348e:	68b9      	ldr	r1, [r7, #8]
 8003490:	000a      	movs	r2, r1
 8003492:	0152      	lsls	r2, r2, #5
 8003494:	1a52      	subs	r2, r2, r1
 8003496:	0193      	lsls	r3, r2, #6
 8003498:	1a9b      	subs	r3, r3, r2
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	185b      	adds	r3, r3, r1
 800349e:	021b      	lsls	r3, r3, #8
 80034a0:	6879      	ldr	r1, [r7, #4]
 80034a2:	0018      	movs	r0, r3
 80034a4:	f7fc fe30 	bl	8000108 <__udivsi3>
 80034a8:	0003      	movs	r3, r0
 80034aa:	617b      	str	r3, [r7, #20]
 80034ac:	e00e      	b.n	80034cc <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 80034ae:	68b9      	ldr	r1, [r7, #8]
 80034b0:	000a      	movs	r2, r1
 80034b2:	0152      	lsls	r2, r2, #5
 80034b4:	1a52      	subs	r2, r2, r1
 80034b6:	0193      	lsls	r3, r2, #6
 80034b8:	1a9b      	subs	r3, r3, r2
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	185b      	adds	r3, r3, r1
 80034be:	029b      	lsls	r3, r3, #10
 80034c0:	6879      	ldr	r1, [r7, #4]
 80034c2:	0018      	movs	r0, r3
 80034c4:	f7fc fe20 	bl	8000108 <__udivsi3>
 80034c8:	0003      	movs	r3, r0
 80034ca:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	613b      	str	r3, [r7, #16]
      break;
 80034d0:	e00d      	b.n	80034ee <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80034d2:	4b09      	ldr	r3, [pc, #36]	; (80034f8 <HAL_RCC_GetSysClockFreq+0xf4>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	0b5b      	lsrs	r3, r3, #13
 80034d8:	2207      	movs	r2, #7
 80034da:	4013      	ands	r3, r2
 80034dc:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	3301      	adds	r3, #1
 80034e2:	2280      	movs	r2, #128	; 0x80
 80034e4:	0212      	lsls	r2, r2, #8
 80034e6:	409a      	lsls	r2, r3
 80034e8:	0013      	movs	r3, r2
 80034ea:	613b      	str	r3, [r7, #16]
      break;
 80034ec:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80034ee:	693b      	ldr	r3, [r7, #16]
}
 80034f0:	0018      	movs	r0, r3
 80034f2:	46bd      	mov	sp, r7
 80034f4:	b006      	add	sp, #24
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40021000 	.word	0x40021000
 80034fc:	003d0900 	.word	0x003d0900
 8003500:	00f42400 	.word	0x00f42400
 8003504:	007a1200 	.word	0x007a1200
 8003508:	08005e9c 	.word	0x08005e9c

0800350c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2220      	movs	r2, #32
 800351a:	4013      	ands	r3, r2
 800351c:	d106      	bne.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	2380      	movs	r3, #128	; 0x80
 8003524:	011b      	lsls	r3, r3, #4
 8003526:	4013      	ands	r3, r2
 8003528:	d100      	bne.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x20>
 800352a:	e0dd      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 800352c:	2317      	movs	r3, #23
 800352e:	18fb      	adds	r3, r7, r3
 8003530:	2200      	movs	r2, #0
 8003532:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003534:	4ba4      	ldr	r3, [pc, #656]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003536:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003538:	2380      	movs	r3, #128	; 0x80
 800353a:	055b      	lsls	r3, r3, #21
 800353c:	4013      	ands	r3, r2
 800353e:	d10a      	bne.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003540:	4ba1      	ldr	r3, [pc, #644]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003542:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003544:	4ba0      	ldr	r3, [pc, #640]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003546:	2180      	movs	r1, #128	; 0x80
 8003548:	0549      	lsls	r1, r1, #21
 800354a:	430a      	orrs	r2, r1
 800354c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800354e:	2317      	movs	r3, #23
 8003550:	18fb      	adds	r3, r7, r3
 8003552:	2201      	movs	r2, #1
 8003554:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003556:	4b9d      	ldr	r3, [pc, #628]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	2380      	movs	r3, #128	; 0x80
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	4013      	ands	r3, r2
 8003560:	d11a      	bne.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003562:	4b9a      	ldr	r3, [pc, #616]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	4b99      	ldr	r3, [pc, #612]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003568:	2180      	movs	r1, #128	; 0x80
 800356a:	0049      	lsls	r1, r1, #1
 800356c:	430a      	orrs	r2, r1
 800356e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003570:	f7fe fc88 	bl	8001e84 <HAL_GetTick>
 8003574:	0003      	movs	r3, r0
 8003576:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003578:	e008      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800357a:	f7fe fc83 	bl	8001e84 <HAL_GetTick>
 800357e:	0002      	movs	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b64      	cmp	r3, #100	; 0x64
 8003586:	d901      	bls.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e118      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800358c:	4b8f      	ldr	r3, [pc, #572]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	2380      	movs	r3, #128	; 0x80
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	4013      	ands	r3, r2
 8003596:	d0f0      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003598:	4b8b      	ldr	r3, [pc, #556]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	23c0      	movs	r3, #192	; 0xc0
 800359e:	039b      	lsls	r3, r3, #14
 80035a0:	4013      	ands	r3, r2
 80035a2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685a      	ldr	r2, [r3, #4]
 80035a8:	23c0      	movs	r3, #192	; 0xc0
 80035aa:	039b      	lsls	r3, r3, #14
 80035ac:	4013      	ands	r3, r2
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d107      	bne.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	23c0      	movs	r3, #192	; 0xc0
 80035ba:	039b      	lsls	r3, r3, #14
 80035bc:	4013      	ands	r3, r2
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d013      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685a      	ldr	r2, [r3, #4]
 80035c8:	23c0      	movs	r3, #192	; 0xc0
 80035ca:	029b      	lsls	r3, r3, #10
 80035cc:	401a      	ands	r2, r3
 80035ce:	23c0      	movs	r3, #192	; 0xc0
 80035d0:	029b      	lsls	r3, r3, #10
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d10a      	bne.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80035d6:	4b7c      	ldr	r3, [pc, #496]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	2380      	movs	r3, #128	; 0x80
 80035dc:	029b      	lsls	r3, r3, #10
 80035de:	401a      	ands	r2, r3
 80035e0:	2380      	movs	r3, #128	; 0x80
 80035e2:	029b      	lsls	r3, r3, #10
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d101      	bne.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e0e8      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80035ec:	4b76      	ldr	r3, [pc, #472]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80035ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035f0:	23c0      	movs	r3, #192	; 0xc0
 80035f2:	029b      	lsls	r3, r3, #10
 80035f4:	4013      	ands	r3, r2
 80035f6:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d049      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685a      	ldr	r2, [r3, #4]
 8003602:	23c0      	movs	r3, #192	; 0xc0
 8003604:	029b      	lsls	r3, r3, #10
 8003606:	4013      	ands	r3, r2
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	429a      	cmp	r2, r3
 800360c:	d004      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2220      	movs	r2, #32
 8003614:	4013      	ands	r3, r2
 8003616:	d10d      	bne.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	23c0      	movs	r3, #192	; 0xc0
 800361e:	029b      	lsls	r3, r3, #10
 8003620:	4013      	ands	r3, r2
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	429a      	cmp	r2, r3
 8003626:	d034      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	2380      	movs	r3, #128	; 0x80
 800362e:	011b      	lsls	r3, r3, #4
 8003630:	4013      	ands	r3, r2
 8003632:	d02e      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003634:	4b64      	ldr	r3, [pc, #400]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003638:	4a65      	ldr	r2, [pc, #404]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800363a:	4013      	ands	r3, r2
 800363c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800363e:	4b62      	ldr	r3, [pc, #392]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003640:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003642:	4b61      	ldr	r3, [pc, #388]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003644:	2180      	movs	r1, #128	; 0x80
 8003646:	0309      	lsls	r1, r1, #12
 8003648:	430a      	orrs	r2, r1
 800364a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800364c:	4b5e      	ldr	r3, [pc, #376]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800364e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003650:	4b5d      	ldr	r3, [pc, #372]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003652:	4960      	ldr	r1, [pc, #384]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003654:	400a      	ands	r2, r1
 8003656:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003658:	4b5b      	ldr	r3, [pc, #364]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	2380      	movs	r3, #128	; 0x80
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	4013      	ands	r3, r2
 8003666:	d014      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003668:	f7fe fc0c 	bl	8001e84 <HAL_GetTick>
 800366c:	0003      	movs	r3, r0
 800366e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003670:	e009      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003672:	f7fe fc07 	bl	8001e84 <HAL_GetTick>
 8003676:	0002      	movs	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	4a56      	ldr	r2, [pc, #344]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d901      	bls.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e09b      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003686:	4b50      	ldr	r3, [pc, #320]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003688:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800368a:	2380      	movs	r3, #128	; 0x80
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4013      	ands	r3, r2
 8003690:	d0ef      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685a      	ldr	r2, [r3, #4]
 8003696:	23c0      	movs	r3, #192	; 0xc0
 8003698:	029b      	lsls	r3, r3, #10
 800369a:	401a      	ands	r2, r3
 800369c:	23c0      	movs	r3, #192	; 0xc0
 800369e:	029b      	lsls	r3, r3, #10
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d10c      	bne.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80036a4:	4b48      	ldr	r3, [pc, #288]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a4c      	ldr	r2, [pc, #304]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80036aa:	4013      	ands	r3, r2
 80036ac:	0019      	movs	r1, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	23c0      	movs	r3, #192	; 0xc0
 80036b4:	039b      	lsls	r3, r3, #14
 80036b6:	401a      	ands	r2, r3
 80036b8:	4b43      	ldr	r3, [pc, #268]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80036ba:	430a      	orrs	r2, r1
 80036bc:	601a      	str	r2, [r3, #0]
 80036be:	4b42      	ldr	r3, [pc, #264]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80036c0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685a      	ldr	r2, [r3, #4]
 80036c6:	23c0      	movs	r3, #192	; 0xc0
 80036c8:	029b      	lsls	r3, r3, #10
 80036ca:	401a      	ands	r2, r3
 80036cc:	4b3e      	ldr	r3, [pc, #248]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80036ce:	430a      	orrs	r2, r1
 80036d0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036d2:	2317      	movs	r3, #23
 80036d4:	18fb      	adds	r3, r7, r3
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d105      	bne.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036dc:	4b3a      	ldr	r3, [pc, #232]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80036de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036e0:	4b39      	ldr	r3, [pc, #228]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80036e2:	493f      	ldr	r1, [pc, #252]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036e4:	400a      	ands	r2, r1
 80036e6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2201      	movs	r2, #1
 80036ee:	4013      	ands	r3, r2
 80036f0:	d009      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036f2:	4b35      	ldr	r3, [pc, #212]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80036f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036f6:	2203      	movs	r2, #3
 80036f8:	4393      	bics	r3, r2
 80036fa:	0019      	movs	r1, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68da      	ldr	r2, [r3, #12]
 8003700:	4b31      	ldr	r3, [pc, #196]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003702:	430a      	orrs	r2, r1
 8003704:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2202      	movs	r2, #2
 800370c:	4013      	ands	r3, r2
 800370e:	d009      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003710:	4b2d      	ldr	r3, [pc, #180]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003714:	220c      	movs	r2, #12
 8003716:	4393      	bics	r3, r2
 8003718:	0019      	movs	r1, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	691a      	ldr	r2, [r3, #16]
 800371e:	4b2a      	ldr	r3, [pc, #168]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003720:	430a      	orrs	r2, r1
 8003722:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2204      	movs	r2, #4
 800372a:	4013      	ands	r3, r2
 800372c:	d009      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800372e:	4b26      	ldr	r3, [pc, #152]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003732:	4a2c      	ldr	r2, [pc, #176]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003734:	4013      	ands	r3, r2
 8003736:	0019      	movs	r1, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	695a      	ldr	r2, [r3, #20]
 800373c:	4b22      	ldr	r3, [pc, #136]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800373e:	430a      	orrs	r2, r1
 8003740:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2208      	movs	r2, #8
 8003748:	4013      	ands	r3, r2
 800374a:	d009      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800374c:	4b1e      	ldr	r3, [pc, #120]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800374e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003750:	4a25      	ldr	r2, [pc, #148]	; (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003752:	4013      	ands	r3, r2
 8003754:	0019      	movs	r1, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	699a      	ldr	r2, [r3, #24]
 800375a:	4b1b      	ldr	r3, [pc, #108]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800375c:	430a      	orrs	r2, r1
 800375e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	2380      	movs	r3, #128	; 0x80
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	4013      	ands	r3, r2
 800376a:	d009      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800376c:	4b16      	ldr	r3, [pc, #88]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800376e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003770:	4a17      	ldr	r2, [pc, #92]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003772:	4013      	ands	r3, r2
 8003774:	0019      	movs	r1, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	69da      	ldr	r2, [r3, #28]
 800377a:	4b13      	ldr	r3, [pc, #76]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800377c:	430a      	orrs	r2, r1
 800377e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2240      	movs	r2, #64	; 0x40
 8003786:	4013      	ands	r3, r2
 8003788:	d009      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800378a:	4b0f      	ldr	r3, [pc, #60]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800378c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800378e:	4a17      	ldr	r2, [pc, #92]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003790:	4013      	ands	r3, r2
 8003792:	0019      	movs	r1, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003798:	4b0b      	ldr	r3, [pc, #44]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800379a:	430a      	orrs	r2, r1
 800379c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2280      	movs	r2, #128	; 0x80
 80037a4:	4013      	ands	r3, r2
 80037a6:	d009      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80037a8:	4b07      	ldr	r3, [pc, #28]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80037aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ac:	4a10      	ldr	r2, [pc, #64]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80037ae:	4013      	ands	r3, r2
 80037b0:	0019      	movs	r1, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a1a      	ldr	r2, [r3, #32]
 80037b6:	4b04      	ldr	r3, [pc, #16]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80037b8:	430a      	orrs	r2, r1
 80037ba:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	0018      	movs	r0, r3
 80037c0:	46bd      	mov	sp, r7
 80037c2:	b006      	add	sp, #24
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	46c0      	nop			; (mov r8, r8)
 80037c8:	40021000 	.word	0x40021000
 80037cc:	40007000 	.word	0x40007000
 80037d0:	fffcffff 	.word	0xfffcffff
 80037d4:	fff7ffff 	.word	0xfff7ffff
 80037d8:	00001388 	.word	0x00001388
 80037dc:	ffcfffff 	.word	0xffcfffff
 80037e0:	efffffff 	.word	0xefffffff
 80037e4:	fffff3ff 	.word	0xfffff3ff
 80037e8:	ffffcfff 	.word	0xffffcfff
 80037ec:	fbffffff 	.word	0xfbffffff
 80037f0:	fff3ffff 	.word	0xfff3ffff

080037f4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e08e      	b.n	8003924 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2221      	movs	r2, #33	; 0x21
 800380a:	5c9b      	ldrb	r3, [r3, r2]
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d107      	bne.n	8003822 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2220      	movs	r2, #32
 8003816:	2100      	movs	r1, #0
 8003818:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	0018      	movs	r0, r3
 800381e:	f7fe f94b 	bl	8001ab8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2221      	movs	r2, #33	; 0x21
 8003826:	2102      	movs	r1, #2
 8003828:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	22ca      	movs	r2, #202	; 0xca
 8003830:	625a      	str	r2, [r3, #36]	; 0x24
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2253      	movs	r2, #83	; 0x53
 8003838:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	0018      	movs	r0, r3
 800383e:	f000 fc5c 	bl	80040fa <RTC_EnterInitMode>
 8003842:	1e03      	subs	r3, r0, #0
 8003844:	d009      	beq.n	800385a <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	22ff      	movs	r2, #255	; 0xff
 800384c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2221      	movs	r2, #33	; 0x21
 8003852:	2104      	movs	r1, #4
 8003854:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e064      	b.n	8003924 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4931      	ldr	r1, [pc, #196]	; (800392c <HAL_RTC_Init+0x138>)
 8003866:	400a      	ands	r2, r1
 8003868:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6899      	ldr	r1, [r3, #8]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	431a      	orrs	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	431a      	orrs	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	430a      	orrs	r2, r1
 8003886:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	68d2      	ldr	r2, [r2, #12]
 8003890:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6919      	ldr	r1, [r3, #16]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	041a      	lsls	r2, r3, #16
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68da      	ldr	r2, [r3, #12]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2180      	movs	r1, #128	; 0x80
 80038b2:	438a      	bics	r2, r1
 80038b4:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2103      	movs	r1, #3
 80038c2:	438a      	bics	r2, r1
 80038c4:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	69da      	ldr	r2, [r3, #28]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	431a      	orrs	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	430a      	orrs	r2, r1
 80038dc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	2220      	movs	r2, #32
 80038e6:	4013      	ands	r3, r2
 80038e8:	d113      	bne.n	8003912 <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	0018      	movs	r0, r3
 80038ee:	f000 fbdd 	bl	80040ac <HAL_RTC_WaitForSynchro>
 80038f2:	1e03      	subs	r3, r0, #0
 80038f4:	d00d      	beq.n	8003912 <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	22ff      	movs	r2, #255	; 0xff
 80038fc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2221      	movs	r2, #33	; 0x21
 8003902:	2104      	movs	r1, #4
 8003904:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2220      	movs	r2, #32
 800390a:	2100      	movs	r1, #0
 800390c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e008      	b.n	8003924 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	22ff      	movs	r2, #255	; 0xff
 8003918:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2221      	movs	r2, #33	; 0x21
 800391e:	2101      	movs	r1, #1
 8003920:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003922:	2300      	movs	r3, #0
  }
}
 8003924:	0018      	movs	r0, r3
 8003926:	46bd      	mov	sp, r7
 8003928:	b002      	add	sp, #8
 800392a:	bd80      	pop	{r7, pc}
 800392c:	ff8fffbf 	.word	0xff8fffbf

08003930 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003930:	b590      	push	{r4, r7, lr}
 8003932:	b087      	sub	sp, #28
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2220      	movs	r2, #32
 8003940:	5c9b      	ldrb	r3, [r3, r2]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d101      	bne.n	800394a <HAL_RTC_SetTime+0x1a>
 8003946:	2302      	movs	r3, #2
 8003948:	e0ad      	b.n	8003aa6 <HAL_RTC_SetTime+0x176>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2220      	movs	r2, #32
 800394e:	2101      	movs	r1, #1
 8003950:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2221      	movs	r2, #33	; 0x21
 8003956:	2102      	movs	r1, #2
 8003958:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d125      	bne.n	80039ac <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	2240      	movs	r2, #64	; 0x40
 8003968:	4013      	ands	r3, r2
 800396a:	d102      	bne.n	8003972 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	2200      	movs	r2, #0
 8003970:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	0018      	movs	r0, r3
 8003978:	f000 fbe9 	bl	800414e <RTC_ByteToBcd2>
 800397c:	0003      	movs	r3, r0
 800397e:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	785b      	ldrb	r3, [r3, #1]
 8003984:	0018      	movs	r0, r3
 8003986:	f000 fbe2 	bl	800414e <RTC_ByteToBcd2>
 800398a:	0003      	movs	r3, r0
 800398c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800398e:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	789b      	ldrb	r3, [r3, #2]
 8003994:	0018      	movs	r0, r3
 8003996:	f000 fbda 	bl	800414e <RTC_ByteToBcd2>
 800399a:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800399c:	0022      	movs	r2, r4
 800399e:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	78db      	ldrb	r3, [r3, #3]
 80039a4:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80039a6:	4313      	orrs	r3, r2
 80039a8:	617b      	str	r3, [r7, #20]
 80039aa:	e017      	b.n	80039dc <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	2240      	movs	r2, #64	; 0x40
 80039b4:	4013      	ands	r3, r2
 80039b6:	d102      	bne.n	80039be <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	2200      	movs	r2, #0
 80039bc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	785b      	ldrb	r3, [r3, #1]
 80039c8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80039ca:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80039cc:	68ba      	ldr	r2, [r7, #8]
 80039ce:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80039d0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	78db      	ldrb	r3, [r3, #3]
 80039d6:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80039d8:	4313      	orrs	r3, r2
 80039da:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	22ca      	movs	r2, #202	; 0xca
 80039e2:	625a      	str	r2, [r3, #36]	; 0x24
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2253      	movs	r2, #83	; 0x53
 80039ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	0018      	movs	r0, r3
 80039f0:	f000 fb83 	bl	80040fa <RTC_EnterInitMode>
 80039f4:	1e03      	subs	r3, r0, #0
 80039f6:	d00d      	beq.n	8003a14 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	22ff      	movs	r2, #255	; 0xff
 80039fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2221      	movs	r2, #33	; 0x21
 8003a04:	2104      	movs	r1, #4
 8003a06:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e048      	b.n	8003aa6 <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	4925      	ldr	r1, [pc, #148]	; (8003ab0 <HAL_RTC_SetTime+0x180>)
 8003a1c:	400a      	ands	r2, r1
 8003a1e:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	689a      	ldr	r2, [r3, #8]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4922      	ldr	r1, [pc, #136]	; (8003ab4 <HAL_RTC_SetTime+0x184>)
 8003a2c:	400a      	ands	r2, r1
 8003a2e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6899      	ldr	r1, [r3, #8]
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	68da      	ldr	r2, [r3, #12]
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	430a      	orrs	r2, r1
 8003a46:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68da      	ldr	r2, [r3, #12]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2180      	movs	r1, #128	; 0x80
 8003a54:	438a      	bics	r2, r1
 8003a56:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	4013      	ands	r3, r2
 8003a62:	d113      	bne.n	8003a8c <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	0018      	movs	r0, r3
 8003a68:	f000 fb20 	bl	80040ac <HAL_RTC_WaitForSynchro>
 8003a6c:	1e03      	subs	r3, r0, #0
 8003a6e:	d00d      	beq.n	8003a8c <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	22ff      	movs	r2, #255	; 0xff
 8003a76:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2221      	movs	r2, #33	; 0x21
 8003a7c:	2104      	movs	r1, #4
 8003a7e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2220      	movs	r2, #32
 8003a84:	2100      	movs	r1, #0
 8003a86:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e00c      	b.n	8003aa6 <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	22ff      	movs	r2, #255	; 0xff
 8003a92:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2221      	movs	r2, #33	; 0x21
 8003a98:	2101      	movs	r1, #1
 8003a9a:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
  }
}
 8003aa6:	0018      	movs	r0, r3
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	b007      	add	sp, #28
 8003aac:	bd90      	pop	{r4, r7, pc}
 8003aae:	46c0      	nop			; (mov r8, r8)
 8003ab0:	007f7f7f 	.word	0x007f7f7f
 8003ab4:	fffbffff 	.word	0xfffbffff

08003ab8 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	045b      	lsls	r3, r3, #17
 8003ad6:	0c5a      	lsrs	r2, r3, #17
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a22      	ldr	r2, [pc, #136]	; (8003b6c <HAL_RTC_GetTime+0xb4>)
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	0c1b      	lsrs	r3, r3, #16
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	223f      	movs	r2, #63	; 0x3f
 8003af0:	4013      	ands	r3, r2
 8003af2:	b2da      	uxtb	r2, r3
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	0a1b      	lsrs	r3, r3, #8
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	227f      	movs	r2, #127	; 0x7f
 8003b00:	4013      	ands	r3, r2
 8003b02:	b2da      	uxtb	r2, r3
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	227f      	movs	r2, #127	; 0x7f
 8003b0e:	4013      	ands	r3, r2
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	0c1b      	lsrs	r3, r3, #16
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	2240      	movs	r2, #64	; 0x40
 8003b1e:	4013      	ands	r3, r2
 8003b20:	b2da      	uxtb	r2, r3
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d11a      	bne.n	8003b62 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	0018      	movs	r0, r3
 8003b32:	f000 fb35 	bl	80041a0 <RTC_Bcd2ToByte>
 8003b36:	0003      	movs	r3, r0
 8003b38:	001a      	movs	r2, r3
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	785b      	ldrb	r3, [r3, #1]
 8003b42:	0018      	movs	r0, r3
 8003b44:	f000 fb2c 	bl	80041a0 <RTC_Bcd2ToByte>
 8003b48:	0003      	movs	r3, r0
 8003b4a:	001a      	movs	r2, r3
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	789b      	ldrb	r3, [r3, #2]
 8003b54:	0018      	movs	r0, r3
 8003b56:	f000 fb23 	bl	80041a0 <RTC_Bcd2ToByte>
 8003b5a:	0003      	movs	r3, r0
 8003b5c:	001a      	movs	r2, r3
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	0018      	movs	r0, r3
 8003b66:	46bd      	mov	sp, r7
 8003b68:	b006      	add	sp, #24
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	007f7f7f 	.word	0x007f7f7f

08003b70 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003b70:	b590      	push	{r4, r7, lr}
 8003b72:	b087      	sub	sp, #28
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	5c9b      	ldrb	r3, [r3, r2]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d101      	bne.n	8003b8a <HAL_RTC_SetDate+0x1a>
 8003b86:	2302      	movs	r3, #2
 8003b88:	e099      	b.n	8003cbe <HAL_RTC_SetDate+0x14e>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2220      	movs	r2, #32
 8003b8e:	2101      	movs	r1, #1
 8003b90:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2221      	movs	r2, #33	; 0x21
 8003b96:	2102      	movs	r1, #2
 8003b98:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10e      	bne.n	8003bbe <HAL_RTC_SetDate+0x4e>
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	785b      	ldrb	r3, [r3, #1]
 8003ba4:	001a      	movs	r2, r3
 8003ba6:	2310      	movs	r3, #16
 8003ba8:	4013      	ands	r3, r2
 8003baa:	d008      	beq.n	8003bbe <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	785b      	ldrb	r3, [r3, #1]
 8003bb0:	2210      	movs	r2, #16
 8003bb2:	4393      	bics	r3, r2
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	330a      	adds	r3, #10
 8003bb8:	b2da      	uxtb	r2, r3
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d11c      	bne.n	8003bfe <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	78db      	ldrb	r3, [r3, #3]
 8003bc8:	0018      	movs	r0, r3
 8003bca:	f000 fac0 	bl	800414e <RTC_ByteToBcd2>
 8003bce:	0003      	movs	r3, r0
 8003bd0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	785b      	ldrb	r3, [r3, #1]
 8003bd6:	0018      	movs	r0, r3
 8003bd8:	f000 fab9 	bl	800414e <RTC_ByteToBcd2>
 8003bdc:	0003      	movs	r3, r0
 8003bde:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003be0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	789b      	ldrb	r3, [r3, #2]
 8003be6:	0018      	movs	r0, r3
 8003be8:	f000 fab1 	bl	800414e <RTC_ByteToBcd2>
 8003bec:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003bee:	0022      	movs	r2, r4
 8003bf0:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	617b      	str	r3, [r7, #20]
 8003bfc:	e00e      	b.n	8003c1c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	78db      	ldrb	r3, [r3, #3]
 8003c02:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	785b      	ldrb	r3, [r3, #1]
 8003c08:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003c0a:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8003c0c:	68ba      	ldr	r2, [r7, #8]
 8003c0e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8003c10:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	22ca      	movs	r2, #202	; 0xca
 8003c22:	625a      	str	r2, [r3, #36]	; 0x24
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2253      	movs	r2, #83	; 0x53
 8003c2a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	0018      	movs	r0, r3
 8003c30:	f000 fa63 	bl	80040fa <RTC_EnterInitMode>
 8003c34:	1e03      	subs	r3, r0, #0
 8003c36:	d00d      	beq.n	8003c54 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	22ff      	movs	r2, #255	; 0xff
 8003c3e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2221      	movs	r2, #33	; 0x21
 8003c44:	2104      	movs	r1, #4
 8003c46:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e034      	b.n	8003cbe <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	491b      	ldr	r1, [pc, #108]	; (8003cc8 <HAL_RTC_SetDate+0x158>)
 8003c5c:	400a      	ands	r2, r1
 8003c5e:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68da      	ldr	r2, [r3, #12]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2180      	movs	r1, #128	; 0x80
 8003c6c:	438a      	bics	r2, r1
 8003c6e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	2220      	movs	r2, #32
 8003c78:	4013      	ands	r3, r2
 8003c7a:	d113      	bne.n	8003ca4 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	0018      	movs	r0, r3
 8003c80:	f000 fa14 	bl	80040ac <HAL_RTC_WaitForSynchro>
 8003c84:	1e03      	subs	r3, r0, #0
 8003c86:	d00d      	beq.n	8003ca4 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	22ff      	movs	r2, #255	; 0xff
 8003c8e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2221      	movs	r2, #33	; 0x21
 8003c94:	2104      	movs	r1, #4
 8003c96:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e00c      	b.n	8003cbe <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	22ff      	movs	r2, #255	; 0xff
 8003caa:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2221      	movs	r2, #33	; 0x21
 8003cb0:	2101      	movs	r1, #1
 8003cb2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	2100      	movs	r1, #0
 8003cba:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
  }
}
 8003cbe:	0018      	movs	r0, r3
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	b007      	add	sp, #28
 8003cc4:	bd90      	pop	{r4, r7, pc}
 8003cc6:	46c0      	nop			; (mov r8, r8)
 8003cc8:	00ffff3f 	.word	0x00ffff3f

08003ccc <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b086      	sub	sp, #24
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	4a21      	ldr	r2, [pc, #132]	; (8003d64 <HAL_RTC_GetDate+0x98>)
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	0c1b      	lsrs	r3, r3, #16
 8003ce8:	b2da      	uxtb	r2, r3
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	0a1b      	lsrs	r3, r3, #8
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	221f      	movs	r2, #31
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	b2da      	uxtb	r2, r3
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	223f      	movs	r2, #63	; 0x3f
 8003d04:	4013      	ands	r3, r2
 8003d06:	b2da      	uxtb	r2, r3
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	0b5b      	lsrs	r3, r3, #13
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2207      	movs	r2, #7
 8003d14:	4013      	ands	r3, r2
 8003d16:	b2da      	uxtb	r2, r3
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d11a      	bne.n	8003d58 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	78db      	ldrb	r3, [r3, #3]
 8003d26:	0018      	movs	r0, r3
 8003d28:	f000 fa3a 	bl	80041a0 <RTC_Bcd2ToByte>
 8003d2c:	0003      	movs	r3, r0
 8003d2e:	001a      	movs	r2, r3
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	785b      	ldrb	r3, [r3, #1]
 8003d38:	0018      	movs	r0, r3
 8003d3a:	f000 fa31 	bl	80041a0 <RTC_Bcd2ToByte>
 8003d3e:	0003      	movs	r3, r0
 8003d40:	001a      	movs	r2, r3
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	789b      	ldrb	r3, [r3, #2]
 8003d4a:	0018      	movs	r0, r3
 8003d4c:	f000 fa28 	bl	80041a0 <RTC_Bcd2ToByte>
 8003d50:	0003      	movs	r3, r0
 8003d52:	001a      	movs	r2, r3
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	0018      	movs	r0, r3
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	b006      	add	sp, #24
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	46c0      	nop			; (mov r8, r8)
 8003d64:	00ffff3f 	.word	0x00ffff3f

08003d68 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003d68:	b590      	push	{r4, r7, lr}
 8003d6a:	b089      	sub	sp, #36	; 0x24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2220      	movs	r2, #32
 8003d78:	5c9b      	ldrb	r3, [r3, r2]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d101      	bne.n	8003d82 <HAL_RTC_SetAlarm_IT+0x1a>
 8003d7e:	2302      	movs	r3, #2
 8003d80:	e130      	b.n	8003fe4 <HAL_RTC_SetAlarm_IT+0x27c>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2220      	movs	r2, #32
 8003d86:	2101      	movs	r1, #1
 8003d88:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2221      	movs	r2, #33	; 0x21
 8003d8e:	2102      	movs	r1, #2
 8003d90:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d136      	bne.n	8003e06 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	2240      	movs	r2, #64	; 0x40
 8003da0:	4013      	ands	r3, r2
 8003da2:	d102      	bne.n	8003daa <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	2200      	movs	r2, #0
 8003da8:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	0018      	movs	r0, r3
 8003db0:	f000 f9cd 	bl	800414e <RTC_ByteToBcd2>
 8003db4:	0003      	movs	r3, r0
 8003db6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	785b      	ldrb	r3, [r3, #1]
 8003dbc:	0018      	movs	r0, r3
 8003dbe:	f000 f9c6 	bl	800414e <RTC_ByteToBcd2>
 8003dc2:	0003      	movs	r3, r0
 8003dc4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003dc6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	789b      	ldrb	r3, [r3, #2]
 8003dcc:	0018      	movs	r0, r3
 8003dce:	f000 f9be 	bl	800414e <RTC_ByteToBcd2>
 8003dd2:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003dd4:	0022      	movs	r2, r4
 8003dd6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	78db      	ldrb	r3, [r3, #3]
 8003ddc:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003dde:	431a      	orrs	r2, r3
 8003de0:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	2220      	movs	r2, #32
 8003de6:	5c9b      	ldrb	r3, [r3, r2]
 8003de8:	0018      	movs	r0, r3
 8003dea:	f000 f9b0 	bl	800414e <RTC_ByteToBcd2>
 8003dee:	0003      	movs	r3, r0
 8003df0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003df2:	0022      	movs	r2, r4
 8003df4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003dfa:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003e00:	4313      	orrs	r3, r2
 8003e02:	61fb      	str	r3, [r7, #28]
 8003e04:	e022      	b.n	8003e4c <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	2240      	movs	r2, #64	; 0x40
 8003e0e:	4013      	ands	r3, r2
 8003e10:	d102      	bne.n	8003e18 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	2200      	movs	r2, #0
 8003e16:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	785b      	ldrb	r3, [r3, #1]
 8003e22:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003e24:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8003e26:	68ba      	ldr	r2, [r7, #8]
 8003e28:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003e2a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	78db      	ldrb	r3, [r3, #3]
 8003e30:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8003e32:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	2120      	movs	r1, #32
 8003e38:	5c5b      	ldrb	r3, [r3, r1]
 8003e3a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003e3c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003e42:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	685a      	ldr	r2, [r3, #4]
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	22ca      	movs	r2, #202	; 0xca
 8003e5e:	625a      	str	r2, [r3, #36]	; 0x24
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2253      	movs	r2, #83	; 0x53
 8003e66:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e6c:	2380      	movs	r3, #128	; 0x80
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d14e      	bne.n	8003f12 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	689a      	ldr	r2, [r3, #8]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	495b      	ldr	r1, [pc, #364]	; (8003fec <HAL_RTC_SetAlarm_IT+0x284>)
 8003e80:	400a      	ands	r2, r1
 8003e82:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	22ff      	movs	r2, #255	; 0xff
 8003e8c:	401a      	ands	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4957      	ldr	r1, [pc, #348]	; (8003ff0 <HAL_RTC_SetAlarm_IT+0x288>)
 8003e94:	430a      	orrs	r2, r1
 8003e96:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003e98:	f7fd fff4 	bl	8001e84 <HAL_GetTick>
 8003e9c:	0003      	movs	r3, r0
 8003e9e:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003ea0:	e016      	b.n	8003ed0 <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003ea2:	f7fd ffef 	bl	8001e84 <HAL_GetTick>
 8003ea6:	0002      	movs	r2, r0
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	1ad2      	subs	r2, r2, r3
 8003eac:	23fa      	movs	r3, #250	; 0xfa
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d90d      	bls.n	8003ed0 <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	22ff      	movs	r2, #255	; 0xff
 8003eba:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2221      	movs	r2, #33	; 0x21
 8003ec0:	2103      	movs	r1, #3
 8003ec2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	2100      	movs	r1, #0
 8003eca:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e089      	b.n	8003fe4 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	4013      	ands	r3, r2
 8003eda:	d0e2      	beq.n	8003ea2 <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	69fa      	ldr	r2, [r7, #28]
 8003ee2:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	69ba      	ldr	r2, [r7, #24]
 8003eea:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689a      	ldr	r2, [r3, #8]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2180      	movs	r1, #128	; 0x80
 8003ef8:	0049      	lsls	r1, r1, #1
 8003efa:	430a      	orrs	r2, r1
 8003efc:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	689a      	ldr	r2, [r3, #8]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2180      	movs	r1, #128	; 0x80
 8003f0a:	0149      	lsls	r1, r1, #5
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	609a      	str	r2, [r3, #8]
 8003f10:	e04d      	b.n	8003fae <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4935      	ldr	r1, [pc, #212]	; (8003ff4 <HAL_RTC_SetAlarm_IT+0x28c>)
 8003f1e:	400a      	ands	r2, r1
 8003f20:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	22ff      	movs	r2, #255	; 0xff
 8003f2a:	401a      	ands	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4931      	ldr	r1, [pc, #196]	; (8003ff8 <HAL_RTC_SetAlarm_IT+0x290>)
 8003f32:	430a      	orrs	r2, r1
 8003f34:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003f36:	f7fd ffa5 	bl	8001e84 <HAL_GetTick>
 8003f3a:	0003      	movs	r3, r0
 8003f3c:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003f3e:	e016      	b.n	8003f6e <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003f40:	f7fd ffa0 	bl	8001e84 <HAL_GetTick>
 8003f44:	0002      	movs	r2, r0
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	1ad2      	subs	r2, r2, r3
 8003f4a:	23fa      	movs	r3, #250	; 0xfa
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d90d      	bls.n	8003f6e <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	22ff      	movs	r2, #255	; 0xff
 8003f58:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2221      	movs	r2, #33	; 0x21
 8003f5e:	2103      	movs	r1, #3
 8003f60:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2220      	movs	r2, #32
 8003f66:	2100      	movs	r1, #0
 8003f68:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e03a      	b.n	8003fe4 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	2202      	movs	r2, #2
 8003f76:	4013      	ands	r3, r2
 8003f78:	d0e2      	beq.n	8003f40 <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	69fa      	ldr	r2, [r7, #28]
 8003f80:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2180      	movs	r1, #128	; 0x80
 8003f96:	0089      	lsls	r1, r1, #2
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689a      	ldr	r2, [r3, #8]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2180      	movs	r1, #128	; 0x80
 8003fa8:	0189      	lsls	r1, r1, #6
 8003faa:	430a      	orrs	r2, r1
 8003fac:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003fae:	4b13      	ldr	r3, [pc, #76]	; (8003ffc <HAL_RTC_SetAlarm_IT+0x294>)
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	4b12      	ldr	r3, [pc, #72]	; (8003ffc <HAL_RTC_SetAlarm_IT+0x294>)
 8003fb4:	2180      	movs	r1, #128	; 0x80
 8003fb6:	0289      	lsls	r1, r1, #10
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8003fbc:	4b0f      	ldr	r3, [pc, #60]	; (8003ffc <HAL_RTC_SetAlarm_IT+0x294>)
 8003fbe:	689a      	ldr	r2, [r3, #8]
 8003fc0:	4b0e      	ldr	r3, [pc, #56]	; (8003ffc <HAL_RTC_SetAlarm_IT+0x294>)
 8003fc2:	2180      	movs	r1, #128	; 0x80
 8003fc4:	0289      	lsls	r1, r1, #10
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	22ff      	movs	r2, #255	; 0xff
 8003fd0:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2221      	movs	r2, #33	; 0x21
 8003fd6:	2101      	movs	r1, #1
 8003fd8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	2100      	movs	r1, #0
 8003fe0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	0018      	movs	r0, r3
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	b009      	add	sp, #36	; 0x24
 8003fea:	bd90      	pop	{r4, r7, pc}
 8003fec:	fffffeff 	.word	0xfffffeff
 8003ff0:	fffffe7f 	.word	0xfffffe7f
 8003ff4:	fffffdff 	.word	0xfffffdff
 8003ff8:	fffffd7f 	.word	0xfffffd7f
 8003ffc:	40010400 	.word	0x40010400

08004000 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	689a      	ldr	r2, [r3, #8]
 800400e:	2380      	movs	r3, #128	; 0x80
 8004010:	015b      	lsls	r3, r3, #5
 8004012:	4013      	ands	r3, r2
 8004014:	d014      	beq.n	8004040 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68da      	ldr	r2, [r3, #12]
 800401c:	2380      	movs	r3, #128	; 0x80
 800401e:	005b      	lsls	r3, r3, #1
 8004020:	4013      	ands	r3, r2
 8004022:	d00d      	beq.n	8004040 <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	0018      	movs	r0, r3
 8004028:	f000 f838 	bl	800409c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	22ff      	movs	r2, #255	; 0xff
 8004034:	401a      	ands	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4915      	ldr	r1, [pc, #84]	; (8004090 <HAL_RTC_AlarmIRQHandler+0x90>)
 800403c:	430a      	orrs	r2, r1
 800403e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689a      	ldr	r2, [r3, #8]
 8004046:	2380      	movs	r3, #128	; 0x80
 8004048:	019b      	lsls	r3, r3, #6
 800404a:	4013      	ands	r3, r2
 800404c:	d014      	beq.n	8004078 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68da      	ldr	r2, [r3, #12]
 8004054:	2380      	movs	r3, #128	; 0x80
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	4013      	ands	r3, r2
 800405a:	d00d      	beq.n	8004078 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	0018      	movs	r0, r3
 8004060:	f000 f8bb 	bl	80041da <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	22ff      	movs	r2, #255	; 0xff
 800406c:	401a      	ands	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4908      	ldr	r1, [pc, #32]	; (8004094 <HAL_RTC_AlarmIRQHandler+0x94>)
 8004074:	430a      	orrs	r2, r1
 8004076:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004078:	4b07      	ldr	r3, [pc, #28]	; (8004098 <HAL_RTC_AlarmIRQHandler+0x98>)
 800407a:	2280      	movs	r2, #128	; 0x80
 800407c:	0292      	lsls	r2, r2, #10
 800407e:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2221      	movs	r2, #33	; 0x21
 8004084:	2101      	movs	r1, #1
 8004086:	5499      	strb	r1, [r3, r2]
}
 8004088:	46c0      	nop			; (mov r8, r8)
 800408a:	46bd      	mov	sp, r7
 800408c:	b002      	add	sp, #8
 800408e:	bd80      	pop	{r7, pc}
 8004090:	fffffe7f 	.word	0xfffffe7f
 8004094:	fffffd7f 	.word	0xfffffd7f
 8004098:	40010400 	.word	0x40010400

0800409c <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80040a4:	46c0      	nop			; (mov r8, r8)
 80040a6:	46bd      	mov	sp, r7
 80040a8:	b002      	add	sp, #8
 80040aa:	bd80      	pop	{r7, pc}

080040ac <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68da      	ldr	r2, [r3, #12]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	21a0      	movs	r1, #160	; 0xa0
 80040c0:	438a      	bics	r2, r1
 80040c2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80040c4:	f7fd fede 	bl	8001e84 <HAL_GetTick>
 80040c8:	0003      	movs	r3, r0
 80040ca:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80040cc:	e00a      	b.n	80040e4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80040ce:	f7fd fed9 	bl	8001e84 <HAL_GetTick>
 80040d2:	0002      	movs	r2, r0
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	1ad2      	subs	r2, r2, r3
 80040d8:	23fa      	movs	r3, #250	; 0xfa
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	429a      	cmp	r2, r3
 80040de:	d901      	bls.n	80040e4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e006      	b.n	80040f2 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	2220      	movs	r2, #32
 80040ec:	4013      	ands	r3, r2
 80040ee:	d0ee      	beq.n	80040ce <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	0018      	movs	r0, r3
 80040f4:	46bd      	mov	sp, r7
 80040f6:	b004      	add	sp, #16
 80040f8:	bd80      	pop	{r7, pc}

080040fa <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b084      	sub	sp, #16
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	2240      	movs	r2, #64	; 0x40
 800410a:	4013      	ands	r3, r2
 800410c:	d11a      	bne.n	8004144 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2201      	movs	r2, #1
 8004114:	4252      	negs	r2, r2
 8004116:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004118:	f7fd feb4 	bl	8001e84 <HAL_GetTick>
 800411c:	0003      	movs	r3, r0
 800411e:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004120:	e00a      	b.n	8004138 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004122:	f7fd feaf 	bl	8001e84 <HAL_GetTick>
 8004126:	0002      	movs	r2, r0
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	1ad2      	subs	r2, r2, r3
 800412c:	23fa      	movs	r3, #250	; 0xfa
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	429a      	cmp	r2, r3
 8004132:	d901      	bls.n	8004138 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e006      	b.n	8004146 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	2240      	movs	r2, #64	; 0x40
 8004140:	4013      	ands	r3, r2
 8004142:	d0ee      	beq.n	8004122 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	0018      	movs	r0, r3
 8004148:	46bd      	mov	sp, r7
 800414a:	b004      	add	sp, #16
 800414c:	bd80      	pop	{r7, pc}

0800414e <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800414e:	b580      	push	{r7, lr}
 8004150:	b084      	sub	sp, #16
 8004152:	af00      	add	r7, sp, #0
 8004154:	0002      	movs	r2, r0
 8004156:	1dfb      	adds	r3, r7, #7
 8004158:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800415a:	2300      	movs	r3, #0
 800415c:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800415e:	230b      	movs	r3, #11
 8004160:	18fb      	adds	r3, r7, r3
 8004162:	1dfa      	adds	r2, r7, #7
 8004164:	7812      	ldrb	r2, [r2, #0]
 8004166:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8004168:	e008      	b.n	800417c <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	3301      	adds	r3, #1
 800416e:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8004170:	220b      	movs	r2, #11
 8004172:	18bb      	adds	r3, r7, r2
 8004174:	18ba      	adds	r2, r7, r2
 8004176:	7812      	ldrb	r2, [r2, #0]
 8004178:	3a0a      	subs	r2, #10
 800417a:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 800417c:	230b      	movs	r3, #11
 800417e:	18fb      	adds	r3, r7, r3
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	2b09      	cmp	r3, #9
 8004184:	d8f1      	bhi.n	800416a <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	b2db      	uxtb	r3, r3
 800418a:	011b      	lsls	r3, r3, #4
 800418c:	b2da      	uxtb	r2, r3
 800418e:	230b      	movs	r3, #11
 8004190:	18fb      	adds	r3, r7, r3
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	4313      	orrs	r3, r2
 8004196:	b2db      	uxtb	r3, r3
}
 8004198:	0018      	movs	r0, r3
 800419a:	46bd      	mov	sp, r7
 800419c:	b004      	add	sp, #16
 800419e:	bd80      	pop	{r7, pc}

080041a0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	0002      	movs	r2, r0
 80041a8:	1dfb      	adds	r3, r7, #7
 80041aa:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80041ac:	1dfb      	adds	r3, r7, #7
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	091b      	lsrs	r3, r3, #4
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	001a      	movs	r2, r3
 80041b6:	0013      	movs	r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	189b      	adds	r3, r3, r2
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	b2da      	uxtb	r2, r3
 80041c4:	1dfb      	adds	r3, r7, #7
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	210f      	movs	r1, #15
 80041ca:	400b      	ands	r3, r1
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	18d3      	adds	r3, r2, r3
 80041d0:	b2db      	uxtb	r3, r3
}
 80041d2:	0018      	movs	r0, r3
 80041d4:	46bd      	mov	sp, r7
 80041d6:	b004      	add	sp, #16
 80041d8:	bd80      	pop	{r7, pc}

080041da <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	b082      	sub	sp, #8
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80041e2:	46c0      	nop			; (mov r8, r8)
 80041e4:	46bd      	mov	sp, r7
 80041e6:	b002      	add	sp, #8
 80041e8:	bd80      	pop	{r7, pc}
	...

080041ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e059      	b.n	80042b2 <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2251      	movs	r2, #81	; 0x51
 8004208:	5c9b      	ldrb	r3, [r3, r2]
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2b00      	cmp	r3, #0
 800420e:	d107      	bne.n	8004220 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2250      	movs	r2, #80	; 0x50
 8004214:	2100      	movs	r1, #0
 8004216:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	0018      	movs	r0, r3
 800421c:	f7fd fc6c 	bl	8001af8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2251      	movs	r2, #81	; 0x51
 8004224:	2102      	movs	r1, #2
 8004226:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2140      	movs	r1, #64	; 0x40
 8004234:	438a      	bics	r2, r1
 8004236:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685a      	ldr	r2, [r3, #4]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	431a      	orrs	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	431a      	orrs	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	431a      	orrs	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	431a      	orrs	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6999      	ldr	r1, [r3, #24]
 8004258:	2380      	movs	r3, #128	; 0x80
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	400b      	ands	r3, r1
 800425e:	431a      	orrs	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	69db      	ldr	r3, [r3, #28]
 8004264:	431a      	orrs	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	431a      	orrs	r2, r3
 800426c:	0011      	movs	r1, r2
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	430a      	orrs	r2, r1
 8004278:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	0c1b      	lsrs	r3, r3, #16
 8004280:	2204      	movs	r2, #4
 8004282:	4013      	ands	r3, r2
 8004284:	0019      	movs	r1, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	69da      	ldr	r2, [r3, #28]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4907      	ldr	r1, [pc, #28]	; (80042bc <HAL_SPI_Init+0xd0>)
 800429e:	400a      	ands	r2, r1
 80042a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2251      	movs	r2, #81	; 0x51
 80042ac:	2101      	movs	r1, #1
 80042ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	0018      	movs	r0, r3
 80042b4:	46bd      	mov	sp, r7
 80042b6:	b002      	add	sp, #8
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	46c0      	nop			; (mov r8, r8)
 80042bc:	fffff7ff 	.word	0xfffff7ff

080042c0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b088      	sub	sp, #32
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	603b      	str	r3, [r7, #0]
 80042cc:	1dbb      	adds	r3, r7, #6
 80042ce:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80042d0:	231f      	movs	r3, #31
 80042d2:	18fb      	adds	r3, r7, r3
 80042d4:	2200      	movs	r2, #0
 80042d6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2250      	movs	r2, #80	; 0x50
 80042dc:	5c9b      	ldrb	r3, [r3, r2]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d101      	bne.n	80042e6 <HAL_SPI_Transmit+0x26>
 80042e2:	2302      	movs	r3, #2
 80042e4:	e136      	b.n	8004554 <HAL_SPI_Transmit+0x294>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2250      	movs	r2, #80	; 0x50
 80042ea:	2101      	movs	r1, #1
 80042ec:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042ee:	f7fd fdc9 	bl	8001e84 <HAL_GetTick>
 80042f2:	0003      	movs	r3, r0
 80042f4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80042f6:	2316      	movs	r3, #22
 80042f8:	18fb      	adds	r3, r7, r3
 80042fa:	1dba      	adds	r2, r7, #6
 80042fc:	8812      	ldrh	r2, [r2, #0]
 80042fe:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2251      	movs	r2, #81	; 0x51
 8004304:	5c9b      	ldrb	r3, [r3, r2]
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b01      	cmp	r3, #1
 800430a:	d004      	beq.n	8004316 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800430c:	231f      	movs	r3, #31
 800430e:	18fb      	adds	r3, r7, r3
 8004310:	2202      	movs	r2, #2
 8004312:	701a      	strb	r2, [r3, #0]
    goto error;
 8004314:	e113      	b.n	800453e <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d003      	beq.n	8004324 <HAL_SPI_Transmit+0x64>
 800431c:	1dbb      	adds	r3, r7, #6
 800431e:	881b      	ldrh	r3, [r3, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d104      	bne.n	800432e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8004324:	231f      	movs	r3, #31
 8004326:	18fb      	adds	r3, r7, r3
 8004328:	2201      	movs	r2, #1
 800432a:	701a      	strb	r2, [r3, #0]
    goto error;
 800432c:	e107      	b.n	800453e <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2251      	movs	r2, #81	; 0x51
 8004332:	2103      	movs	r1, #3
 8004334:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	68ba      	ldr	r2, [r7, #8]
 8004340:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	1dba      	adds	r2, r7, #6
 8004346:	8812      	ldrh	r2, [r2, #0]
 8004348:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	1dba      	adds	r2, r7, #6
 800434e:	8812      	ldrh	r2, [r2, #0]
 8004350:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2200      	movs	r2, #0
 800436e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	2380      	movs	r3, #128	; 0x80
 8004376:	021b      	lsls	r3, r3, #8
 8004378:	429a      	cmp	r2, r3
 800437a:	d108      	bne.n	800438e <HAL_SPI_Transmit+0xce>
  {
    SPI_1LINE_TX(hspi);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2180      	movs	r1, #128	; 0x80
 8004388:	01c9      	lsls	r1, r1, #7
 800438a:	430a      	orrs	r2, r1
 800438c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2240      	movs	r2, #64	; 0x40
 8004396:	4013      	ands	r3, r2
 8004398:	2b40      	cmp	r3, #64	; 0x40
 800439a:	d007      	beq.n	80043ac <HAL_SPI_Transmit+0xec>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2140      	movs	r1, #64	; 0x40
 80043a8:	430a      	orrs	r2, r1
 80043aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	68da      	ldr	r2, [r3, #12]
 80043b0:	2380      	movs	r3, #128	; 0x80
 80043b2:	011b      	lsls	r3, r3, #4
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d14e      	bne.n	8004456 <HAL_SPI_Transmit+0x196>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d004      	beq.n	80043ca <HAL_SPI_Transmit+0x10a>
 80043c0:	2316      	movs	r3, #22
 80043c2:	18fb      	adds	r3, r7, r3
 80043c4:	881b      	ldrh	r3, [r3, #0]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d13f      	bne.n	800444a <HAL_SPI_Transmit+0x18a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ce:	881a      	ldrh	r2, [r3, #0]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043da:	1c9a      	adds	r2, r3, #2
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	3b01      	subs	r3, #1
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80043ee:	e02c      	b.n	800444a <HAL_SPI_Transmit+0x18a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	2202      	movs	r2, #2
 80043f8:	4013      	ands	r3, r2
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d112      	bne.n	8004424 <HAL_SPI_Transmit+0x164>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004402:	881a      	ldrh	r2, [r3, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440e:	1c9a      	adds	r2, r3, #2
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004418:	b29b      	uxth	r3, r3
 800441a:	3b01      	subs	r3, #1
 800441c:	b29a      	uxth	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	86da      	strh	r2, [r3, #54]	; 0x36
 8004422:	e012      	b.n	800444a <HAL_SPI_Transmit+0x18a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004424:	f7fd fd2e 	bl	8001e84 <HAL_GetTick>
 8004428:	0002      	movs	r2, r0
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	683a      	ldr	r2, [r7, #0]
 8004430:	429a      	cmp	r2, r3
 8004432:	d802      	bhi.n	800443a <HAL_SPI_Transmit+0x17a>
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	3301      	adds	r3, #1
 8004438:	d102      	bne.n	8004440 <HAL_SPI_Transmit+0x180>
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d104      	bne.n	800444a <HAL_SPI_Transmit+0x18a>
        {
          errorcode = HAL_TIMEOUT;
 8004440:	231f      	movs	r3, #31
 8004442:	18fb      	adds	r3, r7, r3
 8004444:	2203      	movs	r2, #3
 8004446:	701a      	strb	r2, [r3, #0]
          goto error;
 8004448:	e079      	b.n	800453e <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800444e:	b29b      	uxth	r3, r3
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1cd      	bne.n	80043f0 <HAL_SPI_Transmit+0x130>
 8004454:	e04f      	b.n	80044f6 <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d004      	beq.n	8004468 <HAL_SPI_Transmit+0x1a8>
 800445e:	2316      	movs	r3, #22
 8004460:	18fb      	adds	r3, r7, r3
 8004462:	881b      	ldrh	r3, [r3, #0]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d141      	bne.n	80044ec <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	330c      	adds	r3, #12
 8004472:	7812      	ldrb	r2, [r2, #0]
 8004474:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447a:	1c5a      	adds	r2, r3, #1
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004484:	b29b      	uxth	r3, r3
 8004486:	3b01      	subs	r3, #1
 8004488:	b29a      	uxth	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800448e:	e02d      	b.n	80044ec <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	2202      	movs	r2, #2
 8004498:	4013      	ands	r3, r2
 800449a:	2b02      	cmp	r3, #2
 800449c:	d113      	bne.n	80044c6 <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	330c      	adds	r3, #12
 80044a8:	7812      	ldrb	r2, [r2, #0]
 80044aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b0:	1c5a      	adds	r2, r3, #1
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	3b01      	subs	r3, #1
 80044be:	b29a      	uxth	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	86da      	strh	r2, [r3, #54]	; 0x36
 80044c4:	e012      	b.n	80044ec <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044c6:	f7fd fcdd 	bl	8001e84 <HAL_GetTick>
 80044ca:	0002      	movs	r2, r0
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d802      	bhi.n	80044dc <HAL_SPI_Transmit+0x21c>
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	3301      	adds	r3, #1
 80044da:	d102      	bne.n	80044e2 <HAL_SPI_Transmit+0x222>
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d104      	bne.n	80044ec <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 80044e2:	231f      	movs	r3, #31
 80044e4:	18fb      	adds	r3, r7, r3
 80044e6:	2203      	movs	r2, #3
 80044e8:	701a      	strb	r2, [r3, #0]
          goto error;
 80044ea:	e028      	b.n	800453e <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1cc      	bne.n	8004490 <HAL_SPI_Transmit+0x1d0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044f6:	69ba      	ldr	r2, [r7, #24]
 80044f8:	6839      	ldr	r1, [r7, #0]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	0018      	movs	r0, r3
 80044fe:	f000 f9b9 	bl	8004874 <SPI_EndRxTxTransaction>
 8004502:	1e03      	subs	r3, r0, #0
 8004504:	d002      	beq.n	800450c <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2220      	movs	r2, #32
 800450a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10a      	bne.n	800452a <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004514:	2300      	movs	r3, #0
 8004516:	613b      	str	r3, [r7, #16]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	613b      	str	r3, [r7, #16]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	613b      	str	r3, [r7, #16]
 8004528:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800452e:	2b00      	cmp	r3, #0
 8004530:	d004      	beq.n	800453c <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 8004532:	231f      	movs	r3, #31
 8004534:	18fb      	adds	r3, r7, r3
 8004536:	2201      	movs	r2, #1
 8004538:	701a      	strb	r2, [r3, #0]
 800453a:	e000      	b.n	800453e <HAL_SPI_Transmit+0x27e>
  }

error:
 800453c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2251      	movs	r2, #81	; 0x51
 8004542:	2101      	movs	r1, #1
 8004544:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2250      	movs	r2, #80	; 0x50
 800454a:	2100      	movs	r1, #0
 800454c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800454e:	231f      	movs	r3, #31
 8004550:	18fb      	adds	r3, r7, r3
 8004552:	781b      	ldrb	r3, [r3, #0]
}
 8004554:	0018      	movs	r0, r3
 8004556:	46bd      	mov	sp, r7
 8004558:	b008      	add	sp, #32
 800455a:	bd80      	pop	{r7, pc}

0800455c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b088      	sub	sp, #32
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	099b      	lsrs	r3, r3, #6
 8004578:	001a      	movs	r2, r3
 800457a:	2301      	movs	r3, #1
 800457c:	4013      	ands	r3, r2
 800457e:	d10f      	bne.n	80045a0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	2201      	movs	r2, #1
 8004584:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004586:	d00b      	beq.n	80045a0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	099b      	lsrs	r3, r3, #6
 800458c:	001a      	movs	r2, r3
 800458e:	2301      	movs	r3, #1
 8004590:	4013      	ands	r3, r2
 8004592:	d005      	beq.n	80045a0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	0010      	movs	r0, r2
 800459c:	4798      	blx	r3
    return;
 800459e:	e0d6      	b.n	800474e <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	085b      	lsrs	r3, r3, #1
 80045a4:	001a      	movs	r2, r3
 80045a6:	2301      	movs	r3, #1
 80045a8:	4013      	ands	r3, r2
 80045aa:	d00b      	beq.n	80045c4 <HAL_SPI_IRQHandler+0x68>
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	09db      	lsrs	r3, r3, #7
 80045b0:	001a      	movs	r2, r3
 80045b2:	2301      	movs	r3, #1
 80045b4:	4013      	ands	r3, r2
 80045b6:	d005      	beq.n	80045c4 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	0010      	movs	r0, r2
 80045c0:	4798      	blx	r3
    return;
 80045c2:	e0c4      	b.n	800474e <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	095b      	lsrs	r3, r3, #5
 80045c8:	001a      	movs	r2, r3
 80045ca:	2301      	movs	r3, #1
 80045cc:	4013      	ands	r3, r2
 80045ce:	d10c      	bne.n	80045ea <HAL_SPI_IRQHandler+0x8e>
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	099b      	lsrs	r3, r3, #6
 80045d4:	001a      	movs	r2, r3
 80045d6:	2301      	movs	r3, #1
 80045d8:	4013      	ands	r3, r2
 80045da:	d106      	bne.n	80045ea <HAL_SPI_IRQHandler+0x8e>
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	0a1b      	lsrs	r3, r3, #8
 80045e0:	001a      	movs	r2, r3
 80045e2:	2301      	movs	r3, #1
 80045e4:	4013      	ands	r3, r2
 80045e6:	d100      	bne.n	80045ea <HAL_SPI_IRQHandler+0x8e>
 80045e8:	e0b1      	b.n	800474e <HAL_SPI_IRQHandler+0x1f2>
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	095b      	lsrs	r3, r3, #5
 80045ee:	001a      	movs	r2, r3
 80045f0:	2301      	movs	r3, #1
 80045f2:	4013      	ands	r3, r2
 80045f4:	d100      	bne.n	80045f8 <HAL_SPI_IRQHandler+0x9c>
 80045f6:	e0aa      	b.n	800474e <HAL_SPI_IRQHandler+0x1f2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	099b      	lsrs	r3, r3, #6
 80045fc:	001a      	movs	r2, r3
 80045fe:	2301      	movs	r3, #1
 8004600:	4013      	ands	r3, r2
 8004602:	d023      	beq.n	800464c <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2251      	movs	r2, #81	; 0x51
 8004608:	5c9b      	ldrb	r3, [r3, r2]
 800460a:	b2db      	uxtb	r3, r3
 800460c:	2b03      	cmp	r3, #3
 800460e:	d011      	beq.n	8004634 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004614:	2204      	movs	r2, #4
 8004616:	431a      	orrs	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800461c:	2300      	movs	r3, #0
 800461e:	617b      	str	r3, [r7, #20]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	617b      	str	r3, [r7, #20]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	617b      	str	r3, [r7, #20]
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	e00b      	b.n	800464c <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004634:	2300      	movs	r3, #0
 8004636:	613b      	str	r3, [r7, #16]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	613b      	str	r3, [r7, #16]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	613b      	str	r3, [r7, #16]
 8004648:	693b      	ldr	r3, [r7, #16]
        return;
 800464a:	e080      	b.n	800474e <HAL_SPI_IRQHandler+0x1f2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	095b      	lsrs	r3, r3, #5
 8004650:	001a      	movs	r2, r3
 8004652:	2301      	movs	r3, #1
 8004654:	4013      	ands	r3, r2
 8004656:	d014      	beq.n	8004682 <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800465c:	2201      	movs	r2, #1
 800465e:	431a      	orrs	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004664:	2300      	movs	r3, #0
 8004666:	60fb      	str	r3, [r7, #12]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2140      	movs	r1, #64	; 0x40
 800467c:	438a      	bics	r2, r1
 800467e:	601a      	str	r2, [r3, #0]
 8004680:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	0a1b      	lsrs	r3, r3, #8
 8004686:	001a      	movs	r2, r3
 8004688:	2301      	movs	r3, #1
 800468a:	4013      	ands	r3, r2
 800468c:	d00c      	beq.n	80046a8 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004692:	2208      	movs	r2, #8
 8004694:	431a      	orrs	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800469a:	2300      	movs	r3, #0
 800469c:	60bb      	str	r3, [r7, #8]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	60bb      	str	r3, [r7, #8]
 80046a6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d04d      	beq.n	800474c <HAL_SPI_IRQHandler+0x1f0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	21e0      	movs	r1, #224	; 0xe0
 80046bc:	438a      	bics	r2, r1
 80046be:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2251      	movs	r2, #81	; 0x51
 80046c4:	2101      	movs	r1, #1
 80046c6:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	2202      	movs	r2, #2
 80046cc:	4013      	ands	r3, r2
 80046ce:	d103      	bne.n	80046d8 <HAL_SPI_IRQHandler+0x17c>
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	2201      	movs	r2, #1
 80046d4:	4013      	ands	r3, r2
 80046d6:	d032      	beq.n	800473e <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	685a      	ldr	r2, [r3, #4]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2103      	movs	r1, #3
 80046e4:	438a      	bics	r2, r1
 80046e6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d010      	beq.n	8004712 <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046f4:	4a17      	ldr	r2, [pc, #92]	; (8004754 <HAL_SPI_IRQHandler+0x1f8>)
 80046f6:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046fc:	0018      	movs	r0, r3
 80046fe:	f7fd fef5 	bl	80024ec <HAL_DMA_Abort_IT>
 8004702:	1e03      	subs	r3, r0, #0
 8004704:	d005      	beq.n	8004712 <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800470a:	2240      	movs	r2, #64	; 0x40
 800470c:	431a      	orrs	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004716:	2b00      	cmp	r3, #0
 8004718:	d016      	beq.n	8004748 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800471e:	4a0d      	ldr	r2, [pc, #52]	; (8004754 <HAL_SPI_IRQHandler+0x1f8>)
 8004720:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004726:	0018      	movs	r0, r3
 8004728:	f7fd fee0 	bl	80024ec <HAL_DMA_Abort_IT>
 800472c:	1e03      	subs	r3, r0, #0
 800472e:	d00b      	beq.n	8004748 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004734:	2240      	movs	r2, #64	; 0x40
 8004736:	431a      	orrs	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800473c:	e004      	b.n	8004748 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	0018      	movs	r0, r3
 8004742:	f000 f809 	bl	8004758 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004746:	e000      	b.n	800474a <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8004748:	46c0      	nop			; (mov r8, r8)
    return;
 800474a:	46c0      	nop			; (mov r8, r8)
 800474c:	46c0      	nop			; (mov r8, r8)
  }
}
 800474e:	46bd      	mov	sp, r7
 8004750:	b008      	add	sp, #32
 8004752:	bd80      	pop	{r7, pc}
 8004754:	08004769 	.word	0x08004769

08004758 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004760:	46c0      	nop			; (mov r8, r8)
 8004762:	46bd      	mov	sp, r7
 8004764:	b002      	add	sp, #8
 8004766:	bd80      	pop	{r7, pc}

08004768 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004774:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2200      	movs	r2, #0
 8004780:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	0018      	movs	r0, r3
 8004786:	f7ff ffe7 	bl	8004758 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800478a:	46c0      	nop			; (mov r8, r8)
 800478c:	46bd      	mov	sp, r7
 800478e:	b004      	add	sp, #16
 8004790:	bd80      	pop	{r7, pc}
	...

08004794 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	603b      	str	r3, [r7, #0]
 80047a0:	1dfb      	adds	r3, r7, #7
 80047a2:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047a4:	e050      	b.n	8004848 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	3301      	adds	r3, #1
 80047aa:	d04d      	beq.n	8004848 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80047ac:	f7fd fb6a 	bl	8001e84 <HAL_GetTick>
 80047b0:	0002      	movs	r2, r0
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	683a      	ldr	r2, [r7, #0]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d902      	bls.n	80047c2 <SPI_WaitFlagStateUntilTimeout+0x2e>
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d142      	bne.n	8004848 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	685a      	ldr	r2, [r3, #4]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	21e0      	movs	r1, #224	; 0xe0
 80047ce:	438a      	bics	r2, r1
 80047d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	685a      	ldr	r2, [r3, #4]
 80047d6:	2382      	movs	r3, #130	; 0x82
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	429a      	cmp	r2, r3
 80047dc:	d113      	bne.n	8004806 <SPI_WaitFlagStateUntilTimeout+0x72>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	689a      	ldr	r2, [r3, #8]
 80047e2:	2380      	movs	r3, #128	; 0x80
 80047e4:	021b      	lsls	r3, r3, #8
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d005      	beq.n	80047f6 <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	689a      	ldr	r2, [r3, #8]
 80047ee:	2380      	movs	r3, #128	; 0x80
 80047f0:	00db      	lsls	r3, r3, #3
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d107      	bne.n	8004806 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2140      	movs	r1, #64	; 0x40
 8004802:	438a      	bics	r2, r1
 8004804:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800480a:	2380      	movs	r3, #128	; 0x80
 800480c:	019b      	lsls	r3, r3, #6
 800480e:	429a      	cmp	r2, r3
 8004810:	d110      	bne.n	8004834 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4914      	ldr	r1, [pc, #80]	; (8004870 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 800481e:	400a      	ands	r2, r1
 8004820:	601a      	str	r2, [r3, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2180      	movs	r1, #128	; 0x80
 800482e:	0189      	lsls	r1, r1, #6
 8004830:	430a      	orrs	r2, r1
 8004832:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2251      	movs	r2, #81	; 0x51
 8004838:	2101      	movs	r1, #1
 800483a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2250      	movs	r2, #80	; 0x50
 8004840:	2100      	movs	r1, #0
 8004842:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e00f      	b.n	8004868 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	68ba      	ldr	r2, [r7, #8]
 8004850:	4013      	ands	r3, r2
 8004852:	68ba      	ldr	r2, [r7, #8]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	425a      	negs	r2, r3
 8004858:	4153      	adcs	r3, r2
 800485a:	b2db      	uxtb	r3, r3
 800485c:	001a      	movs	r2, r3
 800485e:	1dfb      	adds	r3, r7, #7
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	429a      	cmp	r2, r3
 8004864:	d19f      	bne.n	80047a6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	0018      	movs	r0, r3
 800486a:	46bd      	mov	sp, r7
 800486c:	b004      	add	sp, #16
 800486e:	bd80      	pop	{r7, pc}
 8004870:	ffffdfff 	.word	0xffffdfff

08004874 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b086      	sub	sp, #24
 8004878:	af02      	add	r7, sp, #8
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	2382      	movs	r3, #130	; 0x82
 8004886:	005b      	lsls	r3, r3, #1
 8004888:	429a      	cmp	r2, r3
 800488a:	d112      	bne.n	80048b2 <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	9300      	str	r3, [sp, #0]
 8004894:	0013      	movs	r3, r2
 8004896:	2200      	movs	r2, #0
 8004898:	2180      	movs	r1, #128	; 0x80
 800489a:	f7ff ff7b 	bl	8004794 <SPI_WaitFlagStateUntilTimeout>
 800489e:	1e03      	subs	r3, r0, #0
 80048a0:	d020      	beq.n	80048e4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a6:	2220      	movs	r2, #32
 80048a8:	431a      	orrs	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e019      	b.n	80048e6 <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2251      	movs	r2, #81	; 0x51
 80048b6:	5c9b      	ldrb	r3, [r3, r2]
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b05      	cmp	r3, #5
 80048bc:	d112      	bne.n	80048e4 <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80048be:	68ba      	ldr	r2, [r7, #8]
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	9300      	str	r3, [sp, #0]
 80048c6:	0013      	movs	r3, r2
 80048c8:	2200      	movs	r2, #0
 80048ca:	2101      	movs	r1, #1
 80048cc:	f7ff ff62 	bl	8004794 <SPI_WaitFlagStateUntilTimeout>
 80048d0:	1e03      	subs	r3, r0, #0
 80048d2:	d007      	beq.n	80048e4 <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d8:	2220      	movs	r2, #32
 80048da:	431a      	orrs	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e000      	b.n	80048e6 <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	0018      	movs	r0, r3
 80048e8:	46bd      	mov	sp, r7
 80048ea:	b004      	add	sp, #16
 80048ec:	bd80      	pop	{r7, pc}

080048ee <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048ee:	b580      	push	{r7, lr}
 80048f0:	b082      	sub	sp, #8
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d101      	bne.n	8004900 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e01e      	b.n	800493e <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2239      	movs	r2, #57	; 0x39
 8004904:	5c9b      	ldrb	r3, [r3, r2]
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b00      	cmp	r3, #0
 800490a:	d107      	bne.n	800491c <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2238      	movs	r2, #56	; 0x38
 8004910:	2100      	movs	r1, #0
 8004912:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	0018      	movs	r0, r3
 8004918:	f7fd f93a 	bl	8001b90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2239      	movs	r2, #57	; 0x39
 8004920:	2102      	movs	r1, #2
 8004922:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	3304      	adds	r3, #4
 800492c:	0019      	movs	r1, r3
 800492e:	0010      	movs	r0, r2
 8004930:	f000 f94a 	bl	8004bc8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2239      	movs	r2, #57	; 0x39
 8004938:	2101      	movs	r1, #1
 800493a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	0018      	movs	r0, r3
 8004940:	46bd      	mov	sp, r7
 8004942:	b002      	add	sp, #8
 8004944:	bd80      	pop	{r7, pc}

08004946 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b082      	sub	sp, #8
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d101      	bne.n	8004958 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e01e      	b.n	8004996 <HAL_TIM_OC_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2239      	movs	r2, #57	; 0x39
 800495c:	5c9b      	ldrb	r3, [r3, r2]
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2b00      	cmp	r3, #0
 8004962:	d107      	bne.n	8004974 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2238      	movs	r2, #56	; 0x38
 8004968:	2100      	movs	r1, #0
 800496a:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	0018      	movs	r0, r3
 8004970:	f000 f815 	bl	800499e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2239      	movs	r2, #57	; 0x39
 8004978:	2102      	movs	r1, #2
 800497a:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	3304      	adds	r3, #4
 8004984:	0019      	movs	r1, r3
 8004986:	0010      	movs	r0, r2
 8004988:	f000 f91e 	bl	8004bc8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2239      	movs	r2, #57	; 0x39
 8004990:	2101      	movs	r1, #1
 8004992:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	0018      	movs	r0, r3
 8004998:	46bd      	mov	sp, r7
 800499a:	b002      	add	sp, #8
 800499c:	bd80      	pop	{r7, pc}

0800499e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b082      	sub	sp, #8
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80049a6:	46c0      	nop			; (mov r8, r8)
 80049a8:	46bd      	mov	sp, r7
 80049aa:	b002      	add	sp, #8
 80049ac:	bd80      	pop	{r7, pc}

080049ae <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b084      	sub	sp, #16
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	60f8      	str	r0, [r7, #12]
 80049b6:	60b9      	str	r1, [r7, #8]
 80049b8:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2238      	movs	r2, #56	; 0x38
 80049be:	5c9b      	ldrb	r3, [r3, r2]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d101      	bne.n	80049c8 <HAL_TIM_OC_ConfigChannel+0x1a>
 80049c4:	2302      	movs	r3, #2
 80049c6:	e03c      	b.n	8004a42 <HAL_TIM_OC_ConfigChannel+0x94>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2238      	movs	r2, #56	; 0x38
 80049cc:	2101      	movs	r1, #1
 80049ce:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2239      	movs	r2, #57	; 0x39
 80049d4:	2102      	movs	r1, #2
 80049d6:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b04      	cmp	r3, #4
 80049dc:	d010      	beq.n	8004a00 <HAL_TIM_OC_ConfigChannel+0x52>
 80049de:	d802      	bhi.n	80049e6 <HAL_TIM_OC_ConfigChannel+0x38>
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d005      	beq.n	80049f0 <HAL_TIM_OC_ConfigChannel+0x42>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      break;
    }

    default:
      break;
 80049e4:	e024      	b.n	8004a30 <HAL_TIM_OC_ConfigChannel+0x82>
  switch (Channel)
 80049e6:	2b08      	cmp	r3, #8
 80049e8:	d012      	beq.n	8004a10 <HAL_TIM_OC_ConfigChannel+0x62>
 80049ea:	2b0c      	cmp	r3, #12
 80049ec:	d018      	beq.n	8004a20 <HAL_TIM_OC_ConfigChannel+0x72>
      break;
 80049ee:	e01f      	b.n	8004a30 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68ba      	ldr	r2, [r7, #8]
 80049f6:	0011      	movs	r1, r2
 80049f8:	0018      	movs	r0, r3
 80049fa:	f000 f943 	bl	8004c84 <TIM_OC1_SetConfig>
      break;
 80049fe:	e017      	b.n	8004a30 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68ba      	ldr	r2, [r7, #8]
 8004a06:	0011      	movs	r1, r2
 8004a08:	0018      	movs	r0, r3
 8004a0a:	f000 f977 	bl	8004cfc <TIM_OC2_SetConfig>
      break;
 8004a0e:	e00f      	b.n	8004a30 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68ba      	ldr	r2, [r7, #8]
 8004a16:	0011      	movs	r1, r2
 8004a18:	0018      	movs	r0, r3
 8004a1a:	f000 f9b1 	bl	8004d80 <TIM_OC3_SetConfig>
      break;
 8004a1e:	e007      	b.n	8004a30 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68ba      	ldr	r2, [r7, #8]
 8004a26:	0011      	movs	r1, r2
 8004a28:	0018      	movs	r0, r3
 8004a2a:	f000 f9e9 	bl	8004e00 <TIM_OC4_SetConfig>
      break;
 8004a2e:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2239      	movs	r2, #57	; 0x39
 8004a34:	2101      	movs	r1, #1
 8004a36:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2238      	movs	r2, #56	; 0x38
 8004a3c:	2100      	movs	r1, #0
 8004a3e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	0018      	movs	r0, r3
 8004a44:	46bd      	mov	sp, r7
 8004a46:	b004      	add	sp, #16
 8004a48:	bd80      	pop	{r7, pc}
	...

08004a4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2238      	movs	r2, #56	; 0x38
 8004a5a:	5c9b      	ldrb	r3, [r3, r2]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d101      	bne.n	8004a64 <HAL_TIM_ConfigClockSource+0x18>
 8004a60:	2302      	movs	r3, #2
 8004a62:	e0ab      	b.n	8004bbc <HAL_TIM_ConfigClockSource+0x170>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2238      	movs	r2, #56	; 0x38
 8004a68:	2101      	movs	r1, #1
 8004a6a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2239      	movs	r2, #57	; 0x39
 8004a70:	2102      	movs	r1, #2
 8004a72:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2277      	movs	r2, #119	; 0x77
 8004a80:	4393      	bics	r3, r2
 8004a82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4a4f      	ldr	r2, [pc, #316]	; (8004bc4 <HAL_TIM_ConfigClockSource+0x178>)
 8004a88:	4013      	ands	r3, r2
 8004a8a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2b40      	cmp	r3, #64	; 0x40
 8004a9a:	d100      	bne.n	8004a9e <HAL_TIM_ConfigClockSource+0x52>
 8004a9c:	e06b      	b.n	8004b76 <HAL_TIM_ConfigClockSource+0x12a>
 8004a9e:	d80e      	bhi.n	8004abe <HAL_TIM_ConfigClockSource+0x72>
 8004aa0:	2b10      	cmp	r3, #16
 8004aa2:	d100      	bne.n	8004aa6 <HAL_TIM_ConfigClockSource+0x5a>
 8004aa4:	e077      	b.n	8004b96 <HAL_TIM_ConfigClockSource+0x14a>
 8004aa6:	d803      	bhi.n	8004ab0 <HAL_TIM_ConfigClockSource+0x64>
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d100      	bne.n	8004aae <HAL_TIM_ConfigClockSource+0x62>
 8004aac:	e073      	b.n	8004b96 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004aae:	e07c      	b.n	8004baa <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8004ab0:	2b20      	cmp	r3, #32
 8004ab2:	d100      	bne.n	8004ab6 <HAL_TIM_ConfigClockSource+0x6a>
 8004ab4:	e06f      	b.n	8004b96 <HAL_TIM_ConfigClockSource+0x14a>
 8004ab6:	2b30      	cmp	r3, #48	; 0x30
 8004ab8:	d100      	bne.n	8004abc <HAL_TIM_ConfigClockSource+0x70>
 8004aba:	e06c      	b.n	8004b96 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8004abc:	e075      	b.n	8004baa <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8004abe:	2b70      	cmp	r3, #112	; 0x70
 8004ac0:	d00e      	beq.n	8004ae0 <HAL_TIM_ConfigClockSource+0x94>
 8004ac2:	d804      	bhi.n	8004ace <HAL_TIM_ConfigClockSource+0x82>
 8004ac4:	2b50      	cmp	r3, #80	; 0x50
 8004ac6:	d036      	beq.n	8004b36 <HAL_TIM_ConfigClockSource+0xea>
 8004ac8:	2b60      	cmp	r3, #96	; 0x60
 8004aca:	d044      	beq.n	8004b56 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8004acc:	e06d      	b.n	8004baa <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8004ace:	2280      	movs	r2, #128	; 0x80
 8004ad0:	0152      	lsls	r2, r2, #5
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d068      	beq.n	8004ba8 <HAL_TIM_ConfigClockSource+0x15c>
 8004ad6:	2280      	movs	r2, #128	; 0x80
 8004ad8:	0192      	lsls	r2, r2, #6
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d017      	beq.n	8004b0e <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8004ade:	e064      	b.n	8004baa <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6818      	ldr	r0, [r3, #0]
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	6899      	ldr	r1, [r3, #8]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	685a      	ldr	r2, [r3, #4]
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	f000 fa46 	bl	8004f80 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2277      	movs	r2, #119	; 0x77
 8004b00:	4313      	orrs	r3, r2
 8004b02:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	609a      	str	r2, [r3, #8]
      break;
 8004b0c:	e04d      	b.n	8004baa <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6818      	ldr	r0, [r3, #0]
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	6899      	ldr	r1, [r3, #8]
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	685a      	ldr	r2, [r3, #4]
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	f000 fa2f 	bl	8004f80 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	689a      	ldr	r2, [r3, #8]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2180      	movs	r1, #128	; 0x80
 8004b2e:	01c9      	lsls	r1, r1, #7
 8004b30:	430a      	orrs	r2, r1
 8004b32:	609a      	str	r2, [r3, #8]
      break;
 8004b34:	e039      	b.n	8004baa <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6818      	ldr	r0, [r3, #0]
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	6859      	ldr	r1, [r3, #4]
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	001a      	movs	r2, r3
 8004b44:	f000 f9a2 	bl	8004e8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2150      	movs	r1, #80	; 0x50
 8004b4e:	0018      	movs	r0, r3
 8004b50:	f000 f9fc 	bl	8004f4c <TIM_ITRx_SetConfig>
      break;
 8004b54:	e029      	b.n	8004baa <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6818      	ldr	r0, [r3, #0]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	6859      	ldr	r1, [r3, #4]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	001a      	movs	r2, r3
 8004b64:	f000 f9c0 	bl	8004ee8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2160      	movs	r1, #96	; 0x60
 8004b6e:	0018      	movs	r0, r3
 8004b70:	f000 f9ec 	bl	8004f4c <TIM_ITRx_SetConfig>
      break;
 8004b74:	e019      	b.n	8004baa <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6818      	ldr	r0, [r3, #0]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	6859      	ldr	r1, [r3, #4]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	001a      	movs	r2, r3
 8004b84:	f000 f982 	bl	8004e8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2140      	movs	r1, #64	; 0x40
 8004b8e:	0018      	movs	r0, r3
 8004b90:	f000 f9dc 	bl	8004f4c <TIM_ITRx_SetConfig>
      break;
 8004b94:	e009      	b.n	8004baa <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	0019      	movs	r1, r3
 8004ba0:	0010      	movs	r0, r2
 8004ba2:	f000 f9d3 	bl	8004f4c <TIM_ITRx_SetConfig>
      break;
 8004ba6:	e000      	b.n	8004baa <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8004ba8:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2239      	movs	r2, #57	; 0x39
 8004bae:	2101      	movs	r1, #1
 8004bb0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2238      	movs	r2, #56	; 0x38
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	0018      	movs	r0, r3
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	b004      	add	sp, #16
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	ffff00ff 	.word	0xffff00ff

08004bc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	2380      	movs	r3, #128	; 0x80
 8004bdc:	05db      	lsls	r3, r3, #23
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d00b      	beq.n	8004bfa <TIM_Base_SetConfig+0x32>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a23      	ldr	r2, [pc, #140]	; (8004c74 <TIM_Base_SetConfig+0xac>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d007      	beq.n	8004bfa <TIM_Base_SetConfig+0x32>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a22      	ldr	r2, [pc, #136]	; (8004c78 <TIM_Base_SetConfig+0xb0>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d003      	beq.n	8004bfa <TIM_Base_SetConfig+0x32>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a21      	ldr	r2, [pc, #132]	; (8004c7c <TIM_Base_SetConfig+0xb4>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d108      	bne.n	8004c0c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2270      	movs	r2, #112	; 0x70
 8004bfe:	4393      	bics	r3, r2
 8004c00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	2380      	movs	r3, #128	; 0x80
 8004c10:	05db      	lsls	r3, r3, #23
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d00b      	beq.n	8004c2e <TIM_Base_SetConfig+0x66>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a16      	ldr	r2, [pc, #88]	; (8004c74 <TIM_Base_SetConfig+0xac>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d007      	beq.n	8004c2e <TIM_Base_SetConfig+0x66>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a15      	ldr	r2, [pc, #84]	; (8004c78 <TIM_Base_SetConfig+0xb0>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d003      	beq.n	8004c2e <TIM_Base_SetConfig+0x66>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a14      	ldr	r2, [pc, #80]	; (8004c7c <TIM_Base_SetConfig+0xb4>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d108      	bne.n	8004c40 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	4a13      	ldr	r2, [pc, #76]	; (8004c80 <TIM_Base_SetConfig+0xb8>)
 8004c32:	4013      	ands	r3, r2
 8004c34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2280      	movs	r2, #128	; 0x80
 8004c44:	4393      	bics	r3, r2
 8004c46:	001a      	movs	r2, r3
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	689a      	ldr	r2, [r3, #8]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2201      	movs	r2, #1
 8004c6a:	615a      	str	r2, [r3, #20]
}
 8004c6c:	46c0      	nop			; (mov r8, r8)
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	b004      	add	sp, #16
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	40000400 	.word	0x40000400
 8004c78:	40010800 	.word	0x40010800
 8004c7c:	40011400 	.word	0x40011400
 8004c80:	fffffcff 	.word	0xfffffcff

08004c84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a1b      	ldr	r3, [r3, #32]
 8004c92:	2201      	movs	r2, #1
 8004c94:	4393      	bics	r3, r2
 8004c96:	001a      	movs	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a1b      	ldr	r3, [r3, #32]
 8004ca0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	699b      	ldr	r3, [r3, #24]
 8004cac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2270      	movs	r2, #112	; 0x70
 8004cb2:	4393      	bics	r3, r2
 8004cb4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2203      	movs	r2, #3
 8004cba:	4393      	bics	r3, r2
 8004cbc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	2202      	movs	r2, #2
 8004ccc:	4393      	bics	r3, r2
 8004cce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	685a      	ldr	r2, [r3, #4]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	621a      	str	r2, [r3, #32]
}
 8004cf4:	46c0      	nop			; (mov r8, r8)
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	b006      	add	sp, #24
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b086      	sub	sp, #24
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	2210      	movs	r2, #16
 8004d0c:	4393      	bics	r3, r2
 8004d0e:	001a      	movs	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	4a13      	ldr	r2, [pc, #76]	; (8004d78 <TIM_OC2_SetConfig+0x7c>)
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	4a12      	ldr	r2, [pc, #72]	; (8004d7c <TIM_OC2_SetConfig+0x80>)
 8004d32:	4013      	ands	r3, r2
 8004d34:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	021b      	lsls	r3, r3, #8
 8004d3c:	68fa      	ldr	r2, [r7, #12]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	2220      	movs	r2, #32
 8004d46:	4393      	bics	r3, r2
 8004d48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	011b      	lsls	r3, r3, #4
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	621a      	str	r2, [r3, #32]
}
 8004d70:	46c0      	nop			; (mov r8, r8)
 8004d72:	46bd      	mov	sp, r7
 8004d74:	b006      	add	sp, #24
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	ffff8fff 	.word	0xffff8fff
 8004d7c:	fffffcff 	.word	0xfffffcff

08004d80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b086      	sub	sp, #24
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
 8004d8e:	4a1a      	ldr	r2, [pc, #104]	; (8004df8 <TIM_OC3_SetConfig+0x78>)
 8004d90:	401a      	ands	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	69db      	ldr	r3, [r3, #28]
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2270      	movs	r2, #112	; 0x70
 8004dac:	4393      	bics	r3, r2
 8004dae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2203      	movs	r2, #3
 8004db4:	4393      	bics	r3, r2
 8004db6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	4a0d      	ldr	r2, [pc, #52]	; (8004dfc <TIM_OC3_SetConfig+0x7c>)
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	021b      	lsls	r3, r3, #8
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	685a      	ldr	r2, [r3, #4]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	621a      	str	r2, [r3, #32]
}
 8004df0:	46c0      	nop			; (mov r8, r8)
 8004df2:	46bd      	mov	sp, r7
 8004df4:	b006      	add	sp, #24
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	fffffeff 	.word	0xfffffeff
 8004dfc:	fffffdff 	.word	0xfffffdff

08004e00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	4a1b      	ldr	r2, [pc, #108]	; (8004e7c <TIM_OC4_SetConfig+0x7c>)
 8004e10:	401a      	ands	r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	69db      	ldr	r3, [r3, #28]
 8004e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	4a15      	ldr	r2, [pc, #84]	; (8004e80 <TIM_OC4_SetConfig+0x80>)
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	4a14      	ldr	r2, [pc, #80]	; (8004e84 <TIM_OC4_SetConfig+0x84>)
 8004e34:	4013      	ands	r3, r2
 8004e36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	021b      	lsls	r3, r3, #8
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	4a10      	ldr	r2, [pc, #64]	; (8004e88 <TIM_OC4_SetConfig+0x88>)
 8004e48:	4013      	ands	r3, r2
 8004e4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	031b      	lsls	r3, r3, #12
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	685a      	ldr	r2, [r3, #4]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	621a      	str	r2, [r3, #32]
}
 8004e72:	46c0      	nop			; (mov r8, r8)
 8004e74:	46bd      	mov	sp, r7
 8004e76:	b006      	add	sp, #24
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	46c0      	nop			; (mov r8, r8)
 8004e7c:	ffffefff 	.word	0xffffefff
 8004e80:	ffff8fff 	.word	0xffff8fff
 8004e84:	fffffcff 	.word	0xfffffcff
 8004e88:	ffffdfff 	.word	0xffffdfff

08004e8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b086      	sub	sp, #24
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6a1b      	ldr	r3, [r3, #32]
 8004e9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6a1b      	ldr	r3, [r3, #32]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	4393      	bics	r3, r2
 8004ea6:	001a      	movs	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	699b      	ldr	r3, [r3, #24]
 8004eb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	22f0      	movs	r2, #240	; 0xf0
 8004eb6:	4393      	bics	r3, r2
 8004eb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	011b      	lsls	r3, r3, #4
 8004ebe:	693a      	ldr	r2, [r7, #16]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	220a      	movs	r2, #10
 8004ec8:	4393      	bics	r3, r2
 8004eca:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	621a      	str	r2, [r3, #32]
}
 8004ee0:	46c0      	nop			; (mov r8, r8)
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	b006      	add	sp, #24
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b086      	sub	sp, #24
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
 8004ef8:	2210      	movs	r2, #16
 8004efa:	4393      	bics	r3, r2
 8004efc:	001a      	movs	r2, r3
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6a1b      	ldr	r3, [r3, #32]
 8004f0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	4a0d      	ldr	r2, [pc, #52]	; (8004f48 <TIM_TI2_ConfigInputStage+0x60>)
 8004f12:	4013      	ands	r3, r2
 8004f14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	031b      	lsls	r3, r3, #12
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	22a0      	movs	r2, #160	; 0xa0
 8004f24:	4393      	bics	r3, r2
 8004f26:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	011b      	lsls	r3, r3, #4
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	621a      	str	r2, [r3, #32]
}
 8004f3e:	46c0      	nop			; (mov r8, r8)
 8004f40:	46bd      	mov	sp, r7
 8004f42:	b006      	add	sp, #24
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	46c0      	nop			; (mov r8, r8)
 8004f48:	ffff0fff 	.word	0xffff0fff

08004f4c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2270      	movs	r2, #112	; 0x70
 8004f60:	4393      	bics	r3, r2
 8004f62:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f64:	683a      	ldr	r2, [r7, #0]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	2207      	movs	r2, #7
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	609a      	str	r2, [r3, #8]
}
 8004f76:	46c0      	nop			; (mov r8, r8)
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	b004      	add	sp, #16
 8004f7c:	bd80      	pop	{r7, pc}
	...

08004f80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b086      	sub	sp, #24
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]
 8004f8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	4a09      	ldr	r2, [pc, #36]	; (8004fbc <TIM_ETR_SetConfig+0x3c>)
 8004f98:	4013      	ands	r3, r2
 8004f9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	021a      	lsls	r2, r3, #8
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	431a      	orrs	r2, r3
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	697a      	ldr	r2, [r7, #20]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	697a      	ldr	r2, [r7, #20]
 8004fb2:	609a      	str	r2, [r3, #8]
}
 8004fb4:	46c0      	nop			; (mov r8, r8)
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	b006      	add	sp, #24
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	ffff00ff 	.word	0xffff00ff

08004fc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2238      	movs	r2, #56	; 0x38
 8004fce:	5c9b      	ldrb	r3, [r3, r2]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d101      	bne.n	8004fd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fd4:	2302      	movs	r3, #2
 8004fd6:	e032      	b.n	800503e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2238      	movs	r2, #56	; 0x38
 8004fdc:	2101      	movs	r1, #1
 8004fde:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2239      	movs	r2, #57	; 0x39
 8004fe4:	2102      	movs	r1, #2
 8004fe6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2270      	movs	r2, #112	; 0x70
 8004ffc:	4393      	bics	r3, r2
 8004ffe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	4313      	orrs	r3, r2
 8005008:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	2280      	movs	r2, #128	; 0x80
 800500e:	4393      	bics	r3, r2
 8005010:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	4313      	orrs	r3, r2
 800501a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68ba      	ldr	r2, [r7, #8]
 800502a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2239      	movs	r2, #57	; 0x39
 8005030:	2101      	movs	r1, #1
 8005032:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2238      	movs	r2, #56	; 0x38
 8005038:	2100      	movs	r1, #0
 800503a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	0018      	movs	r0, r3
 8005040:	46bd      	mov	sp, r7
 8005042:	b004      	add	sp, #16
 8005044:	bd80      	pop	{r7, pc}
	...

08005048 <__errno>:
 8005048:	4b01      	ldr	r3, [pc, #4]	; (8005050 <__errno+0x8>)
 800504a:	6818      	ldr	r0, [r3, #0]
 800504c:	4770      	bx	lr
 800504e:	46c0      	nop			; (mov r8, r8)
 8005050:	20000004 	.word	0x20000004

08005054 <__libc_init_array>:
 8005054:	b570      	push	{r4, r5, r6, lr}
 8005056:	2600      	movs	r6, #0
 8005058:	4d0c      	ldr	r5, [pc, #48]	; (800508c <__libc_init_array+0x38>)
 800505a:	4c0d      	ldr	r4, [pc, #52]	; (8005090 <__libc_init_array+0x3c>)
 800505c:	1b64      	subs	r4, r4, r5
 800505e:	10a4      	asrs	r4, r4, #2
 8005060:	42a6      	cmp	r6, r4
 8005062:	d109      	bne.n	8005078 <__libc_init_array+0x24>
 8005064:	2600      	movs	r6, #0
 8005066:	f000 fc29 	bl	80058bc <_init>
 800506a:	4d0a      	ldr	r5, [pc, #40]	; (8005094 <__libc_init_array+0x40>)
 800506c:	4c0a      	ldr	r4, [pc, #40]	; (8005098 <__libc_init_array+0x44>)
 800506e:	1b64      	subs	r4, r4, r5
 8005070:	10a4      	asrs	r4, r4, #2
 8005072:	42a6      	cmp	r6, r4
 8005074:	d105      	bne.n	8005082 <__libc_init_array+0x2e>
 8005076:	bd70      	pop	{r4, r5, r6, pc}
 8005078:	00b3      	lsls	r3, r6, #2
 800507a:	58eb      	ldr	r3, [r5, r3]
 800507c:	4798      	blx	r3
 800507e:	3601      	adds	r6, #1
 8005080:	e7ee      	b.n	8005060 <__libc_init_array+0xc>
 8005082:	00b3      	lsls	r3, r6, #2
 8005084:	58eb      	ldr	r3, [r5, r3]
 8005086:	4798      	blx	r3
 8005088:	3601      	adds	r6, #1
 800508a:	e7f2      	b.n	8005072 <__libc_init_array+0x1e>
 800508c:	08005ed8 	.word	0x08005ed8
 8005090:	08005ed8 	.word	0x08005ed8
 8005094:	08005ed8 	.word	0x08005ed8
 8005098:	08005edc 	.word	0x08005edc

0800509c <memcpy>:
 800509c:	2300      	movs	r3, #0
 800509e:	b510      	push	{r4, lr}
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d100      	bne.n	80050a6 <memcpy+0xa>
 80050a4:	bd10      	pop	{r4, pc}
 80050a6:	5ccc      	ldrb	r4, [r1, r3]
 80050a8:	54c4      	strb	r4, [r0, r3]
 80050aa:	3301      	adds	r3, #1
 80050ac:	e7f8      	b.n	80050a0 <memcpy+0x4>

080050ae <memset>:
 80050ae:	0003      	movs	r3, r0
 80050b0:	1812      	adds	r2, r2, r0
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d100      	bne.n	80050b8 <memset+0xa>
 80050b6:	4770      	bx	lr
 80050b8:	7019      	strb	r1, [r3, #0]
 80050ba:	3301      	adds	r3, #1
 80050bc:	e7f9      	b.n	80050b2 <memset+0x4>
	...

080050c0 <siprintf>:
 80050c0:	b40e      	push	{r1, r2, r3}
 80050c2:	b500      	push	{lr}
 80050c4:	490b      	ldr	r1, [pc, #44]	; (80050f4 <siprintf+0x34>)
 80050c6:	b09c      	sub	sp, #112	; 0x70
 80050c8:	ab1d      	add	r3, sp, #116	; 0x74
 80050ca:	9002      	str	r0, [sp, #8]
 80050cc:	9006      	str	r0, [sp, #24]
 80050ce:	9107      	str	r1, [sp, #28]
 80050d0:	9104      	str	r1, [sp, #16]
 80050d2:	4809      	ldr	r0, [pc, #36]	; (80050f8 <siprintf+0x38>)
 80050d4:	4909      	ldr	r1, [pc, #36]	; (80050fc <siprintf+0x3c>)
 80050d6:	cb04      	ldmia	r3!, {r2}
 80050d8:	9105      	str	r1, [sp, #20]
 80050da:	6800      	ldr	r0, [r0, #0]
 80050dc:	a902      	add	r1, sp, #8
 80050de:	9301      	str	r3, [sp, #4]
 80050e0:	f000 f870 	bl	80051c4 <_svfiprintf_r>
 80050e4:	2300      	movs	r3, #0
 80050e6:	9a02      	ldr	r2, [sp, #8]
 80050e8:	7013      	strb	r3, [r2, #0]
 80050ea:	b01c      	add	sp, #112	; 0x70
 80050ec:	bc08      	pop	{r3}
 80050ee:	b003      	add	sp, #12
 80050f0:	4718      	bx	r3
 80050f2:	46c0      	nop			; (mov r8, r8)
 80050f4:	7fffffff 	.word	0x7fffffff
 80050f8:	20000004 	.word	0x20000004
 80050fc:	ffff0208 	.word	0xffff0208

08005100 <__ssputs_r>:
 8005100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005102:	688e      	ldr	r6, [r1, #8]
 8005104:	b085      	sub	sp, #20
 8005106:	0007      	movs	r7, r0
 8005108:	000c      	movs	r4, r1
 800510a:	9203      	str	r2, [sp, #12]
 800510c:	9301      	str	r3, [sp, #4]
 800510e:	429e      	cmp	r6, r3
 8005110:	d83c      	bhi.n	800518c <__ssputs_r+0x8c>
 8005112:	2390      	movs	r3, #144	; 0x90
 8005114:	898a      	ldrh	r2, [r1, #12]
 8005116:	00db      	lsls	r3, r3, #3
 8005118:	421a      	tst	r2, r3
 800511a:	d034      	beq.n	8005186 <__ssputs_r+0x86>
 800511c:	2503      	movs	r5, #3
 800511e:	6909      	ldr	r1, [r1, #16]
 8005120:	6823      	ldr	r3, [r4, #0]
 8005122:	1a5b      	subs	r3, r3, r1
 8005124:	9302      	str	r3, [sp, #8]
 8005126:	6963      	ldr	r3, [r4, #20]
 8005128:	9802      	ldr	r0, [sp, #8]
 800512a:	435d      	muls	r5, r3
 800512c:	0feb      	lsrs	r3, r5, #31
 800512e:	195d      	adds	r5, r3, r5
 8005130:	9b01      	ldr	r3, [sp, #4]
 8005132:	106d      	asrs	r5, r5, #1
 8005134:	3301      	adds	r3, #1
 8005136:	181b      	adds	r3, r3, r0
 8005138:	42ab      	cmp	r3, r5
 800513a:	d900      	bls.n	800513e <__ssputs_r+0x3e>
 800513c:	001d      	movs	r5, r3
 800513e:	0553      	lsls	r3, r2, #21
 8005140:	d532      	bpl.n	80051a8 <__ssputs_r+0xa8>
 8005142:	0029      	movs	r1, r5
 8005144:	0038      	movs	r0, r7
 8005146:	f000 fb19 	bl	800577c <_malloc_r>
 800514a:	1e06      	subs	r6, r0, #0
 800514c:	d109      	bne.n	8005162 <__ssputs_r+0x62>
 800514e:	230c      	movs	r3, #12
 8005150:	603b      	str	r3, [r7, #0]
 8005152:	2340      	movs	r3, #64	; 0x40
 8005154:	2001      	movs	r0, #1
 8005156:	89a2      	ldrh	r2, [r4, #12]
 8005158:	4240      	negs	r0, r0
 800515a:	4313      	orrs	r3, r2
 800515c:	81a3      	strh	r3, [r4, #12]
 800515e:	b005      	add	sp, #20
 8005160:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005162:	9a02      	ldr	r2, [sp, #8]
 8005164:	6921      	ldr	r1, [r4, #16]
 8005166:	f7ff ff99 	bl	800509c <memcpy>
 800516a:	89a3      	ldrh	r3, [r4, #12]
 800516c:	4a14      	ldr	r2, [pc, #80]	; (80051c0 <__ssputs_r+0xc0>)
 800516e:	401a      	ands	r2, r3
 8005170:	2380      	movs	r3, #128	; 0x80
 8005172:	4313      	orrs	r3, r2
 8005174:	81a3      	strh	r3, [r4, #12]
 8005176:	9b02      	ldr	r3, [sp, #8]
 8005178:	6126      	str	r6, [r4, #16]
 800517a:	18f6      	adds	r6, r6, r3
 800517c:	6026      	str	r6, [r4, #0]
 800517e:	6165      	str	r5, [r4, #20]
 8005180:	9e01      	ldr	r6, [sp, #4]
 8005182:	1aed      	subs	r5, r5, r3
 8005184:	60a5      	str	r5, [r4, #8]
 8005186:	9b01      	ldr	r3, [sp, #4]
 8005188:	429e      	cmp	r6, r3
 800518a:	d900      	bls.n	800518e <__ssputs_r+0x8e>
 800518c:	9e01      	ldr	r6, [sp, #4]
 800518e:	0032      	movs	r2, r6
 8005190:	9903      	ldr	r1, [sp, #12]
 8005192:	6820      	ldr	r0, [r4, #0]
 8005194:	f000 fa95 	bl	80056c2 <memmove>
 8005198:	68a3      	ldr	r3, [r4, #8]
 800519a:	2000      	movs	r0, #0
 800519c:	1b9b      	subs	r3, r3, r6
 800519e:	60a3      	str	r3, [r4, #8]
 80051a0:	6823      	ldr	r3, [r4, #0]
 80051a2:	199e      	adds	r6, r3, r6
 80051a4:	6026      	str	r6, [r4, #0]
 80051a6:	e7da      	b.n	800515e <__ssputs_r+0x5e>
 80051a8:	002a      	movs	r2, r5
 80051aa:	0038      	movs	r0, r7
 80051ac:	f000 fb44 	bl	8005838 <_realloc_r>
 80051b0:	1e06      	subs	r6, r0, #0
 80051b2:	d1e0      	bne.n	8005176 <__ssputs_r+0x76>
 80051b4:	6921      	ldr	r1, [r4, #16]
 80051b6:	0038      	movs	r0, r7
 80051b8:	f000 fa96 	bl	80056e8 <_free_r>
 80051bc:	e7c7      	b.n	800514e <__ssputs_r+0x4e>
 80051be:	46c0      	nop			; (mov r8, r8)
 80051c0:	fffffb7f 	.word	0xfffffb7f

080051c4 <_svfiprintf_r>:
 80051c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051c6:	b0a1      	sub	sp, #132	; 0x84
 80051c8:	9003      	str	r0, [sp, #12]
 80051ca:	001d      	movs	r5, r3
 80051cc:	898b      	ldrh	r3, [r1, #12]
 80051ce:	000f      	movs	r7, r1
 80051d0:	0016      	movs	r6, r2
 80051d2:	061b      	lsls	r3, r3, #24
 80051d4:	d511      	bpl.n	80051fa <_svfiprintf_r+0x36>
 80051d6:	690b      	ldr	r3, [r1, #16]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d10e      	bne.n	80051fa <_svfiprintf_r+0x36>
 80051dc:	2140      	movs	r1, #64	; 0x40
 80051de:	f000 facd 	bl	800577c <_malloc_r>
 80051e2:	6038      	str	r0, [r7, #0]
 80051e4:	6138      	str	r0, [r7, #16]
 80051e6:	2800      	cmp	r0, #0
 80051e8:	d105      	bne.n	80051f6 <_svfiprintf_r+0x32>
 80051ea:	230c      	movs	r3, #12
 80051ec:	9a03      	ldr	r2, [sp, #12]
 80051ee:	3801      	subs	r0, #1
 80051f0:	6013      	str	r3, [r2, #0]
 80051f2:	b021      	add	sp, #132	; 0x84
 80051f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051f6:	2340      	movs	r3, #64	; 0x40
 80051f8:	617b      	str	r3, [r7, #20]
 80051fa:	2300      	movs	r3, #0
 80051fc:	ac08      	add	r4, sp, #32
 80051fe:	6163      	str	r3, [r4, #20]
 8005200:	3320      	adds	r3, #32
 8005202:	7663      	strb	r3, [r4, #25]
 8005204:	3310      	adds	r3, #16
 8005206:	76a3      	strb	r3, [r4, #26]
 8005208:	9507      	str	r5, [sp, #28]
 800520a:	0035      	movs	r5, r6
 800520c:	782b      	ldrb	r3, [r5, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d001      	beq.n	8005216 <_svfiprintf_r+0x52>
 8005212:	2b25      	cmp	r3, #37	; 0x25
 8005214:	d146      	bne.n	80052a4 <_svfiprintf_r+0xe0>
 8005216:	1bab      	subs	r3, r5, r6
 8005218:	9305      	str	r3, [sp, #20]
 800521a:	d00c      	beq.n	8005236 <_svfiprintf_r+0x72>
 800521c:	0032      	movs	r2, r6
 800521e:	0039      	movs	r1, r7
 8005220:	9803      	ldr	r0, [sp, #12]
 8005222:	f7ff ff6d 	bl	8005100 <__ssputs_r>
 8005226:	1c43      	adds	r3, r0, #1
 8005228:	d100      	bne.n	800522c <_svfiprintf_r+0x68>
 800522a:	e0ae      	b.n	800538a <_svfiprintf_r+0x1c6>
 800522c:	6962      	ldr	r2, [r4, #20]
 800522e:	9b05      	ldr	r3, [sp, #20]
 8005230:	4694      	mov	ip, r2
 8005232:	4463      	add	r3, ip
 8005234:	6163      	str	r3, [r4, #20]
 8005236:	782b      	ldrb	r3, [r5, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d100      	bne.n	800523e <_svfiprintf_r+0x7a>
 800523c:	e0a5      	b.n	800538a <_svfiprintf_r+0x1c6>
 800523e:	2201      	movs	r2, #1
 8005240:	2300      	movs	r3, #0
 8005242:	4252      	negs	r2, r2
 8005244:	6062      	str	r2, [r4, #4]
 8005246:	a904      	add	r1, sp, #16
 8005248:	3254      	adds	r2, #84	; 0x54
 800524a:	1852      	adds	r2, r2, r1
 800524c:	1c6e      	adds	r6, r5, #1
 800524e:	6023      	str	r3, [r4, #0]
 8005250:	60e3      	str	r3, [r4, #12]
 8005252:	60a3      	str	r3, [r4, #8]
 8005254:	7013      	strb	r3, [r2, #0]
 8005256:	65a3      	str	r3, [r4, #88]	; 0x58
 8005258:	7831      	ldrb	r1, [r6, #0]
 800525a:	2205      	movs	r2, #5
 800525c:	4853      	ldr	r0, [pc, #332]	; (80053ac <_svfiprintf_r+0x1e8>)
 800525e:	f000 fa25 	bl	80056ac <memchr>
 8005262:	1c75      	adds	r5, r6, #1
 8005264:	2800      	cmp	r0, #0
 8005266:	d11f      	bne.n	80052a8 <_svfiprintf_r+0xe4>
 8005268:	6822      	ldr	r2, [r4, #0]
 800526a:	06d3      	lsls	r3, r2, #27
 800526c:	d504      	bpl.n	8005278 <_svfiprintf_r+0xb4>
 800526e:	2353      	movs	r3, #83	; 0x53
 8005270:	a904      	add	r1, sp, #16
 8005272:	185b      	adds	r3, r3, r1
 8005274:	2120      	movs	r1, #32
 8005276:	7019      	strb	r1, [r3, #0]
 8005278:	0713      	lsls	r3, r2, #28
 800527a:	d504      	bpl.n	8005286 <_svfiprintf_r+0xc2>
 800527c:	2353      	movs	r3, #83	; 0x53
 800527e:	a904      	add	r1, sp, #16
 8005280:	185b      	adds	r3, r3, r1
 8005282:	212b      	movs	r1, #43	; 0x2b
 8005284:	7019      	strb	r1, [r3, #0]
 8005286:	7833      	ldrb	r3, [r6, #0]
 8005288:	2b2a      	cmp	r3, #42	; 0x2a
 800528a:	d016      	beq.n	80052ba <_svfiprintf_r+0xf6>
 800528c:	0035      	movs	r5, r6
 800528e:	2100      	movs	r1, #0
 8005290:	200a      	movs	r0, #10
 8005292:	68e3      	ldr	r3, [r4, #12]
 8005294:	782a      	ldrb	r2, [r5, #0]
 8005296:	1c6e      	adds	r6, r5, #1
 8005298:	3a30      	subs	r2, #48	; 0x30
 800529a:	2a09      	cmp	r2, #9
 800529c:	d94e      	bls.n	800533c <_svfiprintf_r+0x178>
 800529e:	2900      	cmp	r1, #0
 80052a0:	d018      	beq.n	80052d4 <_svfiprintf_r+0x110>
 80052a2:	e010      	b.n	80052c6 <_svfiprintf_r+0x102>
 80052a4:	3501      	adds	r5, #1
 80052a6:	e7b1      	b.n	800520c <_svfiprintf_r+0x48>
 80052a8:	4b40      	ldr	r3, [pc, #256]	; (80053ac <_svfiprintf_r+0x1e8>)
 80052aa:	6822      	ldr	r2, [r4, #0]
 80052ac:	1ac0      	subs	r0, r0, r3
 80052ae:	2301      	movs	r3, #1
 80052b0:	4083      	lsls	r3, r0
 80052b2:	4313      	orrs	r3, r2
 80052b4:	6023      	str	r3, [r4, #0]
 80052b6:	002e      	movs	r6, r5
 80052b8:	e7ce      	b.n	8005258 <_svfiprintf_r+0x94>
 80052ba:	9b07      	ldr	r3, [sp, #28]
 80052bc:	1d19      	adds	r1, r3, #4
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	9107      	str	r1, [sp, #28]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	db01      	blt.n	80052ca <_svfiprintf_r+0x106>
 80052c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80052c8:	e004      	b.n	80052d4 <_svfiprintf_r+0x110>
 80052ca:	425b      	negs	r3, r3
 80052cc:	60e3      	str	r3, [r4, #12]
 80052ce:	2302      	movs	r3, #2
 80052d0:	4313      	orrs	r3, r2
 80052d2:	6023      	str	r3, [r4, #0]
 80052d4:	782b      	ldrb	r3, [r5, #0]
 80052d6:	2b2e      	cmp	r3, #46	; 0x2e
 80052d8:	d10a      	bne.n	80052f0 <_svfiprintf_r+0x12c>
 80052da:	786b      	ldrb	r3, [r5, #1]
 80052dc:	2b2a      	cmp	r3, #42	; 0x2a
 80052de:	d135      	bne.n	800534c <_svfiprintf_r+0x188>
 80052e0:	9b07      	ldr	r3, [sp, #28]
 80052e2:	3502      	adds	r5, #2
 80052e4:	1d1a      	adds	r2, r3, #4
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	9207      	str	r2, [sp, #28]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	db2b      	blt.n	8005346 <_svfiprintf_r+0x182>
 80052ee:	9309      	str	r3, [sp, #36]	; 0x24
 80052f0:	4e2f      	ldr	r6, [pc, #188]	; (80053b0 <_svfiprintf_r+0x1ec>)
 80052f2:	7829      	ldrb	r1, [r5, #0]
 80052f4:	2203      	movs	r2, #3
 80052f6:	0030      	movs	r0, r6
 80052f8:	f000 f9d8 	bl	80056ac <memchr>
 80052fc:	2800      	cmp	r0, #0
 80052fe:	d006      	beq.n	800530e <_svfiprintf_r+0x14a>
 8005300:	2340      	movs	r3, #64	; 0x40
 8005302:	1b80      	subs	r0, r0, r6
 8005304:	4083      	lsls	r3, r0
 8005306:	6822      	ldr	r2, [r4, #0]
 8005308:	3501      	adds	r5, #1
 800530a:	4313      	orrs	r3, r2
 800530c:	6023      	str	r3, [r4, #0]
 800530e:	7829      	ldrb	r1, [r5, #0]
 8005310:	2206      	movs	r2, #6
 8005312:	4828      	ldr	r0, [pc, #160]	; (80053b4 <_svfiprintf_r+0x1f0>)
 8005314:	1c6e      	adds	r6, r5, #1
 8005316:	7621      	strb	r1, [r4, #24]
 8005318:	f000 f9c8 	bl	80056ac <memchr>
 800531c:	2800      	cmp	r0, #0
 800531e:	d03c      	beq.n	800539a <_svfiprintf_r+0x1d6>
 8005320:	4b25      	ldr	r3, [pc, #148]	; (80053b8 <_svfiprintf_r+0x1f4>)
 8005322:	2b00      	cmp	r3, #0
 8005324:	d125      	bne.n	8005372 <_svfiprintf_r+0x1ae>
 8005326:	2207      	movs	r2, #7
 8005328:	9b07      	ldr	r3, [sp, #28]
 800532a:	3307      	adds	r3, #7
 800532c:	4393      	bics	r3, r2
 800532e:	3308      	adds	r3, #8
 8005330:	9307      	str	r3, [sp, #28]
 8005332:	6963      	ldr	r3, [r4, #20]
 8005334:	9a04      	ldr	r2, [sp, #16]
 8005336:	189b      	adds	r3, r3, r2
 8005338:	6163      	str	r3, [r4, #20]
 800533a:	e766      	b.n	800520a <_svfiprintf_r+0x46>
 800533c:	4343      	muls	r3, r0
 800533e:	2101      	movs	r1, #1
 8005340:	189b      	adds	r3, r3, r2
 8005342:	0035      	movs	r5, r6
 8005344:	e7a6      	b.n	8005294 <_svfiprintf_r+0xd0>
 8005346:	2301      	movs	r3, #1
 8005348:	425b      	negs	r3, r3
 800534a:	e7d0      	b.n	80052ee <_svfiprintf_r+0x12a>
 800534c:	2300      	movs	r3, #0
 800534e:	200a      	movs	r0, #10
 8005350:	001a      	movs	r2, r3
 8005352:	3501      	adds	r5, #1
 8005354:	6063      	str	r3, [r4, #4]
 8005356:	7829      	ldrb	r1, [r5, #0]
 8005358:	1c6e      	adds	r6, r5, #1
 800535a:	3930      	subs	r1, #48	; 0x30
 800535c:	2909      	cmp	r1, #9
 800535e:	d903      	bls.n	8005368 <_svfiprintf_r+0x1a4>
 8005360:	2b00      	cmp	r3, #0
 8005362:	d0c5      	beq.n	80052f0 <_svfiprintf_r+0x12c>
 8005364:	9209      	str	r2, [sp, #36]	; 0x24
 8005366:	e7c3      	b.n	80052f0 <_svfiprintf_r+0x12c>
 8005368:	4342      	muls	r2, r0
 800536a:	2301      	movs	r3, #1
 800536c:	1852      	adds	r2, r2, r1
 800536e:	0035      	movs	r5, r6
 8005370:	e7f1      	b.n	8005356 <_svfiprintf_r+0x192>
 8005372:	ab07      	add	r3, sp, #28
 8005374:	9300      	str	r3, [sp, #0]
 8005376:	003a      	movs	r2, r7
 8005378:	4b10      	ldr	r3, [pc, #64]	; (80053bc <_svfiprintf_r+0x1f8>)
 800537a:	0021      	movs	r1, r4
 800537c:	9803      	ldr	r0, [sp, #12]
 800537e:	e000      	b.n	8005382 <_svfiprintf_r+0x1be>
 8005380:	bf00      	nop
 8005382:	9004      	str	r0, [sp, #16]
 8005384:	9b04      	ldr	r3, [sp, #16]
 8005386:	3301      	adds	r3, #1
 8005388:	d1d3      	bne.n	8005332 <_svfiprintf_r+0x16e>
 800538a:	89bb      	ldrh	r3, [r7, #12]
 800538c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800538e:	065b      	lsls	r3, r3, #25
 8005390:	d400      	bmi.n	8005394 <_svfiprintf_r+0x1d0>
 8005392:	e72e      	b.n	80051f2 <_svfiprintf_r+0x2e>
 8005394:	2001      	movs	r0, #1
 8005396:	4240      	negs	r0, r0
 8005398:	e72b      	b.n	80051f2 <_svfiprintf_r+0x2e>
 800539a:	ab07      	add	r3, sp, #28
 800539c:	9300      	str	r3, [sp, #0]
 800539e:	003a      	movs	r2, r7
 80053a0:	4b06      	ldr	r3, [pc, #24]	; (80053bc <_svfiprintf_r+0x1f8>)
 80053a2:	0021      	movs	r1, r4
 80053a4:	9803      	ldr	r0, [sp, #12]
 80053a6:	f000 f879 	bl	800549c <_printf_i>
 80053aa:	e7ea      	b.n	8005382 <_svfiprintf_r+0x1be>
 80053ac:	08005ea5 	.word	0x08005ea5
 80053b0:	08005eab 	.word	0x08005eab
 80053b4:	08005eaf 	.word	0x08005eaf
 80053b8:	00000000 	.word	0x00000000
 80053bc:	08005101 	.word	0x08005101

080053c0 <_printf_common>:
 80053c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053c2:	0015      	movs	r5, r2
 80053c4:	9301      	str	r3, [sp, #4]
 80053c6:	688a      	ldr	r2, [r1, #8]
 80053c8:	690b      	ldr	r3, [r1, #16]
 80053ca:	9000      	str	r0, [sp, #0]
 80053cc:	000c      	movs	r4, r1
 80053ce:	4293      	cmp	r3, r2
 80053d0:	da00      	bge.n	80053d4 <_printf_common+0x14>
 80053d2:	0013      	movs	r3, r2
 80053d4:	0022      	movs	r2, r4
 80053d6:	602b      	str	r3, [r5, #0]
 80053d8:	3243      	adds	r2, #67	; 0x43
 80053da:	7812      	ldrb	r2, [r2, #0]
 80053dc:	2a00      	cmp	r2, #0
 80053de:	d001      	beq.n	80053e4 <_printf_common+0x24>
 80053e0:	3301      	adds	r3, #1
 80053e2:	602b      	str	r3, [r5, #0]
 80053e4:	6823      	ldr	r3, [r4, #0]
 80053e6:	069b      	lsls	r3, r3, #26
 80053e8:	d502      	bpl.n	80053f0 <_printf_common+0x30>
 80053ea:	682b      	ldr	r3, [r5, #0]
 80053ec:	3302      	adds	r3, #2
 80053ee:	602b      	str	r3, [r5, #0]
 80053f0:	2706      	movs	r7, #6
 80053f2:	6823      	ldr	r3, [r4, #0]
 80053f4:	401f      	ands	r7, r3
 80053f6:	d027      	beq.n	8005448 <_printf_common+0x88>
 80053f8:	0023      	movs	r3, r4
 80053fa:	3343      	adds	r3, #67	; 0x43
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	1e5a      	subs	r2, r3, #1
 8005400:	4193      	sbcs	r3, r2
 8005402:	6822      	ldr	r2, [r4, #0]
 8005404:	0692      	lsls	r2, r2, #26
 8005406:	d430      	bmi.n	800546a <_printf_common+0xaa>
 8005408:	0022      	movs	r2, r4
 800540a:	9901      	ldr	r1, [sp, #4]
 800540c:	3243      	adds	r2, #67	; 0x43
 800540e:	9800      	ldr	r0, [sp, #0]
 8005410:	9e08      	ldr	r6, [sp, #32]
 8005412:	47b0      	blx	r6
 8005414:	1c43      	adds	r3, r0, #1
 8005416:	d025      	beq.n	8005464 <_printf_common+0xa4>
 8005418:	2306      	movs	r3, #6
 800541a:	6820      	ldr	r0, [r4, #0]
 800541c:	682a      	ldr	r2, [r5, #0]
 800541e:	68e1      	ldr	r1, [r4, #12]
 8005420:	4003      	ands	r3, r0
 8005422:	2500      	movs	r5, #0
 8005424:	2b04      	cmp	r3, #4
 8005426:	d103      	bne.n	8005430 <_printf_common+0x70>
 8005428:	1a8d      	subs	r5, r1, r2
 800542a:	43eb      	mvns	r3, r5
 800542c:	17db      	asrs	r3, r3, #31
 800542e:	401d      	ands	r5, r3
 8005430:	68a3      	ldr	r3, [r4, #8]
 8005432:	6922      	ldr	r2, [r4, #16]
 8005434:	4293      	cmp	r3, r2
 8005436:	dd01      	ble.n	800543c <_printf_common+0x7c>
 8005438:	1a9b      	subs	r3, r3, r2
 800543a:	18ed      	adds	r5, r5, r3
 800543c:	2700      	movs	r7, #0
 800543e:	42bd      	cmp	r5, r7
 8005440:	d120      	bne.n	8005484 <_printf_common+0xc4>
 8005442:	2000      	movs	r0, #0
 8005444:	e010      	b.n	8005468 <_printf_common+0xa8>
 8005446:	3701      	adds	r7, #1
 8005448:	68e3      	ldr	r3, [r4, #12]
 800544a:	682a      	ldr	r2, [r5, #0]
 800544c:	1a9b      	subs	r3, r3, r2
 800544e:	42bb      	cmp	r3, r7
 8005450:	ddd2      	ble.n	80053f8 <_printf_common+0x38>
 8005452:	0022      	movs	r2, r4
 8005454:	2301      	movs	r3, #1
 8005456:	3219      	adds	r2, #25
 8005458:	9901      	ldr	r1, [sp, #4]
 800545a:	9800      	ldr	r0, [sp, #0]
 800545c:	9e08      	ldr	r6, [sp, #32]
 800545e:	47b0      	blx	r6
 8005460:	1c43      	adds	r3, r0, #1
 8005462:	d1f0      	bne.n	8005446 <_printf_common+0x86>
 8005464:	2001      	movs	r0, #1
 8005466:	4240      	negs	r0, r0
 8005468:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800546a:	2030      	movs	r0, #48	; 0x30
 800546c:	18e1      	adds	r1, r4, r3
 800546e:	3143      	adds	r1, #67	; 0x43
 8005470:	7008      	strb	r0, [r1, #0]
 8005472:	0021      	movs	r1, r4
 8005474:	1c5a      	adds	r2, r3, #1
 8005476:	3145      	adds	r1, #69	; 0x45
 8005478:	7809      	ldrb	r1, [r1, #0]
 800547a:	18a2      	adds	r2, r4, r2
 800547c:	3243      	adds	r2, #67	; 0x43
 800547e:	3302      	adds	r3, #2
 8005480:	7011      	strb	r1, [r2, #0]
 8005482:	e7c1      	b.n	8005408 <_printf_common+0x48>
 8005484:	0022      	movs	r2, r4
 8005486:	2301      	movs	r3, #1
 8005488:	321a      	adds	r2, #26
 800548a:	9901      	ldr	r1, [sp, #4]
 800548c:	9800      	ldr	r0, [sp, #0]
 800548e:	9e08      	ldr	r6, [sp, #32]
 8005490:	47b0      	blx	r6
 8005492:	1c43      	adds	r3, r0, #1
 8005494:	d0e6      	beq.n	8005464 <_printf_common+0xa4>
 8005496:	3701      	adds	r7, #1
 8005498:	e7d1      	b.n	800543e <_printf_common+0x7e>
	...

0800549c <_printf_i>:
 800549c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800549e:	b089      	sub	sp, #36	; 0x24
 80054a0:	9204      	str	r2, [sp, #16]
 80054a2:	000a      	movs	r2, r1
 80054a4:	3243      	adds	r2, #67	; 0x43
 80054a6:	9305      	str	r3, [sp, #20]
 80054a8:	9003      	str	r0, [sp, #12]
 80054aa:	9202      	str	r2, [sp, #8]
 80054ac:	7e0a      	ldrb	r2, [r1, #24]
 80054ae:	000c      	movs	r4, r1
 80054b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054b2:	2a6e      	cmp	r2, #110	; 0x6e
 80054b4:	d100      	bne.n	80054b8 <_printf_i+0x1c>
 80054b6:	e086      	b.n	80055c6 <_printf_i+0x12a>
 80054b8:	d81f      	bhi.n	80054fa <_printf_i+0x5e>
 80054ba:	2a63      	cmp	r2, #99	; 0x63
 80054bc:	d033      	beq.n	8005526 <_printf_i+0x8a>
 80054be:	d808      	bhi.n	80054d2 <_printf_i+0x36>
 80054c0:	2a00      	cmp	r2, #0
 80054c2:	d100      	bne.n	80054c6 <_printf_i+0x2a>
 80054c4:	e08c      	b.n	80055e0 <_printf_i+0x144>
 80054c6:	2a58      	cmp	r2, #88	; 0x58
 80054c8:	d04d      	beq.n	8005566 <_printf_i+0xca>
 80054ca:	0025      	movs	r5, r4
 80054cc:	3542      	adds	r5, #66	; 0x42
 80054ce:	702a      	strb	r2, [r5, #0]
 80054d0:	e030      	b.n	8005534 <_printf_i+0x98>
 80054d2:	2a64      	cmp	r2, #100	; 0x64
 80054d4:	d001      	beq.n	80054da <_printf_i+0x3e>
 80054d6:	2a69      	cmp	r2, #105	; 0x69
 80054d8:	d1f7      	bne.n	80054ca <_printf_i+0x2e>
 80054da:	6819      	ldr	r1, [r3, #0]
 80054dc:	6825      	ldr	r5, [r4, #0]
 80054de:	1d0a      	adds	r2, r1, #4
 80054e0:	0628      	lsls	r0, r5, #24
 80054e2:	d529      	bpl.n	8005538 <_printf_i+0x9c>
 80054e4:	6808      	ldr	r0, [r1, #0]
 80054e6:	601a      	str	r2, [r3, #0]
 80054e8:	2800      	cmp	r0, #0
 80054ea:	da03      	bge.n	80054f4 <_printf_i+0x58>
 80054ec:	232d      	movs	r3, #45	; 0x2d
 80054ee:	9a02      	ldr	r2, [sp, #8]
 80054f0:	4240      	negs	r0, r0
 80054f2:	7013      	strb	r3, [r2, #0]
 80054f4:	4e6b      	ldr	r6, [pc, #428]	; (80056a4 <_printf_i+0x208>)
 80054f6:	270a      	movs	r7, #10
 80054f8:	e04f      	b.n	800559a <_printf_i+0xfe>
 80054fa:	2a73      	cmp	r2, #115	; 0x73
 80054fc:	d074      	beq.n	80055e8 <_printf_i+0x14c>
 80054fe:	d808      	bhi.n	8005512 <_printf_i+0x76>
 8005500:	2a6f      	cmp	r2, #111	; 0x6f
 8005502:	d01f      	beq.n	8005544 <_printf_i+0xa8>
 8005504:	2a70      	cmp	r2, #112	; 0x70
 8005506:	d1e0      	bne.n	80054ca <_printf_i+0x2e>
 8005508:	2220      	movs	r2, #32
 800550a:	6809      	ldr	r1, [r1, #0]
 800550c:	430a      	orrs	r2, r1
 800550e:	6022      	str	r2, [r4, #0]
 8005510:	e003      	b.n	800551a <_printf_i+0x7e>
 8005512:	2a75      	cmp	r2, #117	; 0x75
 8005514:	d016      	beq.n	8005544 <_printf_i+0xa8>
 8005516:	2a78      	cmp	r2, #120	; 0x78
 8005518:	d1d7      	bne.n	80054ca <_printf_i+0x2e>
 800551a:	0022      	movs	r2, r4
 800551c:	2178      	movs	r1, #120	; 0x78
 800551e:	3245      	adds	r2, #69	; 0x45
 8005520:	7011      	strb	r1, [r2, #0]
 8005522:	4e61      	ldr	r6, [pc, #388]	; (80056a8 <_printf_i+0x20c>)
 8005524:	e022      	b.n	800556c <_printf_i+0xd0>
 8005526:	0025      	movs	r5, r4
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	3542      	adds	r5, #66	; 0x42
 800552c:	1d11      	adds	r1, r2, #4
 800552e:	6019      	str	r1, [r3, #0]
 8005530:	6813      	ldr	r3, [r2, #0]
 8005532:	702b      	strb	r3, [r5, #0]
 8005534:	2301      	movs	r3, #1
 8005536:	e065      	b.n	8005604 <_printf_i+0x168>
 8005538:	6808      	ldr	r0, [r1, #0]
 800553a:	601a      	str	r2, [r3, #0]
 800553c:	0669      	lsls	r1, r5, #25
 800553e:	d5d3      	bpl.n	80054e8 <_printf_i+0x4c>
 8005540:	b200      	sxth	r0, r0
 8005542:	e7d1      	b.n	80054e8 <_printf_i+0x4c>
 8005544:	6819      	ldr	r1, [r3, #0]
 8005546:	6825      	ldr	r5, [r4, #0]
 8005548:	1d08      	adds	r0, r1, #4
 800554a:	6018      	str	r0, [r3, #0]
 800554c:	6808      	ldr	r0, [r1, #0]
 800554e:	062e      	lsls	r6, r5, #24
 8005550:	d505      	bpl.n	800555e <_printf_i+0xc2>
 8005552:	4e54      	ldr	r6, [pc, #336]	; (80056a4 <_printf_i+0x208>)
 8005554:	2708      	movs	r7, #8
 8005556:	2a6f      	cmp	r2, #111	; 0x6f
 8005558:	d01b      	beq.n	8005592 <_printf_i+0xf6>
 800555a:	270a      	movs	r7, #10
 800555c:	e019      	b.n	8005592 <_printf_i+0xf6>
 800555e:	066d      	lsls	r5, r5, #25
 8005560:	d5f7      	bpl.n	8005552 <_printf_i+0xb6>
 8005562:	b280      	uxth	r0, r0
 8005564:	e7f5      	b.n	8005552 <_printf_i+0xb6>
 8005566:	3145      	adds	r1, #69	; 0x45
 8005568:	4e4e      	ldr	r6, [pc, #312]	; (80056a4 <_printf_i+0x208>)
 800556a:	700a      	strb	r2, [r1, #0]
 800556c:	6818      	ldr	r0, [r3, #0]
 800556e:	6822      	ldr	r2, [r4, #0]
 8005570:	1d01      	adds	r1, r0, #4
 8005572:	6800      	ldr	r0, [r0, #0]
 8005574:	6019      	str	r1, [r3, #0]
 8005576:	0615      	lsls	r5, r2, #24
 8005578:	d521      	bpl.n	80055be <_printf_i+0x122>
 800557a:	07d3      	lsls	r3, r2, #31
 800557c:	d502      	bpl.n	8005584 <_printf_i+0xe8>
 800557e:	2320      	movs	r3, #32
 8005580:	431a      	orrs	r2, r3
 8005582:	6022      	str	r2, [r4, #0]
 8005584:	2710      	movs	r7, #16
 8005586:	2800      	cmp	r0, #0
 8005588:	d103      	bne.n	8005592 <_printf_i+0xf6>
 800558a:	2320      	movs	r3, #32
 800558c:	6822      	ldr	r2, [r4, #0]
 800558e:	439a      	bics	r2, r3
 8005590:	6022      	str	r2, [r4, #0]
 8005592:	0023      	movs	r3, r4
 8005594:	2200      	movs	r2, #0
 8005596:	3343      	adds	r3, #67	; 0x43
 8005598:	701a      	strb	r2, [r3, #0]
 800559a:	6863      	ldr	r3, [r4, #4]
 800559c:	60a3      	str	r3, [r4, #8]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	db58      	blt.n	8005654 <_printf_i+0x1b8>
 80055a2:	2204      	movs	r2, #4
 80055a4:	6821      	ldr	r1, [r4, #0]
 80055a6:	4391      	bics	r1, r2
 80055a8:	6021      	str	r1, [r4, #0]
 80055aa:	2800      	cmp	r0, #0
 80055ac:	d154      	bne.n	8005658 <_printf_i+0x1bc>
 80055ae:	9d02      	ldr	r5, [sp, #8]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d05a      	beq.n	800566a <_printf_i+0x1ce>
 80055b4:	0025      	movs	r5, r4
 80055b6:	7833      	ldrb	r3, [r6, #0]
 80055b8:	3542      	adds	r5, #66	; 0x42
 80055ba:	702b      	strb	r3, [r5, #0]
 80055bc:	e055      	b.n	800566a <_printf_i+0x1ce>
 80055be:	0655      	lsls	r5, r2, #25
 80055c0:	d5db      	bpl.n	800557a <_printf_i+0xde>
 80055c2:	b280      	uxth	r0, r0
 80055c4:	e7d9      	b.n	800557a <_printf_i+0xde>
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	680d      	ldr	r5, [r1, #0]
 80055ca:	1d10      	adds	r0, r2, #4
 80055cc:	6949      	ldr	r1, [r1, #20]
 80055ce:	6018      	str	r0, [r3, #0]
 80055d0:	6813      	ldr	r3, [r2, #0]
 80055d2:	062e      	lsls	r6, r5, #24
 80055d4:	d501      	bpl.n	80055da <_printf_i+0x13e>
 80055d6:	6019      	str	r1, [r3, #0]
 80055d8:	e002      	b.n	80055e0 <_printf_i+0x144>
 80055da:	066d      	lsls	r5, r5, #25
 80055dc:	d5fb      	bpl.n	80055d6 <_printf_i+0x13a>
 80055de:	8019      	strh	r1, [r3, #0]
 80055e0:	2300      	movs	r3, #0
 80055e2:	9d02      	ldr	r5, [sp, #8]
 80055e4:	6123      	str	r3, [r4, #16]
 80055e6:	e04f      	b.n	8005688 <_printf_i+0x1ec>
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	1d11      	adds	r1, r2, #4
 80055ec:	6019      	str	r1, [r3, #0]
 80055ee:	6815      	ldr	r5, [r2, #0]
 80055f0:	2100      	movs	r1, #0
 80055f2:	6862      	ldr	r2, [r4, #4]
 80055f4:	0028      	movs	r0, r5
 80055f6:	f000 f859 	bl	80056ac <memchr>
 80055fa:	2800      	cmp	r0, #0
 80055fc:	d001      	beq.n	8005602 <_printf_i+0x166>
 80055fe:	1b40      	subs	r0, r0, r5
 8005600:	6060      	str	r0, [r4, #4]
 8005602:	6863      	ldr	r3, [r4, #4]
 8005604:	6123      	str	r3, [r4, #16]
 8005606:	2300      	movs	r3, #0
 8005608:	9a02      	ldr	r2, [sp, #8]
 800560a:	7013      	strb	r3, [r2, #0]
 800560c:	e03c      	b.n	8005688 <_printf_i+0x1ec>
 800560e:	6923      	ldr	r3, [r4, #16]
 8005610:	002a      	movs	r2, r5
 8005612:	9904      	ldr	r1, [sp, #16]
 8005614:	9803      	ldr	r0, [sp, #12]
 8005616:	9d05      	ldr	r5, [sp, #20]
 8005618:	47a8      	blx	r5
 800561a:	1c43      	adds	r3, r0, #1
 800561c:	d03e      	beq.n	800569c <_printf_i+0x200>
 800561e:	6823      	ldr	r3, [r4, #0]
 8005620:	079b      	lsls	r3, r3, #30
 8005622:	d415      	bmi.n	8005650 <_printf_i+0x1b4>
 8005624:	9b07      	ldr	r3, [sp, #28]
 8005626:	68e0      	ldr	r0, [r4, #12]
 8005628:	4298      	cmp	r0, r3
 800562a:	da39      	bge.n	80056a0 <_printf_i+0x204>
 800562c:	0018      	movs	r0, r3
 800562e:	e037      	b.n	80056a0 <_printf_i+0x204>
 8005630:	0022      	movs	r2, r4
 8005632:	2301      	movs	r3, #1
 8005634:	3219      	adds	r2, #25
 8005636:	9904      	ldr	r1, [sp, #16]
 8005638:	9803      	ldr	r0, [sp, #12]
 800563a:	9e05      	ldr	r6, [sp, #20]
 800563c:	47b0      	blx	r6
 800563e:	1c43      	adds	r3, r0, #1
 8005640:	d02c      	beq.n	800569c <_printf_i+0x200>
 8005642:	3501      	adds	r5, #1
 8005644:	68e3      	ldr	r3, [r4, #12]
 8005646:	9a07      	ldr	r2, [sp, #28]
 8005648:	1a9b      	subs	r3, r3, r2
 800564a:	42ab      	cmp	r3, r5
 800564c:	dcf0      	bgt.n	8005630 <_printf_i+0x194>
 800564e:	e7e9      	b.n	8005624 <_printf_i+0x188>
 8005650:	2500      	movs	r5, #0
 8005652:	e7f7      	b.n	8005644 <_printf_i+0x1a8>
 8005654:	2800      	cmp	r0, #0
 8005656:	d0ad      	beq.n	80055b4 <_printf_i+0x118>
 8005658:	9d02      	ldr	r5, [sp, #8]
 800565a:	0039      	movs	r1, r7
 800565c:	f7fa fdda 	bl	8000214 <__aeabi_uidivmod>
 8005660:	5c73      	ldrb	r3, [r6, r1]
 8005662:	3d01      	subs	r5, #1
 8005664:	702b      	strb	r3, [r5, #0]
 8005666:	2800      	cmp	r0, #0
 8005668:	d1f7      	bne.n	800565a <_printf_i+0x1be>
 800566a:	2f08      	cmp	r7, #8
 800566c:	d109      	bne.n	8005682 <_printf_i+0x1e6>
 800566e:	6823      	ldr	r3, [r4, #0]
 8005670:	07db      	lsls	r3, r3, #31
 8005672:	d506      	bpl.n	8005682 <_printf_i+0x1e6>
 8005674:	6863      	ldr	r3, [r4, #4]
 8005676:	6922      	ldr	r2, [r4, #16]
 8005678:	4293      	cmp	r3, r2
 800567a:	dc02      	bgt.n	8005682 <_printf_i+0x1e6>
 800567c:	2330      	movs	r3, #48	; 0x30
 800567e:	3d01      	subs	r5, #1
 8005680:	702b      	strb	r3, [r5, #0]
 8005682:	9b02      	ldr	r3, [sp, #8]
 8005684:	1b5b      	subs	r3, r3, r5
 8005686:	6123      	str	r3, [r4, #16]
 8005688:	9b05      	ldr	r3, [sp, #20]
 800568a:	aa07      	add	r2, sp, #28
 800568c:	9300      	str	r3, [sp, #0]
 800568e:	0021      	movs	r1, r4
 8005690:	9b04      	ldr	r3, [sp, #16]
 8005692:	9803      	ldr	r0, [sp, #12]
 8005694:	f7ff fe94 	bl	80053c0 <_printf_common>
 8005698:	1c43      	adds	r3, r0, #1
 800569a:	d1b8      	bne.n	800560e <_printf_i+0x172>
 800569c:	2001      	movs	r0, #1
 800569e:	4240      	negs	r0, r0
 80056a0:	b009      	add	sp, #36	; 0x24
 80056a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056a4:	08005eb6 	.word	0x08005eb6
 80056a8:	08005ec7 	.word	0x08005ec7

080056ac <memchr>:
 80056ac:	b2c9      	uxtb	r1, r1
 80056ae:	1882      	adds	r2, r0, r2
 80056b0:	4290      	cmp	r0, r2
 80056b2:	d101      	bne.n	80056b8 <memchr+0xc>
 80056b4:	2000      	movs	r0, #0
 80056b6:	4770      	bx	lr
 80056b8:	7803      	ldrb	r3, [r0, #0]
 80056ba:	428b      	cmp	r3, r1
 80056bc:	d0fb      	beq.n	80056b6 <memchr+0xa>
 80056be:	3001      	adds	r0, #1
 80056c0:	e7f6      	b.n	80056b0 <memchr+0x4>

080056c2 <memmove>:
 80056c2:	b510      	push	{r4, lr}
 80056c4:	4288      	cmp	r0, r1
 80056c6:	d902      	bls.n	80056ce <memmove+0xc>
 80056c8:	188b      	adds	r3, r1, r2
 80056ca:	4298      	cmp	r0, r3
 80056cc:	d303      	bcc.n	80056d6 <memmove+0x14>
 80056ce:	2300      	movs	r3, #0
 80056d0:	e007      	b.n	80056e2 <memmove+0x20>
 80056d2:	5c8b      	ldrb	r3, [r1, r2]
 80056d4:	5483      	strb	r3, [r0, r2]
 80056d6:	3a01      	subs	r2, #1
 80056d8:	d2fb      	bcs.n	80056d2 <memmove+0x10>
 80056da:	bd10      	pop	{r4, pc}
 80056dc:	5ccc      	ldrb	r4, [r1, r3]
 80056de:	54c4      	strb	r4, [r0, r3]
 80056e0:	3301      	adds	r3, #1
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d1fa      	bne.n	80056dc <memmove+0x1a>
 80056e6:	e7f8      	b.n	80056da <memmove+0x18>

080056e8 <_free_r>:
 80056e8:	b570      	push	{r4, r5, r6, lr}
 80056ea:	0005      	movs	r5, r0
 80056ec:	2900      	cmp	r1, #0
 80056ee:	d010      	beq.n	8005712 <_free_r+0x2a>
 80056f0:	1f0c      	subs	r4, r1, #4
 80056f2:	6823      	ldr	r3, [r4, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	da00      	bge.n	80056fa <_free_r+0x12>
 80056f8:	18e4      	adds	r4, r4, r3
 80056fa:	0028      	movs	r0, r5
 80056fc:	f000 f8d4 	bl	80058a8 <__malloc_lock>
 8005700:	4a1d      	ldr	r2, [pc, #116]	; (8005778 <_free_r+0x90>)
 8005702:	6813      	ldr	r3, [r2, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d105      	bne.n	8005714 <_free_r+0x2c>
 8005708:	6063      	str	r3, [r4, #4]
 800570a:	6014      	str	r4, [r2, #0]
 800570c:	0028      	movs	r0, r5
 800570e:	f000 f8cc 	bl	80058aa <__malloc_unlock>
 8005712:	bd70      	pop	{r4, r5, r6, pc}
 8005714:	42a3      	cmp	r3, r4
 8005716:	d909      	bls.n	800572c <_free_r+0x44>
 8005718:	6821      	ldr	r1, [r4, #0]
 800571a:	1860      	adds	r0, r4, r1
 800571c:	4283      	cmp	r3, r0
 800571e:	d1f3      	bne.n	8005708 <_free_r+0x20>
 8005720:	6818      	ldr	r0, [r3, #0]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	1841      	adds	r1, r0, r1
 8005726:	6021      	str	r1, [r4, #0]
 8005728:	e7ee      	b.n	8005708 <_free_r+0x20>
 800572a:	0013      	movs	r3, r2
 800572c:	685a      	ldr	r2, [r3, #4]
 800572e:	2a00      	cmp	r2, #0
 8005730:	d001      	beq.n	8005736 <_free_r+0x4e>
 8005732:	42a2      	cmp	r2, r4
 8005734:	d9f9      	bls.n	800572a <_free_r+0x42>
 8005736:	6819      	ldr	r1, [r3, #0]
 8005738:	1858      	adds	r0, r3, r1
 800573a:	42a0      	cmp	r0, r4
 800573c:	d10b      	bne.n	8005756 <_free_r+0x6e>
 800573e:	6820      	ldr	r0, [r4, #0]
 8005740:	1809      	adds	r1, r1, r0
 8005742:	1858      	adds	r0, r3, r1
 8005744:	6019      	str	r1, [r3, #0]
 8005746:	4282      	cmp	r2, r0
 8005748:	d1e0      	bne.n	800570c <_free_r+0x24>
 800574a:	6810      	ldr	r0, [r2, #0]
 800574c:	6852      	ldr	r2, [r2, #4]
 800574e:	1841      	adds	r1, r0, r1
 8005750:	6019      	str	r1, [r3, #0]
 8005752:	605a      	str	r2, [r3, #4]
 8005754:	e7da      	b.n	800570c <_free_r+0x24>
 8005756:	42a0      	cmp	r0, r4
 8005758:	d902      	bls.n	8005760 <_free_r+0x78>
 800575a:	230c      	movs	r3, #12
 800575c:	602b      	str	r3, [r5, #0]
 800575e:	e7d5      	b.n	800570c <_free_r+0x24>
 8005760:	6821      	ldr	r1, [r4, #0]
 8005762:	1860      	adds	r0, r4, r1
 8005764:	4282      	cmp	r2, r0
 8005766:	d103      	bne.n	8005770 <_free_r+0x88>
 8005768:	6810      	ldr	r0, [r2, #0]
 800576a:	6852      	ldr	r2, [r2, #4]
 800576c:	1841      	adds	r1, r0, r1
 800576e:	6021      	str	r1, [r4, #0]
 8005770:	6062      	str	r2, [r4, #4]
 8005772:	605c      	str	r4, [r3, #4]
 8005774:	e7ca      	b.n	800570c <_free_r+0x24>
 8005776:	46c0      	nop			; (mov r8, r8)
 8005778:	200000b4 	.word	0x200000b4

0800577c <_malloc_r>:
 800577c:	2303      	movs	r3, #3
 800577e:	b570      	push	{r4, r5, r6, lr}
 8005780:	1ccd      	adds	r5, r1, #3
 8005782:	439d      	bics	r5, r3
 8005784:	3508      	adds	r5, #8
 8005786:	0006      	movs	r6, r0
 8005788:	2d0c      	cmp	r5, #12
 800578a:	d21e      	bcs.n	80057ca <_malloc_r+0x4e>
 800578c:	250c      	movs	r5, #12
 800578e:	42a9      	cmp	r1, r5
 8005790:	d81d      	bhi.n	80057ce <_malloc_r+0x52>
 8005792:	0030      	movs	r0, r6
 8005794:	f000 f888 	bl	80058a8 <__malloc_lock>
 8005798:	4a25      	ldr	r2, [pc, #148]	; (8005830 <_malloc_r+0xb4>)
 800579a:	6814      	ldr	r4, [r2, #0]
 800579c:	0021      	movs	r1, r4
 800579e:	2900      	cmp	r1, #0
 80057a0:	d119      	bne.n	80057d6 <_malloc_r+0x5a>
 80057a2:	4c24      	ldr	r4, [pc, #144]	; (8005834 <_malloc_r+0xb8>)
 80057a4:	6823      	ldr	r3, [r4, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d103      	bne.n	80057b2 <_malloc_r+0x36>
 80057aa:	0030      	movs	r0, r6
 80057ac:	f000 f86a 	bl	8005884 <_sbrk_r>
 80057b0:	6020      	str	r0, [r4, #0]
 80057b2:	0029      	movs	r1, r5
 80057b4:	0030      	movs	r0, r6
 80057b6:	f000 f865 	bl	8005884 <_sbrk_r>
 80057ba:	1c43      	adds	r3, r0, #1
 80057bc:	d12b      	bne.n	8005816 <_malloc_r+0x9a>
 80057be:	230c      	movs	r3, #12
 80057c0:	0030      	movs	r0, r6
 80057c2:	6033      	str	r3, [r6, #0]
 80057c4:	f000 f871 	bl	80058aa <__malloc_unlock>
 80057c8:	e003      	b.n	80057d2 <_malloc_r+0x56>
 80057ca:	2d00      	cmp	r5, #0
 80057cc:	dadf      	bge.n	800578e <_malloc_r+0x12>
 80057ce:	230c      	movs	r3, #12
 80057d0:	6033      	str	r3, [r6, #0]
 80057d2:	2000      	movs	r0, #0
 80057d4:	bd70      	pop	{r4, r5, r6, pc}
 80057d6:	680b      	ldr	r3, [r1, #0]
 80057d8:	1b5b      	subs	r3, r3, r5
 80057da:	d419      	bmi.n	8005810 <_malloc_r+0x94>
 80057dc:	2b0b      	cmp	r3, #11
 80057de:	d903      	bls.n	80057e8 <_malloc_r+0x6c>
 80057e0:	600b      	str	r3, [r1, #0]
 80057e2:	18cc      	adds	r4, r1, r3
 80057e4:	6025      	str	r5, [r4, #0]
 80057e6:	e003      	b.n	80057f0 <_malloc_r+0x74>
 80057e8:	684b      	ldr	r3, [r1, #4]
 80057ea:	428c      	cmp	r4, r1
 80057ec:	d10d      	bne.n	800580a <_malloc_r+0x8e>
 80057ee:	6013      	str	r3, [r2, #0]
 80057f0:	0030      	movs	r0, r6
 80057f2:	f000 f85a 	bl	80058aa <__malloc_unlock>
 80057f6:	0020      	movs	r0, r4
 80057f8:	2207      	movs	r2, #7
 80057fa:	300b      	adds	r0, #11
 80057fc:	1d23      	adds	r3, r4, #4
 80057fe:	4390      	bics	r0, r2
 8005800:	1ac3      	subs	r3, r0, r3
 8005802:	d0e7      	beq.n	80057d4 <_malloc_r+0x58>
 8005804:	425a      	negs	r2, r3
 8005806:	50e2      	str	r2, [r4, r3]
 8005808:	e7e4      	b.n	80057d4 <_malloc_r+0x58>
 800580a:	6063      	str	r3, [r4, #4]
 800580c:	000c      	movs	r4, r1
 800580e:	e7ef      	b.n	80057f0 <_malloc_r+0x74>
 8005810:	000c      	movs	r4, r1
 8005812:	6849      	ldr	r1, [r1, #4]
 8005814:	e7c3      	b.n	800579e <_malloc_r+0x22>
 8005816:	2303      	movs	r3, #3
 8005818:	1cc4      	adds	r4, r0, #3
 800581a:	439c      	bics	r4, r3
 800581c:	42a0      	cmp	r0, r4
 800581e:	d0e1      	beq.n	80057e4 <_malloc_r+0x68>
 8005820:	1a21      	subs	r1, r4, r0
 8005822:	0030      	movs	r0, r6
 8005824:	f000 f82e 	bl	8005884 <_sbrk_r>
 8005828:	1c43      	adds	r3, r0, #1
 800582a:	d1db      	bne.n	80057e4 <_malloc_r+0x68>
 800582c:	e7c7      	b.n	80057be <_malloc_r+0x42>
 800582e:	46c0      	nop			; (mov r8, r8)
 8005830:	200000b4 	.word	0x200000b4
 8005834:	200000b8 	.word	0x200000b8

08005838 <_realloc_r>:
 8005838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800583a:	0007      	movs	r7, r0
 800583c:	000d      	movs	r5, r1
 800583e:	0016      	movs	r6, r2
 8005840:	2900      	cmp	r1, #0
 8005842:	d105      	bne.n	8005850 <_realloc_r+0x18>
 8005844:	0011      	movs	r1, r2
 8005846:	f7ff ff99 	bl	800577c <_malloc_r>
 800584a:	0004      	movs	r4, r0
 800584c:	0020      	movs	r0, r4
 800584e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005850:	2a00      	cmp	r2, #0
 8005852:	d103      	bne.n	800585c <_realloc_r+0x24>
 8005854:	f7ff ff48 	bl	80056e8 <_free_r>
 8005858:	0034      	movs	r4, r6
 800585a:	e7f7      	b.n	800584c <_realloc_r+0x14>
 800585c:	f000 f826 	bl	80058ac <_malloc_usable_size_r>
 8005860:	002c      	movs	r4, r5
 8005862:	42b0      	cmp	r0, r6
 8005864:	d2f2      	bcs.n	800584c <_realloc_r+0x14>
 8005866:	0031      	movs	r1, r6
 8005868:	0038      	movs	r0, r7
 800586a:	f7ff ff87 	bl	800577c <_malloc_r>
 800586e:	1e04      	subs	r4, r0, #0
 8005870:	d0ec      	beq.n	800584c <_realloc_r+0x14>
 8005872:	0029      	movs	r1, r5
 8005874:	0032      	movs	r2, r6
 8005876:	f7ff fc11 	bl	800509c <memcpy>
 800587a:	0029      	movs	r1, r5
 800587c:	0038      	movs	r0, r7
 800587e:	f7ff ff33 	bl	80056e8 <_free_r>
 8005882:	e7e3      	b.n	800584c <_realloc_r+0x14>

08005884 <_sbrk_r>:
 8005884:	2300      	movs	r3, #0
 8005886:	b570      	push	{r4, r5, r6, lr}
 8005888:	4c06      	ldr	r4, [pc, #24]	; (80058a4 <_sbrk_r+0x20>)
 800588a:	0005      	movs	r5, r0
 800588c:	0008      	movs	r0, r1
 800588e:	6023      	str	r3, [r4, #0]
 8005890:	f7fc fa0e 	bl	8001cb0 <_sbrk>
 8005894:	1c43      	adds	r3, r0, #1
 8005896:	d103      	bne.n	80058a0 <_sbrk_r+0x1c>
 8005898:	6823      	ldr	r3, [r4, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d000      	beq.n	80058a0 <_sbrk_r+0x1c>
 800589e:	602b      	str	r3, [r5, #0]
 80058a0:	bd70      	pop	{r4, r5, r6, pc}
 80058a2:	46c0      	nop			; (mov r8, r8)
 80058a4:	20000244 	.word	0x20000244

080058a8 <__malloc_lock>:
 80058a8:	4770      	bx	lr

080058aa <__malloc_unlock>:
 80058aa:	4770      	bx	lr

080058ac <_malloc_usable_size_r>:
 80058ac:	1f0b      	subs	r3, r1, #4
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	1f18      	subs	r0, r3, #4
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	da01      	bge.n	80058ba <_malloc_usable_size_r+0xe>
 80058b6:	580b      	ldr	r3, [r1, r0]
 80058b8:	18c0      	adds	r0, r0, r3
 80058ba:	4770      	bx	lr

080058bc <_init>:
 80058bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058be:	46c0      	nop			; (mov r8, r8)
 80058c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058c2:	bc08      	pop	{r3}
 80058c4:	469e      	mov	lr, r3
 80058c6:	4770      	bx	lr

080058c8 <_fini>:
 80058c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ca:	46c0      	nop			; (mov r8, r8)
 80058cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ce:	bc08      	pop	{r3}
 80058d0:	469e      	mov	lr, r3
 80058d2:	4770      	bx	lr
