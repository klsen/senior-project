
project_L0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e4c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007a4  08006f0c  08006f0c  00016f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076b0  080076b0  000200bc  2**0
                  CONTENTS
  4 .ARM          00000000  080076b0  080076b0  000200bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080076b0  080076b0  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076b0  080076b0  000176b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076b4  080076b4  000176b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  080076b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  200000bc  08007774  000200bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08007774  000202f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015b75  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002be7  00000000  00000000  00035c59  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010e0  00000000  00000000  00038840  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f60  00000000  00000000  00039920  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000174ef  00000000  00000000  0003a880  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000eaee  00000000  00000000  00051d6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008cce1  00000000  00000000  0006085d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ed53e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e48  00000000  00000000  000ed5bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000bc 	.word	0x200000bc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006ef4 	.word	0x08006ef4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000c0 	.word	0x200000c0
 8000104:	08006ef4 	.word	0x08006ef4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <SPI_CS_LOW>:
 */

#include "TFT_display.h"

// ---- lower level functions ----
void SPI_CS_LOW() {HAL_GPIO_WritePin(CS_GPIO, CS_PIN, GPIO_PIN_RESET);}
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
 80003f8:	4b04      	ldr	r3, [pc, #16]	; (800040c <SPI_CS_LOW+0x18>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	2180      	movs	r1, #128	; 0x80
 80003fe:	0018      	movs	r0, r3
 8000400:	f003 f9ad 	bl	800375e <HAL_GPIO_WritePin>
 8000404:	46c0      	nop			; (mov r8, r8)
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	50000800 	.word	0x50000800

08000410 <SPI_CS_HIGH>:

void SPI_CS_HIGH() {HAL_GPIO_WritePin(CS_GPIO, CS_PIN, GPIO_PIN_SET);}
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
 8000414:	4b04      	ldr	r3, [pc, #16]	; (8000428 <SPI_CS_HIGH+0x18>)
 8000416:	2201      	movs	r2, #1
 8000418:	2180      	movs	r1, #128	; 0x80
 800041a:	0018      	movs	r0, r3
 800041c:	f003 f99f 	bl	800375e <HAL_GPIO_WritePin>
 8000420:	46c0      	nop			; (mov r8, r8)
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	50000800 	.word	0x50000800

0800042c <SPI_DC_LOW>:

void SPI_DC_LOW() {HAL_GPIO_WritePin(DC_GPIO, DC_PIN, GPIO_PIN_RESET);}
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
 8000430:	4b04      	ldr	r3, [pc, #16]	; (8000444 <SPI_DC_LOW+0x18>)
 8000432:	2200      	movs	r2, #0
 8000434:	2140      	movs	r1, #64	; 0x40
 8000436:	0018      	movs	r0, r3
 8000438:	f003 f991 	bl	800375e <HAL_GPIO_WritePin>
 800043c:	46c0      	nop			; (mov r8, r8)
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	50000400 	.word	0x50000400

08000448 <SPI_DC_HIGH>:

void SPI_DC_HIGH() {HAL_GPIO_WritePin(DC_GPIO, DC_PIN, GPIO_PIN_SET);}
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
 800044c:	4b04      	ldr	r3, [pc, #16]	; (8000460 <SPI_DC_HIGH+0x18>)
 800044e:	2201      	movs	r2, #1
 8000450:	2140      	movs	r1, #64	; 0x40
 8000452:	0018      	movs	r0, r3
 8000454:	f003 f983 	bl	800375e <HAL_GPIO_WritePin>
 8000458:	46c0      	nop			; (mov r8, r8)
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	46c0      	nop			; (mov r8, r8)
 8000460:	50000400 	.word	0x50000400

08000464 <sendCommand>:

// still ripped but now im changing it
void sendCommand(uint8_t cmd, uint8_t *args, uint16_t numArgs, SPI_HandleTypeDef *hspi) {
 8000464:	b580      	push	{r7, lr}
 8000466:	b084      	sub	sp, #16
 8000468:	af00      	add	r7, sp, #0
 800046a:	60b9      	str	r1, [r7, #8]
 800046c:	0011      	movs	r1, r2
 800046e:	607b      	str	r3, [r7, #4]
 8000470:	230f      	movs	r3, #15
 8000472:	18fb      	adds	r3, r7, r3
 8000474:	1c02      	adds	r2, r0, #0
 8000476:	701a      	strb	r2, [r3, #0]
 8000478:	230c      	movs	r3, #12
 800047a:	18fb      	adds	r3, r7, r3
 800047c:	1c0a      	adds	r2, r1, #0
 800047e:	801a      	strh	r2, [r3, #0]
	while (HAL_SPI_GetState(hspi) == HAL_SPI_STATE_BUSY_TX);		// block next transfer request while DMA transfer is ongoing
 8000480:	46c0      	nop			; (mov r8, r8)
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	0018      	movs	r0, r3
 8000486:	f005 fb97 	bl	8005bb8 <HAL_SPI_GetState>
 800048a:	0003      	movs	r3, r0
 800048c:	2b03      	cmp	r3, #3
 800048e:	d0f8      	beq.n	8000482 <sendCommand+0x1e>
	SPI_CS_LOW();	// chip select
 8000490:	f7ff ffb0 	bl	80003f4 <SPI_CS_LOW>

	SPI_DC_LOW();	// command mode
 8000494:	f7ff ffca 	bl	800042c <SPI_DC_LOW>
	HAL_SPI_Transmit(hspi, &cmd, 1, 1000);	// not using DMA bc it's only 1 byte
 8000498:	23fa      	movs	r3, #250	; 0xfa
 800049a:	009b      	lsls	r3, r3, #2
 800049c:	220f      	movs	r2, #15
 800049e:	18b9      	adds	r1, r7, r2
 80004a0:	6878      	ldr	r0, [r7, #4]
 80004a2:	2201      	movs	r2, #1
 80004a4:	f005 f8a6 	bl	80055f4 <HAL_SPI_Transmit>

	SPI_DC_HIGH();	// data mode
 80004a8:	f7ff ffce 	bl	8000448 <SPI_DC_HIGH>
	if (numArgs) {
 80004ac:	230c      	movs	r3, #12
 80004ae:	18fb      	adds	r3, r7, r3
 80004b0:	881b      	ldrh	r3, [r3, #0]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d007      	beq.n	80004c6 <sendCommand+0x62>
		HAL_SPI_Transmit_IT(hspi, args, numArgs);
 80004b6:	230c      	movs	r3, #12
 80004b8:	18fb      	adds	r3, r7, r3
 80004ba:	881a      	ldrh	r2, [r3, #0]
 80004bc:	68b9      	ldr	r1, [r7, #8]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	0018      	movs	r0, r3
 80004c2:	f005 f9e5 	bl	8005890 <HAL_SPI_Transmit_IT>
//		HAL_SPI_Transmit_DMA(hspi, args, numArgs);
	}

//	SPI_CS_HIGH();	// chip select disable
}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	46bd      	mov	sp, r7
 80004ca:	b004      	add	sp, #16
 80004cc:	bd80      	pop	{r7, pc}
	...

080004d0 <HAL_SPI_TxCpltCallback>:

// DMA callback on transfer compelete
// using only for sending data, but not commands
// dont send request when transfer is ongoing
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(CS_GPIO, CS_PIN) == GPIO_PIN_RESET) SPI_CS_HIGH();	// chip select disable
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <HAL_SPI_TxCpltCallback+0x24>)
 80004da:	2180      	movs	r1, #128	; 0x80
 80004dc:	0018      	movs	r0, r3
 80004de:	f003 f921 	bl	8003724 <HAL_GPIO_ReadPin>
 80004e2:	1e03      	subs	r3, r0, #0
 80004e4:	d101      	bne.n	80004ea <HAL_SPI_TxCpltCallback+0x1a>
 80004e6:	f7ff ff93 	bl	8000410 <SPI_CS_HIGH>
}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	46bd      	mov	sp, r7
 80004ee:	b002      	add	sp, #8
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	50000800 	.word	0x50000800

080004f8 <displayInit>:

// array parser heavily based on Adafruit library code
void displayInit(uint8_t *args, SPI_HandleTypeDef *hspi) {
 80004f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004fa:	b085      	sub	sp, #20
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	6039      	str	r1, [r7, #0]
	uint8_t  numCommands, cmd, numArgs;
	uint16_t ms;
	uint8_t index = 0;
 8000502:	220b      	movs	r2, #11
 8000504:	0011      	movs	r1, r2
 8000506:	18bb      	adds	r3, r7, r2
 8000508:	2200      	movs	r2, #0
 800050a:	701a      	strb	r2, [r3, #0]
	uint8_t data;

	numCommands = args[index++];   // Number of commands to follow
 800050c:	000a      	movs	r2, r1
 800050e:	18bb      	adds	r3, r7, r2
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	18ba      	adds	r2, r7, r2
 8000514:	1c59      	adds	r1, r3, #1
 8000516:	7011      	strb	r1, [r2, #0]
 8000518:	001a      	movs	r2, r3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	189a      	adds	r2, r3, r2
 800051e:	230f      	movs	r3, #15
 8000520:	18fb      	adds	r3, r7, r3
 8000522:	7812      	ldrb	r2, [r2, #0]
 8000524:	701a      	strb	r2, [r3, #0]
	while(numCommands--) {                 // For each command...
 8000526:	e05e      	b.n	80005e6 <displayInit+0xee>
		cmd = args[index++];         // Read command
 8000528:	200b      	movs	r0, #11
 800052a:	183b      	adds	r3, r7, r0
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	183a      	adds	r2, r7, r0
 8000530:	1c59      	adds	r1, r3, #1
 8000532:	7011      	strb	r1, [r2, #0]
 8000534:	001a      	movs	r2, r3
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	189a      	adds	r2, r3, r2
 800053a:	230a      	movs	r3, #10
 800053c:	18fb      	adds	r3, r7, r3
 800053e:	7812      	ldrb	r2, [r2, #0]
 8000540:	701a      	strb	r2, [r3, #0]
		numArgs  = args[index++];    // Number of args to follow
 8000542:	183b      	adds	r3, r7, r0
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	183a      	adds	r2, r7, r0
 8000548:	1c59      	adds	r1, r3, #1
 800054a:	7011      	strb	r1, [r2, #0]
 800054c:	001a      	movs	r2, r3
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	189a      	adds	r2, r3, r2
 8000552:	2609      	movs	r6, #9
 8000554:	19bb      	adds	r3, r7, r6
 8000556:	7812      	ldrb	r2, [r2, #0]
 8000558:	701a      	strb	r2, [r3, #0]
		ms       = numArgs & ST_CMD_DELAY;   // If hibit set, delay follows args
 800055a:	19bb      	adds	r3, r7, r6
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	b29a      	uxth	r2, r3
 8000560:	210c      	movs	r1, #12
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2180      	movs	r1, #128	; 0x80
 8000566:	400a      	ands	r2, r1
 8000568:	801a      	strh	r2, [r3, #0]
		numArgs &= ~ST_CMD_DELAY;            // Mask out delay bit
 800056a:	19bb      	adds	r3, r7, r6
 800056c:	19ba      	adds	r2, r7, r6
 800056e:	7812      	ldrb	r2, [r2, #0]
 8000570:	217f      	movs	r1, #127	; 0x7f
 8000572:	400a      	ands	r2, r1
 8000574:	701a      	strb	r2, [r3, #0]
		sendCommand(cmd, &args[index], numArgs, hspi);
 8000576:	0005      	movs	r5, r0
 8000578:	183b      	adds	r3, r7, r0
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	687a      	ldr	r2, [r7, #4]
 800057e:	18d1      	adds	r1, r2, r3
 8000580:	19bb      	adds	r3, r7, r6
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	b29a      	uxth	r2, r3
 8000586:	683c      	ldr	r4, [r7, #0]
 8000588:	230a      	movs	r3, #10
 800058a:	18fb      	adds	r3, r7, r3
 800058c:	7818      	ldrb	r0, [r3, #0]
 800058e:	0023      	movs	r3, r4
 8000590:	f7ff ff68 	bl	8000464 <sendCommand>
		index += numArgs;
 8000594:	0028      	movs	r0, r5
 8000596:	183b      	adds	r3, r7, r0
 8000598:	1839      	adds	r1, r7, r0
 800059a:	19ba      	adds	r2, r7, r6
 800059c:	7809      	ldrb	r1, [r1, #0]
 800059e:	7812      	ldrb	r2, [r2, #0]
 80005a0:	188a      	adds	r2, r1, r2
 80005a2:	701a      	strb	r2, [r3, #0]

		if(ms) {
 80005a4:	210c      	movs	r1, #12
 80005a6:	187b      	adds	r3, r7, r1
 80005a8:	881b      	ldrh	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d01b      	beq.n	80005e6 <displayInit+0xee>
			ms = args[index++]; // Read post-command delay time (ms)
 80005ae:	220b      	movs	r2, #11
 80005b0:	18bb      	adds	r3, r7, r2
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	18ba      	adds	r2, r7, r2
 80005b6:	1c59      	adds	r1, r3, #1
 80005b8:	7011      	strb	r1, [r2, #0]
 80005ba:	001a      	movs	r2, r3
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	189b      	adds	r3, r3, r2
 80005c0:	781a      	ldrb	r2, [r3, #0]
 80005c2:	210c      	movs	r1, #12
 80005c4:	187b      	adds	r3, r7, r1
 80005c6:	801a      	strh	r2, [r3, #0]
			if(ms == 255) ms = 500;     // If 255, delay for 500 ms
 80005c8:	187b      	adds	r3, r7, r1
 80005ca:	881b      	ldrh	r3, [r3, #0]
 80005cc:	2bff      	cmp	r3, #255	; 0xff
 80005ce:	d104      	bne.n	80005da <displayInit+0xe2>
 80005d0:	230c      	movs	r3, #12
 80005d2:	18fb      	adds	r3, r7, r3
 80005d4:	22fa      	movs	r2, #250	; 0xfa
 80005d6:	0052      	lsls	r2, r2, #1
 80005d8:	801a      	strh	r2, [r3, #0]
			HAL_Delay(ms);
 80005da:	230c      	movs	r3, #12
 80005dc:	18fb      	adds	r3, r7, r3
 80005de:	881b      	ldrh	r3, [r3, #0]
 80005e0:	0018      	movs	r0, r3
 80005e2:	f002 fa89 	bl	8002af8 <HAL_Delay>
	while(numCommands--) {                 // For each command...
 80005e6:	220f      	movs	r2, #15
 80005e8:	18bb      	adds	r3, r7, r2
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	18ba      	adds	r2, r7, r2
 80005ee:	1e59      	subs	r1, r3, #1
 80005f0:	7011      	strb	r1, [r2, #0]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d198      	bne.n	8000528 <displayInit+0x30>
		}
	}

	// note: this line may be doing more work than I think
	// (hard to read in datasheet)
	data = 0xC0;
 80005f6:	2108      	movs	r1, #8
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	22c0      	movs	r2, #192	; 0xc0
 80005fc:	701a      	strb	r2, [r3, #0]
	sendCommand(ST77XX_MADCTL, &data, 1, hspi);
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	1879      	adds	r1, r7, r1
 8000602:	2201      	movs	r2, #1
 8000604:	2036      	movs	r0, #54	; 0x36
 8000606:	f7ff ff2d 	bl	8000464 <sendCommand>
}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	46bd      	mov	sp, r7
 800060e:	b005      	add	sp, #20
 8000610:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000614 <TFT_startup>:

void TFT_startup(SPI_HandleTypeDef *hspi) {
 8000614:	b590      	push	{r4, r7, lr}
 8000616:	b0a3      	sub	sp, #140	; 0x8c
 8000618:	af02      	add	r7, sp, #8
 800061a:	6078      	str	r0, [r7, #4]
	// startup sequence: rcmd1->rcmd2red->rcmd3
	uint8_t initCommands[] = {
 800061c:	240c      	movs	r4, #12
 800061e:	193a      	adds	r2, r7, r4
 8000620:	4b14      	ldr	r3, [pc, #80]	; (8000674 <TFT_startup+0x60>)
 8000622:	0010      	movs	r0, r2
 8000624:	0019      	movs	r1, r3
 8000626:	2371      	movs	r3, #113	; 0x71
 8000628:	001a      	movs	r2, r3
 800062a:	f006 f853 	bl	80066d4 <memcpy>
			10,                           //     10 ms delay
		ST77XX_DISPON,    ST_CMD_DELAY, //  4: Main screen turn on, no args w/delay
			100	                        //     100 ms delay
	};

	displayInit(initCommands, hspi);
 800062e:	687a      	ldr	r2, [r7, #4]
 8000630:	193b      	adds	r3, r7, r4
 8000632:	0011      	movs	r1, r2
 8000634:	0018      	movs	r0, r3
 8000636:	f7ff ff5f 	bl	80004f8 <displayInit>
	setAddrWindow(0, 0, WIDTH, HEIGHT, hspi);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	23a0      	movs	r3, #160	; 0xa0
 8000640:	2280      	movs	r2, #128	; 0x80
 8000642:	2100      	movs	r1, #0
 8000644:	2000      	movs	r0, #0
 8000646:	f000 f821 	bl	800068c <setAddrWindow>

	// set the global variables
	cursorX = 0;
 800064a:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <TFT_startup+0x64>)
 800064c:	2200      	movs	r2, #0
 800064e:	701a      	strb	r2, [r3, #0]
	cursorY = 0;
 8000650:	4b0a      	ldr	r3, [pc, #40]	; (800067c <TFT_startup+0x68>)
 8000652:	2200      	movs	r2, #0
 8000654:	701a      	strb	r2, [r3, #0]
	textSize = 1;
 8000656:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <TFT_startup+0x6c>)
 8000658:	2201      	movs	r2, #1
 800065a:	701a      	strb	r2, [r3, #0]
	textColor = ST77XX_BLACK;
 800065c:	4b09      	ldr	r3, [pc, #36]	; (8000684 <TFT_startup+0x70>)
 800065e:	2200      	movs	r2, #0
 8000660:	801a      	strh	r2, [r3, #0]
	bg = ST77XX_WHITE;
 8000662:	4b09      	ldr	r3, [pc, #36]	; (8000688 <TFT_startup+0x74>)
 8000664:	2201      	movs	r2, #1
 8000666:	4252      	negs	r2, r2
 8000668:	801a      	strh	r2, [r3, #0]
}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	46bd      	mov	sp, r7
 800066e:	b021      	add	sp, #132	; 0x84
 8000670:	bd90      	pop	{r4, r7, pc}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	08006f0c 	.word	0x08006f0c
 8000678:	200000d8 	.word	0x200000d8
 800067c:	200000d9 	.word	0x200000d9
 8000680:	200000da 	.word	0x200000da
 8000684:	200000dc 	.word	0x200000dc
 8000688:	200000de 	.word	0x200000de

0800068c <setAddrWindow>:

// draw something: set addr window -> write to ram memory
// sets specific area on display to write pixels to
// x and y for upper left corner, w for width, h for height
void setAddrWindow(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SPI_HandleTypeDef *hspi) {
 800068c:	b5b0      	push	{r4, r5, r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	0005      	movs	r5, r0
 8000694:	000c      	movs	r4, r1
 8000696:	0010      	movs	r0, r2
 8000698:	0019      	movs	r1, r3
 800069a:	1dbb      	adds	r3, r7, #6
 800069c:	1c2a      	adds	r2, r5, #0
 800069e:	801a      	strh	r2, [r3, #0]
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	1c22      	adds	r2, r4, #0
 80006a4:	801a      	strh	r2, [r3, #0]
 80006a6:	1cbb      	adds	r3, r7, #2
 80006a8:	1c02      	adds	r2, r0, #0
 80006aa:	801a      	strh	r2, [r3, #0]
 80006ac:	003b      	movs	r3, r7
 80006ae:	1c0a      	adds	r2, r1, #0
 80006b0:	801a      	strh	r2, [r3, #0]
	// not really needed for our display
	x += _xstart;
 80006b2:	1dbb      	adds	r3, r7, #6
 80006b4:	1dba      	adds	r2, r7, #6
 80006b6:	8812      	ldrh	r2, [r2, #0]
 80006b8:	801a      	strh	r2, [r3, #0]
	y += _ystart;
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	1d3a      	adds	r2, r7, #4
 80006be:	8812      	ldrh	r2, [r2, #0]
 80006c0:	801a      	strh	r2, [r3, #0]

	uint8_t temp[4];
	temp[0] = (x & (0xFF00)) >> 8;
 80006c2:	1dbb      	adds	r3, r7, #6
 80006c4:	881b      	ldrh	r3, [r3, #0]
 80006c6:	0a1b      	lsrs	r3, r3, #8
 80006c8:	b29b      	uxth	r3, r3
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	210c      	movs	r1, #12
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	701a      	strb	r2, [r3, #0]
	temp[1] = x & (0xFF);
 80006d2:	1dbb      	adds	r3, r7, #6
 80006d4:	881b      	ldrh	r3, [r3, #0]
 80006d6:	b2da      	uxtb	r2, r3
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	705a      	strb	r2, [r3, #1]
	temp[2] = ((x+w-1) & (0xFF00)) >> 8;
 80006dc:	1dbb      	adds	r3, r7, #6
 80006de:	881a      	ldrh	r2, [r3, #0]
 80006e0:	1cbb      	adds	r3, r7, #2
 80006e2:	881b      	ldrh	r3, [r3, #0]
 80006e4:	18d3      	adds	r3, r2, r3
 80006e6:	3b01      	subs	r3, #1
 80006e8:	121b      	asrs	r3, r3, #8
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	709a      	strb	r2, [r3, #2]
	temp[3] = (x+w-1) & (0xFF);
 80006f0:	1dbb      	adds	r3, r7, #6
 80006f2:	881b      	ldrh	r3, [r3, #0]
 80006f4:	b2da      	uxtb	r2, r3
 80006f6:	1cbb      	adds	r3, r7, #2
 80006f8:	881b      	ldrh	r3, [r3, #0]
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	18d3      	adds	r3, r2, r3
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	3b01      	subs	r3, #1
 8000702:	b2da      	uxtb	r2, r3
 8000704:	187b      	adds	r3, r7, r1
 8000706:	70da      	strb	r2, [r3, #3]
	sendCommand(ST77XX_CASET, temp, 4, hspi);
 8000708:	6a3b      	ldr	r3, [r7, #32]
 800070a:	000c      	movs	r4, r1
 800070c:	1879      	adds	r1, r7, r1
 800070e:	2204      	movs	r2, #4
 8000710:	202a      	movs	r0, #42	; 0x2a
 8000712:	f7ff fea7 	bl	8000464 <sendCommand>

	temp[0] = (y & (0xFF00)) >> 8;
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	881b      	ldrh	r3, [r3, #0]
 800071a:	0a1b      	lsrs	r3, r3, #8
 800071c:	b29b      	uxth	r3, r3
 800071e:	b2da      	uxtb	r2, r3
 8000720:	0021      	movs	r1, r4
 8000722:	187b      	adds	r3, r7, r1
 8000724:	701a      	strb	r2, [r3, #0]
	temp[1] = y & (0xFF);
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	881b      	ldrh	r3, [r3, #0]
 800072a:	b2da      	uxtb	r2, r3
 800072c:	187b      	adds	r3, r7, r1
 800072e:	705a      	strb	r2, [r3, #1]
	temp[2] = ((y+h-1) & (0xFF00)) >> 8;
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	881a      	ldrh	r2, [r3, #0]
 8000734:	003b      	movs	r3, r7
 8000736:	881b      	ldrh	r3, [r3, #0]
 8000738:	18d3      	adds	r3, r2, r3
 800073a:	3b01      	subs	r3, #1
 800073c:	121b      	asrs	r3, r3, #8
 800073e:	b2da      	uxtb	r2, r3
 8000740:	187b      	adds	r3, r7, r1
 8000742:	709a      	strb	r2, [r3, #2]
	temp[3] = (y+h-1) & (0x00FF);
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	881b      	ldrh	r3, [r3, #0]
 8000748:	b2da      	uxtb	r2, r3
 800074a:	003b      	movs	r3, r7
 800074c:	881b      	ldrh	r3, [r3, #0]
 800074e:	b2db      	uxtb	r3, r3
 8000750:	18d3      	adds	r3, r2, r3
 8000752:	b2db      	uxtb	r3, r3
 8000754:	3b01      	subs	r3, #1
 8000756:	b2da      	uxtb	r2, r3
 8000758:	187b      	adds	r3, r7, r1
 800075a:	70da      	strb	r2, [r3, #3]
	sendCommand(ST77XX_RASET, temp, 4, hspi);
 800075c:	6a3b      	ldr	r3, [r7, #32]
 800075e:	1879      	adds	r1, r7, r1
 8000760:	2204      	movs	r2, #4
 8000762:	202b      	movs	r0, #43	; 0x2b
 8000764:	f7ff fe7e 	bl	8000464 <sendCommand>
}
 8000768:	46c0      	nop			; (mov r8, r8)
 800076a:	46bd      	mov	sp, r7
 800076c:	b004      	add	sp, #16
 800076e:	bdb0      	pop	{r4, r5, r7, pc}

08000770 <colorFixer>:
// 8-bit spi bus wants msb first; in array, lowest index is sent first
// because L4 is little-endian
//   for 16-bit value, it sends lower byte before upper byte
//   resulting in device thinking lower byte is upper byte
// this switches byte order around
uint16_t colorFixer(uint16_t color) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	0002      	movs	r2, r0
 8000778:	1dbb      	adds	r3, r7, #6
 800077a:	801a      	strh	r2, [r3, #0]
	uint8_t a = color & 0xFF;
 800077c:	210f      	movs	r1, #15
 800077e:	187b      	adds	r3, r7, r1
 8000780:	1dba      	adds	r2, r7, #6
 8000782:	8812      	ldrh	r2, [r2, #0]
 8000784:	701a      	strb	r2, [r3, #0]
	uint8_t b = (color & 0xFF00) >> 8;
 8000786:	1dbb      	adds	r3, r7, #6
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	0a1b      	lsrs	r3, r3, #8
 800078c:	b29a      	uxth	r2, r3
 800078e:	200e      	movs	r0, #14
 8000790:	183b      	adds	r3, r7, r0
 8000792:	701a      	strb	r2, [r3, #0]
	uint16_t ret = (a << 8) | b;
 8000794:	187b      	adds	r3, r7, r1
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	021b      	lsls	r3, r3, #8
 800079a:	b21a      	sxth	r2, r3
 800079c:	183b      	adds	r3, r7, r0
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	b21b      	sxth	r3, r3
 80007a2:	4313      	orrs	r3, r2
 80007a4:	b21a      	sxth	r2, r3
 80007a6:	210c      	movs	r1, #12
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	801a      	strh	r2, [r3, #0]

	return ret;
 80007ac:	187b      	adds	r3, r7, r1
 80007ae:	881b      	ldrh	r3, [r3, #0]
}
 80007b0:	0018      	movs	r0, r3
 80007b2:	46bd      	mov	sp, r7
 80007b4:	b004      	add	sp, #16
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <drawPixel>:

void drawPixel(uint8_t x, uint8_t y, uint16_t color, SPI_HandleTypeDef *hspi) {
 80007b8:	b590      	push	{r4, r7, lr}
 80007ba:	b087      	sub	sp, #28
 80007bc:	af02      	add	r7, sp, #8
 80007be:	0004      	movs	r4, r0
 80007c0:	0008      	movs	r0, r1
 80007c2:	0011      	movs	r1, r2
 80007c4:	603b      	str	r3, [r7, #0]
 80007c6:	1dfb      	adds	r3, r7, #7
 80007c8:	1c22      	adds	r2, r4, #0
 80007ca:	701a      	strb	r2, [r3, #0]
 80007cc:	1dbb      	adds	r3, r7, #6
 80007ce:	1c02      	adds	r2, r0, #0
 80007d0:	701a      	strb	r2, [r3, #0]
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	1c0a      	adds	r2, r1, #0
 80007d6:	801a      	strh	r2, [r3, #0]
	// bounds checking
	// just don't draw if pixel is out of bounds
	if ((x > WIDTH) || (x < 0) || (y > HEIGHT) || (y < 0)) return;
 80007d8:	1dfb      	adds	r3, r7, #7
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b80      	cmp	r3, #128	; 0x80
 80007de:	d820      	bhi.n	8000822 <drawPixel+0x6a>
 80007e0:	1dbb      	adds	r3, r7, #6
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	2ba0      	cmp	r3, #160	; 0xa0
 80007e6:	d81c      	bhi.n	8000822 <drawPixel+0x6a>

	setAddrWindow(x, y, 1, 1, hspi);
 80007e8:	1dfb      	adds	r3, r7, #7
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	b298      	uxth	r0, r3
 80007ee:	1dbb      	adds	r3, r7, #6
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	b299      	uxth	r1, r3
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	9300      	str	r3, [sp, #0]
 80007f8:	2301      	movs	r3, #1
 80007fa:	2201      	movs	r2, #1
 80007fc:	f7ff ff46 	bl	800068c <setAddrWindow>
	uint16_t tempColor = colorFixer(color);		// else we're using address of something passed by value
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	881b      	ldrh	r3, [r3, #0]
 8000804:	0018      	movs	r0, r3
 8000806:	f7ff ffb3 	bl	8000770 <colorFixer>
 800080a:	0003      	movs	r3, r0
 800080c:	001a      	movs	r2, r3
 800080e:	210e      	movs	r1, #14
 8000810:	187b      	adds	r3, r7, r1
 8000812:	801a      	strh	r2, [r3, #0]
	sendCommand(ST77XX_RAMWR, &tempColor, 2, hspi);
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	1879      	adds	r1, r7, r1
 8000818:	2202      	movs	r2, #2
 800081a:	202c      	movs	r0, #44	; 0x2c
 800081c:	f7ff fe22 	bl	8000464 <sendCommand>
 8000820:	e000      	b.n	8000824 <drawPixel+0x6c>
	if ((x > WIDTH) || (x < 0) || (y > HEIGHT) || (y < 0)) return;
 8000822:	46c0      	nop			; (mov r8, r8)
}
 8000824:	46bd      	mov	sp, r7
 8000826:	b005      	add	sp, #20
 8000828:	bd90      	pop	{r4, r7, pc}

0800082a <drawHLine>:

void drawHLine(uint8_t x, uint8_t y, uint8_t size, uint16_t color, SPI_HandleTypeDef *hspi) {
 800082a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800082c:	b091      	sub	sp, #68	; 0x44
 800082e:	af02      	add	r7, sp, #8
 8000830:	000c      	movs	r4, r1
 8000832:	0016      	movs	r6, r2
 8000834:	0019      	movs	r1, r3
 8000836:	2327      	movs	r3, #39	; 0x27
 8000838:	18fa      	adds	r2, r7, r3
 800083a:	1c03      	adds	r3, r0, #0
 800083c:	7013      	strb	r3, [r2, #0]
 800083e:	2326      	movs	r3, #38	; 0x26
 8000840:	18fb      	adds	r3, r7, r3
 8000842:	1c22      	adds	r2, r4, #0
 8000844:	701a      	strb	r2, [r3, #0]
 8000846:	2325      	movs	r3, #37	; 0x25
 8000848:	18fb      	adds	r3, r7, r3
 800084a:	1c32      	adds	r2, r6, #0
 800084c:	701a      	strb	r2, [r3, #0]
 800084e:	2322      	movs	r3, #34	; 0x22
 8000850:	18fb      	adds	r3, r7, r3
 8000852:	1c0a      	adds	r2, r1, #0
 8000854:	801a      	strh	r2, [r3, #0]
 8000856:	466b      	mov	r3, sp
 8000858:	001e      	movs	r6, r3
	// bounds checking
	if (x < 0) x = 0;						// don't set x out of bounds
	if (x > WIDTH) x = WIDTH;
 800085a:	2327      	movs	r3, #39	; 0x27
 800085c:	18fb      	adds	r3, r7, r3
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2b80      	cmp	r3, #128	; 0x80
 8000862:	d903      	bls.n	800086c <drawHLine+0x42>
 8000864:	2327      	movs	r3, #39	; 0x27
 8000866:	18fb      	adds	r3, r7, r3
 8000868:	2280      	movs	r2, #128	; 0x80
 800086a:	701a      	strb	r2, [r3, #0]
	if (x+size > WIDTH) size = WIDTH-x;		// don't set size so line draws out of bounds
 800086c:	2327      	movs	r3, #39	; 0x27
 800086e:	18fb      	adds	r3, r7, r3
 8000870:	781a      	ldrb	r2, [r3, #0]
 8000872:	2325      	movs	r3, #37	; 0x25
 8000874:	18fb      	adds	r3, r7, r3
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	18d3      	adds	r3, r2, r3
 800087a:	2b80      	cmp	r3, #128	; 0x80
 800087c:	dd08      	ble.n	8000890 <drawHLine+0x66>
 800087e:	2325      	movs	r3, #37	; 0x25
 8000880:	18fb      	adds	r3, r7, r3
 8000882:	2227      	movs	r2, #39	; 0x27
 8000884:	18ba      	adds	r2, r7, r2
 8000886:	7812      	ldrb	r2, [r2, #0]
 8000888:	2180      	movs	r1, #128	; 0x80
 800088a:	4249      	negs	r1, r1
 800088c:	1a8a      	subs	r2, r1, r2
 800088e:	701a      	strb	r2, [r3, #0]
	if (x+size < 0) size = 0-x;
	if ((y > HEIGHT) || (y < 0)) return;	// don't draw if y is out of bounds
 8000890:	2326      	movs	r3, #38	; 0x26
 8000892:	18fb      	adds	r3, r7, r3
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	2ba0      	cmp	r3, #160	; 0xa0
 8000898:	d868      	bhi.n	800096c <drawHLine+0x142>

	setAddrWindow(x, y, size, 1, hspi);
 800089a:	2327      	movs	r3, #39	; 0x27
 800089c:	18fb      	adds	r3, r7, r3
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	b298      	uxth	r0, r3
 80008a2:	2326      	movs	r3, #38	; 0x26
 80008a4:	18fb      	adds	r3, r7, r3
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	b299      	uxth	r1, r3
 80008aa:	2325      	movs	r3, #37	; 0x25
 80008ac:	18fb      	adds	r3, r7, r3
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	b29a      	uxth	r2, r3
 80008b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80008b4:	9300      	str	r3, [sp, #0]
 80008b6:	2301      	movs	r3, #1
 80008b8:	f7ff fee8 	bl	800068c <setAddrWindow>
	uint16_t colors[size];
 80008bc:	2325      	movs	r3, #37	; 0x25
 80008be:	18fb      	adds	r3, r7, r3
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	001a      	movs	r2, r3
 80008c4:	3a01      	subs	r2, #1
 80008c6:	633a      	str	r2, [r7, #48]	; 0x30
 80008c8:	60bb      	str	r3, [r7, #8]
 80008ca:	2200      	movs	r2, #0
 80008cc:	60fa      	str	r2, [r7, #12]
 80008ce:	68b8      	ldr	r0, [r7, #8]
 80008d0:	68f9      	ldr	r1, [r7, #12]
 80008d2:	0002      	movs	r2, r0
 80008d4:	0f12      	lsrs	r2, r2, #28
 80008d6:	000c      	movs	r4, r1
 80008d8:	0124      	lsls	r4, r4, #4
 80008da:	61fc      	str	r4, [r7, #28]
 80008dc:	69fc      	ldr	r4, [r7, #28]
 80008de:	4314      	orrs	r4, r2
 80008e0:	61fc      	str	r4, [r7, #28]
 80008e2:	0002      	movs	r2, r0
 80008e4:	0112      	lsls	r2, r2, #4
 80008e6:	61ba      	str	r2, [r7, #24]
 80008e8:	603b      	str	r3, [r7, #0]
 80008ea:	2200      	movs	r2, #0
 80008ec:	607a      	str	r2, [r7, #4]
 80008ee:	6838      	ldr	r0, [r7, #0]
 80008f0:	6879      	ldr	r1, [r7, #4]
 80008f2:	0002      	movs	r2, r0
 80008f4:	0f12      	lsrs	r2, r2, #28
 80008f6:	000c      	movs	r4, r1
 80008f8:	0124      	lsls	r4, r4, #4
 80008fa:	617c      	str	r4, [r7, #20]
 80008fc:	697c      	ldr	r4, [r7, #20]
 80008fe:	4314      	orrs	r4, r2
 8000900:	617c      	str	r4, [r7, #20]
 8000902:	0002      	movs	r2, r0
 8000904:	0112      	lsls	r2, r2, #4
 8000906:	613a      	str	r2, [r7, #16]
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	3301      	adds	r3, #1
 800090c:	3307      	adds	r3, #7
 800090e:	08db      	lsrs	r3, r3, #3
 8000910:	00db      	lsls	r3, r3, #3
 8000912:	466a      	mov	r2, sp
 8000914:	1ad3      	subs	r3, r2, r3
 8000916:	469d      	mov	sp, r3
 8000918:	ab02      	add	r3, sp, #8
 800091a:	3301      	adds	r3, #1
 800091c:	085b      	lsrs	r3, r3, #1
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i < size; i++) {		// better way to make array of 1 color; SPI without moving address of sent?
 8000922:	2300      	movs	r3, #0
 8000924:	637b      	str	r3, [r7, #52]	; 0x34
 8000926:	e00e      	b.n	8000946 <drawHLine+0x11c>
		colors[i] = colorFixer(color);
 8000928:	2322      	movs	r3, #34	; 0x22
 800092a:	18fb      	adds	r3, r7, r3
 800092c:	881b      	ldrh	r3, [r3, #0]
 800092e:	0018      	movs	r0, r3
 8000930:	f7ff ff1e 	bl	8000770 <colorFixer>
 8000934:	0003      	movs	r3, r0
 8000936:	0019      	movs	r1, r3
 8000938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800093a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800093c:	0052      	lsls	r2, r2, #1
 800093e:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < size; i++) {		// better way to make array of 1 color; SPI without moving address of sent?
 8000940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000942:	3301      	adds	r3, #1
 8000944:	637b      	str	r3, [r7, #52]	; 0x34
 8000946:	2325      	movs	r3, #37	; 0x25
 8000948:	18fb      	adds	r3, r7, r3
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800094e:	429a      	cmp	r2, r3
 8000950:	dbea      	blt.n	8000928 <drawHLine+0xfe>
//		colors[i] = color;
	}

	sendCommand(ST77XX_RAMWR, colors, size*2, hspi);
 8000952:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000954:	2325      	movs	r3, #37	; 0x25
 8000956:	18fb      	adds	r3, r7, r3
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	b29b      	uxth	r3, r3
 800095c:	18db      	adds	r3, r3, r3
 800095e:	b29a      	uxth	r2, r3
 8000960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000962:	202c      	movs	r0, #44	; 0x2c
 8000964:	f7ff fd7e 	bl	8000464 <sendCommand>
 8000968:	46b5      	mov	sp, r6
 800096a:	e001      	b.n	8000970 <drawHLine+0x146>
	if ((y > HEIGHT) || (y < 0)) return;	// don't draw if y is out of bounds
 800096c:	46c0      	nop			; (mov r8, r8)
 800096e:	46b5      	mov	sp, r6
}
 8000970:	46bd      	mov	sp, r7
 8000972:	b00f      	add	sp, #60	; 0x3c
 8000974:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000976 <drawVLine>:

void drawVLine(uint8_t x, uint8_t y, uint8_t size, uint16_t color, SPI_HandleTypeDef *hspi) {
 8000976:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000978:	b091      	sub	sp, #68	; 0x44
 800097a:	af02      	add	r7, sp, #8
 800097c:	000c      	movs	r4, r1
 800097e:	0016      	movs	r6, r2
 8000980:	0019      	movs	r1, r3
 8000982:	2327      	movs	r3, #39	; 0x27
 8000984:	18fa      	adds	r2, r7, r3
 8000986:	1c03      	adds	r3, r0, #0
 8000988:	7013      	strb	r3, [r2, #0]
 800098a:	2326      	movs	r3, #38	; 0x26
 800098c:	18fb      	adds	r3, r7, r3
 800098e:	1c22      	adds	r2, r4, #0
 8000990:	701a      	strb	r2, [r3, #0]
 8000992:	2325      	movs	r3, #37	; 0x25
 8000994:	18fb      	adds	r3, r7, r3
 8000996:	1c32      	adds	r2, r6, #0
 8000998:	701a      	strb	r2, [r3, #0]
 800099a:	2322      	movs	r3, #34	; 0x22
 800099c:	18fb      	adds	r3, r7, r3
 800099e:	1c0a      	adds	r2, r1, #0
 80009a0:	801a      	strh	r2, [r3, #0]
 80009a2:	466b      	mov	r3, sp
 80009a4:	001e      	movs	r6, r3
	// bounds checking
	if (y < 0) x = 0;						// don't set x out of bounds
	if (y > HEIGHT) x = HEIGHT;
 80009a6:	2326      	movs	r3, #38	; 0x26
 80009a8:	18fb      	adds	r3, r7, r3
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2ba0      	cmp	r3, #160	; 0xa0
 80009ae:	d903      	bls.n	80009b8 <drawVLine+0x42>
 80009b0:	2327      	movs	r3, #39	; 0x27
 80009b2:	18fb      	adds	r3, r7, r3
 80009b4:	22a0      	movs	r2, #160	; 0xa0
 80009b6:	701a      	strb	r2, [r3, #0]
	if (y+size > HEIGHT) size = HEIGHT-y;	// don't set size so line draws out of bounds
 80009b8:	2326      	movs	r3, #38	; 0x26
 80009ba:	18fb      	adds	r3, r7, r3
 80009bc:	781a      	ldrb	r2, [r3, #0]
 80009be:	2325      	movs	r3, #37	; 0x25
 80009c0:	18fb      	adds	r3, r7, r3
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	18d3      	adds	r3, r2, r3
 80009c6:	2ba0      	cmp	r3, #160	; 0xa0
 80009c8:	dd08      	ble.n	80009dc <drawVLine+0x66>
 80009ca:	2325      	movs	r3, #37	; 0x25
 80009cc:	18fb      	adds	r3, r7, r3
 80009ce:	2226      	movs	r2, #38	; 0x26
 80009d0:	18ba      	adds	r2, r7, r2
 80009d2:	7812      	ldrb	r2, [r2, #0]
 80009d4:	2160      	movs	r1, #96	; 0x60
 80009d6:	4249      	negs	r1, r1
 80009d8:	1a8a      	subs	r2, r1, r2
 80009da:	701a      	strb	r2, [r3, #0]
	if (y+size < 0) size = 0-y;
	if ((x > WIDTH) || (x < 0)) return;		// don't draw if y is out of bounds
 80009dc:	2327      	movs	r3, #39	; 0x27
 80009de:	18fb      	adds	r3, r7, r3
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	2b80      	cmp	r3, #128	; 0x80
 80009e4:	d869      	bhi.n	8000aba <drawVLine+0x144>

	setAddrWindow(x, y, 1, size, hspi);
 80009e6:	2327      	movs	r3, #39	; 0x27
 80009e8:	18fb      	adds	r3, r7, r3
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	b298      	uxth	r0, r3
 80009ee:	2326      	movs	r3, #38	; 0x26
 80009f0:	18fb      	adds	r3, r7, r3
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	b299      	uxth	r1, r3
 80009f6:	2325      	movs	r3, #37	; 0x25
 80009f8:	18fb      	adds	r3, r7, r3
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	b29a      	uxth	r2, r3
 80009fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a00:	9300      	str	r3, [sp, #0]
 8000a02:	0013      	movs	r3, r2
 8000a04:	2201      	movs	r2, #1
 8000a06:	f7ff fe41 	bl	800068c <setAddrWindow>
	uint16_t colors[size];
 8000a0a:	2325      	movs	r3, #37	; 0x25
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	001a      	movs	r2, r3
 8000a12:	3a01      	subs	r2, #1
 8000a14:	633a      	str	r2, [r7, #48]	; 0x30
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	2200      	movs	r2, #0
 8000a1a:	60fa      	str	r2, [r7, #12]
 8000a1c:	68b8      	ldr	r0, [r7, #8]
 8000a1e:	68f9      	ldr	r1, [r7, #12]
 8000a20:	0002      	movs	r2, r0
 8000a22:	0f12      	lsrs	r2, r2, #28
 8000a24:	000c      	movs	r4, r1
 8000a26:	0124      	lsls	r4, r4, #4
 8000a28:	61fc      	str	r4, [r7, #28]
 8000a2a:	69fc      	ldr	r4, [r7, #28]
 8000a2c:	4314      	orrs	r4, r2
 8000a2e:	61fc      	str	r4, [r7, #28]
 8000a30:	0002      	movs	r2, r0
 8000a32:	0112      	lsls	r2, r2, #4
 8000a34:	61ba      	str	r2, [r7, #24]
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	2200      	movs	r2, #0
 8000a3a:	607a      	str	r2, [r7, #4]
 8000a3c:	6838      	ldr	r0, [r7, #0]
 8000a3e:	6879      	ldr	r1, [r7, #4]
 8000a40:	0002      	movs	r2, r0
 8000a42:	0f12      	lsrs	r2, r2, #28
 8000a44:	000c      	movs	r4, r1
 8000a46:	0124      	lsls	r4, r4, #4
 8000a48:	617c      	str	r4, [r7, #20]
 8000a4a:	697c      	ldr	r4, [r7, #20]
 8000a4c:	4314      	orrs	r4, r2
 8000a4e:	617c      	str	r4, [r7, #20]
 8000a50:	0002      	movs	r2, r0
 8000a52:	0112      	lsls	r2, r2, #4
 8000a54:	613a      	str	r2, [r7, #16]
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	3301      	adds	r3, #1
 8000a5a:	3307      	adds	r3, #7
 8000a5c:	08db      	lsrs	r3, r3, #3
 8000a5e:	00db      	lsls	r3, r3, #3
 8000a60:	466a      	mov	r2, sp
 8000a62:	1ad3      	subs	r3, r2, r3
 8000a64:	469d      	mov	sp, r3
 8000a66:	ab02      	add	r3, sp, #8
 8000a68:	3301      	adds	r3, #1
 8000a6a:	085b      	lsrs	r3, r3, #1
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i < size; i++) {		// there has to be a better way to make array of 1 color
 8000a70:	2300      	movs	r3, #0
 8000a72:	637b      	str	r3, [r7, #52]	; 0x34
 8000a74:	e00e      	b.n	8000a94 <drawVLine+0x11e>
											// SPI without moving address of sent buffer?
		colors[i] = colorFixer(color);
 8000a76:	2322      	movs	r3, #34	; 0x22
 8000a78:	18fb      	adds	r3, r7, r3
 8000a7a:	881b      	ldrh	r3, [r3, #0]
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f7ff fe77 	bl	8000770 <colorFixer>
 8000a82:	0003      	movs	r3, r0
 8000a84:	0019      	movs	r1, r3
 8000a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a8a:	0052      	lsls	r2, r2, #1
 8000a8c:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < size; i++) {		// there has to be a better way to make array of 1 color
 8000a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a90:	3301      	adds	r3, #1
 8000a92:	637b      	str	r3, [r7, #52]	; 0x34
 8000a94:	2325      	movs	r3, #37	; 0x25
 8000a96:	18fb      	adds	r3, r7, r3
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	dbea      	blt.n	8000a76 <drawVLine+0x100>
	}

	sendCommand(ST77XX_RAMWR, colors, size*2, hspi);
 8000aa0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000aa2:	2325      	movs	r3, #37	; 0x25
 8000aa4:	18fb      	adds	r3, r7, r3
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	b29b      	uxth	r3, r3
 8000aaa:	18db      	adds	r3, r3, r3
 8000aac:	b29a      	uxth	r2, r3
 8000aae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ab0:	202c      	movs	r0, #44	; 0x2c
 8000ab2:	f7ff fcd7 	bl	8000464 <sendCommand>
 8000ab6:	46b5      	mov	sp, r6
 8000ab8:	e001      	b.n	8000abe <drawVLine+0x148>
	if ((x > WIDTH) || (x < 0)) return;		// don't draw if y is out of bounds
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	46b5      	mov	sp, r6
}
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	b00f      	add	sp, #60	; 0x3c
 8000ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ac4 <fillRect>:
	drawHLine(x, y+h-1, w, color, hspi);
	drawVLine(x, y, h, color, hspi);
	drawVLine(x+w-1, y, h, color, hspi);
}

void fillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t color, SPI_HandleTypeDef *hspi) {
 8000ac4:	b5b0      	push	{r4, r5, r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af02      	add	r7, sp, #8
 8000aca:	0005      	movs	r5, r0
 8000acc:	000c      	movs	r4, r1
 8000ace:	0010      	movs	r0, r2
 8000ad0:	0019      	movs	r1, r3
 8000ad2:	1dfb      	adds	r3, r7, #7
 8000ad4:	1c2a      	adds	r2, r5, #0
 8000ad6:	701a      	strb	r2, [r3, #0]
 8000ad8:	1dbb      	adds	r3, r7, #6
 8000ada:	1c22      	adds	r2, r4, #0
 8000adc:	701a      	strb	r2, [r3, #0]
 8000ade:	1d7b      	adds	r3, r7, #5
 8000ae0:	1c02      	adds	r2, r0, #0
 8000ae2:	701a      	strb	r2, [r3, #0]
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	1c0a      	adds	r2, r1, #0
 8000ae8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < h; i++) {
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	e014      	b.n	8000b1a <fillRect+0x56>
		drawHLine(x, y+i, w, color, hspi);
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	1dbb      	adds	r3, r7, #6
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	18d3      	adds	r3, r2, r3
 8000afa:	b2d9      	uxtb	r1, r3
 8000afc:	2320      	movs	r3, #32
 8000afe:	18fb      	adds	r3, r7, r3
 8000b00:	881c      	ldrh	r4, [r3, #0]
 8000b02:	1d7b      	adds	r3, r7, #5
 8000b04:	781a      	ldrb	r2, [r3, #0]
 8000b06:	1dfb      	adds	r3, r7, #7
 8000b08:	7818      	ldrb	r0, [r3, #0]
 8000b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0c:	9300      	str	r3, [sp, #0]
 8000b0e:	0023      	movs	r3, r4
 8000b10:	f7ff fe8b 	bl	800082a <drawHLine>
	for (int i = 0; i < h; i++) {
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	3301      	adds	r3, #1
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	68fa      	ldr	r2, [r7, #12]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	dbe5      	blt.n	8000af0 <fillRect+0x2c>
	}
}
 8000b24:	46c0      	nop			; (mov r8, r8)
 8000b26:	46bd      	mov	sp, r7
 8000b28:	b004      	add	sp, #16
 8000b2a:	bdb0      	pop	{r4, r5, r7, pc}

08000b2c <fillScreen>:

void fillScreen(uint16_t color, SPI_HandleTypeDef *hspi) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af02      	add	r7, sp, #8
 8000b32:	0002      	movs	r2, r0
 8000b34:	6039      	str	r1, [r7, #0]
 8000b36:	1dbb      	adds	r3, r7, #6
 8000b38:	801a      	strh	r2, [r3, #0]
	fillRect(0, 0, WIDTH, HEIGHT, color, hspi);
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	9301      	str	r3, [sp, #4]
 8000b3e:	1dbb      	adds	r3, r7, #6
 8000b40:	881b      	ldrh	r3, [r3, #0]
 8000b42:	9300      	str	r3, [sp, #0]
 8000b44:	23a0      	movs	r3, #160	; 0xa0
 8000b46:	2280      	movs	r2, #128	; 0x80
 8000b48:	2100      	movs	r1, #0
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	f7ff ffba 	bl	8000ac4 <fillRect>
}
 8000b50:	46c0      	nop			; (mov r8, r8)
 8000b52:	46bd      	mov	sp, r7
 8000b54:	b002      	add	sp, #8
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <drawChar>:
// ---- end of basic shapes and lines ----

// ---- text functions ----
//void drawChar(uint8_t x, uint8_t y, uint8_t ch, uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y, SPI_HandleTypeDef *hspi) {
void drawChar(uint8_t ch, SPI_HandleTypeDef *hspi) {
 8000b58:	b5b0      	push	{r4, r5, r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af02      	add	r7, sp, #8
 8000b5e:	0002      	movs	r2, r0
 8000b60:	6039      	str	r1, [r7, #0]
 8000b62:	1dfb      	adds	r3, r7, #7
 8000b64:	701a      	strb	r2, [r3, #0]
//	   ((y + 8 * size_y - 1) < 0))   // Clip top
//		return;

//	if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

	for (int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 8000b66:	230f      	movs	r3, #15
 8000b68:	18fb      	adds	r3, r7, r3
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	701a      	strb	r2, [r3, #0]
 8000b6e:	e0b5      	b.n	8000cdc <drawChar+0x184>
		uint8_t line = font[ch*5+i];
 8000b70:	1dfb      	adds	r3, r7, #7
 8000b72:	781a      	ldrb	r2, [r3, #0]
 8000b74:	0013      	movs	r3, r2
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	189a      	adds	r2, r3, r2
 8000b7a:	230f      	movs	r3, #15
 8000b7c:	18fb      	adds	r3, r7, r3
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	b25b      	sxtb	r3, r3
 8000b82:	18d2      	adds	r2, r2, r3
 8000b84:	230e      	movs	r3, #14
 8000b86:	18fb      	adds	r3, r7, r3
 8000b88:	4974      	ldr	r1, [pc, #464]	; (8000d5c <drawChar+0x204>)
 8000b8a:	5c8a      	ldrb	r2, [r1, r2]
 8000b8c:	701a      	strb	r2, [r3, #0]
		for (int8_t j=0; j<8; j++, line >>= 1) {
 8000b8e:	230d      	movs	r3, #13
 8000b90:	18fb      	adds	r3, r7, r3
 8000b92:	2200      	movs	r2, #0
 8000b94:	701a      	strb	r2, [r3, #0]
 8000b96:	e091      	b.n	8000cbc <drawChar+0x164>
			if (line & 1) {
 8000b98:	230e      	movs	r3, #14
 8000b9a:	18fb      	adds	r3, r7, r3
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	d03b      	beq.n	8000c1c <drawChar+0xc4>
				if (textSize == 1)
 8000ba4:	4b6e      	ldr	r3, [pc, #440]	; (8000d60 <drawChar+0x208>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d113      	bne.n	8000bd4 <drawChar+0x7c>
					drawPixel(cursorX+i, cursorY+j, textColor, hspi);
 8000bac:	4b6d      	ldr	r3, [pc, #436]	; (8000d64 <drawChar+0x20c>)
 8000bae:	781a      	ldrb	r2, [r3, #0]
 8000bb0:	230f      	movs	r3, #15
 8000bb2:	18fb      	adds	r3, r7, r3
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	18d3      	adds	r3, r2, r3
 8000bb8:	b2d8      	uxtb	r0, r3
 8000bba:	4b6b      	ldr	r3, [pc, #428]	; (8000d68 <drawChar+0x210>)
 8000bbc:	781a      	ldrb	r2, [r3, #0]
 8000bbe:	230d      	movs	r3, #13
 8000bc0:	18fb      	adds	r3, r7, r3
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	18d3      	adds	r3, r2, r3
 8000bc6:	b2d9      	uxtb	r1, r3
 8000bc8:	4b68      	ldr	r3, [pc, #416]	; (8000d6c <drawChar+0x214>)
 8000bca:	881a      	ldrh	r2, [r3, #0]
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	f7ff fdf3 	bl	80007b8 <drawPixel>
 8000bd2:	e064      	b.n	8000c9e <drawChar+0x146>
				else
					fillRect(cursorX+i*textSize, cursorY+j*textSize, textSize, textSize, textColor, hspi);
 8000bd4:	230f      	movs	r3, #15
 8000bd6:	18fb      	adds	r3, r7, r3
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	4a61      	ldr	r2, [pc, #388]	; (8000d60 <drawChar+0x208>)
 8000bdc:	7812      	ldrb	r2, [r2, #0]
 8000bde:	4353      	muls	r3, r2
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	4b60      	ldr	r3, [pc, #384]	; (8000d64 <drawChar+0x20c>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	18d3      	adds	r3, r2, r3
 8000be8:	b2d8      	uxtb	r0, r3
 8000bea:	230d      	movs	r3, #13
 8000bec:	18fb      	adds	r3, r7, r3
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	4a5b      	ldr	r2, [pc, #364]	; (8000d60 <drawChar+0x208>)
 8000bf2:	7812      	ldrb	r2, [r2, #0]
 8000bf4:	4353      	muls	r3, r2
 8000bf6:	b2da      	uxtb	r2, r3
 8000bf8:	4b5b      	ldr	r3, [pc, #364]	; (8000d68 <drawChar+0x210>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	18d3      	adds	r3, r2, r3
 8000bfe:	b2d9      	uxtb	r1, r3
 8000c00:	4b57      	ldr	r3, [pc, #348]	; (8000d60 <drawChar+0x208>)
 8000c02:	781c      	ldrb	r4, [r3, #0]
 8000c04:	4b56      	ldr	r3, [pc, #344]	; (8000d60 <drawChar+0x208>)
 8000c06:	781d      	ldrb	r5, [r3, #0]
 8000c08:	4b58      	ldr	r3, [pc, #352]	; (8000d6c <drawChar+0x214>)
 8000c0a:	881b      	ldrh	r3, [r3, #0]
 8000c0c:	683a      	ldr	r2, [r7, #0]
 8000c0e:	9201      	str	r2, [sp, #4]
 8000c10:	9300      	str	r3, [sp, #0]
 8000c12:	002b      	movs	r3, r5
 8000c14:	0022      	movs	r2, r4
 8000c16:	f7ff ff55 	bl	8000ac4 <fillRect>
 8000c1a:	e040      	b.n	8000c9e <drawChar+0x146>
			} else if (bg != textColor) {
 8000c1c:	4b54      	ldr	r3, [pc, #336]	; (8000d70 <drawChar+0x218>)
 8000c1e:	881a      	ldrh	r2, [r3, #0]
 8000c20:	4b52      	ldr	r3, [pc, #328]	; (8000d6c <drawChar+0x214>)
 8000c22:	881b      	ldrh	r3, [r3, #0]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d03a      	beq.n	8000c9e <drawChar+0x146>
				if (textSize == 1)
 8000c28:	4b4d      	ldr	r3, [pc, #308]	; (8000d60 <drawChar+0x208>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d113      	bne.n	8000c58 <drawChar+0x100>
					drawPixel(cursorX+i, cursorY+j, bg, hspi);
 8000c30:	4b4c      	ldr	r3, [pc, #304]	; (8000d64 <drawChar+0x20c>)
 8000c32:	781a      	ldrb	r2, [r3, #0]
 8000c34:	230f      	movs	r3, #15
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	18d3      	adds	r3, r2, r3
 8000c3c:	b2d8      	uxtb	r0, r3
 8000c3e:	4b4a      	ldr	r3, [pc, #296]	; (8000d68 <drawChar+0x210>)
 8000c40:	781a      	ldrb	r2, [r3, #0]
 8000c42:	230d      	movs	r3, #13
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	18d3      	adds	r3, r2, r3
 8000c4a:	b2d9      	uxtb	r1, r3
 8000c4c:	4b48      	ldr	r3, [pc, #288]	; (8000d70 <drawChar+0x218>)
 8000c4e:	881a      	ldrh	r2, [r3, #0]
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	f7ff fdb1 	bl	80007b8 <drawPixel>
 8000c56:	e022      	b.n	8000c9e <drawChar+0x146>
				else
					fillRect(cursorX+i*textSize, cursorY+j*textSize, textSize, textSize, bg, hspi);
 8000c58:	230f      	movs	r3, #15
 8000c5a:	18fb      	adds	r3, r7, r3
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	4a40      	ldr	r2, [pc, #256]	; (8000d60 <drawChar+0x208>)
 8000c60:	7812      	ldrb	r2, [r2, #0]
 8000c62:	4353      	muls	r3, r2
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	4b3f      	ldr	r3, [pc, #252]	; (8000d64 <drawChar+0x20c>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	18d3      	adds	r3, r2, r3
 8000c6c:	b2d8      	uxtb	r0, r3
 8000c6e:	230d      	movs	r3, #13
 8000c70:	18fb      	adds	r3, r7, r3
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	4a3a      	ldr	r2, [pc, #232]	; (8000d60 <drawChar+0x208>)
 8000c76:	7812      	ldrb	r2, [r2, #0]
 8000c78:	4353      	muls	r3, r2
 8000c7a:	b2da      	uxtb	r2, r3
 8000c7c:	4b3a      	ldr	r3, [pc, #232]	; (8000d68 <drawChar+0x210>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	18d3      	adds	r3, r2, r3
 8000c82:	b2d9      	uxtb	r1, r3
 8000c84:	4b36      	ldr	r3, [pc, #216]	; (8000d60 <drawChar+0x208>)
 8000c86:	781c      	ldrb	r4, [r3, #0]
 8000c88:	4b35      	ldr	r3, [pc, #212]	; (8000d60 <drawChar+0x208>)
 8000c8a:	781d      	ldrb	r5, [r3, #0]
 8000c8c:	4b38      	ldr	r3, [pc, #224]	; (8000d70 <drawChar+0x218>)
 8000c8e:	881b      	ldrh	r3, [r3, #0]
 8000c90:	683a      	ldr	r2, [r7, #0]
 8000c92:	9201      	str	r2, [sp, #4]
 8000c94:	9300      	str	r3, [sp, #0]
 8000c96:	002b      	movs	r3, r5
 8000c98:	0022      	movs	r2, r4
 8000c9a:	f7ff ff13 	bl	8000ac4 <fillRect>
		for (int8_t j=0; j<8; j++, line >>= 1) {
 8000c9e:	210d      	movs	r1, #13
 8000ca0:	187b      	adds	r3, r7, r1
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	b25b      	sxtb	r3, r3
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	3301      	adds	r3, #1
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	187b      	adds	r3, r7, r1
 8000cae:	701a      	strb	r2, [r3, #0]
 8000cb0:	220e      	movs	r2, #14
 8000cb2:	18bb      	adds	r3, r7, r2
 8000cb4:	18ba      	adds	r2, r7, r2
 8000cb6:	7812      	ldrb	r2, [r2, #0]
 8000cb8:	0852      	lsrs	r2, r2, #1
 8000cba:	701a      	strb	r2, [r3, #0]
 8000cbc:	230d      	movs	r3, #13
 8000cbe:	18fb      	adds	r3, r7, r3
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	b25b      	sxtb	r3, r3
 8000cc4:	2b07      	cmp	r3, #7
 8000cc6:	dc00      	bgt.n	8000cca <drawChar+0x172>
 8000cc8:	e766      	b.n	8000b98 <drawChar+0x40>
	for (int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 8000cca:	210f      	movs	r1, #15
 8000ccc:	187b      	adds	r3, r7, r1
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	b25b      	sxtb	r3, r3
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	187b      	adds	r3, r7, r1
 8000cda:	701a      	strb	r2, [r3, #0]
 8000cdc:	230f      	movs	r3, #15
 8000cde:	18fb      	adds	r3, r7, r3
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	b25b      	sxtb	r3, r3
 8000ce4:	2b04      	cmp	r3, #4
 8000ce6:	dc00      	bgt.n	8000cea <drawChar+0x192>
 8000ce8:	e742      	b.n	8000b70 <drawChar+0x18>
			}
		}
	}

	// 6wx8h char. this is 6th column, since it's always blank for kerning
	if (bg != textColor) { // If opaque, draw vertical line for last column
 8000cea:	4b21      	ldr	r3, [pc, #132]	; (8000d70 <drawChar+0x218>)
 8000cec:	881a      	ldrh	r2, [r3, #0]
 8000cee:	4b1f      	ldr	r3, [pc, #124]	; (8000d6c <drawChar+0x214>)
 8000cf0:	881b      	ldrh	r3, [r3, #0]
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d02d      	beq.n	8000d52 <drawChar+0x1fa>
		if (textSize == 1) drawVLine(cursorX+5, cursorY, 8, bg, hspi);
 8000cf6:	4b1a      	ldr	r3, [pc, #104]	; (8000d60 <drawChar+0x208>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d10e      	bne.n	8000d1c <drawChar+0x1c4>
 8000cfe:	4b19      	ldr	r3, [pc, #100]	; (8000d64 <drawChar+0x20c>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	3305      	adds	r3, #5
 8000d04:	b2d8      	uxtb	r0, r3
 8000d06:	4b18      	ldr	r3, [pc, #96]	; (8000d68 <drawChar+0x210>)
 8000d08:	7819      	ldrb	r1, [r3, #0]
 8000d0a:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <drawChar+0x218>)
 8000d0c:	881a      	ldrh	r2, [r3, #0]
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	0013      	movs	r3, r2
 8000d14:	2208      	movs	r2, #8
 8000d16:	f7ff fe2e 	bl	8000976 <drawVLine>
		else fillRect(cursorX+5*textSize, cursorY, textSize, 8*textSize, bg, hspi);
	}
}
 8000d1a:	e01a      	b.n	8000d52 <drawChar+0x1fa>
		else fillRect(cursorX+5*textSize, cursorY, textSize, 8*textSize, bg, hspi);
 8000d1c:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <drawChar+0x208>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	1c1a      	adds	r2, r3, #0
 8000d22:	0092      	lsls	r2, r2, #2
 8000d24:	18d3      	adds	r3, r2, r3
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <drawChar+0x20c>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	18d3      	adds	r3, r2, r3
 8000d2e:	b2d8      	uxtb	r0, r3
 8000d30:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <drawChar+0x210>)
 8000d32:	7819      	ldrb	r1, [r3, #0]
 8000d34:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <drawChar+0x208>)
 8000d36:	781c      	ldrb	r4, [r3, #0]
 8000d38:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <drawChar+0x208>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	00db      	lsls	r3, r3, #3
 8000d3e:	b2dd      	uxtb	r5, r3
 8000d40:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <drawChar+0x218>)
 8000d42:	881b      	ldrh	r3, [r3, #0]
 8000d44:	683a      	ldr	r2, [r7, #0]
 8000d46:	9201      	str	r2, [sp, #4]
 8000d48:	9300      	str	r3, [sp, #0]
 8000d4a:	002b      	movs	r3, r5
 8000d4c:	0022      	movs	r2, r4
 8000d4e:	f7ff feb9 	bl	8000ac4 <fillRect>
}
 8000d52:	46c0      	nop			; (mov r8, r8)
 8000d54:	46bd      	mov	sp, r7
 8000d56:	b004      	add	sp, #16
 8000d58:	bdb0      	pop	{r4, r5, r7, pc}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	0800711c 	.word	0x0800711c
 8000d60:	200000da 	.word	0x200000da
 8000d64:	200000d8 	.word	0x200000d8
 8000d68:	200000d9 	.word	0x200000d9
 8000d6c:	200000dc 	.word	0x200000dc
 8000d70:	200000de 	.word	0x200000de

08000d74 <drawTextAt>:
	for (int i = 0; str[i] != '\0'; i++) {
		drawChar(str[i], hspi);
	}
}

void drawTextAt(uint8_t x, uint8_t y, char *str, SPI_HandleTypeDef *hspi) {
 8000d74:	b590      	push	{r4, r7, lr}
 8000d76:	b087      	sub	sp, #28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60ba      	str	r2, [r7, #8]
 8000d7c:	607b      	str	r3, [r7, #4]
 8000d7e:	240f      	movs	r4, #15
 8000d80:	193b      	adds	r3, r7, r4
 8000d82:	1c02      	adds	r2, r0, #0
 8000d84:	701a      	strb	r2, [r3, #0]
 8000d86:	200e      	movs	r0, #14
 8000d88:	183b      	adds	r3, r7, r0
 8000d8a:	1c0a      	adds	r2, r1, #0
 8000d8c:	701a      	strb	r2, [r3, #0]
	// add text wrap
	int i = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
	setCursor(x,y);
 8000d92:	183b      	adds	r3, r7, r0
 8000d94:	781a      	ldrb	r2, [r3, #0]
 8000d96:	193b      	adds	r3, r7, r4
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	0011      	movs	r1, r2
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	f000 f831 	bl	8000e04 <setCursor>
	for (i = 0; str[i] != '\0'; i++) {
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	e01d      	b.n	8000de4 <drawTextAt+0x70>
		drawChar(str[i], hspi);
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	68ba      	ldr	r2, [r7, #8]
 8000dac:	18d3      	adds	r3, r2, r3
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	0011      	movs	r1, r2
 8000db4:	0018      	movs	r0, r3
 8000db6:	f7ff fecf 	bl	8000b58 <drawChar>
		setCursor(cursorX+textSize*6, cursorY);
 8000dba:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <drawTextAt+0x84>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	1c1a      	adds	r2, r3, #0
 8000dc0:	1c13      	adds	r3, r2, #0
 8000dc2:	18db      	adds	r3, r3, r3
 8000dc4:	189b      	adds	r3, r3, r2
 8000dc6:	18db      	adds	r3, r3, r3
 8000dc8:	b2da      	uxtb	r2, r3
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <drawTextAt+0x88>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	18d3      	adds	r3, r2, r3
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <drawTextAt+0x8c>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	0019      	movs	r1, r3
 8000dd8:	0010      	movs	r0, r2
 8000dda:	f000 f813 	bl	8000e04 <setCursor>
	for (i = 0; str[i] != '\0'; i++) {
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	3301      	adds	r3, #1
 8000de2:	617b      	str	r3, [r7, #20]
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	68ba      	ldr	r2, [r7, #8]
 8000de8:	18d3      	adds	r3, r2, r3
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d1db      	bne.n	8000da8 <drawTextAt+0x34>
	}
//	setCursor(x+i*textSize*6, y);
}
 8000df0:	46c0      	nop			; (mov r8, r8)
 8000df2:	46bd      	mov	sp, r7
 8000df4:	b007      	add	sp, #28
 8000df6:	bd90      	pop	{r4, r7, pc}
 8000df8:	200000da 	.word	0x200000da
 8000dfc:	200000d8 	.word	0x200000d8
 8000e00:	200000d9 	.word	0x200000d9

08000e04 <setCursor>:

void setBackgroundColor(uint16_t color) {bg = color;}

void setCursor(uint8_t x, uint8_t y) {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	0002      	movs	r2, r0
 8000e0c:	1dfb      	adds	r3, r7, #7
 8000e0e:	701a      	strb	r2, [r3, #0]
 8000e10:	1dbb      	adds	r3, r7, #6
 8000e12:	1c0a      	adds	r2, r1, #0
 8000e14:	701a      	strb	r2, [r3, #0]
	cursorX = x;
 8000e16:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <setCursor+0x2c>)
 8000e18:	1dfa      	adds	r2, r7, #7
 8000e1a:	7812      	ldrb	r2, [r2, #0]
 8000e1c:	701a      	strb	r2, [r3, #0]
	cursorY = y;
 8000e1e:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <setCursor+0x30>)
 8000e20:	1dba      	adds	r2, r7, #6
 8000e22:	7812      	ldrb	r2, [r2, #0]
 8000e24:	701a      	strb	r2, [r3, #0]
}
 8000e26:	46c0      	nop			; (mov r8, r8)
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	b002      	add	sp, #8
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	200000d8 	.word	0x200000d8
 8000e34:	200000d9 	.word	0x200000d9

08000e38 <clearScreen>:

void setTextSize(uint8_t size) {textSize = size;}

void setTextColor(uint16_t color) {textColor = color;}

void clearScreen(uint16_t backgroundColor, SPI_HandleTypeDef *hspi) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	0002      	movs	r2, r0
 8000e40:	6039      	str	r1, [r7, #0]
 8000e42:	1dbb      	adds	r3, r7, #6
 8000e44:	801a      	strh	r2, [r3, #0]
	bg = backgroundColor;
 8000e46:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <clearScreen+0x2c>)
 8000e48:	1dba      	adds	r2, r7, #6
 8000e4a:	8812      	ldrh	r2, [r2, #0]
 8000e4c:	801a      	strh	r2, [r3, #0]
	fillScreen(backgroundColor, hspi);
 8000e4e:	683a      	ldr	r2, [r7, #0]
 8000e50:	1dbb      	adds	r3, r7, #6
 8000e52:	881b      	ldrh	r3, [r3, #0]
 8000e54:	0011      	movs	r1, r2
 8000e56:	0018      	movs	r0, r3
 8000e58:	f7ff fe68 	bl	8000b2c <fillScreen>
}
 8000e5c:	46c0      	nop			; (mov r8, r8)
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	b002      	add	sp, #8
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	200000de 	.word	0x200000de

08000e68 <setTime>:

#include "clocks.h"
#include "timers.h"

// set rtc time. uses perosnal struct as arg
void setTime(struct times *t, RTC_HandleTypeDef *hrtc) {
 8000e68:	b590      	push	{r4, r7, lr}
 8000e6a:	b089      	sub	sp, #36	; 0x24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
	RTC_TimeTypeDef stime = {0};	// change to malloc call? does that work in embedded?
 8000e72:	210c      	movs	r1, #12
 8000e74:	000c      	movs	r4, r1
 8000e76:	187b      	adds	r3, r7, r1
 8000e78:	0018      	movs	r0, r3
 8000e7a:	2314      	movs	r3, #20
 8000e7c:	001a      	movs	r2, r3
 8000e7e:	2100      	movs	r1, #0
 8000e80:	f005 fc31 	bl	80066e6 <memset>

	// set using args later
	stime.Hours = t->hr;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	781a      	ldrb	r2, [r3, #0]
 8000e88:	0021      	movs	r1, r4
 8000e8a:	187b      	adds	r3, r7, r1
 8000e8c:	701a      	strb	r2, [r3, #0]
	stime.Minutes = t->min;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	785a      	ldrb	r2, [r3, #1]
 8000e92:	187b      	adds	r3, r7, r1
 8000e94:	705a      	strb	r2, [r3, #1]
	stime.Seconds = t->sec;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	789a      	ldrb	r2, [r3, #2]
 8000e9a:	187b      	adds	r3, r7, r1
 8000e9c:	709a      	strb	r2, [r3, #2]

	stime.TimeFormat = RTC_HOURFORMAT_24;
 8000e9e:	187b      	adds	r3, r7, r1
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	70da      	strb	r2, [r3, #3]

	// not sure what these do, but probably fine if set to 0 or ignored
	stime.SubSeconds = 0;
 8000ea4:	187b      	adds	r3, r7, r1
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	605a      	str	r2, [r3, #4]
	stime.SecondFraction = 0;
 8000eaa:	187b      	adds	r3, r7, r1
 8000eac:	2200      	movs	r2, #0
 8000eae:	609a      	str	r2, [r3, #8]

	stime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;		// add daylight savings later?
 8000eb0:	187b      	adds	r3, r7, r1
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	60da      	str	r2, [r3, #12]
	stime.StoreOperation = RTC_STOREOPERATION_SET;		// not sure what this does
 8000eb6:	187b      	adds	r3, r7, r1
 8000eb8:	2280      	movs	r2, #128	; 0x80
 8000eba:	02d2      	lsls	r2, r2, #11
 8000ebc:	611a      	str	r2, [r3, #16]

	// do nothing until done
	// not following BCD format (4-bit digit 1, 4-bit digit 2)
	// while makes program hang? ignore instead?
//	while (HAL_RTC_SetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK);
	HAL_RTC_SetTime(hrtc, &stime, RTC_FORMAT_BIN);
 8000ebe:	1879      	adds	r1, r7, r1
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	f003 fe05 	bl	8004ad4 <HAL_RTC_SetTime>
}
 8000eca:	46c0      	nop			; (mov r8, r8)
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	b009      	add	sp, #36	; 0x24
 8000ed0:	bd90      	pop	{r4, r7, pc}

08000ed2 <setDate>:

// set rtc date. uses personal struct
void setDate(struct dates *d, RTC_HandleTypeDef *hrtc) {
 8000ed2:	b590      	push	{r4, r7, lr}
 8000ed4:	b085      	sub	sp, #20
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
 8000eda:	6039      	str	r1, [r7, #0]
	// ---- date ----
	RTC_DateTypeDef sdate = {0};
 8000edc:	240c      	movs	r4, #12
 8000ede:	193b      	adds	r3, r7, r4
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]

	sdate.Month = d->month;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	789a      	ldrb	r2, [r3, #2]
 8000ee8:	193b      	adds	r3, r7, r4
 8000eea:	705a      	strb	r2, [r3, #1]
	sdate.Date = d->date;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	78da      	ldrb	r2, [r3, #3]
 8000ef0:	193b      	adds	r3, r7, r4
 8000ef2:	709a      	strb	r2, [r3, #2]
	sdate.WeekDay = d->weekday;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	791a      	ldrb	r2, [r3, #4]
 8000ef8:	193b      	adds	r3, r7, r4
 8000efa:	701a      	strb	r2, [r3, #0]
	sdate.Year = d->yr % 100; 		// set only between 0-99. part of the library (!?)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	881b      	ldrh	r3, [r3, #0]
 8000f00:	2164      	movs	r1, #100	; 0x64
 8000f02:	0018      	movs	r0, r3
 8000f04:	f7ff f986 	bl	8000214 <__aeabi_uidivmod>
 8000f08:	000b      	movs	r3, r1
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	193b      	adds	r3, r7, r4
 8000f10:	70da      	strb	r2, [r3, #3]

	HAL_RTC_SetDate(hrtc, &sdate, RTC_FORMAT_BIN);
 8000f12:	1939      	adds	r1, r7, r4
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	2200      	movs	r2, #0
 8000f18:	0018      	movs	r0, r3
 8000f1a:	f003 fefb 	bl	8004d14 <HAL_RTC_SetDate>
}
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	46bd      	mov	sp, r7
 8000f22:	b005      	add	sp, #20
 8000f24:	bd90      	pop	{r4, r7, pc}

08000f26 <setDateTime>:

void setDateTime(struct dates *d, struct times *t, RTC_HandleTypeDef *hrtc) {
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b084      	sub	sp, #16
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	60f8      	str	r0, [r7, #12]
 8000f2e:	60b9      	str	r1, [r7, #8]
 8000f30:	607a      	str	r2, [r7, #4]
	setDate(d, hrtc);
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	0011      	movs	r1, r2
 8000f38:	0018      	movs	r0, r3
 8000f3a:	f7ff ffca 	bl	8000ed2 <setDate>
	setTime(t, hrtc);
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	0011      	movs	r1, r2
 8000f44:	0018      	movs	r0, r3
 8000f46:	f7ff ff8f 	bl	8000e68 <setTime>
}
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	b004      	add	sp, #16
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <setTimer>:
	HAL_RTC_SetAlarm_IT(hrtc, &salarm, RTC_FORMAT_BIN);
}

// set alarm for timer function of watch project
// using RTC alarm hardware
void setTimer(struct times *t_in, RTC_HandleTypeDef *hrtc, TIM_HandleTypeDef *htim) {
 8000f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f56:	b099      	sub	sp, #100	; 0x64
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
	RTC_AlarmTypeDef salarm = {0};
 8000f60:	2338      	movs	r3, #56	; 0x38
 8000f62:	18fb      	adds	r3, r7, r3
 8000f64:	0018      	movs	r0, r3
 8000f66:	2328      	movs	r3, #40	; 0x28
 8000f68:	001a      	movs	r2, r3
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	f005 fbbb 	bl	80066e6 <memset>
	RTC_TimeTypeDef salarmtime = {0};
 8000f70:	2324      	movs	r3, #36	; 0x24
 8000f72:	18fb      	adds	r3, r7, r3
 8000f74:	0018      	movs	r0, r3
 8000f76:	2314      	movs	r3, #20
 8000f78:	001a      	movs	r2, r3
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	f005 fbb3 	bl	80066e6 <memset>

	// set global variables to hold value being set
	watchTimer = *t_in;
 8000f80:	4a67      	ldr	r2, [pc, #412]	; (8001120 <setTimer+0x1cc>)
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	0010      	movs	r0, r2
 8000f86:	0019      	movs	r1, r3
 8000f88:	2303      	movs	r3, #3
 8000f8a:	001a      	movs	r2, r3
 8000f8c:	f005 fba2 	bl	80066d4 <memcpy>
	watchTimerSeconds = t_in->sec + t_in->min*60 + t_in->hr * 3600;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	789b      	ldrb	r3, [r3, #2]
 8000f94:	0019      	movs	r1, r3
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	785b      	ldrb	r3, [r3, #1]
 8000f9a:	001a      	movs	r2, r3
 8000f9c:	0013      	movs	r3, r2
 8000f9e:	011b      	lsls	r3, r3, #4
 8000fa0:	1a9b      	subs	r3, r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	18c9      	adds	r1, r1, r3
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	001a      	movs	r2, r3
 8000fac:	0013      	movs	r3, r2
 8000fae:	011b      	lsls	r3, r3, #4
 8000fb0:	1a9b      	subs	r3, r3, r2
 8000fb2:	011a      	lsls	r2, r3, #4
 8000fb4:	1ad2      	subs	r2, r2, r3
 8000fb6:	0113      	lsls	r3, r2, #4
 8000fb8:	001a      	movs	r2, r3
 8000fba:	0013      	movs	r3, r2
 8000fbc:	18cb      	adds	r3, r1, r3
 8000fbe:	001a      	movs	r2, r3
 8000fc0:	4b58      	ldr	r3, [pc, #352]	; (8001124 <setTimer+0x1d0>)
 8000fc2:	601a      	str	r2, [r3, #0]

	// pull current RTC time
	struct dates d;
	struct times t;
	getDateTime(&d, &t, hrtc);
 8000fc4:	68ba      	ldr	r2, [r7, #8]
 8000fc6:	2418      	movs	r4, #24
 8000fc8:	1939      	adds	r1, r7, r4
 8000fca:	231c      	movs	r3, #28
 8000fcc:	18fb      	adds	r3, r7, r3
 8000fce:	0018      	movs	r0, r3
 8000fd0:	f000 f8ac 	bl	800112c <getDateTime>

	struct alarmTimes a;

	// adding timer value to current time so we can set an alarm time
	if (t.sec + t_in->sec > 60) {		// adding seconds
 8000fd4:	193b      	adds	r3, r7, r4
 8000fd6:	789b      	ldrb	r3, [r3, #2]
 8000fd8:	001a      	movs	r2, r3
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	789b      	ldrb	r3, [r3, #2]
 8000fde:	18d3      	adds	r3, r2, r3
 8000fe0:	2b3c      	cmp	r3, #60	; 0x3c
 8000fe2:	dd49      	ble.n	8001078 <setTimer+0x124>
		if (t.min + t_in->min > 60) {		// adding minutes
 8000fe4:	2318      	movs	r3, #24
 8000fe6:	18fb      	adds	r3, r7, r3
 8000fe8:	785b      	ldrb	r3, [r3, #1]
 8000fea:	001a      	movs	r2, r3
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	785b      	ldrb	r3, [r3, #1]
 8000ff0:	18d3      	adds	r3, r2, r3
 8000ff2:	2b3c      	cmp	r3, #60	; 0x3c
 8000ff4:	dd30      	ble.n	8001058 <setTimer+0x104>
			if (t.hr + t_in->hr > 24) {			// adding hours
 8000ff6:	2318      	movs	r3, #24
 8000ff8:	18fb      	adds	r3, r7, r3
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	001a      	movs	r2, r3
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	18d3      	adds	r3, r2, r3
 8001004:	2b18      	cmp	r3, #24
 8001006:	dd17      	ble.n	8001038 <setTimer+0xe4>
				a.weekday = ((d.weekday + t_in->hr/24) % 7) + 1;		// bc weekday count starts from 1
 8001008:	231c      	movs	r3, #28
 800100a:	18fb      	adds	r3, r7, r3
 800100c:	791b      	ldrb	r3, [r3, #4]
 800100e:	001c      	movs	r4, r3
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2118      	movs	r1, #24
 8001016:	0018      	movs	r0, r3
 8001018:	f7ff f876 	bl	8000108 <__udivsi3>
 800101c:	0003      	movs	r3, r0
 800101e:	b2db      	uxtb	r3, r3
 8001020:	18e3      	adds	r3, r4, r3
 8001022:	2107      	movs	r1, #7
 8001024:	0018      	movs	r0, r3
 8001026:	f7ff f9df 	bl	80003e8 <__aeabi_idivmod>
 800102a:	000b      	movs	r3, r1
 800102c:	b2db      	uxtb	r3, r3
 800102e:	3301      	adds	r3, #1
 8001030:	b2da      	uxtb	r2, r3
 8001032:	2314      	movs	r3, #20
 8001034:	18fb      	adds	r3, r7, r3
 8001036:	70da      	strb	r2, [r3, #3]
			}
			a.hr = (t.hr + t_in->hr) % 24;
 8001038:	2318      	movs	r3, #24
 800103a:	18fb      	adds	r3, r7, r3
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	001a      	movs	r2, r3
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	18d3      	adds	r3, r2, r3
 8001046:	2118      	movs	r1, #24
 8001048:	0018      	movs	r0, r3
 800104a:	f7ff f9cd 	bl	80003e8 <__aeabi_idivmod>
 800104e:	000b      	movs	r3, r1
 8001050:	b2da      	uxtb	r2, r3
 8001052:	2314      	movs	r3, #20
 8001054:	18fb      	adds	r3, r7, r3
 8001056:	701a      	strb	r2, [r3, #0]
		}
		a.min = (t.min + t_in->min) % 60;
 8001058:	2318      	movs	r3, #24
 800105a:	18fb      	adds	r3, r7, r3
 800105c:	785b      	ldrb	r3, [r3, #1]
 800105e:	001a      	movs	r2, r3
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	785b      	ldrb	r3, [r3, #1]
 8001064:	18d3      	adds	r3, r2, r3
 8001066:	213c      	movs	r1, #60	; 0x3c
 8001068:	0018      	movs	r0, r3
 800106a:	f7ff f9bd 	bl	80003e8 <__aeabi_idivmod>
 800106e:	000b      	movs	r3, r1
 8001070:	b2da      	uxtb	r2, r3
 8001072:	2314      	movs	r3, #20
 8001074:	18fb      	adds	r3, r7, r3
 8001076:	705a      	strb	r2, [r3, #1]
	}
	a.sec = (t.sec + t_in->sec) % 60;
 8001078:	2318      	movs	r3, #24
 800107a:	18fb      	adds	r3, r7, r3
 800107c:	789b      	ldrb	r3, [r3, #2]
 800107e:	001a      	movs	r2, r3
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	789b      	ldrb	r3, [r3, #2]
 8001084:	18d3      	adds	r3, r2, r3
 8001086:	213c      	movs	r1, #60	; 0x3c
 8001088:	0018      	movs	r0, r3
 800108a:	f7ff f9ad 	bl	80003e8 <__aeabi_idivmod>
 800108e:	000b      	movs	r3, r1
 8001090:	b2da      	uxtb	r2, r3
 8001092:	2414      	movs	r4, #20
 8001094:	193b      	adds	r3, r7, r4
 8001096:	709a      	strb	r2, [r3, #2]

	// setting RTC parameters
	salarmtime.Hours = a.hr;
 8001098:	193b      	adds	r3, r7, r4
 800109a:	781a      	ldrb	r2, [r3, #0]
 800109c:	2124      	movs	r1, #36	; 0x24
 800109e:	187b      	adds	r3, r7, r1
 80010a0:	701a      	strb	r2, [r3, #0]
	salarmtime.Minutes = a.min;
 80010a2:	193b      	adds	r3, r7, r4
 80010a4:	785a      	ldrb	r2, [r3, #1]
 80010a6:	187b      	adds	r3, r7, r1
 80010a8:	705a      	strb	r2, [r3, #1]
	salarmtime.Seconds = a.sec;
 80010aa:	193b      	adds	r3, r7, r4
 80010ac:	789a      	ldrb	r2, [r3, #2]
 80010ae:	187b      	adds	r3, r7, r1
 80010b0:	709a      	strb	r2, [r3, #2]
	salarmtime.TimeFormat = RTC_HOURFORMAT_24;
 80010b2:	187b      	adds	r3, r7, r1
 80010b4:	2200      	movs	r2, #0
 80010b6:	70da      	strb	r2, [r3, #3]
	salarmtime.SubSeconds = 0;
 80010b8:	187b      	adds	r3, r7, r1
 80010ba:	2200      	movs	r2, #0
 80010bc:	605a      	str	r2, [r3, #4]
	salarmtime.SecondFraction = 0;
 80010be:	187b      	adds	r3, r7, r1
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
	salarmtime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80010c4:	187b      	adds	r3, r7, r1
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
	salarmtime.StoreOperation = RTC_STOREOPERATION_RESET;
 80010ca:	187b      	adds	r3, r7, r1
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]

	salarm.AlarmTime = salarmtime;
 80010d0:	2038      	movs	r0, #56	; 0x38
 80010d2:	183b      	adds	r3, r7, r0
 80010d4:	187a      	adds	r2, r7, r1
 80010d6:	ca62      	ldmia	r2!, {r1, r5, r6}
 80010d8:	c362      	stmia	r3!, {r1, r5, r6}
 80010da:	ca22      	ldmia	r2!, {r1, r5}
 80010dc:	c322      	stmia	r3!, {r1, r5}
	salarm.AlarmMask = RTC_ALARMMASK_ALL;
 80010de:	183b      	adds	r3, r7, r0
 80010e0:	4a11      	ldr	r2, [pc, #68]	; (8001128 <setTimer+0x1d4>)
 80010e2:	615a      	str	r2, [r3, #20]
	salarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80010e4:	183b      	adds	r3, r7, r0
 80010e6:	2200      	movs	r2, #0
 80010e8:	619a      	str	r2, [r3, #24]
	salarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 80010ea:	183b      	adds	r3, r7, r0
 80010ec:	2280      	movs	r2, #128	; 0x80
 80010ee:	05d2      	lsls	r2, r2, #23
 80010f0:	61da      	str	r2, [r3, #28]
	salarm.AlarmDateWeekDay = a.weekday;
 80010f2:	193b      	adds	r3, r7, r4
 80010f4:	78d9      	ldrb	r1, [r3, #3]
 80010f6:	183b      	adds	r3, r7, r0
 80010f8:	2220      	movs	r2, #32
 80010fa:	5499      	strb	r1, [r3, r2]
	salarm.Alarm = RTC_ALARM_B;			// change if using different alarm
 80010fc:	183b      	adds	r3, r7, r0
 80010fe:	2280      	movs	r2, #128	; 0x80
 8001100:	0092      	lsls	r2, r2, #2
 8001102:	625a      	str	r2, [r3, #36]	; 0x24

	// do nothing until done
//	while (HAL_RTC_SetAlarm_IT(hrtc, &salarm, RTC_FORMAT_BCD) != HAL_OK);
	HAL_RTC_SetAlarm_IT(hrtc, &salarm, RTC_FORMAT_BIN);
 8001104:	1839      	adds	r1, r7, r0
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	2200      	movs	r2, #0
 800110a:	0018      	movs	r0, r3
 800110c:	f004 f824 	bl	8005158 <HAL_RTC_SetAlarm_IT>

	runTimerDisplay(htim);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	0018      	movs	r0, r3
 8001114:	f001 fc5a 	bl	80029cc <runTimerDisplay>
}
 8001118:	46c0      	nop			; (mov r8, r8)
 800111a:	46bd      	mov	sp, r7
 800111c:	b019      	add	sp, #100	; 0x64
 800111e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001120:	20000124 	.word	0x20000124
 8001124:	20000128 	.word	0x20000128
 8001128:	80808080 	.word	0x80808080

0800112c <getDateTime>:
	d->date = sdate.Date;
	d->weekday = sdate.WeekDay;
}

// not using getDate and getTime for efficiency (?)
void getDateTime(struct dates *d, struct times *t, RTC_HandleTypeDef *hrtc) {
 800112c:	b590      	push	{r4, r7, lr}
 800112e:	b08b      	sub	sp, #44	; 0x2c
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
	RTC_DateTypeDef sdate;
	RTC_TimeTypeDef stime;

	// programming manual says to read time after date. something shadow registers.
	// not done automatically in HAL
	HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN);
 8001138:	2310      	movs	r3, #16
 800113a:	18f9      	adds	r1, r7, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	0018      	movs	r0, r3
 8001142:	f003 fd8b 	bl	8004c5c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &sdate, RTC_FORMAT_BIN);
 8001146:	2424      	movs	r4, #36	; 0x24
 8001148:	1939      	adds	r1, r7, r4
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	0018      	movs	r0, r3
 8001150:	f003 fe8e 	bl	8004e70 <HAL_RTC_GetDate>

	d->yr = sdate.Year > 50 ? sdate.Year+1900 : sdate.Year+2000;		// make assumptions on whether it's 19xx or 20xx
 8001154:	193b      	adds	r3, r7, r4
 8001156:	78db      	ldrb	r3, [r3, #3]
 8001158:	2b32      	cmp	r3, #50	; 0x32
 800115a:	d908      	bls.n	800116e <getDateTime+0x42>
 800115c:	2324      	movs	r3, #36	; 0x24
 800115e:	18fb      	adds	r3, r7, r3
 8001160:	78db      	ldrb	r3, [r3, #3]
 8001162:	b29b      	uxth	r3, r3
 8001164:	4a16      	ldr	r2, [pc, #88]	; (80011c0 <getDateTime+0x94>)
 8001166:	4694      	mov	ip, r2
 8001168:	4463      	add	r3, ip
 800116a:	b29b      	uxth	r3, r3
 800116c:	e008      	b.n	8001180 <getDateTime+0x54>
 800116e:	2324      	movs	r3, #36	; 0x24
 8001170:	18fb      	adds	r3, r7, r3
 8001172:	78db      	ldrb	r3, [r3, #3]
 8001174:	b29b      	uxth	r3, r3
 8001176:	22fa      	movs	r2, #250	; 0xfa
 8001178:	00d2      	lsls	r2, r2, #3
 800117a:	4694      	mov	ip, r2
 800117c:	4463      	add	r3, ip
 800117e:	b29b      	uxth	r3, r3
 8001180:	68fa      	ldr	r2, [r7, #12]
 8001182:	8013      	strh	r3, [r2, #0]
	d->month = sdate.Month;
 8001184:	2124      	movs	r1, #36	; 0x24
 8001186:	187b      	adds	r3, r7, r1
 8001188:	785a      	ldrb	r2, [r3, #1]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	709a      	strb	r2, [r3, #2]
	d->date = sdate.Date;
 800118e:	187b      	adds	r3, r7, r1
 8001190:	789a      	ldrb	r2, [r3, #2]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	70da      	strb	r2, [r3, #3]
	d->weekday = sdate.WeekDay;
 8001196:	187b      	adds	r3, r7, r1
 8001198:	781a      	ldrb	r2, [r3, #0]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	711a      	strb	r2, [r3, #4]

	t->hr = stime.Hours;
 800119e:	2110      	movs	r1, #16
 80011a0:	187b      	adds	r3, r7, r1
 80011a2:	781a      	ldrb	r2, [r3, #0]
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	701a      	strb	r2, [r3, #0]
	t->min = stime.Minutes;
 80011a8:	187b      	adds	r3, r7, r1
 80011aa:	785a      	ldrb	r2, [r3, #1]
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	705a      	strb	r2, [r3, #1]
	t->sec = stime.Seconds;
 80011b0:	187b      	adds	r3, r7, r1
 80011b2:	789a      	ldrb	r2, [r3, #2]
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	709a      	strb	r2, [r3, #2]
}
 80011b8:	46c0      	nop			; (mov r8, r8)
 80011ba:	46bd      	mov	sp, r7
 80011bc:	b00b      	add	sp, #44	; 0x2c
 80011be:	bd90      	pop	{r4, r7, pc}
 80011c0:	0000076c 	.word	0x0000076c

080011c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011c8:	f001 fc36 	bl	8002a38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011cc:	f000 f846 	bl	800125c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011d0:	f000 fad8 	bl	8001784 <MX_GPIO_Init>
  MX_SPI1_Init();
 80011d4:	f000 f9ee 	bl	80015b4 <MX_SPI1_Init>
  MX_ADC_Init();
 80011d8:	f000 f8c4 	bl	8001364 <MX_ADC_Init>
  MX_RTC_Init();
 80011dc:	f000 f94e 	bl	800147c <MX_RTC_Init>
  MX_TIM21_Init();
 80011e0:	f000 fa24 	bl	800162c <MX_TIM21_Init>
  MX_LPTIM1_Init();
 80011e4:	f000 f922 	bl	800142c <MX_LPTIM1_Init>
  MX_DMA_Init();
 80011e8:	f000 faae 	bl	8001748 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */
//	uint16_t bg = ST77XX_BLACK;
  	bg = ST77XX_BLACK;
 80011ec:	4b15      	ldr	r3, [pc, #84]	; (8001244 <main+0x80>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	801a      	strh	r2, [r3, #0]
	HAL_Delay(2000);
 80011f2:	23fa      	movs	r3, #250	; 0xfa
 80011f4:	00db      	lsls	r3, r3, #3
 80011f6:	0018      	movs	r0, r3
 80011f8:	f001 fc7e 	bl	8002af8 <HAL_Delay>
	TFT_startup(&hspi1);
 80011fc:	4b12      	ldr	r3, [pc, #72]	; (8001248 <main+0x84>)
 80011fe:	0018      	movs	r0, r3
 8001200:	f7ff fa08 	bl	8000614 <TFT_startup>
	fillScreen(bg, &hspi1);
 8001204:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <main+0x80>)
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	4a0f      	ldr	r2, [pc, #60]	; (8001248 <main+0x84>)
 800120a:	0011      	movs	r1, r2
 800120c:	0018      	movs	r0, r3
 800120e:	f7ff fc8d 	bl	8000b2c <fillScreen>

	updateFace = 1;
 8001212:	4b0e      	ldr	r3, [pc, #56]	; (800124c <main+0x88>)
 8001214:	2201      	movs	r2, #1
 8001216:	701a      	strb	r2, [r3, #0]
	face = faceClock;
 8001218:	4b0d      	ldr	r3, [pc, #52]	; (8001250 <main+0x8c>)
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
	updateClock = 1;
 800121e:	4b0d      	ldr	r3, [pc, #52]	; (8001254 <main+0x90>)
 8001220:	2201      	movs	r2, #1
 8001222:	701a      	strb	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // default
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <main+0x94>)
 8001226:	2102      	movs	r1, #2
 8001228:	0018      	movs	r0, r3
 800122a:	f002 fab5 	bl	8003798 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 800122e:	23fa      	movs	r3, #250	; 0xfa
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	0018      	movs	r0, r3
 8001234:	f001 fc60 	bl	8002af8 <HAL_Delay>
//	  lineTest(&hspi1);
//	  charTest(&hspi1);
//	  textTest(bg, &hspi1);

	  // nav tests
	  updateDisplay(&hspi1);
 8001238:	4b03      	ldr	r3, [pc, #12]	; (8001248 <main+0x84>)
 800123a:	0018      	movs	r0, r3
 800123c:	f000 fb5e 	bl	80018fc <updateDisplay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8001240:	e7f0      	b.n	8001224 <main+0x60>
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	200000e0 	.word	0x200000e0
 8001248:	200001b0 	.word	0x200001b0
 800124c:	20000150 	.word	0x20000150
 8001250:	200000e4 	.word	0x200000e4
 8001254:	20000134 	.word	0x20000134
 8001258:	50000400 	.word	0x50000400

0800125c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800125c:	b590      	push	{r4, r7, lr}
 800125e:	b09f      	sub	sp, #124	; 0x7c
 8001260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001262:	2440      	movs	r4, #64	; 0x40
 8001264:	193b      	adds	r3, r7, r4
 8001266:	0018      	movs	r0, r3
 8001268:	2338      	movs	r3, #56	; 0x38
 800126a:	001a      	movs	r2, r3
 800126c:	2100      	movs	r1, #0
 800126e:	f005 fa3a 	bl	80066e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001272:	232c      	movs	r3, #44	; 0x2c
 8001274:	18fb      	adds	r3, r7, r3
 8001276:	0018      	movs	r0, r3
 8001278:	2314      	movs	r3, #20
 800127a:	001a      	movs	r2, r3
 800127c:	2100      	movs	r1, #0
 800127e:	f005 fa32 	bl	80066e6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	0018      	movs	r0, r3
 8001286:	2328      	movs	r3, #40	; 0x28
 8001288:	001a      	movs	r2, r3
 800128a:	2100      	movs	r1, #0
 800128c:	f005 fa2b 	bl	80066e6 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001290:	4b31      	ldr	r3, [pc, #196]	; (8001358 <SystemClock_Config+0xfc>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a31      	ldr	r2, [pc, #196]	; (800135c <SystemClock_Config+0x100>)
 8001296:	401a      	ands	r2, r3
 8001298:	4b2f      	ldr	r3, [pc, #188]	; (8001358 <SystemClock_Config+0xfc>)
 800129a:	2180      	movs	r1, #128	; 0x80
 800129c:	0109      	lsls	r1, r1, #4
 800129e:	430a      	orrs	r2, r1
 80012a0:	601a      	str	r2, [r3, #0]
  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80012a2:	f002 fc79 	bl	8003b98 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80012a6:	4b2e      	ldr	r3, [pc, #184]	; (8001360 <SystemClock_Config+0x104>)
 80012a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012aa:	4b2d      	ldr	r3, [pc, #180]	; (8001360 <SystemClock_Config+0x104>)
 80012ac:	492b      	ldr	r1, [pc, #172]	; (800135c <SystemClock_Config+0x100>)
 80012ae:	400a      	ands	r2, r1
 80012b0:	651a      	str	r2, [r3, #80]	; 0x50
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 80012b2:	193b      	adds	r3, r7, r4
 80012b4:	223c      	movs	r2, #60	; 0x3c
 80012b6:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80012b8:	193b      	adds	r3, r7, r4
 80012ba:	2280      	movs	r2, #128	; 0x80
 80012bc:	0052      	lsls	r2, r2, #1
 80012be:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80012c0:	0021      	movs	r1, r4
 80012c2:	187b      	adds	r3, r7, r1
 80012c4:	2201      	movs	r2, #1
 80012c6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80012c8:	187b      	adds	r3, r7, r1
 80012ca:	2201      	movs	r2, #1
 80012cc:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80012ce:	187b      	adds	r3, r7, r1
 80012d0:	2201      	movs	r2, #1
 80012d2:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80012d4:	187b      	adds	r3, r7, r1
 80012d6:	2200      	movs	r2, #0
 80012d8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80012da:	187b      	adds	r3, r7, r1
 80012dc:	22a0      	movs	r2, #160	; 0xa0
 80012de:	0212      	lsls	r2, r2, #8
 80012e0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012e2:	187b      	adds	r3, r7, r1
 80012e4:	2200      	movs	r2, #0
 80012e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012e8:	187b      	adds	r3, r7, r1
 80012ea:	0018      	movs	r0, r3
 80012ec:	f002 fc62 	bl	8003bb4 <HAL_RCC_OscConfig>
 80012f0:	1e03      	subs	r3, r0, #0
 80012f2:	d001      	beq.n	80012f8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80012f4:	f000 fafc 	bl	80018f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012f8:	212c      	movs	r1, #44	; 0x2c
 80012fa:	187b      	adds	r3, r7, r1
 80012fc:	220f      	movs	r2, #15
 80012fe:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001300:	187b      	adds	r3, r7, r1
 8001302:	2200      	movs	r2, #0
 8001304:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001306:	187b      	adds	r3, r7, r1
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800130c:	187b      	adds	r3, r7, r1
 800130e:	2200      	movs	r2, #0
 8001310:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001312:	187b      	adds	r3, r7, r1
 8001314:	2200      	movs	r2, #0
 8001316:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001318:	187b      	adds	r3, r7, r1
 800131a:	2100      	movs	r1, #0
 800131c:	0018      	movs	r0, r3
 800131e:	f003 f819 	bl	8004354 <HAL_RCC_ClockConfig>
 8001322:	1e03      	subs	r3, r0, #0
 8001324:	d001      	beq.n	800132a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001326:	f000 fae3 	bl	80018f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_LPTIM1;
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	22a0      	movs	r2, #160	; 0xa0
 800132e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001330:	1d3b      	adds	r3, r7, #4
 8001332:	2280      	movs	r2, #128	; 0x80
 8001334:	0292      	lsls	r2, r2, #10
 8001336:	605a      	str	r2, [r3, #4]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	2200      	movs	r2, #0
 800133c:	621a      	str	r2, [r3, #32]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	0018      	movs	r0, r3
 8001342:	f003 f9b5 	bl	80046b0 <HAL_RCCEx_PeriphCLKConfig>
 8001346:	1e03      	subs	r3, r0, #0
 8001348:	d001      	beq.n	800134e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800134a:	f000 fad1 	bl	80018f0 <Error_Handler>
  }
}
 800134e:	46c0      	nop			; (mov r8, r8)
 8001350:	46bd      	mov	sp, r7
 8001352:	b01f      	add	sp, #124	; 0x7c
 8001354:	bd90      	pop	{r4, r7, pc}
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	40007000 	.word	0x40007000
 800135c:	ffffe7ff 	.word	0xffffe7ff
 8001360:	40021000 	.word	0x40021000

08001364 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800136a:	003b      	movs	r3, r7
 800136c:	0018      	movs	r0, r3
 800136e:	2308      	movs	r3, #8
 8001370:	001a      	movs	r2, r3
 8001372:	2100      	movs	r1, #0
 8001374:	f005 f9b7 	bl	80066e6 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8001378:	4b2a      	ldr	r3, [pc, #168]	; (8001424 <MX_ADC_Init+0xc0>)
 800137a:	4a2b      	ldr	r2, [pc, #172]	; (8001428 <MX_ADC_Init+0xc4>)
 800137c:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800137e:	4b29      	ldr	r3, [pc, #164]	; (8001424 <MX_ADC_Init+0xc0>)
 8001380:	2200      	movs	r2, #0
 8001382:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8001384:	4b27      	ldr	r3, [pc, #156]	; (8001424 <MX_ADC_Init+0xc0>)
 8001386:	22c0      	movs	r2, #192	; 0xc0
 8001388:	0612      	lsls	r2, r2, #24
 800138a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800138c:	4b25      	ldr	r3, [pc, #148]	; (8001424 <MX_ADC_Init+0xc0>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001392:	4b24      	ldr	r3, [pc, #144]	; (8001424 <MX_ADC_Init+0xc0>)
 8001394:	2200      	movs	r2, #0
 8001396:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001398:	4b22      	ldr	r3, [pc, #136]	; (8001424 <MX_ADC_Init+0xc0>)
 800139a:	2201      	movs	r2, #1
 800139c:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800139e:	4b21      	ldr	r3, [pc, #132]	; (8001424 <MX_ADC_Init+0xc0>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80013a4:	4b1f      	ldr	r3, [pc, #124]	; (8001424 <MX_ADC_Init+0xc0>)
 80013a6:	2220      	movs	r2, #32
 80013a8:	2100      	movs	r1, #0
 80013aa:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80013ac:	4b1d      	ldr	r3, [pc, #116]	; (8001424 <MX_ADC_Init+0xc0>)
 80013ae:	2221      	movs	r2, #33	; 0x21
 80013b0:	2100      	movs	r1, #0
 80013b2:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013b4:	4b1b      	ldr	r3, [pc, #108]	; (8001424 <MX_ADC_Init+0xc0>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013ba:	4b1a      	ldr	r3, [pc, #104]	; (8001424 <MX_ADC_Init+0xc0>)
 80013bc:	22c2      	movs	r2, #194	; 0xc2
 80013be:	32ff      	adds	r2, #255	; 0xff
 80013c0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80013c2:	4b18      	ldr	r3, [pc, #96]	; (8001424 <MX_ADC_Init+0xc0>)
 80013c4:	222c      	movs	r2, #44	; 0x2c
 80013c6:	2100      	movs	r1, #0
 80013c8:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013ca:	4b16      	ldr	r3, [pc, #88]	; (8001424 <MX_ADC_Init+0xc0>)
 80013cc:	2204      	movs	r2, #4
 80013ce:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80013d0:	4b14      	ldr	r3, [pc, #80]	; (8001424 <MX_ADC_Init+0xc0>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80013d6:	4b13      	ldr	r3, [pc, #76]	; (8001424 <MX_ADC_Init+0xc0>)
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80013dc:	4b11      	ldr	r3, [pc, #68]	; (8001424 <MX_ADC_Init+0xc0>)
 80013de:	2200      	movs	r2, #0
 80013e0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80013e2:	4b10      	ldr	r3, [pc, #64]	; (8001424 <MX_ADC_Init+0xc0>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80013e8:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <MX_ADC_Init+0xc0>)
 80013ea:	0018      	movs	r0, r3
 80013ec:	f001 fba2 	bl	8002b34 <HAL_ADC_Init>
 80013f0:	1e03      	subs	r3, r0, #0
 80013f2:	d001      	beq.n	80013f8 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80013f4:	f000 fa7c 	bl	80018f0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80013f8:	003b      	movs	r3, r7
 80013fa:	2201      	movs	r2, #1
 80013fc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80013fe:	003b      	movs	r3, r7
 8001400:	2280      	movs	r2, #128	; 0x80
 8001402:	0152      	lsls	r2, r2, #5
 8001404:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001406:	003a      	movs	r2, r7
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <MX_ADC_Init+0xc0>)
 800140a:	0011      	movs	r1, r2
 800140c:	0018      	movs	r0, r3
 800140e:	f001 fd05 	bl	8002e1c <HAL_ADC_ConfigChannel>
 8001412:	1e03      	subs	r3, r0, #0
 8001414:	d001      	beq.n	800141a <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8001416:	f000 fa6b 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800141a:	46c0      	nop			; (mov r8, r8)
 800141c:	46bd      	mov	sp, r7
 800141e:	b002      	add	sp, #8
 8001420:	bd80      	pop	{r7, pc}
 8001422:	46c0      	nop			; (mov r8, r8)
 8001424:	20000210 	.word	0x20000210
 8001428:	40012400 	.word	0x40012400

0800142c <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001430:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <MX_LPTIM1_Init+0x44>)
 8001432:	4a10      	ldr	r2, [pc, #64]	; (8001474 <MX_LPTIM1_Init+0x48>)
 8001434:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001436:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <MX_LPTIM1_Init+0x44>)
 8001438:	2200      	movs	r2, #0
 800143a:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 800143c:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <MX_LPTIM1_Init+0x44>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001442:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <MX_LPTIM1_Init+0x44>)
 8001444:	4a0c      	ldr	r2, [pc, #48]	; (8001478 <MX_LPTIM1_Init+0x4c>)
 8001446:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001448:	4b09      	ldr	r3, [pc, #36]	; (8001470 <MX_LPTIM1_Init+0x44>)
 800144a:	2200      	movs	r2, #0
 800144c:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800144e:	4b08      	ldr	r3, [pc, #32]	; (8001470 <MX_LPTIM1_Init+0x44>)
 8001450:	2200      	movs	r2, #0
 8001452:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <MX_LPTIM1_Init+0x44>)
 8001456:	2200      	movs	r2, #0
 8001458:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 800145a:	4b05      	ldr	r3, [pc, #20]	; (8001470 <MX_LPTIM1_Init+0x44>)
 800145c:	0018      	movs	r0, r3
 800145e:	f002 f9c9 	bl	80037f4 <HAL_LPTIM_Init>
 8001462:	1e03      	subs	r3, r0, #0
 8001464:	d001      	beq.n	800146a <MX_LPTIM1_Init+0x3e>
  {
    Error_Handler();
 8001466:	f000 fa43 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 800146a:	46c0      	nop			; (mov r8, r8)
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20000154 	.word	0x20000154
 8001474:	40007c00 	.word	0x40007c00
 8001478:	0000ffff 	.word	0x0000ffff

0800147c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b090      	sub	sp, #64	; 0x40
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001482:	232c      	movs	r3, #44	; 0x2c
 8001484:	18fb      	adds	r3, r7, r3
 8001486:	0018      	movs	r0, r3
 8001488:	2314      	movs	r3, #20
 800148a:	001a      	movs	r2, r3
 800148c:	2100      	movs	r1, #0
 800148e:	f005 f92a 	bl	80066e6 <memset>
  RTC_DateTypeDef sDate = {0};
 8001492:	2328      	movs	r3, #40	; 0x28
 8001494:	18fb      	adds	r3, r7, r3
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 800149a:	003b      	movs	r3, r7
 800149c:	0018      	movs	r0, r3
 800149e:	2328      	movs	r3, #40	; 0x28
 80014a0:	001a      	movs	r2, r3
 80014a2:	2100      	movs	r1, #0
 80014a4:	f005 f91f 	bl	80066e6 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80014a8:	4b40      	ldr	r3, [pc, #256]	; (80015ac <MX_RTC_Init+0x130>)
 80014aa:	4a41      	ldr	r2, [pc, #260]	; (80015b0 <MX_RTC_Init+0x134>)
 80014ac:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80014ae:	4b3f      	ldr	r3, [pc, #252]	; (80015ac <MX_RTC_Init+0x130>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80014b4:	4b3d      	ldr	r3, [pc, #244]	; (80015ac <MX_RTC_Init+0x130>)
 80014b6:	227f      	movs	r2, #127	; 0x7f
 80014b8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80014ba:	4b3c      	ldr	r3, [pc, #240]	; (80015ac <MX_RTC_Init+0x130>)
 80014bc:	22ff      	movs	r2, #255	; 0xff
 80014be:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80014c0:	4b3a      	ldr	r3, [pc, #232]	; (80015ac <MX_RTC_Init+0x130>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80014c6:	4b39      	ldr	r3, [pc, #228]	; (80015ac <MX_RTC_Init+0x130>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80014cc:	4b37      	ldr	r3, [pc, #220]	; (80015ac <MX_RTC_Init+0x130>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80014d2:	4b36      	ldr	r3, [pc, #216]	; (80015ac <MX_RTC_Init+0x130>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80014d8:	4b34      	ldr	r3, [pc, #208]	; (80015ac <MX_RTC_Init+0x130>)
 80014da:	0018      	movs	r0, r3
 80014dc:	f003 fa5c 	bl	8004998 <HAL_RTC_Init>
 80014e0:	1e03      	subs	r3, r0, #0
 80014e2:	d001      	beq.n	80014e8 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 80014e4:	f000 fa04 	bl	80018f0 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0;
 80014e8:	212c      	movs	r1, #44	; 0x2c
 80014ea:	187b      	adds	r3, r7, r1
 80014ec:	2200      	movs	r2, #0
 80014ee:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 80014f0:	187b      	adds	r3, r7, r1
 80014f2:	2200      	movs	r2, #0
 80014f4:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 80014f6:	187b      	adds	r3, r7, r1
 80014f8:	2200      	movs	r2, #0
 80014fa:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80014fc:	187b      	adds	r3, r7, r1
 80014fe:	2200      	movs	r2, #0
 8001500:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001502:	187b      	adds	r3, r7, r1
 8001504:	2200      	movs	r2, #0
 8001506:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001508:	1879      	adds	r1, r7, r1
 800150a:	4b28      	ldr	r3, [pc, #160]	; (80015ac <MX_RTC_Init+0x130>)
 800150c:	2200      	movs	r2, #0
 800150e:	0018      	movs	r0, r3
 8001510:	f003 fae0 	bl	8004ad4 <HAL_RTC_SetTime>
 8001514:	1e03      	subs	r3, r0, #0
 8001516:	d001      	beq.n	800151c <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8001518:	f000 f9ea 	bl	80018f0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800151c:	2128      	movs	r1, #40	; 0x28
 800151e:	187b      	adds	r3, r7, r1
 8001520:	2201      	movs	r2, #1
 8001522:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001524:	187b      	adds	r3, r7, r1
 8001526:	2201      	movs	r2, #1
 8001528:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 800152a:	187b      	adds	r3, r7, r1
 800152c:	2201      	movs	r2, #1
 800152e:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 8001530:	187b      	adds	r3, r7, r1
 8001532:	2200      	movs	r2, #0
 8001534:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001536:	1879      	adds	r1, r7, r1
 8001538:	4b1c      	ldr	r3, [pc, #112]	; (80015ac <MX_RTC_Init+0x130>)
 800153a:	2200      	movs	r2, #0
 800153c:	0018      	movs	r0, r3
 800153e:	f003 fbe9 	bl	8004d14 <HAL_RTC_SetDate>
 8001542:	1e03      	subs	r3, r0, #0
 8001544:	d001      	beq.n	800154a <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8001546:	f000 f9d3 	bl	80018f0 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0;
 800154a:	003b      	movs	r3, r7
 800154c:	2200      	movs	r2, #0
 800154e:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8001550:	003b      	movs	r3, r7
 8001552:	2200      	movs	r2, #0
 8001554:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8001556:	003b      	movs	r3, r7
 8001558:	2200      	movs	r2, #0
 800155a:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 800155c:	003b      	movs	r3, r7
 800155e:	2200      	movs	r2, #0
 8001560:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001562:	003b      	movs	r3, r7
 8001564:	2200      	movs	r2, #0
 8001566:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001568:	003b      	movs	r3, r7
 800156a:	2200      	movs	r2, #0
 800156c:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800156e:	003b      	movs	r3, r7
 8001570:	2200      	movs	r2, #0
 8001572:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001574:	003b      	movs	r3, r7
 8001576:	2200      	movs	r2, #0
 8001578:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800157a:	003b      	movs	r3, r7
 800157c:	2200      	movs	r2, #0
 800157e:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8001580:	003b      	movs	r3, r7
 8001582:	2220      	movs	r2, #32
 8001584:	2101      	movs	r1, #1
 8001586:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8001588:	003b      	movs	r3, r7
 800158a:	2280      	movs	r2, #128	; 0x80
 800158c:	0052      	lsls	r2, r2, #1
 800158e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001590:	0039      	movs	r1, r7
 8001592:	4b06      	ldr	r3, [pc, #24]	; (80015ac <MX_RTC_Init+0x130>)
 8001594:	2200      	movs	r2, #0
 8001596:	0018      	movs	r0, r3
 8001598:	f003 fcb8 	bl	8004f0c <HAL_RTC_SetAlarm>
 800159c:	1e03      	subs	r3, r0, #0
 800159e:	d001      	beq.n	80015a4 <MX_RTC_Init+0x128>
  {
    Error_Handler();
 80015a0:	f000 f9a6 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80015a4:	46c0      	nop			; (mov r8, r8)
 80015a6:	46bd      	mov	sp, r7
 80015a8:	b010      	add	sp, #64	; 0x40
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000184 	.word	0x20000184
 80015b0:	40002800 	.word	0x40002800

080015b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015b8:	4b19      	ldr	r3, [pc, #100]	; (8001620 <MX_SPI1_Init+0x6c>)
 80015ba:	4a1a      	ldr	r2, [pc, #104]	; (8001624 <MX_SPI1_Init+0x70>)
 80015bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015be:	4b18      	ldr	r3, [pc, #96]	; (8001620 <MX_SPI1_Init+0x6c>)
 80015c0:	2282      	movs	r2, #130	; 0x82
 80015c2:	0052      	lsls	r2, r2, #1
 80015c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015c6:	4b16      	ldr	r3, [pc, #88]	; (8001620 <MX_SPI1_Init+0x6c>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015cc:	4b14      	ldr	r3, [pc, #80]	; (8001620 <MX_SPI1_Init+0x6c>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015d2:	4b13      	ldr	r3, [pc, #76]	; (8001620 <MX_SPI1_Init+0x6c>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015d8:	4b11      	ldr	r3, [pc, #68]	; (8001620 <MX_SPI1_Init+0x6c>)
 80015da:	2200      	movs	r2, #0
 80015dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015de:	4b10      	ldr	r3, [pc, #64]	; (8001620 <MX_SPI1_Init+0x6c>)
 80015e0:	2280      	movs	r2, #128	; 0x80
 80015e2:	0092      	lsls	r2, r2, #2
 80015e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015e6:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <MX_SPI1_Init+0x6c>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015ec:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <MX_SPI1_Init+0x6c>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015f2:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <MX_SPI1_Init+0x6c>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015f8:	4b09      	ldr	r3, [pc, #36]	; (8001620 <MX_SPI1_Init+0x6c>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80015fe:	4b08      	ldr	r3, [pc, #32]	; (8001620 <MX_SPI1_Init+0x6c>)
 8001600:	2207      	movs	r2, #7
 8001602:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001604:	4b06      	ldr	r3, [pc, #24]	; (8001620 <MX_SPI1_Init+0x6c>)
 8001606:	0018      	movs	r0, r3
 8001608:	f003 ff8a 	bl	8005520 <HAL_SPI_Init>
 800160c:	1e03      	subs	r3, r0, #0
 800160e:	d001      	beq.n	8001614 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001610:	f000 f96e 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  hspi1.hdmatx = &hdma_spi1_tx;
 8001614:	4b02      	ldr	r3, [pc, #8]	; (8001620 <MX_SPI1_Init+0x6c>)
 8001616:	4a04      	ldr	r2, [pc, #16]	; (8001628 <MX_SPI1_Init+0x74>)
 8001618:	649a      	str	r2, [r3, #72]	; 0x48
  /* USER CODE END SPI1_Init 2 */

}
 800161a:	46c0      	nop			; (mov r8, r8)
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	200001b0 	.word	0x200001b0
 8001624:	40013000 	.word	0x40013000
 8001628:	2000026c 	.word	0x2000026c

0800162c <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08a      	sub	sp, #40	; 0x28
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001632:	2318      	movs	r3, #24
 8001634:	18fb      	adds	r3, r7, r3
 8001636:	0018      	movs	r0, r3
 8001638:	2310      	movs	r3, #16
 800163a:	001a      	movs	r2, r3
 800163c:	2100      	movs	r1, #0
 800163e:	f005 f852 	bl	80066e6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001642:	2310      	movs	r3, #16
 8001644:	18fb      	adds	r3, r7, r3
 8001646:	0018      	movs	r0, r3
 8001648:	2308      	movs	r3, #8
 800164a:	001a      	movs	r2, r3
 800164c:	2100      	movs	r1, #0
 800164e:	f005 f84a 	bl	80066e6 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001652:	003b      	movs	r3, r7
 8001654:	0018      	movs	r0, r3
 8001656:	2310      	movs	r3, #16
 8001658:	001a      	movs	r2, r3
 800165a:	2100      	movs	r1, #0
 800165c:	f005 f843 	bl	80066e6 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8001660:	4b37      	ldr	r3, [pc, #220]	; (8001740 <MX_TIM21_Init+0x114>)
 8001662:	4a38      	ldr	r2, [pc, #224]	; (8001744 <MX_TIM21_Init+0x118>)
 8001664:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 0;
 8001666:	4b36      	ldr	r3, [pc, #216]	; (8001740 <MX_TIM21_Init+0x114>)
 8001668:	2200      	movs	r2, #0
 800166a:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800166c:	4b34      	ldr	r3, [pc, #208]	; (8001740 <MX_TIM21_Init+0x114>)
 800166e:	2210      	movs	r2, #16
 8001670:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 0x8000;
 8001672:	4b33      	ldr	r3, [pc, #204]	; (8001740 <MX_TIM21_Init+0x114>)
 8001674:	2280      	movs	r2, #128	; 0x80
 8001676:	0212      	lsls	r2, r2, #8
 8001678:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800167a:	4b31      	ldr	r3, [pc, #196]	; (8001740 <MX_TIM21_Init+0x114>)
 800167c:	2200      	movs	r2, #0
 800167e:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001680:	4b2f      	ldr	r3, [pc, #188]	; (8001740 <MX_TIM21_Init+0x114>)
 8001682:	2200      	movs	r2, #0
 8001684:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8001686:	4b2e      	ldr	r3, [pc, #184]	; (8001740 <MX_TIM21_Init+0x114>)
 8001688:	0018      	movs	r0, r3
 800168a:	f004 fc0f 	bl	8005eac <HAL_TIM_Base_Init>
 800168e:	1e03      	subs	r3, r0, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM21_Init+0x6a>
  {
    Error_Handler();
 8001692:	f000 f92d 	bl	80018f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8001696:	2118      	movs	r1, #24
 8001698:	187b      	adds	r3, r7, r1
 800169a:	2280      	movs	r2, #128	; 0x80
 800169c:	0192      	lsls	r2, r2, #6
 800169e:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80016a0:	187b      	adds	r3, r7, r1
 80016a2:	2200      	movs	r2, #0
 80016a4:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80016a6:	187b      	adds	r3, r7, r1
 80016a8:	2200      	movs	r2, #0
 80016aa:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 80016ac:	187b      	adds	r3, r7, r1
 80016ae:	2200      	movs	r2, #0
 80016b0:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 80016b2:	187a      	adds	r2, r7, r1
 80016b4:	4b22      	ldr	r3, [pc, #136]	; (8001740 <MX_TIM21_Init+0x114>)
 80016b6:	0011      	movs	r1, r2
 80016b8:	0018      	movs	r0, r3
 80016ba:	f004 fcc7 	bl	800604c <HAL_TIM_ConfigClockSource>
 80016be:	1e03      	subs	r3, r0, #0
 80016c0:	d001      	beq.n	80016c6 <MX_TIM21_Init+0x9a>
  {
    Error_Handler();
 80016c2:	f000 f915 	bl	80018f0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim21) != HAL_OK)
 80016c6:	4b1e      	ldr	r3, [pc, #120]	; (8001740 <MX_TIM21_Init+0x114>)
 80016c8:	0018      	movs	r0, r3
 80016ca:	f004 fc3d 	bl	8005f48 <HAL_TIM_OC_Init>
 80016ce:	1e03      	subs	r3, r0, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM21_Init+0xaa>
  {
    Error_Handler();
 80016d2:	f000 f90d 	bl	80018f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d6:	2110      	movs	r1, #16
 80016d8:	187b      	adds	r3, r7, r1
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016de:	187b      	adds	r3, r7, r1
 80016e0:	2200      	movs	r2, #0
 80016e2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 80016e4:	187a      	adds	r2, r7, r1
 80016e6:	4b16      	ldr	r3, [pc, #88]	; (8001740 <MX_TIM21_Init+0x114>)
 80016e8:	0011      	movs	r1, r2
 80016ea:	0018      	movs	r0, r3
 80016ec:	f004 ff68 	bl	80065c0 <HAL_TIMEx_MasterConfigSynchronization>
 80016f0:	1e03      	subs	r3, r0, #0
 80016f2:	d001      	beq.n	80016f8 <MX_TIM21_Init+0xcc>
  {
    Error_Handler();
 80016f4:	f000 f8fc 	bl	80018f0 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim21, TIM21_ETR_LSE) != HAL_OK)
 80016f8:	4b11      	ldr	r3, [pc, #68]	; (8001740 <MX_TIM21_Init+0x114>)
 80016fa:	2103      	movs	r1, #3
 80016fc:	0018      	movs	r0, r3
 80016fe:	f004 ffa2 	bl	8006646 <HAL_TIMEx_RemapConfig>
 8001702:	1e03      	subs	r3, r0, #0
 8001704:	d001      	beq.n	800170a <MX_TIM21_Init+0xde>
  {
    Error_Handler();
 8001706:	f000 f8f3 	bl	80018f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800170a:	003b      	movs	r3, r7
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001710:	003b      	movs	r3, r7
 8001712:	2200      	movs	r2, #0
 8001714:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001716:	003b      	movs	r3, r7
 8001718:	2200      	movs	r2, #0
 800171a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800171c:	003b      	movs	r3, r7
 800171e:	2200      	movs	r2, #0
 8001720:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001722:	0039      	movs	r1, r7
 8001724:	4b06      	ldr	r3, [pc, #24]	; (8001740 <MX_TIM21_Init+0x114>)
 8001726:	2200      	movs	r2, #0
 8001728:	0018      	movs	r0, r3
 800172a:	f004 fc41 	bl	8005fb0 <HAL_TIM_OC_ConfigChannel>
 800172e:	1e03      	subs	r3, r0, #0
 8001730:	d001      	beq.n	8001736 <MX_TIM21_Init+0x10a>
  {
    Error_Handler();
 8001732:	f000 f8dd 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8001736:	46c0      	nop			; (mov r8, r8)
 8001738:	46bd      	mov	sp, r7
 800173a:	b00a      	add	sp, #40	; 0x28
 800173c:	bd80      	pop	{r7, pc}
 800173e:	46c0      	nop			; (mov r8, r8)
 8001740:	200002b4 	.word	0x200002b4
 8001744:	40010800 	.word	0x40010800

08001748 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800174e:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <MX_DMA_Init+0x38>)
 8001750:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001752:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <MX_DMA_Init+0x38>)
 8001754:	2101      	movs	r1, #1
 8001756:	430a      	orrs	r2, r1
 8001758:	631a      	str	r2, [r3, #48]	; 0x30
 800175a:	4b09      	ldr	r3, [pc, #36]	; (8001780 <MX_DMA_Init+0x38>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	2201      	movs	r2, #1
 8001760:	4013      	ands	r3, r2
 8001762:	607b      	str	r3, [r7, #4]
 8001764:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001766:	2200      	movs	r2, #0
 8001768:	2100      	movs	r1, #0
 800176a:	200a      	movs	r0, #10
 800176c:	f001 fcbc 	bl	80030e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001770:	200a      	movs	r0, #10
 8001772:	f001 fcce 	bl	8003112 <HAL_NVIC_EnableIRQ>

}
 8001776:	46c0      	nop			; (mov r8, r8)
 8001778:	46bd      	mov	sp, r7
 800177a:	b002      	add	sp, #8
 800177c:	bd80      	pop	{r7, pc}
 800177e:	46c0      	nop			; (mov r8, r8)
 8001780:	40021000 	.word	0x40021000

08001784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001784:	b590      	push	{r4, r7, lr}
 8001786:	b089      	sub	sp, #36	; 0x24
 8001788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178a:	240c      	movs	r4, #12
 800178c:	193b      	adds	r3, r7, r4
 800178e:	0018      	movs	r0, r3
 8001790:	2314      	movs	r3, #20
 8001792:	001a      	movs	r2, r3
 8001794:	2100      	movs	r1, #0
 8001796:	f004 ffa6 	bl	80066e6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800179a:	4b50      	ldr	r3, [pc, #320]	; (80018dc <MX_GPIO_Init+0x158>)
 800179c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800179e:	4b4f      	ldr	r3, [pc, #316]	; (80018dc <MX_GPIO_Init+0x158>)
 80017a0:	2104      	movs	r1, #4
 80017a2:	430a      	orrs	r2, r1
 80017a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80017a6:	4b4d      	ldr	r3, [pc, #308]	; (80018dc <MX_GPIO_Init+0x158>)
 80017a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017aa:	2204      	movs	r2, #4
 80017ac:	4013      	ands	r3, r2
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b2:	4b4a      	ldr	r3, [pc, #296]	; (80018dc <MX_GPIO_Init+0x158>)
 80017b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017b6:	4b49      	ldr	r3, [pc, #292]	; (80018dc <MX_GPIO_Init+0x158>)
 80017b8:	2101      	movs	r1, #1
 80017ba:	430a      	orrs	r2, r1
 80017bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80017be:	4b47      	ldr	r3, [pc, #284]	; (80018dc <MX_GPIO_Init+0x158>)
 80017c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c2:	2201      	movs	r2, #1
 80017c4:	4013      	ands	r3, r2
 80017c6:	607b      	str	r3, [r7, #4]
 80017c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ca:	4b44      	ldr	r3, [pc, #272]	; (80018dc <MX_GPIO_Init+0x158>)
 80017cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017ce:	4b43      	ldr	r3, [pc, #268]	; (80018dc <MX_GPIO_Init+0x158>)
 80017d0:	2102      	movs	r1, #2
 80017d2:	430a      	orrs	r2, r1
 80017d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80017d6:	4b41      	ldr	r3, [pc, #260]	; (80018dc <MX_GPIO_Init+0x158>)
 80017d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017da:	2202      	movs	r2, #2
 80017dc:	4013      	ands	r3, r2
 80017de:	603b      	str	r3, [r7, #0]
 80017e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_7, GPIO_PIN_RESET);
 80017e2:	4b3f      	ldr	r3, [pc, #252]	; (80018e0 <MX_GPIO_Init+0x15c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	2183      	movs	r1, #131	; 0x83
 80017e8:	0018      	movs	r0, r3
 80017ea:	f001 ffb8 	bl	800375e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_6, GPIO_PIN_RESET);
 80017ee:	4b3d      	ldr	r3, [pc, #244]	; (80018e4 <MX_GPIO_Init+0x160>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	2142      	movs	r1, #66	; 0x42
 80017f4:	0018      	movs	r0, r3
 80017f6:	f001 ffb2 	bl	800375e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_7;
 80017fa:	0021      	movs	r1, r4
 80017fc:	187b      	adds	r3, r7, r1
 80017fe:	2283      	movs	r2, #131	; 0x83
 8001800:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001802:	187b      	adds	r3, r7, r1
 8001804:	2201      	movs	r2, #1
 8001806:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	187b      	adds	r3, r7, r1
 800180a:	2200      	movs	r2, #0
 800180c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180e:	187b      	adds	r3, r7, r1
 8001810:	2200      	movs	r2, #0
 8001812:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001814:	000c      	movs	r4, r1
 8001816:	187b      	adds	r3, r7, r1
 8001818:	4a31      	ldr	r2, [pc, #196]	; (80018e0 <MX_GPIO_Init+0x15c>)
 800181a:	0019      	movs	r1, r3
 800181c:	0010      	movs	r0, r2
 800181e:	f001 fe03 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8001822:	0021      	movs	r1, r4
 8001824:	187b      	adds	r3, r7, r1
 8001826:	2242      	movs	r2, #66	; 0x42
 8001828:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182a:	187b      	adds	r3, r7, r1
 800182c:	2201      	movs	r2, #1
 800182e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	187b      	adds	r3, r7, r1
 8001832:	2200      	movs	r2, #0
 8001834:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001836:	187b      	adds	r3, r7, r1
 8001838:	2200      	movs	r2, #0
 800183a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183c:	000c      	movs	r4, r1
 800183e:	187b      	adds	r3, r7, r1
 8001840:	4a28      	ldr	r2, [pc, #160]	; (80018e4 <MX_GPIO_Init+0x160>)
 8001842:	0019      	movs	r1, r3
 8001844:	0010      	movs	r0, r2
 8001846:	f001 fdef 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800184a:	0021      	movs	r1, r4
 800184c:	187b      	adds	r3, r7, r1
 800184e:	2204      	movs	r2, #4
 8001850:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001852:	187b      	adds	r3, r7, r1
 8001854:	4a24      	ldr	r2, [pc, #144]	; (80018e8 <MX_GPIO_Init+0x164>)
 8001856:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	187b      	adds	r3, r7, r1
 800185a:	2200      	movs	r2, #0
 800185c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800185e:	000c      	movs	r4, r1
 8001860:	187b      	adds	r3, r7, r1
 8001862:	4a20      	ldr	r2, [pc, #128]	; (80018e4 <MX_GPIO_Init+0x160>)
 8001864:	0019      	movs	r1, r3
 8001866:	0010      	movs	r0, r2
 8001868:	f001 fdde 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800186c:	0021      	movs	r1, r4
 800186e:	187b      	adds	r3, r7, r1
 8001870:	22c0      	movs	r2, #192	; 0xc0
 8001872:	01d2      	lsls	r2, r2, #7
 8001874:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001876:	187b      	adds	r3, r7, r1
 8001878:	4a1b      	ldr	r2, [pc, #108]	; (80018e8 <MX_GPIO_Init+0x164>)
 800187a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800187c:	187b      	adds	r3, r7, r1
 800187e:	2202      	movs	r2, #2
 8001880:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001882:	000c      	movs	r4, r1
 8001884:	187b      	adds	r3, r7, r1
 8001886:	4a17      	ldr	r2, [pc, #92]	; (80018e4 <MX_GPIO_Init+0x160>)
 8001888:	0019      	movs	r1, r3
 800188a:	0010      	movs	r0, r2
 800188c:	f001 fdcc 	bl	8003428 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001890:	0021      	movs	r1, r4
 8001892:	187b      	adds	r3, r7, r1
 8001894:	2280      	movs	r2, #128	; 0x80
 8001896:	0212      	lsls	r2, r2, #8
 8001898:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800189a:	187b      	adds	r3, r7, r1
 800189c:	4a13      	ldr	r2, [pc, #76]	; (80018ec <MX_GPIO_Init+0x168>)
 800189e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018a0:	187b      	adds	r3, r7, r1
 80018a2:	2201      	movs	r2, #1
 80018a4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a6:	187b      	adds	r3, r7, r1
 80018a8:	4a0e      	ldr	r2, [pc, #56]	; (80018e4 <MX_GPIO_Init+0x160>)
 80018aa:	0019      	movs	r1, r3
 80018ac:	0010      	movs	r0, r2
 80018ae:	f001 fdbb 	bl	8003428 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80018b2:	2200      	movs	r2, #0
 80018b4:	2100      	movs	r1, #0
 80018b6:	2006      	movs	r0, #6
 80018b8:	f001 fc16 	bl	80030e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80018bc:	2006      	movs	r0, #6
 80018be:	f001 fc28 	bl	8003112 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80018c2:	2200      	movs	r2, #0
 80018c4:	2100      	movs	r1, #0
 80018c6:	2007      	movs	r0, #7
 80018c8:	f001 fc0e 	bl	80030e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80018cc:	2007      	movs	r0, #7
 80018ce:	f001 fc20 	bl	8003112 <HAL_NVIC_EnableIRQ>

}
 80018d2:	46c0      	nop			; (mov r8, r8)
 80018d4:	46bd      	mov	sp, r7
 80018d6:	b009      	add	sp, #36	; 0x24
 80018d8:	bd90      	pop	{r4, r7, pc}
 80018da:	46c0      	nop			; (mov r8, r8)
 80018dc:	40021000 	.word	0x40021000
 80018e0:	50000800 	.word	0x50000800
 80018e4:	50000400 	.word	0x50000400
 80018e8:	10110000 	.word	0x10110000
 80018ec:	10210000 	.word	0x10210000

080018f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80018f4:	46c0      	nop			; (mov r8, r8)
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
	...

080018fc <updateDisplay>:
};

// update screen based on global variables
// going in main, so it's executing in a while loop
//   software interrupt on flag so that this doesn't run all the time?
void updateDisplay(SPI_HandleTypeDef *hspi) {
 80018fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018fe:	b097      	sub	sp, #92	; 0x5c
 8001900:	af02      	add	r7, sp, #8
 8001902:	6078      	str	r0, [r7, #4]
	uint32_t stopwatchVal, timerVal, hr, min, sec;
	struct dates currentDate;
	struct times currentTime;
	// update main clock face
	// missing space for current time
	if (updateFace == 1) {
 8001904:	4bda      	ldr	r3, [pc, #872]	; (8001c70 <updateDisplay+0x374>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b01      	cmp	r3, #1
 800190c:	d143      	bne.n	8001996 <updateDisplay+0x9a>
		updateFace = 0;
 800190e:	4bd8      	ldr	r3, [pc, #864]	; (8001c70 <updateDisplay+0x374>)
 8001910:	2200      	movs	r2, #0
 8001912:	701a      	strb	r2, [r3, #0]
		if (face == faceClock) {
 8001914:	4bd7      	ldr	r3, [pc, #860]	; (8001c74 <updateDisplay+0x378>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d10b      	bne.n	8001934 <updateDisplay+0x38>
			clearScreen(ST77XX_CYAN, hspi);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4ad6      	ldr	r2, [pc, #856]	; (8001c78 <updateDisplay+0x37c>)
 8001920:	0019      	movs	r1, r3
 8001922:	0010      	movs	r0, r2
 8001924:	f7ff fa88 	bl	8000e38 <clearScreen>
			drawTextAt(0, HEIGHT-10, "main     ", hspi);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4ad4      	ldr	r2, [pc, #848]	; (8001c7c <updateDisplay+0x380>)
 800192c:	2196      	movs	r1, #150	; 0x96
 800192e:	2000      	movs	r0, #0
 8001930:	f7ff fa20 	bl	8000d74 <drawTextAt>
		}
		if (face == faceTimer) {
 8001934:	4bcf      	ldr	r3, [pc, #828]	; (8001c74 <updateDisplay+0x378>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d10c      	bne.n	8001956 <updateDisplay+0x5a>
			clearScreen(ST77XX_GREEN, hspi);
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	23fc      	movs	r3, #252	; 0xfc
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	0011      	movs	r1, r2
 8001944:	0018      	movs	r0, r3
 8001946:	f7ff fa77 	bl	8000e38 <clearScreen>
			drawTextAt(0, HEIGHT-10, "timer    ", hspi);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4acc      	ldr	r2, [pc, #816]	; (8001c80 <updateDisplay+0x384>)
 800194e:	2196      	movs	r1, #150	; 0x96
 8001950:	2000      	movs	r0, #0
 8001952:	f7ff fa0f 	bl	8000d74 <drawTextAt>
		}
		if (face == faceAlarm) {
 8001956:	4bc7      	ldr	r3, [pc, #796]	; (8001c74 <updateDisplay+0x378>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2b02      	cmp	r3, #2
 800195c:	d10b      	bne.n	8001976 <updateDisplay+0x7a>
			clearScreen(ST77XX_MAGENTA, hspi);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4ac8      	ldr	r2, [pc, #800]	; (8001c84 <updateDisplay+0x388>)
 8001962:	0019      	movs	r1, r3
 8001964:	0010      	movs	r0, r2
 8001966:	f7ff fa67 	bl	8000e38 <clearScreen>
			drawTextAt(0, HEIGHT-10, "alarm    ", hspi);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4ac6      	ldr	r2, [pc, #792]	; (8001c88 <updateDisplay+0x38c>)
 800196e:	2196      	movs	r1, #150	; 0x96
 8001970:	2000      	movs	r0, #0
 8001972:	f7ff f9ff 	bl	8000d74 <drawTextAt>
		}
		if (face == faceStopwatch) {
 8001976:	4bbf      	ldr	r3, [pc, #764]	; (8001c74 <updateDisplay+0x378>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2b03      	cmp	r3, #3
 800197c:	d10b      	bne.n	8001996 <updateDisplay+0x9a>
			clearScreen(ST77XX_YELLOW, hspi);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4ac2      	ldr	r2, [pc, #776]	; (8001c8c <updateDisplay+0x390>)
 8001982:	0019      	movs	r1, r3
 8001984:	0010      	movs	r0, r2
 8001986:	f7ff fa57 	bl	8000e38 <clearScreen>
			drawTextAt(0, HEIGHT-10, "stopwatch", hspi);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4ac0      	ldr	r2, [pc, #768]	; (8001c90 <updateDisplay+0x394>)
 800198e:	2196      	movs	r1, #150	; 0x96
 8001990:	2000      	movs	r0, #0
 8001992:	f7ff f9ef 	bl	8000d74 <drawTextAt>
		}
	}
	if (face == faceClock) {
 8001996:	4bb7      	ldr	r3, [pc, #732]	; (8001c74 <updateDisplay+0x378>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d000      	beq.n	80019a0 <updateDisplay+0xa4>
 800199e:	e0bb      	b.n	8001b18 <updateDisplay+0x21c>
		if (updateClock == 1) {
 80019a0:	4bbc      	ldr	r3, [pc, #752]	; (8001c94 <updateDisplay+0x398>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d000      	beq.n	80019ac <updateDisplay+0xb0>
 80019aa:	e2ad      	b.n	8001f08 <updateDisplay+0x60c>
			updateClock = 0;
 80019ac:	4bb9      	ldr	r3, [pc, #740]	; (8001c94 <updateDisplay+0x398>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	701a      	strb	r2, [r3, #0]
			if (clockSet == 0) {
 80019b2:	4bb9      	ldr	r3, [pc, #740]	; (8001c98 <updateDisplay+0x39c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d14e      	bne.n	8001a58 <updateDisplay+0x15c>
				drawTextAt(0, 0, "not setting", hspi);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4ab7      	ldr	r2, [pc, #732]	; (8001c9c <updateDisplay+0x3a0>)
 80019be:	2100      	movs	r1, #0
 80019c0:	2000      	movs	r0, #0
 80019c2:	f7ff f9d7 	bl	8000d74 <drawTextAt>
				drawTextAt(0, 10, "     ", hspi);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4ab5      	ldr	r2, [pc, #724]	; (8001ca0 <updateDisplay+0x3a4>)
 80019ca:	210a      	movs	r1, #10
 80019cc:	2000      	movs	r0, #0
 80019ce:	f7ff f9d1 	bl	8000d74 <drawTextAt>
				getDateTime(&currentDate, &currentTime, &hrtc);
 80019d2:	4ab4      	ldr	r2, [pc, #720]	; (8001ca4 <updateDisplay+0x3a8>)
 80019d4:	2108      	movs	r1, #8
 80019d6:	000c      	movs	r4, r1
 80019d8:	1879      	adds	r1, r7, r1
 80019da:	250c      	movs	r5, #12
 80019dc:	197b      	adds	r3, r7, r5
 80019de:	0018      	movs	r0, r3
 80019e0:	f7ff fba4 	bl	800112c <getDateTime>
				sprintf(str, "%2d:%2d:%2d", currentTime.hr, currentTime.min, currentTime.sec);
 80019e4:	0021      	movs	r1, r4
 80019e6:	187b      	adds	r3, r7, r1
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	001a      	movs	r2, r3
 80019ec:	187b      	adds	r3, r7, r1
 80019ee:	785b      	ldrb	r3, [r3, #1]
 80019f0:	001c      	movs	r4, r3
 80019f2:	187b      	adds	r3, r7, r1
 80019f4:	789b      	ldrb	r3, [r3, #2]
 80019f6:	49ac      	ldr	r1, [pc, #688]	; (8001ca8 <updateDisplay+0x3ac>)
 80019f8:	2614      	movs	r6, #20
 80019fa:	19b8      	adds	r0, r7, r6
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	0023      	movs	r3, r4
 8001a00:	f004 fe7a 	bl	80066f8 <siprintf>
				drawTextAt(0, 60, str, hspi);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	19ba      	adds	r2, r7, r6
 8001a08:	213c      	movs	r1, #60	; 0x3c
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	f7ff f9b2 	bl	8000d74 <drawTextAt>
				sprintf(str, "%s, %d, %d   %s", monthNames[currentDate.month], currentDate.date, currentDate.yr, weekdayNames[currentDate.weekday]);
 8001a10:	197b      	adds	r3, r7, r5
 8001a12:	789b      	ldrb	r3, [r3, #2]
 8001a14:	001a      	movs	r2, r3
 8001a16:	4ba5      	ldr	r3, [pc, #660]	; (8001cac <updateDisplay+0x3b0>)
 8001a18:	0092      	lsls	r2, r2, #2
 8001a1a:	58d4      	ldr	r4, [r2, r3]
 8001a1c:	197b      	adds	r3, r7, r5
 8001a1e:	78db      	ldrb	r3, [r3, #3]
 8001a20:	001e      	movs	r6, r3
 8001a22:	002a      	movs	r2, r5
 8001a24:	197b      	adds	r3, r7, r5
 8001a26:	881b      	ldrh	r3, [r3, #0]
 8001a28:	001d      	movs	r5, r3
 8001a2a:	18bb      	adds	r3, r7, r2
 8001a2c:	791b      	ldrb	r3, [r3, #4]
 8001a2e:	001a      	movs	r2, r3
 8001a30:	4b9f      	ldr	r3, [pc, #636]	; (8001cb0 <updateDisplay+0x3b4>)
 8001a32:	0092      	lsls	r2, r2, #2
 8001a34:	58d3      	ldr	r3, [r2, r3]
 8001a36:	499f      	ldr	r1, [pc, #636]	; (8001cb4 <updateDisplay+0x3b8>)
 8001a38:	2214      	movs	r2, #20
 8001a3a:	18b8      	adds	r0, r7, r2
 8001a3c:	9301      	str	r3, [sp, #4]
 8001a3e:	9500      	str	r5, [sp, #0]
 8001a40:	0033      	movs	r3, r6
 8001a42:	0022      	movs	r2, r4
 8001a44:	f004 fe58 	bl	80066f8 <siprintf>
				drawTextAt(0, 70, str, hspi);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2614      	movs	r6, #20
 8001a4c:	19ba      	adds	r2, r7, r6
 8001a4e:	2146      	movs	r1, #70	; 0x46
 8001a50:	2000      	movs	r0, #0
 8001a52:	f7ff f98f 	bl	8000d74 <drawTextAt>
			else if (stopwatchRunning == 1) {
				drawTextAt(0, 0, "running    ", hspi);
			}
		}
	}
}
 8001a56:	e257      	b.n	8001f08 <updateDisplay+0x60c>
			else if (clockSet == 1) {
 8001a58:	4b8f      	ldr	r3, [pc, #572]	; (8001c98 <updateDisplay+0x39c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d000      	beq.n	8001a62 <updateDisplay+0x166>
 8001a60:	e252      	b.n	8001f08 <updateDisplay+0x60c>
				drawTextAt(0, 0, "setting... ", hspi);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a94      	ldr	r2, [pc, #592]	; (8001cb8 <updateDisplay+0x3bc>)
 8001a66:	2100      	movs	r1, #0
 8001a68:	2000      	movs	r0, #0
 8001a6a:	f7ff f983 	bl	8000d74 <drawTextAt>
				switch (clockField) {
 8001a6e:	4b93      	ldr	r3, [pc, #588]	; (8001cbc <updateDisplay+0x3c0>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2b05      	cmp	r3, #5
 8001a74:	d827      	bhi.n	8001ac6 <updateDisplay+0x1ca>
 8001a76:	009a      	lsls	r2, r3, #2
 8001a78:	4b91      	ldr	r3, [pc, #580]	; (8001cc0 <updateDisplay+0x3c4>)
 8001a7a:	18d3      	adds	r3, r2, r3
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	469f      	mov	pc, r3
					case 1: drawTextAt(0, 10, "min  ", hspi); break;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4a90      	ldr	r2, [pc, #576]	; (8001cc4 <updateDisplay+0x3c8>)
 8001a84:	210a      	movs	r1, #10
 8001a86:	2000      	movs	r0, #0
 8001a88:	f7ff f974 	bl	8000d74 <drawTextAt>
 8001a8c:	e01c      	b.n	8001ac8 <updateDisplay+0x1cc>
					case 2: drawTextAt(0, 10, "hr   ", hspi); break;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a8d      	ldr	r2, [pc, #564]	; (8001cc8 <updateDisplay+0x3cc>)
 8001a92:	210a      	movs	r1, #10
 8001a94:	2000      	movs	r0, #0
 8001a96:	f7ff f96d 	bl	8000d74 <drawTextAt>
 8001a9a:	e015      	b.n	8001ac8 <updateDisplay+0x1cc>
					case 3: drawTextAt(0, 10, "year ", hspi); break;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4a8b      	ldr	r2, [pc, #556]	; (8001ccc <updateDisplay+0x3d0>)
 8001aa0:	210a      	movs	r1, #10
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	f7ff f966 	bl	8000d74 <drawTextAt>
 8001aa8:	e00e      	b.n	8001ac8 <updateDisplay+0x1cc>
					case 4: drawTextAt(0, 10, "month", hspi); break;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a88      	ldr	r2, [pc, #544]	; (8001cd0 <updateDisplay+0x3d4>)
 8001aae:	210a      	movs	r1, #10
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	f7ff f95f 	bl	8000d74 <drawTextAt>
 8001ab6:	e007      	b.n	8001ac8 <updateDisplay+0x1cc>
					case 5: drawTextAt(0, 10, "day  ", hspi); break;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4a86      	ldr	r2, [pc, #536]	; (8001cd4 <updateDisplay+0x3d8>)
 8001abc:	210a      	movs	r1, #10
 8001abe:	2000      	movs	r0, #0
 8001ac0:	f7ff f958 	bl	8000d74 <drawTextAt>
 8001ac4:	e000      	b.n	8001ac8 <updateDisplay+0x1cc>
					default: break;
 8001ac6:	46c0      	nop			; (mov r8, r8)
				sprintf(str, "%2d:%2d   ", tempClockTimes.hr, tempClockTimes.min);
 8001ac8:	4b83      	ldr	r3, [pc, #524]	; (8001cd8 <updateDisplay+0x3dc>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	001a      	movs	r2, r3
 8001ace:	4b82      	ldr	r3, [pc, #520]	; (8001cd8 <updateDisplay+0x3dc>)
 8001ad0:	785b      	ldrb	r3, [r3, #1]
 8001ad2:	4982      	ldr	r1, [pc, #520]	; (8001cdc <updateDisplay+0x3e0>)
 8001ad4:	2514      	movs	r5, #20
 8001ad6:	1978      	adds	r0, r7, r5
 8001ad8:	f004 fe0e 	bl	80066f8 <siprintf>
				drawTextAt(0, 60, str, hspi);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	197a      	adds	r2, r7, r5
 8001ae0:	213c      	movs	r1, #60	; 0x3c
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	f7ff f946 	bl	8000d74 <drawTextAt>
				sprintf(str, "%s, %d, %d      ", monthNames[tempClockDate.month], tempClockDate.date, tempClockDate.yr);
 8001ae8:	4b7d      	ldr	r3, [pc, #500]	; (8001ce0 <updateDisplay+0x3e4>)
 8001aea:	789b      	ldrb	r3, [r3, #2]
 8001aec:	001a      	movs	r2, r3
 8001aee:	4b6f      	ldr	r3, [pc, #444]	; (8001cac <updateDisplay+0x3b0>)
 8001af0:	0092      	lsls	r2, r2, #2
 8001af2:	58d2      	ldr	r2, [r2, r3]
 8001af4:	4b7a      	ldr	r3, [pc, #488]	; (8001ce0 <updateDisplay+0x3e4>)
 8001af6:	78db      	ldrb	r3, [r3, #3]
 8001af8:	001c      	movs	r4, r3
 8001afa:	4b79      	ldr	r3, [pc, #484]	; (8001ce0 <updateDisplay+0x3e4>)
 8001afc:	881b      	ldrh	r3, [r3, #0]
 8001afe:	4979      	ldr	r1, [pc, #484]	; (8001ce4 <updateDisplay+0x3e8>)
 8001b00:	1978      	adds	r0, r7, r5
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	0023      	movs	r3, r4
 8001b06:	f004 fdf7 	bl	80066f8 <siprintf>
				drawTextAt(0, 70, str, hspi);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	197a      	adds	r2, r7, r5
 8001b0e:	2146      	movs	r1, #70	; 0x46
 8001b10:	2000      	movs	r0, #0
 8001b12:	f7ff f92f 	bl	8000d74 <drawTextAt>
}
 8001b16:	e1f7      	b.n	8001f08 <updateDisplay+0x60c>
	else if (face == faceTimer) {
 8001b18:	4b56      	ldr	r3, [pc, #344]	; (8001c74 <updateDisplay+0x378>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d000      	beq.n	8001b22 <updateDisplay+0x226>
 8001b20:	e0f6      	b.n	8001d10 <updateDisplay+0x414>
		if (updateTimer == 1) {
 8001b22:	4b71      	ldr	r3, [pc, #452]	; (8001ce8 <updateDisplay+0x3ec>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d000      	beq.n	8001b2e <updateDisplay+0x232>
 8001b2c:	e1ec      	b.n	8001f08 <updateDisplay+0x60c>
			updateTimer = 0;
 8001b2e:	4b6e      	ldr	r3, [pc, #440]	; (8001ce8 <updateDisplay+0x3ec>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	701a      	strb	r2, [r3, #0]
			if (timerSet == 0) {
 8001b34:	4b6d      	ldr	r3, [pc, #436]	; (8001cec <updateDisplay+0x3f0>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d159      	bne.n	8001bf0 <updateDisplay+0x2f4>
				timerVal = watchTimerSeconds;
 8001b3c:	4b6c      	ldr	r3, [pc, #432]	; (8001cf0 <updateDisplay+0x3f4>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	63fb      	str	r3, [r7, #60]	; 0x3c
				if (timerVal != 0) {
 8001b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d030      	beq.n	8001baa <updateDisplay+0x2ae>
					hr = timerVal / 3600;
 8001b48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b4a:	23e1      	movs	r3, #225	; 0xe1
 8001b4c:	0119      	lsls	r1, r3, #4
 8001b4e:	0010      	movs	r0, r2
 8001b50:	f7fe fada 	bl	8000108 <__udivsi3>
 8001b54:	0003      	movs	r3, r0
 8001b56:	64bb      	str	r3, [r7, #72]	; 0x48
					timerVal %= 3600;
 8001b58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b5a:	23e1      	movs	r3, #225	; 0xe1
 8001b5c:	0119      	lsls	r1, r3, #4
 8001b5e:	0010      	movs	r0, r2
 8001b60:	f7fe fb58 	bl	8000214 <__aeabi_uidivmod>
 8001b64:	000b      	movs	r3, r1
 8001b66:	63fb      	str	r3, [r7, #60]	; 0x3c
					min = timerVal / 60;
 8001b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b6a:	213c      	movs	r1, #60	; 0x3c
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	f7fe facb 	bl	8000108 <__udivsi3>
 8001b72:	0003      	movs	r3, r0
 8001b74:	647b      	str	r3, [r7, #68]	; 0x44
					timerVal %= 60;
 8001b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b78:	213c      	movs	r1, #60	; 0x3c
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	f7fe fb4a 	bl	8000214 <__aeabi_uidivmod>
 8001b80:	000b      	movs	r3, r1
 8001b82:	63fb      	str	r3, [r7, #60]	; 0x3c
					sec = timerVal;
 8001b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b86:	643b      	str	r3, [r7, #64]	; 0x40
					sprintf(str, "%2d:%2d:%2d", hr, min, sec);
 8001b88:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8001b8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001b8c:	4946      	ldr	r1, [pc, #280]	; (8001ca8 <updateDisplay+0x3ac>)
 8001b8e:	2514      	movs	r5, #20
 8001b90:	1978      	adds	r0, r7, r5
 8001b92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	0023      	movs	r3, r4
 8001b98:	f004 fdae 	bl	80066f8 <siprintf>
					drawTextAt(0, 60, str, hspi);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	197a      	adds	r2, r7, r5
 8001ba0:	213c      	movs	r1, #60	; 0x3c
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	f7ff f8e6 	bl	8000d74 <drawTextAt>
 8001ba8:	e005      	b.n	8001bb6 <updateDisplay+0x2ba>
					drawTextAt(0, 60, "        ", hspi);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a51      	ldr	r2, [pc, #324]	; (8001cf4 <updateDisplay+0x3f8>)
 8001bae:	213c      	movs	r1, #60	; 0x3c
 8001bb0:	2000      	movs	r0, #0
 8001bb2:	f7ff f8df 	bl	8000d74 <drawTextAt>
				drawTextAt(0, 10, "     ", hspi);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a39      	ldr	r2, [pc, #228]	; (8001ca0 <updateDisplay+0x3a4>)
 8001bba:	210a      	movs	r1, #10
 8001bbc:	2000      	movs	r0, #0
 8001bbe:	f7ff f8d9 	bl	8000d74 <drawTextAt>
				if (timerRunning == 0) {
 8001bc2:	4b4d      	ldr	r3, [pc, #308]	; (8001cf8 <updateDisplay+0x3fc>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d106      	bne.n	8001bd8 <updateDisplay+0x2dc>
					drawTextAt(0, 0, "not running", hspi);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a4b      	ldr	r2, [pc, #300]	; (8001cfc <updateDisplay+0x400>)
 8001bce:	2100      	movs	r1, #0
 8001bd0:	2000      	movs	r0, #0
 8001bd2:	f7ff f8cf 	bl	8000d74 <drawTextAt>
}
 8001bd6:	e197      	b.n	8001f08 <updateDisplay+0x60c>
				else if (timerRunning == 1) {
 8001bd8:	4b47      	ldr	r3, [pc, #284]	; (8001cf8 <updateDisplay+0x3fc>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d000      	beq.n	8001be2 <updateDisplay+0x2e6>
 8001be0:	e192      	b.n	8001f08 <updateDisplay+0x60c>
					drawTextAt(0, 0, "running    ", hspi);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a46      	ldr	r2, [pc, #280]	; (8001d00 <updateDisplay+0x404>)
 8001be6:	2100      	movs	r1, #0
 8001be8:	2000      	movs	r0, #0
 8001bea:	f7ff f8c3 	bl	8000d74 <drawTextAt>
}
 8001bee:	e18b      	b.n	8001f08 <updateDisplay+0x60c>
			else if (timerSet == 1) {
 8001bf0:	4b3e      	ldr	r3, [pc, #248]	; (8001cec <updateDisplay+0x3f0>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d000      	beq.n	8001bfa <updateDisplay+0x2fe>
 8001bf8:	e186      	b.n	8001f08 <updateDisplay+0x60c>
				drawTextAt(0, 0, "setting... ", hspi);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a2e      	ldr	r2, [pc, #184]	; (8001cb8 <updateDisplay+0x3bc>)
 8001bfe:	2100      	movs	r1, #0
 8001c00:	2000      	movs	r0, #0
 8001c02:	f7ff f8b7 	bl	8000d74 <drawTextAt>
				switch (timerField) {
 8001c06:	4b3f      	ldr	r3, [pc, #252]	; (8001d04 <updateDisplay+0x408>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d00b      	beq.n	8001c26 <updateDisplay+0x32a>
 8001c0e:	2b03      	cmp	r3, #3
 8001c10:	d010      	beq.n	8001c34 <updateDisplay+0x338>
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d000      	beq.n	8001c18 <updateDisplay+0x31c>
					default: break;
 8001c16:	e014      	b.n	8001c42 <updateDisplay+0x346>
					case 1: drawTextAt(0, 10, "sec  ", hspi); break;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4a3b      	ldr	r2, [pc, #236]	; (8001d08 <updateDisplay+0x40c>)
 8001c1c:	210a      	movs	r1, #10
 8001c1e:	2000      	movs	r0, #0
 8001c20:	f7ff f8a8 	bl	8000d74 <drawTextAt>
 8001c24:	e00d      	b.n	8001c42 <updateDisplay+0x346>
					case 2: drawTextAt(0, 10, "min  ", hspi); break;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a26      	ldr	r2, [pc, #152]	; (8001cc4 <updateDisplay+0x3c8>)
 8001c2a:	210a      	movs	r1, #10
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	f7ff f8a1 	bl	8000d74 <drawTextAt>
 8001c32:	e006      	b.n	8001c42 <updateDisplay+0x346>
					case 3: drawTextAt(0, 10, "hr   ", hspi); break;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a24      	ldr	r2, [pc, #144]	; (8001cc8 <updateDisplay+0x3cc>)
 8001c38:	210a      	movs	r1, #10
 8001c3a:	2000      	movs	r0, #0
 8001c3c:	f7ff f89a 	bl	8000d74 <drawTextAt>
 8001c40:	46c0      	nop			; (mov r8, r8)
				sprintf(str, "%2d:%2d:%2d", tempTimer.hr, tempTimer.min, tempTimer.sec);
 8001c42:	4b32      	ldr	r3, [pc, #200]	; (8001d0c <updateDisplay+0x410>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	001a      	movs	r2, r3
 8001c48:	4b30      	ldr	r3, [pc, #192]	; (8001d0c <updateDisplay+0x410>)
 8001c4a:	785b      	ldrb	r3, [r3, #1]
 8001c4c:	001c      	movs	r4, r3
 8001c4e:	4b2f      	ldr	r3, [pc, #188]	; (8001d0c <updateDisplay+0x410>)
 8001c50:	789b      	ldrb	r3, [r3, #2]
 8001c52:	4915      	ldr	r1, [pc, #84]	; (8001ca8 <updateDisplay+0x3ac>)
 8001c54:	2514      	movs	r5, #20
 8001c56:	1978      	adds	r0, r7, r5
 8001c58:	9300      	str	r3, [sp, #0]
 8001c5a:	0023      	movs	r3, r4
 8001c5c:	f004 fd4c 	bl	80066f8 <siprintf>
				drawTextAt(0, 60, str, hspi);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	197a      	adds	r2, r7, r5
 8001c64:	213c      	movs	r1, #60	; 0x3c
 8001c66:	2000      	movs	r0, #0
 8001c68:	f7ff f884 	bl	8000d74 <drawTextAt>
}
 8001c6c:	e14c      	b.n	8001f08 <updateDisplay+0x60c>
 8001c6e:	46c0      	nop			; (mov r8, r8)
 8001c70:	20000150 	.word	0x20000150
 8001c74:	200000e8 	.word	0x200000e8
 8001c78:	000007ff 	.word	0x000007ff
 8001c7c:	0800701c 	.word	0x0800701c
 8001c80:	08007028 	.word	0x08007028
 8001c84:	0000f81f 	.word	0x0000f81f
 8001c88:	08007034 	.word	0x08007034
 8001c8c:	0000ffe0 	.word	0x0000ffe0
 8001c90:	08007040 	.word	0x08007040
 8001c94:	20000134 	.word	0x20000134
 8001c98:	200000ec 	.word	0x200000ec
 8001c9c:	0800704c 	.word	0x0800704c
 8001ca0:	08007058 	.word	0x08007058
 8001ca4:	20000184 	.word	0x20000184
 8001ca8:	08007060 	.word	0x08007060
 8001cac:	20000020 	.word	0x20000020
 8001cb0:	20000000 	.word	0x20000000
 8001cb4:	0800706c 	.word	0x0800706c
 8001cb8:	0800707c 	.word	0x0800707c
 8001cbc:	200000f0 	.word	0x200000f0
 8001cc0:	0800761c 	.word	0x0800761c
 8001cc4:	08007088 	.word	0x08007088
 8001cc8:	08007090 	.word	0x08007090
 8001ccc:	08007098 	.word	0x08007098
 8001cd0:	080070a0 	.word	0x080070a0
 8001cd4:	080070a8 	.word	0x080070a8
 8001cd8:	20000130 	.word	0x20000130
 8001cdc:	080070b0 	.word	0x080070b0
 8001ce0:	20000208 	.word	0x20000208
 8001ce4:	080070bc 	.word	0x080070bc
 8001ce8:	200001ac 	.word	0x200001ac
 8001cec:	200000f4 	.word	0x200000f4
 8001cf0:	20000128 	.word	0x20000128
 8001cf4:	080070d0 	.word	0x080070d0
 8001cf8:	200000fc 	.word	0x200000fc
 8001cfc:	080070dc 	.word	0x080070dc
 8001d00:	080070e8 	.word	0x080070e8
 8001d04:	200000f8 	.word	0x200000f8
 8001d08:	080070f4 	.word	0x080070f4
 8001d0c:	2000012c 	.word	0x2000012c
	else if (face == faceAlarm) {
 8001d10:	4b7f      	ldr	r3, [pc, #508]	; (8001f10 <updateDisplay+0x614>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d000      	beq.n	8001d1a <updateDisplay+0x41e>
 8001d18:	e0a2      	b.n	8001e60 <updateDisplay+0x564>
		if (updateAlarm == 1) {
 8001d1a:	4b7e      	ldr	r3, [pc, #504]	; (8001f14 <updateDisplay+0x618>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d000      	beq.n	8001d26 <updateDisplay+0x42a>
 8001d24:	e0f0      	b.n	8001f08 <updateDisplay+0x60c>
			updateAlarm = 0;
 8001d26:	4b7b      	ldr	r3, [pc, #492]	; (8001f14 <updateDisplay+0x618>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	701a      	strb	r2, [r3, #0]
			if (alarmSet == 0) {
 8001d2c:	4b7a      	ldr	r3, [pc, #488]	; (8001f18 <updateDisplay+0x61c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d141      	bne.n	8001db8 <updateDisplay+0x4bc>
				drawTextAt(0, 10, "     ", hspi);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a79      	ldr	r2, [pc, #484]	; (8001f1c <updateDisplay+0x620>)
 8001d38:	210a      	movs	r1, #10
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	f7ff f81a 	bl	8000d74 <drawTextAt>
				if (alarmRunning == 0) {
 8001d40:	4b77      	ldr	r3, [pc, #476]	; (8001f20 <updateDisplay+0x624>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d10c      	bne.n	8001d62 <updateDisplay+0x466>
					drawTextAt(0, 0, "not running", hspi);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a76      	ldr	r2, [pc, #472]	; (8001f24 <updateDisplay+0x628>)
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	2000      	movs	r0, #0
 8001d50:	f7ff f810 	bl	8000d74 <drawTextAt>
					drawTextAt(0, 60, "              ", hspi);		// clears line used in other cases. probably should wrap in graphics function
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a74      	ldr	r2, [pc, #464]	; (8001f28 <updateDisplay+0x62c>)
 8001d58:	213c      	movs	r1, #60	; 0x3c
 8001d5a:	2000      	movs	r0, #0
 8001d5c:	f7ff f80a 	bl	8000d74 <drawTextAt>
}
 8001d60:	e0d2      	b.n	8001f08 <updateDisplay+0x60c>
				else if (alarmRunning == 1) {
 8001d62:	4b6f      	ldr	r3, [pc, #444]	; (8001f20 <updateDisplay+0x624>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d000      	beq.n	8001d6c <updateDisplay+0x470>
 8001d6a:	e0cd      	b.n	8001f08 <updateDisplay+0x60c>
					drawTextAt(0, 0, "running    ", hspi);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a6f      	ldr	r2, [pc, #444]	; (8001f2c <updateDisplay+0x630>)
 8001d70:	2100      	movs	r1, #0
 8001d72:	2000      	movs	r0, #0
 8001d74:	f7fe fffe 	bl	8000d74 <drawTextAt>
					sprintf(str, "%2d:%2d:%2d %s", watchAlarm.hr, watchAlarm.min, watchAlarm.sec, weekdayNames[watchAlarm.weekday]);
 8001d78:	4b6d      	ldr	r3, [pc, #436]	; (8001f30 <updateDisplay+0x634>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	001d      	movs	r5, r3
 8001d7e:	4b6c      	ldr	r3, [pc, #432]	; (8001f30 <updateDisplay+0x634>)
 8001d80:	785b      	ldrb	r3, [r3, #1]
 8001d82:	001e      	movs	r6, r3
 8001d84:	4b6a      	ldr	r3, [pc, #424]	; (8001f30 <updateDisplay+0x634>)
 8001d86:	789b      	ldrb	r3, [r3, #2]
 8001d88:	001c      	movs	r4, r3
 8001d8a:	4b69      	ldr	r3, [pc, #420]	; (8001f30 <updateDisplay+0x634>)
 8001d8c:	78db      	ldrb	r3, [r3, #3]
 8001d8e:	001a      	movs	r2, r3
 8001d90:	4b68      	ldr	r3, [pc, #416]	; (8001f34 <updateDisplay+0x638>)
 8001d92:	0092      	lsls	r2, r2, #2
 8001d94:	58d3      	ldr	r3, [r2, r3]
 8001d96:	4968      	ldr	r1, [pc, #416]	; (8001f38 <updateDisplay+0x63c>)
 8001d98:	2214      	movs	r2, #20
 8001d9a:	18b8      	adds	r0, r7, r2
 8001d9c:	9301      	str	r3, [sp, #4]
 8001d9e:	9400      	str	r4, [sp, #0]
 8001da0:	0033      	movs	r3, r6
 8001da2:	002a      	movs	r2, r5
 8001da4:	f004 fca8 	bl	80066f8 <siprintf>
					drawTextAt(0, 60, str, hspi);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2214      	movs	r2, #20
 8001dac:	18ba      	adds	r2, r7, r2
 8001dae:	213c      	movs	r1, #60	; 0x3c
 8001db0:	2000      	movs	r0, #0
 8001db2:	f7fe ffdf 	bl	8000d74 <drawTextAt>
}
 8001db6:	e0a7      	b.n	8001f08 <updateDisplay+0x60c>
			else if (alarmSet == 1) {
 8001db8:	4b57      	ldr	r3, [pc, #348]	; (8001f18 <updateDisplay+0x61c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d000      	beq.n	8001dc2 <updateDisplay+0x4c6>
 8001dc0:	e0a2      	b.n	8001f08 <updateDisplay+0x60c>
				drawTextAt(0, 0, "setting... ", hspi);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a5d      	ldr	r2, [pc, #372]	; (8001f3c <updateDisplay+0x640>)
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	2000      	movs	r0, #0
 8001dca:	f7fe ffd3 	bl	8000d74 <drawTextAt>
				switch (alarmField) {
 8001dce:	4b5c      	ldr	r3, [pc, #368]	; (8001f40 <updateDisplay+0x644>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d00f      	beq.n	8001df6 <updateDisplay+0x4fa>
 8001dd6:	dc02      	bgt.n	8001dde <updateDisplay+0x4e2>
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d005      	beq.n	8001de8 <updateDisplay+0x4ec>
					default: break;
 8001ddc:	e020      	b.n	8001e20 <updateDisplay+0x524>
				switch (alarmField) {
 8001dde:	2b03      	cmp	r3, #3
 8001de0:	d010      	beq.n	8001e04 <updateDisplay+0x508>
 8001de2:	2b04      	cmp	r3, #4
 8001de4:	d015      	beq.n	8001e12 <updateDisplay+0x516>
					default: break;
 8001de6:	e01b      	b.n	8001e20 <updateDisplay+0x524>
					case 1: drawTextAt(0, 10, "sec  ", hspi); break;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a56      	ldr	r2, [pc, #344]	; (8001f44 <updateDisplay+0x648>)
 8001dec:	210a      	movs	r1, #10
 8001dee:	2000      	movs	r0, #0
 8001df0:	f7fe ffc0 	bl	8000d74 <drawTextAt>
 8001df4:	e014      	b.n	8001e20 <updateDisplay+0x524>
					case 2: drawTextAt(0, 10, "min  ", hspi); break;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a53      	ldr	r2, [pc, #332]	; (8001f48 <updateDisplay+0x64c>)
 8001dfa:	210a      	movs	r1, #10
 8001dfc:	2000      	movs	r0, #0
 8001dfe:	f7fe ffb9 	bl	8000d74 <drawTextAt>
 8001e02:	e00d      	b.n	8001e20 <updateDisplay+0x524>
					case 3: drawTextAt(0, 10, "hr   ", hspi); break;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a51      	ldr	r2, [pc, #324]	; (8001f4c <updateDisplay+0x650>)
 8001e08:	210a      	movs	r1, #10
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	f7fe ffb2 	bl	8000d74 <drawTextAt>
 8001e10:	e006      	b.n	8001e20 <updateDisplay+0x524>
					case 4: drawTextAt(0, 10, "day  ", hspi); break;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a4e      	ldr	r2, [pc, #312]	; (8001f50 <updateDisplay+0x654>)
 8001e16:	210a      	movs	r1, #10
 8001e18:	2000      	movs	r0, #0
 8001e1a:	f7fe ffab 	bl	8000d74 <drawTextAt>
 8001e1e:	46c0      	nop			; (mov r8, r8)
				sprintf(str, "%2d:%2d:%2d %s", tempAlarm.hr, tempAlarm.min, tempAlarm.sec, weekdayNames[tempAlarm.weekday]);
 8001e20:	4b4c      	ldr	r3, [pc, #304]	; (8001f54 <updateDisplay+0x658>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	001d      	movs	r5, r3
 8001e26:	4b4b      	ldr	r3, [pc, #300]	; (8001f54 <updateDisplay+0x658>)
 8001e28:	785b      	ldrb	r3, [r3, #1]
 8001e2a:	001e      	movs	r6, r3
 8001e2c:	4b49      	ldr	r3, [pc, #292]	; (8001f54 <updateDisplay+0x658>)
 8001e2e:	789b      	ldrb	r3, [r3, #2]
 8001e30:	001c      	movs	r4, r3
 8001e32:	4b48      	ldr	r3, [pc, #288]	; (8001f54 <updateDisplay+0x658>)
 8001e34:	78db      	ldrb	r3, [r3, #3]
 8001e36:	001a      	movs	r2, r3
 8001e38:	4b3e      	ldr	r3, [pc, #248]	; (8001f34 <updateDisplay+0x638>)
 8001e3a:	0092      	lsls	r2, r2, #2
 8001e3c:	58d3      	ldr	r3, [r2, r3]
 8001e3e:	493e      	ldr	r1, [pc, #248]	; (8001f38 <updateDisplay+0x63c>)
 8001e40:	2214      	movs	r2, #20
 8001e42:	18b8      	adds	r0, r7, r2
 8001e44:	9301      	str	r3, [sp, #4]
 8001e46:	9400      	str	r4, [sp, #0]
 8001e48:	0033      	movs	r3, r6
 8001e4a:	002a      	movs	r2, r5
 8001e4c:	f004 fc54 	bl	80066f8 <siprintf>
				drawTextAt(0, 60, str, hspi);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2214      	movs	r2, #20
 8001e54:	18ba      	adds	r2, r7, r2
 8001e56:	213c      	movs	r1, #60	; 0x3c
 8001e58:	2000      	movs	r0, #0
 8001e5a:	f7fe ff8b 	bl	8000d74 <drawTextAt>
}
 8001e5e:	e053      	b.n	8001f08 <updateDisplay+0x60c>
	else if (face == faceStopwatch) {
 8001e60:	4b2b      	ldr	r3, [pc, #172]	; (8001f10 <updateDisplay+0x614>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2b03      	cmp	r3, #3
 8001e66:	d14f      	bne.n	8001f08 <updateDisplay+0x60c>
		if (updateStopwatch == 1) {
 8001e68:	4b3b      	ldr	r3, [pc, #236]	; (8001f58 <updateDisplay+0x65c>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d14a      	bne.n	8001f08 <updateDisplay+0x60c>
			updateStopwatch = 0;
 8001e72:	4b39      	ldr	r3, [pc, #228]	; (8001f58 <updateDisplay+0x65c>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	701a      	strb	r2, [r3, #0]
			stopwatchVal = stopwatchCNT;
 8001e78:	4b38      	ldr	r3, [pc, #224]	; (8001f5c <updateDisplay+0x660>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	64fb      	str	r3, [r7, #76]	; 0x4c
			hr = stopwatchVal / 3600;
 8001e7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e80:	23e1      	movs	r3, #225	; 0xe1
 8001e82:	0119      	lsls	r1, r3, #4
 8001e84:	0010      	movs	r0, r2
 8001e86:	f7fe f93f 	bl	8000108 <__udivsi3>
 8001e8a:	0003      	movs	r3, r0
 8001e8c:	64bb      	str	r3, [r7, #72]	; 0x48
			stopwatchVal %= 3600;
 8001e8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e90:	23e1      	movs	r3, #225	; 0xe1
 8001e92:	0119      	lsls	r1, r3, #4
 8001e94:	0010      	movs	r0, r2
 8001e96:	f7fe f9bd 	bl	8000214 <__aeabi_uidivmod>
 8001e9a:	000b      	movs	r3, r1
 8001e9c:	64fb      	str	r3, [r7, #76]	; 0x4c
			min = stopwatchVal / 60;
 8001e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ea0:	213c      	movs	r1, #60	; 0x3c
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	f7fe f930 	bl	8000108 <__udivsi3>
 8001ea8:	0003      	movs	r3, r0
 8001eaa:	647b      	str	r3, [r7, #68]	; 0x44
			stopwatchVal %= 60;
 8001eac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001eae:	213c      	movs	r1, #60	; 0x3c
 8001eb0:	0018      	movs	r0, r3
 8001eb2:	f7fe f9af 	bl	8000214 <__aeabi_uidivmod>
 8001eb6:	000b      	movs	r3, r1
 8001eb8:	64fb      	str	r3, [r7, #76]	; 0x4c
			sec = stopwatchVal;
 8001eba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ebc:	643b      	str	r3, [r7, #64]	; 0x40
			sprintf(str, "%2d:%2d:%2d", hr, min, sec);
 8001ebe:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8001ec0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001ec2:	4927      	ldr	r1, [pc, #156]	; (8001f60 <updateDisplay+0x664>)
 8001ec4:	2514      	movs	r5, #20
 8001ec6:	1978      	adds	r0, r7, r5
 8001ec8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eca:	9300      	str	r3, [sp, #0]
 8001ecc:	0023      	movs	r3, r4
 8001ece:	f004 fc13 	bl	80066f8 <siprintf>
			drawTextAt(0, 60, str, hspi);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	197a      	adds	r2, r7, r5
 8001ed6:	213c      	movs	r1, #60	; 0x3c
 8001ed8:	2000      	movs	r0, #0
 8001eda:	f7fe ff4b 	bl	8000d74 <drawTextAt>
			if (stopwatchRunning == 0) {
 8001ede:	4b21      	ldr	r3, [pc, #132]	; (8001f64 <updateDisplay+0x668>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d106      	bne.n	8001ef4 <updateDisplay+0x5f8>
				drawTextAt(0, 0, "not running", hspi);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a0e      	ldr	r2, [pc, #56]	; (8001f24 <updateDisplay+0x628>)
 8001eea:	2100      	movs	r1, #0
 8001eec:	2000      	movs	r0, #0
 8001eee:	f7fe ff41 	bl	8000d74 <drawTextAt>
}
 8001ef2:	e009      	b.n	8001f08 <updateDisplay+0x60c>
			else if (stopwatchRunning == 1) {
 8001ef4:	4b1b      	ldr	r3, [pc, #108]	; (8001f64 <updateDisplay+0x668>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d105      	bne.n	8001f08 <updateDisplay+0x60c>
				drawTextAt(0, 0, "running    ", hspi);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a0b      	ldr	r2, [pc, #44]	; (8001f2c <updateDisplay+0x630>)
 8001f00:	2100      	movs	r1, #0
 8001f02:	2000      	movs	r0, #0
 8001f04:	f7fe ff36 	bl	8000d74 <drawTextAt>
}
 8001f08:	46c0      	nop			; (mov r8, r8)
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	b015      	add	sp, #84	; 0x54
 8001f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f10:	200000e8 	.word	0x200000e8
 8001f14:	2000012f 	.word	0x2000012f
 8001f18:	20000100 	.word	0x20000100
 8001f1c:	08007058 	.word	0x08007058
 8001f20:	20000108 	.word	0x20000108
 8001f24:	080070dc 	.word	0x080070dc
 8001f28:	080070fc 	.word	0x080070fc
 8001f2c:	080070e8 	.word	0x080070e8
 8001f30:	20000120 	.word	0x20000120
 8001f34:	20000000 	.word	0x20000000
 8001f38:	0800710c 	.word	0x0800710c
 8001f3c:	0800707c 	.word	0x0800707c
 8001f40:	20000104 	.word	0x20000104
 8001f44:	080070f4 	.word	0x080070f4
 8001f48:	08007088 	.word	0x08007088
 8001f4c:	08007090 	.word	0x08007090
 8001f50:	080070a8 	.word	0x080070a8
 8001f54:	2000014c 	.word	0x2000014c
 8001f58:	20000133 	.word	0x20000133
 8001f5c:	2000011c 	.word	0x2000011c
 8001f60:	08007060 	.word	0x08007060
 8001f64:	2000010c 	.word	0x2000010c

08001f68 <HAL_GPIO_EXTI_Callback>:

// this sure is a big callback
// need to complete
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	0002      	movs	r2, r0
 8001f70:	1dbb      	adds	r3, r7, #6
 8001f72:	801a      	strh	r2, [r3, #0]
	/* program flow:
	 *   check current face used
	 *   check current variables and check button pressed
	 */
//	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);	// should run for any button
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8001f74:	4bb9      	ldr	r3, [pc, #740]	; (800225c <HAL_GPIO_EXTI_Callback+0x2f4>)
 8001f76:	2102      	movs	r1, #2
 8001f78:	0018      	movs	r0, r3
 8001f7a:	f001 fc0d 	bl	8003798 <HAL_GPIO_TogglePin>
	if (GPIO_Pin == BUTTON0) {
 8001f7e:	1dbb      	adds	r3, r7, #6
 8001f80:	881b      	ldrh	r3, [r3, #0]
 8001f82:	2b04      	cmp	r3, #4
 8001f84:	d110      	bne.n	8001fa8 <HAL_GPIO_EXTI_Callback+0x40>
		face = (face + 1) % NUM_FACES;
 8001f86:	4bb6      	ldr	r3, [pc, #728]	; (8002260 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	4ab5      	ldr	r2, [pc, #724]	; (8002264 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8001f8e:	4013      	ands	r3, r2
 8001f90:	d504      	bpl.n	8001f9c <HAL_GPIO_EXTI_Callback+0x34>
 8001f92:	3b01      	subs	r3, #1
 8001f94:	2204      	movs	r2, #4
 8001f96:	4252      	negs	r2, r2
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	001a      	movs	r2, r3
 8001f9e:	4bb0      	ldr	r3, [pc, #704]	; (8002260 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8001fa0:	601a      	str	r2, [r3, #0]
		updateFace = 1;
 8001fa2:	4bb1      	ldr	r3, [pc, #708]	; (8002268 <HAL_GPIO_EXTI_Callback+0x300>)
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	701a      	strb	r2, [r3, #0]
	}
	// use RTC
	if (face == faceClock) {
 8001fa8:	4bad      	ldr	r3, [pc, #692]	; (8002260 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d000      	beq.n	8001fb2 <HAL_GPIO_EXTI_Callback+0x4a>
 8001fb0:	e0d1      	b.n	8002156 <HAL_GPIO_EXTI_Callback+0x1ee>
		updateClock = 1;
 8001fb2:	4bae      	ldr	r3, [pc, #696]	; (800226c <HAL_GPIO_EXTI_Callback+0x304>)
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	701a      	strb	r2, [r3, #0]
		if (GPIO_Pin == BUTTON1 && clockSet) {
 8001fb8:	1dbb      	adds	r3, r7, #6
 8001fba:	881a      	ldrh	r2, [r3, #0]
 8001fbc:	2380      	movs	r3, #128	; 0x80
 8001fbe:	019b      	lsls	r3, r3, #6
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d145      	bne.n	8002050 <HAL_GPIO_EXTI_Callback+0xe8>
 8001fc4:	4baa      	ldr	r3, [pc, #680]	; (8002270 <HAL_GPIO_EXTI_Callback+0x308>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d041      	beq.n	8002050 <HAL_GPIO_EXTI_Callback+0xe8>
			// change fields up, do nothing if not setting clock
			switch (clockField) {
 8001fcc:	4ba9      	ldr	r3, [pc, #676]	; (8002274 <HAL_GPIO_EXTI_Callback+0x30c>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2b05      	cmp	r3, #5
 8001fd2:	d83f      	bhi.n	8002054 <HAL_GPIO_EXTI_Callback+0xec>
 8001fd4:	009a      	lsls	r2, r3, #2
 8001fd6:	4ba8      	ldr	r3, [pc, #672]	; (8002278 <HAL_GPIO_EXTI_Callback+0x310>)
 8001fd8:	18d3      	adds	r3, r2, r3
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	469f      	mov	pc, r3
				case 1: tempClockTimes.min = (tempClockTimes.min+1) % 60; break;
 8001fde:	4ba7      	ldr	r3, [pc, #668]	; (800227c <HAL_GPIO_EXTI_Callback+0x314>)
 8001fe0:	785b      	ldrb	r3, [r3, #1]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	213c      	movs	r1, #60	; 0x3c
 8001fe6:	0018      	movs	r0, r3
 8001fe8:	f7fe f9fe 	bl	80003e8 <__aeabi_idivmod>
 8001fec:	000b      	movs	r3, r1
 8001fee:	b2da      	uxtb	r2, r3
 8001ff0:	4ba2      	ldr	r3, [pc, #648]	; (800227c <HAL_GPIO_EXTI_Callback+0x314>)
 8001ff2:	705a      	strb	r2, [r3, #1]
 8001ff4:	e02f      	b.n	8002056 <HAL_GPIO_EXTI_Callback+0xee>
				case 2: tempClockTimes.hr = (tempClockTimes.hr+1) % 24; break;
 8001ff6:	4ba1      	ldr	r3, [pc, #644]	; (800227c <HAL_GPIO_EXTI_Callback+0x314>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	2118      	movs	r1, #24
 8001ffe:	0018      	movs	r0, r3
 8002000:	f7fe f9f2 	bl	80003e8 <__aeabi_idivmod>
 8002004:	000b      	movs	r3, r1
 8002006:	b2da      	uxtb	r2, r3
 8002008:	4b9c      	ldr	r3, [pc, #624]	; (800227c <HAL_GPIO_EXTI_Callback+0x314>)
 800200a:	701a      	strb	r2, [r3, #0]
 800200c:	e023      	b.n	8002056 <HAL_GPIO_EXTI_Callback+0xee>
				case 3: tempClockDate.yr++; break;		// supposed to be between large numbers. no need for bounds checking
 800200e:	4b9c      	ldr	r3, [pc, #624]	; (8002280 <HAL_GPIO_EXTI_Callback+0x318>)
 8002010:	881b      	ldrh	r3, [r3, #0]
 8002012:	3301      	adds	r3, #1
 8002014:	b29a      	uxth	r2, r3
 8002016:	4b9a      	ldr	r3, [pc, #616]	; (8002280 <HAL_GPIO_EXTI_Callback+0x318>)
 8002018:	801a      	strh	r2, [r3, #0]
 800201a:	e01c      	b.n	8002056 <HAL_GPIO_EXTI_Callback+0xee>
				case 4: tempClockDate.month = (tempClockDate.month+1) % 12 + 1; break;
 800201c:	4b98      	ldr	r3, [pc, #608]	; (8002280 <HAL_GPIO_EXTI_Callback+0x318>)
 800201e:	789b      	ldrb	r3, [r3, #2]
 8002020:	3301      	adds	r3, #1
 8002022:	210c      	movs	r1, #12
 8002024:	0018      	movs	r0, r3
 8002026:	f7fe f9df 	bl	80003e8 <__aeabi_idivmod>
 800202a:	000b      	movs	r3, r1
 800202c:	b2db      	uxtb	r3, r3
 800202e:	3301      	adds	r3, #1
 8002030:	b2da      	uxtb	r2, r3
 8002032:	4b93      	ldr	r3, [pc, #588]	; (8002280 <HAL_GPIO_EXTI_Callback+0x318>)
 8002034:	709a      	strb	r2, [r3, #2]
 8002036:	e00e      	b.n	8002056 <HAL_GPIO_EXTI_Callback+0xee>
				case 5: tempClockDate.date = (tempClockDate.date+1) % 31; break;		// make more robust?
 8002038:	4b91      	ldr	r3, [pc, #580]	; (8002280 <HAL_GPIO_EXTI_Callback+0x318>)
 800203a:	78db      	ldrb	r3, [r3, #3]
 800203c:	3301      	adds	r3, #1
 800203e:	211f      	movs	r1, #31
 8002040:	0018      	movs	r0, r3
 8002042:	f7fe f9d1 	bl	80003e8 <__aeabi_idivmod>
 8002046:	000b      	movs	r3, r1
 8002048:	b2da      	uxtb	r2, r3
 800204a:	4b8d      	ldr	r3, [pc, #564]	; (8002280 <HAL_GPIO_EXTI_Callback+0x318>)
 800204c:	70da      	strb	r2, [r3, #3]
 800204e:	e002      	b.n	8002056 <HAL_GPIO_EXTI_Callback+0xee>
				default: break;
			}
		}
 8002050:	46c0      	nop			; (mov r8, r8)
 8002052:	e000      	b.n	8002056 <HAL_GPIO_EXTI_Callback+0xee>
				default: break;
 8002054:	46c0      	nop			; (mov r8, r8)
		if (GPIO_Pin == BUTTON2 && clockSet) {
 8002056:	1dbb      	adds	r3, r7, #6
 8002058:	881a      	ldrh	r2, [r3, #0]
 800205a:	2380      	movs	r3, #128	; 0x80
 800205c:	01db      	lsls	r3, r3, #7
 800205e:	429a      	cmp	r2, r3
 8002060:	d147      	bne.n	80020f2 <HAL_GPIO_EXTI_Callback+0x18a>
 8002062:	4b83      	ldr	r3, [pc, #524]	; (8002270 <HAL_GPIO_EXTI_Callback+0x308>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d043      	beq.n	80020f2 <HAL_GPIO_EXTI_Callback+0x18a>
			// change fields down, do nothing if not setting clock
			switch (clockField) {
 800206a:	4b82      	ldr	r3, [pc, #520]	; (8002274 <HAL_GPIO_EXTI_Callback+0x30c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2b05      	cmp	r3, #5
 8002070:	d841      	bhi.n	80020f6 <HAL_GPIO_EXTI_Callback+0x18e>
 8002072:	009a      	lsls	r2, r3, #2
 8002074:	4b83      	ldr	r3, [pc, #524]	; (8002284 <HAL_GPIO_EXTI_Callback+0x31c>)
 8002076:	18d3      	adds	r3, r2, r3
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	469f      	mov	pc, r3
				case 1: tempClockTimes.min = tempClockTimes.min == 0 ? 59 : tempClockTimes.min-1; break;
 800207c:	4b7f      	ldr	r3, [pc, #508]	; (800227c <HAL_GPIO_EXTI_Callback+0x314>)
 800207e:	785b      	ldrb	r3, [r3, #1]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d004      	beq.n	800208e <HAL_GPIO_EXTI_Callback+0x126>
 8002084:	4b7d      	ldr	r3, [pc, #500]	; (800227c <HAL_GPIO_EXTI_Callback+0x314>)
 8002086:	785b      	ldrb	r3, [r3, #1]
 8002088:	3b01      	subs	r3, #1
 800208a:	b2da      	uxtb	r2, r3
 800208c:	e000      	b.n	8002090 <HAL_GPIO_EXTI_Callback+0x128>
 800208e:	223b      	movs	r2, #59	; 0x3b
 8002090:	4b7a      	ldr	r3, [pc, #488]	; (800227c <HAL_GPIO_EXTI_Callback+0x314>)
 8002092:	705a      	strb	r2, [r3, #1]
 8002094:	e030      	b.n	80020f8 <HAL_GPIO_EXTI_Callback+0x190>
				case 2: tempClockTimes.hr = tempClockTimes.hr == 0 ? 24 : tempClockTimes.hr-1; break;
 8002096:	4b79      	ldr	r3, [pc, #484]	; (800227c <HAL_GPIO_EXTI_Callback+0x314>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d004      	beq.n	80020a8 <HAL_GPIO_EXTI_Callback+0x140>
 800209e:	4b77      	ldr	r3, [pc, #476]	; (800227c <HAL_GPIO_EXTI_Callback+0x314>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	e000      	b.n	80020aa <HAL_GPIO_EXTI_Callback+0x142>
 80020a8:	2218      	movs	r2, #24
 80020aa:	4b74      	ldr	r3, [pc, #464]	; (800227c <HAL_GPIO_EXTI_Callback+0x314>)
 80020ac:	701a      	strb	r2, [r3, #0]
 80020ae:	e023      	b.n	80020f8 <HAL_GPIO_EXTI_Callback+0x190>
				case 3: tempClockDate.yr--; break;		// supposed to be from 1950-2050. no need to do bounds checking
 80020b0:	4b73      	ldr	r3, [pc, #460]	; (8002280 <HAL_GPIO_EXTI_Callback+0x318>)
 80020b2:	881b      	ldrh	r3, [r3, #0]
 80020b4:	3b01      	subs	r3, #1
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	4b71      	ldr	r3, [pc, #452]	; (8002280 <HAL_GPIO_EXTI_Callback+0x318>)
 80020ba:	801a      	strh	r2, [r3, #0]
 80020bc:	e01c      	b.n	80020f8 <HAL_GPIO_EXTI_Callback+0x190>
				case 4: tempClockDate.month = tempClockDate.month == 1 ? 12 : tempClockDate.month-1; break;
 80020be:	4b70      	ldr	r3, [pc, #448]	; (8002280 <HAL_GPIO_EXTI_Callback+0x318>)
 80020c0:	789b      	ldrb	r3, [r3, #2]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d004      	beq.n	80020d0 <HAL_GPIO_EXTI_Callback+0x168>
 80020c6:	4b6e      	ldr	r3, [pc, #440]	; (8002280 <HAL_GPIO_EXTI_Callback+0x318>)
 80020c8:	789b      	ldrb	r3, [r3, #2]
 80020ca:	3b01      	subs	r3, #1
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	e000      	b.n	80020d2 <HAL_GPIO_EXTI_Callback+0x16a>
 80020d0:	220c      	movs	r2, #12
 80020d2:	4b6b      	ldr	r3, [pc, #428]	; (8002280 <HAL_GPIO_EXTI_Callback+0x318>)
 80020d4:	709a      	strb	r2, [r3, #2]
 80020d6:	e00f      	b.n	80020f8 <HAL_GPIO_EXTI_Callback+0x190>
				case 5: tempClockDate.date = tempClockDate.date == 0 ? 31 : tempClockDate.date-1; break;
 80020d8:	4b69      	ldr	r3, [pc, #420]	; (8002280 <HAL_GPIO_EXTI_Callback+0x318>)
 80020da:	78db      	ldrb	r3, [r3, #3]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d004      	beq.n	80020ea <HAL_GPIO_EXTI_Callback+0x182>
 80020e0:	4b67      	ldr	r3, [pc, #412]	; (8002280 <HAL_GPIO_EXTI_Callback+0x318>)
 80020e2:	78db      	ldrb	r3, [r3, #3]
 80020e4:	3b01      	subs	r3, #1
 80020e6:	b2da      	uxtb	r2, r3
 80020e8:	e000      	b.n	80020ec <HAL_GPIO_EXTI_Callback+0x184>
 80020ea:	221f      	movs	r2, #31
 80020ec:	4b64      	ldr	r3, [pc, #400]	; (8002280 <HAL_GPIO_EXTI_Callback+0x318>)
 80020ee:	70da      	strb	r2, [r3, #3]
 80020f0:	e002      	b.n	80020f8 <HAL_GPIO_EXTI_Callback+0x190>
				default: break;
			}
		}
 80020f2:	46c0      	nop			; (mov r8, r8)
 80020f4:	e000      	b.n	80020f8 <HAL_GPIO_EXTI_Callback+0x190>
				default: break;
 80020f6:	46c0      	nop			; (mov r8, r8)
		if (GPIO_Pin == BUTTON3) {
 80020f8:	1dbb      	adds	r3, r7, #6
 80020fa:	881a      	ldrh	r2, [r3, #0]
 80020fc:	2380      	movs	r3, #128	; 0x80
 80020fe:	021b      	lsls	r3, r3, #8
 8002100:	429a      	cmp	r2, r3
 8002102:	d000      	beq.n	8002106 <HAL_GPIO_EXTI_Callback+0x19e>
 8002104:	e23f      	b.n	8002586 <HAL_GPIO_EXTI_Callback+0x61e>
			clockField = (clockField + 1) % (NUM_CLOCKFIELDS + 1);
 8002106:	4b5b      	ldr	r3, [pc, #364]	; (8002274 <HAL_GPIO_EXTI_Callback+0x30c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	3301      	adds	r3, #1
 800210c:	2106      	movs	r1, #6
 800210e:	0018      	movs	r0, r3
 8002110:	f7fe f96a 	bl	80003e8 <__aeabi_idivmod>
 8002114:	000b      	movs	r3, r1
 8002116:	001a      	movs	r2, r3
 8002118:	4b56      	ldr	r3, [pc, #344]	; (8002274 <HAL_GPIO_EXTI_Callback+0x30c>)
 800211a:	601a      	str	r2, [r3, #0]
			if (clockField != 0) {
 800211c:	4b55      	ldr	r3, [pc, #340]	; (8002274 <HAL_GPIO_EXTI_Callback+0x30c>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d00e      	beq.n	8002142 <HAL_GPIO_EXTI_Callback+0x1da>
				clockSet = 1;
 8002124:	4b52      	ldr	r3, [pc, #328]	; (8002270 <HAL_GPIO_EXTI_Callback+0x308>)
 8002126:	2201      	movs	r2, #1
 8002128:	601a      	str	r2, [r3, #0]
				if (clockField == 1) getDateTime(&tempClockDate, &tempClockTimes, &hrtc);	// should pull current time on setting 1st field
 800212a:	4b52      	ldr	r3, [pc, #328]	; (8002274 <HAL_GPIO_EXTI_Callback+0x30c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d000      	beq.n	8002134 <HAL_GPIO_EXTI_Callback+0x1cc>
 8002132:	e228      	b.n	8002586 <HAL_GPIO_EXTI_Callback+0x61e>
 8002134:	4a54      	ldr	r2, [pc, #336]	; (8002288 <HAL_GPIO_EXTI_Callback+0x320>)
 8002136:	4951      	ldr	r1, [pc, #324]	; (800227c <HAL_GPIO_EXTI_Callback+0x314>)
 8002138:	4b51      	ldr	r3, [pc, #324]	; (8002280 <HAL_GPIO_EXTI_Callback+0x318>)
 800213a:	0018      	movs	r0, r3
 800213c:	f7fe fff6 	bl	800112c <getDateTime>
			// clear stopwatch hw
			stopwatchRunning = 0;
			clearStopwatch(&hlptim1);
		}
	}
}
 8002140:	e221      	b.n	8002586 <HAL_GPIO_EXTI_Callback+0x61e>
				clockSet = 0;
 8002142:	4b4b      	ldr	r3, [pc, #300]	; (8002270 <HAL_GPIO_EXTI_Callback+0x308>)
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
				setDateTime(&tempClockDate, &tempClockTimes, &hrtc);
 8002148:	4a4f      	ldr	r2, [pc, #316]	; (8002288 <HAL_GPIO_EXTI_Callback+0x320>)
 800214a:	494c      	ldr	r1, [pc, #304]	; (800227c <HAL_GPIO_EXTI_Callback+0x314>)
 800214c:	4b4c      	ldr	r3, [pc, #304]	; (8002280 <HAL_GPIO_EXTI_Callback+0x318>)
 800214e:	0018      	movs	r0, r3
 8002150:	f7fe fee9 	bl	8000f26 <setDateTime>
}
 8002154:	e217      	b.n	8002586 <HAL_GPIO_EXTI_Callback+0x61e>
	else if (face == faceTimer) {
 8002156:	4b42      	ldr	r3, [pc, #264]	; (8002260 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d000      	beq.n	8002160 <HAL_GPIO_EXTI_Callback+0x1f8>
 800215e:	e0fa      	b.n	8002356 <HAL_GPIO_EXTI_Callback+0x3ee>
		updateTimer = 1;
 8002160:	4b4a      	ldr	r3, [pc, #296]	; (800228c <HAL_GPIO_EXTI_Callback+0x324>)
 8002162:	2201      	movs	r2, #1
 8002164:	701a      	strb	r2, [r3, #0]
		if (timerRunning == 0) {
 8002166:	4b4a      	ldr	r3, [pc, #296]	; (8002290 <HAL_GPIO_EXTI_Callback+0x328>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d000      	beq.n	8002170 <HAL_GPIO_EXTI_Callback+0x208>
 800216e:	e0d0      	b.n	8002312 <HAL_GPIO_EXTI_Callback+0x3aa>
			if (GPIO_Pin == BUTTON1) {
 8002170:	1dbb      	adds	r3, r7, #6
 8002172:	881a      	ldrh	r2, [r3, #0]
 8002174:	2380      	movs	r3, #128	; 0x80
 8002176:	019b      	lsls	r3, r3, #6
 8002178:	429a      	cmp	r2, r3
 800217a:	d134      	bne.n	80021e6 <HAL_GPIO_EXTI_Callback+0x27e>
				if (timerSet == 0) timerRunning = 1;
 800217c:	4b45      	ldr	r3, [pc, #276]	; (8002294 <HAL_GPIO_EXTI_Callback+0x32c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d103      	bne.n	800218c <HAL_GPIO_EXTI_Callback+0x224>
 8002184:	4b42      	ldr	r3, [pc, #264]	; (8002290 <HAL_GPIO_EXTI_Callback+0x328>)
 8002186:	2201      	movs	r2, #1
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	e02d      	b.n	80021e8 <HAL_GPIO_EXTI_Callback+0x280>
					switch (timerField) {
 800218c:	4b42      	ldr	r3, [pc, #264]	; (8002298 <HAL_GPIO_EXTI_Callback+0x330>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2b02      	cmp	r3, #2
 8002192:	d010      	beq.n	80021b6 <HAL_GPIO_EXTI_Callback+0x24e>
 8002194:	2b03      	cmp	r3, #3
 8002196:	d01a      	beq.n	80021ce <HAL_GPIO_EXTI_Callback+0x266>
 8002198:	2b01      	cmp	r3, #1
 800219a:	d000      	beq.n	800219e <HAL_GPIO_EXTI_Callback+0x236>
						default: break;
 800219c:	e024      	b.n	80021e8 <HAL_GPIO_EXTI_Callback+0x280>
						case 1: tempTimer.sec = (tempTimer.sec+1) % 60; break;
 800219e:	4b3f      	ldr	r3, [pc, #252]	; (800229c <HAL_GPIO_EXTI_Callback+0x334>)
 80021a0:	789b      	ldrb	r3, [r3, #2]
 80021a2:	3301      	adds	r3, #1
 80021a4:	213c      	movs	r1, #60	; 0x3c
 80021a6:	0018      	movs	r0, r3
 80021a8:	f7fe f91e 	bl	80003e8 <__aeabi_idivmod>
 80021ac:	000b      	movs	r3, r1
 80021ae:	b2da      	uxtb	r2, r3
 80021b0:	4b3a      	ldr	r3, [pc, #232]	; (800229c <HAL_GPIO_EXTI_Callback+0x334>)
 80021b2:	709a      	strb	r2, [r3, #2]
 80021b4:	e018      	b.n	80021e8 <HAL_GPIO_EXTI_Callback+0x280>
						case 2: tempTimer.min = (tempTimer.min+1) % 60; break;
 80021b6:	4b39      	ldr	r3, [pc, #228]	; (800229c <HAL_GPIO_EXTI_Callback+0x334>)
 80021b8:	785b      	ldrb	r3, [r3, #1]
 80021ba:	3301      	adds	r3, #1
 80021bc:	213c      	movs	r1, #60	; 0x3c
 80021be:	0018      	movs	r0, r3
 80021c0:	f7fe f912 	bl	80003e8 <__aeabi_idivmod>
 80021c4:	000b      	movs	r3, r1
 80021c6:	b2da      	uxtb	r2, r3
 80021c8:	4b34      	ldr	r3, [pc, #208]	; (800229c <HAL_GPIO_EXTI_Callback+0x334>)
 80021ca:	705a      	strb	r2, [r3, #1]
 80021cc:	e00c      	b.n	80021e8 <HAL_GPIO_EXTI_Callback+0x280>
						case 3: tempTimer.hr = (tempTimer.hr+1) % 24; break;
 80021ce:	4b33      	ldr	r3, [pc, #204]	; (800229c <HAL_GPIO_EXTI_Callback+0x334>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	3301      	adds	r3, #1
 80021d4:	2118      	movs	r1, #24
 80021d6:	0018      	movs	r0, r3
 80021d8:	f7fe f906 	bl	80003e8 <__aeabi_idivmod>
 80021dc:	000b      	movs	r3, r1
 80021de:	b2da      	uxtb	r2, r3
 80021e0:	4b2e      	ldr	r3, [pc, #184]	; (800229c <HAL_GPIO_EXTI_Callback+0x334>)
 80021e2:	701a      	strb	r2, [r3, #0]
 80021e4:	e000      	b.n	80021e8 <HAL_GPIO_EXTI_Callback+0x280>
				}
 80021e6:	46c0      	nop			; (mov r8, r8)
			if (GPIO_Pin == BUTTON2) {
 80021e8:	1dbb      	adds	r3, r7, #6
 80021ea:	881a      	ldrh	r2, [r3, #0]
 80021ec:	2380      	movs	r3, #128	; 0x80
 80021ee:	01db      	lsls	r3, r3, #7
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d155      	bne.n	80022a0 <HAL_GPIO_EXTI_Callback+0x338>
				if (timerSet == 1) {
 80021f4:	4b27      	ldr	r3, [pc, #156]	; (8002294 <HAL_GPIO_EXTI_Callback+0x32c>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d151      	bne.n	80022a0 <HAL_GPIO_EXTI_Callback+0x338>
					switch (timerField) {
 80021fc:	4b26      	ldr	r3, [pc, #152]	; (8002298 <HAL_GPIO_EXTI_Callback+0x330>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2b02      	cmp	r3, #2
 8002202:	d011      	beq.n	8002228 <HAL_GPIO_EXTI_Callback+0x2c0>
 8002204:	2b03      	cmp	r3, #3
 8002206:	d01c      	beq.n	8002242 <HAL_GPIO_EXTI_Callback+0x2da>
 8002208:	2b01      	cmp	r3, #1
 800220a:	d000      	beq.n	800220e <HAL_GPIO_EXTI_Callback+0x2a6>
						default: break;
 800220c:	e049      	b.n	80022a2 <HAL_GPIO_EXTI_Callback+0x33a>
						case 1: tempTimer.sec = tempTimer.sec == 0 ? 59 : tempTimer.sec-1; break;
 800220e:	4b23      	ldr	r3, [pc, #140]	; (800229c <HAL_GPIO_EXTI_Callback+0x334>)
 8002210:	789b      	ldrb	r3, [r3, #2]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d004      	beq.n	8002220 <HAL_GPIO_EXTI_Callback+0x2b8>
 8002216:	4b21      	ldr	r3, [pc, #132]	; (800229c <HAL_GPIO_EXTI_Callback+0x334>)
 8002218:	789b      	ldrb	r3, [r3, #2]
 800221a:	3b01      	subs	r3, #1
 800221c:	b2da      	uxtb	r2, r3
 800221e:	e000      	b.n	8002222 <HAL_GPIO_EXTI_Callback+0x2ba>
 8002220:	223b      	movs	r2, #59	; 0x3b
 8002222:	4b1e      	ldr	r3, [pc, #120]	; (800229c <HAL_GPIO_EXTI_Callback+0x334>)
 8002224:	709a      	strb	r2, [r3, #2]
 8002226:	e03c      	b.n	80022a2 <HAL_GPIO_EXTI_Callback+0x33a>
						case 2: tempTimer.min = tempTimer.min == 0 ? 59 : tempTimer.min-1; break;
 8002228:	4b1c      	ldr	r3, [pc, #112]	; (800229c <HAL_GPIO_EXTI_Callback+0x334>)
 800222a:	785b      	ldrb	r3, [r3, #1]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d004      	beq.n	800223a <HAL_GPIO_EXTI_Callback+0x2d2>
 8002230:	4b1a      	ldr	r3, [pc, #104]	; (800229c <HAL_GPIO_EXTI_Callback+0x334>)
 8002232:	785b      	ldrb	r3, [r3, #1]
 8002234:	3b01      	subs	r3, #1
 8002236:	b2da      	uxtb	r2, r3
 8002238:	e000      	b.n	800223c <HAL_GPIO_EXTI_Callback+0x2d4>
 800223a:	223b      	movs	r2, #59	; 0x3b
 800223c:	4b17      	ldr	r3, [pc, #92]	; (800229c <HAL_GPIO_EXTI_Callback+0x334>)
 800223e:	705a      	strb	r2, [r3, #1]
 8002240:	e02f      	b.n	80022a2 <HAL_GPIO_EXTI_Callback+0x33a>
						case 3: tempTimer.hr = tempTimer.hr == 0 ? 23 : tempTimer.hr-1; break;
 8002242:	4b16      	ldr	r3, [pc, #88]	; (800229c <HAL_GPIO_EXTI_Callback+0x334>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d004      	beq.n	8002254 <HAL_GPIO_EXTI_Callback+0x2ec>
 800224a:	4b14      	ldr	r3, [pc, #80]	; (800229c <HAL_GPIO_EXTI_Callback+0x334>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	3b01      	subs	r3, #1
 8002250:	b2da      	uxtb	r2, r3
 8002252:	e000      	b.n	8002256 <HAL_GPIO_EXTI_Callback+0x2ee>
 8002254:	2217      	movs	r2, #23
 8002256:	4b11      	ldr	r3, [pc, #68]	; (800229c <HAL_GPIO_EXTI_Callback+0x334>)
 8002258:	701a      	strb	r2, [r3, #0]
 800225a:	e022      	b.n	80022a2 <HAL_GPIO_EXTI_Callback+0x33a>
 800225c:	50000400 	.word	0x50000400
 8002260:	200000e8 	.word	0x200000e8
 8002264:	80000003 	.word	0x80000003
 8002268:	20000150 	.word	0x20000150
 800226c:	20000134 	.word	0x20000134
 8002270:	200000ec 	.word	0x200000ec
 8002274:	200000f0 	.word	0x200000f0
 8002278:	08007634 	.word	0x08007634
 800227c:	20000130 	.word	0x20000130
 8002280:	20000208 	.word	0x20000208
 8002284:	0800764c 	.word	0x0800764c
 8002288:	20000184 	.word	0x20000184
 800228c:	200001ac 	.word	0x200001ac
 8002290:	200000fc 	.word	0x200000fc
 8002294:	200000f4 	.word	0x200000f4
 8002298:	200000f8 	.word	0x200000f8
 800229c:	2000012c 	.word	0x2000012c
				}
 80022a0:	46c0      	nop			; (mov r8, r8)
			if (GPIO_Pin == BUTTON3) {
 80022a2:	1dbb      	adds	r3, r7, #6
 80022a4:	881a      	ldrh	r2, [r3, #0]
 80022a6:	2380      	movs	r3, #128	; 0x80
 80022a8:	021b      	lsls	r3, r3, #8
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d000      	beq.n	80022b0 <HAL_GPIO_EXTI_Callback+0x348>
 80022ae:	e16a      	b.n	8002586 <HAL_GPIO_EXTI_Callback+0x61e>
				timerField = (timerField + 1) % (NUM_TIMERFIELDS + 1);
 80022b0:	4bb7      	ldr	r3, [pc, #732]	; (8002590 <HAL_GPIO_EXTI_Callback+0x628>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	3301      	adds	r3, #1
 80022b6:	4ab7      	ldr	r2, [pc, #732]	; (8002594 <HAL_GPIO_EXTI_Callback+0x62c>)
 80022b8:	4013      	ands	r3, r2
 80022ba:	d504      	bpl.n	80022c6 <HAL_GPIO_EXTI_Callback+0x35e>
 80022bc:	3b01      	subs	r3, #1
 80022be:	2204      	movs	r2, #4
 80022c0:	4252      	negs	r2, r2
 80022c2:	4313      	orrs	r3, r2
 80022c4:	3301      	adds	r3, #1
 80022c6:	001a      	movs	r2, r3
 80022c8:	4bb1      	ldr	r3, [pc, #708]	; (8002590 <HAL_GPIO_EXTI_Callback+0x628>)
 80022ca:	601a      	str	r2, [r3, #0]
				if (timerField != 0) {
 80022cc:	4bb0      	ldr	r3, [pc, #704]	; (8002590 <HAL_GPIO_EXTI_Callback+0x628>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d011      	beq.n	80022f8 <HAL_GPIO_EXTI_Callback+0x390>
					timerSet = 1;
 80022d4:	4bb0      	ldr	r3, [pc, #704]	; (8002598 <HAL_GPIO_EXTI_Callback+0x630>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	601a      	str	r2, [r3, #0]
					if (timerField == 1) {
 80022da:	4bad      	ldr	r3, [pc, #692]	; (8002590 <HAL_GPIO_EXTI_Callback+0x628>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d000      	beq.n	80022e4 <HAL_GPIO_EXTI_Callback+0x37c>
 80022e2:	e150      	b.n	8002586 <HAL_GPIO_EXTI_Callback+0x61e>
						tempTimer.sec = 0;
 80022e4:	4bad      	ldr	r3, [pc, #692]	; (800259c <HAL_GPIO_EXTI_Callback+0x634>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	709a      	strb	r2, [r3, #2]
						tempTimer.min = 0;
 80022ea:	4bac      	ldr	r3, [pc, #688]	; (800259c <HAL_GPIO_EXTI_Callback+0x634>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	705a      	strb	r2, [r3, #1]
						tempTimer.hr = 0;
 80022f0:	4baa      	ldr	r3, [pc, #680]	; (800259c <HAL_GPIO_EXTI_Callback+0x634>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	701a      	strb	r2, [r3, #0]
}
 80022f6:	e146      	b.n	8002586 <HAL_GPIO_EXTI_Callback+0x61e>
					timerSet = 0;
 80022f8:	4ba7      	ldr	r3, [pc, #668]	; (8002598 <HAL_GPIO_EXTI_Callback+0x630>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]
					timerRunning = 1;	// careful where this gets set/unset
 80022fe:	4ba8      	ldr	r3, [pc, #672]	; (80025a0 <HAL_GPIO_EXTI_Callback+0x638>)
 8002300:	2201      	movs	r2, #1
 8002302:	601a      	str	r2, [r3, #0]
					setTimer(&tempTimer, &hrtc, &htim21);
 8002304:	4aa7      	ldr	r2, [pc, #668]	; (80025a4 <HAL_GPIO_EXTI_Callback+0x63c>)
 8002306:	49a8      	ldr	r1, [pc, #672]	; (80025a8 <HAL_GPIO_EXTI_Callback+0x640>)
 8002308:	4ba4      	ldr	r3, [pc, #656]	; (800259c <HAL_GPIO_EXTI_Callback+0x634>)
 800230a:	0018      	movs	r0, r3
 800230c:	f7fe fe22 	bl	8000f54 <setTimer>
}
 8002310:	e139      	b.n	8002586 <HAL_GPIO_EXTI_Callback+0x61e>
		else if (timerRunning == 1) {
 8002312:	4ba3      	ldr	r3, [pc, #652]	; (80025a0 <HAL_GPIO_EXTI_Callback+0x638>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d000      	beq.n	800231c <HAL_GPIO_EXTI_Callback+0x3b4>
 800231a:	e134      	b.n	8002586 <HAL_GPIO_EXTI_Callback+0x61e>
			if (GPIO_Pin == BUTTON1) {
 800231c:	1dbb      	adds	r3, r7, #6
 800231e:	881a      	ldrh	r2, [r3, #0]
 8002320:	2380      	movs	r3, #128	; 0x80
 8002322:	019b      	lsls	r3, r3, #6
 8002324:	429a      	cmp	r2, r3
 8002326:	d102      	bne.n	800232e <HAL_GPIO_EXTI_Callback+0x3c6>
				timerRunning = 1;
 8002328:	4b9d      	ldr	r3, [pc, #628]	; (80025a0 <HAL_GPIO_EXTI_Callback+0x638>)
 800232a:	2201      	movs	r2, #1
 800232c:	601a      	str	r2, [r3, #0]
			if (GPIO_Pin == BUTTON2) {
 800232e:	1dbb      	adds	r3, r7, #6
 8002330:	881a      	ldrh	r2, [r3, #0]
 8002332:	2380      	movs	r3, #128	; 0x80
 8002334:	01db      	lsls	r3, r3, #7
 8002336:	429a      	cmp	r2, r3
 8002338:	d102      	bne.n	8002340 <HAL_GPIO_EXTI_Callback+0x3d8>
				timerRunning = 0;
 800233a:	4b99      	ldr	r3, [pc, #612]	; (80025a0 <HAL_GPIO_EXTI_Callback+0x638>)
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
			if (GPIO_Pin == BUTTON3) {
 8002340:	1dbb      	adds	r3, r7, #6
 8002342:	881a      	ldrh	r2, [r3, #0]
 8002344:	2380      	movs	r3, #128	; 0x80
 8002346:	021b      	lsls	r3, r3, #8
 8002348:	429a      	cmp	r2, r3
 800234a:	d000      	beq.n	800234e <HAL_GPIO_EXTI_Callback+0x3e6>
 800234c:	e11b      	b.n	8002586 <HAL_GPIO_EXTI_Callback+0x61e>
				timerRunning = 0;
 800234e:	4b94      	ldr	r3, [pc, #592]	; (80025a0 <HAL_GPIO_EXTI_Callback+0x638>)
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
}
 8002354:	e117      	b.n	8002586 <HAL_GPIO_EXTI_Callback+0x61e>
	else if (face == faceAlarm) {
 8002356:	4b95      	ldr	r3, [pc, #596]	; (80025ac <HAL_GPIO_EXTI_Callback+0x644>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2b02      	cmp	r3, #2
 800235c:	d000      	beq.n	8002360 <HAL_GPIO_EXTI_Callback+0x3f8>
 800235e:	e0d7      	b.n	8002510 <HAL_GPIO_EXTI_Callback+0x5a8>
		updateAlarm = 1;
 8002360:	4b93      	ldr	r3, [pc, #588]	; (80025b0 <HAL_GPIO_EXTI_Callback+0x648>)
 8002362:	2201      	movs	r2, #1
 8002364:	701a      	strb	r2, [r3, #0]
		if (alarmRunning == 0) {
 8002366:	4b93      	ldr	r3, [pc, #588]	; (80025b4 <HAL_GPIO_EXTI_Callback+0x64c>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d000      	beq.n	8002370 <HAL_GPIO_EXTI_Callback+0x408>
 800236e:	e0c1      	b.n	80024f4 <HAL_GPIO_EXTI_Callback+0x58c>
			if (GPIO_Pin == BUTTON1 && alarmSet) {
 8002370:	1dbb      	adds	r3, r7, #6
 8002372:	881a      	ldrh	r2, [r3, #0]
 8002374:	2380      	movs	r3, #128	; 0x80
 8002376:	019b      	lsls	r3, r3, #6
 8002378:	429a      	cmp	r2, r3
 800237a:	d142      	bne.n	8002402 <HAL_GPIO_EXTI_Callback+0x49a>
 800237c:	4b8e      	ldr	r3, [pc, #568]	; (80025b8 <HAL_GPIO_EXTI_Callback+0x650>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d03e      	beq.n	8002402 <HAL_GPIO_EXTI_Callback+0x49a>
				switch (alarmField) {
 8002384:	4b8d      	ldr	r3, [pc, #564]	; (80025bc <HAL_GPIO_EXTI_Callback+0x654>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2b02      	cmp	r3, #2
 800238a:	d014      	beq.n	80023b6 <HAL_GPIO_EXTI_Callback+0x44e>
 800238c:	dc02      	bgt.n	8002394 <HAL_GPIO_EXTI_Callback+0x42c>
 800238e:	2b01      	cmp	r3, #1
 8002390:	d005      	beq.n	800239e <HAL_GPIO_EXTI_Callback+0x436>
					default: break;
 8002392:	e037      	b.n	8002404 <HAL_GPIO_EXTI_Callback+0x49c>
				switch (alarmField) {
 8002394:	2b03      	cmp	r3, #3
 8002396:	d01a      	beq.n	80023ce <HAL_GPIO_EXTI_Callback+0x466>
 8002398:	2b04      	cmp	r3, #4
 800239a:	d024      	beq.n	80023e6 <HAL_GPIO_EXTI_Callback+0x47e>
					default: break;
 800239c:	e032      	b.n	8002404 <HAL_GPIO_EXTI_Callback+0x49c>
					case 1: tempAlarm.sec = (tempAlarm.sec + 1) % 60; break;
 800239e:	4b88      	ldr	r3, [pc, #544]	; (80025c0 <HAL_GPIO_EXTI_Callback+0x658>)
 80023a0:	789b      	ldrb	r3, [r3, #2]
 80023a2:	3301      	adds	r3, #1
 80023a4:	213c      	movs	r1, #60	; 0x3c
 80023a6:	0018      	movs	r0, r3
 80023a8:	f7fe f81e 	bl	80003e8 <__aeabi_idivmod>
 80023ac:	000b      	movs	r3, r1
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	4b83      	ldr	r3, [pc, #524]	; (80025c0 <HAL_GPIO_EXTI_Callback+0x658>)
 80023b2:	709a      	strb	r2, [r3, #2]
 80023b4:	e026      	b.n	8002404 <HAL_GPIO_EXTI_Callback+0x49c>
					case 2: tempAlarm.min = (tempAlarm.min + 1) % 60; break;
 80023b6:	4b82      	ldr	r3, [pc, #520]	; (80025c0 <HAL_GPIO_EXTI_Callback+0x658>)
 80023b8:	785b      	ldrb	r3, [r3, #1]
 80023ba:	3301      	adds	r3, #1
 80023bc:	213c      	movs	r1, #60	; 0x3c
 80023be:	0018      	movs	r0, r3
 80023c0:	f7fe f812 	bl	80003e8 <__aeabi_idivmod>
 80023c4:	000b      	movs	r3, r1
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	4b7d      	ldr	r3, [pc, #500]	; (80025c0 <HAL_GPIO_EXTI_Callback+0x658>)
 80023ca:	705a      	strb	r2, [r3, #1]
 80023cc:	e01a      	b.n	8002404 <HAL_GPIO_EXTI_Callback+0x49c>
					case 3: tempAlarm.hr = (tempAlarm.hr + 1) % 24; break;
 80023ce:	4b7c      	ldr	r3, [pc, #496]	; (80025c0 <HAL_GPIO_EXTI_Callback+0x658>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	3301      	adds	r3, #1
 80023d4:	2118      	movs	r1, #24
 80023d6:	0018      	movs	r0, r3
 80023d8:	f7fe f806 	bl	80003e8 <__aeabi_idivmod>
 80023dc:	000b      	movs	r3, r1
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	4b77      	ldr	r3, [pc, #476]	; (80025c0 <HAL_GPIO_EXTI_Callback+0x658>)
 80023e2:	701a      	strb	r2, [r3, #0]
 80023e4:	e00e      	b.n	8002404 <HAL_GPIO_EXTI_Callback+0x49c>
					case 4: tempAlarm.weekday = (tempAlarm.weekday + 1) % 7 + 1; break;
 80023e6:	4b76      	ldr	r3, [pc, #472]	; (80025c0 <HAL_GPIO_EXTI_Callback+0x658>)
 80023e8:	78db      	ldrb	r3, [r3, #3]
 80023ea:	3301      	adds	r3, #1
 80023ec:	2107      	movs	r1, #7
 80023ee:	0018      	movs	r0, r3
 80023f0:	f7fd fffa 	bl	80003e8 <__aeabi_idivmod>
 80023f4:	000b      	movs	r3, r1
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	3301      	adds	r3, #1
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	4b70      	ldr	r3, [pc, #448]	; (80025c0 <HAL_GPIO_EXTI_Callback+0x658>)
 80023fe:	70da      	strb	r2, [r3, #3]
 8002400:	e000      	b.n	8002404 <HAL_GPIO_EXTI_Callback+0x49c>
			}
 8002402:	46c0      	nop			; (mov r8, r8)
			if (GPIO_Pin == BUTTON2 && alarmSet) {
 8002404:	1dbb      	adds	r3, r7, #6
 8002406:	881a      	ldrh	r2, [r3, #0]
 8002408:	2380      	movs	r3, #128	; 0x80
 800240a:	01db      	lsls	r3, r3, #7
 800240c:	429a      	cmp	r2, r3
 800240e:	d140      	bne.n	8002492 <HAL_GPIO_EXTI_Callback+0x52a>
 8002410:	4b69      	ldr	r3, [pc, #420]	; (80025b8 <HAL_GPIO_EXTI_Callback+0x650>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d03c      	beq.n	8002492 <HAL_GPIO_EXTI_Callback+0x52a>
				switch (alarmField) {
 8002418:	4b68      	ldr	r3, [pc, #416]	; (80025bc <HAL_GPIO_EXTI_Callback+0x654>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2b02      	cmp	r3, #2
 800241e:	d014      	beq.n	800244a <HAL_GPIO_EXTI_Callback+0x4e2>
 8002420:	dc02      	bgt.n	8002428 <HAL_GPIO_EXTI_Callback+0x4c0>
 8002422:	2b01      	cmp	r3, #1
 8002424:	d005      	beq.n	8002432 <HAL_GPIO_EXTI_Callback+0x4ca>
 8002426:	e034      	b.n	8002492 <HAL_GPIO_EXTI_Callback+0x52a>
 8002428:	2b03      	cmp	r3, #3
 800242a:	d01a      	beq.n	8002462 <HAL_GPIO_EXTI_Callback+0x4fa>
 800242c:	2b04      	cmp	r3, #4
 800242e:	d024      	beq.n	800247a <HAL_GPIO_EXTI_Callback+0x512>
 8002430:	e02f      	b.n	8002492 <HAL_GPIO_EXTI_Callback+0x52a>
					case 1: tempAlarm.sec = tempAlarm.sec == 0 ? 59 : tempAlarm.sec-1;
 8002432:	4b63      	ldr	r3, [pc, #396]	; (80025c0 <HAL_GPIO_EXTI_Callback+0x658>)
 8002434:	789b      	ldrb	r3, [r3, #2]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d004      	beq.n	8002444 <HAL_GPIO_EXTI_Callback+0x4dc>
 800243a:	4b61      	ldr	r3, [pc, #388]	; (80025c0 <HAL_GPIO_EXTI_Callback+0x658>)
 800243c:	789b      	ldrb	r3, [r3, #2]
 800243e:	3b01      	subs	r3, #1
 8002440:	b2da      	uxtb	r2, r3
 8002442:	e000      	b.n	8002446 <HAL_GPIO_EXTI_Callback+0x4de>
 8002444:	223b      	movs	r2, #59	; 0x3b
 8002446:	4b5e      	ldr	r3, [pc, #376]	; (80025c0 <HAL_GPIO_EXTI_Callback+0x658>)
 8002448:	709a      	strb	r2, [r3, #2]
					case 2: tempAlarm.min = tempAlarm.min == 0 ? 59 : tempAlarm.min-1;
 800244a:	4b5d      	ldr	r3, [pc, #372]	; (80025c0 <HAL_GPIO_EXTI_Callback+0x658>)
 800244c:	785b      	ldrb	r3, [r3, #1]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d004      	beq.n	800245c <HAL_GPIO_EXTI_Callback+0x4f4>
 8002452:	4b5b      	ldr	r3, [pc, #364]	; (80025c0 <HAL_GPIO_EXTI_Callback+0x658>)
 8002454:	785b      	ldrb	r3, [r3, #1]
 8002456:	3b01      	subs	r3, #1
 8002458:	b2da      	uxtb	r2, r3
 800245a:	e000      	b.n	800245e <HAL_GPIO_EXTI_Callback+0x4f6>
 800245c:	223b      	movs	r2, #59	; 0x3b
 800245e:	4b58      	ldr	r3, [pc, #352]	; (80025c0 <HAL_GPIO_EXTI_Callback+0x658>)
 8002460:	705a      	strb	r2, [r3, #1]
					case 3: tempAlarm.hr = tempAlarm.hr == 0 ? 23 : tempAlarm.hr-1;
 8002462:	4b57      	ldr	r3, [pc, #348]	; (80025c0 <HAL_GPIO_EXTI_Callback+0x658>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d004      	beq.n	8002474 <HAL_GPIO_EXTI_Callback+0x50c>
 800246a:	4b55      	ldr	r3, [pc, #340]	; (80025c0 <HAL_GPIO_EXTI_Callback+0x658>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	3b01      	subs	r3, #1
 8002470:	b2da      	uxtb	r2, r3
 8002472:	e000      	b.n	8002476 <HAL_GPIO_EXTI_Callback+0x50e>
 8002474:	2217      	movs	r2, #23
 8002476:	4b52      	ldr	r3, [pc, #328]	; (80025c0 <HAL_GPIO_EXTI_Callback+0x658>)
 8002478:	701a      	strb	r2, [r3, #0]
					case 4: tempAlarm.weekday = tempAlarm.weekday == 1 ? 7 : tempAlarm.weekday-1;
 800247a:	4b51      	ldr	r3, [pc, #324]	; (80025c0 <HAL_GPIO_EXTI_Callback+0x658>)
 800247c:	78db      	ldrb	r3, [r3, #3]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d004      	beq.n	800248c <HAL_GPIO_EXTI_Callback+0x524>
 8002482:	4b4f      	ldr	r3, [pc, #316]	; (80025c0 <HAL_GPIO_EXTI_Callback+0x658>)
 8002484:	78db      	ldrb	r3, [r3, #3]
 8002486:	3b01      	subs	r3, #1
 8002488:	b2da      	uxtb	r2, r3
 800248a:	e000      	b.n	800248e <HAL_GPIO_EXTI_Callback+0x526>
 800248c:	2207      	movs	r2, #7
 800248e:	4b4c      	ldr	r3, [pc, #304]	; (80025c0 <HAL_GPIO_EXTI_Callback+0x658>)
 8002490:	70da      	strb	r2, [r3, #3]
			if (GPIO_Pin == BUTTON3) {
 8002492:	1dbb      	adds	r3, r7, #6
 8002494:	881a      	ldrh	r2, [r3, #0]
 8002496:	2380      	movs	r3, #128	; 0x80
 8002498:	021b      	lsls	r3, r3, #8
 800249a:	429a      	cmp	r2, r3
 800249c:	d000      	beq.n	80024a0 <HAL_GPIO_EXTI_Callback+0x538>
 800249e:	e072      	b.n	8002586 <HAL_GPIO_EXTI_Callback+0x61e>
				alarmField = (alarmField + 1) % (NUM_ALARMFIELDS + 1);
 80024a0:	4b46      	ldr	r3, [pc, #280]	; (80025bc <HAL_GPIO_EXTI_Callback+0x654>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	3301      	adds	r3, #1
 80024a6:	2105      	movs	r1, #5
 80024a8:	0018      	movs	r0, r3
 80024aa:	f7fd ff9d 	bl	80003e8 <__aeabi_idivmod>
 80024ae:	000b      	movs	r3, r1
 80024b0:	001a      	movs	r2, r3
 80024b2:	4b42      	ldr	r3, [pc, #264]	; (80025bc <HAL_GPIO_EXTI_Callback+0x654>)
 80024b4:	601a      	str	r2, [r3, #0]
				if (alarmField != 0) {
 80024b6:	4b41      	ldr	r3, [pc, #260]	; (80025bc <HAL_GPIO_EXTI_Callback+0x654>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d013      	beq.n	80024e6 <HAL_GPIO_EXTI_Callback+0x57e>
					alarmSet = 1;
 80024be:	4b3e      	ldr	r3, [pc, #248]	; (80025b8 <HAL_GPIO_EXTI_Callback+0x650>)
 80024c0:	2201      	movs	r2, #1
 80024c2:	601a      	str	r2, [r3, #0]
					if (alarmField == 1) {
 80024c4:	4b3d      	ldr	r3, [pc, #244]	; (80025bc <HAL_GPIO_EXTI_Callback+0x654>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d15c      	bne.n	8002586 <HAL_GPIO_EXTI_Callback+0x61e>
						tempAlarm.sec = 0;
 80024cc:	4b3c      	ldr	r3, [pc, #240]	; (80025c0 <HAL_GPIO_EXTI_Callback+0x658>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	709a      	strb	r2, [r3, #2]
						tempAlarm.min = 0;
 80024d2:	4b3b      	ldr	r3, [pc, #236]	; (80025c0 <HAL_GPIO_EXTI_Callback+0x658>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	705a      	strb	r2, [r3, #1]
						tempAlarm.hr = 0;
 80024d8:	4b39      	ldr	r3, [pc, #228]	; (80025c0 <HAL_GPIO_EXTI_Callback+0x658>)
 80024da:	2200      	movs	r2, #0
 80024dc:	701a      	strb	r2, [r3, #0]
						tempAlarm.weekday = 1;
 80024de:	4b38      	ldr	r3, [pc, #224]	; (80025c0 <HAL_GPIO_EXTI_Callback+0x658>)
 80024e0:	2201      	movs	r2, #1
 80024e2:	70da      	strb	r2, [r3, #3]
}
 80024e4:	e04f      	b.n	8002586 <HAL_GPIO_EXTI_Callback+0x61e>
					alarmSet = 0;
 80024e6:	4b34      	ldr	r3, [pc, #208]	; (80025b8 <HAL_GPIO_EXTI_Callback+0x650>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
					alarmRunning = 1;
 80024ec:	4b31      	ldr	r3, [pc, #196]	; (80025b4 <HAL_GPIO_EXTI_Callback+0x64c>)
 80024ee:	2201      	movs	r2, #1
 80024f0:	601a      	str	r2, [r3, #0]
}
 80024f2:	e048      	b.n	8002586 <HAL_GPIO_EXTI_Callback+0x61e>
		else if (alarmRunning == 1) {
 80024f4:	4b2f      	ldr	r3, [pc, #188]	; (80025b4 <HAL_GPIO_EXTI_Callback+0x64c>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d144      	bne.n	8002586 <HAL_GPIO_EXTI_Callback+0x61e>
			if (GPIO_Pin == BUTTON3) {
 80024fc:	1dbb      	adds	r3, r7, #6
 80024fe:	881a      	ldrh	r2, [r3, #0]
 8002500:	2380      	movs	r3, #128	; 0x80
 8002502:	021b      	lsls	r3, r3, #8
 8002504:	429a      	cmp	r2, r3
 8002506:	d13e      	bne.n	8002586 <HAL_GPIO_EXTI_Callback+0x61e>
				alarmRunning = 0;
 8002508:	4b2a      	ldr	r3, [pc, #168]	; (80025b4 <HAL_GPIO_EXTI_Callback+0x64c>)
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]
}
 800250e:	e03a      	b.n	8002586 <HAL_GPIO_EXTI_Callback+0x61e>
	else if (face == faceStopwatch) {
 8002510:	4b26      	ldr	r3, [pc, #152]	; (80025ac <HAL_GPIO_EXTI_Callback+0x644>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2b03      	cmp	r3, #3
 8002516:	d136      	bne.n	8002586 <HAL_GPIO_EXTI_Callback+0x61e>
		updateStopwatch = 1;
 8002518:	4b2a      	ldr	r3, [pc, #168]	; (80025c4 <HAL_GPIO_EXTI_Callback+0x65c>)
 800251a:	2201      	movs	r2, #1
 800251c:	701a      	strb	r2, [r3, #0]
		if (GPIO_Pin == BUTTON1) {	// start/stop
 800251e:	1dbb      	adds	r3, r7, #6
 8002520:	881a      	ldrh	r2, [r3, #0]
 8002522:	2380      	movs	r3, #128	; 0x80
 8002524:	019b      	lsls	r3, r3, #6
 8002526:	429a      	cmp	r2, r3
 8002528:	d112      	bne.n	8002550 <HAL_GPIO_EXTI_Callback+0x5e8>
			if (stopwatchRunning == 0) {
 800252a:	4b27      	ldr	r3, [pc, #156]	; (80025c8 <HAL_GPIO_EXTI_Callback+0x660>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d107      	bne.n	8002542 <HAL_GPIO_EXTI_Callback+0x5da>
				stopwatchRunning = 1;
 8002532:	4b25      	ldr	r3, [pc, #148]	; (80025c8 <HAL_GPIO_EXTI_Callback+0x660>)
 8002534:	2201      	movs	r2, #1
 8002536:	601a      	str	r2, [r3, #0]
				runStopwatch(&hlptim1);
 8002538:	4b24      	ldr	r3, [pc, #144]	; (80025cc <HAL_GPIO_EXTI_Callback+0x664>)
 800253a:	0018      	movs	r0, r3
 800253c:	f000 fa18 	bl	8002970 <runStopwatch>
 8002540:	e006      	b.n	8002550 <HAL_GPIO_EXTI_Callback+0x5e8>
				stopwatchRunning = 0;
 8002542:	4b21      	ldr	r3, [pc, #132]	; (80025c8 <HAL_GPIO_EXTI_Callback+0x660>)
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
				pauseStopwatch(&hlptim1);
 8002548:	4b20      	ldr	r3, [pc, #128]	; (80025cc <HAL_GPIO_EXTI_Callback+0x664>)
 800254a:	0018      	movs	r0, r3
 800254c:	f000 fa1f 	bl	800298e <pauseStopwatch>
		if (GPIO_Pin == BUTTON2) {
 8002550:	1dbb      	adds	r3, r7, #6
 8002552:	881a      	ldrh	r2, [r3, #0]
 8002554:	2380      	movs	r3, #128	; 0x80
 8002556:	01db      	lsls	r3, r3, #7
 8002558:	429a      	cmp	r2, r3
 800255a:	d107      	bne.n	800256c <HAL_GPIO_EXTI_Callback+0x604>
			lapPrev = lapCurrent;
 800255c:	4b1c      	ldr	r3, [pc, #112]	; (80025d0 <HAL_GPIO_EXTI_Callback+0x668>)
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	4b1c      	ldr	r3, [pc, #112]	; (80025d4 <HAL_GPIO_EXTI_Callback+0x66c>)
 8002562:	601a      	str	r2, [r3, #0]
			lapCurrent = stopwatchCNT;
 8002564:	4b1c      	ldr	r3, [pc, #112]	; (80025d8 <HAL_GPIO_EXTI_Callback+0x670>)
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	4b19      	ldr	r3, [pc, #100]	; (80025d0 <HAL_GPIO_EXTI_Callback+0x668>)
 800256a:	601a      	str	r2, [r3, #0]
		if (GPIO_Pin == BUTTON3) {
 800256c:	1dbb      	adds	r3, r7, #6
 800256e:	881a      	ldrh	r2, [r3, #0]
 8002570:	2380      	movs	r3, #128	; 0x80
 8002572:	021b      	lsls	r3, r3, #8
 8002574:	429a      	cmp	r2, r3
 8002576:	d106      	bne.n	8002586 <HAL_GPIO_EXTI_Callback+0x61e>
			stopwatchRunning = 0;
 8002578:	4b13      	ldr	r3, [pc, #76]	; (80025c8 <HAL_GPIO_EXTI_Callback+0x660>)
 800257a:	2200      	movs	r2, #0
 800257c:	601a      	str	r2, [r3, #0]
			clearStopwatch(&hlptim1);
 800257e:	4b13      	ldr	r3, [pc, #76]	; (80025cc <HAL_GPIO_EXTI_Callback+0x664>)
 8002580:	0018      	movs	r0, r3
 8002582:	f000 fa11 	bl	80029a8 <clearStopwatch>
}
 8002586:	46c0      	nop			; (mov r8, r8)
 8002588:	46bd      	mov	sp, r7
 800258a:	b002      	add	sp, #8
 800258c:	bd80      	pop	{r7, pc}
 800258e:	46c0      	nop			; (mov r8, r8)
 8002590:	200000f8 	.word	0x200000f8
 8002594:	80000003 	.word	0x80000003
 8002598:	200000f4 	.word	0x200000f4
 800259c:	2000012c 	.word	0x2000012c
 80025a0:	200000fc 	.word	0x200000fc
 80025a4:	200002b4 	.word	0x200002b4
 80025a8:	20000184 	.word	0x20000184
 80025ac:	200000e8 	.word	0x200000e8
 80025b0:	2000012f 	.word	0x2000012f
 80025b4:	20000108 	.word	0x20000108
 80025b8:	20000100 	.word	0x20000100
 80025bc:	20000104 	.word	0x20000104
 80025c0:	2000014c 	.word	0x2000014c
 80025c4:	20000133 	.word	0x20000133
 80025c8:	2000010c 	.word	0x2000010c
 80025cc:	20000154 	.word	0x20000154
 80025d0:	20000148 	.word	0x20000148
 80025d4:	200001a8 	.word	0x200001a8
 80025d8:	2000011c 	.word	0x2000011c

080025dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025e0:	4b07      	ldr	r3, [pc, #28]	; (8002600 <HAL_MspInit+0x24>)
 80025e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025e4:	4b06      	ldr	r3, [pc, #24]	; (8002600 <HAL_MspInit+0x24>)
 80025e6:	2101      	movs	r1, #1
 80025e8:	430a      	orrs	r2, r1
 80025ea:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80025ec:	4b04      	ldr	r3, [pc, #16]	; (8002600 <HAL_MspInit+0x24>)
 80025ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025f0:	4b03      	ldr	r3, [pc, #12]	; (8002600 <HAL_MspInit+0x24>)
 80025f2:	2180      	movs	r1, #128	; 0x80
 80025f4:	0549      	lsls	r1, r1, #21
 80025f6:	430a      	orrs	r2, r1
 80025f8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025fa:	46c0      	nop			; (mov r8, r8)
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40021000 	.word	0x40021000

08002604 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b088      	sub	sp, #32
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800260c:	230c      	movs	r3, #12
 800260e:	18fb      	adds	r3, r7, r3
 8002610:	0018      	movs	r0, r3
 8002612:	2314      	movs	r3, #20
 8002614:	001a      	movs	r2, r3
 8002616:	2100      	movs	r1, #0
 8002618:	f004 f865 	bl	80066e6 <memset>
  if(hadc->Instance==ADC1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a15      	ldr	r2, [pc, #84]	; (8002678 <HAL_ADC_MspInit+0x74>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d123      	bne.n	800266e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002626:	4b15      	ldr	r3, [pc, #84]	; (800267c <HAL_ADC_MspInit+0x78>)
 8002628:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800262a:	4b14      	ldr	r3, [pc, #80]	; (800267c <HAL_ADC_MspInit+0x78>)
 800262c:	2180      	movs	r1, #128	; 0x80
 800262e:	0089      	lsls	r1, r1, #2
 8002630:	430a      	orrs	r2, r1
 8002632:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002634:	4b11      	ldr	r3, [pc, #68]	; (800267c <HAL_ADC_MspInit+0x78>)
 8002636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002638:	4b10      	ldr	r3, [pc, #64]	; (800267c <HAL_ADC_MspInit+0x78>)
 800263a:	2101      	movs	r1, #1
 800263c:	430a      	orrs	r2, r1
 800263e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002640:	4b0e      	ldr	r3, [pc, #56]	; (800267c <HAL_ADC_MspInit+0x78>)
 8002642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002644:	2201      	movs	r2, #1
 8002646:	4013      	ands	r3, r2
 8002648:	60bb      	str	r3, [r7, #8]
 800264a:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration    
    PA0     ------> ADC_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800264c:	210c      	movs	r1, #12
 800264e:	187b      	adds	r3, r7, r1
 8002650:	2201      	movs	r2, #1
 8002652:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002654:	187b      	adds	r3, r7, r1
 8002656:	2203      	movs	r2, #3
 8002658:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265a:	187b      	adds	r3, r7, r1
 800265c:	2200      	movs	r2, #0
 800265e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002660:	187a      	adds	r2, r7, r1
 8002662:	23a0      	movs	r3, #160	; 0xa0
 8002664:	05db      	lsls	r3, r3, #23
 8002666:	0011      	movs	r1, r2
 8002668:	0018      	movs	r0, r3
 800266a:	f000 fedd 	bl	8003428 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800266e:	46c0      	nop			; (mov r8, r8)
 8002670:	46bd      	mov	sp, r7
 8002672:	b008      	add	sp, #32
 8002674:	bd80      	pop	{r7, pc}
 8002676:	46c0      	nop			; (mov r8, r8)
 8002678:	40012400 	.word	0x40012400
 800267c:	40021000 	.word	0x40021000

08002680 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  if(hlptim->Instance==LPTIM1)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a06      	ldr	r2, [pc, #24]	; (80026a8 <HAL_LPTIM_MspInit+0x28>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d106      	bne.n	80026a0 <HAL_LPTIM_MspInit+0x20>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8002692:	4b06      	ldr	r3, [pc, #24]	; (80026ac <HAL_LPTIM_MspInit+0x2c>)
 8002694:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002696:	4b05      	ldr	r3, [pc, #20]	; (80026ac <HAL_LPTIM_MspInit+0x2c>)
 8002698:	2180      	movs	r1, #128	; 0x80
 800269a:	0609      	lsls	r1, r1, #24
 800269c:	430a      	orrs	r2, r1
 800269e:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 80026a0:	46c0      	nop			; (mov r8, r8)
 80026a2:	46bd      	mov	sp, r7
 80026a4:	b002      	add	sp, #8
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40007c00 	.word	0x40007c00
 80026ac:	40021000 	.word	0x40021000

080026b0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a06      	ldr	r2, [pc, #24]	; (80026d8 <HAL_RTC_MspInit+0x28>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d106      	bne.n	80026d0 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80026c2:	4b06      	ldr	r3, [pc, #24]	; (80026dc <HAL_RTC_MspInit+0x2c>)
 80026c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026c6:	4b05      	ldr	r3, [pc, #20]	; (80026dc <HAL_RTC_MspInit+0x2c>)
 80026c8:	2180      	movs	r1, #128	; 0x80
 80026ca:	02c9      	lsls	r1, r1, #11
 80026cc:	430a      	orrs	r2, r1
 80026ce:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80026d0:	46c0      	nop			; (mov r8, r8)
 80026d2:	46bd      	mov	sp, r7
 80026d4:	b002      	add	sp, #8
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40002800 	.word	0x40002800
 80026dc:	40021000 	.word	0x40021000

080026e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b088      	sub	sp, #32
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e8:	230c      	movs	r3, #12
 80026ea:	18fb      	adds	r3, r7, r3
 80026ec:	0018      	movs	r0, r3
 80026ee:	2314      	movs	r3, #20
 80026f0:	001a      	movs	r2, r3
 80026f2:	2100      	movs	r1, #0
 80026f4:	f003 fff7 	bl	80066e6 <memset>
  if(hspi->Instance==SPI1)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a30      	ldr	r2, [pc, #192]	; (80027c0 <HAL_SPI_MspInit+0xe0>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d15a      	bne.n	80027b8 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002702:	4b30      	ldr	r3, [pc, #192]	; (80027c4 <HAL_SPI_MspInit+0xe4>)
 8002704:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002706:	4b2f      	ldr	r3, [pc, #188]	; (80027c4 <HAL_SPI_MspInit+0xe4>)
 8002708:	2180      	movs	r1, #128	; 0x80
 800270a:	0149      	lsls	r1, r1, #5
 800270c:	430a      	orrs	r2, r1
 800270e:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002710:	4b2c      	ldr	r3, [pc, #176]	; (80027c4 <HAL_SPI_MspInit+0xe4>)
 8002712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002714:	4b2b      	ldr	r3, [pc, #172]	; (80027c4 <HAL_SPI_MspInit+0xe4>)
 8002716:	2101      	movs	r1, #1
 8002718:	430a      	orrs	r2, r1
 800271a:	62da      	str	r2, [r3, #44]	; 0x2c
 800271c:	4b29      	ldr	r3, [pc, #164]	; (80027c4 <HAL_SPI_MspInit+0xe4>)
 800271e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002720:	2201      	movs	r2, #1
 8002722:	4013      	ands	r3, r2
 8002724:	60bb      	str	r3, [r7, #8]
 8002726:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002728:	210c      	movs	r1, #12
 800272a:	187b      	adds	r3, r7, r1
 800272c:	22a0      	movs	r2, #160	; 0xa0
 800272e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002730:	187b      	adds	r3, r7, r1
 8002732:	2202      	movs	r2, #2
 8002734:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002736:	187b      	adds	r3, r7, r1
 8002738:	2200      	movs	r2, #0
 800273a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800273c:	187b      	adds	r3, r7, r1
 800273e:	2203      	movs	r2, #3
 8002740:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002742:	187b      	adds	r3, r7, r1
 8002744:	2200      	movs	r2, #0
 8002746:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002748:	187a      	adds	r2, r7, r1
 800274a:	23a0      	movs	r3, #160	; 0xa0
 800274c:	05db      	lsls	r3, r3, #23
 800274e:	0011      	movs	r1, r2
 8002750:	0018      	movs	r0, r3
 8002752:	f000 fe69 	bl	8003428 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8002756:	4b1c      	ldr	r3, [pc, #112]	; (80027c8 <HAL_SPI_MspInit+0xe8>)
 8002758:	4a1c      	ldr	r2, [pc, #112]	; (80027cc <HAL_SPI_MspInit+0xec>)
 800275a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 800275c:	4b1a      	ldr	r3, [pc, #104]	; (80027c8 <HAL_SPI_MspInit+0xe8>)
 800275e:	2201      	movs	r2, #1
 8002760:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002762:	4b19      	ldr	r3, [pc, #100]	; (80027c8 <HAL_SPI_MspInit+0xe8>)
 8002764:	2210      	movs	r2, #16
 8002766:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002768:	4b17      	ldr	r3, [pc, #92]	; (80027c8 <HAL_SPI_MspInit+0xe8>)
 800276a:	2200      	movs	r2, #0
 800276c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800276e:	4b16      	ldr	r3, [pc, #88]	; (80027c8 <HAL_SPI_MspInit+0xe8>)
 8002770:	2280      	movs	r2, #128	; 0x80
 8002772:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002774:	4b14      	ldr	r3, [pc, #80]	; (80027c8 <HAL_SPI_MspInit+0xe8>)
 8002776:	2200      	movs	r2, #0
 8002778:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800277a:	4b13      	ldr	r3, [pc, #76]	; (80027c8 <HAL_SPI_MspInit+0xe8>)
 800277c:	2200      	movs	r2, #0
 800277e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002780:	4b11      	ldr	r3, [pc, #68]	; (80027c8 <HAL_SPI_MspInit+0xe8>)
 8002782:	2200      	movs	r2, #0
 8002784:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002786:	4b10      	ldr	r3, [pc, #64]	; (80027c8 <HAL_SPI_MspInit+0xe8>)
 8002788:	2200      	movs	r2, #0
 800278a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800278c:	4b0e      	ldr	r3, [pc, #56]	; (80027c8 <HAL_SPI_MspInit+0xe8>)
 800278e:	0018      	movs	r0, r3
 8002790:	f000 fcdc 	bl	800314c <HAL_DMA_Init>
 8002794:	1e03      	subs	r3, r0, #0
 8002796:	d001      	beq.n	800279c <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 8002798:	f7ff f8aa 	bl	80018f0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a0a      	ldr	r2, [pc, #40]	; (80027c8 <HAL_SPI_MspInit+0xe8>)
 80027a0:	649a      	str	r2, [r3, #72]	; 0x48
 80027a2:	4b09      	ldr	r3, [pc, #36]	; (80027c8 <HAL_SPI_MspInit+0xe8>)
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80027a8:	2200      	movs	r2, #0
 80027aa:	2100      	movs	r1, #0
 80027ac:	2019      	movs	r0, #25
 80027ae:	f000 fc9b 	bl	80030e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80027b2:	2019      	movs	r0, #25
 80027b4:	f000 fcad 	bl	8003112 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80027b8:	46c0      	nop			; (mov r8, r8)
 80027ba:	46bd      	mov	sp, r7
 80027bc:	b008      	add	sp, #32
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40013000 	.word	0x40013000
 80027c4:	40021000 	.word	0x40021000
 80027c8:	2000026c 	.word	0x2000026c
 80027cc:	40020030 	.word	0x40020030

080027d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM21)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a06      	ldr	r2, [pc, #24]	; (80027f8 <HAL_TIM_Base_MspInit+0x28>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d105      	bne.n	80027ee <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 80027e2:	4b06      	ldr	r3, [pc, #24]	; (80027fc <HAL_TIM_Base_MspInit+0x2c>)
 80027e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027e6:	4b05      	ldr	r3, [pc, #20]	; (80027fc <HAL_TIM_Base_MspInit+0x2c>)
 80027e8:	2104      	movs	r1, #4
 80027ea:	430a      	orrs	r2, r1
 80027ec:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }

}
 80027ee:	46c0      	nop			; (mov r8, r8)
 80027f0:	46bd      	mov	sp, r7
 80027f2:	b002      	add	sp, #8
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	46c0      	nop			; (mov r8, r8)
 80027f8:	40010800 	.word	0x40010800
 80027fc:	40021000 	.word	0x40021000

08002800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002804:	46c0      	nop			; (mov r8, r8)
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800280e:	e7fe      	b.n	800280e <HardFault_Handler+0x4>

08002810 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002814:	46c0      	nop			; (mov r8, r8)
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800281e:	46c0      	nop			; (mov r8, r8)
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002828:	f000 f950 	bl	8002acc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800282c:	46c0      	nop			; (mov r8, r8)
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002836:	2004      	movs	r0, #4
 8002838:	f000 ffc0 	bl	80037bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 800283c:	46c0      	nop			; (mov r8, r8)
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002846:	2380      	movs	r3, #128	; 0x80
 8002848:	019b      	lsls	r3, r3, #6
 800284a:	0018      	movs	r0, r3
 800284c:	f000 ffb6 	bl	80037bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002850:	2380      	movs	r3, #128	; 0x80
 8002852:	01db      	lsls	r3, r3, #7
 8002854:	0018      	movs	r0, r3
 8002856:	f000 ffb1 	bl	80037bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800285a:	2380      	movs	r3, #128	; 0x80
 800285c:	021b      	lsls	r3, r3, #8
 800285e:	0018      	movs	r0, r3
 8002860:	f000 ffac 	bl	80037bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002864:	46c0      	nop			; (mov r8, r8)
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
	...

0800286c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002870:	4b03      	ldr	r3, [pc, #12]	; (8002880 <DMA1_Channel2_3_IRQHandler+0x14>)
 8002872:	0018      	movs	r0, r3
 8002874:	f000 fd2a 	bl	80032cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002878:	46c0      	nop			; (mov r8, r8)
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	46c0      	nop			; (mov r8, r8)
 8002880:	2000026c 	.word	0x2000026c

08002884 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002888:	4b03      	ldr	r3, [pc, #12]	; (8002898 <SPI1_IRQHandler+0x14>)
 800288a:	0018      	movs	r0, r3
 800288c:	f003 f88e 	bl	80059ac <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002890:	46c0      	nop			; (mov r8, r8)
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	46c0      	nop			; (mov r8, r8)
 8002898:	200001b0 	.word	0x200001b0

0800289c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80028a4:	4b11      	ldr	r3, [pc, #68]	; (80028ec <_sbrk+0x50>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d102      	bne.n	80028b2 <_sbrk+0x16>
		heap_end = &end;
 80028ac:	4b0f      	ldr	r3, [pc, #60]	; (80028ec <_sbrk+0x50>)
 80028ae:	4a10      	ldr	r2, [pc, #64]	; (80028f0 <_sbrk+0x54>)
 80028b0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80028b2:	4b0e      	ldr	r3, [pc, #56]	; (80028ec <_sbrk+0x50>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80028b8:	4b0c      	ldr	r3, [pc, #48]	; (80028ec <_sbrk+0x50>)
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	18d3      	adds	r3, r2, r3
 80028c0:	466a      	mov	r2, sp
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d907      	bls.n	80028d6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80028c6:	f003 fedb 	bl	8006680 <__errno>
 80028ca:	0003      	movs	r3, r0
 80028cc:	220c      	movs	r2, #12
 80028ce:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80028d0:	2301      	movs	r3, #1
 80028d2:	425b      	negs	r3, r3
 80028d4:	e006      	b.n	80028e4 <_sbrk+0x48>
	}

	heap_end += incr;
 80028d6:	4b05      	ldr	r3, [pc, #20]	; (80028ec <_sbrk+0x50>)
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	18d2      	adds	r2, r2, r3
 80028de:	4b03      	ldr	r3, [pc, #12]	; (80028ec <_sbrk+0x50>)
 80028e0:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 80028e2:	68fb      	ldr	r3, [r7, #12]
}
 80028e4:	0018      	movs	r0, r3
 80028e6:	46bd      	mov	sp, r7
 80028e8:	b004      	add	sp, #16
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	20000110 	.word	0x20000110
 80028f0:	200002f8 	.word	0x200002f8

080028f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 80028f8:	4b17      	ldr	r3, [pc, #92]	; (8002958 <SystemInit+0x64>)
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	4b16      	ldr	r3, [pc, #88]	; (8002958 <SystemInit+0x64>)
 80028fe:	2180      	movs	r1, #128	; 0x80
 8002900:	0049      	lsls	r1, r1, #1
 8002902:	430a      	orrs	r2, r1
 8002904:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8002906:	4b14      	ldr	r3, [pc, #80]	; (8002958 <SystemInit+0x64>)
 8002908:	68da      	ldr	r2, [r3, #12]
 800290a:	4b13      	ldr	r3, [pc, #76]	; (8002958 <SystemInit+0x64>)
 800290c:	4913      	ldr	r1, [pc, #76]	; (800295c <SystemInit+0x68>)
 800290e:	400a      	ands	r2, r1
 8002910:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8002912:	4b11      	ldr	r3, [pc, #68]	; (8002958 <SystemInit+0x64>)
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	4b10      	ldr	r3, [pc, #64]	; (8002958 <SystemInit+0x64>)
 8002918:	4911      	ldr	r1, [pc, #68]	; (8002960 <SystemInit+0x6c>)
 800291a:	400a      	ands	r2, r1
 800291c:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800291e:	4b0e      	ldr	r3, [pc, #56]	; (8002958 <SystemInit+0x64>)
 8002920:	689a      	ldr	r2, [r3, #8]
 8002922:	4b0d      	ldr	r3, [pc, #52]	; (8002958 <SystemInit+0x64>)
 8002924:	2101      	movs	r1, #1
 8002926:	438a      	bics	r2, r1
 8002928:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800292a:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <SystemInit+0x64>)
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <SystemInit+0x64>)
 8002930:	490c      	ldr	r1, [pc, #48]	; (8002964 <SystemInit+0x70>)
 8002932:	400a      	ands	r2, r1
 8002934:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8002936:	4b08      	ldr	r3, [pc, #32]	; (8002958 <SystemInit+0x64>)
 8002938:	68da      	ldr	r2, [r3, #12]
 800293a:	4b07      	ldr	r3, [pc, #28]	; (8002958 <SystemInit+0x64>)
 800293c:	490a      	ldr	r1, [pc, #40]	; (8002968 <SystemInit+0x74>)
 800293e:	400a      	ands	r2, r1
 8002940:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002942:	4b05      	ldr	r3, [pc, #20]	; (8002958 <SystemInit+0x64>)
 8002944:	2200      	movs	r2, #0
 8002946:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002948:	4b08      	ldr	r3, [pc, #32]	; (800296c <SystemInit+0x78>)
 800294a:	2280      	movs	r2, #128	; 0x80
 800294c:	0512      	lsls	r2, r2, #20
 800294e:	609a      	str	r2, [r3, #8]
#endif
}
 8002950:	46c0      	nop			; (mov r8, r8)
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	46c0      	nop			; (mov r8, r8)
 8002958:	40021000 	.word	0x40021000
 800295c:	88ff400c 	.word	0x88ff400c
 8002960:	fef6fff6 	.word	0xfef6fff6
 8002964:	fffbffff 	.word	0xfffbffff
 8002968:	ff02ffff 	.word	0xff02ffff
 800296c:	e000ed00 	.word	0xe000ed00

08002970 <runStopwatch>:

// ---- Stopwatch functions ----
// set stopwatch. using lptimer. maybe better with regular timer?
// can operate in stop mode if using lptimer
// modify to update screen/set flags when necessary
void runStopwatch(LPTIM_HandleTypeDef *hlptim) {
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
	HAL_LPTIM_Counter_Start_IT(hlptim, 0x8000);
 8002978:	2380      	movs	r3, #128	; 0x80
 800297a:	021a      	lsls	r2, r3, #8
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	0011      	movs	r1, r2
 8002980:	0018      	movs	r0, r3
 8002982:	f000 ffb7 	bl	80038f4 <HAL_LPTIM_Counter_Start_IT>
}
 8002986:	46c0      	nop			; (mov r8, r8)
 8002988:	46bd      	mov	sp, r7
 800298a:	b002      	add	sp, #8
 800298c:	bd80      	pop	{r7, pc}

0800298e <pauseStopwatch>:

// stop the timer or pause it or whatever.
// counter value might reset and screw up timekeeping? should save?
void pauseStopwatch(LPTIM_HandleTypeDef *hlptim) {
 800298e:	b580      	push	{r7, lr}
 8002990:	b082      	sub	sp, #8
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
	HAL_LPTIM_Counter_Stop_IT(hlptim);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	0018      	movs	r0, r3
 800299a:	f000 ffff 	bl	800399c <HAL_LPTIM_Counter_Stop_IT>
//	temp = hlptim->Instance->CNT;
}
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	46bd      	mov	sp, r7
 80029a2:	b002      	add	sp, #8
 80029a4:	bd80      	pop	{r7, pc}
	...

080029a8 <clearStopwatch>:

void clearStopwatch(LPTIM_HandleTypeDef *hlptim) {
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
	pauseStopwatch(hlptim);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	0018      	movs	r0, r3
 80029b4:	f7ff ffeb 	bl	800298e <pauseStopwatch>
	stopwatchCNT = 0;
 80029b8:	4b03      	ldr	r3, [pc, #12]	; (80029c8 <clearStopwatch+0x20>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]
}
 80029be:	46c0      	nop			; (mov r8, r8)
 80029c0:	46bd      	mov	sp, r7
 80029c2:	b002      	add	sp, #8
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	46c0      	nop			; (mov r8, r8)
 80029c8:	2000011c 	.word	0x2000011c

080029cc <runTimerDisplay>:
// else, we're setting rtc alarm
// uses TIM21 with LSE (external timer w/ remap and done already by ST).
//void setTimer(TIM_HandleTypeDef *htim, struct alarmTimes *a) {
//	HAL_TIM_Base_Start_IT(htim);
//}
void runTimerDisplay(TIM_HandleTypeDef *htim) {
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(htim);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	0018      	movs	r0, r3
 80029d8:	f003 fa94 	bl	8005f04 <HAL_TIM_Base_Start>
}
 80029dc:	46c0      	nop			; (mov r8, r8)
 80029de:	46bd      	mov	sp, r7
 80029e0:	b002      	add	sp, #8
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80029e4:	480d      	ldr	r0, [pc, #52]	; (8002a1c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80029e6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80029e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80029ea:	e003      	b.n	80029f4 <LoopCopyDataInit>

080029ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80029ec:	4b0c      	ldr	r3, [pc, #48]	; (8002a20 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 80029ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80029f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80029f2:	3104      	adds	r1, #4

080029f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80029f4:	480b      	ldr	r0, [pc, #44]	; (8002a24 <LoopForever+0xa>)
  ldr  r3, =_edata
 80029f6:	4b0c      	ldr	r3, [pc, #48]	; (8002a28 <LoopForever+0xe>)
  adds  r2, r0, r1
 80029f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80029fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80029fc:	d3f6      	bcc.n	80029ec <CopyDataInit>
  ldr  r2, =_sbss
 80029fe:	4a0b      	ldr	r2, [pc, #44]	; (8002a2c <LoopForever+0x12>)
  b  LoopFillZerobss
 8002a00:	e002      	b.n	8002a08 <LoopFillZerobss>

08002a02 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8002a02:	2300      	movs	r3, #0
  str  r3, [r2]
 8002a04:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a06:	3204      	adds	r2, #4

08002a08 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8002a08:	4b09      	ldr	r3, [pc, #36]	; (8002a30 <LoopForever+0x16>)
  cmp  r2, r3
 8002a0a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002a0c:	d3f9      	bcc.n	8002a02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002a0e:	f7ff ff71 	bl	80028f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a12:	f003 fe3b 	bl	800668c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a16:	f7fe fbd5 	bl	80011c4 <main>

08002a1a <LoopForever>:

LoopForever:
    b LoopForever
 8002a1a:	e7fe      	b.n	8002a1a <LoopForever>
   ldr   r0, =_estack
 8002a1c:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8002a20:	080076b8 	.word	0x080076b8
  ldr  r0, =_sdata
 8002a24:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002a28:	200000bc 	.word	0x200000bc
  ldr  r2, =_sbss
 8002a2c:	200000bc 	.word	0x200000bc
  ldr  r3, = _ebss
 8002a30:	200002f8 	.word	0x200002f8

08002a34 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a34:	e7fe      	b.n	8002a34 <ADC1_COMP_IRQHandler>
	...

08002a38 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a3e:	1dfb      	adds	r3, r7, #7
 8002a40:	2200      	movs	r2, #0
 8002a42:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002a44:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <HAL_Init+0x3c>)
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	4b0a      	ldr	r3, [pc, #40]	; (8002a74 <HAL_Init+0x3c>)
 8002a4a:	2140      	movs	r1, #64	; 0x40
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a50:	2000      	movs	r0, #0
 8002a52:	f000 f811 	bl	8002a78 <HAL_InitTick>
 8002a56:	1e03      	subs	r3, r0, #0
 8002a58:	d003      	beq.n	8002a62 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002a5a:	1dfb      	adds	r3, r7, #7
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	701a      	strb	r2, [r3, #0]
 8002a60:	e001      	b.n	8002a66 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a62:	f7ff fdbb 	bl	80025dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a66:	1dfb      	adds	r3, r7, #7
 8002a68:	781b      	ldrb	r3, [r3, #0]
}
 8002a6a:	0018      	movs	r0, r3
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	b002      	add	sp, #8
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	46c0      	nop			; (mov r8, r8)
 8002a74:	40022000 	.word	0x40022000

08002a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a80:	230f      	movs	r3, #15
 8002a82:	18fb      	adds	r3, r7, r3
 8002a84:	2200      	movs	r2, #0
 8002a86:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8002a88:	4b0f      	ldr	r3, [pc, #60]	; (8002ac8 <HAL_InitTick+0x50>)
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	23fa      	movs	r3, #250	; 0xfa
 8002a8e:	0099      	lsls	r1, r3, #2
 8002a90:	0010      	movs	r0, r2
 8002a92:	f7fd fb39 	bl	8000108 <__udivsi3>
 8002a96:	0003      	movs	r3, r0
 8002a98:	0018      	movs	r0, r3
 8002a9a:	f000 fb4a 	bl	8003132 <HAL_SYSTICK_Config>
 8002a9e:	1e03      	subs	r3, r0, #0
 8002aa0:	d004      	beq.n	8002aac <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 8002aa2:	230f      	movs	r3, #15
 8002aa4:	18fb      	adds	r3, r7, r3
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	701a      	strb	r2, [r3, #0]
 8002aaa:	e006      	b.n	8002aba <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8002aac:	6879      	ldr	r1, [r7, #4]
 8002aae:	2301      	movs	r3, #1
 8002ab0:	425b      	negs	r3, r3
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	0018      	movs	r0, r3
 8002ab6:	f000 fb17 	bl	80030e8 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 8002aba:	230f      	movs	r3, #15
 8002abc:	18fb      	adds	r3, r7, r3
 8002abe:	781b      	ldrb	r3, [r3, #0]
}
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	b004      	add	sp, #16
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	20000054 	.word	0x20000054

08002acc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  uwTick++;
 8002ad0:	4b03      	ldr	r3, [pc, #12]	; (8002ae0 <HAL_IncTick+0x14>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	1c5a      	adds	r2, r3, #1
 8002ad6:	4b02      	ldr	r3, [pc, #8]	; (8002ae0 <HAL_IncTick+0x14>)
 8002ad8:	601a      	str	r2, [r3, #0]
}
 8002ada:	46c0      	nop			; (mov r8, r8)
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	200002f0 	.word	0x200002f0

08002ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ae8:	4b02      	ldr	r3, [pc, #8]	; (8002af4 <HAL_GetTick+0x10>)
 8002aea:	681b      	ldr	r3, [r3, #0]
}
 8002aec:	0018      	movs	r0, r3
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	46c0      	nop			; (mov r8, r8)
 8002af4:	200002f0 	.word	0x200002f0

08002af8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b00:	f7ff fff0 	bl	8002ae4 <HAL_GetTick>
 8002b04:	0003      	movs	r3, r0
 8002b06:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	3301      	adds	r3, #1
 8002b10:	d002      	beq.n	8002b18 <HAL_Delay+0x20>
  {
    wait++;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	3301      	adds	r3, #1
 8002b16:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b18:	46c0      	nop			; (mov r8, r8)
 8002b1a:	f7ff ffe3 	bl	8002ae4 <HAL_GetTick>
 8002b1e:	0002      	movs	r2, r0
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d8f7      	bhi.n	8002b1a <HAL_Delay+0x22>
  {
  }
}
 8002b2a:	46c0      	nop			; (mov r8, r8)
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	b004      	add	sp, #16
 8002b30:	bd80      	pop	{r7, pc}
	...

08002b34 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e159      	b.n	8002dfa <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10a      	bne.n	8002b64 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2250      	movs	r2, #80	; 0x50
 8002b58:	2100      	movs	r1, #0
 8002b5a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	0018      	movs	r0, r3
 8002b60:	f7ff fd50 	bl	8002604 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b68:	2210      	movs	r2, #16
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	2b10      	cmp	r3, #16
 8002b6e:	d005      	beq.n	8002b7c <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	2204      	movs	r2, #4
 8002b78:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002b7a:	d00b      	beq.n	8002b94 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b80:	2210      	movs	r2, #16
 8002b82:	431a      	orrs	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2250      	movs	r2, #80	; 0x50
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e132      	b.n	8002dfa <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b98:	4a9a      	ldr	r2, [pc, #616]	; (8002e04 <HAL_ADC_Init+0x2d0>)
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	2202      	movs	r2, #2
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	2203      	movs	r2, #3
 8002bac:	4013      	ands	r3, r2
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d108      	bne.n	8002bc4 <HAL_ADC_Init+0x90>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	4013      	ands	r3, r2
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d101      	bne.n	8002bc4 <HAL_ADC_Init+0x90>
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e000      	b.n	8002bc6 <HAL_ADC_Init+0x92>
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d149      	bne.n	8002c5e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685a      	ldr	r2, [r3, #4]
 8002bce:	23c0      	movs	r3, #192	; 0xc0
 8002bd0:	061b      	lsls	r3, r3, #24
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d00b      	beq.n	8002bee <HAL_ADC_Init+0xba>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685a      	ldr	r2, [r3, #4]
 8002bda:	2380      	movs	r3, #128	; 0x80
 8002bdc:	05db      	lsls	r3, r3, #23
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d005      	beq.n	8002bee <HAL_ADC_Init+0xba>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685a      	ldr	r2, [r3, #4]
 8002be6:	2380      	movs	r3, #128	; 0x80
 8002be8:	061b      	lsls	r3, r3, #24
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d111      	bne.n	8002c12 <HAL_ADC_Init+0xde>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	691a      	ldr	r2, [r3, #16]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	0092      	lsls	r2, r2, #2
 8002bfa:	0892      	lsrs	r2, r2, #2
 8002bfc:	611a      	str	r2, [r3, #16]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6919      	ldr	r1, [r3, #16]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685a      	ldr	r2, [r3, #4]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	611a      	str	r2, [r3, #16]
 8002c10:	e014      	b.n	8002c3c <HAL_ADC_Init+0x108>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	691a      	ldr	r2, [r3, #16]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	0092      	lsls	r2, r2, #2
 8002c1e:	0892      	lsrs	r2, r2, #2
 8002c20:	611a      	str	r2, [r3, #16]
 8002c22:	4b79      	ldr	r3, [pc, #484]	; (8002e08 <HAL_ADC_Init+0x2d4>)
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	4b78      	ldr	r3, [pc, #480]	; (8002e08 <HAL_ADC_Init+0x2d4>)
 8002c28:	4978      	ldr	r1, [pc, #480]	; (8002e0c <HAL_ADC_Init+0x2d8>)
 8002c2a:	400a      	ands	r2, r1
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	4b76      	ldr	r3, [pc, #472]	; (8002e08 <HAL_ADC_Init+0x2d4>)
 8002c30:	6819      	ldr	r1, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	4b74      	ldr	r3, [pc, #464]	; (8002e08 <HAL_ADC_Init+0x2d4>)
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68da      	ldr	r2, [r3, #12]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2118      	movs	r1, #24
 8002c48:	438a      	bics	r2, r1
 8002c4a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68d9      	ldr	r1, [r3, #12]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689a      	ldr	r2, [r3, #8]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8002c5e:	4b6a      	ldr	r3, [pc, #424]	; (8002e08 <HAL_ADC_Init+0x2d4>)
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	4b69      	ldr	r3, [pc, #420]	; (8002e08 <HAL_ADC_Init+0x2d4>)
 8002c64:	496a      	ldr	r1, [pc, #424]	; (8002e10 <HAL_ADC_Init+0x2dc>)
 8002c66:	400a      	ands	r2, r1
 8002c68:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8002c6a:	4b67      	ldr	r3, [pc, #412]	; (8002e08 <HAL_ADC_Init+0x2d4>)
 8002c6c:	6819      	ldr	r1, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c72:	065a      	lsls	r2, r3, #25
 8002c74:	4b64      	ldr	r3, [pc, #400]	; (8002e08 <HAL_ADC_Init+0x2d4>)
 8002c76:	430a      	orrs	r2, r1
 8002c78:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	2380      	movs	r3, #128	; 0x80
 8002c82:	055b      	lsls	r3, r3, #21
 8002c84:	4013      	ands	r3, r2
 8002c86:	d108      	bne.n	8002c9a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689a      	ldr	r2, [r3, #8]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2180      	movs	r1, #128	; 0x80
 8002c94:	0549      	lsls	r1, r1, #21
 8002c96:	430a      	orrs	r2, r1
 8002c98:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68da      	ldr	r2, [r3, #12]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	495b      	ldr	r1, [pc, #364]	; (8002e14 <HAL_ADC_Init+0x2e0>)
 8002ca6:	400a      	ands	r2, r1
 8002ca8:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68d9      	ldr	r1, [r3, #12]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d101      	bne.n	8002cc0 <HAL_ADC_Init+0x18c>
 8002cbc:	2304      	movs	r3, #4
 8002cbe:	e000      	b.n	8002cc2 <HAL_ADC_Init+0x18e>
 8002cc0:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002cc2:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2020      	movs	r0, #32
 8002cc8:	5c1b      	ldrb	r3, [r3, r0]
 8002cca:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002ccc:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	202c      	movs	r0, #44	; 0x2c
 8002cd2:	5c1b      	ldrb	r3, [r3, r0]
 8002cd4:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002cd6:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002cdc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8002ce4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002cec:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cfa:	23c2      	movs	r3, #194	; 0xc2
 8002cfc:	33ff      	adds	r3, #255	; 0xff
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d00b      	beq.n	8002d1a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68d9      	ldr	r1, [r3, #12]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002d10:	431a      	orrs	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	430a      	orrs	r2, r1
 8002d18:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2221      	movs	r2, #33	; 0x21
 8002d1e:	5c9b      	ldrb	r3, [r3, r2]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d11a      	bne.n	8002d5a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2220      	movs	r2, #32
 8002d28:	5c9b      	ldrb	r3, [r3, r2]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d109      	bne.n	8002d42 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68da      	ldr	r2, [r3, #12]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2180      	movs	r1, #128	; 0x80
 8002d3a:	0249      	lsls	r1, r1, #9
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	60da      	str	r2, [r3, #12]
 8002d40:	e00b      	b.n	8002d5a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d46:	2220      	movs	r2, #32
 8002d48:	431a      	orrs	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d52:	2201      	movs	r2, #1
 8002d54:	431a      	orrs	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d11f      	bne.n	8002da2 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	691a      	ldr	r2, [r3, #16]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	492a      	ldr	r1, [pc, #168]	; (8002e18 <HAL_ADC_Init+0x2e4>)
 8002d6e:	400a      	ands	r2, r1
 8002d70:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	6919      	ldr	r1, [r3, #16]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002d80:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8002d86:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	691a      	ldr	r2, [r3, #16]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	611a      	str	r2, [r3, #16]
 8002da0:	e00e      	b.n	8002dc0 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	2201      	movs	r2, #1
 8002daa:	4013      	ands	r3, r2
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d107      	bne.n	8002dc0 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	691a      	ldr	r2, [r3, #16]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2101      	movs	r1, #1
 8002dbc:	438a      	bics	r2, r1
 8002dbe:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	695a      	ldr	r2, [r3, #20]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2107      	movs	r1, #7
 8002dcc:	438a      	bics	r2, r1
 8002dce:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6959      	ldr	r1, [r3, #20]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dec:	2203      	movs	r2, #3
 8002dee:	4393      	bics	r3, r2
 8002df0:	2201      	movs	r2, #1
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	b002      	add	sp, #8
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	46c0      	nop			; (mov r8, r8)
 8002e04:	fffffefd 	.word	0xfffffefd
 8002e08:	40012708 	.word	0x40012708
 8002e0c:	ffc3ffff 	.word	0xffc3ffff
 8002e10:	fdffffff 	.word	0xfdffffff
 8002e14:	fffe0219 	.word	0xfffe0219
 8002e18:	fffffc03 	.word	0xfffffc03

08002e1c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2250      	movs	r2, #80	; 0x50
 8002e2a:	5c9b      	ldrb	r3, [r3, r2]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d101      	bne.n	8002e34 <HAL_ADC_ConfigChannel+0x18>
 8002e30:	2302      	movs	r3, #2
 8002e32:	e085      	b.n	8002f40 <HAL_ADC_ConfigChannel+0x124>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2250      	movs	r2, #80	; 0x50
 8002e38:	2101      	movs	r1, #1
 8002e3a:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	2204      	movs	r2, #4
 8002e44:	4013      	ands	r3, r2
 8002e46:	d00b      	beq.n	8002e60 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e4c:	2220      	movs	r2, #32
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2250      	movs	r2, #80	; 0x50
 8002e58:	2100      	movs	r1, #0
 8002e5a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e06f      	b.n	8002f40 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	4a38      	ldr	r2, [pc, #224]	; (8002f48 <HAL_ADC_ConfigChannel+0x12c>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d035      	beq.n	8002ed6 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	035b      	lsls	r3, r3, #13
 8002e76:	0b5a      	lsrs	r2, r3, #13
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	2380      	movs	r3, #128	; 0x80
 8002e86:	02db      	lsls	r3, r3, #11
 8002e88:	4013      	ands	r3, r2
 8002e8a:	d009      	beq.n	8002ea0 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8002e8c:	4b2f      	ldr	r3, [pc, #188]	; (8002f4c <HAL_ADC_ConfigChannel+0x130>)
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	4b2e      	ldr	r3, [pc, #184]	; (8002f4c <HAL_ADC_ConfigChannel+0x130>)
 8002e92:	2180      	movs	r1, #128	; 0x80
 8002e94:	0409      	lsls	r1, r1, #16
 8002e96:	430a      	orrs	r2, r1
 8002e98:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8002e9a:	200a      	movs	r0, #10
 8002e9c:	f000 f85e 	bl	8002f5c <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	2380      	movs	r3, #128	; 0x80
 8002ea6:	029b      	lsls	r3, r3, #10
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	d006      	beq.n	8002eba <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8002eac:	4b27      	ldr	r3, [pc, #156]	; (8002f4c <HAL_ADC_ConfigChannel+0x130>)
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	4b26      	ldr	r3, [pc, #152]	; (8002f4c <HAL_ADC_ConfigChannel+0x130>)
 8002eb2:	2180      	movs	r1, #128	; 0x80
 8002eb4:	03c9      	lsls	r1, r1, #15
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	2380      	movs	r3, #128	; 0x80
 8002ec0:	025b      	lsls	r3, r3, #9
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	d037      	beq.n	8002f36 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 8002ec6:	4b21      	ldr	r3, [pc, #132]	; (8002f4c <HAL_ADC_ConfigChannel+0x130>)
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	4b20      	ldr	r3, [pc, #128]	; (8002f4c <HAL_ADC_ConfigChannel+0x130>)
 8002ecc:	2180      	movs	r1, #128	; 0x80
 8002ece:	0449      	lsls	r1, r1, #17
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	e02f      	b.n	8002f36 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	035b      	lsls	r3, r3, #13
 8002ee2:	0b5b      	lsrs	r3, r3, #13
 8002ee4:	43d9      	mvns	r1, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	400a      	ands	r2, r1
 8002eec:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	2380      	movs	r3, #128	; 0x80
 8002ef4:	02db      	lsls	r3, r3, #11
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	d005      	beq.n	8002f06 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8002efa:	4b14      	ldr	r3, [pc, #80]	; (8002f4c <HAL_ADC_ConfigChannel+0x130>)
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	4b13      	ldr	r3, [pc, #76]	; (8002f4c <HAL_ADC_ConfigChannel+0x130>)
 8002f00:	4913      	ldr	r1, [pc, #76]	; (8002f50 <HAL_ADC_ConfigChannel+0x134>)
 8002f02:	400a      	ands	r2, r1
 8002f04:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	2380      	movs	r3, #128	; 0x80
 8002f0c:	029b      	lsls	r3, r3, #10
 8002f0e:	4013      	ands	r3, r2
 8002f10:	d005      	beq.n	8002f1e <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8002f12:	4b0e      	ldr	r3, [pc, #56]	; (8002f4c <HAL_ADC_ConfigChannel+0x130>)
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	4b0d      	ldr	r3, [pc, #52]	; (8002f4c <HAL_ADC_ConfigChannel+0x130>)
 8002f18:	490e      	ldr	r1, [pc, #56]	; (8002f54 <HAL_ADC_ConfigChannel+0x138>)
 8002f1a:	400a      	ands	r2, r1
 8002f1c:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	2380      	movs	r3, #128	; 0x80
 8002f24:	025b      	lsls	r3, r3, #9
 8002f26:	4013      	ands	r3, r2
 8002f28:	d005      	beq.n	8002f36 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 8002f2a:	4b08      	ldr	r3, [pc, #32]	; (8002f4c <HAL_ADC_ConfigChannel+0x130>)
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	4b07      	ldr	r3, [pc, #28]	; (8002f4c <HAL_ADC_ConfigChannel+0x130>)
 8002f30:	4909      	ldr	r1, [pc, #36]	; (8002f58 <HAL_ADC_ConfigChannel+0x13c>)
 8002f32:	400a      	ands	r2, r1
 8002f34:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2250      	movs	r2, #80	; 0x50
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	0018      	movs	r0, r3
 8002f42:	46bd      	mov	sp, r7
 8002f44:	b002      	add	sp, #8
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	00001001 	.word	0x00001001
 8002f4c:	40012708 	.word	0x40012708
 8002f50:	ff7fffff 	.word	0xff7fffff
 8002f54:	ffbfffff 	.word	0xffbfffff
 8002f58:	feffffff 	.word	0xfeffffff

08002f5c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8002f64:	4b0a      	ldr	r3, [pc, #40]	; (8002f90 <ADC_DelayMicroSecond+0x34>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	490a      	ldr	r1, [pc, #40]	; (8002f94 <ADC_DelayMicroSecond+0x38>)
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	f7fd f8cc 	bl	8000108 <__udivsi3>
 8002f70:	0003      	movs	r3, r0
 8002f72:	001a      	movs	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4353      	muls	r3, r2
 8002f78:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8002f7a:	e002      	b.n	8002f82 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1f9      	bne.n	8002f7c <ADC_DelayMicroSecond+0x20>
  } 
}
 8002f88:	46c0      	nop			; (mov r8, r8)
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	b004      	add	sp, #16
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	20000054 	.word	0x20000054
 8002f94:	000f4240 	.word	0x000f4240

08002f98 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	0002      	movs	r2, r0
 8002fa0:	1dfb      	adds	r3, r7, #7
 8002fa2:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002fa4:	1dfb      	adds	r3, r7, #7
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	001a      	movs	r2, r3
 8002faa:	231f      	movs	r3, #31
 8002fac:	401a      	ands	r2, r3
 8002fae:	4b04      	ldr	r3, [pc, #16]	; (8002fc0 <NVIC_EnableIRQ+0x28>)
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	4091      	lsls	r1, r2
 8002fb4:	000a      	movs	r2, r1
 8002fb6:	601a      	str	r2, [r3, #0]
}
 8002fb8:	46c0      	nop			; (mov r8, r8)
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	b002      	add	sp, #8
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	e000e100 	.word	0xe000e100

08002fc4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fc4:	b590      	push	{r4, r7, lr}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	0002      	movs	r2, r0
 8002fcc:	6039      	str	r1, [r7, #0]
 8002fce:	1dfb      	adds	r3, r7, #7
 8002fd0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8002fd2:	1dfb      	adds	r3, r7, #7
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	2b7f      	cmp	r3, #127	; 0x7f
 8002fd8:	d932      	bls.n	8003040 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fda:	4a2f      	ldr	r2, [pc, #188]	; (8003098 <NVIC_SetPriority+0xd4>)
 8002fdc:	1dfb      	adds	r3, r7, #7
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	0019      	movs	r1, r3
 8002fe2:	230f      	movs	r3, #15
 8002fe4:	400b      	ands	r3, r1
 8002fe6:	3b08      	subs	r3, #8
 8002fe8:	089b      	lsrs	r3, r3, #2
 8002fea:	3306      	adds	r3, #6
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	18d3      	adds	r3, r2, r3
 8002ff0:	3304      	adds	r3, #4
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	1dfa      	adds	r2, r7, #7
 8002ff6:	7812      	ldrb	r2, [r2, #0]
 8002ff8:	0011      	movs	r1, r2
 8002ffa:	2203      	movs	r2, #3
 8002ffc:	400a      	ands	r2, r1
 8002ffe:	00d2      	lsls	r2, r2, #3
 8003000:	21ff      	movs	r1, #255	; 0xff
 8003002:	4091      	lsls	r1, r2
 8003004:	000a      	movs	r2, r1
 8003006:	43d2      	mvns	r2, r2
 8003008:	401a      	ands	r2, r3
 800300a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	019b      	lsls	r3, r3, #6
 8003010:	22ff      	movs	r2, #255	; 0xff
 8003012:	401a      	ands	r2, r3
 8003014:	1dfb      	adds	r3, r7, #7
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	0018      	movs	r0, r3
 800301a:	2303      	movs	r3, #3
 800301c:	4003      	ands	r3, r0
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003022:	481d      	ldr	r0, [pc, #116]	; (8003098 <NVIC_SetPriority+0xd4>)
 8003024:	1dfb      	adds	r3, r7, #7
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	001c      	movs	r4, r3
 800302a:	230f      	movs	r3, #15
 800302c:	4023      	ands	r3, r4
 800302e:	3b08      	subs	r3, #8
 8003030:	089b      	lsrs	r3, r3, #2
 8003032:	430a      	orrs	r2, r1
 8003034:	3306      	adds	r3, #6
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	18c3      	adds	r3, r0, r3
 800303a:	3304      	adds	r3, #4
 800303c:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800303e:	e027      	b.n	8003090 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003040:	4a16      	ldr	r2, [pc, #88]	; (800309c <NVIC_SetPriority+0xd8>)
 8003042:	1dfb      	adds	r3, r7, #7
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	b25b      	sxtb	r3, r3
 8003048:	089b      	lsrs	r3, r3, #2
 800304a:	33c0      	adds	r3, #192	; 0xc0
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	589b      	ldr	r3, [r3, r2]
 8003050:	1dfa      	adds	r2, r7, #7
 8003052:	7812      	ldrb	r2, [r2, #0]
 8003054:	0011      	movs	r1, r2
 8003056:	2203      	movs	r2, #3
 8003058:	400a      	ands	r2, r1
 800305a:	00d2      	lsls	r2, r2, #3
 800305c:	21ff      	movs	r1, #255	; 0xff
 800305e:	4091      	lsls	r1, r2
 8003060:	000a      	movs	r2, r1
 8003062:	43d2      	mvns	r2, r2
 8003064:	401a      	ands	r2, r3
 8003066:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	019b      	lsls	r3, r3, #6
 800306c:	22ff      	movs	r2, #255	; 0xff
 800306e:	401a      	ands	r2, r3
 8003070:	1dfb      	adds	r3, r7, #7
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	0018      	movs	r0, r3
 8003076:	2303      	movs	r3, #3
 8003078:	4003      	ands	r3, r0
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800307e:	4807      	ldr	r0, [pc, #28]	; (800309c <NVIC_SetPriority+0xd8>)
 8003080:	1dfb      	adds	r3, r7, #7
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	b25b      	sxtb	r3, r3
 8003086:	089b      	lsrs	r3, r3, #2
 8003088:	430a      	orrs	r2, r1
 800308a:	33c0      	adds	r3, #192	; 0xc0
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	501a      	str	r2, [r3, r0]
}
 8003090:	46c0      	nop			; (mov r8, r8)
 8003092:	46bd      	mov	sp, r7
 8003094:	b003      	add	sp, #12
 8003096:	bd90      	pop	{r4, r7, pc}
 8003098:	e000ed00 	.word	0xe000ed00
 800309c:	e000e100 	.word	0xe000e100

080030a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	3b01      	subs	r3, #1
 80030ac:	4a0c      	ldr	r2, [pc, #48]	; (80030e0 <SysTick_Config+0x40>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d901      	bls.n	80030b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030b2:	2301      	movs	r3, #1
 80030b4:	e010      	b.n	80030d8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030b6:	4b0b      	ldr	r3, [pc, #44]	; (80030e4 <SysTick_Config+0x44>)
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	3a01      	subs	r2, #1
 80030bc:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030be:	2301      	movs	r3, #1
 80030c0:	425b      	negs	r3, r3
 80030c2:	2103      	movs	r1, #3
 80030c4:	0018      	movs	r0, r3
 80030c6:	f7ff ff7d 	bl	8002fc4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030ca:	4b06      	ldr	r3, [pc, #24]	; (80030e4 <SysTick_Config+0x44>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030d0:	4b04      	ldr	r3, [pc, #16]	; (80030e4 <SysTick_Config+0x44>)
 80030d2:	2207      	movs	r2, #7
 80030d4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	0018      	movs	r0, r3
 80030da:	46bd      	mov	sp, r7
 80030dc:	b002      	add	sp, #8
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	00ffffff 	.word	0x00ffffff
 80030e4:	e000e010 	.word	0xe000e010

080030e8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60b9      	str	r1, [r7, #8]
 80030f0:	607a      	str	r2, [r7, #4]
 80030f2:	210f      	movs	r1, #15
 80030f4:	187b      	adds	r3, r7, r1
 80030f6:	1c02      	adds	r2, r0, #0
 80030f8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80030fa:	68ba      	ldr	r2, [r7, #8]
 80030fc:	187b      	adds	r3, r7, r1
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	b25b      	sxtb	r3, r3
 8003102:	0011      	movs	r1, r2
 8003104:	0018      	movs	r0, r3
 8003106:	f7ff ff5d 	bl	8002fc4 <NVIC_SetPriority>
}
 800310a:	46c0      	nop			; (mov r8, r8)
 800310c:	46bd      	mov	sp, r7
 800310e:	b004      	add	sp, #16
 8003110:	bd80      	pop	{r7, pc}

08003112 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b082      	sub	sp, #8
 8003116:	af00      	add	r7, sp, #0
 8003118:	0002      	movs	r2, r0
 800311a:	1dfb      	adds	r3, r7, #7
 800311c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800311e:	1dfb      	adds	r3, r7, #7
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	b25b      	sxtb	r3, r3
 8003124:	0018      	movs	r0, r3
 8003126:	f7ff ff37 	bl	8002f98 <NVIC_EnableIRQ>
}
 800312a:	46c0      	nop			; (mov r8, r8)
 800312c:	46bd      	mov	sp, r7
 800312e:	b002      	add	sp, #8
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b082      	sub	sp, #8
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	0018      	movs	r0, r3
 800313e:	f7ff ffaf 	bl	80030a0 <SysTick_Config>
 8003142:	0003      	movs	r3, r0
}
 8003144:	0018      	movs	r0, r3
 8003146:	46bd      	mov	sp, r7
 8003148:	b002      	add	sp, #8
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e061      	b.n	8003222 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a32      	ldr	r2, [pc, #200]	; (800322c <HAL_DMA_Init+0xe0>)
 8003164:	4694      	mov	ip, r2
 8003166:	4463      	add	r3, ip
 8003168:	2114      	movs	r1, #20
 800316a:	0018      	movs	r0, r3
 800316c:	f7fc ffcc 	bl	8000108 <__udivsi3>
 8003170:	0003      	movs	r3, r0
 8003172:	009a      	lsls	r2, r3, #2
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a2d      	ldr	r2, [pc, #180]	; (8003230 <HAL_DMA_Init+0xe4>)
 800317c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2225      	movs	r2, #37	; 0x25
 8003182:	2102      	movs	r1, #2
 8003184:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	4a28      	ldr	r2, [pc, #160]	; (8003234 <HAL_DMA_Init+0xe8>)
 8003192:	4013      	ands	r3, r2
 8003194:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800319e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	2380      	movs	r3, #128	; 0x80
 80031d2:	01db      	lsls	r3, r3, #7
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d018      	beq.n	800320a <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80031d8:	4b17      	ldr	r3, [pc, #92]	; (8003238 <HAL_DMA_Init+0xec>)
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e0:	211c      	movs	r1, #28
 80031e2:	400b      	ands	r3, r1
 80031e4:	210f      	movs	r1, #15
 80031e6:	4099      	lsls	r1, r3
 80031e8:	000b      	movs	r3, r1
 80031ea:	43d9      	mvns	r1, r3
 80031ec:	4b12      	ldr	r3, [pc, #72]	; (8003238 <HAL_DMA_Init+0xec>)
 80031ee:	400a      	ands	r2, r1
 80031f0:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80031f2:	4b11      	ldr	r3, [pc, #68]	; (8003238 <HAL_DMA_Init+0xec>)
 80031f4:	6819      	ldr	r1, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fe:	201c      	movs	r0, #28
 8003200:	4003      	ands	r3, r0
 8003202:	409a      	lsls	r2, r3
 8003204:	4b0c      	ldr	r3, [pc, #48]	; (8003238 <HAL_DMA_Init+0xec>)
 8003206:	430a      	orrs	r2, r1
 8003208:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2225      	movs	r2, #37	; 0x25
 8003214:	2101      	movs	r1, #1
 8003216:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2224      	movs	r2, #36	; 0x24
 800321c:	2100      	movs	r1, #0
 800321e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	0018      	movs	r0, r3
 8003224:	46bd      	mov	sp, r7
 8003226:	b004      	add	sp, #16
 8003228:	bd80      	pop	{r7, pc}
 800322a:	46c0      	nop			; (mov r8, r8)
 800322c:	bffdfff8 	.word	0xbffdfff8
 8003230:	40020000 	.word	0x40020000
 8003234:	ffff800f 	.word	0xffff800f
 8003238:	400200a8 	.word	0x400200a8

0800323c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003244:	230f      	movs	r3, #15
 8003246:	18fb      	adds	r3, r7, r3
 8003248:	2200      	movs	r2, #0
 800324a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2225      	movs	r2, #37	; 0x25
 8003250:	5c9b      	ldrb	r3, [r3, r2]
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d007      	beq.n	8003268 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2204      	movs	r2, #4
 800325c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800325e:	230f      	movs	r3, #15
 8003260:	18fb      	adds	r3, r7, r3
 8003262:	2201      	movs	r2, #1
 8003264:	701a      	strb	r2, [r3, #0]
 8003266:	e02a      	b.n	80032be <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	210e      	movs	r1, #14
 8003274:	438a      	bics	r2, r1
 8003276:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2101      	movs	r1, #1
 8003284:	438a      	bics	r2, r1
 8003286:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328c:	221c      	movs	r2, #28
 800328e:	401a      	ands	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003294:	2101      	movs	r1, #1
 8003296:	4091      	lsls	r1, r2
 8003298:	000a      	movs	r2, r1
 800329a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2225      	movs	r2, #37	; 0x25
 80032a0:	2101      	movs	r1, #1
 80032a2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2224      	movs	r2, #36	; 0x24
 80032a8:	2100      	movs	r1, #0
 80032aa:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d004      	beq.n	80032be <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	0010      	movs	r0, r2
 80032bc:	4798      	blx	r3
    }
  }
  return status;
 80032be:	230f      	movs	r3, #15
 80032c0:	18fb      	adds	r3, r7, r3
 80032c2:	781b      	ldrb	r3, [r3, #0]
}
 80032c4:	0018      	movs	r0, r3
 80032c6:	46bd      	mov	sp, r7
 80032c8:	b004      	add	sp, #16
 80032ca:	bd80      	pop	{r7, pc}

080032cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e8:	221c      	movs	r2, #28
 80032ea:	4013      	ands	r3, r2
 80032ec:	2204      	movs	r2, #4
 80032ee:	409a      	lsls	r2, r3
 80032f0:	0013      	movs	r3, r2
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	4013      	ands	r3, r2
 80032f6:	d026      	beq.n	8003346 <HAL_DMA_IRQHandler+0x7a>
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	2204      	movs	r2, #4
 80032fc:	4013      	ands	r3, r2
 80032fe:	d022      	beq.n	8003346 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2220      	movs	r2, #32
 8003308:	4013      	ands	r3, r2
 800330a:	d107      	bne.n	800331c <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2104      	movs	r1, #4
 8003318:	438a      	bics	r2, r1
 800331a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003320:	221c      	movs	r2, #28
 8003322:	401a      	ands	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003328:	2104      	movs	r1, #4
 800332a:	4091      	lsls	r1, r2
 800332c:	000a      	movs	r2, r1
 800332e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003334:	2b00      	cmp	r3, #0
 8003336:	d100      	bne.n	800333a <HAL_DMA_IRQHandler+0x6e>
 8003338:	e071      	b.n	800341e <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	0010      	movs	r0, r2
 8003342:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8003344:	e06b      	b.n	800341e <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334a:	221c      	movs	r2, #28
 800334c:	4013      	ands	r3, r2
 800334e:	2202      	movs	r2, #2
 8003350:	409a      	lsls	r2, r3
 8003352:	0013      	movs	r3, r2
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	4013      	ands	r3, r2
 8003358:	d02d      	beq.n	80033b6 <HAL_DMA_IRQHandler+0xea>
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	2202      	movs	r2, #2
 800335e:	4013      	ands	r3, r2
 8003360:	d029      	beq.n	80033b6 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2220      	movs	r2, #32
 800336a:	4013      	ands	r3, r2
 800336c:	d10b      	bne.n	8003386 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	210a      	movs	r1, #10
 800337a:	438a      	bics	r2, r1
 800337c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2225      	movs	r2, #37	; 0x25
 8003382:	2101      	movs	r1, #1
 8003384:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338a:	221c      	movs	r2, #28
 800338c:	401a      	ands	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	2102      	movs	r1, #2
 8003394:	4091      	lsls	r1, r2
 8003396:	000a      	movs	r2, r1
 8003398:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2224      	movs	r2, #36	; 0x24
 800339e:	2100      	movs	r1, #0
 80033a0:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d039      	beq.n	800341e <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	0010      	movs	r0, r2
 80033b2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80033b4:	e033      	b.n	800341e <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ba:	221c      	movs	r2, #28
 80033bc:	4013      	ands	r3, r2
 80033be:	2208      	movs	r2, #8
 80033c0:	409a      	lsls	r2, r3
 80033c2:	0013      	movs	r3, r2
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	4013      	ands	r3, r2
 80033c8:	d02a      	beq.n	8003420 <HAL_DMA_IRQHandler+0x154>
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	2208      	movs	r2, #8
 80033ce:	4013      	ands	r3, r2
 80033d0:	d026      	beq.n	8003420 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	210e      	movs	r1, #14
 80033de:	438a      	bics	r2, r1
 80033e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e6:	221c      	movs	r2, #28
 80033e8:	401a      	ands	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	2101      	movs	r1, #1
 80033f0:	4091      	lsls	r1, r2
 80033f2:	000a      	movs	r2, r1
 80033f4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2225      	movs	r2, #37	; 0x25
 8003400:	2101      	movs	r1, #1
 8003402:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2224      	movs	r2, #36	; 0x24
 8003408:	2100      	movs	r1, #0
 800340a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003410:	2b00      	cmp	r3, #0
 8003412:	d005      	beq.n	8003420 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	0010      	movs	r0, r2
 800341c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800341e:	46c0      	nop			; (mov r8, r8)
 8003420:	46c0      	nop			; (mov r8, r8)
}
 8003422:	46bd      	mov	sp, r7
 8003424:	b004      	add	sp, #16
 8003426:	bd80      	pop	{r7, pc}

08003428 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003432:	2300      	movs	r3, #0
 8003434:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003436:	2300      	movs	r3, #0
 8003438:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800343a:	2300      	movs	r3, #0
 800343c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800343e:	e155      	b.n	80036ec <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2101      	movs	r1, #1
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	4091      	lsls	r1, r2
 800344a:	000a      	movs	r2, r1
 800344c:	4013      	ands	r3, r2
 800344e:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d100      	bne.n	8003458 <HAL_GPIO_Init+0x30>
 8003456:	e146      	b.n	80036e6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2b02      	cmp	r3, #2
 800345e:	d003      	beq.n	8003468 <HAL_GPIO_Init+0x40>
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	2b12      	cmp	r3, #18
 8003466:	d123      	bne.n	80034b0 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	08da      	lsrs	r2, r3, #3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3208      	adds	r2, #8
 8003470:	0092      	lsls	r2, r2, #2
 8003472:	58d3      	ldr	r3, [r2, r3]
 8003474:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	2207      	movs	r2, #7
 800347a:	4013      	ands	r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	220f      	movs	r2, #15
 8003480:	409a      	lsls	r2, r3
 8003482:	0013      	movs	r3, r2
 8003484:	43da      	mvns	r2, r3
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	4013      	ands	r3, r2
 800348a:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	691a      	ldr	r2, [r3, #16]
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	2107      	movs	r1, #7
 8003494:	400b      	ands	r3, r1
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	409a      	lsls	r2, r3
 800349a:	0013      	movs	r3, r2
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	4313      	orrs	r3, r2
 80034a0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	08da      	lsrs	r2, r3, #3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	3208      	adds	r2, #8
 80034aa:	0092      	lsls	r2, r2, #2
 80034ac:	6939      	ldr	r1, [r7, #16]
 80034ae:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d00b      	beq.n	80034d0 <HAL_GPIO_Init+0xa8>
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d007      	beq.n	80034d0 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80034c4:	2b11      	cmp	r3, #17
 80034c6:	d003      	beq.n	80034d0 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	2b12      	cmp	r3, #18
 80034ce:	d130      	bne.n	8003532 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	2203      	movs	r2, #3
 80034dc:	409a      	lsls	r2, r3
 80034de:	0013      	movs	r3, r2
 80034e0:	43da      	mvns	r2, r3
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	4013      	ands	r3, r2
 80034e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	68da      	ldr	r2, [r3, #12]
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	409a      	lsls	r2, r3
 80034f2:	0013      	movs	r3, r2
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003506:	2201      	movs	r2, #1
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	409a      	lsls	r2, r3
 800350c:	0013      	movs	r3, r2
 800350e:	43da      	mvns	r2, r3
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	4013      	ands	r3, r2
 8003514:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	091b      	lsrs	r3, r3, #4
 800351c:	2201      	movs	r2, #1
 800351e:	401a      	ands	r2, r3
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	409a      	lsls	r2, r3
 8003524:	0013      	movs	r3, r2
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	4313      	orrs	r3, r2
 800352a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	2203      	movs	r2, #3
 800353e:	409a      	lsls	r2, r3
 8003540:	0013      	movs	r3, r2
 8003542:	43da      	mvns	r2, r3
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	4013      	ands	r3, r2
 8003548:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	2203      	movs	r2, #3
 8003550:	401a      	ands	r2, r3
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	409a      	lsls	r2, r3
 8003558:	0013      	movs	r3, r2
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	4313      	orrs	r3, r2
 800355e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	2203      	movs	r2, #3
 8003572:	409a      	lsls	r2, r3
 8003574:	0013      	movs	r3, r2
 8003576:	43da      	mvns	r2, r3
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	4013      	ands	r3, r2
 800357c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	689a      	ldr	r2, [r3, #8]
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	409a      	lsls	r2, r3
 8003588:	0013      	movs	r3, r2
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	4313      	orrs	r3, r2
 800358e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685a      	ldr	r2, [r3, #4]
 800359a:	2380      	movs	r3, #128	; 0x80
 800359c:	055b      	lsls	r3, r3, #21
 800359e:	4013      	ands	r3, r2
 80035a0:	d100      	bne.n	80035a4 <HAL_GPIO_Init+0x17c>
 80035a2:	e0a0      	b.n	80036e6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035a4:	4b57      	ldr	r3, [pc, #348]	; (8003704 <HAL_GPIO_Init+0x2dc>)
 80035a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035a8:	4b56      	ldr	r3, [pc, #344]	; (8003704 <HAL_GPIO_Init+0x2dc>)
 80035aa:	2101      	movs	r1, #1
 80035ac:	430a      	orrs	r2, r1
 80035ae:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 80035b0:	4a55      	ldr	r2, [pc, #340]	; (8003708 <HAL_GPIO_Init+0x2e0>)
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	089b      	lsrs	r3, r3, #2
 80035b6:	3302      	adds	r3, #2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	589b      	ldr	r3, [r3, r2]
 80035bc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	2203      	movs	r2, #3
 80035c2:	4013      	ands	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	220f      	movs	r2, #15
 80035c8:	409a      	lsls	r2, r3
 80035ca:	0013      	movs	r3, r2
 80035cc:	43da      	mvns	r2, r3
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	4013      	ands	r3, r2
 80035d2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	23a0      	movs	r3, #160	; 0xa0
 80035d8:	05db      	lsls	r3, r3, #23
 80035da:	429a      	cmp	r2, r3
 80035dc:	d01f      	beq.n	800361e <HAL_GPIO_Init+0x1f6>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a4a      	ldr	r2, [pc, #296]	; (800370c <HAL_GPIO_Init+0x2e4>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d019      	beq.n	800361a <HAL_GPIO_Init+0x1f2>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a49      	ldr	r2, [pc, #292]	; (8003710 <HAL_GPIO_Init+0x2e8>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d013      	beq.n	8003616 <HAL_GPIO_Init+0x1ee>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a48      	ldr	r2, [pc, #288]	; (8003714 <HAL_GPIO_Init+0x2ec>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d00d      	beq.n	8003612 <HAL_GPIO_Init+0x1ea>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a47      	ldr	r2, [pc, #284]	; (8003718 <HAL_GPIO_Init+0x2f0>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d007      	beq.n	800360e <HAL_GPIO_Init+0x1e6>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a46      	ldr	r2, [pc, #280]	; (800371c <HAL_GPIO_Init+0x2f4>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d101      	bne.n	800360a <HAL_GPIO_Init+0x1e2>
 8003606:	2305      	movs	r3, #5
 8003608:	e00a      	b.n	8003620 <HAL_GPIO_Init+0x1f8>
 800360a:	2306      	movs	r3, #6
 800360c:	e008      	b.n	8003620 <HAL_GPIO_Init+0x1f8>
 800360e:	2304      	movs	r3, #4
 8003610:	e006      	b.n	8003620 <HAL_GPIO_Init+0x1f8>
 8003612:	2303      	movs	r3, #3
 8003614:	e004      	b.n	8003620 <HAL_GPIO_Init+0x1f8>
 8003616:	2302      	movs	r3, #2
 8003618:	e002      	b.n	8003620 <HAL_GPIO_Init+0x1f8>
 800361a:	2301      	movs	r3, #1
 800361c:	e000      	b.n	8003620 <HAL_GPIO_Init+0x1f8>
 800361e:	2300      	movs	r3, #0
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	2103      	movs	r1, #3
 8003624:	400a      	ands	r2, r1
 8003626:	0092      	lsls	r2, r2, #2
 8003628:	4093      	lsls	r3, r2
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	4313      	orrs	r3, r2
 800362e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003630:	4935      	ldr	r1, [pc, #212]	; (8003708 <HAL_GPIO_Init+0x2e0>)
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	089b      	lsrs	r3, r3, #2
 8003636:	3302      	adds	r3, #2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800363e:	4b38      	ldr	r3, [pc, #224]	; (8003720 <HAL_GPIO_Init+0x2f8>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	43da      	mvns	r2, r3
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	4013      	ands	r3, r2
 800364c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	685a      	ldr	r2, [r3, #4]
 8003652:	2380      	movs	r3, #128	; 0x80
 8003654:	025b      	lsls	r3, r3, #9
 8003656:	4013      	ands	r3, r2
 8003658:	d003      	beq.n	8003662 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	4313      	orrs	r3, r2
 8003660:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003662:	4b2f      	ldr	r3, [pc, #188]	; (8003720 <HAL_GPIO_Init+0x2f8>)
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003668:	4b2d      	ldr	r3, [pc, #180]	; (8003720 <HAL_GPIO_Init+0x2f8>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	43da      	mvns	r2, r3
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	4013      	ands	r3, r2
 8003676:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	2380      	movs	r3, #128	; 0x80
 800367e:	029b      	lsls	r3, r3, #10
 8003680:	4013      	ands	r3, r2
 8003682:	d003      	beq.n	800368c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	4313      	orrs	r3, r2
 800368a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800368c:	4b24      	ldr	r3, [pc, #144]	; (8003720 <HAL_GPIO_Init+0x2f8>)
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003692:	4b23      	ldr	r3, [pc, #140]	; (8003720 <HAL_GPIO_Init+0x2f8>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	43da      	mvns	r2, r3
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	4013      	ands	r3, r2
 80036a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	2380      	movs	r3, #128	; 0x80
 80036a8:	035b      	lsls	r3, r3, #13
 80036aa:	4013      	ands	r3, r2
 80036ac:	d003      	beq.n	80036b6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80036b6:	4b1a      	ldr	r3, [pc, #104]	; (8003720 <HAL_GPIO_Init+0x2f8>)
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80036bc:	4b18      	ldr	r3, [pc, #96]	; (8003720 <HAL_GPIO_Init+0x2f8>)
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	43da      	mvns	r2, r3
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	4013      	ands	r3, r2
 80036ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	2380      	movs	r3, #128	; 0x80
 80036d2:	039b      	lsls	r3, r3, #14
 80036d4:	4013      	ands	r3, r2
 80036d6:	d003      	beq.n	80036e0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	4313      	orrs	r3, r2
 80036de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80036e0:	4b0f      	ldr	r3, [pc, #60]	; (8003720 <HAL_GPIO_Init+0x2f8>)
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	3301      	adds	r3, #1
 80036ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	40da      	lsrs	r2, r3
 80036f4:	1e13      	subs	r3, r2, #0
 80036f6:	d000      	beq.n	80036fa <HAL_GPIO_Init+0x2d2>
 80036f8:	e6a2      	b.n	8003440 <HAL_GPIO_Init+0x18>
  }
}
 80036fa:	46c0      	nop			; (mov r8, r8)
 80036fc:	46bd      	mov	sp, r7
 80036fe:	b006      	add	sp, #24
 8003700:	bd80      	pop	{r7, pc}
 8003702:	46c0      	nop			; (mov r8, r8)
 8003704:	40021000 	.word	0x40021000
 8003708:	40010000 	.word	0x40010000
 800370c:	50000400 	.word	0x50000400
 8003710:	50000800 	.word	0x50000800
 8003714:	50000c00 	.word	0x50000c00
 8003718:	50001000 	.word	0x50001000
 800371c:	50001c00 	.word	0x50001c00
 8003720:	40010400 	.word	0x40010400

08003724 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	000a      	movs	r2, r1
 800372e:	1cbb      	adds	r3, r7, #2
 8003730:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	1cba      	adds	r2, r7, #2
 8003738:	8812      	ldrh	r2, [r2, #0]
 800373a:	4013      	ands	r3, r2
 800373c:	d004      	beq.n	8003748 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800373e:	230f      	movs	r3, #15
 8003740:	18fb      	adds	r3, r7, r3
 8003742:	2201      	movs	r2, #1
 8003744:	701a      	strb	r2, [r3, #0]
 8003746:	e003      	b.n	8003750 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003748:	230f      	movs	r3, #15
 800374a:	18fb      	adds	r3, r7, r3
 800374c:	2200      	movs	r2, #0
 800374e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003750:	230f      	movs	r3, #15
 8003752:	18fb      	adds	r3, r7, r3
 8003754:	781b      	ldrb	r3, [r3, #0]
}
 8003756:	0018      	movs	r0, r3
 8003758:	46bd      	mov	sp, r7
 800375a:	b004      	add	sp, #16
 800375c:	bd80      	pop	{r7, pc}

0800375e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	b082      	sub	sp, #8
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
 8003766:	0008      	movs	r0, r1
 8003768:	0011      	movs	r1, r2
 800376a:	1cbb      	adds	r3, r7, #2
 800376c:	1c02      	adds	r2, r0, #0
 800376e:	801a      	strh	r2, [r3, #0]
 8003770:	1c7b      	adds	r3, r7, #1
 8003772:	1c0a      	adds	r2, r1, #0
 8003774:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8003776:	1c7b      	adds	r3, r7, #1
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d004      	beq.n	8003788 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800377e:	1cbb      	adds	r3, r7, #2
 8003780:	881a      	ldrh	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003786:	e003      	b.n	8003790 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8003788:	1cbb      	adds	r3, r7, #2
 800378a:	881a      	ldrh	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003790:	46c0      	nop			; (mov r8, r8)
 8003792:	46bd      	mov	sp, r7
 8003794:	b002      	add	sp, #8
 8003796:	bd80      	pop	{r7, pc}

08003798 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	000a      	movs	r2, r1
 80037a2:	1cbb      	adds	r3, r7, #2
 80037a4:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	695a      	ldr	r2, [r3, #20]
 80037aa:	1cbb      	adds	r3, r7, #2
 80037ac:	881b      	ldrh	r3, [r3, #0]
 80037ae:	405a      	eors	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	615a      	str	r2, [r3, #20]
}
 80037b4:	46c0      	nop			; (mov r8, r8)
 80037b6:	46bd      	mov	sp, r7
 80037b8:	b002      	add	sp, #8
 80037ba:	bd80      	pop	{r7, pc}

080037bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	0002      	movs	r2, r0
 80037c4:	1dbb      	adds	r3, r7, #6
 80037c6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 80037c8:	4b09      	ldr	r3, [pc, #36]	; (80037f0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	1dba      	adds	r2, r7, #6
 80037ce:	8812      	ldrh	r2, [r2, #0]
 80037d0:	4013      	ands	r3, r2
 80037d2:	d008      	beq.n	80037e6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037d4:	4b06      	ldr	r3, [pc, #24]	; (80037f0 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80037d6:	1dba      	adds	r2, r7, #6
 80037d8:	8812      	ldrh	r2, [r2, #0]
 80037da:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80037dc:	1dbb      	adds	r3, r7, #6
 80037de:	881b      	ldrh	r3, [r3, #0]
 80037e0:	0018      	movs	r0, r3
 80037e2:	f7fe fbc1 	bl	8001f68 <HAL_GPIO_EXTI_Callback>
  }
}
 80037e6:	46c0      	nop			; (mov r8, r8)
 80037e8:	46bd      	mov	sp, r7
 80037ea:	b002      	add	sp, #8
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	46c0      	nop			; (mov r8, r8)
 80037f0:	40010400 	.word	0x40010400

080037f4 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e06c      	b.n	80038e0 <HAL_LPTIM_Init+0xec>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	222e      	movs	r2, #46	; 0x2e
 800380a:	5c9b      	ldrb	r3, [r3, r2]
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d107      	bne.n	8003822 <HAL_LPTIM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	222d      	movs	r2, #45	; 0x2d
 8003816:	2100      	movs	r1, #0
 8003818:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	0018      	movs	r0, r3
 800381e:	f7fe ff2f 	bl	8002680 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	222e      	movs	r2, #46	; 0x2e
 8003826:	2102      	movs	r1, #2
 8003828:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d005      	beq.n	8003846 <HAL_LPTIM_Init+0x52>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800383e:	2380      	movs	r3, #128	; 0x80
 8003840:	041b      	lsls	r3, r3, #16
 8003842:	429a      	cmp	r2, r3
 8003844:	d103      	bne.n	800384e <HAL_LPTIM_Init+0x5a>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	221e      	movs	r2, #30
 800384a:	4393      	bics	r3, r2
 800384c:	60fb      	str	r3, [r7, #12]
  }
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	4a25      	ldr	r2, [pc, #148]	; (80038e8 <HAL_LPTIM_Init+0xf4>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d003      	beq.n	8003860 <HAL_LPTIM_Init+0x6c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	4a24      	ldr	r2, [pc, #144]	; (80038ec <HAL_LPTIM_Init+0xf8>)
 800385c:	4013      	ands	r3, r2
 800385e:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	4a23      	ldr	r2, [pc, #140]	; (80038f0 <HAL_LPTIM_Init+0xfc>)
 8003864:	4013      	ands	r3, r2
 8003866:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003870:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8003876:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 800387c:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8003882:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	4313      	orrs	r3, r2
 8003888:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d005      	beq.n	800389e <HAL_LPTIM_Init+0xaa>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003896:	2380      	movs	r3, #128	; 0x80
 8003898:	041b      	lsls	r3, r3, #16
 800389a:	429a      	cmp	r2, r3
 800389c:	d107      	bne.n	80038ae <HAL_LPTIM_Init+0xba>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80038a6:	4313      	orrs	r3, r2
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	60fb      	str	r3, [r7, #12]
  }

  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	4a0d      	ldr	r2, [pc, #52]	; (80038e8 <HAL_LPTIM_Init+0xf4>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d00a      	beq.n	80038ce <HAL_LPTIM_Init+0xda>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80038c0:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80038c6:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	222e      	movs	r2, #46	; 0x2e
 80038da:	2101      	movs	r1, #1
 80038dc:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	0018      	movs	r0, r3
 80038e2:	46bd      	mov	sp, r7
 80038e4:	b004      	add	sp, #16
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	0000ffff 	.word	0x0000ffff
 80038ec:	ffff1f3f 	.word	0xffff1f3f
 80038f0:	ff19f1f8 	.word	0xff19f1f8

080038f4 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	222e      	movs	r2, #46	; 0x2e
 8003902:	2102      	movs	r1, #2
 8003904:	5499      	strb	r1, [r3, r2]

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003906:	4b23      	ldr	r3, [pc, #140]	; (8003994 <HAL_LPTIM_Counter_Start_IT+0xa0>)
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	4b22      	ldr	r3, [pc, #136]	; (8003994 <HAL_LPTIM_Counter_Start_IT+0xa0>)
 800390c:	2180      	movs	r1, #128	; 0x80
 800390e:	0589      	lsls	r1, r1, #22
 8003910:	430a      	orrs	r2, r1
 8003912:	601a      	str	r2, [r3, #0]

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM) && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d00d      	beq.n	8003938 <HAL_LPTIM_Counter_Start_IT+0x44>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003920:	2380      	movs	r3, #128	; 0x80
 8003922:	041b      	lsls	r3, r3, #16
 8003924:	429a      	cmp	r2, r3
 8003926:	d107      	bne.n	8003938 <HAL_LPTIM_Counter_Start_IT+0x44>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68da      	ldr	r2, [r3, #12]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4919      	ldr	r1, [pc, #100]	; (8003998 <HAL_LPTIM_Counter_Start_IT+0xa4>)
 8003934:	400a      	ands	r2, r1
 8003936:	60da      	str	r2, [r3, #12]
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689a      	ldr	r2, [r3, #8]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2110      	movs	r1, #16
 8003944:	430a      	orrs	r2, r1
 8003946:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689a      	ldr	r2, [r3, #8]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2102      	movs	r1, #2
 8003954:	430a      	orrs	r2, r1
 8003956:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	691a      	ldr	r2, [r3, #16]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2101      	movs	r1, #1
 8003964:	430a      	orrs	r2, r1
 8003966:	611a      	str	r2, [r3, #16]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	619a      	str	r2, [r3, #24]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	691a      	ldr	r2, [r3, #16]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2104      	movs	r1, #4
 800397c:	430a      	orrs	r2, r1
 800397e:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	222e      	movs	r2, #46	; 0x2e
 8003984:	2101      	movs	r1, #1
 8003986:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	0018      	movs	r0, r3
 800398c:	46bd      	mov	sp, r7
 800398e:	b002      	add	sp, #8
 8003990:	bd80      	pop	{r7, pc}
 8003992:	46c0      	nop			; (mov r8, r8)
 8003994:	40010400 	.word	0x40010400
 8003998:	fffff1ff 	.word	0xfffff1ff

0800399c <HAL_LPTIM_Counter_Stop_IT>:
  * @brief  Stop the Counter mode in interrupt mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Stop_IT(LPTIM_HandleTypeDef *hlptim)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	222e      	movs	r2, #46	; 0x2e
 80039a8:	2102      	movs	r1, #2
 80039aa:	5499      	strb	r1, [r3, r2]

  /* Disable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_DISABLE_IT();
 80039ac:	4b11      	ldr	r3, [pc, #68]	; (80039f4 <HAL_LPTIM_Counter_Stop_IT+0x58>)
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	4b10      	ldr	r3, [pc, #64]	; (80039f4 <HAL_LPTIM_Counter_Stop_IT+0x58>)
 80039b2:	4911      	ldr	r1, [pc, #68]	; (80039f8 <HAL_LPTIM_Counter_Stop_IT+0x5c>)
 80039b4:	400a      	ands	r2, r1
 80039b6:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	0018      	movs	r0, r3
 80039bc:	f000 f81e 	bl	80039fc <LPTIM_Disable>

  /* Disable Autoreload write complete interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARROK);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689a      	ldr	r2, [r3, #8]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2110      	movs	r1, #16
 80039cc:	438a      	bics	r2, r1
 80039ce:	609a      	str	r2, [r3, #8]

  /* Disable Autoreload match interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARRM);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689a      	ldr	r2, [r3, #8]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2102      	movs	r1, #2
 80039dc:	438a      	bics	r2, r1
 80039de:	609a      	str	r2, [r3, #8]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	222e      	movs	r2, #46	; 0x2e
 80039e4:	2101      	movs	r1, #1
 80039e6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	0018      	movs	r0, r3
 80039ec:	46bd      	mov	sp, r7
 80039ee:	b002      	add	sp, #8
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	46c0      	nop			; (mov r8, r8)
 80039f4:	40010400 	.word	0x40010400
 80039f8:	dfffffff 	.word	0xdfffffff

080039fc <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *lptim)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b08a      	sub	sp, #40	; 0x28
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8003a04:	2300      	movs	r3, #0
 8003a06:	627b      	str	r3, [r7, #36]	; 0x24
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a08:	b672      	cpsid	i

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)lptim->Instance)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	001a      	movs	r2, r3
 8003a10:	4b5e      	ldr	r3, [pc, #376]	; (8003b8c <LPTIM_Disable+0x190>)
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d000      	beq.n	8003a18 <LPTIM_Disable+0x1c>
     case LPTIM2_BASE:
       tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
       break;
#endif /* LPTIM2 */
     default:
       break;
 8003a16:	e006      	b.n	8003a26 <LPTIM_Disable+0x2a>
       tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8003a18:	4b5d      	ldr	r3, [pc, #372]	; (8003b90 <LPTIM_Disable+0x194>)
 8003a1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a1c:	23c0      	movs	r3, #192	; 0xc0
 8003a1e:	031b      	lsls	r3, r3, #12
 8003a20:	4013      	ands	r3, r2
 8003a22:	627b      	str	r3, [r7, #36]	; 0x24
       break;
 8003a24:	46c0      	nop			; (mov r8, r8)
  }

  /* Save LPTIM configuration registers */
  tmpIER = lptim->Instance->IER;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	623b      	str	r3, [r7, #32]
  tmpCFGR = lptim->Instance->CFGR;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	61fb      	str	r3, [r7, #28]
  tmpCMP = lptim->Instance->CMP;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	61bb      	str	r3, [r7, #24]
  tmpARR = lptim->Instance->ARR;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)lptim->Instance)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	001a      	movs	r2, r3
 8003a4c:	4b4f      	ldr	r3, [pc, #316]	; (8003b8c <LPTIM_Disable+0x190>)
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d000      	beq.n	8003a54 <LPTIM_Disable+0x58>
       __HAL_RCC_LPTIM2_FORCE_RESET();
       __HAL_RCC_LPTIM2_RELEASE_RESET();
       break;
#endif /* LPTIM2 */
     default:
       break;
 8003a52:	e00d      	b.n	8003a70 <LPTIM_Disable+0x74>
       __HAL_RCC_LPTIM1_FORCE_RESET();
 8003a54:	4b4e      	ldr	r3, [pc, #312]	; (8003b90 <LPTIM_Disable+0x194>)
 8003a56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a58:	4b4d      	ldr	r3, [pc, #308]	; (8003b90 <LPTIM_Disable+0x194>)
 8003a5a:	2180      	movs	r1, #128	; 0x80
 8003a5c:	0609      	lsls	r1, r1, #24
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	629a      	str	r2, [r3, #40]	; 0x28
       __HAL_RCC_LPTIM1_RELEASE_RESET();
 8003a62:	4b4b      	ldr	r3, [pc, #300]	; (8003b90 <LPTIM_Disable+0x194>)
 8003a64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a66:	4b4a      	ldr	r3, [pc, #296]	; (8003b90 <LPTIM_Disable+0x194>)
 8003a68:	0052      	lsls	r2, r2, #1
 8003a6a:	0852      	lsrs	r2, r2, #1
 8003a6c:	629a      	str	r2, [r3, #40]	; 0x28
       break;
 8003a6e:	46c0      	nop			; (mov r8, r8)

  /*********** Restore LPTIM Config ***********/
  uint32_t Ref_Time;
  uint32_t Time_Elapsed;

  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d103      	bne.n	8003a7e <LPTIM_Disable+0x82>
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d100      	bne.n	8003a7e <LPTIM_Disable+0x82>
 8003a7c:	e070      	b.n	8003b60 <LPTIM_Disable+0x164>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)lptim->Instance)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	001a      	movs	r2, r3
 8003a84:	4b41      	ldr	r3, [pc, #260]	; (8003b8c <LPTIM_Disable+0x190>)
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d000      	beq.n	8003a8c <LPTIM_Disable+0x90>
       case LPTIM2_BASE:
         __HAL_RCC_LPTIM2_CONFIG(0UL);
         break;
#endif /* LPTIM2 */
       default:
         break;
 8003a8a:	e006      	b.n	8003a9a <LPTIM_Disable+0x9e>
         __HAL_RCC_LPTIM1_CONFIG(0UL);
 8003a8c:	4b40      	ldr	r3, [pc, #256]	; (8003b90 <LPTIM_Disable+0x194>)
 8003a8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a90:	4b3f      	ldr	r3, [pc, #252]	; (8003b90 <LPTIM_Disable+0x194>)
 8003a92:	4940      	ldr	r1, [pc, #256]	; (8003b94 <LPTIM_Disable+0x198>)
 8003a94:	400a      	ands	r2, r1
 8003a96:	64da      	str	r2, [r3, #76]	; 0x4c
         break;
 8003a98:	46c0      	nop			; (mov r8, r8)
    }

    if (tmpCMP != 0UL)
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d025      	beq.n	8003aec <LPTIM_Disable+0xf0>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      lptim->Instance->CR |= LPTIM_CR_ENABLE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	691a      	ldr	r2, [r3, #16]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2101      	movs	r1, #1
 8003aac:	430a      	orrs	r2, r1
 8003aae:	611a      	str	r2, [r3, #16]
      lptim->Instance->CMP = tmpCMP;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	615a      	str	r2, [r3, #20]
      /* Polling on CMP write ok status after above restore operation */
      Ref_Time = HAL_GetTick();
 8003ab8:	f7ff f814 	bl	8002ae4 <HAL_GetTick>
 8003abc:	0003      	movs	r3, r0
 8003abe:	613b      	str	r3, [r7, #16]
      do
      {
        Time_Elapsed = HAL_GetTick() - Ref_Time;
 8003ac0:	f7ff f810 	bl	8002ae4 <HAL_GetTick>
 8003ac4:	0002      	movs	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	60fb      	str	r3, [r7, #12]
      } while ((!(__HAL_LPTIM_GET_FLAG(lptim, LPTIM_FLAG_CMPOK))) && (Time_Elapsed <= TIMEOUT));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2208      	movs	r2, #8
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	2b08      	cmp	r3, #8
 8003ad8:	d004      	beq.n	8003ae4 <LPTIM_Disable+0xe8>
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	23fa      	movs	r3, #250	; 0xfa
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d9ed      	bls.n	8003ac0 <LPTIM_Disable+0xc4>

      __HAL_LPTIM_CLEAR_FLAG(lptim, LPTIM_FLAG_CMPOK);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2208      	movs	r2, #8
 8003aea:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d025      	beq.n	8003b3e <LPTIM_Disable+0x142>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      lptim->Instance->CR |= LPTIM_CR_ENABLE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	691a      	ldr	r2, [r3, #16]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2101      	movs	r1, #1
 8003afe:	430a      	orrs	r2, r1
 8003b00:	611a      	str	r2, [r3, #16]
      lptim->Instance->ARR = tmpARR;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	619a      	str	r2, [r3, #24]
      /* Polling on ARR write ok status after above restore operation */
      Ref_Time = HAL_GetTick();
 8003b0a:	f7fe ffeb 	bl	8002ae4 <HAL_GetTick>
 8003b0e:	0003      	movs	r3, r0
 8003b10:	613b      	str	r3, [r7, #16]
      do
      {
        Time_Elapsed = HAL_GetTick() - Ref_Time;
 8003b12:	f7fe ffe7 	bl	8002ae4 <HAL_GetTick>
 8003b16:	0002      	movs	r2, r0
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	60fb      	str	r3, [r7, #12]
      } while ((!(__HAL_LPTIM_GET_FLAG(lptim, LPTIM_FLAG_ARROK))) && (Time_Elapsed <= TIMEOUT));
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2210      	movs	r2, #16
 8003b26:	4013      	ands	r3, r2
 8003b28:	2b10      	cmp	r3, #16
 8003b2a:	d004      	beq.n	8003b36 <LPTIM_Disable+0x13a>
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	23fa      	movs	r3, #250	; 0xfa
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d9ed      	bls.n	8003b12 <LPTIM_Disable+0x116>

      __HAL_LPTIM_CLEAR_FLAG(lptim, LPTIM_FLAG_ARROK);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2210      	movs	r2, #16
 8003b3c:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)lptim->Instance)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	001a      	movs	r2, r3
 8003b44:	4b11      	ldr	r3, [pc, #68]	; (8003b8c <LPTIM_Disable+0x190>)
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d000      	beq.n	8003b4c <LPTIM_Disable+0x150>
       case LPTIM2_BASE:
         __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
         break;
#endif /* LPTIM2 */
       default:
         break;
 8003b4a:	e00a      	b.n	8003b62 <LPTIM_Disable+0x166>
         __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8003b4c:	4b10      	ldr	r3, [pc, #64]	; (8003b90 <LPTIM_Disable+0x194>)
 8003b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b50:	4a10      	ldr	r2, [pc, #64]	; (8003b94 <LPTIM_Disable+0x198>)
 8003b52:	4013      	ands	r3, r2
 8003b54:	0019      	movs	r1, r3
 8003b56:	4b0e      	ldr	r3, [pc, #56]	; (8003b90 <LPTIM_Disable+0x194>)
 8003b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	64da      	str	r2, [r3, #76]	; 0x4c
         break;
 8003b5e:	e000      	b.n	8003b62 <LPTIM_Disable+0x166>
    }
  }
 8003b60:	46c0      	nop			; (mov r8, r8)

  /* Restore configuration registers (LPTIM should be disabled first) */
  lptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	691a      	ldr	r2, [r3, #16]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	438a      	bics	r2, r1
 8003b70:	611a      	str	r2, [r3, #16]
  lptim->Instance->IER = tmpIER;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	6a3a      	ldr	r2, [r7, #32]
 8003b78:	609a      	str	r2, [r3, #8]
  lptim->Instance->CFGR = tmpCFGR;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	69fa      	ldr	r2, [r7, #28]
 8003b80:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8003b82:	b662      	cpsie	i

  __enable_irq();
}
 8003b84:	46c0      	nop			; (mov r8, r8)
 8003b86:	46bd      	mov	sp, r7
 8003b88:	b00a      	add	sp, #40	; 0x28
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	40007c00 	.word	0x40007c00
 8003b90:	40021000 	.word	0x40021000
 8003b94:	fff3ffff 	.word	0xfff3ffff

08003b98 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b9c:	4b04      	ldr	r3, [pc, #16]	; (8003bb0 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	4b03      	ldr	r3, [pc, #12]	; (8003bb0 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003ba2:	2180      	movs	r1, #128	; 0x80
 8003ba4:	0049      	lsls	r1, r1, #1
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	601a      	str	r2, [r3, #0]
}
 8003baa:	46c0      	nop			; (mov r8, r8)
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	40007000 	.word	0x40007000

08003bb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bb4:	b5b0      	push	{r4, r5, r7, lr}
 8003bb6:	b08a      	sub	sp, #40	; 0x28
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d102      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	f000 fbbc 	bl	8004340 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bc8:	4bc8      	ldr	r3, [pc, #800]	; (8003eec <HAL_RCC_OscConfig+0x338>)
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	220c      	movs	r2, #12
 8003bce:	4013      	ands	r3, r2
 8003bd0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bd2:	4bc6      	ldr	r3, [pc, #792]	; (8003eec <HAL_RCC_OscConfig+0x338>)
 8003bd4:	68da      	ldr	r2, [r3, #12]
 8003bd6:	2380      	movs	r3, #128	; 0x80
 8003bd8:	025b      	lsls	r3, r3, #9
 8003bda:	4013      	ands	r3, r2
 8003bdc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2201      	movs	r2, #1
 8003be4:	4013      	ands	r3, r2
 8003be6:	d100      	bne.n	8003bea <HAL_RCC_OscConfig+0x36>
 8003be8:	e07e      	b.n	8003ce8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	2b08      	cmp	r3, #8
 8003bee:	d007      	beq.n	8003c00 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	2b0c      	cmp	r3, #12
 8003bf4:	d112      	bne.n	8003c1c <HAL_RCC_OscConfig+0x68>
 8003bf6:	69ba      	ldr	r2, [r7, #24]
 8003bf8:	2380      	movs	r3, #128	; 0x80
 8003bfa:	025b      	lsls	r3, r3, #9
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d10d      	bne.n	8003c1c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c00:	4bba      	ldr	r3, [pc, #744]	; (8003eec <HAL_RCC_OscConfig+0x338>)
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	2380      	movs	r3, #128	; 0x80
 8003c06:	029b      	lsls	r3, r3, #10
 8003c08:	4013      	ands	r3, r2
 8003c0a:	d100      	bne.n	8003c0e <HAL_RCC_OscConfig+0x5a>
 8003c0c:	e06b      	b.n	8003ce6 <HAL_RCC_OscConfig+0x132>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d167      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	f000 fb92 	bl	8004340 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	2380      	movs	r3, #128	; 0x80
 8003c22:	025b      	lsls	r3, r3, #9
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d107      	bne.n	8003c38 <HAL_RCC_OscConfig+0x84>
 8003c28:	4bb0      	ldr	r3, [pc, #704]	; (8003eec <HAL_RCC_OscConfig+0x338>)
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	4baf      	ldr	r3, [pc, #700]	; (8003eec <HAL_RCC_OscConfig+0x338>)
 8003c2e:	2180      	movs	r1, #128	; 0x80
 8003c30:	0249      	lsls	r1, r1, #9
 8003c32:	430a      	orrs	r2, r1
 8003c34:	601a      	str	r2, [r3, #0]
 8003c36:	e027      	b.n	8003c88 <HAL_RCC_OscConfig+0xd4>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685a      	ldr	r2, [r3, #4]
 8003c3c:	23a0      	movs	r3, #160	; 0xa0
 8003c3e:	02db      	lsls	r3, r3, #11
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d10e      	bne.n	8003c62 <HAL_RCC_OscConfig+0xae>
 8003c44:	4ba9      	ldr	r3, [pc, #676]	; (8003eec <HAL_RCC_OscConfig+0x338>)
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	4ba8      	ldr	r3, [pc, #672]	; (8003eec <HAL_RCC_OscConfig+0x338>)
 8003c4a:	2180      	movs	r1, #128	; 0x80
 8003c4c:	02c9      	lsls	r1, r1, #11
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	601a      	str	r2, [r3, #0]
 8003c52:	4ba6      	ldr	r3, [pc, #664]	; (8003eec <HAL_RCC_OscConfig+0x338>)
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	4ba5      	ldr	r3, [pc, #660]	; (8003eec <HAL_RCC_OscConfig+0x338>)
 8003c58:	2180      	movs	r1, #128	; 0x80
 8003c5a:	0249      	lsls	r1, r1, #9
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	e012      	b.n	8003c88 <HAL_RCC_OscConfig+0xd4>
 8003c62:	4ba2      	ldr	r3, [pc, #648]	; (8003eec <HAL_RCC_OscConfig+0x338>)
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	4ba1      	ldr	r3, [pc, #644]	; (8003eec <HAL_RCC_OscConfig+0x338>)
 8003c68:	49a1      	ldr	r1, [pc, #644]	; (8003ef0 <HAL_RCC_OscConfig+0x33c>)
 8003c6a:	400a      	ands	r2, r1
 8003c6c:	601a      	str	r2, [r3, #0]
 8003c6e:	4b9f      	ldr	r3, [pc, #636]	; (8003eec <HAL_RCC_OscConfig+0x338>)
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	2380      	movs	r3, #128	; 0x80
 8003c74:	025b      	lsls	r3, r3, #9
 8003c76:	4013      	ands	r3, r2
 8003c78:	60fb      	str	r3, [r7, #12]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	4b9b      	ldr	r3, [pc, #620]	; (8003eec <HAL_RCC_OscConfig+0x338>)
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	4b9a      	ldr	r3, [pc, #616]	; (8003eec <HAL_RCC_OscConfig+0x338>)
 8003c82:	499c      	ldr	r1, [pc, #624]	; (8003ef4 <HAL_RCC_OscConfig+0x340>)
 8003c84:	400a      	ands	r2, r1
 8003c86:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d015      	beq.n	8003cbc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c90:	f7fe ff28 	bl	8002ae4 <HAL_GetTick>
 8003c94:	0003      	movs	r3, r0
 8003c96:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c98:	e009      	b.n	8003cae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c9a:	f7fe ff23 	bl	8002ae4 <HAL_GetTick>
 8003c9e:	0002      	movs	r2, r0
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b64      	cmp	r3, #100	; 0x64
 8003ca6:	d902      	bls.n	8003cae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	f000 fb49 	bl	8004340 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003cae:	4b8f      	ldr	r3, [pc, #572]	; (8003eec <HAL_RCC_OscConfig+0x338>)
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	2380      	movs	r3, #128	; 0x80
 8003cb4:	029b      	lsls	r3, r3, #10
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	d0ef      	beq.n	8003c9a <HAL_RCC_OscConfig+0xe6>
 8003cba:	e015      	b.n	8003ce8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cbc:	f7fe ff12 	bl	8002ae4 <HAL_GetTick>
 8003cc0:	0003      	movs	r3, r0
 8003cc2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003cc4:	e008      	b.n	8003cd8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cc6:	f7fe ff0d 	bl	8002ae4 <HAL_GetTick>
 8003cca:	0002      	movs	r2, r0
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b64      	cmp	r3, #100	; 0x64
 8003cd2:	d901      	bls.n	8003cd8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e333      	b.n	8004340 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003cd8:	4b84      	ldr	r3, [pc, #528]	; (8003eec <HAL_RCC_OscConfig+0x338>)
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	2380      	movs	r3, #128	; 0x80
 8003cde:	029b      	lsls	r3, r3, #10
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	d1f0      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x112>
 8003ce4:	e000      	b.n	8003ce8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ce6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2202      	movs	r2, #2
 8003cee:	4013      	ands	r3, r2
 8003cf0:	d100      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x140>
 8003cf2:	e098      	b.n	8003e26 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfc:	2220      	movs	r2, #32
 8003cfe:	4013      	ands	r3, r2
 8003d00:	d009      	beq.n	8003d16 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003d02:	4b7a      	ldr	r3, [pc, #488]	; (8003eec <HAL_RCC_OscConfig+0x338>)
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	4b79      	ldr	r3, [pc, #484]	; (8003eec <HAL_RCC_OscConfig+0x338>)
 8003d08:	2120      	movs	r1, #32
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d10:	2220      	movs	r2, #32
 8003d12:	4393      	bics	r3, r2
 8003d14:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	2b04      	cmp	r3, #4
 8003d1a:	d005      	beq.n	8003d28 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	2b0c      	cmp	r3, #12
 8003d20:	d13d      	bne.n	8003d9e <HAL_RCC_OscConfig+0x1ea>
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d13a      	bne.n	8003d9e <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003d28:	4b70      	ldr	r3, [pc, #448]	; (8003eec <HAL_RCC_OscConfig+0x338>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2204      	movs	r2, #4
 8003d2e:	4013      	ands	r3, r2
 8003d30:	d004      	beq.n	8003d3c <HAL_RCC_OscConfig+0x188>
 8003d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d101      	bne.n	8003d3c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e301      	b.n	8004340 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d3c:	4b6b      	ldr	r3, [pc, #428]	; (8003eec <HAL_RCC_OscConfig+0x338>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	4a6d      	ldr	r2, [pc, #436]	; (8003ef8 <HAL_RCC_OscConfig+0x344>)
 8003d42:	4013      	ands	r3, r2
 8003d44:	0019      	movs	r1, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	021a      	lsls	r2, r3, #8
 8003d4c:	4b67      	ldr	r3, [pc, #412]	; (8003eec <HAL_RCC_OscConfig+0x338>)
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003d52:	4b66      	ldr	r3, [pc, #408]	; (8003eec <HAL_RCC_OscConfig+0x338>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2209      	movs	r2, #9
 8003d58:	4393      	bics	r3, r2
 8003d5a:	0019      	movs	r1, r3
 8003d5c:	4b63      	ldr	r3, [pc, #396]	; (8003eec <HAL_RCC_OscConfig+0x338>)
 8003d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d60:	430a      	orrs	r2, r1
 8003d62:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d64:	f000 fc20 	bl	80045a8 <HAL_RCC_GetSysClockFreq>
 8003d68:	0001      	movs	r1, r0
 8003d6a:	4b60      	ldr	r3, [pc, #384]	; (8003eec <HAL_RCC_OscConfig+0x338>)
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	091b      	lsrs	r3, r3, #4
 8003d70:	220f      	movs	r2, #15
 8003d72:	4013      	ands	r3, r2
 8003d74:	4a61      	ldr	r2, [pc, #388]	; (8003efc <HAL_RCC_OscConfig+0x348>)
 8003d76:	5cd3      	ldrb	r3, [r2, r3]
 8003d78:	000a      	movs	r2, r1
 8003d7a:	40da      	lsrs	r2, r3
 8003d7c:	4b60      	ldr	r3, [pc, #384]	; (8003f00 <HAL_RCC_OscConfig+0x34c>)
 8003d7e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8003d80:	2513      	movs	r5, #19
 8003d82:	197c      	adds	r4, r7, r5
 8003d84:	2000      	movs	r0, #0
 8003d86:	f7fe fe77 	bl	8002a78 <HAL_InitTick>
 8003d8a:	0003      	movs	r3, r0
 8003d8c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003d8e:	197b      	adds	r3, r7, r5
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d047      	beq.n	8003e26 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8003d96:	2313      	movs	r3, #19
 8003d98:	18fb      	adds	r3, r7, r3
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	e2d0      	b.n	8004340 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d027      	beq.n	8003df4 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003da4:	4b51      	ldr	r3, [pc, #324]	; (8003eec <HAL_RCC_OscConfig+0x338>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2209      	movs	r2, #9
 8003daa:	4393      	bics	r3, r2
 8003dac:	0019      	movs	r1, r3
 8003dae:	4b4f      	ldr	r3, [pc, #316]	; (8003eec <HAL_RCC_OscConfig+0x338>)
 8003db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003db2:	430a      	orrs	r2, r1
 8003db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db6:	f7fe fe95 	bl	8002ae4 <HAL_GetTick>
 8003dba:	0003      	movs	r3, r0
 8003dbc:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003dbe:	e008      	b.n	8003dd2 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dc0:	f7fe fe90 	bl	8002ae4 <HAL_GetTick>
 8003dc4:	0002      	movs	r2, r0
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e2b6      	b.n	8004340 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003dd2:	4b46      	ldr	r3, [pc, #280]	; (8003eec <HAL_RCC_OscConfig+0x338>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2204      	movs	r2, #4
 8003dd8:	4013      	ands	r3, r2
 8003dda:	d0f1      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ddc:	4b43      	ldr	r3, [pc, #268]	; (8003eec <HAL_RCC_OscConfig+0x338>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	4a45      	ldr	r2, [pc, #276]	; (8003ef8 <HAL_RCC_OscConfig+0x344>)
 8003de2:	4013      	ands	r3, r2
 8003de4:	0019      	movs	r1, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	021a      	lsls	r2, r3, #8
 8003dec:	4b3f      	ldr	r3, [pc, #252]	; (8003eec <HAL_RCC_OscConfig+0x338>)
 8003dee:	430a      	orrs	r2, r1
 8003df0:	605a      	str	r2, [r3, #4]
 8003df2:	e018      	b.n	8003e26 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003df4:	4b3d      	ldr	r3, [pc, #244]	; (8003eec <HAL_RCC_OscConfig+0x338>)
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	4b3c      	ldr	r3, [pc, #240]	; (8003eec <HAL_RCC_OscConfig+0x338>)
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	438a      	bics	r2, r1
 8003dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e00:	f7fe fe70 	bl	8002ae4 <HAL_GetTick>
 8003e04:	0003      	movs	r3, r0
 8003e06:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003e08:	e008      	b.n	8003e1c <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e0a:	f7fe fe6b 	bl	8002ae4 <HAL_GetTick>
 8003e0e:	0002      	movs	r2, r0
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d901      	bls.n	8003e1c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e291      	b.n	8004340 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003e1c:	4b33      	ldr	r3, [pc, #204]	; (8003eec <HAL_RCC_OscConfig+0x338>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2204      	movs	r2, #4
 8003e22:	4013      	ands	r3, r2
 8003e24:	d1f1      	bne.n	8003e0a <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2210      	movs	r2, #16
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	d100      	bne.n	8003e32 <HAL_RCC_OscConfig+0x27e>
 8003e30:	e09f      	b.n	8003f72 <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d13f      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e38:	4b2c      	ldr	r3, [pc, #176]	; (8003eec <HAL_RCC_OscConfig+0x338>)
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	2380      	movs	r3, #128	; 0x80
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	4013      	ands	r3, r2
 8003e42:	d005      	beq.n	8003e50 <HAL_RCC_OscConfig+0x29c>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	69db      	ldr	r3, [r3, #28]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d101      	bne.n	8003e50 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e277      	b.n	8004340 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e50:	4b26      	ldr	r3, [pc, #152]	; (8003eec <HAL_RCC_OscConfig+0x338>)
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	4a2b      	ldr	r2, [pc, #172]	; (8003f04 <HAL_RCC_OscConfig+0x350>)
 8003e56:	4013      	ands	r3, r2
 8003e58:	0019      	movs	r1, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e5e:	4b23      	ldr	r3, [pc, #140]	; (8003eec <HAL_RCC_OscConfig+0x338>)
 8003e60:	430a      	orrs	r2, r1
 8003e62:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e64:	4b21      	ldr	r3, [pc, #132]	; (8003eec <HAL_RCC_OscConfig+0x338>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	021b      	lsls	r3, r3, #8
 8003e6a:	0a19      	lsrs	r1, r3, #8
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	061a      	lsls	r2, r3, #24
 8003e72:	4b1e      	ldr	r3, [pc, #120]	; (8003eec <HAL_RCC_OscConfig+0x338>)
 8003e74:	430a      	orrs	r2, r1
 8003e76:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7c:	0b5b      	lsrs	r3, r3, #13
 8003e7e:	3301      	adds	r3, #1
 8003e80:	2280      	movs	r2, #128	; 0x80
 8003e82:	0212      	lsls	r2, r2, #8
 8003e84:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003e86:	4b19      	ldr	r3, [pc, #100]	; (8003eec <HAL_RCC_OscConfig+0x338>)
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	091b      	lsrs	r3, r3, #4
 8003e8c:	210f      	movs	r1, #15
 8003e8e:	400b      	ands	r3, r1
 8003e90:	491a      	ldr	r1, [pc, #104]	; (8003efc <HAL_RCC_OscConfig+0x348>)
 8003e92:	5ccb      	ldrb	r3, [r1, r3]
 8003e94:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003e96:	4b1a      	ldr	r3, [pc, #104]	; (8003f00 <HAL_RCC_OscConfig+0x34c>)
 8003e98:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8003e9a:	2513      	movs	r5, #19
 8003e9c:	197c      	adds	r4, r7, r5
 8003e9e:	2000      	movs	r0, #0
 8003ea0:	f7fe fdea 	bl	8002a78 <HAL_InitTick>
 8003ea4:	0003      	movs	r3, r0
 8003ea6:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8003ea8:	197b      	adds	r3, r7, r5
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d060      	beq.n	8003f72 <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8003eb0:	2313      	movs	r3, #19
 8003eb2:	18fb      	adds	r3, r7, r3
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	e243      	b.n	8004340 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	69db      	ldr	r3, [r3, #28]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d03e      	beq.n	8003f3e <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003ec0:	4b0a      	ldr	r3, [pc, #40]	; (8003eec <HAL_RCC_OscConfig+0x338>)
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	4b09      	ldr	r3, [pc, #36]	; (8003eec <HAL_RCC_OscConfig+0x338>)
 8003ec6:	2180      	movs	r1, #128	; 0x80
 8003ec8:	0049      	lsls	r1, r1, #1
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ece:	f7fe fe09 	bl	8002ae4 <HAL_GetTick>
 8003ed2:	0003      	movs	r3, r0
 8003ed4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003ed6:	e017      	b.n	8003f08 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ed8:	f7fe fe04 	bl	8002ae4 <HAL_GetTick>
 8003edc:	0002      	movs	r2, r0
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d910      	bls.n	8003f08 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e22a      	b.n	8004340 <HAL_RCC_OscConfig+0x78c>
 8003eea:	46c0      	nop			; (mov r8, r8)
 8003eec:	40021000 	.word	0x40021000
 8003ef0:	fffeffff 	.word	0xfffeffff
 8003ef4:	fffbffff 	.word	0xfffbffff
 8003ef8:	ffffe0ff 	.word	0xffffe0ff
 8003efc:	08007664 	.word	0x08007664
 8003f00:	20000054 	.word	0x20000054
 8003f04:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003f08:	4bc6      	ldr	r3, [pc, #792]	; (8004224 <HAL_RCC_OscConfig+0x670>)
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	2380      	movs	r3, #128	; 0x80
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4013      	ands	r3, r2
 8003f12:	d0e1      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f14:	4bc3      	ldr	r3, [pc, #780]	; (8004224 <HAL_RCC_OscConfig+0x670>)
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	4ac3      	ldr	r2, [pc, #780]	; (8004228 <HAL_RCC_OscConfig+0x674>)
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	0019      	movs	r1, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f22:	4bc0      	ldr	r3, [pc, #768]	; (8004224 <HAL_RCC_OscConfig+0x670>)
 8003f24:	430a      	orrs	r2, r1
 8003f26:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f28:	4bbe      	ldr	r3, [pc, #760]	; (8004224 <HAL_RCC_OscConfig+0x670>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	021b      	lsls	r3, r3, #8
 8003f2e:	0a19      	lsrs	r1, r3, #8
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a1b      	ldr	r3, [r3, #32]
 8003f34:	061a      	lsls	r2, r3, #24
 8003f36:	4bbb      	ldr	r3, [pc, #748]	; (8004224 <HAL_RCC_OscConfig+0x670>)
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	605a      	str	r2, [r3, #4]
 8003f3c:	e019      	b.n	8003f72 <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003f3e:	4bb9      	ldr	r3, [pc, #740]	; (8004224 <HAL_RCC_OscConfig+0x670>)
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	4bb8      	ldr	r3, [pc, #736]	; (8004224 <HAL_RCC_OscConfig+0x670>)
 8003f44:	49b9      	ldr	r1, [pc, #740]	; (800422c <HAL_RCC_OscConfig+0x678>)
 8003f46:	400a      	ands	r2, r1
 8003f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f4a:	f7fe fdcb 	bl	8002ae4 <HAL_GetTick>
 8003f4e:	0003      	movs	r3, r0
 8003f50:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f54:	f7fe fdc6 	bl	8002ae4 <HAL_GetTick>
 8003f58:	0002      	movs	r2, r0
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e1ec      	b.n	8004340 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003f66:	4baf      	ldr	r3, [pc, #700]	; (8004224 <HAL_RCC_OscConfig+0x670>)
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	2380      	movs	r3, #128	; 0x80
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4013      	ands	r3, r2
 8003f70:	d1f0      	bne.n	8003f54 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2208      	movs	r2, #8
 8003f78:	4013      	ands	r3, r2
 8003f7a:	d036      	beq.n	8003fea <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	695b      	ldr	r3, [r3, #20]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d019      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f84:	4ba7      	ldr	r3, [pc, #668]	; (8004224 <HAL_RCC_OscConfig+0x670>)
 8003f86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f88:	4ba6      	ldr	r3, [pc, #664]	; (8004224 <HAL_RCC_OscConfig+0x670>)
 8003f8a:	2101      	movs	r1, #1
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f90:	f7fe fda8 	bl	8002ae4 <HAL_GetTick>
 8003f94:	0003      	movs	r3, r0
 8003f96:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003f98:	e008      	b.n	8003fac <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f9a:	f7fe fda3 	bl	8002ae4 <HAL_GetTick>
 8003f9e:	0002      	movs	r2, r0
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d901      	bls.n	8003fac <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e1c9      	b.n	8004340 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003fac:	4b9d      	ldr	r3, [pc, #628]	; (8004224 <HAL_RCC_OscConfig+0x670>)
 8003fae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fb0:	2202      	movs	r2, #2
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	d0f1      	beq.n	8003f9a <HAL_RCC_OscConfig+0x3e6>
 8003fb6:	e018      	b.n	8003fea <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fb8:	4b9a      	ldr	r3, [pc, #616]	; (8004224 <HAL_RCC_OscConfig+0x670>)
 8003fba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003fbc:	4b99      	ldr	r3, [pc, #612]	; (8004224 <HAL_RCC_OscConfig+0x670>)
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	438a      	bics	r2, r1
 8003fc2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fc4:	f7fe fd8e 	bl	8002ae4 <HAL_GetTick>
 8003fc8:	0003      	movs	r3, r0
 8003fca:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003fcc:	e008      	b.n	8003fe0 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fce:	f7fe fd89 	bl	8002ae4 <HAL_GetTick>
 8003fd2:	0002      	movs	r2, r0
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e1af      	b.n	8004340 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003fe0:	4b90      	ldr	r3, [pc, #576]	; (8004224 <HAL_RCC_OscConfig+0x670>)
 8003fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fe4:	2202      	movs	r2, #2
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	d1f1      	bne.n	8003fce <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2204      	movs	r2, #4
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	d100      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x442>
 8003ff4:	e0af      	b.n	8004156 <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ff6:	2323      	movs	r3, #35	; 0x23
 8003ff8:	18fb      	adds	r3, r7, r3
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ffe:	4b89      	ldr	r3, [pc, #548]	; (8004224 <HAL_RCC_OscConfig+0x670>)
 8004000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004002:	2380      	movs	r3, #128	; 0x80
 8004004:	055b      	lsls	r3, r3, #21
 8004006:	4013      	ands	r3, r2
 8004008:	d10a      	bne.n	8004020 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800400a:	4b86      	ldr	r3, [pc, #536]	; (8004224 <HAL_RCC_OscConfig+0x670>)
 800400c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800400e:	4b85      	ldr	r3, [pc, #532]	; (8004224 <HAL_RCC_OscConfig+0x670>)
 8004010:	2180      	movs	r1, #128	; 0x80
 8004012:	0549      	lsls	r1, r1, #21
 8004014:	430a      	orrs	r2, r1
 8004016:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004018:	2323      	movs	r3, #35	; 0x23
 800401a:	18fb      	adds	r3, r7, r3
 800401c:	2201      	movs	r2, #1
 800401e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004020:	4b83      	ldr	r3, [pc, #524]	; (8004230 <HAL_RCC_OscConfig+0x67c>)
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	2380      	movs	r3, #128	; 0x80
 8004026:	005b      	lsls	r3, r3, #1
 8004028:	4013      	ands	r3, r2
 800402a:	d11a      	bne.n	8004062 <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800402c:	4b80      	ldr	r3, [pc, #512]	; (8004230 <HAL_RCC_OscConfig+0x67c>)
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	4b7f      	ldr	r3, [pc, #508]	; (8004230 <HAL_RCC_OscConfig+0x67c>)
 8004032:	2180      	movs	r1, #128	; 0x80
 8004034:	0049      	lsls	r1, r1, #1
 8004036:	430a      	orrs	r2, r1
 8004038:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800403a:	f7fe fd53 	bl	8002ae4 <HAL_GetTick>
 800403e:	0003      	movs	r3, r0
 8004040:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004044:	f7fe fd4e 	bl	8002ae4 <HAL_GetTick>
 8004048:	0002      	movs	r2, r0
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b64      	cmp	r3, #100	; 0x64
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e174      	b.n	8004340 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004056:	4b76      	ldr	r3, [pc, #472]	; (8004230 <HAL_RCC_OscConfig+0x67c>)
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	2380      	movs	r3, #128	; 0x80
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	4013      	ands	r3, r2
 8004060:	d0f0      	beq.n	8004044 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	689a      	ldr	r2, [r3, #8]
 8004066:	2380      	movs	r3, #128	; 0x80
 8004068:	005b      	lsls	r3, r3, #1
 800406a:	429a      	cmp	r2, r3
 800406c:	d107      	bne.n	800407e <HAL_RCC_OscConfig+0x4ca>
 800406e:	4b6d      	ldr	r3, [pc, #436]	; (8004224 <HAL_RCC_OscConfig+0x670>)
 8004070:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004072:	4b6c      	ldr	r3, [pc, #432]	; (8004224 <HAL_RCC_OscConfig+0x670>)
 8004074:	2180      	movs	r1, #128	; 0x80
 8004076:	0049      	lsls	r1, r1, #1
 8004078:	430a      	orrs	r2, r1
 800407a:	651a      	str	r2, [r3, #80]	; 0x50
 800407c:	e031      	b.n	80040e2 <HAL_RCC_OscConfig+0x52e>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10c      	bne.n	80040a0 <HAL_RCC_OscConfig+0x4ec>
 8004086:	4b67      	ldr	r3, [pc, #412]	; (8004224 <HAL_RCC_OscConfig+0x670>)
 8004088:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800408a:	4b66      	ldr	r3, [pc, #408]	; (8004224 <HAL_RCC_OscConfig+0x670>)
 800408c:	4967      	ldr	r1, [pc, #412]	; (800422c <HAL_RCC_OscConfig+0x678>)
 800408e:	400a      	ands	r2, r1
 8004090:	651a      	str	r2, [r3, #80]	; 0x50
 8004092:	4b64      	ldr	r3, [pc, #400]	; (8004224 <HAL_RCC_OscConfig+0x670>)
 8004094:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004096:	4b63      	ldr	r3, [pc, #396]	; (8004224 <HAL_RCC_OscConfig+0x670>)
 8004098:	4966      	ldr	r1, [pc, #408]	; (8004234 <HAL_RCC_OscConfig+0x680>)
 800409a:	400a      	ands	r2, r1
 800409c:	651a      	str	r2, [r3, #80]	; 0x50
 800409e:	e020      	b.n	80040e2 <HAL_RCC_OscConfig+0x52e>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689a      	ldr	r2, [r3, #8]
 80040a4:	23a0      	movs	r3, #160	; 0xa0
 80040a6:	00db      	lsls	r3, r3, #3
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d10e      	bne.n	80040ca <HAL_RCC_OscConfig+0x516>
 80040ac:	4b5d      	ldr	r3, [pc, #372]	; (8004224 <HAL_RCC_OscConfig+0x670>)
 80040ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80040b0:	4b5c      	ldr	r3, [pc, #368]	; (8004224 <HAL_RCC_OscConfig+0x670>)
 80040b2:	2180      	movs	r1, #128	; 0x80
 80040b4:	00c9      	lsls	r1, r1, #3
 80040b6:	430a      	orrs	r2, r1
 80040b8:	651a      	str	r2, [r3, #80]	; 0x50
 80040ba:	4b5a      	ldr	r3, [pc, #360]	; (8004224 <HAL_RCC_OscConfig+0x670>)
 80040bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80040be:	4b59      	ldr	r3, [pc, #356]	; (8004224 <HAL_RCC_OscConfig+0x670>)
 80040c0:	2180      	movs	r1, #128	; 0x80
 80040c2:	0049      	lsls	r1, r1, #1
 80040c4:	430a      	orrs	r2, r1
 80040c6:	651a      	str	r2, [r3, #80]	; 0x50
 80040c8:	e00b      	b.n	80040e2 <HAL_RCC_OscConfig+0x52e>
 80040ca:	4b56      	ldr	r3, [pc, #344]	; (8004224 <HAL_RCC_OscConfig+0x670>)
 80040cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80040ce:	4b55      	ldr	r3, [pc, #340]	; (8004224 <HAL_RCC_OscConfig+0x670>)
 80040d0:	4956      	ldr	r1, [pc, #344]	; (800422c <HAL_RCC_OscConfig+0x678>)
 80040d2:	400a      	ands	r2, r1
 80040d4:	651a      	str	r2, [r3, #80]	; 0x50
 80040d6:	4b53      	ldr	r3, [pc, #332]	; (8004224 <HAL_RCC_OscConfig+0x670>)
 80040d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80040da:	4b52      	ldr	r3, [pc, #328]	; (8004224 <HAL_RCC_OscConfig+0x670>)
 80040dc:	4955      	ldr	r1, [pc, #340]	; (8004234 <HAL_RCC_OscConfig+0x680>)
 80040de:	400a      	ands	r2, r1
 80040e0:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d015      	beq.n	8004116 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ea:	f7fe fcfb 	bl	8002ae4 <HAL_GetTick>
 80040ee:	0003      	movs	r3, r0
 80040f0:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040f2:	e009      	b.n	8004108 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040f4:	f7fe fcf6 	bl	8002ae4 <HAL_GetTick>
 80040f8:	0002      	movs	r2, r0
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	4a4e      	ldr	r2, [pc, #312]	; (8004238 <HAL_RCC_OscConfig+0x684>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d901      	bls.n	8004108 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e11b      	b.n	8004340 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004108:	4b46      	ldr	r3, [pc, #280]	; (8004224 <HAL_RCC_OscConfig+0x670>)
 800410a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800410c:	2380      	movs	r3, #128	; 0x80
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4013      	ands	r3, r2
 8004112:	d0ef      	beq.n	80040f4 <HAL_RCC_OscConfig+0x540>
 8004114:	e014      	b.n	8004140 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004116:	f7fe fce5 	bl	8002ae4 <HAL_GetTick>
 800411a:	0003      	movs	r3, r0
 800411c:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800411e:	e009      	b.n	8004134 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004120:	f7fe fce0 	bl	8002ae4 <HAL_GetTick>
 8004124:	0002      	movs	r2, r0
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	4a43      	ldr	r2, [pc, #268]	; (8004238 <HAL_RCC_OscConfig+0x684>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d901      	bls.n	8004134 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e105      	b.n	8004340 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004134:	4b3b      	ldr	r3, [pc, #236]	; (8004224 <HAL_RCC_OscConfig+0x670>)
 8004136:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004138:	2380      	movs	r3, #128	; 0x80
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	4013      	ands	r3, r2
 800413e:	d1ef      	bne.n	8004120 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004140:	2323      	movs	r3, #35	; 0x23
 8004142:	18fb      	adds	r3, r7, r3
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d105      	bne.n	8004156 <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800414a:	4b36      	ldr	r3, [pc, #216]	; (8004224 <HAL_RCC_OscConfig+0x670>)
 800414c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800414e:	4b35      	ldr	r3, [pc, #212]	; (8004224 <HAL_RCC_OscConfig+0x670>)
 8004150:	493a      	ldr	r1, [pc, #232]	; (800423c <HAL_RCC_OscConfig+0x688>)
 8004152:	400a      	ands	r2, r1
 8004154:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2220      	movs	r2, #32
 800415c:	4013      	ands	r3, r2
 800415e:	d049      	beq.n	80041f4 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d026      	beq.n	80041b6 <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004168:	4b2e      	ldr	r3, [pc, #184]	; (8004224 <HAL_RCC_OscConfig+0x670>)
 800416a:	689a      	ldr	r2, [r3, #8]
 800416c:	4b2d      	ldr	r3, [pc, #180]	; (8004224 <HAL_RCC_OscConfig+0x670>)
 800416e:	2101      	movs	r1, #1
 8004170:	430a      	orrs	r2, r1
 8004172:	609a      	str	r2, [r3, #8]
 8004174:	4b2b      	ldr	r3, [pc, #172]	; (8004224 <HAL_RCC_OscConfig+0x670>)
 8004176:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004178:	4b2a      	ldr	r3, [pc, #168]	; (8004224 <HAL_RCC_OscConfig+0x670>)
 800417a:	2101      	movs	r1, #1
 800417c:	430a      	orrs	r2, r1
 800417e:	635a      	str	r2, [r3, #52]	; 0x34
 8004180:	4b2f      	ldr	r3, [pc, #188]	; (8004240 <HAL_RCC_OscConfig+0x68c>)
 8004182:	6a1a      	ldr	r2, [r3, #32]
 8004184:	4b2e      	ldr	r3, [pc, #184]	; (8004240 <HAL_RCC_OscConfig+0x68c>)
 8004186:	2180      	movs	r1, #128	; 0x80
 8004188:	0189      	lsls	r1, r1, #6
 800418a:	430a      	orrs	r2, r1
 800418c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800418e:	f7fe fca9 	bl	8002ae4 <HAL_GetTick>
 8004192:	0003      	movs	r3, r0
 8004194:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004196:	e008      	b.n	80041aa <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004198:	f7fe fca4 	bl	8002ae4 <HAL_GetTick>
 800419c:	0002      	movs	r2, r0
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e0ca      	b.n	8004340 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80041aa:	4b1e      	ldr	r3, [pc, #120]	; (8004224 <HAL_RCC_OscConfig+0x670>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	2202      	movs	r2, #2
 80041b0:	4013      	ands	r3, r2
 80041b2:	d0f1      	beq.n	8004198 <HAL_RCC_OscConfig+0x5e4>
 80041b4:	e01e      	b.n	80041f4 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80041b6:	4b1b      	ldr	r3, [pc, #108]	; (8004224 <HAL_RCC_OscConfig+0x670>)
 80041b8:	689a      	ldr	r2, [r3, #8]
 80041ba:	4b1a      	ldr	r3, [pc, #104]	; (8004224 <HAL_RCC_OscConfig+0x670>)
 80041bc:	2101      	movs	r1, #1
 80041be:	438a      	bics	r2, r1
 80041c0:	609a      	str	r2, [r3, #8]
 80041c2:	4b1f      	ldr	r3, [pc, #124]	; (8004240 <HAL_RCC_OscConfig+0x68c>)
 80041c4:	6a1a      	ldr	r2, [r3, #32]
 80041c6:	4b1e      	ldr	r3, [pc, #120]	; (8004240 <HAL_RCC_OscConfig+0x68c>)
 80041c8:	491e      	ldr	r1, [pc, #120]	; (8004244 <HAL_RCC_OscConfig+0x690>)
 80041ca:	400a      	ands	r2, r1
 80041cc:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ce:	f7fe fc89 	bl	8002ae4 <HAL_GetTick>
 80041d2:	0003      	movs	r3, r0
 80041d4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041d8:	f7fe fc84 	bl	8002ae4 <HAL_GetTick>
 80041dc:	0002      	movs	r2, r0
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e0aa      	b.n	8004340 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80041ea:	4b0e      	ldr	r3, [pc, #56]	; (8004224 <HAL_RCC_OscConfig+0x670>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	2202      	movs	r2, #2
 80041f0:	4013      	ands	r3, r2
 80041f2:	d1f1      	bne.n	80041d8 <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d100      	bne.n	80041fe <HAL_RCC_OscConfig+0x64a>
 80041fc:	e09f      	b.n	800433e <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	2b0c      	cmp	r3, #12
 8004202:	d100      	bne.n	8004206 <HAL_RCC_OscConfig+0x652>
 8004204:	e078      	b.n	80042f8 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420a:	2b02      	cmp	r3, #2
 800420c:	d159      	bne.n	80042c2 <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800420e:	4b05      	ldr	r3, [pc, #20]	; (8004224 <HAL_RCC_OscConfig+0x670>)
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	4b04      	ldr	r3, [pc, #16]	; (8004224 <HAL_RCC_OscConfig+0x670>)
 8004214:	490c      	ldr	r1, [pc, #48]	; (8004248 <HAL_RCC_OscConfig+0x694>)
 8004216:	400a      	ands	r2, r1
 8004218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800421a:	f7fe fc63 	bl	8002ae4 <HAL_GetTick>
 800421e:	0003      	movs	r3, r0
 8004220:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004222:	e01c      	b.n	800425e <HAL_RCC_OscConfig+0x6aa>
 8004224:	40021000 	.word	0x40021000
 8004228:	ffff1fff 	.word	0xffff1fff
 800422c:	fffffeff 	.word	0xfffffeff
 8004230:	40007000 	.word	0x40007000
 8004234:	fffffbff 	.word	0xfffffbff
 8004238:	00001388 	.word	0x00001388
 800423c:	efffffff 	.word	0xefffffff
 8004240:	40010000 	.word	0x40010000
 8004244:	ffffdfff 	.word	0xffffdfff
 8004248:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800424c:	f7fe fc4a 	bl	8002ae4 <HAL_GetTick>
 8004250:	0002      	movs	r2, r0
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b02      	cmp	r3, #2
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e070      	b.n	8004340 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800425e:	4b3a      	ldr	r3, [pc, #232]	; (8004348 <HAL_RCC_OscConfig+0x794>)
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	2380      	movs	r3, #128	; 0x80
 8004264:	049b      	lsls	r3, r3, #18
 8004266:	4013      	ands	r3, r2
 8004268:	d1f0      	bne.n	800424c <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800426a:	4b37      	ldr	r3, [pc, #220]	; (8004348 <HAL_RCC_OscConfig+0x794>)
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	4a37      	ldr	r2, [pc, #220]	; (800434c <HAL_RCC_OscConfig+0x798>)
 8004270:	4013      	ands	r3, r2
 8004272:	0019      	movs	r1, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427c:	431a      	orrs	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004282:	431a      	orrs	r2, r3
 8004284:	4b30      	ldr	r3, [pc, #192]	; (8004348 <HAL_RCC_OscConfig+0x794>)
 8004286:	430a      	orrs	r2, r1
 8004288:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800428a:	4b2f      	ldr	r3, [pc, #188]	; (8004348 <HAL_RCC_OscConfig+0x794>)
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	4b2e      	ldr	r3, [pc, #184]	; (8004348 <HAL_RCC_OscConfig+0x794>)
 8004290:	2180      	movs	r1, #128	; 0x80
 8004292:	0449      	lsls	r1, r1, #17
 8004294:	430a      	orrs	r2, r1
 8004296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004298:	f7fe fc24 	bl	8002ae4 <HAL_GetTick>
 800429c:	0003      	movs	r3, r0
 800429e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80042a0:	e008      	b.n	80042b4 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042a2:	f7fe fc1f 	bl	8002ae4 <HAL_GetTick>
 80042a6:	0002      	movs	r2, r0
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d901      	bls.n	80042b4 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e045      	b.n	8004340 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80042b4:	4b24      	ldr	r3, [pc, #144]	; (8004348 <HAL_RCC_OscConfig+0x794>)
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	2380      	movs	r3, #128	; 0x80
 80042ba:	049b      	lsls	r3, r3, #18
 80042bc:	4013      	ands	r3, r2
 80042be:	d0f0      	beq.n	80042a2 <HAL_RCC_OscConfig+0x6ee>
 80042c0:	e03d      	b.n	800433e <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042c2:	4b21      	ldr	r3, [pc, #132]	; (8004348 <HAL_RCC_OscConfig+0x794>)
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	4b20      	ldr	r3, [pc, #128]	; (8004348 <HAL_RCC_OscConfig+0x794>)
 80042c8:	4921      	ldr	r1, [pc, #132]	; (8004350 <HAL_RCC_OscConfig+0x79c>)
 80042ca:	400a      	ands	r2, r1
 80042cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ce:	f7fe fc09 	bl	8002ae4 <HAL_GetTick>
 80042d2:	0003      	movs	r3, r0
 80042d4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80042d6:	e008      	b.n	80042ea <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042d8:	f7fe fc04 	bl	8002ae4 <HAL_GetTick>
 80042dc:	0002      	movs	r2, r0
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e02a      	b.n	8004340 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80042ea:	4b17      	ldr	r3, [pc, #92]	; (8004348 <HAL_RCC_OscConfig+0x794>)
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	2380      	movs	r3, #128	; 0x80
 80042f0:	049b      	lsls	r3, r3, #18
 80042f2:	4013      	ands	r3, r2
 80042f4:	d1f0      	bne.n	80042d8 <HAL_RCC_OscConfig+0x724>
 80042f6:	e022      	b.n	800433e <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d101      	bne.n	8004304 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e01d      	b.n	8004340 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004304:	4b10      	ldr	r3, [pc, #64]	; (8004348 <HAL_RCC_OscConfig+0x794>)
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800430a:	69ba      	ldr	r2, [r7, #24]
 800430c:	2380      	movs	r3, #128	; 0x80
 800430e:	025b      	lsls	r3, r3, #9
 8004310:	401a      	ands	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004316:	429a      	cmp	r2, r3
 8004318:	d10f      	bne.n	800433a <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800431a:	69ba      	ldr	r2, [r7, #24]
 800431c:	23f0      	movs	r3, #240	; 0xf0
 800431e:	039b      	lsls	r3, r3, #14
 8004320:	401a      	ands	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004326:	429a      	cmp	r2, r3
 8004328:	d107      	bne.n	800433a <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800432a:	69ba      	ldr	r2, [r7, #24]
 800432c:	23c0      	movs	r3, #192	; 0xc0
 800432e:	041b      	lsls	r3, r3, #16
 8004330:	401a      	ands	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004336:	429a      	cmp	r2, r3
 8004338:	d001      	beq.n	800433e <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e000      	b.n	8004340 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	0018      	movs	r0, r3
 8004342:	46bd      	mov	sp, r7
 8004344:	b00a      	add	sp, #40	; 0x28
 8004346:	bdb0      	pop	{r4, r5, r7, pc}
 8004348:	40021000 	.word	0x40021000
 800434c:	ff02ffff 	.word	0xff02ffff
 8004350:	feffffff 	.word	0xfeffffff

08004354 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004354:	b5b0      	push	{r4, r5, r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d101      	bne.n	8004368 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e10d      	b.n	8004584 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004368:	4b88      	ldr	r3, [pc, #544]	; (800458c <HAL_RCC_ClockConfig+0x238>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2201      	movs	r2, #1
 800436e:	4013      	ands	r3, r2
 8004370:	683a      	ldr	r2, [r7, #0]
 8004372:	429a      	cmp	r2, r3
 8004374:	d911      	bls.n	800439a <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004376:	4b85      	ldr	r3, [pc, #532]	; (800458c <HAL_RCC_ClockConfig+0x238>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2201      	movs	r2, #1
 800437c:	4393      	bics	r3, r2
 800437e:	0019      	movs	r1, r3
 8004380:	4b82      	ldr	r3, [pc, #520]	; (800458c <HAL_RCC_ClockConfig+0x238>)
 8004382:	683a      	ldr	r2, [r7, #0]
 8004384:	430a      	orrs	r2, r1
 8004386:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004388:	4b80      	ldr	r3, [pc, #512]	; (800458c <HAL_RCC_ClockConfig+0x238>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2201      	movs	r2, #1
 800438e:	4013      	ands	r3, r2
 8004390:	683a      	ldr	r2, [r7, #0]
 8004392:	429a      	cmp	r2, r3
 8004394:	d001      	beq.n	800439a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e0f4      	b.n	8004584 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	2202      	movs	r2, #2
 80043a0:	4013      	ands	r3, r2
 80043a2:	d009      	beq.n	80043b8 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043a4:	4b7a      	ldr	r3, [pc, #488]	; (8004590 <HAL_RCC_ClockConfig+0x23c>)
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	22f0      	movs	r2, #240	; 0xf0
 80043aa:	4393      	bics	r3, r2
 80043ac:	0019      	movs	r1, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	689a      	ldr	r2, [r3, #8]
 80043b2:	4b77      	ldr	r3, [pc, #476]	; (8004590 <HAL_RCC_ClockConfig+0x23c>)
 80043b4:	430a      	orrs	r2, r1
 80043b6:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2201      	movs	r2, #1
 80043be:	4013      	ands	r3, r2
 80043c0:	d100      	bne.n	80043c4 <HAL_RCC_ClockConfig+0x70>
 80043c2:	e089      	b.n	80044d8 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d107      	bne.n	80043dc <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043cc:	4b70      	ldr	r3, [pc, #448]	; (8004590 <HAL_RCC_ClockConfig+0x23c>)
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	2380      	movs	r3, #128	; 0x80
 80043d2:	029b      	lsls	r3, r3, #10
 80043d4:	4013      	ands	r3, r2
 80043d6:	d120      	bne.n	800441a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e0d3      	b.n	8004584 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	2b03      	cmp	r3, #3
 80043e2:	d107      	bne.n	80043f4 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80043e4:	4b6a      	ldr	r3, [pc, #424]	; (8004590 <HAL_RCC_ClockConfig+0x23c>)
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	2380      	movs	r3, #128	; 0x80
 80043ea:	049b      	lsls	r3, r3, #18
 80043ec:	4013      	ands	r3, r2
 80043ee:	d114      	bne.n	800441a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e0c7      	b.n	8004584 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d106      	bne.n	800440a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043fc:	4b64      	ldr	r3, [pc, #400]	; (8004590 <HAL_RCC_ClockConfig+0x23c>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2204      	movs	r2, #4
 8004402:	4013      	ands	r3, r2
 8004404:	d109      	bne.n	800441a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e0bc      	b.n	8004584 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800440a:	4b61      	ldr	r3, [pc, #388]	; (8004590 <HAL_RCC_ClockConfig+0x23c>)
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	2380      	movs	r3, #128	; 0x80
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	4013      	ands	r3, r2
 8004414:	d101      	bne.n	800441a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e0b4      	b.n	8004584 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800441a:	4b5d      	ldr	r3, [pc, #372]	; (8004590 <HAL_RCC_ClockConfig+0x23c>)
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	2203      	movs	r2, #3
 8004420:	4393      	bics	r3, r2
 8004422:	0019      	movs	r1, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685a      	ldr	r2, [r3, #4]
 8004428:	4b59      	ldr	r3, [pc, #356]	; (8004590 <HAL_RCC_ClockConfig+0x23c>)
 800442a:	430a      	orrs	r2, r1
 800442c:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800442e:	f7fe fb59 	bl	8002ae4 <HAL_GetTick>
 8004432:	0003      	movs	r3, r0
 8004434:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	2b02      	cmp	r3, #2
 800443c:	d111      	bne.n	8004462 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800443e:	e009      	b.n	8004454 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004440:	f7fe fb50 	bl	8002ae4 <HAL_GetTick>
 8004444:	0002      	movs	r2, r0
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	4a52      	ldr	r2, [pc, #328]	; (8004594 <HAL_RCC_ClockConfig+0x240>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d901      	bls.n	8004454 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e097      	b.n	8004584 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004454:	4b4e      	ldr	r3, [pc, #312]	; (8004590 <HAL_RCC_ClockConfig+0x23c>)
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	220c      	movs	r2, #12
 800445a:	4013      	ands	r3, r2
 800445c:	2b08      	cmp	r3, #8
 800445e:	d1ef      	bne.n	8004440 <HAL_RCC_ClockConfig+0xec>
 8004460:	e03a      	b.n	80044d8 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	2b03      	cmp	r3, #3
 8004468:	d111      	bne.n	800448e <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800446a:	e009      	b.n	8004480 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800446c:	f7fe fb3a 	bl	8002ae4 <HAL_GetTick>
 8004470:	0002      	movs	r2, r0
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	4a47      	ldr	r2, [pc, #284]	; (8004594 <HAL_RCC_ClockConfig+0x240>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d901      	bls.n	8004480 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e081      	b.n	8004584 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004480:	4b43      	ldr	r3, [pc, #268]	; (8004590 <HAL_RCC_ClockConfig+0x23c>)
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	220c      	movs	r2, #12
 8004486:	4013      	ands	r3, r2
 8004488:	2b0c      	cmp	r3, #12
 800448a:	d1ef      	bne.n	800446c <HAL_RCC_ClockConfig+0x118>
 800448c:	e024      	b.n	80044d8 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d11b      	bne.n	80044ce <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004496:	e009      	b.n	80044ac <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004498:	f7fe fb24 	bl	8002ae4 <HAL_GetTick>
 800449c:	0002      	movs	r2, r0
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	4a3c      	ldr	r2, [pc, #240]	; (8004594 <HAL_RCC_ClockConfig+0x240>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d901      	bls.n	80044ac <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e06b      	b.n	8004584 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80044ac:	4b38      	ldr	r3, [pc, #224]	; (8004590 <HAL_RCC_ClockConfig+0x23c>)
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	220c      	movs	r2, #12
 80044b2:	4013      	ands	r3, r2
 80044b4:	2b04      	cmp	r3, #4
 80044b6:	d1ef      	bne.n	8004498 <HAL_RCC_ClockConfig+0x144>
 80044b8:	e00e      	b.n	80044d8 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044ba:	f7fe fb13 	bl	8002ae4 <HAL_GetTick>
 80044be:	0002      	movs	r2, r0
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	4a33      	ldr	r2, [pc, #204]	; (8004594 <HAL_RCC_ClockConfig+0x240>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e05a      	b.n	8004584 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80044ce:	4b30      	ldr	r3, [pc, #192]	; (8004590 <HAL_RCC_ClockConfig+0x23c>)
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	220c      	movs	r2, #12
 80044d4:	4013      	ands	r3, r2
 80044d6:	d1f0      	bne.n	80044ba <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044d8:	4b2c      	ldr	r3, [pc, #176]	; (800458c <HAL_RCC_ClockConfig+0x238>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2201      	movs	r2, #1
 80044de:	4013      	ands	r3, r2
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d211      	bcs.n	800450a <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044e6:	4b29      	ldr	r3, [pc, #164]	; (800458c <HAL_RCC_ClockConfig+0x238>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2201      	movs	r2, #1
 80044ec:	4393      	bics	r3, r2
 80044ee:	0019      	movs	r1, r3
 80044f0:	4b26      	ldr	r3, [pc, #152]	; (800458c <HAL_RCC_ClockConfig+0x238>)
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	430a      	orrs	r2, r1
 80044f6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044f8:	4b24      	ldr	r3, [pc, #144]	; (800458c <HAL_RCC_ClockConfig+0x238>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2201      	movs	r2, #1
 80044fe:	4013      	ands	r3, r2
 8004500:	683a      	ldr	r2, [r7, #0]
 8004502:	429a      	cmp	r2, r3
 8004504:	d001      	beq.n	800450a <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e03c      	b.n	8004584 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2204      	movs	r2, #4
 8004510:	4013      	ands	r3, r2
 8004512:	d009      	beq.n	8004528 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004514:	4b1e      	ldr	r3, [pc, #120]	; (8004590 <HAL_RCC_ClockConfig+0x23c>)
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	4a1f      	ldr	r2, [pc, #124]	; (8004598 <HAL_RCC_ClockConfig+0x244>)
 800451a:	4013      	ands	r3, r2
 800451c:	0019      	movs	r1, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68da      	ldr	r2, [r3, #12]
 8004522:	4b1b      	ldr	r3, [pc, #108]	; (8004590 <HAL_RCC_ClockConfig+0x23c>)
 8004524:	430a      	orrs	r2, r1
 8004526:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2208      	movs	r2, #8
 800452e:	4013      	ands	r3, r2
 8004530:	d00a      	beq.n	8004548 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004532:	4b17      	ldr	r3, [pc, #92]	; (8004590 <HAL_RCC_ClockConfig+0x23c>)
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	4a19      	ldr	r2, [pc, #100]	; (800459c <HAL_RCC_ClockConfig+0x248>)
 8004538:	4013      	ands	r3, r2
 800453a:	0019      	movs	r1, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	00da      	lsls	r2, r3, #3
 8004542:	4b13      	ldr	r3, [pc, #76]	; (8004590 <HAL_RCC_ClockConfig+0x23c>)
 8004544:	430a      	orrs	r2, r1
 8004546:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004548:	f000 f82e 	bl	80045a8 <HAL_RCC_GetSysClockFreq>
 800454c:	0001      	movs	r1, r0
 800454e:	4b10      	ldr	r3, [pc, #64]	; (8004590 <HAL_RCC_ClockConfig+0x23c>)
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	091b      	lsrs	r3, r3, #4
 8004554:	220f      	movs	r2, #15
 8004556:	4013      	ands	r3, r2
 8004558:	4a11      	ldr	r2, [pc, #68]	; (80045a0 <HAL_RCC_ClockConfig+0x24c>)
 800455a:	5cd3      	ldrb	r3, [r2, r3]
 800455c:	000a      	movs	r2, r1
 800455e:	40da      	lsrs	r2, r3
 8004560:	4b10      	ldr	r3, [pc, #64]	; (80045a4 <HAL_RCC_ClockConfig+0x250>)
 8004562:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8004564:	250b      	movs	r5, #11
 8004566:	197c      	adds	r4, r7, r5
 8004568:	2000      	movs	r0, #0
 800456a:	f7fe fa85 	bl	8002a78 <HAL_InitTick>
 800456e:	0003      	movs	r3, r0
 8004570:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8004572:	197b      	adds	r3, r7, r5
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d003      	beq.n	8004582 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 800457a:	230b      	movs	r3, #11
 800457c:	18fb      	adds	r3, r7, r3
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	e000      	b.n	8004584 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	0018      	movs	r0, r3
 8004586:	46bd      	mov	sp, r7
 8004588:	b004      	add	sp, #16
 800458a:	bdb0      	pop	{r4, r5, r7, pc}
 800458c:	40022000 	.word	0x40022000
 8004590:	40021000 	.word	0x40021000
 8004594:	00001388 	.word	0x00001388
 8004598:	fffff8ff 	.word	0xfffff8ff
 800459c:	ffffc7ff 	.word	0xffffc7ff
 80045a0:	08007664 	.word	0x08007664
 80045a4:	20000054 	.word	0x20000054

080045a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b086      	sub	sp, #24
 80045ac:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80045ae:	4b3b      	ldr	r3, [pc, #236]	; (800469c <HAL_RCC_GetSysClockFreq+0xf4>)
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	220c      	movs	r2, #12
 80045b8:	4013      	ands	r3, r2
 80045ba:	2b08      	cmp	r3, #8
 80045bc:	d00e      	beq.n	80045dc <HAL_RCC_GetSysClockFreq+0x34>
 80045be:	2b0c      	cmp	r3, #12
 80045c0:	d00f      	beq.n	80045e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80045c2:	2b04      	cmp	r3, #4
 80045c4:	d157      	bne.n	8004676 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80045c6:	4b35      	ldr	r3, [pc, #212]	; (800469c <HAL_RCC_GetSysClockFreq+0xf4>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2210      	movs	r2, #16
 80045cc:	4013      	ands	r3, r2
 80045ce:	d002      	beq.n	80045d6 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80045d0:	4b33      	ldr	r3, [pc, #204]	; (80046a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80045d2:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80045d4:	e05d      	b.n	8004692 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 80045d6:	4b33      	ldr	r3, [pc, #204]	; (80046a4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80045d8:	613b      	str	r3, [r7, #16]
      break;
 80045da:	e05a      	b.n	8004692 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80045dc:	4b32      	ldr	r3, [pc, #200]	; (80046a8 <HAL_RCC_GetSysClockFreq+0x100>)
 80045de:	613b      	str	r3, [r7, #16]
      break;
 80045e0:	e057      	b.n	8004692 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	0c9b      	lsrs	r3, r3, #18
 80045e6:	220f      	movs	r2, #15
 80045e8:	4013      	ands	r3, r2
 80045ea:	4a30      	ldr	r2, [pc, #192]	; (80046ac <HAL_RCC_GetSysClockFreq+0x104>)
 80045ec:	5cd3      	ldrb	r3, [r2, r3]
 80045ee:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	0d9b      	lsrs	r3, r3, #22
 80045f4:	2203      	movs	r2, #3
 80045f6:	4013      	ands	r3, r2
 80045f8:	3301      	adds	r3, #1
 80045fa:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045fc:	4b27      	ldr	r3, [pc, #156]	; (800469c <HAL_RCC_GetSysClockFreq+0xf4>)
 80045fe:	68da      	ldr	r2, [r3, #12]
 8004600:	2380      	movs	r3, #128	; 0x80
 8004602:	025b      	lsls	r3, r3, #9
 8004604:	4013      	ands	r3, r2
 8004606:	d00f      	beq.n	8004628 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8004608:	68b9      	ldr	r1, [r7, #8]
 800460a:	000a      	movs	r2, r1
 800460c:	0152      	lsls	r2, r2, #5
 800460e:	1a52      	subs	r2, r2, r1
 8004610:	0193      	lsls	r3, r2, #6
 8004612:	1a9b      	subs	r3, r3, r2
 8004614:	00db      	lsls	r3, r3, #3
 8004616:	185b      	adds	r3, r3, r1
 8004618:	025b      	lsls	r3, r3, #9
 800461a:	6879      	ldr	r1, [r7, #4]
 800461c:	0018      	movs	r0, r3
 800461e:	f7fb fd73 	bl	8000108 <__udivsi3>
 8004622:	0003      	movs	r3, r0
 8004624:	617b      	str	r3, [r7, #20]
 8004626:	e023      	b.n	8004670 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004628:	4b1c      	ldr	r3, [pc, #112]	; (800469c <HAL_RCC_GetSysClockFreq+0xf4>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2210      	movs	r2, #16
 800462e:	4013      	ands	r3, r2
 8004630:	d00f      	beq.n	8004652 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8004632:	68b9      	ldr	r1, [r7, #8]
 8004634:	000a      	movs	r2, r1
 8004636:	0152      	lsls	r2, r2, #5
 8004638:	1a52      	subs	r2, r2, r1
 800463a:	0193      	lsls	r3, r2, #6
 800463c:	1a9b      	subs	r3, r3, r2
 800463e:	00db      	lsls	r3, r3, #3
 8004640:	185b      	adds	r3, r3, r1
 8004642:	021b      	lsls	r3, r3, #8
 8004644:	6879      	ldr	r1, [r7, #4]
 8004646:	0018      	movs	r0, r3
 8004648:	f7fb fd5e 	bl	8000108 <__udivsi3>
 800464c:	0003      	movs	r3, r0
 800464e:	617b      	str	r3, [r7, #20]
 8004650:	e00e      	b.n	8004670 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8004652:	68b9      	ldr	r1, [r7, #8]
 8004654:	000a      	movs	r2, r1
 8004656:	0152      	lsls	r2, r2, #5
 8004658:	1a52      	subs	r2, r2, r1
 800465a:	0193      	lsls	r3, r2, #6
 800465c:	1a9b      	subs	r3, r3, r2
 800465e:	00db      	lsls	r3, r3, #3
 8004660:	185b      	adds	r3, r3, r1
 8004662:	029b      	lsls	r3, r3, #10
 8004664:	6879      	ldr	r1, [r7, #4]
 8004666:	0018      	movs	r0, r3
 8004668:	f7fb fd4e 	bl	8000108 <__udivsi3>
 800466c:	0003      	movs	r3, r0
 800466e:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	613b      	str	r3, [r7, #16]
      break;
 8004674:	e00d      	b.n	8004692 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004676:	4b09      	ldr	r3, [pc, #36]	; (800469c <HAL_RCC_GetSysClockFreq+0xf4>)
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	0b5b      	lsrs	r3, r3, #13
 800467c:	2207      	movs	r2, #7
 800467e:	4013      	ands	r3, r2
 8004680:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	3301      	adds	r3, #1
 8004686:	2280      	movs	r2, #128	; 0x80
 8004688:	0212      	lsls	r2, r2, #8
 800468a:	409a      	lsls	r2, r3
 800468c:	0013      	movs	r3, r2
 800468e:	613b      	str	r3, [r7, #16]
      break;
 8004690:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004692:	693b      	ldr	r3, [r7, #16]
}
 8004694:	0018      	movs	r0, r3
 8004696:	46bd      	mov	sp, r7
 8004698:	b006      	add	sp, #24
 800469a:	bd80      	pop	{r7, pc}
 800469c:	40021000 	.word	0x40021000
 80046a0:	003d0900 	.word	0x003d0900
 80046a4:	00f42400 	.word	0x00f42400
 80046a8:	007a1200 	.word	0x007a1200
 80046ac:	08007674 	.word	0x08007674

080046b0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b086      	sub	sp, #24
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2220      	movs	r2, #32
 80046be:	4013      	ands	r3, r2
 80046c0:	d106      	bne.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	2380      	movs	r3, #128	; 0x80
 80046c8:	011b      	lsls	r3, r3, #4
 80046ca:	4013      	ands	r3, r2
 80046cc:	d100      	bne.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x20>
 80046ce:	e0dd      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 80046d0:	2317      	movs	r3, #23
 80046d2:	18fb      	adds	r3, r7, r3
 80046d4:	2200      	movs	r2, #0
 80046d6:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046d8:	4ba4      	ldr	r3, [pc, #656]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80046da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046dc:	2380      	movs	r3, #128	; 0x80
 80046de:	055b      	lsls	r3, r3, #21
 80046e0:	4013      	ands	r3, r2
 80046e2:	d10a      	bne.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046e4:	4ba1      	ldr	r3, [pc, #644]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80046e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046e8:	4ba0      	ldr	r3, [pc, #640]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80046ea:	2180      	movs	r1, #128	; 0x80
 80046ec:	0549      	lsls	r1, r1, #21
 80046ee:	430a      	orrs	r2, r1
 80046f0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80046f2:	2317      	movs	r3, #23
 80046f4:	18fb      	adds	r3, r7, r3
 80046f6:	2201      	movs	r2, #1
 80046f8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046fa:	4b9d      	ldr	r3, [pc, #628]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	2380      	movs	r3, #128	; 0x80
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	4013      	ands	r3, r2
 8004704:	d11a      	bne.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004706:	4b9a      	ldr	r3, [pc, #616]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	4b99      	ldr	r3, [pc, #612]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800470c:	2180      	movs	r1, #128	; 0x80
 800470e:	0049      	lsls	r1, r1, #1
 8004710:	430a      	orrs	r2, r1
 8004712:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004714:	f7fe f9e6 	bl	8002ae4 <HAL_GetTick>
 8004718:	0003      	movs	r3, r0
 800471a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800471c:	e008      	b.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800471e:	f7fe f9e1 	bl	8002ae4 <HAL_GetTick>
 8004722:	0002      	movs	r2, r0
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	2b64      	cmp	r3, #100	; 0x64
 800472a:	d901      	bls.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e118      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004730:	4b8f      	ldr	r3, [pc, #572]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	2380      	movs	r3, #128	; 0x80
 8004736:	005b      	lsls	r3, r3, #1
 8004738:	4013      	ands	r3, r2
 800473a:	d0f0      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800473c:	4b8b      	ldr	r3, [pc, #556]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	23c0      	movs	r3, #192	; 0xc0
 8004742:	039b      	lsls	r3, r3, #14
 8004744:	4013      	ands	r3, r2
 8004746:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	23c0      	movs	r3, #192	; 0xc0
 800474e:	039b      	lsls	r3, r3, #14
 8004750:	4013      	ands	r3, r2
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	429a      	cmp	r2, r3
 8004756:	d107      	bne.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689a      	ldr	r2, [r3, #8]
 800475c:	23c0      	movs	r3, #192	; 0xc0
 800475e:	039b      	lsls	r3, r3, #14
 8004760:	4013      	ands	r3, r2
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	429a      	cmp	r2, r3
 8004766:	d013      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685a      	ldr	r2, [r3, #4]
 800476c:	23c0      	movs	r3, #192	; 0xc0
 800476e:	029b      	lsls	r3, r3, #10
 8004770:	401a      	ands	r2, r3
 8004772:	23c0      	movs	r3, #192	; 0xc0
 8004774:	029b      	lsls	r3, r3, #10
 8004776:	429a      	cmp	r2, r3
 8004778:	d10a      	bne.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800477a:	4b7c      	ldr	r3, [pc, #496]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	2380      	movs	r3, #128	; 0x80
 8004780:	029b      	lsls	r3, r3, #10
 8004782:	401a      	ands	r2, r3
 8004784:	2380      	movs	r3, #128	; 0x80
 8004786:	029b      	lsls	r3, r3, #10
 8004788:	429a      	cmp	r2, r3
 800478a:	d101      	bne.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e0e8      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004790:	4b76      	ldr	r3, [pc, #472]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004792:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004794:	23c0      	movs	r3, #192	; 0xc0
 8004796:	029b      	lsls	r3, r3, #10
 8004798:	4013      	ands	r3, r2
 800479a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d049      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	23c0      	movs	r3, #192	; 0xc0
 80047a8:	029b      	lsls	r3, r3, #10
 80047aa:	4013      	ands	r3, r2
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d004      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2220      	movs	r2, #32
 80047b8:	4013      	ands	r3, r2
 80047ba:	d10d      	bne.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	689a      	ldr	r2, [r3, #8]
 80047c0:	23c0      	movs	r3, #192	; 0xc0
 80047c2:	029b      	lsls	r3, r3, #10
 80047c4:	4013      	ands	r3, r2
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d034      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	2380      	movs	r3, #128	; 0x80
 80047d2:	011b      	lsls	r3, r3, #4
 80047d4:	4013      	ands	r3, r2
 80047d6:	d02e      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80047d8:	4b64      	ldr	r3, [pc, #400]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80047da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047dc:	4a65      	ldr	r2, [pc, #404]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80047de:	4013      	ands	r3, r2
 80047e0:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047e2:	4b62      	ldr	r3, [pc, #392]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80047e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80047e6:	4b61      	ldr	r3, [pc, #388]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80047e8:	2180      	movs	r1, #128	; 0x80
 80047ea:	0309      	lsls	r1, r1, #12
 80047ec:	430a      	orrs	r2, r1
 80047ee:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047f0:	4b5e      	ldr	r3, [pc, #376]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80047f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80047f4:	4b5d      	ldr	r3, [pc, #372]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80047f6:	4960      	ldr	r1, [pc, #384]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80047f8:	400a      	ands	r2, r1
 80047fa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80047fc:	4b5b      	ldr	r3, [pc, #364]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	2380      	movs	r3, #128	; 0x80
 8004806:	005b      	lsls	r3, r3, #1
 8004808:	4013      	ands	r3, r2
 800480a:	d014      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800480c:	f7fe f96a 	bl	8002ae4 <HAL_GetTick>
 8004810:	0003      	movs	r3, r0
 8004812:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004814:	e009      	b.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004816:	f7fe f965 	bl	8002ae4 <HAL_GetTick>
 800481a:	0002      	movs	r2, r0
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	4a56      	ldr	r2, [pc, #344]	; (800497c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d901      	bls.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e09b      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800482a:	4b50      	ldr	r3, [pc, #320]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800482c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800482e:	2380      	movs	r3, #128	; 0x80
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	4013      	ands	r3, r2
 8004834:	d0ef      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685a      	ldr	r2, [r3, #4]
 800483a:	23c0      	movs	r3, #192	; 0xc0
 800483c:	029b      	lsls	r3, r3, #10
 800483e:	401a      	ands	r2, r3
 8004840:	23c0      	movs	r3, #192	; 0xc0
 8004842:	029b      	lsls	r3, r3, #10
 8004844:	429a      	cmp	r2, r3
 8004846:	d10c      	bne.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8004848:	4b48      	ldr	r3, [pc, #288]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a4c      	ldr	r2, [pc, #304]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800484e:	4013      	ands	r3, r2
 8004850:	0019      	movs	r1, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685a      	ldr	r2, [r3, #4]
 8004856:	23c0      	movs	r3, #192	; 0xc0
 8004858:	039b      	lsls	r3, r3, #14
 800485a:	401a      	ands	r2, r3
 800485c:	4b43      	ldr	r3, [pc, #268]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800485e:	430a      	orrs	r2, r1
 8004860:	601a      	str	r2, [r3, #0]
 8004862:	4b42      	ldr	r3, [pc, #264]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004864:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685a      	ldr	r2, [r3, #4]
 800486a:	23c0      	movs	r3, #192	; 0xc0
 800486c:	029b      	lsls	r3, r3, #10
 800486e:	401a      	ands	r2, r3
 8004870:	4b3e      	ldr	r3, [pc, #248]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004872:	430a      	orrs	r2, r1
 8004874:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004876:	2317      	movs	r3, #23
 8004878:	18fb      	adds	r3, r7, r3
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d105      	bne.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004880:	4b3a      	ldr	r3, [pc, #232]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004882:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004884:	4b39      	ldr	r3, [pc, #228]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004886:	493f      	ldr	r1, [pc, #252]	; (8004984 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004888:	400a      	ands	r2, r1
 800488a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2201      	movs	r2, #1
 8004892:	4013      	ands	r3, r2
 8004894:	d009      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004896:	4b35      	ldr	r3, [pc, #212]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800489a:	2203      	movs	r2, #3
 800489c:	4393      	bics	r3, r2
 800489e:	0019      	movs	r1, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	68da      	ldr	r2, [r3, #12]
 80048a4:	4b31      	ldr	r3, [pc, #196]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80048a6:	430a      	orrs	r2, r1
 80048a8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2202      	movs	r2, #2
 80048b0:	4013      	ands	r3, r2
 80048b2:	d009      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048b4:	4b2d      	ldr	r3, [pc, #180]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80048b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048b8:	220c      	movs	r2, #12
 80048ba:	4393      	bics	r3, r2
 80048bc:	0019      	movs	r1, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	691a      	ldr	r2, [r3, #16]
 80048c2:	4b2a      	ldr	r3, [pc, #168]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80048c4:	430a      	orrs	r2, r1
 80048c6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2204      	movs	r2, #4
 80048ce:	4013      	ands	r3, r2
 80048d0:	d009      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048d2:	4b26      	ldr	r3, [pc, #152]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80048d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048d6:	4a2c      	ldr	r2, [pc, #176]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80048d8:	4013      	ands	r3, r2
 80048da:	0019      	movs	r1, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	695a      	ldr	r2, [r3, #20]
 80048e0:	4b22      	ldr	r3, [pc, #136]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80048e2:	430a      	orrs	r2, r1
 80048e4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2208      	movs	r2, #8
 80048ec:	4013      	ands	r3, r2
 80048ee:	d009      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048f0:	4b1e      	ldr	r3, [pc, #120]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80048f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048f4:	4a25      	ldr	r2, [pc, #148]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80048f6:	4013      	ands	r3, r2
 80048f8:	0019      	movs	r1, r3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	699a      	ldr	r2, [r3, #24]
 80048fe:	4b1b      	ldr	r3, [pc, #108]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004900:	430a      	orrs	r2, r1
 8004902:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	2380      	movs	r3, #128	; 0x80
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	4013      	ands	r3, r2
 800490e:	d009      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004910:	4b16      	ldr	r3, [pc, #88]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004914:	4a17      	ldr	r2, [pc, #92]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004916:	4013      	ands	r3, r2
 8004918:	0019      	movs	r1, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	69da      	ldr	r2, [r3, #28]
 800491e:	4b13      	ldr	r3, [pc, #76]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004920:	430a      	orrs	r2, r1
 8004922:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2240      	movs	r2, #64	; 0x40
 800492a:	4013      	ands	r3, r2
 800492c:	d009      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800492e:	4b0f      	ldr	r3, [pc, #60]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004932:	4a17      	ldr	r2, [pc, #92]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004934:	4013      	ands	r3, r2
 8004936:	0019      	movs	r1, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800493c:	4b0b      	ldr	r3, [pc, #44]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800493e:	430a      	orrs	r2, r1
 8004940:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2280      	movs	r2, #128	; 0x80
 8004948:	4013      	ands	r3, r2
 800494a:	d009      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800494c:	4b07      	ldr	r3, [pc, #28]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800494e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004950:	4a10      	ldr	r2, [pc, #64]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004952:	4013      	ands	r3, r2
 8004954:	0019      	movs	r1, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a1a      	ldr	r2, [r3, #32]
 800495a:	4b04      	ldr	r3, [pc, #16]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800495c:	430a      	orrs	r2, r1
 800495e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	0018      	movs	r0, r3
 8004964:	46bd      	mov	sp, r7
 8004966:	b006      	add	sp, #24
 8004968:	bd80      	pop	{r7, pc}
 800496a:	46c0      	nop			; (mov r8, r8)
 800496c:	40021000 	.word	0x40021000
 8004970:	40007000 	.word	0x40007000
 8004974:	fffcffff 	.word	0xfffcffff
 8004978:	fff7ffff 	.word	0xfff7ffff
 800497c:	00001388 	.word	0x00001388
 8004980:	ffcfffff 	.word	0xffcfffff
 8004984:	efffffff 	.word	0xefffffff
 8004988:	fffff3ff 	.word	0xfffff3ff
 800498c:	ffffcfff 	.word	0xffffcfff
 8004990:	fbffffff 	.word	0xfbffffff
 8004994:	fff3ffff 	.word	0xfff3ffff

08004998 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d101      	bne.n	80049aa <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e08e      	b.n	8004ac8 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2221      	movs	r2, #33	; 0x21
 80049ae:	5c9b      	ldrb	r3, [r3, r2]
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d107      	bne.n	80049c6 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2220      	movs	r2, #32
 80049ba:	2100      	movs	r1, #0
 80049bc:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	0018      	movs	r0, r3
 80049c2:	f7fd fe75 	bl	80026b0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2221      	movs	r2, #33	; 0x21
 80049ca:	2102      	movs	r1, #2
 80049cc:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	22ca      	movs	r2, #202	; 0xca
 80049d4:	625a      	str	r2, [r3, #36]	; 0x24
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2253      	movs	r2, #83	; 0x53
 80049dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	0018      	movs	r0, r3
 80049e2:	f000 fd2c 	bl	800543e <RTC_EnterInitMode>
 80049e6:	1e03      	subs	r3, r0, #0
 80049e8:	d009      	beq.n	80049fe <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	22ff      	movs	r2, #255	; 0xff
 80049f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2221      	movs	r2, #33	; 0x21
 80049f6:	2104      	movs	r1, #4
 80049f8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e064      	b.n	8004ac8 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689a      	ldr	r2, [r3, #8]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4931      	ldr	r1, [pc, #196]	; (8004ad0 <HAL_RTC_Init+0x138>)
 8004a0a:	400a      	ands	r2, r1
 8004a0c:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	6899      	ldr	r1, [r3, #8]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685a      	ldr	r2, [r3, #4]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	691b      	ldr	r3, [r3, #16]
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	699b      	ldr	r3, [r3, #24]
 8004a22:	431a      	orrs	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	68d2      	ldr	r2, [r2, #12]
 8004a34:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	6919      	ldr	r1, [r3, #16]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	041a      	lsls	r2, r3, #16
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	430a      	orrs	r2, r1
 8004a48:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68da      	ldr	r2, [r3, #12]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2180      	movs	r1, #128	; 0x80
 8004a56:	438a      	bics	r2, r1
 8004a58:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2103      	movs	r1, #3
 8004a66:	438a      	bics	r2, r1
 8004a68:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	69da      	ldr	r2, [r3, #28]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	431a      	orrs	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	2220      	movs	r2, #32
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	d113      	bne.n	8004ab6 <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	0018      	movs	r0, r3
 8004a92:	f000 fcad 	bl	80053f0 <HAL_RTC_WaitForSynchro>
 8004a96:	1e03      	subs	r3, r0, #0
 8004a98:	d00d      	beq.n	8004ab6 <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	22ff      	movs	r2, #255	; 0xff
 8004aa0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2221      	movs	r2, #33	; 0x21
 8004aa6:	2104      	movs	r1, #4
 8004aa8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2220      	movs	r2, #32
 8004aae:	2100      	movs	r1, #0
 8004ab0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e008      	b.n	8004ac8 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	22ff      	movs	r2, #255	; 0xff
 8004abc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2221      	movs	r2, #33	; 0x21
 8004ac2:	2101      	movs	r1, #1
 8004ac4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
  }
}
 8004ac8:	0018      	movs	r0, r3
 8004aca:	46bd      	mov	sp, r7
 8004acc:	b002      	add	sp, #8
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	ff8fffbf 	.word	0xff8fffbf

08004ad4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004ad4:	b590      	push	{r4, r7, lr}
 8004ad6:	b087      	sub	sp, #28
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2220      	movs	r2, #32
 8004ae4:	5c9b      	ldrb	r3, [r3, r2]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d101      	bne.n	8004aee <HAL_RTC_SetTime+0x1a>
 8004aea:	2302      	movs	r3, #2
 8004aec:	e0ad      	b.n	8004c4a <HAL_RTC_SetTime+0x176>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2220      	movs	r2, #32
 8004af2:	2101      	movs	r1, #1
 8004af4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2221      	movs	r2, #33	; 0x21
 8004afa:	2102      	movs	r1, #2
 8004afc:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d125      	bne.n	8004b50 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	2240      	movs	r2, #64	; 0x40
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	d102      	bne.n	8004b16 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	2200      	movs	r2, #0
 8004b14:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	0018      	movs	r0, r3
 8004b1c:	f000 fcb9 	bl	8005492 <RTC_ByteToBcd2>
 8004b20:	0003      	movs	r3, r0
 8004b22:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	785b      	ldrb	r3, [r3, #1]
 8004b28:	0018      	movs	r0, r3
 8004b2a:	f000 fcb2 	bl	8005492 <RTC_ByteToBcd2>
 8004b2e:	0003      	movs	r3, r0
 8004b30:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004b32:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	789b      	ldrb	r3, [r3, #2]
 8004b38:	0018      	movs	r0, r3
 8004b3a:	f000 fcaa 	bl	8005492 <RTC_ByteToBcd2>
 8004b3e:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004b40:	0022      	movs	r2, r4
 8004b42:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	78db      	ldrb	r3, [r3, #3]
 8004b48:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	617b      	str	r3, [r7, #20]
 8004b4e:	e017      	b.n	8004b80 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	2240      	movs	r2, #64	; 0x40
 8004b58:	4013      	ands	r3, r2
 8004b5a:	d102      	bne.n	8004b62 <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	785b      	ldrb	r3, [r3, #1]
 8004b6c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004b6e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004b74:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	78db      	ldrb	r3, [r3, #3]
 8004b7a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	22ca      	movs	r2, #202	; 0xca
 8004b86:	625a      	str	r2, [r3, #36]	; 0x24
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2253      	movs	r2, #83	; 0x53
 8004b8e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	0018      	movs	r0, r3
 8004b94:	f000 fc53 	bl	800543e <RTC_EnterInitMode>
 8004b98:	1e03      	subs	r3, r0, #0
 8004b9a:	d00d      	beq.n	8004bb8 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	22ff      	movs	r2, #255	; 0xff
 8004ba2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2221      	movs	r2, #33	; 0x21
 8004ba8:	2104      	movs	r1, #4
 8004baa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2220      	movs	r2, #32
 8004bb0:	2100      	movs	r1, #0
 8004bb2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e048      	b.n	8004c4a <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	4925      	ldr	r1, [pc, #148]	; (8004c54 <HAL_RTC_SetTime+0x180>)
 8004bc0:	400a      	ands	r2, r1
 8004bc2:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	689a      	ldr	r2, [r3, #8]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4922      	ldr	r1, [pc, #136]	; (8004c58 <HAL_RTC_SetTime+0x184>)
 8004bd0:	400a      	ands	r2, r1
 8004bd2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	6899      	ldr	r1, [r3, #8]
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	68da      	ldr	r2, [r3, #12]
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	431a      	orrs	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	430a      	orrs	r2, r1
 8004bea:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68da      	ldr	r2, [r3, #12]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2180      	movs	r1, #128	; 0x80
 8004bf8:	438a      	bics	r2, r1
 8004bfa:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	2220      	movs	r2, #32
 8004c04:	4013      	ands	r3, r2
 8004c06:	d113      	bne.n	8004c30 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	0018      	movs	r0, r3
 8004c0c:	f000 fbf0 	bl	80053f0 <HAL_RTC_WaitForSynchro>
 8004c10:	1e03      	subs	r3, r0, #0
 8004c12:	d00d      	beq.n	8004c30 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	22ff      	movs	r2, #255	; 0xff
 8004c1a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2221      	movs	r2, #33	; 0x21
 8004c20:	2104      	movs	r1, #4
 8004c22:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2220      	movs	r2, #32
 8004c28:	2100      	movs	r1, #0
 8004c2a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e00c      	b.n	8004c4a <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	22ff      	movs	r2, #255	; 0xff
 8004c36:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2221      	movs	r2, #33	; 0x21
 8004c3c:	2101      	movs	r1, #1
 8004c3e:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2220      	movs	r2, #32
 8004c44:	2100      	movs	r1, #0
 8004c46:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004c48:	2300      	movs	r3, #0
  }
}
 8004c4a:	0018      	movs	r0, r3
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	b007      	add	sp, #28
 8004c50:	bd90      	pop	{r4, r7, pc}
 8004c52:	46c0      	nop			; (mov r8, r8)
 8004c54:	007f7f7f 	.word	0x007f7f7f
 8004c58:	fffbffff 	.word	0xfffbffff

08004c5c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	045b      	lsls	r3, r3, #17
 8004c7a:	0c5a      	lsrs	r2, r3, #17
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a22      	ldr	r2, [pc, #136]	; (8004d10 <HAL_RTC_GetTime+0xb4>)
 8004c88:	4013      	ands	r3, r2
 8004c8a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	0c1b      	lsrs	r3, r3, #16
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	223f      	movs	r2, #63	; 0x3f
 8004c94:	4013      	ands	r3, r2
 8004c96:	b2da      	uxtb	r2, r3
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	0a1b      	lsrs	r3, r3, #8
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	227f      	movs	r2, #127	; 0x7f
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	b2da      	uxtb	r2, r3
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	227f      	movs	r2, #127	; 0x7f
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	b2da      	uxtb	r2, r3
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	0c1b      	lsrs	r3, r3, #16
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	2240      	movs	r2, #64	; 0x40
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	b2da      	uxtb	r2, r3
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d11a      	bne.n	8004d06 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	0018      	movs	r0, r3
 8004cd6:	f000 fc05 	bl	80054e4 <RTC_Bcd2ToByte>
 8004cda:	0003      	movs	r3, r0
 8004cdc:	001a      	movs	r2, r3
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	785b      	ldrb	r3, [r3, #1]
 8004ce6:	0018      	movs	r0, r3
 8004ce8:	f000 fbfc 	bl	80054e4 <RTC_Bcd2ToByte>
 8004cec:	0003      	movs	r3, r0
 8004cee:	001a      	movs	r2, r3
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	789b      	ldrb	r3, [r3, #2]
 8004cf8:	0018      	movs	r0, r3
 8004cfa:	f000 fbf3 	bl	80054e4 <RTC_Bcd2ToByte>
 8004cfe:	0003      	movs	r3, r0
 8004d00:	001a      	movs	r2, r3
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	0018      	movs	r0, r3
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	b006      	add	sp, #24
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	007f7f7f 	.word	0x007f7f7f

08004d14 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004d14:	b590      	push	{r4, r7, lr}
 8004d16:	b087      	sub	sp, #28
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2220      	movs	r2, #32
 8004d24:	5c9b      	ldrb	r3, [r3, r2]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d101      	bne.n	8004d2e <HAL_RTC_SetDate+0x1a>
 8004d2a:	2302      	movs	r3, #2
 8004d2c:	e099      	b.n	8004e62 <HAL_RTC_SetDate+0x14e>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2220      	movs	r2, #32
 8004d32:	2101      	movs	r1, #1
 8004d34:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2221      	movs	r2, #33	; 0x21
 8004d3a:	2102      	movs	r1, #2
 8004d3c:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d10e      	bne.n	8004d62 <HAL_RTC_SetDate+0x4e>
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	785b      	ldrb	r3, [r3, #1]
 8004d48:	001a      	movs	r2, r3
 8004d4a:	2310      	movs	r3, #16
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	d008      	beq.n	8004d62 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	785b      	ldrb	r3, [r3, #1]
 8004d54:	2210      	movs	r2, #16
 8004d56:	4393      	bics	r3, r2
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	330a      	adds	r3, #10
 8004d5c:	b2da      	uxtb	r2, r3
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d11c      	bne.n	8004da2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	78db      	ldrb	r3, [r3, #3]
 8004d6c:	0018      	movs	r0, r3
 8004d6e:	f000 fb90 	bl	8005492 <RTC_ByteToBcd2>
 8004d72:	0003      	movs	r3, r0
 8004d74:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	785b      	ldrb	r3, [r3, #1]
 8004d7a:	0018      	movs	r0, r3
 8004d7c:	f000 fb89 	bl	8005492 <RTC_ByteToBcd2>
 8004d80:	0003      	movs	r3, r0
 8004d82:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004d84:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	789b      	ldrb	r3, [r3, #2]
 8004d8a:	0018      	movs	r0, r3
 8004d8c:	f000 fb81 	bl	8005492 <RTC_ByteToBcd2>
 8004d90:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004d92:	0022      	movs	r2, r4
 8004d94:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	617b      	str	r3, [r7, #20]
 8004da0:	e00e      	b.n	8004dc0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	78db      	ldrb	r3, [r3, #3]
 8004da6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	785b      	ldrb	r3, [r3, #1]
 8004dac:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004dae:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8004db0:	68ba      	ldr	r2, [r7, #8]
 8004db2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8004db4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	22ca      	movs	r2, #202	; 0xca
 8004dc6:	625a      	str	r2, [r3, #36]	; 0x24
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2253      	movs	r2, #83	; 0x53
 8004dce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	0018      	movs	r0, r3
 8004dd4:	f000 fb33 	bl	800543e <RTC_EnterInitMode>
 8004dd8:	1e03      	subs	r3, r0, #0
 8004dda:	d00d      	beq.n	8004df8 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	22ff      	movs	r2, #255	; 0xff
 8004de2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2221      	movs	r2, #33	; 0x21
 8004de8:	2104      	movs	r1, #4
 8004dea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2220      	movs	r2, #32
 8004df0:	2100      	movs	r1, #0
 8004df2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e034      	b.n	8004e62 <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	491b      	ldr	r1, [pc, #108]	; (8004e6c <HAL_RTC_SetDate+0x158>)
 8004e00:	400a      	ands	r2, r1
 8004e02:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68da      	ldr	r2, [r3, #12]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2180      	movs	r1, #128	; 0x80
 8004e10:	438a      	bics	r2, r1
 8004e12:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	d113      	bne.n	8004e48 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	0018      	movs	r0, r3
 8004e24:	f000 fae4 	bl	80053f0 <HAL_RTC_WaitForSynchro>
 8004e28:	1e03      	subs	r3, r0, #0
 8004e2a:	d00d      	beq.n	8004e48 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	22ff      	movs	r2, #255	; 0xff
 8004e32:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2221      	movs	r2, #33	; 0x21
 8004e38:	2104      	movs	r1, #4
 8004e3a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2220      	movs	r2, #32
 8004e40:	2100      	movs	r1, #0
 8004e42:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e00c      	b.n	8004e62 <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	22ff      	movs	r2, #255	; 0xff
 8004e4e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2221      	movs	r2, #33	; 0x21
 8004e54:	2101      	movs	r1, #1
 8004e56:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2220      	movs	r2, #32
 8004e5c:	2100      	movs	r1, #0
 8004e5e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004e60:	2300      	movs	r3, #0
  }
}
 8004e62:	0018      	movs	r0, r3
 8004e64:	46bd      	mov	sp, r7
 8004e66:	b007      	add	sp, #28
 8004e68:	bd90      	pop	{r4, r7, pc}
 8004e6a:	46c0      	nop			; (mov r8, r8)
 8004e6c:	00ffff3f 	.word	0x00ffff3f

08004e70 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b086      	sub	sp, #24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	4a21      	ldr	r2, [pc, #132]	; (8004f08 <HAL_RTC_GetDate+0x98>)
 8004e84:	4013      	ands	r3, r2
 8004e86:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	0c1b      	lsrs	r3, r3, #16
 8004e8c:	b2da      	uxtb	r2, r3
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	0a1b      	lsrs	r3, r3, #8
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	221f      	movs	r2, #31
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	b2da      	uxtb	r2, r3
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	223f      	movs	r2, #63	; 0x3f
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	b2da      	uxtb	r2, r3
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	0b5b      	lsrs	r3, r3, #13
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2207      	movs	r2, #7
 8004eb8:	4013      	ands	r3, r2
 8004eba:	b2da      	uxtb	r2, r3
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d11a      	bne.n	8004efc <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	78db      	ldrb	r3, [r3, #3]
 8004eca:	0018      	movs	r0, r3
 8004ecc:	f000 fb0a 	bl	80054e4 <RTC_Bcd2ToByte>
 8004ed0:	0003      	movs	r3, r0
 8004ed2:	001a      	movs	r2, r3
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	785b      	ldrb	r3, [r3, #1]
 8004edc:	0018      	movs	r0, r3
 8004ede:	f000 fb01 	bl	80054e4 <RTC_Bcd2ToByte>
 8004ee2:	0003      	movs	r3, r0
 8004ee4:	001a      	movs	r2, r3
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	789b      	ldrb	r3, [r3, #2]
 8004eee:	0018      	movs	r0, r3
 8004ef0:	f000 faf8 	bl	80054e4 <RTC_Bcd2ToByte>
 8004ef4:	0003      	movs	r3, r0
 8004ef6:	001a      	movs	r2, r3
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	0018      	movs	r0, r3
 8004f00:	46bd      	mov	sp, r7
 8004f02:	b006      	add	sp, #24
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	46c0      	nop			; (mov r8, r8)
 8004f08:	00ffff3f 	.word	0x00ffff3f

08004f0c <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004f0c:	b590      	push	{r4, r7, lr}
 8004f0e:	b089      	sub	sp, #36	; 0x24
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2220      	movs	r2, #32
 8004f1c:	5c9b      	ldrb	r3, [r3, r2]
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d101      	bne.n	8004f26 <HAL_RTC_SetAlarm+0x1a>
 8004f22:	2302      	movs	r3, #2
 8004f24:	e10c      	b.n	8005140 <HAL_RTC_SetAlarm+0x234>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2220      	movs	r2, #32
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2221      	movs	r2, #33	; 0x21
 8004f32:	2102      	movs	r1, #2
 8004f34:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d136      	bne.n	8004faa <HAL_RTC_SetAlarm+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	2240      	movs	r2, #64	; 0x40
 8004f44:	4013      	ands	r3, r2
 8004f46:	d102      	bne.n	8004f4e <HAL_RTC_SetAlarm+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	0018      	movs	r0, r3
 8004f54:	f000 fa9d 	bl	8005492 <RTC_ByteToBcd2>
 8004f58:	0003      	movs	r3, r0
 8004f5a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	785b      	ldrb	r3, [r3, #1]
 8004f60:	0018      	movs	r0, r3
 8004f62:	f000 fa96 	bl	8005492 <RTC_ByteToBcd2>
 8004f66:	0003      	movs	r3, r0
 8004f68:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004f6a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	789b      	ldrb	r3, [r3, #2]
 8004f70:	0018      	movs	r0, r3
 8004f72:	f000 fa8e 	bl	8005492 <RTC_ByteToBcd2>
 8004f76:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004f78:	0022      	movs	r2, r4
 8004f7a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	78db      	ldrb	r3, [r3, #3]
 8004f80:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8004f82:	431a      	orrs	r2, r3
 8004f84:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	2220      	movs	r2, #32
 8004f8a:	5c9b      	ldrb	r3, [r3, r2]
 8004f8c:	0018      	movs	r0, r3
 8004f8e:	f000 fa80 	bl	8005492 <RTC_ByteToBcd2>
 8004f92:	0003      	movs	r3, r0
 8004f94:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004f96:	0022      	movs	r2, r4
 8004f98:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004f9e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	61fb      	str	r3, [r7, #28]
 8004fa8:	e022      	b.n	8004ff0 <HAL_RTC_SetAlarm+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	2240      	movs	r2, #64	; 0x40
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	d102      	bne.n	8004fbc <HAL_RTC_SetAlarm+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	785b      	ldrb	r3, [r3, #1]
 8004fc6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004fc8:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8004fca:	68ba      	ldr	r2, [r7, #8]
 8004fcc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8004fce:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	78db      	ldrb	r3, [r3, #3]
 8004fd4:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8004fd6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	2120      	movs	r1, #32
 8004fdc:	5c5b      	ldrb	r3, [r3, r1]
 8004fde:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8004fe0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8004fe6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8004fec:	4313      	orrs	r3, r2
 8004fee:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	685a      	ldr	r2, [r3, #4]
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	22ca      	movs	r2, #202	; 0xca
 8005002:	625a      	str	r2, [r3, #36]	; 0x24
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2253      	movs	r2, #83	; 0x53
 800500a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005010:	2380      	movs	r3, #128	; 0x80
 8005012:	005b      	lsls	r3, r3, #1
 8005014:	429a      	cmp	r2, r3
 8005016:	d143      	bne.n	80050a0 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	689a      	ldr	r2, [r3, #8]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4949      	ldr	r1, [pc, #292]	; (8005148 <HAL_RTC_SetAlarm+0x23c>)
 8005024:	400a      	ands	r2, r1
 8005026:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	689a      	ldr	r2, [r3, #8]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4946      	ldr	r1, [pc, #280]	; (800514c <HAL_RTC_SetAlarm+0x240>)
 8005034:	400a      	ands	r2, r1
 8005036:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8005038:	f7fd fd54 	bl	8002ae4 <HAL_GetTick>
 800503c:	0003      	movs	r3, r0
 800503e:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005040:	e016      	b.n	8005070 <HAL_RTC_SetAlarm+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005042:	f7fd fd4f 	bl	8002ae4 <HAL_GetTick>
 8005046:	0002      	movs	r2, r0
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	1ad2      	subs	r2, r2, r3
 800504c:	23fa      	movs	r3, #250	; 0xfa
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	429a      	cmp	r2, r3
 8005052:	d90d      	bls.n	8005070 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	22ff      	movs	r2, #255	; 0xff
 800505a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2221      	movs	r2, #33	; 0x21
 8005060:	2103      	movs	r1, #3
 8005062:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2220      	movs	r2, #32
 8005068:	2100      	movs	r1, #0
 800506a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e067      	b.n	8005140 <HAL_RTC_SetAlarm+0x234>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	2201      	movs	r2, #1
 8005078:	4013      	ands	r3, r2
 800507a:	d0e2      	beq.n	8005042 <HAL_RTC_SetAlarm+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	69fa      	ldr	r2, [r7, #28]
 8005082:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	689a      	ldr	r2, [r3, #8]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2180      	movs	r1, #128	; 0x80
 8005098:	0049      	lsls	r1, r1, #1
 800509a:	430a      	orrs	r2, r1
 800509c:	609a      	str	r2, [r3, #8]
 800509e:	e042      	b.n	8005126 <HAL_RTC_SetAlarm+0x21a>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	689a      	ldr	r2, [r3, #8]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4929      	ldr	r1, [pc, #164]	; (8005150 <HAL_RTC_SetAlarm+0x244>)
 80050ac:	400a      	ands	r2, r1
 80050ae:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	689a      	ldr	r2, [r3, #8]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4926      	ldr	r1, [pc, #152]	; (8005154 <HAL_RTC_SetAlarm+0x248>)
 80050bc:	400a      	ands	r2, r1
 80050be:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 80050c0:	f7fd fd10 	bl	8002ae4 <HAL_GetTick>
 80050c4:	0003      	movs	r3, r0
 80050c6:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80050c8:	e016      	b.n	80050f8 <HAL_RTC_SetAlarm+0x1ec>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80050ca:	f7fd fd0b 	bl	8002ae4 <HAL_GetTick>
 80050ce:	0002      	movs	r2, r0
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	1ad2      	subs	r2, r2, r3
 80050d4:	23fa      	movs	r3, #250	; 0xfa
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	429a      	cmp	r2, r3
 80050da:	d90d      	bls.n	80050f8 <HAL_RTC_SetAlarm+0x1ec>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	22ff      	movs	r2, #255	; 0xff
 80050e2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2221      	movs	r2, #33	; 0x21
 80050e8:	2103      	movs	r1, #3
 80050ea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2220      	movs	r2, #32
 80050f0:	2100      	movs	r1, #0
 80050f2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e023      	b.n	8005140 <HAL_RTC_SetAlarm+0x234>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	2202      	movs	r2, #2
 8005100:	4013      	ands	r3, r2
 8005102:	d0e2      	beq.n	80050ca <HAL_RTC_SetAlarm+0x1be>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	69fa      	ldr	r2, [r7, #28]
 800510a:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	69ba      	ldr	r2, [r7, #24]
 8005112:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	689a      	ldr	r2, [r3, #8]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2180      	movs	r1, #128	; 0x80
 8005120:	0089      	lsls	r1, r1, #2
 8005122:	430a      	orrs	r2, r1
 8005124:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	22ff      	movs	r2, #255	; 0xff
 800512c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2221      	movs	r2, #33	; 0x21
 8005132:	2101      	movs	r1, #1
 8005134:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2220      	movs	r2, #32
 800513a:	2100      	movs	r1, #0
 800513c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	0018      	movs	r0, r3
 8005142:	46bd      	mov	sp, r7
 8005144:	b009      	add	sp, #36	; 0x24
 8005146:	bd90      	pop	{r4, r7, pc}
 8005148:	fffffeff 	.word	0xfffffeff
 800514c:	ffffefff 	.word	0xffffefff
 8005150:	fffffdff 	.word	0xfffffdff
 8005154:	ffffdfff 	.word	0xffffdfff

08005158 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005158:	b590      	push	{r4, r7, lr}
 800515a:	b089      	sub	sp, #36	; 0x24
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2220      	movs	r2, #32
 8005168:	5c9b      	ldrb	r3, [r3, r2]
 800516a:	2b01      	cmp	r3, #1
 800516c:	d101      	bne.n	8005172 <HAL_RTC_SetAlarm_IT+0x1a>
 800516e:	2302      	movs	r3, #2
 8005170:	e130      	b.n	80053d4 <HAL_RTC_SetAlarm_IT+0x27c>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2220      	movs	r2, #32
 8005176:	2101      	movs	r1, #1
 8005178:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2221      	movs	r2, #33	; 0x21
 800517e:	2102      	movs	r1, #2
 8005180:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d136      	bne.n	80051f6 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	2240      	movs	r2, #64	; 0x40
 8005190:	4013      	ands	r3, r2
 8005192:	d102      	bne.n	800519a <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	2200      	movs	r2, #0
 8005198:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	0018      	movs	r0, r3
 80051a0:	f000 f977 	bl	8005492 <RTC_ByteToBcd2>
 80051a4:	0003      	movs	r3, r0
 80051a6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	785b      	ldrb	r3, [r3, #1]
 80051ac:	0018      	movs	r0, r3
 80051ae:	f000 f970 	bl	8005492 <RTC_ByteToBcd2>
 80051b2:	0003      	movs	r3, r0
 80051b4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80051b6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	789b      	ldrb	r3, [r3, #2]
 80051bc:	0018      	movs	r0, r3
 80051be:	f000 f968 	bl	8005492 <RTC_ByteToBcd2>
 80051c2:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80051c4:	0022      	movs	r2, r4
 80051c6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	78db      	ldrb	r3, [r3, #3]
 80051cc:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80051ce:	431a      	orrs	r2, r3
 80051d0:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	2220      	movs	r2, #32
 80051d6:	5c9b      	ldrb	r3, [r3, r2]
 80051d8:	0018      	movs	r0, r3
 80051da:	f000 f95a 	bl	8005492 <RTC_ByteToBcd2>
 80051de:	0003      	movs	r3, r0
 80051e0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80051e2:	0022      	movs	r2, r4
 80051e4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80051ea:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80051f0:	4313      	orrs	r3, r2
 80051f2:	61fb      	str	r3, [r7, #28]
 80051f4:	e022      	b.n	800523c <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	2240      	movs	r2, #64	; 0x40
 80051fe:	4013      	ands	r3, r2
 8005200:	d102      	bne.n	8005208 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	2200      	movs	r2, #0
 8005206:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	785b      	ldrb	r3, [r3, #1]
 8005212:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005214:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005216:	68ba      	ldr	r2, [r7, #8]
 8005218:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800521a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	78db      	ldrb	r3, [r3, #3]
 8005220:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005222:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	2120      	movs	r1, #32
 8005228:	5c5b      	ldrb	r3, [r3, r1]
 800522a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800522c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005232:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005238:	4313      	orrs	r3, r2
 800523a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	685a      	ldr	r2, [r3, #4]
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	699b      	ldr	r3, [r3, #24]
 8005244:	4313      	orrs	r3, r2
 8005246:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	22ca      	movs	r2, #202	; 0xca
 800524e:	625a      	str	r2, [r3, #36]	; 0x24
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2253      	movs	r2, #83	; 0x53
 8005256:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800525c:	2380      	movs	r3, #128	; 0x80
 800525e:	005b      	lsls	r3, r3, #1
 8005260:	429a      	cmp	r2, r3
 8005262:	d14e      	bne.n	8005302 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	689a      	ldr	r2, [r3, #8]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	495b      	ldr	r1, [pc, #364]	; (80053dc <HAL_RTC_SetAlarm_IT+0x284>)
 8005270:	400a      	ands	r2, r1
 8005272:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	22ff      	movs	r2, #255	; 0xff
 800527c:	401a      	ands	r2, r3
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4957      	ldr	r1, [pc, #348]	; (80053e0 <HAL_RTC_SetAlarm_IT+0x288>)
 8005284:	430a      	orrs	r2, r1
 8005286:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005288:	f7fd fc2c 	bl	8002ae4 <HAL_GetTick>
 800528c:	0003      	movs	r3, r0
 800528e:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005290:	e016      	b.n	80052c0 <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005292:	f7fd fc27 	bl	8002ae4 <HAL_GetTick>
 8005296:	0002      	movs	r2, r0
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	1ad2      	subs	r2, r2, r3
 800529c:	23fa      	movs	r3, #250	; 0xfa
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d90d      	bls.n	80052c0 <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	22ff      	movs	r2, #255	; 0xff
 80052aa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2221      	movs	r2, #33	; 0x21
 80052b0:	2103      	movs	r1, #3
 80052b2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2220      	movs	r2, #32
 80052b8:	2100      	movs	r1, #0
 80052ba:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e089      	b.n	80053d4 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	2201      	movs	r2, #1
 80052c8:	4013      	ands	r3, r2
 80052ca:	d0e2      	beq.n	8005292 <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	69fa      	ldr	r2, [r7, #28]
 80052d2:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	69ba      	ldr	r2, [r7, #24]
 80052da:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689a      	ldr	r2, [r3, #8]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2180      	movs	r1, #128	; 0x80
 80052e8:	0049      	lsls	r1, r1, #1
 80052ea:	430a      	orrs	r2, r1
 80052ec:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	689a      	ldr	r2, [r3, #8]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2180      	movs	r1, #128	; 0x80
 80052fa:	0149      	lsls	r1, r1, #5
 80052fc:	430a      	orrs	r2, r1
 80052fe:	609a      	str	r2, [r3, #8]
 8005300:	e04d      	b.n	800539e <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	689a      	ldr	r2, [r3, #8]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4935      	ldr	r1, [pc, #212]	; (80053e4 <HAL_RTC_SetAlarm_IT+0x28c>)
 800530e:	400a      	ands	r2, r1
 8005310:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	22ff      	movs	r2, #255	; 0xff
 800531a:	401a      	ands	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4931      	ldr	r1, [pc, #196]	; (80053e8 <HAL_RTC_SetAlarm_IT+0x290>)
 8005322:	430a      	orrs	r2, r1
 8005324:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005326:	f7fd fbdd 	bl	8002ae4 <HAL_GetTick>
 800532a:	0003      	movs	r3, r0
 800532c:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800532e:	e016      	b.n	800535e <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005330:	f7fd fbd8 	bl	8002ae4 <HAL_GetTick>
 8005334:	0002      	movs	r2, r0
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	1ad2      	subs	r2, r2, r3
 800533a:	23fa      	movs	r3, #250	; 0xfa
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	429a      	cmp	r2, r3
 8005340:	d90d      	bls.n	800535e <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	22ff      	movs	r2, #255	; 0xff
 8005348:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2221      	movs	r2, #33	; 0x21
 800534e:	2103      	movs	r1, #3
 8005350:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2220      	movs	r2, #32
 8005356:	2100      	movs	r1, #0
 8005358:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e03a      	b.n	80053d4 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	2202      	movs	r2, #2
 8005366:	4013      	ands	r3, r2
 8005368:	d0e2      	beq.n	8005330 <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	69fa      	ldr	r2, [r7, #28]
 8005370:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	69ba      	ldr	r2, [r7, #24]
 8005378:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	689a      	ldr	r2, [r3, #8]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2180      	movs	r1, #128	; 0x80
 8005386:	0089      	lsls	r1, r1, #2
 8005388:	430a      	orrs	r2, r1
 800538a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	689a      	ldr	r2, [r3, #8]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2180      	movs	r1, #128	; 0x80
 8005398:	0189      	lsls	r1, r1, #6
 800539a:	430a      	orrs	r2, r1
 800539c:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800539e:	4b13      	ldr	r3, [pc, #76]	; (80053ec <HAL_RTC_SetAlarm_IT+0x294>)
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	4b12      	ldr	r3, [pc, #72]	; (80053ec <HAL_RTC_SetAlarm_IT+0x294>)
 80053a4:	2180      	movs	r1, #128	; 0x80
 80053a6:	0289      	lsls	r1, r1, #10
 80053a8:	430a      	orrs	r2, r1
 80053aa:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80053ac:	4b0f      	ldr	r3, [pc, #60]	; (80053ec <HAL_RTC_SetAlarm_IT+0x294>)
 80053ae:	689a      	ldr	r2, [r3, #8]
 80053b0:	4b0e      	ldr	r3, [pc, #56]	; (80053ec <HAL_RTC_SetAlarm_IT+0x294>)
 80053b2:	2180      	movs	r1, #128	; 0x80
 80053b4:	0289      	lsls	r1, r1, #10
 80053b6:	430a      	orrs	r2, r1
 80053b8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	22ff      	movs	r2, #255	; 0xff
 80053c0:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2221      	movs	r2, #33	; 0x21
 80053c6:	2101      	movs	r1, #1
 80053c8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2220      	movs	r2, #32
 80053ce:	2100      	movs	r1, #0
 80053d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	0018      	movs	r0, r3
 80053d6:	46bd      	mov	sp, r7
 80053d8:	b009      	add	sp, #36	; 0x24
 80053da:	bd90      	pop	{r4, r7, pc}
 80053dc:	fffffeff 	.word	0xfffffeff
 80053e0:	fffffe7f 	.word	0xfffffe7f
 80053e4:	fffffdff 	.word	0xfffffdff
 80053e8:	fffffd7f 	.word	0xfffffd7f
 80053ec:	40010400 	.word	0x40010400

080053f0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68da      	ldr	r2, [r3, #12]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	21a0      	movs	r1, #160	; 0xa0
 8005404:	438a      	bics	r2, r1
 8005406:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005408:	f7fd fb6c 	bl	8002ae4 <HAL_GetTick>
 800540c:	0003      	movs	r3, r0
 800540e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005410:	e00a      	b.n	8005428 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005412:	f7fd fb67 	bl	8002ae4 <HAL_GetTick>
 8005416:	0002      	movs	r2, r0
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	1ad2      	subs	r2, r2, r3
 800541c:	23fa      	movs	r3, #250	; 0xfa
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	429a      	cmp	r2, r3
 8005422:	d901      	bls.n	8005428 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e006      	b.n	8005436 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	2220      	movs	r2, #32
 8005430:	4013      	ands	r3, r2
 8005432:	d0ee      	beq.n	8005412 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	0018      	movs	r0, r3
 8005438:	46bd      	mov	sp, r7
 800543a:	b004      	add	sp, #16
 800543c:	bd80      	pop	{r7, pc}

0800543e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800543e:	b580      	push	{r7, lr}
 8005440:	b084      	sub	sp, #16
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	2240      	movs	r2, #64	; 0x40
 800544e:	4013      	ands	r3, r2
 8005450:	d11a      	bne.n	8005488 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2201      	movs	r2, #1
 8005458:	4252      	negs	r2, r2
 800545a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800545c:	f7fd fb42 	bl	8002ae4 <HAL_GetTick>
 8005460:	0003      	movs	r3, r0
 8005462:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005464:	e00a      	b.n	800547c <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005466:	f7fd fb3d 	bl	8002ae4 <HAL_GetTick>
 800546a:	0002      	movs	r2, r0
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	1ad2      	subs	r2, r2, r3
 8005470:	23fa      	movs	r3, #250	; 0xfa
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	429a      	cmp	r2, r3
 8005476:	d901      	bls.n	800547c <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e006      	b.n	800548a <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	2240      	movs	r2, #64	; 0x40
 8005484:	4013      	ands	r3, r2
 8005486:	d0ee      	beq.n	8005466 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	0018      	movs	r0, r3
 800548c:	46bd      	mov	sp, r7
 800548e:	b004      	add	sp, #16
 8005490:	bd80      	pop	{r7, pc}

08005492 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005492:	b580      	push	{r7, lr}
 8005494:	b084      	sub	sp, #16
 8005496:	af00      	add	r7, sp, #0
 8005498:	0002      	movs	r2, r0
 800549a:	1dfb      	adds	r3, r7, #7
 800549c:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800549e:	2300      	movs	r3, #0
 80054a0:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80054a2:	230b      	movs	r3, #11
 80054a4:	18fb      	adds	r3, r7, r3
 80054a6:	1dfa      	adds	r2, r7, #7
 80054a8:	7812      	ldrb	r2, [r2, #0]
 80054aa:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 80054ac:	e008      	b.n	80054c0 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	3301      	adds	r3, #1
 80054b2:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80054b4:	220b      	movs	r2, #11
 80054b6:	18bb      	adds	r3, r7, r2
 80054b8:	18ba      	adds	r2, r7, r2
 80054ba:	7812      	ldrb	r2, [r2, #0]
 80054bc:	3a0a      	subs	r2, #10
 80054be:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 80054c0:	230b      	movs	r3, #11
 80054c2:	18fb      	adds	r3, r7, r3
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	2b09      	cmp	r3, #9
 80054c8:	d8f1      	bhi.n	80054ae <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	011b      	lsls	r3, r3, #4
 80054d0:	b2da      	uxtb	r2, r3
 80054d2:	230b      	movs	r3, #11
 80054d4:	18fb      	adds	r3, r7, r3
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	4313      	orrs	r3, r2
 80054da:	b2db      	uxtb	r3, r3
}
 80054dc:	0018      	movs	r0, r3
 80054de:	46bd      	mov	sp, r7
 80054e0:	b004      	add	sp, #16
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	0002      	movs	r2, r0
 80054ec:	1dfb      	adds	r3, r7, #7
 80054ee:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80054f0:	1dfb      	adds	r3, r7, #7
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	091b      	lsrs	r3, r3, #4
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	001a      	movs	r2, r3
 80054fa:	0013      	movs	r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	189b      	adds	r3, r3, r2
 8005500:	005b      	lsls	r3, r3, #1
 8005502:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	b2da      	uxtb	r2, r3
 8005508:	1dfb      	adds	r3, r7, #7
 800550a:	781b      	ldrb	r3, [r3, #0]
 800550c:	210f      	movs	r1, #15
 800550e:	400b      	ands	r3, r1
 8005510:	b2db      	uxtb	r3, r3
 8005512:	18d3      	adds	r3, r2, r3
 8005514:	b2db      	uxtb	r3, r3
}
 8005516:	0018      	movs	r0, r3
 8005518:	46bd      	mov	sp, r7
 800551a:	b004      	add	sp, #16
 800551c:	bd80      	pop	{r7, pc}
	...

08005520 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d101      	bne.n	8005532 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e059      	b.n	80055e6 <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2251      	movs	r2, #81	; 0x51
 800553c:	5c9b      	ldrb	r3, [r3, r2]
 800553e:	b2db      	uxtb	r3, r3
 8005540:	2b00      	cmp	r3, #0
 8005542:	d107      	bne.n	8005554 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2250      	movs	r2, #80	; 0x50
 8005548:	2100      	movs	r1, #0
 800554a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	0018      	movs	r0, r3
 8005550:	f7fd f8c6 	bl	80026e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2251      	movs	r2, #81	; 0x51
 8005558:	2102      	movs	r1, #2
 800555a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2140      	movs	r1, #64	; 0x40
 8005568:	438a      	bics	r2, r1
 800556a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	685a      	ldr	r2, [r3, #4]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	431a      	orrs	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	431a      	orrs	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	691b      	ldr	r3, [r3, #16]
 8005580:	431a      	orrs	r2, r3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	431a      	orrs	r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6999      	ldr	r1, [r3, #24]
 800558c:	2380      	movs	r3, #128	; 0x80
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	400b      	ands	r3, r1
 8005592:	431a      	orrs	r2, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	69db      	ldr	r3, [r3, #28]
 8005598:	431a      	orrs	r2, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	431a      	orrs	r2, r3
 80055a0:	0011      	movs	r1, r2
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	430a      	orrs	r2, r1
 80055ac:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	0c1b      	lsrs	r3, r3, #16
 80055b4:	2204      	movs	r2, #4
 80055b6:	4013      	ands	r3, r2
 80055b8:	0019      	movs	r1, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	430a      	orrs	r2, r1
 80055c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	69da      	ldr	r2, [r3, #28]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4907      	ldr	r1, [pc, #28]	; (80055f0 <HAL_SPI_Init+0xd0>)
 80055d2:	400a      	ands	r2, r1
 80055d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2251      	movs	r2, #81	; 0x51
 80055e0:	2101      	movs	r1, #1
 80055e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	0018      	movs	r0, r3
 80055e8:	46bd      	mov	sp, r7
 80055ea:	b002      	add	sp, #8
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	46c0      	nop			; (mov r8, r8)
 80055f0:	fffff7ff 	.word	0xfffff7ff

080055f4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b088      	sub	sp, #32
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	603b      	str	r3, [r7, #0]
 8005600:	1dbb      	adds	r3, r7, #6
 8005602:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005604:	231f      	movs	r3, #31
 8005606:	18fb      	adds	r3, r7, r3
 8005608:	2200      	movs	r2, #0
 800560a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2250      	movs	r2, #80	; 0x50
 8005610:	5c9b      	ldrb	r3, [r3, r2]
 8005612:	2b01      	cmp	r3, #1
 8005614:	d101      	bne.n	800561a <HAL_SPI_Transmit+0x26>
 8005616:	2302      	movs	r3, #2
 8005618:	e136      	b.n	8005888 <HAL_SPI_Transmit+0x294>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2250      	movs	r2, #80	; 0x50
 800561e:	2101      	movs	r1, #1
 8005620:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005622:	f7fd fa5f 	bl	8002ae4 <HAL_GetTick>
 8005626:	0003      	movs	r3, r0
 8005628:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800562a:	2316      	movs	r3, #22
 800562c:	18fb      	adds	r3, r7, r3
 800562e:	1dba      	adds	r2, r7, #6
 8005630:	8812      	ldrh	r2, [r2, #0]
 8005632:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2251      	movs	r2, #81	; 0x51
 8005638:	5c9b      	ldrb	r3, [r3, r2]
 800563a:	b2db      	uxtb	r3, r3
 800563c:	2b01      	cmp	r3, #1
 800563e:	d004      	beq.n	800564a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005640:	231f      	movs	r3, #31
 8005642:	18fb      	adds	r3, r7, r3
 8005644:	2202      	movs	r2, #2
 8005646:	701a      	strb	r2, [r3, #0]
    goto error;
 8005648:	e113      	b.n	8005872 <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d003      	beq.n	8005658 <HAL_SPI_Transmit+0x64>
 8005650:	1dbb      	adds	r3, r7, #6
 8005652:	881b      	ldrh	r3, [r3, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d104      	bne.n	8005662 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005658:	231f      	movs	r3, #31
 800565a:	18fb      	adds	r3, r7, r3
 800565c:	2201      	movs	r2, #1
 800565e:	701a      	strb	r2, [r3, #0]
    goto error;
 8005660:	e107      	b.n	8005872 <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2251      	movs	r2, #81	; 0x51
 8005666:	2103      	movs	r1, #3
 8005668:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	68ba      	ldr	r2, [r7, #8]
 8005674:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	1dba      	adds	r2, r7, #6
 800567a:	8812      	ldrh	r2, [r2, #0]
 800567c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	1dba      	adds	r2, r7, #6
 8005682:	8812      	ldrh	r2, [r2, #0]
 8005684:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2200      	movs	r2, #0
 8005690:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	689a      	ldr	r2, [r3, #8]
 80056a8:	2380      	movs	r3, #128	; 0x80
 80056aa:	021b      	lsls	r3, r3, #8
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d108      	bne.n	80056c2 <HAL_SPI_Transmit+0xce>
  {
    SPI_1LINE_TX(hspi);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2180      	movs	r1, #128	; 0x80
 80056bc:	01c9      	lsls	r1, r1, #7
 80056be:	430a      	orrs	r2, r1
 80056c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2240      	movs	r2, #64	; 0x40
 80056ca:	4013      	ands	r3, r2
 80056cc:	2b40      	cmp	r3, #64	; 0x40
 80056ce:	d007      	beq.n	80056e0 <HAL_SPI_Transmit+0xec>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2140      	movs	r1, #64	; 0x40
 80056dc:	430a      	orrs	r2, r1
 80056de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	68da      	ldr	r2, [r3, #12]
 80056e4:	2380      	movs	r3, #128	; 0x80
 80056e6:	011b      	lsls	r3, r3, #4
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d14e      	bne.n	800578a <HAL_SPI_Transmit+0x196>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d004      	beq.n	80056fe <HAL_SPI_Transmit+0x10a>
 80056f4:	2316      	movs	r3, #22
 80056f6:	18fb      	adds	r3, r7, r3
 80056f8:	881b      	ldrh	r3, [r3, #0]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d13f      	bne.n	800577e <HAL_SPI_Transmit+0x18a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005702:	881a      	ldrh	r2, [r3, #0]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800570e:	1c9a      	adds	r2, r3, #2
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005718:	b29b      	uxth	r3, r3
 800571a:	3b01      	subs	r3, #1
 800571c:	b29a      	uxth	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005722:	e02c      	b.n	800577e <HAL_SPI_Transmit+0x18a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	2202      	movs	r2, #2
 800572c:	4013      	ands	r3, r2
 800572e:	2b02      	cmp	r3, #2
 8005730:	d112      	bne.n	8005758 <HAL_SPI_Transmit+0x164>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005736:	881a      	ldrh	r2, [r3, #0]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005742:	1c9a      	adds	r2, r3, #2
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800574c:	b29b      	uxth	r3, r3
 800574e:	3b01      	subs	r3, #1
 8005750:	b29a      	uxth	r2, r3
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	86da      	strh	r2, [r3, #54]	; 0x36
 8005756:	e012      	b.n	800577e <HAL_SPI_Transmit+0x18a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005758:	f7fd f9c4 	bl	8002ae4 <HAL_GetTick>
 800575c:	0002      	movs	r2, r0
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	683a      	ldr	r2, [r7, #0]
 8005764:	429a      	cmp	r2, r3
 8005766:	d802      	bhi.n	800576e <HAL_SPI_Transmit+0x17a>
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	3301      	adds	r3, #1
 800576c:	d102      	bne.n	8005774 <HAL_SPI_Transmit+0x180>
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d104      	bne.n	800577e <HAL_SPI_Transmit+0x18a>
        {
          errorcode = HAL_TIMEOUT;
 8005774:	231f      	movs	r3, #31
 8005776:	18fb      	adds	r3, r7, r3
 8005778:	2203      	movs	r2, #3
 800577a:	701a      	strb	r2, [r3, #0]
          goto error;
 800577c:	e079      	b.n	8005872 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005782:	b29b      	uxth	r3, r3
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1cd      	bne.n	8005724 <HAL_SPI_Transmit+0x130>
 8005788:	e04f      	b.n	800582a <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d004      	beq.n	800579c <HAL_SPI_Transmit+0x1a8>
 8005792:	2316      	movs	r3, #22
 8005794:	18fb      	adds	r3, r7, r3
 8005796:	881b      	ldrh	r3, [r3, #0]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d141      	bne.n	8005820 <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	330c      	adds	r3, #12
 80057a6:	7812      	ldrb	r2, [r2, #0]
 80057a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ae:	1c5a      	adds	r2, r3, #1
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	3b01      	subs	r3, #1
 80057bc:	b29a      	uxth	r2, r3
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80057c2:	e02d      	b.n	8005820 <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	2202      	movs	r2, #2
 80057cc:	4013      	ands	r3, r2
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d113      	bne.n	80057fa <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	330c      	adds	r3, #12
 80057dc:	7812      	ldrb	r2, [r2, #0]
 80057de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e4:	1c5a      	adds	r2, r3, #1
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	3b01      	subs	r3, #1
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	86da      	strh	r2, [r3, #54]	; 0x36
 80057f8:	e012      	b.n	8005820 <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057fa:	f7fd f973 	bl	8002ae4 <HAL_GetTick>
 80057fe:	0002      	movs	r2, r0
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	683a      	ldr	r2, [r7, #0]
 8005806:	429a      	cmp	r2, r3
 8005808:	d802      	bhi.n	8005810 <HAL_SPI_Transmit+0x21c>
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	3301      	adds	r3, #1
 800580e:	d102      	bne.n	8005816 <HAL_SPI_Transmit+0x222>
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d104      	bne.n	8005820 <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 8005816:	231f      	movs	r3, #31
 8005818:	18fb      	adds	r3, r7, r3
 800581a:	2203      	movs	r2, #3
 800581c:	701a      	strb	r2, [r3, #0]
          goto error;
 800581e:	e028      	b.n	8005872 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005824:	b29b      	uxth	r3, r3
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1cc      	bne.n	80057c4 <HAL_SPI_Transmit+0x1d0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800582a:	69ba      	ldr	r2, [r7, #24]
 800582c:	6839      	ldr	r1, [r7, #0]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	0018      	movs	r0, r3
 8005832:	f000 fa99 	bl	8005d68 <SPI_EndRxTxTransaction>
 8005836:	1e03      	subs	r3, r0, #0
 8005838:	d002      	beq.n	8005840 <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2220      	movs	r2, #32
 800583e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d10a      	bne.n	800585e <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005848:	2300      	movs	r3, #0
 800584a:	613b      	str	r3, [r7, #16]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	613b      	str	r3, [r7, #16]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	613b      	str	r3, [r7, #16]
 800585c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005862:	2b00      	cmp	r3, #0
 8005864:	d004      	beq.n	8005870 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 8005866:	231f      	movs	r3, #31
 8005868:	18fb      	adds	r3, r7, r3
 800586a:	2201      	movs	r2, #1
 800586c:	701a      	strb	r2, [r3, #0]
 800586e:	e000      	b.n	8005872 <HAL_SPI_Transmit+0x27e>
  }

error:
 8005870:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2251      	movs	r2, #81	; 0x51
 8005876:	2101      	movs	r1, #1
 8005878:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2250      	movs	r2, #80	; 0x50
 800587e:	2100      	movs	r1, #0
 8005880:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005882:	231f      	movs	r3, #31
 8005884:	18fb      	adds	r3, r7, r3
 8005886:	781b      	ldrb	r3, [r3, #0]
}
 8005888:	0018      	movs	r0, r3
 800588a:	46bd      	mov	sp, r7
 800588c:	b008      	add	sp, #32
 800588e:	bd80      	pop	{r7, pc}

08005890 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b086      	sub	sp, #24
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	1dbb      	adds	r3, r7, #6
 800589c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800589e:	2317      	movs	r3, #23
 80058a0:	18fb      	adds	r3, r7, r3
 80058a2:	2200      	movs	r2, #0
 80058a4:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2250      	movs	r2, #80	; 0x50
 80058aa:	5c9b      	ldrb	r3, [r3, r2]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d101      	bne.n	80058b4 <HAL_SPI_Transmit_IT+0x24>
 80058b0:	2302      	movs	r3, #2
 80058b2:	e072      	b.n	800599a <HAL_SPI_Transmit_IT+0x10a>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2250      	movs	r2, #80	; 0x50
 80058b8:	2101      	movs	r1, #1
 80058ba:	5499      	strb	r1, [r3, r2]

  if ((pData == NULL) || (Size == 0U))
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d003      	beq.n	80058ca <HAL_SPI_Transmit_IT+0x3a>
 80058c2:	1dbb      	adds	r3, r7, #6
 80058c4:	881b      	ldrh	r3, [r3, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d104      	bne.n	80058d4 <HAL_SPI_Transmit_IT+0x44>
  {
    errorcode = HAL_ERROR;
 80058ca:	2317      	movs	r3, #23
 80058cc:	18fb      	adds	r3, r7, r3
 80058ce:	2201      	movs	r2, #1
 80058d0:	701a      	strb	r2, [r3, #0]
    goto error;
 80058d2:	e05b      	b.n	800598c <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2251      	movs	r2, #81	; 0x51
 80058d8:	5c9b      	ldrb	r3, [r3, r2]
 80058da:	b2db      	uxtb	r3, r3
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d004      	beq.n	80058ea <HAL_SPI_Transmit_IT+0x5a>
  {
    errorcode = HAL_BUSY;
 80058e0:	2317      	movs	r3, #23
 80058e2:	18fb      	adds	r3, r7, r3
 80058e4:	2202      	movs	r2, #2
 80058e6:	701a      	strb	r2, [r3, #0]
    goto error;
 80058e8:	e050      	b.n	800598c <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2251      	movs	r2, #81	; 0x51
 80058ee:	2103      	movs	r1, #3
 80058f0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2200      	movs	r2, #0
 80058f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	68ba      	ldr	r2, [r7, #8]
 80058fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	1dba      	adds	r2, r7, #6
 8005902:	8812      	ldrh	r2, [r2, #0]
 8005904:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	1dba      	adds	r2, r7, #6
 800590a:	8812      	ldrh	r2, [r2, #0]
 800590c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d003      	beq.n	8005936 <HAL_SPI_Transmit_IT+0xa6>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	4a1c      	ldr	r2, [pc, #112]	; (80059a4 <HAL_SPI_Transmit_IT+0x114>)
 8005932:	645a      	str	r2, [r3, #68]	; 0x44
 8005934:	e002      	b.n	800593c <HAL_SPI_Transmit_IT+0xac>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	4a1b      	ldr	r2, [pc, #108]	; (80059a8 <HAL_SPI_Transmit_IT+0x118>)
 800593a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	689a      	ldr	r2, [r3, #8]
 8005940:	2380      	movs	r3, #128	; 0x80
 8005942:	021b      	lsls	r3, r3, #8
 8005944:	429a      	cmp	r2, r3
 8005946:	d108      	bne.n	800595a <HAL_SPI_Transmit_IT+0xca>
  {
    SPI_1LINE_TX(hspi);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2180      	movs	r1, #128	; 0x80
 8005954:	01c9      	lsls	r1, r1, #7
 8005956:	430a      	orrs	r2, r1
 8005958:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	685a      	ldr	r2, [r3, #4]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	21a0      	movs	r1, #160	; 0xa0
 8005966:	430a      	orrs	r2, r1
 8005968:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2240      	movs	r2, #64	; 0x40
 8005972:	4013      	ands	r3, r2
 8005974:	2b40      	cmp	r3, #64	; 0x40
 8005976:	d008      	beq.n	800598a <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2140      	movs	r1, #64	; 0x40
 8005984:	430a      	orrs	r2, r1
 8005986:	601a      	str	r2, [r3, #0]
 8005988:	e000      	b.n	800598c <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 800598a:	46c0      	nop			; (mov r8, r8)
  __HAL_UNLOCK(hspi);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2250      	movs	r2, #80	; 0x50
 8005990:	2100      	movs	r1, #0
 8005992:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005994:	2317      	movs	r3, #23
 8005996:	18fb      	adds	r3, r7, r3
 8005998:	781b      	ldrb	r3, [r3, #0]
}
 800599a:	0018      	movs	r0, r3
 800599c:	46bd      	mov	sp, r7
 800599e:	b006      	add	sp, #24
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	46c0      	nop			; (mov r8, r8)
 80059a4:	08005c43 	.word	0x08005c43
 80059a8:	08005bfb 	.word	0x08005bfb

080059ac <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b088      	sub	sp, #32
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	099b      	lsrs	r3, r3, #6
 80059c8:	001a      	movs	r2, r3
 80059ca:	2301      	movs	r3, #1
 80059cc:	4013      	ands	r3, r2
 80059ce:	d10f      	bne.n	80059f0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	2201      	movs	r2, #1
 80059d4:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80059d6:	d00b      	beq.n	80059f0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	099b      	lsrs	r3, r3, #6
 80059dc:	001a      	movs	r2, r3
 80059de:	2301      	movs	r3, #1
 80059e0:	4013      	ands	r3, r2
 80059e2:	d005      	beq.n	80059f0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	0010      	movs	r0, r2
 80059ec:	4798      	blx	r3
    return;
 80059ee:	e0d6      	b.n	8005b9e <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	085b      	lsrs	r3, r3, #1
 80059f4:	001a      	movs	r2, r3
 80059f6:	2301      	movs	r3, #1
 80059f8:	4013      	ands	r3, r2
 80059fa:	d00b      	beq.n	8005a14 <HAL_SPI_IRQHandler+0x68>
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	09db      	lsrs	r3, r3, #7
 8005a00:	001a      	movs	r2, r3
 8005a02:	2301      	movs	r3, #1
 8005a04:	4013      	ands	r3, r2
 8005a06:	d005      	beq.n	8005a14 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	0010      	movs	r0, r2
 8005a10:	4798      	blx	r3
    return;
 8005a12:	e0c4      	b.n	8005b9e <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	095b      	lsrs	r3, r3, #5
 8005a18:	001a      	movs	r2, r3
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	d10c      	bne.n	8005a3a <HAL_SPI_IRQHandler+0x8e>
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	099b      	lsrs	r3, r3, #6
 8005a24:	001a      	movs	r2, r3
 8005a26:	2301      	movs	r3, #1
 8005a28:	4013      	ands	r3, r2
 8005a2a:	d106      	bne.n	8005a3a <HAL_SPI_IRQHandler+0x8e>
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	0a1b      	lsrs	r3, r3, #8
 8005a30:	001a      	movs	r2, r3
 8005a32:	2301      	movs	r3, #1
 8005a34:	4013      	ands	r3, r2
 8005a36:	d100      	bne.n	8005a3a <HAL_SPI_IRQHandler+0x8e>
 8005a38:	e0b1      	b.n	8005b9e <HAL_SPI_IRQHandler+0x1f2>
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	095b      	lsrs	r3, r3, #5
 8005a3e:	001a      	movs	r2, r3
 8005a40:	2301      	movs	r3, #1
 8005a42:	4013      	ands	r3, r2
 8005a44:	d100      	bne.n	8005a48 <HAL_SPI_IRQHandler+0x9c>
 8005a46:	e0aa      	b.n	8005b9e <HAL_SPI_IRQHandler+0x1f2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	099b      	lsrs	r3, r3, #6
 8005a4c:	001a      	movs	r2, r3
 8005a4e:	2301      	movs	r3, #1
 8005a50:	4013      	ands	r3, r2
 8005a52:	d023      	beq.n	8005a9c <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2251      	movs	r2, #81	; 0x51
 8005a58:	5c9b      	ldrb	r3, [r3, r2]
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	2b03      	cmp	r3, #3
 8005a5e:	d011      	beq.n	8005a84 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a64:	2204      	movs	r2, #4
 8005a66:	431a      	orrs	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	617b      	str	r3, [r7, #20]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	617b      	str	r3, [r7, #20]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	617b      	str	r3, [r7, #20]
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	e00b      	b.n	8005a9c <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a84:	2300      	movs	r3, #0
 8005a86:	613b      	str	r3, [r7, #16]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	613b      	str	r3, [r7, #16]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	613b      	str	r3, [r7, #16]
 8005a98:	693b      	ldr	r3, [r7, #16]
        return;
 8005a9a:	e080      	b.n	8005b9e <HAL_SPI_IRQHandler+0x1f2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	095b      	lsrs	r3, r3, #5
 8005aa0:	001a      	movs	r2, r3
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	d014      	beq.n	8005ad2 <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aac:	2201      	movs	r2, #1
 8005aae:	431a      	orrs	r2, r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	60fb      	str	r3, [r7, #12]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	60fb      	str	r3, [r7, #12]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2140      	movs	r1, #64	; 0x40
 8005acc:	438a      	bics	r2, r1
 8005ace:	601a      	str	r2, [r3, #0]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	0a1b      	lsrs	r3, r3, #8
 8005ad6:	001a      	movs	r2, r3
 8005ad8:	2301      	movs	r3, #1
 8005ada:	4013      	ands	r3, r2
 8005adc:	d00c      	beq.n	8005af8 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ae2:	2208      	movs	r2, #8
 8005ae4:	431a      	orrs	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005aea:	2300      	movs	r3, #0
 8005aec:	60bb      	str	r3, [r7, #8]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	60bb      	str	r3, [r7, #8]
 8005af6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d04d      	beq.n	8005b9c <HAL_SPI_IRQHandler+0x1f0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	685a      	ldr	r2, [r3, #4]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	21e0      	movs	r1, #224	; 0xe0
 8005b0c:	438a      	bics	r2, r1
 8005b0e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2251      	movs	r2, #81	; 0x51
 8005b14:	2101      	movs	r1, #1
 8005b16:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	2202      	movs	r2, #2
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	d103      	bne.n	8005b28 <HAL_SPI_IRQHandler+0x17c>
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	2201      	movs	r2, #1
 8005b24:	4013      	ands	r3, r2
 8005b26:	d032      	beq.n	8005b8e <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	685a      	ldr	r2, [r3, #4]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2103      	movs	r1, #3
 8005b34:	438a      	bics	r2, r1
 8005b36:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d010      	beq.n	8005b62 <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b44:	4a17      	ldr	r2, [pc, #92]	; (8005ba4 <HAL_SPI_IRQHandler+0x1f8>)
 8005b46:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b4c:	0018      	movs	r0, r3
 8005b4e:	f7fd fb75 	bl	800323c <HAL_DMA_Abort_IT>
 8005b52:	1e03      	subs	r3, r0, #0
 8005b54:	d005      	beq.n	8005b62 <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b5a:	2240      	movs	r2, #64	; 0x40
 8005b5c:	431a      	orrs	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d016      	beq.n	8005b98 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b6e:	4a0d      	ldr	r2, [pc, #52]	; (8005ba4 <HAL_SPI_IRQHandler+0x1f8>)
 8005b70:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b76:	0018      	movs	r0, r3
 8005b78:	f7fd fb60 	bl	800323c <HAL_DMA_Abort_IT>
 8005b7c:	1e03      	subs	r3, r0, #0
 8005b7e:	d00b      	beq.n	8005b98 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b84:	2240      	movs	r2, #64	; 0x40
 8005b86:	431a      	orrs	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005b8c:	e004      	b.n	8005b98 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	0018      	movs	r0, r3
 8005b92:	f000 f809 	bl	8005ba8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005b96:	e000      	b.n	8005b9a <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8005b98:	46c0      	nop			; (mov r8, r8)
    return;
 8005b9a:	46c0      	nop			; (mov r8, r8)
 8005b9c:	46c0      	nop			; (mov r8, r8)
  }
}
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	b008      	add	sp, #32
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	08005bd1 	.word	0x08005bd1

08005ba8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005bb0:	46c0      	nop			; (mov r8, r8)
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	b002      	add	sp, #8
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2251      	movs	r2, #81	; 0x51
 8005bc4:	5c9b      	ldrb	r3, [r3, r2]
 8005bc6:	b2db      	uxtb	r3, r3
}
 8005bc8:	0018      	movs	r0, r3
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	b002      	add	sp, #8
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bdc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	0018      	movs	r0, r3
 8005bee:	f7ff ffdb 	bl	8005ba8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005bf2:	46c0      	nop			; (mov r8, r8)
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	b004      	add	sp, #16
 8005bf8:	bd80      	pop	{r7, pc}

08005bfa <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b082      	sub	sp, #8
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	330c      	adds	r3, #12
 8005c0c:	7812      	ldrb	r2, [r2, #0]
 8005c0e:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c14:	1c5a      	adds	r2, r3, #1
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	3b01      	subs	r3, #1
 8005c22:	b29a      	uxth	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d103      	bne.n	8005c3a <SPI_TxISR_8BIT+0x40>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	0018      	movs	r0, r3
 8005c36:	f000 f8d5 	bl	8005de4 <SPI_CloseTx_ISR>
  }
}
 8005c3a:	46c0      	nop			; (mov r8, r8)
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	b002      	add	sp, #8
 8005c40:	bd80      	pop	{r7, pc}

08005c42 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b082      	sub	sp, #8
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c4e:	881a      	ldrh	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c5a:	1c9a      	adds	r2, r3, #2
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	3b01      	subs	r3, #1
 8005c68:	b29a      	uxth	r2, r3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d103      	bne.n	8005c80 <SPI_TxISR_16BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	0018      	movs	r0, r3
 8005c7c:	f000 f8b2 	bl	8005de4 <SPI_CloseTx_ISR>
  }
}
 8005c80:	46c0      	nop			; (mov r8, r8)
 8005c82:	46bd      	mov	sp, r7
 8005c84:	b002      	add	sp, #8
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	603b      	str	r3, [r7, #0]
 8005c94:	1dfb      	adds	r3, r7, #7
 8005c96:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c98:	e050      	b.n	8005d3c <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	d04d      	beq.n	8005d3c <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005ca0:	f7fc ff20 	bl	8002ae4 <HAL_GetTick>
 8005ca4:	0002      	movs	r2, r0
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	683a      	ldr	r2, [r7, #0]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d902      	bls.n	8005cb6 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d142      	bne.n	8005d3c <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	21e0      	movs	r1, #224	; 0xe0
 8005cc2:	438a      	bics	r2, r1
 8005cc4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	685a      	ldr	r2, [r3, #4]
 8005cca:	2382      	movs	r3, #130	; 0x82
 8005ccc:	005b      	lsls	r3, r3, #1
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d113      	bne.n	8005cfa <SPI_WaitFlagStateUntilTimeout+0x72>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	689a      	ldr	r2, [r3, #8]
 8005cd6:	2380      	movs	r3, #128	; 0x80
 8005cd8:	021b      	lsls	r3, r3, #8
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d005      	beq.n	8005cea <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	689a      	ldr	r2, [r3, #8]
 8005ce2:	2380      	movs	r3, #128	; 0x80
 8005ce4:	00db      	lsls	r3, r3, #3
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d107      	bne.n	8005cfa <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2140      	movs	r1, #64	; 0x40
 8005cf6:	438a      	bics	r2, r1
 8005cf8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cfe:	2380      	movs	r3, #128	; 0x80
 8005d00:	019b      	lsls	r3, r3, #6
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d110      	bne.n	8005d28 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4914      	ldr	r1, [pc, #80]	; (8005d64 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8005d12:	400a      	ands	r2, r1
 8005d14:	601a      	str	r2, [r3, #0]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2180      	movs	r1, #128	; 0x80
 8005d22:	0189      	lsls	r1, r1, #6
 8005d24:	430a      	orrs	r2, r1
 8005d26:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2251      	movs	r2, #81	; 0x51
 8005d2c:	2101      	movs	r1, #1
 8005d2e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2250      	movs	r2, #80	; 0x50
 8005d34:	2100      	movs	r1, #0
 8005d36:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e00f      	b.n	8005d5c <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	68ba      	ldr	r2, [r7, #8]
 8005d44:	4013      	ands	r3, r2
 8005d46:	68ba      	ldr	r2, [r7, #8]
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	425a      	negs	r2, r3
 8005d4c:	4153      	adcs	r3, r2
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	001a      	movs	r2, r3
 8005d52:	1dfb      	adds	r3, r7, #7
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d19f      	bne.n	8005c9a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	0018      	movs	r0, r3
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	b004      	add	sp, #16
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	ffffdfff 	.word	0xffffdfff

08005d68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b086      	sub	sp, #24
 8005d6c:	af02      	add	r7, sp, #8
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	685a      	ldr	r2, [r3, #4]
 8005d78:	2382      	movs	r3, #130	; 0x82
 8005d7a:	005b      	lsls	r3, r3, #1
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d112      	bne.n	8005da6 <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d80:	68ba      	ldr	r2, [r7, #8]
 8005d82:	68f8      	ldr	r0, [r7, #12]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	9300      	str	r3, [sp, #0]
 8005d88:	0013      	movs	r3, r2
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	2180      	movs	r1, #128	; 0x80
 8005d8e:	f7ff ff7b 	bl	8005c88 <SPI_WaitFlagStateUntilTimeout>
 8005d92:	1e03      	subs	r3, r0, #0
 8005d94:	d020      	beq.n	8005dd8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d9a:	2220      	movs	r2, #32
 8005d9c:	431a      	orrs	r2, r3
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005da2:	2303      	movs	r3, #3
 8005da4:	e019      	b.n	8005dda <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2251      	movs	r2, #81	; 0x51
 8005daa:	5c9b      	ldrb	r3, [r3, r2]
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	2b05      	cmp	r3, #5
 8005db0:	d112      	bne.n	8005dd8 <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005db2:	68ba      	ldr	r2, [r7, #8]
 8005db4:	68f8      	ldr	r0, [r7, #12]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	9300      	str	r3, [sp, #0]
 8005dba:	0013      	movs	r3, r2
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	2101      	movs	r1, #1
 8005dc0:	f7ff ff62 	bl	8005c88 <SPI_WaitFlagStateUntilTimeout>
 8005dc4:	1e03      	subs	r3, r0, #0
 8005dc6:	d007      	beq.n	8005dd8 <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dcc:	2220      	movs	r2, #32
 8005dce:	431a      	orrs	r2, r3
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	e000      	b.n	8005dda <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	0018      	movs	r0, r3
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	b004      	add	sp, #16
 8005de0:	bd80      	pop	{r7, pc}
	...

08005de4 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b086      	sub	sp, #24
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8005dec:	4b2d      	ldr	r3, [pc, #180]	; (8005ea4 <SPI_CloseTx_ISR+0xc0>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	492d      	ldr	r1, [pc, #180]	; (8005ea8 <SPI_CloseTx_ISR+0xc4>)
 8005df2:	0018      	movs	r0, r3
 8005df4:	f7fa f988 	bl	8000108 <__udivsi3>
 8005df8:	0003      	movs	r3, r0
 8005dfa:	001a      	movs	r2, r3
 8005dfc:	2364      	movs	r3, #100	; 0x64
 8005dfe:	4353      	muls	r3, r2
 8005e00:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e02:	f7fc fe6f 	bl	8002ae4 <HAL_GetTick>
 8005e06:	0003      	movs	r3, r0
 8005e08:	617b      	str	r3, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d106      	bne.n	8005e1e <SPI_CloseTx_ISR+0x3a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e14:	2220      	movs	r2, #32
 8005e16:	431a      	orrs	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005e1c:	e008      	b.n	8005e30 <SPI_CloseTx_ISR+0x4c>
    }
    count--;
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	3b01      	subs	r3, #1
 8005e22:	613b      	str	r3, [r7, #16]
  }
  while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	2202      	movs	r2, #2
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	d0ec      	beq.n	8005e0a <SPI_CloseTx_ISR+0x26>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	685a      	ldr	r2, [r3, #4]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	21a0      	movs	r1, #160	; 0xa0
 8005e3c:	438a      	bics	r2, r1
 8005e3e:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005e40:	697a      	ldr	r2, [r7, #20]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2164      	movs	r1, #100	; 0x64
 8005e46:	0018      	movs	r0, r3
 8005e48:	f7ff ff8e 	bl	8005d68 <SPI_EndRxTxTransaction>
 8005e4c:	1e03      	subs	r3, r0, #0
 8005e4e:	d005      	beq.n	8005e5c <SPI_CloseTx_ISR+0x78>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e54:	2220      	movs	r2, #32
 8005e56:	431a      	orrs	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d10a      	bne.n	8005e7a <SPI_CloseTx_ISR+0x96>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e64:	2300      	movs	r3, #0
 8005e66:	60fb      	str	r3, [r7, #12]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	60fb      	str	r3, [r7, #12]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	60fb      	str	r3, [r7, #12]
 8005e78:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2251      	movs	r2, #81	; 0x51
 8005e7e:	2101      	movs	r1, #1
 8005e80:	5499      	strb	r1, [r3, r2]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d004      	beq.n	8005e94 <SPI_CloseTx_ISR+0xb0>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	0018      	movs	r0, r3
 8005e8e:	f7ff fe8b 	bl	8005ba8 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8005e92:	e003      	b.n	8005e9c <SPI_CloseTx_ISR+0xb8>
    HAL_SPI_TxCpltCallback(hspi);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	0018      	movs	r0, r3
 8005e98:	f7fa fb1a 	bl	80004d0 <HAL_SPI_TxCpltCallback>
}
 8005e9c:	46c0      	nop			; (mov r8, r8)
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	b006      	add	sp, #24
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	20000054 	.word	0x20000054
 8005ea8:	00005dc0 	.word	0x00005dc0

08005eac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d101      	bne.n	8005ebe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e01e      	b.n	8005efc <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2239      	movs	r2, #57	; 0x39
 8005ec2:	5c9b      	ldrb	r3, [r3, r2]
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d107      	bne.n	8005eda <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2238      	movs	r2, #56	; 0x38
 8005ece:	2100      	movs	r1, #0
 8005ed0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	0018      	movs	r0, r3
 8005ed6:	f7fc fc7b 	bl	80027d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2239      	movs	r2, #57	; 0x39
 8005ede:	2102      	movs	r1, #2
 8005ee0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	3304      	adds	r3, #4
 8005eea:	0019      	movs	r1, r3
 8005eec:	0010      	movs	r0, r2
 8005eee:	f000 f96b 	bl	80061c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2239      	movs	r2, #57	; 0x39
 8005ef6:	2101      	movs	r1, #1
 8005ef8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	0018      	movs	r0, r3
 8005efe:	46bd      	mov	sp, r7
 8005f00:	b002      	add	sp, #8
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2239      	movs	r2, #57	; 0x39
 8005f10:	2102      	movs	r1, #2
 8005f12:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	2207      	movs	r2, #7
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2b06      	cmp	r3, #6
 8005f24:	d007      	beq.n	8005f36 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2101      	movs	r1, #1
 8005f32:	430a      	orrs	r2, r1
 8005f34:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2239      	movs	r2, #57	; 0x39
 8005f3a:	2101      	movs	r1, #1
 8005f3c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	0018      	movs	r0, r3
 8005f42:	46bd      	mov	sp, r7
 8005f44:	b004      	add	sp, #16
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d101      	bne.n	8005f5a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e01e      	b.n	8005f98 <HAL_TIM_OC_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2239      	movs	r2, #57	; 0x39
 8005f5e:	5c9b      	ldrb	r3, [r3, r2]
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d107      	bne.n	8005f76 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2238      	movs	r2, #56	; 0x38
 8005f6a:	2100      	movs	r1, #0
 8005f6c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	0018      	movs	r0, r3
 8005f72:	f000 f815 	bl	8005fa0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2239      	movs	r2, #57	; 0x39
 8005f7a:	2102      	movs	r1, #2
 8005f7c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	3304      	adds	r3, #4
 8005f86:	0019      	movs	r1, r3
 8005f88:	0010      	movs	r0, r2
 8005f8a:	f000 f91d 	bl	80061c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2239      	movs	r2, #57	; 0x39
 8005f92:	2101      	movs	r1, #1
 8005f94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	0018      	movs	r0, r3
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	b002      	add	sp, #8
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005fa8:	46c0      	nop			; (mov r8, r8)
 8005faa:	46bd      	mov	sp, r7
 8005fac:	b002      	add	sp, #8
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	60f8      	str	r0, [r7, #12]
 8005fb8:	60b9      	str	r1, [r7, #8]
 8005fba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2238      	movs	r2, #56	; 0x38
 8005fc0:	5c9b      	ldrb	r3, [r3, r2]
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d101      	bne.n	8005fca <HAL_TIM_OC_ConfigChannel+0x1a>
 8005fc6:	2302      	movs	r3, #2
 8005fc8:	e03c      	b.n	8006044 <HAL_TIM_OC_ConfigChannel+0x94>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2238      	movs	r2, #56	; 0x38
 8005fce:	2101      	movs	r1, #1
 8005fd0:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2239      	movs	r2, #57	; 0x39
 8005fd6:	2102      	movs	r1, #2
 8005fd8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2b04      	cmp	r3, #4
 8005fde:	d010      	beq.n	8006002 <HAL_TIM_OC_ConfigChannel+0x52>
 8005fe0:	d802      	bhi.n	8005fe8 <HAL_TIM_OC_ConfigChannel+0x38>
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d005      	beq.n	8005ff2 <HAL_TIM_OC_ConfigChannel+0x42>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      break;
    }

    default:
      break;
 8005fe6:	e024      	b.n	8006032 <HAL_TIM_OC_ConfigChannel+0x82>
  switch (Channel)
 8005fe8:	2b08      	cmp	r3, #8
 8005fea:	d012      	beq.n	8006012 <HAL_TIM_OC_ConfigChannel+0x62>
 8005fec:	2b0c      	cmp	r3, #12
 8005fee:	d018      	beq.n	8006022 <HAL_TIM_OC_ConfigChannel+0x72>
      break;
 8005ff0:	e01f      	b.n	8006032 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68ba      	ldr	r2, [r7, #8]
 8005ff8:	0011      	movs	r1, r2
 8005ffa:	0018      	movs	r0, r3
 8005ffc:	f000 f942 	bl	8006284 <TIM_OC1_SetConfig>
      break;
 8006000:	e017      	b.n	8006032 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68ba      	ldr	r2, [r7, #8]
 8006008:	0011      	movs	r1, r2
 800600a:	0018      	movs	r0, r3
 800600c:	f000 f976 	bl	80062fc <TIM_OC2_SetConfig>
      break;
 8006010:	e00f      	b.n	8006032 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68ba      	ldr	r2, [r7, #8]
 8006018:	0011      	movs	r1, r2
 800601a:	0018      	movs	r0, r3
 800601c:	f000 f9b0 	bl	8006380 <TIM_OC3_SetConfig>
      break;
 8006020:	e007      	b.n	8006032 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68ba      	ldr	r2, [r7, #8]
 8006028:	0011      	movs	r1, r2
 800602a:	0018      	movs	r0, r3
 800602c:	f000 f9e8 	bl	8006400 <TIM_OC4_SetConfig>
      break;
 8006030:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2239      	movs	r2, #57	; 0x39
 8006036:	2101      	movs	r1, #1
 8006038:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2238      	movs	r2, #56	; 0x38
 800603e:	2100      	movs	r1, #0
 8006040:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	0018      	movs	r0, r3
 8006046:	46bd      	mov	sp, r7
 8006048:	b004      	add	sp, #16
 800604a:	bd80      	pop	{r7, pc}

0800604c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2238      	movs	r2, #56	; 0x38
 800605a:	5c9b      	ldrb	r3, [r3, r2]
 800605c:	2b01      	cmp	r3, #1
 800605e:	d101      	bne.n	8006064 <HAL_TIM_ConfigClockSource+0x18>
 8006060:	2302      	movs	r3, #2
 8006062:	e0ab      	b.n	80061bc <HAL_TIM_ConfigClockSource+0x170>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2238      	movs	r2, #56	; 0x38
 8006068:	2101      	movs	r1, #1
 800606a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2239      	movs	r2, #57	; 0x39
 8006070:	2102      	movs	r1, #2
 8006072:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2277      	movs	r2, #119	; 0x77
 8006080:	4393      	bics	r3, r2
 8006082:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	4a4f      	ldr	r2, [pc, #316]	; (80061c4 <HAL_TIM_ConfigClockSource+0x178>)
 8006088:	4013      	ands	r3, r2
 800608a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2b40      	cmp	r3, #64	; 0x40
 800609a:	d100      	bne.n	800609e <HAL_TIM_ConfigClockSource+0x52>
 800609c:	e06b      	b.n	8006176 <HAL_TIM_ConfigClockSource+0x12a>
 800609e:	d80e      	bhi.n	80060be <HAL_TIM_ConfigClockSource+0x72>
 80060a0:	2b10      	cmp	r3, #16
 80060a2:	d100      	bne.n	80060a6 <HAL_TIM_ConfigClockSource+0x5a>
 80060a4:	e077      	b.n	8006196 <HAL_TIM_ConfigClockSource+0x14a>
 80060a6:	d803      	bhi.n	80060b0 <HAL_TIM_ConfigClockSource+0x64>
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d100      	bne.n	80060ae <HAL_TIM_ConfigClockSource+0x62>
 80060ac:	e073      	b.n	8006196 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80060ae:	e07c      	b.n	80061aa <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80060b0:	2b20      	cmp	r3, #32
 80060b2:	d100      	bne.n	80060b6 <HAL_TIM_ConfigClockSource+0x6a>
 80060b4:	e06f      	b.n	8006196 <HAL_TIM_ConfigClockSource+0x14a>
 80060b6:	2b30      	cmp	r3, #48	; 0x30
 80060b8:	d100      	bne.n	80060bc <HAL_TIM_ConfigClockSource+0x70>
 80060ba:	e06c      	b.n	8006196 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 80060bc:	e075      	b.n	80061aa <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80060be:	2b70      	cmp	r3, #112	; 0x70
 80060c0:	d00e      	beq.n	80060e0 <HAL_TIM_ConfigClockSource+0x94>
 80060c2:	d804      	bhi.n	80060ce <HAL_TIM_ConfigClockSource+0x82>
 80060c4:	2b50      	cmp	r3, #80	; 0x50
 80060c6:	d036      	beq.n	8006136 <HAL_TIM_ConfigClockSource+0xea>
 80060c8:	2b60      	cmp	r3, #96	; 0x60
 80060ca:	d044      	beq.n	8006156 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 80060cc:	e06d      	b.n	80061aa <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80060ce:	2280      	movs	r2, #128	; 0x80
 80060d0:	0152      	lsls	r2, r2, #5
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d068      	beq.n	80061a8 <HAL_TIM_ConfigClockSource+0x15c>
 80060d6:	2280      	movs	r2, #128	; 0x80
 80060d8:	0192      	lsls	r2, r2, #6
 80060da:	4293      	cmp	r3, r2
 80060dc:	d017      	beq.n	800610e <HAL_TIM_ConfigClockSource+0xc2>
      break;
 80060de:	e064      	b.n	80061aa <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6818      	ldr	r0, [r3, #0]
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	6899      	ldr	r1, [r3, #8]
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	685a      	ldr	r2, [r3, #4]
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	f000 fa46 	bl	8006580 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2277      	movs	r2, #119	; 0x77
 8006100:	4313      	orrs	r3, r2
 8006102:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	609a      	str	r2, [r3, #8]
      break;
 800610c:	e04d      	b.n	80061aa <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6818      	ldr	r0, [r3, #0]
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	6899      	ldr	r1, [r3, #8]
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	685a      	ldr	r2, [r3, #4]
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	f000 fa2f 	bl	8006580 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	689a      	ldr	r2, [r3, #8]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2180      	movs	r1, #128	; 0x80
 800612e:	01c9      	lsls	r1, r1, #7
 8006130:	430a      	orrs	r2, r1
 8006132:	609a      	str	r2, [r3, #8]
      break;
 8006134:	e039      	b.n	80061aa <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6818      	ldr	r0, [r3, #0]
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	6859      	ldr	r1, [r3, #4]
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	001a      	movs	r2, r3
 8006144:	f000 f9a2 	bl	800648c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2150      	movs	r1, #80	; 0x50
 800614e:	0018      	movs	r0, r3
 8006150:	f000 f9fc 	bl	800654c <TIM_ITRx_SetConfig>
      break;
 8006154:	e029      	b.n	80061aa <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6818      	ldr	r0, [r3, #0]
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	6859      	ldr	r1, [r3, #4]
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	001a      	movs	r2, r3
 8006164:	f000 f9c0 	bl	80064e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2160      	movs	r1, #96	; 0x60
 800616e:	0018      	movs	r0, r3
 8006170:	f000 f9ec 	bl	800654c <TIM_ITRx_SetConfig>
      break;
 8006174:	e019      	b.n	80061aa <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6818      	ldr	r0, [r3, #0]
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	6859      	ldr	r1, [r3, #4]
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	001a      	movs	r2, r3
 8006184:	f000 f982 	bl	800648c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2140      	movs	r1, #64	; 0x40
 800618e:	0018      	movs	r0, r3
 8006190:	f000 f9dc 	bl	800654c <TIM_ITRx_SetConfig>
      break;
 8006194:	e009      	b.n	80061aa <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	0019      	movs	r1, r3
 80061a0:	0010      	movs	r0, r2
 80061a2:	f000 f9d3 	bl	800654c <TIM_ITRx_SetConfig>
      break;
 80061a6:	e000      	b.n	80061aa <HAL_TIM_ConfigClockSource+0x15e>
      break;
 80061a8:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2239      	movs	r2, #57	; 0x39
 80061ae:	2101      	movs	r1, #1
 80061b0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2238      	movs	r2, #56	; 0x38
 80061b6:	2100      	movs	r1, #0
 80061b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	0018      	movs	r0, r3
 80061be:	46bd      	mov	sp, r7
 80061c0:	b004      	add	sp, #16
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	ffff00ff 	.word	0xffff00ff

080061c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b084      	sub	sp, #16
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	2380      	movs	r3, #128	; 0x80
 80061dc:	05db      	lsls	r3, r3, #23
 80061de:	429a      	cmp	r2, r3
 80061e0:	d00b      	beq.n	80061fa <TIM_Base_SetConfig+0x32>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a23      	ldr	r2, [pc, #140]	; (8006274 <TIM_Base_SetConfig+0xac>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d007      	beq.n	80061fa <TIM_Base_SetConfig+0x32>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a22      	ldr	r2, [pc, #136]	; (8006278 <TIM_Base_SetConfig+0xb0>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d003      	beq.n	80061fa <TIM_Base_SetConfig+0x32>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a21      	ldr	r2, [pc, #132]	; (800627c <TIM_Base_SetConfig+0xb4>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d108      	bne.n	800620c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2270      	movs	r2, #112	; 0x70
 80061fe:	4393      	bics	r3, r2
 8006200:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	4313      	orrs	r3, r2
 800620a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	2380      	movs	r3, #128	; 0x80
 8006210:	05db      	lsls	r3, r3, #23
 8006212:	429a      	cmp	r2, r3
 8006214:	d00b      	beq.n	800622e <TIM_Base_SetConfig+0x66>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a16      	ldr	r2, [pc, #88]	; (8006274 <TIM_Base_SetConfig+0xac>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d007      	beq.n	800622e <TIM_Base_SetConfig+0x66>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a15      	ldr	r2, [pc, #84]	; (8006278 <TIM_Base_SetConfig+0xb0>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d003      	beq.n	800622e <TIM_Base_SetConfig+0x66>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a14      	ldr	r2, [pc, #80]	; (800627c <TIM_Base_SetConfig+0xb4>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d108      	bne.n	8006240 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	4a13      	ldr	r2, [pc, #76]	; (8006280 <TIM_Base_SetConfig+0xb8>)
 8006232:	4013      	ands	r3, r2
 8006234:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	4313      	orrs	r3, r2
 800623e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2280      	movs	r2, #128	; 0x80
 8006244:	4393      	bics	r3, r2
 8006246:	001a      	movs	r2, r3
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	4313      	orrs	r3, r2
 800624e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	689a      	ldr	r2, [r3, #8]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2201      	movs	r2, #1
 800626a:	615a      	str	r2, [r3, #20]
}
 800626c:	46c0      	nop			; (mov r8, r8)
 800626e:	46bd      	mov	sp, r7
 8006270:	b004      	add	sp, #16
 8006272:	bd80      	pop	{r7, pc}
 8006274:	40000400 	.word	0x40000400
 8006278:	40010800 	.word	0x40010800
 800627c:	40011400 	.word	0x40011400
 8006280:	fffffcff 	.word	0xfffffcff

08006284 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b086      	sub	sp, #24
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a1b      	ldr	r3, [r3, #32]
 8006292:	2201      	movs	r2, #1
 8006294:	4393      	bics	r3, r2
 8006296:	001a      	movs	r2, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a1b      	ldr	r3, [r3, #32]
 80062a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	699b      	ldr	r3, [r3, #24]
 80062ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2270      	movs	r2, #112	; 0x70
 80062b2:	4393      	bics	r3, r2
 80062b4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2203      	movs	r2, #3
 80062ba:	4393      	bics	r3, r2
 80062bc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	2202      	movs	r2, #2
 80062cc:	4393      	bics	r3, r2
 80062ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	697a      	ldr	r2, [r7, #20]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	693a      	ldr	r2, [r7, #16]
 80062de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	685a      	ldr	r2, [r3, #4]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	697a      	ldr	r2, [r7, #20]
 80062f2:	621a      	str	r2, [r3, #32]
}
 80062f4:	46c0      	nop			; (mov r8, r8)
 80062f6:	46bd      	mov	sp, r7
 80062f8:	b006      	add	sp, #24
 80062fa:	bd80      	pop	{r7, pc}

080062fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b086      	sub	sp, #24
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a1b      	ldr	r3, [r3, #32]
 800630a:	2210      	movs	r2, #16
 800630c:	4393      	bics	r3, r2
 800630e:	001a      	movs	r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6a1b      	ldr	r3, [r3, #32]
 8006318:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	699b      	ldr	r3, [r3, #24]
 8006324:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	4a13      	ldr	r2, [pc, #76]	; (8006378 <TIM_OC2_SetConfig+0x7c>)
 800632a:	4013      	ands	r3, r2
 800632c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	4a12      	ldr	r2, [pc, #72]	; (800637c <TIM_OC2_SetConfig+0x80>)
 8006332:	4013      	ands	r3, r2
 8006334:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	021b      	lsls	r3, r3, #8
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	4313      	orrs	r3, r2
 8006340:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	2220      	movs	r2, #32
 8006346:	4393      	bics	r3, r2
 8006348:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	011b      	lsls	r3, r3, #4
 8006350:	697a      	ldr	r2, [r7, #20]
 8006352:	4313      	orrs	r3, r2
 8006354:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	693a      	ldr	r2, [r7, #16]
 800635a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	685a      	ldr	r2, [r3, #4]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	697a      	ldr	r2, [r7, #20]
 800636e:	621a      	str	r2, [r3, #32]
}
 8006370:	46c0      	nop			; (mov r8, r8)
 8006372:	46bd      	mov	sp, r7
 8006374:	b006      	add	sp, #24
 8006376:	bd80      	pop	{r7, pc}
 8006378:	ffff8fff 	.word	0xffff8fff
 800637c:	fffffcff 	.word	0xfffffcff

08006380 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b086      	sub	sp, #24
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a1b      	ldr	r3, [r3, #32]
 800638e:	4a1a      	ldr	r2, [pc, #104]	; (80063f8 <TIM_OC3_SetConfig+0x78>)
 8006390:	401a      	ands	r2, r3
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	69db      	ldr	r3, [r3, #28]
 80063a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2270      	movs	r2, #112	; 0x70
 80063ac:	4393      	bics	r3, r2
 80063ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2203      	movs	r2, #3
 80063b4:	4393      	bics	r3, r2
 80063b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	4313      	orrs	r3, r2
 80063c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	4a0d      	ldr	r2, [pc, #52]	; (80063fc <TIM_OC3_SetConfig+0x7c>)
 80063c6:	4013      	ands	r3, r2
 80063c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	021b      	lsls	r3, r3, #8
 80063d0:	697a      	ldr	r2, [r7, #20]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	693a      	ldr	r2, [r7, #16]
 80063da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	685a      	ldr	r2, [r3, #4]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	697a      	ldr	r2, [r7, #20]
 80063ee:	621a      	str	r2, [r3, #32]
}
 80063f0:	46c0      	nop			; (mov r8, r8)
 80063f2:	46bd      	mov	sp, r7
 80063f4:	b006      	add	sp, #24
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	fffffeff 	.word	0xfffffeff
 80063fc:	fffffdff 	.word	0xfffffdff

08006400 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b086      	sub	sp, #24
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a1b      	ldr	r3, [r3, #32]
 800640e:	4a1b      	ldr	r2, [pc, #108]	; (800647c <TIM_OC4_SetConfig+0x7c>)
 8006410:	401a      	ands	r2, r3
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a1b      	ldr	r3, [r3, #32]
 800641a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	69db      	ldr	r3, [r3, #28]
 8006426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	4a15      	ldr	r2, [pc, #84]	; (8006480 <TIM_OC4_SetConfig+0x80>)
 800642c:	4013      	ands	r3, r2
 800642e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	4a14      	ldr	r2, [pc, #80]	; (8006484 <TIM_OC4_SetConfig+0x84>)
 8006434:	4013      	ands	r3, r2
 8006436:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	021b      	lsls	r3, r3, #8
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	4313      	orrs	r3, r2
 8006442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	4a10      	ldr	r2, [pc, #64]	; (8006488 <TIM_OC4_SetConfig+0x88>)
 8006448:	4013      	ands	r3, r2
 800644a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	031b      	lsls	r3, r3, #12
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	4313      	orrs	r3, r2
 8006456:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	693a      	ldr	r2, [r7, #16]
 800645c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	685a      	ldr	r2, [r3, #4]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	697a      	ldr	r2, [r7, #20]
 8006470:	621a      	str	r2, [r3, #32]
}
 8006472:	46c0      	nop			; (mov r8, r8)
 8006474:	46bd      	mov	sp, r7
 8006476:	b006      	add	sp, #24
 8006478:	bd80      	pop	{r7, pc}
 800647a:	46c0      	nop			; (mov r8, r8)
 800647c:	ffffefff 	.word	0xffffefff
 8006480:	ffff8fff 	.word	0xffff8fff
 8006484:	fffffcff 	.word	0xfffffcff
 8006488:	ffffdfff 	.word	0xffffdfff

0800648c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b086      	sub	sp, #24
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6a1b      	ldr	r3, [r3, #32]
 800649c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	2201      	movs	r2, #1
 80064a4:	4393      	bics	r3, r2
 80064a6:	001a      	movs	r2, r3
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	699b      	ldr	r3, [r3, #24]
 80064b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	22f0      	movs	r2, #240	; 0xf0
 80064b6:	4393      	bics	r3, r2
 80064b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	011b      	lsls	r3, r3, #4
 80064be:	693a      	ldr	r2, [r7, #16]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	220a      	movs	r2, #10
 80064c8:	4393      	bics	r3, r2
 80064ca:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064cc:	697a      	ldr	r2, [r7, #20]
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	693a      	ldr	r2, [r7, #16]
 80064d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	697a      	ldr	r2, [r7, #20]
 80064de:	621a      	str	r2, [r3, #32]
}
 80064e0:	46c0      	nop			; (mov r8, r8)
 80064e2:	46bd      	mov	sp, r7
 80064e4:	b006      	add	sp, #24
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b086      	sub	sp, #24
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6a1b      	ldr	r3, [r3, #32]
 80064f8:	2210      	movs	r2, #16
 80064fa:	4393      	bics	r3, r2
 80064fc:	001a      	movs	r2, r3
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	699b      	ldr	r3, [r3, #24]
 8006506:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6a1b      	ldr	r3, [r3, #32]
 800650c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	4a0d      	ldr	r2, [pc, #52]	; (8006548 <TIM_TI2_ConfigInputStage+0x60>)
 8006512:	4013      	ands	r3, r2
 8006514:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	031b      	lsls	r3, r3, #12
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	4313      	orrs	r3, r2
 800651e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	22a0      	movs	r2, #160	; 0xa0
 8006524:	4393      	bics	r3, r2
 8006526:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	011b      	lsls	r3, r3, #4
 800652c:	693a      	ldr	r2, [r7, #16]
 800652e:	4313      	orrs	r3, r2
 8006530:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	697a      	ldr	r2, [r7, #20]
 8006536:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	693a      	ldr	r2, [r7, #16]
 800653c:	621a      	str	r2, [r3, #32]
}
 800653e:	46c0      	nop			; (mov r8, r8)
 8006540:	46bd      	mov	sp, r7
 8006542:	b006      	add	sp, #24
 8006544:	bd80      	pop	{r7, pc}
 8006546:	46c0      	nop			; (mov r8, r8)
 8006548:	ffff0fff 	.word	0xffff0fff

0800654c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2270      	movs	r2, #112	; 0x70
 8006560:	4393      	bics	r3, r2
 8006562:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006564:	683a      	ldr	r2, [r7, #0]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	4313      	orrs	r3, r2
 800656a:	2207      	movs	r2, #7
 800656c:	4313      	orrs	r3, r2
 800656e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	609a      	str	r2, [r3, #8]
}
 8006576:	46c0      	nop			; (mov r8, r8)
 8006578:	46bd      	mov	sp, r7
 800657a:	b004      	add	sp, #16
 800657c:	bd80      	pop	{r7, pc}
	...

08006580 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b086      	sub	sp, #24
 8006584:	af00      	add	r7, sp, #0
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	607a      	str	r2, [r7, #4]
 800658c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	4a09      	ldr	r2, [pc, #36]	; (80065bc <TIM_ETR_SetConfig+0x3c>)
 8006598:	4013      	ands	r3, r2
 800659a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	021a      	lsls	r2, r3, #8
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	431a      	orrs	r2, r3
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	697a      	ldr	r2, [r7, #20]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	697a      	ldr	r2, [r7, #20]
 80065b2:	609a      	str	r2, [r3, #8]
}
 80065b4:	46c0      	nop			; (mov r8, r8)
 80065b6:	46bd      	mov	sp, r7
 80065b8:	b006      	add	sp, #24
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	ffff00ff 	.word	0xffff00ff

080065c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2238      	movs	r2, #56	; 0x38
 80065ce:	5c9b      	ldrb	r3, [r3, r2]
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d101      	bne.n	80065d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065d4:	2302      	movs	r3, #2
 80065d6:	e032      	b.n	800663e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2238      	movs	r2, #56	; 0x38
 80065dc:	2101      	movs	r1, #1
 80065de:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2239      	movs	r2, #57	; 0x39
 80065e4:	2102      	movs	r1, #2
 80065e6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2270      	movs	r2, #112	; 0x70
 80065fc:	4393      	bics	r3, r2
 80065fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68fa      	ldr	r2, [r7, #12]
 8006606:	4313      	orrs	r3, r2
 8006608:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	2280      	movs	r2, #128	; 0x80
 800660e:	4393      	bics	r3, r2
 8006610:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	68ba      	ldr	r2, [r7, #8]
 8006618:	4313      	orrs	r3, r2
 800661a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68fa      	ldr	r2, [r7, #12]
 8006622:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68ba      	ldr	r2, [r7, #8]
 800662a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2239      	movs	r2, #57	; 0x39
 8006630:	2101      	movs	r1, #1
 8006632:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2238      	movs	r2, #56	; 0x38
 8006638:	2100      	movs	r1, #0
 800663a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	0018      	movs	r0, r3
 8006640:	46bd      	mov	sp, r7
 8006642:	b004      	add	sp, #16
 8006644:	bd80      	pop	{r7, pc}

08006646 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8006646:	b580      	push	{r7, lr}
 8006648:	b082      	sub	sp, #8
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
 800664e:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2238      	movs	r2, #56	; 0x38
 8006654:	5c9b      	ldrb	r3, [r3, r2]
 8006656:	2b01      	cmp	r3, #1
 8006658:	d101      	bne.n	800665e <HAL_TIMEx_RemapConfig+0x18>
 800665a:	2302      	movs	r3, #2
 800665c:	e00c      	b.n	8006678 <HAL_TIMEx_RemapConfig+0x32>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2238      	movs	r2, #56	; 0x38
 8006662:	2101      	movs	r1, #1
 8006664:	5499      	strb	r1, [r3, r2]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	683a      	ldr	r2, [r7, #0]
 800666c:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2238      	movs	r2, #56	; 0x38
 8006672:	2100      	movs	r1, #0
 8006674:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	0018      	movs	r0, r3
 800667a:	46bd      	mov	sp, r7
 800667c:	b002      	add	sp, #8
 800667e:	bd80      	pop	{r7, pc}

08006680 <__errno>:
 8006680:	4b01      	ldr	r3, [pc, #4]	; (8006688 <__errno+0x8>)
 8006682:	6818      	ldr	r0, [r3, #0]
 8006684:	4770      	bx	lr
 8006686:	46c0      	nop			; (mov r8, r8)
 8006688:	20000058 	.word	0x20000058

0800668c <__libc_init_array>:
 800668c:	b570      	push	{r4, r5, r6, lr}
 800668e:	2600      	movs	r6, #0
 8006690:	4d0c      	ldr	r5, [pc, #48]	; (80066c4 <__libc_init_array+0x38>)
 8006692:	4c0d      	ldr	r4, [pc, #52]	; (80066c8 <__libc_init_array+0x3c>)
 8006694:	1b64      	subs	r4, r4, r5
 8006696:	10a4      	asrs	r4, r4, #2
 8006698:	42a6      	cmp	r6, r4
 800669a:	d109      	bne.n	80066b0 <__libc_init_array+0x24>
 800669c:	2600      	movs	r6, #0
 800669e:	f000 fc29 	bl	8006ef4 <_init>
 80066a2:	4d0a      	ldr	r5, [pc, #40]	; (80066cc <__libc_init_array+0x40>)
 80066a4:	4c0a      	ldr	r4, [pc, #40]	; (80066d0 <__libc_init_array+0x44>)
 80066a6:	1b64      	subs	r4, r4, r5
 80066a8:	10a4      	asrs	r4, r4, #2
 80066aa:	42a6      	cmp	r6, r4
 80066ac:	d105      	bne.n	80066ba <__libc_init_array+0x2e>
 80066ae:	bd70      	pop	{r4, r5, r6, pc}
 80066b0:	00b3      	lsls	r3, r6, #2
 80066b2:	58eb      	ldr	r3, [r5, r3]
 80066b4:	4798      	blx	r3
 80066b6:	3601      	adds	r6, #1
 80066b8:	e7ee      	b.n	8006698 <__libc_init_array+0xc>
 80066ba:	00b3      	lsls	r3, r6, #2
 80066bc:	58eb      	ldr	r3, [r5, r3]
 80066be:	4798      	blx	r3
 80066c0:	3601      	adds	r6, #1
 80066c2:	e7f2      	b.n	80066aa <__libc_init_array+0x1e>
 80066c4:	080076b0 	.word	0x080076b0
 80066c8:	080076b0 	.word	0x080076b0
 80066cc:	080076b0 	.word	0x080076b0
 80066d0:	080076b4 	.word	0x080076b4

080066d4 <memcpy>:
 80066d4:	2300      	movs	r3, #0
 80066d6:	b510      	push	{r4, lr}
 80066d8:	429a      	cmp	r2, r3
 80066da:	d100      	bne.n	80066de <memcpy+0xa>
 80066dc:	bd10      	pop	{r4, pc}
 80066de:	5ccc      	ldrb	r4, [r1, r3]
 80066e0:	54c4      	strb	r4, [r0, r3]
 80066e2:	3301      	adds	r3, #1
 80066e4:	e7f8      	b.n	80066d8 <memcpy+0x4>

080066e6 <memset>:
 80066e6:	0003      	movs	r3, r0
 80066e8:	1812      	adds	r2, r2, r0
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d100      	bne.n	80066f0 <memset+0xa>
 80066ee:	4770      	bx	lr
 80066f0:	7019      	strb	r1, [r3, #0]
 80066f2:	3301      	adds	r3, #1
 80066f4:	e7f9      	b.n	80066ea <memset+0x4>
	...

080066f8 <siprintf>:
 80066f8:	b40e      	push	{r1, r2, r3}
 80066fa:	b500      	push	{lr}
 80066fc:	490b      	ldr	r1, [pc, #44]	; (800672c <siprintf+0x34>)
 80066fe:	b09c      	sub	sp, #112	; 0x70
 8006700:	ab1d      	add	r3, sp, #116	; 0x74
 8006702:	9002      	str	r0, [sp, #8]
 8006704:	9006      	str	r0, [sp, #24]
 8006706:	9107      	str	r1, [sp, #28]
 8006708:	9104      	str	r1, [sp, #16]
 800670a:	4809      	ldr	r0, [pc, #36]	; (8006730 <siprintf+0x38>)
 800670c:	4909      	ldr	r1, [pc, #36]	; (8006734 <siprintf+0x3c>)
 800670e:	cb04      	ldmia	r3!, {r2}
 8006710:	9105      	str	r1, [sp, #20]
 8006712:	6800      	ldr	r0, [r0, #0]
 8006714:	a902      	add	r1, sp, #8
 8006716:	9301      	str	r3, [sp, #4]
 8006718:	f000 f870 	bl	80067fc <_svfiprintf_r>
 800671c:	2300      	movs	r3, #0
 800671e:	9a02      	ldr	r2, [sp, #8]
 8006720:	7013      	strb	r3, [r2, #0]
 8006722:	b01c      	add	sp, #112	; 0x70
 8006724:	bc08      	pop	{r3}
 8006726:	b003      	add	sp, #12
 8006728:	4718      	bx	r3
 800672a:	46c0      	nop			; (mov r8, r8)
 800672c:	7fffffff 	.word	0x7fffffff
 8006730:	20000058 	.word	0x20000058
 8006734:	ffff0208 	.word	0xffff0208

08006738 <__ssputs_r>:
 8006738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800673a:	688e      	ldr	r6, [r1, #8]
 800673c:	b085      	sub	sp, #20
 800673e:	0007      	movs	r7, r0
 8006740:	000c      	movs	r4, r1
 8006742:	9203      	str	r2, [sp, #12]
 8006744:	9301      	str	r3, [sp, #4]
 8006746:	429e      	cmp	r6, r3
 8006748:	d83c      	bhi.n	80067c4 <__ssputs_r+0x8c>
 800674a:	2390      	movs	r3, #144	; 0x90
 800674c:	898a      	ldrh	r2, [r1, #12]
 800674e:	00db      	lsls	r3, r3, #3
 8006750:	421a      	tst	r2, r3
 8006752:	d034      	beq.n	80067be <__ssputs_r+0x86>
 8006754:	2503      	movs	r5, #3
 8006756:	6909      	ldr	r1, [r1, #16]
 8006758:	6823      	ldr	r3, [r4, #0]
 800675a:	1a5b      	subs	r3, r3, r1
 800675c:	9302      	str	r3, [sp, #8]
 800675e:	6963      	ldr	r3, [r4, #20]
 8006760:	9802      	ldr	r0, [sp, #8]
 8006762:	435d      	muls	r5, r3
 8006764:	0feb      	lsrs	r3, r5, #31
 8006766:	195d      	adds	r5, r3, r5
 8006768:	9b01      	ldr	r3, [sp, #4]
 800676a:	106d      	asrs	r5, r5, #1
 800676c:	3301      	adds	r3, #1
 800676e:	181b      	adds	r3, r3, r0
 8006770:	42ab      	cmp	r3, r5
 8006772:	d900      	bls.n	8006776 <__ssputs_r+0x3e>
 8006774:	001d      	movs	r5, r3
 8006776:	0553      	lsls	r3, r2, #21
 8006778:	d532      	bpl.n	80067e0 <__ssputs_r+0xa8>
 800677a:	0029      	movs	r1, r5
 800677c:	0038      	movs	r0, r7
 800677e:	f000 fb19 	bl	8006db4 <_malloc_r>
 8006782:	1e06      	subs	r6, r0, #0
 8006784:	d109      	bne.n	800679a <__ssputs_r+0x62>
 8006786:	230c      	movs	r3, #12
 8006788:	603b      	str	r3, [r7, #0]
 800678a:	2340      	movs	r3, #64	; 0x40
 800678c:	2001      	movs	r0, #1
 800678e:	89a2      	ldrh	r2, [r4, #12]
 8006790:	4240      	negs	r0, r0
 8006792:	4313      	orrs	r3, r2
 8006794:	81a3      	strh	r3, [r4, #12]
 8006796:	b005      	add	sp, #20
 8006798:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800679a:	9a02      	ldr	r2, [sp, #8]
 800679c:	6921      	ldr	r1, [r4, #16]
 800679e:	f7ff ff99 	bl	80066d4 <memcpy>
 80067a2:	89a3      	ldrh	r3, [r4, #12]
 80067a4:	4a14      	ldr	r2, [pc, #80]	; (80067f8 <__ssputs_r+0xc0>)
 80067a6:	401a      	ands	r2, r3
 80067a8:	2380      	movs	r3, #128	; 0x80
 80067aa:	4313      	orrs	r3, r2
 80067ac:	81a3      	strh	r3, [r4, #12]
 80067ae:	9b02      	ldr	r3, [sp, #8]
 80067b0:	6126      	str	r6, [r4, #16]
 80067b2:	18f6      	adds	r6, r6, r3
 80067b4:	6026      	str	r6, [r4, #0]
 80067b6:	6165      	str	r5, [r4, #20]
 80067b8:	9e01      	ldr	r6, [sp, #4]
 80067ba:	1aed      	subs	r5, r5, r3
 80067bc:	60a5      	str	r5, [r4, #8]
 80067be:	9b01      	ldr	r3, [sp, #4]
 80067c0:	429e      	cmp	r6, r3
 80067c2:	d900      	bls.n	80067c6 <__ssputs_r+0x8e>
 80067c4:	9e01      	ldr	r6, [sp, #4]
 80067c6:	0032      	movs	r2, r6
 80067c8:	9903      	ldr	r1, [sp, #12]
 80067ca:	6820      	ldr	r0, [r4, #0]
 80067cc:	f000 fa95 	bl	8006cfa <memmove>
 80067d0:	68a3      	ldr	r3, [r4, #8]
 80067d2:	2000      	movs	r0, #0
 80067d4:	1b9b      	subs	r3, r3, r6
 80067d6:	60a3      	str	r3, [r4, #8]
 80067d8:	6823      	ldr	r3, [r4, #0]
 80067da:	199e      	adds	r6, r3, r6
 80067dc:	6026      	str	r6, [r4, #0]
 80067de:	e7da      	b.n	8006796 <__ssputs_r+0x5e>
 80067e0:	002a      	movs	r2, r5
 80067e2:	0038      	movs	r0, r7
 80067e4:	f000 fb44 	bl	8006e70 <_realloc_r>
 80067e8:	1e06      	subs	r6, r0, #0
 80067ea:	d1e0      	bne.n	80067ae <__ssputs_r+0x76>
 80067ec:	6921      	ldr	r1, [r4, #16]
 80067ee:	0038      	movs	r0, r7
 80067f0:	f000 fa96 	bl	8006d20 <_free_r>
 80067f4:	e7c7      	b.n	8006786 <__ssputs_r+0x4e>
 80067f6:	46c0      	nop			; (mov r8, r8)
 80067f8:	fffffb7f 	.word	0xfffffb7f

080067fc <_svfiprintf_r>:
 80067fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067fe:	b0a1      	sub	sp, #132	; 0x84
 8006800:	9003      	str	r0, [sp, #12]
 8006802:	001d      	movs	r5, r3
 8006804:	898b      	ldrh	r3, [r1, #12]
 8006806:	000f      	movs	r7, r1
 8006808:	0016      	movs	r6, r2
 800680a:	061b      	lsls	r3, r3, #24
 800680c:	d511      	bpl.n	8006832 <_svfiprintf_r+0x36>
 800680e:	690b      	ldr	r3, [r1, #16]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d10e      	bne.n	8006832 <_svfiprintf_r+0x36>
 8006814:	2140      	movs	r1, #64	; 0x40
 8006816:	f000 facd 	bl	8006db4 <_malloc_r>
 800681a:	6038      	str	r0, [r7, #0]
 800681c:	6138      	str	r0, [r7, #16]
 800681e:	2800      	cmp	r0, #0
 8006820:	d105      	bne.n	800682e <_svfiprintf_r+0x32>
 8006822:	230c      	movs	r3, #12
 8006824:	9a03      	ldr	r2, [sp, #12]
 8006826:	3801      	subs	r0, #1
 8006828:	6013      	str	r3, [r2, #0]
 800682a:	b021      	add	sp, #132	; 0x84
 800682c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800682e:	2340      	movs	r3, #64	; 0x40
 8006830:	617b      	str	r3, [r7, #20]
 8006832:	2300      	movs	r3, #0
 8006834:	ac08      	add	r4, sp, #32
 8006836:	6163      	str	r3, [r4, #20]
 8006838:	3320      	adds	r3, #32
 800683a:	7663      	strb	r3, [r4, #25]
 800683c:	3310      	adds	r3, #16
 800683e:	76a3      	strb	r3, [r4, #26]
 8006840:	9507      	str	r5, [sp, #28]
 8006842:	0035      	movs	r5, r6
 8006844:	782b      	ldrb	r3, [r5, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d001      	beq.n	800684e <_svfiprintf_r+0x52>
 800684a:	2b25      	cmp	r3, #37	; 0x25
 800684c:	d146      	bne.n	80068dc <_svfiprintf_r+0xe0>
 800684e:	1bab      	subs	r3, r5, r6
 8006850:	9305      	str	r3, [sp, #20]
 8006852:	d00c      	beq.n	800686e <_svfiprintf_r+0x72>
 8006854:	0032      	movs	r2, r6
 8006856:	0039      	movs	r1, r7
 8006858:	9803      	ldr	r0, [sp, #12]
 800685a:	f7ff ff6d 	bl	8006738 <__ssputs_r>
 800685e:	1c43      	adds	r3, r0, #1
 8006860:	d100      	bne.n	8006864 <_svfiprintf_r+0x68>
 8006862:	e0ae      	b.n	80069c2 <_svfiprintf_r+0x1c6>
 8006864:	6962      	ldr	r2, [r4, #20]
 8006866:	9b05      	ldr	r3, [sp, #20]
 8006868:	4694      	mov	ip, r2
 800686a:	4463      	add	r3, ip
 800686c:	6163      	str	r3, [r4, #20]
 800686e:	782b      	ldrb	r3, [r5, #0]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d100      	bne.n	8006876 <_svfiprintf_r+0x7a>
 8006874:	e0a5      	b.n	80069c2 <_svfiprintf_r+0x1c6>
 8006876:	2201      	movs	r2, #1
 8006878:	2300      	movs	r3, #0
 800687a:	4252      	negs	r2, r2
 800687c:	6062      	str	r2, [r4, #4]
 800687e:	a904      	add	r1, sp, #16
 8006880:	3254      	adds	r2, #84	; 0x54
 8006882:	1852      	adds	r2, r2, r1
 8006884:	1c6e      	adds	r6, r5, #1
 8006886:	6023      	str	r3, [r4, #0]
 8006888:	60e3      	str	r3, [r4, #12]
 800688a:	60a3      	str	r3, [r4, #8]
 800688c:	7013      	strb	r3, [r2, #0]
 800688e:	65a3      	str	r3, [r4, #88]	; 0x58
 8006890:	7831      	ldrb	r1, [r6, #0]
 8006892:	2205      	movs	r2, #5
 8006894:	4853      	ldr	r0, [pc, #332]	; (80069e4 <_svfiprintf_r+0x1e8>)
 8006896:	f000 fa25 	bl	8006ce4 <memchr>
 800689a:	1c75      	adds	r5, r6, #1
 800689c:	2800      	cmp	r0, #0
 800689e:	d11f      	bne.n	80068e0 <_svfiprintf_r+0xe4>
 80068a0:	6822      	ldr	r2, [r4, #0]
 80068a2:	06d3      	lsls	r3, r2, #27
 80068a4:	d504      	bpl.n	80068b0 <_svfiprintf_r+0xb4>
 80068a6:	2353      	movs	r3, #83	; 0x53
 80068a8:	a904      	add	r1, sp, #16
 80068aa:	185b      	adds	r3, r3, r1
 80068ac:	2120      	movs	r1, #32
 80068ae:	7019      	strb	r1, [r3, #0]
 80068b0:	0713      	lsls	r3, r2, #28
 80068b2:	d504      	bpl.n	80068be <_svfiprintf_r+0xc2>
 80068b4:	2353      	movs	r3, #83	; 0x53
 80068b6:	a904      	add	r1, sp, #16
 80068b8:	185b      	adds	r3, r3, r1
 80068ba:	212b      	movs	r1, #43	; 0x2b
 80068bc:	7019      	strb	r1, [r3, #0]
 80068be:	7833      	ldrb	r3, [r6, #0]
 80068c0:	2b2a      	cmp	r3, #42	; 0x2a
 80068c2:	d016      	beq.n	80068f2 <_svfiprintf_r+0xf6>
 80068c4:	0035      	movs	r5, r6
 80068c6:	2100      	movs	r1, #0
 80068c8:	200a      	movs	r0, #10
 80068ca:	68e3      	ldr	r3, [r4, #12]
 80068cc:	782a      	ldrb	r2, [r5, #0]
 80068ce:	1c6e      	adds	r6, r5, #1
 80068d0:	3a30      	subs	r2, #48	; 0x30
 80068d2:	2a09      	cmp	r2, #9
 80068d4:	d94e      	bls.n	8006974 <_svfiprintf_r+0x178>
 80068d6:	2900      	cmp	r1, #0
 80068d8:	d018      	beq.n	800690c <_svfiprintf_r+0x110>
 80068da:	e010      	b.n	80068fe <_svfiprintf_r+0x102>
 80068dc:	3501      	adds	r5, #1
 80068de:	e7b1      	b.n	8006844 <_svfiprintf_r+0x48>
 80068e0:	4b40      	ldr	r3, [pc, #256]	; (80069e4 <_svfiprintf_r+0x1e8>)
 80068e2:	6822      	ldr	r2, [r4, #0]
 80068e4:	1ac0      	subs	r0, r0, r3
 80068e6:	2301      	movs	r3, #1
 80068e8:	4083      	lsls	r3, r0
 80068ea:	4313      	orrs	r3, r2
 80068ec:	6023      	str	r3, [r4, #0]
 80068ee:	002e      	movs	r6, r5
 80068f0:	e7ce      	b.n	8006890 <_svfiprintf_r+0x94>
 80068f2:	9b07      	ldr	r3, [sp, #28]
 80068f4:	1d19      	adds	r1, r3, #4
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	9107      	str	r1, [sp, #28]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	db01      	blt.n	8006902 <_svfiprintf_r+0x106>
 80068fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8006900:	e004      	b.n	800690c <_svfiprintf_r+0x110>
 8006902:	425b      	negs	r3, r3
 8006904:	60e3      	str	r3, [r4, #12]
 8006906:	2302      	movs	r3, #2
 8006908:	4313      	orrs	r3, r2
 800690a:	6023      	str	r3, [r4, #0]
 800690c:	782b      	ldrb	r3, [r5, #0]
 800690e:	2b2e      	cmp	r3, #46	; 0x2e
 8006910:	d10a      	bne.n	8006928 <_svfiprintf_r+0x12c>
 8006912:	786b      	ldrb	r3, [r5, #1]
 8006914:	2b2a      	cmp	r3, #42	; 0x2a
 8006916:	d135      	bne.n	8006984 <_svfiprintf_r+0x188>
 8006918:	9b07      	ldr	r3, [sp, #28]
 800691a:	3502      	adds	r5, #2
 800691c:	1d1a      	adds	r2, r3, #4
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	9207      	str	r2, [sp, #28]
 8006922:	2b00      	cmp	r3, #0
 8006924:	db2b      	blt.n	800697e <_svfiprintf_r+0x182>
 8006926:	9309      	str	r3, [sp, #36]	; 0x24
 8006928:	4e2f      	ldr	r6, [pc, #188]	; (80069e8 <_svfiprintf_r+0x1ec>)
 800692a:	7829      	ldrb	r1, [r5, #0]
 800692c:	2203      	movs	r2, #3
 800692e:	0030      	movs	r0, r6
 8006930:	f000 f9d8 	bl	8006ce4 <memchr>
 8006934:	2800      	cmp	r0, #0
 8006936:	d006      	beq.n	8006946 <_svfiprintf_r+0x14a>
 8006938:	2340      	movs	r3, #64	; 0x40
 800693a:	1b80      	subs	r0, r0, r6
 800693c:	4083      	lsls	r3, r0
 800693e:	6822      	ldr	r2, [r4, #0]
 8006940:	3501      	adds	r5, #1
 8006942:	4313      	orrs	r3, r2
 8006944:	6023      	str	r3, [r4, #0]
 8006946:	7829      	ldrb	r1, [r5, #0]
 8006948:	2206      	movs	r2, #6
 800694a:	4828      	ldr	r0, [pc, #160]	; (80069ec <_svfiprintf_r+0x1f0>)
 800694c:	1c6e      	adds	r6, r5, #1
 800694e:	7621      	strb	r1, [r4, #24]
 8006950:	f000 f9c8 	bl	8006ce4 <memchr>
 8006954:	2800      	cmp	r0, #0
 8006956:	d03c      	beq.n	80069d2 <_svfiprintf_r+0x1d6>
 8006958:	4b25      	ldr	r3, [pc, #148]	; (80069f0 <_svfiprintf_r+0x1f4>)
 800695a:	2b00      	cmp	r3, #0
 800695c:	d125      	bne.n	80069aa <_svfiprintf_r+0x1ae>
 800695e:	2207      	movs	r2, #7
 8006960:	9b07      	ldr	r3, [sp, #28]
 8006962:	3307      	adds	r3, #7
 8006964:	4393      	bics	r3, r2
 8006966:	3308      	adds	r3, #8
 8006968:	9307      	str	r3, [sp, #28]
 800696a:	6963      	ldr	r3, [r4, #20]
 800696c:	9a04      	ldr	r2, [sp, #16]
 800696e:	189b      	adds	r3, r3, r2
 8006970:	6163      	str	r3, [r4, #20]
 8006972:	e766      	b.n	8006842 <_svfiprintf_r+0x46>
 8006974:	4343      	muls	r3, r0
 8006976:	2101      	movs	r1, #1
 8006978:	189b      	adds	r3, r3, r2
 800697a:	0035      	movs	r5, r6
 800697c:	e7a6      	b.n	80068cc <_svfiprintf_r+0xd0>
 800697e:	2301      	movs	r3, #1
 8006980:	425b      	negs	r3, r3
 8006982:	e7d0      	b.n	8006926 <_svfiprintf_r+0x12a>
 8006984:	2300      	movs	r3, #0
 8006986:	200a      	movs	r0, #10
 8006988:	001a      	movs	r2, r3
 800698a:	3501      	adds	r5, #1
 800698c:	6063      	str	r3, [r4, #4]
 800698e:	7829      	ldrb	r1, [r5, #0]
 8006990:	1c6e      	adds	r6, r5, #1
 8006992:	3930      	subs	r1, #48	; 0x30
 8006994:	2909      	cmp	r1, #9
 8006996:	d903      	bls.n	80069a0 <_svfiprintf_r+0x1a4>
 8006998:	2b00      	cmp	r3, #0
 800699a:	d0c5      	beq.n	8006928 <_svfiprintf_r+0x12c>
 800699c:	9209      	str	r2, [sp, #36]	; 0x24
 800699e:	e7c3      	b.n	8006928 <_svfiprintf_r+0x12c>
 80069a0:	4342      	muls	r2, r0
 80069a2:	2301      	movs	r3, #1
 80069a4:	1852      	adds	r2, r2, r1
 80069a6:	0035      	movs	r5, r6
 80069a8:	e7f1      	b.n	800698e <_svfiprintf_r+0x192>
 80069aa:	ab07      	add	r3, sp, #28
 80069ac:	9300      	str	r3, [sp, #0]
 80069ae:	003a      	movs	r2, r7
 80069b0:	4b10      	ldr	r3, [pc, #64]	; (80069f4 <_svfiprintf_r+0x1f8>)
 80069b2:	0021      	movs	r1, r4
 80069b4:	9803      	ldr	r0, [sp, #12]
 80069b6:	e000      	b.n	80069ba <_svfiprintf_r+0x1be>
 80069b8:	bf00      	nop
 80069ba:	9004      	str	r0, [sp, #16]
 80069bc:	9b04      	ldr	r3, [sp, #16]
 80069be:	3301      	adds	r3, #1
 80069c0:	d1d3      	bne.n	800696a <_svfiprintf_r+0x16e>
 80069c2:	89bb      	ldrh	r3, [r7, #12]
 80069c4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80069c6:	065b      	lsls	r3, r3, #25
 80069c8:	d400      	bmi.n	80069cc <_svfiprintf_r+0x1d0>
 80069ca:	e72e      	b.n	800682a <_svfiprintf_r+0x2e>
 80069cc:	2001      	movs	r0, #1
 80069ce:	4240      	negs	r0, r0
 80069d0:	e72b      	b.n	800682a <_svfiprintf_r+0x2e>
 80069d2:	ab07      	add	r3, sp, #28
 80069d4:	9300      	str	r3, [sp, #0]
 80069d6:	003a      	movs	r2, r7
 80069d8:	4b06      	ldr	r3, [pc, #24]	; (80069f4 <_svfiprintf_r+0x1f8>)
 80069da:	0021      	movs	r1, r4
 80069dc:	9803      	ldr	r0, [sp, #12]
 80069de:	f000 f879 	bl	8006ad4 <_printf_i>
 80069e2:	e7ea      	b.n	80069ba <_svfiprintf_r+0x1be>
 80069e4:	0800767d 	.word	0x0800767d
 80069e8:	08007683 	.word	0x08007683
 80069ec:	08007687 	.word	0x08007687
 80069f0:	00000000 	.word	0x00000000
 80069f4:	08006739 	.word	0x08006739

080069f8 <_printf_common>:
 80069f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069fa:	0015      	movs	r5, r2
 80069fc:	9301      	str	r3, [sp, #4]
 80069fe:	688a      	ldr	r2, [r1, #8]
 8006a00:	690b      	ldr	r3, [r1, #16]
 8006a02:	9000      	str	r0, [sp, #0]
 8006a04:	000c      	movs	r4, r1
 8006a06:	4293      	cmp	r3, r2
 8006a08:	da00      	bge.n	8006a0c <_printf_common+0x14>
 8006a0a:	0013      	movs	r3, r2
 8006a0c:	0022      	movs	r2, r4
 8006a0e:	602b      	str	r3, [r5, #0]
 8006a10:	3243      	adds	r2, #67	; 0x43
 8006a12:	7812      	ldrb	r2, [r2, #0]
 8006a14:	2a00      	cmp	r2, #0
 8006a16:	d001      	beq.n	8006a1c <_printf_common+0x24>
 8006a18:	3301      	adds	r3, #1
 8006a1a:	602b      	str	r3, [r5, #0]
 8006a1c:	6823      	ldr	r3, [r4, #0]
 8006a1e:	069b      	lsls	r3, r3, #26
 8006a20:	d502      	bpl.n	8006a28 <_printf_common+0x30>
 8006a22:	682b      	ldr	r3, [r5, #0]
 8006a24:	3302      	adds	r3, #2
 8006a26:	602b      	str	r3, [r5, #0]
 8006a28:	2706      	movs	r7, #6
 8006a2a:	6823      	ldr	r3, [r4, #0]
 8006a2c:	401f      	ands	r7, r3
 8006a2e:	d027      	beq.n	8006a80 <_printf_common+0x88>
 8006a30:	0023      	movs	r3, r4
 8006a32:	3343      	adds	r3, #67	; 0x43
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	1e5a      	subs	r2, r3, #1
 8006a38:	4193      	sbcs	r3, r2
 8006a3a:	6822      	ldr	r2, [r4, #0]
 8006a3c:	0692      	lsls	r2, r2, #26
 8006a3e:	d430      	bmi.n	8006aa2 <_printf_common+0xaa>
 8006a40:	0022      	movs	r2, r4
 8006a42:	9901      	ldr	r1, [sp, #4]
 8006a44:	3243      	adds	r2, #67	; 0x43
 8006a46:	9800      	ldr	r0, [sp, #0]
 8006a48:	9e08      	ldr	r6, [sp, #32]
 8006a4a:	47b0      	blx	r6
 8006a4c:	1c43      	adds	r3, r0, #1
 8006a4e:	d025      	beq.n	8006a9c <_printf_common+0xa4>
 8006a50:	2306      	movs	r3, #6
 8006a52:	6820      	ldr	r0, [r4, #0]
 8006a54:	682a      	ldr	r2, [r5, #0]
 8006a56:	68e1      	ldr	r1, [r4, #12]
 8006a58:	4003      	ands	r3, r0
 8006a5a:	2500      	movs	r5, #0
 8006a5c:	2b04      	cmp	r3, #4
 8006a5e:	d103      	bne.n	8006a68 <_printf_common+0x70>
 8006a60:	1a8d      	subs	r5, r1, r2
 8006a62:	43eb      	mvns	r3, r5
 8006a64:	17db      	asrs	r3, r3, #31
 8006a66:	401d      	ands	r5, r3
 8006a68:	68a3      	ldr	r3, [r4, #8]
 8006a6a:	6922      	ldr	r2, [r4, #16]
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	dd01      	ble.n	8006a74 <_printf_common+0x7c>
 8006a70:	1a9b      	subs	r3, r3, r2
 8006a72:	18ed      	adds	r5, r5, r3
 8006a74:	2700      	movs	r7, #0
 8006a76:	42bd      	cmp	r5, r7
 8006a78:	d120      	bne.n	8006abc <_printf_common+0xc4>
 8006a7a:	2000      	movs	r0, #0
 8006a7c:	e010      	b.n	8006aa0 <_printf_common+0xa8>
 8006a7e:	3701      	adds	r7, #1
 8006a80:	68e3      	ldr	r3, [r4, #12]
 8006a82:	682a      	ldr	r2, [r5, #0]
 8006a84:	1a9b      	subs	r3, r3, r2
 8006a86:	42bb      	cmp	r3, r7
 8006a88:	ddd2      	ble.n	8006a30 <_printf_common+0x38>
 8006a8a:	0022      	movs	r2, r4
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	3219      	adds	r2, #25
 8006a90:	9901      	ldr	r1, [sp, #4]
 8006a92:	9800      	ldr	r0, [sp, #0]
 8006a94:	9e08      	ldr	r6, [sp, #32]
 8006a96:	47b0      	blx	r6
 8006a98:	1c43      	adds	r3, r0, #1
 8006a9a:	d1f0      	bne.n	8006a7e <_printf_common+0x86>
 8006a9c:	2001      	movs	r0, #1
 8006a9e:	4240      	negs	r0, r0
 8006aa0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006aa2:	2030      	movs	r0, #48	; 0x30
 8006aa4:	18e1      	adds	r1, r4, r3
 8006aa6:	3143      	adds	r1, #67	; 0x43
 8006aa8:	7008      	strb	r0, [r1, #0]
 8006aaa:	0021      	movs	r1, r4
 8006aac:	1c5a      	adds	r2, r3, #1
 8006aae:	3145      	adds	r1, #69	; 0x45
 8006ab0:	7809      	ldrb	r1, [r1, #0]
 8006ab2:	18a2      	adds	r2, r4, r2
 8006ab4:	3243      	adds	r2, #67	; 0x43
 8006ab6:	3302      	adds	r3, #2
 8006ab8:	7011      	strb	r1, [r2, #0]
 8006aba:	e7c1      	b.n	8006a40 <_printf_common+0x48>
 8006abc:	0022      	movs	r2, r4
 8006abe:	2301      	movs	r3, #1
 8006ac0:	321a      	adds	r2, #26
 8006ac2:	9901      	ldr	r1, [sp, #4]
 8006ac4:	9800      	ldr	r0, [sp, #0]
 8006ac6:	9e08      	ldr	r6, [sp, #32]
 8006ac8:	47b0      	blx	r6
 8006aca:	1c43      	adds	r3, r0, #1
 8006acc:	d0e6      	beq.n	8006a9c <_printf_common+0xa4>
 8006ace:	3701      	adds	r7, #1
 8006ad0:	e7d1      	b.n	8006a76 <_printf_common+0x7e>
	...

08006ad4 <_printf_i>:
 8006ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ad6:	b089      	sub	sp, #36	; 0x24
 8006ad8:	9204      	str	r2, [sp, #16]
 8006ada:	000a      	movs	r2, r1
 8006adc:	3243      	adds	r2, #67	; 0x43
 8006ade:	9305      	str	r3, [sp, #20]
 8006ae0:	9003      	str	r0, [sp, #12]
 8006ae2:	9202      	str	r2, [sp, #8]
 8006ae4:	7e0a      	ldrb	r2, [r1, #24]
 8006ae6:	000c      	movs	r4, r1
 8006ae8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006aea:	2a6e      	cmp	r2, #110	; 0x6e
 8006aec:	d100      	bne.n	8006af0 <_printf_i+0x1c>
 8006aee:	e086      	b.n	8006bfe <_printf_i+0x12a>
 8006af0:	d81f      	bhi.n	8006b32 <_printf_i+0x5e>
 8006af2:	2a63      	cmp	r2, #99	; 0x63
 8006af4:	d033      	beq.n	8006b5e <_printf_i+0x8a>
 8006af6:	d808      	bhi.n	8006b0a <_printf_i+0x36>
 8006af8:	2a00      	cmp	r2, #0
 8006afa:	d100      	bne.n	8006afe <_printf_i+0x2a>
 8006afc:	e08c      	b.n	8006c18 <_printf_i+0x144>
 8006afe:	2a58      	cmp	r2, #88	; 0x58
 8006b00:	d04d      	beq.n	8006b9e <_printf_i+0xca>
 8006b02:	0025      	movs	r5, r4
 8006b04:	3542      	adds	r5, #66	; 0x42
 8006b06:	702a      	strb	r2, [r5, #0]
 8006b08:	e030      	b.n	8006b6c <_printf_i+0x98>
 8006b0a:	2a64      	cmp	r2, #100	; 0x64
 8006b0c:	d001      	beq.n	8006b12 <_printf_i+0x3e>
 8006b0e:	2a69      	cmp	r2, #105	; 0x69
 8006b10:	d1f7      	bne.n	8006b02 <_printf_i+0x2e>
 8006b12:	6819      	ldr	r1, [r3, #0]
 8006b14:	6825      	ldr	r5, [r4, #0]
 8006b16:	1d0a      	adds	r2, r1, #4
 8006b18:	0628      	lsls	r0, r5, #24
 8006b1a:	d529      	bpl.n	8006b70 <_printf_i+0x9c>
 8006b1c:	6808      	ldr	r0, [r1, #0]
 8006b1e:	601a      	str	r2, [r3, #0]
 8006b20:	2800      	cmp	r0, #0
 8006b22:	da03      	bge.n	8006b2c <_printf_i+0x58>
 8006b24:	232d      	movs	r3, #45	; 0x2d
 8006b26:	9a02      	ldr	r2, [sp, #8]
 8006b28:	4240      	negs	r0, r0
 8006b2a:	7013      	strb	r3, [r2, #0]
 8006b2c:	4e6b      	ldr	r6, [pc, #428]	; (8006cdc <_printf_i+0x208>)
 8006b2e:	270a      	movs	r7, #10
 8006b30:	e04f      	b.n	8006bd2 <_printf_i+0xfe>
 8006b32:	2a73      	cmp	r2, #115	; 0x73
 8006b34:	d074      	beq.n	8006c20 <_printf_i+0x14c>
 8006b36:	d808      	bhi.n	8006b4a <_printf_i+0x76>
 8006b38:	2a6f      	cmp	r2, #111	; 0x6f
 8006b3a:	d01f      	beq.n	8006b7c <_printf_i+0xa8>
 8006b3c:	2a70      	cmp	r2, #112	; 0x70
 8006b3e:	d1e0      	bne.n	8006b02 <_printf_i+0x2e>
 8006b40:	2220      	movs	r2, #32
 8006b42:	6809      	ldr	r1, [r1, #0]
 8006b44:	430a      	orrs	r2, r1
 8006b46:	6022      	str	r2, [r4, #0]
 8006b48:	e003      	b.n	8006b52 <_printf_i+0x7e>
 8006b4a:	2a75      	cmp	r2, #117	; 0x75
 8006b4c:	d016      	beq.n	8006b7c <_printf_i+0xa8>
 8006b4e:	2a78      	cmp	r2, #120	; 0x78
 8006b50:	d1d7      	bne.n	8006b02 <_printf_i+0x2e>
 8006b52:	0022      	movs	r2, r4
 8006b54:	2178      	movs	r1, #120	; 0x78
 8006b56:	3245      	adds	r2, #69	; 0x45
 8006b58:	7011      	strb	r1, [r2, #0]
 8006b5a:	4e61      	ldr	r6, [pc, #388]	; (8006ce0 <_printf_i+0x20c>)
 8006b5c:	e022      	b.n	8006ba4 <_printf_i+0xd0>
 8006b5e:	0025      	movs	r5, r4
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	3542      	adds	r5, #66	; 0x42
 8006b64:	1d11      	adds	r1, r2, #4
 8006b66:	6019      	str	r1, [r3, #0]
 8006b68:	6813      	ldr	r3, [r2, #0]
 8006b6a:	702b      	strb	r3, [r5, #0]
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e065      	b.n	8006c3c <_printf_i+0x168>
 8006b70:	6808      	ldr	r0, [r1, #0]
 8006b72:	601a      	str	r2, [r3, #0]
 8006b74:	0669      	lsls	r1, r5, #25
 8006b76:	d5d3      	bpl.n	8006b20 <_printf_i+0x4c>
 8006b78:	b200      	sxth	r0, r0
 8006b7a:	e7d1      	b.n	8006b20 <_printf_i+0x4c>
 8006b7c:	6819      	ldr	r1, [r3, #0]
 8006b7e:	6825      	ldr	r5, [r4, #0]
 8006b80:	1d08      	adds	r0, r1, #4
 8006b82:	6018      	str	r0, [r3, #0]
 8006b84:	6808      	ldr	r0, [r1, #0]
 8006b86:	062e      	lsls	r6, r5, #24
 8006b88:	d505      	bpl.n	8006b96 <_printf_i+0xc2>
 8006b8a:	4e54      	ldr	r6, [pc, #336]	; (8006cdc <_printf_i+0x208>)
 8006b8c:	2708      	movs	r7, #8
 8006b8e:	2a6f      	cmp	r2, #111	; 0x6f
 8006b90:	d01b      	beq.n	8006bca <_printf_i+0xf6>
 8006b92:	270a      	movs	r7, #10
 8006b94:	e019      	b.n	8006bca <_printf_i+0xf6>
 8006b96:	066d      	lsls	r5, r5, #25
 8006b98:	d5f7      	bpl.n	8006b8a <_printf_i+0xb6>
 8006b9a:	b280      	uxth	r0, r0
 8006b9c:	e7f5      	b.n	8006b8a <_printf_i+0xb6>
 8006b9e:	3145      	adds	r1, #69	; 0x45
 8006ba0:	4e4e      	ldr	r6, [pc, #312]	; (8006cdc <_printf_i+0x208>)
 8006ba2:	700a      	strb	r2, [r1, #0]
 8006ba4:	6818      	ldr	r0, [r3, #0]
 8006ba6:	6822      	ldr	r2, [r4, #0]
 8006ba8:	1d01      	adds	r1, r0, #4
 8006baa:	6800      	ldr	r0, [r0, #0]
 8006bac:	6019      	str	r1, [r3, #0]
 8006bae:	0615      	lsls	r5, r2, #24
 8006bb0:	d521      	bpl.n	8006bf6 <_printf_i+0x122>
 8006bb2:	07d3      	lsls	r3, r2, #31
 8006bb4:	d502      	bpl.n	8006bbc <_printf_i+0xe8>
 8006bb6:	2320      	movs	r3, #32
 8006bb8:	431a      	orrs	r2, r3
 8006bba:	6022      	str	r2, [r4, #0]
 8006bbc:	2710      	movs	r7, #16
 8006bbe:	2800      	cmp	r0, #0
 8006bc0:	d103      	bne.n	8006bca <_printf_i+0xf6>
 8006bc2:	2320      	movs	r3, #32
 8006bc4:	6822      	ldr	r2, [r4, #0]
 8006bc6:	439a      	bics	r2, r3
 8006bc8:	6022      	str	r2, [r4, #0]
 8006bca:	0023      	movs	r3, r4
 8006bcc:	2200      	movs	r2, #0
 8006bce:	3343      	adds	r3, #67	; 0x43
 8006bd0:	701a      	strb	r2, [r3, #0]
 8006bd2:	6863      	ldr	r3, [r4, #4]
 8006bd4:	60a3      	str	r3, [r4, #8]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	db58      	blt.n	8006c8c <_printf_i+0x1b8>
 8006bda:	2204      	movs	r2, #4
 8006bdc:	6821      	ldr	r1, [r4, #0]
 8006bde:	4391      	bics	r1, r2
 8006be0:	6021      	str	r1, [r4, #0]
 8006be2:	2800      	cmp	r0, #0
 8006be4:	d154      	bne.n	8006c90 <_printf_i+0x1bc>
 8006be6:	9d02      	ldr	r5, [sp, #8]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d05a      	beq.n	8006ca2 <_printf_i+0x1ce>
 8006bec:	0025      	movs	r5, r4
 8006bee:	7833      	ldrb	r3, [r6, #0]
 8006bf0:	3542      	adds	r5, #66	; 0x42
 8006bf2:	702b      	strb	r3, [r5, #0]
 8006bf4:	e055      	b.n	8006ca2 <_printf_i+0x1ce>
 8006bf6:	0655      	lsls	r5, r2, #25
 8006bf8:	d5db      	bpl.n	8006bb2 <_printf_i+0xde>
 8006bfa:	b280      	uxth	r0, r0
 8006bfc:	e7d9      	b.n	8006bb2 <_printf_i+0xde>
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	680d      	ldr	r5, [r1, #0]
 8006c02:	1d10      	adds	r0, r2, #4
 8006c04:	6949      	ldr	r1, [r1, #20]
 8006c06:	6018      	str	r0, [r3, #0]
 8006c08:	6813      	ldr	r3, [r2, #0]
 8006c0a:	062e      	lsls	r6, r5, #24
 8006c0c:	d501      	bpl.n	8006c12 <_printf_i+0x13e>
 8006c0e:	6019      	str	r1, [r3, #0]
 8006c10:	e002      	b.n	8006c18 <_printf_i+0x144>
 8006c12:	066d      	lsls	r5, r5, #25
 8006c14:	d5fb      	bpl.n	8006c0e <_printf_i+0x13a>
 8006c16:	8019      	strh	r1, [r3, #0]
 8006c18:	2300      	movs	r3, #0
 8006c1a:	9d02      	ldr	r5, [sp, #8]
 8006c1c:	6123      	str	r3, [r4, #16]
 8006c1e:	e04f      	b.n	8006cc0 <_printf_i+0x1ec>
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	1d11      	adds	r1, r2, #4
 8006c24:	6019      	str	r1, [r3, #0]
 8006c26:	6815      	ldr	r5, [r2, #0]
 8006c28:	2100      	movs	r1, #0
 8006c2a:	6862      	ldr	r2, [r4, #4]
 8006c2c:	0028      	movs	r0, r5
 8006c2e:	f000 f859 	bl	8006ce4 <memchr>
 8006c32:	2800      	cmp	r0, #0
 8006c34:	d001      	beq.n	8006c3a <_printf_i+0x166>
 8006c36:	1b40      	subs	r0, r0, r5
 8006c38:	6060      	str	r0, [r4, #4]
 8006c3a:	6863      	ldr	r3, [r4, #4]
 8006c3c:	6123      	str	r3, [r4, #16]
 8006c3e:	2300      	movs	r3, #0
 8006c40:	9a02      	ldr	r2, [sp, #8]
 8006c42:	7013      	strb	r3, [r2, #0]
 8006c44:	e03c      	b.n	8006cc0 <_printf_i+0x1ec>
 8006c46:	6923      	ldr	r3, [r4, #16]
 8006c48:	002a      	movs	r2, r5
 8006c4a:	9904      	ldr	r1, [sp, #16]
 8006c4c:	9803      	ldr	r0, [sp, #12]
 8006c4e:	9d05      	ldr	r5, [sp, #20]
 8006c50:	47a8      	blx	r5
 8006c52:	1c43      	adds	r3, r0, #1
 8006c54:	d03e      	beq.n	8006cd4 <_printf_i+0x200>
 8006c56:	6823      	ldr	r3, [r4, #0]
 8006c58:	079b      	lsls	r3, r3, #30
 8006c5a:	d415      	bmi.n	8006c88 <_printf_i+0x1b4>
 8006c5c:	9b07      	ldr	r3, [sp, #28]
 8006c5e:	68e0      	ldr	r0, [r4, #12]
 8006c60:	4298      	cmp	r0, r3
 8006c62:	da39      	bge.n	8006cd8 <_printf_i+0x204>
 8006c64:	0018      	movs	r0, r3
 8006c66:	e037      	b.n	8006cd8 <_printf_i+0x204>
 8006c68:	0022      	movs	r2, r4
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	3219      	adds	r2, #25
 8006c6e:	9904      	ldr	r1, [sp, #16]
 8006c70:	9803      	ldr	r0, [sp, #12]
 8006c72:	9e05      	ldr	r6, [sp, #20]
 8006c74:	47b0      	blx	r6
 8006c76:	1c43      	adds	r3, r0, #1
 8006c78:	d02c      	beq.n	8006cd4 <_printf_i+0x200>
 8006c7a:	3501      	adds	r5, #1
 8006c7c:	68e3      	ldr	r3, [r4, #12]
 8006c7e:	9a07      	ldr	r2, [sp, #28]
 8006c80:	1a9b      	subs	r3, r3, r2
 8006c82:	42ab      	cmp	r3, r5
 8006c84:	dcf0      	bgt.n	8006c68 <_printf_i+0x194>
 8006c86:	e7e9      	b.n	8006c5c <_printf_i+0x188>
 8006c88:	2500      	movs	r5, #0
 8006c8a:	e7f7      	b.n	8006c7c <_printf_i+0x1a8>
 8006c8c:	2800      	cmp	r0, #0
 8006c8e:	d0ad      	beq.n	8006bec <_printf_i+0x118>
 8006c90:	9d02      	ldr	r5, [sp, #8]
 8006c92:	0039      	movs	r1, r7
 8006c94:	f7f9 fabe 	bl	8000214 <__aeabi_uidivmod>
 8006c98:	5c73      	ldrb	r3, [r6, r1]
 8006c9a:	3d01      	subs	r5, #1
 8006c9c:	702b      	strb	r3, [r5, #0]
 8006c9e:	2800      	cmp	r0, #0
 8006ca0:	d1f7      	bne.n	8006c92 <_printf_i+0x1be>
 8006ca2:	2f08      	cmp	r7, #8
 8006ca4:	d109      	bne.n	8006cba <_printf_i+0x1e6>
 8006ca6:	6823      	ldr	r3, [r4, #0]
 8006ca8:	07db      	lsls	r3, r3, #31
 8006caa:	d506      	bpl.n	8006cba <_printf_i+0x1e6>
 8006cac:	6863      	ldr	r3, [r4, #4]
 8006cae:	6922      	ldr	r2, [r4, #16]
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	dc02      	bgt.n	8006cba <_printf_i+0x1e6>
 8006cb4:	2330      	movs	r3, #48	; 0x30
 8006cb6:	3d01      	subs	r5, #1
 8006cb8:	702b      	strb	r3, [r5, #0]
 8006cba:	9b02      	ldr	r3, [sp, #8]
 8006cbc:	1b5b      	subs	r3, r3, r5
 8006cbe:	6123      	str	r3, [r4, #16]
 8006cc0:	9b05      	ldr	r3, [sp, #20]
 8006cc2:	aa07      	add	r2, sp, #28
 8006cc4:	9300      	str	r3, [sp, #0]
 8006cc6:	0021      	movs	r1, r4
 8006cc8:	9b04      	ldr	r3, [sp, #16]
 8006cca:	9803      	ldr	r0, [sp, #12]
 8006ccc:	f7ff fe94 	bl	80069f8 <_printf_common>
 8006cd0:	1c43      	adds	r3, r0, #1
 8006cd2:	d1b8      	bne.n	8006c46 <_printf_i+0x172>
 8006cd4:	2001      	movs	r0, #1
 8006cd6:	4240      	negs	r0, r0
 8006cd8:	b009      	add	sp, #36	; 0x24
 8006cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cdc:	0800768e 	.word	0x0800768e
 8006ce0:	0800769f 	.word	0x0800769f

08006ce4 <memchr>:
 8006ce4:	b2c9      	uxtb	r1, r1
 8006ce6:	1882      	adds	r2, r0, r2
 8006ce8:	4290      	cmp	r0, r2
 8006cea:	d101      	bne.n	8006cf0 <memchr+0xc>
 8006cec:	2000      	movs	r0, #0
 8006cee:	4770      	bx	lr
 8006cf0:	7803      	ldrb	r3, [r0, #0]
 8006cf2:	428b      	cmp	r3, r1
 8006cf4:	d0fb      	beq.n	8006cee <memchr+0xa>
 8006cf6:	3001      	adds	r0, #1
 8006cf8:	e7f6      	b.n	8006ce8 <memchr+0x4>

08006cfa <memmove>:
 8006cfa:	b510      	push	{r4, lr}
 8006cfc:	4288      	cmp	r0, r1
 8006cfe:	d902      	bls.n	8006d06 <memmove+0xc>
 8006d00:	188b      	adds	r3, r1, r2
 8006d02:	4298      	cmp	r0, r3
 8006d04:	d303      	bcc.n	8006d0e <memmove+0x14>
 8006d06:	2300      	movs	r3, #0
 8006d08:	e007      	b.n	8006d1a <memmove+0x20>
 8006d0a:	5c8b      	ldrb	r3, [r1, r2]
 8006d0c:	5483      	strb	r3, [r0, r2]
 8006d0e:	3a01      	subs	r2, #1
 8006d10:	d2fb      	bcs.n	8006d0a <memmove+0x10>
 8006d12:	bd10      	pop	{r4, pc}
 8006d14:	5ccc      	ldrb	r4, [r1, r3]
 8006d16:	54c4      	strb	r4, [r0, r3]
 8006d18:	3301      	adds	r3, #1
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d1fa      	bne.n	8006d14 <memmove+0x1a>
 8006d1e:	e7f8      	b.n	8006d12 <memmove+0x18>

08006d20 <_free_r>:
 8006d20:	b570      	push	{r4, r5, r6, lr}
 8006d22:	0005      	movs	r5, r0
 8006d24:	2900      	cmp	r1, #0
 8006d26:	d010      	beq.n	8006d4a <_free_r+0x2a>
 8006d28:	1f0c      	subs	r4, r1, #4
 8006d2a:	6823      	ldr	r3, [r4, #0]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	da00      	bge.n	8006d32 <_free_r+0x12>
 8006d30:	18e4      	adds	r4, r4, r3
 8006d32:	0028      	movs	r0, r5
 8006d34:	f000 f8d4 	bl	8006ee0 <__malloc_lock>
 8006d38:	4a1d      	ldr	r2, [pc, #116]	; (8006db0 <_free_r+0x90>)
 8006d3a:	6813      	ldr	r3, [r2, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d105      	bne.n	8006d4c <_free_r+0x2c>
 8006d40:	6063      	str	r3, [r4, #4]
 8006d42:	6014      	str	r4, [r2, #0]
 8006d44:	0028      	movs	r0, r5
 8006d46:	f000 f8cc 	bl	8006ee2 <__malloc_unlock>
 8006d4a:	bd70      	pop	{r4, r5, r6, pc}
 8006d4c:	42a3      	cmp	r3, r4
 8006d4e:	d909      	bls.n	8006d64 <_free_r+0x44>
 8006d50:	6821      	ldr	r1, [r4, #0]
 8006d52:	1860      	adds	r0, r4, r1
 8006d54:	4283      	cmp	r3, r0
 8006d56:	d1f3      	bne.n	8006d40 <_free_r+0x20>
 8006d58:	6818      	ldr	r0, [r3, #0]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	1841      	adds	r1, r0, r1
 8006d5e:	6021      	str	r1, [r4, #0]
 8006d60:	e7ee      	b.n	8006d40 <_free_r+0x20>
 8006d62:	0013      	movs	r3, r2
 8006d64:	685a      	ldr	r2, [r3, #4]
 8006d66:	2a00      	cmp	r2, #0
 8006d68:	d001      	beq.n	8006d6e <_free_r+0x4e>
 8006d6a:	42a2      	cmp	r2, r4
 8006d6c:	d9f9      	bls.n	8006d62 <_free_r+0x42>
 8006d6e:	6819      	ldr	r1, [r3, #0]
 8006d70:	1858      	adds	r0, r3, r1
 8006d72:	42a0      	cmp	r0, r4
 8006d74:	d10b      	bne.n	8006d8e <_free_r+0x6e>
 8006d76:	6820      	ldr	r0, [r4, #0]
 8006d78:	1809      	adds	r1, r1, r0
 8006d7a:	1858      	adds	r0, r3, r1
 8006d7c:	6019      	str	r1, [r3, #0]
 8006d7e:	4282      	cmp	r2, r0
 8006d80:	d1e0      	bne.n	8006d44 <_free_r+0x24>
 8006d82:	6810      	ldr	r0, [r2, #0]
 8006d84:	6852      	ldr	r2, [r2, #4]
 8006d86:	1841      	adds	r1, r0, r1
 8006d88:	6019      	str	r1, [r3, #0]
 8006d8a:	605a      	str	r2, [r3, #4]
 8006d8c:	e7da      	b.n	8006d44 <_free_r+0x24>
 8006d8e:	42a0      	cmp	r0, r4
 8006d90:	d902      	bls.n	8006d98 <_free_r+0x78>
 8006d92:	230c      	movs	r3, #12
 8006d94:	602b      	str	r3, [r5, #0]
 8006d96:	e7d5      	b.n	8006d44 <_free_r+0x24>
 8006d98:	6821      	ldr	r1, [r4, #0]
 8006d9a:	1860      	adds	r0, r4, r1
 8006d9c:	4282      	cmp	r2, r0
 8006d9e:	d103      	bne.n	8006da8 <_free_r+0x88>
 8006da0:	6810      	ldr	r0, [r2, #0]
 8006da2:	6852      	ldr	r2, [r2, #4]
 8006da4:	1841      	adds	r1, r0, r1
 8006da6:	6021      	str	r1, [r4, #0]
 8006da8:	6062      	str	r2, [r4, #4]
 8006daa:	605c      	str	r4, [r3, #4]
 8006dac:	e7ca      	b.n	8006d44 <_free_r+0x24>
 8006dae:	46c0      	nop			; (mov r8, r8)
 8006db0:	20000114 	.word	0x20000114

08006db4 <_malloc_r>:
 8006db4:	2303      	movs	r3, #3
 8006db6:	b570      	push	{r4, r5, r6, lr}
 8006db8:	1ccd      	adds	r5, r1, #3
 8006dba:	439d      	bics	r5, r3
 8006dbc:	3508      	adds	r5, #8
 8006dbe:	0006      	movs	r6, r0
 8006dc0:	2d0c      	cmp	r5, #12
 8006dc2:	d21e      	bcs.n	8006e02 <_malloc_r+0x4e>
 8006dc4:	250c      	movs	r5, #12
 8006dc6:	42a9      	cmp	r1, r5
 8006dc8:	d81d      	bhi.n	8006e06 <_malloc_r+0x52>
 8006dca:	0030      	movs	r0, r6
 8006dcc:	f000 f888 	bl	8006ee0 <__malloc_lock>
 8006dd0:	4a25      	ldr	r2, [pc, #148]	; (8006e68 <_malloc_r+0xb4>)
 8006dd2:	6814      	ldr	r4, [r2, #0]
 8006dd4:	0021      	movs	r1, r4
 8006dd6:	2900      	cmp	r1, #0
 8006dd8:	d119      	bne.n	8006e0e <_malloc_r+0x5a>
 8006dda:	4c24      	ldr	r4, [pc, #144]	; (8006e6c <_malloc_r+0xb8>)
 8006ddc:	6823      	ldr	r3, [r4, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d103      	bne.n	8006dea <_malloc_r+0x36>
 8006de2:	0030      	movs	r0, r6
 8006de4:	f000 f86a 	bl	8006ebc <_sbrk_r>
 8006de8:	6020      	str	r0, [r4, #0]
 8006dea:	0029      	movs	r1, r5
 8006dec:	0030      	movs	r0, r6
 8006dee:	f000 f865 	bl	8006ebc <_sbrk_r>
 8006df2:	1c43      	adds	r3, r0, #1
 8006df4:	d12b      	bne.n	8006e4e <_malloc_r+0x9a>
 8006df6:	230c      	movs	r3, #12
 8006df8:	0030      	movs	r0, r6
 8006dfa:	6033      	str	r3, [r6, #0]
 8006dfc:	f000 f871 	bl	8006ee2 <__malloc_unlock>
 8006e00:	e003      	b.n	8006e0a <_malloc_r+0x56>
 8006e02:	2d00      	cmp	r5, #0
 8006e04:	dadf      	bge.n	8006dc6 <_malloc_r+0x12>
 8006e06:	230c      	movs	r3, #12
 8006e08:	6033      	str	r3, [r6, #0]
 8006e0a:	2000      	movs	r0, #0
 8006e0c:	bd70      	pop	{r4, r5, r6, pc}
 8006e0e:	680b      	ldr	r3, [r1, #0]
 8006e10:	1b5b      	subs	r3, r3, r5
 8006e12:	d419      	bmi.n	8006e48 <_malloc_r+0x94>
 8006e14:	2b0b      	cmp	r3, #11
 8006e16:	d903      	bls.n	8006e20 <_malloc_r+0x6c>
 8006e18:	600b      	str	r3, [r1, #0]
 8006e1a:	18cc      	adds	r4, r1, r3
 8006e1c:	6025      	str	r5, [r4, #0]
 8006e1e:	e003      	b.n	8006e28 <_malloc_r+0x74>
 8006e20:	684b      	ldr	r3, [r1, #4]
 8006e22:	428c      	cmp	r4, r1
 8006e24:	d10d      	bne.n	8006e42 <_malloc_r+0x8e>
 8006e26:	6013      	str	r3, [r2, #0]
 8006e28:	0030      	movs	r0, r6
 8006e2a:	f000 f85a 	bl	8006ee2 <__malloc_unlock>
 8006e2e:	0020      	movs	r0, r4
 8006e30:	2207      	movs	r2, #7
 8006e32:	300b      	adds	r0, #11
 8006e34:	1d23      	adds	r3, r4, #4
 8006e36:	4390      	bics	r0, r2
 8006e38:	1ac3      	subs	r3, r0, r3
 8006e3a:	d0e7      	beq.n	8006e0c <_malloc_r+0x58>
 8006e3c:	425a      	negs	r2, r3
 8006e3e:	50e2      	str	r2, [r4, r3]
 8006e40:	e7e4      	b.n	8006e0c <_malloc_r+0x58>
 8006e42:	6063      	str	r3, [r4, #4]
 8006e44:	000c      	movs	r4, r1
 8006e46:	e7ef      	b.n	8006e28 <_malloc_r+0x74>
 8006e48:	000c      	movs	r4, r1
 8006e4a:	6849      	ldr	r1, [r1, #4]
 8006e4c:	e7c3      	b.n	8006dd6 <_malloc_r+0x22>
 8006e4e:	2303      	movs	r3, #3
 8006e50:	1cc4      	adds	r4, r0, #3
 8006e52:	439c      	bics	r4, r3
 8006e54:	42a0      	cmp	r0, r4
 8006e56:	d0e1      	beq.n	8006e1c <_malloc_r+0x68>
 8006e58:	1a21      	subs	r1, r4, r0
 8006e5a:	0030      	movs	r0, r6
 8006e5c:	f000 f82e 	bl	8006ebc <_sbrk_r>
 8006e60:	1c43      	adds	r3, r0, #1
 8006e62:	d1db      	bne.n	8006e1c <_malloc_r+0x68>
 8006e64:	e7c7      	b.n	8006df6 <_malloc_r+0x42>
 8006e66:	46c0      	nop			; (mov r8, r8)
 8006e68:	20000114 	.word	0x20000114
 8006e6c:	20000118 	.word	0x20000118

08006e70 <_realloc_r>:
 8006e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e72:	0007      	movs	r7, r0
 8006e74:	000d      	movs	r5, r1
 8006e76:	0016      	movs	r6, r2
 8006e78:	2900      	cmp	r1, #0
 8006e7a:	d105      	bne.n	8006e88 <_realloc_r+0x18>
 8006e7c:	0011      	movs	r1, r2
 8006e7e:	f7ff ff99 	bl	8006db4 <_malloc_r>
 8006e82:	0004      	movs	r4, r0
 8006e84:	0020      	movs	r0, r4
 8006e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e88:	2a00      	cmp	r2, #0
 8006e8a:	d103      	bne.n	8006e94 <_realloc_r+0x24>
 8006e8c:	f7ff ff48 	bl	8006d20 <_free_r>
 8006e90:	0034      	movs	r4, r6
 8006e92:	e7f7      	b.n	8006e84 <_realloc_r+0x14>
 8006e94:	f000 f826 	bl	8006ee4 <_malloc_usable_size_r>
 8006e98:	002c      	movs	r4, r5
 8006e9a:	42b0      	cmp	r0, r6
 8006e9c:	d2f2      	bcs.n	8006e84 <_realloc_r+0x14>
 8006e9e:	0031      	movs	r1, r6
 8006ea0:	0038      	movs	r0, r7
 8006ea2:	f7ff ff87 	bl	8006db4 <_malloc_r>
 8006ea6:	1e04      	subs	r4, r0, #0
 8006ea8:	d0ec      	beq.n	8006e84 <_realloc_r+0x14>
 8006eaa:	0029      	movs	r1, r5
 8006eac:	0032      	movs	r2, r6
 8006eae:	f7ff fc11 	bl	80066d4 <memcpy>
 8006eb2:	0029      	movs	r1, r5
 8006eb4:	0038      	movs	r0, r7
 8006eb6:	f7ff ff33 	bl	8006d20 <_free_r>
 8006eba:	e7e3      	b.n	8006e84 <_realloc_r+0x14>

08006ebc <_sbrk_r>:
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	b570      	push	{r4, r5, r6, lr}
 8006ec0:	4c06      	ldr	r4, [pc, #24]	; (8006edc <_sbrk_r+0x20>)
 8006ec2:	0005      	movs	r5, r0
 8006ec4:	0008      	movs	r0, r1
 8006ec6:	6023      	str	r3, [r4, #0]
 8006ec8:	f7fb fce8 	bl	800289c <_sbrk>
 8006ecc:	1c43      	adds	r3, r0, #1
 8006ece:	d103      	bne.n	8006ed8 <_sbrk_r+0x1c>
 8006ed0:	6823      	ldr	r3, [r4, #0]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d000      	beq.n	8006ed8 <_sbrk_r+0x1c>
 8006ed6:	602b      	str	r3, [r5, #0]
 8006ed8:	bd70      	pop	{r4, r5, r6, pc}
 8006eda:	46c0      	nop			; (mov r8, r8)
 8006edc:	200002f4 	.word	0x200002f4

08006ee0 <__malloc_lock>:
 8006ee0:	4770      	bx	lr

08006ee2 <__malloc_unlock>:
 8006ee2:	4770      	bx	lr

08006ee4 <_malloc_usable_size_r>:
 8006ee4:	1f0b      	subs	r3, r1, #4
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	1f18      	subs	r0, r3, #4
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	da01      	bge.n	8006ef2 <_malloc_usable_size_r+0xe>
 8006eee:	580b      	ldr	r3, [r1, r0]
 8006ef0:	18c0      	adds	r0, r0, r3
 8006ef2:	4770      	bx	lr

08006ef4 <_init>:
 8006ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ef6:	46c0      	nop			; (mov r8, r8)
 8006ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006efa:	bc08      	pop	{r3}
 8006efc:	469e      	mov	lr, r3
 8006efe:	4770      	bx	lr

08006f00 <_fini>:
 8006f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f02:	46c0      	nop			; (mov r8, r8)
 8006f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f06:	bc08      	pop	{r3}
 8006f08:	469e      	mov	lr, r3
 8006f0a:	4770      	bx	lr
