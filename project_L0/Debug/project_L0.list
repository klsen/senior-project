
project_L0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006808  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000630  080068c8  080068c8  000168c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ef8  08006ef8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08006ef8  08006ef8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ef8  08006ef8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ef8  08006ef8  00016ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006efc  08006efc  00016efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08006f00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  20000004  08006f04  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08006f04  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001664b  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c1f  00000000  00000000  00036677  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001140  00000000  00000000  00039298  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fc0  00000000  00000000  0003a3d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017388  00000000  00000000  0003b398  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ef58  00000000  00000000  00052720  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008c94d  00000000  00000000  00061678  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000edfc5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cdc  00000000  00000000  000ee040  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080068b0 	.word	0x080068b0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	080068b0 	.word	0x080068b0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <SPI_CS_LOW>:
 */

#include "TFT_display.h"

// ---- lower level functions ----
void SPI_CS_LOW() {HAL_GPIO_WritePin(CS_GPIO, CS_PIN, GPIO_PIN_RESET);}
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
 80003f8:	4b04      	ldr	r3, [pc, #16]	; (800040c <SPI_CS_LOW+0x18>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	2180      	movs	r1, #128	; 0x80
 80003fe:	0018      	movs	r0, r3
 8000400:	f003 f9db 	bl	80037ba <HAL_GPIO_WritePin>
 8000404:	46c0      	nop			; (mov r8, r8)
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	50000800 	.word	0x50000800

08000410 <SPI_CS_HIGH>:

void SPI_CS_HIGH() {HAL_GPIO_WritePin(CS_GPIO, CS_PIN, GPIO_PIN_SET);}
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
 8000414:	4b04      	ldr	r3, [pc, #16]	; (8000428 <SPI_CS_HIGH+0x18>)
 8000416:	2201      	movs	r2, #1
 8000418:	2180      	movs	r1, #128	; 0x80
 800041a:	0018      	movs	r0, r3
 800041c:	f003 f9cd 	bl	80037ba <HAL_GPIO_WritePin>
 8000420:	46c0      	nop			; (mov r8, r8)
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	50000800 	.word	0x50000800

0800042c <SPI_DC_LOW>:

void SPI_DC_LOW() {HAL_GPIO_WritePin(DC_GPIO, DC_PIN, GPIO_PIN_RESET);}
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
 8000430:	4b04      	ldr	r3, [pc, #16]	; (8000444 <SPI_DC_LOW+0x18>)
 8000432:	2200      	movs	r2, #0
 8000434:	2140      	movs	r1, #64	; 0x40
 8000436:	0018      	movs	r0, r3
 8000438:	f003 f9bf 	bl	80037ba <HAL_GPIO_WritePin>
 800043c:	46c0      	nop			; (mov r8, r8)
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	50000400 	.word	0x50000400

08000448 <SPI_DC_HIGH>:

void SPI_DC_HIGH() {HAL_GPIO_WritePin(DC_GPIO, DC_PIN, GPIO_PIN_SET);}
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
 800044c:	4b04      	ldr	r3, [pc, #16]	; (8000460 <SPI_DC_HIGH+0x18>)
 800044e:	2201      	movs	r2, #1
 8000450:	2140      	movs	r1, #64	; 0x40
 8000452:	0018      	movs	r0, r3
 8000454:	f003 f9b1 	bl	80037ba <HAL_GPIO_WritePin>
 8000458:	46c0      	nop			; (mov r8, r8)
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	46c0      	nop			; (mov r8, r8)
 8000460:	50000400 	.word	0x50000400

08000464 <sendCommand>:

// still ripped but now im changing it
void sendCommand(uint8_t cmd, uint8_t *args, uint16_t numArgs, SPI_HandleTypeDef *hspi) {
 8000464:	b580      	push	{r7, lr}
 8000466:	b084      	sub	sp, #16
 8000468:	af00      	add	r7, sp, #0
 800046a:	60b9      	str	r1, [r7, #8]
 800046c:	0011      	movs	r1, r2
 800046e:	607b      	str	r3, [r7, #4]
 8000470:	230f      	movs	r3, #15
 8000472:	18fb      	adds	r3, r7, r3
 8000474:	1c02      	adds	r2, r0, #0
 8000476:	701a      	strb	r2, [r3, #0]
 8000478:	230c      	movs	r3, #12
 800047a:	18fb      	adds	r3, r7, r3
 800047c:	1c0a      	adds	r2, r1, #0
 800047e:	801a      	strh	r2, [r3, #0]
	while (HAL_SPI_GetState(hspi) == HAL_SPI_STATE_BUSY_TX);		// block next transfer request while DMA transfer is ongoing
 8000480:	46c0      	nop			; (mov r8, r8)
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	0018      	movs	r0, r3
 8000486:	f005 fb71 	bl	8005b6c <HAL_SPI_GetState>
 800048a:	0003      	movs	r3, r0
 800048c:	2b03      	cmp	r3, #3
 800048e:	d0f8      	beq.n	8000482 <sendCommand+0x1e>
	SPI_CS_LOW();	// chip select
 8000490:	f7ff ffb0 	bl	80003f4 <SPI_CS_LOW>

	SPI_DC_LOW();	// command mode
 8000494:	f7ff ffca 	bl	800042c <SPI_DC_LOW>
	HAL_SPI_Transmit(hspi, &cmd, 1, 1000);	// not using DMA bc it's only 1 byte
 8000498:	23fa      	movs	r3, #250	; 0xfa
 800049a:	009b      	lsls	r3, r3, #2
 800049c:	220f      	movs	r2, #15
 800049e:	18b9      	adds	r1, r7, r2
 80004a0:	6878      	ldr	r0, [r7, #4]
 80004a2:	2201      	movs	r2, #1
 80004a4:	f005 f880 	bl	80055a8 <HAL_SPI_Transmit>

	SPI_DC_HIGH();	// data mode
 80004a8:	f7ff ffce 	bl	8000448 <SPI_DC_HIGH>
	if (numArgs) {
 80004ac:	230c      	movs	r3, #12
 80004ae:	18fb      	adds	r3, r7, r3
 80004b0:	881b      	ldrh	r3, [r3, #0]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d007      	beq.n	80004c6 <sendCommand+0x62>
		HAL_SPI_Transmit_IT(hspi, args, numArgs);
 80004b6:	230c      	movs	r3, #12
 80004b8:	18fb      	adds	r3, r7, r3
 80004ba:	881a      	ldrh	r2, [r3, #0]
 80004bc:	68b9      	ldr	r1, [r7, #8]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	0018      	movs	r0, r3
 80004c2:	f005 f9bf 	bl	8005844 <HAL_SPI_Transmit_IT>
//		HAL_SPI_Transmit_DMA(hspi, args, numArgs);
	}

//	SPI_CS_HIGH();	// chip select disable
}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	46bd      	mov	sp, r7
 80004ca:	b004      	add	sp, #16
 80004cc:	bd80      	pop	{r7, pc}
	...

080004d0 <HAL_SPI_TxCpltCallback>:

// DMA callback on transfer compelete
// using only for sending data, but not commands
// dont send request when transfer is ongoing
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(CS_GPIO, CS_PIN) == GPIO_PIN_RESET) SPI_CS_HIGH();	// chip select disable
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <HAL_SPI_TxCpltCallback+0x24>)
 80004da:	2180      	movs	r1, #128	; 0x80
 80004dc:	0018      	movs	r0, r3
 80004de:	f003 f94f 	bl	8003780 <HAL_GPIO_ReadPin>
 80004e2:	1e03      	subs	r3, r0, #0
 80004e4:	d101      	bne.n	80004ea <HAL_SPI_TxCpltCallback+0x1a>
 80004e6:	f7ff ff93 	bl	8000410 <SPI_CS_HIGH>
}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	46bd      	mov	sp, r7
 80004ee:	b002      	add	sp, #8
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	50000800 	.word	0x50000800

080004f8 <displayInit>:

// array parser heavily based on Adafruit library code
void displayInit(uint8_t *args, SPI_HandleTypeDef *hspi) {
 80004f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004fa:	b085      	sub	sp, #20
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	6039      	str	r1, [r7, #0]
	uint8_t  numCommands, cmd, numArgs;
	uint16_t ms;
	uint8_t index = 0;
 8000502:	220b      	movs	r2, #11
 8000504:	0011      	movs	r1, r2
 8000506:	18bb      	adds	r3, r7, r2
 8000508:	2200      	movs	r2, #0
 800050a:	701a      	strb	r2, [r3, #0]
	uint8_t data;

	numCommands = args[index++];   // Number of commands to follow
 800050c:	000a      	movs	r2, r1
 800050e:	18bb      	adds	r3, r7, r2
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	18ba      	adds	r2, r7, r2
 8000514:	1c59      	adds	r1, r3, #1
 8000516:	7011      	strb	r1, [r2, #0]
 8000518:	001a      	movs	r2, r3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	189a      	adds	r2, r3, r2
 800051e:	230f      	movs	r3, #15
 8000520:	18fb      	adds	r3, r7, r3
 8000522:	7812      	ldrb	r2, [r2, #0]
 8000524:	701a      	strb	r2, [r3, #0]
	while(numCommands--) {                 // For each command...
 8000526:	e05e      	b.n	80005e6 <displayInit+0xee>
		cmd = args[index++];         // Read command
 8000528:	200b      	movs	r0, #11
 800052a:	183b      	adds	r3, r7, r0
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	183a      	adds	r2, r7, r0
 8000530:	1c59      	adds	r1, r3, #1
 8000532:	7011      	strb	r1, [r2, #0]
 8000534:	001a      	movs	r2, r3
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	189a      	adds	r2, r3, r2
 800053a:	230a      	movs	r3, #10
 800053c:	18fb      	adds	r3, r7, r3
 800053e:	7812      	ldrb	r2, [r2, #0]
 8000540:	701a      	strb	r2, [r3, #0]
		numArgs  = args[index++];    // Number of args to follow
 8000542:	183b      	adds	r3, r7, r0
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	183a      	adds	r2, r7, r0
 8000548:	1c59      	adds	r1, r3, #1
 800054a:	7011      	strb	r1, [r2, #0]
 800054c:	001a      	movs	r2, r3
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	189a      	adds	r2, r3, r2
 8000552:	2609      	movs	r6, #9
 8000554:	19bb      	adds	r3, r7, r6
 8000556:	7812      	ldrb	r2, [r2, #0]
 8000558:	701a      	strb	r2, [r3, #0]
		ms       = numArgs & ST_CMD_DELAY;   // If hibit set, delay follows args
 800055a:	19bb      	adds	r3, r7, r6
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	b29a      	uxth	r2, r3
 8000560:	210c      	movs	r1, #12
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2180      	movs	r1, #128	; 0x80
 8000566:	400a      	ands	r2, r1
 8000568:	801a      	strh	r2, [r3, #0]
		numArgs &= ~ST_CMD_DELAY;            // Mask out delay bit
 800056a:	19bb      	adds	r3, r7, r6
 800056c:	19ba      	adds	r2, r7, r6
 800056e:	7812      	ldrb	r2, [r2, #0]
 8000570:	217f      	movs	r1, #127	; 0x7f
 8000572:	400a      	ands	r2, r1
 8000574:	701a      	strb	r2, [r3, #0]
		sendCommand(cmd, &args[index], numArgs, hspi);
 8000576:	0005      	movs	r5, r0
 8000578:	183b      	adds	r3, r7, r0
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	687a      	ldr	r2, [r7, #4]
 800057e:	18d1      	adds	r1, r2, r3
 8000580:	19bb      	adds	r3, r7, r6
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	b29a      	uxth	r2, r3
 8000586:	683c      	ldr	r4, [r7, #0]
 8000588:	230a      	movs	r3, #10
 800058a:	18fb      	adds	r3, r7, r3
 800058c:	7818      	ldrb	r0, [r3, #0]
 800058e:	0023      	movs	r3, r4
 8000590:	f7ff ff68 	bl	8000464 <sendCommand>
		index += numArgs;
 8000594:	0028      	movs	r0, r5
 8000596:	183b      	adds	r3, r7, r0
 8000598:	1839      	adds	r1, r7, r0
 800059a:	19ba      	adds	r2, r7, r6
 800059c:	7809      	ldrb	r1, [r1, #0]
 800059e:	7812      	ldrb	r2, [r2, #0]
 80005a0:	188a      	adds	r2, r1, r2
 80005a2:	701a      	strb	r2, [r3, #0]

		if(ms) {
 80005a4:	210c      	movs	r1, #12
 80005a6:	187b      	adds	r3, r7, r1
 80005a8:	881b      	ldrh	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d01b      	beq.n	80005e6 <displayInit+0xee>
			ms = args[index++]; // Read post-command delay time (ms)
 80005ae:	220b      	movs	r2, #11
 80005b0:	18bb      	adds	r3, r7, r2
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	18ba      	adds	r2, r7, r2
 80005b6:	1c59      	adds	r1, r3, #1
 80005b8:	7011      	strb	r1, [r2, #0]
 80005ba:	001a      	movs	r2, r3
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	189b      	adds	r3, r3, r2
 80005c0:	781a      	ldrb	r2, [r3, #0]
 80005c2:	210c      	movs	r1, #12
 80005c4:	187b      	adds	r3, r7, r1
 80005c6:	801a      	strh	r2, [r3, #0]
			if(ms == 255) ms = 500;     // If 255, delay for 500 ms
 80005c8:	187b      	adds	r3, r7, r1
 80005ca:	881b      	ldrh	r3, [r3, #0]
 80005cc:	2bff      	cmp	r3, #255	; 0xff
 80005ce:	d104      	bne.n	80005da <displayInit+0xe2>
 80005d0:	230c      	movs	r3, #12
 80005d2:	18fb      	adds	r3, r7, r3
 80005d4:	22fa      	movs	r2, #250	; 0xfa
 80005d6:	0052      	lsls	r2, r2, #1
 80005d8:	801a      	strh	r2, [r3, #0]
			HAL_Delay(ms);
 80005da:	230c      	movs	r3, #12
 80005dc:	18fb      	adds	r3, r7, r3
 80005de:	881b      	ldrh	r3, [r3, #0]
 80005e0:	0018      	movs	r0, r3
 80005e2:	f002 fab7 	bl	8002b54 <HAL_Delay>
	while(numCommands--) {                 // For each command...
 80005e6:	220f      	movs	r2, #15
 80005e8:	18bb      	adds	r3, r7, r2
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	18ba      	adds	r2, r7, r2
 80005ee:	1e59      	subs	r1, r3, #1
 80005f0:	7011      	strb	r1, [r2, #0]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d198      	bne.n	8000528 <displayInit+0x30>
		}
	}

	// note: this line may be doing more work than I think
	// (hard to read in datasheet)
	data = 0xC0;
 80005f6:	2108      	movs	r1, #8
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	22c0      	movs	r2, #192	; 0xc0
 80005fc:	701a      	strb	r2, [r3, #0]
	sendCommand(ST77XX_MADCTL, &data, 1, hspi);
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	1879      	adds	r1, r7, r1
 8000602:	2201      	movs	r2, #1
 8000604:	2036      	movs	r0, #54	; 0x36
 8000606:	f7ff ff2d 	bl	8000464 <sendCommand>
}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	46bd      	mov	sp, r7
 800060e:	b005      	add	sp, #20
 8000610:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000614 <TFT_startup>:

void TFT_startup(SPI_HandleTypeDef *hspi) {
 8000614:	b590      	push	{r4, r7, lr}
 8000616:	b0a3      	sub	sp, #140	; 0x8c
 8000618:	af02      	add	r7, sp, #8
 800061a:	6078      	str	r0, [r7, #4]
	// startup sequence: rcmd1->rcmd2red->rcmd3
	uint8_t initCommands[] = {
 800061c:	240c      	movs	r4, #12
 800061e:	193a      	adds	r2, r7, r4
 8000620:	4b14      	ldr	r3, [pc, #80]	; (8000674 <TFT_startup+0x60>)
 8000622:	0010      	movs	r0, r2
 8000624:	0019      	movs	r1, r3
 8000626:	2371      	movs	r3, #113	; 0x71
 8000628:	001a      	movs	r2, r3
 800062a:	f006 f92f 	bl	800688c <memcpy>
			10,                           //     10 ms delay
		ST77XX_DISPON,    ST_CMD_DELAY, //  4: Main screen turn on, no args w/delay
			100	                        //     100 ms delay
	};

	displayInit(initCommands, hspi);
 800062e:	687a      	ldr	r2, [r7, #4]
 8000630:	193b      	adds	r3, r7, r4
 8000632:	0011      	movs	r1, r2
 8000634:	0018      	movs	r0, r3
 8000636:	f7ff ff5f 	bl	80004f8 <displayInit>
	setAddrWindow(0, 0, WIDTH, HEIGHT, hspi);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	23a0      	movs	r3, #160	; 0xa0
 8000640:	2280      	movs	r2, #128	; 0x80
 8000642:	2100      	movs	r1, #0
 8000644:	2000      	movs	r0, #0
 8000646:	f000 f821 	bl	800068c <setAddrWindow>

	// set the global variables
	cursorX = 0;
 800064a:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <TFT_startup+0x64>)
 800064c:	2200      	movs	r2, #0
 800064e:	701a      	strb	r2, [r3, #0]
	cursorY = 0;
 8000650:	4b0a      	ldr	r3, [pc, #40]	; (800067c <TFT_startup+0x68>)
 8000652:	2200      	movs	r2, #0
 8000654:	701a      	strb	r2, [r3, #0]
	textSize = 1;
 8000656:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <TFT_startup+0x6c>)
 8000658:	2201      	movs	r2, #1
 800065a:	701a      	strb	r2, [r3, #0]
	textColor = ST77XX_BLACK;
 800065c:	4b09      	ldr	r3, [pc, #36]	; (8000684 <TFT_startup+0x70>)
 800065e:	2200      	movs	r2, #0
 8000660:	801a      	strh	r2, [r3, #0]
	bg = ST77XX_WHITE;
 8000662:	4b09      	ldr	r3, [pc, #36]	; (8000688 <TFT_startup+0x74>)
 8000664:	2201      	movs	r2, #1
 8000666:	4252      	negs	r2, r2
 8000668:	801a      	strh	r2, [r3, #0]
}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	46bd      	mov	sp, r7
 800066e:	b021      	add	sp, #132	; 0x84
 8000670:	bd90      	pop	{r4, r7, pc}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	080068c8 	.word	0x080068c8
 8000678:	20000020 	.word	0x20000020
 800067c:	20000021 	.word	0x20000021
 8000680:	20000022 	.word	0x20000022
 8000684:	20000024 	.word	0x20000024
 8000688:	20000026 	.word	0x20000026

0800068c <setAddrWindow>:

// draw something: set addr window -> write to ram memory
// sets specific area on display to write pixels to
// x and y for upper left corner, w for width, h for height
void setAddrWindow(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SPI_HandleTypeDef *hspi) {
 800068c:	b5b0      	push	{r4, r5, r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	0005      	movs	r5, r0
 8000694:	000c      	movs	r4, r1
 8000696:	0010      	movs	r0, r2
 8000698:	0019      	movs	r1, r3
 800069a:	1dbb      	adds	r3, r7, #6
 800069c:	1c2a      	adds	r2, r5, #0
 800069e:	801a      	strh	r2, [r3, #0]
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	1c22      	adds	r2, r4, #0
 80006a4:	801a      	strh	r2, [r3, #0]
 80006a6:	1cbb      	adds	r3, r7, #2
 80006a8:	1c02      	adds	r2, r0, #0
 80006aa:	801a      	strh	r2, [r3, #0]
 80006ac:	003b      	movs	r3, r7
 80006ae:	1c0a      	adds	r2, r1, #0
 80006b0:	801a      	strh	r2, [r3, #0]
	// not really needed for our display
	x += _xstart;
 80006b2:	1dbb      	adds	r3, r7, #6
 80006b4:	1dba      	adds	r2, r7, #6
 80006b6:	8812      	ldrh	r2, [r2, #0]
 80006b8:	801a      	strh	r2, [r3, #0]
	y += _ystart;
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	1d3a      	adds	r2, r7, #4
 80006be:	8812      	ldrh	r2, [r2, #0]
 80006c0:	801a      	strh	r2, [r3, #0]

	uint8_t temp[4];
	temp[0] = (x & (0xFF00)) >> 8;
 80006c2:	1dbb      	adds	r3, r7, #6
 80006c4:	881b      	ldrh	r3, [r3, #0]
 80006c6:	0a1b      	lsrs	r3, r3, #8
 80006c8:	b29b      	uxth	r3, r3
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	210c      	movs	r1, #12
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	701a      	strb	r2, [r3, #0]
	temp[1] = x & (0xFF);
 80006d2:	1dbb      	adds	r3, r7, #6
 80006d4:	881b      	ldrh	r3, [r3, #0]
 80006d6:	b2da      	uxtb	r2, r3
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	705a      	strb	r2, [r3, #1]
	temp[2] = ((x+w-1) & (0xFF00)) >> 8;
 80006dc:	1dbb      	adds	r3, r7, #6
 80006de:	881a      	ldrh	r2, [r3, #0]
 80006e0:	1cbb      	adds	r3, r7, #2
 80006e2:	881b      	ldrh	r3, [r3, #0]
 80006e4:	18d3      	adds	r3, r2, r3
 80006e6:	3b01      	subs	r3, #1
 80006e8:	121b      	asrs	r3, r3, #8
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	709a      	strb	r2, [r3, #2]
	temp[3] = (x+w-1) & (0xFF);
 80006f0:	1dbb      	adds	r3, r7, #6
 80006f2:	881b      	ldrh	r3, [r3, #0]
 80006f4:	b2da      	uxtb	r2, r3
 80006f6:	1cbb      	adds	r3, r7, #2
 80006f8:	881b      	ldrh	r3, [r3, #0]
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	18d3      	adds	r3, r2, r3
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	3b01      	subs	r3, #1
 8000702:	b2da      	uxtb	r2, r3
 8000704:	187b      	adds	r3, r7, r1
 8000706:	70da      	strb	r2, [r3, #3]
	sendCommand(ST77XX_CASET, temp, 4, hspi);
 8000708:	6a3b      	ldr	r3, [r7, #32]
 800070a:	000c      	movs	r4, r1
 800070c:	1879      	adds	r1, r7, r1
 800070e:	2204      	movs	r2, #4
 8000710:	202a      	movs	r0, #42	; 0x2a
 8000712:	f7ff fea7 	bl	8000464 <sendCommand>

	temp[0] = (y & (0xFF00)) >> 8;
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	881b      	ldrh	r3, [r3, #0]
 800071a:	0a1b      	lsrs	r3, r3, #8
 800071c:	b29b      	uxth	r3, r3
 800071e:	b2da      	uxtb	r2, r3
 8000720:	0021      	movs	r1, r4
 8000722:	187b      	adds	r3, r7, r1
 8000724:	701a      	strb	r2, [r3, #0]
	temp[1] = y & (0xFF);
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	881b      	ldrh	r3, [r3, #0]
 800072a:	b2da      	uxtb	r2, r3
 800072c:	187b      	adds	r3, r7, r1
 800072e:	705a      	strb	r2, [r3, #1]
	temp[2] = ((y+h-1) & (0xFF00)) >> 8;
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	881a      	ldrh	r2, [r3, #0]
 8000734:	003b      	movs	r3, r7
 8000736:	881b      	ldrh	r3, [r3, #0]
 8000738:	18d3      	adds	r3, r2, r3
 800073a:	3b01      	subs	r3, #1
 800073c:	121b      	asrs	r3, r3, #8
 800073e:	b2da      	uxtb	r2, r3
 8000740:	187b      	adds	r3, r7, r1
 8000742:	709a      	strb	r2, [r3, #2]
	temp[3] = (y+h-1) & (0x00FF);
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	881b      	ldrh	r3, [r3, #0]
 8000748:	b2da      	uxtb	r2, r3
 800074a:	003b      	movs	r3, r7
 800074c:	881b      	ldrh	r3, [r3, #0]
 800074e:	b2db      	uxtb	r3, r3
 8000750:	18d3      	adds	r3, r2, r3
 8000752:	b2db      	uxtb	r3, r3
 8000754:	3b01      	subs	r3, #1
 8000756:	b2da      	uxtb	r2, r3
 8000758:	187b      	adds	r3, r7, r1
 800075a:	70da      	strb	r2, [r3, #3]
	sendCommand(ST77XX_RASET, temp, 4, hspi);
 800075c:	6a3b      	ldr	r3, [r7, #32]
 800075e:	1879      	adds	r1, r7, r1
 8000760:	2204      	movs	r2, #4
 8000762:	202b      	movs	r0, #43	; 0x2b
 8000764:	f7ff fe7e 	bl	8000464 <sendCommand>
}
 8000768:	46c0      	nop			; (mov r8, r8)
 800076a:	46bd      	mov	sp, r7
 800076c:	b004      	add	sp, #16
 800076e:	bdb0      	pop	{r4, r5, r7, pc}

08000770 <colorFixer>:
// 8-bit spi bus wants msb first; in array, lowest index is sent first
// because L4 is little-endian
//   for 16-bit value, it sends lower byte before upper byte
//   resulting in device thinking lower byte is upper byte
// this switches byte order around
uint16_t colorFixer(uint16_t color) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	0002      	movs	r2, r0
 8000778:	1dbb      	adds	r3, r7, #6
 800077a:	801a      	strh	r2, [r3, #0]
	uint8_t a = color & 0xFF;
 800077c:	210f      	movs	r1, #15
 800077e:	187b      	adds	r3, r7, r1
 8000780:	1dba      	adds	r2, r7, #6
 8000782:	8812      	ldrh	r2, [r2, #0]
 8000784:	701a      	strb	r2, [r3, #0]
	uint8_t b = (color & 0xFF00) >> 8;
 8000786:	1dbb      	adds	r3, r7, #6
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	0a1b      	lsrs	r3, r3, #8
 800078c:	b29a      	uxth	r2, r3
 800078e:	200e      	movs	r0, #14
 8000790:	183b      	adds	r3, r7, r0
 8000792:	701a      	strb	r2, [r3, #0]
	uint16_t ret = (a << 8) | b;
 8000794:	187b      	adds	r3, r7, r1
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	021b      	lsls	r3, r3, #8
 800079a:	b21a      	sxth	r2, r3
 800079c:	183b      	adds	r3, r7, r0
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	b21b      	sxth	r3, r3
 80007a2:	4313      	orrs	r3, r2
 80007a4:	b21a      	sxth	r2, r3
 80007a6:	210c      	movs	r1, #12
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	801a      	strh	r2, [r3, #0]

	return ret;
 80007ac:	187b      	adds	r3, r7, r1
 80007ae:	881b      	ldrh	r3, [r3, #0]
}
 80007b0:	0018      	movs	r0, r3
 80007b2:	46bd      	mov	sp, r7
 80007b4:	b004      	add	sp, #16
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <drawHLine>:
	setAddrWindow(x, y, 1, 1, hspi);
	uint16_t tempColor = colorFixer(color);		// else we're using address of something passed by value
	sendCommand(ST77XX_RAMWR, &tempColor, 2, hspi);
}

void drawHLine(uint8_t x, uint8_t y, uint8_t size, uint16_t color, SPI_HandleTypeDef *hspi) {
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	b091      	sub	sp, #68	; 0x44
 80007bc:	af02      	add	r7, sp, #8
 80007be:	000c      	movs	r4, r1
 80007c0:	0016      	movs	r6, r2
 80007c2:	0019      	movs	r1, r3
 80007c4:	2327      	movs	r3, #39	; 0x27
 80007c6:	18fa      	adds	r2, r7, r3
 80007c8:	1c03      	adds	r3, r0, #0
 80007ca:	7013      	strb	r3, [r2, #0]
 80007cc:	2326      	movs	r3, #38	; 0x26
 80007ce:	18fb      	adds	r3, r7, r3
 80007d0:	1c22      	adds	r2, r4, #0
 80007d2:	701a      	strb	r2, [r3, #0]
 80007d4:	2325      	movs	r3, #37	; 0x25
 80007d6:	18fb      	adds	r3, r7, r3
 80007d8:	1c32      	adds	r2, r6, #0
 80007da:	701a      	strb	r2, [r3, #0]
 80007dc:	2322      	movs	r3, #34	; 0x22
 80007de:	18fb      	adds	r3, r7, r3
 80007e0:	1c0a      	adds	r2, r1, #0
 80007e2:	801a      	strh	r2, [r3, #0]
 80007e4:	466b      	mov	r3, sp
 80007e6:	001e      	movs	r6, r3
	// bounds checking
	if (x < 0) x = 0;						// don't set x out of bounds
	if (x > WIDTH) x = WIDTH;
 80007e8:	2327      	movs	r3, #39	; 0x27
 80007ea:	18fb      	adds	r3, r7, r3
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	2b80      	cmp	r3, #128	; 0x80
 80007f0:	d903      	bls.n	80007fa <drawHLine+0x42>
 80007f2:	2327      	movs	r3, #39	; 0x27
 80007f4:	18fb      	adds	r3, r7, r3
 80007f6:	2280      	movs	r2, #128	; 0x80
 80007f8:	701a      	strb	r2, [r3, #0]
	if (x+size > WIDTH) size = WIDTH-x;		// don't set size so line draws out of bounds
 80007fa:	2327      	movs	r3, #39	; 0x27
 80007fc:	18fb      	adds	r3, r7, r3
 80007fe:	781a      	ldrb	r2, [r3, #0]
 8000800:	2325      	movs	r3, #37	; 0x25
 8000802:	18fb      	adds	r3, r7, r3
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	18d3      	adds	r3, r2, r3
 8000808:	2b80      	cmp	r3, #128	; 0x80
 800080a:	dd08      	ble.n	800081e <drawHLine+0x66>
 800080c:	2325      	movs	r3, #37	; 0x25
 800080e:	18fb      	adds	r3, r7, r3
 8000810:	2227      	movs	r2, #39	; 0x27
 8000812:	18ba      	adds	r2, r7, r2
 8000814:	7812      	ldrb	r2, [r2, #0]
 8000816:	2180      	movs	r1, #128	; 0x80
 8000818:	4249      	negs	r1, r1
 800081a:	1a8a      	subs	r2, r1, r2
 800081c:	701a      	strb	r2, [r3, #0]
	if (x+size < 0) size = 0-x;
	if ((y > HEIGHT) || (y < 0)) return;	// don't draw if y is out of bounds
 800081e:	2326      	movs	r3, #38	; 0x26
 8000820:	18fb      	adds	r3, r7, r3
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	2ba0      	cmp	r3, #160	; 0xa0
 8000826:	d868      	bhi.n	80008fa <drawHLine+0x142>

	setAddrWindow(x, y, size, 1, hspi);
 8000828:	2327      	movs	r3, #39	; 0x27
 800082a:	18fb      	adds	r3, r7, r3
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	b298      	uxth	r0, r3
 8000830:	2326      	movs	r3, #38	; 0x26
 8000832:	18fb      	adds	r3, r7, r3
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	b299      	uxth	r1, r3
 8000838:	2325      	movs	r3, #37	; 0x25
 800083a:	18fb      	adds	r3, r7, r3
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	b29a      	uxth	r2, r3
 8000840:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000842:	9300      	str	r3, [sp, #0]
 8000844:	2301      	movs	r3, #1
 8000846:	f7ff ff21 	bl	800068c <setAddrWindow>
	uint16_t colors[size];
 800084a:	2325      	movs	r3, #37	; 0x25
 800084c:	18fb      	adds	r3, r7, r3
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	001a      	movs	r2, r3
 8000852:	3a01      	subs	r2, #1
 8000854:	633a      	str	r2, [r7, #48]	; 0x30
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	2200      	movs	r2, #0
 800085a:	60fa      	str	r2, [r7, #12]
 800085c:	68b8      	ldr	r0, [r7, #8]
 800085e:	68f9      	ldr	r1, [r7, #12]
 8000860:	0002      	movs	r2, r0
 8000862:	0f12      	lsrs	r2, r2, #28
 8000864:	000c      	movs	r4, r1
 8000866:	0124      	lsls	r4, r4, #4
 8000868:	61fc      	str	r4, [r7, #28]
 800086a:	69fc      	ldr	r4, [r7, #28]
 800086c:	4314      	orrs	r4, r2
 800086e:	61fc      	str	r4, [r7, #28]
 8000870:	0002      	movs	r2, r0
 8000872:	0112      	lsls	r2, r2, #4
 8000874:	61ba      	str	r2, [r7, #24]
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	2200      	movs	r2, #0
 800087a:	607a      	str	r2, [r7, #4]
 800087c:	6838      	ldr	r0, [r7, #0]
 800087e:	6879      	ldr	r1, [r7, #4]
 8000880:	0002      	movs	r2, r0
 8000882:	0f12      	lsrs	r2, r2, #28
 8000884:	000c      	movs	r4, r1
 8000886:	0124      	lsls	r4, r4, #4
 8000888:	617c      	str	r4, [r7, #20]
 800088a:	697c      	ldr	r4, [r7, #20]
 800088c:	4314      	orrs	r4, r2
 800088e:	617c      	str	r4, [r7, #20]
 8000890:	0002      	movs	r2, r0
 8000892:	0112      	lsls	r2, r2, #4
 8000894:	613a      	str	r2, [r7, #16]
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	3301      	adds	r3, #1
 800089a:	3307      	adds	r3, #7
 800089c:	08db      	lsrs	r3, r3, #3
 800089e:	00db      	lsls	r3, r3, #3
 80008a0:	466a      	mov	r2, sp
 80008a2:	1ad3      	subs	r3, r2, r3
 80008a4:	469d      	mov	sp, r3
 80008a6:	ab02      	add	r3, sp, #8
 80008a8:	3301      	adds	r3, #1
 80008aa:	085b      	lsrs	r3, r3, #1
 80008ac:	005b      	lsls	r3, r3, #1
 80008ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i < size; i++) {		// better way to make array of 1 color; SPI without moving address of sent?
 80008b0:	2300      	movs	r3, #0
 80008b2:	637b      	str	r3, [r7, #52]	; 0x34
 80008b4:	e00e      	b.n	80008d4 <drawHLine+0x11c>
		colors[i] = colorFixer(color);
 80008b6:	2322      	movs	r3, #34	; 0x22
 80008b8:	18fb      	adds	r3, r7, r3
 80008ba:	881b      	ldrh	r3, [r3, #0]
 80008bc:	0018      	movs	r0, r3
 80008be:	f7ff ff57 	bl	8000770 <colorFixer>
 80008c2:	0003      	movs	r3, r0
 80008c4:	0019      	movs	r1, r3
 80008c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80008ca:	0052      	lsls	r2, r2, #1
 80008cc:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < size; i++) {		// better way to make array of 1 color; SPI without moving address of sent?
 80008ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008d0:	3301      	adds	r3, #1
 80008d2:	637b      	str	r3, [r7, #52]	; 0x34
 80008d4:	2325      	movs	r3, #37	; 0x25
 80008d6:	18fb      	adds	r3, r7, r3
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80008dc:	429a      	cmp	r2, r3
 80008de:	dbea      	blt.n	80008b6 <drawHLine+0xfe>
//		colors[i] = color;
	}

	sendCommand(ST77XX_RAMWR, colors, size*2, hspi);
 80008e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80008e2:	2325      	movs	r3, #37	; 0x25
 80008e4:	18fb      	adds	r3, r7, r3
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	18db      	adds	r3, r3, r3
 80008ec:	b29a      	uxth	r2, r3
 80008ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80008f0:	202c      	movs	r0, #44	; 0x2c
 80008f2:	f7ff fdb7 	bl	8000464 <sendCommand>
 80008f6:	46b5      	mov	sp, r6
 80008f8:	e001      	b.n	80008fe <drawHLine+0x146>
	if ((y > HEIGHT) || (y < 0)) return;	// don't draw if y is out of bounds
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	46b5      	mov	sp, r6
}
 80008fe:	46bd      	mov	sp, r7
 8000900:	b00f      	add	sp, #60	; 0x3c
 8000902:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000904 <drawBuffer>:
	}

	sendCommand(ST77XX_RAMWR, colors, size*2, hspi);
}

void drawBuffer(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t *buffer, uint16_t bufferSize, SPI_HandleTypeDef *hspi) {
 8000904:	b5b0      	push	{r4, r5, r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af02      	add	r7, sp, #8
 800090a:	0005      	movs	r5, r0
 800090c:	000c      	movs	r4, r1
 800090e:	0010      	movs	r0, r2
 8000910:	0019      	movs	r1, r3
 8000912:	1dfb      	adds	r3, r7, #7
 8000914:	1c2a      	adds	r2, r5, #0
 8000916:	701a      	strb	r2, [r3, #0]
 8000918:	1dbb      	adds	r3, r7, #6
 800091a:	1c22      	adds	r2, r4, #0
 800091c:	701a      	strb	r2, [r3, #0]
 800091e:	1d7b      	adds	r3, r7, #5
 8000920:	1c02      	adds	r2, r0, #0
 8000922:	701a      	strb	r2, [r3, #0]
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	1c0a      	adds	r2, r1, #0
 8000928:	701a      	strb	r2, [r3, #0]
	// just dont call this with out-of-range vals pls.
	if (x+w > WIDTH || y+h > HEIGHT) return;
 800092a:	1dfb      	adds	r3, r7, #7
 800092c:	781a      	ldrb	r2, [r3, #0]
 800092e:	1d7b      	adds	r3, r7, #5
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	18d3      	adds	r3, r2, r3
 8000934:	2b80      	cmp	r3, #128	; 0x80
 8000936:	dc29      	bgt.n	800098c <drawBuffer+0x88>
 8000938:	1dbb      	adds	r3, r7, #6
 800093a:	781a      	ldrb	r2, [r3, #0]
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	18d3      	adds	r3, r2, r3
 8000942:	2ba0      	cmp	r3, #160	; 0xa0
 8000944:	dc22      	bgt.n	800098c <drawBuffer+0x88>

	// also don't call this with buffer size too big bc there's not enough ram for all pixels of display
	if (bufferSize > 10240) return;
 8000946:	231c      	movs	r3, #28
 8000948:	18fb      	adds	r3, r7, r3
 800094a:	881a      	ldrh	r2, [r3, #0]
 800094c:	23a0      	movs	r3, #160	; 0xa0
 800094e:	019b      	lsls	r3, r3, #6
 8000950:	429a      	cmp	r2, r3
 8000952:	d81d      	bhi.n	8000990 <drawBuffer+0x8c>

	setAddrWindow(x, y, w, h, hspi);
 8000954:	1dfb      	adds	r3, r7, #7
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	b298      	uxth	r0, r3
 800095a:	1dbb      	adds	r3, r7, #6
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	b299      	uxth	r1, r3
 8000960:	1d7b      	adds	r3, r7, #5
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	b29a      	uxth	r2, r3
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	b29c      	uxth	r4, r3
 800096c:	6a3b      	ldr	r3, [r7, #32]
 800096e:	9300      	str	r3, [sp, #0]
 8000970:	0023      	movs	r3, r4
 8000972:	f7ff fe8b 	bl	800068c <setAddrWindow>
	sendCommand(ST77XX_RAMWR, buffer, bufferSize*2, hspi);
 8000976:	231c      	movs	r3, #28
 8000978:	18fb      	adds	r3, r7, r3
 800097a:	881b      	ldrh	r3, [r3, #0]
 800097c:	18db      	adds	r3, r3, r3
 800097e:	b29a      	uxth	r2, r3
 8000980:	6a3b      	ldr	r3, [r7, #32]
 8000982:	69b9      	ldr	r1, [r7, #24]
 8000984:	202c      	movs	r0, #44	; 0x2c
 8000986:	f7ff fd6d 	bl	8000464 <sendCommand>
 800098a:	e002      	b.n	8000992 <drawBuffer+0x8e>
	if (x+w > WIDTH || y+h > HEIGHT) return;
 800098c:	46c0      	nop			; (mov r8, r8)
 800098e:	e000      	b.n	8000992 <drawBuffer+0x8e>
	if (bufferSize > 10240) return;
 8000990:	46c0      	nop			; (mov r8, r8)
}
 8000992:	46bd      	mov	sp, r7
 8000994:	b002      	add	sp, #8
 8000996:	bdb0      	pop	{r4, r5, r7, pc}

08000998 <fillRect>:
	drawHLine(x, y+h-1, w, color, hspi);
	drawVLine(x, y, h, color, hspi);
	drawVLine(x+w-1, y, h, color, hspi);
}

void fillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t color, SPI_HandleTypeDef *hspi) {
 8000998:	b5b0      	push	{r4, r5, r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af02      	add	r7, sp, #8
 800099e:	0005      	movs	r5, r0
 80009a0:	000c      	movs	r4, r1
 80009a2:	0010      	movs	r0, r2
 80009a4:	0019      	movs	r1, r3
 80009a6:	1dfb      	adds	r3, r7, #7
 80009a8:	1c2a      	adds	r2, r5, #0
 80009aa:	701a      	strb	r2, [r3, #0]
 80009ac:	1dbb      	adds	r3, r7, #6
 80009ae:	1c22      	adds	r2, r4, #0
 80009b0:	701a      	strb	r2, [r3, #0]
 80009b2:	1d7b      	adds	r3, r7, #5
 80009b4:	1c02      	adds	r2, r0, #0
 80009b6:	701a      	strb	r2, [r3, #0]
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	1c0a      	adds	r2, r1, #0
 80009bc:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < h; i++) {
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	e014      	b.n	80009ee <fillRect+0x56>
		drawHLine(x, y+i, w, color, hspi);
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	b2da      	uxtb	r2, r3
 80009c8:	1dbb      	adds	r3, r7, #6
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	18d3      	adds	r3, r2, r3
 80009ce:	b2d9      	uxtb	r1, r3
 80009d0:	2320      	movs	r3, #32
 80009d2:	18fb      	adds	r3, r7, r3
 80009d4:	881c      	ldrh	r4, [r3, #0]
 80009d6:	1d7b      	adds	r3, r7, #5
 80009d8:	781a      	ldrb	r2, [r3, #0]
 80009da:	1dfb      	adds	r3, r7, #7
 80009dc:	7818      	ldrb	r0, [r3, #0]
 80009de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e0:	9300      	str	r3, [sp, #0]
 80009e2:	0023      	movs	r3, r4
 80009e4:	f7ff fee8 	bl	80007b8 <drawHLine>
	for (int i = 0; i < h; i++) {
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	3301      	adds	r3, #1
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	68fa      	ldr	r2, [r7, #12]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	dbe5      	blt.n	80009c4 <fillRect+0x2c>
	}
}
 80009f8:	46c0      	nop			; (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	b004      	add	sp, #16
 80009fe:	bdb0      	pop	{r4, r5, r7, pc}

08000a00 <fillScreen>:

void fillScreen(uint16_t color, SPI_HandleTypeDef *hspi) {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af02      	add	r7, sp, #8
 8000a06:	0002      	movs	r2, r0
 8000a08:	6039      	str	r1, [r7, #0]
 8000a0a:	1dbb      	adds	r3, r7, #6
 8000a0c:	801a      	strh	r2, [r3, #0]
	fillRect(0, 0, WIDTH, HEIGHT, color, hspi);
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	9301      	str	r3, [sp, #4]
 8000a12:	1dbb      	adds	r3, r7, #6
 8000a14:	881b      	ldrh	r3, [r3, #0]
 8000a16:	9300      	str	r3, [sp, #0]
 8000a18:	23a0      	movs	r3, #160	; 0xa0
 8000a1a:	2280      	movs	r2, #128	; 0x80
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	2000      	movs	r0, #0
 8000a20:	f7ff ffba 	bl	8000998 <fillRect>
}
 8000a24:	46c0      	nop			; (mov r8, r8)
 8000a26:	46bd      	mov	sp, r7
 8000a28:	b002      	add	sp, #8
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <drawChar>:
//		if (textSize == 1) drawVLine(cursorX+5, cursorY, 8, bg, hspi);
//		else fillRect(cursorX+5*textSize, cursorY, textSize, 8*textSize, bg, hspi);
//	}
//}

void drawChar(uint8_t ch, SPI_HandleTypeDef *hspi) {
 8000a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a2e:	b095      	sub	sp, #84	; 0x54
 8000a30:	af04      	add	r7, sp, #16
 8000a32:	61b9      	str	r1, [r7, #24]
 8000a34:	221f      	movs	r2, #31
 8000a36:	18ba      	adds	r2, r7, r2
 8000a38:	1c01      	adds	r1, r0, #0
 8000a3a:	7011      	strb	r1, [r2, #0]
 8000a3c:	466a      	mov	r2, sp
 8000a3e:	607a      	str	r2, [r7, #4]
	uint16_t bufferSize = 6*8*textSize*textSize;
 8000a40:	4ab7      	ldr	r2, [pc, #732]	; (8000d20 <drawChar+0x2f4>)
 8000a42:	7812      	ldrb	r2, [r2, #0]
 8000a44:	b292      	uxth	r2, r2
 8000a46:	49b6      	ldr	r1, [pc, #728]	; (8000d20 <drawChar+0x2f4>)
 8000a48:	7809      	ldrb	r1, [r1, #0]
 8000a4a:	b289      	uxth	r1, r1
 8000a4c:	434a      	muls	r2, r1
 8000a4e:	b291      	uxth	r1, r2
 8000a50:	221a      	movs	r2, #26
 8000a52:	2018      	movs	r0, #24
 8000a54:	4684      	mov	ip, r0
 8000a56:	44bc      	add	ip, r7
 8000a58:	4462      	add	r2, ip
 8000a5a:	2030      	movs	r0, #48	; 0x30
 8000a5c:	4341      	muls	r1, r0
 8000a5e:	8011      	strh	r1, [r2, #0]
	uint16_t buffer[bufferSize];
 8000a60:	221a      	movs	r2, #26
 8000a62:	2118      	movs	r1, #24
 8000a64:	468c      	mov	ip, r1
 8000a66:	44bc      	add	ip, r7
 8000a68:	4462      	add	r2, ip
 8000a6a:	8812      	ldrh	r2, [r2, #0]
 8000a6c:	0011      	movs	r1, r2
 8000a6e:	3901      	subs	r1, #1
 8000a70:	62f9      	str	r1, [r7, #44]	; 0x2c
 8000a72:	613a      	str	r2, [r7, #16]
 8000a74:	2100      	movs	r1, #0
 8000a76:	6179      	str	r1, [r7, #20]
 8000a78:	6939      	ldr	r1, [r7, #16]
 8000a7a:	0f09      	lsrs	r1, r1, #28
 8000a7c:	6978      	ldr	r0, [r7, #20]
 8000a7e:	0106      	lsls	r6, r0, #4
 8000a80:	430e      	orrs	r6, r1
 8000a82:	6939      	ldr	r1, [r7, #16]
 8000a84:	010d      	lsls	r5, r1, #4
 8000a86:	60ba      	str	r2, [r7, #8]
 8000a88:	2100      	movs	r1, #0
 8000a8a:	60f9      	str	r1, [r7, #12]
 8000a8c:	68bd      	ldr	r5, [r7, #8]
 8000a8e:	68fe      	ldr	r6, [r7, #12]
 8000a90:	0029      	movs	r1, r5
 8000a92:	0f09      	lsrs	r1, r1, #28
 8000a94:	0030      	movs	r0, r6
 8000a96:	0104      	lsls	r4, r0, #4
 8000a98:	430c      	orrs	r4, r1
 8000a9a:	0029      	movs	r1, r5
 8000a9c:	010b      	lsls	r3, r1, #4
 8000a9e:	0013      	movs	r3, r2
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	3307      	adds	r3, #7
 8000aa6:	08db      	lsrs	r3, r3, #3
 8000aa8:	00db      	lsls	r3, r3, #3
 8000aaa:	466a      	mov	r2, sp
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	469d      	mov	sp, r3
 8000ab0:	ab04      	add	r3, sp, #16
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	085b      	lsrs	r3, r3, #1
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	62bb      	str	r3, [r7, #40]	; 0x28
	int16_t rowOffset, address;

	for (int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 8000aba:	2325      	movs	r3, #37	; 0x25
 8000abc:	2218      	movs	r2, #24
 8000abe:	4694      	mov	ip, r2
 8000ac0:	44bc      	add	ip, r7
 8000ac2:	4463      	add	r3, ip
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	701a      	strb	r2, [r3, #0]
 8000ac8:	e1e0      	b.n	8000e8c <drawChar+0x460>
		uint8_t line = font[ch*5+i];
 8000aca:	231f      	movs	r3, #31
 8000acc:	18fb      	adds	r3, r7, r3
 8000ace:	781a      	ldrb	r2, [r3, #0]
 8000ad0:	0013      	movs	r3, r2
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	189a      	adds	r2, r3, r2
 8000ad6:	2325      	movs	r3, #37	; 0x25
 8000ad8:	2118      	movs	r1, #24
 8000ada:	468c      	mov	ip, r1
 8000adc:	44bc      	add	ip, r7
 8000ade:	4463      	add	r3, ip
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	b25b      	sxtb	r3, r3
 8000ae4:	18d2      	adds	r2, r2, r3
 8000ae6:	2324      	movs	r3, #36	; 0x24
 8000ae8:	2118      	movs	r1, #24
 8000aea:	468c      	mov	ip, r1
 8000aec:	44bc      	add	ip, r7
 8000aee:	4463      	add	r3, ip
 8000af0:	498c      	ldr	r1, [pc, #560]	; (8000d24 <drawChar+0x2f8>)
 8000af2:	5c8a      	ldrb	r2, [r1, r2]
 8000af4:	701a      	strb	r2, [r3, #0]
		for (int8_t j=0; j<8; j++, line >>= 1) {
 8000af6:	2323      	movs	r3, #35	; 0x23
 8000af8:	2218      	movs	r2, #24
 8000afa:	4694      	mov	ip, r2
 8000afc:	44bc      	add	ip, r7
 8000afe:	4463      	add	r3, ip
 8000b00:	2200      	movs	r2, #0
 8000b02:	701a      	strb	r2, [r3, #0]
 8000b04:	e1ac      	b.n	8000e60 <drawChar+0x434>
			if (line & 1) {
 8000b06:	2324      	movs	r3, #36	; 0x24
 8000b08:	2218      	movs	r2, #24
 8000b0a:	4694      	mov	ip, r2
 8000b0c:	44bc      	add	ip, r7
 8000b0e:	4463      	add	r3, ip
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	2201      	movs	r2, #1
 8000b14:	4013      	ands	r3, r2
 8000b16:	d100      	bne.n	8000b1a <drawChar+0xee>
 8000b18:	e0be      	b.n	8000c98 <drawChar+0x26c>
				if (textSize == 1) {
 8000b1a:	4b81      	ldr	r3, [pc, #516]	; (8000d20 <drawChar+0x2f4>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d118      	bne.n	8000b54 <drawChar+0x128>
					buffer[i+j*6] = textColor;
 8000b22:	2325      	movs	r3, #37	; 0x25
 8000b24:	2218      	movs	r2, #24
 8000b26:	4694      	mov	ip, r2
 8000b28:	44bc      	add	ip, r7
 8000b2a:	4463      	add	r3, ip
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	5659      	ldrsb	r1, [r3, r1]
 8000b30:	2323      	movs	r3, #35	; 0x23
 8000b32:	2218      	movs	r2, #24
 8000b34:	4694      	mov	ip, r2
 8000b36:	44bc      	add	ip, r7
 8000b38:	4463      	add	r3, ip
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	569a      	ldrsb	r2, [r3, r2]
 8000b3e:	0013      	movs	r3, r2
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	189b      	adds	r3, r3, r2
 8000b44:	005b      	lsls	r3, r3, #1
 8000b46:	18ca      	adds	r2, r1, r3
 8000b48:	4b77      	ldr	r3, [pc, #476]	; (8000d28 <drawChar+0x2fc>)
 8000b4a:	8819      	ldrh	r1, [r3, #0]
 8000b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b4e:	0052      	lsls	r2, r2, #1
 8000b50:	52d1      	strh	r1, [r2, r3]
 8000b52:	e16f      	b.n	8000e34 <drawChar+0x408>
				}
				else {
					for (int8_t k = 0; k < textSize; k++) {
 8000b54:	2322      	movs	r3, #34	; 0x22
 8000b56:	2218      	movs	r2, #24
 8000b58:	4694      	mov	ip, r2
 8000b5a:	44bc      	add	ip, r7
 8000b5c:	4463      	add	r3, ip
 8000b5e:	2200      	movs	r2, #0
 8000b60:	701a      	strb	r2, [r3, #0]
 8000b62:	e08c      	b.n	8000c7e <drawChar+0x252>
						rowOffset = textSize*6;
 8000b64:	4b6e      	ldr	r3, [pc, #440]	; (8000d20 <drawChar+0x2f4>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	b29b      	uxth	r3, r3
 8000b6a:	1c1a      	adds	r2, r3, #0
 8000b6c:	1c13      	adds	r3, r2, #0
 8000b6e:	18db      	adds	r3, r3, r3
 8000b70:	189b      	adds	r3, r3, r2
 8000b72:	18db      	adds	r3, r3, r3
 8000b74:	b29a      	uxth	r2, r3
 8000b76:	2326      	movs	r3, #38	; 0x26
 8000b78:	2118      	movs	r1, #24
 8000b7a:	468c      	mov	ip, r1
 8000b7c:	44bc      	add	ip, r7
 8000b7e:	4463      	add	r3, ip
 8000b80:	801a      	strh	r2, [r3, #0]
						for (int8_t l = 0; l < textSize; l++) {
 8000b82:	2321      	movs	r3, #33	; 0x21
 8000b84:	2218      	movs	r2, #24
 8000b86:	4694      	mov	ip, r2
 8000b88:	44bc      	add	ip, r7
 8000b8a:	4463      	add	r3, ip
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	701a      	strb	r2, [r3, #0]
 8000b90:	e05e      	b.n	8000c50 <drawChar+0x224>
							address = (textSize*textSize*j*6)+(i*textSize);
 8000b92:	4b63      	ldr	r3, [pc, #396]	; (8000d20 <drawChar+0x2f4>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	4a61      	ldr	r2, [pc, #388]	; (8000d20 <drawChar+0x2f4>)
 8000b9a:	7812      	ldrb	r2, [r2, #0]
 8000b9c:	b292      	uxth	r2, r2
 8000b9e:	4353      	muls	r3, r2
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	2223      	movs	r2, #35	; 0x23
 8000ba4:	2118      	movs	r1, #24
 8000ba6:	468c      	mov	ip, r1
 8000ba8:	44bc      	add	ip, r7
 8000baa:	4462      	add	r2, ip
 8000bac:	7812      	ldrb	r2, [r2, #0]
 8000bae:	b252      	sxtb	r2, r2
 8000bb0:	b292      	uxth	r2, r2
 8000bb2:	4353      	muls	r3, r2
 8000bb4:	b29b      	uxth	r3, r3
 8000bb6:	1c1a      	adds	r2, r3, #0
 8000bb8:	1c13      	adds	r3, r2, #0
 8000bba:	18db      	adds	r3, r3, r3
 8000bbc:	189b      	adds	r3, r3, r2
 8000bbe:	18db      	adds	r3, r3, r3
 8000bc0:	b29a      	uxth	r2, r3
 8000bc2:	2325      	movs	r3, #37	; 0x25
 8000bc4:	2118      	movs	r1, #24
 8000bc6:	468c      	mov	ip, r1
 8000bc8:	44bc      	add	ip, r7
 8000bca:	4463      	add	r3, ip
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	b25b      	sxtb	r3, r3
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	4953      	ldr	r1, [pc, #332]	; (8000d20 <drawChar+0x2f4>)
 8000bd4:	7809      	ldrb	r1, [r1, #0]
 8000bd6:	b289      	uxth	r1, r1
 8000bd8:	434b      	muls	r3, r1
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	18d3      	adds	r3, r2, r3
 8000bde:	b29a      	uxth	r2, r3
 8000be0:	210e      	movs	r1, #14
 8000be2:	2418      	movs	r4, #24
 8000be4:	193b      	adds	r3, r7, r4
 8000be6:	185b      	adds	r3, r3, r1
 8000be8:	801a      	strh	r2, [r3, #0]
							address += rowOffset*k+l;
 8000bea:	2322      	movs	r3, #34	; 0x22
 8000bec:	2218      	movs	r2, #24
 8000bee:	4694      	mov	ip, r2
 8000bf0:	44bc      	add	ip, r7
 8000bf2:	4463      	add	r3, ip
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	b25b      	sxtb	r3, r3
 8000bf8:	b29b      	uxth	r3, r3
 8000bfa:	2226      	movs	r2, #38	; 0x26
 8000bfc:	2018      	movs	r0, #24
 8000bfe:	4684      	mov	ip, r0
 8000c00:	44bc      	add	ip, r7
 8000c02:	4462      	add	r2, ip
 8000c04:	8812      	ldrh	r2, [r2, #0]
 8000c06:	4353      	muls	r3, r2
 8000c08:	b29a      	uxth	r2, r3
 8000c0a:	2021      	movs	r0, #33	; 0x21
 8000c0c:	193b      	adds	r3, r7, r4
 8000c0e:	181b      	adds	r3, r3, r0
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	b25b      	sxtb	r3, r3
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	18d3      	adds	r3, r2, r3
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	193b      	adds	r3, r7, r4
 8000c1c:	185b      	adds	r3, r3, r1
 8000c1e:	881b      	ldrh	r3, [r3, #0]
 8000c20:	18d3      	adds	r3, r2, r3
 8000c22:	b29a      	uxth	r2, r3
 8000c24:	193b      	adds	r3, r7, r4
 8000c26:	185b      	adds	r3, r3, r1
 8000c28:	801a      	strh	r2, [r3, #0]
							buffer[address] = textColor;
 8000c2a:	193b      	adds	r3, r7, r4
 8000c2c:	185b      	adds	r3, r3, r1
 8000c2e:	2200      	movs	r2, #0
 8000c30:	5e9a      	ldrsh	r2, [r3, r2]
 8000c32:	4b3d      	ldr	r3, [pc, #244]	; (8000d28 <drawChar+0x2fc>)
 8000c34:	8819      	ldrh	r1, [r3, #0]
 8000c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c38:	0052      	lsls	r2, r2, #1
 8000c3a:	52d1      	strh	r1, [r2, r3]
						for (int8_t l = 0; l < textSize; l++) {
 8000c3c:	193b      	adds	r3, r7, r4
 8000c3e:	181b      	adds	r3, r3, r0
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	b25b      	sxtb	r3, r3
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	3301      	adds	r3, #1
 8000c48:	b2da      	uxtb	r2, r3
 8000c4a:	193b      	adds	r3, r7, r4
 8000c4c:	181b      	adds	r3, r3, r0
 8000c4e:	701a      	strb	r2, [r3, #0]
 8000c50:	2321      	movs	r3, #33	; 0x21
 8000c52:	2218      	movs	r2, #24
 8000c54:	4694      	mov	ip, r2
 8000c56:	44bc      	add	ip, r7
 8000c58:	4463      	add	r3, ip
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	b25b      	sxtb	r3, r3
 8000c5e:	4a30      	ldr	r2, [pc, #192]	; (8000d20 <drawChar+0x2f4>)
 8000c60:	7812      	ldrb	r2, [r2, #0]
 8000c62:	4293      	cmp	r3, r2
 8000c64:	db95      	blt.n	8000b92 <drawChar+0x166>
					for (int8_t k = 0; k < textSize; k++) {
 8000c66:	2122      	movs	r1, #34	; 0x22
 8000c68:	2018      	movs	r0, #24
 8000c6a:	183b      	adds	r3, r7, r0
 8000c6c:	185b      	adds	r3, r3, r1
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	b25b      	sxtb	r3, r3
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	3301      	adds	r3, #1
 8000c76:	b2da      	uxtb	r2, r3
 8000c78:	183b      	adds	r3, r7, r0
 8000c7a:	185b      	adds	r3, r3, r1
 8000c7c:	701a      	strb	r2, [r3, #0]
 8000c7e:	2322      	movs	r3, #34	; 0x22
 8000c80:	2218      	movs	r2, #24
 8000c82:	4694      	mov	ip, r2
 8000c84:	44bc      	add	ip, r7
 8000c86:	4463      	add	r3, ip
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	b25b      	sxtb	r3, r3
 8000c8c:	4a24      	ldr	r2, [pc, #144]	; (8000d20 <drawChar+0x2f4>)
 8000c8e:	7812      	ldrb	r2, [r2, #0]
 8000c90:	4293      	cmp	r3, r2
 8000c92:	da00      	bge.n	8000c96 <drawChar+0x26a>
 8000c94:	e766      	b.n	8000b64 <drawChar+0x138>
 8000c96:	e0cd      	b.n	8000e34 <drawChar+0x408>
						}
					}
//					fillRect(cursorX+i*textSize, cursorY+j*textSize, textSize, textSize, textColor, hspi);
				}
			} else if (bg != textColor) {
 8000c98:	4b24      	ldr	r3, [pc, #144]	; (8000d2c <drawChar+0x300>)
 8000c9a:	881a      	ldrh	r2, [r3, #0]
 8000c9c:	4b22      	ldr	r3, [pc, #136]	; (8000d28 <drawChar+0x2fc>)
 8000c9e:	881b      	ldrh	r3, [r3, #0]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d100      	bne.n	8000ca6 <drawChar+0x27a>
 8000ca4:	e0c6      	b.n	8000e34 <drawChar+0x408>
				if (textSize == 1) {
 8000ca6:	4b1e      	ldr	r3, [pc, #120]	; (8000d20 <drawChar+0x2f4>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d118      	bne.n	8000ce0 <drawChar+0x2b4>
					buffer[i+j*6] = bg;
 8000cae:	2325      	movs	r3, #37	; 0x25
 8000cb0:	2218      	movs	r2, #24
 8000cb2:	4694      	mov	ip, r2
 8000cb4:	44bc      	add	ip, r7
 8000cb6:	4463      	add	r3, ip
 8000cb8:	2100      	movs	r1, #0
 8000cba:	5659      	ldrsb	r1, [r3, r1]
 8000cbc:	2323      	movs	r3, #35	; 0x23
 8000cbe:	2218      	movs	r2, #24
 8000cc0:	4694      	mov	ip, r2
 8000cc2:	44bc      	add	ip, r7
 8000cc4:	4463      	add	r3, ip
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	569a      	ldrsb	r2, [r3, r2]
 8000cca:	0013      	movs	r3, r2
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	189b      	adds	r3, r3, r2
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	18ca      	adds	r2, r1, r3
 8000cd4:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <drawChar+0x300>)
 8000cd6:	8819      	ldrh	r1, [r3, #0]
 8000cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cda:	0052      	lsls	r2, r2, #1
 8000cdc:	52d1      	strh	r1, [r2, r3]
 8000cde:	e0a9      	b.n	8000e34 <drawChar+0x408>
				}
				else {
					for (int8_t k = 0; k < textSize; k++) {
 8000ce0:	2320      	movs	r3, #32
 8000ce2:	2218      	movs	r2, #24
 8000ce4:	4694      	mov	ip, r2
 8000ce6:	44bc      	add	ip, r7
 8000ce8:	4463      	add	r3, ip
 8000cea:	2200      	movs	r2, #0
 8000cec:	701a      	strb	r2, [r3, #0]
 8000cee:	e095      	b.n	8000e1c <drawChar+0x3f0>
						rowOffset = textSize*6;
 8000cf0:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <drawChar+0x2f4>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	1c1a      	adds	r2, r3, #0
 8000cf8:	1c13      	adds	r3, r2, #0
 8000cfa:	18db      	adds	r3, r3, r3
 8000cfc:	189b      	adds	r3, r3, r2
 8000cfe:	18db      	adds	r3, r3, r3
 8000d00:	b29a      	uxth	r2, r3
 8000d02:	2326      	movs	r3, #38	; 0x26
 8000d04:	2118      	movs	r1, #24
 8000d06:	468c      	mov	ip, r1
 8000d08:	44bc      	add	ip, r7
 8000d0a:	4463      	add	r3, ip
 8000d0c:	801a      	strh	r2, [r3, #0]
						for (int8_t l = 0; l < textSize; l++) {
 8000d0e:	231f      	movs	r3, #31
 8000d10:	2218      	movs	r2, #24
 8000d12:	4694      	mov	ip, r2
 8000d14:	44bc      	add	ip, r7
 8000d16:	4463      	add	r3, ip
 8000d18:	2200      	movs	r2, #0
 8000d1a:	701a      	strb	r2, [r3, #0]
 8000d1c:	e067      	b.n	8000dee <drawChar+0x3c2>
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	20000022 	.word	0x20000022
 8000d24:	080069ac 	.word	0x080069ac
 8000d28:	20000024 	.word	0x20000024
 8000d2c:	20000026 	.word	0x20000026
							address = (textSize*textSize*j*6)+(i*textSize);
 8000d30:	4bd1      	ldr	r3, [pc, #836]	; (8001078 <drawChar+0x64c>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	4ad0      	ldr	r2, [pc, #832]	; (8001078 <drawChar+0x64c>)
 8000d38:	7812      	ldrb	r2, [r2, #0]
 8000d3a:	b292      	uxth	r2, r2
 8000d3c:	4353      	muls	r3, r2
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	2223      	movs	r2, #35	; 0x23
 8000d42:	2118      	movs	r1, #24
 8000d44:	468c      	mov	ip, r1
 8000d46:	44bc      	add	ip, r7
 8000d48:	4462      	add	r2, ip
 8000d4a:	7812      	ldrb	r2, [r2, #0]
 8000d4c:	b252      	sxtb	r2, r2
 8000d4e:	b292      	uxth	r2, r2
 8000d50:	4353      	muls	r3, r2
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	1c1a      	adds	r2, r3, #0
 8000d56:	1c13      	adds	r3, r2, #0
 8000d58:	18db      	adds	r3, r3, r3
 8000d5a:	189b      	adds	r3, r3, r2
 8000d5c:	18db      	adds	r3, r3, r3
 8000d5e:	b29a      	uxth	r2, r3
 8000d60:	2325      	movs	r3, #37	; 0x25
 8000d62:	2118      	movs	r1, #24
 8000d64:	468c      	mov	ip, r1
 8000d66:	44bc      	add	ip, r7
 8000d68:	4463      	add	r3, ip
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	b25b      	sxtb	r3, r3
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	49c1      	ldr	r1, [pc, #772]	; (8001078 <drawChar+0x64c>)
 8000d72:	7809      	ldrb	r1, [r1, #0]
 8000d74:	b289      	uxth	r1, r1
 8000d76:	434b      	muls	r3, r1
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	18d3      	adds	r3, r2, r3
 8000d7c:	b29a      	uxth	r2, r3
 8000d7e:	210e      	movs	r1, #14
 8000d80:	2418      	movs	r4, #24
 8000d82:	193b      	adds	r3, r7, r4
 8000d84:	185b      	adds	r3, r3, r1
 8000d86:	801a      	strh	r2, [r3, #0]
							address += rowOffset*k+l;
 8000d88:	2320      	movs	r3, #32
 8000d8a:	2218      	movs	r2, #24
 8000d8c:	4694      	mov	ip, r2
 8000d8e:	44bc      	add	ip, r7
 8000d90:	4463      	add	r3, ip
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	b25b      	sxtb	r3, r3
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	2226      	movs	r2, #38	; 0x26
 8000d9a:	2018      	movs	r0, #24
 8000d9c:	4684      	mov	ip, r0
 8000d9e:	44bc      	add	ip, r7
 8000da0:	4462      	add	r2, ip
 8000da2:	8812      	ldrh	r2, [r2, #0]
 8000da4:	4353      	muls	r3, r2
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	201f      	movs	r0, #31
 8000daa:	193b      	adds	r3, r7, r4
 8000dac:	181b      	adds	r3, r3, r0
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	b25b      	sxtb	r3, r3
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	18d3      	adds	r3, r2, r3
 8000db6:	b29a      	uxth	r2, r3
 8000db8:	193b      	adds	r3, r7, r4
 8000dba:	185b      	adds	r3, r3, r1
 8000dbc:	881b      	ldrh	r3, [r3, #0]
 8000dbe:	18d3      	adds	r3, r2, r3
 8000dc0:	b29a      	uxth	r2, r3
 8000dc2:	193b      	adds	r3, r7, r4
 8000dc4:	185b      	adds	r3, r3, r1
 8000dc6:	801a      	strh	r2, [r3, #0]
							buffer[address] = bg;
 8000dc8:	193b      	adds	r3, r7, r4
 8000dca:	185b      	adds	r3, r3, r1
 8000dcc:	2200      	movs	r2, #0
 8000dce:	5e9a      	ldrsh	r2, [r3, r2]
 8000dd0:	4baa      	ldr	r3, [pc, #680]	; (800107c <drawChar+0x650>)
 8000dd2:	8819      	ldrh	r1, [r3, #0]
 8000dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dd6:	0052      	lsls	r2, r2, #1
 8000dd8:	52d1      	strh	r1, [r2, r3]
						for (int8_t l = 0; l < textSize; l++) {
 8000dda:	193b      	adds	r3, r7, r4
 8000ddc:	181b      	adds	r3, r3, r0
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	b25b      	sxtb	r3, r3
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	3301      	adds	r3, #1
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	193b      	adds	r3, r7, r4
 8000dea:	181b      	adds	r3, r3, r0
 8000dec:	701a      	strb	r2, [r3, #0]
 8000dee:	231f      	movs	r3, #31
 8000df0:	2218      	movs	r2, #24
 8000df2:	4694      	mov	ip, r2
 8000df4:	44bc      	add	ip, r7
 8000df6:	4463      	add	r3, ip
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	b25b      	sxtb	r3, r3
 8000dfc:	4a9e      	ldr	r2, [pc, #632]	; (8001078 <drawChar+0x64c>)
 8000dfe:	7812      	ldrb	r2, [r2, #0]
 8000e00:	4293      	cmp	r3, r2
 8000e02:	db95      	blt.n	8000d30 <drawChar+0x304>
					for (int8_t k = 0; k < textSize; k++) {
 8000e04:	2120      	movs	r1, #32
 8000e06:	2018      	movs	r0, #24
 8000e08:	183b      	adds	r3, r7, r0
 8000e0a:	185b      	adds	r3, r3, r1
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	b25b      	sxtb	r3, r3
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	3301      	adds	r3, #1
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	183b      	adds	r3, r7, r0
 8000e18:	185b      	adds	r3, r3, r1
 8000e1a:	701a      	strb	r2, [r3, #0]
 8000e1c:	2320      	movs	r3, #32
 8000e1e:	2218      	movs	r2, #24
 8000e20:	4694      	mov	ip, r2
 8000e22:	44bc      	add	ip, r7
 8000e24:	4463      	add	r3, ip
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	b25b      	sxtb	r3, r3
 8000e2a:	4a93      	ldr	r2, [pc, #588]	; (8001078 <drawChar+0x64c>)
 8000e2c:	7812      	ldrb	r2, [r2, #0]
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	da00      	bge.n	8000e34 <drawChar+0x408>
 8000e32:	e75d      	b.n	8000cf0 <drawChar+0x2c4>
		for (int8_t j=0; j<8; j++, line >>= 1) {
 8000e34:	2123      	movs	r1, #35	; 0x23
 8000e36:	2018      	movs	r0, #24
 8000e38:	183b      	adds	r3, r7, r0
 8000e3a:	185b      	adds	r3, r3, r1
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	b25b      	sxtb	r3, r3
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	3301      	adds	r3, #1
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	183b      	adds	r3, r7, r0
 8000e48:	185b      	adds	r3, r3, r1
 8000e4a:	701a      	strb	r2, [r3, #0]
 8000e4c:	2224      	movs	r2, #36	; 0x24
 8000e4e:	183b      	adds	r3, r7, r0
 8000e50:	189b      	adds	r3, r3, r2
 8000e52:	2118      	movs	r1, #24
 8000e54:	468c      	mov	ip, r1
 8000e56:	44bc      	add	ip, r7
 8000e58:	4462      	add	r2, ip
 8000e5a:	7812      	ldrb	r2, [r2, #0]
 8000e5c:	0852      	lsrs	r2, r2, #1
 8000e5e:	701a      	strb	r2, [r3, #0]
 8000e60:	2323      	movs	r3, #35	; 0x23
 8000e62:	2218      	movs	r2, #24
 8000e64:	4694      	mov	ip, r2
 8000e66:	44bc      	add	ip, r7
 8000e68:	4463      	add	r3, ip
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	b25b      	sxtb	r3, r3
 8000e6e:	2b07      	cmp	r3, #7
 8000e70:	dc00      	bgt.n	8000e74 <drawChar+0x448>
 8000e72:	e648      	b.n	8000b06 <drawChar+0xda>
	for (int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 8000e74:	2125      	movs	r1, #37	; 0x25
 8000e76:	2018      	movs	r0, #24
 8000e78:	183b      	adds	r3, r7, r0
 8000e7a:	185b      	adds	r3, r3, r1
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	b25b      	sxtb	r3, r3
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	3301      	adds	r3, #1
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	183b      	adds	r3, r7, r0
 8000e88:	185b      	adds	r3, r3, r1
 8000e8a:	701a      	strb	r2, [r3, #0]
 8000e8c:	2325      	movs	r3, #37	; 0x25
 8000e8e:	2218      	movs	r2, #24
 8000e90:	4694      	mov	ip, r2
 8000e92:	44bc      	add	ip, r7
 8000e94:	4463      	add	r3, ip
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	b25b      	sxtb	r3, r3
 8000e9a:	2b04      	cmp	r3, #4
 8000e9c:	dc00      	bgt.n	8000ea0 <drawChar+0x474>
 8000e9e:	e614      	b.n	8000aca <drawChar+0x9e>
				}
			}
		}
	}

	if (bg != textColor) { // If opaque, draw vertical line for last column
 8000ea0:	4b76      	ldr	r3, [pc, #472]	; (800107c <drawChar+0x650>)
 8000ea2:	881a      	ldrh	r2, [r3, #0]
 8000ea4:	4b76      	ldr	r3, [pc, #472]	; (8001080 <drawChar+0x654>)
 8000ea6:	881b      	ldrh	r3, [r3, #0]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d100      	bne.n	8000eae <drawChar+0x482>
 8000eac:	e0bf      	b.n	800102e <drawChar+0x602>
		for (int8_t j = 0; j < 8; j++) {
 8000eae:	231e      	movs	r3, #30
 8000eb0:	2218      	movs	r2, #24
 8000eb2:	4694      	mov	ip, r2
 8000eb4:	44bc      	add	ip, r7
 8000eb6:	4463      	add	r3, ip
 8000eb8:	2200      	movs	r2, #0
 8000eba:	701a      	strb	r2, [r3, #0]
 8000ebc:	e0ad      	b.n	800101a <drawChar+0x5ee>
			if (textSize == 1) {
 8000ebe:	4b6e      	ldr	r3, [pc, #440]	; (8001078 <drawChar+0x64c>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d111      	bne.n	8000eea <drawChar+0x4be>
				buffer[5+j*6] = bg;
 8000ec6:	231e      	movs	r3, #30
 8000ec8:	2218      	movs	r2, #24
 8000eca:	4694      	mov	ip, r2
 8000ecc:	44bc      	add	ip, r7
 8000ece:	4463      	add	r3, ip
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	569a      	ldrsb	r2, [r3, r2]
 8000ed4:	0013      	movs	r3, r2
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	189b      	adds	r3, r3, r2
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	1d5a      	adds	r2, r3, #5
 8000ede:	4b67      	ldr	r3, [pc, #412]	; (800107c <drawChar+0x650>)
 8000ee0:	8819      	ldrh	r1, [r3, #0]
 8000ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ee4:	0052      	lsls	r2, r2, #1
 8000ee6:	52d1      	strh	r1, [r2, r3]
 8000ee8:	e08b      	b.n	8001002 <drawChar+0x5d6>
			}
			else {
				for (int8_t k = 0; k < textSize; k++) {
 8000eea:	231d      	movs	r3, #29
 8000eec:	2218      	movs	r2, #24
 8000eee:	4694      	mov	ip, r2
 8000ef0:	44bc      	add	ip, r7
 8000ef2:	4463      	add	r3, ip
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	701a      	strb	r2, [r3, #0]
 8000ef8:	e077      	b.n	8000fea <drawChar+0x5be>
					for (int8_t l = 0; l < textSize; l++) {
 8000efa:	231c      	movs	r3, #28
 8000efc:	2218      	movs	r2, #24
 8000efe:	4694      	mov	ip, r2
 8000f00:	44bc      	add	ip, r7
 8000f02:	4463      	add	r3, ip
 8000f04:	2200      	movs	r2, #0
 8000f06:	701a      	strb	r2, [r3, #0]
 8000f08:	e058      	b.n	8000fbc <drawChar+0x590>
						address = (textSize*textSize*j*6)+(5*textSize);
 8000f0a:	4b5b      	ldr	r3, [pc, #364]	; (8001078 <drawChar+0x64c>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	4a59      	ldr	r2, [pc, #356]	; (8001078 <drawChar+0x64c>)
 8000f12:	7812      	ldrb	r2, [r2, #0]
 8000f14:	b292      	uxth	r2, r2
 8000f16:	4353      	muls	r3, r2
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	221e      	movs	r2, #30
 8000f1c:	2118      	movs	r1, #24
 8000f1e:	468c      	mov	ip, r1
 8000f20:	44bc      	add	ip, r7
 8000f22:	4462      	add	r2, ip
 8000f24:	7812      	ldrb	r2, [r2, #0]
 8000f26:	b252      	sxtb	r2, r2
 8000f28:	b292      	uxth	r2, r2
 8000f2a:	4353      	muls	r3, r2
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	1c1a      	adds	r2, r3, #0
 8000f30:	1c13      	adds	r3, r2, #0
 8000f32:	18db      	adds	r3, r3, r3
 8000f34:	189b      	adds	r3, r3, r2
 8000f36:	18db      	adds	r3, r3, r3
 8000f38:	b29a      	uxth	r2, r3
 8000f3a:	4b4f      	ldr	r3, [pc, #316]	; (8001078 <drawChar+0x64c>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	1c19      	adds	r1, r3, #0
 8000f42:	0089      	lsls	r1, r1, #2
 8000f44:	18cb      	adds	r3, r1, r3
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	18d3      	adds	r3, r2, r3
 8000f4a:	b29a      	uxth	r2, r3
 8000f4c:	210e      	movs	r1, #14
 8000f4e:	2418      	movs	r4, #24
 8000f50:	193b      	adds	r3, r7, r4
 8000f52:	185b      	adds	r3, r3, r1
 8000f54:	801a      	strh	r2, [r3, #0]
						address += rowOffset*k+l;
 8000f56:	231d      	movs	r3, #29
 8000f58:	2218      	movs	r2, #24
 8000f5a:	4694      	mov	ip, r2
 8000f5c:	44bc      	add	ip, r7
 8000f5e:	4463      	add	r3, ip
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	b25b      	sxtb	r3, r3
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	2226      	movs	r2, #38	; 0x26
 8000f68:	2018      	movs	r0, #24
 8000f6a:	4684      	mov	ip, r0
 8000f6c:	44bc      	add	ip, r7
 8000f6e:	4462      	add	r2, ip
 8000f70:	8812      	ldrh	r2, [r2, #0]
 8000f72:	4353      	muls	r3, r2
 8000f74:	b29a      	uxth	r2, r3
 8000f76:	201c      	movs	r0, #28
 8000f78:	193b      	adds	r3, r7, r4
 8000f7a:	181b      	adds	r3, r3, r0
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	b25b      	sxtb	r3, r3
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	18d3      	adds	r3, r2, r3
 8000f84:	b29a      	uxth	r2, r3
 8000f86:	193b      	adds	r3, r7, r4
 8000f88:	185b      	adds	r3, r3, r1
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	18d3      	adds	r3, r2, r3
 8000f8e:	b29a      	uxth	r2, r3
 8000f90:	193b      	adds	r3, r7, r4
 8000f92:	185b      	adds	r3, r3, r1
 8000f94:	801a      	strh	r2, [r3, #0]
						buffer[address] = bg;
 8000f96:	193b      	adds	r3, r7, r4
 8000f98:	185b      	adds	r3, r3, r1
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	5e9a      	ldrsh	r2, [r3, r2]
 8000f9e:	4b37      	ldr	r3, [pc, #220]	; (800107c <drawChar+0x650>)
 8000fa0:	8819      	ldrh	r1, [r3, #0]
 8000fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fa4:	0052      	lsls	r2, r2, #1
 8000fa6:	52d1      	strh	r1, [r2, r3]
					for (int8_t l = 0; l < textSize; l++) {
 8000fa8:	193b      	adds	r3, r7, r4
 8000faa:	181b      	adds	r3, r3, r0
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	b25b      	sxtb	r3, r3
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	b2da      	uxtb	r2, r3
 8000fb6:	193b      	adds	r3, r7, r4
 8000fb8:	181b      	adds	r3, r3, r0
 8000fba:	701a      	strb	r2, [r3, #0]
 8000fbc:	231c      	movs	r3, #28
 8000fbe:	2218      	movs	r2, #24
 8000fc0:	4694      	mov	ip, r2
 8000fc2:	44bc      	add	ip, r7
 8000fc4:	4463      	add	r3, ip
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	b25b      	sxtb	r3, r3
 8000fca:	4a2b      	ldr	r2, [pc, #172]	; (8001078 <drawChar+0x64c>)
 8000fcc:	7812      	ldrb	r2, [r2, #0]
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	db9b      	blt.n	8000f0a <drawChar+0x4de>
				for (int8_t k = 0; k < textSize; k++) {
 8000fd2:	211d      	movs	r1, #29
 8000fd4:	2018      	movs	r0, #24
 8000fd6:	183b      	adds	r3, r7, r0
 8000fd8:	185b      	adds	r3, r3, r1
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	b25b      	sxtb	r3, r3
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	183b      	adds	r3, r7, r0
 8000fe6:	185b      	adds	r3, r3, r1
 8000fe8:	701a      	strb	r2, [r3, #0]
 8000fea:	231d      	movs	r3, #29
 8000fec:	2218      	movs	r2, #24
 8000fee:	4694      	mov	ip, r2
 8000ff0:	44bc      	add	ip, r7
 8000ff2:	4463      	add	r3, ip
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	b25b      	sxtb	r3, r3
 8000ff8:	4a1f      	ldr	r2, [pc, #124]	; (8001078 <drawChar+0x64c>)
 8000ffa:	7812      	ldrb	r2, [r2, #0]
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	da00      	bge.n	8001002 <drawChar+0x5d6>
 8001000:	e77b      	b.n	8000efa <drawChar+0x4ce>
		for (int8_t j = 0; j < 8; j++) {
 8001002:	211e      	movs	r1, #30
 8001004:	2018      	movs	r0, #24
 8001006:	183b      	adds	r3, r7, r0
 8001008:	185b      	adds	r3, r3, r1
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	b25b      	sxtb	r3, r3
 800100e:	b2db      	uxtb	r3, r3
 8001010:	3301      	adds	r3, #1
 8001012:	b2da      	uxtb	r2, r3
 8001014:	183b      	adds	r3, r7, r0
 8001016:	185b      	adds	r3, r3, r1
 8001018:	701a      	strb	r2, [r3, #0]
 800101a:	231e      	movs	r3, #30
 800101c:	2218      	movs	r2, #24
 800101e:	4694      	mov	ip, r2
 8001020:	44bc      	add	ip, r7
 8001022:	4463      	add	r3, ip
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	b25b      	sxtb	r3, r3
 8001028:	2b07      	cmp	r3, #7
 800102a:	dc00      	bgt.n	800102e <drawChar+0x602>
 800102c:	e747      	b.n	8000ebe <drawChar+0x492>
			}
		}
//		else fillRect(cursorX+5*textSize, cursorY, textSize, 8*textSize, bg, hspi);
	}

	drawBuffer(cursorX, cursorY, 6*textSize, 8*textSize, buffer, bufferSize, hspi);
 800102e:	4b15      	ldr	r3, [pc, #84]	; (8001084 <drawChar+0x658>)
 8001030:	7818      	ldrb	r0, [r3, #0]
 8001032:	4b15      	ldr	r3, [pc, #84]	; (8001088 <drawChar+0x65c>)
 8001034:	7819      	ldrb	r1, [r3, #0]
 8001036:	4b10      	ldr	r3, [pc, #64]	; (8001078 <drawChar+0x64c>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	1c1a      	adds	r2, r3, #0
 800103c:	1c13      	adds	r3, r2, #0
 800103e:	18db      	adds	r3, r3, r3
 8001040:	189b      	adds	r3, r3, r2
 8001042:	18db      	adds	r3, r3, r3
 8001044:	b2dc      	uxtb	r4, r3
 8001046:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <drawChar+0x64c>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	b2dd      	uxtb	r5, r3
 800104e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	9202      	str	r2, [sp, #8]
 8001054:	221a      	movs	r2, #26
 8001056:	2618      	movs	r6, #24
 8001058:	46b4      	mov	ip, r6
 800105a:	44bc      	add	ip, r7
 800105c:	4462      	add	r2, ip
 800105e:	8812      	ldrh	r2, [r2, #0]
 8001060:	9201      	str	r2, [sp, #4]
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	002b      	movs	r3, r5
 8001066:	0022      	movs	r2, r4
 8001068:	f7ff fc4c 	bl	8000904 <drawBuffer>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	469d      	mov	sp, r3
//	setCursor(cursorX+6*textSize, cursorY);
}
 8001070:	46c0      	nop			; (mov r8, r8)
 8001072:	46bd      	mov	sp, r7
 8001074:	b011      	add	sp, #68	; 0x44
 8001076:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001078:	20000022 	.word	0x20000022
 800107c:	20000026 	.word	0x20000026
 8001080:	20000024 	.word	0x20000024
 8001084:	20000020 	.word	0x20000020
 8001088:	20000021 	.word	0x20000021

0800108c <setBackgroundColor>:
		setCursor(cursorX+textSize*6, cursorY);
	}
//	setCursor(x+i*textSize*6, y);
}

void setBackgroundColor(uint16_t color) {bg = color;}
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	0002      	movs	r2, r0
 8001094:	1dbb      	adds	r3, r7, #6
 8001096:	801a      	strh	r2, [r3, #0]
 8001098:	4b03      	ldr	r3, [pc, #12]	; (80010a8 <setBackgroundColor+0x1c>)
 800109a:	1dba      	adds	r2, r7, #6
 800109c:	8812      	ldrh	r2, [r2, #0]
 800109e:	801a      	strh	r2, [r3, #0]
 80010a0:	46c0      	nop			; (mov r8, r8)
 80010a2:	46bd      	mov	sp, r7
 80010a4:	b002      	add	sp, #8
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000026 	.word	0x20000026

080010ac <setCursor>:

void setCursor(uint8_t x, uint8_t y) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	0002      	movs	r2, r0
 80010b4:	1dfb      	adds	r3, r7, #7
 80010b6:	701a      	strb	r2, [r3, #0]
 80010b8:	1dbb      	adds	r3, r7, #6
 80010ba:	1c0a      	adds	r2, r1, #0
 80010bc:	701a      	strb	r2, [r3, #0]
	cursorX = x;
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <setCursor+0x2c>)
 80010c0:	1dfa      	adds	r2, r7, #7
 80010c2:	7812      	ldrb	r2, [r2, #0]
 80010c4:	701a      	strb	r2, [r3, #0]
	cursorY = y;
 80010c6:	4b05      	ldr	r3, [pc, #20]	; (80010dc <setCursor+0x30>)
 80010c8:	1dba      	adds	r2, r7, #6
 80010ca:	7812      	ldrb	r2, [r2, #0]
 80010cc:	701a      	strb	r2, [r3, #0]
}
 80010ce:	46c0      	nop			; (mov r8, r8)
 80010d0:	46bd      	mov	sp, r7
 80010d2:	b002      	add	sp, #8
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	46c0      	nop			; (mov r8, r8)
 80010d8:	20000020 	.word	0x20000020
 80010dc:	20000021 	.word	0x20000021

080010e0 <setTextSize>:

void setTextSize(uint8_t size) {textSize = size;}
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	0002      	movs	r2, r0
 80010e8:	1dfb      	adds	r3, r7, #7
 80010ea:	701a      	strb	r2, [r3, #0]
 80010ec:	4b03      	ldr	r3, [pc, #12]	; (80010fc <setTextSize+0x1c>)
 80010ee:	1dfa      	adds	r2, r7, #7
 80010f0:	7812      	ldrb	r2, [r2, #0]
 80010f2:	701a      	strb	r2, [r3, #0]
 80010f4:	46c0      	nop			; (mov r8, r8)
 80010f6:	46bd      	mov	sp, r7
 80010f8:	b002      	add	sp, #8
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000022 	.word	0x20000022

08001100 <setTextColor>:

void setTextColor(uint16_t color) {textColor = color;}
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	0002      	movs	r2, r0
 8001108:	1dbb      	adds	r3, r7, #6
 800110a:	801a      	strh	r2, [r3, #0]
 800110c:	4b03      	ldr	r3, [pc, #12]	; (800111c <setTextColor+0x1c>)
 800110e:	1dba      	adds	r2, r7, #6
 8001110:	8812      	ldrh	r2, [r2, #0]
 8001112:	801a      	strh	r2, [r3, #0]
 8001114:	46c0      	nop			; (mov r8, r8)
 8001116:	46bd      	mov	sp, r7
 8001118:	b002      	add	sp, #8
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20000024 	.word	0x20000024

08001120 <clearScreen>:

void clearScreen(uint16_t backgroundColor, SPI_HandleTypeDef *hspi) {
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	0002      	movs	r2, r0
 8001128:	6039      	str	r1, [r7, #0]
 800112a:	1dbb      	adds	r3, r7, #6
 800112c:	801a      	strh	r2, [r3, #0]
	bg = backgroundColor;
 800112e:	4b07      	ldr	r3, [pc, #28]	; (800114c <clearScreen+0x2c>)
 8001130:	1dba      	adds	r2, r7, #6
 8001132:	8812      	ldrh	r2, [r2, #0]
 8001134:	801a      	strh	r2, [r3, #0]
	fillScreen(backgroundColor, hspi);
 8001136:	683a      	ldr	r2, [r7, #0]
 8001138:	1dbb      	adds	r3, r7, #6
 800113a:	881b      	ldrh	r3, [r3, #0]
 800113c:	0011      	movs	r1, r2
 800113e:	0018      	movs	r0, r3
 8001140:	f7ff fc5e 	bl	8000a00 <fillScreen>
}
 8001144:	46c0      	nop			; (mov r8, r8)
 8001146:	46bd      	mov	sp, r7
 8001148:	b002      	add	sp, #8
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000026 	.word	0x20000026

08001150 <charTest>:

	bg = ST77XX_BLACK;
	fillScreen(bg, hspi);
}

void charTest(SPI_HandleTypeDef *hspi) {
 8001150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001152:	b089      	sub	sp, #36	; 0x24
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
	uint8_t x, y;

	uint16_t rainbowColors[] = {
 8001158:	2308      	movs	r3, #8
 800115a:	18fb      	adds	r3, r7, r3
 800115c:	4a58      	ldr	r2, [pc, #352]	; (80012c0 <charTest+0x170>)
 800115e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001160:	c313      	stmia	r3!, {r0, r1, r4}
 8001162:	8812      	ldrh	r2, [r2, #0]
 8001164:	801a      	strh	r2, [r3, #0]
		ST77XX_BLUE,
		ST77XX_MAGENTA
	};

	// print the standard 127 6x8 characters in different sizes
	for (int ch_size = 1; ch_size < 6; ch_size++) {
 8001166:	2301      	movs	r3, #1
 8001168:	61fb      	str	r3, [r7, #28]
 800116a:	e0a0      	b.n	80012ae <charTest+0x15e>
		setTextSize(ch_size);
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	b2db      	uxtb	r3, r3
 8001170:	0018      	movs	r0, r3
 8001172:	f7ff ffb5 	bl	80010e0 <setTextSize>
		for (unsigned char ch = 0; ch < 255; ch++) {
 8001176:	231b      	movs	r3, #27
 8001178:	18fb      	adds	r3, r7, r3
 800117a:	2200      	movs	r2, #0
 800117c:	701a      	strb	r2, [r3, #0]
 800117e:	e081      	b.n	8001284 <charTest+0x134>
			// move to right enough for next char
			x = (ch*ch_size*6) % (WIDTH/(ch_size*6)*(ch_size*6));
 8001180:	261b      	movs	r6, #27
 8001182:	19bb      	adds	r3, r7, r6
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	69fa      	ldr	r2, [r7, #28]
 8001188:	435a      	muls	r2, r3
 800118a:	0013      	movs	r3, r2
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	189b      	adds	r3, r3, r2
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	001c      	movs	r4, r3
 8001194:	69fa      	ldr	r2, [r7, #28]
 8001196:	0013      	movs	r3, r2
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	189b      	adds	r3, r3, r2
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	0019      	movs	r1, r3
 80011a0:	2080      	movs	r0, #128	; 0x80
 80011a2:	f7ff f83b 	bl	800021c <__divsi3>
 80011a6:	0003      	movs	r3, r0
 80011a8:	0019      	movs	r1, r3
 80011aa:	69fa      	ldr	r2, [r7, #28]
 80011ac:	0013      	movs	r3, r2
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	189b      	adds	r3, r3, r2
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	434b      	muls	r3, r1
 80011b6:	0019      	movs	r1, r3
 80011b8:	0020      	movs	r0, r4
 80011ba:	f7ff f915 	bl	80003e8 <__aeabi_idivmod>
 80011be:	000b      	movs	r3, r1
 80011c0:	001a      	movs	r2, r3
 80011c2:	231a      	movs	r3, #26
 80011c4:	18fb      	adds	r3, r7, r3
 80011c6:	701a      	strb	r2, [r3, #0]
			// line break when x gets near WIDTH
			y = ((8*ch_size) * ((ch*ch_size*6) / (WIDTH/(ch_size*6)*(ch_size*6)))) % (HEIGHT/(ch_size*8)*(ch_size*8));
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	00dc      	lsls	r4, r3, #3
 80011cc:	19bb      	adds	r3, r7, r6
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	69fa      	ldr	r2, [r7, #28]
 80011d2:	435a      	muls	r2, r3
 80011d4:	0013      	movs	r3, r2
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	189b      	adds	r3, r3, r2
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	001d      	movs	r5, r3
 80011de:	69fa      	ldr	r2, [r7, #28]
 80011e0:	0013      	movs	r3, r2
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	189b      	adds	r3, r3, r2
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	0019      	movs	r1, r3
 80011ea:	2080      	movs	r0, #128	; 0x80
 80011ec:	f7ff f816 	bl	800021c <__divsi3>
 80011f0:	0003      	movs	r3, r0
 80011f2:	0019      	movs	r1, r3
 80011f4:	69fa      	ldr	r2, [r7, #28]
 80011f6:	0013      	movs	r3, r2
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	189b      	adds	r3, r3, r2
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	434b      	muls	r3, r1
 8001200:	0019      	movs	r1, r3
 8001202:	0028      	movs	r0, r5
 8001204:	f7ff f80a 	bl	800021c <__divsi3>
 8001208:	0003      	movs	r3, r0
 800120a:	435c      	muls	r4, r3
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	00db      	lsls	r3, r3, #3
 8001210:	0019      	movs	r1, r3
 8001212:	20a0      	movs	r0, #160	; 0xa0
 8001214:	f7ff f802 	bl	800021c <__divsi3>
 8001218:	0003      	movs	r3, r0
 800121a:	001a      	movs	r2, r3
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	00db      	lsls	r3, r3, #3
 8001220:	4353      	muls	r3, r2
 8001222:	0019      	movs	r1, r3
 8001224:	0020      	movs	r0, r4
 8001226:	f7ff f8df 	bl	80003e8 <__aeabi_idivmod>
 800122a:	000b      	movs	r3, r1
 800122c:	001a      	movs	r2, r3
 800122e:	2119      	movs	r1, #25
 8001230:	187b      	adds	r3, r7, r1
 8001232:	701a      	strb	r2, [r3, #0]

			setCursor(x, y);
 8001234:	187b      	adds	r3, r7, r1
 8001236:	781a      	ldrb	r2, [r3, #0]
 8001238:	231a      	movs	r3, #26
 800123a:	18fb      	adds	r3, r7, r3
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	0011      	movs	r1, r2
 8001240:	0018      	movs	r0, r3
 8001242:	f7ff ff33 	bl	80010ac <setCursor>
			setTextColor(rainbowColors[ch%7]);
 8001246:	19bb      	adds	r3, r7, r6
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	2107      	movs	r1, #7
 800124c:	0018      	movs	r0, r3
 800124e:	f7fe ffe1 	bl	8000214 <__aeabi_uidivmod>
 8001252:	000b      	movs	r3, r1
 8001254:	b2db      	uxtb	r3, r3
 8001256:	001a      	movs	r2, r3
 8001258:	2308      	movs	r3, #8
 800125a:	18fb      	adds	r3, r7, r3
 800125c:	0052      	lsls	r2, r2, #1
 800125e:	5ad3      	ldrh	r3, [r2, r3]
 8001260:	0018      	movs	r0, r3
 8001262:	f7ff ff4d 	bl	8001100 <setTextColor>
			setBackgroundColor(ST77XX_BLACK);
 8001266:	2000      	movs	r0, #0
 8001268:	f7ff ff10 	bl	800108c <setBackgroundColor>
			drawChar(ch, hspi);
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	19bb      	adds	r3, r7, r6
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	0011      	movs	r1, r2
 8001274:	0018      	movs	r0, r3
 8001276:	f7ff fbd9 	bl	8000a2c <drawChar>
		for (unsigned char ch = 0; ch < 255; ch++) {
 800127a:	19bb      	adds	r3, r7, r6
 800127c:	781a      	ldrb	r2, [r3, #0]
 800127e:	19bb      	adds	r3, r7, r6
 8001280:	3201      	adds	r2, #1
 8001282:	701a      	strb	r2, [r3, #0]
 8001284:	231b      	movs	r3, #27
 8001286:	18fb      	adds	r3, r7, r3
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2bff      	cmp	r3, #255	; 0xff
 800128c:	d000      	beq.n	8001290 <charTest+0x140>
 800128e:	e777      	b.n	8001180 <charTest+0x30>
//			HAL_Delay(250);
		}
		HAL_Delay(1000);
 8001290:	23fa      	movs	r3, #250	; 0xfa
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	0018      	movs	r0, r3
 8001296:	f001 fc5d 	bl	8002b54 <HAL_Delay>
		fillScreen(bg, hspi);
 800129a:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <charTest+0x174>)
 800129c:	881b      	ldrh	r3, [r3, #0]
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	0011      	movs	r1, r2
 80012a2:	0018      	movs	r0, r3
 80012a4:	f7ff fbac 	bl	8000a00 <fillScreen>
	for (int ch_size = 1; ch_size < 6; ch_size++) {
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	3301      	adds	r3, #1
 80012ac:	61fb      	str	r3, [r7, #28]
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	2b05      	cmp	r3, #5
 80012b2:	dc00      	bgt.n	80012b6 <charTest+0x166>
 80012b4:	e75a      	b.n	800116c <charTest+0x1c>
	}
}
 80012b6:	46c0      	nop			; (mov r8, r8)
 80012b8:	46bd      	mov	sp, r7
 80012ba:	b009      	add	sp, #36	; 0x24
 80012bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012be:	46c0      	nop			; (mov r8, r8)
 80012c0:	0800693c 	.word	0x0800693c
 80012c4:	20000028 	.word	0x20000028

080012c8 <setTime>:


#include "clocks.h"

// set rtc time. uses perosnal struct as arg
void setTime(struct times *t) {
 80012c8:	b590      	push	{r4, r7, lr}
 80012ca:	b089      	sub	sp, #36	; 0x24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef stime = {0};	// change to malloc call? does that work in embedded?
 80012d0:	210c      	movs	r1, #12
 80012d2:	000c      	movs	r4, r1
 80012d4:	187b      	adds	r3, r7, r1
 80012d6:	0018      	movs	r0, r3
 80012d8:	2314      	movs	r3, #20
 80012da:	001a      	movs	r2, r3
 80012dc:	2100      	movs	r1, #0
 80012de:	f005 fade 	bl	800689e <memset>

	// set using args later
	stime.Hours = t->hr;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	781a      	ldrb	r2, [r3, #0]
 80012e6:	0021      	movs	r1, r4
 80012e8:	187b      	adds	r3, r7, r1
 80012ea:	701a      	strb	r2, [r3, #0]
	stime.Minutes = t->min;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	785a      	ldrb	r2, [r3, #1]
 80012f0:	187b      	adds	r3, r7, r1
 80012f2:	705a      	strb	r2, [r3, #1]
	stime.Seconds = t->sec;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	789a      	ldrb	r2, [r3, #2]
 80012f8:	187b      	adds	r3, r7, r1
 80012fa:	709a      	strb	r2, [r3, #2]

	stime.TimeFormat = RTC_HOURFORMAT_24;
 80012fc:	187b      	adds	r3, r7, r1
 80012fe:	2200      	movs	r2, #0
 8001300:	70da      	strb	r2, [r3, #3]

	// not sure what these do, but probably fine if set to 0 or ignored
	stime.SubSeconds = 0;
 8001302:	187b      	adds	r3, r7, r1
 8001304:	2200      	movs	r2, #0
 8001306:	605a      	str	r2, [r3, #4]
	stime.SecondFraction = 0;
 8001308:	187b      	adds	r3, r7, r1
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]

	stime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;		// add daylight savings later?
 800130e:	187b      	adds	r3, r7, r1
 8001310:	2200      	movs	r2, #0
 8001312:	60da      	str	r2, [r3, #12]
	stime.StoreOperation = RTC_STOREOPERATION_SET;		// not sure what this does
 8001314:	187b      	adds	r3, r7, r1
 8001316:	2280      	movs	r2, #128	; 0x80
 8001318:	02d2      	lsls	r2, r2, #11
 800131a:	611a      	str	r2, [r3, #16]

	// do nothing until done
	// not following BCD format (4-bit digit 1, 4-bit digit 2)
	// while makes program hang? ignore instead?
//	while (HAL_RTC_SetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK);
	HAL_RTC_SetTime(&hrtc, &stime, RTC_FORMAT_BIN);
 800131c:	1879      	adds	r1, r7, r1
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <setTime+0x70>)
 8001320:	2200      	movs	r2, #0
 8001322:	0018      	movs	r0, r3
 8001324:	f003 fcd6 	bl	8004cd4 <HAL_RTC_SetTime>

	runClockDisplay(&htim22);
 8001328:	4b04      	ldr	r3, [pc, #16]	; (800133c <setTime+0x74>)
 800132a:	0018      	movs	r0, r3
 800132c:	f001 fb48 	bl	80029c0 <runClockDisplay>
}
 8001330:	46c0      	nop			; (mov r8, r8)
 8001332:	46bd      	mov	sp, r7
 8001334:	b009      	add	sp, #36	; 0x24
 8001336:	bd90      	pop	{r4, r7, pc}
 8001338:	200000fc 	.word	0x200000fc
 800133c:	2000008c 	.word	0x2000008c

08001340 <setDate>:

// set rtc date. uses personal struct
void setDate(struct dates *d) {
 8001340:	b590      	push	{r4, r7, lr}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	// ---- date ----
	RTC_DateTypeDef sdate = {0};
 8001348:	240c      	movs	r4, #12
 800134a:	193b      	adds	r3, r7, r4
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]

	sdate.Month = d->month;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	789a      	ldrb	r2, [r3, #2]
 8001354:	193b      	adds	r3, r7, r4
 8001356:	705a      	strb	r2, [r3, #1]
	sdate.Date = d->date;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	78da      	ldrb	r2, [r3, #3]
 800135c:	193b      	adds	r3, r7, r4
 800135e:	709a      	strb	r2, [r3, #2]
	sdate.WeekDay = d->weekday;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	791a      	ldrb	r2, [r3, #4]
 8001364:	193b      	adds	r3, r7, r4
 8001366:	701a      	strb	r2, [r3, #0]
	sdate.Year = d->yr % 100; 		// set only between 0-99. part of the library (!?)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	881b      	ldrh	r3, [r3, #0]
 800136c:	2164      	movs	r1, #100	; 0x64
 800136e:	0018      	movs	r0, r3
 8001370:	f7fe ff50 	bl	8000214 <__aeabi_uidivmod>
 8001374:	000b      	movs	r3, r1
 8001376:	b29b      	uxth	r3, r3
 8001378:	b2da      	uxtb	r2, r3
 800137a:	193b      	adds	r3, r7, r4
 800137c:	70da      	strb	r2, [r3, #3]

	HAL_RTC_SetDate(&hrtc, &sdate, RTC_FORMAT_BIN);
 800137e:	1939      	adds	r1, r7, r4
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <setDate+0x5c>)
 8001382:	2200      	movs	r2, #0
 8001384:	0018      	movs	r0, r3
 8001386:	f003 fdc5 	bl	8004f14 <HAL_RTC_SetDate>

	runClockDisplay(&htim22);
 800138a:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <setDate+0x60>)
 800138c:	0018      	movs	r0, r3
 800138e:	f001 fb17 	bl	80029c0 <runClockDisplay>
}
 8001392:	46c0      	nop			; (mov r8, r8)
 8001394:	46bd      	mov	sp, r7
 8001396:	b005      	add	sp, #20
 8001398:	bd90      	pop	{r4, r7, pc}
 800139a:	46c0      	nop			; (mov r8, r8)
 800139c:	200000fc 	.word	0x200000fc
 80013a0:	2000008c 	.word	0x2000008c

080013a4 <setDateTime>:

void setDateTime(struct dates *d, struct times *t) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
	setDate(d);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	0018      	movs	r0, r3
 80013b2:	f7ff ffc5 	bl	8001340 <setDate>
	setTime(t);
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	0018      	movs	r0, r3
 80013ba:	f7ff ff85 	bl	80012c8 <setTime>
}
 80013be:	46c0      	nop			; (mov r8, r8)
 80013c0:	46bd      	mov	sp, r7
 80013c2:	b002      	add	sp, #8
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <setAlarm>:

// for time of day+week
void setAlarm(struct alarmTimes *a) {
 80013c8:	b5b0      	push	{r4, r5, r7, lr}
 80013ca:	b092      	sub	sp, #72	; 0x48
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	RTC_AlarmTypeDef salarm = {0};
 80013d0:	2520      	movs	r5, #32
 80013d2:	197b      	adds	r3, r7, r5
 80013d4:	0018      	movs	r0, r3
 80013d6:	2328      	movs	r3, #40	; 0x28
 80013d8:	001a      	movs	r2, r3
 80013da:	2100      	movs	r1, #0
 80013dc:	f005 fa5f 	bl	800689e <memset>
	RTC_TimeTypeDef salarmtime = {0};
 80013e0:	240c      	movs	r4, #12
 80013e2:	193b      	adds	r3, r7, r4
 80013e4:	0018      	movs	r0, r3
 80013e6:	2314      	movs	r3, #20
 80013e8:	001a      	movs	r2, r3
 80013ea:	2100      	movs	r1, #0
 80013ec:	f005 fa57 	bl	800689e <memset>

	watchAlarm = *a;	// this is probably fine (value at a is defined already)
 80013f0:	4a23      	ldr	r2, [pc, #140]	; (8001480 <setAlarm+0xb8>)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	0010      	movs	r0, r2
 80013f6:	0019      	movs	r1, r3
 80013f8:	2304      	movs	r3, #4
 80013fa:	001a      	movs	r2, r3
 80013fc:	f005 fa46 	bl	800688c <memcpy>

	// change to set with args
	salarmtime.Hours = a->hr;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	781a      	ldrb	r2, [r3, #0]
 8001404:	193b      	adds	r3, r7, r4
 8001406:	701a      	strb	r2, [r3, #0]
	salarmtime.Minutes = a->min;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	785a      	ldrb	r2, [r3, #1]
 800140c:	193b      	adds	r3, r7, r4
 800140e:	705a      	strb	r2, [r3, #1]
	salarmtime.Seconds = a->sec;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	789a      	ldrb	r2, [r3, #2]
 8001414:	193b      	adds	r3, r7, r4
 8001416:	709a      	strb	r2, [r3, #2]
	salarmtime.TimeFormat = RTC_HOURFORMAT_24;
 8001418:	193b      	adds	r3, r7, r4
 800141a:	2200      	movs	r2, #0
 800141c:	70da      	strb	r2, [r3, #3]
	salarmtime.SubSeconds = 0;
 800141e:	0021      	movs	r1, r4
 8001420:	187b      	adds	r3, r7, r1
 8001422:	2200      	movs	r2, #0
 8001424:	605a      	str	r2, [r3, #4]
	salarmtime.SecondFraction = 0;
 8001426:	187b      	adds	r3, r7, r1
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
	salarmtime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800142c:	187b      	adds	r3, r7, r1
 800142e:	2200      	movs	r2, #0
 8001430:	60da      	str	r2, [r3, #12]
	salarmtime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001432:	187b      	adds	r3, r7, r1
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]

	salarm.AlarmTime = salarmtime;
 8001438:	197b      	adds	r3, r7, r5
 800143a:	187a      	adds	r2, r7, r1
 800143c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800143e:	c313      	stmia	r3!, {r0, r1, r4}
 8001440:	ca03      	ldmia	r2!, {r0, r1}
 8001442:	c303      	stmia	r3!, {r0, r1}
//	salarm.AlarmMask = RTC_ALARMMASK_ALL;
	salarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001444:	197b      	adds	r3, r7, r5
 8001446:	2200      	movs	r2, #0
 8001448:	615a      	str	r2, [r3, #20]
	salarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800144a:	197b      	adds	r3, r7, r5
 800144c:	2200      	movs	r2, #0
 800144e:	619a      	str	r2, [r3, #24]
	salarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 8001450:	197b      	adds	r3, r7, r5
 8001452:	2280      	movs	r2, #128	; 0x80
 8001454:	05d2      	lsls	r2, r2, #23
 8001456:	61da      	str	r2, [r3, #28]
	salarm.AlarmDateWeekDay = a->weekday;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	78d9      	ldrb	r1, [r3, #3]
 800145c:	197b      	adds	r3, r7, r5
 800145e:	2220      	movs	r2, #32
 8001460:	5499      	strb	r1, [r3, r2]
	salarm.Alarm = RTC_ALARM_A;			// change if using different alarm
 8001462:	197b      	adds	r3, r7, r5
 8001464:	2280      	movs	r2, #128	; 0x80
 8001466:	0052      	lsls	r2, r2, #1
 8001468:	625a      	str	r2, [r3, #36]	; 0x24

	// do nothing until done
	HAL_RTC_SetAlarm_IT(&hrtc, &salarm, RTC_FORMAT_BIN);
 800146a:	1979      	adds	r1, r7, r5
 800146c:	4b05      	ldr	r3, [pc, #20]	; (8001484 <setAlarm+0xbc>)
 800146e:	2200      	movs	r2, #0
 8001470:	0018      	movs	r0, r3
 8001472:	f003 fe4b 	bl	800510c <HAL_RTC_SetAlarm_IT>
}
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	46bd      	mov	sp, r7
 800147a:	b012      	add	sp, #72	; 0x48
 800147c:	bdb0      	pop	{r4, r5, r7, pc}
 800147e:	46c0      	nop			; (mov r8, r8)
 8001480:	2000007c 	.word	0x2000007c
 8001484:	200000fc 	.word	0x200000fc

08001488 <setTimer>:

// set alarm for timer function of watch project
// using RTC alarm hardware
void setTimer(struct times *t_in) {
 8001488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800148a:	b097      	sub	sp, #92	; 0x5c
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
	RTC_AlarmTypeDef salarm = {0};
 8001490:	2330      	movs	r3, #48	; 0x30
 8001492:	18fb      	adds	r3, r7, r3
 8001494:	0018      	movs	r0, r3
 8001496:	2328      	movs	r3, #40	; 0x28
 8001498:	001a      	movs	r2, r3
 800149a:	2100      	movs	r1, #0
 800149c:	f005 f9ff 	bl	800689e <memset>
	RTC_TimeTypeDef salarmtime = {0};
 80014a0:	231c      	movs	r3, #28
 80014a2:	18fb      	adds	r3, r7, r3
 80014a4:	0018      	movs	r0, r3
 80014a6:	2314      	movs	r3, #20
 80014a8:	001a      	movs	r2, r3
 80014aa:	2100      	movs	r1, #0
 80014ac:	f005 f9f7 	bl	800689e <memset>

	// set global variables to hold value being set
	watchTimer = *t_in;
 80014b0:	4a66      	ldr	r2, [pc, #408]	; (800164c <setTimer+0x1c4>)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	0010      	movs	r0, r2
 80014b6:	0019      	movs	r1, r3
 80014b8:	2303      	movs	r3, #3
 80014ba:	001a      	movs	r2, r3
 80014bc:	f005 f9e6 	bl	800688c <memcpy>
	watchTimerSeconds = t_in->sec + t_in->min*60 + t_in->hr*3600;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	789b      	ldrb	r3, [r3, #2]
 80014c4:	0019      	movs	r1, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	785b      	ldrb	r3, [r3, #1]
 80014ca:	001a      	movs	r2, r3
 80014cc:	0013      	movs	r3, r2
 80014ce:	011b      	lsls	r3, r3, #4
 80014d0:	1a9b      	subs	r3, r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	18c9      	adds	r1, r1, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	001a      	movs	r2, r3
 80014dc:	0013      	movs	r3, r2
 80014de:	011b      	lsls	r3, r3, #4
 80014e0:	1a9b      	subs	r3, r3, r2
 80014e2:	011a      	lsls	r2, r3, #4
 80014e4:	1ad2      	subs	r2, r2, r3
 80014e6:	0113      	lsls	r3, r2, #4
 80014e8:	001a      	movs	r2, r3
 80014ea:	0013      	movs	r3, r2
 80014ec:	18cb      	adds	r3, r1, r3
 80014ee:	001a      	movs	r2, r3
 80014f0:	4b57      	ldr	r3, [pc, #348]	; (8001650 <setTimer+0x1c8>)
 80014f2:	601a      	str	r2, [r3, #0]

	// pull current RTC time
	struct dates d;
	struct times t;
	getDateTime(&d, &t);
 80014f4:	2410      	movs	r4, #16
 80014f6:	193a      	adds	r2, r7, r4
 80014f8:	2314      	movs	r3, #20
 80014fa:	18fb      	adds	r3, r7, r3
 80014fc:	0011      	movs	r1, r2
 80014fe:	0018      	movs	r0, r3
 8001500:	f000 f8aa 	bl	8001658 <getDateTime>

	struct alarmTimes a;

	// adding timer value to current time so we can set an alarm time
	if (t.sec + t_in->sec > 60) {		// adding seconds
 8001504:	193b      	adds	r3, r7, r4
 8001506:	789b      	ldrb	r3, [r3, #2]
 8001508:	001a      	movs	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	789b      	ldrb	r3, [r3, #2]
 800150e:	18d3      	adds	r3, r2, r3
 8001510:	2b3c      	cmp	r3, #60	; 0x3c
 8001512:	dd49      	ble.n	80015a8 <setTimer+0x120>
		if (t.min + t_in->min > 60) {		// adding minutes
 8001514:	2310      	movs	r3, #16
 8001516:	18fb      	adds	r3, r7, r3
 8001518:	785b      	ldrb	r3, [r3, #1]
 800151a:	001a      	movs	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	785b      	ldrb	r3, [r3, #1]
 8001520:	18d3      	adds	r3, r2, r3
 8001522:	2b3c      	cmp	r3, #60	; 0x3c
 8001524:	dd30      	ble.n	8001588 <setTimer+0x100>
			if (t.hr + t_in->hr > 24) {			// adding hours
 8001526:	2310      	movs	r3, #16
 8001528:	18fb      	adds	r3, r7, r3
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	001a      	movs	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	18d3      	adds	r3, r2, r3
 8001534:	2b18      	cmp	r3, #24
 8001536:	dd17      	ble.n	8001568 <setTimer+0xe0>
				a.weekday = ((d.weekday + t_in->hr/24) % 7) + 1;		// bc weekday count starts from 1
 8001538:	2314      	movs	r3, #20
 800153a:	18fb      	adds	r3, r7, r3
 800153c:	791b      	ldrb	r3, [r3, #4]
 800153e:	001c      	movs	r4, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2118      	movs	r1, #24
 8001546:	0018      	movs	r0, r3
 8001548:	f7fe fdde 	bl	8000108 <__udivsi3>
 800154c:	0003      	movs	r3, r0
 800154e:	b2db      	uxtb	r3, r3
 8001550:	18e3      	adds	r3, r4, r3
 8001552:	2107      	movs	r1, #7
 8001554:	0018      	movs	r0, r3
 8001556:	f7fe ff47 	bl	80003e8 <__aeabi_idivmod>
 800155a:	000b      	movs	r3, r1
 800155c:	b2db      	uxtb	r3, r3
 800155e:	3301      	adds	r3, #1
 8001560:	b2da      	uxtb	r2, r3
 8001562:	230c      	movs	r3, #12
 8001564:	18fb      	adds	r3, r7, r3
 8001566:	70da      	strb	r2, [r3, #3]
			}
			a.hr = (t.hr + t_in->hr) % 24;
 8001568:	2310      	movs	r3, #16
 800156a:	18fb      	adds	r3, r7, r3
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	001a      	movs	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	18d3      	adds	r3, r2, r3
 8001576:	2118      	movs	r1, #24
 8001578:	0018      	movs	r0, r3
 800157a:	f7fe ff35 	bl	80003e8 <__aeabi_idivmod>
 800157e:	000b      	movs	r3, r1
 8001580:	b2da      	uxtb	r2, r3
 8001582:	230c      	movs	r3, #12
 8001584:	18fb      	adds	r3, r7, r3
 8001586:	701a      	strb	r2, [r3, #0]
		}
		a.min = (t.min + t_in->min) % 60;
 8001588:	2310      	movs	r3, #16
 800158a:	18fb      	adds	r3, r7, r3
 800158c:	785b      	ldrb	r3, [r3, #1]
 800158e:	001a      	movs	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	785b      	ldrb	r3, [r3, #1]
 8001594:	18d3      	adds	r3, r2, r3
 8001596:	213c      	movs	r1, #60	; 0x3c
 8001598:	0018      	movs	r0, r3
 800159a:	f7fe ff25 	bl	80003e8 <__aeabi_idivmod>
 800159e:	000b      	movs	r3, r1
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	230c      	movs	r3, #12
 80015a4:	18fb      	adds	r3, r7, r3
 80015a6:	705a      	strb	r2, [r3, #1]
	}
	a.sec = (t.sec + t_in->sec) % 60;
 80015a8:	2310      	movs	r3, #16
 80015aa:	18fb      	adds	r3, r7, r3
 80015ac:	789b      	ldrb	r3, [r3, #2]
 80015ae:	001a      	movs	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	789b      	ldrb	r3, [r3, #2]
 80015b4:	18d3      	adds	r3, r2, r3
 80015b6:	213c      	movs	r1, #60	; 0x3c
 80015b8:	0018      	movs	r0, r3
 80015ba:	f7fe ff15 	bl	80003e8 <__aeabi_idivmod>
 80015be:	000b      	movs	r3, r1
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	240c      	movs	r4, #12
 80015c4:	193b      	adds	r3, r7, r4
 80015c6:	709a      	strb	r2, [r3, #2]

	// setting RTC parameters
	salarmtime.Hours = a.hr;
 80015c8:	193b      	adds	r3, r7, r4
 80015ca:	781a      	ldrb	r2, [r3, #0]
 80015cc:	211c      	movs	r1, #28
 80015ce:	187b      	adds	r3, r7, r1
 80015d0:	701a      	strb	r2, [r3, #0]
	salarmtime.Minutes = a.min;
 80015d2:	193b      	adds	r3, r7, r4
 80015d4:	785a      	ldrb	r2, [r3, #1]
 80015d6:	187b      	adds	r3, r7, r1
 80015d8:	705a      	strb	r2, [r3, #1]
	salarmtime.Seconds = a.sec;
 80015da:	193b      	adds	r3, r7, r4
 80015dc:	789a      	ldrb	r2, [r3, #2]
 80015de:	187b      	adds	r3, r7, r1
 80015e0:	709a      	strb	r2, [r3, #2]
	salarmtime.TimeFormat = RTC_HOURFORMAT_24;
 80015e2:	187b      	adds	r3, r7, r1
 80015e4:	2200      	movs	r2, #0
 80015e6:	70da      	strb	r2, [r3, #3]
	salarmtime.SubSeconds = 0;
 80015e8:	187b      	adds	r3, r7, r1
 80015ea:	2200      	movs	r2, #0
 80015ec:	605a      	str	r2, [r3, #4]
	salarmtime.SecondFraction = 0;
 80015ee:	187b      	adds	r3, r7, r1
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
	salarmtime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80015f4:	187b      	adds	r3, r7, r1
 80015f6:	2200      	movs	r2, #0
 80015f8:	60da      	str	r2, [r3, #12]
	salarmtime.StoreOperation = RTC_STOREOPERATION_RESET;
 80015fa:	187b      	adds	r3, r7, r1
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]

	salarm.AlarmTime = salarmtime;
 8001600:	2030      	movs	r0, #48	; 0x30
 8001602:	183b      	adds	r3, r7, r0
 8001604:	187a      	adds	r2, r7, r1
 8001606:	ca62      	ldmia	r2!, {r1, r5, r6}
 8001608:	c362      	stmia	r3!, {r1, r5, r6}
 800160a:	ca22      	ldmia	r2!, {r1, r5}
 800160c:	c322      	stmia	r3!, {r1, r5}
	salarm.AlarmMask = RTC_ALARMMASK_NONE;
 800160e:	183b      	adds	r3, r7, r0
 8001610:	2200      	movs	r2, #0
 8001612:	615a      	str	r2, [r3, #20]
	salarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001614:	183b      	adds	r3, r7, r0
 8001616:	2200      	movs	r2, #0
 8001618:	619a      	str	r2, [r3, #24]
	salarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 800161a:	183b      	adds	r3, r7, r0
 800161c:	2280      	movs	r2, #128	; 0x80
 800161e:	05d2      	lsls	r2, r2, #23
 8001620:	61da      	str	r2, [r3, #28]
	salarm.AlarmDateWeekDay = a.weekday;
 8001622:	193b      	adds	r3, r7, r4
 8001624:	78d9      	ldrb	r1, [r3, #3]
 8001626:	183b      	adds	r3, r7, r0
 8001628:	2220      	movs	r2, #32
 800162a:	5499      	strb	r1, [r3, r2]
	salarm.Alarm = RTC_ALARM_B;			// change if using different alarm
 800162c:	183b      	adds	r3, r7, r0
 800162e:	2280      	movs	r2, #128	; 0x80
 8001630:	0092      	lsls	r2, r2, #2
 8001632:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_RTC_SetAlarm_IT(&hrtc, &salarm, RTC_FORMAT_BIN);
 8001634:	1839      	adds	r1, r7, r0
 8001636:	4b07      	ldr	r3, [pc, #28]	; (8001654 <setTimer+0x1cc>)
 8001638:	2200      	movs	r2, #0
 800163a:	0018      	movs	r0, r3
 800163c:	f003 fd66 	bl	800510c <HAL_RTC_SetAlarm_IT>

	runTimerDisplay();
 8001640:	f001 f9b2 	bl	80029a8 <runTimerDisplay>
}
 8001644:	46c0      	nop			; (mov r8, r8)
 8001646:	46bd      	mov	sp, r7
 8001648:	b017      	add	sp, #92	; 0x5c
 800164a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800164c:	20000088 	.word	0x20000088
 8001650:	20000180 	.word	0x20000180
 8001654:	200000fc 	.word	0x200000fc

08001658 <getDateTime>:
	d->date = sdate.Date;
	d->weekday = sdate.WeekDay;
}

// not using getDate and getTime for efficiency (?)
void getDateTime(struct dates *d, struct times *t) {
 8001658:	b590      	push	{r4, r7, lr}
 800165a:	b089      	sub	sp, #36	; 0x24
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
	RTC_DateTypeDef sdate;
	RTC_TimeTypeDef stime;

	// programming manual says to read time after date. something shadow registers.
	// not done automatically in HAL
	HAL_RTC_GetTime(&hrtc, &stime, RTC_FORMAT_BIN);
 8001662:	2308      	movs	r3, #8
 8001664:	18f9      	adds	r1, r7, r3
 8001666:	4b21      	ldr	r3, [pc, #132]	; (80016ec <getDateTime+0x94>)
 8001668:	2200      	movs	r2, #0
 800166a:	0018      	movs	r0, r3
 800166c:	f003 fbf6 	bl	8004e5c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sdate, RTC_FORMAT_BIN);
 8001670:	241c      	movs	r4, #28
 8001672:	1939      	adds	r1, r7, r4
 8001674:	4b1d      	ldr	r3, [pc, #116]	; (80016ec <getDateTime+0x94>)
 8001676:	2200      	movs	r2, #0
 8001678:	0018      	movs	r0, r3
 800167a:	f003 fcf9 	bl	8005070 <HAL_RTC_GetDate>

	d->yr = sdate.Year > 50 ? sdate.Year+1900 : sdate.Year+2000;		// make assumptions on whether it's 19xx or 20xx
 800167e:	193b      	adds	r3, r7, r4
 8001680:	78db      	ldrb	r3, [r3, #3]
 8001682:	2b32      	cmp	r3, #50	; 0x32
 8001684:	d908      	bls.n	8001698 <getDateTime+0x40>
 8001686:	231c      	movs	r3, #28
 8001688:	18fb      	adds	r3, r7, r3
 800168a:	78db      	ldrb	r3, [r3, #3]
 800168c:	b29b      	uxth	r3, r3
 800168e:	4a18      	ldr	r2, [pc, #96]	; (80016f0 <getDateTime+0x98>)
 8001690:	4694      	mov	ip, r2
 8001692:	4463      	add	r3, ip
 8001694:	b29b      	uxth	r3, r3
 8001696:	e008      	b.n	80016aa <getDateTime+0x52>
 8001698:	231c      	movs	r3, #28
 800169a:	18fb      	adds	r3, r7, r3
 800169c:	78db      	ldrb	r3, [r3, #3]
 800169e:	b29b      	uxth	r3, r3
 80016a0:	22fa      	movs	r2, #250	; 0xfa
 80016a2:	00d2      	lsls	r2, r2, #3
 80016a4:	4694      	mov	ip, r2
 80016a6:	4463      	add	r3, ip
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	8013      	strh	r3, [r2, #0]
	d->month = sdate.Month;
 80016ae:	211c      	movs	r1, #28
 80016b0:	187b      	adds	r3, r7, r1
 80016b2:	785a      	ldrb	r2, [r3, #1]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	709a      	strb	r2, [r3, #2]
	d->date = sdate.Date;
 80016b8:	187b      	adds	r3, r7, r1
 80016ba:	789a      	ldrb	r2, [r3, #2]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	70da      	strb	r2, [r3, #3]
	d->weekday = sdate.WeekDay;
 80016c0:	187b      	adds	r3, r7, r1
 80016c2:	781a      	ldrb	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	711a      	strb	r2, [r3, #4]

	t->hr = stime.Hours;
 80016c8:	2108      	movs	r1, #8
 80016ca:	187b      	adds	r3, r7, r1
 80016cc:	781a      	ldrb	r2, [r3, #0]
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	701a      	strb	r2, [r3, #0]
	t->min = stime.Minutes;
 80016d2:	187b      	adds	r3, r7, r1
 80016d4:	785a      	ldrb	r2, [r3, #1]
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	705a      	strb	r2, [r3, #1]
	t->sec = stime.Seconds;
 80016da:	187b      	adds	r3, r7, r1
 80016dc:	789a      	ldrb	r2, [r3, #2]
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	709a      	strb	r2, [r3, #2]
}
 80016e2:	46c0      	nop			; (mov r8, r8)
 80016e4:	46bd      	mov	sp, r7
 80016e6:	b009      	add	sp, #36	; 0x24
 80016e8:	bd90      	pop	{r4, r7, pc}
 80016ea:	46c0      	nop			; (mov r8, r8)
 80016ec:	200000fc 	.word	0x200000fc
 80016f0:	0000076c 	.word	0x0000076c

080016f4 <peripheralClockConfig>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void peripheralClockConfig() {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08a      	sub	sp, #40	; 0x28
 80016f8:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016fa:	003b      	movs	r3, r7
 80016fc:	0018      	movs	r0, r3
 80016fe:	2328      	movs	r3, #40	; 0x28
 8001700:	001a      	movs	r2, r3
 8001702:	2100      	movs	r1, #0
 8001704:	f005 f8cb 	bl	800689e <memset>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_LPTIM1;
 8001708:	003b      	movs	r3, r7
 800170a:	22a0      	movs	r2, #160	; 0xa0
 800170c:	601a      	str	r2, [r3, #0]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800170e:	003b      	movs	r3, r7
 8001710:	2280      	movs	r2, #128	; 0x80
 8001712:	0252      	lsls	r2, r2, #9
 8001714:	605a      	str	r2, [r3, #4]
	PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8001716:	003b      	movs	r3, r7
 8001718:	22c0      	movs	r2, #192	; 0xc0
 800171a:	0312      	lsls	r2, r2, #12
 800171c:	621a      	str	r2, [r3, #32]

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800171e:	003b      	movs	r3, r7
 8001720:	0018      	movs	r0, r3
 8001722:	f003 f8c5 	bl	80048b0 <HAL_RCCEx_PeriphCLKConfig>
 8001726:	1e03      	subs	r3, r0, #0
 8001728:	d001      	beq.n	800172e <peripheralClockConfig+0x3a>
	{
		Error_Handler();
 800172a:	f000 fbc3 	bl	8001eb4 <Error_Handler>
	}
}
 800172e:	46c0      	nop			; (mov r8, r8)
 8001730:	46bd      	mov	sp, r7
 8001732:	b00a      	add	sp, #40	; 0x28
 8001734:	bd80      	pop	{r7, pc}
	...

08001738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800173c:	f001 f9aa 	bl	8002a94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001740:	f000 f83c 	bl	80017bc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  peripheralClockConfig();
 8001744:	f7ff ffd6 	bl	80016f4 <peripheralClockConfig>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001748:	f000 fb22 	bl	8001d90 <MX_GPIO_Init>
  MX_SPI1_Init();
 800174c:	f000 f9aa 	bl	8001aa4 <MX_SPI1_Init>
  MX_ADC_Init();
 8001750:	f000 f8b8 	bl	80018c4 <MX_ADC_Init>
  MX_RTC_Init();
 8001754:	f000 f942 	bl	80019dc <MX_RTC_Init>
  MX_TIM21_Init();
 8001758:	f000 f9e0 	bl	8001b1c <MX_TIM21_Init>
  MX_LPTIM1_Init();
 800175c:	f000 f916 	bl	800198c <MX_LPTIM1_Init>
  MX_DMA_Init();
 8001760:	f000 faf8 	bl	8001d54 <MX_DMA_Init>
  MX_TIM22_Init();
 8001764:	f000 fa68 	bl	8001c38 <MX_TIM22_Init>
  /* USER CODE BEGIN 2 */
  	/* initialization for display */
	HAL_Delay(2000);
 8001768:	23fa      	movs	r3, #250	; 0xfa
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	0018      	movs	r0, r3
 800176e:	f001 f9f1 	bl	8002b54 <HAL_Delay>
	TFT_startup(&hspi1);
 8001772:	4b0d      	ldr	r3, [pc, #52]	; (80017a8 <main+0x70>)
 8001774:	0018      	movs	r0, r3
 8001776:	f7fe ff4d 	bl	8000614 <TFT_startup>
	clearScreen(ST77XX_WHITE, &hspi1);
 800177a:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <main+0x70>)
 800177c:	4a0b      	ldr	r2, [pc, #44]	; (80017ac <main+0x74>)
 800177e:	0019      	movs	r1, r3
 8001780:	0010      	movs	r0, r2
 8001782:	f7ff fccd 	bl	8001120 <clearScreen>

	/* start updating display for ui */
	updateFace = 1;
 8001786:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <main+0x78>)
 8001788:	2201      	movs	r2, #1
 800178a:	701a      	strb	r2, [r3, #0]
	face = faceClock;
 800178c:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <main+0x7c>)
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
	updateClock = 1;
 8001792:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <main+0x80>)
 8001794:	2201      	movs	r2, #1
 8001796:	701a      	strb	r2, [r3, #0]
	runClockDisplay();
 8001798:	f001 f912 	bl	80029c0 <runClockDisplay>
	  // clock and timer tests
//	  clockTest(&hrtc, &hspi1);

	  // display tests
//	  lineTest(&hspi1);
	  charTest(&hspi1);
 800179c:	4b02      	ldr	r3, [pc, #8]	; (80017a8 <main+0x70>)
 800179e:	0018      	movs	r0, r3
 80017a0:	f7ff fcd6 	bl	8001150 <charTest>
 80017a4:	e7fa      	b.n	800179c <main+0x64>
 80017a6:	46c0      	nop			; (mov r8, r8)
 80017a8:	20000128 	.word	0x20000128
 80017ac:	0000ffff 	.word	0x0000ffff
 80017b0:	200000c8 	.word	0x200000c8
 80017b4:	2000002c 	.word	0x2000002c
 80017b8:	20000068 	.word	0x20000068

080017bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017bc:	b590      	push	{r4, r7, lr}
 80017be:	b09f      	sub	sp, #124	; 0x7c
 80017c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017c2:	2440      	movs	r4, #64	; 0x40
 80017c4:	193b      	adds	r3, r7, r4
 80017c6:	0018      	movs	r0, r3
 80017c8:	2338      	movs	r3, #56	; 0x38
 80017ca:	001a      	movs	r2, r3
 80017cc:	2100      	movs	r1, #0
 80017ce:	f005 f866 	bl	800689e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017d2:	232c      	movs	r3, #44	; 0x2c
 80017d4:	18fb      	adds	r3, r7, r3
 80017d6:	0018      	movs	r0, r3
 80017d8:	2314      	movs	r3, #20
 80017da:	001a      	movs	r2, r3
 80017dc:	2100      	movs	r1, #0
 80017de:	f005 f85e 	bl	800689e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017e2:	1d3b      	adds	r3, r7, #4
 80017e4:	0018      	movs	r0, r3
 80017e6:	2328      	movs	r3, #40	; 0x28
 80017e8:	001a      	movs	r2, r3
 80017ea:	2100      	movs	r1, #0
 80017ec:	f005 f857 	bl	800689e <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017f0:	4b31      	ldr	r3, [pc, #196]	; (80018b8 <SystemClock_Config+0xfc>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a31      	ldr	r2, [pc, #196]	; (80018bc <SystemClock_Config+0x100>)
 80017f6:	401a      	ands	r2, r3
 80017f8:	4b2f      	ldr	r3, [pc, #188]	; (80018b8 <SystemClock_Config+0xfc>)
 80017fa:	2180      	movs	r1, #128	; 0x80
 80017fc:	0109      	lsls	r1, r1, #4
 80017fe:	430a      	orrs	r2, r1
 8001800:	601a      	str	r2, [r3, #0]
  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8001802:	f002 fac9 	bl	8003d98 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001806:	4b2e      	ldr	r3, [pc, #184]	; (80018c0 <SystemClock_Config+0x104>)
 8001808:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800180a:	4b2d      	ldr	r3, [pc, #180]	; (80018c0 <SystemClock_Config+0x104>)
 800180c:	492b      	ldr	r1, [pc, #172]	; (80018bc <SystemClock_Config+0x100>)
 800180e:	400a      	ands	r2, r1
 8001810:	651a      	str	r2, [r3, #80]	; 0x50
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8001812:	193b      	adds	r3, r7, r4
 8001814:	223c      	movs	r2, #60	; 0x3c
 8001816:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001818:	193b      	adds	r3, r7, r4
 800181a:	2280      	movs	r2, #128	; 0x80
 800181c:	0052      	lsls	r2, r2, #1
 800181e:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001820:	0021      	movs	r1, r4
 8001822:	187b      	adds	r3, r7, r1
 8001824:	2201      	movs	r2, #1
 8001826:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001828:	187b      	adds	r3, r7, r1
 800182a:	2201      	movs	r2, #1
 800182c:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800182e:	187b      	adds	r3, r7, r1
 8001830:	2201      	movs	r2, #1
 8001832:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001834:	187b      	adds	r3, r7, r1
 8001836:	2200      	movs	r2, #0
 8001838:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800183a:	187b      	adds	r3, r7, r1
 800183c:	22a0      	movs	r2, #160	; 0xa0
 800183e:	0212      	lsls	r2, r2, #8
 8001840:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001842:	187b      	adds	r3, r7, r1
 8001844:	2200      	movs	r2, #0
 8001846:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001848:	187b      	adds	r3, r7, r1
 800184a:	0018      	movs	r0, r3
 800184c:	f002 fab2 	bl	8003db4 <HAL_RCC_OscConfig>
 8001850:	1e03      	subs	r3, r0, #0
 8001852:	d001      	beq.n	8001858 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001854:	f000 fb2e 	bl	8001eb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001858:	212c      	movs	r1, #44	; 0x2c
 800185a:	187b      	adds	r3, r7, r1
 800185c:	220f      	movs	r2, #15
 800185e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001860:	187b      	adds	r3, r7, r1
 8001862:	2200      	movs	r2, #0
 8001864:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001866:	187b      	adds	r3, r7, r1
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800186c:	187b      	adds	r3, r7, r1
 800186e:	2200      	movs	r2, #0
 8001870:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001872:	187b      	adds	r3, r7, r1
 8001874:	2200      	movs	r2, #0
 8001876:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001878:	187b      	adds	r3, r7, r1
 800187a:	2100      	movs	r1, #0
 800187c:	0018      	movs	r0, r3
 800187e:	f002 fe69 	bl	8004554 <HAL_RCC_ClockConfig>
 8001882:	1e03      	subs	r3, r0, #0
 8001884:	d001      	beq.n	800188a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001886:	f000 fb15 	bl	8001eb4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_LPTIM1;
 800188a:	1d3b      	adds	r3, r7, #4
 800188c:	22a0      	movs	r2, #160	; 0xa0
 800188e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001890:	1d3b      	adds	r3, r7, #4
 8001892:	2280      	movs	r2, #128	; 0x80
 8001894:	0292      	lsls	r2, r2, #10
 8001896:	605a      	str	r2, [r3, #4]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 8001898:	1d3b      	adds	r3, r7, #4
 800189a:	2200      	movs	r2, #0
 800189c:	621a      	str	r2, [r3, #32]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800189e:	1d3b      	adds	r3, r7, #4
 80018a0:	0018      	movs	r0, r3
 80018a2:	f003 f805 	bl	80048b0 <HAL_RCCEx_PeriphCLKConfig>
 80018a6:	1e03      	subs	r3, r0, #0
 80018a8:	d001      	beq.n	80018ae <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80018aa:	f000 fb03 	bl	8001eb4 <Error_Handler>
  }
}
 80018ae:	46c0      	nop			; (mov r8, r8)
 80018b0:	46bd      	mov	sp, r7
 80018b2:	b01f      	add	sp, #124	; 0x7c
 80018b4:	bd90      	pop	{r4, r7, pc}
 80018b6:	46c0      	nop			; (mov r8, r8)
 80018b8:	40007000 	.word	0x40007000
 80018bc:	ffffe7ff 	.word	0xffffe7ff
 80018c0:	40021000 	.word	0x40021000

080018c4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018ca:	003b      	movs	r3, r7
 80018cc:	0018      	movs	r0, r3
 80018ce:	2308      	movs	r3, #8
 80018d0:	001a      	movs	r2, r3
 80018d2:	2100      	movs	r1, #0
 80018d4:	f004 ffe3 	bl	800689e <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 80018d8:	4b2a      	ldr	r3, [pc, #168]	; (8001984 <MX_ADC_Init+0xc0>)
 80018da:	4a2b      	ldr	r2, [pc, #172]	; (8001988 <MX_ADC_Init+0xc4>)
 80018dc:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80018de:	4b29      	ldr	r3, [pc, #164]	; (8001984 <MX_ADC_Init+0xc0>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80018e4:	4b27      	ldr	r3, [pc, #156]	; (8001984 <MX_ADC_Init+0xc0>)
 80018e6:	22c0      	movs	r2, #192	; 0xc0
 80018e8:	0612      	lsls	r2, r2, #24
 80018ea:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80018ec:	4b25      	ldr	r3, [pc, #148]	; (8001984 <MX_ADC_Init+0xc0>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80018f2:	4b24      	ldr	r3, [pc, #144]	; (8001984 <MX_ADC_Init+0xc0>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80018f8:	4b22      	ldr	r3, [pc, #136]	; (8001984 <MX_ADC_Init+0xc0>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018fe:	4b21      	ldr	r3, [pc, #132]	; (8001984 <MX_ADC_Init+0xc0>)
 8001900:	2200      	movs	r2, #0
 8001902:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001904:	4b1f      	ldr	r3, [pc, #124]	; (8001984 <MX_ADC_Init+0xc0>)
 8001906:	2220      	movs	r2, #32
 8001908:	2100      	movs	r1, #0
 800190a:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800190c:	4b1d      	ldr	r3, [pc, #116]	; (8001984 <MX_ADC_Init+0xc0>)
 800190e:	2221      	movs	r2, #33	; 0x21
 8001910:	2100      	movs	r1, #0
 8001912:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001914:	4b1b      	ldr	r3, [pc, #108]	; (8001984 <MX_ADC_Init+0xc0>)
 8001916:	2200      	movs	r2, #0
 8001918:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800191a:	4b1a      	ldr	r3, [pc, #104]	; (8001984 <MX_ADC_Init+0xc0>)
 800191c:	22c2      	movs	r2, #194	; 0xc2
 800191e:	32ff      	adds	r2, #255	; 0xff
 8001920:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001922:	4b18      	ldr	r3, [pc, #96]	; (8001984 <MX_ADC_Init+0xc0>)
 8001924:	222c      	movs	r2, #44	; 0x2c
 8001926:	2100      	movs	r1, #0
 8001928:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800192a:	4b16      	ldr	r3, [pc, #88]	; (8001984 <MX_ADC_Init+0xc0>)
 800192c:	2204      	movs	r2, #4
 800192e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001930:	4b14      	ldr	r3, [pc, #80]	; (8001984 <MX_ADC_Init+0xc0>)
 8001932:	2200      	movs	r2, #0
 8001934:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001936:	4b13      	ldr	r3, [pc, #76]	; (8001984 <MX_ADC_Init+0xc0>)
 8001938:	2200      	movs	r2, #0
 800193a:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 800193c:	4b11      	ldr	r3, [pc, #68]	; (8001984 <MX_ADC_Init+0xc0>)
 800193e:	2200      	movs	r2, #0
 8001940:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001942:	4b10      	ldr	r3, [pc, #64]	; (8001984 <MX_ADC_Init+0xc0>)
 8001944:	2200      	movs	r2, #0
 8001946:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001948:	4b0e      	ldr	r3, [pc, #56]	; (8001984 <MX_ADC_Init+0xc0>)
 800194a:	0018      	movs	r0, r3
 800194c:	f001 f920 	bl	8002b90 <HAL_ADC_Init>
 8001950:	1e03      	subs	r3, r0, #0
 8001952:	d001      	beq.n	8001958 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8001954:	f000 faae 	bl	8001eb4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001958:	003b      	movs	r3, r7
 800195a:	2201      	movs	r2, #1
 800195c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800195e:	003b      	movs	r3, r7
 8001960:	2280      	movs	r2, #128	; 0x80
 8001962:	0152      	lsls	r2, r2, #5
 8001964:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001966:	003a      	movs	r2, r7
 8001968:	4b06      	ldr	r3, [pc, #24]	; (8001984 <MX_ADC_Init+0xc0>)
 800196a:	0011      	movs	r1, r2
 800196c:	0018      	movs	r0, r3
 800196e:	f001 fa83 	bl	8002e78 <HAL_ADC_ConfigChannel>
 8001972:	1e03      	subs	r3, r0, #0
 8001974:	d001      	beq.n	800197a <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8001976:	f000 fa9d 	bl	8001eb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800197a:	46c0      	nop			; (mov r8, r8)
 800197c:	46bd      	mov	sp, r7
 800197e:	b002      	add	sp, #8
 8001980:	bd80      	pop	{r7, pc}
 8001982:	46c0      	nop			; (mov r8, r8)
 8001984:	200001c8 	.word	0x200001c8
 8001988:	40012400 	.word	0x40012400

0800198c <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001990:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <MX_LPTIM1_Init+0x44>)
 8001992:	4a10      	ldr	r2, [pc, #64]	; (80019d4 <MX_LPTIM1_Init+0x48>)
 8001994:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001996:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <MX_LPTIM1_Init+0x44>)
 8001998:	2200      	movs	r2, #0
 800199a:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 800199c:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <MX_LPTIM1_Init+0x44>)
 800199e:	2200      	movs	r2, #0
 80019a0:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80019a2:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <MX_LPTIM1_Init+0x44>)
 80019a4:	4a0c      	ldr	r2, [pc, #48]	; (80019d8 <MX_LPTIM1_Init+0x4c>)
 80019a6:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80019a8:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <MX_LPTIM1_Init+0x44>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80019ae:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <MX_LPTIM1_Init+0x44>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80019b4:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <MX_LPTIM1_Init+0x44>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80019ba:	4b05      	ldr	r3, [pc, #20]	; (80019d0 <MX_LPTIM1_Init+0x44>)
 80019bc:	0018      	movs	r0, r3
 80019be:	f001 ff47 	bl	8003850 <HAL_LPTIM_Init>
 80019c2:	1e03      	subs	r3, r0, #0
 80019c4:	d001      	beq.n	80019ca <MX_LPTIM1_Init+0x3e>
  {
    Error_Handler();
 80019c6:	f000 fa75 	bl	8001eb4 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 80019ca:	46c0      	nop			; (mov r8, r8)
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	200000cc 	.word	0x200000cc
 80019d4:	40007c00 	.word	0x40007c00
 80019d8:	0000ffff 	.word	0x0000ffff

080019dc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80019e2:	1d3b      	adds	r3, r7, #4
 80019e4:	0018      	movs	r0, r3
 80019e6:	2314      	movs	r3, #20
 80019e8:	001a      	movs	r2, r3
 80019ea:	2100      	movs	r1, #0
 80019ec:	f004 ff57 	bl	800689e <memset>
  RTC_DateTypeDef sDate = {0};
 80019f0:	003b      	movs	r3, r7
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80019f6:	4b29      	ldr	r3, [pc, #164]	; (8001a9c <MX_RTC_Init+0xc0>)
 80019f8:	4a29      	ldr	r2, [pc, #164]	; (8001aa0 <MX_RTC_Init+0xc4>)
 80019fa:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80019fc:	4b27      	ldr	r3, [pc, #156]	; (8001a9c <MX_RTC_Init+0xc0>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001a02:	4b26      	ldr	r3, [pc, #152]	; (8001a9c <MX_RTC_Init+0xc0>)
 8001a04:	227f      	movs	r2, #127	; 0x7f
 8001a06:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001a08:	4b24      	ldr	r3, [pc, #144]	; (8001a9c <MX_RTC_Init+0xc0>)
 8001a0a:	22ff      	movs	r2, #255	; 0xff
 8001a0c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a0e:	4b23      	ldr	r3, [pc, #140]	; (8001a9c <MX_RTC_Init+0xc0>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001a14:	4b21      	ldr	r3, [pc, #132]	; (8001a9c <MX_RTC_Init+0xc0>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a1a:	4b20      	ldr	r3, [pc, #128]	; (8001a9c <MX_RTC_Init+0xc0>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a20:	4b1e      	ldr	r3, [pc, #120]	; (8001a9c <MX_RTC_Init+0xc0>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a26:	4b1d      	ldr	r3, [pc, #116]	; (8001a9c <MX_RTC_Init+0xc0>)
 8001a28:	0018      	movs	r0, r3
 8001a2a:	f003 f8b5 	bl	8004b98 <HAL_RTC_Init>
 8001a2e:	1e03      	subs	r3, r0, #0
 8001a30:	d001      	beq.n	8001a36 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001a32:	f000 fa3f 	bl	8001eb4 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0;
 8001a36:	1d3b      	adds	r3, r7, #4
 8001a38:	2200      	movs	r2, #0
 8001a3a:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8001a3c:	1d3b      	adds	r3, r7, #4
 8001a3e:	2200      	movs	r2, #0
 8001a40:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8001a42:	1d3b      	adds	r3, r7, #4
 8001a44:	2200      	movs	r2, #0
 8001a46:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001a48:	1d3b      	adds	r3, r7, #4
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001a4e:	1d3b      	adds	r3, r7, #4
 8001a50:	2200      	movs	r2, #0
 8001a52:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001a54:	1d39      	adds	r1, r7, #4
 8001a56:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <MX_RTC_Init+0xc0>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	f003 f93a 	bl	8004cd4 <HAL_RTC_SetTime>
 8001a60:	1e03      	subs	r3, r0, #0
 8001a62:	d001      	beq.n	8001a68 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 8001a64:	f000 fa26 	bl	8001eb4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001a68:	003b      	movs	r3, r7
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001a6e:	003b      	movs	r3, r7
 8001a70:	2201      	movs	r2, #1
 8001a72:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8001a74:	003b      	movs	r3, r7
 8001a76:	2201      	movs	r2, #1
 8001a78:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 8001a7a:	003b      	movs	r3, r7
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001a80:	0039      	movs	r1, r7
 8001a82:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <MX_RTC_Init+0xc0>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	0018      	movs	r0, r3
 8001a88:	f003 fa44 	bl	8004f14 <HAL_RTC_SetDate>
 8001a8c:	1e03      	subs	r3, r0, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8001a90:	f000 fa10 	bl	8001eb4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001a94:	46c0      	nop			; (mov r8, r8)
 8001a96:	46bd      	mov	sp, r7
 8001a98:	b006      	add	sp, #24
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	200000fc 	.word	0x200000fc
 8001aa0:	40002800 	.word	0x40002800

08001aa4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001aa8:	4b19      	ldr	r3, [pc, #100]	; (8001b10 <MX_SPI1_Init+0x6c>)
 8001aaa:	4a1a      	ldr	r2, [pc, #104]	; (8001b14 <MX_SPI1_Init+0x70>)
 8001aac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001aae:	4b18      	ldr	r3, [pc, #96]	; (8001b10 <MX_SPI1_Init+0x6c>)
 8001ab0:	2282      	movs	r2, #130	; 0x82
 8001ab2:	0052      	lsls	r2, r2, #1
 8001ab4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ab6:	4b16      	ldr	r3, [pc, #88]	; (8001b10 <MX_SPI1_Init+0x6c>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001abc:	4b14      	ldr	r3, [pc, #80]	; (8001b10 <MX_SPI1_Init+0x6c>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ac2:	4b13      	ldr	r3, [pc, #76]	; (8001b10 <MX_SPI1_Init+0x6c>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ac8:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <MX_SPI1_Init+0x6c>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ace:	4b10      	ldr	r3, [pc, #64]	; (8001b10 <MX_SPI1_Init+0x6c>)
 8001ad0:	2280      	movs	r2, #128	; 0x80
 8001ad2:	0092      	lsls	r2, r2, #2
 8001ad4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ad6:	4b0e      	ldr	r3, [pc, #56]	; (8001b10 <MX_SPI1_Init+0x6c>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001adc:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <MX_SPI1_Init+0x6c>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ae2:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <MX_SPI1_Init+0x6c>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ae8:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <MX_SPI1_Init+0x6c>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001aee:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <MX_SPI1_Init+0x6c>)
 8001af0:	2207      	movs	r2, #7
 8001af2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001af4:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <MX_SPI1_Init+0x6c>)
 8001af6:	0018      	movs	r0, r3
 8001af8:	f003 fcec 	bl	80054d4 <HAL_SPI_Init>
 8001afc:	1e03      	subs	r3, r0, #0
 8001afe:	d001      	beq.n	8001b04 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b00:	f000 f9d8 	bl	8001eb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  hspi1.hdmatx = &hdma_spi1_tx;
 8001b04:	4b02      	ldr	r3, [pc, #8]	; (8001b10 <MX_SPI1_Init+0x6c>)
 8001b06:	4a04      	ldr	r2, [pc, #16]	; (8001b18 <MX_SPI1_Init+0x74>)
 8001b08:	649a      	str	r2, [r3, #72]	; 0x48
  /* USER CODE END SPI1_Init 2 */

}
 8001b0a:	46c0      	nop			; (mov r8, r8)
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	20000128 	.word	0x20000128
 8001b14:	40013000 	.word	0x40013000
 8001b18:	20000224 	.word	0x20000224

08001b1c <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08a      	sub	sp, #40	; 0x28
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b22:	2318      	movs	r3, #24
 8001b24:	18fb      	adds	r3, r7, r3
 8001b26:	0018      	movs	r0, r3
 8001b28:	2310      	movs	r3, #16
 8001b2a:	001a      	movs	r2, r3
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	f004 feb6 	bl	800689e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b32:	2310      	movs	r3, #16
 8001b34:	18fb      	adds	r3, r7, r3
 8001b36:	0018      	movs	r0, r3
 8001b38:	2308      	movs	r3, #8
 8001b3a:	001a      	movs	r2, r3
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	f004 feae 	bl	800689e <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b42:	003b      	movs	r3, r7
 8001b44:	0018      	movs	r0, r3
 8001b46:	2310      	movs	r3, #16
 8001b48:	001a      	movs	r2, r3
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	f004 fea7 	bl	800689e <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8001b50:	4b37      	ldr	r3, [pc, #220]	; (8001c30 <MX_TIM21_Init+0x114>)
 8001b52:	4a38      	ldr	r2, [pc, #224]	; (8001c34 <MX_TIM21_Init+0x118>)
 8001b54:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 0;
 8001b56:	4b36      	ldr	r3, [pc, #216]	; (8001c30 <MX_TIM21_Init+0x114>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001b5c:	4b34      	ldr	r3, [pc, #208]	; (8001c30 <MX_TIM21_Init+0x114>)
 8001b5e:	2210      	movs	r2, #16
 8001b60:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 0x8000;
 8001b62:	4b33      	ldr	r3, [pc, #204]	; (8001c30 <MX_TIM21_Init+0x114>)
 8001b64:	2280      	movs	r2, #128	; 0x80
 8001b66:	0212      	lsls	r2, r2, #8
 8001b68:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b6a:	4b31      	ldr	r3, [pc, #196]	; (8001c30 <MX_TIM21_Init+0x114>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b70:	4b2f      	ldr	r3, [pc, #188]	; (8001c30 <MX_TIM21_Init+0x114>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8001b76:	4b2e      	ldr	r3, [pc, #184]	; (8001c30 <MX_TIM21_Init+0x114>)
 8001b78:	0018      	movs	r0, r3
 8001b7a:	f004 f971 	bl	8005e60 <HAL_TIM_Base_Init>
 8001b7e:	1e03      	subs	r3, r0, #0
 8001b80:	d001      	beq.n	8001b86 <MX_TIM21_Init+0x6a>
  {
    Error_Handler();
 8001b82:	f000 f997 	bl	8001eb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8001b86:	2118      	movs	r1, #24
 8001b88:	187b      	adds	r3, r7, r1
 8001b8a:	2280      	movs	r2, #128	; 0x80
 8001b8c:	0192      	lsls	r2, r2, #6
 8001b8e:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8001b90:	187b      	adds	r3, r7, r1
 8001b92:	2200      	movs	r2, #0
 8001b94:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8001b96:	187b      	adds	r3, r7, r1
 8001b98:	2200      	movs	r2, #0
 8001b9a:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 8001b9c:	187b      	adds	r3, r7, r1
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8001ba2:	187a      	adds	r2, r7, r1
 8001ba4:	4b22      	ldr	r3, [pc, #136]	; (8001c30 <MX_TIM21_Init+0x114>)
 8001ba6:	0011      	movs	r1, r2
 8001ba8:	0018      	movs	r0, r3
 8001baa:	f004 fb11 	bl	80061d0 <HAL_TIM_ConfigClockSource>
 8001bae:	1e03      	subs	r3, r0, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_TIM21_Init+0x9a>
  {
    Error_Handler();
 8001bb2:	f000 f97f 	bl	8001eb4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim21) != HAL_OK)
 8001bb6:	4b1e      	ldr	r3, [pc, #120]	; (8001c30 <MX_TIM21_Init+0x114>)
 8001bb8:	0018      	movs	r0, r3
 8001bba:	f004 f99f 	bl	8005efc <HAL_TIM_OC_Init>
 8001bbe:	1e03      	subs	r3, r0, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_TIM21_Init+0xaa>
  {
    Error_Handler();
 8001bc2:	f000 f977 	bl	8001eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bc6:	2110      	movs	r1, #16
 8001bc8:	187b      	adds	r3, r7, r1
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bce:	187b      	adds	r3, r7, r1
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8001bd4:	187a      	adds	r2, r7, r1
 8001bd6:	4b16      	ldr	r3, [pc, #88]	; (8001c30 <MX_TIM21_Init+0x114>)
 8001bd8:	0011      	movs	r1, r2
 8001bda:	0018      	movs	r0, r3
 8001bdc:	f004 fdd2 	bl	8006784 <HAL_TIMEx_MasterConfigSynchronization>
 8001be0:	1e03      	subs	r3, r0, #0
 8001be2:	d001      	beq.n	8001be8 <MX_TIM21_Init+0xcc>
  {
    Error_Handler();
 8001be4:	f000 f966 	bl	8001eb4 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim21, TIM21_ETR_LSE) != HAL_OK)
 8001be8:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <MX_TIM21_Init+0x114>)
 8001bea:	2103      	movs	r1, #3
 8001bec:	0018      	movs	r0, r3
 8001bee:	f004 fe0c 	bl	800680a <HAL_TIMEx_RemapConfig>
 8001bf2:	1e03      	subs	r3, r0, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_TIM21_Init+0xde>
  {
    Error_Handler();
 8001bf6:	f000 f95d 	bl	8001eb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001bfa:	003b      	movs	r3, r7
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001c00:	003b      	movs	r3, r7
 8001c02:	2200      	movs	r2, #0
 8001c04:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c06:	003b      	movs	r3, r7
 8001c08:	2200      	movs	r2, #0
 8001c0a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c0c:	003b      	movs	r3, r7
 8001c0e:	2200      	movs	r2, #0
 8001c10:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c12:	0039      	movs	r1, r7
 8001c14:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <MX_TIM21_Init+0x114>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	0018      	movs	r0, r3
 8001c1a:	f004 fa8b 	bl	8006134 <HAL_TIM_OC_ConfigChannel>
 8001c1e:	1e03      	subs	r3, r0, #0
 8001c20:	d001      	beq.n	8001c26 <MX_TIM21_Init+0x10a>
  {
    Error_Handler();
 8001c22:	f000 f947 	bl	8001eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8001c26:	46c0      	nop			; (mov r8, r8)
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	b00a      	add	sp, #40	; 0x28
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	46c0      	nop			; (mov r8, r8)
 8001c30:	2000018c 	.word	0x2000018c
 8001c34:	40010800 	.word	0x40010800

08001c38 <MX_TIM22_Init>:
  * @brief TIM22 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM22_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b08a      	sub	sp, #40	; 0x28
 8001c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c3e:	2318      	movs	r3, #24
 8001c40:	18fb      	adds	r3, r7, r3
 8001c42:	0018      	movs	r0, r3
 8001c44:	2310      	movs	r3, #16
 8001c46:	001a      	movs	r2, r3
 8001c48:	2100      	movs	r1, #0
 8001c4a:	f004 fe28 	bl	800689e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c4e:	2310      	movs	r3, #16
 8001c50:	18fb      	adds	r3, r7, r3
 8001c52:	0018      	movs	r0, r3
 8001c54:	2308      	movs	r3, #8
 8001c56:	001a      	movs	r2, r3
 8001c58:	2100      	movs	r1, #0
 8001c5a:	f004 fe20 	bl	800689e <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c5e:	003b      	movs	r3, r7
 8001c60:	0018      	movs	r0, r3
 8001c62:	2310      	movs	r3, #16
 8001c64:	001a      	movs	r2, r3
 8001c66:	2100      	movs	r1, #0
 8001c68:	f004 fe19 	bl	800689e <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 8001c6c:	4b37      	ldr	r3, [pc, #220]	; (8001d4c <MX_TIM22_Init+0x114>)
 8001c6e:	4a38      	ldr	r2, [pc, #224]	; (8001d50 <MX_TIM22_Init+0x118>)
 8001c70:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 0;
 8001c72:	4b36      	ldr	r3, [pc, #216]	; (8001d4c <MX_TIM22_Init+0x114>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001c78:	4b34      	ldr	r3, [pc, #208]	; (8001d4c <MX_TIM22_Init+0x114>)
 8001c7a:	2210      	movs	r2, #16
 8001c7c:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 0x8000;
 8001c7e:	4b33      	ldr	r3, [pc, #204]	; (8001d4c <MX_TIM22_Init+0x114>)
 8001c80:	2280      	movs	r2, #128	; 0x80
 8001c82:	0212      	lsls	r2, r2, #8
 8001c84:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c86:	4b31      	ldr	r3, [pc, #196]	; (8001d4c <MX_TIM22_Init+0x114>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c8c:	4b2f      	ldr	r3, [pc, #188]	; (8001d4c <MX_TIM22_Init+0x114>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim22) != HAL_OK)
 8001c92:	4b2e      	ldr	r3, [pc, #184]	; (8001d4c <MX_TIM22_Init+0x114>)
 8001c94:	0018      	movs	r0, r3
 8001c96:	f004 f8e3 	bl	8005e60 <HAL_TIM_Base_Init>
 8001c9a:	1e03      	subs	r3, r0, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_TIM22_Init+0x6a>
  {
    Error_Handler();
 8001c9e:	f000 f909 	bl	8001eb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8001ca2:	2118      	movs	r1, #24
 8001ca4:	187b      	adds	r3, r7, r1
 8001ca6:	2280      	movs	r2, #128	; 0x80
 8001ca8:	0192      	lsls	r2, r2, #6
 8001caa:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8001cac:	187b      	adds	r3, r7, r1
 8001cae:	2200      	movs	r2, #0
 8001cb0:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8001cb2:	187b      	adds	r3, r7, r1
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 8001cb8:	187b      	adds	r3, r7, r1
 8001cba:	2200      	movs	r2, #0
 8001cbc:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig) != HAL_OK)
 8001cbe:	187a      	adds	r2, r7, r1
 8001cc0:	4b22      	ldr	r3, [pc, #136]	; (8001d4c <MX_TIM22_Init+0x114>)
 8001cc2:	0011      	movs	r1, r2
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	f004 fa83 	bl	80061d0 <HAL_TIM_ConfigClockSource>
 8001cca:	1e03      	subs	r3, r0, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_TIM22_Init+0x9a>
  {
    Error_Handler();
 8001cce:	f000 f8f1 	bl	8001eb4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim22) != HAL_OK)
 8001cd2:	4b1e      	ldr	r3, [pc, #120]	; (8001d4c <MX_TIM22_Init+0x114>)
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	f004 f911 	bl	8005efc <HAL_TIM_OC_Init>
 8001cda:	1e03      	subs	r3, r0, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_TIM22_Init+0xaa>
  {
    Error_Handler();
 8001cde:	f000 f8e9 	bl	8001eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ce2:	2110      	movs	r1, #16
 8001ce4:	187b      	adds	r3, r7, r1
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cea:	187b      	adds	r3, r7, r1
 8001cec:	2200      	movs	r2, #0
 8001cee:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 8001cf0:	187a      	adds	r2, r7, r1
 8001cf2:	4b16      	ldr	r3, [pc, #88]	; (8001d4c <MX_TIM22_Init+0x114>)
 8001cf4:	0011      	movs	r1, r2
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	f004 fd44 	bl	8006784 <HAL_TIMEx_MasterConfigSynchronization>
 8001cfc:	1e03      	subs	r3, r0, #0
 8001cfe:	d001      	beq.n	8001d04 <MX_TIM22_Init+0xcc>
  {
    Error_Handler();
 8001d00:	f000 f8d8 	bl	8001eb4 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim22, TIM22_ETR_LSE) != HAL_OK)
 8001d04:	4b11      	ldr	r3, [pc, #68]	; (8001d4c <MX_TIM22_Init+0x114>)
 8001d06:	2103      	movs	r1, #3
 8001d08:	0018      	movs	r0, r3
 8001d0a:	f004 fd7e 	bl	800680a <HAL_TIMEx_RemapConfig>
 8001d0e:	1e03      	subs	r3, r0, #0
 8001d10:	d001      	beq.n	8001d16 <MX_TIM22_Init+0xde>
  {
    Error_Handler();
 8001d12:	f000 f8cf 	bl	8001eb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001d16:	003b      	movs	r3, r7
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001d1c:	003b      	movs	r3, r7
 8001d1e:	2200      	movs	r2, #0
 8001d20:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d22:	003b      	movs	r3, r7
 8001d24:	2200      	movs	r2, #0
 8001d26:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d28:	003b      	movs	r3, r7
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d2e:	0039      	movs	r1, r7
 8001d30:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <MX_TIM22_Init+0x114>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	0018      	movs	r0, r3
 8001d36:	f004 f9fd 	bl	8006134 <HAL_TIM_OC_ConfigChannel>
 8001d3a:	1e03      	subs	r3, r0, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_TIM22_Init+0x10a>
  {
    Error_Handler();
 8001d3e:	f000 f8b9 	bl	8001eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */

}
 8001d42:	46c0      	nop			; (mov r8, r8)
 8001d44:	46bd      	mov	sp, r7
 8001d46:	b00a      	add	sp, #40	; 0x28
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	46c0      	nop			; (mov r8, r8)
 8001d4c:	2000008c 	.word	0x2000008c
 8001d50:	40011400 	.word	0x40011400

08001d54 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d5a:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <MX_DMA_Init+0x38>)
 8001d5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d5e:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <MX_DMA_Init+0x38>)
 8001d60:	2101      	movs	r1, #1
 8001d62:	430a      	orrs	r2, r1
 8001d64:	631a      	str	r2, [r3, #48]	; 0x30
 8001d66:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <MX_DMA_Init+0x38>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	607b      	str	r3, [r7, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001d72:	2200      	movs	r2, #0
 8001d74:	2100      	movs	r1, #0
 8001d76:	200a      	movs	r0, #10
 8001d78:	f001 f9e4 	bl	8003144 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001d7c:	200a      	movs	r0, #10
 8001d7e:	f001 f9f6 	bl	800316e <HAL_NVIC_EnableIRQ>

}
 8001d82:	46c0      	nop			; (mov r8, r8)
 8001d84:	46bd      	mov	sp, r7
 8001d86:	b002      	add	sp, #8
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	46c0      	nop			; (mov r8, r8)
 8001d8c:	40021000 	.word	0x40021000

08001d90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d90:	b590      	push	{r4, r7, lr}
 8001d92:	b089      	sub	sp, #36	; 0x24
 8001d94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d96:	240c      	movs	r4, #12
 8001d98:	193b      	adds	r3, r7, r4
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	2314      	movs	r3, #20
 8001d9e:	001a      	movs	r2, r3
 8001da0:	2100      	movs	r1, #0
 8001da2:	f004 fd7c 	bl	800689e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001da6:	4b3e      	ldr	r3, [pc, #248]	; (8001ea0 <MX_GPIO_Init+0x110>)
 8001da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001daa:	4b3d      	ldr	r3, [pc, #244]	; (8001ea0 <MX_GPIO_Init+0x110>)
 8001dac:	2104      	movs	r1, #4
 8001dae:	430a      	orrs	r2, r1
 8001db0:	62da      	str	r2, [r3, #44]	; 0x2c
 8001db2:	4b3b      	ldr	r3, [pc, #236]	; (8001ea0 <MX_GPIO_Init+0x110>)
 8001db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db6:	2204      	movs	r2, #4
 8001db8:	4013      	ands	r3, r2
 8001dba:	60bb      	str	r3, [r7, #8]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dbe:	4b38      	ldr	r3, [pc, #224]	; (8001ea0 <MX_GPIO_Init+0x110>)
 8001dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dc2:	4b37      	ldr	r3, [pc, #220]	; (8001ea0 <MX_GPIO_Init+0x110>)
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	62da      	str	r2, [r3, #44]	; 0x2c
 8001dca:	4b35      	ldr	r3, [pc, #212]	; (8001ea0 <MX_GPIO_Init+0x110>)
 8001dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dce:	2201      	movs	r2, #1
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	607b      	str	r3, [r7, #4]
 8001dd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd6:	4b32      	ldr	r3, [pc, #200]	; (8001ea0 <MX_GPIO_Init+0x110>)
 8001dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dda:	4b31      	ldr	r3, [pc, #196]	; (8001ea0 <MX_GPIO_Init+0x110>)
 8001ddc:	2102      	movs	r1, #2
 8001dde:	430a      	orrs	r2, r1
 8001de0:	62da      	str	r2, [r3, #44]	; 0x2c
 8001de2:	4b2f      	ldr	r3, [pc, #188]	; (8001ea0 <MX_GPIO_Init+0x110>)
 8001de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de6:	2202      	movs	r2, #2
 8001de8:	4013      	ands	r3, r2
 8001dea:	603b      	str	r3, [r7, #0]
 8001dec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_7, GPIO_PIN_RESET);
 8001dee:	4b2d      	ldr	r3, [pc, #180]	; (8001ea4 <MX_GPIO_Init+0x114>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	2183      	movs	r1, #131	; 0x83
 8001df4:	0018      	movs	r0, r3
 8001df6:	f001 fce0 	bl	80037ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_6, GPIO_PIN_RESET);
 8001dfa:	4b2b      	ldr	r3, [pc, #172]	; (8001ea8 <MX_GPIO_Init+0x118>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	2142      	movs	r1, #66	; 0x42
 8001e00:	0018      	movs	r0, r3
 8001e02:	f001 fcda 	bl	80037ba <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_7;
 8001e06:	0021      	movs	r1, r4
 8001e08:	187b      	adds	r3, r7, r1
 8001e0a:	2283      	movs	r2, #131	; 0x83
 8001e0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e0e:	187b      	adds	r3, r7, r1
 8001e10:	2201      	movs	r2, #1
 8001e12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	187b      	adds	r3, r7, r1
 8001e16:	2200      	movs	r2, #0
 8001e18:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1a:	187b      	adds	r3, r7, r1
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e20:	000c      	movs	r4, r1
 8001e22:	187b      	adds	r3, r7, r1
 8001e24:	4a1f      	ldr	r2, [pc, #124]	; (8001ea4 <MX_GPIO_Init+0x114>)
 8001e26:	0019      	movs	r1, r3
 8001e28:	0010      	movs	r0, r2
 8001e2a:	f001 fb2b 	bl	8003484 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8001e2e:	0021      	movs	r1, r4
 8001e30:	187b      	adds	r3, r7, r1
 8001e32:	2242      	movs	r2, #66	; 0x42
 8001e34:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e36:	187b      	adds	r3, r7, r1
 8001e38:	2201      	movs	r2, #1
 8001e3a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	187b      	adds	r3, r7, r1
 8001e3e:	2200      	movs	r2, #0
 8001e40:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e42:	187b      	adds	r3, r7, r1
 8001e44:	2200      	movs	r2, #0
 8001e46:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e48:	000c      	movs	r4, r1
 8001e4a:	187b      	adds	r3, r7, r1
 8001e4c:	4a16      	ldr	r2, [pc, #88]	; (8001ea8 <MX_GPIO_Init+0x118>)
 8001e4e:	0019      	movs	r1, r3
 8001e50:	0010      	movs	r0, r2
 8001e52:	f001 fb17 	bl	8003484 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001e56:	0021      	movs	r1, r4
 8001e58:	187b      	adds	r3, r7, r1
 8001e5a:	4a14      	ldr	r2, [pc, #80]	; (8001eac <MX_GPIO_Init+0x11c>)
 8001e5c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e5e:	187b      	adds	r3, r7, r1
 8001e60:	4a13      	ldr	r2, [pc, #76]	; (8001eb0 <MX_GPIO_Init+0x120>)
 8001e62:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e64:	187b      	adds	r3, r7, r1
 8001e66:	2202      	movs	r2, #2
 8001e68:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e6a:	187b      	adds	r3, r7, r1
 8001e6c:	4a0e      	ldr	r2, [pc, #56]	; (8001ea8 <MX_GPIO_Init+0x118>)
 8001e6e:	0019      	movs	r1, r3
 8001e70:	0010      	movs	r0, r2
 8001e72:	f001 fb07 	bl	8003484 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8001e76:	2200      	movs	r2, #0
 8001e78:	2100      	movs	r1, #0
 8001e7a:	2006      	movs	r0, #6
 8001e7c:	f001 f962 	bl	8003144 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8001e80:	2006      	movs	r0, #6
 8001e82:	f001 f974 	bl	800316e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001e86:	2200      	movs	r2, #0
 8001e88:	2100      	movs	r1, #0
 8001e8a:	2007      	movs	r0, #7
 8001e8c:	f001 f95a 	bl	8003144 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001e90:	2007      	movs	r0, #7
 8001e92:	f001 f96c 	bl	800316e <HAL_NVIC_EnableIRQ>

}
 8001e96:	46c0      	nop			; (mov r8, r8)
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	b009      	add	sp, #36	; 0x24
 8001e9c:	bd90      	pop	{r4, r7, pc}
 8001e9e:	46c0      	nop			; (mov r8, r8)
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	50000800 	.word	0x50000800
 8001ea8:	50000400 	.word	0x50000400
 8001eac:	0000e004 	.word	0x0000e004
 8001eb0:	10110000 	.word	0x10110000

08001eb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001eb8:	46c0      	nop			; (mov r8, r8)
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
	...

08001ec0 <HAL_GPIO_EXTI_Callback>:
	}
}

// this sure is a big callback
// need to complete
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001ec0:	b5b0      	push	{r4, r5, r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	0002      	movs	r2, r0
 8001ec8:	1dbb      	adds	r3, r7, #6
 8001eca:	801a      	strh	r2, [r3, #0]
	/* program flow:
	 *   check current face used
	 *   check current variables and check button pressed
	 */
//	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);	// should run for any button
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8001ecc:	4bb9      	ldr	r3, [pc, #740]	; (80021b4 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8001ece:	2102      	movs	r1, #2
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	f001 fc8f 	bl	80037f4 <HAL_GPIO_TogglePin>
	if (GPIO_Pin == BUTTON0) {
 8001ed6:	1dbb      	adds	r3, r7, #6
 8001ed8:	881b      	ldrh	r3, [r3, #0]
 8001eda:	2b04      	cmp	r3, #4
 8001edc:	d110      	bne.n	8001f00 <HAL_GPIO_EXTI_Callback+0x40>
		face = (face + 1) % NUM_FACES;
 8001ede:	4bb6      	ldr	r3, [pc, #728]	; (80021b8 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	4ab5      	ldr	r2, [pc, #724]	; (80021bc <HAL_GPIO_EXTI_Callback+0x2fc>)
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	d504      	bpl.n	8001ef4 <HAL_GPIO_EXTI_Callback+0x34>
 8001eea:	3b01      	subs	r3, #1
 8001eec:	2204      	movs	r2, #4
 8001eee:	4252      	negs	r2, r2
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	001a      	movs	r2, r3
 8001ef6:	4bb0      	ldr	r3, [pc, #704]	; (80021b8 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8001ef8:	601a      	str	r2, [r3, #0]
		updateFace = 1;
 8001efa:	4bb1      	ldr	r3, [pc, #708]	; (80021c0 <HAL_GPIO_EXTI_Callback+0x300>)
 8001efc:	2201      	movs	r2, #1
 8001efe:	701a      	strb	r2, [r3, #0]
	}
	// use RTC
	if (face == faceClock) {
 8001f00:	4bad      	ldr	r3, [pc, #692]	; (80021b8 <HAL_GPIO_EXTI_Callback+0x2f8>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d000      	beq.n	8001f0a <HAL_GPIO_EXTI_Callback+0x4a>
 8001f08:	e0d1      	b.n	80020ae <HAL_GPIO_EXTI_Callback+0x1ee>
		updateClock = 1;
 8001f0a:	4bae      	ldr	r3, [pc, #696]	; (80021c4 <HAL_GPIO_EXTI_Callback+0x304>)
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	701a      	strb	r2, [r3, #0]
		if (GPIO_Pin == BUTTON1 && clockSet) {
 8001f10:	1dbb      	adds	r3, r7, #6
 8001f12:	881a      	ldrh	r2, [r3, #0]
 8001f14:	2380      	movs	r3, #128	; 0x80
 8001f16:	019b      	lsls	r3, r3, #6
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d145      	bne.n	8001fa8 <HAL_GPIO_EXTI_Callback+0xe8>
 8001f1c:	4baa      	ldr	r3, [pc, #680]	; (80021c8 <HAL_GPIO_EXTI_Callback+0x308>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d041      	beq.n	8001fa8 <HAL_GPIO_EXTI_Callback+0xe8>
			// change fields up, do nothing if not setting clock
			switch (clockField) {
 8001f24:	4ba9      	ldr	r3, [pc, #676]	; (80021cc <HAL_GPIO_EXTI_Callback+0x30c>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2b05      	cmp	r3, #5
 8001f2a:	d83f      	bhi.n	8001fac <HAL_GPIO_EXTI_Callback+0xec>
 8001f2c:	009a      	lsls	r2, r3, #2
 8001f2e:	4ba8      	ldr	r3, [pc, #672]	; (80021d0 <HAL_GPIO_EXTI_Callback+0x310>)
 8001f30:	18d3      	adds	r3, r2, r3
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	469f      	mov	pc, r3
				case 1: tempClockTimes.min = (tempClockTimes.min+1) % 60; break;
 8001f36:	4ba7      	ldr	r3, [pc, #668]	; (80021d4 <HAL_GPIO_EXTI_Callback+0x314>)
 8001f38:	785b      	ldrb	r3, [r3, #1]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	213c      	movs	r1, #60	; 0x3c
 8001f3e:	0018      	movs	r0, r3
 8001f40:	f7fe fa52 	bl	80003e8 <__aeabi_idivmod>
 8001f44:	000b      	movs	r3, r1
 8001f46:	b2da      	uxtb	r2, r3
 8001f48:	4ba2      	ldr	r3, [pc, #648]	; (80021d4 <HAL_GPIO_EXTI_Callback+0x314>)
 8001f4a:	705a      	strb	r2, [r3, #1]
 8001f4c:	e02f      	b.n	8001fae <HAL_GPIO_EXTI_Callback+0xee>
				case 2: tempClockTimes.hr = (tempClockTimes.hr+1) % 24; break;
 8001f4e:	4ba1      	ldr	r3, [pc, #644]	; (80021d4 <HAL_GPIO_EXTI_Callback+0x314>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	3301      	adds	r3, #1
 8001f54:	2118      	movs	r1, #24
 8001f56:	0018      	movs	r0, r3
 8001f58:	f7fe fa46 	bl	80003e8 <__aeabi_idivmod>
 8001f5c:	000b      	movs	r3, r1
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	4b9c      	ldr	r3, [pc, #624]	; (80021d4 <HAL_GPIO_EXTI_Callback+0x314>)
 8001f62:	701a      	strb	r2, [r3, #0]
 8001f64:	e023      	b.n	8001fae <HAL_GPIO_EXTI_Callback+0xee>
				case 3: tempClockDate.yr++; break;		// supposed to be between large numbers. no need for bounds checking
 8001f66:	4b9c      	ldr	r3, [pc, #624]	; (80021d8 <HAL_GPIO_EXTI_Callback+0x318>)
 8001f68:	881b      	ldrh	r3, [r3, #0]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	4b9a      	ldr	r3, [pc, #616]	; (80021d8 <HAL_GPIO_EXTI_Callback+0x318>)
 8001f70:	801a      	strh	r2, [r3, #0]
 8001f72:	e01c      	b.n	8001fae <HAL_GPIO_EXTI_Callback+0xee>
				case 4: tempClockDate.month = (tempClockDate.month+1) % 12 + 1; break;
 8001f74:	4b98      	ldr	r3, [pc, #608]	; (80021d8 <HAL_GPIO_EXTI_Callback+0x318>)
 8001f76:	789b      	ldrb	r3, [r3, #2]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	210c      	movs	r1, #12
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	f7fe fa33 	bl	80003e8 <__aeabi_idivmod>
 8001f82:	000b      	movs	r3, r1
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	3301      	adds	r3, #1
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	4b93      	ldr	r3, [pc, #588]	; (80021d8 <HAL_GPIO_EXTI_Callback+0x318>)
 8001f8c:	709a      	strb	r2, [r3, #2]
 8001f8e:	e00e      	b.n	8001fae <HAL_GPIO_EXTI_Callback+0xee>
				case 5: tempClockDate.date = (tempClockDate.date+1) % 31; break;		// make more robust?
 8001f90:	4b91      	ldr	r3, [pc, #580]	; (80021d8 <HAL_GPIO_EXTI_Callback+0x318>)
 8001f92:	78db      	ldrb	r3, [r3, #3]
 8001f94:	3301      	adds	r3, #1
 8001f96:	211f      	movs	r1, #31
 8001f98:	0018      	movs	r0, r3
 8001f9a:	f7fe fa25 	bl	80003e8 <__aeabi_idivmod>
 8001f9e:	000b      	movs	r3, r1
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	4b8d      	ldr	r3, [pc, #564]	; (80021d8 <HAL_GPIO_EXTI_Callback+0x318>)
 8001fa4:	70da      	strb	r2, [r3, #3]
 8001fa6:	e002      	b.n	8001fae <HAL_GPIO_EXTI_Callback+0xee>
				default: break;
			}
		}
 8001fa8:	46c0      	nop			; (mov r8, r8)
 8001faa:	e000      	b.n	8001fae <HAL_GPIO_EXTI_Callback+0xee>
				default: break;
 8001fac:	46c0      	nop			; (mov r8, r8)
		if (GPIO_Pin == BUTTON2 && clockSet) {
 8001fae:	1dbb      	adds	r3, r7, #6
 8001fb0:	881a      	ldrh	r2, [r3, #0]
 8001fb2:	2380      	movs	r3, #128	; 0x80
 8001fb4:	01db      	lsls	r3, r3, #7
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d147      	bne.n	800204a <HAL_GPIO_EXTI_Callback+0x18a>
 8001fba:	4b83      	ldr	r3, [pc, #524]	; (80021c8 <HAL_GPIO_EXTI_Callback+0x308>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d043      	beq.n	800204a <HAL_GPIO_EXTI_Callback+0x18a>
			// change fields down, do nothing if not setting clock
			switch (clockField) {
 8001fc2:	4b82      	ldr	r3, [pc, #520]	; (80021cc <HAL_GPIO_EXTI_Callback+0x30c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2b05      	cmp	r3, #5
 8001fc8:	d841      	bhi.n	800204e <HAL_GPIO_EXTI_Callback+0x18e>
 8001fca:	009a      	lsls	r2, r3, #2
 8001fcc:	4b83      	ldr	r3, [pc, #524]	; (80021dc <HAL_GPIO_EXTI_Callback+0x31c>)
 8001fce:	18d3      	adds	r3, r2, r3
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	469f      	mov	pc, r3
				case 1: tempClockTimes.min = tempClockTimes.min == 0 ? 59 : tempClockTimes.min-1; break;
 8001fd4:	4b7f      	ldr	r3, [pc, #508]	; (80021d4 <HAL_GPIO_EXTI_Callback+0x314>)
 8001fd6:	785b      	ldrb	r3, [r3, #1]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d004      	beq.n	8001fe6 <HAL_GPIO_EXTI_Callback+0x126>
 8001fdc:	4b7d      	ldr	r3, [pc, #500]	; (80021d4 <HAL_GPIO_EXTI_Callback+0x314>)
 8001fde:	785b      	ldrb	r3, [r3, #1]
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	b2da      	uxtb	r2, r3
 8001fe4:	e000      	b.n	8001fe8 <HAL_GPIO_EXTI_Callback+0x128>
 8001fe6:	223b      	movs	r2, #59	; 0x3b
 8001fe8:	4b7a      	ldr	r3, [pc, #488]	; (80021d4 <HAL_GPIO_EXTI_Callback+0x314>)
 8001fea:	705a      	strb	r2, [r3, #1]
 8001fec:	e030      	b.n	8002050 <HAL_GPIO_EXTI_Callback+0x190>
				case 2: tempClockTimes.hr = tempClockTimes.hr == 0 ? 24 : tempClockTimes.hr-1; break;
 8001fee:	4b79      	ldr	r3, [pc, #484]	; (80021d4 <HAL_GPIO_EXTI_Callback+0x314>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d004      	beq.n	8002000 <HAL_GPIO_EXTI_Callback+0x140>
 8001ff6:	4b77      	ldr	r3, [pc, #476]	; (80021d4 <HAL_GPIO_EXTI_Callback+0x314>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	e000      	b.n	8002002 <HAL_GPIO_EXTI_Callback+0x142>
 8002000:	2218      	movs	r2, #24
 8002002:	4b74      	ldr	r3, [pc, #464]	; (80021d4 <HAL_GPIO_EXTI_Callback+0x314>)
 8002004:	701a      	strb	r2, [r3, #0]
 8002006:	e023      	b.n	8002050 <HAL_GPIO_EXTI_Callback+0x190>
				case 3: tempClockDate.yr--; break;		// supposed to be from 1950-2050. no need to do bounds checking
 8002008:	4b73      	ldr	r3, [pc, #460]	; (80021d8 <HAL_GPIO_EXTI_Callback+0x318>)
 800200a:	881b      	ldrh	r3, [r3, #0]
 800200c:	3b01      	subs	r3, #1
 800200e:	b29a      	uxth	r2, r3
 8002010:	4b71      	ldr	r3, [pc, #452]	; (80021d8 <HAL_GPIO_EXTI_Callback+0x318>)
 8002012:	801a      	strh	r2, [r3, #0]
 8002014:	e01c      	b.n	8002050 <HAL_GPIO_EXTI_Callback+0x190>
				case 4: tempClockDate.month = tempClockDate.month == 1 ? 12 : tempClockDate.month-1; break;
 8002016:	4b70      	ldr	r3, [pc, #448]	; (80021d8 <HAL_GPIO_EXTI_Callback+0x318>)
 8002018:	789b      	ldrb	r3, [r3, #2]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d004      	beq.n	8002028 <HAL_GPIO_EXTI_Callback+0x168>
 800201e:	4b6e      	ldr	r3, [pc, #440]	; (80021d8 <HAL_GPIO_EXTI_Callback+0x318>)
 8002020:	789b      	ldrb	r3, [r3, #2]
 8002022:	3b01      	subs	r3, #1
 8002024:	b2da      	uxtb	r2, r3
 8002026:	e000      	b.n	800202a <HAL_GPIO_EXTI_Callback+0x16a>
 8002028:	220c      	movs	r2, #12
 800202a:	4b6b      	ldr	r3, [pc, #428]	; (80021d8 <HAL_GPIO_EXTI_Callback+0x318>)
 800202c:	709a      	strb	r2, [r3, #2]
 800202e:	e00f      	b.n	8002050 <HAL_GPIO_EXTI_Callback+0x190>
				case 5: tempClockDate.date = tempClockDate.date == 0 ? 31 : tempClockDate.date-1; break;
 8002030:	4b69      	ldr	r3, [pc, #420]	; (80021d8 <HAL_GPIO_EXTI_Callback+0x318>)
 8002032:	78db      	ldrb	r3, [r3, #3]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d004      	beq.n	8002042 <HAL_GPIO_EXTI_Callback+0x182>
 8002038:	4b67      	ldr	r3, [pc, #412]	; (80021d8 <HAL_GPIO_EXTI_Callback+0x318>)
 800203a:	78db      	ldrb	r3, [r3, #3]
 800203c:	3b01      	subs	r3, #1
 800203e:	b2da      	uxtb	r2, r3
 8002040:	e000      	b.n	8002044 <HAL_GPIO_EXTI_Callback+0x184>
 8002042:	221f      	movs	r2, #31
 8002044:	4b64      	ldr	r3, [pc, #400]	; (80021d8 <HAL_GPIO_EXTI_Callback+0x318>)
 8002046:	70da      	strb	r2, [r3, #3]
 8002048:	e002      	b.n	8002050 <HAL_GPIO_EXTI_Callback+0x190>
				default: break;
			}
		}
 800204a:	46c0      	nop			; (mov r8, r8)
 800204c:	e000      	b.n	8002050 <HAL_GPIO_EXTI_Callback+0x190>
				default: break;
 800204e:	46c0      	nop			; (mov r8, r8)
		if (GPIO_Pin == BUTTON3) {
 8002050:	1dbb      	adds	r3, r7, #6
 8002052:	881a      	ldrh	r2, [r3, #0]
 8002054:	2380      	movs	r3, #128	; 0x80
 8002056:	021b      	lsls	r3, r3, #8
 8002058:	429a      	cmp	r2, r3
 800205a:	d000      	beq.n	800205e <HAL_GPIO_EXTI_Callback+0x19e>
 800205c:	e26e      	b.n	800253c <HAL_GPIO_EXTI_Callback+0x67c>
			clockField = (clockField + 1) % (NUM_CLOCKFIELDS + 1);
 800205e:	4b5b      	ldr	r3, [pc, #364]	; (80021cc <HAL_GPIO_EXTI_Callback+0x30c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	3301      	adds	r3, #1
 8002064:	2106      	movs	r1, #6
 8002066:	0018      	movs	r0, r3
 8002068:	f7fe f9be 	bl	80003e8 <__aeabi_idivmod>
 800206c:	000b      	movs	r3, r1
 800206e:	001a      	movs	r2, r3
 8002070:	4b56      	ldr	r3, [pc, #344]	; (80021cc <HAL_GPIO_EXTI_Callback+0x30c>)
 8002072:	601a      	str	r2, [r3, #0]
			if (clockField != 0) {
 8002074:	4b55      	ldr	r3, [pc, #340]	; (80021cc <HAL_GPIO_EXTI_Callback+0x30c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d00e      	beq.n	800209a <HAL_GPIO_EXTI_Callback+0x1da>
				clockSet = 1;
 800207c:	4b52      	ldr	r3, [pc, #328]	; (80021c8 <HAL_GPIO_EXTI_Callback+0x308>)
 800207e:	2201      	movs	r2, #1
 8002080:	601a      	str	r2, [r3, #0]
				if (clockField == 1) getDateTime(&tempClockDate, &tempClockTimes);	// should pull current time on setting 1st field
 8002082:	4b52      	ldr	r3, [pc, #328]	; (80021cc <HAL_GPIO_EXTI_Callback+0x30c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d000      	beq.n	800208c <HAL_GPIO_EXTI_Callback+0x1cc>
 800208a:	e257      	b.n	800253c <HAL_GPIO_EXTI_Callback+0x67c>
 800208c:	4a51      	ldr	r2, [pc, #324]	; (80021d4 <HAL_GPIO_EXTI_Callback+0x314>)
 800208e:	4b52      	ldr	r3, [pc, #328]	; (80021d8 <HAL_GPIO_EXTI_Callback+0x318>)
 8002090:	0011      	movs	r1, r2
 8002092:	0018      	movs	r0, r3
 8002094:	f7ff fae0 	bl	8001658 <getDateTime>
			// clear stopwatch hw
			stopwatchRunning = 0;
			clearStopwatch();
		}
	}
}
 8002098:	e250      	b.n	800253c <HAL_GPIO_EXTI_Callback+0x67c>
				clockSet = 0;
 800209a:	4b4b      	ldr	r3, [pc, #300]	; (80021c8 <HAL_GPIO_EXTI_Callback+0x308>)
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
				setDateTime(&tempClockDate, &tempClockTimes);
 80020a0:	4a4c      	ldr	r2, [pc, #304]	; (80021d4 <HAL_GPIO_EXTI_Callback+0x314>)
 80020a2:	4b4d      	ldr	r3, [pc, #308]	; (80021d8 <HAL_GPIO_EXTI_Callback+0x318>)
 80020a4:	0011      	movs	r1, r2
 80020a6:	0018      	movs	r0, r3
 80020a8:	f7ff f97c 	bl	80013a4 <setDateTime>
}
 80020ac:	e246      	b.n	800253c <HAL_GPIO_EXTI_Callback+0x67c>
	else if (face == faceTimer) {
 80020ae:	4b42      	ldr	r3, [pc, #264]	; (80021b8 <HAL_GPIO_EXTI_Callback+0x2f8>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d000      	beq.n	80020b8 <HAL_GPIO_EXTI_Callback+0x1f8>
 80020b6:	e0f6      	b.n	80022a6 <HAL_GPIO_EXTI_Callback+0x3e6>
		updateTimer = 1;
 80020b8:	4b49      	ldr	r3, [pc, #292]	; (80021e0 <HAL_GPIO_EXTI_Callback+0x320>)
 80020ba:	2201      	movs	r2, #1
 80020bc:	701a      	strb	r2, [r3, #0]
		if (timerRunning == 0) {
 80020be:	4b49      	ldr	r3, [pc, #292]	; (80021e4 <HAL_GPIO_EXTI_Callback+0x324>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d000      	beq.n	80020c8 <HAL_GPIO_EXTI_Callback+0x208>
 80020c6:	e0cc      	b.n	8002262 <HAL_GPIO_EXTI_Callback+0x3a2>
			if (GPIO_Pin == BUTTON1) {
 80020c8:	1dbb      	adds	r3, r7, #6
 80020ca:	881a      	ldrh	r2, [r3, #0]
 80020cc:	2380      	movs	r3, #128	; 0x80
 80020ce:	019b      	lsls	r3, r3, #6
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d134      	bne.n	800213e <HAL_GPIO_EXTI_Callback+0x27e>
				if (timerSet == 0) timerRunning = 1;
 80020d4:	4b44      	ldr	r3, [pc, #272]	; (80021e8 <HAL_GPIO_EXTI_Callback+0x328>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d103      	bne.n	80020e4 <HAL_GPIO_EXTI_Callback+0x224>
 80020dc:	4b41      	ldr	r3, [pc, #260]	; (80021e4 <HAL_GPIO_EXTI_Callback+0x324>)
 80020de:	2201      	movs	r2, #1
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	e02d      	b.n	8002140 <HAL_GPIO_EXTI_Callback+0x280>
					switch (timerField) {
 80020e4:	4b41      	ldr	r3, [pc, #260]	; (80021ec <HAL_GPIO_EXTI_Callback+0x32c>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d010      	beq.n	800210e <HAL_GPIO_EXTI_Callback+0x24e>
 80020ec:	2b03      	cmp	r3, #3
 80020ee:	d01a      	beq.n	8002126 <HAL_GPIO_EXTI_Callback+0x266>
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d000      	beq.n	80020f6 <HAL_GPIO_EXTI_Callback+0x236>
						default: break;
 80020f4:	e024      	b.n	8002140 <HAL_GPIO_EXTI_Callback+0x280>
						case 1: tempTimer.sec = (tempTimer.sec+1) % 60; break;
 80020f6:	4b3e      	ldr	r3, [pc, #248]	; (80021f0 <HAL_GPIO_EXTI_Callback+0x330>)
 80020f8:	789b      	ldrb	r3, [r3, #2]
 80020fa:	3301      	adds	r3, #1
 80020fc:	213c      	movs	r1, #60	; 0x3c
 80020fe:	0018      	movs	r0, r3
 8002100:	f7fe f972 	bl	80003e8 <__aeabi_idivmod>
 8002104:	000b      	movs	r3, r1
 8002106:	b2da      	uxtb	r2, r3
 8002108:	4b39      	ldr	r3, [pc, #228]	; (80021f0 <HAL_GPIO_EXTI_Callback+0x330>)
 800210a:	709a      	strb	r2, [r3, #2]
 800210c:	e018      	b.n	8002140 <HAL_GPIO_EXTI_Callback+0x280>
						case 2: tempTimer.min = (tempTimer.min+1) % 60; break;
 800210e:	4b38      	ldr	r3, [pc, #224]	; (80021f0 <HAL_GPIO_EXTI_Callback+0x330>)
 8002110:	785b      	ldrb	r3, [r3, #1]
 8002112:	3301      	adds	r3, #1
 8002114:	213c      	movs	r1, #60	; 0x3c
 8002116:	0018      	movs	r0, r3
 8002118:	f7fe f966 	bl	80003e8 <__aeabi_idivmod>
 800211c:	000b      	movs	r3, r1
 800211e:	b2da      	uxtb	r2, r3
 8002120:	4b33      	ldr	r3, [pc, #204]	; (80021f0 <HAL_GPIO_EXTI_Callback+0x330>)
 8002122:	705a      	strb	r2, [r3, #1]
 8002124:	e00c      	b.n	8002140 <HAL_GPIO_EXTI_Callback+0x280>
						case 3: tempTimer.hr = (tempTimer.hr+1) % 24; break;
 8002126:	4b32      	ldr	r3, [pc, #200]	; (80021f0 <HAL_GPIO_EXTI_Callback+0x330>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	3301      	adds	r3, #1
 800212c:	2118      	movs	r1, #24
 800212e:	0018      	movs	r0, r3
 8002130:	f7fe f95a 	bl	80003e8 <__aeabi_idivmod>
 8002134:	000b      	movs	r3, r1
 8002136:	b2da      	uxtb	r2, r3
 8002138:	4b2d      	ldr	r3, [pc, #180]	; (80021f0 <HAL_GPIO_EXTI_Callback+0x330>)
 800213a:	701a      	strb	r2, [r3, #0]
 800213c:	e000      	b.n	8002140 <HAL_GPIO_EXTI_Callback+0x280>
				}
 800213e:	46c0      	nop			; (mov r8, r8)
			if (GPIO_Pin == BUTTON2) {
 8002140:	1dbb      	adds	r3, r7, #6
 8002142:	881a      	ldrh	r2, [r3, #0]
 8002144:	2380      	movs	r3, #128	; 0x80
 8002146:	01db      	lsls	r3, r3, #7
 8002148:	429a      	cmp	r2, r3
 800214a:	d153      	bne.n	80021f4 <HAL_GPIO_EXTI_Callback+0x334>
				if (timerSet == 1) {
 800214c:	4b26      	ldr	r3, [pc, #152]	; (80021e8 <HAL_GPIO_EXTI_Callback+0x328>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d14f      	bne.n	80021f4 <HAL_GPIO_EXTI_Callback+0x334>
					switch (timerField) {
 8002154:	4b25      	ldr	r3, [pc, #148]	; (80021ec <HAL_GPIO_EXTI_Callback+0x32c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2b02      	cmp	r3, #2
 800215a:	d011      	beq.n	8002180 <HAL_GPIO_EXTI_Callback+0x2c0>
 800215c:	2b03      	cmp	r3, #3
 800215e:	d01c      	beq.n	800219a <HAL_GPIO_EXTI_Callback+0x2da>
 8002160:	2b01      	cmp	r3, #1
 8002162:	d000      	beq.n	8002166 <HAL_GPIO_EXTI_Callback+0x2a6>
						default: break;
 8002164:	e047      	b.n	80021f6 <HAL_GPIO_EXTI_Callback+0x336>
						case 1: tempTimer.sec = tempTimer.sec == 0 ? 59 : tempTimer.sec-1; break;
 8002166:	4b22      	ldr	r3, [pc, #136]	; (80021f0 <HAL_GPIO_EXTI_Callback+0x330>)
 8002168:	789b      	ldrb	r3, [r3, #2]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d004      	beq.n	8002178 <HAL_GPIO_EXTI_Callback+0x2b8>
 800216e:	4b20      	ldr	r3, [pc, #128]	; (80021f0 <HAL_GPIO_EXTI_Callback+0x330>)
 8002170:	789b      	ldrb	r3, [r3, #2]
 8002172:	3b01      	subs	r3, #1
 8002174:	b2da      	uxtb	r2, r3
 8002176:	e000      	b.n	800217a <HAL_GPIO_EXTI_Callback+0x2ba>
 8002178:	223b      	movs	r2, #59	; 0x3b
 800217a:	4b1d      	ldr	r3, [pc, #116]	; (80021f0 <HAL_GPIO_EXTI_Callback+0x330>)
 800217c:	709a      	strb	r2, [r3, #2]
 800217e:	e03a      	b.n	80021f6 <HAL_GPIO_EXTI_Callback+0x336>
						case 2: tempTimer.min = tempTimer.min == 0 ? 59 : tempTimer.min-1; break;
 8002180:	4b1b      	ldr	r3, [pc, #108]	; (80021f0 <HAL_GPIO_EXTI_Callback+0x330>)
 8002182:	785b      	ldrb	r3, [r3, #1]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d004      	beq.n	8002192 <HAL_GPIO_EXTI_Callback+0x2d2>
 8002188:	4b19      	ldr	r3, [pc, #100]	; (80021f0 <HAL_GPIO_EXTI_Callback+0x330>)
 800218a:	785b      	ldrb	r3, [r3, #1]
 800218c:	3b01      	subs	r3, #1
 800218e:	b2da      	uxtb	r2, r3
 8002190:	e000      	b.n	8002194 <HAL_GPIO_EXTI_Callback+0x2d4>
 8002192:	223b      	movs	r2, #59	; 0x3b
 8002194:	4b16      	ldr	r3, [pc, #88]	; (80021f0 <HAL_GPIO_EXTI_Callback+0x330>)
 8002196:	705a      	strb	r2, [r3, #1]
 8002198:	e02d      	b.n	80021f6 <HAL_GPIO_EXTI_Callback+0x336>
						case 3: tempTimer.hr = tempTimer.hr == 0 ? 23 : tempTimer.hr-1; break;
 800219a:	4b15      	ldr	r3, [pc, #84]	; (80021f0 <HAL_GPIO_EXTI_Callback+0x330>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d004      	beq.n	80021ac <HAL_GPIO_EXTI_Callback+0x2ec>
 80021a2:	4b13      	ldr	r3, [pc, #76]	; (80021f0 <HAL_GPIO_EXTI_Callback+0x330>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	3b01      	subs	r3, #1
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	e000      	b.n	80021ae <HAL_GPIO_EXTI_Callback+0x2ee>
 80021ac:	2217      	movs	r2, #23
 80021ae:	4b10      	ldr	r3, [pc, #64]	; (80021f0 <HAL_GPIO_EXTI_Callback+0x330>)
 80021b0:	701a      	strb	r2, [r3, #0]
 80021b2:	e020      	b.n	80021f6 <HAL_GPIO_EXTI_Callback+0x336>
 80021b4:	50000400 	.word	0x50000400
 80021b8:	20000030 	.word	0x20000030
 80021bc:	80000003 	.word	0x80000003
 80021c0:	200000c8 	.word	0x200000c8
 80021c4:	20000068 	.word	0x20000068
 80021c8:	20000034 	.word	0x20000034
 80021cc:	20000038 	.word	0x20000038
 80021d0:	08006eac 	.word	0x08006eac
 80021d4:	20000064 	.word	0x20000064
 80021d8:	20000184 	.word	0x20000184
 80021dc:	08006ec4 	.word	0x08006ec4
 80021e0:	20000124 	.word	0x20000124
 80021e4:	20000044 	.word	0x20000044
 80021e8:	2000003c 	.word	0x2000003c
 80021ec:	20000040 	.word	0x20000040
 80021f0:	20000058 	.word	0x20000058
				}
 80021f4:	46c0      	nop			; (mov r8, r8)
			if (GPIO_Pin == BUTTON3) {
 80021f6:	1dbb      	adds	r3, r7, #6
 80021f8:	881a      	ldrh	r2, [r3, #0]
 80021fa:	2380      	movs	r3, #128	; 0x80
 80021fc:	021b      	lsls	r3, r3, #8
 80021fe:	429a      	cmp	r2, r3
 8002200:	d000      	beq.n	8002204 <HAL_GPIO_EXTI_Callback+0x344>
 8002202:	e19b      	b.n	800253c <HAL_GPIO_EXTI_Callback+0x67c>
				timerField = (timerField + 1) % (NUM_TIMERFIELDS + 1);
 8002204:	4bb1      	ldr	r3, [pc, #708]	; (80024cc <HAL_GPIO_EXTI_Callback+0x60c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	3301      	adds	r3, #1
 800220a:	4ab1      	ldr	r2, [pc, #708]	; (80024d0 <HAL_GPIO_EXTI_Callback+0x610>)
 800220c:	4013      	ands	r3, r2
 800220e:	d504      	bpl.n	800221a <HAL_GPIO_EXTI_Callback+0x35a>
 8002210:	3b01      	subs	r3, #1
 8002212:	2204      	movs	r2, #4
 8002214:	4252      	negs	r2, r2
 8002216:	4313      	orrs	r3, r2
 8002218:	3301      	adds	r3, #1
 800221a:	001a      	movs	r2, r3
 800221c:	4bab      	ldr	r3, [pc, #684]	; (80024cc <HAL_GPIO_EXTI_Callback+0x60c>)
 800221e:	601a      	str	r2, [r3, #0]
				if (timerField != 0) {
 8002220:	4baa      	ldr	r3, [pc, #680]	; (80024cc <HAL_GPIO_EXTI_Callback+0x60c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d011      	beq.n	800224c <HAL_GPIO_EXTI_Callback+0x38c>
					timerSet = 1;
 8002228:	4baa      	ldr	r3, [pc, #680]	; (80024d4 <HAL_GPIO_EXTI_Callback+0x614>)
 800222a:	2201      	movs	r2, #1
 800222c:	601a      	str	r2, [r3, #0]
					if (timerField == 1) {
 800222e:	4ba7      	ldr	r3, [pc, #668]	; (80024cc <HAL_GPIO_EXTI_Callback+0x60c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d000      	beq.n	8002238 <HAL_GPIO_EXTI_Callback+0x378>
 8002236:	e181      	b.n	800253c <HAL_GPIO_EXTI_Callback+0x67c>
						tempTimer.sec = 0;
 8002238:	4ba7      	ldr	r3, [pc, #668]	; (80024d8 <HAL_GPIO_EXTI_Callback+0x618>)
 800223a:	2200      	movs	r2, #0
 800223c:	709a      	strb	r2, [r3, #2]
						tempTimer.min = 0;
 800223e:	4ba6      	ldr	r3, [pc, #664]	; (80024d8 <HAL_GPIO_EXTI_Callback+0x618>)
 8002240:	2200      	movs	r2, #0
 8002242:	705a      	strb	r2, [r3, #1]
						tempTimer.hr = 0;
 8002244:	4ba4      	ldr	r3, [pc, #656]	; (80024d8 <HAL_GPIO_EXTI_Callback+0x618>)
 8002246:	2200      	movs	r2, #0
 8002248:	701a      	strb	r2, [r3, #0]
}
 800224a:	e177      	b.n	800253c <HAL_GPIO_EXTI_Callback+0x67c>
					timerSet = 0;
 800224c:	4ba1      	ldr	r3, [pc, #644]	; (80024d4 <HAL_GPIO_EXTI_Callback+0x614>)
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
					timerRunning = 1;	// careful where this gets set/unset
 8002252:	4ba2      	ldr	r3, [pc, #648]	; (80024dc <HAL_GPIO_EXTI_Callback+0x61c>)
 8002254:	2201      	movs	r2, #1
 8002256:	601a      	str	r2, [r3, #0]
					setTimer(&tempTimer);
 8002258:	4b9f      	ldr	r3, [pc, #636]	; (80024d8 <HAL_GPIO_EXTI_Callback+0x618>)
 800225a:	0018      	movs	r0, r3
 800225c:	f7ff f914 	bl	8001488 <setTimer>
}
 8002260:	e16c      	b.n	800253c <HAL_GPIO_EXTI_Callback+0x67c>
		else if (timerRunning == 1) {
 8002262:	4b9e      	ldr	r3, [pc, #632]	; (80024dc <HAL_GPIO_EXTI_Callback+0x61c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d000      	beq.n	800226c <HAL_GPIO_EXTI_Callback+0x3ac>
 800226a:	e167      	b.n	800253c <HAL_GPIO_EXTI_Callback+0x67c>
			if (GPIO_Pin == BUTTON1) {
 800226c:	1dbb      	adds	r3, r7, #6
 800226e:	881a      	ldrh	r2, [r3, #0]
 8002270:	2380      	movs	r3, #128	; 0x80
 8002272:	019b      	lsls	r3, r3, #6
 8002274:	429a      	cmp	r2, r3
 8002276:	d102      	bne.n	800227e <HAL_GPIO_EXTI_Callback+0x3be>
				timerRunning = 1;
 8002278:	4b98      	ldr	r3, [pc, #608]	; (80024dc <HAL_GPIO_EXTI_Callback+0x61c>)
 800227a:	2201      	movs	r2, #1
 800227c:	601a      	str	r2, [r3, #0]
			if (GPIO_Pin == BUTTON2) {
 800227e:	1dbb      	adds	r3, r7, #6
 8002280:	881a      	ldrh	r2, [r3, #0]
 8002282:	2380      	movs	r3, #128	; 0x80
 8002284:	01db      	lsls	r3, r3, #7
 8002286:	429a      	cmp	r2, r3
 8002288:	d102      	bne.n	8002290 <HAL_GPIO_EXTI_Callback+0x3d0>
				timerRunning = 0;
 800228a:	4b94      	ldr	r3, [pc, #592]	; (80024dc <HAL_GPIO_EXTI_Callback+0x61c>)
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]
			if (GPIO_Pin == BUTTON3) {
 8002290:	1dbb      	adds	r3, r7, #6
 8002292:	881a      	ldrh	r2, [r3, #0]
 8002294:	2380      	movs	r3, #128	; 0x80
 8002296:	021b      	lsls	r3, r3, #8
 8002298:	429a      	cmp	r2, r3
 800229a:	d000      	beq.n	800229e <HAL_GPIO_EXTI_Callback+0x3de>
 800229c:	e14e      	b.n	800253c <HAL_GPIO_EXTI_Callback+0x67c>
				timerRunning = 0;
 800229e:	4b8f      	ldr	r3, [pc, #572]	; (80024dc <HAL_GPIO_EXTI_Callback+0x61c>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
}
 80022a4:	e14a      	b.n	800253c <HAL_GPIO_EXTI_Callback+0x67c>
	else if (face == faceAlarm) {
 80022a6:	4b8e      	ldr	r3, [pc, #568]	; (80024e0 <HAL_GPIO_EXTI_Callback+0x620>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d000      	beq.n	80022b0 <HAL_GPIO_EXTI_Callback+0x3f0>
 80022ae:	e0f6      	b.n	800249e <HAL_GPIO_EXTI_Callback+0x5de>
		updateAlarm = 1;
 80022b0:	4b8c      	ldr	r3, [pc, #560]	; (80024e4 <HAL_GPIO_EXTI_Callback+0x624>)
 80022b2:	2201      	movs	r2, #1
 80022b4:	701a      	strb	r2, [r3, #0]
		if (alarmRunning == 0) {
 80022b6:	4b8c      	ldr	r3, [pc, #560]	; (80024e8 <HAL_GPIO_EXTI_Callback+0x628>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d000      	beq.n	80022c0 <HAL_GPIO_EXTI_Callback+0x400>
 80022be:	e0e0      	b.n	8002482 <HAL_GPIO_EXTI_Callback+0x5c2>
			if (GPIO_Pin == BUTTON1 && alarmSet) {
 80022c0:	1dbb      	adds	r3, r7, #6
 80022c2:	881a      	ldrh	r2, [r3, #0]
 80022c4:	2380      	movs	r3, #128	; 0x80
 80022c6:	019b      	lsls	r3, r3, #6
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d146      	bne.n	800235a <HAL_GPIO_EXTI_Callback+0x49a>
 80022cc:	4b87      	ldr	r3, [pc, #540]	; (80024ec <HAL_GPIO_EXTI_Callback+0x62c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d042      	beq.n	800235a <HAL_GPIO_EXTI_Callback+0x49a>
				switch (alarmField) {
 80022d4:	4b86      	ldr	r3, [pc, #536]	; (80024f0 <HAL_GPIO_EXTI_Callback+0x630>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d015      	beq.n	8002308 <HAL_GPIO_EXTI_Callback+0x448>
 80022dc:	dc02      	bgt.n	80022e4 <HAL_GPIO_EXTI_Callback+0x424>
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d005      	beq.n	80022ee <HAL_GPIO_EXTI_Callback+0x42e>
					default: break;
 80022e2:	e03b      	b.n	800235c <HAL_GPIO_EXTI_Callback+0x49c>
				switch (alarmField) {
 80022e4:	2b03      	cmp	r3, #3
 80022e6:	d01c      	beq.n	8002322 <HAL_GPIO_EXTI_Callback+0x462>
 80022e8:	2b04      	cmp	r3, #4
 80022ea:	d027      	beq.n	800233c <HAL_GPIO_EXTI_Callback+0x47c>
					default: break;
 80022ec:	e036      	b.n	800235c <HAL_GPIO_EXTI_Callback+0x49c>
					case 1: tempAlarm.sec = (tempAlarm.sec + 1) % 60; break;
 80022ee:	4b81      	ldr	r3, [pc, #516]	; (80024f4 <HAL_GPIO_EXTI_Callback+0x634>)
 80022f0:	789b      	ldrb	r3, [r3, #2]
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	3301      	adds	r3, #1
 80022f6:	213c      	movs	r1, #60	; 0x3c
 80022f8:	0018      	movs	r0, r3
 80022fa:	f7fe f875 	bl	80003e8 <__aeabi_idivmod>
 80022fe:	000b      	movs	r3, r1
 8002300:	b2da      	uxtb	r2, r3
 8002302:	4b7c      	ldr	r3, [pc, #496]	; (80024f4 <HAL_GPIO_EXTI_Callback+0x634>)
 8002304:	709a      	strb	r2, [r3, #2]
 8002306:	e029      	b.n	800235c <HAL_GPIO_EXTI_Callback+0x49c>
					case 2: tempAlarm.min = (tempAlarm.min + 1) % 60; break;
 8002308:	4b7a      	ldr	r3, [pc, #488]	; (80024f4 <HAL_GPIO_EXTI_Callback+0x634>)
 800230a:	785b      	ldrb	r3, [r3, #1]
 800230c:	b2db      	uxtb	r3, r3
 800230e:	3301      	adds	r3, #1
 8002310:	213c      	movs	r1, #60	; 0x3c
 8002312:	0018      	movs	r0, r3
 8002314:	f7fe f868 	bl	80003e8 <__aeabi_idivmod>
 8002318:	000b      	movs	r3, r1
 800231a:	b2da      	uxtb	r2, r3
 800231c:	4b75      	ldr	r3, [pc, #468]	; (80024f4 <HAL_GPIO_EXTI_Callback+0x634>)
 800231e:	705a      	strb	r2, [r3, #1]
 8002320:	e01c      	b.n	800235c <HAL_GPIO_EXTI_Callback+0x49c>
					case 3: tempAlarm.hr = (tempAlarm.hr + 1) % 24; break;
 8002322:	4b74      	ldr	r3, [pc, #464]	; (80024f4 <HAL_GPIO_EXTI_Callback+0x634>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	b2db      	uxtb	r3, r3
 8002328:	3301      	adds	r3, #1
 800232a:	2118      	movs	r1, #24
 800232c:	0018      	movs	r0, r3
 800232e:	f7fe f85b 	bl	80003e8 <__aeabi_idivmod>
 8002332:	000b      	movs	r3, r1
 8002334:	b2da      	uxtb	r2, r3
 8002336:	4b6f      	ldr	r3, [pc, #444]	; (80024f4 <HAL_GPIO_EXTI_Callback+0x634>)
 8002338:	701a      	strb	r2, [r3, #0]
 800233a:	e00f      	b.n	800235c <HAL_GPIO_EXTI_Callback+0x49c>
					case 4: tempAlarm.weekday = (tempAlarm.weekday + 1) % 7 + 1; break;
 800233c:	4b6d      	ldr	r3, [pc, #436]	; (80024f4 <HAL_GPIO_EXTI_Callback+0x634>)
 800233e:	78db      	ldrb	r3, [r3, #3]
 8002340:	b2db      	uxtb	r3, r3
 8002342:	3301      	adds	r3, #1
 8002344:	2107      	movs	r1, #7
 8002346:	0018      	movs	r0, r3
 8002348:	f7fe f84e 	bl	80003e8 <__aeabi_idivmod>
 800234c:	000b      	movs	r3, r1
 800234e:	b2db      	uxtb	r3, r3
 8002350:	3301      	adds	r3, #1
 8002352:	b2da      	uxtb	r2, r3
 8002354:	4b67      	ldr	r3, [pc, #412]	; (80024f4 <HAL_GPIO_EXTI_Callback+0x634>)
 8002356:	70da      	strb	r2, [r3, #3]
 8002358:	e000      	b.n	800235c <HAL_GPIO_EXTI_Callback+0x49c>
			}
 800235a:	46c0      	nop			; (mov r8, r8)
			if (GPIO_Pin == BUTTON2 && alarmSet) {
 800235c:	1dbb      	adds	r3, r7, #6
 800235e:	881a      	ldrh	r2, [r3, #0]
 8002360:	2380      	movs	r3, #128	; 0x80
 8002362:	01db      	lsls	r3, r3, #7
 8002364:	429a      	cmp	r2, r3
 8002366:	d148      	bne.n	80023fa <HAL_GPIO_EXTI_Callback+0x53a>
 8002368:	4b60      	ldr	r3, [pc, #384]	; (80024ec <HAL_GPIO_EXTI_Callback+0x62c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d044      	beq.n	80023fa <HAL_GPIO_EXTI_Callback+0x53a>
				switch (alarmField) {
 8002370:	4b5f      	ldr	r3, [pc, #380]	; (80024f0 <HAL_GPIO_EXTI_Callback+0x630>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2b02      	cmp	r3, #2
 8002376:	d016      	beq.n	80023a6 <HAL_GPIO_EXTI_Callback+0x4e6>
 8002378:	dc02      	bgt.n	8002380 <HAL_GPIO_EXTI_Callback+0x4c0>
 800237a:	2b01      	cmp	r3, #1
 800237c:	d005      	beq.n	800238a <HAL_GPIO_EXTI_Callback+0x4ca>
 800237e:	e03c      	b.n	80023fa <HAL_GPIO_EXTI_Callback+0x53a>
 8002380:	2b03      	cmp	r3, #3
 8002382:	d01e      	beq.n	80023c2 <HAL_GPIO_EXTI_Callback+0x502>
 8002384:	2b04      	cmp	r3, #4
 8002386:	d02a      	beq.n	80023de <HAL_GPIO_EXTI_Callback+0x51e>
 8002388:	e037      	b.n	80023fa <HAL_GPIO_EXTI_Callback+0x53a>
					case 1: tempAlarm.sec = tempAlarm.sec == 0 ? 59 : tempAlarm.sec-1;
 800238a:	4b5a      	ldr	r3, [pc, #360]	; (80024f4 <HAL_GPIO_EXTI_Callback+0x634>)
 800238c:	789b      	ldrb	r3, [r3, #2]
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b00      	cmp	r3, #0
 8002392:	d005      	beq.n	80023a0 <HAL_GPIO_EXTI_Callback+0x4e0>
 8002394:	4b57      	ldr	r3, [pc, #348]	; (80024f4 <HAL_GPIO_EXTI_Callback+0x634>)
 8002396:	789b      	ldrb	r3, [r3, #2]
 8002398:	b2db      	uxtb	r3, r3
 800239a:	3b01      	subs	r3, #1
 800239c:	b2da      	uxtb	r2, r3
 800239e:	e000      	b.n	80023a2 <HAL_GPIO_EXTI_Callback+0x4e2>
 80023a0:	223b      	movs	r2, #59	; 0x3b
 80023a2:	4b54      	ldr	r3, [pc, #336]	; (80024f4 <HAL_GPIO_EXTI_Callback+0x634>)
 80023a4:	709a      	strb	r2, [r3, #2]
					case 2: tempAlarm.min = tempAlarm.min == 0 ? 59 : tempAlarm.min-1;
 80023a6:	4b53      	ldr	r3, [pc, #332]	; (80024f4 <HAL_GPIO_EXTI_Callback+0x634>)
 80023a8:	785b      	ldrb	r3, [r3, #1]
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d005      	beq.n	80023bc <HAL_GPIO_EXTI_Callback+0x4fc>
 80023b0:	4b50      	ldr	r3, [pc, #320]	; (80024f4 <HAL_GPIO_EXTI_Callback+0x634>)
 80023b2:	785b      	ldrb	r3, [r3, #1]
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	3b01      	subs	r3, #1
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	e000      	b.n	80023be <HAL_GPIO_EXTI_Callback+0x4fe>
 80023bc:	223b      	movs	r2, #59	; 0x3b
 80023be:	4b4d      	ldr	r3, [pc, #308]	; (80024f4 <HAL_GPIO_EXTI_Callback+0x634>)
 80023c0:	705a      	strb	r2, [r3, #1]
					case 3: tempAlarm.hr = tempAlarm.hr == 0 ? 23 : tempAlarm.hr-1;
 80023c2:	4b4c      	ldr	r3, [pc, #304]	; (80024f4 <HAL_GPIO_EXTI_Callback+0x634>)
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d005      	beq.n	80023d8 <HAL_GPIO_EXTI_Callback+0x518>
 80023cc:	4b49      	ldr	r3, [pc, #292]	; (80024f4 <HAL_GPIO_EXTI_Callback+0x634>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	3b01      	subs	r3, #1
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	e000      	b.n	80023da <HAL_GPIO_EXTI_Callback+0x51a>
 80023d8:	2217      	movs	r2, #23
 80023da:	4b46      	ldr	r3, [pc, #280]	; (80024f4 <HAL_GPIO_EXTI_Callback+0x634>)
 80023dc:	701a      	strb	r2, [r3, #0]
					case 4: tempAlarm.weekday = tempAlarm.weekday == 1 ? 7 : tempAlarm.weekday-1;
 80023de:	4b45      	ldr	r3, [pc, #276]	; (80024f4 <HAL_GPIO_EXTI_Callback+0x634>)
 80023e0:	78db      	ldrb	r3, [r3, #3]
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d005      	beq.n	80023f4 <HAL_GPIO_EXTI_Callback+0x534>
 80023e8:	4b42      	ldr	r3, [pc, #264]	; (80024f4 <HAL_GPIO_EXTI_Callback+0x634>)
 80023ea:	78db      	ldrb	r3, [r3, #3]
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	3b01      	subs	r3, #1
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	e000      	b.n	80023f6 <HAL_GPIO_EXTI_Callback+0x536>
 80023f4:	2207      	movs	r2, #7
 80023f6:	4b3f      	ldr	r3, [pc, #252]	; (80024f4 <HAL_GPIO_EXTI_Callback+0x634>)
 80023f8:	70da      	strb	r2, [r3, #3]
			if (GPIO_Pin == BUTTON3) {
 80023fa:	1dbb      	adds	r3, r7, #6
 80023fc:	881a      	ldrh	r2, [r3, #0]
 80023fe:	2380      	movs	r3, #128	; 0x80
 8002400:	021b      	lsls	r3, r3, #8
 8002402:	429a      	cmp	r2, r3
 8002404:	d000      	beq.n	8002408 <HAL_GPIO_EXTI_Callback+0x548>
 8002406:	e099      	b.n	800253c <HAL_GPIO_EXTI_Callback+0x67c>
				alarmField = (alarmField + 1) % (NUM_ALARMFIELDS + 1);
 8002408:	4b39      	ldr	r3, [pc, #228]	; (80024f0 <HAL_GPIO_EXTI_Callback+0x630>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	3301      	adds	r3, #1
 800240e:	2105      	movs	r1, #5
 8002410:	0018      	movs	r0, r3
 8002412:	f7fd ffe9 	bl	80003e8 <__aeabi_idivmod>
 8002416:	000b      	movs	r3, r1
 8002418:	001a      	movs	r2, r3
 800241a:	4b35      	ldr	r3, [pc, #212]	; (80024f0 <HAL_GPIO_EXTI_Callback+0x630>)
 800241c:	601a      	str	r2, [r3, #0]
				if (alarmField != 0) {
 800241e:	4b34      	ldr	r3, [pc, #208]	; (80024f0 <HAL_GPIO_EXTI_Callback+0x630>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d022      	beq.n	800246c <HAL_GPIO_EXTI_Callback+0x5ac>
					alarmSet = 1;
 8002426:	4b31      	ldr	r3, [pc, #196]	; (80024ec <HAL_GPIO_EXTI_Callback+0x62c>)
 8002428:	2201      	movs	r2, #1
 800242a:	601a      	str	r2, [r3, #0]
					if (alarmField == 1) {
 800242c:	4b30      	ldr	r3, [pc, #192]	; (80024f0 <HAL_GPIO_EXTI_Callback+0x630>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d000      	beq.n	8002436 <HAL_GPIO_EXTI_Callback+0x576>
 8002434:	e082      	b.n	800253c <HAL_GPIO_EXTI_Callback+0x67c>
						getDateTime(&d, &t);
 8002436:	210c      	movs	r1, #12
 8002438:	000c      	movs	r4, r1
 800243a:	187a      	adds	r2, r7, r1
 800243c:	2510      	movs	r5, #16
 800243e:	197b      	adds	r3, r7, r5
 8002440:	0011      	movs	r1, r2
 8002442:	0018      	movs	r0, r3
 8002444:	f7ff f908 	bl	8001658 <getDateTime>
						tempAlarm.sec = t.sec;
 8002448:	0021      	movs	r1, r4
 800244a:	187b      	adds	r3, r7, r1
 800244c:	789a      	ldrb	r2, [r3, #2]
 800244e:	4b29      	ldr	r3, [pc, #164]	; (80024f4 <HAL_GPIO_EXTI_Callback+0x634>)
 8002450:	709a      	strb	r2, [r3, #2]
						tempAlarm.min = t.min;
 8002452:	187b      	adds	r3, r7, r1
 8002454:	785a      	ldrb	r2, [r3, #1]
 8002456:	4b27      	ldr	r3, [pc, #156]	; (80024f4 <HAL_GPIO_EXTI_Callback+0x634>)
 8002458:	705a      	strb	r2, [r3, #1]
						tempAlarm.hr = t.hr;
 800245a:	187b      	adds	r3, r7, r1
 800245c:	781a      	ldrb	r2, [r3, #0]
 800245e:	4b25      	ldr	r3, [pc, #148]	; (80024f4 <HAL_GPIO_EXTI_Callback+0x634>)
 8002460:	701a      	strb	r2, [r3, #0]
						tempAlarm.weekday = d.weekday;
 8002462:	197b      	adds	r3, r7, r5
 8002464:	791a      	ldrb	r2, [r3, #4]
 8002466:	4b23      	ldr	r3, [pc, #140]	; (80024f4 <HAL_GPIO_EXTI_Callback+0x634>)
 8002468:	70da      	strb	r2, [r3, #3]
}
 800246a:	e067      	b.n	800253c <HAL_GPIO_EXTI_Callback+0x67c>
					alarmSet = 0;
 800246c:	4b1f      	ldr	r3, [pc, #124]	; (80024ec <HAL_GPIO_EXTI_Callback+0x62c>)
 800246e:	2200      	movs	r2, #0
 8002470:	601a      	str	r2, [r3, #0]
					alarmRunning = 1;
 8002472:	4b1d      	ldr	r3, [pc, #116]	; (80024e8 <HAL_GPIO_EXTI_Callback+0x628>)
 8002474:	2201      	movs	r2, #1
 8002476:	601a      	str	r2, [r3, #0]
					setAlarm(&tempAlarm);
 8002478:	4b1e      	ldr	r3, [pc, #120]	; (80024f4 <HAL_GPIO_EXTI_Callback+0x634>)
 800247a:	0018      	movs	r0, r3
 800247c:	f7fe ffa4 	bl	80013c8 <setAlarm>
}
 8002480:	e05c      	b.n	800253c <HAL_GPIO_EXTI_Callback+0x67c>
		else if (alarmRunning == 1) {
 8002482:	4b19      	ldr	r3, [pc, #100]	; (80024e8 <HAL_GPIO_EXTI_Callback+0x628>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d158      	bne.n	800253c <HAL_GPIO_EXTI_Callback+0x67c>
			if (GPIO_Pin == BUTTON3) {
 800248a:	1dbb      	adds	r3, r7, #6
 800248c:	881a      	ldrh	r2, [r3, #0]
 800248e:	2380      	movs	r3, #128	; 0x80
 8002490:	021b      	lsls	r3, r3, #8
 8002492:	429a      	cmp	r2, r3
 8002494:	d152      	bne.n	800253c <HAL_GPIO_EXTI_Callback+0x67c>
				alarmRunning = 0;
 8002496:	4b14      	ldr	r3, [pc, #80]	; (80024e8 <HAL_GPIO_EXTI_Callback+0x628>)
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
}
 800249c:	e04e      	b.n	800253c <HAL_GPIO_EXTI_Callback+0x67c>
	else if (face == faceStopwatch) {
 800249e:	4b10      	ldr	r3, [pc, #64]	; (80024e0 <HAL_GPIO_EXTI_Callback+0x620>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2b03      	cmp	r3, #3
 80024a4:	d14a      	bne.n	800253c <HAL_GPIO_EXTI_Callback+0x67c>
		updateStopwatch = 1;
 80024a6:	4b14      	ldr	r3, [pc, #80]	; (80024f8 <HAL_GPIO_EXTI_Callback+0x638>)
 80024a8:	2201      	movs	r2, #1
 80024aa:	701a      	strb	r2, [r3, #0]
		if (GPIO_Pin == BUTTON1) {	// start/stop
 80024ac:	1dbb      	adds	r3, r7, #6
 80024ae:	881a      	ldrh	r2, [r3, #0]
 80024b0:	2380      	movs	r3, #128	; 0x80
 80024b2:	019b      	lsls	r3, r3, #6
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d128      	bne.n	800250a <HAL_GPIO_EXTI_Callback+0x64a>
			if (stopwatchRunning == 0) {
 80024b8:	4b10      	ldr	r3, [pc, #64]	; (80024fc <HAL_GPIO_EXTI_Callback+0x63c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d11f      	bne.n	8002500 <HAL_GPIO_EXTI_Callback+0x640>
				stopwatchRunning = 1;
 80024c0:	4b0e      	ldr	r3, [pc, #56]	; (80024fc <HAL_GPIO_EXTI_Callback+0x63c>)
 80024c2:	2201      	movs	r2, #1
 80024c4:	601a      	str	r2, [r3, #0]
				runStopwatch();
 80024c6:	f000 fa2d 	bl	8002924 <runStopwatch>
 80024ca:	e01e      	b.n	800250a <HAL_GPIO_EXTI_Callback+0x64a>
 80024cc:	20000040 	.word	0x20000040
 80024d0:	80000003 	.word	0x80000003
 80024d4:	2000003c 	.word	0x2000003c
 80024d8:	20000058 	.word	0x20000058
 80024dc:	20000044 	.word	0x20000044
 80024e0:	20000030 	.word	0x20000030
 80024e4:	20000060 	.word	0x20000060
 80024e8:	20000050 	.word	0x20000050
 80024ec:	20000048 	.word	0x20000048
 80024f0:	2000004c 	.word	0x2000004c
 80024f4:	20000084 	.word	0x20000084
 80024f8:	20000067 	.word	0x20000067
 80024fc:	20000054 	.word	0x20000054
				stopwatchRunning = 0;
 8002500:	4b10      	ldr	r3, [pc, #64]	; (8002544 <HAL_GPIO_EXTI_Callback+0x684>)
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]
				pauseStopwatch();
 8002506:	f000 fa1b 	bl	8002940 <pauseStopwatch>
		if (GPIO_Pin == BUTTON2) {
 800250a:	1dbb      	adds	r3, r7, #6
 800250c:	881a      	ldrh	r2, [r3, #0]
 800250e:	2380      	movs	r3, #128	; 0x80
 8002510:	01db      	lsls	r3, r3, #7
 8002512:	429a      	cmp	r2, r3
 8002514:	d107      	bne.n	8002526 <HAL_GPIO_EXTI_Callback+0x666>
			lapPrev = lapCurrent;
 8002516:	4b0c      	ldr	r3, [pc, #48]	; (8002548 <HAL_GPIO_EXTI_Callback+0x688>)
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	4b0c      	ldr	r3, [pc, #48]	; (800254c <HAL_GPIO_EXTI_Callback+0x68c>)
 800251c:	601a      	str	r2, [r3, #0]
			lapCurrent = stopwatchCNT;
 800251e:	4b0c      	ldr	r3, [pc, #48]	; (8002550 <HAL_GPIO_EXTI_Callback+0x690>)
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	4b09      	ldr	r3, [pc, #36]	; (8002548 <HAL_GPIO_EXTI_Callback+0x688>)
 8002524:	601a      	str	r2, [r3, #0]
		if (GPIO_Pin == BUTTON3) {
 8002526:	1dbb      	adds	r3, r7, #6
 8002528:	881a      	ldrh	r2, [r3, #0]
 800252a:	2380      	movs	r3, #128	; 0x80
 800252c:	021b      	lsls	r3, r3, #8
 800252e:	429a      	cmp	r2, r3
 8002530:	d104      	bne.n	800253c <HAL_GPIO_EXTI_Callback+0x67c>
			stopwatchRunning = 0;
 8002532:	4b04      	ldr	r3, [pc, #16]	; (8002544 <HAL_GPIO_EXTI_Callback+0x684>)
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
			clearStopwatch();
 8002538:	f000 fa0e 	bl	8002958 <clearStopwatch>
}
 800253c:	46c0      	nop			; (mov r8, r8)
 800253e:	46bd      	mov	sp, r7
 8002540:	b006      	add	sp, #24
 8002542:	bdb0      	pop	{r4, r5, r7, pc}
 8002544:	20000054 	.word	0x20000054
 8002548:	20000080 	.word	0x20000080
 800254c:	20000120 	.word	0x20000120
 8002550:	2000005c 	.word	0x2000005c

08002554 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002558:	4b07      	ldr	r3, [pc, #28]	; (8002578 <HAL_MspInit+0x24>)
 800255a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800255c:	4b06      	ldr	r3, [pc, #24]	; (8002578 <HAL_MspInit+0x24>)
 800255e:	2101      	movs	r1, #1
 8002560:	430a      	orrs	r2, r1
 8002562:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002564:	4b04      	ldr	r3, [pc, #16]	; (8002578 <HAL_MspInit+0x24>)
 8002566:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002568:	4b03      	ldr	r3, [pc, #12]	; (8002578 <HAL_MspInit+0x24>)
 800256a:	2180      	movs	r1, #128	; 0x80
 800256c:	0549      	lsls	r1, r1, #21
 800256e:	430a      	orrs	r2, r1
 8002570:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002572:	46c0      	nop			; (mov r8, r8)
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40021000 	.word	0x40021000

0800257c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b088      	sub	sp, #32
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002584:	230c      	movs	r3, #12
 8002586:	18fb      	adds	r3, r7, r3
 8002588:	0018      	movs	r0, r3
 800258a:	2314      	movs	r3, #20
 800258c:	001a      	movs	r2, r3
 800258e:	2100      	movs	r1, #0
 8002590:	f004 f985 	bl	800689e <memset>
  if(hadc->Instance==ADC1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a15      	ldr	r2, [pc, #84]	; (80025f0 <HAL_ADC_MspInit+0x74>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d123      	bne.n	80025e6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800259e:	4b15      	ldr	r3, [pc, #84]	; (80025f4 <HAL_ADC_MspInit+0x78>)
 80025a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025a2:	4b14      	ldr	r3, [pc, #80]	; (80025f4 <HAL_ADC_MspInit+0x78>)
 80025a4:	2180      	movs	r1, #128	; 0x80
 80025a6:	0089      	lsls	r1, r1, #2
 80025a8:	430a      	orrs	r2, r1
 80025aa:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ac:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <HAL_ADC_MspInit+0x78>)
 80025ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025b0:	4b10      	ldr	r3, [pc, #64]	; (80025f4 <HAL_ADC_MspInit+0x78>)
 80025b2:	2101      	movs	r1, #1
 80025b4:	430a      	orrs	r2, r1
 80025b6:	62da      	str	r2, [r3, #44]	; 0x2c
 80025b8:	4b0e      	ldr	r3, [pc, #56]	; (80025f4 <HAL_ADC_MspInit+0x78>)
 80025ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025bc:	2201      	movs	r2, #1
 80025be:	4013      	ands	r3, r2
 80025c0:	60bb      	str	r3, [r7, #8]
 80025c2:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration    
    PA0     ------> ADC_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80025c4:	210c      	movs	r1, #12
 80025c6:	187b      	adds	r3, r7, r1
 80025c8:	2201      	movs	r2, #1
 80025ca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025cc:	187b      	adds	r3, r7, r1
 80025ce:	2203      	movs	r2, #3
 80025d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d2:	187b      	adds	r3, r7, r1
 80025d4:	2200      	movs	r2, #0
 80025d6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025d8:	187a      	adds	r2, r7, r1
 80025da:	23a0      	movs	r3, #160	; 0xa0
 80025dc:	05db      	lsls	r3, r3, #23
 80025de:	0011      	movs	r1, r2
 80025e0:	0018      	movs	r0, r3
 80025e2:	f000 ff4f 	bl	8003484 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80025e6:	46c0      	nop			; (mov r8, r8)
 80025e8:	46bd      	mov	sp, r7
 80025ea:	b008      	add	sp, #32
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	46c0      	nop			; (mov r8, r8)
 80025f0:	40012400 	.word	0x40012400
 80025f4:	40021000 	.word	0x40021000

080025f8 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  if(hlptim->Instance==LPTIM1)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a0a      	ldr	r2, [pc, #40]	; (8002630 <HAL_LPTIM_MspInit+0x38>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d10e      	bne.n	8002628 <HAL_LPTIM_MspInit+0x30>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800260a:	4b0a      	ldr	r3, [pc, #40]	; (8002634 <HAL_LPTIM_MspInit+0x3c>)
 800260c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800260e:	4b09      	ldr	r3, [pc, #36]	; (8002634 <HAL_LPTIM_MspInit+0x3c>)
 8002610:	2180      	movs	r1, #128	; 0x80
 8002612:	0609      	lsls	r1, r1, #24
 8002614:	430a      	orrs	r2, r1
 8002616:	639a      	str	r2, [r3, #56]	; 0x38
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8002618:	2200      	movs	r2, #0
 800261a:	2100      	movs	r1, #0
 800261c:	200d      	movs	r0, #13
 800261e:	f000 fd91 	bl	8003144 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8002622:	200d      	movs	r0, #13
 8002624:	f000 fda3 	bl	800316e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8002628:	46c0      	nop			; (mov r8, r8)
 800262a:	46bd      	mov	sp, r7
 800262c:	b002      	add	sp, #8
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40007c00 	.word	0x40007c00
 8002634:	40021000 	.word	0x40021000

08002638 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a06      	ldr	r2, [pc, #24]	; (8002660 <HAL_RTC_MspInit+0x28>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d106      	bne.n	8002658 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800264a:	4b06      	ldr	r3, [pc, #24]	; (8002664 <HAL_RTC_MspInit+0x2c>)
 800264c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800264e:	4b05      	ldr	r3, [pc, #20]	; (8002664 <HAL_RTC_MspInit+0x2c>)
 8002650:	2180      	movs	r1, #128	; 0x80
 8002652:	02c9      	lsls	r1, r1, #11
 8002654:	430a      	orrs	r2, r1
 8002656:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002658:	46c0      	nop			; (mov r8, r8)
 800265a:	46bd      	mov	sp, r7
 800265c:	b002      	add	sp, #8
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40002800 	.word	0x40002800
 8002664:	40021000 	.word	0x40021000

08002668 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b088      	sub	sp, #32
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002670:	230c      	movs	r3, #12
 8002672:	18fb      	adds	r3, r7, r3
 8002674:	0018      	movs	r0, r3
 8002676:	2314      	movs	r3, #20
 8002678:	001a      	movs	r2, r3
 800267a:	2100      	movs	r1, #0
 800267c:	f004 f90f 	bl	800689e <memset>
  if(hspi->Instance==SPI1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a30      	ldr	r2, [pc, #192]	; (8002748 <HAL_SPI_MspInit+0xe0>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d15a      	bne.n	8002740 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800268a:	4b30      	ldr	r3, [pc, #192]	; (800274c <HAL_SPI_MspInit+0xe4>)
 800268c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800268e:	4b2f      	ldr	r3, [pc, #188]	; (800274c <HAL_SPI_MspInit+0xe4>)
 8002690:	2180      	movs	r1, #128	; 0x80
 8002692:	0149      	lsls	r1, r1, #5
 8002694:	430a      	orrs	r2, r1
 8002696:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002698:	4b2c      	ldr	r3, [pc, #176]	; (800274c <HAL_SPI_MspInit+0xe4>)
 800269a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800269c:	4b2b      	ldr	r3, [pc, #172]	; (800274c <HAL_SPI_MspInit+0xe4>)
 800269e:	2101      	movs	r1, #1
 80026a0:	430a      	orrs	r2, r1
 80026a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80026a4:	4b29      	ldr	r3, [pc, #164]	; (800274c <HAL_SPI_MspInit+0xe4>)
 80026a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a8:	2201      	movs	r2, #1
 80026aa:	4013      	ands	r3, r2
 80026ac:	60bb      	str	r3, [r7, #8]
 80026ae:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80026b0:	210c      	movs	r1, #12
 80026b2:	187b      	adds	r3, r7, r1
 80026b4:	22a0      	movs	r2, #160	; 0xa0
 80026b6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b8:	187b      	adds	r3, r7, r1
 80026ba:	2202      	movs	r2, #2
 80026bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026be:	187b      	adds	r3, r7, r1
 80026c0:	2200      	movs	r2, #0
 80026c2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c4:	187b      	adds	r3, r7, r1
 80026c6:	2203      	movs	r2, #3
 80026c8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80026ca:	187b      	adds	r3, r7, r1
 80026cc:	2200      	movs	r2, #0
 80026ce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d0:	187a      	adds	r2, r7, r1
 80026d2:	23a0      	movs	r3, #160	; 0xa0
 80026d4:	05db      	lsls	r3, r3, #23
 80026d6:	0011      	movs	r1, r2
 80026d8:	0018      	movs	r0, r3
 80026da:	f000 fed3 	bl	8003484 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80026de:	4b1c      	ldr	r3, [pc, #112]	; (8002750 <HAL_SPI_MspInit+0xe8>)
 80026e0:	4a1c      	ldr	r2, [pc, #112]	; (8002754 <HAL_SPI_MspInit+0xec>)
 80026e2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 80026e4:	4b1a      	ldr	r3, [pc, #104]	; (8002750 <HAL_SPI_MspInit+0xe8>)
 80026e6:	2201      	movs	r2, #1
 80026e8:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026ea:	4b19      	ldr	r3, [pc, #100]	; (8002750 <HAL_SPI_MspInit+0xe8>)
 80026ec:	2210      	movs	r2, #16
 80026ee:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026f0:	4b17      	ldr	r3, [pc, #92]	; (8002750 <HAL_SPI_MspInit+0xe8>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026f6:	4b16      	ldr	r3, [pc, #88]	; (8002750 <HAL_SPI_MspInit+0xe8>)
 80026f8:	2280      	movs	r2, #128	; 0x80
 80026fa:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026fc:	4b14      	ldr	r3, [pc, #80]	; (8002750 <HAL_SPI_MspInit+0xe8>)
 80026fe:	2200      	movs	r2, #0
 8002700:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002702:	4b13      	ldr	r3, [pc, #76]	; (8002750 <HAL_SPI_MspInit+0xe8>)
 8002704:	2200      	movs	r2, #0
 8002706:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002708:	4b11      	ldr	r3, [pc, #68]	; (8002750 <HAL_SPI_MspInit+0xe8>)
 800270a:	2200      	movs	r2, #0
 800270c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800270e:	4b10      	ldr	r3, [pc, #64]	; (8002750 <HAL_SPI_MspInit+0xe8>)
 8002710:	2200      	movs	r2, #0
 8002712:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002714:	4b0e      	ldr	r3, [pc, #56]	; (8002750 <HAL_SPI_MspInit+0xe8>)
 8002716:	0018      	movs	r0, r3
 8002718:	f000 fd46 	bl	80031a8 <HAL_DMA_Init>
 800271c:	1e03      	subs	r3, r0, #0
 800271e:	d001      	beq.n	8002724 <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 8002720:	f7ff fbc8 	bl	8001eb4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a0a      	ldr	r2, [pc, #40]	; (8002750 <HAL_SPI_MspInit+0xe8>)
 8002728:	649a      	str	r2, [r3, #72]	; 0x48
 800272a:	4b09      	ldr	r3, [pc, #36]	; (8002750 <HAL_SPI_MspInit+0xe8>)
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002730:	2200      	movs	r2, #0
 8002732:	2100      	movs	r1, #0
 8002734:	2019      	movs	r0, #25
 8002736:	f000 fd05 	bl	8003144 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800273a:	2019      	movs	r0, #25
 800273c:	f000 fd17 	bl	800316e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002740:	46c0      	nop			; (mov r8, r8)
 8002742:	46bd      	mov	sp, r7
 8002744:	b008      	add	sp, #32
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40013000 	.word	0x40013000
 800274c:	40021000 	.word	0x40021000
 8002750:	20000224 	.word	0x20000224
 8002754:	40020030 	.word	0x40020030

08002758 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM21)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a14      	ldr	r2, [pc, #80]	; (80027b8 <HAL_TIM_Base_MspInit+0x60>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d10e      	bne.n	8002788 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 800276a:	4b14      	ldr	r3, [pc, #80]	; (80027bc <HAL_TIM_Base_MspInit+0x64>)
 800276c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800276e:	4b13      	ldr	r3, [pc, #76]	; (80027bc <HAL_TIM_Base_MspInit+0x64>)
 8002770:	2104      	movs	r1, #4
 8002772:	430a      	orrs	r2, r1
 8002774:	635a      	str	r2, [r3, #52]	; 0x34
    /* TIM21 interrupt Init */
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 8002776:	2200      	movs	r2, #0
 8002778:	2100      	movs	r1, #0
 800277a:	2014      	movs	r0, #20
 800277c:	f000 fce2 	bl	8003144 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8002780:	2014      	movs	r0, #20
 8002782:	f000 fcf4 	bl	800316e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }

}
 8002786:	e012      	b.n	80027ae <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM22)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a0c      	ldr	r2, [pc, #48]	; (80027c0 <HAL_TIM_Base_MspInit+0x68>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d10d      	bne.n	80027ae <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM22_CLK_ENABLE();
 8002792:	4b0a      	ldr	r3, [pc, #40]	; (80027bc <HAL_TIM_Base_MspInit+0x64>)
 8002794:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002796:	4b09      	ldr	r3, [pc, #36]	; (80027bc <HAL_TIM_Base_MspInit+0x64>)
 8002798:	2120      	movs	r1, #32
 800279a:	430a      	orrs	r2, r1
 800279c:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM22_IRQn, 0, 0);
 800279e:	2200      	movs	r2, #0
 80027a0:	2100      	movs	r1, #0
 80027a2:	2016      	movs	r0, #22
 80027a4:	f000 fcce 	bl	8003144 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM22_IRQn);
 80027a8:	2016      	movs	r0, #22
 80027aa:	f000 fce0 	bl	800316e <HAL_NVIC_EnableIRQ>
}
 80027ae:	46c0      	nop			; (mov r8, r8)
 80027b0:	46bd      	mov	sp, r7
 80027b2:	b002      	add	sp, #8
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	46c0      	nop			; (mov r8, r8)
 80027b8:	40010800 	.word	0x40010800
 80027bc:	40021000 	.word	0x40021000
 80027c0:	40011400 	.word	0x40011400

080027c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80027c8:	46c0      	nop			; (mov r8, r8)
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027d2:	e7fe      	b.n	80027d2 <HardFault_Handler+0x4>

080027d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80027d8:	46c0      	nop			; (mov r8, r8)
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027e2:	46c0      	nop			; (mov r8, r8)
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027ec:	f000 f99c 	bl	8002b28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027f0:	46c0      	nop			; (mov r8, r8)
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80027fa:	2004      	movs	r0, #4
 80027fc:	f001 f80c 	bl	8003818 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8002800:	46c0      	nop			; (mov r8, r8)
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800280a:	2380      	movs	r3, #128	; 0x80
 800280c:	019b      	lsls	r3, r3, #6
 800280e:	0018      	movs	r0, r3
 8002810:	f001 f802 	bl	8003818 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002814:	2380      	movs	r3, #128	; 0x80
 8002816:	01db      	lsls	r3, r3, #7
 8002818:	0018      	movs	r0, r3
 800281a:	f000 fffd 	bl	8003818 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800281e:	2380      	movs	r3, #128	; 0x80
 8002820:	021b      	lsls	r3, r3, #8
 8002822:	0018      	movs	r0, r3
 8002824:	f000 fff8 	bl	8003818 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002828:	46c0      	nop			; (mov r8, r8)
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
	...

08002830 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002834:	4b03      	ldr	r3, [pc, #12]	; (8002844 <DMA1_Channel2_3_IRQHandler+0x14>)
 8002836:	0018      	movs	r0, r3
 8002838:	f000 fd76 	bl	8003328 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800283c:	46c0      	nop			; (mov r8, r8)
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	46c0      	nop			; (mov r8, r8)
 8002844:	20000224 	.word	0x20000224

08002848 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 800284c:	4b03      	ldr	r3, [pc, #12]	; (800285c <LPTIM1_IRQHandler+0x14>)
 800284e:	0018      	movs	r0, r3
 8002850:	f001 f902 	bl	8003a58 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8002854:	46c0      	nop			; (mov r8, r8)
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	46c0      	nop			; (mov r8, r8)
 800285c:	200000cc 	.word	0x200000cc

08002860 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8002864:	4b03      	ldr	r3, [pc, #12]	; (8002874 <TIM21_IRQHandler+0x14>)
 8002866:	0018      	movs	r0, r3
 8002868:	f003 fb7c 	bl	8005f64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 800286c:	46c0      	nop			; (mov r8, r8)
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	46c0      	nop			; (mov r8, r8)
 8002874:	2000018c 	.word	0x2000018c

08002878 <TIM22_IRQHandler>:

/**
  * @brief This function handles TIM22 global interrupt.
  */
void TIM22_IRQHandler(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM22_IRQn 0 */

  /* USER CODE END TIM22_IRQn 0 */
  HAL_TIM_IRQHandler(&htim22);
 800287c:	4b03      	ldr	r3, [pc, #12]	; (800288c <TIM22_IRQHandler+0x14>)
 800287e:	0018      	movs	r0, r3
 8002880:	f003 fb70 	bl	8005f64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM22_IRQn 1 */

  /* USER CODE END TIM22_IRQn 1 */
}
 8002884:	46c0      	nop			; (mov r8, r8)
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	46c0      	nop			; (mov r8, r8)
 800288c:	2000008c 	.word	0x2000008c

08002890 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002894:	4b03      	ldr	r3, [pc, #12]	; (80028a4 <SPI1_IRQHandler+0x14>)
 8002896:	0018      	movs	r0, r3
 8002898:	f003 f862 	bl	8005960 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800289c:	46c0      	nop			; (mov r8, r8)
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	46c0      	nop			; (mov r8, r8)
 80028a4:	20000128 	.word	0x20000128

080028a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 80028ac:	4b17      	ldr	r3, [pc, #92]	; (800290c <SystemInit+0x64>)
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	4b16      	ldr	r3, [pc, #88]	; (800290c <SystemInit+0x64>)
 80028b2:	2180      	movs	r1, #128	; 0x80
 80028b4:	0049      	lsls	r1, r1, #1
 80028b6:	430a      	orrs	r2, r1
 80028b8:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80028ba:	4b14      	ldr	r3, [pc, #80]	; (800290c <SystemInit+0x64>)
 80028bc:	68da      	ldr	r2, [r3, #12]
 80028be:	4b13      	ldr	r3, [pc, #76]	; (800290c <SystemInit+0x64>)
 80028c0:	4913      	ldr	r1, [pc, #76]	; (8002910 <SystemInit+0x68>)
 80028c2:	400a      	ands	r2, r1
 80028c4:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80028c6:	4b11      	ldr	r3, [pc, #68]	; (800290c <SystemInit+0x64>)
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	4b10      	ldr	r3, [pc, #64]	; (800290c <SystemInit+0x64>)
 80028cc:	4911      	ldr	r1, [pc, #68]	; (8002914 <SystemInit+0x6c>)
 80028ce:	400a      	ands	r2, r1
 80028d0:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80028d2:	4b0e      	ldr	r3, [pc, #56]	; (800290c <SystemInit+0x64>)
 80028d4:	689a      	ldr	r2, [r3, #8]
 80028d6:	4b0d      	ldr	r3, [pc, #52]	; (800290c <SystemInit+0x64>)
 80028d8:	2101      	movs	r1, #1
 80028da:	438a      	bics	r2, r1
 80028dc:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80028de:	4b0b      	ldr	r3, [pc, #44]	; (800290c <SystemInit+0x64>)
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	4b0a      	ldr	r3, [pc, #40]	; (800290c <SystemInit+0x64>)
 80028e4:	490c      	ldr	r1, [pc, #48]	; (8002918 <SystemInit+0x70>)
 80028e6:	400a      	ands	r2, r1
 80028e8:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80028ea:	4b08      	ldr	r3, [pc, #32]	; (800290c <SystemInit+0x64>)
 80028ec:	68da      	ldr	r2, [r3, #12]
 80028ee:	4b07      	ldr	r3, [pc, #28]	; (800290c <SystemInit+0x64>)
 80028f0:	490a      	ldr	r1, [pc, #40]	; (800291c <SystemInit+0x74>)
 80028f2:	400a      	ands	r2, r1
 80028f4:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80028f6:	4b05      	ldr	r3, [pc, #20]	; (800290c <SystemInit+0x64>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80028fc:	4b08      	ldr	r3, [pc, #32]	; (8002920 <SystemInit+0x78>)
 80028fe:	2280      	movs	r2, #128	; 0x80
 8002900:	0512      	lsls	r2, r2, #20
 8002902:	609a      	str	r2, [r3, #8]
#endif
}
 8002904:	46c0      	nop			; (mov r8, r8)
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	46c0      	nop			; (mov r8, r8)
 800290c:	40021000 	.word	0x40021000
 8002910:	88ff400c 	.word	0x88ff400c
 8002914:	fef6fff6 	.word	0xfef6fff6
 8002918:	fffbffff 	.word	0xfffbffff
 800291c:	ff02ffff 	.word	0xff02ffff
 8002920:	e000ed00 	.word	0xe000ed00

08002924 <runStopwatch>:

// ---- Stopwatch functions ----
// set stopwatch. using lptimer. maybe better with regular timer?
// can operate in stop mode if using lptimer
// modify to update screen/set flags when necessary
void runStopwatch() {
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
	HAL_LPTIM_Counter_Start_IT(&hlptim1, 0x8000);
 8002928:	2380      	movs	r3, #128	; 0x80
 800292a:	021a      	lsls	r2, r3, #8
 800292c:	4b03      	ldr	r3, [pc, #12]	; (800293c <runStopwatch+0x18>)
 800292e:	0011      	movs	r1, r2
 8002930:	0018      	movs	r0, r3
 8002932:	f001 f80d 	bl	8003950 <HAL_LPTIM_Counter_Start_IT>
}
 8002936:	46c0      	nop			; (mov r8, r8)
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	200000cc 	.word	0x200000cc

08002940 <pauseStopwatch>:

// stop the timer or pause it or whatever.
// counter value might reset and screw up timekeeping? should save?
void pauseStopwatch() {
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
	HAL_LPTIM_Counter_Stop_IT(&hlptim1);
 8002944:	4b03      	ldr	r3, [pc, #12]	; (8002954 <pauseStopwatch+0x14>)
 8002946:	0018      	movs	r0, r3
 8002948:	f001 f856 	bl	80039f8 <HAL_LPTIM_Counter_Stop_IT>
//	temp = hlptim->Instance->CNT;
}
 800294c:	46c0      	nop			; (mov r8, r8)
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	200000cc 	.word	0x200000cc

08002958 <clearStopwatch>:

void clearStopwatch() {
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
	pauseStopwatch();
 800295c:	f7ff fff0 	bl	8002940 <pauseStopwatch>
	stopwatchCNT = 0;
 8002960:	4b02      	ldr	r3, [pc, #8]	; (800296c <clearStopwatch+0x14>)
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]
}
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	2000005c 	.word	0x2000005c

08002970 <HAL_LPTIM_AutoReloadMatchCallback>:
// increment variable for stopwatch counting.
// update screen if on
// how to set lptim internal clock to LSE???
//   I FOUND IT: RCC->CCIPR LPTIMSEL (2-bits, 11=LSE clock for LPTIM)
//   now...does hal do this automatically?
void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim) {
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
	// toggle pin, should toggle every 1s. change this pin
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8002978:	4b08      	ldr	r3, [pc, #32]	; (800299c <HAL_LPTIM_AutoReloadMatchCallback+0x2c>)
 800297a:	2102      	movs	r1, #2
 800297c:	0018      	movs	r0, r3
 800297e:	f000 ff39 	bl	80037f4 <HAL_GPIO_TogglePin>
	stopwatchCNT++;
 8002982:	4b07      	ldr	r3, [pc, #28]	; (80029a0 <HAL_LPTIM_AutoReloadMatchCallback+0x30>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	1c5a      	adds	r2, r3, #1
 8002988:	4b05      	ldr	r3, [pc, #20]	; (80029a0 <HAL_LPTIM_AutoReloadMatchCallback+0x30>)
 800298a:	601a      	str	r2, [r3, #0]
	updateStopwatch = 1;
 800298c:	4b05      	ldr	r3, [pc, #20]	; (80029a4 <HAL_LPTIM_AutoReloadMatchCallback+0x34>)
 800298e:	2201      	movs	r2, #1
 8002990:	701a      	strb	r2, [r3, #0]
}
 8002992:	46c0      	nop			; (mov r8, r8)
 8002994:	46bd      	mov	sp, r7
 8002996:	b002      	add	sp, #8
 8002998:	bd80      	pop	{r7, pc}
 800299a:	46c0      	nop			; (mov r8, r8)
 800299c:	50000400 	.word	0x50000400
 80029a0:	2000005c 	.word	0x2000005c
 80029a4:	20000067 	.word	0x20000067

080029a8 <runTimerDisplay>:
// ---- also including clock functions that use the timer ----
// should this be changed to not have any args (for convenience)
// used for screen updates.
// else, we're setting rtc alarm
// uses TIM21 with LSE (external timer w/ remap and done already by ST).
void runTimerDisplay() {
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim21);
 80029ac:	4b03      	ldr	r3, [pc, #12]	; (80029bc <runTimerDisplay+0x14>)
 80029ae:	0018      	movs	r0, r3
 80029b0:	f003 fa82 	bl	8005eb8 <HAL_TIM_Base_Start_IT>
}
 80029b4:	46c0      	nop			; (mov r8, r8)
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	46c0      	nop			; (mov r8, r8)
 80029bc:	2000018c 	.word	0x2000018c

080029c0 <runClockDisplay>:

void stopTimerDisplay() {
	HAL_TIM_Base_Stop_IT(&htim21);
}

void runClockDisplay() {
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim22);
 80029c4:	4b03      	ldr	r3, [pc, #12]	; (80029d4 <runClockDisplay+0x14>)
 80029c6:	0018      	movs	r0, r3
 80029c8:	f003 fa76 	bl	8005eb8 <HAL_TIM_Base_Start_IT>
}
 80029cc:	46c0      	nop			; (mov r8, r8)
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	46c0      	nop			; (mov r8, r8)
 80029d4:	2000008c 	.word	0x2000008c

080029d8 <HAL_TIM_PeriodElapsedCallback>:

void stopClockDisplay() {
	HAL_TIM_Base_Stop_IT(&htim22);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM21) {
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a10      	ldr	r2, [pc, #64]	; (8002a28 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d111      	bne.n	8002a0e <HAL_TIM_PeriodElapsedCallback+0x36>
		updateTimer = 1;
 80029ea:	4b10      	ldr	r3, [pc, #64]	; (8002a2c <HAL_TIM_PeriodElapsedCallback+0x54>)
 80029ec:	2201      	movs	r2, #1
 80029ee:	701a      	strb	r2, [r3, #0]
//		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
		// should toggle pin every 1s. change pin
		if (watchTimerSeconds != 0) {
 80029f0:	4b0f      	ldr	r3, [pc, #60]	; (8002a30 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d012      	beq.n	8002a1e <HAL_TIM_PeriodElapsedCallback+0x46>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 80029f8:	4b0e      	ldr	r3, [pc, #56]	; (8002a34 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80029fa:	2102      	movs	r1, #2
 80029fc:	0018      	movs	r0, r3
 80029fe:	f000 fef9 	bl	80037f4 <HAL_GPIO_TogglePin>
			watchTimerSeconds--;
 8002a02:	4b0b      	ldr	r3, [pc, #44]	; (8002a30 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	1e5a      	subs	r2, r3, #1
 8002a08:	4b09      	ldr	r3, [pc, #36]	; (8002a30 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002a0a:	601a      	str	r2, [r3, #0]
//		else stopTimerDisplay();
	}
	else if (htim->Instance == TIM22) {
		updateClock = 1;
	}
}
 8002a0c:	e007      	b.n	8002a1e <HAL_TIM_PeriodElapsedCallback+0x46>
	else if (htim->Instance == TIM22) {
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a09      	ldr	r2, [pc, #36]	; (8002a38 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d102      	bne.n	8002a1e <HAL_TIM_PeriodElapsedCallback+0x46>
		updateClock = 1;
 8002a18:	4b08      	ldr	r3, [pc, #32]	; (8002a3c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	701a      	strb	r2, [r3, #0]
}
 8002a1e:	46c0      	nop			; (mov r8, r8)
 8002a20:	46bd      	mov	sp, r7
 8002a22:	b002      	add	sp, #8
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	46c0      	nop			; (mov r8, r8)
 8002a28:	40010800 	.word	0x40010800
 8002a2c:	20000124 	.word	0x20000124
 8002a30:	20000180 	.word	0x20000180
 8002a34:	50000400 	.word	0x50000400
 8002a38:	40011400 	.word	0x40011400
 8002a3c:	20000068 	.word	0x20000068

08002a40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002a40:	480d      	ldr	r0, [pc, #52]	; (8002a78 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002a42:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8002a44:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002a46:	e003      	b.n	8002a50 <LoopCopyDataInit>

08002a48 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002a48:	4b0c      	ldr	r3, [pc, #48]	; (8002a7c <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8002a4a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002a4c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002a4e:	3104      	adds	r1, #4

08002a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8002a50:	480b      	ldr	r0, [pc, #44]	; (8002a80 <LoopForever+0xa>)
  ldr  r3, =_edata
 8002a52:	4b0c      	ldr	r3, [pc, #48]	; (8002a84 <LoopForever+0xe>)
  adds  r2, r0, r1
 8002a54:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002a56:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002a58:	d3f6      	bcc.n	8002a48 <CopyDataInit>
  ldr  r2, =_sbss
 8002a5a:	4a0b      	ldr	r2, [pc, #44]	; (8002a88 <LoopForever+0x12>)
  b  LoopFillZerobss
 8002a5c:	e002      	b.n	8002a64 <LoopFillZerobss>

08002a5e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8002a5e:	2300      	movs	r3, #0
  str  r3, [r2]
 8002a60:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a62:	3204      	adds	r2, #4

08002a64 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8002a64:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <LoopForever+0x16>)
  cmp  r2, r3
 8002a66:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002a68:	d3f9      	bcc.n	8002a5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002a6a:	f7ff ff1d 	bl	80028a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a6e:	f003 fee9 	bl	8006844 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a72:	f7fe fe61 	bl	8001738 <main>

08002a76 <LoopForever>:

LoopForever:
    b LoopForever
 8002a76:	e7fe      	b.n	8002a76 <LoopForever>
   ldr   r0, =_estack
 8002a78:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8002a7c:	08006f00 	.word	0x08006f00
  ldr  r0, =_sdata
 8002a80:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002a84:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8002a88:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8002a8c:	20000270 	.word	0x20000270

08002a90 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a90:	e7fe      	b.n	8002a90 <ADC1_COMP_IRQHandler>
	...

08002a94 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a9a:	1dfb      	adds	r3, r7, #7
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002aa0:	4b0b      	ldr	r3, [pc, #44]	; (8002ad0 <HAL_Init+0x3c>)
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	4b0a      	ldr	r3, [pc, #40]	; (8002ad0 <HAL_Init+0x3c>)
 8002aa6:	2140      	movs	r1, #64	; 0x40
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002aac:	2000      	movs	r0, #0
 8002aae:	f000 f811 	bl	8002ad4 <HAL_InitTick>
 8002ab2:	1e03      	subs	r3, r0, #0
 8002ab4:	d003      	beq.n	8002abe <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002ab6:	1dfb      	adds	r3, r7, #7
 8002ab8:	2201      	movs	r2, #1
 8002aba:	701a      	strb	r2, [r3, #0]
 8002abc:	e001      	b.n	8002ac2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002abe:	f7ff fd49 	bl	8002554 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ac2:	1dfb      	adds	r3, r7, #7
 8002ac4:	781b      	ldrb	r3, [r3, #0]
}
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	b002      	add	sp, #8
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	46c0      	nop			; (mov r8, r8)
 8002ad0:	40022000 	.word	0x40022000

08002ad4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002adc:	230f      	movs	r3, #15
 8002ade:	18fb      	adds	r3, r7, r3
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8002ae4:	4b0f      	ldr	r3, [pc, #60]	; (8002b24 <HAL_InitTick+0x50>)
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	23fa      	movs	r3, #250	; 0xfa
 8002aea:	0099      	lsls	r1, r3, #2
 8002aec:	0010      	movs	r0, r2
 8002aee:	f7fd fb0b 	bl	8000108 <__udivsi3>
 8002af2:	0003      	movs	r3, r0
 8002af4:	0018      	movs	r0, r3
 8002af6:	f000 fb4a 	bl	800318e <HAL_SYSTICK_Config>
 8002afa:	1e03      	subs	r3, r0, #0
 8002afc:	d004      	beq.n	8002b08 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 8002afe:	230f      	movs	r3, #15
 8002b00:	18fb      	adds	r3, r7, r3
 8002b02:	2201      	movs	r2, #1
 8002b04:	701a      	strb	r2, [r3, #0]
 8002b06:	e006      	b.n	8002b16 <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8002b08:	6879      	ldr	r1, [r7, #4]
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	425b      	negs	r3, r3
 8002b0e:	2200      	movs	r2, #0
 8002b10:	0018      	movs	r0, r3
 8002b12:	f000 fb17 	bl	8003144 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 8002b16:	230f      	movs	r3, #15
 8002b18:	18fb      	adds	r3, r7, r3
 8002b1a:	781b      	ldrb	r3, [r3, #0]
}
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	b004      	add	sp, #16
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	20000000 	.word	0x20000000

08002b28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  uwTick++;
 8002b2c:	4b03      	ldr	r3, [pc, #12]	; (8002b3c <HAL_IncTick+0x14>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	1c5a      	adds	r2, r3, #1
 8002b32:	4b02      	ldr	r3, [pc, #8]	; (8002b3c <HAL_IncTick+0x14>)
 8002b34:	601a      	str	r2, [r3, #0]
}
 8002b36:	46c0      	nop			; (mov r8, r8)
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	2000026c 	.word	0x2000026c

08002b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  return uwTick;
 8002b44:	4b02      	ldr	r3, [pc, #8]	; (8002b50 <HAL_GetTick+0x10>)
 8002b46:	681b      	ldr	r3, [r3, #0]
}
 8002b48:	0018      	movs	r0, r3
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	46c0      	nop			; (mov r8, r8)
 8002b50:	2000026c 	.word	0x2000026c

08002b54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b5c:	f7ff fff0 	bl	8002b40 <HAL_GetTick>
 8002b60:	0003      	movs	r3, r0
 8002b62:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	d002      	beq.n	8002b74 <HAL_Delay+0x20>
  {
    wait++;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	3301      	adds	r3, #1
 8002b72:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b74:	46c0      	nop			; (mov r8, r8)
 8002b76:	f7ff ffe3 	bl	8002b40 <HAL_GetTick>
 8002b7a:	0002      	movs	r2, r0
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d8f7      	bhi.n	8002b76 <HAL_Delay+0x22>
  {
  }
}
 8002b86:	46c0      	nop			; (mov r8, r8)
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	b004      	add	sp, #16
 8002b8c:	bd80      	pop	{r7, pc}
	...

08002b90 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e159      	b.n	8002e56 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10a      	bne.n	8002bc0 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2250      	movs	r2, #80	; 0x50
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	0018      	movs	r0, r3
 8002bbc:	f7ff fcde 	bl	800257c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc4:	2210      	movs	r2, #16
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	2b10      	cmp	r3, #16
 8002bca:	d005      	beq.n	8002bd8 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	2204      	movs	r2, #4
 8002bd4:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002bd6:	d00b      	beq.n	8002bf0 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bdc:	2210      	movs	r2, #16
 8002bde:	431a      	orrs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2250      	movs	r2, #80	; 0x50
 8002be8:	2100      	movs	r1, #0
 8002bea:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e132      	b.n	8002e56 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf4:	4a9a      	ldr	r2, [pc, #616]	; (8002e60 <HAL_ADC_Init+0x2d0>)
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	2202      	movs	r2, #2
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	2203      	movs	r2, #3
 8002c08:	4013      	ands	r3, r2
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d108      	bne.n	8002c20 <HAL_ADC_Init+0x90>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2201      	movs	r2, #1
 8002c16:	4013      	ands	r3, r2
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d101      	bne.n	8002c20 <HAL_ADC_Init+0x90>
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e000      	b.n	8002c22 <HAL_ADC_Init+0x92>
 8002c20:	2300      	movs	r3, #0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d149      	bne.n	8002cba <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685a      	ldr	r2, [r3, #4]
 8002c2a:	23c0      	movs	r3, #192	; 0xc0
 8002c2c:	061b      	lsls	r3, r3, #24
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d00b      	beq.n	8002c4a <HAL_ADC_Init+0xba>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	2380      	movs	r3, #128	; 0x80
 8002c38:	05db      	lsls	r3, r3, #23
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d005      	beq.n	8002c4a <HAL_ADC_Init+0xba>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685a      	ldr	r2, [r3, #4]
 8002c42:	2380      	movs	r3, #128	; 0x80
 8002c44:	061b      	lsls	r3, r3, #24
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d111      	bne.n	8002c6e <HAL_ADC_Init+0xde>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	691a      	ldr	r2, [r3, #16]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	0092      	lsls	r2, r2, #2
 8002c56:	0892      	lsrs	r2, r2, #2
 8002c58:	611a      	str	r2, [r3, #16]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	6919      	ldr	r1, [r3, #16]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	611a      	str	r2, [r3, #16]
 8002c6c:	e014      	b.n	8002c98 <HAL_ADC_Init+0x108>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	691a      	ldr	r2, [r3, #16]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	0092      	lsls	r2, r2, #2
 8002c7a:	0892      	lsrs	r2, r2, #2
 8002c7c:	611a      	str	r2, [r3, #16]
 8002c7e:	4b79      	ldr	r3, [pc, #484]	; (8002e64 <HAL_ADC_Init+0x2d4>)
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	4b78      	ldr	r3, [pc, #480]	; (8002e64 <HAL_ADC_Init+0x2d4>)
 8002c84:	4978      	ldr	r1, [pc, #480]	; (8002e68 <HAL_ADC_Init+0x2d8>)
 8002c86:	400a      	ands	r2, r1
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	4b76      	ldr	r3, [pc, #472]	; (8002e64 <HAL_ADC_Init+0x2d4>)
 8002c8c:	6819      	ldr	r1, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685a      	ldr	r2, [r3, #4]
 8002c92:	4b74      	ldr	r3, [pc, #464]	; (8002e64 <HAL_ADC_Init+0x2d4>)
 8002c94:	430a      	orrs	r2, r1
 8002c96:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68da      	ldr	r2, [r3, #12]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2118      	movs	r1, #24
 8002ca4:	438a      	bics	r2, r1
 8002ca6:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68d9      	ldr	r1, [r3, #12]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	689a      	ldr	r2, [r3, #8]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8002cba:	4b6a      	ldr	r3, [pc, #424]	; (8002e64 <HAL_ADC_Init+0x2d4>)
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	4b69      	ldr	r3, [pc, #420]	; (8002e64 <HAL_ADC_Init+0x2d4>)
 8002cc0:	496a      	ldr	r1, [pc, #424]	; (8002e6c <HAL_ADC_Init+0x2dc>)
 8002cc2:	400a      	ands	r2, r1
 8002cc4:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8002cc6:	4b67      	ldr	r3, [pc, #412]	; (8002e64 <HAL_ADC_Init+0x2d4>)
 8002cc8:	6819      	ldr	r1, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cce:	065a      	lsls	r2, r3, #25
 8002cd0:	4b64      	ldr	r3, [pc, #400]	; (8002e64 <HAL_ADC_Init+0x2d4>)
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	2380      	movs	r3, #128	; 0x80
 8002cde:	055b      	lsls	r3, r3, #21
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	d108      	bne.n	8002cf6 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689a      	ldr	r2, [r3, #8]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2180      	movs	r1, #128	; 0x80
 8002cf0:	0549      	lsls	r1, r1, #21
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68da      	ldr	r2, [r3, #12]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	495b      	ldr	r1, [pc, #364]	; (8002e70 <HAL_ADC_Init+0x2e0>)
 8002d02:	400a      	ands	r2, r1
 8002d04:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68d9      	ldr	r1, [r3, #12]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d101      	bne.n	8002d1c <HAL_ADC_Init+0x18c>
 8002d18:	2304      	movs	r3, #4
 8002d1a:	e000      	b.n	8002d1e <HAL_ADC_Init+0x18e>
 8002d1c:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002d1e:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2020      	movs	r0, #32
 8002d24:	5c1b      	ldrb	r3, [r3, r0]
 8002d26:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002d28:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	202c      	movs	r0, #44	; 0x2c
 8002d2e:	5c1b      	ldrb	r3, [r3, r0]
 8002d30:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002d32:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002d38:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8002d40:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002d48:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d56:	23c2      	movs	r3, #194	; 0xc2
 8002d58:	33ff      	adds	r3, #255	; 0xff
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d00b      	beq.n	8002d76 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68d9      	ldr	r1, [r3, #12]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2221      	movs	r2, #33	; 0x21
 8002d7a:	5c9b      	ldrb	r3, [r3, r2]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d11a      	bne.n	8002db6 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2220      	movs	r2, #32
 8002d84:	5c9b      	ldrb	r3, [r3, r2]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d109      	bne.n	8002d9e <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68da      	ldr	r2, [r3, #12]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2180      	movs	r1, #128	; 0x80
 8002d96:	0249      	lsls	r1, r1, #9
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	60da      	str	r2, [r3, #12]
 8002d9c:	e00b      	b.n	8002db6 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da2:	2220      	movs	r2, #32
 8002da4:	431a      	orrs	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dae:	2201      	movs	r2, #1
 8002db0:	431a      	orrs	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d11f      	bne.n	8002dfe <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	691a      	ldr	r2, [r3, #16]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	492a      	ldr	r1, [pc, #168]	; (8002e74 <HAL_ADC_Init+0x2e4>)
 8002dca:	400a      	ands	r2, r1
 8002dcc:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6919      	ldr	r1, [r3, #16]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002ddc:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8002de2:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	691a      	ldr	r2, [r3, #16]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2101      	movs	r1, #1
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	611a      	str	r2, [r3, #16]
 8002dfc:	e00e      	b.n	8002e1c <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	2201      	movs	r2, #1
 8002e06:	4013      	ands	r3, r2
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d107      	bne.n	8002e1c <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	691a      	ldr	r2, [r3, #16]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2101      	movs	r1, #1
 8002e18:	438a      	bics	r2, r1
 8002e1a:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	695a      	ldr	r2, [r3, #20]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2107      	movs	r1, #7
 8002e28:	438a      	bics	r2, r1
 8002e2a:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6959      	ldr	r1, [r3, #20]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e48:	2203      	movs	r2, #3
 8002e4a:	4393      	bics	r3, r2
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	0018      	movs	r0, r3
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	b002      	add	sp, #8
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	46c0      	nop			; (mov r8, r8)
 8002e60:	fffffefd 	.word	0xfffffefd
 8002e64:	40012708 	.word	0x40012708
 8002e68:	ffc3ffff 	.word	0xffc3ffff
 8002e6c:	fdffffff 	.word	0xfdffffff
 8002e70:	fffe0219 	.word	0xfffe0219
 8002e74:	fffffc03 	.word	0xfffffc03

08002e78 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2250      	movs	r2, #80	; 0x50
 8002e86:	5c9b      	ldrb	r3, [r3, r2]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d101      	bne.n	8002e90 <HAL_ADC_ConfigChannel+0x18>
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	e085      	b.n	8002f9c <HAL_ADC_ConfigChannel+0x124>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2250      	movs	r2, #80	; 0x50
 8002e94:	2101      	movs	r1, #1
 8002e96:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	2204      	movs	r2, #4
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	d00b      	beq.n	8002ebc <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea8:	2220      	movs	r2, #32
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2250      	movs	r2, #80	; 0x50
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e06f      	b.n	8002f9c <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	4a38      	ldr	r2, [pc, #224]	; (8002fa4 <HAL_ADC_ConfigChannel+0x12c>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d035      	beq.n	8002f32 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	035b      	lsls	r3, r3, #13
 8002ed2:	0b5a      	lsrs	r2, r3, #13
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	2380      	movs	r3, #128	; 0x80
 8002ee2:	02db      	lsls	r3, r3, #11
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	d009      	beq.n	8002efc <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8002ee8:	4b2f      	ldr	r3, [pc, #188]	; (8002fa8 <HAL_ADC_ConfigChannel+0x130>)
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	4b2e      	ldr	r3, [pc, #184]	; (8002fa8 <HAL_ADC_ConfigChannel+0x130>)
 8002eee:	2180      	movs	r1, #128	; 0x80
 8002ef0:	0409      	lsls	r1, r1, #16
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8002ef6:	200a      	movs	r0, #10
 8002ef8:	f000 f85e 	bl	8002fb8 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	2380      	movs	r3, #128	; 0x80
 8002f02:	029b      	lsls	r3, r3, #10
 8002f04:	4013      	ands	r3, r2
 8002f06:	d006      	beq.n	8002f16 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8002f08:	4b27      	ldr	r3, [pc, #156]	; (8002fa8 <HAL_ADC_ConfigChannel+0x130>)
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	4b26      	ldr	r3, [pc, #152]	; (8002fa8 <HAL_ADC_ConfigChannel+0x130>)
 8002f0e:	2180      	movs	r1, #128	; 0x80
 8002f10:	03c9      	lsls	r1, r1, #15
 8002f12:	430a      	orrs	r2, r1
 8002f14:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	2380      	movs	r3, #128	; 0x80
 8002f1c:	025b      	lsls	r3, r3, #9
 8002f1e:	4013      	ands	r3, r2
 8002f20:	d037      	beq.n	8002f92 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 8002f22:	4b21      	ldr	r3, [pc, #132]	; (8002fa8 <HAL_ADC_ConfigChannel+0x130>)
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	4b20      	ldr	r3, [pc, #128]	; (8002fa8 <HAL_ADC_ConfigChannel+0x130>)
 8002f28:	2180      	movs	r1, #128	; 0x80
 8002f2a:	0449      	lsls	r1, r1, #17
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	e02f      	b.n	8002f92 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	035b      	lsls	r3, r3, #13
 8002f3e:	0b5b      	lsrs	r3, r3, #13
 8002f40:	43d9      	mvns	r1, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	400a      	ands	r2, r1
 8002f48:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	2380      	movs	r3, #128	; 0x80
 8002f50:	02db      	lsls	r3, r3, #11
 8002f52:	4013      	ands	r3, r2
 8002f54:	d005      	beq.n	8002f62 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8002f56:	4b14      	ldr	r3, [pc, #80]	; (8002fa8 <HAL_ADC_ConfigChannel+0x130>)
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	4b13      	ldr	r3, [pc, #76]	; (8002fa8 <HAL_ADC_ConfigChannel+0x130>)
 8002f5c:	4913      	ldr	r1, [pc, #76]	; (8002fac <HAL_ADC_ConfigChannel+0x134>)
 8002f5e:	400a      	ands	r2, r1
 8002f60:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	2380      	movs	r3, #128	; 0x80
 8002f68:	029b      	lsls	r3, r3, #10
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	d005      	beq.n	8002f7a <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8002f6e:	4b0e      	ldr	r3, [pc, #56]	; (8002fa8 <HAL_ADC_ConfigChannel+0x130>)
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	4b0d      	ldr	r3, [pc, #52]	; (8002fa8 <HAL_ADC_ConfigChannel+0x130>)
 8002f74:	490e      	ldr	r1, [pc, #56]	; (8002fb0 <HAL_ADC_ConfigChannel+0x138>)
 8002f76:	400a      	ands	r2, r1
 8002f78:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	2380      	movs	r3, #128	; 0x80
 8002f80:	025b      	lsls	r3, r3, #9
 8002f82:	4013      	ands	r3, r2
 8002f84:	d005      	beq.n	8002f92 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 8002f86:	4b08      	ldr	r3, [pc, #32]	; (8002fa8 <HAL_ADC_ConfigChannel+0x130>)
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	4b07      	ldr	r3, [pc, #28]	; (8002fa8 <HAL_ADC_ConfigChannel+0x130>)
 8002f8c:	4909      	ldr	r1, [pc, #36]	; (8002fb4 <HAL_ADC_ConfigChannel+0x13c>)
 8002f8e:	400a      	ands	r2, r1
 8002f90:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2250      	movs	r2, #80	; 0x50
 8002f96:	2100      	movs	r1, #0
 8002f98:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	0018      	movs	r0, r3
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	b002      	add	sp, #8
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	00001001 	.word	0x00001001
 8002fa8:	40012708 	.word	0x40012708
 8002fac:	ff7fffff 	.word	0xff7fffff
 8002fb0:	ffbfffff 	.word	0xffbfffff
 8002fb4:	feffffff 	.word	0xfeffffff

08002fb8 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8002fc0:	4b0a      	ldr	r3, [pc, #40]	; (8002fec <ADC_DelayMicroSecond+0x34>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	490a      	ldr	r1, [pc, #40]	; (8002ff0 <ADC_DelayMicroSecond+0x38>)
 8002fc6:	0018      	movs	r0, r3
 8002fc8:	f7fd f89e 	bl	8000108 <__udivsi3>
 8002fcc:	0003      	movs	r3, r0
 8002fce:	001a      	movs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4353      	muls	r3, r2
 8002fd4:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8002fd6:	e002      	b.n	8002fde <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1f9      	bne.n	8002fd8 <ADC_DelayMicroSecond+0x20>
  } 
}
 8002fe4:	46c0      	nop			; (mov r8, r8)
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	b004      	add	sp, #16
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	20000000 	.word	0x20000000
 8002ff0:	000f4240 	.word	0x000f4240

08002ff4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	0002      	movs	r2, r0
 8002ffc:	1dfb      	adds	r3, r7, #7
 8002ffe:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003000:	1dfb      	adds	r3, r7, #7
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	001a      	movs	r2, r3
 8003006:	231f      	movs	r3, #31
 8003008:	401a      	ands	r2, r3
 800300a:	4b04      	ldr	r3, [pc, #16]	; (800301c <NVIC_EnableIRQ+0x28>)
 800300c:	2101      	movs	r1, #1
 800300e:	4091      	lsls	r1, r2
 8003010:	000a      	movs	r2, r1
 8003012:	601a      	str	r2, [r3, #0]
}
 8003014:	46c0      	nop			; (mov r8, r8)
 8003016:	46bd      	mov	sp, r7
 8003018:	b002      	add	sp, #8
 800301a:	bd80      	pop	{r7, pc}
 800301c:	e000e100 	.word	0xe000e100

08003020 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003020:	b590      	push	{r4, r7, lr}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	0002      	movs	r2, r0
 8003028:	6039      	str	r1, [r7, #0]
 800302a:	1dfb      	adds	r3, r7, #7
 800302c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800302e:	1dfb      	adds	r3, r7, #7
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	2b7f      	cmp	r3, #127	; 0x7f
 8003034:	d932      	bls.n	800309c <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003036:	4a2f      	ldr	r2, [pc, #188]	; (80030f4 <NVIC_SetPriority+0xd4>)
 8003038:	1dfb      	adds	r3, r7, #7
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	0019      	movs	r1, r3
 800303e:	230f      	movs	r3, #15
 8003040:	400b      	ands	r3, r1
 8003042:	3b08      	subs	r3, #8
 8003044:	089b      	lsrs	r3, r3, #2
 8003046:	3306      	adds	r3, #6
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	18d3      	adds	r3, r2, r3
 800304c:	3304      	adds	r3, #4
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	1dfa      	adds	r2, r7, #7
 8003052:	7812      	ldrb	r2, [r2, #0]
 8003054:	0011      	movs	r1, r2
 8003056:	2203      	movs	r2, #3
 8003058:	400a      	ands	r2, r1
 800305a:	00d2      	lsls	r2, r2, #3
 800305c:	21ff      	movs	r1, #255	; 0xff
 800305e:	4091      	lsls	r1, r2
 8003060:	000a      	movs	r2, r1
 8003062:	43d2      	mvns	r2, r2
 8003064:	401a      	ands	r2, r3
 8003066:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	019b      	lsls	r3, r3, #6
 800306c:	22ff      	movs	r2, #255	; 0xff
 800306e:	401a      	ands	r2, r3
 8003070:	1dfb      	adds	r3, r7, #7
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	0018      	movs	r0, r3
 8003076:	2303      	movs	r3, #3
 8003078:	4003      	ands	r3, r0
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800307e:	481d      	ldr	r0, [pc, #116]	; (80030f4 <NVIC_SetPriority+0xd4>)
 8003080:	1dfb      	adds	r3, r7, #7
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	001c      	movs	r4, r3
 8003086:	230f      	movs	r3, #15
 8003088:	4023      	ands	r3, r4
 800308a:	3b08      	subs	r3, #8
 800308c:	089b      	lsrs	r3, r3, #2
 800308e:	430a      	orrs	r2, r1
 8003090:	3306      	adds	r3, #6
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	18c3      	adds	r3, r0, r3
 8003096:	3304      	adds	r3, #4
 8003098:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800309a:	e027      	b.n	80030ec <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800309c:	4a16      	ldr	r2, [pc, #88]	; (80030f8 <NVIC_SetPriority+0xd8>)
 800309e:	1dfb      	adds	r3, r7, #7
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	b25b      	sxtb	r3, r3
 80030a4:	089b      	lsrs	r3, r3, #2
 80030a6:	33c0      	adds	r3, #192	; 0xc0
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	589b      	ldr	r3, [r3, r2]
 80030ac:	1dfa      	adds	r2, r7, #7
 80030ae:	7812      	ldrb	r2, [r2, #0]
 80030b0:	0011      	movs	r1, r2
 80030b2:	2203      	movs	r2, #3
 80030b4:	400a      	ands	r2, r1
 80030b6:	00d2      	lsls	r2, r2, #3
 80030b8:	21ff      	movs	r1, #255	; 0xff
 80030ba:	4091      	lsls	r1, r2
 80030bc:	000a      	movs	r2, r1
 80030be:	43d2      	mvns	r2, r2
 80030c0:	401a      	ands	r2, r3
 80030c2:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	019b      	lsls	r3, r3, #6
 80030c8:	22ff      	movs	r2, #255	; 0xff
 80030ca:	401a      	ands	r2, r3
 80030cc:	1dfb      	adds	r3, r7, #7
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	0018      	movs	r0, r3
 80030d2:	2303      	movs	r3, #3
 80030d4:	4003      	ands	r3, r0
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80030da:	4807      	ldr	r0, [pc, #28]	; (80030f8 <NVIC_SetPriority+0xd8>)
 80030dc:	1dfb      	adds	r3, r7, #7
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	b25b      	sxtb	r3, r3
 80030e2:	089b      	lsrs	r3, r3, #2
 80030e4:	430a      	orrs	r2, r1
 80030e6:	33c0      	adds	r3, #192	; 0xc0
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	501a      	str	r2, [r3, r0]
}
 80030ec:	46c0      	nop			; (mov r8, r8)
 80030ee:	46bd      	mov	sp, r7
 80030f0:	b003      	add	sp, #12
 80030f2:	bd90      	pop	{r4, r7, pc}
 80030f4:	e000ed00 	.word	0xe000ed00
 80030f8:	e000e100 	.word	0xe000e100

080030fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	3b01      	subs	r3, #1
 8003108:	4a0c      	ldr	r2, [pc, #48]	; (800313c <SysTick_Config+0x40>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d901      	bls.n	8003112 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800310e:	2301      	movs	r3, #1
 8003110:	e010      	b.n	8003134 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003112:	4b0b      	ldr	r3, [pc, #44]	; (8003140 <SysTick_Config+0x44>)
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	3a01      	subs	r2, #1
 8003118:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800311a:	2301      	movs	r3, #1
 800311c:	425b      	negs	r3, r3
 800311e:	2103      	movs	r1, #3
 8003120:	0018      	movs	r0, r3
 8003122:	f7ff ff7d 	bl	8003020 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003126:	4b06      	ldr	r3, [pc, #24]	; (8003140 <SysTick_Config+0x44>)
 8003128:	2200      	movs	r2, #0
 800312a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800312c:	4b04      	ldr	r3, [pc, #16]	; (8003140 <SysTick_Config+0x44>)
 800312e:	2207      	movs	r2, #7
 8003130:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003132:	2300      	movs	r3, #0
}
 8003134:	0018      	movs	r0, r3
 8003136:	46bd      	mov	sp, r7
 8003138:	b002      	add	sp, #8
 800313a:	bd80      	pop	{r7, pc}
 800313c:	00ffffff 	.word	0x00ffffff
 8003140:	e000e010 	.word	0xe000e010

08003144 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	60b9      	str	r1, [r7, #8]
 800314c:	607a      	str	r2, [r7, #4]
 800314e:	210f      	movs	r1, #15
 8003150:	187b      	adds	r3, r7, r1
 8003152:	1c02      	adds	r2, r0, #0
 8003154:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003156:	68ba      	ldr	r2, [r7, #8]
 8003158:	187b      	adds	r3, r7, r1
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	b25b      	sxtb	r3, r3
 800315e:	0011      	movs	r1, r2
 8003160:	0018      	movs	r0, r3
 8003162:	f7ff ff5d 	bl	8003020 <NVIC_SetPriority>
}
 8003166:	46c0      	nop			; (mov r8, r8)
 8003168:	46bd      	mov	sp, r7
 800316a:	b004      	add	sp, #16
 800316c:	bd80      	pop	{r7, pc}

0800316e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	b082      	sub	sp, #8
 8003172:	af00      	add	r7, sp, #0
 8003174:	0002      	movs	r2, r0
 8003176:	1dfb      	adds	r3, r7, #7
 8003178:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800317a:	1dfb      	adds	r3, r7, #7
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	b25b      	sxtb	r3, r3
 8003180:	0018      	movs	r0, r3
 8003182:	f7ff ff37 	bl	8002ff4 <NVIC_EnableIRQ>
}
 8003186:	46c0      	nop			; (mov r8, r8)
 8003188:	46bd      	mov	sp, r7
 800318a:	b002      	add	sp, #8
 800318c:	bd80      	pop	{r7, pc}

0800318e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b082      	sub	sp, #8
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	0018      	movs	r0, r3
 800319a:	f7ff ffaf 	bl	80030fc <SysTick_Config>
 800319e:	0003      	movs	r3, r0
}
 80031a0:	0018      	movs	r0, r3
 80031a2:	46bd      	mov	sp, r7
 80031a4:	b002      	add	sp, #8
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e061      	b.n	800327e <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a32      	ldr	r2, [pc, #200]	; (8003288 <HAL_DMA_Init+0xe0>)
 80031c0:	4694      	mov	ip, r2
 80031c2:	4463      	add	r3, ip
 80031c4:	2114      	movs	r1, #20
 80031c6:	0018      	movs	r0, r3
 80031c8:	f7fc ff9e 	bl	8000108 <__udivsi3>
 80031cc:	0003      	movs	r3, r0
 80031ce:	009a      	lsls	r2, r3, #2
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a2d      	ldr	r2, [pc, #180]	; (800328c <HAL_DMA_Init+0xe4>)
 80031d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2225      	movs	r2, #37	; 0x25
 80031de:	2102      	movs	r1, #2
 80031e0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	4a28      	ldr	r2, [pc, #160]	; (8003290 <HAL_DMA_Init+0xe8>)
 80031ee:	4013      	ands	r3, r2
 80031f0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80031fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003206:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003212:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	4313      	orrs	r3, r2
 800321e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689a      	ldr	r2, [r3, #8]
 800322c:	2380      	movs	r3, #128	; 0x80
 800322e:	01db      	lsls	r3, r3, #7
 8003230:	429a      	cmp	r2, r3
 8003232:	d018      	beq.n	8003266 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003234:	4b17      	ldr	r3, [pc, #92]	; (8003294 <HAL_DMA_Init+0xec>)
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323c:	211c      	movs	r1, #28
 800323e:	400b      	ands	r3, r1
 8003240:	210f      	movs	r1, #15
 8003242:	4099      	lsls	r1, r3
 8003244:	000b      	movs	r3, r1
 8003246:	43d9      	mvns	r1, r3
 8003248:	4b12      	ldr	r3, [pc, #72]	; (8003294 <HAL_DMA_Init+0xec>)
 800324a:	400a      	ands	r2, r1
 800324c:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800324e:	4b11      	ldr	r3, [pc, #68]	; (8003294 <HAL_DMA_Init+0xec>)
 8003250:	6819      	ldr	r1, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325a:	201c      	movs	r0, #28
 800325c:	4003      	ands	r3, r0
 800325e:	409a      	lsls	r2, r3
 8003260:	4b0c      	ldr	r3, [pc, #48]	; (8003294 <HAL_DMA_Init+0xec>)
 8003262:	430a      	orrs	r2, r1
 8003264:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2225      	movs	r2, #37	; 0x25
 8003270:	2101      	movs	r1, #1
 8003272:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2224      	movs	r2, #36	; 0x24
 8003278:	2100      	movs	r1, #0
 800327a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	0018      	movs	r0, r3
 8003280:	46bd      	mov	sp, r7
 8003282:	b004      	add	sp, #16
 8003284:	bd80      	pop	{r7, pc}
 8003286:	46c0      	nop			; (mov r8, r8)
 8003288:	bffdfff8 	.word	0xbffdfff8
 800328c:	40020000 	.word	0x40020000
 8003290:	ffff800f 	.word	0xffff800f
 8003294:	400200a8 	.word	0x400200a8

08003298 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032a0:	230f      	movs	r3, #15
 80032a2:	18fb      	adds	r3, r7, r3
 80032a4:	2200      	movs	r2, #0
 80032a6:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2225      	movs	r2, #37	; 0x25
 80032ac:	5c9b      	ldrb	r3, [r3, r2]
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d007      	beq.n	80032c4 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2204      	movs	r2, #4
 80032b8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80032ba:	230f      	movs	r3, #15
 80032bc:	18fb      	adds	r3, r7, r3
 80032be:	2201      	movs	r2, #1
 80032c0:	701a      	strb	r2, [r3, #0]
 80032c2:	e02a      	b.n	800331a <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	210e      	movs	r1, #14
 80032d0:	438a      	bics	r2, r1
 80032d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2101      	movs	r1, #1
 80032e0:	438a      	bics	r2, r1
 80032e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e8:	221c      	movs	r2, #28
 80032ea:	401a      	ands	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f0:	2101      	movs	r1, #1
 80032f2:	4091      	lsls	r1, r2
 80032f4:	000a      	movs	r2, r1
 80032f6:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2225      	movs	r2, #37	; 0x25
 80032fc:	2101      	movs	r1, #1
 80032fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2224      	movs	r2, #36	; 0x24
 8003304:	2100      	movs	r1, #0
 8003306:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330c:	2b00      	cmp	r3, #0
 800330e:	d004      	beq.n	800331a <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	0010      	movs	r0, r2
 8003318:	4798      	blx	r3
    }
  }
  return status;
 800331a:	230f      	movs	r3, #15
 800331c:	18fb      	adds	r3, r7, r3
 800331e:	781b      	ldrb	r3, [r3, #0]
}
 8003320:	0018      	movs	r0, r3
 8003322:	46bd      	mov	sp, r7
 8003324:	b004      	add	sp, #16
 8003326:	bd80      	pop	{r7, pc}

08003328 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003344:	221c      	movs	r2, #28
 8003346:	4013      	ands	r3, r2
 8003348:	2204      	movs	r2, #4
 800334a:	409a      	lsls	r2, r3
 800334c:	0013      	movs	r3, r2
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	4013      	ands	r3, r2
 8003352:	d026      	beq.n	80033a2 <HAL_DMA_IRQHandler+0x7a>
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	2204      	movs	r2, #4
 8003358:	4013      	ands	r3, r2
 800335a:	d022      	beq.n	80033a2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2220      	movs	r2, #32
 8003364:	4013      	ands	r3, r2
 8003366:	d107      	bne.n	8003378 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2104      	movs	r1, #4
 8003374:	438a      	bics	r2, r1
 8003376:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337c:	221c      	movs	r2, #28
 800337e:	401a      	ands	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003384:	2104      	movs	r1, #4
 8003386:	4091      	lsls	r1, r2
 8003388:	000a      	movs	r2, r1
 800338a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003390:	2b00      	cmp	r3, #0
 8003392:	d100      	bne.n	8003396 <HAL_DMA_IRQHandler+0x6e>
 8003394:	e071      	b.n	800347a <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	0010      	movs	r0, r2
 800339e:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80033a0:	e06b      	b.n	800347a <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a6:	221c      	movs	r2, #28
 80033a8:	4013      	ands	r3, r2
 80033aa:	2202      	movs	r2, #2
 80033ac:	409a      	lsls	r2, r3
 80033ae:	0013      	movs	r3, r2
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	4013      	ands	r3, r2
 80033b4:	d02d      	beq.n	8003412 <HAL_DMA_IRQHandler+0xea>
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	2202      	movs	r2, #2
 80033ba:	4013      	ands	r3, r2
 80033bc:	d029      	beq.n	8003412 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2220      	movs	r2, #32
 80033c6:	4013      	ands	r3, r2
 80033c8:	d10b      	bne.n	80033e2 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	210a      	movs	r1, #10
 80033d6:	438a      	bics	r2, r1
 80033d8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2225      	movs	r2, #37	; 0x25
 80033de:	2101      	movs	r1, #1
 80033e0:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e6:	221c      	movs	r2, #28
 80033e8:	401a      	ands	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	2102      	movs	r1, #2
 80033f0:	4091      	lsls	r1, r2
 80033f2:	000a      	movs	r2, r1
 80033f4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2224      	movs	r2, #36	; 0x24
 80033fa:	2100      	movs	r1, #0
 80033fc:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003402:	2b00      	cmp	r3, #0
 8003404:	d039      	beq.n	800347a <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	0010      	movs	r0, r2
 800340e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003410:	e033      	b.n	800347a <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003416:	221c      	movs	r2, #28
 8003418:	4013      	ands	r3, r2
 800341a:	2208      	movs	r2, #8
 800341c:	409a      	lsls	r2, r3
 800341e:	0013      	movs	r3, r2
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	4013      	ands	r3, r2
 8003424:	d02a      	beq.n	800347c <HAL_DMA_IRQHandler+0x154>
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	2208      	movs	r2, #8
 800342a:	4013      	ands	r3, r2
 800342c:	d026      	beq.n	800347c <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	210e      	movs	r1, #14
 800343a:	438a      	bics	r2, r1
 800343c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003442:	221c      	movs	r2, #28
 8003444:	401a      	ands	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	2101      	movs	r1, #1
 800344c:	4091      	lsls	r1, r2
 800344e:	000a      	movs	r2, r1
 8003450:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2225      	movs	r2, #37	; 0x25
 800345c:	2101      	movs	r1, #1
 800345e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2224      	movs	r2, #36	; 0x24
 8003464:	2100      	movs	r1, #0
 8003466:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800346c:	2b00      	cmp	r3, #0
 800346e:	d005      	beq.n	800347c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	0010      	movs	r0, r2
 8003478:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800347a:	46c0      	nop			; (mov r8, r8)
 800347c:	46c0      	nop			; (mov r8, r8)
}
 800347e:	46bd      	mov	sp, r7
 8003480:	b004      	add	sp, #16
 8003482:	bd80      	pop	{r7, pc}

08003484 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800348e:	2300      	movs	r3, #0
 8003490:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003492:	2300      	movs	r3, #0
 8003494:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003496:	2300      	movs	r3, #0
 8003498:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800349a:	e155      	b.n	8003748 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2101      	movs	r1, #1
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	4091      	lsls	r1, r2
 80034a6:	000a      	movs	r2, r1
 80034a8:	4013      	ands	r3, r2
 80034aa:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d100      	bne.n	80034b4 <HAL_GPIO_Init+0x30>
 80034b2:	e146      	b.n	8003742 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d003      	beq.n	80034c4 <HAL_GPIO_Init+0x40>
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	2b12      	cmp	r3, #18
 80034c2:	d123      	bne.n	800350c <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	08da      	lsrs	r2, r3, #3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3208      	adds	r2, #8
 80034cc:	0092      	lsls	r2, r2, #2
 80034ce:	58d3      	ldr	r3, [r2, r3]
 80034d0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	2207      	movs	r2, #7
 80034d6:	4013      	ands	r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	220f      	movs	r2, #15
 80034dc:	409a      	lsls	r2, r3
 80034de:	0013      	movs	r3, r2
 80034e0:	43da      	mvns	r2, r3
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	4013      	ands	r3, r2
 80034e6:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	691a      	ldr	r2, [r3, #16]
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	2107      	movs	r1, #7
 80034f0:	400b      	ands	r3, r1
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	409a      	lsls	r2, r3
 80034f6:	0013      	movs	r3, r2
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	08da      	lsrs	r2, r3, #3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	3208      	adds	r2, #8
 8003506:	0092      	lsls	r2, r2, #2
 8003508:	6939      	ldr	r1, [r7, #16]
 800350a:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d00b      	beq.n	800352c <HAL_GPIO_Init+0xa8>
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	2b02      	cmp	r3, #2
 800351a:	d007      	beq.n	800352c <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003520:	2b11      	cmp	r3, #17
 8003522:	d003      	beq.n	800352c <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	2b12      	cmp	r3, #18
 800352a:	d130      	bne.n	800358e <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	2203      	movs	r2, #3
 8003538:	409a      	lsls	r2, r3
 800353a:	0013      	movs	r3, r2
 800353c:	43da      	mvns	r2, r3
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	4013      	ands	r3, r2
 8003542:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	68da      	ldr	r2, [r3, #12]
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	409a      	lsls	r2, r3
 800354e:	0013      	movs	r3, r2
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	4313      	orrs	r3, r2
 8003554:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003562:	2201      	movs	r2, #1
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	409a      	lsls	r2, r3
 8003568:	0013      	movs	r3, r2
 800356a:	43da      	mvns	r2, r3
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	4013      	ands	r3, r2
 8003570:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	091b      	lsrs	r3, r3, #4
 8003578:	2201      	movs	r2, #1
 800357a:	401a      	ands	r2, r3
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	409a      	lsls	r2, r3
 8003580:	0013      	movs	r3, r2
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	4313      	orrs	r3, r2
 8003586:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	2203      	movs	r2, #3
 800359a:	409a      	lsls	r2, r3
 800359c:	0013      	movs	r3, r2
 800359e:	43da      	mvns	r2, r3
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	4013      	ands	r3, r2
 80035a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2203      	movs	r2, #3
 80035ac:	401a      	ands	r2, r3
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	409a      	lsls	r2, r3
 80035b4:	0013      	movs	r3, r2
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	2203      	movs	r2, #3
 80035ce:	409a      	lsls	r2, r3
 80035d0:	0013      	movs	r3, r2
 80035d2:	43da      	mvns	r2, r3
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	4013      	ands	r3, r2
 80035d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	689a      	ldr	r2, [r3, #8]
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	409a      	lsls	r2, r3
 80035e4:	0013      	movs	r3, r2
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	2380      	movs	r3, #128	; 0x80
 80035f8:	055b      	lsls	r3, r3, #21
 80035fa:	4013      	ands	r3, r2
 80035fc:	d100      	bne.n	8003600 <HAL_GPIO_Init+0x17c>
 80035fe:	e0a0      	b.n	8003742 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003600:	4b57      	ldr	r3, [pc, #348]	; (8003760 <HAL_GPIO_Init+0x2dc>)
 8003602:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003604:	4b56      	ldr	r3, [pc, #344]	; (8003760 <HAL_GPIO_Init+0x2dc>)
 8003606:	2101      	movs	r1, #1
 8003608:	430a      	orrs	r2, r1
 800360a:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 800360c:	4a55      	ldr	r2, [pc, #340]	; (8003764 <HAL_GPIO_Init+0x2e0>)
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	089b      	lsrs	r3, r3, #2
 8003612:	3302      	adds	r3, #2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	589b      	ldr	r3, [r3, r2]
 8003618:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	2203      	movs	r2, #3
 800361e:	4013      	ands	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	220f      	movs	r2, #15
 8003624:	409a      	lsls	r2, r3
 8003626:	0013      	movs	r3, r2
 8003628:	43da      	mvns	r2, r3
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	4013      	ands	r3, r2
 800362e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	23a0      	movs	r3, #160	; 0xa0
 8003634:	05db      	lsls	r3, r3, #23
 8003636:	429a      	cmp	r2, r3
 8003638:	d01f      	beq.n	800367a <HAL_GPIO_Init+0x1f6>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a4a      	ldr	r2, [pc, #296]	; (8003768 <HAL_GPIO_Init+0x2e4>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d019      	beq.n	8003676 <HAL_GPIO_Init+0x1f2>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a49      	ldr	r2, [pc, #292]	; (800376c <HAL_GPIO_Init+0x2e8>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d013      	beq.n	8003672 <HAL_GPIO_Init+0x1ee>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a48      	ldr	r2, [pc, #288]	; (8003770 <HAL_GPIO_Init+0x2ec>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d00d      	beq.n	800366e <HAL_GPIO_Init+0x1ea>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a47      	ldr	r2, [pc, #284]	; (8003774 <HAL_GPIO_Init+0x2f0>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d007      	beq.n	800366a <HAL_GPIO_Init+0x1e6>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a46      	ldr	r2, [pc, #280]	; (8003778 <HAL_GPIO_Init+0x2f4>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d101      	bne.n	8003666 <HAL_GPIO_Init+0x1e2>
 8003662:	2305      	movs	r3, #5
 8003664:	e00a      	b.n	800367c <HAL_GPIO_Init+0x1f8>
 8003666:	2306      	movs	r3, #6
 8003668:	e008      	b.n	800367c <HAL_GPIO_Init+0x1f8>
 800366a:	2304      	movs	r3, #4
 800366c:	e006      	b.n	800367c <HAL_GPIO_Init+0x1f8>
 800366e:	2303      	movs	r3, #3
 8003670:	e004      	b.n	800367c <HAL_GPIO_Init+0x1f8>
 8003672:	2302      	movs	r3, #2
 8003674:	e002      	b.n	800367c <HAL_GPIO_Init+0x1f8>
 8003676:	2301      	movs	r3, #1
 8003678:	e000      	b.n	800367c <HAL_GPIO_Init+0x1f8>
 800367a:	2300      	movs	r3, #0
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	2103      	movs	r1, #3
 8003680:	400a      	ands	r2, r1
 8003682:	0092      	lsls	r2, r2, #2
 8003684:	4093      	lsls	r3, r2
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	4313      	orrs	r3, r2
 800368a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800368c:	4935      	ldr	r1, [pc, #212]	; (8003764 <HAL_GPIO_Init+0x2e0>)
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	089b      	lsrs	r3, r3, #2
 8003692:	3302      	adds	r3, #2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800369a:	4b38      	ldr	r3, [pc, #224]	; (800377c <HAL_GPIO_Init+0x2f8>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	43da      	mvns	r2, r3
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	4013      	ands	r3, r2
 80036a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	685a      	ldr	r2, [r3, #4]
 80036ae:	2380      	movs	r3, #128	; 0x80
 80036b0:	025b      	lsls	r3, r3, #9
 80036b2:	4013      	ands	r3, r2
 80036b4:	d003      	beq.n	80036be <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80036be:	4b2f      	ldr	r3, [pc, #188]	; (800377c <HAL_GPIO_Init+0x2f8>)
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80036c4:	4b2d      	ldr	r3, [pc, #180]	; (800377c <HAL_GPIO_Init+0x2f8>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	43da      	mvns	r2, r3
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	4013      	ands	r3, r2
 80036d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	2380      	movs	r3, #128	; 0x80
 80036da:	029b      	lsls	r3, r3, #10
 80036dc:	4013      	ands	r3, r2
 80036de:	d003      	beq.n	80036e8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80036e8:	4b24      	ldr	r3, [pc, #144]	; (800377c <HAL_GPIO_Init+0x2f8>)
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036ee:	4b23      	ldr	r3, [pc, #140]	; (800377c <HAL_GPIO_Init+0x2f8>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	43da      	mvns	r2, r3
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	4013      	ands	r3, r2
 80036fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	2380      	movs	r3, #128	; 0x80
 8003704:	035b      	lsls	r3, r3, #13
 8003706:	4013      	ands	r3, r2
 8003708:	d003      	beq.n	8003712 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	4313      	orrs	r3, r2
 8003710:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003712:	4b1a      	ldr	r3, [pc, #104]	; (800377c <HAL_GPIO_Init+0x2f8>)
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003718:	4b18      	ldr	r3, [pc, #96]	; (800377c <HAL_GPIO_Init+0x2f8>)
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	43da      	mvns	r2, r3
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	4013      	ands	r3, r2
 8003726:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685a      	ldr	r2, [r3, #4]
 800372c:	2380      	movs	r3, #128	; 0x80
 800372e:	039b      	lsls	r3, r3, #14
 8003730:	4013      	ands	r3, r2
 8003732:	d003      	beq.n	800373c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	4313      	orrs	r3, r2
 800373a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800373c:	4b0f      	ldr	r3, [pc, #60]	; (800377c <HAL_GPIO_Init+0x2f8>)
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	3301      	adds	r3, #1
 8003746:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	40da      	lsrs	r2, r3
 8003750:	1e13      	subs	r3, r2, #0
 8003752:	d000      	beq.n	8003756 <HAL_GPIO_Init+0x2d2>
 8003754:	e6a2      	b.n	800349c <HAL_GPIO_Init+0x18>
  }
}
 8003756:	46c0      	nop			; (mov r8, r8)
 8003758:	46bd      	mov	sp, r7
 800375a:	b006      	add	sp, #24
 800375c:	bd80      	pop	{r7, pc}
 800375e:	46c0      	nop			; (mov r8, r8)
 8003760:	40021000 	.word	0x40021000
 8003764:	40010000 	.word	0x40010000
 8003768:	50000400 	.word	0x50000400
 800376c:	50000800 	.word	0x50000800
 8003770:	50000c00 	.word	0x50000c00
 8003774:	50001000 	.word	0x50001000
 8003778:	50001c00 	.word	0x50001c00
 800377c:	40010400 	.word	0x40010400

08003780 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	000a      	movs	r2, r1
 800378a:	1cbb      	adds	r3, r7, #2
 800378c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	1cba      	adds	r2, r7, #2
 8003794:	8812      	ldrh	r2, [r2, #0]
 8003796:	4013      	ands	r3, r2
 8003798:	d004      	beq.n	80037a4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800379a:	230f      	movs	r3, #15
 800379c:	18fb      	adds	r3, r7, r3
 800379e:	2201      	movs	r2, #1
 80037a0:	701a      	strb	r2, [r3, #0]
 80037a2:	e003      	b.n	80037ac <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80037a4:	230f      	movs	r3, #15
 80037a6:	18fb      	adds	r3, r7, r3
 80037a8:	2200      	movs	r2, #0
 80037aa:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80037ac:	230f      	movs	r3, #15
 80037ae:	18fb      	adds	r3, r7, r3
 80037b0:	781b      	ldrb	r3, [r3, #0]
}
 80037b2:	0018      	movs	r0, r3
 80037b4:	46bd      	mov	sp, r7
 80037b6:	b004      	add	sp, #16
 80037b8:	bd80      	pop	{r7, pc}

080037ba <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b082      	sub	sp, #8
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
 80037c2:	0008      	movs	r0, r1
 80037c4:	0011      	movs	r1, r2
 80037c6:	1cbb      	adds	r3, r7, #2
 80037c8:	1c02      	adds	r2, r0, #0
 80037ca:	801a      	strh	r2, [r3, #0]
 80037cc:	1c7b      	adds	r3, r7, #1
 80037ce:	1c0a      	adds	r2, r1, #0
 80037d0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 80037d2:	1c7b      	adds	r3, r7, #1
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d004      	beq.n	80037e4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037da:	1cbb      	adds	r3, r7, #2
 80037dc:	881a      	ldrh	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80037e2:	e003      	b.n	80037ec <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80037e4:	1cbb      	adds	r3, r7, #2
 80037e6:	881a      	ldrh	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80037ec:	46c0      	nop			; (mov r8, r8)
 80037ee:	46bd      	mov	sp, r7
 80037f0:	b002      	add	sp, #8
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	000a      	movs	r2, r1
 80037fe:	1cbb      	adds	r3, r7, #2
 8003800:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	695a      	ldr	r2, [r3, #20]
 8003806:	1cbb      	adds	r3, r7, #2
 8003808:	881b      	ldrh	r3, [r3, #0]
 800380a:	405a      	eors	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	615a      	str	r2, [r3, #20]
}
 8003810:	46c0      	nop			; (mov r8, r8)
 8003812:	46bd      	mov	sp, r7
 8003814:	b002      	add	sp, #8
 8003816:	bd80      	pop	{r7, pc}

08003818 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	0002      	movs	r2, r0
 8003820:	1dbb      	adds	r3, r7, #6
 8003822:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8003824:	4b09      	ldr	r3, [pc, #36]	; (800384c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	1dba      	adds	r2, r7, #6
 800382a:	8812      	ldrh	r2, [r2, #0]
 800382c:	4013      	ands	r3, r2
 800382e:	d008      	beq.n	8003842 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003830:	4b06      	ldr	r3, [pc, #24]	; (800384c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003832:	1dba      	adds	r2, r7, #6
 8003834:	8812      	ldrh	r2, [r2, #0]
 8003836:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003838:	1dbb      	adds	r3, r7, #6
 800383a:	881b      	ldrh	r3, [r3, #0]
 800383c:	0018      	movs	r0, r3
 800383e:	f7fe fb3f 	bl	8001ec0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003842:	46c0      	nop			; (mov r8, r8)
 8003844:	46bd      	mov	sp, r7
 8003846:	b002      	add	sp, #8
 8003848:	bd80      	pop	{r7, pc}
 800384a:	46c0      	nop			; (mov r8, r8)
 800384c:	40010400 	.word	0x40010400

08003850 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e06c      	b.n	800393c <HAL_LPTIM_Init+0xec>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	222e      	movs	r2, #46	; 0x2e
 8003866:	5c9b      	ldrb	r3, [r3, r2]
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d107      	bne.n	800387e <HAL_LPTIM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	222d      	movs	r2, #45	; 0x2d
 8003872:	2100      	movs	r1, #0
 8003874:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	0018      	movs	r0, r3
 800387a:	f7fe febd 	bl	80025f8 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	222e      	movs	r2, #46	; 0x2e
 8003882:	2102      	movs	r1, #2
 8003884:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d005      	beq.n	80038a2 <HAL_LPTIM_Init+0x52>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800389a:	2380      	movs	r3, #128	; 0x80
 800389c:	041b      	lsls	r3, r3, #16
 800389e:	429a      	cmp	r2, r3
 80038a0:	d103      	bne.n	80038aa <HAL_LPTIM_Init+0x5a>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	221e      	movs	r2, #30
 80038a6:	4393      	bics	r3, r2
 80038a8:	60fb      	str	r3, [r7, #12]
  }
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	4a25      	ldr	r2, [pc, #148]	; (8003944 <HAL_LPTIM_Init+0xf4>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d003      	beq.n	80038bc <HAL_LPTIM_Init+0x6c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	4a24      	ldr	r2, [pc, #144]	; (8003948 <HAL_LPTIM_Init+0xf8>)
 80038b8:	4013      	ands	r3, r2
 80038ba:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4a23      	ldr	r2, [pc, #140]	; (800394c <HAL_LPTIM_Init+0xfc>)
 80038c0:	4013      	ands	r3, r2
 80038c2:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80038cc:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80038d2:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 80038d8:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 80038de:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d005      	beq.n	80038fa <HAL_LPTIM_Init+0xaa>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038f2:	2380      	movs	r3, #128	; 0x80
 80038f4:	041b      	lsls	r3, r3, #16
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d107      	bne.n	800390a <HAL_LPTIM_Init+0xba>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8003902:	4313      	orrs	r3, r2
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	4313      	orrs	r3, r2
 8003908:	60fb      	str	r3, [r7, #12]
  }

  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	4a0d      	ldr	r2, [pc, #52]	; (8003944 <HAL_LPTIM_Init+0xf4>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d00a      	beq.n	800392a <HAL_LPTIM_Init+0xda>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800391c:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8003922:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	4313      	orrs	r3, r2
 8003928:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	222e      	movs	r2, #46	; 0x2e
 8003936:	2101      	movs	r1, #1
 8003938:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	0018      	movs	r0, r3
 800393e:	46bd      	mov	sp, r7
 8003940:	b004      	add	sp, #16
 8003942:	bd80      	pop	{r7, pc}
 8003944:	0000ffff 	.word	0x0000ffff
 8003948:	ffff1f3f 	.word	0xffff1f3f
 800394c:	ff19f1f8 	.word	0xff19f1f8

08003950 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	222e      	movs	r2, #46	; 0x2e
 800395e:	2102      	movs	r1, #2
 8003960:	5499      	strb	r1, [r3, r2]

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003962:	4b23      	ldr	r3, [pc, #140]	; (80039f0 <HAL_LPTIM_Counter_Start_IT+0xa0>)
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	4b22      	ldr	r3, [pc, #136]	; (80039f0 <HAL_LPTIM_Counter_Start_IT+0xa0>)
 8003968:	2180      	movs	r1, #128	; 0x80
 800396a:	0589      	lsls	r1, r1, #22
 800396c:	430a      	orrs	r2, r1
 800396e:	601a      	str	r2, [r3, #0]

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM) && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d00d      	beq.n	8003994 <HAL_LPTIM_Counter_Start_IT+0x44>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800397c:	2380      	movs	r3, #128	; 0x80
 800397e:	041b      	lsls	r3, r3, #16
 8003980:	429a      	cmp	r2, r3
 8003982:	d107      	bne.n	8003994 <HAL_LPTIM_Counter_Start_IT+0x44>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68da      	ldr	r2, [r3, #12]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4919      	ldr	r1, [pc, #100]	; (80039f4 <HAL_LPTIM_Counter_Start_IT+0xa4>)
 8003990:	400a      	ands	r2, r1
 8003992:	60da      	str	r2, [r3, #12]
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	689a      	ldr	r2, [r3, #8]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2110      	movs	r1, #16
 80039a0:	430a      	orrs	r2, r1
 80039a2:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689a      	ldr	r2, [r3, #8]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2102      	movs	r1, #2
 80039b0:	430a      	orrs	r2, r1
 80039b2:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	691a      	ldr	r2, [r3, #16]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2101      	movs	r1, #1
 80039c0:	430a      	orrs	r2, r1
 80039c2:	611a      	str	r2, [r3, #16]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	683a      	ldr	r2, [r7, #0]
 80039ca:	619a      	str	r2, [r3, #24]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	691a      	ldr	r2, [r3, #16]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2104      	movs	r1, #4
 80039d8:	430a      	orrs	r2, r1
 80039da:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	222e      	movs	r2, #46	; 0x2e
 80039e0:	2101      	movs	r1, #1
 80039e2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	0018      	movs	r0, r3
 80039e8:	46bd      	mov	sp, r7
 80039ea:	b002      	add	sp, #8
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	46c0      	nop			; (mov r8, r8)
 80039f0:	40010400 	.word	0x40010400
 80039f4:	fffff1ff 	.word	0xfffff1ff

080039f8 <HAL_LPTIM_Counter_Stop_IT>:
  * @brief  Stop the Counter mode in interrupt mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Stop_IT(LPTIM_HandleTypeDef *hlptim)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	222e      	movs	r2, #46	; 0x2e
 8003a04:	2102      	movs	r1, #2
 8003a06:	5499      	strb	r1, [r3, r2]

  /* Disable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_DISABLE_IT();
 8003a08:	4b11      	ldr	r3, [pc, #68]	; (8003a50 <HAL_LPTIM_Counter_Stop_IT+0x58>)
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	4b10      	ldr	r3, [pc, #64]	; (8003a50 <HAL_LPTIM_Counter_Stop_IT+0x58>)
 8003a0e:	4911      	ldr	r1, [pc, #68]	; (8003a54 <HAL_LPTIM_Counter_Stop_IT+0x5c>)
 8003a10:	400a      	ands	r2, r1
 8003a12:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	0018      	movs	r0, r3
 8003a18:	f000 f8f0 	bl	8003bfc <LPTIM_Disable>

  /* Disable Autoreload write complete interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARROK);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	689a      	ldr	r2, [r3, #8]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2110      	movs	r1, #16
 8003a28:	438a      	bics	r2, r1
 8003a2a:	609a      	str	r2, [r3, #8]

  /* Disable Autoreload match interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARRM);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689a      	ldr	r2, [r3, #8]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2102      	movs	r1, #2
 8003a38:	438a      	bics	r2, r1
 8003a3a:	609a      	str	r2, [r3, #8]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	222e      	movs	r2, #46	; 0x2e
 8003a40:	2101      	movs	r1, #1
 8003a42:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	0018      	movs	r0, r3
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	b002      	add	sp, #8
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	46c0      	nop			; (mov r8, r8)
 8003a50:	40010400 	.word	0x40010400
 8003a54:	dfffffff 	.word	0xdfffffff

08003a58 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2201      	movs	r2, #1
 8003a68:	4013      	ands	r3, r2
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d10e      	bne.n	8003a8c <HAL_LPTIM_IRQHandler+0x34>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	2201      	movs	r2, #1
 8003a76:	4013      	ands	r3, r2
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d107      	bne.n	8003a8c <HAL_LPTIM_IRQHandler+0x34>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2201      	movs	r2, #1
 8003a82:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	0018      	movs	r0, r3
 8003a88:	f000 f888 	bl	8003b9c <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2202      	movs	r2, #2
 8003a94:	4013      	ands	r3, r2
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d10e      	bne.n	8003ab8 <HAL_LPTIM_IRQHandler+0x60>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	2202      	movs	r2, #2
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d107      	bne.n	8003ab8 <HAL_LPTIM_IRQHandler+0x60>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2202      	movs	r2, #2
 8003aae:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	0018      	movs	r0, r3
 8003ab4:	f7fe ff5c 	bl	8002970 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2204      	movs	r2, #4
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	2b04      	cmp	r3, #4
 8003ac4:	d10e      	bne.n	8003ae4 <HAL_LPTIM_IRQHandler+0x8c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	2204      	movs	r2, #4
 8003ace:	4013      	ands	r3, r2
 8003ad0:	2b04      	cmp	r3, #4
 8003ad2:	d107      	bne.n	8003ae4 <HAL_LPTIM_IRQHandler+0x8c>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2204      	movs	r2, #4
 8003ada:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	0018      	movs	r0, r3
 8003ae0:	f000 f864 	bl	8003bac <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2208      	movs	r2, #8
 8003aec:	4013      	ands	r3, r2
 8003aee:	2b08      	cmp	r3, #8
 8003af0:	d10e      	bne.n	8003b10 <HAL_LPTIM_IRQHandler+0xb8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	2208      	movs	r2, #8
 8003afa:	4013      	ands	r3, r2
 8003afc:	2b08      	cmp	r3, #8
 8003afe:	d107      	bne.n	8003b10 <HAL_LPTIM_IRQHandler+0xb8>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2208      	movs	r2, #8
 8003b06:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	0018      	movs	r0, r3
 8003b0c:	f000 f856 	bl	8003bbc <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2210      	movs	r2, #16
 8003b18:	4013      	ands	r3, r2
 8003b1a:	2b10      	cmp	r3, #16
 8003b1c:	d10e      	bne.n	8003b3c <HAL_LPTIM_IRQHandler+0xe4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	2210      	movs	r2, #16
 8003b26:	4013      	ands	r3, r2
 8003b28:	2b10      	cmp	r3, #16
 8003b2a:	d107      	bne.n	8003b3c <HAL_LPTIM_IRQHandler+0xe4>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2210      	movs	r2, #16
 8003b32:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	0018      	movs	r0, r3
 8003b38:	f000 f848 	bl	8003bcc <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2220      	movs	r2, #32
 8003b44:	4013      	ands	r3, r2
 8003b46:	2b20      	cmp	r3, #32
 8003b48:	d10e      	bne.n	8003b68 <HAL_LPTIM_IRQHandler+0x110>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	2220      	movs	r2, #32
 8003b52:	4013      	ands	r3, r2
 8003b54:	2b20      	cmp	r3, #32
 8003b56:	d107      	bne.n	8003b68 <HAL_LPTIM_IRQHandler+0x110>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	0018      	movs	r0, r3
 8003b64:	f000 f83a 	bl	8003bdc <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2240      	movs	r2, #64	; 0x40
 8003b70:	4013      	ands	r3, r2
 8003b72:	2b40      	cmp	r3, #64	; 0x40
 8003b74:	d10e      	bne.n	8003b94 <HAL_LPTIM_IRQHandler+0x13c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	2240      	movs	r2, #64	; 0x40
 8003b7e:	4013      	ands	r3, r2
 8003b80:	2b40      	cmp	r3, #64	; 0x40
 8003b82:	d107      	bne.n	8003b94 <HAL_LPTIM_IRQHandler+0x13c>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2240      	movs	r2, #64	; 0x40
 8003b8a:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	0018      	movs	r0, r3
 8003b90:	f000 f82c 	bl	8003bec <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b94:	46c0      	nop			; (mov r8, r8)
 8003b96:	46bd      	mov	sp, r7
 8003b98:	b002      	add	sp, #8
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8003ba4:	46c0      	nop			; (mov r8, r8)
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	b002      	add	sp, #8
 8003baa:	bd80      	pop	{r7, pc}

08003bac <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8003bb4:	46c0      	nop			; (mov r8, r8)
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	b002      	add	sp, #8
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8003bc4:	46c0      	nop			; (mov r8, r8)
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	b002      	add	sp, #8
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8003bd4:	46c0      	nop			; (mov r8, r8)
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	b002      	add	sp, #8
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8003be4:	46c0      	nop			; (mov r8, r8)
 8003be6:	46bd      	mov	sp, r7
 8003be8:	b002      	add	sp, #8
 8003bea:	bd80      	pop	{r7, pc}

08003bec <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8003bf4:	46c0      	nop			; (mov r8, r8)
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	b002      	add	sp, #8
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *lptim)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b08a      	sub	sp, #40	; 0x28
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8003c04:	2300      	movs	r3, #0
 8003c06:	627b      	str	r3, [r7, #36]	; 0x24
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c08:	b672      	cpsid	i

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)lptim->Instance)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	001a      	movs	r2, r3
 8003c10:	4b5e      	ldr	r3, [pc, #376]	; (8003d8c <LPTIM_Disable+0x190>)
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d000      	beq.n	8003c18 <LPTIM_Disable+0x1c>
     case LPTIM2_BASE:
       tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
       break;
#endif /* LPTIM2 */
     default:
       break;
 8003c16:	e006      	b.n	8003c26 <LPTIM_Disable+0x2a>
       tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8003c18:	4b5d      	ldr	r3, [pc, #372]	; (8003d90 <LPTIM_Disable+0x194>)
 8003c1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c1c:	23c0      	movs	r3, #192	; 0xc0
 8003c1e:	031b      	lsls	r3, r3, #12
 8003c20:	4013      	ands	r3, r2
 8003c22:	627b      	str	r3, [r7, #36]	; 0x24
       break;
 8003c24:	46c0      	nop			; (mov r8, r8)
  }

  /* Save LPTIM configuration registers */
  tmpIER = lptim->Instance->IER;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	623b      	str	r3, [r7, #32]
  tmpCFGR = lptim->Instance->CFGR;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	61fb      	str	r3, [r7, #28]
  tmpCMP = lptim->Instance->CMP;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	695b      	ldr	r3, [r3, #20]
 8003c3c:	61bb      	str	r3, [r7, #24]
  tmpARR = lptim->Instance->ARR;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)lptim->Instance)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	001a      	movs	r2, r3
 8003c4c:	4b4f      	ldr	r3, [pc, #316]	; (8003d8c <LPTIM_Disable+0x190>)
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d000      	beq.n	8003c54 <LPTIM_Disable+0x58>
       __HAL_RCC_LPTIM2_FORCE_RESET();
       __HAL_RCC_LPTIM2_RELEASE_RESET();
       break;
#endif /* LPTIM2 */
     default:
       break;
 8003c52:	e00d      	b.n	8003c70 <LPTIM_Disable+0x74>
       __HAL_RCC_LPTIM1_FORCE_RESET();
 8003c54:	4b4e      	ldr	r3, [pc, #312]	; (8003d90 <LPTIM_Disable+0x194>)
 8003c56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c58:	4b4d      	ldr	r3, [pc, #308]	; (8003d90 <LPTIM_Disable+0x194>)
 8003c5a:	2180      	movs	r1, #128	; 0x80
 8003c5c:	0609      	lsls	r1, r1, #24
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	629a      	str	r2, [r3, #40]	; 0x28
       __HAL_RCC_LPTIM1_RELEASE_RESET();
 8003c62:	4b4b      	ldr	r3, [pc, #300]	; (8003d90 <LPTIM_Disable+0x194>)
 8003c64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c66:	4b4a      	ldr	r3, [pc, #296]	; (8003d90 <LPTIM_Disable+0x194>)
 8003c68:	0052      	lsls	r2, r2, #1
 8003c6a:	0852      	lsrs	r2, r2, #1
 8003c6c:	629a      	str	r2, [r3, #40]	; 0x28
       break;
 8003c6e:	46c0      	nop			; (mov r8, r8)

  /*********** Restore LPTIM Config ***********/
  uint32_t Ref_Time;
  uint32_t Time_Elapsed;

  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d103      	bne.n	8003c7e <LPTIM_Disable+0x82>
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d100      	bne.n	8003c7e <LPTIM_Disable+0x82>
 8003c7c:	e070      	b.n	8003d60 <LPTIM_Disable+0x164>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)lptim->Instance)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	001a      	movs	r2, r3
 8003c84:	4b41      	ldr	r3, [pc, #260]	; (8003d8c <LPTIM_Disable+0x190>)
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d000      	beq.n	8003c8c <LPTIM_Disable+0x90>
       case LPTIM2_BASE:
         __HAL_RCC_LPTIM2_CONFIG(0UL);
         break;
#endif /* LPTIM2 */
       default:
         break;
 8003c8a:	e006      	b.n	8003c9a <LPTIM_Disable+0x9e>
         __HAL_RCC_LPTIM1_CONFIG(0UL);
 8003c8c:	4b40      	ldr	r3, [pc, #256]	; (8003d90 <LPTIM_Disable+0x194>)
 8003c8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c90:	4b3f      	ldr	r3, [pc, #252]	; (8003d90 <LPTIM_Disable+0x194>)
 8003c92:	4940      	ldr	r1, [pc, #256]	; (8003d94 <LPTIM_Disable+0x198>)
 8003c94:	400a      	ands	r2, r1
 8003c96:	64da      	str	r2, [r3, #76]	; 0x4c
         break;
 8003c98:	46c0      	nop			; (mov r8, r8)
    }

    if (tmpCMP != 0UL)
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d025      	beq.n	8003cec <LPTIM_Disable+0xf0>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      lptim->Instance->CR |= LPTIM_CR_ENABLE;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	691a      	ldr	r2, [r3, #16]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2101      	movs	r1, #1
 8003cac:	430a      	orrs	r2, r1
 8003cae:	611a      	str	r2, [r3, #16]
      lptim->Instance->CMP = tmpCMP;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	615a      	str	r2, [r3, #20]
      /* Polling on CMP write ok status after above restore operation */
      Ref_Time = HAL_GetTick();
 8003cb8:	f7fe ff42 	bl	8002b40 <HAL_GetTick>
 8003cbc:	0003      	movs	r3, r0
 8003cbe:	613b      	str	r3, [r7, #16]
      do
      {
        Time_Elapsed = HAL_GetTick() - Ref_Time;
 8003cc0:	f7fe ff3e 	bl	8002b40 <HAL_GetTick>
 8003cc4:	0002      	movs	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	60fb      	str	r3, [r7, #12]
      } while ((!(__HAL_LPTIM_GET_FLAG(lptim, LPTIM_FLAG_CMPOK))) && (Time_Elapsed <= TIMEOUT));
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2208      	movs	r2, #8
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	2b08      	cmp	r3, #8
 8003cd8:	d004      	beq.n	8003ce4 <LPTIM_Disable+0xe8>
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	23fa      	movs	r3, #250	; 0xfa
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d9ed      	bls.n	8003cc0 <LPTIM_Disable+0xc4>

      __HAL_LPTIM_CLEAR_FLAG(lptim, LPTIM_FLAG_CMPOK);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2208      	movs	r2, #8
 8003cea:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d025      	beq.n	8003d3e <LPTIM_Disable+0x142>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      lptim->Instance->CR |= LPTIM_CR_ENABLE;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	691a      	ldr	r2, [r3, #16]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2101      	movs	r1, #1
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	611a      	str	r2, [r3, #16]
      lptim->Instance->ARR = tmpARR;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	619a      	str	r2, [r3, #24]
      /* Polling on ARR write ok status after above restore operation */
      Ref_Time = HAL_GetTick();
 8003d0a:	f7fe ff19 	bl	8002b40 <HAL_GetTick>
 8003d0e:	0003      	movs	r3, r0
 8003d10:	613b      	str	r3, [r7, #16]
      do
      {
        Time_Elapsed = HAL_GetTick() - Ref_Time;
 8003d12:	f7fe ff15 	bl	8002b40 <HAL_GetTick>
 8003d16:	0002      	movs	r2, r0
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	60fb      	str	r3, [r7, #12]
      } while ((!(__HAL_LPTIM_GET_FLAG(lptim, LPTIM_FLAG_ARROK))) && (Time_Elapsed <= TIMEOUT));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2210      	movs	r2, #16
 8003d26:	4013      	ands	r3, r2
 8003d28:	2b10      	cmp	r3, #16
 8003d2a:	d004      	beq.n	8003d36 <LPTIM_Disable+0x13a>
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	23fa      	movs	r3, #250	; 0xfa
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d9ed      	bls.n	8003d12 <LPTIM_Disable+0x116>

      __HAL_LPTIM_CLEAR_FLAG(lptim, LPTIM_FLAG_ARROK);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2210      	movs	r2, #16
 8003d3c:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)lptim->Instance)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	001a      	movs	r2, r3
 8003d44:	4b11      	ldr	r3, [pc, #68]	; (8003d8c <LPTIM_Disable+0x190>)
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d000      	beq.n	8003d4c <LPTIM_Disable+0x150>
       case LPTIM2_BASE:
         __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
         break;
#endif /* LPTIM2 */
       default:
         break;
 8003d4a:	e00a      	b.n	8003d62 <LPTIM_Disable+0x166>
         __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8003d4c:	4b10      	ldr	r3, [pc, #64]	; (8003d90 <LPTIM_Disable+0x194>)
 8003d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d50:	4a10      	ldr	r2, [pc, #64]	; (8003d94 <LPTIM_Disable+0x198>)
 8003d52:	4013      	ands	r3, r2
 8003d54:	0019      	movs	r1, r3
 8003d56:	4b0e      	ldr	r3, [pc, #56]	; (8003d90 <LPTIM_Disable+0x194>)
 8003d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	64da      	str	r2, [r3, #76]	; 0x4c
         break;
 8003d5e:	e000      	b.n	8003d62 <LPTIM_Disable+0x166>
    }
  }
 8003d60:	46c0      	nop			; (mov r8, r8)

  /* Restore configuration registers (LPTIM should be disabled first) */
  lptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	691a      	ldr	r2, [r3, #16]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	438a      	bics	r2, r1
 8003d70:	611a      	str	r2, [r3, #16]
  lptim->Instance->IER = tmpIER;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	6a3a      	ldr	r2, [r7, #32]
 8003d78:	609a      	str	r2, [r3, #8]
  lptim->Instance->CFGR = tmpCFGR;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	69fa      	ldr	r2, [r7, #28]
 8003d80:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8003d82:	b662      	cpsie	i

  __enable_irq();
}
 8003d84:	46c0      	nop			; (mov r8, r8)
 8003d86:	46bd      	mov	sp, r7
 8003d88:	b00a      	add	sp, #40	; 0x28
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	40007c00 	.word	0x40007c00
 8003d90:	40021000 	.word	0x40021000
 8003d94:	fff3ffff 	.word	0xfff3ffff

08003d98 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d9c:	4b04      	ldr	r3, [pc, #16]	; (8003db0 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	4b03      	ldr	r3, [pc, #12]	; (8003db0 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003da2:	2180      	movs	r1, #128	; 0x80
 8003da4:	0049      	lsls	r1, r1, #1
 8003da6:	430a      	orrs	r2, r1
 8003da8:	601a      	str	r2, [r3, #0]
}
 8003daa:	46c0      	nop			; (mov r8, r8)
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	40007000 	.word	0x40007000

08003db4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003db4:	b5b0      	push	{r4, r5, r7, lr}
 8003db6:	b08a      	sub	sp, #40	; 0x28
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d102      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	f000 fbbc 	bl	8004540 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dc8:	4bc8      	ldr	r3, [pc, #800]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	220c      	movs	r2, #12
 8003dce:	4013      	ands	r3, r2
 8003dd0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dd2:	4bc6      	ldr	r3, [pc, #792]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003dd4:	68da      	ldr	r2, [r3, #12]
 8003dd6:	2380      	movs	r3, #128	; 0x80
 8003dd8:	025b      	lsls	r3, r3, #9
 8003dda:	4013      	ands	r3, r2
 8003ddc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2201      	movs	r2, #1
 8003de4:	4013      	ands	r3, r2
 8003de6:	d100      	bne.n	8003dea <HAL_RCC_OscConfig+0x36>
 8003de8:	e07e      	b.n	8003ee8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	2b08      	cmp	r3, #8
 8003dee:	d007      	beq.n	8003e00 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	2b0c      	cmp	r3, #12
 8003df4:	d112      	bne.n	8003e1c <HAL_RCC_OscConfig+0x68>
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	2380      	movs	r3, #128	; 0x80
 8003dfa:	025b      	lsls	r3, r3, #9
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d10d      	bne.n	8003e1c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e00:	4bba      	ldr	r3, [pc, #744]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	2380      	movs	r3, #128	; 0x80
 8003e06:	029b      	lsls	r3, r3, #10
 8003e08:	4013      	ands	r3, r2
 8003e0a:	d100      	bne.n	8003e0e <HAL_RCC_OscConfig+0x5a>
 8003e0c:	e06b      	b.n	8003ee6 <HAL_RCC_OscConfig+0x132>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d167      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	f000 fb92 	bl	8004540 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	2380      	movs	r3, #128	; 0x80
 8003e22:	025b      	lsls	r3, r3, #9
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d107      	bne.n	8003e38 <HAL_RCC_OscConfig+0x84>
 8003e28:	4bb0      	ldr	r3, [pc, #704]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	4baf      	ldr	r3, [pc, #700]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003e2e:	2180      	movs	r1, #128	; 0x80
 8003e30:	0249      	lsls	r1, r1, #9
 8003e32:	430a      	orrs	r2, r1
 8003e34:	601a      	str	r2, [r3, #0]
 8003e36:	e027      	b.n	8003e88 <HAL_RCC_OscConfig+0xd4>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685a      	ldr	r2, [r3, #4]
 8003e3c:	23a0      	movs	r3, #160	; 0xa0
 8003e3e:	02db      	lsls	r3, r3, #11
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d10e      	bne.n	8003e62 <HAL_RCC_OscConfig+0xae>
 8003e44:	4ba9      	ldr	r3, [pc, #676]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	4ba8      	ldr	r3, [pc, #672]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003e4a:	2180      	movs	r1, #128	; 0x80
 8003e4c:	02c9      	lsls	r1, r1, #11
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	601a      	str	r2, [r3, #0]
 8003e52:	4ba6      	ldr	r3, [pc, #664]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	4ba5      	ldr	r3, [pc, #660]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003e58:	2180      	movs	r1, #128	; 0x80
 8003e5a:	0249      	lsls	r1, r1, #9
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	601a      	str	r2, [r3, #0]
 8003e60:	e012      	b.n	8003e88 <HAL_RCC_OscConfig+0xd4>
 8003e62:	4ba2      	ldr	r3, [pc, #648]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	4ba1      	ldr	r3, [pc, #644]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003e68:	49a1      	ldr	r1, [pc, #644]	; (80040f0 <HAL_RCC_OscConfig+0x33c>)
 8003e6a:	400a      	ands	r2, r1
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	4b9f      	ldr	r3, [pc, #636]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	2380      	movs	r3, #128	; 0x80
 8003e74:	025b      	lsls	r3, r3, #9
 8003e76:	4013      	ands	r3, r2
 8003e78:	60fb      	str	r3, [r7, #12]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	4b9b      	ldr	r3, [pc, #620]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	4b9a      	ldr	r3, [pc, #616]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003e82:	499c      	ldr	r1, [pc, #624]	; (80040f4 <HAL_RCC_OscConfig+0x340>)
 8003e84:	400a      	ands	r2, r1
 8003e86:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d015      	beq.n	8003ebc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e90:	f7fe fe56 	bl	8002b40 <HAL_GetTick>
 8003e94:	0003      	movs	r3, r0
 8003e96:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e98:	e009      	b.n	8003eae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e9a:	f7fe fe51 	bl	8002b40 <HAL_GetTick>
 8003e9e:	0002      	movs	r2, r0
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	2b64      	cmp	r3, #100	; 0x64
 8003ea6:	d902      	bls.n	8003eae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	f000 fb49 	bl	8004540 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003eae:	4b8f      	ldr	r3, [pc, #572]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	2380      	movs	r3, #128	; 0x80
 8003eb4:	029b      	lsls	r3, r3, #10
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	d0ef      	beq.n	8003e9a <HAL_RCC_OscConfig+0xe6>
 8003eba:	e015      	b.n	8003ee8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ebc:	f7fe fe40 	bl	8002b40 <HAL_GetTick>
 8003ec0:	0003      	movs	r3, r0
 8003ec2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ec4:	e008      	b.n	8003ed8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ec6:	f7fe fe3b 	bl	8002b40 <HAL_GetTick>
 8003eca:	0002      	movs	r2, r0
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	2b64      	cmp	r3, #100	; 0x64
 8003ed2:	d901      	bls.n	8003ed8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e333      	b.n	8004540 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ed8:	4b84      	ldr	r3, [pc, #528]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	2380      	movs	r3, #128	; 0x80
 8003ede:	029b      	lsls	r3, r3, #10
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	d1f0      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x112>
 8003ee4:	e000      	b.n	8003ee8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ee6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2202      	movs	r2, #2
 8003eee:	4013      	ands	r3, r2
 8003ef0:	d100      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x140>
 8003ef2:	e098      	b.n	8004026 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	2220      	movs	r2, #32
 8003efe:	4013      	ands	r3, r2
 8003f00:	d009      	beq.n	8003f16 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003f02:	4b7a      	ldr	r3, [pc, #488]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	4b79      	ldr	r3, [pc, #484]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003f08:	2120      	movs	r1, #32
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f10:	2220      	movs	r2, #32
 8003f12:	4393      	bics	r3, r2
 8003f14:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	2b04      	cmp	r3, #4
 8003f1a:	d005      	beq.n	8003f28 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	2b0c      	cmp	r3, #12
 8003f20:	d13d      	bne.n	8003f9e <HAL_RCC_OscConfig+0x1ea>
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d13a      	bne.n	8003f9e <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003f28:	4b70      	ldr	r3, [pc, #448]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2204      	movs	r2, #4
 8003f2e:	4013      	ands	r3, r2
 8003f30:	d004      	beq.n	8003f3c <HAL_RCC_OscConfig+0x188>
 8003f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d101      	bne.n	8003f3c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e301      	b.n	8004540 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f3c:	4b6b      	ldr	r3, [pc, #428]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	4a6d      	ldr	r2, [pc, #436]	; (80040f8 <HAL_RCC_OscConfig+0x344>)
 8003f42:	4013      	ands	r3, r2
 8003f44:	0019      	movs	r1, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	021a      	lsls	r2, r3, #8
 8003f4c:	4b67      	ldr	r3, [pc, #412]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003f52:	4b66      	ldr	r3, [pc, #408]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2209      	movs	r2, #9
 8003f58:	4393      	bics	r3, r2
 8003f5a:	0019      	movs	r1, r3
 8003f5c:	4b63      	ldr	r3, [pc, #396]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f60:	430a      	orrs	r2, r1
 8003f62:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f64:	f000 fc20 	bl	80047a8 <HAL_RCC_GetSysClockFreq>
 8003f68:	0001      	movs	r1, r0
 8003f6a:	4b60      	ldr	r3, [pc, #384]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	091b      	lsrs	r3, r3, #4
 8003f70:	220f      	movs	r2, #15
 8003f72:	4013      	ands	r3, r2
 8003f74:	4a61      	ldr	r2, [pc, #388]	; (80040fc <HAL_RCC_OscConfig+0x348>)
 8003f76:	5cd3      	ldrb	r3, [r2, r3]
 8003f78:	000a      	movs	r2, r1
 8003f7a:	40da      	lsrs	r2, r3
 8003f7c:	4b60      	ldr	r3, [pc, #384]	; (8004100 <HAL_RCC_OscConfig+0x34c>)
 8003f7e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8003f80:	2513      	movs	r5, #19
 8003f82:	197c      	adds	r4, r7, r5
 8003f84:	2000      	movs	r0, #0
 8003f86:	f7fe fda5 	bl	8002ad4 <HAL_InitTick>
 8003f8a:	0003      	movs	r3, r0
 8003f8c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003f8e:	197b      	adds	r3, r7, r5
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d047      	beq.n	8004026 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8003f96:	2313      	movs	r3, #19
 8003f98:	18fb      	adds	r3, r7, r3
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	e2d0      	b.n	8004540 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d027      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003fa4:	4b51      	ldr	r3, [pc, #324]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2209      	movs	r2, #9
 8003faa:	4393      	bics	r3, r2
 8003fac:	0019      	movs	r1, r3
 8003fae:	4b4f      	ldr	r3, [pc, #316]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb6:	f7fe fdc3 	bl	8002b40 <HAL_GetTick>
 8003fba:	0003      	movs	r3, r0
 8003fbc:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fbe:	e008      	b.n	8003fd2 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fc0:	f7fe fdbe 	bl	8002b40 <HAL_GetTick>
 8003fc4:	0002      	movs	r2, r0
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e2b6      	b.n	8004540 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fd2:	4b46      	ldr	r3, [pc, #280]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2204      	movs	r2, #4
 8003fd8:	4013      	ands	r3, r2
 8003fda:	d0f1      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fdc:	4b43      	ldr	r3, [pc, #268]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	4a45      	ldr	r2, [pc, #276]	; (80040f8 <HAL_RCC_OscConfig+0x344>)
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	0019      	movs	r1, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	021a      	lsls	r2, r3, #8
 8003fec:	4b3f      	ldr	r3, [pc, #252]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	605a      	str	r2, [r3, #4]
 8003ff2:	e018      	b.n	8004026 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ff4:	4b3d      	ldr	r3, [pc, #244]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	4b3c      	ldr	r3, [pc, #240]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8003ffa:	2101      	movs	r1, #1
 8003ffc:	438a      	bics	r2, r1
 8003ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004000:	f7fe fd9e 	bl	8002b40 <HAL_GetTick>
 8004004:	0003      	movs	r3, r0
 8004006:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004008:	e008      	b.n	800401c <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800400a:	f7fe fd99 	bl	8002b40 <HAL_GetTick>
 800400e:	0002      	movs	r2, r0
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	2b02      	cmp	r3, #2
 8004016:	d901      	bls.n	800401c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e291      	b.n	8004540 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800401c:	4b33      	ldr	r3, [pc, #204]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2204      	movs	r2, #4
 8004022:	4013      	ands	r3, r2
 8004024:	d1f1      	bne.n	800400a <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2210      	movs	r2, #16
 800402c:	4013      	ands	r3, r2
 800402e:	d100      	bne.n	8004032 <HAL_RCC_OscConfig+0x27e>
 8004030:	e09f      	b.n	8004172 <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d13f      	bne.n	80040b8 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004038:	4b2c      	ldr	r3, [pc, #176]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	2380      	movs	r3, #128	; 0x80
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	4013      	ands	r3, r2
 8004042:	d005      	beq.n	8004050 <HAL_RCC_OscConfig+0x29c>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	69db      	ldr	r3, [r3, #28]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d101      	bne.n	8004050 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e277      	b.n	8004540 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004050:	4b26      	ldr	r3, [pc, #152]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	4a2b      	ldr	r2, [pc, #172]	; (8004104 <HAL_RCC_OscConfig+0x350>)
 8004056:	4013      	ands	r3, r2
 8004058:	0019      	movs	r1, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800405e:	4b23      	ldr	r3, [pc, #140]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8004060:	430a      	orrs	r2, r1
 8004062:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004064:	4b21      	ldr	r3, [pc, #132]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	021b      	lsls	r3, r3, #8
 800406a:	0a19      	lsrs	r1, r3, #8
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a1b      	ldr	r3, [r3, #32]
 8004070:	061a      	lsls	r2, r3, #24
 8004072:	4b1e      	ldr	r3, [pc, #120]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8004074:	430a      	orrs	r2, r1
 8004076:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407c:	0b5b      	lsrs	r3, r3, #13
 800407e:	3301      	adds	r3, #1
 8004080:	2280      	movs	r2, #128	; 0x80
 8004082:	0212      	lsls	r2, r2, #8
 8004084:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004086:	4b19      	ldr	r3, [pc, #100]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	091b      	lsrs	r3, r3, #4
 800408c:	210f      	movs	r1, #15
 800408e:	400b      	ands	r3, r1
 8004090:	491a      	ldr	r1, [pc, #104]	; (80040fc <HAL_RCC_OscConfig+0x348>)
 8004092:	5ccb      	ldrb	r3, [r1, r3]
 8004094:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004096:	4b1a      	ldr	r3, [pc, #104]	; (8004100 <HAL_RCC_OscConfig+0x34c>)
 8004098:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 800409a:	2513      	movs	r5, #19
 800409c:	197c      	adds	r4, r7, r5
 800409e:	2000      	movs	r0, #0
 80040a0:	f7fe fd18 	bl	8002ad4 <HAL_InitTick>
 80040a4:	0003      	movs	r3, r0
 80040a6:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80040a8:	197b      	adds	r3, r7, r5
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d060      	beq.n	8004172 <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 80040b0:	2313      	movs	r3, #19
 80040b2:	18fb      	adds	r3, r7, r3
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	e243      	b.n	8004540 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	69db      	ldr	r3, [r3, #28]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d03e      	beq.n	800413e <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80040c0:	4b0a      	ldr	r3, [pc, #40]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	4b09      	ldr	r3, [pc, #36]	; (80040ec <HAL_RCC_OscConfig+0x338>)
 80040c6:	2180      	movs	r1, #128	; 0x80
 80040c8:	0049      	lsls	r1, r1, #1
 80040ca:	430a      	orrs	r2, r1
 80040cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ce:	f7fe fd37 	bl	8002b40 <HAL_GetTick>
 80040d2:	0003      	movs	r3, r0
 80040d4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80040d6:	e017      	b.n	8004108 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040d8:	f7fe fd32 	bl	8002b40 <HAL_GetTick>
 80040dc:	0002      	movs	r2, r0
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d910      	bls.n	8004108 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e22a      	b.n	8004540 <HAL_RCC_OscConfig+0x78c>
 80040ea:	46c0      	nop			; (mov r8, r8)
 80040ec:	40021000 	.word	0x40021000
 80040f0:	fffeffff 	.word	0xfffeffff
 80040f4:	fffbffff 	.word	0xfffbffff
 80040f8:	ffffe0ff 	.word	0xffffe0ff
 80040fc:	08006edc 	.word	0x08006edc
 8004100:	20000000 	.word	0x20000000
 8004104:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004108:	4bc6      	ldr	r3, [pc, #792]	; (8004424 <HAL_RCC_OscConfig+0x670>)
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	2380      	movs	r3, #128	; 0x80
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4013      	ands	r3, r2
 8004112:	d0e1      	beq.n	80040d8 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004114:	4bc3      	ldr	r3, [pc, #780]	; (8004424 <HAL_RCC_OscConfig+0x670>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	4ac3      	ldr	r2, [pc, #780]	; (8004428 <HAL_RCC_OscConfig+0x674>)
 800411a:	4013      	ands	r3, r2
 800411c:	0019      	movs	r1, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004122:	4bc0      	ldr	r3, [pc, #768]	; (8004424 <HAL_RCC_OscConfig+0x670>)
 8004124:	430a      	orrs	r2, r1
 8004126:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004128:	4bbe      	ldr	r3, [pc, #760]	; (8004424 <HAL_RCC_OscConfig+0x670>)
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	021b      	lsls	r3, r3, #8
 800412e:	0a19      	lsrs	r1, r3, #8
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a1b      	ldr	r3, [r3, #32]
 8004134:	061a      	lsls	r2, r3, #24
 8004136:	4bbb      	ldr	r3, [pc, #748]	; (8004424 <HAL_RCC_OscConfig+0x670>)
 8004138:	430a      	orrs	r2, r1
 800413a:	605a      	str	r2, [r3, #4]
 800413c:	e019      	b.n	8004172 <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800413e:	4bb9      	ldr	r3, [pc, #740]	; (8004424 <HAL_RCC_OscConfig+0x670>)
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	4bb8      	ldr	r3, [pc, #736]	; (8004424 <HAL_RCC_OscConfig+0x670>)
 8004144:	49b9      	ldr	r1, [pc, #740]	; (800442c <HAL_RCC_OscConfig+0x678>)
 8004146:	400a      	ands	r2, r1
 8004148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800414a:	f7fe fcf9 	bl	8002b40 <HAL_GetTick>
 800414e:	0003      	movs	r3, r0
 8004150:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004152:	e008      	b.n	8004166 <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004154:	f7fe fcf4 	bl	8002b40 <HAL_GetTick>
 8004158:	0002      	movs	r2, r0
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b02      	cmp	r3, #2
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e1ec      	b.n	8004540 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004166:	4baf      	ldr	r3, [pc, #700]	; (8004424 <HAL_RCC_OscConfig+0x670>)
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	2380      	movs	r3, #128	; 0x80
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	4013      	ands	r3, r2
 8004170:	d1f0      	bne.n	8004154 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2208      	movs	r2, #8
 8004178:	4013      	ands	r3, r2
 800417a:	d036      	beq.n	80041ea <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d019      	beq.n	80041b8 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004184:	4ba7      	ldr	r3, [pc, #668]	; (8004424 <HAL_RCC_OscConfig+0x670>)
 8004186:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004188:	4ba6      	ldr	r3, [pc, #664]	; (8004424 <HAL_RCC_OscConfig+0x670>)
 800418a:	2101      	movs	r1, #1
 800418c:	430a      	orrs	r2, r1
 800418e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004190:	f7fe fcd6 	bl	8002b40 <HAL_GetTick>
 8004194:	0003      	movs	r3, r0
 8004196:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004198:	e008      	b.n	80041ac <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800419a:	f7fe fcd1 	bl	8002b40 <HAL_GetTick>
 800419e:	0002      	movs	r2, r0
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d901      	bls.n	80041ac <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e1c9      	b.n	8004540 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80041ac:	4b9d      	ldr	r3, [pc, #628]	; (8004424 <HAL_RCC_OscConfig+0x670>)
 80041ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041b0:	2202      	movs	r2, #2
 80041b2:	4013      	ands	r3, r2
 80041b4:	d0f1      	beq.n	800419a <HAL_RCC_OscConfig+0x3e6>
 80041b6:	e018      	b.n	80041ea <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041b8:	4b9a      	ldr	r3, [pc, #616]	; (8004424 <HAL_RCC_OscConfig+0x670>)
 80041ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80041bc:	4b99      	ldr	r3, [pc, #612]	; (8004424 <HAL_RCC_OscConfig+0x670>)
 80041be:	2101      	movs	r1, #1
 80041c0:	438a      	bics	r2, r1
 80041c2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041c4:	f7fe fcbc 	bl	8002b40 <HAL_GetTick>
 80041c8:	0003      	movs	r3, r0
 80041ca:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80041cc:	e008      	b.n	80041e0 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041ce:	f7fe fcb7 	bl	8002b40 <HAL_GetTick>
 80041d2:	0002      	movs	r2, r0
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d901      	bls.n	80041e0 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e1af      	b.n	8004540 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80041e0:	4b90      	ldr	r3, [pc, #576]	; (8004424 <HAL_RCC_OscConfig+0x670>)
 80041e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041e4:	2202      	movs	r2, #2
 80041e6:	4013      	ands	r3, r2
 80041e8:	d1f1      	bne.n	80041ce <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2204      	movs	r2, #4
 80041f0:	4013      	ands	r3, r2
 80041f2:	d100      	bne.n	80041f6 <HAL_RCC_OscConfig+0x442>
 80041f4:	e0af      	b.n	8004356 <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041f6:	2323      	movs	r3, #35	; 0x23
 80041f8:	18fb      	adds	r3, r7, r3
 80041fa:	2200      	movs	r2, #0
 80041fc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041fe:	4b89      	ldr	r3, [pc, #548]	; (8004424 <HAL_RCC_OscConfig+0x670>)
 8004200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004202:	2380      	movs	r3, #128	; 0x80
 8004204:	055b      	lsls	r3, r3, #21
 8004206:	4013      	ands	r3, r2
 8004208:	d10a      	bne.n	8004220 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800420a:	4b86      	ldr	r3, [pc, #536]	; (8004424 <HAL_RCC_OscConfig+0x670>)
 800420c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800420e:	4b85      	ldr	r3, [pc, #532]	; (8004424 <HAL_RCC_OscConfig+0x670>)
 8004210:	2180      	movs	r1, #128	; 0x80
 8004212:	0549      	lsls	r1, r1, #21
 8004214:	430a      	orrs	r2, r1
 8004216:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004218:	2323      	movs	r3, #35	; 0x23
 800421a:	18fb      	adds	r3, r7, r3
 800421c:	2201      	movs	r2, #1
 800421e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004220:	4b83      	ldr	r3, [pc, #524]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	2380      	movs	r3, #128	; 0x80
 8004226:	005b      	lsls	r3, r3, #1
 8004228:	4013      	ands	r3, r2
 800422a:	d11a      	bne.n	8004262 <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800422c:	4b80      	ldr	r3, [pc, #512]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	4b7f      	ldr	r3, [pc, #508]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 8004232:	2180      	movs	r1, #128	; 0x80
 8004234:	0049      	lsls	r1, r1, #1
 8004236:	430a      	orrs	r2, r1
 8004238:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800423a:	f7fe fc81 	bl	8002b40 <HAL_GetTick>
 800423e:	0003      	movs	r3, r0
 8004240:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004242:	e008      	b.n	8004256 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004244:	f7fe fc7c 	bl	8002b40 <HAL_GetTick>
 8004248:	0002      	movs	r2, r0
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b64      	cmp	r3, #100	; 0x64
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e174      	b.n	8004540 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004256:	4b76      	ldr	r3, [pc, #472]	; (8004430 <HAL_RCC_OscConfig+0x67c>)
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	2380      	movs	r3, #128	; 0x80
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	4013      	ands	r3, r2
 8004260:	d0f0      	beq.n	8004244 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	689a      	ldr	r2, [r3, #8]
 8004266:	2380      	movs	r3, #128	; 0x80
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	429a      	cmp	r2, r3
 800426c:	d107      	bne.n	800427e <HAL_RCC_OscConfig+0x4ca>
 800426e:	4b6d      	ldr	r3, [pc, #436]	; (8004424 <HAL_RCC_OscConfig+0x670>)
 8004270:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004272:	4b6c      	ldr	r3, [pc, #432]	; (8004424 <HAL_RCC_OscConfig+0x670>)
 8004274:	2180      	movs	r1, #128	; 0x80
 8004276:	0049      	lsls	r1, r1, #1
 8004278:	430a      	orrs	r2, r1
 800427a:	651a      	str	r2, [r3, #80]	; 0x50
 800427c:	e031      	b.n	80042e2 <HAL_RCC_OscConfig+0x52e>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10c      	bne.n	80042a0 <HAL_RCC_OscConfig+0x4ec>
 8004286:	4b67      	ldr	r3, [pc, #412]	; (8004424 <HAL_RCC_OscConfig+0x670>)
 8004288:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800428a:	4b66      	ldr	r3, [pc, #408]	; (8004424 <HAL_RCC_OscConfig+0x670>)
 800428c:	4967      	ldr	r1, [pc, #412]	; (800442c <HAL_RCC_OscConfig+0x678>)
 800428e:	400a      	ands	r2, r1
 8004290:	651a      	str	r2, [r3, #80]	; 0x50
 8004292:	4b64      	ldr	r3, [pc, #400]	; (8004424 <HAL_RCC_OscConfig+0x670>)
 8004294:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004296:	4b63      	ldr	r3, [pc, #396]	; (8004424 <HAL_RCC_OscConfig+0x670>)
 8004298:	4966      	ldr	r1, [pc, #408]	; (8004434 <HAL_RCC_OscConfig+0x680>)
 800429a:	400a      	ands	r2, r1
 800429c:	651a      	str	r2, [r3, #80]	; 0x50
 800429e:	e020      	b.n	80042e2 <HAL_RCC_OscConfig+0x52e>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	689a      	ldr	r2, [r3, #8]
 80042a4:	23a0      	movs	r3, #160	; 0xa0
 80042a6:	00db      	lsls	r3, r3, #3
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d10e      	bne.n	80042ca <HAL_RCC_OscConfig+0x516>
 80042ac:	4b5d      	ldr	r3, [pc, #372]	; (8004424 <HAL_RCC_OscConfig+0x670>)
 80042ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042b0:	4b5c      	ldr	r3, [pc, #368]	; (8004424 <HAL_RCC_OscConfig+0x670>)
 80042b2:	2180      	movs	r1, #128	; 0x80
 80042b4:	00c9      	lsls	r1, r1, #3
 80042b6:	430a      	orrs	r2, r1
 80042b8:	651a      	str	r2, [r3, #80]	; 0x50
 80042ba:	4b5a      	ldr	r3, [pc, #360]	; (8004424 <HAL_RCC_OscConfig+0x670>)
 80042bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042be:	4b59      	ldr	r3, [pc, #356]	; (8004424 <HAL_RCC_OscConfig+0x670>)
 80042c0:	2180      	movs	r1, #128	; 0x80
 80042c2:	0049      	lsls	r1, r1, #1
 80042c4:	430a      	orrs	r2, r1
 80042c6:	651a      	str	r2, [r3, #80]	; 0x50
 80042c8:	e00b      	b.n	80042e2 <HAL_RCC_OscConfig+0x52e>
 80042ca:	4b56      	ldr	r3, [pc, #344]	; (8004424 <HAL_RCC_OscConfig+0x670>)
 80042cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042ce:	4b55      	ldr	r3, [pc, #340]	; (8004424 <HAL_RCC_OscConfig+0x670>)
 80042d0:	4956      	ldr	r1, [pc, #344]	; (800442c <HAL_RCC_OscConfig+0x678>)
 80042d2:	400a      	ands	r2, r1
 80042d4:	651a      	str	r2, [r3, #80]	; 0x50
 80042d6:	4b53      	ldr	r3, [pc, #332]	; (8004424 <HAL_RCC_OscConfig+0x670>)
 80042d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042da:	4b52      	ldr	r3, [pc, #328]	; (8004424 <HAL_RCC_OscConfig+0x670>)
 80042dc:	4955      	ldr	r1, [pc, #340]	; (8004434 <HAL_RCC_OscConfig+0x680>)
 80042de:	400a      	ands	r2, r1
 80042e0:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d015      	beq.n	8004316 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ea:	f7fe fc29 	bl	8002b40 <HAL_GetTick>
 80042ee:	0003      	movs	r3, r0
 80042f0:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042f2:	e009      	b.n	8004308 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042f4:	f7fe fc24 	bl	8002b40 <HAL_GetTick>
 80042f8:	0002      	movs	r2, r0
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	4a4e      	ldr	r2, [pc, #312]	; (8004438 <HAL_RCC_OscConfig+0x684>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d901      	bls.n	8004308 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e11b      	b.n	8004540 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004308:	4b46      	ldr	r3, [pc, #280]	; (8004424 <HAL_RCC_OscConfig+0x670>)
 800430a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800430c:	2380      	movs	r3, #128	; 0x80
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	4013      	ands	r3, r2
 8004312:	d0ef      	beq.n	80042f4 <HAL_RCC_OscConfig+0x540>
 8004314:	e014      	b.n	8004340 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004316:	f7fe fc13 	bl	8002b40 <HAL_GetTick>
 800431a:	0003      	movs	r3, r0
 800431c:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800431e:	e009      	b.n	8004334 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004320:	f7fe fc0e 	bl	8002b40 <HAL_GetTick>
 8004324:	0002      	movs	r2, r0
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	4a43      	ldr	r2, [pc, #268]	; (8004438 <HAL_RCC_OscConfig+0x684>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d901      	bls.n	8004334 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e105      	b.n	8004540 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004334:	4b3b      	ldr	r3, [pc, #236]	; (8004424 <HAL_RCC_OscConfig+0x670>)
 8004336:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004338:	2380      	movs	r3, #128	; 0x80
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	4013      	ands	r3, r2
 800433e:	d1ef      	bne.n	8004320 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004340:	2323      	movs	r3, #35	; 0x23
 8004342:	18fb      	adds	r3, r7, r3
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d105      	bne.n	8004356 <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800434a:	4b36      	ldr	r3, [pc, #216]	; (8004424 <HAL_RCC_OscConfig+0x670>)
 800434c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800434e:	4b35      	ldr	r3, [pc, #212]	; (8004424 <HAL_RCC_OscConfig+0x670>)
 8004350:	493a      	ldr	r1, [pc, #232]	; (800443c <HAL_RCC_OscConfig+0x688>)
 8004352:	400a      	ands	r2, r1
 8004354:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2220      	movs	r2, #32
 800435c:	4013      	ands	r3, r2
 800435e:	d049      	beq.n	80043f4 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d026      	beq.n	80043b6 <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004368:	4b2e      	ldr	r3, [pc, #184]	; (8004424 <HAL_RCC_OscConfig+0x670>)
 800436a:	689a      	ldr	r2, [r3, #8]
 800436c:	4b2d      	ldr	r3, [pc, #180]	; (8004424 <HAL_RCC_OscConfig+0x670>)
 800436e:	2101      	movs	r1, #1
 8004370:	430a      	orrs	r2, r1
 8004372:	609a      	str	r2, [r3, #8]
 8004374:	4b2b      	ldr	r3, [pc, #172]	; (8004424 <HAL_RCC_OscConfig+0x670>)
 8004376:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004378:	4b2a      	ldr	r3, [pc, #168]	; (8004424 <HAL_RCC_OscConfig+0x670>)
 800437a:	2101      	movs	r1, #1
 800437c:	430a      	orrs	r2, r1
 800437e:	635a      	str	r2, [r3, #52]	; 0x34
 8004380:	4b2f      	ldr	r3, [pc, #188]	; (8004440 <HAL_RCC_OscConfig+0x68c>)
 8004382:	6a1a      	ldr	r2, [r3, #32]
 8004384:	4b2e      	ldr	r3, [pc, #184]	; (8004440 <HAL_RCC_OscConfig+0x68c>)
 8004386:	2180      	movs	r1, #128	; 0x80
 8004388:	0189      	lsls	r1, r1, #6
 800438a:	430a      	orrs	r2, r1
 800438c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800438e:	f7fe fbd7 	bl	8002b40 <HAL_GetTick>
 8004392:	0003      	movs	r3, r0
 8004394:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004398:	f7fe fbd2 	bl	8002b40 <HAL_GetTick>
 800439c:	0002      	movs	r2, r0
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e0ca      	b.n	8004540 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80043aa:	4b1e      	ldr	r3, [pc, #120]	; (8004424 <HAL_RCC_OscConfig+0x670>)
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	2202      	movs	r2, #2
 80043b0:	4013      	ands	r3, r2
 80043b2:	d0f1      	beq.n	8004398 <HAL_RCC_OscConfig+0x5e4>
 80043b4:	e01e      	b.n	80043f4 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80043b6:	4b1b      	ldr	r3, [pc, #108]	; (8004424 <HAL_RCC_OscConfig+0x670>)
 80043b8:	689a      	ldr	r2, [r3, #8]
 80043ba:	4b1a      	ldr	r3, [pc, #104]	; (8004424 <HAL_RCC_OscConfig+0x670>)
 80043bc:	2101      	movs	r1, #1
 80043be:	438a      	bics	r2, r1
 80043c0:	609a      	str	r2, [r3, #8]
 80043c2:	4b1f      	ldr	r3, [pc, #124]	; (8004440 <HAL_RCC_OscConfig+0x68c>)
 80043c4:	6a1a      	ldr	r2, [r3, #32]
 80043c6:	4b1e      	ldr	r3, [pc, #120]	; (8004440 <HAL_RCC_OscConfig+0x68c>)
 80043c8:	491e      	ldr	r1, [pc, #120]	; (8004444 <HAL_RCC_OscConfig+0x690>)
 80043ca:	400a      	ands	r2, r1
 80043cc:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ce:	f7fe fbb7 	bl	8002b40 <HAL_GetTick>
 80043d2:	0003      	movs	r3, r0
 80043d4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80043d6:	e008      	b.n	80043ea <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043d8:	f7fe fbb2 	bl	8002b40 <HAL_GetTick>
 80043dc:	0002      	movs	r2, r0
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e0aa      	b.n	8004540 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80043ea:	4b0e      	ldr	r3, [pc, #56]	; (8004424 <HAL_RCC_OscConfig+0x670>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	2202      	movs	r2, #2
 80043f0:	4013      	ands	r3, r2
 80043f2:	d1f1      	bne.n	80043d8 <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d100      	bne.n	80043fe <HAL_RCC_OscConfig+0x64a>
 80043fc:	e09f      	b.n	800453e <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	2b0c      	cmp	r3, #12
 8004402:	d100      	bne.n	8004406 <HAL_RCC_OscConfig+0x652>
 8004404:	e078      	b.n	80044f8 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440a:	2b02      	cmp	r3, #2
 800440c:	d159      	bne.n	80044c2 <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800440e:	4b05      	ldr	r3, [pc, #20]	; (8004424 <HAL_RCC_OscConfig+0x670>)
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	4b04      	ldr	r3, [pc, #16]	; (8004424 <HAL_RCC_OscConfig+0x670>)
 8004414:	490c      	ldr	r1, [pc, #48]	; (8004448 <HAL_RCC_OscConfig+0x694>)
 8004416:	400a      	ands	r2, r1
 8004418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800441a:	f7fe fb91 	bl	8002b40 <HAL_GetTick>
 800441e:	0003      	movs	r3, r0
 8004420:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004422:	e01c      	b.n	800445e <HAL_RCC_OscConfig+0x6aa>
 8004424:	40021000 	.word	0x40021000
 8004428:	ffff1fff 	.word	0xffff1fff
 800442c:	fffffeff 	.word	0xfffffeff
 8004430:	40007000 	.word	0x40007000
 8004434:	fffffbff 	.word	0xfffffbff
 8004438:	00001388 	.word	0x00001388
 800443c:	efffffff 	.word	0xefffffff
 8004440:	40010000 	.word	0x40010000
 8004444:	ffffdfff 	.word	0xffffdfff
 8004448:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800444c:	f7fe fb78 	bl	8002b40 <HAL_GetTick>
 8004450:	0002      	movs	r2, r0
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e070      	b.n	8004540 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800445e:	4b3a      	ldr	r3, [pc, #232]	; (8004548 <HAL_RCC_OscConfig+0x794>)
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	2380      	movs	r3, #128	; 0x80
 8004464:	049b      	lsls	r3, r3, #18
 8004466:	4013      	ands	r3, r2
 8004468:	d1f0      	bne.n	800444c <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800446a:	4b37      	ldr	r3, [pc, #220]	; (8004548 <HAL_RCC_OscConfig+0x794>)
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	4a37      	ldr	r2, [pc, #220]	; (800454c <HAL_RCC_OscConfig+0x798>)
 8004470:	4013      	ands	r3, r2
 8004472:	0019      	movs	r1, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447c:	431a      	orrs	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004482:	431a      	orrs	r2, r3
 8004484:	4b30      	ldr	r3, [pc, #192]	; (8004548 <HAL_RCC_OscConfig+0x794>)
 8004486:	430a      	orrs	r2, r1
 8004488:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800448a:	4b2f      	ldr	r3, [pc, #188]	; (8004548 <HAL_RCC_OscConfig+0x794>)
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	4b2e      	ldr	r3, [pc, #184]	; (8004548 <HAL_RCC_OscConfig+0x794>)
 8004490:	2180      	movs	r1, #128	; 0x80
 8004492:	0449      	lsls	r1, r1, #17
 8004494:	430a      	orrs	r2, r1
 8004496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004498:	f7fe fb52 	bl	8002b40 <HAL_GetTick>
 800449c:	0003      	movs	r3, r0
 800449e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80044a0:	e008      	b.n	80044b4 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044a2:	f7fe fb4d 	bl	8002b40 <HAL_GetTick>
 80044a6:	0002      	movs	r2, r0
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d901      	bls.n	80044b4 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e045      	b.n	8004540 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80044b4:	4b24      	ldr	r3, [pc, #144]	; (8004548 <HAL_RCC_OscConfig+0x794>)
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	2380      	movs	r3, #128	; 0x80
 80044ba:	049b      	lsls	r3, r3, #18
 80044bc:	4013      	ands	r3, r2
 80044be:	d0f0      	beq.n	80044a2 <HAL_RCC_OscConfig+0x6ee>
 80044c0:	e03d      	b.n	800453e <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044c2:	4b21      	ldr	r3, [pc, #132]	; (8004548 <HAL_RCC_OscConfig+0x794>)
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	4b20      	ldr	r3, [pc, #128]	; (8004548 <HAL_RCC_OscConfig+0x794>)
 80044c8:	4921      	ldr	r1, [pc, #132]	; (8004550 <HAL_RCC_OscConfig+0x79c>)
 80044ca:	400a      	ands	r2, r1
 80044cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ce:	f7fe fb37 	bl	8002b40 <HAL_GetTick>
 80044d2:	0003      	movs	r3, r0
 80044d4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044d8:	f7fe fb32 	bl	8002b40 <HAL_GetTick>
 80044dc:	0002      	movs	r2, r0
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e02a      	b.n	8004540 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80044ea:	4b17      	ldr	r3, [pc, #92]	; (8004548 <HAL_RCC_OscConfig+0x794>)
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	2380      	movs	r3, #128	; 0x80
 80044f0:	049b      	lsls	r3, r3, #18
 80044f2:	4013      	ands	r3, r2
 80044f4:	d1f0      	bne.n	80044d8 <HAL_RCC_OscConfig+0x724>
 80044f6:	e022      	b.n	800453e <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d101      	bne.n	8004504 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e01d      	b.n	8004540 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004504:	4b10      	ldr	r3, [pc, #64]	; (8004548 <HAL_RCC_OscConfig+0x794>)
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800450a:	69ba      	ldr	r2, [r7, #24]
 800450c:	2380      	movs	r3, #128	; 0x80
 800450e:	025b      	lsls	r3, r3, #9
 8004510:	401a      	ands	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004516:	429a      	cmp	r2, r3
 8004518:	d10f      	bne.n	800453a <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	23f0      	movs	r3, #240	; 0xf0
 800451e:	039b      	lsls	r3, r3, #14
 8004520:	401a      	ands	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004526:	429a      	cmp	r2, r3
 8004528:	d107      	bne.n	800453a <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800452a:	69ba      	ldr	r2, [r7, #24]
 800452c:	23c0      	movs	r3, #192	; 0xc0
 800452e:	041b      	lsls	r3, r3, #16
 8004530:	401a      	ands	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004536:	429a      	cmp	r2, r3
 8004538:	d001      	beq.n	800453e <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e000      	b.n	8004540 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	0018      	movs	r0, r3
 8004542:	46bd      	mov	sp, r7
 8004544:	b00a      	add	sp, #40	; 0x28
 8004546:	bdb0      	pop	{r4, r5, r7, pc}
 8004548:	40021000 	.word	0x40021000
 800454c:	ff02ffff 	.word	0xff02ffff
 8004550:	feffffff 	.word	0xfeffffff

08004554 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004554:	b5b0      	push	{r4, r5, r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d101      	bne.n	8004568 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e10d      	b.n	8004784 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004568:	4b88      	ldr	r3, [pc, #544]	; (800478c <HAL_RCC_ClockConfig+0x238>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2201      	movs	r2, #1
 800456e:	4013      	ands	r3, r2
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	429a      	cmp	r2, r3
 8004574:	d911      	bls.n	800459a <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004576:	4b85      	ldr	r3, [pc, #532]	; (800478c <HAL_RCC_ClockConfig+0x238>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2201      	movs	r2, #1
 800457c:	4393      	bics	r3, r2
 800457e:	0019      	movs	r1, r3
 8004580:	4b82      	ldr	r3, [pc, #520]	; (800478c <HAL_RCC_ClockConfig+0x238>)
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	430a      	orrs	r2, r1
 8004586:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004588:	4b80      	ldr	r3, [pc, #512]	; (800478c <HAL_RCC_ClockConfig+0x238>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2201      	movs	r2, #1
 800458e:	4013      	ands	r3, r2
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	429a      	cmp	r2, r3
 8004594:	d001      	beq.n	800459a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e0f4      	b.n	8004784 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2202      	movs	r2, #2
 80045a0:	4013      	ands	r3, r2
 80045a2:	d009      	beq.n	80045b8 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045a4:	4b7a      	ldr	r3, [pc, #488]	; (8004790 <HAL_RCC_ClockConfig+0x23c>)
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	22f0      	movs	r2, #240	; 0xf0
 80045aa:	4393      	bics	r3, r2
 80045ac:	0019      	movs	r1, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	689a      	ldr	r2, [r3, #8]
 80045b2:	4b77      	ldr	r3, [pc, #476]	; (8004790 <HAL_RCC_ClockConfig+0x23c>)
 80045b4:	430a      	orrs	r2, r1
 80045b6:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2201      	movs	r2, #1
 80045be:	4013      	ands	r3, r2
 80045c0:	d100      	bne.n	80045c4 <HAL_RCC_ClockConfig+0x70>
 80045c2:	e089      	b.n	80046d8 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d107      	bne.n	80045dc <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045cc:	4b70      	ldr	r3, [pc, #448]	; (8004790 <HAL_RCC_ClockConfig+0x23c>)
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	2380      	movs	r3, #128	; 0x80
 80045d2:	029b      	lsls	r3, r3, #10
 80045d4:	4013      	ands	r3, r2
 80045d6:	d120      	bne.n	800461a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e0d3      	b.n	8004784 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	2b03      	cmp	r3, #3
 80045e2:	d107      	bne.n	80045f4 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80045e4:	4b6a      	ldr	r3, [pc, #424]	; (8004790 <HAL_RCC_ClockConfig+0x23c>)
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	2380      	movs	r3, #128	; 0x80
 80045ea:	049b      	lsls	r3, r3, #18
 80045ec:	4013      	ands	r3, r2
 80045ee:	d114      	bne.n	800461a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e0c7      	b.n	8004784 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d106      	bne.n	800460a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045fc:	4b64      	ldr	r3, [pc, #400]	; (8004790 <HAL_RCC_ClockConfig+0x23c>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2204      	movs	r2, #4
 8004602:	4013      	ands	r3, r2
 8004604:	d109      	bne.n	800461a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e0bc      	b.n	8004784 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800460a:	4b61      	ldr	r3, [pc, #388]	; (8004790 <HAL_RCC_ClockConfig+0x23c>)
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	2380      	movs	r3, #128	; 0x80
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	4013      	ands	r3, r2
 8004614:	d101      	bne.n	800461a <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e0b4      	b.n	8004784 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800461a:	4b5d      	ldr	r3, [pc, #372]	; (8004790 <HAL_RCC_ClockConfig+0x23c>)
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	2203      	movs	r2, #3
 8004620:	4393      	bics	r3, r2
 8004622:	0019      	movs	r1, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685a      	ldr	r2, [r3, #4]
 8004628:	4b59      	ldr	r3, [pc, #356]	; (8004790 <HAL_RCC_ClockConfig+0x23c>)
 800462a:	430a      	orrs	r2, r1
 800462c:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800462e:	f7fe fa87 	bl	8002b40 <HAL_GetTick>
 8004632:	0003      	movs	r3, r0
 8004634:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	2b02      	cmp	r3, #2
 800463c:	d111      	bne.n	8004662 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800463e:	e009      	b.n	8004654 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004640:	f7fe fa7e 	bl	8002b40 <HAL_GetTick>
 8004644:	0002      	movs	r2, r0
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	4a52      	ldr	r2, [pc, #328]	; (8004794 <HAL_RCC_ClockConfig+0x240>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d901      	bls.n	8004654 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e097      	b.n	8004784 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004654:	4b4e      	ldr	r3, [pc, #312]	; (8004790 <HAL_RCC_ClockConfig+0x23c>)
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	220c      	movs	r2, #12
 800465a:	4013      	ands	r3, r2
 800465c:	2b08      	cmp	r3, #8
 800465e:	d1ef      	bne.n	8004640 <HAL_RCC_ClockConfig+0xec>
 8004660:	e03a      	b.n	80046d8 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	2b03      	cmp	r3, #3
 8004668:	d111      	bne.n	800468e <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800466a:	e009      	b.n	8004680 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800466c:	f7fe fa68 	bl	8002b40 <HAL_GetTick>
 8004670:	0002      	movs	r2, r0
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	4a47      	ldr	r2, [pc, #284]	; (8004794 <HAL_RCC_ClockConfig+0x240>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d901      	bls.n	8004680 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e081      	b.n	8004784 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004680:	4b43      	ldr	r3, [pc, #268]	; (8004790 <HAL_RCC_ClockConfig+0x23c>)
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	220c      	movs	r2, #12
 8004686:	4013      	ands	r3, r2
 8004688:	2b0c      	cmp	r3, #12
 800468a:	d1ef      	bne.n	800466c <HAL_RCC_ClockConfig+0x118>
 800468c:	e024      	b.n	80046d8 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d11b      	bne.n	80046ce <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004696:	e009      	b.n	80046ac <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004698:	f7fe fa52 	bl	8002b40 <HAL_GetTick>
 800469c:	0002      	movs	r2, r0
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	4a3c      	ldr	r2, [pc, #240]	; (8004794 <HAL_RCC_ClockConfig+0x240>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d901      	bls.n	80046ac <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e06b      	b.n	8004784 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80046ac:	4b38      	ldr	r3, [pc, #224]	; (8004790 <HAL_RCC_ClockConfig+0x23c>)
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	220c      	movs	r2, #12
 80046b2:	4013      	ands	r3, r2
 80046b4:	2b04      	cmp	r3, #4
 80046b6:	d1ef      	bne.n	8004698 <HAL_RCC_ClockConfig+0x144>
 80046b8:	e00e      	b.n	80046d8 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046ba:	f7fe fa41 	bl	8002b40 <HAL_GetTick>
 80046be:	0002      	movs	r2, r0
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	4a33      	ldr	r2, [pc, #204]	; (8004794 <HAL_RCC_ClockConfig+0x240>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d901      	bls.n	80046ce <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e05a      	b.n	8004784 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80046ce:	4b30      	ldr	r3, [pc, #192]	; (8004790 <HAL_RCC_ClockConfig+0x23c>)
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	220c      	movs	r2, #12
 80046d4:	4013      	ands	r3, r2
 80046d6:	d1f0      	bne.n	80046ba <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046d8:	4b2c      	ldr	r3, [pc, #176]	; (800478c <HAL_RCC_ClockConfig+0x238>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2201      	movs	r2, #1
 80046de:	4013      	ands	r3, r2
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d211      	bcs.n	800470a <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046e6:	4b29      	ldr	r3, [pc, #164]	; (800478c <HAL_RCC_ClockConfig+0x238>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2201      	movs	r2, #1
 80046ec:	4393      	bics	r3, r2
 80046ee:	0019      	movs	r1, r3
 80046f0:	4b26      	ldr	r3, [pc, #152]	; (800478c <HAL_RCC_ClockConfig+0x238>)
 80046f2:	683a      	ldr	r2, [r7, #0]
 80046f4:	430a      	orrs	r2, r1
 80046f6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046f8:	4b24      	ldr	r3, [pc, #144]	; (800478c <HAL_RCC_ClockConfig+0x238>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2201      	movs	r2, #1
 80046fe:	4013      	ands	r3, r2
 8004700:	683a      	ldr	r2, [r7, #0]
 8004702:	429a      	cmp	r2, r3
 8004704:	d001      	beq.n	800470a <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e03c      	b.n	8004784 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2204      	movs	r2, #4
 8004710:	4013      	ands	r3, r2
 8004712:	d009      	beq.n	8004728 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004714:	4b1e      	ldr	r3, [pc, #120]	; (8004790 <HAL_RCC_ClockConfig+0x23c>)
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	4a1f      	ldr	r2, [pc, #124]	; (8004798 <HAL_RCC_ClockConfig+0x244>)
 800471a:	4013      	ands	r3, r2
 800471c:	0019      	movs	r1, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	68da      	ldr	r2, [r3, #12]
 8004722:	4b1b      	ldr	r3, [pc, #108]	; (8004790 <HAL_RCC_ClockConfig+0x23c>)
 8004724:	430a      	orrs	r2, r1
 8004726:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2208      	movs	r2, #8
 800472e:	4013      	ands	r3, r2
 8004730:	d00a      	beq.n	8004748 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004732:	4b17      	ldr	r3, [pc, #92]	; (8004790 <HAL_RCC_ClockConfig+0x23c>)
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	4a19      	ldr	r2, [pc, #100]	; (800479c <HAL_RCC_ClockConfig+0x248>)
 8004738:	4013      	ands	r3, r2
 800473a:	0019      	movs	r1, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	00da      	lsls	r2, r3, #3
 8004742:	4b13      	ldr	r3, [pc, #76]	; (8004790 <HAL_RCC_ClockConfig+0x23c>)
 8004744:	430a      	orrs	r2, r1
 8004746:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004748:	f000 f82e 	bl	80047a8 <HAL_RCC_GetSysClockFreq>
 800474c:	0001      	movs	r1, r0
 800474e:	4b10      	ldr	r3, [pc, #64]	; (8004790 <HAL_RCC_ClockConfig+0x23c>)
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	091b      	lsrs	r3, r3, #4
 8004754:	220f      	movs	r2, #15
 8004756:	4013      	ands	r3, r2
 8004758:	4a11      	ldr	r2, [pc, #68]	; (80047a0 <HAL_RCC_ClockConfig+0x24c>)
 800475a:	5cd3      	ldrb	r3, [r2, r3]
 800475c:	000a      	movs	r2, r1
 800475e:	40da      	lsrs	r2, r3
 8004760:	4b10      	ldr	r3, [pc, #64]	; (80047a4 <HAL_RCC_ClockConfig+0x250>)
 8004762:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8004764:	250b      	movs	r5, #11
 8004766:	197c      	adds	r4, r7, r5
 8004768:	2000      	movs	r0, #0
 800476a:	f7fe f9b3 	bl	8002ad4 <HAL_InitTick>
 800476e:	0003      	movs	r3, r0
 8004770:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8004772:	197b      	adds	r3, r7, r5
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d003      	beq.n	8004782 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 800477a:	230b      	movs	r3, #11
 800477c:	18fb      	adds	r3, r7, r3
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	e000      	b.n	8004784 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	0018      	movs	r0, r3
 8004786:	46bd      	mov	sp, r7
 8004788:	b004      	add	sp, #16
 800478a:	bdb0      	pop	{r4, r5, r7, pc}
 800478c:	40022000 	.word	0x40022000
 8004790:	40021000 	.word	0x40021000
 8004794:	00001388 	.word	0x00001388
 8004798:	fffff8ff 	.word	0xfffff8ff
 800479c:	ffffc7ff 	.word	0xffffc7ff
 80047a0:	08006edc 	.word	0x08006edc
 80047a4:	20000000 	.word	0x20000000

080047a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80047ae:	4b3b      	ldr	r3, [pc, #236]	; (800489c <HAL_RCC_GetSysClockFreq+0xf4>)
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	220c      	movs	r2, #12
 80047b8:	4013      	ands	r3, r2
 80047ba:	2b08      	cmp	r3, #8
 80047bc:	d00e      	beq.n	80047dc <HAL_RCC_GetSysClockFreq+0x34>
 80047be:	2b0c      	cmp	r3, #12
 80047c0:	d00f      	beq.n	80047e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80047c2:	2b04      	cmp	r3, #4
 80047c4:	d157      	bne.n	8004876 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80047c6:	4b35      	ldr	r3, [pc, #212]	; (800489c <HAL_RCC_GetSysClockFreq+0xf4>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2210      	movs	r2, #16
 80047cc:	4013      	ands	r3, r2
 80047ce:	d002      	beq.n	80047d6 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80047d0:	4b33      	ldr	r3, [pc, #204]	; (80048a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047d2:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80047d4:	e05d      	b.n	8004892 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 80047d6:	4b33      	ldr	r3, [pc, #204]	; (80048a4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80047d8:	613b      	str	r3, [r7, #16]
      break;
 80047da:	e05a      	b.n	8004892 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80047dc:	4b32      	ldr	r3, [pc, #200]	; (80048a8 <HAL_RCC_GetSysClockFreq+0x100>)
 80047de:	613b      	str	r3, [r7, #16]
      break;
 80047e0:	e057      	b.n	8004892 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	0c9b      	lsrs	r3, r3, #18
 80047e6:	220f      	movs	r2, #15
 80047e8:	4013      	ands	r3, r2
 80047ea:	4a30      	ldr	r2, [pc, #192]	; (80048ac <HAL_RCC_GetSysClockFreq+0x104>)
 80047ec:	5cd3      	ldrb	r3, [r2, r3]
 80047ee:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	0d9b      	lsrs	r3, r3, #22
 80047f4:	2203      	movs	r2, #3
 80047f6:	4013      	ands	r3, r2
 80047f8:	3301      	adds	r3, #1
 80047fa:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047fc:	4b27      	ldr	r3, [pc, #156]	; (800489c <HAL_RCC_GetSysClockFreq+0xf4>)
 80047fe:	68da      	ldr	r2, [r3, #12]
 8004800:	2380      	movs	r3, #128	; 0x80
 8004802:	025b      	lsls	r3, r3, #9
 8004804:	4013      	ands	r3, r2
 8004806:	d00f      	beq.n	8004828 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8004808:	68b9      	ldr	r1, [r7, #8]
 800480a:	000a      	movs	r2, r1
 800480c:	0152      	lsls	r2, r2, #5
 800480e:	1a52      	subs	r2, r2, r1
 8004810:	0193      	lsls	r3, r2, #6
 8004812:	1a9b      	subs	r3, r3, r2
 8004814:	00db      	lsls	r3, r3, #3
 8004816:	185b      	adds	r3, r3, r1
 8004818:	025b      	lsls	r3, r3, #9
 800481a:	6879      	ldr	r1, [r7, #4]
 800481c:	0018      	movs	r0, r3
 800481e:	f7fb fc73 	bl	8000108 <__udivsi3>
 8004822:	0003      	movs	r3, r0
 8004824:	617b      	str	r3, [r7, #20]
 8004826:	e023      	b.n	8004870 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004828:	4b1c      	ldr	r3, [pc, #112]	; (800489c <HAL_RCC_GetSysClockFreq+0xf4>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2210      	movs	r2, #16
 800482e:	4013      	ands	r3, r2
 8004830:	d00f      	beq.n	8004852 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8004832:	68b9      	ldr	r1, [r7, #8]
 8004834:	000a      	movs	r2, r1
 8004836:	0152      	lsls	r2, r2, #5
 8004838:	1a52      	subs	r2, r2, r1
 800483a:	0193      	lsls	r3, r2, #6
 800483c:	1a9b      	subs	r3, r3, r2
 800483e:	00db      	lsls	r3, r3, #3
 8004840:	185b      	adds	r3, r3, r1
 8004842:	021b      	lsls	r3, r3, #8
 8004844:	6879      	ldr	r1, [r7, #4]
 8004846:	0018      	movs	r0, r3
 8004848:	f7fb fc5e 	bl	8000108 <__udivsi3>
 800484c:	0003      	movs	r3, r0
 800484e:	617b      	str	r3, [r7, #20]
 8004850:	e00e      	b.n	8004870 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8004852:	68b9      	ldr	r1, [r7, #8]
 8004854:	000a      	movs	r2, r1
 8004856:	0152      	lsls	r2, r2, #5
 8004858:	1a52      	subs	r2, r2, r1
 800485a:	0193      	lsls	r3, r2, #6
 800485c:	1a9b      	subs	r3, r3, r2
 800485e:	00db      	lsls	r3, r3, #3
 8004860:	185b      	adds	r3, r3, r1
 8004862:	029b      	lsls	r3, r3, #10
 8004864:	6879      	ldr	r1, [r7, #4]
 8004866:	0018      	movs	r0, r3
 8004868:	f7fb fc4e 	bl	8000108 <__udivsi3>
 800486c:	0003      	movs	r3, r0
 800486e:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	613b      	str	r3, [r7, #16]
      break;
 8004874:	e00d      	b.n	8004892 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004876:	4b09      	ldr	r3, [pc, #36]	; (800489c <HAL_RCC_GetSysClockFreq+0xf4>)
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	0b5b      	lsrs	r3, r3, #13
 800487c:	2207      	movs	r2, #7
 800487e:	4013      	ands	r3, r2
 8004880:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	3301      	adds	r3, #1
 8004886:	2280      	movs	r2, #128	; 0x80
 8004888:	0212      	lsls	r2, r2, #8
 800488a:	409a      	lsls	r2, r3
 800488c:	0013      	movs	r3, r2
 800488e:	613b      	str	r3, [r7, #16]
      break;
 8004890:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004892:	693b      	ldr	r3, [r7, #16]
}
 8004894:	0018      	movs	r0, r3
 8004896:	46bd      	mov	sp, r7
 8004898:	b006      	add	sp, #24
 800489a:	bd80      	pop	{r7, pc}
 800489c:	40021000 	.word	0x40021000
 80048a0:	003d0900 	.word	0x003d0900
 80048a4:	00f42400 	.word	0x00f42400
 80048a8:	007a1200 	.word	0x007a1200
 80048ac:	08006eec 	.word	0x08006eec

080048b0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2220      	movs	r2, #32
 80048be:	4013      	ands	r3, r2
 80048c0:	d106      	bne.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	2380      	movs	r3, #128	; 0x80
 80048c8:	011b      	lsls	r3, r3, #4
 80048ca:	4013      	ands	r3, r2
 80048cc:	d100      	bne.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x20>
 80048ce:	e0dd      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 80048d0:	2317      	movs	r3, #23
 80048d2:	18fb      	adds	r3, r7, r3
 80048d4:	2200      	movs	r2, #0
 80048d6:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048d8:	4ba4      	ldr	r3, [pc, #656]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80048da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048dc:	2380      	movs	r3, #128	; 0x80
 80048de:	055b      	lsls	r3, r3, #21
 80048e0:	4013      	ands	r3, r2
 80048e2:	d10a      	bne.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048e4:	4ba1      	ldr	r3, [pc, #644]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80048e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048e8:	4ba0      	ldr	r3, [pc, #640]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80048ea:	2180      	movs	r1, #128	; 0x80
 80048ec:	0549      	lsls	r1, r1, #21
 80048ee:	430a      	orrs	r2, r1
 80048f0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80048f2:	2317      	movs	r3, #23
 80048f4:	18fb      	adds	r3, r7, r3
 80048f6:	2201      	movs	r2, #1
 80048f8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048fa:	4b9d      	ldr	r3, [pc, #628]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	2380      	movs	r3, #128	; 0x80
 8004900:	005b      	lsls	r3, r3, #1
 8004902:	4013      	ands	r3, r2
 8004904:	d11a      	bne.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004906:	4b9a      	ldr	r3, [pc, #616]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	4b99      	ldr	r3, [pc, #612]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800490c:	2180      	movs	r1, #128	; 0x80
 800490e:	0049      	lsls	r1, r1, #1
 8004910:	430a      	orrs	r2, r1
 8004912:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004914:	f7fe f914 	bl	8002b40 <HAL_GetTick>
 8004918:	0003      	movs	r3, r0
 800491a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800491c:	e008      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800491e:	f7fe f90f 	bl	8002b40 <HAL_GetTick>
 8004922:	0002      	movs	r2, r0
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	2b64      	cmp	r3, #100	; 0x64
 800492a:	d901      	bls.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e118      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004930:	4b8f      	ldr	r3, [pc, #572]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	2380      	movs	r3, #128	; 0x80
 8004936:	005b      	lsls	r3, r3, #1
 8004938:	4013      	ands	r3, r2
 800493a:	d0f0      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800493c:	4b8b      	ldr	r3, [pc, #556]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	23c0      	movs	r3, #192	; 0xc0
 8004942:	039b      	lsls	r3, r3, #14
 8004944:	4013      	ands	r3, r2
 8004946:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685a      	ldr	r2, [r3, #4]
 800494c:	23c0      	movs	r3, #192	; 0xc0
 800494e:	039b      	lsls	r3, r3, #14
 8004950:	4013      	ands	r3, r2
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	429a      	cmp	r2, r3
 8004956:	d107      	bne.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	23c0      	movs	r3, #192	; 0xc0
 800495e:	039b      	lsls	r3, r3, #14
 8004960:	4013      	ands	r3, r2
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	429a      	cmp	r2, r3
 8004966:	d013      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685a      	ldr	r2, [r3, #4]
 800496c:	23c0      	movs	r3, #192	; 0xc0
 800496e:	029b      	lsls	r3, r3, #10
 8004970:	401a      	ands	r2, r3
 8004972:	23c0      	movs	r3, #192	; 0xc0
 8004974:	029b      	lsls	r3, r3, #10
 8004976:	429a      	cmp	r2, r3
 8004978:	d10a      	bne.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800497a:	4b7c      	ldr	r3, [pc, #496]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	2380      	movs	r3, #128	; 0x80
 8004980:	029b      	lsls	r3, r3, #10
 8004982:	401a      	ands	r2, r3
 8004984:	2380      	movs	r3, #128	; 0x80
 8004986:	029b      	lsls	r3, r3, #10
 8004988:	429a      	cmp	r2, r3
 800498a:	d101      	bne.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e0e8      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004990:	4b76      	ldr	r3, [pc, #472]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004992:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004994:	23c0      	movs	r3, #192	; 0xc0
 8004996:	029b      	lsls	r3, r3, #10
 8004998:	4013      	ands	r3, r2
 800499a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d049      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685a      	ldr	r2, [r3, #4]
 80049a6:	23c0      	movs	r3, #192	; 0xc0
 80049a8:	029b      	lsls	r3, r3, #10
 80049aa:	4013      	ands	r3, r2
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d004      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2220      	movs	r2, #32
 80049b8:	4013      	ands	r3, r2
 80049ba:	d10d      	bne.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689a      	ldr	r2, [r3, #8]
 80049c0:	23c0      	movs	r3, #192	; 0xc0
 80049c2:	029b      	lsls	r3, r3, #10
 80049c4:	4013      	ands	r3, r2
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d034      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	2380      	movs	r3, #128	; 0x80
 80049d2:	011b      	lsls	r3, r3, #4
 80049d4:	4013      	ands	r3, r2
 80049d6:	d02e      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80049d8:	4b64      	ldr	r3, [pc, #400]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80049da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049dc:	4a65      	ldr	r2, [pc, #404]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049de:	4013      	ands	r3, r2
 80049e0:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80049e2:	4b62      	ldr	r3, [pc, #392]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80049e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80049e6:	4b61      	ldr	r3, [pc, #388]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80049e8:	2180      	movs	r1, #128	; 0x80
 80049ea:	0309      	lsls	r1, r1, #12
 80049ec:	430a      	orrs	r2, r1
 80049ee:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80049f0:	4b5e      	ldr	r3, [pc, #376]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80049f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80049f4:	4b5d      	ldr	r3, [pc, #372]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80049f6:	4960      	ldr	r1, [pc, #384]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80049f8:	400a      	ands	r2, r1
 80049fa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80049fc:	4b5b      	ldr	r3, [pc, #364]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	2380      	movs	r3, #128	; 0x80
 8004a06:	005b      	lsls	r3, r3, #1
 8004a08:	4013      	ands	r3, r2
 8004a0a:	d014      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a0c:	f7fe f898 	bl	8002b40 <HAL_GetTick>
 8004a10:	0003      	movs	r3, r0
 8004a12:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a14:	e009      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a16:	f7fe f893 	bl	8002b40 <HAL_GetTick>
 8004a1a:	0002      	movs	r2, r0
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	4a56      	ldr	r2, [pc, #344]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d901      	bls.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e09b      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a2a:	4b50      	ldr	r3, [pc, #320]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a2e:	2380      	movs	r3, #128	; 0x80
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	4013      	ands	r3, r2
 8004a34:	d0ef      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685a      	ldr	r2, [r3, #4]
 8004a3a:	23c0      	movs	r3, #192	; 0xc0
 8004a3c:	029b      	lsls	r3, r3, #10
 8004a3e:	401a      	ands	r2, r3
 8004a40:	23c0      	movs	r3, #192	; 0xc0
 8004a42:	029b      	lsls	r3, r3, #10
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d10c      	bne.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8004a48:	4b48      	ldr	r3, [pc, #288]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a4c      	ldr	r2, [pc, #304]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8004a4e:	4013      	ands	r3, r2
 8004a50:	0019      	movs	r1, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685a      	ldr	r2, [r3, #4]
 8004a56:	23c0      	movs	r3, #192	; 0xc0
 8004a58:	039b      	lsls	r3, r3, #14
 8004a5a:	401a      	ands	r2, r3
 8004a5c:	4b43      	ldr	r3, [pc, #268]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	601a      	str	r2, [r3, #0]
 8004a62:	4b42      	ldr	r3, [pc, #264]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a64:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685a      	ldr	r2, [r3, #4]
 8004a6a:	23c0      	movs	r3, #192	; 0xc0
 8004a6c:	029b      	lsls	r3, r3, #10
 8004a6e:	401a      	ands	r2, r3
 8004a70:	4b3e      	ldr	r3, [pc, #248]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a72:	430a      	orrs	r2, r1
 8004a74:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004a76:	2317      	movs	r3, #23
 8004a78:	18fb      	adds	r3, r7, r3
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d105      	bne.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a80:	4b3a      	ldr	r3, [pc, #232]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a84:	4b39      	ldr	r3, [pc, #228]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a86:	493f      	ldr	r1, [pc, #252]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a88:	400a      	ands	r2, r1
 8004a8a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2201      	movs	r2, #1
 8004a92:	4013      	ands	r3, r2
 8004a94:	d009      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a96:	4b35      	ldr	r3, [pc, #212]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a9a:	2203      	movs	r2, #3
 8004a9c:	4393      	bics	r3, r2
 8004a9e:	0019      	movs	r1, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	68da      	ldr	r2, [r3, #12]
 8004aa4:	4b31      	ldr	r3, [pc, #196]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2202      	movs	r2, #2
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	d009      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ab4:	4b2d      	ldr	r3, [pc, #180]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ab8:	220c      	movs	r2, #12
 8004aba:	4393      	bics	r3, r2
 8004abc:	0019      	movs	r1, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	691a      	ldr	r2, [r3, #16]
 8004ac2:	4b2a      	ldr	r3, [pc, #168]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2204      	movs	r2, #4
 8004ace:	4013      	ands	r3, r2
 8004ad0:	d009      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ad2:	4b26      	ldr	r3, [pc, #152]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ad6:	4a2c      	ldr	r2, [pc, #176]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004ad8:	4013      	ands	r3, r2
 8004ada:	0019      	movs	r1, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	695a      	ldr	r2, [r3, #20]
 8004ae0:	4b22      	ldr	r3, [pc, #136]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2208      	movs	r2, #8
 8004aec:	4013      	ands	r3, r2
 8004aee:	d009      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004af0:	4b1e      	ldr	r3, [pc, #120]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004af4:	4a25      	ldr	r2, [pc, #148]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8004af6:	4013      	ands	r3, r2
 8004af8:	0019      	movs	r1, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	699a      	ldr	r2, [r3, #24]
 8004afe:	4b1b      	ldr	r3, [pc, #108]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b00:	430a      	orrs	r2, r1
 8004b02:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	2380      	movs	r3, #128	; 0x80
 8004b0a:	005b      	lsls	r3, r3, #1
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	d009      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b10:	4b16      	ldr	r3, [pc, #88]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b14:	4a17      	ldr	r2, [pc, #92]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b16:	4013      	ands	r3, r2
 8004b18:	0019      	movs	r1, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	69da      	ldr	r2, [r3, #28]
 8004b1e:	4b13      	ldr	r3, [pc, #76]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b20:	430a      	orrs	r2, r1
 8004b22:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2240      	movs	r2, #64	; 0x40
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	d009      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b2e:	4b0f      	ldr	r3, [pc, #60]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b32:	4a17      	ldr	r2, [pc, #92]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004b34:	4013      	ands	r3, r2
 8004b36:	0019      	movs	r1, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b3c:	4b0b      	ldr	r3, [pc, #44]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2280      	movs	r2, #128	; 0x80
 8004b48:	4013      	ands	r3, r2
 8004b4a:	d009      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004b4c:	4b07      	ldr	r3, [pc, #28]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b50:	4a10      	ldr	r2, [pc, #64]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004b52:	4013      	ands	r3, r2
 8004b54:	0019      	movs	r1, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a1a      	ldr	r2, [r3, #32]
 8004b5a:	4b04      	ldr	r3, [pc, #16]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	0018      	movs	r0, r3
 8004b64:	46bd      	mov	sp, r7
 8004b66:	b006      	add	sp, #24
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	46c0      	nop			; (mov r8, r8)
 8004b6c:	40021000 	.word	0x40021000
 8004b70:	40007000 	.word	0x40007000
 8004b74:	fffcffff 	.word	0xfffcffff
 8004b78:	fff7ffff 	.word	0xfff7ffff
 8004b7c:	00001388 	.word	0x00001388
 8004b80:	ffcfffff 	.word	0xffcfffff
 8004b84:	efffffff 	.word	0xefffffff
 8004b88:	fffff3ff 	.word	0xfffff3ff
 8004b8c:	ffffcfff 	.word	0xffffcfff
 8004b90:	fbffffff 	.word	0xfbffffff
 8004b94:	fff3ffff 	.word	0xfff3ffff

08004b98 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d101      	bne.n	8004baa <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e08e      	b.n	8004cc8 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2221      	movs	r2, #33	; 0x21
 8004bae:	5c9b      	ldrb	r3, [r3, r2]
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d107      	bne.n	8004bc6 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2220      	movs	r2, #32
 8004bba:	2100      	movs	r1, #0
 8004bbc:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	0018      	movs	r0, r3
 8004bc2:	f7fd fd39 	bl	8002638 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2221      	movs	r2, #33	; 0x21
 8004bca:	2102      	movs	r1, #2
 8004bcc:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	22ca      	movs	r2, #202	; 0xca
 8004bd4:	625a      	str	r2, [r3, #36]	; 0x24
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2253      	movs	r2, #83	; 0x53
 8004bdc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	0018      	movs	r0, r3
 8004be2:	f000 fc06 	bl	80053f2 <RTC_EnterInitMode>
 8004be6:	1e03      	subs	r3, r0, #0
 8004be8:	d009      	beq.n	8004bfe <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	22ff      	movs	r2, #255	; 0xff
 8004bf0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2221      	movs	r2, #33	; 0x21
 8004bf6:	2104      	movs	r1, #4
 8004bf8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e064      	b.n	8004cc8 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	689a      	ldr	r2, [r3, #8]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4931      	ldr	r1, [pc, #196]	; (8004cd0 <HAL_RTC_Init+0x138>)
 8004c0a:	400a      	ands	r2, r1
 8004c0c:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	6899      	ldr	r1, [r3, #8]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	431a      	orrs	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	68d2      	ldr	r2, [r2, #12]
 8004c34:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	6919      	ldr	r1, [r3, #16]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	041a      	lsls	r2, r3, #16
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	430a      	orrs	r2, r1
 8004c48:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68da      	ldr	r2, [r3, #12]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2180      	movs	r1, #128	; 0x80
 8004c56:	438a      	bics	r2, r1
 8004c58:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2103      	movs	r1, #3
 8004c66:	438a      	bics	r2, r1
 8004c68:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	69da      	ldr	r2, [r3, #28]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	695b      	ldr	r3, [r3, #20]
 8004c78:	431a      	orrs	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	2220      	movs	r2, #32
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	d113      	bne.n	8004cb6 <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	0018      	movs	r0, r3
 8004c92:	f000 fb87 	bl	80053a4 <HAL_RTC_WaitForSynchro>
 8004c96:	1e03      	subs	r3, r0, #0
 8004c98:	d00d      	beq.n	8004cb6 <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	22ff      	movs	r2, #255	; 0xff
 8004ca0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2221      	movs	r2, #33	; 0x21
 8004ca6:	2104      	movs	r1, #4
 8004ca8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2220      	movs	r2, #32
 8004cae:	2100      	movs	r1, #0
 8004cb0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e008      	b.n	8004cc8 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	22ff      	movs	r2, #255	; 0xff
 8004cbc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2221      	movs	r2, #33	; 0x21
 8004cc2:	2101      	movs	r1, #1
 8004cc4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
  }
}
 8004cc8:	0018      	movs	r0, r3
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	b002      	add	sp, #8
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	ff8fffbf 	.word	0xff8fffbf

08004cd4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004cd4:	b590      	push	{r4, r7, lr}
 8004cd6:	b087      	sub	sp, #28
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	5c9b      	ldrb	r3, [r3, r2]
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d101      	bne.n	8004cee <HAL_RTC_SetTime+0x1a>
 8004cea:	2302      	movs	r3, #2
 8004cec:	e0ad      	b.n	8004e4a <HAL_RTC_SetTime+0x176>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2220      	movs	r2, #32
 8004cf2:	2101      	movs	r1, #1
 8004cf4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2221      	movs	r2, #33	; 0x21
 8004cfa:	2102      	movs	r1, #2
 8004cfc:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d125      	bne.n	8004d50 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	2240      	movs	r2, #64	; 0x40
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	d102      	bne.n	8004d16 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	2200      	movs	r2, #0
 8004d14:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	0018      	movs	r0, r3
 8004d1c:	f000 fb93 	bl	8005446 <RTC_ByteToBcd2>
 8004d20:	0003      	movs	r3, r0
 8004d22:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	785b      	ldrb	r3, [r3, #1]
 8004d28:	0018      	movs	r0, r3
 8004d2a:	f000 fb8c 	bl	8005446 <RTC_ByteToBcd2>
 8004d2e:	0003      	movs	r3, r0
 8004d30:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004d32:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	789b      	ldrb	r3, [r3, #2]
 8004d38:	0018      	movs	r0, r3
 8004d3a:	f000 fb84 	bl	8005446 <RTC_ByteToBcd2>
 8004d3e:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004d40:	0022      	movs	r2, r4
 8004d42:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	78db      	ldrb	r3, [r3, #3]
 8004d48:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	617b      	str	r3, [r7, #20]
 8004d4e:	e017      	b.n	8004d80 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	2240      	movs	r2, #64	; 0x40
 8004d58:	4013      	ands	r3, r2
 8004d5a:	d102      	bne.n	8004d62 <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	785b      	ldrb	r3, [r3, #1]
 8004d6c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004d6e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004d70:	68ba      	ldr	r2, [r7, #8]
 8004d72:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004d74:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	78db      	ldrb	r3, [r3, #3]
 8004d7a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	22ca      	movs	r2, #202	; 0xca
 8004d86:	625a      	str	r2, [r3, #36]	; 0x24
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2253      	movs	r2, #83	; 0x53
 8004d8e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	0018      	movs	r0, r3
 8004d94:	f000 fb2d 	bl	80053f2 <RTC_EnterInitMode>
 8004d98:	1e03      	subs	r3, r0, #0
 8004d9a:	d00d      	beq.n	8004db8 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	22ff      	movs	r2, #255	; 0xff
 8004da2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2221      	movs	r2, #33	; 0x21
 8004da8:	2104      	movs	r1, #4
 8004daa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2220      	movs	r2, #32
 8004db0:	2100      	movs	r1, #0
 8004db2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e048      	b.n	8004e4a <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	4925      	ldr	r1, [pc, #148]	; (8004e54 <HAL_RTC_SetTime+0x180>)
 8004dc0:	400a      	ands	r2, r1
 8004dc2:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	689a      	ldr	r2, [r3, #8]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4922      	ldr	r1, [pc, #136]	; (8004e58 <HAL_RTC_SetTime+0x184>)
 8004dd0:	400a      	ands	r2, r1
 8004dd2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6899      	ldr	r1, [r3, #8]
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	68da      	ldr	r2, [r3, #12]
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	431a      	orrs	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	430a      	orrs	r2, r1
 8004dea:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68da      	ldr	r2, [r3, #12]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2180      	movs	r1, #128	; 0x80
 8004df8:	438a      	bics	r2, r1
 8004dfa:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	2220      	movs	r2, #32
 8004e04:	4013      	ands	r3, r2
 8004e06:	d113      	bne.n	8004e30 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	0018      	movs	r0, r3
 8004e0c:	f000 faca 	bl	80053a4 <HAL_RTC_WaitForSynchro>
 8004e10:	1e03      	subs	r3, r0, #0
 8004e12:	d00d      	beq.n	8004e30 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	22ff      	movs	r2, #255	; 0xff
 8004e1a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2221      	movs	r2, #33	; 0x21
 8004e20:	2104      	movs	r1, #4
 8004e22:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2220      	movs	r2, #32
 8004e28:	2100      	movs	r1, #0
 8004e2a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e00c      	b.n	8004e4a <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	22ff      	movs	r2, #255	; 0xff
 8004e36:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2221      	movs	r2, #33	; 0x21
 8004e3c:	2101      	movs	r1, #1
 8004e3e:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2220      	movs	r2, #32
 8004e44:	2100      	movs	r1, #0
 8004e46:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004e48:	2300      	movs	r3, #0
  }
}
 8004e4a:	0018      	movs	r0, r3
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	b007      	add	sp, #28
 8004e50:	bd90      	pop	{r4, r7, pc}
 8004e52:	46c0      	nop			; (mov r8, r8)
 8004e54:	007f7f7f 	.word	0x007f7f7f
 8004e58:	fffbffff 	.word	0xfffbffff

08004e5c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	045b      	lsls	r3, r3, #17
 8004e7a:	0c5a      	lsrs	r2, r3, #17
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a22      	ldr	r2, [pc, #136]	; (8004f10 <HAL_RTC_GetTime+0xb4>)
 8004e88:	4013      	ands	r3, r2
 8004e8a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	0c1b      	lsrs	r3, r3, #16
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	223f      	movs	r2, #63	; 0x3f
 8004e94:	4013      	ands	r3, r2
 8004e96:	b2da      	uxtb	r2, r3
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	0a1b      	lsrs	r3, r3, #8
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	227f      	movs	r2, #127	; 0x7f
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	b2da      	uxtb	r2, r3
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	227f      	movs	r2, #127	; 0x7f
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	b2da      	uxtb	r2, r3
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	0c1b      	lsrs	r3, r3, #16
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	2240      	movs	r2, #64	; 0x40
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	b2da      	uxtb	r2, r3
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d11a      	bne.n	8004f06 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	0018      	movs	r0, r3
 8004ed6:	f000 fadf 	bl	8005498 <RTC_Bcd2ToByte>
 8004eda:	0003      	movs	r3, r0
 8004edc:	001a      	movs	r2, r3
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	785b      	ldrb	r3, [r3, #1]
 8004ee6:	0018      	movs	r0, r3
 8004ee8:	f000 fad6 	bl	8005498 <RTC_Bcd2ToByte>
 8004eec:	0003      	movs	r3, r0
 8004eee:	001a      	movs	r2, r3
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	789b      	ldrb	r3, [r3, #2]
 8004ef8:	0018      	movs	r0, r3
 8004efa:	f000 facd 	bl	8005498 <RTC_Bcd2ToByte>
 8004efe:	0003      	movs	r3, r0
 8004f00:	001a      	movs	r2, r3
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	0018      	movs	r0, r3
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	b006      	add	sp, #24
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	007f7f7f 	.word	0x007f7f7f

08004f14 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004f14:	b590      	push	{r4, r7, lr}
 8004f16:	b087      	sub	sp, #28
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2220      	movs	r2, #32
 8004f24:	5c9b      	ldrb	r3, [r3, r2]
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d101      	bne.n	8004f2e <HAL_RTC_SetDate+0x1a>
 8004f2a:	2302      	movs	r3, #2
 8004f2c:	e099      	b.n	8005062 <HAL_RTC_SetDate+0x14e>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2220      	movs	r2, #32
 8004f32:	2101      	movs	r1, #1
 8004f34:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2221      	movs	r2, #33	; 0x21
 8004f3a:	2102      	movs	r1, #2
 8004f3c:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d10e      	bne.n	8004f62 <HAL_RTC_SetDate+0x4e>
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	785b      	ldrb	r3, [r3, #1]
 8004f48:	001a      	movs	r2, r3
 8004f4a:	2310      	movs	r3, #16
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	d008      	beq.n	8004f62 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	785b      	ldrb	r3, [r3, #1]
 8004f54:	2210      	movs	r2, #16
 8004f56:	4393      	bics	r3, r2
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	330a      	adds	r3, #10
 8004f5c:	b2da      	uxtb	r2, r3
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d11c      	bne.n	8004fa2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	78db      	ldrb	r3, [r3, #3]
 8004f6c:	0018      	movs	r0, r3
 8004f6e:	f000 fa6a 	bl	8005446 <RTC_ByteToBcd2>
 8004f72:	0003      	movs	r3, r0
 8004f74:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	785b      	ldrb	r3, [r3, #1]
 8004f7a:	0018      	movs	r0, r3
 8004f7c:	f000 fa63 	bl	8005446 <RTC_ByteToBcd2>
 8004f80:	0003      	movs	r3, r0
 8004f82:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004f84:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	789b      	ldrb	r3, [r3, #2]
 8004f8a:	0018      	movs	r0, r3
 8004f8c:	f000 fa5b 	bl	8005446 <RTC_ByteToBcd2>
 8004f90:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004f92:	0022      	movs	r2, r4
 8004f94:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	617b      	str	r3, [r7, #20]
 8004fa0:	e00e      	b.n	8004fc0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	78db      	ldrb	r3, [r3, #3]
 8004fa6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	785b      	ldrb	r3, [r3, #1]
 8004fac:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004fae:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8004fb0:	68ba      	ldr	r2, [r7, #8]
 8004fb2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8004fb4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	22ca      	movs	r2, #202	; 0xca
 8004fc6:	625a      	str	r2, [r3, #36]	; 0x24
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2253      	movs	r2, #83	; 0x53
 8004fce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	0018      	movs	r0, r3
 8004fd4:	f000 fa0d 	bl	80053f2 <RTC_EnterInitMode>
 8004fd8:	1e03      	subs	r3, r0, #0
 8004fda:	d00d      	beq.n	8004ff8 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	22ff      	movs	r2, #255	; 0xff
 8004fe2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2221      	movs	r2, #33	; 0x21
 8004fe8:	2104      	movs	r1, #4
 8004fea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2220      	movs	r2, #32
 8004ff0:	2100      	movs	r1, #0
 8004ff2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e034      	b.n	8005062 <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	491b      	ldr	r1, [pc, #108]	; (800506c <HAL_RTC_SetDate+0x158>)
 8005000:	400a      	ands	r2, r1
 8005002:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68da      	ldr	r2, [r3, #12]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2180      	movs	r1, #128	; 0x80
 8005010:	438a      	bics	r2, r1
 8005012:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	2220      	movs	r2, #32
 800501c:	4013      	ands	r3, r2
 800501e:	d113      	bne.n	8005048 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	0018      	movs	r0, r3
 8005024:	f000 f9be 	bl	80053a4 <HAL_RTC_WaitForSynchro>
 8005028:	1e03      	subs	r3, r0, #0
 800502a:	d00d      	beq.n	8005048 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	22ff      	movs	r2, #255	; 0xff
 8005032:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2221      	movs	r2, #33	; 0x21
 8005038:	2104      	movs	r1, #4
 800503a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2220      	movs	r2, #32
 8005040:	2100      	movs	r1, #0
 8005042:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e00c      	b.n	8005062 <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	22ff      	movs	r2, #255	; 0xff
 800504e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2221      	movs	r2, #33	; 0x21
 8005054:	2101      	movs	r1, #1
 8005056:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2220      	movs	r2, #32
 800505c:	2100      	movs	r1, #0
 800505e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005060:	2300      	movs	r3, #0
  }
}
 8005062:	0018      	movs	r0, r3
 8005064:	46bd      	mov	sp, r7
 8005066:	b007      	add	sp, #28
 8005068:	bd90      	pop	{r4, r7, pc}
 800506a:	46c0      	nop			; (mov r8, r8)
 800506c:	00ffff3f 	.word	0x00ffff3f

08005070 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	4a21      	ldr	r2, [pc, #132]	; (8005108 <HAL_RTC_GetDate+0x98>)
 8005084:	4013      	ands	r3, r2
 8005086:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	0c1b      	lsrs	r3, r3, #16
 800508c:	b2da      	uxtb	r2, r3
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	0a1b      	lsrs	r3, r3, #8
 8005096:	b2db      	uxtb	r3, r3
 8005098:	221f      	movs	r2, #31
 800509a:	4013      	ands	r3, r2
 800509c:	b2da      	uxtb	r2, r3
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	223f      	movs	r2, #63	; 0x3f
 80050a8:	4013      	ands	r3, r2
 80050aa:	b2da      	uxtb	r2, r3
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	0b5b      	lsrs	r3, r3, #13
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2207      	movs	r2, #7
 80050b8:	4013      	ands	r3, r2
 80050ba:	b2da      	uxtb	r2, r3
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d11a      	bne.n	80050fc <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	78db      	ldrb	r3, [r3, #3]
 80050ca:	0018      	movs	r0, r3
 80050cc:	f000 f9e4 	bl	8005498 <RTC_Bcd2ToByte>
 80050d0:	0003      	movs	r3, r0
 80050d2:	001a      	movs	r2, r3
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	785b      	ldrb	r3, [r3, #1]
 80050dc:	0018      	movs	r0, r3
 80050de:	f000 f9db 	bl	8005498 <RTC_Bcd2ToByte>
 80050e2:	0003      	movs	r3, r0
 80050e4:	001a      	movs	r2, r3
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	789b      	ldrb	r3, [r3, #2]
 80050ee:	0018      	movs	r0, r3
 80050f0:	f000 f9d2 	bl	8005498 <RTC_Bcd2ToByte>
 80050f4:	0003      	movs	r3, r0
 80050f6:	001a      	movs	r2, r3
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	0018      	movs	r0, r3
 8005100:	46bd      	mov	sp, r7
 8005102:	b006      	add	sp, #24
 8005104:	bd80      	pop	{r7, pc}
 8005106:	46c0      	nop			; (mov r8, r8)
 8005108:	00ffff3f 	.word	0x00ffff3f

0800510c <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800510c:	b590      	push	{r4, r7, lr}
 800510e:	b089      	sub	sp, #36	; 0x24
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2220      	movs	r2, #32
 800511c:	5c9b      	ldrb	r3, [r3, r2]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d101      	bne.n	8005126 <HAL_RTC_SetAlarm_IT+0x1a>
 8005122:	2302      	movs	r3, #2
 8005124:	e130      	b.n	8005388 <HAL_RTC_SetAlarm_IT+0x27c>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2220      	movs	r2, #32
 800512a:	2101      	movs	r1, #1
 800512c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2221      	movs	r2, #33	; 0x21
 8005132:	2102      	movs	r1, #2
 8005134:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d136      	bne.n	80051aa <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	2240      	movs	r2, #64	; 0x40
 8005144:	4013      	ands	r3, r2
 8005146:	d102      	bne.n	800514e <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	2200      	movs	r2, #0
 800514c:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	0018      	movs	r0, r3
 8005154:	f000 f977 	bl	8005446 <RTC_ByteToBcd2>
 8005158:	0003      	movs	r3, r0
 800515a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	785b      	ldrb	r3, [r3, #1]
 8005160:	0018      	movs	r0, r3
 8005162:	f000 f970 	bl	8005446 <RTC_ByteToBcd2>
 8005166:	0003      	movs	r3, r0
 8005168:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800516a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	789b      	ldrb	r3, [r3, #2]
 8005170:	0018      	movs	r0, r3
 8005172:	f000 f968 	bl	8005446 <RTC_ByteToBcd2>
 8005176:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005178:	0022      	movs	r2, r4
 800517a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	78db      	ldrb	r3, [r3, #3]
 8005180:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005182:	431a      	orrs	r2, r3
 8005184:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	2220      	movs	r2, #32
 800518a:	5c9b      	ldrb	r3, [r3, r2]
 800518c:	0018      	movs	r0, r3
 800518e:	f000 f95a 	bl	8005446 <RTC_ByteToBcd2>
 8005192:	0003      	movs	r3, r0
 8005194:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005196:	0022      	movs	r2, r4
 8005198:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800519e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80051a4:	4313      	orrs	r3, r2
 80051a6:	61fb      	str	r3, [r7, #28]
 80051a8:	e022      	b.n	80051f0 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	2240      	movs	r2, #64	; 0x40
 80051b2:	4013      	ands	r3, r2
 80051b4:	d102      	bne.n	80051bc <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	2200      	movs	r2, #0
 80051ba:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	785b      	ldrb	r3, [r3, #1]
 80051c6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80051c8:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80051ca:	68ba      	ldr	r2, [r7, #8]
 80051cc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80051ce:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	78db      	ldrb	r3, [r3, #3]
 80051d4:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80051d6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	2120      	movs	r1, #32
 80051dc:	5c5b      	ldrb	r3, [r3, r1]
 80051de:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80051e0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80051e6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80051ec:	4313      	orrs	r3, r2
 80051ee:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	685a      	ldr	r2, [r3, #4]
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	699b      	ldr	r3, [r3, #24]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	22ca      	movs	r2, #202	; 0xca
 8005202:	625a      	str	r2, [r3, #36]	; 0x24
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2253      	movs	r2, #83	; 0x53
 800520a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005210:	2380      	movs	r3, #128	; 0x80
 8005212:	005b      	lsls	r3, r3, #1
 8005214:	429a      	cmp	r2, r3
 8005216:	d14e      	bne.n	80052b6 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	689a      	ldr	r2, [r3, #8]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	495b      	ldr	r1, [pc, #364]	; (8005390 <HAL_RTC_SetAlarm_IT+0x284>)
 8005224:	400a      	ands	r2, r1
 8005226:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	22ff      	movs	r2, #255	; 0xff
 8005230:	401a      	ands	r2, r3
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4957      	ldr	r1, [pc, #348]	; (8005394 <HAL_RTC_SetAlarm_IT+0x288>)
 8005238:	430a      	orrs	r2, r1
 800523a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800523c:	f7fd fc80 	bl	8002b40 <HAL_GetTick>
 8005240:	0003      	movs	r3, r0
 8005242:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005244:	e016      	b.n	8005274 <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005246:	f7fd fc7b 	bl	8002b40 <HAL_GetTick>
 800524a:	0002      	movs	r2, r0
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	1ad2      	subs	r2, r2, r3
 8005250:	23fa      	movs	r3, #250	; 0xfa
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	429a      	cmp	r2, r3
 8005256:	d90d      	bls.n	8005274 <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	22ff      	movs	r2, #255	; 0xff
 800525e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2221      	movs	r2, #33	; 0x21
 8005264:	2103      	movs	r1, #3
 8005266:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2220      	movs	r2, #32
 800526c:	2100      	movs	r1, #0
 800526e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e089      	b.n	8005388 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	2201      	movs	r2, #1
 800527c:	4013      	ands	r3, r2
 800527e:	d0e2      	beq.n	8005246 <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	69fa      	ldr	r2, [r7, #28]
 8005286:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	69ba      	ldr	r2, [r7, #24]
 800528e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	689a      	ldr	r2, [r3, #8]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2180      	movs	r1, #128	; 0x80
 800529c:	0049      	lsls	r1, r1, #1
 800529e:	430a      	orrs	r2, r1
 80052a0:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	689a      	ldr	r2, [r3, #8]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2180      	movs	r1, #128	; 0x80
 80052ae:	0149      	lsls	r1, r1, #5
 80052b0:	430a      	orrs	r2, r1
 80052b2:	609a      	str	r2, [r3, #8]
 80052b4:	e04d      	b.n	8005352 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	689a      	ldr	r2, [r3, #8]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4935      	ldr	r1, [pc, #212]	; (8005398 <HAL_RTC_SetAlarm_IT+0x28c>)
 80052c2:	400a      	ands	r2, r1
 80052c4:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	22ff      	movs	r2, #255	; 0xff
 80052ce:	401a      	ands	r2, r3
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4931      	ldr	r1, [pc, #196]	; (800539c <HAL_RTC_SetAlarm_IT+0x290>)
 80052d6:	430a      	orrs	r2, r1
 80052d8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80052da:	f7fd fc31 	bl	8002b40 <HAL_GetTick>
 80052de:	0003      	movs	r3, r0
 80052e0:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80052e2:	e016      	b.n	8005312 <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80052e4:	f7fd fc2c 	bl	8002b40 <HAL_GetTick>
 80052e8:	0002      	movs	r2, r0
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	1ad2      	subs	r2, r2, r3
 80052ee:	23fa      	movs	r3, #250	; 0xfa
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d90d      	bls.n	8005312 <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	22ff      	movs	r2, #255	; 0xff
 80052fc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2221      	movs	r2, #33	; 0x21
 8005302:	2103      	movs	r1, #3
 8005304:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2220      	movs	r2, #32
 800530a:	2100      	movs	r1, #0
 800530c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e03a      	b.n	8005388 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	2202      	movs	r2, #2
 800531a:	4013      	ands	r3, r2
 800531c:	d0e2      	beq.n	80052e4 <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	69fa      	ldr	r2, [r7, #28]
 8005324:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	69ba      	ldr	r2, [r7, #24]
 800532c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	689a      	ldr	r2, [r3, #8]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2180      	movs	r1, #128	; 0x80
 800533a:	0089      	lsls	r1, r1, #2
 800533c:	430a      	orrs	r2, r1
 800533e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	689a      	ldr	r2, [r3, #8]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2180      	movs	r1, #128	; 0x80
 800534c:	0189      	lsls	r1, r1, #6
 800534e:	430a      	orrs	r2, r1
 8005350:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005352:	4b13      	ldr	r3, [pc, #76]	; (80053a0 <HAL_RTC_SetAlarm_IT+0x294>)
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	4b12      	ldr	r3, [pc, #72]	; (80053a0 <HAL_RTC_SetAlarm_IT+0x294>)
 8005358:	2180      	movs	r1, #128	; 0x80
 800535a:	0289      	lsls	r1, r1, #10
 800535c:	430a      	orrs	r2, r1
 800535e:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8005360:	4b0f      	ldr	r3, [pc, #60]	; (80053a0 <HAL_RTC_SetAlarm_IT+0x294>)
 8005362:	689a      	ldr	r2, [r3, #8]
 8005364:	4b0e      	ldr	r3, [pc, #56]	; (80053a0 <HAL_RTC_SetAlarm_IT+0x294>)
 8005366:	2180      	movs	r1, #128	; 0x80
 8005368:	0289      	lsls	r1, r1, #10
 800536a:	430a      	orrs	r2, r1
 800536c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	22ff      	movs	r2, #255	; 0xff
 8005374:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2221      	movs	r2, #33	; 0x21
 800537a:	2101      	movs	r1, #1
 800537c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2220      	movs	r2, #32
 8005382:	2100      	movs	r1, #0
 8005384:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005386:	2300      	movs	r3, #0
}
 8005388:	0018      	movs	r0, r3
 800538a:	46bd      	mov	sp, r7
 800538c:	b009      	add	sp, #36	; 0x24
 800538e:	bd90      	pop	{r4, r7, pc}
 8005390:	fffffeff 	.word	0xfffffeff
 8005394:	fffffe7f 	.word	0xfffffe7f
 8005398:	fffffdff 	.word	0xfffffdff
 800539c:	fffffd7f 	.word	0xfffffd7f
 80053a0:	40010400 	.word	0x40010400

080053a4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68da      	ldr	r2, [r3, #12]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	21a0      	movs	r1, #160	; 0xa0
 80053b8:	438a      	bics	r2, r1
 80053ba:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80053bc:	f7fd fbc0 	bl	8002b40 <HAL_GetTick>
 80053c0:	0003      	movs	r3, r0
 80053c2:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80053c4:	e00a      	b.n	80053dc <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80053c6:	f7fd fbbb 	bl	8002b40 <HAL_GetTick>
 80053ca:	0002      	movs	r2, r0
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	1ad2      	subs	r2, r2, r3
 80053d0:	23fa      	movs	r3, #250	; 0xfa
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d901      	bls.n	80053dc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	e006      	b.n	80053ea <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	2220      	movs	r2, #32
 80053e4:	4013      	ands	r3, r2
 80053e6:	d0ee      	beq.n	80053c6 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	0018      	movs	r0, r3
 80053ec:	46bd      	mov	sp, r7
 80053ee:	b004      	add	sp, #16
 80053f0:	bd80      	pop	{r7, pc}

080053f2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80053f2:	b580      	push	{r7, lr}
 80053f4:	b084      	sub	sp, #16
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	2240      	movs	r2, #64	; 0x40
 8005402:	4013      	ands	r3, r2
 8005404:	d11a      	bne.n	800543c <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2201      	movs	r2, #1
 800540c:	4252      	negs	r2, r2
 800540e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005410:	f7fd fb96 	bl	8002b40 <HAL_GetTick>
 8005414:	0003      	movs	r3, r0
 8005416:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005418:	e00a      	b.n	8005430 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800541a:	f7fd fb91 	bl	8002b40 <HAL_GetTick>
 800541e:	0002      	movs	r2, r0
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	1ad2      	subs	r2, r2, r3
 8005424:	23fa      	movs	r3, #250	; 0xfa
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	429a      	cmp	r2, r3
 800542a:	d901      	bls.n	8005430 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e006      	b.n	800543e <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	2240      	movs	r2, #64	; 0x40
 8005438:	4013      	ands	r3, r2
 800543a:	d0ee      	beq.n	800541a <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	0018      	movs	r0, r3
 8005440:	46bd      	mov	sp, r7
 8005442:	b004      	add	sp, #16
 8005444:	bd80      	pop	{r7, pc}

08005446 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005446:	b580      	push	{r7, lr}
 8005448:	b084      	sub	sp, #16
 800544a:	af00      	add	r7, sp, #0
 800544c:	0002      	movs	r2, r0
 800544e:	1dfb      	adds	r3, r7, #7
 8005450:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8005452:	2300      	movs	r3, #0
 8005454:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8005456:	230b      	movs	r3, #11
 8005458:	18fb      	adds	r3, r7, r3
 800545a:	1dfa      	adds	r2, r7, #7
 800545c:	7812      	ldrb	r2, [r2, #0]
 800545e:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8005460:	e008      	b.n	8005474 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	3301      	adds	r3, #1
 8005466:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8005468:	220b      	movs	r2, #11
 800546a:	18bb      	adds	r3, r7, r2
 800546c:	18ba      	adds	r2, r7, r2
 800546e:	7812      	ldrb	r2, [r2, #0]
 8005470:	3a0a      	subs	r2, #10
 8005472:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8005474:	230b      	movs	r3, #11
 8005476:	18fb      	adds	r3, r7, r3
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	2b09      	cmp	r3, #9
 800547c:	d8f1      	bhi.n	8005462 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	b2db      	uxtb	r3, r3
 8005482:	011b      	lsls	r3, r3, #4
 8005484:	b2da      	uxtb	r2, r3
 8005486:	230b      	movs	r3, #11
 8005488:	18fb      	adds	r3, r7, r3
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	4313      	orrs	r3, r2
 800548e:	b2db      	uxtb	r3, r3
}
 8005490:	0018      	movs	r0, r3
 8005492:	46bd      	mov	sp, r7
 8005494:	b004      	add	sp, #16
 8005496:	bd80      	pop	{r7, pc}

08005498 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	0002      	movs	r2, r0
 80054a0:	1dfb      	adds	r3, r7, #7
 80054a2:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80054a4:	1dfb      	adds	r3, r7, #7
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	091b      	lsrs	r3, r3, #4
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	001a      	movs	r2, r3
 80054ae:	0013      	movs	r3, r2
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	189b      	adds	r3, r3, r2
 80054b4:	005b      	lsls	r3, r3, #1
 80054b6:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	b2da      	uxtb	r2, r3
 80054bc:	1dfb      	adds	r3, r7, #7
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	210f      	movs	r1, #15
 80054c2:	400b      	ands	r3, r1
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	18d3      	adds	r3, r2, r3
 80054c8:	b2db      	uxtb	r3, r3
}
 80054ca:	0018      	movs	r0, r3
 80054cc:	46bd      	mov	sp, r7
 80054ce:	b004      	add	sp, #16
 80054d0:	bd80      	pop	{r7, pc}
	...

080054d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d101      	bne.n	80054e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e059      	b.n	800559a <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2251      	movs	r2, #81	; 0x51
 80054f0:	5c9b      	ldrb	r3, [r3, r2]
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d107      	bne.n	8005508 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2250      	movs	r2, #80	; 0x50
 80054fc:	2100      	movs	r1, #0
 80054fe:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	0018      	movs	r0, r3
 8005504:	f7fd f8b0 	bl	8002668 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2251      	movs	r2, #81	; 0x51
 800550c:	2102      	movs	r1, #2
 800550e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2140      	movs	r1, #64	; 0x40
 800551c:	438a      	bics	r2, r1
 800551e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685a      	ldr	r2, [r3, #4]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	431a      	orrs	r2, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	431a      	orrs	r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	431a      	orrs	r2, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	431a      	orrs	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6999      	ldr	r1, [r3, #24]
 8005540:	2380      	movs	r3, #128	; 0x80
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	400b      	ands	r3, r1
 8005546:	431a      	orrs	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	69db      	ldr	r3, [r3, #28]
 800554c:	431a      	orrs	r2, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a1b      	ldr	r3, [r3, #32]
 8005552:	431a      	orrs	r2, r3
 8005554:	0011      	movs	r1, r2
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	430a      	orrs	r2, r1
 8005560:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	0c1b      	lsrs	r3, r3, #16
 8005568:	2204      	movs	r2, #4
 800556a:	4013      	ands	r3, r2
 800556c:	0019      	movs	r1, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	430a      	orrs	r2, r1
 8005578:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	69da      	ldr	r2, [r3, #28]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4907      	ldr	r1, [pc, #28]	; (80055a4 <HAL_SPI_Init+0xd0>)
 8005586:	400a      	ands	r2, r1
 8005588:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2251      	movs	r2, #81	; 0x51
 8005594:	2101      	movs	r1, #1
 8005596:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	0018      	movs	r0, r3
 800559c:	46bd      	mov	sp, r7
 800559e:	b002      	add	sp, #8
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	46c0      	nop			; (mov r8, r8)
 80055a4:	fffff7ff 	.word	0xfffff7ff

080055a8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b088      	sub	sp, #32
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	603b      	str	r3, [r7, #0]
 80055b4:	1dbb      	adds	r3, r7, #6
 80055b6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80055b8:	231f      	movs	r3, #31
 80055ba:	18fb      	adds	r3, r7, r3
 80055bc:	2200      	movs	r2, #0
 80055be:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2250      	movs	r2, #80	; 0x50
 80055c4:	5c9b      	ldrb	r3, [r3, r2]
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d101      	bne.n	80055ce <HAL_SPI_Transmit+0x26>
 80055ca:	2302      	movs	r3, #2
 80055cc:	e136      	b.n	800583c <HAL_SPI_Transmit+0x294>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2250      	movs	r2, #80	; 0x50
 80055d2:	2101      	movs	r1, #1
 80055d4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055d6:	f7fd fab3 	bl	8002b40 <HAL_GetTick>
 80055da:	0003      	movs	r3, r0
 80055dc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80055de:	2316      	movs	r3, #22
 80055e0:	18fb      	adds	r3, r7, r3
 80055e2:	1dba      	adds	r2, r7, #6
 80055e4:	8812      	ldrh	r2, [r2, #0]
 80055e6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2251      	movs	r2, #81	; 0x51
 80055ec:	5c9b      	ldrb	r3, [r3, r2]
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d004      	beq.n	80055fe <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80055f4:	231f      	movs	r3, #31
 80055f6:	18fb      	adds	r3, r7, r3
 80055f8:	2202      	movs	r2, #2
 80055fa:	701a      	strb	r2, [r3, #0]
    goto error;
 80055fc:	e113      	b.n	8005826 <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d003      	beq.n	800560c <HAL_SPI_Transmit+0x64>
 8005604:	1dbb      	adds	r3, r7, #6
 8005606:	881b      	ldrh	r3, [r3, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d104      	bne.n	8005616 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800560c:	231f      	movs	r3, #31
 800560e:	18fb      	adds	r3, r7, r3
 8005610:	2201      	movs	r2, #1
 8005612:	701a      	strb	r2, [r3, #0]
    goto error;
 8005614:	e107      	b.n	8005826 <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2251      	movs	r2, #81	; 0x51
 800561a:	2103      	movs	r1, #3
 800561c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	68ba      	ldr	r2, [r7, #8]
 8005628:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	1dba      	adds	r2, r7, #6
 800562e:	8812      	ldrh	r2, [r2, #0]
 8005630:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	1dba      	adds	r2, r7, #6
 8005636:	8812      	ldrh	r2, [r2, #0]
 8005638:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	689a      	ldr	r2, [r3, #8]
 800565c:	2380      	movs	r3, #128	; 0x80
 800565e:	021b      	lsls	r3, r3, #8
 8005660:	429a      	cmp	r2, r3
 8005662:	d108      	bne.n	8005676 <HAL_SPI_Transmit+0xce>
  {
    SPI_1LINE_TX(hspi);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2180      	movs	r1, #128	; 0x80
 8005670:	01c9      	lsls	r1, r1, #7
 8005672:	430a      	orrs	r2, r1
 8005674:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2240      	movs	r2, #64	; 0x40
 800567e:	4013      	ands	r3, r2
 8005680:	2b40      	cmp	r3, #64	; 0x40
 8005682:	d007      	beq.n	8005694 <HAL_SPI_Transmit+0xec>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2140      	movs	r1, #64	; 0x40
 8005690:	430a      	orrs	r2, r1
 8005692:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	68da      	ldr	r2, [r3, #12]
 8005698:	2380      	movs	r3, #128	; 0x80
 800569a:	011b      	lsls	r3, r3, #4
 800569c:	429a      	cmp	r2, r3
 800569e:	d14e      	bne.n	800573e <HAL_SPI_Transmit+0x196>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d004      	beq.n	80056b2 <HAL_SPI_Transmit+0x10a>
 80056a8:	2316      	movs	r3, #22
 80056aa:	18fb      	adds	r3, r7, r3
 80056ac:	881b      	ldrh	r3, [r3, #0]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d13f      	bne.n	8005732 <HAL_SPI_Transmit+0x18a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b6:	881a      	ldrh	r2, [r3, #0]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c2:	1c9a      	adds	r2, r3, #2
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	3b01      	subs	r3, #1
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80056d6:	e02c      	b.n	8005732 <HAL_SPI_Transmit+0x18a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	2202      	movs	r2, #2
 80056e0:	4013      	ands	r3, r2
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d112      	bne.n	800570c <HAL_SPI_Transmit+0x164>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ea:	881a      	ldrh	r2, [r3, #0]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f6:	1c9a      	adds	r2, r3, #2
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005700:	b29b      	uxth	r3, r3
 8005702:	3b01      	subs	r3, #1
 8005704:	b29a      	uxth	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	86da      	strh	r2, [r3, #54]	; 0x36
 800570a:	e012      	b.n	8005732 <HAL_SPI_Transmit+0x18a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800570c:	f7fd fa18 	bl	8002b40 <HAL_GetTick>
 8005710:	0002      	movs	r2, r0
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	683a      	ldr	r2, [r7, #0]
 8005718:	429a      	cmp	r2, r3
 800571a:	d802      	bhi.n	8005722 <HAL_SPI_Transmit+0x17a>
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	3301      	adds	r3, #1
 8005720:	d102      	bne.n	8005728 <HAL_SPI_Transmit+0x180>
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d104      	bne.n	8005732 <HAL_SPI_Transmit+0x18a>
        {
          errorcode = HAL_TIMEOUT;
 8005728:	231f      	movs	r3, #31
 800572a:	18fb      	adds	r3, r7, r3
 800572c:	2203      	movs	r2, #3
 800572e:	701a      	strb	r2, [r3, #0]
          goto error;
 8005730:	e079      	b.n	8005826 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005736:	b29b      	uxth	r3, r3
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1cd      	bne.n	80056d8 <HAL_SPI_Transmit+0x130>
 800573c:	e04f      	b.n	80057de <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d004      	beq.n	8005750 <HAL_SPI_Transmit+0x1a8>
 8005746:	2316      	movs	r3, #22
 8005748:	18fb      	adds	r3, r7, r3
 800574a:	881b      	ldrh	r3, [r3, #0]
 800574c:	2b01      	cmp	r3, #1
 800574e:	d141      	bne.n	80057d4 <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	330c      	adds	r3, #12
 800575a:	7812      	ldrb	r2, [r2, #0]
 800575c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005762:	1c5a      	adds	r2, r3, #1
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800576c:	b29b      	uxth	r3, r3
 800576e:	3b01      	subs	r3, #1
 8005770:	b29a      	uxth	r2, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005776:	e02d      	b.n	80057d4 <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	2202      	movs	r2, #2
 8005780:	4013      	ands	r3, r2
 8005782:	2b02      	cmp	r3, #2
 8005784:	d113      	bne.n	80057ae <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	330c      	adds	r3, #12
 8005790:	7812      	ldrb	r2, [r2, #0]
 8005792:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005798:	1c5a      	adds	r2, r3, #1
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	3b01      	subs	r3, #1
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	86da      	strh	r2, [r3, #54]	; 0x36
 80057ac:	e012      	b.n	80057d4 <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057ae:	f7fd f9c7 	bl	8002b40 <HAL_GetTick>
 80057b2:	0002      	movs	r2, r0
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	683a      	ldr	r2, [r7, #0]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d802      	bhi.n	80057c4 <HAL_SPI_Transmit+0x21c>
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	3301      	adds	r3, #1
 80057c2:	d102      	bne.n	80057ca <HAL_SPI_Transmit+0x222>
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d104      	bne.n	80057d4 <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 80057ca:	231f      	movs	r3, #31
 80057cc:	18fb      	adds	r3, r7, r3
 80057ce:	2203      	movs	r2, #3
 80057d0:	701a      	strb	r2, [r3, #0]
          goto error;
 80057d2:	e028      	b.n	8005826 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057d8:	b29b      	uxth	r3, r3
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d1cc      	bne.n	8005778 <HAL_SPI_Transmit+0x1d0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057de:	69ba      	ldr	r2, [r7, #24]
 80057e0:	6839      	ldr	r1, [r7, #0]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	0018      	movs	r0, r3
 80057e6:	f000 fa99 	bl	8005d1c <SPI_EndRxTxTransaction>
 80057ea:	1e03      	subs	r3, r0, #0
 80057ec:	d002      	beq.n	80057f4 <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2220      	movs	r2, #32
 80057f2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d10a      	bne.n	8005812 <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057fc:	2300      	movs	r3, #0
 80057fe:	613b      	str	r3, [r7, #16]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	613b      	str	r3, [r7, #16]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	613b      	str	r3, [r7, #16]
 8005810:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005816:	2b00      	cmp	r3, #0
 8005818:	d004      	beq.n	8005824 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 800581a:	231f      	movs	r3, #31
 800581c:	18fb      	adds	r3, r7, r3
 800581e:	2201      	movs	r2, #1
 8005820:	701a      	strb	r2, [r3, #0]
 8005822:	e000      	b.n	8005826 <HAL_SPI_Transmit+0x27e>
  }

error:
 8005824:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2251      	movs	r2, #81	; 0x51
 800582a:	2101      	movs	r1, #1
 800582c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2250      	movs	r2, #80	; 0x50
 8005832:	2100      	movs	r1, #0
 8005834:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005836:	231f      	movs	r3, #31
 8005838:	18fb      	adds	r3, r7, r3
 800583a:	781b      	ldrb	r3, [r3, #0]
}
 800583c:	0018      	movs	r0, r3
 800583e:	46bd      	mov	sp, r7
 8005840:	b008      	add	sp, #32
 8005842:	bd80      	pop	{r7, pc}

08005844 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b086      	sub	sp, #24
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	1dbb      	adds	r3, r7, #6
 8005850:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005852:	2317      	movs	r3, #23
 8005854:	18fb      	adds	r3, r7, r3
 8005856:	2200      	movs	r2, #0
 8005858:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2250      	movs	r2, #80	; 0x50
 800585e:	5c9b      	ldrb	r3, [r3, r2]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d101      	bne.n	8005868 <HAL_SPI_Transmit_IT+0x24>
 8005864:	2302      	movs	r3, #2
 8005866:	e072      	b.n	800594e <HAL_SPI_Transmit_IT+0x10a>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2250      	movs	r2, #80	; 0x50
 800586c:	2101      	movs	r1, #1
 800586e:	5499      	strb	r1, [r3, r2]

  if ((pData == NULL) || (Size == 0U))
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d003      	beq.n	800587e <HAL_SPI_Transmit_IT+0x3a>
 8005876:	1dbb      	adds	r3, r7, #6
 8005878:	881b      	ldrh	r3, [r3, #0]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d104      	bne.n	8005888 <HAL_SPI_Transmit_IT+0x44>
  {
    errorcode = HAL_ERROR;
 800587e:	2317      	movs	r3, #23
 8005880:	18fb      	adds	r3, r7, r3
 8005882:	2201      	movs	r2, #1
 8005884:	701a      	strb	r2, [r3, #0]
    goto error;
 8005886:	e05b      	b.n	8005940 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2251      	movs	r2, #81	; 0x51
 800588c:	5c9b      	ldrb	r3, [r3, r2]
 800588e:	b2db      	uxtb	r3, r3
 8005890:	2b01      	cmp	r3, #1
 8005892:	d004      	beq.n	800589e <HAL_SPI_Transmit_IT+0x5a>
  {
    errorcode = HAL_BUSY;
 8005894:	2317      	movs	r3, #23
 8005896:	18fb      	adds	r3, r7, r3
 8005898:	2202      	movs	r2, #2
 800589a:	701a      	strb	r2, [r3, #0]
    goto error;
 800589c:	e050      	b.n	8005940 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2251      	movs	r2, #81	; 0x51
 80058a2:	2103      	movs	r1, #3
 80058a4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2200      	movs	r2, #0
 80058aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	68ba      	ldr	r2, [r7, #8]
 80058b0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	1dba      	adds	r2, r7, #6
 80058b6:	8812      	ldrh	r2, [r2, #0]
 80058b8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	1dba      	adds	r2, r7, #6
 80058be:	8812      	ldrh	r2, [r2, #0]
 80058c0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2200      	movs	r2, #0
 80058cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2200      	movs	r2, #0
 80058d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d003      	beq.n	80058ea <HAL_SPI_Transmit_IT+0xa6>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	4a1c      	ldr	r2, [pc, #112]	; (8005958 <HAL_SPI_Transmit_IT+0x114>)
 80058e6:	645a      	str	r2, [r3, #68]	; 0x44
 80058e8:	e002      	b.n	80058f0 <HAL_SPI_Transmit_IT+0xac>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	4a1b      	ldr	r2, [pc, #108]	; (800595c <HAL_SPI_Transmit_IT+0x118>)
 80058ee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	689a      	ldr	r2, [r3, #8]
 80058f4:	2380      	movs	r3, #128	; 0x80
 80058f6:	021b      	lsls	r3, r3, #8
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d108      	bne.n	800590e <HAL_SPI_Transmit_IT+0xca>
  {
    SPI_1LINE_TX(hspi);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2180      	movs	r1, #128	; 0x80
 8005908:	01c9      	lsls	r1, r1, #7
 800590a:	430a      	orrs	r2, r1
 800590c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	685a      	ldr	r2, [r3, #4]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	21a0      	movs	r1, #160	; 0xa0
 800591a:	430a      	orrs	r2, r1
 800591c:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2240      	movs	r2, #64	; 0x40
 8005926:	4013      	ands	r3, r2
 8005928:	2b40      	cmp	r3, #64	; 0x40
 800592a:	d008      	beq.n	800593e <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2140      	movs	r1, #64	; 0x40
 8005938:	430a      	orrs	r2, r1
 800593a:	601a      	str	r2, [r3, #0]
 800593c:	e000      	b.n	8005940 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 800593e:	46c0      	nop			; (mov r8, r8)
  __HAL_UNLOCK(hspi);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2250      	movs	r2, #80	; 0x50
 8005944:	2100      	movs	r1, #0
 8005946:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005948:	2317      	movs	r3, #23
 800594a:	18fb      	adds	r3, r7, r3
 800594c:	781b      	ldrb	r3, [r3, #0]
}
 800594e:	0018      	movs	r0, r3
 8005950:	46bd      	mov	sp, r7
 8005952:	b006      	add	sp, #24
 8005954:	bd80      	pop	{r7, pc}
 8005956:	46c0      	nop			; (mov r8, r8)
 8005958:	08005bf7 	.word	0x08005bf7
 800595c:	08005baf 	.word	0x08005baf

08005960 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b088      	sub	sp, #32
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	099b      	lsrs	r3, r3, #6
 800597c:	001a      	movs	r2, r3
 800597e:	2301      	movs	r3, #1
 8005980:	4013      	ands	r3, r2
 8005982:	d10f      	bne.n	80059a4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	2201      	movs	r2, #1
 8005988:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800598a:	d00b      	beq.n	80059a4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	099b      	lsrs	r3, r3, #6
 8005990:	001a      	movs	r2, r3
 8005992:	2301      	movs	r3, #1
 8005994:	4013      	ands	r3, r2
 8005996:	d005      	beq.n	80059a4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	0010      	movs	r0, r2
 80059a0:	4798      	blx	r3
    return;
 80059a2:	e0d6      	b.n	8005b52 <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	085b      	lsrs	r3, r3, #1
 80059a8:	001a      	movs	r2, r3
 80059aa:	2301      	movs	r3, #1
 80059ac:	4013      	ands	r3, r2
 80059ae:	d00b      	beq.n	80059c8 <HAL_SPI_IRQHandler+0x68>
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	09db      	lsrs	r3, r3, #7
 80059b4:	001a      	movs	r2, r3
 80059b6:	2301      	movs	r3, #1
 80059b8:	4013      	ands	r3, r2
 80059ba:	d005      	beq.n	80059c8 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	0010      	movs	r0, r2
 80059c4:	4798      	blx	r3
    return;
 80059c6:	e0c4      	b.n	8005b52 <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	095b      	lsrs	r3, r3, #5
 80059cc:	001a      	movs	r2, r3
 80059ce:	2301      	movs	r3, #1
 80059d0:	4013      	ands	r3, r2
 80059d2:	d10c      	bne.n	80059ee <HAL_SPI_IRQHandler+0x8e>
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	099b      	lsrs	r3, r3, #6
 80059d8:	001a      	movs	r2, r3
 80059da:	2301      	movs	r3, #1
 80059dc:	4013      	ands	r3, r2
 80059de:	d106      	bne.n	80059ee <HAL_SPI_IRQHandler+0x8e>
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	0a1b      	lsrs	r3, r3, #8
 80059e4:	001a      	movs	r2, r3
 80059e6:	2301      	movs	r3, #1
 80059e8:	4013      	ands	r3, r2
 80059ea:	d100      	bne.n	80059ee <HAL_SPI_IRQHandler+0x8e>
 80059ec:	e0b1      	b.n	8005b52 <HAL_SPI_IRQHandler+0x1f2>
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	095b      	lsrs	r3, r3, #5
 80059f2:	001a      	movs	r2, r3
 80059f4:	2301      	movs	r3, #1
 80059f6:	4013      	ands	r3, r2
 80059f8:	d100      	bne.n	80059fc <HAL_SPI_IRQHandler+0x9c>
 80059fa:	e0aa      	b.n	8005b52 <HAL_SPI_IRQHandler+0x1f2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	099b      	lsrs	r3, r3, #6
 8005a00:	001a      	movs	r2, r3
 8005a02:	2301      	movs	r3, #1
 8005a04:	4013      	ands	r3, r2
 8005a06:	d023      	beq.n	8005a50 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2251      	movs	r2, #81	; 0x51
 8005a0c:	5c9b      	ldrb	r3, [r3, r2]
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	2b03      	cmp	r3, #3
 8005a12:	d011      	beq.n	8005a38 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a18:	2204      	movs	r2, #4
 8005a1a:	431a      	orrs	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a20:	2300      	movs	r3, #0
 8005a22:	617b      	str	r3, [r7, #20]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	617b      	str	r3, [r7, #20]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	617b      	str	r3, [r7, #20]
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	e00b      	b.n	8005a50 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a38:	2300      	movs	r3, #0
 8005a3a:	613b      	str	r3, [r7, #16]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	613b      	str	r3, [r7, #16]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	613b      	str	r3, [r7, #16]
 8005a4c:	693b      	ldr	r3, [r7, #16]
        return;
 8005a4e:	e080      	b.n	8005b52 <HAL_SPI_IRQHandler+0x1f2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	095b      	lsrs	r3, r3, #5
 8005a54:	001a      	movs	r2, r3
 8005a56:	2301      	movs	r3, #1
 8005a58:	4013      	ands	r3, r2
 8005a5a:	d014      	beq.n	8005a86 <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a60:	2201      	movs	r2, #1
 8005a62:	431a      	orrs	r2, r3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005a68:	2300      	movs	r3, #0
 8005a6a:	60fb      	str	r3, [r7, #12]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	60fb      	str	r3, [r7, #12]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2140      	movs	r1, #64	; 0x40
 8005a80:	438a      	bics	r2, r1
 8005a82:	601a      	str	r2, [r3, #0]
 8005a84:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	0a1b      	lsrs	r3, r3, #8
 8005a8a:	001a      	movs	r2, r3
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	4013      	ands	r3, r2
 8005a90:	d00c      	beq.n	8005aac <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a96:	2208      	movs	r2, #8
 8005a98:	431a      	orrs	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	60bb      	str	r3, [r7, #8]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	60bb      	str	r3, [r7, #8]
 8005aaa:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d04d      	beq.n	8005b50 <HAL_SPI_IRQHandler+0x1f0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	685a      	ldr	r2, [r3, #4]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	21e0      	movs	r1, #224	; 0xe0
 8005ac0:	438a      	bics	r2, r1
 8005ac2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2251      	movs	r2, #81	; 0x51
 8005ac8:	2101      	movs	r1, #1
 8005aca:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	2202      	movs	r2, #2
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	d103      	bne.n	8005adc <HAL_SPI_IRQHandler+0x17c>
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	4013      	ands	r3, r2
 8005ada:	d032      	beq.n	8005b42 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	685a      	ldr	r2, [r3, #4]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2103      	movs	r1, #3
 8005ae8:	438a      	bics	r2, r1
 8005aea:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d010      	beq.n	8005b16 <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005af8:	4a17      	ldr	r2, [pc, #92]	; (8005b58 <HAL_SPI_IRQHandler+0x1f8>)
 8005afa:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b00:	0018      	movs	r0, r3
 8005b02:	f7fd fbc9 	bl	8003298 <HAL_DMA_Abort_IT>
 8005b06:	1e03      	subs	r3, r0, #0
 8005b08:	d005      	beq.n	8005b16 <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b0e:	2240      	movs	r2, #64	; 0x40
 8005b10:	431a      	orrs	r2, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d016      	beq.n	8005b4c <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b22:	4a0d      	ldr	r2, [pc, #52]	; (8005b58 <HAL_SPI_IRQHandler+0x1f8>)
 8005b24:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b2a:	0018      	movs	r0, r3
 8005b2c:	f7fd fbb4 	bl	8003298 <HAL_DMA_Abort_IT>
 8005b30:	1e03      	subs	r3, r0, #0
 8005b32:	d00b      	beq.n	8005b4c <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b38:	2240      	movs	r2, #64	; 0x40
 8005b3a:	431a      	orrs	r2, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005b40:	e004      	b.n	8005b4c <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	0018      	movs	r0, r3
 8005b46:	f000 f809 	bl	8005b5c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005b4a:	e000      	b.n	8005b4e <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8005b4c:	46c0      	nop			; (mov r8, r8)
    return;
 8005b4e:	46c0      	nop			; (mov r8, r8)
 8005b50:	46c0      	nop			; (mov r8, r8)
  }
}
 8005b52:	46bd      	mov	sp, r7
 8005b54:	b008      	add	sp, #32
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	08005b85 	.word	0x08005b85

08005b5c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005b64:	46c0      	nop			; (mov r8, r8)
 8005b66:	46bd      	mov	sp, r7
 8005b68:	b002      	add	sp, #8
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b082      	sub	sp, #8
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2251      	movs	r2, #81	; 0x51
 8005b78:	5c9b      	ldrb	r3, [r3, r2]
 8005b7a:	b2db      	uxtb	r3, r3
}
 8005b7c:	0018      	movs	r0, r3
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	b002      	add	sp, #8
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b90:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2200      	movs	r2, #0
 8005b96:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	0018      	movs	r0, r3
 8005ba2:	f7ff ffdb 	bl	8005b5c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005ba6:	46c0      	nop			; (mov r8, r8)
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	b004      	add	sp, #16
 8005bac:	bd80      	pop	{r7, pc}

08005bae <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b082      	sub	sp, #8
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	330c      	adds	r3, #12
 8005bc0:	7812      	ldrb	r2, [r2, #0]
 8005bc2:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc8:	1c5a      	adds	r2, r3, #1
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	b29a      	uxth	r2, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d103      	bne.n	8005bee <SPI_TxISR_8BIT+0x40>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	0018      	movs	r0, r3
 8005bea:	f000 f8d5 	bl	8005d98 <SPI_CloseTx_ISR>
  }
}
 8005bee:	46c0      	nop			; (mov r8, r8)
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	b002      	add	sp, #8
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b082      	sub	sp, #8
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c02:	881a      	ldrh	r2, [r3, #0]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c0e:	1c9a      	adds	r2, r3, #2
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	b29a      	uxth	r2, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d103      	bne.n	8005c34 <SPI_TxISR_16BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	0018      	movs	r0, r3
 8005c30:	f000 f8b2 	bl	8005d98 <SPI_CloseTx_ISR>
  }
}
 8005c34:	46c0      	nop			; (mov r8, r8)
 8005c36:	46bd      	mov	sp, r7
 8005c38:	b002      	add	sp, #8
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	603b      	str	r3, [r7, #0]
 8005c48:	1dfb      	adds	r3, r7, #7
 8005c4a:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c4c:	e050      	b.n	8005cf0 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	3301      	adds	r3, #1
 8005c52:	d04d      	beq.n	8005cf0 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005c54:	f7fc ff74 	bl	8002b40 <HAL_GetTick>
 8005c58:	0002      	movs	r2, r0
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	683a      	ldr	r2, [r7, #0]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d902      	bls.n	8005c6a <SPI_WaitFlagStateUntilTimeout+0x2e>
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d142      	bne.n	8005cf0 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	685a      	ldr	r2, [r3, #4]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	21e0      	movs	r1, #224	; 0xe0
 8005c76:	438a      	bics	r2, r1
 8005c78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	685a      	ldr	r2, [r3, #4]
 8005c7e:	2382      	movs	r3, #130	; 0x82
 8005c80:	005b      	lsls	r3, r3, #1
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d113      	bne.n	8005cae <SPI_WaitFlagStateUntilTimeout+0x72>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	689a      	ldr	r2, [r3, #8]
 8005c8a:	2380      	movs	r3, #128	; 0x80
 8005c8c:	021b      	lsls	r3, r3, #8
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d005      	beq.n	8005c9e <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	689a      	ldr	r2, [r3, #8]
 8005c96:	2380      	movs	r3, #128	; 0x80
 8005c98:	00db      	lsls	r3, r3, #3
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d107      	bne.n	8005cae <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2140      	movs	r1, #64	; 0x40
 8005caa:	438a      	bics	r2, r1
 8005cac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cb2:	2380      	movs	r3, #128	; 0x80
 8005cb4:	019b      	lsls	r3, r3, #6
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d110      	bne.n	8005cdc <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4914      	ldr	r1, [pc, #80]	; (8005d18 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8005cc6:	400a      	ands	r2, r1
 8005cc8:	601a      	str	r2, [r3, #0]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2180      	movs	r1, #128	; 0x80
 8005cd6:	0189      	lsls	r1, r1, #6
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2251      	movs	r2, #81	; 0x51
 8005ce0:	2101      	movs	r1, #1
 8005ce2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2250      	movs	r2, #80	; 0x50
 8005ce8:	2100      	movs	r1, #0
 8005cea:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005cec:	2303      	movs	r3, #3
 8005cee:	e00f      	b.n	8005d10 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	68ba      	ldr	r2, [r7, #8]
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	68ba      	ldr	r2, [r7, #8]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	425a      	negs	r2, r3
 8005d00:	4153      	adcs	r3, r2
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	001a      	movs	r2, r3
 8005d06:	1dfb      	adds	r3, r7, #7
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d19f      	bne.n	8005c4e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	0018      	movs	r0, r3
 8005d12:	46bd      	mov	sp, r7
 8005d14:	b004      	add	sp, #16
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	ffffdfff 	.word	0xffffdfff

08005d1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b086      	sub	sp, #24
 8005d20:	af02      	add	r7, sp, #8
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	685a      	ldr	r2, [r3, #4]
 8005d2c:	2382      	movs	r3, #130	; 0x82
 8005d2e:	005b      	lsls	r3, r3, #1
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d112      	bne.n	8005d5a <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d34:	68ba      	ldr	r2, [r7, #8]
 8005d36:	68f8      	ldr	r0, [r7, #12]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	9300      	str	r3, [sp, #0]
 8005d3c:	0013      	movs	r3, r2
 8005d3e:	2200      	movs	r2, #0
 8005d40:	2180      	movs	r1, #128	; 0x80
 8005d42:	f7ff ff7b 	bl	8005c3c <SPI_WaitFlagStateUntilTimeout>
 8005d46:	1e03      	subs	r3, r0, #0
 8005d48:	d020      	beq.n	8005d8c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d4e:	2220      	movs	r2, #32
 8005d50:	431a      	orrs	r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e019      	b.n	8005d8e <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2251      	movs	r2, #81	; 0x51
 8005d5e:	5c9b      	ldrb	r3, [r3, r2]
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	2b05      	cmp	r3, #5
 8005d64:	d112      	bne.n	8005d8c <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005d66:	68ba      	ldr	r2, [r7, #8]
 8005d68:	68f8      	ldr	r0, [r7, #12]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	9300      	str	r3, [sp, #0]
 8005d6e:	0013      	movs	r3, r2
 8005d70:	2200      	movs	r2, #0
 8005d72:	2101      	movs	r1, #1
 8005d74:	f7ff ff62 	bl	8005c3c <SPI_WaitFlagStateUntilTimeout>
 8005d78:	1e03      	subs	r3, r0, #0
 8005d7a:	d007      	beq.n	8005d8c <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d80:	2220      	movs	r2, #32
 8005d82:	431a      	orrs	r2, r3
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	e000      	b.n	8005d8e <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	0018      	movs	r0, r3
 8005d90:	46bd      	mov	sp, r7
 8005d92:	b004      	add	sp, #16
 8005d94:	bd80      	pop	{r7, pc}
	...

08005d98 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b086      	sub	sp, #24
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8005da0:	4b2d      	ldr	r3, [pc, #180]	; (8005e58 <SPI_CloseTx_ISR+0xc0>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	492d      	ldr	r1, [pc, #180]	; (8005e5c <SPI_CloseTx_ISR+0xc4>)
 8005da6:	0018      	movs	r0, r3
 8005da8:	f7fa f9ae 	bl	8000108 <__udivsi3>
 8005dac:	0003      	movs	r3, r0
 8005dae:	001a      	movs	r2, r3
 8005db0:	2364      	movs	r3, #100	; 0x64
 8005db2:	4353      	muls	r3, r2
 8005db4:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005db6:	f7fc fec3 	bl	8002b40 <HAL_GetTick>
 8005dba:	0003      	movs	r3, r0
 8005dbc:	617b      	str	r3, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d106      	bne.n	8005dd2 <SPI_CloseTx_ISR+0x3a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dc8:	2220      	movs	r2, #32
 8005dca:	431a      	orrs	r2, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005dd0:	e008      	b.n	8005de4 <SPI_CloseTx_ISR+0x4c>
    }
    count--;
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	613b      	str	r3, [r7, #16]
  }
  while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	2202      	movs	r2, #2
 8005de0:	4013      	ands	r3, r2
 8005de2:	d0ec      	beq.n	8005dbe <SPI_CloseTx_ISR+0x26>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	685a      	ldr	r2, [r3, #4]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	21a0      	movs	r1, #160	; 0xa0
 8005df0:	438a      	bics	r2, r1
 8005df2:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005df4:	697a      	ldr	r2, [r7, #20]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2164      	movs	r1, #100	; 0x64
 8005dfa:	0018      	movs	r0, r3
 8005dfc:	f7ff ff8e 	bl	8005d1c <SPI_EndRxTxTransaction>
 8005e00:	1e03      	subs	r3, r0, #0
 8005e02:	d005      	beq.n	8005e10 <SPI_CloseTx_ISR+0x78>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e08:	2220      	movs	r2, #32
 8005e0a:	431a      	orrs	r2, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d10a      	bne.n	8005e2e <SPI_CloseTx_ISR+0x96>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e18:	2300      	movs	r3, #0
 8005e1a:	60fb      	str	r3, [r7, #12]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	60fb      	str	r3, [r7, #12]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	60fb      	str	r3, [r7, #12]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2251      	movs	r2, #81	; 0x51
 8005e32:	2101      	movs	r1, #1
 8005e34:	5499      	strb	r1, [r3, r2]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d004      	beq.n	8005e48 <SPI_CloseTx_ISR+0xb0>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	0018      	movs	r0, r3
 8005e42:	f7ff fe8b 	bl	8005b5c <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8005e46:	e003      	b.n	8005e50 <SPI_CloseTx_ISR+0xb8>
    HAL_SPI_TxCpltCallback(hspi);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	0018      	movs	r0, r3
 8005e4c:	f7fa fb40 	bl	80004d0 <HAL_SPI_TxCpltCallback>
}
 8005e50:	46c0      	nop			; (mov r8, r8)
 8005e52:	46bd      	mov	sp, r7
 8005e54:	b006      	add	sp, #24
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	20000000 	.word	0x20000000
 8005e5c:	00005dc0 	.word	0x00005dc0

08005e60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d101      	bne.n	8005e72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e01e      	b.n	8005eb0 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2239      	movs	r2, #57	; 0x39
 8005e76:	5c9b      	ldrb	r3, [r3, r2]
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d107      	bne.n	8005e8e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2238      	movs	r2, #56	; 0x38
 8005e82:	2100      	movs	r1, #0
 8005e84:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	0018      	movs	r0, r3
 8005e8a:	f7fc fc65 	bl	8002758 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2239      	movs	r2, #57	; 0x39
 8005e92:	2102      	movs	r1, #2
 8005e94:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	3304      	adds	r3, #4
 8005e9e:	0019      	movs	r1, r3
 8005ea0:	0010      	movs	r0, r2
 8005ea2:	f000 fa73 	bl	800638c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2239      	movs	r2, #57	; 0x39
 8005eaa:	2101      	movs	r1, #1
 8005eac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	0018      	movs	r0, r3
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	b002      	add	sp, #8
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68da      	ldr	r2, [r3, #12]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	2101      	movs	r1, #1
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	2207      	movs	r2, #7
 8005ed8:	4013      	ands	r3, r2
 8005eda:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2b06      	cmp	r3, #6
 8005ee0:	d007      	beq.n	8005ef2 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2101      	movs	r1, #1
 8005eee:	430a      	orrs	r2, r1
 8005ef0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ef2:	2300      	movs	r3, #0
}
 8005ef4:	0018      	movs	r0, r3
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	b004      	add	sp, #16
 8005efa:	bd80      	pop	{r7, pc}

08005efc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d101      	bne.n	8005f0e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e01e      	b.n	8005f4c <HAL_TIM_OC_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2239      	movs	r2, #57	; 0x39
 8005f12:	5c9b      	ldrb	r3, [r3, r2]
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d107      	bne.n	8005f2a <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2238      	movs	r2, #56	; 0x38
 8005f1e:	2100      	movs	r1, #0
 8005f20:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	0018      	movs	r0, r3
 8005f26:	f000 f815 	bl	8005f54 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2239      	movs	r2, #57	; 0x39
 8005f2e:	2102      	movs	r1, #2
 8005f30:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	3304      	adds	r3, #4
 8005f3a:	0019      	movs	r1, r3
 8005f3c:	0010      	movs	r0, r2
 8005f3e:	f000 fa25 	bl	800638c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2239      	movs	r2, #57	; 0x39
 8005f46:	2101      	movs	r1, #1
 8005f48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	0018      	movs	r0, r3
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	b002      	add	sp, #8
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005f5c:	46c0      	nop			; (mov r8, r8)
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	b002      	add	sp, #8
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	2202      	movs	r2, #2
 8005f74:	4013      	ands	r3, r2
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d124      	bne.n	8005fc4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	2202      	movs	r2, #2
 8005f82:	4013      	ands	r3, r2
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d11d      	bne.n	8005fc4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2203      	movs	r2, #3
 8005f8e:	4252      	negs	r2, r2
 8005f90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2201      	movs	r2, #1
 8005f96:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	2203      	movs	r2, #3
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	d004      	beq.n	8005fae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	0018      	movs	r0, r3
 8005fa8:	f000 f9d8 	bl	800635c <HAL_TIM_IC_CaptureCallback>
 8005fac:	e007      	b.n	8005fbe <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	0018      	movs	r0, r3
 8005fb2:	f000 f9cb 	bl	800634c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	0018      	movs	r0, r3
 8005fba:	f000 f9d7 	bl	800636c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	2204      	movs	r2, #4
 8005fcc:	4013      	ands	r3, r2
 8005fce:	2b04      	cmp	r3, #4
 8005fd0:	d125      	bne.n	800601e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	2204      	movs	r2, #4
 8005fda:	4013      	ands	r3, r2
 8005fdc:	2b04      	cmp	r3, #4
 8005fde:	d11e      	bne.n	800601e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2205      	movs	r2, #5
 8005fe6:	4252      	negs	r2, r2
 8005fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2202      	movs	r2, #2
 8005fee:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	699a      	ldr	r2, [r3, #24]
 8005ff6:	23c0      	movs	r3, #192	; 0xc0
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	d004      	beq.n	8006008 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	0018      	movs	r0, r3
 8006002:	f000 f9ab 	bl	800635c <HAL_TIM_IC_CaptureCallback>
 8006006:	e007      	b.n	8006018 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	0018      	movs	r0, r3
 800600c:	f000 f99e 	bl	800634c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	0018      	movs	r0, r3
 8006014:	f000 f9aa 	bl	800636c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	2208      	movs	r2, #8
 8006026:	4013      	ands	r3, r2
 8006028:	2b08      	cmp	r3, #8
 800602a:	d124      	bne.n	8006076 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	2208      	movs	r2, #8
 8006034:	4013      	ands	r3, r2
 8006036:	2b08      	cmp	r3, #8
 8006038:	d11d      	bne.n	8006076 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2209      	movs	r2, #9
 8006040:	4252      	negs	r2, r2
 8006042:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2204      	movs	r2, #4
 8006048:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	69db      	ldr	r3, [r3, #28]
 8006050:	2203      	movs	r2, #3
 8006052:	4013      	ands	r3, r2
 8006054:	d004      	beq.n	8006060 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	0018      	movs	r0, r3
 800605a:	f000 f97f 	bl	800635c <HAL_TIM_IC_CaptureCallback>
 800605e:	e007      	b.n	8006070 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	0018      	movs	r0, r3
 8006064:	f000 f972 	bl	800634c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	0018      	movs	r0, r3
 800606c:	f000 f97e 	bl	800636c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	2210      	movs	r2, #16
 800607e:	4013      	ands	r3, r2
 8006080:	2b10      	cmp	r3, #16
 8006082:	d125      	bne.n	80060d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	2210      	movs	r2, #16
 800608c:	4013      	ands	r3, r2
 800608e:	2b10      	cmp	r3, #16
 8006090:	d11e      	bne.n	80060d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2211      	movs	r2, #17
 8006098:	4252      	negs	r2, r2
 800609a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2208      	movs	r2, #8
 80060a0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	69da      	ldr	r2, [r3, #28]
 80060a8:	23c0      	movs	r3, #192	; 0xc0
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	4013      	ands	r3, r2
 80060ae:	d004      	beq.n	80060ba <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	0018      	movs	r0, r3
 80060b4:	f000 f952 	bl	800635c <HAL_TIM_IC_CaptureCallback>
 80060b8:	e007      	b.n	80060ca <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	0018      	movs	r0, r3
 80060be:	f000 f945 	bl	800634c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	0018      	movs	r0, r3
 80060c6:	f000 f951 	bl	800636c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	2201      	movs	r2, #1
 80060d8:	4013      	ands	r3, r2
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d10f      	bne.n	80060fe <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	2201      	movs	r2, #1
 80060e6:	4013      	ands	r3, r2
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d108      	bne.n	80060fe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2202      	movs	r2, #2
 80060f2:	4252      	negs	r2, r2
 80060f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	0018      	movs	r0, r3
 80060fa:	f7fc fc6d 	bl	80029d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	2240      	movs	r2, #64	; 0x40
 8006106:	4013      	ands	r3, r2
 8006108:	2b40      	cmp	r3, #64	; 0x40
 800610a:	d10f      	bne.n	800612c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	2240      	movs	r2, #64	; 0x40
 8006114:	4013      	ands	r3, r2
 8006116:	2b40      	cmp	r3, #64	; 0x40
 8006118:	d108      	bne.n	800612c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2241      	movs	r2, #65	; 0x41
 8006120:	4252      	negs	r2, r2
 8006122:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	0018      	movs	r0, r3
 8006128:	f000 f928 	bl	800637c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800612c:	46c0      	nop			; (mov r8, r8)
 800612e:	46bd      	mov	sp, r7
 8006130:	b002      	add	sp, #8
 8006132:	bd80      	pop	{r7, pc}

08006134 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2238      	movs	r2, #56	; 0x38
 8006144:	5c9b      	ldrb	r3, [r3, r2]
 8006146:	2b01      	cmp	r3, #1
 8006148:	d101      	bne.n	800614e <HAL_TIM_OC_ConfigChannel+0x1a>
 800614a:	2302      	movs	r3, #2
 800614c:	e03c      	b.n	80061c8 <HAL_TIM_OC_ConfigChannel+0x94>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2238      	movs	r2, #56	; 0x38
 8006152:	2101      	movs	r1, #1
 8006154:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2239      	movs	r2, #57	; 0x39
 800615a:	2102      	movs	r1, #2
 800615c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2b04      	cmp	r3, #4
 8006162:	d010      	beq.n	8006186 <HAL_TIM_OC_ConfigChannel+0x52>
 8006164:	d802      	bhi.n	800616c <HAL_TIM_OC_ConfigChannel+0x38>
 8006166:	2b00      	cmp	r3, #0
 8006168:	d005      	beq.n	8006176 <HAL_TIM_OC_ConfigChannel+0x42>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      break;
    }

    default:
      break;
 800616a:	e024      	b.n	80061b6 <HAL_TIM_OC_ConfigChannel+0x82>
  switch (Channel)
 800616c:	2b08      	cmp	r3, #8
 800616e:	d012      	beq.n	8006196 <HAL_TIM_OC_ConfigChannel+0x62>
 8006170:	2b0c      	cmp	r3, #12
 8006172:	d018      	beq.n	80061a6 <HAL_TIM_OC_ConfigChannel+0x72>
      break;
 8006174:	e01f      	b.n	80061b6 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	0011      	movs	r1, r2
 800617e:	0018      	movs	r0, r3
 8006180:	f000 f962 	bl	8006448 <TIM_OC1_SetConfig>
      break;
 8006184:	e017      	b.n	80061b6 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68ba      	ldr	r2, [r7, #8]
 800618c:	0011      	movs	r1, r2
 800618e:	0018      	movs	r0, r3
 8006190:	f000 f996 	bl	80064c0 <TIM_OC2_SetConfig>
      break;
 8006194:	e00f      	b.n	80061b6 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68ba      	ldr	r2, [r7, #8]
 800619c:	0011      	movs	r1, r2
 800619e:	0018      	movs	r0, r3
 80061a0:	f000 f9d0 	bl	8006544 <TIM_OC3_SetConfig>
      break;
 80061a4:	e007      	b.n	80061b6 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	68ba      	ldr	r2, [r7, #8]
 80061ac:	0011      	movs	r1, r2
 80061ae:	0018      	movs	r0, r3
 80061b0:	f000 fa08 	bl	80065c4 <TIM_OC4_SetConfig>
      break;
 80061b4:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2239      	movs	r2, #57	; 0x39
 80061ba:	2101      	movs	r1, #1
 80061bc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2238      	movs	r2, #56	; 0x38
 80061c2:	2100      	movs	r1, #0
 80061c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	0018      	movs	r0, r3
 80061ca:	46bd      	mov	sp, r7
 80061cc:	b004      	add	sp, #16
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2238      	movs	r2, #56	; 0x38
 80061de:	5c9b      	ldrb	r3, [r3, r2]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d101      	bne.n	80061e8 <HAL_TIM_ConfigClockSource+0x18>
 80061e4:	2302      	movs	r3, #2
 80061e6:	e0ab      	b.n	8006340 <HAL_TIM_ConfigClockSource+0x170>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2238      	movs	r2, #56	; 0x38
 80061ec:	2101      	movs	r1, #1
 80061ee:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2239      	movs	r2, #57	; 0x39
 80061f4:	2102      	movs	r1, #2
 80061f6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2277      	movs	r2, #119	; 0x77
 8006204:	4393      	bics	r3, r2
 8006206:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	4a4f      	ldr	r2, [pc, #316]	; (8006348 <HAL_TIM_ConfigClockSource+0x178>)
 800620c:	4013      	ands	r3, r2
 800620e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2b40      	cmp	r3, #64	; 0x40
 800621e:	d100      	bne.n	8006222 <HAL_TIM_ConfigClockSource+0x52>
 8006220:	e06b      	b.n	80062fa <HAL_TIM_ConfigClockSource+0x12a>
 8006222:	d80e      	bhi.n	8006242 <HAL_TIM_ConfigClockSource+0x72>
 8006224:	2b10      	cmp	r3, #16
 8006226:	d100      	bne.n	800622a <HAL_TIM_ConfigClockSource+0x5a>
 8006228:	e077      	b.n	800631a <HAL_TIM_ConfigClockSource+0x14a>
 800622a:	d803      	bhi.n	8006234 <HAL_TIM_ConfigClockSource+0x64>
 800622c:	2b00      	cmp	r3, #0
 800622e:	d100      	bne.n	8006232 <HAL_TIM_ConfigClockSource+0x62>
 8006230:	e073      	b.n	800631a <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006232:	e07c      	b.n	800632e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8006234:	2b20      	cmp	r3, #32
 8006236:	d100      	bne.n	800623a <HAL_TIM_ConfigClockSource+0x6a>
 8006238:	e06f      	b.n	800631a <HAL_TIM_ConfigClockSource+0x14a>
 800623a:	2b30      	cmp	r3, #48	; 0x30
 800623c:	d100      	bne.n	8006240 <HAL_TIM_ConfigClockSource+0x70>
 800623e:	e06c      	b.n	800631a <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8006240:	e075      	b.n	800632e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8006242:	2b70      	cmp	r3, #112	; 0x70
 8006244:	d00e      	beq.n	8006264 <HAL_TIM_ConfigClockSource+0x94>
 8006246:	d804      	bhi.n	8006252 <HAL_TIM_ConfigClockSource+0x82>
 8006248:	2b50      	cmp	r3, #80	; 0x50
 800624a:	d036      	beq.n	80062ba <HAL_TIM_ConfigClockSource+0xea>
 800624c:	2b60      	cmp	r3, #96	; 0x60
 800624e:	d044      	beq.n	80062da <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8006250:	e06d      	b.n	800632e <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8006252:	2280      	movs	r2, #128	; 0x80
 8006254:	0152      	lsls	r2, r2, #5
 8006256:	4293      	cmp	r3, r2
 8006258:	d068      	beq.n	800632c <HAL_TIM_ConfigClockSource+0x15c>
 800625a:	2280      	movs	r2, #128	; 0x80
 800625c:	0192      	lsls	r2, r2, #6
 800625e:	4293      	cmp	r3, r2
 8006260:	d017      	beq.n	8006292 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8006262:	e064      	b.n	800632e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6818      	ldr	r0, [r3, #0]
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	6899      	ldr	r1, [r3, #8]
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	685a      	ldr	r2, [r3, #4]
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	f000 fa66 	bl	8006744 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2277      	movs	r2, #119	; 0x77
 8006284:	4313      	orrs	r3, r2
 8006286:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	609a      	str	r2, [r3, #8]
      break;
 8006290:	e04d      	b.n	800632e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6818      	ldr	r0, [r3, #0]
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	6899      	ldr	r1, [r3, #8]
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	685a      	ldr	r2, [r3, #4]
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	f000 fa4f 	bl	8006744 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	689a      	ldr	r2, [r3, #8]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2180      	movs	r1, #128	; 0x80
 80062b2:	01c9      	lsls	r1, r1, #7
 80062b4:	430a      	orrs	r2, r1
 80062b6:	609a      	str	r2, [r3, #8]
      break;
 80062b8:	e039      	b.n	800632e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6818      	ldr	r0, [r3, #0]
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	6859      	ldr	r1, [r3, #4]
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	001a      	movs	r2, r3
 80062c8:	f000 f9c2 	bl	8006650 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2150      	movs	r1, #80	; 0x50
 80062d2:	0018      	movs	r0, r3
 80062d4:	f000 fa1c 	bl	8006710 <TIM_ITRx_SetConfig>
      break;
 80062d8:	e029      	b.n	800632e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6818      	ldr	r0, [r3, #0]
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	6859      	ldr	r1, [r3, #4]
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	001a      	movs	r2, r3
 80062e8:	f000 f9e0 	bl	80066ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2160      	movs	r1, #96	; 0x60
 80062f2:	0018      	movs	r0, r3
 80062f4:	f000 fa0c 	bl	8006710 <TIM_ITRx_SetConfig>
      break;
 80062f8:	e019      	b.n	800632e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6818      	ldr	r0, [r3, #0]
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	6859      	ldr	r1, [r3, #4]
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	001a      	movs	r2, r3
 8006308:	f000 f9a2 	bl	8006650 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2140      	movs	r1, #64	; 0x40
 8006312:	0018      	movs	r0, r3
 8006314:	f000 f9fc 	bl	8006710 <TIM_ITRx_SetConfig>
      break;
 8006318:	e009      	b.n	800632e <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	0019      	movs	r1, r3
 8006324:	0010      	movs	r0, r2
 8006326:	f000 f9f3 	bl	8006710 <TIM_ITRx_SetConfig>
      break;
 800632a:	e000      	b.n	800632e <HAL_TIM_ConfigClockSource+0x15e>
      break;
 800632c:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2239      	movs	r2, #57	; 0x39
 8006332:	2101      	movs	r1, #1
 8006334:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2238      	movs	r2, #56	; 0x38
 800633a:	2100      	movs	r1, #0
 800633c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	0018      	movs	r0, r3
 8006342:	46bd      	mov	sp, r7
 8006344:	b004      	add	sp, #16
 8006346:	bd80      	pop	{r7, pc}
 8006348:	ffff00ff 	.word	0xffff00ff

0800634c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006354:	46c0      	nop			; (mov r8, r8)
 8006356:	46bd      	mov	sp, r7
 8006358:	b002      	add	sp, #8
 800635a:	bd80      	pop	{r7, pc}

0800635c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006364:	46c0      	nop			; (mov r8, r8)
 8006366:	46bd      	mov	sp, r7
 8006368:	b002      	add	sp, #8
 800636a:	bd80      	pop	{r7, pc}

0800636c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006374:	46c0      	nop			; (mov r8, r8)
 8006376:	46bd      	mov	sp, r7
 8006378:	b002      	add	sp, #8
 800637a:	bd80      	pop	{r7, pc}

0800637c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006384:	46c0      	nop			; (mov r8, r8)
 8006386:	46bd      	mov	sp, r7
 8006388:	b002      	add	sp, #8
 800638a:	bd80      	pop	{r7, pc}

0800638c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	2380      	movs	r3, #128	; 0x80
 80063a0:	05db      	lsls	r3, r3, #23
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d00b      	beq.n	80063be <TIM_Base_SetConfig+0x32>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a23      	ldr	r2, [pc, #140]	; (8006438 <TIM_Base_SetConfig+0xac>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d007      	beq.n	80063be <TIM_Base_SetConfig+0x32>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a22      	ldr	r2, [pc, #136]	; (800643c <TIM_Base_SetConfig+0xb0>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d003      	beq.n	80063be <TIM_Base_SetConfig+0x32>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a21      	ldr	r2, [pc, #132]	; (8006440 <TIM_Base_SetConfig+0xb4>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d108      	bne.n	80063d0 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2270      	movs	r2, #112	; 0x70
 80063c2:	4393      	bics	r3, r2
 80063c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	4313      	orrs	r3, r2
 80063ce:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	2380      	movs	r3, #128	; 0x80
 80063d4:	05db      	lsls	r3, r3, #23
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d00b      	beq.n	80063f2 <TIM_Base_SetConfig+0x66>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a16      	ldr	r2, [pc, #88]	; (8006438 <TIM_Base_SetConfig+0xac>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d007      	beq.n	80063f2 <TIM_Base_SetConfig+0x66>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a15      	ldr	r2, [pc, #84]	; (800643c <TIM_Base_SetConfig+0xb0>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d003      	beq.n	80063f2 <TIM_Base_SetConfig+0x66>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a14      	ldr	r2, [pc, #80]	; (8006440 <TIM_Base_SetConfig+0xb4>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d108      	bne.n	8006404 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	4a13      	ldr	r2, [pc, #76]	; (8006444 <TIM_Base_SetConfig+0xb8>)
 80063f6:	4013      	ands	r3, r2
 80063f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	4313      	orrs	r3, r2
 8006402:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2280      	movs	r2, #128	; 0x80
 8006408:	4393      	bics	r3, r2
 800640a:	001a      	movs	r2, r3
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	4313      	orrs	r3, r2
 8006412:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	689a      	ldr	r2, [r3, #8]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2201      	movs	r2, #1
 800642e:	615a      	str	r2, [r3, #20]
}
 8006430:	46c0      	nop			; (mov r8, r8)
 8006432:	46bd      	mov	sp, r7
 8006434:	b004      	add	sp, #16
 8006436:	bd80      	pop	{r7, pc}
 8006438:	40000400 	.word	0x40000400
 800643c:	40010800 	.word	0x40010800
 8006440:	40011400 	.word	0x40011400
 8006444:	fffffcff 	.word	0xfffffcff

08006448 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b086      	sub	sp, #24
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a1b      	ldr	r3, [r3, #32]
 8006456:	2201      	movs	r2, #1
 8006458:	4393      	bics	r3, r2
 800645a:	001a      	movs	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6a1b      	ldr	r3, [r3, #32]
 8006464:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	699b      	ldr	r3, [r3, #24]
 8006470:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2270      	movs	r2, #112	; 0x70
 8006476:	4393      	bics	r3, r2
 8006478:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2203      	movs	r2, #3
 800647e:	4393      	bics	r3, r2
 8006480:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	4313      	orrs	r3, r2
 800648a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	2202      	movs	r2, #2
 8006490:	4393      	bics	r3, r2
 8006492:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	697a      	ldr	r2, [r7, #20]
 800649a:	4313      	orrs	r3, r2
 800649c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	693a      	ldr	r2, [r7, #16]
 80064a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	685a      	ldr	r2, [r3, #4]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	697a      	ldr	r2, [r7, #20]
 80064b6:	621a      	str	r2, [r3, #32]
}
 80064b8:	46c0      	nop			; (mov r8, r8)
 80064ba:	46bd      	mov	sp, r7
 80064bc:	b006      	add	sp, #24
 80064be:	bd80      	pop	{r7, pc}

080064c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b086      	sub	sp, #24
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a1b      	ldr	r3, [r3, #32]
 80064ce:	2210      	movs	r2, #16
 80064d0:	4393      	bics	r3, r2
 80064d2:	001a      	movs	r2, r3
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a1b      	ldr	r3, [r3, #32]
 80064dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	699b      	ldr	r3, [r3, #24]
 80064e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	4a13      	ldr	r2, [pc, #76]	; (800653c <TIM_OC2_SetConfig+0x7c>)
 80064ee:	4013      	ands	r3, r2
 80064f0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	4a12      	ldr	r2, [pc, #72]	; (8006540 <TIM_OC2_SetConfig+0x80>)
 80064f6:	4013      	ands	r3, r2
 80064f8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	021b      	lsls	r3, r3, #8
 8006500:	68fa      	ldr	r2, [r7, #12]
 8006502:	4313      	orrs	r3, r2
 8006504:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	2220      	movs	r2, #32
 800650a:	4393      	bics	r3, r2
 800650c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	011b      	lsls	r3, r3, #4
 8006514:	697a      	ldr	r2, [r7, #20]
 8006516:	4313      	orrs	r3, r2
 8006518:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	693a      	ldr	r2, [r7, #16]
 800651e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	685a      	ldr	r2, [r3, #4]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	697a      	ldr	r2, [r7, #20]
 8006532:	621a      	str	r2, [r3, #32]
}
 8006534:	46c0      	nop			; (mov r8, r8)
 8006536:	46bd      	mov	sp, r7
 8006538:	b006      	add	sp, #24
 800653a:	bd80      	pop	{r7, pc}
 800653c:	ffff8fff 	.word	0xffff8fff
 8006540:	fffffcff 	.word	0xfffffcff

08006544 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b086      	sub	sp, #24
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a1b      	ldr	r3, [r3, #32]
 8006552:	4a1a      	ldr	r2, [pc, #104]	; (80065bc <TIM_OC3_SetConfig+0x78>)
 8006554:	401a      	ands	r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a1b      	ldr	r3, [r3, #32]
 800655e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	69db      	ldr	r3, [r3, #28]
 800656a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2270      	movs	r2, #112	; 0x70
 8006570:	4393      	bics	r3, r2
 8006572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2203      	movs	r2, #3
 8006578:	4393      	bics	r3, r2
 800657a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	4313      	orrs	r3, r2
 8006584:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	4a0d      	ldr	r2, [pc, #52]	; (80065c0 <TIM_OC3_SetConfig+0x7c>)
 800658a:	4013      	ands	r3, r2
 800658c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	021b      	lsls	r3, r3, #8
 8006594:	697a      	ldr	r2, [r7, #20]
 8006596:	4313      	orrs	r3, r2
 8006598:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	693a      	ldr	r2, [r7, #16]
 800659e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	685a      	ldr	r2, [r3, #4]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	697a      	ldr	r2, [r7, #20]
 80065b2:	621a      	str	r2, [r3, #32]
}
 80065b4:	46c0      	nop			; (mov r8, r8)
 80065b6:	46bd      	mov	sp, r7
 80065b8:	b006      	add	sp, #24
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	fffffeff 	.word	0xfffffeff
 80065c0:	fffffdff 	.word	0xfffffdff

080065c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b086      	sub	sp, #24
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6a1b      	ldr	r3, [r3, #32]
 80065d2:	4a1b      	ldr	r2, [pc, #108]	; (8006640 <TIM_OC4_SetConfig+0x7c>)
 80065d4:	401a      	ands	r2, r3
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	69db      	ldr	r3, [r3, #28]
 80065ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	4a15      	ldr	r2, [pc, #84]	; (8006644 <TIM_OC4_SetConfig+0x80>)
 80065f0:	4013      	ands	r3, r2
 80065f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	4a14      	ldr	r2, [pc, #80]	; (8006648 <TIM_OC4_SetConfig+0x84>)
 80065f8:	4013      	ands	r3, r2
 80065fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	021b      	lsls	r3, r3, #8
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	4313      	orrs	r3, r2
 8006606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	4a10      	ldr	r2, [pc, #64]	; (800664c <TIM_OC4_SetConfig+0x88>)
 800660c:	4013      	ands	r3, r2
 800660e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	031b      	lsls	r3, r3, #12
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	4313      	orrs	r3, r2
 800661a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	693a      	ldr	r2, [r7, #16]
 8006620:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	685a      	ldr	r2, [r3, #4]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	697a      	ldr	r2, [r7, #20]
 8006634:	621a      	str	r2, [r3, #32]
}
 8006636:	46c0      	nop			; (mov r8, r8)
 8006638:	46bd      	mov	sp, r7
 800663a:	b006      	add	sp, #24
 800663c:	bd80      	pop	{r7, pc}
 800663e:	46c0      	nop			; (mov r8, r8)
 8006640:	ffffefff 	.word	0xffffefff
 8006644:	ffff8fff 	.word	0xffff8fff
 8006648:	fffffcff 	.word	0xfffffcff
 800664c:	ffffdfff 	.word	0xffffdfff

08006650 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b086      	sub	sp, #24
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6a1b      	ldr	r3, [r3, #32]
 8006660:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6a1b      	ldr	r3, [r3, #32]
 8006666:	2201      	movs	r2, #1
 8006668:	4393      	bics	r3, r2
 800666a:	001a      	movs	r2, r3
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	699b      	ldr	r3, [r3, #24]
 8006674:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	22f0      	movs	r2, #240	; 0xf0
 800667a:	4393      	bics	r3, r2
 800667c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	011b      	lsls	r3, r3, #4
 8006682:	693a      	ldr	r2, [r7, #16]
 8006684:	4313      	orrs	r3, r2
 8006686:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	220a      	movs	r2, #10
 800668c:	4393      	bics	r3, r2
 800668e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006690:	697a      	ldr	r2, [r7, #20]
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	4313      	orrs	r3, r2
 8006696:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	693a      	ldr	r2, [r7, #16]
 800669c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	697a      	ldr	r2, [r7, #20]
 80066a2:	621a      	str	r2, [r3, #32]
}
 80066a4:	46c0      	nop			; (mov r8, r8)
 80066a6:	46bd      	mov	sp, r7
 80066a8:	b006      	add	sp, #24
 80066aa:	bd80      	pop	{r7, pc}

080066ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b086      	sub	sp, #24
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6a1b      	ldr	r3, [r3, #32]
 80066bc:	2210      	movs	r2, #16
 80066be:	4393      	bics	r3, r2
 80066c0:	001a      	movs	r2, r3
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6a1b      	ldr	r3, [r3, #32]
 80066d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	4a0d      	ldr	r2, [pc, #52]	; (800670c <TIM_TI2_ConfigInputStage+0x60>)
 80066d6:	4013      	ands	r3, r2
 80066d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	031b      	lsls	r3, r3, #12
 80066de:	697a      	ldr	r2, [r7, #20]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	22a0      	movs	r2, #160	; 0xa0
 80066e8:	4393      	bics	r3, r2
 80066ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	011b      	lsls	r3, r3, #4
 80066f0:	693a      	ldr	r2, [r7, #16]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	697a      	ldr	r2, [r7, #20]
 80066fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	693a      	ldr	r2, [r7, #16]
 8006700:	621a      	str	r2, [r3, #32]
}
 8006702:	46c0      	nop			; (mov r8, r8)
 8006704:	46bd      	mov	sp, r7
 8006706:	b006      	add	sp, #24
 8006708:	bd80      	pop	{r7, pc}
 800670a:	46c0      	nop			; (mov r8, r8)
 800670c:	ffff0fff 	.word	0xffff0fff

08006710 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2270      	movs	r2, #112	; 0x70
 8006724:	4393      	bics	r3, r2
 8006726:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006728:	683a      	ldr	r2, [r7, #0]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	4313      	orrs	r3, r2
 800672e:	2207      	movs	r2, #7
 8006730:	4313      	orrs	r3, r2
 8006732:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	609a      	str	r2, [r3, #8]
}
 800673a:	46c0      	nop			; (mov r8, r8)
 800673c:	46bd      	mov	sp, r7
 800673e:	b004      	add	sp, #16
 8006740:	bd80      	pop	{r7, pc}
	...

08006744 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b086      	sub	sp, #24
 8006748:	af00      	add	r7, sp, #0
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	607a      	str	r2, [r7, #4]
 8006750:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	4a09      	ldr	r2, [pc, #36]	; (8006780 <TIM_ETR_SetConfig+0x3c>)
 800675c:	4013      	ands	r3, r2
 800675e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	021a      	lsls	r2, r3, #8
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	431a      	orrs	r2, r3
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	4313      	orrs	r3, r2
 800676c:	697a      	ldr	r2, [r7, #20]
 800676e:	4313      	orrs	r3, r2
 8006770:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	697a      	ldr	r2, [r7, #20]
 8006776:	609a      	str	r2, [r3, #8]
}
 8006778:	46c0      	nop			; (mov r8, r8)
 800677a:	46bd      	mov	sp, r7
 800677c:	b006      	add	sp, #24
 800677e:	bd80      	pop	{r7, pc}
 8006780:	ffff00ff 	.word	0xffff00ff

08006784 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2238      	movs	r2, #56	; 0x38
 8006792:	5c9b      	ldrb	r3, [r3, r2]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d101      	bne.n	800679c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006798:	2302      	movs	r3, #2
 800679a:	e032      	b.n	8006802 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2238      	movs	r2, #56	; 0x38
 80067a0:	2101      	movs	r1, #1
 80067a2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2239      	movs	r2, #57	; 0x39
 80067a8:	2102      	movs	r1, #2
 80067aa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2270      	movs	r2, #112	; 0x70
 80067c0:	4393      	bics	r3, r2
 80067c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	2280      	movs	r2, #128	; 0x80
 80067d2:	4393      	bics	r3, r2
 80067d4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	68ba      	ldr	r2, [r7, #8]
 80067dc:	4313      	orrs	r3, r2
 80067de:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68ba      	ldr	r2, [r7, #8]
 80067ee:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2239      	movs	r2, #57	; 0x39
 80067f4:	2101      	movs	r1, #1
 80067f6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2238      	movs	r2, #56	; 0x38
 80067fc:	2100      	movs	r1, #0
 80067fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006800:	2300      	movs	r3, #0
}
 8006802:	0018      	movs	r0, r3
 8006804:	46bd      	mov	sp, r7
 8006806:	b004      	add	sp, #16
 8006808:	bd80      	pop	{r7, pc}

0800680a <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 800680a:	b580      	push	{r7, lr}
 800680c:	b082      	sub	sp, #8
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
 8006812:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2238      	movs	r2, #56	; 0x38
 8006818:	5c9b      	ldrb	r3, [r3, r2]
 800681a:	2b01      	cmp	r3, #1
 800681c:	d101      	bne.n	8006822 <HAL_TIMEx_RemapConfig+0x18>
 800681e:	2302      	movs	r3, #2
 8006820:	e00c      	b.n	800683c <HAL_TIMEx_RemapConfig+0x32>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2238      	movs	r2, #56	; 0x38
 8006826:	2101      	movs	r1, #1
 8006828:	5499      	strb	r1, [r3, r2]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	683a      	ldr	r2, [r7, #0]
 8006830:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2238      	movs	r2, #56	; 0x38
 8006836:	2100      	movs	r1, #0
 8006838:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	0018      	movs	r0, r3
 800683e:	46bd      	mov	sp, r7
 8006840:	b002      	add	sp, #8
 8006842:	bd80      	pop	{r7, pc}

08006844 <__libc_init_array>:
 8006844:	b570      	push	{r4, r5, r6, lr}
 8006846:	2600      	movs	r6, #0
 8006848:	4d0c      	ldr	r5, [pc, #48]	; (800687c <__libc_init_array+0x38>)
 800684a:	4c0d      	ldr	r4, [pc, #52]	; (8006880 <__libc_init_array+0x3c>)
 800684c:	1b64      	subs	r4, r4, r5
 800684e:	10a4      	asrs	r4, r4, #2
 8006850:	42a6      	cmp	r6, r4
 8006852:	d109      	bne.n	8006868 <__libc_init_array+0x24>
 8006854:	2600      	movs	r6, #0
 8006856:	f000 f82b 	bl	80068b0 <_init>
 800685a:	4d0a      	ldr	r5, [pc, #40]	; (8006884 <__libc_init_array+0x40>)
 800685c:	4c0a      	ldr	r4, [pc, #40]	; (8006888 <__libc_init_array+0x44>)
 800685e:	1b64      	subs	r4, r4, r5
 8006860:	10a4      	asrs	r4, r4, #2
 8006862:	42a6      	cmp	r6, r4
 8006864:	d105      	bne.n	8006872 <__libc_init_array+0x2e>
 8006866:	bd70      	pop	{r4, r5, r6, pc}
 8006868:	00b3      	lsls	r3, r6, #2
 800686a:	58eb      	ldr	r3, [r5, r3]
 800686c:	4798      	blx	r3
 800686e:	3601      	adds	r6, #1
 8006870:	e7ee      	b.n	8006850 <__libc_init_array+0xc>
 8006872:	00b3      	lsls	r3, r6, #2
 8006874:	58eb      	ldr	r3, [r5, r3]
 8006876:	4798      	blx	r3
 8006878:	3601      	adds	r6, #1
 800687a:	e7f2      	b.n	8006862 <__libc_init_array+0x1e>
 800687c:	08006ef8 	.word	0x08006ef8
 8006880:	08006ef8 	.word	0x08006ef8
 8006884:	08006ef8 	.word	0x08006ef8
 8006888:	08006efc 	.word	0x08006efc

0800688c <memcpy>:
 800688c:	2300      	movs	r3, #0
 800688e:	b510      	push	{r4, lr}
 8006890:	429a      	cmp	r2, r3
 8006892:	d100      	bne.n	8006896 <memcpy+0xa>
 8006894:	bd10      	pop	{r4, pc}
 8006896:	5ccc      	ldrb	r4, [r1, r3]
 8006898:	54c4      	strb	r4, [r0, r3]
 800689a:	3301      	adds	r3, #1
 800689c:	e7f8      	b.n	8006890 <memcpy+0x4>

0800689e <memset>:
 800689e:	0003      	movs	r3, r0
 80068a0:	1812      	adds	r2, r2, r0
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d100      	bne.n	80068a8 <memset+0xa>
 80068a6:	4770      	bx	lr
 80068a8:	7019      	strb	r1, [r3, #0]
 80068aa:	3301      	adds	r3, #1
 80068ac:	e7f9      	b.n	80068a2 <memset+0x4>
	...

080068b0 <_init>:
 80068b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068b2:	46c0      	nop			; (mov r8, r8)
 80068b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068b6:	bc08      	pop	{r3}
 80068b8:	469e      	mov	lr, r3
 80068ba:	4770      	bx	lr

080068bc <_fini>:
 80068bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068be:	46c0      	nop			; (mov r8, r8)
 80068c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068c2:	bc08      	pop	{r3}
 80068c4:	469e      	mov	lr, r3
 80068c6:	4770      	bx	lr
