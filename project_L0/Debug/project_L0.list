
project_L0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb18  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c60  0800bbd8  0800bbd8  0001bbd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c838  0800c838  000200d0  2**0
                  CONTENTS
  4 .ARM          00000000  0800c838  0800c838  000200d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c838  0800c838  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c838  0800c838  0001c838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c83c  0800c83c  0001c83c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  0800c840  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  200000d0  0800c910  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005dc  0800c910  000205dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c4aa  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003832  00000000  00000000  0003c5a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001538  00000000  00000000  0003fdd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001368  00000000  00000000  00041310  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018aff  00000000  00000000  00042678  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013224  00000000  00000000  0005b177  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008f2ff  00000000  00000000  0006e39b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fd69a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005120  00000000  00000000  000fd718  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000d0 	.word	0x200000d0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800bbc0 	.word	0x0800bbc0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000d4 	.word	0x200000d4
 8000104:	0800bbc0 	.word	0x0800bbc0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cfrcmple>:
 8000404:	4684      	mov	ip, r0
 8000406:	1c08      	adds	r0, r1, #0
 8000408:	4661      	mov	r1, ip
 800040a:	e7ff      	b.n	800040c <__aeabi_cfcmpeq>

0800040c <__aeabi_cfcmpeq>:
 800040c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800040e:	f000 f9d3 	bl	80007b8 <__lesf2>
 8000412:	2800      	cmp	r0, #0
 8000414:	d401      	bmi.n	800041a <__aeabi_cfcmpeq+0xe>
 8000416:	2100      	movs	r1, #0
 8000418:	42c8      	cmn	r0, r1
 800041a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800041c <__aeabi_fcmpeq>:
 800041c:	b510      	push	{r4, lr}
 800041e:	f000 f955 	bl	80006cc <__eqsf2>
 8000422:	4240      	negs	r0, r0
 8000424:	3001      	adds	r0, #1
 8000426:	bd10      	pop	{r4, pc}

08000428 <__aeabi_fcmplt>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 f9c5 	bl	80007b8 <__lesf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	db01      	blt.n	8000436 <__aeabi_fcmplt+0xe>
 8000432:	2000      	movs	r0, #0
 8000434:	bd10      	pop	{r4, pc}
 8000436:	2001      	movs	r0, #1
 8000438:	bd10      	pop	{r4, pc}
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_fcmple>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f000 f9bb 	bl	80007b8 <__lesf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	dd01      	ble.n	800044a <__aeabi_fcmple+0xe>
 8000446:	2000      	movs	r0, #0
 8000448:	bd10      	pop	{r4, pc}
 800044a:	2001      	movs	r0, #1
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_fcmpgt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 f963 	bl	800071c <__gesf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	dc01      	bgt.n	800045e <__aeabi_fcmpgt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_fcmpge>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f000 f959 	bl	800071c <__gesf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	da01      	bge.n	8000472 <__aeabi_fcmpge+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_f2uiz>:
 8000478:	219e      	movs	r1, #158	; 0x9e
 800047a:	b510      	push	{r4, lr}
 800047c:	05c9      	lsls	r1, r1, #23
 800047e:	1c04      	adds	r4, r0, #0
 8000480:	f7ff fff0 	bl	8000464 <__aeabi_fcmpge>
 8000484:	2800      	cmp	r0, #0
 8000486:	d103      	bne.n	8000490 <__aeabi_f2uiz+0x18>
 8000488:	1c20      	adds	r0, r4, #0
 800048a:	f000 fcdb 	bl	8000e44 <__aeabi_f2iz>
 800048e:	bd10      	pop	{r4, pc}
 8000490:	219e      	movs	r1, #158	; 0x9e
 8000492:	1c20      	adds	r0, r4, #0
 8000494:	05c9      	lsls	r1, r1, #23
 8000496:	f000 fb11 	bl	8000abc <__aeabi_fsub>
 800049a:	f000 fcd3 	bl	8000e44 <__aeabi_f2iz>
 800049e:	2380      	movs	r3, #128	; 0x80
 80004a0:	061b      	lsls	r3, r3, #24
 80004a2:	469c      	mov	ip, r3
 80004a4:	4460      	add	r0, ip
 80004a6:	e7f2      	b.n	800048e <__aeabi_f2uiz+0x16>

080004a8 <__aeabi_fdiv>:
 80004a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004aa:	4657      	mov	r7, sl
 80004ac:	464e      	mov	r6, r9
 80004ae:	4645      	mov	r5, r8
 80004b0:	46de      	mov	lr, fp
 80004b2:	0244      	lsls	r4, r0, #9
 80004b4:	b5e0      	push	{r5, r6, r7, lr}
 80004b6:	0046      	lsls	r6, r0, #1
 80004b8:	4688      	mov	r8, r1
 80004ba:	0a64      	lsrs	r4, r4, #9
 80004bc:	0e36      	lsrs	r6, r6, #24
 80004be:	0fc7      	lsrs	r7, r0, #31
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d063      	beq.n	800058c <__aeabi_fdiv+0xe4>
 80004c4:	2eff      	cmp	r6, #255	; 0xff
 80004c6:	d024      	beq.n	8000512 <__aeabi_fdiv+0x6a>
 80004c8:	2380      	movs	r3, #128	; 0x80
 80004ca:	00e4      	lsls	r4, r4, #3
 80004cc:	04db      	lsls	r3, r3, #19
 80004ce:	431c      	orrs	r4, r3
 80004d0:	2300      	movs	r3, #0
 80004d2:	4699      	mov	r9, r3
 80004d4:	469b      	mov	fp, r3
 80004d6:	3e7f      	subs	r6, #127	; 0x7f
 80004d8:	4643      	mov	r3, r8
 80004da:	4642      	mov	r2, r8
 80004dc:	025d      	lsls	r5, r3, #9
 80004de:	0fd2      	lsrs	r2, r2, #31
 80004e0:	005b      	lsls	r3, r3, #1
 80004e2:	0a6d      	lsrs	r5, r5, #9
 80004e4:	0e1b      	lsrs	r3, r3, #24
 80004e6:	4690      	mov	r8, r2
 80004e8:	4692      	mov	sl, r2
 80004ea:	d065      	beq.n	80005b8 <__aeabi_fdiv+0x110>
 80004ec:	2bff      	cmp	r3, #255	; 0xff
 80004ee:	d055      	beq.n	800059c <__aeabi_fdiv+0xf4>
 80004f0:	2280      	movs	r2, #128	; 0x80
 80004f2:	2100      	movs	r1, #0
 80004f4:	00ed      	lsls	r5, r5, #3
 80004f6:	04d2      	lsls	r2, r2, #19
 80004f8:	3b7f      	subs	r3, #127	; 0x7f
 80004fa:	4315      	orrs	r5, r2
 80004fc:	1af6      	subs	r6, r6, r3
 80004fe:	4643      	mov	r3, r8
 8000500:	464a      	mov	r2, r9
 8000502:	407b      	eors	r3, r7
 8000504:	2a0f      	cmp	r2, #15
 8000506:	d900      	bls.n	800050a <__aeabi_fdiv+0x62>
 8000508:	e08d      	b.n	8000626 <__aeabi_fdiv+0x17e>
 800050a:	486d      	ldr	r0, [pc, #436]	; (80006c0 <__aeabi_fdiv+0x218>)
 800050c:	0092      	lsls	r2, r2, #2
 800050e:	5882      	ldr	r2, [r0, r2]
 8000510:	4697      	mov	pc, r2
 8000512:	2c00      	cmp	r4, #0
 8000514:	d154      	bne.n	80005c0 <__aeabi_fdiv+0x118>
 8000516:	2308      	movs	r3, #8
 8000518:	4699      	mov	r9, r3
 800051a:	3b06      	subs	r3, #6
 800051c:	26ff      	movs	r6, #255	; 0xff
 800051e:	469b      	mov	fp, r3
 8000520:	e7da      	b.n	80004d8 <__aeabi_fdiv+0x30>
 8000522:	2500      	movs	r5, #0
 8000524:	4653      	mov	r3, sl
 8000526:	2902      	cmp	r1, #2
 8000528:	d01b      	beq.n	8000562 <__aeabi_fdiv+0xba>
 800052a:	2903      	cmp	r1, #3
 800052c:	d100      	bne.n	8000530 <__aeabi_fdiv+0x88>
 800052e:	e0bf      	b.n	80006b0 <__aeabi_fdiv+0x208>
 8000530:	2901      	cmp	r1, #1
 8000532:	d028      	beq.n	8000586 <__aeabi_fdiv+0xde>
 8000534:	0030      	movs	r0, r6
 8000536:	307f      	adds	r0, #127	; 0x7f
 8000538:	2800      	cmp	r0, #0
 800053a:	dd20      	ble.n	800057e <__aeabi_fdiv+0xd6>
 800053c:	076a      	lsls	r2, r5, #29
 800053e:	d004      	beq.n	800054a <__aeabi_fdiv+0xa2>
 8000540:	220f      	movs	r2, #15
 8000542:	402a      	ands	r2, r5
 8000544:	2a04      	cmp	r2, #4
 8000546:	d000      	beq.n	800054a <__aeabi_fdiv+0xa2>
 8000548:	3504      	adds	r5, #4
 800054a:	012a      	lsls	r2, r5, #4
 800054c:	d503      	bpl.n	8000556 <__aeabi_fdiv+0xae>
 800054e:	0030      	movs	r0, r6
 8000550:	4a5c      	ldr	r2, [pc, #368]	; (80006c4 <__aeabi_fdiv+0x21c>)
 8000552:	3080      	adds	r0, #128	; 0x80
 8000554:	4015      	ands	r5, r2
 8000556:	28fe      	cmp	r0, #254	; 0xfe
 8000558:	dc03      	bgt.n	8000562 <__aeabi_fdiv+0xba>
 800055a:	01ac      	lsls	r4, r5, #6
 800055c:	0a64      	lsrs	r4, r4, #9
 800055e:	b2c2      	uxtb	r2, r0
 8000560:	e001      	b.n	8000566 <__aeabi_fdiv+0xbe>
 8000562:	22ff      	movs	r2, #255	; 0xff
 8000564:	2400      	movs	r4, #0
 8000566:	0264      	lsls	r4, r4, #9
 8000568:	05d2      	lsls	r2, r2, #23
 800056a:	0a60      	lsrs	r0, r4, #9
 800056c:	07db      	lsls	r3, r3, #31
 800056e:	4310      	orrs	r0, r2
 8000570:	4318      	orrs	r0, r3
 8000572:	bc3c      	pop	{r2, r3, r4, r5}
 8000574:	4690      	mov	r8, r2
 8000576:	4699      	mov	r9, r3
 8000578:	46a2      	mov	sl, r4
 800057a:	46ab      	mov	fp, r5
 800057c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800057e:	2201      	movs	r2, #1
 8000580:	1a10      	subs	r0, r2, r0
 8000582:	281b      	cmp	r0, #27
 8000584:	dd7c      	ble.n	8000680 <__aeabi_fdiv+0x1d8>
 8000586:	2200      	movs	r2, #0
 8000588:	2400      	movs	r4, #0
 800058a:	e7ec      	b.n	8000566 <__aeabi_fdiv+0xbe>
 800058c:	2c00      	cmp	r4, #0
 800058e:	d11d      	bne.n	80005cc <__aeabi_fdiv+0x124>
 8000590:	2304      	movs	r3, #4
 8000592:	4699      	mov	r9, r3
 8000594:	3b03      	subs	r3, #3
 8000596:	2600      	movs	r6, #0
 8000598:	469b      	mov	fp, r3
 800059a:	e79d      	b.n	80004d8 <__aeabi_fdiv+0x30>
 800059c:	3eff      	subs	r6, #255	; 0xff
 800059e:	2d00      	cmp	r5, #0
 80005a0:	d120      	bne.n	80005e4 <__aeabi_fdiv+0x13c>
 80005a2:	2102      	movs	r1, #2
 80005a4:	4643      	mov	r3, r8
 80005a6:	464a      	mov	r2, r9
 80005a8:	407b      	eors	r3, r7
 80005aa:	430a      	orrs	r2, r1
 80005ac:	2a0f      	cmp	r2, #15
 80005ae:	d8d8      	bhi.n	8000562 <__aeabi_fdiv+0xba>
 80005b0:	4845      	ldr	r0, [pc, #276]	; (80006c8 <__aeabi_fdiv+0x220>)
 80005b2:	0092      	lsls	r2, r2, #2
 80005b4:	5882      	ldr	r2, [r0, r2]
 80005b6:	4697      	mov	pc, r2
 80005b8:	2d00      	cmp	r5, #0
 80005ba:	d119      	bne.n	80005f0 <__aeabi_fdiv+0x148>
 80005bc:	2101      	movs	r1, #1
 80005be:	e7f1      	b.n	80005a4 <__aeabi_fdiv+0xfc>
 80005c0:	230c      	movs	r3, #12
 80005c2:	4699      	mov	r9, r3
 80005c4:	3b09      	subs	r3, #9
 80005c6:	26ff      	movs	r6, #255	; 0xff
 80005c8:	469b      	mov	fp, r3
 80005ca:	e785      	b.n	80004d8 <__aeabi_fdiv+0x30>
 80005cc:	0020      	movs	r0, r4
 80005ce:	f001 fafd 	bl	8001bcc <__clzsi2>
 80005d2:	2676      	movs	r6, #118	; 0x76
 80005d4:	1f43      	subs	r3, r0, #5
 80005d6:	409c      	lsls	r4, r3
 80005d8:	2300      	movs	r3, #0
 80005da:	4276      	negs	r6, r6
 80005dc:	1a36      	subs	r6, r6, r0
 80005de:	4699      	mov	r9, r3
 80005e0:	469b      	mov	fp, r3
 80005e2:	e779      	b.n	80004d8 <__aeabi_fdiv+0x30>
 80005e4:	464a      	mov	r2, r9
 80005e6:	2303      	movs	r3, #3
 80005e8:	431a      	orrs	r2, r3
 80005ea:	4691      	mov	r9, r2
 80005ec:	2103      	movs	r1, #3
 80005ee:	e786      	b.n	80004fe <__aeabi_fdiv+0x56>
 80005f0:	0028      	movs	r0, r5
 80005f2:	f001 faeb 	bl	8001bcc <__clzsi2>
 80005f6:	1f43      	subs	r3, r0, #5
 80005f8:	1836      	adds	r6, r6, r0
 80005fa:	409d      	lsls	r5, r3
 80005fc:	3676      	adds	r6, #118	; 0x76
 80005fe:	2100      	movs	r1, #0
 8000600:	e77d      	b.n	80004fe <__aeabi_fdiv+0x56>
 8000602:	2480      	movs	r4, #128	; 0x80
 8000604:	2300      	movs	r3, #0
 8000606:	03e4      	lsls	r4, r4, #15
 8000608:	22ff      	movs	r2, #255	; 0xff
 800060a:	e7ac      	b.n	8000566 <__aeabi_fdiv+0xbe>
 800060c:	2500      	movs	r5, #0
 800060e:	2380      	movs	r3, #128	; 0x80
 8000610:	03db      	lsls	r3, r3, #15
 8000612:	421c      	tst	r4, r3
 8000614:	d028      	beq.n	8000668 <__aeabi_fdiv+0x1c0>
 8000616:	421d      	tst	r5, r3
 8000618:	d126      	bne.n	8000668 <__aeabi_fdiv+0x1c0>
 800061a:	432b      	orrs	r3, r5
 800061c:	025c      	lsls	r4, r3, #9
 800061e:	0a64      	lsrs	r4, r4, #9
 8000620:	4643      	mov	r3, r8
 8000622:	22ff      	movs	r2, #255	; 0xff
 8000624:	e79f      	b.n	8000566 <__aeabi_fdiv+0xbe>
 8000626:	0162      	lsls	r2, r4, #5
 8000628:	016c      	lsls	r4, r5, #5
 800062a:	42a2      	cmp	r2, r4
 800062c:	d224      	bcs.n	8000678 <__aeabi_fdiv+0x1d0>
 800062e:	211b      	movs	r1, #27
 8000630:	2500      	movs	r5, #0
 8000632:	3e01      	subs	r6, #1
 8000634:	2701      	movs	r7, #1
 8000636:	0010      	movs	r0, r2
 8000638:	006d      	lsls	r5, r5, #1
 800063a:	0052      	lsls	r2, r2, #1
 800063c:	2800      	cmp	r0, #0
 800063e:	db01      	blt.n	8000644 <__aeabi_fdiv+0x19c>
 8000640:	4294      	cmp	r4, r2
 8000642:	d801      	bhi.n	8000648 <__aeabi_fdiv+0x1a0>
 8000644:	1b12      	subs	r2, r2, r4
 8000646:	433d      	orrs	r5, r7
 8000648:	3901      	subs	r1, #1
 800064a:	2900      	cmp	r1, #0
 800064c:	d1f3      	bne.n	8000636 <__aeabi_fdiv+0x18e>
 800064e:	0014      	movs	r4, r2
 8000650:	1e62      	subs	r2, r4, #1
 8000652:	4194      	sbcs	r4, r2
 8000654:	4325      	orrs	r5, r4
 8000656:	e76d      	b.n	8000534 <__aeabi_fdiv+0x8c>
 8000658:	46ba      	mov	sl, r7
 800065a:	4659      	mov	r1, fp
 800065c:	0025      	movs	r5, r4
 800065e:	4653      	mov	r3, sl
 8000660:	2902      	cmp	r1, #2
 8000662:	d000      	beq.n	8000666 <__aeabi_fdiv+0x1be>
 8000664:	e761      	b.n	800052a <__aeabi_fdiv+0x82>
 8000666:	e77c      	b.n	8000562 <__aeabi_fdiv+0xba>
 8000668:	2380      	movs	r3, #128	; 0x80
 800066a:	03db      	lsls	r3, r3, #15
 800066c:	431c      	orrs	r4, r3
 800066e:	0264      	lsls	r4, r4, #9
 8000670:	0a64      	lsrs	r4, r4, #9
 8000672:	003b      	movs	r3, r7
 8000674:	22ff      	movs	r2, #255	; 0xff
 8000676:	e776      	b.n	8000566 <__aeabi_fdiv+0xbe>
 8000678:	1b12      	subs	r2, r2, r4
 800067a:	211a      	movs	r1, #26
 800067c:	2501      	movs	r5, #1
 800067e:	e7d9      	b.n	8000634 <__aeabi_fdiv+0x18c>
 8000680:	369e      	adds	r6, #158	; 0x9e
 8000682:	002a      	movs	r2, r5
 8000684:	40b5      	lsls	r5, r6
 8000686:	002c      	movs	r4, r5
 8000688:	40c2      	lsrs	r2, r0
 800068a:	1e65      	subs	r5, r4, #1
 800068c:	41ac      	sbcs	r4, r5
 800068e:	4314      	orrs	r4, r2
 8000690:	0762      	lsls	r2, r4, #29
 8000692:	d004      	beq.n	800069e <__aeabi_fdiv+0x1f6>
 8000694:	220f      	movs	r2, #15
 8000696:	4022      	ands	r2, r4
 8000698:	2a04      	cmp	r2, #4
 800069a:	d000      	beq.n	800069e <__aeabi_fdiv+0x1f6>
 800069c:	3404      	adds	r4, #4
 800069e:	0162      	lsls	r2, r4, #5
 80006a0:	d403      	bmi.n	80006aa <__aeabi_fdiv+0x202>
 80006a2:	01a4      	lsls	r4, r4, #6
 80006a4:	0a64      	lsrs	r4, r4, #9
 80006a6:	2200      	movs	r2, #0
 80006a8:	e75d      	b.n	8000566 <__aeabi_fdiv+0xbe>
 80006aa:	2201      	movs	r2, #1
 80006ac:	2400      	movs	r4, #0
 80006ae:	e75a      	b.n	8000566 <__aeabi_fdiv+0xbe>
 80006b0:	2480      	movs	r4, #128	; 0x80
 80006b2:	03e4      	lsls	r4, r4, #15
 80006b4:	432c      	orrs	r4, r5
 80006b6:	0264      	lsls	r4, r4, #9
 80006b8:	0a64      	lsrs	r4, r4, #9
 80006ba:	22ff      	movs	r2, #255	; 0xff
 80006bc:	e753      	b.n	8000566 <__aeabi_fdiv+0xbe>
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	0800be50 	.word	0x0800be50
 80006c4:	f7ffffff 	.word	0xf7ffffff
 80006c8:	0800be90 	.word	0x0800be90

080006cc <__eqsf2>:
 80006cc:	b570      	push	{r4, r5, r6, lr}
 80006ce:	0042      	lsls	r2, r0, #1
 80006d0:	024e      	lsls	r6, r1, #9
 80006d2:	004c      	lsls	r4, r1, #1
 80006d4:	0245      	lsls	r5, r0, #9
 80006d6:	0a6d      	lsrs	r5, r5, #9
 80006d8:	0e12      	lsrs	r2, r2, #24
 80006da:	0fc3      	lsrs	r3, r0, #31
 80006dc:	0a76      	lsrs	r6, r6, #9
 80006de:	0e24      	lsrs	r4, r4, #24
 80006e0:	0fc9      	lsrs	r1, r1, #31
 80006e2:	2aff      	cmp	r2, #255	; 0xff
 80006e4:	d00f      	beq.n	8000706 <__eqsf2+0x3a>
 80006e6:	2cff      	cmp	r4, #255	; 0xff
 80006e8:	d011      	beq.n	800070e <__eqsf2+0x42>
 80006ea:	2001      	movs	r0, #1
 80006ec:	42a2      	cmp	r2, r4
 80006ee:	d000      	beq.n	80006f2 <__eqsf2+0x26>
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	42b5      	cmp	r5, r6
 80006f4:	d1fc      	bne.n	80006f0 <__eqsf2+0x24>
 80006f6:	428b      	cmp	r3, r1
 80006f8:	d00d      	beq.n	8000716 <__eqsf2+0x4a>
 80006fa:	2a00      	cmp	r2, #0
 80006fc:	d1f8      	bne.n	80006f0 <__eqsf2+0x24>
 80006fe:	0028      	movs	r0, r5
 8000700:	1e45      	subs	r5, r0, #1
 8000702:	41a8      	sbcs	r0, r5
 8000704:	e7f4      	b.n	80006f0 <__eqsf2+0x24>
 8000706:	2001      	movs	r0, #1
 8000708:	2d00      	cmp	r5, #0
 800070a:	d1f1      	bne.n	80006f0 <__eqsf2+0x24>
 800070c:	e7eb      	b.n	80006e6 <__eqsf2+0x1a>
 800070e:	2001      	movs	r0, #1
 8000710:	2e00      	cmp	r6, #0
 8000712:	d1ed      	bne.n	80006f0 <__eqsf2+0x24>
 8000714:	e7e9      	b.n	80006ea <__eqsf2+0x1e>
 8000716:	2000      	movs	r0, #0
 8000718:	e7ea      	b.n	80006f0 <__eqsf2+0x24>
 800071a:	46c0      	nop			; (mov r8, r8)

0800071c <__gesf2>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	004a      	lsls	r2, r1, #1
 8000720:	024e      	lsls	r6, r1, #9
 8000722:	0245      	lsls	r5, r0, #9
 8000724:	0044      	lsls	r4, r0, #1
 8000726:	0a6d      	lsrs	r5, r5, #9
 8000728:	0e24      	lsrs	r4, r4, #24
 800072a:	0fc3      	lsrs	r3, r0, #31
 800072c:	0a76      	lsrs	r6, r6, #9
 800072e:	0e12      	lsrs	r2, r2, #24
 8000730:	0fc9      	lsrs	r1, r1, #31
 8000732:	2cff      	cmp	r4, #255	; 0xff
 8000734:	d015      	beq.n	8000762 <__gesf2+0x46>
 8000736:	2aff      	cmp	r2, #255	; 0xff
 8000738:	d00e      	beq.n	8000758 <__gesf2+0x3c>
 800073a:	2c00      	cmp	r4, #0
 800073c:	d115      	bne.n	800076a <__gesf2+0x4e>
 800073e:	2a00      	cmp	r2, #0
 8000740:	d101      	bne.n	8000746 <__gesf2+0x2a>
 8000742:	2e00      	cmp	r6, #0
 8000744:	d01c      	beq.n	8000780 <__gesf2+0x64>
 8000746:	2d00      	cmp	r5, #0
 8000748:	d014      	beq.n	8000774 <__gesf2+0x58>
 800074a:	428b      	cmp	r3, r1
 800074c:	d027      	beq.n	800079e <__gesf2+0x82>
 800074e:	2002      	movs	r0, #2
 8000750:	3b01      	subs	r3, #1
 8000752:	4018      	ands	r0, r3
 8000754:	3801      	subs	r0, #1
 8000756:	bd70      	pop	{r4, r5, r6, pc}
 8000758:	2e00      	cmp	r6, #0
 800075a:	d0ee      	beq.n	800073a <__gesf2+0x1e>
 800075c:	2002      	movs	r0, #2
 800075e:	4240      	negs	r0, r0
 8000760:	e7f9      	b.n	8000756 <__gesf2+0x3a>
 8000762:	2d00      	cmp	r5, #0
 8000764:	d1fa      	bne.n	800075c <__gesf2+0x40>
 8000766:	2aff      	cmp	r2, #255	; 0xff
 8000768:	d00e      	beq.n	8000788 <__gesf2+0x6c>
 800076a:	2a00      	cmp	r2, #0
 800076c:	d10e      	bne.n	800078c <__gesf2+0x70>
 800076e:	2e00      	cmp	r6, #0
 8000770:	d0ed      	beq.n	800074e <__gesf2+0x32>
 8000772:	e00b      	b.n	800078c <__gesf2+0x70>
 8000774:	2301      	movs	r3, #1
 8000776:	3901      	subs	r1, #1
 8000778:	4399      	bics	r1, r3
 800077a:	0008      	movs	r0, r1
 800077c:	3001      	adds	r0, #1
 800077e:	e7ea      	b.n	8000756 <__gesf2+0x3a>
 8000780:	2000      	movs	r0, #0
 8000782:	2d00      	cmp	r5, #0
 8000784:	d0e7      	beq.n	8000756 <__gesf2+0x3a>
 8000786:	e7e2      	b.n	800074e <__gesf2+0x32>
 8000788:	2e00      	cmp	r6, #0
 800078a:	d1e7      	bne.n	800075c <__gesf2+0x40>
 800078c:	428b      	cmp	r3, r1
 800078e:	d1de      	bne.n	800074e <__gesf2+0x32>
 8000790:	4294      	cmp	r4, r2
 8000792:	dd05      	ble.n	80007a0 <__gesf2+0x84>
 8000794:	2102      	movs	r1, #2
 8000796:	1e58      	subs	r0, r3, #1
 8000798:	4008      	ands	r0, r1
 800079a:	3801      	subs	r0, #1
 800079c:	e7db      	b.n	8000756 <__gesf2+0x3a>
 800079e:	2400      	movs	r4, #0
 80007a0:	42a2      	cmp	r2, r4
 80007a2:	dc04      	bgt.n	80007ae <__gesf2+0x92>
 80007a4:	42b5      	cmp	r5, r6
 80007a6:	d8d2      	bhi.n	800074e <__gesf2+0x32>
 80007a8:	2000      	movs	r0, #0
 80007aa:	42b5      	cmp	r5, r6
 80007ac:	d2d3      	bcs.n	8000756 <__gesf2+0x3a>
 80007ae:	1e58      	subs	r0, r3, #1
 80007b0:	2301      	movs	r3, #1
 80007b2:	4398      	bics	r0, r3
 80007b4:	3001      	adds	r0, #1
 80007b6:	e7ce      	b.n	8000756 <__gesf2+0x3a>

080007b8 <__lesf2>:
 80007b8:	b530      	push	{r4, r5, lr}
 80007ba:	0042      	lsls	r2, r0, #1
 80007bc:	0244      	lsls	r4, r0, #9
 80007be:	024d      	lsls	r5, r1, #9
 80007c0:	0fc3      	lsrs	r3, r0, #31
 80007c2:	0048      	lsls	r0, r1, #1
 80007c4:	0a64      	lsrs	r4, r4, #9
 80007c6:	0e12      	lsrs	r2, r2, #24
 80007c8:	0a6d      	lsrs	r5, r5, #9
 80007ca:	0e00      	lsrs	r0, r0, #24
 80007cc:	0fc9      	lsrs	r1, r1, #31
 80007ce:	2aff      	cmp	r2, #255	; 0xff
 80007d0:	d012      	beq.n	80007f8 <__lesf2+0x40>
 80007d2:	28ff      	cmp	r0, #255	; 0xff
 80007d4:	d00c      	beq.n	80007f0 <__lesf2+0x38>
 80007d6:	2a00      	cmp	r2, #0
 80007d8:	d112      	bne.n	8000800 <__lesf2+0x48>
 80007da:	2800      	cmp	r0, #0
 80007dc:	d119      	bne.n	8000812 <__lesf2+0x5a>
 80007de:	2d00      	cmp	r5, #0
 80007e0:	d117      	bne.n	8000812 <__lesf2+0x5a>
 80007e2:	2c00      	cmp	r4, #0
 80007e4:	d02b      	beq.n	800083e <__lesf2+0x86>
 80007e6:	2002      	movs	r0, #2
 80007e8:	3b01      	subs	r3, #1
 80007ea:	4018      	ands	r0, r3
 80007ec:	3801      	subs	r0, #1
 80007ee:	e026      	b.n	800083e <__lesf2+0x86>
 80007f0:	2d00      	cmp	r5, #0
 80007f2:	d0f0      	beq.n	80007d6 <__lesf2+0x1e>
 80007f4:	2002      	movs	r0, #2
 80007f6:	e022      	b.n	800083e <__lesf2+0x86>
 80007f8:	2c00      	cmp	r4, #0
 80007fa:	d1fb      	bne.n	80007f4 <__lesf2+0x3c>
 80007fc:	28ff      	cmp	r0, #255	; 0xff
 80007fe:	d01f      	beq.n	8000840 <__lesf2+0x88>
 8000800:	2800      	cmp	r0, #0
 8000802:	d11f      	bne.n	8000844 <__lesf2+0x8c>
 8000804:	2d00      	cmp	r5, #0
 8000806:	d11d      	bne.n	8000844 <__lesf2+0x8c>
 8000808:	2002      	movs	r0, #2
 800080a:	3b01      	subs	r3, #1
 800080c:	4018      	ands	r0, r3
 800080e:	3801      	subs	r0, #1
 8000810:	e015      	b.n	800083e <__lesf2+0x86>
 8000812:	2c00      	cmp	r4, #0
 8000814:	d00e      	beq.n	8000834 <__lesf2+0x7c>
 8000816:	428b      	cmp	r3, r1
 8000818:	d1e5      	bne.n	80007e6 <__lesf2+0x2e>
 800081a:	2200      	movs	r2, #0
 800081c:	4290      	cmp	r0, r2
 800081e:	dc04      	bgt.n	800082a <__lesf2+0x72>
 8000820:	42ac      	cmp	r4, r5
 8000822:	d8e0      	bhi.n	80007e6 <__lesf2+0x2e>
 8000824:	2000      	movs	r0, #0
 8000826:	42ac      	cmp	r4, r5
 8000828:	d209      	bcs.n	800083e <__lesf2+0x86>
 800082a:	1e58      	subs	r0, r3, #1
 800082c:	2301      	movs	r3, #1
 800082e:	4398      	bics	r0, r3
 8000830:	3001      	adds	r0, #1
 8000832:	e004      	b.n	800083e <__lesf2+0x86>
 8000834:	2301      	movs	r3, #1
 8000836:	3901      	subs	r1, #1
 8000838:	4399      	bics	r1, r3
 800083a:	0008      	movs	r0, r1
 800083c:	3001      	adds	r0, #1
 800083e:	bd30      	pop	{r4, r5, pc}
 8000840:	2d00      	cmp	r5, #0
 8000842:	d1d7      	bne.n	80007f4 <__lesf2+0x3c>
 8000844:	428b      	cmp	r3, r1
 8000846:	d1ce      	bne.n	80007e6 <__lesf2+0x2e>
 8000848:	4282      	cmp	r2, r0
 800084a:	dde7      	ble.n	800081c <__lesf2+0x64>
 800084c:	2102      	movs	r1, #2
 800084e:	1e58      	subs	r0, r3, #1
 8000850:	4008      	ands	r0, r1
 8000852:	3801      	subs	r0, #1
 8000854:	e7f3      	b.n	800083e <__lesf2+0x86>
 8000856:	46c0      	nop			; (mov r8, r8)

08000858 <__aeabi_fmul>:
 8000858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800085a:	464e      	mov	r6, r9
 800085c:	4657      	mov	r7, sl
 800085e:	4645      	mov	r5, r8
 8000860:	46de      	mov	lr, fp
 8000862:	b5e0      	push	{r5, r6, r7, lr}
 8000864:	0243      	lsls	r3, r0, #9
 8000866:	0a5b      	lsrs	r3, r3, #9
 8000868:	0045      	lsls	r5, r0, #1
 800086a:	b083      	sub	sp, #12
 800086c:	1c0f      	adds	r7, r1, #0
 800086e:	4699      	mov	r9, r3
 8000870:	0e2d      	lsrs	r5, r5, #24
 8000872:	0fc6      	lsrs	r6, r0, #31
 8000874:	2d00      	cmp	r5, #0
 8000876:	d057      	beq.n	8000928 <__aeabi_fmul+0xd0>
 8000878:	2dff      	cmp	r5, #255	; 0xff
 800087a:	d024      	beq.n	80008c6 <__aeabi_fmul+0x6e>
 800087c:	2080      	movs	r0, #128	; 0x80
 800087e:	00db      	lsls	r3, r3, #3
 8000880:	04c0      	lsls	r0, r0, #19
 8000882:	4318      	orrs	r0, r3
 8000884:	2300      	movs	r3, #0
 8000886:	4681      	mov	r9, r0
 8000888:	469a      	mov	sl, r3
 800088a:	469b      	mov	fp, r3
 800088c:	3d7f      	subs	r5, #127	; 0x7f
 800088e:	027c      	lsls	r4, r7, #9
 8000890:	007a      	lsls	r2, r7, #1
 8000892:	0ffb      	lsrs	r3, r7, #31
 8000894:	0a64      	lsrs	r4, r4, #9
 8000896:	0e12      	lsrs	r2, r2, #24
 8000898:	4698      	mov	r8, r3
 800089a:	d023      	beq.n	80008e4 <__aeabi_fmul+0x8c>
 800089c:	2aff      	cmp	r2, #255	; 0xff
 800089e:	d04b      	beq.n	8000938 <__aeabi_fmul+0xe0>
 80008a0:	00e3      	lsls	r3, r4, #3
 80008a2:	2480      	movs	r4, #128	; 0x80
 80008a4:	2000      	movs	r0, #0
 80008a6:	04e4      	lsls	r4, r4, #19
 80008a8:	3a7f      	subs	r2, #127	; 0x7f
 80008aa:	431c      	orrs	r4, r3
 80008ac:	18ad      	adds	r5, r5, r2
 80008ae:	1c6b      	adds	r3, r5, #1
 80008b0:	4647      	mov	r7, r8
 80008b2:	9301      	str	r3, [sp, #4]
 80008b4:	4653      	mov	r3, sl
 80008b6:	4077      	eors	r7, r6
 80008b8:	003a      	movs	r2, r7
 80008ba:	2b0f      	cmp	r3, #15
 80008bc:	d848      	bhi.n	8000950 <__aeabi_fmul+0xf8>
 80008be:	497d      	ldr	r1, [pc, #500]	; (8000ab4 <__aeabi_fmul+0x25c>)
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	58cb      	ldr	r3, [r1, r3]
 80008c4:	469f      	mov	pc, r3
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d000      	beq.n	80008cc <__aeabi_fmul+0x74>
 80008ca:	e085      	b.n	80009d8 <__aeabi_fmul+0x180>
 80008cc:	3308      	adds	r3, #8
 80008ce:	469a      	mov	sl, r3
 80008d0:	3b06      	subs	r3, #6
 80008d2:	469b      	mov	fp, r3
 80008d4:	027c      	lsls	r4, r7, #9
 80008d6:	007a      	lsls	r2, r7, #1
 80008d8:	0ffb      	lsrs	r3, r7, #31
 80008da:	25ff      	movs	r5, #255	; 0xff
 80008dc:	0a64      	lsrs	r4, r4, #9
 80008de:	0e12      	lsrs	r2, r2, #24
 80008e0:	4698      	mov	r8, r3
 80008e2:	d1db      	bne.n	800089c <__aeabi_fmul+0x44>
 80008e4:	2c00      	cmp	r4, #0
 80008e6:	d000      	beq.n	80008ea <__aeabi_fmul+0x92>
 80008e8:	e090      	b.n	8000a0c <__aeabi_fmul+0x1b4>
 80008ea:	4652      	mov	r2, sl
 80008ec:	2301      	movs	r3, #1
 80008ee:	431a      	orrs	r2, r3
 80008f0:	4692      	mov	sl, r2
 80008f2:	2001      	movs	r0, #1
 80008f4:	e7db      	b.n	80008ae <__aeabi_fmul+0x56>
 80008f6:	464c      	mov	r4, r9
 80008f8:	4658      	mov	r0, fp
 80008fa:	0017      	movs	r7, r2
 80008fc:	2802      	cmp	r0, #2
 80008fe:	d024      	beq.n	800094a <__aeabi_fmul+0xf2>
 8000900:	2803      	cmp	r0, #3
 8000902:	d100      	bne.n	8000906 <__aeabi_fmul+0xae>
 8000904:	e0cf      	b.n	8000aa6 <__aeabi_fmul+0x24e>
 8000906:	2200      	movs	r2, #0
 8000908:	2300      	movs	r3, #0
 800090a:	2801      	cmp	r0, #1
 800090c:	d14d      	bne.n	80009aa <__aeabi_fmul+0x152>
 800090e:	0258      	lsls	r0, r3, #9
 8000910:	05d2      	lsls	r2, r2, #23
 8000912:	0a40      	lsrs	r0, r0, #9
 8000914:	07ff      	lsls	r7, r7, #31
 8000916:	4310      	orrs	r0, r2
 8000918:	4338      	orrs	r0, r7
 800091a:	b003      	add	sp, #12
 800091c:	bc3c      	pop	{r2, r3, r4, r5}
 800091e:	4690      	mov	r8, r2
 8000920:	4699      	mov	r9, r3
 8000922:	46a2      	mov	sl, r4
 8000924:	46ab      	mov	fp, r5
 8000926:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000928:	2b00      	cmp	r3, #0
 800092a:	d15b      	bne.n	80009e4 <__aeabi_fmul+0x18c>
 800092c:	2304      	movs	r3, #4
 800092e:	469a      	mov	sl, r3
 8000930:	3b03      	subs	r3, #3
 8000932:	2500      	movs	r5, #0
 8000934:	469b      	mov	fp, r3
 8000936:	e7aa      	b.n	800088e <__aeabi_fmul+0x36>
 8000938:	35ff      	adds	r5, #255	; 0xff
 800093a:	2c00      	cmp	r4, #0
 800093c:	d160      	bne.n	8000a00 <__aeabi_fmul+0x1a8>
 800093e:	4652      	mov	r2, sl
 8000940:	2302      	movs	r3, #2
 8000942:	431a      	orrs	r2, r3
 8000944:	4692      	mov	sl, r2
 8000946:	2002      	movs	r0, #2
 8000948:	e7b1      	b.n	80008ae <__aeabi_fmul+0x56>
 800094a:	22ff      	movs	r2, #255	; 0xff
 800094c:	2300      	movs	r3, #0
 800094e:	e7de      	b.n	800090e <__aeabi_fmul+0xb6>
 8000950:	464b      	mov	r3, r9
 8000952:	0c1b      	lsrs	r3, r3, #16
 8000954:	469c      	mov	ip, r3
 8000956:	464b      	mov	r3, r9
 8000958:	0426      	lsls	r6, r4, #16
 800095a:	0c36      	lsrs	r6, r6, #16
 800095c:	0418      	lsls	r0, r3, #16
 800095e:	4661      	mov	r1, ip
 8000960:	0033      	movs	r3, r6
 8000962:	0c22      	lsrs	r2, r4, #16
 8000964:	4664      	mov	r4, ip
 8000966:	0c00      	lsrs	r0, r0, #16
 8000968:	4343      	muls	r3, r0
 800096a:	434e      	muls	r6, r1
 800096c:	4350      	muls	r0, r2
 800096e:	4354      	muls	r4, r2
 8000970:	1980      	adds	r0, r0, r6
 8000972:	0c1a      	lsrs	r2, r3, #16
 8000974:	1812      	adds	r2, r2, r0
 8000976:	4296      	cmp	r6, r2
 8000978:	d903      	bls.n	8000982 <__aeabi_fmul+0x12a>
 800097a:	2180      	movs	r1, #128	; 0x80
 800097c:	0249      	lsls	r1, r1, #9
 800097e:	468c      	mov	ip, r1
 8000980:	4464      	add	r4, ip
 8000982:	041b      	lsls	r3, r3, #16
 8000984:	0c1b      	lsrs	r3, r3, #16
 8000986:	0410      	lsls	r0, r2, #16
 8000988:	18c0      	adds	r0, r0, r3
 800098a:	0183      	lsls	r3, r0, #6
 800098c:	1e5e      	subs	r6, r3, #1
 800098e:	41b3      	sbcs	r3, r6
 8000990:	0e80      	lsrs	r0, r0, #26
 8000992:	4318      	orrs	r0, r3
 8000994:	0c13      	lsrs	r3, r2, #16
 8000996:	191b      	adds	r3, r3, r4
 8000998:	019b      	lsls	r3, r3, #6
 800099a:	4303      	orrs	r3, r0
 800099c:	001c      	movs	r4, r3
 800099e:	0123      	lsls	r3, r4, #4
 80009a0:	d579      	bpl.n	8000a96 <__aeabi_fmul+0x23e>
 80009a2:	2301      	movs	r3, #1
 80009a4:	0862      	lsrs	r2, r4, #1
 80009a6:	401c      	ands	r4, r3
 80009a8:	4314      	orrs	r4, r2
 80009aa:	9a01      	ldr	r2, [sp, #4]
 80009ac:	327f      	adds	r2, #127	; 0x7f
 80009ae:	2a00      	cmp	r2, #0
 80009b0:	dd4d      	ble.n	8000a4e <__aeabi_fmul+0x1f6>
 80009b2:	0763      	lsls	r3, r4, #29
 80009b4:	d004      	beq.n	80009c0 <__aeabi_fmul+0x168>
 80009b6:	230f      	movs	r3, #15
 80009b8:	4023      	ands	r3, r4
 80009ba:	2b04      	cmp	r3, #4
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fmul+0x168>
 80009be:	3404      	adds	r4, #4
 80009c0:	0123      	lsls	r3, r4, #4
 80009c2:	d503      	bpl.n	80009cc <__aeabi_fmul+0x174>
 80009c4:	4b3c      	ldr	r3, [pc, #240]	; (8000ab8 <__aeabi_fmul+0x260>)
 80009c6:	9a01      	ldr	r2, [sp, #4]
 80009c8:	401c      	ands	r4, r3
 80009ca:	3280      	adds	r2, #128	; 0x80
 80009cc:	2afe      	cmp	r2, #254	; 0xfe
 80009ce:	dcbc      	bgt.n	800094a <__aeabi_fmul+0xf2>
 80009d0:	01a3      	lsls	r3, r4, #6
 80009d2:	0a5b      	lsrs	r3, r3, #9
 80009d4:	b2d2      	uxtb	r2, r2
 80009d6:	e79a      	b.n	800090e <__aeabi_fmul+0xb6>
 80009d8:	230c      	movs	r3, #12
 80009da:	469a      	mov	sl, r3
 80009dc:	3b09      	subs	r3, #9
 80009de:	25ff      	movs	r5, #255	; 0xff
 80009e0:	469b      	mov	fp, r3
 80009e2:	e754      	b.n	800088e <__aeabi_fmul+0x36>
 80009e4:	0018      	movs	r0, r3
 80009e6:	f001 f8f1 	bl	8001bcc <__clzsi2>
 80009ea:	464a      	mov	r2, r9
 80009ec:	1f43      	subs	r3, r0, #5
 80009ee:	2576      	movs	r5, #118	; 0x76
 80009f0:	409a      	lsls	r2, r3
 80009f2:	2300      	movs	r3, #0
 80009f4:	426d      	negs	r5, r5
 80009f6:	4691      	mov	r9, r2
 80009f8:	1a2d      	subs	r5, r5, r0
 80009fa:	469a      	mov	sl, r3
 80009fc:	469b      	mov	fp, r3
 80009fe:	e746      	b.n	800088e <__aeabi_fmul+0x36>
 8000a00:	4652      	mov	r2, sl
 8000a02:	2303      	movs	r3, #3
 8000a04:	431a      	orrs	r2, r3
 8000a06:	4692      	mov	sl, r2
 8000a08:	2003      	movs	r0, #3
 8000a0a:	e750      	b.n	80008ae <__aeabi_fmul+0x56>
 8000a0c:	0020      	movs	r0, r4
 8000a0e:	f001 f8dd 	bl	8001bcc <__clzsi2>
 8000a12:	1f43      	subs	r3, r0, #5
 8000a14:	1a2d      	subs	r5, r5, r0
 8000a16:	409c      	lsls	r4, r3
 8000a18:	3d76      	subs	r5, #118	; 0x76
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	e747      	b.n	80008ae <__aeabi_fmul+0x56>
 8000a1e:	2380      	movs	r3, #128	; 0x80
 8000a20:	2700      	movs	r7, #0
 8000a22:	03db      	lsls	r3, r3, #15
 8000a24:	22ff      	movs	r2, #255	; 0xff
 8000a26:	e772      	b.n	800090e <__aeabi_fmul+0xb6>
 8000a28:	4642      	mov	r2, r8
 8000a2a:	e766      	b.n	80008fa <__aeabi_fmul+0xa2>
 8000a2c:	464c      	mov	r4, r9
 8000a2e:	0032      	movs	r2, r6
 8000a30:	4658      	mov	r0, fp
 8000a32:	e762      	b.n	80008fa <__aeabi_fmul+0xa2>
 8000a34:	2380      	movs	r3, #128	; 0x80
 8000a36:	464a      	mov	r2, r9
 8000a38:	03db      	lsls	r3, r3, #15
 8000a3a:	421a      	tst	r2, r3
 8000a3c:	d022      	beq.n	8000a84 <__aeabi_fmul+0x22c>
 8000a3e:	421c      	tst	r4, r3
 8000a40:	d120      	bne.n	8000a84 <__aeabi_fmul+0x22c>
 8000a42:	4323      	orrs	r3, r4
 8000a44:	025b      	lsls	r3, r3, #9
 8000a46:	0a5b      	lsrs	r3, r3, #9
 8000a48:	4647      	mov	r7, r8
 8000a4a:	22ff      	movs	r2, #255	; 0xff
 8000a4c:	e75f      	b.n	800090e <__aeabi_fmul+0xb6>
 8000a4e:	2301      	movs	r3, #1
 8000a50:	1a9a      	subs	r2, r3, r2
 8000a52:	2a1b      	cmp	r2, #27
 8000a54:	dc21      	bgt.n	8000a9a <__aeabi_fmul+0x242>
 8000a56:	0023      	movs	r3, r4
 8000a58:	9901      	ldr	r1, [sp, #4]
 8000a5a:	40d3      	lsrs	r3, r2
 8000a5c:	319e      	adds	r1, #158	; 0x9e
 8000a5e:	408c      	lsls	r4, r1
 8000a60:	001a      	movs	r2, r3
 8000a62:	0023      	movs	r3, r4
 8000a64:	1e5c      	subs	r4, r3, #1
 8000a66:	41a3      	sbcs	r3, r4
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	075a      	lsls	r2, r3, #29
 8000a6c:	d004      	beq.n	8000a78 <__aeabi_fmul+0x220>
 8000a6e:	220f      	movs	r2, #15
 8000a70:	401a      	ands	r2, r3
 8000a72:	2a04      	cmp	r2, #4
 8000a74:	d000      	beq.n	8000a78 <__aeabi_fmul+0x220>
 8000a76:	3304      	adds	r3, #4
 8000a78:	015a      	lsls	r2, r3, #5
 8000a7a:	d411      	bmi.n	8000aa0 <__aeabi_fmul+0x248>
 8000a7c:	019b      	lsls	r3, r3, #6
 8000a7e:	0a5b      	lsrs	r3, r3, #9
 8000a80:	2200      	movs	r2, #0
 8000a82:	e744      	b.n	800090e <__aeabi_fmul+0xb6>
 8000a84:	2380      	movs	r3, #128	; 0x80
 8000a86:	464a      	mov	r2, r9
 8000a88:	03db      	lsls	r3, r3, #15
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	025b      	lsls	r3, r3, #9
 8000a8e:	0a5b      	lsrs	r3, r3, #9
 8000a90:	0037      	movs	r7, r6
 8000a92:	22ff      	movs	r2, #255	; 0xff
 8000a94:	e73b      	b.n	800090e <__aeabi_fmul+0xb6>
 8000a96:	9501      	str	r5, [sp, #4]
 8000a98:	e787      	b.n	80009aa <__aeabi_fmul+0x152>
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	e736      	b.n	800090e <__aeabi_fmul+0xb6>
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	e733      	b.n	800090e <__aeabi_fmul+0xb6>
 8000aa6:	2380      	movs	r3, #128	; 0x80
 8000aa8:	03db      	lsls	r3, r3, #15
 8000aaa:	4323      	orrs	r3, r4
 8000aac:	025b      	lsls	r3, r3, #9
 8000aae:	0a5b      	lsrs	r3, r3, #9
 8000ab0:	22ff      	movs	r2, #255	; 0xff
 8000ab2:	e72c      	b.n	800090e <__aeabi_fmul+0xb6>
 8000ab4:	0800bed0 	.word	0x0800bed0
 8000ab8:	f7ffffff 	.word	0xf7ffffff

08000abc <__aeabi_fsub>:
 8000abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000abe:	4647      	mov	r7, r8
 8000ac0:	46ce      	mov	lr, r9
 8000ac2:	0044      	lsls	r4, r0, #1
 8000ac4:	0fc2      	lsrs	r2, r0, #31
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	0247      	lsls	r7, r0, #9
 8000aca:	0248      	lsls	r0, r1, #9
 8000acc:	0a40      	lsrs	r0, r0, #9
 8000ace:	4684      	mov	ip, r0
 8000ad0:	4666      	mov	r6, ip
 8000ad2:	0048      	lsls	r0, r1, #1
 8000ad4:	0a7f      	lsrs	r7, r7, #9
 8000ad6:	0e24      	lsrs	r4, r4, #24
 8000ad8:	00f6      	lsls	r6, r6, #3
 8000ada:	0025      	movs	r5, r4
 8000adc:	4690      	mov	r8, r2
 8000ade:	00fb      	lsls	r3, r7, #3
 8000ae0:	0e00      	lsrs	r0, r0, #24
 8000ae2:	0fc9      	lsrs	r1, r1, #31
 8000ae4:	46b1      	mov	r9, r6
 8000ae6:	28ff      	cmp	r0, #255	; 0xff
 8000ae8:	d100      	bne.n	8000aec <__aeabi_fsub+0x30>
 8000aea:	e085      	b.n	8000bf8 <__aeabi_fsub+0x13c>
 8000aec:	2601      	movs	r6, #1
 8000aee:	4071      	eors	r1, r6
 8000af0:	1a26      	subs	r6, r4, r0
 8000af2:	4291      	cmp	r1, r2
 8000af4:	d057      	beq.n	8000ba6 <__aeabi_fsub+0xea>
 8000af6:	2e00      	cmp	r6, #0
 8000af8:	dd43      	ble.n	8000b82 <__aeabi_fsub+0xc6>
 8000afa:	2800      	cmp	r0, #0
 8000afc:	d000      	beq.n	8000b00 <__aeabi_fsub+0x44>
 8000afe:	e07f      	b.n	8000c00 <__aeabi_fsub+0x144>
 8000b00:	4649      	mov	r1, r9
 8000b02:	2900      	cmp	r1, #0
 8000b04:	d100      	bne.n	8000b08 <__aeabi_fsub+0x4c>
 8000b06:	e0aa      	b.n	8000c5e <__aeabi_fsub+0x1a2>
 8000b08:	3e01      	subs	r6, #1
 8000b0a:	2e00      	cmp	r6, #0
 8000b0c:	d000      	beq.n	8000b10 <__aeabi_fsub+0x54>
 8000b0e:	e0f7      	b.n	8000d00 <__aeabi_fsub+0x244>
 8000b10:	1a5b      	subs	r3, r3, r1
 8000b12:	015a      	lsls	r2, r3, #5
 8000b14:	d400      	bmi.n	8000b18 <__aeabi_fsub+0x5c>
 8000b16:	e08b      	b.n	8000c30 <__aeabi_fsub+0x174>
 8000b18:	019b      	lsls	r3, r3, #6
 8000b1a:	099c      	lsrs	r4, r3, #6
 8000b1c:	0020      	movs	r0, r4
 8000b1e:	f001 f855 	bl	8001bcc <__clzsi2>
 8000b22:	3805      	subs	r0, #5
 8000b24:	4084      	lsls	r4, r0
 8000b26:	4285      	cmp	r5, r0
 8000b28:	dd00      	ble.n	8000b2c <__aeabi_fsub+0x70>
 8000b2a:	e0d3      	b.n	8000cd4 <__aeabi_fsub+0x218>
 8000b2c:	1b45      	subs	r5, r0, r5
 8000b2e:	0023      	movs	r3, r4
 8000b30:	2020      	movs	r0, #32
 8000b32:	3501      	adds	r5, #1
 8000b34:	40eb      	lsrs	r3, r5
 8000b36:	1b45      	subs	r5, r0, r5
 8000b38:	40ac      	lsls	r4, r5
 8000b3a:	1e62      	subs	r2, r4, #1
 8000b3c:	4194      	sbcs	r4, r2
 8000b3e:	4323      	orrs	r3, r4
 8000b40:	2407      	movs	r4, #7
 8000b42:	2500      	movs	r5, #0
 8000b44:	401c      	ands	r4, r3
 8000b46:	2201      	movs	r2, #1
 8000b48:	4641      	mov	r1, r8
 8000b4a:	400a      	ands	r2, r1
 8000b4c:	2c00      	cmp	r4, #0
 8000b4e:	d004      	beq.n	8000b5a <__aeabi_fsub+0x9e>
 8000b50:	210f      	movs	r1, #15
 8000b52:	4019      	ands	r1, r3
 8000b54:	2904      	cmp	r1, #4
 8000b56:	d000      	beq.n	8000b5a <__aeabi_fsub+0x9e>
 8000b58:	3304      	adds	r3, #4
 8000b5a:	0159      	lsls	r1, r3, #5
 8000b5c:	d400      	bmi.n	8000b60 <__aeabi_fsub+0xa4>
 8000b5e:	e080      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000b60:	3501      	adds	r5, #1
 8000b62:	b2ec      	uxtb	r4, r5
 8000b64:	2dff      	cmp	r5, #255	; 0xff
 8000b66:	d000      	beq.n	8000b6a <__aeabi_fsub+0xae>
 8000b68:	e0a3      	b.n	8000cb2 <__aeabi_fsub+0x1f6>
 8000b6a:	24ff      	movs	r4, #255	; 0xff
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	025b      	lsls	r3, r3, #9
 8000b70:	05e4      	lsls	r4, r4, #23
 8000b72:	0a58      	lsrs	r0, r3, #9
 8000b74:	07d2      	lsls	r2, r2, #31
 8000b76:	4320      	orrs	r0, r4
 8000b78:	4310      	orrs	r0, r2
 8000b7a:	bc0c      	pop	{r2, r3}
 8000b7c:	4690      	mov	r8, r2
 8000b7e:	4699      	mov	r9, r3
 8000b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b82:	2e00      	cmp	r6, #0
 8000b84:	d174      	bne.n	8000c70 <__aeabi_fsub+0x1b4>
 8000b86:	1c60      	adds	r0, r4, #1
 8000b88:	b2c0      	uxtb	r0, r0
 8000b8a:	2801      	cmp	r0, #1
 8000b8c:	dc00      	bgt.n	8000b90 <__aeabi_fsub+0xd4>
 8000b8e:	e0a7      	b.n	8000ce0 <__aeabi_fsub+0x224>
 8000b90:	464a      	mov	r2, r9
 8000b92:	1a9c      	subs	r4, r3, r2
 8000b94:	0162      	lsls	r2, r4, #5
 8000b96:	d500      	bpl.n	8000b9a <__aeabi_fsub+0xde>
 8000b98:	e0b6      	b.n	8000d08 <__aeabi_fsub+0x24c>
 8000b9a:	2c00      	cmp	r4, #0
 8000b9c:	d1be      	bne.n	8000b1c <__aeabi_fsub+0x60>
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2400      	movs	r4, #0
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	e7e3      	b.n	8000b6e <__aeabi_fsub+0xb2>
 8000ba6:	2e00      	cmp	r6, #0
 8000ba8:	dc00      	bgt.n	8000bac <__aeabi_fsub+0xf0>
 8000baa:	e085      	b.n	8000cb8 <__aeabi_fsub+0x1fc>
 8000bac:	2800      	cmp	r0, #0
 8000bae:	d046      	beq.n	8000c3e <__aeabi_fsub+0x182>
 8000bb0:	2cff      	cmp	r4, #255	; 0xff
 8000bb2:	d049      	beq.n	8000c48 <__aeabi_fsub+0x18c>
 8000bb4:	2280      	movs	r2, #128	; 0x80
 8000bb6:	4648      	mov	r0, r9
 8000bb8:	04d2      	lsls	r2, r2, #19
 8000bba:	4310      	orrs	r0, r2
 8000bbc:	4681      	mov	r9, r0
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	2e1b      	cmp	r6, #27
 8000bc2:	dc09      	bgt.n	8000bd8 <__aeabi_fsub+0x11c>
 8000bc4:	2020      	movs	r0, #32
 8000bc6:	464c      	mov	r4, r9
 8000bc8:	1b80      	subs	r0, r0, r6
 8000bca:	4084      	lsls	r4, r0
 8000bcc:	464a      	mov	r2, r9
 8000bce:	0020      	movs	r0, r4
 8000bd0:	40f2      	lsrs	r2, r6
 8000bd2:	1e44      	subs	r4, r0, #1
 8000bd4:	41a0      	sbcs	r0, r4
 8000bd6:	4302      	orrs	r2, r0
 8000bd8:	189b      	adds	r3, r3, r2
 8000bda:	015a      	lsls	r2, r3, #5
 8000bdc:	d528      	bpl.n	8000c30 <__aeabi_fsub+0x174>
 8000bde:	3501      	adds	r5, #1
 8000be0:	2dff      	cmp	r5, #255	; 0xff
 8000be2:	d100      	bne.n	8000be6 <__aeabi_fsub+0x12a>
 8000be4:	e0a8      	b.n	8000d38 <__aeabi_fsub+0x27c>
 8000be6:	2201      	movs	r2, #1
 8000be8:	2407      	movs	r4, #7
 8000bea:	4994      	ldr	r1, [pc, #592]	; (8000e3c <__aeabi_fsub+0x380>)
 8000bec:	401a      	ands	r2, r3
 8000bee:	085b      	lsrs	r3, r3, #1
 8000bf0:	400b      	ands	r3, r1
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	401c      	ands	r4, r3
 8000bf6:	e7a6      	b.n	8000b46 <__aeabi_fsub+0x8a>
 8000bf8:	2e00      	cmp	r6, #0
 8000bfa:	d000      	beq.n	8000bfe <__aeabi_fsub+0x142>
 8000bfc:	e778      	b.n	8000af0 <__aeabi_fsub+0x34>
 8000bfe:	e775      	b.n	8000aec <__aeabi_fsub+0x30>
 8000c00:	2cff      	cmp	r4, #255	; 0xff
 8000c02:	d054      	beq.n	8000cae <__aeabi_fsub+0x1f2>
 8000c04:	2280      	movs	r2, #128	; 0x80
 8000c06:	4649      	mov	r1, r9
 8000c08:	04d2      	lsls	r2, r2, #19
 8000c0a:	4311      	orrs	r1, r2
 8000c0c:	4689      	mov	r9, r1
 8000c0e:	2201      	movs	r2, #1
 8000c10:	2e1b      	cmp	r6, #27
 8000c12:	dc09      	bgt.n	8000c28 <__aeabi_fsub+0x16c>
 8000c14:	2120      	movs	r1, #32
 8000c16:	4648      	mov	r0, r9
 8000c18:	1b89      	subs	r1, r1, r6
 8000c1a:	4088      	lsls	r0, r1
 8000c1c:	464a      	mov	r2, r9
 8000c1e:	0001      	movs	r1, r0
 8000c20:	40f2      	lsrs	r2, r6
 8000c22:	1e48      	subs	r0, r1, #1
 8000c24:	4181      	sbcs	r1, r0
 8000c26:	430a      	orrs	r2, r1
 8000c28:	1a9b      	subs	r3, r3, r2
 8000c2a:	015a      	lsls	r2, r3, #5
 8000c2c:	d500      	bpl.n	8000c30 <__aeabi_fsub+0x174>
 8000c2e:	e773      	b.n	8000b18 <__aeabi_fsub+0x5c>
 8000c30:	2201      	movs	r2, #1
 8000c32:	4641      	mov	r1, r8
 8000c34:	400a      	ands	r2, r1
 8000c36:	0759      	lsls	r1, r3, #29
 8000c38:	d000      	beq.n	8000c3c <__aeabi_fsub+0x180>
 8000c3a:	e789      	b.n	8000b50 <__aeabi_fsub+0x94>
 8000c3c:	e011      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000c3e:	4648      	mov	r0, r9
 8000c40:	2800      	cmp	r0, #0
 8000c42:	d158      	bne.n	8000cf6 <__aeabi_fsub+0x23a>
 8000c44:	2cff      	cmp	r4, #255	; 0xff
 8000c46:	d10c      	bne.n	8000c62 <__aeabi_fsub+0x1a6>
 8000c48:	08db      	lsrs	r3, r3, #3
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d100      	bne.n	8000c50 <__aeabi_fsub+0x194>
 8000c4e:	e78c      	b.n	8000b6a <__aeabi_fsub+0xae>
 8000c50:	2080      	movs	r0, #128	; 0x80
 8000c52:	03c0      	lsls	r0, r0, #15
 8000c54:	4303      	orrs	r3, r0
 8000c56:	025b      	lsls	r3, r3, #9
 8000c58:	0a5b      	lsrs	r3, r3, #9
 8000c5a:	24ff      	movs	r4, #255	; 0xff
 8000c5c:	e787      	b.n	8000b6e <__aeabi_fsub+0xb2>
 8000c5e:	2cff      	cmp	r4, #255	; 0xff
 8000c60:	d025      	beq.n	8000cae <__aeabi_fsub+0x1f2>
 8000c62:	08db      	lsrs	r3, r3, #3
 8000c64:	2dff      	cmp	r5, #255	; 0xff
 8000c66:	d0f0      	beq.n	8000c4a <__aeabi_fsub+0x18e>
 8000c68:	025b      	lsls	r3, r3, #9
 8000c6a:	0a5b      	lsrs	r3, r3, #9
 8000c6c:	b2ec      	uxtb	r4, r5
 8000c6e:	e77e      	b.n	8000b6e <__aeabi_fsub+0xb2>
 8000c70:	2c00      	cmp	r4, #0
 8000c72:	d04d      	beq.n	8000d10 <__aeabi_fsub+0x254>
 8000c74:	28ff      	cmp	r0, #255	; 0xff
 8000c76:	d018      	beq.n	8000caa <__aeabi_fsub+0x1ee>
 8000c78:	2480      	movs	r4, #128	; 0x80
 8000c7a:	04e4      	lsls	r4, r4, #19
 8000c7c:	4272      	negs	r2, r6
 8000c7e:	4323      	orrs	r3, r4
 8000c80:	2a1b      	cmp	r2, #27
 8000c82:	dd00      	ble.n	8000c86 <__aeabi_fsub+0x1ca>
 8000c84:	e0c4      	b.n	8000e10 <__aeabi_fsub+0x354>
 8000c86:	001c      	movs	r4, r3
 8000c88:	2520      	movs	r5, #32
 8000c8a:	40d4      	lsrs	r4, r2
 8000c8c:	1aaa      	subs	r2, r5, r2
 8000c8e:	4093      	lsls	r3, r2
 8000c90:	1e5a      	subs	r2, r3, #1
 8000c92:	4193      	sbcs	r3, r2
 8000c94:	4323      	orrs	r3, r4
 8000c96:	464a      	mov	r2, r9
 8000c98:	0005      	movs	r5, r0
 8000c9a:	1ad3      	subs	r3, r2, r3
 8000c9c:	4688      	mov	r8, r1
 8000c9e:	e738      	b.n	8000b12 <__aeabi_fsub+0x56>
 8000ca0:	1c72      	adds	r2, r6, #1
 8000ca2:	d0f8      	beq.n	8000c96 <__aeabi_fsub+0x1da>
 8000ca4:	43f2      	mvns	r2, r6
 8000ca6:	28ff      	cmp	r0, #255	; 0xff
 8000ca8:	d1ea      	bne.n	8000c80 <__aeabi_fsub+0x1c4>
 8000caa:	000a      	movs	r2, r1
 8000cac:	464b      	mov	r3, r9
 8000cae:	25ff      	movs	r5, #255	; 0xff
 8000cb0:	e7d7      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000cb2:	019b      	lsls	r3, r3, #6
 8000cb4:	0a5b      	lsrs	r3, r3, #9
 8000cb6:	e75a      	b.n	8000b6e <__aeabi_fsub+0xb2>
 8000cb8:	2e00      	cmp	r6, #0
 8000cba:	d141      	bne.n	8000d40 <__aeabi_fsub+0x284>
 8000cbc:	1c65      	adds	r5, r4, #1
 8000cbe:	b2e9      	uxtb	r1, r5
 8000cc0:	2901      	cmp	r1, #1
 8000cc2:	dd45      	ble.n	8000d50 <__aeabi_fsub+0x294>
 8000cc4:	2dff      	cmp	r5, #255	; 0xff
 8000cc6:	d100      	bne.n	8000cca <__aeabi_fsub+0x20e>
 8000cc8:	e74f      	b.n	8000b6a <__aeabi_fsub+0xae>
 8000cca:	2407      	movs	r4, #7
 8000ccc:	444b      	add	r3, r9
 8000cce:	085b      	lsrs	r3, r3, #1
 8000cd0:	401c      	ands	r4, r3
 8000cd2:	e738      	b.n	8000b46 <__aeabi_fsub+0x8a>
 8000cd4:	2207      	movs	r2, #7
 8000cd6:	4b5a      	ldr	r3, [pc, #360]	; (8000e40 <__aeabi_fsub+0x384>)
 8000cd8:	1a2d      	subs	r5, r5, r0
 8000cda:	4023      	ands	r3, r4
 8000cdc:	4014      	ands	r4, r2
 8000cde:	e732      	b.n	8000b46 <__aeabi_fsub+0x8a>
 8000ce0:	2c00      	cmp	r4, #0
 8000ce2:	d11d      	bne.n	8000d20 <__aeabi_fsub+0x264>
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d17a      	bne.n	8000dde <__aeabi_fsub+0x322>
 8000ce8:	464b      	mov	r3, r9
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d100      	bne.n	8000cf0 <__aeabi_fsub+0x234>
 8000cee:	e091      	b.n	8000e14 <__aeabi_fsub+0x358>
 8000cf0:	000a      	movs	r2, r1
 8000cf2:	2500      	movs	r5, #0
 8000cf4:	e7b5      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000cf6:	3e01      	subs	r6, #1
 8000cf8:	2e00      	cmp	r6, #0
 8000cfa:	d119      	bne.n	8000d30 <__aeabi_fsub+0x274>
 8000cfc:	444b      	add	r3, r9
 8000cfe:	e76c      	b.n	8000bda <__aeabi_fsub+0x11e>
 8000d00:	2cff      	cmp	r4, #255	; 0xff
 8000d02:	d184      	bne.n	8000c0e <__aeabi_fsub+0x152>
 8000d04:	25ff      	movs	r5, #255	; 0xff
 8000d06:	e7ac      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000d08:	464a      	mov	r2, r9
 8000d0a:	4688      	mov	r8, r1
 8000d0c:	1ad4      	subs	r4, r2, r3
 8000d0e:	e705      	b.n	8000b1c <__aeabi_fsub+0x60>
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d1c5      	bne.n	8000ca0 <__aeabi_fsub+0x1e4>
 8000d14:	000a      	movs	r2, r1
 8000d16:	28ff      	cmp	r0, #255	; 0xff
 8000d18:	d0c8      	beq.n	8000cac <__aeabi_fsub+0x1f0>
 8000d1a:	0005      	movs	r5, r0
 8000d1c:	464b      	mov	r3, r9
 8000d1e:	e7a0      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d149      	bne.n	8000db8 <__aeabi_fsub+0x2fc>
 8000d24:	464b      	mov	r3, r9
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d077      	beq.n	8000e1a <__aeabi_fsub+0x35e>
 8000d2a:	000a      	movs	r2, r1
 8000d2c:	25ff      	movs	r5, #255	; 0xff
 8000d2e:	e798      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000d30:	2cff      	cmp	r4, #255	; 0xff
 8000d32:	d000      	beq.n	8000d36 <__aeabi_fsub+0x27a>
 8000d34:	e743      	b.n	8000bbe <__aeabi_fsub+0x102>
 8000d36:	e787      	b.n	8000c48 <__aeabi_fsub+0x18c>
 8000d38:	000a      	movs	r2, r1
 8000d3a:	24ff      	movs	r4, #255	; 0xff
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	e716      	b.n	8000b6e <__aeabi_fsub+0xb2>
 8000d40:	2c00      	cmp	r4, #0
 8000d42:	d115      	bne.n	8000d70 <__aeabi_fsub+0x2b4>
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d157      	bne.n	8000df8 <__aeabi_fsub+0x33c>
 8000d48:	28ff      	cmp	r0, #255	; 0xff
 8000d4a:	d1e6      	bne.n	8000d1a <__aeabi_fsub+0x25e>
 8000d4c:	464b      	mov	r3, r9
 8000d4e:	e77b      	b.n	8000c48 <__aeabi_fsub+0x18c>
 8000d50:	2c00      	cmp	r4, #0
 8000d52:	d120      	bne.n	8000d96 <__aeabi_fsub+0x2da>
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d057      	beq.n	8000e08 <__aeabi_fsub+0x34c>
 8000d58:	4649      	mov	r1, r9
 8000d5a:	2900      	cmp	r1, #0
 8000d5c:	d053      	beq.n	8000e06 <__aeabi_fsub+0x34a>
 8000d5e:	444b      	add	r3, r9
 8000d60:	015a      	lsls	r2, r3, #5
 8000d62:	d568      	bpl.n	8000e36 <__aeabi_fsub+0x37a>
 8000d64:	2407      	movs	r4, #7
 8000d66:	4a36      	ldr	r2, [pc, #216]	; (8000e40 <__aeabi_fsub+0x384>)
 8000d68:	401c      	ands	r4, r3
 8000d6a:	2501      	movs	r5, #1
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	e6ea      	b.n	8000b46 <__aeabi_fsub+0x8a>
 8000d70:	28ff      	cmp	r0, #255	; 0xff
 8000d72:	d0eb      	beq.n	8000d4c <__aeabi_fsub+0x290>
 8000d74:	2280      	movs	r2, #128	; 0x80
 8000d76:	04d2      	lsls	r2, r2, #19
 8000d78:	4276      	negs	r6, r6
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	2e1b      	cmp	r6, #27
 8000d7e:	dc53      	bgt.n	8000e28 <__aeabi_fsub+0x36c>
 8000d80:	2520      	movs	r5, #32
 8000d82:	1bad      	subs	r5, r5, r6
 8000d84:	001a      	movs	r2, r3
 8000d86:	40ab      	lsls	r3, r5
 8000d88:	40f2      	lsrs	r2, r6
 8000d8a:	1e5c      	subs	r4, r3, #1
 8000d8c:	41a3      	sbcs	r3, r4
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	444b      	add	r3, r9
 8000d92:	0005      	movs	r5, r0
 8000d94:	e721      	b.n	8000bda <__aeabi_fsub+0x11e>
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d0d8      	beq.n	8000d4c <__aeabi_fsub+0x290>
 8000d9a:	4649      	mov	r1, r9
 8000d9c:	2900      	cmp	r1, #0
 8000d9e:	d100      	bne.n	8000da2 <__aeabi_fsub+0x2e6>
 8000da0:	e752      	b.n	8000c48 <__aeabi_fsub+0x18c>
 8000da2:	2180      	movs	r1, #128	; 0x80
 8000da4:	03c9      	lsls	r1, r1, #15
 8000da6:	420f      	tst	r7, r1
 8000da8:	d100      	bne.n	8000dac <__aeabi_fsub+0x2f0>
 8000daa:	e74d      	b.n	8000c48 <__aeabi_fsub+0x18c>
 8000dac:	4660      	mov	r0, ip
 8000dae:	4208      	tst	r0, r1
 8000db0:	d000      	beq.n	8000db4 <__aeabi_fsub+0x2f8>
 8000db2:	e749      	b.n	8000c48 <__aeabi_fsub+0x18c>
 8000db4:	464b      	mov	r3, r9
 8000db6:	e747      	b.n	8000c48 <__aeabi_fsub+0x18c>
 8000db8:	4648      	mov	r0, r9
 8000dba:	25ff      	movs	r5, #255	; 0xff
 8000dbc:	2800      	cmp	r0, #0
 8000dbe:	d100      	bne.n	8000dc2 <__aeabi_fsub+0x306>
 8000dc0:	e74f      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000dc2:	2280      	movs	r2, #128	; 0x80
 8000dc4:	03d2      	lsls	r2, r2, #15
 8000dc6:	4217      	tst	r7, r2
 8000dc8:	d004      	beq.n	8000dd4 <__aeabi_fsub+0x318>
 8000dca:	4660      	mov	r0, ip
 8000dcc:	4210      	tst	r0, r2
 8000dce:	d101      	bne.n	8000dd4 <__aeabi_fsub+0x318>
 8000dd0:	464b      	mov	r3, r9
 8000dd2:	4688      	mov	r8, r1
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	4641      	mov	r1, r8
 8000dd8:	25ff      	movs	r5, #255	; 0xff
 8000dda:	400a      	ands	r2, r1
 8000ddc:	e741      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000dde:	4648      	mov	r0, r9
 8000de0:	2800      	cmp	r0, #0
 8000de2:	d01f      	beq.n	8000e24 <__aeabi_fsub+0x368>
 8000de4:	1a1a      	subs	r2, r3, r0
 8000de6:	0150      	lsls	r0, r2, #5
 8000de8:	d520      	bpl.n	8000e2c <__aeabi_fsub+0x370>
 8000dea:	464a      	mov	r2, r9
 8000dec:	2407      	movs	r4, #7
 8000dee:	1ad3      	subs	r3, r2, r3
 8000df0:	401c      	ands	r4, r3
 8000df2:	4688      	mov	r8, r1
 8000df4:	2500      	movs	r5, #0
 8000df6:	e6a6      	b.n	8000b46 <__aeabi_fsub+0x8a>
 8000df8:	1c74      	adds	r4, r6, #1
 8000dfa:	d0c9      	beq.n	8000d90 <__aeabi_fsub+0x2d4>
 8000dfc:	43f6      	mvns	r6, r6
 8000dfe:	28ff      	cmp	r0, #255	; 0xff
 8000e00:	d1bc      	bne.n	8000d7c <__aeabi_fsub+0x2c0>
 8000e02:	464b      	mov	r3, r9
 8000e04:	e720      	b.n	8000c48 <__aeabi_fsub+0x18c>
 8000e06:	4699      	mov	r9, r3
 8000e08:	464b      	mov	r3, r9
 8000e0a:	2500      	movs	r5, #0
 8000e0c:	08db      	lsrs	r3, r3, #3
 8000e0e:	e72b      	b.n	8000c68 <__aeabi_fsub+0x1ac>
 8000e10:	2301      	movs	r3, #1
 8000e12:	e740      	b.n	8000c96 <__aeabi_fsub+0x1da>
 8000e14:	2200      	movs	r2, #0
 8000e16:	2300      	movs	r3, #0
 8000e18:	e6a9      	b.n	8000b6e <__aeabi_fsub+0xb2>
 8000e1a:	2380      	movs	r3, #128	; 0x80
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	03db      	lsls	r3, r3, #15
 8000e20:	24ff      	movs	r4, #255	; 0xff
 8000e22:	e6a4      	b.n	8000b6e <__aeabi_fsub+0xb2>
 8000e24:	2500      	movs	r5, #0
 8000e26:	e71c      	b.n	8000c62 <__aeabi_fsub+0x1a6>
 8000e28:	2301      	movs	r3, #1
 8000e2a:	e7b1      	b.n	8000d90 <__aeabi_fsub+0x2d4>
 8000e2c:	2a00      	cmp	r2, #0
 8000e2e:	d0f1      	beq.n	8000e14 <__aeabi_fsub+0x358>
 8000e30:	0013      	movs	r3, r2
 8000e32:	2500      	movs	r5, #0
 8000e34:	e6fc      	b.n	8000c30 <__aeabi_fsub+0x174>
 8000e36:	2500      	movs	r5, #0
 8000e38:	e6fa      	b.n	8000c30 <__aeabi_fsub+0x174>
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	7dffffff 	.word	0x7dffffff
 8000e40:	fbffffff 	.word	0xfbffffff

08000e44 <__aeabi_f2iz>:
 8000e44:	0241      	lsls	r1, r0, #9
 8000e46:	0042      	lsls	r2, r0, #1
 8000e48:	0fc3      	lsrs	r3, r0, #31
 8000e4a:	0a49      	lsrs	r1, r1, #9
 8000e4c:	0e12      	lsrs	r2, r2, #24
 8000e4e:	2000      	movs	r0, #0
 8000e50:	2a7e      	cmp	r2, #126	; 0x7e
 8000e52:	d90d      	bls.n	8000e70 <__aeabi_f2iz+0x2c>
 8000e54:	2a9d      	cmp	r2, #157	; 0x9d
 8000e56:	d80c      	bhi.n	8000e72 <__aeabi_f2iz+0x2e>
 8000e58:	2080      	movs	r0, #128	; 0x80
 8000e5a:	0400      	lsls	r0, r0, #16
 8000e5c:	4301      	orrs	r1, r0
 8000e5e:	2a95      	cmp	r2, #149	; 0x95
 8000e60:	dc0a      	bgt.n	8000e78 <__aeabi_f2iz+0x34>
 8000e62:	2096      	movs	r0, #150	; 0x96
 8000e64:	1a82      	subs	r2, r0, r2
 8000e66:	40d1      	lsrs	r1, r2
 8000e68:	4248      	negs	r0, r1
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d100      	bne.n	8000e70 <__aeabi_f2iz+0x2c>
 8000e6e:	0008      	movs	r0, r1
 8000e70:	4770      	bx	lr
 8000e72:	4a03      	ldr	r2, [pc, #12]	; (8000e80 <__aeabi_f2iz+0x3c>)
 8000e74:	1898      	adds	r0, r3, r2
 8000e76:	e7fb      	b.n	8000e70 <__aeabi_f2iz+0x2c>
 8000e78:	3a96      	subs	r2, #150	; 0x96
 8000e7a:	4091      	lsls	r1, r2
 8000e7c:	e7f4      	b.n	8000e68 <__aeabi_f2iz+0x24>
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	7fffffff 	.word	0x7fffffff

08000e84 <__aeabi_ui2f>:
 8000e84:	b570      	push	{r4, r5, r6, lr}
 8000e86:	1e04      	subs	r4, r0, #0
 8000e88:	d034      	beq.n	8000ef4 <__aeabi_ui2f+0x70>
 8000e8a:	f000 fe9f 	bl	8001bcc <__clzsi2>
 8000e8e:	229e      	movs	r2, #158	; 0x9e
 8000e90:	1a12      	subs	r2, r2, r0
 8000e92:	2a96      	cmp	r2, #150	; 0x96
 8000e94:	dc07      	bgt.n	8000ea6 <__aeabi_ui2f+0x22>
 8000e96:	b2d2      	uxtb	r2, r2
 8000e98:	2808      	cmp	r0, #8
 8000e9a:	dd2e      	ble.n	8000efa <__aeabi_ui2f+0x76>
 8000e9c:	3808      	subs	r0, #8
 8000e9e:	4084      	lsls	r4, r0
 8000ea0:	0260      	lsls	r0, r4, #9
 8000ea2:	0a40      	lsrs	r0, r0, #9
 8000ea4:	e021      	b.n	8000eea <__aeabi_ui2f+0x66>
 8000ea6:	2a99      	cmp	r2, #153	; 0x99
 8000ea8:	dd09      	ble.n	8000ebe <__aeabi_ui2f+0x3a>
 8000eaa:	0003      	movs	r3, r0
 8000eac:	0021      	movs	r1, r4
 8000eae:	331b      	adds	r3, #27
 8000eb0:	4099      	lsls	r1, r3
 8000eb2:	1e4b      	subs	r3, r1, #1
 8000eb4:	4199      	sbcs	r1, r3
 8000eb6:	2305      	movs	r3, #5
 8000eb8:	1a1b      	subs	r3, r3, r0
 8000eba:	40dc      	lsrs	r4, r3
 8000ebc:	430c      	orrs	r4, r1
 8000ebe:	2805      	cmp	r0, #5
 8000ec0:	dd01      	ble.n	8000ec6 <__aeabi_ui2f+0x42>
 8000ec2:	1f43      	subs	r3, r0, #5
 8000ec4:	409c      	lsls	r4, r3
 8000ec6:	0023      	movs	r3, r4
 8000ec8:	490d      	ldr	r1, [pc, #52]	; (8000f00 <__aeabi_ui2f+0x7c>)
 8000eca:	400b      	ands	r3, r1
 8000ecc:	0765      	lsls	r5, r4, #29
 8000ece:	d009      	beq.n	8000ee4 <__aeabi_ui2f+0x60>
 8000ed0:	250f      	movs	r5, #15
 8000ed2:	402c      	ands	r4, r5
 8000ed4:	2c04      	cmp	r4, #4
 8000ed6:	d005      	beq.n	8000ee4 <__aeabi_ui2f+0x60>
 8000ed8:	3304      	adds	r3, #4
 8000eda:	015c      	lsls	r4, r3, #5
 8000edc:	d502      	bpl.n	8000ee4 <__aeabi_ui2f+0x60>
 8000ede:	229f      	movs	r2, #159	; 0x9f
 8000ee0:	400b      	ands	r3, r1
 8000ee2:	1a12      	subs	r2, r2, r0
 8000ee4:	019b      	lsls	r3, r3, #6
 8000ee6:	0a58      	lsrs	r0, r3, #9
 8000ee8:	b2d2      	uxtb	r2, r2
 8000eea:	0240      	lsls	r0, r0, #9
 8000eec:	05d2      	lsls	r2, r2, #23
 8000eee:	0a40      	lsrs	r0, r0, #9
 8000ef0:	4310      	orrs	r0, r2
 8000ef2:	bd70      	pop	{r4, r5, r6, pc}
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	e7f7      	b.n	8000eea <__aeabi_ui2f+0x66>
 8000efa:	0260      	lsls	r0, r4, #9
 8000efc:	0a40      	lsrs	r0, r0, #9
 8000efe:	e7f4      	b.n	8000eea <__aeabi_ui2f+0x66>
 8000f00:	fbffffff 	.word	0xfbffffff

08000f04 <__aeabi_ddiv>:
 8000f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f06:	4657      	mov	r7, sl
 8000f08:	46de      	mov	lr, fp
 8000f0a:	464e      	mov	r6, r9
 8000f0c:	4645      	mov	r5, r8
 8000f0e:	b5e0      	push	{r5, r6, r7, lr}
 8000f10:	4683      	mov	fp, r0
 8000f12:	0007      	movs	r7, r0
 8000f14:	030e      	lsls	r6, r1, #12
 8000f16:	0048      	lsls	r0, r1, #1
 8000f18:	b085      	sub	sp, #20
 8000f1a:	4692      	mov	sl, r2
 8000f1c:	001c      	movs	r4, r3
 8000f1e:	0b36      	lsrs	r6, r6, #12
 8000f20:	0d40      	lsrs	r0, r0, #21
 8000f22:	0fcd      	lsrs	r5, r1, #31
 8000f24:	2800      	cmp	r0, #0
 8000f26:	d100      	bne.n	8000f2a <__aeabi_ddiv+0x26>
 8000f28:	e09d      	b.n	8001066 <__aeabi_ddiv+0x162>
 8000f2a:	4b95      	ldr	r3, [pc, #596]	; (8001180 <__aeabi_ddiv+0x27c>)
 8000f2c:	4298      	cmp	r0, r3
 8000f2e:	d039      	beq.n	8000fa4 <__aeabi_ddiv+0xa0>
 8000f30:	2380      	movs	r3, #128	; 0x80
 8000f32:	00f6      	lsls	r6, r6, #3
 8000f34:	041b      	lsls	r3, r3, #16
 8000f36:	431e      	orrs	r6, r3
 8000f38:	4a92      	ldr	r2, [pc, #584]	; (8001184 <__aeabi_ddiv+0x280>)
 8000f3a:	0f7b      	lsrs	r3, r7, #29
 8000f3c:	4333      	orrs	r3, r6
 8000f3e:	4699      	mov	r9, r3
 8000f40:	4694      	mov	ip, r2
 8000f42:	0003      	movs	r3, r0
 8000f44:	4463      	add	r3, ip
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	2300      	movs	r3, #0
 8000f4a:	2600      	movs	r6, #0
 8000f4c:	00ff      	lsls	r7, r7, #3
 8000f4e:	9302      	str	r3, [sp, #8]
 8000f50:	0323      	lsls	r3, r4, #12
 8000f52:	0b1b      	lsrs	r3, r3, #12
 8000f54:	4698      	mov	r8, r3
 8000f56:	0063      	lsls	r3, r4, #1
 8000f58:	0fe4      	lsrs	r4, r4, #31
 8000f5a:	4652      	mov	r2, sl
 8000f5c:	0d5b      	lsrs	r3, r3, #21
 8000f5e:	9401      	str	r4, [sp, #4]
 8000f60:	d100      	bne.n	8000f64 <__aeabi_ddiv+0x60>
 8000f62:	e0b3      	b.n	80010cc <__aeabi_ddiv+0x1c8>
 8000f64:	4986      	ldr	r1, [pc, #536]	; (8001180 <__aeabi_ddiv+0x27c>)
 8000f66:	428b      	cmp	r3, r1
 8000f68:	d100      	bne.n	8000f6c <__aeabi_ddiv+0x68>
 8000f6a:	e09e      	b.n	80010aa <__aeabi_ddiv+0x1a6>
 8000f6c:	4642      	mov	r2, r8
 8000f6e:	00d1      	lsls	r1, r2, #3
 8000f70:	2280      	movs	r2, #128	; 0x80
 8000f72:	0412      	lsls	r2, r2, #16
 8000f74:	430a      	orrs	r2, r1
 8000f76:	4651      	mov	r1, sl
 8000f78:	0f49      	lsrs	r1, r1, #29
 8000f7a:	4311      	orrs	r1, r2
 8000f7c:	468b      	mov	fp, r1
 8000f7e:	4981      	ldr	r1, [pc, #516]	; (8001184 <__aeabi_ddiv+0x280>)
 8000f80:	4652      	mov	r2, sl
 8000f82:	468c      	mov	ip, r1
 8000f84:	9900      	ldr	r1, [sp, #0]
 8000f86:	4463      	add	r3, ip
 8000f88:	1acb      	subs	r3, r1, r3
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	00d2      	lsls	r2, r2, #3
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	002b      	movs	r3, r5
 8000f92:	4063      	eors	r3, r4
 8000f94:	469a      	mov	sl, r3
 8000f96:	2e0f      	cmp	r6, #15
 8000f98:	d900      	bls.n	8000f9c <__aeabi_ddiv+0x98>
 8000f9a:	e105      	b.n	80011a8 <__aeabi_ddiv+0x2a4>
 8000f9c:	4b7a      	ldr	r3, [pc, #488]	; (8001188 <__aeabi_ddiv+0x284>)
 8000f9e:	00b6      	lsls	r6, r6, #2
 8000fa0:	599b      	ldr	r3, [r3, r6]
 8000fa2:	469f      	mov	pc, r3
 8000fa4:	465b      	mov	r3, fp
 8000fa6:	4333      	orrs	r3, r6
 8000fa8:	4699      	mov	r9, r3
 8000faa:	d000      	beq.n	8000fae <__aeabi_ddiv+0xaa>
 8000fac:	e0b8      	b.n	8001120 <__aeabi_ddiv+0x21c>
 8000fae:	2302      	movs	r3, #2
 8000fb0:	2608      	movs	r6, #8
 8000fb2:	2700      	movs	r7, #0
 8000fb4:	9000      	str	r0, [sp, #0]
 8000fb6:	9302      	str	r3, [sp, #8]
 8000fb8:	e7ca      	b.n	8000f50 <__aeabi_ddiv+0x4c>
 8000fba:	46cb      	mov	fp, r9
 8000fbc:	003a      	movs	r2, r7
 8000fbe:	9902      	ldr	r1, [sp, #8]
 8000fc0:	9501      	str	r5, [sp, #4]
 8000fc2:	9b01      	ldr	r3, [sp, #4]
 8000fc4:	469a      	mov	sl, r3
 8000fc6:	2902      	cmp	r1, #2
 8000fc8:	d027      	beq.n	800101a <__aeabi_ddiv+0x116>
 8000fca:	2903      	cmp	r1, #3
 8000fcc:	d100      	bne.n	8000fd0 <__aeabi_ddiv+0xcc>
 8000fce:	e280      	b.n	80014d2 <__aeabi_ddiv+0x5ce>
 8000fd0:	2901      	cmp	r1, #1
 8000fd2:	d044      	beq.n	800105e <__aeabi_ddiv+0x15a>
 8000fd4:	496d      	ldr	r1, [pc, #436]	; (800118c <__aeabi_ddiv+0x288>)
 8000fd6:	9b00      	ldr	r3, [sp, #0]
 8000fd8:	468c      	mov	ip, r1
 8000fda:	4463      	add	r3, ip
 8000fdc:	001c      	movs	r4, r3
 8000fde:	2c00      	cmp	r4, #0
 8000fe0:	dd38      	ble.n	8001054 <__aeabi_ddiv+0x150>
 8000fe2:	0753      	lsls	r3, r2, #29
 8000fe4:	d000      	beq.n	8000fe8 <__aeabi_ddiv+0xe4>
 8000fe6:	e213      	b.n	8001410 <__aeabi_ddiv+0x50c>
 8000fe8:	08d2      	lsrs	r2, r2, #3
 8000fea:	465b      	mov	r3, fp
 8000fec:	01db      	lsls	r3, r3, #7
 8000fee:	d509      	bpl.n	8001004 <__aeabi_ddiv+0x100>
 8000ff0:	4659      	mov	r1, fp
 8000ff2:	4b67      	ldr	r3, [pc, #412]	; (8001190 <__aeabi_ddiv+0x28c>)
 8000ff4:	4019      	ands	r1, r3
 8000ff6:	468b      	mov	fp, r1
 8000ff8:	2180      	movs	r1, #128	; 0x80
 8000ffa:	00c9      	lsls	r1, r1, #3
 8000ffc:	468c      	mov	ip, r1
 8000ffe:	9b00      	ldr	r3, [sp, #0]
 8001000:	4463      	add	r3, ip
 8001002:	001c      	movs	r4, r3
 8001004:	4b63      	ldr	r3, [pc, #396]	; (8001194 <__aeabi_ddiv+0x290>)
 8001006:	429c      	cmp	r4, r3
 8001008:	dc07      	bgt.n	800101a <__aeabi_ddiv+0x116>
 800100a:	465b      	mov	r3, fp
 800100c:	0564      	lsls	r4, r4, #21
 800100e:	075f      	lsls	r7, r3, #29
 8001010:	025b      	lsls	r3, r3, #9
 8001012:	4317      	orrs	r7, r2
 8001014:	0b1b      	lsrs	r3, r3, #12
 8001016:	0d62      	lsrs	r2, r4, #21
 8001018:	e002      	b.n	8001020 <__aeabi_ddiv+0x11c>
 800101a:	2300      	movs	r3, #0
 800101c:	2700      	movs	r7, #0
 800101e:	4a58      	ldr	r2, [pc, #352]	; (8001180 <__aeabi_ddiv+0x27c>)
 8001020:	2100      	movs	r1, #0
 8001022:	031b      	lsls	r3, r3, #12
 8001024:	0b1c      	lsrs	r4, r3, #12
 8001026:	0d0b      	lsrs	r3, r1, #20
 8001028:	051b      	lsls	r3, r3, #20
 800102a:	4323      	orrs	r3, r4
 800102c:	0514      	lsls	r4, r2, #20
 800102e:	4a5a      	ldr	r2, [pc, #360]	; (8001198 <__aeabi_ddiv+0x294>)
 8001030:	0038      	movs	r0, r7
 8001032:	4013      	ands	r3, r2
 8001034:	431c      	orrs	r4, r3
 8001036:	4653      	mov	r3, sl
 8001038:	0064      	lsls	r4, r4, #1
 800103a:	07db      	lsls	r3, r3, #31
 800103c:	0864      	lsrs	r4, r4, #1
 800103e:	431c      	orrs	r4, r3
 8001040:	0021      	movs	r1, r4
 8001042:	b005      	add	sp, #20
 8001044:	bc3c      	pop	{r2, r3, r4, r5}
 8001046:	4690      	mov	r8, r2
 8001048:	4699      	mov	r9, r3
 800104a:	46a2      	mov	sl, r4
 800104c:	46ab      	mov	fp, r5
 800104e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001050:	2201      	movs	r2, #1
 8001052:	4252      	negs	r2, r2
 8001054:	2301      	movs	r3, #1
 8001056:	1b1b      	subs	r3, r3, r4
 8001058:	2b38      	cmp	r3, #56	; 0x38
 800105a:	dc00      	bgt.n	800105e <__aeabi_ddiv+0x15a>
 800105c:	e1ad      	b.n	80013ba <__aeabi_ddiv+0x4b6>
 800105e:	2200      	movs	r2, #0
 8001060:	2300      	movs	r3, #0
 8001062:	2700      	movs	r7, #0
 8001064:	e7dc      	b.n	8001020 <__aeabi_ddiv+0x11c>
 8001066:	465b      	mov	r3, fp
 8001068:	4333      	orrs	r3, r6
 800106a:	4699      	mov	r9, r3
 800106c:	d05e      	beq.n	800112c <__aeabi_ddiv+0x228>
 800106e:	2e00      	cmp	r6, #0
 8001070:	d100      	bne.n	8001074 <__aeabi_ddiv+0x170>
 8001072:	e18a      	b.n	800138a <__aeabi_ddiv+0x486>
 8001074:	0030      	movs	r0, r6
 8001076:	f000 fda9 	bl	8001bcc <__clzsi2>
 800107a:	0003      	movs	r3, r0
 800107c:	3b0b      	subs	r3, #11
 800107e:	2b1c      	cmp	r3, #28
 8001080:	dd00      	ble.n	8001084 <__aeabi_ddiv+0x180>
 8001082:	e17b      	b.n	800137c <__aeabi_ddiv+0x478>
 8001084:	221d      	movs	r2, #29
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	465a      	mov	r2, fp
 800108a:	0001      	movs	r1, r0
 800108c:	40da      	lsrs	r2, r3
 800108e:	3908      	subs	r1, #8
 8001090:	408e      	lsls	r6, r1
 8001092:	0013      	movs	r3, r2
 8001094:	465f      	mov	r7, fp
 8001096:	4333      	orrs	r3, r6
 8001098:	4699      	mov	r9, r3
 800109a:	408f      	lsls	r7, r1
 800109c:	4b3f      	ldr	r3, [pc, #252]	; (800119c <__aeabi_ddiv+0x298>)
 800109e:	2600      	movs	r6, #0
 80010a0:	1a1b      	subs	r3, r3, r0
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	2300      	movs	r3, #0
 80010a6:	9302      	str	r3, [sp, #8]
 80010a8:	e752      	b.n	8000f50 <__aeabi_ddiv+0x4c>
 80010aa:	4641      	mov	r1, r8
 80010ac:	4653      	mov	r3, sl
 80010ae:	430b      	orrs	r3, r1
 80010b0:	493b      	ldr	r1, [pc, #236]	; (80011a0 <__aeabi_ddiv+0x29c>)
 80010b2:	469b      	mov	fp, r3
 80010b4:	468c      	mov	ip, r1
 80010b6:	9b00      	ldr	r3, [sp, #0]
 80010b8:	4463      	add	r3, ip
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	465b      	mov	r3, fp
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d13b      	bne.n	800113a <__aeabi_ddiv+0x236>
 80010c2:	2302      	movs	r3, #2
 80010c4:	2200      	movs	r2, #0
 80010c6:	431e      	orrs	r6, r3
 80010c8:	2102      	movs	r1, #2
 80010ca:	e761      	b.n	8000f90 <__aeabi_ddiv+0x8c>
 80010cc:	4643      	mov	r3, r8
 80010ce:	4313      	orrs	r3, r2
 80010d0:	469b      	mov	fp, r3
 80010d2:	d037      	beq.n	8001144 <__aeabi_ddiv+0x240>
 80010d4:	4643      	mov	r3, r8
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d100      	bne.n	80010dc <__aeabi_ddiv+0x1d8>
 80010da:	e162      	b.n	80013a2 <__aeabi_ddiv+0x49e>
 80010dc:	4640      	mov	r0, r8
 80010de:	f000 fd75 	bl	8001bcc <__clzsi2>
 80010e2:	0003      	movs	r3, r0
 80010e4:	3b0b      	subs	r3, #11
 80010e6:	2b1c      	cmp	r3, #28
 80010e8:	dd00      	ble.n	80010ec <__aeabi_ddiv+0x1e8>
 80010ea:	e153      	b.n	8001394 <__aeabi_ddiv+0x490>
 80010ec:	0002      	movs	r2, r0
 80010ee:	4641      	mov	r1, r8
 80010f0:	3a08      	subs	r2, #8
 80010f2:	4091      	lsls	r1, r2
 80010f4:	4688      	mov	r8, r1
 80010f6:	211d      	movs	r1, #29
 80010f8:	1acb      	subs	r3, r1, r3
 80010fa:	4651      	mov	r1, sl
 80010fc:	40d9      	lsrs	r1, r3
 80010fe:	000b      	movs	r3, r1
 8001100:	4641      	mov	r1, r8
 8001102:	430b      	orrs	r3, r1
 8001104:	469b      	mov	fp, r3
 8001106:	4653      	mov	r3, sl
 8001108:	4093      	lsls	r3, r2
 800110a:	001a      	movs	r2, r3
 800110c:	9b00      	ldr	r3, [sp, #0]
 800110e:	4925      	ldr	r1, [pc, #148]	; (80011a4 <__aeabi_ddiv+0x2a0>)
 8001110:	469c      	mov	ip, r3
 8001112:	4460      	add	r0, ip
 8001114:	0003      	movs	r3, r0
 8001116:	468c      	mov	ip, r1
 8001118:	4463      	add	r3, ip
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	2100      	movs	r1, #0
 800111e:	e737      	b.n	8000f90 <__aeabi_ddiv+0x8c>
 8001120:	2303      	movs	r3, #3
 8001122:	46b1      	mov	r9, r6
 8001124:	9000      	str	r0, [sp, #0]
 8001126:	260c      	movs	r6, #12
 8001128:	9302      	str	r3, [sp, #8]
 800112a:	e711      	b.n	8000f50 <__aeabi_ddiv+0x4c>
 800112c:	2300      	movs	r3, #0
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	3301      	adds	r3, #1
 8001132:	2604      	movs	r6, #4
 8001134:	2700      	movs	r7, #0
 8001136:	9302      	str	r3, [sp, #8]
 8001138:	e70a      	b.n	8000f50 <__aeabi_ddiv+0x4c>
 800113a:	2303      	movs	r3, #3
 800113c:	46c3      	mov	fp, r8
 800113e:	431e      	orrs	r6, r3
 8001140:	2103      	movs	r1, #3
 8001142:	e725      	b.n	8000f90 <__aeabi_ddiv+0x8c>
 8001144:	3301      	adds	r3, #1
 8001146:	431e      	orrs	r6, r3
 8001148:	2200      	movs	r2, #0
 800114a:	2101      	movs	r1, #1
 800114c:	e720      	b.n	8000f90 <__aeabi_ddiv+0x8c>
 800114e:	2300      	movs	r3, #0
 8001150:	469a      	mov	sl, r3
 8001152:	2380      	movs	r3, #128	; 0x80
 8001154:	2700      	movs	r7, #0
 8001156:	031b      	lsls	r3, r3, #12
 8001158:	4a09      	ldr	r2, [pc, #36]	; (8001180 <__aeabi_ddiv+0x27c>)
 800115a:	e761      	b.n	8001020 <__aeabi_ddiv+0x11c>
 800115c:	2380      	movs	r3, #128	; 0x80
 800115e:	4649      	mov	r1, r9
 8001160:	031b      	lsls	r3, r3, #12
 8001162:	4219      	tst	r1, r3
 8001164:	d100      	bne.n	8001168 <__aeabi_ddiv+0x264>
 8001166:	e0e2      	b.n	800132e <__aeabi_ddiv+0x42a>
 8001168:	4659      	mov	r1, fp
 800116a:	4219      	tst	r1, r3
 800116c:	d000      	beq.n	8001170 <__aeabi_ddiv+0x26c>
 800116e:	e0de      	b.n	800132e <__aeabi_ddiv+0x42a>
 8001170:	430b      	orrs	r3, r1
 8001172:	031b      	lsls	r3, r3, #12
 8001174:	0017      	movs	r7, r2
 8001176:	0b1b      	lsrs	r3, r3, #12
 8001178:	46a2      	mov	sl, r4
 800117a:	4a01      	ldr	r2, [pc, #4]	; (8001180 <__aeabi_ddiv+0x27c>)
 800117c:	e750      	b.n	8001020 <__aeabi_ddiv+0x11c>
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	000007ff 	.word	0x000007ff
 8001184:	fffffc01 	.word	0xfffffc01
 8001188:	0800bf10 	.word	0x0800bf10
 800118c:	000003ff 	.word	0x000003ff
 8001190:	feffffff 	.word	0xfeffffff
 8001194:	000007fe 	.word	0x000007fe
 8001198:	800fffff 	.word	0x800fffff
 800119c:	fffffc0d 	.word	0xfffffc0d
 80011a0:	fffff801 	.word	0xfffff801
 80011a4:	000003f3 	.word	0x000003f3
 80011a8:	45d9      	cmp	r9, fp
 80011aa:	d900      	bls.n	80011ae <__aeabi_ddiv+0x2aa>
 80011ac:	e0cb      	b.n	8001346 <__aeabi_ddiv+0x442>
 80011ae:	d100      	bne.n	80011b2 <__aeabi_ddiv+0x2ae>
 80011b0:	e0c6      	b.n	8001340 <__aeabi_ddiv+0x43c>
 80011b2:	003c      	movs	r4, r7
 80011b4:	4648      	mov	r0, r9
 80011b6:	2700      	movs	r7, #0
 80011b8:	9b00      	ldr	r3, [sp, #0]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	465b      	mov	r3, fp
 80011c0:	0e16      	lsrs	r6, r2, #24
 80011c2:	021b      	lsls	r3, r3, #8
 80011c4:	431e      	orrs	r6, r3
 80011c6:	0213      	lsls	r3, r2, #8
 80011c8:	4698      	mov	r8, r3
 80011ca:	0433      	lsls	r3, r6, #16
 80011cc:	0c1b      	lsrs	r3, r3, #16
 80011ce:	4699      	mov	r9, r3
 80011d0:	0c31      	lsrs	r1, r6, #16
 80011d2:	9101      	str	r1, [sp, #4]
 80011d4:	f7ff f826 	bl	8000224 <__aeabi_uidivmod>
 80011d8:	464a      	mov	r2, r9
 80011da:	4342      	muls	r2, r0
 80011dc:	040b      	lsls	r3, r1, #16
 80011de:	0c21      	lsrs	r1, r4, #16
 80011e0:	0005      	movs	r5, r0
 80011e2:	4319      	orrs	r1, r3
 80011e4:	428a      	cmp	r2, r1
 80011e6:	d907      	bls.n	80011f8 <__aeabi_ddiv+0x2f4>
 80011e8:	1989      	adds	r1, r1, r6
 80011ea:	3d01      	subs	r5, #1
 80011ec:	428e      	cmp	r6, r1
 80011ee:	d803      	bhi.n	80011f8 <__aeabi_ddiv+0x2f4>
 80011f0:	428a      	cmp	r2, r1
 80011f2:	d901      	bls.n	80011f8 <__aeabi_ddiv+0x2f4>
 80011f4:	1e85      	subs	r5, r0, #2
 80011f6:	1989      	adds	r1, r1, r6
 80011f8:	1a88      	subs	r0, r1, r2
 80011fa:	9901      	ldr	r1, [sp, #4]
 80011fc:	f7ff f812 	bl	8000224 <__aeabi_uidivmod>
 8001200:	0409      	lsls	r1, r1, #16
 8001202:	468c      	mov	ip, r1
 8001204:	464a      	mov	r2, r9
 8001206:	0421      	lsls	r1, r4, #16
 8001208:	4664      	mov	r4, ip
 800120a:	4342      	muls	r2, r0
 800120c:	0c09      	lsrs	r1, r1, #16
 800120e:	0003      	movs	r3, r0
 8001210:	4321      	orrs	r1, r4
 8001212:	428a      	cmp	r2, r1
 8001214:	d904      	bls.n	8001220 <__aeabi_ddiv+0x31c>
 8001216:	1989      	adds	r1, r1, r6
 8001218:	3b01      	subs	r3, #1
 800121a:	428e      	cmp	r6, r1
 800121c:	d800      	bhi.n	8001220 <__aeabi_ddiv+0x31c>
 800121e:	e0f1      	b.n	8001404 <__aeabi_ddiv+0x500>
 8001220:	042d      	lsls	r5, r5, #16
 8001222:	431d      	orrs	r5, r3
 8001224:	46ab      	mov	fp, r5
 8001226:	4643      	mov	r3, r8
 8001228:	1a89      	subs	r1, r1, r2
 800122a:	4642      	mov	r2, r8
 800122c:	0c28      	lsrs	r0, r5, #16
 800122e:	0412      	lsls	r2, r2, #16
 8001230:	0c1d      	lsrs	r5, r3, #16
 8001232:	465b      	mov	r3, fp
 8001234:	0c14      	lsrs	r4, r2, #16
 8001236:	0022      	movs	r2, r4
 8001238:	041b      	lsls	r3, r3, #16
 800123a:	0c1b      	lsrs	r3, r3, #16
 800123c:	435a      	muls	r2, r3
 800123e:	9403      	str	r4, [sp, #12]
 8001240:	436b      	muls	r3, r5
 8001242:	4344      	muls	r4, r0
 8001244:	9502      	str	r5, [sp, #8]
 8001246:	4368      	muls	r0, r5
 8001248:	191b      	adds	r3, r3, r4
 800124a:	0c15      	lsrs	r5, r2, #16
 800124c:	18eb      	adds	r3, r5, r3
 800124e:	429c      	cmp	r4, r3
 8001250:	d903      	bls.n	800125a <__aeabi_ddiv+0x356>
 8001252:	2480      	movs	r4, #128	; 0x80
 8001254:	0264      	lsls	r4, r4, #9
 8001256:	46a4      	mov	ip, r4
 8001258:	4460      	add	r0, ip
 800125a:	0c1c      	lsrs	r4, r3, #16
 800125c:	0415      	lsls	r5, r2, #16
 800125e:	041b      	lsls	r3, r3, #16
 8001260:	0c2d      	lsrs	r5, r5, #16
 8001262:	1820      	adds	r0, r4, r0
 8001264:	195d      	adds	r5, r3, r5
 8001266:	4281      	cmp	r1, r0
 8001268:	d377      	bcc.n	800135a <__aeabi_ddiv+0x456>
 800126a:	d073      	beq.n	8001354 <__aeabi_ddiv+0x450>
 800126c:	1a0c      	subs	r4, r1, r0
 800126e:	4aa2      	ldr	r2, [pc, #648]	; (80014f8 <__aeabi_ddiv+0x5f4>)
 8001270:	1b7d      	subs	r5, r7, r5
 8001272:	42af      	cmp	r7, r5
 8001274:	41bf      	sbcs	r7, r7
 8001276:	4694      	mov	ip, r2
 8001278:	9b00      	ldr	r3, [sp, #0]
 800127a:	427f      	negs	r7, r7
 800127c:	4463      	add	r3, ip
 800127e:	1be0      	subs	r0, r4, r7
 8001280:	001c      	movs	r4, r3
 8001282:	4286      	cmp	r6, r0
 8001284:	d100      	bne.n	8001288 <__aeabi_ddiv+0x384>
 8001286:	e0db      	b.n	8001440 <__aeabi_ddiv+0x53c>
 8001288:	9901      	ldr	r1, [sp, #4]
 800128a:	f7fe ffcb 	bl	8000224 <__aeabi_uidivmod>
 800128e:	464a      	mov	r2, r9
 8001290:	4342      	muls	r2, r0
 8001292:	040b      	lsls	r3, r1, #16
 8001294:	0c29      	lsrs	r1, r5, #16
 8001296:	0007      	movs	r7, r0
 8001298:	4319      	orrs	r1, r3
 800129a:	428a      	cmp	r2, r1
 800129c:	d907      	bls.n	80012ae <__aeabi_ddiv+0x3aa>
 800129e:	1989      	adds	r1, r1, r6
 80012a0:	3f01      	subs	r7, #1
 80012a2:	428e      	cmp	r6, r1
 80012a4:	d803      	bhi.n	80012ae <__aeabi_ddiv+0x3aa>
 80012a6:	428a      	cmp	r2, r1
 80012a8:	d901      	bls.n	80012ae <__aeabi_ddiv+0x3aa>
 80012aa:	1e87      	subs	r7, r0, #2
 80012ac:	1989      	adds	r1, r1, r6
 80012ae:	1a88      	subs	r0, r1, r2
 80012b0:	9901      	ldr	r1, [sp, #4]
 80012b2:	f7fe ffb7 	bl	8000224 <__aeabi_uidivmod>
 80012b6:	0409      	lsls	r1, r1, #16
 80012b8:	464a      	mov	r2, r9
 80012ba:	4689      	mov	r9, r1
 80012bc:	0429      	lsls	r1, r5, #16
 80012be:	464d      	mov	r5, r9
 80012c0:	4342      	muls	r2, r0
 80012c2:	0c09      	lsrs	r1, r1, #16
 80012c4:	0003      	movs	r3, r0
 80012c6:	4329      	orrs	r1, r5
 80012c8:	428a      	cmp	r2, r1
 80012ca:	d907      	bls.n	80012dc <__aeabi_ddiv+0x3d8>
 80012cc:	1989      	adds	r1, r1, r6
 80012ce:	3b01      	subs	r3, #1
 80012d0:	428e      	cmp	r6, r1
 80012d2:	d803      	bhi.n	80012dc <__aeabi_ddiv+0x3d8>
 80012d4:	428a      	cmp	r2, r1
 80012d6:	d901      	bls.n	80012dc <__aeabi_ddiv+0x3d8>
 80012d8:	1e83      	subs	r3, r0, #2
 80012da:	1989      	adds	r1, r1, r6
 80012dc:	043f      	lsls	r7, r7, #16
 80012de:	1a89      	subs	r1, r1, r2
 80012e0:	003a      	movs	r2, r7
 80012e2:	9f03      	ldr	r7, [sp, #12]
 80012e4:	431a      	orrs	r2, r3
 80012e6:	0038      	movs	r0, r7
 80012e8:	0413      	lsls	r3, r2, #16
 80012ea:	0c1b      	lsrs	r3, r3, #16
 80012ec:	4358      	muls	r0, r3
 80012ee:	4681      	mov	r9, r0
 80012f0:	9802      	ldr	r0, [sp, #8]
 80012f2:	0c15      	lsrs	r5, r2, #16
 80012f4:	436f      	muls	r7, r5
 80012f6:	4343      	muls	r3, r0
 80012f8:	4345      	muls	r5, r0
 80012fa:	4648      	mov	r0, r9
 80012fc:	0c00      	lsrs	r0, r0, #16
 80012fe:	4684      	mov	ip, r0
 8001300:	19db      	adds	r3, r3, r7
 8001302:	4463      	add	r3, ip
 8001304:	429f      	cmp	r7, r3
 8001306:	d903      	bls.n	8001310 <__aeabi_ddiv+0x40c>
 8001308:	2080      	movs	r0, #128	; 0x80
 800130a:	0240      	lsls	r0, r0, #9
 800130c:	4684      	mov	ip, r0
 800130e:	4465      	add	r5, ip
 8001310:	4648      	mov	r0, r9
 8001312:	0c1f      	lsrs	r7, r3, #16
 8001314:	0400      	lsls	r0, r0, #16
 8001316:	041b      	lsls	r3, r3, #16
 8001318:	0c00      	lsrs	r0, r0, #16
 800131a:	197d      	adds	r5, r7, r5
 800131c:	1818      	adds	r0, r3, r0
 800131e:	42a9      	cmp	r1, r5
 8001320:	d200      	bcs.n	8001324 <__aeabi_ddiv+0x420>
 8001322:	e084      	b.n	800142e <__aeabi_ddiv+0x52a>
 8001324:	d100      	bne.n	8001328 <__aeabi_ddiv+0x424>
 8001326:	e07f      	b.n	8001428 <__aeabi_ddiv+0x524>
 8001328:	2301      	movs	r3, #1
 800132a:	431a      	orrs	r2, r3
 800132c:	e657      	b.n	8000fde <__aeabi_ddiv+0xda>
 800132e:	2380      	movs	r3, #128	; 0x80
 8001330:	464a      	mov	r2, r9
 8001332:	031b      	lsls	r3, r3, #12
 8001334:	4313      	orrs	r3, r2
 8001336:	031b      	lsls	r3, r3, #12
 8001338:	0b1b      	lsrs	r3, r3, #12
 800133a:	46aa      	mov	sl, r5
 800133c:	4a6f      	ldr	r2, [pc, #444]	; (80014fc <__aeabi_ddiv+0x5f8>)
 800133e:	e66f      	b.n	8001020 <__aeabi_ddiv+0x11c>
 8001340:	42ba      	cmp	r2, r7
 8001342:	d900      	bls.n	8001346 <__aeabi_ddiv+0x442>
 8001344:	e735      	b.n	80011b2 <__aeabi_ddiv+0x2ae>
 8001346:	464b      	mov	r3, r9
 8001348:	07dc      	lsls	r4, r3, #31
 800134a:	0858      	lsrs	r0, r3, #1
 800134c:	087b      	lsrs	r3, r7, #1
 800134e:	431c      	orrs	r4, r3
 8001350:	07ff      	lsls	r7, r7, #31
 8001352:	e734      	b.n	80011be <__aeabi_ddiv+0x2ba>
 8001354:	2400      	movs	r4, #0
 8001356:	42af      	cmp	r7, r5
 8001358:	d289      	bcs.n	800126e <__aeabi_ddiv+0x36a>
 800135a:	4447      	add	r7, r8
 800135c:	4547      	cmp	r7, r8
 800135e:	41a4      	sbcs	r4, r4
 8001360:	465b      	mov	r3, fp
 8001362:	4264      	negs	r4, r4
 8001364:	19a4      	adds	r4, r4, r6
 8001366:	1864      	adds	r4, r4, r1
 8001368:	3b01      	subs	r3, #1
 800136a:	42a6      	cmp	r6, r4
 800136c:	d21e      	bcs.n	80013ac <__aeabi_ddiv+0x4a8>
 800136e:	42a0      	cmp	r0, r4
 8001370:	d86d      	bhi.n	800144e <__aeabi_ddiv+0x54a>
 8001372:	d100      	bne.n	8001376 <__aeabi_ddiv+0x472>
 8001374:	e0b6      	b.n	80014e4 <__aeabi_ddiv+0x5e0>
 8001376:	1a24      	subs	r4, r4, r0
 8001378:	469b      	mov	fp, r3
 800137a:	e778      	b.n	800126e <__aeabi_ddiv+0x36a>
 800137c:	0003      	movs	r3, r0
 800137e:	465a      	mov	r2, fp
 8001380:	3b28      	subs	r3, #40	; 0x28
 8001382:	409a      	lsls	r2, r3
 8001384:	2700      	movs	r7, #0
 8001386:	4691      	mov	r9, r2
 8001388:	e688      	b.n	800109c <__aeabi_ddiv+0x198>
 800138a:	4658      	mov	r0, fp
 800138c:	f000 fc1e 	bl	8001bcc <__clzsi2>
 8001390:	3020      	adds	r0, #32
 8001392:	e672      	b.n	800107a <__aeabi_ddiv+0x176>
 8001394:	0003      	movs	r3, r0
 8001396:	4652      	mov	r2, sl
 8001398:	3b28      	subs	r3, #40	; 0x28
 800139a:	409a      	lsls	r2, r3
 800139c:	4693      	mov	fp, r2
 800139e:	2200      	movs	r2, #0
 80013a0:	e6b4      	b.n	800110c <__aeabi_ddiv+0x208>
 80013a2:	4650      	mov	r0, sl
 80013a4:	f000 fc12 	bl	8001bcc <__clzsi2>
 80013a8:	3020      	adds	r0, #32
 80013aa:	e69a      	b.n	80010e2 <__aeabi_ddiv+0x1de>
 80013ac:	42a6      	cmp	r6, r4
 80013ae:	d1e2      	bne.n	8001376 <__aeabi_ddiv+0x472>
 80013b0:	45b8      	cmp	r8, r7
 80013b2:	d9dc      	bls.n	800136e <__aeabi_ddiv+0x46a>
 80013b4:	1a34      	subs	r4, r6, r0
 80013b6:	469b      	mov	fp, r3
 80013b8:	e759      	b.n	800126e <__aeabi_ddiv+0x36a>
 80013ba:	2b1f      	cmp	r3, #31
 80013bc:	dc65      	bgt.n	800148a <__aeabi_ddiv+0x586>
 80013be:	4c50      	ldr	r4, [pc, #320]	; (8001500 <__aeabi_ddiv+0x5fc>)
 80013c0:	9900      	ldr	r1, [sp, #0]
 80013c2:	46a4      	mov	ip, r4
 80013c4:	465c      	mov	r4, fp
 80013c6:	4461      	add	r1, ip
 80013c8:	0008      	movs	r0, r1
 80013ca:	408c      	lsls	r4, r1
 80013cc:	0011      	movs	r1, r2
 80013ce:	4082      	lsls	r2, r0
 80013d0:	40d9      	lsrs	r1, r3
 80013d2:	1e50      	subs	r0, r2, #1
 80013d4:	4182      	sbcs	r2, r0
 80013d6:	430c      	orrs	r4, r1
 80013d8:	4314      	orrs	r4, r2
 80013da:	465a      	mov	r2, fp
 80013dc:	40da      	lsrs	r2, r3
 80013de:	0013      	movs	r3, r2
 80013e0:	0762      	lsls	r2, r4, #29
 80013e2:	d009      	beq.n	80013f8 <__aeabi_ddiv+0x4f4>
 80013e4:	220f      	movs	r2, #15
 80013e6:	4022      	ands	r2, r4
 80013e8:	2a04      	cmp	r2, #4
 80013ea:	d005      	beq.n	80013f8 <__aeabi_ddiv+0x4f4>
 80013ec:	0022      	movs	r2, r4
 80013ee:	1d14      	adds	r4, r2, #4
 80013f0:	4294      	cmp	r4, r2
 80013f2:	4189      	sbcs	r1, r1
 80013f4:	4249      	negs	r1, r1
 80013f6:	185b      	adds	r3, r3, r1
 80013f8:	021a      	lsls	r2, r3, #8
 80013fa:	d562      	bpl.n	80014c2 <__aeabi_ddiv+0x5be>
 80013fc:	2201      	movs	r2, #1
 80013fe:	2300      	movs	r3, #0
 8001400:	2700      	movs	r7, #0
 8001402:	e60d      	b.n	8001020 <__aeabi_ddiv+0x11c>
 8001404:	428a      	cmp	r2, r1
 8001406:	d800      	bhi.n	800140a <__aeabi_ddiv+0x506>
 8001408:	e70a      	b.n	8001220 <__aeabi_ddiv+0x31c>
 800140a:	1e83      	subs	r3, r0, #2
 800140c:	1989      	adds	r1, r1, r6
 800140e:	e707      	b.n	8001220 <__aeabi_ddiv+0x31c>
 8001410:	230f      	movs	r3, #15
 8001412:	4013      	ands	r3, r2
 8001414:	2b04      	cmp	r3, #4
 8001416:	d100      	bne.n	800141a <__aeabi_ddiv+0x516>
 8001418:	e5e6      	b.n	8000fe8 <__aeabi_ddiv+0xe4>
 800141a:	1d17      	adds	r7, r2, #4
 800141c:	4297      	cmp	r7, r2
 800141e:	4192      	sbcs	r2, r2
 8001420:	4253      	negs	r3, r2
 8001422:	449b      	add	fp, r3
 8001424:	08fa      	lsrs	r2, r7, #3
 8001426:	e5e0      	b.n	8000fea <__aeabi_ddiv+0xe6>
 8001428:	2800      	cmp	r0, #0
 800142a:	d100      	bne.n	800142e <__aeabi_ddiv+0x52a>
 800142c:	e5d7      	b.n	8000fde <__aeabi_ddiv+0xda>
 800142e:	1871      	adds	r1, r6, r1
 8001430:	1e53      	subs	r3, r2, #1
 8001432:	42b1      	cmp	r1, r6
 8001434:	d327      	bcc.n	8001486 <__aeabi_ddiv+0x582>
 8001436:	42a9      	cmp	r1, r5
 8001438:	d315      	bcc.n	8001466 <__aeabi_ddiv+0x562>
 800143a:	d058      	beq.n	80014ee <__aeabi_ddiv+0x5ea>
 800143c:	001a      	movs	r2, r3
 800143e:	e773      	b.n	8001328 <__aeabi_ddiv+0x424>
 8001440:	2b00      	cmp	r3, #0
 8001442:	dc00      	bgt.n	8001446 <__aeabi_ddiv+0x542>
 8001444:	e604      	b.n	8001050 <__aeabi_ddiv+0x14c>
 8001446:	2301      	movs	r3, #1
 8001448:	2200      	movs	r2, #0
 800144a:	449b      	add	fp, r3
 800144c:	e5cd      	b.n	8000fea <__aeabi_ddiv+0xe6>
 800144e:	2302      	movs	r3, #2
 8001450:	4447      	add	r7, r8
 8001452:	4547      	cmp	r7, r8
 8001454:	4189      	sbcs	r1, r1
 8001456:	425b      	negs	r3, r3
 8001458:	469c      	mov	ip, r3
 800145a:	4249      	negs	r1, r1
 800145c:	1989      	adds	r1, r1, r6
 800145e:	190c      	adds	r4, r1, r4
 8001460:	44e3      	add	fp, ip
 8001462:	1a24      	subs	r4, r4, r0
 8001464:	e703      	b.n	800126e <__aeabi_ddiv+0x36a>
 8001466:	4643      	mov	r3, r8
 8001468:	005f      	lsls	r7, r3, #1
 800146a:	4547      	cmp	r7, r8
 800146c:	419b      	sbcs	r3, r3
 800146e:	46b8      	mov	r8, r7
 8001470:	425b      	negs	r3, r3
 8001472:	199e      	adds	r6, r3, r6
 8001474:	3a02      	subs	r2, #2
 8001476:	1989      	adds	r1, r1, r6
 8001478:	42a9      	cmp	r1, r5
 800147a:	d000      	beq.n	800147e <__aeabi_ddiv+0x57a>
 800147c:	e754      	b.n	8001328 <__aeabi_ddiv+0x424>
 800147e:	4540      	cmp	r0, r8
 8001480:	d000      	beq.n	8001484 <__aeabi_ddiv+0x580>
 8001482:	e751      	b.n	8001328 <__aeabi_ddiv+0x424>
 8001484:	e5ab      	b.n	8000fde <__aeabi_ddiv+0xda>
 8001486:	001a      	movs	r2, r3
 8001488:	e7f6      	b.n	8001478 <__aeabi_ddiv+0x574>
 800148a:	211f      	movs	r1, #31
 800148c:	465f      	mov	r7, fp
 800148e:	4249      	negs	r1, r1
 8001490:	1b0c      	subs	r4, r1, r4
 8001492:	40e7      	lsrs	r7, r4
 8001494:	2b20      	cmp	r3, #32
 8001496:	d007      	beq.n	80014a8 <__aeabi_ddiv+0x5a4>
 8001498:	491a      	ldr	r1, [pc, #104]	; (8001504 <__aeabi_ddiv+0x600>)
 800149a:	9b00      	ldr	r3, [sp, #0]
 800149c:	468c      	mov	ip, r1
 800149e:	4463      	add	r3, ip
 80014a0:	0018      	movs	r0, r3
 80014a2:	465b      	mov	r3, fp
 80014a4:	4083      	lsls	r3, r0
 80014a6:	431a      	orrs	r2, r3
 80014a8:	1e50      	subs	r0, r2, #1
 80014aa:	4182      	sbcs	r2, r0
 80014ac:	433a      	orrs	r2, r7
 80014ae:	2707      	movs	r7, #7
 80014b0:	2300      	movs	r3, #0
 80014b2:	4017      	ands	r7, r2
 80014b4:	d009      	beq.n	80014ca <__aeabi_ddiv+0x5c6>
 80014b6:	210f      	movs	r1, #15
 80014b8:	2300      	movs	r3, #0
 80014ba:	4011      	ands	r1, r2
 80014bc:	0014      	movs	r4, r2
 80014be:	2904      	cmp	r1, #4
 80014c0:	d195      	bne.n	80013ee <__aeabi_ddiv+0x4ea>
 80014c2:	0022      	movs	r2, r4
 80014c4:	075f      	lsls	r7, r3, #29
 80014c6:	025b      	lsls	r3, r3, #9
 80014c8:	0b1b      	lsrs	r3, r3, #12
 80014ca:	08d2      	lsrs	r2, r2, #3
 80014cc:	4317      	orrs	r7, r2
 80014ce:	2200      	movs	r2, #0
 80014d0:	e5a6      	b.n	8001020 <__aeabi_ddiv+0x11c>
 80014d2:	2380      	movs	r3, #128	; 0x80
 80014d4:	4659      	mov	r1, fp
 80014d6:	031b      	lsls	r3, r3, #12
 80014d8:	430b      	orrs	r3, r1
 80014da:	031b      	lsls	r3, r3, #12
 80014dc:	0017      	movs	r7, r2
 80014de:	0b1b      	lsrs	r3, r3, #12
 80014e0:	4a06      	ldr	r2, [pc, #24]	; (80014fc <__aeabi_ddiv+0x5f8>)
 80014e2:	e59d      	b.n	8001020 <__aeabi_ddiv+0x11c>
 80014e4:	42bd      	cmp	r5, r7
 80014e6:	d8b2      	bhi.n	800144e <__aeabi_ddiv+0x54a>
 80014e8:	469b      	mov	fp, r3
 80014ea:	2400      	movs	r4, #0
 80014ec:	e6bf      	b.n	800126e <__aeabi_ddiv+0x36a>
 80014ee:	4580      	cmp	r8, r0
 80014f0:	d3b9      	bcc.n	8001466 <__aeabi_ddiv+0x562>
 80014f2:	001a      	movs	r2, r3
 80014f4:	e7c3      	b.n	800147e <__aeabi_ddiv+0x57a>
 80014f6:	46c0      	nop			; (mov r8, r8)
 80014f8:	000003ff 	.word	0x000003ff
 80014fc:	000007ff 	.word	0x000007ff
 8001500:	0000041e 	.word	0x0000041e
 8001504:	0000043e 	.word	0x0000043e

08001508 <__aeabi_dmul>:
 8001508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800150a:	4657      	mov	r7, sl
 800150c:	46de      	mov	lr, fp
 800150e:	464e      	mov	r6, r9
 8001510:	4645      	mov	r5, r8
 8001512:	b5e0      	push	{r5, r6, r7, lr}
 8001514:	4683      	mov	fp, r0
 8001516:	0006      	movs	r6, r0
 8001518:	030f      	lsls	r7, r1, #12
 800151a:	0048      	lsls	r0, r1, #1
 800151c:	b087      	sub	sp, #28
 800151e:	4692      	mov	sl, r2
 8001520:	001d      	movs	r5, r3
 8001522:	0b3f      	lsrs	r7, r7, #12
 8001524:	0d40      	lsrs	r0, r0, #21
 8001526:	0fcc      	lsrs	r4, r1, #31
 8001528:	2800      	cmp	r0, #0
 800152a:	d100      	bne.n	800152e <__aeabi_dmul+0x26>
 800152c:	e06f      	b.n	800160e <__aeabi_dmul+0x106>
 800152e:	4bde      	ldr	r3, [pc, #888]	; (80018a8 <__aeabi_dmul+0x3a0>)
 8001530:	4298      	cmp	r0, r3
 8001532:	d038      	beq.n	80015a6 <__aeabi_dmul+0x9e>
 8001534:	2380      	movs	r3, #128	; 0x80
 8001536:	00ff      	lsls	r7, r7, #3
 8001538:	041b      	lsls	r3, r3, #16
 800153a:	431f      	orrs	r7, r3
 800153c:	0f73      	lsrs	r3, r6, #29
 800153e:	433b      	orrs	r3, r7
 8001540:	9301      	str	r3, [sp, #4]
 8001542:	4bda      	ldr	r3, [pc, #872]	; (80018ac <__aeabi_dmul+0x3a4>)
 8001544:	2700      	movs	r7, #0
 8001546:	4699      	mov	r9, r3
 8001548:	2300      	movs	r3, #0
 800154a:	469b      	mov	fp, r3
 800154c:	00f6      	lsls	r6, r6, #3
 800154e:	4481      	add	r9, r0
 8001550:	032b      	lsls	r3, r5, #12
 8001552:	0069      	lsls	r1, r5, #1
 8001554:	0b1b      	lsrs	r3, r3, #12
 8001556:	4652      	mov	r2, sl
 8001558:	4698      	mov	r8, r3
 800155a:	0d49      	lsrs	r1, r1, #21
 800155c:	0fed      	lsrs	r5, r5, #31
 800155e:	2900      	cmp	r1, #0
 8001560:	d100      	bne.n	8001564 <__aeabi_dmul+0x5c>
 8001562:	e085      	b.n	8001670 <__aeabi_dmul+0x168>
 8001564:	4bd0      	ldr	r3, [pc, #832]	; (80018a8 <__aeabi_dmul+0x3a0>)
 8001566:	4299      	cmp	r1, r3
 8001568:	d100      	bne.n	800156c <__aeabi_dmul+0x64>
 800156a:	e073      	b.n	8001654 <__aeabi_dmul+0x14c>
 800156c:	4643      	mov	r3, r8
 800156e:	00da      	lsls	r2, r3, #3
 8001570:	2380      	movs	r3, #128	; 0x80
 8001572:	041b      	lsls	r3, r3, #16
 8001574:	4313      	orrs	r3, r2
 8001576:	4652      	mov	r2, sl
 8001578:	48cc      	ldr	r0, [pc, #816]	; (80018ac <__aeabi_dmul+0x3a4>)
 800157a:	0f52      	lsrs	r2, r2, #29
 800157c:	4684      	mov	ip, r0
 800157e:	4313      	orrs	r3, r2
 8001580:	4652      	mov	r2, sl
 8001582:	2000      	movs	r0, #0
 8001584:	4461      	add	r1, ip
 8001586:	00d2      	lsls	r2, r2, #3
 8001588:	4489      	add	r9, r1
 800158a:	0021      	movs	r1, r4
 800158c:	4069      	eors	r1, r5
 800158e:	9100      	str	r1, [sp, #0]
 8001590:	468c      	mov	ip, r1
 8001592:	2101      	movs	r1, #1
 8001594:	4449      	add	r1, r9
 8001596:	468a      	mov	sl, r1
 8001598:	2f0f      	cmp	r7, #15
 800159a:	d900      	bls.n	800159e <__aeabi_dmul+0x96>
 800159c:	e090      	b.n	80016c0 <__aeabi_dmul+0x1b8>
 800159e:	49c4      	ldr	r1, [pc, #784]	; (80018b0 <__aeabi_dmul+0x3a8>)
 80015a0:	00bf      	lsls	r7, r7, #2
 80015a2:	59cf      	ldr	r7, [r1, r7]
 80015a4:	46bf      	mov	pc, r7
 80015a6:	465b      	mov	r3, fp
 80015a8:	433b      	orrs	r3, r7
 80015aa:	9301      	str	r3, [sp, #4]
 80015ac:	d000      	beq.n	80015b0 <__aeabi_dmul+0xa8>
 80015ae:	e16a      	b.n	8001886 <__aeabi_dmul+0x37e>
 80015b0:	2302      	movs	r3, #2
 80015b2:	2708      	movs	r7, #8
 80015b4:	2600      	movs	r6, #0
 80015b6:	4681      	mov	r9, r0
 80015b8:	469b      	mov	fp, r3
 80015ba:	e7c9      	b.n	8001550 <__aeabi_dmul+0x48>
 80015bc:	0032      	movs	r2, r6
 80015be:	4658      	mov	r0, fp
 80015c0:	9b01      	ldr	r3, [sp, #4]
 80015c2:	4661      	mov	r1, ip
 80015c4:	9100      	str	r1, [sp, #0]
 80015c6:	2802      	cmp	r0, #2
 80015c8:	d100      	bne.n	80015cc <__aeabi_dmul+0xc4>
 80015ca:	e075      	b.n	80016b8 <__aeabi_dmul+0x1b0>
 80015cc:	2803      	cmp	r0, #3
 80015ce:	d100      	bne.n	80015d2 <__aeabi_dmul+0xca>
 80015d0:	e1fe      	b.n	80019d0 <__aeabi_dmul+0x4c8>
 80015d2:	2801      	cmp	r0, #1
 80015d4:	d000      	beq.n	80015d8 <__aeabi_dmul+0xd0>
 80015d6:	e12c      	b.n	8001832 <__aeabi_dmul+0x32a>
 80015d8:	2300      	movs	r3, #0
 80015da:	2700      	movs	r7, #0
 80015dc:	2600      	movs	r6, #0
 80015de:	2500      	movs	r5, #0
 80015e0:	033f      	lsls	r7, r7, #12
 80015e2:	0d2a      	lsrs	r2, r5, #20
 80015e4:	0b3f      	lsrs	r7, r7, #12
 80015e6:	48b3      	ldr	r0, [pc, #716]	; (80018b4 <__aeabi_dmul+0x3ac>)
 80015e8:	0512      	lsls	r2, r2, #20
 80015ea:	433a      	orrs	r2, r7
 80015ec:	4002      	ands	r2, r0
 80015ee:	051b      	lsls	r3, r3, #20
 80015f0:	4313      	orrs	r3, r2
 80015f2:	9a00      	ldr	r2, [sp, #0]
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	07d1      	lsls	r1, r2, #31
 80015f8:	085b      	lsrs	r3, r3, #1
 80015fa:	430b      	orrs	r3, r1
 80015fc:	0030      	movs	r0, r6
 80015fe:	0019      	movs	r1, r3
 8001600:	b007      	add	sp, #28
 8001602:	bc3c      	pop	{r2, r3, r4, r5}
 8001604:	4690      	mov	r8, r2
 8001606:	4699      	mov	r9, r3
 8001608:	46a2      	mov	sl, r4
 800160a:	46ab      	mov	fp, r5
 800160c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800160e:	465b      	mov	r3, fp
 8001610:	433b      	orrs	r3, r7
 8001612:	9301      	str	r3, [sp, #4]
 8001614:	d100      	bne.n	8001618 <__aeabi_dmul+0x110>
 8001616:	e12f      	b.n	8001878 <__aeabi_dmul+0x370>
 8001618:	2f00      	cmp	r7, #0
 800161a:	d100      	bne.n	800161e <__aeabi_dmul+0x116>
 800161c:	e1a5      	b.n	800196a <__aeabi_dmul+0x462>
 800161e:	0038      	movs	r0, r7
 8001620:	f000 fad4 	bl	8001bcc <__clzsi2>
 8001624:	0003      	movs	r3, r0
 8001626:	3b0b      	subs	r3, #11
 8001628:	2b1c      	cmp	r3, #28
 800162a:	dd00      	ble.n	800162e <__aeabi_dmul+0x126>
 800162c:	e196      	b.n	800195c <__aeabi_dmul+0x454>
 800162e:	221d      	movs	r2, #29
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	465a      	mov	r2, fp
 8001634:	0001      	movs	r1, r0
 8001636:	40da      	lsrs	r2, r3
 8001638:	465e      	mov	r6, fp
 800163a:	3908      	subs	r1, #8
 800163c:	408f      	lsls	r7, r1
 800163e:	0013      	movs	r3, r2
 8001640:	408e      	lsls	r6, r1
 8001642:	433b      	orrs	r3, r7
 8001644:	9301      	str	r3, [sp, #4]
 8001646:	4b9c      	ldr	r3, [pc, #624]	; (80018b8 <__aeabi_dmul+0x3b0>)
 8001648:	2700      	movs	r7, #0
 800164a:	1a1b      	subs	r3, r3, r0
 800164c:	4699      	mov	r9, r3
 800164e:	2300      	movs	r3, #0
 8001650:	469b      	mov	fp, r3
 8001652:	e77d      	b.n	8001550 <__aeabi_dmul+0x48>
 8001654:	4641      	mov	r1, r8
 8001656:	4653      	mov	r3, sl
 8001658:	430b      	orrs	r3, r1
 800165a:	4993      	ldr	r1, [pc, #588]	; (80018a8 <__aeabi_dmul+0x3a0>)
 800165c:	468c      	mov	ip, r1
 800165e:	44e1      	add	r9, ip
 8001660:	2b00      	cmp	r3, #0
 8001662:	d000      	beq.n	8001666 <__aeabi_dmul+0x15e>
 8001664:	e11a      	b.n	800189c <__aeabi_dmul+0x394>
 8001666:	2202      	movs	r2, #2
 8001668:	2002      	movs	r0, #2
 800166a:	4317      	orrs	r7, r2
 800166c:	2200      	movs	r2, #0
 800166e:	e78c      	b.n	800158a <__aeabi_dmul+0x82>
 8001670:	4313      	orrs	r3, r2
 8001672:	d100      	bne.n	8001676 <__aeabi_dmul+0x16e>
 8001674:	e10d      	b.n	8001892 <__aeabi_dmul+0x38a>
 8001676:	4643      	mov	r3, r8
 8001678:	2b00      	cmp	r3, #0
 800167a:	d100      	bne.n	800167e <__aeabi_dmul+0x176>
 800167c:	e181      	b.n	8001982 <__aeabi_dmul+0x47a>
 800167e:	4640      	mov	r0, r8
 8001680:	f000 faa4 	bl	8001bcc <__clzsi2>
 8001684:	0002      	movs	r2, r0
 8001686:	3a0b      	subs	r2, #11
 8001688:	2a1c      	cmp	r2, #28
 800168a:	dd00      	ble.n	800168e <__aeabi_dmul+0x186>
 800168c:	e172      	b.n	8001974 <__aeabi_dmul+0x46c>
 800168e:	0001      	movs	r1, r0
 8001690:	4643      	mov	r3, r8
 8001692:	3908      	subs	r1, #8
 8001694:	408b      	lsls	r3, r1
 8001696:	4698      	mov	r8, r3
 8001698:	231d      	movs	r3, #29
 800169a:	1a9a      	subs	r2, r3, r2
 800169c:	4653      	mov	r3, sl
 800169e:	40d3      	lsrs	r3, r2
 80016a0:	001a      	movs	r2, r3
 80016a2:	4643      	mov	r3, r8
 80016a4:	4313      	orrs	r3, r2
 80016a6:	4652      	mov	r2, sl
 80016a8:	408a      	lsls	r2, r1
 80016aa:	4649      	mov	r1, r9
 80016ac:	1a08      	subs	r0, r1, r0
 80016ae:	4982      	ldr	r1, [pc, #520]	; (80018b8 <__aeabi_dmul+0x3b0>)
 80016b0:	4689      	mov	r9, r1
 80016b2:	4481      	add	r9, r0
 80016b4:	2000      	movs	r0, #0
 80016b6:	e768      	b.n	800158a <__aeabi_dmul+0x82>
 80016b8:	4b7b      	ldr	r3, [pc, #492]	; (80018a8 <__aeabi_dmul+0x3a0>)
 80016ba:	2700      	movs	r7, #0
 80016bc:	2600      	movs	r6, #0
 80016be:	e78e      	b.n	80015de <__aeabi_dmul+0xd6>
 80016c0:	0c14      	lsrs	r4, r2, #16
 80016c2:	0412      	lsls	r2, r2, #16
 80016c4:	0c12      	lsrs	r2, r2, #16
 80016c6:	0011      	movs	r1, r2
 80016c8:	0c37      	lsrs	r7, r6, #16
 80016ca:	0436      	lsls	r6, r6, #16
 80016cc:	0c35      	lsrs	r5, r6, #16
 80016ce:	4379      	muls	r1, r7
 80016d0:	0028      	movs	r0, r5
 80016d2:	468c      	mov	ip, r1
 80016d4:	002e      	movs	r6, r5
 80016d6:	4360      	muls	r0, r4
 80016d8:	4460      	add	r0, ip
 80016da:	4683      	mov	fp, r0
 80016dc:	4356      	muls	r6, r2
 80016de:	0021      	movs	r1, r4
 80016e0:	0c30      	lsrs	r0, r6, #16
 80016e2:	4680      	mov	r8, r0
 80016e4:	4658      	mov	r0, fp
 80016e6:	4379      	muls	r1, r7
 80016e8:	4440      	add	r0, r8
 80016ea:	9102      	str	r1, [sp, #8]
 80016ec:	4584      	cmp	ip, r0
 80016ee:	d906      	bls.n	80016fe <__aeabi_dmul+0x1f6>
 80016f0:	4688      	mov	r8, r1
 80016f2:	2180      	movs	r1, #128	; 0x80
 80016f4:	0249      	lsls	r1, r1, #9
 80016f6:	468c      	mov	ip, r1
 80016f8:	44e0      	add	r8, ip
 80016fa:	4641      	mov	r1, r8
 80016fc:	9102      	str	r1, [sp, #8]
 80016fe:	0436      	lsls	r6, r6, #16
 8001700:	0c01      	lsrs	r1, r0, #16
 8001702:	0c36      	lsrs	r6, r6, #16
 8001704:	0400      	lsls	r0, r0, #16
 8001706:	468b      	mov	fp, r1
 8001708:	1981      	adds	r1, r0, r6
 800170a:	0c1e      	lsrs	r6, r3, #16
 800170c:	041b      	lsls	r3, r3, #16
 800170e:	0c1b      	lsrs	r3, r3, #16
 8001710:	9103      	str	r1, [sp, #12]
 8001712:	0019      	movs	r1, r3
 8001714:	4379      	muls	r1, r7
 8001716:	468c      	mov	ip, r1
 8001718:	0028      	movs	r0, r5
 800171a:	4375      	muls	r5, r6
 800171c:	4465      	add	r5, ip
 800171e:	46a8      	mov	r8, r5
 8001720:	4358      	muls	r0, r3
 8001722:	0c05      	lsrs	r5, r0, #16
 8001724:	4445      	add	r5, r8
 8001726:	4377      	muls	r7, r6
 8001728:	42a9      	cmp	r1, r5
 800172a:	d903      	bls.n	8001734 <__aeabi_dmul+0x22c>
 800172c:	2180      	movs	r1, #128	; 0x80
 800172e:	0249      	lsls	r1, r1, #9
 8001730:	468c      	mov	ip, r1
 8001732:	4467      	add	r7, ip
 8001734:	0c29      	lsrs	r1, r5, #16
 8001736:	468c      	mov	ip, r1
 8001738:	0039      	movs	r1, r7
 800173a:	0400      	lsls	r0, r0, #16
 800173c:	0c00      	lsrs	r0, r0, #16
 800173e:	042d      	lsls	r5, r5, #16
 8001740:	182d      	adds	r5, r5, r0
 8001742:	4461      	add	r1, ip
 8001744:	44ab      	add	fp, r5
 8001746:	9105      	str	r1, [sp, #20]
 8001748:	4659      	mov	r1, fp
 800174a:	9104      	str	r1, [sp, #16]
 800174c:	9901      	ldr	r1, [sp, #4]
 800174e:	040f      	lsls	r7, r1, #16
 8001750:	0c3f      	lsrs	r7, r7, #16
 8001752:	0c08      	lsrs	r0, r1, #16
 8001754:	0039      	movs	r1, r7
 8001756:	4351      	muls	r1, r2
 8001758:	4342      	muls	r2, r0
 800175a:	4690      	mov	r8, r2
 800175c:	0002      	movs	r2, r0
 800175e:	468c      	mov	ip, r1
 8001760:	0c09      	lsrs	r1, r1, #16
 8001762:	468b      	mov	fp, r1
 8001764:	4362      	muls	r2, r4
 8001766:	437c      	muls	r4, r7
 8001768:	4444      	add	r4, r8
 800176a:	445c      	add	r4, fp
 800176c:	45a0      	cmp	r8, r4
 800176e:	d903      	bls.n	8001778 <__aeabi_dmul+0x270>
 8001770:	2180      	movs	r1, #128	; 0x80
 8001772:	0249      	lsls	r1, r1, #9
 8001774:	4688      	mov	r8, r1
 8001776:	4442      	add	r2, r8
 8001778:	0c21      	lsrs	r1, r4, #16
 800177a:	4688      	mov	r8, r1
 800177c:	4661      	mov	r1, ip
 800177e:	0409      	lsls	r1, r1, #16
 8001780:	0c09      	lsrs	r1, r1, #16
 8001782:	468c      	mov	ip, r1
 8001784:	0039      	movs	r1, r7
 8001786:	4359      	muls	r1, r3
 8001788:	4343      	muls	r3, r0
 800178a:	4370      	muls	r0, r6
 800178c:	437e      	muls	r6, r7
 800178e:	0c0f      	lsrs	r7, r1, #16
 8001790:	18f6      	adds	r6, r6, r3
 8001792:	0424      	lsls	r4, r4, #16
 8001794:	19be      	adds	r6, r7, r6
 8001796:	4464      	add	r4, ip
 8001798:	4442      	add	r2, r8
 800179a:	468c      	mov	ip, r1
 800179c:	42b3      	cmp	r3, r6
 800179e:	d903      	bls.n	80017a8 <__aeabi_dmul+0x2a0>
 80017a0:	2380      	movs	r3, #128	; 0x80
 80017a2:	025b      	lsls	r3, r3, #9
 80017a4:	4698      	mov	r8, r3
 80017a6:	4440      	add	r0, r8
 80017a8:	9b02      	ldr	r3, [sp, #8]
 80017aa:	4661      	mov	r1, ip
 80017ac:	4698      	mov	r8, r3
 80017ae:	9b04      	ldr	r3, [sp, #16]
 80017b0:	0437      	lsls	r7, r6, #16
 80017b2:	4443      	add	r3, r8
 80017b4:	469b      	mov	fp, r3
 80017b6:	45ab      	cmp	fp, r5
 80017b8:	41ad      	sbcs	r5, r5
 80017ba:	426b      	negs	r3, r5
 80017bc:	040d      	lsls	r5, r1, #16
 80017be:	9905      	ldr	r1, [sp, #20]
 80017c0:	0c2d      	lsrs	r5, r5, #16
 80017c2:	468c      	mov	ip, r1
 80017c4:	197f      	adds	r7, r7, r5
 80017c6:	4467      	add	r7, ip
 80017c8:	18fd      	adds	r5, r7, r3
 80017ca:	46a8      	mov	r8, r5
 80017cc:	465d      	mov	r5, fp
 80017ce:	192d      	adds	r5, r5, r4
 80017d0:	42a5      	cmp	r5, r4
 80017d2:	41a4      	sbcs	r4, r4
 80017d4:	4693      	mov	fp, r2
 80017d6:	4264      	negs	r4, r4
 80017d8:	46a4      	mov	ip, r4
 80017da:	44c3      	add	fp, r8
 80017dc:	44dc      	add	ip, fp
 80017de:	428f      	cmp	r7, r1
 80017e0:	41bf      	sbcs	r7, r7
 80017e2:	4598      	cmp	r8, r3
 80017e4:	419b      	sbcs	r3, r3
 80017e6:	4593      	cmp	fp, r2
 80017e8:	4192      	sbcs	r2, r2
 80017ea:	45a4      	cmp	ip, r4
 80017ec:	41a4      	sbcs	r4, r4
 80017ee:	425b      	negs	r3, r3
 80017f0:	427f      	negs	r7, r7
 80017f2:	431f      	orrs	r7, r3
 80017f4:	0c36      	lsrs	r6, r6, #16
 80017f6:	4252      	negs	r2, r2
 80017f8:	4264      	negs	r4, r4
 80017fa:	19bf      	adds	r7, r7, r6
 80017fc:	4322      	orrs	r2, r4
 80017fe:	18bf      	adds	r7, r7, r2
 8001800:	4662      	mov	r2, ip
 8001802:	1838      	adds	r0, r7, r0
 8001804:	0243      	lsls	r3, r0, #9
 8001806:	0dd2      	lsrs	r2, r2, #23
 8001808:	9903      	ldr	r1, [sp, #12]
 800180a:	4313      	orrs	r3, r2
 800180c:	026a      	lsls	r2, r5, #9
 800180e:	430a      	orrs	r2, r1
 8001810:	1e50      	subs	r0, r2, #1
 8001812:	4182      	sbcs	r2, r0
 8001814:	4661      	mov	r1, ip
 8001816:	0ded      	lsrs	r5, r5, #23
 8001818:	432a      	orrs	r2, r5
 800181a:	024e      	lsls	r6, r1, #9
 800181c:	4332      	orrs	r2, r6
 800181e:	01d9      	lsls	r1, r3, #7
 8001820:	d400      	bmi.n	8001824 <__aeabi_dmul+0x31c>
 8001822:	e0b3      	b.n	800198c <__aeabi_dmul+0x484>
 8001824:	2601      	movs	r6, #1
 8001826:	0850      	lsrs	r0, r2, #1
 8001828:	4032      	ands	r2, r6
 800182a:	4302      	orrs	r2, r0
 800182c:	07de      	lsls	r6, r3, #31
 800182e:	4332      	orrs	r2, r6
 8001830:	085b      	lsrs	r3, r3, #1
 8001832:	4c22      	ldr	r4, [pc, #136]	; (80018bc <__aeabi_dmul+0x3b4>)
 8001834:	4454      	add	r4, sl
 8001836:	2c00      	cmp	r4, #0
 8001838:	dd62      	ble.n	8001900 <__aeabi_dmul+0x3f8>
 800183a:	0751      	lsls	r1, r2, #29
 800183c:	d009      	beq.n	8001852 <__aeabi_dmul+0x34a>
 800183e:	200f      	movs	r0, #15
 8001840:	4010      	ands	r0, r2
 8001842:	2804      	cmp	r0, #4
 8001844:	d005      	beq.n	8001852 <__aeabi_dmul+0x34a>
 8001846:	1d10      	adds	r0, r2, #4
 8001848:	4290      	cmp	r0, r2
 800184a:	4192      	sbcs	r2, r2
 800184c:	4252      	negs	r2, r2
 800184e:	189b      	adds	r3, r3, r2
 8001850:	0002      	movs	r2, r0
 8001852:	01d9      	lsls	r1, r3, #7
 8001854:	d504      	bpl.n	8001860 <__aeabi_dmul+0x358>
 8001856:	2480      	movs	r4, #128	; 0x80
 8001858:	4819      	ldr	r0, [pc, #100]	; (80018c0 <__aeabi_dmul+0x3b8>)
 800185a:	00e4      	lsls	r4, r4, #3
 800185c:	4003      	ands	r3, r0
 800185e:	4454      	add	r4, sl
 8001860:	4818      	ldr	r0, [pc, #96]	; (80018c4 <__aeabi_dmul+0x3bc>)
 8001862:	4284      	cmp	r4, r0
 8001864:	dd00      	ble.n	8001868 <__aeabi_dmul+0x360>
 8001866:	e727      	b.n	80016b8 <__aeabi_dmul+0x1b0>
 8001868:	075e      	lsls	r6, r3, #29
 800186a:	025b      	lsls	r3, r3, #9
 800186c:	08d2      	lsrs	r2, r2, #3
 800186e:	0b1f      	lsrs	r7, r3, #12
 8001870:	0563      	lsls	r3, r4, #21
 8001872:	4316      	orrs	r6, r2
 8001874:	0d5b      	lsrs	r3, r3, #21
 8001876:	e6b2      	b.n	80015de <__aeabi_dmul+0xd6>
 8001878:	2300      	movs	r3, #0
 800187a:	4699      	mov	r9, r3
 800187c:	3301      	adds	r3, #1
 800187e:	2704      	movs	r7, #4
 8001880:	2600      	movs	r6, #0
 8001882:	469b      	mov	fp, r3
 8001884:	e664      	b.n	8001550 <__aeabi_dmul+0x48>
 8001886:	2303      	movs	r3, #3
 8001888:	9701      	str	r7, [sp, #4]
 800188a:	4681      	mov	r9, r0
 800188c:	270c      	movs	r7, #12
 800188e:	469b      	mov	fp, r3
 8001890:	e65e      	b.n	8001550 <__aeabi_dmul+0x48>
 8001892:	2201      	movs	r2, #1
 8001894:	2001      	movs	r0, #1
 8001896:	4317      	orrs	r7, r2
 8001898:	2200      	movs	r2, #0
 800189a:	e676      	b.n	800158a <__aeabi_dmul+0x82>
 800189c:	2303      	movs	r3, #3
 800189e:	2003      	movs	r0, #3
 80018a0:	431f      	orrs	r7, r3
 80018a2:	4643      	mov	r3, r8
 80018a4:	e671      	b.n	800158a <__aeabi_dmul+0x82>
 80018a6:	46c0      	nop			; (mov r8, r8)
 80018a8:	000007ff 	.word	0x000007ff
 80018ac:	fffffc01 	.word	0xfffffc01
 80018b0:	0800bf50 	.word	0x0800bf50
 80018b4:	800fffff 	.word	0x800fffff
 80018b8:	fffffc0d 	.word	0xfffffc0d
 80018bc:	000003ff 	.word	0x000003ff
 80018c0:	feffffff 	.word	0xfeffffff
 80018c4:	000007fe 	.word	0x000007fe
 80018c8:	2300      	movs	r3, #0
 80018ca:	2780      	movs	r7, #128	; 0x80
 80018cc:	9300      	str	r3, [sp, #0]
 80018ce:	033f      	lsls	r7, r7, #12
 80018d0:	2600      	movs	r6, #0
 80018d2:	4b43      	ldr	r3, [pc, #268]	; (80019e0 <__aeabi_dmul+0x4d8>)
 80018d4:	e683      	b.n	80015de <__aeabi_dmul+0xd6>
 80018d6:	9b01      	ldr	r3, [sp, #4]
 80018d8:	0032      	movs	r2, r6
 80018da:	46a4      	mov	ip, r4
 80018dc:	4658      	mov	r0, fp
 80018de:	e670      	b.n	80015c2 <__aeabi_dmul+0xba>
 80018e0:	46ac      	mov	ip, r5
 80018e2:	e66e      	b.n	80015c2 <__aeabi_dmul+0xba>
 80018e4:	2780      	movs	r7, #128	; 0x80
 80018e6:	9901      	ldr	r1, [sp, #4]
 80018e8:	033f      	lsls	r7, r7, #12
 80018ea:	4239      	tst	r1, r7
 80018ec:	d02d      	beq.n	800194a <__aeabi_dmul+0x442>
 80018ee:	423b      	tst	r3, r7
 80018f0:	d12b      	bne.n	800194a <__aeabi_dmul+0x442>
 80018f2:	431f      	orrs	r7, r3
 80018f4:	033f      	lsls	r7, r7, #12
 80018f6:	0b3f      	lsrs	r7, r7, #12
 80018f8:	9500      	str	r5, [sp, #0]
 80018fa:	0016      	movs	r6, r2
 80018fc:	4b38      	ldr	r3, [pc, #224]	; (80019e0 <__aeabi_dmul+0x4d8>)
 80018fe:	e66e      	b.n	80015de <__aeabi_dmul+0xd6>
 8001900:	2501      	movs	r5, #1
 8001902:	1b2d      	subs	r5, r5, r4
 8001904:	2d38      	cmp	r5, #56	; 0x38
 8001906:	dd00      	ble.n	800190a <__aeabi_dmul+0x402>
 8001908:	e666      	b.n	80015d8 <__aeabi_dmul+0xd0>
 800190a:	2d1f      	cmp	r5, #31
 800190c:	dc40      	bgt.n	8001990 <__aeabi_dmul+0x488>
 800190e:	4835      	ldr	r0, [pc, #212]	; (80019e4 <__aeabi_dmul+0x4dc>)
 8001910:	001c      	movs	r4, r3
 8001912:	4450      	add	r0, sl
 8001914:	0016      	movs	r6, r2
 8001916:	4082      	lsls	r2, r0
 8001918:	4084      	lsls	r4, r0
 800191a:	40ee      	lsrs	r6, r5
 800191c:	1e50      	subs	r0, r2, #1
 800191e:	4182      	sbcs	r2, r0
 8001920:	4334      	orrs	r4, r6
 8001922:	4314      	orrs	r4, r2
 8001924:	40eb      	lsrs	r3, r5
 8001926:	0762      	lsls	r2, r4, #29
 8001928:	d009      	beq.n	800193e <__aeabi_dmul+0x436>
 800192a:	220f      	movs	r2, #15
 800192c:	4022      	ands	r2, r4
 800192e:	2a04      	cmp	r2, #4
 8001930:	d005      	beq.n	800193e <__aeabi_dmul+0x436>
 8001932:	0022      	movs	r2, r4
 8001934:	1d14      	adds	r4, r2, #4
 8001936:	4294      	cmp	r4, r2
 8001938:	4180      	sbcs	r0, r0
 800193a:	4240      	negs	r0, r0
 800193c:	181b      	adds	r3, r3, r0
 800193e:	021a      	lsls	r2, r3, #8
 8001940:	d53e      	bpl.n	80019c0 <__aeabi_dmul+0x4b8>
 8001942:	2301      	movs	r3, #1
 8001944:	2700      	movs	r7, #0
 8001946:	2600      	movs	r6, #0
 8001948:	e649      	b.n	80015de <__aeabi_dmul+0xd6>
 800194a:	2780      	movs	r7, #128	; 0x80
 800194c:	9b01      	ldr	r3, [sp, #4]
 800194e:	033f      	lsls	r7, r7, #12
 8001950:	431f      	orrs	r7, r3
 8001952:	033f      	lsls	r7, r7, #12
 8001954:	0b3f      	lsrs	r7, r7, #12
 8001956:	9400      	str	r4, [sp, #0]
 8001958:	4b21      	ldr	r3, [pc, #132]	; (80019e0 <__aeabi_dmul+0x4d8>)
 800195a:	e640      	b.n	80015de <__aeabi_dmul+0xd6>
 800195c:	0003      	movs	r3, r0
 800195e:	465a      	mov	r2, fp
 8001960:	3b28      	subs	r3, #40	; 0x28
 8001962:	409a      	lsls	r2, r3
 8001964:	2600      	movs	r6, #0
 8001966:	9201      	str	r2, [sp, #4]
 8001968:	e66d      	b.n	8001646 <__aeabi_dmul+0x13e>
 800196a:	4658      	mov	r0, fp
 800196c:	f000 f92e 	bl	8001bcc <__clzsi2>
 8001970:	3020      	adds	r0, #32
 8001972:	e657      	b.n	8001624 <__aeabi_dmul+0x11c>
 8001974:	0003      	movs	r3, r0
 8001976:	4652      	mov	r2, sl
 8001978:	3b28      	subs	r3, #40	; 0x28
 800197a:	409a      	lsls	r2, r3
 800197c:	0013      	movs	r3, r2
 800197e:	2200      	movs	r2, #0
 8001980:	e693      	b.n	80016aa <__aeabi_dmul+0x1a2>
 8001982:	4650      	mov	r0, sl
 8001984:	f000 f922 	bl	8001bcc <__clzsi2>
 8001988:	3020      	adds	r0, #32
 800198a:	e67b      	b.n	8001684 <__aeabi_dmul+0x17c>
 800198c:	46ca      	mov	sl, r9
 800198e:	e750      	b.n	8001832 <__aeabi_dmul+0x32a>
 8001990:	201f      	movs	r0, #31
 8001992:	001e      	movs	r6, r3
 8001994:	4240      	negs	r0, r0
 8001996:	1b04      	subs	r4, r0, r4
 8001998:	40e6      	lsrs	r6, r4
 800199a:	2d20      	cmp	r5, #32
 800199c:	d003      	beq.n	80019a6 <__aeabi_dmul+0x49e>
 800199e:	4c12      	ldr	r4, [pc, #72]	; (80019e8 <__aeabi_dmul+0x4e0>)
 80019a0:	4454      	add	r4, sl
 80019a2:	40a3      	lsls	r3, r4
 80019a4:	431a      	orrs	r2, r3
 80019a6:	1e50      	subs	r0, r2, #1
 80019a8:	4182      	sbcs	r2, r0
 80019aa:	4332      	orrs	r2, r6
 80019ac:	2607      	movs	r6, #7
 80019ae:	2700      	movs	r7, #0
 80019b0:	4016      	ands	r6, r2
 80019b2:	d009      	beq.n	80019c8 <__aeabi_dmul+0x4c0>
 80019b4:	200f      	movs	r0, #15
 80019b6:	2300      	movs	r3, #0
 80019b8:	4010      	ands	r0, r2
 80019ba:	0014      	movs	r4, r2
 80019bc:	2804      	cmp	r0, #4
 80019be:	d1b9      	bne.n	8001934 <__aeabi_dmul+0x42c>
 80019c0:	0022      	movs	r2, r4
 80019c2:	075e      	lsls	r6, r3, #29
 80019c4:	025b      	lsls	r3, r3, #9
 80019c6:	0b1f      	lsrs	r7, r3, #12
 80019c8:	08d2      	lsrs	r2, r2, #3
 80019ca:	4316      	orrs	r6, r2
 80019cc:	2300      	movs	r3, #0
 80019ce:	e606      	b.n	80015de <__aeabi_dmul+0xd6>
 80019d0:	2780      	movs	r7, #128	; 0x80
 80019d2:	033f      	lsls	r7, r7, #12
 80019d4:	431f      	orrs	r7, r3
 80019d6:	033f      	lsls	r7, r7, #12
 80019d8:	0b3f      	lsrs	r7, r7, #12
 80019da:	0016      	movs	r6, r2
 80019dc:	4b00      	ldr	r3, [pc, #0]	; (80019e0 <__aeabi_dmul+0x4d8>)
 80019de:	e5fe      	b.n	80015de <__aeabi_dmul+0xd6>
 80019e0:	000007ff 	.word	0x000007ff
 80019e4:	0000041e 	.word	0x0000041e
 80019e8:	0000043e 	.word	0x0000043e

080019ec <__aeabi_i2d>:
 80019ec:	b570      	push	{r4, r5, r6, lr}
 80019ee:	2800      	cmp	r0, #0
 80019f0:	d02d      	beq.n	8001a4e <__aeabi_i2d+0x62>
 80019f2:	17c3      	asrs	r3, r0, #31
 80019f4:	18c5      	adds	r5, r0, r3
 80019f6:	405d      	eors	r5, r3
 80019f8:	0fc4      	lsrs	r4, r0, #31
 80019fa:	0028      	movs	r0, r5
 80019fc:	f000 f8e6 	bl	8001bcc <__clzsi2>
 8001a00:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <__aeabi_i2d+0x6c>)
 8001a02:	1a1b      	subs	r3, r3, r0
 8001a04:	055b      	lsls	r3, r3, #21
 8001a06:	0d5b      	lsrs	r3, r3, #21
 8001a08:	280a      	cmp	r0, #10
 8001a0a:	dd15      	ble.n	8001a38 <__aeabi_i2d+0x4c>
 8001a0c:	380b      	subs	r0, #11
 8001a0e:	4085      	lsls	r5, r0
 8001a10:	2200      	movs	r2, #0
 8001a12:	032d      	lsls	r5, r5, #12
 8001a14:	0b2d      	lsrs	r5, r5, #12
 8001a16:	2100      	movs	r1, #0
 8001a18:	0010      	movs	r0, r2
 8001a1a:	032d      	lsls	r5, r5, #12
 8001a1c:	0d0a      	lsrs	r2, r1, #20
 8001a1e:	0b2d      	lsrs	r5, r5, #12
 8001a20:	0512      	lsls	r2, r2, #20
 8001a22:	432a      	orrs	r2, r5
 8001a24:	4d0d      	ldr	r5, [pc, #52]	; (8001a5c <__aeabi_i2d+0x70>)
 8001a26:	051b      	lsls	r3, r3, #20
 8001a28:	402a      	ands	r2, r5
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	07e4      	lsls	r4, r4, #31
 8001a30:	085b      	lsrs	r3, r3, #1
 8001a32:	4323      	orrs	r3, r4
 8001a34:	0019      	movs	r1, r3
 8001a36:	bd70      	pop	{r4, r5, r6, pc}
 8001a38:	0002      	movs	r2, r0
 8001a3a:	0029      	movs	r1, r5
 8001a3c:	3215      	adds	r2, #21
 8001a3e:	4091      	lsls	r1, r2
 8001a40:	000a      	movs	r2, r1
 8001a42:	210b      	movs	r1, #11
 8001a44:	1a08      	subs	r0, r1, r0
 8001a46:	40c5      	lsrs	r5, r0
 8001a48:	032d      	lsls	r5, r5, #12
 8001a4a:	0b2d      	lsrs	r5, r5, #12
 8001a4c:	e7e3      	b.n	8001a16 <__aeabi_i2d+0x2a>
 8001a4e:	2400      	movs	r4, #0
 8001a50:	2300      	movs	r3, #0
 8001a52:	2500      	movs	r5, #0
 8001a54:	2200      	movs	r2, #0
 8001a56:	e7de      	b.n	8001a16 <__aeabi_i2d+0x2a>
 8001a58:	0000041e 	.word	0x0000041e
 8001a5c:	800fffff 	.word	0x800fffff

08001a60 <__aeabi_ui2d>:
 8001a60:	b510      	push	{r4, lr}
 8001a62:	1e04      	subs	r4, r0, #0
 8001a64:	d025      	beq.n	8001ab2 <__aeabi_ui2d+0x52>
 8001a66:	f000 f8b1 	bl	8001bcc <__clzsi2>
 8001a6a:	4b14      	ldr	r3, [pc, #80]	; (8001abc <__aeabi_ui2d+0x5c>)
 8001a6c:	1a1b      	subs	r3, r3, r0
 8001a6e:	055b      	lsls	r3, r3, #21
 8001a70:	0d5b      	lsrs	r3, r3, #21
 8001a72:	280a      	cmp	r0, #10
 8001a74:	dd12      	ble.n	8001a9c <__aeabi_ui2d+0x3c>
 8001a76:	380b      	subs	r0, #11
 8001a78:	4084      	lsls	r4, r0
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	0324      	lsls	r4, r4, #12
 8001a7e:	0b24      	lsrs	r4, r4, #12
 8001a80:	2100      	movs	r1, #0
 8001a82:	0010      	movs	r0, r2
 8001a84:	0324      	lsls	r4, r4, #12
 8001a86:	0d0a      	lsrs	r2, r1, #20
 8001a88:	0b24      	lsrs	r4, r4, #12
 8001a8a:	0512      	lsls	r2, r2, #20
 8001a8c:	4322      	orrs	r2, r4
 8001a8e:	4c0c      	ldr	r4, [pc, #48]	; (8001ac0 <__aeabi_ui2d+0x60>)
 8001a90:	051b      	lsls	r3, r3, #20
 8001a92:	4022      	ands	r2, r4
 8001a94:	4313      	orrs	r3, r2
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	0859      	lsrs	r1, r3, #1
 8001a9a:	bd10      	pop	{r4, pc}
 8001a9c:	0002      	movs	r2, r0
 8001a9e:	0021      	movs	r1, r4
 8001aa0:	3215      	adds	r2, #21
 8001aa2:	4091      	lsls	r1, r2
 8001aa4:	000a      	movs	r2, r1
 8001aa6:	210b      	movs	r1, #11
 8001aa8:	1a08      	subs	r0, r1, r0
 8001aaa:	40c4      	lsrs	r4, r0
 8001aac:	0324      	lsls	r4, r4, #12
 8001aae:	0b24      	lsrs	r4, r4, #12
 8001ab0:	e7e6      	b.n	8001a80 <__aeabi_ui2d+0x20>
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	2400      	movs	r4, #0
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	e7e2      	b.n	8001a80 <__aeabi_ui2d+0x20>
 8001aba:	46c0      	nop			; (mov r8, r8)
 8001abc:	0000041e 	.word	0x0000041e
 8001ac0:	800fffff 	.word	0x800fffff

08001ac4 <__aeabi_d2f>:
 8001ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ac6:	004c      	lsls	r4, r1, #1
 8001ac8:	0d64      	lsrs	r4, r4, #21
 8001aca:	030b      	lsls	r3, r1, #12
 8001acc:	1c62      	adds	r2, r4, #1
 8001ace:	0a5b      	lsrs	r3, r3, #9
 8001ad0:	0f46      	lsrs	r6, r0, #29
 8001ad2:	0552      	lsls	r2, r2, #21
 8001ad4:	0fc9      	lsrs	r1, r1, #31
 8001ad6:	431e      	orrs	r6, r3
 8001ad8:	00c5      	lsls	r5, r0, #3
 8001ada:	0d52      	lsrs	r2, r2, #21
 8001adc:	2a01      	cmp	r2, #1
 8001ade:	dd29      	ble.n	8001b34 <__aeabi_d2f+0x70>
 8001ae0:	4b37      	ldr	r3, [pc, #220]	; (8001bc0 <__aeabi_d2f+0xfc>)
 8001ae2:	18e7      	adds	r7, r4, r3
 8001ae4:	2ffe      	cmp	r7, #254	; 0xfe
 8001ae6:	dc1c      	bgt.n	8001b22 <__aeabi_d2f+0x5e>
 8001ae8:	2f00      	cmp	r7, #0
 8001aea:	dd3b      	ble.n	8001b64 <__aeabi_d2f+0xa0>
 8001aec:	0180      	lsls	r0, r0, #6
 8001aee:	1e43      	subs	r3, r0, #1
 8001af0:	4198      	sbcs	r0, r3
 8001af2:	2207      	movs	r2, #7
 8001af4:	00f3      	lsls	r3, r6, #3
 8001af6:	0f6d      	lsrs	r5, r5, #29
 8001af8:	4303      	orrs	r3, r0
 8001afa:	432b      	orrs	r3, r5
 8001afc:	401a      	ands	r2, r3
 8001afe:	2a00      	cmp	r2, #0
 8001b00:	d004      	beq.n	8001b0c <__aeabi_d2f+0x48>
 8001b02:	220f      	movs	r2, #15
 8001b04:	401a      	ands	r2, r3
 8001b06:	2a04      	cmp	r2, #4
 8001b08:	d000      	beq.n	8001b0c <__aeabi_d2f+0x48>
 8001b0a:	3304      	adds	r3, #4
 8001b0c:	2280      	movs	r2, #128	; 0x80
 8001b0e:	04d2      	lsls	r2, r2, #19
 8001b10:	401a      	ands	r2, r3
 8001b12:	d024      	beq.n	8001b5e <__aeabi_d2f+0x9a>
 8001b14:	3701      	adds	r7, #1
 8001b16:	b2fa      	uxtb	r2, r7
 8001b18:	2fff      	cmp	r7, #255	; 0xff
 8001b1a:	d002      	beq.n	8001b22 <__aeabi_d2f+0x5e>
 8001b1c:	019b      	lsls	r3, r3, #6
 8001b1e:	0a58      	lsrs	r0, r3, #9
 8001b20:	e001      	b.n	8001b26 <__aeabi_d2f+0x62>
 8001b22:	22ff      	movs	r2, #255	; 0xff
 8001b24:	2000      	movs	r0, #0
 8001b26:	0240      	lsls	r0, r0, #9
 8001b28:	05d2      	lsls	r2, r2, #23
 8001b2a:	0a40      	lsrs	r0, r0, #9
 8001b2c:	07c9      	lsls	r1, r1, #31
 8001b2e:	4310      	orrs	r0, r2
 8001b30:	4308      	orrs	r0, r1
 8001b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b34:	4335      	orrs	r5, r6
 8001b36:	2c00      	cmp	r4, #0
 8001b38:	d104      	bne.n	8001b44 <__aeabi_d2f+0x80>
 8001b3a:	2d00      	cmp	r5, #0
 8001b3c:	d10a      	bne.n	8001b54 <__aeabi_d2f+0x90>
 8001b3e:	2200      	movs	r2, #0
 8001b40:	2000      	movs	r0, #0
 8001b42:	e7f0      	b.n	8001b26 <__aeabi_d2f+0x62>
 8001b44:	2d00      	cmp	r5, #0
 8001b46:	d0ec      	beq.n	8001b22 <__aeabi_d2f+0x5e>
 8001b48:	2080      	movs	r0, #128	; 0x80
 8001b4a:	03c0      	lsls	r0, r0, #15
 8001b4c:	4330      	orrs	r0, r6
 8001b4e:	22ff      	movs	r2, #255	; 0xff
 8001b50:	e7e9      	b.n	8001b26 <__aeabi_d2f+0x62>
 8001b52:	2400      	movs	r4, #0
 8001b54:	2300      	movs	r3, #0
 8001b56:	025b      	lsls	r3, r3, #9
 8001b58:	0a58      	lsrs	r0, r3, #9
 8001b5a:	b2e2      	uxtb	r2, r4
 8001b5c:	e7e3      	b.n	8001b26 <__aeabi_d2f+0x62>
 8001b5e:	08db      	lsrs	r3, r3, #3
 8001b60:	003c      	movs	r4, r7
 8001b62:	e7f8      	b.n	8001b56 <__aeabi_d2f+0x92>
 8001b64:	003b      	movs	r3, r7
 8001b66:	3317      	adds	r3, #23
 8001b68:	dbf3      	blt.n	8001b52 <__aeabi_d2f+0x8e>
 8001b6a:	2380      	movs	r3, #128	; 0x80
 8001b6c:	041b      	lsls	r3, r3, #16
 8001b6e:	4333      	orrs	r3, r6
 8001b70:	261e      	movs	r6, #30
 8001b72:	1bf6      	subs	r6, r6, r7
 8001b74:	2e1f      	cmp	r6, #31
 8001b76:	dd14      	ble.n	8001ba2 <__aeabi_d2f+0xde>
 8001b78:	2202      	movs	r2, #2
 8001b7a:	4252      	negs	r2, r2
 8001b7c:	1bd7      	subs	r7, r2, r7
 8001b7e:	001a      	movs	r2, r3
 8001b80:	40fa      	lsrs	r2, r7
 8001b82:	0017      	movs	r7, r2
 8001b84:	2e20      	cmp	r6, #32
 8001b86:	d004      	beq.n	8001b92 <__aeabi_d2f+0xce>
 8001b88:	4a0e      	ldr	r2, [pc, #56]	; (8001bc4 <__aeabi_d2f+0x100>)
 8001b8a:	4694      	mov	ip, r2
 8001b8c:	4464      	add	r4, ip
 8001b8e:	40a3      	lsls	r3, r4
 8001b90:	431d      	orrs	r5, r3
 8001b92:	002b      	movs	r3, r5
 8001b94:	1e5d      	subs	r5, r3, #1
 8001b96:	41ab      	sbcs	r3, r5
 8001b98:	2207      	movs	r2, #7
 8001b9a:	433b      	orrs	r3, r7
 8001b9c:	401a      	ands	r2, r3
 8001b9e:	2700      	movs	r7, #0
 8001ba0:	e7ad      	b.n	8001afe <__aeabi_d2f+0x3a>
 8001ba2:	4a09      	ldr	r2, [pc, #36]	; (8001bc8 <__aeabi_d2f+0x104>)
 8001ba4:	0028      	movs	r0, r5
 8001ba6:	18a2      	adds	r2, r4, r2
 8001ba8:	4095      	lsls	r5, r2
 8001baa:	4093      	lsls	r3, r2
 8001bac:	1e6c      	subs	r4, r5, #1
 8001bae:	41a5      	sbcs	r5, r4
 8001bb0:	40f0      	lsrs	r0, r6
 8001bb2:	2207      	movs	r2, #7
 8001bb4:	432b      	orrs	r3, r5
 8001bb6:	4303      	orrs	r3, r0
 8001bb8:	401a      	ands	r2, r3
 8001bba:	2700      	movs	r7, #0
 8001bbc:	e79f      	b.n	8001afe <__aeabi_d2f+0x3a>
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	fffffc80 	.word	0xfffffc80
 8001bc4:	fffffca2 	.word	0xfffffca2
 8001bc8:	fffffc82 	.word	0xfffffc82

08001bcc <__clzsi2>:
 8001bcc:	211c      	movs	r1, #28
 8001bce:	2301      	movs	r3, #1
 8001bd0:	041b      	lsls	r3, r3, #16
 8001bd2:	4298      	cmp	r0, r3
 8001bd4:	d301      	bcc.n	8001bda <__clzsi2+0xe>
 8001bd6:	0c00      	lsrs	r0, r0, #16
 8001bd8:	3910      	subs	r1, #16
 8001bda:	0a1b      	lsrs	r3, r3, #8
 8001bdc:	4298      	cmp	r0, r3
 8001bde:	d301      	bcc.n	8001be4 <__clzsi2+0x18>
 8001be0:	0a00      	lsrs	r0, r0, #8
 8001be2:	3908      	subs	r1, #8
 8001be4:	091b      	lsrs	r3, r3, #4
 8001be6:	4298      	cmp	r0, r3
 8001be8:	d301      	bcc.n	8001bee <__clzsi2+0x22>
 8001bea:	0900      	lsrs	r0, r0, #4
 8001bec:	3904      	subs	r1, #4
 8001bee:	a202      	add	r2, pc, #8	; (adr r2, 8001bf8 <__clzsi2+0x2c>)
 8001bf0:	5c10      	ldrb	r0, [r2, r0]
 8001bf2:	1840      	adds	r0, r0, r1
 8001bf4:	4770      	bx	lr
 8001bf6:	46c0      	nop			; (mov r8, r8)
 8001bf8:	02020304 	.word	0x02020304
 8001bfc:	01010101 	.word	0x01010101
	...

08001c08 <SPI_DC_LOW>:
static uint16_t bg;				// background color

// ---- lower level functions ----
void SPI_CS_LOW() {HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);}
void SPI_CS_HIGH() {HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);}
void SPI_DC_LOW() {HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);}
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	2380      	movs	r3, #128	; 0x80
 8001c0e:	01db      	lsls	r3, r3, #7
 8001c10:	4803      	ldr	r0, [pc, #12]	; (8001c20 <SPI_DC_LOW+0x18>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	0019      	movs	r1, r3
 8001c16:	f006 f89f 	bl	8007d58 <HAL_GPIO_WritePin>
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	50000400 	.word	0x50000400

08001c24 <SPI_DC_HIGH>:
void SPI_DC_HIGH() {HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);}
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	2380      	movs	r3, #128	; 0x80
 8001c2a:	01db      	lsls	r3, r3, #7
 8001c2c:	4803      	ldr	r0, [pc, #12]	; (8001c3c <SPI_DC_HIGH+0x18>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	0019      	movs	r1, r3
 8001c32:	f006 f891 	bl	8007d58 <HAL_GPIO_WritePin>
 8001c36:	46c0      	nop			; (mov r8, r8)
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	50000400 	.word	0x50000400

08001c40 <sendCommand>:

void sendCommand(uint8_t cmd, uint8_t *args, uint16_t numArgs, SPI_HandleTypeDef *hspi) {
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60b9      	str	r1, [r7, #8]
 8001c48:	0011      	movs	r1, r2
 8001c4a:	607b      	str	r3, [r7, #4]
 8001c4c:	230f      	movs	r3, #15
 8001c4e:	18fb      	adds	r3, r7, r3
 8001c50:	1c02      	adds	r2, r0, #0
 8001c52:	701a      	strb	r2, [r3, #0]
 8001c54:	230c      	movs	r3, #12
 8001c56:	18fb      	adds	r3, r7, r3
 8001c58:	1c0a      	adds	r2, r1, #0
 8001c5a:	801a      	strh	r2, [r3, #0]
	while (HAL_SPI_GetState(hspi) == HAL_SPI_STATE_BUSY_TX);		// block next transfer request while DMA transfer is ongoing
 8001c5c:	46c0      	nop			; (mov r8, r8)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	0018      	movs	r0, r3
 8001c62:	f008 fa43 	bl	800a0ec <HAL_SPI_GetState>
 8001c66:	0003      	movs	r3, r0
 8001c68:	2b03      	cmp	r3, #3
 8001c6a:	d0f8      	beq.n	8001c5e <sendCommand+0x1e>
//	SPI_CS_LOW();	// chip select

	SPI_DC_LOW();	// command mode
 8001c6c:	f7ff ffcc 	bl	8001c08 <SPI_DC_LOW>
	HAL_SPI_Transmit(hspi, &cmd, 1, 1000);	// not using DMA bc it's only 1 byte
 8001c70:	23fa      	movs	r3, #250	; 0xfa
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	220f      	movs	r2, #15
 8001c76:	18b9      	adds	r1, r7, r2
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f007 ff54 	bl	8009b28 <HAL_SPI_Transmit>

	SPI_DC_HIGH();	// data mode
 8001c80:	f7ff ffd0 	bl	8001c24 <SPI_DC_HIGH>
	if (numArgs) {
 8001c84:	230c      	movs	r3, #12
 8001c86:	18fb      	adds	r3, r7, r3
 8001c88:	881b      	ldrh	r3, [r3, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d007      	beq.n	8001c9e <sendCommand+0x5e>
		HAL_SPI_Transmit_IT(hspi, args, numArgs);
 8001c8e:	230c      	movs	r3, #12
 8001c90:	18fb      	adds	r3, r7, r3
 8001c92:	881a      	ldrh	r2, [r3, #0]
 8001c94:	68b9      	ldr	r1, [r7, #8]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	0018      	movs	r0, r3
 8001c9a:	f008 f893 	bl	8009dc4 <HAL_SPI_Transmit_IT>
	}
}
 8001c9e:	46c0      	nop			; (mov r8, r8)
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	b004      	add	sp, #16
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_SPI_TxCpltCallback>:

// using only for sending data, but not commands
// dont send request when transfer is ongoing
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b082      	sub	sp, #8
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
//	if (HAL_GPIO_ReadPin(CS_PORT, CS_PIN) == GPIO_PIN_RESET) SPI_CS_HIGH();	// chip select disable
}
 8001cae:	46c0      	nop			; (mov r8, r8)
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	b002      	add	sp, #8
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <displayInit>:

// array parser heavily based on Adafruit library code
void displayInit(uint8_t *args, SPI_HandleTypeDef *hspi) {
 8001cb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cb8:	b085      	sub	sp, #20
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
 8001cbe:	6039      	str	r1, [r7, #0]
	uint8_t  numCommands, cmd, numArgs;
	uint16_t ms;
	uint8_t index = 0;
 8001cc0:	220b      	movs	r2, #11
 8001cc2:	0011      	movs	r1, r2
 8001cc4:	18bb      	adds	r3, r7, r2
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	701a      	strb	r2, [r3, #0]
	uint8_t data;

	numCommands = args[index++];			// Number of commands to follow
 8001cca:	000a      	movs	r2, r1
 8001ccc:	18bb      	adds	r3, r7, r2
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	18ba      	adds	r2, r7, r2
 8001cd2:	1c59      	adds	r1, r3, #1
 8001cd4:	7011      	strb	r1, [r2, #0]
 8001cd6:	001a      	movs	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	189a      	adds	r2, r3, r2
 8001cdc:	230f      	movs	r3, #15
 8001cde:	18fb      	adds	r3, r7, r3
 8001ce0:	7812      	ldrb	r2, [r2, #0]
 8001ce2:	701a      	strb	r2, [r3, #0]
	while(numCommands--) {					// For each command...
 8001ce4:	e05e      	b.n	8001da4 <displayInit+0xee>
		cmd = args[index++];				// Read command
 8001ce6:	200b      	movs	r0, #11
 8001ce8:	183b      	adds	r3, r7, r0
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	183a      	adds	r2, r7, r0
 8001cee:	1c59      	adds	r1, r3, #1
 8001cf0:	7011      	strb	r1, [r2, #0]
 8001cf2:	001a      	movs	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	189a      	adds	r2, r3, r2
 8001cf8:	230a      	movs	r3, #10
 8001cfa:	18fb      	adds	r3, r7, r3
 8001cfc:	7812      	ldrb	r2, [r2, #0]
 8001cfe:	701a      	strb	r2, [r3, #0]
		numArgs  = args[index++];			// Number of args to follow
 8001d00:	183b      	adds	r3, r7, r0
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	183a      	adds	r2, r7, r0
 8001d06:	1c59      	adds	r1, r3, #1
 8001d08:	7011      	strb	r1, [r2, #0]
 8001d0a:	001a      	movs	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	189a      	adds	r2, r3, r2
 8001d10:	2609      	movs	r6, #9
 8001d12:	19bb      	adds	r3, r7, r6
 8001d14:	7812      	ldrb	r2, [r2, #0]
 8001d16:	701a      	strb	r2, [r3, #0]
		ms       = numArgs & ST_CMD_DELAY;	// If hibit set, delay follows args
 8001d18:	19bb      	adds	r3, r7, r6
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	210c      	movs	r1, #12
 8001d20:	187b      	adds	r3, r7, r1
 8001d22:	2180      	movs	r1, #128	; 0x80
 8001d24:	400a      	ands	r2, r1
 8001d26:	801a      	strh	r2, [r3, #0]
		numArgs &= ~ST_CMD_DELAY;			// Mask out delay bit
 8001d28:	19bb      	adds	r3, r7, r6
 8001d2a:	19ba      	adds	r2, r7, r6
 8001d2c:	7812      	ldrb	r2, [r2, #0]
 8001d2e:	217f      	movs	r1, #127	; 0x7f
 8001d30:	400a      	ands	r2, r1
 8001d32:	701a      	strb	r2, [r3, #0]
		sendCommand(cmd, &args[index], numArgs, hspi);
 8001d34:	0005      	movs	r5, r0
 8001d36:	183b      	adds	r3, r7, r0
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	18d1      	adds	r1, r2, r3
 8001d3e:	19bb      	adds	r3, r7, r6
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	683c      	ldr	r4, [r7, #0]
 8001d46:	230a      	movs	r3, #10
 8001d48:	18fb      	adds	r3, r7, r3
 8001d4a:	7818      	ldrb	r0, [r3, #0]
 8001d4c:	0023      	movs	r3, r4
 8001d4e:	f7ff ff77 	bl	8001c40 <sendCommand>
		index += numArgs;
 8001d52:	0028      	movs	r0, r5
 8001d54:	183b      	adds	r3, r7, r0
 8001d56:	1839      	adds	r1, r7, r0
 8001d58:	19ba      	adds	r2, r7, r6
 8001d5a:	7809      	ldrb	r1, [r1, #0]
 8001d5c:	7812      	ldrb	r2, [r2, #0]
 8001d5e:	188a      	adds	r2, r1, r2
 8001d60:	701a      	strb	r2, [r3, #0]

		if(ms) {
 8001d62:	210c      	movs	r1, #12
 8001d64:	187b      	adds	r3, r7, r1
 8001d66:	881b      	ldrh	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d01b      	beq.n	8001da4 <displayInit+0xee>
			ms = args[index++];			// Read post-command delay time (ms)
 8001d6c:	220b      	movs	r2, #11
 8001d6e:	18bb      	adds	r3, r7, r2
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	18ba      	adds	r2, r7, r2
 8001d74:	1c59      	adds	r1, r3, #1
 8001d76:	7011      	strb	r1, [r2, #0]
 8001d78:	001a      	movs	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	189b      	adds	r3, r3, r2
 8001d7e:	781a      	ldrb	r2, [r3, #0]
 8001d80:	210c      	movs	r1, #12
 8001d82:	187b      	adds	r3, r7, r1
 8001d84:	801a      	strh	r2, [r3, #0]
			if(ms == 255) ms = 500;		// If 255, delay for 500 ms
 8001d86:	187b      	adds	r3, r7, r1
 8001d88:	881b      	ldrh	r3, [r3, #0]
 8001d8a:	2bff      	cmp	r3, #255	; 0xff
 8001d8c:	d104      	bne.n	8001d98 <displayInit+0xe2>
 8001d8e:	230c      	movs	r3, #12
 8001d90:	18fb      	adds	r3, r7, r3
 8001d92:	22fa      	movs	r2, #250	; 0xfa
 8001d94:	0052      	lsls	r2, r2, #1
 8001d96:	801a      	strh	r2, [r3, #0]
			HAL_Delay(ms);
 8001d98:	230c      	movs	r3, #12
 8001d9a:	18fb      	adds	r3, r7, r3
 8001d9c:	881b      	ldrh	r3, [r3, #0]
 8001d9e:	0018      	movs	r0, r3
 8001da0:	f004 ff8a 	bl	8006cb8 <HAL_Delay>
	while(numCommands--) {					// For each command...
 8001da4:	220f      	movs	r2, #15
 8001da6:	18bb      	adds	r3, r7, r2
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	18ba      	adds	r2, r7, r2
 8001dac:	1e59      	subs	r1, r3, #1
 8001dae:	7011      	strb	r1, [r2, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d198      	bne.n	8001ce6 <displayInit+0x30>
		}
	}

	data = 0xC0;
 8001db4:	2108      	movs	r1, #8
 8001db6:	187b      	adds	r3, r7, r1
 8001db8:	22c0      	movs	r2, #192	; 0xc0
 8001dba:	701a      	strb	r2, [r3, #0]
	sendCommand(ST77XX_MADCTL, &data, 1, hspi);
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	1879      	adds	r1, r7, r1
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	2036      	movs	r0, #54	; 0x36
 8001dc4:	f7ff ff3c 	bl	8001c40 <sendCommand>
}
 8001dc8:	46c0      	nop			; (mov r8, r8)
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	b005      	add	sp, #20
 8001dce:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001dd0 <TFT_startup>:

void TFT_startup(SPI_HandleTypeDef *hspi) {
 8001dd0:	b590      	push	{r4, r7, lr}
 8001dd2:	b0a3      	sub	sp, #140	; 0x8c
 8001dd4:	af02      	add	r7, sp, #8
 8001dd6:	6078      	str	r0, [r7, #4]
	// array pulled from Adafruit's library for ST7735R driver
	uint8_t initCommands[] = {
 8001dd8:	240c      	movs	r4, #12
 8001dda:	193a      	adds	r2, r7, r4
 8001ddc:	4b14      	ldr	r3, [pc, #80]	; (8001e30 <TFT_startup+0x60>)
 8001dde:	0010      	movs	r0, r2
 8001de0:	0019      	movs	r1, r3
 8001de2:	2371      	movs	r3, #113	; 0x71
 8001de4:	001a      	movs	r2, r3
 8001de6:	f009 facd 	bl	800b384 <memcpy>
			10,                         //     10 ms delay
		ST77XX_DISPON,    ST_CMD_DELAY, //  4: Main screen turn on, no args w/delay
			100	                        //     100 ms delay
	};

	displayInit(initCommands, hspi);
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	193b      	adds	r3, r7, r4
 8001dee:	0011      	movs	r1, r2
 8001df0:	0018      	movs	r0, r3
 8001df2:	f7ff ff60 	bl	8001cb6 <displayInit>
	setAddrWindow(0, 0, WIDTH, HEIGHT, hspi);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	9300      	str	r3, [sp, #0]
 8001dfa:	23a0      	movs	r3, #160	; 0xa0
 8001dfc:	2280      	movs	r2, #128	; 0x80
 8001dfe:	2100      	movs	r1, #0
 8001e00:	2000      	movs	r0, #0
 8001e02:	f000 f821 	bl	8001e48 <setAddrWindow>

	// set the global variables
	cursorX = 0;
 8001e06:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <TFT_startup+0x64>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	701a      	strb	r2, [r3, #0]
	cursorY = 0;
 8001e0c:	4b0a      	ldr	r3, [pc, #40]	; (8001e38 <TFT_startup+0x68>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	701a      	strb	r2, [r3, #0]
	textSize = 1;
 8001e12:	4b0a      	ldr	r3, [pc, #40]	; (8001e3c <TFT_startup+0x6c>)
 8001e14:	2201      	movs	r2, #1
 8001e16:	701a      	strb	r2, [r3, #0]
	textColor = ST77XX_BLACK;
 8001e18:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <TFT_startup+0x70>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	801a      	strh	r2, [r3, #0]
	bg = ST77XX_WHITE;
 8001e1e:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <TFT_startup+0x74>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	4252      	negs	r2, r2
 8001e24:	801a      	strh	r2, [r3, #0]
}
 8001e26:	46c0      	nop			; (mov r8, r8)
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	b021      	add	sp, #132	; 0x84
 8001e2c:	bd90      	pop	{r4, r7, pc}
 8001e2e:	46c0      	nop			; (mov r8, r8)
 8001e30:	0800bbd8 	.word	0x0800bbd8
 8001e34:	200000ec 	.word	0x200000ec
 8001e38:	200000ed 	.word	0x200000ed
 8001e3c:	200000ee 	.word	0x200000ee
 8001e40:	200000f0 	.word	0x200000f0
 8001e44:	200000f2 	.word	0x200000f2

08001e48 <setAddrWindow>:

// draw something: set addr window -> write to ram memory
// sets specific area on display to write pixels to
// x and y for upper left corner, w for width, h for height
void setAddrWindow(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SPI_HandleTypeDef *hspi) {
 8001e48:	b5b0      	push	{r4, r5, r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	0005      	movs	r5, r0
 8001e50:	000c      	movs	r4, r1
 8001e52:	0010      	movs	r0, r2
 8001e54:	0019      	movs	r1, r3
 8001e56:	1dbb      	adds	r3, r7, #6
 8001e58:	1c2a      	adds	r2, r5, #0
 8001e5a:	801a      	strh	r2, [r3, #0]
 8001e5c:	1d3b      	adds	r3, r7, #4
 8001e5e:	1c22      	adds	r2, r4, #0
 8001e60:	801a      	strh	r2, [r3, #0]
 8001e62:	1cbb      	adds	r3, r7, #2
 8001e64:	1c02      	adds	r2, r0, #0
 8001e66:	801a      	strh	r2, [r3, #0]
 8001e68:	003b      	movs	r3, r7
 8001e6a:	1c0a      	adds	r2, r1, #0
 8001e6c:	801a      	strh	r2, [r3, #0]
	// building 32-bit window args
	uint8_t temp[4];
	temp[0] = (x & (0xFF00)) >> 8;
 8001e6e:	1dbb      	adds	r3, r7, #6
 8001e70:	881b      	ldrh	r3, [r3, #0]
 8001e72:	0a1b      	lsrs	r3, r3, #8
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	210c      	movs	r1, #12
 8001e7a:	187b      	adds	r3, r7, r1
 8001e7c:	701a      	strb	r2, [r3, #0]
	temp[1] = x & (0xFF);
 8001e7e:	1dbb      	adds	r3, r7, #6
 8001e80:	881b      	ldrh	r3, [r3, #0]
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	187b      	adds	r3, r7, r1
 8001e86:	705a      	strb	r2, [r3, #1]
	temp[2] = ((x+w-1) & (0xFF00)) >> 8;
 8001e88:	1dbb      	adds	r3, r7, #6
 8001e8a:	881a      	ldrh	r2, [r3, #0]
 8001e8c:	1cbb      	adds	r3, r7, #2
 8001e8e:	881b      	ldrh	r3, [r3, #0]
 8001e90:	18d3      	adds	r3, r2, r3
 8001e92:	3b01      	subs	r3, #1
 8001e94:	121b      	asrs	r3, r3, #8
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	187b      	adds	r3, r7, r1
 8001e9a:	709a      	strb	r2, [r3, #2]
	temp[3] = (x+w-1) & (0xFF);
 8001e9c:	1dbb      	adds	r3, r7, #6
 8001e9e:	881b      	ldrh	r3, [r3, #0]
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	1cbb      	adds	r3, r7, #2
 8001ea4:	881b      	ldrh	r3, [r3, #0]
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	18d3      	adds	r3, r2, r3
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	3b01      	subs	r3, #1
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	187b      	adds	r3, r7, r1
 8001eb2:	70da      	strb	r2, [r3, #3]
	sendCommand(ST77XX_CASET, temp, 4, hspi);
 8001eb4:	6a3b      	ldr	r3, [r7, #32]
 8001eb6:	000c      	movs	r4, r1
 8001eb8:	1879      	adds	r1, r7, r1
 8001eba:	2204      	movs	r2, #4
 8001ebc:	202a      	movs	r0, #42	; 0x2a
 8001ebe:	f7ff febf 	bl	8001c40 <sendCommand>

	temp[0] = (y & (0xFF00)) >> 8;
 8001ec2:	1d3b      	adds	r3, r7, #4
 8001ec4:	881b      	ldrh	r3, [r3, #0]
 8001ec6:	0a1b      	lsrs	r3, r3, #8
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	0021      	movs	r1, r4
 8001ece:	187b      	adds	r3, r7, r1
 8001ed0:	701a      	strb	r2, [r3, #0]
	temp[1] = y & (0xFF);
 8001ed2:	1d3b      	adds	r3, r7, #4
 8001ed4:	881b      	ldrh	r3, [r3, #0]
 8001ed6:	b2da      	uxtb	r2, r3
 8001ed8:	187b      	adds	r3, r7, r1
 8001eda:	705a      	strb	r2, [r3, #1]
	temp[2] = ((y+h-1) & (0xFF00)) >> 8;
 8001edc:	1d3b      	adds	r3, r7, #4
 8001ede:	881a      	ldrh	r2, [r3, #0]
 8001ee0:	003b      	movs	r3, r7
 8001ee2:	881b      	ldrh	r3, [r3, #0]
 8001ee4:	18d3      	adds	r3, r2, r3
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	121b      	asrs	r3, r3, #8
 8001eea:	b2da      	uxtb	r2, r3
 8001eec:	187b      	adds	r3, r7, r1
 8001eee:	709a      	strb	r2, [r3, #2]
	temp[3] = (y+h-1) & (0x00FF);
 8001ef0:	1d3b      	adds	r3, r7, #4
 8001ef2:	881b      	ldrh	r3, [r3, #0]
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	003b      	movs	r3, r7
 8001ef8:	881b      	ldrh	r3, [r3, #0]
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	18d3      	adds	r3, r2, r3
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	3b01      	subs	r3, #1
 8001f02:	b2da      	uxtb	r2, r3
 8001f04:	187b      	adds	r3, r7, r1
 8001f06:	70da      	strb	r2, [r3, #3]
	sendCommand(ST77XX_RASET, temp, 4, hspi);
 8001f08:	6a3b      	ldr	r3, [r7, #32]
 8001f0a:	1879      	adds	r1, r7, r1
 8001f0c:	2204      	movs	r2, #4
 8001f0e:	202b      	movs	r0, #43	; 0x2b
 8001f10:	f7ff fe96 	bl	8001c40 <sendCommand>
}
 8001f14:	46c0      	nop			; (mov r8, r8)
 8001f16:	46bd      	mov	sp, r7
 8001f18:	b004      	add	sp, #16
 8001f1a:	bdb0      	pop	{r4, r5, r7, pc}

08001f1c <colorFixer>:
// 8-bit spi bus wants msb first; in array, lowest index is sent first
// because ARM is little-endian
//   for 16-bit value, it sends lower byte before upper byte
//   resulting in device thinking lower byte is upper byte
// this switches byte order around
uint16_t colorFixer(uint16_t color) {
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	0002      	movs	r2, r0
 8001f24:	1dbb      	adds	r3, r7, #6
 8001f26:	801a      	strh	r2, [r3, #0]
	uint8_t a = color & 0xFF;
 8001f28:	210f      	movs	r1, #15
 8001f2a:	187b      	adds	r3, r7, r1
 8001f2c:	1dba      	adds	r2, r7, #6
 8001f2e:	8812      	ldrh	r2, [r2, #0]
 8001f30:	701a      	strb	r2, [r3, #0]
	uint8_t b = (color & 0xFF00) >> 8;
 8001f32:	1dbb      	adds	r3, r7, #6
 8001f34:	881b      	ldrh	r3, [r3, #0]
 8001f36:	0a1b      	lsrs	r3, r3, #8
 8001f38:	b29a      	uxth	r2, r3
 8001f3a:	200e      	movs	r0, #14
 8001f3c:	183b      	adds	r3, r7, r0
 8001f3e:	701a      	strb	r2, [r3, #0]
	uint16_t ret = (a << 8) | b;
 8001f40:	187b      	adds	r3, r7, r1
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	021b      	lsls	r3, r3, #8
 8001f46:	b21a      	sxth	r2, r3
 8001f48:	183b      	adds	r3, r7, r0
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	b21b      	sxth	r3, r3
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	b21a      	sxth	r2, r3
 8001f52:	210c      	movs	r1, #12
 8001f54:	187b      	adds	r3, r7, r1
 8001f56:	801a      	strh	r2, [r3, #0]

	return ret;
 8001f58:	187b      	adds	r3, r7, r1
 8001f5a:	881b      	ldrh	r3, [r3, #0]
}
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	b004      	add	sp, #16
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <drawHLine>:
	uint16_t tempColor = colorFixer(color);		// else we're using address of something passed by value
	sendCommand(ST77XX_RAMWR, &tempColor, 2, hspi);
}

// draw a horizontal line. coordinates are for left point
void drawHLine(uint8_t x, uint8_t y, uint8_t size, uint16_t color, SPI_HandleTypeDef *hspi) {
 8001f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f66:	b091      	sub	sp, #68	; 0x44
 8001f68:	af02      	add	r7, sp, #8
 8001f6a:	000c      	movs	r4, r1
 8001f6c:	0016      	movs	r6, r2
 8001f6e:	0019      	movs	r1, r3
 8001f70:	2327      	movs	r3, #39	; 0x27
 8001f72:	18fa      	adds	r2, r7, r3
 8001f74:	1c03      	adds	r3, r0, #0
 8001f76:	7013      	strb	r3, [r2, #0]
 8001f78:	2326      	movs	r3, #38	; 0x26
 8001f7a:	18fb      	adds	r3, r7, r3
 8001f7c:	1c22      	adds	r2, r4, #0
 8001f7e:	701a      	strb	r2, [r3, #0]
 8001f80:	2325      	movs	r3, #37	; 0x25
 8001f82:	18fb      	adds	r3, r7, r3
 8001f84:	1c32      	adds	r2, r6, #0
 8001f86:	701a      	strb	r2, [r3, #0]
 8001f88:	2322      	movs	r3, #34	; 0x22
 8001f8a:	18fb      	adds	r3, r7, r3
 8001f8c:	1c0a      	adds	r2, r1, #0
 8001f8e:	801a      	strh	r2, [r3, #0]
 8001f90:	466b      	mov	r3, sp
 8001f92:	001e      	movs	r6, r3
	// bounds checking
	if (x < 0) x = 0;						// don't set x out of bounds
	if (x > WIDTH) x = WIDTH;
 8001f94:	2327      	movs	r3, #39	; 0x27
 8001f96:	18fb      	adds	r3, r7, r3
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b80      	cmp	r3, #128	; 0x80
 8001f9c:	d903      	bls.n	8001fa6 <drawHLine+0x42>
 8001f9e:	2327      	movs	r3, #39	; 0x27
 8001fa0:	18fb      	adds	r3, r7, r3
 8001fa2:	2280      	movs	r2, #128	; 0x80
 8001fa4:	701a      	strb	r2, [r3, #0]
	if (x+size > WIDTH) size = WIDTH-x;		// don't set size so line draws out of bounds
 8001fa6:	2327      	movs	r3, #39	; 0x27
 8001fa8:	18fb      	adds	r3, r7, r3
 8001faa:	781a      	ldrb	r2, [r3, #0]
 8001fac:	2325      	movs	r3, #37	; 0x25
 8001fae:	18fb      	adds	r3, r7, r3
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	18d3      	adds	r3, r2, r3
 8001fb4:	2b80      	cmp	r3, #128	; 0x80
 8001fb6:	dd08      	ble.n	8001fca <drawHLine+0x66>
 8001fb8:	2325      	movs	r3, #37	; 0x25
 8001fba:	18fb      	adds	r3, r7, r3
 8001fbc:	2227      	movs	r2, #39	; 0x27
 8001fbe:	18ba      	adds	r2, r7, r2
 8001fc0:	7812      	ldrb	r2, [r2, #0]
 8001fc2:	2180      	movs	r1, #128	; 0x80
 8001fc4:	4249      	negs	r1, r1
 8001fc6:	1a8a      	subs	r2, r1, r2
 8001fc8:	701a      	strb	r2, [r3, #0]
	if (x+size < 0) size = 0-x;
	if ((y > HEIGHT) || (y < 0)) return;	// don't draw if y is out of bounds
 8001fca:	2326      	movs	r3, #38	; 0x26
 8001fcc:	18fb      	adds	r3, r7, r3
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2ba0      	cmp	r3, #160	; 0xa0
 8001fd2:	d868      	bhi.n	80020a6 <drawHLine+0x142>

	setAddrWindow(x, y, size, 1, hspi);
 8001fd4:	2327      	movs	r3, #39	; 0x27
 8001fd6:	18fb      	adds	r3, r7, r3
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	b298      	uxth	r0, r3
 8001fdc:	2326      	movs	r3, #38	; 0x26
 8001fde:	18fb      	adds	r3, r7, r3
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	b299      	uxth	r1, r3
 8001fe4:	2325      	movs	r3, #37	; 0x25
 8001fe6:	18fb      	adds	r3, r7, r3
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	f7ff ff29 	bl	8001e48 <setAddrWindow>
	uint16_t colors[size];
 8001ff6:	2325      	movs	r3, #37	; 0x25
 8001ff8:	18fb      	adds	r3, r7, r3
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	001a      	movs	r2, r3
 8001ffe:	3a01      	subs	r2, #1
 8002000:	633a      	str	r2, [r7, #48]	; 0x30
 8002002:	60bb      	str	r3, [r7, #8]
 8002004:	2200      	movs	r2, #0
 8002006:	60fa      	str	r2, [r7, #12]
 8002008:	68b8      	ldr	r0, [r7, #8]
 800200a:	68f9      	ldr	r1, [r7, #12]
 800200c:	0002      	movs	r2, r0
 800200e:	0f12      	lsrs	r2, r2, #28
 8002010:	000c      	movs	r4, r1
 8002012:	0124      	lsls	r4, r4, #4
 8002014:	61fc      	str	r4, [r7, #28]
 8002016:	69fc      	ldr	r4, [r7, #28]
 8002018:	4314      	orrs	r4, r2
 800201a:	61fc      	str	r4, [r7, #28]
 800201c:	0002      	movs	r2, r0
 800201e:	0112      	lsls	r2, r2, #4
 8002020:	61ba      	str	r2, [r7, #24]
 8002022:	603b      	str	r3, [r7, #0]
 8002024:	2200      	movs	r2, #0
 8002026:	607a      	str	r2, [r7, #4]
 8002028:	6838      	ldr	r0, [r7, #0]
 800202a:	6879      	ldr	r1, [r7, #4]
 800202c:	0002      	movs	r2, r0
 800202e:	0f12      	lsrs	r2, r2, #28
 8002030:	000c      	movs	r4, r1
 8002032:	0124      	lsls	r4, r4, #4
 8002034:	617c      	str	r4, [r7, #20]
 8002036:	697c      	ldr	r4, [r7, #20]
 8002038:	4314      	orrs	r4, r2
 800203a:	617c      	str	r4, [r7, #20]
 800203c:	0002      	movs	r2, r0
 800203e:	0112      	lsls	r2, r2, #4
 8002040:	613a      	str	r2, [r7, #16]
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	3301      	adds	r3, #1
 8002046:	3307      	adds	r3, #7
 8002048:	08db      	lsrs	r3, r3, #3
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	466a      	mov	r2, sp
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	469d      	mov	sp, r3
 8002052:	ab02      	add	r3, sp, #8
 8002054:	3301      	adds	r3, #1
 8002056:	085b      	lsrs	r3, r3, #1
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i < size; i++) {
 800205c:	2300      	movs	r3, #0
 800205e:	637b      	str	r3, [r7, #52]	; 0x34
 8002060:	e00e      	b.n	8002080 <drawHLine+0x11c>
		colors[i] = colorFixer(color);
 8002062:	2322      	movs	r3, #34	; 0x22
 8002064:	18fb      	adds	r3, r7, r3
 8002066:	881b      	ldrh	r3, [r3, #0]
 8002068:	0018      	movs	r0, r3
 800206a:	f7ff ff57 	bl	8001f1c <colorFixer>
 800206e:	0003      	movs	r3, r0
 8002070:	0019      	movs	r1, r3
 8002072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002074:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002076:	0052      	lsls	r2, r2, #1
 8002078:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < size; i++) {
 800207a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800207c:	3301      	adds	r3, #1
 800207e:	637b      	str	r3, [r7, #52]	; 0x34
 8002080:	2325      	movs	r3, #37	; 0x25
 8002082:	18fb      	adds	r3, r7, r3
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002088:	429a      	cmp	r2, r3
 800208a:	dbea      	blt.n	8002062 <drawHLine+0xfe>
	}

	sendCommand(ST77XX_RAMWR, colors, size*2, hspi);
 800208c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800208e:	2325      	movs	r3, #37	; 0x25
 8002090:	18fb      	adds	r3, r7, r3
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	b29b      	uxth	r3, r3
 8002096:	18db      	adds	r3, r3, r3
 8002098:	b29a      	uxth	r2, r3
 800209a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800209c:	202c      	movs	r0, #44	; 0x2c
 800209e:	f7ff fdcf 	bl	8001c40 <sendCommand>
 80020a2:	46b5      	mov	sp, r6
 80020a4:	e001      	b.n	80020aa <drawHLine+0x146>
	if ((y > HEIGHT) || (y < 0)) return;	// don't draw if y is out of bounds
 80020a6:	46c0      	nop			; (mov r8, r8)
 80020a8:	46b5      	mov	sp, r6
}
 80020aa:	46bd      	mov	sp, r7
 80020ac:	b00f      	add	sp, #60	; 0x3c
 80020ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020b0 <drawVLine>:

// draws a vertical line. coordinates are for top point
void drawVLine(uint8_t x, uint8_t y, uint8_t size, uint16_t color, SPI_HandleTypeDef *hspi) {
 80020b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020b2:	b091      	sub	sp, #68	; 0x44
 80020b4:	af02      	add	r7, sp, #8
 80020b6:	000c      	movs	r4, r1
 80020b8:	0016      	movs	r6, r2
 80020ba:	0019      	movs	r1, r3
 80020bc:	2327      	movs	r3, #39	; 0x27
 80020be:	18fa      	adds	r2, r7, r3
 80020c0:	1c03      	adds	r3, r0, #0
 80020c2:	7013      	strb	r3, [r2, #0]
 80020c4:	2326      	movs	r3, #38	; 0x26
 80020c6:	18fb      	adds	r3, r7, r3
 80020c8:	1c22      	adds	r2, r4, #0
 80020ca:	701a      	strb	r2, [r3, #0]
 80020cc:	2325      	movs	r3, #37	; 0x25
 80020ce:	18fb      	adds	r3, r7, r3
 80020d0:	1c32      	adds	r2, r6, #0
 80020d2:	701a      	strb	r2, [r3, #0]
 80020d4:	2322      	movs	r3, #34	; 0x22
 80020d6:	18fb      	adds	r3, r7, r3
 80020d8:	1c0a      	adds	r2, r1, #0
 80020da:	801a      	strh	r2, [r3, #0]
 80020dc:	466b      	mov	r3, sp
 80020de:	001e      	movs	r6, r3
	// bounds checking
	if (y < 0) y = 0;						// don't set y out of bounds
	if (y > HEIGHT) y = HEIGHT;
 80020e0:	2326      	movs	r3, #38	; 0x26
 80020e2:	18fb      	adds	r3, r7, r3
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2ba0      	cmp	r3, #160	; 0xa0
 80020e8:	d903      	bls.n	80020f2 <drawVLine+0x42>
 80020ea:	2326      	movs	r3, #38	; 0x26
 80020ec:	18fb      	adds	r3, r7, r3
 80020ee:	22a0      	movs	r2, #160	; 0xa0
 80020f0:	701a      	strb	r2, [r3, #0]
	if (y+size > HEIGHT) size = HEIGHT-y;	// don't set size so line draws out of bounds
 80020f2:	2326      	movs	r3, #38	; 0x26
 80020f4:	18fb      	adds	r3, r7, r3
 80020f6:	781a      	ldrb	r2, [r3, #0]
 80020f8:	2325      	movs	r3, #37	; 0x25
 80020fa:	18fb      	adds	r3, r7, r3
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	18d3      	adds	r3, r2, r3
 8002100:	2ba0      	cmp	r3, #160	; 0xa0
 8002102:	dd08      	ble.n	8002116 <drawVLine+0x66>
 8002104:	2325      	movs	r3, #37	; 0x25
 8002106:	18fb      	adds	r3, r7, r3
 8002108:	2226      	movs	r2, #38	; 0x26
 800210a:	18ba      	adds	r2, r7, r2
 800210c:	7812      	ldrb	r2, [r2, #0]
 800210e:	2160      	movs	r1, #96	; 0x60
 8002110:	4249      	negs	r1, r1
 8002112:	1a8a      	subs	r2, r1, r2
 8002114:	701a      	strb	r2, [r3, #0]
	if (y+size < 0) size = 0-y;
	if ((x > WIDTH) || (x < 0)) return;		// don't draw if x is out of bounds
 8002116:	2327      	movs	r3, #39	; 0x27
 8002118:	18fb      	adds	r3, r7, r3
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	2b80      	cmp	r3, #128	; 0x80
 800211e:	d869      	bhi.n	80021f4 <drawVLine+0x144>

	setAddrWindow(x, y, 1, size, hspi);
 8002120:	2327      	movs	r3, #39	; 0x27
 8002122:	18fb      	adds	r3, r7, r3
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	b298      	uxth	r0, r3
 8002128:	2326      	movs	r3, #38	; 0x26
 800212a:	18fb      	adds	r3, r7, r3
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	b299      	uxth	r1, r3
 8002130:	2325      	movs	r3, #37	; 0x25
 8002132:	18fb      	adds	r3, r7, r3
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	b29a      	uxth	r2, r3
 8002138:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	0013      	movs	r3, r2
 800213e:	2201      	movs	r2, #1
 8002140:	f7ff fe82 	bl	8001e48 <setAddrWindow>
	uint16_t colors[size];
 8002144:	2325      	movs	r3, #37	; 0x25
 8002146:	18fb      	adds	r3, r7, r3
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	001a      	movs	r2, r3
 800214c:	3a01      	subs	r2, #1
 800214e:	633a      	str	r2, [r7, #48]	; 0x30
 8002150:	60bb      	str	r3, [r7, #8]
 8002152:	2200      	movs	r2, #0
 8002154:	60fa      	str	r2, [r7, #12]
 8002156:	68b8      	ldr	r0, [r7, #8]
 8002158:	68f9      	ldr	r1, [r7, #12]
 800215a:	0002      	movs	r2, r0
 800215c:	0f12      	lsrs	r2, r2, #28
 800215e:	000c      	movs	r4, r1
 8002160:	0124      	lsls	r4, r4, #4
 8002162:	61fc      	str	r4, [r7, #28]
 8002164:	69fc      	ldr	r4, [r7, #28]
 8002166:	4314      	orrs	r4, r2
 8002168:	61fc      	str	r4, [r7, #28]
 800216a:	0002      	movs	r2, r0
 800216c:	0112      	lsls	r2, r2, #4
 800216e:	61ba      	str	r2, [r7, #24]
 8002170:	603b      	str	r3, [r7, #0]
 8002172:	2200      	movs	r2, #0
 8002174:	607a      	str	r2, [r7, #4]
 8002176:	6838      	ldr	r0, [r7, #0]
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	0002      	movs	r2, r0
 800217c:	0f12      	lsrs	r2, r2, #28
 800217e:	000c      	movs	r4, r1
 8002180:	0124      	lsls	r4, r4, #4
 8002182:	617c      	str	r4, [r7, #20]
 8002184:	697c      	ldr	r4, [r7, #20]
 8002186:	4314      	orrs	r4, r2
 8002188:	617c      	str	r4, [r7, #20]
 800218a:	0002      	movs	r2, r0
 800218c:	0112      	lsls	r2, r2, #4
 800218e:	613a      	str	r2, [r7, #16]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	3301      	adds	r3, #1
 8002194:	3307      	adds	r3, #7
 8002196:	08db      	lsrs	r3, r3, #3
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	466a      	mov	r2, sp
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	469d      	mov	sp, r3
 80021a0:	ab02      	add	r3, sp, #8
 80021a2:	3301      	adds	r3, #1
 80021a4:	085b      	lsrs	r3, r3, #1
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i < size; i++) {
 80021aa:	2300      	movs	r3, #0
 80021ac:	637b      	str	r3, [r7, #52]	; 0x34
 80021ae:	e00e      	b.n	80021ce <drawVLine+0x11e>
		colors[i] = colorFixer(color);
 80021b0:	2322      	movs	r3, #34	; 0x22
 80021b2:	18fb      	adds	r3, r7, r3
 80021b4:	881b      	ldrh	r3, [r3, #0]
 80021b6:	0018      	movs	r0, r3
 80021b8:	f7ff feb0 	bl	8001f1c <colorFixer>
 80021bc:	0003      	movs	r3, r0
 80021be:	0019      	movs	r1, r3
 80021c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021c4:	0052      	lsls	r2, r2, #1
 80021c6:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < size; i++) {
 80021c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ca:	3301      	adds	r3, #1
 80021cc:	637b      	str	r3, [r7, #52]	; 0x34
 80021ce:	2325      	movs	r3, #37	; 0x25
 80021d0:	18fb      	adds	r3, r7, r3
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021d6:	429a      	cmp	r2, r3
 80021d8:	dbea      	blt.n	80021b0 <drawVLine+0x100>
	}

	sendCommand(ST77XX_RAMWR, colors, size*2, hspi);
 80021da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80021dc:	2325      	movs	r3, #37	; 0x25
 80021de:	18fb      	adds	r3, r7, r3
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	18db      	adds	r3, r3, r3
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021ea:	202c      	movs	r0, #44	; 0x2c
 80021ec:	f7ff fd28 	bl	8001c40 <sendCommand>
 80021f0:	46b5      	mov	sp, r6
 80021f2:	e001      	b.n	80021f8 <drawVLine+0x148>
	if ((x > WIDTH) || (x < 0)) return;		// don't draw if x is out of bounds
 80021f4:	46c0      	nop			; (mov r8, r8)
 80021f6:	46b5      	mov	sp, r6
}
 80021f8:	46bd      	mov	sp, r7
 80021fa:	b00f      	add	sp, #60	; 0x3c
 80021fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021fe <drawBuffer>:

// draws on a specific region with input 16-bit buffer
void drawBuffer(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t *buffer, uint16_t bufferSize, SPI_HandleTypeDef *hspi) {
 80021fe:	b5b0      	push	{r4, r5, r7, lr}
 8002200:	b084      	sub	sp, #16
 8002202:	af02      	add	r7, sp, #8
 8002204:	0005      	movs	r5, r0
 8002206:	000c      	movs	r4, r1
 8002208:	0010      	movs	r0, r2
 800220a:	0019      	movs	r1, r3
 800220c:	1dfb      	adds	r3, r7, #7
 800220e:	1c2a      	adds	r2, r5, #0
 8002210:	701a      	strb	r2, [r3, #0]
 8002212:	1dbb      	adds	r3, r7, #6
 8002214:	1c22      	adds	r2, r4, #0
 8002216:	701a      	strb	r2, [r3, #0]
 8002218:	1d7b      	adds	r3, r7, #5
 800221a:	1c02      	adds	r2, r0, #0
 800221c:	701a      	strb	r2, [r3, #0]
 800221e:	1d3b      	adds	r3, r7, #4
 8002220:	1c0a      	adds	r2, r1, #0
 8002222:	701a      	strb	r2, [r3, #0]
	if (x+w > WIDTH || y+h > HEIGHT) return;
 8002224:	1dfb      	adds	r3, r7, #7
 8002226:	781a      	ldrb	r2, [r3, #0]
 8002228:	1d7b      	adds	r3, r7, #5
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	18d3      	adds	r3, r2, r3
 800222e:	2b80      	cmp	r3, #128	; 0x80
 8002230:	dc29      	bgt.n	8002286 <drawBuffer+0x88>
 8002232:	1dbb      	adds	r3, r7, #6
 8002234:	781a      	ldrb	r2, [r3, #0]
 8002236:	1d3b      	adds	r3, r7, #4
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	18d3      	adds	r3, r2, r3
 800223c:	2ba0      	cmp	r3, #160	; 0xa0
 800223e:	dc22      	bgt.n	8002286 <drawBuffer+0x88>

	// also don't call this with buffer size too big bc there's not enough ram for all pixels of display
	if (bufferSize > 10240) return;			// about 1/2 of total system ram
 8002240:	231c      	movs	r3, #28
 8002242:	18fb      	adds	r3, r7, r3
 8002244:	881a      	ldrh	r2, [r3, #0]
 8002246:	23a0      	movs	r3, #160	; 0xa0
 8002248:	019b      	lsls	r3, r3, #6
 800224a:	429a      	cmp	r2, r3
 800224c:	d81d      	bhi.n	800228a <drawBuffer+0x8c>

	setAddrWindow(x, y, w, h, hspi);
 800224e:	1dfb      	adds	r3, r7, #7
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	b298      	uxth	r0, r3
 8002254:	1dbb      	adds	r3, r7, #6
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	b299      	uxth	r1, r3
 800225a:	1d7b      	adds	r3, r7, #5
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	b29a      	uxth	r2, r3
 8002260:	1d3b      	adds	r3, r7, #4
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	b29c      	uxth	r4, r3
 8002266:	6a3b      	ldr	r3, [r7, #32]
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	0023      	movs	r3, r4
 800226c:	f7ff fdec 	bl	8001e48 <setAddrWindow>
	sendCommand(ST77XX_RAMWR, buffer, bufferSize*2, hspi);
 8002270:	231c      	movs	r3, #28
 8002272:	18fb      	adds	r3, r7, r3
 8002274:	881b      	ldrh	r3, [r3, #0]
 8002276:	18db      	adds	r3, r3, r3
 8002278:	b29a      	uxth	r2, r3
 800227a:	6a3b      	ldr	r3, [r7, #32]
 800227c:	69b9      	ldr	r1, [r7, #24]
 800227e:	202c      	movs	r0, #44	; 0x2c
 8002280:	f7ff fcde 	bl	8001c40 <sendCommand>
 8002284:	e002      	b.n	800228c <drawBuffer+0x8e>
	if (x+w > WIDTH || y+h > HEIGHT) return;
 8002286:	46c0      	nop			; (mov r8, r8)
 8002288:	e000      	b.n	800228c <drawBuffer+0x8e>
	if (bufferSize > 10240) return;			// about 1/2 of total system ram
 800228a:	46c0      	nop			; (mov r8, r8)
}
 800228c:	46bd      	mov	sp, r7
 800228e:	b002      	add	sp, #8
 8002290:	bdb0      	pop	{r4, r5, r7, pc}

08002292 <drawRect>:
		}
	}
}

// draw an empty rectangle
void drawRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t color, SPI_HandleTypeDef *hspi) {
 8002292:	b5b0      	push	{r4, r5, r7, lr}
 8002294:	b084      	sub	sp, #16
 8002296:	af02      	add	r7, sp, #8
 8002298:	0005      	movs	r5, r0
 800229a:	000c      	movs	r4, r1
 800229c:	0010      	movs	r0, r2
 800229e:	0019      	movs	r1, r3
 80022a0:	1dfb      	adds	r3, r7, #7
 80022a2:	1c2a      	adds	r2, r5, #0
 80022a4:	701a      	strb	r2, [r3, #0]
 80022a6:	1dbb      	adds	r3, r7, #6
 80022a8:	1c22      	adds	r2, r4, #0
 80022aa:	701a      	strb	r2, [r3, #0]
 80022ac:	1d7b      	adds	r3, r7, #5
 80022ae:	1c02      	adds	r2, r0, #0
 80022b0:	701a      	strb	r2, [r3, #0]
 80022b2:	1d3b      	adds	r3, r7, #4
 80022b4:	1c0a      	adds	r2, r1, #0
 80022b6:	701a      	strb	r2, [r3, #0]
	drawHLine(x, y, w, color, hspi);
 80022b8:	2518      	movs	r5, #24
 80022ba:	197b      	adds	r3, r7, r5
 80022bc:	881c      	ldrh	r4, [r3, #0]
 80022be:	1d7b      	adds	r3, r7, #5
 80022c0:	781a      	ldrb	r2, [r3, #0]
 80022c2:	1dbb      	adds	r3, r7, #6
 80022c4:	7819      	ldrb	r1, [r3, #0]
 80022c6:	1dfb      	adds	r3, r7, #7
 80022c8:	7818      	ldrb	r0, [r3, #0]
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	0023      	movs	r3, r4
 80022d0:	f7ff fe48 	bl	8001f64 <drawHLine>
	drawHLine(x, y+h-1, w, color, hspi);
 80022d4:	1dba      	adds	r2, r7, #6
 80022d6:	1d3b      	adds	r3, r7, #4
 80022d8:	7812      	ldrb	r2, [r2, #0]
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	18d3      	adds	r3, r2, r3
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	3b01      	subs	r3, #1
 80022e2:	b2d9      	uxtb	r1, r3
 80022e4:	197b      	adds	r3, r7, r5
 80022e6:	881c      	ldrh	r4, [r3, #0]
 80022e8:	1d7b      	adds	r3, r7, #5
 80022ea:	781a      	ldrb	r2, [r3, #0]
 80022ec:	1dfb      	adds	r3, r7, #7
 80022ee:	7818      	ldrb	r0, [r3, #0]
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	0023      	movs	r3, r4
 80022f6:	f7ff fe35 	bl	8001f64 <drawHLine>
	drawVLine(x, y, h, color, hspi);
 80022fa:	197b      	adds	r3, r7, r5
 80022fc:	881c      	ldrh	r4, [r3, #0]
 80022fe:	1d3b      	adds	r3, r7, #4
 8002300:	781a      	ldrb	r2, [r3, #0]
 8002302:	1dbb      	adds	r3, r7, #6
 8002304:	7819      	ldrb	r1, [r3, #0]
 8002306:	1dfb      	adds	r3, r7, #7
 8002308:	7818      	ldrb	r0, [r3, #0]
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	9300      	str	r3, [sp, #0]
 800230e:	0023      	movs	r3, r4
 8002310:	f7ff fece 	bl	80020b0 <drawVLine>
	drawVLine(x+w-1, y, h, color, hspi);
 8002314:	1dfa      	adds	r2, r7, #7
 8002316:	1d7b      	adds	r3, r7, #5
 8002318:	7812      	ldrb	r2, [r2, #0]
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	18d3      	adds	r3, r2, r3
 800231e:	b2db      	uxtb	r3, r3
 8002320:	3b01      	subs	r3, #1
 8002322:	b2d8      	uxtb	r0, r3
 8002324:	197b      	adds	r3, r7, r5
 8002326:	881c      	ldrh	r4, [r3, #0]
 8002328:	1d3b      	adds	r3, r7, #4
 800232a:	781a      	ldrb	r2, [r3, #0]
 800232c:	1dbb      	adds	r3, r7, #6
 800232e:	7819      	ldrb	r1, [r3, #0]
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	9300      	str	r3, [sp, #0]
 8002334:	0023      	movs	r3, r4
 8002336:	f7ff febb 	bl	80020b0 <drawVLine>
}
 800233a:	46c0      	nop			; (mov r8, r8)
 800233c:	46bd      	mov	sp, r7
 800233e:	b002      	add	sp, #8
 8002340:	bdb0      	pop	{r4, r5, r7, pc}

08002342 <fillRect>:

// draw a filled rectangle
void fillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t color, SPI_HandleTypeDef *hspi) {
 8002342:	b5b0      	push	{r4, r5, r7, lr}
 8002344:	b086      	sub	sp, #24
 8002346:	af02      	add	r7, sp, #8
 8002348:	0005      	movs	r5, r0
 800234a:	000c      	movs	r4, r1
 800234c:	0010      	movs	r0, r2
 800234e:	0019      	movs	r1, r3
 8002350:	1dfb      	adds	r3, r7, #7
 8002352:	1c2a      	adds	r2, r5, #0
 8002354:	701a      	strb	r2, [r3, #0]
 8002356:	1dbb      	adds	r3, r7, #6
 8002358:	1c22      	adds	r2, r4, #0
 800235a:	701a      	strb	r2, [r3, #0]
 800235c:	1d7b      	adds	r3, r7, #5
 800235e:	1c02      	adds	r2, r0, #0
 8002360:	701a      	strb	r2, [r3, #0]
 8002362:	1d3b      	adds	r3, r7, #4
 8002364:	1c0a      	adds	r2, r1, #0
 8002366:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < h; i++) {
 8002368:	2300      	movs	r3, #0
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	e014      	b.n	8002398 <fillRect+0x56>
		drawHLine(x, y+i, w, color, hspi);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	b2da      	uxtb	r2, r3
 8002372:	1dbb      	adds	r3, r7, #6
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	18d3      	adds	r3, r2, r3
 8002378:	b2d9      	uxtb	r1, r3
 800237a:	2320      	movs	r3, #32
 800237c:	18fb      	adds	r3, r7, r3
 800237e:	881c      	ldrh	r4, [r3, #0]
 8002380:	1d7b      	adds	r3, r7, #5
 8002382:	781a      	ldrb	r2, [r3, #0]
 8002384:	1dfb      	adds	r3, r7, #7
 8002386:	7818      	ldrb	r0, [r3, #0]
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	0023      	movs	r3, r4
 800238e:	f7ff fde9 	bl	8001f64 <drawHLine>
	for (int i = 0; i < h; i++) {
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	3301      	adds	r3, #1
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	1d3b      	adds	r3, r7, #4
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	429a      	cmp	r2, r3
 80023a0:	dbe5      	blt.n	800236e <fillRect+0x2c>
	}
}
 80023a2:	46c0      	nop			; (mov r8, r8)
 80023a4:	46bd      	mov	sp, r7
 80023a6:	b004      	add	sp, #16
 80023a8:	bdb0      	pop	{r4, r5, r7, pc}

080023aa <fillScreen>:

// a big rectangle, but for the whole screen
void fillScreen(uint16_t color, SPI_HandleTypeDef *hspi) {
 80023aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ac:	b091      	sub	sp, #68	; 0x44
 80023ae:	af04      	add	r7, sp, #16
 80023b0:	61b9      	str	r1, [r7, #24]
 80023b2:	221e      	movs	r2, #30
 80023b4:	18ba      	adds	r2, r7, r2
 80023b6:	1c01      	adds	r1, r0, #0
 80023b8:	8011      	strh	r1, [r2, #0]
 80023ba:	466a      	mov	r2, sp
 80023bc:	607a      	str	r2, [r7, #4]
	uint16_t bufferSize = WIDTH*HEIGHT/4;
 80023be:	2012      	movs	r0, #18
 80023c0:	2218      	movs	r2, #24
 80023c2:	18b9      	adds	r1, r7, r2
 80023c4:	180a      	adds	r2, r1, r0
 80023c6:	21a0      	movs	r1, #160	; 0xa0
 80023c8:	0149      	lsls	r1, r1, #5
 80023ca:	8011      	strh	r1, [r2, #0]
	uint16_t buffer[bufferSize];
 80023cc:	2218      	movs	r2, #24
 80023ce:	18ba      	adds	r2, r7, r2
 80023d0:	1812      	adds	r2, r2, r0
 80023d2:	8812      	ldrh	r2, [r2, #0]
 80023d4:	0011      	movs	r1, r2
 80023d6:	3901      	subs	r1, #1
 80023d8:	6279      	str	r1, [r7, #36]	; 0x24
 80023da:	613a      	str	r2, [r7, #16]
 80023dc:	2100      	movs	r1, #0
 80023de:	6179      	str	r1, [r7, #20]
 80023e0:	6939      	ldr	r1, [r7, #16]
 80023e2:	0f09      	lsrs	r1, r1, #28
 80023e4:	6978      	ldr	r0, [r7, #20]
 80023e6:	0106      	lsls	r6, r0, #4
 80023e8:	430e      	orrs	r6, r1
 80023ea:	6939      	ldr	r1, [r7, #16]
 80023ec:	010d      	lsls	r5, r1, #4
 80023ee:	60ba      	str	r2, [r7, #8]
 80023f0:	2100      	movs	r1, #0
 80023f2:	60f9      	str	r1, [r7, #12]
 80023f4:	68bd      	ldr	r5, [r7, #8]
 80023f6:	68fe      	ldr	r6, [r7, #12]
 80023f8:	0029      	movs	r1, r5
 80023fa:	0f09      	lsrs	r1, r1, #28
 80023fc:	0030      	movs	r0, r6
 80023fe:	0104      	lsls	r4, r0, #4
 8002400:	430c      	orrs	r4, r1
 8002402:	0029      	movs	r1, r5
 8002404:	010b      	lsls	r3, r1, #4
 8002406:	0013      	movs	r3, r2
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	3301      	adds	r3, #1
 800240c:	3307      	adds	r3, #7
 800240e:	08db      	lsrs	r3, r3, #3
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	466a      	mov	r2, sp
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	469d      	mov	sp, r3
 8002418:	ab04      	add	r3, sp, #16
 800241a:	3301      	adds	r3, #1
 800241c:	085b      	lsrs	r3, r3, #1
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	623b      	str	r3, [r7, #32]
	int i;
	for (i = 0; i < bufferSize; i++) {
 8002422:	2300      	movs	r3, #0
 8002424:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002426:	e00e      	b.n	8002446 <fillScreen+0x9c>
		buffer[i] = colorFixer(color);
 8002428:	231e      	movs	r3, #30
 800242a:	18fb      	adds	r3, r7, r3
 800242c:	881b      	ldrh	r3, [r3, #0]
 800242e:	0018      	movs	r0, r3
 8002430:	f7ff fd74 	bl	8001f1c <colorFixer>
 8002434:	0003      	movs	r3, r0
 8002436:	0019      	movs	r1, r3
 8002438:	6a3b      	ldr	r3, [r7, #32]
 800243a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800243c:	0052      	lsls	r2, r2, #1
 800243e:	52d1      	strh	r1, [r2, r3]
	for (i = 0; i < bufferSize; i++) {
 8002440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002442:	3301      	adds	r3, #1
 8002444:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002446:	2312      	movs	r3, #18
 8002448:	2218      	movs	r2, #24
 800244a:	4694      	mov	ip, r2
 800244c:	44bc      	add	ip, r7
 800244e:	4463      	add	r3, ip
 8002450:	881b      	ldrh	r3, [r3, #0]
 8002452:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002454:	429a      	cmp	r2, r3
 8002456:	dbe7      	blt.n	8002428 <fillScreen+0x7e>
	}

	// divided into 4 parts, since system ram is not big enough
	for (i = 0; i < 4; i++) {
 8002458:	2300      	movs	r3, #0
 800245a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800245c:	e017      	b.n	800248e <fillScreen+0xe4>
		drawBuffer(0, HEIGHT/4*i, WIDTH, HEIGHT/4, buffer, bufferSize, hspi);
 800245e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2228      	movs	r2, #40	; 0x28
 8002464:	4353      	muls	r3, r2
 8002466:	b2d9      	uxtb	r1, r3
 8002468:	6a3b      	ldr	r3, [r7, #32]
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	9202      	str	r2, [sp, #8]
 800246e:	2212      	movs	r2, #18
 8002470:	2018      	movs	r0, #24
 8002472:	4684      	mov	ip, r0
 8002474:	44bc      	add	ip, r7
 8002476:	4462      	add	r2, ip
 8002478:	8812      	ldrh	r2, [r2, #0]
 800247a:	9201      	str	r2, [sp, #4]
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	2328      	movs	r3, #40	; 0x28
 8002480:	2280      	movs	r2, #128	; 0x80
 8002482:	2000      	movs	r0, #0
 8002484:	f7ff febb 	bl	80021fe <drawBuffer>
	for (i = 0; i < 4; i++) {
 8002488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800248a:	3301      	adds	r3, #1
 800248c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800248e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002490:	2b03      	cmp	r3, #3
 8002492:	dde4      	ble.n	800245e <fillScreen+0xb4>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	469d      	mov	sp, r3
	}
}
 8002498:	46c0      	nop			; (mov r8, r8)
 800249a:	46bd      	mov	sp, r7
 800249c:	b00d      	add	sp, #52	; 0x34
 800249e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080024a0 <clearScreen>:

void clearScreen(uint16_t backgroundColor, SPI_HandleTypeDef *hspi) {
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	0002      	movs	r2, r0
 80024a8:	6039      	str	r1, [r7, #0]
 80024aa:	1dbb      	adds	r3, r7, #6
 80024ac:	801a      	strh	r2, [r3, #0]
	bg = backgroundColor;
 80024ae:	4b07      	ldr	r3, [pc, #28]	; (80024cc <clearScreen+0x2c>)
 80024b0:	1dba      	adds	r2, r7, #6
 80024b2:	8812      	ldrh	r2, [r2, #0]
 80024b4:	801a      	strh	r2, [r3, #0]
	fillScreen(backgroundColor, hspi);
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	1dbb      	adds	r3, r7, #6
 80024ba:	881b      	ldrh	r3, [r3, #0]
 80024bc:	0011      	movs	r1, r2
 80024be:	0018      	movs	r0, r3
 80024c0:	f7ff ff73 	bl	80023aa <fillScreen>
}
 80024c4:	46c0      	nop			; (mov r8, r8)
 80024c6:	46bd      	mov	sp, r7
 80024c8:	b002      	add	sp, #8
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	200000f2 	.word	0x200000f2

080024d0 <drawChar>:
// ---- end of basic shapes and lines ----

// ---- text functions ----
// draw a character. based on 6x8 font, but scalable
// instead of drawing pixel by pixel, function builds a buffer first and then sends
void drawChar(uint8_t ch, SPI_HandleTypeDef *hspi) {
 80024d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024d2:	b095      	sub	sp, #84	; 0x54
 80024d4:	af04      	add	r7, sp, #16
 80024d6:	61b9      	str	r1, [r7, #24]
 80024d8:	221f      	movs	r2, #31
 80024da:	18ba      	adds	r2, r7, r2
 80024dc:	1c01      	adds	r1, r0, #0
 80024de:	7011      	strb	r1, [r2, #0]
 80024e0:	466a      	mov	r2, sp
 80024e2:	607a      	str	r2, [r7, #4]
	uint16_t bufferSize = 6*8*textSize*textSize;
 80024e4:	4abe      	ldr	r2, [pc, #760]	; (80027e0 <drawChar+0x310>)
 80024e6:	7812      	ldrb	r2, [r2, #0]
 80024e8:	b292      	uxth	r2, r2
 80024ea:	49bd      	ldr	r1, [pc, #756]	; (80027e0 <drawChar+0x310>)
 80024ec:	7809      	ldrb	r1, [r1, #0]
 80024ee:	b289      	uxth	r1, r1
 80024f0:	434a      	muls	r2, r1
 80024f2:	b291      	uxth	r1, r2
 80024f4:	221a      	movs	r2, #26
 80024f6:	2018      	movs	r0, #24
 80024f8:	4684      	mov	ip, r0
 80024fa:	44bc      	add	ip, r7
 80024fc:	4462      	add	r2, ip
 80024fe:	2030      	movs	r0, #48	; 0x30
 8002500:	4341      	muls	r1, r0
 8002502:	8011      	strh	r1, [r2, #0]
	uint16_t buffer[bufferSize];
 8002504:	221a      	movs	r2, #26
 8002506:	2118      	movs	r1, #24
 8002508:	468c      	mov	ip, r1
 800250a:	44bc      	add	ip, r7
 800250c:	4462      	add	r2, ip
 800250e:	8812      	ldrh	r2, [r2, #0]
 8002510:	0011      	movs	r1, r2
 8002512:	3901      	subs	r1, #1
 8002514:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002516:	613a      	str	r2, [r7, #16]
 8002518:	2100      	movs	r1, #0
 800251a:	6179      	str	r1, [r7, #20]
 800251c:	6939      	ldr	r1, [r7, #16]
 800251e:	0f09      	lsrs	r1, r1, #28
 8002520:	6978      	ldr	r0, [r7, #20]
 8002522:	0106      	lsls	r6, r0, #4
 8002524:	430e      	orrs	r6, r1
 8002526:	6939      	ldr	r1, [r7, #16]
 8002528:	010d      	lsls	r5, r1, #4
 800252a:	60ba      	str	r2, [r7, #8]
 800252c:	2100      	movs	r1, #0
 800252e:	60f9      	str	r1, [r7, #12]
 8002530:	68bd      	ldr	r5, [r7, #8]
 8002532:	68fe      	ldr	r6, [r7, #12]
 8002534:	0029      	movs	r1, r5
 8002536:	0f09      	lsrs	r1, r1, #28
 8002538:	0030      	movs	r0, r6
 800253a:	0104      	lsls	r4, r0, #4
 800253c:	430c      	orrs	r4, r1
 800253e:	0029      	movs	r1, r5
 8002540:	010b      	lsls	r3, r1, #4
 8002542:	0013      	movs	r3, r2
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	3301      	adds	r3, #1
 8002548:	3307      	adds	r3, #7
 800254a:	08db      	lsrs	r3, r3, #3
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	466a      	mov	r2, sp
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	469d      	mov	sp, r3
 8002554:	ab04      	add	r3, sp, #16
 8002556:	3301      	adds	r3, #1
 8002558:	085b      	lsrs	r3, r3, #1
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	62bb      	str	r3, [r7, #40]	; 0x28
	int16_t rowOffset, address;

	// Char bitmap = 5 columns
	for (int8_t i=0; i<5; i++) {
 800255e:	2325      	movs	r3, #37	; 0x25
 8002560:	2218      	movs	r2, #24
 8002562:	4694      	mov	ip, r2
 8002564:	44bc      	add	ip, r7
 8002566:	4463      	add	r3, ip
 8002568:	2200      	movs	r2, #0
 800256a:	701a      	strb	r2, [r3, #0]
 800256c:	e1f4      	b.n	8002958 <drawChar+0x488>
		uint8_t line = font[ch*5+i];
 800256e:	231f      	movs	r3, #31
 8002570:	18fb      	adds	r3, r7, r3
 8002572:	781a      	ldrb	r2, [r3, #0]
 8002574:	0013      	movs	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	189a      	adds	r2, r3, r2
 800257a:	2325      	movs	r3, #37	; 0x25
 800257c:	2118      	movs	r1, #24
 800257e:	468c      	mov	ip, r1
 8002580:	44bc      	add	ip, r7
 8002582:	4463      	add	r3, ip
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	b25b      	sxtb	r3, r3
 8002588:	18d2      	adds	r2, r2, r3
 800258a:	2324      	movs	r3, #36	; 0x24
 800258c:	2118      	movs	r1, #24
 800258e:	468c      	mov	ip, r1
 8002590:	44bc      	add	ip, r7
 8002592:	4463      	add	r3, ip
 8002594:	4993      	ldr	r1, [pc, #588]	; (80027e4 <drawChar+0x314>)
 8002596:	5c8a      	ldrb	r2, [r1, r2]
 8002598:	701a      	strb	r2, [r3, #0]
		for (int8_t j=0; j<8; j++, line >>= 1) {
 800259a:	2323      	movs	r3, #35	; 0x23
 800259c:	2218      	movs	r2, #24
 800259e:	4694      	mov	ip, r2
 80025a0:	44bc      	add	ip, r7
 80025a2:	4463      	add	r3, ip
 80025a4:	2200      	movs	r2, #0
 80025a6:	701a      	strb	r2, [r3, #0]
 80025a8:	e1c0      	b.n	800292c <drawChar+0x45c>
			// draw character pixel
			if (line & 1) {
 80025aa:	2324      	movs	r3, #36	; 0x24
 80025ac:	2218      	movs	r2, #24
 80025ae:	4694      	mov	ip, r2
 80025b0:	44bc      	add	ip, r7
 80025b2:	4463      	add	r3, ip
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	2201      	movs	r2, #1
 80025b8:	4013      	ands	r3, r2
 80025ba:	d100      	bne.n	80025be <drawChar+0xee>
 80025bc:	e0c8      	b.n	8002750 <drawChar+0x280>
				if (textSize == 1) {
 80025be:	4b88      	ldr	r3, [pc, #544]	; (80027e0 <drawChar+0x310>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d11c      	bne.n	8002600 <drawChar+0x130>
					buffer[i+j*6] = colorFixer(textColor);
 80025c6:	4b88      	ldr	r3, [pc, #544]	; (80027e8 <drawChar+0x318>)
 80025c8:	8818      	ldrh	r0, [r3, #0]
 80025ca:	2325      	movs	r3, #37	; 0x25
 80025cc:	2218      	movs	r2, #24
 80025ce:	4694      	mov	ip, r2
 80025d0:	44bc      	add	ip, r7
 80025d2:	4463      	add	r3, ip
 80025d4:	2100      	movs	r1, #0
 80025d6:	5659      	ldrsb	r1, [r3, r1]
 80025d8:	2323      	movs	r3, #35	; 0x23
 80025da:	2218      	movs	r2, #24
 80025dc:	4694      	mov	ip, r2
 80025de:	44bc      	add	ip, r7
 80025e0:	4463      	add	r3, ip
 80025e2:	2200      	movs	r2, #0
 80025e4:	569a      	ldrsb	r2, [r3, r2]
 80025e6:	0013      	movs	r3, r2
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	189b      	adds	r3, r3, r2
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	18cc      	adds	r4, r1, r3
 80025f0:	f7ff fc94 	bl	8001f1c <colorFixer>
 80025f4:	0003      	movs	r3, r0
 80025f6:	0019      	movs	r1, r3
 80025f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025fa:	0062      	lsls	r2, r4, #1
 80025fc:	52d1      	strh	r1, [r2, r3]
 80025fe:	e17f      	b.n	8002900 <drawChar+0x430>
				}
				else {
					// indexing scheme for textSize > 1
					for (int8_t k = 0; k < textSize; k++) {
 8002600:	2322      	movs	r3, #34	; 0x22
 8002602:	2218      	movs	r2, #24
 8002604:	4694      	mov	ip, r2
 8002606:	44bc      	add	ip, r7
 8002608:	4463      	add	r3, ip
 800260a:	2200      	movs	r2, #0
 800260c:	701a      	strb	r2, [r3, #0]
 800260e:	e092      	b.n	8002736 <drawChar+0x266>
						rowOffset = textSize*6;
 8002610:	4b73      	ldr	r3, [pc, #460]	; (80027e0 <drawChar+0x310>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	b29b      	uxth	r3, r3
 8002616:	1c1a      	adds	r2, r3, #0
 8002618:	1c13      	adds	r3, r2, #0
 800261a:	18db      	adds	r3, r3, r3
 800261c:	189b      	adds	r3, r3, r2
 800261e:	18db      	adds	r3, r3, r3
 8002620:	b29a      	uxth	r2, r3
 8002622:	2326      	movs	r3, #38	; 0x26
 8002624:	2118      	movs	r1, #24
 8002626:	468c      	mov	ip, r1
 8002628:	44bc      	add	ip, r7
 800262a:	4463      	add	r3, ip
 800262c:	801a      	strh	r2, [r3, #0]
						for (int8_t l = 0; l < textSize; l++) {
 800262e:	2321      	movs	r3, #33	; 0x21
 8002630:	2218      	movs	r2, #24
 8002632:	4694      	mov	ip, r2
 8002634:	44bc      	add	ip, r7
 8002636:	4463      	add	r3, ip
 8002638:	2200      	movs	r2, #0
 800263a:	701a      	strb	r2, [r3, #0]
 800263c:	e064      	b.n	8002708 <drawChar+0x238>
							address = (textSize*textSize*j*6)+(i*textSize);
 800263e:	4b68      	ldr	r3, [pc, #416]	; (80027e0 <drawChar+0x310>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	b29b      	uxth	r3, r3
 8002644:	4a66      	ldr	r2, [pc, #408]	; (80027e0 <drawChar+0x310>)
 8002646:	7812      	ldrb	r2, [r2, #0]
 8002648:	b292      	uxth	r2, r2
 800264a:	4353      	muls	r3, r2
 800264c:	b29b      	uxth	r3, r3
 800264e:	2223      	movs	r2, #35	; 0x23
 8002650:	2118      	movs	r1, #24
 8002652:	468c      	mov	ip, r1
 8002654:	44bc      	add	ip, r7
 8002656:	4462      	add	r2, ip
 8002658:	7812      	ldrb	r2, [r2, #0]
 800265a:	b252      	sxtb	r2, r2
 800265c:	b292      	uxth	r2, r2
 800265e:	4353      	muls	r3, r2
 8002660:	b29b      	uxth	r3, r3
 8002662:	1c1a      	adds	r2, r3, #0
 8002664:	1c13      	adds	r3, r2, #0
 8002666:	18db      	adds	r3, r3, r3
 8002668:	189b      	adds	r3, r3, r2
 800266a:	18db      	adds	r3, r3, r3
 800266c:	b29a      	uxth	r2, r3
 800266e:	2325      	movs	r3, #37	; 0x25
 8002670:	2118      	movs	r1, #24
 8002672:	468c      	mov	ip, r1
 8002674:	44bc      	add	ip, r7
 8002676:	4463      	add	r3, ip
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	b25b      	sxtb	r3, r3
 800267c:	b29b      	uxth	r3, r3
 800267e:	4958      	ldr	r1, [pc, #352]	; (80027e0 <drawChar+0x310>)
 8002680:	7809      	ldrb	r1, [r1, #0]
 8002682:	b289      	uxth	r1, r1
 8002684:	434b      	muls	r3, r1
 8002686:	b29b      	uxth	r3, r3
 8002688:	18d3      	adds	r3, r2, r3
 800268a:	b29a      	uxth	r2, r3
 800268c:	210e      	movs	r1, #14
 800268e:	2018      	movs	r0, #24
 8002690:	183b      	adds	r3, r7, r0
 8002692:	185b      	adds	r3, r3, r1
 8002694:	801a      	strh	r2, [r3, #0]
							address += rowOffset*k+l;
 8002696:	2322      	movs	r3, #34	; 0x22
 8002698:	2218      	movs	r2, #24
 800269a:	4694      	mov	ip, r2
 800269c:	44bc      	add	ip, r7
 800269e:	4463      	add	r3, ip
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	b25b      	sxtb	r3, r3
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	2226      	movs	r2, #38	; 0x26
 80026a8:	2418      	movs	r4, #24
 80026aa:	46a4      	mov	ip, r4
 80026ac:	44bc      	add	ip, r7
 80026ae:	4462      	add	r2, ip
 80026b0:	8812      	ldrh	r2, [r2, #0]
 80026b2:	4353      	muls	r3, r2
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	2521      	movs	r5, #33	; 0x21
 80026b8:	183b      	adds	r3, r7, r0
 80026ba:	195b      	adds	r3, r3, r5
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	b25b      	sxtb	r3, r3
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	18d3      	adds	r3, r2, r3
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	183b      	adds	r3, r7, r0
 80026c8:	185b      	adds	r3, r3, r1
 80026ca:	881b      	ldrh	r3, [r3, #0]
 80026cc:	18d3      	adds	r3, r2, r3
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	183b      	adds	r3, r7, r0
 80026d2:	185b      	adds	r3, r3, r1
 80026d4:	801a      	strh	r2, [r3, #0]
							buffer[address] = colorFixer(textColor);
 80026d6:	4b44      	ldr	r3, [pc, #272]	; (80027e8 <drawChar+0x318>)
 80026d8:	881a      	ldrh	r2, [r3, #0]
 80026da:	0006      	movs	r6, r0
 80026dc:	183b      	adds	r3, r7, r0
 80026de:	185b      	adds	r3, r3, r1
 80026e0:	2400      	movs	r4, #0
 80026e2:	5f1c      	ldrsh	r4, [r3, r4]
 80026e4:	0010      	movs	r0, r2
 80026e6:	f7ff fc19 	bl	8001f1c <colorFixer>
 80026ea:	0003      	movs	r3, r0
 80026ec:	0019      	movs	r1, r3
 80026ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f0:	0062      	lsls	r2, r4, #1
 80026f2:	52d1      	strh	r1, [r2, r3]
						for (int8_t l = 0; l < textSize; l++) {
 80026f4:	19bb      	adds	r3, r7, r6
 80026f6:	195b      	adds	r3, r3, r5
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	b25b      	sxtb	r3, r3
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	3301      	adds	r3, #1
 8002700:	b2da      	uxtb	r2, r3
 8002702:	19bb      	adds	r3, r7, r6
 8002704:	195b      	adds	r3, r3, r5
 8002706:	701a      	strb	r2, [r3, #0]
 8002708:	2321      	movs	r3, #33	; 0x21
 800270a:	2218      	movs	r2, #24
 800270c:	4694      	mov	ip, r2
 800270e:	44bc      	add	ip, r7
 8002710:	4463      	add	r3, ip
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	b25b      	sxtb	r3, r3
 8002716:	4a32      	ldr	r2, [pc, #200]	; (80027e0 <drawChar+0x310>)
 8002718:	7812      	ldrb	r2, [r2, #0]
 800271a:	4293      	cmp	r3, r2
 800271c:	db8f      	blt.n	800263e <drawChar+0x16e>
					for (int8_t k = 0; k < textSize; k++) {
 800271e:	2122      	movs	r1, #34	; 0x22
 8002720:	2018      	movs	r0, #24
 8002722:	183b      	adds	r3, r7, r0
 8002724:	185b      	adds	r3, r3, r1
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	b25b      	sxtb	r3, r3
 800272a:	b2db      	uxtb	r3, r3
 800272c:	3301      	adds	r3, #1
 800272e:	b2da      	uxtb	r2, r3
 8002730:	183b      	adds	r3, r7, r0
 8002732:	185b      	adds	r3, r3, r1
 8002734:	701a      	strb	r2, [r3, #0]
 8002736:	2322      	movs	r3, #34	; 0x22
 8002738:	2218      	movs	r2, #24
 800273a:	4694      	mov	ip, r2
 800273c:	44bc      	add	ip, r7
 800273e:	4463      	add	r3, ip
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	b25b      	sxtb	r3, r3
 8002744:	4a26      	ldr	r2, [pc, #152]	; (80027e0 <drawChar+0x310>)
 8002746:	7812      	ldrb	r2, [r2, #0]
 8002748:	4293      	cmp	r3, r2
 800274a:	da00      	bge.n	800274e <drawChar+0x27e>
 800274c:	e760      	b.n	8002610 <drawChar+0x140>
 800274e:	e0d7      	b.n	8002900 <drawChar+0x430>
						}
					}
				}
			}
			// draw text background
			else if (bg != textColor) {
 8002750:	4b26      	ldr	r3, [pc, #152]	; (80027ec <drawChar+0x31c>)
 8002752:	881a      	ldrh	r2, [r3, #0]
 8002754:	4b24      	ldr	r3, [pc, #144]	; (80027e8 <drawChar+0x318>)
 8002756:	881b      	ldrh	r3, [r3, #0]
 8002758:	429a      	cmp	r2, r3
 800275a:	d100      	bne.n	800275e <drawChar+0x28e>
 800275c:	e0d0      	b.n	8002900 <drawChar+0x430>
				if (textSize == 1) {
 800275e:	4b20      	ldr	r3, [pc, #128]	; (80027e0 <drawChar+0x310>)
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d11c      	bne.n	80027a0 <drawChar+0x2d0>
					buffer[i+j*6] = colorFixer(bg);
 8002766:	4b21      	ldr	r3, [pc, #132]	; (80027ec <drawChar+0x31c>)
 8002768:	8818      	ldrh	r0, [r3, #0]
 800276a:	2325      	movs	r3, #37	; 0x25
 800276c:	2218      	movs	r2, #24
 800276e:	4694      	mov	ip, r2
 8002770:	44bc      	add	ip, r7
 8002772:	4463      	add	r3, ip
 8002774:	2100      	movs	r1, #0
 8002776:	5659      	ldrsb	r1, [r3, r1]
 8002778:	2323      	movs	r3, #35	; 0x23
 800277a:	2218      	movs	r2, #24
 800277c:	4694      	mov	ip, r2
 800277e:	44bc      	add	ip, r7
 8002780:	4463      	add	r3, ip
 8002782:	2200      	movs	r2, #0
 8002784:	569a      	ldrsb	r2, [r3, r2]
 8002786:	0013      	movs	r3, r2
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	189b      	adds	r3, r3, r2
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	18cc      	adds	r4, r1, r3
 8002790:	f7ff fbc4 	bl	8001f1c <colorFixer>
 8002794:	0003      	movs	r3, r0
 8002796:	0019      	movs	r1, r3
 8002798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800279a:	0062      	lsls	r2, r4, #1
 800279c:	52d1      	strh	r1, [r2, r3]
 800279e:	e0af      	b.n	8002900 <drawChar+0x430>
				}
				else {
					for (int8_t k = 0; k < textSize; k++) {
 80027a0:	2320      	movs	r3, #32
 80027a2:	2218      	movs	r2, #24
 80027a4:	4694      	mov	ip, r2
 80027a6:	44bc      	add	ip, r7
 80027a8:	4463      	add	r3, ip
 80027aa:	2200      	movs	r2, #0
 80027ac:	701a      	strb	r2, [r3, #0]
 80027ae:	e09b      	b.n	80028e8 <drawChar+0x418>
						rowOffset = textSize*6;
 80027b0:	4b0b      	ldr	r3, [pc, #44]	; (80027e0 <drawChar+0x310>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	1c1a      	adds	r2, r3, #0
 80027b8:	1c13      	adds	r3, r2, #0
 80027ba:	18db      	adds	r3, r3, r3
 80027bc:	189b      	adds	r3, r3, r2
 80027be:	18db      	adds	r3, r3, r3
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	2326      	movs	r3, #38	; 0x26
 80027c4:	2118      	movs	r1, #24
 80027c6:	468c      	mov	ip, r1
 80027c8:	44bc      	add	ip, r7
 80027ca:	4463      	add	r3, ip
 80027cc:	801a      	strh	r2, [r3, #0]
						for (int8_t l = 0; l < textSize; l++) {
 80027ce:	231f      	movs	r3, #31
 80027d0:	2218      	movs	r2, #24
 80027d2:	4694      	mov	ip, r2
 80027d4:	44bc      	add	ip, r7
 80027d6:	4463      	add	r3, ip
 80027d8:	2200      	movs	r2, #0
 80027da:	701a      	strb	r2, [r3, #0]
 80027dc:	e06d      	b.n	80028ba <drawChar+0x3ea>
 80027de:	46c0      	nop			; (mov r8, r8)
 80027e0:	200000ee 	.word	0x200000ee
 80027e4:	0800c25c 	.word	0x0800c25c
 80027e8:	200000f0 	.word	0x200000f0
 80027ec:	200000f2 	.word	0x200000f2
							address = (textSize*textSize*j*6)+(i*textSize);
 80027f0:	4bda      	ldr	r3, [pc, #872]	; (8002b5c <drawChar+0x68c>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	4ad9      	ldr	r2, [pc, #868]	; (8002b5c <drawChar+0x68c>)
 80027f8:	7812      	ldrb	r2, [r2, #0]
 80027fa:	b292      	uxth	r2, r2
 80027fc:	4353      	muls	r3, r2
 80027fe:	b29b      	uxth	r3, r3
 8002800:	2223      	movs	r2, #35	; 0x23
 8002802:	2118      	movs	r1, #24
 8002804:	468c      	mov	ip, r1
 8002806:	44bc      	add	ip, r7
 8002808:	4462      	add	r2, ip
 800280a:	7812      	ldrb	r2, [r2, #0]
 800280c:	b252      	sxtb	r2, r2
 800280e:	b292      	uxth	r2, r2
 8002810:	4353      	muls	r3, r2
 8002812:	b29b      	uxth	r3, r3
 8002814:	1c1a      	adds	r2, r3, #0
 8002816:	1c13      	adds	r3, r2, #0
 8002818:	18db      	adds	r3, r3, r3
 800281a:	189b      	adds	r3, r3, r2
 800281c:	18db      	adds	r3, r3, r3
 800281e:	b29a      	uxth	r2, r3
 8002820:	2325      	movs	r3, #37	; 0x25
 8002822:	2118      	movs	r1, #24
 8002824:	468c      	mov	ip, r1
 8002826:	44bc      	add	ip, r7
 8002828:	4463      	add	r3, ip
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	b25b      	sxtb	r3, r3
 800282e:	b29b      	uxth	r3, r3
 8002830:	49ca      	ldr	r1, [pc, #808]	; (8002b5c <drawChar+0x68c>)
 8002832:	7809      	ldrb	r1, [r1, #0]
 8002834:	b289      	uxth	r1, r1
 8002836:	434b      	muls	r3, r1
 8002838:	b29b      	uxth	r3, r3
 800283a:	18d3      	adds	r3, r2, r3
 800283c:	b29a      	uxth	r2, r3
 800283e:	210e      	movs	r1, #14
 8002840:	2018      	movs	r0, #24
 8002842:	183b      	adds	r3, r7, r0
 8002844:	185b      	adds	r3, r3, r1
 8002846:	801a      	strh	r2, [r3, #0]
							address += rowOffset*k+l;
 8002848:	2320      	movs	r3, #32
 800284a:	2218      	movs	r2, #24
 800284c:	4694      	mov	ip, r2
 800284e:	44bc      	add	ip, r7
 8002850:	4463      	add	r3, ip
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	b25b      	sxtb	r3, r3
 8002856:	b29b      	uxth	r3, r3
 8002858:	2226      	movs	r2, #38	; 0x26
 800285a:	2418      	movs	r4, #24
 800285c:	46a4      	mov	ip, r4
 800285e:	44bc      	add	ip, r7
 8002860:	4462      	add	r2, ip
 8002862:	8812      	ldrh	r2, [r2, #0]
 8002864:	4353      	muls	r3, r2
 8002866:	b29a      	uxth	r2, r3
 8002868:	251f      	movs	r5, #31
 800286a:	183b      	adds	r3, r7, r0
 800286c:	195b      	adds	r3, r3, r5
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	b25b      	sxtb	r3, r3
 8002872:	b29b      	uxth	r3, r3
 8002874:	18d3      	adds	r3, r2, r3
 8002876:	b29a      	uxth	r2, r3
 8002878:	183b      	adds	r3, r7, r0
 800287a:	185b      	adds	r3, r3, r1
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	18d3      	adds	r3, r2, r3
 8002880:	b29a      	uxth	r2, r3
 8002882:	183b      	adds	r3, r7, r0
 8002884:	185b      	adds	r3, r3, r1
 8002886:	801a      	strh	r2, [r3, #0]
							buffer[address] = colorFixer(bg);
 8002888:	4bb5      	ldr	r3, [pc, #724]	; (8002b60 <drawChar+0x690>)
 800288a:	881a      	ldrh	r2, [r3, #0]
 800288c:	0006      	movs	r6, r0
 800288e:	183b      	adds	r3, r7, r0
 8002890:	185b      	adds	r3, r3, r1
 8002892:	2400      	movs	r4, #0
 8002894:	5f1c      	ldrsh	r4, [r3, r4]
 8002896:	0010      	movs	r0, r2
 8002898:	f7ff fb40 	bl	8001f1c <colorFixer>
 800289c:	0003      	movs	r3, r0
 800289e:	0019      	movs	r1, r3
 80028a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a2:	0062      	lsls	r2, r4, #1
 80028a4:	52d1      	strh	r1, [r2, r3]
						for (int8_t l = 0; l < textSize; l++) {
 80028a6:	19bb      	adds	r3, r7, r6
 80028a8:	195b      	adds	r3, r3, r5
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	b25b      	sxtb	r3, r3
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	3301      	adds	r3, #1
 80028b2:	b2da      	uxtb	r2, r3
 80028b4:	19bb      	adds	r3, r7, r6
 80028b6:	195b      	adds	r3, r3, r5
 80028b8:	701a      	strb	r2, [r3, #0]
 80028ba:	231f      	movs	r3, #31
 80028bc:	2218      	movs	r2, #24
 80028be:	4694      	mov	ip, r2
 80028c0:	44bc      	add	ip, r7
 80028c2:	4463      	add	r3, ip
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	b25b      	sxtb	r3, r3
 80028c8:	4aa4      	ldr	r2, [pc, #656]	; (8002b5c <drawChar+0x68c>)
 80028ca:	7812      	ldrb	r2, [r2, #0]
 80028cc:	4293      	cmp	r3, r2
 80028ce:	db8f      	blt.n	80027f0 <drawChar+0x320>
					for (int8_t k = 0; k < textSize; k++) {
 80028d0:	2120      	movs	r1, #32
 80028d2:	2018      	movs	r0, #24
 80028d4:	183b      	adds	r3, r7, r0
 80028d6:	185b      	adds	r3, r3, r1
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	b25b      	sxtb	r3, r3
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	3301      	adds	r3, #1
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	183b      	adds	r3, r7, r0
 80028e4:	185b      	adds	r3, r3, r1
 80028e6:	701a      	strb	r2, [r3, #0]
 80028e8:	2320      	movs	r3, #32
 80028ea:	2218      	movs	r2, #24
 80028ec:	4694      	mov	ip, r2
 80028ee:	44bc      	add	ip, r7
 80028f0:	4463      	add	r3, ip
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	b25b      	sxtb	r3, r3
 80028f6:	4a99      	ldr	r2, [pc, #612]	; (8002b5c <drawChar+0x68c>)
 80028f8:	7812      	ldrb	r2, [r2, #0]
 80028fa:	4293      	cmp	r3, r2
 80028fc:	da00      	bge.n	8002900 <drawChar+0x430>
 80028fe:	e757      	b.n	80027b0 <drawChar+0x2e0>
		for (int8_t j=0; j<8; j++, line >>= 1) {
 8002900:	2123      	movs	r1, #35	; 0x23
 8002902:	2018      	movs	r0, #24
 8002904:	183b      	adds	r3, r7, r0
 8002906:	185b      	adds	r3, r3, r1
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	b25b      	sxtb	r3, r3
 800290c:	b2db      	uxtb	r3, r3
 800290e:	3301      	adds	r3, #1
 8002910:	b2da      	uxtb	r2, r3
 8002912:	183b      	adds	r3, r7, r0
 8002914:	185b      	adds	r3, r3, r1
 8002916:	701a      	strb	r2, [r3, #0]
 8002918:	2224      	movs	r2, #36	; 0x24
 800291a:	183b      	adds	r3, r7, r0
 800291c:	189b      	adds	r3, r3, r2
 800291e:	2118      	movs	r1, #24
 8002920:	468c      	mov	ip, r1
 8002922:	44bc      	add	ip, r7
 8002924:	4462      	add	r2, ip
 8002926:	7812      	ldrb	r2, [r2, #0]
 8002928:	0852      	lsrs	r2, r2, #1
 800292a:	701a      	strb	r2, [r3, #0]
 800292c:	2323      	movs	r3, #35	; 0x23
 800292e:	2218      	movs	r2, #24
 8002930:	4694      	mov	ip, r2
 8002932:	44bc      	add	ip, r7
 8002934:	4463      	add	r3, ip
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	b25b      	sxtb	r3, r3
 800293a:	2b07      	cmp	r3, #7
 800293c:	dc00      	bgt.n	8002940 <drawChar+0x470>
 800293e:	e634      	b.n	80025aa <drawChar+0xda>
	for (int8_t i=0; i<5; i++) {
 8002940:	2125      	movs	r1, #37	; 0x25
 8002942:	2018      	movs	r0, #24
 8002944:	183b      	adds	r3, r7, r0
 8002946:	185b      	adds	r3, r3, r1
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	b25b      	sxtb	r3, r3
 800294c:	b2db      	uxtb	r3, r3
 800294e:	3301      	adds	r3, #1
 8002950:	b2da      	uxtb	r2, r3
 8002952:	183b      	adds	r3, r7, r0
 8002954:	185b      	adds	r3, r3, r1
 8002956:	701a      	strb	r2, [r3, #0]
 8002958:	2325      	movs	r3, #37	; 0x25
 800295a:	2218      	movs	r2, #24
 800295c:	4694      	mov	ip, r2
 800295e:	44bc      	add	ip, r7
 8002960:	4463      	add	r3, ip
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	b25b      	sxtb	r3, r3
 8002966:	2b04      	cmp	r3, #4
 8002968:	dc00      	bgt.n	800296c <drawChar+0x49c>
 800296a:	e600      	b.n	800256e <drawChar+0x9e>
		}
	}

	// If opaque, draw vertical line for last column
	// for character 1px kerning
	if (bg != textColor) {
 800296c:	4b7c      	ldr	r3, [pc, #496]	; (8002b60 <drawChar+0x690>)
 800296e:	881a      	ldrh	r2, [r3, #0]
 8002970:	4b7c      	ldr	r3, [pc, #496]	; (8002b64 <drawChar+0x694>)
 8002972:	881b      	ldrh	r3, [r3, #0]
 8002974:	429a      	cmp	r2, r3
 8002976:	d100      	bne.n	800297a <drawChar+0x4aa>
 8002978:	e0ca      	b.n	8002b10 <drawChar+0x640>
		for (int8_t j = 0; j < 8; j++) {
 800297a:	231e      	movs	r3, #30
 800297c:	2218      	movs	r2, #24
 800297e:	4694      	mov	ip, r2
 8002980:	44bc      	add	ip, r7
 8002982:	4463      	add	r3, ip
 8002984:	2200      	movs	r2, #0
 8002986:	701a      	strb	r2, [r3, #0]
 8002988:	e0b8      	b.n	8002afc <drawChar+0x62c>
			if (textSize == 1) {
 800298a:	4b74      	ldr	r3, [pc, #464]	; (8002b5c <drawChar+0x68c>)
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d116      	bne.n	80029c0 <drawChar+0x4f0>
				buffer[5+j*6] = colorFixer(bg);
 8002992:	4b73      	ldr	r3, [pc, #460]	; (8002b60 <drawChar+0x690>)
 8002994:	8819      	ldrh	r1, [r3, #0]
 8002996:	231e      	movs	r3, #30
 8002998:	2218      	movs	r2, #24
 800299a:	4694      	mov	ip, r2
 800299c:	44bc      	add	ip, r7
 800299e:	4463      	add	r3, ip
 80029a0:	2200      	movs	r2, #0
 80029a2:	569a      	ldrsb	r2, [r3, r2]
 80029a4:	0013      	movs	r3, r2
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	189b      	adds	r3, r3, r2
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	1d5c      	adds	r4, r3, #5
 80029ae:	0008      	movs	r0, r1
 80029b0:	f7ff fab4 	bl	8001f1c <colorFixer>
 80029b4:	0003      	movs	r3, r0
 80029b6:	0019      	movs	r1, r3
 80029b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ba:	0062      	lsls	r2, r4, #1
 80029bc:	52d1      	strh	r1, [r2, r3]
 80029be:	e091      	b.n	8002ae4 <drawChar+0x614>
			}
			else {
				for (int8_t k = 0; k < textSize; k++) {
 80029c0:	231d      	movs	r3, #29
 80029c2:	2218      	movs	r2, #24
 80029c4:	4694      	mov	ip, r2
 80029c6:	44bc      	add	ip, r7
 80029c8:	4463      	add	r3, ip
 80029ca:	2200      	movs	r2, #0
 80029cc:	701a      	strb	r2, [r3, #0]
 80029ce:	e07d      	b.n	8002acc <drawChar+0x5fc>
					for (int8_t l = 0; l < textSize; l++) {
 80029d0:	231c      	movs	r3, #28
 80029d2:	2218      	movs	r2, #24
 80029d4:	4694      	mov	ip, r2
 80029d6:	44bc      	add	ip, r7
 80029d8:	4463      	add	r3, ip
 80029da:	2200      	movs	r2, #0
 80029dc:	701a      	strb	r2, [r3, #0]
 80029de:	e05e      	b.n	8002a9e <drawChar+0x5ce>
						address = (textSize*textSize*j*6)+(5*textSize);
 80029e0:	4b5e      	ldr	r3, [pc, #376]	; (8002b5c <drawChar+0x68c>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	4a5d      	ldr	r2, [pc, #372]	; (8002b5c <drawChar+0x68c>)
 80029e8:	7812      	ldrb	r2, [r2, #0]
 80029ea:	b292      	uxth	r2, r2
 80029ec:	4353      	muls	r3, r2
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	221e      	movs	r2, #30
 80029f2:	2118      	movs	r1, #24
 80029f4:	468c      	mov	ip, r1
 80029f6:	44bc      	add	ip, r7
 80029f8:	4462      	add	r2, ip
 80029fa:	7812      	ldrb	r2, [r2, #0]
 80029fc:	b252      	sxtb	r2, r2
 80029fe:	b292      	uxth	r2, r2
 8002a00:	4353      	muls	r3, r2
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	1c1a      	adds	r2, r3, #0
 8002a06:	1c13      	adds	r3, r2, #0
 8002a08:	18db      	adds	r3, r3, r3
 8002a0a:	189b      	adds	r3, r3, r2
 8002a0c:	18db      	adds	r3, r3, r3
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	4b52      	ldr	r3, [pc, #328]	; (8002b5c <drawChar+0x68c>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	1c19      	adds	r1, r3, #0
 8002a18:	0089      	lsls	r1, r1, #2
 8002a1a:	18cb      	adds	r3, r1, r3
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	18d3      	adds	r3, r2, r3
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	210e      	movs	r1, #14
 8002a24:	2018      	movs	r0, #24
 8002a26:	183b      	adds	r3, r7, r0
 8002a28:	185b      	adds	r3, r3, r1
 8002a2a:	801a      	strh	r2, [r3, #0]
						address += rowOffset*k+l;
 8002a2c:	231d      	movs	r3, #29
 8002a2e:	2218      	movs	r2, #24
 8002a30:	4694      	mov	ip, r2
 8002a32:	44bc      	add	ip, r7
 8002a34:	4463      	add	r3, ip
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	b25b      	sxtb	r3, r3
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	2226      	movs	r2, #38	; 0x26
 8002a3e:	2418      	movs	r4, #24
 8002a40:	46a4      	mov	ip, r4
 8002a42:	44bc      	add	ip, r7
 8002a44:	4462      	add	r2, ip
 8002a46:	8812      	ldrh	r2, [r2, #0]
 8002a48:	4353      	muls	r3, r2
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	251c      	movs	r5, #28
 8002a4e:	183b      	adds	r3, r7, r0
 8002a50:	195b      	adds	r3, r3, r5
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	b25b      	sxtb	r3, r3
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	18d3      	adds	r3, r2, r3
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	183b      	adds	r3, r7, r0
 8002a5e:	185b      	adds	r3, r3, r1
 8002a60:	881b      	ldrh	r3, [r3, #0]
 8002a62:	18d3      	adds	r3, r2, r3
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	183b      	adds	r3, r7, r0
 8002a68:	185b      	adds	r3, r3, r1
 8002a6a:	801a      	strh	r2, [r3, #0]
						buffer[address] = colorFixer(bg);
 8002a6c:	4b3c      	ldr	r3, [pc, #240]	; (8002b60 <drawChar+0x690>)
 8002a6e:	881a      	ldrh	r2, [r3, #0]
 8002a70:	0006      	movs	r6, r0
 8002a72:	183b      	adds	r3, r7, r0
 8002a74:	185b      	adds	r3, r3, r1
 8002a76:	2400      	movs	r4, #0
 8002a78:	5f1c      	ldrsh	r4, [r3, r4]
 8002a7a:	0010      	movs	r0, r2
 8002a7c:	f7ff fa4e 	bl	8001f1c <colorFixer>
 8002a80:	0003      	movs	r3, r0
 8002a82:	0019      	movs	r1, r3
 8002a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a86:	0062      	lsls	r2, r4, #1
 8002a88:	52d1      	strh	r1, [r2, r3]
					for (int8_t l = 0; l < textSize; l++) {
 8002a8a:	19bb      	adds	r3, r7, r6
 8002a8c:	195b      	adds	r3, r3, r5
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	b25b      	sxtb	r3, r3
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	3301      	adds	r3, #1
 8002a96:	b2da      	uxtb	r2, r3
 8002a98:	19bb      	adds	r3, r7, r6
 8002a9a:	195b      	adds	r3, r3, r5
 8002a9c:	701a      	strb	r2, [r3, #0]
 8002a9e:	231c      	movs	r3, #28
 8002aa0:	2218      	movs	r2, #24
 8002aa2:	4694      	mov	ip, r2
 8002aa4:	44bc      	add	ip, r7
 8002aa6:	4463      	add	r3, ip
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	b25b      	sxtb	r3, r3
 8002aac:	4a2b      	ldr	r2, [pc, #172]	; (8002b5c <drawChar+0x68c>)
 8002aae:	7812      	ldrb	r2, [r2, #0]
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	db95      	blt.n	80029e0 <drawChar+0x510>
				for (int8_t k = 0; k < textSize; k++) {
 8002ab4:	211d      	movs	r1, #29
 8002ab6:	2018      	movs	r0, #24
 8002ab8:	183b      	adds	r3, r7, r0
 8002aba:	185b      	adds	r3, r3, r1
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	b25b      	sxtb	r3, r3
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	183b      	adds	r3, r7, r0
 8002ac8:	185b      	adds	r3, r3, r1
 8002aca:	701a      	strb	r2, [r3, #0]
 8002acc:	231d      	movs	r3, #29
 8002ace:	2218      	movs	r2, #24
 8002ad0:	4694      	mov	ip, r2
 8002ad2:	44bc      	add	ip, r7
 8002ad4:	4463      	add	r3, ip
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	b25b      	sxtb	r3, r3
 8002ada:	4a20      	ldr	r2, [pc, #128]	; (8002b5c <drawChar+0x68c>)
 8002adc:	7812      	ldrb	r2, [r2, #0]
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	da00      	bge.n	8002ae4 <drawChar+0x614>
 8002ae2:	e775      	b.n	80029d0 <drawChar+0x500>
		for (int8_t j = 0; j < 8; j++) {
 8002ae4:	211e      	movs	r1, #30
 8002ae6:	2018      	movs	r0, #24
 8002ae8:	183b      	adds	r3, r7, r0
 8002aea:	185b      	adds	r3, r3, r1
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	b25b      	sxtb	r3, r3
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	3301      	adds	r3, #1
 8002af4:	b2da      	uxtb	r2, r3
 8002af6:	183b      	adds	r3, r7, r0
 8002af8:	185b      	adds	r3, r3, r1
 8002afa:	701a      	strb	r2, [r3, #0]
 8002afc:	231e      	movs	r3, #30
 8002afe:	2218      	movs	r2, #24
 8002b00:	4694      	mov	ip, r2
 8002b02:	44bc      	add	ip, r7
 8002b04:	4463      	add	r3, ip
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	b25b      	sxtb	r3, r3
 8002b0a:	2b07      	cmp	r3, #7
 8002b0c:	dc00      	bgt.n	8002b10 <drawChar+0x640>
 8002b0e:	e73c      	b.n	800298a <drawChar+0x4ba>
				}
			}
		}
	}

	drawBuffer(cursorX, cursorY, 6*textSize, 8*textSize, buffer, bufferSize, hspi);
 8002b10:	4b15      	ldr	r3, [pc, #84]	; (8002b68 <drawChar+0x698>)
 8002b12:	7818      	ldrb	r0, [r3, #0]
 8002b14:	4b15      	ldr	r3, [pc, #84]	; (8002b6c <drawChar+0x69c>)
 8002b16:	7819      	ldrb	r1, [r3, #0]
 8002b18:	4b10      	ldr	r3, [pc, #64]	; (8002b5c <drawChar+0x68c>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	1c1a      	adds	r2, r3, #0
 8002b1e:	1c13      	adds	r3, r2, #0
 8002b20:	18db      	adds	r3, r3, r3
 8002b22:	189b      	adds	r3, r3, r2
 8002b24:	18db      	adds	r3, r3, r3
 8002b26:	b2dc      	uxtb	r4, r3
 8002b28:	4b0c      	ldr	r3, [pc, #48]	; (8002b5c <drawChar+0x68c>)
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	b2dd      	uxtb	r5, r3
 8002b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	9202      	str	r2, [sp, #8]
 8002b36:	221a      	movs	r2, #26
 8002b38:	2618      	movs	r6, #24
 8002b3a:	46b4      	mov	ip, r6
 8002b3c:	44bc      	add	ip, r7
 8002b3e:	4462      	add	r2, ip
 8002b40:	8812      	ldrh	r2, [r2, #0]
 8002b42:	9201      	str	r2, [sp, #4]
 8002b44:	9300      	str	r3, [sp, #0]
 8002b46:	002b      	movs	r3, r5
 8002b48:	0022      	movs	r2, r4
 8002b4a:	f7ff fb58 	bl	80021fe <drawBuffer>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	469d      	mov	sp, r3
}
 8002b52:	46c0      	nop			; (mov r8, r8)
 8002b54:	46bd      	mov	sp, r7
 8002b56:	b011      	add	sp, #68	; 0x44
 8002b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b5a:	46c0      	nop			; (mov r8, r8)
 8002b5c:	200000ee 	.word	0x200000ee
 8002b60:	200000f2 	.word	0x200000f2
 8002b64:	200000f0 	.word	0x200000f0
 8002b68:	200000ec 	.word	0x200000ec
 8002b6c:	200000ed 	.word	0x200000ed

08002b70 <drawText>:

// draws character strings
void drawText(const char *str, SPI_HandleTypeDef *hspi) {
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
	for (int i = 0; str[i] != '\0'; i++) {
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60fb      	str	r3, [r7, #12]
 8002b7e:	e01d      	b.n	8002bbc <drawText+0x4c>
		drawChar(str[i], hspi);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	18d3      	adds	r3, r2, r3
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	0011      	movs	r1, r2
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	f7ff fc9f 	bl	80024d0 <drawChar>

		// moves cursor on every character print so it's not printed to the same place
		setCursor(cursorX+textSize*6, cursorY);
 8002b92:	4b0f      	ldr	r3, [pc, #60]	; (8002bd0 <drawText+0x60>)
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	1c1a      	adds	r2, r3, #0
 8002b98:	1c13      	adds	r3, r2, #0
 8002b9a:	18db      	adds	r3, r3, r3
 8002b9c:	189b      	adds	r3, r3, r2
 8002b9e:	18db      	adds	r3, r3, r3
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	4b0c      	ldr	r3, [pc, #48]	; (8002bd4 <drawText+0x64>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	18d3      	adds	r3, r2, r3
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	4b0b      	ldr	r3, [pc, #44]	; (8002bd8 <drawText+0x68>)
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	0019      	movs	r1, r3
 8002bb0:	0010      	movs	r0, r2
 8002bb2:	f000 f9c5 	bl	8002f40 <setCursor>
	for (int i = 0; str[i] != '\0'; i++) {
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	18d3      	adds	r3, r2, r3
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1db      	bne.n	8002b80 <drawText+0x10>
	}
}
 8002bc8:	46c0      	nop			; (mov r8, r8)
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	b004      	add	sp, #16
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	200000ee 	.word	0x200000ee
 8002bd4:	200000ec 	.word	0x200000ec
 8002bd8:	200000ed 	.word	0x200000ed

08002bdc <drawTextAt>:

// drawText, but coordinates as arguments. coordinates are for upper left bound
void drawTextAt(uint8_t x, uint8_t y, const char *str, SPI_HandleTypeDef *hspi) {
 8002bdc:	b590      	push	{r4, r7, lr}
 8002bde:	b087      	sub	sp, #28
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60ba      	str	r2, [r7, #8]
 8002be4:	607b      	str	r3, [r7, #4]
 8002be6:	240f      	movs	r4, #15
 8002be8:	193b      	adds	r3, r7, r4
 8002bea:	1c02      	adds	r2, r0, #0
 8002bec:	701a      	strb	r2, [r3, #0]
 8002bee:	200e      	movs	r0, #14
 8002bf0:	183b      	adds	r3, r7, r0
 8002bf2:	1c0a      	adds	r2, r1, #0
 8002bf4:	701a      	strb	r2, [r3, #0]
	// add text wrap
	int i = 0;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	617b      	str	r3, [r7, #20]
	setCursor(x,y);
 8002bfa:	183b      	adds	r3, r7, r0
 8002bfc:	781a      	ldrb	r2, [r3, #0]
 8002bfe:	193b      	adds	r3, r7, r4
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	0011      	movs	r1, r2
 8002c04:	0018      	movs	r0, r3
 8002c06:	f000 f99b 	bl	8002f40 <setCursor>
	for (i = 0; str[i] != '\0'; i++) {
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	617b      	str	r3, [r7, #20]
 8002c0e:	e01d      	b.n	8002c4c <drawTextAt+0x70>
		drawChar(str[i], hspi);
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	18d3      	adds	r3, r2, r3
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	0011      	movs	r1, r2
 8002c1c:	0018      	movs	r0, r3
 8002c1e:	f7ff fc57 	bl	80024d0 <drawChar>
		setCursor(cursorX+textSize*6, cursorY);
 8002c22:	4b0f      	ldr	r3, [pc, #60]	; (8002c60 <drawTextAt+0x84>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	1c1a      	adds	r2, r3, #0
 8002c28:	1c13      	adds	r3, r2, #0
 8002c2a:	18db      	adds	r3, r3, r3
 8002c2c:	189b      	adds	r3, r3, r2
 8002c2e:	18db      	adds	r3, r3, r3
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	4b0c      	ldr	r3, [pc, #48]	; (8002c64 <drawTextAt+0x88>)
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	18d3      	adds	r3, r2, r3
 8002c38:	b2da      	uxtb	r2, r3
 8002c3a:	4b0b      	ldr	r3, [pc, #44]	; (8002c68 <drawTextAt+0x8c>)
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	0019      	movs	r1, r3
 8002c40:	0010      	movs	r0, r2
 8002c42:	f000 f97d 	bl	8002f40 <setCursor>
	for (i = 0; str[i] != '\0'; i++) {
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	617b      	str	r3, [r7, #20]
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	68ba      	ldr	r2, [r7, #8]
 8002c50:	18d3      	adds	r3, r2, r3
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1db      	bne.n	8002c10 <drawTextAt+0x34>
	}
}
 8002c58:	46c0      	nop			; (mov r8, r8)
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	b007      	add	sp, #28
 8002c5e:	bd90      	pop	{r4, r7, pc}
 8002c60:	200000ee 	.word	0x200000ee
 8002c64:	200000ec 	.word	0x200000ec
 8002c68:	200000ed 	.word	0x200000ed

08002c6c <drawCenteredText>:

// draws text centered on an x coordinate. y is upper bound of box
void drawCenteredText(uint8_t x_center, uint8_t y, const char *str, SPI_HandleTypeDef *hspi) {
 8002c6c:	b590      	push	{r4, r7, lr}
 8002c6e:	b089      	sub	sp, #36	; 0x24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60ba      	str	r2, [r7, #8]
 8002c74:	607b      	str	r3, [r7, #4]
 8002c76:	230f      	movs	r3, #15
 8002c78:	18fb      	adds	r3, r7, r3
 8002c7a:	1c02      	adds	r2, r0, #0
 8002c7c:	701a      	strb	r2, [r3, #0]
 8002c7e:	240e      	movs	r4, #14
 8002c80:	193b      	adds	r3, r7, r4
 8002c82:	1c0a      	adds	r2, r1, #0
 8002c84:	701a      	strb	r2, [r3, #0]
	uint8_t strSize = strlen(str);
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	0018      	movs	r0, r3
 8002c8a:	f7fd fa3d 	bl	8000108 <strlen>
 8002c8e:	0002      	movs	r2, r0
 8002c90:	231f      	movs	r3, #31
 8002c92:	18fb      	adds	r3, r7, r3
 8002c94:	701a      	strb	r2, [r3, #0]
	// bounds checking. text box needed to print text should not end up out of bounds
	// also calculating what bounds of text box should be
	if (y+textSize*8 > HEIGHT) return;
 8002c96:	193b      	adds	r3, r7, r4
 8002c98:	781a      	ldrb	r2, [r3, #0]
 8002c9a:	4b24      	ldr	r3, [pc, #144]	; (8002d2c <drawCenteredText+0xc0>)
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	18d3      	adds	r3, r2, r3
 8002ca2:	2ba0      	cmp	r3, #160	; 0xa0
 8002ca4:	dc3a      	bgt.n	8002d1c <drawCenteredText+0xb0>
	int leftBound = x_center-(strSize*textSize*6)/2;
 8002ca6:	230f      	movs	r3, #15
 8002ca8:	18fb      	adds	r3, r7, r3
 8002caa:	7819      	ldrb	r1, [r3, #0]
 8002cac:	231f      	movs	r3, #31
 8002cae:	18fb      	adds	r3, r7, r3
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	4a1e      	ldr	r2, [pc, #120]	; (8002d2c <drawCenteredText+0xc0>)
 8002cb4:	7812      	ldrb	r2, [r2, #0]
 8002cb6:	435a      	muls	r2, r3
 8002cb8:	0013      	movs	r3, r2
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	189b      	adds	r3, r3, r2
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	d500      	bpl.n	8002cc4 <drawCenteredText+0x58>
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	105b      	asrs	r3, r3, #1
 8002cc6:	425b      	negs	r3, r3
 8002cc8:	18cb      	adds	r3, r1, r3
 8002cca:	61bb      	str	r3, [r7, #24]
	int rightBound = x_center+(strSize*textSize*6)/2;
 8002ccc:	230f      	movs	r3, #15
 8002cce:	18fb      	adds	r3, r7, r3
 8002cd0:	7819      	ldrb	r1, [r3, #0]
 8002cd2:	231f      	movs	r3, #31
 8002cd4:	18fb      	adds	r3, r7, r3
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	4a14      	ldr	r2, [pc, #80]	; (8002d2c <drawCenteredText+0xc0>)
 8002cda:	7812      	ldrb	r2, [r2, #0]
 8002cdc:	435a      	muls	r2, r3
 8002cde:	0013      	movs	r3, r2
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	189b      	adds	r3, r3, r2
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	d500      	bpl.n	8002cea <drawCenteredText+0x7e>
 8002ce8:	3301      	adds	r3, #1
 8002cea:	105b      	asrs	r3, r3, #1
 8002cec:	18cb      	adds	r3, r1, r3
 8002cee:	617b      	str	r3, [r7, #20]
	if (leftBound < 0) return;
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	db14      	blt.n	8002d20 <drawCenteredText+0xb4>
	if (rightBound > WIDTH) return;
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	2b80      	cmp	r3, #128	; 0x80
 8002cfa:	dc13      	bgt.n	8002d24 <drawCenteredText+0xb8>

	setCursor(leftBound, y);
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	b2da      	uxtb	r2, r3
 8002d00:	230e      	movs	r3, #14
 8002d02:	18fb      	adds	r3, r7, r3
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	0019      	movs	r1, r3
 8002d08:	0010      	movs	r0, r2
 8002d0a:	f000 f919 	bl	8002f40 <setCursor>
	drawText(str, hspi);
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	0011      	movs	r1, r2
 8002d14:	0018      	movs	r0, r3
 8002d16:	f7ff ff2b 	bl	8002b70 <drawText>
 8002d1a:	e004      	b.n	8002d26 <drawCenteredText+0xba>
	if (y+textSize*8 > HEIGHT) return;
 8002d1c:	46c0      	nop			; (mov r8, r8)
 8002d1e:	e002      	b.n	8002d26 <drawCenteredText+0xba>
	if (leftBound < 0) return;
 8002d20:	46c0      	nop			; (mov r8, r8)
 8002d22:	e000      	b.n	8002d26 <drawCenteredText+0xba>
	if (rightBound > WIDTH) return;
 8002d24:	46c0      	nop			; (mov r8, r8)
}
 8002d26:	46bd      	mov	sp, r7
 8002d28:	b009      	add	sp, #36	; 0x24
 8002d2a:	bd90      	pop	{r4, r7, pc}
 8002d2c:	200000ee 	.word	0x200000ee

08002d30 <drawCenteredTextWithPadding>:

// drawCenteredText, but background is filled to left and right of box
// used for cases where you're printing strings to the same place, but they have different sizes
void drawCenteredTextWithPadding(uint8_t x_center, uint8_t y, uint8_t maxLength, const char *str, SPI_HandleTypeDef *hspi) {
 8002d30:	b5b0      	push	{r4, r5, r7, lr}
 8002d32:	b088      	sub	sp, #32
 8002d34:	af02      	add	r7, sp, #8
 8002d36:	0004      	movs	r4, r0
 8002d38:	0008      	movs	r0, r1
 8002d3a:	0011      	movs	r1, r2
 8002d3c:	603b      	str	r3, [r7, #0]
 8002d3e:	1dfb      	adds	r3, r7, #7
 8002d40:	1c22      	adds	r2, r4, #0
 8002d42:	701a      	strb	r2, [r3, #0]
 8002d44:	1dbb      	adds	r3, r7, #6
 8002d46:	1c02      	adds	r2, r0, #0
 8002d48:	701a      	strb	r2, [r3, #0]
 8002d4a:	1d7b      	adds	r3, r7, #5
 8002d4c:	1c0a      	adds	r2, r1, #0
 8002d4e:	701a      	strb	r2, [r3, #0]
	// bounds checking. text box needed to print text should not end up out of bounds
	if (y+textSize*8 > HEIGHT) return;
 8002d50:	1dbb      	adds	r3, r7, #6
 8002d52:	781a      	ldrb	r2, [r3, #0]
 8002d54:	4b60      	ldr	r3, [pc, #384]	; (8002ed8 <drawCenteredTextWithPadding+0x1a8>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	18d3      	adds	r3, r2, r3
 8002d5c:	2ba0      	cmp	r3, #160	; 0xa0
 8002d5e:	dd00      	ble.n	8002d62 <drawCenteredTextWithPadding+0x32>
 8002d60:	e0af      	b.n	8002ec2 <drawCenteredTextWithPadding+0x192>
	int leftBound = x_center-(maxLength*textSize*6)/2;
 8002d62:	1dfb      	adds	r3, r7, #7
 8002d64:	7819      	ldrb	r1, [r3, #0]
 8002d66:	1d7b      	adds	r3, r7, #5
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	4a5b      	ldr	r2, [pc, #364]	; (8002ed8 <drawCenteredTextWithPadding+0x1a8>)
 8002d6c:	7812      	ldrb	r2, [r2, #0]
 8002d6e:	435a      	muls	r2, r3
 8002d70:	0013      	movs	r3, r2
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	189b      	adds	r3, r3, r2
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	d500      	bpl.n	8002d7c <drawCenteredTextWithPadding+0x4c>
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	105b      	asrs	r3, r3, #1
 8002d7e:	425b      	negs	r3, r3
 8002d80:	18cb      	adds	r3, r1, r3
 8002d82:	617b      	str	r3, [r7, #20]
	int rightBound = x_center+(maxLength*textSize*6)/2;
 8002d84:	1dfb      	adds	r3, r7, #7
 8002d86:	7819      	ldrb	r1, [r3, #0]
 8002d88:	1d7b      	adds	r3, r7, #5
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	4a52      	ldr	r2, [pc, #328]	; (8002ed8 <drawCenteredTextWithPadding+0x1a8>)
 8002d8e:	7812      	ldrb	r2, [r2, #0]
 8002d90:	435a      	muls	r2, r3
 8002d92:	0013      	movs	r3, r2
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	189b      	adds	r3, r3, r2
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	d500      	bpl.n	8002d9e <drawCenteredTextWithPadding+0x6e>
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	105b      	asrs	r3, r3, #1
 8002da0:	18cb      	adds	r3, r1, r3
 8002da2:	613b      	str	r3, [r7, #16]
	if (leftBound < 0) return;
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	da00      	bge.n	8002dac <drawCenteredTextWithPadding+0x7c>
 8002daa:	e08c      	b.n	8002ec6 <drawCenteredTextWithPadding+0x196>
	if (rightBound > WIDTH) return;
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	2b80      	cmp	r3, #128	; 0x80
 8002db0:	dd00      	ble.n	8002db4 <drawCenteredTextWithPadding+0x84>
 8002db2:	e08a      	b.n	8002eca <drawCenteredTextWithPadding+0x19a>

	uint8_t strSize = strlen(str);
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	0018      	movs	r0, r3
 8002db8:	f7fd f9a6 	bl	8000108 <strlen>
 8002dbc:	0002      	movs	r2, r0
 8002dbe:	210f      	movs	r1, #15
 8002dc0:	187b      	adds	r3, r7, r1
 8002dc2:	701a      	strb	r2, [r3, #0]
	if (maxLength < strSize) return;		// size should not be greater than max
 8002dc4:	1d7a      	adds	r2, r7, #5
 8002dc6:	187b      	adds	r3, r7, r1
 8002dc8:	7812      	ldrb	r2, [r2, #0]
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d200      	bcs.n	8002dd2 <drawCenteredTextWithPadding+0xa2>
 8002dd0:	e07d      	b.n	8002ece <drawCenteredTextWithPadding+0x19e>

	// draw left and right padding
	uint8_t diff = maxLength-strSize;
 8002dd2:	240e      	movs	r4, #14
 8002dd4:	193b      	adds	r3, r7, r4
 8002dd6:	1d79      	adds	r1, r7, #5
 8002dd8:	220f      	movs	r2, #15
 8002dda:	18ba      	adds	r2, r7, r2
 8002ddc:	7809      	ldrb	r1, [r1, #0]
 8002dde:	7812      	ldrb	r2, [r2, #0]
 8002de0:	1a8a      	subs	r2, r1, r2
 8002de2:	701a      	strb	r2, [r3, #0]
	fillRect(leftBound, y, diff*textSize*6/2, textSize*8, bg, hspi);		// math out of order to accomodate diff/2 being a non-int
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	b2d8      	uxtb	r0, r3
 8002de8:	193b      	adds	r3, r7, r4
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	4a3a      	ldr	r2, [pc, #232]	; (8002ed8 <drawCenteredTextWithPadding+0x1a8>)
 8002dee:	7812      	ldrb	r2, [r2, #0]
 8002df0:	435a      	muls	r2, r3
 8002df2:	0013      	movs	r3, r2
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	189b      	adds	r3, r3, r2
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	d500      	bpl.n	8002dfe <drawCenteredTextWithPadding+0xce>
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	105b      	asrs	r3, r3, #1
 8002e00:	b2dc      	uxtb	r4, r3
 8002e02:	4b35      	ldr	r3, [pc, #212]	; (8002ed8 <drawCenteredTextWithPadding+0x1a8>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	b2dd      	uxtb	r5, r3
 8002e0a:	4b34      	ldr	r3, [pc, #208]	; (8002edc <drawCenteredTextWithPadding+0x1ac>)
 8002e0c:	881b      	ldrh	r3, [r3, #0]
 8002e0e:	1dba      	adds	r2, r7, #6
 8002e10:	7811      	ldrb	r1, [r2, #0]
 8002e12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e14:	9201      	str	r2, [sp, #4]
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	002b      	movs	r3, r5
 8002e1a:	0022      	movs	r2, r4
 8002e1c:	f7ff fa91 	bl	8002342 <fillRect>
	fillRect(rightBound-diff*textSize*6/2, y, diff*textSize*6/2, textSize*8, bg, hspi);
 8002e20:	230e      	movs	r3, #14
 8002e22:	18fb      	adds	r3, r7, r3
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	4a2c      	ldr	r2, [pc, #176]	; (8002ed8 <drawCenteredTextWithPadding+0x1a8>)
 8002e28:	7812      	ldrb	r2, [r2, #0]
 8002e2a:	435a      	muls	r2, r3
 8002e2c:	0013      	movs	r3, r2
 8002e2e:	005b      	lsls	r3, r3, #1
 8002e30:	189b      	adds	r3, r3, r2
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	d500      	bpl.n	8002e38 <drawCenteredTextWithPadding+0x108>
 8002e36:	3301      	adds	r3, #1
 8002e38:	105b      	asrs	r3, r3, #1
 8002e3a:	425b      	negs	r3, r3
 8002e3c:	b2da      	uxtb	r2, r3
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	18d3      	adds	r3, r2, r3
 8002e44:	b2d8      	uxtb	r0, r3
 8002e46:	230e      	movs	r3, #14
 8002e48:	18fb      	adds	r3, r7, r3
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	4a22      	ldr	r2, [pc, #136]	; (8002ed8 <drawCenteredTextWithPadding+0x1a8>)
 8002e4e:	7812      	ldrb	r2, [r2, #0]
 8002e50:	435a      	muls	r2, r3
 8002e52:	0013      	movs	r3, r2
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	189b      	adds	r3, r3, r2
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	d500      	bpl.n	8002e5e <drawCenteredTextWithPadding+0x12e>
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	105b      	asrs	r3, r3, #1
 8002e60:	b2dc      	uxtb	r4, r3
 8002e62:	4b1d      	ldr	r3, [pc, #116]	; (8002ed8 <drawCenteredTextWithPadding+0x1a8>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	b2dd      	uxtb	r5, r3
 8002e6a:	4b1c      	ldr	r3, [pc, #112]	; (8002edc <drawCenteredTextWithPadding+0x1ac>)
 8002e6c:	881b      	ldrh	r3, [r3, #0]
 8002e6e:	1dba      	adds	r2, r7, #6
 8002e70:	7811      	ldrb	r1, [r2, #0]
 8002e72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e74:	9201      	str	r2, [sp, #4]
 8002e76:	9300      	str	r3, [sp, #0]
 8002e78:	002b      	movs	r3, r5
 8002e7a:	0022      	movs	r2, r4
 8002e7c:	f7ff fa61 	bl	8002342 <fillRect>

	int textLeftBound = x_center-(strSize*textSize*6)/2;
 8002e80:	1dfb      	adds	r3, r7, #7
 8002e82:	7819      	ldrb	r1, [r3, #0]
 8002e84:	230f      	movs	r3, #15
 8002e86:	18fb      	adds	r3, r7, r3
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	4a13      	ldr	r2, [pc, #76]	; (8002ed8 <drawCenteredTextWithPadding+0x1a8>)
 8002e8c:	7812      	ldrb	r2, [r2, #0]
 8002e8e:	435a      	muls	r2, r3
 8002e90:	0013      	movs	r3, r2
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	189b      	adds	r3, r3, r2
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	d500      	bpl.n	8002e9c <drawCenteredTextWithPadding+0x16c>
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	105b      	asrs	r3, r3, #1
 8002e9e:	425b      	negs	r3, r3
 8002ea0:	18cb      	adds	r3, r1, r3
 8002ea2:	60bb      	str	r3, [r7, #8]
	setCursor(textLeftBound, y);
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	b2da      	uxtb	r2, r3
 8002ea8:	1dbb      	adds	r3, r7, #6
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	0019      	movs	r1, r3
 8002eae:	0010      	movs	r0, r2
 8002eb0:	f000 f846 	bl	8002f40 <setCursor>
	drawText(str, hspi);
 8002eb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	0011      	movs	r1, r2
 8002eba:	0018      	movs	r0, r3
 8002ebc:	f7ff fe58 	bl	8002b70 <drawText>
 8002ec0:	e006      	b.n	8002ed0 <drawCenteredTextWithPadding+0x1a0>
	if (y+textSize*8 > HEIGHT) return;
 8002ec2:	46c0      	nop			; (mov r8, r8)
 8002ec4:	e004      	b.n	8002ed0 <drawCenteredTextWithPadding+0x1a0>
	if (leftBound < 0) return;
 8002ec6:	46c0      	nop			; (mov r8, r8)
 8002ec8:	e002      	b.n	8002ed0 <drawCenteredTextWithPadding+0x1a0>
	if (rightBound > WIDTH) return;
 8002eca:	46c0      	nop			; (mov r8, r8)
 8002ecc:	e000      	b.n	8002ed0 <drawCenteredTextWithPadding+0x1a0>
	if (maxLength < strSize) return;		// size should not be greater than max
 8002ece:	46c0      	nop			; (mov r8, r8)
}
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	b006      	add	sp, #24
 8002ed4:	bdb0      	pop	{r4, r5, r7, pc}
 8002ed6:	46c0      	nop			; (mov r8, r8)
 8002ed8:	200000ee 	.word	0x200000ee
 8002edc:	200000f2 	.word	0x200000f2

08002ee0 <clearTextLine>:

// clear a line of text. y gives upper bound of text box
void clearTextLine(uint8_t y, SPI_HandleTypeDef *hspi) {
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af02      	add	r7, sp, #8
 8002ee6:	0002      	movs	r2, r0
 8002ee8:	6039      	str	r1, [r7, #0]
 8002eea:	1dfb      	adds	r3, r7, #7
 8002eec:	701a      	strb	r2, [r3, #0]
	fillRect(0, y, WIDTH, textSize*8, bg, hspi);
 8002eee:	4b0a      	ldr	r3, [pc, #40]	; (8002f18 <clearTextLine+0x38>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	b2d8      	uxtb	r0, r3
 8002ef6:	4b09      	ldr	r3, [pc, #36]	; (8002f1c <clearTextLine+0x3c>)
 8002ef8:	881b      	ldrh	r3, [r3, #0]
 8002efa:	1dfa      	adds	r2, r7, #7
 8002efc:	7811      	ldrb	r1, [r2, #0]
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	9201      	str	r2, [sp, #4]
 8002f02:	9300      	str	r3, [sp, #0]
 8002f04:	0003      	movs	r3, r0
 8002f06:	2280      	movs	r2, #128	; 0x80
 8002f08:	2000      	movs	r0, #0
 8002f0a:	f7ff fa1a 	bl	8002342 <fillRect>
}
 8002f0e:	46c0      	nop			; (mov r8, r8)
 8002f10:	46bd      	mov	sp, r7
 8002f12:	b002      	add	sp, #8
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	46c0      	nop			; (mov r8, r8)
 8002f18:	200000ee 	.word	0x200000ee
 8002f1c:	200000f2 	.word	0x200000f2

08002f20 <setBackgroundColor>:

// ---- getters and setters ----
// sets static variables
void setBackgroundColor(uint16_t color) {bg = color;}
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	0002      	movs	r2, r0
 8002f28:	1dbb      	adds	r3, r7, #6
 8002f2a:	801a      	strh	r2, [r3, #0]
 8002f2c:	4b03      	ldr	r3, [pc, #12]	; (8002f3c <setBackgroundColor+0x1c>)
 8002f2e:	1dba      	adds	r2, r7, #6
 8002f30:	8812      	ldrh	r2, [r2, #0]
 8002f32:	801a      	strh	r2, [r3, #0]
 8002f34:	46c0      	nop			; (mov r8, r8)
 8002f36:	46bd      	mov	sp, r7
 8002f38:	b002      	add	sp, #8
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	200000f2 	.word	0x200000f2

08002f40 <setCursor>:

void setCursor(uint8_t x, uint8_t y) {
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	0002      	movs	r2, r0
 8002f48:	1dfb      	adds	r3, r7, #7
 8002f4a:	701a      	strb	r2, [r3, #0]
 8002f4c:	1dbb      	adds	r3, r7, #6
 8002f4e:	1c0a      	adds	r2, r1, #0
 8002f50:	701a      	strb	r2, [r3, #0]
	cursorX = x;
 8002f52:	4b06      	ldr	r3, [pc, #24]	; (8002f6c <setCursor+0x2c>)
 8002f54:	1dfa      	adds	r2, r7, #7
 8002f56:	7812      	ldrb	r2, [r2, #0]
 8002f58:	701a      	strb	r2, [r3, #0]
	cursorY = y;
 8002f5a:	4b05      	ldr	r3, [pc, #20]	; (8002f70 <setCursor+0x30>)
 8002f5c:	1dba      	adds	r2, r7, #6
 8002f5e:	7812      	ldrb	r2, [r2, #0]
 8002f60:	701a      	strb	r2, [r3, #0]
}
 8002f62:	46c0      	nop			; (mov r8, r8)
 8002f64:	46bd      	mov	sp, r7
 8002f66:	b002      	add	sp, #8
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	46c0      	nop			; (mov r8, r8)
 8002f6c:	200000ec 	.word	0x200000ec
 8002f70:	200000ed 	.word	0x200000ed

08002f74 <setTextSize>:

void setTextSize(uint8_t size) {textSize = size;}
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	0002      	movs	r2, r0
 8002f7c:	1dfb      	adds	r3, r7, #7
 8002f7e:	701a      	strb	r2, [r3, #0]
 8002f80:	4b03      	ldr	r3, [pc, #12]	; (8002f90 <setTextSize+0x1c>)
 8002f82:	1dfa      	adds	r2, r7, #7
 8002f84:	7812      	ldrb	r2, [r2, #0]
 8002f86:	701a      	strb	r2, [r3, #0]
 8002f88:	46c0      	nop			; (mov r8, r8)
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	b002      	add	sp, #8
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	200000ee 	.word	0x200000ee

08002f94 <setTextColor>:

void setTextColor(uint16_t color) {textColor = color;}
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	0002      	movs	r2, r0
 8002f9c:	1dbb      	adds	r3, r7, #6
 8002f9e:	801a      	strh	r2, [r3, #0]
 8002fa0:	4b03      	ldr	r3, [pc, #12]	; (8002fb0 <setTextColor+0x1c>)
 8002fa2:	1dba      	adds	r2, r7, #6
 8002fa4:	8812      	ldrh	r2, [r2, #0]
 8002fa6:	801a      	strh	r2, [r3, #0]
 8002fa8:	46c0      	nop			; (mov r8, r8)
 8002faa:	46bd      	mov	sp, r7
 8002fac:	b002      	add	sp, #8
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	200000f0 	.word	0x200000f0

08002fb4 <batteryManager>:

static const float batteryCapacity[];
static uint16_t batteryCapacityArraySize = 179;

// spi used to turn display on/off and drawing battery graphic
void batteryManager(ADC_HandleTypeDef *hadc, SPI_HandleTypeDef *hspi, TIM_HandleTypeDef *timerStopwatchTim, TIM_HandleTypeDef *backlightTim) {
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
 8002fc0:	603b      	str	r3, [r7, #0]
	if (canSampleBattery) {
 8002fc2:	4b0d      	ldr	r3, [pc, #52]	; (8002ff8 <batteryManager+0x44>)
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d011      	beq.n	8002ff0 <batteryManager+0x3c>
		canSampleBattery = 0;
 8002fcc:	4b0a      	ldr	r3, [pc, #40]	; (8002ff8 <batteryManager+0x44>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	701a      	strb	r2, [r3, #0]

		battPercentage = getBatteryPercentage(hadc);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	f000 f813 	bl	8003000 <getBatteryPercentage>
 8002fda:	0003      	movs	r3, r0
 8002fdc:	001a      	movs	r2, r3
 8002fde:	4b07      	ldr	r3, [pc, #28]	; (8002ffc <batteryManager+0x48>)
 8002fe0:	801a      	strh	r2, [r3, #0]
//			}
//			HAL_GPIO_WritePin(POWER_SUPPLY_ENABLE_PORT, POWER_SUPPLY_ENABLE_PIN, GPIO_PIN_SET);
//			bState = batteryNormal;
//		}

		drawBattery(battPercentage, hspi);
 8002fe2:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <batteryManager+0x48>)
 8002fe4:	881b      	ldrh	r3, [r3, #0]
 8002fe6:	68ba      	ldr	r2, [r7, #8]
 8002fe8:	0011      	movs	r1, r2
 8002fea:	0018      	movs	r0, r3
 8002fec:	f003 fb08 	bl	8006600 <drawBattery>
	}
}
 8002ff0:	46c0      	nop			; (mov r8, r8)
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	b004      	add	sp, #16
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	2000013e 	.word	0x2000013e
 8002ffc:	2000013c 	.word	0x2000013c

08003000 <getBatteryPercentage>:
	setDisplayBacklight(100, backlightTim);
	runTimerStopwatchBase(timerStopwatchTim);
}

// should return a number from 0-100
uint16_t getBatteryPercentage(ADC_HandleTypeDef *hadc) {
 8003000:	b5b0      	push	{r4, r5, r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
	float v, temp;
	uint8_t index;

	// enable adc voltage divider for measurements, disable after
	HAL_GPIO_WritePin(ADC_DIVIDER_PORT, ADC_DIVIDER_PIN, GPIO_PIN_SET);
 8003008:	23a0      	movs	r3, #160	; 0xa0
 800300a:	05db      	lsls	r3, r3, #23
 800300c:	2201      	movs	r2, #1
 800300e:	2102      	movs	r1, #2
 8003010:	0018      	movs	r0, r3
 8003012:	f004 fea1 	bl	8007d58 <HAL_GPIO_WritePin>
	HAL_ADC_Start(hadc);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	0018      	movs	r0, r3
 800301a:	f003 ffdf 	bl	8006fdc <HAL_ADC_Start>

	HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 800301e:	2301      	movs	r3, #1
 8003020:	425a      	negs	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	0011      	movs	r1, r2
 8003026:	0018      	movs	r0, r3
 8003028:	f004 f86c 	bl	8007104 <HAL_ADC_PollForConversion>
	v = 3.3*HAL_ADC_GetValue(hadc)/(0xFFF);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	0018      	movs	r0, r3
 8003030:	f004 f8fe 	bl	8007230 <HAL_ADC_GetValue>
 8003034:	0003      	movs	r3, r0
 8003036:	0018      	movs	r0, r3
 8003038:	f7fe fd12 	bl	8001a60 <__aeabi_ui2d>
 800303c:	4a2c      	ldr	r2, [pc, #176]	; (80030f0 <getBatteryPercentage+0xf0>)
 800303e:	4b2d      	ldr	r3, [pc, #180]	; (80030f4 <getBatteryPercentage+0xf4>)
 8003040:	f7fe fa62 	bl	8001508 <__aeabi_dmul>
 8003044:	0003      	movs	r3, r0
 8003046:	000c      	movs	r4, r1
 8003048:	0018      	movs	r0, r3
 800304a:	0021      	movs	r1, r4
 800304c:	2200      	movs	r2, #0
 800304e:	4b2a      	ldr	r3, [pc, #168]	; (80030f8 <getBatteryPercentage+0xf8>)
 8003050:	f7fd ff58 	bl	8000f04 <__aeabi_ddiv>
 8003054:	0003      	movs	r3, r0
 8003056:	000c      	movs	r4, r1
 8003058:	0018      	movs	r0, r3
 800305a:	0021      	movs	r1, r4
 800305c:	f7fe fd32 	bl	8001ac4 <__aeabi_d2f>
 8003060:	1c03      	adds	r3, r0, #0
 8003062:	617b      	str	r3, [r7, #20]

	HAL_ADC_Stop(hadc);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	0018      	movs	r0, r3
 8003068:	f004 f80c 	bl	8007084 <HAL_ADC_Stop>
	HAL_GPIO_WritePin(ADC_DIVIDER_PORT, ADC_DIVIDER_PIN, GPIO_PIN_RESET);
 800306c:	23a0      	movs	r3, #160	; 0xa0
 800306e:	05db      	lsls	r3, r3, #23
 8003070:	2200      	movs	r2, #0
 8003072:	2102      	movs	r1, #2
 8003074:	0018      	movs	r0, r3
 8003076:	f004 fe6f 	bl	8007d58 <HAL_GPIO_WritePin>
//	return v*10;

	// trying to look only for 3.9-3.4. anything above 4.0 is 100%, anything below 3.4 is 0%
	// scaled voltages (3.3/4.2) at 3.1429-2.6714
	// indices at 2-153. have to scale and flip to go from 100-0 since 2->100%
	index = search(v);
 800307a:	2513      	movs	r5, #19
 800307c:	197c      	adds	r4, r7, r5
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	1c18      	adds	r0, r3, #0
 8003082:	f000 f841 	bl	8003108 <search>
 8003086:	0003      	movs	r3, r0
 8003088:	7023      	strb	r3, [r4, #0]
	if (index < 2) return 100;
 800308a:	197b      	adds	r3, r7, r5
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d801      	bhi.n	8003096 <getBatteryPercentage+0x96>
 8003092:	2364      	movs	r3, #100	; 0x64
 8003094:	e028      	b.n	80030e8 <getBatteryPercentage+0xe8>
	else if (index >= 153) return 0;
 8003096:	2313      	movs	r3, #19
 8003098:	18fb      	adds	r3, r7, r3
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	2b98      	cmp	r3, #152	; 0x98
 800309e:	d901      	bls.n	80030a4 <getBatteryPercentage+0xa4>
 80030a0:	2300      	movs	r3, #0
 80030a2:	e021      	b.n	80030e8 <getBatteryPercentage+0xe8>
	else {
		index -= 2;
 80030a4:	2113      	movs	r1, #19
 80030a6:	187b      	adds	r3, r7, r1
 80030a8:	187a      	adds	r2, r7, r1
 80030aa:	7812      	ldrb	r2, [r2, #0]
 80030ac:	3a02      	subs	r2, #2
 80030ae:	701a      	strb	r2, [r3, #0]
		temp = index*(100.0/(153-2));
 80030b0:	187b      	adds	r3, r7, r1
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	0018      	movs	r0, r3
 80030b6:	f7fe fc99 	bl	80019ec <__aeabi_i2d>
 80030ba:	4a10      	ldr	r2, [pc, #64]	; (80030fc <getBatteryPercentage+0xfc>)
 80030bc:	4b10      	ldr	r3, [pc, #64]	; (8003100 <getBatteryPercentage+0x100>)
 80030be:	f7fe fa23 	bl	8001508 <__aeabi_dmul>
 80030c2:	0003      	movs	r3, r0
 80030c4:	000c      	movs	r4, r1
 80030c6:	0018      	movs	r0, r3
 80030c8:	0021      	movs	r1, r4
 80030ca:	f7fe fcfb 	bl	8001ac4 <__aeabi_d2f>
 80030ce:	1c03      	adds	r3, r0, #0
 80030d0:	60fb      	str	r3, [r7, #12]
		temp = 100-temp;
 80030d2:	68f9      	ldr	r1, [r7, #12]
 80030d4:	480b      	ldr	r0, [pc, #44]	; (8003104 <getBatteryPercentage+0x104>)
 80030d6:	f7fd fcf1 	bl	8000abc <__aeabi_fsub>
 80030da:	1c03      	adds	r3, r0, #0
 80030dc:	60fb      	str	r3, [r7, #12]
		return temp;
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f7fd f9ca 	bl	8000478 <__aeabi_f2uiz>
 80030e4:	0003      	movs	r3, r0
 80030e6:	b29b      	uxth	r3, r3
	}
}
 80030e8:	0018      	movs	r0, r3
 80030ea:	46bd      	mov	sp, r7
 80030ec:	b006      	add	sp, #24
 80030ee:	bdb0      	pop	{r4, r5, r7, pc}
 80030f0:	66666666 	.word	0x66666666
 80030f4:	400a6666 	.word	0x400a6666
 80030f8:	40affe00 	.word	0x40affe00
 80030fc:	6254c4aa 	.word	0x6254c4aa
 8003100:	3fe5312a 	.word	0x3fe5312a
 8003104:	42c80000 	.word	0x42c80000

08003108 <search>:

// should return index in array
uint8_t search(float val) {
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
	// O(n) lookup. array is only size=179.
	uint8_t i;
	for (i = 0; i < batteryCapacityArraySize; i++) {
 8003110:	230f      	movs	r3, #15
 8003112:	18fb      	adds	r3, r7, r3
 8003114:	2200      	movs	r2, #0
 8003116:	701a      	strb	r2, [r3, #0]
 8003118:	e015      	b.n	8003146 <search+0x3e>
		if (val > batteryCapacity[i]) return i;
 800311a:	230f      	movs	r3, #15
 800311c:	18fb      	adds	r3, r7, r3
 800311e:	781a      	ldrb	r2, [r3, #0]
 8003120:	4b10      	ldr	r3, [pc, #64]	; (8003164 <search+0x5c>)
 8003122:	0092      	lsls	r2, r2, #2
 8003124:	58d3      	ldr	r3, [r2, r3]
 8003126:	1c19      	adds	r1, r3, #0
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f7fd f991 	bl	8000450 <__aeabi_fcmpgt>
 800312e:	1e03      	subs	r3, r0, #0
 8003130:	d003      	beq.n	800313a <search+0x32>
 8003132:	230f      	movs	r3, #15
 8003134:	18fb      	adds	r3, r7, r3
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	e010      	b.n	800315c <search+0x54>
	for (i = 0; i < batteryCapacityArraySize; i++) {
 800313a:	210f      	movs	r1, #15
 800313c:	187b      	adds	r3, r7, r1
 800313e:	781a      	ldrb	r2, [r3, #0]
 8003140:	187b      	adds	r3, r7, r1
 8003142:	3201      	adds	r2, #1
 8003144:	701a      	strb	r2, [r3, #0]
 8003146:	230f      	movs	r3, #15
 8003148:	18fb      	adds	r3, r7, r3
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	b29a      	uxth	r2, r3
 800314e:	4b06      	ldr	r3, [pc, #24]	; (8003168 <search+0x60>)
 8003150:	881b      	ldrh	r3, [r3, #0]
 8003152:	429a      	cmp	r2, r3
 8003154:	d3e1      	bcc.n	800311a <search+0x12>
	}
	return batteryCapacityArraySize;
 8003156:	4b04      	ldr	r3, [pc, #16]	; (8003168 <search+0x60>)
 8003158:	881b      	ldrh	r3, [r3, #0]
 800315a:	b2db      	uxtb	r3, r3
}
 800315c:	0018      	movs	r0, r3
 800315e:	46bd      	mov	sp, r7
 8003160:	b004      	add	sp, #16
 8003162:	bd80      	pop	{r7, pc}
 8003164:	0800bf90 	.word	0x0800bf90
 8003168:	20000000 	.word	0x20000000

0800316c <setTime>:

static uint16_t century = 20;		// holds upper 2 digits of year that RTC doesn't hold
// ---- RTC setters ----
// set rtc time. uses personal struct as arg
// assumes t's fields are aleady set to something or not null
void setTime(struct times *t, RTC_HandleTypeDef *hrtc) {
 800316c:	b590      	push	{r4, r7, lr}
 800316e:	b089      	sub	sp, #36	; 0x24
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
	RTC_TimeTypeDef stime = {0};
 8003176:	210c      	movs	r1, #12
 8003178:	000c      	movs	r4, r1
 800317a:	187b      	adds	r3, r7, r1
 800317c:	0018      	movs	r0, r3
 800317e:	2314      	movs	r3, #20
 8003180:	001a      	movs	r2, r3
 8003182:	2100      	movs	r1, #0
 8003184:	f008 f907 	bl	800b396 <memset>

	stime.Hours = t->hr;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	781a      	ldrb	r2, [r3, #0]
 800318c:	0021      	movs	r1, r4
 800318e:	187b      	adds	r3, r7, r1
 8003190:	701a      	strb	r2, [r3, #0]
	stime.Minutes = t->min;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	785a      	ldrb	r2, [r3, #1]
 8003196:	187b      	adds	r3, r7, r1
 8003198:	705a      	strb	r2, [r3, #1]
	stime.Seconds = t->sec;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	789a      	ldrb	r2, [r3, #2]
 800319e:	187b      	adds	r3, r7, r1
 80031a0:	709a      	strb	r2, [r3, #2]

	stime.TimeFormat = RTC_HOURFORMAT_24;
 80031a2:	187b      	adds	r3, r7, r1
 80031a4:	2200      	movs	r2, #0
 80031a6:	70da      	strb	r2, [r3, #3]

	// not really using
	stime.SubSeconds = 0;
 80031a8:	187b      	adds	r3, r7, r1
 80031aa:	2200      	movs	r2, #0
 80031ac:	605a      	str	r2, [r3, #4]
	stime.SecondFraction = 0;
 80031ae:	187b      	adds	r3, r7, r1
 80031b0:	2200      	movs	r2, #0
 80031b2:	609a      	str	r2, [r3, #8]
	stime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80031b4:	187b      	adds	r3, r7, r1
 80031b6:	2200      	movs	r2, #0
 80031b8:	60da      	str	r2, [r3, #12]
	stime.StoreOperation = RTC_STOREOPERATION_SET;
 80031ba:	187b      	adds	r3, r7, r1
 80031bc:	2280      	movs	r2, #128	; 0x80
 80031be:	02d2      	lsls	r2, r2, #11
 80031c0:	611a      	str	r2, [r3, #16]

	HAL_RTC_SetTime(hrtc, &stime, RTC_FORMAT_BIN);
 80031c2:	1879      	adds	r1, r7, r1
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	2200      	movs	r2, #0
 80031c8:	0018      	movs	r0, r3
 80031ca:	f005 fef3 	bl	8008fb4 <HAL_RTC_SetTime>
}
 80031ce:	46c0      	nop			; (mov r8, r8)
 80031d0:	46bd      	mov	sp, r7
 80031d2:	b009      	add	sp, #36	; 0x24
 80031d4:	bd90      	pop	{r4, r7, pc}
	...

080031d8 <setDate>:

// set rtc date. uses personal struct as arg
// assumes struct has values
void setDate(struct dates *d, RTC_HandleTypeDef *hrtc) {
 80031d8:	b590      	push	{r4, r7, lr}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
	RTC_DateTypeDef sdate = {0};
 80031e2:	240c      	movs	r4, #12
 80031e4:	193b      	adds	r3, r7, r4
 80031e6:	2200      	movs	r2, #0
 80031e8:	601a      	str	r2, [r3, #0]

	sdate.Month = d->month;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	789a      	ldrb	r2, [r3, #2]
 80031ee:	193b      	adds	r3, r7, r4
 80031f0:	705a      	strb	r2, [r3, #1]
	sdate.Date = d->date;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	78da      	ldrb	r2, [r3, #3]
 80031f6:	193b      	adds	r3, r7, r4
 80031f8:	709a      	strb	r2, [r3, #2]
	sdate.Year = d->yr % 100; 		// set only between 0-99. limitation of RTC
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	881b      	ldrh	r3, [r3, #0]
 80031fe:	2164      	movs	r1, #100	; 0x64
 8003200:	0018      	movs	r0, r3
 8003202:	f7fd f80f 	bl	8000224 <__aeabi_uidivmod>
 8003206:	000b      	movs	r3, r1
 8003208:	b29b      	uxth	r3, r3
 800320a:	b2da      	uxtb	r2, r3
 800320c:	193b      	adds	r3, r7, r4
 800320e:	70da      	strb	r2, [r3, #3]
	century = d->yr / 100;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	881b      	ldrh	r3, [r3, #0]
 8003214:	2164      	movs	r1, #100	; 0x64
 8003216:	0018      	movs	r0, r3
 8003218:	f7fc ff7e 	bl	8000118 <__udivsi3>
 800321c:	0003      	movs	r3, r0
 800321e:	b29a      	uxth	r2, r3
 8003220:	4b0c      	ldr	r3, [pc, #48]	; (8003254 <setDate+0x7c>)
 8003222:	801a      	strh	r2, [r3, #0]

	sdate.WeekDay = weekdayCalculator(d->yr, d->month, d->date);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	8818      	ldrh	r0, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	7899      	ldrb	r1, [r3, #2]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	78db      	ldrb	r3, [r3, #3]
 8003230:	001a      	movs	r2, r3
 8003232:	f000 fb2f 	bl	8003894 <weekdayCalculator>
 8003236:	0003      	movs	r3, r0
 8003238:	001a      	movs	r2, r3
 800323a:	193b      	adds	r3, r7, r4
 800323c:	701a      	strb	r2, [r3, #0]

	HAL_RTC_SetDate(hrtc, &sdate, RTC_FORMAT_BIN);
 800323e:	1939      	adds	r1, r7, r4
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	2200      	movs	r2, #0
 8003244:	0018      	movs	r0, r3
 8003246:	f005 ffd5 	bl	80091f4 <HAL_RTC_SetDate>
}
 800324a:	46c0      	nop			; (mov r8, r8)
 800324c:	46bd      	mov	sp, r7
 800324e:	b005      	add	sp, #20
 8003250:	bd90      	pop	{r4, r7, pc}
 8003252:	46c0      	nop			; (mov r8, r8)
 8003254:	20000002 	.word	0x20000002

08003258 <setDateTime>:

void setDateTime(struct dates *d, struct times *t, RTC_HandleTypeDef *hrtc) {
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
	setDate(d, hrtc);
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	0011      	movs	r1, r2
 800326a:	0018      	movs	r0, r3
 800326c:	f7ff ffb4 	bl	80031d8 <setDate>
	setTime(t, hrtc);
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	0011      	movs	r1, r2
 8003276:	0018      	movs	r0, r3
 8003278:	f7ff ff78 	bl	800316c <setTime>
}
 800327c:	46c0      	nop			; (mov r8, r8)
 800327e:	46bd      	mov	sp, r7
 8003280:	b004      	add	sp, #16
 8003282:	bd80      	pop	{r7, pc}

08003284 <setAlarm>:

// for time of day+week
void setAlarm(struct alarmTimes *a, RTC_HandleTypeDef *hrtc) {
 8003284:	b5b0      	push	{r4, r5, r7, lr}
 8003286:	b092      	sub	sp, #72	; 0x48
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
	RTC_AlarmTypeDef salarm = {0};
 800328e:	2520      	movs	r5, #32
 8003290:	197b      	adds	r3, r7, r5
 8003292:	0018      	movs	r0, r3
 8003294:	2328      	movs	r3, #40	; 0x28
 8003296:	001a      	movs	r2, r3
 8003298:	2100      	movs	r1, #0
 800329a:	f008 f87c 	bl	800b396 <memset>
	RTC_TimeTypeDef salarmtime = {0};
 800329e:	210c      	movs	r1, #12
 80032a0:	000c      	movs	r4, r1
 80032a2:	187b      	adds	r3, r7, r1
 80032a4:	0018      	movs	r0, r3
 80032a6:	2314      	movs	r3, #20
 80032a8:	001a      	movs	r2, r3
 80032aa:	2100      	movs	r1, #0
 80032ac:	f008 f873 	bl	800b396 <memset>

	salarmtime.Hours = a->hr;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	781a      	ldrb	r2, [r3, #0]
 80032b4:	0021      	movs	r1, r4
 80032b6:	187b      	adds	r3, r7, r1
 80032b8:	701a      	strb	r2, [r3, #0]
	salarmtime.Minutes = a->min;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	785a      	ldrb	r2, [r3, #1]
 80032be:	187b      	adds	r3, r7, r1
 80032c0:	705a      	strb	r2, [r3, #1]
	salarmtime.Seconds = a->sec;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	789a      	ldrb	r2, [r3, #2]
 80032c6:	187b      	adds	r3, r7, r1
 80032c8:	709a      	strb	r2, [r3, #2]

	salarmtime.TimeFormat = RTC_HOURFORMAT_24;
 80032ca:	187b      	adds	r3, r7, r1
 80032cc:	2200      	movs	r2, #0
 80032ce:	70da      	strb	r2, [r3, #3]
	salarmtime.SubSeconds = 0;
 80032d0:	187b      	adds	r3, r7, r1
 80032d2:	2200      	movs	r2, #0
 80032d4:	605a      	str	r2, [r3, #4]
	salarmtime.SecondFraction = 0;
 80032d6:	187b      	adds	r3, r7, r1
 80032d8:	2200      	movs	r2, #0
 80032da:	609a      	str	r2, [r3, #8]
	salarmtime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80032dc:	187b      	adds	r3, r7, r1
 80032de:	2200      	movs	r2, #0
 80032e0:	60da      	str	r2, [r3, #12]
	salarmtime.StoreOperation = RTC_STOREOPERATION_RESET;
 80032e2:	187b      	adds	r3, r7, r1
 80032e4:	2200      	movs	r2, #0
 80032e6:	611a      	str	r2, [r3, #16]

	salarm.AlarmTime = salarmtime;
 80032e8:	197b      	adds	r3, r7, r5
 80032ea:	187a      	adds	r2, r7, r1
 80032ec:	ca13      	ldmia	r2!, {r0, r1, r4}
 80032ee:	c313      	stmia	r3!, {r0, r1, r4}
 80032f0:	ca03      	ldmia	r2!, {r0, r1}
 80032f2:	c303      	stmia	r3!, {r0, r1}
	salarm.AlarmMask = RTC_ALARMMASK_NONE;		// allows comparison for all fields (sec, min, hour, weekday)
 80032f4:	197b      	adds	r3, r7, r5
 80032f6:	2200      	movs	r2, #0
 80032f8:	615a      	str	r2, [r3, #20]
	salarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80032fa:	197b      	adds	r3, r7, r5
 80032fc:	2200      	movs	r2, #0
 80032fe:	619a      	str	r2, [r3, #24]
	salarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 8003300:	197b      	adds	r3, r7, r5
 8003302:	2280      	movs	r2, #128	; 0x80
 8003304:	05d2      	lsls	r2, r2, #23
 8003306:	61da      	str	r2, [r3, #28]
	salarm.AlarmDateWeekDay = a->weekday;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	78d9      	ldrb	r1, [r3, #3]
 800330c:	197b      	adds	r3, r7, r5
 800330e:	2220      	movs	r2, #32
 8003310:	5499      	strb	r1, [r3, r2]
	salarm.Alarm = RTC_ALARM_A;
 8003312:	197b      	adds	r3, r7, r5
 8003314:	2280      	movs	r2, #128	; 0x80
 8003316:	0052      	lsls	r2, r2, #1
 8003318:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_RTC_SetAlarm_IT(hrtc, &salarm, RTC_FORMAT_BIN);
 800331a:	1979      	adds	r1, r7, r5
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	2200      	movs	r2, #0
 8003320:	0018      	movs	r0, r3
 8003322:	f006 f863 	bl	80093ec <HAL_RTC_SetAlarm_IT>
}
 8003326:	46c0      	nop			; (mov r8, r8)
 8003328:	46bd      	mov	sp, r7
 800332a:	b012      	add	sp, #72	; 0x48
 800332c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003330 <setClockAlarm>:

// set an alarm for the next second for triggering display updates
void setClockAlarm(RTC_HandleTypeDef *hrtc) {
 8003330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003332:	b097      	sub	sp, #92	; 0x5c
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
	RTC_AlarmTypeDef salarm = {0};
 8003338:	232c      	movs	r3, #44	; 0x2c
 800333a:	18fb      	adds	r3, r7, r3
 800333c:	0018      	movs	r0, r3
 800333e:	2328      	movs	r3, #40	; 0x28
 8003340:	001a      	movs	r2, r3
 8003342:	2100      	movs	r1, #0
 8003344:	f008 f827 	bl	800b396 <memset>
	RTC_TimeTypeDef salarmtime = {0};
 8003348:	2318      	movs	r3, #24
 800334a:	18fb      	adds	r3, r7, r3
 800334c:	0018      	movs	r0, r3
 800334e:	2314      	movs	r3, #20
 8003350:	001a      	movs	r2, r3
 8003352:	2100      	movs	r1, #0
 8003354:	f008 f81f 	bl	800b396 <memset>

	// pull current time
	struct dates currentDate = {0};
 8003358:	2410      	movs	r4, #16
 800335a:	193b      	adds	r3, r7, r4
 800335c:	0018      	movs	r0, r3
 800335e:	2306      	movs	r3, #6
 8003360:	001a      	movs	r2, r3
 8003362:	2100      	movs	r1, #0
 8003364:	f008 f817 	bl	800b396 <memset>
	struct times currentTime = {0};
 8003368:	250c      	movs	r5, #12
 800336a:	197b      	adds	r3, r7, r5
 800336c:	0018      	movs	r0, r3
 800336e:	2303      	movs	r3, #3
 8003370:	001a      	movs	r2, r3
 8003372:	2100      	movs	r1, #0
 8003374:	f008 f80f 	bl	800b396 <memset>
	getDateTime(&currentDate, &currentTime, hrtc);
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	1979      	adds	r1, r7, r5
 800337c:	193b      	adds	r3, r7, r4
 800337e:	0018      	movs	r0, r3
 8003380:	f000 f99a 	bl	80036b8 <getDateTime>

	// start setting alarm
	struct alarmTimes a = {0};
 8003384:	2308      	movs	r3, #8
 8003386:	18fb      	adds	r3, r7, r3
 8003388:	2200      	movs	r2, #0
 800338a:	601a      	str	r2, [r3, #0]
	uint8_t s,m,h,w;
	// set for only 1/min on low battery mode
	if (bState == batteryLow || bState == batteryReallyLow) {
 800338c:	4ba1      	ldr	r3, [pc, #644]	; (8003614 <setClockAlarm+0x2e4>)
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d003      	beq.n	800339c <setClockAlarm+0x6c>
 8003394:	4b9f      	ldr	r3, [pc, #636]	; (8003614 <setClockAlarm+0x2e4>)
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	2b02      	cmp	r3, #2
 800339a:	d164      	bne.n	8003466 <setClockAlarm+0x136>
		s = currentTime.sec;
 800339c:	2157      	movs	r1, #87	; 0x57
 800339e:	187b      	adds	r3, r7, r1
 80033a0:	250c      	movs	r5, #12
 80033a2:	197a      	adds	r2, r7, r5
 80033a4:	7892      	ldrb	r2, [r2, #2]
 80033a6:	701a      	strb	r2, [r3, #0]
		m = currentTime.min + s/60 + 1;
 80033a8:	197b      	adds	r3, r7, r5
 80033aa:	785c      	ldrb	r4, [r3, #1]
 80033ac:	187b      	adds	r3, r7, r1
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	213c      	movs	r1, #60	; 0x3c
 80033b2:	0018      	movs	r0, r3
 80033b4:	f7fc feb0 	bl	8000118 <__udivsi3>
 80033b8:	0003      	movs	r3, r0
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	18e3      	adds	r3, r4, r3
 80033be:	b2da      	uxtb	r2, r3
 80033c0:	2156      	movs	r1, #86	; 0x56
 80033c2:	187b      	adds	r3, r7, r1
 80033c4:	3201      	adds	r2, #1
 80033c6:	701a      	strb	r2, [r3, #0]
		h = currentTime.hr + m/60;
 80033c8:	197b      	adds	r3, r7, r5
 80033ca:	781c      	ldrb	r4, [r3, #0]
 80033cc:	187b      	adds	r3, r7, r1
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	213c      	movs	r1, #60	; 0x3c
 80033d2:	0018      	movs	r0, r3
 80033d4:	f7fc fea0 	bl	8000118 <__udivsi3>
 80033d8:	0003      	movs	r3, r0
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	2155      	movs	r1, #85	; 0x55
 80033de:	187b      	adds	r3, r7, r1
 80033e0:	18a2      	adds	r2, r4, r2
 80033e2:	701a      	strb	r2, [r3, #0]
		w = currentDate.weekday + h/24;
 80033e4:	2310      	movs	r3, #16
 80033e6:	18fb      	adds	r3, r7, r3
 80033e8:	791c      	ldrb	r4, [r3, #4]
 80033ea:	187b      	adds	r3, r7, r1
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	2118      	movs	r1, #24
 80033f0:	0018      	movs	r0, r3
 80033f2:	f7fc fe91 	bl	8000118 <__udivsi3>
 80033f6:	0003      	movs	r3, r0
 80033f8:	b2da      	uxtb	r2, r3
 80033fa:	2354      	movs	r3, #84	; 0x54
 80033fc:	18fb      	adds	r3, r7, r3
 80033fe:	18a2      	adds	r2, r4, r2
 8003400:	701a      	strb	r2, [r3, #0]

		// for transitioning between centuries
		if (currentTime.min == 59 &&
 8003402:	197b      	adds	r3, r7, r5
 8003404:	785b      	ldrb	r3, [r3, #1]
 8003406:	2b3b      	cmp	r3, #59	; 0x3b
 8003408:	d000      	beq.n	800340c <setClockAlarm+0xdc>
 800340a:	e091      	b.n	8003530 <setClockAlarm+0x200>
			currentTime.hr == 23 &&
 800340c:	230c      	movs	r3, #12
 800340e:	18fb      	adds	r3, r7, r3
 8003410:	781b      	ldrb	r3, [r3, #0]
		if (currentTime.min == 59 &&
 8003412:	2b17      	cmp	r3, #23
 8003414:	d000      	beq.n	8003418 <setClockAlarm+0xe8>
 8003416:	e08b      	b.n	8003530 <setClockAlarm+0x200>
			currentDate.yr % 100 == 99 &&
 8003418:	2310      	movs	r3, #16
 800341a:	18fb      	adds	r3, r7, r3
 800341c:	881b      	ldrh	r3, [r3, #0]
 800341e:	2164      	movs	r1, #100	; 0x64
 8003420:	0018      	movs	r0, r3
 8003422:	f7fc feff 	bl	8000224 <__aeabi_uidivmod>
 8003426:	000b      	movs	r3, r1
 8003428:	b29b      	uxth	r3, r3
			currentTime.hr == 23 &&
 800342a:	2b63      	cmp	r3, #99	; 0x63
 800342c:	d000      	beq.n	8003430 <setClockAlarm+0x100>
 800342e:	e07f      	b.n	8003530 <setClockAlarm+0x200>
			currentDate.month == 12 &&
 8003430:	2310      	movs	r3, #16
 8003432:	18fb      	adds	r3, r7, r3
 8003434:	789b      	ldrb	r3, [r3, #2]
			currentDate.yr % 100 == 99 &&
 8003436:	2b0c      	cmp	r3, #12
 8003438:	d000      	beq.n	800343c <setClockAlarm+0x10c>
 800343a:	e079      	b.n	8003530 <setClockAlarm+0x200>
			currentDate.date == maxDaysInMonth(currentDate.month, currentDate.yr)) {
 800343c:	2110      	movs	r1, #16
 800343e:	187b      	adds	r3, r7, r1
 8003440:	78dc      	ldrb	r4, [r3, #3]
 8003442:	187b      	adds	r3, r7, r1
 8003444:	789a      	ldrb	r2, [r3, #2]
 8003446:	187b      	adds	r3, r7, r1
 8003448:	881b      	ldrh	r3, [r3, #0]
 800344a:	0019      	movs	r1, r3
 800344c:	0010      	movs	r0, r2
 800344e:	f000 fa75 	bl	800393c <maxDaysInMonth>
 8003452:	0003      	movs	r3, r0
			currentDate.month == 12 &&
 8003454:	429c      	cmp	r4, r3
 8003456:	d16b      	bne.n	8003530 <setClockAlarm+0x200>
			century++;
 8003458:	4b6f      	ldr	r3, [pc, #444]	; (8003618 <setClockAlarm+0x2e8>)
 800345a:	881b      	ldrh	r3, [r3, #0]
 800345c:	3301      	adds	r3, #1
 800345e:	b29a      	uxth	r2, r3
 8003460:	4b6d      	ldr	r3, [pc, #436]	; (8003618 <setClockAlarm+0x2e8>)
 8003462:	801a      	strh	r2, [r3, #0]
		if (currentTime.min == 59 &&
 8003464:	e064      	b.n	8003530 <setClockAlarm+0x200>
		}
	}
	// else set 1/s
	else {
		s = currentTime.sec + 1;
 8003466:	250c      	movs	r5, #12
 8003468:	197b      	adds	r3, r7, r5
 800346a:	789a      	ldrb	r2, [r3, #2]
 800346c:	2157      	movs	r1, #87	; 0x57
 800346e:	187b      	adds	r3, r7, r1
 8003470:	3201      	adds	r2, #1
 8003472:	701a      	strb	r2, [r3, #0]
		m = currentTime.min + s/60;
 8003474:	197b      	adds	r3, r7, r5
 8003476:	785c      	ldrb	r4, [r3, #1]
 8003478:	187b      	adds	r3, r7, r1
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	213c      	movs	r1, #60	; 0x3c
 800347e:	0018      	movs	r0, r3
 8003480:	f7fc fe4a 	bl	8000118 <__udivsi3>
 8003484:	0003      	movs	r3, r0
 8003486:	b2da      	uxtb	r2, r3
 8003488:	2156      	movs	r1, #86	; 0x56
 800348a:	187b      	adds	r3, r7, r1
 800348c:	18a2      	adds	r2, r4, r2
 800348e:	701a      	strb	r2, [r3, #0]
		h = currentTime.hr + m/60;
 8003490:	197b      	adds	r3, r7, r5
 8003492:	781c      	ldrb	r4, [r3, #0]
 8003494:	187b      	adds	r3, r7, r1
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	213c      	movs	r1, #60	; 0x3c
 800349a:	0018      	movs	r0, r3
 800349c:	f7fc fe3c 	bl	8000118 <__udivsi3>
 80034a0:	0003      	movs	r3, r0
 80034a2:	b2da      	uxtb	r2, r3
 80034a4:	2155      	movs	r1, #85	; 0x55
 80034a6:	187b      	adds	r3, r7, r1
 80034a8:	18a2      	adds	r2, r4, r2
 80034aa:	701a      	strb	r2, [r3, #0]
		w = currentDate.weekday + h/24;
 80034ac:	2310      	movs	r3, #16
 80034ae:	18fb      	adds	r3, r7, r3
 80034b0:	791c      	ldrb	r4, [r3, #4]
 80034b2:	187b      	adds	r3, r7, r1
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	2118      	movs	r1, #24
 80034b8:	0018      	movs	r0, r3
 80034ba:	f7fc fe2d 	bl	8000118 <__udivsi3>
 80034be:	0003      	movs	r3, r0
 80034c0:	b2da      	uxtb	r2, r3
 80034c2:	2354      	movs	r3, #84	; 0x54
 80034c4:	18fb      	adds	r3, r7, r3
 80034c6:	18a2      	adds	r2, r4, r2
 80034c8:	701a      	strb	r2, [r3, #0]

		// for transitioning between centuries
		if (currentTime.sec == 59 &&
 80034ca:	197b      	adds	r3, r7, r5
 80034cc:	789b      	ldrb	r3, [r3, #2]
 80034ce:	2b3b      	cmp	r3, #59	; 0x3b
 80034d0:	d12f      	bne.n	8003532 <setClockAlarm+0x202>
			currentTime.min == 59 &&
 80034d2:	230c      	movs	r3, #12
 80034d4:	18fb      	adds	r3, r7, r3
 80034d6:	785b      	ldrb	r3, [r3, #1]
		if (currentTime.sec == 59 &&
 80034d8:	2b3b      	cmp	r3, #59	; 0x3b
 80034da:	d12a      	bne.n	8003532 <setClockAlarm+0x202>
			currentTime.hr == 23 &&
 80034dc:	230c      	movs	r3, #12
 80034de:	18fb      	adds	r3, r7, r3
 80034e0:	781b      	ldrb	r3, [r3, #0]
			currentTime.min == 59 &&
 80034e2:	2b17      	cmp	r3, #23
 80034e4:	d125      	bne.n	8003532 <setClockAlarm+0x202>
			currentDate.yr % 100 == 99 &&
 80034e6:	2310      	movs	r3, #16
 80034e8:	18fb      	adds	r3, r7, r3
 80034ea:	881b      	ldrh	r3, [r3, #0]
 80034ec:	2164      	movs	r1, #100	; 0x64
 80034ee:	0018      	movs	r0, r3
 80034f0:	f7fc fe98 	bl	8000224 <__aeabi_uidivmod>
 80034f4:	000b      	movs	r3, r1
 80034f6:	b29b      	uxth	r3, r3
			currentTime.hr == 23 &&
 80034f8:	2b63      	cmp	r3, #99	; 0x63
 80034fa:	d11a      	bne.n	8003532 <setClockAlarm+0x202>
			currentDate.month == 12 &&
 80034fc:	2310      	movs	r3, #16
 80034fe:	18fb      	adds	r3, r7, r3
 8003500:	789b      	ldrb	r3, [r3, #2]
			currentDate.yr % 100 == 99 &&
 8003502:	2b0c      	cmp	r3, #12
 8003504:	d115      	bne.n	8003532 <setClockAlarm+0x202>
			currentDate.date == maxDaysInMonth(currentDate.month, currentDate.yr)) {
 8003506:	2110      	movs	r1, #16
 8003508:	187b      	adds	r3, r7, r1
 800350a:	78dc      	ldrb	r4, [r3, #3]
 800350c:	187b      	adds	r3, r7, r1
 800350e:	789a      	ldrb	r2, [r3, #2]
 8003510:	187b      	adds	r3, r7, r1
 8003512:	881b      	ldrh	r3, [r3, #0]
 8003514:	0019      	movs	r1, r3
 8003516:	0010      	movs	r0, r2
 8003518:	f000 fa10 	bl	800393c <maxDaysInMonth>
 800351c:	0003      	movs	r3, r0
			currentDate.month == 12 &&
 800351e:	429c      	cmp	r4, r3
 8003520:	d107      	bne.n	8003532 <setClockAlarm+0x202>
			century++;
 8003522:	4b3d      	ldr	r3, [pc, #244]	; (8003618 <setClockAlarm+0x2e8>)
 8003524:	881b      	ldrh	r3, [r3, #0]
 8003526:	3301      	adds	r3, #1
 8003528:	b29a      	uxth	r2, r3
 800352a:	4b3b      	ldr	r3, [pc, #236]	; (8003618 <setClockAlarm+0x2e8>)
 800352c:	801a      	strh	r2, [r3, #0]
 800352e:	e000      	b.n	8003532 <setClockAlarm+0x202>
		if (currentTime.min == 59 &&
 8003530:	46c0      	nop			; (mov r8, r8)
		}
	}
	a.sec = s % 60;
 8003532:	2357      	movs	r3, #87	; 0x57
 8003534:	18fb      	adds	r3, r7, r3
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	213c      	movs	r1, #60	; 0x3c
 800353a:	0018      	movs	r0, r3
 800353c:	f7fc fe72 	bl	8000224 <__aeabi_uidivmod>
 8003540:	000b      	movs	r3, r1
 8003542:	b2da      	uxtb	r2, r3
 8003544:	2408      	movs	r4, #8
 8003546:	193b      	adds	r3, r7, r4
 8003548:	709a      	strb	r2, [r3, #2]
	a.min = m % 60;
 800354a:	2356      	movs	r3, #86	; 0x56
 800354c:	18fb      	adds	r3, r7, r3
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	213c      	movs	r1, #60	; 0x3c
 8003552:	0018      	movs	r0, r3
 8003554:	f7fc fe66 	bl	8000224 <__aeabi_uidivmod>
 8003558:	000b      	movs	r3, r1
 800355a:	b2da      	uxtb	r2, r3
 800355c:	193b      	adds	r3, r7, r4
 800355e:	705a      	strb	r2, [r3, #1]
	a.hr = h % 24;
 8003560:	2355      	movs	r3, #85	; 0x55
 8003562:	18fb      	adds	r3, r7, r3
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	2118      	movs	r1, #24
 8003568:	0018      	movs	r0, r3
 800356a:	f7fc fe5b 	bl	8000224 <__aeabi_uidivmod>
 800356e:	000b      	movs	r3, r1
 8003570:	b2da      	uxtb	r2, r3
 8003572:	193b      	adds	r3, r7, r4
 8003574:	701a      	strb	r2, [r3, #0]
	a.weekday = (w-1) % 7 + 1;
 8003576:	2354      	movs	r3, #84	; 0x54
 8003578:	18fb      	adds	r3, r7, r3
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	3b01      	subs	r3, #1
 800357e:	2107      	movs	r1, #7
 8003580:	0018      	movs	r0, r3
 8003582:	f7fc ff39 	bl	80003f8 <__aeabi_idivmod>
 8003586:	000b      	movs	r3, r1
 8003588:	b2db      	uxtb	r3, r3
 800358a:	3301      	adds	r3, #1
 800358c:	b2da      	uxtb	r2, r3
 800358e:	0020      	movs	r0, r4
 8003590:	183b      	adds	r3, r7, r0
 8003592:	70da      	strb	r2, [r3, #3]

	salarmtime.Hours = a.hr;
 8003594:	183b      	adds	r3, r7, r0
 8003596:	781a      	ldrb	r2, [r3, #0]
 8003598:	2118      	movs	r1, #24
 800359a:	187b      	adds	r3, r7, r1
 800359c:	701a      	strb	r2, [r3, #0]
	salarmtime.Minutes = a.min;
 800359e:	183b      	adds	r3, r7, r0
 80035a0:	785a      	ldrb	r2, [r3, #1]
 80035a2:	187b      	adds	r3, r7, r1
 80035a4:	705a      	strb	r2, [r3, #1]
	salarmtime.Seconds = a.sec;
 80035a6:	183b      	adds	r3, r7, r0
 80035a8:	789a      	ldrb	r2, [r3, #2]
 80035aa:	187b      	adds	r3, r7, r1
 80035ac:	709a      	strb	r2, [r3, #2]
	salarmtime.TimeFormat = RTC_HOURFORMAT_24;
 80035ae:	187b      	adds	r3, r7, r1
 80035b0:	2200      	movs	r2, #0
 80035b2:	70da      	strb	r2, [r3, #3]
	salarmtime.SubSeconds = 0;
 80035b4:	187b      	adds	r3, r7, r1
 80035b6:	2200      	movs	r2, #0
 80035b8:	605a      	str	r2, [r3, #4]
	salarmtime.SecondFraction = 0;
 80035ba:	187b      	adds	r3, r7, r1
 80035bc:	2200      	movs	r2, #0
 80035be:	609a      	str	r2, [r3, #8]
	salarmtime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80035c0:	187b      	adds	r3, r7, r1
 80035c2:	2200      	movs	r2, #0
 80035c4:	60da      	str	r2, [r3, #12]
	salarmtime.StoreOperation = RTC_STOREOPERATION_RESET;
 80035c6:	187b      	adds	r3, r7, r1
 80035c8:	2200      	movs	r2, #0
 80035ca:	611a      	str	r2, [r3, #16]

	salarm.AlarmTime = salarmtime;
 80035cc:	242c      	movs	r4, #44	; 0x2c
 80035ce:	193b      	adds	r3, r7, r4
 80035d0:	187a      	adds	r2, r7, r1
 80035d2:	ca62      	ldmia	r2!, {r1, r5, r6}
 80035d4:	c362      	stmia	r3!, {r1, r5, r6}
 80035d6:	ca22      	ldmia	r2!, {r1, r5}
 80035d8:	c322      	stmia	r3!, {r1, r5}
	salarm.AlarmMask = RTC_ALARMMASK_NONE;
 80035da:	193b      	adds	r3, r7, r4
 80035dc:	2200      	movs	r2, #0
 80035de:	615a      	str	r2, [r3, #20]
	salarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80035e0:	193b      	adds	r3, r7, r4
 80035e2:	2200      	movs	r2, #0
 80035e4:	619a      	str	r2, [r3, #24]
	salarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 80035e6:	193b      	adds	r3, r7, r4
 80035e8:	2280      	movs	r2, #128	; 0x80
 80035ea:	05d2      	lsls	r2, r2, #23
 80035ec:	61da      	str	r2, [r3, #28]
	salarm.AlarmDateWeekDay = a.weekday;
 80035ee:	183b      	adds	r3, r7, r0
 80035f0:	78d9      	ldrb	r1, [r3, #3]
 80035f2:	193b      	adds	r3, r7, r4
 80035f4:	2220      	movs	r2, #32
 80035f6:	5499      	strb	r1, [r3, r2]
	salarm.Alarm = RTC_ALARM_B;
 80035f8:	193b      	adds	r3, r7, r4
 80035fa:	2280      	movs	r2, #128	; 0x80
 80035fc:	0092      	lsls	r2, r2, #2
 80035fe:	625a      	str	r2, [r3, #36]	; 0x24

	// do nothing until done
	HAL_RTC_SetAlarm_IT(hrtc, &salarm, RTC_FORMAT_BIN);
 8003600:	1939      	adds	r1, r7, r4
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	0018      	movs	r0, r3
 8003608:	f005 fef0 	bl	80093ec <HAL_RTC_SetAlarm_IT>
}
 800360c:	46c0      	nop			; (mov r8, r8)
 800360e:	46bd      	mov	sp, r7
 8003610:	b017      	add	sp, #92	; 0x5c
 8003612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003614:	2000014d 	.word	0x2000014d
 8003618:	20000002 	.word	0x20000002

0800361c <HAL_RTC_AlarmAEventCallback>:
// ---- end of RTC setters ----

// ---- callbacks for interrupts ----
// used for alarm function in project
// meant to send signal to use motor
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED1_PORT, LED1_PIN);
 8003624:	23a0      	movs	r3, #160	; 0xa0
 8003626:	05db      	lsls	r3, r3, #23
 8003628:	2120      	movs	r1, #32
 800362a:	0018      	movs	r0, r3
 800362c:	f004 fbb1 	bl	8007d92 <HAL_GPIO_TogglePin>
	isAlarmDone = 1;
 8003630:	4b04      	ldr	r3, [pc, #16]	; (8003644 <HAL_RTC_AlarmAEventCallback+0x28>)
 8003632:	2201      	movs	r2, #1
 8003634:	701a      	strb	r2, [r3, #0]
	updateFace.alarm = 1;
 8003636:	4b04      	ldr	r3, [pc, #16]	; (8003648 <HAL_RTC_AlarmAEventCallback+0x2c>)
 8003638:	2201      	movs	r2, #1
 800363a:	709a      	strb	r2, [r3, #2]
}
 800363c:	46c0      	nop			; (mov r8, r8)
 800363e:	46bd      	mov	sp, r7
 8003640:	b002      	add	sp, #8
 8003642:	bd80      	pop	{r7, pc}
 8003644:	2000013f 	.word	0x2000013f
 8003648:	20000140 	.word	0x20000140

0800364c <HAL_RTCEx_AlarmBEventCallback>:

// used to trigger display refresh every second. used because then it's synchronous with RTC updates
void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc) {
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
	updateFace.clock = 1;
 8003654:	4b05      	ldr	r3, [pc, #20]	; (800366c <HAL_RTCEx_AlarmBEventCallback+0x20>)
 8003656:	2201      	movs	r2, #1
 8003658:	701a      	strb	r2, [r3, #0]
	setClockAlarm(hrtc);		// set something for next second
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	0018      	movs	r0, r3
 800365e:	f7ff fe67 	bl	8003330 <setClockAlarm>
}
 8003662:	46c0      	nop			; (mov r8, r8)
 8003664:	46bd      	mov	sp, r7
 8003666:	b002      	add	sp, #8
 8003668:	bd80      	pop	{r7, pc}
 800366a:	46c0      	nop			; (mov r8, r8)
 800366c:	20000140 	.word	0x20000140

08003670 <getTime>:
// ---- end of callbacks ----

// ---- RTC getters ----
void getTime(struct times *t, RTC_HandleTypeDef *hrtc) {
 8003670:	b590      	push	{r4, r7, lr}
 8003672:	b089      	sub	sp, #36	; 0x24
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
	RTC_TimeTypeDef stime;

	// programming manual says to read time after date. something shadow registers.
	// not done automatically in HAL
	HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN);
 800367a:	210c      	movs	r1, #12
 800367c:	000c      	movs	r4, r1
 800367e:	1879      	adds	r1, r7, r1
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	2200      	movs	r2, #0
 8003684:	0018      	movs	r0, r3
 8003686:	f005 fd59 	bl	800913c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, NULL, RTC_FORMAT_BIN);
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	2200      	movs	r2, #0
 800368e:	2100      	movs	r1, #0
 8003690:	0018      	movs	r0, r3
 8003692:	f005 fe5d 	bl	8009350 <HAL_RTC_GetDate>

	t->hr = stime.Hours;
 8003696:	0021      	movs	r1, r4
 8003698:	187b      	adds	r3, r7, r1
 800369a:	781a      	ldrb	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	701a      	strb	r2, [r3, #0]
	t->min = stime.Minutes;
 80036a0:	187b      	adds	r3, r7, r1
 80036a2:	785a      	ldrb	r2, [r3, #1]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	705a      	strb	r2, [r3, #1]
	t->sec = stime.Seconds;
 80036a8:	187b      	adds	r3, r7, r1
 80036aa:	789a      	ldrb	r2, [r3, #2]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	709a      	strb	r2, [r3, #2]
}
 80036b0:	46c0      	nop			; (mov r8, r8)
 80036b2:	46bd      	mov	sp, r7
 80036b4:	b009      	add	sp, #36	; 0x24
 80036b6:	bd90      	pop	{r4, r7, pc}

080036b8 <getDateTime>:
	d->date = sdate.Date;
	d->weekday = sdate.WeekDay;
}

// not using getDate and getTime for possible efficiency
void getDateTime(struct dates *d, struct times *t, RTC_HandleTypeDef *hrtc) {
 80036b8:	b5b0      	push	{r4, r5, r7, lr}
 80036ba:	b08a      	sub	sp, #40	; 0x28
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
	RTC_DateTypeDef sdate;
	RTC_TimeTypeDef stime;

	// programming manual says to read time after date. something shadow registers.
	// not done automatically in HAL
	HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN);
 80036c4:	2510      	movs	r5, #16
 80036c6:	1979      	adds	r1, r7, r5
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	0018      	movs	r0, r3
 80036ce:	f005 fd35 	bl	800913c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &sdate, RTC_FORMAT_BIN);
 80036d2:	2124      	movs	r1, #36	; 0x24
 80036d4:	000c      	movs	r4, r1
 80036d6:	1879      	adds	r1, r7, r1
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	0018      	movs	r0, r3
 80036de:	f005 fe37 	bl	8009350 <HAL_RTC_GetDate>

	// pulls last 2 digits from RTC and upper 2 digits from static variable
	d->yr = century*100 + sdate.Year;
 80036e2:	4b14      	ldr	r3, [pc, #80]	; (8003734 <getDateTime+0x7c>)
 80036e4:	881b      	ldrh	r3, [r3, #0]
 80036e6:	2264      	movs	r2, #100	; 0x64
 80036e8:	4353      	muls	r3, r2
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	0021      	movs	r1, r4
 80036ee:	187b      	adds	r3, r7, r1
 80036f0:	78db      	ldrb	r3, [r3, #3]
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	18d3      	adds	r3, r2, r3
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	801a      	strh	r2, [r3, #0]
	d->month = sdate.Month;
 80036fc:	187b      	adds	r3, r7, r1
 80036fe:	785a      	ldrb	r2, [r3, #1]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	709a      	strb	r2, [r3, #2]
	d->date = sdate.Date;
 8003704:	187b      	adds	r3, r7, r1
 8003706:	789a      	ldrb	r2, [r3, #2]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	70da      	strb	r2, [r3, #3]
	d->weekday = sdate.WeekDay;
 800370c:	187b      	adds	r3, r7, r1
 800370e:	781a      	ldrb	r2, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	711a      	strb	r2, [r3, #4]

	t->hr = stime.Hours;
 8003714:	197b      	adds	r3, r7, r5
 8003716:	781a      	ldrb	r2, [r3, #0]
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	701a      	strb	r2, [r3, #0]
	t->min = stime.Minutes;
 800371c:	197b      	adds	r3, r7, r5
 800371e:	785a      	ldrb	r2, [r3, #1]
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	705a      	strb	r2, [r3, #1]
	t->sec = stime.Seconds;
 8003724:	197b      	adds	r3, r7, r5
 8003726:	789a      	ldrb	r2, [r3, #2]
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	709a      	strb	r2, [r3, #2]
}
 800372c:	46c0      	nop			; (mov r8, r8)
 800372e:	46bd      	mov	sp, r7
 8003730:	b00a      	add	sp, #40	; 0x28
 8003732:	bdb0      	pop	{r4, r5, r7, pc}
 8003734:	20000002 	.word	0x20000002

08003738 <setRTCCalibration>:
// ---- end of RTC getters ----

// ---- RTC calibration function ----
// calibVal should be given in drift/day in seconds
// calibration output on PC13
void setRTCCalibration(int calibVal, RTC_HandleTypeDef *hrtc) {
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
	uint16_t calm = 0;
 8003742:	230e      	movs	r3, #14
 8003744:	18fb      	adds	r3, r7, r3
 8003746:	2200      	movs	r2, #0
 8003748:	801a      	strh	r2, [r3, #0]
	uint32_t temp;

	if (calibVal == 0) return;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d048      	beq.n	80037e2 <setRTCCalibration+0xaa>
	else if (calibVal < 0) {		// drift offset is negative. need to slow rtc down
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	da20      	bge.n	8003798 <setRTCCalibration+0x60>
		if (calibVal <= -42) {		// bounds checking. just set to max
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	3329      	adds	r3, #41	; 0x29
 800375a:	da06      	bge.n	800376a <setRTCCalibration+0x32>
			HAL_RTCEx_SetSmoothCalib(hrtc, RTC_SMOOTHCALIB_PERIOD_32SEC, RTC_SMOOTHCALIB_PLUSPULSES_RESET, 0x1FF);
 800375c:	4b23      	ldr	r3, [pc, #140]	; (80037ec <setRTCCalibration+0xb4>)
 800375e:	6838      	ldr	r0, [r7, #0]
 8003760:	2200      	movs	r2, #0
 8003762:	2100      	movs	r1, #0
 8003764:	f006 f913 	bl	800998e <HAL_RTCEx_SetSmoothCalib>
 8003768:	e03c      	b.n	80037e4 <setRTCCalibration+0xac>
		}
		else {
			// math for setting CALM 9-bit register in RTC. formula in notes and in L0 programming reference manual
			temp = -calibVal*32768*32/86400;		// possible overflow when doing math, so reordering
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	0013      	movs	r3, r2
 800376e:	031b      	lsls	r3, r3, #12
 8003770:	1a9b      	subs	r3, r3, r2
 8003772:	051b      	lsls	r3, r3, #20
 8003774:	491e      	ldr	r1, [pc, #120]	; (80037f0 <setRTCCalibration+0xb8>)
 8003776:	0018      	movs	r0, r3
 8003778:	f7fc fd58 	bl	800022c <__divsi3>
 800377c:	0003      	movs	r3, r0
 800377e:	60bb      	str	r3, [r7, #8]
			calm = temp;
 8003780:	210e      	movs	r1, #14
 8003782:	187b      	adds	r3, r7, r1
 8003784:	68ba      	ldr	r2, [r7, #8]
 8003786:	801a      	strh	r2, [r3, #0]
			HAL_RTCEx_SetSmoothCalib(hrtc, RTC_SMOOTHCALIB_PERIOD_32SEC, RTC_SMOOTHCALIB_PLUSPULSES_RESET, calm);
 8003788:	187b      	adds	r3, r7, r1
 800378a:	881b      	ldrh	r3, [r3, #0]
 800378c:	6838      	ldr	r0, [r7, #0]
 800378e:	2200      	movs	r2, #0
 8003790:	2100      	movs	r1, #0
 8003792:	f006 f8fc 	bl	800998e <HAL_RTCEx_SetSmoothCalib>
 8003796:	e025      	b.n	80037e4 <setRTCCalibration+0xac>
		}
	}
	else {
		if (calibVal >= 42) { 		// drift offset is positive. need to speed rtc up
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b29      	cmp	r3, #41	; 0x29
 800379c:	dd07      	ble.n	80037ae <setRTCCalibration+0x76>
			HAL_RTCEx_SetSmoothCalib(hrtc, RTC_SMOOTHCALIB_PERIOD_32SEC, RTC_SMOOTHCALIB_PLUSPULSES_SET, 0);
 800379e:	2380      	movs	r3, #128	; 0x80
 80037a0:	021a      	lsls	r2, r3, #8
 80037a2:	6838      	ldr	r0, [r7, #0]
 80037a4:	2300      	movs	r3, #0
 80037a6:	2100      	movs	r1, #0
 80037a8:	f006 f8f1 	bl	800998e <HAL_RTCEx_SetSmoothCalib>
 80037ac:	e01a      	b.n	80037e4 <setRTCCalibration+0xac>
		}
		else {
			// math
			temp = 512-(calibVal*32768*32/86400);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	051b      	lsls	r3, r3, #20
 80037b2:	4910      	ldr	r1, [pc, #64]	; (80037f4 <setRTCCalibration+0xbc>)
 80037b4:	0018      	movs	r0, r3
 80037b6:	f7fc fd39 	bl	800022c <__divsi3>
 80037ba:	0003      	movs	r3, r0
 80037bc:	2280      	movs	r2, #128	; 0x80
 80037be:	0092      	lsls	r2, r2, #2
 80037c0:	4694      	mov	ip, r2
 80037c2:	4463      	add	r3, ip
 80037c4:	60bb      	str	r3, [r7, #8]
			calm = temp;
 80037c6:	210e      	movs	r1, #14
 80037c8:	187b      	adds	r3, r7, r1
 80037ca:	68ba      	ldr	r2, [r7, #8]
 80037cc:	801a      	strh	r2, [r3, #0]
			HAL_RTCEx_SetSmoothCalib(hrtc, RTC_SMOOTHCALIB_PERIOD_32SEC, RTC_SMOOTHCALIB_PLUSPULSES_SET, calm);
 80037ce:	187b      	adds	r3, r7, r1
 80037d0:	8819      	ldrh	r1, [r3, #0]
 80037d2:	2380      	movs	r3, #128	; 0x80
 80037d4:	021a      	lsls	r2, r3, #8
 80037d6:	6838      	ldr	r0, [r7, #0]
 80037d8:	000b      	movs	r3, r1
 80037da:	2100      	movs	r1, #0
 80037dc:	f006 f8d7 	bl	800998e <HAL_RTCEx_SetSmoothCalib>
 80037e0:	e000      	b.n	80037e4 <setRTCCalibration+0xac>
	if (calibVal == 0) return;
 80037e2:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 80037e4:	46bd      	mov	sp, r7
 80037e6:	b004      	add	sp, #16
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	46c0      	nop			; (mov r8, r8)
 80037ec:	000001ff 	.word	0x000001ff
 80037f0:	00015180 	.word	0x00015180
 80037f4:	fffeae80 	.word	0xfffeae80

080037f8 <timeToSeconds>:
// ---- end of RTC calibration function ----

// ---- converters and calculators ----
uint32_t timeToSeconds(struct times *t) {
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
	return t->sec + t->min*60 + t->hr*3600;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	789b      	ldrb	r3, [r3, #2]
 8003804:	0019      	movs	r1, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	785b      	ldrb	r3, [r3, #1]
 800380a:	001a      	movs	r2, r3
 800380c:	0013      	movs	r3, r2
 800380e:	011b      	lsls	r3, r3, #4
 8003810:	1a9b      	subs	r3, r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	18c9      	adds	r1, r1, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	001a      	movs	r2, r3
 800381c:	0013      	movs	r3, r2
 800381e:	011b      	lsls	r3, r3, #4
 8003820:	1a9b      	subs	r3, r3, r2
 8003822:	011a      	lsls	r2, r3, #4
 8003824:	1ad2      	subs	r2, r2, r3
 8003826:	0113      	lsls	r3, r2, #4
 8003828:	001a      	movs	r2, r3
 800382a:	0013      	movs	r3, r2
 800382c:	18cb      	adds	r3, r1, r3
}
 800382e:	0018      	movs	r0, r3
 8003830:	46bd      	mov	sp, r7
 8003832:	b002      	add	sp, #8
 8003834:	bd80      	pop	{r7, pc}

08003836 <secondsToTime>:

void secondsToTime(struct times *t, uint32_t seconds) {
 8003836:	b580      	push	{r7, lr}
 8003838:	b082      	sub	sp, #8
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
 800383e:	6039      	str	r1, [r7, #0]
	t->hr = seconds / 3600;
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	23e1      	movs	r3, #225	; 0xe1
 8003844:	0119      	lsls	r1, r3, #4
 8003846:	0010      	movs	r0, r2
 8003848:	f7fc fc66 	bl	8000118 <__udivsi3>
 800384c:	0003      	movs	r3, r0
 800384e:	b2da      	uxtb	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	701a      	strb	r2, [r3, #0]
	seconds %= 3600;
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	23e1      	movs	r3, #225	; 0xe1
 8003858:	0119      	lsls	r1, r3, #4
 800385a:	0010      	movs	r0, r2
 800385c:	f7fc fce2 	bl	8000224 <__aeabi_uidivmod>
 8003860:	000b      	movs	r3, r1
 8003862:	603b      	str	r3, [r7, #0]
	t->min = seconds / 60;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	213c      	movs	r1, #60	; 0x3c
 8003868:	0018      	movs	r0, r3
 800386a:	f7fc fc55 	bl	8000118 <__udivsi3>
 800386e:	0003      	movs	r3, r0
 8003870:	b2da      	uxtb	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	705a      	strb	r2, [r3, #1]
	seconds %= 60;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	213c      	movs	r1, #60	; 0x3c
 800387a:	0018      	movs	r0, r3
 800387c:	f7fc fcd2 	bl	8000224 <__aeabi_uidivmod>
 8003880:	000b      	movs	r3, r1
 8003882:	603b      	str	r3, [r7, #0]
	t->sec = seconds;
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	b2da      	uxtb	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	709a      	strb	r2, [r3, #2]
}
 800388c:	46c0      	nop			; (mov r8, r8)
 800388e:	46bd      	mov	sp, r7
 8003890:	b002      	add	sp, #8
 8003892:	bd80      	pop	{r7, pc}

08003894 <weekdayCalculator>:
 * weekdays is 0-6, with 0 being sunday. hal uses 1=monday, 7=sunday - just call with % 7 to integrate with hal
 * months given in 1-12, with 1 being january. hal uses the same setup
 * rtc represents years with last 2 digits only. make sure year has all 4 numbers
 * should be accurate for any gregorian date
 */
uint8_t weekdayCalculator(uint16_t year, uint8_t month, uint8_t day) {
 8003894:	b590      	push	{r4, r7, lr}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	0004      	movs	r4, r0
 800389c:	0008      	movs	r0, r1
 800389e:	0011      	movs	r1, r2
 80038a0:	1dbb      	adds	r3, r7, #6
 80038a2:	1c22      	adds	r2, r4, #0
 80038a4:	801a      	strh	r2, [r3, #0]
 80038a6:	1d7b      	adds	r3, r7, #5
 80038a8:	1c02      	adds	r2, r0, #0
 80038aa:	701a      	strb	r2, [r3, #0]
 80038ac:	1d3b      	adds	r3, r7, #4
 80038ae:	1c0a      	adds	r2, r1, #0
 80038b0:	701a      	strb	r2, [r3, #0]
	static uint8_t table[] = {0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4};
	if (month < 3) year--;
 80038b2:	1d7b      	adds	r3, r7, #5
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d804      	bhi.n	80038c4 <weekdayCalculator+0x30>
 80038ba:	1dbb      	adds	r3, r7, #6
 80038bc:	881a      	ldrh	r2, [r3, #0]
 80038be:	1dbb      	adds	r3, r7, #6
 80038c0:	3a01      	subs	r2, #1
 80038c2:	801a      	strh	r2, [r3, #0]
	uint16_t temp = (year + year/4 - year/100 + year/400 + table[month-1] + day) % 7;
 80038c4:	1dbb      	adds	r3, r7, #6
 80038c6:	881b      	ldrh	r3, [r3, #0]
 80038c8:	1dba      	adds	r2, r7, #6
 80038ca:	8812      	ldrh	r2, [r2, #0]
 80038cc:	0892      	lsrs	r2, r2, #2
 80038ce:	b292      	uxth	r2, r2
 80038d0:	189c      	adds	r4, r3, r2
 80038d2:	1dbb      	adds	r3, r7, #6
 80038d4:	881b      	ldrh	r3, [r3, #0]
 80038d6:	2164      	movs	r1, #100	; 0x64
 80038d8:	0018      	movs	r0, r3
 80038da:	f7fc fc1d 	bl	8000118 <__udivsi3>
 80038de:	0003      	movs	r3, r0
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	1ae4      	subs	r4, r4, r3
 80038e4:	1dbb      	adds	r3, r7, #6
 80038e6:	881a      	ldrh	r2, [r3, #0]
 80038e8:	23c8      	movs	r3, #200	; 0xc8
 80038ea:	0059      	lsls	r1, r3, #1
 80038ec:	0010      	movs	r0, r2
 80038ee:	f7fc fc13 	bl	8000118 <__udivsi3>
 80038f2:	0003      	movs	r3, r0
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	18e3      	adds	r3, r4, r3
 80038f8:	1d7a      	adds	r2, r7, #5
 80038fa:	7812      	ldrb	r2, [r2, #0]
 80038fc:	3a01      	subs	r2, #1
 80038fe:	490e      	ldr	r1, [pc, #56]	; (8003938 <weekdayCalculator+0xa4>)
 8003900:	5c8a      	ldrb	r2, [r1, r2]
 8003902:	189a      	adds	r2, r3, r2
 8003904:	1d3b      	adds	r3, r7, #4
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	18d3      	adds	r3, r2, r3
 800390a:	2107      	movs	r1, #7
 800390c:	0018      	movs	r0, r3
 800390e:	f7fc fd73 	bl	80003f8 <__aeabi_idivmod>
 8003912:	000b      	movs	r3, r1
 8003914:	001a      	movs	r2, r3
 8003916:	210e      	movs	r1, #14
 8003918:	187b      	adds	r3, r7, r1
 800391a:	801a      	strh	r2, [r3, #0]
	if (temp == 0) return RTC_WEEKDAY_SUNDAY;
 800391c:	187b      	adds	r3, r7, r1
 800391e:	881b      	ldrh	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d101      	bne.n	8003928 <weekdayCalculator+0x94>
 8003924:	2307      	movs	r3, #7
 8003926:	e003      	b.n	8003930 <weekdayCalculator+0x9c>
	else return temp;
 8003928:	230e      	movs	r3, #14
 800392a:	18fb      	adds	r3, r7, r3
 800392c:	881b      	ldrh	r3, [r3, #0]
 800392e:	b2db      	uxtb	r3, r3
}
 8003930:	0018      	movs	r0, r3
 8003932:	46bd      	mov	sp, r7
 8003934:	b005      	add	sp, #20
 8003936:	bd90      	pop	{r4, r7, pc}
 8003938:	20000004 	.word	0x20000004

0800393c <maxDaysInMonth>:

// calculator for number of days in a month given a month and accounting for leap years
// assumes month is 1-12, 1=january, 12=december
uint8_t maxDaysInMonth(uint8_t month, uint16_t year) {
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	0002      	movs	r2, r0
 8003944:	1dfb      	adds	r3, r7, #7
 8003946:	701a      	strb	r2, [r3, #0]
 8003948:	1d3b      	adds	r3, r7, #4
 800394a:	1c0a      	adds	r2, r1, #0
 800394c:	801a      	strh	r2, [r3, #0]
	if (month == 0 || month > 12) return 0;		// bounds checking
 800394e:	1dfb      	adds	r3, r7, #7
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d003      	beq.n	800395e <maxDaysInMonth+0x22>
 8003956:	1dfb      	adds	r3, r7, #7
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	2b0c      	cmp	r3, #12
 800395c:	d901      	bls.n	8003962 <maxDaysInMonth+0x26>
 800395e:	2300      	movs	r3, #0
 8003960:	e052      	b.n	8003a08 <maxDaysInMonth+0xcc>

	// not using built-in defines, because they're in BCD
	if (month == 1  ||		// january
 8003962:	1dfb      	adds	r3, r7, #7
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d017      	beq.n	800399a <maxDaysInMonth+0x5e>
 800396a:	1dfb      	adds	r3, r7, #7
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	2b03      	cmp	r3, #3
 8003970:	d013      	beq.n	800399a <maxDaysInMonth+0x5e>
		month == 3  ||		// march
 8003972:	1dfb      	adds	r3, r7, #7
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	2b05      	cmp	r3, #5
 8003978:	d00f      	beq.n	800399a <maxDaysInMonth+0x5e>
		month == 5  ||		// may
 800397a:	1dfb      	adds	r3, r7, #7
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	2b07      	cmp	r3, #7
 8003980:	d00b      	beq.n	800399a <maxDaysInMonth+0x5e>
		month == 7  ||		// july
 8003982:	1dfb      	adds	r3, r7, #7
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	2b08      	cmp	r3, #8
 8003988:	d007      	beq.n	800399a <maxDaysInMonth+0x5e>
		month == 8  ||		// august
 800398a:	1dfb      	adds	r3, r7, #7
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	2b0a      	cmp	r3, #10
 8003990:	d003      	beq.n	800399a <maxDaysInMonth+0x5e>
		month == 10 ||		// october
 8003992:	1dfb      	adds	r3, r7, #7
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	2b0c      	cmp	r3, #12
 8003998:	d101      	bne.n	800399e <maxDaysInMonth+0x62>
		month == 12) {		// december
		return 31;
 800399a:	231f      	movs	r3, #31
 800399c:	e034      	b.n	8003a08 <maxDaysInMonth+0xcc>
	}
	else if (month == 4 ||	// april
 800399e:	1dfb      	adds	r3, r7, #7
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	2b04      	cmp	r3, #4
 80039a4:	d00b      	beq.n	80039be <maxDaysInMonth+0x82>
 80039a6:	1dfb      	adds	r3, r7, #7
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	2b06      	cmp	r3, #6
 80039ac:	d007      	beq.n	80039be <maxDaysInMonth+0x82>
			 month == 6 ||	// june
 80039ae:	1dfb      	adds	r3, r7, #7
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	2b09      	cmp	r3, #9
 80039b4:	d003      	beq.n	80039be <maxDaysInMonth+0x82>
			 month == 9 ||	// september
 80039b6:	1dfb      	adds	r3, r7, #7
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	2b0b      	cmp	r3, #11
 80039bc:	d101      	bne.n	80039c2 <maxDaysInMonth+0x86>
			 month == 11) {	// november
		return 30;
 80039be:	231e      	movs	r3, #30
 80039c0:	e022      	b.n	8003a08 <maxDaysInMonth+0xcc>
	}

	// february/leap year calculator
	// leap year for every 4th year, but every 100th year is not a leap year except on every 400th year
	// ex. 2020 is a leap year, 2100 is not a leap year, 2000 is a leap year.
	else if (year % 400 == 0) return 29;
 80039c2:	1d3b      	adds	r3, r7, #4
 80039c4:	881a      	ldrh	r2, [r3, #0]
 80039c6:	23c8      	movs	r3, #200	; 0xc8
 80039c8:	0059      	lsls	r1, r3, #1
 80039ca:	0010      	movs	r0, r2
 80039cc:	f7fc fc2a 	bl	8000224 <__aeabi_uidivmod>
 80039d0:	000b      	movs	r3, r1
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <maxDaysInMonth+0xa0>
 80039d8:	231d      	movs	r3, #29
 80039da:	e015      	b.n	8003a08 <maxDaysInMonth+0xcc>
	else if (year % 100 == 0) return 28;
 80039dc:	1d3b      	adds	r3, r7, #4
 80039de:	881b      	ldrh	r3, [r3, #0]
 80039e0:	2164      	movs	r1, #100	; 0x64
 80039e2:	0018      	movs	r0, r3
 80039e4:	f7fc fc1e 	bl	8000224 <__aeabi_uidivmod>
 80039e8:	000b      	movs	r3, r1
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d101      	bne.n	80039f4 <maxDaysInMonth+0xb8>
 80039f0:	231c      	movs	r3, #28
 80039f2:	e009      	b.n	8003a08 <maxDaysInMonth+0xcc>
	else if (year % 4 == 0) return 29;
 80039f4:	1d3b      	adds	r3, r7, #4
 80039f6:	881b      	ldrh	r3, [r3, #0]
 80039f8:	2203      	movs	r2, #3
 80039fa:	4013      	ands	r3, r2
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <maxDaysInMonth+0xca>
 8003a02:	231d      	movs	r3, #29
 8003a04:	e000      	b.n	8003a08 <maxDaysInMonth+0xcc>
	else return 28;
 8003a06:	231c      	movs	r3, #28
}
 8003a08:	0018      	movs	r0, r3
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	b002      	add	sp, #8
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a10:	b590      	push	{r4, r7, lr}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003a16:	f003 f8ef 	bl	8006bf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003a1a:	f000 f881 	bl	8003b20 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003a1e:	f000 fcdf 	bl	80043e0 <MX_GPIO_Init>
  MX_ADC_Init();
 8003a22:	f000 f905 	bl	8003c30 <MX_ADC_Init>
  MX_RTC_Init();
 8003a26:	f000 f967 	bl	8003cf8 <MX_RTC_Init>
  MX_TIM21_Init();
 8003a2a:	f000 fb8d 	bl	8004148 <MX_TIM21_Init>
  MX_TIM22_Init();
 8003a2e:	f000 fc23 	bl	8004278 <MX_TIM22_Init>
  MX_TIM2_Init();
 8003a32:	f000 fa35 	bl	8003ea0 <MX_TIM2_Init>
  MX_TIM6_Init();
 8003a36:	f000 fb4b 	bl	80040d0 <MX_TIM6_Init>
  MX_TIM3_Init();
 8003a3a:	f000 fabf 	bl	8003fbc <MX_TIM3_Init>
  MX_SPI2_Init();
 8003a3e:	f000 f9f7 	bl	8003e30 <MX_SPI2_Init>
  MX_USB_PCD_Init();
 8003a42:	f000 fca7 	bl	8004394 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
	// rtc software calibration
	setRTCCalibration(-8, &hrtc);
 8003a46:	4a2c      	ldr	r2, [pc, #176]	; (8003af8 <main+0xe8>)
 8003a48:	2308      	movs	r3, #8
 8003a4a:	425b      	negs	r3, r3
 8003a4c:	0011      	movs	r1, r2
 8003a4e:	0018      	movs	r0, r3
 8003a50:	f7ff fe72 	bl	8003738 <setRTCCalibration>

  	// initialization for display
	TFT_startup(&hspi2);
 8003a54:	4b29      	ldr	r3, [pc, #164]	; (8003afc <main+0xec>)
 8003a56:	0018      	movs	r0, r3
 8003a58:	f7fe f9ba 	bl	8001dd0 <TFT_startup>
	clearScreen(ST77XX_BLACK, &hspi2);
 8003a5c:	4b27      	ldr	r3, [pc, #156]	; (8003afc <main+0xec>)
 8003a5e:	0019      	movs	r1, r3
 8003a60:	2000      	movs	r0, #0
 8003a62:	f7fe fd1d 	bl	80024a0 <clearScreen>

	// initialization for ui and hardware
	initFace();
 8003a66:	f003 f867 	bl	8006b38 <initFace>
	setClockAlarm(&hrtc);
 8003a6a:	4b23      	ldr	r3, [pc, #140]	; (8003af8 <main+0xe8>)
 8003a6c:	0018      	movs	r0, r3
 8003a6e:	f7ff fc5f 	bl	8003330 <setClockAlarm>
	runTimerStopwatchBase(&htim21);		// running time bases
 8003a72:	4b23      	ldr	r3, [pc, #140]	; (8003b00 <main+0xf0>)
 8003a74:	0018      	movs	r0, r3
 8003a76:	f001 fa0b 	bl	8004e90 <runTimerStopwatchBase>
	runMotorBase(&htim2);
 8003a7a:	4b22      	ldr	r3, [pc, #136]	; (8003b04 <main+0xf4>)
 8003a7c:	0018      	movs	r0, r3
 8003a7e:	f001 fa6f 	bl	8004f60 <runMotorBase>
	runADCSampler(&htim22);
 8003a82:	4b21      	ldr	r3, [pc, #132]	; (8003b08 <main+0xf8>)
 8003a84:	0018      	movs	r0, r3
 8003a86:	f001 fa0f 	bl	8004ea8 <runADCSampler>
	setDisplayBacklight(50, &htim3);
 8003a8a:	4b20      	ldr	r3, [pc, #128]	; (8003b0c <main+0xfc>)
 8003a8c:	0019      	movs	r1, r3
 8003a8e:	2032      	movs	r0, #50	; 0x32
 8003a90:	f001 fa72 	bl	8004f78 <setDisplayBacklight>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		updateState(&hrtc, &htim21, &htim2, &htim6, &hspi2);
 8003a94:	4c1e      	ldr	r4, [pc, #120]	; (8003b10 <main+0x100>)
 8003a96:	4a1b      	ldr	r2, [pc, #108]	; (8003b04 <main+0xf4>)
 8003a98:	4919      	ldr	r1, [pc, #100]	; (8003b00 <main+0xf0>)
 8003a9a:	4817      	ldr	r0, [pc, #92]	; (8003af8 <main+0xe8>)
 8003a9c:	4b17      	ldr	r3, [pc, #92]	; (8003afc <main+0xec>)
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	0023      	movs	r3, r4
 8003aa2:	f001 faf9 	bl	8005098 <updateState>
		updateDisplay(&hrtc, &hspi2);
 8003aa6:	4a15      	ldr	r2, [pc, #84]	; (8003afc <main+0xec>)
 8003aa8:	4b13      	ldr	r3, [pc, #76]	; (8003af8 <main+0xe8>)
 8003aaa:	0011      	movs	r1, r2
 8003aac:	0018      	movs	r0, r3
 8003aae:	f002 f8dd 	bl	8005c6c <updateDisplay>
		batteryManager(&hadc, &hspi2, &htim21, &htim3);
 8003ab2:	4b16      	ldr	r3, [pc, #88]	; (8003b0c <main+0xfc>)
 8003ab4:	4a12      	ldr	r2, [pc, #72]	; (8003b00 <main+0xf0>)
 8003ab6:	4911      	ldr	r1, [pc, #68]	; (8003afc <main+0xec>)
 8003ab8:	4816      	ldr	r0, [pc, #88]	; (8003b14 <main+0x104>)
 8003aba:	f7ff fa7b 	bl	8002fb4 <batteryManager>

		if (isTimerDone || isAlarmDone) {
 8003abe:	4b16      	ldr	r3, [pc, #88]	; (8003b18 <main+0x108>)
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d104      	bne.n	8003ad2 <main+0xc2>
 8003ac8:	4b14      	ldr	r3, [pc, #80]	; (8003b1c <main+0x10c>)
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d010      	beq.n	8003af4 <main+0xe4>
			runMotor(&htim2);
 8003ad2:	4b0c      	ldr	r3, [pc, #48]	; (8003b04 <main+0xf4>)
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	f001 f9f9 	bl	8004ecc <runMotor>
			updateDisplay(&hrtc, &hspi2);
 8003ada:	4a08      	ldr	r2, [pc, #32]	; (8003afc <main+0xec>)
 8003adc:	4b06      	ldr	r3, [pc, #24]	; (8003af8 <main+0xe8>)
 8003ade:	0011      	movs	r1, r2
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	f002 f8c3 	bl	8005c6c <updateDisplay>
			isTimerDone = isAlarmDone = 0;
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	4b0c      	ldr	r3, [pc, #48]	; (8003b1c <main+0x10c>)
 8003aea:	1c0a      	adds	r2, r1, #0
 8003aec:	701a      	strb	r2, [r3, #0]
 8003aee:	4b0a      	ldr	r3, [pc, #40]	; (8003b18 <main+0x108>)
 8003af0:	1c0a      	adds	r2, r1, #0
 8003af2:	701a      	strb	r2, [r3, #0]
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8003af4:	bf30      	wfi
		updateState(&hrtc, &htim21, &htim2, &htim6, &hspi2);
 8003af6:	e7cd      	b.n	8003a94 <main+0x84>
 8003af8:	20000268 	.word	0x20000268
 8003afc:	20000198 	.word	0x20000198
 8003b00:	20000598 	.word	0x20000598
 8003b04:	2000028c 	.word	0x2000028c
 8003b08:	2000022c 	.word	0x2000022c
 8003b0c:	200001f0 	.word	0x200001f0
 8003b10:	20000150 	.word	0x20000150
 8003b14:	2000053c 	.word	0x2000053c
 8003b18:	2000014c 	.word	0x2000014c
 8003b1c:	2000013f 	.word	0x2000013f

08003b20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b20:	b590      	push	{r4, r7, lr}
 8003b22:	b09f      	sub	sp, #124	; 0x7c
 8003b24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b26:	2440      	movs	r4, #64	; 0x40
 8003b28:	193b      	adds	r3, r7, r4
 8003b2a:	0018      	movs	r0, r3
 8003b2c:	2338      	movs	r3, #56	; 0x38
 8003b2e:	001a      	movs	r2, r3
 8003b30:	2100      	movs	r1, #0
 8003b32:	f007 fc30 	bl	800b396 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b36:	232c      	movs	r3, #44	; 0x2c
 8003b38:	18fb      	adds	r3, r7, r3
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	2314      	movs	r3, #20
 8003b3e:	001a      	movs	r2, r3
 8003b40:	2100      	movs	r1, #0
 8003b42:	f007 fc28 	bl	800b396 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b46:	1d3b      	adds	r3, r7, #4
 8003b48:	0018      	movs	r0, r3
 8003b4a:	2328      	movs	r3, #40	; 0x28
 8003b4c:	001a      	movs	r2, r3
 8003b4e:	2100      	movs	r1, #0
 8003b50:	f007 fc21 	bl	800b396 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b54:	4b33      	ldr	r3, [pc, #204]	; (8003c24 <SystemClock_Config+0x104>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a33      	ldr	r2, [pc, #204]	; (8003c28 <SystemClock_Config+0x108>)
 8003b5a:	401a      	ands	r2, r3
 8003b5c:	4b31      	ldr	r3, [pc, #196]	; (8003c24 <SystemClock_Config+0x104>)
 8003b5e:	2180      	movs	r1, #128	; 0x80
 8003b60:	0109      	lsls	r1, r1, #4
 8003b62:	430a      	orrs	r2, r1
 8003b64:	601a      	str	r2, [r3, #0]
  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8003b66:	f004 fa87 	bl	8008078 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003b6a:	4b30      	ldr	r3, [pc, #192]	; (8003c2c <SystemClock_Config+0x10c>)
 8003b6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b6e:	4b2f      	ldr	r3, [pc, #188]	; (8003c2c <SystemClock_Config+0x10c>)
 8003b70:	492d      	ldr	r1, [pc, #180]	; (8003c28 <SystemClock_Config+0x108>)
 8003b72:	400a      	ands	r2, r1
 8003b74:	651a      	str	r2, [r3, #80]	; 0x50
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8003b76:	193b      	adds	r3, r7, r4
 8003b78:	2226      	movs	r2, #38	; 0x26
 8003b7a:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003b7c:	193b      	adds	r3, r7, r4
 8003b7e:	2280      	movs	r2, #128	; 0x80
 8003b80:	0052      	lsls	r2, r2, #1
 8003b82:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003b84:	0021      	movs	r1, r4
 8003b86:	187b      	adds	r3, r7, r1
 8003b88:	2201      	movs	r2, #1
 8003b8a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003b8c:	187b      	adds	r3, r7, r1
 8003b8e:	2210      	movs	r2, #16
 8003b90:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003b92:	187b      	adds	r3, r7, r1
 8003b94:	2201      	movs	r2, #1
 8003b96:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b98:	187b      	adds	r3, r7, r1
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003b9e:	187b      	adds	r3, r7, r1
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8003ba4:	187b      	adds	r3, r7, r1
 8003ba6:	2280      	movs	r2, #128	; 0x80
 8003ba8:	02d2      	lsls	r2, r2, #11
 8003baa:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8003bac:	187b      	adds	r3, r7, r1
 8003bae:	2280      	movs	r2, #128	; 0x80
 8003bb0:	03d2      	lsls	r2, r2, #15
 8003bb2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003bb4:	187b      	adds	r3, r7, r1
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	f004 fa6c 	bl	8008094 <HAL_RCC_OscConfig>
 8003bbc:	1e03      	subs	r3, r0, #0
 8003bbe:	d001      	beq.n	8003bc4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8003bc0:	f000 fcc8 	bl	8004554 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003bc4:	212c      	movs	r1, #44	; 0x2c
 8003bc6:	187b      	adds	r3, r7, r1
 8003bc8:	220f      	movs	r2, #15
 8003bca:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003bcc:	187b      	adds	r3, r7, r1
 8003bce:	2203      	movs	r2, #3
 8003bd0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003bd2:	187b      	adds	r3, r7, r1
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003bd8:	187b      	adds	r3, r7, r1
 8003bda:	2200      	movs	r2, #0
 8003bdc:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003bde:	187b      	adds	r3, r7, r1
 8003be0:	2200      	movs	r2, #0
 8003be2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003be4:	187b      	adds	r3, r7, r1
 8003be6:	2101      	movs	r1, #1
 8003be8:	0018      	movs	r0, r3
 8003bea:	f004 fe23 	bl	8008834 <HAL_RCC_ClockConfig>
 8003bee:	1e03      	subs	r3, r0, #0
 8003bf0:	d001      	beq.n	8003bf6 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8003bf2:	f000 fcaf 	bl	8004554 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 8003bf6:	1d3b      	adds	r3, r7, #4
 8003bf8:	2260      	movs	r2, #96	; 0x60
 8003bfa:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003bfc:	1d3b      	adds	r3, r7, #4
 8003bfe:	2280      	movs	r2, #128	; 0x80
 8003c00:	0252      	lsls	r2, r2, #9
 8003c02:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8003c04:	1d3b      	adds	r3, r7, #4
 8003c06:	2280      	movs	r2, #128	; 0x80
 8003c08:	04d2      	lsls	r2, r2, #19
 8003c0a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c0c:	1d3b      	adds	r3, r7, #4
 8003c0e:	0018      	movs	r0, r3
 8003c10:	f004 ffbe 	bl	8008b90 <HAL_RCCEx_PeriphCLKConfig>
 8003c14:	1e03      	subs	r3, r0, #0
 8003c16:	d001      	beq.n	8003c1c <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8003c18:	f000 fc9c 	bl	8004554 <Error_Handler>
  }
}
 8003c1c:	46c0      	nop			; (mov r8, r8)
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	b01f      	add	sp, #124	; 0x7c
 8003c22:	bd90      	pop	{r4, r7, pc}
 8003c24:	40007000 	.word	0x40007000
 8003c28:	ffffe7ff 	.word	0xffffe7ff
 8003c2c:	40021000 	.word	0x40021000

08003c30 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003c36:	003b      	movs	r3, r7
 8003c38:	0018      	movs	r0, r3
 8003c3a:	2308      	movs	r3, #8
 8003c3c:	001a      	movs	r2, r3
 8003c3e:	2100      	movs	r1, #0
 8003c40:	f007 fba9 	bl	800b396 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8003c44:	4b2a      	ldr	r3, [pc, #168]	; (8003cf0 <MX_ADC_Init+0xc0>)
 8003c46:	4a2b      	ldr	r2, [pc, #172]	; (8003cf4 <MX_ADC_Init+0xc4>)
 8003c48:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8003c4a:	4b29      	ldr	r3, [pc, #164]	; (8003cf0 <MX_ADC_Init+0xc0>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003c50:	4b27      	ldr	r3, [pc, #156]	; (8003cf0 <MX_ADC_Init+0xc0>)
 8003c52:	2280      	movs	r2, #128	; 0x80
 8003c54:	05d2      	lsls	r2, r2, #23
 8003c56:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003c58:	4b25      	ldr	r3, [pc, #148]	; (8003cf0 <MX_ADC_Init+0xc0>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_79CYCLES_5;
 8003c5e:	4b24      	ldr	r3, [pc, #144]	; (8003cf0 <MX_ADC_Init+0xc0>)
 8003c60:	2206      	movs	r2, #6
 8003c62:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003c64:	4b22      	ldr	r3, [pc, #136]	; (8003cf0 <MX_ADC_Init+0xc0>)
 8003c66:	2201      	movs	r2, #1
 8003c68:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003c6a:	4b21      	ldr	r3, [pc, #132]	; (8003cf0 <MX_ADC_Init+0xc0>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8003c70:	4b1f      	ldr	r3, [pc, #124]	; (8003cf0 <MX_ADC_Init+0xc0>)
 8003c72:	2220      	movs	r2, #32
 8003c74:	2100      	movs	r1, #0
 8003c76:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8003c78:	4b1d      	ldr	r3, [pc, #116]	; (8003cf0 <MX_ADC_Init+0xc0>)
 8003c7a:	2221      	movs	r2, #33	; 0x21
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003c80:	4b1b      	ldr	r3, [pc, #108]	; (8003cf0 <MX_ADC_Init+0xc0>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003c86:	4b1a      	ldr	r3, [pc, #104]	; (8003cf0 <MX_ADC_Init+0xc0>)
 8003c88:	22c2      	movs	r2, #194	; 0xc2
 8003c8a:	32ff      	adds	r2, #255	; 0xff
 8003c8c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8003c8e:	4b18      	ldr	r3, [pc, #96]	; (8003cf0 <MX_ADC_Init+0xc0>)
 8003c90:	222c      	movs	r2, #44	; 0x2c
 8003c92:	2100      	movs	r1, #0
 8003c94:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003c96:	4b16      	ldr	r3, [pc, #88]	; (8003cf0 <MX_ADC_Init+0xc0>)
 8003c98:	2204      	movs	r2, #4
 8003c9a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003c9c:	4b14      	ldr	r3, [pc, #80]	; (8003cf0 <MX_ADC_Init+0xc0>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003ca2:	4b13      	ldr	r3, [pc, #76]	; (8003cf0 <MX_ADC_Init+0xc0>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8003ca8:	4b11      	ldr	r3, [pc, #68]	; (8003cf0 <MX_ADC_Init+0xc0>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003cae:	4b10      	ldr	r3, [pc, #64]	; (8003cf0 <MX_ADC_Init+0xc0>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003cb4:	4b0e      	ldr	r3, [pc, #56]	; (8003cf0 <MX_ADC_Init+0xc0>)
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	f003 f81c 	bl	8006cf4 <HAL_ADC_Init>
 8003cbc:	1e03      	subs	r3, r0, #0
 8003cbe:	d001      	beq.n	8003cc4 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8003cc0:	f000 fc48 	bl	8004554 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003cc4:	003b      	movs	r3, r7
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003cca:	003b      	movs	r3, r7
 8003ccc:	2280      	movs	r2, #128	; 0x80
 8003cce:	0152      	lsls	r2, r2, #5
 8003cd0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003cd2:	003a      	movs	r2, r7
 8003cd4:	4b06      	ldr	r3, [pc, #24]	; (8003cf0 <MX_ADC_Init+0xc0>)
 8003cd6:	0011      	movs	r1, r2
 8003cd8:	0018      	movs	r0, r3
 8003cda:	f003 fb89 	bl	80073f0 <HAL_ADC_ConfigChannel>
 8003cde:	1e03      	subs	r3, r0, #0
 8003ce0:	d001      	beq.n	8003ce6 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8003ce2:	f000 fc37 	bl	8004554 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8003ce6:	46c0      	nop			; (mov r8, r8)
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	b002      	add	sp, #8
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	46c0      	nop			; (mov r8, r8)
 8003cf0:	2000053c 	.word	0x2000053c
 8003cf4:	40012400 	.word	0x40012400

08003cf8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b090      	sub	sp, #64	; 0x40
 8003cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003cfe:	232c      	movs	r3, #44	; 0x2c
 8003d00:	18fb      	adds	r3, r7, r3
 8003d02:	0018      	movs	r0, r3
 8003d04:	2314      	movs	r3, #20
 8003d06:	001a      	movs	r2, r3
 8003d08:	2100      	movs	r1, #0
 8003d0a:	f007 fb44 	bl	800b396 <memset>
  RTC_DateTypeDef sDate = {0};
 8003d0e:	2328      	movs	r3, #40	; 0x28
 8003d10:	18fb      	adds	r3, r7, r3
 8003d12:	2200      	movs	r2, #0
 8003d14:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8003d16:	003b      	movs	r3, r7
 8003d18:	0018      	movs	r0, r3
 8003d1a:	2328      	movs	r3, #40	; 0x28
 8003d1c:	001a      	movs	r2, r3
 8003d1e:	2100      	movs	r1, #0
 8003d20:	f007 fb39 	bl	800b396 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8003d24:	4b40      	ldr	r3, [pc, #256]	; (8003e28 <MX_RTC_Init+0x130>)
 8003d26:	4a41      	ldr	r2, [pc, #260]	; (8003e2c <MX_RTC_Init+0x134>)
 8003d28:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003d2a:	4b3f      	ldr	r3, [pc, #252]	; (8003e28 <MX_RTC_Init+0x130>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003d30:	4b3d      	ldr	r3, [pc, #244]	; (8003e28 <MX_RTC_Init+0x130>)
 8003d32:	227f      	movs	r2, #127	; 0x7f
 8003d34:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003d36:	4b3c      	ldr	r3, [pc, #240]	; (8003e28 <MX_RTC_Init+0x130>)
 8003d38:	22ff      	movs	r2, #255	; 0xff
 8003d3a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003d3c:	4b3a      	ldr	r3, [pc, #232]	; (8003e28 <MX_RTC_Init+0x130>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003d42:	4b39      	ldr	r3, [pc, #228]	; (8003e28 <MX_RTC_Init+0x130>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003d48:	4b37      	ldr	r3, [pc, #220]	; (8003e28 <MX_RTC_Init+0x130>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003d4e:	4b36      	ldr	r3, [pc, #216]	; (8003e28 <MX_RTC_Init+0x130>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003d54:	4b34      	ldr	r3, [pc, #208]	; (8003e28 <MX_RTC_Init+0x130>)
 8003d56:	0018      	movs	r0, r3
 8003d58:	f005 f88e 	bl	8008e78 <HAL_RTC_Init>
 8003d5c:	1e03      	subs	r3, r0, #0
 8003d5e:	d001      	beq.n	8003d64 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8003d60:	f000 fbf8 	bl	8004554 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0;
 8003d64:	212c      	movs	r1, #44	; 0x2c
 8003d66:	187b      	adds	r3, r7, r1
 8003d68:	2200      	movs	r2, #0
 8003d6a:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8003d6c:	187b      	adds	r3, r7, r1
 8003d6e:	2200      	movs	r2, #0
 8003d70:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8003d72:	187b      	adds	r3, r7, r1
 8003d74:	2200      	movs	r2, #0
 8003d76:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003d78:	187b      	adds	r3, r7, r1
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003d7e:	187b      	adds	r3, r7, r1
 8003d80:	2200      	movs	r2, #0
 8003d82:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003d84:	1879      	adds	r1, r7, r1
 8003d86:	4b28      	ldr	r3, [pc, #160]	; (8003e28 <MX_RTC_Init+0x130>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	f005 f912 	bl	8008fb4 <HAL_RTC_SetTime>
 8003d90:	1e03      	subs	r3, r0, #0
 8003d92:	d001      	beq.n	8003d98 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8003d94:	f000 fbde 	bl	8004554 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8003d98:	2128      	movs	r1, #40	; 0x28
 8003d9a:	187b      	adds	r3, r7, r1
 8003d9c:	2207      	movs	r2, #7
 8003d9e:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_DECEMBER;
 8003da0:	187b      	adds	r3, r7, r1
 8003da2:	2212      	movs	r2, #18
 8003da4:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8003da6:	187b      	adds	r3, r7, r1
 8003da8:	2201      	movs	r2, #1
 8003daa:	709a      	strb	r2, [r3, #2]
  sDate.Year = 19;
 8003dac:	187b      	adds	r3, r7, r1
 8003dae:	2213      	movs	r2, #19
 8003db0:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003db2:	1879      	adds	r1, r7, r1
 8003db4:	4b1c      	ldr	r3, [pc, #112]	; (8003e28 <MX_RTC_Init+0x130>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	0018      	movs	r0, r3
 8003dba:	f005 fa1b 	bl	80091f4 <HAL_RTC_SetDate>
 8003dbe:	1e03      	subs	r3, r0, #0
 8003dc0:	d001      	beq.n	8003dc6 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8003dc2:	f000 fbc7 	bl	8004554 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmTime.Hours = 0;
 8003dc6:	003b      	movs	r3, r7
 8003dc8:	2200      	movs	r2, #0
 8003dca:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8003dcc:	003b      	movs	r3, r7
 8003dce:	2200      	movs	r2, #0
 8003dd0:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8003dd2:	003b      	movs	r3, r7
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8003dd8:	003b      	movs	r3, r7
 8003dda:	2200      	movs	r2, #0
 8003ddc:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003dde:	003b      	movs	r3, r7
 8003de0:	2200      	movs	r2, #0
 8003de2:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003de4:	003b      	movs	r3, r7
 8003de6:	2200      	movs	r2, #0
 8003de8:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8003dea:	003b      	movs	r3, r7
 8003dec:	2200      	movs	r2, #0
 8003dee:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003df0:	003b      	movs	r3, r7
 8003df2:	2200      	movs	r2, #0
 8003df4:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003df6:	003b      	movs	r3, r7
 8003df8:	2200      	movs	r2, #0
 8003dfa:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8003dfc:	003b      	movs	r3, r7
 8003dfe:	2220      	movs	r2, #32
 8003e00:	2101      	movs	r1, #1
 8003e02:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_B;
 8003e04:	003b      	movs	r3, r7
 8003e06:	2280      	movs	r2, #128	; 0x80
 8003e08:	0092      	lsls	r2, r2, #2
 8003e0a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8003e0c:	0039      	movs	r1, r7
 8003e0e:	4b06      	ldr	r3, [pc, #24]	; (8003e28 <MX_RTC_Init+0x130>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	0018      	movs	r0, r3
 8003e14:	f005 faea 	bl	80093ec <HAL_RTC_SetAlarm_IT>
 8003e18:	1e03      	subs	r3, r0, #0
 8003e1a:	d001      	beq.n	8003e20 <MX_RTC_Init+0x128>
  {
    Error_Handler();
 8003e1c:	f000 fb9a 	bl	8004554 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003e20:	46c0      	nop			; (mov r8, r8)
 8003e22:	46bd      	mov	sp, r7
 8003e24:	b010      	add	sp, #64	; 0x40
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	20000268 	.word	0x20000268
 8003e2c:	40002800 	.word	0x40002800

08003e30 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003e34:	4b18      	ldr	r3, [pc, #96]	; (8003e98 <MX_SPI2_Init+0x68>)
 8003e36:	4a19      	ldr	r2, [pc, #100]	; (8003e9c <MX_SPI2_Init+0x6c>)
 8003e38:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003e3a:	4b17      	ldr	r3, [pc, #92]	; (8003e98 <MX_SPI2_Init+0x68>)
 8003e3c:	2282      	movs	r2, #130	; 0x82
 8003e3e:	0052      	lsls	r2, r2, #1
 8003e40:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003e42:	4b15      	ldr	r3, [pc, #84]	; (8003e98 <MX_SPI2_Init+0x68>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003e48:	4b13      	ldr	r3, [pc, #76]	; (8003e98 <MX_SPI2_Init+0x68>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e4e:	4b12      	ldr	r3, [pc, #72]	; (8003e98 <MX_SPI2_Init+0x68>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003e54:	4b10      	ldr	r3, [pc, #64]	; (8003e98 <MX_SPI2_Init+0x68>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8003e5a:	4b0f      	ldr	r3, [pc, #60]	; (8003e98 <MX_SPI2_Init+0x68>)
 8003e5c:	2280      	movs	r2, #128	; 0x80
 8003e5e:	02d2      	lsls	r2, r2, #11
 8003e60:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e62:	4b0d      	ldr	r3, [pc, #52]	; (8003e98 <MX_SPI2_Init+0x68>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003e68:	4b0b      	ldr	r3, [pc, #44]	; (8003e98 <MX_SPI2_Init+0x68>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003e6e:	4b0a      	ldr	r3, [pc, #40]	; (8003e98 <MX_SPI2_Init+0x68>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e74:	4b08      	ldr	r3, [pc, #32]	; (8003e98 <MX_SPI2_Init+0x68>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003e7a:	4b07      	ldr	r3, [pc, #28]	; (8003e98 <MX_SPI2_Init+0x68>)
 8003e7c:	2207      	movs	r2, #7
 8003e7e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003e80:	4b05      	ldr	r3, [pc, #20]	; (8003e98 <MX_SPI2_Init+0x68>)
 8003e82:	0018      	movs	r0, r3
 8003e84:	f005 fde6 	bl	8009a54 <HAL_SPI_Init>
 8003e88:	1e03      	subs	r3, r0, #0
 8003e8a:	d001      	beq.n	8003e90 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003e8c:	f000 fb62 	bl	8004554 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003e90:	46c0      	nop			; (mov r8, r8)
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	46c0      	nop			; (mov r8, r8)
 8003e98:	20000198 	.word	0x20000198
 8003e9c:	40003800 	.word	0x40003800

08003ea0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b08a      	sub	sp, #40	; 0x28
 8003ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ea6:	2318      	movs	r3, #24
 8003ea8:	18fb      	adds	r3, r7, r3
 8003eaa:	0018      	movs	r0, r3
 8003eac:	2310      	movs	r3, #16
 8003eae:	001a      	movs	r2, r3
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	f007 fa70 	bl	800b396 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003eb6:	2310      	movs	r3, #16
 8003eb8:	18fb      	adds	r3, r7, r3
 8003eba:	0018      	movs	r0, r3
 8003ebc:	2308      	movs	r3, #8
 8003ebe:	001a      	movs	r2, r3
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	f007 fa68 	bl	800b396 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ec6:	003b      	movs	r3, r7
 8003ec8:	0018      	movs	r0, r3
 8003eca:	2310      	movs	r3, #16
 8003ecc:	001a      	movs	r2, r3
 8003ece:	2100      	movs	r1, #0
 8003ed0:	f007 fa61 	bl	800b396 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003ed4:	4b37      	ldr	r3, [pc, #220]	; (8003fb4 <MX_TIM2_Init+0x114>)
 8003ed6:	2280      	movs	r2, #128	; 0x80
 8003ed8:	05d2      	lsls	r2, r2, #23
 8003eda:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003edc:	4b35      	ldr	r3, [pc, #212]	; (8003fb4 <MX_TIM2_Init+0x114>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ee2:	4b34      	ldr	r3, [pc, #208]	; (8003fb4 <MX_TIM2_Init+0x114>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0x3FFF;
 8003ee8:	4b32      	ldr	r3, [pc, #200]	; (8003fb4 <MX_TIM2_Init+0x114>)
 8003eea:	4a33      	ldr	r2, [pc, #204]	; (8003fb8 <MX_TIM2_Init+0x118>)
 8003eec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003eee:	4b31      	ldr	r3, [pc, #196]	; (8003fb4 <MX_TIM2_Init+0x114>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ef4:	4b2f      	ldr	r3, [pc, #188]	; (8003fb4 <MX_TIM2_Init+0x114>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003efa:	4b2e      	ldr	r3, [pc, #184]	; (8003fb4 <MX_TIM2_Init+0x114>)
 8003efc:	0018      	movs	r0, r3
 8003efe:	f006 fa6f 	bl	800a3e0 <HAL_TIM_Base_Init>
 8003f02:	1e03      	subs	r3, r0, #0
 8003f04:	d001      	beq.n	8003f0a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003f06:	f000 fb25 	bl	8004554 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8003f0a:	2118      	movs	r1, #24
 8003f0c:	187b      	adds	r3, r7, r1
 8003f0e:	2280      	movs	r2, #128	; 0x80
 8003f10:	0192      	lsls	r2, r2, #6
 8003f12:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8003f14:	187b      	adds	r3, r7, r1
 8003f16:	2200      	movs	r2, #0
 8003f18:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8003f1a:	187b      	adds	r3, r7, r1
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 8003f20:	187b      	adds	r3, r7, r1
 8003f22:	2200      	movs	r2, #0
 8003f24:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003f26:	187a      	adds	r2, r7, r1
 8003f28:	4b22      	ldr	r3, [pc, #136]	; (8003fb4 <MX_TIM2_Init+0x114>)
 8003f2a:	0011      	movs	r1, r2
 8003f2c:	0018      	movs	r0, r3
 8003f2e:	f006 fe35 	bl	800ab9c <HAL_TIM_ConfigClockSource>
 8003f32:	1e03      	subs	r3, r0, #0
 8003f34:	d001      	beq.n	8003f3a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8003f36:	f000 fb0d 	bl	8004554 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8003f3a:	4b1e      	ldr	r3, [pc, #120]	; (8003fb4 <MX_TIM2_Init+0x114>)
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	f006 fae1 	bl	800a504 <HAL_TIM_OC_Init>
 8003f42:	1e03      	subs	r3, r0, #0
 8003f44:	d001      	beq.n	8003f4a <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8003f46:	f000 fb05 	bl	8004554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f4a:	2110      	movs	r1, #16
 8003f4c:	187b      	adds	r3, r7, r1
 8003f4e:	2200      	movs	r2, #0
 8003f50:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f52:	187b      	adds	r3, r7, r1
 8003f54:	2200      	movs	r2, #0
 8003f56:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003f58:	187a      	adds	r2, r7, r1
 8003f5a:	4b16      	ldr	r3, [pc, #88]	; (8003fb4 <MX_TIM2_Init+0x114>)
 8003f5c:	0011      	movs	r1, r2
 8003f5e:	0018      	movs	r0, r3
 8003f60:	f007 f911 	bl	800b186 <HAL_TIMEx_MasterConfigSynchronization>
 8003f64:	1e03      	subs	r3, r0, #0
 8003f66:	d001      	beq.n	8003f6c <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8003f68:	f000 faf4 	bl	8004554 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim2, TIM2_ETR_LSE) != HAL_OK)
 8003f6c:	4b11      	ldr	r3, [pc, #68]	; (8003fb4 <MX_TIM2_Init+0x114>)
 8003f6e:	2105      	movs	r1, #5
 8003f70:	0018      	movs	r0, r3
 8003f72:	f007 f94b 	bl	800b20c <HAL_TIMEx_RemapConfig>
 8003f76:	1e03      	subs	r3, r0, #0
 8003f78:	d001      	beq.n	8003f7e <MX_TIM2_Init+0xde>
  {
    Error_Handler();
 8003f7a:	f000 faeb 	bl	8004554 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003f7e:	003b      	movs	r3, r7
 8003f80:	2200      	movs	r2, #0
 8003f82:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003f84:	003b      	movs	r3, r7
 8003f86:	2200      	movs	r2, #0
 8003f88:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f8a:	003b      	movs	r3, r7
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f90:	003b      	movs	r3, r7
 8003f92:	2200      	movs	r2, #0
 8003f94:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003f96:	0039      	movs	r1, r7
 8003f98:	4b06      	ldr	r3, [pc, #24]	; (8003fb4 <MX_TIM2_Init+0x114>)
 8003f9a:	2204      	movs	r2, #4
 8003f9c:	0018      	movs	r0, r3
 8003f9e:	f006 fcf7 	bl	800a990 <HAL_TIM_OC_ConfigChannel>
 8003fa2:	1e03      	subs	r3, r0, #0
 8003fa4:	d001      	beq.n	8003faa <MX_TIM2_Init+0x10a>
  {
    Error_Handler();
 8003fa6:	f000 fad5 	bl	8004554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003faa:	46c0      	nop			; (mov r8, r8)
 8003fac:	46bd      	mov	sp, r7
 8003fae:	b00a      	add	sp, #40	; 0x28
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	46c0      	nop			; (mov r8, r8)
 8003fb4:	2000028c 	.word	0x2000028c
 8003fb8:	00003fff 	.word	0x00003fff

08003fbc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b08a      	sub	sp, #40	; 0x28
 8003fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003fc2:	2318      	movs	r3, #24
 8003fc4:	18fb      	adds	r3, r7, r3
 8003fc6:	0018      	movs	r0, r3
 8003fc8:	2310      	movs	r3, #16
 8003fca:	001a      	movs	r2, r3
 8003fcc:	2100      	movs	r1, #0
 8003fce:	f007 f9e2 	bl	800b396 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fd2:	2310      	movs	r3, #16
 8003fd4:	18fb      	adds	r3, r7, r3
 8003fd6:	0018      	movs	r0, r3
 8003fd8:	2308      	movs	r3, #8
 8003fda:	001a      	movs	r2, r3
 8003fdc:	2100      	movs	r1, #0
 8003fde:	f007 f9da 	bl	800b396 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003fe2:	003b      	movs	r3, r7
 8003fe4:	0018      	movs	r0, r3
 8003fe6:	2310      	movs	r3, #16
 8003fe8:	001a      	movs	r2, r3
 8003fea:	2100      	movs	r1, #0
 8003fec:	f007 f9d3 	bl	800b396 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003ff0:	4b34      	ldr	r3, [pc, #208]	; (80040c4 <MX_TIM3_Init+0x108>)
 8003ff2:	4a35      	ldr	r2, [pc, #212]	; (80040c8 <MX_TIM3_Init+0x10c>)
 8003ff4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003ff6:	4b33      	ldr	r3, [pc, #204]	; (80040c4 <MX_TIM3_Init+0x108>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ffc:	4b31      	ldr	r3, [pc, #196]	; (80040c4 <MX_TIM3_Init+0x108>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF;
 8004002:	4b30      	ldr	r3, [pc, #192]	; (80040c4 <MX_TIM3_Init+0x108>)
 8004004:	4a31      	ldr	r2, [pc, #196]	; (80040cc <MX_TIM3_Init+0x110>)
 8004006:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004008:	4b2e      	ldr	r3, [pc, #184]	; (80040c4 <MX_TIM3_Init+0x108>)
 800400a:	2200      	movs	r2, #0
 800400c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800400e:	4b2d      	ldr	r3, [pc, #180]	; (80040c4 <MX_TIM3_Init+0x108>)
 8004010:	2200      	movs	r2, #0
 8004012:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004014:	4b2b      	ldr	r3, [pc, #172]	; (80040c4 <MX_TIM3_Init+0x108>)
 8004016:	0018      	movs	r0, r3
 8004018:	f006 f9e2 	bl	800a3e0 <HAL_TIM_Base_Init>
 800401c:	1e03      	subs	r3, r0, #0
 800401e:	d001      	beq.n	8004024 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8004020:	f000 fa98 	bl	8004554 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004024:	2118      	movs	r1, #24
 8004026:	187b      	adds	r3, r7, r1
 8004028:	2280      	movs	r2, #128	; 0x80
 800402a:	0152      	lsls	r2, r2, #5
 800402c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800402e:	187a      	adds	r2, r7, r1
 8004030:	4b24      	ldr	r3, [pc, #144]	; (80040c4 <MX_TIM3_Init+0x108>)
 8004032:	0011      	movs	r1, r2
 8004034:	0018      	movs	r0, r3
 8004036:	f006 fdb1 	bl	800ab9c <HAL_TIM_ConfigClockSource>
 800403a:	1e03      	subs	r3, r0, #0
 800403c:	d001      	beq.n	8004042 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800403e:	f000 fa89 	bl	8004554 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004042:	4b20      	ldr	r3, [pc, #128]	; (80040c4 <MX_TIM3_Init+0x108>)
 8004044:	0018      	movs	r0, r3
 8004046:	f006 fb35 	bl	800a6b4 <HAL_TIM_PWM_Init>
 800404a:	1e03      	subs	r3, r0, #0
 800404c:	d001      	beq.n	8004052 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800404e:	f000 fa81 	bl	8004554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004052:	2110      	movs	r1, #16
 8004054:	187b      	adds	r3, r7, r1
 8004056:	2200      	movs	r2, #0
 8004058:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800405a:	187b      	adds	r3, r7, r1
 800405c:	2200      	movs	r2, #0
 800405e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004060:	187a      	adds	r2, r7, r1
 8004062:	4b18      	ldr	r3, [pc, #96]	; (80040c4 <MX_TIM3_Init+0x108>)
 8004064:	0011      	movs	r1, r2
 8004066:	0018      	movs	r0, r3
 8004068:	f007 f88d 	bl	800b186 <HAL_TIMEx_MasterConfigSynchronization>
 800406c:	1e03      	subs	r3, r0, #0
 800406e:	d001      	beq.n	8004074 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8004070:	f000 fa70 	bl	8004554 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004074:	003b      	movs	r3, r7
 8004076:	2260      	movs	r2, #96	; 0x60
 8004078:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800407a:	003b      	movs	r3, r7
 800407c:	2200      	movs	r2, #0
 800407e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004080:	003b      	movs	r3, r7
 8004082:	2200      	movs	r2, #0
 8004084:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004086:	003b      	movs	r3, r7
 8004088:	2200      	movs	r2, #0
 800408a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800408c:	0039      	movs	r1, r7
 800408e:	4b0d      	ldr	r3, [pc, #52]	; (80040c4 <MX_TIM3_Init+0x108>)
 8004090:	2200      	movs	r2, #0
 8004092:	0018      	movs	r0, r3
 8004094:	f006 fcca 	bl	800aa2c <HAL_TIM_PWM_ConfigChannel>
 8004098:	1e03      	subs	r3, r0, #0
 800409a:	d001      	beq.n	80040a0 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 800409c:	f000 fa5a 	bl	8004554 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 80040a0:	4b08      	ldr	r3, [pc, #32]	; (80040c4 <MX_TIM3_Init+0x108>)
 80040a2:	2104      	movs	r1, #4
 80040a4:	0018      	movs	r0, r3
 80040a6:	f007 f8b1 	bl	800b20c <HAL_TIMEx_RemapConfig>
 80040aa:	1e03      	subs	r3, r0, #0
 80040ac:	d001      	beq.n	80040b2 <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 80040ae:	f000 fa51 	bl	8004554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80040b2:	4b04      	ldr	r3, [pc, #16]	; (80040c4 <MX_TIM3_Init+0x108>)
 80040b4:	0018      	movs	r0, r3
 80040b6:	f000 fb91 	bl	80047dc <HAL_TIM_MspPostInit>

}
 80040ba:	46c0      	nop			; (mov r8, r8)
 80040bc:	46bd      	mov	sp, r7
 80040be:	b00a      	add	sp, #40	; 0x28
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	46c0      	nop			; (mov r8, r8)
 80040c4:	200001f0 	.word	0x200001f0
 80040c8:	40000400 	.word	0x40000400
 80040cc:	0000ffff 	.word	0x0000ffff

080040d0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040d6:	003b      	movs	r3, r7
 80040d8:	0018      	movs	r0, r3
 80040da:	2308      	movs	r3, #8
 80040dc:	001a      	movs	r2, r3
 80040de:	2100      	movs	r1, #0
 80040e0:	f007 f959 	bl	800b396 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80040e4:	4b15      	ldr	r3, [pc, #84]	; (800413c <MX_TIM6_Init+0x6c>)
 80040e6:	4a16      	ldr	r2, [pc, #88]	; (8004140 <MX_TIM6_Init+0x70>)
 80040e8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0x40;
 80040ea:	4b14      	ldr	r3, [pc, #80]	; (800413c <MX_TIM6_Init+0x6c>)
 80040ec:	2240      	movs	r2, #64	; 0x40
 80040ee:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040f0:	4b12      	ldr	r3, [pc, #72]	; (800413c <MX_TIM6_Init+0x6c>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80040f6:	4b11      	ldr	r3, [pc, #68]	; (800413c <MX_TIM6_Init+0x6c>)
 80040f8:	4a12      	ldr	r2, [pc, #72]	; (8004144 <MX_TIM6_Init+0x74>)
 80040fa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040fc:	4b0f      	ldr	r3, [pc, #60]	; (800413c <MX_TIM6_Init+0x6c>)
 80040fe:	2200      	movs	r2, #0
 8004100:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004102:	4b0e      	ldr	r3, [pc, #56]	; (800413c <MX_TIM6_Init+0x6c>)
 8004104:	0018      	movs	r0, r3
 8004106:	f006 f96b 	bl	800a3e0 <HAL_TIM_Base_Init>
 800410a:	1e03      	subs	r3, r0, #0
 800410c:	d001      	beq.n	8004112 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800410e:	f000 fa21 	bl	8004554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004112:	003b      	movs	r3, r7
 8004114:	2200      	movs	r2, #0
 8004116:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004118:	003b      	movs	r3, r7
 800411a:	2200      	movs	r2, #0
 800411c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800411e:	003a      	movs	r2, r7
 8004120:	4b06      	ldr	r3, [pc, #24]	; (800413c <MX_TIM6_Init+0x6c>)
 8004122:	0011      	movs	r1, r2
 8004124:	0018      	movs	r0, r3
 8004126:	f007 f82e 	bl	800b186 <HAL_TIMEx_MasterConfigSynchronization>
 800412a:	1e03      	subs	r3, r0, #0
 800412c:	d001      	beq.n	8004132 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800412e:	f000 fa11 	bl	8004554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004132:	46c0      	nop			; (mov r8, r8)
 8004134:	46bd      	mov	sp, r7
 8004136:	b002      	add	sp, #8
 8004138:	bd80      	pop	{r7, pc}
 800413a:	46c0      	nop			; (mov r8, r8)
 800413c:	20000150 	.word	0x20000150
 8004140:	40001000 	.word	0x40001000
 8004144:	0000ffff 	.word	0x0000ffff

08004148 <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b08a      	sub	sp, #40	; 0x28
 800414c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800414e:	2318      	movs	r3, #24
 8004150:	18fb      	adds	r3, r7, r3
 8004152:	0018      	movs	r0, r3
 8004154:	2310      	movs	r3, #16
 8004156:	001a      	movs	r2, r3
 8004158:	2100      	movs	r1, #0
 800415a:	f007 f91c 	bl	800b396 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800415e:	2310      	movs	r3, #16
 8004160:	18fb      	adds	r3, r7, r3
 8004162:	0018      	movs	r0, r3
 8004164:	2308      	movs	r3, #8
 8004166:	001a      	movs	r2, r3
 8004168:	2100      	movs	r1, #0
 800416a:	f007 f914 	bl	800b396 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800416e:	003b      	movs	r3, r7
 8004170:	0018      	movs	r0, r3
 8004172:	2310      	movs	r3, #16
 8004174:	001a      	movs	r2, r3
 8004176:	2100      	movs	r1, #0
 8004178:	f007 f90d 	bl	800b396 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 800417c:	4b3b      	ldr	r3, [pc, #236]	; (800426c <MX_TIM21_Init+0x124>)
 800417e:	4a3c      	ldr	r2, [pc, #240]	; (8004270 <MX_TIM21_Init+0x128>)
 8004180:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 0;
 8004182:	4b3a      	ldr	r3, [pc, #232]	; (800426c <MX_TIM21_Init+0x124>)
 8004184:	2200      	movs	r2, #0
 8004186:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004188:	4b38      	ldr	r3, [pc, #224]	; (800426c <MX_TIM21_Init+0x124>)
 800418a:	2200      	movs	r2, #0
 800418c:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 0x7FFF;
 800418e:	4b37      	ldr	r3, [pc, #220]	; (800426c <MX_TIM21_Init+0x124>)
 8004190:	4a38      	ldr	r2, [pc, #224]	; (8004274 <MX_TIM21_Init+0x12c>)
 8004192:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004194:	4b35      	ldr	r3, [pc, #212]	; (800426c <MX_TIM21_Init+0x124>)
 8004196:	2200      	movs	r2, #0
 8004198:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800419a:	4b34      	ldr	r3, [pc, #208]	; (800426c <MX_TIM21_Init+0x124>)
 800419c:	2200      	movs	r2, #0
 800419e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 80041a0:	4b32      	ldr	r3, [pc, #200]	; (800426c <MX_TIM21_Init+0x124>)
 80041a2:	0018      	movs	r0, r3
 80041a4:	f006 f91c 	bl	800a3e0 <HAL_TIM_Base_Init>
 80041a8:	1e03      	subs	r3, r0, #0
 80041aa:	d001      	beq.n	80041b0 <MX_TIM21_Init+0x68>
  {
    Error_Handler();
 80041ac:	f000 f9d2 	bl	8004554 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80041b0:	2118      	movs	r1, #24
 80041b2:	187b      	adds	r3, r7, r1
 80041b4:	2280      	movs	r2, #128	; 0x80
 80041b6:	0192      	lsls	r2, r2, #6
 80041b8:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80041ba:	187b      	adds	r3, r7, r1
 80041bc:	2200      	movs	r2, #0
 80041be:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80041c0:	187b      	adds	r3, r7, r1
 80041c2:	2200      	movs	r2, #0
 80041c4:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 80041c6:	187b      	adds	r3, r7, r1
 80041c8:	2200      	movs	r2, #0
 80041ca:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 80041cc:	187a      	adds	r2, r7, r1
 80041ce:	4b27      	ldr	r3, [pc, #156]	; (800426c <MX_TIM21_Init+0x124>)
 80041d0:	0011      	movs	r1, r2
 80041d2:	0018      	movs	r0, r3
 80041d4:	f006 fce2 	bl	800ab9c <HAL_TIM_ConfigClockSource>
 80041d8:	1e03      	subs	r3, r0, #0
 80041da:	d001      	beq.n	80041e0 <MX_TIM21_Init+0x98>
  {
    Error_Handler();
 80041dc:	f000 f9ba 	bl	8004554 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim21) != HAL_OK)
 80041e0:	4b22      	ldr	r3, [pc, #136]	; (800426c <MX_TIM21_Init+0x124>)
 80041e2:	0018      	movs	r0, r3
 80041e4:	f006 f98e 	bl	800a504 <HAL_TIM_OC_Init>
 80041e8:	1e03      	subs	r3, r0, #0
 80041ea:	d001      	beq.n	80041f0 <MX_TIM21_Init+0xa8>
  {
    Error_Handler();
 80041ec:	f000 f9b2 	bl	8004554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041f0:	2110      	movs	r1, #16
 80041f2:	187b      	adds	r3, r7, r1
 80041f4:	2200      	movs	r2, #0
 80041f6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041f8:	187b      	adds	r3, r7, r1
 80041fa:	2200      	movs	r2, #0
 80041fc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 80041fe:	187a      	adds	r2, r7, r1
 8004200:	4b1a      	ldr	r3, [pc, #104]	; (800426c <MX_TIM21_Init+0x124>)
 8004202:	0011      	movs	r1, r2
 8004204:	0018      	movs	r0, r3
 8004206:	f006 ffbe 	bl	800b186 <HAL_TIMEx_MasterConfigSynchronization>
 800420a:	1e03      	subs	r3, r0, #0
 800420c:	d001      	beq.n	8004212 <MX_TIM21_Init+0xca>
  {
    Error_Handler();
 800420e:	f000 f9a1 	bl	8004554 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim21, TIM21_ETR_LSE) != HAL_OK)
 8004212:	4b16      	ldr	r3, [pc, #88]	; (800426c <MX_TIM21_Init+0x124>)
 8004214:	2103      	movs	r1, #3
 8004216:	0018      	movs	r0, r3
 8004218:	f006 fff8 	bl	800b20c <HAL_TIMEx_RemapConfig>
 800421c:	1e03      	subs	r3, r0, #0
 800421e:	d001      	beq.n	8004224 <MX_TIM21_Init+0xdc>
  {
    Error_Handler();
 8004220:	f000 f998 	bl	8004554 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8004224:	003b      	movs	r3, r7
 8004226:	2200      	movs	r2, #0
 8004228:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800422a:	003b      	movs	r3, r7
 800422c:	2200      	movs	r2, #0
 800422e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004230:	003b      	movs	r3, r7
 8004232:	2200      	movs	r2, #0
 8004234:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004236:	003b      	movs	r3, r7
 8004238:	2200      	movs	r2, #0
 800423a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800423c:	0039      	movs	r1, r7
 800423e:	4b0b      	ldr	r3, [pc, #44]	; (800426c <MX_TIM21_Init+0x124>)
 8004240:	2200      	movs	r2, #0
 8004242:	0018      	movs	r0, r3
 8004244:	f006 fba4 	bl	800a990 <HAL_TIM_OC_ConfigChannel>
 8004248:	1e03      	subs	r3, r0, #0
 800424a:	d001      	beq.n	8004250 <MX_TIM21_Init+0x108>
  {
    Error_Handler();
 800424c:	f000 f982 	bl	8004554 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004250:	0039      	movs	r1, r7
 8004252:	4b06      	ldr	r3, [pc, #24]	; (800426c <MX_TIM21_Init+0x124>)
 8004254:	2204      	movs	r2, #4
 8004256:	0018      	movs	r0, r3
 8004258:	f006 fb9a 	bl	800a990 <HAL_TIM_OC_ConfigChannel>
 800425c:	1e03      	subs	r3, r0, #0
 800425e:	d001      	beq.n	8004264 <MX_TIM21_Init+0x11c>
  {
    Error_Handler();
 8004260:	f000 f978 	bl	8004554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8004264:	46c0      	nop			; (mov r8, r8)
 8004266:	46bd      	mov	sp, r7
 8004268:	b00a      	add	sp, #40	; 0x28
 800426a:	bd80      	pop	{r7, pc}
 800426c:	20000598 	.word	0x20000598
 8004270:	40010800 	.word	0x40010800
 8004274:	00007fff 	.word	0x00007fff

08004278 <MX_TIM22_Init>:
  * @brief TIM22 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM22_Init(void)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b08a      	sub	sp, #40	; 0x28
 800427c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800427e:	2318      	movs	r3, #24
 8004280:	18fb      	adds	r3, r7, r3
 8004282:	0018      	movs	r0, r3
 8004284:	2310      	movs	r3, #16
 8004286:	001a      	movs	r2, r3
 8004288:	2100      	movs	r1, #0
 800428a:	f007 f884 	bl	800b396 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800428e:	2310      	movs	r3, #16
 8004290:	18fb      	adds	r3, r7, r3
 8004292:	0018      	movs	r0, r3
 8004294:	2308      	movs	r3, #8
 8004296:	001a      	movs	r2, r3
 8004298:	2100      	movs	r1, #0
 800429a:	f007 f87c 	bl	800b396 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800429e:	003b      	movs	r3, r7
 80042a0:	0018      	movs	r0, r3
 80042a2:	2310      	movs	r3, #16
 80042a4:	001a      	movs	r2, r3
 80042a6:	2100      	movs	r1, #0
 80042a8:	f007 f875 	bl	800b396 <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 80042ac:	4b37      	ldr	r3, [pc, #220]	; (800438c <MX_TIM22_Init+0x114>)
 80042ae:	4a38      	ldr	r2, [pc, #224]	; (8004390 <MX_TIM22_Init+0x118>)
 80042b0:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 0x400;
 80042b2:	4b36      	ldr	r3, [pc, #216]	; (800438c <MX_TIM22_Init+0x114>)
 80042b4:	2280      	movs	r2, #128	; 0x80
 80042b6:	00d2      	lsls	r2, r2, #3
 80042b8:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042ba:	4b34      	ldr	r3, [pc, #208]	; (800438c <MX_TIM22_Init+0x114>)
 80042bc:	2200      	movs	r2, #0
 80042be:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 31;
 80042c0:	4b32      	ldr	r3, [pc, #200]	; (800438c <MX_TIM22_Init+0x114>)
 80042c2:	221f      	movs	r2, #31
 80042c4:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042c6:	4b31      	ldr	r3, [pc, #196]	; (800438c <MX_TIM22_Init+0x114>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042cc:	4b2f      	ldr	r3, [pc, #188]	; (800438c <MX_TIM22_Init+0x114>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim22) != HAL_OK)
 80042d2:	4b2e      	ldr	r3, [pc, #184]	; (800438c <MX_TIM22_Init+0x114>)
 80042d4:	0018      	movs	r0, r3
 80042d6:	f006 f883 	bl	800a3e0 <HAL_TIM_Base_Init>
 80042da:	1e03      	subs	r3, r0, #0
 80042dc:	d001      	beq.n	80042e2 <MX_TIM22_Init+0x6a>
  {
    Error_Handler();
 80042de:	f000 f939 	bl	8004554 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80042e2:	2118      	movs	r1, #24
 80042e4:	187b      	adds	r3, r7, r1
 80042e6:	2280      	movs	r2, #128	; 0x80
 80042e8:	0192      	lsls	r2, r2, #6
 80042ea:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80042ec:	187b      	adds	r3, r7, r1
 80042ee:	2200      	movs	r2, #0
 80042f0:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80042f2:	187b      	adds	r3, r7, r1
 80042f4:	2200      	movs	r2, #0
 80042f6:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 80042f8:	187b      	adds	r3, r7, r1
 80042fa:	2200      	movs	r2, #0
 80042fc:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig) != HAL_OK)
 80042fe:	187a      	adds	r2, r7, r1
 8004300:	4b22      	ldr	r3, [pc, #136]	; (800438c <MX_TIM22_Init+0x114>)
 8004302:	0011      	movs	r1, r2
 8004304:	0018      	movs	r0, r3
 8004306:	f006 fc49 	bl	800ab9c <HAL_TIM_ConfigClockSource>
 800430a:	1e03      	subs	r3, r0, #0
 800430c:	d001      	beq.n	8004312 <MX_TIM22_Init+0x9a>
  {
    Error_Handler();
 800430e:	f000 f921 	bl	8004554 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim22) != HAL_OK)
 8004312:	4b1e      	ldr	r3, [pc, #120]	; (800438c <MX_TIM22_Init+0x114>)
 8004314:	0018      	movs	r0, r3
 8004316:	f006 f8f5 	bl	800a504 <HAL_TIM_OC_Init>
 800431a:	1e03      	subs	r3, r0, #0
 800431c:	d001      	beq.n	8004322 <MX_TIM22_Init+0xaa>
  {
    Error_Handler();
 800431e:	f000 f919 	bl	8004554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004322:	2110      	movs	r1, #16
 8004324:	187b      	adds	r3, r7, r1
 8004326:	2200      	movs	r2, #0
 8004328:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800432a:	187b      	adds	r3, r7, r1
 800432c:	2200      	movs	r2, #0
 800432e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 8004330:	187a      	adds	r2, r7, r1
 8004332:	4b16      	ldr	r3, [pc, #88]	; (800438c <MX_TIM22_Init+0x114>)
 8004334:	0011      	movs	r1, r2
 8004336:	0018      	movs	r0, r3
 8004338:	f006 ff25 	bl	800b186 <HAL_TIMEx_MasterConfigSynchronization>
 800433c:	1e03      	subs	r3, r0, #0
 800433e:	d001      	beq.n	8004344 <MX_TIM22_Init+0xcc>
  {
    Error_Handler();
 8004340:	f000 f908 	bl	8004554 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim22, TIM22_ETR_LSE) != HAL_OK)
 8004344:	4b11      	ldr	r3, [pc, #68]	; (800438c <MX_TIM22_Init+0x114>)
 8004346:	2103      	movs	r1, #3
 8004348:	0018      	movs	r0, r3
 800434a:	f006 ff5f 	bl	800b20c <HAL_TIMEx_RemapConfig>
 800434e:	1e03      	subs	r3, r0, #0
 8004350:	d001      	beq.n	8004356 <MX_TIM22_Init+0xde>
  {
    Error_Handler();
 8004352:	f000 f8ff 	bl	8004554 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8004356:	003b      	movs	r3, r7
 8004358:	2200      	movs	r2, #0
 800435a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800435c:	003b      	movs	r3, r7
 800435e:	2200      	movs	r2, #0
 8004360:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004362:	003b      	movs	r3, r7
 8004364:	2200      	movs	r2, #0
 8004366:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004368:	003b      	movs	r3, r7
 800436a:	2200      	movs	r2, #0
 800436c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800436e:	0039      	movs	r1, r7
 8004370:	4b06      	ldr	r3, [pc, #24]	; (800438c <MX_TIM22_Init+0x114>)
 8004372:	2200      	movs	r2, #0
 8004374:	0018      	movs	r0, r3
 8004376:	f006 fb0b 	bl	800a990 <HAL_TIM_OC_ConfigChannel>
 800437a:	1e03      	subs	r3, r0, #0
 800437c:	d001      	beq.n	8004382 <MX_TIM22_Init+0x10a>
  {
    Error_Handler();
 800437e:	f000 f8e9 	bl	8004554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */

}
 8004382:	46c0      	nop			; (mov r8, r8)
 8004384:	46bd      	mov	sp, r7
 8004386:	b00a      	add	sp, #40	; 0x28
 8004388:	bd80      	pop	{r7, pc}
 800438a:	46c0      	nop			; (mov r8, r8)
 800438c:	2000022c 	.word	0x2000022c
 8004390:	40011400 	.word	0x40011400

08004394 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8004398:	4b0f      	ldr	r3, [pc, #60]	; (80043d8 <MX_USB_PCD_Init+0x44>)
 800439a:	4a10      	ldr	r2, [pc, #64]	; (80043dc <MX_USB_PCD_Init+0x48>)
 800439c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800439e:	4b0e      	ldr	r3, [pc, #56]	; (80043d8 <MX_USB_PCD_Init+0x44>)
 80043a0:	2208      	movs	r2, #8
 80043a2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80043a4:	4b0c      	ldr	r3, [pc, #48]	; (80043d8 <MX_USB_PCD_Init+0x44>)
 80043a6:	2202      	movs	r2, #2
 80043a8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80043aa:	4b0b      	ldr	r3, [pc, #44]	; (80043d8 <MX_USB_PCD_Init+0x44>)
 80043ac:	2202      	movs	r2, #2
 80043ae:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80043b0:	4b09      	ldr	r3, [pc, #36]	; (80043d8 <MX_USB_PCD_Init+0x44>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80043b6:	4b08      	ldr	r3, [pc, #32]	; (80043d8 <MX_USB_PCD_Init+0x44>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80043bc:	4b06      	ldr	r3, [pc, #24]	; (80043d8 <MX_USB_PCD_Init+0x44>)
 80043be:	2200      	movs	r2, #0
 80043c0:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80043c2:	4b05      	ldr	r3, [pc, #20]	; (80043d8 <MX_USB_PCD_Init+0x44>)
 80043c4:	0018      	movs	r0, r3
 80043c6:	f003 fd13 	bl	8007df0 <HAL_PCD_Init>
 80043ca:	1e03      	subs	r3, r0, #0
 80043cc:	d001      	beq.n	80043d2 <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 80043ce:	f000 f8c1 	bl	8004554 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80043d2:	46c0      	nop			; (mov r8, r8)
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	200002c8 	.word	0x200002c8
 80043dc:	40005c00 	.word	0x40005c00

080043e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80043e0:	b590      	push	{r4, r7, lr}
 80043e2:	b089      	sub	sp, #36	; 0x24
 80043e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043e6:	240c      	movs	r4, #12
 80043e8:	193b      	adds	r3, r7, r4
 80043ea:	0018      	movs	r0, r3
 80043ec:	2314      	movs	r3, #20
 80043ee:	001a      	movs	r2, r3
 80043f0:	2100      	movs	r1, #0
 80043f2:	f006 ffd0 	bl	800b396 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80043f6:	4b52      	ldr	r3, [pc, #328]	; (8004540 <MX_GPIO_Init+0x160>)
 80043f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043fa:	4b51      	ldr	r3, [pc, #324]	; (8004540 <MX_GPIO_Init+0x160>)
 80043fc:	2104      	movs	r1, #4
 80043fe:	430a      	orrs	r2, r1
 8004400:	62da      	str	r2, [r3, #44]	; 0x2c
 8004402:	4b4f      	ldr	r3, [pc, #316]	; (8004540 <MX_GPIO_Init+0x160>)
 8004404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004406:	2204      	movs	r2, #4
 8004408:	4013      	ands	r3, r2
 800440a:	60bb      	str	r3, [r7, #8]
 800440c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800440e:	4b4c      	ldr	r3, [pc, #304]	; (8004540 <MX_GPIO_Init+0x160>)
 8004410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004412:	4b4b      	ldr	r3, [pc, #300]	; (8004540 <MX_GPIO_Init+0x160>)
 8004414:	2101      	movs	r1, #1
 8004416:	430a      	orrs	r2, r1
 8004418:	62da      	str	r2, [r3, #44]	; 0x2c
 800441a:	4b49      	ldr	r3, [pc, #292]	; (8004540 <MX_GPIO_Init+0x160>)
 800441c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441e:	2201      	movs	r2, #1
 8004420:	4013      	ands	r3, r2
 8004422:	607b      	str	r3, [r7, #4]
 8004424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004426:	4b46      	ldr	r3, [pc, #280]	; (8004540 <MX_GPIO_Init+0x160>)
 8004428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800442a:	4b45      	ldr	r3, [pc, #276]	; (8004540 <MX_GPIO_Init+0x160>)
 800442c:	2102      	movs	r1, #2
 800442e:	430a      	orrs	r2, r1
 8004430:	62da      	str	r2, [r3, #44]	; 0x2c
 8004432:	4b43      	ldr	r3, [pc, #268]	; (8004540 <MX_GPIO_Init+0x160>)
 8004434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004436:	2202      	movs	r2, #2
 8004438:	4013      	ands	r3, r2
 800443a:	603b      	str	r3, [r7, #0]
 800443c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 800443e:	23a0      	movs	r3, #160	; 0xa0
 8004440:	05db      	lsls	r3, r3, #23
 8004442:	2200      	movs	r2, #0
 8004444:	21f2      	movs	r1, #242	; 0xf2
 8004446:	0018      	movs	r0, r3
 8004448:	f003 fc86 	bl	8007d58 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800444c:	23a0      	movs	r3, #160	; 0xa0
 800444e:	05db      	lsls	r3, r3, #23
 8004450:	2201      	movs	r2, #1
 8004452:	2104      	movs	r1, #4
 8004454:	0018      	movs	r0, r3
 8004456:	f003 fc7f 	bl	8007d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800445a:	2380      	movs	r3, #128	; 0x80
 800445c:	01db      	lsls	r3, r3, #7
 800445e:	4839      	ldr	r0, [pc, #228]	; (8004544 <MX_GPIO_Init+0x164>)
 8004460:	2200      	movs	r2, #0
 8004462:	0019      	movs	r1, r3
 8004464:	f003 fc78 	bl	8007d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8004468:	4b37      	ldr	r3, [pc, #220]	; (8004548 <MX_GPIO_Init+0x168>)
 800446a:	2201      	movs	r2, #1
 800446c:	2180      	movs	r1, #128	; 0x80
 800446e:	0018      	movs	r0, r3
 8004470:	f003 fc72 	bl	8007d58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA4 PA5 
                           PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5 
 8004474:	193b      	adds	r3, r7, r4
 8004476:	22f6      	movs	r2, #246	; 0xf6
 8004478:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800447a:	193b      	adds	r3, r7, r4
 800447c:	2201      	movs	r2, #1
 800447e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004480:	193b      	adds	r3, r7, r4
 8004482:	2200      	movs	r2, #0
 8004484:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004486:	193b      	adds	r3, r7, r4
 8004488:	2200      	movs	r2, #0
 800448a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800448c:	193a      	adds	r2, r7, r4
 800448e:	23a0      	movs	r3, #160	; 0xa0
 8004490:	05db      	lsls	r3, r3, #23
 8004492:	0011      	movs	r1, r2
 8004494:	0018      	movs	r0, r3
 8004496:	f003 fae1 	bl	8007a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11;
 800449a:	193b      	adds	r3, r7, r4
 800449c:	4a2b      	ldr	r2, [pc, #172]	; (800454c <MX_GPIO_Init+0x16c>)
 800449e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80044a0:	193b      	adds	r3, r7, r4
 80044a2:	4a2b      	ldr	r2, [pc, #172]	; (8004550 <MX_GPIO_Init+0x170>)
 80044a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044a6:	193b      	adds	r3, r7, r4
 80044a8:	2200      	movs	r2, #0
 80044aa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044ac:	193b      	adds	r3, r7, r4
 80044ae:	4a25      	ldr	r2, [pc, #148]	; (8004544 <MX_GPIO_Init+0x164>)
 80044b0:	0019      	movs	r1, r3
 80044b2:	0010      	movs	r0, r2
 80044b4:	f003 fad2 	bl	8007a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80044b8:	0021      	movs	r1, r4
 80044ba:	187b      	adds	r3, r7, r1
 80044bc:	2280      	movs	r2, #128	; 0x80
 80044be:	01d2      	lsls	r2, r2, #7
 80044c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044c2:	187b      	adds	r3, r7, r1
 80044c4:	2201      	movs	r2, #1
 80044c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c8:	187b      	adds	r3, r7, r1
 80044ca:	2200      	movs	r2, #0
 80044cc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044ce:	187b      	adds	r3, r7, r1
 80044d0:	2200      	movs	r2, #0
 80044d2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044d4:	000c      	movs	r4, r1
 80044d6:	187b      	adds	r3, r7, r1
 80044d8:	4a1a      	ldr	r2, [pc, #104]	; (8004544 <MX_GPIO_Init+0x164>)
 80044da:	0019      	movs	r1, r3
 80044dc:	0010      	movs	r0, r2
 80044de:	f003 fabd 	bl	8007a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80044e2:	0021      	movs	r1, r4
 80044e4:	187b      	adds	r3, r7, r1
 80044e6:	2280      	movs	r2, #128	; 0x80
 80044e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044ea:	187b      	adds	r3, r7, r1
 80044ec:	2201      	movs	r2, #1
 80044ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044f0:	187b      	adds	r3, r7, r1
 80044f2:	2200      	movs	r2, #0
 80044f4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044f6:	187b      	adds	r3, r7, r1
 80044f8:	2200      	movs	r2, #0
 80044fa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044fc:	187b      	adds	r3, r7, r1
 80044fe:	4a12      	ldr	r2, [pc, #72]	; (8004548 <MX_GPIO_Init+0x168>)
 8004500:	0019      	movs	r1, r3
 8004502:	0010      	movs	r0, r2
 8004504:	f003 faaa 	bl	8007a5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8004508:	2200      	movs	r2, #0
 800450a:	2100      	movs	r1, #0
 800450c:	2005      	movs	r0, #5
 800450e:	f003 fa0b 	bl	8007928 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8004512:	2005      	movs	r0, #5
 8004514:	f003 fa1d 	bl	8007952 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8004518:	2200      	movs	r2, #0
 800451a:	2100      	movs	r1, #0
 800451c:	2006      	movs	r0, #6
 800451e:	f003 fa03 	bl	8007928 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8004522:	2006      	movs	r0, #6
 8004524:	f003 fa15 	bl	8007952 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8004528:	2200      	movs	r2, #0
 800452a:	2100      	movs	r1, #0
 800452c:	2007      	movs	r0, #7
 800452e:	f003 f9fb 	bl	8007928 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8004532:	2007      	movs	r0, #7
 8004534:	f003 fa0d 	bl	8007952 <HAL_NVIC_EnableIRQ>

}
 8004538:	46c0      	nop			; (mov r8, r8)
 800453a:	46bd      	mov	sp, r7
 800453c:	b009      	add	sp, #36	; 0x24
 800453e:	bd90      	pop	{r4, r7, pc}
 8004540:	40021000 	.word	0x40021000
 8004544:	50000400 	.word	0x50000400
 8004548:	50000800 	.word	0x50000800
 800454c:	00000c06 	.word	0x00000c06
 8004550:	10110000 	.word	0x10110000

08004554 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004558:	46c0      	nop			; (mov r8, r8)
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
	...

08004560 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004564:	4b07      	ldr	r3, [pc, #28]	; (8004584 <HAL_MspInit+0x24>)
 8004566:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004568:	4b06      	ldr	r3, [pc, #24]	; (8004584 <HAL_MspInit+0x24>)
 800456a:	2101      	movs	r1, #1
 800456c:	430a      	orrs	r2, r1
 800456e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8004570:	4b04      	ldr	r3, [pc, #16]	; (8004584 <HAL_MspInit+0x24>)
 8004572:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004574:	4b03      	ldr	r3, [pc, #12]	; (8004584 <HAL_MspInit+0x24>)
 8004576:	2180      	movs	r1, #128	; 0x80
 8004578:	0549      	lsls	r1, r1, #21
 800457a:	430a      	orrs	r2, r1
 800457c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800457e:	46c0      	nop			; (mov r8, r8)
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	40021000 	.word	0x40021000

08004588 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b088      	sub	sp, #32
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004590:	230c      	movs	r3, #12
 8004592:	18fb      	adds	r3, r7, r3
 8004594:	0018      	movs	r0, r3
 8004596:	2314      	movs	r3, #20
 8004598:	001a      	movs	r2, r3
 800459a:	2100      	movs	r1, #0
 800459c:	f006 fefb 	bl	800b396 <memset>
  if(hadc->Instance==ADC1)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a19      	ldr	r2, [pc, #100]	; (800460c <HAL_ADC_MspInit+0x84>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d12b      	bne.n	8004602 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80045aa:	4b19      	ldr	r3, [pc, #100]	; (8004610 <HAL_ADC_MspInit+0x88>)
 80045ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045ae:	4b18      	ldr	r3, [pc, #96]	; (8004610 <HAL_ADC_MspInit+0x88>)
 80045b0:	2180      	movs	r1, #128	; 0x80
 80045b2:	0089      	lsls	r1, r1, #2
 80045b4:	430a      	orrs	r2, r1
 80045b6:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045b8:	4b15      	ldr	r3, [pc, #84]	; (8004610 <HAL_ADC_MspInit+0x88>)
 80045ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045bc:	4b14      	ldr	r3, [pc, #80]	; (8004610 <HAL_ADC_MspInit+0x88>)
 80045be:	2101      	movs	r1, #1
 80045c0:	430a      	orrs	r2, r1
 80045c2:	62da      	str	r2, [r3, #44]	; 0x2c
 80045c4:	4b12      	ldr	r3, [pc, #72]	; (8004610 <HAL_ADC_MspInit+0x88>)
 80045c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c8:	2201      	movs	r2, #1
 80045ca:	4013      	ands	r3, r2
 80045cc:	60bb      	str	r3, [r7, #8]
 80045ce:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration    
    PA0     ------> ADC_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80045d0:	210c      	movs	r1, #12
 80045d2:	187b      	adds	r3, r7, r1
 80045d4:	2201      	movs	r2, #1
 80045d6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80045d8:	187b      	adds	r3, r7, r1
 80045da:	2203      	movs	r2, #3
 80045dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045de:	187b      	adds	r3, r7, r1
 80045e0:	2200      	movs	r2, #0
 80045e2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045e4:	187a      	adds	r2, r7, r1
 80045e6:	23a0      	movs	r3, #160	; 0xa0
 80045e8:	05db      	lsls	r3, r3, #23
 80045ea:	0011      	movs	r1, r2
 80045ec:	0018      	movs	r0, r3
 80045ee:	f003 fa35 	bl	8007a5c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 80045f2:	2200      	movs	r2, #0
 80045f4:	2100      	movs	r1, #0
 80045f6:	200c      	movs	r0, #12
 80045f8:	f003 f996 	bl	8007928 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 80045fc:	200c      	movs	r0, #12
 80045fe:	f003 f9a8 	bl	8007952 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004602:	46c0      	nop			; (mov r8, r8)
 8004604:	46bd      	mov	sp, r7
 8004606:	b008      	add	sp, #32
 8004608:	bd80      	pop	{r7, pc}
 800460a:	46c0      	nop			; (mov r8, r8)
 800460c:	40012400 	.word	0x40012400
 8004610:	40021000 	.word	0x40021000

08004614 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a0a      	ldr	r2, [pc, #40]	; (800464c <HAL_RTC_MspInit+0x38>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d10e      	bne.n	8004644 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004626:	4b0a      	ldr	r3, [pc, #40]	; (8004650 <HAL_RTC_MspInit+0x3c>)
 8004628:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800462a:	4b09      	ldr	r3, [pc, #36]	; (8004650 <HAL_RTC_MspInit+0x3c>)
 800462c:	2180      	movs	r1, #128	; 0x80
 800462e:	02c9      	lsls	r1, r1, #11
 8004630:	430a      	orrs	r2, r1
 8004632:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8004634:	2200      	movs	r2, #0
 8004636:	2100      	movs	r1, #0
 8004638:	2002      	movs	r0, #2
 800463a:	f003 f975 	bl	8007928 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800463e:	2002      	movs	r0, #2
 8004640:	f003 f987 	bl	8007952 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004644:	46c0      	nop			; (mov r8, r8)
 8004646:	46bd      	mov	sp, r7
 8004648:	b002      	add	sp, #8
 800464a:	bd80      	pop	{r7, pc}
 800464c:	40002800 	.word	0x40002800
 8004650:	40021000 	.word	0x40021000

08004654 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b088      	sub	sp, #32
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800465c:	230c      	movs	r3, #12
 800465e:	18fb      	adds	r3, r7, r3
 8004660:	0018      	movs	r0, r3
 8004662:	2314      	movs	r3, #20
 8004664:	001a      	movs	r2, r3
 8004666:	2100      	movs	r1, #0
 8004668:	f006 fe95 	bl	800b396 <memset>
  if(hspi->Instance==SPI2)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a1c      	ldr	r2, [pc, #112]	; (80046e4 <HAL_SPI_MspInit+0x90>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d131      	bne.n	80046da <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004676:	4b1c      	ldr	r3, [pc, #112]	; (80046e8 <HAL_SPI_MspInit+0x94>)
 8004678:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800467a:	4b1b      	ldr	r3, [pc, #108]	; (80046e8 <HAL_SPI_MspInit+0x94>)
 800467c:	2180      	movs	r1, #128	; 0x80
 800467e:	01c9      	lsls	r1, r1, #7
 8004680:	430a      	orrs	r2, r1
 8004682:	639a      	str	r2, [r3, #56]	; 0x38
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004684:	4b18      	ldr	r3, [pc, #96]	; (80046e8 <HAL_SPI_MspInit+0x94>)
 8004686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004688:	4b17      	ldr	r3, [pc, #92]	; (80046e8 <HAL_SPI_MspInit+0x94>)
 800468a:	2102      	movs	r1, #2
 800468c:	430a      	orrs	r2, r1
 800468e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004690:	4b15      	ldr	r3, [pc, #84]	; (80046e8 <HAL_SPI_MspInit+0x94>)
 8004692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004694:	2202      	movs	r2, #2
 8004696:	4013      	ands	r3, r2
 8004698:	60bb      	str	r3, [r7, #8]
 800469a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800469c:	210c      	movs	r1, #12
 800469e:	187b      	adds	r3, r7, r1
 80046a0:	22b0      	movs	r2, #176	; 0xb0
 80046a2:	0212      	lsls	r2, r2, #8
 80046a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046a6:	187b      	adds	r3, r7, r1
 80046a8:	2202      	movs	r2, #2
 80046aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ac:	187b      	adds	r3, r7, r1
 80046ae:	2200      	movs	r2, #0
 80046b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046b2:	187b      	adds	r3, r7, r1
 80046b4:	2203      	movs	r2, #3
 80046b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80046b8:	187b      	adds	r3, r7, r1
 80046ba:	2200      	movs	r2, #0
 80046bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046be:	187b      	adds	r3, r7, r1
 80046c0:	4a0a      	ldr	r2, [pc, #40]	; (80046ec <HAL_SPI_MspInit+0x98>)
 80046c2:	0019      	movs	r1, r3
 80046c4:	0010      	movs	r0, r2
 80046c6:	f003 f9c9 	bl	8007a5c <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80046ca:	2200      	movs	r2, #0
 80046cc:	2100      	movs	r1, #0
 80046ce:	201a      	movs	r0, #26
 80046d0:	f003 f92a 	bl	8007928 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80046d4:	201a      	movs	r0, #26
 80046d6:	f003 f93c 	bl	8007952 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80046da:	46c0      	nop			; (mov r8, r8)
 80046dc:	46bd      	mov	sp, r7
 80046de:	b008      	add	sp, #32
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	46c0      	nop			; (mov r8, r8)
 80046e4:	40003800 	.word	0x40003800
 80046e8:	40021000 	.word	0x40021000
 80046ec:	50000400 	.word	0x50000400

080046f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	2380      	movs	r3, #128	; 0x80
 80046fe:	05db      	lsls	r3, r3, #23
 8004700:	429a      	cmp	r2, r3
 8004702:	d10e      	bne.n	8004722 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004704:	4b30      	ldr	r3, [pc, #192]	; (80047c8 <HAL_TIM_Base_MspInit+0xd8>)
 8004706:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004708:	4b2f      	ldr	r3, [pc, #188]	; (80047c8 <HAL_TIM_Base_MspInit+0xd8>)
 800470a:	2101      	movs	r1, #1
 800470c:	430a      	orrs	r2, r1
 800470e:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004710:	2200      	movs	r2, #0
 8004712:	2100      	movs	r1, #0
 8004714:	200f      	movs	r0, #15
 8004716:	f003 f907 	bl	8007928 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800471a:	200f      	movs	r0, #15
 800471c:	f003 f919 	bl	8007952 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }

}
 8004720:	e04e      	b.n	80047c0 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM3)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a29      	ldr	r2, [pc, #164]	; (80047cc <HAL_TIM_Base_MspInit+0xdc>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d10e      	bne.n	800474a <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800472c:	4b26      	ldr	r3, [pc, #152]	; (80047c8 <HAL_TIM_Base_MspInit+0xd8>)
 800472e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004730:	4b25      	ldr	r3, [pc, #148]	; (80047c8 <HAL_TIM_Base_MspInit+0xd8>)
 8004732:	2102      	movs	r1, #2
 8004734:	430a      	orrs	r2, r1
 8004736:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004738:	2200      	movs	r2, #0
 800473a:	2100      	movs	r1, #0
 800473c:	2010      	movs	r0, #16
 800473e:	f003 f8f3 	bl	8007928 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004742:	2010      	movs	r0, #16
 8004744:	f003 f905 	bl	8007952 <HAL_NVIC_EnableIRQ>
}
 8004748:	e03a      	b.n	80047c0 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM6)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a20      	ldr	r2, [pc, #128]	; (80047d0 <HAL_TIM_Base_MspInit+0xe0>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d10e      	bne.n	8004772 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004754:	4b1c      	ldr	r3, [pc, #112]	; (80047c8 <HAL_TIM_Base_MspInit+0xd8>)
 8004756:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004758:	4b1b      	ldr	r3, [pc, #108]	; (80047c8 <HAL_TIM_Base_MspInit+0xd8>)
 800475a:	2110      	movs	r1, #16
 800475c:	430a      	orrs	r2, r1
 800475e:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004760:	2200      	movs	r2, #0
 8004762:	2100      	movs	r1, #0
 8004764:	2011      	movs	r0, #17
 8004766:	f003 f8df 	bl	8007928 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800476a:	2011      	movs	r0, #17
 800476c:	f003 f8f1 	bl	8007952 <HAL_NVIC_EnableIRQ>
}
 8004770:	e026      	b.n	80047c0 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM21)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a17      	ldr	r2, [pc, #92]	; (80047d4 <HAL_TIM_Base_MspInit+0xe4>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d10e      	bne.n	800479a <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM21_CLK_ENABLE();
 800477c:	4b12      	ldr	r3, [pc, #72]	; (80047c8 <HAL_TIM_Base_MspInit+0xd8>)
 800477e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004780:	4b11      	ldr	r3, [pc, #68]	; (80047c8 <HAL_TIM_Base_MspInit+0xd8>)
 8004782:	2104      	movs	r1, #4
 8004784:	430a      	orrs	r2, r1
 8004786:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 8004788:	2200      	movs	r2, #0
 800478a:	2100      	movs	r1, #0
 800478c:	2014      	movs	r0, #20
 800478e:	f003 f8cb 	bl	8007928 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8004792:	2014      	movs	r0, #20
 8004794:	f003 f8dd 	bl	8007952 <HAL_NVIC_EnableIRQ>
}
 8004798:	e012      	b.n	80047c0 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM22)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a0e      	ldr	r2, [pc, #56]	; (80047d8 <HAL_TIM_Base_MspInit+0xe8>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d10d      	bne.n	80047c0 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM22_CLK_ENABLE();
 80047a4:	4b08      	ldr	r3, [pc, #32]	; (80047c8 <HAL_TIM_Base_MspInit+0xd8>)
 80047a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047a8:	4b07      	ldr	r3, [pc, #28]	; (80047c8 <HAL_TIM_Base_MspInit+0xd8>)
 80047aa:	2120      	movs	r1, #32
 80047ac:	430a      	orrs	r2, r1
 80047ae:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM22_IRQn, 0, 0);
 80047b0:	2200      	movs	r2, #0
 80047b2:	2100      	movs	r1, #0
 80047b4:	2016      	movs	r0, #22
 80047b6:	f003 f8b7 	bl	8007928 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM22_IRQn);
 80047ba:	2016      	movs	r0, #22
 80047bc:	f003 f8c9 	bl	8007952 <HAL_NVIC_EnableIRQ>
}
 80047c0:	46c0      	nop			; (mov r8, r8)
 80047c2:	46bd      	mov	sp, r7
 80047c4:	b002      	add	sp, #8
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	40021000 	.word	0x40021000
 80047cc:	40000400 	.word	0x40000400
 80047d0:	40001000 	.word	0x40001000
 80047d4:	40010800 	.word	0x40010800
 80047d8:	40011400 	.word	0x40011400

080047dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b088      	sub	sp, #32
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047e4:	230c      	movs	r3, #12
 80047e6:	18fb      	adds	r3, r7, r3
 80047e8:	0018      	movs	r0, r3
 80047ea:	2314      	movs	r3, #20
 80047ec:	001a      	movs	r2, r3
 80047ee:	2100      	movs	r1, #0
 80047f0:	f006 fdd1 	bl	800b396 <memset>
  if(htim->Instance==TIM3)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a14      	ldr	r2, [pc, #80]	; (800484c <HAL_TIM_MspPostInit+0x70>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d121      	bne.n	8004842 <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80047fe:	4b14      	ldr	r3, [pc, #80]	; (8004850 <HAL_TIM_MspPostInit+0x74>)
 8004800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004802:	4b13      	ldr	r3, [pc, #76]	; (8004850 <HAL_TIM_MspPostInit+0x74>)
 8004804:	2104      	movs	r1, #4
 8004806:	430a      	orrs	r2, r1
 8004808:	62da      	str	r2, [r3, #44]	; 0x2c
 800480a:	4b11      	ldr	r3, [pc, #68]	; (8004850 <HAL_TIM_MspPostInit+0x74>)
 800480c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480e:	2204      	movs	r2, #4
 8004810:	4013      	ands	r3, r2
 8004812:	60bb      	str	r3, [r7, #8]
 8004814:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PC6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004816:	210c      	movs	r1, #12
 8004818:	187b      	adds	r3, r7, r1
 800481a:	2240      	movs	r2, #64	; 0x40
 800481c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800481e:	187b      	adds	r3, r7, r1
 8004820:	2202      	movs	r2, #2
 8004822:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004824:	187b      	adds	r3, r7, r1
 8004826:	2200      	movs	r2, #0
 8004828:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800482a:	187b      	adds	r3, r7, r1
 800482c:	2200      	movs	r2, #0
 800482e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004830:	187b      	adds	r3, r7, r1
 8004832:	2202      	movs	r2, #2
 8004834:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004836:	187b      	adds	r3, r7, r1
 8004838:	4a06      	ldr	r2, [pc, #24]	; (8004854 <HAL_TIM_MspPostInit+0x78>)
 800483a:	0019      	movs	r1, r3
 800483c:	0010      	movs	r0, r2
 800483e:	f003 f90d 	bl	8007a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004842:	46c0      	nop			; (mov r8, r8)
 8004844:	46bd      	mov	sp, r7
 8004846:	b008      	add	sp, #32
 8004848:	bd80      	pop	{r7, pc}
 800484a:	46c0      	nop			; (mov r8, r8)
 800484c:	40000400 	.word	0x40000400
 8004850:	40021000 	.word	0x40021000
 8004854:	50000800 	.word	0x50000800

08004858 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a06      	ldr	r2, [pc, #24]	; (8004880 <HAL_PCD_MspInit+0x28>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d106      	bne.n	8004878 <HAL_PCD_MspInit+0x20>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800486a:	4b06      	ldr	r3, [pc, #24]	; (8004884 <HAL_PCD_MspInit+0x2c>)
 800486c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800486e:	4b05      	ldr	r3, [pc, #20]	; (8004884 <HAL_PCD_MspInit+0x2c>)
 8004870:	2180      	movs	r1, #128	; 0x80
 8004872:	0409      	lsls	r1, r1, #16
 8004874:	430a      	orrs	r2, r1
 8004876:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8004878:	46c0      	nop			; (mov r8, r8)
 800487a:	46bd      	mov	sp, r7
 800487c:	b002      	add	sp, #8
 800487e:	bd80      	pop	{r7, pc}
 8004880:	40005c00 	.word	0x40005c00
 8004884:	40021000 	.word	0x40021000

08004888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800488c:	46c0      	nop			; (mov r8, r8)
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004892:	b580      	push	{r7, lr}
 8004894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004896:	e7fe      	b.n	8004896 <HardFault_Handler+0x4>

08004898 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800489c:	46c0      	nop			; (mov r8, r8)
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80048a2:	b580      	push	{r7, lr}
 80048a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80048a6:	46c0      	nop			; (mov r8, r8)
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80048b0:	f002 f9ec 	bl	8006c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80048b4:	46c0      	nop			; (mov r8, r8)
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
	...

080048bc <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80048c0:	4b03      	ldr	r3, [pc, #12]	; (80048d0 <RTC_IRQHandler+0x14>)
 80048c2:	0018      	movs	r0, r3
 80048c4:	f004 ff7e 	bl	80097c4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 80048c8:	46c0      	nop			; (mov r8, r8)
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	46c0      	nop			; (mov r8, r8)
 80048d0:	20000268 	.word	0x20000268

080048d4 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80048d8:	2002      	movs	r0, #2
 80048da:	f003 fa6d 	bl	8007db8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80048de:	46c0      	nop			; (mov r8, r8)
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80048e8:	2004      	movs	r0, #4
 80048ea:	f003 fa65 	bl	8007db8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80048ee:	46c0      	nop			; (mov r8, r8)
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80048f8:	2380      	movs	r3, #128	; 0x80
 80048fa:	00db      	lsls	r3, r3, #3
 80048fc:	0018      	movs	r0, r3
 80048fe:	f003 fa5b 	bl	8007db8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8004902:	2380      	movs	r3, #128	; 0x80
 8004904:	011b      	lsls	r3, r3, #4
 8004906:	0018      	movs	r0, r3
 8004908:	f003 fa56 	bl	8007db8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800490c:	46c0      	nop			; (mov r8, r8)
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
	...

08004914 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8004918:	4b03      	ldr	r3, [pc, #12]	; (8004928 <ADC1_COMP_IRQHandler+0x14>)
 800491a:	0018      	movs	r0, r3
 800491c:	f002 fc94 	bl	8007248 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8004920:	46c0      	nop			; (mov r8, r8)
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	46c0      	nop			; (mov r8, r8)
 8004928:	2000053c 	.word	0x2000053c

0800492c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004930:	4b03      	ldr	r3, [pc, #12]	; (8004940 <TIM2_IRQHandler+0x14>)
 8004932:	0018      	movs	r0, r3
 8004934:	f005 ff44 	bl	800a7c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004938:	46c0      	nop			; (mov r8, r8)
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	46c0      	nop			; (mov r8, r8)
 8004940:	2000028c 	.word	0x2000028c

08004944 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004948:	4b03      	ldr	r3, [pc, #12]	; (8004958 <TIM3_IRQHandler+0x14>)
 800494a:	0018      	movs	r0, r3
 800494c:	f005 ff38 	bl	800a7c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004950:	46c0      	nop			; (mov r8, r8)
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	46c0      	nop			; (mov r8, r8)
 8004958:	200001f0 	.word	0x200001f0

0800495c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004960:	4b03      	ldr	r3, [pc, #12]	; (8004970 <TIM6_DAC_IRQHandler+0x14>)
 8004962:	0018      	movs	r0, r3
 8004964:	f005 ff2c 	bl	800a7c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004968:	46c0      	nop			; (mov r8, r8)
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	46c0      	nop			; (mov r8, r8)
 8004970:	20000150 	.word	0x20000150

08004974 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8004978:	4b03      	ldr	r3, [pc, #12]	; (8004988 <TIM21_IRQHandler+0x14>)
 800497a:	0018      	movs	r0, r3
 800497c:	f005 ff20 	bl	800a7c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8004980:	46c0      	nop			; (mov r8, r8)
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	46c0      	nop			; (mov r8, r8)
 8004988:	20000598 	.word	0x20000598

0800498c <TIM22_IRQHandler>:

/**
  * @brief This function handles TIM22 global interrupt.
  */
void TIM22_IRQHandler(void)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM22_IRQn 0 */

  /* USER CODE END TIM22_IRQn 0 */
  HAL_TIM_IRQHandler(&htim22);
 8004990:	4b03      	ldr	r3, [pc, #12]	; (80049a0 <TIM22_IRQHandler+0x14>)
 8004992:	0018      	movs	r0, r3
 8004994:	f005 ff14 	bl	800a7c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM22_IRQn 1 */

  /* USER CODE END TIM22_IRQn 1 */
}
 8004998:	46c0      	nop			; (mov r8, r8)
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	46c0      	nop			; (mov r8, r8)
 80049a0:	2000022c 	.word	0x2000022c

080049a4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80049a8:	4b03      	ldr	r3, [pc, #12]	; (80049b8 <SPI2_IRQHandler+0x14>)
 80049aa:	0018      	movs	r0, r3
 80049ac:	f005 fa98 	bl	8009ee0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80049b0:	46c0      	nop			; (mov r8, r8)
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	46c0      	nop			; (mov r8, r8)
 80049b8:	20000198 	.word	0x20000198

080049bc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80049c4:	4b11      	ldr	r3, [pc, #68]	; (8004a0c <_sbrk+0x50>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d102      	bne.n	80049d2 <_sbrk+0x16>
		heap_end = &end;
 80049cc:	4b0f      	ldr	r3, [pc, #60]	; (8004a0c <_sbrk+0x50>)
 80049ce:	4a10      	ldr	r2, [pc, #64]	; (8004a10 <_sbrk+0x54>)
 80049d0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80049d2:	4b0e      	ldr	r3, [pc, #56]	; (8004a0c <_sbrk+0x50>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80049d8:	4b0c      	ldr	r3, [pc, #48]	; (8004a0c <_sbrk+0x50>)
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	18d3      	adds	r3, r2, r3
 80049e0:	466a      	mov	r2, sp
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d907      	bls.n	80049f6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80049e6:	f006 fca3 	bl	800b330 <__errno>
 80049ea:	0003      	movs	r3, r0
 80049ec:	220c      	movs	r2, #12
 80049ee:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80049f0:	2301      	movs	r3, #1
 80049f2:	425b      	negs	r3, r3
 80049f4:	e006      	b.n	8004a04 <_sbrk+0x48>
	}

	heap_end += incr;
 80049f6:	4b05      	ldr	r3, [pc, #20]	; (8004a0c <_sbrk+0x50>)
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	18d2      	adds	r2, r2, r3
 80049fe:	4b03      	ldr	r3, [pc, #12]	; (8004a0c <_sbrk+0x50>)
 8004a00:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8004a02:	68fb      	ldr	r3, [r7, #12]
}
 8004a04:	0018      	movs	r0, r3
 8004a06:	46bd      	mov	sp, r7
 8004a08:	b004      	add	sp, #16
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	200000f4 	.word	0x200000f4
 8004a10:	200005e0 	.word	0x200005e0

08004a14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8004a18:	4b17      	ldr	r3, [pc, #92]	; (8004a78 <SystemInit+0x64>)
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	4b16      	ldr	r3, [pc, #88]	; (8004a78 <SystemInit+0x64>)
 8004a1e:	2180      	movs	r1, #128	; 0x80
 8004a20:	0049      	lsls	r1, r1, #1
 8004a22:	430a      	orrs	r2, r1
 8004a24:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8004a26:	4b14      	ldr	r3, [pc, #80]	; (8004a78 <SystemInit+0x64>)
 8004a28:	68da      	ldr	r2, [r3, #12]
 8004a2a:	4b13      	ldr	r3, [pc, #76]	; (8004a78 <SystemInit+0x64>)
 8004a2c:	4913      	ldr	r1, [pc, #76]	; (8004a7c <SystemInit+0x68>)
 8004a2e:	400a      	ands	r2, r1
 8004a30:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8004a32:	4b11      	ldr	r3, [pc, #68]	; (8004a78 <SystemInit+0x64>)
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	4b10      	ldr	r3, [pc, #64]	; (8004a78 <SystemInit+0x64>)
 8004a38:	4911      	ldr	r1, [pc, #68]	; (8004a80 <SystemInit+0x6c>)
 8004a3a:	400a      	ands	r2, r1
 8004a3c:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004a3e:	4b0e      	ldr	r3, [pc, #56]	; (8004a78 <SystemInit+0x64>)
 8004a40:	689a      	ldr	r2, [r3, #8]
 8004a42:	4b0d      	ldr	r3, [pc, #52]	; (8004a78 <SystemInit+0x64>)
 8004a44:	2101      	movs	r1, #1
 8004a46:	438a      	bics	r2, r1
 8004a48:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8004a4a:	4b0b      	ldr	r3, [pc, #44]	; (8004a78 <SystemInit+0x64>)
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	4b0a      	ldr	r3, [pc, #40]	; (8004a78 <SystemInit+0x64>)
 8004a50:	490c      	ldr	r1, [pc, #48]	; (8004a84 <SystemInit+0x70>)
 8004a52:	400a      	ands	r2, r1
 8004a54:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8004a56:	4b08      	ldr	r3, [pc, #32]	; (8004a78 <SystemInit+0x64>)
 8004a58:	68da      	ldr	r2, [r3, #12]
 8004a5a:	4b07      	ldr	r3, [pc, #28]	; (8004a78 <SystemInit+0x64>)
 8004a5c:	490a      	ldr	r1, [pc, #40]	; (8004a88 <SystemInit+0x74>)
 8004a5e:	400a      	ands	r2, r1
 8004a60:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004a62:	4b05      	ldr	r3, [pc, #20]	; (8004a78 <SystemInit+0x64>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004a68:	4b08      	ldr	r3, [pc, #32]	; (8004a8c <SystemInit+0x78>)
 8004a6a:	2280      	movs	r2, #128	; 0x80
 8004a6c:	0512      	lsls	r2, r2, #20
 8004a6e:	609a      	str	r2, [r3, #8]
#endif
}
 8004a70:	46c0      	nop			; (mov r8, r8)
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	46c0      	nop			; (mov r8, r8)
 8004a78:	40021000 	.word	0x40021000
 8004a7c:	88ff400c 	.word	0x88ff400c
 8004a80:	fef6fff6 	.word	0xfef6fff6
 8004a84:	fffbffff 	.word	0xfffbffff
 8004a88:	ff02ffff 	.word	0xff02ffff
 8004a8c:	e000ed00 	.word	0xe000ed00

08004a90 <HAL_TIM_PeriodElapsedCallback>:
static uint32_t stopwatchStartMarker = 0;
static uint32_t stopwatchPauseMarker = 0;
static uint8_t motorStateCounter = 0;

// called for a bunch of timers when timer has to circle back (arr->0, 0->arr)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
	// button's timer
	if (htim->Instance == TIM6) {
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a16      	ldr	r2, [pc, #88]	; (8004af8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d11e      	bne.n	8004ae0 <HAL_TIM_PeriodElapsedCallback+0x50>
		// stop timer, renable button interrupts, and clear pending
		HAL_TIM_Base_Stop_IT(htim);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	0018      	movs	r0, r3
 8004aa6:	f005 fd0b 	bl	800a4c0 <HAL_TIM_Base_Stop_IT>
		HAL_NVIC_ClearPendingIRQ(EXTI2_3_IRQn);
 8004aaa:	2006      	movs	r0, #6
 8004aac:	f002 ff7e 	bl	80079ac <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(EXTI4_15_IRQn);
 8004ab0:	2007      	movs	r0, #7
 8004ab2:	f002 ff7b 	bl	80079ac <HAL_NVIC_ClearPendingIRQ>
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON1);
 8004ab6:	4b11      	ldr	r3, [pc, #68]	; (8004afc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8004ab8:	2202      	movs	r2, #2
 8004aba:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON2);
 8004abc:	4b0f      	ldr	r3, [pc, #60]	; (8004afc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8004abe:	2204      	movs	r2, #4
 8004ac0:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON3);
 8004ac2:	4b0e      	ldr	r3, [pc, #56]	; (8004afc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8004ac4:	2280      	movs	r2, #128	; 0x80
 8004ac6:	00d2      	lsls	r2, r2, #3
 8004ac8:	615a      	str	r2, [r3, #20]
		__HAL_GPIO_EXTI_CLEAR_IT(BUTTON4);
 8004aca:	4b0c      	ldr	r3, [pc, #48]	; (8004afc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8004acc:	2280      	movs	r2, #128	; 0x80
 8004ace:	0112      	lsls	r2, r2, #4
 8004ad0:	615a      	str	r2, [r3, #20]

		HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8004ad2:	2006      	movs	r0, #6
 8004ad4:	f002 ff3d 	bl	8007952 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8004ad8:	2007      	movs	r0, #7
 8004ada:	f002 ff3a 	bl	8007952 <HAL_NVIC_EnableIRQ>
	// sampler's timer
	else if (htim->Instance == TIM22) {
		// set flag to start ADC sample
		canSampleBattery = 1;
	}
}
 8004ade:	e007      	b.n	8004af0 <HAL_TIM_PeriodElapsedCallback+0x60>
	else if (htim->Instance == TIM22) {
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a06      	ldr	r2, [pc, #24]	; (8004b00 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d102      	bne.n	8004af0 <HAL_TIM_PeriodElapsedCallback+0x60>
		canSampleBattery = 1;
 8004aea:	4b06      	ldr	r3, [pc, #24]	; (8004b04 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8004aec:	2201      	movs	r2, #1
 8004aee:	701a      	strb	r2, [r3, #0]
}
 8004af0:	46c0      	nop			; (mov r8, r8)
 8004af2:	46bd      	mov	sp, r7
 8004af4:	b002      	add	sp, #8
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	40001000 	.word	0x40001000
 8004afc:	40010400 	.word	0x40010400
 8004b00:	40011400 	.word	0x40011400
 8004b04:	2000013e 	.word	0x2000013e

08004b08 <HAL_TIM_OC_DelayElapsedCallback>:

// called for a bunch of timers when channel value = counter value
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM21) {
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a46      	ldr	r2, [pc, #280]	; (8004c30 <HAL_TIM_OC_DelayElapsedCallback+0x128>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d139      	bne.n	8004b8e <HAL_TIM_OC_DelayElapsedCallback+0x86>
		// timer's channel
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	7e1b      	ldrb	r3, [r3, #24]
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d122      	bne.n	8004b68 <HAL_TIM_OC_DelayElapsedCallback+0x60>
			updateFace.timer = 1;		// set update screen flag
 8004b22:	4b44      	ldr	r3, [pc, #272]	; (8004c34 <HAL_TIM_OC_DelayElapsedCallback+0x12c>)
 8004b24:	2201      	movs	r2, #1
 8004b26:	705a      	strb	r2, [r3, #1]

			// decrement value if non-zero, else set done flag
			if (timerCounter != 1) --timerCounter;
 8004b28:	4b43      	ldr	r3, [pc, #268]	; (8004c38 <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d005      	beq.n	8004b3c <HAL_TIM_OC_DelayElapsedCallback+0x34>
 8004b30:	4b41      	ldr	r3, [pc, #260]	; (8004c38 <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	1e5a      	subs	r2, r3, #1
 8004b36:	4b40      	ldr	r3, [pc, #256]	; (8004c38 <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 8004b38:	601a      	str	r2, [r3, #0]
				stopMotor(htim);
				break;
			default: break;
		}
	}
}
 8004b3a:	e074      	b.n	8004c26 <HAL_TIM_OC_DelayElapsedCallback+0x11e>
				--timerCounter;
 8004b3c:	4b3e      	ldr	r3, [pc, #248]	; (8004c38 <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	1e5a      	subs	r2, r3, #1
 8004b42:	4b3d      	ldr	r3, [pc, #244]	; (8004c38 <HAL_TIM_OC_DelayElapsedCallback+0x130>)
 8004b44:	601a      	str	r2, [r3, #0]
				isTimerDone = 1;
 8004b46:	4b3d      	ldr	r3, [pc, #244]	; (8004c3c <HAL_TIM_OC_DelayElapsedCallback+0x134>)
 8004b48:	2201      	movs	r2, #1
 8004b4a:	701a      	strb	r2, [r3, #0]
				stopTimer(htim);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	0018      	movs	r0, r3
 8004b50:	f000 f8ec 	bl	8004d2c <stopTimer>
				updateFace.timer = 1;
 8004b54:	4b37      	ldr	r3, [pc, #220]	; (8004c34 <HAL_TIM_OC_DelayElapsedCallback+0x12c>)
 8004b56:	2201      	movs	r2, #1
 8004b58:	705a      	strb	r2, [r3, #1]
				HAL_GPIO_TogglePin(LED2_PORT, LED2_PIN);
 8004b5a:	23a0      	movs	r3, #160	; 0xa0
 8004b5c:	05db      	lsls	r3, r3, #23
 8004b5e:	2140      	movs	r1, #64	; 0x40
 8004b60:	0018      	movs	r0, r3
 8004b62:	f003 f916 	bl	8007d92 <HAL_GPIO_TogglePin>
}
 8004b66:	e05e      	b.n	8004c26 <HAL_TIM_OC_DelayElapsedCallback+0x11e>
		else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	7e1b      	ldrb	r3, [r3, #24]
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d15a      	bne.n	8004c26 <HAL_TIM_OC_DelayElapsedCallback+0x11e>
			updateFace.stopwatch = 1;
 8004b70:	4b30      	ldr	r3, [pc, #192]	; (8004c34 <HAL_TIM_OC_DelayElapsedCallback+0x12c>)
 8004b72:	2201      	movs	r2, #1
 8004b74:	70da      	strb	r2, [r3, #3]
			++stopwatchCounter;
 8004b76:	4b32      	ldr	r3, [pc, #200]	; (8004c40 <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	1c5a      	adds	r2, r3, #1
 8004b7c:	4b30      	ldr	r3, [pc, #192]	; (8004c40 <HAL_TIM_OC_DelayElapsedCallback+0x138>)
 8004b7e:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(LED2_PORT, LED2_PIN);
 8004b80:	23a0      	movs	r3, #160	; 0xa0
 8004b82:	05db      	lsls	r3, r3, #23
 8004b84:	2140      	movs	r1, #64	; 0x40
 8004b86:	0018      	movs	r0, r3
 8004b88:	f003 f903 	bl	8007d92 <HAL_GPIO_TogglePin>
}
 8004b8c:	e04b      	b.n	8004c26 <HAL_TIM_OC_DelayElapsedCallback+0x11e>
	else if (htim->Instance == TIM2) {
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	2380      	movs	r3, #128	; 0x80
 8004b94:	05db      	lsls	r3, r3, #23
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d142      	bne.n	8004c20 <HAL_TIM_OC_DelayElapsedCallback+0x118>
		++motorStateCounter;
 8004b9a:	4b2a      	ldr	r3, [pc, #168]	; (8004c44 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	b2da      	uxtb	r2, r3
 8004ba2:	4b28      	ldr	r3, [pc, #160]	; (8004c44 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8004ba4:	701a      	strb	r2, [r3, #0]
		switch(motorStateCounter) {
 8004ba6:	4b27      	ldr	r3, [pc, #156]	; (8004c44 <HAL_TIM_OC_DelayElapsedCallback+0x13c>)
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	2b06      	cmp	r3, #6
 8004bac:	d83a      	bhi.n	8004c24 <HAL_TIM_OC_DelayElapsedCallback+0x11c>
 8004bae:	009a      	lsls	r2, r3, #2
 8004bb0:	4b25      	ldr	r3, [pc, #148]	; (8004c48 <HAL_TIM_OC_DelayElapsedCallback+0x140>)
 8004bb2:	18d3      	adds	r3, r2, r3
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	469f      	mov	pc, r3
			case 1: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET); break;
 8004bb8:	23a0      	movs	r3, #160	; 0xa0
 8004bba:	05db      	lsls	r3, r3, #23
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	2110      	movs	r1, #16
 8004bc0:	0018      	movs	r0, r3
 8004bc2:	f003 f8c9 	bl	8007d58 <HAL_GPIO_WritePin>
 8004bc6:	e02e      	b.n	8004c26 <HAL_TIM_OC_DelayElapsedCallback+0x11e>
			case 2: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_RESET); break;
 8004bc8:	23a0      	movs	r3, #160	; 0xa0
 8004bca:	05db      	lsls	r3, r3, #23
 8004bcc:	2200      	movs	r2, #0
 8004bce:	2110      	movs	r1, #16
 8004bd0:	0018      	movs	r0, r3
 8004bd2:	f003 f8c1 	bl	8007d58 <HAL_GPIO_WritePin>
 8004bd6:	e026      	b.n	8004c26 <HAL_TIM_OC_DelayElapsedCallback+0x11e>
			case 3: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET); break;
 8004bd8:	23a0      	movs	r3, #160	; 0xa0
 8004bda:	05db      	lsls	r3, r3, #23
 8004bdc:	2201      	movs	r2, #1
 8004bde:	2110      	movs	r1, #16
 8004be0:	0018      	movs	r0, r3
 8004be2:	f003 f8b9 	bl	8007d58 <HAL_GPIO_WritePin>
 8004be6:	e01e      	b.n	8004c26 <HAL_TIM_OC_DelayElapsedCallback+0x11e>
			case 4: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_RESET); break;
 8004be8:	23a0      	movs	r3, #160	; 0xa0
 8004bea:	05db      	lsls	r3, r3, #23
 8004bec:	2200      	movs	r2, #0
 8004bee:	2110      	movs	r1, #16
 8004bf0:	0018      	movs	r0, r3
 8004bf2:	f003 f8b1 	bl	8007d58 <HAL_GPIO_WritePin>
 8004bf6:	e016      	b.n	8004c26 <HAL_TIM_OC_DelayElapsedCallback+0x11e>
			case 5: HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET); break;
 8004bf8:	23a0      	movs	r3, #160	; 0xa0
 8004bfa:	05db      	lsls	r3, r3, #23
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	2110      	movs	r1, #16
 8004c00:	0018      	movs	r0, r3
 8004c02:	f003 f8a9 	bl	8007d58 <HAL_GPIO_WritePin>
 8004c06:	e00e      	b.n	8004c26 <HAL_TIM_OC_DelayElapsedCallback+0x11e>
				HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_RESET);
 8004c08:	23a0      	movs	r3, #160	; 0xa0
 8004c0a:	05db      	lsls	r3, r3, #23
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	2110      	movs	r1, #16
 8004c10:	0018      	movs	r0, r3
 8004c12:	f003 f8a1 	bl	8007d58 <HAL_GPIO_WritePin>
				stopMotor(htim);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	0018      	movs	r0, r3
 8004c1a:	f000 f98f 	bl	8004f3c <stopMotor>
				break;
 8004c1e:	e002      	b.n	8004c26 <HAL_TIM_OC_DelayElapsedCallback+0x11e>
	}
 8004c20:	46c0      	nop			; (mov r8, r8)
 8004c22:	e000      	b.n	8004c26 <HAL_TIM_OC_DelayElapsedCallback+0x11e>
			default: break;
 8004c24:	46c0      	nop			; (mov r8, r8)
}
 8004c26:	46c0      	nop			; (mov r8, r8)
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	b002      	add	sp, #8
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	46c0      	nop			; (mov r8, r8)
 8004c30:	40010800 	.word	0x40010800
 8004c34:	20000140 	.word	0x20000140
 8004c38:	20000148 	.word	0x20000148
 8004c3c:	2000014c 	.word	0x2000014c
 8004c40:	20000194 	.word	0x20000194
 8004c44:	20000108 	.word	0x20000108
 8004c48:	0800c778 	.word	0x0800c778

08004c4c <runTimer>:

// ---- important timer functions  ----
void runTimer(TIM_HandleTypeDef *htim) {
 8004c4c:	b590      	push	{r4, r7, lr}
 8004c4e:	b089      	sub	sp, #36	; 0x24
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef sConfig = {0};
 8004c54:	2408      	movs	r4, #8
 8004c56:	193b      	adds	r3, r7, r4
 8004c58:	0018      	movs	r0, r3
 8004c5a:	2310      	movs	r3, #16
 8004c5c:	001a      	movs	r2, r3
 8004c5e:	2100      	movs	r1, #0
 8004c60:	f006 fb99 	bl	800b396 <memset>
	sConfig.OCMode = TIM_OCMODE_TIMING;
 8004c64:	193b      	adds	r3, r7, r4
 8004c66:	2200      	movs	r2, #0
 8004c68:	601a      	str	r2, [r3, #0]
	sConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004c6a:	193b      	adds	r3, r7, r4
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	609a      	str	r2, [r3, #8]
	sConfig.OCFastMode = TIM_OCFAST_DISABLE;
 8004c70:	193b      	adds	r3, r7, r4
 8004c72:	2200      	movs	r2, #0
 8004c74:	60da      	str	r2, [r3, #12]

	// calculating pulse/OC trigger
	if (isTimerPaused == 0) {		// 1st run, hasn't been paused yet
 8004c76:	4b1e      	ldr	r3, [pc, #120]	; (8004cf0 <runTimer+0xa4>)
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d106      	bne.n	8004c8e <runTimer+0x42>
		sConfig.Pulse = htim->Instance->CNT;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c86:	2308      	movs	r3, #8
 8004c88:	18fb      	adds	r3, r7, r3
 8004c8a:	605a      	str	r2, [r3, #4]
 8004c8c:	e020      	b.n	8004cd0 <runTimer+0x84>
	}
	else {		// unpausing
		uint32_t temp = htim->Instance->CNT;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c94:	61fb      	str	r3, [r7, #28]

		// count needed to get from pause marker to start marker - basically how many steps it would've taken to get to next cycle
		// shifted to account for negative behavior
		uint32_t diff = ((int)(timerStartMarker-timerPauseMarker)+0x8000) % 0x8000;
 8004c96:	4b17      	ldr	r3, [pc, #92]	; (8004cf4 <runTimer+0xa8>)
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	4b17      	ldr	r3, [pc, #92]	; (8004cf8 <runTimer+0xac>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	2280      	movs	r2, #128	; 0x80
 8004ca2:	0212      	lsls	r2, r2, #8
 8004ca4:	4694      	mov	ip, r2
 8004ca6:	4463      	add	r3, ip
 8004ca8:	4a14      	ldr	r2, [pc, #80]	; (8004cfc <runTimer+0xb0>)
 8004caa:	4013      	ands	r3, r2
 8004cac:	d503      	bpl.n	8004cb6 <runTimer+0x6a>
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	4a13      	ldr	r2, [pc, #76]	; (8004d00 <runTimer+0xb4>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	61bb      	str	r3, [r7, #24]
		sConfig.Pulse = (temp+diff) % 0x8000;
 8004cb8:	69fa      	ldr	r2, [r7, #28]
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	18d3      	adds	r3, r2, r3
 8004cbe:	045b      	lsls	r3, r3, #17
 8004cc0:	0c5a      	lsrs	r2, r3, #17
 8004cc2:	2108      	movs	r1, #8
 8004cc4:	187b      	adds	r3, r7, r1
 8004cc6:	605a      	str	r2, [r3, #4]
		timerStartMarker = sConfig.Pulse;		// set new start marker
 8004cc8:	187b      	adds	r3, r7, r1
 8004cca:	685a      	ldr	r2, [r3, #4]
 8004ccc:	4b09      	ldr	r3, [pc, #36]	; (8004cf4 <runTimer+0xa8>)
 8004cce:	601a      	str	r2, [r3, #0]
	}

	HAL_TIM_OC_ConfigChannel(htim, &sConfig, TIM_CHANNEL_1);
 8004cd0:	2308      	movs	r3, #8
 8004cd2:	18f9      	adds	r1, r7, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	0018      	movs	r0, r3
 8004cda:	f005 fe59 	bl	800a990 <HAL_TIM_OC_ConfigChannel>
	HAL_TIM_OC_Start_IT(htim, TIM_CHANNEL_1);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2100      	movs	r1, #0
 8004ce2:	0018      	movs	r0, r3
 8004ce4:	f005 fc42 	bl	800a56c <HAL_TIM_OC_Start_IT>
}
 8004ce8:	46c0      	nop			; (mov r8, r8)
 8004cea:	46bd      	mov	sp, r7
 8004cec:	b009      	add	sp, #36	; 0x24
 8004cee:	bd90      	pop	{r4, r7, pc}
 8004cf0:	20000192 	.word	0x20000192
 8004cf4:	200000f8 	.word	0x200000f8
 8004cf8:	200000fc 	.word	0x200000fc
 8004cfc:	80007fff 	.word	0x80007fff
 8004d00:	ffff8000 	.word	0xffff8000

08004d04 <pauseTimer>:

void pauseTimer(TIM_HandleTypeDef *htim) {
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
	// stop timer, but hold marker so you can track milliseconds to next second
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_1);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2100      	movs	r1, #0
 8004d10:	0018      	movs	r0, r3
 8004d12:	f005 fc7d 	bl	800a610 <HAL_TIM_OC_Stop_IT>
	timerPauseMarker = htim->Instance->CNT;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d1c:	4b02      	ldr	r3, [pc, #8]	; (8004d28 <pauseTimer+0x24>)
 8004d1e:	601a      	str	r2, [r3, #0]
}
 8004d20:	46c0      	nop			; (mov r8, r8)
 8004d22:	46bd      	mov	sp, r7
 8004d24:	b002      	add	sp, #8
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	200000fc 	.word	0x200000fc

08004d2c <stopTimer>:

void stopTimer(TIM_HandleTypeDef *htim) {
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
	// clear everything
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_1);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2100      	movs	r1, #0
 8004d38:	0018      	movs	r0, r3
 8004d3a:	f005 fc69 	bl	800a610 <HAL_TIM_OC_Stop_IT>
	timerStartMarker = 0;
 8004d3e:	4b05      	ldr	r3, [pc, #20]	; (8004d54 <stopTimer+0x28>)
 8004d40:	2200      	movs	r2, #0
 8004d42:	601a      	str	r2, [r3, #0]
	timerPauseMarker = 0;
 8004d44:	4b04      	ldr	r3, [pc, #16]	; (8004d58 <stopTimer+0x2c>)
 8004d46:	2200      	movs	r2, #0
 8004d48:	601a      	str	r2, [r3, #0]
}
 8004d4a:	46c0      	nop			; (mov r8, r8)
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	b002      	add	sp, #8
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	46c0      	nop			; (mov r8, r8)
 8004d54:	200000f8 	.word	0x200000f8
 8004d58:	200000fc 	.word	0x200000fc

08004d5c <runStopwatch>:

void runStopwatch(TIM_HandleTypeDef *htim) {
 8004d5c:	b590      	push	{r4, r7, lr}
 8004d5e:	b089      	sub	sp, #36	; 0x24
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef sConfig = {0};
 8004d64:	2408      	movs	r4, #8
 8004d66:	193b      	adds	r3, r7, r4
 8004d68:	0018      	movs	r0, r3
 8004d6a:	2310      	movs	r3, #16
 8004d6c:	001a      	movs	r2, r3
 8004d6e:	2100      	movs	r1, #0
 8004d70:	f006 fb11 	bl	800b396 <memset>
	sConfig.OCMode = TIM_OCMODE_TIMING;
 8004d74:	193b      	adds	r3, r7, r4
 8004d76:	2200      	movs	r2, #0
 8004d78:	601a      	str	r2, [r3, #0]
	sConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d7a:	193b      	adds	r3, r7, r4
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	609a      	str	r2, [r3, #8]
	sConfig.OCFastMode = TIM_OCFAST_DISABLE;
 8004d80:	193b      	adds	r3, r7, r4
 8004d82:	2200      	movs	r2, #0
 8004d84:	60da      	str	r2, [r3, #12]

	// calculating pulse/OC trigger
	if (isStopwatchPaused == 0) {		// 1st run, hasn't been paused yet
 8004d86:	4b22      	ldr	r3, [pc, #136]	; (8004e10 <runStopwatch+0xb4>)
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d10d      	bne.n	8004dac <runStopwatch+0x50>
		stopwatchCounter = 0;
 8004d90:	4b20      	ldr	r3, [pc, #128]	; (8004e14 <runStopwatch+0xb8>)
 8004d92:	2200      	movs	r2, #0
 8004d94:	601a      	str	r2, [r3, #0]
		sConfig.Pulse = htim->Instance->CNT;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d9c:	2108      	movs	r1, #8
 8004d9e:	187b      	adds	r3, r7, r1
 8004da0:	605a      	str	r2, [r3, #4]
		stopwatchStartMarker = sConfig.Pulse;		// set new start marker
 8004da2:	187b      	adds	r3, r7, r1
 8004da4:	685a      	ldr	r2, [r3, #4]
 8004da6:	4b1c      	ldr	r3, [pc, #112]	; (8004e18 <runStopwatch+0xbc>)
 8004da8:	601a      	str	r2, [r3, #0]
 8004daa:	e020      	b.n	8004dee <runStopwatch+0x92>
	}
	else {		// unpausing
		uint32_t temp = htim->Instance->CNT;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db2:	61fb      	str	r3, [r7, #28]

		// count needed to get from pause marker to start marker - basically how many steps it would've taken to get to next cycle
		// shifted to account for negative behavior
		uint32_t diff = ((int)(stopwatchStartMarker-stopwatchPauseMarker)+0x8000) % 0x8000;
 8004db4:	4b18      	ldr	r3, [pc, #96]	; (8004e18 <runStopwatch+0xbc>)
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	4b18      	ldr	r3, [pc, #96]	; (8004e1c <runStopwatch+0xc0>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	2280      	movs	r2, #128	; 0x80
 8004dc0:	0212      	lsls	r2, r2, #8
 8004dc2:	4694      	mov	ip, r2
 8004dc4:	4463      	add	r3, ip
 8004dc6:	4a16      	ldr	r2, [pc, #88]	; (8004e20 <runStopwatch+0xc4>)
 8004dc8:	4013      	ands	r3, r2
 8004dca:	d503      	bpl.n	8004dd4 <runStopwatch+0x78>
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	4a15      	ldr	r2, [pc, #84]	; (8004e24 <runStopwatch+0xc8>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	61bb      	str	r3, [r7, #24]
		sConfig.Pulse = (temp+diff) % 0x8000;
 8004dd6:	69fa      	ldr	r2, [r7, #28]
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	18d3      	adds	r3, r2, r3
 8004ddc:	045b      	lsls	r3, r3, #17
 8004dde:	0c5a      	lsrs	r2, r3, #17
 8004de0:	2108      	movs	r1, #8
 8004de2:	187b      	adds	r3, r7, r1
 8004de4:	605a      	str	r2, [r3, #4]
		stopwatchStartMarker = sConfig.Pulse;		// set new start marker
 8004de6:	187b      	adds	r3, r7, r1
 8004de8:	685a      	ldr	r2, [r3, #4]
 8004dea:	4b0b      	ldr	r3, [pc, #44]	; (8004e18 <runStopwatch+0xbc>)
 8004dec:	601a      	str	r2, [r3, #0]
	}

	HAL_TIM_OC_ConfigChannel(htim, &sConfig, TIM_CHANNEL_2);
 8004dee:	2308      	movs	r3, #8
 8004df0:	18f9      	adds	r1, r7, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2204      	movs	r2, #4
 8004df6:	0018      	movs	r0, r3
 8004df8:	f005 fdca 	bl	800a990 <HAL_TIM_OC_ConfigChannel>
	HAL_TIM_OC_Start_IT(htim, TIM_CHANNEL_2);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2104      	movs	r1, #4
 8004e00:	0018      	movs	r0, r3
 8004e02:	f005 fbb3 	bl	800a56c <HAL_TIM_OC_Start_IT>
}
 8004e06:	46c0      	nop			; (mov r8, r8)
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	b009      	add	sp, #36	; 0x24
 8004e0c:	bd90      	pop	{r4, r7, pc}
 8004e0e:	46c0      	nop			; (mov r8, r8)
 8004e10:	20000191 	.word	0x20000191
 8004e14:	20000194 	.word	0x20000194
 8004e18:	20000100 	.word	0x20000100
 8004e1c:	20000104 	.word	0x20000104
 8004e20:	80007fff 	.word	0x80007fff
 8004e24:	ffff8000 	.word	0xffff8000

08004e28 <pauseStopwatch>:

void pauseStopwatch(TIM_HandleTypeDef *htim) {
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
	// save marker to hold milliseconds
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_2);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2104      	movs	r1, #4
 8004e34:	0018      	movs	r0, r3
 8004e36:	f005 fbeb 	bl	800a610 <HAL_TIM_OC_Stop_IT>
	stopwatchPauseMarker = htim->Instance->CNT;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e40:	4b02      	ldr	r3, [pc, #8]	; (8004e4c <pauseStopwatch+0x24>)
 8004e42:	601a      	str	r2, [r3, #0]
}
 8004e44:	46c0      	nop			; (mov r8, r8)
 8004e46:	46bd      	mov	sp, r7
 8004e48:	b002      	add	sp, #8
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	20000104 	.word	0x20000104

08004e50 <clearStopwatch>:

void clearStopwatch(TIM_HandleTypeDef *htim) {
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
	// clear everything
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_2);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2104      	movs	r1, #4
 8004e5c:	0018      	movs	r0, r3
 8004e5e:	f005 fbd7 	bl	800a610 <HAL_TIM_OC_Stop_IT>
	stopwatchPauseMarker = htim->Instance->CNT;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e68:	4b06      	ldr	r3, [pc, #24]	; (8004e84 <clearStopwatch+0x34>)
 8004e6a:	601a      	str	r2, [r3, #0]
	stopwatchStartMarker = htim->Instance->CNT;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e72:	4b05      	ldr	r3, [pc, #20]	; (8004e88 <clearStopwatch+0x38>)
 8004e74:	601a      	str	r2, [r3, #0]

	stopwatchCounter = 0;
 8004e76:	4b05      	ldr	r3, [pc, #20]	; (8004e8c <clearStopwatch+0x3c>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	601a      	str	r2, [r3, #0]
}
 8004e7c:	46c0      	nop			; (mov r8, r8)
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	b002      	add	sp, #8
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	20000104 	.word	0x20000104
 8004e88:	20000100 	.word	0x20000100
 8004e8c:	20000194 	.word	0x20000194

08004e90 <runTimerStopwatchBase>:

void runTimerStopwatchBase(TIM_HandleTypeDef *htim) {HAL_TIM_Base_Start(htim);}
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	0018      	movs	r0, r3
 8004e9c:	f005 facc 	bl	800a438 <HAL_TIM_Base_Start>
 8004ea0:	46c0      	nop			; (mov r8, r8)
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	b002      	add	sp, #8
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <runADCSampler>:
void stopTimerStopwatchBase(TIM_HandleTypeDef *htim) {HAL_TIM_Base_Stop(htim);}
// ---- end of important timer functions ----

// ---- motor and other things that use timer ----
// uses LSE timer TIM22
void runADCSampler(TIM_HandleTypeDef *htim) {
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(htim);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	0018      	movs	r0, r3
 8004eb4:	f005 fae2 	bl	800a47c <HAL_TIM_Base_Start_IT>
	canSampleBattery = 1;			// set flag to let ADC run at the start
 8004eb8:	4b03      	ldr	r3, [pc, #12]	; (8004ec8 <runADCSampler+0x20>)
 8004eba:	2201      	movs	r2, #1
 8004ebc:	701a      	strb	r2, [r3, #0]
}
 8004ebe:	46c0      	nop			; (mov r8, r8)
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	b002      	add	sp, #8
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	46c0      	nop			; (mov r8, r8)
 8004ec8:	2000013e 	.word	0x2000013e

08004ecc <runMotor>:

// running motor for vibration. runs for a finite amount of time
// uses LSE timer TIM2 CH2
void runMotor(TIM_HandleTypeDef *htim) {
 8004ecc:	b590      	push	{r4, r7, lr}
 8004ece:	b087      	sub	sp, #28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef sConfig = {0};
 8004ed4:	2408      	movs	r4, #8
 8004ed6:	193b      	adds	r3, r7, r4
 8004ed8:	0018      	movs	r0, r3
 8004eda:	2310      	movs	r3, #16
 8004edc:	001a      	movs	r2, r3
 8004ede:	2100      	movs	r1, #0
 8004ee0:	f006 fa59 	bl	800b396 <memset>
	sConfig.OCMode = TIM_OCMODE_TIMING;
 8004ee4:	0021      	movs	r1, r4
 8004ee6:	187b      	adds	r3, r7, r1
 8004ee8:	2200      	movs	r2, #0
 8004eea:	601a      	str	r2, [r3, #0]
	sConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004eec:	187b      	adds	r3, r7, r1
 8004eee:	2200      	movs	r2, #0
 8004ef0:	609a      	str	r2, [r3, #8]
	sConfig.OCFastMode = TIM_OCFAST_DISABLE;
 8004ef2:	187b      	adds	r3, r7, r1
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	60da      	str	r2, [r3, #12]
	sConfig.Pulse = htim->Instance->CNT;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004efe:	000c      	movs	r4, r1
 8004f00:	187b      	adds	r3, r7, r1
 8004f02:	605a      	str	r2, [r3, #4]

	HAL_GPIO_WritePin(MOTOR_PORT, MOTOR_PIN, GPIO_PIN_SET);
 8004f04:	23a0      	movs	r3, #160	; 0xa0
 8004f06:	05db      	lsls	r3, r3, #23
 8004f08:	2201      	movs	r2, #1
 8004f0a:	2110      	movs	r1, #16
 8004f0c:	0018      	movs	r0, r3
 8004f0e:	f002 ff23 	bl	8007d58 <HAL_GPIO_WritePin>
	HAL_TIM_OC_ConfigChannel(htim, &sConfig, TIM_CHANNEL_2);
 8004f12:	0021      	movs	r1, r4
 8004f14:	1879      	adds	r1, r7, r1
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2204      	movs	r2, #4
 8004f1a:	0018      	movs	r0, r3
 8004f1c:	f005 fd38 	bl	800a990 <HAL_TIM_OC_ConfigChannel>
	HAL_TIM_OC_Start_IT(htim, TIM_CHANNEL_2);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2104      	movs	r1, #4
 8004f24:	0018      	movs	r0, r3
 8004f26:	f005 fb21 	bl	800a56c <HAL_TIM_OC_Start_IT>

	motorStateCounter = 0;
 8004f2a:	4b03      	ldr	r3, [pc, #12]	; (8004f38 <runMotor+0x6c>)
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	701a      	strb	r2, [r3, #0]
}
 8004f30:	46c0      	nop			; (mov r8, r8)
 8004f32:	46bd      	mov	sp, r7
 8004f34:	b007      	add	sp, #28
 8004f36:	bd90      	pop	{r4, r7, pc}
 8004f38:	20000108 	.word	0x20000108

08004f3c <stopMotor>:

void stopMotor(TIM_HandleTypeDef *htim) {
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
	HAL_TIM_OC_Stop_IT(htim, TIM_CHANNEL_2);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2104      	movs	r1, #4
 8004f48:	0018      	movs	r0, r3
 8004f4a:	f005 fb61 	bl	800a610 <HAL_TIM_OC_Stop_IT>
	motorStateCounter = 0;
 8004f4e:	4b03      	ldr	r3, [pc, #12]	; (8004f5c <stopMotor+0x20>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	701a      	strb	r2, [r3, #0]
}
 8004f54:	46c0      	nop			; (mov r8, r8)
 8004f56:	46bd      	mov	sp, r7
 8004f58:	b002      	add	sp, #8
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	20000108 	.word	0x20000108

08004f60 <runMotorBase>:

// should use TIM2
void runMotorBase(TIM_HandleTypeDef *htim) {HAL_TIM_Base_Start(htim);}
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	0018      	movs	r0, r3
 8004f6c:	f005 fa64 	bl	800a438 <HAL_TIM_Base_Start>
 8004f70:	46c0      	nop			; (mov r8, r8)
 8004f72:	46bd      	mov	sp, r7
 8004f74:	b002      	add	sp, #8
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <setDisplayBacklight>:
void stopMotorBase(TIM_HandleTypeDef *htim) {HAL_TIM_Base_Stop(htim);}

// should change display brightness by changing PWM pulse width. input should be from 0-100
// uses 32MHz timer TIM3 CH1
void setDisplayBacklight(uint8_t intensity, TIM_HandleTypeDef *htim) {
 8004f78:	b5b0      	push	{r4, r5, r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	0002      	movs	r2, r0
 8004f80:	6039      	str	r1, [r7, #0]
 8004f82:	1dfb      	adds	r3, r7, #7
 8004f84:	701a      	strb	r2, [r3, #0]
	if (intensity > 100) return;		// bounds checking
 8004f86:	1dfb      	adds	r3, r7, #7
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	2b64      	cmp	r3, #100	; 0x64
 8004f8c:	d83a      	bhi.n	8005004 <setDisplayBacklight+0x8c>

	TIM_OC_InitTypeDef sConfig = {0};
 8004f8e:	2508      	movs	r5, #8
 8004f90:	197b      	adds	r3, r7, r5
 8004f92:	0018      	movs	r0, r3
 8004f94:	2310      	movs	r3, #16
 8004f96:	001a      	movs	r2, r3
 8004f98:	2100      	movs	r1, #0
 8004f9a:	f006 f9fc 	bl	800b396 <memset>
	sConfig.OCMode = TIM_OCMODE_PWM1;
 8004f9e:	197b      	adds	r3, r7, r5
 8004fa0:	2260      	movs	r2, #96	; 0x60
 8004fa2:	601a      	str	r2, [r3, #0]
	sConfig.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004fa4:	197b      	adds	r3, r7, r5
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	609a      	str	r2, [r3, #8]
	sConfig.OCFastMode = TIM_OCFAST_DISABLE;
 8004faa:	197b      	adds	r3, r7, r5
 8004fac:	2200      	movs	r2, #0
 8004fae:	60da      	str	r2, [r3, #12]
	sConfig.Pulse = (htim->Instance->ARR-1)*((float)intensity/100);
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	0018      	movs	r0, r3
 8004fba:	f7fb ff63 	bl	8000e84 <__aeabi_ui2f>
 8004fbe:	1c04      	adds	r4, r0, #0
 8004fc0:	1dfb      	adds	r3, r7, #7
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	0018      	movs	r0, r3
 8004fc6:	f7fb ff5d 	bl	8000e84 <__aeabi_ui2f>
 8004fca:	1c03      	adds	r3, r0, #0
 8004fcc:	490f      	ldr	r1, [pc, #60]	; (800500c <setDisplayBacklight+0x94>)
 8004fce:	1c18      	adds	r0, r3, #0
 8004fd0:	f7fb fa6a 	bl	80004a8 <__aeabi_fdiv>
 8004fd4:	1c03      	adds	r3, r0, #0
 8004fd6:	1c19      	adds	r1, r3, #0
 8004fd8:	1c20      	adds	r0, r4, #0
 8004fda:	f7fb fc3d 	bl	8000858 <__aeabi_fmul>
 8004fde:	1c03      	adds	r3, r0, #0
 8004fe0:	1c18      	adds	r0, r3, #0
 8004fe2:	f7fb fa49 	bl	8000478 <__aeabi_f2uiz>
 8004fe6:	0002      	movs	r2, r0
 8004fe8:	197b      	adds	r3, r7, r5
 8004fea:	605a      	str	r2, [r3, #4]

	HAL_TIM_PWM_ConfigChannel(htim, &sConfig, TIM_CHANNEL_1);
 8004fec:	1979      	adds	r1, r7, r5
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	0018      	movs	r0, r3
 8004ff4:	f005 fd1a 	bl	800aa2c <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_Start_IT(htim, TIM_CHANNEL_1);
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	2100      	movs	r1, #0
 8004ffc:	0018      	movs	r0, r3
 8004ffe:	f005 fb8d 	bl	800a71c <HAL_TIM_PWM_Start_IT>
 8005002:	e000      	b.n	8005006 <setDisplayBacklight+0x8e>
	if (intensity > 100) return;		// bounds checking
 8005004:	46c0      	nop			; (mov r8, r8)
}
 8005006:	46bd      	mov	sp, r7
 8005008:	b006      	add	sp, #24
 800500a:	bdb0      	pop	{r4, r5, r7, pc}
 800500c:	42c80000 	.word	0x42c80000

08005010 <HAL_GPIO_EXTI_Callback>:
	"Nov",
	"Dec"
};

// callback for button interrupts.
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	0002      	movs	r2, r0
 8005018:	1dbb      	adds	r3, r7, #6
 800501a:	801a      	strh	r2, [r3, #0]
	// toggles LED whenever a button is pressed
	HAL_GPIO_TogglePin(LED3_PORT, LED3_PIN);
 800501c:	23a0      	movs	r3, #160	; 0xa0
 800501e:	05db      	lsls	r3, r3, #23
 8005020:	2180      	movs	r1, #128	; 0x80
 8005022:	0018      	movs	r0, r3
 8005024:	f002 feb5 	bl	8007d92 <HAL_GPIO_TogglePin>

	// disables interrupts for software debouncing
	HAL_NVIC_DisableIRQ(EXTI2_3_IRQn);
 8005028:	2006      	movs	r0, #6
 800502a:	f002 fca2 	bl	8007972 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 800502e:	2007      	movs	r0, #7
 8005030:	f002 fc9f 	bl	8007972 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI2_3_IRQn);
 8005034:	2006      	movs	r0, #6
 8005036:	f002 fcb9 	bl	80079ac <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(EXTI4_15_IRQn);
 800503a:	2007      	movs	r0, #7
 800503c:	f002 fcb6 	bl	80079ac <HAL_NVIC_ClearPendingIRQ>

	// updates flags
	if (GPIO_Pin == BUTTON1) buttons.is1Pressed = 1;
 8005040:	1dbb      	adds	r3, r7, #6
 8005042:	881b      	ldrh	r3, [r3, #0]
 8005044:	2b02      	cmp	r3, #2
 8005046:	d102      	bne.n	800504e <HAL_GPIO_EXTI_Callback+0x3e>
 8005048:	4b11      	ldr	r3, [pc, #68]	; (8005090 <HAL_GPIO_EXTI_Callback+0x80>)
 800504a:	2201      	movs	r2, #1
 800504c:	701a      	strb	r2, [r3, #0]
	if (GPIO_Pin == BUTTON2) buttons.is2Pressed = 1;
 800504e:	1dbb      	adds	r3, r7, #6
 8005050:	881b      	ldrh	r3, [r3, #0]
 8005052:	2b04      	cmp	r3, #4
 8005054:	d102      	bne.n	800505c <HAL_GPIO_EXTI_Callback+0x4c>
 8005056:	4b0e      	ldr	r3, [pc, #56]	; (8005090 <HAL_GPIO_EXTI_Callback+0x80>)
 8005058:	2201      	movs	r2, #1
 800505a:	705a      	strb	r2, [r3, #1]
	if (GPIO_Pin == BUTTON3) buttons.is3Pressed = 1;
 800505c:	1dbb      	adds	r3, r7, #6
 800505e:	881a      	ldrh	r2, [r3, #0]
 8005060:	2380      	movs	r3, #128	; 0x80
 8005062:	00db      	lsls	r3, r3, #3
 8005064:	429a      	cmp	r2, r3
 8005066:	d102      	bne.n	800506e <HAL_GPIO_EXTI_Callback+0x5e>
 8005068:	4b09      	ldr	r3, [pc, #36]	; (8005090 <HAL_GPIO_EXTI_Callback+0x80>)
 800506a:	2201      	movs	r2, #1
 800506c:	709a      	strb	r2, [r3, #2]
	if (GPIO_Pin == BUTTON4) buttons.is4Pressed = 1;
 800506e:	1dbb      	adds	r3, r7, #6
 8005070:	881a      	ldrh	r2, [r3, #0]
 8005072:	2380      	movs	r3, #128	; 0x80
 8005074:	011b      	lsls	r3, r3, #4
 8005076:	429a      	cmp	r2, r3
 8005078:	d102      	bne.n	8005080 <HAL_GPIO_EXTI_Callback+0x70>
 800507a:	4b05      	ldr	r3, [pc, #20]	; (8005090 <HAL_GPIO_EXTI_Callback+0x80>)
 800507c:	2201      	movs	r2, #1
 800507e:	70da      	strb	r2, [r3, #3]

	// runs timer for software debouncing delay
	HAL_TIM_Base_Start_IT(&htim6);
 8005080:	4b04      	ldr	r3, [pc, #16]	; (8005094 <HAL_GPIO_EXTI_Callback+0x84>)
 8005082:	0018      	movs	r0, r3
 8005084:	f005 f9fa 	bl	800a47c <HAL_TIM_Base_Start_IT>
}
 8005088:	46c0      	nop			; (mov r8, r8)
 800508a:	46bd      	mov	sp, r7
 800508c:	b002      	add	sp, #8
 800508e:	bd80      	pop	{r7, pc}
 8005090:	2000018c 	.word	0x2000018c
 8005094:	20000150 	.word	0x20000150

08005098 <updateState>:

//
void updateState(RTC_HandleTypeDef *hrtc, TIM_HandleTypeDef *timerStopwatchTim, TIM_HandleTypeDef *motorBacklightTim, TIM_HandleTypeDef *buttonTim, SPI_HandleTypeDef *hspi) {
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
 80050a4:	603b      	str	r3, [r7, #0]
	if (buttons.is1Pressed || buttons.is2Pressed || buttons.is3Pressed || buttons.is4Pressed) {
 80050a6:	4bbf      	ldr	r3, [pc, #764]	; (80053a4 <updateState+0x30c>)
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d10f      	bne.n	80050d0 <updateState+0x38>
 80050b0:	4bbc      	ldr	r3, [pc, #752]	; (80053a4 <updateState+0x30c>)
 80050b2:	785b      	ldrb	r3, [r3, #1]
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10a      	bne.n	80050d0 <updateState+0x38>
 80050ba:	4bba      	ldr	r3, [pc, #744]	; (80053a4 <updateState+0x30c>)
 80050bc:	789b      	ldrb	r3, [r3, #2]
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d105      	bne.n	80050d0 <updateState+0x38>
 80050c4:	4bb7      	ldr	r3, [pc, #732]	; (80053a4 <updateState+0x30c>)
 80050c6:	78db      	ldrb	r3, [r3, #3]
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d100      	bne.n	80050d0 <updateState+0x38>
 80050ce:	e1ab      	b.n	8005428 <updateState+0x390>
		// button 1 changes the face on screen.
		if (buttons.is1Pressed) {
 80050d0:	4bb4      	ldr	r3, [pc, #720]	; (80053a4 <updateState+0x30c>)
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d02d      	beq.n	8005136 <updateState+0x9e>
			isFaceBeingChanged = 1;
 80050da:	4bb3      	ldr	r3, [pc, #716]	; (80053a8 <updateState+0x310>)
 80050dc:	2201      	movs	r2, #1
 80050de:	701a      	strb	r2, [r3, #0]
			faceOnDisplay = (faceOnDisplay + 1) % NUM_FACES;
 80050e0:	4bb2      	ldr	r3, [pc, #712]	; (80053ac <updateState+0x314>)
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	3301      	adds	r3, #1
 80050e6:	4ab2      	ldr	r2, [pc, #712]	; (80053b0 <updateState+0x318>)
 80050e8:	4013      	ands	r3, r2
 80050ea:	d504      	bpl.n	80050f6 <updateState+0x5e>
 80050ec:	3b01      	subs	r3, #1
 80050ee:	2204      	movs	r2, #4
 80050f0:	4252      	negs	r2, r2
 80050f2:	4313      	orrs	r3, r2
 80050f4:	3301      	adds	r3, #1
 80050f6:	b2da      	uxtb	r2, r3
 80050f8:	4bac      	ldr	r3, [pc, #688]	; (80053ac <updateState+0x314>)
 80050fa:	701a      	strb	r2, [r3, #0]
			switch (faceOnDisplay) {
 80050fc:	4bab      	ldr	r3, [pc, #684]	; (80053ac <updateState+0x314>)
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	2b01      	cmp	r3, #1
 8005102:	d00c      	beq.n	800511e <updateState+0x86>
 8005104:	dc02      	bgt.n	800510c <updateState+0x74>
 8005106:	2b00      	cmp	r3, #0
 8005108:	d005      	beq.n	8005116 <updateState+0x7e>
				case faceClock: updateFace.clock = 1; break;
				case faceTimer: updateFace.timer = 1; break;
				case faceAlarm: updateFace.alarm = 1; break;
				case faceStopwatch: updateFace.stopwatch = 1; break;
				default: break;
 800510a:	e015      	b.n	8005138 <updateState+0xa0>
			switch (faceOnDisplay) {
 800510c:	2b02      	cmp	r3, #2
 800510e:	d00a      	beq.n	8005126 <updateState+0x8e>
 8005110:	2b03      	cmp	r3, #3
 8005112:	d00c      	beq.n	800512e <updateState+0x96>
				default: break;
 8005114:	e010      	b.n	8005138 <updateState+0xa0>
				case faceClock: updateFace.clock = 1; break;
 8005116:	4ba7      	ldr	r3, [pc, #668]	; (80053b4 <updateState+0x31c>)
 8005118:	2201      	movs	r2, #1
 800511a:	701a      	strb	r2, [r3, #0]
 800511c:	e00c      	b.n	8005138 <updateState+0xa0>
				case faceTimer: updateFace.timer = 1; break;
 800511e:	4ba5      	ldr	r3, [pc, #660]	; (80053b4 <updateState+0x31c>)
 8005120:	2201      	movs	r2, #1
 8005122:	705a      	strb	r2, [r3, #1]
 8005124:	e008      	b.n	8005138 <updateState+0xa0>
				case faceAlarm: updateFace.alarm = 1; break;
 8005126:	4ba3      	ldr	r3, [pc, #652]	; (80053b4 <updateState+0x31c>)
 8005128:	2201      	movs	r2, #1
 800512a:	709a      	strb	r2, [r3, #2]
 800512c:	e004      	b.n	8005138 <updateState+0xa0>
				case faceStopwatch: updateFace.stopwatch = 1; break;
 800512e:	4ba1      	ldr	r3, [pc, #644]	; (80053b4 <updateState+0x31c>)
 8005130:	2201      	movs	r2, #1
 8005132:	70da      	strb	r2, [r3, #3]
 8005134:	e000      	b.n	8005138 <updateState+0xa0>
			}
		}
 8005136:	46c0      	nop			; (mov r8, r8)

		// button combo: press 2 and 3 alternatively 5 times to reinit display.
		// needed since screen often turns white when its power supply is rustled, and there's no way to show the information
		static uint8_t s = 0;
		switch(s) {
 8005138:	4b9f      	ldr	r3, [pc, #636]	; (80053b8 <updateState+0x320>)
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	2b09      	cmp	r3, #9
 800513e:	d900      	bls.n	8005142 <updateState+0xaa>
 8005140:	e11b      	b.n	800537a <updateState+0x2e2>
 8005142:	009a      	lsls	r2, r3, #2
 8005144:	4b9d      	ldr	r3, [pc, #628]	; (80053bc <updateState+0x324>)
 8005146:	18d3      	adds	r3, r2, r3
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	469f      	mov	pc, r3
			case 0:	if (buttons.is2Pressed) s++; break;
 800514c:	4b95      	ldr	r3, [pc, #596]	; (80053a4 <updateState+0x30c>)
 800514e:	785b      	ldrb	r3, [r3, #1]
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b00      	cmp	r3, #0
 8005154:	d100      	bne.n	8005158 <updateState+0xc0>
 8005156:	e112      	b.n	800537e <updateState+0x2e6>
 8005158:	4b97      	ldr	r3, [pc, #604]	; (80053b8 <updateState+0x320>)
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	3301      	adds	r3, #1
 800515e:	b2da      	uxtb	r2, r3
 8005160:	4b95      	ldr	r3, [pc, #596]	; (80053b8 <updateState+0x320>)
 8005162:	701a      	strb	r2, [r3, #0]
 8005164:	e10b      	b.n	800537e <updateState+0x2e6>
			case 1: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 8005166:	4b8f      	ldr	r3, [pc, #572]	; (80053a4 <updateState+0x30c>)
 8005168:	789b      	ldrb	r3, [r3, #2]
 800516a:	b2db      	uxtb	r3, r3
 800516c:	2b00      	cmp	r3, #0
 800516e:	d006      	beq.n	800517e <updateState+0xe6>
 8005170:	4b91      	ldr	r3, [pc, #580]	; (80053b8 <updateState+0x320>)
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	3301      	adds	r3, #1
 8005176:	b2da      	uxtb	r2, r3
 8005178:	4b8f      	ldr	r3, [pc, #572]	; (80053b8 <updateState+0x320>)
 800517a:	701a      	strb	r2, [r3, #0]
 800517c:	e101      	b.n	8005382 <updateState+0x2ea>
 800517e:	4b89      	ldr	r3, [pc, #548]	; (80053a4 <updateState+0x30c>)
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	b2db      	uxtb	r3, r3
 8005184:	2b00      	cmp	r3, #0
 8005186:	d10a      	bne.n	800519e <updateState+0x106>
 8005188:	4b86      	ldr	r3, [pc, #536]	; (80053a4 <updateState+0x30c>)
 800518a:	785b      	ldrb	r3, [r3, #1]
 800518c:	b2db      	uxtb	r3, r3
 800518e:	2b00      	cmp	r3, #0
 8005190:	d105      	bne.n	800519e <updateState+0x106>
 8005192:	4b84      	ldr	r3, [pc, #528]	; (80053a4 <updateState+0x30c>)
 8005194:	78db      	ldrb	r3, [r3, #3]
 8005196:	b2db      	uxtb	r3, r3
 8005198:	2b00      	cmp	r3, #0
 800519a:	d100      	bne.n	800519e <updateState+0x106>
 800519c:	e0f1      	b.n	8005382 <updateState+0x2ea>
 800519e:	4b86      	ldr	r3, [pc, #536]	; (80053b8 <updateState+0x320>)
 80051a0:	2200      	movs	r2, #0
 80051a2:	701a      	strb	r2, [r3, #0]
 80051a4:	e0ed      	b.n	8005382 <updateState+0x2ea>
			case 2: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 80051a6:	4b7f      	ldr	r3, [pc, #508]	; (80053a4 <updateState+0x30c>)
 80051a8:	785b      	ldrb	r3, [r3, #1]
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d006      	beq.n	80051be <updateState+0x126>
 80051b0:	4b81      	ldr	r3, [pc, #516]	; (80053b8 <updateState+0x320>)
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	3301      	adds	r3, #1
 80051b6:	b2da      	uxtb	r2, r3
 80051b8:	4b7f      	ldr	r3, [pc, #508]	; (80053b8 <updateState+0x320>)
 80051ba:	701a      	strb	r2, [r3, #0]
 80051bc:	e0e3      	b.n	8005386 <updateState+0x2ee>
 80051be:	4b79      	ldr	r3, [pc, #484]	; (80053a4 <updateState+0x30c>)
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d10a      	bne.n	80051de <updateState+0x146>
 80051c8:	4b76      	ldr	r3, [pc, #472]	; (80053a4 <updateState+0x30c>)
 80051ca:	789b      	ldrb	r3, [r3, #2]
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d105      	bne.n	80051de <updateState+0x146>
 80051d2:	4b74      	ldr	r3, [pc, #464]	; (80053a4 <updateState+0x30c>)
 80051d4:	78db      	ldrb	r3, [r3, #3]
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d100      	bne.n	80051de <updateState+0x146>
 80051dc:	e0d3      	b.n	8005386 <updateState+0x2ee>
 80051de:	4b76      	ldr	r3, [pc, #472]	; (80053b8 <updateState+0x320>)
 80051e0:	2200      	movs	r2, #0
 80051e2:	701a      	strb	r2, [r3, #0]
 80051e4:	e0cf      	b.n	8005386 <updateState+0x2ee>
			case 3: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 80051e6:	4b6f      	ldr	r3, [pc, #444]	; (80053a4 <updateState+0x30c>)
 80051e8:	789b      	ldrb	r3, [r3, #2]
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d006      	beq.n	80051fe <updateState+0x166>
 80051f0:	4b71      	ldr	r3, [pc, #452]	; (80053b8 <updateState+0x320>)
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	3301      	adds	r3, #1
 80051f6:	b2da      	uxtb	r2, r3
 80051f8:	4b6f      	ldr	r3, [pc, #444]	; (80053b8 <updateState+0x320>)
 80051fa:	701a      	strb	r2, [r3, #0]
 80051fc:	e0c5      	b.n	800538a <updateState+0x2f2>
 80051fe:	4b69      	ldr	r3, [pc, #420]	; (80053a4 <updateState+0x30c>)
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	b2db      	uxtb	r3, r3
 8005204:	2b00      	cmp	r3, #0
 8005206:	d10a      	bne.n	800521e <updateState+0x186>
 8005208:	4b66      	ldr	r3, [pc, #408]	; (80053a4 <updateState+0x30c>)
 800520a:	785b      	ldrb	r3, [r3, #1]
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b00      	cmp	r3, #0
 8005210:	d105      	bne.n	800521e <updateState+0x186>
 8005212:	4b64      	ldr	r3, [pc, #400]	; (80053a4 <updateState+0x30c>)
 8005214:	78db      	ldrb	r3, [r3, #3]
 8005216:	b2db      	uxtb	r3, r3
 8005218:	2b00      	cmp	r3, #0
 800521a:	d100      	bne.n	800521e <updateState+0x186>
 800521c:	e0b5      	b.n	800538a <updateState+0x2f2>
 800521e:	4b66      	ldr	r3, [pc, #408]	; (80053b8 <updateState+0x320>)
 8005220:	2200      	movs	r2, #0
 8005222:	701a      	strb	r2, [r3, #0]
 8005224:	e0b1      	b.n	800538a <updateState+0x2f2>
			case 4: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 8005226:	4b5f      	ldr	r3, [pc, #380]	; (80053a4 <updateState+0x30c>)
 8005228:	785b      	ldrb	r3, [r3, #1]
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b00      	cmp	r3, #0
 800522e:	d006      	beq.n	800523e <updateState+0x1a6>
 8005230:	4b61      	ldr	r3, [pc, #388]	; (80053b8 <updateState+0x320>)
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	3301      	adds	r3, #1
 8005236:	b2da      	uxtb	r2, r3
 8005238:	4b5f      	ldr	r3, [pc, #380]	; (80053b8 <updateState+0x320>)
 800523a:	701a      	strb	r2, [r3, #0]
 800523c:	e0a7      	b.n	800538e <updateState+0x2f6>
 800523e:	4b59      	ldr	r3, [pc, #356]	; (80053a4 <updateState+0x30c>)
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	b2db      	uxtb	r3, r3
 8005244:	2b00      	cmp	r3, #0
 8005246:	d10a      	bne.n	800525e <updateState+0x1c6>
 8005248:	4b56      	ldr	r3, [pc, #344]	; (80053a4 <updateState+0x30c>)
 800524a:	789b      	ldrb	r3, [r3, #2]
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d105      	bne.n	800525e <updateState+0x1c6>
 8005252:	4b54      	ldr	r3, [pc, #336]	; (80053a4 <updateState+0x30c>)
 8005254:	78db      	ldrb	r3, [r3, #3]
 8005256:	b2db      	uxtb	r3, r3
 8005258:	2b00      	cmp	r3, #0
 800525a:	d100      	bne.n	800525e <updateState+0x1c6>
 800525c:	e097      	b.n	800538e <updateState+0x2f6>
 800525e:	4b56      	ldr	r3, [pc, #344]	; (80053b8 <updateState+0x320>)
 8005260:	2200      	movs	r2, #0
 8005262:	701a      	strb	r2, [r3, #0]
 8005264:	e093      	b.n	800538e <updateState+0x2f6>
			case 5: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 8005266:	4b4f      	ldr	r3, [pc, #316]	; (80053a4 <updateState+0x30c>)
 8005268:	789b      	ldrb	r3, [r3, #2]
 800526a:	b2db      	uxtb	r3, r3
 800526c:	2b00      	cmp	r3, #0
 800526e:	d006      	beq.n	800527e <updateState+0x1e6>
 8005270:	4b51      	ldr	r3, [pc, #324]	; (80053b8 <updateState+0x320>)
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	3301      	adds	r3, #1
 8005276:	b2da      	uxtb	r2, r3
 8005278:	4b4f      	ldr	r3, [pc, #316]	; (80053b8 <updateState+0x320>)
 800527a:	701a      	strb	r2, [r3, #0]
 800527c:	e089      	b.n	8005392 <updateState+0x2fa>
 800527e:	4b49      	ldr	r3, [pc, #292]	; (80053a4 <updateState+0x30c>)
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	b2db      	uxtb	r3, r3
 8005284:	2b00      	cmp	r3, #0
 8005286:	d10a      	bne.n	800529e <updateState+0x206>
 8005288:	4b46      	ldr	r3, [pc, #280]	; (80053a4 <updateState+0x30c>)
 800528a:	785b      	ldrb	r3, [r3, #1]
 800528c:	b2db      	uxtb	r3, r3
 800528e:	2b00      	cmp	r3, #0
 8005290:	d105      	bne.n	800529e <updateState+0x206>
 8005292:	4b44      	ldr	r3, [pc, #272]	; (80053a4 <updateState+0x30c>)
 8005294:	78db      	ldrb	r3, [r3, #3]
 8005296:	b2db      	uxtb	r3, r3
 8005298:	2b00      	cmp	r3, #0
 800529a:	d100      	bne.n	800529e <updateState+0x206>
 800529c:	e079      	b.n	8005392 <updateState+0x2fa>
 800529e:	4b46      	ldr	r3, [pc, #280]	; (80053b8 <updateState+0x320>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	701a      	strb	r2, [r3, #0]
 80052a4:	e075      	b.n	8005392 <updateState+0x2fa>
			case 6: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 80052a6:	4b3f      	ldr	r3, [pc, #252]	; (80053a4 <updateState+0x30c>)
 80052a8:	785b      	ldrb	r3, [r3, #1]
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d006      	beq.n	80052be <updateState+0x226>
 80052b0:	4b41      	ldr	r3, [pc, #260]	; (80053b8 <updateState+0x320>)
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	3301      	adds	r3, #1
 80052b6:	b2da      	uxtb	r2, r3
 80052b8:	4b3f      	ldr	r3, [pc, #252]	; (80053b8 <updateState+0x320>)
 80052ba:	701a      	strb	r2, [r3, #0]
 80052bc:	e06b      	b.n	8005396 <updateState+0x2fe>
 80052be:	4b39      	ldr	r3, [pc, #228]	; (80053a4 <updateState+0x30c>)
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d109      	bne.n	80052dc <updateState+0x244>
 80052c8:	4b36      	ldr	r3, [pc, #216]	; (80053a4 <updateState+0x30c>)
 80052ca:	789b      	ldrb	r3, [r3, #2]
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d104      	bne.n	80052dc <updateState+0x244>
 80052d2:	4b34      	ldr	r3, [pc, #208]	; (80053a4 <updateState+0x30c>)
 80052d4:	78db      	ldrb	r3, [r3, #3]
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d05c      	beq.n	8005396 <updateState+0x2fe>
 80052dc:	4b36      	ldr	r3, [pc, #216]	; (80053b8 <updateState+0x320>)
 80052de:	2200      	movs	r2, #0
 80052e0:	701a      	strb	r2, [r3, #0]
 80052e2:	e058      	b.n	8005396 <updateState+0x2fe>
			case 7: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 80052e4:	4b2f      	ldr	r3, [pc, #188]	; (80053a4 <updateState+0x30c>)
 80052e6:	789b      	ldrb	r3, [r3, #2]
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d006      	beq.n	80052fc <updateState+0x264>
 80052ee:	4b32      	ldr	r3, [pc, #200]	; (80053b8 <updateState+0x320>)
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	3301      	adds	r3, #1
 80052f4:	b2da      	uxtb	r2, r3
 80052f6:	4b30      	ldr	r3, [pc, #192]	; (80053b8 <updateState+0x320>)
 80052f8:	701a      	strb	r2, [r3, #0]
 80052fa:	e04e      	b.n	800539a <updateState+0x302>
 80052fc:	4b29      	ldr	r3, [pc, #164]	; (80053a4 <updateState+0x30c>)
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d109      	bne.n	800531a <updateState+0x282>
 8005306:	4b27      	ldr	r3, [pc, #156]	; (80053a4 <updateState+0x30c>)
 8005308:	785b      	ldrb	r3, [r3, #1]
 800530a:	b2db      	uxtb	r3, r3
 800530c:	2b00      	cmp	r3, #0
 800530e:	d104      	bne.n	800531a <updateState+0x282>
 8005310:	4b24      	ldr	r3, [pc, #144]	; (80053a4 <updateState+0x30c>)
 8005312:	78db      	ldrb	r3, [r3, #3]
 8005314:	b2db      	uxtb	r3, r3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d03f      	beq.n	800539a <updateState+0x302>
 800531a:	4b27      	ldr	r3, [pc, #156]	; (80053b8 <updateState+0x320>)
 800531c:	2200      	movs	r2, #0
 800531e:	701a      	strb	r2, [r3, #0]
 8005320:	e03b      	b.n	800539a <updateState+0x302>
			case 8: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 8005322:	4b20      	ldr	r3, [pc, #128]	; (80053a4 <updateState+0x30c>)
 8005324:	785b      	ldrb	r3, [r3, #1]
 8005326:	b2db      	uxtb	r3, r3
 8005328:	2b00      	cmp	r3, #0
 800532a:	d006      	beq.n	800533a <updateState+0x2a2>
 800532c:	4b22      	ldr	r3, [pc, #136]	; (80053b8 <updateState+0x320>)
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	3301      	adds	r3, #1
 8005332:	b2da      	uxtb	r2, r3
 8005334:	4b20      	ldr	r3, [pc, #128]	; (80053b8 <updateState+0x320>)
 8005336:	701a      	strb	r2, [r3, #0]
 8005338:	e031      	b.n	800539e <updateState+0x306>
 800533a:	4b1a      	ldr	r3, [pc, #104]	; (80053a4 <updateState+0x30c>)
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	b2db      	uxtb	r3, r3
 8005340:	2b00      	cmp	r3, #0
 8005342:	d109      	bne.n	8005358 <updateState+0x2c0>
 8005344:	4b17      	ldr	r3, [pc, #92]	; (80053a4 <updateState+0x30c>)
 8005346:	789b      	ldrb	r3, [r3, #2]
 8005348:	b2db      	uxtb	r3, r3
 800534a:	2b00      	cmp	r3, #0
 800534c:	d104      	bne.n	8005358 <updateState+0x2c0>
 800534e:	4b15      	ldr	r3, [pc, #84]	; (80053a4 <updateState+0x30c>)
 8005350:	78db      	ldrb	r3, [r3, #3]
 8005352:	b2db      	uxtb	r3, r3
 8005354:	2b00      	cmp	r3, #0
 8005356:	d022      	beq.n	800539e <updateState+0x306>
 8005358:	4b17      	ldr	r3, [pc, #92]	; (80053b8 <updateState+0x320>)
 800535a:	2200      	movs	r2, #0
 800535c:	701a      	strb	r2, [r3, #0]
 800535e:	e01e      	b.n	800539e <updateState+0x306>
			case 9: if (buttons.is3Pressed) {TFT_startup(hspi); s = 0;} break;
 8005360:	4b10      	ldr	r3, [pc, #64]	; (80053a4 <updateState+0x30c>)
 8005362:	789b      	ldrb	r3, [r3, #2]
 8005364:	b2db      	uxtb	r3, r3
 8005366:	2b00      	cmp	r3, #0
 8005368:	d02a      	beq.n	80053c0 <updateState+0x328>
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	0018      	movs	r0, r3
 800536e:	f7fc fd2f 	bl	8001dd0 <TFT_startup>
 8005372:	4b11      	ldr	r3, [pc, #68]	; (80053b8 <updateState+0x320>)
 8005374:	2200      	movs	r2, #0
 8005376:	701a      	strb	r2, [r3, #0]
 8005378:	e022      	b.n	80053c0 <updateState+0x328>
			default: break;
 800537a:	46c0      	nop			; (mov r8, r8)
 800537c:	e021      	b.n	80053c2 <updateState+0x32a>
			case 0:	if (buttons.is2Pressed) s++; break;
 800537e:	46c0      	nop			; (mov r8, r8)
 8005380:	e01f      	b.n	80053c2 <updateState+0x32a>
			case 1: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 8005382:	46c0      	nop			; (mov r8, r8)
 8005384:	e01d      	b.n	80053c2 <updateState+0x32a>
			case 2: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 8005386:	46c0      	nop			; (mov r8, r8)
 8005388:	e01b      	b.n	80053c2 <updateState+0x32a>
			case 3: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 800538a:	46c0      	nop			; (mov r8, r8)
 800538c:	e019      	b.n	80053c2 <updateState+0x32a>
			case 4: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 800538e:	46c0      	nop			; (mov r8, r8)
 8005390:	e017      	b.n	80053c2 <updateState+0x32a>
			case 5: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 8005392:	46c0      	nop			; (mov r8, r8)
 8005394:	e015      	b.n	80053c2 <updateState+0x32a>
			case 6: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 8005396:	46c0      	nop			; (mov r8, r8)
 8005398:	e013      	b.n	80053c2 <updateState+0x32a>
			case 7: if (buttons.is3Pressed) s++; else if (buttons.is1Pressed || buttons.is2Pressed || buttons.is4Pressed) s = 0; break;
 800539a:	46c0      	nop			; (mov r8, r8)
 800539c:	e011      	b.n	80053c2 <updateState+0x32a>
			case 8: if (buttons.is2Pressed) s++; else if (buttons.is1Pressed || buttons.is3Pressed || buttons.is4Pressed) s = 0; break;
 800539e:	46c0      	nop			; (mov r8, r8)
 80053a0:	e00f      	b.n	80053c2 <updateState+0x32a>
 80053a2:	46c0      	nop			; (mov r8, r8)
 80053a4:	2000018c 	.word	0x2000018c
 80053a8:	20000068 	.word	0x20000068
 80053ac:	20000130 	.word	0x20000130
 80053b0:	80000003 	.word	0x80000003
 80053b4:	20000140 	.word	0x20000140
 80053b8:	20000131 	.word	0x20000131
 80053bc:	0800c794 	.word	0x0800c794
			case 9: if (buttons.is3Pressed) {TFT_startup(hspi); s = 0;} break;
 80053c0:	46c0      	nop			; (mov r8, r8)
		}

		// run helper functions when their face is on screen
		if (faceOnDisplay == faceClock) updateClockState(hrtc);
 80053c2:	4b1b      	ldr	r3, [pc, #108]	; (8005430 <updateState+0x398>)
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d104      	bne.n	80053d4 <updateState+0x33c>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	0018      	movs	r0, r3
 80053ce:	f000 f833 	bl	8005438 <updateClockState>
 80053d2:	e01d      	b.n	8005410 <updateState+0x378>
		else if (faceOnDisplay == faceTimer) updateTimerState(timerStopwatchTim, motorBacklightTim);
 80053d4:	4b16      	ldr	r3, [pc, #88]	; (8005430 <updateState+0x398>)
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d106      	bne.n	80053ea <updateState+0x352>
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	0011      	movs	r1, r2
 80053e2:	0018      	movs	r0, r3
 80053e4:	f000 f978 	bl	80056d8 <updateTimerState>
 80053e8:	e012      	b.n	8005410 <updateState+0x378>
		else if (faceOnDisplay == faceAlarm) updateAlarmState(hrtc, motorBacklightTim);
 80053ea:	4b11      	ldr	r3, [pc, #68]	; (8005430 <updateState+0x398>)
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d106      	bne.n	8005400 <updateState+0x368>
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	0011      	movs	r1, r2
 80053f8:	0018      	movs	r0, r3
 80053fa:	f000 faa9 	bl	8005950 <updateAlarmState>
 80053fe:	e007      	b.n	8005410 <updateState+0x378>
		else if (faceOnDisplay == faceStopwatch) updateStopwatchState(timerStopwatchTim);
 8005400:	4b0b      	ldr	r3, [pc, #44]	; (8005430 <updateState+0x398>)
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	2b03      	cmp	r3, #3
 8005406:	d103      	bne.n	8005410 <updateState+0x378>
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	0018      	movs	r0, r3
 800540c:	f000 fbcc 	bl	8005ba8 <updateStopwatchState>

		// flags cleared only when state code has finished executing once
		buttons.is1Pressed = buttons.is2Pressed = buttons.is3Pressed = buttons.is4Pressed = 0;
 8005410:	2200      	movs	r2, #0
 8005412:	4b08      	ldr	r3, [pc, #32]	; (8005434 <updateState+0x39c>)
 8005414:	1c11      	adds	r1, r2, #0
 8005416:	70d9      	strb	r1, [r3, #3]
 8005418:	4b06      	ldr	r3, [pc, #24]	; (8005434 <updateState+0x39c>)
 800541a:	1c11      	adds	r1, r2, #0
 800541c:	7099      	strb	r1, [r3, #2]
 800541e:	4b05      	ldr	r3, [pc, #20]	; (8005434 <updateState+0x39c>)
 8005420:	1c11      	adds	r1, r2, #0
 8005422:	7059      	strb	r1, [r3, #1]
 8005424:	4b03      	ldr	r3, [pc, #12]	; (8005434 <updateState+0x39c>)
 8005426:	701a      	strb	r2, [r3, #0]
	}
}
 8005428:	46c0      	nop			; (mov r8, r8)
 800542a:	46bd      	mov	sp, r7
 800542c:	b004      	add	sp, #16
 800542e:	bd80      	pop	{r7, pc}
 8005430:	20000130 	.word	0x20000130
 8005434:	2000018c 	.word	0x2000018c

08005438 <updateClockState>:
 *   button 2 changes value up
 *   button 3 changes value down
 *   button 4 changes field being set. changes between min, hr, year, month, and day. once it finishes cycling through it once,
 *     the clock is updated and we revert back to default mode.
 */
void updateClockState(RTC_HandleTypeDef *hrtc) {
 8005438:	b590      	push	{r4, r7, lr}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
	// check button pressed -> perform action
	if (buttons.is2Pressed && clockVars.isBeingSet) {
 8005440:	4b9f      	ldr	r3, [pc, #636]	; (80056c0 <updateClockState+0x288>)
 8005442:	785b      	ldrb	r3, [r3, #1]
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d065      	beq.n	8005516 <updateClockState+0xde>
 800544a:	4b9e      	ldr	r3, [pc, #632]	; (80056c4 <updateClockState+0x28c>)
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d061      	beq.n	8005516 <updateClockState+0xde>
		updateFace.clock = 1;
 8005452:	4b9d      	ldr	r3, [pc, #628]	; (80056c8 <updateClockState+0x290>)
 8005454:	2201      	movs	r2, #1
 8005456:	701a      	strb	r2, [r3, #0]
		switch (clockVars.fieldBeingSet) {
 8005458:	4b9a      	ldr	r3, [pc, #616]	; (80056c4 <updateClockState+0x28c>)
 800545a:	785b      	ldrb	r3, [r3, #1]
 800545c:	2b05      	cmp	r3, #5
 800545e:	d85c      	bhi.n	800551a <updateClockState+0xe2>
 8005460:	009a      	lsls	r2, r3, #2
 8005462:	4b9a      	ldr	r3, [pc, #616]	; (80056cc <updateClockState+0x294>)
 8005464:	18d3      	adds	r3, r2, r3
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	469f      	mov	pc, r3
			case 1: clockVars.timeToSet->min = (clockVars.timeToSet->min+1) % 60; break;
 800546a:	4b96      	ldr	r3, [pc, #600]	; (80056c4 <updateClockState+0x28c>)
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	785b      	ldrb	r3, [r3, #1]
 8005470:	3301      	adds	r3, #1
 8005472:	213c      	movs	r1, #60	; 0x3c
 8005474:	0018      	movs	r0, r3
 8005476:	f7fa ffbf 	bl	80003f8 <__aeabi_idivmod>
 800547a:	000b      	movs	r3, r1
 800547c:	001a      	movs	r2, r3
 800547e:	4b91      	ldr	r3, [pc, #580]	; (80056c4 <updateClockState+0x28c>)
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	b2d2      	uxtb	r2, r2
 8005484:	705a      	strb	r2, [r3, #1]
 8005486:	e049      	b.n	800551c <updateClockState+0xe4>
			case 2: clockVars.timeToSet->hr = (clockVars.timeToSet->hr+1) % 24; break;
 8005488:	4b8e      	ldr	r3, [pc, #568]	; (80056c4 <updateClockState+0x28c>)
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	3301      	adds	r3, #1
 8005490:	2118      	movs	r1, #24
 8005492:	0018      	movs	r0, r3
 8005494:	f7fa ffb0 	bl	80003f8 <__aeabi_idivmod>
 8005498:	000b      	movs	r3, r1
 800549a:	001a      	movs	r2, r3
 800549c:	4b89      	ldr	r3, [pc, #548]	; (80056c4 <updateClockState+0x28c>)
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	b2d2      	uxtb	r2, r2
 80054a2:	701a      	strb	r2, [r3, #0]
 80054a4:	e03a      	b.n	800551c <updateClockState+0xe4>
			case 3: clockVars.dateToSet->yr = (clockVars.dateToSet->yr + 1) % 10000; break;		// fit in 4 characters
 80054a6:	4b87      	ldr	r3, [pc, #540]	; (80056c4 <updateClockState+0x28c>)
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	881b      	ldrh	r3, [r3, #0]
 80054ac:	3301      	adds	r3, #1
 80054ae:	4988      	ldr	r1, [pc, #544]	; (80056d0 <updateClockState+0x298>)
 80054b0:	0018      	movs	r0, r3
 80054b2:	f7fa ffa1 	bl	80003f8 <__aeabi_idivmod>
 80054b6:	000b      	movs	r3, r1
 80054b8:	001a      	movs	r2, r3
 80054ba:	4b82      	ldr	r3, [pc, #520]	; (80056c4 <updateClockState+0x28c>)
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	b292      	uxth	r2, r2
 80054c0:	801a      	strh	r2, [r3, #0]
 80054c2:	e02b      	b.n	800551c <updateClockState+0xe4>
			case 4: clockVars.dateToSet->month = (clockVars.dateToSet->month) % 12 + 1; break;
 80054c4:	4b7f      	ldr	r3, [pc, #508]	; (80056c4 <updateClockState+0x28c>)
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	789b      	ldrb	r3, [r3, #2]
 80054ca:	210c      	movs	r1, #12
 80054cc:	0018      	movs	r0, r3
 80054ce:	f7fa fea9 	bl	8000224 <__aeabi_uidivmod>
 80054d2:	000b      	movs	r3, r1
 80054d4:	b2da      	uxtb	r2, r3
 80054d6:	4b7b      	ldr	r3, [pc, #492]	; (80056c4 <updateClockState+0x28c>)
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	3201      	adds	r2, #1
 80054dc:	b2d2      	uxtb	r2, r2
 80054de:	709a      	strb	r2, [r3, #2]
 80054e0:	e01c      	b.n	800551c <updateClockState+0xe4>
			case 5: clockVars.dateToSet->date = ((clockVars.dateToSet->date) % maxDaysInMonth(clockVars.dateToSet->month, clockVars.dateToSet->yr)) + 1; break;
 80054e2:	4b78      	ldr	r3, [pc, #480]	; (80056c4 <updateClockState+0x28c>)
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	78dc      	ldrb	r4, [r3, #3]
 80054e8:	4b76      	ldr	r3, [pc, #472]	; (80056c4 <updateClockState+0x28c>)
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	789a      	ldrb	r2, [r3, #2]
 80054ee:	4b75      	ldr	r3, [pc, #468]	; (80056c4 <updateClockState+0x28c>)
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	881b      	ldrh	r3, [r3, #0]
 80054f4:	0019      	movs	r1, r3
 80054f6:	0010      	movs	r0, r2
 80054f8:	f7fe fa20 	bl	800393c <maxDaysInMonth>
 80054fc:	0003      	movs	r3, r0
 80054fe:	0019      	movs	r1, r3
 8005500:	0020      	movs	r0, r4
 8005502:	f7fa fe8f 	bl	8000224 <__aeabi_uidivmod>
 8005506:	000b      	movs	r3, r1
 8005508:	b2da      	uxtb	r2, r3
 800550a:	4b6e      	ldr	r3, [pc, #440]	; (80056c4 <updateClockState+0x28c>)
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	3201      	adds	r2, #1
 8005510:	b2d2      	uxtb	r2, r2
 8005512:	70da      	strb	r2, [r3, #3]
 8005514:	e002      	b.n	800551c <updateClockState+0xe4>
			default: break;
		}
	}
 8005516:	46c0      	nop			; (mov r8, r8)
 8005518:	e000      	b.n	800551c <updateClockState+0xe4>
			default: break;
 800551a:	46c0      	nop			; (mov r8, r8)
	// change fields down, do nothing if not setting clock
	if (buttons.is3Pressed && clockVars.isBeingSet) {
 800551c:	4b68      	ldr	r3, [pc, #416]	; (80056c0 <updateClockState+0x288>)
 800551e:	789b      	ldrb	r3, [r3, #2]
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d100      	bne.n	8005528 <updateClockState+0xf0>
 8005526:	e068      	b.n	80055fa <updateClockState+0x1c2>
 8005528:	4b66      	ldr	r3, [pc, #408]	; (80056c4 <updateClockState+0x28c>)
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d064      	beq.n	80055fa <updateClockState+0x1c2>
		updateFace.clock = 1;
 8005530:	4b65      	ldr	r3, [pc, #404]	; (80056c8 <updateClockState+0x290>)
 8005532:	2201      	movs	r2, #1
 8005534:	701a      	strb	r2, [r3, #0]
		switch (clockVars.fieldBeingSet) {
 8005536:	4b63      	ldr	r3, [pc, #396]	; (80056c4 <updateClockState+0x28c>)
 8005538:	785b      	ldrb	r3, [r3, #1]
 800553a:	2b05      	cmp	r3, #5
 800553c:	d85f      	bhi.n	80055fe <updateClockState+0x1c6>
 800553e:	009a      	lsls	r2, r3, #2
 8005540:	4b64      	ldr	r3, [pc, #400]	; (80056d4 <updateClockState+0x29c>)
 8005542:	18d3      	adds	r3, r2, r3
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	469f      	mov	pc, r3
			case 1:
				if (clockVars.timeToSet->min == 0) clockVars.timeToSet->min = 59;
 8005548:	4b5e      	ldr	r3, [pc, #376]	; (80056c4 <updateClockState+0x28c>)
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	785b      	ldrb	r3, [r3, #1]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d104      	bne.n	800555c <updateClockState+0x124>
 8005552:	4b5c      	ldr	r3, [pc, #368]	; (80056c4 <updateClockState+0x28c>)
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	223b      	movs	r2, #59	; 0x3b
 8005558:	705a      	strb	r2, [r3, #1]
				else clockVars.timeToSet->min--;
				break;
 800555a:	e053      	b.n	8005604 <updateClockState+0x1cc>
				else clockVars.timeToSet->min--;
 800555c:	4b59      	ldr	r3, [pc, #356]	; (80056c4 <updateClockState+0x28c>)
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	785a      	ldrb	r2, [r3, #1]
 8005562:	3a01      	subs	r2, #1
 8005564:	b2d2      	uxtb	r2, r2
 8005566:	705a      	strb	r2, [r3, #1]
				break;
 8005568:	e04c      	b.n	8005604 <updateClockState+0x1cc>
			case 2:
				if (clockVars.timeToSet->hr == 0) clockVars.timeToSet->hr = 23;
 800556a:	4b56      	ldr	r3, [pc, #344]	; (80056c4 <updateClockState+0x28c>)
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d104      	bne.n	800557e <updateClockState+0x146>
 8005574:	4b53      	ldr	r3, [pc, #332]	; (80056c4 <updateClockState+0x28c>)
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	2217      	movs	r2, #23
 800557a:	701a      	strb	r2, [r3, #0]
				else clockVars.timeToSet->hr--;
				break;
 800557c:	e042      	b.n	8005604 <updateClockState+0x1cc>
				else clockVars.timeToSet->hr--;
 800557e:	4b51      	ldr	r3, [pc, #324]	; (80056c4 <updateClockState+0x28c>)
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	781a      	ldrb	r2, [r3, #0]
 8005584:	3a01      	subs	r2, #1
 8005586:	b2d2      	uxtb	r2, r2
 8005588:	701a      	strb	r2, [r3, #0]
				break;
 800558a:	e03b      	b.n	8005604 <updateClockState+0x1cc>
			case 3: if (clockVars.dateToSet->yr != 0) clockVars.dateToSet->yr--; break;		// limit to positive numbers
 800558c:	4b4d      	ldr	r3, [pc, #308]	; (80056c4 <updateClockState+0x28c>)
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	881b      	ldrh	r3, [r3, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d035      	beq.n	8005602 <updateClockState+0x1ca>
 8005596:	4b4b      	ldr	r3, [pc, #300]	; (80056c4 <updateClockState+0x28c>)
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	881a      	ldrh	r2, [r3, #0]
 800559c:	3a01      	subs	r2, #1
 800559e:	b292      	uxth	r2, r2
 80055a0:	801a      	strh	r2, [r3, #0]
 80055a2:	e02e      	b.n	8005602 <updateClockState+0x1ca>
			case 4: //clockVars.dateToSet->month = clockVars.dateToSet->month == 1 ? 12 : clockVars.dateToSet->month-1; break;
				if (clockVars.dateToSet->month == 1) clockVars.dateToSet->month = 12;
 80055a4:	4b47      	ldr	r3, [pc, #284]	; (80056c4 <updateClockState+0x28c>)
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	789b      	ldrb	r3, [r3, #2]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d104      	bne.n	80055b8 <updateClockState+0x180>
 80055ae:	4b45      	ldr	r3, [pc, #276]	; (80056c4 <updateClockState+0x28c>)
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	220c      	movs	r2, #12
 80055b4:	709a      	strb	r2, [r3, #2]
				else clockVars.dateToSet->month--;
				break;
 80055b6:	e025      	b.n	8005604 <updateClockState+0x1cc>
				else clockVars.dateToSet->month--;
 80055b8:	4b42      	ldr	r3, [pc, #264]	; (80056c4 <updateClockState+0x28c>)
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	789a      	ldrb	r2, [r3, #2]
 80055be:	3a01      	subs	r2, #1
 80055c0:	b2d2      	uxtb	r2, r2
 80055c2:	709a      	strb	r2, [r3, #2]
				break;
 80055c4:	e01e      	b.n	8005604 <updateClockState+0x1cc>
			case 5:
				if (clockVars.dateToSet->date == 1) clockVars.dateToSet->date = maxDaysInMonth(clockVars.dateToSet->month, clockVars.dateToSet->yr);
 80055c6:	4b3f      	ldr	r3, [pc, #252]	; (80056c4 <updateClockState+0x28c>)
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	78db      	ldrb	r3, [r3, #3]
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d10d      	bne.n	80055ec <updateClockState+0x1b4>
 80055d0:	4b3c      	ldr	r3, [pc, #240]	; (80056c4 <updateClockState+0x28c>)
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	789a      	ldrb	r2, [r3, #2]
 80055d6:	4b3b      	ldr	r3, [pc, #236]	; (80056c4 <updateClockState+0x28c>)
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	8819      	ldrh	r1, [r3, #0]
 80055dc:	4b39      	ldr	r3, [pc, #228]	; (80056c4 <updateClockState+0x28c>)
 80055de:	685c      	ldr	r4, [r3, #4]
 80055e0:	0010      	movs	r0, r2
 80055e2:	f7fe f9ab 	bl	800393c <maxDaysInMonth>
 80055e6:	0003      	movs	r3, r0
 80055e8:	70e3      	strb	r3, [r4, #3]
				else clockVars.dateToSet->date--;
				break;
 80055ea:	e00b      	b.n	8005604 <updateClockState+0x1cc>
				else clockVars.dateToSet->date--;
 80055ec:	4b35      	ldr	r3, [pc, #212]	; (80056c4 <updateClockState+0x28c>)
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	78da      	ldrb	r2, [r3, #3]
 80055f2:	3a01      	subs	r2, #1
 80055f4:	b2d2      	uxtb	r2, r2
 80055f6:	70da      	strb	r2, [r3, #3]
				break;
 80055f8:	e004      	b.n	8005604 <updateClockState+0x1cc>
			default: break;
		}
	}
 80055fa:	46c0      	nop			; (mov r8, r8)
 80055fc:	e002      	b.n	8005604 <updateClockState+0x1cc>
			default: break;
 80055fe:	46c0      	nop			; (mov r8, r8)
 8005600:	e000      	b.n	8005604 <updateClockState+0x1cc>
			case 3: if (clockVars.dateToSet->yr != 0) clockVars.dateToSet->yr--; break;		// limit to positive numbers
 8005602:	46c0      	nop			; (mov r8, r8)
	// switches between setting mode and default mode. changes between different clock fields
	if (buttons.is4Pressed) {
 8005604:	4b2e      	ldr	r3, [pc, #184]	; (80056c0 <updateClockState+0x288>)
 8005606:	78db      	ldrb	r3, [r3, #3]
 8005608:	b2db      	uxtb	r3, r3
 800560a:	2b00      	cmp	r3, #0
 800560c:	d054      	beq.n	80056b8 <updateClockState+0x280>
		updateFace.clock = 1;
 800560e:	4b2e      	ldr	r3, [pc, #184]	; (80056c8 <updateClockState+0x290>)
 8005610:	2201      	movs	r2, #1
 8005612:	701a      	strb	r2, [r3, #0]
		clockVars.fieldBeingSet = (clockVars.fieldBeingSet + 1) % (NUM_CLOCKFIELDS + 1);
 8005614:	4b2b      	ldr	r3, [pc, #172]	; (80056c4 <updateClockState+0x28c>)
 8005616:	785b      	ldrb	r3, [r3, #1]
 8005618:	3301      	adds	r3, #1
 800561a:	2106      	movs	r1, #6
 800561c:	0018      	movs	r0, r3
 800561e:	f7fa feeb 	bl	80003f8 <__aeabi_idivmod>
 8005622:	000b      	movs	r3, r1
 8005624:	b2da      	uxtb	r2, r3
 8005626:	4b27      	ldr	r3, [pc, #156]	; (80056c4 <updateClockState+0x28c>)
 8005628:	705a      	strb	r2, [r3, #1]
		if (clockVars.fieldBeingSet != 0) {
 800562a:	4b26      	ldr	r3, [pc, #152]	; (80056c4 <updateClockState+0x28c>)
 800562c:	785b      	ldrb	r3, [r3, #1]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d033      	beq.n	800569a <updateClockState+0x262>
			clockVars.isBeingSet = 1;
 8005632:	4b24      	ldr	r3, [pc, #144]	; (80056c4 <updateClockState+0x28c>)
 8005634:	2201      	movs	r2, #1
 8005636:	701a      	strb	r2, [r3, #0]

			// should pull current time when first entering setting mode
			if (clockVars.fieldBeingSet == 1) {
 8005638:	4b22      	ldr	r3, [pc, #136]	; (80056c4 <updateClockState+0x28c>)
 800563a:	785b      	ldrb	r3, [r3, #1]
 800563c:	2b01      	cmp	r3, #1
 800563e:	d10e      	bne.n	800565e <updateClockState+0x226>
				getDateTime(clockVars.dateToSet, clockVars.timeToSet, hrtc);
 8005640:	4b20      	ldr	r3, [pc, #128]	; (80056c4 <updateClockState+0x28c>)
 8005642:	6858      	ldr	r0, [r3, #4]
 8005644:	4b1f      	ldr	r3, [pc, #124]	; (80056c4 <updateClockState+0x28c>)
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	0019      	movs	r1, r3
 800564c:	f7fe f834 	bl	80036b8 <getDateTime>
				HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_B);
 8005650:	2380      	movs	r3, #128	; 0x80
 8005652:	009a      	lsls	r2, r3, #2
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	0011      	movs	r1, r2
 8005658:	0018      	movs	r0, r3
 800565a:	f004 f813 	bl	8009684 <HAL_RTC_DeactivateAlarm>
			}

			if (clockVars.dateToSet->date > maxDaysInMonth(clockVars.dateToSet->month, clockVars.dateToSet->yr)) {
 800565e:	4b19      	ldr	r3, [pc, #100]	; (80056c4 <updateClockState+0x28c>)
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	78dc      	ldrb	r4, [r3, #3]
 8005664:	4b17      	ldr	r3, [pc, #92]	; (80056c4 <updateClockState+0x28c>)
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	789a      	ldrb	r2, [r3, #2]
 800566a:	4b16      	ldr	r3, [pc, #88]	; (80056c4 <updateClockState+0x28c>)
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	881b      	ldrh	r3, [r3, #0]
 8005670:	0019      	movs	r1, r3
 8005672:	0010      	movs	r0, r2
 8005674:	f7fe f962 	bl	800393c <maxDaysInMonth>
 8005678:	0003      	movs	r3, r0
 800567a:	429c      	cmp	r4, r3
 800567c:	d91c      	bls.n	80056b8 <updateClockState+0x280>
				clockVars.dateToSet->date = maxDaysInMonth(clockVars.dateToSet->month, clockVars.dateToSet->yr);
 800567e:	4b11      	ldr	r3, [pc, #68]	; (80056c4 <updateClockState+0x28c>)
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	789a      	ldrb	r2, [r3, #2]
 8005684:	4b0f      	ldr	r3, [pc, #60]	; (80056c4 <updateClockState+0x28c>)
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	8819      	ldrh	r1, [r3, #0]
 800568a:	4b0e      	ldr	r3, [pc, #56]	; (80056c4 <updateClockState+0x28c>)
 800568c:	685c      	ldr	r4, [r3, #4]
 800568e:	0010      	movs	r0, r2
 8005690:	f7fe f954 	bl	800393c <maxDaysInMonth>
 8005694:	0003      	movs	r3, r0
 8005696:	70e3      	strb	r3, [r4, #3]
			// second set to 0, weekday ignored
			setDateTime(clockVars.dateToSet, clockVars.timeToSet, hrtc);
			setClockAlarm(hrtc);
		}
	}
}
 8005698:	e00e      	b.n	80056b8 <updateClockState+0x280>
			clockVars.isBeingSet = 0;
 800569a:	4b0a      	ldr	r3, [pc, #40]	; (80056c4 <updateClockState+0x28c>)
 800569c:	2200      	movs	r2, #0
 800569e:	701a      	strb	r2, [r3, #0]
			setDateTime(clockVars.dateToSet, clockVars.timeToSet, hrtc);
 80056a0:	4b08      	ldr	r3, [pc, #32]	; (80056c4 <updateClockState+0x28c>)
 80056a2:	6858      	ldr	r0, [r3, #4]
 80056a4:	4b07      	ldr	r3, [pc, #28]	; (80056c4 <updateClockState+0x28c>)
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	0019      	movs	r1, r3
 80056ac:	f7fd fdd4 	bl	8003258 <setDateTime>
			setClockAlarm(hrtc);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	0018      	movs	r0, r3
 80056b4:	f7fd fe3c 	bl	8003330 <setClockAlarm>
}
 80056b8:	46c0      	nop			; (mov r8, r8)
 80056ba:	46bd      	mov	sp, r7
 80056bc:	b003      	add	sp, #12
 80056be:	bd90      	pop	{r4, r7, pc}
 80056c0:	2000018c 	.word	0x2000018c
 80056c4:	2000010c 	.word	0x2000010c
 80056c8:	20000140 	.word	0x20000140
 80056cc:	0800c7bc 	.word	0x0800c7bc
 80056d0:	00002710 	.word	0x00002710
 80056d4:	0800c7d4 	.word	0x0800c7d4

080056d8 <updateTimerState>:
 *   button 2 changes value up
 *   button 3 changes value down
 *   button 4 changes field being set. changes between sec, min, hr. returns to default mode after
 *     cycling through fields once.
 */
void updateTimerState(TIM_HandleTypeDef *timerStopwatchTim, TIM_HandleTypeDef *motorTim) {
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
	// check which button is pressed -> perform action
	if (buttons.is2Pressed) {
 80056e2:	4b93      	ldr	r3, [pc, #588]	; (8005930 <updateTimerState+0x258>)
 80056e4:	785b      	ldrb	r3, [r3, #1]
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d057      	beq.n	800579c <updateTimerState+0xc4>
		updateFace.timer = 1;
 80056ec:	4b91      	ldr	r3, [pc, #580]	; (8005934 <updateTimerState+0x25c>)
 80056ee:	2201      	movs	r2, #1
 80056f0:	705a      	strb	r2, [r3, #1]
		if (timerVars.isBeingSet) {
 80056f2:	4b91      	ldr	r3, [pc, #580]	; (8005938 <updateTimerState+0x260>)
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d035      	beq.n	8005766 <updateTimerState+0x8e>
			// set field up
			switch (timerVars.fieldBeingSet) {
 80056fa:	4b8f      	ldr	r3, [pc, #572]	; (8005938 <updateTimerState+0x260>)
 80056fc:	785b      	ldrb	r3, [r3, #1]
 80056fe:	2b02      	cmp	r3, #2
 8005700:	d013      	beq.n	800572a <updateTimerState+0x52>
 8005702:	2b03      	cmp	r3, #3
 8005704:	d020      	beq.n	8005748 <updateTimerState+0x70>
 8005706:	2b01      	cmp	r3, #1
 8005708:	d000      	beq.n	800570c <updateTimerState+0x34>
				case 1: timerVars.timeToSet->sec = (timerVars.timeToSet->sec+1) % 60; break;
				case 2: timerVars.timeToSet->min = (timerVars.timeToSet->min+1) % 60; break;
				case 3: timerVars.timeToSet->hr = (timerVars.timeToSet->hr+1) % 100; break;
				default: break;
 800570a:	e10d      	b.n	8005928 <updateTimerState+0x250>
				case 1: timerVars.timeToSet->sec = (timerVars.timeToSet->sec+1) % 60; break;
 800570c:	4b8a      	ldr	r3, [pc, #552]	; (8005938 <updateTimerState+0x260>)
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	789b      	ldrb	r3, [r3, #2]
 8005712:	3301      	adds	r3, #1
 8005714:	213c      	movs	r1, #60	; 0x3c
 8005716:	0018      	movs	r0, r3
 8005718:	f7fa fe6e 	bl	80003f8 <__aeabi_idivmod>
 800571c:	000b      	movs	r3, r1
 800571e:	001a      	movs	r2, r3
 8005720:	4b85      	ldr	r3, [pc, #532]	; (8005938 <updateTimerState+0x260>)
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	b2d2      	uxtb	r2, r2
 8005726:	709a      	strb	r2, [r3, #2]
 8005728:	e0fe      	b.n	8005928 <updateTimerState+0x250>
				case 2: timerVars.timeToSet->min = (timerVars.timeToSet->min+1) % 60; break;
 800572a:	4b83      	ldr	r3, [pc, #524]	; (8005938 <updateTimerState+0x260>)
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	785b      	ldrb	r3, [r3, #1]
 8005730:	3301      	adds	r3, #1
 8005732:	213c      	movs	r1, #60	; 0x3c
 8005734:	0018      	movs	r0, r3
 8005736:	f7fa fe5f 	bl	80003f8 <__aeabi_idivmod>
 800573a:	000b      	movs	r3, r1
 800573c:	001a      	movs	r2, r3
 800573e:	4b7e      	ldr	r3, [pc, #504]	; (8005938 <updateTimerState+0x260>)
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	b2d2      	uxtb	r2, r2
 8005744:	705a      	strb	r2, [r3, #1]
 8005746:	e0ef      	b.n	8005928 <updateTimerState+0x250>
				case 3: timerVars.timeToSet->hr = (timerVars.timeToSet->hr+1) % 100; break;
 8005748:	4b7b      	ldr	r3, [pc, #492]	; (8005938 <updateTimerState+0x260>)
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	3301      	adds	r3, #1
 8005750:	2164      	movs	r1, #100	; 0x64
 8005752:	0018      	movs	r0, r3
 8005754:	f7fa fe50 	bl	80003f8 <__aeabi_idivmod>
 8005758:	000b      	movs	r3, r1
 800575a:	001a      	movs	r2, r3
 800575c:	4b76      	ldr	r3, [pc, #472]	; (8005938 <updateTimerState+0x260>)
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	b2d2      	uxtb	r2, r2
 8005762:	701a      	strb	r2, [r3, #0]
 8005764:	e0e0      	b.n	8005928 <updateTimerState+0x250>
			}
		}
		else if (timerVars.isSet && isTimerRunning == 0 && timerCounter != 0) {
 8005766:	4b74      	ldr	r3, [pc, #464]	; (8005938 <updateTimerState+0x260>)
 8005768:	789b      	ldrb	r3, [r3, #2]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d100      	bne.n	8005770 <updateTimerState+0x98>
 800576e:	e0db      	b.n	8005928 <updateTimerState+0x250>
 8005770:	4b72      	ldr	r3, [pc, #456]	; (800593c <updateTimerState+0x264>)
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b00      	cmp	r3, #0
 8005778:	d000      	beq.n	800577c <updateTimerState+0xa4>
 800577a:	e0d5      	b.n	8005928 <updateTimerState+0x250>
 800577c:	4b70      	ldr	r3, [pc, #448]	; (8005940 <updateTimerState+0x268>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d100      	bne.n	8005786 <updateTimerState+0xae>
 8005784:	e0d0      	b.n	8005928 <updateTimerState+0x250>
			// start timer
			runTimer(timerStopwatchTim);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	0018      	movs	r0, r3
 800578a:	f7ff fa5f 	bl	8004c4c <runTimer>
			isTimerRunning = 1;
 800578e:	4b6b      	ldr	r3, [pc, #428]	; (800593c <updateTimerState+0x264>)
 8005790:	2201      	movs	r2, #1
 8005792:	701a      	strb	r2, [r3, #0]
			isTimerPaused = 0;
 8005794:	4b6b      	ldr	r3, [pc, #428]	; (8005944 <updateTimerState+0x26c>)
 8005796:	2200      	movs	r2, #0
 8005798:	701a      	strb	r2, [r3, #0]
				timerVars.isBeingSet = 0;
				timerVars.isSet = 0;
			}
		}
	}
}
 800579a:	e0c5      	b.n	8005928 <updateTimerState+0x250>
	else if (buttons.is3Pressed) {
 800579c:	4b64      	ldr	r3, [pc, #400]	; (8005930 <updateTimerState+0x258>)
 800579e:	789b      	ldrb	r3, [r3, #2]
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d05d      	beq.n	8005862 <updateTimerState+0x18a>
		updateFace.timer = 1;
 80057a6:	4b63      	ldr	r3, [pc, #396]	; (8005934 <updateTimerState+0x25c>)
 80057a8:	2201      	movs	r2, #1
 80057aa:	705a      	strb	r2, [r3, #1]
		if (timerVars.isBeingSet) {
 80057ac:	4b62      	ldr	r3, [pc, #392]	; (8005938 <updateTimerState+0x260>)
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d03b      	beq.n	800582c <updateTimerState+0x154>
			switch (timerVars.fieldBeingSet) {
 80057b4:	4b60      	ldr	r3, [pc, #384]	; (8005938 <updateTimerState+0x260>)
 80057b6:	785b      	ldrb	r3, [r3, #1]
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d015      	beq.n	80057e8 <updateTimerState+0x110>
 80057bc:	2b03      	cmp	r3, #3
 80057be:	d024      	beq.n	800580a <updateTimerState+0x132>
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d000      	beq.n	80057c6 <updateTimerState+0xee>
				default: break;
 80057c4:	e0b0      	b.n	8005928 <updateTimerState+0x250>
					if (timerVars.timeToSet->sec == 0) timerVars.timeToSet->sec = 59;
 80057c6:	4b5c      	ldr	r3, [pc, #368]	; (8005938 <updateTimerState+0x260>)
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	789b      	ldrb	r3, [r3, #2]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d104      	bne.n	80057da <updateTimerState+0x102>
 80057d0:	4b59      	ldr	r3, [pc, #356]	; (8005938 <updateTimerState+0x260>)
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	223b      	movs	r2, #59	; 0x3b
 80057d6:	709a      	strb	r2, [r3, #2]
					break;
 80057d8:	e0a6      	b.n	8005928 <updateTimerState+0x250>
					else timerVars.timeToSet->sec--;
 80057da:	4b57      	ldr	r3, [pc, #348]	; (8005938 <updateTimerState+0x260>)
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	789a      	ldrb	r2, [r3, #2]
 80057e0:	3a01      	subs	r2, #1
 80057e2:	b2d2      	uxtb	r2, r2
 80057e4:	709a      	strb	r2, [r3, #2]
					break;
 80057e6:	e09f      	b.n	8005928 <updateTimerState+0x250>
					if (timerVars.timeToSet->min == 0) timerVars.timeToSet->min = 59;
 80057e8:	4b53      	ldr	r3, [pc, #332]	; (8005938 <updateTimerState+0x260>)
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	785b      	ldrb	r3, [r3, #1]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d104      	bne.n	80057fc <updateTimerState+0x124>
 80057f2:	4b51      	ldr	r3, [pc, #324]	; (8005938 <updateTimerState+0x260>)
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	223b      	movs	r2, #59	; 0x3b
 80057f8:	705a      	strb	r2, [r3, #1]
					break;
 80057fa:	e095      	b.n	8005928 <updateTimerState+0x250>
					else timerVars.timeToSet->min--;
 80057fc:	4b4e      	ldr	r3, [pc, #312]	; (8005938 <updateTimerState+0x260>)
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	785a      	ldrb	r2, [r3, #1]
 8005802:	3a01      	subs	r2, #1
 8005804:	b2d2      	uxtb	r2, r2
 8005806:	705a      	strb	r2, [r3, #1]
					break;
 8005808:	e08e      	b.n	8005928 <updateTimerState+0x250>
					if (timerVars.timeToSet->hr == 0) timerVars.timeToSet->hr = 99;		// no limit on hour, since we're not using day
 800580a:	4b4b      	ldr	r3, [pc, #300]	; (8005938 <updateTimerState+0x260>)
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d104      	bne.n	800581e <updateTimerState+0x146>
 8005814:	4b48      	ldr	r3, [pc, #288]	; (8005938 <updateTimerState+0x260>)
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	2263      	movs	r2, #99	; 0x63
 800581a:	701a      	strb	r2, [r3, #0]
					break;
 800581c:	e084      	b.n	8005928 <updateTimerState+0x250>
					else timerVars.timeToSet->hr--;
 800581e:	4b46      	ldr	r3, [pc, #280]	; (8005938 <updateTimerState+0x260>)
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	781a      	ldrb	r2, [r3, #0]
 8005824:	3a01      	subs	r2, #1
 8005826:	b2d2      	uxtb	r2, r2
 8005828:	701a      	strb	r2, [r3, #0]
					break;
 800582a:	e07d      	b.n	8005928 <updateTimerState+0x250>
		else if (timerVars.isSet && isTimerRunning && timerCounter != 0) {
 800582c:	4b42      	ldr	r3, [pc, #264]	; (8005938 <updateTimerState+0x260>)
 800582e:	789b      	ldrb	r3, [r3, #2]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d100      	bne.n	8005836 <updateTimerState+0x15e>
 8005834:	e078      	b.n	8005928 <updateTimerState+0x250>
 8005836:	4b41      	ldr	r3, [pc, #260]	; (800593c <updateTimerState+0x264>)
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	b2db      	uxtb	r3, r3
 800583c:	2b00      	cmp	r3, #0
 800583e:	d100      	bne.n	8005842 <updateTimerState+0x16a>
 8005840:	e072      	b.n	8005928 <updateTimerState+0x250>
 8005842:	4b3f      	ldr	r3, [pc, #252]	; (8005940 <updateTimerState+0x268>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d100      	bne.n	800584c <updateTimerState+0x174>
 800584a:	e06d      	b.n	8005928 <updateTimerState+0x250>
			pauseTimer(timerStopwatchTim);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	0018      	movs	r0, r3
 8005850:	f7ff fa58 	bl	8004d04 <pauseTimer>
			isTimerRunning = 0;
 8005854:	4b39      	ldr	r3, [pc, #228]	; (800593c <updateTimerState+0x264>)
 8005856:	2200      	movs	r2, #0
 8005858:	701a      	strb	r2, [r3, #0]
			isTimerPaused = 1;
 800585a:	4b3a      	ldr	r3, [pc, #232]	; (8005944 <updateTimerState+0x26c>)
 800585c:	2201      	movs	r2, #1
 800585e:	701a      	strb	r2, [r3, #0]
}
 8005860:	e062      	b.n	8005928 <updateTimerState+0x250>
	else if (buttons.is4Pressed) {
 8005862:	4b33      	ldr	r3, [pc, #204]	; (8005930 <updateTimerState+0x258>)
 8005864:	78db      	ldrb	r3, [r3, #3]
 8005866:	b2db      	uxtb	r3, r3
 8005868:	2b00      	cmp	r3, #0
 800586a:	d05d      	beq.n	8005928 <updateTimerState+0x250>
		updateFace.timer = 1;
 800586c:	4b31      	ldr	r3, [pc, #196]	; (8005934 <updateTimerState+0x25c>)
 800586e:	2201      	movs	r2, #1
 8005870:	705a      	strb	r2, [r3, #1]
		if (timerVars.isSet) {
 8005872:	4b31      	ldr	r3, [pc, #196]	; (8005938 <updateTimerState+0x260>)
 8005874:	789b      	ldrb	r3, [r3, #2]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00d      	beq.n	8005896 <updateTimerState+0x1be>
			stopTimer(timerStopwatchTim);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	0018      	movs	r0, r3
 800587e:	f7ff fa55 	bl	8004d2c <stopTimer>
			timerVars.isSet = 0;
 8005882:	4b2d      	ldr	r3, [pc, #180]	; (8005938 <updateTimerState+0x260>)
 8005884:	2200      	movs	r2, #0
 8005886:	709a      	strb	r2, [r3, #2]
			isTimerRunning = 0;
 8005888:	4b2c      	ldr	r3, [pc, #176]	; (800593c <updateTimerState+0x264>)
 800588a:	2200      	movs	r2, #0
 800588c:	701a      	strb	r2, [r3, #0]
			isTimerPaused = 0;
 800588e:	4b2d      	ldr	r3, [pc, #180]	; (8005944 <updateTimerState+0x26c>)
 8005890:	2200      	movs	r2, #0
 8005892:	701a      	strb	r2, [r3, #0]
}
 8005894:	e048      	b.n	8005928 <updateTimerState+0x250>
			timerVars.fieldBeingSet = (timerVars.fieldBeingSet + 1) % (NUM_TIMERFIELDS + 1);
 8005896:	4b28      	ldr	r3, [pc, #160]	; (8005938 <updateTimerState+0x260>)
 8005898:	785b      	ldrb	r3, [r3, #1]
 800589a:	3301      	adds	r3, #1
 800589c:	4a2a      	ldr	r2, [pc, #168]	; (8005948 <updateTimerState+0x270>)
 800589e:	4013      	ands	r3, r2
 80058a0:	d504      	bpl.n	80058ac <updateTimerState+0x1d4>
 80058a2:	3b01      	subs	r3, #1
 80058a4:	2204      	movs	r2, #4
 80058a6:	4252      	negs	r2, r2
 80058a8:	4313      	orrs	r3, r2
 80058aa:	3301      	adds	r3, #1
 80058ac:	b2da      	uxtb	r2, r3
 80058ae:	4b22      	ldr	r3, [pc, #136]	; (8005938 <updateTimerState+0x260>)
 80058b0:	705a      	strb	r2, [r3, #1]
			if (timerVars.fieldBeingSet != 0) {
 80058b2:	4b21      	ldr	r3, [pc, #132]	; (8005938 <updateTimerState+0x260>)
 80058b4:	785b      	ldrb	r3, [r3, #1]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d016      	beq.n	80058e8 <updateTimerState+0x210>
				timerVars.isBeingSet = 1;
 80058ba:	4b1f      	ldr	r3, [pc, #124]	; (8005938 <updateTimerState+0x260>)
 80058bc:	2201      	movs	r2, #1
 80058be:	701a      	strb	r2, [r3, #0]
				timerVars.isSet = 0;
 80058c0:	4b1d      	ldr	r3, [pc, #116]	; (8005938 <updateTimerState+0x260>)
 80058c2:	2200      	movs	r2, #0
 80058c4:	709a      	strb	r2, [r3, #2]
				if (timerVars.fieldBeingSet == 1) {
 80058c6:	4b1c      	ldr	r3, [pc, #112]	; (8005938 <updateTimerState+0x260>)
 80058c8:	785b      	ldrb	r3, [r3, #1]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d12c      	bne.n	8005928 <updateTimerState+0x250>
					timerVars.timeToSet->sec = 0;
 80058ce:	4b1a      	ldr	r3, [pc, #104]	; (8005938 <updateTimerState+0x260>)
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	709a      	strb	r2, [r3, #2]
					timerVars.timeToSet->min = 0;
 80058d6:	4b18      	ldr	r3, [pc, #96]	; (8005938 <updateTimerState+0x260>)
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	705a      	strb	r2, [r3, #1]
					timerVars.timeToSet->hr = 0;
 80058de:	4b16      	ldr	r3, [pc, #88]	; (8005938 <updateTimerState+0x260>)
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	701a      	strb	r2, [r3, #0]
}
 80058e6:	e01f      	b.n	8005928 <updateTimerState+0x250>
			else if (timeToSeconds(timerVars.timeToSet) != 0) {
 80058e8:	4b13      	ldr	r3, [pc, #76]	; (8005938 <updateTimerState+0x260>)
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	0018      	movs	r0, r3
 80058ee:	f7fd ff83 	bl	80037f8 <timeToSeconds>
 80058f2:	1e03      	subs	r3, r0, #0
 80058f4:	d011      	beq.n	800591a <updateTimerState+0x242>
				timerVars.isBeingSet = 0;
 80058f6:	4b10      	ldr	r3, [pc, #64]	; (8005938 <updateTimerState+0x260>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	701a      	strb	r2, [r3, #0]
				timerVars.isSet = 1;
 80058fc:	4b0e      	ldr	r3, [pc, #56]	; (8005938 <updateTimerState+0x260>)
 80058fe:	2201      	movs	r2, #1
 8005900:	709a      	strb	r2, [r3, #2]
				isTimerDone = 0;
 8005902:	4b12      	ldr	r3, [pc, #72]	; (800594c <updateTimerState+0x274>)
 8005904:	2200      	movs	r2, #0
 8005906:	701a      	strb	r2, [r3, #0]
				timerCounter = timeToSeconds(timerVars.timeToSet);
 8005908:	4b0b      	ldr	r3, [pc, #44]	; (8005938 <updateTimerState+0x260>)
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	0018      	movs	r0, r3
 800590e:	f7fd ff73 	bl	80037f8 <timeToSeconds>
 8005912:	0002      	movs	r2, r0
 8005914:	4b0a      	ldr	r3, [pc, #40]	; (8005940 <updateTimerState+0x268>)
 8005916:	601a      	str	r2, [r3, #0]
}
 8005918:	e006      	b.n	8005928 <updateTimerState+0x250>
				timerVars.isBeingSet = 0;
 800591a:	4b07      	ldr	r3, [pc, #28]	; (8005938 <updateTimerState+0x260>)
 800591c:	2200      	movs	r2, #0
 800591e:	701a      	strb	r2, [r3, #0]
				timerVars.isSet = 0;
 8005920:	4b05      	ldr	r3, [pc, #20]	; (8005938 <updateTimerState+0x260>)
 8005922:	2200      	movs	r2, #0
 8005924:	709a      	strb	r2, [r3, #2]
}
 8005926:	e7ff      	b.n	8005928 <updateTimerState+0x250>
 8005928:	46c0      	nop			; (mov r8, r8)
 800592a:	46bd      	mov	sp, r7
 800592c:	b002      	add	sp, #8
 800592e:	bd80      	pop	{r7, pc}
 8005930:	2000018c 	.word	0x2000018c
 8005934:	20000140 	.word	0x20000140
 8005938:	20000118 	.word	0x20000118
 800593c:	20000190 	.word	0x20000190
 8005940:	20000148 	.word	0x20000148
 8005944:	20000192 	.word	0x20000192
 8005948:	80000003 	.word	0x80000003
 800594c:	2000014c 	.word	0x2000014c

08005950 <updateAlarmState>:
 *   button 2 changes value up
 *   button 3 changes value down
 *   button 4 changes field being set. changes between sec, min, hr. returns to default mode after
 *     cycling through fields once.
 */
void updateAlarmState(RTC_HandleTypeDef *hrtc, TIM_HandleTypeDef *motorTim) {
 8005950:	b5b0      	push	{r4, r5, r7, lr}
 8005952:	b086      	sub	sp, #24
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
	// check button pressed -> perform action
	if (buttons.is2Pressed && alarmVars.isBeingSet) {
 800595a:	4b90      	ldr	r3, [pc, #576]	; (8005b9c <updateAlarmState+0x24c>)
 800595c:	785b      	ldrb	r3, [r3, #1]
 800595e:	b2db      	uxtb	r3, r3
 8005960:	2b00      	cmp	r3, #0
 8005962:	d04f      	beq.n	8005a04 <updateAlarmState+0xb4>
 8005964:	4b8e      	ldr	r3, [pc, #568]	; (8005ba0 <updateAlarmState+0x250>)
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d04b      	beq.n	8005a04 <updateAlarmState+0xb4>
		updateFace.alarm = 1;
 800596c:	4b8d      	ldr	r3, [pc, #564]	; (8005ba4 <updateAlarmState+0x254>)
 800596e:	2201      	movs	r2, #1
 8005970:	709a      	strb	r2, [r3, #2]

		// change fields up
		switch (alarmVars.fieldBeingSet) {
 8005972:	4b8b      	ldr	r3, [pc, #556]	; (8005ba0 <updateAlarmState+0x250>)
 8005974:	785b      	ldrb	r3, [r3, #1]
 8005976:	2b02      	cmp	r3, #2
 8005978:	d017      	beq.n	80059aa <updateAlarmState+0x5a>
 800597a:	dc02      	bgt.n	8005982 <updateAlarmState+0x32>
 800597c:	2b01      	cmp	r3, #1
 800597e:	d005      	beq.n	800598c <updateAlarmState+0x3c>
			case 1: alarmVars.alarmToSet->sec = (alarmVars.alarmToSet->sec + 1) % 60; break;
			case 2: alarmVars.alarmToSet->min = (alarmVars.alarmToSet->min + 1) % 60; break;
			case 3: alarmVars.alarmToSet->hr = (alarmVars.alarmToSet->hr + 1) % 24; break;
			case 4: alarmVars.alarmToSet->weekday = (alarmVars.alarmToSet->weekday) % 7 + 1; break;
			default: break;
 8005980:	e041      	b.n	8005a06 <updateAlarmState+0xb6>
		switch (alarmVars.fieldBeingSet) {
 8005982:	2b03      	cmp	r3, #3
 8005984:	d020      	beq.n	80059c8 <updateAlarmState+0x78>
 8005986:	2b04      	cmp	r3, #4
 8005988:	d02d      	beq.n	80059e6 <updateAlarmState+0x96>
			default: break;
 800598a:	e03c      	b.n	8005a06 <updateAlarmState+0xb6>
			case 1: alarmVars.alarmToSet->sec = (alarmVars.alarmToSet->sec + 1) % 60; break;
 800598c:	4b84      	ldr	r3, [pc, #528]	; (8005ba0 <updateAlarmState+0x250>)
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	789b      	ldrb	r3, [r3, #2]
 8005992:	3301      	adds	r3, #1
 8005994:	213c      	movs	r1, #60	; 0x3c
 8005996:	0018      	movs	r0, r3
 8005998:	f7fa fd2e 	bl	80003f8 <__aeabi_idivmod>
 800599c:	000b      	movs	r3, r1
 800599e:	001a      	movs	r2, r3
 80059a0:	4b7f      	ldr	r3, [pc, #508]	; (8005ba0 <updateAlarmState+0x250>)
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	b2d2      	uxtb	r2, r2
 80059a6:	709a      	strb	r2, [r3, #2]
 80059a8:	e02d      	b.n	8005a06 <updateAlarmState+0xb6>
			case 2: alarmVars.alarmToSet->min = (alarmVars.alarmToSet->min + 1) % 60; break;
 80059aa:	4b7d      	ldr	r3, [pc, #500]	; (8005ba0 <updateAlarmState+0x250>)
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	785b      	ldrb	r3, [r3, #1]
 80059b0:	3301      	adds	r3, #1
 80059b2:	213c      	movs	r1, #60	; 0x3c
 80059b4:	0018      	movs	r0, r3
 80059b6:	f7fa fd1f 	bl	80003f8 <__aeabi_idivmod>
 80059ba:	000b      	movs	r3, r1
 80059bc:	001a      	movs	r2, r3
 80059be:	4b78      	ldr	r3, [pc, #480]	; (8005ba0 <updateAlarmState+0x250>)
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	b2d2      	uxtb	r2, r2
 80059c4:	705a      	strb	r2, [r3, #1]
 80059c6:	e01e      	b.n	8005a06 <updateAlarmState+0xb6>
			case 3: alarmVars.alarmToSet->hr = (alarmVars.alarmToSet->hr + 1) % 24; break;
 80059c8:	4b75      	ldr	r3, [pc, #468]	; (8005ba0 <updateAlarmState+0x250>)
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	3301      	adds	r3, #1
 80059d0:	2118      	movs	r1, #24
 80059d2:	0018      	movs	r0, r3
 80059d4:	f7fa fd10 	bl	80003f8 <__aeabi_idivmod>
 80059d8:	000b      	movs	r3, r1
 80059da:	001a      	movs	r2, r3
 80059dc:	4b70      	ldr	r3, [pc, #448]	; (8005ba0 <updateAlarmState+0x250>)
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	b2d2      	uxtb	r2, r2
 80059e2:	701a      	strb	r2, [r3, #0]
 80059e4:	e00f      	b.n	8005a06 <updateAlarmState+0xb6>
			case 4: alarmVars.alarmToSet->weekday = (alarmVars.alarmToSet->weekday) % 7 + 1; break;
 80059e6:	4b6e      	ldr	r3, [pc, #440]	; (8005ba0 <updateAlarmState+0x250>)
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	78db      	ldrb	r3, [r3, #3]
 80059ec:	2107      	movs	r1, #7
 80059ee:	0018      	movs	r0, r3
 80059f0:	f7fa fc18 	bl	8000224 <__aeabi_uidivmod>
 80059f4:	000b      	movs	r3, r1
 80059f6:	b2da      	uxtb	r2, r3
 80059f8:	4b69      	ldr	r3, [pc, #420]	; (8005ba0 <updateAlarmState+0x250>)
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	3201      	adds	r2, #1
 80059fe:	b2d2      	uxtb	r2, r2
 8005a00:	70da      	strb	r2, [r3, #3]
 8005a02:	e000      	b.n	8005a06 <updateAlarmState+0xb6>
		}
	}
 8005a04:	46c0      	nop			; (mov r8, r8)
	if (buttons.is3Pressed && alarmVars.isBeingSet) {
 8005a06:	4b65      	ldr	r3, [pc, #404]	; (8005b9c <updateAlarmState+0x24c>)
 8005a08:	789b      	ldrb	r3, [r3, #2]
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d057      	beq.n	8005ac0 <updateAlarmState+0x170>
 8005a10:	4b63      	ldr	r3, [pc, #396]	; (8005ba0 <updateAlarmState+0x250>)
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d053      	beq.n	8005ac0 <updateAlarmState+0x170>
		updateFace.alarm = 1;
 8005a18:	4b62      	ldr	r3, [pc, #392]	; (8005ba4 <updateAlarmState+0x254>)
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	709a      	strb	r2, [r3, #2]

		// change fields down
		switch (alarmVars.fieldBeingSet) {
 8005a1e:	4b60      	ldr	r3, [pc, #384]	; (8005ba0 <updateAlarmState+0x250>)
 8005a20:	785b      	ldrb	r3, [r3, #1]
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d019      	beq.n	8005a5a <updateAlarmState+0x10a>
 8005a26:	dc02      	bgt.n	8005a2e <updateAlarmState+0xde>
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d005      	beq.n	8005a38 <updateAlarmState+0xe8>
				break;
			case 4:
				if (alarmVars.alarmToSet->weekday == RTC_WEEKDAY_MONDAY) alarmVars.alarmToSet->weekday = RTC_WEEKDAY_SUNDAY;
				else alarmVars.alarmToSet->weekday--;
				break;
			default: break;
 8005a2c:	e049      	b.n	8005ac2 <updateAlarmState+0x172>
		switch (alarmVars.fieldBeingSet) {
 8005a2e:	2b03      	cmp	r3, #3
 8005a30:	d024      	beq.n	8005a7c <updateAlarmState+0x12c>
 8005a32:	2b04      	cmp	r3, #4
 8005a34:	d033      	beq.n	8005a9e <updateAlarmState+0x14e>
			default: break;
 8005a36:	e044      	b.n	8005ac2 <updateAlarmState+0x172>
				if (alarmVars.alarmToSet->sec == 0) alarmVars.alarmToSet->sec = 59;
 8005a38:	4b59      	ldr	r3, [pc, #356]	; (8005ba0 <updateAlarmState+0x250>)
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	789b      	ldrb	r3, [r3, #2]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d104      	bne.n	8005a4c <updateAlarmState+0xfc>
 8005a42:	4b57      	ldr	r3, [pc, #348]	; (8005ba0 <updateAlarmState+0x250>)
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	223b      	movs	r2, #59	; 0x3b
 8005a48:	709a      	strb	r2, [r3, #2]
				break;
 8005a4a:	e03a      	b.n	8005ac2 <updateAlarmState+0x172>
				else alarmVars.alarmToSet->sec--;
 8005a4c:	4b54      	ldr	r3, [pc, #336]	; (8005ba0 <updateAlarmState+0x250>)
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	789a      	ldrb	r2, [r3, #2]
 8005a52:	3a01      	subs	r2, #1
 8005a54:	b2d2      	uxtb	r2, r2
 8005a56:	709a      	strb	r2, [r3, #2]
				break;
 8005a58:	e033      	b.n	8005ac2 <updateAlarmState+0x172>
				if (alarmVars.alarmToSet->min == 0) alarmVars.alarmToSet->min = 59;
 8005a5a:	4b51      	ldr	r3, [pc, #324]	; (8005ba0 <updateAlarmState+0x250>)
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	785b      	ldrb	r3, [r3, #1]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d104      	bne.n	8005a6e <updateAlarmState+0x11e>
 8005a64:	4b4e      	ldr	r3, [pc, #312]	; (8005ba0 <updateAlarmState+0x250>)
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	223b      	movs	r2, #59	; 0x3b
 8005a6a:	705a      	strb	r2, [r3, #1]
				break;
 8005a6c:	e029      	b.n	8005ac2 <updateAlarmState+0x172>
				else alarmVars.alarmToSet->min--;
 8005a6e:	4b4c      	ldr	r3, [pc, #304]	; (8005ba0 <updateAlarmState+0x250>)
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	785a      	ldrb	r2, [r3, #1]
 8005a74:	3a01      	subs	r2, #1
 8005a76:	b2d2      	uxtb	r2, r2
 8005a78:	705a      	strb	r2, [r3, #1]
				break;
 8005a7a:	e022      	b.n	8005ac2 <updateAlarmState+0x172>
				if (alarmVars.alarmToSet->hr == 0) alarmVars.alarmToSet->hr = 23;
 8005a7c:	4b48      	ldr	r3, [pc, #288]	; (8005ba0 <updateAlarmState+0x250>)
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d104      	bne.n	8005a90 <updateAlarmState+0x140>
 8005a86:	4b46      	ldr	r3, [pc, #280]	; (8005ba0 <updateAlarmState+0x250>)
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	2217      	movs	r2, #23
 8005a8c:	701a      	strb	r2, [r3, #0]
				break;
 8005a8e:	e018      	b.n	8005ac2 <updateAlarmState+0x172>
				else alarmVars.alarmToSet->hr--;
 8005a90:	4b43      	ldr	r3, [pc, #268]	; (8005ba0 <updateAlarmState+0x250>)
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	781a      	ldrb	r2, [r3, #0]
 8005a96:	3a01      	subs	r2, #1
 8005a98:	b2d2      	uxtb	r2, r2
 8005a9a:	701a      	strb	r2, [r3, #0]
				break;
 8005a9c:	e011      	b.n	8005ac2 <updateAlarmState+0x172>
				if (alarmVars.alarmToSet->weekday == RTC_WEEKDAY_MONDAY) alarmVars.alarmToSet->weekday = RTC_WEEKDAY_SUNDAY;
 8005a9e:	4b40      	ldr	r3, [pc, #256]	; (8005ba0 <updateAlarmState+0x250>)
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	78db      	ldrb	r3, [r3, #3]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d104      	bne.n	8005ab2 <updateAlarmState+0x162>
 8005aa8:	4b3d      	ldr	r3, [pc, #244]	; (8005ba0 <updateAlarmState+0x250>)
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	2207      	movs	r2, #7
 8005aae:	70da      	strb	r2, [r3, #3]
				break;
 8005ab0:	e007      	b.n	8005ac2 <updateAlarmState+0x172>
				else alarmVars.alarmToSet->weekday--;
 8005ab2:	4b3b      	ldr	r3, [pc, #236]	; (8005ba0 <updateAlarmState+0x250>)
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	78da      	ldrb	r2, [r3, #3]
 8005ab8:	3a01      	subs	r2, #1
 8005aba:	b2d2      	uxtb	r2, r2
 8005abc:	70da      	strb	r2, [r3, #3]
				break;
 8005abe:	e000      	b.n	8005ac2 <updateAlarmState+0x172>
		}
	}
 8005ac0:	46c0      	nop			; (mov r8, r8)
	if (buttons.is4Pressed) {
 8005ac2:	4b36      	ldr	r3, [pc, #216]	; (8005b9c <updateAlarmState+0x24c>)
 8005ac4:	78db      	ldrb	r3, [r3, #3]
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d062      	beq.n	8005b92 <updateAlarmState+0x242>
		updateFace.alarm = 1;
 8005acc:	4b35      	ldr	r3, [pc, #212]	; (8005ba4 <updateAlarmState+0x254>)
 8005ace:	2201      	movs	r2, #1
 8005ad0:	709a      	strb	r2, [r3, #2]

		if (alarmVars.isSet == 0) {
 8005ad2:	4b33      	ldr	r3, [pc, #204]	; (8005ba0 <updateAlarmState+0x250>)
 8005ad4:	789b      	ldrb	r3, [r3, #2]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d151      	bne.n	8005b7e <updateAlarmState+0x22e>
			// toggle between fields
			alarmVars.fieldBeingSet = (alarmVars.fieldBeingSet + 1) % (NUM_ALARMFIELDS + 1);
 8005ada:	4b31      	ldr	r3, [pc, #196]	; (8005ba0 <updateAlarmState+0x250>)
 8005adc:	785b      	ldrb	r3, [r3, #1]
 8005ade:	3301      	adds	r3, #1
 8005ae0:	2105      	movs	r1, #5
 8005ae2:	0018      	movs	r0, r3
 8005ae4:	f7fa fc88 	bl	80003f8 <__aeabi_idivmod>
 8005ae8:	000b      	movs	r3, r1
 8005aea:	b2da      	uxtb	r2, r3
 8005aec:	4b2c      	ldr	r3, [pc, #176]	; (8005ba0 <updateAlarmState+0x250>)
 8005aee:	705a      	strb	r2, [r3, #1]
			if (alarmVars.fieldBeingSet != 0) {
 8005af0:	4b2b      	ldr	r3, [pc, #172]	; (8005ba0 <updateAlarmState+0x250>)
 8005af2:	785b      	ldrb	r3, [r3, #1]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d034      	beq.n	8005b62 <updateAlarmState+0x212>
				alarmVars.isBeingSet = 1;
 8005af8:	4b29      	ldr	r3, [pc, #164]	; (8005ba0 <updateAlarmState+0x250>)
 8005afa:	2201      	movs	r2, #1
 8005afc:	701a      	strb	r2, [r3, #0]
				if (alarmVars.fieldBeingSet == 1) {
 8005afe:	4b28      	ldr	r3, [pc, #160]	; (8005ba0 <updateAlarmState+0x250>)
 8005b00:	785b      	ldrb	r3, [r3, #1]
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d145      	bne.n	8005b92 <updateAlarmState+0x242>
					struct dates d = {0};
 8005b06:	2510      	movs	r5, #16
 8005b08:	197b      	adds	r3, r7, r5
 8005b0a:	0018      	movs	r0, r3
 8005b0c:	2306      	movs	r3, #6
 8005b0e:	001a      	movs	r2, r3
 8005b10:	2100      	movs	r1, #0
 8005b12:	f005 fc40 	bl	800b396 <memset>
					struct times t = {0};
 8005b16:	240c      	movs	r4, #12
 8005b18:	193b      	adds	r3, r7, r4
 8005b1a:	0018      	movs	r0, r3
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	001a      	movs	r2, r3
 8005b20:	2100      	movs	r1, #0
 8005b22:	f005 fc38 	bl	800b396 <memset>
					getDateTime(&d, &t, hrtc);
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	0021      	movs	r1, r4
 8005b2a:	000c      	movs	r4, r1
 8005b2c:	1879      	adds	r1, r7, r1
 8005b2e:	197b      	adds	r3, r7, r5
 8005b30:	0018      	movs	r0, r3
 8005b32:	f7fd fdc1 	bl	80036b8 <getDateTime>
					alarmVars.alarmToSet->sec = t.sec;
 8005b36:	4b1a      	ldr	r3, [pc, #104]	; (8005ba0 <updateAlarmState+0x250>)
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	0021      	movs	r1, r4
 8005b3c:	187a      	adds	r2, r7, r1
 8005b3e:	7892      	ldrb	r2, [r2, #2]
 8005b40:	709a      	strb	r2, [r3, #2]
					alarmVars.alarmToSet->min = t.min;
 8005b42:	4b17      	ldr	r3, [pc, #92]	; (8005ba0 <updateAlarmState+0x250>)
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	187a      	adds	r2, r7, r1
 8005b48:	7852      	ldrb	r2, [r2, #1]
 8005b4a:	705a      	strb	r2, [r3, #1]
					alarmVars.alarmToSet->hr = t.hr;
 8005b4c:	4b14      	ldr	r3, [pc, #80]	; (8005ba0 <updateAlarmState+0x250>)
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	187a      	adds	r2, r7, r1
 8005b52:	7812      	ldrb	r2, [r2, #0]
 8005b54:	701a      	strb	r2, [r3, #0]
					alarmVars.alarmToSet->weekday = d.weekday;
 8005b56:	4b12      	ldr	r3, [pc, #72]	; (8005ba0 <updateAlarmState+0x250>)
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	197a      	adds	r2, r7, r5
 8005b5c:	7912      	ldrb	r2, [r2, #4]
 8005b5e:	70da      	strb	r2, [r3, #3]
			// stop and clear alarm hw
			alarmVars.isSet = 0;
			HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_A);
		}
	}
}
 8005b60:	e017      	b.n	8005b92 <updateAlarmState+0x242>
				alarmVars.isBeingSet = 0;
 8005b62:	4b0f      	ldr	r3, [pc, #60]	; (8005ba0 <updateAlarmState+0x250>)
 8005b64:	2200      	movs	r2, #0
 8005b66:	701a      	strb	r2, [r3, #0]
				alarmVars.isSet = 1;
 8005b68:	4b0d      	ldr	r3, [pc, #52]	; (8005ba0 <updateAlarmState+0x250>)
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	709a      	strb	r2, [r3, #2]
				setAlarm(alarmVars.alarmToSet, hrtc);
 8005b6e:	4b0c      	ldr	r3, [pc, #48]	; (8005ba0 <updateAlarmState+0x250>)
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	0011      	movs	r1, r2
 8005b76:	0018      	movs	r0, r3
 8005b78:	f7fd fb84 	bl	8003284 <setAlarm>
}
 8005b7c:	e009      	b.n	8005b92 <updateAlarmState+0x242>
			alarmVars.isSet = 0;
 8005b7e:	4b08      	ldr	r3, [pc, #32]	; (8005ba0 <updateAlarmState+0x250>)
 8005b80:	2200      	movs	r2, #0
 8005b82:	709a      	strb	r2, [r3, #2]
			HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_A);
 8005b84:	2380      	movs	r3, #128	; 0x80
 8005b86:	005a      	lsls	r2, r3, #1
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	0011      	movs	r1, r2
 8005b8c:	0018      	movs	r0, r3
 8005b8e:	f003 fd79 	bl	8009684 <HAL_RTC_DeactivateAlarm>
}
 8005b92:	46c0      	nop			; (mov r8, r8)
 8005b94:	46bd      	mov	sp, r7
 8005b96:	b006      	add	sp, #24
 8005b98:	bdb0      	pop	{r4, r5, r7, pc}
 8005b9a:	46c0      	nop			; (mov r8, r8)
 8005b9c:	2000018c 	.word	0x2000018c
 8005ba0:	20000120 	.word	0x20000120
 8005ba4:	20000140 	.word	0x20000140

08005ba8 <updateStopwatchState>:
 * in not running mode:
 *   button 2 starts stopwatch and moves to running mode
 *   button 3 captures stopwatch for lap
 *   button 4 clears stopwatch and returns to default mode
 */
void updateStopwatchState(TIM_HandleTypeDef *timerStopwatchTim) {
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
	// start/stop
	if (buttons.is2Pressed) {
 8005bb0:	4b28      	ldr	r3, [pc, #160]	; (8005c54 <updateStopwatchState+0xac>)
 8005bb2:	785b      	ldrb	r3, [r3, #1]
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d01c      	beq.n	8005bf4 <updateStopwatchState+0x4c>
		updateFace.stopwatch = 1;
 8005bba:	4b27      	ldr	r3, [pc, #156]	; (8005c58 <updateStopwatchState+0xb0>)
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	70da      	strb	r2, [r3, #3]

		if (isStopwatchRunning == 0) {
 8005bc0:	4b26      	ldr	r3, [pc, #152]	; (8005c5c <updateStopwatchState+0xb4>)
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d10a      	bne.n	8005be0 <updateStopwatchState+0x38>
			runStopwatch(timerStopwatchTim);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	0018      	movs	r0, r3
 8005bce:	f7ff f8c5 	bl	8004d5c <runStopwatch>
			isStopwatchRunning = 1;
 8005bd2:	4b22      	ldr	r3, [pc, #136]	; (8005c5c <updateStopwatchState+0xb4>)
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	701a      	strb	r2, [r3, #0]
			isStopwatchPaused = 0;
 8005bd8:	4b21      	ldr	r3, [pc, #132]	; (8005c60 <updateStopwatchState+0xb8>)
 8005bda:	2200      	movs	r2, #0
 8005bdc:	701a      	strb	r2, [r3, #0]
 8005bde:	e009      	b.n	8005bf4 <updateStopwatchState+0x4c>
		}
		else {
			pauseStopwatch(timerStopwatchTim);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	0018      	movs	r0, r3
 8005be4:	f7ff f920 	bl	8004e28 <pauseStopwatch>
			isStopwatchRunning = 0;
 8005be8:	4b1c      	ldr	r3, [pc, #112]	; (8005c5c <updateStopwatchState+0xb4>)
 8005bea:	2200      	movs	r2, #0
 8005bec:	701a      	strb	r2, [r3, #0]
			isStopwatchPaused = 1;
 8005bee:	4b1c      	ldr	r3, [pc, #112]	; (8005c60 <updateStopwatchState+0xb8>)
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	701a      	strb	r2, [r3, #0]
		}
	}
	if (buttons.is3Pressed && stopwatchCounter != 0) {
 8005bf4:	4b17      	ldr	r3, [pc, #92]	; (8005c54 <updateStopwatchState+0xac>)
 8005bf6:	789b      	ldrb	r3, [r3, #2]
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00e      	beq.n	8005c1c <updateStopwatchState+0x74>
 8005bfe:	4b19      	ldr	r3, [pc, #100]	; (8005c64 <updateStopwatchState+0xbc>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00a      	beq.n	8005c1c <updateStopwatchState+0x74>
		updateFace.stopwatch = 1;
 8005c06:	4b14      	ldr	r3, [pc, #80]	; (8005c58 <updateStopwatchState+0xb0>)
 8005c08:	2201      	movs	r2, #1
 8005c0a:	70da      	strb	r2, [r3, #3]

		// pull data and set lap
		stopwatchVars.lapPrev = stopwatchVars.lapCurrent;
 8005c0c:	4b16      	ldr	r3, [pc, #88]	; (8005c68 <updateStopwatchState+0xc0>)
 8005c0e:	685a      	ldr	r2, [r3, #4]
 8005c10:	4b15      	ldr	r3, [pc, #84]	; (8005c68 <updateStopwatchState+0xc0>)
 8005c12:	601a      	str	r2, [r3, #0]
		stopwatchVars.lapCurrent = stopwatchCounter;
 8005c14:	4b13      	ldr	r3, [pc, #76]	; (8005c64 <updateStopwatchState+0xbc>)
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	4b13      	ldr	r3, [pc, #76]	; (8005c68 <updateStopwatchState+0xc0>)
 8005c1a:	605a      	str	r2, [r3, #4]
	}
	if (buttons.is4Pressed) {
 8005c1c:	4b0d      	ldr	r3, [pc, #52]	; (8005c54 <updateStopwatchState+0xac>)
 8005c1e:	78db      	ldrb	r3, [r3, #3]
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d012      	beq.n	8005c4c <updateStopwatchState+0xa4>
		updateFace.stopwatch = 1;
 8005c26:	4b0c      	ldr	r3, [pc, #48]	; (8005c58 <updateStopwatchState+0xb0>)
 8005c28:	2201      	movs	r2, #1
 8005c2a:	70da      	strb	r2, [r3, #3]

		// clear stopwatch hw
		clearStopwatch(timerStopwatchTim);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	0018      	movs	r0, r3
 8005c30:	f7ff f90e 	bl	8004e50 <clearStopwatch>
		stopwatchVars.lapCurrent = 0;
 8005c34:	4b0c      	ldr	r3, [pc, #48]	; (8005c68 <updateStopwatchState+0xc0>)
 8005c36:	2200      	movs	r2, #0
 8005c38:	605a      	str	r2, [r3, #4]
		stopwatchVars.lapPrev = 0;
 8005c3a:	4b0b      	ldr	r3, [pc, #44]	; (8005c68 <updateStopwatchState+0xc0>)
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	601a      	str	r2, [r3, #0]
		isStopwatchRunning = 0;
 8005c40:	4b06      	ldr	r3, [pc, #24]	; (8005c5c <updateStopwatchState+0xb4>)
 8005c42:	2200      	movs	r2, #0
 8005c44:	701a      	strb	r2, [r3, #0]
		isStopwatchPaused = 0;
 8005c46:	4b06      	ldr	r3, [pc, #24]	; (8005c60 <updateStopwatchState+0xb8>)
 8005c48:	2200      	movs	r2, #0
 8005c4a:	701a      	strb	r2, [r3, #0]
	}
}
 8005c4c:	46c0      	nop			; (mov r8, r8)
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	b002      	add	sp, #8
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	2000018c 	.word	0x2000018c
 8005c58:	20000140 	.word	0x20000140
 8005c5c:	20000144 	.word	0x20000144
 8005c60:	20000191 	.word	0x20000191
 8005c64:	20000194 	.word	0x20000194
 8005c68:	20000128 	.word	0x20000128

08005c6c <updateDisplay>:

// primary function for making changes to display
void updateDisplay(RTC_HandleTypeDef *hrtc, SPI_HandleTypeDef *hspi) {
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b082      	sub	sp, #8
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
	// change faces
	if (isFaceBeingChanged == 1) {
 8005c76:	4b7a      	ldr	r3, [pc, #488]	; (8005e60 <updateDisplay+0x1f4>)
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d160      	bne.n	8005d40 <updateDisplay+0xd4>
		isFaceBeingChanged = 0;
 8005c7e:	4b78      	ldr	r3, [pc, #480]	; (8005e60 <updateDisplay+0x1f4>)
 8005c80:	2200      	movs	r2, #0
 8005c82:	701a      	strb	r2, [r3, #0]

		// drawing titles and boxes that won't be rewritten during normal operation within
		// a specific face (titles and buttons)
		if (faceOnDisplay == faceClock) {
 8005c84:	4b77      	ldr	r3, [pc, #476]	; (8005e64 <updateDisplay+0x1f8>)
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d10b      	bne.n	8005ca4 <updateDisplay+0x38>
			clearScreen(ST77XX_CYAN, hspi);
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	4a76      	ldr	r2, [pc, #472]	; (8005e68 <updateDisplay+0x1fc>)
 8005c90:	0019      	movs	r1, r3
 8005c92:	0010      	movs	r0, r2
 8005c94:	f7fc fc04 	bl	80024a0 <clearScreen>
			drawTitle("clock", hspi);
 8005c98:	683a      	ldr	r2, [r7, #0]
 8005c9a:	4b74      	ldr	r3, [pc, #464]	; (8005e6c <updateDisplay+0x200>)
 8005c9c:	0011      	movs	r1, r2
 8005c9e:	0018      	movs	r0, r3
 8005ca0:	f000 fc3a 	bl	8006518 <drawTitle>
		}
		if (faceOnDisplay == faceTimer) {
 8005ca4:	4b6f      	ldr	r3, [pc, #444]	; (8005e64 <updateDisplay+0x1f8>)
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d112      	bne.n	8005cd2 <updateDisplay+0x66>
			clearScreen(ST77XX_GREEN, hspi);
 8005cac:	683a      	ldr	r2, [r7, #0]
 8005cae:	23fc      	movs	r3, #252	; 0xfc
 8005cb0:	00db      	lsls	r3, r3, #3
 8005cb2:	0011      	movs	r1, r2
 8005cb4:	0018      	movs	r0, r3
 8005cb6:	f7fc fbf3 	bl	80024a0 <clearScreen>
			drawTopClock(hrtc, hspi);
 8005cba:	683a      	ldr	r2, [r7, #0]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	0011      	movs	r1, r2
 8005cc0:	0018      	movs	r0, r3
 8005cc2:	f000 fdd1 	bl	8006868 <drawTopClock>
			drawTitle("timer", hspi);
 8005cc6:	683a      	ldr	r2, [r7, #0]
 8005cc8:	4b69      	ldr	r3, [pc, #420]	; (8005e70 <updateDisplay+0x204>)
 8005cca:	0011      	movs	r1, r2
 8005ccc:	0018      	movs	r0, r3
 8005cce:	f000 fc23 	bl	8006518 <drawTitle>
		}
		if (faceOnDisplay == faceAlarm) {
 8005cd2:	4b64      	ldr	r3, [pc, #400]	; (8005e64 <updateDisplay+0x1f8>)
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d111      	bne.n	8005cfe <updateDisplay+0x92>
			clearScreen(ST77XX_MAGENTA, hspi);
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	4a65      	ldr	r2, [pc, #404]	; (8005e74 <updateDisplay+0x208>)
 8005cde:	0019      	movs	r1, r3
 8005ce0:	0010      	movs	r0, r2
 8005ce2:	f7fc fbdd 	bl	80024a0 <clearScreen>
			drawTopClock(hrtc, hspi);
 8005ce6:	683a      	ldr	r2, [r7, #0]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	0011      	movs	r1, r2
 8005cec:	0018      	movs	r0, r3
 8005cee:	f000 fdbb 	bl	8006868 <drawTopClock>
			drawTitle("alarm", hspi);
 8005cf2:	683a      	ldr	r2, [r7, #0]
 8005cf4:	4b60      	ldr	r3, [pc, #384]	; (8005e78 <updateDisplay+0x20c>)
 8005cf6:	0011      	movs	r1, r2
 8005cf8:	0018      	movs	r0, r3
 8005cfa:	f000 fc0d 	bl	8006518 <drawTitle>
		}
		if (faceOnDisplay == faceStopwatch) {
 8005cfe:	4b59      	ldr	r3, [pc, #356]	; (8005e64 <updateDisplay+0x1f8>)
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	2b03      	cmp	r3, #3
 8005d04:	d111      	bne.n	8005d2a <updateDisplay+0xbe>
			clearScreen(ST77XX_YELLOW, hspi);
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	4a5c      	ldr	r2, [pc, #368]	; (8005e7c <updateDisplay+0x210>)
 8005d0a:	0019      	movs	r1, r3
 8005d0c:	0010      	movs	r0, r2
 8005d0e:	f7fc fbc7 	bl	80024a0 <clearScreen>
			drawTopClock(hrtc, hspi);
 8005d12:	683a      	ldr	r2, [r7, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	0011      	movs	r1, r2
 8005d18:	0018      	movs	r0, r3
 8005d1a:	f000 fda5 	bl	8006868 <drawTopClock>
			drawTitle("stopwatch", hspi);
 8005d1e:	683a      	ldr	r2, [r7, #0]
 8005d20:	4b57      	ldr	r3, [pc, #348]	; (8005e80 <updateDisplay+0x214>)
 8005d22:	0011      	movs	r1, r2
 8005d24:	0018      	movs	r0, r3
 8005d26:	f000 fbf7 	bl	8006518 <drawTitle>
		}

		drawBattery(battPercentage, hspi);
 8005d2a:	4b56      	ldr	r3, [pc, #344]	; (8005e84 <updateDisplay+0x218>)
 8005d2c:	881b      	ldrh	r3, [r3, #0]
 8005d2e:	683a      	ldr	r2, [r7, #0]
 8005d30:	0011      	movs	r1, r2
 8005d32:	0018      	movs	r0, r3
 8005d34:	f000 fc64 	bl	8006600 <drawBattery>
		drawButtons(hspi);
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	0018      	movs	r0, r3
 8005d3c:	f000 fba6 	bl	800648c <drawButtons>
	}


	if (updateFace.clock || updateFace.timer || updateFace.alarm || updateFace.stopwatch) {
 8005d40:	4b51      	ldr	r3, [pc, #324]	; (8005e88 <updateDisplay+0x21c>)
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d10f      	bne.n	8005d6a <updateDisplay+0xfe>
 8005d4a:	4b4f      	ldr	r3, [pc, #316]	; (8005e88 <updateDisplay+0x21c>)
 8005d4c:	785b      	ldrb	r3, [r3, #1]
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d10a      	bne.n	8005d6a <updateDisplay+0xfe>
 8005d54:	4b4c      	ldr	r3, [pc, #304]	; (8005e88 <updateDisplay+0x21c>)
 8005d56:	789b      	ldrb	r3, [r3, #2]
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d105      	bne.n	8005d6a <updateDisplay+0xfe>
 8005d5e:	4b4a      	ldr	r3, [pc, #296]	; (8005e88 <updateDisplay+0x21c>)
 8005d60:	78db      	ldrb	r3, [r3, #3]
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d100      	bne.n	8005d6a <updateDisplay+0xfe>
 8005d68:	e076      	b.n	8005e58 <updateDisplay+0x1ec>
		// update clock face
		if (faceOnDisplay == faceClock) {
 8005d6a:	4b3e      	ldr	r3, [pc, #248]	; (8005e64 <updateDisplay+0x1f8>)
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d10f      	bne.n	8005d92 <updateDisplay+0x126>
			if (updateFace.clock == 1) {
 8005d72:	4b45      	ldr	r3, [pc, #276]	; (8005e88 <updateDisplay+0x21c>)
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d161      	bne.n	8005e40 <updateDisplay+0x1d4>
				setBackgroundColor(ST77XX_CYAN);
 8005d7c:	4b3a      	ldr	r3, [pc, #232]	; (8005e68 <updateDisplay+0x1fc>)
 8005d7e:	0018      	movs	r0, r3
 8005d80:	f7fd f8ce 	bl	8002f20 <setBackgroundColor>
				updateClockDisplay(hrtc, hspi);
 8005d84:	683a      	ldr	r2, [r7, #0]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	0011      	movs	r1, r2
 8005d8a:	0018      	movs	r0, r3
 8005d8c:	f000 f87e 	bl	8005e8c <updateClockDisplay>
 8005d90:	e056      	b.n	8005e40 <updateDisplay+0x1d4>
			}
		}
		// update timer face
		else if (faceOnDisplay == faceTimer) {
 8005d92:	4b34      	ldr	r3, [pc, #208]	; (8005e64 <updateDisplay+0x1f8>)
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d119      	bne.n	8005dce <updateDisplay+0x162>
			if (updateFace.timer == 1) {
 8005d9a:	4b3b      	ldr	r3, [pc, #236]	; (8005e88 <updateDisplay+0x21c>)
 8005d9c:	785b      	ldrb	r3, [r3, #1]
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d108      	bne.n	8005db6 <updateDisplay+0x14a>
				setBackgroundColor(ST77XX_GREEN);
 8005da4:	23fc      	movs	r3, #252	; 0xfc
 8005da6:	00db      	lsls	r3, r3, #3
 8005da8:	0018      	movs	r0, r3
 8005daa:	f7fd f8b9 	bl	8002f20 <setBackgroundColor>
				updateTimerDisplay(hspi);
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	0018      	movs	r0, r3
 8005db2:	f000 f915 	bl	8005fe0 <updateTimerDisplay>
			}
			if (updateFace.clock == 1) drawTopClock(hrtc, hspi);
 8005db6:	4b34      	ldr	r3, [pc, #208]	; (8005e88 <updateDisplay+0x21c>)
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d13f      	bne.n	8005e40 <updateDisplay+0x1d4>
 8005dc0:	683a      	ldr	r2, [r7, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	0011      	movs	r1, r2
 8005dc6:	0018      	movs	r0, r3
 8005dc8:	f000 fd4e 	bl	8006868 <drawTopClock>
 8005dcc:	e038      	b.n	8005e40 <updateDisplay+0x1d4>
		}
		// update alarm face
		else if (faceOnDisplay == faceAlarm) {
 8005dce:	4b25      	ldr	r3, [pc, #148]	; (8005e64 <updateDisplay+0x1f8>)
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	d118      	bne.n	8005e08 <updateDisplay+0x19c>
			if (updateFace.alarm == 1) {
 8005dd6:	4b2c      	ldr	r3, [pc, #176]	; (8005e88 <updateDisplay+0x21c>)
 8005dd8:	789b      	ldrb	r3, [r3, #2]
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d107      	bne.n	8005df0 <updateDisplay+0x184>
				setBackgroundColor(ST77XX_MAGENTA);
 8005de0:	4b24      	ldr	r3, [pc, #144]	; (8005e74 <updateDisplay+0x208>)
 8005de2:	0018      	movs	r0, r3
 8005de4:	f7fd f89c 	bl	8002f20 <setBackgroundColor>
				updateAlarmDisplay(hspi);
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	0018      	movs	r0, r3
 8005dec:	f000 f9f8 	bl	80061e0 <updateAlarmDisplay>
			}
			if (updateFace.clock == 1) drawTopClock(hrtc, hspi);
 8005df0:	4b25      	ldr	r3, [pc, #148]	; (8005e88 <updateDisplay+0x21c>)
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d122      	bne.n	8005e40 <updateDisplay+0x1d4>
 8005dfa:	683a      	ldr	r2, [r7, #0]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	0011      	movs	r1, r2
 8005e00:	0018      	movs	r0, r3
 8005e02:	f000 fd31 	bl	8006868 <drawTopClock>
 8005e06:	e01b      	b.n	8005e40 <updateDisplay+0x1d4>
		}
		// update stopwatch face
		else if (faceOnDisplay == faceStopwatch) {
 8005e08:	4b16      	ldr	r3, [pc, #88]	; (8005e64 <updateDisplay+0x1f8>)
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	2b03      	cmp	r3, #3
 8005e0e:	d117      	bne.n	8005e40 <updateDisplay+0x1d4>
			if (updateFace.stopwatch == 1) {
 8005e10:	4b1d      	ldr	r3, [pc, #116]	; (8005e88 <updateDisplay+0x21c>)
 8005e12:	78db      	ldrb	r3, [r3, #3]
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d107      	bne.n	8005e2a <updateDisplay+0x1be>
				setBackgroundColor(ST77XX_YELLOW);
 8005e1a:	4b18      	ldr	r3, [pc, #96]	; (8005e7c <updateDisplay+0x210>)
 8005e1c:	0018      	movs	r0, r3
 8005e1e:	f7fd f87f 	bl	8002f20 <setBackgroundColor>
				updateStopwatchDisplay(hspi);
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	0018      	movs	r0, r3
 8005e26:	f000 faa9 	bl	800637c <updateStopwatchDisplay>
			}
			if (updateFace.clock == 1) drawTopClock(hrtc, hspi);
 8005e2a:	4b17      	ldr	r3, [pc, #92]	; (8005e88 <updateDisplay+0x21c>)
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d105      	bne.n	8005e40 <updateDisplay+0x1d4>
 8005e34:	683a      	ldr	r2, [r7, #0]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	0011      	movs	r1, r2
 8005e3a:	0018      	movs	r0, r3
 8005e3c:	f000 fd14 	bl	8006868 <drawTopClock>
		}

		updateFace.clock = updateFace.timer = updateFace.alarm = updateFace.stopwatch = 0;
 8005e40:	2200      	movs	r2, #0
 8005e42:	4b11      	ldr	r3, [pc, #68]	; (8005e88 <updateDisplay+0x21c>)
 8005e44:	1c11      	adds	r1, r2, #0
 8005e46:	70d9      	strb	r1, [r3, #3]
 8005e48:	4b0f      	ldr	r3, [pc, #60]	; (8005e88 <updateDisplay+0x21c>)
 8005e4a:	1c11      	adds	r1, r2, #0
 8005e4c:	7099      	strb	r1, [r3, #2]
 8005e4e:	4b0e      	ldr	r3, [pc, #56]	; (8005e88 <updateDisplay+0x21c>)
 8005e50:	1c11      	adds	r1, r2, #0
 8005e52:	7059      	strb	r1, [r3, #1]
 8005e54:	4b0c      	ldr	r3, [pc, #48]	; (8005e88 <updateDisplay+0x21c>)
 8005e56:	701a      	strb	r2, [r3, #0]
	}
}
 8005e58:	46c0      	nop			; (mov r8, r8)
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	b002      	add	sp, #8
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	20000068 	.word	0x20000068
 8005e64:	20000130 	.word	0x20000130
 8005e68:	000007ff 	.word	0x000007ff
 8005e6c:	0800bcc8 	.word	0x0800bcc8
 8005e70:	0800bcd0 	.word	0x0800bcd0
 8005e74:	0000f81f 	.word	0x0000f81f
 8005e78:	0800bcd8 	.word	0x0800bcd8
 8005e7c:	0000ffe0 	.word	0x0000ffe0
 8005e80:	0800bce0 	.word	0x0800bce0
 8005e84:	2000013c 	.word	0x2000013c
 8005e88:	20000140 	.word	0x20000140

08005e8c <updateClockDisplay>:

// helper function for drawing all elements for clock display
void updateClockDisplay(RTC_HandleTypeDef *hrtc, SPI_HandleTypeDef *hspi) {
 8005e8c:	b5b0      	push	{r4, r5, r7, lr}
 8005e8e:	b088      	sub	sp, #32
 8005e90:	af02      	add	r7, sp, #8
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
	struct dates currentDate = {0};
 8005e96:	2310      	movs	r3, #16
 8005e98:	18fb      	adds	r3, r7, r3
 8005e9a:	0018      	movs	r0, r3
 8005e9c:	2306      	movs	r3, #6
 8005e9e:	001a      	movs	r2, r3
 8005ea0:	2100      	movs	r1, #0
 8005ea2:	f005 fa78 	bl	800b396 <memset>
	struct times currentTime = {0};
 8005ea6:	230c      	movs	r3, #12
 8005ea8:	18fb      	adds	r3, r7, r3
 8005eaa:	0018      	movs	r0, r3
 8005eac:	2303      	movs	r3, #3
 8005eae:	001a      	movs	r2, r3
 8005eb0:	2100      	movs	r1, #0
 8005eb2:	f005 fa70 	bl	800b396 <memset>

	setTextColor(ST77XX_BLACK);
 8005eb6:	2000      	movs	r0, #0
 8005eb8:	f7fd f86c 	bl	8002f94 <setTextColor>
	if (clockVars.isBeingSet == 0) {
 8005ebc:	4b3c      	ldr	r3, [pc, #240]	; (8005fb0 <updateClockDisplay+0x124>)
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d11c      	bne.n	8005efe <updateClockDisplay+0x72>
		getDateTime(&currentDate, &currentTime, hrtc);
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	240c      	movs	r4, #12
 8005ec8:	1939      	adds	r1, r7, r4
 8005eca:	2510      	movs	r5, #16
 8005ecc:	197b      	adds	r3, r7, r5
 8005ece:	0018      	movs	r0, r3
 8005ed0:	f7fd fbf2 	bl	80036b8 <getDateTime>
		drawClock(&currentDate, &currentTime, hspi);
 8005ed4:	683a      	ldr	r2, [r7, #0]
 8005ed6:	1939      	adds	r1, r7, r4
 8005ed8:	197b      	adds	r3, r7, r5
 8005eda:	0018      	movs	r0, r3
 8005edc:	f000 fc2a 	bl	8006734 <drawClock>

		setTextSize(1);
 8005ee0:	2001      	movs	r0, #1
 8005ee2:	f7fd f847 	bl	8002f74 <setTextSize>
		// clear line that says "setting ___"
		clearTextLine(44, hspi);
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	0019      	movs	r1, r3
 8005eea:	202c      	movs	r0, #44	; 0x2c
 8005eec:	f7fc fff8 	bl	8002ee0 <clearTextLine>

		// draw button text
		drawButtonText("", "", "set", hspi);
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	4a30      	ldr	r2, [pc, #192]	; (8005fb4 <updateClockDisplay+0x128>)
 8005ef4:	4930      	ldr	r1, [pc, #192]	; (8005fb8 <updateClockDisplay+0x12c>)
 8005ef6:	4830      	ldr	r0, [pc, #192]	; (8005fb8 <updateClockDisplay+0x12c>)
 8005ef8:	f000 fae2 	bl	80064c0 <drawButtonText>
			default: break;
		}

		drawClock(clockVars.dateToSet, clockVars.timeToSet, hspi);
	}
}
 8005efc:	e054      	b.n	8005fa8 <updateClockDisplay+0x11c>
	else if (clockVars.isBeingSet == 1) {
 8005efe:	4b2c      	ldr	r3, [pc, #176]	; (8005fb0 <updateClockDisplay+0x124>)
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d150      	bne.n	8005fa8 <updateClockDisplay+0x11c>
		if (clockVars.fieldBeingSet == 1) drawButtonText("up", "down", "change", hspi);
 8005f06:	4b2a      	ldr	r3, [pc, #168]	; (8005fb0 <updateClockDisplay+0x124>)
 8005f08:	785b      	ldrb	r3, [r3, #1]
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d105      	bne.n	8005f1a <updateClockDisplay+0x8e>
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	4a2a      	ldr	r2, [pc, #168]	; (8005fbc <updateClockDisplay+0x130>)
 8005f12:	492b      	ldr	r1, [pc, #172]	; (8005fc0 <updateClockDisplay+0x134>)
 8005f14:	482b      	ldr	r0, [pc, #172]	; (8005fc4 <updateClockDisplay+0x138>)
 8005f16:	f000 fad3 	bl	80064c0 <drawButtonText>
		setTextSize(1);
 8005f1a:	2001      	movs	r0, #1
 8005f1c:	f7fd f82a 	bl	8002f74 <setTextSize>
		switch (clockVars.fieldBeingSet) {
 8005f20:	4b23      	ldr	r3, [pc, #140]	; (8005fb0 <updateClockDisplay+0x124>)
 8005f22:	785b      	ldrb	r3, [r3, #1]
 8005f24:	2b05      	cmp	r3, #5
 8005f26:	d836      	bhi.n	8005f96 <updateClockDisplay+0x10a>
 8005f28:	009a      	lsls	r2, r3, #2
 8005f2a:	4b27      	ldr	r3, [pc, #156]	; (8005fc8 <updateClockDisplay+0x13c>)
 8005f2c:	18d3      	adds	r3, r2, r3
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	469f      	mov	pc, r3
			case 1:	drawCenteredTextWithPadding(WIDTH/2, 44, 17, "setting minute...", hspi); break;
 8005f32:	4a26      	ldr	r2, [pc, #152]	; (8005fcc <updateClockDisplay+0x140>)
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	9300      	str	r3, [sp, #0]
 8005f38:	0013      	movs	r3, r2
 8005f3a:	2211      	movs	r2, #17
 8005f3c:	212c      	movs	r1, #44	; 0x2c
 8005f3e:	2040      	movs	r0, #64	; 0x40
 8005f40:	f7fc fef6 	bl	8002d30 <drawCenteredTextWithPadding>
 8005f44:	e028      	b.n	8005f98 <updateClockDisplay+0x10c>
			case 2:	drawCenteredTextWithPadding(WIDTH/2, 44, 17, "setting hour...", hspi);	break;
 8005f46:	4a22      	ldr	r2, [pc, #136]	; (8005fd0 <updateClockDisplay+0x144>)
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	9300      	str	r3, [sp, #0]
 8005f4c:	0013      	movs	r3, r2
 8005f4e:	2211      	movs	r2, #17
 8005f50:	212c      	movs	r1, #44	; 0x2c
 8005f52:	2040      	movs	r0, #64	; 0x40
 8005f54:	f7fc feec 	bl	8002d30 <drawCenteredTextWithPadding>
 8005f58:	e01e      	b.n	8005f98 <updateClockDisplay+0x10c>
			case 3: drawCenteredTextWithPadding(WIDTH/2, 44, 17, "setting year...", hspi); break;
 8005f5a:	4a1e      	ldr	r2, [pc, #120]	; (8005fd4 <updateClockDisplay+0x148>)
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	9300      	str	r3, [sp, #0]
 8005f60:	0013      	movs	r3, r2
 8005f62:	2211      	movs	r2, #17
 8005f64:	212c      	movs	r1, #44	; 0x2c
 8005f66:	2040      	movs	r0, #64	; 0x40
 8005f68:	f7fc fee2 	bl	8002d30 <drawCenteredTextWithPadding>
 8005f6c:	e014      	b.n	8005f98 <updateClockDisplay+0x10c>
			case 4: drawCenteredTextWithPadding(WIDTH/2, 44, 17, "setting month...", hspi); break;
 8005f6e:	4a1a      	ldr	r2, [pc, #104]	; (8005fd8 <updateClockDisplay+0x14c>)
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	0013      	movs	r3, r2
 8005f76:	2211      	movs	r2, #17
 8005f78:	212c      	movs	r1, #44	; 0x2c
 8005f7a:	2040      	movs	r0, #64	; 0x40
 8005f7c:	f7fc fed8 	bl	8002d30 <drawCenteredTextWithPadding>
 8005f80:	e00a      	b.n	8005f98 <updateClockDisplay+0x10c>
			case 5: drawCenteredTextWithPadding(WIDTH/2, 44, 17, "setting date...", hspi); break;
 8005f82:	4a16      	ldr	r2, [pc, #88]	; (8005fdc <updateClockDisplay+0x150>)
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	9300      	str	r3, [sp, #0]
 8005f88:	0013      	movs	r3, r2
 8005f8a:	2211      	movs	r2, #17
 8005f8c:	212c      	movs	r1, #44	; 0x2c
 8005f8e:	2040      	movs	r0, #64	; 0x40
 8005f90:	f7fc fece 	bl	8002d30 <drawCenteredTextWithPadding>
 8005f94:	e000      	b.n	8005f98 <updateClockDisplay+0x10c>
			default: break;
 8005f96:	46c0      	nop			; (mov r8, r8)
		drawClock(clockVars.dateToSet, clockVars.timeToSet, hspi);
 8005f98:	4b05      	ldr	r3, [pc, #20]	; (8005fb0 <updateClockDisplay+0x124>)
 8005f9a:	6858      	ldr	r0, [r3, #4]
 8005f9c:	4b04      	ldr	r3, [pc, #16]	; (8005fb0 <updateClockDisplay+0x124>)
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	683a      	ldr	r2, [r7, #0]
 8005fa2:	0019      	movs	r1, r3
 8005fa4:	f000 fbc6 	bl	8006734 <drawClock>
}
 8005fa8:	46c0      	nop			; (mov r8, r8)
 8005faa:	46bd      	mov	sp, r7
 8005fac:	b006      	add	sp, #24
 8005fae:	bdb0      	pop	{r4, r5, r7, pc}
 8005fb0:	2000010c 	.word	0x2000010c
 8005fb4:	0800bcec 	.word	0x0800bcec
 8005fb8:	0800bc4c 	.word	0x0800bc4c
 8005fbc:	0800bcf0 	.word	0x0800bcf0
 8005fc0:	0800bcf8 	.word	0x0800bcf8
 8005fc4:	0800bd00 	.word	0x0800bd00
 8005fc8:	0800c7ec 	.word	0x0800c7ec
 8005fcc:	0800bd04 	.word	0x0800bd04
 8005fd0:	0800bd18 	.word	0x0800bd18
 8005fd4:	0800bd28 	.word	0x0800bd28
 8005fd8:	0800bd38 	.word	0x0800bd38
 8005fdc:	0800bd4c 	.word	0x0800bd4c

08005fe0 <updateTimerDisplay>:

// helper function for drawing all elements for timer display
void updateTimerDisplay(SPI_HandleTypeDef *hspi) {
 8005fe0:	b590      	push	{r4, r7, lr}
 8005fe2:	b087      	sub	sp, #28
 8005fe4:	af02      	add	r7, sp, #8
 8005fe6:	6078      	str	r0, [r7, #4]
	struct times currentTimer = {0};
 8005fe8:	230c      	movs	r3, #12
 8005fea:	18fb      	adds	r3, r7, r3
 8005fec:	0018      	movs	r0, r3
 8005fee:	2303      	movs	r3, #3
 8005ff0:	001a      	movs	r2, r3
 8005ff2:	2100      	movs	r1, #0
 8005ff4:	f005 f9cf 	bl	800b396 <memset>

	setTextColor(ST77XX_BLACK);
 8005ff8:	2000      	movs	r0, #0
 8005ffa:	f7fc ffcb 	bl	8002f94 <setTextColor>
	if (timerVars.isBeingSet == 0) {
 8005ffe:	4b64      	ldr	r3, [pc, #400]	; (8006190 <updateTimerDisplay+0x1b0>)
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d000      	beq.n	8006008 <updateTimerDisplay+0x28>
 8006006:	e087      	b.n	8006118 <updateTimerDisplay+0x138>
		if (timerVars.isSet == 0) {
 8006008:	4b61      	ldr	r3, [pc, #388]	; (8006190 <updateTimerDisplay+0x1b0>)
 800600a:	789b      	ldrb	r3, [r3, #2]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d11f      	bne.n	8006050 <updateTimerDisplay+0x70>
			setTextSize(2);
 8006010:	2002      	movs	r0, #2
 8006012:	f7fc ffaf 	bl	8002f74 <setTextSize>
			clearTextLine(68, hspi);	// clear timer time text
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	0019      	movs	r1, r3
 800601a:	2044      	movs	r0, #68	; 0x44
 800601c:	f7fc ff60 	bl	8002ee0 <clearTextLine>

			// write "timer unset"
			setTextSize(1);
 8006020:	2001      	movs	r0, #1
 8006022:	f7fc ffa7 	bl	8002f74 <setTextSize>
			clearTextLine(52, hspi);	// clear setting ___ text
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	0019      	movs	r1, r3
 800602a:	2034      	movs	r0, #52	; 0x34
 800602c:	f7fc ff58 	bl	8002ee0 <clearTextLine>
			drawCenteredTextWithPadding(WIDTH/2, 84, 12, "timer unset", hspi);
 8006030:	4a58      	ldr	r2, [pc, #352]	; (8006194 <updateTimerDisplay+0x1b4>)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	9300      	str	r3, [sp, #0]
 8006036:	0013      	movs	r3, r2
 8006038:	220c      	movs	r2, #12
 800603a:	2154      	movs	r1, #84	; 0x54
 800603c:	2040      	movs	r0, #64	; 0x40
 800603e:	f7fc fe77 	bl	8002d30 <drawCenteredTextWithPadding>

			// draw button text
			drawButtonText("", "", "set", hspi);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a54      	ldr	r2, [pc, #336]	; (8006198 <updateTimerDisplay+0x1b8>)
 8006046:	4955      	ldr	r1, [pc, #340]	; (800619c <updateTimerDisplay+0x1bc>)
 8006048:	4854      	ldr	r0, [pc, #336]	; (800619c <updateTimerDisplay+0x1bc>)
 800604a:	f000 fa39 	bl	80064c0 <drawButtonText>
			default: break;
		}

		drawTimer(timerVars.timeToSet, hspi);
	}
}
 800604e:	e09b      	b.n	8006188 <updateTimerDisplay+0x1a8>
		else if (isTimerDone == 0) {
 8006050:	4b53      	ldr	r3, [pc, #332]	; (80061a0 <updateTimerDisplay+0x1c0>)
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	b2db      	uxtb	r3, r3
 8006056:	2b00      	cmp	r3, #0
 8006058:	d143      	bne.n	80060e2 <updateTimerDisplay+0x102>
			secondsToTime(&currentTimer, timerCounter);
 800605a:	4b52      	ldr	r3, [pc, #328]	; (80061a4 <updateTimerDisplay+0x1c4>)
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	240c      	movs	r4, #12
 8006060:	193b      	adds	r3, r7, r4
 8006062:	0011      	movs	r1, r2
 8006064:	0018      	movs	r0, r3
 8006066:	f7fd fbe6 	bl	8003836 <secondsToTime>
			drawTimer(&currentTimer, hspi);
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	193b      	adds	r3, r7, r4
 800606e:	0011      	movs	r1, r2
 8006070:	0018      	movs	r0, r3
 8006072:	f000 fc5b 	bl	800692c <drawTimer>
			setTextSize(1);
 8006076:	2001      	movs	r0, #1
 8006078:	f7fc ff7c 	bl	8002f74 <setTextSize>
			clearTextLine(52, hspi);	// clear setting ___ text
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	0019      	movs	r1, r3
 8006080:	2034      	movs	r0, #52	; 0x34
 8006082:	f7fc ff2d 	bl	8002ee0 <clearTextLine>
			if (isTimerPaused == 1) {
 8006086:	4b48      	ldr	r3, [pc, #288]	; (80061a8 <updateTimerDisplay+0x1c8>)
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	b2db      	uxtb	r3, r3
 800608c:	2b01      	cmp	r3, #1
 800608e:	d109      	bne.n	80060a4 <updateTimerDisplay+0xc4>
				drawCenteredTextWithPadding(WIDTH/2, 84, 12, "timer paused", hspi);
 8006090:	4a46      	ldr	r2, [pc, #280]	; (80061ac <updateTimerDisplay+0x1cc>)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	9300      	str	r3, [sp, #0]
 8006096:	0013      	movs	r3, r2
 8006098:	220c      	movs	r2, #12
 800609a:	2154      	movs	r1, #84	; 0x54
 800609c:	2040      	movs	r0, #64	; 0x40
 800609e:	f7fc fe47 	bl	8002d30 <drawCenteredTextWithPadding>
 80060a2:	e017      	b.n	80060d4 <updateTimerDisplay+0xf4>
			else if (isTimerRunning == 0 && timerCounter != 0) {
 80060a4:	4b42      	ldr	r3, [pc, #264]	; (80061b0 <updateTimerDisplay+0x1d0>)
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d10d      	bne.n	80060ca <updateTimerDisplay+0xea>
 80060ae:	4b3d      	ldr	r3, [pc, #244]	; (80061a4 <updateTimerDisplay+0x1c4>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d009      	beq.n	80060ca <updateTimerDisplay+0xea>
				drawCenteredTextWithPadding(WIDTH/2, 84, 12, "timer set!", hspi);
 80060b6:	4a3f      	ldr	r2, [pc, #252]	; (80061b4 <updateTimerDisplay+0x1d4>)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	9300      	str	r3, [sp, #0]
 80060bc:	0013      	movs	r3, r2
 80060be:	220c      	movs	r2, #12
 80060c0:	2154      	movs	r1, #84	; 0x54
 80060c2:	2040      	movs	r0, #64	; 0x40
 80060c4:	f7fc fe34 	bl	8002d30 <drawCenteredTextWithPadding>
 80060c8:	e004      	b.n	80060d4 <updateTimerDisplay+0xf4>
				clearTextLine(84, hspi);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	0019      	movs	r1, r3
 80060ce:	2054      	movs	r0, #84	; 0x54
 80060d0:	f7fc ff06 	bl	8002ee0 <clearTextLine>
			drawButtonText("run", "pause", "clear", hspi);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a38      	ldr	r2, [pc, #224]	; (80061b8 <updateTimerDisplay+0x1d8>)
 80060d8:	4938      	ldr	r1, [pc, #224]	; (80061bc <updateTimerDisplay+0x1dc>)
 80060da:	4839      	ldr	r0, [pc, #228]	; (80061c0 <updateTimerDisplay+0x1e0>)
 80060dc:	f000 f9f0 	bl	80064c0 <drawButtonText>
}
 80060e0:	e052      	b.n	8006188 <updateTimerDisplay+0x1a8>
			secondsToTime(&currentTimer, timerCounter);
 80060e2:	4b30      	ldr	r3, [pc, #192]	; (80061a4 <updateTimerDisplay+0x1c4>)
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	240c      	movs	r4, #12
 80060e8:	193b      	adds	r3, r7, r4
 80060ea:	0011      	movs	r1, r2
 80060ec:	0018      	movs	r0, r3
 80060ee:	f7fd fba2 	bl	8003836 <secondsToTime>
			drawTimer(&currentTimer, hspi);
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	193b      	adds	r3, r7, r4
 80060f6:	0011      	movs	r1, r2
 80060f8:	0018      	movs	r0, r3
 80060fa:	f000 fc17 	bl	800692c <drawTimer>
			setTextSize(1);
 80060fe:	2001      	movs	r0, #1
 8006100:	f7fc ff38 	bl	8002f74 <setTextSize>
			drawCenteredTextWithPadding(WIDTH/2, 84, 12, "timer done!", hspi);
 8006104:	4a2f      	ldr	r2, [pc, #188]	; (80061c4 <updateTimerDisplay+0x1e4>)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	9300      	str	r3, [sp, #0]
 800610a:	0013      	movs	r3, r2
 800610c:	220c      	movs	r2, #12
 800610e:	2154      	movs	r1, #84	; 0x54
 8006110:	2040      	movs	r0, #64	; 0x40
 8006112:	f7fc fe0d 	bl	8002d30 <drawCenteredTextWithPadding>
}
 8006116:	e037      	b.n	8006188 <updateTimerDisplay+0x1a8>
	else if (timerVars.isBeingSet == 1) {
 8006118:	4b1d      	ldr	r3, [pc, #116]	; (8006190 <updateTimerDisplay+0x1b0>)
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	2b01      	cmp	r3, #1
 800611e:	d133      	bne.n	8006188 <updateTimerDisplay+0x1a8>
		drawButtonText("up", "down", "change", hspi);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a29      	ldr	r2, [pc, #164]	; (80061c8 <updateTimerDisplay+0x1e8>)
 8006124:	4929      	ldr	r1, [pc, #164]	; (80061cc <updateTimerDisplay+0x1ec>)
 8006126:	482a      	ldr	r0, [pc, #168]	; (80061d0 <updateTimerDisplay+0x1f0>)
 8006128:	f000 f9ca 	bl	80064c0 <drawButtonText>
		switch (timerVars.fieldBeingSet) {
 800612c:	4b18      	ldr	r3, [pc, #96]	; (8006190 <updateTimerDisplay+0x1b0>)
 800612e:	785b      	ldrb	r3, [r3, #1]
 8006130:	2b02      	cmp	r3, #2
 8006132:	d00e      	beq.n	8006152 <updateTimerDisplay+0x172>
 8006134:	2b03      	cmp	r3, #3
 8006136:	d016      	beq.n	8006166 <updateTimerDisplay+0x186>
 8006138:	2b01      	cmp	r3, #1
 800613a:	d000      	beq.n	800613e <updateTimerDisplay+0x15e>
			default: break;
 800613c:	e01d      	b.n	800617a <updateTimerDisplay+0x19a>
			case 1: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting second...", hspi); break;
 800613e:	4a25      	ldr	r2, [pc, #148]	; (80061d4 <updateTimerDisplay+0x1f4>)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	9300      	str	r3, [sp, #0]
 8006144:	0013      	movs	r3, r2
 8006146:	2211      	movs	r2, #17
 8006148:	2134      	movs	r1, #52	; 0x34
 800614a:	2040      	movs	r0, #64	; 0x40
 800614c:	f7fc fdf0 	bl	8002d30 <drawCenteredTextWithPadding>
 8006150:	e013      	b.n	800617a <updateTimerDisplay+0x19a>
			case 2: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting minute...", hspi); break;
 8006152:	4a21      	ldr	r2, [pc, #132]	; (80061d8 <updateTimerDisplay+0x1f8>)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	9300      	str	r3, [sp, #0]
 8006158:	0013      	movs	r3, r2
 800615a:	2211      	movs	r2, #17
 800615c:	2134      	movs	r1, #52	; 0x34
 800615e:	2040      	movs	r0, #64	; 0x40
 8006160:	f7fc fde6 	bl	8002d30 <drawCenteredTextWithPadding>
 8006164:	e009      	b.n	800617a <updateTimerDisplay+0x19a>
			case 3: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting hour...", hspi); break;
 8006166:	4a1d      	ldr	r2, [pc, #116]	; (80061dc <updateTimerDisplay+0x1fc>)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	9300      	str	r3, [sp, #0]
 800616c:	0013      	movs	r3, r2
 800616e:	2211      	movs	r2, #17
 8006170:	2134      	movs	r1, #52	; 0x34
 8006172:	2040      	movs	r0, #64	; 0x40
 8006174:	f7fc fddc 	bl	8002d30 <drawCenteredTextWithPadding>
 8006178:	46c0      	nop			; (mov r8, r8)
		drawTimer(timerVars.timeToSet, hspi);
 800617a:	4b05      	ldr	r3, [pc, #20]	; (8006190 <updateTimerDisplay+0x1b0>)
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	0011      	movs	r1, r2
 8006182:	0018      	movs	r0, r3
 8006184:	f000 fbd2 	bl	800692c <drawTimer>
}
 8006188:	46c0      	nop			; (mov r8, r8)
 800618a:	46bd      	mov	sp, r7
 800618c:	b005      	add	sp, #20
 800618e:	bd90      	pop	{r4, r7, pc}
 8006190:	20000118 	.word	0x20000118
 8006194:	0800bd5c 	.word	0x0800bd5c
 8006198:	0800bcec 	.word	0x0800bcec
 800619c:	0800bc4c 	.word	0x0800bc4c
 80061a0:	2000014c 	.word	0x2000014c
 80061a4:	20000148 	.word	0x20000148
 80061a8:	20000192 	.word	0x20000192
 80061ac:	0800bd68 	.word	0x0800bd68
 80061b0:	20000190 	.word	0x20000190
 80061b4:	0800bd78 	.word	0x0800bd78
 80061b8:	0800bd84 	.word	0x0800bd84
 80061bc:	0800bd8c 	.word	0x0800bd8c
 80061c0:	0800bd94 	.word	0x0800bd94
 80061c4:	0800bd98 	.word	0x0800bd98
 80061c8:	0800bcf0 	.word	0x0800bcf0
 80061cc:	0800bcf8 	.word	0x0800bcf8
 80061d0:	0800bd00 	.word	0x0800bd00
 80061d4:	0800bda4 	.word	0x0800bda4
 80061d8:	0800bd04 	.word	0x0800bd04
 80061dc:	0800bd18 	.word	0x0800bd18

080061e0 <updateAlarmDisplay>:

// helper function for drawing all elements for alarm display
void updateAlarmDisplay(SPI_HandleTypeDef *hspi) {
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af02      	add	r7, sp, #8
 80061e6:	6078      	str	r0, [r7, #4]
	setTextColor(ST77XX_BLACK);
 80061e8:	2000      	movs	r0, #0
 80061ea:	f7fc fed3 	bl	8002f94 <setTextColor>
	if (alarmVars.isBeingSet == 0) {
 80061ee:	4b54      	ldr	r3, [pc, #336]	; (8006340 <updateAlarmDisplay+0x160>)
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d157      	bne.n	80062a6 <updateAlarmDisplay+0xc6>
		setTextSize(1);
 80061f6:	2001      	movs	r0, #1
 80061f8:	f7fc febc 	bl	8002f74 <setTextSize>
		clearTextLine(52, hspi);	// clear "setting..." text
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	0019      	movs	r1, r3
 8006200:	2034      	movs	r0, #52	; 0x34
 8006202:	f7fc fe6d 	bl	8002ee0 <clearTextLine>
		clearTextLine(60, hspi);	// clear am/pm text
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	0019      	movs	r1, r3
 800620a:	203c      	movs	r0, #60	; 0x3c
 800620c:	f7fc fe68 	bl	8002ee0 <clearTextLine>
		if (alarmVars.isSet == 0) {
 8006210:	4b4b      	ldr	r3, [pc, #300]	; (8006340 <updateAlarmDisplay+0x160>)
 8006212:	789b      	ldrb	r3, [r3, #2]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d11a      	bne.n	800624e <updateAlarmDisplay+0x6e>
			setTextSize(3);
 8006218:	2003      	movs	r0, #3
 800621a:	f7fc feab 	bl	8002f74 <setTextSize>
			clearTextLine(68, hspi);	// clear alarm time text
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	0019      	movs	r1, r3
 8006222:	2044      	movs	r0, #68	; 0x44
 8006224:	f7fc fe5c 	bl	8002ee0 <clearTextLine>

			setTextSize(1);
 8006228:	2001      	movs	r0, #1
 800622a:	f7fc fea3 	bl	8002f74 <setTextSize>
			drawCenteredTextWithPadding(WIDTH/2, 100, 11, "alarm unset", hspi);
 800622e:	4a45      	ldr	r2, [pc, #276]	; (8006344 <updateAlarmDisplay+0x164>)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	9300      	str	r3, [sp, #0]
 8006234:	0013      	movs	r3, r2
 8006236:	220b      	movs	r2, #11
 8006238:	2164      	movs	r1, #100	; 0x64
 800623a:	2040      	movs	r0, #64	; 0x40
 800623c:	f7fc fd78 	bl	8002d30 <drawCenteredTextWithPadding>

			// draw button text
			drawButtonText("", "", "set", hspi);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a41      	ldr	r2, [pc, #260]	; (8006348 <updateAlarmDisplay+0x168>)
 8006244:	4941      	ldr	r1, [pc, #260]	; (800634c <updateAlarmDisplay+0x16c>)
 8006246:	4841      	ldr	r0, [pc, #260]	; (800634c <updateAlarmDisplay+0x16c>)
 8006248:	f000 f93a 	bl	80064c0 <drawButtonText>
		drawButtonText("up", "down", "change", hspi);

		// draw alarm
		drawAlarm(alarmVars.alarmToSet, hspi);
	}
}
 800624c:	e074      	b.n	8006338 <updateAlarmDisplay+0x158>
		else if (isAlarmDone == 0) {
 800624e:	4b40      	ldr	r3, [pc, #256]	; (8006350 <updateAlarmDisplay+0x170>)
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	b2db      	uxtb	r3, r3
 8006254:	2b00      	cmp	r3, #0
 8006256:	d119      	bne.n	800628c <updateAlarmDisplay+0xac>
			setTextSize(1);
 8006258:	2001      	movs	r0, #1
 800625a:	f7fc fe8b 	bl	8002f74 <setTextSize>
			drawCenteredTextWithPadding(WIDTH/2, 100, 11, "alarm set", hspi);
 800625e:	4a3d      	ldr	r2, [pc, #244]	; (8006354 <updateAlarmDisplay+0x174>)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	9300      	str	r3, [sp, #0]
 8006264:	0013      	movs	r3, r2
 8006266:	220b      	movs	r2, #11
 8006268:	2164      	movs	r1, #100	; 0x64
 800626a:	2040      	movs	r0, #64	; 0x40
 800626c:	f7fc fd60 	bl	8002d30 <drawCenteredTextWithPadding>
			drawAlarm(alarmVars.alarmToSet, hspi);
 8006270:	4b33      	ldr	r3, [pc, #204]	; (8006340 <updateAlarmDisplay+0x160>)
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	0011      	movs	r1, r2
 8006278:	0018      	movs	r0, r3
 800627a:	f000 fb7d 	bl	8006978 <drawAlarm>
			drawButtonText("", "", "clear", hspi);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a35      	ldr	r2, [pc, #212]	; (8006358 <updateAlarmDisplay+0x178>)
 8006282:	4932      	ldr	r1, [pc, #200]	; (800634c <updateAlarmDisplay+0x16c>)
 8006284:	4831      	ldr	r0, [pc, #196]	; (800634c <updateAlarmDisplay+0x16c>)
 8006286:	f000 f91b 	bl	80064c0 <drawButtonText>
}
 800628a:	e055      	b.n	8006338 <updateAlarmDisplay+0x158>
			setTextSize(1);
 800628c:	2001      	movs	r0, #1
 800628e:	f7fc fe71 	bl	8002f74 <setTextSize>
			drawCenteredTextWithPadding(WIDTH/2, 100, 11, "alarm done!", hspi);
 8006292:	4a32      	ldr	r2, [pc, #200]	; (800635c <updateAlarmDisplay+0x17c>)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	9300      	str	r3, [sp, #0]
 8006298:	0013      	movs	r3, r2
 800629a:	220b      	movs	r2, #11
 800629c:	2164      	movs	r1, #100	; 0x64
 800629e:	2040      	movs	r0, #64	; 0x40
 80062a0:	f7fc fd46 	bl	8002d30 <drawCenteredTextWithPadding>
}
 80062a4:	e048      	b.n	8006338 <updateAlarmDisplay+0x158>
	else if (alarmVars.isBeingSet == 1) {
 80062a6:	4b26      	ldr	r3, [pc, #152]	; (8006340 <updateAlarmDisplay+0x160>)
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d144      	bne.n	8006338 <updateAlarmDisplay+0x158>
		setTextSize(1);
 80062ae:	2001      	movs	r0, #1
 80062b0:	f7fc fe60 	bl	8002f74 <setTextSize>
		switch (alarmVars.fieldBeingSet) {
 80062b4:	4b22      	ldr	r3, [pc, #136]	; (8006340 <updateAlarmDisplay+0x160>)
 80062b6:	785b      	ldrb	r3, [r3, #1]
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	d012      	beq.n	80062e2 <updateAlarmDisplay+0x102>
 80062bc:	dc02      	bgt.n	80062c4 <updateAlarmDisplay+0xe4>
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d005      	beq.n	80062ce <updateAlarmDisplay+0xee>
			default: break;
 80062c2:	e02c      	b.n	800631e <updateAlarmDisplay+0x13e>
		switch (alarmVars.fieldBeingSet) {
 80062c4:	2b03      	cmp	r3, #3
 80062c6:	d016      	beq.n	80062f6 <updateAlarmDisplay+0x116>
 80062c8:	2b04      	cmp	r3, #4
 80062ca:	d01e      	beq.n	800630a <updateAlarmDisplay+0x12a>
			default: break;
 80062cc:	e027      	b.n	800631e <updateAlarmDisplay+0x13e>
			case 1: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting second...", hspi); break;
 80062ce:	4a24      	ldr	r2, [pc, #144]	; (8006360 <updateAlarmDisplay+0x180>)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	9300      	str	r3, [sp, #0]
 80062d4:	0013      	movs	r3, r2
 80062d6:	2211      	movs	r2, #17
 80062d8:	2134      	movs	r1, #52	; 0x34
 80062da:	2040      	movs	r0, #64	; 0x40
 80062dc:	f7fc fd28 	bl	8002d30 <drawCenteredTextWithPadding>
 80062e0:	e01d      	b.n	800631e <updateAlarmDisplay+0x13e>
			case 2: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting minute...", hspi); break;
 80062e2:	4a20      	ldr	r2, [pc, #128]	; (8006364 <updateAlarmDisplay+0x184>)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	9300      	str	r3, [sp, #0]
 80062e8:	0013      	movs	r3, r2
 80062ea:	2211      	movs	r2, #17
 80062ec:	2134      	movs	r1, #52	; 0x34
 80062ee:	2040      	movs	r0, #64	; 0x40
 80062f0:	f7fc fd1e 	bl	8002d30 <drawCenteredTextWithPadding>
 80062f4:	e013      	b.n	800631e <updateAlarmDisplay+0x13e>
			case 3: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting hour...", hspi); break;
 80062f6:	4a1c      	ldr	r2, [pc, #112]	; (8006368 <updateAlarmDisplay+0x188>)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	0013      	movs	r3, r2
 80062fe:	2211      	movs	r2, #17
 8006300:	2134      	movs	r1, #52	; 0x34
 8006302:	2040      	movs	r0, #64	; 0x40
 8006304:	f7fc fd14 	bl	8002d30 <drawCenteredTextWithPadding>
 8006308:	e009      	b.n	800631e <updateAlarmDisplay+0x13e>
			case 4: drawCenteredTextWithPadding(WIDTH/2, 52, 17, "setting day...", hspi); break;
 800630a:	4a18      	ldr	r2, [pc, #96]	; (800636c <updateAlarmDisplay+0x18c>)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	9300      	str	r3, [sp, #0]
 8006310:	0013      	movs	r3, r2
 8006312:	2211      	movs	r2, #17
 8006314:	2134      	movs	r1, #52	; 0x34
 8006316:	2040      	movs	r0, #64	; 0x40
 8006318:	f7fc fd0a 	bl	8002d30 <drawCenteredTextWithPadding>
 800631c:	46c0      	nop			; (mov r8, r8)
		drawButtonText("up", "down", "change", hspi);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a13      	ldr	r2, [pc, #76]	; (8006370 <updateAlarmDisplay+0x190>)
 8006322:	4914      	ldr	r1, [pc, #80]	; (8006374 <updateAlarmDisplay+0x194>)
 8006324:	4814      	ldr	r0, [pc, #80]	; (8006378 <updateAlarmDisplay+0x198>)
 8006326:	f000 f8cb 	bl	80064c0 <drawButtonText>
		drawAlarm(alarmVars.alarmToSet, hspi);
 800632a:	4b05      	ldr	r3, [pc, #20]	; (8006340 <updateAlarmDisplay+0x160>)
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	0011      	movs	r1, r2
 8006332:	0018      	movs	r0, r3
 8006334:	f000 fb20 	bl	8006978 <drawAlarm>
}
 8006338:	46c0      	nop			; (mov r8, r8)
 800633a:	46bd      	mov	sp, r7
 800633c:	b002      	add	sp, #8
 800633e:	bd80      	pop	{r7, pc}
 8006340:	20000120 	.word	0x20000120
 8006344:	0800bdb8 	.word	0x0800bdb8
 8006348:	0800bcec 	.word	0x0800bcec
 800634c:	0800bc4c 	.word	0x0800bc4c
 8006350:	2000013f 	.word	0x2000013f
 8006354:	0800bdc4 	.word	0x0800bdc4
 8006358:	0800bd84 	.word	0x0800bd84
 800635c:	0800bdd0 	.word	0x0800bdd0
 8006360:	0800bda4 	.word	0x0800bda4
 8006364:	0800bd04 	.word	0x0800bd04
 8006368:	0800bd18 	.word	0x0800bd18
 800636c:	0800bddc 	.word	0x0800bddc
 8006370:	0800bcf0 	.word	0x0800bcf0
 8006374:	0800bcf8 	.word	0x0800bcf8
 8006378:	0800bd00 	.word	0x0800bd00

0800637c <updateStopwatchDisplay>:

// helper function for drawing all elements for stopwatch display
void updateStopwatchDisplay(SPI_HandleTypeDef *hspi) {
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
	setTextColor(ST77XX_BLACK);
 8006384:	2000      	movs	r0, #0
 8006386:	f7fc fe05 	bl	8002f94 <setTextColor>
	drawStopwatch(stopwatchCounter, hspi);
 800638a:	4b16      	ldr	r3, [pc, #88]	; (80063e4 <updateStopwatchDisplay+0x68>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	0011      	movs	r1, r2
 8006392:	0018      	movs	r0, r3
 8006394:	f000 fb60 	bl	8006a58 <drawStopwatch>
	drawStopwatchLap(stopwatchVars.lapCurrent-stopwatchVars.lapPrev, hspi);
 8006398:	4b13      	ldr	r3, [pc, #76]	; (80063e8 <updateStopwatchDisplay+0x6c>)
 800639a:	685a      	ldr	r2, [r3, #4]
 800639c:	4b12      	ldr	r3, [pc, #72]	; (80063e8 <updateStopwatchDisplay+0x6c>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	0011      	movs	r1, r2
 80063a6:	0018      	movs	r0, r3
 80063a8:	f000 fb8e 	bl	8006ac8 <drawStopwatchLap>

	if (isStopwatchRunning == 0) drawButtonText("run", "lap", "clear", hspi);
 80063ac:	4b0f      	ldr	r3, [pc, #60]	; (80063ec <updateStopwatchDisplay+0x70>)
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d106      	bne.n	80063c4 <updateStopwatchDisplay+0x48>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a0d      	ldr	r2, [pc, #52]	; (80063f0 <updateStopwatchDisplay+0x74>)
 80063ba:	490e      	ldr	r1, [pc, #56]	; (80063f4 <updateStopwatchDisplay+0x78>)
 80063bc:	480e      	ldr	r0, [pc, #56]	; (80063f8 <updateStopwatchDisplay+0x7c>)
 80063be:	f000 f87f 	bl	80064c0 <drawButtonText>
	else if (isStopwatchRunning == 1) drawButtonText("pause", "lap", "clear", hspi);
}
 80063c2:	e00a      	b.n	80063da <updateStopwatchDisplay+0x5e>
	else if (isStopwatchRunning == 1) drawButtonText("pause", "lap", "clear", hspi);
 80063c4:	4b09      	ldr	r3, [pc, #36]	; (80063ec <updateStopwatchDisplay+0x70>)
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d105      	bne.n	80063da <updateStopwatchDisplay+0x5e>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4a07      	ldr	r2, [pc, #28]	; (80063f0 <updateStopwatchDisplay+0x74>)
 80063d2:	4908      	ldr	r1, [pc, #32]	; (80063f4 <updateStopwatchDisplay+0x78>)
 80063d4:	4809      	ldr	r0, [pc, #36]	; (80063fc <updateStopwatchDisplay+0x80>)
 80063d6:	f000 f873 	bl	80064c0 <drawButtonText>
}
 80063da:	46c0      	nop			; (mov r8, r8)
 80063dc:	46bd      	mov	sp, r7
 80063de:	b002      	add	sp, #8
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	46c0      	nop			; (mov r8, r8)
 80063e4:	20000194 	.word	0x20000194
 80063e8:	20000128 	.word	0x20000128
 80063ec:	20000144 	.word	0x20000144
 80063f0:	0800bd84 	.word	0x0800bd84
 80063f4:	0800bdec 	.word	0x0800bdec
 80063f8:	0800bd94 	.word	0x0800bd94
 80063fc:	0800bd8c 	.word	0x0800bd8c

08006400 <drawButton>:

// ---- drawing functions related specifically to the user interface ----
// draws a 10x10 box representing a button onto the screen
void drawButton(uint8_t x_center, uint8_t y_center, SPI_HandleTypeDef *hspi) {
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af02      	add	r7, sp, #8
 8006406:	603a      	str	r2, [r7, #0]
 8006408:	1dfb      	adds	r3, r7, #7
 800640a:	1c02      	adds	r2, r0, #0
 800640c:	701a      	strb	r2, [r3, #0]
 800640e:	1dbb      	adds	r3, r7, #6
 8006410:	1c0a      	adds	r2, r1, #0
 8006412:	701a      	strb	r2, [r3, #0]
	// bounds checking. probably already done in draw/fillRect
	if (x_center-5 < 0 || x_center+5 > WIDTH || y_center-5 < 0 || y_center+5 > HEIGHT) return;
 8006414:	1dfb      	adds	r3, r7, #7
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	3b05      	subs	r3, #5
 800641a:	2b00      	cmp	r3, #0
 800641c:	db2f      	blt.n	800647e <drawButton+0x7e>
 800641e:	1dfb      	adds	r3, r7, #7
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	3305      	adds	r3, #5
 8006424:	2b80      	cmp	r3, #128	; 0x80
 8006426:	dc2a      	bgt.n	800647e <drawButton+0x7e>
 8006428:	1dbb      	adds	r3, r7, #6
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	3b05      	subs	r3, #5
 800642e:	2b00      	cmp	r3, #0
 8006430:	db25      	blt.n	800647e <drawButton+0x7e>
 8006432:	1dbb      	adds	r3, r7, #6
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	3305      	adds	r3, #5
 8006438:	2ba0      	cmp	r3, #160	; 0xa0
 800643a:	dc20      	bgt.n	800647e <drawButton+0x7e>

	// draw rect size 8 with 1 pixel border
	// parameters give center position of graphic
	drawRect(x_center-5, y_center-5, 10, 10, ST77XX_BLACK, hspi);
 800643c:	1dfb      	adds	r3, r7, #7
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	3b05      	subs	r3, #5
 8006442:	b2d8      	uxtb	r0, r3
 8006444:	1dbb      	adds	r3, r7, #6
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	3b05      	subs	r3, #5
 800644a:	b2d9      	uxtb	r1, r3
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	9301      	str	r3, [sp, #4]
 8006450:	2300      	movs	r3, #0
 8006452:	9300      	str	r3, [sp, #0]
 8006454:	230a      	movs	r3, #10
 8006456:	220a      	movs	r2, #10
 8006458:	f7fb ff1b 	bl	8002292 <drawRect>
	fillRect(x_center-4, y_center-4, 8, 8, ST77XX_WHITE, hspi);
 800645c:	1dfb      	adds	r3, r7, #7
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	3b04      	subs	r3, #4
 8006462:	b2d8      	uxtb	r0, r3
 8006464:	1dbb      	adds	r3, r7, #6
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	3b04      	subs	r3, #4
 800646a:	b2d9      	uxtb	r1, r3
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	9301      	str	r3, [sp, #4]
 8006470:	4b05      	ldr	r3, [pc, #20]	; (8006488 <drawButton+0x88>)
 8006472:	9300      	str	r3, [sp, #0]
 8006474:	2308      	movs	r3, #8
 8006476:	2208      	movs	r2, #8
 8006478:	f7fb ff63 	bl	8002342 <fillRect>
 800647c:	e000      	b.n	8006480 <drawButton+0x80>
	if (x_center-5 < 0 || x_center+5 > WIDTH || y_center-5 < 0 || y_center+5 > HEIGHT) return;
 800647e:	46c0      	nop			; (mov r8, r8)
}
 8006480:	46bd      	mov	sp, r7
 8006482:	b002      	add	sp, #8
 8006484:	bd80      	pop	{r7, pc}
 8006486:	46c0      	nop			; (mov r8, r8)
 8006488:	0000ffff 	.word	0x0000ffff

0800648c <drawButtons>:

// draws 3 buttons to represent important ui buttons and tell the user their action
void drawButtons(SPI_HandleTypeDef *hspi) {
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
	// 3 buttons. positioned so their text boxes, which are centered over button, can have equal spacing left and right
	drawButton(22, HEIGHT-15, hspi);		// button 1
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	001a      	movs	r2, r3
 8006498:	2191      	movs	r1, #145	; 0x91
 800649a:	2016      	movs	r0, #22
 800649c:	f7ff ffb0 	bl	8006400 <drawButton>
	drawButton(64, HEIGHT-15, hspi);		// button 2
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	001a      	movs	r2, r3
 80064a4:	2191      	movs	r1, #145	; 0x91
 80064a6:	2040      	movs	r0, #64	; 0x40
 80064a8:	f7ff ffaa 	bl	8006400 <drawButton>
	drawButton(106, HEIGHT-15, hspi);		// button 3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	001a      	movs	r2, r3
 80064b0:	2191      	movs	r1, #145	; 0x91
 80064b2:	206a      	movs	r0, #106	; 0x6a
 80064b4:	f7ff ffa4 	bl	8006400 <drawButton>
}
 80064b8:	46c0      	nop			; (mov r8, r8)
 80064ba:	46bd      	mov	sp, r7
 80064bc:	b002      	add	sp, #8
 80064be:	bd80      	pop	{r7, pc}

080064c0 <drawButtonText>:

// draws text that goes a few pixels over the button
void drawButtonText(const char *str1, const char *str2, const char *str3, SPI_HandleTypeDef *hspi) {
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b086      	sub	sp, #24
 80064c4:	af02      	add	r7, sp, #8
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	607a      	str	r2, [r7, #4]
 80064cc:	603b      	str	r3, [r7, #0]
	setTextSize(1);
 80064ce:	2001      	movs	r0, #1
 80064d0:	f7fc fd50 	bl	8002f74 <setTextSize>
	setTextColor(ST77XX_BLACK);
 80064d4:	2000      	movs	r0, #0
 80064d6:	f7fc fd5d 	bl	8002f94 <setTextColor>
	drawCenteredTextWithPadding(22, HEIGHT-28, 7, str1, hspi);		// button 1
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	9300      	str	r3, [sp, #0]
 80064e0:	0013      	movs	r3, r2
 80064e2:	2207      	movs	r2, #7
 80064e4:	2184      	movs	r1, #132	; 0x84
 80064e6:	2016      	movs	r0, #22
 80064e8:	f7fc fc22 	bl	8002d30 <drawCenteredTextWithPadding>
	drawCenteredTextWithPadding(64, HEIGHT-28, 7, str2, hspi);		// button 2
 80064ec:	68ba      	ldr	r2, [r7, #8]
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	9300      	str	r3, [sp, #0]
 80064f2:	0013      	movs	r3, r2
 80064f4:	2207      	movs	r2, #7
 80064f6:	2184      	movs	r1, #132	; 0x84
 80064f8:	2040      	movs	r0, #64	; 0x40
 80064fa:	f7fc fc19 	bl	8002d30 <drawCenteredTextWithPadding>
	drawCenteredTextWithPadding(106, HEIGHT-28, 7, str3, hspi);		// button 3
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	9300      	str	r3, [sp, #0]
 8006504:	0013      	movs	r3, r2
 8006506:	2207      	movs	r2, #7
 8006508:	2184      	movs	r1, #132	; 0x84
 800650a:	206a      	movs	r0, #106	; 0x6a
 800650c:	f7fc fc10 	bl	8002d30 <drawCenteredTextWithPadding>
}
 8006510:	46c0      	nop			; (mov r8, r8)
 8006512:	46bd      	mov	sp, r7
 8006514:	b004      	add	sp, #16
 8006516:	bd80      	pop	{r7, pc}

08006518 <drawTitle>:

// draws big text on top of the display
void drawTitle(char *str, SPI_HandleTypeDef *hspi) {
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
	uint8_t strSize = strlen(str);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	0018      	movs	r0, r3
 8006526:	f7f9 fdef 	bl	8000108 <strlen>
 800652a:	0002      	movs	r2, r0
 800652c:	210f      	movs	r1, #15
 800652e:	187b      	adds	r3, r7, r1
 8006530:	701a      	strb	r2, [r3, #0]

	// drawing title
	// bounds checking
	if (12*strSize < WIDTH) {			// about string size = 10 for width = 128
 8006532:	187b      	adds	r3, r7, r1
 8006534:	781a      	ldrb	r2, [r3, #0]
 8006536:	0013      	movs	r3, r2
 8006538:	005b      	lsls	r3, r3, #1
 800653a:	189b      	adds	r3, r3, r2
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	2b7f      	cmp	r3, #127	; 0x7f
 8006540:	dc14      	bgt.n	800656c <drawTitle+0x54>
		setTextSize(2);
 8006542:	2002      	movs	r0, #2
 8006544:	f7fc fd16 	bl	8002f74 <setTextSize>
		setCursor((WIDTH-12*strSize)/2, 10);
 8006548:	230f      	movs	r3, #15
 800654a:	18fb      	adds	r3, r7, r3
 800654c:	781a      	ldrb	r2, [r3, #0]
 800654e:	0013      	movs	r3, r2
 8006550:	0092      	lsls	r2, r2, #2
 8006552:	1a9b      	subs	r3, r3, r2
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	3380      	adds	r3, #128	; 0x80
 8006558:	2b00      	cmp	r3, #0
 800655a:	da00      	bge.n	800655e <drawTitle+0x46>
 800655c:	3301      	adds	r3, #1
 800655e:	105b      	asrs	r3, r3, #1
 8006560:	b2db      	uxtb	r3, r3
 8006562:	210a      	movs	r1, #10
 8006564:	0018      	movs	r0, r3
 8006566:	f7fc fceb 	bl	8002f40 <setCursor>
 800656a:	e039      	b.n	80065e0 <drawTitle+0xc8>
	}
	else if (6*strSize < WIDTH) {		// about string size = 21 for width = 128
 800656c:	230f      	movs	r3, #15
 800656e:	18fb      	adds	r3, r7, r3
 8006570:	781a      	ldrb	r2, [r3, #0]
 8006572:	0013      	movs	r3, r2
 8006574:	005b      	lsls	r3, r3, #1
 8006576:	189b      	adds	r3, r3, r2
 8006578:	005b      	lsls	r3, r3, #1
 800657a:	2b7f      	cmp	r3, #127	; 0x7f
 800657c:	dc14      	bgt.n	80065a8 <drawTitle+0x90>
		setTextSize(1);
 800657e:	2001      	movs	r0, #1
 8006580:	f7fc fcf8 	bl	8002f74 <setTextSize>
		setCursor((WIDTH-6*strSize)/2, 10);
 8006584:	230f      	movs	r3, #15
 8006586:	18fb      	adds	r3, r7, r3
 8006588:	781a      	ldrb	r2, [r3, #0]
 800658a:	0013      	movs	r3, r2
 800658c:	0092      	lsls	r2, r2, #2
 800658e:	1a9b      	subs	r3, r3, r2
 8006590:	005b      	lsls	r3, r3, #1
 8006592:	3380      	adds	r3, #128	; 0x80
 8006594:	2b00      	cmp	r3, #0
 8006596:	da00      	bge.n	800659a <drawTitle+0x82>
 8006598:	3301      	adds	r3, #1
 800659a:	105b      	asrs	r3, r3, #1
 800659c:	b2db      	uxtb	r3, r3
 800659e:	210a      	movs	r1, #10
 80065a0:	0018      	movs	r0, r3
 80065a2:	f7fc fccd 	bl	8002f40 <setCursor>
 80065a6:	e01b      	b.n	80065e0 <drawTitle+0xc8>
	}
	else {
		setTextSize(1);
 80065a8:	2001      	movs	r0, #1
 80065aa:	f7fc fce3 	bl	8002f74 <setTextSize>
		sprintf(str, "it's too long");		// should not need to worry about null access, since this string is shorter than case above
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	4b12      	ldr	r3, [pc, #72]	; (80065fc <drawTitle+0xe4>)
 80065b2:	0010      	movs	r0, r2
 80065b4:	0019      	movs	r1, r3
 80065b6:	230e      	movs	r3, #14
 80065b8:	001a      	movs	r2, r3
 80065ba:	f004 fee3 	bl	800b384 <memcpy>
		setCursor((WIDTH-6*strSize)/2, 10);
 80065be:	230f      	movs	r3, #15
 80065c0:	18fb      	adds	r3, r7, r3
 80065c2:	781a      	ldrb	r2, [r3, #0]
 80065c4:	0013      	movs	r3, r2
 80065c6:	0092      	lsls	r2, r2, #2
 80065c8:	1a9b      	subs	r3, r3, r2
 80065ca:	005b      	lsls	r3, r3, #1
 80065cc:	3380      	adds	r3, #128	; 0x80
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	da00      	bge.n	80065d4 <drawTitle+0xbc>
 80065d2:	3301      	adds	r3, #1
 80065d4:	105b      	asrs	r3, r3, #1
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	210a      	movs	r1, #10
 80065da:	0018      	movs	r0, r3
 80065dc:	f7fc fcb0 	bl	8002f40 <setCursor>
	}

	setTextColor(ST77XX_BLACK);
 80065e0:	2000      	movs	r0, #0
 80065e2:	f7fc fcd7 	bl	8002f94 <setTextColor>
	drawText(str, hspi);
 80065e6:	683a      	ldr	r2, [r7, #0]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	0011      	movs	r1, r2
 80065ec:	0018      	movs	r0, r3
 80065ee:	f7fc fabf 	bl	8002b70 <drawText>
}
 80065f2:	46c0      	nop			; (mov r8, r8)
 80065f4:	46bd      	mov	sp, r7
 80065f6:	b004      	add	sp, #16
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	46c0      	nop			; (mov r8, r8)
 80065fc:	0800bdf0 	.word	0x0800bdf0

08006600 <drawBattery>:

// draws a battery graphic to represent current battery level
void drawBattery(uint16_t batteryLevel, SPI_HandleTypeDef *hspi) {
 8006600:	b590      	push	{r4, r7, lr}
 8006602:	b087      	sub	sp, #28
 8006604:	af02      	add	r7, sp, #8
 8006606:	0002      	movs	r2, r0
 8006608:	6039      	str	r1, [r7, #0]
 800660a:	1dbb      	adds	r3, r7, #6
 800660c:	801a      	strh	r2, [r3, #0]
	// doesn't move and is used on an empty screen, so shouldn't need to clear then print
	char str[5];

	// drawing battery symbol. hard coded to be 6x13, upper left corner on (49,26)
	drawVLine(49, 28, 10, ST77XX_BLACK, hspi);		// left col
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	9300      	str	r3, [sp, #0]
 8006612:	2300      	movs	r3, #0
 8006614:	220a      	movs	r2, #10
 8006616:	211c      	movs	r1, #28
 8006618:	2031      	movs	r0, #49	; 0x31
 800661a:	f7fb fd49 	bl	80020b0 <drawVLine>
	drawVLine(54, 28, 10, ST77XX_BLACK, hspi);		// right col
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	9300      	str	r3, [sp, #0]
 8006622:	2300      	movs	r3, #0
 8006624:	220a      	movs	r2, #10
 8006626:	211c      	movs	r1, #28
 8006628:	2036      	movs	r0, #54	; 0x36
 800662a:	f7fb fd41 	bl	80020b0 <drawVLine>
	drawHLine(50, 38, 4, ST77XX_BLACK, hspi);		// bottom
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	9300      	str	r3, [sp, #0]
 8006632:	2300      	movs	r3, #0
 8006634:	2204      	movs	r2, #4
 8006636:	2126      	movs	r1, #38	; 0x26
 8006638:	2032      	movs	r0, #50	; 0x32
 800663a:	f7fb fc93 	bl	8001f64 <drawHLine>
	drawHLine(50, 27, 4, ST77XX_BLACK, hspi);		// top bottom level
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	2300      	movs	r3, #0
 8006644:	2204      	movs	r2, #4
 8006646:	211b      	movs	r1, #27
 8006648:	2032      	movs	r0, #50	; 0x32
 800664a:	f7fb fc8b 	bl	8001f64 <drawHLine>
	drawHLine(51, 26, 2, ST77XX_BLACK, hspi);		// top upper level
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	9300      	str	r3, [sp, #0]
 8006652:	2300      	movs	r3, #0
 8006654:	2202      	movs	r2, #2
 8006656:	211a      	movs	r1, #26
 8006658:	2033      	movs	r0, #51	; 0x33
 800665a:	f7fb fc83 	bl	8001f64 <drawHLine>

	// start filling in green/red box depending on battery level
	uint16_t color = ST77XX_GREEN;
 800665e:	230e      	movs	r3, #14
 8006660:	18fb      	adds	r3, r7, r3
 8006662:	22fc      	movs	r2, #252	; 0xfc
 8006664:	00d2      	lsls	r2, r2, #3
 8006666:	801a      	strh	r2, [r3, #0]
	if (batteryLevel < 20) color = ST77XX_RED;
 8006668:	1dbb      	adds	r3, r7, #6
 800666a:	881b      	ldrh	r3, [r3, #0]
 800666c:	2b13      	cmp	r3, #19
 800666e:	d803      	bhi.n	8006678 <drawBattery+0x78>
 8006670:	230e      	movs	r3, #14
 8006672:	18fb      	adds	r3, r7, r3
 8006674:	4a2c      	ldr	r2, [pc, #176]	; (8006728 <drawBattery+0x128>)
 8006676:	801a      	strh	r2, [r3, #0]
	fillRect(50, 28+(100-batteryLevel)/10, 4, (batteryLevel+9)/10, color, hspi);	// +9 to avoid having to use float and round()
 8006678:	1dbb      	adds	r3, r7, #6
 800667a:	881b      	ldrh	r3, [r3, #0]
 800667c:	2264      	movs	r2, #100	; 0x64
 800667e:	1ad3      	subs	r3, r2, r3
 8006680:	210a      	movs	r1, #10
 8006682:	0018      	movs	r0, r3
 8006684:	f7f9 fdd2 	bl	800022c <__divsi3>
 8006688:	0003      	movs	r3, r0
 800668a:	b2db      	uxtb	r3, r3
 800668c:	331c      	adds	r3, #28
 800668e:	b2dc      	uxtb	r4, r3
 8006690:	1dbb      	adds	r3, r7, #6
 8006692:	881b      	ldrh	r3, [r3, #0]
 8006694:	3309      	adds	r3, #9
 8006696:	210a      	movs	r1, #10
 8006698:	0018      	movs	r0, r3
 800669a:	f7f9 fdc7 	bl	800022c <__divsi3>
 800669e:	0003      	movs	r3, r0
 80066a0:	b2da      	uxtb	r2, r3
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	9301      	str	r3, [sp, #4]
 80066a6:	230e      	movs	r3, #14
 80066a8:	18fb      	adds	r3, r7, r3
 80066aa:	881b      	ldrh	r3, [r3, #0]
 80066ac:	9300      	str	r3, [sp, #0]
 80066ae:	0013      	movs	r3, r2
 80066b0:	2204      	movs	r2, #4
 80066b2:	0021      	movs	r1, r4
 80066b4:	2032      	movs	r0, #50	; 0x32
 80066b6:	f7fb fe44 	bl	8002342 <fillRect>
	fillRect(50, 28, 4, (100-batteryLevel)/10, ST77XX_WHITE, hspi);
 80066ba:	1dbb      	adds	r3, r7, #6
 80066bc:	881b      	ldrh	r3, [r3, #0]
 80066be:	2264      	movs	r2, #100	; 0x64
 80066c0:	1ad3      	subs	r3, r2, r3
 80066c2:	210a      	movs	r1, #10
 80066c4:	0018      	movs	r0, r3
 80066c6:	f7f9 fdb1 	bl	800022c <__divsi3>
 80066ca:	0003      	movs	r3, r0
 80066cc:	b2da      	uxtb	r2, r3
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	9301      	str	r3, [sp, #4]
 80066d2:	4b16      	ldr	r3, [pc, #88]	; (800672c <drawBattery+0x12c>)
 80066d4:	9300      	str	r3, [sp, #0]
 80066d6:	0013      	movs	r3, r2
 80066d8:	2204      	movs	r2, #4
 80066da:	211c      	movs	r1, #28
 80066dc:	2032      	movs	r0, #50	; 0x32
 80066de:	f7fb fe30 	bl	8002342 <fillRect>

	// draw numerical text
	setTextSize(1);
 80066e2:	2001      	movs	r0, #1
 80066e4:	f7fc fc46 	bl	8002f74 <setTextSize>
	if (batteryLevel >= 20) color = ST77XX_BLACK;		// reusing variable for more obfuscated code.
 80066e8:	1dbb      	adds	r3, r7, #6
 80066ea:	881b      	ldrh	r3, [r3, #0]
 80066ec:	2b13      	cmp	r3, #19
 80066ee:	d903      	bls.n	80066f8 <drawBattery+0xf8>
 80066f0:	230e      	movs	r3, #14
 80066f2:	18fb      	adds	r3, r7, r3
 80066f4:	2200      	movs	r2, #0
 80066f6:	801a      	strh	r2, [r3, #0]
	setTextColor(color);
 80066f8:	230e      	movs	r3, #14
 80066fa:	18fb      	adds	r3, r7, r3
 80066fc:	881b      	ldrh	r3, [r3, #0]
 80066fe:	0018      	movs	r0, r3
 8006700:	f7fc fc48 	bl	8002f94 <setTextColor>
	sprintf(str, "%3d%%", batteryLevel);
 8006704:	1dbb      	adds	r3, r7, #6
 8006706:	881a      	ldrh	r2, [r3, #0]
 8006708:	4909      	ldr	r1, [pc, #36]	; (8006730 <drawBattery+0x130>)
 800670a:	2408      	movs	r4, #8
 800670c:	193b      	adds	r3, r7, r4
 800670e:	0018      	movs	r0, r3
 8006710:	f004 fec8 	bl	800b4a4 <siprintf>
	drawTextAt(55, 31, str, hspi);
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	193a      	adds	r2, r7, r4
 8006718:	211f      	movs	r1, #31
 800671a:	2037      	movs	r0, #55	; 0x37
 800671c:	f7fc fa5e 	bl	8002bdc <drawTextAt>
}
 8006720:	46c0      	nop			; (mov r8, r8)
 8006722:	46bd      	mov	sp, r7
 8006724:	b005      	add	sp, #20
 8006726:	bd90      	pop	{r4, r7, pc}
 8006728:	fffff800 	.word	0xfffff800
 800672c:	0000ffff 	.word	0x0000ffff
 8006730:	0800be00 	.word	0x0800be00

08006734 <drawClock>:

// draw time and date on screen
void drawClock(struct dates *d, struct times *t, SPI_HandleTypeDef *hspi) {
 8006734:	b5b0      	push	{r4, r5, r7, lr}
 8006736:	b090      	sub	sp, #64	; 0x40
 8006738:	af02      	add	r7, sp, #8
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	607a      	str	r2, [r7, #4]
	// notes on paper.
	char str[40];

	// no need to draw padding for those that always have the same length
	// drawing hr and min, 12-hr format
	if (t->hr % 12 == 0) sprintf(str, "%2d:%02d", 12, t->min);
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	210c      	movs	r1, #12
 8006746:	0018      	movs	r0, r3
 8006748:	f7f9 fd6c 	bl	8000224 <__aeabi_uidivmod>
 800674c:	000b      	movs	r3, r1
 800674e:	b2db      	uxtb	r3, r3
 8006750:	2b00      	cmp	r3, #0
 8006752:	d108      	bne.n	8006766 <drawClock+0x32>
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	785b      	ldrb	r3, [r3, #1]
 8006758:	493c      	ldr	r1, [pc, #240]	; (800684c <drawClock+0x118>)
 800675a:	2210      	movs	r2, #16
 800675c:	18b8      	adds	r0, r7, r2
 800675e:	220c      	movs	r2, #12
 8006760:	f004 fea0 	bl	800b4a4 <siprintf>
 8006764:	e00f      	b.n	8006786 <drawClock+0x52>
	else sprintf(str, "%2d:%02d", t->hr%12, t->min);
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	210c      	movs	r1, #12
 800676c:	0018      	movs	r0, r3
 800676e:	f7f9 fd59 	bl	8000224 <__aeabi_uidivmod>
 8006772:	000b      	movs	r3, r1
 8006774:	b2db      	uxtb	r3, r3
 8006776:	001a      	movs	r2, r3
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	785b      	ldrb	r3, [r3, #1]
 800677c:	4933      	ldr	r1, [pc, #204]	; (800684c <drawClock+0x118>)
 800677e:	2010      	movs	r0, #16
 8006780:	1838      	adds	r0, r7, r0
 8006782:	f004 fe8f 	bl	800b4a4 <siprintf>
	setTextSize(3);
 8006786:	2003      	movs	r0, #3
 8006788:	f7fc fbf4 	bl	8002f74 <setTextSize>
	setTextColor(ST77XX_BLACK);
 800678c:	2000      	movs	r0, #0
 800678e:	f7fc fc01 	bl	8002f94 <setTextColor>
	drawCenteredText(52, 60, str, hspi);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2410      	movs	r4, #16
 8006796:	193a      	adds	r2, r7, r4
 8006798:	213c      	movs	r1, #60	; 0x3c
 800679a:	2034      	movs	r0, #52	; 0x34
 800679c:	f7fc fa66 	bl	8002c6c <drawCenteredText>

	// drawing sec
	sprintf(str, "%02d", t->sec);
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	789b      	ldrb	r3, [r3, #2]
 80067a4:	001a      	movs	r2, r3
 80067a6:	492a      	ldr	r1, [pc, #168]	; (8006850 <drawClock+0x11c>)
 80067a8:	193b      	adds	r3, r7, r4
 80067aa:	0018      	movs	r0, r3
 80067ac:	f004 fe7a 	bl	800b4a4 <siprintf>
	setTextSize(2);
 80067b0:	2002      	movs	r0, #2
 80067b2:	f7fc fbdf 	bl	8002f74 <setTextSize>
	drawCenteredText(109, 68, str, hspi);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	193a      	adds	r2, r7, r4
 80067ba:	2144      	movs	r1, #68	; 0x44
 80067bc:	206d      	movs	r0, #109	; 0x6d
 80067be:	f7fc fa55 	bl	8002c6c <drawCenteredText>

	// drawing AM/PM text
	setTextSize(1);
 80067c2:	2001      	movs	r0, #1
 80067c4:	f7fc fbd6 	bl	8002f74 <setTextSize>
	if (t->hr < 12) drawCenteredText(103, 60, "AM", hspi);
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	2b0b      	cmp	r3, #11
 80067ce:	d806      	bhi.n	80067de <drawClock+0xaa>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a20      	ldr	r2, [pc, #128]	; (8006854 <drawClock+0x120>)
 80067d4:	213c      	movs	r1, #60	; 0x3c
 80067d6:	2067      	movs	r0, #103	; 0x67
 80067d8:	f7fc fa48 	bl	8002c6c <drawCenteredText>
 80067dc:	e005      	b.n	80067ea <drawClock+0xb6>
	else drawCenteredText(103, 60, "PM", hspi);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a1d      	ldr	r2, [pc, #116]	; (8006858 <drawClock+0x124>)
 80067e2:	213c      	movs	r1, #60	; 0x3c
 80067e4:	2067      	movs	r0, #103	; 0x67
 80067e6:	f7fc fa41 	bl	8002c6c <drawCenteredText>

	// drawing date
	setTextSize(1);
 80067ea:	2001      	movs	r0, #1
 80067ec:	f7fc fbc2 	bl	8002f74 <setTextSize>
	sprintf(str, "%s %d %04d", monthNames[d->month], d->date, d->yr);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	789b      	ldrb	r3, [r3, #2]
 80067f4:	001a      	movs	r2, r3
 80067f6:	4b19      	ldr	r3, [pc, #100]	; (800685c <drawClock+0x128>)
 80067f8:	0092      	lsls	r2, r2, #2
 80067fa:	58d2      	ldr	r2, [r2, r3]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	78db      	ldrb	r3, [r3, #3]
 8006800:	001c      	movs	r4, r3
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	881b      	ldrh	r3, [r3, #0]
 8006806:	4916      	ldr	r1, [pc, #88]	; (8006860 <drawClock+0x12c>)
 8006808:	2510      	movs	r5, #16
 800680a:	1978      	adds	r0, r7, r5
 800680c:	9300      	str	r3, [sp, #0]
 800680e:	0023      	movs	r3, r4
 8006810:	f004 fe48 	bl	800b4a4 <siprintf>
	drawCenteredTextWithPadding(WIDTH/2, 84, 11, str, hspi);
 8006814:	197a      	adds	r2, r7, r5
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	9300      	str	r3, [sp, #0]
 800681a:	0013      	movs	r3, r2
 800681c:	220b      	movs	r2, #11
 800681e:	2154      	movs	r1, #84	; 0x54
 8006820:	2040      	movs	r0, #64	; 0x40
 8006822:	f7fc fa85 	bl	8002d30 <drawCenteredTextWithPadding>

	// drawing weekday
	drawCenteredTextWithPadding(WIDTH/2, 92, 9, weekdayNames[d->weekday], hspi);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	791b      	ldrb	r3, [r3, #4]
 800682a:	001a      	movs	r2, r3
 800682c:	4b0d      	ldr	r3, [pc, #52]	; (8006864 <drawClock+0x130>)
 800682e:	0092      	lsls	r2, r2, #2
 8006830:	58d2      	ldr	r2, [r2, r3]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	9300      	str	r3, [sp, #0]
 8006836:	0013      	movs	r3, r2
 8006838:	2209      	movs	r2, #9
 800683a:	215c      	movs	r1, #92	; 0x5c
 800683c:	2040      	movs	r0, #64	; 0x40
 800683e:	f7fc fa77 	bl	8002d30 <drawCenteredTextWithPadding>
}
 8006842:	46c0      	nop			; (mov r8, r8)
 8006844:	46bd      	mov	sp, r7
 8006846:	b00e      	add	sp, #56	; 0x38
 8006848:	bdb0      	pop	{r4, r5, r7, pc}
 800684a:	46c0      	nop			; (mov r8, r8)
 800684c:	0800be08 	.word	0x0800be08
 8006850:	0800be14 	.word	0x0800be14
 8006854:	0800be1c 	.word	0x0800be1c
 8006858:	0800be20 	.word	0x0800be20
 800685c:	20000034 	.word	0x20000034
 8006860:	0800be24 	.word	0x0800be24
 8006864:	20000014 	.word	0x20000014

08006868 <drawTopClock>:

// drawing current time on top of screen when other faces are displayed
void drawTopClock(RTC_HandleTypeDef *hrtc, SPI_HandleTypeDef *hspi) {
 8006868:	b590      	push	{r4, r7, lr}
 800686a:	b08f      	sub	sp, #60	; 0x3c
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
	char str[40];
	struct times currentTime = {0};
 8006872:	240c      	movs	r4, #12
 8006874:	193b      	adds	r3, r7, r4
 8006876:	0018      	movs	r0, r3
 8006878:	2303      	movs	r3, #3
 800687a:	001a      	movs	r2, r3
 800687c:	2100      	movs	r1, #0
 800687e:	f004 fd8a 	bl	800b396 <memset>
	getTime(&currentTime, hrtc);
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	193b      	adds	r3, r7, r4
 8006886:	0011      	movs	r1, r2
 8006888:	0018      	movs	r0, r3
 800688a:	f7fc fef1 	bl	8003670 <getTime>

	if (currentTime.hr % 12 == 0) sprintf(str, "%2d:%02d", 12, currentTime.min);
 800688e:	193b      	adds	r3, r7, r4
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	210c      	movs	r1, #12
 8006894:	0018      	movs	r0, r3
 8006896:	f7f9 fcc5 	bl	8000224 <__aeabi_uidivmod>
 800689a:	000b      	movs	r3, r1
 800689c:	b2db      	uxtb	r3, r3
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d109      	bne.n	80068b6 <drawTopClock+0x4e>
 80068a2:	230c      	movs	r3, #12
 80068a4:	18fb      	adds	r3, r7, r3
 80068a6:	785b      	ldrb	r3, [r3, #1]
 80068a8:	491d      	ldr	r1, [pc, #116]	; (8006920 <drawTopClock+0xb8>)
 80068aa:	2210      	movs	r2, #16
 80068ac:	18b8      	adds	r0, r7, r2
 80068ae:	220c      	movs	r2, #12
 80068b0:	f004 fdf8 	bl	800b4a4 <siprintf>
 80068b4:	e010      	b.n	80068d8 <drawTopClock+0x70>
	else sprintf(str, "%2d:%02d", currentTime.hr%12, currentTime.min);
 80068b6:	240c      	movs	r4, #12
 80068b8:	193b      	adds	r3, r7, r4
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	210c      	movs	r1, #12
 80068be:	0018      	movs	r0, r3
 80068c0:	f7f9 fcb0 	bl	8000224 <__aeabi_uidivmod>
 80068c4:	000b      	movs	r3, r1
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	001a      	movs	r2, r3
 80068ca:	193b      	adds	r3, r7, r4
 80068cc:	785b      	ldrb	r3, [r3, #1]
 80068ce:	4914      	ldr	r1, [pc, #80]	; (8006920 <drawTopClock+0xb8>)
 80068d0:	2010      	movs	r0, #16
 80068d2:	1838      	adds	r0, r7, r0
 80068d4:	f004 fde6 	bl	800b4a4 <siprintf>
	setTextSize(1);
 80068d8:	2001      	movs	r0, #1
 80068da:	f7fc fb4b 	bl	8002f74 <setTextSize>
	setTextColor(ST77XX_BLACK);
 80068de:	2000      	movs	r0, #0
 80068e0:	f7fc fb58 	bl	8002f94 <setTextColor>
	drawTextAt(WIDTH/2-21, 1, str, hspi);
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	2210      	movs	r2, #16
 80068e8:	18ba      	adds	r2, r7, r2
 80068ea:	2101      	movs	r1, #1
 80068ec:	202b      	movs	r0, #43	; 0x2b
 80068ee:	f7fc f975 	bl	8002bdc <drawTextAt>

	if (currentTime.hr < 12) drawTextAt(WIDTH/2+9, 1, "AM", hspi);
 80068f2:	230c      	movs	r3, #12
 80068f4:	18fb      	adds	r3, r7, r3
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	2b0b      	cmp	r3, #11
 80068fa:	d806      	bhi.n	800690a <drawTopClock+0xa2>
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	4a09      	ldr	r2, [pc, #36]	; (8006924 <drawTopClock+0xbc>)
 8006900:	2101      	movs	r1, #1
 8006902:	2049      	movs	r0, #73	; 0x49
 8006904:	f7fc f96a 	bl	8002bdc <drawTextAt>
	else drawTextAt(WIDTH/2+9, 1, "PM", hspi);
}
 8006908:	e005      	b.n	8006916 <drawTopClock+0xae>
	else drawTextAt(WIDTH/2+9, 1, "PM", hspi);
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	4a06      	ldr	r2, [pc, #24]	; (8006928 <drawTopClock+0xc0>)
 800690e:	2101      	movs	r1, #1
 8006910:	2049      	movs	r0, #73	; 0x49
 8006912:	f7fc f963 	bl	8002bdc <drawTextAt>
}
 8006916:	46c0      	nop			; (mov r8, r8)
 8006918:	46bd      	mov	sp, r7
 800691a:	b00f      	add	sp, #60	; 0x3c
 800691c:	bd90      	pop	{r4, r7, pc}
 800691e:	46c0      	nop			; (mov r8, r8)
 8006920:	0800be08 	.word	0x0800be08
 8006924:	0800be1c 	.word	0x0800be1c
 8006928:	0800be20 	.word	0x0800be20

0800692c <drawTimer>:

// drawing timer on screen
void drawTimer(struct times *t, SPI_HandleTypeDef *hspi) {
 800692c:	b5b0      	push	{r4, r5, r7, lr}
 800692e:	b08e      	sub	sp, #56	; 0x38
 8006930:	af02      	add	r7, sp, #8
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
	char str[40];

	// only drawing hr:min:sec of timer
	setTextSize(2);
 8006936:	2002      	movs	r0, #2
 8006938:	f7fc fb1c 	bl	8002f74 <setTextSize>
	setTextColor(ST77XX_BLACK);
 800693c:	2000      	movs	r0, #0
 800693e:	f7fc fb29 	bl	8002f94 <setTextColor>
	sprintf(str, "%2d:%2d:%2d", t->hr, t->min, t->sec);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	001a      	movs	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	785b      	ldrb	r3, [r3, #1]
 800694c:	001c      	movs	r4, r3
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	789b      	ldrb	r3, [r3, #2]
 8006952:	4908      	ldr	r1, [pc, #32]	; (8006974 <drawTimer+0x48>)
 8006954:	2508      	movs	r5, #8
 8006956:	1978      	adds	r0, r7, r5
 8006958:	9300      	str	r3, [sp, #0]
 800695a:	0023      	movs	r3, r4
 800695c:	f004 fda2 	bl	800b4a4 <siprintf>
	drawCenteredText(WIDTH/2, HEIGHT/2-12, str, hspi);		// about y=68
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	197a      	adds	r2, r7, r5
 8006964:	2144      	movs	r1, #68	; 0x44
 8006966:	2040      	movs	r0, #64	; 0x40
 8006968:	f7fc f980 	bl	8002c6c <drawCenteredText>

	// leaving room to draw "timer set!/unset" text
}
 800696c:	46c0      	nop			; (mov r8, r8)
 800696e:	46bd      	mov	sp, r7
 8006970:	b00c      	add	sp, #48	; 0x30
 8006972:	bdb0      	pop	{r4, r5, r7, pc}
 8006974:	0800be30 	.word	0x0800be30

08006978 <drawAlarm>:

// drawing alarm on screen
void drawAlarm(struct alarmTimes *a, SPI_HandleTypeDef *hspi) {
 8006978:	b590      	push	{r4, r7, lr}
 800697a:	b08f      	sub	sp, #60	; 0x3c
 800697c:	af02      	add	r7, sp, #8
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
	char str[40];

	// drawing hr:min:sec
	setTextSize(2);
 8006982:	2002      	movs	r0, #2
 8006984:	f7fc faf6 	bl	8002f74 <setTextSize>
	setTextColor(ST77XX_BLACK);
 8006988:	2000      	movs	r0, #0
 800698a:	f7fc fb03 	bl	8002f94 <setTextColor>
	if (a->hr % 12 == 0) sprintf(str, "%2d:%2d:%2d", 12, a->min, a->sec);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	210c      	movs	r1, #12
 8006994:	0018      	movs	r0, r3
 8006996:	f7f9 fc45 	bl	8000224 <__aeabi_uidivmod>
 800699a:	000b      	movs	r3, r1
 800699c:	b2db      	uxtb	r3, r3
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d10d      	bne.n	80069be <drawAlarm+0x46>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	785b      	ldrb	r3, [r3, #1]
 80069a6:	001a      	movs	r2, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	789b      	ldrb	r3, [r3, #2]
 80069ac:	4926      	ldr	r1, [pc, #152]	; (8006a48 <drawAlarm+0xd0>)
 80069ae:	2008      	movs	r0, #8
 80069b0:	1838      	adds	r0, r7, r0
 80069b2:	9300      	str	r3, [sp, #0]
 80069b4:	0013      	movs	r3, r2
 80069b6:	220c      	movs	r2, #12
 80069b8:	f004 fd74 	bl	800b4a4 <siprintf>
 80069bc:	e014      	b.n	80069e8 <drawAlarm+0x70>
	else sprintf(str, "%2d:%2d:%2d", a->hr%12, a->min, a->sec);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	210c      	movs	r1, #12
 80069c4:	0018      	movs	r0, r3
 80069c6:	f7f9 fc2d 	bl	8000224 <__aeabi_uidivmod>
 80069ca:	000b      	movs	r3, r1
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	001a      	movs	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	785b      	ldrb	r3, [r3, #1]
 80069d4:	001c      	movs	r4, r3
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	789b      	ldrb	r3, [r3, #2]
 80069da:	491b      	ldr	r1, [pc, #108]	; (8006a48 <drawAlarm+0xd0>)
 80069dc:	2008      	movs	r0, #8
 80069de:	1838      	adds	r0, r7, r0
 80069e0:	9300      	str	r3, [sp, #0]
 80069e2:	0023      	movs	r3, r4
 80069e4:	f004 fd5e 	bl	800b4a4 <siprintf>
	drawCenteredText(WIDTH/2, 68, str, hspi);
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	2208      	movs	r2, #8
 80069ec:	18ba      	adds	r2, r7, r2
 80069ee:	2144      	movs	r1, #68	; 0x44
 80069f0:	2040      	movs	r0, #64	; 0x40
 80069f2:	f7fc f93b 	bl	8002c6c <drawCenteredText>

	setTextSize(1);
 80069f6:	2001      	movs	r0, #1
 80069f8:	f7fc fabc 	bl	8002f74 <setTextSize>
	if (a->hr < 12) drawCenteredText(100, 60, "AM", hspi);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	2b0b      	cmp	r3, #11
 8006a02:	d806      	bhi.n	8006a12 <drawAlarm+0x9a>
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	4a11      	ldr	r2, [pc, #68]	; (8006a4c <drawAlarm+0xd4>)
 8006a08:	213c      	movs	r1, #60	; 0x3c
 8006a0a:	2064      	movs	r0, #100	; 0x64
 8006a0c:	f7fc f92e 	bl	8002c6c <drawCenteredText>
 8006a10:	e005      	b.n	8006a1e <drawAlarm+0xa6>
	else drawCenteredText(100, 60, "PM", hspi);
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	4a0e      	ldr	r2, [pc, #56]	; (8006a50 <drawAlarm+0xd8>)
 8006a16:	213c      	movs	r1, #60	; 0x3c
 8006a18:	2064      	movs	r0, #100	; 0x64
 8006a1a:	f7fc f927 	bl	8002c6c <drawCenteredText>


	// drawing weekday
	setTextSize(1);
 8006a1e:	2001      	movs	r0, #1
 8006a20:	f7fc faa8 	bl	8002f74 <setTextSize>
	drawCenteredTextWithPadding(WIDTH/2, 84, 9, weekdayNames[a->weekday], hspi);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	78db      	ldrb	r3, [r3, #3]
 8006a28:	001a      	movs	r2, r3
 8006a2a:	4b0a      	ldr	r3, [pc, #40]	; (8006a54 <drawAlarm+0xdc>)
 8006a2c:	0092      	lsls	r2, r2, #2
 8006a2e:	58d2      	ldr	r2, [r2, r3]
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	9300      	str	r3, [sp, #0]
 8006a34:	0013      	movs	r3, r2
 8006a36:	2209      	movs	r2, #9
 8006a38:	2154      	movs	r1, #84	; 0x54
 8006a3a:	2040      	movs	r0, #64	; 0x40
 8006a3c:	f7fc f978 	bl	8002d30 <drawCenteredTextWithPadding>
}
 8006a40:	46c0      	nop			; (mov r8, r8)
 8006a42:	46bd      	mov	sp, r7
 8006a44:	b00d      	add	sp, #52	; 0x34
 8006a46:	bd90      	pop	{r4, r7, pc}
 8006a48:	0800be30 	.word	0x0800be30
 8006a4c:	0800be1c 	.word	0x0800be1c
 8006a50:	0800be20 	.word	0x0800be20
 8006a54:	20000014 	.word	0x20000014

08006a58 <drawStopwatch>:

// drawing stopwatch on screen
void drawStopwatch(uint32_t seconds, SPI_HandleTypeDef *hspi) {
 8006a58:	b5b0      	push	{r4, r5, r7, lr}
 8006a5a:	b090      	sub	sp, #64	; 0x40
 8006a5c:	af02      	add	r7, sp, #8
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
	struct times t = {0};
 8006a62:	2134      	movs	r1, #52	; 0x34
 8006a64:	000c      	movs	r4, r1
 8006a66:	187b      	adds	r3, r7, r1
 8006a68:	0018      	movs	r0, r3
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	001a      	movs	r2, r3
 8006a6e:	2100      	movs	r1, #0
 8006a70:	f004 fc91 	bl	800b396 <memset>
	char str[40];

	secondsToTime(&t, seconds);
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	0021      	movs	r1, r4
 8006a78:	000c      	movs	r4, r1
 8006a7a:	187b      	adds	r3, r7, r1
 8006a7c:	0011      	movs	r1, r2
 8006a7e:	0018      	movs	r0, r3
 8006a80:	f7fc fed9 	bl	8003836 <secondsToTime>

	// drawing hr:min:sec
	setTextSize(2);
 8006a84:	2002      	movs	r0, #2
 8006a86:	f7fc fa75 	bl	8002f74 <setTextSize>
	setTextColor(ST77XX_BLACK);
 8006a8a:	2000      	movs	r0, #0
 8006a8c:	f7fc fa82 	bl	8002f94 <setTextColor>
	sprintf(str, "%2d:%2d:%2d", t.hr, t.min, t.sec);
 8006a90:	0021      	movs	r1, r4
 8006a92:	187b      	adds	r3, r7, r1
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	001a      	movs	r2, r3
 8006a98:	187b      	adds	r3, r7, r1
 8006a9a:	785b      	ldrb	r3, [r3, #1]
 8006a9c:	001c      	movs	r4, r3
 8006a9e:	187b      	adds	r3, r7, r1
 8006aa0:	789b      	ldrb	r3, [r3, #2]
 8006aa2:	4908      	ldr	r1, [pc, #32]	; (8006ac4 <drawStopwatch+0x6c>)
 8006aa4:	250c      	movs	r5, #12
 8006aa6:	1978      	adds	r0, r7, r5
 8006aa8:	9300      	str	r3, [sp, #0]
 8006aaa:	0023      	movs	r3, r4
 8006aac:	f004 fcfa 	bl	800b4a4 <siprintf>
	drawCenteredText(WIDTH/2, 68, str, hspi);
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	197a      	adds	r2, r7, r5
 8006ab4:	2144      	movs	r1, #68	; 0x44
 8006ab6:	2040      	movs	r0, #64	; 0x40
 8006ab8:	f7fc f8d8 	bl	8002c6c <drawCenteredText>

	// leaving room for lap text
}
 8006abc:	46c0      	nop			; (mov r8, r8)
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	b00e      	add	sp, #56	; 0x38
 8006ac2:	bdb0      	pop	{r4, r5, r7, pc}
 8006ac4:	0800be30 	.word	0x0800be30

08006ac8 <drawStopwatchLap>:

// drawing lap text
void drawStopwatchLap(uint32_t seconds, SPI_HandleTypeDef *hspi) {
 8006ac8:	b5b0      	push	{r4, r5, r7, lr}
 8006aca:	b090      	sub	sp, #64	; 0x40
 8006acc:	af02      	add	r7, sp, #8
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]
	struct times t = {0};
 8006ad2:	2134      	movs	r1, #52	; 0x34
 8006ad4:	000c      	movs	r4, r1
 8006ad6:	187b      	adds	r3, r7, r1
 8006ad8:	0018      	movs	r0, r3
 8006ada:	2303      	movs	r3, #3
 8006adc:	001a      	movs	r2, r3
 8006ade:	2100      	movs	r1, #0
 8006ae0:	f004 fc59 	bl	800b396 <memset>
	char str[40];

	secondsToTime(&t, seconds);		// converting
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	0021      	movs	r1, r4
 8006ae8:	000c      	movs	r4, r1
 8006aea:	187b      	adds	r3, r7, r1
 8006aec:	0011      	movs	r1, r2
 8006aee:	0018      	movs	r0, r3
 8006af0:	f7fc fea1 	bl	8003836 <secondsToTime>

	// drawing hr:min:sec
	setTextSize(1);
 8006af4:	2001      	movs	r0, #1
 8006af6:	f7fc fa3d 	bl	8002f74 <setTextSize>
	setTextColor(ST77XX_BLACK);
 8006afa:	2000      	movs	r0, #0
 8006afc:	f7fc fa4a 	bl	8002f94 <setTextColor>
	sprintf(str, "lap: %2d:%2d:%2d", t.hr, t.min, t.sec);
 8006b00:	0021      	movs	r1, r4
 8006b02:	187b      	adds	r3, r7, r1
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	001a      	movs	r2, r3
 8006b08:	187b      	adds	r3, r7, r1
 8006b0a:	785b      	ldrb	r3, [r3, #1]
 8006b0c:	001c      	movs	r4, r3
 8006b0e:	187b      	adds	r3, r7, r1
 8006b10:	789b      	ldrb	r3, [r3, #2]
 8006b12:	4908      	ldr	r1, [pc, #32]	; (8006b34 <drawStopwatchLap+0x6c>)
 8006b14:	250c      	movs	r5, #12
 8006b16:	1978      	adds	r0, r7, r5
 8006b18:	9300      	str	r3, [sp, #0]
 8006b1a:	0023      	movs	r3, r4
 8006b1c:	f004 fcc2 	bl	800b4a4 <siprintf>
	drawCenteredText(WIDTH/2, 84, str, hspi);
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	197a      	adds	r2, r7, r5
 8006b24:	2154      	movs	r1, #84	; 0x54
 8006b26:	2040      	movs	r0, #64	; 0x40
 8006b28:	f7fc f8a0 	bl	8002c6c <drawCenteredText>
}
 8006b2c:	46c0      	nop			; (mov r8, r8)
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	b00e      	add	sp, #56	; 0x38
 8006b32:	bdb0      	pop	{r4, r5, r7, pc}
 8006b34:	0800be3c 	.word	0x0800be3c

08006b38 <initFace>:
// ---- end of drawing functions ----

// initializes variables. should be called at the start of program
void initFace() {
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	af00      	add	r7, sp, #0
	faceOnDisplay = faceClock;
 8006b3c:	4b14      	ldr	r3, [pc, #80]	; (8006b90 <initFace+0x58>)
 8006b3e:	2200      	movs	r2, #0
 8006b40:	701a      	strb	r2, [r3, #0]
	updateFace.clock = 1;
 8006b42:	4b14      	ldr	r3, [pc, #80]	; (8006b94 <initFace+0x5c>)
 8006b44:	2201      	movs	r2, #1
 8006b46:	701a      	strb	r2, [r3, #0]

	// initializing pointers
	clockVars.dateToSet = (struct dates *)calloc(1, sizeof(struct dates *));
 8006b48:	2104      	movs	r1, #4
 8006b4a:	2001      	movs	r0, #1
 8006b4c:	f004 fbe6 	bl	800b31c <calloc>
 8006b50:	0003      	movs	r3, r0
 8006b52:	001a      	movs	r2, r3
 8006b54:	4b10      	ldr	r3, [pc, #64]	; (8006b98 <initFace+0x60>)
 8006b56:	605a      	str	r2, [r3, #4]
	clockVars.timeToSet = (struct times *)calloc(1, sizeof(struct times *));
 8006b58:	2104      	movs	r1, #4
 8006b5a:	2001      	movs	r0, #1
 8006b5c:	f004 fbde 	bl	800b31c <calloc>
 8006b60:	0003      	movs	r3, r0
 8006b62:	001a      	movs	r2, r3
 8006b64:	4b0c      	ldr	r3, [pc, #48]	; (8006b98 <initFace+0x60>)
 8006b66:	609a      	str	r2, [r3, #8]
	timerVars.timeToSet = (struct times *)calloc(1, sizeof(struct times *));
 8006b68:	2104      	movs	r1, #4
 8006b6a:	2001      	movs	r0, #1
 8006b6c:	f004 fbd6 	bl	800b31c <calloc>
 8006b70:	0003      	movs	r3, r0
 8006b72:	001a      	movs	r2, r3
 8006b74:	4b09      	ldr	r3, [pc, #36]	; (8006b9c <initFace+0x64>)
 8006b76:	605a      	str	r2, [r3, #4]
	alarmVars.alarmToSet = (struct alarmTimes *)calloc(1, sizeof(struct alarmTimes *));
 8006b78:	2104      	movs	r1, #4
 8006b7a:	2001      	movs	r0, #1
 8006b7c:	f004 fbce 	bl	800b31c <calloc>
 8006b80:	0003      	movs	r3, r0
 8006b82:	001a      	movs	r2, r3
 8006b84:	4b06      	ldr	r3, [pc, #24]	; (8006ba0 <initFace+0x68>)
 8006b86:	605a      	str	r2, [r3, #4]
}
 8006b88:	46c0      	nop			; (mov r8, r8)
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	46c0      	nop			; (mov r8, r8)
 8006b90:	20000130 	.word	0x20000130
 8006b94:	20000140 	.word	0x20000140
 8006b98:	2000010c 	.word	0x2000010c
 8006b9c:	20000118 	.word	0x20000118
 8006ba0:	20000120 	.word	0x20000120

08006ba4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8006ba4:	480d      	ldr	r0, [pc, #52]	; (8006bdc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8006ba6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8006ba8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006baa:	e003      	b.n	8006bb4 <LoopCopyDataInit>

08006bac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006bac:	4b0c      	ldr	r3, [pc, #48]	; (8006be0 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8006bae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006bb0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006bb2:	3104      	adds	r1, #4

08006bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8006bb4:	480b      	ldr	r0, [pc, #44]	; (8006be4 <LoopForever+0xa>)
  ldr  r3, =_edata
 8006bb6:	4b0c      	ldr	r3, [pc, #48]	; (8006be8 <LoopForever+0xe>)
  adds  r2, r0, r1
 8006bb8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006bba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006bbc:	d3f6      	bcc.n	8006bac <CopyDataInit>
  ldr  r2, =_sbss
 8006bbe:	4a0b      	ldr	r2, [pc, #44]	; (8006bec <LoopForever+0x12>)
  b  LoopFillZerobss
 8006bc0:	e002      	b.n	8006bc8 <LoopFillZerobss>

08006bc2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8006bc2:	2300      	movs	r3, #0
  str  r3, [r2]
 8006bc4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006bc6:	3204      	adds	r2, #4

08006bc8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8006bc8:	4b09      	ldr	r3, [pc, #36]	; (8006bf0 <LoopForever+0x16>)
  cmp  r2, r3
 8006bca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006bcc:	d3f9      	bcc.n	8006bc2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8006bce:	f7fd ff21 	bl	8004a14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006bd2:	f004 fbb3 	bl	800b33c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006bd6:	f7fc ff1b 	bl	8003a10 <main>

08006bda <LoopForever>:

LoopForever:
    b LoopForever
 8006bda:	e7fe      	b.n	8006bda <LoopForever>
   ldr   r0, =_estack
 8006bdc:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8006be0:	0800c840 	.word	0x0800c840
  ldr  r0, =_sdata
 8006be4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006be8:	200000d0 	.word	0x200000d0
  ldr  r2, =_sbss
 8006bec:	200000d0 	.word	0x200000d0
  ldr  r3, = _ebss
 8006bf0:	200005dc 	.word	0x200005dc

08006bf4 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006bf4:	e7fe      	b.n	8006bf4 <DMA1_Channel1_IRQHandler>
	...

08006bf8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006bfe:	1dfb      	adds	r3, r7, #7
 8006c00:	2200      	movs	r2, #0
 8006c02:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8006c04:	4b0b      	ldr	r3, [pc, #44]	; (8006c34 <HAL_Init+0x3c>)
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	4b0a      	ldr	r3, [pc, #40]	; (8006c34 <HAL_Init+0x3c>)
 8006c0a:	2140      	movs	r1, #64	; 0x40
 8006c0c:	430a      	orrs	r2, r1
 8006c0e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006c10:	2000      	movs	r0, #0
 8006c12:	f000 f811 	bl	8006c38 <HAL_InitTick>
 8006c16:	1e03      	subs	r3, r0, #0
 8006c18:	d003      	beq.n	8006c22 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8006c1a:	1dfb      	adds	r3, r7, #7
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	701a      	strb	r2, [r3, #0]
 8006c20:	e001      	b.n	8006c26 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006c22:	f7fd fc9d 	bl	8004560 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006c26:	1dfb      	adds	r3, r7, #7
 8006c28:	781b      	ldrb	r3, [r3, #0]
}
 8006c2a:	0018      	movs	r0, r3
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	b002      	add	sp, #8
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	46c0      	nop			; (mov r8, r8)
 8006c34:	40022000 	.word	0x40022000

08006c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006c40:	230f      	movs	r3, #15
 8006c42:	18fb      	adds	r3, r7, r3
 8006c44:	2200      	movs	r2, #0
 8006c46:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8006c48:	4b0f      	ldr	r3, [pc, #60]	; (8006c88 <HAL_InitTick+0x50>)
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	23fa      	movs	r3, #250	; 0xfa
 8006c4e:	0099      	lsls	r1, r3, #2
 8006c50:	0010      	movs	r0, r2
 8006c52:	f7f9 fa61 	bl	8000118 <__udivsi3>
 8006c56:	0003      	movs	r3, r0
 8006c58:	0018      	movs	r0, r3
 8006c5a:	f000 fe9a 	bl	8007992 <HAL_SYSTICK_Config>
 8006c5e:	1e03      	subs	r3, r0, #0
 8006c60:	d004      	beq.n	8006c6c <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 8006c62:	230f      	movs	r3, #15
 8006c64:	18fb      	adds	r3, r7, r3
 8006c66:	2201      	movs	r2, #1
 8006c68:	701a      	strb	r2, [r3, #0]
 8006c6a:	e006      	b.n	8006c7a <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8006c6c:	6879      	ldr	r1, [r7, #4]
 8006c6e:	2301      	movs	r3, #1
 8006c70:	425b      	negs	r3, r3
 8006c72:	2200      	movs	r2, #0
 8006c74:	0018      	movs	r0, r3
 8006c76:	f000 fe57 	bl	8007928 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 8006c7a:	230f      	movs	r3, #15
 8006c7c:	18fb      	adds	r3, r7, r3
 8006c7e:	781b      	ldrb	r3, [r3, #0]
}
 8006c80:	0018      	movs	r0, r3
 8006c82:	46bd      	mov	sp, r7
 8006c84:	b004      	add	sp, #16
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	20000010 	.word	0x20000010

08006c8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	af00      	add	r7, sp, #0
  uwTick++;
 8006c90:	4b03      	ldr	r3, [pc, #12]	; (8006ca0 <HAL_IncTick+0x14>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	1c5a      	adds	r2, r3, #1
 8006c96:	4b02      	ldr	r3, [pc, #8]	; (8006ca0 <HAL_IncTick+0x14>)
 8006c98:	601a      	str	r2, [r3, #0]
}
 8006c9a:	46c0      	nop			; (mov r8, r8)
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	200005d4 	.word	0x200005d4

08006ca4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	af00      	add	r7, sp, #0
  return uwTick;
 8006ca8:	4b02      	ldr	r3, [pc, #8]	; (8006cb4 <HAL_GetTick+0x10>)
 8006caa:	681b      	ldr	r3, [r3, #0]
}
 8006cac:	0018      	movs	r0, r3
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	46c0      	nop			; (mov r8, r8)
 8006cb4:	200005d4 	.word	0x200005d4

08006cb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006cc0:	f7ff fff0 	bl	8006ca4 <HAL_GetTick>
 8006cc4:	0003      	movs	r3, r0
 8006cc6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	3301      	adds	r3, #1
 8006cd0:	d002      	beq.n	8006cd8 <HAL_Delay+0x20>
  {
    wait++;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006cd8:	46c0      	nop			; (mov r8, r8)
 8006cda:	f7ff ffe3 	bl	8006ca4 <HAL_GetTick>
 8006cde:	0002      	movs	r2, r0
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	1ad3      	subs	r3, r2, r3
 8006ce4:	68fa      	ldr	r2, [r7, #12]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d8f7      	bhi.n	8006cda <HAL_Delay+0x22>
  {
  }
}
 8006cea:	46c0      	nop			; (mov r8, r8)
 8006cec:	46bd      	mov	sp, r7
 8006cee:	b004      	add	sp, #16
 8006cf0:	bd80      	pop	{r7, pc}
	...

08006cf4 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b082      	sub	sp, #8
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d101      	bne.n	8006d06 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e159      	b.n	8006fba <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d10a      	bne.n	8006d24 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2250      	movs	r2, #80	; 0x50
 8006d18:	2100      	movs	r1, #0
 8006d1a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	0018      	movs	r0, r3
 8006d20:	f7fd fc32 	bl	8004588 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d28:	2210      	movs	r2, #16
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	2b10      	cmp	r3, #16
 8006d2e:	d005      	beq.n	8006d3c <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	2204      	movs	r2, #4
 8006d38:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8006d3a:	d00b      	beq.n	8006d54 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d40:	2210      	movs	r2, #16
 8006d42:	431a      	orrs	r2, r3
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2250      	movs	r2, #80	; 0x50
 8006d4c:	2100      	movs	r1, #0
 8006d4e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	e132      	b.n	8006fba <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d58:	4a9a      	ldr	r2, [pc, #616]	; (8006fc4 <HAL_ADC_Init+0x2d0>)
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	2202      	movs	r2, #2
 8006d5e:	431a      	orrs	r2, r3
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	2203      	movs	r2, #3
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d108      	bne.n	8006d84 <HAL_ADC_Init+0x90>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d101      	bne.n	8006d84 <HAL_ADC_Init+0x90>
 8006d80:	2301      	movs	r3, #1
 8006d82:	e000      	b.n	8006d86 <HAL_ADC_Init+0x92>
 8006d84:	2300      	movs	r3, #0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d149      	bne.n	8006e1e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	685a      	ldr	r2, [r3, #4]
 8006d8e:	23c0      	movs	r3, #192	; 0xc0
 8006d90:	061b      	lsls	r3, r3, #24
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d00b      	beq.n	8006dae <HAL_ADC_Init+0xba>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	685a      	ldr	r2, [r3, #4]
 8006d9a:	2380      	movs	r3, #128	; 0x80
 8006d9c:	05db      	lsls	r3, r3, #23
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d005      	beq.n	8006dae <HAL_ADC_Init+0xba>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	685a      	ldr	r2, [r3, #4]
 8006da6:	2380      	movs	r3, #128	; 0x80
 8006da8:	061b      	lsls	r3, r3, #24
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d111      	bne.n	8006dd2 <HAL_ADC_Init+0xde>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	691a      	ldr	r2, [r3, #16]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	0092      	lsls	r2, r2, #2
 8006dba:	0892      	lsrs	r2, r2, #2
 8006dbc:	611a      	str	r2, [r3, #16]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	6919      	ldr	r1, [r3, #16]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	685a      	ldr	r2, [r3, #4]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	430a      	orrs	r2, r1
 8006dce:	611a      	str	r2, [r3, #16]
 8006dd0:	e014      	b.n	8006dfc <HAL_ADC_Init+0x108>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	691a      	ldr	r2, [r3, #16]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	0092      	lsls	r2, r2, #2
 8006dde:	0892      	lsrs	r2, r2, #2
 8006de0:	611a      	str	r2, [r3, #16]
 8006de2:	4b79      	ldr	r3, [pc, #484]	; (8006fc8 <HAL_ADC_Init+0x2d4>)
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	4b78      	ldr	r3, [pc, #480]	; (8006fc8 <HAL_ADC_Init+0x2d4>)
 8006de8:	4978      	ldr	r1, [pc, #480]	; (8006fcc <HAL_ADC_Init+0x2d8>)
 8006dea:	400a      	ands	r2, r1
 8006dec:	601a      	str	r2, [r3, #0]
 8006dee:	4b76      	ldr	r3, [pc, #472]	; (8006fc8 <HAL_ADC_Init+0x2d4>)
 8006df0:	6819      	ldr	r1, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	685a      	ldr	r2, [r3, #4]
 8006df6:	4b74      	ldr	r3, [pc, #464]	; (8006fc8 <HAL_ADC_Init+0x2d4>)
 8006df8:	430a      	orrs	r2, r1
 8006dfa:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	68da      	ldr	r2, [r3, #12]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2118      	movs	r1, #24
 8006e08:	438a      	bics	r2, r1
 8006e0a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	68d9      	ldr	r1, [r3, #12]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	689a      	ldr	r2, [r3, #8]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	430a      	orrs	r2, r1
 8006e1c:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8006e1e:	4b6a      	ldr	r3, [pc, #424]	; (8006fc8 <HAL_ADC_Init+0x2d4>)
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	4b69      	ldr	r3, [pc, #420]	; (8006fc8 <HAL_ADC_Init+0x2d4>)
 8006e24:	496a      	ldr	r1, [pc, #424]	; (8006fd0 <HAL_ADC_Init+0x2dc>)
 8006e26:	400a      	ands	r2, r1
 8006e28:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8006e2a:	4b67      	ldr	r3, [pc, #412]	; (8006fc8 <HAL_ADC_Init+0x2d4>)
 8006e2c:	6819      	ldr	r1, [r3, #0]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e32:	065a      	lsls	r2, r3, #25
 8006e34:	4b64      	ldr	r3, [pc, #400]	; (8006fc8 <HAL_ADC_Init+0x2d4>)
 8006e36:	430a      	orrs	r2, r1
 8006e38:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	689a      	ldr	r2, [r3, #8]
 8006e40:	2380      	movs	r3, #128	; 0x80
 8006e42:	055b      	lsls	r3, r3, #21
 8006e44:	4013      	ands	r3, r2
 8006e46:	d108      	bne.n	8006e5a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	689a      	ldr	r2, [r3, #8]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	2180      	movs	r1, #128	; 0x80
 8006e54:	0549      	lsls	r1, r1, #21
 8006e56:	430a      	orrs	r2, r1
 8006e58:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	68da      	ldr	r2, [r3, #12]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	495b      	ldr	r1, [pc, #364]	; (8006fd4 <HAL_ADC_Init+0x2e0>)
 8006e66:	400a      	ands	r2, r1
 8006e68:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	68d9      	ldr	r1, [r3, #12]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	691b      	ldr	r3, [r3, #16]
 8006e78:	2b02      	cmp	r3, #2
 8006e7a:	d101      	bne.n	8006e80 <HAL_ADC_Init+0x18c>
 8006e7c:	2304      	movs	r3, #4
 8006e7e:	e000      	b.n	8006e82 <HAL_ADC_Init+0x18e>
 8006e80:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8006e82:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2020      	movs	r0, #32
 8006e88:	5c1b      	ldrb	r3, [r3, r0]
 8006e8a:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8006e8c:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	202c      	movs	r0, #44	; 0x2c
 8006e92:	5c1b      	ldrb	r3, [r3, r0]
 8006e94:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8006e96:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8006e9c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	699b      	ldr	r3, [r3, #24]
 8006ea2:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8006ea4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	69db      	ldr	r3, [r3, #28]
 8006eaa:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8006eac:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	430a      	orrs	r2, r1
 8006eb4:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006eba:	23c2      	movs	r3, #194	; 0xc2
 8006ebc:	33ff      	adds	r3, #255	; 0xff
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d00b      	beq.n	8006eda <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68d9      	ldr	r1, [r3, #12]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8006ed0:	431a      	orrs	r2, r3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	430a      	orrs	r2, r1
 8006ed8:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2221      	movs	r2, #33	; 0x21
 8006ede:	5c9b      	ldrb	r3, [r3, r2]
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d11a      	bne.n	8006f1a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2220      	movs	r2, #32
 8006ee8:	5c9b      	ldrb	r3, [r3, r2]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d109      	bne.n	8006f02 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68da      	ldr	r2, [r3, #12]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2180      	movs	r1, #128	; 0x80
 8006efa:	0249      	lsls	r1, r1, #9
 8006efc:	430a      	orrs	r2, r1
 8006efe:	60da      	str	r2, [r3, #12]
 8006f00:	e00b      	b.n	8006f1a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f06:	2220      	movs	r2, #32
 8006f08:	431a      	orrs	r2, r3
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f12:	2201      	movs	r2, #1
 8006f14:	431a      	orrs	r2, r3
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d11f      	bne.n	8006f62 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	691a      	ldr	r2, [r3, #16]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	492a      	ldr	r1, [pc, #168]	; (8006fd8 <HAL_ADC_Init+0x2e4>)
 8006f2e:	400a      	ands	r2, r1
 8006f30:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	6919      	ldr	r1, [r3, #16]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8006f40:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8006f46:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	430a      	orrs	r2, r1
 8006f4e:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	691a      	ldr	r2, [r3, #16]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2101      	movs	r1, #1
 8006f5c:	430a      	orrs	r2, r1
 8006f5e:	611a      	str	r2, [r3, #16]
 8006f60:	e00e      	b.n	8006f80 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	691b      	ldr	r3, [r3, #16]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d107      	bne.n	8006f80 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	691a      	ldr	r2, [r3, #16]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2101      	movs	r1, #1
 8006f7c:	438a      	bics	r2, r1
 8006f7e:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	695a      	ldr	r2, [r3, #20]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	2107      	movs	r1, #7
 8006f8c:	438a      	bics	r2, r1
 8006f8e:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	6959      	ldr	r1, [r3, #20]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	430a      	orrs	r2, r1
 8006fa0:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fac:	2203      	movs	r2, #3
 8006fae:	4393      	bics	r3, r2
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	431a      	orrs	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	0018      	movs	r0, r3
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	b002      	add	sp, #8
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	46c0      	nop			; (mov r8, r8)
 8006fc4:	fffffefd 	.word	0xfffffefd
 8006fc8:	40012708 	.word	0x40012708
 8006fcc:	ffc3ffff 	.word	0xffc3ffff
 8006fd0:	fdffffff 	.word	0xfdffffff
 8006fd4:	fffe0219 	.word	0xfffe0219
 8006fd8:	fffffc03 	.word	0xfffffc03

08006fdc <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006fdc:	b590      	push	{r4, r7, lr}
 8006fde:	b085      	sub	sp, #20
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006fe4:	230f      	movs	r3, #15
 8006fe6:	18fb      	adds	r3, r7, r3
 8006fe8:	2200      	movs	r2, #0
 8006fea:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	2204      	movs	r2, #4
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	d138      	bne.n	800706a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2250      	movs	r2, #80	; 0x50
 8006ffc:	5c9b      	ldrb	r3, [r3, r2]
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d101      	bne.n	8007006 <HAL_ADC_Start+0x2a>
 8007002:	2302      	movs	r3, #2
 8007004:	e038      	b.n	8007078 <HAL_ADC_Start+0x9c>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2250      	movs	r2, #80	; 0x50
 800700a:	2101      	movs	r1, #1
 800700c:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	69db      	ldr	r3, [r3, #28]
 8007012:	2b01      	cmp	r3, #1
 8007014:	d007      	beq.n	8007026 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8007016:	230f      	movs	r3, #15
 8007018:	18fc      	adds	r4, r7, r3
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	0018      	movs	r0, r3
 800701e:	f000 fa87 	bl	8007530 <ADC_Enable>
 8007022:	0003      	movs	r3, r0
 8007024:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8007026:	230f      	movs	r3, #15
 8007028:	18fb      	adds	r3, r7, r3
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d120      	bne.n	8007072 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007034:	4a12      	ldr	r2, [pc, #72]	; (8007080 <HAL_ADC_Start+0xa4>)
 8007036:	4013      	ands	r3, r2
 8007038:	2280      	movs	r2, #128	; 0x80
 800703a:	0052      	lsls	r2, r2, #1
 800703c:	431a      	orrs	r2, r3
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2250      	movs	r2, #80	; 0x50
 800704c:	2100      	movs	r1, #0
 800704e:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	221c      	movs	r2, #28
 8007056:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	689a      	ldr	r2, [r3, #8]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	2104      	movs	r1, #4
 8007064:	430a      	orrs	r2, r1
 8007066:	609a      	str	r2, [r3, #8]
 8007068:	e003      	b.n	8007072 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800706a:	230f      	movs	r3, #15
 800706c:	18fb      	adds	r3, r7, r3
 800706e:	2202      	movs	r2, #2
 8007070:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8007072:	230f      	movs	r3, #15
 8007074:	18fb      	adds	r3, r7, r3
 8007076:	781b      	ldrb	r3, [r3, #0]
}
 8007078:	0018      	movs	r0, r3
 800707a:	46bd      	mov	sp, r7
 800707c:	b005      	add	sp, #20
 800707e:	bd90      	pop	{r4, r7, pc}
 8007080:	fffff0fe 	.word	0xfffff0fe

08007084 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8007084:	b5b0      	push	{r4, r5, r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800708c:	230f      	movs	r3, #15
 800708e:	18fb      	adds	r3, r7, r3
 8007090:	2200      	movs	r2, #0
 8007092:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2250      	movs	r2, #80	; 0x50
 8007098:	5c9b      	ldrb	r3, [r3, r2]
 800709a:	2b01      	cmp	r3, #1
 800709c:	d101      	bne.n	80070a2 <HAL_ADC_Stop+0x1e>
 800709e:	2302      	movs	r3, #2
 80070a0:	e02a      	b.n	80070f8 <HAL_ADC_Stop+0x74>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2250      	movs	r2, #80	; 0x50
 80070a6:	2101      	movs	r1, #1
 80070a8:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80070aa:	250f      	movs	r5, #15
 80070ac:	197c      	adds	r4, r7, r5
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	0018      	movs	r0, r3
 80070b2:	f000 fafd 	bl	80076b0 <ADC_ConversionStop>
 80070b6:	0003      	movs	r3, r0
 80070b8:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80070ba:	197b      	adds	r3, r7, r5
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d113      	bne.n	80070ea <HAL_ADC_Stop+0x66>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80070c2:	250f      	movs	r5, #15
 80070c4:	197c      	adds	r4, r7, r5
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	0018      	movs	r0, r3
 80070ca:	f000 fa91 	bl	80075f0 <ADC_Disable>
 80070ce:	0003      	movs	r3, r0
 80070d0:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80070d2:	197b      	adds	r3, r7, r5
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d107      	bne.n	80070ea <HAL_ADC_Stop+0x66>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070de:	4a08      	ldr	r2, [pc, #32]	; (8007100 <HAL_ADC_Stop+0x7c>)
 80070e0:	4013      	ands	r3, r2
 80070e2:	2201      	movs	r2, #1
 80070e4:	431a      	orrs	r2, r3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2250      	movs	r2, #80	; 0x50
 80070ee:	2100      	movs	r1, #0
 80070f0:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80070f2:	230f      	movs	r3, #15
 80070f4:	18fb      	adds	r3, r7, r3
 80070f6:	781b      	ldrb	r3, [r3, #0]
}
 80070f8:	0018      	movs	r0, r3
 80070fa:	46bd      	mov	sp, r7
 80070fc:	b004      	add	sp, #16
 80070fe:	bdb0      	pop	{r4, r5, r7, pc}
 8007100:	fffffefe 	.word	0xfffffefe

08007104 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800710e:	2300      	movs	r3, #0
 8007110:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8007112:	2300      	movs	r3, #0
 8007114:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	695b      	ldr	r3, [r3, #20]
 800711a:	2b08      	cmp	r3, #8
 800711c:	d102      	bne.n	8007124 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800711e:	2308      	movs	r3, #8
 8007120:	60fb      	str	r3, [r7, #12]
 8007122:	e014      	b.n	800714e <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	2201      	movs	r2, #1
 800712c:	4013      	ands	r3, r2
 800712e:	2b01      	cmp	r3, #1
 8007130:	d10b      	bne.n	800714a <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007136:	2220      	movs	r2, #32
 8007138:	431a      	orrs	r2, r3
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2250      	movs	r2, #80	; 0x50
 8007142:	2100      	movs	r1, #0
 8007144:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	e06c      	b.n	8007224 <HAL_ADC_PollForConversion+0x120>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800714a:	230c      	movs	r3, #12
 800714c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800714e:	f7ff fda9 	bl	8006ca4 <HAL_GetTick>
 8007152:	0003      	movs	r3, r0
 8007154:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8007156:	e019      	b.n	800718c <HAL_ADC_PollForConversion+0x88>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	3301      	adds	r3, #1
 800715c:	d016      	beq.n	800718c <HAL_ADC_PollForConversion+0x88>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d007      	beq.n	8007174 <HAL_ADC_PollForConversion+0x70>
 8007164:	f7ff fd9e 	bl	8006ca4 <HAL_GetTick>
 8007168:	0002      	movs	r2, r0
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	1ad3      	subs	r3, r2, r3
 800716e:	683a      	ldr	r2, [r7, #0]
 8007170:	429a      	cmp	r2, r3
 8007172:	d20b      	bcs.n	800718c <HAL_ADC_PollForConversion+0x88>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007178:	2204      	movs	r2, #4
 800717a:	431a      	orrs	r2, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2250      	movs	r2, #80	; 0x50
 8007184:	2100      	movs	r1, #0
 8007186:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 8007188:	2303      	movs	r3, #3
 800718a:	e04b      	b.n	8007224 <HAL_ADC_PollForConversion+0x120>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	68fa      	ldr	r2, [r7, #12]
 8007194:	4013      	ands	r3, r2
 8007196:	d0df      	beq.n	8007158 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800719c:	2280      	movs	r2, #128	; 0x80
 800719e:	0092      	lsls	r2, r2, #2
 80071a0:	431a      	orrs	r2, r3
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	68da      	ldr	r2, [r3, #12]
 80071ac:	23c0      	movs	r3, #192	; 0xc0
 80071ae:	011b      	lsls	r3, r3, #4
 80071b0:	4013      	ands	r3, r2
 80071b2:	d12e      	bne.n	8007212 <HAL_ADC_PollForConversion+0x10e>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2220      	movs	r2, #32
 80071b8:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d129      	bne.n	8007212 <HAL_ADC_PollForConversion+0x10e>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	2208      	movs	r2, #8
 80071c6:	4013      	ands	r3, r2
 80071c8:	2b08      	cmp	r3, #8
 80071ca:	d122      	bne.n	8007212 <HAL_ADC_PollForConversion+0x10e>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	2204      	movs	r2, #4
 80071d4:	4013      	ands	r3, r2
 80071d6:	d110      	bne.n	80071fa <HAL_ADC_PollForConversion+0xf6>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	685a      	ldr	r2, [r3, #4]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	210c      	movs	r1, #12
 80071e4:	438a      	bics	r2, r1
 80071e6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ec:	4a0f      	ldr	r2, [pc, #60]	; (800722c <HAL_ADC_PollForConversion+0x128>)
 80071ee:	4013      	ands	r3, r2
 80071f0:	2201      	movs	r2, #1
 80071f2:	431a      	orrs	r2, r3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	655a      	str	r2, [r3, #84]	; 0x54
 80071f8:	e00b      	b.n	8007212 <HAL_ADC_PollForConversion+0x10e>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071fe:	2220      	movs	r2, #32
 8007200:	431a      	orrs	r2, r3
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800720a:	2201      	movs	r2, #1
 800720c:	431a      	orrs	r2, r3
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	699b      	ldr	r3, [r3, #24]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d103      	bne.n	8007222 <HAL_ADC_PollForConversion+0x11e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	220c      	movs	r2, #12
 8007220:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 8007222:	2300      	movs	r3, #0
}
 8007224:	0018      	movs	r0, r3
 8007226:	46bd      	mov	sp, r7
 8007228:	b004      	add	sp, #16
 800722a:	bd80      	pop	{r7, pc}
 800722c:	fffffefe 	.word	0xfffffefe

08007230 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800723e:	0018      	movs	r0, r3
 8007240:	46bd      	mov	sp, r7
 8007242:	b002      	add	sp, #8
 8007244:	bd80      	pop	{r7, pc}
	...

08007248 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	2204      	movs	r2, #4
 8007258:	4013      	ands	r3, r2
 800725a:	2b04      	cmp	r3, #4
 800725c:	d106      	bne.n	800726c <HAL_ADC_IRQHandler+0x24>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	2204      	movs	r2, #4
 8007266:	4013      	ands	r3, r2
 8007268:	2b04      	cmp	r3, #4
 800726a:	d00d      	beq.n	8007288 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	2208      	movs	r2, #8
 8007274:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8007276:	2b08      	cmp	r3, #8
 8007278:	d154      	bne.n	8007324 <HAL_ADC_IRQHandler+0xdc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	2208      	movs	r2, #8
 8007282:	4013      	ands	r3, r2
 8007284:	2b08      	cmp	r3, #8
 8007286:	d14d      	bne.n	8007324 <HAL_ADC_IRQHandler+0xdc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800728c:	2210      	movs	r2, #16
 800728e:	4013      	ands	r3, r2
 8007290:	d106      	bne.n	80072a0 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007296:	2280      	movs	r2, #128	; 0x80
 8007298:	0092      	lsls	r2, r2, #2
 800729a:	431a      	orrs	r2, r3
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	655a      	str	r2, [r3, #84]	; 0x54
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	68da      	ldr	r2, [r3, #12]
 80072a6:	23c0      	movs	r3, #192	; 0xc0
 80072a8:	011b      	lsls	r3, r3, #4
 80072aa:	4013      	ands	r3, r2
 80072ac:	d12e      	bne.n	800730c <HAL_ADC_IRQHandler+0xc4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2220      	movs	r2, #32
 80072b2:	5c9b      	ldrb	r3, [r3, r2]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d129      	bne.n	800730c <HAL_ADC_IRQHandler+0xc4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	2208      	movs	r2, #8
 80072c0:	4013      	ands	r3, r2
 80072c2:	2b08      	cmp	r3, #8
 80072c4:	d122      	bne.n	800730c <HAL_ADC_IRQHandler+0xc4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	2204      	movs	r2, #4
 80072ce:	4013      	ands	r3, r2
 80072d0:	d110      	bne.n	80072f4 <HAL_ADC_IRQHandler+0xac>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	685a      	ldr	r2, [r3, #4]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	210c      	movs	r1, #12
 80072de:	438a      	bics	r2, r1
 80072e0:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072e6:	4a35      	ldr	r2, [pc, #212]	; (80073bc <HAL_ADC_IRQHandler+0x174>)
 80072e8:	4013      	ands	r3, r2
 80072ea:	2201      	movs	r2, #1
 80072ec:	431a      	orrs	r2, r3
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	655a      	str	r2, [r3, #84]	; 0x54
 80072f2:	e00b      	b.n	800730c <HAL_ADC_IRQHandler+0xc4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072f8:	2220      	movs	r2, #32
 80072fa:	431a      	orrs	r2, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	655a      	str	r2, [r3, #84]	; 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007304:	2201      	movs	r2, #1
 8007306:	431a      	orrs	r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	659a      	str	r2, [r3, #88]	; 0x58
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	0018      	movs	r0, r3
 8007310:	f000 f856 	bl	80073c0 <HAL_ADC_ConvCpltCallback>
    /* Note: Management of low power auto-wait enabled: flags must be cleared */
    /*       by user when fetching ADC conversion data.                       */
    /*       This case is managed in IRQ handler, but this low-power mode     */
    /*       should not be used with programming model IT or DMA.             */
    /*       Refer to comment of parameter "LowPowerAutoWait".                */
    if (hadc->Init.LowPowerAutoWait != ENABLE)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	699b      	ldr	r3, [r3, #24]
 8007318:	2b01      	cmp	r3, #1
 800731a:	d003      	beq.n	8007324 <HAL_ADC_IRQHandler+0xdc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	220c      	movs	r2, #12
 8007322:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2280      	movs	r2, #128	; 0x80
 800732c:	4013      	ands	r3, r2
 800732e:	2b80      	cmp	r3, #128	; 0x80
 8007330:	d115      	bne.n	800735e <HAL_ADC_IRQHandler+0x116>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	2280      	movs	r2, #128	; 0x80
 800733a:	4013      	ands	r3, r2
 800733c:	2b80      	cmp	r3, #128	; 0x80
 800733e:	d10e      	bne.n	800735e <HAL_ADC_IRQHandler+0x116>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007344:	2280      	movs	r2, #128	; 0x80
 8007346:	0252      	lsls	r2, r2, #9
 8007348:	431a      	orrs	r2, r3
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	655a      	str	r2, [r3, #84]	; 0x54
    
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	0018      	movs	r0, r3
 8007352:	f000 f83d 	bl	80073d0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	2280      	movs	r2, #128	; 0x80
 800735c:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	2210      	movs	r2, #16
 8007366:	4013      	ands	r3, r2
 8007368:	2b10      	cmp	r3, #16
 800736a:	d123      	bne.n	80073b4 <HAL_ADC_IRQHandler+0x16c>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	2210      	movs	r2, #16
 8007374:	4013      	ands	r3, r2
 8007376:	2b10      	cmp	r3, #16
 8007378:	d11c      	bne.n	80073b4 <HAL_ADC_IRQHandler+0x16c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800737e:	2b00      	cmp	r3, #0
 8007380:	d006      	beq.n	8007390 <HAL_ADC_IRQHandler+0x148>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	2201      	movs	r2, #1
 800738a:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800738c:	2b01      	cmp	r3, #1
 800738e:	d10d      	bne.n	80073ac <HAL_ADC_IRQHandler+0x164>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007394:	2202      	movs	r2, #2
 8007396:	431a      	orrs	r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2210      	movs	r2, #16
 80073a2:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	0018      	movs	r0, r3
 80073a8:	f000 f81a 	bl	80073e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2210      	movs	r2, #16
 80073b2:	601a      	str	r2, [r3, #0]
  }
  
}
 80073b4:	46c0      	nop			; (mov r8, r8)
 80073b6:	46bd      	mov	sp, r7
 80073b8:	b002      	add	sp, #8
 80073ba:	bd80      	pop	{r7, pc}
 80073bc:	fffffefe 	.word	0xfffffefe

080073c0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80073c8:	46c0      	nop			; (mov r8, r8)
 80073ca:	46bd      	mov	sp, r7
 80073cc:	b002      	add	sp, #8
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80073d8:	46c0      	nop			; (mov r8, r8)
 80073da:	46bd      	mov	sp, r7
 80073dc:	b002      	add	sp, #8
 80073de:	bd80      	pop	{r7, pc}

080073e0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80073e8:	46c0      	nop			; (mov r8, r8)
 80073ea:	46bd      	mov	sp, r7
 80073ec:	b002      	add	sp, #8
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2250      	movs	r2, #80	; 0x50
 80073fe:	5c9b      	ldrb	r3, [r3, r2]
 8007400:	2b01      	cmp	r3, #1
 8007402:	d101      	bne.n	8007408 <HAL_ADC_ConfigChannel+0x18>
 8007404:	2302      	movs	r3, #2
 8007406:	e085      	b.n	8007514 <HAL_ADC_ConfigChannel+0x124>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2250      	movs	r2, #80	; 0x50
 800740c:	2101      	movs	r1, #1
 800740e:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	2204      	movs	r2, #4
 8007418:	4013      	ands	r3, r2
 800741a:	d00b      	beq.n	8007434 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007420:	2220      	movs	r2, #32
 8007422:	431a      	orrs	r2, r3
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2250      	movs	r2, #80	; 0x50
 800742c:	2100      	movs	r1, #0
 800742e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8007430:	2301      	movs	r3, #1
 8007432:	e06f      	b.n	8007514 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	4a38      	ldr	r2, [pc, #224]	; (800751c <HAL_ADC_ConfigChannel+0x12c>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d035      	beq.n	80074aa <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	035b      	lsls	r3, r3, #13
 800744a:	0b5a      	lsrs	r2, r3, #13
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	430a      	orrs	r2, r1
 8007452:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	2380      	movs	r3, #128	; 0x80
 800745a:	02db      	lsls	r3, r3, #11
 800745c:	4013      	ands	r3, r2
 800745e:	d009      	beq.n	8007474 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8007460:	4b2f      	ldr	r3, [pc, #188]	; (8007520 <HAL_ADC_ConfigChannel+0x130>)
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	4b2e      	ldr	r3, [pc, #184]	; (8007520 <HAL_ADC_ConfigChannel+0x130>)
 8007466:	2180      	movs	r1, #128	; 0x80
 8007468:	0409      	lsls	r1, r1, #16
 800746a:	430a      	orrs	r2, r1
 800746c:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800746e:	200a      	movs	r0, #10
 8007470:	f000 f964 	bl	800773c <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	2380      	movs	r3, #128	; 0x80
 800747a:	029b      	lsls	r3, r3, #10
 800747c:	4013      	ands	r3, r2
 800747e:	d006      	beq.n	800748e <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8007480:	4b27      	ldr	r3, [pc, #156]	; (8007520 <HAL_ADC_ConfigChannel+0x130>)
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	4b26      	ldr	r3, [pc, #152]	; (8007520 <HAL_ADC_ConfigChannel+0x130>)
 8007486:	2180      	movs	r1, #128	; 0x80
 8007488:	03c9      	lsls	r1, r1, #15
 800748a:	430a      	orrs	r2, r1
 800748c:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	2380      	movs	r3, #128	; 0x80
 8007494:	025b      	lsls	r3, r3, #9
 8007496:	4013      	ands	r3, r2
 8007498:	d037      	beq.n	800750a <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 800749a:	4b21      	ldr	r3, [pc, #132]	; (8007520 <HAL_ADC_ConfigChannel+0x130>)
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	4b20      	ldr	r3, [pc, #128]	; (8007520 <HAL_ADC_ConfigChannel+0x130>)
 80074a0:	2180      	movs	r1, #128	; 0x80
 80074a2:	0449      	lsls	r1, r1, #17
 80074a4:	430a      	orrs	r2, r1
 80074a6:	601a      	str	r2, [r3, #0]
 80074a8:	e02f      	b.n	800750a <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	035b      	lsls	r3, r3, #13
 80074b6:	0b5b      	lsrs	r3, r3, #13
 80074b8:	43d9      	mvns	r1, r3
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	400a      	ands	r2, r1
 80074c0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	2380      	movs	r3, #128	; 0x80
 80074c8:	02db      	lsls	r3, r3, #11
 80074ca:	4013      	ands	r3, r2
 80074cc:	d005      	beq.n	80074da <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80074ce:	4b14      	ldr	r3, [pc, #80]	; (8007520 <HAL_ADC_ConfigChannel+0x130>)
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	4b13      	ldr	r3, [pc, #76]	; (8007520 <HAL_ADC_ConfigChannel+0x130>)
 80074d4:	4913      	ldr	r1, [pc, #76]	; (8007524 <HAL_ADC_ConfigChannel+0x134>)
 80074d6:	400a      	ands	r2, r1
 80074d8:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	2380      	movs	r3, #128	; 0x80
 80074e0:	029b      	lsls	r3, r3, #10
 80074e2:	4013      	ands	r3, r2
 80074e4:	d005      	beq.n	80074f2 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80074e6:	4b0e      	ldr	r3, [pc, #56]	; (8007520 <HAL_ADC_ConfigChannel+0x130>)
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	4b0d      	ldr	r3, [pc, #52]	; (8007520 <HAL_ADC_ConfigChannel+0x130>)
 80074ec:	490e      	ldr	r1, [pc, #56]	; (8007528 <HAL_ADC_ConfigChannel+0x138>)
 80074ee:	400a      	ands	r2, r1
 80074f0:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	2380      	movs	r3, #128	; 0x80
 80074f8:	025b      	lsls	r3, r3, #9
 80074fa:	4013      	ands	r3, r2
 80074fc:	d005      	beq.n	800750a <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 80074fe:	4b08      	ldr	r3, [pc, #32]	; (8007520 <HAL_ADC_ConfigChannel+0x130>)
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	4b07      	ldr	r3, [pc, #28]	; (8007520 <HAL_ADC_ConfigChannel+0x130>)
 8007504:	4909      	ldr	r1, [pc, #36]	; (800752c <HAL_ADC_ConfigChannel+0x13c>)
 8007506:	400a      	ands	r2, r1
 8007508:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2250      	movs	r2, #80	; 0x50
 800750e:	2100      	movs	r1, #0
 8007510:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	0018      	movs	r0, r3
 8007516:	46bd      	mov	sp, r7
 8007518:	b002      	add	sp, #8
 800751a:	bd80      	pop	{r7, pc}
 800751c:	00001001 	.word	0x00001001
 8007520:	40012708 	.word	0x40012708
 8007524:	ff7fffff 	.word	0xff7fffff
 8007528:	ffbfffff 	.word	0xffbfffff
 800752c:	feffffff 	.word	0xfeffffff

08007530 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007538:	2300      	movs	r3, #0
 800753a:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	2203      	movs	r2, #3
 8007544:	4013      	ands	r3, r2
 8007546:	2b01      	cmp	r3, #1
 8007548:	d108      	bne.n	800755c <ADC_Enable+0x2c>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	2201      	movs	r2, #1
 8007552:	4013      	ands	r3, r2
 8007554:	2b01      	cmp	r3, #1
 8007556:	d101      	bne.n	800755c <ADC_Enable+0x2c>
 8007558:	2301      	movs	r3, #1
 800755a:	e000      	b.n	800755e <ADC_Enable+0x2e>
 800755c:	2300      	movs	r3, #0
 800755e:	2b00      	cmp	r3, #0
 8007560:	d13f      	bne.n	80075e2 <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	4a20      	ldr	r2, [pc, #128]	; (80075ec <ADC_Enable+0xbc>)
 800756a:	4013      	ands	r3, r2
 800756c:	d00d      	beq.n	800758a <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007572:	2210      	movs	r2, #16
 8007574:	431a      	orrs	r2, r3
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800757e:	2201      	movs	r2, #1
 8007580:	431a      	orrs	r2, r3
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	e02c      	b.n	80075e4 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	689a      	ldr	r2, [r3, #8]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2101      	movs	r1, #1
 8007596:	430a      	orrs	r2, r1
 8007598:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800759a:	2001      	movs	r0, #1
 800759c:	f000 f8ce 	bl	800773c <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80075a0:	f7ff fb80 	bl	8006ca4 <HAL_GetTick>
 80075a4:	0003      	movs	r3, r0
 80075a6:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80075a8:	e014      	b.n	80075d4 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80075aa:	f7ff fb7b 	bl	8006ca4 <HAL_GetTick>
 80075ae:	0002      	movs	r2, r0
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	1ad3      	subs	r3, r2, r3
 80075b4:	2b0a      	cmp	r3, #10
 80075b6:	d90d      	bls.n	80075d4 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075bc:	2210      	movs	r2, #16
 80075be:	431a      	orrs	r2, r3
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075c8:	2201      	movs	r2, #1
 80075ca:	431a      	orrs	r2, r3
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 80075d0:	2301      	movs	r3, #1
 80075d2:	e007      	b.n	80075e4 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	2201      	movs	r2, #1
 80075dc:	4013      	ands	r3, r2
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d1e3      	bne.n	80075aa <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80075e2:	2300      	movs	r3, #0
}
 80075e4:	0018      	movs	r0, r3
 80075e6:	46bd      	mov	sp, r7
 80075e8:	b004      	add	sp, #16
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	80000017 	.word	0x80000017

080075f0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80075f8:	2300      	movs	r3, #0
 80075fa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	2203      	movs	r2, #3
 8007604:	4013      	ands	r3, r2
 8007606:	2b01      	cmp	r3, #1
 8007608:	d108      	bne.n	800761c <ADC_Disable+0x2c>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2201      	movs	r2, #1
 8007612:	4013      	ands	r3, r2
 8007614:	2b01      	cmp	r3, #1
 8007616:	d101      	bne.n	800761c <ADC_Disable+0x2c>
 8007618:	2301      	movs	r3, #1
 800761a:	e000      	b.n	800761e <ADC_Disable+0x2e>
 800761c:	2300      	movs	r3, #0
 800761e:	2b00      	cmp	r3, #0
 8007620:	d041      	beq.n	80076a6 <ADC_Disable+0xb6>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	2205      	movs	r2, #5
 800762a:	4013      	ands	r3, r2
 800762c:	2b01      	cmp	r3, #1
 800762e:	d110      	bne.n	8007652 <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	689a      	ldr	r2, [r3, #8]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2102      	movs	r1, #2
 800763c:	430a      	orrs	r2, r1
 800763e:	609a      	str	r2, [r3, #8]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	2203      	movs	r2, #3
 8007646:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007648:	f7ff fb2c 	bl	8006ca4 <HAL_GetTick>
 800764c:	0003      	movs	r3, r0
 800764e:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8007650:	e022      	b.n	8007698 <ADC_Disable+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007656:	2210      	movs	r2, #16
 8007658:	431a      	orrs	r2, r3
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007662:	2201      	movs	r2, #1
 8007664:	431a      	orrs	r2, r3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	e01c      	b.n	80076a8 <ADC_Disable+0xb8>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800766e:	f7ff fb19 	bl	8006ca4 <HAL_GetTick>
 8007672:	0002      	movs	r2, r0
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	1ad3      	subs	r3, r2, r3
 8007678:	2b0a      	cmp	r3, #10
 800767a:	d90d      	bls.n	8007698 <ADC_Disable+0xa8>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007680:	2210      	movs	r2, #16
 8007682:	431a      	orrs	r2, r3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800768c:	2201      	movs	r2, #1
 800768e:	431a      	orrs	r2, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	e007      	b.n	80076a8 <ADC_Disable+0xb8>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	2201      	movs	r2, #1
 80076a0:	4013      	ands	r3, r2
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d0e3      	beq.n	800766e <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	0018      	movs	r0, r3
 80076aa:	46bd      	mov	sp, r7
 80076ac:	b004      	add	sp, #16
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80076b8:	2300      	movs	r3, #0
 80076ba:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	2204      	movs	r2, #4
 80076c4:	4013      	ands	r3, r2
 80076c6:	d034      	beq.n	8007732 <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	2204      	movs	r2, #4
 80076d0:	4013      	ands	r3, r2
 80076d2:	2b04      	cmp	r3, #4
 80076d4:	d10d      	bne.n	80076f2 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	2202      	movs	r2, #2
 80076de:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80076e0:	d107      	bne.n	80076f2 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	689a      	ldr	r2, [r3, #8]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	2110      	movs	r1, #16
 80076ee:	430a      	orrs	r2, r1
 80076f0:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80076f2:	f7ff fad7 	bl	8006ca4 <HAL_GetTick>
 80076f6:	0003      	movs	r3, r0
 80076f8:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80076fa:	e014      	b.n	8007726 <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80076fc:	f7ff fad2 	bl	8006ca4 <HAL_GetTick>
 8007700:	0002      	movs	r2, r0
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	1ad3      	subs	r3, r2, r3
 8007706:	2b0a      	cmp	r3, #10
 8007708:	d90d      	bls.n	8007726 <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800770e:	2210      	movs	r2, #16
 8007710:	431a      	orrs	r2, r3
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800771a:	2201      	movs	r2, #1
 800771c:	431a      	orrs	r2, r3
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	e006      	b.n	8007734 <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	2204      	movs	r2, #4
 800772e:	4013      	ands	r3, r2
 8007730:	d1e4      	bne.n	80076fc <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8007732:	2300      	movs	r3, #0
}
 8007734:	0018      	movs	r0, r3
 8007736:	46bd      	mov	sp, r7
 8007738:	b004      	add	sp, #16
 800773a:	bd80      	pop	{r7, pc}

0800773c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8007744:	4b0a      	ldr	r3, [pc, #40]	; (8007770 <ADC_DelayMicroSecond+0x34>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	490a      	ldr	r1, [pc, #40]	; (8007774 <ADC_DelayMicroSecond+0x38>)
 800774a:	0018      	movs	r0, r3
 800774c:	f7f8 fce4 	bl	8000118 <__udivsi3>
 8007750:	0003      	movs	r3, r0
 8007752:	001a      	movs	r2, r3
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	4353      	muls	r3, r2
 8007758:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 800775a:	e002      	b.n	8007762 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	3b01      	subs	r3, #1
 8007760:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d1f9      	bne.n	800775c <ADC_DelayMicroSecond+0x20>
  } 
}
 8007768:	46c0      	nop			; (mov r8, r8)
 800776a:	46bd      	mov	sp, r7
 800776c:	b004      	add	sp, #16
 800776e:	bd80      	pop	{r7, pc}
 8007770:	20000010 	.word	0x20000010
 8007774:	000f4240 	.word	0x000f4240

08007778 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
 800777e:	0002      	movs	r2, r0
 8007780:	1dfb      	adds	r3, r7, #7
 8007782:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8007784:	1dfb      	adds	r3, r7, #7
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	001a      	movs	r2, r3
 800778a:	231f      	movs	r3, #31
 800778c:	401a      	ands	r2, r3
 800778e:	4b04      	ldr	r3, [pc, #16]	; (80077a0 <NVIC_EnableIRQ+0x28>)
 8007790:	2101      	movs	r1, #1
 8007792:	4091      	lsls	r1, r2
 8007794:	000a      	movs	r2, r1
 8007796:	601a      	str	r2, [r3, #0]
}
 8007798:	46c0      	nop			; (mov r8, r8)
 800779a:	46bd      	mov	sp, r7
 800779c:	b002      	add	sp, #8
 800779e:	bd80      	pop	{r7, pc}
 80077a0:	e000e100 	.word	0xe000e100

080077a4 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	0002      	movs	r2, r0
 80077ac:	1dfb      	adds	r3, r7, #7
 80077ae:	701a      	strb	r2, [r3, #0]
  NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80077b0:	1dfb      	adds	r3, r7, #7
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	001a      	movs	r2, r3
 80077b6:	231f      	movs	r3, #31
 80077b8:	4013      	ands	r3, r2
 80077ba:	4905      	ldr	r1, [pc, #20]	; (80077d0 <NVIC_DisableIRQ+0x2c>)
 80077bc:	2201      	movs	r2, #1
 80077be:	409a      	lsls	r2, r3
 80077c0:	0013      	movs	r3, r2
 80077c2:	2280      	movs	r2, #128	; 0x80
 80077c4:	508b      	str	r3, [r1, r2]
}
 80077c6:	46c0      	nop			; (mov r8, r8)
 80077c8:	46bd      	mov	sp, r7
 80077ca:	b002      	add	sp, #8
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	46c0      	nop			; (mov r8, r8)
 80077d0:	e000e100 	.word	0xe000e100

080077d4 <NVIC_ClearPendingIRQ>:
  \brief   Clear Pending Interrupt
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b082      	sub	sp, #8
 80077d8:	af00      	add	r7, sp, #0
 80077da:	0002      	movs	r2, r0
 80077dc:	1dfb      	adds	r3, r7, #7
 80077de:	701a      	strb	r2, [r3, #0]
  NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80077e0:	1dfb      	adds	r3, r7, #7
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	001a      	movs	r2, r3
 80077e6:	231f      	movs	r3, #31
 80077e8:	4013      	ands	r3, r2
 80077ea:	4905      	ldr	r1, [pc, #20]	; (8007800 <NVIC_ClearPendingIRQ+0x2c>)
 80077ec:	2201      	movs	r2, #1
 80077ee:	409a      	lsls	r2, r3
 80077f0:	23c0      	movs	r3, #192	; 0xc0
 80077f2:	005b      	lsls	r3, r3, #1
 80077f4:	50ca      	str	r2, [r1, r3]
}
 80077f6:	46c0      	nop			; (mov r8, r8)
 80077f8:	46bd      	mov	sp, r7
 80077fa:	b002      	add	sp, #8
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	46c0      	nop			; (mov r8, r8)
 8007800:	e000e100 	.word	0xe000e100

08007804 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007804:	b590      	push	{r4, r7, lr}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	0002      	movs	r2, r0
 800780c:	6039      	str	r1, [r7, #0]
 800780e:	1dfb      	adds	r3, r7, #7
 8007810:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8007812:	1dfb      	adds	r3, r7, #7
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	2b7f      	cmp	r3, #127	; 0x7f
 8007818:	d932      	bls.n	8007880 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800781a:	4a2f      	ldr	r2, [pc, #188]	; (80078d8 <NVIC_SetPriority+0xd4>)
 800781c:	1dfb      	adds	r3, r7, #7
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	0019      	movs	r1, r3
 8007822:	230f      	movs	r3, #15
 8007824:	400b      	ands	r3, r1
 8007826:	3b08      	subs	r3, #8
 8007828:	089b      	lsrs	r3, r3, #2
 800782a:	3306      	adds	r3, #6
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	18d3      	adds	r3, r2, r3
 8007830:	3304      	adds	r3, #4
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	1dfa      	adds	r2, r7, #7
 8007836:	7812      	ldrb	r2, [r2, #0]
 8007838:	0011      	movs	r1, r2
 800783a:	2203      	movs	r2, #3
 800783c:	400a      	ands	r2, r1
 800783e:	00d2      	lsls	r2, r2, #3
 8007840:	21ff      	movs	r1, #255	; 0xff
 8007842:	4091      	lsls	r1, r2
 8007844:	000a      	movs	r2, r1
 8007846:	43d2      	mvns	r2, r2
 8007848:	401a      	ands	r2, r3
 800784a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	019b      	lsls	r3, r3, #6
 8007850:	22ff      	movs	r2, #255	; 0xff
 8007852:	401a      	ands	r2, r3
 8007854:	1dfb      	adds	r3, r7, #7
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	0018      	movs	r0, r3
 800785a:	2303      	movs	r3, #3
 800785c:	4003      	ands	r3, r0
 800785e:	00db      	lsls	r3, r3, #3
 8007860:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007862:	481d      	ldr	r0, [pc, #116]	; (80078d8 <NVIC_SetPriority+0xd4>)
 8007864:	1dfb      	adds	r3, r7, #7
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	001c      	movs	r4, r3
 800786a:	230f      	movs	r3, #15
 800786c:	4023      	ands	r3, r4
 800786e:	3b08      	subs	r3, #8
 8007870:	089b      	lsrs	r3, r3, #2
 8007872:	430a      	orrs	r2, r1
 8007874:	3306      	adds	r3, #6
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	18c3      	adds	r3, r0, r3
 800787a:	3304      	adds	r3, #4
 800787c:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800787e:	e027      	b.n	80078d0 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007880:	4a16      	ldr	r2, [pc, #88]	; (80078dc <NVIC_SetPriority+0xd8>)
 8007882:	1dfb      	adds	r3, r7, #7
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	b25b      	sxtb	r3, r3
 8007888:	089b      	lsrs	r3, r3, #2
 800788a:	33c0      	adds	r3, #192	; 0xc0
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	589b      	ldr	r3, [r3, r2]
 8007890:	1dfa      	adds	r2, r7, #7
 8007892:	7812      	ldrb	r2, [r2, #0]
 8007894:	0011      	movs	r1, r2
 8007896:	2203      	movs	r2, #3
 8007898:	400a      	ands	r2, r1
 800789a:	00d2      	lsls	r2, r2, #3
 800789c:	21ff      	movs	r1, #255	; 0xff
 800789e:	4091      	lsls	r1, r2
 80078a0:	000a      	movs	r2, r1
 80078a2:	43d2      	mvns	r2, r2
 80078a4:	401a      	ands	r2, r3
 80078a6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	019b      	lsls	r3, r3, #6
 80078ac:	22ff      	movs	r2, #255	; 0xff
 80078ae:	401a      	ands	r2, r3
 80078b0:	1dfb      	adds	r3, r7, #7
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	0018      	movs	r0, r3
 80078b6:	2303      	movs	r3, #3
 80078b8:	4003      	ands	r3, r0
 80078ba:	00db      	lsls	r3, r3, #3
 80078bc:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80078be:	4807      	ldr	r0, [pc, #28]	; (80078dc <NVIC_SetPriority+0xd8>)
 80078c0:	1dfb      	adds	r3, r7, #7
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	b25b      	sxtb	r3, r3
 80078c6:	089b      	lsrs	r3, r3, #2
 80078c8:	430a      	orrs	r2, r1
 80078ca:	33c0      	adds	r3, #192	; 0xc0
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	501a      	str	r2, [r3, r0]
}
 80078d0:	46c0      	nop			; (mov r8, r8)
 80078d2:	46bd      	mov	sp, r7
 80078d4:	b003      	add	sp, #12
 80078d6:	bd90      	pop	{r4, r7, pc}
 80078d8:	e000ed00 	.word	0xe000ed00
 80078dc:	e000e100 	.word	0xe000e100

080078e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	3b01      	subs	r3, #1
 80078ec:	4a0c      	ldr	r2, [pc, #48]	; (8007920 <SysTick_Config+0x40>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d901      	bls.n	80078f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80078f2:	2301      	movs	r3, #1
 80078f4:	e010      	b.n	8007918 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80078f6:	4b0b      	ldr	r3, [pc, #44]	; (8007924 <SysTick_Config+0x44>)
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	3a01      	subs	r2, #1
 80078fc:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80078fe:	2301      	movs	r3, #1
 8007900:	425b      	negs	r3, r3
 8007902:	2103      	movs	r1, #3
 8007904:	0018      	movs	r0, r3
 8007906:	f7ff ff7d 	bl	8007804 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800790a:	4b06      	ldr	r3, [pc, #24]	; (8007924 <SysTick_Config+0x44>)
 800790c:	2200      	movs	r2, #0
 800790e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007910:	4b04      	ldr	r3, [pc, #16]	; (8007924 <SysTick_Config+0x44>)
 8007912:	2207      	movs	r2, #7
 8007914:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007916:	2300      	movs	r3, #0
}
 8007918:	0018      	movs	r0, r3
 800791a:	46bd      	mov	sp, r7
 800791c:	b002      	add	sp, #8
 800791e:	bd80      	pop	{r7, pc}
 8007920:	00ffffff 	.word	0x00ffffff
 8007924:	e000e010 	.word	0xe000e010

08007928 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007928:	b580      	push	{r7, lr}
 800792a:	b084      	sub	sp, #16
 800792c:	af00      	add	r7, sp, #0
 800792e:	60b9      	str	r1, [r7, #8]
 8007930:	607a      	str	r2, [r7, #4]
 8007932:	210f      	movs	r1, #15
 8007934:	187b      	adds	r3, r7, r1
 8007936:	1c02      	adds	r2, r0, #0
 8007938:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800793a:	68ba      	ldr	r2, [r7, #8]
 800793c:	187b      	adds	r3, r7, r1
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	b25b      	sxtb	r3, r3
 8007942:	0011      	movs	r1, r2
 8007944:	0018      	movs	r0, r3
 8007946:	f7ff ff5d 	bl	8007804 <NVIC_SetPriority>
}
 800794a:	46c0      	nop			; (mov r8, r8)
 800794c:	46bd      	mov	sp, r7
 800794e:	b004      	add	sp, #16
 8007950:	bd80      	pop	{r7, pc}

08007952 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007952:	b580      	push	{r7, lr}
 8007954:	b082      	sub	sp, #8
 8007956:	af00      	add	r7, sp, #0
 8007958:	0002      	movs	r2, r0
 800795a:	1dfb      	adds	r3, r7, #7
 800795c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800795e:	1dfb      	adds	r3, r7, #7
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	b25b      	sxtb	r3, r3
 8007964:	0018      	movs	r0, r3
 8007966:	f7ff ff07 	bl	8007778 <NVIC_EnableIRQ>
}
 800796a:	46c0      	nop			; (mov r8, r8)
 800796c:	46bd      	mov	sp, r7
 800796e:	b002      	add	sp, #8
 8007970:	bd80      	pop	{r7, pc}

08007972 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007972:	b580      	push	{r7, lr}
 8007974:	b082      	sub	sp, #8
 8007976:	af00      	add	r7, sp, #0
 8007978:	0002      	movs	r2, r0
 800797a:	1dfb      	adds	r3, r7, #7
 800797c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800797e:	1dfb      	adds	r3, r7, #7
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	b25b      	sxtb	r3, r3
 8007984:	0018      	movs	r0, r3
 8007986:	f7ff ff0d 	bl	80077a4 <NVIC_DisableIRQ>
}
 800798a:	46c0      	nop			; (mov r8, r8)
 800798c:	46bd      	mov	sp, r7
 800798e:	b002      	add	sp, #8
 8007990:	bd80      	pop	{r7, pc}

08007992 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007992:	b580      	push	{r7, lr}
 8007994:	b082      	sub	sp, #8
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	0018      	movs	r0, r3
 800799e:	f7ff ff9f 	bl	80078e0 <SysTick_Config>
 80079a2:	0003      	movs	r3, r0
}
 80079a4:	0018      	movs	r0, r3
 80079a6:	46bd      	mov	sp, r7
 80079a8:	b002      	add	sp, #8
 80079aa:	bd80      	pop	{r7, pc}

080079ac <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{ 
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b082      	sub	sp, #8
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	0002      	movs	r2, r0
 80079b4:	1dfb      	adds	r3, r7, #7
 80079b6:	701a      	strb	r2, [r3, #0]
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80079b8:	1dfb      	adds	r3, r7, #7
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	b25b      	sxtb	r3, r3
 80079be:	0018      	movs	r0, r3
 80079c0:	f7ff ff08 	bl	80077d4 <NVIC_ClearPendingIRQ>
}
 80079c4:	46c0      	nop			; (mov r8, r8)
 80079c6:	46bd      	mov	sp, r7
 80079c8:	b002      	add	sp, #8
 80079ca:	bd80      	pop	{r7, pc}

080079cc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079d4:	230f      	movs	r3, #15
 80079d6:	18fb      	adds	r3, r7, r3
 80079d8:	2200      	movs	r2, #0
 80079da:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2225      	movs	r2, #37	; 0x25
 80079e0:	5c9b      	ldrb	r3, [r3, r2]
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	2b02      	cmp	r3, #2
 80079e6:	d007      	beq.n	80079f8 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2204      	movs	r2, #4
 80079ec:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80079ee:	230f      	movs	r3, #15
 80079f0:	18fb      	adds	r3, r7, r3
 80079f2:	2201      	movs	r2, #1
 80079f4:	701a      	strb	r2, [r3, #0]
 80079f6:	e02a      	b.n	8007a4e <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	210e      	movs	r1, #14
 8007a04:	438a      	bics	r2, r1
 8007a06:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	2101      	movs	r1, #1
 8007a14:	438a      	bics	r2, r1
 8007a16:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a1c:	221c      	movs	r2, #28
 8007a1e:	401a      	ands	r2, r3
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a24:	2101      	movs	r1, #1
 8007a26:	4091      	lsls	r1, r2
 8007a28:	000a      	movs	r2, r1
 8007a2a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2225      	movs	r2, #37	; 0x25
 8007a30:	2101      	movs	r1, #1
 8007a32:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2224      	movs	r2, #36	; 0x24
 8007a38:	2100      	movs	r1, #0
 8007a3a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d004      	beq.n	8007a4e <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	0010      	movs	r0, r2
 8007a4c:	4798      	blx	r3
    }
  }
  return status;
 8007a4e:	230f      	movs	r3, #15
 8007a50:	18fb      	adds	r3, r7, r3
 8007a52:	781b      	ldrb	r3, [r3, #0]
}
 8007a54:	0018      	movs	r0, r3
 8007a56:	46bd      	mov	sp, r7
 8007a58:	b004      	add	sp, #16
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b086      	sub	sp, #24
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007a66:	2300      	movs	r3, #0
 8007a68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8007a72:	e155      	b.n	8007d20 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2101      	movs	r1, #1
 8007a7a:	697a      	ldr	r2, [r7, #20]
 8007a7c:	4091      	lsls	r1, r2
 8007a7e:	000a      	movs	r2, r1
 8007a80:	4013      	ands	r3, r2
 8007a82:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d100      	bne.n	8007a8c <HAL_GPIO_Init+0x30>
 8007a8a:	e146      	b.n	8007d1a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	2b02      	cmp	r3, #2
 8007a92:	d003      	beq.n	8007a9c <HAL_GPIO_Init+0x40>
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	2b12      	cmp	r3, #18
 8007a9a:	d123      	bne.n	8007ae4 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	08da      	lsrs	r2, r3, #3
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	3208      	adds	r2, #8
 8007aa4:	0092      	lsls	r2, r2, #2
 8007aa6:	58d3      	ldr	r3, [r2, r3]
 8007aa8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	2207      	movs	r2, #7
 8007aae:	4013      	ands	r3, r2
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	220f      	movs	r2, #15
 8007ab4:	409a      	lsls	r2, r3
 8007ab6:	0013      	movs	r3, r2
 8007ab8:	43da      	mvns	r2, r3
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	4013      	ands	r3, r2
 8007abe:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	691a      	ldr	r2, [r3, #16]
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	2107      	movs	r1, #7
 8007ac8:	400b      	ands	r3, r1
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	409a      	lsls	r2, r3
 8007ace:	0013      	movs	r3, r2
 8007ad0:	693a      	ldr	r2, [r7, #16]
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	08da      	lsrs	r2, r3, #3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	3208      	adds	r2, #8
 8007ade:	0092      	lsls	r2, r2, #2
 8007ae0:	6939      	ldr	r1, [r7, #16]
 8007ae2:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d00b      	beq.n	8007b04 <HAL_GPIO_Init+0xa8>
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	2b02      	cmp	r3, #2
 8007af2:	d007      	beq.n	8007b04 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007af8:	2b11      	cmp	r3, #17
 8007afa:	d003      	beq.n	8007b04 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	2b12      	cmp	r3, #18
 8007b02:	d130      	bne.n	8007b66 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	005b      	lsls	r3, r3, #1
 8007b0e:	2203      	movs	r2, #3
 8007b10:	409a      	lsls	r2, r3
 8007b12:	0013      	movs	r3, r2
 8007b14:	43da      	mvns	r2, r3
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	4013      	ands	r3, r2
 8007b1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	68da      	ldr	r2, [r3, #12]
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	005b      	lsls	r3, r3, #1
 8007b24:	409a      	lsls	r2, r3
 8007b26:	0013      	movs	r3, r2
 8007b28:	693a      	ldr	r2, [r7, #16]
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	693a      	ldr	r2, [r7, #16]
 8007b32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	409a      	lsls	r2, r3
 8007b40:	0013      	movs	r3, r2
 8007b42:	43da      	mvns	r2, r3
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	4013      	ands	r3, r2
 8007b48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	091b      	lsrs	r3, r3, #4
 8007b50:	2201      	movs	r2, #1
 8007b52:	401a      	ands	r2, r3
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	409a      	lsls	r2, r3
 8007b58:	0013      	movs	r3, r2
 8007b5a:	693a      	ldr	r2, [r7, #16]
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	693a      	ldr	r2, [r7, #16]
 8007b64:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	005b      	lsls	r3, r3, #1
 8007b70:	2203      	movs	r2, #3
 8007b72:	409a      	lsls	r2, r3
 8007b74:	0013      	movs	r3, r2
 8007b76:	43da      	mvns	r2, r3
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	4013      	ands	r3, r2
 8007b7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	2203      	movs	r2, #3
 8007b84:	401a      	ands	r2, r3
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	005b      	lsls	r3, r3, #1
 8007b8a:	409a      	lsls	r2, r3
 8007b8c:	0013      	movs	r3, r2
 8007b8e:	693a      	ldr	r2, [r7, #16]
 8007b90:	4313      	orrs	r3, r2
 8007b92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	693a      	ldr	r2, [r7, #16]
 8007b98:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	68db      	ldr	r3, [r3, #12]
 8007b9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	005b      	lsls	r3, r3, #1
 8007ba4:	2203      	movs	r2, #3
 8007ba6:	409a      	lsls	r2, r3
 8007ba8:	0013      	movs	r3, r2
 8007baa:	43da      	mvns	r2, r3
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	4013      	ands	r3, r2
 8007bb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	689a      	ldr	r2, [r3, #8]
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	005b      	lsls	r3, r3, #1
 8007bba:	409a      	lsls	r2, r3
 8007bbc:	0013      	movs	r3, r2
 8007bbe:	693a      	ldr	r2, [r7, #16]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	693a      	ldr	r2, [r7, #16]
 8007bc8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	685a      	ldr	r2, [r3, #4]
 8007bce:	2380      	movs	r3, #128	; 0x80
 8007bd0:	055b      	lsls	r3, r3, #21
 8007bd2:	4013      	ands	r3, r2
 8007bd4:	d100      	bne.n	8007bd8 <HAL_GPIO_Init+0x17c>
 8007bd6:	e0a0      	b.n	8007d1a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007bd8:	4b57      	ldr	r3, [pc, #348]	; (8007d38 <HAL_GPIO_Init+0x2dc>)
 8007bda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bdc:	4b56      	ldr	r3, [pc, #344]	; (8007d38 <HAL_GPIO_Init+0x2dc>)
 8007bde:	2101      	movs	r1, #1
 8007be0:	430a      	orrs	r2, r1
 8007be2:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8007be4:	4a55      	ldr	r2, [pc, #340]	; (8007d3c <HAL_GPIO_Init+0x2e0>)
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	089b      	lsrs	r3, r3, #2
 8007bea:	3302      	adds	r3, #2
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	589b      	ldr	r3, [r3, r2]
 8007bf0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	2203      	movs	r2, #3
 8007bf6:	4013      	ands	r3, r2
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	220f      	movs	r2, #15
 8007bfc:	409a      	lsls	r2, r3
 8007bfe:	0013      	movs	r3, r2
 8007c00:	43da      	mvns	r2, r3
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	4013      	ands	r3, r2
 8007c06:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	23a0      	movs	r3, #160	; 0xa0
 8007c0c:	05db      	lsls	r3, r3, #23
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d01f      	beq.n	8007c52 <HAL_GPIO_Init+0x1f6>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a4a      	ldr	r2, [pc, #296]	; (8007d40 <HAL_GPIO_Init+0x2e4>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d019      	beq.n	8007c4e <HAL_GPIO_Init+0x1f2>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4a49      	ldr	r2, [pc, #292]	; (8007d44 <HAL_GPIO_Init+0x2e8>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d013      	beq.n	8007c4a <HAL_GPIO_Init+0x1ee>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	4a48      	ldr	r2, [pc, #288]	; (8007d48 <HAL_GPIO_Init+0x2ec>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d00d      	beq.n	8007c46 <HAL_GPIO_Init+0x1ea>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4a47      	ldr	r2, [pc, #284]	; (8007d4c <HAL_GPIO_Init+0x2f0>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d007      	beq.n	8007c42 <HAL_GPIO_Init+0x1e6>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4a46      	ldr	r2, [pc, #280]	; (8007d50 <HAL_GPIO_Init+0x2f4>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d101      	bne.n	8007c3e <HAL_GPIO_Init+0x1e2>
 8007c3a:	2305      	movs	r3, #5
 8007c3c:	e00a      	b.n	8007c54 <HAL_GPIO_Init+0x1f8>
 8007c3e:	2306      	movs	r3, #6
 8007c40:	e008      	b.n	8007c54 <HAL_GPIO_Init+0x1f8>
 8007c42:	2304      	movs	r3, #4
 8007c44:	e006      	b.n	8007c54 <HAL_GPIO_Init+0x1f8>
 8007c46:	2303      	movs	r3, #3
 8007c48:	e004      	b.n	8007c54 <HAL_GPIO_Init+0x1f8>
 8007c4a:	2302      	movs	r3, #2
 8007c4c:	e002      	b.n	8007c54 <HAL_GPIO_Init+0x1f8>
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e000      	b.n	8007c54 <HAL_GPIO_Init+0x1f8>
 8007c52:	2300      	movs	r3, #0
 8007c54:	697a      	ldr	r2, [r7, #20]
 8007c56:	2103      	movs	r1, #3
 8007c58:	400a      	ands	r2, r1
 8007c5a:	0092      	lsls	r2, r2, #2
 8007c5c:	4093      	lsls	r3, r2
 8007c5e:	693a      	ldr	r2, [r7, #16]
 8007c60:	4313      	orrs	r3, r2
 8007c62:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007c64:	4935      	ldr	r1, [pc, #212]	; (8007d3c <HAL_GPIO_Init+0x2e0>)
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	089b      	lsrs	r3, r3, #2
 8007c6a:	3302      	adds	r3, #2
 8007c6c:	009b      	lsls	r3, r3, #2
 8007c6e:	693a      	ldr	r2, [r7, #16]
 8007c70:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007c72:	4b38      	ldr	r3, [pc, #224]	; (8007d54 <HAL_GPIO_Init+0x2f8>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	43da      	mvns	r2, r3
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	4013      	ands	r3, r2
 8007c80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	685a      	ldr	r2, [r3, #4]
 8007c86:	2380      	movs	r3, #128	; 0x80
 8007c88:	025b      	lsls	r3, r3, #9
 8007c8a:	4013      	ands	r3, r2
 8007c8c:	d003      	beq.n	8007c96 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8007c8e:	693a      	ldr	r2, [r7, #16]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	4313      	orrs	r3, r2
 8007c94:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8007c96:	4b2f      	ldr	r3, [pc, #188]	; (8007d54 <HAL_GPIO_Init+0x2f8>)
 8007c98:	693a      	ldr	r2, [r7, #16]
 8007c9a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8007c9c:	4b2d      	ldr	r3, [pc, #180]	; (8007d54 <HAL_GPIO_Init+0x2f8>)
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	43da      	mvns	r2, r3
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	4013      	ands	r3, r2
 8007caa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	685a      	ldr	r2, [r3, #4]
 8007cb0:	2380      	movs	r3, #128	; 0x80
 8007cb2:	029b      	lsls	r3, r3, #10
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	d003      	beq.n	8007cc0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8007cb8:	693a      	ldr	r2, [r7, #16]
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8007cc0:	4b24      	ldr	r3, [pc, #144]	; (8007d54 <HAL_GPIO_Init+0x2f8>)
 8007cc2:	693a      	ldr	r2, [r7, #16]
 8007cc4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007cc6:	4b23      	ldr	r3, [pc, #140]	; (8007d54 <HAL_GPIO_Init+0x2f8>)
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	43da      	mvns	r2, r3
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	4013      	ands	r3, r2
 8007cd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	685a      	ldr	r2, [r3, #4]
 8007cda:	2380      	movs	r3, #128	; 0x80
 8007cdc:	035b      	lsls	r3, r3, #13
 8007cde:	4013      	ands	r3, r2
 8007ce0:	d003      	beq.n	8007cea <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8007ce2:	693a      	ldr	r2, [r7, #16]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8007cea:	4b1a      	ldr	r3, [pc, #104]	; (8007d54 <HAL_GPIO_Init+0x2f8>)
 8007cec:	693a      	ldr	r2, [r7, #16]
 8007cee:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8007cf0:	4b18      	ldr	r3, [pc, #96]	; (8007d54 <HAL_GPIO_Init+0x2f8>)
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	43da      	mvns	r2, r3
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	4013      	ands	r3, r2
 8007cfe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	685a      	ldr	r2, [r3, #4]
 8007d04:	2380      	movs	r3, #128	; 0x80
 8007d06:	039b      	lsls	r3, r3, #14
 8007d08:	4013      	ands	r3, r2
 8007d0a:	d003      	beq.n	8007d14 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8007d0c:	693a      	ldr	r2, [r7, #16]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	4313      	orrs	r3, r2
 8007d12:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8007d14:	4b0f      	ldr	r3, [pc, #60]	; (8007d54 <HAL_GPIO_Init+0x2f8>)
 8007d16:	693a      	ldr	r2, [r7, #16]
 8007d18:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	40da      	lsrs	r2, r3
 8007d28:	1e13      	subs	r3, r2, #0
 8007d2a:	d000      	beq.n	8007d2e <HAL_GPIO_Init+0x2d2>
 8007d2c:	e6a2      	b.n	8007a74 <HAL_GPIO_Init+0x18>
  }
}
 8007d2e:	46c0      	nop			; (mov r8, r8)
 8007d30:	46bd      	mov	sp, r7
 8007d32:	b006      	add	sp, #24
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	46c0      	nop			; (mov r8, r8)
 8007d38:	40021000 	.word	0x40021000
 8007d3c:	40010000 	.word	0x40010000
 8007d40:	50000400 	.word	0x50000400
 8007d44:	50000800 	.word	0x50000800
 8007d48:	50000c00 	.word	0x50000c00
 8007d4c:	50001000 	.word	0x50001000
 8007d50:	50001c00 	.word	0x50001c00
 8007d54:	40010400 	.word	0x40010400

08007d58 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b082      	sub	sp, #8
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	0008      	movs	r0, r1
 8007d62:	0011      	movs	r1, r2
 8007d64:	1cbb      	adds	r3, r7, #2
 8007d66:	1c02      	adds	r2, r0, #0
 8007d68:	801a      	strh	r2, [r3, #0]
 8007d6a:	1c7b      	adds	r3, r7, #1
 8007d6c:	1c0a      	adds	r2, r1, #0
 8007d6e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8007d70:	1c7b      	adds	r3, r7, #1
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d004      	beq.n	8007d82 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007d78:	1cbb      	adds	r3, r7, #2
 8007d7a:	881a      	ldrh	r2, [r3, #0]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8007d80:	e003      	b.n	8007d8a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8007d82:	1cbb      	adds	r3, r7, #2
 8007d84:	881a      	ldrh	r2, [r3, #0]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007d8a:	46c0      	nop			; (mov r8, r8)
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	b002      	add	sp, #8
 8007d90:	bd80      	pop	{r7, pc}

08007d92 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007d92:	b580      	push	{r7, lr}
 8007d94:	b082      	sub	sp, #8
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
 8007d9a:	000a      	movs	r2, r1
 8007d9c:	1cbb      	adds	r3, r7, #2
 8007d9e:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	695a      	ldr	r2, [r3, #20]
 8007da4:	1cbb      	adds	r3, r7, #2
 8007da6:	881b      	ldrh	r3, [r3, #0]
 8007da8:	405a      	eors	r2, r3
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	615a      	str	r2, [r3, #20]
}
 8007dae:	46c0      	nop			; (mov r8, r8)
 8007db0:	46bd      	mov	sp, r7
 8007db2:	b002      	add	sp, #8
 8007db4:	bd80      	pop	{r7, pc}
	...

08007db8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b082      	sub	sp, #8
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	0002      	movs	r2, r0
 8007dc0:	1dbb      	adds	r3, r7, #6
 8007dc2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8007dc4:	4b09      	ldr	r3, [pc, #36]	; (8007dec <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8007dc6:	695b      	ldr	r3, [r3, #20]
 8007dc8:	1dba      	adds	r2, r7, #6
 8007dca:	8812      	ldrh	r2, [r2, #0]
 8007dcc:	4013      	ands	r3, r2
 8007dce:	d008      	beq.n	8007de2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007dd0:	4b06      	ldr	r3, [pc, #24]	; (8007dec <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8007dd2:	1dba      	adds	r2, r7, #6
 8007dd4:	8812      	ldrh	r2, [r2, #0]
 8007dd6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007dd8:	1dbb      	adds	r3, r7, #6
 8007dda:	881b      	ldrh	r3, [r3, #0]
 8007ddc:	0018      	movs	r0, r3
 8007dde:	f7fd f917 	bl	8005010 <HAL_GPIO_EXTI_Callback>
  }
}
 8007de2:	46c0      	nop			; (mov r8, r8)
 8007de4:	46bd      	mov	sp, r7
 8007de6:	b002      	add	sp, #8
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	46c0      	nop			; (mov r8, r8)
 8007dec:	40010400 	.word	0x40010400

08007df0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007df2:	b08b      	sub	sp, #44	; 0x2c
 8007df4:	af06      	add	r7, sp, #24
 8007df6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d101      	bne.n	8007e02 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e0e4      	b.n	8007fcc <HAL_PCD_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	4a73      	ldr	r2, [pc, #460]	; (8007fd4 <HAL_PCD_Init+0x1e4>)
 8007e06:	5c9b      	ldrb	r3, [r3, r2]
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d108      	bne.n	8007e20 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	238a      	movs	r3, #138	; 0x8a
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	2100      	movs	r1, #0
 8007e16:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	0018      	movs	r0, r3
 8007e1c:	f7fc fd1c 	bl	8004858 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	4a6c      	ldr	r2, [pc, #432]	; (8007fd4 <HAL_PCD_Init+0x1e4>)
 8007e24:	2103      	movs	r1, #3
 8007e26:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	0018      	movs	r0, r3
 8007e2e:	f003 fa25 	bl	800b27c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007e32:	230f      	movs	r3, #15
 8007e34:	18fb      	adds	r3, r7, r3
 8007e36:	2200      	movs	r2, #0
 8007e38:	701a      	strb	r2, [r3, #0]
 8007e3a:	e043      	b.n	8007ec4 <HAL_PCD_Init+0xd4>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007e3c:	200f      	movs	r0, #15
 8007e3e:	183b      	adds	r3, r7, r0
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	2129      	movs	r1, #41	; 0x29
 8007e46:	015b      	lsls	r3, r3, #5
 8007e48:	18d3      	adds	r3, r2, r3
 8007e4a:	185b      	adds	r3, r3, r1
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007e50:	183b      	adds	r3, r7, r0
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	2128      	movs	r1, #40	; 0x28
 8007e58:	015b      	lsls	r3, r3, #5
 8007e5a:	18d3      	adds	r3, r2, r3
 8007e5c:	185b      	adds	r3, r3, r1
 8007e5e:	183a      	adds	r2, r7, r0
 8007e60:	7812      	ldrb	r2, [r2, #0]
 8007e62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007e64:	183b      	adds	r3, r7, r0
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	183a      	adds	r2, r7, r0
 8007e6a:	7812      	ldrb	r2, [r2, #0]
 8007e6c:	b291      	uxth	r1, r2
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	015b      	lsls	r3, r3, #5
 8007e72:	18d3      	adds	r3, r2, r3
 8007e74:	3336      	adds	r3, #54	; 0x36
 8007e76:	1c0a      	adds	r2, r1, #0
 8007e78:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007e7a:	183b      	adds	r3, r7, r0
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	212b      	movs	r1, #43	; 0x2b
 8007e82:	015b      	lsls	r3, r3, #5
 8007e84:	18d3      	adds	r3, r2, r3
 8007e86:	185b      	adds	r3, r3, r1
 8007e88:	2200      	movs	r2, #0
 8007e8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007e8c:	183b      	adds	r3, r7, r0
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	015b      	lsls	r3, r3, #5
 8007e94:	18d3      	adds	r3, r2, r3
 8007e96:	3338      	adds	r3, #56	; 0x38
 8007e98:	2200      	movs	r2, #0
 8007e9a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007e9c:	183b      	adds	r3, r7, r0
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	015b      	lsls	r3, r3, #5
 8007ea4:	18d3      	adds	r3, r2, r3
 8007ea6:	333c      	adds	r3, #60	; 0x3c
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007eac:	183b      	adds	r3, r7, r0
 8007eae:	781a      	ldrb	r2, [r3, #0]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	3202      	adds	r2, #2
 8007eb4:	0152      	lsls	r2, r2, #5
 8007eb6:	2100      	movs	r1, #0
 8007eb8:	50d1      	str	r1, [r2, r3]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007eba:	183b      	adds	r3, r7, r0
 8007ebc:	781a      	ldrb	r2, [r3, #0]
 8007ebe:	183b      	adds	r3, r7, r0
 8007ec0:	3201      	adds	r2, #1
 8007ec2:	701a      	strb	r2, [r3, #0]
 8007ec4:	230f      	movs	r3, #15
 8007ec6:	18fb      	adds	r3, r7, r3
 8007ec8:	781a      	ldrb	r2, [r3, #0]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d3b4      	bcc.n	8007e3c <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007ed2:	230f      	movs	r3, #15
 8007ed4:	18fb      	adds	r3, r7, r3
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	701a      	strb	r2, [r3, #0]
 8007eda:	e03f      	b.n	8007f5c <HAL_PCD_Init+0x16c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007edc:	200f      	movs	r0, #15
 8007ede:	183b      	adds	r3, r7, r0
 8007ee0:	781a      	ldrb	r2, [r3, #0]
 8007ee2:	6879      	ldr	r1, [r7, #4]
 8007ee4:	232a      	movs	r3, #42	; 0x2a
 8007ee6:	33ff      	adds	r3, #255	; 0xff
 8007ee8:	0152      	lsls	r2, r2, #5
 8007eea:	188a      	adds	r2, r1, r2
 8007eec:	18d3      	adds	r3, r2, r3
 8007eee:	2200      	movs	r2, #0
 8007ef0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007ef2:	183b      	adds	r3, r7, r0
 8007ef4:	781a      	ldrb	r2, [r3, #0]
 8007ef6:	6879      	ldr	r1, [r7, #4]
 8007ef8:	2394      	movs	r3, #148	; 0x94
 8007efa:	005b      	lsls	r3, r3, #1
 8007efc:	0152      	lsls	r2, r2, #5
 8007efe:	188a      	adds	r2, r1, r2
 8007f00:	18d3      	adds	r3, r2, r3
 8007f02:	183a      	adds	r2, r7, r0
 8007f04:	7812      	ldrb	r2, [r2, #0]
 8007f06:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007f08:	183b      	adds	r3, r7, r0
 8007f0a:	781a      	ldrb	r2, [r3, #0]
 8007f0c:	6879      	ldr	r1, [r7, #4]
 8007f0e:	232c      	movs	r3, #44	; 0x2c
 8007f10:	33ff      	adds	r3, #255	; 0xff
 8007f12:	0152      	lsls	r2, r2, #5
 8007f14:	188a      	adds	r2, r1, r2
 8007f16:	18d3      	adds	r3, r2, r3
 8007f18:	2200      	movs	r2, #0
 8007f1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007f1c:	183b      	adds	r3, r7, r0
 8007f1e:	781a      	ldrb	r2, [r3, #0]
 8007f20:	6879      	ldr	r1, [r7, #4]
 8007f22:	239c      	movs	r3, #156	; 0x9c
 8007f24:	005b      	lsls	r3, r3, #1
 8007f26:	0152      	lsls	r2, r2, #5
 8007f28:	188a      	adds	r2, r1, r2
 8007f2a:	18d3      	adds	r3, r2, r3
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007f30:	183b      	adds	r3, r7, r0
 8007f32:	781a      	ldrb	r2, [r3, #0]
 8007f34:	6879      	ldr	r1, [r7, #4]
 8007f36:	239e      	movs	r3, #158	; 0x9e
 8007f38:	005b      	lsls	r3, r3, #1
 8007f3a:	0152      	lsls	r2, r2, #5
 8007f3c:	188a      	adds	r2, r1, r2
 8007f3e:	18d3      	adds	r3, r2, r3
 8007f40:	2200      	movs	r2, #0
 8007f42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007f44:	183b      	adds	r3, r7, r0
 8007f46:	781a      	ldrb	r2, [r3, #0]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	320a      	adds	r2, #10
 8007f4c:	0152      	lsls	r2, r2, #5
 8007f4e:	2100      	movs	r1, #0
 8007f50:	50d1      	str	r1, [r2, r3]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007f52:	183b      	adds	r3, r7, r0
 8007f54:	781a      	ldrb	r2, [r3, #0]
 8007f56:	183b      	adds	r3, r7, r0
 8007f58:	3201      	adds	r2, #1
 8007f5a:	701a      	strb	r2, [r3, #0]
 8007f5c:	230f      	movs	r3, #15
 8007f5e:	18fb      	adds	r3, r7, r3
 8007f60:	781a      	ldrb	r2, [r3, #0]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d3b8      	bcc.n	8007edc <HAL_PCD_Init+0xec>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6818      	ldr	r0, [r3, #0]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	466a      	mov	r2, sp
 8007f72:	0011      	movs	r1, r2
 8007f74:	001a      	movs	r2, r3
 8007f76:	3210      	adds	r2, #16
 8007f78:	ca70      	ldmia	r2!, {r4, r5, r6}
 8007f7a:	c170      	stmia	r1!, {r4, r5, r6}
 8007f7c:	ca30      	ldmia	r2!, {r4, r5}
 8007f7e:	c130      	stmia	r1!, {r4, r5}
 8007f80:	6859      	ldr	r1, [r3, #4]
 8007f82:	689a      	ldr	r2, [r3, #8]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	f003 f999 	bl	800b2bc <USB_DevInit>
 8007f8a:	1e03      	subs	r3, r0, #0
 8007f8c:	d005      	beq.n	8007f9a <HAL_PCD_Init+0x1aa>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	4a10      	ldr	r2, [pc, #64]	; (8007fd4 <HAL_PCD_Init+0x1e4>)
 8007f92:	2102      	movs	r1, #2
 8007f94:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
 8007f98:	e018      	b.n	8007fcc <HAL_PCD_Init+0x1dc>
  }

  hpcd->USB_Address = 0U;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2224      	movs	r2, #36	; 0x24
 8007f9e:	2100      	movs	r1, #0
 8007fa0:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	4a0b      	ldr	r2, [pc, #44]	; (8007fd4 <HAL_PCD_Init+0x1e4>)
 8007fa6:	2101      	movs	r1, #1
 8007fa8:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	69db      	ldr	r3, [r3, #28]
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d103      	bne.n	8007fba <HAL_PCD_Init+0x1ca>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	0018      	movs	r0, r3
 8007fb6:	f000 f834 	bl	8008022 <HAL_PCDEx_ActivateLPM>
  }


  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable == 1U)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6a1b      	ldr	r3, [r3, #32]
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d103      	bne.n	8007fca <HAL_PCD_Init+0x1da>
  {
    (void)HAL_PCDEx_ActivateBCD(hpcd);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	0018      	movs	r0, r3
 8007fc6:	f000 f807 	bl	8007fd8 <HAL_PCDEx_ActivateBCD>
  }

  return HAL_OK;
 8007fca:	2300      	movs	r3, #0
}
 8007fcc:	0018      	movs	r0, r3
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	b005      	add	sp, #20
 8007fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fd4:	00000229 	.word	0x00000229

08007fd8 <HAL_PCDEx_ActivateBCD>:
  * @brief  Activate BatteryCharging feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  USB_TypeDef *USBx = hpcd->Instance;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	60fb      	str	r3, [r7, #12]
  hpcd->battery_charging_active = 1U;
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	239b      	movs	r3, #155	; 0x9b
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	2101      	movs	r1, #1
 8007fee:	50d1      	str	r1, [r2, r3]

  USBx->BCDR |= (USB_BCDR_BCDEN);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2258      	movs	r2, #88	; 0x58
 8007ff4:	5a9b      	ldrh	r3, [r3, r2]
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	b299      	uxth	r1, r3
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2258      	movs	r2, #88	; 0x58
 8008002:	5299      	strh	r1, [r3, r2]
  /* Enable DCD : Data Contact Detect */
  USBx->BCDR |= (USB_BCDR_DCDEN);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2258      	movs	r2, #88	; 0x58
 8008008:	5a9b      	ldrh	r3, [r3, r2]
 800800a:	b29b      	uxth	r3, r3
 800800c:	2202      	movs	r2, #2
 800800e:	4313      	orrs	r3, r2
 8008010:	b299      	uxth	r1, r3
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2258      	movs	r2, #88	; 0x58
 8008016:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	0018      	movs	r0, r3
 800801c:	46bd      	mov	sp, r7
 800801e:	b004      	add	sp, #16
 8008020:	bd80      	pop	{r7, pc}

08008022 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008022:	b580      	push	{r7, lr}
 8008024:	b084      	sub	sp, #16
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	239a      	movs	r3, #154	; 0x9a
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	2101      	movs	r1, #1
 8008038:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	2398      	movs	r3, #152	; 0x98
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	2100      	movs	r1, #0
 8008042:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2254      	movs	r2, #84	; 0x54
 8008048:	5a9b      	ldrh	r3, [r3, r2]
 800804a:	b29b      	uxth	r3, r3
 800804c:	2201      	movs	r2, #1
 800804e:	4313      	orrs	r3, r2
 8008050:	b299      	uxth	r1, r3
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2254      	movs	r2, #84	; 0x54
 8008056:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2254      	movs	r2, #84	; 0x54
 800805c:	5a9b      	ldrh	r3, [r3, r2]
 800805e:	b29b      	uxth	r3, r3
 8008060:	2202      	movs	r2, #2
 8008062:	4313      	orrs	r3, r2
 8008064:	b299      	uxth	r1, r3
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2254      	movs	r2, #84	; 0x54
 800806a:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800806c:	2300      	movs	r3, #0
}
 800806e:	0018      	movs	r0, r3
 8008070:	46bd      	mov	sp, r7
 8008072:	b004      	add	sp, #16
 8008074:	bd80      	pop	{r7, pc}
	...

08008078 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 800807c:	4b04      	ldr	r3, [pc, #16]	; (8008090 <HAL_PWR_EnableBkUpAccess+0x18>)
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	4b03      	ldr	r3, [pc, #12]	; (8008090 <HAL_PWR_EnableBkUpAccess+0x18>)
 8008082:	2180      	movs	r1, #128	; 0x80
 8008084:	0049      	lsls	r1, r1, #1
 8008086:	430a      	orrs	r2, r1
 8008088:	601a      	str	r2, [r3, #0]
}
 800808a:	46c0      	nop			; (mov r8, r8)
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}
 8008090:	40007000 	.word	0x40007000

08008094 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008094:	b5b0      	push	{r4, r5, r7, lr}
 8008096:	b08a      	sub	sp, #40	; 0x28
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d102      	bne.n	80080a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	f000 fbbc 	bl	8008820 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80080a8:	4bc8      	ldr	r3, [pc, #800]	; (80083cc <HAL_RCC_OscConfig+0x338>)
 80080aa:	68db      	ldr	r3, [r3, #12]
 80080ac:	220c      	movs	r2, #12
 80080ae:	4013      	ands	r3, r2
 80080b0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80080b2:	4bc6      	ldr	r3, [pc, #792]	; (80083cc <HAL_RCC_OscConfig+0x338>)
 80080b4:	68da      	ldr	r2, [r3, #12]
 80080b6:	2380      	movs	r3, #128	; 0x80
 80080b8:	025b      	lsls	r3, r3, #9
 80080ba:	4013      	ands	r3, r2
 80080bc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	2201      	movs	r2, #1
 80080c4:	4013      	ands	r3, r2
 80080c6:	d100      	bne.n	80080ca <HAL_RCC_OscConfig+0x36>
 80080c8:	e07e      	b.n	80081c8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80080ca:	69fb      	ldr	r3, [r7, #28]
 80080cc:	2b08      	cmp	r3, #8
 80080ce:	d007      	beq.n	80080e0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80080d0:	69fb      	ldr	r3, [r7, #28]
 80080d2:	2b0c      	cmp	r3, #12
 80080d4:	d112      	bne.n	80080fc <HAL_RCC_OscConfig+0x68>
 80080d6:	69ba      	ldr	r2, [r7, #24]
 80080d8:	2380      	movs	r3, #128	; 0x80
 80080da:	025b      	lsls	r3, r3, #9
 80080dc:	429a      	cmp	r2, r3
 80080de:	d10d      	bne.n	80080fc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080e0:	4bba      	ldr	r3, [pc, #744]	; (80083cc <HAL_RCC_OscConfig+0x338>)
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	2380      	movs	r3, #128	; 0x80
 80080e6:	029b      	lsls	r3, r3, #10
 80080e8:	4013      	ands	r3, r2
 80080ea:	d100      	bne.n	80080ee <HAL_RCC_OscConfig+0x5a>
 80080ec:	e06b      	b.n	80081c6 <HAL_RCC_OscConfig+0x132>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d167      	bne.n	80081c6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	f000 fb92 	bl	8008820 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	685a      	ldr	r2, [r3, #4]
 8008100:	2380      	movs	r3, #128	; 0x80
 8008102:	025b      	lsls	r3, r3, #9
 8008104:	429a      	cmp	r2, r3
 8008106:	d107      	bne.n	8008118 <HAL_RCC_OscConfig+0x84>
 8008108:	4bb0      	ldr	r3, [pc, #704]	; (80083cc <HAL_RCC_OscConfig+0x338>)
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	4baf      	ldr	r3, [pc, #700]	; (80083cc <HAL_RCC_OscConfig+0x338>)
 800810e:	2180      	movs	r1, #128	; 0x80
 8008110:	0249      	lsls	r1, r1, #9
 8008112:	430a      	orrs	r2, r1
 8008114:	601a      	str	r2, [r3, #0]
 8008116:	e027      	b.n	8008168 <HAL_RCC_OscConfig+0xd4>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	685a      	ldr	r2, [r3, #4]
 800811c:	23a0      	movs	r3, #160	; 0xa0
 800811e:	02db      	lsls	r3, r3, #11
 8008120:	429a      	cmp	r2, r3
 8008122:	d10e      	bne.n	8008142 <HAL_RCC_OscConfig+0xae>
 8008124:	4ba9      	ldr	r3, [pc, #676]	; (80083cc <HAL_RCC_OscConfig+0x338>)
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	4ba8      	ldr	r3, [pc, #672]	; (80083cc <HAL_RCC_OscConfig+0x338>)
 800812a:	2180      	movs	r1, #128	; 0x80
 800812c:	02c9      	lsls	r1, r1, #11
 800812e:	430a      	orrs	r2, r1
 8008130:	601a      	str	r2, [r3, #0]
 8008132:	4ba6      	ldr	r3, [pc, #664]	; (80083cc <HAL_RCC_OscConfig+0x338>)
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	4ba5      	ldr	r3, [pc, #660]	; (80083cc <HAL_RCC_OscConfig+0x338>)
 8008138:	2180      	movs	r1, #128	; 0x80
 800813a:	0249      	lsls	r1, r1, #9
 800813c:	430a      	orrs	r2, r1
 800813e:	601a      	str	r2, [r3, #0]
 8008140:	e012      	b.n	8008168 <HAL_RCC_OscConfig+0xd4>
 8008142:	4ba2      	ldr	r3, [pc, #648]	; (80083cc <HAL_RCC_OscConfig+0x338>)
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	4ba1      	ldr	r3, [pc, #644]	; (80083cc <HAL_RCC_OscConfig+0x338>)
 8008148:	49a1      	ldr	r1, [pc, #644]	; (80083d0 <HAL_RCC_OscConfig+0x33c>)
 800814a:	400a      	ands	r2, r1
 800814c:	601a      	str	r2, [r3, #0]
 800814e:	4b9f      	ldr	r3, [pc, #636]	; (80083cc <HAL_RCC_OscConfig+0x338>)
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	2380      	movs	r3, #128	; 0x80
 8008154:	025b      	lsls	r3, r3, #9
 8008156:	4013      	ands	r3, r2
 8008158:	60fb      	str	r3, [r7, #12]
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	4b9b      	ldr	r3, [pc, #620]	; (80083cc <HAL_RCC_OscConfig+0x338>)
 800815e:	681a      	ldr	r2, [r3, #0]
 8008160:	4b9a      	ldr	r3, [pc, #616]	; (80083cc <HAL_RCC_OscConfig+0x338>)
 8008162:	499c      	ldr	r1, [pc, #624]	; (80083d4 <HAL_RCC_OscConfig+0x340>)
 8008164:	400a      	ands	r2, r1
 8008166:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d015      	beq.n	800819c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008170:	f7fe fd98 	bl	8006ca4 <HAL_GetTick>
 8008174:	0003      	movs	r3, r0
 8008176:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008178:	e009      	b.n	800818e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800817a:	f7fe fd93 	bl	8006ca4 <HAL_GetTick>
 800817e:	0002      	movs	r2, r0
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	1ad3      	subs	r3, r2, r3
 8008184:	2b64      	cmp	r3, #100	; 0x64
 8008186:	d902      	bls.n	800818e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008188:	2303      	movs	r3, #3
 800818a:	f000 fb49 	bl	8008820 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800818e:	4b8f      	ldr	r3, [pc, #572]	; (80083cc <HAL_RCC_OscConfig+0x338>)
 8008190:	681a      	ldr	r2, [r3, #0]
 8008192:	2380      	movs	r3, #128	; 0x80
 8008194:	029b      	lsls	r3, r3, #10
 8008196:	4013      	ands	r3, r2
 8008198:	d0ef      	beq.n	800817a <HAL_RCC_OscConfig+0xe6>
 800819a:	e015      	b.n	80081c8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800819c:	f7fe fd82 	bl	8006ca4 <HAL_GetTick>
 80081a0:	0003      	movs	r3, r0
 80081a2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80081a4:	e008      	b.n	80081b8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80081a6:	f7fe fd7d 	bl	8006ca4 <HAL_GetTick>
 80081aa:	0002      	movs	r2, r0
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	1ad3      	subs	r3, r2, r3
 80081b0:	2b64      	cmp	r3, #100	; 0x64
 80081b2:	d901      	bls.n	80081b8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80081b4:	2303      	movs	r3, #3
 80081b6:	e333      	b.n	8008820 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80081b8:	4b84      	ldr	r3, [pc, #528]	; (80083cc <HAL_RCC_OscConfig+0x338>)
 80081ba:	681a      	ldr	r2, [r3, #0]
 80081bc:	2380      	movs	r3, #128	; 0x80
 80081be:	029b      	lsls	r3, r3, #10
 80081c0:	4013      	ands	r3, r2
 80081c2:	d1f0      	bne.n	80081a6 <HAL_RCC_OscConfig+0x112>
 80081c4:	e000      	b.n	80081c8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80081c6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	2202      	movs	r2, #2
 80081ce:	4013      	ands	r3, r2
 80081d0:	d100      	bne.n	80081d4 <HAL_RCC_OscConfig+0x140>
 80081d2:	e098      	b.n	8008306 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80081da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081dc:	2220      	movs	r2, #32
 80081de:	4013      	ands	r3, r2
 80081e0:	d009      	beq.n	80081f6 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80081e2:	4b7a      	ldr	r3, [pc, #488]	; (80083cc <HAL_RCC_OscConfig+0x338>)
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	4b79      	ldr	r3, [pc, #484]	; (80083cc <HAL_RCC_OscConfig+0x338>)
 80081e8:	2120      	movs	r1, #32
 80081ea:	430a      	orrs	r2, r1
 80081ec:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80081ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f0:	2220      	movs	r2, #32
 80081f2:	4393      	bics	r3, r2
 80081f4:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80081f6:	69fb      	ldr	r3, [r7, #28]
 80081f8:	2b04      	cmp	r3, #4
 80081fa:	d005      	beq.n	8008208 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80081fc:	69fb      	ldr	r3, [r7, #28]
 80081fe:	2b0c      	cmp	r3, #12
 8008200:	d13d      	bne.n	800827e <HAL_RCC_OscConfig+0x1ea>
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d13a      	bne.n	800827e <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8008208:	4b70      	ldr	r3, [pc, #448]	; (80083cc <HAL_RCC_OscConfig+0x338>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	2204      	movs	r2, #4
 800820e:	4013      	ands	r3, r2
 8008210:	d004      	beq.n	800821c <HAL_RCC_OscConfig+0x188>
 8008212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008214:	2b00      	cmp	r3, #0
 8008216:	d101      	bne.n	800821c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8008218:	2301      	movs	r3, #1
 800821a:	e301      	b.n	8008820 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800821c:	4b6b      	ldr	r3, [pc, #428]	; (80083cc <HAL_RCC_OscConfig+0x338>)
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	4a6d      	ldr	r2, [pc, #436]	; (80083d8 <HAL_RCC_OscConfig+0x344>)
 8008222:	4013      	ands	r3, r2
 8008224:	0019      	movs	r1, r3
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	691b      	ldr	r3, [r3, #16]
 800822a:	021a      	lsls	r2, r3, #8
 800822c:	4b67      	ldr	r3, [pc, #412]	; (80083cc <HAL_RCC_OscConfig+0x338>)
 800822e:	430a      	orrs	r2, r1
 8008230:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8008232:	4b66      	ldr	r3, [pc, #408]	; (80083cc <HAL_RCC_OscConfig+0x338>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	2209      	movs	r2, #9
 8008238:	4393      	bics	r3, r2
 800823a:	0019      	movs	r1, r3
 800823c:	4b63      	ldr	r3, [pc, #396]	; (80083cc <HAL_RCC_OscConfig+0x338>)
 800823e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008240:	430a      	orrs	r2, r1
 8008242:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008244:	f000 fc20 	bl	8008a88 <HAL_RCC_GetSysClockFreq>
 8008248:	0001      	movs	r1, r0
 800824a:	4b60      	ldr	r3, [pc, #384]	; (80083cc <HAL_RCC_OscConfig+0x338>)
 800824c:	68db      	ldr	r3, [r3, #12]
 800824e:	091b      	lsrs	r3, r3, #4
 8008250:	220f      	movs	r2, #15
 8008252:	4013      	ands	r3, r2
 8008254:	4a61      	ldr	r2, [pc, #388]	; (80083dc <HAL_RCC_OscConfig+0x348>)
 8008256:	5cd3      	ldrb	r3, [r2, r3]
 8008258:	000a      	movs	r2, r1
 800825a:	40da      	lsrs	r2, r3
 800825c:	4b60      	ldr	r3, [pc, #384]	; (80083e0 <HAL_RCC_OscConfig+0x34c>)
 800825e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8008260:	2513      	movs	r5, #19
 8008262:	197c      	adds	r4, r7, r5
 8008264:	2000      	movs	r0, #0
 8008266:	f7fe fce7 	bl	8006c38 <HAL_InitTick>
 800826a:	0003      	movs	r3, r0
 800826c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800826e:	197b      	adds	r3, r7, r5
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d047      	beq.n	8008306 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8008276:	2313      	movs	r3, #19
 8008278:	18fb      	adds	r3, r7, r3
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	e2d0      	b.n	8008820 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800827e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008280:	2b00      	cmp	r3, #0
 8008282:	d027      	beq.n	80082d4 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8008284:	4b51      	ldr	r3, [pc, #324]	; (80083cc <HAL_RCC_OscConfig+0x338>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	2209      	movs	r2, #9
 800828a:	4393      	bics	r3, r2
 800828c:	0019      	movs	r1, r3
 800828e:	4b4f      	ldr	r3, [pc, #316]	; (80083cc <HAL_RCC_OscConfig+0x338>)
 8008290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008292:	430a      	orrs	r2, r1
 8008294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008296:	f7fe fd05 	bl	8006ca4 <HAL_GetTick>
 800829a:	0003      	movs	r3, r0
 800829c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800829e:	e008      	b.n	80082b2 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80082a0:	f7fe fd00 	bl	8006ca4 <HAL_GetTick>
 80082a4:	0002      	movs	r2, r0
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	1ad3      	subs	r3, r2, r3
 80082aa:	2b02      	cmp	r3, #2
 80082ac:	d901      	bls.n	80082b2 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80082ae:	2303      	movs	r3, #3
 80082b0:	e2b6      	b.n	8008820 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80082b2:	4b46      	ldr	r3, [pc, #280]	; (80083cc <HAL_RCC_OscConfig+0x338>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	2204      	movs	r2, #4
 80082b8:	4013      	ands	r3, r2
 80082ba:	d0f1      	beq.n	80082a0 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082bc:	4b43      	ldr	r3, [pc, #268]	; (80083cc <HAL_RCC_OscConfig+0x338>)
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	4a45      	ldr	r2, [pc, #276]	; (80083d8 <HAL_RCC_OscConfig+0x344>)
 80082c2:	4013      	ands	r3, r2
 80082c4:	0019      	movs	r1, r3
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	691b      	ldr	r3, [r3, #16]
 80082ca:	021a      	lsls	r2, r3, #8
 80082cc:	4b3f      	ldr	r3, [pc, #252]	; (80083cc <HAL_RCC_OscConfig+0x338>)
 80082ce:	430a      	orrs	r2, r1
 80082d0:	605a      	str	r2, [r3, #4]
 80082d2:	e018      	b.n	8008306 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80082d4:	4b3d      	ldr	r3, [pc, #244]	; (80083cc <HAL_RCC_OscConfig+0x338>)
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	4b3c      	ldr	r3, [pc, #240]	; (80083cc <HAL_RCC_OscConfig+0x338>)
 80082da:	2101      	movs	r1, #1
 80082dc:	438a      	bics	r2, r1
 80082de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082e0:	f7fe fce0 	bl	8006ca4 <HAL_GetTick>
 80082e4:	0003      	movs	r3, r0
 80082e6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80082e8:	e008      	b.n	80082fc <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80082ea:	f7fe fcdb 	bl	8006ca4 <HAL_GetTick>
 80082ee:	0002      	movs	r2, r0
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	1ad3      	subs	r3, r2, r3
 80082f4:	2b02      	cmp	r3, #2
 80082f6:	d901      	bls.n	80082fc <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80082f8:	2303      	movs	r3, #3
 80082fa:	e291      	b.n	8008820 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80082fc:	4b33      	ldr	r3, [pc, #204]	; (80083cc <HAL_RCC_OscConfig+0x338>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	2204      	movs	r2, #4
 8008302:	4013      	ands	r3, r2
 8008304:	d1f1      	bne.n	80082ea <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	2210      	movs	r2, #16
 800830c:	4013      	ands	r3, r2
 800830e:	d100      	bne.n	8008312 <HAL_RCC_OscConfig+0x27e>
 8008310:	e09f      	b.n	8008452 <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8008312:	69fb      	ldr	r3, [r7, #28]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d13f      	bne.n	8008398 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008318:	4b2c      	ldr	r3, [pc, #176]	; (80083cc <HAL_RCC_OscConfig+0x338>)
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	2380      	movs	r3, #128	; 0x80
 800831e:	009b      	lsls	r3, r3, #2
 8008320:	4013      	ands	r3, r2
 8008322:	d005      	beq.n	8008330 <HAL_RCC_OscConfig+0x29c>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	69db      	ldr	r3, [r3, #28]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d101      	bne.n	8008330 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800832c:	2301      	movs	r3, #1
 800832e:	e277      	b.n	8008820 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008330:	4b26      	ldr	r3, [pc, #152]	; (80083cc <HAL_RCC_OscConfig+0x338>)
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	4a2b      	ldr	r2, [pc, #172]	; (80083e4 <HAL_RCC_OscConfig+0x350>)
 8008336:	4013      	ands	r3, r2
 8008338:	0019      	movs	r1, r3
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800833e:	4b23      	ldr	r3, [pc, #140]	; (80083cc <HAL_RCC_OscConfig+0x338>)
 8008340:	430a      	orrs	r2, r1
 8008342:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008344:	4b21      	ldr	r3, [pc, #132]	; (80083cc <HAL_RCC_OscConfig+0x338>)
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	021b      	lsls	r3, r3, #8
 800834a:	0a19      	lsrs	r1, r3, #8
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6a1b      	ldr	r3, [r3, #32]
 8008350:	061a      	lsls	r2, r3, #24
 8008352:	4b1e      	ldr	r3, [pc, #120]	; (80083cc <HAL_RCC_OscConfig+0x338>)
 8008354:	430a      	orrs	r2, r1
 8008356:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800835c:	0b5b      	lsrs	r3, r3, #13
 800835e:	3301      	adds	r3, #1
 8008360:	2280      	movs	r2, #128	; 0x80
 8008362:	0212      	lsls	r2, r2, #8
 8008364:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8008366:	4b19      	ldr	r3, [pc, #100]	; (80083cc <HAL_RCC_OscConfig+0x338>)
 8008368:	68db      	ldr	r3, [r3, #12]
 800836a:	091b      	lsrs	r3, r3, #4
 800836c:	210f      	movs	r1, #15
 800836e:	400b      	ands	r3, r1
 8008370:	491a      	ldr	r1, [pc, #104]	; (80083dc <HAL_RCC_OscConfig+0x348>)
 8008372:	5ccb      	ldrb	r3, [r1, r3]
 8008374:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8008376:	4b1a      	ldr	r3, [pc, #104]	; (80083e0 <HAL_RCC_OscConfig+0x34c>)
 8008378:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 800837a:	2513      	movs	r5, #19
 800837c:	197c      	adds	r4, r7, r5
 800837e:	2000      	movs	r0, #0
 8008380:	f7fe fc5a 	bl	8006c38 <HAL_InitTick>
 8008384:	0003      	movs	r3, r0
 8008386:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8008388:	197b      	adds	r3, r7, r5
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d060      	beq.n	8008452 <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8008390:	2313      	movs	r3, #19
 8008392:	18fb      	adds	r3, r7, r3
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	e243      	b.n	8008820 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	69db      	ldr	r3, [r3, #28]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d03e      	beq.n	800841e <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80083a0:	4b0a      	ldr	r3, [pc, #40]	; (80083cc <HAL_RCC_OscConfig+0x338>)
 80083a2:	681a      	ldr	r2, [r3, #0]
 80083a4:	4b09      	ldr	r3, [pc, #36]	; (80083cc <HAL_RCC_OscConfig+0x338>)
 80083a6:	2180      	movs	r1, #128	; 0x80
 80083a8:	0049      	lsls	r1, r1, #1
 80083aa:	430a      	orrs	r2, r1
 80083ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083ae:	f7fe fc79 	bl	8006ca4 <HAL_GetTick>
 80083b2:	0003      	movs	r3, r0
 80083b4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80083b6:	e017      	b.n	80083e8 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80083b8:	f7fe fc74 	bl	8006ca4 <HAL_GetTick>
 80083bc:	0002      	movs	r2, r0
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	1ad3      	subs	r3, r2, r3
 80083c2:	2b02      	cmp	r3, #2
 80083c4:	d910      	bls.n	80083e8 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 80083c6:	2303      	movs	r3, #3
 80083c8:	e22a      	b.n	8008820 <HAL_RCC_OscConfig+0x78c>
 80083ca:	46c0      	nop			; (mov r8, r8)
 80083cc:	40021000 	.word	0x40021000
 80083d0:	fffeffff 	.word	0xfffeffff
 80083d4:	fffbffff 	.word	0xfffbffff
 80083d8:	ffffe0ff 	.word	0xffffe0ff
 80083dc:	0800c75c 	.word	0x0800c75c
 80083e0:	20000010 	.word	0x20000010
 80083e4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80083e8:	4bc6      	ldr	r3, [pc, #792]	; (8008704 <HAL_RCC_OscConfig+0x670>)
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	2380      	movs	r3, #128	; 0x80
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	4013      	ands	r3, r2
 80083f2:	d0e1      	beq.n	80083b8 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80083f4:	4bc3      	ldr	r3, [pc, #780]	; (8008704 <HAL_RCC_OscConfig+0x670>)
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	4ac3      	ldr	r2, [pc, #780]	; (8008708 <HAL_RCC_OscConfig+0x674>)
 80083fa:	4013      	ands	r3, r2
 80083fc:	0019      	movs	r1, r3
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008402:	4bc0      	ldr	r3, [pc, #768]	; (8008704 <HAL_RCC_OscConfig+0x670>)
 8008404:	430a      	orrs	r2, r1
 8008406:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008408:	4bbe      	ldr	r3, [pc, #760]	; (8008704 <HAL_RCC_OscConfig+0x670>)
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	021b      	lsls	r3, r3, #8
 800840e:	0a19      	lsrs	r1, r3, #8
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6a1b      	ldr	r3, [r3, #32]
 8008414:	061a      	lsls	r2, r3, #24
 8008416:	4bbb      	ldr	r3, [pc, #748]	; (8008704 <HAL_RCC_OscConfig+0x670>)
 8008418:	430a      	orrs	r2, r1
 800841a:	605a      	str	r2, [r3, #4]
 800841c:	e019      	b.n	8008452 <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800841e:	4bb9      	ldr	r3, [pc, #740]	; (8008704 <HAL_RCC_OscConfig+0x670>)
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	4bb8      	ldr	r3, [pc, #736]	; (8008704 <HAL_RCC_OscConfig+0x670>)
 8008424:	49b9      	ldr	r1, [pc, #740]	; (800870c <HAL_RCC_OscConfig+0x678>)
 8008426:	400a      	ands	r2, r1
 8008428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800842a:	f7fe fc3b 	bl	8006ca4 <HAL_GetTick>
 800842e:	0003      	movs	r3, r0
 8008430:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8008432:	e008      	b.n	8008446 <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008434:	f7fe fc36 	bl	8006ca4 <HAL_GetTick>
 8008438:	0002      	movs	r2, r0
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	1ad3      	subs	r3, r2, r3
 800843e:	2b02      	cmp	r3, #2
 8008440:	d901      	bls.n	8008446 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8008442:	2303      	movs	r3, #3
 8008444:	e1ec      	b.n	8008820 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8008446:	4baf      	ldr	r3, [pc, #700]	; (8008704 <HAL_RCC_OscConfig+0x670>)
 8008448:	681a      	ldr	r2, [r3, #0]
 800844a:	2380      	movs	r3, #128	; 0x80
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	4013      	ands	r3, r2
 8008450:	d1f0      	bne.n	8008434 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	2208      	movs	r2, #8
 8008458:	4013      	ands	r3, r2
 800845a:	d036      	beq.n	80084ca <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	695b      	ldr	r3, [r3, #20]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d019      	beq.n	8008498 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008464:	4ba7      	ldr	r3, [pc, #668]	; (8008704 <HAL_RCC_OscConfig+0x670>)
 8008466:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008468:	4ba6      	ldr	r3, [pc, #664]	; (8008704 <HAL_RCC_OscConfig+0x670>)
 800846a:	2101      	movs	r1, #1
 800846c:	430a      	orrs	r2, r1
 800846e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008470:	f7fe fc18 	bl	8006ca4 <HAL_GetTick>
 8008474:	0003      	movs	r3, r0
 8008476:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008478:	e008      	b.n	800848c <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800847a:	f7fe fc13 	bl	8006ca4 <HAL_GetTick>
 800847e:	0002      	movs	r2, r0
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	1ad3      	subs	r3, r2, r3
 8008484:	2b02      	cmp	r3, #2
 8008486:	d901      	bls.n	800848c <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8008488:	2303      	movs	r3, #3
 800848a:	e1c9      	b.n	8008820 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800848c:	4b9d      	ldr	r3, [pc, #628]	; (8008704 <HAL_RCC_OscConfig+0x670>)
 800848e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008490:	2202      	movs	r2, #2
 8008492:	4013      	ands	r3, r2
 8008494:	d0f1      	beq.n	800847a <HAL_RCC_OscConfig+0x3e6>
 8008496:	e018      	b.n	80084ca <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008498:	4b9a      	ldr	r3, [pc, #616]	; (8008704 <HAL_RCC_OscConfig+0x670>)
 800849a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800849c:	4b99      	ldr	r3, [pc, #612]	; (8008704 <HAL_RCC_OscConfig+0x670>)
 800849e:	2101      	movs	r1, #1
 80084a0:	438a      	bics	r2, r1
 80084a2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80084a4:	f7fe fbfe 	bl	8006ca4 <HAL_GetTick>
 80084a8:	0003      	movs	r3, r0
 80084aa:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80084ac:	e008      	b.n	80084c0 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80084ae:	f7fe fbf9 	bl	8006ca4 <HAL_GetTick>
 80084b2:	0002      	movs	r2, r0
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	1ad3      	subs	r3, r2, r3
 80084b8:	2b02      	cmp	r3, #2
 80084ba:	d901      	bls.n	80084c0 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80084bc:	2303      	movs	r3, #3
 80084be:	e1af      	b.n	8008820 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80084c0:	4b90      	ldr	r3, [pc, #576]	; (8008704 <HAL_RCC_OscConfig+0x670>)
 80084c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084c4:	2202      	movs	r2, #2
 80084c6:	4013      	ands	r3, r2
 80084c8:	d1f1      	bne.n	80084ae <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	2204      	movs	r2, #4
 80084d0:	4013      	ands	r3, r2
 80084d2:	d100      	bne.n	80084d6 <HAL_RCC_OscConfig+0x442>
 80084d4:	e0af      	b.n	8008636 <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80084d6:	2323      	movs	r3, #35	; 0x23
 80084d8:	18fb      	adds	r3, r7, r3
 80084da:	2200      	movs	r2, #0
 80084dc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80084de:	4b89      	ldr	r3, [pc, #548]	; (8008704 <HAL_RCC_OscConfig+0x670>)
 80084e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084e2:	2380      	movs	r3, #128	; 0x80
 80084e4:	055b      	lsls	r3, r3, #21
 80084e6:	4013      	ands	r3, r2
 80084e8:	d10a      	bne.n	8008500 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80084ea:	4b86      	ldr	r3, [pc, #536]	; (8008704 <HAL_RCC_OscConfig+0x670>)
 80084ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084ee:	4b85      	ldr	r3, [pc, #532]	; (8008704 <HAL_RCC_OscConfig+0x670>)
 80084f0:	2180      	movs	r1, #128	; 0x80
 80084f2:	0549      	lsls	r1, r1, #21
 80084f4:	430a      	orrs	r2, r1
 80084f6:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80084f8:	2323      	movs	r3, #35	; 0x23
 80084fa:	18fb      	adds	r3, r7, r3
 80084fc:	2201      	movs	r2, #1
 80084fe:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008500:	4b83      	ldr	r3, [pc, #524]	; (8008710 <HAL_RCC_OscConfig+0x67c>)
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	2380      	movs	r3, #128	; 0x80
 8008506:	005b      	lsls	r3, r3, #1
 8008508:	4013      	ands	r3, r2
 800850a:	d11a      	bne.n	8008542 <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800850c:	4b80      	ldr	r3, [pc, #512]	; (8008710 <HAL_RCC_OscConfig+0x67c>)
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	4b7f      	ldr	r3, [pc, #508]	; (8008710 <HAL_RCC_OscConfig+0x67c>)
 8008512:	2180      	movs	r1, #128	; 0x80
 8008514:	0049      	lsls	r1, r1, #1
 8008516:	430a      	orrs	r2, r1
 8008518:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800851a:	f7fe fbc3 	bl	8006ca4 <HAL_GetTick>
 800851e:	0003      	movs	r3, r0
 8008520:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008522:	e008      	b.n	8008536 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008524:	f7fe fbbe 	bl	8006ca4 <HAL_GetTick>
 8008528:	0002      	movs	r2, r0
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	1ad3      	subs	r3, r2, r3
 800852e:	2b64      	cmp	r3, #100	; 0x64
 8008530:	d901      	bls.n	8008536 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008532:	2303      	movs	r3, #3
 8008534:	e174      	b.n	8008820 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008536:	4b76      	ldr	r3, [pc, #472]	; (8008710 <HAL_RCC_OscConfig+0x67c>)
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	2380      	movs	r3, #128	; 0x80
 800853c:	005b      	lsls	r3, r3, #1
 800853e:	4013      	ands	r3, r2
 8008540:	d0f0      	beq.n	8008524 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	689a      	ldr	r2, [r3, #8]
 8008546:	2380      	movs	r3, #128	; 0x80
 8008548:	005b      	lsls	r3, r3, #1
 800854a:	429a      	cmp	r2, r3
 800854c:	d107      	bne.n	800855e <HAL_RCC_OscConfig+0x4ca>
 800854e:	4b6d      	ldr	r3, [pc, #436]	; (8008704 <HAL_RCC_OscConfig+0x670>)
 8008550:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008552:	4b6c      	ldr	r3, [pc, #432]	; (8008704 <HAL_RCC_OscConfig+0x670>)
 8008554:	2180      	movs	r1, #128	; 0x80
 8008556:	0049      	lsls	r1, r1, #1
 8008558:	430a      	orrs	r2, r1
 800855a:	651a      	str	r2, [r3, #80]	; 0x50
 800855c:	e031      	b.n	80085c2 <HAL_RCC_OscConfig+0x52e>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d10c      	bne.n	8008580 <HAL_RCC_OscConfig+0x4ec>
 8008566:	4b67      	ldr	r3, [pc, #412]	; (8008704 <HAL_RCC_OscConfig+0x670>)
 8008568:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800856a:	4b66      	ldr	r3, [pc, #408]	; (8008704 <HAL_RCC_OscConfig+0x670>)
 800856c:	4967      	ldr	r1, [pc, #412]	; (800870c <HAL_RCC_OscConfig+0x678>)
 800856e:	400a      	ands	r2, r1
 8008570:	651a      	str	r2, [r3, #80]	; 0x50
 8008572:	4b64      	ldr	r3, [pc, #400]	; (8008704 <HAL_RCC_OscConfig+0x670>)
 8008574:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008576:	4b63      	ldr	r3, [pc, #396]	; (8008704 <HAL_RCC_OscConfig+0x670>)
 8008578:	4966      	ldr	r1, [pc, #408]	; (8008714 <HAL_RCC_OscConfig+0x680>)
 800857a:	400a      	ands	r2, r1
 800857c:	651a      	str	r2, [r3, #80]	; 0x50
 800857e:	e020      	b.n	80085c2 <HAL_RCC_OscConfig+0x52e>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	689a      	ldr	r2, [r3, #8]
 8008584:	23a0      	movs	r3, #160	; 0xa0
 8008586:	00db      	lsls	r3, r3, #3
 8008588:	429a      	cmp	r2, r3
 800858a:	d10e      	bne.n	80085aa <HAL_RCC_OscConfig+0x516>
 800858c:	4b5d      	ldr	r3, [pc, #372]	; (8008704 <HAL_RCC_OscConfig+0x670>)
 800858e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008590:	4b5c      	ldr	r3, [pc, #368]	; (8008704 <HAL_RCC_OscConfig+0x670>)
 8008592:	2180      	movs	r1, #128	; 0x80
 8008594:	00c9      	lsls	r1, r1, #3
 8008596:	430a      	orrs	r2, r1
 8008598:	651a      	str	r2, [r3, #80]	; 0x50
 800859a:	4b5a      	ldr	r3, [pc, #360]	; (8008704 <HAL_RCC_OscConfig+0x670>)
 800859c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800859e:	4b59      	ldr	r3, [pc, #356]	; (8008704 <HAL_RCC_OscConfig+0x670>)
 80085a0:	2180      	movs	r1, #128	; 0x80
 80085a2:	0049      	lsls	r1, r1, #1
 80085a4:	430a      	orrs	r2, r1
 80085a6:	651a      	str	r2, [r3, #80]	; 0x50
 80085a8:	e00b      	b.n	80085c2 <HAL_RCC_OscConfig+0x52e>
 80085aa:	4b56      	ldr	r3, [pc, #344]	; (8008704 <HAL_RCC_OscConfig+0x670>)
 80085ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80085ae:	4b55      	ldr	r3, [pc, #340]	; (8008704 <HAL_RCC_OscConfig+0x670>)
 80085b0:	4956      	ldr	r1, [pc, #344]	; (800870c <HAL_RCC_OscConfig+0x678>)
 80085b2:	400a      	ands	r2, r1
 80085b4:	651a      	str	r2, [r3, #80]	; 0x50
 80085b6:	4b53      	ldr	r3, [pc, #332]	; (8008704 <HAL_RCC_OscConfig+0x670>)
 80085b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80085ba:	4b52      	ldr	r3, [pc, #328]	; (8008704 <HAL_RCC_OscConfig+0x670>)
 80085bc:	4955      	ldr	r1, [pc, #340]	; (8008714 <HAL_RCC_OscConfig+0x680>)
 80085be:	400a      	ands	r2, r1
 80085c0:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d015      	beq.n	80085f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80085ca:	f7fe fb6b 	bl	8006ca4 <HAL_GetTick>
 80085ce:	0003      	movs	r3, r0
 80085d0:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80085d2:	e009      	b.n	80085e8 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80085d4:	f7fe fb66 	bl	8006ca4 <HAL_GetTick>
 80085d8:	0002      	movs	r2, r0
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	1ad3      	subs	r3, r2, r3
 80085de:	4a4e      	ldr	r2, [pc, #312]	; (8008718 <HAL_RCC_OscConfig+0x684>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d901      	bls.n	80085e8 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 80085e4:	2303      	movs	r3, #3
 80085e6:	e11b      	b.n	8008820 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80085e8:	4b46      	ldr	r3, [pc, #280]	; (8008704 <HAL_RCC_OscConfig+0x670>)
 80085ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80085ec:	2380      	movs	r3, #128	; 0x80
 80085ee:	009b      	lsls	r3, r3, #2
 80085f0:	4013      	ands	r3, r2
 80085f2:	d0ef      	beq.n	80085d4 <HAL_RCC_OscConfig+0x540>
 80085f4:	e014      	b.n	8008620 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80085f6:	f7fe fb55 	bl	8006ca4 <HAL_GetTick>
 80085fa:	0003      	movs	r3, r0
 80085fc:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80085fe:	e009      	b.n	8008614 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008600:	f7fe fb50 	bl	8006ca4 <HAL_GetTick>
 8008604:	0002      	movs	r2, r0
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	1ad3      	subs	r3, r2, r3
 800860a:	4a43      	ldr	r2, [pc, #268]	; (8008718 <HAL_RCC_OscConfig+0x684>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d901      	bls.n	8008614 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8008610:	2303      	movs	r3, #3
 8008612:	e105      	b.n	8008820 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008614:	4b3b      	ldr	r3, [pc, #236]	; (8008704 <HAL_RCC_OscConfig+0x670>)
 8008616:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008618:	2380      	movs	r3, #128	; 0x80
 800861a:	009b      	lsls	r3, r3, #2
 800861c:	4013      	ands	r3, r2
 800861e:	d1ef      	bne.n	8008600 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008620:	2323      	movs	r3, #35	; 0x23
 8008622:	18fb      	adds	r3, r7, r3
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	2b01      	cmp	r3, #1
 8008628:	d105      	bne.n	8008636 <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800862a:	4b36      	ldr	r3, [pc, #216]	; (8008704 <HAL_RCC_OscConfig+0x670>)
 800862c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800862e:	4b35      	ldr	r3, [pc, #212]	; (8008704 <HAL_RCC_OscConfig+0x670>)
 8008630:	493a      	ldr	r1, [pc, #232]	; (800871c <HAL_RCC_OscConfig+0x688>)
 8008632:	400a      	ands	r2, r1
 8008634:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	2220      	movs	r2, #32
 800863c:	4013      	ands	r3, r2
 800863e:	d049      	beq.n	80086d4 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	699b      	ldr	r3, [r3, #24]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d026      	beq.n	8008696 <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8008648:	4b2e      	ldr	r3, [pc, #184]	; (8008704 <HAL_RCC_OscConfig+0x670>)
 800864a:	689a      	ldr	r2, [r3, #8]
 800864c:	4b2d      	ldr	r3, [pc, #180]	; (8008704 <HAL_RCC_OscConfig+0x670>)
 800864e:	2101      	movs	r1, #1
 8008650:	430a      	orrs	r2, r1
 8008652:	609a      	str	r2, [r3, #8]
 8008654:	4b2b      	ldr	r3, [pc, #172]	; (8008704 <HAL_RCC_OscConfig+0x670>)
 8008656:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008658:	4b2a      	ldr	r3, [pc, #168]	; (8008704 <HAL_RCC_OscConfig+0x670>)
 800865a:	2101      	movs	r1, #1
 800865c:	430a      	orrs	r2, r1
 800865e:	635a      	str	r2, [r3, #52]	; 0x34
 8008660:	4b2f      	ldr	r3, [pc, #188]	; (8008720 <HAL_RCC_OscConfig+0x68c>)
 8008662:	6a1a      	ldr	r2, [r3, #32]
 8008664:	4b2e      	ldr	r3, [pc, #184]	; (8008720 <HAL_RCC_OscConfig+0x68c>)
 8008666:	2180      	movs	r1, #128	; 0x80
 8008668:	0189      	lsls	r1, r1, #6
 800866a:	430a      	orrs	r2, r1
 800866c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800866e:	f7fe fb19 	bl	8006ca4 <HAL_GetTick>
 8008672:	0003      	movs	r3, r0
 8008674:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008676:	e008      	b.n	800868a <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008678:	f7fe fb14 	bl	8006ca4 <HAL_GetTick>
 800867c:	0002      	movs	r2, r0
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	1ad3      	subs	r3, r2, r3
 8008682:	2b02      	cmp	r3, #2
 8008684:	d901      	bls.n	800868a <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 8008686:	2303      	movs	r3, #3
 8008688:	e0ca      	b.n	8008820 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800868a:	4b1e      	ldr	r3, [pc, #120]	; (8008704 <HAL_RCC_OscConfig+0x670>)
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	2202      	movs	r2, #2
 8008690:	4013      	ands	r3, r2
 8008692:	d0f1      	beq.n	8008678 <HAL_RCC_OscConfig+0x5e4>
 8008694:	e01e      	b.n	80086d4 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8008696:	4b1b      	ldr	r3, [pc, #108]	; (8008704 <HAL_RCC_OscConfig+0x670>)
 8008698:	689a      	ldr	r2, [r3, #8]
 800869a:	4b1a      	ldr	r3, [pc, #104]	; (8008704 <HAL_RCC_OscConfig+0x670>)
 800869c:	2101      	movs	r1, #1
 800869e:	438a      	bics	r2, r1
 80086a0:	609a      	str	r2, [r3, #8]
 80086a2:	4b1f      	ldr	r3, [pc, #124]	; (8008720 <HAL_RCC_OscConfig+0x68c>)
 80086a4:	6a1a      	ldr	r2, [r3, #32]
 80086a6:	4b1e      	ldr	r3, [pc, #120]	; (8008720 <HAL_RCC_OscConfig+0x68c>)
 80086a8:	491e      	ldr	r1, [pc, #120]	; (8008724 <HAL_RCC_OscConfig+0x690>)
 80086aa:	400a      	ands	r2, r1
 80086ac:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086ae:	f7fe faf9 	bl	8006ca4 <HAL_GetTick>
 80086b2:	0003      	movs	r3, r0
 80086b4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80086b6:	e008      	b.n	80086ca <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80086b8:	f7fe faf4 	bl	8006ca4 <HAL_GetTick>
 80086bc:	0002      	movs	r2, r0
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	1ad3      	subs	r3, r2, r3
 80086c2:	2b02      	cmp	r3, #2
 80086c4:	d901      	bls.n	80086ca <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 80086c6:	2303      	movs	r3, #3
 80086c8:	e0aa      	b.n	8008820 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80086ca:	4b0e      	ldr	r3, [pc, #56]	; (8008704 <HAL_RCC_OscConfig+0x670>)
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	2202      	movs	r2, #2
 80086d0:	4013      	ands	r3, r2
 80086d2:	d1f1      	bne.n	80086b8 <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d100      	bne.n	80086de <HAL_RCC_OscConfig+0x64a>
 80086dc:	e09f      	b.n	800881e <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	2b0c      	cmp	r3, #12
 80086e2:	d100      	bne.n	80086e6 <HAL_RCC_OscConfig+0x652>
 80086e4:	e078      	b.n	80087d8 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ea:	2b02      	cmp	r3, #2
 80086ec:	d159      	bne.n	80087a2 <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086ee:	4b05      	ldr	r3, [pc, #20]	; (8008704 <HAL_RCC_OscConfig+0x670>)
 80086f0:	681a      	ldr	r2, [r3, #0]
 80086f2:	4b04      	ldr	r3, [pc, #16]	; (8008704 <HAL_RCC_OscConfig+0x670>)
 80086f4:	490c      	ldr	r1, [pc, #48]	; (8008728 <HAL_RCC_OscConfig+0x694>)
 80086f6:	400a      	ands	r2, r1
 80086f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086fa:	f7fe fad3 	bl	8006ca4 <HAL_GetTick>
 80086fe:	0003      	movs	r3, r0
 8008700:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8008702:	e01c      	b.n	800873e <HAL_RCC_OscConfig+0x6aa>
 8008704:	40021000 	.word	0x40021000
 8008708:	ffff1fff 	.word	0xffff1fff
 800870c:	fffffeff 	.word	0xfffffeff
 8008710:	40007000 	.word	0x40007000
 8008714:	fffffbff 	.word	0xfffffbff
 8008718:	00001388 	.word	0x00001388
 800871c:	efffffff 	.word	0xefffffff
 8008720:	40010000 	.word	0x40010000
 8008724:	ffffdfff 	.word	0xffffdfff
 8008728:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800872c:	f7fe faba 	bl	8006ca4 <HAL_GetTick>
 8008730:	0002      	movs	r2, r0
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	1ad3      	subs	r3, r2, r3
 8008736:	2b02      	cmp	r3, #2
 8008738:	d901      	bls.n	800873e <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 800873a:	2303      	movs	r3, #3
 800873c:	e070      	b.n	8008820 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800873e:	4b3a      	ldr	r3, [pc, #232]	; (8008828 <HAL_RCC_OscConfig+0x794>)
 8008740:	681a      	ldr	r2, [r3, #0]
 8008742:	2380      	movs	r3, #128	; 0x80
 8008744:	049b      	lsls	r3, r3, #18
 8008746:	4013      	ands	r3, r2
 8008748:	d1f0      	bne.n	800872c <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800874a:	4b37      	ldr	r3, [pc, #220]	; (8008828 <HAL_RCC_OscConfig+0x794>)
 800874c:	68db      	ldr	r3, [r3, #12]
 800874e:	4a37      	ldr	r2, [pc, #220]	; (800882c <HAL_RCC_OscConfig+0x798>)
 8008750:	4013      	ands	r3, r2
 8008752:	0019      	movs	r1, r3
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800875c:	431a      	orrs	r2, r3
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008762:	431a      	orrs	r2, r3
 8008764:	4b30      	ldr	r3, [pc, #192]	; (8008828 <HAL_RCC_OscConfig+0x794>)
 8008766:	430a      	orrs	r2, r1
 8008768:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800876a:	4b2f      	ldr	r3, [pc, #188]	; (8008828 <HAL_RCC_OscConfig+0x794>)
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	4b2e      	ldr	r3, [pc, #184]	; (8008828 <HAL_RCC_OscConfig+0x794>)
 8008770:	2180      	movs	r1, #128	; 0x80
 8008772:	0449      	lsls	r1, r1, #17
 8008774:	430a      	orrs	r2, r1
 8008776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008778:	f7fe fa94 	bl	8006ca4 <HAL_GetTick>
 800877c:	0003      	movs	r3, r0
 800877e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8008780:	e008      	b.n	8008794 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008782:	f7fe fa8f 	bl	8006ca4 <HAL_GetTick>
 8008786:	0002      	movs	r2, r0
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	1ad3      	subs	r3, r2, r3
 800878c:	2b02      	cmp	r3, #2
 800878e:	d901      	bls.n	8008794 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 8008790:	2303      	movs	r3, #3
 8008792:	e045      	b.n	8008820 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8008794:	4b24      	ldr	r3, [pc, #144]	; (8008828 <HAL_RCC_OscConfig+0x794>)
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	2380      	movs	r3, #128	; 0x80
 800879a:	049b      	lsls	r3, r3, #18
 800879c:	4013      	ands	r3, r2
 800879e:	d0f0      	beq.n	8008782 <HAL_RCC_OscConfig+0x6ee>
 80087a0:	e03d      	b.n	800881e <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087a2:	4b21      	ldr	r3, [pc, #132]	; (8008828 <HAL_RCC_OscConfig+0x794>)
 80087a4:	681a      	ldr	r2, [r3, #0]
 80087a6:	4b20      	ldr	r3, [pc, #128]	; (8008828 <HAL_RCC_OscConfig+0x794>)
 80087a8:	4921      	ldr	r1, [pc, #132]	; (8008830 <HAL_RCC_OscConfig+0x79c>)
 80087aa:	400a      	ands	r2, r1
 80087ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087ae:	f7fe fa79 	bl	8006ca4 <HAL_GetTick>
 80087b2:	0003      	movs	r3, r0
 80087b4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80087b6:	e008      	b.n	80087ca <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80087b8:	f7fe fa74 	bl	8006ca4 <HAL_GetTick>
 80087bc:	0002      	movs	r2, r0
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	1ad3      	subs	r3, r2, r3
 80087c2:	2b02      	cmp	r3, #2
 80087c4:	d901      	bls.n	80087ca <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 80087c6:	2303      	movs	r3, #3
 80087c8:	e02a      	b.n	8008820 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80087ca:	4b17      	ldr	r3, [pc, #92]	; (8008828 <HAL_RCC_OscConfig+0x794>)
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	2380      	movs	r3, #128	; 0x80
 80087d0:	049b      	lsls	r3, r3, #18
 80087d2:	4013      	ands	r3, r2
 80087d4:	d1f0      	bne.n	80087b8 <HAL_RCC_OscConfig+0x724>
 80087d6:	e022      	b.n	800881e <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d101      	bne.n	80087e4 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 80087e0:	2301      	movs	r3, #1
 80087e2:	e01d      	b.n	8008820 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80087e4:	4b10      	ldr	r3, [pc, #64]	; (8008828 <HAL_RCC_OscConfig+0x794>)
 80087e6:	68db      	ldr	r3, [r3, #12]
 80087e8:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087ea:	69ba      	ldr	r2, [r7, #24]
 80087ec:	2380      	movs	r3, #128	; 0x80
 80087ee:	025b      	lsls	r3, r3, #9
 80087f0:	401a      	ands	r2, r3
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d10f      	bne.n	800881a <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80087fa:	69ba      	ldr	r2, [r7, #24]
 80087fc:	23f0      	movs	r3, #240	; 0xf0
 80087fe:	039b      	lsls	r3, r3, #14
 8008800:	401a      	ands	r2, r3
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008806:	429a      	cmp	r2, r3
 8008808:	d107      	bne.n	800881a <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800880a:	69ba      	ldr	r2, [r7, #24]
 800880c:	23c0      	movs	r3, #192	; 0xc0
 800880e:	041b      	lsls	r3, r3, #16
 8008810:	401a      	ands	r2, r3
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8008816:	429a      	cmp	r2, r3
 8008818:	d001      	beq.n	800881e <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 800881a:	2301      	movs	r3, #1
 800881c:	e000      	b.n	8008820 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 800881e:	2300      	movs	r3, #0
}
 8008820:	0018      	movs	r0, r3
 8008822:	46bd      	mov	sp, r7
 8008824:	b00a      	add	sp, #40	; 0x28
 8008826:	bdb0      	pop	{r4, r5, r7, pc}
 8008828:	40021000 	.word	0x40021000
 800882c:	ff02ffff 	.word	0xff02ffff
 8008830:	feffffff 	.word	0xfeffffff

08008834 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008834:	b5b0      	push	{r4, r5, r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d101      	bne.n	8008848 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008844:	2301      	movs	r3, #1
 8008846:	e10d      	b.n	8008a64 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008848:	4b88      	ldr	r3, [pc, #544]	; (8008a6c <HAL_RCC_ClockConfig+0x238>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	2201      	movs	r2, #1
 800884e:	4013      	ands	r3, r2
 8008850:	683a      	ldr	r2, [r7, #0]
 8008852:	429a      	cmp	r2, r3
 8008854:	d911      	bls.n	800887a <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008856:	4b85      	ldr	r3, [pc, #532]	; (8008a6c <HAL_RCC_ClockConfig+0x238>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2201      	movs	r2, #1
 800885c:	4393      	bics	r3, r2
 800885e:	0019      	movs	r1, r3
 8008860:	4b82      	ldr	r3, [pc, #520]	; (8008a6c <HAL_RCC_ClockConfig+0x238>)
 8008862:	683a      	ldr	r2, [r7, #0]
 8008864:	430a      	orrs	r2, r1
 8008866:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008868:	4b80      	ldr	r3, [pc, #512]	; (8008a6c <HAL_RCC_ClockConfig+0x238>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	2201      	movs	r2, #1
 800886e:	4013      	ands	r3, r2
 8008870:	683a      	ldr	r2, [r7, #0]
 8008872:	429a      	cmp	r2, r3
 8008874:	d001      	beq.n	800887a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	e0f4      	b.n	8008a64 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	2202      	movs	r2, #2
 8008880:	4013      	ands	r3, r2
 8008882:	d009      	beq.n	8008898 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008884:	4b7a      	ldr	r3, [pc, #488]	; (8008a70 <HAL_RCC_ClockConfig+0x23c>)
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	22f0      	movs	r2, #240	; 0xf0
 800888a:	4393      	bics	r3, r2
 800888c:	0019      	movs	r1, r3
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	689a      	ldr	r2, [r3, #8]
 8008892:	4b77      	ldr	r3, [pc, #476]	; (8008a70 <HAL_RCC_ClockConfig+0x23c>)
 8008894:	430a      	orrs	r2, r1
 8008896:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	2201      	movs	r2, #1
 800889e:	4013      	ands	r3, r2
 80088a0:	d100      	bne.n	80088a4 <HAL_RCC_ClockConfig+0x70>
 80088a2:	e089      	b.n	80089b8 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	2b02      	cmp	r3, #2
 80088aa:	d107      	bne.n	80088bc <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80088ac:	4b70      	ldr	r3, [pc, #448]	; (8008a70 <HAL_RCC_ClockConfig+0x23c>)
 80088ae:	681a      	ldr	r2, [r3, #0]
 80088b0:	2380      	movs	r3, #128	; 0x80
 80088b2:	029b      	lsls	r3, r3, #10
 80088b4:	4013      	ands	r3, r2
 80088b6:	d120      	bne.n	80088fa <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80088b8:	2301      	movs	r3, #1
 80088ba:	e0d3      	b.n	8008a64 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	2b03      	cmp	r3, #3
 80088c2:	d107      	bne.n	80088d4 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80088c4:	4b6a      	ldr	r3, [pc, #424]	; (8008a70 <HAL_RCC_ClockConfig+0x23c>)
 80088c6:	681a      	ldr	r2, [r3, #0]
 80088c8:	2380      	movs	r3, #128	; 0x80
 80088ca:	049b      	lsls	r3, r3, #18
 80088cc:	4013      	ands	r3, r2
 80088ce:	d114      	bne.n	80088fa <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80088d0:	2301      	movs	r3, #1
 80088d2:	e0c7      	b.n	8008a64 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d106      	bne.n	80088ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80088dc:	4b64      	ldr	r3, [pc, #400]	; (8008a70 <HAL_RCC_ClockConfig+0x23c>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	2204      	movs	r2, #4
 80088e2:	4013      	ands	r3, r2
 80088e4:	d109      	bne.n	80088fa <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80088e6:	2301      	movs	r3, #1
 80088e8:	e0bc      	b.n	8008a64 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80088ea:	4b61      	ldr	r3, [pc, #388]	; (8008a70 <HAL_RCC_ClockConfig+0x23c>)
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	2380      	movs	r3, #128	; 0x80
 80088f0:	009b      	lsls	r3, r3, #2
 80088f2:	4013      	ands	r3, r2
 80088f4:	d101      	bne.n	80088fa <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80088f6:	2301      	movs	r3, #1
 80088f8:	e0b4      	b.n	8008a64 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80088fa:	4b5d      	ldr	r3, [pc, #372]	; (8008a70 <HAL_RCC_ClockConfig+0x23c>)
 80088fc:	68db      	ldr	r3, [r3, #12]
 80088fe:	2203      	movs	r2, #3
 8008900:	4393      	bics	r3, r2
 8008902:	0019      	movs	r1, r3
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	685a      	ldr	r2, [r3, #4]
 8008908:	4b59      	ldr	r3, [pc, #356]	; (8008a70 <HAL_RCC_ClockConfig+0x23c>)
 800890a:	430a      	orrs	r2, r1
 800890c:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800890e:	f7fe f9c9 	bl	8006ca4 <HAL_GetTick>
 8008912:	0003      	movs	r3, r0
 8008914:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	2b02      	cmp	r3, #2
 800891c:	d111      	bne.n	8008942 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800891e:	e009      	b.n	8008934 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008920:	f7fe f9c0 	bl	8006ca4 <HAL_GetTick>
 8008924:	0002      	movs	r2, r0
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	1ad3      	subs	r3, r2, r3
 800892a:	4a52      	ldr	r2, [pc, #328]	; (8008a74 <HAL_RCC_ClockConfig+0x240>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d901      	bls.n	8008934 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8008930:	2303      	movs	r3, #3
 8008932:	e097      	b.n	8008a64 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008934:	4b4e      	ldr	r3, [pc, #312]	; (8008a70 <HAL_RCC_ClockConfig+0x23c>)
 8008936:	68db      	ldr	r3, [r3, #12]
 8008938:	220c      	movs	r2, #12
 800893a:	4013      	ands	r3, r2
 800893c:	2b08      	cmp	r3, #8
 800893e:	d1ef      	bne.n	8008920 <HAL_RCC_ClockConfig+0xec>
 8008940:	e03a      	b.n	80089b8 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	2b03      	cmp	r3, #3
 8008948:	d111      	bne.n	800896e <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800894a:	e009      	b.n	8008960 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800894c:	f7fe f9aa 	bl	8006ca4 <HAL_GetTick>
 8008950:	0002      	movs	r2, r0
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	1ad3      	subs	r3, r2, r3
 8008956:	4a47      	ldr	r2, [pc, #284]	; (8008a74 <HAL_RCC_ClockConfig+0x240>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d901      	bls.n	8008960 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 800895c:	2303      	movs	r3, #3
 800895e:	e081      	b.n	8008a64 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008960:	4b43      	ldr	r3, [pc, #268]	; (8008a70 <HAL_RCC_ClockConfig+0x23c>)
 8008962:	68db      	ldr	r3, [r3, #12]
 8008964:	220c      	movs	r2, #12
 8008966:	4013      	ands	r3, r2
 8008968:	2b0c      	cmp	r3, #12
 800896a:	d1ef      	bne.n	800894c <HAL_RCC_ClockConfig+0x118>
 800896c:	e024      	b.n	80089b8 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	2b01      	cmp	r3, #1
 8008974:	d11b      	bne.n	80089ae <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008976:	e009      	b.n	800898c <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008978:	f7fe f994 	bl	8006ca4 <HAL_GetTick>
 800897c:	0002      	movs	r2, r0
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	1ad3      	subs	r3, r2, r3
 8008982:	4a3c      	ldr	r2, [pc, #240]	; (8008a74 <HAL_RCC_ClockConfig+0x240>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d901      	bls.n	800898c <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8008988:	2303      	movs	r3, #3
 800898a:	e06b      	b.n	8008a64 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800898c:	4b38      	ldr	r3, [pc, #224]	; (8008a70 <HAL_RCC_ClockConfig+0x23c>)
 800898e:	68db      	ldr	r3, [r3, #12]
 8008990:	220c      	movs	r2, #12
 8008992:	4013      	ands	r3, r2
 8008994:	2b04      	cmp	r3, #4
 8008996:	d1ef      	bne.n	8008978 <HAL_RCC_ClockConfig+0x144>
 8008998:	e00e      	b.n	80089b8 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800899a:	f7fe f983 	bl	8006ca4 <HAL_GetTick>
 800899e:	0002      	movs	r2, r0
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	1ad3      	subs	r3, r2, r3
 80089a4:	4a33      	ldr	r2, [pc, #204]	; (8008a74 <HAL_RCC_ClockConfig+0x240>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d901      	bls.n	80089ae <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 80089aa:	2303      	movs	r3, #3
 80089ac:	e05a      	b.n	8008a64 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80089ae:	4b30      	ldr	r3, [pc, #192]	; (8008a70 <HAL_RCC_ClockConfig+0x23c>)
 80089b0:	68db      	ldr	r3, [r3, #12]
 80089b2:	220c      	movs	r2, #12
 80089b4:	4013      	ands	r3, r2
 80089b6:	d1f0      	bne.n	800899a <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80089b8:	4b2c      	ldr	r3, [pc, #176]	; (8008a6c <HAL_RCC_ClockConfig+0x238>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	2201      	movs	r2, #1
 80089be:	4013      	ands	r3, r2
 80089c0:	683a      	ldr	r2, [r7, #0]
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d211      	bcs.n	80089ea <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089c6:	4b29      	ldr	r3, [pc, #164]	; (8008a6c <HAL_RCC_ClockConfig+0x238>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	2201      	movs	r2, #1
 80089cc:	4393      	bics	r3, r2
 80089ce:	0019      	movs	r1, r3
 80089d0:	4b26      	ldr	r3, [pc, #152]	; (8008a6c <HAL_RCC_ClockConfig+0x238>)
 80089d2:	683a      	ldr	r2, [r7, #0]
 80089d4:	430a      	orrs	r2, r1
 80089d6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80089d8:	4b24      	ldr	r3, [pc, #144]	; (8008a6c <HAL_RCC_ClockConfig+0x238>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	2201      	movs	r2, #1
 80089de:	4013      	ands	r3, r2
 80089e0:	683a      	ldr	r2, [r7, #0]
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d001      	beq.n	80089ea <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 80089e6:	2301      	movs	r3, #1
 80089e8:	e03c      	b.n	8008a64 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	2204      	movs	r2, #4
 80089f0:	4013      	ands	r3, r2
 80089f2:	d009      	beq.n	8008a08 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80089f4:	4b1e      	ldr	r3, [pc, #120]	; (8008a70 <HAL_RCC_ClockConfig+0x23c>)
 80089f6:	68db      	ldr	r3, [r3, #12]
 80089f8:	4a1f      	ldr	r2, [pc, #124]	; (8008a78 <HAL_RCC_ClockConfig+0x244>)
 80089fa:	4013      	ands	r3, r2
 80089fc:	0019      	movs	r1, r3
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	68da      	ldr	r2, [r3, #12]
 8008a02:	4b1b      	ldr	r3, [pc, #108]	; (8008a70 <HAL_RCC_ClockConfig+0x23c>)
 8008a04:	430a      	orrs	r2, r1
 8008a06:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	2208      	movs	r2, #8
 8008a0e:	4013      	ands	r3, r2
 8008a10:	d00a      	beq.n	8008a28 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008a12:	4b17      	ldr	r3, [pc, #92]	; (8008a70 <HAL_RCC_ClockConfig+0x23c>)
 8008a14:	68db      	ldr	r3, [r3, #12]
 8008a16:	4a19      	ldr	r2, [pc, #100]	; (8008a7c <HAL_RCC_ClockConfig+0x248>)
 8008a18:	4013      	ands	r3, r2
 8008a1a:	0019      	movs	r1, r3
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	691b      	ldr	r3, [r3, #16]
 8008a20:	00da      	lsls	r2, r3, #3
 8008a22:	4b13      	ldr	r3, [pc, #76]	; (8008a70 <HAL_RCC_ClockConfig+0x23c>)
 8008a24:	430a      	orrs	r2, r1
 8008a26:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008a28:	f000 f82e 	bl	8008a88 <HAL_RCC_GetSysClockFreq>
 8008a2c:	0001      	movs	r1, r0
 8008a2e:	4b10      	ldr	r3, [pc, #64]	; (8008a70 <HAL_RCC_ClockConfig+0x23c>)
 8008a30:	68db      	ldr	r3, [r3, #12]
 8008a32:	091b      	lsrs	r3, r3, #4
 8008a34:	220f      	movs	r2, #15
 8008a36:	4013      	ands	r3, r2
 8008a38:	4a11      	ldr	r2, [pc, #68]	; (8008a80 <HAL_RCC_ClockConfig+0x24c>)
 8008a3a:	5cd3      	ldrb	r3, [r2, r3]
 8008a3c:	000a      	movs	r2, r1
 8008a3e:	40da      	lsrs	r2, r3
 8008a40:	4b10      	ldr	r3, [pc, #64]	; (8008a84 <HAL_RCC_ClockConfig+0x250>)
 8008a42:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8008a44:	250b      	movs	r5, #11
 8008a46:	197c      	adds	r4, r7, r5
 8008a48:	2000      	movs	r0, #0
 8008a4a:	f7fe f8f5 	bl	8006c38 <HAL_InitTick>
 8008a4e:	0003      	movs	r3, r0
 8008a50:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8008a52:	197b      	adds	r3, r7, r5
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d003      	beq.n	8008a62 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 8008a5a:	230b      	movs	r3, #11
 8008a5c:	18fb      	adds	r3, r7, r3
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	e000      	b.n	8008a64 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8008a62:	2300      	movs	r3, #0
}
 8008a64:	0018      	movs	r0, r3
 8008a66:	46bd      	mov	sp, r7
 8008a68:	b004      	add	sp, #16
 8008a6a:	bdb0      	pop	{r4, r5, r7, pc}
 8008a6c:	40022000 	.word	0x40022000
 8008a70:	40021000 	.word	0x40021000
 8008a74:	00001388 	.word	0x00001388
 8008a78:	fffff8ff 	.word	0xfffff8ff
 8008a7c:	ffffc7ff 	.word	0xffffc7ff
 8008a80:	0800c75c 	.word	0x0800c75c
 8008a84:	20000010 	.word	0x20000010

08008a88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b086      	sub	sp, #24
 8008a8c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8008a8e:	4b3b      	ldr	r3, [pc, #236]	; (8008b7c <HAL_RCC_GetSysClockFreq+0xf4>)
 8008a90:	68db      	ldr	r3, [r3, #12]
 8008a92:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	220c      	movs	r2, #12
 8008a98:	4013      	ands	r3, r2
 8008a9a:	2b08      	cmp	r3, #8
 8008a9c:	d00e      	beq.n	8008abc <HAL_RCC_GetSysClockFreq+0x34>
 8008a9e:	2b0c      	cmp	r3, #12
 8008aa0:	d00f      	beq.n	8008ac2 <HAL_RCC_GetSysClockFreq+0x3a>
 8008aa2:	2b04      	cmp	r3, #4
 8008aa4:	d157      	bne.n	8008b56 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8008aa6:	4b35      	ldr	r3, [pc, #212]	; (8008b7c <HAL_RCC_GetSysClockFreq+0xf4>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	2210      	movs	r2, #16
 8008aac:	4013      	ands	r3, r2
 8008aae:	d002      	beq.n	8008ab6 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8008ab0:	4b33      	ldr	r3, [pc, #204]	; (8008b80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8008ab2:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8008ab4:	e05d      	b.n	8008b72 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8008ab6:	4b33      	ldr	r3, [pc, #204]	; (8008b84 <HAL_RCC_GetSysClockFreq+0xfc>)
 8008ab8:	613b      	str	r3, [r7, #16]
      break;
 8008aba:	e05a      	b.n	8008b72 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008abc:	4b32      	ldr	r3, [pc, #200]	; (8008b88 <HAL_RCC_GetSysClockFreq+0x100>)
 8008abe:	613b      	str	r3, [r7, #16]
      break;
 8008ac0:	e057      	b.n	8008b72 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	0c9b      	lsrs	r3, r3, #18
 8008ac6:	220f      	movs	r2, #15
 8008ac8:	4013      	ands	r3, r2
 8008aca:	4a30      	ldr	r2, [pc, #192]	; (8008b8c <HAL_RCC_GetSysClockFreq+0x104>)
 8008acc:	5cd3      	ldrb	r3, [r2, r3]
 8008ace:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	0d9b      	lsrs	r3, r3, #22
 8008ad4:	2203      	movs	r2, #3
 8008ad6:	4013      	ands	r3, r2
 8008ad8:	3301      	adds	r3, #1
 8008ada:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008adc:	4b27      	ldr	r3, [pc, #156]	; (8008b7c <HAL_RCC_GetSysClockFreq+0xf4>)
 8008ade:	68da      	ldr	r2, [r3, #12]
 8008ae0:	2380      	movs	r3, #128	; 0x80
 8008ae2:	025b      	lsls	r3, r3, #9
 8008ae4:	4013      	ands	r3, r2
 8008ae6:	d00f      	beq.n	8008b08 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8008ae8:	68b9      	ldr	r1, [r7, #8]
 8008aea:	000a      	movs	r2, r1
 8008aec:	0152      	lsls	r2, r2, #5
 8008aee:	1a52      	subs	r2, r2, r1
 8008af0:	0193      	lsls	r3, r2, #6
 8008af2:	1a9b      	subs	r3, r3, r2
 8008af4:	00db      	lsls	r3, r3, #3
 8008af6:	185b      	adds	r3, r3, r1
 8008af8:	025b      	lsls	r3, r3, #9
 8008afa:	6879      	ldr	r1, [r7, #4]
 8008afc:	0018      	movs	r0, r3
 8008afe:	f7f7 fb0b 	bl	8000118 <__udivsi3>
 8008b02:	0003      	movs	r3, r0
 8008b04:	617b      	str	r3, [r7, #20]
 8008b06:	e023      	b.n	8008b50 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8008b08:	4b1c      	ldr	r3, [pc, #112]	; (8008b7c <HAL_RCC_GetSysClockFreq+0xf4>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2210      	movs	r2, #16
 8008b0e:	4013      	ands	r3, r2
 8008b10:	d00f      	beq.n	8008b32 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8008b12:	68b9      	ldr	r1, [r7, #8]
 8008b14:	000a      	movs	r2, r1
 8008b16:	0152      	lsls	r2, r2, #5
 8008b18:	1a52      	subs	r2, r2, r1
 8008b1a:	0193      	lsls	r3, r2, #6
 8008b1c:	1a9b      	subs	r3, r3, r2
 8008b1e:	00db      	lsls	r3, r3, #3
 8008b20:	185b      	adds	r3, r3, r1
 8008b22:	021b      	lsls	r3, r3, #8
 8008b24:	6879      	ldr	r1, [r7, #4]
 8008b26:	0018      	movs	r0, r3
 8008b28:	f7f7 faf6 	bl	8000118 <__udivsi3>
 8008b2c:	0003      	movs	r3, r0
 8008b2e:	617b      	str	r3, [r7, #20]
 8008b30:	e00e      	b.n	8008b50 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8008b32:	68b9      	ldr	r1, [r7, #8]
 8008b34:	000a      	movs	r2, r1
 8008b36:	0152      	lsls	r2, r2, #5
 8008b38:	1a52      	subs	r2, r2, r1
 8008b3a:	0193      	lsls	r3, r2, #6
 8008b3c:	1a9b      	subs	r3, r3, r2
 8008b3e:	00db      	lsls	r3, r3, #3
 8008b40:	185b      	adds	r3, r3, r1
 8008b42:	029b      	lsls	r3, r3, #10
 8008b44:	6879      	ldr	r1, [r7, #4]
 8008b46:	0018      	movs	r0, r3
 8008b48:	f7f7 fae6 	bl	8000118 <__udivsi3>
 8008b4c:	0003      	movs	r3, r0
 8008b4e:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	613b      	str	r3, [r7, #16]
      break;
 8008b54:	e00d      	b.n	8008b72 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8008b56:	4b09      	ldr	r3, [pc, #36]	; (8008b7c <HAL_RCC_GetSysClockFreq+0xf4>)
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	0b5b      	lsrs	r3, r3, #13
 8008b5c:	2207      	movs	r2, #7
 8008b5e:	4013      	ands	r3, r2
 8008b60:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	3301      	adds	r3, #1
 8008b66:	2280      	movs	r2, #128	; 0x80
 8008b68:	0212      	lsls	r2, r2, #8
 8008b6a:	409a      	lsls	r2, r3
 8008b6c:	0013      	movs	r3, r2
 8008b6e:	613b      	str	r3, [r7, #16]
      break;
 8008b70:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8008b72:	693b      	ldr	r3, [r7, #16]
}
 8008b74:	0018      	movs	r0, r3
 8008b76:	46bd      	mov	sp, r7
 8008b78:	b006      	add	sp, #24
 8008b7a:	bd80      	pop	{r7, pc}
 8008b7c:	40021000 	.word	0x40021000
 8008b80:	003d0900 	.word	0x003d0900
 8008b84:	00f42400 	.word	0x00f42400
 8008b88:	007a1200 	.word	0x007a1200
 8008b8c:	0800c76c 	.word	0x0800c76c

08008b90 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b086      	sub	sp, #24
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	2220      	movs	r2, #32
 8008b9e:	4013      	ands	r3, r2
 8008ba0:	d106      	bne.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681a      	ldr	r2, [r3, #0]
 8008ba6:	2380      	movs	r3, #128	; 0x80
 8008ba8:	011b      	lsls	r3, r3, #4
 8008baa:	4013      	ands	r3, r2
 8008bac:	d100      	bne.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8008bae:	e0dd      	b.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8008bb0:	2317      	movs	r3, #23
 8008bb2:	18fb      	adds	r3, r7, r3
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008bb8:	4ba4      	ldr	r3, [pc, #656]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008bba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bbc:	2380      	movs	r3, #128	; 0x80
 8008bbe:	055b      	lsls	r3, r3, #21
 8008bc0:	4013      	ands	r3, r2
 8008bc2:	d10a      	bne.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008bc4:	4ba1      	ldr	r3, [pc, #644]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008bc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bc8:	4ba0      	ldr	r3, [pc, #640]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008bca:	2180      	movs	r1, #128	; 0x80
 8008bcc:	0549      	lsls	r1, r1, #21
 8008bce:	430a      	orrs	r2, r1
 8008bd0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8008bd2:	2317      	movs	r3, #23
 8008bd4:	18fb      	adds	r3, r7, r3
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008bda:	4b9d      	ldr	r3, [pc, #628]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8008bdc:	681a      	ldr	r2, [r3, #0]
 8008bde:	2380      	movs	r3, #128	; 0x80
 8008be0:	005b      	lsls	r3, r3, #1
 8008be2:	4013      	ands	r3, r2
 8008be4:	d11a      	bne.n	8008c1c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008be6:	4b9a      	ldr	r3, [pc, #616]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	4b99      	ldr	r3, [pc, #612]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8008bec:	2180      	movs	r1, #128	; 0x80
 8008bee:	0049      	lsls	r1, r1, #1
 8008bf0:	430a      	orrs	r2, r1
 8008bf2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008bf4:	f7fe f856 	bl	8006ca4 <HAL_GetTick>
 8008bf8:	0003      	movs	r3, r0
 8008bfa:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008bfc:	e008      	b.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008bfe:	f7fe f851 	bl	8006ca4 <HAL_GetTick>
 8008c02:	0002      	movs	r2, r0
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	1ad3      	subs	r3, r2, r3
 8008c08:	2b64      	cmp	r3, #100	; 0x64
 8008c0a:	d901      	bls.n	8008c10 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8008c0c:	2303      	movs	r3, #3
 8008c0e:	e118      	b.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c10:	4b8f      	ldr	r3, [pc, #572]	; (8008e50 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8008c12:	681a      	ldr	r2, [r3, #0]
 8008c14:	2380      	movs	r3, #128	; 0x80
 8008c16:	005b      	lsls	r3, r3, #1
 8008c18:	4013      	ands	r3, r2
 8008c1a:	d0f0      	beq.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8008c1c:	4b8b      	ldr	r3, [pc, #556]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008c1e:	681a      	ldr	r2, [r3, #0]
 8008c20:	23c0      	movs	r3, #192	; 0xc0
 8008c22:	039b      	lsls	r3, r3, #14
 8008c24:	4013      	ands	r3, r2
 8008c26:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	685a      	ldr	r2, [r3, #4]
 8008c2c:	23c0      	movs	r3, #192	; 0xc0
 8008c2e:	039b      	lsls	r3, r3, #14
 8008c30:	4013      	ands	r3, r2
 8008c32:	68fa      	ldr	r2, [r7, #12]
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d107      	bne.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	689a      	ldr	r2, [r3, #8]
 8008c3c:	23c0      	movs	r3, #192	; 0xc0
 8008c3e:	039b      	lsls	r3, r3, #14
 8008c40:	4013      	ands	r3, r2
 8008c42:	68fa      	ldr	r2, [r7, #12]
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d013      	beq.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	685a      	ldr	r2, [r3, #4]
 8008c4c:	23c0      	movs	r3, #192	; 0xc0
 8008c4e:	029b      	lsls	r3, r3, #10
 8008c50:	401a      	ands	r2, r3
 8008c52:	23c0      	movs	r3, #192	; 0xc0
 8008c54:	029b      	lsls	r3, r3, #10
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d10a      	bne.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008c5a:	4b7c      	ldr	r3, [pc, #496]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	2380      	movs	r3, #128	; 0x80
 8008c60:	029b      	lsls	r3, r3, #10
 8008c62:	401a      	ands	r2, r3
 8008c64:	2380      	movs	r3, #128	; 0x80
 8008c66:	029b      	lsls	r3, r3, #10
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d101      	bne.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	e0e8      	b.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8008c70:	4b76      	ldr	r3, [pc, #472]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008c72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008c74:	23c0      	movs	r3, #192	; 0xc0
 8008c76:	029b      	lsls	r3, r3, #10
 8008c78:	4013      	ands	r3, r2
 8008c7a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d049      	beq.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	685a      	ldr	r2, [r3, #4]
 8008c86:	23c0      	movs	r3, #192	; 0xc0
 8008c88:	029b      	lsls	r3, r3, #10
 8008c8a:	4013      	ands	r3, r2
 8008c8c:	68fa      	ldr	r2, [r7, #12]
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d004      	beq.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	2220      	movs	r2, #32
 8008c98:	4013      	ands	r3, r2
 8008c9a:	d10d      	bne.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	689a      	ldr	r2, [r3, #8]
 8008ca0:	23c0      	movs	r3, #192	; 0xc0
 8008ca2:	029b      	lsls	r3, r3, #10
 8008ca4:	4013      	ands	r3, r2
 8008ca6:	68fa      	ldr	r2, [r7, #12]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d034      	beq.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	2380      	movs	r3, #128	; 0x80
 8008cb2:	011b      	lsls	r3, r3, #4
 8008cb4:	4013      	ands	r3, r2
 8008cb6:	d02e      	beq.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8008cb8:	4b64      	ldr	r3, [pc, #400]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cbc:	4a65      	ldr	r2, [pc, #404]	; (8008e54 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008cbe:	4013      	ands	r3, r2
 8008cc0:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008cc2:	4b62      	ldr	r3, [pc, #392]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008cc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008cc6:	4b61      	ldr	r3, [pc, #388]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008cc8:	2180      	movs	r1, #128	; 0x80
 8008cca:	0309      	lsls	r1, r1, #12
 8008ccc:	430a      	orrs	r2, r1
 8008cce:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008cd0:	4b5e      	ldr	r3, [pc, #376]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008cd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008cd4:	4b5d      	ldr	r3, [pc, #372]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008cd6:	4960      	ldr	r1, [pc, #384]	; (8008e58 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8008cd8:	400a      	ands	r2, r1
 8008cda:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8008cdc:	4b5b      	ldr	r3, [pc, #364]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008cde:	68fa      	ldr	r2, [r7, #12]
 8008ce0:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8008ce2:	68fa      	ldr	r2, [r7, #12]
 8008ce4:	2380      	movs	r3, #128	; 0x80
 8008ce6:	005b      	lsls	r3, r3, #1
 8008ce8:	4013      	ands	r3, r2
 8008cea:	d014      	beq.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008cec:	f7fd ffda 	bl	8006ca4 <HAL_GetTick>
 8008cf0:	0003      	movs	r3, r0
 8008cf2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008cf4:	e009      	b.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008cf6:	f7fd ffd5 	bl	8006ca4 <HAL_GetTick>
 8008cfa:	0002      	movs	r2, r0
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	1ad3      	subs	r3, r2, r3
 8008d00:	4a56      	ldr	r2, [pc, #344]	; (8008e5c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d901      	bls.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8008d06:	2303      	movs	r3, #3
 8008d08:	e09b      	b.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d0a:	4b50      	ldr	r3, [pc, #320]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008d0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008d0e:	2380      	movs	r3, #128	; 0x80
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	4013      	ands	r3, r2
 8008d14:	d0ef      	beq.n	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	685a      	ldr	r2, [r3, #4]
 8008d1a:	23c0      	movs	r3, #192	; 0xc0
 8008d1c:	029b      	lsls	r3, r3, #10
 8008d1e:	401a      	ands	r2, r3
 8008d20:	23c0      	movs	r3, #192	; 0xc0
 8008d22:	029b      	lsls	r3, r3, #10
 8008d24:	429a      	cmp	r2, r3
 8008d26:	d10c      	bne.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8008d28:	4b48      	ldr	r3, [pc, #288]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a4c      	ldr	r2, [pc, #304]	; (8008e60 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8008d2e:	4013      	ands	r3, r2
 8008d30:	0019      	movs	r1, r3
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	685a      	ldr	r2, [r3, #4]
 8008d36:	23c0      	movs	r3, #192	; 0xc0
 8008d38:	039b      	lsls	r3, r3, #14
 8008d3a:	401a      	ands	r2, r3
 8008d3c:	4b43      	ldr	r3, [pc, #268]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008d3e:	430a      	orrs	r2, r1
 8008d40:	601a      	str	r2, [r3, #0]
 8008d42:	4b42      	ldr	r3, [pc, #264]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008d44:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	685a      	ldr	r2, [r3, #4]
 8008d4a:	23c0      	movs	r3, #192	; 0xc0
 8008d4c:	029b      	lsls	r3, r3, #10
 8008d4e:	401a      	ands	r2, r3
 8008d50:	4b3e      	ldr	r3, [pc, #248]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008d52:	430a      	orrs	r2, r1
 8008d54:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008d56:	2317      	movs	r3, #23
 8008d58:	18fb      	adds	r3, r7, r3
 8008d5a:	781b      	ldrb	r3, [r3, #0]
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d105      	bne.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008d60:	4b3a      	ldr	r3, [pc, #232]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008d62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d64:	4b39      	ldr	r3, [pc, #228]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008d66:	493f      	ldr	r1, [pc, #252]	; (8008e64 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008d68:	400a      	ands	r2, r1
 8008d6a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	2201      	movs	r2, #1
 8008d72:	4013      	ands	r3, r2
 8008d74:	d009      	beq.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008d76:	4b35      	ldr	r3, [pc, #212]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d7a:	2203      	movs	r2, #3
 8008d7c:	4393      	bics	r3, r2
 8008d7e:	0019      	movs	r1, r3
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	68da      	ldr	r2, [r3, #12]
 8008d84:	4b31      	ldr	r3, [pc, #196]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008d86:	430a      	orrs	r2, r1
 8008d88:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	2202      	movs	r2, #2
 8008d90:	4013      	ands	r3, r2
 8008d92:	d009      	beq.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008d94:	4b2d      	ldr	r3, [pc, #180]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d98:	220c      	movs	r2, #12
 8008d9a:	4393      	bics	r3, r2
 8008d9c:	0019      	movs	r1, r3
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	691a      	ldr	r2, [r3, #16]
 8008da2:	4b2a      	ldr	r3, [pc, #168]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008da4:	430a      	orrs	r2, r1
 8008da6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	2204      	movs	r2, #4
 8008dae:	4013      	ands	r3, r2
 8008db0:	d009      	beq.n	8008dc6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008db2:	4b26      	ldr	r3, [pc, #152]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008db6:	4a2c      	ldr	r2, [pc, #176]	; (8008e68 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008db8:	4013      	ands	r3, r2
 8008dba:	0019      	movs	r1, r3
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	695a      	ldr	r2, [r3, #20]
 8008dc0:	4b22      	ldr	r3, [pc, #136]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008dc2:	430a      	orrs	r2, r1
 8008dc4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	2208      	movs	r2, #8
 8008dcc:	4013      	ands	r3, r2
 8008dce:	d009      	beq.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008dd0:	4b1e      	ldr	r3, [pc, #120]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dd4:	4a25      	ldr	r2, [pc, #148]	; (8008e6c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8008dd6:	4013      	ands	r3, r2
 8008dd8:	0019      	movs	r1, r3
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	699a      	ldr	r2, [r3, #24]
 8008dde:	4b1b      	ldr	r3, [pc, #108]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008de0:	430a      	orrs	r2, r1
 8008de2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	2380      	movs	r3, #128	; 0x80
 8008dea:	005b      	lsls	r3, r3, #1
 8008dec:	4013      	ands	r3, r2
 8008dee:	d009      	beq.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008df0:	4b16      	ldr	r3, [pc, #88]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008df4:	4a17      	ldr	r2, [pc, #92]	; (8008e54 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008df6:	4013      	ands	r3, r2
 8008df8:	0019      	movs	r1, r3
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	69da      	ldr	r2, [r3, #28]
 8008dfe:	4b13      	ldr	r3, [pc, #76]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008e00:	430a      	orrs	r2, r1
 8008e02:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	2240      	movs	r2, #64	; 0x40
 8008e0a:	4013      	ands	r3, r2
 8008e0c:	d009      	beq.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008e0e:	4b0f      	ldr	r3, [pc, #60]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e12:	4a17      	ldr	r2, [pc, #92]	; (8008e70 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8008e14:	4013      	ands	r3, r2
 8008e16:	0019      	movs	r1, r3
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e1c:	4b0b      	ldr	r3, [pc, #44]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008e1e:	430a      	orrs	r2, r1
 8008e20:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	2280      	movs	r2, #128	; 0x80
 8008e28:	4013      	ands	r3, r2
 8008e2a:	d009      	beq.n	8008e40 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8008e2c:	4b07      	ldr	r3, [pc, #28]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e30:	4a10      	ldr	r2, [pc, #64]	; (8008e74 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8008e32:	4013      	ands	r3, r2
 8008e34:	0019      	movs	r1, r3
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6a1a      	ldr	r2, [r3, #32]
 8008e3a:	4b04      	ldr	r3, [pc, #16]	; (8008e4c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8008e3c:	430a      	orrs	r2, r1
 8008e3e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008e40:	2300      	movs	r3, #0
}
 8008e42:	0018      	movs	r0, r3
 8008e44:	46bd      	mov	sp, r7
 8008e46:	b006      	add	sp, #24
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	46c0      	nop			; (mov r8, r8)
 8008e4c:	40021000 	.word	0x40021000
 8008e50:	40007000 	.word	0x40007000
 8008e54:	fffcffff 	.word	0xfffcffff
 8008e58:	fff7ffff 	.word	0xfff7ffff
 8008e5c:	00001388 	.word	0x00001388
 8008e60:	ffcfffff 	.word	0xffcfffff
 8008e64:	efffffff 	.word	0xefffffff
 8008e68:	fffff3ff 	.word	0xfffff3ff
 8008e6c:	ffffcfff 	.word	0xffffcfff
 8008e70:	fbffffff 	.word	0xfbffffff
 8008e74:	fff3ffff 	.word	0xfff3ffff

08008e78 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d101      	bne.n	8008e8a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8008e86:	2301      	movs	r3, #1
 8008e88:	e08e      	b.n	8008fa8 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2221      	movs	r2, #33	; 0x21
 8008e8e:	5c9b      	ldrb	r3, [r3, r2]
 8008e90:	b2db      	uxtb	r3, r3
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d107      	bne.n	8008ea6 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2220      	movs	r2, #32
 8008e9a:	2100      	movs	r1, #0
 8008e9c:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	0018      	movs	r0, r3
 8008ea2:	f7fb fbb7 	bl	8004614 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2221      	movs	r2, #33	; 0x21
 8008eaa:	2102      	movs	r1, #2
 8008eac:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	22ca      	movs	r2, #202	; 0xca
 8008eb4:	625a      	str	r2, [r3, #36]	; 0x24
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	2253      	movs	r2, #83	; 0x53
 8008ebc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	0018      	movs	r0, r3
 8008ec2:	f000 fcf4 	bl	80098ae <RTC_EnterInitMode>
 8008ec6:	1e03      	subs	r3, r0, #0
 8008ec8:	d009      	beq.n	8008ede <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	22ff      	movs	r2, #255	; 0xff
 8008ed0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2221      	movs	r2, #33	; 0x21
 8008ed6:	2104      	movs	r1, #4
 8008ed8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8008eda:	2301      	movs	r3, #1
 8008edc:	e064      	b.n	8008fa8 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	689a      	ldr	r2, [r3, #8]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4931      	ldr	r1, [pc, #196]	; (8008fb0 <HAL_RTC_Init+0x138>)
 8008eea:	400a      	ands	r2, r1
 8008eec:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	6899      	ldr	r1, [r3, #8]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	685a      	ldr	r2, [r3, #4]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	691b      	ldr	r3, [r3, #16]
 8008efc:	431a      	orrs	r2, r3
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	699b      	ldr	r3, [r3, #24]
 8008f02:	431a      	orrs	r2, r3
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	430a      	orrs	r2, r1
 8008f0a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	687a      	ldr	r2, [r7, #4]
 8008f12:	68d2      	ldr	r2, [r2, #12]
 8008f14:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	6919      	ldr	r1, [r3, #16]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	689b      	ldr	r3, [r3, #8]
 8008f20:	041a      	lsls	r2, r3, #16
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	430a      	orrs	r2, r1
 8008f28:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	68da      	ldr	r2, [r3, #12]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	2180      	movs	r1, #128	; 0x80
 8008f36:	438a      	bics	r2, r1
 8008f38:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	2103      	movs	r1, #3
 8008f46:	438a      	bics	r2, r1
 8008f48:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	69da      	ldr	r2, [r3, #28]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	695b      	ldr	r3, [r3, #20]
 8008f58:	431a      	orrs	r2, r3
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	430a      	orrs	r2, r1
 8008f60:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	2220      	movs	r2, #32
 8008f6a:	4013      	ands	r3, r2
 8008f6c:	d113      	bne.n	8008f96 <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	0018      	movs	r0, r3
 8008f72:	f000 fc75 	bl	8009860 <HAL_RTC_WaitForSynchro>
 8008f76:	1e03      	subs	r3, r0, #0
 8008f78:	d00d      	beq.n	8008f96 <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	22ff      	movs	r2, #255	; 0xff
 8008f80:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2221      	movs	r2, #33	; 0x21
 8008f86:	2104      	movs	r1, #4
 8008f88:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2220      	movs	r2, #32
 8008f8e:	2100      	movs	r1, #0
 8008f90:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	e008      	b.n	8008fa8 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	22ff      	movs	r2, #255	; 0xff
 8008f9c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2221      	movs	r2, #33	; 0x21
 8008fa2:	2101      	movs	r1, #1
 8008fa4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008fa6:	2300      	movs	r3, #0
  }
}
 8008fa8:	0018      	movs	r0, r3
 8008faa:	46bd      	mov	sp, r7
 8008fac:	b002      	add	sp, #8
 8008fae:	bd80      	pop	{r7, pc}
 8008fb0:	ff8fffbf 	.word	0xff8fffbf

08008fb4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008fb4:	b590      	push	{r4, r7, lr}
 8008fb6:	b087      	sub	sp, #28
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	60f8      	str	r0, [r7, #12]
 8008fbc:	60b9      	str	r1, [r7, #8]
 8008fbe:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2220      	movs	r2, #32
 8008fc4:	5c9b      	ldrb	r3, [r3, r2]
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d101      	bne.n	8008fce <HAL_RTC_SetTime+0x1a>
 8008fca:	2302      	movs	r3, #2
 8008fcc:	e0ad      	b.n	800912a <HAL_RTC_SetTime+0x176>
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2220      	movs	r2, #32
 8008fd2:	2101      	movs	r1, #1
 8008fd4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2221      	movs	r2, #33	; 0x21
 8008fda:	2102      	movs	r1, #2
 8008fdc:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d125      	bne.n	8009030 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	689b      	ldr	r3, [r3, #8]
 8008fea:	2240      	movs	r2, #64	; 0x40
 8008fec:	4013      	ands	r3, r2
 8008fee:	d102      	bne.n	8008ff6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	0018      	movs	r0, r3
 8008ffc:	f000 fc81 	bl	8009902 <RTC_ByteToBcd2>
 8009000:	0003      	movs	r3, r0
 8009002:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	785b      	ldrb	r3, [r3, #1]
 8009008:	0018      	movs	r0, r3
 800900a:	f000 fc7a 	bl	8009902 <RTC_ByteToBcd2>
 800900e:	0003      	movs	r3, r0
 8009010:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009012:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	789b      	ldrb	r3, [r3, #2]
 8009018:	0018      	movs	r0, r3
 800901a:	f000 fc72 	bl	8009902 <RTC_ByteToBcd2>
 800901e:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8009020:	0022      	movs	r2, r4
 8009022:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	78db      	ldrb	r3, [r3, #3]
 8009028:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800902a:	4313      	orrs	r3, r2
 800902c:	617b      	str	r3, [r7, #20]
 800902e:	e017      	b.n	8009060 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	689b      	ldr	r3, [r3, #8]
 8009036:	2240      	movs	r2, #64	; 0x40
 8009038:	4013      	ands	r3, r2
 800903a:	d102      	bne.n	8009042 <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	2200      	movs	r2, #0
 8009040:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	785b      	ldrb	r3, [r3, #1]
 800904c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800904e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8009050:	68ba      	ldr	r2, [r7, #8]
 8009052:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8009054:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	78db      	ldrb	r3, [r3, #3]
 800905a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800905c:	4313      	orrs	r3, r2
 800905e:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	22ca      	movs	r2, #202	; 0xca
 8009066:	625a      	str	r2, [r3, #36]	; 0x24
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	2253      	movs	r2, #83	; 0x53
 800906e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	0018      	movs	r0, r3
 8009074:	f000 fc1b 	bl	80098ae <RTC_EnterInitMode>
 8009078:	1e03      	subs	r3, r0, #0
 800907a:	d00d      	beq.n	8009098 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	22ff      	movs	r2, #255	; 0xff
 8009082:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2221      	movs	r2, #33	; 0x21
 8009088:	2104      	movs	r1, #4
 800908a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2220      	movs	r2, #32
 8009090:	2100      	movs	r1, #0
 8009092:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8009094:	2301      	movs	r3, #1
 8009096:	e048      	b.n	800912a <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	697a      	ldr	r2, [r7, #20]
 800909e:	4925      	ldr	r1, [pc, #148]	; (8009134 <HAL_RTC_SetTime+0x180>)
 80090a0:	400a      	ands	r2, r1
 80090a2:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	689a      	ldr	r2, [r3, #8]
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4922      	ldr	r1, [pc, #136]	; (8009138 <HAL_RTC_SetTime+0x184>)
 80090b0:	400a      	ands	r2, r1
 80090b2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	6899      	ldr	r1, [r3, #8]
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	68da      	ldr	r2, [r3, #12]
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	691b      	ldr	r3, [r3, #16]
 80090c2:	431a      	orrs	r2, r3
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	430a      	orrs	r2, r1
 80090ca:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	68da      	ldr	r2, [r3, #12]
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	2180      	movs	r1, #128	; 0x80
 80090d8:	438a      	bics	r2, r1
 80090da:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	689b      	ldr	r3, [r3, #8]
 80090e2:	2220      	movs	r2, #32
 80090e4:	4013      	ands	r3, r2
 80090e6:	d113      	bne.n	8009110 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	0018      	movs	r0, r3
 80090ec:	f000 fbb8 	bl	8009860 <HAL_RTC_WaitForSynchro>
 80090f0:	1e03      	subs	r3, r0, #0
 80090f2:	d00d      	beq.n	8009110 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	22ff      	movs	r2, #255	; 0xff
 80090fa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2221      	movs	r2, #33	; 0x21
 8009100:	2104      	movs	r1, #4
 8009102:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2220      	movs	r2, #32
 8009108:	2100      	movs	r1, #0
 800910a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800910c:	2301      	movs	r3, #1
 800910e:	e00c      	b.n	800912a <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	22ff      	movs	r2, #255	; 0xff
 8009116:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2221      	movs	r2, #33	; 0x21
 800911c:	2101      	movs	r1, #1
 800911e:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2220      	movs	r2, #32
 8009124:	2100      	movs	r1, #0
 8009126:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009128:	2300      	movs	r3, #0
  }
}
 800912a:	0018      	movs	r0, r3
 800912c:	46bd      	mov	sp, r7
 800912e:	b007      	add	sp, #28
 8009130:	bd90      	pop	{r4, r7, pc}
 8009132:	46c0      	nop			; (mov r8, r8)
 8009134:	007f7f7f 	.word	0x007f7f7f
 8009138:	fffbffff 	.word	0xfffbffff

0800913c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b086      	sub	sp, #24
 8009140:	af00      	add	r7, sp, #0
 8009142:	60f8      	str	r0, [r7, #12]
 8009144:	60b9      	str	r1, [r7, #8]
 8009146:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	691b      	ldr	r3, [r3, #16]
 8009158:	045b      	lsls	r3, r3, #17
 800915a:	0c5a      	lsrs	r2, r3, #17
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4a22      	ldr	r2, [pc, #136]	; (80091f0 <HAL_RTC_GetTime+0xb4>)
 8009168:	4013      	ands	r3, r2
 800916a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	0c1b      	lsrs	r3, r3, #16
 8009170:	b2db      	uxtb	r3, r3
 8009172:	223f      	movs	r2, #63	; 0x3f
 8009174:	4013      	ands	r3, r2
 8009176:	b2da      	uxtb	r2, r3
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	0a1b      	lsrs	r3, r3, #8
 8009180:	b2db      	uxtb	r3, r3
 8009182:	227f      	movs	r2, #127	; 0x7f
 8009184:	4013      	ands	r3, r2
 8009186:	b2da      	uxtb	r2, r3
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	b2db      	uxtb	r3, r3
 8009190:	227f      	movs	r2, #127	; 0x7f
 8009192:	4013      	ands	r3, r2
 8009194:	b2da      	uxtb	r2, r3
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	0c1b      	lsrs	r3, r3, #16
 800919e:	b2db      	uxtb	r3, r3
 80091a0:	2240      	movs	r2, #64	; 0x40
 80091a2:	4013      	ands	r3, r2
 80091a4:	b2da      	uxtb	r2, r3
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d11a      	bne.n	80091e6 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	781b      	ldrb	r3, [r3, #0]
 80091b4:	0018      	movs	r0, r3
 80091b6:	f000 fbcd 	bl	8009954 <RTC_Bcd2ToByte>
 80091ba:	0003      	movs	r3, r0
 80091bc:	001a      	movs	r2, r3
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	785b      	ldrb	r3, [r3, #1]
 80091c6:	0018      	movs	r0, r3
 80091c8:	f000 fbc4 	bl	8009954 <RTC_Bcd2ToByte>
 80091cc:	0003      	movs	r3, r0
 80091ce:	001a      	movs	r2, r3
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	789b      	ldrb	r3, [r3, #2]
 80091d8:	0018      	movs	r0, r3
 80091da:	f000 fbbb 	bl	8009954 <RTC_Bcd2ToByte>
 80091de:	0003      	movs	r3, r0
 80091e0:	001a      	movs	r2, r3
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80091e6:	2300      	movs	r3, #0
}
 80091e8:	0018      	movs	r0, r3
 80091ea:	46bd      	mov	sp, r7
 80091ec:	b006      	add	sp, #24
 80091ee:	bd80      	pop	{r7, pc}
 80091f0:	007f7f7f 	.word	0x007f7f7f

080091f4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80091f4:	b590      	push	{r4, r7, lr}
 80091f6:	b087      	sub	sp, #28
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	60b9      	str	r1, [r7, #8]
 80091fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	2220      	movs	r2, #32
 8009204:	5c9b      	ldrb	r3, [r3, r2]
 8009206:	2b01      	cmp	r3, #1
 8009208:	d101      	bne.n	800920e <HAL_RTC_SetDate+0x1a>
 800920a:	2302      	movs	r3, #2
 800920c:	e099      	b.n	8009342 <HAL_RTC_SetDate+0x14e>
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	2220      	movs	r2, #32
 8009212:	2101      	movs	r1, #1
 8009214:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2221      	movs	r2, #33	; 0x21
 800921a:	2102      	movs	r1, #2
 800921c:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d10e      	bne.n	8009242 <HAL_RTC_SetDate+0x4e>
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	785b      	ldrb	r3, [r3, #1]
 8009228:	001a      	movs	r2, r3
 800922a:	2310      	movs	r3, #16
 800922c:	4013      	ands	r3, r2
 800922e:	d008      	beq.n	8009242 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	785b      	ldrb	r3, [r3, #1]
 8009234:	2210      	movs	r2, #16
 8009236:	4393      	bics	r3, r2
 8009238:	b2db      	uxtb	r3, r3
 800923a:	330a      	adds	r3, #10
 800923c:	b2da      	uxtb	r2, r3
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d11c      	bne.n	8009282 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	78db      	ldrb	r3, [r3, #3]
 800924c:	0018      	movs	r0, r3
 800924e:	f000 fb58 	bl	8009902 <RTC_ByteToBcd2>
 8009252:	0003      	movs	r3, r0
 8009254:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	785b      	ldrb	r3, [r3, #1]
 800925a:	0018      	movs	r0, r3
 800925c:	f000 fb51 	bl	8009902 <RTC_ByteToBcd2>
 8009260:	0003      	movs	r3, r0
 8009262:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009264:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	789b      	ldrb	r3, [r3, #2]
 800926a:	0018      	movs	r0, r3
 800926c:	f000 fb49 	bl	8009902 <RTC_ByteToBcd2>
 8009270:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8009272:	0022      	movs	r2, r4
 8009274:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	781b      	ldrb	r3, [r3, #0]
 800927a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800927c:	4313      	orrs	r3, r2
 800927e:	617b      	str	r3, [r7, #20]
 8009280:	e00e      	b.n	80092a0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	78db      	ldrb	r3, [r3, #3]
 8009286:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	785b      	ldrb	r3, [r3, #1]
 800928c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800928e:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8009290:	68ba      	ldr	r2, [r7, #8]
 8009292:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8009294:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	781b      	ldrb	r3, [r3, #0]
 800929a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800929c:	4313      	orrs	r3, r2
 800929e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	22ca      	movs	r2, #202	; 0xca
 80092a6:	625a      	str	r2, [r3, #36]	; 0x24
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	2253      	movs	r2, #83	; 0x53
 80092ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	0018      	movs	r0, r3
 80092b4:	f000 fafb 	bl	80098ae <RTC_EnterInitMode>
 80092b8:	1e03      	subs	r3, r0, #0
 80092ba:	d00d      	beq.n	80092d8 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	22ff      	movs	r2, #255	; 0xff
 80092c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2221      	movs	r2, #33	; 0x21
 80092c8:	2104      	movs	r1, #4
 80092ca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2220      	movs	r2, #32
 80092d0:	2100      	movs	r1, #0
 80092d2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80092d4:	2301      	movs	r3, #1
 80092d6:	e034      	b.n	8009342 <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	697a      	ldr	r2, [r7, #20]
 80092de:	491b      	ldr	r1, [pc, #108]	; (800934c <HAL_RTC_SetDate+0x158>)
 80092e0:	400a      	ands	r2, r1
 80092e2:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	68da      	ldr	r2, [r3, #12]
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	2180      	movs	r1, #128	; 0x80
 80092f0:	438a      	bics	r2, r1
 80092f2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	689b      	ldr	r3, [r3, #8]
 80092fa:	2220      	movs	r2, #32
 80092fc:	4013      	ands	r3, r2
 80092fe:	d113      	bne.n	8009328 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	0018      	movs	r0, r3
 8009304:	f000 faac 	bl	8009860 <HAL_RTC_WaitForSynchro>
 8009308:	1e03      	subs	r3, r0, #0
 800930a:	d00d      	beq.n	8009328 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	22ff      	movs	r2, #255	; 0xff
 8009312:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2221      	movs	r2, #33	; 0x21
 8009318:	2104      	movs	r1, #4
 800931a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2220      	movs	r2, #32
 8009320:	2100      	movs	r1, #0
 8009322:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8009324:	2301      	movs	r3, #1
 8009326:	e00c      	b.n	8009342 <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	22ff      	movs	r2, #255	; 0xff
 800932e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2221      	movs	r2, #33	; 0x21
 8009334:	2101      	movs	r1, #1
 8009336:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2220      	movs	r2, #32
 800933c:	2100      	movs	r1, #0
 800933e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009340:	2300      	movs	r3, #0
  }
}
 8009342:	0018      	movs	r0, r3
 8009344:	46bd      	mov	sp, r7
 8009346:	b007      	add	sp, #28
 8009348:	bd90      	pop	{r4, r7, pc}
 800934a:	46c0      	nop			; (mov r8, r8)
 800934c:	00ffff3f 	.word	0x00ffff3f

08009350 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b086      	sub	sp, #24
 8009354:	af00      	add	r7, sp, #0
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	60b9      	str	r1, [r7, #8]
 800935a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	685b      	ldr	r3, [r3, #4]
 8009362:	4a21      	ldr	r2, [pc, #132]	; (80093e8 <HAL_RTC_GetDate+0x98>)
 8009364:	4013      	ands	r3, r2
 8009366:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	0c1b      	lsrs	r3, r3, #16
 800936c:	b2da      	uxtb	r2, r3
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	0a1b      	lsrs	r3, r3, #8
 8009376:	b2db      	uxtb	r3, r3
 8009378:	221f      	movs	r2, #31
 800937a:	4013      	ands	r3, r2
 800937c:	b2da      	uxtb	r2, r3
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	b2db      	uxtb	r3, r3
 8009386:	223f      	movs	r2, #63	; 0x3f
 8009388:	4013      	ands	r3, r2
 800938a:	b2da      	uxtb	r2, r3
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	0b5b      	lsrs	r3, r3, #13
 8009394:	b2db      	uxtb	r3, r3
 8009396:	2207      	movs	r2, #7
 8009398:	4013      	ands	r3, r2
 800939a:	b2da      	uxtb	r2, r3
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d11a      	bne.n	80093dc <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	78db      	ldrb	r3, [r3, #3]
 80093aa:	0018      	movs	r0, r3
 80093ac:	f000 fad2 	bl	8009954 <RTC_Bcd2ToByte>
 80093b0:	0003      	movs	r3, r0
 80093b2:	001a      	movs	r2, r3
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	785b      	ldrb	r3, [r3, #1]
 80093bc:	0018      	movs	r0, r3
 80093be:	f000 fac9 	bl	8009954 <RTC_Bcd2ToByte>
 80093c2:	0003      	movs	r3, r0
 80093c4:	001a      	movs	r2, r3
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	789b      	ldrb	r3, [r3, #2]
 80093ce:	0018      	movs	r0, r3
 80093d0:	f000 fac0 	bl	8009954 <RTC_Bcd2ToByte>
 80093d4:	0003      	movs	r3, r0
 80093d6:	001a      	movs	r2, r3
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80093dc:	2300      	movs	r3, #0
}
 80093de:	0018      	movs	r0, r3
 80093e0:	46bd      	mov	sp, r7
 80093e2:	b006      	add	sp, #24
 80093e4:	bd80      	pop	{r7, pc}
 80093e6:	46c0      	nop			; (mov r8, r8)
 80093e8:	00ffff3f 	.word	0x00ffff3f

080093ec <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80093ec:	b590      	push	{r4, r7, lr}
 80093ee:	b089      	sub	sp, #36	; 0x24
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	60f8      	str	r0, [r7, #12]
 80093f4:	60b9      	str	r1, [r7, #8]
 80093f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2220      	movs	r2, #32
 80093fc:	5c9b      	ldrb	r3, [r3, r2]
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d101      	bne.n	8009406 <HAL_RTC_SetAlarm_IT+0x1a>
 8009402:	2302      	movs	r3, #2
 8009404:	e130      	b.n	8009668 <HAL_RTC_SetAlarm_IT+0x27c>
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2220      	movs	r2, #32
 800940a:	2101      	movs	r1, #1
 800940c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2221      	movs	r2, #33	; 0x21
 8009412:	2102      	movs	r1, #2
 8009414:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d136      	bne.n	800948a <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	689b      	ldr	r3, [r3, #8]
 8009422:	2240      	movs	r2, #64	; 0x40
 8009424:	4013      	ands	r3, r2
 8009426:	d102      	bne.n	800942e <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	2200      	movs	r2, #0
 800942c:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	781b      	ldrb	r3, [r3, #0]
 8009432:	0018      	movs	r0, r3
 8009434:	f000 fa65 	bl	8009902 <RTC_ByteToBcd2>
 8009438:	0003      	movs	r3, r0
 800943a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	785b      	ldrb	r3, [r3, #1]
 8009440:	0018      	movs	r0, r3
 8009442:	f000 fa5e 	bl	8009902 <RTC_ByteToBcd2>
 8009446:	0003      	movs	r3, r0
 8009448:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800944a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	789b      	ldrb	r3, [r3, #2]
 8009450:	0018      	movs	r0, r3
 8009452:	f000 fa56 	bl	8009902 <RTC_ByteToBcd2>
 8009456:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8009458:	0022      	movs	r2, r4
 800945a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	78db      	ldrb	r3, [r3, #3]
 8009460:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8009462:	431a      	orrs	r2, r3
 8009464:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	2220      	movs	r2, #32
 800946a:	5c9b      	ldrb	r3, [r3, r2]
 800946c:	0018      	movs	r0, r3
 800946e:	f000 fa48 	bl	8009902 <RTC_ByteToBcd2>
 8009472:	0003      	movs	r3, r0
 8009474:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8009476:	0022      	movs	r2, r4
 8009478:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800947e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8009484:	4313      	orrs	r3, r2
 8009486:	61fb      	str	r3, [r7, #28]
 8009488:	e022      	b.n	80094d0 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	689b      	ldr	r3, [r3, #8]
 8009490:	2240      	movs	r2, #64	; 0x40
 8009492:	4013      	ands	r3, r2
 8009494:	d102      	bne.n	800949c <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	2200      	movs	r2, #0
 800949a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	781b      	ldrb	r3, [r3, #0]
 80094a0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	785b      	ldrb	r3, [r3, #1]
 80094a6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80094a8:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80094aa:	68ba      	ldr	r2, [r7, #8]
 80094ac:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80094ae:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	78db      	ldrb	r3, [r3, #3]
 80094b4:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80094b6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	2120      	movs	r1, #32
 80094bc:	5c5b      	ldrb	r3, [r3, r1]
 80094be:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80094c0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80094c6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80094cc:	4313      	orrs	r3, r2
 80094ce:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	685a      	ldr	r2, [r3, #4]
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	699b      	ldr	r3, [r3, #24]
 80094d8:	4313      	orrs	r3, r2
 80094da:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	22ca      	movs	r2, #202	; 0xca
 80094e2:	625a      	str	r2, [r3, #36]	; 0x24
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	2253      	movs	r2, #83	; 0x53
 80094ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094f0:	2380      	movs	r3, #128	; 0x80
 80094f2:	005b      	lsls	r3, r3, #1
 80094f4:	429a      	cmp	r2, r3
 80094f6:	d14e      	bne.n	8009596 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	689a      	ldr	r2, [r3, #8]
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	495b      	ldr	r1, [pc, #364]	; (8009670 <HAL_RTC_SetAlarm_IT+0x284>)
 8009504:	400a      	ands	r2, r1
 8009506:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	68db      	ldr	r3, [r3, #12]
 800950e:	22ff      	movs	r2, #255	; 0xff
 8009510:	401a      	ands	r2, r3
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4957      	ldr	r1, [pc, #348]	; (8009674 <HAL_RTC_SetAlarm_IT+0x288>)
 8009518:	430a      	orrs	r2, r1
 800951a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800951c:	f7fd fbc2 	bl	8006ca4 <HAL_GetTick>
 8009520:	0003      	movs	r3, r0
 8009522:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009524:	e016      	b.n	8009554 <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009526:	f7fd fbbd 	bl	8006ca4 <HAL_GetTick>
 800952a:	0002      	movs	r2, r0
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	1ad2      	subs	r2, r2, r3
 8009530:	23fa      	movs	r3, #250	; 0xfa
 8009532:	009b      	lsls	r3, r3, #2
 8009534:	429a      	cmp	r2, r3
 8009536:	d90d      	bls.n	8009554 <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	22ff      	movs	r2, #255	; 0xff
 800953e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	2221      	movs	r2, #33	; 0x21
 8009544:	2103      	movs	r1, #3
 8009546:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2220      	movs	r2, #32
 800954c:	2100      	movs	r1, #0
 800954e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009550:	2303      	movs	r3, #3
 8009552:	e089      	b.n	8009668 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	68db      	ldr	r3, [r3, #12]
 800955a:	2201      	movs	r2, #1
 800955c:	4013      	ands	r3, r2
 800955e:	d0e2      	beq.n	8009526 <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	69fa      	ldr	r2, [r7, #28]
 8009566:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	69ba      	ldr	r2, [r7, #24]
 800956e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	689a      	ldr	r2, [r3, #8]
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	2180      	movs	r1, #128	; 0x80
 800957c:	0049      	lsls	r1, r1, #1
 800957e:	430a      	orrs	r2, r1
 8009580:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	689a      	ldr	r2, [r3, #8]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	2180      	movs	r1, #128	; 0x80
 800958e:	0149      	lsls	r1, r1, #5
 8009590:	430a      	orrs	r2, r1
 8009592:	609a      	str	r2, [r3, #8]
 8009594:	e04d      	b.n	8009632 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	689a      	ldr	r2, [r3, #8]
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4935      	ldr	r1, [pc, #212]	; (8009678 <HAL_RTC_SetAlarm_IT+0x28c>)
 80095a2:	400a      	ands	r2, r1
 80095a4:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	22ff      	movs	r2, #255	; 0xff
 80095ae:	401a      	ands	r2, r3
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4931      	ldr	r1, [pc, #196]	; (800967c <HAL_RTC_SetAlarm_IT+0x290>)
 80095b6:	430a      	orrs	r2, r1
 80095b8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80095ba:	f7fd fb73 	bl	8006ca4 <HAL_GetTick>
 80095be:	0003      	movs	r3, r0
 80095c0:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80095c2:	e016      	b.n	80095f2 <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80095c4:	f7fd fb6e 	bl	8006ca4 <HAL_GetTick>
 80095c8:	0002      	movs	r2, r0
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	1ad2      	subs	r2, r2, r3
 80095ce:	23fa      	movs	r3, #250	; 0xfa
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	429a      	cmp	r2, r3
 80095d4:	d90d      	bls.n	80095f2 <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	22ff      	movs	r2, #255	; 0xff
 80095dc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2221      	movs	r2, #33	; 0x21
 80095e2:	2103      	movs	r1, #3
 80095e4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2220      	movs	r2, #32
 80095ea:	2100      	movs	r1, #0
 80095ec:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80095ee:	2303      	movs	r3, #3
 80095f0:	e03a      	b.n	8009668 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	68db      	ldr	r3, [r3, #12]
 80095f8:	2202      	movs	r2, #2
 80095fa:	4013      	ands	r3, r2
 80095fc:	d0e2      	beq.n	80095c4 <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	69fa      	ldr	r2, [r7, #28]
 8009604:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	69ba      	ldr	r2, [r7, #24]
 800960c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	689a      	ldr	r2, [r3, #8]
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	2180      	movs	r1, #128	; 0x80
 800961a:	0089      	lsls	r1, r1, #2
 800961c:	430a      	orrs	r2, r1
 800961e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	689a      	ldr	r2, [r3, #8]
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	2180      	movs	r1, #128	; 0x80
 800962c:	0189      	lsls	r1, r1, #6
 800962e:	430a      	orrs	r2, r1
 8009630:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8009632:	4b13      	ldr	r3, [pc, #76]	; (8009680 <HAL_RTC_SetAlarm_IT+0x294>)
 8009634:	681a      	ldr	r2, [r3, #0]
 8009636:	4b12      	ldr	r3, [pc, #72]	; (8009680 <HAL_RTC_SetAlarm_IT+0x294>)
 8009638:	2180      	movs	r1, #128	; 0x80
 800963a:	0289      	lsls	r1, r1, #10
 800963c:	430a      	orrs	r2, r1
 800963e:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8009640:	4b0f      	ldr	r3, [pc, #60]	; (8009680 <HAL_RTC_SetAlarm_IT+0x294>)
 8009642:	689a      	ldr	r2, [r3, #8]
 8009644:	4b0e      	ldr	r3, [pc, #56]	; (8009680 <HAL_RTC_SetAlarm_IT+0x294>)
 8009646:	2180      	movs	r1, #128	; 0x80
 8009648:	0289      	lsls	r1, r1, #10
 800964a:	430a      	orrs	r2, r1
 800964c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	22ff      	movs	r2, #255	; 0xff
 8009654:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2221      	movs	r2, #33	; 0x21
 800965a:	2101      	movs	r1, #1
 800965c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2220      	movs	r2, #32
 8009662:	2100      	movs	r1, #0
 8009664:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009666:	2300      	movs	r3, #0
}
 8009668:	0018      	movs	r0, r3
 800966a:	46bd      	mov	sp, r7
 800966c:	b009      	add	sp, #36	; 0x24
 800966e:	bd90      	pop	{r4, r7, pc}
 8009670:	fffffeff 	.word	0xfffffeff
 8009674:	fffffe7f 	.word	0xfffffe7f
 8009678:	fffffdff 	.word	0xfffffdff
 800967c:	fffffd7f 	.word	0xfffffd7f
 8009680:	40010400 	.word	0x40010400

08009684 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b084      	sub	sp, #16
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2220      	movs	r2, #32
 8009692:	5c9b      	ldrb	r3, [r3, r2]
 8009694:	2b01      	cmp	r3, #1
 8009696:	d101      	bne.n	800969c <HAL_RTC_DeactivateAlarm+0x18>
 8009698:	2302      	movs	r3, #2
 800969a:	e086      	b.n	80097aa <HAL_RTC_DeactivateAlarm+0x126>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2220      	movs	r2, #32
 80096a0:	2101      	movs	r1, #1
 80096a2:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2221      	movs	r2, #33	; 0x21
 80096a8:	2102      	movs	r1, #2
 80096aa:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	22ca      	movs	r2, #202	; 0xca
 80096b2:	625a      	str	r2, [r3, #36]	; 0x24
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	2253      	movs	r2, #83	; 0x53
 80096ba:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 80096bc:	683a      	ldr	r2, [r7, #0]
 80096be:	2380      	movs	r3, #128	; 0x80
 80096c0:	005b      	lsls	r3, r3, #1
 80096c2:	429a      	cmp	r2, r3
 80096c4:	d132      	bne.n	800972c <HAL_RTC_DeactivateAlarm+0xa8>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	689a      	ldr	r2, [r3, #8]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4938      	ldr	r1, [pc, #224]	; (80097b4 <HAL_RTC_DeactivateAlarm+0x130>)
 80096d2:	400a      	ands	r2, r1
 80096d4:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	689a      	ldr	r2, [r3, #8]
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4935      	ldr	r1, [pc, #212]	; (80097b8 <HAL_RTC_DeactivateAlarm+0x134>)
 80096e2:	400a      	ands	r2, r1
 80096e4:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 80096e6:	f7fd fadd 	bl	8006ca4 <HAL_GetTick>
 80096ea:	0003      	movs	r3, r0
 80096ec:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80096ee:	e016      	b.n	800971e <HAL_RTC_DeactivateAlarm+0x9a>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80096f0:	f7fd fad8 	bl	8006ca4 <HAL_GetTick>
 80096f4:	0002      	movs	r2, r0
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	1ad2      	subs	r2, r2, r3
 80096fa:	23fa      	movs	r3, #250	; 0xfa
 80096fc:	009b      	lsls	r3, r3, #2
 80096fe:	429a      	cmp	r2, r3
 8009700:	d90d      	bls.n	800971e <HAL_RTC_DeactivateAlarm+0x9a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	22ff      	movs	r2, #255	; 0xff
 8009708:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2221      	movs	r2, #33	; 0x21
 800970e:	2103      	movs	r1, #3
 8009710:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2220      	movs	r2, #32
 8009716:	2100      	movs	r1, #0
 8009718:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800971a:	2303      	movs	r3, #3
 800971c:	e045      	b.n	80097aa <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	68db      	ldr	r3, [r3, #12]
 8009724:	2201      	movs	r2, #1
 8009726:	4013      	ands	r3, r2
 8009728:	d0e2      	beq.n	80096f0 <HAL_RTC_DeactivateAlarm+0x6c>
 800972a:	e031      	b.n	8009790 <HAL_RTC_DeactivateAlarm+0x10c>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	689a      	ldr	r2, [r3, #8]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	4921      	ldr	r1, [pc, #132]	; (80097bc <HAL_RTC_DeactivateAlarm+0x138>)
 8009738:	400a      	ands	r2, r1
 800973a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	689a      	ldr	r2, [r3, #8]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	491e      	ldr	r1, [pc, #120]	; (80097c0 <HAL_RTC_DeactivateAlarm+0x13c>)
 8009748:	400a      	ands	r2, r1
 800974a:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 800974c:	f7fd faaa 	bl	8006ca4 <HAL_GetTick>
 8009750:	0003      	movs	r3, r0
 8009752:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009754:	e016      	b.n	8009784 <HAL_RTC_DeactivateAlarm+0x100>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009756:	f7fd faa5 	bl	8006ca4 <HAL_GetTick>
 800975a:	0002      	movs	r2, r0
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	1ad2      	subs	r2, r2, r3
 8009760:	23fa      	movs	r3, #250	; 0xfa
 8009762:	009b      	lsls	r3, r3, #2
 8009764:	429a      	cmp	r2, r3
 8009766:	d90d      	bls.n	8009784 <HAL_RTC_DeactivateAlarm+0x100>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	22ff      	movs	r2, #255	; 0xff
 800976e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2221      	movs	r2, #33	; 0x21
 8009774:	2103      	movs	r1, #3
 8009776:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2220      	movs	r2, #32
 800977c:	2100      	movs	r1, #0
 800977e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009780:	2303      	movs	r3, #3
 8009782:	e012      	b.n	80097aa <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	68db      	ldr	r3, [r3, #12]
 800978a:	2202      	movs	r2, #2
 800978c:	4013      	ands	r3, r2
 800978e:	d0e2      	beq.n	8009756 <HAL_RTC_DeactivateAlarm+0xd2>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	22ff      	movs	r2, #255	; 0xff
 8009796:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2221      	movs	r2, #33	; 0x21
 800979c:	2101      	movs	r1, #1
 800979e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2220      	movs	r2, #32
 80097a4:	2100      	movs	r1, #0
 80097a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80097a8:	2300      	movs	r3, #0
}
 80097aa:	0018      	movs	r0, r3
 80097ac:	46bd      	mov	sp, r7
 80097ae:	b004      	add	sp, #16
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	46c0      	nop			; (mov r8, r8)
 80097b4:	fffffeff 	.word	0xfffffeff
 80097b8:	ffffefff 	.word	0xffffefff
 80097bc:	fffffdff 	.word	0xfffffdff
 80097c0:	ffffdfff 	.word	0xffffdfff

080097c4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b082      	sub	sp, #8
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	689a      	ldr	r2, [r3, #8]
 80097d2:	2380      	movs	r3, #128	; 0x80
 80097d4:	015b      	lsls	r3, r3, #5
 80097d6:	4013      	ands	r3, r2
 80097d8:	d014      	beq.n	8009804 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	68da      	ldr	r2, [r3, #12]
 80097e0:	2380      	movs	r3, #128	; 0x80
 80097e2:	005b      	lsls	r3, r3, #1
 80097e4:	4013      	ands	r3, r2
 80097e6:	d00d      	beq.n	8009804 <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	0018      	movs	r0, r3
 80097ec:	f7f9 ff16 	bl	800361c <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	68db      	ldr	r3, [r3, #12]
 80097f6:	22ff      	movs	r2, #255	; 0xff
 80097f8:	401a      	ands	r2, r3
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	4915      	ldr	r1, [pc, #84]	; (8009854 <HAL_RTC_AlarmIRQHandler+0x90>)
 8009800:	430a      	orrs	r2, r1
 8009802:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	689a      	ldr	r2, [r3, #8]
 800980a:	2380      	movs	r3, #128	; 0x80
 800980c:	019b      	lsls	r3, r3, #6
 800980e:	4013      	ands	r3, r2
 8009810:	d014      	beq.n	800983c <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	68da      	ldr	r2, [r3, #12]
 8009818:	2380      	movs	r3, #128	; 0x80
 800981a:	009b      	lsls	r3, r3, #2
 800981c:	4013      	ands	r3, r2
 800981e:	d00d      	beq.n	800983c <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	0018      	movs	r0, r3
 8009824:	f7f9 ff12 	bl	800364c <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	68db      	ldr	r3, [r3, #12]
 800982e:	22ff      	movs	r2, #255	; 0xff
 8009830:	401a      	ands	r2, r3
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4908      	ldr	r1, [pc, #32]	; (8009858 <HAL_RTC_AlarmIRQHandler+0x94>)
 8009838:	430a      	orrs	r2, r1
 800983a:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800983c:	4b07      	ldr	r3, [pc, #28]	; (800985c <HAL_RTC_AlarmIRQHandler+0x98>)
 800983e:	2280      	movs	r2, #128	; 0x80
 8009840:	0292      	lsls	r2, r2, #10
 8009842:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2221      	movs	r2, #33	; 0x21
 8009848:	2101      	movs	r1, #1
 800984a:	5499      	strb	r1, [r3, r2]
}
 800984c:	46c0      	nop			; (mov r8, r8)
 800984e:	46bd      	mov	sp, r7
 8009850:	b002      	add	sp, #8
 8009852:	bd80      	pop	{r7, pc}
 8009854:	fffffe7f 	.word	0xfffffe7f
 8009858:	fffffd7f 	.word	0xfffffd7f
 800985c:	40010400 	.word	0x40010400

08009860 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b084      	sub	sp, #16
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	68da      	ldr	r2, [r3, #12]
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	21a0      	movs	r1, #160	; 0xa0
 8009874:	438a      	bics	r2, r1
 8009876:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8009878:	f7fd fa14 	bl	8006ca4 <HAL_GetTick>
 800987c:	0003      	movs	r3, r0
 800987e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009880:	e00a      	b.n	8009898 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009882:	f7fd fa0f 	bl	8006ca4 <HAL_GetTick>
 8009886:	0002      	movs	r2, r0
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	1ad2      	subs	r2, r2, r3
 800988c:	23fa      	movs	r3, #250	; 0xfa
 800988e:	009b      	lsls	r3, r3, #2
 8009890:	429a      	cmp	r2, r3
 8009892:	d901      	bls.n	8009898 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009894:	2303      	movs	r3, #3
 8009896:	e006      	b.n	80098a6 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	68db      	ldr	r3, [r3, #12]
 800989e:	2220      	movs	r2, #32
 80098a0:	4013      	ands	r3, r2
 80098a2:	d0ee      	beq.n	8009882 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80098a4:	2300      	movs	r3, #0
}
 80098a6:	0018      	movs	r0, r3
 80098a8:	46bd      	mov	sp, r7
 80098aa:	b004      	add	sp, #16
 80098ac:	bd80      	pop	{r7, pc}

080098ae <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80098ae:	b580      	push	{r7, lr}
 80098b0:	b084      	sub	sp, #16
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	68db      	ldr	r3, [r3, #12]
 80098bc:	2240      	movs	r2, #64	; 0x40
 80098be:	4013      	ands	r3, r2
 80098c0:	d11a      	bne.n	80098f8 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	2201      	movs	r2, #1
 80098c8:	4252      	negs	r2, r2
 80098ca:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80098cc:	f7fd f9ea 	bl	8006ca4 <HAL_GetTick>
 80098d0:	0003      	movs	r3, r0
 80098d2:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80098d4:	e00a      	b.n	80098ec <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80098d6:	f7fd f9e5 	bl	8006ca4 <HAL_GetTick>
 80098da:	0002      	movs	r2, r0
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	1ad2      	subs	r2, r2, r3
 80098e0:	23fa      	movs	r3, #250	; 0xfa
 80098e2:	009b      	lsls	r3, r3, #2
 80098e4:	429a      	cmp	r2, r3
 80098e6:	d901      	bls.n	80098ec <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 80098e8:	2303      	movs	r3, #3
 80098ea:	e006      	b.n	80098fa <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	68db      	ldr	r3, [r3, #12]
 80098f2:	2240      	movs	r2, #64	; 0x40
 80098f4:	4013      	ands	r3, r2
 80098f6:	d0ee      	beq.n	80098d6 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80098f8:	2300      	movs	r3, #0
}
 80098fa:	0018      	movs	r0, r3
 80098fc:	46bd      	mov	sp, r7
 80098fe:	b004      	add	sp, #16
 8009900:	bd80      	pop	{r7, pc}

08009902 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009902:	b580      	push	{r7, lr}
 8009904:	b084      	sub	sp, #16
 8009906:	af00      	add	r7, sp, #0
 8009908:	0002      	movs	r2, r0
 800990a:	1dfb      	adds	r3, r7, #7
 800990c:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800990e:	2300      	movs	r3, #0
 8009910:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8009912:	230b      	movs	r3, #11
 8009914:	18fb      	adds	r3, r7, r3
 8009916:	1dfa      	adds	r2, r7, #7
 8009918:	7812      	ldrb	r2, [r2, #0]
 800991a:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 800991c:	e008      	b.n	8009930 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	3301      	adds	r3, #1
 8009922:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8009924:	220b      	movs	r2, #11
 8009926:	18bb      	adds	r3, r7, r2
 8009928:	18ba      	adds	r2, r7, r2
 800992a:	7812      	ldrb	r2, [r2, #0]
 800992c:	3a0a      	subs	r2, #10
 800992e:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8009930:	230b      	movs	r3, #11
 8009932:	18fb      	adds	r3, r7, r3
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	2b09      	cmp	r3, #9
 8009938:	d8f1      	bhi.n	800991e <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	b2db      	uxtb	r3, r3
 800993e:	011b      	lsls	r3, r3, #4
 8009940:	b2da      	uxtb	r2, r3
 8009942:	230b      	movs	r3, #11
 8009944:	18fb      	adds	r3, r7, r3
 8009946:	781b      	ldrb	r3, [r3, #0]
 8009948:	4313      	orrs	r3, r2
 800994a:	b2db      	uxtb	r3, r3
}
 800994c:	0018      	movs	r0, r3
 800994e:	46bd      	mov	sp, r7
 8009950:	b004      	add	sp, #16
 8009952:	bd80      	pop	{r7, pc}

08009954 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b084      	sub	sp, #16
 8009958:	af00      	add	r7, sp, #0
 800995a:	0002      	movs	r2, r0
 800995c:	1dfb      	adds	r3, r7, #7
 800995e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8009960:	1dfb      	adds	r3, r7, #7
 8009962:	781b      	ldrb	r3, [r3, #0]
 8009964:	091b      	lsrs	r3, r3, #4
 8009966:	b2db      	uxtb	r3, r3
 8009968:	001a      	movs	r2, r3
 800996a:	0013      	movs	r3, r2
 800996c:	009b      	lsls	r3, r3, #2
 800996e:	189b      	adds	r3, r3, r2
 8009970:	005b      	lsls	r3, r3, #1
 8009972:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	b2da      	uxtb	r2, r3
 8009978:	1dfb      	adds	r3, r7, #7
 800997a:	781b      	ldrb	r3, [r3, #0]
 800997c:	210f      	movs	r1, #15
 800997e:	400b      	ands	r3, r1
 8009980:	b2db      	uxtb	r3, r3
 8009982:	18d3      	adds	r3, r2, r3
 8009984:	b2db      	uxtb	r3, r3
}
 8009986:	0018      	movs	r0, r3
 8009988:	46bd      	mov	sp, r7
 800998a:	b004      	add	sp, #16
 800998c:	bd80      	pop	{r7, pc}

0800998e <HAL_RTCEx_SetSmoothCalib>:
  *         must be equal to SMOOTHCALIB_PLUSPULSES_RESET and the field
  *         SmoothCalibMinusPulsesValue mut be equal to 0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSmoothCalib(RTC_HandleTypeDef *hrtc, uint32_t SmoothCalibPeriod, uint32_t SmoothCalibPlusPulses, uint32_t SmoothCalibMinusPulsesValue)
{
 800998e:	b580      	push	{r7, lr}
 8009990:	b086      	sub	sp, #24
 8009992:	af00      	add	r7, sp, #0
 8009994:	60f8      	str	r0, [r7, #12]
 8009996:	60b9      	str	r1, [r7, #8]
 8009998:	607a      	str	r2, [r7, #4]
 800999a:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(SmoothCalibMinusPulsesValue));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	2220      	movs	r2, #32
 80099a0:	5c9b      	ldrb	r3, [r3, r2]
 80099a2:	2b01      	cmp	r3, #1
 80099a4:	d101      	bne.n	80099aa <HAL_RTCEx_SetSmoothCalib+0x1c>
 80099a6:	2302      	movs	r3, #2
 80099a8:	e04f      	b.n	8009a4a <HAL_RTCEx_SetSmoothCalib+0xbc>
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2220      	movs	r2, #32
 80099ae:	2101      	movs	r1, #1
 80099b0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	2221      	movs	r2, #33	; 0x21
 80099b6:	2102      	movs	r1, #2
 80099b8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	22ca      	movs	r2, #202	; 0xca
 80099c0:	625a      	str	r2, [r3, #36]	; 0x24
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	2253      	movs	r2, #83	; 0x53
 80099c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* check if a calibration is pending*/
  if ((hrtc->Instance->ISR & RTC_ISR_RECALPF) != 0U)
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	68da      	ldr	r2, [r3, #12]
 80099d0:	2380      	movs	r3, #128	; 0x80
 80099d2:	025b      	lsls	r3, r3, #9
 80099d4:	4013      	ands	r3, r2
 80099d6:	d022      	beq.n	8009a1e <HAL_RTCEx_SetSmoothCalib+0x90>
  {
    tickstart = HAL_GetTick();
 80099d8:	f7fd f964 	bl	8006ca4 <HAL_GetTick>
 80099dc:	0003      	movs	r3, r0
 80099de:	617b      	str	r3, [r7, #20]

    /* check if a calibration is pending*/
    while ((hrtc->Instance->ISR & RTC_ISR_RECALPF) != 0U)
 80099e0:	e016      	b.n	8009a10 <HAL_RTCEx_SetSmoothCalib+0x82>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80099e2:	f7fd f95f 	bl	8006ca4 <HAL_GetTick>
 80099e6:	0002      	movs	r2, r0
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	1ad2      	subs	r2, r2, r3
 80099ec:	23fa      	movs	r3, #250	; 0xfa
 80099ee:	009b      	lsls	r3, r3, #2
 80099f0:	429a      	cmp	r2, r3
 80099f2:	d90d      	bls.n	8009a10 <HAL_RTCEx_SetSmoothCalib+0x82>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	22ff      	movs	r2, #255	; 0xff
 80099fa:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	2221      	movs	r2, #33	; 0x21
 8009a00:	2103      	movs	r1, #3
 8009a02:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	2220      	movs	r2, #32
 8009a08:	2100      	movs	r1, #0
 8009a0a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009a0c:	2303      	movs	r3, #3
 8009a0e:	e01c      	b.n	8009a4a <HAL_RTCEx_SetSmoothCalib+0xbc>
    while ((hrtc->Instance->ISR & RTC_ISR_RECALPF) != 0U)
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	68da      	ldr	r2, [r3, #12]
 8009a16:	2380      	movs	r3, #128	; 0x80
 8009a18:	025b      	lsls	r3, r3, #9
 8009a1a:	4013      	ands	r3, r2
 8009a1c:	d1e1      	bne.n	80099e2 <HAL_RTCEx_SetSmoothCalib+0x54>
      }
    }
  }

  /* Configure the Smooth calibration settings */
  hrtc->Instance->CALR = (uint32_t)((uint32_t)SmoothCalibPeriod | (uint32_t)SmoothCalibPlusPulses | (uint32_t)SmoothCalibMinusPulsesValue);
 8009a1e:	68ba      	ldr	r2, [r7, #8]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	431a      	orrs	r2, r3
 8009a24:	0011      	movs	r1, r2
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	683a      	ldr	r2, [r7, #0]
 8009a2c:	430a      	orrs	r2, r1
 8009a2e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	22ff      	movs	r2, #255	; 0xff
 8009a36:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	2221      	movs	r2, #33	; 0x21
 8009a3c:	2101      	movs	r1, #1
 8009a3e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	2220      	movs	r2, #32
 8009a44:	2100      	movs	r1, #0
 8009a46:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009a48:	2300      	movs	r3, #0
}
 8009a4a:	0018      	movs	r0, r3
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	b006      	add	sp, #24
 8009a50:	bd80      	pop	{r7, pc}
	...

08009a54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b082      	sub	sp, #8
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d101      	bne.n	8009a66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009a62:	2301      	movs	r3, #1
 8009a64:	e059      	b.n	8009b1a <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2251      	movs	r2, #81	; 0x51
 8009a70:	5c9b      	ldrb	r3, [r3, r2]
 8009a72:	b2db      	uxtb	r3, r3
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d107      	bne.n	8009a88 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2250      	movs	r2, #80	; 0x50
 8009a7c:	2100      	movs	r1, #0
 8009a7e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	0018      	movs	r0, r3
 8009a84:	f7fa fde6 	bl	8004654 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2251      	movs	r2, #81	; 0x51
 8009a8c:	2102      	movs	r1, #2
 8009a8e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	681a      	ldr	r2, [r3, #0]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	2140      	movs	r1, #64	; 0x40
 8009a9c:	438a      	bics	r2, r1
 8009a9e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	685a      	ldr	r2, [r3, #4]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	689b      	ldr	r3, [r3, #8]
 8009aa8:	431a      	orrs	r2, r3
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	68db      	ldr	r3, [r3, #12]
 8009aae:	431a      	orrs	r2, r3
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	691b      	ldr	r3, [r3, #16]
 8009ab4:	431a      	orrs	r2, r3
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	695b      	ldr	r3, [r3, #20]
 8009aba:	431a      	orrs	r2, r3
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6999      	ldr	r1, [r3, #24]
 8009ac0:	2380      	movs	r3, #128	; 0x80
 8009ac2:	009b      	lsls	r3, r3, #2
 8009ac4:	400b      	ands	r3, r1
 8009ac6:	431a      	orrs	r2, r3
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	69db      	ldr	r3, [r3, #28]
 8009acc:	431a      	orrs	r2, r3
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6a1b      	ldr	r3, [r3, #32]
 8009ad2:	431a      	orrs	r2, r3
 8009ad4:	0011      	movs	r1, r2
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	430a      	orrs	r2, r1
 8009ae0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	699b      	ldr	r3, [r3, #24]
 8009ae6:	0c1b      	lsrs	r3, r3, #16
 8009ae8:	2204      	movs	r2, #4
 8009aea:	4013      	ands	r3, r2
 8009aec:	0019      	movs	r1, r3
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	430a      	orrs	r2, r1
 8009af8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	69da      	ldr	r2, [r3, #28]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4907      	ldr	r1, [pc, #28]	; (8009b24 <HAL_SPI_Init+0xd0>)
 8009b06:	400a      	ands	r2, r1
 8009b08:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2251      	movs	r2, #81	; 0x51
 8009b14:	2101      	movs	r1, #1
 8009b16:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009b18:	2300      	movs	r3, #0
}
 8009b1a:	0018      	movs	r0, r3
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	b002      	add	sp, #8
 8009b20:	bd80      	pop	{r7, pc}
 8009b22:	46c0      	nop			; (mov r8, r8)
 8009b24:	fffff7ff 	.word	0xfffff7ff

08009b28 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b088      	sub	sp, #32
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	60f8      	str	r0, [r7, #12]
 8009b30:	60b9      	str	r1, [r7, #8]
 8009b32:	603b      	str	r3, [r7, #0]
 8009b34:	1dbb      	adds	r3, r7, #6
 8009b36:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009b38:	231f      	movs	r3, #31
 8009b3a:	18fb      	adds	r3, r7, r3
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	2250      	movs	r2, #80	; 0x50
 8009b44:	5c9b      	ldrb	r3, [r3, r2]
 8009b46:	2b01      	cmp	r3, #1
 8009b48:	d101      	bne.n	8009b4e <HAL_SPI_Transmit+0x26>
 8009b4a:	2302      	movs	r3, #2
 8009b4c:	e136      	b.n	8009dbc <HAL_SPI_Transmit+0x294>
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	2250      	movs	r2, #80	; 0x50
 8009b52:	2101      	movs	r1, #1
 8009b54:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009b56:	f7fd f8a5 	bl	8006ca4 <HAL_GetTick>
 8009b5a:	0003      	movs	r3, r0
 8009b5c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8009b5e:	2316      	movs	r3, #22
 8009b60:	18fb      	adds	r3, r7, r3
 8009b62:	1dba      	adds	r2, r7, #6
 8009b64:	8812      	ldrh	r2, [r2, #0]
 8009b66:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2251      	movs	r2, #81	; 0x51
 8009b6c:	5c9b      	ldrb	r3, [r3, r2]
 8009b6e:	b2db      	uxtb	r3, r3
 8009b70:	2b01      	cmp	r3, #1
 8009b72:	d004      	beq.n	8009b7e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8009b74:	231f      	movs	r3, #31
 8009b76:	18fb      	adds	r3, r7, r3
 8009b78:	2202      	movs	r2, #2
 8009b7a:	701a      	strb	r2, [r3, #0]
    goto error;
 8009b7c:	e113      	b.n	8009da6 <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d003      	beq.n	8009b8c <HAL_SPI_Transmit+0x64>
 8009b84:	1dbb      	adds	r3, r7, #6
 8009b86:	881b      	ldrh	r3, [r3, #0]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d104      	bne.n	8009b96 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8009b8c:	231f      	movs	r3, #31
 8009b8e:	18fb      	adds	r3, r7, r3
 8009b90:	2201      	movs	r2, #1
 8009b92:	701a      	strb	r2, [r3, #0]
    goto error;
 8009b94:	e107      	b.n	8009da6 <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2251      	movs	r2, #81	; 0x51
 8009b9a:	2103      	movs	r1, #3
 8009b9c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	68ba      	ldr	r2, [r7, #8]
 8009ba8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	1dba      	adds	r2, r7, #6
 8009bae:	8812      	ldrh	r2, [r2, #0]
 8009bb0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	1dba      	adds	r2, r7, #6
 8009bb6:	8812      	ldrh	r2, [r2, #0]
 8009bb8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	689a      	ldr	r2, [r3, #8]
 8009bdc:	2380      	movs	r3, #128	; 0x80
 8009bde:	021b      	lsls	r3, r3, #8
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d108      	bne.n	8009bf6 <HAL_SPI_Transmit+0xce>
  {
    SPI_1LINE_TX(hspi);
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	681a      	ldr	r2, [r3, #0]
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	2180      	movs	r1, #128	; 0x80
 8009bf0:	01c9      	lsls	r1, r1, #7
 8009bf2:	430a      	orrs	r2, r1
 8009bf4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	2240      	movs	r2, #64	; 0x40
 8009bfe:	4013      	ands	r3, r2
 8009c00:	2b40      	cmp	r3, #64	; 0x40
 8009c02:	d007      	beq.n	8009c14 <HAL_SPI_Transmit+0xec>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	681a      	ldr	r2, [r3, #0]
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	2140      	movs	r1, #64	; 0x40
 8009c10:	430a      	orrs	r2, r1
 8009c12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	68da      	ldr	r2, [r3, #12]
 8009c18:	2380      	movs	r3, #128	; 0x80
 8009c1a:	011b      	lsls	r3, r3, #4
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	d14e      	bne.n	8009cbe <HAL_SPI_Transmit+0x196>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d004      	beq.n	8009c32 <HAL_SPI_Transmit+0x10a>
 8009c28:	2316      	movs	r3, #22
 8009c2a:	18fb      	adds	r3, r7, r3
 8009c2c:	881b      	ldrh	r3, [r3, #0]
 8009c2e:	2b01      	cmp	r3, #1
 8009c30:	d13f      	bne.n	8009cb2 <HAL_SPI_Transmit+0x18a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c36:	881a      	ldrh	r2, [r3, #0]
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c42:	1c9a      	adds	r2, r3, #2
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c4c:	b29b      	uxth	r3, r3
 8009c4e:	3b01      	subs	r3, #1
 8009c50:	b29a      	uxth	r2, r3
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009c56:	e02c      	b.n	8009cb2 <HAL_SPI_Transmit+0x18a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	689b      	ldr	r3, [r3, #8]
 8009c5e:	2202      	movs	r2, #2
 8009c60:	4013      	ands	r3, r2
 8009c62:	2b02      	cmp	r3, #2
 8009c64:	d112      	bne.n	8009c8c <HAL_SPI_Transmit+0x164>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c6a:	881a      	ldrh	r2, [r3, #0]
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c76:	1c9a      	adds	r2, r3, #2
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c80:	b29b      	uxth	r3, r3
 8009c82:	3b01      	subs	r3, #1
 8009c84:	b29a      	uxth	r2, r3
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	86da      	strh	r2, [r3, #54]	; 0x36
 8009c8a:	e012      	b.n	8009cb2 <HAL_SPI_Transmit+0x18a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009c8c:	f7fd f80a 	bl	8006ca4 <HAL_GetTick>
 8009c90:	0002      	movs	r2, r0
 8009c92:	69bb      	ldr	r3, [r7, #24]
 8009c94:	1ad3      	subs	r3, r2, r3
 8009c96:	683a      	ldr	r2, [r7, #0]
 8009c98:	429a      	cmp	r2, r3
 8009c9a:	d802      	bhi.n	8009ca2 <HAL_SPI_Transmit+0x17a>
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	3301      	adds	r3, #1
 8009ca0:	d102      	bne.n	8009ca8 <HAL_SPI_Transmit+0x180>
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d104      	bne.n	8009cb2 <HAL_SPI_Transmit+0x18a>
        {
          errorcode = HAL_TIMEOUT;
 8009ca8:	231f      	movs	r3, #31
 8009caa:	18fb      	adds	r3, r7, r3
 8009cac:	2203      	movs	r2, #3
 8009cae:	701a      	strb	r2, [r3, #0]
          goto error;
 8009cb0:	e079      	b.n	8009da6 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d1cd      	bne.n	8009c58 <HAL_SPI_Transmit+0x130>
 8009cbc:	e04f      	b.n	8009d5e <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	685b      	ldr	r3, [r3, #4]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d004      	beq.n	8009cd0 <HAL_SPI_Transmit+0x1a8>
 8009cc6:	2316      	movs	r3, #22
 8009cc8:	18fb      	adds	r3, r7, r3
 8009cca:	881b      	ldrh	r3, [r3, #0]
 8009ccc:	2b01      	cmp	r3, #1
 8009cce:	d141      	bne.n	8009d54 <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	330c      	adds	r3, #12
 8009cda:	7812      	ldrb	r2, [r2, #0]
 8009cdc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ce2:	1c5a      	adds	r2, r3, #1
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009cec:	b29b      	uxth	r3, r3
 8009cee:	3b01      	subs	r3, #1
 8009cf0:	b29a      	uxth	r2, r3
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009cf6:	e02d      	b.n	8009d54 <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	689b      	ldr	r3, [r3, #8]
 8009cfe:	2202      	movs	r2, #2
 8009d00:	4013      	ands	r3, r2
 8009d02:	2b02      	cmp	r3, #2
 8009d04:	d113      	bne.n	8009d2e <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	330c      	adds	r3, #12
 8009d10:	7812      	ldrb	r2, [r2, #0]
 8009d12:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d18:	1c5a      	adds	r2, r3, #1
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d22:	b29b      	uxth	r3, r3
 8009d24:	3b01      	subs	r3, #1
 8009d26:	b29a      	uxth	r2, r3
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	86da      	strh	r2, [r3, #54]	; 0x36
 8009d2c:	e012      	b.n	8009d54 <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d2e:	f7fc ffb9 	bl	8006ca4 <HAL_GetTick>
 8009d32:	0002      	movs	r2, r0
 8009d34:	69bb      	ldr	r3, [r7, #24]
 8009d36:	1ad3      	subs	r3, r2, r3
 8009d38:	683a      	ldr	r2, [r7, #0]
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	d802      	bhi.n	8009d44 <HAL_SPI_Transmit+0x21c>
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	3301      	adds	r3, #1
 8009d42:	d102      	bne.n	8009d4a <HAL_SPI_Transmit+0x222>
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d104      	bne.n	8009d54 <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 8009d4a:	231f      	movs	r3, #31
 8009d4c:	18fb      	adds	r3, r7, r3
 8009d4e:	2203      	movs	r2, #3
 8009d50:	701a      	strb	r2, [r3, #0]
          goto error;
 8009d52:	e028      	b.n	8009da6 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d58:	b29b      	uxth	r3, r3
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d1cc      	bne.n	8009cf8 <HAL_SPI_Transmit+0x1d0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009d5e:	69ba      	ldr	r2, [r7, #24]
 8009d60:	6839      	ldr	r1, [r7, #0]
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	0018      	movs	r0, r3
 8009d66:	f000 fa99 	bl	800a29c <SPI_EndRxTxTransaction>
 8009d6a:	1e03      	subs	r3, r0, #0
 8009d6c:	d002      	beq.n	8009d74 <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	2220      	movs	r2, #32
 8009d72:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	689b      	ldr	r3, [r3, #8]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d10a      	bne.n	8009d92 <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	613b      	str	r3, [r7, #16]
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	68db      	ldr	r3, [r3, #12]
 8009d86:	613b      	str	r3, [r7, #16]
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	689b      	ldr	r3, [r3, #8]
 8009d8e:	613b      	str	r3, [r7, #16]
 8009d90:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d004      	beq.n	8009da4 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 8009d9a:	231f      	movs	r3, #31
 8009d9c:	18fb      	adds	r3, r7, r3
 8009d9e:	2201      	movs	r2, #1
 8009da0:	701a      	strb	r2, [r3, #0]
 8009da2:	e000      	b.n	8009da6 <HAL_SPI_Transmit+0x27e>
  }

error:
 8009da4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2251      	movs	r2, #81	; 0x51
 8009daa:	2101      	movs	r1, #1
 8009dac:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	2250      	movs	r2, #80	; 0x50
 8009db2:	2100      	movs	r1, #0
 8009db4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009db6:	231f      	movs	r3, #31
 8009db8:	18fb      	adds	r3, r7, r3
 8009dba:	781b      	ldrb	r3, [r3, #0]
}
 8009dbc:	0018      	movs	r0, r3
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	b008      	add	sp, #32
 8009dc2:	bd80      	pop	{r7, pc}

08009dc4 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b086      	sub	sp, #24
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	60f8      	str	r0, [r7, #12]
 8009dcc:	60b9      	str	r1, [r7, #8]
 8009dce:	1dbb      	adds	r3, r7, #6
 8009dd0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009dd2:	2317      	movs	r3, #23
 8009dd4:	18fb      	adds	r3, r7, r3
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2250      	movs	r2, #80	; 0x50
 8009dde:	5c9b      	ldrb	r3, [r3, r2]
 8009de0:	2b01      	cmp	r3, #1
 8009de2:	d101      	bne.n	8009de8 <HAL_SPI_Transmit_IT+0x24>
 8009de4:	2302      	movs	r3, #2
 8009de6:	e072      	b.n	8009ece <HAL_SPI_Transmit_IT+0x10a>
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2250      	movs	r2, #80	; 0x50
 8009dec:	2101      	movs	r1, #1
 8009dee:	5499      	strb	r1, [r3, r2]

  if ((pData == NULL) || (Size == 0U))
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d003      	beq.n	8009dfe <HAL_SPI_Transmit_IT+0x3a>
 8009df6:	1dbb      	adds	r3, r7, #6
 8009df8:	881b      	ldrh	r3, [r3, #0]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d104      	bne.n	8009e08 <HAL_SPI_Transmit_IT+0x44>
  {
    errorcode = HAL_ERROR;
 8009dfe:	2317      	movs	r3, #23
 8009e00:	18fb      	adds	r3, r7, r3
 8009e02:	2201      	movs	r2, #1
 8009e04:	701a      	strb	r2, [r3, #0]
    goto error;
 8009e06:	e05b      	b.n	8009ec0 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	2251      	movs	r2, #81	; 0x51
 8009e0c:	5c9b      	ldrb	r3, [r3, r2]
 8009e0e:	b2db      	uxtb	r3, r3
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	d004      	beq.n	8009e1e <HAL_SPI_Transmit_IT+0x5a>
  {
    errorcode = HAL_BUSY;
 8009e14:	2317      	movs	r3, #23
 8009e16:	18fb      	adds	r3, r7, r3
 8009e18:	2202      	movs	r2, #2
 8009e1a:	701a      	strb	r2, [r3, #0]
    goto error;
 8009e1c:	e050      	b.n	8009ec0 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2251      	movs	r2, #81	; 0x51
 8009e22:	2103      	movs	r1, #3
 8009e24:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	68ba      	ldr	r2, [r7, #8]
 8009e30:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	1dba      	adds	r2, r7, #6
 8009e36:	8812      	ldrh	r2, [r2, #0]
 8009e38:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	1dba      	adds	r2, r7, #6
 8009e3e:	8812      	ldrh	r2, [r2, #0]
 8009e40:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	2200      	movs	r2, #0
 8009e46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	2200      	movs	r2, #0
 8009e52:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	2200      	movs	r2, #0
 8009e58:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	68db      	ldr	r3, [r3, #12]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d003      	beq.n	8009e6a <HAL_SPI_Transmit_IT+0xa6>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	4a1c      	ldr	r2, [pc, #112]	; (8009ed8 <HAL_SPI_Transmit_IT+0x114>)
 8009e66:	645a      	str	r2, [r3, #68]	; 0x44
 8009e68:	e002      	b.n	8009e70 <HAL_SPI_Transmit_IT+0xac>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	4a1b      	ldr	r2, [pc, #108]	; (8009edc <HAL_SPI_Transmit_IT+0x118>)
 8009e6e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	689a      	ldr	r2, [r3, #8]
 8009e74:	2380      	movs	r3, #128	; 0x80
 8009e76:	021b      	lsls	r3, r3, #8
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d108      	bne.n	8009e8e <HAL_SPI_Transmit_IT+0xca>
  {
    SPI_1LINE_TX(hspi);
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	681a      	ldr	r2, [r3, #0]
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	2180      	movs	r1, #128	; 0x80
 8009e88:	01c9      	lsls	r1, r1, #7
 8009e8a:	430a      	orrs	r2, r1
 8009e8c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	685a      	ldr	r2, [r3, #4]
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	21a0      	movs	r1, #160	; 0xa0
 8009e9a:	430a      	orrs	r2, r1
 8009e9c:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	2240      	movs	r2, #64	; 0x40
 8009ea6:	4013      	ands	r3, r2
 8009ea8:	2b40      	cmp	r3, #64	; 0x40
 8009eaa:	d008      	beq.n	8009ebe <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	681a      	ldr	r2, [r3, #0]
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	2140      	movs	r1, #64	; 0x40
 8009eb8:	430a      	orrs	r2, r1
 8009eba:	601a      	str	r2, [r3, #0]
 8009ebc:	e000      	b.n	8009ec0 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 8009ebe:	46c0      	nop			; (mov r8, r8)
  __HAL_UNLOCK(hspi);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	2250      	movs	r2, #80	; 0x50
 8009ec4:	2100      	movs	r1, #0
 8009ec6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009ec8:	2317      	movs	r3, #23
 8009eca:	18fb      	adds	r3, r7, r3
 8009ecc:	781b      	ldrb	r3, [r3, #0]
}
 8009ece:	0018      	movs	r0, r3
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	b006      	add	sp, #24
 8009ed4:	bd80      	pop	{r7, pc}
 8009ed6:	46c0      	nop			; (mov r8, r8)
 8009ed8:	0800a177 	.word	0x0800a177
 8009edc:	0800a12f 	.word	0x0800a12f

08009ee0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b088      	sub	sp, #32
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	689b      	ldr	r3, [r3, #8]
 8009ef6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009ef8:	69bb      	ldr	r3, [r7, #24]
 8009efa:	099b      	lsrs	r3, r3, #6
 8009efc:	001a      	movs	r2, r3
 8009efe:	2301      	movs	r3, #1
 8009f00:	4013      	ands	r3, r2
 8009f02:	d10f      	bne.n	8009f24 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009f04:	69bb      	ldr	r3, [r7, #24]
 8009f06:	2201      	movs	r2, #1
 8009f08:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009f0a:	d00b      	beq.n	8009f24 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009f0c:	69fb      	ldr	r3, [r7, #28]
 8009f0e:	099b      	lsrs	r3, r3, #6
 8009f10:	001a      	movs	r2, r3
 8009f12:	2301      	movs	r3, #1
 8009f14:	4013      	ands	r3, r2
 8009f16:	d005      	beq.n	8009f24 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f1c:	687a      	ldr	r2, [r7, #4]
 8009f1e:	0010      	movs	r0, r2
 8009f20:	4798      	blx	r3
    return;
 8009f22:	e0d6      	b.n	800a0d2 <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8009f24:	69bb      	ldr	r3, [r7, #24]
 8009f26:	085b      	lsrs	r3, r3, #1
 8009f28:	001a      	movs	r2, r3
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	4013      	ands	r3, r2
 8009f2e:	d00b      	beq.n	8009f48 <HAL_SPI_IRQHandler+0x68>
 8009f30:	69fb      	ldr	r3, [r7, #28]
 8009f32:	09db      	lsrs	r3, r3, #7
 8009f34:	001a      	movs	r2, r3
 8009f36:	2301      	movs	r3, #1
 8009f38:	4013      	ands	r3, r2
 8009f3a:	d005      	beq.n	8009f48 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f40:	687a      	ldr	r2, [r7, #4]
 8009f42:	0010      	movs	r0, r2
 8009f44:	4798      	blx	r3
    return;
 8009f46:	e0c4      	b.n	800a0d2 <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009f48:	69bb      	ldr	r3, [r7, #24]
 8009f4a:	095b      	lsrs	r3, r3, #5
 8009f4c:	001a      	movs	r2, r3
 8009f4e:	2301      	movs	r3, #1
 8009f50:	4013      	ands	r3, r2
 8009f52:	d10c      	bne.n	8009f6e <HAL_SPI_IRQHandler+0x8e>
 8009f54:	69bb      	ldr	r3, [r7, #24]
 8009f56:	099b      	lsrs	r3, r3, #6
 8009f58:	001a      	movs	r2, r3
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	4013      	ands	r3, r2
 8009f5e:	d106      	bne.n	8009f6e <HAL_SPI_IRQHandler+0x8e>
 8009f60:	69bb      	ldr	r3, [r7, #24]
 8009f62:	0a1b      	lsrs	r3, r3, #8
 8009f64:	001a      	movs	r2, r3
 8009f66:	2301      	movs	r3, #1
 8009f68:	4013      	ands	r3, r2
 8009f6a:	d100      	bne.n	8009f6e <HAL_SPI_IRQHandler+0x8e>
 8009f6c:	e0b1      	b.n	800a0d2 <HAL_SPI_IRQHandler+0x1f2>
 8009f6e:	69fb      	ldr	r3, [r7, #28]
 8009f70:	095b      	lsrs	r3, r3, #5
 8009f72:	001a      	movs	r2, r3
 8009f74:	2301      	movs	r3, #1
 8009f76:	4013      	ands	r3, r2
 8009f78:	d100      	bne.n	8009f7c <HAL_SPI_IRQHandler+0x9c>
 8009f7a:	e0aa      	b.n	800a0d2 <HAL_SPI_IRQHandler+0x1f2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009f7c:	69bb      	ldr	r3, [r7, #24]
 8009f7e:	099b      	lsrs	r3, r3, #6
 8009f80:	001a      	movs	r2, r3
 8009f82:	2301      	movs	r3, #1
 8009f84:	4013      	ands	r3, r2
 8009f86:	d023      	beq.n	8009fd0 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2251      	movs	r2, #81	; 0x51
 8009f8c:	5c9b      	ldrb	r3, [r3, r2]
 8009f8e:	b2db      	uxtb	r3, r3
 8009f90:	2b03      	cmp	r3, #3
 8009f92:	d011      	beq.n	8009fb8 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f98:	2204      	movs	r2, #4
 8009f9a:	431a      	orrs	r2, r3
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	617b      	str	r3, [r7, #20]
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	68db      	ldr	r3, [r3, #12]
 8009faa:	617b      	str	r3, [r7, #20]
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	689b      	ldr	r3, [r3, #8]
 8009fb2:	617b      	str	r3, [r7, #20]
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	e00b      	b.n	8009fd0 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009fb8:	2300      	movs	r3, #0
 8009fba:	613b      	str	r3, [r7, #16]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	68db      	ldr	r3, [r3, #12]
 8009fc2:	613b      	str	r3, [r7, #16]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	689b      	ldr	r3, [r3, #8]
 8009fca:	613b      	str	r3, [r7, #16]
 8009fcc:	693b      	ldr	r3, [r7, #16]
        return;
 8009fce:	e080      	b.n	800a0d2 <HAL_SPI_IRQHandler+0x1f2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009fd0:	69bb      	ldr	r3, [r7, #24]
 8009fd2:	095b      	lsrs	r3, r3, #5
 8009fd4:	001a      	movs	r2, r3
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	4013      	ands	r3, r2
 8009fda:	d014      	beq.n	800a006 <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fe0:	2201      	movs	r2, #1
 8009fe2:	431a      	orrs	r2, r3
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009fe8:	2300      	movs	r3, #0
 8009fea:	60fb      	str	r3, [r7, #12]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	689b      	ldr	r3, [r3, #8]
 8009ff2:	60fb      	str	r3, [r7, #12]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	681a      	ldr	r2, [r3, #0]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	2140      	movs	r1, #64	; 0x40
 800a000:	438a      	bics	r2, r1
 800a002:	601a      	str	r2, [r3, #0]
 800a004:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800a006:	69bb      	ldr	r3, [r7, #24]
 800a008:	0a1b      	lsrs	r3, r3, #8
 800a00a:	001a      	movs	r2, r3
 800a00c:	2301      	movs	r3, #1
 800a00e:	4013      	ands	r3, r2
 800a010:	d00c      	beq.n	800a02c <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a016:	2208      	movs	r2, #8
 800a018:	431a      	orrs	r2, r3
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a01e:	2300      	movs	r3, #0
 800a020:	60bb      	str	r3, [r7, #8]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	689b      	ldr	r3, [r3, #8]
 800a028:	60bb      	str	r3, [r7, #8]
 800a02a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a030:	2b00      	cmp	r3, #0
 800a032:	d04d      	beq.n	800a0d0 <HAL_SPI_IRQHandler+0x1f0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	685a      	ldr	r2, [r3, #4]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	21e0      	movs	r1, #224	; 0xe0
 800a040:	438a      	bics	r2, r1
 800a042:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2251      	movs	r2, #81	; 0x51
 800a048:	2101      	movs	r1, #1
 800a04a:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a04c:	69fb      	ldr	r3, [r7, #28]
 800a04e:	2202      	movs	r2, #2
 800a050:	4013      	ands	r3, r2
 800a052:	d103      	bne.n	800a05c <HAL_SPI_IRQHandler+0x17c>
 800a054:	69fb      	ldr	r3, [r7, #28]
 800a056:	2201      	movs	r2, #1
 800a058:	4013      	ands	r3, r2
 800a05a:	d032      	beq.n	800a0c2 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	685a      	ldr	r2, [r3, #4]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	2103      	movs	r1, #3
 800a068:	438a      	bics	r2, r1
 800a06a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a070:	2b00      	cmp	r3, #0
 800a072:	d010      	beq.n	800a096 <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a078:	4a17      	ldr	r2, [pc, #92]	; (800a0d8 <HAL_SPI_IRQHandler+0x1f8>)
 800a07a:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a080:	0018      	movs	r0, r3
 800a082:	f7fd fca3 	bl	80079cc <HAL_DMA_Abort_IT>
 800a086:	1e03      	subs	r3, r0, #0
 800a088:	d005      	beq.n	800a096 <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a08e:	2240      	movs	r2, #64	; 0x40
 800a090:	431a      	orrs	r2, r3
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d016      	beq.n	800a0cc <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0a2:	4a0d      	ldr	r2, [pc, #52]	; (800a0d8 <HAL_SPI_IRQHandler+0x1f8>)
 800a0a4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0aa:	0018      	movs	r0, r3
 800a0ac:	f7fd fc8e 	bl	80079cc <HAL_DMA_Abort_IT>
 800a0b0:	1e03      	subs	r3, r0, #0
 800a0b2:	d00b      	beq.n	800a0cc <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0b8:	2240      	movs	r2, #64	; 0x40
 800a0ba:	431a      	orrs	r2, r3
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800a0c0:	e004      	b.n	800a0cc <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	0018      	movs	r0, r3
 800a0c6:	f000 f809 	bl	800a0dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a0ca:	e000      	b.n	800a0ce <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 800a0cc:	46c0      	nop			; (mov r8, r8)
    return;
 800a0ce:	46c0      	nop			; (mov r8, r8)
 800a0d0:	46c0      	nop			; (mov r8, r8)
  }
}
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	b008      	add	sp, #32
 800a0d6:	bd80      	pop	{r7, pc}
 800a0d8:	0800a105 	.word	0x0800a105

0800a0dc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b082      	sub	sp, #8
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800a0e4:	46c0      	nop			; (mov r8, r8)
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	b002      	add	sp, #8
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b082      	sub	sp, #8
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2251      	movs	r2, #81	; 0x51
 800a0f8:	5c9b      	ldrb	r3, [r3, r2]
 800a0fa:	b2db      	uxtb	r3, r3
}
 800a0fc:	0018      	movs	r0, r3
 800a0fe:	46bd      	mov	sp, r7
 800a100:	b002      	add	sp, #8
 800a102:	bd80      	pop	{r7, pc}

0800a104 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b084      	sub	sp, #16
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a110:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2200      	movs	r2, #0
 800a116:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2200      	movs	r2, #0
 800a11c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	0018      	movs	r0, r3
 800a122:	f7ff ffdb 	bl	800a0dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a126:	46c0      	nop			; (mov r8, r8)
 800a128:	46bd      	mov	sp, r7
 800a12a:	b004      	add	sp, #16
 800a12c:	bd80      	pop	{r7, pc}

0800a12e <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a12e:	b580      	push	{r7, lr}
 800a130:	b082      	sub	sp, #8
 800a132:	af00      	add	r7, sp, #0
 800a134:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	330c      	adds	r3, #12
 800a140:	7812      	ldrb	r2, [r2, #0]
 800a142:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a148:	1c5a      	adds	r2, r3, #1
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a152:	b29b      	uxth	r3, r3
 800a154:	3b01      	subs	r3, #1
 800a156:	b29a      	uxth	r2, r3
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a160:	b29b      	uxth	r3, r3
 800a162:	2b00      	cmp	r3, #0
 800a164:	d103      	bne.n	800a16e <SPI_TxISR_8BIT+0x40>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	0018      	movs	r0, r3
 800a16a:	f000 f8d5 	bl	800a318 <SPI_CloseTx_ISR>
  }
}
 800a16e:	46c0      	nop			; (mov r8, r8)
 800a170:	46bd      	mov	sp, r7
 800a172:	b002      	add	sp, #8
 800a174:	bd80      	pop	{r7, pc}

0800a176 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800a176:	b580      	push	{r7, lr}
 800a178:	b082      	sub	sp, #8
 800a17a:	af00      	add	r7, sp, #0
 800a17c:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a182:	881a      	ldrh	r2, [r3, #0]
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a18e:	1c9a      	adds	r2, r3, #2
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a198:	b29b      	uxth	r3, r3
 800a19a:	3b01      	subs	r3, #1
 800a19c:	b29a      	uxth	r2, r3
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a1a6:	b29b      	uxth	r3, r3
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d103      	bne.n	800a1b4 <SPI_TxISR_16BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	0018      	movs	r0, r3
 800a1b0:	f000 f8b2 	bl	800a318 <SPI_CloseTx_ISR>
  }
}
 800a1b4:	46c0      	nop			; (mov r8, r8)
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	b002      	add	sp, #8
 800a1ba:	bd80      	pop	{r7, pc}

0800a1bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b084      	sub	sp, #16
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	60f8      	str	r0, [r7, #12]
 800a1c4:	60b9      	str	r1, [r7, #8]
 800a1c6:	603b      	str	r3, [r7, #0]
 800a1c8:	1dfb      	adds	r3, r7, #7
 800a1ca:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a1cc:	e050      	b.n	800a270 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	3301      	adds	r3, #1
 800a1d2:	d04d      	beq.n	800a270 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800a1d4:	f7fc fd66 	bl	8006ca4 <HAL_GetTick>
 800a1d8:	0002      	movs	r2, r0
 800a1da:	69bb      	ldr	r3, [r7, #24]
 800a1dc:	1ad3      	subs	r3, r2, r3
 800a1de:	683a      	ldr	r2, [r7, #0]
 800a1e0:	429a      	cmp	r2, r3
 800a1e2:	d902      	bls.n	800a1ea <SPI_WaitFlagStateUntilTimeout+0x2e>
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d142      	bne.n	800a270 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	685a      	ldr	r2, [r3, #4]
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	21e0      	movs	r1, #224	; 0xe0
 800a1f6:	438a      	bics	r2, r1
 800a1f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	685a      	ldr	r2, [r3, #4]
 800a1fe:	2382      	movs	r3, #130	; 0x82
 800a200:	005b      	lsls	r3, r3, #1
 800a202:	429a      	cmp	r2, r3
 800a204:	d113      	bne.n	800a22e <SPI_WaitFlagStateUntilTimeout+0x72>
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	689a      	ldr	r2, [r3, #8]
 800a20a:	2380      	movs	r3, #128	; 0x80
 800a20c:	021b      	lsls	r3, r3, #8
 800a20e:	429a      	cmp	r2, r3
 800a210:	d005      	beq.n	800a21e <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	689a      	ldr	r2, [r3, #8]
 800a216:	2380      	movs	r3, #128	; 0x80
 800a218:	00db      	lsls	r3, r3, #3
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d107      	bne.n	800a22e <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	681a      	ldr	r2, [r3, #0]
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	2140      	movs	r1, #64	; 0x40
 800a22a:	438a      	bics	r2, r1
 800a22c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a232:	2380      	movs	r3, #128	; 0x80
 800a234:	019b      	lsls	r3, r3, #6
 800a236:	429a      	cmp	r2, r3
 800a238:	d110      	bne.n	800a25c <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	681a      	ldr	r2, [r3, #0]
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4914      	ldr	r1, [pc, #80]	; (800a298 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 800a246:	400a      	ands	r2, r1
 800a248:	601a      	str	r2, [r3, #0]
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	681a      	ldr	r2, [r3, #0]
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	2180      	movs	r1, #128	; 0x80
 800a256:	0189      	lsls	r1, r1, #6
 800a258:	430a      	orrs	r2, r1
 800a25a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	2251      	movs	r2, #81	; 0x51
 800a260:	2101      	movs	r1, #1
 800a262:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	2250      	movs	r2, #80	; 0x50
 800a268:	2100      	movs	r1, #0
 800a26a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a26c:	2303      	movs	r3, #3
 800a26e:	e00f      	b.n	800a290 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	689b      	ldr	r3, [r3, #8]
 800a276:	68ba      	ldr	r2, [r7, #8]
 800a278:	4013      	ands	r3, r2
 800a27a:	68ba      	ldr	r2, [r7, #8]
 800a27c:	1ad3      	subs	r3, r2, r3
 800a27e:	425a      	negs	r2, r3
 800a280:	4153      	adcs	r3, r2
 800a282:	b2db      	uxtb	r3, r3
 800a284:	001a      	movs	r2, r3
 800a286:	1dfb      	adds	r3, r7, #7
 800a288:	781b      	ldrb	r3, [r3, #0]
 800a28a:	429a      	cmp	r2, r3
 800a28c:	d19f      	bne.n	800a1ce <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800a28e:	2300      	movs	r3, #0
}
 800a290:	0018      	movs	r0, r3
 800a292:	46bd      	mov	sp, r7
 800a294:	b004      	add	sp, #16
 800a296:	bd80      	pop	{r7, pc}
 800a298:	ffffdfff 	.word	0xffffdfff

0800a29c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b086      	sub	sp, #24
 800a2a0:	af02      	add	r7, sp, #8
 800a2a2:	60f8      	str	r0, [r7, #12]
 800a2a4:	60b9      	str	r1, [r7, #8]
 800a2a6:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	685a      	ldr	r2, [r3, #4]
 800a2ac:	2382      	movs	r3, #130	; 0x82
 800a2ae:	005b      	lsls	r3, r3, #1
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	d112      	bne.n	800a2da <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a2b4:	68ba      	ldr	r2, [r7, #8]
 800a2b6:	68f8      	ldr	r0, [r7, #12]
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	9300      	str	r3, [sp, #0]
 800a2bc:	0013      	movs	r3, r2
 800a2be:	2200      	movs	r2, #0
 800a2c0:	2180      	movs	r1, #128	; 0x80
 800a2c2:	f7ff ff7b 	bl	800a1bc <SPI_WaitFlagStateUntilTimeout>
 800a2c6:	1e03      	subs	r3, r0, #0
 800a2c8:	d020      	beq.n	800a30c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2ce:	2220      	movs	r2, #32
 800a2d0:	431a      	orrs	r2, r3
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a2d6:	2303      	movs	r3, #3
 800a2d8:	e019      	b.n	800a30e <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	2251      	movs	r2, #81	; 0x51
 800a2de:	5c9b      	ldrb	r3, [r3, r2]
 800a2e0:	b2db      	uxtb	r3, r3
 800a2e2:	2b05      	cmp	r3, #5
 800a2e4:	d112      	bne.n	800a30c <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a2e6:	68ba      	ldr	r2, [r7, #8]
 800a2e8:	68f8      	ldr	r0, [r7, #12]
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	9300      	str	r3, [sp, #0]
 800a2ee:	0013      	movs	r3, r2
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	2101      	movs	r1, #1
 800a2f4:	f7ff ff62 	bl	800a1bc <SPI_WaitFlagStateUntilTimeout>
 800a2f8:	1e03      	subs	r3, r0, #0
 800a2fa:	d007      	beq.n	800a30c <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a300:	2220      	movs	r2, #32
 800a302:	431a      	orrs	r2, r3
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a308:	2303      	movs	r3, #3
 800a30a:	e000      	b.n	800a30e <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 800a30c:	2300      	movs	r3, #0
}
 800a30e:	0018      	movs	r0, r3
 800a310:	46bd      	mov	sp, r7
 800a312:	b004      	add	sp, #16
 800a314:	bd80      	pop	{r7, pc}
	...

0800a318 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b086      	sub	sp, #24
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800a320:	4b2d      	ldr	r3, [pc, #180]	; (800a3d8 <SPI_CloseTx_ISR+0xc0>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	492d      	ldr	r1, [pc, #180]	; (800a3dc <SPI_CloseTx_ISR+0xc4>)
 800a326:	0018      	movs	r0, r3
 800a328:	f7f5 fef6 	bl	8000118 <__udivsi3>
 800a32c:	0003      	movs	r3, r0
 800a32e:	001a      	movs	r2, r3
 800a330:	2364      	movs	r3, #100	; 0x64
 800a332:	4353      	muls	r3, r2
 800a334:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a336:	f7fc fcb5 	bl	8006ca4 <HAL_GetTick>
 800a33a:	0003      	movs	r3, r0
 800a33c:	617b      	str	r3, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d106      	bne.n	800a352 <SPI_CloseTx_ISR+0x3a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a348:	2220      	movs	r2, #32
 800a34a:	431a      	orrs	r2, r3
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a350:	e008      	b.n	800a364 <SPI_CloseTx_ISR+0x4c>
    }
    count--;
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	3b01      	subs	r3, #1
 800a356:	613b      	str	r3, [r7, #16]
  }
  while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	689b      	ldr	r3, [r3, #8]
 800a35e:	2202      	movs	r2, #2
 800a360:	4013      	ands	r3, r2
 800a362:	d0ec      	beq.n	800a33e <SPI_CloseTx_ISR+0x26>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	685a      	ldr	r2, [r3, #4]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	21a0      	movs	r1, #160	; 0xa0
 800a370:	438a      	bics	r2, r1
 800a372:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a374:	697a      	ldr	r2, [r7, #20]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2164      	movs	r1, #100	; 0x64
 800a37a:	0018      	movs	r0, r3
 800a37c:	f7ff ff8e 	bl	800a29c <SPI_EndRxTxTransaction>
 800a380:	1e03      	subs	r3, r0, #0
 800a382:	d005      	beq.n	800a390 <SPI_CloseTx_ISR+0x78>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a388:	2220      	movs	r2, #32
 800a38a:	431a      	orrs	r2, r3
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	689b      	ldr	r3, [r3, #8]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d10a      	bne.n	800a3ae <SPI_CloseTx_ISR+0x96>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a398:	2300      	movs	r3, #0
 800a39a:	60fb      	str	r3, [r7, #12]
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	68db      	ldr	r3, [r3, #12]
 800a3a2:	60fb      	str	r3, [r7, #12]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	689b      	ldr	r3, [r3, #8]
 800a3aa:	60fb      	str	r3, [r7, #12]
 800a3ac:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2251      	movs	r2, #81	; 0x51
 800a3b2:	2101      	movs	r1, #1
 800a3b4:	5499      	strb	r1, [r3, r2]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d004      	beq.n	800a3c8 <SPI_CloseTx_ISR+0xb0>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	0018      	movs	r0, r3
 800a3c2:	f7ff fe8b 	bl	800a0dc <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800a3c6:	e003      	b.n	800a3d0 <SPI_CloseTx_ISR+0xb8>
    HAL_SPI_TxCpltCallback(hspi);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	0018      	movs	r0, r3
 800a3cc:	f7f7 fc6b 	bl	8001ca6 <HAL_SPI_TxCpltCallback>
}
 800a3d0:	46c0      	nop			; (mov r8, r8)
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	b006      	add	sp, #24
 800a3d6:	bd80      	pop	{r7, pc}
 800a3d8:	20000010 	.word	0x20000010
 800a3dc:	00005dc0 	.word	0x00005dc0

0800a3e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b082      	sub	sp, #8
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d101      	bne.n	800a3f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	e01e      	b.n	800a430 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2239      	movs	r2, #57	; 0x39
 800a3f6:	5c9b      	ldrb	r3, [r3, r2]
 800a3f8:	b2db      	uxtb	r3, r3
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d107      	bne.n	800a40e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2238      	movs	r2, #56	; 0x38
 800a402:	2100      	movs	r1, #0
 800a404:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	0018      	movs	r0, r3
 800a40a:	f7fa f971 	bl	80046f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2239      	movs	r2, #57	; 0x39
 800a412:	2102      	movs	r1, #2
 800a414:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681a      	ldr	r2, [r3, #0]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	3304      	adds	r3, #4
 800a41e:	0019      	movs	r1, r3
 800a420:	0010      	movs	r0, r2
 800a422:	f000 fc91 	bl	800ad48 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2239      	movs	r2, #57	; 0x39
 800a42a:	2101      	movs	r1, #1
 800a42c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a42e:	2300      	movs	r3, #0
}
 800a430:	0018      	movs	r0, r3
 800a432:	46bd      	mov	sp, r7
 800a434:	b002      	add	sp, #8
 800a436:	bd80      	pop	{r7, pc}

0800a438 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b084      	sub	sp, #16
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2239      	movs	r2, #57	; 0x39
 800a444:	2102      	movs	r1, #2
 800a446:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	689b      	ldr	r3, [r3, #8]
 800a44e:	2207      	movs	r2, #7
 800a450:	4013      	ands	r3, r2
 800a452:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	2b06      	cmp	r3, #6
 800a458:	d007      	beq.n	800a46a <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	681a      	ldr	r2, [r3, #0]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	2101      	movs	r1, #1
 800a466:	430a      	orrs	r2, r1
 800a468:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2239      	movs	r2, #57	; 0x39
 800a46e:	2101      	movs	r1, #1
 800a470:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800a472:	2300      	movs	r3, #0
}
 800a474:	0018      	movs	r0, r3
 800a476:	46bd      	mov	sp, r7
 800a478:	b004      	add	sp, #16
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b084      	sub	sp, #16
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	68da      	ldr	r2, [r3, #12]
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	2101      	movs	r1, #1
 800a490:	430a      	orrs	r2, r1
 800a492:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	689b      	ldr	r3, [r3, #8]
 800a49a:	2207      	movs	r2, #7
 800a49c:	4013      	ands	r3, r2
 800a49e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	2b06      	cmp	r3, #6
 800a4a4:	d007      	beq.n	800a4b6 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	681a      	ldr	r2, [r3, #0]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	2101      	movs	r1, #1
 800a4b2:	430a      	orrs	r2, r1
 800a4b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a4b6:	2300      	movs	r3, #0
}
 800a4b8:	0018      	movs	r0, r3
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	b004      	add	sp, #16
 800a4be:	bd80      	pop	{r7, pc}

0800a4c0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b082      	sub	sp, #8
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	68da      	ldr	r2, [r3, #12]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	2101      	movs	r1, #1
 800a4d4:	438a      	bics	r2, r1
 800a4d6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	6a1b      	ldr	r3, [r3, #32]
 800a4de:	4a08      	ldr	r2, [pc, #32]	; (800a500 <HAL_TIM_Base_Stop_IT+0x40>)
 800a4e0:	4013      	ands	r3, r2
 800a4e2:	d107      	bne.n	800a4f4 <HAL_TIM_Base_Stop_IT+0x34>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	681a      	ldr	r2, [r3, #0]
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	2101      	movs	r1, #1
 800a4f0:	438a      	bics	r2, r1
 800a4f2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a4f4:	2300      	movs	r3, #0
}
 800a4f6:	0018      	movs	r0, r3
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	b002      	add	sp, #8
 800a4fc:	bd80      	pop	{r7, pc}
 800a4fe:	46c0      	nop			; (mov r8, r8)
 800a500:	00001111 	.word	0x00001111

0800a504 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b082      	sub	sp, #8
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d101      	bne.n	800a516 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800a512:	2301      	movs	r3, #1
 800a514:	e01e      	b.n	800a554 <HAL_TIM_OC_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2239      	movs	r2, #57	; 0x39
 800a51a:	5c9b      	ldrb	r3, [r3, r2]
 800a51c:	b2db      	uxtb	r3, r3
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d107      	bne.n	800a532 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2238      	movs	r2, #56	; 0x38
 800a526:	2100      	movs	r1, #0
 800a528:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	0018      	movs	r0, r3
 800a52e:	f000 f815 	bl	800a55c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2239      	movs	r2, #57	; 0x39
 800a536:	2102      	movs	r1, #2
 800a538:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681a      	ldr	r2, [r3, #0]
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	3304      	adds	r3, #4
 800a542:	0019      	movs	r1, r3
 800a544:	0010      	movs	r0, r2
 800a546:	f000 fbff 	bl	800ad48 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2239      	movs	r2, #57	; 0x39
 800a54e:	2101      	movs	r1, #1
 800a550:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a552:	2300      	movs	r3, #0
}
 800a554:	0018      	movs	r0, r3
 800a556:	46bd      	mov	sp, r7
 800a558:	b002      	add	sp, #8
 800a55a:	bd80      	pop	{r7, pc}

0800a55c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b082      	sub	sp, #8
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800a564:	46c0      	nop			; (mov r8, r8)
 800a566:	46bd      	mov	sp, r7
 800a568:	b002      	add	sp, #8
 800a56a:	bd80      	pop	{r7, pc}

0800a56c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b084      	sub	sp, #16
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
 800a574:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	2b04      	cmp	r3, #4
 800a57a:	d011      	beq.n	800a5a0 <HAL_TIM_OC_Start_IT+0x34>
 800a57c:	d802      	bhi.n	800a584 <HAL_TIM_OC_Start_IT+0x18>
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d005      	beq.n	800a58e <HAL_TIM_OC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
      break;
    }

    default:
      break;
 800a582:	e028      	b.n	800a5d6 <HAL_TIM_OC_Start_IT+0x6a>
  switch (Channel)
 800a584:	2b08      	cmp	r3, #8
 800a586:	d014      	beq.n	800a5b2 <HAL_TIM_OC_Start_IT+0x46>
 800a588:	2b0c      	cmp	r3, #12
 800a58a:	d01b      	beq.n	800a5c4 <HAL_TIM_OC_Start_IT+0x58>
      break;
 800a58c:	e023      	b.n	800a5d6 <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	68da      	ldr	r2, [r3, #12]
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	2102      	movs	r1, #2
 800a59a:	430a      	orrs	r2, r1
 800a59c:	60da      	str	r2, [r3, #12]
      break;
 800a59e:	e01a      	b.n	800a5d6 <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	68da      	ldr	r2, [r3, #12]
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	2104      	movs	r1, #4
 800a5ac:	430a      	orrs	r2, r1
 800a5ae:	60da      	str	r2, [r3, #12]
      break;
 800a5b0:	e011      	b.n	800a5d6 <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	68da      	ldr	r2, [r3, #12]
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	2108      	movs	r1, #8
 800a5be:	430a      	orrs	r2, r1
 800a5c0:	60da      	str	r2, [r3, #12]
      break;
 800a5c2:	e008      	b.n	800a5d6 <HAL_TIM_OC_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	68da      	ldr	r2, [r3, #12]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	2110      	movs	r1, #16
 800a5d0:	430a      	orrs	r2, r1
 800a5d2:	60da      	str	r2, [r3, #12]
      break;
 800a5d4:	46c0      	nop			; (mov r8, r8)
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	6839      	ldr	r1, [r7, #0]
 800a5dc:	2201      	movs	r2, #1
 800a5de:	0018      	movs	r0, r3
 800a5e0:	f000 fdae 	bl	800b140 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	689b      	ldr	r3, [r3, #8]
 800a5ea:	2207      	movs	r2, #7
 800a5ec:	4013      	ands	r3, r2
 800a5ee:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	2b06      	cmp	r3, #6
 800a5f4:	d007      	beq.n	800a606 <HAL_TIM_OC_Start_IT+0x9a>
  {
    __HAL_TIM_ENABLE(htim);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	681a      	ldr	r2, [r3, #0]
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	2101      	movs	r1, #1
 800a602:	430a      	orrs	r2, r1
 800a604:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a606:	2300      	movs	r3, #0
}
 800a608:	0018      	movs	r0, r3
 800a60a:	46bd      	mov	sp, r7
 800a60c:	b004      	add	sp, #16
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b082      	sub	sp, #8
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
 800a618:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	2b04      	cmp	r3, #4
 800a61e:	d011      	beq.n	800a644 <HAL_TIM_OC_Stop_IT+0x34>
 800a620:	d802      	bhi.n	800a628 <HAL_TIM_OC_Stop_IT+0x18>
 800a622:	2b00      	cmp	r3, #0
 800a624:	d005      	beq.n	800a632 <HAL_TIM_OC_Stop_IT+0x22>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
      break;
    }

    default:
      break;
 800a626:	e028      	b.n	800a67a <HAL_TIM_OC_Stop_IT+0x6a>
  switch (Channel)
 800a628:	2b08      	cmp	r3, #8
 800a62a:	d014      	beq.n	800a656 <HAL_TIM_OC_Stop_IT+0x46>
 800a62c:	2b0c      	cmp	r3, #12
 800a62e:	d01b      	beq.n	800a668 <HAL_TIM_OC_Stop_IT+0x58>
      break;
 800a630:	e023      	b.n	800a67a <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	68da      	ldr	r2, [r3, #12]
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	2102      	movs	r1, #2
 800a63e:	438a      	bics	r2, r1
 800a640:	60da      	str	r2, [r3, #12]
      break;
 800a642:	e01a      	b.n	800a67a <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	68da      	ldr	r2, [r3, #12]
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	2104      	movs	r1, #4
 800a650:	438a      	bics	r2, r1
 800a652:	60da      	str	r2, [r3, #12]
      break;
 800a654:	e011      	b.n	800a67a <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	68da      	ldr	r2, [r3, #12]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	2108      	movs	r1, #8
 800a662:	438a      	bics	r2, r1
 800a664:	60da      	str	r2, [r3, #12]
      break;
 800a666:	e008      	b.n	800a67a <HAL_TIM_OC_Stop_IT+0x6a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	68da      	ldr	r2, [r3, #12]
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	2110      	movs	r1, #16
 800a674:	438a      	bics	r2, r1
 800a676:	60da      	str	r2, [r3, #12]
      break;
 800a678:	46c0      	nop			; (mov r8, r8)
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	6839      	ldr	r1, [r7, #0]
 800a680:	2200      	movs	r2, #0
 800a682:	0018      	movs	r0, r3
 800a684:	f000 fd5c 	bl	800b140 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	6a1b      	ldr	r3, [r3, #32]
 800a68e:	4a08      	ldr	r2, [pc, #32]	; (800a6b0 <HAL_TIM_OC_Stop_IT+0xa0>)
 800a690:	4013      	ands	r3, r2
 800a692:	d107      	bne.n	800a6a4 <HAL_TIM_OC_Stop_IT+0x94>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	681a      	ldr	r2, [r3, #0]
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	2101      	movs	r1, #1
 800a6a0:	438a      	bics	r2, r1
 800a6a2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a6a4:	2300      	movs	r3, #0
}
 800a6a6:	0018      	movs	r0, r3
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	b002      	add	sp, #8
 800a6ac:	bd80      	pop	{r7, pc}
 800a6ae:	46c0      	nop			; (mov r8, r8)
 800a6b0:	00001111 	.word	0x00001111

0800a6b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b082      	sub	sp, #8
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d101      	bne.n	800a6c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	e01e      	b.n	800a704 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2239      	movs	r2, #57	; 0x39
 800a6ca:	5c9b      	ldrb	r3, [r3, r2]
 800a6cc:	b2db      	uxtb	r3, r3
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d107      	bne.n	800a6e2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2238      	movs	r2, #56	; 0x38
 800a6d6:	2100      	movs	r1, #0
 800a6d8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	0018      	movs	r0, r3
 800a6de:	f000 f815 	bl	800a70c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2239      	movs	r2, #57	; 0x39
 800a6e6:	2102      	movs	r1, #2
 800a6e8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681a      	ldr	r2, [r3, #0]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	3304      	adds	r3, #4
 800a6f2:	0019      	movs	r1, r3
 800a6f4:	0010      	movs	r0, r2
 800a6f6:	f000 fb27 	bl	800ad48 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2239      	movs	r2, #57	; 0x39
 800a6fe:	2101      	movs	r1, #1
 800a700:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a702:	2300      	movs	r3, #0
}
 800a704:	0018      	movs	r0, r3
 800a706:	46bd      	mov	sp, r7
 800a708:	b002      	add	sp, #8
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b082      	sub	sp, #8
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a714:	46c0      	nop			; (mov r8, r8)
 800a716:	46bd      	mov	sp, r7
 800a718:	b002      	add	sp, #8
 800a71a:	bd80      	pop	{r7, pc}

0800a71c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b084      	sub	sp, #16
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	2b04      	cmp	r3, #4
 800a72a:	d011      	beq.n	800a750 <HAL_TIM_PWM_Start_IT+0x34>
 800a72c:	d802      	bhi.n	800a734 <HAL_TIM_PWM_Start_IT+0x18>
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d005      	beq.n	800a73e <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
      break;
    }

    default:
      break;
 800a732:	e028      	b.n	800a786 <HAL_TIM_PWM_Start_IT+0x6a>
  switch (Channel)
 800a734:	2b08      	cmp	r3, #8
 800a736:	d014      	beq.n	800a762 <HAL_TIM_PWM_Start_IT+0x46>
 800a738:	2b0c      	cmp	r3, #12
 800a73a:	d01b      	beq.n	800a774 <HAL_TIM_PWM_Start_IT+0x58>
      break;
 800a73c:	e023      	b.n	800a786 <HAL_TIM_PWM_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	68da      	ldr	r2, [r3, #12]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	2102      	movs	r1, #2
 800a74a:	430a      	orrs	r2, r1
 800a74c:	60da      	str	r2, [r3, #12]
      break;
 800a74e:	e01a      	b.n	800a786 <HAL_TIM_PWM_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	68da      	ldr	r2, [r3, #12]
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	2104      	movs	r1, #4
 800a75c:	430a      	orrs	r2, r1
 800a75e:	60da      	str	r2, [r3, #12]
      break;
 800a760:	e011      	b.n	800a786 <HAL_TIM_PWM_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	68da      	ldr	r2, [r3, #12]
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	2108      	movs	r1, #8
 800a76e:	430a      	orrs	r2, r1
 800a770:	60da      	str	r2, [r3, #12]
      break;
 800a772:	e008      	b.n	800a786 <HAL_TIM_PWM_Start_IT+0x6a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	68da      	ldr	r2, [r3, #12]
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	2110      	movs	r1, #16
 800a780:	430a      	orrs	r2, r1
 800a782:	60da      	str	r2, [r3, #12]
      break;
 800a784:	46c0      	nop			; (mov r8, r8)
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	6839      	ldr	r1, [r7, #0]
 800a78c:	2201      	movs	r2, #1
 800a78e:	0018      	movs	r0, r3
 800a790:	f000 fcd6 	bl	800b140 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	689b      	ldr	r3, [r3, #8]
 800a79a:	2207      	movs	r2, #7
 800a79c:	4013      	ands	r3, r2
 800a79e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	2b06      	cmp	r3, #6
 800a7a4:	d007      	beq.n	800a7b6 <HAL_TIM_PWM_Start_IT+0x9a>
  {
    __HAL_TIM_ENABLE(htim);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	681a      	ldr	r2, [r3, #0]
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	2101      	movs	r1, #1
 800a7b2:	430a      	orrs	r2, r1
 800a7b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a7b6:	2300      	movs	r3, #0
}
 800a7b8:	0018      	movs	r0, r3
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	b004      	add	sp, #16
 800a7be:	bd80      	pop	{r7, pc}

0800a7c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b082      	sub	sp, #8
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	691b      	ldr	r3, [r3, #16]
 800a7ce:	2202      	movs	r2, #2
 800a7d0:	4013      	ands	r3, r2
 800a7d2:	2b02      	cmp	r3, #2
 800a7d4:	d124      	bne.n	800a820 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	68db      	ldr	r3, [r3, #12]
 800a7dc:	2202      	movs	r2, #2
 800a7de:	4013      	ands	r3, r2
 800a7e0:	2b02      	cmp	r3, #2
 800a7e2:	d11d      	bne.n	800a820 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	2203      	movs	r2, #3
 800a7ea:	4252      	negs	r2, r2
 800a7ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2201      	movs	r2, #1
 800a7f2:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	699b      	ldr	r3, [r3, #24]
 800a7fa:	2203      	movs	r2, #3
 800a7fc:	4013      	ands	r3, r2
 800a7fe:	d004      	beq.n	800a80a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	0018      	movs	r0, r3
 800a804:	f000 fa88 	bl	800ad18 <HAL_TIM_IC_CaptureCallback>
 800a808:	e007      	b.n	800a81a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	0018      	movs	r0, r3
 800a80e:	f7fa f97b 	bl	8004b08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	0018      	movs	r0, r3
 800a816:	f000 fa87 	bl	800ad28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2200      	movs	r2, #0
 800a81e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	691b      	ldr	r3, [r3, #16]
 800a826:	2204      	movs	r2, #4
 800a828:	4013      	ands	r3, r2
 800a82a:	2b04      	cmp	r3, #4
 800a82c:	d125      	bne.n	800a87a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	68db      	ldr	r3, [r3, #12]
 800a834:	2204      	movs	r2, #4
 800a836:	4013      	ands	r3, r2
 800a838:	2b04      	cmp	r3, #4
 800a83a:	d11e      	bne.n	800a87a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	2205      	movs	r2, #5
 800a842:	4252      	negs	r2, r2
 800a844:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2202      	movs	r2, #2
 800a84a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	699a      	ldr	r2, [r3, #24]
 800a852:	23c0      	movs	r3, #192	; 0xc0
 800a854:	009b      	lsls	r3, r3, #2
 800a856:	4013      	ands	r3, r2
 800a858:	d004      	beq.n	800a864 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	0018      	movs	r0, r3
 800a85e:	f000 fa5b 	bl	800ad18 <HAL_TIM_IC_CaptureCallback>
 800a862:	e007      	b.n	800a874 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	0018      	movs	r0, r3
 800a868:	f7fa f94e 	bl	8004b08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	0018      	movs	r0, r3
 800a870:	f000 fa5a 	bl	800ad28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2200      	movs	r2, #0
 800a878:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	691b      	ldr	r3, [r3, #16]
 800a880:	2208      	movs	r2, #8
 800a882:	4013      	ands	r3, r2
 800a884:	2b08      	cmp	r3, #8
 800a886:	d124      	bne.n	800a8d2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	68db      	ldr	r3, [r3, #12]
 800a88e:	2208      	movs	r2, #8
 800a890:	4013      	ands	r3, r2
 800a892:	2b08      	cmp	r3, #8
 800a894:	d11d      	bne.n	800a8d2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	2209      	movs	r2, #9
 800a89c:	4252      	negs	r2, r2
 800a89e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2204      	movs	r2, #4
 800a8a4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	69db      	ldr	r3, [r3, #28]
 800a8ac:	2203      	movs	r2, #3
 800a8ae:	4013      	ands	r3, r2
 800a8b0:	d004      	beq.n	800a8bc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	0018      	movs	r0, r3
 800a8b6:	f000 fa2f 	bl	800ad18 <HAL_TIM_IC_CaptureCallback>
 800a8ba:	e007      	b.n	800a8cc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	0018      	movs	r0, r3
 800a8c0:	f7fa f922 	bl	8004b08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	0018      	movs	r0, r3
 800a8c8:	f000 fa2e 	bl	800ad28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	691b      	ldr	r3, [r3, #16]
 800a8d8:	2210      	movs	r2, #16
 800a8da:	4013      	ands	r3, r2
 800a8dc:	2b10      	cmp	r3, #16
 800a8de:	d125      	bne.n	800a92c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	68db      	ldr	r3, [r3, #12]
 800a8e6:	2210      	movs	r2, #16
 800a8e8:	4013      	ands	r3, r2
 800a8ea:	2b10      	cmp	r3, #16
 800a8ec:	d11e      	bne.n	800a92c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	2211      	movs	r2, #17
 800a8f4:	4252      	negs	r2, r2
 800a8f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2208      	movs	r2, #8
 800a8fc:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	69da      	ldr	r2, [r3, #28]
 800a904:	23c0      	movs	r3, #192	; 0xc0
 800a906:	009b      	lsls	r3, r3, #2
 800a908:	4013      	ands	r3, r2
 800a90a:	d004      	beq.n	800a916 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	0018      	movs	r0, r3
 800a910:	f000 fa02 	bl	800ad18 <HAL_TIM_IC_CaptureCallback>
 800a914:	e007      	b.n	800a926 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	0018      	movs	r0, r3
 800a91a:	f7fa f8f5 	bl	8004b08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	0018      	movs	r0, r3
 800a922:	f000 fa01 	bl	800ad28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2200      	movs	r2, #0
 800a92a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	691b      	ldr	r3, [r3, #16]
 800a932:	2201      	movs	r2, #1
 800a934:	4013      	ands	r3, r2
 800a936:	2b01      	cmp	r3, #1
 800a938:	d10f      	bne.n	800a95a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	68db      	ldr	r3, [r3, #12]
 800a940:	2201      	movs	r2, #1
 800a942:	4013      	ands	r3, r2
 800a944:	2b01      	cmp	r3, #1
 800a946:	d108      	bne.n	800a95a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	2202      	movs	r2, #2
 800a94e:	4252      	negs	r2, r2
 800a950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	0018      	movs	r0, r3
 800a956:	f7fa f89b 	bl	8004a90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	691b      	ldr	r3, [r3, #16]
 800a960:	2240      	movs	r2, #64	; 0x40
 800a962:	4013      	ands	r3, r2
 800a964:	2b40      	cmp	r3, #64	; 0x40
 800a966:	d10f      	bne.n	800a988 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	68db      	ldr	r3, [r3, #12]
 800a96e:	2240      	movs	r2, #64	; 0x40
 800a970:	4013      	ands	r3, r2
 800a972:	2b40      	cmp	r3, #64	; 0x40
 800a974:	d108      	bne.n	800a988 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	2241      	movs	r2, #65	; 0x41
 800a97c:	4252      	negs	r2, r2
 800a97e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	0018      	movs	r0, r3
 800a984:	f000 f9d8 	bl	800ad38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a988:	46c0      	nop			; (mov r8, r8)
 800a98a:	46bd      	mov	sp, r7
 800a98c:	b002      	add	sp, #8
 800a98e:	bd80      	pop	{r7, pc}

0800a990 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b084      	sub	sp, #16
 800a994:	af00      	add	r7, sp, #0
 800a996:	60f8      	str	r0, [r7, #12]
 800a998:	60b9      	str	r1, [r7, #8]
 800a99a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	2238      	movs	r2, #56	; 0x38
 800a9a0:	5c9b      	ldrb	r3, [r3, r2]
 800a9a2:	2b01      	cmp	r3, #1
 800a9a4:	d101      	bne.n	800a9aa <HAL_TIM_OC_ConfigChannel+0x1a>
 800a9a6:	2302      	movs	r3, #2
 800a9a8:	e03c      	b.n	800aa24 <HAL_TIM_OC_ConfigChannel+0x94>
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2238      	movs	r2, #56	; 0x38
 800a9ae:	2101      	movs	r1, #1
 800a9b0:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	2239      	movs	r2, #57	; 0x39
 800a9b6:	2102      	movs	r1, #2
 800a9b8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2b04      	cmp	r3, #4
 800a9be:	d010      	beq.n	800a9e2 <HAL_TIM_OC_ConfigChannel+0x52>
 800a9c0:	d802      	bhi.n	800a9c8 <HAL_TIM_OC_ConfigChannel+0x38>
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d005      	beq.n	800a9d2 <HAL_TIM_OC_ConfigChannel+0x42>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      break;
    }

    default:
      break;
 800a9c6:	e024      	b.n	800aa12 <HAL_TIM_OC_ConfigChannel+0x82>
  switch (Channel)
 800a9c8:	2b08      	cmp	r3, #8
 800a9ca:	d012      	beq.n	800a9f2 <HAL_TIM_OC_ConfigChannel+0x62>
 800a9cc:	2b0c      	cmp	r3, #12
 800a9ce:	d018      	beq.n	800aa02 <HAL_TIM_OC_ConfigChannel+0x72>
      break;
 800a9d0:	e01f      	b.n	800aa12 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	68ba      	ldr	r2, [r7, #8]
 800a9d8:	0011      	movs	r1, r2
 800a9da:	0018      	movs	r0, r3
 800a9dc:	f000 fa12 	bl	800ae04 <TIM_OC1_SetConfig>
      break;
 800a9e0:	e017      	b.n	800aa12 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	68ba      	ldr	r2, [r7, #8]
 800a9e8:	0011      	movs	r1, r2
 800a9ea:	0018      	movs	r0, r3
 800a9ec:	f000 fa46 	bl	800ae7c <TIM_OC2_SetConfig>
      break;
 800a9f0:	e00f      	b.n	800aa12 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	68ba      	ldr	r2, [r7, #8]
 800a9f8:	0011      	movs	r1, r2
 800a9fa:	0018      	movs	r0, r3
 800a9fc:	f000 fa80 	bl	800af00 <TIM_OC3_SetConfig>
      break;
 800aa00:	e007      	b.n	800aa12 <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	68ba      	ldr	r2, [r7, #8]
 800aa08:	0011      	movs	r1, r2
 800aa0a:	0018      	movs	r0, r3
 800aa0c:	f000 fab8 	bl	800af80 <TIM_OC4_SetConfig>
      break;
 800aa10:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	2239      	movs	r2, #57	; 0x39
 800aa16:	2101      	movs	r1, #1
 800aa18:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	2238      	movs	r2, #56	; 0x38
 800aa1e:	2100      	movs	r1, #0
 800aa20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800aa22:	2300      	movs	r3, #0
}
 800aa24:	0018      	movs	r0, r3
 800aa26:	46bd      	mov	sp, r7
 800aa28:	b004      	add	sp, #16
 800aa2a:	bd80      	pop	{r7, pc}

0800aa2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b084      	sub	sp, #16
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	60f8      	str	r0, [r7, #12]
 800aa34:	60b9      	str	r1, [r7, #8]
 800aa36:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	2238      	movs	r2, #56	; 0x38
 800aa3c:	5c9b      	ldrb	r3, [r3, r2]
 800aa3e:	2b01      	cmp	r3, #1
 800aa40:	d101      	bne.n	800aa46 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800aa42:	2302      	movs	r3, #2
 800aa44:	e0a4      	b.n	800ab90 <HAL_TIM_PWM_ConfigChannel+0x164>
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	2238      	movs	r2, #56	; 0x38
 800aa4a:	2101      	movs	r1, #1
 800aa4c:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	2239      	movs	r2, #57	; 0x39
 800aa52:	2102      	movs	r1, #2
 800aa54:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2b04      	cmp	r3, #4
 800aa5a:	d029      	beq.n	800aab0 <HAL_TIM_PWM_ConfigChannel+0x84>
 800aa5c:	d802      	bhi.n	800aa64 <HAL_TIM_PWM_ConfigChannel+0x38>
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d005      	beq.n	800aa6e <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 800aa62:	e08c      	b.n	800ab7e <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 800aa64:	2b08      	cmp	r3, #8
 800aa66:	d046      	beq.n	800aaf6 <HAL_TIM_PWM_ConfigChannel+0xca>
 800aa68:	2b0c      	cmp	r3, #12
 800aa6a:	d065      	beq.n	800ab38 <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 800aa6c:	e087      	b.n	800ab7e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	68ba      	ldr	r2, [r7, #8]
 800aa74:	0011      	movs	r1, r2
 800aa76:	0018      	movs	r0, r3
 800aa78:	f000 f9c4 	bl	800ae04 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	699a      	ldr	r2, [r3, #24]
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	2108      	movs	r1, #8
 800aa88:	430a      	orrs	r2, r1
 800aa8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	699a      	ldr	r2, [r3, #24]
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	2104      	movs	r1, #4
 800aa98:	438a      	bics	r2, r1
 800aa9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	6999      	ldr	r1, [r3, #24]
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	68da      	ldr	r2, [r3, #12]
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	430a      	orrs	r2, r1
 800aaac:	619a      	str	r2, [r3, #24]
      break;
 800aaae:	e066      	b.n	800ab7e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	68ba      	ldr	r2, [r7, #8]
 800aab6:	0011      	movs	r1, r2
 800aab8:	0018      	movs	r0, r3
 800aaba:	f000 f9df 	bl	800ae7c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	699a      	ldr	r2, [r3, #24]
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	2180      	movs	r1, #128	; 0x80
 800aaca:	0109      	lsls	r1, r1, #4
 800aacc:	430a      	orrs	r2, r1
 800aace:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	699a      	ldr	r2, [r3, #24]
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	492f      	ldr	r1, [pc, #188]	; (800ab98 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 800aadc:	400a      	ands	r2, r1
 800aade:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	6999      	ldr	r1, [r3, #24]
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	68db      	ldr	r3, [r3, #12]
 800aaea:	021a      	lsls	r2, r3, #8
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	430a      	orrs	r2, r1
 800aaf2:	619a      	str	r2, [r3, #24]
      break;
 800aaf4:	e043      	b.n	800ab7e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	68ba      	ldr	r2, [r7, #8]
 800aafc:	0011      	movs	r1, r2
 800aafe:	0018      	movs	r0, r3
 800ab00:	f000 f9fe 	bl	800af00 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	69da      	ldr	r2, [r3, #28]
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	2108      	movs	r1, #8
 800ab10:	430a      	orrs	r2, r1
 800ab12:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	69da      	ldr	r2, [r3, #28]
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	2104      	movs	r1, #4
 800ab20:	438a      	bics	r2, r1
 800ab22:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	69d9      	ldr	r1, [r3, #28]
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	68da      	ldr	r2, [r3, #12]
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	430a      	orrs	r2, r1
 800ab34:	61da      	str	r2, [r3, #28]
      break;
 800ab36:	e022      	b.n	800ab7e <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	68ba      	ldr	r2, [r7, #8]
 800ab3e:	0011      	movs	r1, r2
 800ab40:	0018      	movs	r0, r3
 800ab42:	f000 fa1d 	bl	800af80 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	69da      	ldr	r2, [r3, #28]
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	2180      	movs	r1, #128	; 0x80
 800ab52:	0109      	lsls	r1, r1, #4
 800ab54:	430a      	orrs	r2, r1
 800ab56:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	69da      	ldr	r2, [r3, #28]
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	490d      	ldr	r1, [pc, #52]	; (800ab98 <HAL_TIM_PWM_ConfigChannel+0x16c>)
 800ab64:	400a      	ands	r2, r1
 800ab66:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	69d9      	ldr	r1, [r3, #28]
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	68db      	ldr	r3, [r3, #12]
 800ab72:	021a      	lsls	r2, r3, #8
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	430a      	orrs	r2, r1
 800ab7a:	61da      	str	r2, [r3, #28]
      break;
 800ab7c:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	2239      	movs	r2, #57	; 0x39
 800ab82:	2101      	movs	r1, #1
 800ab84:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	2238      	movs	r2, #56	; 0x38
 800ab8a:	2100      	movs	r1, #0
 800ab8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ab8e:	2300      	movs	r3, #0
}
 800ab90:	0018      	movs	r0, r3
 800ab92:	46bd      	mov	sp, r7
 800ab94:	b004      	add	sp, #16
 800ab96:	bd80      	pop	{r7, pc}
 800ab98:	fffffbff 	.word	0xfffffbff

0800ab9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b084      	sub	sp, #16
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
 800aba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2238      	movs	r2, #56	; 0x38
 800abaa:	5c9b      	ldrb	r3, [r3, r2]
 800abac:	2b01      	cmp	r3, #1
 800abae:	d101      	bne.n	800abb4 <HAL_TIM_ConfigClockSource+0x18>
 800abb0:	2302      	movs	r3, #2
 800abb2:	e0ab      	b.n	800ad0c <HAL_TIM_ConfigClockSource+0x170>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2238      	movs	r2, #56	; 0x38
 800abb8:	2101      	movs	r1, #1
 800abba:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2239      	movs	r2, #57	; 0x39
 800abc0:	2102      	movs	r1, #2
 800abc2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	689b      	ldr	r3, [r3, #8]
 800abca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	2277      	movs	r2, #119	; 0x77
 800abd0:	4393      	bics	r3, r2
 800abd2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	4a4f      	ldr	r2, [pc, #316]	; (800ad14 <HAL_TIM_ConfigClockSource+0x178>)
 800abd8:	4013      	ands	r3, r2
 800abda:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	68fa      	ldr	r2, [r7, #12]
 800abe2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	2b40      	cmp	r3, #64	; 0x40
 800abea:	d100      	bne.n	800abee <HAL_TIM_ConfigClockSource+0x52>
 800abec:	e06b      	b.n	800acc6 <HAL_TIM_ConfigClockSource+0x12a>
 800abee:	d80e      	bhi.n	800ac0e <HAL_TIM_ConfigClockSource+0x72>
 800abf0:	2b10      	cmp	r3, #16
 800abf2:	d100      	bne.n	800abf6 <HAL_TIM_ConfigClockSource+0x5a>
 800abf4:	e077      	b.n	800ace6 <HAL_TIM_ConfigClockSource+0x14a>
 800abf6:	d803      	bhi.n	800ac00 <HAL_TIM_ConfigClockSource+0x64>
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d100      	bne.n	800abfe <HAL_TIM_ConfigClockSource+0x62>
 800abfc:	e073      	b.n	800ace6 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800abfe:	e07c      	b.n	800acfa <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800ac00:	2b20      	cmp	r3, #32
 800ac02:	d100      	bne.n	800ac06 <HAL_TIM_ConfigClockSource+0x6a>
 800ac04:	e06f      	b.n	800ace6 <HAL_TIM_ConfigClockSource+0x14a>
 800ac06:	2b30      	cmp	r3, #48	; 0x30
 800ac08:	d100      	bne.n	800ac0c <HAL_TIM_ConfigClockSource+0x70>
 800ac0a:	e06c      	b.n	800ace6 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 800ac0c:	e075      	b.n	800acfa <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800ac0e:	2b70      	cmp	r3, #112	; 0x70
 800ac10:	d00e      	beq.n	800ac30 <HAL_TIM_ConfigClockSource+0x94>
 800ac12:	d804      	bhi.n	800ac1e <HAL_TIM_ConfigClockSource+0x82>
 800ac14:	2b50      	cmp	r3, #80	; 0x50
 800ac16:	d036      	beq.n	800ac86 <HAL_TIM_ConfigClockSource+0xea>
 800ac18:	2b60      	cmp	r3, #96	; 0x60
 800ac1a:	d044      	beq.n	800aca6 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 800ac1c:	e06d      	b.n	800acfa <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800ac1e:	2280      	movs	r2, #128	; 0x80
 800ac20:	0152      	lsls	r2, r2, #5
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d068      	beq.n	800acf8 <HAL_TIM_ConfigClockSource+0x15c>
 800ac26:	2280      	movs	r2, #128	; 0x80
 800ac28:	0192      	lsls	r2, r2, #6
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	d017      	beq.n	800ac5e <HAL_TIM_ConfigClockSource+0xc2>
      break;
 800ac2e:	e064      	b.n	800acfa <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6818      	ldr	r0, [r3, #0]
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	6899      	ldr	r1, [r3, #8]
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	685a      	ldr	r2, [r3, #4]
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	68db      	ldr	r3, [r3, #12]
 800ac40:	f000 fa5e 	bl	800b100 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	689b      	ldr	r3, [r3, #8]
 800ac4a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	2277      	movs	r2, #119	; 0x77
 800ac50:	4313      	orrs	r3, r2
 800ac52:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	68fa      	ldr	r2, [r7, #12]
 800ac5a:	609a      	str	r2, [r3, #8]
      break;
 800ac5c:	e04d      	b.n	800acfa <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6818      	ldr	r0, [r3, #0]
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	6899      	ldr	r1, [r3, #8]
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	685a      	ldr	r2, [r3, #4]
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	68db      	ldr	r3, [r3, #12]
 800ac6e:	f000 fa47 	bl	800b100 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	689a      	ldr	r2, [r3, #8]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	2180      	movs	r1, #128	; 0x80
 800ac7e:	01c9      	lsls	r1, r1, #7
 800ac80:	430a      	orrs	r2, r1
 800ac82:	609a      	str	r2, [r3, #8]
      break;
 800ac84:	e039      	b.n	800acfa <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6818      	ldr	r0, [r3, #0]
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	6859      	ldr	r1, [r3, #4]
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	68db      	ldr	r3, [r3, #12]
 800ac92:	001a      	movs	r2, r3
 800ac94:	f000 f9ba 	bl	800b00c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	2150      	movs	r1, #80	; 0x50
 800ac9e:	0018      	movs	r0, r3
 800aca0:	f000 fa14 	bl	800b0cc <TIM_ITRx_SetConfig>
      break;
 800aca4:	e029      	b.n	800acfa <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6818      	ldr	r0, [r3, #0]
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	6859      	ldr	r1, [r3, #4]
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	68db      	ldr	r3, [r3, #12]
 800acb2:	001a      	movs	r2, r3
 800acb4:	f000 f9d8 	bl	800b068 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	2160      	movs	r1, #96	; 0x60
 800acbe:	0018      	movs	r0, r3
 800acc0:	f000 fa04 	bl	800b0cc <TIM_ITRx_SetConfig>
      break;
 800acc4:	e019      	b.n	800acfa <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6818      	ldr	r0, [r3, #0]
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	6859      	ldr	r1, [r3, #4]
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	68db      	ldr	r3, [r3, #12]
 800acd2:	001a      	movs	r2, r3
 800acd4:	f000 f99a 	bl	800b00c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	2140      	movs	r1, #64	; 0x40
 800acde:	0018      	movs	r0, r3
 800ace0:	f000 f9f4 	bl	800b0cc <TIM_ITRx_SetConfig>
      break;
 800ace4:	e009      	b.n	800acfa <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681a      	ldr	r2, [r3, #0]
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	0019      	movs	r1, r3
 800acf0:	0010      	movs	r0, r2
 800acf2:	f000 f9eb 	bl	800b0cc <TIM_ITRx_SetConfig>
      break;
 800acf6:	e000      	b.n	800acfa <HAL_TIM_ConfigClockSource+0x15e>
      break;
 800acf8:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2239      	movs	r2, #57	; 0x39
 800acfe:	2101      	movs	r1, #1
 800ad00:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2238      	movs	r2, #56	; 0x38
 800ad06:	2100      	movs	r1, #0
 800ad08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ad0a:	2300      	movs	r3, #0
}
 800ad0c:	0018      	movs	r0, r3
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	b004      	add	sp, #16
 800ad12:	bd80      	pop	{r7, pc}
 800ad14:	ffff00ff 	.word	0xffff00ff

0800ad18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b082      	sub	sp, #8
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ad20:	46c0      	nop			; (mov r8, r8)
 800ad22:	46bd      	mov	sp, r7
 800ad24:	b002      	add	sp, #8
 800ad26:	bd80      	pop	{r7, pc}

0800ad28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b082      	sub	sp, #8
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ad30:	46c0      	nop			; (mov r8, r8)
 800ad32:	46bd      	mov	sp, r7
 800ad34:	b002      	add	sp, #8
 800ad36:	bd80      	pop	{r7, pc}

0800ad38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b082      	sub	sp, #8
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ad40:	46c0      	nop			; (mov r8, r8)
 800ad42:	46bd      	mov	sp, r7
 800ad44:	b002      	add	sp, #8
 800ad46:	bd80      	pop	{r7, pc}

0800ad48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b084      	sub	sp, #16
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ad58:	687a      	ldr	r2, [r7, #4]
 800ad5a:	2380      	movs	r3, #128	; 0x80
 800ad5c:	05db      	lsls	r3, r3, #23
 800ad5e:	429a      	cmp	r2, r3
 800ad60:	d00b      	beq.n	800ad7a <TIM_Base_SetConfig+0x32>
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	4a23      	ldr	r2, [pc, #140]	; (800adf4 <TIM_Base_SetConfig+0xac>)
 800ad66:	4293      	cmp	r3, r2
 800ad68:	d007      	beq.n	800ad7a <TIM_Base_SetConfig+0x32>
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	4a22      	ldr	r2, [pc, #136]	; (800adf8 <TIM_Base_SetConfig+0xb0>)
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d003      	beq.n	800ad7a <TIM_Base_SetConfig+0x32>
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	4a21      	ldr	r2, [pc, #132]	; (800adfc <TIM_Base_SetConfig+0xb4>)
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d108      	bne.n	800ad8c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	2270      	movs	r2, #112	; 0x70
 800ad7e:	4393      	bics	r3, r2
 800ad80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	685b      	ldr	r3, [r3, #4]
 800ad86:	68fa      	ldr	r2, [r7, #12]
 800ad88:	4313      	orrs	r3, r2
 800ad8a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ad8c:	687a      	ldr	r2, [r7, #4]
 800ad8e:	2380      	movs	r3, #128	; 0x80
 800ad90:	05db      	lsls	r3, r3, #23
 800ad92:	429a      	cmp	r2, r3
 800ad94:	d00b      	beq.n	800adae <TIM_Base_SetConfig+0x66>
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	4a16      	ldr	r2, [pc, #88]	; (800adf4 <TIM_Base_SetConfig+0xac>)
 800ad9a:	4293      	cmp	r3, r2
 800ad9c:	d007      	beq.n	800adae <TIM_Base_SetConfig+0x66>
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	4a15      	ldr	r2, [pc, #84]	; (800adf8 <TIM_Base_SetConfig+0xb0>)
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d003      	beq.n	800adae <TIM_Base_SetConfig+0x66>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	4a14      	ldr	r2, [pc, #80]	; (800adfc <TIM_Base_SetConfig+0xb4>)
 800adaa:	4293      	cmp	r3, r2
 800adac:	d108      	bne.n	800adc0 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	4a13      	ldr	r2, [pc, #76]	; (800ae00 <TIM_Base_SetConfig+0xb8>)
 800adb2:	4013      	ands	r3, r2
 800adb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	68db      	ldr	r3, [r3, #12]
 800adba:	68fa      	ldr	r2, [r7, #12]
 800adbc:	4313      	orrs	r3, r2
 800adbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	2280      	movs	r2, #128	; 0x80
 800adc4:	4393      	bics	r3, r2
 800adc6:	001a      	movs	r2, r3
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	691b      	ldr	r3, [r3, #16]
 800adcc:	4313      	orrs	r3, r2
 800adce:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	68fa      	ldr	r2, [r7, #12]
 800add4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	689a      	ldr	r2, [r3, #8]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	681a      	ldr	r2, [r3, #0]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2201      	movs	r2, #1
 800adea:	615a      	str	r2, [r3, #20]
}
 800adec:	46c0      	nop			; (mov r8, r8)
 800adee:	46bd      	mov	sp, r7
 800adf0:	b004      	add	sp, #16
 800adf2:	bd80      	pop	{r7, pc}
 800adf4:	40000400 	.word	0x40000400
 800adf8:	40010800 	.word	0x40010800
 800adfc:	40011400 	.word	0x40011400
 800ae00:	fffffcff 	.word	0xfffffcff

0800ae04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b086      	sub	sp, #24
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
 800ae0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6a1b      	ldr	r3, [r3, #32]
 800ae12:	2201      	movs	r2, #1
 800ae14:	4393      	bics	r3, r2
 800ae16:	001a      	movs	r2, r3
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6a1b      	ldr	r3, [r3, #32]
 800ae20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	699b      	ldr	r3, [r3, #24]
 800ae2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	2270      	movs	r2, #112	; 0x70
 800ae32:	4393      	bics	r3, r2
 800ae34:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	2203      	movs	r2, #3
 800ae3a:	4393      	bics	r3, r2
 800ae3c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	68fa      	ldr	r2, [r7, #12]
 800ae44:	4313      	orrs	r3, r2
 800ae46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ae48:	697b      	ldr	r3, [r7, #20]
 800ae4a:	2202      	movs	r2, #2
 800ae4c:	4393      	bics	r3, r2
 800ae4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	689b      	ldr	r3, [r3, #8]
 800ae54:	697a      	ldr	r2, [r7, #20]
 800ae56:	4313      	orrs	r3, r2
 800ae58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	693a      	ldr	r2, [r7, #16]
 800ae5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	68fa      	ldr	r2, [r7, #12]
 800ae64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	685a      	ldr	r2, [r3, #4]
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	697a      	ldr	r2, [r7, #20]
 800ae72:	621a      	str	r2, [r3, #32]
}
 800ae74:	46c0      	nop			; (mov r8, r8)
 800ae76:	46bd      	mov	sp, r7
 800ae78:	b006      	add	sp, #24
 800ae7a:	bd80      	pop	{r7, pc}

0800ae7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b086      	sub	sp, #24
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
 800ae84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6a1b      	ldr	r3, [r3, #32]
 800ae8a:	2210      	movs	r2, #16
 800ae8c:	4393      	bics	r3, r2
 800ae8e:	001a      	movs	r2, r3
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6a1b      	ldr	r3, [r3, #32]
 800ae98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	685b      	ldr	r3, [r3, #4]
 800ae9e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	699b      	ldr	r3, [r3, #24]
 800aea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	4a13      	ldr	r2, [pc, #76]	; (800aef8 <TIM_OC2_SetConfig+0x7c>)
 800aeaa:	4013      	ands	r3, r2
 800aeac:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	4a12      	ldr	r2, [pc, #72]	; (800aefc <TIM_OC2_SetConfig+0x80>)
 800aeb2:	4013      	ands	r3, r2
 800aeb4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	021b      	lsls	r3, r3, #8
 800aebc:	68fa      	ldr	r2, [r7, #12]
 800aebe:	4313      	orrs	r3, r2
 800aec0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	2220      	movs	r2, #32
 800aec6:	4393      	bics	r3, r2
 800aec8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	689b      	ldr	r3, [r3, #8]
 800aece:	011b      	lsls	r3, r3, #4
 800aed0:	697a      	ldr	r2, [r7, #20]
 800aed2:	4313      	orrs	r3, r2
 800aed4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	693a      	ldr	r2, [r7, #16]
 800aeda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	68fa      	ldr	r2, [r7, #12]
 800aee0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	685a      	ldr	r2, [r3, #4]
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	697a      	ldr	r2, [r7, #20]
 800aeee:	621a      	str	r2, [r3, #32]
}
 800aef0:	46c0      	nop			; (mov r8, r8)
 800aef2:	46bd      	mov	sp, r7
 800aef4:	b006      	add	sp, #24
 800aef6:	bd80      	pop	{r7, pc}
 800aef8:	ffff8fff 	.word	0xffff8fff
 800aefc:	fffffcff 	.word	0xfffffcff

0800af00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b086      	sub	sp, #24
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
 800af08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6a1b      	ldr	r3, [r3, #32]
 800af0e:	4a1a      	ldr	r2, [pc, #104]	; (800af78 <TIM_OC3_SetConfig+0x78>)
 800af10:	401a      	ands	r2, r3
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6a1b      	ldr	r3, [r3, #32]
 800af1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	685b      	ldr	r3, [r3, #4]
 800af20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	69db      	ldr	r3, [r3, #28]
 800af26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	2270      	movs	r2, #112	; 0x70
 800af2c:	4393      	bics	r3, r2
 800af2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	2203      	movs	r2, #3
 800af34:	4393      	bics	r3, r2
 800af36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	68fa      	ldr	r2, [r7, #12]
 800af3e:	4313      	orrs	r3, r2
 800af40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	4a0d      	ldr	r2, [pc, #52]	; (800af7c <TIM_OC3_SetConfig+0x7c>)
 800af46:	4013      	ands	r3, r2
 800af48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	689b      	ldr	r3, [r3, #8]
 800af4e:	021b      	lsls	r3, r3, #8
 800af50:	697a      	ldr	r2, [r7, #20]
 800af52:	4313      	orrs	r3, r2
 800af54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	693a      	ldr	r2, [r7, #16]
 800af5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	68fa      	ldr	r2, [r7, #12]
 800af60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	685a      	ldr	r2, [r3, #4]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	697a      	ldr	r2, [r7, #20]
 800af6e:	621a      	str	r2, [r3, #32]
}
 800af70:	46c0      	nop			; (mov r8, r8)
 800af72:	46bd      	mov	sp, r7
 800af74:	b006      	add	sp, #24
 800af76:	bd80      	pop	{r7, pc}
 800af78:	fffffeff 	.word	0xfffffeff
 800af7c:	fffffdff 	.word	0xfffffdff

0800af80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b086      	sub	sp, #24
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6a1b      	ldr	r3, [r3, #32]
 800af8e:	4a1b      	ldr	r2, [pc, #108]	; (800affc <TIM_OC4_SetConfig+0x7c>)
 800af90:	401a      	ands	r2, r3
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6a1b      	ldr	r3, [r3, #32]
 800af9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	685b      	ldr	r3, [r3, #4]
 800afa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	69db      	ldr	r3, [r3, #28]
 800afa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	4a15      	ldr	r2, [pc, #84]	; (800b000 <TIM_OC4_SetConfig+0x80>)
 800afac:	4013      	ands	r3, r2
 800afae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	4a14      	ldr	r2, [pc, #80]	; (800b004 <TIM_OC4_SetConfig+0x84>)
 800afb4:	4013      	ands	r3, r2
 800afb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	021b      	lsls	r3, r3, #8
 800afbe:	68fa      	ldr	r2, [r7, #12]
 800afc0:	4313      	orrs	r3, r2
 800afc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800afc4:	697b      	ldr	r3, [r7, #20]
 800afc6:	4a10      	ldr	r2, [pc, #64]	; (800b008 <TIM_OC4_SetConfig+0x88>)
 800afc8:	4013      	ands	r3, r2
 800afca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	689b      	ldr	r3, [r3, #8]
 800afd0:	031b      	lsls	r3, r3, #12
 800afd2:	697a      	ldr	r2, [r7, #20]
 800afd4:	4313      	orrs	r3, r2
 800afd6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	693a      	ldr	r2, [r7, #16]
 800afdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	68fa      	ldr	r2, [r7, #12]
 800afe2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	685a      	ldr	r2, [r3, #4]
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	697a      	ldr	r2, [r7, #20]
 800aff0:	621a      	str	r2, [r3, #32]
}
 800aff2:	46c0      	nop			; (mov r8, r8)
 800aff4:	46bd      	mov	sp, r7
 800aff6:	b006      	add	sp, #24
 800aff8:	bd80      	pop	{r7, pc}
 800affa:	46c0      	nop			; (mov r8, r8)
 800affc:	ffffefff 	.word	0xffffefff
 800b000:	ffff8fff 	.word	0xffff8fff
 800b004:	fffffcff 	.word	0xfffffcff
 800b008:	ffffdfff 	.word	0xffffdfff

0800b00c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b086      	sub	sp, #24
 800b010:	af00      	add	r7, sp, #0
 800b012:	60f8      	str	r0, [r7, #12]
 800b014:	60b9      	str	r1, [r7, #8]
 800b016:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	6a1b      	ldr	r3, [r3, #32]
 800b01c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	6a1b      	ldr	r3, [r3, #32]
 800b022:	2201      	movs	r2, #1
 800b024:	4393      	bics	r3, r2
 800b026:	001a      	movs	r2, r3
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	699b      	ldr	r3, [r3, #24]
 800b030:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	22f0      	movs	r2, #240	; 0xf0
 800b036:	4393      	bics	r3, r2
 800b038:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	011b      	lsls	r3, r3, #4
 800b03e:	693a      	ldr	r2, [r7, #16]
 800b040:	4313      	orrs	r3, r2
 800b042:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	220a      	movs	r2, #10
 800b048:	4393      	bics	r3, r2
 800b04a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b04c:	697a      	ldr	r2, [r7, #20]
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	4313      	orrs	r3, r2
 800b052:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	693a      	ldr	r2, [r7, #16]
 800b058:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	697a      	ldr	r2, [r7, #20]
 800b05e:	621a      	str	r2, [r3, #32]
}
 800b060:	46c0      	nop			; (mov r8, r8)
 800b062:	46bd      	mov	sp, r7
 800b064:	b006      	add	sp, #24
 800b066:	bd80      	pop	{r7, pc}

0800b068 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b086      	sub	sp, #24
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	60f8      	str	r0, [r7, #12]
 800b070:	60b9      	str	r1, [r7, #8]
 800b072:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	6a1b      	ldr	r3, [r3, #32]
 800b078:	2210      	movs	r2, #16
 800b07a:	4393      	bics	r3, r2
 800b07c:	001a      	movs	r2, r3
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	699b      	ldr	r3, [r3, #24]
 800b086:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	6a1b      	ldr	r3, [r3, #32]
 800b08c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	4a0d      	ldr	r2, [pc, #52]	; (800b0c8 <TIM_TI2_ConfigInputStage+0x60>)
 800b092:	4013      	ands	r3, r2
 800b094:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	031b      	lsls	r3, r3, #12
 800b09a:	697a      	ldr	r2, [r7, #20]
 800b09c:	4313      	orrs	r3, r2
 800b09e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b0a0:	693b      	ldr	r3, [r7, #16]
 800b0a2:	22a0      	movs	r2, #160	; 0xa0
 800b0a4:	4393      	bics	r3, r2
 800b0a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	011b      	lsls	r3, r3, #4
 800b0ac:	693a      	ldr	r2, [r7, #16]
 800b0ae:	4313      	orrs	r3, r2
 800b0b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	697a      	ldr	r2, [r7, #20]
 800b0b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	693a      	ldr	r2, [r7, #16]
 800b0bc:	621a      	str	r2, [r3, #32]
}
 800b0be:	46c0      	nop			; (mov r8, r8)
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	b006      	add	sp, #24
 800b0c4:	bd80      	pop	{r7, pc}
 800b0c6:	46c0      	nop			; (mov r8, r8)
 800b0c8:	ffff0fff 	.word	0xffff0fff

0800b0cc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b084      	sub	sp, #16
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
 800b0d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	689b      	ldr	r3, [r3, #8]
 800b0da:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	2270      	movs	r2, #112	; 0x70
 800b0e0:	4393      	bics	r3, r2
 800b0e2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b0e4:	683a      	ldr	r2, [r7, #0]
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	4313      	orrs	r3, r2
 800b0ea:	2207      	movs	r2, #7
 800b0ec:	4313      	orrs	r3, r2
 800b0ee:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	68fa      	ldr	r2, [r7, #12]
 800b0f4:	609a      	str	r2, [r3, #8]
}
 800b0f6:	46c0      	nop			; (mov r8, r8)
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	b004      	add	sp, #16
 800b0fc:	bd80      	pop	{r7, pc}
	...

0800b100 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b086      	sub	sp, #24
 800b104:	af00      	add	r7, sp, #0
 800b106:	60f8      	str	r0, [r7, #12]
 800b108:	60b9      	str	r1, [r7, #8]
 800b10a:	607a      	str	r2, [r7, #4]
 800b10c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	689b      	ldr	r3, [r3, #8]
 800b112:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b114:	697b      	ldr	r3, [r7, #20]
 800b116:	4a09      	ldr	r2, [pc, #36]	; (800b13c <TIM_ETR_SetConfig+0x3c>)
 800b118:	4013      	ands	r3, r2
 800b11a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	021a      	lsls	r2, r3, #8
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	431a      	orrs	r2, r3
 800b124:	68bb      	ldr	r3, [r7, #8]
 800b126:	4313      	orrs	r3, r2
 800b128:	697a      	ldr	r2, [r7, #20]
 800b12a:	4313      	orrs	r3, r2
 800b12c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	697a      	ldr	r2, [r7, #20]
 800b132:	609a      	str	r2, [r3, #8]
}
 800b134:	46c0      	nop			; (mov r8, r8)
 800b136:	46bd      	mov	sp, r7
 800b138:	b006      	add	sp, #24
 800b13a:	bd80      	pop	{r7, pc}
 800b13c:	ffff00ff 	.word	0xffff00ff

0800b140 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b086      	sub	sp, #24
 800b144:	af00      	add	r7, sp, #0
 800b146:	60f8      	str	r0, [r7, #12]
 800b148:	60b9      	str	r1, [r7, #8]
 800b14a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	221f      	movs	r2, #31
 800b150:	4013      	ands	r3, r2
 800b152:	2201      	movs	r2, #1
 800b154:	409a      	lsls	r2, r3
 800b156:	0013      	movs	r3, r2
 800b158:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	6a1b      	ldr	r3, [r3, #32]
 800b15e:	697a      	ldr	r2, [r7, #20]
 800b160:	43d2      	mvns	r2, r2
 800b162:	401a      	ands	r2, r3
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	6a1a      	ldr	r2, [r3, #32]
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	211f      	movs	r1, #31
 800b170:	400b      	ands	r3, r1
 800b172:	6879      	ldr	r1, [r7, #4]
 800b174:	4099      	lsls	r1, r3
 800b176:	000b      	movs	r3, r1
 800b178:	431a      	orrs	r2, r3
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	621a      	str	r2, [r3, #32]
}
 800b17e:	46c0      	nop			; (mov r8, r8)
 800b180:	46bd      	mov	sp, r7
 800b182:	b006      	add	sp, #24
 800b184:	bd80      	pop	{r7, pc}

0800b186 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b186:	b580      	push	{r7, lr}
 800b188:	b084      	sub	sp, #16
 800b18a:	af00      	add	r7, sp, #0
 800b18c:	6078      	str	r0, [r7, #4]
 800b18e:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2238      	movs	r2, #56	; 0x38
 800b194:	5c9b      	ldrb	r3, [r3, r2]
 800b196:	2b01      	cmp	r3, #1
 800b198:	d101      	bne.n	800b19e <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b19a:	2302      	movs	r3, #2
 800b19c:	e032      	b.n	800b204 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2238      	movs	r2, #56	; 0x38
 800b1a2:	2101      	movs	r1, #1
 800b1a4:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2239      	movs	r2, #57	; 0x39
 800b1aa:	2102      	movs	r1, #2
 800b1ac:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	685b      	ldr	r3, [r3, #4]
 800b1b4:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	689b      	ldr	r3, [r3, #8]
 800b1bc:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	2270      	movs	r2, #112	; 0x70
 800b1c2:	4393      	bics	r3, r2
 800b1c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	68fa      	ldr	r2, [r7, #12]
 800b1cc:	4313      	orrs	r3, r2
 800b1ce:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	2280      	movs	r2, #128	; 0x80
 800b1d4:	4393      	bics	r3, r2
 800b1d6:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	685b      	ldr	r3, [r3, #4]
 800b1dc:	68ba      	ldr	r2, [r7, #8]
 800b1de:	4313      	orrs	r3, r2
 800b1e0:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	68fa      	ldr	r2, [r7, #12]
 800b1e8:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	68ba      	ldr	r2, [r7, #8]
 800b1f0:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2239      	movs	r2, #57	; 0x39
 800b1f6:	2101      	movs	r1, #1
 800b1f8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2238      	movs	r2, #56	; 0x38
 800b1fe:	2100      	movs	r1, #0
 800b200:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b202:	2300      	movs	r3, #0
}
 800b204:	0018      	movs	r0, r3
 800b206:	46bd      	mov	sp, r7
 800b208:	b004      	add	sp, #16
 800b20a:	bd80      	pop	{r7, pc}

0800b20c <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b082      	sub	sp, #8
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
 800b214:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2238      	movs	r2, #56	; 0x38
 800b21a:	5c9b      	ldrb	r3, [r3, r2]
 800b21c:	2b01      	cmp	r3, #1
 800b21e:	d101      	bne.n	800b224 <HAL_TIMEx_RemapConfig+0x18>
 800b220:	2302      	movs	r3, #2
 800b222:	e00c      	b.n	800b23e <HAL_TIMEx_RemapConfig+0x32>
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2238      	movs	r2, #56	; 0x38
 800b228:	2101      	movs	r1, #1
 800b22a:	5499      	strb	r1, [r3, r2]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	683a      	ldr	r2, [r7, #0]
 800b232:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2238      	movs	r2, #56	; 0x38
 800b238:	2100      	movs	r1, #0
 800b23a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b23c:	2300      	movs	r3, #0
}
 800b23e:	0018      	movs	r0, r3
 800b240:	46bd      	mov	sp, r7
 800b242:	b002      	add	sp, #8
 800b244:	bd80      	pop	{r7, pc}
	...

0800b248 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b084      	sub	sp, #16
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b250:	210e      	movs	r1, #14
 800b252:	187b      	adds	r3, r7, r1
 800b254:	4a08      	ldr	r2, [pc, #32]	; (800b278 <USB_EnableGlobalInt+0x30>)
 800b256:	801a      	strh	r2, [r3, #0]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2240      	movs	r2, #64	; 0x40
 800b25c:	5a9b      	ldrh	r3, [r3, r2]
 800b25e:	b29a      	uxth	r2, r3
 800b260:	187b      	adds	r3, r7, r1
 800b262:	881b      	ldrh	r3, [r3, #0]
 800b264:	4313      	orrs	r3, r2
 800b266:	b299      	uxth	r1, r3
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2240      	movs	r2, #64	; 0x40
 800b26c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800b26e:	2300      	movs	r3, #0
}
 800b270:	0018      	movs	r0, r3
 800b272:	46bd      	mov	sp, r7
 800b274:	b004      	add	sp, #16
 800b276:	bd80      	pop	{r7, pc}
 800b278:	ffffbf80 	.word	0xffffbf80

0800b27c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b084      	sub	sp, #16
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b284:	210e      	movs	r1, #14
 800b286:	187b      	adds	r3, r7, r1
 800b288:	4a0b      	ldr	r2, [pc, #44]	; (800b2b8 <USB_DisableGlobalInt+0x3c>)
 800b28a:	801a      	strh	r2, [r3, #0]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	2240      	movs	r2, #64	; 0x40
 800b290:	5a9b      	ldrh	r3, [r3, r2]
 800b292:	b29b      	uxth	r3, r3
 800b294:	b21b      	sxth	r3, r3
 800b296:	187a      	adds	r2, r7, r1
 800b298:	2100      	movs	r1, #0
 800b29a:	5e52      	ldrsh	r2, [r2, r1]
 800b29c:	43d2      	mvns	r2, r2
 800b29e:	b212      	sxth	r2, r2
 800b2a0:	4013      	ands	r3, r2
 800b2a2:	b21b      	sxth	r3, r3
 800b2a4:	b299      	uxth	r1, r3
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2240      	movs	r2, #64	; 0x40
 800b2aa:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800b2ac:	2300      	movs	r3, #0
}
 800b2ae:	0018      	movs	r0, r3
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	b004      	add	sp, #16
 800b2b4:	bd80      	pop	{r7, pc}
 800b2b6:	46c0      	nop			; (mov r8, r8)
 800b2b8:	ffffbf80 	.word	0xffffbf80

0800b2bc <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800b2bc:	b084      	sub	sp, #16
 800b2be:	b590      	push	{r4, r7, lr}
 800b2c0:	46c6      	mov	lr, r8
 800b2c2:	b500      	push	{lr}
 800b2c4:	b082      	sub	sp, #8
 800b2c6:	af00      	add	r7, sp, #0
 800b2c8:	6078      	str	r0, [r7, #4]
 800b2ca:	2004      	movs	r0, #4
 800b2cc:	2410      	movs	r4, #16
 800b2ce:	46a4      	mov	ip, r4
 800b2d0:	2408      	movs	r4, #8
 800b2d2:	46a0      	mov	r8, r4
 800b2d4:	44b8      	add	r8, r7
 800b2d6:	44c4      	add	ip, r8
 800b2d8:	4460      	add	r0, ip
 800b2da:	6001      	str	r1, [r0, #0]
 800b2dc:	6042      	str	r2, [r0, #4]
 800b2de:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2240      	movs	r2, #64	; 0x40
 800b2e4:	2101      	movs	r1, #1
 800b2e6:	5299      	strh	r1, [r3, r2]

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2240      	movs	r2, #64	; 0x40
 800b2ec:	2100      	movs	r1, #0
 800b2ee:	5299      	strh	r1, [r3, r2]

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2244      	movs	r2, #68	; 0x44
 800b2f4:	2100      	movs	r1, #0
 800b2f6:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2250      	movs	r2, #80	; 0x50
 800b2fc:	2100      	movs	r1, #0
 800b2fe:	5299      	strh	r1, [r3, r2]

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	0018      	movs	r0, r3
 800b304:	f7ff ffa0 	bl	800b248 <USB_EnableGlobalInt>

  return HAL_OK;
 800b308:	2300      	movs	r3, #0
}
 800b30a:	0018      	movs	r0, r3
 800b30c:	46bd      	mov	sp, r7
 800b30e:	b002      	add	sp, #8
 800b310:	bc04      	pop	{r2}
 800b312:	4690      	mov	r8, r2
 800b314:	bc90      	pop	{r4, r7}
 800b316:	bc08      	pop	{r3}
 800b318:	b004      	add	sp, #16
 800b31a:	4718      	bx	r3

0800b31c <calloc>:
 800b31c:	b510      	push	{r4, lr}
 800b31e:	4b03      	ldr	r3, [pc, #12]	; (800b32c <calloc+0x10>)
 800b320:	000a      	movs	r2, r1
 800b322:	0001      	movs	r1, r0
 800b324:	6818      	ldr	r0, [r3, #0]
 800b326:	f000 f83e 	bl	800b3a6 <_calloc_r>
 800b32a:	bd10      	pop	{r4, pc}
 800b32c:	2000006c 	.word	0x2000006c

0800b330 <__errno>:
 800b330:	4b01      	ldr	r3, [pc, #4]	; (800b338 <__errno+0x8>)
 800b332:	6818      	ldr	r0, [r3, #0]
 800b334:	4770      	bx	lr
 800b336:	46c0      	nop			; (mov r8, r8)
 800b338:	2000006c 	.word	0x2000006c

0800b33c <__libc_init_array>:
 800b33c:	b570      	push	{r4, r5, r6, lr}
 800b33e:	2600      	movs	r6, #0
 800b340:	4d0c      	ldr	r5, [pc, #48]	; (800b374 <__libc_init_array+0x38>)
 800b342:	4c0d      	ldr	r4, [pc, #52]	; (800b378 <__libc_init_array+0x3c>)
 800b344:	1b64      	subs	r4, r4, r5
 800b346:	10a4      	asrs	r4, r4, #2
 800b348:	42a6      	cmp	r6, r4
 800b34a:	d109      	bne.n	800b360 <__libc_init_array+0x24>
 800b34c:	2600      	movs	r6, #0
 800b34e:	f000 fc37 	bl	800bbc0 <_init>
 800b352:	4d0a      	ldr	r5, [pc, #40]	; (800b37c <__libc_init_array+0x40>)
 800b354:	4c0a      	ldr	r4, [pc, #40]	; (800b380 <__libc_init_array+0x44>)
 800b356:	1b64      	subs	r4, r4, r5
 800b358:	10a4      	asrs	r4, r4, #2
 800b35a:	42a6      	cmp	r6, r4
 800b35c:	d105      	bne.n	800b36a <__libc_init_array+0x2e>
 800b35e:	bd70      	pop	{r4, r5, r6, pc}
 800b360:	00b3      	lsls	r3, r6, #2
 800b362:	58eb      	ldr	r3, [r5, r3]
 800b364:	4798      	blx	r3
 800b366:	3601      	adds	r6, #1
 800b368:	e7ee      	b.n	800b348 <__libc_init_array+0xc>
 800b36a:	00b3      	lsls	r3, r6, #2
 800b36c:	58eb      	ldr	r3, [r5, r3]
 800b36e:	4798      	blx	r3
 800b370:	3601      	adds	r6, #1
 800b372:	e7f2      	b.n	800b35a <__libc_init_array+0x1e>
 800b374:	0800c838 	.word	0x0800c838
 800b378:	0800c838 	.word	0x0800c838
 800b37c:	0800c838 	.word	0x0800c838
 800b380:	0800c83c 	.word	0x0800c83c

0800b384 <memcpy>:
 800b384:	2300      	movs	r3, #0
 800b386:	b510      	push	{r4, lr}
 800b388:	429a      	cmp	r2, r3
 800b38a:	d100      	bne.n	800b38e <memcpy+0xa>
 800b38c:	bd10      	pop	{r4, pc}
 800b38e:	5ccc      	ldrb	r4, [r1, r3]
 800b390:	54c4      	strb	r4, [r0, r3]
 800b392:	3301      	adds	r3, #1
 800b394:	e7f8      	b.n	800b388 <memcpy+0x4>

0800b396 <memset>:
 800b396:	0003      	movs	r3, r0
 800b398:	1812      	adds	r2, r2, r0
 800b39a:	4293      	cmp	r3, r2
 800b39c:	d100      	bne.n	800b3a0 <memset+0xa>
 800b39e:	4770      	bx	lr
 800b3a0:	7019      	strb	r1, [r3, #0]
 800b3a2:	3301      	adds	r3, #1
 800b3a4:	e7f9      	b.n	800b39a <memset+0x4>

0800b3a6 <_calloc_r>:
 800b3a6:	434a      	muls	r2, r1
 800b3a8:	b570      	push	{r4, r5, r6, lr}
 800b3aa:	0011      	movs	r1, r2
 800b3ac:	0014      	movs	r4, r2
 800b3ae:	f000 f809 	bl	800b3c4 <_malloc_r>
 800b3b2:	1e05      	subs	r5, r0, #0
 800b3b4:	d003      	beq.n	800b3be <_calloc_r+0x18>
 800b3b6:	0022      	movs	r2, r4
 800b3b8:	2100      	movs	r1, #0
 800b3ba:	f7ff ffec 	bl	800b396 <memset>
 800b3be:	0028      	movs	r0, r5
 800b3c0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b3c4 <_malloc_r>:
 800b3c4:	2303      	movs	r3, #3
 800b3c6:	b570      	push	{r4, r5, r6, lr}
 800b3c8:	1ccd      	adds	r5, r1, #3
 800b3ca:	439d      	bics	r5, r3
 800b3cc:	3508      	adds	r5, #8
 800b3ce:	0006      	movs	r6, r0
 800b3d0:	2d0c      	cmp	r5, #12
 800b3d2:	d21e      	bcs.n	800b412 <_malloc_r+0x4e>
 800b3d4:	250c      	movs	r5, #12
 800b3d6:	42a9      	cmp	r1, r5
 800b3d8:	d81d      	bhi.n	800b416 <_malloc_r+0x52>
 800b3da:	0030      	movs	r0, r6
 800b3dc:	f000 f882 	bl	800b4e4 <__malloc_lock>
 800b3e0:	4a25      	ldr	r2, [pc, #148]	; (800b478 <_malloc_r+0xb4>)
 800b3e2:	6814      	ldr	r4, [r2, #0]
 800b3e4:	0021      	movs	r1, r4
 800b3e6:	2900      	cmp	r1, #0
 800b3e8:	d119      	bne.n	800b41e <_malloc_r+0x5a>
 800b3ea:	4c24      	ldr	r4, [pc, #144]	; (800b47c <_malloc_r+0xb8>)
 800b3ec:	6823      	ldr	r3, [r4, #0]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d103      	bne.n	800b3fa <_malloc_r+0x36>
 800b3f2:	0030      	movs	r0, r6
 800b3f4:	f000 f844 	bl	800b480 <_sbrk_r>
 800b3f8:	6020      	str	r0, [r4, #0]
 800b3fa:	0029      	movs	r1, r5
 800b3fc:	0030      	movs	r0, r6
 800b3fe:	f000 f83f 	bl	800b480 <_sbrk_r>
 800b402:	1c43      	adds	r3, r0, #1
 800b404:	d12b      	bne.n	800b45e <_malloc_r+0x9a>
 800b406:	230c      	movs	r3, #12
 800b408:	0030      	movs	r0, r6
 800b40a:	6033      	str	r3, [r6, #0]
 800b40c:	f000 f86b 	bl	800b4e6 <__malloc_unlock>
 800b410:	e003      	b.n	800b41a <_malloc_r+0x56>
 800b412:	2d00      	cmp	r5, #0
 800b414:	dadf      	bge.n	800b3d6 <_malloc_r+0x12>
 800b416:	230c      	movs	r3, #12
 800b418:	6033      	str	r3, [r6, #0]
 800b41a:	2000      	movs	r0, #0
 800b41c:	bd70      	pop	{r4, r5, r6, pc}
 800b41e:	680b      	ldr	r3, [r1, #0]
 800b420:	1b5b      	subs	r3, r3, r5
 800b422:	d419      	bmi.n	800b458 <_malloc_r+0x94>
 800b424:	2b0b      	cmp	r3, #11
 800b426:	d903      	bls.n	800b430 <_malloc_r+0x6c>
 800b428:	600b      	str	r3, [r1, #0]
 800b42a:	18cc      	adds	r4, r1, r3
 800b42c:	6025      	str	r5, [r4, #0]
 800b42e:	e003      	b.n	800b438 <_malloc_r+0x74>
 800b430:	684b      	ldr	r3, [r1, #4]
 800b432:	428c      	cmp	r4, r1
 800b434:	d10d      	bne.n	800b452 <_malloc_r+0x8e>
 800b436:	6013      	str	r3, [r2, #0]
 800b438:	0030      	movs	r0, r6
 800b43a:	f000 f854 	bl	800b4e6 <__malloc_unlock>
 800b43e:	0020      	movs	r0, r4
 800b440:	2207      	movs	r2, #7
 800b442:	300b      	adds	r0, #11
 800b444:	1d23      	adds	r3, r4, #4
 800b446:	4390      	bics	r0, r2
 800b448:	1ac3      	subs	r3, r0, r3
 800b44a:	d0e7      	beq.n	800b41c <_malloc_r+0x58>
 800b44c:	425a      	negs	r2, r3
 800b44e:	50e2      	str	r2, [r4, r3]
 800b450:	e7e4      	b.n	800b41c <_malloc_r+0x58>
 800b452:	6063      	str	r3, [r4, #4]
 800b454:	000c      	movs	r4, r1
 800b456:	e7ef      	b.n	800b438 <_malloc_r+0x74>
 800b458:	000c      	movs	r4, r1
 800b45a:	6849      	ldr	r1, [r1, #4]
 800b45c:	e7c3      	b.n	800b3e6 <_malloc_r+0x22>
 800b45e:	2303      	movs	r3, #3
 800b460:	1cc4      	adds	r4, r0, #3
 800b462:	439c      	bics	r4, r3
 800b464:	42a0      	cmp	r0, r4
 800b466:	d0e1      	beq.n	800b42c <_malloc_r+0x68>
 800b468:	1a21      	subs	r1, r4, r0
 800b46a:	0030      	movs	r0, r6
 800b46c:	f000 f808 	bl	800b480 <_sbrk_r>
 800b470:	1c43      	adds	r3, r0, #1
 800b472:	d1db      	bne.n	800b42c <_malloc_r+0x68>
 800b474:	e7c7      	b.n	800b406 <_malloc_r+0x42>
 800b476:	46c0      	nop			; (mov r8, r8)
 800b478:	20000134 	.word	0x20000134
 800b47c:	20000138 	.word	0x20000138

0800b480 <_sbrk_r>:
 800b480:	2300      	movs	r3, #0
 800b482:	b570      	push	{r4, r5, r6, lr}
 800b484:	4c06      	ldr	r4, [pc, #24]	; (800b4a0 <_sbrk_r+0x20>)
 800b486:	0005      	movs	r5, r0
 800b488:	0008      	movs	r0, r1
 800b48a:	6023      	str	r3, [r4, #0]
 800b48c:	f7f9 fa96 	bl	80049bc <_sbrk>
 800b490:	1c43      	adds	r3, r0, #1
 800b492:	d103      	bne.n	800b49c <_sbrk_r+0x1c>
 800b494:	6823      	ldr	r3, [r4, #0]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d000      	beq.n	800b49c <_sbrk_r+0x1c>
 800b49a:	602b      	str	r3, [r5, #0]
 800b49c:	bd70      	pop	{r4, r5, r6, pc}
 800b49e:	46c0      	nop			; (mov r8, r8)
 800b4a0:	200005d8 	.word	0x200005d8

0800b4a4 <siprintf>:
 800b4a4:	b40e      	push	{r1, r2, r3}
 800b4a6:	b500      	push	{lr}
 800b4a8:	490b      	ldr	r1, [pc, #44]	; (800b4d8 <siprintf+0x34>)
 800b4aa:	b09c      	sub	sp, #112	; 0x70
 800b4ac:	ab1d      	add	r3, sp, #116	; 0x74
 800b4ae:	9002      	str	r0, [sp, #8]
 800b4b0:	9006      	str	r0, [sp, #24]
 800b4b2:	9107      	str	r1, [sp, #28]
 800b4b4:	9104      	str	r1, [sp, #16]
 800b4b6:	4809      	ldr	r0, [pc, #36]	; (800b4dc <siprintf+0x38>)
 800b4b8:	4909      	ldr	r1, [pc, #36]	; (800b4e0 <siprintf+0x3c>)
 800b4ba:	cb04      	ldmia	r3!, {r2}
 800b4bc:	9105      	str	r1, [sp, #20]
 800b4be:	6800      	ldr	r0, [r0, #0]
 800b4c0:	a902      	add	r1, sp, #8
 800b4c2:	9301      	str	r3, [sp, #4]
 800b4c4:	f000 f872 	bl	800b5ac <_svfiprintf_r>
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	9a02      	ldr	r2, [sp, #8]
 800b4cc:	7013      	strb	r3, [r2, #0]
 800b4ce:	b01c      	add	sp, #112	; 0x70
 800b4d0:	bc08      	pop	{r3}
 800b4d2:	b003      	add	sp, #12
 800b4d4:	4718      	bx	r3
 800b4d6:	46c0      	nop			; (mov r8, r8)
 800b4d8:	7fffffff 	.word	0x7fffffff
 800b4dc:	2000006c 	.word	0x2000006c
 800b4e0:	ffff0208 	.word	0xffff0208

0800b4e4 <__malloc_lock>:
 800b4e4:	4770      	bx	lr

0800b4e6 <__malloc_unlock>:
 800b4e6:	4770      	bx	lr

0800b4e8 <__ssputs_r>:
 800b4e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4ea:	688e      	ldr	r6, [r1, #8]
 800b4ec:	b085      	sub	sp, #20
 800b4ee:	0007      	movs	r7, r0
 800b4f0:	000c      	movs	r4, r1
 800b4f2:	9203      	str	r2, [sp, #12]
 800b4f4:	9301      	str	r3, [sp, #4]
 800b4f6:	429e      	cmp	r6, r3
 800b4f8:	d83c      	bhi.n	800b574 <__ssputs_r+0x8c>
 800b4fa:	2390      	movs	r3, #144	; 0x90
 800b4fc:	898a      	ldrh	r2, [r1, #12]
 800b4fe:	00db      	lsls	r3, r3, #3
 800b500:	421a      	tst	r2, r3
 800b502:	d034      	beq.n	800b56e <__ssputs_r+0x86>
 800b504:	2503      	movs	r5, #3
 800b506:	6909      	ldr	r1, [r1, #16]
 800b508:	6823      	ldr	r3, [r4, #0]
 800b50a:	1a5b      	subs	r3, r3, r1
 800b50c:	9302      	str	r3, [sp, #8]
 800b50e:	6963      	ldr	r3, [r4, #20]
 800b510:	9802      	ldr	r0, [sp, #8]
 800b512:	435d      	muls	r5, r3
 800b514:	0feb      	lsrs	r3, r5, #31
 800b516:	195d      	adds	r5, r3, r5
 800b518:	9b01      	ldr	r3, [sp, #4]
 800b51a:	106d      	asrs	r5, r5, #1
 800b51c:	3301      	adds	r3, #1
 800b51e:	181b      	adds	r3, r3, r0
 800b520:	42ab      	cmp	r3, r5
 800b522:	d900      	bls.n	800b526 <__ssputs_r+0x3e>
 800b524:	001d      	movs	r5, r3
 800b526:	0553      	lsls	r3, r2, #21
 800b528:	d532      	bpl.n	800b590 <__ssputs_r+0xa8>
 800b52a:	0029      	movs	r1, r5
 800b52c:	0038      	movs	r0, r7
 800b52e:	f7ff ff49 	bl	800b3c4 <_malloc_r>
 800b532:	1e06      	subs	r6, r0, #0
 800b534:	d109      	bne.n	800b54a <__ssputs_r+0x62>
 800b536:	230c      	movs	r3, #12
 800b538:	603b      	str	r3, [r7, #0]
 800b53a:	2340      	movs	r3, #64	; 0x40
 800b53c:	2001      	movs	r0, #1
 800b53e:	89a2      	ldrh	r2, [r4, #12]
 800b540:	4240      	negs	r0, r0
 800b542:	4313      	orrs	r3, r2
 800b544:	81a3      	strh	r3, [r4, #12]
 800b546:	b005      	add	sp, #20
 800b548:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b54a:	9a02      	ldr	r2, [sp, #8]
 800b54c:	6921      	ldr	r1, [r4, #16]
 800b54e:	f7ff ff19 	bl	800b384 <memcpy>
 800b552:	89a3      	ldrh	r3, [r4, #12]
 800b554:	4a14      	ldr	r2, [pc, #80]	; (800b5a8 <__ssputs_r+0xc0>)
 800b556:	401a      	ands	r2, r3
 800b558:	2380      	movs	r3, #128	; 0x80
 800b55a:	4313      	orrs	r3, r2
 800b55c:	81a3      	strh	r3, [r4, #12]
 800b55e:	9b02      	ldr	r3, [sp, #8]
 800b560:	6126      	str	r6, [r4, #16]
 800b562:	18f6      	adds	r6, r6, r3
 800b564:	6026      	str	r6, [r4, #0]
 800b566:	6165      	str	r5, [r4, #20]
 800b568:	9e01      	ldr	r6, [sp, #4]
 800b56a:	1aed      	subs	r5, r5, r3
 800b56c:	60a5      	str	r5, [r4, #8]
 800b56e:	9b01      	ldr	r3, [sp, #4]
 800b570:	429e      	cmp	r6, r3
 800b572:	d900      	bls.n	800b576 <__ssputs_r+0x8e>
 800b574:	9e01      	ldr	r6, [sp, #4]
 800b576:	0032      	movs	r2, r6
 800b578:	9903      	ldr	r1, [sp, #12]
 800b57a:	6820      	ldr	r0, [r4, #0]
 800b57c:	f000 fa95 	bl	800baaa <memmove>
 800b580:	68a3      	ldr	r3, [r4, #8]
 800b582:	2000      	movs	r0, #0
 800b584:	1b9b      	subs	r3, r3, r6
 800b586:	60a3      	str	r3, [r4, #8]
 800b588:	6823      	ldr	r3, [r4, #0]
 800b58a:	199e      	adds	r6, r3, r6
 800b58c:	6026      	str	r6, [r4, #0]
 800b58e:	e7da      	b.n	800b546 <__ssputs_r+0x5e>
 800b590:	002a      	movs	r2, r5
 800b592:	0038      	movs	r0, r7
 800b594:	f000 fae6 	bl	800bb64 <_realloc_r>
 800b598:	1e06      	subs	r6, r0, #0
 800b59a:	d1e0      	bne.n	800b55e <__ssputs_r+0x76>
 800b59c:	6921      	ldr	r1, [r4, #16]
 800b59e:	0038      	movs	r0, r7
 800b5a0:	f000 fa96 	bl	800bad0 <_free_r>
 800b5a4:	e7c7      	b.n	800b536 <__ssputs_r+0x4e>
 800b5a6:	46c0      	nop			; (mov r8, r8)
 800b5a8:	fffffb7f 	.word	0xfffffb7f

0800b5ac <_svfiprintf_r>:
 800b5ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5ae:	b0a1      	sub	sp, #132	; 0x84
 800b5b0:	9003      	str	r0, [sp, #12]
 800b5b2:	001d      	movs	r5, r3
 800b5b4:	898b      	ldrh	r3, [r1, #12]
 800b5b6:	000f      	movs	r7, r1
 800b5b8:	0016      	movs	r6, r2
 800b5ba:	061b      	lsls	r3, r3, #24
 800b5bc:	d511      	bpl.n	800b5e2 <_svfiprintf_r+0x36>
 800b5be:	690b      	ldr	r3, [r1, #16]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d10e      	bne.n	800b5e2 <_svfiprintf_r+0x36>
 800b5c4:	2140      	movs	r1, #64	; 0x40
 800b5c6:	f7ff fefd 	bl	800b3c4 <_malloc_r>
 800b5ca:	6038      	str	r0, [r7, #0]
 800b5cc:	6138      	str	r0, [r7, #16]
 800b5ce:	2800      	cmp	r0, #0
 800b5d0:	d105      	bne.n	800b5de <_svfiprintf_r+0x32>
 800b5d2:	230c      	movs	r3, #12
 800b5d4:	9a03      	ldr	r2, [sp, #12]
 800b5d6:	3801      	subs	r0, #1
 800b5d8:	6013      	str	r3, [r2, #0]
 800b5da:	b021      	add	sp, #132	; 0x84
 800b5dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5de:	2340      	movs	r3, #64	; 0x40
 800b5e0:	617b      	str	r3, [r7, #20]
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	ac08      	add	r4, sp, #32
 800b5e6:	6163      	str	r3, [r4, #20]
 800b5e8:	3320      	adds	r3, #32
 800b5ea:	7663      	strb	r3, [r4, #25]
 800b5ec:	3310      	adds	r3, #16
 800b5ee:	76a3      	strb	r3, [r4, #26]
 800b5f0:	9507      	str	r5, [sp, #28]
 800b5f2:	0035      	movs	r5, r6
 800b5f4:	782b      	ldrb	r3, [r5, #0]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d001      	beq.n	800b5fe <_svfiprintf_r+0x52>
 800b5fa:	2b25      	cmp	r3, #37	; 0x25
 800b5fc:	d146      	bne.n	800b68c <_svfiprintf_r+0xe0>
 800b5fe:	1bab      	subs	r3, r5, r6
 800b600:	9305      	str	r3, [sp, #20]
 800b602:	d00c      	beq.n	800b61e <_svfiprintf_r+0x72>
 800b604:	0032      	movs	r2, r6
 800b606:	0039      	movs	r1, r7
 800b608:	9803      	ldr	r0, [sp, #12]
 800b60a:	f7ff ff6d 	bl	800b4e8 <__ssputs_r>
 800b60e:	1c43      	adds	r3, r0, #1
 800b610:	d100      	bne.n	800b614 <_svfiprintf_r+0x68>
 800b612:	e0ae      	b.n	800b772 <_svfiprintf_r+0x1c6>
 800b614:	6962      	ldr	r2, [r4, #20]
 800b616:	9b05      	ldr	r3, [sp, #20]
 800b618:	4694      	mov	ip, r2
 800b61a:	4463      	add	r3, ip
 800b61c:	6163      	str	r3, [r4, #20]
 800b61e:	782b      	ldrb	r3, [r5, #0]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d100      	bne.n	800b626 <_svfiprintf_r+0x7a>
 800b624:	e0a5      	b.n	800b772 <_svfiprintf_r+0x1c6>
 800b626:	2201      	movs	r2, #1
 800b628:	2300      	movs	r3, #0
 800b62a:	4252      	negs	r2, r2
 800b62c:	6062      	str	r2, [r4, #4]
 800b62e:	a904      	add	r1, sp, #16
 800b630:	3254      	adds	r2, #84	; 0x54
 800b632:	1852      	adds	r2, r2, r1
 800b634:	1c6e      	adds	r6, r5, #1
 800b636:	6023      	str	r3, [r4, #0]
 800b638:	60e3      	str	r3, [r4, #12]
 800b63a:	60a3      	str	r3, [r4, #8]
 800b63c:	7013      	strb	r3, [r2, #0]
 800b63e:	65a3      	str	r3, [r4, #88]	; 0x58
 800b640:	7831      	ldrb	r1, [r6, #0]
 800b642:	2205      	movs	r2, #5
 800b644:	4853      	ldr	r0, [pc, #332]	; (800b794 <_svfiprintf_r+0x1e8>)
 800b646:	f000 fa25 	bl	800ba94 <memchr>
 800b64a:	1c75      	adds	r5, r6, #1
 800b64c:	2800      	cmp	r0, #0
 800b64e:	d11f      	bne.n	800b690 <_svfiprintf_r+0xe4>
 800b650:	6822      	ldr	r2, [r4, #0]
 800b652:	06d3      	lsls	r3, r2, #27
 800b654:	d504      	bpl.n	800b660 <_svfiprintf_r+0xb4>
 800b656:	2353      	movs	r3, #83	; 0x53
 800b658:	a904      	add	r1, sp, #16
 800b65a:	185b      	adds	r3, r3, r1
 800b65c:	2120      	movs	r1, #32
 800b65e:	7019      	strb	r1, [r3, #0]
 800b660:	0713      	lsls	r3, r2, #28
 800b662:	d504      	bpl.n	800b66e <_svfiprintf_r+0xc2>
 800b664:	2353      	movs	r3, #83	; 0x53
 800b666:	a904      	add	r1, sp, #16
 800b668:	185b      	adds	r3, r3, r1
 800b66a:	212b      	movs	r1, #43	; 0x2b
 800b66c:	7019      	strb	r1, [r3, #0]
 800b66e:	7833      	ldrb	r3, [r6, #0]
 800b670:	2b2a      	cmp	r3, #42	; 0x2a
 800b672:	d016      	beq.n	800b6a2 <_svfiprintf_r+0xf6>
 800b674:	0035      	movs	r5, r6
 800b676:	2100      	movs	r1, #0
 800b678:	200a      	movs	r0, #10
 800b67a:	68e3      	ldr	r3, [r4, #12]
 800b67c:	782a      	ldrb	r2, [r5, #0]
 800b67e:	1c6e      	adds	r6, r5, #1
 800b680:	3a30      	subs	r2, #48	; 0x30
 800b682:	2a09      	cmp	r2, #9
 800b684:	d94e      	bls.n	800b724 <_svfiprintf_r+0x178>
 800b686:	2900      	cmp	r1, #0
 800b688:	d018      	beq.n	800b6bc <_svfiprintf_r+0x110>
 800b68a:	e010      	b.n	800b6ae <_svfiprintf_r+0x102>
 800b68c:	3501      	adds	r5, #1
 800b68e:	e7b1      	b.n	800b5f4 <_svfiprintf_r+0x48>
 800b690:	4b40      	ldr	r3, [pc, #256]	; (800b794 <_svfiprintf_r+0x1e8>)
 800b692:	6822      	ldr	r2, [r4, #0]
 800b694:	1ac0      	subs	r0, r0, r3
 800b696:	2301      	movs	r3, #1
 800b698:	4083      	lsls	r3, r0
 800b69a:	4313      	orrs	r3, r2
 800b69c:	6023      	str	r3, [r4, #0]
 800b69e:	002e      	movs	r6, r5
 800b6a0:	e7ce      	b.n	800b640 <_svfiprintf_r+0x94>
 800b6a2:	9b07      	ldr	r3, [sp, #28]
 800b6a4:	1d19      	adds	r1, r3, #4
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	9107      	str	r1, [sp, #28]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	db01      	blt.n	800b6b2 <_svfiprintf_r+0x106>
 800b6ae:	930b      	str	r3, [sp, #44]	; 0x2c
 800b6b0:	e004      	b.n	800b6bc <_svfiprintf_r+0x110>
 800b6b2:	425b      	negs	r3, r3
 800b6b4:	60e3      	str	r3, [r4, #12]
 800b6b6:	2302      	movs	r3, #2
 800b6b8:	4313      	orrs	r3, r2
 800b6ba:	6023      	str	r3, [r4, #0]
 800b6bc:	782b      	ldrb	r3, [r5, #0]
 800b6be:	2b2e      	cmp	r3, #46	; 0x2e
 800b6c0:	d10a      	bne.n	800b6d8 <_svfiprintf_r+0x12c>
 800b6c2:	786b      	ldrb	r3, [r5, #1]
 800b6c4:	2b2a      	cmp	r3, #42	; 0x2a
 800b6c6:	d135      	bne.n	800b734 <_svfiprintf_r+0x188>
 800b6c8:	9b07      	ldr	r3, [sp, #28]
 800b6ca:	3502      	adds	r5, #2
 800b6cc:	1d1a      	adds	r2, r3, #4
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	9207      	str	r2, [sp, #28]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	db2b      	blt.n	800b72e <_svfiprintf_r+0x182>
 800b6d6:	9309      	str	r3, [sp, #36]	; 0x24
 800b6d8:	4e2f      	ldr	r6, [pc, #188]	; (800b798 <_svfiprintf_r+0x1ec>)
 800b6da:	7829      	ldrb	r1, [r5, #0]
 800b6dc:	2203      	movs	r2, #3
 800b6de:	0030      	movs	r0, r6
 800b6e0:	f000 f9d8 	bl	800ba94 <memchr>
 800b6e4:	2800      	cmp	r0, #0
 800b6e6:	d006      	beq.n	800b6f6 <_svfiprintf_r+0x14a>
 800b6e8:	2340      	movs	r3, #64	; 0x40
 800b6ea:	1b80      	subs	r0, r0, r6
 800b6ec:	4083      	lsls	r3, r0
 800b6ee:	6822      	ldr	r2, [r4, #0]
 800b6f0:	3501      	adds	r5, #1
 800b6f2:	4313      	orrs	r3, r2
 800b6f4:	6023      	str	r3, [r4, #0]
 800b6f6:	7829      	ldrb	r1, [r5, #0]
 800b6f8:	2206      	movs	r2, #6
 800b6fa:	4828      	ldr	r0, [pc, #160]	; (800b79c <_svfiprintf_r+0x1f0>)
 800b6fc:	1c6e      	adds	r6, r5, #1
 800b6fe:	7621      	strb	r1, [r4, #24]
 800b700:	f000 f9c8 	bl	800ba94 <memchr>
 800b704:	2800      	cmp	r0, #0
 800b706:	d03c      	beq.n	800b782 <_svfiprintf_r+0x1d6>
 800b708:	4b25      	ldr	r3, [pc, #148]	; (800b7a0 <_svfiprintf_r+0x1f4>)
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d125      	bne.n	800b75a <_svfiprintf_r+0x1ae>
 800b70e:	2207      	movs	r2, #7
 800b710:	9b07      	ldr	r3, [sp, #28]
 800b712:	3307      	adds	r3, #7
 800b714:	4393      	bics	r3, r2
 800b716:	3308      	adds	r3, #8
 800b718:	9307      	str	r3, [sp, #28]
 800b71a:	6963      	ldr	r3, [r4, #20]
 800b71c:	9a04      	ldr	r2, [sp, #16]
 800b71e:	189b      	adds	r3, r3, r2
 800b720:	6163      	str	r3, [r4, #20]
 800b722:	e766      	b.n	800b5f2 <_svfiprintf_r+0x46>
 800b724:	4343      	muls	r3, r0
 800b726:	2101      	movs	r1, #1
 800b728:	189b      	adds	r3, r3, r2
 800b72a:	0035      	movs	r5, r6
 800b72c:	e7a6      	b.n	800b67c <_svfiprintf_r+0xd0>
 800b72e:	2301      	movs	r3, #1
 800b730:	425b      	negs	r3, r3
 800b732:	e7d0      	b.n	800b6d6 <_svfiprintf_r+0x12a>
 800b734:	2300      	movs	r3, #0
 800b736:	200a      	movs	r0, #10
 800b738:	001a      	movs	r2, r3
 800b73a:	3501      	adds	r5, #1
 800b73c:	6063      	str	r3, [r4, #4]
 800b73e:	7829      	ldrb	r1, [r5, #0]
 800b740:	1c6e      	adds	r6, r5, #1
 800b742:	3930      	subs	r1, #48	; 0x30
 800b744:	2909      	cmp	r1, #9
 800b746:	d903      	bls.n	800b750 <_svfiprintf_r+0x1a4>
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d0c5      	beq.n	800b6d8 <_svfiprintf_r+0x12c>
 800b74c:	9209      	str	r2, [sp, #36]	; 0x24
 800b74e:	e7c3      	b.n	800b6d8 <_svfiprintf_r+0x12c>
 800b750:	4342      	muls	r2, r0
 800b752:	2301      	movs	r3, #1
 800b754:	1852      	adds	r2, r2, r1
 800b756:	0035      	movs	r5, r6
 800b758:	e7f1      	b.n	800b73e <_svfiprintf_r+0x192>
 800b75a:	ab07      	add	r3, sp, #28
 800b75c:	9300      	str	r3, [sp, #0]
 800b75e:	003a      	movs	r2, r7
 800b760:	4b10      	ldr	r3, [pc, #64]	; (800b7a4 <_svfiprintf_r+0x1f8>)
 800b762:	0021      	movs	r1, r4
 800b764:	9803      	ldr	r0, [sp, #12]
 800b766:	e000      	b.n	800b76a <_svfiprintf_r+0x1be>
 800b768:	bf00      	nop
 800b76a:	9004      	str	r0, [sp, #16]
 800b76c:	9b04      	ldr	r3, [sp, #16]
 800b76e:	3301      	adds	r3, #1
 800b770:	d1d3      	bne.n	800b71a <_svfiprintf_r+0x16e>
 800b772:	89bb      	ldrh	r3, [r7, #12]
 800b774:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b776:	065b      	lsls	r3, r3, #25
 800b778:	d400      	bmi.n	800b77c <_svfiprintf_r+0x1d0>
 800b77a:	e72e      	b.n	800b5da <_svfiprintf_r+0x2e>
 800b77c:	2001      	movs	r0, #1
 800b77e:	4240      	negs	r0, r0
 800b780:	e72b      	b.n	800b5da <_svfiprintf_r+0x2e>
 800b782:	ab07      	add	r3, sp, #28
 800b784:	9300      	str	r3, [sp, #0]
 800b786:	003a      	movs	r2, r7
 800b788:	4b06      	ldr	r3, [pc, #24]	; (800b7a4 <_svfiprintf_r+0x1f8>)
 800b78a:	0021      	movs	r1, r4
 800b78c:	9803      	ldr	r0, [sp, #12]
 800b78e:	f000 f879 	bl	800b884 <_printf_i>
 800b792:	e7ea      	b.n	800b76a <_svfiprintf_r+0x1be>
 800b794:	0800c804 	.word	0x0800c804
 800b798:	0800c80a 	.word	0x0800c80a
 800b79c:	0800c80e 	.word	0x0800c80e
 800b7a0:	00000000 	.word	0x00000000
 800b7a4:	0800b4e9 	.word	0x0800b4e9

0800b7a8 <_printf_common>:
 800b7a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7aa:	0015      	movs	r5, r2
 800b7ac:	9301      	str	r3, [sp, #4]
 800b7ae:	688a      	ldr	r2, [r1, #8]
 800b7b0:	690b      	ldr	r3, [r1, #16]
 800b7b2:	9000      	str	r0, [sp, #0]
 800b7b4:	000c      	movs	r4, r1
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	da00      	bge.n	800b7bc <_printf_common+0x14>
 800b7ba:	0013      	movs	r3, r2
 800b7bc:	0022      	movs	r2, r4
 800b7be:	602b      	str	r3, [r5, #0]
 800b7c0:	3243      	adds	r2, #67	; 0x43
 800b7c2:	7812      	ldrb	r2, [r2, #0]
 800b7c4:	2a00      	cmp	r2, #0
 800b7c6:	d001      	beq.n	800b7cc <_printf_common+0x24>
 800b7c8:	3301      	adds	r3, #1
 800b7ca:	602b      	str	r3, [r5, #0]
 800b7cc:	6823      	ldr	r3, [r4, #0]
 800b7ce:	069b      	lsls	r3, r3, #26
 800b7d0:	d502      	bpl.n	800b7d8 <_printf_common+0x30>
 800b7d2:	682b      	ldr	r3, [r5, #0]
 800b7d4:	3302      	adds	r3, #2
 800b7d6:	602b      	str	r3, [r5, #0]
 800b7d8:	2706      	movs	r7, #6
 800b7da:	6823      	ldr	r3, [r4, #0]
 800b7dc:	401f      	ands	r7, r3
 800b7de:	d027      	beq.n	800b830 <_printf_common+0x88>
 800b7e0:	0023      	movs	r3, r4
 800b7e2:	3343      	adds	r3, #67	; 0x43
 800b7e4:	781b      	ldrb	r3, [r3, #0]
 800b7e6:	1e5a      	subs	r2, r3, #1
 800b7e8:	4193      	sbcs	r3, r2
 800b7ea:	6822      	ldr	r2, [r4, #0]
 800b7ec:	0692      	lsls	r2, r2, #26
 800b7ee:	d430      	bmi.n	800b852 <_printf_common+0xaa>
 800b7f0:	0022      	movs	r2, r4
 800b7f2:	9901      	ldr	r1, [sp, #4]
 800b7f4:	3243      	adds	r2, #67	; 0x43
 800b7f6:	9800      	ldr	r0, [sp, #0]
 800b7f8:	9e08      	ldr	r6, [sp, #32]
 800b7fa:	47b0      	blx	r6
 800b7fc:	1c43      	adds	r3, r0, #1
 800b7fe:	d025      	beq.n	800b84c <_printf_common+0xa4>
 800b800:	2306      	movs	r3, #6
 800b802:	6820      	ldr	r0, [r4, #0]
 800b804:	682a      	ldr	r2, [r5, #0]
 800b806:	68e1      	ldr	r1, [r4, #12]
 800b808:	4003      	ands	r3, r0
 800b80a:	2500      	movs	r5, #0
 800b80c:	2b04      	cmp	r3, #4
 800b80e:	d103      	bne.n	800b818 <_printf_common+0x70>
 800b810:	1a8d      	subs	r5, r1, r2
 800b812:	43eb      	mvns	r3, r5
 800b814:	17db      	asrs	r3, r3, #31
 800b816:	401d      	ands	r5, r3
 800b818:	68a3      	ldr	r3, [r4, #8]
 800b81a:	6922      	ldr	r2, [r4, #16]
 800b81c:	4293      	cmp	r3, r2
 800b81e:	dd01      	ble.n	800b824 <_printf_common+0x7c>
 800b820:	1a9b      	subs	r3, r3, r2
 800b822:	18ed      	adds	r5, r5, r3
 800b824:	2700      	movs	r7, #0
 800b826:	42bd      	cmp	r5, r7
 800b828:	d120      	bne.n	800b86c <_printf_common+0xc4>
 800b82a:	2000      	movs	r0, #0
 800b82c:	e010      	b.n	800b850 <_printf_common+0xa8>
 800b82e:	3701      	adds	r7, #1
 800b830:	68e3      	ldr	r3, [r4, #12]
 800b832:	682a      	ldr	r2, [r5, #0]
 800b834:	1a9b      	subs	r3, r3, r2
 800b836:	42bb      	cmp	r3, r7
 800b838:	ddd2      	ble.n	800b7e0 <_printf_common+0x38>
 800b83a:	0022      	movs	r2, r4
 800b83c:	2301      	movs	r3, #1
 800b83e:	3219      	adds	r2, #25
 800b840:	9901      	ldr	r1, [sp, #4]
 800b842:	9800      	ldr	r0, [sp, #0]
 800b844:	9e08      	ldr	r6, [sp, #32]
 800b846:	47b0      	blx	r6
 800b848:	1c43      	adds	r3, r0, #1
 800b84a:	d1f0      	bne.n	800b82e <_printf_common+0x86>
 800b84c:	2001      	movs	r0, #1
 800b84e:	4240      	negs	r0, r0
 800b850:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b852:	2030      	movs	r0, #48	; 0x30
 800b854:	18e1      	adds	r1, r4, r3
 800b856:	3143      	adds	r1, #67	; 0x43
 800b858:	7008      	strb	r0, [r1, #0]
 800b85a:	0021      	movs	r1, r4
 800b85c:	1c5a      	adds	r2, r3, #1
 800b85e:	3145      	adds	r1, #69	; 0x45
 800b860:	7809      	ldrb	r1, [r1, #0]
 800b862:	18a2      	adds	r2, r4, r2
 800b864:	3243      	adds	r2, #67	; 0x43
 800b866:	3302      	adds	r3, #2
 800b868:	7011      	strb	r1, [r2, #0]
 800b86a:	e7c1      	b.n	800b7f0 <_printf_common+0x48>
 800b86c:	0022      	movs	r2, r4
 800b86e:	2301      	movs	r3, #1
 800b870:	321a      	adds	r2, #26
 800b872:	9901      	ldr	r1, [sp, #4]
 800b874:	9800      	ldr	r0, [sp, #0]
 800b876:	9e08      	ldr	r6, [sp, #32]
 800b878:	47b0      	blx	r6
 800b87a:	1c43      	adds	r3, r0, #1
 800b87c:	d0e6      	beq.n	800b84c <_printf_common+0xa4>
 800b87e:	3701      	adds	r7, #1
 800b880:	e7d1      	b.n	800b826 <_printf_common+0x7e>
	...

0800b884 <_printf_i>:
 800b884:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b886:	b089      	sub	sp, #36	; 0x24
 800b888:	9204      	str	r2, [sp, #16]
 800b88a:	000a      	movs	r2, r1
 800b88c:	3243      	adds	r2, #67	; 0x43
 800b88e:	9305      	str	r3, [sp, #20]
 800b890:	9003      	str	r0, [sp, #12]
 800b892:	9202      	str	r2, [sp, #8]
 800b894:	7e0a      	ldrb	r2, [r1, #24]
 800b896:	000c      	movs	r4, r1
 800b898:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b89a:	2a6e      	cmp	r2, #110	; 0x6e
 800b89c:	d100      	bne.n	800b8a0 <_printf_i+0x1c>
 800b89e:	e086      	b.n	800b9ae <_printf_i+0x12a>
 800b8a0:	d81f      	bhi.n	800b8e2 <_printf_i+0x5e>
 800b8a2:	2a63      	cmp	r2, #99	; 0x63
 800b8a4:	d033      	beq.n	800b90e <_printf_i+0x8a>
 800b8a6:	d808      	bhi.n	800b8ba <_printf_i+0x36>
 800b8a8:	2a00      	cmp	r2, #0
 800b8aa:	d100      	bne.n	800b8ae <_printf_i+0x2a>
 800b8ac:	e08c      	b.n	800b9c8 <_printf_i+0x144>
 800b8ae:	2a58      	cmp	r2, #88	; 0x58
 800b8b0:	d04d      	beq.n	800b94e <_printf_i+0xca>
 800b8b2:	0025      	movs	r5, r4
 800b8b4:	3542      	adds	r5, #66	; 0x42
 800b8b6:	702a      	strb	r2, [r5, #0]
 800b8b8:	e030      	b.n	800b91c <_printf_i+0x98>
 800b8ba:	2a64      	cmp	r2, #100	; 0x64
 800b8bc:	d001      	beq.n	800b8c2 <_printf_i+0x3e>
 800b8be:	2a69      	cmp	r2, #105	; 0x69
 800b8c0:	d1f7      	bne.n	800b8b2 <_printf_i+0x2e>
 800b8c2:	6819      	ldr	r1, [r3, #0]
 800b8c4:	6825      	ldr	r5, [r4, #0]
 800b8c6:	1d0a      	adds	r2, r1, #4
 800b8c8:	0628      	lsls	r0, r5, #24
 800b8ca:	d529      	bpl.n	800b920 <_printf_i+0x9c>
 800b8cc:	6808      	ldr	r0, [r1, #0]
 800b8ce:	601a      	str	r2, [r3, #0]
 800b8d0:	2800      	cmp	r0, #0
 800b8d2:	da03      	bge.n	800b8dc <_printf_i+0x58>
 800b8d4:	232d      	movs	r3, #45	; 0x2d
 800b8d6:	9a02      	ldr	r2, [sp, #8]
 800b8d8:	4240      	negs	r0, r0
 800b8da:	7013      	strb	r3, [r2, #0]
 800b8dc:	4e6b      	ldr	r6, [pc, #428]	; (800ba8c <_printf_i+0x208>)
 800b8de:	270a      	movs	r7, #10
 800b8e0:	e04f      	b.n	800b982 <_printf_i+0xfe>
 800b8e2:	2a73      	cmp	r2, #115	; 0x73
 800b8e4:	d074      	beq.n	800b9d0 <_printf_i+0x14c>
 800b8e6:	d808      	bhi.n	800b8fa <_printf_i+0x76>
 800b8e8:	2a6f      	cmp	r2, #111	; 0x6f
 800b8ea:	d01f      	beq.n	800b92c <_printf_i+0xa8>
 800b8ec:	2a70      	cmp	r2, #112	; 0x70
 800b8ee:	d1e0      	bne.n	800b8b2 <_printf_i+0x2e>
 800b8f0:	2220      	movs	r2, #32
 800b8f2:	6809      	ldr	r1, [r1, #0]
 800b8f4:	430a      	orrs	r2, r1
 800b8f6:	6022      	str	r2, [r4, #0]
 800b8f8:	e003      	b.n	800b902 <_printf_i+0x7e>
 800b8fa:	2a75      	cmp	r2, #117	; 0x75
 800b8fc:	d016      	beq.n	800b92c <_printf_i+0xa8>
 800b8fe:	2a78      	cmp	r2, #120	; 0x78
 800b900:	d1d7      	bne.n	800b8b2 <_printf_i+0x2e>
 800b902:	0022      	movs	r2, r4
 800b904:	2178      	movs	r1, #120	; 0x78
 800b906:	3245      	adds	r2, #69	; 0x45
 800b908:	7011      	strb	r1, [r2, #0]
 800b90a:	4e61      	ldr	r6, [pc, #388]	; (800ba90 <_printf_i+0x20c>)
 800b90c:	e022      	b.n	800b954 <_printf_i+0xd0>
 800b90e:	0025      	movs	r5, r4
 800b910:	681a      	ldr	r2, [r3, #0]
 800b912:	3542      	adds	r5, #66	; 0x42
 800b914:	1d11      	adds	r1, r2, #4
 800b916:	6019      	str	r1, [r3, #0]
 800b918:	6813      	ldr	r3, [r2, #0]
 800b91a:	702b      	strb	r3, [r5, #0]
 800b91c:	2301      	movs	r3, #1
 800b91e:	e065      	b.n	800b9ec <_printf_i+0x168>
 800b920:	6808      	ldr	r0, [r1, #0]
 800b922:	601a      	str	r2, [r3, #0]
 800b924:	0669      	lsls	r1, r5, #25
 800b926:	d5d3      	bpl.n	800b8d0 <_printf_i+0x4c>
 800b928:	b200      	sxth	r0, r0
 800b92a:	e7d1      	b.n	800b8d0 <_printf_i+0x4c>
 800b92c:	6819      	ldr	r1, [r3, #0]
 800b92e:	6825      	ldr	r5, [r4, #0]
 800b930:	1d08      	adds	r0, r1, #4
 800b932:	6018      	str	r0, [r3, #0]
 800b934:	6808      	ldr	r0, [r1, #0]
 800b936:	062e      	lsls	r6, r5, #24
 800b938:	d505      	bpl.n	800b946 <_printf_i+0xc2>
 800b93a:	4e54      	ldr	r6, [pc, #336]	; (800ba8c <_printf_i+0x208>)
 800b93c:	2708      	movs	r7, #8
 800b93e:	2a6f      	cmp	r2, #111	; 0x6f
 800b940:	d01b      	beq.n	800b97a <_printf_i+0xf6>
 800b942:	270a      	movs	r7, #10
 800b944:	e019      	b.n	800b97a <_printf_i+0xf6>
 800b946:	066d      	lsls	r5, r5, #25
 800b948:	d5f7      	bpl.n	800b93a <_printf_i+0xb6>
 800b94a:	b280      	uxth	r0, r0
 800b94c:	e7f5      	b.n	800b93a <_printf_i+0xb6>
 800b94e:	3145      	adds	r1, #69	; 0x45
 800b950:	4e4e      	ldr	r6, [pc, #312]	; (800ba8c <_printf_i+0x208>)
 800b952:	700a      	strb	r2, [r1, #0]
 800b954:	6818      	ldr	r0, [r3, #0]
 800b956:	6822      	ldr	r2, [r4, #0]
 800b958:	1d01      	adds	r1, r0, #4
 800b95a:	6800      	ldr	r0, [r0, #0]
 800b95c:	6019      	str	r1, [r3, #0]
 800b95e:	0615      	lsls	r5, r2, #24
 800b960:	d521      	bpl.n	800b9a6 <_printf_i+0x122>
 800b962:	07d3      	lsls	r3, r2, #31
 800b964:	d502      	bpl.n	800b96c <_printf_i+0xe8>
 800b966:	2320      	movs	r3, #32
 800b968:	431a      	orrs	r2, r3
 800b96a:	6022      	str	r2, [r4, #0]
 800b96c:	2710      	movs	r7, #16
 800b96e:	2800      	cmp	r0, #0
 800b970:	d103      	bne.n	800b97a <_printf_i+0xf6>
 800b972:	2320      	movs	r3, #32
 800b974:	6822      	ldr	r2, [r4, #0]
 800b976:	439a      	bics	r2, r3
 800b978:	6022      	str	r2, [r4, #0]
 800b97a:	0023      	movs	r3, r4
 800b97c:	2200      	movs	r2, #0
 800b97e:	3343      	adds	r3, #67	; 0x43
 800b980:	701a      	strb	r2, [r3, #0]
 800b982:	6863      	ldr	r3, [r4, #4]
 800b984:	60a3      	str	r3, [r4, #8]
 800b986:	2b00      	cmp	r3, #0
 800b988:	db58      	blt.n	800ba3c <_printf_i+0x1b8>
 800b98a:	2204      	movs	r2, #4
 800b98c:	6821      	ldr	r1, [r4, #0]
 800b98e:	4391      	bics	r1, r2
 800b990:	6021      	str	r1, [r4, #0]
 800b992:	2800      	cmp	r0, #0
 800b994:	d154      	bne.n	800ba40 <_printf_i+0x1bc>
 800b996:	9d02      	ldr	r5, [sp, #8]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d05a      	beq.n	800ba52 <_printf_i+0x1ce>
 800b99c:	0025      	movs	r5, r4
 800b99e:	7833      	ldrb	r3, [r6, #0]
 800b9a0:	3542      	adds	r5, #66	; 0x42
 800b9a2:	702b      	strb	r3, [r5, #0]
 800b9a4:	e055      	b.n	800ba52 <_printf_i+0x1ce>
 800b9a6:	0655      	lsls	r5, r2, #25
 800b9a8:	d5db      	bpl.n	800b962 <_printf_i+0xde>
 800b9aa:	b280      	uxth	r0, r0
 800b9ac:	e7d9      	b.n	800b962 <_printf_i+0xde>
 800b9ae:	681a      	ldr	r2, [r3, #0]
 800b9b0:	680d      	ldr	r5, [r1, #0]
 800b9b2:	1d10      	adds	r0, r2, #4
 800b9b4:	6949      	ldr	r1, [r1, #20]
 800b9b6:	6018      	str	r0, [r3, #0]
 800b9b8:	6813      	ldr	r3, [r2, #0]
 800b9ba:	062e      	lsls	r6, r5, #24
 800b9bc:	d501      	bpl.n	800b9c2 <_printf_i+0x13e>
 800b9be:	6019      	str	r1, [r3, #0]
 800b9c0:	e002      	b.n	800b9c8 <_printf_i+0x144>
 800b9c2:	066d      	lsls	r5, r5, #25
 800b9c4:	d5fb      	bpl.n	800b9be <_printf_i+0x13a>
 800b9c6:	8019      	strh	r1, [r3, #0]
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	9d02      	ldr	r5, [sp, #8]
 800b9cc:	6123      	str	r3, [r4, #16]
 800b9ce:	e04f      	b.n	800ba70 <_printf_i+0x1ec>
 800b9d0:	681a      	ldr	r2, [r3, #0]
 800b9d2:	1d11      	adds	r1, r2, #4
 800b9d4:	6019      	str	r1, [r3, #0]
 800b9d6:	6815      	ldr	r5, [r2, #0]
 800b9d8:	2100      	movs	r1, #0
 800b9da:	6862      	ldr	r2, [r4, #4]
 800b9dc:	0028      	movs	r0, r5
 800b9de:	f000 f859 	bl	800ba94 <memchr>
 800b9e2:	2800      	cmp	r0, #0
 800b9e4:	d001      	beq.n	800b9ea <_printf_i+0x166>
 800b9e6:	1b40      	subs	r0, r0, r5
 800b9e8:	6060      	str	r0, [r4, #4]
 800b9ea:	6863      	ldr	r3, [r4, #4]
 800b9ec:	6123      	str	r3, [r4, #16]
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	9a02      	ldr	r2, [sp, #8]
 800b9f2:	7013      	strb	r3, [r2, #0]
 800b9f4:	e03c      	b.n	800ba70 <_printf_i+0x1ec>
 800b9f6:	6923      	ldr	r3, [r4, #16]
 800b9f8:	002a      	movs	r2, r5
 800b9fa:	9904      	ldr	r1, [sp, #16]
 800b9fc:	9803      	ldr	r0, [sp, #12]
 800b9fe:	9d05      	ldr	r5, [sp, #20]
 800ba00:	47a8      	blx	r5
 800ba02:	1c43      	adds	r3, r0, #1
 800ba04:	d03e      	beq.n	800ba84 <_printf_i+0x200>
 800ba06:	6823      	ldr	r3, [r4, #0]
 800ba08:	079b      	lsls	r3, r3, #30
 800ba0a:	d415      	bmi.n	800ba38 <_printf_i+0x1b4>
 800ba0c:	9b07      	ldr	r3, [sp, #28]
 800ba0e:	68e0      	ldr	r0, [r4, #12]
 800ba10:	4298      	cmp	r0, r3
 800ba12:	da39      	bge.n	800ba88 <_printf_i+0x204>
 800ba14:	0018      	movs	r0, r3
 800ba16:	e037      	b.n	800ba88 <_printf_i+0x204>
 800ba18:	0022      	movs	r2, r4
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	3219      	adds	r2, #25
 800ba1e:	9904      	ldr	r1, [sp, #16]
 800ba20:	9803      	ldr	r0, [sp, #12]
 800ba22:	9e05      	ldr	r6, [sp, #20]
 800ba24:	47b0      	blx	r6
 800ba26:	1c43      	adds	r3, r0, #1
 800ba28:	d02c      	beq.n	800ba84 <_printf_i+0x200>
 800ba2a:	3501      	adds	r5, #1
 800ba2c:	68e3      	ldr	r3, [r4, #12]
 800ba2e:	9a07      	ldr	r2, [sp, #28]
 800ba30:	1a9b      	subs	r3, r3, r2
 800ba32:	42ab      	cmp	r3, r5
 800ba34:	dcf0      	bgt.n	800ba18 <_printf_i+0x194>
 800ba36:	e7e9      	b.n	800ba0c <_printf_i+0x188>
 800ba38:	2500      	movs	r5, #0
 800ba3a:	e7f7      	b.n	800ba2c <_printf_i+0x1a8>
 800ba3c:	2800      	cmp	r0, #0
 800ba3e:	d0ad      	beq.n	800b99c <_printf_i+0x118>
 800ba40:	9d02      	ldr	r5, [sp, #8]
 800ba42:	0039      	movs	r1, r7
 800ba44:	f7f4 fbee 	bl	8000224 <__aeabi_uidivmod>
 800ba48:	5c73      	ldrb	r3, [r6, r1]
 800ba4a:	3d01      	subs	r5, #1
 800ba4c:	702b      	strb	r3, [r5, #0]
 800ba4e:	2800      	cmp	r0, #0
 800ba50:	d1f7      	bne.n	800ba42 <_printf_i+0x1be>
 800ba52:	2f08      	cmp	r7, #8
 800ba54:	d109      	bne.n	800ba6a <_printf_i+0x1e6>
 800ba56:	6823      	ldr	r3, [r4, #0]
 800ba58:	07db      	lsls	r3, r3, #31
 800ba5a:	d506      	bpl.n	800ba6a <_printf_i+0x1e6>
 800ba5c:	6863      	ldr	r3, [r4, #4]
 800ba5e:	6922      	ldr	r2, [r4, #16]
 800ba60:	4293      	cmp	r3, r2
 800ba62:	dc02      	bgt.n	800ba6a <_printf_i+0x1e6>
 800ba64:	2330      	movs	r3, #48	; 0x30
 800ba66:	3d01      	subs	r5, #1
 800ba68:	702b      	strb	r3, [r5, #0]
 800ba6a:	9b02      	ldr	r3, [sp, #8]
 800ba6c:	1b5b      	subs	r3, r3, r5
 800ba6e:	6123      	str	r3, [r4, #16]
 800ba70:	9b05      	ldr	r3, [sp, #20]
 800ba72:	aa07      	add	r2, sp, #28
 800ba74:	9300      	str	r3, [sp, #0]
 800ba76:	0021      	movs	r1, r4
 800ba78:	9b04      	ldr	r3, [sp, #16]
 800ba7a:	9803      	ldr	r0, [sp, #12]
 800ba7c:	f7ff fe94 	bl	800b7a8 <_printf_common>
 800ba80:	1c43      	adds	r3, r0, #1
 800ba82:	d1b8      	bne.n	800b9f6 <_printf_i+0x172>
 800ba84:	2001      	movs	r0, #1
 800ba86:	4240      	negs	r0, r0
 800ba88:	b009      	add	sp, #36	; 0x24
 800ba8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba8c:	0800c815 	.word	0x0800c815
 800ba90:	0800c826 	.word	0x0800c826

0800ba94 <memchr>:
 800ba94:	b2c9      	uxtb	r1, r1
 800ba96:	1882      	adds	r2, r0, r2
 800ba98:	4290      	cmp	r0, r2
 800ba9a:	d101      	bne.n	800baa0 <memchr+0xc>
 800ba9c:	2000      	movs	r0, #0
 800ba9e:	4770      	bx	lr
 800baa0:	7803      	ldrb	r3, [r0, #0]
 800baa2:	428b      	cmp	r3, r1
 800baa4:	d0fb      	beq.n	800ba9e <memchr+0xa>
 800baa6:	3001      	adds	r0, #1
 800baa8:	e7f6      	b.n	800ba98 <memchr+0x4>

0800baaa <memmove>:
 800baaa:	b510      	push	{r4, lr}
 800baac:	4288      	cmp	r0, r1
 800baae:	d902      	bls.n	800bab6 <memmove+0xc>
 800bab0:	188b      	adds	r3, r1, r2
 800bab2:	4298      	cmp	r0, r3
 800bab4:	d303      	bcc.n	800babe <memmove+0x14>
 800bab6:	2300      	movs	r3, #0
 800bab8:	e007      	b.n	800baca <memmove+0x20>
 800baba:	5c8b      	ldrb	r3, [r1, r2]
 800babc:	5483      	strb	r3, [r0, r2]
 800babe:	3a01      	subs	r2, #1
 800bac0:	d2fb      	bcs.n	800baba <memmove+0x10>
 800bac2:	bd10      	pop	{r4, pc}
 800bac4:	5ccc      	ldrb	r4, [r1, r3]
 800bac6:	54c4      	strb	r4, [r0, r3]
 800bac8:	3301      	adds	r3, #1
 800baca:	429a      	cmp	r2, r3
 800bacc:	d1fa      	bne.n	800bac4 <memmove+0x1a>
 800bace:	e7f8      	b.n	800bac2 <memmove+0x18>

0800bad0 <_free_r>:
 800bad0:	b570      	push	{r4, r5, r6, lr}
 800bad2:	0005      	movs	r5, r0
 800bad4:	2900      	cmp	r1, #0
 800bad6:	d010      	beq.n	800bafa <_free_r+0x2a>
 800bad8:	1f0c      	subs	r4, r1, #4
 800bada:	6823      	ldr	r3, [r4, #0]
 800badc:	2b00      	cmp	r3, #0
 800bade:	da00      	bge.n	800bae2 <_free_r+0x12>
 800bae0:	18e4      	adds	r4, r4, r3
 800bae2:	0028      	movs	r0, r5
 800bae4:	f7ff fcfe 	bl	800b4e4 <__malloc_lock>
 800bae8:	4a1d      	ldr	r2, [pc, #116]	; (800bb60 <_free_r+0x90>)
 800baea:	6813      	ldr	r3, [r2, #0]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d105      	bne.n	800bafc <_free_r+0x2c>
 800baf0:	6063      	str	r3, [r4, #4]
 800baf2:	6014      	str	r4, [r2, #0]
 800baf4:	0028      	movs	r0, r5
 800baf6:	f7ff fcf6 	bl	800b4e6 <__malloc_unlock>
 800bafa:	bd70      	pop	{r4, r5, r6, pc}
 800bafc:	42a3      	cmp	r3, r4
 800bafe:	d909      	bls.n	800bb14 <_free_r+0x44>
 800bb00:	6821      	ldr	r1, [r4, #0]
 800bb02:	1860      	adds	r0, r4, r1
 800bb04:	4283      	cmp	r3, r0
 800bb06:	d1f3      	bne.n	800baf0 <_free_r+0x20>
 800bb08:	6818      	ldr	r0, [r3, #0]
 800bb0a:	685b      	ldr	r3, [r3, #4]
 800bb0c:	1841      	adds	r1, r0, r1
 800bb0e:	6021      	str	r1, [r4, #0]
 800bb10:	e7ee      	b.n	800baf0 <_free_r+0x20>
 800bb12:	0013      	movs	r3, r2
 800bb14:	685a      	ldr	r2, [r3, #4]
 800bb16:	2a00      	cmp	r2, #0
 800bb18:	d001      	beq.n	800bb1e <_free_r+0x4e>
 800bb1a:	42a2      	cmp	r2, r4
 800bb1c:	d9f9      	bls.n	800bb12 <_free_r+0x42>
 800bb1e:	6819      	ldr	r1, [r3, #0]
 800bb20:	1858      	adds	r0, r3, r1
 800bb22:	42a0      	cmp	r0, r4
 800bb24:	d10b      	bne.n	800bb3e <_free_r+0x6e>
 800bb26:	6820      	ldr	r0, [r4, #0]
 800bb28:	1809      	adds	r1, r1, r0
 800bb2a:	1858      	adds	r0, r3, r1
 800bb2c:	6019      	str	r1, [r3, #0]
 800bb2e:	4282      	cmp	r2, r0
 800bb30:	d1e0      	bne.n	800baf4 <_free_r+0x24>
 800bb32:	6810      	ldr	r0, [r2, #0]
 800bb34:	6852      	ldr	r2, [r2, #4]
 800bb36:	1841      	adds	r1, r0, r1
 800bb38:	6019      	str	r1, [r3, #0]
 800bb3a:	605a      	str	r2, [r3, #4]
 800bb3c:	e7da      	b.n	800baf4 <_free_r+0x24>
 800bb3e:	42a0      	cmp	r0, r4
 800bb40:	d902      	bls.n	800bb48 <_free_r+0x78>
 800bb42:	230c      	movs	r3, #12
 800bb44:	602b      	str	r3, [r5, #0]
 800bb46:	e7d5      	b.n	800baf4 <_free_r+0x24>
 800bb48:	6821      	ldr	r1, [r4, #0]
 800bb4a:	1860      	adds	r0, r4, r1
 800bb4c:	4282      	cmp	r2, r0
 800bb4e:	d103      	bne.n	800bb58 <_free_r+0x88>
 800bb50:	6810      	ldr	r0, [r2, #0]
 800bb52:	6852      	ldr	r2, [r2, #4]
 800bb54:	1841      	adds	r1, r0, r1
 800bb56:	6021      	str	r1, [r4, #0]
 800bb58:	6062      	str	r2, [r4, #4]
 800bb5a:	605c      	str	r4, [r3, #4]
 800bb5c:	e7ca      	b.n	800baf4 <_free_r+0x24>
 800bb5e:	46c0      	nop			; (mov r8, r8)
 800bb60:	20000134 	.word	0x20000134

0800bb64 <_realloc_r>:
 800bb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb66:	0007      	movs	r7, r0
 800bb68:	000d      	movs	r5, r1
 800bb6a:	0016      	movs	r6, r2
 800bb6c:	2900      	cmp	r1, #0
 800bb6e:	d105      	bne.n	800bb7c <_realloc_r+0x18>
 800bb70:	0011      	movs	r1, r2
 800bb72:	f7ff fc27 	bl	800b3c4 <_malloc_r>
 800bb76:	0004      	movs	r4, r0
 800bb78:	0020      	movs	r0, r4
 800bb7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb7c:	2a00      	cmp	r2, #0
 800bb7e:	d103      	bne.n	800bb88 <_realloc_r+0x24>
 800bb80:	f7ff ffa6 	bl	800bad0 <_free_r>
 800bb84:	0034      	movs	r4, r6
 800bb86:	e7f7      	b.n	800bb78 <_realloc_r+0x14>
 800bb88:	f000 f812 	bl	800bbb0 <_malloc_usable_size_r>
 800bb8c:	002c      	movs	r4, r5
 800bb8e:	42b0      	cmp	r0, r6
 800bb90:	d2f2      	bcs.n	800bb78 <_realloc_r+0x14>
 800bb92:	0031      	movs	r1, r6
 800bb94:	0038      	movs	r0, r7
 800bb96:	f7ff fc15 	bl	800b3c4 <_malloc_r>
 800bb9a:	1e04      	subs	r4, r0, #0
 800bb9c:	d0ec      	beq.n	800bb78 <_realloc_r+0x14>
 800bb9e:	0029      	movs	r1, r5
 800bba0:	0032      	movs	r2, r6
 800bba2:	f7ff fbef 	bl	800b384 <memcpy>
 800bba6:	0029      	movs	r1, r5
 800bba8:	0038      	movs	r0, r7
 800bbaa:	f7ff ff91 	bl	800bad0 <_free_r>
 800bbae:	e7e3      	b.n	800bb78 <_realloc_r+0x14>

0800bbb0 <_malloc_usable_size_r>:
 800bbb0:	1f0b      	subs	r3, r1, #4
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	1f18      	subs	r0, r3, #4
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	da01      	bge.n	800bbbe <_malloc_usable_size_r+0xe>
 800bbba:	580b      	ldr	r3, [r1, r0]
 800bbbc:	18c0      	adds	r0, r0, r3
 800bbbe:	4770      	bx	lr

0800bbc0 <_init>:
 800bbc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbc2:	46c0      	nop			; (mov r8, r8)
 800bbc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbc6:	bc08      	pop	{r3}
 800bbc8:	469e      	mov	lr, r3
 800bbca:	4770      	bx	lr

0800bbcc <_fini>:
 800bbcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbce:	46c0      	nop			; (mov r8, r8)
 800bbd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbd2:	bc08      	pop	{r3}
 800bbd4:	469e      	mov	lr, r3
 800bbd6:	4770      	bx	lr
