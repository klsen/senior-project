
project_L0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fe4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007ac  080080a4  080080a4  000180a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008850  08008850  000200bc  2**0
                  CONTENTS
  4 .ARM          00000000  08008850  08008850  000200bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008850  08008850  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008850  08008850  00018850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008854  08008854  00018854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  08008858  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  200000bc  08008914  000200bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000304  08008914  00020304  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016663  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002cbc  00000000  00000000  00036747  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011d0  00000000  00000000  00039408  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001050  00000000  00000000  0003a5d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001756d  00000000  00000000  0003b628  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ef46  00000000  00000000  00052b95  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008cf95  00000000  00000000  00061adb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eea70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041d0  00000000  00000000  000eeaec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000bc 	.word	0x200000bc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800808c 	.word	0x0800808c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000c0 	.word	0x200000c0
 8000104:	0800808c 	.word	0x0800808c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <SPI_CS_LOW>:
static uint8_t textSize;
static uint16_t textColor;
static uint16_t bg;

// ---- lower level functions ----
void SPI_CS_LOW() {HAL_GPIO_WritePin(CS_GPIO, CS_PIN, GPIO_PIN_RESET);}
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
 80003f8:	4b04      	ldr	r3, [pc, #16]	; (800040c <SPI_CS_LOW+0x18>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	2180      	movs	r1, #128	; 0x80
 80003fe:	0018      	movs	r0, r3
 8000400:	f004 f8b5 	bl	800456e <HAL_GPIO_WritePin>
 8000404:	46c0      	nop			; (mov r8, r8)
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	50000800 	.word	0x50000800

08000410 <SPI_CS_HIGH>:

void SPI_CS_HIGH() {HAL_GPIO_WritePin(CS_GPIO, CS_PIN, GPIO_PIN_SET);}
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
 8000414:	4b04      	ldr	r3, [pc, #16]	; (8000428 <SPI_CS_HIGH+0x18>)
 8000416:	2201      	movs	r2, #1
 8000418:	2180      	movs	r1, #128	; 0x80
 800041a:	0018      	movs	r0, r3
 800041c:	f004 f8a7 	bl	800456e <HAL_GPIO_WritePin>
 8000420:	46c0      	nop			; (mov r8, r8)
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	50000800 	.word	0x50000800

0800042c <SPI_DC_LOW>:

void SPI_DC_LOW() {HAL_GPIO_WritePin(DC_GPIO, DC_PIN, GPIO_PIN_RESET);}
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
 8000430:	4b04      	ldr	r3, [pc, #16]	; (8000444 <SPI_DC_LOW+0x18>)
 8000432:	2200      	movs	r2, #0
 8000434:	2140      	movs	r1, #64	; 0x40
 8000436:	0018      	movs	r0, r3
 8000438:	f004 f899 	bl	800456e <HAL_GPIO_WritePin>
 800043c:	46c0      	nop			; (mov r8, r8)
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	50000400 	.word	0x50000400

08000448 <SPI_DC_HIGH>:

void SPI_DC_HIGH() {HAL_GPIO_WritePin(DC_GPIO, DC_PIN, GPIO_PIN_SET);}
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
 800044c:	4b04      	ldr	r3, [pc, #16]	; (8000460 <SPI_DC_HIGH+0x18>)
 800044e:	2201      	movs	r2, #1
 8000450:	2140      	movs	r1, #64	; 0x40
 8000452:	0018      	movs	r0, r3
 8000454:	f004 f88b 	bl	800456e <HAL_GPIO_WritePin>
 8000458:	46c0      	nop			; (mov r8, r8)
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	46c0      	nop			; (mov r8, r8)
 8000460:	50000400 	.word	0x50000400

08000464 <sendCommand>:

// still ripped but now im changing it
void sendCommand(uint8_t cmd, uint8_t *args, uint16_t numArgs, SPI_HandleTypeDef *hspi) {
 8000464:	b580      	push	{r7, lr}
 8000466:	b084      	sub	sp, #16
 8000468:	af00      	add	r7, sp, #0
 800046a:	60b9      	str	r1, [r7, #8]
 800046c:	0011      	movs	r1, r2
 800046e:	607b      	str	r3, [r7, #4]
 8000470:	230f      	movs	r3, #15
 8000472:	18fb      	adds	r3, r7, r3
 8000474:	1c02      	adds	r2, r0, #0
 8000476:	701a      	strb	r2, [r3, #0]
 8000478:	230c      	movs	r3, #12
 800047a:	18fb      	adds	r3, r7, r3
 800047c:	1c0a      	adds	r2, r1, #0
 800047e:	801a      	strh	r2, [r3, #0]
	while (HAL_SPI_GetState(hspi) == HAL_SPI_STATE_BUSY_TX);		// block next transfer request while DMA transfer is ongoing
 8000480:	46c0      	nop			; (mov r8, r8)
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	0018      	movs	r0, r3
 8000486:	f006 fb39 	bl	8006afc <HAL_SPI_GetState>
 800048a:	0003      	movs	r3, r0
 800048c:	2b03      	cmp	r3, #3
 800048e:	d0f8      	beq.n	8000482 <sendCommand+0x1e>
	SPI_CS_LOW();	// chip select
 8000490:	f7ff ffb0 	bl	80003f4 <SPI_CS_LOW>

	SPI_DC_LOW();	// command mode
 8000494:	f7ff ffca 	bl	800042c <SPI_DC_LOW>
	HAL_SPI_Transmit(hspi, &cmd, 1, 1000);	// not using DMA bc it's only 1 byte
 8000498:	23fa      	movs	r3, #250	; 0xfa
 800049a:	009b      	lsls	r3, r3, #2
 800049c:	220f      	movs	r2, #15
 800049e:	18b9      	adds	r1, r7, r2
 80004a0:	6878      	ldr	r0, [r7, #4]
 80004a2:	2201      	movs	r2, #1
 80004a4:	f006 f848 	bl	8006538 <HAL_SPI_Transmit>

	SPI_DC_HIGH();	// data mode
 80004a8:	f7ff ffce 	bl	8000448 <SPI_DC_HIGH>
	if (numArgs) {
 80004ac:	230c      	movs	r3, #12
 80004ae:	18fb      	adds	r3, r7, r3
 80004b0:	881b      	ldrh	r3, [r3, #0]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d007      	beq.n	80004c6 <sendCommand+0x62>
		HAL_SPI_Transmit_IT(hspi, args, numArgs);
 80004b6:	230c      	movs	r3, #12
 80004b8:	18fb      	adds	r3, r7, r3
 80004ba:	881a      	ldrh	r2, [r3, #0]
 80004bc:	68b9      	ldr	r1, [r7, #8]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	0018      	movs	r0, r3
 80004c2:	f006 f987 	bl	80067d4 <HAL_SPI_Transmit_IT>
//		HAL_SPI_Transmit_DMA(hspi, args, numArgs);
	}

//	SPI_CS_HIGH();	// chip select disable
}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	46bd      	mov	sp, r7
 80004ca:	b004      	add	sp, #16
 80004cc:	bd80      	pop	{r7, pc}
	...

080004d0 <HAL_SPI_TxCpltCallback>:

// DMA callback on transfer compelete
// using only for sending data, but not commands
// dont send request when transfer is ongoing
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(CS_GPIO, CS_PIN) == GPIO_PIN_RESET) SPI_CS_HIGH();	// chip select disable
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <HAL_SPI_TxCpltCallback+0x24>)
 80004da:	2180      	movs	r1, #128	; 0x80
 80004dc:	0018      	movs	r0, r3
 80004de:	f004 f829 	bl	8004534 <HAL_GPIO_ReadPin>
 80004e2:	1e03      	subs	r3, r0, #0
 80004e4:	d101      	bne.n	80004ea <HAL_SPI_TxCpltCallback+0x1a>
 80004e6:	f7ff ff93 	bl	8000410 <SPI_CS_HIGH>
}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	46bd      	mov	sp, r7
 80004ee:	b002      	add	sp, #8
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	50000800 	.word	0x50000800

080004f8 <displayInit>:

// array parser heavily based on Adafruit library code
void displayInit(uint8_t *args, SPI_HandleTypeDef *hspi) {
 80004f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004fa:	b085      	sub	sp, #20
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	6039      	str	r1, [r7, #0]
	uint8_t  numCommands, cmd, numArgs;
	uint16_t ms;
	uint8_t index = 0;
 8000502:	220b      	movs	r2, #11
 8000504:	0011      	movs	r1, r2
 8000506:	18bb      	adds	r3, r7, r2
 8000508:	2200      	movs	r2, #0
 800050a:	701a      	strb	r2, [r3, #0]
	uint8_t data;

	numCommands = args[index++];   // Number of commands to follow
 800050c:	000a      	movs	r2, r1
 800050e:	18bb      	adds	r3, r7, r2
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	18ba      	adds	r2, r7, r2
 8000514:	1c59      	adds	r1, r3, #1
 8000516:	7011      	strb	r1, [r2, #0]
 8000518:	001a      	movs	r2, r3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	189a      	adds	r2, r3, r2
 800051e:	230f      	movs	r3, #15
 8000520:	18fb      	adds	r3, r7, r3
 8000522:	7812      	ldrb	r2, [r2, #0]
 8000524:	701a      	strb	r2, [r3, #0]
	while(numCommands--) {                 // For each command...
 8000526:	e05e      	b.n	80005e6 <displayInit+0xee>
		cmd = args[index++];         // Read command
 8000528:	200b      	movs	r0, #11
 800052a:	183b      	adds	r3, r7, r0
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	183a      	adds	r2, r7, r0
 8000530:	1c59      	adds	r1, r3, #1
 8000532:	7011      	strb	r1, [r2, #0]
 8000534:	001a      	movs	r2, r3
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	189a      	adds	r2, r3, r2
 800053a:	230a      	movs	r3, #10
 800053c:	18fb      	adds	r3, r7, r3
 800053e:	7812      	ldrb	r2, [r2, #0]
 8000540:	701a      	strb	r2, [r3, #0]
		numArgs  = args[index++];    // Number of args to follow
 8000542:	183b      	adds	r3, r7, r0
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	183a      	adds	r2, r7, r0
 8000548:	1c59      	adds	r1, r3, #1
 800054a:	7011      	strb	r1, [r2, #0]
 800054c:	001a      	movs	r2, r3
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	189a      	adds	r2, r3, r2
 8000552:	2609      	movs	r6, #9
 8000554:	19bb      	adds	r3, r7, r6
 8000556:	7812      	ldrb	r2, [r2, #0]
 8000558:	701a      	strb	r2, [r3, #0]
		ms       = numArgs & ST_CMD_DELAY;   // If hibit set, delay follows args
 800055a:	19bb      	adds	r3, r7, r6
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	b29a      	uxth	r2, r3
 8000560:	210c      	movs	r1, #12
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2180      	movs	r1, #128	; 0x80
 8000566:	400a      	ands	r2, r1
 8000568:	801a      	strh	r2, [r3, #0]
		numArgs &= ~ST_CMD_DELAY;            // Mask out delay bit
 800056a:	19bb      	adds	r3, r7, r6
 800056c:	19ba      	adds	r2, r7, r6
 800056e:	7812      	ldrb	r2, [r2, #0]
 8000570:	217f      	movs	r1, #127	; 0x7f
 8000572:	400a      	ands	r2, r1
 8000574:	701a      	strb	r2, [r3, #0]
		sendCommand(cmd, &args[index], numArgs, hspi);
 8000576:	0005      	movs	r5, r0
 8000578:	183b      	adds	r3, r7, r0
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	687a      	ldr	r2, [r7, #4]
 800057e:	18d1      	adds	r1, r2, r3
 8000580:	19bb      	adds	r3, r7, r6
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	b29a      	uxth	r2, r3
 8000586:	683c      	ldr	r4, [r7, #0]
 8000588:	230a      	movs	r3, #10
 800058a:	18fb      	adds	r3, r7, r3
 800058c:	7818      	ldrb	r0, [r3, #0]
 800058e:	0023      	movs	r3, r4
 8000590:	f7ff ff68 	bl	8000464 <sendCommand>
		index += numArgs;
 8000594:	0028      	movs	r0, r5
 8000596:	183b      	adds	r3, r7, r0
 8000598:	1839      	adds	r1, r7, r0
 800059a:	19ba      	adds	r2, r7, r6
 800059c:	7809      	ldrb	r1, [r1, #0]
 800059e:	7812      	ldrb	r2, [r2, #0]
 80005a0:	188a      	adds	r2, r1, r2
 80005a2:	701a      	strb	r2, [r3, #0]

		if(ms) {
 80005a4:	210c      	movs	r1, #12
 80005a6:	187b      	adds	r3, r7, r1
 80005a8:	881b      	ldrh	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d01b      	beq.n	80005e6 <displayInit+0xee>
			ms = args[index++]; // Read post-command delay time (ms)
 80005ae:	220b      	movs	r2, #11
 80005b0:	18bb      	adds	r3, r7, r2
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	18ba      	adds	r2, r7, r2
 80005b6:	1c59      	adds	r1, r3, #1
 80005b8:	7011      	strb	r1, [r2, #0]
 80005ba:	001a      	movs	r2, r3
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	189b      	adds	r3, r3, r2
 80005c0:	781a      	ldrb	r2, [r3, #0]
 80005c2:	210c      	movs	r1, #12
 80005c4:	187b      	adds	r3, r7, r1
 80005c6:	801a      	strh	r2, [r3, #0]
			if(ms == 255) ms = 500;     // If 255, delay for 500 ms
 80005c8:	187b      	adds	r3, r7, r1
 80005ca:	881b      	ldrh	r3, [r3, #0]
 80005cc:	2bff      	cmp	r3, #255	; 0xff
 80005ce:	d104      	bne.n	80005da <displayInit+0xe2>
 80005d0:	230c      	movs	r3, #12
 80005d2:	18fb      	adds	r3, r7, r3
 80005d4:	22fa      	movs	r2, #250	; 0xfa
 80005d6:	0052      	lsls	r2, r2, #1
 80005d8:	801a      	strh	r2, [r3, #0]
			HAL_Delay(ms);
 80005da:	230c      	movs	r3, #12
 80005dc:	18fb      	adds	r3, r7, r3
 80005de:	881b      	ldrh	r3, [r3, #0]
 80005e0:	0018      	movs	r0, r3
 80005e2:	f003 f991 	bl	8003908 <HAL_Delay>
	while(numCommands--) {                 // For each command...
 80005e6:	220f      	movs	r2, #15
 80005e8:	18bb      	adds	r3, r7, r2
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	18ba      	adds	r2, r7, r2
 80005ee:	1e59      	subs	r1, r3, #1
 80005f0:	7011      	strb	r1, [r2, #0]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d198      	bne.n	8000528 <displayInit+0x30>
		}
	}

	// note: this line may be doing more work than I think
	// (hard to read in datasheet)
	data = 0xC0;
 80005f6:	2108      	movs	r1, #8
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	22c0      	movs	r2, #192	; 0xc0
 80005fc:	701a      	strb	r2, [r3, #0]
	sendCommand(ST77XX_MADCTL, &data, 1, hspi);
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	1879      	adds	r1, r7, r1
 8000602:	2201      	movs	r2, #1
 8000604:	2036      	movs	r0, #54	; 0x36
 8000606:	f7ff ff2d 	bl	8000464 <sendCommand>
}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	46bd      	mov	sp, r7
 800060e:	b005      	add	sp, #20
 8000610:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000614 <TFT_startup>:

void TFT_startup(SPI_HandleTypeDef *hspi) {
 8000614:	b590      	push	{r4, r7, lr}
 8000616:	b0a3      	sub	sp, #140	; 0x8c
 8000618:	af02      	add	r7, sp, #8
 800061a:	6078      	str	r0, [r7, #4]
	// startup sequence: rcmd1->rcmd2red->rcmd3
	uint8_t initCommands[] = {
 800061c:	240c      	movs	r4, #12
 800061e:	193a      	adds	r2, r7, r4
 8000620:	4b14      	ldr	r3, [pc, #80]	; (8000674 <TFT_startup+0x60>)
 8000622:	0010      	movs	r0, r2
 8000624:	0019      	movs	r1, r3
 8000626:	2371      	movs	r3, #113	; 0x71
 8000628:	001a      	movs	r2, r3
 800062a:	f007 f91f 	bl	800786c <memcpy>
			10,                           //     10 ms delay
		ST77XX_DISPON,    ST_CMD_DELAY, //  4: Main screen turn on, no args w/delay
			100	                        //     100 ms delay
	};

	displayInit(initCommands, hspi);
 800062e:	687a      	ldr	r2, [r7, #4]
 8000630:	193b      	adds	r3, r7, r4
 8000632:	0011      	movs	r1, r2
 8000634:	0018      	movs	r0, r3
 8000636:	f7ff ff5f 	bl	80004f8 <displayInit>
	setAddrWindow(0, 0, WIDTH, HEIGHT, hspi);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	23a0      	movs	r3, #160	; 0xa0
 8000640:	2280      	movs	r2, #128	; 0x80
 8000642:	2100      	movs	r1, #0
 8000644:	2000      	movs	r0, #0
 8000646:	f000 f821 	bl	800068c <setAddrWindow>

	// set the global variables
	cursorX = 0;
 800064a:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <TFT_startup+0x64>)
 800064c:	2200      	movs	r2, #0
 800064e:	701a      	strb	r2, [r3, #0]
	cursorY = 0;
 8000650:	4b0a      	ldr	r3, [pc, #40]	; (800067c <TFT_startup+0x68>)
 8000652:	2200      	movs	r2, #0
 8000654:	701a      	strb	r2, [r3, #0]
	textSize = 1;
 8000656:	4b0a      	ldr	r3, [pc, #40]	; (8000680 <TFT_startup+0x6c>)
 8000658:	2201      	movs	r2, #1
 800065a:	701a      	strb	r2, [r3, #0]
	textColor = ST77XX_BLACK;
 800065c:	4b09      	ldr	r3, [pc, #36]	; (8000684 <TFT_startup+0x70>)
 800065e:	2200      	movs	r2, #0
 8000660:	801a      	strh	r2, [r3, #0]
	bg = ST77XX_WHITE;
 8000662:	4b09      	ldr	r3, [pc, #36]	; (8000688 <TFT_startup+0x74>)
 8000664:	2201      	movs	r2, #1
 8000666:	4252      	negs	r2, r2
 8000668:	801a      	strh	r2, [r3, #0]
}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	46bd      	mov	sp, r7
 800066e:	b021      	add	sp, #132	; 0x84
 8000670:	bd90      	pop	{r4, r7, pc}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	080080a4 	.word	0x080080a4
 8000678:	200000d8 	.word	0x200000d8
 800067c:	200000d9 	.word	0x200000d9
 8000680:	200000da 	.word	0x200000da
 8000684:	200000dc 	.word	0x200000dc
 8000688:	200000de 	.word	0x200000de

0800068c <setAddrWindow>:

// draw something: set addr window -> write to ram memory
// sets specific area on display to write pixels to
// x and y for upper left corner, w for width, h for height
void setAddrWindow(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SPI_HandleTypeDef *hspi) {
 800068c:	b5b0      	push	{r4, r5, r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	0005      	movs	r5, r0
 8000694:	000c      	movs	r4, r1
 8000696:	0010      	movs	r0, r2
 8000698:	0019      	movs	r1, r3
 800069a:	1dbb      	adds	r3, r7, #6
 800069c:	1c2a      	adds	r2, r5, #0
 800069e:	801a      	strh	r2, [r3, #0]
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	1c22      	adds	r2, r4, #0
 80006a4:	801a      	strh	r2, [r3, #0]
 80006a6:	1cbb      	adds	r3, r7, #2
 80006a8:	1c02      	adds	r2, r0, #0
 80006aa:	801a      	strh	r2, [r3, #0]
 80006ac:	003b      	movs	r3, r7
 80006ae:	1c0a      	adds	r2, r1, #0
 80006b0:	801a      	strh	r2, [r3, #0]
	// not really needed for our display
	x += _xstart;
 80006b2:	1dbb      	adds	r3, r7, #6
 80006b4:	1dba      	adds	r2, r7, #6
 80006b6:	8812      	ldrh	r2, [r2, #0]
 80006b8:	801a      	strh	r2, [r3, #0]
	y += _ystart;
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	1d3a      	adds	r2, r7, #4
 80006be:	8812      	ldrh	r2, [r2, #0]
 80006c0:	801a      	strh	r2, [r3, #0]

	uint8_t temp[4];
	temp[0] = (x & (0xFF00)) >> 8;
 80006c2:	1dbb      	adds	r3, r7, #6
 80006c4:	881b      	ldrh	r3, [r3, #0]
 80006c6:	0a1b      	lsrs	r3, r3, #8
 80006c8:	b29b      	uxth	r3, r3
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	210c      	movs	r1, #12
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	701a      	strb	r2, [r3, #0]
	temp[1] = x & (0xFF);
 80006d2:	1dbb      	adds	r3, r7, #6
 80006d4:	881b      	ldrh	r3, [r3, #0]
 80006d6:	b2da      	uxtb	r2, r3
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	705a      	strb	r2, [r3, #1]
	temp[2] = ((x+w-1) & (0xFF00)) >> 8;
 80006dc:	1dbb      	adds	r3, r7, #6
 80006de:	881a      	ldrh	r2, [r3, #0]
 80006e0:	1cbb      	adds	r3, r7, #2
 80006e2:	881b      	ldrh	r3, [r3, #0]
 80006e4:	18d3      	adds	r3, r2, r3
 80006e6:	3b01      	subs	r3, #1
 80006e8:	121b      	asrs	r3, r3, #8
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	709a      	strb	r2, [r3, #2]
	temp[3] = (x+w-1) & (0xFF);
 80006f0:	1dbb      	adds	r3, r7, #6
 80006f2:	881b      	ldrh	r3, [r3, #0]
 80006f4:	b2da      	uxtb	r2, r3
 80006f6:	1cbb      	adds	r3, r7, #2
 80006f8:	881b      	ldrh	r3, [r3, #0]
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	18d3      	adds	r3, r2, r3
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	3b01      	subs	r3, #1
 8000702:	b2da      	uxtb	r2, r3
 8000704:	187b      	adds	r3, r7, r1
 8000706:	70da      	strb	r2, [r3, #3]
	sendCommand(ST77XX_CASET, temp, 4, hspi);
 8000708:	6a3b      	ldr	r3, [r7, #32]
 800070a:	000c      	movs	r4, r1
 800070c:	1879      	adds	r1, r7, r1
 800070e:	2204      	movs	r2, #4
 8000710:	202a      	movs	r0, #42	; 0x2a
 8000712:	f7ff fea7 	bl	8000464 <sendCommand>

	temp[0] = (y & (0xFF00)) >> 8;
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	881b      	ldrh	r3, [r3, #0]
 800071a:	0a1b      	lsrs	r3, r3, #8
 800071c:	b29b      	uxth	r3, r3
 800071e:	b2da      	uxtb	r2, r3
 8000720:	0021      	movs	r1, r4
 8000722:	187b      	adds	r3, r7, r1
 8000724:	701a      	strb	r2, [r3, #0]
	temp[1] = y & (0xFF);
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	881b      	ldrh	r3, [r3, #0]
 800072a:	b2da      	uxtb	r2, r3
 800072c:	187b      	adds	r3, r7, r1
 800072e:	705a      	strb	r2, [r3, #1]
	temp[2] = ((y+h-1) & (0xFF00)) >> 8;
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	881a      	ldrh	r2, [r3, #0]
 8000734:	003b      	movs	r3, r7
 8000736:	881b      	ldrh	r3, [r3, #0]
 8000738:	18d3      	adds	r3, r2, r3
 800073a:	3b01      	subs	r3, #1
 800073c:	121b      	asrs	r3, r3, #8
 800073e:	b2da      	uxtb	r2, r3
 8000740:	187b      	adds	r3, r7, r1
 8000742:	709a      	strb	r2, [r3, #2]
	temp[3] = (y+h-1) & (0x00FF);
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	881b      	ldrh	r3, [r3, #0]
 8000748:	b2da      	uxtb	r2, r3
 800074a:	003b      	movs	r3, r7
 800074c:	881b      	ldrh	r3, [r3, #0]
 800074e:	b2db      	uxtb	r3, r3
 8000750:	18d3      	adds	r3, r2, r3
 8000752:	b2db      	uxtb	r3, r3
 8000754:	3b01      	subs	r3, #1
 8000756:	b2da      	uxtb	r2, r3
 8000758:	187b      	adds	r3, r7, r1
 800075a:	70da      	strb	r2, [r3, #3]
	sendCommand(ST77XX_RASET, temp, 4, hspi);
 800075c:	6a3b      	ldr	r3, [r7, #32]
 800075e:	1879      	adds	r1, r7, r1
 8000760:	2204      	movs	r2, #4
 8000762:	202b      	movs	r0, #43	; 0x2b
 8000764:	f7ff fe7e 	bl	8000464 <sendCommand>
}
 8000768:	46c0      	nop			; (mov r8, r8)
 800076a:	46bd      	mov	sp, r7
 800076c:	b004      	add	sp, #16
 800076e:	bdb0      	pop	{r4, r5, r7, pc}

08000770 <colorFixer>:
// 8-bit spi bus wants msb first; in array, lowest index is sent first
// because L4 is little-endian
//   for 16-bit value, it sends lower byte before upper byte
//   resulting in device thinking lower byte is upper byte
// this switches byte order around
uint16_t colorFixer(uint16_t color) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
 8000776:	0002      	movs	r2, r0
 8000778:	1dbb      	adds	r3, r7, #6
 800077a:	801a      	strh	r2, [r3, #0]
	uint8_t a = color & 0xFF;
 800077c:	210f      	movs	r1, #15
 800077e:	187b      	adds	r3, r7, r1
 8000780:	1dba      	adds	r2, r7, #6
 8000782:	8812      	ldrh	r2, [r2, #0]
 8000784:	701a      	strb	r2, [r3, #0]
	uint8_t b = (color & 0xFF00) >> 8;
 8000786:	1dbb      	adds	r3, r7, #6
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	0a1b      	lsrs	r3, r3, #8
 800078c:	b29a      	uxth	r2, r3
 800078e:	200e      	movs	r0, #14
 8000790:	183b      	adds	r3, r7, r0
 8000792:	701a      	strb	r2, [r3, #0]
	uint16_t ret = (a << 8) | b;
 8000794:	187b      	adds	r3, r7, r1
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	021b      	lsls	r3, r3, #8
 800079a:	b21a      	sxth	r2, r3
 800079c:	183b      	adds	r3, r7, r0
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	b21b      	sxth	r3, r3
 80007a2:	4313      	orrs	r3, r2
 80007a4:	b21a      	sxth	r2, r3
 80007a6:	210c      	movs	r1, #12
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	801a      	strh	r2, [r3, #0]

	return ret;
 80007ac:	187b      	adds	r3, r7, r1
 80007ae:	881b      	ldrh	r3, [r3, #0]
}
 80007b0:	0018      	movs	r0, r3
 80007b2:	46bd      	mov	sp, r7
 80007b4:	b004      	add	sp, #16
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <drawHLine>:
	setAddrWindow(x, y, 1, 1, hspi);
	uint16_t tempColor = colorFixer(color);		// else we're using address of something passed by value
	sendCommand(ST77XX_RAMWR, &tempColor, 2, hspi);
}

void drawHLine(uint8_t x, uint8_t y, uint8_t size, uint16_t color, SPI_HandleTypeDef *hspi) {
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	b091      	sub	sp, #68	; 0x44
 80007bc:	af02      	add	r7, sp, #8
 80007be:	000c      	movs	r4, r1
 80007c0:	0016      	movs	r6, r2
 80007c2:	0019      	movs	r1, r3
 80007c4:	2327      	movs	r3, #39	; 0x27
 80007c6:	18fa      	adds	r2, r7, r3
 80007c8:	1c03      	adds	r3, r0, #0
 80007ca:	7013      	strb	r3, [r2, #0]
 80007cc:	2326      	movs	r3, #38	; 0x26
 80007ce:	18fb      	adds	r3, r7, r3
 80007d0:	1c22      	adds	r2, r4, #0
 80007d2:	701a      	strb	r2, [r3, #0]
 80007d4:	2325      	movs	r3, #37	; 0x25
 80007d6:	18fb      	adds	r3, r7, r3
 80007d8:	1c32      	adds	r2, r6, #0
 80007da:	701a      	strb	r2, [r3, #0]
 80007dc:	2322      	movs	r3, #34	; 0x22
 80007de:	18fb      	adds	r3, r7, r3
 80007e0:	1c0a      	adds	r2, r1, #0
 80007e2:	801a      	strh	r2, [r3, #0]
 80007e4:	466b      	mov	r3, sp
 80007e6:	001e      	movs	r6, r3
	// bounds checking
	if (x < 0) x = 0;						// don't set x out of bounds
	if (x > WIDTH) x = WIDTH;
 80007e8:	2327      	movs	r3, #39	; 0x27
 80007ea:	18fb      	adds	r3, r7, r3
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	2b80      	cmp	r3, #128	; 0x80
 80007f0:	d903      	bls.n	80007fa <drawHLine+0x42>
 80007f2:	2327      	movs	r3, #39	; 0x27
 80007f4:	18fb      	adds	r3, r7, r3
 80007f6:	2280      	movs	r2, #128	; 0x80
 80007f8:	701a      	strb	r2, [r3, #0]
	if (x+size > WIDTH) size = WIDTH-x;		// don't set size so line draws out of bounds
 80007fa:	2327      	movs	r3, #39	; 0x27
 80007fc:	18fb      	adds	r3, r7, r3
 80007fe:	781a      	ldrb	r2, [r3, #0]
 8000800:	2325      	movs	r3, #37	; 0x25
 8000802:	18fb      	adds	r3, r7, r3
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	18d3      	adds	r3, r2, r3
 8000808:	2b80      	cmp	r3, #128	; 0x80
 800080a:	dd08      	ble.n	800081e <drawHLine+0x66>
 800080c:	2325      	movs	r3, #37	; 0x25
 800080e:	18fb      	adds	r3, r7, r3
 8000810:	2227      	movs	r2, #39	; 0x27
 8000812:	18ba      	adds	r2, r7, r2
 8000814:	7812      	ldrb	r2, [r2, #0]
 8000816:	2180      	movs	r1, #128	; 0x80
 8000818:	4249      	negs	r1, r1
 800081a:	1a8a      	subs	r2, r1, r2
 800081c:	701a      	strb	r2, [r3, #0]
	if (x+size < 0) size = 0-x;
	if ((y > HEIGHT) || (y < 0)) return;	// don't draw if y is out of bounds
 800081e:	2326      	movs	r3, #38	; 0x26
 8000820:	18fb      	adds	r3, r7, r3
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	2ba0      	cmp	r3, #160	; 0xa0
 8000826:	d868      	bhi.n	80008fa <drawHLine+0x142>

	setAddrWindow(x, y, size, 1, hspi);
 8000828:	2327      	movs	r3, #39	; 0x27
 800082a:	18fb      	adds	r3, r7, r3
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	b298      	uxth	r0, r3
 8000830:	2326      	movs	r3, #38	; 0x26
 8000832:	18fb      	adds	r3, r7, r3
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	b299      	uxth	r1, r3
 8000838:	2325      	movs	r3, #37	; 0x25
 800083a:	18fb      	adds	r3, r7, r3
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	b29a      	uxth	r2, r3
 8000840:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000842:	9300      	str	r3, [sp, #0]
 8000844:	2301      	movs	r3, #1
 8000846:	f7ff ff21 	bl	800068c <setAddrWindow>
	uint16_t colors[size];
 800084a:	2325      	movs	r3, #37	; 0x25
 800084c:	18fb      	adds	r3, r7, r3
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	001a      	movs	r2, r3
 8000852:	3a01      	subs	r2, #1
 8000854:	633a      	str	r2, [r7, #48]	; 0x30
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	2200      	movs	r2, #0
 800085a:	60fa      	str	r2, [r7, #12]
 800085c:	68b8      	ldr	r0, [r7, #8]
 800085e:	68f9      	ldr	r1, [r7, #12]
 8000860:	0002      	movs	r2, r0
 8000862:	0f12      	lsrs	r2, r2, #28
 8000864:	000c      	movs	r4, r1
 8000866:	0124      	lsls	r4, r4, #4
 8000868:	61fc      	str	r4, [r7, #28]
 800086a:	69fc      	ldr	r4, [r7, #28]
 800086c:	4314      	orrs	r4, r2
 800086e:	61fc      	str	r4, [r7, #28]
 8000870:	0002      	movs	r2, r0
 8000872:	0112      	lsls	r2, r2, #4
 8000874:	61ba      	str	r2, [r7, #24]
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	2200      	movs	r2, #0
 800087a:	607a      	str	r2, [r7, #4]
 800087c:	6838      	ldr	r0, [r7, #0]
 800087e:	6879      	ldr	r1, [r7, #4]
 8000880:	0002      	movs	r2, r0
 8000882:	0f12      	lsrs	r2, r2, #28
 8000884:	000c      	movs	r4, r1
 8000886:	0124      	lsls	r4, r4, #4
 8000888:	617c      	str	r4, [r7, #20]
 800088a:	697c      	ldr	r4, [r7, #20]
 800088c:	4314      	orrs	r4, r2
 800088e:	617c      	str	r4, [r7, #20]
 8000890:	0002      	movs	r2, r0
 8000892:	0112      	lsls	r2, r2, #4
 8000894:	613a      	str	r2, [r7, #16]
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	3301      	adds	r3, #1
 800089a:	3307      	adds	r3, #7
 800089c:	08db      	lsrs	r3, r3, #3
 800089e:	00db      	lsls	r3, r3, #3
 80008a0:	466a      	mov	r2, sp
 80008a2:	1ad3      	subs	r3, r2, r3
 80008a4:	469d      	mov	sp, r3
 80008a6:	ab02      	add	r3, sp, #8
 80008a8:	3301      	adds	r3, #1
 80008aa:	085b      	lsrs	r3, r3, #1
 80008ac:	005b      	lsls	r3, r3, #1
 80008ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i < size; i++) {		// better way to make array of 1 color; SPI without moving address of sent?
 80008b0:	2300      	movs	r3, #0
 80008b2:	637b      	str	r3, [r7, #52]	; 0x34
 80008b4:	e00e      	b.n	80008d4 <drawHLine+0x11c>
		colors[i] = colorFixer(color);
 80008b6:	2322      	movs	r3, #34	; 0x22
 80008b8:	18fb      	adds	r3, r7, r3
 80008ba:	881b      	ldrh	r3, [r3, #0]
 80008bc:	0018      	movs	r0, r3
 80008be:	f7ff ff57 	bl	8000770 <colorFixer>
 80008c2:	0003      	movs	r3, r0
 80008c4:	0019      	movs	r1, r3
 80008c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80008ca:	0052      	lsls	r2, r2, #1
 80008cc:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < size; i++) {		// better way to make array of 1 color; SPI without moving address of sent?
 80008ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008d0:	3301      	adds	r3, #1
 80008d2:	637b      	str	r3, [r7, #52]	; 0x34
 80008d4:	2325      	movs	r3, #37	; 0x25
 80008d6:	18fb      	adds	r3, r7, r3
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80008dc:	429a      	cmp	r2, r3
 80008de:	dbea      	blt.n	80008b6 <drawHLine+0xfe>
//		colors[i] = color;
	}

	sendCommand(ST77XX_RAMWR, colors, size*2, hspi);
 80008e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80008e2:	2325      	movs	r3, #37	; 0x25
 80008e4:	18fb      	adds	r3, r7, r3
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	18db      	adds	r3, r3, r3
 80008ec:	b29a      	uxth	r2, r3
 80008ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80008f0:	202c      	movs	r0, #44	; 0x2c
 80008f2:	f7ff fdb7 	bl	8000464 <sendCommand>
 80008f6:	46b5      	mov	sp, r6
 80008f8:	e001      	b.n	80008fe <drawHLine+0x146>
	if ((y > HEIGHT) || (y < 0)) return;	// don't draw if y is out of bounds
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	46b5      	mov	sp, r6
}
 80008fe:	46bd      	mov	sp, r7
 8000900:	b00f      	add	sp, #60	; 0x3c
 8000902:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000904 <drawVLine>:

void drawVLine(uint8_t x, uint8_t y, uint8_t size, uint16_t color, SPI_HandleTypeDef *hspi) {
 8000904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000906:	b091      	sub	sp, #68	; 0x44
 8000908:	af02      	add	r7, sp, #8
 800090a:	000c      	movs	r4, r1
 800090c:	0016      	movs	r6, r2
 800090e:	0019      	movs	r1, r3
 8000910:	2327      	movs	r3, #39	; 0x27
 8000912:	18fa      	adds	r2, r7, r3
 8000914:	1c03      	adds	r3, r0, #0
 8000916:	7013      	strb	r3, [r2, #0]
 8000918:	2326      	movs	r3, #38	; 0x26
 800091a:	18fb      	adds	r3, r7, r3
 800091c:	1c22      	adds	r2, r4, #0
 800091e:	701a      	strb	r2, [r3, #0]
 8000920:	2325      	movs	r3, #37	; 0x25
 8000922:	18fb      	adds	r3, r7, r3
 8000924:	1c32      	adds	r2, r6, #0
 8000926:	701a      	strb	r2, [r3, #0]
 8000928:	2322      	movs	r3, #34	; 0x22
 800092a:	18fb      	adds	r3, r7, r3
 800092c:	1c0a      	adds	r2, r1, #0
 800092e:	801a      	strh	r2, [r3, #0]
 8000930:	466b      	mov	r3, sp
 8000932:	001e      	movs	r6, r3
	// bounds checking
	if (y < 0) y = 0;						// don't set x out of bounds
	if (y > HEIGHT) y = HEIGHT;
 8000934:	2326      	movs	r3, #38	; 0x26
 8000936:	18fb      	adds	r3, r7, r3
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2ba0      	cmp	r3, #160	; 0xa0
 800093c:	d903      	bls.n	8000946 <drawVLine+0x42>
 800093e:	2326      	movs	r3, #38	; 0x26
 8000940:	18fb      	adds	r3, r7, r3
 8000942:	22a0      	movs	r2, #160	; 0xa0
 8000944:	701a      	strb	r2, [r3, #0]
	if (y+size > HEIGHT) size = HEIGHT-y;	// don't set size so line draws out of bounds
 8000946:	2326      	movs	r3, #38	; 0x26
 8000948:	18fb      	adds	r3, r7, r3
 800094a:	781a      	ldrb	r2, [r3, #0]
 800094c:	2325      	movs	r3, #37	; 0x25
 800094e:	18fb      	adds	r3, r7, r3
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	18d3      	adds	r3, r2, r3
 8000954:	2ba0      	cmp	r3, #160	; 0xa0
 8000956:	dd08      	ble.n	800096a <drawVLine+0x66>
 8000958:	2325      	movs	r3, #37	; 0x25
 800095a:	18fb      	adds	r3, r7, r3
 800095c:	2226      	movs	r2, #38	; 0x26
 800095e:	18ba      	adds	r2, r7, r2
 8000960:	7812      	ldrb	r2, [r2, #0]
 8000962:	2160      	movs	r1, #96	; 0x60
 8000964:	4249      	negs	r1, r1
 8000966:	1a8a      	subs	r2, r1, r2
 8000968:	701a      	strb	r2, [r3, #0]
	if (y+size < 0) size = 0-y;
	if ((x > WIDTH) || (x < 0)) return;		// don't draw if x is out of bounds
 800096a:	2327      	movs	r3, #39	; 0x27
 800096c:	18fb      	adds	r3, r7, r3
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	2b80      	cmp	r3, #128	; 0x80
 8000972:	d869      	bhi.n	8000a48 <drawVLine+0x144>

	setAddrWindow(x, y, 1, size, hspi);
 8000974:	2327      	movs	r3, #39	; 0x27
 8000976:	18fb      	adds	r3, r7, r3
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	b298      	uxth	r0, r3
 800097c:	2326      	movs	r3, #38	; 0x26
 800097e:	18fb      	adds	r3, r7, r3
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	b299      	uxth	r1, r3
 8000984:	2325      	movs	r3, #37	; 0x25
 8000986:	18fb      	adds	r3, r7, r3
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	b29a      	uxth	r2, r3
 800098c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	0013      	movs	r3, r2
 8000992:	2201      	movs	r2, #1
 8000994:	f7ff fe7a 	bl	800068c <setAddrWindow>
	uint16_t colors[size];
 8000998:	2325      	movs	r3, #37	; 0x25
 800099a:	18fb      	adds	r3, r7, r3
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	001a      	movs	r2, r3
 80009a0:	3a01      	subs	r2, #1
 80009a2:	633a      	str	r2, [r7, #48]	; 0x30
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	2200      	movs	r2, #0
 80009a8:	60fa      	str	r2, [r7, #12]
 80009aa:	68b8      	ldr	r0, [r7, #8]
 80009ac:	68f9      	ldr	r1, [r7, #12]
 80009ae:	0002      	movs	r2, r0
 80009b0:	0f12      	lsrs	r2, r2, #28
 80009b2:	000c      	movs	r4, r1
 80009b4:	0124      	lsls	r4, r4, #4
 80009b6:	61fc      	str	r4, [r7, #28]
 80009b8:	69fc      	ldr	r4, [r7, #28]
 80009ba:	4314      	orrs	r4, r2
 80009bc:	61fc      	str	r4, [r7, #28]
 80009be:	0002      	movs	r2, r0
 80009c0:	0112      	lsls	r2, r2, #4
 80009c2:	61ba      	str	r2, [r7, #24]
 80009c4:	603b      	str	r3, [r7, #0]
 80009c6:	2200      	movs	r2, #0
 80009c8:	607a      	str	r2, [r7, #4]
 80009ca:	6838      	ldr	r0, [r7, #0]
 80009cc:	6879      	ldr	r1, [r7, #4]
 80009ce:	0002      	movs	r2, r0
 80009d0:	0f12      	lsrs	r2, r2, #28
 80009d2:	000c      	movs	r4, r1
 80009d4:	0124      	lsls	r4, r4, #4
 80009d6:	617c      	str	r4, [r7, #20]
 80009d8:	697c      	ldr	r4, [r7, #20]
 80009da:	4314      	orrs	r4, r2
 80009dc:	617c      	str	r4, [r7, #20]
 80009de:	0002      	movs	r2, r0
 80009e0:	0112      	lsls	r2, r2, #4
 80009e2:	613a      	str	r2, [r7, #16]
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	3301      	adds	r3, #1
 80009e8:	3307      	adds	r3, #7
 80009ea:	08db      	lsrs	r3, r3, #3
 80009ec:	00db      	lsls	r3, r3, #3
 80009ee:	466a      	mov	r2, sp
 80009f0:	1ad3      	subs	r3, r2, r3
 80009f2:	469d      	mov	sp, r3
 80009f4:	ab02      	add	r3, sp, #8
 80009f6:	3301      	adds	r3, #1
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i < size; i++) {		// there has to be a better way to make array of 1 color
 80009fe:	2300      	movs	r3, #0
 8000a00:	637b      	str	r3, [r7, #52]	; 0x34
 8000a02:	e00e      	b.n	8000a22 <drawVLine+0x11e>
											// SPI without moving address of sent buffer?
		colors[i] = colorFixer(color);
 8000a04:	2322      	movs	r3, #34	; 0x22
 8000a06:	18fb      	adds	r3, r7, r3
 8000a08:	881b      	ldrh	r3, [r3, #0]
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f7ff feb0 	bl	8000770 <colorFixer>
 8000a10:	0003      	movs	r3, r0
 8000a12:	0019      	movs	r1, r3
 8000a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a18:	0052      	lsls	r2, r2, #1
 8000a1a:	52d1      	strh	r1, [r2, r3]
	for (int i = 0; i < size; i++) {		// there has to be a better way to make array of 1 color
 8000a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a1e:	3301      	adds	r3, #1
 8000a20:	637b      	str	r3, [r7, #52]	; 0x34
 8000a22:	2325      	movs	r3, #37	; 0x25
 8000a24:	18fb      	adds	r3, r7, r3
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a2a:	429a      	cmp	r2, r3
 8000a2c:	dbea      	blt.n	8000a04 <drawVLine+0x100>
	}

	sendCommand(ST77XX_RAMWR, colors, size*2, hspi);
 8000a2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000a30:	2325      	movs	r3, #37	; 0x25
 8000a32:	18fb      	adds	r3, r7, r3
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	18db      	adds	r3, r3, r3
 8000a3a:	b29a      	uxth	r2, r3
 8000a3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a3e:	202c      	movs	r0, #44	; 0x2c
 8000a40:	f7ff fd10 	bl	8000464 <sendCommand>
 8000a44:	46b5      	mov	sp, r6
 8000a46:	e001      	b.n	8000a4c <drawVLine+0x148>
	if ((x > WIDTH) || (x < 0)) return;		// don't draw if x is out of bounds
 8000a48:	46c0      	nop			; (mov r8, r8)
 8000a4a:	46b5      	mov	sp, r6
}
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	b00f      	add	sp, #60	; 0x3c
 8000a50:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000a52 <drawBuffer>:

void drawBuffer(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t *buffer, uint16_t bufferSize, SPI_HandleTypeDef *hspi) {
 8000a52:	b5b0      	push	{r4, r5, r7, lr}
 8000a54:	b084      	sub	sp, #16
 8000a56:	af02      	add	r7, sp, #8
 8000a58:	0005      	movs	r5, r0
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	0010      	movs	r0, r2
 8000a5e:	0019      	movs	r1, r3
 8000a60:	1dfb      	adds	r3, r7, #7
 8000a62:	1c2a      	adds	r2, r5, #0
 8000a64:	701a      	strb	r2, [r3, #0]
 8000a66:	1dbb      	adds	r3, r7, #6
 8000a68:	1c22      	adds	r2, r4, #0
 8000a6a:	701a      	strb	r2, [r3, #0]
 8000a6c:	1d7b      	adds	r3, r7, #5
 8000a6e:	1c02      	adds	r2, r0, #0
 8000a70:	701a      	strb	r2, [r3, #0]
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	1c0a      	adds	r2, r1, #0
 8000a76:	701a      	strb	r2, [r3, #0]
	// just dont call this with out-of-range vals pls.
	if (x+w > WIDTH || y+h > HEIGHT) return;
 8000a78:	1dfb      	adds	r3, r7, #7
 8000a7a:	781a      	ldrb	r2, [r3, #0]
 8000a7c:	1d7b      	adds	r3, r7, #5
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	18d3      	adds	r3, r2, r3
 8000a82:	2b80      	cmp	r3, #128	; 0x80
 8000a84:	dc29      	bgt.n	8000ada <drawBuffer+0x88>
 8000a86:	1dbb      	adds	r3, r7, #6
 8000a88:	781a      	ldrb	r2, [r3, #0]
 8000a8a:	1d3b      	adds	r3, r7, #4
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	18d3      	adds	r3, r2, r3
 8000a90:	2ba0      	cmp	r3, #160	; 0xa0
 8000a92:	dc22      	bgt.n	8000ada <drawBuffer+0x88>

	// also don't call this with buffer size too big bc there's not enough ram for all pixels of display
	if (bufferSize > 10240) return;
 8000a94:	231c      	movs	r3, #28
 8000a96:	18fb      	adds	r3, r7, r3
 8000a98:	881a      	ldrh	r2, [r3, #0]
 8000a9a:	23a0      	movs	r3, #160	; 0xa0
 8000a9c:	019b      	lsls	r3, r3, #6
 8000a9e:	429a      	cmp	r2, r3
 8000aa0:	d81d      	bhi.n	8000ade <drawBuffer+0x8c>

	setAddrWindow(x, y, w, h, hspi);
 8000aa2:	1dfb      	adds	r3, r7, #7
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	b298      	uxth	r0, r3
 8000aa8:	1dbb      	adds	r3, r7, #6
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	b299      	uxth	r1, r3
 8000aae:	1d7b      	adds	r3, r7, #5
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	b29a      	uxth	r2, r3
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	b29c      	uxth	r4, r3
 8000aba:	6a3b      	ldr	r3, [r7, #32]
 8000abc:	9300      	str	r3, [sp, #0]
 8000abe:	0023      	movs	r3, r4
 8000ac0:	f7ff fde4 	bl	800068c <setAddrWindow>
	sendCommand(ST77XX_RAMWR, buffer, bufferSize*2, hspi);
 8000ac4:	231c      	movs	r3, #28
 8000ac6:	18fb      	adds	r3, r7, r3
 8000ac8:	881b      	ldrh	r3, [r3, #0]
 8000aca:	18db      	adds	r3, r3, r3
 8000acc:	b29a      	uxth	r2, r3
 8000ace:	6a3b      	ldr	r3, [r7, #32]
 8000ad0:	69b9      	ldr	r1, [r7, #24]
 8000ad2:	202c      	movs	r0, #44	; 0x2c
 8000ad4:	f7ff fcc6 	bl	8000464 <sendCommand>
 8000ad8:	e002      	b.n	8000ae0 <drawBuffer+0x8e>
	if (x+w > WIDTH || y+h > HEIGHT) return;
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	e000      	b.n	8000ae0 <drawBuffer+0x8e>
	if (bufferSize > 10240) return;
 8000ade:	46c0      	nop			; (mov r8, r8)
}
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	b002      	add	sp, #8
 8000ae4:	bdb0      	pop	{r4, r5, r7, pc}

08000ae6 <drawRect>:
			err -= 1;
		}
	}
}

void drawRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t color, SPI_HandleTypeDef *hspi) {
 8000ae6:	b5b0      	push	{r4, r5, r7, lr}
 8000ae8:	b084      	sub	sp, #16
 8000aea:	af02      	add	r7, sp, #8
 8000aec:	0005      	movs	r5, r0
 8000aee:	000c      	movs	r4, r1
 8000af0:	0010      	movs	r0, r2
 8000af2:	0019      	movs	r1, r3
 8000af4:	1dfb      	adds	r3, r7, #7
 8000af6:	1c2a      	adds	r2, r5, #0
 8000af8:	701a      	strb	r2, [r3, #0]
 8000afa:	1dbb      	adds	r3, r7, #6
 8000afc:	1c22      	adds	r2, r4, #0
 8000afe:	701a      	strb	r2, [r3, #0]
 8000b00:	1d7b      	adds	r3, r7, #5
 8000b02:	1c02      	adds	r2, r0, #0
 8000b04:	701a      	strb	r2, [r3, #0]
 8000b06:	1d3b      	adds	r3, r7, #4
 8000b08:	1c0a      	adds	r2, r1, #0
 8000b0a:	701a      	strb	r2, [r3, #0]
	drawHLine(x, y, w, color, hspi);
 8000b0c:	2518      	movs	r5, #24
 8000b0e:	197b      	adds	r3, r7, r5
 8000b10:	881c      	ldrh	r4, [r3, #0]
 8000b12:	1d7b      	adds	r3, r7, #5
 8000b14:	781a      	ldrb	r2, [r3, #0]
 8000b16:	1dbb      	adds	r3, r7, #6
 8000b18:	7819      	ldrb	r1, [r3, #0]
 8000b1a:	1dfb      	adds	r3, r7, #7
 8000b1c:	7818      	ldrb	r0, [r3, #0]
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	9300      	str	r3, [sp, #0]
 8000b22:	0023      	movs	r3, r4
 8000b24:	f7ff fe48 	bl	80007b8 <drawHLine>
	drawHLine(x, y+h-1, w, color, hspi);
 8000b28:	1dba      	adds	r2, r7, #6
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	7812      	ldrb	r2, [r2, #0]
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	18d3      	adds	r3, r2, r3
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	3b01      	subs	r3, #1
 8000b36:	b2d9      	uxtb	r1, r3
 8000b38:	197b      	adds	r3, r7, r5
 8000b3a:	881c      	ldrh	r4, [r3, #0]
 8000b3c:	1d7b      	adds	r3, r7, #5
 8000b3e:	781a      	ldrb	r2, [r3, #0]
 8000b40:	1dfb      	adds	r3, r7, #7
 8000b42:	7818      	ldrb	r0, [r3, #0]
 8000b44:	69fb      	ldr	r3, [r7, #28]
 8000b46:	9300      	str	r3, [sp, #0]
 8000b48:	0023      	movs	r3, r4
 8000b4a:	f7ff fe35 	bl	80007b8 <drawHLine>
	drawVLine(x, y, h, color, hspi);
 8000b4e:	197b      	adds	r3, r7, r5
 8000b50:	881c      	ldrh	r4, [r3, #0]
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	781a      	ldrb	r2, [r3, #0]
 8000b56:	1dbb      	adds	r3, r7, #6
 8000b58:	7819      	ldrb	r1, [r3, #0]
 8000b5a:	1dfb      	adds	r3, r7, #7
 8000b5c:	7818      	ldrb	r0, [r3, #0]
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	9300      	str	r3, [sp, #0]
 8000b62:	0023      	movs	r3, r4
 8000b64:	f7ff fece 	bl	8000904 <drawVLine>
	drawVLine(x+w-1, y, h, color, hspi);
 8000b68:	1dfa      	adds	r2, r7, #7
 8000b6a:	1d7b      	adds	r3, r7, #5
 8000b6c:	7812      	ldrb	r2, [r2, #0]
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	18d3      	adds	r3, r2, r3
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	3b01      	subs	r3, #1
 8000b76:	b2d8      	uxtb	r0, r3
 8000b78:	197b      	adds	r3, r7, r5
 8000b7a:	881c      	ldrh	r4, [r3, #0]
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	781a      	ldrb	r2, [r3, #0]
 8000b80:	1dbb      	adds	r3, r7, #6
 8000b82:	7819      	ldrb	r1, [r3, #0]
 8000b84:	69fb      	ldr	r3, [r7, #28]
 8000b86:	9300      	str	r3, [sp, #0]
 8000b88:	0023      	movs	r3, r4
 8000b8a:	f7ff febb 	bl	8000904 <drawVLine>
}
 8000b8e:	46c0      	nop			; (mov r8, r8)
 8000b90:	46bd      	mov	sp, r7
 8000b92:	b002      	add	sp, #8
 8000b94:	bdb0      	pop	{r4, r5, r7, pc}

08000b96 <fillRect>:

void fillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint16_t color, SPI_HandleTypeDef *hspi) {
 8000b96:	b5b0      	push	{r4, r5, r7, lr}
 8000b98:	b086      	sub	sp, #24
 8000b9a:	af02      	add	r7, sp, #8
 8000b9c:	0005      	movs	r5, r0
 8000b9e:	000c      	movs	r4, r1
 8000ba0:	0010      	movs	r0, r2
 8000ba2:	0019      	movs	r1, r3
 8000ba4:	1dfb      	adds	r3, r7, #7
 8000ba6:	1c2a      	adds	r2, r5, #0
 8000ba8:	701a      	strb	r2, [r3, #0]
 8000baa:	1dbb      	adds	r3, r7, #6
 8000bac:	1c22      	adds	r2, r4, #0
 8000bae:	701a      	strb	r2, [r3, #0]
 8000bb0:	1d7b      	adds	r3, r7, #5
 8000bb2:	1c02      	adds	r2, r0, #0
 8000bb4:	701a      	strb	r2, [r3, #0]
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	1c0a      	adds	r2, r1, #0
 8000bba:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < h; i++) {
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	e014      	b.n	8000bec <fillRect+0x56>
		drawHLine(x, y+i, w, color, hspi);
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	1dbb      	adds	r3, r7, #6
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	18d3      	adds	r3, r2, r3
 8000bcc:	b2d9      	uxtb	r1, r3
 8000bce:	2320      	movs	r3, #32
 8000bd0:	18fb      	adds	r3, r7, r3
 8000bd2:	881c      	ldrh	r4, [r3, #0]
 8000bd4:	1d7b      	adds	r3, r7, #5
 8000bd6:	781a      	ldrb	r2, [r3, #0]
 8000bd8:	1dfb      	adds	r3, r7, #7
 8000bda:	7818      	ldrb	r0, [r3, #0]
 8000bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bde:	9300      	str	r3, [sp, #0]
 8000be0:	0023      	movs	r3, r4
 8000be2:	f7ff fde9 	bl	80007b8 <drawHLine>
	for (int i = 0; i < h; i++) {
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	3301      	adds	r3, #1
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	68fa      	ldr	r2, [r7, #12]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	dbe5      	blt.n	8000bc2 <fillRect+0x2c>
	}
}
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	b004      	add	sp, #16
 8000bfc:	bdb0      	pop	{r4, r5, r7, pc}

08000bfe <fillScreen>:

void fillScreen(uint16_t color, SPI_HandleTypeDef *hspi) {
 8000bfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c00:	b091      	sub	sp, #68	; 0x44
 8000c02:	af04      	add	r7, sp, #16
 8000c04:	61b9      	str	r1, [r7, #24]
 8000c06:	221e      	movs	r2, #30
 8000c08:	18ba      	adds	r2, r7, r2
 8000c0a:	1c01      	adds	r1, r0, #0
 8000c0c:	8011      	strh	r1, [r2, #0]
 8000c0e:	466a      	mov	r2, sp
 8000c10:	607a      	str	r2, [r7, #4]
	uint16_t bufferSize = WIDTH*HEIGHT/4;
 8000c12:	2012      	movs	r0, #18
 8000c14:	2218      	movs	r2, #24
 8000c16:	18b9      	adds	r1, r7, r2
 8000c18:	180a      	adds	r2, r1, r0
 8000c1a:	21a0      	movs	r1, #160	; 0xa0
 8000c1c:	0149      	lsls	r1, r1, #5
 8000c1e:	8011      	strh	r1, [r2, #0]
	uint16_t buffer[bufferSize];
 8000c20:	2218      	movs	r2, #24
 8000c22:	18ba      	adds	r2, r7, r2
 8000c24:	1812      	adds	r2, r2, r0
 8000c26:	8812      	ldrh	r2, [r2, #0]
 8000c28:	0011      	movs	r1, r2
 8000c2a:	3901      	subs	r1, #1
 8000c2c:	6279      	str	r1, [r7, #36]	; 0x24
 8000c2e:	613a      	str	r2, [r7, #16]
 8000c30:	2100      	movs	r1, #0
 8000c32:	6179      	str	r1, [r7, #20]
 8000c34:	6939      	ldr	r1, [r7, #16]
 8000c36:	0f09      	lsrs	r1, r1, #28
 8000c38:	6978      	ldr	r0, [r7, #20]
 8000c3a:	0106      	lsls	r6, r0, #4
 8000c3c:	430e      	orrs	r6, r1
 8000c3e:	6939      	ldr	r1, [r7, #16]
 8000c40:	010d      	lsls	r5, r1, #4
 8000c42:	60ba      	str	r2, [r7, #8]
 8000c44:	2100      	movs	r1, #0
 8000c46:	60f9      	str	r1, [r7, #12]
 8000c48:	68bd      	ldr	r5, [r7, #8]
 8000c4a:	68fe      	ldr	r6, [r7, #12]
 8000c4c:	0029      	movs	r1, r5
 8000c4e:	0f09      	lsrs	r1, r1, #28
 8000c50:	0030      	movs	r0, r6
 8000c52:	0104      	lsls	r4, r0, #4
 8000c54:	430c      	orrs	r4, r1
 8000c56:	0029      	movs	r1, r5
 8000c58:	010b      	lsls	r3, r1, #4
 8000c5a:	0013      	movs	r3, r2
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	3301      	adds	r3, #1
 8000c60:	3307      	adds	r3, #7
 8000c62:	08db      	lsrs	r3, r3, #3
 8000c64:	00db      	lsls	r3, r3, #3
 8000c66:	466a      	mov	r2, sp
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	469d      	mov	sp, r3
 8000c6c:	ab04      	add	r3, sp, #16
 8000c6e:	3301      	adds	r3, #1
 8000c70:	085b      	lsrs	r3, r3, #1
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	623b      	str	r3, [r7, #32]
	int i;
	for (i = 0; i < bufferSize; i++) {
 8000c76:	2300      	movs	r3, #0
 8000c78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c7a:	e00e      	b.n	8000c9a <fillScreen+0x9c>
		buffer[i] = colorFixer(color);
 8000c7c:	231e      	movs	r3, #30
 8000c7e:	18fb      	adds	r3, r7, r3
 8000c80:	881b      	ldrh	r3, [r3, #0]
 8000c82:	0018      	movs	r0, r3
 8000c84:	f7ff fd74 	bl	8000770 <colorFixer>
 8000c88:	0003      	movs	r3, r0
 8000c8a:	0019      	movs	r1, r3
 8000c8c:	6a3b      	ldr	r3, [r7, #32]
 8000c8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c90:	0052      	lsls	r2, r2, #1
 8000c92:	52d1      	strh	r1, [r2, r3]
	for (i = 0; i < bufferSize; i++) {
 8000c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c96:	3301      	adds	r3, #1
 8000c98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c9a:	2312      	movs	r3, #18
 8000c9c:	2218      	movs	r2, #24
 8000c9e:	4694      	mov	ip, r2
 8000ca0:	44bc      	add	ip, r7
 8000ca2:	4463      	add	r3, ip
 8000ca4:	881b      	ldrh	r3, [r3, #0]
 8000ca6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	dbe7      	blt.n	8000c7c <fillScreen+0x7e>
	}

	for (i = 0; i < 4; i++) {
 8000cac:	2300      	movs	r3, #0
 8000cae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cb0:	e017      	b.n	8000ce2 <fillScreen+0xe4>
		drawBuffer(0, HEIGHT/4*i, WIDTH, HEIGHT/4, buffer, bufferSize, hspi);
 8000cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	2228      	movs	r2, #40	; 0x28
 8000cb8:	4353      	muls	r3, r2
 8000cba:	b2d9      	uxtb	r1, r3
 8000cbc:	6a3b      	ldr	r3, [r7, #32]
 8000cbe:	69ba      	ldr	r2, [r7, #24]
 8000cc0:	9202      	str	r2, [sp, #8]
 8000cc2:	2212      	movs	r2, #18
 8000cc4:	2018      	movs	r0, #24
 8000cc6:	4684      	mov	ip, r0
 8000cc8:	44bc      	add	ip, r7
 8000cca:	4462      	add	r2, ip
 8000ccc:	8812      	ldrh	r2, [r2, #0]
 8000cce:	9201      	str	r2, [sp, #4]
 8000cd0:	9300      	str	r3, [sp, #0]
 8000cd2:	2328      	movs	r3, #40	; 0x28
 8000cd4:	2280      	movs	r2, #128	; 0x80
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f7ff febb 	bl	8000a52 <drawBuffer>
	for (i = 0; i < 4; i++) {
 8000cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cde:	3301      	adds	r3, #1
 8000ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ce4:	2b03      	cmp	r3, #3
 8000ce6:	dde4      	ble.n	8000cb2 <fillScreen+0xb4>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	469d      	mov	sp, r3
	}
}
 8000cec:	46c0      	nop			; (mov r8, r8)
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	b00d      	add	sp, #52	; 0x34
 8000cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000cf4 <drawButton>:
// ---- end of basic shapes and lines ----

// ---- start of more complicated graphics ----
void drawButton(uint8_t x, uint8_t y, SPI_HandleTypeDef *hspi) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af02      	add	r7, sp, #8
 8000cfa:	603a      	str	r2, [r7, #0]
 8000cfc:	1dfb      	adds	r3, r7, #7
 8000cfe:	1c02      	adds	r2, r0, #0
 8000d00:	701a      	strb	r2, [r3, #0]
 8000d02:	1dbb      	adds	r3, r7, #6
 8000d04:	1c0a      	adds	r2, r1, #0
 8000d06:	701a      	strb	r2, [r3, #0]
	// draw rect size 8 with 1 pixel border
	drawRect(x, y, 10, 10, ST77XX_BLACK, hspi);
 8000d08:	1dbb      	adds	r3, r7, #6
 8000d0a:	7819      	ldrb	r1, [r3, #0]
 8000d0c:	1dfb      	adds	r3, r7, #7
 8000d0e:	7818      	ldrb	r0, [r3, #0]
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	9301      	str	r3, [sp, #4]
 8000d14:	2300      	movs	r3, #0
 8000d16:	9300      	str	r3, [sp, #0]
 8000d18:	230a      	movs	r3, #10
 8000d1a:	220a      	movs	r2, #10
 8000d1c:	f7ff fee3 	bl	8000ae6 <drawRect>
	fillRect(x+1, y+1, 8, 8, ST77XX_WHITE, hspi);
 8000d20:	1dfb      	adds	r3, r7, #7
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	3301      	adds	r3, #1
 8000d26:	b2d8      	uxtb	r0, r3
 8000d28:	1dbb      	adds	r3, r7, #6
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	b2d9      	uxtb	r1, r3
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	9301      	str	r3, [sp, #4]
 8000d34:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <drawButton+0x84>)
 8000d36:	9300      	str	r3, [sp, #0]
 8000d38:	2308      	movs	r3, #8
 8000d3a:	2208      	movs	r2, #8
 8000d3c:	f7ff ff2b 	bl	8000b96 <fillRect>

	// draw circle in the middle
	setCursor(x+3, y+1);
 8000d40:	1dfb      	adds	r3, r7, #7
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	3303      	adds	r3, #3
 8000d46:	b2da      	uxtb	r2, r3
 8000d48:	1dbb      	adds	r3, r7, #6
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	0019      	movs	r1, r3
 8000d52:	0010      	movs	r0, r2
 8000d54:	f000 fc62 	bl	800161c <setCursor>
	setTextColor(ST77XX_BLACK);
 8000d58:	2000      	movs	r0, #0
 8000d5a:	f000 fc89 	bl	8001670 <setTextColor>
	setBackgroundColor(ST77XX_WHITE);
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <drawButton+0x84>)
 8000d60:	0018      	movs	r0, r3
 8000d62:	f000 fc4b 	bl	80015fc <setBackgroundColor>
	drawChar('O', hspi);
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	0019      	movs	r1, r3
 8000d6a:	204f      	movs	r0, #79	; 0x4f
 8000d6c:	f000 f890 	bl	8000e90 <drawChar>
}
 8000d70:	46c0      	nop			; (mov r8, r8)
 8000d72:	46bd      	mov	sp, r7
 8000d74:	b002      	add	sp, #8
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	0000ffff 	.word	0x0000ffff

08000d7c <drawTitle>:

void drawTitle(char *str, SPI_HandleTypeDef *hspi) {
 8000d7c:	b5b0      	push	{r4, r5, r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
	uint8_t strSize = strlen(str);
 8000d86:	250f      	movs	r5, #15
 8000d88:	197c      	adds	r4, r7, r5
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f000 f865 	bl	8000e5c <strlen>
 8000d92:	0003      	movs	r3, r0
 8000d94:	7023      	strb	r3, [r4, #0]

	// drawing title
	if (12*strSize < WIDTH) {		// about string size = 10 for width = 128
 8000d96:	197b      	adds	r3, r7, r5
 8000d98:	781a      	ldrb	r2, [r3, #0]
 8000d9a:	0013      	movs	r3, r2
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	189b      	adds	r3, r3, r2
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	2b7f      	cmp	r3, #127	; 0x7f
 8000da4:	dc1d      	bgt.n	8000de2 <drawTitle+0x66>
		setTextSize(2);
 8000da6:	2002      	movs	r0, #2
 8000da8:	f000 fc52 	bl	8001650 <setTextSize>
		setCursor((WIDTH-12*strSize)/2, 10);
 8000dac:	230f      	movs	r3, #15
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	781a      	ldrb	r2, [r3, #0]
 8000db2:	0013      	movs	r3, r2
 8000db4:	0092      	lsls	r2, r2, #2
 8000db6:	1a9b      	subs	r3, r3, r2
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	3380      	adds	r3, #128	; 0x80
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	da00      	bge.n	8000dc2 <drawTitle+0x46>
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	105b      	asrs	r3, r3, #1
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	210a      	movs	r1, #10
 8000dc8:	0018      	movs	r0, r3
 8000dca:	f000 fc27 	bl	800161c <setCursor>
		setTextColor(ST77XX_BLACK);
 8000dce:	2000      	movs	r0, #0
 8000dd0:	f000 fc4e 	bl	8001670 <setTextColor>
		drawText(str, hspi);
 8000dd4:	683a      	ldr	r2, [r7, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	0011      	movs	r1, r2
 8000dda:	0018      	movs	r0, r3
 8000ddc:	f000 fba8 	bl	8001530 <drawText>
		setTextSize(1);
		setCursor((WIDTH-6*15)/2, 10);
		setTextColor(ST77XX_BLACK);
		drawText("shit's too long", hspi);
	}
}
 8000de0:	e036      	b.n	8000e50 <drawTitle+0xd4>
	else if (6*strSize < WIDTH) {	// about string size = 21 for width = 128
 8000de2:	230f      	movs	r3, #15
 8000de4:	18fb      	adds	r3, r7, r3
 8000de6:	781a      	ldrb	r2, [r3, #0]
 8000de8:	0013      	movs	r3, r2
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	189b      	adds	r3, r3, r2
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	2b7f      	cmp	r3, #127	; 0x7f
 8000df2:	dc1d      	bgt.n	8000e30 <drawTitle+0xb4>
		setTextSize(1);
 8000df4:	2001      	movs	r0, #1
 8000df6:	f000 fc2b 	bl	8001650 <setTextSize>
		setCursor((WIDTH-6*strSize)/2, 10);
 8000dfa:	230f      	movs	r3, #15
 8000dfc:	18fb      	adds	r3, r7, r3
 8000dfe:	781a      	ldrb	r2, [r3, #0]
 8000e00:	0013      	movs	r3, r2
 8000e02:	0092      	lsls	r2, r2, #2
 8000e04:	1a9b      	subs	r3, r3, r2
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	3380      	adds	r3, #128	; 0x80
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	da00      	bge.n	8000e10 <drawTitle+0x94>
 8000e0e:	3301      	adds	r3, #1
 8000e10:	105b      	asrs	r3, r3, #1
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	210a      	movs	r1, #10
 8000e16:	0018      	movs	r0, r3
 8000e18:	f000 fc00 	bl	800161c <setCursor>
		setTextColor(ST77XX_BLACK);
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	f000 fc27 	bl	8001670 <setTextColor>
		drawText(str, hspi);
 8000e22:	683a      	ldr	r2, [r7, #0]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	0011      	movs	r1, r2
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f000 fb81 	bl	8001530 <drawText>
}
 8000e2e:	e00f      	b.n	8000e50 <drawTitle+0xd4>
		setTextSize(1);
 8000e30:	2001      	movs	r0, #1
 8000e32:	f000 fc0d 	bl	8001650 <setTextSize>
		setCursor((WIDTH-6*15)/2, 10);
 8000e36:	210a      	movs	r1, #10
 8000e38:	2013      	movs	r0, #19
 8000e3a:	f000 fbef 	bl	800161c <setCursor>
		setTextColor(ST77XX_BLACK);
 8000e3e:	2000      	movs	r0, #0
 8000e40:	f000 fc16 	bl	8001670 <setTextColor>
		drawText("shit's too long", hspi);
 8000e44:	683a      	ldr	r2, [r7, #0]
 8000e46:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <drawTitle+0xdc>)
 8000e48:	0011      	movs	r1, r2
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f000 fb70 	bl	8001530 <drawText>
}
 8000e50:	46c0      	nop			; (mov r8, r8)
 8000e52:	46bd      	mov	sp, r7
 8000e54:	b004      	add	sp, #16
 8000e56:	bdb0      	pop	{r4, r5, r7, pc}
 8000e58:	08008118 	.word	0x08008118

08000e5c <strlen>:

}
// ---- end of more complicated graphics ----

// ---- text functions ----
uint8_t strlen(char *str) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
	uint8_t len;
	while (str[len] != '\0') ++len;
 8000e64:	e005      	b.n	8000e72 <strlen+0x16>
 8000e66:	220f      	movs	r2, #15
 8000e68:	18bb      	adds	r3, r7, r2
 8000e6a:	18ba      	adds	r2, r7, r2
 8000e6c:	7812      	ldrb	r2, [r2, #0]
 8000e6e:	3201      	adds	r2, #1
 8000e70:	701a      	strb	r2, [r3, #0]
 8000e72:	230f      	movs	r3, #15
 8000e74:	18fb      	adds	r3, r7, r3
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	18d3      	adds	r3, r2, r3
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d1f1      	bne.n	8000e66 <strlen+0xa>
	return len;
 8000e82:	230f      	movs	r3, #15
 8000e84:	18fb      	adds	r3, r7, r3
 8000e86:	781b      	ldrb	r3, [r3, #0]
}
 8000e88:	0018      	movs	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	b004      	add	sp, #16
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <drawChar>:

void drawChar(uint8_t ch, SPI_HandleTypeDef *hspi) {
 8000e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e92:	b095      	sub	sp, #84	; 0x54
 8000e94:	af04      	add	r7, sp, #16
 8000e96:	61b9      	str	r1, [r7, #24]
 8000e98:	221f      	movs	r2, #31
 8000e9a:	18ba      	adds	r2, r7, r2
 8000e9c:	1c01      	adds	r1, r0, #0
 8000e9e:	7011      	strb	r1, [r2, #0]
 8000ea0:	466a      	mov	r2, sp
 8000ea2:	607a      	str	r2, [r7, #4]
	uint16_t bufferSize = 6*8*textSize*textSize;
 8000ea4:	4abe      	ldr	r2, [pc, #760]	; (80011a0 <drawChar+0x310>)
 8000ea6:	7812      	ldrb	r2, [r2, #0]
 8000ea8:	b292      	uxth	r2, r2
 8000eaa:	49bd      	ldr	r1, [pc, #756]	; (80011a0 <drawChar+0x310>)
 8000eac:	7809      	ldrb	r1, [r1, #0]
 8000eae:	b289      	uxth	r1, r1
 8000eb0:	434a      	muls	r2, r1
 8000eb2:	b291      	uxth	r1, r2
 8000eb4:	221a      	movs	r2, #26
 8000eb6:	2018      	movs	r0, #24
 8000eb8:	4684      	mov	ip, r0
 8000eba:	44bc      	add	ip, r7
 8000ebc:	4462      	add	r2, ip
 8000ebe:	2030      	movs	r0, #48	; 0x30
 8000ec0:	4341      	muls	r1, r0
 8000ec2:	8011      	strh	r1, [r2, #0]
	uint16_t buffer[bufferSize];
 8000ec4:	221a      	movs	r2, #26
 8000ec6:	2118      	movs	r1, #24
 8000ec8:	468c      	mov	ip, r1
 8000eca:	44bc      	add	ip, r7
 8000ecc:	4462      	add	r2, ip
 8000ece:	8812      	ldrh	r2, [r2, #0]
 8000ed0:	0011      	movs	r1, r2
 8000ed2:	3901      	subs	r1, #1
 8000ed4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8000ed6:	613a      	str	r2, [r7, #16]
 8000ed8:	2100      	movs	r1, #0
 8000eda:	6179      	str	r1, [r7, #20]
 8000edc:	6939      	ldr	r1, [r7, #16]
 8000ede:	0f09      	lsrs	r1, r1, #28
 8000ee0:	6978      	ldr	r0, [r7, #20]
 8000ee2:	0106      	lsls	r6, r0, #4
 8000ee4:	430e      	orrs	r6, r1
 8000ee6:	6939      	ldr	r1, [r7, #16]
 8000ee8:	010d      	lsls	r5, r1, #4
 8000eea:	60ba      	str	r2, [r7, #8]
 8000eec:	2100      	movs	r1, #0
 8000eee:	60f9      	str	r1, [r7, #12]
 8000ef0:	68bd      	ldr	r5, [r7, #8]
 8000ef2:	68fe      	ldr	r6, [r7, #12]
 8000ef4:	0029      	movs	r1, r5
 8000ef6:	0f09      	lsrs	r1, r1, #28
 8000ef8:	0030      	movs	r0, r6
 8000efa:	0104      	lsls	r4, r0, #4
 8000efc:	430c      	orrs	r4, r1
 8000efe:	0029      	movs	r1, r5
 8000f00:	010b      	lsls	r3, r1, #4
 8000f02:	0013      	movs	r3, r2
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	3301      	adds	r3, #1
 8000f08:	3307      	adds	r3, #7
 8000f0a:	08db      	lsrs	r3, r3, #3
 8000f0c:	00db      	lsls	r3, r3, #3
 8000f0e:	466a      	mov	r2, sp
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	469d      	mov	sp, r3
 8000f14:	ab04      	add	r3, sp, #16
 8000f16:	3301      	adds	r3, #1
 8000f18:	085b      	lsrs	r3, r3, #1
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	62bb      	str	r3, [r7, #40]	; 0x28
	int16_t rowOffset, address;

	for (int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 8000f1e:	2325      	movs	r3, #37	; 0x25
 8000f20:	2218      	movs	r2, #24
 8000f22:	4694      	mov	ip, r2
 8000f24:	44bc      	add	ip, r7
 8000f26:	4463      	add	r3, ip
 8000f28:	2200      	movs	r2, #0
 8000f2a:	701a      	strb	r2, [r3, #0]
 8000f2c:	e1f4      	b.n	8001318 <drawChar+0x488>
		uint8_t line = font[ch*5+i];
 8000f2e:	231f      	movs	r3, #31
 8000f30:	18fb      	adds	r3, r7, r3
 8000f32:	781a      	ldrb	r2, [r3, #0]
 8000f34:	0013      	movs	r3, r2
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	189a      	adds	r2, r3, r2
 8000f3a:	2325      	movs	r3, #37	; 0x25
 8000f3c:	2118      	movs	r1, #24
 8000f3e:	468c      	mov	ip, r1
 8000f40:	44bc      	add	ip, r7
 8000f42:	4463      	add	r3, ip
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	b25b      	sxtb	r3, r3
 8000f48:	18d2      	adds	r2, r2, r3
 8000f4a:	2324      	movs	r3, #36	; 0x24
 8000f4c:	2118      	movs	r1, #24
 8000f4e:	468c      	mov	ip, r1
 8000f50:	44bc      	add	ip, r7
 8000f52:	4463      	add	r3, ip
 8000f54:	4993      	ldr	r1, [pc, #588]	; (80011a4 <drawChar+0x314>)
 8000f56:	5c8a      	ldrb	r2, [r1, r2]
 8000f58:	701a      	strb	r2, [r3, #0]
		for (int8_t j=0; j<8; j++, line >>= 1) {
 8000f5a:	2323      	movs	r3, #35	; 0x23
 8000f5c:	2218      	movs	r2, #24
 8000f5e:	4694      	mov	ip, r2
 8000f60:	44bc      	add	ip, r7
 8000f62:	4463      	add	r3, ip
 8000f64:	2200      	movs	r2, #0
 8000f66:	701a      	strb	r2, [r3, #0]
 8000f68:	e1c0      	b.n	80012ec <drawChar+0x45c>
			if (line & 1) {
 8000f6a:	2324      	movs	r3, #36	; 0x24
 8000f6c:	2218      	movs	r2, #24
 8000f6e:	4694      	mov	ip, r2
 8000f70:	44bc      	add	ip, r7
 8000f72:	4463      	add	r3, ip
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	2201      	movs	r2, #1
 8000f78:	4013      	ands	r3, r2
 8000f7a:	d100      	bne.n	8000f7e <drawChar+0xee>
 8000f7c:	e0c8      	b.n	8001110 <drawChar+0x280>
				if (textSize == 1) {
 8000f7e:	4b88      	ldr	r3, [pc, #544]	; (80011a0 <drawChar+0x310>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d11c      	bne.n	8000fc0 <drawChar+0x130>
					buffer[i+j*6] = colorFixer(textColor);
 8000f86:	4b88      	ldr	r3, [pc, #544]	; (80011a8 <drawChar+0x318>)
 8000f88:	8818      	ldrh	r0, [r3, #0]
 8000f8a:	2325      	movs	r3, #37	; 0x25
 8000f8c:	2218      	movs	r2, #24
 8000f8e:	4694      	mov	ip, r2
 8000f90:	44bc      	add	ip, r7
 8000f92:	4463      	add	r3, ip
 8000f94:	2100      	movs	r1, #0
 8000f96:	5659      	ldrsb	r1, [r3, r1]
 8000f98:	2323      	movs	r3, #35	; 0x23
 8000f9a:	2218      	movs	r2, #24
 8000f9c:	4694      	mov	ip, r2
 8000f9e:	44bc      	add	ip, r7
 8000fa0:	4463      	add	r3, ip
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	569a      	ldrsb	r2, [r3, r2]
 8000fa6:	0013      	movs	r3, r2
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	189b      	adds	r3, r3, r2
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	18cc      	adds	r4, r1, r3
 8000fb0:	f7ff fbde 	bl	8000770 <colorFixer>
 8000fb4:	0003      	movs	r3, r0
 8000fb6:	0019      	movs	r1, r3
 8000fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fba:	0062      	lsls	r2, r4, #1
 8000fbc:	52d1      	strh	r1, [r2, r3]
 8000fbe:	e17f      	b.n	80012c0 <drawChar+0x430>
				}
				else {
					for (int8_t k = 0; k < textSize; k++) {
 8000fc0:	2322      	movs	r3, #34	; 0x22
 8000fc2:	2218      	movs	r2, #24
 8000fc4:	4694      	mov	ip, r2
 8000fc6:	44bc      	add	ip, r7
 8000fc8:	4463      	add	r3, ip
 8000fca:	2200      	movs	r2, #0
 8000fcc:	701a      	strb	r2, [r3, #0]
 8000fce:	e092      	b.n	80010f6 <drawChar+0x266>
						rowOffset = textSize*6;
 8000fd0:	4b73      	ldr	r3, [pc, #460]	; (80011a0 <drawChar+0x310>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	1c1a      	adds	r2, r3, #0
 8000fd8:	1c13      	adds	r3, r2, #0
 8000fda:	18db      	adds	r3, r3, r3
 8000fdc:	189b      	adds	r3, r3, r2
 8000fde:	18db      	adds	r3, r3, r3
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	2326      	movs	r3, #38	; 0x26
 8000fe4:	2118      	movs	r1, #24
 8000fe6:	468c      	mov	ip, r1
 8000fe8:	44bc      	add	ip, r7
 8000fea:	4463      	add	r3, ip
 8000fec:	801a      	strh	r2, [r3, #0]
						for (int8_t l = 0; l < textSize; l++) {
 8000fee:	2321      	movs	r3, #33	; 0x21
 8000ff0:	2218      	movs	r2, #24
 8000ff2:	4694      	mov	ip, r2
 8000ff4:	44bc      	add	ip, r7
 8000ff6:	4463      	add	r3, ip
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	701a      	strb	r2, [r3, #0]
 8000ffc:	e064      	b.n	80010c8 <drawChar+0x238>
							address = (textSize*textSize*j*6)+(i*textSize);
 8000ffe:	4b68      	ldr	r3, [pc, #416]	; (80011a0 <drawChar+0x310>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	b29b      	uxth	r3, r3
 8001004:	4a66      	ldr	r2, [pc, #408]	; (80011a0 <drawChar+0x310>)
 8001006:	7812      	ldrb	r2, [r2, #0]
 8001008:	b292      	uxth	r2, r2
 800100a:	4353      	muls	r3, r2
 800100c:	b29b      	uxth	r3, r3
 800100e:	2223      	movs	r2, #35	; 0x23
 8001010:	2118      	movs	r1, #24
 8001012:	468c      	mov	ip, r1
 8001014:	44bc      	add	ip, r7
 8001016:	4462      	add	r2, ip
 8001018:	7812      	ldrb	r2, [r2, #0]
 800101a:	b252      	sxtb	r2, r2
 800101c:	b292      	uxth	r2, r2
 800101e:	4353      	muls	r3, r2
 8001020:	b29b      	uxth	r3, r3
 8001022:	1c1a      	adds	r2, r3, #0
 8001024:	1c13      	adds	r3, r2, #0
 8001026:	18db      	adds	r3, r3, r3
 8001028:	189b      	adds	r3, r3, r2
 800102a:	18db      	adds	r3, r3, r3
 800102c:	b29a      	uxth	r2, r3
 800102e:	2325      	movs	r3, #37	; 0x25
 8001030:	2118      	movs	r1, #24
 8001032:	468c      	mov	ip, r1
 8001034:	44bc      	add	ip, r7
 8001036:	4463      	add	r3, ip
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	b25b      	sxtb	r3, r3
 800103c:	b29b      	uxth	r3, r3
 800103e:	4958      	ldr	r1, [pc, #352]	; (80011a0 <drawChar+0x310>)
 8001040:	7809      	ldrb	r1, [r1, #0]
 8001042:	b289      	uxth	r1, r1
 8001044:	434b      	muls	r3, r1
 8001046:	b29b      	uxth	r3, r3
 8001048:	18d3      	adds	r3, r2, r3
 800104a:	b29a      	uxth	r2, r3
 800104c:	210e      	movs	r1, #14
 800104e:	2018      	movs	r0, #24
 8001050:	183b      	adds	r3, r7, r0
 8001052:	185b      	adds	r3, r3, r1
 8001054:	801a      	strh	r2, [r3, #0]
							address += rowOffset*k+l;
 8001056:	2322      	movs	r3, #34	; 0x22
 8001058:	2218      	movs	r2, #24
 800105a:	4694      	mov	ip, r2
 800105c:	44bc      	add	ip, r7
 800105e:	4463      	add	r3, ip
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	b25b      	sxtb	r3, r3
 8001064:	b29b      	uxth	r3, r3
 8001066:	2226      	movs	r2, #38	; 0x26
 8001068:	2418      	movs	r4, #24
 800106a:	46a4      	mov	ip, r4
 800106c:	44bc      	add	ip, r7
 800106e:	4462      	add	r2, ip
 8001070:	8812      	ldrh	r2, [r2, #0]
 8001072:	4353      	muls	r3, r2
 8001074:	b29a      	uxth	r2, r3
 8001076:	2521      	movs	r5, #33	; 0x21
 8001078:	183b      	adds	r3, r7, r0
 800107a:	195b      	adds	r3, r3, r5
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	b25b      	sxtb	r3, r3
 8001080:	b29b      	uxth	r3, r3
 8001082:	18d3      	adds	r3, r2, r3
 8001084:	b29a      	uxth	r2, r3
 8001086:	183b      	adds	r3, r7, r0
 8001088:	185b      	adds	r3, r3, r1
 800108a:	881b      	ldrh	r3, [r3, #0]
 800108c:	18d3      	adds	r3, r2, r3
 800108e:	b29a      	uxth	r2, r3
 8001090:	183b      	adds	r3, r7, r0
 8001092:	185b      	adds	r3, r3, r1
 8001094:	801a      	strh	r2, [r3, #0]
							buffer[address] = colorFixer(textColor);
 8001096:	4b44      	ldr	r3, [pc, #272]	; (80011a8 <drawChar+0x318>)
 8001098:	881a      	ldrh	r2, [r3, #0]
 800109a:	0006      	movs	r6, r0
 800109c:	183b      	adds	r3, r7, r0
 800109e:	185b      	adds	r3, r3, r1
 80010a0:	2400      	movs	r4, #0
 80010a2:	5f1c      	ldrsh	r4, [r3, r4]
 80010a4:	0010      	movs	r0, r2
 80010a6:	f7ff fb63 	bl	8000770 <colorFixer>
 80010aa:	0003      	movs	r3, r0
 80010ac:	0019      	movs	r1, r3
 80010ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010b0:	0062      	lsls	r2, r4, #1
 80010b2:	52d1      	strh	r1, [r2, r3]
						for (int8_t l = 0; l < textSize; l++) {
 80010b4:	19bb      	adds	r3, r7, r6
 80010b6:	195b      	adds	r3, r3, r5
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	b25b      	sxtb	r3, r3
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	3301      	adds	r3, #1
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	19bb      	adds	r3, r7, r6
 80010c4:	195b      	adds	r3, r3, r5
 80010c6:	701a      	strb	r2, [r3, #0]
 80010c8:	2321      	movs	r3, #33	; 0x21
 80010ca:	2218      	movs	r2, #24
 80010cc:	4694      	mov	ip, r2
 80010ce:	44bc      	add	ip, r7
 80010d0:	4463      	add	r3, ip
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	b25b      	sxtb	r3, r3
 80010d6:	4a32      	ldr	r2, [pc, #200]	; (80011a0 <drawChar+0x310>)
 80010d8:	7812      	ldrb	r2, [r2, #0]
 80010da:	4293      	cmp	r3, r2
 80010dc:	db8f      	blt.n	8000ffe <drawChar+0x16e>
					for (int8_t k = 0; k < textSize; k++) {
 80010de:	2122      	movs	r1, #34	; 0x22
 80010e0:	2018      	movs	r0, #24
 80010e2:	183b      	adds	r3, r7, r0
 80010e4:	185b      	adds	r3, r3, r1
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	b25b      	sxtb	r3, r3
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	3301      	adds	r3, #1
 80010ee:	b2da      	uxtb	r2, r3
 80010f0:	183b      	adds	r3, r7, r0
 80010f2:	185b      	adds	r3, r3, r1
 80010f4:	701a      	strb	r2, [r3, #0]
 80010f6:	2322      	movs	r3, #34	; 0x22
 80010f8:	2218      	movs	r2, #24
 80010fa:	4694      	mov	ip, r2
 80010fc:	44bc      	add	ip, r7
 80010fe:	4463      	add	r3, ip
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	b25b      	sxtb	r3, r3
 8001104:	4a26      	ldr	r2, [pc, #152]	; (80011a0 <drawChar+0x310>)
 8001106:	7812      	ldrb	r2, [r2, #0]
 8001108:	4293      	cmp	r3, r2
 800110a:	da00      	bge.n	800110e <drawChar+0x27e>
 800110c:	e760      	b.n	8000fd0 <drawChar+0x140>
 800110e:	e0d7      	b.n	80012c0 <drawChar+0x430>
						}
					}
//					fillRect(cursorX+i*textSize, cursorY+j*textSize, textSize, textSize, textColor, hspi);
				}
			} else if (bg != textColor) {
 8001110:	4b26      	ldr	r3, [pc, #152]	; (80011ac <drawChar+0x31c>)
 8001112:	881a      	ldrh	r2, [r3, #0]
 8001114:	4b24      	ldr	r3, [pc, #144]	; (80011a8 <drawChar+0x318>)
 8001116:	881b      	ldrh	r3, [r3, #0]
 8001118:	429a      	cmp	r2, r3
 800111a:	d100      	bne.n	800111e <drawChar+0x28e>
 800111c:	e0d0      	b.n	80012c0 <drawChar+0x430>
				if (textSize == 1) {
 800111e:	4b20      	ldr	r3, [pc, #128]	; (80011a0 <drawChar+0x310>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d11c      	bne.n	8001160 <drawChar+0x2d0>
					buffer[i+j*6] = colorFixer(bg);
 8001126:	4b21      	ldr	r3, [pc, #132]	; (80011ac <drawChar+0x31c>)
 8001128:	8818      	ldrh	r0, [r3, #0]
 800112a:	2325      	movs	r3, #37	; 0x25
 800112c:	2218      	movs	r2, #24
 800112e:	4694      	mov	ip, r2
 8001130:	44bc      	add	ip, r7
 8001132:	4463      	add	r3, ip
 8001134:	2100      	movs	r1, #0
 8001136:	5659      	ldrsb	r1, [r3, r1]
 8001138:	2323      	movs	r3, #35	; 0x23
 800113a:	2218      	movs	r2, #24
 800113c:	4694      	mov	ip, r2
 800113e:	44bc      	add	ip, r7
 8001140:	4463      	add	r3, ip
 8001142:	2200      	movs	r2, #0
 8001144:	569a      	ldrsb	r2, [r3, r2]
 8001146:	0013      	movs	r3, r2
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	189b      	adds	r3, r3, r2
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	18cc      	adds	r4, r1, r3
 8001150:	f7ff fb0e 	bl	8000770 <colorFixer>
 8001154:	0003      	movs	r3, r0
 8001156:	0019      	movs	r1, r3
 8001158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800115a:	0062      	lsls	r2, r4, #1
 800115c:	52d1      	strh	r1, [r2, r3]
 800115e:	e0af      	b.n	80012c0 <drawChar+0x430>
				}
				else {
					for (int8_t k = 0; k < textSize; k++) {
 8001160:	2320      	movs	r3, #32
 8001162:	2218      	movs	r2, #24
 8001164:	4694      	mov	ip, r2
 8001166:	44bc      	add	ip, r7
 8001168:	4463      	add	r3, ip
 800116a:	2200      	movs	r2, #0
 800116c:	701a      	strb	r2, [r3, #0]
 800116e:	e09b      	b.n	80012a8 <drawChar+0x418>
						rowOffset = textSize*6;
 8001170:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <drawChar+0x310>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	b29b      	uxth	r3, r3
 8001176:	1c1a      	adds	r2, r3, #0
 8001178:	1c13      	adds	r3, r2, #0
 800117a:	18db      	adds	r3, r3, r3
 800117c:	189b      	adds	r3, r3, r2
 800117e:	18db      	adds	r3, r3, r3
 8001180:	b29a      	uxth	r2, r3
 8001182:	2326      	movs	r3, #38	; 0x26
 8001184:	2118      	movs	r1, #24
 8001186:	468c      	mov	ip, r1
 8001188:	44bc      	add	ip, r7
 800118a:	4463      	add	r3, ip
 800118c:	801a      	strh	r2, [r3, #0]
						for (int8_t l = 0; l < textSize; l++) {
 800118e:	231f      	movs	r3, #31
 8001190:	2218      	movs	r2, #24
 8001192:	4694      	mov	ip, r2
 8001194:	44bc      	add	ip, r7
 8001196:	4463      	add	r3, ip
 8001198:	2200      	movs	r2, #0
 800119a:	701a      	strb	r2, [r3, #0]
 800119c:	e06d      	b.n	800127a <drawChar+0x3ea>
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	200000da 	.word	0x200000da
 80011a4:	080082bc 	.word	0x080082bc
 80011a8:	200000dc 	.word	0x200000dc
 80011ac:	200000de 	.word	0x200000de
							address = (textSize*textSize*j*6)+(i*textSize);
 80011b0:	4bda      	ldr	r3, [pc, #872]	; (800151c <drawChar+0x68c>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	4ad9      	ldr	r2, [pc, #868]	; (800151c <drawChar+0x68c>)
 80011b8:	7812      	ldrb	r2, [r2, #0]
 80011ba:	b292      	uxth	r2, r2
 80011bc:	4353      	muls	r3, r2
 80011be:	b29b      	uxth	r3, r3
 80011c0:	2223      	movs	r2, #35	; 0x23
 80011c2:	2118      	movs	r1, #24
 80011c4:	468c      	mov	ip, r1
 80011c6:	44bc      	add	ip, r7
 80011c8:	4462      	add	r2, ip
 80011ca:	7812      	ldrb	r2, [r2, #0]
 80011cc:	b252      	sxtb	r2, r2
 80011ce:	b292      	uxth	r2, r2
 80011d0:	4353      	muls	r3, r2
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	1c1a      	adds	r2, r3, #0
 80011d6:	1c13      	adds	r3, r2, #0
 80011d8:	18db      	adds	r3, r3, r3
 80011da:	189b      	adds	r3, r3, r2
 80011dc:	18db      	adds	r3, r3, r3
 80011de:	b29a      	uxth	r2, r3
 80011e0:	2325      	movs	r3, #37	; 0x25
 80011e2:	2118      	movs	r1, #24
 80011e4:	468c      	mov	ip, r1
 80011e6:	44bc      	add	ip, r7
 80011e8:	4463      	add	r3, ip
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	b25b      	sxtb	r3, r3
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	49ca      	ldr	r1, [pc, #808]	; (800151c <drawChar+0x68c>)
 80011f2:	7809      	ldrb	r1, [r1, #0]
 80011f4:	b289      	uxth	r1, r1
 80011f6:	434b      	muls	r3, r1
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	18d3      	adds	r3, r2, r3
 80011fc:	b29a      	uxth	r2, r3
 80011fe:	210e      	movs	r1, #14
 8001200:	2018      	movs	r0, #24
 8001202:	183b      	adds	r3, r7, r0
 8001204:	185b      	adds	r3, r3, r1
 8001206:	801a      	strh	r2, [r3, #0]
							address += rowOffset*k+l;
 8001208:	2320      	movs	r3, #32
 800120a:	2218      	movs	r2, #24
 800120c:	4694      	mov	ip, r2
 800120e:	44bc      	add	ip, r7
 8001210:	4463      	add	r3, ip
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	b25b      	sxtb	r3, r3
 8001216:	b29b      	uxth	r3, r3
 8001218:	2226      	movs	r2, #38	; 0x26
 800121a:	2418      	movs	r4, #24
 800121c:	46a4      	mov	ip, r4
 800121e:	44bc      	add	ip, r7
 8001220:	4462      	add	r2, ip
 8001222:	8812      	ldrh	r2, [r2, #0]
 8001224:	4353      	muls	r3, r2
 8001226:	b29a      	uxth	r2, r3
 8001228:	251f      	movs	r5, #31
 800122a:	183b      	adds	r3, r7, r0
 800122c:	195b      	adds	r3, r3, r5
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	b25b      	sxtb	r3, r3
 8001232:	b29b      	uxth	r3, r3
 8001234:	18d3      	adds	r3, r2, r3
 8001236:	b29a      	uxth	r2, r3
 8001238:	183b      	adds	r3, r7, r0
 800123a:	185b      	adds	r3, r3, r1
 800123c:	881b      	ldrh	r3, [r3, #0]
 800123e:	18d3      	adds	r3, r2, r3
 8001240:	b29a      	uxth	r2, r3
 8001242:	183b      	adds	r3, r7, r0
 8001244:	185b      	adds	r3, r3, r1
 8001246:	801a      	strh	r2, [r3, #0]
							buffer[address] = colorFixer(bg);
 8001248:	4bb5      	ldr	r3, [pc, #724]	; (8001520 <drawChar+0x690>)
 800124a:	881a      	ldrh	r2, [r3, #0]
 800124c:	0006      	movs	r6, r0
 800124e:	183b      	adds	r3, r7, r0
 8001250:	185b      	adds	r3, r3, r1
 8001252:	2400      	movs	r4, #0
 8001254:	5f1c      	ldrsh	r4, [r3, r4]
 8001256:	0010      	movs	r0, r2
 8001258:	f7ff fa8a 	bl	8000770 <colorFixer>
 800125c:	0003      	movs	r3, r0
 800125e:	0019      	movs	r1, r3
 8001260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001262:	0062      	lsls	r2, r4, #1
 8001264:	52d1      	strh	r1, [r2, r3]
						for (int8_t l = 0; l < textSize; l++) {
 8001266:	19bb      	adds	r3, r7, r6
 8001268:	195b      	adds	r3, r3, r5
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	b25b      	sxtb	r3, r3
 800126e:	b2db      	uxtb	r3, r3
 8001270:	3301      	adds	r3, #1
 8001272:	b2da      	uxtb	r2, r3
 8001274:	19bb      	adds	r3, r7, r6
 8001276:	195b      	adds	r3, r3, r5
 8001278:	701a      	strb	r2, [r3, #0]
 800127a:	231f      	movs	r3, #31
 800127c:	2218      	movs	r2, #24
 800127e:	4694      	mov	ip, r2
 8001280:	44bc      	add	ip, r7
 8001282:	4463      	add	r3, ip
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	b25b      	sxtb	r3, r3
 8001288:	4aa4      	ldr	r2, [pc, #656]	; (800151c <drawChar+0x68c>)
 800128a:	7812      	ldrb	r2, [r2, #0]
 800128c:	4293      	cmp	r3, r2
 800128e:	db8f      	blt.n	80011b0 <drawChar+0x320>
					for (int8_t k = 0; k < textSize; k++) {
 8001290:	2120      	movs	r1, #32
 8001292:	2018      	movs	r0, #24
 8001294:	183b      	adds	r3, r7, r0
 8001296:	185b      	adds	r3, r3, r1
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	b25b      	sxtb	r3, r3
 800129c:	b2db      	uxtb	r3, r3
 800129e:	3301      	adds	r3, #1
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	183b      	adds	r3, r7, r0
 80012a4:	185b      	adds	r3, r3, r1
 80012a6:	701a      	strb	r2, [r3, #0]
 80012a8:	2320      	movs	r3, #32
 80012aa:	2218      	movs	r2, #24
 80012ac:	4694      	mov	ip, r2
 80012ae:	44bc      	add	ip, r7
 80012b0:	4463      	add	r3, ip
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	b25b      	sxtb	r3, r3
 80012b6:	4a99      	ldr	r2, [pc, #612]	; (800151c <drawChar+0x68c>)
 80012b8:	7812      	ldrb	r2, [r2, #0]
 80012ba:	4293      	cmp	r3, r2
 80012bc:	da00      	bge.n	80012c0 <drawChar+0x430>
 80012be:	e757      	b.n	8001170 <drawChar+0x2e0>
		for (int8_t j=0; j<8; j++, line >>= 1) {
 80012c0:	2123      	movs	r1, #35	; 0x23
 80012c2:	2018      	movs	r0, #24
 80012c4:	183b      	adds	r3, r7, r0
 80012c6:	185b      	adds	r3, r3, r1
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	b25b      	sxtb	r3, r3
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	3301      	adds	r3, #1
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	183b      	adds	r3, r7, r0
 80012d4:	185b      	adds	r3, r3, r1
 80012d6:	701a      	strb	r2, [r3, #0]
 80012d8:	2224      	movs	r2, #36	; 0x24
 80012da:	183b      	adds	r3, r7, r0
 80012dc:	189b      	adds	r3, r3, r2
 80012de:	2118      	movs	r1, #24
 80012e0:	468c      	mov	ip, r1
 80012e2:	44bc      	add	ip, r7
 80012e4:	4462      	add	r2, ip
 80012e6:	7812      	ldrb	r2, [r2, #0]
 80012e8:	0852      	lsrs	r2, r2, #1
 80012ea:	701a      	strb	r2, [r3, #0]
 80012ec:	2323      	movs	r3, #35	; 0x23
 80012ee:	2218      	movs	r2, #24
 80012f0:	4694      	mov	ip, r2
 80012f2:	44bc      	add	ip, r7
 80012f4:	4463      	add	r3, ip
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	b25b      	sxtb	r3, r3
 80012fa:	2b07      	cmp	r3, #7
 80012fc:	dc00      	bgt.n	8001300 <drawChar+0x470>
 80012fe:	e634      	b.n	8000f6a <drawChar+0xda>
	for (int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 8001300:	2125      	movs	r1, #37	; 0x25
 8001302:	2018      	movs	r0, #24
 8001304:	183b      	adds	r3, r7, r0
 8001306:	185b      	adds	r3, r3, r1
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	b25b      	sxtb	r3, r3
 800130c:	b2db      	uxtb	r3, r3
 800130e:	3301      	adds	r3, #1
 8001310:	b2da      	uxtb	r2, r3
 8001312:	183b      	adds	r3, r7, r0
 8001314:	185b      	adds	r3, r3, r1
 8001316:	701a      	strb	r2, [r3, #0]
 8001318:	2325      	movs	r3, #37	; 0x25
 800131a:	2218      	movs	r2, #24
 800131c:	4694      	mov	ip, r2
 800131e:	44bc      	add	ip, r7
 8001320:	4463      	add	r3, ip
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	b25b      	sxtb	r3, r3
 8001326:	2b04      	cmp	r3, #4
 8001328:	dc00      	bgt.n	800132c <drawChar+0x49c>
 800132a:	e600      	b.n	8000f2e <drawChar+0x9e>
				}
			}
		}
	}

	if (bg != textColor) { // If opaque, draw vertical line for last column
 800132c:	4b7c      	ldr	r3, [pc, #496]	; (8001520 <drawChar+0x690>)
 800132e:	881a      	ldrh	r2, [r3, #0]
 8001330:	4b7c      	ldr	r3, [pc, #496]	; (8001524 <drawChar+0x694>)
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	429a      	cmp	r2, r3
 8001336:	d100      	bne.n	800133a <drawChar+0x4aa>
 8001338:	e0ca      	b.n	80014d0 <drawChar+0x640>
		for (int8_t j = 0; j < 8; j++) {
 800133a:	231e      	movs	r3, #30
 800133c:	2218      	movs	r2, #24
 800133e:	4694      	mov	ip, r2
 8001340:	44bc      	add	ip, r7
 8001342:	4463      	add	r3, ip
 8001344:	2200      	movs	r2, #0
 8001346:	701a      	strb	r2, [r3, #0]
 8001348:	e0b8      	b.n	80014bc <drawChar+0x62c>
			if (textSize == 1) {
 800134a:	4b74      	ldr	r3, [pc, #464]	; (800151c <drawChar+0x68c>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d116      	bne.n	8001380 <drawChar+0x4f0>
				buffer[5+j*6] = colorFixer(bg);
 8001352:	4b73      	ldr	r3, [pc, #460]	; (8001520 <drawChar+0x690>)
 8001354:	8819      	ldrh	r1, [r3, #0]
 8001356:	231e      	movs	r3, #30
 8001358:	2218      	movs	r2, #24
 800135a:	4694      	mov	ip, r2
 800135c:	44bc      	add	ip, r7
 800135e:	4463      	add	r3, ip
 8001360:	2200      	movs	r2, #0
 8001362:	569a      	ldrsb	r2, [r3, r2]
 8001364:	0013      	movs	r3, r2
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	189b      	adds	r3, r3, r2
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	1d5c      	adds	r4, r3, #5
 800136e:	0008      	movs	r0, r1
 8001370:	f7ff f9fe 	bl	8000770 <colorFixer>
 8001374:	0003      	movs	r3, r0
 8001376:	0019      	movs	r1, r3
 8001378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800137a:	0062      	lsls	r2, r4, #1
 800137c:	52d1      	strh	r1, [r2, r3]
 800137e:	e091      	b.n	80014a4 <drawChar+0x614>
			}
			else {
				for (int8_t k = 0; k < textSize; k++) {
 8001380:	231d      	movs	r3, #29
 8001382:	2218      	movs	r2, #24
 8001384:	4694      	mov	ip, r2
 8001386:	44bc      	add	ip, r7
 8001388:	4463      	add	r3, ip
 800138a:	2200      	movs	r2, #0
 800138c:	701a      	strb	r2, [r3, #0]
 800138e:	e07d      	b.n	800148c <drawChar+0x5fc>
					for (int8_t l = 0; l < textSize; l++) {
 8001390:	231c      	movs	r3, #28
 8001392:	2218      	movs	r2, #24
 8001394:	4694      	mov	ip, r2
 8001396:	44bc      	add	ip, r7
 8001398:	4463      	add	r3, ip
 800139a:	2200      	movs	r2, #0
 800139c:	701a      	strb	r2, [r3, #0]
 800139e:	e05e      	b.n	800145e <drawChar+0x5ce>
						address = (textSize*textSize*j*6)+(5*textSize);
 80013a0:	4b5e      	ldr	r3, [pc, #376]	; (800151c <drawChar+0x68c>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	4a5d      	ldr	r2, [pc, #372]	; (800151c <drawChar+0x68c>)
 80013a8:	7812      	ldrb	r2, [r2, #0]
 80013aa:	b292      	uxth	r2, r2
 80013ac:	4353      	muls	r3, r2
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	221e      	movs	r2, #30
 80013b2:	2118      	movs	r1, #24
 80013b4:	468c      	mov	ip, r1
 80013b6:	44bc      	add	ip, r7
 80013b8:	4462      	add	r2, ip
 80013ba:	7812      	ldrb	r2, [r2, #0]
 80013bc:	b252      	sxtb	r2, r2
 80013be:	b292      	uxth	r2, r2
 80013c0:	4353      	muls	r3, r2
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	1c1a      	adds	r2, r3, #0
 80013c6:	1c13      	adds	r3, r2, #0
 80013c8:	18db      	adds	r3, r3, r3
 80013ca:	189b      	adds	r3, r3, r2
 80013cc:	18db      	adds	r3, r3, r3
 80013ce:	b29a      	uxth	r2, r3
 80013d0:	4b52      	ldr	r3, [pc, #328]	; (800151c <drawChar+0x68c>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	1c19      	adds	r1, r3, #0
 80013d8:	0089      	lsls	r1, r1, #2
 80013da:	18cb      	adds	r3, r1, r3
 80013dc:	b29b      	uxth	r3, r3
 80013de:	18d3      	adds	r3, r2, r3
 80013e0:	b29a      	uxth	r2, r3
 80013e2:	210e      	movs	r1, #14
 80013e4:	2018      	movs	r0, #24
 80013e6:	183b      	adds	r3, r7, r0
 80013e8:	185b      	adds	r3, r3, r1
 80013ea:	801a      	strh	r2, [r3, #0]
						address += rowOffset*k+l;
 80013ec:	231d      	movs	r3, #29
 80013ee:	2218      	movs	r2, #24
 80013f0:	4694      	mov	ip, r2
 80013f2:	44bc      	add	ip, r7
 80013f4:	4463      	add	r3, ip
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	b25b      	sxtb	r3, r3
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	2226      	movs	r2, #38	; 0x26
 80013fe:	2418      	movs	r4, #24
 8001400:	46a4      	mov	ip, r4
 8001402:	44bc      	add	ip, r7
 8001404:	4462      	add	r2, ip
 8001406:	8812      	ldrh	r2, [r2, #0]
 8001408:	4353      	muls	r3, r2
 800140a:	b29a      	uxth	r2, r3
 800140c:	251c      	movs	r5, #28
 800140e:	183b      	adds	r3, r7, r0
 8001410:	195b      	adds	r3, r3, r5
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	b25b      	sxtb	r3, r3
 8001416:	b29b      	uxth	r3, r3
 8001418:	18d3      	adds	r3, r2, r3
 800141a:	b29a      	uxth	r2, r3
 800141c:	183b      	adds	r3, r7, r0
 800141e:	185b      	adds	r3, r3, r1
 8001420:	881b      	ldrh	r3, [r3, #0]
 8001422:	18d3      	adds	r3, r2, r3
 8001424:	b29a      	uxth	r2, r3
 8001426:	183b      	adds	r3, r7, r0
 8001428:	185b      	adds	r3, r3, r1
 800142a:	801a      	strh	r2, [r3, #0]
						buffer[address] = colorFixer(bg);
 800142c:	4b3c      	ldr	r3, [pc, #240]	; (8001520 <drawChar+0x690>)
 800142e:	881a      	ldrh	r2, [r3, #0]
 8001430:	0006      	movs	r6, r0
 8001432:	183b      	adds	r3, r7, r0
 8001434:	185b      	adds	r3, r3, r1
 8001436:	2400      	movs	r4, #0
 8001438:	5f1c      	ldrsh	r4, [r3, r4]
 800143a:	0010      	movs	r0, r2
 800143c:	f7ff f998 	bl	8000770 <colorFixer>
 8001440:	0003      	movs	r3, r0
 8001442:	0019      	movs	r1, r3
 8001444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001446:	0062      	lsls	r2, r4, #1
 8001448:	52d1      	strh	r1, [r2, r3]
					for (int8_t l = 0; l < textSize; l++) {
 800144a:	19bb      	adds	r3, r7, r6
 800144c:	195b      	adds	r3, r3, r5
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	b25b      	sxtb	r3, r3
 8001452:	b2db      	uxtb	r3, r3
 8001454:	3301      	adds	r3, #1
 8001456:	b2da      	uxtb	r2, r3
 8001458:	19bb      	adds	r3, r7, r6
 800145a:	195b      	adds	r3, r3, r5
 800145c:	701a      	strb	r2, [r3, #0]
 800145e:	231c      	movs	r3, #28
 8001460:	2218      	movs	r2, #24
 8001462:	4694      	mov	ip, r2
 8001464:	44bc      	add	ip, r7
 8001466:	4463      	add	r3, ip
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	b25b      	sxtb	r3, r3
 800146c:	4a2b      	ldr	r2, [pc, #172]	; (800151c <drawChar+0x68c>)
 800146e:	7812      	ldrb	r2, [r2, #0]
 8001470:	4293      	cmp	r3, r2
 8001472:	db95      	blt.n	80013a0 <drawChar+0x510>
				for (int8_t k = 0; k < textSize; k++) {
 8001474:	211d      	movs	r1, #29
 8001476:	2018      	movs	r0, #24
 8001478:	183b      	adds	r3, r7, r0
 800147a:	185b      	adds	r3, r3, r1
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	b25b      	sxtb	r3, r3
 8001480:	b2db      	uxtb	r3, r3
 8001482:	3301      	adds	r3, #1
 8001484:	b2da      	uxtb	r2, r3
 8001486:	183b      	adds	r3, r7, r0
 8001488:	185b      	adds	r3, r3, r1
 800148a:	701a      	strb	r2, [r3, #0]
 800148c:	231d      	movs	r3, #29
 800148e:	2218      	movs	r2, #24
 8001490:	4694      	mov	ip, r2
 8001492:	44bc      	add	ip, r7
 8001494:	4463      	add	r3, ip
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	b25b      	sxtb	r3, r3
 800149a:	4a20      	ldr	r2, [pc, #128]	; (800151c <drawChar+0x68c>)
 800149c:	7812      	ldrb	r2, [r2, #0]
 800149e:	4293      	cmp	r3, r2
 80014a0:	da00      	bge.n	80014a4 <drawChar+0x614>
 80014a2:	e775      	b.n	8001390 <drawChar+0x500>
		for (int8_t j = 0; j < 8; j++) {
 80014a4:	211e      	movs	r1, #30
 80014a6:	2018      	movs	r0, #24
 80014a8:	183b      	adds	r3, r7, r0
 80014aa:	185b      	adds	r3, r3, r1
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	b25b      	sxtb	r3, r3
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	3301      	adds	r3, #1
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	183b      	adds	r3, r7, r0
 80014b8:	185b      	adds	r3, r3, r1
 80014ba:	701a      	strb	r2, [r3, #0]
 80014bc:	231e      	movs	r3, #30
 80014be:	2218      	movs	r2, #24
 80014c0:	4694      	mov	ip, r2
 80014c2:	44bc      	add	ip, r7
 80014c4:	4463      	add	r3, ip
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	b25b      	sxtb	r3, r3
 80014ca:	2b07      	cmp	r3, #7
 80014cc:	dc00      	bgt.n	80014d0 <drawChar+0x640>
 80014ce:	e73c      	b.n	800134a <drawChar+0x4ba>
			}
		}
//		else fillRect(cursorX+5*textSize, cursorY, textSize, 8*textSize, bg, hspi);
	}

	drawBuffer(cursorX, cursorY, 6*textSize, 8*textSize, buffer, bufferSize, hspi);
 80014d0:	4b15      	ldr	r3, [pc, #84]	; (8001528 <drawChar+0x698>)
 80014d2:	7818      	ldrb	r0, [r3, #0]
 80014d4:	4b15      	ldr	r3, [pc, #84]	; (800152c <drawChar+0x69c>)
 80014d6:	7819      	ldrb	r1, [r3, #0]
 80014d8:	4b10      	ldr	r3, [pc, #64]	; (800151c <drawChar+0x68c>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	1c1a      	adds	r2, r3, #0
 80014de:	1c13      	adds	r3, r2, #0
 80014e0:	18db      	adds	r3, r3, r3
 80014e2:	189b      	adds	r3, r3, r2
 80014e4:	18db      	adds	r3, r3, r3
 80014e6:	b2dc      	uxtb	r4, r3
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <drawChar+0x68c>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	b2dd      	uxtb	r5, r3
 80014f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	9202      	str	r2, [sp, #8]
 80014f6:	221a      	movs	r2, #26
 80014f8:	2618      	movs	r6, #24
 80014fa:	46b4      	mov	ip, r6
 80014fc:	44bc      	add	ip, r7
 80014fe:	4462      	add	r2, ip
 8001500:	8812      	ldrh	r2, [r2, #0]
 8001502:	9201      	str	r2, [sp, #4]
 8001504:	9300      	str	r3, [sp, #0]
 8001506:	002b      	movs	r3, r5
 8001508:	0022      	movs	r2, r4
 800150a:	f7ff faa2 	bl	8000a52 <drawBuffer>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	469d      	mov	sp, r3
//	setCursor(cursorX+6, cursorY);
}
 8001512:	46c0      	nop			; (mov r8, r8)
 8001514:	46bd      	mov	sp, r7
 8001516:	b011      	add	sp, #68	; 0x44
 8001518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800151a:	46c0      	nop			; (mov r8, r8)
 800151c:	200000da 	.word	0x200000da
 8001520:	200000de 	.word	0x200000de
 8001524:	200000dc 	.word	0x200000dc
 8001528:	200000d8 	.word	0x200000d8
 800152c:	200000d9 	.word	0x200000d9

08001530 <drawText>:

// this function is slow, and you can definitely see a scrolling speed thing going on
// how to remove this so it prints near instantly?
// maybe not needed if all we're doing is printing time (very few characters)
void drawText(char *str, SPI_HandleTypeDef *hspi) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
	// add text wrap
	for (int i = 0; str[i] != '\0'; i++) {
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	e00b      	b.n	8001558 <drawText+0x28>
		drawChar(str[i], hspi);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	18d3      	adds	r3, r2, r3
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	0011      	movs	r1, r2
 800154c:	0018      	movs	r0, r3
 800154e:	f7ff fc9f 	bl	8000e90 <drawChar>
	for (int i = 0; str[i] != '\0'; i++) {
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	3301      	adds	r3, #1
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	18d3      	adds	r3, r2, r3
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1ed      	bne.n	8001540 <drawText+0x10>
	}
}
 8001564:	46c0      	nop			; (mov r8, r8)
 8001566:	46bd      	mov	sp, r7
 8001568:	b004      	add	sp, #16
 800156a:	bd80      	pop	{r7, pc}

0800156c <drawTextAt>:

void drawTextAt(uint8_t x, uint8_t y, char *str, SPI_HandleTypeDef *hspi) {
 800156c:	b590      	push	{r4, r7, lr}
 800156e:	b087      	sub	sp, #28
 8001570:	af00      	add	r7, sp, #0
 8001572:	60ba      	str	r2, [r7, #8]
 8001574:	607b      	str	r3, [r7, #4]
 8001576:	240f      	movs	r4, #15
 8001578:	193b      	adds	r3, r7, r4
 800157a:	1c02      	adds	r2, r0, #0
 800157c:	701a      	strb	r2, [r3, #0]
 800157e:	200e      	movs	r0, #14
 8001580:	183b      	adds	r3, r7, r0
 8001582:	1c0a      	adds	r2, r1, #0
 8001584:	701a      	strb	r2, [r3, #0]
	// add text wrap
	int i = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]
	setCursor(x,y);
 800158a:	183b      	adds	r3, r7, r0
 800158c:	781a      	ldrb	r2, [r3, #0]
 800158e:	193b      	adds	r3, r7, r4
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	0011      	movs	r1, r2
 8001594:	0018      	movs	r0, r3
 8001596:	f000 f841 	bl	800161c <setCursor>
	for (i = 0; str[i] != '\0'; i++) {
 800159a:	2300      	movs	r3, #0
 800159c:	617b      	str	r3, [r7, #20]
 800159e:	e01d      	b.n	80015dc <drawTextAt+0x70>
		drawChar(str[i], hspi);
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	68ba      	ldr	r2, [r7, #8]
 80015a4:	18d3      	adds	r3, r2, r3
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	0011      	movs	r1, r2
 80015ac:	0018      	movs	r0, r3
 80015ae:	f7ff fc6f 	bl	8000e90 <drawChar>
		setCursor(cursorX+textSize*6, cursorY);
 80015b2:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <drawTextAt+0x84>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	1c1a      	adds	r2, r3, #0
 80015b8:	1c13      	adds	r3, r2, #0
 80015ba:	18db      	adds	r3, r3, r3
 80015bc:	189b      	adds	r3, r3, r2
 80015be:	18db      	adds	r3, r3, r3
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <drawTextAt+0x88>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	18d3      	adds	r3, r2, r3
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <drawTextAt+0x8c>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	0019      	movs	r1, r3
 80015d0:	0010      	movs	r0, r2
 80015d2:	f000 f823 	bl	800161c <setCursor>
	for (i = 0; str[i] != '\0'; i++) {
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	3301      	adds	r3, #1
 80015da:	617b      	str	r3, [r7, #20]
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	68ba      	ldr	r2, [r7, #8]
 80015e0:	18d3      	adds	r3, r2, r3
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1db      	bne.n	80015a0 <drawTextAt+0x34>
	}
//	setCursor(x+i*textSize*6, y);
}
 80015e8:	46c0      	nop			; (mov r8, r8)
 80015ea:	46bd      	mov	sp, r7
 80015ec:	b007      	add	sp, #28
 80015ee:	bd90      	pop	{r4, r7, pc}
 80015f0:	200000da 	.word	0x200000da
 80015f4:	200000d8 	.word	0x200000d8
 80015f8:	200000d9 	.word	0x200000d9

080015fc <setBackgroundColor>:

void setBackgroundColor(uint16_t color) {bg = color;}
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	0002      	movs	r2, r0
 8001604:	1dbb      	adds	r3, r7, #6
 8001606:	801a      	strh	r2, [r3, #0]
 8001608:	4b03      	ldr	r3, [pc, #12]	; (8001618 <setBackgroundColor+0x1c>)
 800160a:	1dba      	adds	r2, r7, #6
 800160c:	8812      	ldrh	r2, [r2, #0]
 800160e:	801a      	strh	r2, [r3, #0]
 8001610:	46c0      	nop			; (mov r8, r8)
 8001612:	46bd      	mov	sp, r7
 8001614:	b002      	add	sp, #8
 8001616:	bd80      	pop	{r7, pc}
 8001618:	200000de 	.word	0x200000de

0800161c <setCursor>:

void setCursor(uint8_t x, uint8_t y) {
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	0002      	movs	r2, r0
 8001624:	1dfb      	adds	r3, r7, #7
 8001626:	701a      	strb	r2, [r3, #0]
 8001628:	1dbb      	adds	r3, r7, #6
 800162a:	1c0a      	adds	r2, r1, #0
 800162c:	701a      	strb	r2, [r3, #0]
	cursorX = x;
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <setCursor+0x2c>)
 8001630:	1dfa      	adds	r2, r7, #7
 8001632:	7812      	ldrb	r2, [r2, #0]
 8001634:	701a      	strb	r2, [r3, #0]
	cursorY = y;
 8001636:	4b05      	ldr	r3, [pc, #20]	; (800164c <setCursor+0x30>)
 8001638:	1dba      	adds	r2, r7, #6
 800163a:	7812      	ldrb	r2, [r2, #0]
 800163c:	701a      	strb	r2, [r3, #0]
}
 800163e:	46c0      	nop			; (mov r8, r8)
 8001640:	46bd      	mov	sp, r7
 8001642:	b002      	add	sp, #8
 8001644:	bd80      	pop	{r7, pc}
 8001646:	46c0      	nop			; (mov r8, r8)
 8001648:	200000d8 	.word	0x200000d8
 800164c:	200000d9 	.word	0x200000d9

08001650 <setTextSize>:

void setTextSize(uint8_t size) {textSize = size;}
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	0002      	movs	r2, r0
 8001658:	1dfb      	adds	r3, r7, #7
 800165a:	701a      	strb	r2, [r3, #0]
 800165c:	4b03      	ldr	r3, [pc, #12]	; (800166c <setTextSize+0x1c>)
 800165e:	1dfa      	adds	r2, r7, #7
 8001660:	7812      	ldrb	r2, [r2, #0]
 8001662:	701a      	strb	r2, [r3, #0]
 8001664:	46c0      	nop			; (mov r8, r8)
 8001666:	46bd      	mov	sp, r7
 8001668:	b002      	add	sp, #8
 800166a:	bd80      	pop	{r7, pc}
 800166c:	200000da 	.word	0x200000da

08001670 <setTextColor>:

void setTextColor(uint16_t color) {textColor = color;}
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	0002      	movs	r2, r0
 8001678:	1dbb      	adds	r3, r7, #6
 800167a:	801a      	strh	r2, [r3, #0]
 800167c:	4b03      	ldr	r3, [pc, #12]	; (800168c <setTextColor+0x1c>)
 800167e:	1dba      	adds	r2, r7, #6
 8001680:	8812      	ldrh	r2, [r2, #0]
 8001682:	801a      	strh	r2, [r3, #0]
 8001684:	46c0      	nop			; (mov r8, r8)
 8001686:	46bd      	mov	sp, r7
 8001688:	b002      	add	sp, #8
 800168a:	bd80      	pop	{r7, pc}
 800168c:	200000dc 	.word	0x200000dc

08001690 <clearScreen>:

void clearScreen(uint16_t backgroundColor, SPI_HandleTypeDef *hspi) {
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	0002      	movs	r2, r0
 8001698:	6039      	str	r1, [r7, #0]
 800169a:	1dbb      	adds	r3, r7, #6
 800169c:	801a      	strh	r2, [r3, #0]
	bg = backgroundColor;
 800169e:	4b07      	ldr	r3, [pc, #28]	; (80016bc <clearScreen+0x2c>)
 80016a0:	1dba      	adds	r2, r7, #6
 80016a2:	8812      	ldrh	r2, [r2, #0]
 80016a4:	801a      	strh	r2, [r3, #0]
	fillScreen(backgroundColor, hspi);
 80016a6:	683a      	ldr	r2, [r7, #0]
 80016a8:	1dbb      	adds	r3, r7, #6
 80016aa:	881b      	ldrh	r3, [r3, #0]
 80016ac:	0011      	movs	r1, r2
 80016ae:	0018      	movs	r0, r3
 80016b0:	f7ff faa5 	bl	8000bfe <fillScreen>
}
 80016b4:	46c0      	nop			; (mov r8, r8)
 80016b6:	46bd      	mov	sp, r7
 80016b8:	b002      	add	sp, #8
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	200000de 	.word	0x200000de

080016c0 <setTime>:


#include "clocks.h"

// set rtc time. uses perosnal struct as arg
void setTime(struct times *t) {
 80016c0:	b590      	push	{r4, r7, lr}
 80016c2:	b089      	sub	sp, #36	; 0x24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef stime = {0};	// change to malloc call? does that work in embedded?
 80016c8:	210c      	movs	r1, #12
 80016ca:	000c      	movs	r4, r1
 80016cc:	187b      	adds	r3, r7, r1
 80016ce:	0018      	movs	r0, r3
 80016d0:	2314      	movs	r3, #20
 80016d2:	001a      	movs	r2, r3
 80016d4:	2100      	movs	r1, #0
 80016d6:	f006 f8d2 	bl	800787e <memset>

	// set using args later
	stime.Hours = t->hr;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	781a      	ldrb	r2, [r3, #0]
 80016de:	0021      	movs	r1, r4
 80016e0:	187b      	adds	r3, r7, r1
 80016e2:	701a      	strb	r2, [r3, #0]
	stime.Minutes = t->min;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	785a      	ldrb	r2, [r3, #1]
 80016e8:	187b      	adds	r3, r7, r1
 80016ea:	705a      	strb	r2, [r3, #1]
	stime.Seconds = t->sec;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	789a      	ldrb	r2, [r3, #2]
 80016f0:	187b      	adds	r3, r7, r1
 80016f2:	709a      	strb	r2, [r3, #2]

	stime.TimeFormat = RTC_HOURFORMAT_24;
 80016f4:	187b      	adds	r3, r7, r1
 80016f6:	2200      	movs	r2, #0
 80016f8:	70da      	strb	r2, [r3, #3]

	// not sure what these do, but probably fine if set to 0 or ignored
	stime.SubSeconds = 0;
 80016fa:	187b      	adds	r3, r7, r1
 80016fc:	2200      	movs	r2, #0
 80016fe:	605a      	str	r2, [r3, #4]
	stime.SecondFraction = 0;
 8001700:	187b      	adds	r3, r7, r1
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]

	stime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;		// add daylight savings later?
 8001706:	187b      	adds	r3, r7, r1
 8001708:	2200      	movs	r2, #0
 800170a:	60da      	str	r2, [r3, #12]
	stime.StoreOperation = RTC_STOREOPERATION_SET;		// not sure what this does
 800170c:	187b      	adds	r3, r7, r1
 800170e:	2280      	movs	r2, #128	; 0x80
 8001710:	02d2      	lsls	r2, r2, #11
 8001712:	611a      	str	r2, [r3, #16]

	// do nothing until done
	// not following BCD format (4-bit digit 1, 4-bit digit 2)
	// while makes program hang? ignore instead?
//	while (HAL_RTC_SetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK);
	HAL_RTC_SetTime(&hrtc, &stime, RTC_FORMAT_BIN);
 8001714:	1879      	adds	r1, r7, r1
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <setTime+0x70>)
 8001718:	2200      	movs	r2, #0
 800171a:	0018      	movs	r0, r3
 800171c:	f004 f9b4 	bl	8005a88 <HAL_RTC_SetTime>

	runClockDisplay(&htim22);
 8001720:	4b04      	ldr	r3, [pc, #16]	; (8001734 <setTime+0x74>)
 8001722:	0018      	movs	r0, r3
 8001724:	f002 f824 	bl	8003770 <runClockDisplay>
}
 8001728:	46c0      	nop			; (mov r8, r8)
 800172a:	46bd      	mov	sp, r7
 800172c:	b009      	add	sp, #36	; 0x24
 800172e:	bd90      	pop	{r4, r7, pc}
 8001730:	20000194 	.word	0x20000194
 8001734:	20000120 	.word	0x20000120

08001738 <setDate>:

// set rtc date. uses personal struct
void setDate(struct dates *d) {
 8001738:	b590      	push	{r4, r7, lr}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
	// ---- date ----
	RTC_DateTypeDef sdate = {0};
 8001740:	240c      	movs	r4, #12
 8001742:	193b      	adds	r3, r7, r4
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]

	sdate.Month = d->month;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	789a      	ldrb	r2, [r3, #2]
 800174c:	193b      	adds	r3, r7, r4
 800174e:	705a      	strb	r2, [r3, #1]
	sdate.Date = d->date;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	78da      	ldrb	r2, [r3, #3]
 8001754:	193b      	adds	r3, r7, r4
 8001756:	709a      	strb	r2, [r3, #2]
	sdate.WeekDay = d->weekday;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	791a      	ldrb	r2, [r3, #4]
 800175c:	193b      	adds	r3, r7, r4
 800175e:	701a      	strb	r2, [r3, #0]
	sdate.Year = d->yr % 100; 		// set only between 0-99. part of the library (!?)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	881b      	ldrh	r3, [r3, #0]
 8001764:	2164      	movs	r1, #100	; 0x64
 8001766:	0018      	movs	r0, r3
 8001768:	f7fe fd54 	bl	8000214 <__aeabi_uidivmod>
 800176c:	000b      	movs	r3, r1
 800176e:	b29b      	uxth	r3, r3
 8001770:	b2da      	uxtb	r2, r3
 8001772:	193b      	adds	r3, r7, r4
 8001774:	70da      	strb	r2, [r3, #3]

	HAL_RTC_SetDate(&hrtc, &sdate, RTC_FORMAT_BIN);
 8001776:	1939      	adds	r1, r7, r4
 8001778:	4b06      	ldr	r3, [pc, #24]	; (8001794 <setDate+0x5c>)
 800177a:	2200      	movs	r2, #0
 800177c:	0018      	movs	r0, r3
 800177e:	f004 faa3 	bl	8005cc8 <HAL_RTC_SetDate>

	runClockDisplay(&htim22);
 8001782:	4b05      	ldr	r3, [pc, #20]	; (8001798 <setDate+0x60>)
 8001784:	0018      	movs	r0, r3
 8001786:	f001 fff3 	bl	8003770 <runClockDisplay>
}
 800178a:	46c0      	nop			; (mov r8, r8)
 800178c:	46bd      	mov	sp, r7
 800178e:	b005      	add	sp, #20
 8001790:	bd90      	pop	{r4, r7, pc}
 8001792:	46c0      	nop			; (mov r8, r8)
 8001794:	20000194 	.word	0x20000194
 8001798:	20000120 	.word	0x20000120

0800179c <setDateTime>:

void setDateTime(struct dates *d, struct times *t) {
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
	setDate(d);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	0018      	movs	r0, r3
 80017aa:	f7ff ffc5 	bl	8001738 <setDate>
	setTime(t);
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	0018      	movs	r0, r3
 80017b2:	f7ff ff85 	bl	80016c0 <setTime>
}
 80017b6:	46c0      	nop			; (mov r8, r8)
 80017b8:	46bd      	mov	sp, r7
 80017ba:	b002      	add	sp, #8
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <setAlarm>:

// for time of day+week
void setAlarm(struct alarmTimes *a) {
 80017c0:	b5b0      	push	{r4, r5, r7, lr}
 80017c2:	b092      	sub	sp, #72	; 0x48
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
	RTC_AlarmTypeDef salarm = {0};
 80017c8:	2520      	movs	r5, #32
 80017ca:	197b      	adds	r3, r7, r5
 80017cc:	0018      	movs	r0, r3
 80017ce:	2328      	movs	r3, #40	; 0x28
 80017d0:	001a      	movs	r2, r3
 80017d2:	2100      	movs	r1, #0
 80017d4:	f006 f853 	bl	800787e <memset>
	RTC_TimeTypeDef salarmtime = {0};
 80017d8:	240c      	movs	r4, #12
 80017da:	193b      	adds	r3, r7, r4
 80017dc:	0018      	movs	r0, r3
 80017de:	2314      	movs	r3, #20
 80017e0:	001a      	movs	r2, r3
 80017e2:	2100      	movs	r1, #0
 80017e4:	f006 f84b 	bl	800787e <memset>

	watchAlarm = *a;	// this is probably fine (value at a is defined already)
 80017e8:	4a23      	ldr	r2, [pc, #140]	; (8001878 <setAlarm+0xb8>)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	0010      	movs	r0, r2
 80017ee:	0019      	movs	r1, r3
 80017f0:	2304      	movs	r3, #4
 80017f2:	001a      	movs	r2, r3
 80017f4:	f006 f83a 	bl	800786c <memcpy>

	// change to set with args
	salarmtime.Hours = a->hr;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	781a      	ldrb	r2, [r3, #0]
 80017fc:	193b      	adds	r3, r7, r4
 80017fe:	701a      	strb	r2, [r3, #0]
	salarmtime.Minutes = a->min;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	785a      	ldrb	r2, [r3, #1]
 8001804:	193b      	adds	r3, r7, r4
 8001806:	705a      	strb	r2, [r3, #1]
	salarmtime.Seconds = a->sec;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	789a      	ldrb	r2, [r3, #2]
 800180c:	193b      	adds	r3, r7, r4
 800180e:	709a      	strb	r2, [r3, #2]
	salarmtime.TimeFormat = RTC_HOURFORMAT_24;
 8001810:	193b      	adds	r3, r7, r4
 8001812:	2200      	movs	r2, #0
 8001814:	70da      	strb	r2, [r3, #3]
	salarmtime.SubSeconds = 0;
 8001816:	0021      	movs	r1, r4
 8001818:	187b      	adds	r3, r7, r1
 800181a:	2200      	movs	r2, #0
 800181c:	605a      	str	r2, [r3, #4]
	salarmtime.SecondFraction = 0;
 800181e:	187b      	adds	r3, r7, r1
 8001820:	2200      	movs	r2, #0
 8001822:	609a      	str	r2, [r3, #8]
	salarmtime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001824:	187b      	adds	r3, r7, r1
 8001826:	2200      	movs	r2, #0
 8001828:	60da      	str	r2, [r3, #12]
	salarmtime.StoreOperation = RTC_STOREOPERATION_RESET;
 800182a:	187b      	adds	r3, r7, r1
 800182c:	2200      	movs	r2, #0
 800182e:	611a      	str	r2, [r3, #16]

	salarm.AlarmTime = salarmtime;
 8001830:	197b      	adds	r3, r7, r5
 8001832:	187a      	adds	r2, r7, r1
 8001834:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001836:	c313      	stmia	r3!, {r0, r1, r4}
 8001838:	ca03      	ldmia	r2!, {r0, r1}
 800183a:	c303      	stmia	r3!, {r0, r1}
	salarm.AlarmMask = RTC_ALARMMASK_NONE;
 800183c:	197b      	adds	r3, r7, r5
 800183e:	2200      	movs	r2, #0
 8001840:	615a      	str	r2, [r3, #20]
	salarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001842:	197b      	adds	r3, r7, r5
 8001844:	2200      	movs	r2, #0
 8001846:	619a      	str	r2, [r3, #24]
	salarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 8001848:	197b      	adds	r3, r7, r5
 800184a:	2280      	movs	r2, #128	; 0x80
 800184c:	05d2      	lsls	r2, r2, #23
 800184e:	61da      	str	r2, [r3, #28]
	salarm.AlarmDateWeekDay = a->weekday;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	78d9      	ldrb	r1, [r3, #3]
 8001854:	197b      	adds	r3, r7, r5
 8001856:	2220      	movs	r2, #32
 8001858:	5499      	strb	r1, [r3, r2]
	salarm.Alarm = RTC_ALARM_A;			// change if using different alarm
 800185a:	197b      	adds	r3, r7, r5
 800185c:	2280      	movs	r2, #128	; 0x80
 800185e:	0052      	lsls	r2, r2, #1
 8001860:	625a      	str	r2, [r3, #36]	; 0x24

	// do nothing until done
	HAL_RTC_SetAlarm_IT(&hrtc, &salarm, RTC_FORMAT_BIN);
 8001862:	1979      	adds	r1, r7, r5
 8001864:	4b05      	ldr	r3, [pc, #20]	; (800187c <setAlarm+0xbc>)
 8001866:	2200      	movs	r2, #0
 8001868:	0018      	movs	r0, r3
 800186a:	f004 fb29 	bl	8005ec0 <HAL_RTC_SetAlarm_IT>
}
 800186e:	46c0      	nop			; (mov r8, r8)
 8001870:	46bd      	mov	sp, r7
 8001872:	b012      	add	sp, #72	; 0x48
 8001874:	bdb0      	pop	{r4, r5, r7, pc}
 8001876:	46c0      	nop			; (mov r8, r8)
 8001878:	20000118 	.word	0x20000118
 800187c:	20000194 	.word	0x20000194

08001880 <HAL_RTC_AlarmAEventCallback>:

// ---- callbacks for interrupts ----
// used for alarm function in project
// meant to send signal to use motor
// change to use hw timer so signal is temporary
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
	// change pin to whatever's accessible
	// using PC0
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_0);
 8001888:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <HAL_RTC_AlarmAEventCallback+0x34>)
 800188a:	2101      	movs	r1, #1
 800188c:	0018      	movs	r0, r3
 800188e:	f002 fe8b 	bl	80045a8 <HAL_GPIO_TogglePin>
	HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_A);
 8001892:	2380      	movs	r3, #128	; 0x80
 8001894:	005a      	lsls	r2, r3, #1
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	0011      	movs	r1, r2
 800189a:	0018      	movs	r0, r3
 800189c:	f004 fc5c 	bl	8006158 <HAL_RTC_DeactivateAlarm>
	isAlarmRunning = 0;
 80018a0:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <HAL_RTC_AlarmAEventCallback+0x38>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	701a      	strb	r2, [r3, #0]
	updateFace.alarm = 1;
 80018a6:	4b05      	ldr	r3, [pc, #20]	; (80018bc <HAL_RTC_AlarmAEventCallback+0x3c>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	709a      	strb	r2, [r3, #2]
//	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
//	HAL_Delay(500);			// does this work in interrupt/callback? might not
//	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
}
 80018ac:	46c0      	nop			; (mov r8, r8)
 80018ae:	46bd      	mov	sp, r7
 80018b0:	b002      	add	sp, #8
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	50000800 	.word	0x50000800
 80018b8:	20000161 	.word	0x20000161
 80018bc:	2000015c 	.word	0x2000015c

080018c0 <HAL_RTCEx_AlarmBEventCallback>:

void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc) {
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
	// toggles pin on end of timer. clears alarm
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_1);
 80018c8:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <HAL_RTCEx_AlarmBEventCallback+0x34>)
 80018ca:	2102      	movs	r1, #2
 80018cc:	0018      	movs	r0, r3
 80018ce:	f002 fe6b 	bl	80045a8 <HAL_GPIO_TogglePin>
	HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_B);
 80018d2:	2380      	movs	r3, #128	; 0x80
 80018d4:	009a      	lsls	r2, r3, #2
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	0011      	movs	r1, r2
 80018da:	0018      	movs	r0, r3
 80018dc:	f004 fc3c 	bl	8006158 <HAL_RTC_DeactivateAlarm>
	isTimerRunning = 0;
 80018e0:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <HAL_RTCEx_AlarmBEventCallback+0x38>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	701a      	strb	r2, [r3, #0]
	updateFace.timer = 1;
 80018e6:	4b05      	ldr	r3, [pc, #20]	; (80018fc <HAL_RTCEx_AlarmBEventCallback+0x3c>)
 80018e8:	2201      	movs	r2, #1
 80018ea:	705a      	strb	r2, [r3, #1]
	/*
	 * should run motor thing and update display to signal user
	 * also clear alarm
	 */
}
 80018ec:	46c0      	nop			; (mov r8, r8)
 80018ee:	46bd      	mov	sp, r7
 80018f0:	b002      	add	sp, #8
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	50000800 	.word	0x50000800
 80018f8:	200001bc 	.word	0x200001bc
 80018fc:	2000015c 	.word	0x2000015c

08001900 <getDateTime>:
	d->date = sdate.Date;
	d->weekday = sdate.WeekDay;
}

// not using getDate and getTime for efficiency (?)
void getDateTime(struct dates *d, struct times *t) {
 8001900:	b590      	push	{r4, r7, lr}
 8001902:	b089      	sub	sp, #36	; 0x24
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
	RTC_DateTypeDef sdate;
	RTC_TimeTypeDef stime;

	// programming manual says to read time after date. something shadow registers.
	// not done automatically in HAL
	HAL_RTC_GetTime(&hrtc, &stime, RTC_FORMAT_BIN);
 800190a:	2308      	movs	r3, #8
 800190c:	18f9      	adds	r1, r7, r3
 800190e:	4b21      	ldr	r3, [pc, #132]	; (8001994 <getDateTime+0x94>)
 8001910:	2200      	movs	r2, #0
 8001912:	0018      	movs	r0, r3
 8001914:	f004 f97c 	bl	8005c10 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sdate, RTC_FORMAT_BIN);
 8001918:	241c      	movs	r4, #28
 800191a:	1939      	adds	r1, r7, r4
 800191c:	4b1d      	ldr	r3, [pc, #116]	; (8001994 <getDateTime+0x94>)
 800191e:	2200      	movs	r2, #0
 8001920:	0018      	movs	r0, r3
 8001922:	f004 fa7f 	bl	8005e24 <HAL_RTC_GetDate>

	d->yr = sdate.Year > 50 ? sdate.Year+1900 : sdate.Year+2000;		// make assumptions on whether it's 19xx or 20xx
 8001926:	193b      	adds	r3, r7, r4
 8001928:	78db      	ldrb	r3, [r3, #3]
 800192a:	2b32      	cmp	r3, #50	; 0x32
 800192c:	d908      	bls.n	8001940 <getDateTime+0x40>
 800192e:	231c      	movs	r3, #28
 8001930:	18fb      	adds	r3, r7, r3
 8001932:	78db      	ldrb	r3, [r3, #3]
 8001934:	b29b      	uxth	r3, r3
 8001936:	4a18      	ldr	r2, [pc, #96]	; (8001998 <getDateTime+0x98>)
 8001938:	4694      	mov	ip, r2
 800193a:	4463      	add	r3, ip
 800193c:	b29b      	uxth	r3, r3
 800193e:	e008      	b.n	8001952 <getDateTime+0x52>
 8001940:	231c      	movs	r3, #28
 8001942:	18fb      	adds	r3, r7, r3
 8001944:	78db      	ldrb	r3, [r3, #3]
 8001946:	b29b      	uxth	r3, r3
 8001948:	22fa      	movs	r2, #250	; 0xfa
 800194a:	00d2      	lsls	r2, r2, #3
 800194c:	4694      	mov	ip, r2
 800194e:	4463      	add	r3, ip
 8001950:	b29b      	uxth	r3, r3
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	8013      	strh	r3, [r2, #0]
	d->month = sdate.Month;
 8001956:	211c      	movs	r1, #28
 8001958:	187b      	adds	r3, r7, r1
 800195a:	785a      	ldrb	r2, [r3, #1]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	709a      	strb	r2, [r3, #2]
	d->date = sdate.Date;
 8001960:	187b      	adds	r3, r7, r1
 8001962:	789a      	ldrb	r2, [r3, #2]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	70da      	strb	r2, [r3, #3]
	d->weekday = sdate.WeekDay;
 8001968:	187b      	adds	r3, r7, r1
 800196a:	781a      	ldrb	r2, [r3, #0]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	711a      	strb	r2, [r3, #4]

	t->hr = stime.Hours;
 8001970:	2108      	movs	r1, #8
 8001972:	187b      	adds	r3, r7, r1
 8001974:	781a      	ldrb	r2, [r3, #0]
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	701a      	strb	r2, [r3, #0]
	t->min = stime.Minutes;
 800197a:	187b      	adds	r3, r7, r1
 800197c:	785a      	ldrb	r2, [r3, #1]
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	705a      	strb	r2, [r3, #1]
	t->sec = stime.Seconds;
 8001982:	187b      	adds	r3, r7, r1
 8001984:	789a      	ldrb	r2, [r3, #2]
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	709a      	strb	r2, [r3, #2]
}
 800198a:	46c0      	nop			; (mov r8, r8)
 800198c:	46bd      	mov	sp, r7
 800198e:	b009      	add	sp, #36	; 0x24
 8001990:	bd90      	pop	{r4, r7, pc}
 8001992:	46c0      	nop			; (mov r8, r8)
 8001994:	20000194 	.word	0x20000194
 8001998:	0000076c 	.word	0x0000076c

0800199c <peripheralClockConfig>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// change if using more peripherals that use LSE
void peripheralClockConfig() {
 800199c:	b580      	push	{r7, lr}
 800199e:	b08a      	sub	sp, #40	; 0x28
 80019a0:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019a2:	003b      	movs	r3, r7
 80019a4:	0018      	movs	r0, r3
 80019a6:	2328      	movs	r3, #40	; 0x28
 80019a8:	001a      	movs	r2, r3
 80019aa:	2100      	movs	r1, #0
 80019ac:	f005 ff67 	bl	800787e <memset>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_LPTIM1;
 80019b0:	003b      	movs	r3, r7
 80019b2:	22a0      	movs	r2, #160	; 0xa0
 80019b4:	601a      	str	r2, [r3, #0]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80019b6:	003b      	movs	r3, r7
 80019b8:	2280      	movs	r2, #128	; 0x80
 80019ba:	0252      	lsls	r2, r2, #9
 80019bc:	605a      	str	r2, [r3, #4]
	PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 80019be:	003b      	movs	r3, r7
 80019c0:	22c0      	movs	r2, #192	; 0xc0
 80019c2:	0312      	lsls	r2, r2, #12
 80019c4:	621a      	str	r2, [r3, #32]

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019c6:	003b      	movs	r3, r7
 80019c8:	0018      	movs	r0, r3
 80019ca:	f003 fe4b 	bl	8005664 <HAL_RCCEx_PeriphCLKConfig>
 80019ce:	1e03      	subs	r3, r0, #0
 80019d0:	d001      	beq.n	80019d6 <peripheralClockConfig+0x3a>
	{
		Error_Handler();
 80019d2:	f000 fbff 	bl	80021d4 <Error_Handler>
	}
}
 80019d6:	46c0      	nop			; (mov r8, r8)
 80019d8:	46bd      	mov	sp, r7
 80019da:	b00a      	add	sp, #40	; 0x28
 80019dc:	bd80      	pop	{r7, pc}
	...

080019e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019e4:	f001 ff30 	bl	8003848 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019e8:	f000 f82e 	bl	8001a48 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  peripheralClockConfig();
 80019ec:	f7ff ffd6 	bl	800199c <peripheralClockConfig>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019f0:	f000 fb5e 	bl	80020b0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80019f4:	f000 f9e6 	bl	8001dc4 <MX_SPI1_Init>
  MX_ADC_Init();
 80019f8:	f000 f8aa 	bl	8001b50 <MX_ADC_Init>
  MX_RTC_Init();
 80019fc:	f000 f934 	bl	8001c68 <MX_RTC_Init>
  MX_TIM21_Init();
 8001a00:	f000 fa1c 	bl	8001e3c <MX_TIM21_Init>
  MX_LPTIM1_Init();
 8001a04:	f000 f908 	bl	8001c18 <MX_LPTIM1_Init>
  MX_DMA_Init();
 8001a08:	f000 fb34 	bl	8002074 <MX_DMA_Init>
  MX_TIM22_Init();
 8001a0c:	f000 faa4 	bl	8001f58 <MX_TIM22_Init>
  /* USER CODE BEGIN 2 */
  	/* initialization for display */
	HAL_Delay(2000);
 8001a10:	23fa      	movs	r3, #250	; 0xfa
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	0018      	movs	r0, r3
 8001a16:	f001 ff77 	bl	8003908 <HAL_Delay>
	TFT_startup(&hspi1);
 8001a1a:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <main+0x64>)
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	f7fe fdf9 	bl	8000614 <TFT_startup>
	clearScreen(ST77XX_BLACK, &hspi1);
 8001a22:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <main+0x64>)
 8001a24:	0019      	movs	r1, r3
 8001a26:	2000      	movs	r0, #0
 8001a28:	f7ff fe32 	bl	8001690 <clearScreen>

	/* start updating display for ui */
	initFace();
 8001a2c:	f001 fbe8 	bl	8003200 <initFace>
	runClockDisplay();
 8001a30:	f001 fe9e 	bl	8003770 <runClockDisplay>
//	  lineTest(&hspi1);
//	  charTest(&hspi1);
//	  textTest(bg, &hspi1);

	  // ui/nav tests or full run. uncomment when ready
	  updateWithButtons();
 8001a34:	f000 fbd4 	bl	80021e0 <updateWithButtons>
	  updateDisplay(&hspi1);
 8001a38:	4b02      	ldr	r3, [pc, #8]	; (8001a44 <main+0x64>)
 8001a3a:	0018      	movs	r0, r3
 8001a3c:	f000 ffdc 	bl	80029f8 <updateDisplay>
  \brief   Wait For Interrupt
  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8001a40:	bf30      	wfi
	  updateWithButtons();
 8001a42:	e7f7      	b.n	8001a34 <main+0x54>
 8001a44:	200001c0 	.word	0x200001c0

08001a48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a48:	b590      	push	{r4, r7, lr}
 8001a4a:	b09f      	sub	sp, #124	; 0x7c
 8001a4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a4e:	2440      	movs	r4, #64	; 0x40
 8001a50:	193b      	adds	r3, r7, r4
 8001a52:	0018      	movs	r0, r3
 8001a54:	2338      	movs	r3, #56	; 0x38
 8001a56:	001a      	movs	r2, r3
 8001a58:	2100      	movs	r1, #0
 8001a5a:	f005 ff10 	bl	800787e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a5e:	232c      	movs	r3, #44	; 0x2c
 8001a60:	18fb      	adds	r3, r7, r3
 8001a62:	0018      	movs	r0, r3
 8001a64:	2314      	movs	r3, #20
 8001a66:	001a      	movs	r2, r3
 8001a68:	2100      	movs	r1, #0
 8001a6a:	f005 ff08 	bl	800787e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a6e:	1d3b      	adds	r3, r7, #4
 8001a70:	0018      	movs	r0, r3
 8001a72:	2328      	movs	r3, #40	; 0x28
 8001a74:	001a      	movs	r2, r3
 8001a76:	2100      	movs	r1, #0
 8001a78:	f005 ff01 	bl	800787e <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a7c:	4b31      	ldr	r3, [pc, #196]	; (8001b44 <SystemClock_Config+0xfc>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a31      	ldr	r2, [pc, #196]	; (8001b48 <SystemClock_Config+0x100>)
 8001a82:	401a      	ands	r2, r3
 8001a84:	4b2f      	ldr	r3, [pc, #188]	; (8001b44 <SystemClock_Config+0xfc>)
 8001a86:	2180      	movs	r1, #128	; 0x80
 8001a88:	0109      	lsls	r1, r1, #4
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	601a      	str	r2, [r3, #0]
  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8001a8e:	f003 f85d 	bl	8004b4c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001a92:	4b2e      	ldr	r3, [pc, #184]	; (8001b4c <SystemClock_Config+0x104>)
 8001a94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a96:	4b2d      	ldr	r3, [pc, #180]	; (8001b4c <SystemClock_Config+0x104>)
 8001a98:	492b      	ldr	r1, [pc, #172]	; (8001b48 <SystemClock_Config+0x100>)
 8001a9a:	400a      	ands	r2, r1
 8001a9c:	651a      	str	r2, [r3, #80]	; 0x50
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8001a9e:	193b      	adds	r3, r7, r4
 8001aa0:	223c      	movs	r2, #60	; 0x3c
 8001aa2:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001aa4:	193b      	adds	r3, r7, r4
 8001aa6:	2280      	movs	r2, #128	; 0x80
 8001aa8:	0052      	lsls	r2, r2, #1
 8001aaa:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001aac:	0021      	movs	r1, r4
 8001aae:	187b      	adds	r3, r7, r1
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001ab4:	187b      	adds	r3, r7, r1
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001aba:	187b      	adds	r3, r7, r1
 8001abc:	2201      	movs	r2, #1
 8001abe:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001ac0:	187b      	adds	r3, r7, r1
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8001ac6:	187b      	adds	r3, r7, r1
 8001ac8:	22a0      	movs	r2, #160	; 0xa0
 8001aca:	0212      	lsls	r2, r2, #8
 8001acc:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001ace:	187b      	adds	r3, r7, r1
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ad4:	187b      	adds	r3, r7, r1
 8001ad6:	0018      	movs	r0, r3
 8001ad8:	f003 f846 	bl	8004b68 <HAL_RCC_OscConfig>
 8001adc:	1e03      	subs	r3, r0, #0
 8001ade:	d001      	beq.n	8001ae4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001ae0:	f000 fb78 	bl	80021d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ae4:	212c      	movs	r1, #44	; 0x2c
 8001ae6:	187b      	adds	r3, r7, r1
 8001ae8:	220f      	movs	r2, #15
 8001aea:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001aec:	187b      	adds	r3, r7, r1
 8001aee:	2200      	movs	r2, #0
 8001af0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001af2:	187b      	adds	r3, r7, r1
 8001af4:	2200      	movs	r2, #0
 8001af6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001af8:	187b      	adds	r3, r7, r1
 8001afa:	2200      	movs	r2, #0
 8001afc:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001afe:	187b      	adds	r3, r7, r1
 8001b00:	2200      	movs	r2, #0
 8001b02:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b04:	187b      	adds	r3, r7, r1
 8001b06:	2100      	movs	r1, #0
 8001b08:	0018      	movs	r0, r3
 8001b0a:	f003 fbfd 	bl	8005308 <HAL_RCC_ClockConfig>
 8001b0e:	1e03      	subs	r3, r0, #0
 8001b10:	d001      	beq.n	8001b16 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001b12:	f000 fb5f 	bl	80021d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_LPTIM1;
 8001b16:	1d3b      	adds	r3, r7, #4
 8001b18:	22a0      	movs	r2, #160	; 0xa0
 8001b1a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001b1c:	1d3b      	adds	r3, r7, #4
 8001b1e:	2280      	movs	r2, #128	; 0x80
 8001b20:	0292      	lsls	r2, r2, #10
 8001b22:	605a      	str	r2, [r3, #4]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 8001b24:	1d3b      	adds	r3, r7, #4
 8001b26:	2200      	movs	r2, #0
 8001b28:	621a      	str	r2, [r3, #32]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b2a:	1d3b      	adds	r3, r7, #4
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	f003 fd99 	bl	8005664 <HAL_RCCEx_PeriphCLKConfig>
 8001b32:	1e03      	subs	r3, r0, #0
 8001b34:	d001      	beq.n	8001b3a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001b36:	f000 fb4d 	bl	80021d4 <Error_Handler>
  }
}
 8001b3a:	46c0      	nop			; (mov r8, r8)
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	b01f      	add	sp, #124	; 0x7c
 8001b40:	bd90      	pop	{r4, r7, pc}
 8001b42:	46c0      	nop			; (mov r8, r8)
 8001b44:	40007000 	.word	0x40007000
 8001b48:	ffffe7ff 	.word	0xffffe7ff
 8001b4c:	40021000 	.word	0x40021000

08001b50 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b56:	003b      	movs	r3, r7
 8001b58:	0018      	movs	r0, r3
 8001b5a:	2308      	movs	r3, #8
 8001b5c:	001a      	movs	r2, r3
 8001b5e:	2100      	movs	r1, #0
 8001b60:	f005 fe8d 	bl	800787e <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 8001b64:	4b2a      	ldr	r3, [pc, #168]	; (8001c10 <MX_ADC_Init+0xc0>)
 8001b66:	4a2b      	ldr	r2, [pc, #172]	; (8001c14 <MX_ADC_Init+0xc4>)
 8001b68:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8001b6a:	4b29      	ldr	r3, [pc, #164]	; (8001c10 <MX_ADC_Init+0xc0>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8001b70:	4b27      	ldr	r3, [pc, #156]	; (8001c10 <MX_ADC_Init+0xc0>)
 8001b72:	22c0      	movs	r2, #192	; 0xc0
 8001b74:	0612      	lsls	r2, r2, #24
 8001b76:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001b78:	4b25      	ldr	r3, [pc, #148]	; (8001c10 <MX_ADC_Init+0xc0>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001b7e:	4b24      	ldr	r3, [pc, #144]	; (8001c10 <MX_ADC_Init+0xc0>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001b84:	4b22      	ldr	r3, [pc, #136]	; (8001c10 <MX_ADC_Init+0xc0>)
 8001b86:	2201      	movs	r2, #1
 8001b88:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b8a:	4b21      	ldr	r3, [pc, #132]	; (8001c10 <MX_ADC_Init+0xc0>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001b90:	4b1f      	ldr	r3, [pc, #124]	; (8001c10 <MX_ADC_Init+0xc0>)
 8001b92:	2220      	movs	r2, #32
 8001b94:	2100      	movs	r1, #0
 8001b96:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001b98:	4b1d      	ldr	r3, [pc, #116]	; (8001c10 <MX_ADC_Init+0xc0>)
 8001b9a:	2221      	movs	r2, #33	; 0x21
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ba0:	4b1b      	ldr	r3, [pc, #108]	; (8001c10 <MX_ADC_Init+0xc0>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ba6:	4b1a      	ldr	r3, [pc, #104]	; (8001c10 <MX_ADC_Init+0xc0>)
 8001ba8:	22c2      	movs	r2, #194	; 0xc2
 8001baa:	32ff      	adds	r2, #255	; 0xff
 8001bac:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001bae:	4b18      	ldr	r3, [pc, #96]	; (8001c10 <MX_ADC_Init+0xc0>)
 8001bb0:	222c      	movs	r2, #44	; 0x2c
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001bb6:	4b16      	ldr	r3, [pc, #88]	; (8001c10 <MX_ADC_Init+0xc0>)
 8001bb8:	2204      	movs	r2, #4
 8001bba:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001bbc:	4b14      	ldr	r3, [pc, #80]	; (8001c10 <MX_ADC_Init+0xc0>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001bc2:	4b13      	ldr	r3, [pc, #76]	; (8001c10 <MX_ADC_Init+0xc0>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8001bc8:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <MX_ADC_Init+0xc0>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001bce:	4b10      	ldr	r3, [pc, #64]	; (8001c10 <MX_ADC_Init+0xc0>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001bd4:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <MX_ADC_Init+0xc0>)
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	f001 feb4 	bl	8003944 <HAL_ADC_Init>
 8001bdc:	1e03      	subs	r3, r0, #0
 8001bde:	d001      	beq.n	8001be4 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8001be0:	f000 faf8 	bl	80021d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001be4:	003b      	movs	r3, r7
 8001be6:	2201      	movs	r2, #1
 8001be8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001bea:	003b      	movs	r3, r7
 8001bec:	2280      	movs	r2, #128	; 0x80
 8001bee:	0152      	lsls	r2, r2, #5
 8001bf0:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001bf2:	003a      	movs	r2, r7
 8001bf4:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <MX_ADC_Init+0xc0>)
 8001bf6:	0011      	movs	r1, r2
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	f002 f817 	bl	8003c2c <HAL_ADC_ConfigChannel>
 8001bfe:	1e03      	subs	r3, r0, #0
 8001c00:	d001      	beq.n	8001c06 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8001c02:	f000 fae7 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001c06:	46c0      	nop			; (mov r8, r8)
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	b002      	add	sp, #8
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	46c0      	nop			; (mov r8, r8)
 8001c10:	20000258 	.word	0x20000258
 8001c14:	40012400 	.word	0x40012400

08001c18 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001c1c:	4b0f      	ldr	r3, [pc, #60]	; (8001c5c <MX_LPTIM1_Init+0x44>)
 8001c1e:	4a10      	ldr	r2, [pc, #64]	; (8001c60 <MX_LPTIM1_Init+0x48>)
 8001c20:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001c22:	4b0e      	ldr	r3, [pc, #56]	; (8001c5c <MX_LPTIM1_Init+0x44>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001c28:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <MX_LPTIM1_Init+0x44>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001c2e:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <MX_LPTIM1_Init+0x44>)
 8001c30:	4a0c      	ldr	r2, [pc, #48]	; (8001c64 <MX_LPTIM1_Init+0x4c>)
 8001c32:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001c34:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <MX_LPTIM1_Init+0x44>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001c3a:	4b08      	ldr	r3, [pc, #32]	; (8001c5c <MX_LPTIM1_Init+0x44>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001c40:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <MX_LPTIM1_Init+0x44>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001c46:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <MX_LPTIM1_Init+0x44>)
 8001c48:	0018      	movs	r0, r3
 8001c4a:	f002 fcdb 	bl	8004604 <HAL_LPTIM_Init>
 8001c4e:	1e03      	subs	r3, r0, #0
 8001c50:	d001      	beq.n	8001c56 <MX_LPTIM1_Init+0x3e>
  {
    Error_Handler();
 8001c52:	f000 fabf 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8001c56:	46c0      	nop			; (mov r8, r8)
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20000164 	.word	0x20000164
 8001c60:	40007c00 	.word	0x40007c00
 8001c64:	0000ffff 	.word	0x0000ffff

08001c68 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b090      	sub	sp, #64	; 0x40
 8001c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001c6e:	232c      	movs	r3, #44	; 0x2c
 8001c70:	18fb      	adds	r3, r7, r3
 8001c72:	0018      	movs	r0, r3
 8001c74:	2314      	movs	r3, #20
 8001c76:	001a      	movs	r2, r3
 8001c78:	2100      	movs	r1, #0
 8001c7a:	f005 fe00 	bl	800787e <memset>
  RTC_DateTypeDef sDate = {0};
 8001c7e:	2328      	movs	r3, #40	; 0x28
 8001c80:	18fb      	adds	r3, r7, r3
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8001c86:	003b      	movs	r3, r7
 8001c88:	0018      	movs	r0, r3
 8001c8a:	2328      	movs	r3, #40	; 0x28
 8001c8c:	001a      	movs	r2, r3
 8001c8e:	2100      	movs	r1, #0
 8001c90:	f005 fdf5 	bl	800787e <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8001c94:	4b49      	ldr	r3, [pc, #292]	; (8001dbc <MX_RTC_Init+0x154>)
 8001c96:	4a4a      	ldr	r2, [pc, #296]	; (8001dc0 <MX_RTC_Init+0x158>)
 8001c98:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001c9a:	4b48      	ldr	r3, [pc, #288]	; (8001dbc <MX_RTC_Init+0x154>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001ca0:	4b46      	ldr	r3, [pc, #280]	; (8001dbc <MX_RTC_Init+0x154>)
 8001ca2:	227f      	movs	r2, #127	; 0x7f
 8001ca4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001ca6:	4b45      	ldr	r3, [pc, #276]	; (8001dbc <MX_RTC_Init+0x154>)
 8001ca8:	22ff      	movs	r2, #255	; 0xff
 8001caa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001cac:	4b43      	ldr	r3, [pc, #268]	; (8001dbc <MX_RTC_Init+0x154>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001cb2:	4b42      	ldr	r3, [pc, #264]	; (8001dbc <MX_RTC_Init+0x154>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001cb8:	4b40      	ldr	r3, [pc, #256]	; (8001dbc <MX_RTC_Init+0x154>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001cbe:	4b3f      	ldr	r3, [pc, #252]	; (8001dbc <MX_RTC_Init+0x154>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001cc4:	4b3d      	ldr	r3, [pc, #244]	; (8001dbc <MX_RTC_Init+0x154>)
 8001cc6:	0018      	movs	r0, r3
 8001cc8:	f003 fe40 	bl	800594c <HAL_RTC_Init>
 8001ccc:	1e03      	subs	r3, r0, #0
 8001cce:	d001      	beq.n	8001cd4 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8001cd0:	f000 fa80 	bl	80021d4 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0;
 8001cd4:	212c      	movs	r1, #44	; 0x2c
 8001cd6:	187b      	adds	r3, r7, r1
 8001cd8:	2200      	movs	r2, #0
 8001cda:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8001cdc:	187b      	adds	r3, r7, r1
 8001cde:	2200      	movs	r2, #0
 8001ce0:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8001ce2:	187b      	adds	r3, r7, r1
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001ce8:	187b      	adds	r3, r7, r1
 8001cea:	2200      	movs	r2, #0
 8001cec:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001cee:	187b      	adds	r3, r7, r1
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001cf4:	1879      	adds	r1, r7, r1
 8001cf6:	4b31      	ldr	r3, [pc, #196]	; (8001dbc <MX_RTC_Init+0x154>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	0018      	movs	r0, r3
 8001cfc:	f003 fec4 	bl	8005a88 <HAL_RTC_SetTime>
 8001d00:	1e03      	subs	r3, r0, #0
 8001d02:	d001      	beq.n	8001d08 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8001d04:	f000 fa66 	bl	80021d4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001d08:	2128      	movs	r1, #40	; 0x28
 8001d0a:	187b      	adds	r3, r7, r1
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001d10:	187b      	adds	r3, r7, r1
 8001d12:	2201      	movs	r2, #1
 8001d14:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8001d16:	187b      	adds	r3, r7, r1
 8001d18:	2201      	movs	r2, #1
 8001d1a:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 8001d1c:	187b      	adds	r3, r7, r1
 8001d1e:	2200      	movs	r2, #0
 8001d20:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001d22:	1879      	adds	r1, r7, r1
 8001d24:	4b25      	ldr	r3, [pc, #148]	; (8001dbc <MX_RTC_Init+0x154>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	0018      	movs	r0, r3
 8001d2a:	f003 ffcd 	bl	8005cc8 <HAL_RTC_SetDate>
 8001d2e:	1e03      	subs	r3, r0, #0
 8001d30:	d001      	beq.n	8001d36 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8001d32:	f000 fa4f 	bl	80021d4 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0;
 8001d36:	003b      	movs	r3, r7
 8001d38:	2200      	movs	r2, #0
 8001d3a:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8001d3c:	003b      	movs	r3, r7
 8001d3e:	2200      	movs	r2, #0
 8001d40:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8001d42:	003b      	movs	r3, r7
 8001d44:	2200      	movs	r2, #0
 8001d46:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8001d48:	003b      	movs	r3, r7
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d4e:	003b      	movs	r3, r7
 8001d50:	2200      	movs	r2, #0
 8001d52:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d54:	003b      	movs	r3, r7
 8001d56:	2200      	movs	r2, #0
 8001d58:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001d5a:	003b      	movs	r3, r7
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001d60:	003b      	movs	r3, r7
 8001d62:	2200      	movs	r2, #0
 8001d64:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001d66:	003b      	movs	r3, r7
 8001d68:	2200      	movs	r2, #0
 8001d6a:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8001d6c:	003b      	movs	r3, r7
 8001d6e:	2220      	movs	r2, #32
 8001d70:	2101      	movs	r1, #1
 8001d72:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8001d74:	003b      	movs	r3, r7
 8001d76:	2280      	movs	r2, #128	; 0x80
 8001d78:	0052      	lsls	r2, r2, #1
 8001d7a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001d7c:	0039      	movs	r1, r7
 8001d7e:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <MX_RTC_Init+0x154>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	0018      	movs	r0, r3
 8001d84:	f004 f89c 	bl	8005ec0 <HAL_RTC_SetAlarm_IT>
 8001d88:	1e03      	subs	r3, r0, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_RTC_Init+0x128>
  {
    Error_Handler();
 8001d8c:	f000 fa22 	bl	80021d4 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 1;
 8001d90:	003b      	movs	r3, r7
 8001d92:	2220      	movs	r2, #32
 8001d94:	2101      	movs	r1, #1
 8001d96:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_B;
 8001d98:	003b      	movs	r3, r7
 8001d9a:	2280      	movs	r2, #128	; 0x80
 8001d9c:	0092      	lsls	r2, r2, #2
 8001d9e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001da0:	0039      	movs	r1, r7
 8001da2:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <MX_RTC_Init+0x154>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	0018      	movs	r0, r3
 8001da8:	f004 f88a 	bl	8005ec0 <HAL_RTC_SetAlarm_IT>
 8001dac:	1e03      	subs	r3, r0, #0
 8001dae:	d001      	beq.n	8001db4 <MX_RTC_Init+0x14c>
  {
    Error_Handler();
 8001db0:	f000 fa10 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001db4:	46c0      	nop			; (mov r8, r8)
 8001db6:	46bd      	mov	sp, r7
 8001db8:	b010      	add	sp, #64	; 0x40
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20000194 	.word	0x20000194
 8001dc0:	40002800 	.word	0x40002800

08001dc4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001dc8:	4b19      	ldr	r3, [pc, #100]	; (8001e30 <MX_SPI1_Init+0x6c>)
 8001dca:	4a1a      	ldr	r2, [pc, #104]	; (8001e34 <MX_SPI1_Init+0x70>)
 8001dcc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001dce:	4b18      	ldr	r3, [pc, #96]	; (8001e30 <MX_SPI1_Init+0x6c>)
 8001dd0:	2282      	movs	r2, #130	; 0x82
 8001dd2:	0052      	lsls	r2, r2, #1
 8001dd4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001dd6:	4b16      	ldr	r3, [pc, #88]	; (8001e30 <MX_SPI1_Init+0x6c>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ddc:	4b14      	ldr	r3, [pc, #80]	; (8001e30 <MX_SPI1_Init+0x6c>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001de2:	4b13      	ldr	r3, [pc, #76]	; (8001e30 <MX_SPI1_Init+0x6c>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001de8:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <MX_SPI1_Init+0x6c>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001dee:	4b10      	ldr	r3, [pc, #64]	; (8001e30 <MX_SPI1_Init+0x6c>)
 8001df0:	2280      	movs	r2, #128	; 0x80
 8001df2:	0092      	lsls	r2, r2, #2
 8001df4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001df6:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <MX_SPI1_Init+0x6c>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <MX_SPI1_Init+0x6c>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e02:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <MX_SPI1_Init+0x6c>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e08:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <MX_SPI1_Init+0x6c>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001e0e:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <MX_SPI1_Init+0x6c>)
 8001e10:	2207      	movs	r2, #7
 8001e12:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <MX_SPI1_Init+0x6c>)
 8001e16:	0018      	movs	r0, r3
 8001e18:	f004 fb24 	bl	8006464 <HAL_SPI_Init>
 8001e1c:	1e03      	subs	r3, r0, #0
 8001e1e:	d001      	beq.n	8001e24 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001e20:	f000 f9d8 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  hspi1.hdmatx = &hdma_spi1_tx;
 8001e24:	4b02      	ldr	r3, [pc, #8]	; (8001e30 <MX_SPI1_Init+0x6c>)
 8001e26:	4a04      	ldr	r2, [pc, #16]	; (8001e38 <MX_SPI1_Init+0x74>)
 8001e28:	649a      	str	r2, [r3, #72]	; 0x48
  /* USER CODE END SPI1_Init 2 */

}
 8001e2a:	46c0      	nop			; (mov r8, r8)
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	200001c0 	.word	0x200001c0
 8001e34:	40013000 	.word	0x40013000
 8001e38:	200002b4 	.word	0x200002b4

08001e3c <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b08a      	sub	sp, #40	; 0x28
 8001e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e42:	2318      	movs	r3, #24
 8001e44:	18fb      	adds	r3, r7, r3
 8001e46:	0018      	movs	r0, r3
 8001e48:	2310      	movs	r3, #16
 8001e4a:	001a      	movs	r2, r3
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	f005 fd16 	bl	800787e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e52:	2310      	movs	r3, #16
 8001e54:	18fb      	adds	r3, r7, r3
 8001e56:	0018      	movs	r0, r3
 8001e58:	2308      	movs	r3, #8
 8001e5a:	001a      	movs	r2, r3
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	f005 fd0e 	bl	800787e <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e62:	003b      	movs	r3, r7
 8001e64:	0018      	movs	r0, r3
 8001e66:	2310      	movs	r3, #16
 8001e68:	001a      	movs	r2, r3
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	f005 fd07 	bl	800787e <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8001e70:	4b37      	ldr	r3, [pc, #220]	; (8001f50 <MX_TIM21_Init+0x114>)
 8001e72:	4a38      	ldr	r2, [pc, #224]	; (8001f54 <MX_TIM21_Init+0x118>)
 8001e74:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 0;
 8001e76:	4b36      	ldr	r3, [pc, #216]	; (8001f50 <MX_TIM21_Init+0x114>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001e7c:	4b34      	ldr	r3, [pc, #208]	; (8001f50 <MX_TIM21_Init+0x114>)
 8001e7e:	2210      	movs	r2, #16
 8001e80:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 0x8000;
 8001e82:	4b33      	ldr	r3, [pc, #204]	; (8001f50 <MX_TIM21_Init+0x114>)
 8001e84:	2280      	movs	r2, #128	; 0x80
 8001e86:	0212      	lsls	r2, r2, #8
 8001e88:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e8a:	4b31      	ldr	r3, [pc, #196]	; (8001f50 <MX_TIM21_Init+0x114>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e90:	4b2f      	ldr	r3, [pc, #188]	; (8001f50 <MX_TIM21_Init+0x114>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8001e96:	4b2e      	ldr	r3, [pc, #184]	; (8001f50 <MX_TIM21_Init+0x114>)
 8001e98:	0018      	movs	r0, r3
 8001e9a:	f004 ffa9 	bl	8006df0 <HAL_TIM_Base_Init>
 8001e9e:	1e03      	subs	r3, r0, #0
 8001ea0:	d001      	beq.n	8001ea6 <MX_TIM21_Init+0x6a>
  {
    Error_Handler();
 8001ea2:	f000 f997 	bl	80021d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8001ea6:	2118      	movs	r1, #24
 8001ea8:	187b      	adds	r3, r7, r1
 8001eaa:	2280      	movs	r2, #128	; 0x80
 8001eac:	0192      	lsls	r2, r2, #6
 8001eae:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8001eb0:	187b      	adds	r3, r7, r1
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8001eb6:	187b      	adds	r3, r7, r1
 8001eb8:	2200      	movs	r2, #0
 8001eba:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 8001ebc:	187b      	adds	r3, r7, r1
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8001ec2:	187a      	adds	r2, r7, r1
 8001ec4:	4b22      	ldr	r3, [pc, #136]	; (8001f50 <MX_TIM21_Init+0x114>)
 8001ec6:	0011      	movs	r1, r2
 8001ec8:	0018      	movs	r0, r3
 8001eca:	f005 f96b 	bl	80071a4 <HAL_TIM_ConfigClockSource>
 8001ece:	1e03      	subs	r3, r0, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_TIM21_Init+0x9a>
  {
    Error_Handler();
 8001ed2:	f000 f97f 	bl	80021d4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim21) != HAL_OK)
 8001ed6:	4b1e      	ldr	r3, [pc, #120]	; (8001f50 <MX_TIM21_Init+0x114>)
 8001ed8:	0018      	movs	r0, r3
 8001eda:	f004 fff9 	bl	8006ed0 <HAL_TIM_OC_Init>
 8001ede:	1e03      	subs	r3, r0, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_TIM21_Init+0xaa>
  {
    Error_Handler();
 8001ee2:	f000 f977 	bl	80021d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ee6:	2110      	movs	r1, #16
 8001ee8:	187b      	adds	r3, r7, r1
 8001eea:	2200      	movs	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eee:	187b      	adds	r3, r7, r1
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8001ef4:	187a      	adds	r2, r7, r1
 8001ef6:	4b16      	ldr	r3, [pc, #88]	; (8001f50 <MX_TIM21_Init+0x114>)
 8001ef8:	0011      	movs	r1, r2
 8001efa:	0018      	movs	r0, r3
 8001efc:	f005 fc2c 	bl	8007758 <HAL_TIMEx_MasterConfigSynchronization>
 8001f00:	1e03      	subs	r3, r0, #0
 8001f02:	d001      	beq.n	8001f08 <MX_TIM21_Init+0xcc>
  {
    Error_Handler();
 8001f04:	f000 f966 	bl	80021d4 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim21, TIM21_ETR_LSE) != HAL_OK)
 8001f08:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <MX_TIM21_Init+0x114>)
 8001f0a:	2103      	movs	r1, #3
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	f005 fc66 	bl	80077de <HAL_TIMEx_RemapConfig>
 8001f12:	1e03      	subs	r3, r0, #0
 8001f14:	d001      	beq.n	8001f1a <MX_TIM21_Init+0xde>
  {
    Error_Handler();
 8001f16:	f000 f95d 	bl	80021d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001f1a:	003b      	movs	r3, r7
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001f20:	003b      	movs	r3, r7
 8001f22:	2200      	movs	r2, #0
 8001f24:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f26:	003b      	movs	r3, r7
 8001f28:	2200      	movs	r2, #0
 8001f2a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f2c:	003b      	movs	r3, r7
 8001f2e:	2200      	movs	r2, #0
 8001f30:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim21, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f32:	0039      	movs	r1, r7
 8001f34:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <MX_TIM21_Init+0x114>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	0018      	movs	r0, r3
 8001f3a:	f005 f8e5 	bl	8007108 <HAL_TIM_OC_ConfigChannel>
 8001f3e:	1e03      	subs	r3, r0, #0
 8001f40:	d001      	beq.n	8001f46 <MX_TIM21_Init+0x10a>
  {
    Error_Handler();
 8001f42:	f000 f947 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8001f46:	46c0      	nop			; (mov r8, r8)
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	b00a      	add	sp, #40	; 0x28
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	46c0      	nop			; (mov r8, r8)
 8001f50:	2000021c 	.word	0x2000021c
 8001f54:	40010800 	.word	0x40010800

08001f58 <MX_TIM22_Init>:
  * @brief TIM22 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM22_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b08a      	sub	sp, #40	; 0x28
 8001f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f5e:	2318      	movs	r3, #24
 8001f60:	18fb      	adds	r3, r7, r3
 8001f62:	0018      	movs	r0, r3
 8001f64:	2310      	movs	r3, #16
 8001f66:	001a      	movs	r2, r3
 8001f68:	2100      	movs	r1, #0
 8001f6a:	f005 fc88 	bl	800787e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f6e:	2310      	movs	r3, #16
 8001f70:	18fb      	adds	r3, r7, r3
 8001f72:	0018      	movs	r0, r3
 8001f74:	2308      	movs	r3, #8
 8001f76:	001a      	movs	r2, r3
 8001f78:	2100      	movs	r1, #0
 8001f7a:	f005 fc80 	bl	800787e <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f7e:	003b      	movs	r3, r7
 8001f80:	0018      	movs	r0, r3
 8001f82:	2310      	movs	r3, #16
 8001f84:	001a      	movs	r2, r3
 8001f86:	2100      	movs	r1, #0
 8001f88:	f005 fc79 	bl	800787e <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 8001f8c:	4b37      	ldr	r3, [pc, #220]	; (800206c <MX_TIM22_Init+0x114>)
 8001f8e:	4a38      	ldr	r2, [pc, #224]	; (8002070 <MX_TIM22_Init+0x118>)
 8001f90:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 0;
 8001f92:	4b36      	ldr	r3, [pc, #216]	; (800206c <MX_TIM22_Init+0x114>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001f98:	4b34      	ldr	r3, [pc, #208]	; (800206c <MX_TIM22_Init+0x114>)
 8001f9a:	2210      	movs	r2, #16
 8001f9c:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 0x8000;
 8001f9e:	4b33      	ldr	r3, [pc, #204]	; (800206c <MX_TIM22_Init+0x114>)
 8001fa0:	2280      	movs	r2, #128	; 0x80
 8001fa2:	0212      	lsls	r2, r2, #8
 8001fa4:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fa6:	4b31      	ldr	r3, [pc, #196]	; (800206c <MX_TIM22_Init+0x114>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fac:	4b2f      	ldr	r3, [pc, #188]	; (800206c <MX_TIM22_Init+0x114>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim22) != HAL_OK)
 8001fb2:	4b2e      	ldr	r3, [pc, #184]	; (800206c <MX_TIM22_Init+0x114>)
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	f004 ff1b 	bl	8006df0 <HAL_TIM_Base_Init>
 8001fba:	1e03      	subs	r3, r0, #0
 8001fbc:	d001      	beq.n	8001fc2 <MX_TIM22_Init+0x6a>
  {
    Error_Handler();
 8001fbe:	f000 f909 	bl	80021d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8001fc2:	2118      	movs	r1, #24
 8001fc4:	187b      	adds	r3, r7, r1
 8001fc6:	2280      	movs	r2, #128	; 0x80
 8001fc8:	0192      	lsls	r2, r2, #6
 8001fca:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8001fcc:	187b      	adds	r3, r7, r1
 8001fce:	2200      	movs	r2, #0
 8001fd0:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8001fd2:	187b      	adds	r3, r7, r1
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 8001fd8:	187b      	adds	r3, r7, r1
 8001fda:	2200      	movs	r2, #0
 8001fdc:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig) != HAL_OK)
 8001fde:	187a      	adds	r2, r7, r1
 8001fe0:	4b22      	ldr	r3, [pc, #136]	; (800206c <MX_TIM22_Init+0x114>)
 8001fe2:	0011      	movs	r1, r2
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	f005 f8dd 	bl	80071a4 <HAL_TIM_ConfigClockSource>
 8001fea:	1e03      	subs	r3, r0, #0
 8001fec:	d001      	beq.n	8001ff2 <MX_TIM22_Init+0x9a>
  {
    Error_Handler();
 8001fee:	f000 f8f1 	bl	80021d4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim22) != HAL_OK)
 8001ff2:	4b1e      	ldr	r3, [pc, #120]	; (800206c <MX_TIM22_Init+0x114>)
 8001ff4:	0018      	movs	r0, r3
 8001ff6:	f004 ff6b 	bl	8006ed0 <HAL_TIM_OC_Init>
 8001ffa:	1e03      	subs	r3, r0, #0
 8001ffc:	d001      	beq.n	8002002 <MX_TIM22_Init+0xaa>
  {
    Error_Handler();
 8001ffe:	f000 f8e9 	bl	80021d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002002:	2110      	movs	r1, #16
 8002004:	187b      	adds	r3, r7, r1
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800200a:	187b      	adds	r3, r7, r1
 800200c:	2200      	movs	r2, #0
 800200e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 8002010:	187a      	adds	r2, r7, r1
 8002012:	4b16      	ldr	r3, [pc, #88]	; (800206c <MX_TIM22_Init+0x114>)
 8002014:	0011      	movs	r1, r2
 8002016:	0018      	movs	r0, r3
 8002018:	f005 fb9e 	bl	8007758 <HAL_TIMEx_MasterConfigSynchronization>
 800201c:	1e03      	subs	r3, r0, #0
 800201e:	d001      	beq.n	8002024 <MX_TIM22_Init+0xcc>
  {
    Error_Handler();
 8002020:	f000 f8d8 	bl	80021d4 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim22, TIM22_ETR_LSE) != HAL_OK)
 8002024:	4b11      	ldr	r3, [pc, #68]	; (800206c <MX_TIM22_Init+0x114>)
 8002026:	2103      	movs	r1, #3
 8002028:	0018      	movs	r0, r3
 800202a:	f005 fbd8 	bl	80077de <HAL_TIMEx_RemapConfig>
 800202e:	1e03      	subs	r3, r0, #0
 8002030:	d001      	beq.n	8002036 <MX_TIM22_Init+0xde>
  {
    Error_Handler();
 8002032:	f000 f8cf 	bl	80021d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002036:	003b      	movs	r3, r7
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800203c:	003b      	movs	r3, r7
 800203e:	2200      	movs	r2, #0
 8002040:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002042:	003b      	movs	r3, r7
 8002044:	2200      	movs	r2, #0
 8002046:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002048:	003b      	movs	r3, r7
 800204a:	2200      	movs	r2, #0
 800204c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim22, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800204e:	0039      	movs	r1, r7
 8002050:	4b06      	ldr	r3, [pc, #24]	; (800206c <MX_TIM22_Init+0x114>)
 8002052:	2200      	movs	r2, #0
 8002054:	0018      	movs	r0, r3
 8002056:	f005 f857 	bl	8007108 <HAL_TIM_OC_ConfigChannel>
 800205a:	1e03      	subs	r3, r0, #0
 800205c:	d001      	beq.n	8002062 <MX_TIM22_Init+0x10a>
  {
    Error_Handler();
 800205e:	f000 f8b9 	bl	80021d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */

}
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	46bd      	mov	sp, r7
 8002066:	b00a      	add	sp, #40	; 0x28
 8002068:	bd80      	pop	{r7, pc}
 800206a:	46c0      	nop			; (mov r8, r8)
 800206c:	20000120 	.word	0x20000120
 8002070:	40011400 	.word	0x40011400

08002074 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800207a:	4b0c      	ldr	r3, [pc, #48]	; (80020ac <MX_DMA_Init+0x38>)
 800207c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800207e:	4b0b      	ldr	r3, [pc, #44]	; (80020ac <MX_DMA_Init+0x38>)
 8002080:	2101      	movs	r1, #1
 8002082:	430a      	orrs	r2, r1
 8002084:	631a      	str	r2, [r3, #48]	; 0x30
 8002086:	4b09      	ldr	r3, [pc, #36]	; (80020ac <MX_DMA_Init+0x38>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	2201      	movs	r2, #1
 800208c:	4013      	ands	r3, r2
 800208e:	607b      	str	r3, [r7, #4]
 8002090:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8002092:	2200      	movs	r2, #0
 8002094:	2100      	movs	r1, #0
 8002096:	200a      	movs	r0, #10
 8002098:	f001 ff2e 	bl	8003ef8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800209c:	200a      	movs	r0, #10
 800209e:	f001 ff40 	bl	8003f22 <HAL_NVIC_EnableIRQ>

}
 80020a2:	46c0      	nop			; (mov r8, r8)
 80020a4:	46bd      	mov	sp, r7
 80020a6:	b002      	add	sp, #8
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	46c0      	nop			; (mov r8, r8)
 80020ac:	40021000 	.word	0x40021000

080020b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020b0:	b590      	push	{r4, r7, lr}
 80020b2:	b089      	sub	sp, #36	; 0x24
 80020b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b6:	240c      	movs	r4, #12
 80020b8:	193b      	adds	r3, r7, r4
 80020ba:	0018      	movs	r0, r3
 80020bc:	2314      	movs	r3, #20
 80020be:	001a      	movs	r2, r3
 80020c0:	2100      	movs	r1, #0
 80020c2:	f005 fbdc 	bl	800787e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020c6:	4b3e      	ldr	r3, [pc, #248]	; (80021c0 <MX_GPIO_Init+0x110>)
 80020c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020ca:	4b3d      	ldr	r3, [pc, #244]	; (80021c0 <MX_GPIO_Init+0x110>)
 80020cc:	2104      	movs	r1, #4
 80020ce:	430a      	orrs	r2, r1
 80020d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80020d2:	4b3b      	ldr	r3, [pc, #236]	; (80021c0 <MX_GPIO_Init+0x110>)
 80020d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d6:	2204      	movs	r2, #4
 80020d8:	4013      	ands	r3, r2
 80020da:	60bb      	str	r3, [r7, #8]
 80020dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020de:	4b38      	ldr	r3, [pc, #224]	; (80021c0 <MX_GPIO_Init+0x110>)
 80020e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020e2:	4b37      	ldr	r3, [pc, #220]	; (80021c0 <MX_GPIO_Init+0x110>)
 80020e4:	2101      	movs	r1, #1
 80020e6:	430a      	orrs	r2, r1
 80020e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80020ea:	4b35      	ldr	r3, [pc, #212]	; (80021c0 <MX_GPIO_Init+0x110>)
 80020ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ee:	2201      	movs	r2, #1
 80020f0:	4013      	ands	r3, r2
 80020f2:	607b      	str	r3, [r7, #4]
 80020f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020f6:	4b32      	ldr	r3, [pc, #200]	; (80021c0 <MX_GPIO_Init+0x110>)
 80020f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020fa:	4b31      	ldr	r3, [pc, #196]	; (80021c0 <MX_GPIO_Init+0x110>)
 80020fc:	2102      	movs	r1, #2
 80020fe:	430a      	orrs	r2, r1
 8002100:	62da      	str	r2, [r3, #44]	; 0x2c
 8002102:	4b2f      	ldr	r3, [pc, #188]	; (80021c0 <MX_GPIO_Init+0x110>)
 8002104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002106:	2202      	movs	r2, #2
 8002108:	4013      	ands	r3, r2
 800210a:	603b      	str	r3, [r7, #0]
 800210c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_7, GPIO_PIN_RESET);
 800210e:	4b2d      	ldr	r3, [pc, #180]	; (80021c4 <MX_GPIO_Init+0x114>)
 8002110:	2200      	movs	r2, #0
 8002112:	218b      	movs	r1, #139	; 0x8b
 8002114:	0018      	movs	r0, r3
 8002116:	f002 fa2a 	bl	800456e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_6, GPIO_PIN_RESET);
 800211a:	4b2b      	ldr	r3, [pc, #172]	; (80021c8 <MX_GPIO_Init+0x118>)
 800211c:	2200      	movs	r2, #0
 800211e:	2142      	movs	r1, #66	; 0x42
 8002120:	0018      	movs	r0, r3
 8002122:	f002 fa24 	bl	800456e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC3 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_7;
 8002126:	0021      	movs	r1, r4
 8002128:	187b      	adds	r3, r7, r1
 800212a:	228b      	movs	r2, #139	; 0x8b
 800212c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800212e:	187b      	adds	r3, r7, r1
 8002130:	2201      	movs	r2, #1
 8002132:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	187b      	adds	r3, r7, r1
 8002136:	2200      	movs	r2, #0
 8002138:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213a:	187b      	adds	r3, r7, r1
 800213c:	2200      	movs	r2, #0
 800213e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002140:	000c      	movs	r4, r1
 8002142:	187b      	adds	r3, r7, r1
 8002144:	4a1f      	ldr	r2, [pc, #124]	; (80021c4 <MX_GPIO_Init+0x114>)
 8002146:	0019      	movs	r1, r3
 8002148:	0010      	movs	r0, r2
 800214a:	f002 f875 	bl	8004238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 800214e:	0021      	movs	r1, r4
 8002150:	187b      	adds	r3, r7, r1
 8002152:	2242      	movs	r2, #66	; 0x42
 8002154:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002156:	187b      	adds	r3, r7, r1
 8002158:	2201      	movs	r2, #1
 800215a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	187b      	adds	r3, r7, r1
 800215e:	2200      	movs	r2, #0
 8002160:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002162:	187b      	adds	r3, r7, r1
 8002164:	2200      	movs	r2, #0
 8002166:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002168:	000c      	movs	r4, r1
 800216a:	187b      	adds	r3, r7, r1
 800216c:	4a16      	ldr	r2, [pc, #88]	; (80021c8 <MX_GPIO_Init+0x118>)
 800216e:	0019      	movs	r1, r3
 8002170:	0010      	movs	r0, r2
 8002172:	f002 f861 	bl	8004238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002176:	0021      	movs	r1, r4
 8002178:	187b      	adds	r3, r7, r1
 800217a:	4a14      	ldr	r2, [pc, #80]	; (80021cc <MX_GPIO_Init+0x11c>)
 800217c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800217e:	187b      	adds	r3, r7, r1
 8002180:	4a13      	ldr	r2, [pc, #76]	; (80021d0 <MX_GPIO_Init+0x120>)
 8002182:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002184:	187b      	adds	r3, r7, r1
 8002186:	2202      	movs	r2, #2
 8002188:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800218a:	187b      	adds	r3, r7, r1
 800218c:	4a0e      	ldr	r2, [pc, #56]	; (80021c8 <MX_GPIO_Init+0x118>)
 800218e:	0019      	movs	r1, r3
 8002190:	0010      	movs	r0, r2
 8002192:	f002 f851 	bl	8004238 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8002196:	2200      	movs	r2, #0
 8002198:	2100      	movs	r1, #0
 800219a:	2006      	movs	r0, #6
 800219c:	f001 feac 	bl	8003ef8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80021a0:	2006      	movs	r0, #6
 80021a2:	f001 febe 	bl	8003f22 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80021a6:	2200      	movs	r2, #0
 80021a8:	2100      	movs	r1, #0
 80021aa:	2007      	movs	r0, #7
 80021ac:	f001 fea4 	bl	8003ef8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80021b0:	2007      	movs	r0, #7
 80021b2:	f001 feb6 	bl	8003f22 <HAL_NVIC_EnableIRQ>

}
 80021b6:	46c0      	nop			; (mov r8, r8)
 80021b8:	46bd      	mov	sp, r7
 80021ba:	b009      	add	sp, #36	; 0x24
 80021bc:	bd90      	pop	{r4, r7, pc}
 80021be:	46c0      	nop			; (mov r8, r8)
 80021c0:	40021000 	.word	0x40021000
 80021c4:	50000800 	.word	0x50000800
 80021c8:	50000400 	.word	0x50000400
 80021cc:	0000e004 	.word	0x0000e004
 80021d0:	10110000 	.word	0x10110000

080021d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80021d8:	46c0      	nop			; (mov r8, r8)
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
	...

080021e0 <updateWithButtons>:
	"oct ",
	"nov ",
	"dec "
};

void updateWithButtons() {
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
	/* program flow:
	 *   check current face used
	 *   check current variables and check button pressed
	 */
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);		// should run for any button
 80021e4:	4b2c      	ldr	r3, [pc, #176]	; (8002298 <updateWithButtons+0xb8>)
 80021e6:	2108      	movs	r1, #8
 80021e8:	0018      	movs	r0, r3
 80021ea:	f002 f9dd 	bl	80045a8 <HAL_GPIO_TogglePin>

	// button 1 changes the face on screen.
	if (buttons.is1Pressed) {
 80021ee:	4b2b      	ldr	r3, [pc, #172]	; (800229c <updateWithButtons+0xbc>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d030      	beq.n	800225a <updateWithButtons+0x7a>
		buttons.is1Pressed = 0;
 80021f8:	4b28      	ldr	r3, [pc, #160]	; (800229c <updateWithButtons+0xbc>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	701a      	strb	r2, [r3, #0]
		faceOnDisplay = (faceOnDisplay + 1) % NUM_FACES;
 80021fe:	4b28      	ldr	r3, [pc, #160]	; (80022a0 <updateWithButtons+0xc0>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	3301      	adds	r3, #1
 8002204:	4a27      	ldr	r2, [pc, #156]	; (80022a4 <updateWithButtons+0xc4>)
 8002206:	4013      	ands	r3, r2
 8002208:	d504      	bpl.n	8002214 <updateWithButtons+0x34>
 800220a:	3b01      	subs	r3, #1
 800220c:	2204      	movs	r2, #4
 800220e:	4252      	negs	r2, r2
 8002210:	4313      	orrs	r3, r2
 8002212:	3301      	adds	r3, #1
 8002214:	b2da      	uxtb	r2, r3
 8002216:	4b22      	ldr	r3, [pc, #136]	; (80022a0 <updateWithButtons+0xc0>)
 8002218:	701a      	strb	r2, [r3, #0]
		isFaceBeingChanged = 1;
 800221a:	4b23      	ldr	r3, [pc, #140]	; (80022a8 <updateWithButtons+0xc8>)
 800221c:	2201      	movs	r2, #1
 800221e:	701a      	strb	r2, [r3, #0]
		switch (faceOnDisplay) {
 8002220:	4b1f      	ldr	r3, [pc, #124]	; (80022a0 <updateWithButtons+0xc0>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d00c      	beq.n	8002242 <updateWithButtons+0x62>
 8002228:	dc02      	bgt.n	8002230 <updateWithButtons+0x50>
 800222a:	2b00      	cmp	r3, #0
 800222c:	d005      	beq.n	800223a <updateWithButtons+0x5a>
			case faceClock: updateFace.clock = 1; break;
			case faceTimer: updateFace.timer = 1; break;
			case faceAlarm: updateFace.alarm = 1; break;
			case faceStopwatch: updateFace.stopwatch = 1; break;
			default: break;
 800222e:	e015      	b.n	800225c <updateWithButtons+0x7c>
		switch (faceOnDisplay) {
 8002230:	2b02      	cmp	r3, #2
 8002232:	d00a      	beq.n	800224a <updateWithButtons+0x6a>
 8002234:	2b03      	cmp	r3, #3
 8002236:	d00c      	beq.n	8002252 <updateWithButtons+0x72>
			default: break;
 8002238:	e010      	b.n	800225c <updateWithButtons+0x7c>
			case faceClock: updateFace.clock = 1; break;
 800223a:	4b1c      	ldr	r3, [pc, #112]	; (80022ac <updateWithButtons+0xcc>)
 800223c:	2201      	movs	r2, #1
 800223e:	701a      	strb	r2, [r3, #0]
 8002240:	e00c      	b.n	800225c <updateWithButtons+0x7c>
			case faceTimer: updateFace.timer = 1; break;
 8002242:	4b1a      	ldr	r3, [pc, #104]	; (80022ac <updateWithButtons+0xcc>)
 8002244:	2201      	movs	r2, #1
 8002246:	705a      	strb	r2, [r3, #1]
 8002248:	e008      	b.n	800225c <updateWithButtons+0x7c>
			case faceAlarm: updateFace.alarm = 1; break;
 800224a:	4b18      	ldr	r3, [pc, #96]	; (80022ac <updateWithButtons+0xcc>)
 800224c:	2201      	movs	r2, #1
 800224e:	709a      	strb	r2, [r3, #2]
 8002250:	e004      	b.n	800225c <updateWithButtons+0x7c>
			case faceStopwatch: updateFace.stopwatch = 1; break;
 8002252:	4b16      	ldr	r3, [pc, #88]	; (80022ac <updateWithButtons+0xcc>)
 8002254:	2201      	movs	r2, #1
 8002256:	70da      	strb	r2, [r3, #3]
 8002258:	e000      	b.n	800225c <updateWithButtons+0x7c>
		}
	}
 800225a:	46c0      	nop			; (mov r8, r8)

	if (faceOnDisplay == faceClock) updateClockState();
 800225c:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <updateWithButtons+0xc0>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d102      	bne.n	800226a <updateWithButtons+0x8a>
 8002264:	f000 f824 	bl	80022b0 <updateClockState>
	else if (faceOnDisplay == faceTimer) updateTimerState();
	else if (faceOnDisplay == faceAlarm) updateAlarmState();
	else if (faceOnDisplay == faceStopwatch) updateStopwatchState();
}
 8002268:	e013      	b.n	8002292 <updateWithButtons+0xb2>
	else if (faceOnDisplay == faceTimer) updateTimerState();
 800226a:	4b0d      	ldr	r3, [pc, #52]	; (80022a0 <updateWithButtons+0xc0>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d102      	bne.n	8002278 <updateWithButtons+0x98>
 8002272:	f000 f939 	bl	80024e8 <updateTimerState>
}
 8002276:	e00c      	b.n	8002292 <updateWithButtons+0xb2>
	else if (faceOnDisplay == faceAlarm) updateAlarmState();
 8002278:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <updateWithButtons+0xc0>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b02      	cmp	r3, #2
 800227e:	d102      	bne.n	8002286 <updateWithButtons+0xa6>
 8002280:	f000 fa48 	bl	8002714 <updateAlarmState>
}
 8002284:	e005      	b.n	8002292 <updateWithButtons+0xb2>
	else if (faceOnDisplay == faceStopwatch) updateStopwatchState();
 8002286:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <updateWithButtons+0xc0>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	2b03      	cmp	r3, #3
 800228c:	d101      	bne.n	8002292 <updateWithButtons+0xb2>
 800228e:	f000 fb65 	bl	800295c <updateStopwatchState>
}
 8002292:	46c0      	nop			; (mov r8, r8)
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	50000800 	.word	0x50000800
 800229c:	200001b8 	.word	0x200001b8
 80022a0:	20000105 	.word	0x20000105
 80022a4:	80000003 	.word	0x80000003
 80022a8:	20000104 	.word	0x20000104
 80022ac:	2000015c 	.word	0x2000015c

080022b0 <updateClockState>:
 *     the clock is updated and we revert back to default mode.
 *
 * notes:
 *   make date setting more robust (invalidate date entries when that day of month doesn't exist or just change modulo)
 */
void updateClockState() {
 80022b0:	b5b0      	push	{r4, r5, r7, lr}
 80022b2:	af00      	add	r7, sp, #0
	// change fields up, do nothing if not setting clock
	if (buttons.is2Pressed && clockVars.isBeingSet) {
 80022b4:	4b87      	ldr	r3, [pc, #540]	; (80024d4 <updateClockState+0x224>)
 80022b6:	785b      	ldrb	r3, [r3, #1]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d061      	beq.n	8002382 <updateClockState+0xd2>
 80022be:	4b86      	ldr	r3, [pc, #536]	; (80024d8 <updateClockState+0x228>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d05d      	beq.n	8002382 <updateClockState+0xd2>
		buttons.is2Pressed = 0;
 80022c6:	4b83      	ldr	r3, [pc, #524]	; (80024d4 <updateClockState+0x224>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	705a      	strb	r2, [r3, #1]
		updateFace.clock = 1;
 80022cc:	4b83      	ldr	r3, [pc, #524]	; (80024dc <updateClockState+0x22c>)
 80022ce:	2201      	movs	r2, #1
 80022d0:	701a      	strb	r2, [r3, #0]
		switch (clockVars.fieldBeingSet) {
 80022d2:	4b81      	ldr	r3, [pc, #516]	; (80024d8 <updateClockState+0x228>)
 80022d4:	785b      	ldrb	r3, [r3, #1]
 80022d6:	2b05      	cmp	r3, #5
 80022d8:	d855      	bhi.n	8002386 <updateClockState+0xd6>
 80022da:	009a      	lsls	r2, r3, #2
 80022dc:	4b80      	ldr	r3, [pc, #512]	; (80024e0 <updateClockState+0x230>)
 80022de:	18d3      	adds	r3, r2, r3
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	469f      	mov	pc, r3
			case 1: clockVars.timeToSet->min = (clockVars.timeToSet->min+1) % 60; break;
 80022e4:	4b7c      	ldr	r3, [pc, #496]	; (80024d8 <updateClockState+0x228>)
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	785b      	ldrb	r3, [r3, #1]
 80022ea:	3301      	adds	r3, #1
 80022ec:	213c      	movs	r1, #60	; 0x3c
 80022ee:	0018      	movs	r0, r3
 80022f0:	f7fe f87a 	bl	80003e8 <__aeabi_idivmod>
 80022f4:	000b      	movs	r3, r1
 80022f6:	001a      	movs	r2, r3
 80022f8:	4b77      	ldr	r3, [pc, #476]	; (80024d8 <updateClockState+0x228>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	b2d2      	uxtb	r2, r2
 80022fe:	705a      	strb	r2, [r3, #1]
 8002300:	e042      	b.n	8002388 <updateClockState+0xd8>
			case 2: clockVars.timeToSet->hr = (clockVars.timeToSet->hr+1) % 24; break;
 8002302:	4b75      	ldr	r3, [pc, #468]	; (80024d8 <updateClockState+0x228>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	3301      	adds	r3, #1
 800230a:	2118      	movs	r1, #24
 800230c:	0018      	movs	r0, r3
 800230e:	f7fe f86b 	bl	80003e8 <__aeabi_idivmod>
 8002312:	000b      	movs	r3, r1
 8002314:	001a      	movs	r2, r3
 8002316:	4b70      	ldr	r3, [pc, #448]	; (80024d8 <updateClockState+0x228>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	701a      	strb	r2, [r3, #0]
 800231e:	e033      	b.n	8002388 <updateClockState+0xd8>
			case 3: clockVars.dateToSet->yr++; break;		// supposed to be between large numbers. no need for bounds checking
 8002320:	4b6d      	ldr	r3, [pc, #436]	; (80024d8 <updateClockState+0x228>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	881a      	ldrh	r2, [r3, #0]
 8002326:	3201      	adds	r2, #1
 8002328:	b292      	uxth	r2, r2
 800232a:	801a      	strh	r2, [r3, #0]
 800232c:	e02c      	b.n	8002388 <updateClockState+0xd8>
			case 4: clockVars.dateToSet->month = (clockVars.dateToSet->month+1) % 12 + 1; break;
 800232e:	4b6a      	ldr	r3, [pc, #424]	; (80024d8 <updateClockState+0x228>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	789b      	ldrb	r3, [r3, #2]
 8002334:	3301      	adds	r3, #1
 8002336:	210c      	movs	r1, #12
 8002338:	0018      	movs	r0, r3
 800233a:	f7fe f855 	bl	80003e8 <__aeabi_idivmod>
 800233e:	000b      	movs	r3, r1
 8002340:	b2da      	uxtb	r2, r3
 8002342:	4b65      	ldr	r3, [pc, #404]	; (80024d8 <updateClockState+0x228>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	3201      	adds	r2, #1
 8002348:	b2d2      	uxtb	r2, r2
 800234a:	709a      	strb	r2, [r3, #2]
 800234c:	e01c      	b.n	8002388 <updateClockState+0xd8>
			case 5: clockVars.dateToSet->date = (clockVars.dateToSet->date+1) % maxDaysInMonth(clockVars.dateToSet->month, clockVars.dateToSet->yr); break;		// make more robust?
 800234e:	4b62      	ldr	r3, [pc, #392]	; (80024d8 <updateClockState+0x228>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	78db      	ldrb	r3, [r3, #3]
 8002354:	1c5c      	adds	r4, r3, #1
 8002356:	4b60      	ldr	r3, [pc, #384]	; (80024d8 <updateClockState+0x228>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	789a      	ldrb	r2, [r3, #2]
 800235c:	4b5e      	ldr	r3, [pc, #376]	; (80024d8 <updateClockState+0x228>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	881b      	ldrh	r3, [r3, #0]
 8002362:	0019      	movs	r1, r3
 8002364:	0010      	movs	r0, r2
 8002366:	f000 feeb 	bl	8003140 <maxDaysInMonth>
 800236a:	0003      	movs	r3, r0
 800236c:	0019      	movs	r1, r3
 800236e:	0020      	movs	r0, r4
 8002370:	f7fe f83a 	bl	80003e8 <__aeabi_idivmod>
 8002374:	000b      	movs	r3, r1
 8002376:	001a      	movs	r2, r3
 8002378:	4b57      	ldr	r3, [pc, #348]	; (80024d8 <updateClockState+0x228>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	b2d2      	uxtb	r2, r2
 800237e:	70da      	strb	r2, [r3, #3]
 8002380:	e002      	b.n	8002388 <updateClockState+0xd8>
			default: break;
		}
	}
 8002382:	46c0      	nop			; (mov r8, r8)
 8002384:	e000      	b.n	8002388 <updateClockState+0xd8>
			default: break;
 8002386:	46c0      	nop			; (mov r8, r8)
	// change fields down, do nothing if not setting clock
	if (buttons.is3Pressed && clockVars.isBeingSet) {
 8002388:	4b52      	ldr	r3, [pc, #328]	; (80024d4 <updateClockState+0x224>)
 800238a:	789b      	ldrb	r3, [r3, #2]
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d065      	beq.n	800245e <updateClockState+0x1ae>
 8002392:	4b51      	ldr	r3, [pc, #324]	; (80024d8 <updateClockState+0x228>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d061      	beq.n	800245e <updateClockState+0x1ae>
		buttons.is3Pressed = 0;
 800239a:	4b4e      	ldr	r3, [pc, #312]	; (80024d4 <updateClockState+0x224>)
 800239c:	2200      	movs	r2, #0
 800239e:	709a      	strb	r2, [r3, #2]
		updateFace.clock = 1;
 80023a0:	4b4e      	ldr	r3, [pc, #312]	; (80024dc <updateClockState+0x22c>)
 80023a2:	2201      	movs	r2, #1
 80023a4:	701a      	strb	r2, [r3, #0]
		switch (clockVars.fieldBeingSet) {
 80023a6:	4b4c      	ldr	r3, [pc, #304]	; (80024d8 <updateClockState+0x228>)
 80023a8:	785b      	ldrb	r3, [r3, #1]
 80023aa:	2b05      	cmp	r3, #5
 80023ac:	d859      	bhi.n	8002462 <updateClockState+0x1b2>
 80023ae:	009a      	lsls	r2, r3, #2
 80023b0:	4b4c      	ldr	r3, [pc, #304]	; (80024e4 <updateClockState+0x234>)
 80023b2:	18d3      	adds	r3, r2, r3
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	469f      	mov	pc, r3
			case 1:
				if (clockVars.timeToSet->min == 0) clockVars.timeToSet->min = 59;
 80023b8:	4b47      	ldr	r3, [pc, #284]	; (80024d8 <updateClockState+0x228>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	785b      	ldrb	r3, [r3, #1]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d104      	bne.n	80023cc <updateClockState+0x11c>
 80023c2:	4b45      	ldr	r3, [pc, #276]	; (80024d8 <updateClockState+0x228>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	223b      	movs	r2, #59	; 0x3b
 80023c8:	705a      	strb	r2, [r3, #1]
				else clockVars.timeToSet->min--;
				break;
 80023ca:	e04b      	b.n	8002464 <updateClockState+0x1b4>
				else clockVars.timeToSet->min--;
 80023cc:	4b42      	ldr	r3, [pc, #264]	; (80024d8 <updateClockState+0x228>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	785a      	ldrb	r2, [r3, #1]
 80023d2:	3a01      	subs	r2, #1
 80023d4:	b2d2      	uxtb	r2, r2
 80023d6:	705a      	strb	r2, [r3, #1]
				break;
 80023d8:	e044      	b.n	8002464 <updateClockState+0x1b4>
			case 2:
				if (clockVars.timeToSet->hr == 0) clockVars.timeToSet->hr = 23;
 80023da:	4b3f      	ldr	r3, [pc, #252]	; (80024d8 <updateClockState+0x228>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d104      	bne.n	80023ee <updateClockState+0x13e>
 80023e4:	4b3c      	ldr	r3, [pc, #240]	; (80024d8 <updateClockState+0x228>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	2217      	movs	r2, #23
 80023ea:	701a      	strb	r2, [r3, #0]
				else clockVars.timeToSet->hr--;
				break;
 80023ec:	e03a      	b.n	8002464 <updateClockState+0x1b4>
				else clockVars.timeToSet->hr--;
 80023ee:	4b3a      	ldr	r3, [pc, #232]	; (80024d8 <updateClockState+0x228>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	781a      	ldrb	r2, [r3, #0]
 80023f4:	3a01      	subs	r2, #1
 80023f6:	b2d2      	uxtb	r2, r2
 80023f8:	701a      	strb	r2, [r3, #0]
				break;
 80023fa:	e033      	b.n	8002464 <updateClockState+0x1b4>
			case 3: clockVars.dateToSet->yr--; break;		// supposed to be from 1950-2050. no need to do bounds checking
 80023fc:	4b36      	ldr	r3, [pc, #216]	; (80024d8 <updateClockState+0x228>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	881a      	ldrh	r2, [r3, #0]
 8002402:	3a01      	subs	r2, #1
 8002404:	b292      	uxth	r2, r2
 8002406:	801a      	strh	r2, [r3, #0]
 8002408:	e02c      	b.n	8002464 <updateClockState+0x1b4>
			case 4: clockVars.dateToSet->month = clockVars.dateToSet->month == 1 ? 12 : clockVars.dateToSet->month-1; break;
 800240a:	4b33      	ldr	r3, [pc, #204]	; (80024d8 <updateClockState+0x228>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	789b      	ldrb	r3, [r3, #2]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d005      	beq.n	8002420 <updateClockState+0x170>
 8002414:	4b30      	ldr	r3, [pc, #192]	; (80024d8 <updateClockState+0x228>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	789b      	ldrb	r3, [r3, #2]
 800241a:	3b01      	subs	r3, #1
 800241c:	b2da      	uxtb	r2, r3
 800241e:	e000      	b.n	8002422 <updateClockState+0x172>
 8002420:	220c      	movs	r2, #12
 8002422:	4b2d      	ldr	r3, [pc, #180]	; (80024d8 <updateClockState+0x228>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	709a      	strb	r2, [r3, #2]
 8002428:	e01c      	b.n	8002464 <updateClockState+0x1b4>
				if (clockVars.dateToSet->month == RTC_MONTH_JANUARY) clockVars.dateToSet->month = RTC_MONTH_DECEMBER;
				else clockVars.dateToSet->month--;
			case 5:
				if (clockVars.dateToSet->date == 0) clockVars.dateToSet->date = maxDaysInMonth(clockVars.dateToSet->month, clockVars.dateToSet->yr);
 800242a:	4b2b      	ldr	r3, [pc, #172]	; (80024d8 <updateClockState+0x228>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	78db      	ldrb	r3, [r3, #3]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d10d      	bne.n	8002450 <updateClockState+0x1a0>
 8002434:	4b28      	ldr	r3, [pc, #160]	; (80024d8 <updateClockState+0x228>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	789a      	ldrb	r2, [r3, #2]
 800243a:	4b27      	ldr	r3, [pc, #156]	; (80024d8 <updateClockState+0x228>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	8819      	ldrh	r1, [r3, #0]
 8002440:	4b25      	ldr	r3, [pc, #148]	; (80024d8 <updateClockState+0x228>)
 8002442:	685c      	ldr	r4, [r3, #4]
 8002444:	0010      	movs	r0, r2
 8002446:	f000 fe7b 	bl	8003140 <maxDaysInMonth>
 800244a:	0003      	movs	r3, r0
 800244c:	70e3      	strb	r3, [r4, #3]
				else clockVars.dateToSet->date--;
				break;
 800244e:	e009      	b.n	8002464 <updateClockState+0x1b4>
				else clockVars.dateToSet->date--;
 8002450:	4b21      	ldr	r3, [pc, #132]	; (80024d8 <updateClockState+0x228>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	78da      	ldrb	r2, [r3, #3]
 8002456:	3a01      	subs	r2, #1
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	70da      	strb	r2, [r3, #3]
				break;
 800245c:	e002      	b.n	8002464 <updateClockState+0x1b4>
			default: break;
		}
	}
 800245e:	46c0      	nop			; (mov r8, r8)
 8002460:	e000      	b.n	8002464 <updateClockState+0x1b4>
			default: break;
 8002462:	46c0      	nop			; (mov r8, r8)
	// switches between setting mode and default mode. changes between different clock fields
	if (buttons.is4Pressed) {
 8002464:	4b1b      	ldr	r3, [pc, #108]	; (80024d4 <updateClockState+0x224>)
 8002466:	78db      	ldrb	r3, [r3, #3]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d02f      	beq.n	80024ce <updateClockState+0x21e>
		buttons.is4Pressed = 0;
 800246e:	4b19      	ldr	r3, [pc, #100]	; (80024d4 <updateClockState+0x224>)
 8002470:	2200      	movs	r2, #0
 8002472:	70da      	strb	r2, [r3, #3]
		updateFace.clock = 1;
 8002474:	4b19      	ldr	r3, [pc, #100]	; (80024dc <updateClockState+0x22c>)
 8002476:	2201      	movs	r2, #1
 8002478:	701a      	strb	r2, [r3, #0]
		clockVars.fieldBeingSet = (clockVars.fieldBeingSet + 1) % (NUM_CLOCKFIELDS + 1);
 800247a:	4b17      	ldr	r3, [pc, #92]	; (80024d8 <updateClockState+0x228>)
 800247c:	785b      	ldrb	r3, [r3, #1]
 800247e:	3301      	adds	r3, #1
 8002480:	2106      	movs	r1, #6
 8002482:	0018      	movs	r0, r3
 8002484:	f7fd ffb0 	bl	80003e8 <__aeabi_idivmod>
 8002488:	000b      	movs	r3, r1
 800248a:	b2da      	uxtb	r2, r3
 800248c:	4b12      	ldr	r3, [pc, #72]	; (80024d8 <updateClockState+0x228>)
 800248e:	705a      	strb	r2, [r3, #1]
		if (clockVars.fieldBeingSet != 0) {
 8002490:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <updateClockState+0x228>)
 8002492:	785b      	ldrb	r3, [r3, #1]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d00f      	beq.n	80024b8 <updateClockState+0x208>
			clockVars.isBeingSet = 1;
 8002498:	4b0f      	ldr	r3, [pc, #60]	; (80024d8 <updateClockState+0x228>)
 800249a:	2201      	movs	r2, #1
 800249c:	701a      	strb	r2, [r3, #0]

			// should pull current time when first entering setting mode
			if (clockVars.fieldBeingSet == 1) getDateTime(clockVars.dateToSet, clockVars.timeToSet);
 800249e:	4b0e      	ldr	r3, [pc, #56]	; (80024d8 <updateClockState+0x228>)
 80024a0:	785b      	ldrb	r3, [r3, #1]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d113      	bne.n	80024ce <updateClockState+0x21e>
 80024a6:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <updateClockState+0x228>)
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	4b0b      	ldr	r3, [pc, #44]	; (80024d8 <updateClockState+0x228>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	0019      	movs	r1, r3
 80024b0:	0010      	movs	r0, r2
 80024b2:	f7ff fa25 	bl	8001900 <getDateTime>
			// second set to 0, weekday ignored
			setDateTime(clockVars.dateToSet, clockVars.timeToSet);
		}
	}
	// checks on clock set for other buttons here (what did this note mean??)
}
 80024b6:	e00a      	b.n	80024ce <updateClockState+0x21e>
			clockVars.isBeingSet = 0;
 80024b8:	4b07      	ldr	r3, [pc, #28]	; (80024d8 <updateClockState+0x228>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	701a      	strb	r2, [r3, #0]
			setDateTime(clockVars.dateToSet, clockVars.timeToSet);
 80024be:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <updateClockState+0x228>)
 80024c0:	685a      	ldr	r2, [r3, #4]
 80024c2:	4b05      	ldr	r3, [pc, #20]	; (80024d8 <updateClockState+0x228>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	0019      	movs	r1, r3
 80024c8:	0010      	movs	r0, r2
 80024ca:	f7ff f967 	bl	800179c <setDateTime>
}
 80024ce:	46c0      	nop			; (mov r8, r8)
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bdb0      	pop	{r4, r5, r7, pc}
 80024d4:	200001b8 	.word	0x200001b8
 80024d8:	200000e0 	.word	0x200000e0
 80024dc:	2000015c 	.word	0x2000015c
 80024e0:	080087bc 	.word	0x080087bc
 80024e4:	080087d4 	.word	0x080087d4

080024e8 <updateTimerState>:
 *     second, timer only runs for half second.)
 *     also not sure how to implement pause using rtc (alarm value has to change depending on how long timer is paused for)
 *   might need to change to using only hardware timer for this instead of rtc because of problems listed above
 *   insert a few more functions into this (those that need to use the hardware)
 */
void updateTimerState() {
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
	if (timerVars.isBeingSet) {
 80024ec:	4b84      	ldr	r3, [pc, #528]	; (8002700 <updateTimerState+0x218>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d100      	bne.n	80024f6 <updateTimerState+0xe>
 80024f4:	e089      	b.n	800260a <updateTimerState+0x122>
		if (buttons.is2Pressed) {
 80024f6:	4b83      	ldr	r3, [pc, #524]	; (8002704 <updateTimerState+0x21c>)
 80024f8:	785b      	ldrb	r3, [r3, #1]
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d03b      	beq.n	8002578 <updateTimerState+0x90>
			buttons.is2Pressed = 0;
 8002500:	4b80      	ldr	r3, [pc, #512]	; (8002704 <updateTimerState+0x21c>)
 8002502:	2200      	movs	r2, #0
 8002504:	705a      	strb	r2, [r3, #1]
			updateFace.timer = 1;
 8002506:	4b80      	ldr	r3, [pc, #512]	; (8002708 <updateTimerState+0x220>)
 8002508:	2201      	movs	r2, #1
 800250a:	705a      	strb	r2, [r3, #1]

			// set field up
			switch (timerVars.fieldBeingSet) {
 800250c:	4b7c      	ldr	r3, [pc, #496]	; (8002700 <updateTimerState+0x218>)
 800250e:	785b      	ldrb	r3, [r3, #1]
 8002510:	2b02      	cmp	r3, #2
 8002512:	d013      	beq.n	800253c <updateTimerState+0x54>
 8002514:	2b03      	cmp	r3, #3
 8002516:	d020      	beq.n	800255a <updateTimerState+0x72>
 8002518:	2b01      	cmp	r3, #1
 800251a:	d000      	beq.n	800251e <updateTimerState+0x36>
				case 1: timerVars.timeToSet->sec = (timerVars.timeToSet->sec+1) % 60; break;
				case 2: timerVars.timeToSet->min = (timerVars.timeToSet->min+1) % 60; break;
				case 3: timerVars.timeToSet->hr = (timerVars.timeToSet->hr+1) % 24; break;
				default: break;
 800251c:	e02d      	b.n	800257a <updateTimerState+0x92>
				case 1: timerVars.timeToSet->sec = (timerVars.timeToSet->sec+1) % 60; break;
 800251e:	4b78      	ldr	r3, [pc, #480]	; (8002700 <updateTimerState+0x218>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	789b      	ldrb	r3, [r3, #2]
 8002524:	3301      	adds	r3, #1
 8002526:	213c      	movs	r1, #60	; 0x3c
 8002528:	0018      	movs	r0, r3
 800252a:	f7fd ff5d 	bl	80003e8 <__aeabi_idivmod>
 800252e:	000b      	movs	r3, r1
 8002530:	001a      	movs	r2, r3
 8002532:	4b73      	ldr	r3, [pc, #460]	; (8002700 <updateTimerState+0x218>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	b2d2      	uxtb	r2, r2
 8002538:	709a      	strb	r2, [r3, #2]
 800253a:	e01e      	b.n	800257a <updateTimerState+0x92>
				case 2: timerVars.timeToSet->min = (timerVars.timeToSet->min+1) % 60; break;
 800253c:	4b70      	ldr	r3, [pc, #448]	; (8002700 <updateTimerState+0x218>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	785b      	ldrb	r3, [r3, #1]
 8002542:	3301      	adds	r3, #1
 8002544:	213c      	movs	r1, #60	; 0x3c
 8002546:	0018      	movs	r0, r3
 8002548:	f7fd ff4e 	bl	80003e8 <__aeabi_idivmod>
 800254c:	000b      	movs	r3, r1
 800254e:	001a      	movs	r2, r3
 8002550:	4b6b      	ldr	r3, [pc, #428]	; (8002700 <updateTimerState+0x218>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	b2d2      	uxtb	r2, r2
 8002556:	705a      	strb	r2, [r3, #1]
 8002558:	e00f      	b.n	800257a <updateTimerState+0x92>
				case 3: timerVars.timeToSet->hr = (timerVars.timeToSet->hr+1) % 24; break;
 800255a:	4b69      	ldr	r3, [pc, #420]	; (8002700 <updateTimerState+0x218>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	3301      	adds	r3, #1
 8002562:	2118      	movs	r1, #24
 8002564:	0018      	movs	r0, r3
 8002566:	f7fd ff3f 	bl	80003e8 <__aeabi_idivmod>
 800256a:	000b      	movs	r3, r1
 800256c:	001a      	movs	r2, r3
 800256e:	4b64      	ldr	r3, [pc, #400]	; (8002700 <updateTimerState+0x218>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	701a      	strb	r2, [r3, #0]
 8002576:	e000      	b.n	800257a <updateTimerState+0x92>
			}
		}
 8002578:	46c0      	nop			; (mov r8, r8)
		if (buttons.is3Pressed) {
 800257a:	4b62      	ldr	r3, [pc, #392]	; (8002704 <updateTimerState+0x21c>)
 800257c:	789b      	ldrb	r3, [r3, #2]
 800257e:	b2db      	uxtb	r3, r3
 8002580:	2b00      	cmp	r3, #0
 8002582:	d100      	bne.n	8002586 <updateTimerState+0x9e>
 8002584:	e0b8      	b.n	80026f8 <updateTimerState+0x210>
			buttons.is3Pressed = 0;
 8002586:	4b5f      	ldr	r3, [pc, #380]	; (8002704 <updateTimerState+0x21c>)
 8002588:	2200      	movs	r2, #0
 800258a:	709a      	strb	r2, [r3, #2]
			updateFace.timer = 1;
 800258c:	4b5e      	ldr	r3, [pc, #376]	; (8002708 <updateTimerState+0x220>)
 800258e:	2201      	movs	r2, #1
 8002590:	705a      	strb	r2, [r3, #1]

			// set field down
			switch (timerVars.fieldBeingSet) {
 8002592:	4b5b      	ldr	r3, [pc, #364]	; (8002700 <updateTimerState+0x218>)
 8002594:	785b      	ldrb	r3, [r3, #1]
 8002596:	2b02      	cmp	r3, #2
 8002598:	d015      	beq.n	80025c6 <updateTimerState+0xde>
 800259a:	2b03      	cmp	r3, #3
 800259c:	d024      	beq.n	80025e8 <updateTimerState+0x100>
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d000      	beq.n	80025a4 <updateTimerState+0xbc>
					break;
				case 3:
					if (timerVars.timeToSet->hr == 0) timerVars.timeToSet->hr = 23;
					else timerVars.timeToSet->hr--;
					break;
				default: break;
 80025a2:	e0aa      	b.n	80026fa <updateTimerState+0x212>
					if (timerVars.timeToSet->sec == 0) timerVars.timeToSet->sec = 59;
 80025a4:	4b56      	ldr	r3, [pc, #344]	; (8002700 <updateTimerState+0x218>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	789b      	ldrb	r3, [r3, #2]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d104      	bne.n	80025b8 <updateTimerState+0xd0>
 80025ae:	4b54      	ldr	r3, [pc, #336]	; (8002700 <updateTimerState+0x218>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	223b      	movs	r2, #59	; 0x3b
 80025b4:	709a      	strb	r2, [r3, #2]
					break;
 80025b6:	e0a0      	b.n	80026fa <updateTimerState+0x212>
					else timerVars.timeToSet->sec--;
 80025b8:	4b51      	ldr	r3, [pc, #324]	; (8002700 <updateTimerState+0x218>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	789a      	ldrb	r2, [r3, #2]
 80025be:	3a01      	subs	r2, #1
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	709a      	strb	r2, [r3, #2]
					break;
 80025c4:	e099      	b.n	80026fa <updateTimerState+0x212>
					if (timerVars.timeToSet->min == 0) timerVars.timeToSet->min = 59;
 80025c6:	4b4e      	ldr	r3, [pc, #312]	; (8002700 <updateTimerState+0x218>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	785b      	ldrb	r3, [r3, #1]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d104      	bne.n	80025da <updateTimerState+0xf2>
 80025d0:	4b4b      	ldr	r3, [pc, #300]	; (8002700 <updateTimerState+0x218>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	223b      	movs	r2, #59	; 0x3b
 80025d6:	705a      	strb	r2, [r3, #1]
					break;
 80025d8:	e08f      	b.n	80026fa <updateTimerState+0x212>
					else timerVars.timeToSet->min--;
 80025da:	4b49      	ldr	r3, [pc, #292]	; (8002700 <updateTimerState+0x218>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	785a      	ldrb	r2, [r3, #1]
 80025e0:	3a01      	subs	r2, #1
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	705a      	strb	r2, [r3, #1]
					break;
 80025e6:	e088      	b.n	80026fa <updateTimerState+0x212>
					if (timerVars.timeToSet->hr == 0) timerVars.timeToSet->hr = 23;
 80025e8:	4b45      	ldr	r3, [pc, #276]	; (8002700 <updateTimerState+0x218>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d104      	bne.n	80025fc <updateTimerState+0x114>
 80025f2:	4b43      	ldr	r3, [pc, #268]	; (8002700 <updateTimerState+0x218>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2217      	movs	r2, #23
 80025f8:	701a      	strb	r2, [r3, #0]
					break;
 80025fa:	e07e      	b.n	80026fa <updateTimerState+0x212>
					else timerVars.timeToSet->hr--;
 80025fc:	4b40      	ldr	r3, [pc, #256]	; (8002700 <updateTimerState+0x218>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	781a      	ldrb	r2, [r3, #0]
 8002602:	3a01      	subs	r2, #1
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	701a      	strb	r2, [r3, #0]
					break;
 8002608:	e077      	b.n	80026fa <updateTimerState+0x212>
			}
		}
	}
	// not done
	else if (timerVars.isSet) {
 800260a:	4b3d      	ldr	r3, [pc, #244]	; (8002700 <updateTimerState+0x218>)
 800260c:	789b      	ldrb	r3, [r3, #2]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d037      	beq.n	8002682 <updateTimerState+0x19a>
		if (buttons.is2Pressed && isTimerRunning == 0) {
 8002612:	4b3c      	ldr	r3, [pc, #240]	; (8002704 <updateTimerState+0x21c>)
 8002614:	785b      	ldrb	r3, [r3, #1]
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00d      	beq.n	8002638 <updateTimerState+0x150>
 800261c:	4b3b      	ldr	r3, [pc, #236]	; (800270c <updateTimerState+0x224>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d108      	bne.n	8002638 <updateTimerState+0x150>
			buttons.is2Pressed = 0;
 8002626:	4b37      	ldr	r3, [pc, #220]	; (8002704 <updateTimerState+0x21c>)
 8002628:	2200      	movs	r2, #0
 800262a:	705a      	strb	r2, [r3, #1]
			updateFace.timer = 1;
 800262c:	4b36      	ldr	r3, [pc, #216]	; (8002708 <updateTimerState+0x220>)
 800262e:	2201      	movs	r2, #1
 8002630:	705a      	strb	r2, [r3, #1]
			// start timer
			isTimerRunning = 1;
 8002632:	4b36      	ldr	r3, [pc, #216]	; (800270c <updateTimerState+0x224>)
 8002634:	2201      	movs	r2, #1
 8002636:	701a      	strb	r2, [r3, #0]
		}
		if (buttons.is3Pressed && isTimerRunning) {
 8002638:	4b32      	ldr	r3, [pc, #200]	; (8002704 <updateTimerState+0x21c>)
 800263a:	789b      	ldrb	r3, [r3, #2]
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00d      	beq.n	800265e <updateTimerState+0x176>
 8002642:	4b32      	ldr	r3, [pc, #200]	; (800270c <updateTimerState+0x224>)
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b00      	cmp	r3, #0
 800264a:	d008      	beq.n	800265e <updateTimerState+0x176>
			buttons.is3Pressed = 0;
 800264c:	4b2d      	ldr	r3, [pc, #180]	; (8002704 <updateTimerState+0x21c>)
 800264e:	2200      	movs	r2, #0
 8002650:	709a      	strb	r2, [r3, #2]
			updateFace.timer = 1;
 8002652:	4b2d      	ldr	r3, [pc, #180]	; (8002708 <updateTimerState+0x220>)
 8002654:	2201      	movs	r2, #1
 8002656:	705a      	strb	r2, [r3, #1]
			// pause timer
			isTimerRunning = 0;
 8002658:	4b2c      	ldr	r3, [pc, #176]	; (800270c <updateTimerState+0x224>)
 800265a:	2200      	movs	r2, #0
 800265c:	701a      	strb	r2, [r3, #0]
		}
		if (buttons.is4Pressed) {
 800265e:	4b29      	ldr	r3, [pc, #164]	; (8002704 <updateTimerState+0x21c>)
 8002660:	78db      	ldrb	r3, [r3, #3]
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b00      	cmp	r3, #0
 8002666:	d048      	beq.n	80026fa <updateTimerState+0x212>
			buttons.is4Pressed = 0;
 8002668:	4b26      	ldr	r3, [pc, #152]	; (8002704 <updateTimerState+0x21c>)
 800266a:	2200      	movs	r2, #0
 800266c:	70da      	strb	r2, [r3, #3]
			updateFace.timer = 1;
 800266e:	4b26      	ldr	r3, [pc, #152]	; (8002708 <updateTimerState+0x220>)
 8002670:	2201      	movs	r2, #1
 8002672:	705a      	strb	r2, [r3, #1]

			// stop and clear timer
			timerVars.isSet = 0;
 8002674:	4b22      	ldr	r3, [pc, #136]	; (8002700 <updateTimerState+0x218>)
 8002676:	2200      	movs	r2, #0
 8002678:	709a      	strb	r2, [r3, #2]
			isTimerRunning = 0;
 800267a:	4b24      	ldr	r3, [pc, #144]	; (800270c <updateTimerState+0x224>)
 800267c:	2200      	movs	r2, #0
 800267e:	701a      	strb	r2, [r3, #0]
			timerVars.isBeingSet = 0;
			timerVars.isSet = 1;
			// setTimer(&timerVars.timeToSet);
		}
	}
}
 8002680:	e03b      	b.n	80026fa <updateTimerState+0x212>
	else if (buttons.is4Pressed) {
 8002682:	4b20      	ldr	r3, [pc, #128]	; (8002704 <updateTimerState+0x21c>)
 8002684:	78db      	ldrb	r3, [r3, #3]
 8002686:	b2db      	uxtb	r3, r3
 8002688:	2b00      	cmp	r3, #0
 800268a:	d036      	beq.n	80026fa <updateTimerState+0x212>
		buttons.is4Pressed = 0;
 800268c:	4b1d      	ldr	r3, [pc, #116]	; (8002704 <updateTimerState+0x21c>)
 800268e:	2200      	movs	r2, #0
 8002690:	70da      	strb	r2, [r3, #3]
		updateFace.timer = 1;
 8002692:	4b1d      	ldr	r3, [pc, #116]	; (8002708 <updateTimerState+0x220>)
 8002694:	2201      	movs	r2, #1
 8002696:	705a      	strb	r2, [r3, #1]
		timerVars.fieldBeingSet = (timerVars.fieldBeingSet + 1) % (NUM_TIMERFIELDS + 1);
 8002698:	4b19      	ldr	r3, [pc, #100]	; (8002700 <updateTimerState+0x218>)
 800269a:	785b      	ldrb	r3, [r3, #1]
 800269c:	3301      	adds	r3, #1
 800269e:	4a1c      	ldr	r2, [pc, #112]	; (8002710 <updateTimerState+0x228>)
 80026a0:	4013      	ands	r3, r2
 80026a2:	d504      	bpl.n	80026ae <updateTimerState+0x1c6>
 80026a4:	3b01      	subs	r3, #1
 80026a6:	2204      	movs	r2, #4
 80026a8:	4252      	negs	r2, r2
 80026aa:	4313      	orrs	r3, r2
 80026ac:	3301      	adds	r3, #1
 80026ae:	b2da      	uxtb	r2, r3
 80026b0:	4b13      	ldr	r3, [pc, #76]	; (8002700 <updateTimerState+0x218>)
 80026b2:	705a      	strb	r2, [r3, #1]
		if (timerVars.fieldBeingSet != 0) {
 80026b4:	4b12      	ldr	r3, [pc, #72]	; (8002700 <updateTimerState+0x218>)
 80026b6:	785b      	ldrb	r3, [r3, #1]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d016      	beq.n	80026ea <updateTimerState+0x202>
			timerVars.isBeingSet = 1;
 80026bc:	4b10      	ldr	r3, [pc, #64]	; (8002700 <updateTimerState+0x218>)
 80026be:	2201      	movs	r2, #1
 80026c0:	701a      	strb	r2, [r3, #0]
			timerVars.isSet = 0;
 80026c2:	4b0f      	ldr	r3, [pc, #60]	; (8002700 <updateTimerState+0x218>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	709a      	strb	r2, [r3, #2]
			if (timerVars.fieldBeingSet == 1) {
 80026c8:	4b0d      	ldr	r3, [pc, #52]	; (8002700 <updateTimerState+0x218>)
 80026ca:	785b      	ldrb	r3, [r3, #1]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d114      	bne.n	80026fa <updateTimerState+0x212>
				timerVars.timeToSet->sec = 0;
 80026d0:	4b0b      	ldr	r3, [pc, #44]	; (8002700 <updateTimerState+0x218>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	709a      	strb	r2, [r3, #2]
				timerVars.timeToSet->min = 0;
 80026d8:	4b09      	ldr	r3, [pc, #36]	; (8002700 <updateTimerState+0x218>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	705a      	strb	r2, [r3, #1]
				timerVars.timeToSet->hr = 0;
 80026e0:	4b07      	ldr	r3, [pc, #28]	; (8002700 <updateTimerState+0x218>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	701a      	strb	r2, [r3, #0]
}
 80026e8:	e007      	b.n	80026fa <updateTimerState+0x212>
			timerVars.isBeingSet = 0;
 80026ea:	4b05      	ldr	r3, [pc, #20]	; (8002700 <updateTimerState+0x218>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	701a      	strb	r2, [r3, #0]
			timerVars.isSet = 1;
 80026f0:	4b03      	ldr	r3, [pc, #12]	; (8002700 <updateTimerState+0x218>)
 80026f2:	2201      	movs	r2, #1
 80026f4:	709a      	strb	r2, [r3, #2]
}
 80026f6:	e000      	b.n	80026fa <updateTimerState+0x212>
		}
 80026f8:	46c0      	nop			; (mov r8, r8)
}
 80026fa:	46c0      	nop			; (mov r8, r8)
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	200000ec 	.word	0x200000ec
 8002704:	200001b8 	.word	0x200001b8
 8002708:	2000015c 	.word	0x2000015c
 800270c:	200001bc 	.word	0x200001bc
 8002710:	80000003 	.word	0x80000003

08002714 <updateAlarmState>:
 *   should change to make it possible to have multiple alarms
 *   also pick alarms that repeat and alarms that don't
 *   need to make changes to ui to make this happen
 *   currently just does old behavior (only 1 alarm)
 */
void updateAlarmState() {
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
	if (buttons.is2Pressed && alarmVars.isBeingSet) {
 800271a:	4b8b      	ldr	r3, [pc, #556]	; (8002948 <updateAlarmState+0x234>)
 800271c:	785b      	ldrb	r3, [r3, #1]
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b00      	cmp	r3, #0
 8002722:	d053      	beq.n	80027cc <updateAlarmState+0xb8>
 8002724:	4b89      	ldr	r3, [pc, #548]	; (800294c <updateAlarmState+0x238>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d04f      	beq.n	80027cc <updateAlarmState+0xb8>
		buttons.is2Pressed = 0;
 800272c:	4b86      	ldr	r3, [pc, #536]	; (8002948 <updateAlarmState+0x234>)
 800272e:	2200      	movs	r2, #0
 8002730:	705a      	strb	r2, [r3, #1]
		updateFace.alarm = 1;
 8002732:	4b87      	ldr	r3, [pc, #540]	; (8002950 <updateAlarmState+0x23c>)
 8002734:	2201      	movs	r2, #1
 8002736:	709a      	strb	r2, [r3, #2]

		// change fields up
		switch (alarmVars.fieldBeingSet) {
 8002738:	4b84      	ldr	r3, [pc, #528]	; (800294c <updateAlarmState+0x238>)
 800273a:	785b      	ldrb	r3, [r3, #1]
 800273c:	2b02      	cmp	r3, #2
 800273e:	d017      	beq.n	8002770 <updateAlarmState+0x5c>
 8002740:	dc02      	bgt.n	8002748 <updateAlarmState+0x34>
 8002742:	2b01      	cmp	r3, #1
 8002744:	d005      	beq.n	8002752 <updateAlarmState+0x3e>
			case 1: alarmVars.alarmToSet->sec = (alarmVars.alarmToSet->sec + 1) % 60; break;
			case 2: alarmVars.alarmToSet->min = (alarmVars.alarmToSet->min + 1) % 60; break;
			case 3: alarmVars.alarmToSet->hr = (alarmVars.alarmToSet->hr + 1) % 24; break;
			case 4: alarmVars.alarmToSet->weekday = (alarmVars.alarmToSet->weekday + 1) % 7 + 1; break;
			default: break;
 8002746:	e042      	b.n	80027ce <updateAlarmState+0xba>
		switch (alarmVars.fieldBeingSet) {
 8002748:	2b03      	cmp	r3, #3
 800274a:	d020      	beq.n	800278e <updateAlarmState+0x7a>
 800274c:	2b04      	cmp	r3, #4
 800274e:	d02d      	beq.n	80027ac <updateAlarmState+0x98>
			default: break;
 8002750:	e03d      	b.n	80027ce <updateAlarmState+0xba>
			case 1: alarmVars.alarmToSet->sec = (alarmVars.alarmToSet->sec + 1) % 60; break;
 8002752:	4b7e      	ldr	r3, [pc, #504]	; (800294c <updateAlarmState+0x238>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	789b      	ldrb	r3, [r3, #2]
 8002758:	3301      	adds	r3, #1
 800275a:	213c      	movs	r1, #60	; 0x3c
 800275c:	0018      	movs	r0, r3
 800275e:	f7fd fe43 	bl	80003e8 <__aeabi_idivmod>
 8002762:	000b      	movs	r3, r1
 8002764:	001a      	movs	r2, r3
 8002766:	4b79      	ldr	r3, [pc, #484]	; (800294c <updateAlarmState+0x238>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	709a      	strb	r2, [r3, #2]
 800276e:	e02e      	b.n	80027ce <updateAlarmState+0xba>
			case 2: alarmVars.alarmToSet->min = (alarmVars.alarmToSet->min + 1) % 60; break;
 8002770:	4b76      	ldr	r3, [pc, #472]	; (800294c <updateAlarmState+0x238>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	785b      	ldrb	r3, [r3, #1]
 8002776:	3301      	adds	r3, #1
 8002778:	213c      	movs	r1, #60	; 0x3c
 800277a:	0018      	movs	r0, r3
 800277c:	f7fd fe34 	bl	80003e8 <__aeabi_idivmod>
 8002780:	000b      	movs	r3, r1
 8002782:	001a      	movs	r2, r3
 8002784:	4b71      	ldr	r3, [pc, #452]	; (800294c <updateAlarmState+0x238>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	b2d2      	uxtb	r2, r2
 800278a:	705a      	strb	r2, [r3, #1]
 800278c:	e01f      	b.n	80027ce <updateAlarmState+0xba>
			case 3: alarmVars.alarmToSet->hr = (alarmVars.alarmToSet->hr + 1) % 24; break;
 800278e:	4b6f      	ldr	r3, [pc, #444]	; (800294c <updateAlarmState+0x238>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	3301      	adds	r3, #1
 8002796:	2118      	movs	r1, #24
 8002798:	0018      	movs	r0, r3
 800279a:	f7fd fe25 	bl	80003e8 <__aeabi_idivmod>
 800279e:	000b      	movs	r3, r1
 80027a0:	001a      	movs	r2, r3
 80027a2:	4b6a      	ldr	r3, [pc, #424]	; (800294c <updateAlarmState+0x238>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	b2d2      	uxtb	r2, r2
 80027a8:	701a      	strb	r2, [r3, #0]
 80027aa:	e010      	b.n	80027ce <updateAlarmState+0xba>
			case 4: alarmVars.alarmToSet->weekday = (alarmVars.alarmToSet->weekday + 1) % 7 + 1; break;
 80027ac:	4b67      	ldr	r3, [pc, #412]	; (800294c <updateAlarmState+0x238>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	78db      	ldrb	r3, [r3, #3]
 80027b2:	3301      	adds	r3, #1
 80027b4:	2107      	movs	r1, #7
 80027b6:	0018      	movs	r0, r3
 80027b8:	f7fd fe16 	bl	80003e8 <__aeabi_idivmod>
 80027bc:	000b      	movs	r3, r1
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	4b62      	ldr	r3, [pc, #392]	; (800294c <updateAlarmState+0x238>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	3201      	adds	r2, #1
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	70da      	strb	r2, [r3, #3]
 80027ca:	e000      	b.n	80027ce <updateAlarmState+0xba>
		}
	}
 80027cc:	46c0      	nop			; (mov r8, r8)
	if (buttons.is3Pressed && alarmVars.isBeingSet) {
 80027ce:	4b5e      	ldr	r3, [pc, #376]	; (8002948 <updateAlarmState+0x234>)
 80027d0:	789b      	ldrb	r3, [r3, #2]
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d05a      	beq.n	800288e <updateAlarmState+0x17a>
 80027d8:	4b5c      	ldr	r3, [pc, #368]	; (800294c <updateAlarmState+0x238>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d056      	beq.n	800288e <updateAlarmState+0x17a>
		buttons.is3Pressed = 0;
 80027e0:	4b59      	ldr	r3, [pc, #356]	; (8002948 <updateAlarmState+0x234>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	709a      	strb	r2, [r3, #2]
		updateFace.alarm = 1;
 80027e6:	4b5a      	ldr	r3, [pc, #360]	; (8002950 <updateAlarmState+0x23c>)
 80027e8:	2201      	movs	r2, #1
 80027ea:	709a      	strb	r2, [r3, #2]

		// change fields down
		switch (alarmVars.fieldBeingSet) {
 80027ec:	4b57      	ldr	r3, [pc, #348]	; (800294c <updateAlarmState+0x238>)
 80027ee:	785b      	ldrb	r3, [r3, #1]
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d019      	beq.n	8002828 <updateAlarmState+0x114>
 80027f4:	dc02      	bgt.n	80027fc <updateAlarmState+0xe8>
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d005      	beq.n	8002806 <updateAlarmState+0xf2>
				break;
			case 4:
				if (alarmVars.alarmToSet->weekday == RTC_WEEKDAY_MONDAY) alarmVars.alarmToSet->weekday = RTC_WEEKDAY_SUNDAY;
				else alarmVars.alarmToSet->weekday--;
				break;
			default: break;
 80027fa:	e049      	b.n	8002890 <updateAlarmState+0x17c>
		switch (alarmVars.fieldBeingSet) {
 80027fc:	2b03      	cmp	r3, #3
 80027fe:	d024      	beq.n	800284a <updateAlarmState+0x136>
 8002800:	2b04      	cmp	r3, #4
 8002802:	d033      	beq.n	800286c <updateAlarmState+0x158>
			default: break;
 8002804:	e044      	b.n	8002890 <updateAlarmState+0x17c>
				if (alarmVars.alarmToSet->sec == 0) alarmVars.alarmToSet->sec = 59;
 8002806:	4b51      	ldr	r3, [pc, #324]	; (800294c <updateAlarmState+0x238>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	789b      	ldrb	r3, [r3, #2]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d104      	bne.n	800281a <updateAlarmState+0x106>
 8002810:	4b4e      	ldr	r3, [pc, #312]	; (800294c <updateAlarmState+0x238>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	223b      	movs	r2, #59	; 0x3b
 8002816:	709a      	strb	r2, [r3, #2]
				break;
 8002818:	e03a      	b.n	8002890 <updateAlarmState+0x17c>
				else alarmVars.alarmToSet->sec--;
 800281a:	4b4c      	ldr	r3, [pc, #304]	; (800294c <updateAlarmState+0x238>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	789a      	ldrb	r2, [r3, #2]
 8002820:	3a01      	subs	r2, #1
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	709a      	strb	r2, [r3, #2]
				break;
 8002826:	e033      	b.n	8002890 <updateAlarmState+0x17c>
				if (alarmVars.alarmToSet->min == 0) alarmVars.alarmToSet->min = 59;
 8002828:	4b48      	ldr	r3, [pc, #288]	; (800294c <updateAlarmState+0x238>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	785b      	ldrb	r3, [r3, #1]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d104      	bne.n	800283c <updateAlarmState+0x128>
 8002832:	4b46      	ldr	r3, [pc, #280]	; (800294c <updateAlarmState+0x238>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	223b      	movs	r2, #59	; 0x3b
 8002838:	705a      	strb	r2, [r3, #1]
				break;
 800283a:	e029      	b.n	8002890 <updateAlarmState+0x17c>
				else alarmVars.alarmToSet->min--;
 800283c:	4b43      	ldr	r3, [pc, #268]	; (800294c <updateAlarmState+0x238>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	785a      	ldrb	r2, [r3, #1]
 8002842:	3a01      	subs	r2, #1
 8002844:	b2d2      	uxtb	r2, r2
 8002846:	705a      	strb	r2, [r3, #1]
				break;
 8002848:	e022      	b.n	8002890 <updateAlarmState+0x17c>
				if (alarmVars.alarmToSet->hr == 0) alarmVars.alarmToSet->hr = 23;
 800284a:	4b40      	ldr	r3, [pc, #256]	; (800294c <updateAlarmState+0x238>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d104      	bne.n	800285e <updateAlarmState+0x14a>
 8002854:	4b3d      	ldr	r3, [pc, #244]	; (800294c <updateAlarmState+0x238>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	2217      	movs	r2, #23
 800285a:	701a      	strb	r2, [r3, #0]
				break;
 800285c:	e018      	b.n	8002890 <updateAlarmState+0x17c>
				else alarmVars.alarmToSet->hr--;
 800285e:	4b3b      	ldr	r3, [pc, #236]	; (800294c <updateAlarmState+0x238>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	781a      	ldrb	r2, [r3, #0]
 8002864:	3a01      	subs	r2, #1
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	701a      	strb	r2, [r3, #0]
				break;
 800286a:	e011      	b.n	8002890 <updateAlarmState+0x17c>
				if (alarmVars.alarmToSet->weekday == RTC_WEEKDAY_MONDAY) alarmVars.alarmToSet->weekday = RTC_WEEKDAY_SUNDAY;
 800286c:	4b37      	ldr	r3, [pc, #220]	; (800294c <updateAlarmState+0x238>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	78db      	ldrb	r3, [r3, #3]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d104      	bne.n	8002880 <updateAlarmState+0x16c>
 8002876:	4b35      	ldr	r3, [pc, #212]	; (800294c <updateAlarmState+0x238>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2207      	movs	r2, #7
 800287c:	70da      	strb	r2, [r3, #3]
				break;
 800287e:	e007      	b.n	8002890 <updateAlarmState+0x17c>
				else alarmVars.alarmToSet->weekday--;
 8002880:	4b32      	ldr	r3, [pc, #200]	; (800294c <updateAlarmState+0x238>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	78da      	ldrb	r2, [r3, #3]
 8002886:	3a01      	subs	r2, #1
 8002888:	b2d2      	uxtb	r2, r2
 800288a:	70da      	strb	r2, [r3, #3]
				break;
 800288c:	e000      	b.n	8002890 <updateAlarmState+0x17c>
		}
	}
 800288e:	46c0      	nop			; (mov r8, r8)
	if (buttons.is4Pressed) {
 8002890:	4b2d      	ldr	r3, [pc, #180]	; (8002948 <updateAlarmState+0x234>)
 8002892:	78db      	ldrb	r3, [r3, #3]
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d051      	beq.n	800293e <updateAlarmState+0x22a>
		buttons.is4Pressed = 0;
 800289a:	4b2b      	ldr	r3, [pc, #172]	; (8002948 <updateAlarmState+0x234>)
 800289c:	2200      	movs	r2, #0
 800289e:	70da      	strb	r2, [r3, #3]
		updateFace.alarm = 1;
 80028a0:	4b2b      	ldr	r3, [pc, #172]	; (8002950 <updateAlarmState+0x23c>)
 80028a2:	2201      	movs	r2, #1
 80028a4:	709a      	strb	r2, [r3, #2]

		if (isAlarmRunning == 0) {
 80028a6:	4b2b      	ldr	r3, [pc, #172]	; (8002954 <updateAlarmState+0x240>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d13c      	bne.n	800292a <updateAlarmState+0x216>
			// toggle between fields
			alarmVars.fieldBeingSet = (alarmVars.fieldBeingSet + 1) % (NUM_ALARMFIELDS + 1);
 80028b0:	4b26      	ldr	r3, [pc, #152]	; (800294c <updateAlarmState+0x238>)
 80028b2:	785b      	ldrb	r3, [r3, #1]
 80028b4:	3301      	adds	r3, #1
 80028b6:	2105      	movs	r1, #5
 80028b8:	0018      	movs	r0, r3
 80028ba:	f7fd fd95 	bl	80003e8 <__aeabi_idivmod>
 80028be:	000b      	movs	r3, r1
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	4b22      	ldr	r3, [pc, #136]	; (800294c <updateAlarmState+0x238>)
 80028c4:	705a      	strb	r2, [r3, #1]
			if (alarmVars.fieldBeingSet != 0) {
 80028c6:	4b21      	ldr	r3, [pc, #132]	; (800294c <updateAlarmState+0x238>)
 80028c8:	785b      	ldrb	r3, [r3, #1]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d021      	beq.n	8002912 <updateAlarmState+0x1fe>
				alarmVars.isBeingSet = 1;
 80028ce:	4b1f      	ldr	r3, [pc, #124]	; (800294c <updateAlarmState+0x238>)
 80028d0:	2201      	movs	r2, #1
 80028d2:	701a      	strb	r2, [r3, #0]
				if (alarmVars.fieldBeingSet == 1) {
 80028d4:	4b1d      	ldr	r3, [pc, #116]	; (800294c <updateAlarmState+0x238>)
 80028d6:	785b      	ldrb	r3, [r3, #1]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d130      	bne.n	800293e <updateAlarmState+0x22a>
					struct dates *d;
					struct times *t;
					getDateTime(d, t);
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	0011      	movs	r1, r2
 80028e2:	0018      	movs	r0, r3
 80028e4:	f7ff f80c 	bl	8001900 <getDateTime>
					alarmVars.alarmToSet->sec = t->sec;
 80028e8:	4b18      	ldr	r3, [pc, #96]	; (800294c <updateAlarmState+0x238>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	7892      	ldrb	r2, [r2, #2]
 80028f0:	709a      	strb	r2, [r3, #2]
					alarmVars.alarmToSet->min = t->min;
 80028f2:	4b16      	ldr	r3, [pc, #88]	; (800294c <updateAlarmState+0x238>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	7852      	ldrb	r2, [r2, #1]
 80028fa:	705a      	strb	r2, [r3, #1]
					alarmVars.alarmToSet->hr = t->hr;
 80028fc:	4b13      	ldr	r3, [pc, #76]	; (800294c <updateAlarmState+0x238>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	7812      	ldrb	r2, [r2, #0]
 8002904:	701a      	strb	r2, [r3, #0]
					alarmVars.alarmToSet->weekday = d->weekday;
 8002906:	4b11      	ldr	r3, [pc, #68]	; (800294c <updateAlarmState+0x238>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	7912      	ldrb	r2, [r2, #4]
 800290e:	70da      	strb	r2, [r3, #3]
			// stop and clear alarm hw
			isAlarmRunning = 0;
			HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
		}
	}
}
 8002910:	e015      	b.n	800293e <updateAlarmState+0x22a>
				alarmVars.isBeingSet = 0;
 8002912:	4b0e      	ldr	r3, [pc, #56]	; (800294c <updateAlarmState+0x238>)
 8002914:	2200      	movs	r2, #0
 8002916:	701a      	strb	r2, [r3, #0]
				isAlarmRunning = 1;
 8002918:	4b0e      	ldr	r3, [pc, #56]	; (8002954 <updateAlarmState+0x240>)
 800291a:	2201      	movs	r2, #1
 800291c:	701a      	strb	r2, [r3, #0]
				setAlarm(alarmVars.alarmToSet);
 800291e:	4b0b      	ldr	r3, [pc, #44]	; (800294c <updateAlarmState+0x238>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	0018      	movs	r0, r3
 8002924:	f7fe ff4c 	bl	80017c0 <setAlarm>
}
 8002928:	e009      	b.n	800293e <updateAlarmState+0x22a>
			isAlarmRunning = 0;
 800292a:	4b0a      	ldr	r3, [pc, #40]	; (8002954 <updateAlarmState+0x240>)
 800292c:	2200      	movs	r2, #0
 800292e:	701a      	strb	r2, [r3, #0]
			HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002930:	2380      	movs	r3, #128	; 0x80
 8002932:	005a      	lsls	r2, r3, #1
 8002934:	4b08      	ldr	r3, [pc, #32]	; (8002958 <updateAlarmState+0x244>)
 8002936:	0011      	movs	r1, r2
 8002938:	0018      	movs	r0, r3
 800293a:	f003 fc0d 	bl	8006158 <HAL_RTC_DeactivateAlarm>
}
 800293e:	46c0      	nop			; (mov r8, r8)
 8002940:	46bd      	mov	sp, r7
 8002942:	b002      	add	sp, #8
 8002944:	bd80      	pop	{r7, pc}
 8002946:	46c0      	nop			; (mov r8, r8)
 8002948:	200001b8 	.word	0x200001b8
 800294c:	200000f4 	.word	0x200000f4
 8002950:	2000015c 	.word	0x2000015c
 8002954:	20000161 	.word	0x20000161
 8002958:	20000194 	.word	0x20000194

0800295c <updateStopwatchState>:
 * notes:
 *   using lptim now, but might need to change to use other timer as lptim might be used by adc
 *     to take regular measurements of the battery
 *   would just have to modify functions in timers.c
 */
void updateStopwatchState() {
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
	if (buttons.is2Pressed) {	// start/stop
 8002960:	4b20      	ldr	r3, [pc, #128]	; (80029e4 <updateStopwatchState+0x88>)
 8002962:	785b      	ldrb	r3, [r3, #1]
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d015      	beq.n	8002996 <updateStopwatchState+0x3a>
		buttons.is2Pressed = 0;
 800296a:	4b1e      	ldr	r3, [pc, #120]	; (80029e4 <updateStopwatchState+0x88>)
 800296c:	2200      	movs	r2, #0
 800296e:	705a      	strb	r2, [r3, #1]
		updateFace.stopwatch = 1;
 8002970:	4b1d      	ldr	r3, [pc, #116]	; (80029e8 <updateStopwatchState+0x8c>)
 8002972:	2201      	movs	r2, #1
 8002974:	70da      	strb	r2, [r3, #3]

		if (isStopwatchRunning == 0) {
 8002976:	4b1d      	ldr	r3, [pc, #116]	; (80029ec <updateStopwatchState+0x90>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b00      	cmp	r3, #0
 800297e:	d105      	bne.n	800298c <updateStopwatchState+0x30>
			isStopwatchRunning = 1;
 8002980:	4b1a      	ldr	r3, [pc, #104]	; (80029ec <updateStopwatchState+0x90>)
 8002982:	2201      	movs	r2, #1
 8002984:	701a      	strb	r2, [r3, #0]
			runStopwatch();
 8002986:	f000 fea5 	bl	80036d4 <runStopwatch>
 800298a:	e004      	b.n	8002996 <updateStopwatchState+0x3a>
		}
		else {
			isStopwatchRunning = 0;
 800298c:	4b17      	ldr	r3, [pc, #92]	; (80029ec <updateStopwatchState+0x90>)
 800298e:	2200      	movs	r2, #0
 8002990:	701a      	strb	r2, [r3, #0]
			pauseStopwatch();
 8002992:	f000 fead 	bl	80036f0 <pauseStopwatch>
		}
	}
	if (buttons.is3Pressed) {
 8002996:	4b13      	ldr	r3, [pc, #76]	; (80029e4 <updateStopwatchState+0x88>)
 8002998:	789b      	ldrb	r3, [r3, #2]
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00d      	beq.n	80029bc <updateStopwatchState+0x60>
		buttons.is3Pressed = 0;
 80029a0:	4b10      	ldr	r3, [pc, #64]	; (80029e4 <updateStopwatchState+0x88>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	709a      	strb	r2, [r3, #2]
		updateFace.stopwatch = 1;
 80029a6:	4b10      	ldr	r3, [pc, #64]	; (80029e8 <updateStopwatchState+0x8c>)
 80029a8:	2201      	movs	r2, #1
 80029aa:	70da      	strb	r2, [r3, #3]

		// pull data and set lap
		stopwatchVars.lapPrev = stopwatchVars.lapCurrent;
 80029ac:	4b10      	ldr	r3, [pc, #64]	; (80029f0 <updateStopwatchState+0x94>)
 80029ae:	685a      	ldr	r2, [r3, #4]
 80029b0:	4b0f      	ldr	r3, [pc, #60]	; (80029f0 <updateStopwatchState+0x94>)
 80029b2:	601a      	str	r2, [r3, #0]
		stopwatchVars.lapCurrent = stopwatchCNT;		// did this variable get changed to something else?
 80029b4:	4b0f      	ldr	r3, [pc, #60]	; (80029f4 <updateStopwatchState+0x98>)
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	4b0d      	ldr	r3, [pc, #52]	; (80029f0 <updateStopwatchState+0x94>)
 80029ba:	605a      	str	r2, [r3, #4]
	}
	if (buttons.is4Pressed) {
 80029bc:	4b09      	ldr	r3, [pc, #36]	; (80029e4 <updateStopwatchState+0x88>)
 80029be:	78db      	ldrb	r3, [r3, #3]
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00a      	beq.n	80029dc <updateStopwatchState+0x80>
		buttons.is4Pressed = 0;
 80029c6:	4b07      	ldr	r3, [pc, #28]	; (80029e4 <updateStopwatchState+0x88>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	70da      	strb	r2, [r3, #3]
		updateFace.stopwatch = 1;
 80029cc:	4b06      	ldr	r3, [pc, #24]	; (80029e8 <updateStopwatchState+0x8c>)
 80029ce:	2201      	movs	r2, #1
 80029d0:	70da      	strb	r2, [r3, #3]

		// clear stopwatch hw
		isStopwatchRunning = 0;
 80029d2:	4b06      	ldr	r3, [pc, #24]	; (80029ec <updateStopwatchState+0x90>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	701a      	strb	r2, [r3, #0]
		clearStopwatch();
 80029d8:	f000 fe96 	bl	8003708 <clearStopwatch>
	}
}
 80029dc:	46c0      	nop			; (mov r8, r8)
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	46c0      	nop			; (mov r8, r8)
 80029e4:	200001b8 	.word	0x200001b8
 80029e8:	2000015c 	.word	0x2000015c
 80029ec:	20000160 	.word	0x20000160
 80029f0:	200000fc 	.word	0x200000fc
 80029f4:	20000114 	.word	0x20000114

080029f8 <updateDisplay>:

// update screen based on global variables
// going in main, so it's executing in a while loop
//   software interrupt on flag so that this doesn't run all the time?
void updateDisplay(SPI_HandleTypeDef *hspi) {
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
	if (isFaceBeingChanged == 1) {
 8002a00:	4b50      	ldr	r3, [pc, #320]	; (8002b44 <updateDisplay+0x14c>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d155      	bne.n	8002ab4 <updateDisplay+0xbc>
		isFaceBeingChanged = 0;
 8002a08:	4b4e      	ldr	r3, [pc, #312]	; (8002b44 <updateDisplay+0x14c>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	701a      	strb	r2, [r3, #0]

		// drawing titles and boxes that won't be rewritten during normal operation within
		// a specific face (titles and buttons)
		drawButton(WIDTH/4-5, HEIGHT-20, hspi);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	001a      	movs	r2, r3
 8002a12:	218c      	movs	r1, #140	; 0x8c
 8002a14:	201b      	movs	r0, #27
 8002a16:	f7fe f96d 	bl	8000cf4 <drawButton>
		drawButton(WIDTH/2-5, HEIGHT-20, hspi);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	001a      	movs	r2, r3
 8002a1e:	218c      	movs	r1, #140	; 0x8c
 8002a20:	203b      	movs	r0, #59	; 0x3b
 8002a22:	f7fe f967 	bl	8000cf4 <drawButton>
		drawButton(WIDTH/4*3-5, HEIGHT-20, hspi);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	001a      	movs	r2, r3
 8002a2a:	218c      	movs	r1, #140	; 0x8c
 8002a2c:	205b      	movs	r0, #91	; 0x5b
 8002a2e:	f7fe f961 	bl	8000cf4 <drawButton>
		if (faceOnDisplay == faceClock) {
 8002a32:	4b45      	ldr	r3, [pc, #276]	; (8002b48 <updateDisplay+0x150>)
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d10b      	bne.n	8002a52 <updateDisplay+0x5a>
			clearScreen(ST77XX_CYAN, hspi);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a43      	ldr	r2, [pc, #268]	; (8002b4c <updateDisplay+0x154>)
 8002a3e:	0019      	movs	r1, r3
 8002a40:	0010      	movs	r0, r2
 8002a42:	f7fe fe25 	bl	8001690 <clearScreen>
			drawTitle("clock", hspi);
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	4b41      	ldr	r3, [pc, #260]	; (8002b50 <updateDisplay+0x158>)
 8002a4a:	0011      	movs	r1, r2
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	f7fe f995 	bl	8000d7c <drawTitle>
		}
		if (faceOnDisplay == faceTimer) {
 8002a52:	4b3d      	ldr	r3, [pc, #244]	; (8002b48 <updateDisplay+0x150>)
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d10c      	bne.n	8002a74 <updateDisplay+0x7c>
			clearScreen(ST77XX_GREEN, hspi);
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	23fc      	movs	r3, #252	; 0xfc
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	0011      	movs	r1, r2
 8002a62:	0018      	movs	r0, r3
 8002a64:	f7fe fe14 	bl	8001690 <clearScreen>
			drawTitle("timer", hspi);
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	4b3a      	ldr	r3, [pc, #232]	; (8002b54 <updateDisplay+0x15c>)
 8002a6c:	0011      	movs	r1, r2
 8002a6e:	0018      	movs	r0, r3
 8002a70:	f7fe f984 	bl	8000d7c <drawTitle>
		}
		if (faceOnDisplay == faceAlarm) {
 8002a74:	4b34      	ldr	r3, [pc, #208]	; (8002b48 <updateDisplay+0x150>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d10b      	bne.n	8002a94 <updateDisplay+0x9c>
			clearScreen(ST77XX_MAGENTA, hspi);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a36      	ldr	r2, [pc, #216]	; (8002b58 <updateDisplay+0x160>)
 8002a80:	0019      	movs	r1, r3
 8002a82:	0010      	movs	r0, r2
 8002a84:	f7fe fe04 	bl	8001690 <clearScreen>
			drawTitle("alarm", hspi);
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	4b34      	ldr	r3, [pc, #208]	; (8002b5c <updateDisplay+0x164>)
 8002a8c:	0011      	movs	r1, r2
 8002a8e:	0018      	movs	r0, r3
 8002a90:	f7fe f974 	bl	8000d7c <drawTitle>
		}
		if (faceOnDisplay == faceStopwatch) {
 8002a94:	4b2c      	ldr	r3, [pc, #176]	; (8002b48 <updateDisplay+0x150>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	2b03      	cmp	r3, #3
 8002a9a:	d10b      	bne.n	8002ab4 <updateDisplay+0xbc>
			clearScreen(ST77XX_YELLOW, hspi);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a30      	ldr	r2, [pc, #192]	; (8002b60 <updateDisplay+0x168>)
 8002aa0:	0019      	movs	r1, r3
 8002aa2:	0010      	movs	r0, r2
 8002aa4:	f7fe fdf4 	bl	8001690 <clearScreen>
			drawTitle("stopwatch", hspi);
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	4b2e      	ldr	r3, [pc, #184]	; (8002b64 <updateDisplay+0x16c>)
 8002aac:	0011      	movs	r1, r2
 8002aae:	0018      	movs	r0, r3
 8002ab0:	f7fe f964 	bl	8000d7c <drawTitle>
		}
	}

	// update clock face
	if (faceOnDisplay == faceClock) {
 8002ab4:	4b24      	ldr	r3, [pc, #144]	; (8002b48 <updateDisplay+0x150>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d10c      	bne.n	8002ad6 <updateDisplay+0xde>
		if (updateFace.clock == 1) {
 8002abc:	4b2a      	ldr	r3, [pc, #168]	; (8002b68 <updateDisplay+0x170>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d139      	bne.n	8002b3a <updateDisplay+0x142>
			updateFace.clock = 0;
 8002ac6:	4b28      	ldr	r3, [pc, #160]	; (8002b68 <updateDisplay+0x170>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	701a      	strb	r2, [r3, #0]
			updateClockDisplay(hspi);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	0018      	movs	r0, r3
 8002ad0:	f000 f84c 	bl	8002b6c <updateClockDisplay>
		if (updateFace.stopwatch == 1) {
			updateFace.stopwatch = 0;
			updateStopwatchDisplay(hspi);
		}
	}
}
 8002ad4:	e031      	b.n	8002b3a <updateDisplay+0x142>
	else if (faceOnDisplay == faceTimer) {
 8002ad6:	4b1c      	ldr	r3, [pc, #112]	; (8002b48 <updateDisplay+0x150>)
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d10c      	bne.n	8002af8 <updateDisplay+0x100>
		if (updateFace.timer == 1) {
 8002ade:	4b22      	ldr	r3, [pc, #136]	; (8002b68 <updateDisplay+0x170>)
 8002ae0:	785b      	ldrb	r3, [r3, #1]
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d128      	bne.n	8002b3a <updateDisplay+0x142>
			updateFace.timer = 0;
 8002ae8:	4b1f      	ldr	r3, [pc, #124]	; (8002b68 <updateDisplay+0x170>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	705a      	strb	r2, [r3, #1]
			updateTimerDisplay(hspi);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	0018      	movs	r0, r3
 8002af2:	f000 f915 	bl	8002d20 <updateTimerDisplay>
}
 8002af6:	e020      	b.n	8002b3a <updateDisplay+0x142>
	else if (faceOnDisplay == faceAlarm) {
 8002af8:	4b13      	ldr	r3, [pc, #76]	; (8002b48 <updateDisplay+0x150>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d10c      	bne.n	8002b1a <updateDisplay+0x122>
		if (updateFace.alarm == 1) {
 8002b00:	4b19      	ldr	r3, [pc, #100]	; (8002b68 <updateDisplay+0x170>)
 8002b02:	789b      	ldrb	r3, [r3, #2]
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d117      	bne.n	8002b3a <updateDisplay+0x142>
			updateFace.alarm = 0;
 8002b0a:	4b17      	ldr	r3, [pc, #92]	; (8002b68 <updateDisplay+0x170>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	709a      	strb	r2, [r3, #2]
			updateAlarmDisplay(hspi);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	0018      	movs	r0, r3
 8002b14:	f000 f9e8 	bl	8002ee8 <updateAlarmDisplay>
}
 8002b18:	e00f      	b.n	8002b3a <updateDisplay+0x142>
	else if (faceOnDisplay == faceStopwatch) {
 8002b1a:	4b0b      	ldr	r3, [pc, #44]	; (8002b48 <updateDisplay+0x150>)
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	2b03      	cmp	r3, #3
 8002b20:	d10b      	bne.n	8002b3a <updateDisplay+0x142>
		if (updateFace.stopwatch == 1) {
 8002b22:	4b11      	ldr	r3, [pc, #68]	; (8002b68 <updateDisplay+0x170>)
 8002b24:	78db      	ldrb	r3, [r3, #3]
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d106      	bne.n	8002b3a <updateDisplay+0x142>
			updateFace.stopwatch = 0;
 8002b2c:	4b0e      	ldr	r3, [pc, #56]	; (8002b68 <updateDisplay+0x170>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	70da      	strb	r2, [r3, #3]
			updateStopwatchDisplay(hspi);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	0018      	movs	r0, r3
 8002b36:	f000 fa9b 	bl	8003070 <updateStopwatchDisplay>
}
 8002b3a:	46c0      	nop			; (mov r8, r8)
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	b002      	add	sp, #8
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	46c0      	nop			; (mov r8, r8)
 8002b44:	20000104 	.word	0x20000104
 8002b48:	20000105 	.word	0x20000105
 8002b4c:	000007ff 	.word	0x000007ff
 8002b50:	080081c4 	.word	0x080081c4
 8002b54:	080081cc 	.word	0x080081cc
 8002b58:	0000f81f 	.word	0x0000f81f
 8002b5c:	080081d4 	.word	0x080081d4
 8002b60:	0000ffe0 	.word	0x0000ffe0
 8002b64:	080081dc 	.word	0x080081dc
 8002b68:	2000015c 	.word	0x2000015c

08002b6c <updateClockDisplay>:

void updateClockDisplay(SPI_HandleTypeDef *hspi) {
 8002b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b6e:	b091      	sub	sp, #68	; 0x44
 8002b70:	af02      	add	r7, sp, #8
 8002b72:	6078      	str	r0, [r7, #4]
	char str[40];
	struct dates *currentDate;
	struct times *currentTime;

	if (clockVars.isBeingSet == 0) {
 8002b74:	4b5a      	ldr	r3, [pc, #360]	; (8002ce0 <updateClockDisplay+0x174>)
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d149      	bne.n	8002c10 <updateClockDisplay+0xa4>
		drawTextAt(0, 0, "not setting", hspi);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a59      	ldr	r2, [pc, #356]	; (8002ce4 <updateClockDisplay+0x178>)
 8002b80:	2100      	movs	r1, #0
 8002b82:	2000      	movs	r0, #0
 8002b84:	f7fe fcf2 	bl	800156c <drawTextAt>
		drawTextAt(0, 10, "     ", hspi);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a57      	ldr	r2, [pc, #348]	; (8002ce8 <updateClockDisplay+0x17c>)
 8002b8c:	210a      	movs	r1, #10
 8002b8e:	2000      	movs	r0, #0
 8002b90:	f7fe fcec 	bl	800156c <drawTextAt>
		getDateTime(currentDate, currentTime);
 8002b94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b98:	0011      	movs	r1, r2
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	f7fe feb0 	bl	8001900 <getDateTime>
		sprintf(str, "%2u:%2u:%2u", currentTime->hr, currentTime->min, currentTime->sec);
 8002ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	001a      	movs	r2, r3
 8002ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba8:	785b      	ldrb	r3, [r3, #1]
 8002baa:	001c      	movs	r4, r3
 8002bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bae:	789b      	ldrb	r3, [r3, #2]
 8002bb0:	494e      	ldr	r1, [pc, #312]	; (8002cec <updateClockDisplay+0x180>)
 8002bb2:	2508      	movs	r5, #8
 8002bb4:	1978      	adds	r0, r7, r5
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	0023      	movs	r3, r4
 8002bba:	f004 fe69 	bl	8007890 <siprintf>
		drawTextAt(0, 60, str, hspi);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	197a      	adds	r2, r7, r5
 8002bc2:	213c      	movs	r1, #60	; 0x3c
 8002bc4:	2000      	movs	r0, #0
 8002bc6:	f7fe fcd1 	bl	800156c <drawTextAt>
		sprintf(str, "%s, %2u, %4u   %s", monthNames[currentDate->month], currentDate->date, currentDate->yr, weekdayNames[currentDate->weekday]);
 8002bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bcc:	789b      	ldrb	r3, [r3, #2]
 8002bce:	001a      	movs	r2, r3
 8002bd0:	4b47      	ldr	r3, [pc, #284]	; (8002cf0 <updateClockDisplay+0x184>)
 8002bd2:	0092      	lsls	r2, r2, #2
 8002bd4:	58d4      	ldr	r4, [r2, r3]
 8002bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd8:	78db      	ldrb	r3, [r3, #3]
 8002bda:	001e      	movs	r6, r3
 8002bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bde:	881b      	ldrh	r3, [r3, #0]
 8002be0:	001d      	movs	r5, r3
 8002be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be4:	791b      	ldrb	r3, [r3, #4]
 8002be6:	001a      	movs	r2, r3
 8002be8:	4b42      	ldr	r3, [pc, #264]	; (8002cf4 <updateClockDisplay+0x188>)
 8002bea:	0092      	lsls	r2, r2, #2
 8002bec:	58d3      	ldr	r3, [r2, r3]
 8002bee:	4942      	ldr	r1, [pc, #264]	; (8002cf8 <updateClockDisplay+0x18c>)
 8002bf0:	2208      	movs	r2, #8
 8002bf2:	18b8      	adds	r0, r7, r2
 8002bf4:	9301      	str	r3, [sp, #4]
 8002bf6:	9500      	str	r5, [sp, #0]
 8002bf8:	0033      	movs	r3, r6
 8002bfa:	0022      	movs	r2, r4
 8002bfc:	f004 fe48 	bl	8007890 <siprintf>
		drawTextAt(0, 70, str, hspi);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2508      	movs	r5, #8
 8002c04:	197a      	adds	r2, r7, r5
 8002c06:	2146      	movs	r1, #70	; 0x46
 8002c08:	2000      	movs	r0, #0
 8002c0a:	f7fe fcaf 	bl	800156c <drawTextAt>
		sprintf(str, "%2u:%2u   ", clockVars.timeToSet->hr, clockVars.timeToSet->min);
		drawTextAt(0, 60, str, hspi);
		sprintf(str, "%s, %2u, %4u      ", monthNames[clockVars.dateToSet->month], clockVars.dateToSet->date, clockVars.dateToSet->yr);
		drawTextAt(0, 70, str, hspi);
	}
}
 8002c0e:	e062      	b.n	8002cd6 <updateClockDisplay+0x16a>
	else if (clockVars.isBeingSet == 1) {
 8002c10:	4b33      	ldr	r3, [pc, #204]	; (8002ce0 <updateClockDisplay+0x174>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d15e      	bne.n	8002cd6 <updateClockDisplay+0x16a>
		drawTextAt(0, 0, "setting... ", hspi);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a38      	ldr	r2, [pc, #224]	; (8002cfc <updateClockDisplay+0x190>)
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	2000      	movs	r0, #0
 8002c20:	f7fe fca4 	bl	800156c <drawTextAt>
		switch (clockVars.fieldBeingSet) {
 8002c24:	4b2e      	ldr	r3, [pc, #184]	; (8002ce0 <updateClockDisplay+0x174>)
 8002c26:	785b      	ldrb	r3, [r3, #1]
 8002c28:	2b05      	cmp	r3, #5
 8002c2a:	d827      	bhi.n	8002c7c <updateClockDisplay+0x110>
 8002c2c:	009a      	lsls	r2, r3, #2
 8002c2e:	4b34      	ldr	r3, [pc, #208]	; (8002d00 <updateClockDisplay+0x194>)
 8002c30:	18d3      	adds	r3, r2, r3
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	469f      	mov	pc, r3
			case 1: drawTextAt(0, 10, "min  ", hspi); break;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a32      	ldr	r2, [pc, #200]	; (8002d04 <updateClockDisplay+0x198>)
 8002c3a:	210a      	movs	r1, #10
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	f7fe fc95 	bl	800156c <drawTextAt>
 8002c42:	e01c      	b.n	8002c7e <updateClockDisplay+0x112>
			case 2: drawTextAt(0, 10, "hr   ", hspi); break;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a30      	ldr	r2, [pc, #192]	; (8002d08 <updateClockDisplay+0x19c>)
 8002c48:	210a      	movs	r1, #10
 8002c4a:	2000      	movs	r0, #0
 8002c4c:	f7fe fc8e 	bl	800156c <drawTextAt>
 8002c50:	e015      	b.n	8002c7e <updateClockDisplay+0x112>
			case 3: drawTextAt(0, 10, "year ", hspi); break;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a2d      	ldr	r2, [pc, #180]	; (8002d0c <updateClockDisplay+0x1a0>)
 8002c56:	210a      	movs	r1, #10
 8002c58:	2000      	movs	r0, #0
 8002c5a:	f7fe fc87 	bl	800156c <drawTextAt>
 8002c5e:	e00e      	b.n	8002c7e <updateClockDisplay+0x112>
			case 4: drawTextAt(0, 10, "month", hspi); break;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a2b      	ldr	r2, [pc, #172]	; (8002d10 <updateClockDisplay+0x1a4>)
 8002c64:	210a      	movs	r1, #10
 8002c66:	2000      	movs	r0, #0
 8002c68:	f7fe fc80 	bl	800156c <drawTextAt>
 8002c6c:	e007      	b.n	8002c7e <updateClockDisplay+0x112>
			case 5: drawTextAt(0, 10, "day  ", hspi); break;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a28      	ldr	r2, [pc, #160]	; (8002d14 <updateClockDisplay+0x1a8>)
 8002c72:	210a      	movs	r1, #10
 8002c74:	2000      	movs	r0, #0
 8002c76:	f7fe fc79 	bl	800156c <drawTextAt>
 8002c7a:	e000      	b.n	8002c7e <updateClockDisplay+0x112>
			default: break;
 8002c7c:	46c0      	nop			; (mov r8, r8)
		sprintf(str, "%2u:%2u   ", clockVars.timeToSet->hr, clockVars.timeToSet->min);
 8002c7e:	4b18      	ldr	r3, [pc, #96]	; (8002ce0 <updateClockDisplay+0x174>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	001a      	movs	r2, r3
 8002c86:	4b16      	ldr	r3, [pc, #88]	; (8002ce0 <updateClockDisplay+0x174>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	785b      	ldrb	r3, [r3, #1]
 8002c8c:	4922      	ldr	r1, [pc, #136]	; (8002d18 <updateClockDisplay+0x1ac>)
 8002c8e:	2508      	movs	r5, #8
 8002c90:	1978      	adds	r0, r7, r5
 8002c92:	f004 fdfd 	bl	8007890 <siprintf>
		drawTextAt(0, 60, str, hspi);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	197a      	adds	r2, r7, r5
 8002c9a:	213c      	movs	r1, #60	; 0x3c
 8002c9c:	2000      	movs	r0, #0
 8002c9e:	f7fe fc65 	bl	800156c <drawTextAt>
		sprintf(str, "%s, %2u, %4u      ", monthNames[clockVars.dateToSet->month], clockVars.dateToSet->date, clockVars.dateToSet->yr);
 8002ca2:	4b0f      	ldr	r3, [pc, #60]	; (8002ce0 <updateClockDisplay+0x174>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	789b      	ldrb	r3, [r3, #2]
 8002ca8:	001a      	movs	r2, r3
 8002caa:	4b11      	ldr	r3, [pc, #68]	; (8002cf0 <updateClockDisplay+0x184>)
 8002cac:	0092      	lsls	r2, r2, #2
 8002cae:	58d2      	ldr	r2, [r2, r3]
 8002cb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ce0 <updateClockDisplay+0x174>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	78db      	ldrb	r3, [r3, #3]
 8002cb6:	001c      	movs	r4, r3
 8002cb8:	4b09      	ldr	r3, [pc, #36]	; (8002ce0 <updateClockDisplay+0x174>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	881b      	ldrh	r3, [r3, #0]
 8002cbe:	4917      	ldr	r1, [pc, #92]	; (8002d1c <updateClockDisplay+0x1b0>)
 8002cc0:	1978      	adds	r0, r7, r5
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	0023      	movs	r3, r4
 8002cc6:	f004 fde3 	bl	8007890 <siprintf>
		drawTextAt(0, 70, str, hspi);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	197a      	adds	r2, r7, r5
 8002cce:	2146      	movs	r1, #70	; 0x46
 8002cd0:	2000      	movs	r0, #0
 8002cd2:	f7fe fc4b 	bl	800156c <drawTextAt>
}
 8002cd6:	46c0      	nop			; (mov r8, r8)
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	b00f      	add	sp, #60	; 0x3c
 8002cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cde:	46c0      	nop			; (mov r8, r8)
 8002ce0:	200000e0 	.word	0x200000e0
 8002ce4:	080081e8 	.word	0x080081e8
 8002ce8:	080081f4 	.word	0x080081f4
 8002cec:	080081fc 	.word	0x080081fc
 8002cf0:	20000020 	.word	0x20000020
 8002cf4:	20000000 	.word	0x20000000
 8002cf8:	08008208 	.word	0x08008208
 8002cfc:	0800821c 	.word	0x0800821c
 8002d00:	080087ec 	.word	0x080087ec
 8002d04:	08008228 	.word	0x08008228
 8002d08:	08008230 	.word	0x08008230
 8002d0c:	08008238 	.word	0x08008238
 8002d10:	08008240 	.word	0x08008240
 8002d14:	08008248 	.word	0x08008248
 8002d18:	08008250 	.word	0x08008250
 8002d1c:	0800825c 	.word	0x0800825c

08002d20 <updateTimerDisplay>:

void updateTimerDisplay(SPI_HandleTypeDef *hspi) {
 8002d20:	b5b0      	push	{r4, r5, r7, lr}
 8002d22:	b090      	sub	sp, #64	; 0x40
 8002d24:	af02      	add	r7, sp, #8
 8002d26:	6078      	str	r0, [r7, #4]
	char str[40];
	uint32_t timerVal;
	uint8_t hr, min, sec;

	if (timerVars.isBeingSet == 0) {
 8002d28:	4b63      	ldr	r3, [pc, #396]	; (8002eb8 <updateTimerDisplay+0x198>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d000      	beq.n	8002d32 <updateTimerDisplay+0x12>
 8002d30:	e07d      	b.n	8002e2e <updateTimerDisplay+0x10e>
		timerVal = watchTimerSeconds;
 8002d32:	4b62      	ldr	r3, [pc, #392]	; (8002ebc <updateTimerDisplay+0x19c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	637b      	str	r3, [r7, #52]	; 0x34

		if (timerVal != 0) {
 8002d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d03b      	beq.n	8002db6 <updateTimerDisplay+0x96>
			hr = timerVal / 3600;
 8002d3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d40:	23e1      	movs	r3, #225	; 0xe1
 8002d42:	0119      	lsls	r1, r3, #4
 8002d44:	0010      	movs	r0, r2
 8002d46:	f7fd f9df 	bl	8000108 <__udivsi3>
 8002d4a:	0003      	movs	r3, r0
 8002d4c:	001a      	movs	r2, r3
 8002d4e:	2433      	movs	r4, #51	; 0x33
 8002d50:	193b      	adds	r3, r7, r4
 8002d52:	701a      	strb	r2, [r3, #0]
			timerVal %= 3600;
 8002d54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d56:	23e1      	movs	r3, #225	; 0xe1
 8002d58:	0119      	lsls	r1, r3, #4
 8002d5a:	0010      	movs	r0, r2
 8002d5c:	f7fd fa5a 	bl	8000214 <__aeabi_uidivmod>
 8002d60:	000b      	movs	r3, r1
 8002d62:	637b      	str	r3, [r7, #52]	; 0x34
			min = timerVal / 60;
 8002d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d66:	213c      	movs	r1, #60	; 0x3c
 8002d68:	0018      	movs	r0, r3
 8002d6a:	f7fd f9cd 	bl	8000108 <__udivsi3>
 8002d6e:	0003      	movs	r3, r0
 8002d70:	001a      	movs	r2, r3
 8002d72:	2532      	movs	r5, #50	; 0x32
 8002d74:	197b      	adds	r3, r7, r5
 8002d76:	701a      	strb	r2, [r3, #0]
			timerVal %= 60;
 8002d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d7a:	213c      	movs	r1, #60	; 0x3c
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	f7fd fa49 	bl	8000214 <__aeabi_uidivmod>
 8002d82:	000b      	movs	r3, r1
 8002d84:	637b      	str	r3, [r7, #52]	; 0x34
			sec = timerVal;
 8002d86:	2131      	movs	r1, #49	; 0x31
 8002d88:	187b      	adds	r3, r7, r1
 8002d8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d8c:	701a      	strb	r2, [r3, #0]

			sprintf(str, "%2u:%2u:%2u", hr, min, sec);
 8002d8e:	193b      	adds	r3, r7, r4
 8002d90:	781a      	ldrb	r2, [r3, #0]
 8002d92:	197b      	adds	r3, r7, r5
 8002d94:	781c      	ldrb	r4, [r3, #0]
 8002d96:	187b      	adds	r3, r7, r1
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	4949      	ldr	r1, [pc, #292]	; (8002ec0 <updateTimerDisplay+0x1a0>)
 8002d9c:	2508      	movs	r5, #8
 8002d9e:	1978      	adds	r0, r7, r5
 8002da0:	9300      	str	r3, [sp, #0]
 8002da2:	0023      	movs	r3, r4
 8002da4:	f004 fd74 	bl	8007890 <siprintf>
			drawTextAt(0, 60, str, hspi);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	197a      	adds	r2, r7, r5
 8002dac:	213c      	movs	r1, #60	; 0x3c
 8002dae:	2000      	movs	r0, #0
 8002db0:	f7fe fbdc 	bl	800156c <drawTextAt>
 8002db4:	e005      	b.n	8002dc2 <updateTimerDisplay+0xa2>
		}
		else {
			drawTextAt(0, 60, "        ", hspi);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a42      	ldr	r2, [pc, #264]	; (8002ec4 <updateTimerDisplay+0x1a4>)
 8002dba:	213c      	movs	r1, #60	; 0x3c
 8002dbc:	2000      	movs	r0, #0
 8002dbe:	f7fe fbd5 	bl	800156c <drawTextAt>
		}

		drawTextAt(0, 10, "     ", hspi);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a40      	ldr	r2, [pc, #256]	; (8002ec8 <updateTimerDisplay+0x1a8>)
 8002dc6:	210a      	movs	r1, #10
 8002dc8:	2000      	movs	r0, #0
 8002dca:	f7fe fbcf 	bl	800156c <drawTextAt>
		if (isTimerRunning == 0) {
 8002dce:	4b3f      	ldr	r3, [pc, #252]	; (8002ecc <updateTimerDisplay+0x1ac>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d106      	bne.n	8002de6 <updateTimerDisplay+0xc6>
			drawTextAt(0, 0, "not running", hspi);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a3d      	ldr	r2, [pc, #244]	; (8002ed0 <updateTimerDisplay+0x1b0>)
 8002ddc:	2100      	movs	r1, #0
 8002dde:	2000      	movs	r0, #0
 8002de0:	f7fe fbc4 	bl	800156c <drawTextAt>
			default: break;
		}
		sprintf(str, "%2u:%2u:%2u", timerVars.timeToSet->hr, timerVars.timeToSet->min, timerVars.timeToSet->sec);
		drawTextAt(0, 60, str, hspi);
	}
}
 8002de4:	e063      	b.n	8002eae <updateTimerDisplay+0x18e>
		else if (isTimerRunning == 1) {
 8002de6:	4b39      	ldr	r3, [pc, #228]	; (8002ecc <updateTimerDisplay+0x1ac>)
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d15e      	bne.n	8002eae <updateTimerDisplay+0x18e>
			drawTextAt(0, 0, "running    ", hspi);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a38      	ldr	r2, [pc, #224]	; (8002ed4 <updateTimerDisplay+0x1b4>)
 8002df4:	2100      	movs	r1, #0
 8002df6:	2000      	movs	r0, #0
 8002df8:	f7fe fbb8 	bl	800156c <drawTextAt>
			sprintf(str, "%2u:%2u:%2u", timerVars.timeToSet->hr, timerVars.timeToSet->min, timerVars.timeToSet->sec);
 8002dfc:	4b2e      	ldr	r3, [pc, #184]	; (8002eb8 <updateTimerDisplay+0x198>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	001a      	movs	r2, r3
 8002e04:	4b2c      	ldr	r3, [pc, #176]	; (8002eb8 <updateTimerDisplay+0x198>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	785b      	ldrb	r3, [r3, #1]
 8002e0a:	001c      	movs	r4, r3
 8002e0c:	4b2a      	ldr	r3, [pc, #168]	; (8002eb8 <updateTimerDisplay+0x198>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	789b      	ldrb	r3, [r3, #2]
 8002e12:	492b      	ldr	r1, [pc, #172]	; (8002ec0 <updateTimerDisplay+0x1a0>)
 8002e14:	2508      	movs	r5, #8
 8002e16:	1978      	adds	r0, r7, r5
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	0023      	movs	r3, r4
 8002e1c:	f004 fd38 	bl	8007890 <siprintf>
			drawTextAt(0, 50, str, hspi);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	197a      	adds	r2, r7, r5
 8002e24:	2132      	movs	r1, #50	; 0x32
 8002e26:	2000      	movs	r0, #0
 8002e28:	f7fe fba0 	bl	800156c <drawTextAt>
}
 8002e2c:	e03f      	b.n	8002eae <updateTimerDisplay+0x18e>
	else if (timerVars.isBeingSet == 1) {
 8002e2e:	4b22      	ldr	r3, [pc, #136]	; (8002eb8 <updateTimerDisplay+0x198>)
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d13b      	bne.n	8002eae <updateTimerDisplay+0x18e>
		drawTextAt(0, 0, "setting... ", hspi);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a27      	ldr	r2, [pc, #156]	; (8002ed8 <updateTimerDisplay+0x1b8>)
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	2000      	movs	r0, #0
 8002e3e:	f7fe fb95 	bl	800156c <drawTextAt>
		switch (timerVars.fieldBeingSet) {
 8002e42:	4b1d      	ldr	r3, [pc, #116]	; (8002eb8 <updateTimerDisplay+0x198>)
 8002e44:	785b      	ldrb	r3, [r3, #1]
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d00b      	beq.n	8002e62 <updateTimerDisplay+0x142>
 8002e4a:	2b03      	cmp	r3, #3
 8002e4c:	d010      	beq.n	8002e70 <updateTimerDisplay+0x150>
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d000      	beq.n	8002e54 <updateTimerDisplay+0x134>
			default: break;
 8002e52:	e014      	b.n	8002e7e <updateTimerDisplay+0x15e>
			case 1: drawTextAt(0, 10, "sec  ", hspi); break;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a21      	ldr	r2, [pc, #132]	; (8002edc <updateTimerDisplay+0x1bc>)
 8002e58:	210a      	movs	r1, #10
 8002e5a:	2000      	movs	r0, #0
 8002e5c:	f7fe fb86 	bl	800156c <drawTextAt>
 8002e60:	e00d      	b.n	8002e7e <updateTimerDisplay+0x15e>
			case 2: drawTextAt(0, 10, "min  ", hspi); break;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a1e      	ldr	r2, [pc, #120]	; (8002ee0 <updateTimerDisplay+0x1c0>)
 8002e66:	210a      	movs	r1, #10
 8002e68:	2000      	movs	r0, #0
 8002e6a:	f7fe fb7f 	bl	800156c <drawTextAt>
 8002e6e:	e006      	b.n	8002e7e <updateTimerDisplay+0x15e>
			case 3: drawTextAt(0, 10, "hr   ", hspi); break;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a1c      	ldr	r2, [pc, #112]	; (8002ee4 <updateTimerDisplay+0x1c4>)
 8002e74:	210a      	movs	r1, #10
 8002e76:	2000      	movs	r0, #0
 8002e78:	f7fe fb78 	bl	800156c <drawTextAt>
 8002e7c:	46c0      	nop			; (mov r8, r8)
		sprintf(str, "%2u:%2u:%2u", timerVars.timeToSet->hr, timerVars.timeToSet->min, timerVars.timeToSet->sec);
 8002e7e:	4b0e      	ldr	r3, [pc, #56]	; (8002eb8 <updateTimerDisplay+0x198>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	001a      	movs	r2, r3
 8002e86:	4b0c      	ldr	r3, [pc, #48]	; (8002eb8 <updateTimerDisplay+0x198>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	785b      	ldrb	r3, [r3, #1]
 8002e8c:	001c      	movs	r4, r3
 8002e8e:	4b0a      	ldr	r3, [pc, #40]	; (8002eb8 <updateTimerDisplay+0x198>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	789b      	ldrb	r3, [r3, #2]
 8002e94:	490a      	ldr	r1, [pc, #40]	; (8002ec0 <updateTimerDisplay+0x1a0>)
 8002e96:	2508      	movs	r5, #8
 8002e98:	1978      	adds	r0, r7, r5
 8002e9a:	9300      	str	r3, [sp, #0]
 8002e9c:	0023      	movs	r3, r4
 8002e9e:	f004 fcf7 	bl	8007890 <siprintf>
		drawTextAt(0, 60, str, hspi);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	197a      	adds	r2, r7, r5
 8002ea6:	213c      	movs	r1, #60	; 0x3c
 8002ea8:	2000      	movs	r0, #0
 8002eaa:	f7fe fb5f 	bl	800156c <drawTextAt>
}
 8002eae:	46c0      	nop			; (mov r8, r8)
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	b00e      	add	sp, #56	; 0x38
 8002eb4:	bdb0      	pop	{r4, r5, r7, pc}
 8002eb6:	46c0      	nop			; (mov r8, r8)
 8002eb8:	200000ec 	.word	0x200000ec
 8002ebc:	20000218 	.word	0x20000218
 8002ec0:	080081fc 	.word	0x080081fc
 8002ec4:	08008270 	.word	0x08008270
 8002ec8:	080081f4 	.word	0x080081f4
 8002ecc:	200001bc 	.word	0x200001bc
 8002ed0:	0800827c 	.word	0x0800827c
 8002ed4:	08008288 	.word	0x08008288
 8002ed8:	0800821c 	.word	0x0800821c
 8002edc:	08008294 	.word	0x08008294
 8002ee0:	08008228 	.word	0x08008228
 8002ee4:	08008230 	.word	0x08008230

08002ee8 <updateAlarmDisplay>:

void updateAlarmDisplay(SPI_HandleTypeDef *hspi) {
 8002ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eea:	b08f      	sub	sp, #60	; 0x3c
 8002eec:	af02      	add	r7, sp, #8
 8002eee:	6078      	str	r0, [r7, #4]
	char str[40];

	if (alarmVars.isBeingSet == 0) {
 8002ef0:	4b52      	ldr	r3, [pc, #328]	; (800303c <updateAlarmDisplay+0x154>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d147      	bne.n	8002f88 <updateAlarmDisplay+0xa0>
		drawTextAt(0, 10, "     ", hspi);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a51      	ldr	r2, [pc, #324]	; (8003040 <updateAlarmDisplay+0x158>)
 8002efc:	210a      	movs	r1, #10
 8002efe:	2000      	movs	r0, #0
 8002f00:	f7fe fb34 	bl	800156c <drawTextAt>
		if (isAlarmRunning == 0) {
 8002f04:	4b4f      	ldr	r3, [pc, #316]	; (8003044 <updateAlarmDisplay+0x15c>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10c      	bne.n	8002f28 <updateAlarmDisplay+0x40>
			drawTextAt(0, 0, "not running", hspi);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a4d      	ldr	r2, [pc, #308]	; (8003048 <updateAlarmDisplay+0x160>)
 8002f12:	2100      	movs	r1, #0
 8002f14:	2000      	movs	r0, #0
 8002f16:	f7fe fb29 	bl	800156c <drawTextAt>
			drawTextAt(0, 60, "              ", hspi);		// clears line used in other cases. probably should wrap in graphics function
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a4b      	ldr	r2, [pc, #300]	; (800304c <updateAlarmDisplay+0x164>)
 8002f1e:	213c      	movs	r1, #60	; 0x3c
 8002f20:	2000      	movs	r0, #0
 8002f22:	f7fe fb23 	bl	800156c <drawTextAt>
		}
		// maybe make this more efficient
		sprintf(str, "%2u:%2u:%2u %s", alarmVars.alarmToSet->hr, alarmVars.alarmToSet->min, alarmVars.alarmToSet->sec, weekdayNames[alarmVars.alarmToSet->weekday]);
		drawTextAt(0, 60, str, hspi);
	}
}
 8002f26:	e085      	b.n	8003034 <updateAlarmDisplay+0x14c>
		else if (isAlarmRunning == 1) {
 8002f28:	4b46      	ldr	r3, [pc, #280]	; (8003044 <updateAlarmDisplay+0x15c>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d000      	beq.n	8002f34 <updateAlarmDisplay+0x4c>
 8002f32:	e07f      	b.n	8003034 <updateAlarmDisplay+0x14c>
			drawTextAt(0, 0, "running    ", hspi);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a46      	ldr	r2, [pc, #280]	; (8003050 <updateAlarmDisplay+0x168>)
 8002f38:	2100      	movs	r1, #0
 8002f3a:	2000      	movs	r0, #0
 8002f3c:	f7fe fb16 	bl	800156c <drawTextAt>
			sprintf(str, "%2u:%2u:%2u %s", alarmVars.alarmToSet->hr, alarmVars.alarmToSet->min, alarmVars.alarmToSet->sec, weekdayNames[alarmVars.alarmToSet->weekday]);
 8002f40:	4b3e      	ldr	r3, [pc, #248]	; (800303c <updateAlarmDisplay+0x154>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	001d      	movs	r5, r3
 8002f48:	4b3c      	ldr	r3, [pc, #240]	; (800303c <updateAlarmDisplay+0x154>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	785b      	ldrb	r3, [r3, #1]
 8002f4e:	001e      	movs	r6, r3
 8002f50:	4b3a      	ldr	r3, [pc, #232]	; (800303c <updateAlarmDisplay+0x154>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	789b      	ldrb	r3, [r3, #2]
 8002f56:	001c      	movs	r4, r3
 8002f58:	4b38      	ldr	r3, [pc, #224]	; (800303c <updateAlarmDisplay+0x154>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	78db      	ldrb	r3, [r3, #3]
 8002f5e:	001a      	movs	r2, r3
 8002f60:	4b3c      	ldr	r3, [pc, #240]	; (8003054 <updateAlarmDisplay+0x16c>)
 8002f62:	0092      	lsls	r2, r2, #2
 8002f64:	58d3      	ldr	r3, [r2, r3]
 8002f66:	493c      	ldr	r1, [pc, #240]	; (8003058 <updateAlarmDisplay+0x170>)
 8002f68:	2208      	movs	r2, #8
 8002f6a:	18b8      	adds	r0, r7, r2
 8002f6c:	9301      	str	r3, [sp, #4]
 8002f6e:	9400      	str	r4, [sp, #0]
 8002f70:	0033      	movs	r3, r6
 8002f72:	002a      	movs	r2, r5
 8002f74:	f004 fc8c 	bl	8007890 <siprintf>
			drawTextAt(0, 60, str, hspi);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2208      	movs	r2, #8
 8002f7c:	18ba      	adds	r2, r7, r2
 8002f7e:	213c      	movs	r1, #60	; 0x3c
 8002f80:	2000      	movs	r0, #0
 8002f82:	f7fe faf3 	bl	800156c <drawTextAt>
}
 8002f86:	e055      	b.n	8003034 <updateAlarmDisplay+0x14c>
	else if (alarmVars.isBeingSet == 1) {
 8002f88:	4b2c      	ldr	r3, [pc, #176]	; (800303c <updateAlarmDisplay+0x154>)
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d151      	bne.n	8003034 <updateAlarmDisplay+0x14c>
		drawTextAt(0, 0, "setting... ", hspi);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a32      	ldr	r2, [pc, #200]	; (800305c <updateAlarmDisplay+0x174>)
 8002f94:	2100      	movs	r1, #0
 8002f96:	2000      	movs	r0, #0
 8002f98:	f7fe fae8 	bl	800156c <drawTextAt>
		switch (alarmVars.fieldBeingSet) {
 8002f9c:	4b27      	ldr	r3, [pc, #156]	; (800303c <updateAlarmDisplay+0x154>)
 8002f9e:	785b      	ldrb	r3, [r3, #1]
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d00f      	beq.n	8002fc4 <updateAlarmDisplay+0xdc>
 8002fa4:	dc02      	bgt.n	8002fac <updateAlarmDisplay+0xc4>
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d005      	beq.n	8002fb6 <updateAlarmDisplay+0xce>
			default: break;
 8002faa:	e020      	b.n	8002fee <updateAlarmDisplay+0x106>
		switch (alarmVars.fieldBeingSet) {
 8002fac:	2b03      	cmp	r3, #3
 8002fae:	d010      	beq.n	8002fd2 <updateAlarmDisplay+0xea>
 8002fb0:	2b04      	cmp	r3, #4
 8002fb2:	d015      	beq.n	8002fe0 <updateAlarmDisplay+0xf8>
			default: break;
 8002fb4:	e01b      	b.n	8002fee <updateAlarmDisplay+0x106>
			case 1: drawTextAt(0, 10, "sec  ", hspi); break;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a29      	ldr	r2, [pc, #164]	; (8003060 <updateAlarmDisplay+0x178>)
 8002fba:	210a      	movs	r1, #10
 8002fbc:	2000      	movs	r0, #0
 8002fbe:	f7fe fad5 	bl	800156c <drawTextAt>
 8002fc2:	e014      	b.n	8002fee <updateAlarmDisplay+0x106>
			case 2: drawTextAt(0, 10, "min  ", hspi); break;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a27      	ldr	r2, [pc, #156]	; (8003064 <updateAlarmDisplay+0x17c>)
 8002fc8:	210a      	movs	r1, #10
 8002fca:	2000      	movs	r0, #0
 8002fcc:	f7fe face 	bl	800156c <drawTextAt>
 8002fd0:	e00d      	b.n	8002fee <updateAlarmDisplay+0x106>
			case 3: drawTextAt(0, 10, "hr   ", hspi); break;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a24      	ldr	r2, [pc, #144]	; (8003068 <updateAlarmDisplay+0x180>)
 8002fd6:	210a      	movs	r1, #10
 8002fd8:	2000      	movs	r0, #0
 8002fda:	f7fe fac7 	bl	800156c <drawTextAt>
 8002fde:	e006      	b.n	8002fee <updateAlarmDisplay+0x106>
			case 4: drawTextAt(0, 10, "day  ", hspi); break;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a22      	ldr	r2, [pc, #136]	; (800306c <updateAlarmDisplay+0x184>)
 8002fe4:	210a      	movs	r1, #10
 8002fe6:	2000      	movs	r0, #0
 8002fe8:	f7fe fac0 	bl	800156c <drawTextAt>
 8002fec:	46c0      	nop			; (mov r8, r8)
		sprintf(str, "%2u:%2u:%2u %s", alarmVars.alarmToSet->hr, alarmVars.alarmToSet->min, alarmVars.alarmToSet->sec, weekdayNames[alarmVars.alarmToSet->weekday]);
 8002fee:	4b13      	ldr	r3, [pc, #76]	; (800303c <updateAlarmDisplay+0x154>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	001d      	movs	r5, r3
 8002ff6:	4b11      	ldr	r3, [pc, #68]	; (800303c <updateAlarmDisplay+0x154>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	785b      	ldrb	r3, [r3, #1]
 8002ffc:	001e      	movs	r6, r3
 8002ffe:	4b0f      	ldr	r3, [pc, #60]	; (800303c <updateAlarmDisplay+0x154>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	789b      	ldrb	r3, [r3, #2]
 8003004:	001c      	movs	r4, r3
 8003006:	4b0d      	ldr	r3, [pc, #52]	; (800303c <updateAlarmDisplay+0x154>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	78db      	ldrb	r3, [r3, #3]
 800300c:	001a      	movs	r2, r3
 800300e:	4b11      	ldr	r3, [pc, #68]	; (8003054 <updateAlarmDisplay+0x16c>)
 8003010:	0092      	lsls	r2, r2, #2
 8003012:	58d3      	ldr	r3, [r2, r3]
 8003014:	4910      	ldr	r1, [pc, #64]	; (8003058 <updateAlarmDisplay+0x170>)
 8003016:	2208      	movs	r2, #8
 8003018:	18b8      	adds	r0, r7, r2
 800301a:	9301      	str	r3, [sp, #4]
 800301c:	9400      	str	r4, [sp, #0]
 800301e:	0033      	movs	r3, r6
 8003020:	002a      	movs	r2, r5
 8003022:	f004 fc35 	bl	8007890 <siprintf>
		drawTextAt(0, 60, str, hspi);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2208      	movs	r2, #8
 800302a:	18ba      	adds	r2, r7, r2
 800302c:	213c      	movs	r1, #60	; 0x3c
 800302e:	2000      	movs	r0, #0
 8003030:	f7fe fa9c 	bl	800156c <drawTextAt>
}
 8003034:	46c0      	nop			; (mov r8, r8)
 8003036:	46bd      	mov	sp, r7
 8003038:	b00d      	add	sp, #52	; 0x34
 800303a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800303c:	200000f4 	.word	0x200000f4
 8003040:	080081f4 	.word	0x080081f4
 8003044:	20000161 	.word	0x20000161
 8003048:	0800827c 	.word	0x0800827c
 800304c:	0800829c 	.word	0x0800829c
 8003050:	08008288 	.word	0x08008288
 8003054:	20000000 	.word	0x20000000
 8003058:	080082ac 	.word	0x080082ac
 800305c:	0800821c 	.word	0x0800821c
 8003060:	08008294 	.word	0x08008294
 8003064:	08008228 	.word	0x08008228
 8003068:	08008230 	.word	0x08008230
 800306c:	08008248 	.word	0x08008248

08003070 <updateStopwatchDisplay>:

void updateStopwatchDisplay(SPI_HandleTypeDef *hspi) {
 8003070:	b5b0      	push	{r4, r5, r7, lr}
 8003072:	b090      	sub	sp, #64	; 0x40
 8003074:	af02      	add	r7, sp, #8
 8003076:	6078      	str	r0, [r7, #4]
	char str[40];
	uint32_t stopwatchVal;
	uint8_t hr, min, sec;

	// translating 32-bit counter to hours, minutes, seconds
	stopwatchVal = stopwatchCNT;
 8003078:	4b2c      	ldr	r3, [pc, #176]	; (800312c <updateStopwatchDisplay+0xbc>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	637b      	str	r3, [r7, #52]	; 0x34

	hr = stopwatchVal / 3600;
 800307e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003080:	23e1      	movs	r3, #225	; 0xe1
 8003082:	0119      	lsls	r1, r3, #4
 8003084:	0010      	movs	r0, r2
 8003086:	f7fd f83f 	bl	8000108 <__udivsi3>
 800308a:	0003      	movs	r3, r0
 800308c:	001a      	movs	r2, r3
 800308e:	2433      	movs	r4, #51	; 0x33
 8003090:	193b      	adds	r3, r7, r4
 8003092:	701a      	strb	r2, [r3, #0]
	stopwatchVal %= 3600;
 8003094:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003096:	23e1      	movs	r3, #225	; 0xe1
 8003098:	0119      	lsls	r1, r3, #4
 800309a:	0010      	movs	r0, r2
 800309c:	f7fd f8ba 	bl	8000214 <__aeabi_uidivmod>
 80030a0:	000b      	movs	r3, r1
 80030a2:	637b      	str	r3, [r7, #52]	; 0x34
	min = stopwatchVal / 60;
 80030a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030a6:	213c      	movs	r1, #60	; 0x3c
 80030a8:	0018      	movs	r0, r3
 80030aa:	f7fd f82d 	bl	8000108 <__udivsi3>
 80030ae:	0003      	movs	r3, r0
 80030b0:	001a      	movs	r2, r3
 80030b2:	2532      	movs	r5, #50	; 0x32
 80030b4:	197b      	adds	r3, r7, r5
 80030b6:	701a      	strb	r2, [r3, #0]
	stopwatchVal %= 60;
 80030b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ba:	213c      	movs	r1, #60	; 0x3c
 80030bc:	0018      	movs	r0, r3
 80030be:	f7fd f8a9 	bl	8000214 <__aeabi_uidivmod>
 80030c2:	000b      	movs	r3, r1
 80030c4:	637b      	str	r3, [r7, #52]	; 0x34
	sec = stopwatchVal;
 80030c6:	2131      	movs	r1, #49	; 0x31
 80030c8:	187b      	adds	r3, r7, r1
 80030ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030cc:	701a      	strb	r2, [r3, #0]

	sprintf(str, "%2u:%2u:%2u", hr, min, sec);
 80030ce:	193b      	adds	r3, r7, r4
 80030d0:	781a      	ldrb	r2, [r3, #0]
 80030d2:	197b      	adds	r3, r7, r5
 80030d4:	781c      	ldrb	r4, [r3, #0]
 80030d6:	187b      	adds	r3, r7, r1
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	4915      	ldr	r1, [pc, #84]	; (8003130 <updateStopwatchDisplay+0xc0>)
 80030dc:	2508      	movs	r5, #8
 80030de:	1978      	adds	r0, r7, r5
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	0023      	movs	r3, r4
 80030e4:	f004 fbd4 	bl	8007890 <siprintf>
	drawTextAt(0, 60, str, hspi);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	197a      	adds	r2, r7, r5
 80030ec:	213c      	movs	r1, #60	; 0x3c
 80030ee:	2000      	movs	r0, #0
 80030f0:	f7fe fa3c 	bl	800156c <drawTextAt>
	if (isStopwatchRunning == 0) {
 80030f4:	4b0f      	ldr	r3, [pc, #60]	; (8003134 <updateStopwatchDisplay+0xc4>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d106      	bne.n	800310c <updateStopwatchDisplay+0x9c>
		drawTextAt(0, 0, "not running", hspi);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a0d      	ldr	r2, [pc, #52]	; (8003138 <updateStopwatchDisplay+0xc8>)
 8003102:	2100      	movs	r1, #0
 8003104:	2000      	movs	r0, #0
 8003106:	f7fe fa31 	bl	800156c <drawTextAt>
	}
	else if (isStopwatchRunning == 1) {
		drawTextAt(0, 0, "running    ", hspi);
	}
}
 800310a:	e00a      	b.n	8003122 <updateStopwatchDisplay+0xb2>
	else if (isStopwatchRunning == 1) {
 800310c:	4b09      	ldr	r3, [pc, #36]	; (8003134 <updateStopwatchDisplay+0xc4>)
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b01      	cmp	r3, #1
 8003114:	d105      	bne.n	8003122 <updateStopwatchDisplay+0xb2>
		drawTextAt(0, 0, "running    ", hspi);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a08      	ldr	r2, [pc, #32]	; (800313c <updateStopwatchDisplay+0xcc>)
 800311a:	2100      	movs	r1, #0
 800311c:	2000      	movs	r0, #0
 800311e:	f7fe fa25 	bl	800156c <drawTextAt>
}
 8003122:	46c0      	nop			; (mov r8, r8)
 8003124:	46bd      	mov	sp, r7
 8003126:	b00e      	add	sp, #56	; 0x38
 8003128:	bdb0      	pop	{r4, r5, r7, pc}
 800312a:	46c0      	nop			; (mov r8, r8)
 800312c:	20000114 	.word	0x20000114
 8003130:	080081fc 	.word	0x080081fc
 8003134:	20000160 	.word	0x20000160
 8003138:	0800827c 	.word	0x0800827c
 800313c:	08008288 	.word	0x08008288

08003140 <maxDaysInMonth>:

// calculator for number of days in a month given a month and accounting for leap years
uint8_t maxDaysInMonth(uint8_t month, uint16_t year) {
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	0002      	movs	r2, r0
 8003148:	1dfb      	adds	r3, r7, #7
 800314a:	701a      	strb	r2, [r3, #0]
 800314c:	1d3b      	adds	r3, r7, #4
 800314e:	1c0a      	adds	r2, r1, #0
 8003150:	801a      	strh	r2, [r3, #0]
	if (month == RTC_MONTH_JANUARY ||
 8003152:	1dfb      	adds	r3, r7, #7
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d017      	beq.n	800318a <maxDaysInMonth+0x4a>
 800315a:	1dfb      	adds	r3, r7, #7
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	2b03      	cmp	r3, #3
 8003160:	d013      	beq.n	800318a <maxDaysInMonth+0x4a>
		month == RTC_MONTH_MARCH   ||
 8003162:	1dfb      	adds	r3, r7, #7
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	2b05      	cmp	r3, #5
 8003168:	d00f      	beq.n	800318a <maxDaysInMonth+0x4a>
		month == RTC_MONTH_MAY     ||
 800316a:	1dfb      	adds	r3, r7, #7
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	2b07      	cmp	r3, #7
 8003170:	d00b      	beq.n	800318a <maxDaysInMonth+0x4a>
		month == RTC_MONTH_JULY    ||
 8003172:	1dfb      	adds	r3, r7, #7
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	2b08      	cmp	r3, #8
 8003178:	d007      	beq.n	800318a <maxDaysInMonth+0x4a>
		month == RTC_MONTH_AUGUST  ||
 800317a:	1dfb      	adds	r3, r7, #7
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	2b10      	cmp	r3, #16
 8003180:	d003      	beq.n	800318a <maxDaysInMonth+0x4a>
		month == RTC_MONTH_OCTOBER ||
 8003182:	1dfb      	adds	r3, r7, #7
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	2b12      	cmp	r3, #18
 8003188:	d101      	bne.n	800318e <maxDaysInMonth+0x4e>
		month == RTC_MONTH_DECEMBER) {
		return 31;
 800318a:	231f      	movs	r3, #31
 800318c:	e034      	b.n	80031f8 <maxDaysInMonth+0xb8>
	}
	else if (month == RTC_MONTH_APRIL     ||
 800318e:	1dfb      	adds	r3, r7, #7
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	2b04      	cmp	r3, #4
 8003194:	d00b      	beq.n	80031ae <maxDaysInMonth+0x6e>
 8003196:	1dfb      	adds	r3, r7, #7
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	2b06      	cmp	r3, #6
 800319c:	d007      	beq.n	80031ae <maxDaysInMonth+0x6e>
			 month == RTC_MONTH_JUNE      ||
 800319e:	1dfb      	adds	r3, r7, #7
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	2b09      	cmp	r3, #9
 80031a4:	d003      	beq.n	80031ae <maxDaysInMonth+0x6e>
			 month == RTC_MONTH_SEPTEMBER ||
 80031a6:	1dfb      	adds	r3, r7, #7
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	2b11      	cmp	r3, #17
 80031ac:	d101      	bne.n	80031b2 <maxDaysInMonth+0x72>
			 month == RTC_MONTH_NOVEMBER) {
		return 30;
 80031ae:	231e      	movs	r3, #30
 80031b0:	e022      	b.n	80031f8 <maxDaysInMonth+0xb8>
	}

	// february/leap year calculator
	// leap year for every 4th year, but every 100th year is not a leap year except on every 400th year
	// ex. 2020 is a leap year, 2100 is not a leap year, 2000 is a leap year.
	else if (year % 400 == 0) return 29;
 80031b2:	1d3b      	adds	r3, r7, #4
 80031b4:	881a      	ldrh	r2, [r3, #0]
 80031b6:	23c8      	movs	r3, #200	; 0xc8
 80031b8:	0059      	lsls	r1, r3, #1
 80031ba:	0010      	movs	r0, r2
 80031bc:	f7fd f82a 	bl	8000214 <__aeabi_uidivmod>
 80031c0:	000b      	movs	r3, r1
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d101      	bne.n	80031cc <maxDaysInMonth+0x8c>
 80031c8:	231d      	movs	r3, #29
 80031ca:	e015      	b.n	80031f8 <maxDaysInMonth+0xb8>
	else if (year % 100 == 0) return 28;
 80031cc:	1d3b      	adds	r3, r7, #4
 80031ce:	881b      	ldrh	r3, [r3, #0]
 80031d0:	2164      	movs	r1, #100	; 0x64
 80031d2:	0018      	movs	r0, r3
 80031d4:	f7fd f81e 	bl	8000214 <__aeabi_uidivmod>
 80031d8:	000b      	movs	r3, r1
 80031da:	b29b      	uxth	r3, r3
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d101      	bne.n	80031e4 <maxDaysInMonth+0xa4>
 80031e0:	231c      	movs	r3, #28
 80031e2:	e009      	b.n	80031f8 <maxDaysInMonth+0xb8>
	else if (year % 4 == 0) return 29;
 80031e4:	1d3b      	adds	r3, r7, #4
 80031e6:	881b      	ldrh	r3, [r3, #0]
 80031e8:	2203      	movs	r2, #3
 80031ea:	4013      	ands	r3, r2
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <maxDaysInMonth+0xb6>
 80031f2:	231d      	movs	r3, #29
 80031f4:	e000      	b.n	80031f8 <maxDaysInMonth+0xb8>
	else return 28;
 80031f6:	231c      	movs	r3, #28
}
 80031f8:	0018      	movs	r0, r3
 80031fa:	46bd      	mov	sp, r7
 80031fc:	b002      	add	sp, #8
 80031fe:	bd80      	pop	{r7, pc}

08003200 <initFace>:

void initFace() {
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
	isFaceBeingChanged = 1;
 8003204:	4b05      	ldr	r3, [pc, #20]	; (800321c <initFace+0x1c>)
 8003206:	2201      	movs	r2, #1
 8003208:	701a      	strb	r2, [r3, #0]
	faceOnDisplay = faceClock;
 800320a:	4b05      	ldr	r3, [pc, #20]	; (8003220 <initFace+0x20>)
 800320c:	2200      	movs	r2, #0
 800320e:	701a      	strb	r2, [r3, #0]
	updateFace.clock = 1;
 8003210:	4b04      	ldr	r3, [pc, #16]	; (8003224 <initFace+0x24>)
 8003212:	2201      	movs	r2, #1
 8003214:	701a      	strb	r2, [r3, #0]
}
 8003216:	46c0      	nop			; (mov r8, r8)
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	20000104 	.word	0x20000104
 8003220:	20000105 	.word	0x20000105
 8003224:	2000015c 	.word	0x2000015c

08003228 <HAL_GPIO_EXTI_Callback>:

// this sure is a big callback
// need to complete
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	0002      	movs	r2, r0
 8003230:	1dbb      	adds	r3, r7, #6
 8003232:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == BUTTON1) buttons.is1Pressed = 1;
 8003234:	1dbb      	adds	r3, r7, #6
 8003236:	881b      	ldrh	r3, [r3, #0]
 8003238:	2b04      	cmp	r3, #4
 800323a:	d102      	bne.n	8003242 <HAL_GPIO_EXTI_Callback+0x1a>
 800323c:	4b10      	ldr	r3, [pc, #64]	; (8003280 <HAL_GPIO_EXTI_Callback+0x58>)
 800323e:	2201      	movs	r2, #1
 8003240:	701a      	strb	r2, [r3, #0]
	if (GPIO_Pin == BUTTON2) buttons.is2Pressed = 1;
 8003242:	1dbb      	adds	r3, r7, #6
 8003244:	881a      	ldrh	r2, [r3, #0]
 8003246:	2380      	movs	r3, #128	; 0x80
 8003248:	019b      	lsls	r3, r3, #6
 800324a:	429a      	cmp	r2, r3
 800324c:	d102      	bne.n	8003254 <HAL_GPIO_EXTI_Callback+0x2c>
 800324e:	4b0c      	ldr	r3, [pc, #48]	; (8003280 <HAL_GPIO_EXTI_Callback+0x58>)
 8003250:	2201      	movs	r2, #1
 8003252:	705a      	strb	r2, [r3, #1]
	if (GPIO_Pin == BUTTON3) buttons.is3Pressed = 1;
 8003254:	1dbb      	adds	r3, r7, #6
 8003256:	881a      	ldrh	r2, [r3, #0]
 8003258:	2380      	movs	r3, #128	; 0x80
 800325a:	01db      	lsls	r3, r3, #7
 800325c:	429a      	cmp	r2, r3
 800325e:	d102      	bne.n	8003266 <HAL_GPIO_EXTI_Callback+0x3e>
 8003260:	4b07      	ldr	r3, [pc, #28]	; (8003280 <HAL_GPIO_EXTI_Callback+0x58>)
 8003262:	2201      	movs	r2, #1
 8003264:	709a      	strb	r2, [r3, #2]
	if (GPIO_Pin == BUTTON4) buttons.is4Pressed = 1;
 8003266:	1dbb      	adds	r3, r7, #6
 8003268:	881a      	ldrh	r2, [r3, #0]
 800326a:	2380      	movs	r3, #128	; 0x80
 800326c:	021b      	lsls	r3, r3, #8
 800326e:	429a      	cmp	r2, r3
 8003270:	d102      	bne.n	8003278 <HAL_GPIO_EXTI_Callback+0x50>
 8003272:	4b03      	ldr	r3, [pc, #12]	; (8003280 <HAL_GPIO_EXTI_Callback+0x58>)
 8003274:	2201      	movs	r2, #1
 8003276:	70da      	strb	r2, [r3, #3]
}
 8003278:	46c0      	nop			; (mov r8, r8)
 800327a:	46bd      	mov	sp, r7
 800327c:	b002      	add	sp, #8
 800327e:	bd80      	pop	{r7, pc}
 8003280:	200001b8 	.word	0x200001b8

08003284 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003288:	4b07      	ldr	r3, [pc, #28]	; (80032a8 <HAL_MspInit+0x24>)
 800328a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800328c:	4b06      	ldr	r3, [pc, #24]	; (80032a8 <HAL_MspInit+0x24>)
 800328e:	2101      	movs	r1, #1
 8003290:	430a      	orrs	r2, r1
 8003292:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003294:	4b04      	ldr	r3, [pc, #16]	; (80032a8 <HAL_MspInit+0x24>)
 8003296:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003298:	4b03      	ldr	r3, [pc, #12]	; (80032a8 <HAL_MspInit+0x24>)
 800329a:	2180      	movs	r1, #128	; 0x80
 800329c:	0549      	lsls	r1, r1, #21
 800329e:	430a      	orrs	r2, r1
 80032a0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032a2:	46c0      	nop			; (mov r8, r8)
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	40021000 	.word	0x40021000

080032ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b088      	sub	sp, #32
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b4:	230c      	movs	r3, #12
 80032b6:	18fb      	adds	r3, r7, r3
 80032b8:	0018      	movs	r0, r3
 80032ba:	2314      	movs	r3, #20
 80032bc:	001a      	movs	r2, r3
 80032be:	2100      	movs	r1, #0
 80032c0:	f004 fadd 	bl	800787e <memset>
  if(hadc->Instance==ADC1)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a15      	ldr	r2, [pc, #84]	; (8003320 <HAL_ADC_MspInit+0x74>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d123      	bne.n	8003316 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80032ce:	4b15      	ldr	r3, [pc, #84]	; (8003324 <HAL_ADC_MspInit+0x78>)
 80032d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032d2:	4b14      	ldr	r3, [pc, #80]	; (8003324 <HAL_ADC_MspInit+0x78>)
 80032d4:	2180      	movs	r1, #128	; 0x80
 80032d6:	0089      	lsls	r1, r1, #2
 80032d8:	430a      	orrs	r2, r1
 80032da:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032dc:	4b11      	ldr	r3, [pc, #68]	; (8003324 <HAL_ADC_MspInit+0x78>)
 80032de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032e0:	4b10      	ldr	r3, [pc, #64]	; (8003324 <HAL_ADC_MspInit+0x78>)
 80032e2:	2101      	movs	r1, #1
 80032e4:	430a      	orrs	r2, r1
 80032e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80032e8:	4b0e      	ldr	r3, [pc, #56]	; (8003324 <HAL_ADC_MspInit+0x78>)
 80032ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ec:	2201      	movs	r2, #1
 80032ee:	4013      	ands	r3, r2
 80032f0:	60bb      	str	r3, [r7, #8]
 80032f2:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration    
    PA0     ------> ADC_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80032f4:	210c      	movs	r1, #12
 80032f6:	187b      	adds	r3, r7, r1
 80032f8:	2201      	movs	r2, #1
 80032fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032fc:	187b      	adds	r3, r7, r1
 80032fe:	2203      	movs	r2, #3
 8003300:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003302:	187b      	adds	r3, r7, r1
 8003304:	2200      	movs	r2, #0
 8003306:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003308:	187a      	adds	r2, r7, r1
 800330a:	23a0      	movs	r3, #160	; 0xa0
 800330c:	05db      	lsls	r3, r3, #23
 800330e:	0011      	movs	r1, r2
 8003310:	0018      	movs	r0, r3
 8003312:	f000 ff91 	bl	8004238 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	46bd      	mov	sp, r7
 800331a:	b008      	add	sp, #32
 800331c:	bd80      	pop	{r7, pc}
 800331e:	46c0      	nop			; (mov r8, r8)
 8003320:	40012400 	.word	0x40012400
 8003324:	40021000 	.word	0x40021000

08003328 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  if(hlptim->Instance==LPTIM1)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a0a      	ldr	r2, [pc, #40]	; (8003360 <HAL_LPTIM_MspInit+0x38>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d10e      	bne.n	8003358 <HAL_LPTIM_MspInit+0x30>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800333a:	4b0a      	ldr	r3, [pc, #40]	; (8003364 <HAL_LPTIM_MspInit+0x3c>)
 800333c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800333e:	4b09      	ldr	r3, [pc, #36]	; (8003364 <HAL_LPTIM_MspInit+0x3c>)
 8003340:	2180      	movs	r1, #128	; 0x80
 8003342:	0609      	lsls	r1, r1, #24
 8003344:	430a      	orrs	r2, r1
 8003346:	639a      	str	r2, [r3, #56]	; 0x38
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8003348:	2200      	movs	r2, #0
 800334a:	2100      	movs	r1, #0
 800334c:	200d      	movs	r0, #13
 800334e:	f000 fdd3 	bl	8003ef8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8003352:	200d      	movs	r0, #13
 8003354:	f000 fde5 	bl	8003f22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8003358:	46c0      	nop			; (mov r8, r8)
 800335a:	46bd      	mov	sp, r7
 800335c:	b002      	add	sp, #8
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40007c00 	.word	0x40007c00
 8003364:	40021000 	.word	0x40021000

08003368 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a0a      	ldr	r2, [pc, #40]	; (80033a0 <HAL_RTC_MspInit+0x38>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d10e      	bne.n	8003398 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800337a:	4b0a      	ldr	r3, [pc, #40]	; (80033a4 <HAL_RTC_MspInit+0x3c>)
 800337c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800337e:	4b09      	ldr	r3, [pc, #36]	; (80033a4 <HAL_RTC_MspInit+0x3c>)
 8003380:	2180      	movs	r1, #128	; 0x80
 8003382:	02c9      	lsls	r1, r1, #11
 8003384:	430a      	orrs	r2, r1
 8003386:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8003388:	2200      	movs	r2, #0
 800338a:	2100      	movs	r1, #0
 800338c:	2002      	movs	r0, #2
 800338e:	f000 fdb3 	bl	8003ef8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8003392:	2002      	movs	r0, #2
 8003394:	f000 fdc5 	bl	8003f22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003398:	46c0      	nop			; (mov r8, r8)
 800339a:	46bd      	mov	sp, r7
 800339c:	b002      	add	sp, #8
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	40002800 	.word	0x40002800
 80033a4:	40021000 	.word	0x40021000

080033a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b088      	sub	sp, #32
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033b0:	230c      	movs	r3, #12
 80033b2:	18fb      	adds	r3, r7, r3
 80033b4:	0018      	movs	r0, r3
 80033b6:	2314      	movs	r3, #20
 80033b8:	001a      	movs	r2, r3
 80033ba:	2100      	movs	r1, #0
 80033bc:	f004 fa5f 	bl	800787e <memset>
  if(hspi->Instance==SPI1)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a30      	ldr	r2, [pc, #192]	; (8003488 <HAL_SPI_MspInit+0xe0>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d15a      	bne.n	8003480 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80033ca:	4b30      	ldr	r3, [pc, #192]	; (800348c <HAL_SPI_MspInit+0xe4>)
 80033cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033ce:	4b2f      	ldr	r3, [pc, #188]	; (800348c <HAL_SPI_MspInit+0xe4>)
 80033d0:	2180      	movs	r1, #128	; 0x80
 80033d2:	0149      	lsls	r1, r1, #5
 80033d4:	430a      	orrs	r2, r1
 80033d6:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033d8:	4b2c      	ldr	r3, [pc, #176]	; (800348c <HAL_SPI_MspInit+0xe4>)
 80033da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033dc:	4b2b      	ldr	r3, [pc, #172]	; (800348c <HAL_SPI_MspInit+0xe4>)
 80033de:	2101      	movs	r1, #1
 80033e0:	430a      	orrs	r2, r1
 80033e2:	62da      	str	r2, [r3, #44]	; 0x2c
 80033e4:	4b29      	ldr	r3, [pc, #164]	; (800348c <HAL_SPI_MspInit+0xe4>)
 80033e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e8:	2201      	movs	r2, #1
 80033ea:	4013      	ands	r3, r2
 80033ec:	60bb      	str	r3, [r7, #8]
 80033ee:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80033f0:	210c      	movs	r1, #12
 80033f2:	187b      	adds	r3, r7, r1
 80033f4:	22a0      	movs	r2, #160	; 0xa0
 80033f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f8:	187b      	adds	r3, r7, r1
 80033fa:	2202      	movs	r2, #2
 80033fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fe:	187b      	adds	r3, r7, r1
 8003400:	2200      	movs	r2, #0
 8003402:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003404:	187b      	adds	r3, r7, r1
 8003406:	2203      	movs	r2, #3
 8003408:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800340a:	187b      	adds	r3, r7, r1
 800340c:	2200      	movs	r2, #0
 800340e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003410:	187a      	adds	r2, r7, r1
 8003412:	23a0      	movs	r3, #160	; 0xa0
 8003414:	05db      	lsls	r3, r3, #23
 8003416:	0011      	movs	r1, r2
 8003418:	0018      	movs	r0, r3
 800341a:	f000 ff0d 	bl	8004238 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800341e:	4b1c      	ldr	r3, [pc, #112]	; (8003490 <HAL_SPI_MspInit+0xe8>)
 8003420:	4a1c      	ldr	r2, [pc, #112]	; (8003494 <HAL_SPI_MspInit+0xec>)
 8003422:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8003424:	4b1a      	ldr	r3, [pc, #104]	; (8003490 <HAL_SPI_MspInit+0xe8>)
 8003426:	2201      	movs	r2, #1
 8003428:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800342a:	4b19      	ldr	r3, [pc, #100]	; (8003490 <HAL_SPI_MspInit+0xe8>)
 800342c:	2210      	movs	r2, #16
 800342e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003430:	4b17      	ldr	r3, [pc, #92]	; (8003490 <HAL_SPI_MspInit+0xe8>)
 8003432:	2200      	movs	r2, #0
 8003434:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003436:	4b16      	ldr	r3, [pc, #88]	; (8003490 <HAL_SPI_MspInit+0xe8>)
 8003438:	2280      	movs	r2, #128	; 0x80
 800343a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800343c:	4b14      	ldr	r3, [pc, #80]	; (8003490 <HAL_SPI_MspInit+0xe8>)
 800343e:	2200      	movs	r2, #0
 8003440:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003442:	4b13      	ldr	r3, [pc, #76]	; (8003490 <HAL_SPI_MspInit+0xe8>)
 8003444:	2200      	movs	r2, #0
 8003446:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003448:	4b11      	ldr	r3, [pc, #68]	; (8003490 <HAL_SPI_MspInit+0xe8>)
 800344a:	2200      	movs	r2, #0
 800344c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800344e:	4b10      	ldr	r3, [pc, #64]	; (8003490 <HAL_SPI_MspInit+0xe8>)
 8003450:	2200      	movs	r2, #0
 8003452:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003454:	4b0e      	ldr	r3, [pc, #56]	; (8003490 <HAL_SPI_MspInit+0xe8>)
 8003456:	0018      	movs	r0, r3
 8003458:	f000 fd80 	bl	8003f5c <HAL_DMA_Init>
 800345c:	1e03      	subs	r3, r0, #0
 800345e:	d001      	beq.n	8003464 <HAL_SPI_MspInit+0xbc>
    {
      Error_Handler();
 8003460:	f7fe feb8 	bl	80021d4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a0a      	ldr	r2, [pc, #40]	; (8003490 <HAL_SPI_MspInit+0xe8>)
 8003468:	649a      	str	r2, [r3, #72]	; 0x48
 800346a:	4b09      	ldr	r3, [pc, #36]	; (8003490 <HAL_SPI_MspInit+0xe8>)
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003470:	2200      	movs	r2, #0
 8003472:	2100      	movs	r1, #0
 8003474:	2019      	movs	r0, #25
 8003476:	f000 fd3f 	bl	8003ef8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800347a:	2019      	movs	r0, #25
 800347c:	f000 fd51 	bl	8003f22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003480:	46c0      	nop			; (mov r8, r8)
 8003482:	46bd      	mov	sp, r7
 8003484:	b008      	add	sp, #32
 8003486:	bd80      	pop	{r7, pc}
 8003488:	40013000 	.word	0x40013000
 800348c:	40021000 	.word	0x40021000
 8003490:	200002b4 	.word	0x200002b4
 8003494:	40020030 	.word	0x40020030

08003498 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM21)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a14      	ldr	r2, [pc, #80]	; (80034f8 <HAL_TIM_Base_MspInit+0x60>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d10e      	bne.n	80034c8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 80034aa:	4b14      	ldr	r3, [pc, #80]	; (80034fc <HAL_TIM_Base_MspInit+0x64>)
 80034ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034ae:	4b13      	ldr	r3, [pc, #76]	; (80034fc <HAL_TIM_Base_MspInit+0x64>)
 80034b0:	2104      	movs	r1, #4
 80034b2:	430a      	orrs	r2, r1
 80034b4:	635a      	str	r2, [r3, #52]	; 0x34
    /* TIM21 interrupt Init */
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 80034b6:	2200      	movs	r2, #0
 80034b8:	2100      	movs	r1, #0
 80034ba:	2014      	movs	r0, #20
 80034bc:	f000 fd1c 	bl	8003ef8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 80034c0:	2014      	movs	r0, #20
 80034c2:	f000 fd2e 	bl	8003f22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }

}
 80034c6:	e012      	b.n	80034ee <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM22)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a0c      	ldr	r2, [pc, #48]	; (8003500 <HAL_TIM_Base_MspInit+0x68>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d10d      	bne.n	80034ee <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM22_CLK_ENABLE();
 80034d2:	4b0a      	ldr	r3, [pc, #40]	; (80034fc <HAL_TIM_Base_MspInit+0x64>)
 80034d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034d6:	4b09      	ldr	r3, [pc, #36]	; (80034fc <HAL_TIM_Base_MspInit+0x64>)
 80034d8:	2120      	movs	r1, #32
 80034da:	430a      	orrs	r2, r1
 80034dc:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM22_IRQn, 0, 0);
 80034de:	2200      	movs	r2, #0
 80034e0:	2100      	movs	r1, #0
 80034e2:	2016      	movs	r0, #22
 80034e4:	f000 fd08 	bl	8003ef8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM22_IRQn);
 80034e8:	2016      	movs	r0, #22
 80034ea:	f000 fd1a 	bl	8003f22 <HAL_NVIC_EnableIRQ>
}
 80034ee:	46c0      	nop			; (mov r8, r8)
 80034f0:	46bd      	mov	sp, r7
 80034f2:	b002      	add	sp, #8
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	46c0      	nop			; (mov r8, r8)
 80034f8:	40010800 	.word	0x40010800
 80034fc:	40021000 	.word	0x40021000
 8003500:	40011400 	.word	0x40011400

08003504 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003508:	46c0      	nop			; (mov r8, r8)
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003512:	e7fe      	b.n	8003512 <HardFault_Handler+0x4>

08003514 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003518:	46c0      	nop			; (mov r8, r8)
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003522:	46c0      	nop			; (mov r8, r8)
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800352c:	f000 f9d6 	bl	80038dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003530:	46c0      	nop			; (mov r8, r8)
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
	...

08003538 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800353c:	4b03      	ldr	r3, [pc, #12]	; (800354c <RTC_IRQHandler+0x14>)
 800353e:	0018      	movs	r0, r3
 8003540:	f002 feaa 	bl	8006298 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8003544:	46c0      	nop			; (mov r8, r8)
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	46c0      	nop			; (mov r8, r8)
 800354c:	20000194 	.word	0x20000194

08003550 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003554:	2004      	movs	r0, #4
 8003556:	f001 f839 	bl	80045cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 800355a:	46c0      	nop			; (mov r8, r8)
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003564:	2380      	movs	r3, #128	; 0x80
 8003566:	019b      	lsls	r3, r3, #6
 8003568:	0018      	movs	r0, r3
 800356a:	f001 f82f 	bl	80045cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800356e:	2380      	movs	r3, #128	; 0x80
 8003570:	01db      	lsls	r3, r3, #7
 8003572:	0018      	movs	r0, r3
 8003574:	f001 f82a 	bl	80045cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003578:	2380      	movs	r3, #128	; 0x80
 800357a:	021b      	lsls	r3, r3, #8
 800357c:	0018      	movs	r0, r3
 800357e:	f001 f825 	bl	80045cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003582:	46c0      	nop			; (mov r8, r8)
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800358c:	4b03      	ldr	r3, [pc, #12]	; (800359c <DMA1_Channel2_3_IRQHandler+0x14>)
 800358e:	0018      	movs	r0, r3
 8003590:	f000 fda4 	bl	80040dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8003594:	46c0      	nop			; (mov r8, r8)
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	46c0      	nop			; (mov r8, r8)
 800359c:	200002b4 	.word	0x200002b4

080035a0 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 80035a4:	4b03      	ldr	r3, [pc, #12]	; (80035b4 <LPTIM1_IRQHandler+0x14>)
 80035a6:	0018      	movs	r0, r3
 80035a8:	f001 f930 	bl	800480c <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 80035ac:	46c0      	nop			; (mov r8, r8)
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	46c0      	nop			; (mov r8, r8)
 80035b4:	20000164 	.word	0x20000164

080035b8 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 80035bc:	4b03      	ldr	r3, [pc, #12]	; (80035cc <TIM21_IRQHandler+0x14>)
 80035be:	0018      	movs	r0, r3
 80035c0:	f003 fcba 	bl	8006f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 80035c4:	46c0      	nop			; (mov r8, r8)
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	46c0      	nop			; (mov r8, r8)
 80035cc:	2000021c 	.word	0x2000021c

080035d0 <TIM22_IRQHandler>:

/**
  * @brief This function handles TIM22 global interrupt.
  */
void TIM22_IRQHandler(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM22_IRQn 0 */

  /* USER CODE END TIM22_IRQn 0 */
  HAL_TIM_IRQHandler(&htim22);
 80035d4:	4b03      	ldr	r3, [pc, #12]	; (80035e4 <TIM22_IRQHandler+0x14>)
 80035d6:	0018      	movs	r0, r3
 80035d8:	f003 fcae 	bl	8006f38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM22_IRQn 1 */

  /* USER CODE END TIM22_IRQn 1 */
}
 80035dc:	46c0      	nop			; (mov r8, r8)
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	46c0      	nop			; (mov r8, r8)
 80035e4:	20000120 	.word	0x20000120

080035e8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80035ec:	4b03      	ldr	r3, [pc, #12]	; (80035fc <SPI1_IRQHandler+0x14>)
 80035ee:	0018      	movs	r0, r3
 80035f0:	f003 f97e 	bl	80068f0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80035f4:	46c0      	nop			; (mov r8, r8)
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	46c0      	nop			; (mov r8, r8)
 80035fc:	200001c0 	.word	0x200001c0

08003600 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003608:	4b11      	ldr	r3, [pc, #68]	; (8003650 <_sbrk+0x50>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d102      	bne.n	8003616 <_sbrk+0x16>
		heap_end = &end;
 8003610:	4b0f      	ldr	r3, [pc, #60]	; (8003650 <_sbrk+0x50>)
 8003612:	4a10      	ldr	r2, [pc, #64]	; (8003654 <_sbrk+0x54>)
 8003614:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003616:	4b0e      	ldr	r3, [pc, #56]	; (8003650 <_sbrk+0x50>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800361c:	4b0c      	ldr	r3, [pc, #48]	; (8003650 <_sbrk+0x50>)
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	18d3      	adds	r3, r2, r3
 8003624:	466a      	mov	r2, sp
 8003626:	4293      	cmp	r3, r2
 8003628:	d907      	bls.n	800363a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800362a:	f004 f8f5 	bl	8007818 <__errno>
 800362e:	0003      	movs	r3, r0
 8003630:	220c      	movs	r2, #12
 8003632:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8003634:	2301      	movs	r3, #1
 8003636:	425b      	negs	r3, r3
 8003638:	e006      	b.n	8003648 <_sbrk+0x48>
	}

	heap_end += incr;
 800363a:	4b05      	ldr	r3, [pc, #20]	; (8003650 <_sbrk+0x50>)
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	18d2      	adds	r2, r2, r3
 8003642:	4b03      	ldr	r3, [pc, #12]	; (8003650 <_sbrk+0x50>)
 8003644:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8003646:	68fb      	ldr	r3, [r7, #12]
}
 8003648:	0018      	movs	r0, r3
 800364a:	46bd      	mov	sp, r7
 800364c:	b004      	add	sp, #16
 800364e:	bd80      	pop	{r7, pc}
 8003650:	20000108 	.word	0x20000108
 8003654:	20000308 	.word	0x20000308

08003658 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 800365c:	4b17      	ldr	r3, [pc, #92]	; (80036bc <SystemInit+0x64>)
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	4b16      	ldr	r3, [pc, #88]	; (80036bc <SystemInit+0x64>)
 8003662:	2180      	movs	r1, #128	; 0x80
 8003664:	0049      	lsls	r1, r1, #1
 8003666:	430a      	orrs	r2, r1
 8003668:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 800366a:	4b14      	ldr	r3, [pc, #80]	; (80036bc <SystemInit+0x64>)
 800366c:	68da      	ldr	r2, [r3, #12]
 800366e:	4b13      	ldr	r3, [pc, #76]	; (80036bc <SystemInit+0x64>)
 8003670:	4913      	ldr	r1, [pc, #76]	; (80036c0 <SystemInit+0x68>)
 8003672:	400a      	ands	r2, r1
 8003674:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8003676:	4b11      	ldr	r3, [pc, #68]	; (80036bc <SystemInit+0x64>)
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	4b10      	ldr	r3, [pc, #64]	; (80036bc <SystemInit+0x64>)
 800367c:	4911      	ldr	r1, [pc, #68]	; (80036c4 <SystemInit+0x6c>)
 800367e:	400a      	ands	r2, r1
 8003680:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003682:	4b0e      	ldr	r3, [pc, #56]	; (80036bc <SystemInit+0x64>)
 8003684:	689a      	ldr	r2, [r3, #8]
 8003686:	4b0d      	ldr	r3, [pc, #52]	; (80036bc <SystemInit+0x64>)
 8003688:	2101      	movs	r1, #1
 800368a:	438a      	bics	r2, r1
 800368c:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800368e:	4b0b      	ldr	r3, [pc, #44]	; (80036bc <SystemInit+0x64>)
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	4b0a      	ldr	r3, [pc, #40]	; (80036bc <SystemInit+0x64>)
 8003694:	490c      	ldr	r1, [pc, #48]	; (80036c8 <SystemInit+0x70>)
 8003696:	400a      	ands	r2, r1
 8003698:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 800369a:	4b08      	ldr	r3, [pc, #32]	; (80036bc <SystemInit+0x64>)
 800369c:	68da      	ldr	r2, [r3, #12]
 800369e:	4b07      	ldr	r3, [pc, #28]	; (80036bc <SystemInit+0x64>)
 80036a0:	490a      	ldr	r1, [pc, #40]	; (80036cc <SystemInit+0x74>)
 80036a2:	400a      	ands	r2, r1
 80036a4:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80036a6:	4b05      	ldr	r3, [pc, #20]	; (80036bc <SystemInit+0x64>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80036ac:	4b08      	ldr	r3, [pc, #32]	; (80036d0 <SystemInit+0x78>)
 80036ae:	2280      	movs	r2, #128	; 0x80
 80036b0:	0512      	lsls	r2, r2, #20
 80036b2:	609a      	str	r2, [r3, #8]
#endif
}
 80036b4:	46c0      	nop			; (mov r8, r8)
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	46c0      	nop			; (mov r8, r8)
 80036bc:	40021000 	.word	0x40021000
 80036c0:	88ff400c 	.word	0x88ff400c
 80036c4:	fef6fff6 	.word	0xfef6fff6
 80036c8:	fffbffff 	.word	0xfffbffff
 80036cc:	ff02ffff 	.word	0xff02ffff
 80036d0:	e000ed00 	.word	0xe000ed00

080036d4 <runStopwatch>:

// ---- Stopwatch functions ----
// set stopwatch. using lptimer. maybe better with regular timer?
// can operate in stop mode if using lptimer
// modify to update screen/set flags when necessary
void runStopwatch() {
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
	HAL_LPTIM_Counter_Start_IT(&hlptim1, 0x8000);
 80036d8:	2380      	movs	r3, #128	; 0x80
 80036da:	021a      	lsls	r2, r3, #8
 80036dc:	4b03      	ldr	r3, [pc, #12]	; (80036ec <runStopwatch+0x18>)
 80036de:	0011      	movs	r1, r2
 80036e0:	0018      	movs	r0, r3
 80036e2:	f001 f80f 	bl	8004704 <HAL_LPTIM_Counter_Start_IT>
}
 80036e6:	46c0      	nop			; (mov r8, r8)
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	20000164 	.word	0x20000164

080036f0 <pauseStopwatch>:

// stop the timer or pause it or whatever.
// counter value might reset and screw up timekeeping? should save?
void pauseStopwatch() {
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
	HAL_LPTIM_Counter_Stop_IT(&hlptim1);
 80036f4:	4b03      	ldr	r3, [pc, #12]	; (8003704 <pauseStopwatch+0x14>)
 80036f6:	0018      	movs	r0, r3
 80036f8:	f001 f858 	bl	80047ac <HAL_LPTIM_Counter_Stop_IT>
//	temp = hlptim->Instance->CNT;
}
 80036fc:	46c0      	nop			; (mov r8, r8)
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	46c0      	nop			; (mov r8, r8)
 8003704:	20000164 	.word	0x20000164

08003708 <clearStopwatch>:

void clearStopwatch() {
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
	pauseStopwatch();
 800370c:	f7ff fff0 	bl	80036f0 <pauseStopwatch>
	stopwatchCNT = 0;
 8003710:	4b02      	ldr	r3, [pc, #8]	; (800371c <clearStopwatch+0x14>)
 8003712:	2200      	movs	r2, #0
 8003714:	601a      	str	r2, [r3, #0]
}
 8003716:	46c0      	nop			; (mov r8, r8)
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	20000114 	.word	0x20000114

08003720 <HAL_LPTIM_AutoReloadMatchCallback>:
// increment variable for stopwatch counting.
// update screen if on
// how to set lptim internal clock to LSE???
//   I FOUND IT: RCC->CCIPR LPTIMSEL (2-bits, 11=LSE clock for LPTIM)
//   now...does hal do this automatically?
void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim) {
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
	// toggle pin, should toggle every 1s. change this pin
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8003728:	4b08      	ldr	r3, [pc, #32]	; (800374c <HAL_LPTIM_AutoReloadMatchCallback+0x2c>)
 800372a:	2102      	movs	r1, #2
 800372c:	0018      	movs	r0, r3
 800372e:	f000 ff3b 	bl	80045a8 <HAL_GPIO_TogglePin>
	stopwatchCNT++;
 8003732:	4b07      	ldr	r3, [pc, #28]	; (8003750 <HAL_LPTIM_AutoReloadMatchCallback+0x30>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	1c5a      	adds	r2, r3, #1
 8003738:	4b05      	ldr	r3, [pc, #20]	; (8003750 <HAL_LPTIM_AutoReloadMatchCallback+0x30>)
 800373a:	601a      	str	r2, [r3, #0]
	updateFace.stopwatch = 1;
 800373c:	4b05      	ldr	r3, [pc, #20]	; (8003754 <HAL_LPTIM_AutoReloadMatchCallback+0x34>)
 800373e:	2201      	movs	r2, #1
 8003740:	70da      	strb	r2, [r3, #3]
}
 8003742:	46c0      	nop			; (mov r8, r8)
 8003744:	46bd      	mov	sp, r7
 8003746:	b002      	add	sp, #8
 8003748:	bd80      	pop	{r7, pc}
 800374a:	46c0      	nop			; (mov r8, r8)
 800374c:	50000400 	.word	0x50000400
 8003750:	20000114 	.word	0x20000114
 8003754:	2000015c 	.word	0x2000015c

08003758 <stopTimerDisplay>:
// uses TIM21 with LSE (external timer w/ remap and done already by ST).
void runTimerDisplay() {
	HAL_TIM_Base_Start_IT(&htim21);
}

void stopTimerDisplay() {
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim21);
 800375c:	4b03      	ldr	r3, [pc, #12]	; (800376c <stopTimerDisplay+0x14>)
 800375e:	0018      	movs	r0, r3
 8003760:	f003 fb94 	bl	8006e8c <HAL_TIM_Base_Stop_IT>
}
 8003764:	46c0      	nop			; (mov r8, r8)
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	46c0      	nop			; (mov r8, r8)
 800376c:	2000021c 	.word	0x2000021c

08003770 <runClockDisplay>:

void runClockDisplay() {
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim22);
 8003774:	4b03      	ldr	r3, [pc, #12]	; (8003784 <runClockDisplay+0x14>)
 8003776:	0018      	movs	r0, r3
 8003778:	f003 fb66 	bl	8006e48 <HAL_TIM_Base_Start_IT>
}
 800377c:	46c0      	nop			; (mov r8, r8)
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	46c0      	nop			; (mov r8, r8)
 8003784:	20000120 	.word	0x20000120

08003788 <HAL_TIM_PeriodElapsedCallback>:

void stopClockDisplay() {
	HAL_TIM_Base_Stop_IT(&htim22);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM21) {
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a12      	ldr	r2, [pc, #72]	; (80037e0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d115      	bne.n	80037c6 <HAL_TIM_PeriodElapsedCallback+0x3e>
		updateFace.timer = 1;
 800379a:	4b12      	ldr	r3, [pc, #72]	; (80037e4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800379c:	2201      	movs	r2, #1
 800379e:	705a      	strb	r2, [r3, #1]
//		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
		// should toggle pin every 1s. change pin
		if (watchTimerSeconds != 0) {
 80037a0:	4b11      	ldr	r3, [pc, #68]	; (80037e8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d005      	beq.n	80037b4 <HAL_TIM_PeriodElapsedCallback+0x2c>
//			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
			watchTimerSeconds--;
 80037a8:	4b0f      	ldr	r3, [pc, #60]	; (80037e8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	1e5a      	subs	r2, r3, #1
 80037ae:	4b0e      	ldr	r3, [pc, #56]	; (80037e8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80037b0:	601a      	str	r2, [r3, #0]
		}
	}
	else if (htim->Instance == TIM22) {
		updateFace.clock = 1;
	}
}
 80037b2:	e010      	b.n	80037d6 <HAL_TIM_PeriodElapsedCallback+0x4e>
			stopTimerDisplay();
 80037b4:	f7ff ffd0 	bl	8003758 <stopTimerDisplay>
			isTimerRunning = 0;
 80037b8:	4b0c      	ldr	r3, [pc, #48]	; (80037ec <HAL_TIM_PeriodElapsedCallback+0x64>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	701a      	strb	r2, [r3, #0]
			updateFace.timer = 1;
 80037be:	4b09      	ldr	r3, [pc, #36]	; (80037e4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80037c0:	2201      	movs	r2, #1
 80037c2:	705a      	strb	r2, [r3, #1]
}
 80037c4:	e007      	b.n	80037d6 <HAL_TIM_PeriodElapsedCallback+0x4e>
	else if (htim->Instance == TIM22) {
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a09      	ldr	r2, [pc, #36]	; (80037f0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d102      	bne.n	80037d6 <HAL_TIM_PeriodElapsedCallback+0x4e>
		updateFace.clock = 1;
 80037d0:	4b04      	ldr	r3, [pc, #16]	; (80037e4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80037d2:	2201      	movs	r2, #1
 80037d4:	701a      	strb	r2, [r3, #0]
}
 80037d6:	46c0      	nop			; (mov r8, r8)
 80037d8:	46bd      	mov	sp, r7
 80037da:	b002      	add	sp, #8
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	46c0      	nop			; (mov r8, r8)
 80037e0:	40010800 	.word	0x40010800
 80037e4:	2000015c 	.word	0x2000015c
 80037e8:	20000218 	.word	0x20000218
 80037ec:	200001bc 	.word	0x200001bc
 80037f0:	40011400 	.word	0x40011400

080037f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80037f4:	480d      	ldr	r0, [pc, #52]	; (800382c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80037f6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80037f8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80037fa:	e003      	b.n	8003804 <LoopCopyDataInit>

080037fc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80037fc:	4b0c      	ldr	r3, [pc, #48]	; (8003830 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 80037fe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003800:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003802:	3104      	adds	r1, #4

08003804 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8003804:	480b      	ldr	r0, [pc, #44]	; (8003834 <LoopForever+0xa>)
  ldr  r3, =_edata
 8003806:	4b0c      	ldr	r3, [pc, #48]	; (8003838 <LoopForever+0xe>)
  adds  r2, r0, r1
 8003808:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800380a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800380c:	d3f6      	bcc.n	80037fc <CopyDataInit>
  ldr  r2, =_sbss
 800380e:	4a0b      	ldr	r2, [pc, #44]	; (800383c <LoopForever+0x12>)
  b  LoopFillZerobss
 8003810:	e002      	b.n	8003818 <LoopFillZerobss>

08003812 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8003812:	2300      	movs	r3, #0
  str  r3, [r2]
 8003814:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003816:	3204      	adds	r2, #4

08003818 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8003818:	4b09      	ldr	r3, [pc, #36]	; (8003840 <LoopForever+0x16>)
  cmp  r2, r3
 800381a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800381c:	d3f9      	bcc.n	8003812 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800381e:	f7ff ff1b 	bl	8003658 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003822:	f003 ffff 	bl	8007824 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003826:	f7fe f8db 	bl	80019e0 <main>

0800382a <LoopForever>:

LoopForever:
    b LoopForever
 800382a:	e7fe      	b.n	800382a <LoopForever>
   ldr   r0, =_estack
 800382c:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8003830:	08008858 	.word	0x08008858
  ldr  r0, =_sdata
 8003834:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003838:	200000bc 	.word	0x200000bc
  ldr  r2, =_sbss
 800383c:	200000bc 	.word	0x200000bc
  ldr  r3, = _ebss
 8003840:	20000304 	.word	0x20000304

08003844 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003844:	e7fe      	b.n	8003844 <ADC1_COMP_IRQHandler>
	...

08003848 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800384e:	1dfb      	adds	r3, r7, #7
 8003850:	2200      	movs	r2, #0
 8003852:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003854:	4b0b      	ldr	r3, [pc, #44]	; (8003884 <HAL_Init+0x3c>)
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	4b0a      	ldr	r3, [pc, #40]	; (8003884 <HAL_Init+0x3c>)
 800385a:	2140      	movs	r1, #64	; 0x40
 800385c:	430a      	orrs	r2, r1
 800385e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003860:	2000      	movs	r0, #0
 8003862:	f000 f811 	bl	8003888 <HAL_InitTick>
 8003866:	1e03      	subs	r3, r0, #0
 8003868:	d003      	beq.n	8003872 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800386a:	1dfb      	adds	r3, r7, #7
 800386c:	2201      	movs	r2, #1
 800386e:	701a      	strb	r2, [r3, #0]
 8003870:	e001      	b.n	8003876 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003872:	f7ff fd07 	bl	8003284 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003876:	1dfb      	adds	r3, r7, #7
 8003878:	781b      	ldrb	r3, [r3, #0]
}
 800387a:	0018      	movs	r0, r3
 800387c:	46bd      	mov	sp, r7
 800387e:	b002      	add	sp, #8
 8003880:	bd80      	pop	{r7, pc}
 8003882:	46c0      	nop			; (mov r8, r8)
 8003884:	40022000 	.word	0x40022000

08003888 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003890:	230f      	movs	r3, #15
 8003892:	18fb      	adds	r3, r7, r3
 8003894:	2200      	movs	r2, #0
 8003896:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8003898:	4b0f      	ldr	r3, [pc, #60]	; (80038d8 <HAL_InitTick+0x50>)
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	23fa      	movs	r3, #250	; 0xfa
 800389e:	0099      	lsls	r1, r3, #2
 80038a0:	0010      	movs	r0, r2
 80038a2:	f7fc fc31 	bl	8000108 <__udivsi3>
 80038a6:	0003      	movs	r3, r0
 80038a8:	0018      	movs	r0, r3
 80038aa:	f000 fb4a 	bl	8003f42 <HAL_SYSTICK_Config>
 80038ae:	1e03      	subs	r3, r0, #0
 80038b0:	d004      	beq.n	80038bc <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 80038b2:	230f      	movs	r3, #15
 80038b4:	18fb      	adds	r3, r7, r3
 80038b6:	2201      	movs	r2, #1
 80038b8:	701a      	strb	r2, [r3, #0]
 80038ba:	e006      	b.n	80038ca <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 80038bc:	6879      	ldr	r1, [r7, #4]
 80038be:	2301      	movs	r3, #1
 80038c0:	425b      	negs	r3, r3
 80038c2:	2200      	movs	r2, #0
 80038c4:	0018      	movs	r0, r3
 80038c6:	f000 fb17 	bl	8003ef8 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 80038ca:	230f      	movs	r3, #15
 80038cc:	18fb      	adds	r3, r7, r3
 80038ce:	781b      	ldrb	r3, [r3, #0]
}
 80038d0:	0018      	movs	r0, r3
 80038d2:	46bd      	mov	sp, r7
 80038d4:	b004      	add	sp, #16
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	20000054 	.word	0x20000054

080038dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
  uwTick++;
 80038e0:	4b03      	ldr	r3, [pc, #12]	; (80038f0 <HAL_IncTick+0x14>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	1c5a      	adds	r2, r3, #1
 80038e6:	4b02      	ldr	r3, [pc, #8]	; (80038f0 <HAL_IncTick+0x14>)
 80038e8:	601a      	str	r2, [r3, #0]
}
 80038ea:	46c0      	nop			; (mov r8, r8)
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	200002fc 	.word	0x200002fc

080038f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
  return uwTick;
 80038f8:	4b02      	ldr	r3, [pc, #8]	; (8003904 <HAL_GetTick+0x10>)
 80038fa:	681b      	ldr	r3, [r3, #0]
}
 80038fc:	0018      	movs	r0, r3
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	46c0      	nop			; (mov r8, r8)
 8003904:	200002fc 	.word	0x200002fc

08003908 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003910:	f7ff fff0 	bl	80038f4 <HAL_GetTick>
 8003914:	0003      	movs	r3, r0
 8003916:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	3301      	adds	r3, #1
 8003920:	d002      	beq.n	8003928 <HAL_Delay+0x20>
  {
    wait++;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	3301      	adds	r3, #1
 8003926:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003928:	46c0      	nop			; (mov r8, r8)
 800392a:	f7ff ffe3 	bl	80038f4 <HAL_GetTick>
 800392e:	0002      	movs	r2, r0
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	429a      	cmp	r2, r3
 8003938:	d8f7      	bhi.n	800392a <HAL_Delay+0x22>
  {
  }
}
 800393a:	46c0      	nop			; (mov r8, r8)
 800393c:	46bd      	mov	sp, r7
 800393e:	b004      	add	sp, #16
 8003940:	bd80      	pop	{r7, pc}
	...

08003944 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e159      	b.n	8003c0a <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10a      	bne.n	8003974 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2250      	movs	r2, #80	; 0x50
 8003968:	2100      	movs	r1, #0
 800396a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	0018      	movs	r0, r3
 8003970:	f7ff fc9c 	bl	80032ac <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003978:	2210      	movs	r2, #16
 800397a:	4013      	ands	r3, r2
 800397c:	2b10      	cmp	r3, #16
 800397e:	d005      	beq.n	800398c <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	2204      	movs	r2, #4
 8003988:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800398a:	d00b      	beq.n	80039a4 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003990:	2210      	movs	r2, #16
 8003992:	431a      	orrs	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2250      	movs	r2, #80	; 0x50
 800399c:	2100      	movs	r1, #0
 800399e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e132      	b.n	8003c0a <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a8:	4a9a      	ldr	r2, [pc, #616]	; (8003c14 <HAL_ADC_Init+0x2d0>)
 80039aa:	4013      	ands	r3, r2
 80039ac:	2202      	movs	r2, #2
 80039ae:	431a      	orrs	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	2203      	movs	r2, #3
 80039bc:	4013      	ands	r3, r2
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d108      	bne.n	80039d4 <HAL_ADC_Init+0x90>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2201      	movs	r2, #1
 80039ca:	4013      	ands	r3, r2
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d101      	bne.n	80039d4 <HAL_ADC_Init+0x90>
 80039d0:	2301      	movs	r3, #1
 80039d2:	e000      	b.n	80039d6 <HAL_ADC_Init+0x92>
 80039d4:	2300      	movs	r3, #0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d149      	bne.n	8003a6e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	23c0      	movs	r3, #192	; 0xc0
 80039e0:	061b      	lsls	r3, r3, #24
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d00b      	beq.n	80039fe <HAL_ADC_Init+0xba>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	2380      	movs	r3, #128	; 0x80
 80039ec:	05db      	lsls	r3, r3, #23
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d005      	beq.n	80039fe <HAL_ADC_Init+0xba>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685a      	ldr	r2, [r3, #4]
 80039f6:	2380      	movs	r3, #128	; 0x80
 80039f8:	061b      	lsls	r3, r3, #24
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d111      	bne.n	8003a22 <HAL_ADC_Init+0xde>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	691a      	ldr	r2, [r3, #16]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	0092      	lsls	r2, r2, #2
 8003a0a:	0892      	lsrs	r2, r2, #2
 8003a0c:	611a      	str	r2, [r3, #16]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6919      	ldr	r1, [r3, #16]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685a      	ldr	r2, [r3, #4]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	611a      	str	r2, [r3, #16]
 8003a20:	e014      	b.n	8003a4c <HAL_ADC_Init+0x108>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	691a      	ldr	r2, [r3, #16]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	0092      	lsls	r2, r2, #2
 8003a2e:	0892      	lsrs	r2, r2, #2
 8003a30:	611a      	str	r2, [r3, #16]
 8003a32:	4b79      	ldr	r3, [pc, #484]	; (8003c18 <HAL_ADC_Init+0x2d4>)
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	4b78      	ldr	r3, [pc, #480]	; (8003c18 <HAL_ADC_Init+0x2d4>)
 8003a38:	4978      	ldr	r1, [pc, #480]	; (8003c1c <HAL_ADC_Init+0x2d8>)
 8003a3a:	400a      	ands	r2, r1
 8003a3c:	601a      	str	r2, [r3, #0]
 8003a3e:	4b76      	ldr	r3, [pc, #472]	; (8003c18 <HAL_ADC_Init+0x2d4>)
 8003a40:	6819      	ldr	r1, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	4b74      	ldr	r3, [pc, #464]	; (8003c18 <HAL_ADC_Init+0x2d4>)
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68da      	ldr	r2, [r3, #12]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2118      	movs	r1, #24
 8003a58:	438a      	bics	r2, r1
 8003a5a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68d9      	ldr	r1, [r3, #12]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	689a      	ldr	r2, [r3, #8]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8003a6e:	4b6a      	ldr	r3, [pc, #424]	; (8003c18 <HAL_ADC_Init+0x2d4>)
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	4b69      	ldr	r3, [pc, #420]	; (8003c18 <HAL_ADC_Init+0x2d4>)
 8003a74:	496a      	ldr	r1, [pc, #424]	; (8003c20 <HAL_ADC_Init+0x2dc>)
 8003a76:	400a      	ands	r2, r1
 8003a78:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8003a7a:	4b67      	ldr	r3, [pc, #412]	; (8003c18 <HAL_ADC_Init+0x2d4>)
 8003a7c:	6819      	ldr	r1, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a82:	065a      	lsls	r2, r3, #25
 8003a84:	4b64      	ldr	r3, [pc, #400]	; (8003c18 <HAL_ADC_Init+0x2d4>)
 8003a86:	430a      	orrs	r2, r1
 8003a88:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	689a      	ldr	r2, [r3, #8]
 8003a90:	2380      	movs	r3, #128	; 0x80
 8003a92:	055b      	lsls	r3, r3, #21
 8003a94:	4013      	ands	r3, r2
 8003a96:	d108      	bne.n	8003aaa <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	689a      	ldr	r2, [r3, #8]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2180      	movs	r1, #128	; 0x80
 8003aa4:	0549      	lsls	r1, r1, #21
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68da      	ldr	r2, [r3, #12]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	495b      	ldr	r1, [pc, #364]	; (8003c24 <HAL_ADC_Init+0x2e0>)
 8003ab6:	400a      	ands	r2, r1
 8003ab8:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68d9      	ldr	r1, [r3, #12]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d101      	bne.n	8003ad0 <HAL_ADC_Init+0x18c>
 8003acc:	2304      	movs	r3, #4
 8003ace:	e000      	b.n	8003ad2 <HAL_ADC_Init+0x18e>
 8003ad0:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003ad2:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2020      	movs	r0, #32
 8003ad8:	5c1b      	ldrb	r3, [r3, r0]
 8003ada:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003adc:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	202c      	movs	r0, #44	; 0x2c
 8003ae2:	5c1b      	ldrb	r3, [r3, r0]
 8003ae4:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003ae6:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003aec:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8003af4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003afc:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b0a:	23c2      	movs	r3, #194	; 0xc2
 8003b0c:	33ff      	adds	r3, #255	; 0xff
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d00b      	beq.n	8003b2a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68d9      	ldr	r1, [r3, #12]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8003b20:	431a      	orrs	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2221      	movs	r2, #33	; 0x21
 8003b2e:	5c9b      	ldrb	r3, [r3, r2]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d11a      	bne.n	8003b6a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2220      	movs	r2, #32
 8003b38:	5c9b      	ldrb	r3, [r3, r2]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d109      	bne.n	8003b52 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68da      	ldr	r2, [r3, #12]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2180      	movs	r1, #128	; 0x80
 8003b4a:	0249      	lsls	r1, r1, #9
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	60da      	str	r2, [r3, #12]
 8003b50:	e00b      	b.n	8003b6a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b56:	2220      	movs	r2, #32
 8003b58:	431a      	orrs	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b62:	2201      	movs	r2, #1
 8003b64:	431a      	orrs	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d11f      	bne.n	8003bb2 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	691a      	ldr	r2, [r3, #16]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	492a      	ldr	r1, [pc, #168]	; (8003c28 <HAL_ADC_Init+0x2e4>)
 8003b7e:	400a      	ands	r2, r1
 8003b80:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	6919      	ldr	r1, [r3, #16]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003b90:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8003b96:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	691a      	ldr	r2, [r3, #16]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2101      	movs	r1, #1
 8003bac:	430a      	orrs	r2, r1
 8003bae:	611a      	str	r2, [r3, #16]
 8003bb0:	e00e      	b.n	8003bd0 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	4013      	ands	r3, r2
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d107      	bne.n	8003bd0 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	691a      	ldr	r2, [r3, #16]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2101      	movs	r1, #1
 8003bcc:	438a      	bics	r2, r1
 8003bce:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	695a      	ldr	r2, [r3, #20]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2107      	movs	r1, #7
 8003bdc:	438a      	bics	r2, r1
 8003bde:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	6959      	ldr	r1, [r3, #20]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bfc:	2203      	movs	r2, #3
 8003bfe:	4393      	bics	r3, r2
 8003c00:	2201      	movs	r2, #1
 8003c02:	431a      	orrs	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	0018      	movs	r0, r3
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	b002      	add	sp, #8
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	46c0      	nop			; (mov r8, r8)
 8003c14:	fffffefd 	.word	0xfffffefd
 8003c18:	40012708 	.word	0x40012708
 8003c1c:	ffc3ffff 	.word	0xffc3ffff
 8003c20:	fdffffff 	.word	0xfdffffff
 8003c24:	fffe0219 	.word	0xfffe0219
 8003c28:	fffffc03 	.word	0xfffffc03

08003c2c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2250      	movs	r2, #80	; 0x50
 8003c3a:	5c9b      	ldrb	r3, [r3, r2]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d101      	bne.n	8003c44 <HAL_ADC_ConfigChannel+0x18>
 8003c40:	2302      	movs	r3, #2
 8003c42:	e085      	b.n	8003d50 <HAL_ADC_ConfigChannel+0x124>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2250      	movs	r2, #80	; 0x50
 8003c48:	2101      	movs	r1, #1
 8003c4a:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	2204      	movs	r2, #4
 8003c54:	4013      	ands	r3, r2
 8003c56:	d00b      	beq.n	8003c70 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c5c:	2220      	movs	r2, #32
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2250      	movs	r2, #80	; 0x50
 8003c68:	2100      	movs	r1, #0
 8003c6a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e06f      	b.n	8003d50 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	4a38      	ldr	r2, [pc, #224]	; (8003d58 <HAL_ADC_ConfigChannel+0x12c>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d035      	beq.n	8003ce6 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	035b      	lsls	r3, r3, #13
 8003c86:	0b5a      	lsrs	r2, r3, #13
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	2380      	movs	r3, #128	; 0x80
 8003c96:	02db      	lsls	r3, r3, #11
 8003c98:	4013      	ands	r3, r2
 8003c9a:	d009      	beq.n	8003cb0 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8003c9c:	4b2f      	ldr	r3, [pc, #188]	; (8003d5c <HAL_ADC_ConfigChannel+0x130>)
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	4b2e      	ldr	r3, [pc, #184]	; (8003d5c <HAL_ADC_ConfigChannel+0x130>)
 8003ca2:	2180      	movs	r1, #128	; 0x80
 8003ca4:	0409      	lsls	r1, r1, #16
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8003caa:	200a      	movs	r0, #10
 8003cac:	f000 f85e 	bl	8003d6c <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	2380      	movs	r3, #128	; 0x80
 8003cb6:	029b      	lsls	r3, r3, #10
 8003cb8:	4013      	ands	r3, r2
 8003cba:	d006      	beq.n	8003cca <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8003cbc:	4b27      	ldr	r3, [pc, #156]	; (8003d5c <HAL_ADC_ConfigChannel+0x130>)
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	4b26      	ldr	r3, [pc, #152]	; (8003d5c <HAL_ADC_ConfigChannel+0x130>)
 8003cc2:	2180      	movs	r1, #128	; 0x80
 8003cc4:	03c9      	lsls	r1, r1, #15
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	2380      	movs	r3, #128	; 0x80
 8003cd0:	025b      	lsls	r3, r3, #9
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	d037      	beq.n	8003d46 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 8003cd6:	4b21      	ldr	r3, [pc, #132]	; (8003d5c <HAL_ADC_ConfigChannel+0x130>)
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	4b20      	ldr	r3, [pc, #128]	; (8003d5c <HAL_ADC_ConfigChannel+0x130>)
 8003cdc:	2180      	movs	r1, #128	; 0x80
 8003cde:	0449      	lsls	r1, r1, #17
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	e02f      	b.n	8003d46 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	035b      	lsls	r3, r3, #13
 8003cf2:	0b5b      	lsrs	r3, r3, #13
 8003cf4:	43d9      	mvns	r1, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	400a      	ands	r2, r1
 8003cfc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	2380      	movs	r3, #128	; 0x80
 8003d04:	02db      	lsls	r3, r3, #11
 8003d06:	4013      	ands	r3, r2
 8003d08:	d005      	beq.n	8003d16 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8003d0a:	4b14      	ldr	r3, [pc, #80]	; (8003d5c <HAL_ADC_ConfigChannel+0x130>)
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	4b13      	ldr	r3, [pc, #76]	; (8003d5c <HAL_ADC_ConfigChannel+0x130>)
 8003d10:	4913      	ldr	r1, [pc, #76]	; (8003d60 <HAL_ADC_ConfigChannel+0x134>)
 8003d12:	400a      	ands	r2, r1
 8003d14:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	2380      	movs	r3, #128	; 0x80
 8003d1c:	029b      	lsls	r3, r3, #10
 8003d1e:	4013      	ands	r3, r2
 8003d20:	d005      	beq.n	8003d2e <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8003d22:	4b0e      	ldr	r3, [pc, #56]	; (8003d5c <HAL_ADC_ConfigChannel+0x130>)
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	4b0d      	ldr	r3, [pc, #52]	; (8003d5c <HAL_ADC_ConfigChannel+0x130>)
 8003d28:	490e      	ldr	r1, [pc, #56]	; (8003d64 <HAL_ADC_ConfigChannel+0x138>)
 8003d2a:	400a      	ands	r2, r1
 8003d2c:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	2380      	movs	r3, #128	; 0x80
 8003d34:	025b      	lsls	r3, r3, #9
 8003d36:	4013      	ands	r3, r2
 8003d38:	d005      	beq.n	8003d46 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 8003d3a:	4b08      	ldr	r3, [pc, #32]	; (8003d5c <HAL_ADC_ConfigChannel+0x130>)
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	4b07      	ldr	r3, [pc, #28]	; (8003d5c <HAL_ADC_ConfigChannel+0x130>)
 8003d40:	4909      	ldr	r1, [pc, #36]	; (8003d68 <HAL_ADC_ConfigChannel+0x13c>)
 8003d42:	400a      	ands	r2, r1
 8003d44:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2250      	movs	r2, #80	; 0x50
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	0018      	movs	r0, r3
 8003d52:	46bd      	mov	sp, r7
 8003d54:	b002      	add	sp, #8
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	00001001 	.word	0x00001001
 8003d5c:	40012708 	.word	0x40012708
 8003d60:	ff7fffff 	.word	0xff7fffff
 8003d64:	ffbfffff 	.word	0xffbfffff
 8003d68:	feffffff 	.word	0xfeffffff

08003d6c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8003d74:	4b0a      	ldr	r3, [pc, #40]	; (8003da0 <ADC_DelayMicroSecond+0x34>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	490a      	ldr	r1, [pc, #40]	; (8003da4 <ADC_DelayMicroSecond+0x38>)
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	f7fc f9c4 	bl	8000108 <__udivsi3>
 8003d80:	0003      	movs	r3, r0
 8003d82:	001a      	movs	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4353      	muls	r3, r2
 8003d88:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8003d8a:	e002      	b.n	8003d92 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1f9      	bne.n	8003d8c <ADC_DelayMicroSecond+0x20>
  } 
}
 8003d98:	46c0      	nop			; (mov r8, r8)
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	b004      	add	sp, #16
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	20000054 	.word	0x20000054
 8003da4:	000f4240 	.word	0x000f4240

08003da8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	0002      	movs	r2, r0
 8003db0:	1dfb      	adds	r3, r7, #7
 8003db2:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003db4:	1dfb      	adds	r3, r7, #7
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	001a      	movs	r2, r3
 8003dba:	231f      	movs	r3, #31
 8003dbc:	401a      	ands	r2, r3
 8003dbe:	4b04      	ldr	r3, [pc, #16]	; (8003dd0 <NVIC_EnableIRQ+0x28>)
 8003dc0:	2101      	movs	r1, #1
 8003dc2:	4091      	lsls	r1, r2
 8003dc4:	000a      	movs	r2, r1
 8003dc6:	601a      	str	r2, [r3, #0]
}
 8003dc8:	46c0      	nop			; (mov r8, r8)
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	b002      	add	sp, #8
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	e000e100 	.word	0xe000e100

08003dd4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003dd4:	b590      	push	{r4, r7, lr}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	0002      	movs	r2, r0
 8003ddc:	6039      	str	r1, [r7, #0]
 8003dde:	1dfb      	adds	r3, r7, #7
 8003de0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8003de2:	1dfb      	adds	r3, r7, #7
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	2b7f      	cmp	r3, #127	; 0x7f
 8003de8:	d932      	bls.n	8003e50 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003dea:	4a2f      	ldr	r2, [pc, #188]	; (8003ea8 <NVIC_SetPriority+0xd4>)
 8003dec:	1dfb      	adds	r3, r7, #7
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	0019      	movs	r1, r3
 8003df2:	230f      	movs	r3, #15
 8003df4:	400b      	ands	r3, r1
 8003df6:	3b08      	subs	r3, #8
 8003df8:	089b      	lsrs	r3, r3, #2
 8003dfa:	3306      	adds	r3, #6
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	18d3      	adds	r3, r2, r3
 8003e00:	3304      	adds	r3, #4
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	1dfa      	adds	r2, r7, #7
 8003e06:	7812      	ldrb	r2, [r2, #0]
 8003e08:	0011      	movs	r1, r2
 8003e0a:	2203      	movs	r2, #3
 8003e0c:	400a      	ands	r2, r1
 8003e0e:	00d2      	lsls	r2, r2, #3
 8003e10:	21ff      	movs	r1, #255	; 0xff
 8003e12:	4091      	lsls	r1, r2
 8003e14:	000a      	movs	r2, r1
 8003e16:	43d2      	mvns	r2, r2
 8003e18:	401a      	ands	r2, r3
 8003e1a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	019b      	lsls	r3, r3, #6
 8003e20:	22ff      	movs	r2, #255	; 0xff
 8003e22:	401a      	ands	r2, r3
 8003e24:	1dfb      	adds	r3, r7, #7
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	0018      	movs	r0, r3
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	4003      	ands	r3, r0
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e32:	481d      	ldr	r0, [pc, #116]	; (8003ea8 <NVIC_SetPriority+0xd4>)
 8003e34:	1dfb      	adds	r3, r7, #7
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	001c      	movs	r4, r3
 8003e3a:	230f      	movs	r3, #15
 8003e3c:	4023      	ands	r3, r4
 8003e3e:	3b08      	subs	r3, #8
 8003e40:	089b      	lsrs	r3, r3, #2
 8003e42:	430a      	orrs	r2, r1
 8003e44:	3306      	adds	r3, #6
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	18c3      	adds	r3, r0, r3
 8003e4a:	3304      	adds	r3, #4
 8003e4c:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003e4e:	e027      	b.n	8003ea0 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e50:	4a16      	ldr	r2, [pc, #88]	; (8003eac <NVIC_SetPriority+0xd8>)
 8003e52:	1dfb      	adds	r3, r7, #7
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	b25b      	sxtb	r3, r3
 8003e58:	089b      	lsrs	r3, r3, #2
 8003e5a:	33c0      	adds	r3, #192	; 0xc0
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	589b      	ldr	r3, [r3, r2]
 8003e60:	1dfa      	adds	r2, r7, #7
 8003e62:	7812      	ldrb	r2, [r2, #0]
 8003e64:	0011      	movs	r1, r2
 8003e66:	2203      	movs	r2, #3
 8003e68:	400a      	ands	r2, r1
 8003e6a:	00d2      	lsls	r2, r2, #3
 8003e6c:	21ff      	movs	r1, #255	; 0xff
 8003e6e:	4091      	lsls	r1, r2
 8003e70:	000a      	movs	r2, r1
 8003e72:	43d2      	mvns	r2, r2
 8003e74:	401a      	ands	r2, r3
 8003e76:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	019b      	lsls	r3, r3, #6
 8003e7c:	22ff      	movs	r2, #255	; 0xff
 8003e7e:	401a      	ands	r2, r3
 8003e80:	1dfb      	adds	r3, r7, #7
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	0018      	movs	r0, r3
 8003e86:	2303      	movs	r3, #3
 8003e88:	4003      	ands	r3, r0
 8003e8a:	00db      	lsls	r3, r3, #3
 8003e8c:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e8e:	4807      	ldr	r0, [pc, #28]	; (8003eac <NVIC_SetPriority+0xd8>)
 8003e90:	1dfb      	adds	r3, r7, #7
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	b25b      	sxtb	r3, r3
 8003e96:	089b      	lsrs	r3, r3, #2
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	33c0      	adds	r3, #192	; 0xc0
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	501a      	str	r2, [r3, r0]
}
 8003ea0:	46c0      	nop			; (mov r8, r8)
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	b003      	add	sp, #12
 8003ea6:	bd90      	pop	{r4, r7, pc}
 8003ea8:	e000ed00 	.word	0xe000ed00
 8003eac:	e000e100 	.word	0xe000e100

08003eb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	4a0c      	ldr	r2, [pc, #48]	; (8003ef0 <SysTick_Config+0x40>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d901      	bls.n	8003ec6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e010      	b.n	8003ee8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ec6:	4b0b      	ldr	r3, [pc, #44]	; (8003ef4 <SysTick_Config+0x44>)
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	3a01      	subs	r2, #1
 8003ecc:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ece:	2301      	movs	r3, #1
 8003ed0:	425b      	negs	r3, r3
 8003ed2:	2103      	movs	r1, #3
 8003ed4:	0018      	movs	r0, r3
 8003ed6:	f7ff ff7d 	bl	8003dd4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003eda:	4b06      	ldr	r3, [pc, #24]	; (8003ef4 <SysTick_Config+0x44>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ee0:	4b04      	ldr	r3, [pc, #16]	; (8003ef4 <SysTick_Config+0x44>)
 8003ee2:	2207      	movs	r2, #7
 8003ee4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	0018      	movs	r0, r3
 8003eea:	46bd      	mov	sp, r7
 8003eec:	b002      	add	sp, #8
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	00ffffff 	.word	0x00ffffff
 8003ef4:	e000e010 	.word	0xe000e010

08003ef8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60b9      	str	r1, [r7, #8]
 8003f00:	607a      	str	r2, [r7, #4]
 8003f02:	210f      	movs	r1, #15
 8003f04:	187b      	adds	r3, r7, r1
 8003f06:	1c02      	adds	r2, r0, #0
 8003f08:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	187b      	adds	r3, r7, r1
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	b25b      	sxtb	r3, r3
 8003f12:	0011      	movs	r1, r2
 8003f14:	0018      	movs	r0, r3
 8003f16:	f7ff ff5d 	bl	8003dd4 <NVIC_SetPriority>
}
 8003f1a:	46c0      	nop			; (mov r8, r8)
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	b004      	add	sp, #16
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b082      	sub	sp, #8
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	0002      	movs	r2, r0
 8003f2a:	1dfb      	adds	r3, r7, #7
 8003f2c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f2e:	1dfb      	adds	r3, r7, #7
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	b25b      	sxtb	r3, r3
 8003f34:	0018      	movs	r0, r3
 8003f36:	f7ff ff37 	bl	8003da8 <NVIC_EnableIRQ>
}
 8003f3a:	46c0      	nop			; (mov r8, r8)
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	b002      	add	sp, #8
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b082      	sub	sp, #8
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	f7ff ffaf 	bl	8003eb0 <SysTick_Config>
 8003f52:	0003      	movs	r3, r0
}
 8003f54:	0018      	movs	r0, r3
 8003f56:	46bd      	mov	sp, r7
 8003f58:	b002      	add	sp, #8
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e061      	b.n	8004032 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a32      	ldr	r2, [pc, #200]	; (800403c <HAL_DMA_Init+0xe0>)
 8003f74:	4694      	mov	ip, r2
 8003f76:	4463      	add	r3, ip
 8003f78:	2114      	movs	r1, #20
 8003f7a:	0018      	movs	r0, r3
 8003f7c:	f7fc f8c4 	bl	8000108 <__udivsi3>
 8003f80:	0003      	movs	r3, r0
 8003f82:	009a      	lsls	r2, r3, #2
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a2d      	ldr	r2, [pc, #180]	; (8004040 <HAL_DMA_Init+0xe4>)
 8003f8c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2225      	movs	r2, #37	; 0x25
 8003f92:	2102      	movs	r1, #2
 8003f94:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	4a28      	ldr	r2, [pc, #160]	; (8004044 <HAL_DMA_Init+0xe8>)
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003fae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a1b      	ldr	r3, [r3, #32]
 8003fcc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	2380      	movs	r3, #128	; 0x80
 8003fe2:	01db      	lsls	r3, r3, #7
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d018      	beq.n	800401a <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003fe8:	4b17      	ldr	r3, [pc, #92]	; (8004048 <HAL_DMA_Init+0xec>)
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff0:	211c      	movs	r1, #28
 8003ff2:	400b      	ands	r3, r1
 8003ff4:	210f      	movs	r1, #15
 8003ff6:	4099      	lsls	r1, r3
 8003ff8:	000b      	movs	r3, r1
 8003ffa:	43d9      	mvns	r1, r3
 8003ffc:	4b12      	ldr	r3, [pc, #72]	; (8004048 <HAL_DMA_Init+0xec>)
 8003ffe:	400a      	ands	r2, r1
 8004000:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004002:	4b11      	ldr	r3, [pc, #68]	; (8004048 <HAL_DMA_Init+0xec>)
 8004004:	6819      	ldr	r1, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800400e:	201c      	movs	r0, #28
 8004010:	4003      	ands	r3, r0
 8004012:	409a      	lsls	r2, r3
 8004014:	4b0c      	ldr	r3, [pc, #48]	; (8004048 <HAL_DMA_Init+0xec>)
 8004016:	430a      	orrs	r2, r1
 8004018:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2225      	movs	r2, #37	; 0x25
 8004024:	2101      	movs	r1, #1
 8004026:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2224      	movs	r2, #36	; 0x24
 800402c:	2100      	movs	r1, #0
 800402e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	0018      	movs	r0, r3
 8004034:	46bd      	mov	sp, r7
 8004036:	b004      	add	sp, #16
 8004038:	bd80      	pop	{r7, pc}
 800403a:	46c0      	nop			; (mov r8, r8)
 800403c:	bffdfff8 	.word	0xbffdfff8
 8004040:	40020000 	.word	0x40020000
 8004044:	ffff800f 	.word	0xffff800f
 8004048:	400200a8 	.word	0x400200a8

0800404c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004054:	230f      	movs	r3, #15
 8004056:	18fb      	adds	r3, r7, r3
 8004058:	2200      	movs	r2, #0
 800405a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2225      	movs	r2, #37	; 0x25
 8004060:	5c9b      	ldrb	r3, [r3, r2]
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b02      	cmp	r3, #2
 8004066:	d007      	beq.n	8004078 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2204      	movs	r2, #4
 800406c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800406e:	230f      	movs	r3, #15
 8004070:	18fb      	adds	r3, r7, r3
 8004072:	2201      	movs	r2, #1
 8004074:	701a      	strb	r2, [r3, #0]
 8004076:	e02a      	b.n	80040ce <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	210e      	movs	r1, #14
 8004084:	438a      	bics	r2, r1
 8004086:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2101      	movs	r1, #1
 8004094:	438a      	bics	r2, r1
 8004096:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409c:	221c      	movs	r2, #28
 800409e:	401a      	ands	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a4:	2101      	movs	r1, #1
 80040a6:	4091      	lsls	r1, r2
 80040a8:	000a      	movs	r2, r1
 80040aa:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2225      	movs	r2, #37	; 0x25
 80040b0:	2101      	movs	r1, #1
 80040b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2224      	movs	r2, #36	; 0x24
 80040b8:	2100      	movs	r1, #0
 80040ba:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d004      	beq.n	80040ce <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	0010      	movs	r0, r2
 80040cc:	4798      	blx	r3
    }
  }
  return status;
 80040ce:	230f      	movs	r3, #15
 80040d0:	18fb      	adds	r3, r7, r3
 80040d2:	781b      	ldrb	r3, [r3, #0]
}
 80040d4:	0018      	movs	r0, r3
 80040d6:	46bd      	mov	sp, r7
 80040d8:	b004      	add	sp, #16
 80040da:	bd80      	pop	{r7, pc}

080040dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f8:	221c      	movs	r2, #28
 80040fa:	4013      	ands	r3, r2
 80040fc:	2204      	movs	r2, #4
 80040fe:	409a      	lsls	r2, r3
 8004100:	0013      	movs	r3, r2
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	4013      	ands	r3, r2
 8004106:	d026      	beq.n	8004156 <HAL_DMA_IRQHandler+0x7a>
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	2204      	movs	r2, #4
 800410c:	4013      	ands	r3, r2
 800410e:	d022      	beq.n	8004156 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2220      	movs	r2, #32
 8004118:	4013      	ands	r3, r2
 800411a:	d107      	bne.n	800412c <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2104      	movs	r1, #4
 8004128:	438a      	bics	r2, r1
 800412a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004130:	221c      	movs	r2, #28
 8004132:	401a      	ands	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004138:	2104      	movs	r1, #4
 800413a:	4091      	lsls	r1, r2
 800413c:	000a      	movs	r2, r1
 800413e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004144:	2b00      	cmp	r3, #0
 8004146:	d100      	bne.n	800414a <HAL_DMA_IRQHandler+0x6e>
 8004148:	e071      	b.n	800422e <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	0010      	movs	r0, r2
 8004152:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8004154:	e06b      	b.n	800422e <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415a:	221c      	movs	r2, #28
 800415c:	4013      	ands	r3, r2
 800415e:	2202      	movs	r2, #2
 8004160:	409a      	lsls	r2, r3
 8004162:	0013      	movs	r3, r2
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	4013      	ands	r3, r2
 8004168:	d02d      	beq.n	80041c6 <HAL_DMA_IRQHandler+0xea>
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	2202      	movs	r2, #2
 800416e:	4013      	ands	r3, r2
 8004170:	d029      	beq.n	80041c6 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2220      	movs	r2, #32
 800417a:	4013      	ands	r3, r2
 800417c:	d10b      	bne.n	8004196 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	210a      	movs	r1, #10
 800418a:	438a      	bics	r2, r1
 800418c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2225      	movs	r2, #37	; 0x25
 8004192:	2101      	movs	r1, #1
 8004194:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800419a:	221c      	movs	r2, #28
 800419c:	401a      	ands	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a2:	2102      	movs	r1, #2
 80041a4:	4091      	lsls	r1, r2
 80041a6:	000a      	movs	r2, r1
 80041a8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2224      	movs	r2, #36	; 0x24
 80041ae:	2100      	movs	r1, #0
 80041b0:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d039      	beq.n	800422e <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	0010      	movs	r0, r2
 80041c2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80041c4:	e033      	b.n	800422e <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ca:	221c      	movs	r2, #28
 80041cc:	4013      	ands	r3, r2
 80041ce:	2208      	movs	r2, #8
 80041d0:	409a      	lsls	r2, r3
 80041d2:	0013      	movs	r3, r2
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	4013      	ands	r3, r2
 80041d8:	d02a      	beq.n	8004230 <HAL_DMA_IRQHandler+0x154>
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	2208      	movs	r2, #8
 80041de:	4013      	ands	r3, r2
 80041e0:	d026      	beq.n	8004230 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	210e      	movs	r1, #14
 80041ee:	438a      	bics	r2, r1
 80041f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f6:	221c      	movs	r2, #28
 80041f8:	401a      	ands	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	2101      	movs	r1, #1
 8004200:	4091      	lsls	r1, r2
 8004202:	000a      	movs	r2, r1
 8004204:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2201      	movs	r2, #1
 800420a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2225      	movs	r2, #37	; 0x25
 8004210:	2101      	movs	r1, #1
 8004212:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2224      	movs	r2, #36	; 0x24
 8004218:	2100      	movs	r1, #0
 800421a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004220:	2b00      	cmp	r3, #0
 8004222:	d005      	beq.n	8004230 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	0010      	movs	r0, r2
 800422c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800422e:	46c0      	nop			; (mov r8, r8)
 8004230:	46c0      	nop			; (mov r8, r8)
}
 8004232:	46bd      	mov	sp, r7
 8004234:	b004      	add	sp, #16
 8004236:	bd80      	pop	{r7, pc}

08004238 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004242:	2300      	movs	r3, #0
 8004244:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004246:	2300      	movs	r3, #0
 8004248:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800424a:	2300      	movs	r3, #0
 800424c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800424e:	e155      	b.n	80044fc <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2101      	movs	r1, #1
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	4091      	lsls	r1, r2
 800425a:	000a      	movs	r2, r1
 800425c:	4013      	ands	r3, r2
 800425e:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d100      	bne.n	8004268 <HAL_GPIO_Init+0x30>
 8004266:	e146      	b.n	80044f6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	2b02      	cmp	r3, #2
 800426e:	d003      	beq.n	8004278 <HAL_GPIO_Init+0x40>
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	2b12      	cmp	r3, #18
 8004276:	d123      	bne.n	80042c0 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	08da      	lsrs	r2, r3, #3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	3208      	adds	r2, #8
 8004280:	0092      	lsls	r2, r2, #2
 8004282:	58d3      	ldr	r3, [r2, r3]
 8004284:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	2207      	movs	r2, #7
 800428a:	4013      	ands	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	220f      	movs	r2, #15
 8004290:	409a      	lsls	r2, r3
 8004292:	0013      	movs	r3, r2
 8004294:	43da      	mvns	r2, r3
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	4013      	ands	r3, r2
 800429a:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	691a      	ldr	r2, [r3, #16]
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	2107      	movs	r1, #7
 80042a4:	400b      	ands	r3, r1
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	409a      	lsls	r2, r3
 80042aa:	0013      	movs	r3, r2
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	08da      	lsrs	r2, r3, #3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	3208      	adds	r2, #8
 80042ba:	0092      	lsls	r2, r2, #2
 80042bc:	6939      	ldr	r1, [r7, #16]
 80042be:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d00b      	beq.n	80042e0 <HAL_GPIO_Init+0xa8>
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d007      	beq.n	80042e0 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80042d4:	2b11      	cmp	r3, #17
 80042d6:	d003      	beq.n	80042e0 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	2b12      	cmp	r3, #18
 80042de:	d130      	bne.n	8004342 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	2203      	movs	r2, #3
 80042ec:	409a      	lsls	r2, r3
 80042ee:	0013      	movs	r3, r2
 80042f0:	43da      	mvns	r2, r3
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	4013      	ands	r3, r2
 80042f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	68da      	ldr	r2, [r3, #12]
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	005b      	lsls	r3, r3, #1
 8004300:	409a      	lsls	r2, r3
 8004302:	0013      	movs	r3, r2
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	4313      	orrs	r3, r2
 8004308:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004316:	2201      	movs	r2, #1
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	409a      	lsls	r2, r3
 800431c:	0013      	movs	r3, r2
 800431e:	43da      	mvns	r2, r3
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	4013      	ands	r3, r2
 8004324:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	091b      	lsrs	r3, r3, #4
 800432c:	2201      	movs	r2, #1
 800432e:	401a      	ands	r2, r3
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	409a      	lsls	r2, r3
 8004334:	0013      	movs	r3, r2
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	4313      	orrs	r3, r2
 800433a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	005b      	lsls	r3, r3, #1
 800434c:	2203      	movs	r2, #3
 800434e:	409a      	lsls	r2, r3
 8004350:	0013      	movs	r3, r2
 8004352:	43da      	mvns	r2, r3
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	4013      	ands	r3, r2
 8004358:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	2203      	movs	r2, #3
 8004360:	401a      	ands	r2, r3
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	005b      	lsls	r3, r3, #1
 8004366:	409a      	lsls	r2, r3
 8004368:	0013      	movs	r3, r2
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	4313      	orrs	r3, r2
 800436e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	005b      	lsls	r3, r3, #1
 8004380:	2203      	movs	r2, #3
 8004382:	409a      	lsls	r2, r3
 8004384:	0013      	movs	r3, r2
 8004386:	43da      	mvns	r2, r3
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	4013      	ands	r3, r2
 800438c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	689a      	ldr	r2, [r3, #8]
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	409a      	lsls	r2, r3
 8004398:	0013      	movs	r3, r2
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	4313      	orrs	r3, r2
 800439e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685a      	ldr	r2, [r3, #4]
 80043aa:	2380      	movs	r3, #128	; 0x80
 80043ac:	055b      	lsls	r3, r3, #21
 80043ae:	4013      	ands	r3, r2
 80043b0:	d100      	bne.n	80043b4 <HAL_GPIO_Init+0x17c>
 80043b2:	e0a0      	b.n	80044f6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043b4:	4b57      	ldr	r3, [pc, #348]	; (8004514 <HAL_GPIO_Init+0x2dc>)
 80043b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043b8:	4b56      	ldr	r3, [pc, #344]	; (8004514 <HAL_GPIO_Init+0x2dc>)
 80043ba:	2101      	movs	r1, #1
 80043bc:	430a      	orrs	r2, r1
 80043be:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 80043c0:	4a55      	ldr	r2, [pc, #340]	; (8004518 <HAL_GPIO_Init+0x2e0>)
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	089b      	lsrs	r3, r3, #2
 80043c6:	3302      	adds	r3, #2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	589b      	ldr	r3, [r3, r2]
 80043cc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	2203      	movs	r2, #3
 80043d2:	4013      	ands	r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	220f      	movs	r2, #15
 80043d8:	409a      	lsls	r2, r3
 80043da:	0013      	movs	r3, r2
 80043dc:	43da      	mvns	r2, r3
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	4013      	ands	r3, r2
 80043e2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	23a0      	movs	r3, #160	; 0xa0
 80043e8:	05db      	lsls	r3, r3, #23
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d01f      	beq.n	800442e <HAL_GPIO_Init+0x1f6>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a4a      	ldr	r2, [pc, #296]	; (800451c <HAL_GPIO_Init+0x2e4>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d019      	beq.n	800442a <HAL_GPIO_Init+0x1f2>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a49      	ldr	r2, [pc, #292]	; (8004520 <HAL_GPIO_Init+0x2e8>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d013      	beq.n	8004426 <HAL_GPIO_Init+0x1ee>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a48      	ldr	r2, [pc, #288]	; (8004524 <HAL_GPIO_Init+0x2ec>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d00d      	beq.n	8004422 <HAL_GPIO_Init+0x1ea>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a47      	ldr	r2, [pc, #284]	; (8004528 <HAL_GPIO_Init+0x2f0>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d007      	beq.n	800441e <HAL_GPIO_Init+0x1e6>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a46      	ldr	r2, [pc, #280]	; (800452c <HAL_GPIO_Init+0x2f4>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d101      	bne.n	800441a <HAL_GPIO_Init+0x1e2>
 8004416:	2305      	movs	r3, #5
 8004418:	e00a      	b.n	8004430 <HAL_GPIO_Init+0x1f8>
 800441a:	2306      	movs	r3, #6
 800441c:	e008      	b.n	8004430 <HAL_GPIO_Init+0x1f8>
 800441e:	2304      	movs	r3, #4
 8004420:	e006      	b.n	8004430 <HAL_GPIO_Init+0x1f8>
 8004422:	2303      	movs	r3, #3
 8004424:	e004      	b.n	8004430 <HAL_GPIO_Init+0x1f8>
 8004426:	2302      	movs	r3, #2
 8004428:	e002      	b.n	8004430 <HAL_GPIO_Init+0x1f8>
 800442a:	2301      	movs	r3, #1
 800442c:	e000      	b.n	8004430 <HAL_GPIO_Init+0x1f8>
 800442e:	2300      	movs	r3, #0
 8004430:	697a      	ldr	r2, [r7, #20]
 8004432:	2103      	movs	r1, #3
 8004434:	400a      	ands	r2, r1
 8004436:	0092      	lsls	r2, r2, #2
 8004438:	4093      	lsls	r3, r2
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	4313      	orrs	r3, r2
 800443e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004440:	4935      	ldr	r1, [pc, #212]	; (8004518 <HAL_GPIO_Init+0x2e0>)
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	089b      	lsrs	r3, r3, #2
 8004446:	3302      	adds	r3, #2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800444e:	4b38      	ldr	r3, [pc, #224]	; (8004530 <HAL_GPIO_Init+0x2f8>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	43da      	mvns	r2, r3
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	4013      	ands	r3, r2
 800445c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	685a      	ldr	r2, [r3, #4]
 8004462:	2380      	movs	r3, #128	; 0x80
 8004464:	025b      	lsls	r3, r3, #9
 8004466:	4013      	ands	r3, r2
 8004468:	d003      	beq.n	8004472 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800446a:	693a      	ldr	r2, [r7, #16]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	4313      	orrs	r3, r2
 8004470:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004472:	4b2f      	ldr	r3, [pc, #188]	; (8004530 <HAL_GPIO_Init+0x2f8>)
 8004474:	693a      	ldr	r2, [r7, #16]
 8004476:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004478:	4b2d      	ldr	r3, [pc, #180]	; (8004530 <HAL_GPIO_Init+0x2f8>)
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	43da      	mvns	r2, r3
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	4013      	ands	r3, r2
 8004486:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	685a      	ldr	r2, [r3, #4]
 800448c:	2380      	movs	r3, #128	; 0x80
 800448e:	029b      	lsls	r3, r3, #10
 8004490:	4013      	ands	r3, r2
 8004492:	d003      	beq.n	800449c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	4313      	orrs	r3, r2
 800449a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800449c:	4b24      	ldr	r3, [pc, #144]	; (8004530 <HAL_GPIO_Init+0x2f8>)
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80044a2:	4b23      	ldr	r3, [pc, #140]	; (8004530 <HAL_GPIO_Init+0x2f8>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	43da      	mvns	r2, r3
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	4013      	ands	r3, r2
 80044b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	2380      	movs	r3, #128	; 0x80
 80044b8:	035b      	lsls	r3, r3, #13
 80044ba:	4013      	ands	r3, r2
 80044bc:	d003      	beq.n	80044c6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80044c6:	4b1a      	ldr	r3, [pc, #104]	; (8004530 <HAL_GPIO_Init+0x2f8>)
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80044cc:	4b18      	ldr	r3, [pc, #96]	; (8004530 <HAL_GPIO_Init+0x2f8>)
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	43da      	mvns	r2, r3
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	4013      	ands	r3, r2
 80044da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	685a      	ldr	r2, [r3, #4]
 80044e0:	2380      	movs	r3, #128	; 0x80
 80044e2:	039b      	lsls	r3, r3, #14
 80044e4:	4013      	ands	r3, r2
 80044e6:	d003      	beq.n	80044f0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80044f0:	4b0f      	ldr	r3, [pc, #60]	; (8004530 <HAL_GPIO_Init+0x2f8>)
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	3301      	adds	r3, #1
 80044fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	40da      	lsrs	r2, r3
 8004504:	1e13      	subs	r3, r2, #0
 8004506:	d000      	beq.n	800450a <HAL_GPIO_Init+0x2d2>
 8004508:	e6a2      	b.n	8004250 <HAL_GPIO_Init+0x18>
  }
}
 800450a:	46c0      	nop			; (mov r8, r8)
 800450c:	46bd      	mov	sp, r7
 800450e:	b006      	add	sp, #24
 8004510:	bd80      	pop	{r7, pc}
 8004512:	46c0      	nop			; (mov r8, r8)
 8004514:	40021000 	.word	0x40021000
 8004518:	40010000 	.word	0x40010000
 800451c:	50000400 	.word	0x50000400
 8004520:	50000800 	.word	0x50000800
 8004524:	50000c00 	.word	0x50000c00
 8004528:	50001000 	.word	0x50001000
 800452c:	50001c00 	.word	0x50001c00
 8004530:	40010400 	.word	0x40010400

08004534 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	000a      	movs	r2, r1
 800453e:	1cbb      	adds	r3, r7, #2
 8004540:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	1cba      	adds	r2, r7, #2
 8004548:	8812      	ldrh	r2, [r2, #0]
 800454a:	4013      	ands	r3, r2
 800454c:	d004      	beq.n	8004558 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800454e:	230f      	movs	r3, #15
 8004550:	18fb      	adds	r3, r7, r3
 8004552:	2201      	movs	r2, #1
 8004554:	701a      	strb	r2, [r3, #0]
 8004556:	e003      	b.n	8004560 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004558:	230f      	movs	r3, #15
 800455a:	18fb      	adds	r3, r7, r3
 800455c:	2200      	movs	r2, #0
 800455e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004560:	230f      	movs	r3, #15
 8004562:	18fb      	adds	r3, r7, r3
 8004564:	781b      	ldrb	r3, [r3, #0]
}
 8004566:	0018      	movs	r0, r3
 8004568:	46bd      	mov	sp, r7
 800456a:	b004      	add	sp, #16
 800456c:	bd80      	pop	{r7, pc}

0800456e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b082      	sub	sp, #8
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
 8004576:	0008      	movs	r0, r1
 8004578:	0011      	movs	r1, r2
 800457a:	1cbb      	adds	r3, r7, #2
 800457c:	1c02      	adds	r2, r0, #0
 800457e:	801a      	strh	r2, [r3, #0]
 8004580:	1c7b      	adds	r3, r7, #1
 8004582:	1c0a      	adds	r2, r1, #0
 8004584:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8004586:	1c7b      	adds	r3, r7, #1
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d004      	beq.n	8004598 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800458e:	1cbb      	adds	r3, r7, #2
 8004590:	881a      	ldrh	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8004596:	e003      	b.n	80045a0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8004598:	1cbb      	adds	r3, r7, #2
 800459a:	881a      	ldrh	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80045a0:	46c0      	nop			; (mov r8, r8)
 80045a2:	46bd      	mov	sp, r7
 80045a4:	b002      	add	sp, #8
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	000a      	movs	r2, r1
 80045b2:	1cbb      	adds	r3, r7, #2
 80045b4:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	695a      	ldr	r2, [r3, #20]
 80045ba:	1cbb      	adds	r3, r7, #2
 80045bc:	881b      	ldrh	r3, [r3, #0]
 80045be:	405a      	eors	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	615a      	str	r2, [r3, #20]
}
 80045c4:	46c0      	nop			; (mov r8, r8)
 80045c6:	46bd      	mov	sp, r7
 80045c8:	b002      	add	sp, #8
 80045ca:	bd80      	pop	{r7, pc}

080045cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	0002      	movs	r2, r0
 80045d4:	1dbb      	adds	r3, r7, #6
 80045d6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 80045d8:	4b09      	ldr	r3, [pc, #36]	; (8004600 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80045da:	695b      	ldr	r3, [r3, #20]
 80045dc:	1dba      	adds	r2, r7, #6
 80045de:	8812      	ldrh	r2, [r2, #0]
 80045e0:	4013      	ands	r3, r2
 80045e2:	d008      	beq.n	80045f6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80045e4:	4b06      	ldr	r3, [pc, #24]	; (8004600 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80045e6:	1dba      	adds	r2, r7, #6
 80045e8:	8812      	ldrh	r2, [r2, #0]
 80045ea:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80045ec:	1dbb      	adds	r3, r7, #6
 80045ee:	881b      	ldrh	r3, [r3, #0]
 80045f0:	0018      	movs	r0, r3
 80045f2:	f7fe fe19 	bl	8003228 <HAL_GPIO_EXTI_Callback>
  }
}
 80045f6:	46c0      	nop			; (mov r8, r8)
 80045f8:	46bd      	mov	sp, r7
 80045fa:	b002      	add	sp, #8
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	46c0      	nop			; (mov r8, r8)
 8004600:	40010400 	.word	0x40010400

08004604 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e06c      	b.n	80046f0 <HAL_LPTIM_Init+0xec>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	222e      	movs	r2, #46	; 0x2e
 800461a:	5c9b      	ldrb	r3, [r3, r2]
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d107      	bne.n	8004632 <HAL_LPTIM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	222d      	movs	r2, #45	; 0x2d
 8004626:	2100      	movs	r1, #0
 8004628:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	0018      	movs	r0, r3
 800462e:	f7fe fe7b 	bl	8003328 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	222e      	movs	r2, #46	; 0x2e
 8004636:	2102      	movs	r1, #2
 8004638:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	2b01      	cmp	r3, #1
 8004648:	d005      	beq.n	8004656 <HAL_LPTIM_Init+0x52>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800464e:	2380      	movs	r3, #128	; 0x80
 8004650:	041b      	lsls	r3, r3, #16
 8004652:	429a      	cmp	r2, r3
 8004654:	d103      	bne.n	800465e <HAL_LPTIM_Init+0x5a>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	221e      	movs	r2, #30
 800465a:	4393      	bics	r3, r2
 800465c:	60fb      	str	r3, [r7, #12]
  }
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	4a25      	ldr	r2, [pc, #148]	; (80046f8 <HAL_LPTIM_Init+0xf4>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d003      	beq.n	8004670 <HAL_LPTIM_Init+0x6c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	4a24      	ldr	r2, [pc, #144]	; (80046fc <HAL_LPTIM_Init+0xf8>)
 800466c:	4013      	ands	r3, r2
 800466e:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	4a23      	ldr	r2, [pc, #140]	; (8004700 <HAL_LPTIM_Init+0xfc>)
 8004674:	4013      	ands	r3, r2
 8004676:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004680:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8004686:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 800468c:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8004692:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	4313      	orrs	r3, r2
 8004698:	60fb      	str	r3, [r7, #12]

  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d005      	beq.n	80046ae <HAL_LPTIM_Init+0xaa>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046a6:	2380      	movs	r3, #128	; 0x80
 80046a8:	041b      	lsls	r3, r3, #16
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d107      	bne.n	80046be <HAL_LPTIM_Init+0xba>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80046b6:	4313      	orrs	r3, r2
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	60fb      	str	r3, [r7, #12]
  }

  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	4a0d      	ldr	r2, [pc, #52]	; (80046f8 <HAL_LPTIM_Init+0xf4>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d00a      	beq.n	80046de <HAL_LPTIM_Init+0xda>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80046d0:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80046d6:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	4313      	orrs	r3, r2
 80046dc:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	222e      	movs	r2, #46	; 0x2e
 80046ea:	2101      	movs	r1, #1
 80046ec:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	0018      	movs	r0, r3
 80046f2:	46bd      	mov	sp, r7
 80046f4:	b004      	add	sp, #16
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	0000ffff 	.word	0x0000ffff
 80046fc:	ffff1f3f 	.word	0xffff1f3f
 8004700:	ff19f1f8 	.word	0xff19f1f8

08004704 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	222e      	movs	r2, #46	; 0x2e
 8004712:	2102      	movs	r1, #2
 8004714:	5499      	strb	r1, [r3, r2]

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT();
 8004716:	4b23      	ldr	r3, [pc, #140]	; (80047a4 <HAL_LPTIM_Counter_Start_IT+0xa0>)
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	4b22      	ldr	r3, [pc, #136]	; (80047a4 <HAL_LPTIM_Counter_Start_IT+0xa0>)
 800471c:	2180      	movs	r1, #128	; 0x80
 800471e:	0589      	lsls	r1, r1, #22
 8004720:	430a      	orrs	r2, r1
 8004722:	601a      	str	r2, [r3, #0]

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM) && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d00d      	beq.n	8004748 <HAL_LPTIM_Counter_Start_IT+0x44>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004730:	2380      	movs	r3, #128	; 0x80
 8004732:	041b      	lsls	r3, r3, #16
 8004734:	429a      	cmp	r2, r3
 8004736:	d107      	bne.n	8004748 <HAL_LPTIM_Counter_Start_IT+0x44>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68da      	ldr	r2, [r3, #12]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4919      	ldr	r1, [pc, #100]	; (80047a8 <HAL_LPTIM_Counter_Start_IT+0xa4>)
 8004744:	400a      	ands	r2, r1
 8004746:	60da      	str	r2, [r3, #12]
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	689a      	ldr	r2, [r3, #8]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2110      	movs	r1, #16
 8004754:	430a      	orrs	r2, r1
 8004756:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689a      	ldr	r2, [r3, #8]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2102      	movs	r1, #2
 8004764:	430a      	orrs	r2, r1
 8004766:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	691a      	ldr	r2, [r3, #16]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2101      	movs	r1, #1
 8004774:	430a      	orrs	r2, r1
 8004776:	611a      	str	r2, [r3, #16]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	619a      	str	r2, [r3, #24]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	691a      	ldr	r2, [r3, #16]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2104      	movs	r1, #4
 800478c:	430a      	orrs	r2, r1
 800478e:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	222e      	movs	r2, #46	; 0x2e
 8004794:	2101      	movs	r1, #1
 8004796:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	0018      	movs	r0, r3
 800479c:	46bd      	mov	sp, r7
 800479e:	b002      	add	sp, #8
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	46c0      	nop			; (mov r8, r8)
 80047a4:	40010400 	.word	0x40010400
 80047a8:	fffff1ff 	.word	0xfffff1ff

080047ac <HAL_LPTIM_Counter_Stop_IT>:
  * @brief  Stop the Counter mode in interrupt mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Stop_IT(LPTIM_HandleTypeDef *hlptim)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	222e      	movs	r2, #46	; 0x2e
 80047b8:	2102      	movs	r1, #2
 80047ba:	5499      	strb	r1, [r3, r2]

  /* Disable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_DISABLE_IT();
 80047bc:	4b11      	ldr	r3, [pc, #68]	; (8004804 <HAL_LPTIM_Counter_Stop_IT+0x58>)
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	4b10      	ldr	r3, [pc, #64]	; (8004804 <HAL_LPTIM_Counter_Stop_IT+0x58>)
 80047c2:	4911      	ldr	r1, [pc, #68]	; (8004808 <HAL_LPTIM_Counter_Stop_IT+0x5c>)
 80047c4:	400a      	ands	r2, r1
 80047c6:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	0018      	movs	r0, r3
 80047cc:	f000 f8f0 	bl	80049b0 <LPTIM_Disable>

  /* Disable Autoreload write complete interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARROK);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689a      	ldr	r2, [r3, #8]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2110      	movs	r1, #16
 80047dc:	438a      	bics	r2, r1
 80047de:	609a      	str	r2, [r3, #8]

  /* Disable Autoreload match interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARRM);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689a      	ldr	r2, [r3, #8]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2102      	movs	r1, #2
 80047ec:	438a      	bics	r2, r1
 80047ee:	609a      	str	r2, [r3, #8]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	222e      	movs	r2, #46	; 0x2e
 80047f4:	2101      	movs	r1, #1
 80047f6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	0018      	movs	r0, r3
 80047fc:	46bd      	mov	sp, r7
 80047fe:	b002      	add	sp, #8
 8004800:	bd80      	pop	{r7, pc}
 8004802:	46c0      	nop			; (mov r8, r8)
 8004804:	40010400 	.word	0x40010400
 8004808:	dfffffff 	.word	0xdfffffff

0800480c <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2201      	movs	r2, #1
 800481c:	4013      	ands	r3, r2
 800481e:	2b01      	cmp	r3, #1
 8004820:	d10e      	bne.n	8004840 <HAL_LPTIM_IRQHandler+0x34>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	2201      	movs	r2, #1
 800482a:	4013      	ands	r3, r2
 800482c:	2b01      	cmp	r3, #1
 800482e:	d107      	bne.n	8004840 <HAL_LPTIM_IRQHandler+0x34>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2201      	movs	r2, #1
 8004836:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	0018      	movs	r0, r3
 800483c:	f000 f888 	bl	8004950 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2202      	movs	r2, #2
 8004848:	4013      	ands	r3, r2
 800484a:	2b02      	cmp	r3, #2
 800484c:	d10e      	bne.n	800486c <HAL_LPTIM_IRQHandler+0x60>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	2202      	movs	r2, #2
 8004856:	4013      	ands	r3, r2
 8004858:	2b02      	cmp	r3, #2
 800485a:	d107      	bne.n	800486c <HAL_LPTIM_IRQHandler+0x60>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2202      	movs	r2, #2
 8004862:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	0018      	movs	r0, r3
 8004868:	f7fe ff5a 	bl	8003720 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2204      	movs	r2, #4
 8004874:	4013      	ands	r3, r2
 8004876:	2b04      	cmp	r3, #4
 8004878:	d10e      	bne.n	8004898 <HAL_LPTIM_IRQHandler+0x8c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	2204      	movs	r2, #4
 8004882:	4013      	ands	r3, r2
 8004884:	2b04      	cmp	r3, #4
 8004886:	d107      	bne.n	8004898 <HAL_LPTIM_IRQHandler+0x8c>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2204      	movs	r2, #4
 800488e:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	0018      	movs	r0, r3
 8004894:	f000 f864 	bl	8004960 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2208      	movs	r2, #8
 80048a0:	4013      	ands	r3, r2
 80048a2:	2b08      	cmp	r3, #8
 80048a4:	d10e      	bne.n	80048c4 <HAL_LPTIM_IRQHandler+0xb8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	2208      	movs	r2, #8
 80048ae:	4013      	ands	r3, r2
 80048b0:	2b08      	cmp	r3, #8
 80048b2:	d107      	bne.n	80048c4 <HAL_LPTIM_IRQHandler+0xb8>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2208      	movs	r2, #8
 80048ba:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	0018      	movs	r0, r3
 80048c0:	f000 f856 	bl	8004970 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2210      	movs	r2, #16
 80048cc:	4013      	ands	r3, r2
 80048ce:	2b10      	cmp	r3, #16
 80048d0:	d10e      	bne.n	80048f0 <HAL_LPTIM_IRQHandler+0xe4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	2210      	movs	r2, #16
 80048da:	4013      	ands	r3, r2
 80048dc:	2b10      	cmp	r3, #16
 80048de:	d107      	bne.n	80048f0 <HAL_LPTIM_IRQHandler+0xe4>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2210      	movs	r2, #16
 80048e6:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	0018      	movs	r0, r3
 80048ec:	f000 f848 	bl	8004980 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2220      	movs	r2, #32
 80048f8:	4013      	ands	r3, r2
 80048fa:	2b20      	cmp	r3, #32
 80048fc:	d10e      	bne.n	800491c <HAL_LPTIM_IRQHandler+0x110>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	2220      	movs	r2, #32
 8004906:	4013      	ands	r3, r2
 8004908:	2b20      	cmp	r3, #32
 800490a:	d107      	bne.n	800491c <HAL_LPTIM_IRQHandler+0x110>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2220      	movs	r2, #32
 8004912:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	0018      	movs	r0, r3
 8004918:	f000 f83a 	bl	8004990 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2240      	movs	r2, #64	; 0x40
 8004924:	4013      	ands	r3, r2
 8004926:	2b40      	cmp	r3, #64	; 0x40
 8004928:	d10e      	bne.n	8004948 <HAL_LPTIM_IRQHandler+0x13c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	2240      	movs	r2, #64	; 0x40
 8004932:	4013      	ands	r3, r2
 8004934:	2b40      	cmp	r3, #64	; 0x40
 8004936:	d107      	bne.n	8004948 <HAL_LPTIM_IRQHandler+0x13c>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2240      	movs	r2, #64	; 0x40
 800493e:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	0018      	movs	r0, r3
 8004944:	f000 f82c 	bl	80049a0 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8004948:	46c0      	nop			; (mov r8, r8)
 800494a:	46bd      	mov	sp, r7
 800494c:	b002      	add	sp, #8
 800494e:	bd80      	pop	{r7, pc}

08004950 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8004958:	46c0      	nop			; (mov r8, r8)
 800495a:	46bd      	mov	sp, r7
 800495c:	b002      	add	sp, #8
 800495e:	bd80      	pop	{r7, pc}

08004960 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8004968:	46c0      	nop			; (mov r8, r8)
 800496a:	46bd      	mov	sp, r7
 800496c:	b002      	add	sp, #8
 800496e:	bd80      	pop	{r7, pc}

08004970 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8004978:	46c0      	nop			; (mov r8, r8)
 800497a:	46bd      	mov	sp, r7
 800497c:	b002      	add	sp, #8
 800497e:	bd80      	pop	{r7, pc}

08004980 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8004988:	46c0      	nop			; (mov r8, r8)
 800498a:	46bd      	mov	sp, r7
 800498c:	b002      	add	sp, #8
 800498e:	bd80      	pop	{r7, pc}

08004990 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8004998:	46c0      	nop			; (mov r8, r8)
 800499a:	46bd      	mov	sp, r7
 800499c:	b002      	add	sp, #8
 800499e:	bd80      	pop	{r7, pc}

080049a0 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 80049a8:	46c0      	nop			; (mov r8, r8)
 80049aa:	46bd      	mov	sp, r7
 80049ac:	b002      	add	sp, #8
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *lptim)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b08a      	sub	sp, #40	; 0x28
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 80049b8:	2300      	movs	r3, #0
 80049ba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80049bc:	b672      	cpsid	i

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)lptim->Instance)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	001a      	movs	r2, r3
 80049c4:	4b5e      	ldr	r3, [pc, #376]	; (8004b40 <LPTIM_Disable+0x190>)
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d000      	beq.n	80049cc <LPTIM_Disable+0x1c>
     case LPTIM2_BASE:
       tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
       break;
#endif /* LPTIM2 */
     default:
       break;
 80049ca:	e006      	b.n	80049da <LPTIM_Disable+0x2a>
       tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 80049cc:	4b5d      	ldr	r3, [pc, #372]	; (8004b44 <LPTIM_Disable+0x194>)
 80049ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049d0:	23c0      	movs	r3, #192	; 0xc0
 80049d2:	031b      	lsls	r3, r3, #12
 80049d4:	4013      	ands	r3, r2
 80049d6:	627b      	str	r3, [r7, #36]	; 0x24
       break;
 80049d8:	46c0      	nop			; (mov r8, r8)
  }

  /* Save LPTIM configuration registers */
  tmpIER = lptim->Instance->IER;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	623b      	str	r3, [r7, #32]
  tmpCFGR = lptim->Instance->CFGR;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	61fb      	str	r3, [r7, #28]
  tmpCMP = lptim->Instance->CMP;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	695b      	ldr	r3, [r3, #20]
 80049f0:	61bb      	str	r3, [r7, #24]
  tmpARR = lptim->Instance->ARR;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	699b      	ldr	r3, [r3, #24]
 80049f8:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)lptim->Instance)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	001a      	movs	r2, r3
 8004a00:	4b4f      	ldr	r3, [pc, #316]	; (8004b40 <LPTIM_Disable+0x190>)
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d000      	beq.n	8004a08 <LPTIM_Disable+0x58>
       __HAL_RCC_LPTIM2_FORCE_RESET();
       __HAL_RCC_LPTIM2_RELEASE_RESET();
       break;
#endif /* LPTIM2 */
     default:
       break;
 8004a06:	e00d      	b.n	8004a24 <LPTIM_Disable+0x74>
       __HAL_RCC_LPTIM1_FORCE_RESET();
 8004a08:	4b4e      	ldr	r3, [pc, #312]	; (8004b44 <LPTIM_Disable+0x194>)
 8004a0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a0c:	4b4d      	ldr	r3, [pc, #308]	; (8004b44 <LPTIM_Disable+0x194>)
 8004a0e:	2180      	movs	r1, #128	; 0x80
 8004a10:	0609      	lsls	r1, r1, #24
 8004a12:	430a      	orrs	r2, r1
 8004a14:	629a      	str	r2, [r3, #40]	; 0x28
       __HAL_RCC_LPTIM1_RELEASE_RESET();
 8004a16:	4b4b      	ldr	r3, [pc, #300]	; (8004b44 <LPTIM_Disable+0x194>)
 8004a18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a1a:	4b4a      	ldr	r3, [pc, #296]	; (8004b44 <LPTIM_Disable+0x194>)
 8004a1c:	0052      	lsls	r2, r2, #1
 8004a1e:	0852      	lsrs	r2, r2, #1
 8004a20:	629a      	str	r2, [r3, #40]	; 0x28
       break;
 8004a22:	46c0      	nop			; (mov r8, r8)

  /*********** Restore LPTIM Config ***********/
  uint32_t Ref_Time;
  uint32_t Time_Elapsed;

  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d103      	bne.n	8004a32 <LPTIM_Disable+0x82>
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d100      	bne.n	8004a32 <LPTIM_Disable+0x82>
 8004a30:	e070      	b.n	8004b14 <LPTIM_Disable+0x164>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)lptim->Instance)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	001a      	movs	r2, r3
 8004a38:	4b41      	ldr	r3, [pc, #260]	; (8004b40 <LPTIM_Disable+0x190>)
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d000      	beq.n	8004a40 <LPTIM_Disable+0x90>
       case LPTIM2_BASE:
         __HAL_RCC_LPTIM2_CONFIG(0UL);
         break;
#endif /* LPTIM2 */
       default:
         break;
 8004a3e:	e006      	b.n	8004a4e <LPTIM_Disable+0x9e>
         __HAL_RCC_LPTIM1_CONFIG(0UL);
 8004a40:	4b40      	ldr	r3, [pc, #256]	; (8004b44 <LPTIM_Disable+0x194>)
 8004a42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a44:	4b3f      	ldr	r3, [pc, #252]	; (8004b44 <LPTIM_Disable+0x194>)
 8004a46:	4940      	ldr	r1, [pc, #256]	; (8004b48 <LPTIM_Disable+0x198>)
 8004a48:	400a      	ands	r2, r1
 8004a4a:	64da      	str	r2, [r3, #76]	; 0x4c
         break;
 8004a4c:	46c0      	nop			; (mov r8, r8)
    }

    if (tmpCMP != 0UL)
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d025      	beq.n	8004aa0 <LPTIM_Disable+0xf0>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      lptim->Instance->CR |= LPTIM_CR_ENABLE;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	691a      	ldr	r2, [r3, #16]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2101      	movs	r1, #1
 8004a60:	430a      	orrs	r2, r1
 8004a62:	611a      	str	r2, [r3, #16]
      lptim->Instance->CMP = tmpCMP;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	69ba      	ldr	r2, [r7, #24]
 8004a6a:	615a      	str	r2, [r3, #20]
      /* Polling on CMP write ok status after above restore operation */
      Ref_Time = HAL_GetTick();
 8004a6c:	f7fe ff42 	bl	80038f4 <HAL_GetTick>
 8004a70:	0003      	movs	r3, r0
 8004a72:	613b      	str	r3, [r7, #16]
      do
      {
        Time_Elapsed = HAL_GetTick() - Ref_Time;
 8004a74:	f7fe ff3e 	bl	80038f4 <HAL_GetTick>
 8004a78:	0002      	movs	r2, r0
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	60fb      	str	r3, [r7, #12]
      } while ((!(__HAL_LPTIM_GET_FLAG(lptim, LPTIM_FLAG_CMPOK))) && (Time_Elapsed <= TIMEOUT));
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2208      	movs	r2, #8
 8004a88:	4013      	ands	r3, r2
 8004a8a:	2b08      	cmp	r3, #8
 8004a8c:	d004      	beq.n	8004a98 <LPTIM_Disable+0xe8>
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	23fa      	movs	r3, #250	; 0xfa
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d9ed      	bls.n	8004a74 <LPTIM_Disable+0xc4>

      __HAL_LPTIM_CLEAR_FLAG(lptim, LPTIM_FLAG_CMPOK);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2208      	movs	r2, #8
 8004a9e:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d025      	beq.n	8004af2 <LPTIM_Disable+0x142>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      lptim->Instance->CR |= LPTIM_CR_ENABLE;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	691a      	ldr	r2, [r3, #16]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2101      	movs	r1, #1
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	611a      	str	r2, [r3, #16]
      lptim->Instance->ARR = tmpARR;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	697a      	ldr	r2, [r7, #20]
 8004abc:	619a      	str	r2, [r3, #24]
      /* Polling on ARR write ok status after above restore operation */
      Ref_Time = HAL_GetTick();
 8004abe:	f7fe ff19 	bl	80038f4 <HAL_GetTick>
 8004ac2:	0003      	movs	r3, r0
 8004ac4:	613b      	str	r3, [r7, #16]
      do
      {
        Time_Elapsed = HAL_GetTick() - Ref_Time;
 8004ac6:	f7fe ff15 	bl	80038f4 <HAL_GetTick>
 8004aca:	0002      	movs	r2, r0
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	60fb      	str	r3, [r7, #12]
      } while ((!(__HAL_LPTIM_GET_FLAG(lptim, LPTIM_FLAG_ARROK))) && (Time_Elapsed <= TIMEOUT));
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2210      	movs	r2, #16
 8004ada:	4013      	ands	r3, r2
 8004adc:	2b10      	cmp	r3, #16
 8004ade:	d004      	beq.n	8004aea <LPTIM_Disable+0x13a>
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	23fa      	movs	r3, #250	; 0xfa
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d9ed      	bls.n	8004ac6 <LPTIM_Disable+0x116>

      __HAL_LPTIM_CLEAR_FLAG(lptim, LPTIM_FLAG_ARROK);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2210      	movs	r2, #16
 8004af0:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)lptim->Instance)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	001a      	movs	r2, r3
 8004af8:	4b11      	ldr	r3, [pc, #68]	; (8004b40 <LPTIM_Disable+0x190>)
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d000      	beq.n	8004b00 <LPTIM_Disable+0x150>
       case LPTIM2_BASE:
         __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
         break;
#endif /* LPTIM2 */
       default:
         break;
 8004afe:	e00a      	b.n	8004b16 <LPTIM_Disable+0x166>
         __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8004b00:	4b10      	ldr	r3, [pc, #64]	; (8004b44 <LPTIM_Disable+0x194>)
 8004b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b04:	4a10      	ldr	r2, [pc, #64]	; (8004b48 <LPTIM_Disable+0x198>)
 8004b06:	4013      	ands	r3, r2
 8004b08:	0019      	movs	r1, r3
 8004b0a:	4b0e      	ldr	r3, [pc, #56]	; (8004b44 <LPTIM_Disable+0x194>)
 8004b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	64da      	str	r2, [r3, #76]	; 0x4c
         break;
 8004b12:	e000      	b.n	8004b16 <LPTIM_Disable+0x166>
    }
  }
 8004b14:	46c0      	nop			; (mov r8, r8)

  /* Restore configuration registers (LPTIM should be disabled first) */
  lptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	691a      	ldr	r2, [r3, #16]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2101      	movs	r1, #1
 8004b22:	438a      	bics	r2, r1
 8004b24:	611a      	str	r2, [r3, #16]
  lptim->Instance->IER = tmpIER;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	6a3a      	ldr	r2, [r7, #32]
 8004b2c:	609a      	str	r2, [r3, #8]
  lptim->Instance->CFGR = tmpCFGR;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	69fa      	ldr	r2, [r7, #28]
 8004b34:	60da      	str	r2, [r3, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8004b36:	b662      	cpsie	i

  __enable_irq();
}
 8004b38:	46c0      	nop			; (mov r8, r8)
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	b00a      	add	sp, #40	; 0x28
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	40007c00 	.word	0x40007c00
 8004b44:	40021000 	.word	0x40021000
 8004b48:	fff3ffff 	.word	0xfff3ffff

08004b4c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b50:	4b04      	ldr	r3, [pc, #16]	; (8004b64 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	4b03      	ldr	r3, [pc, #12]	; (8004b64 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004b56:	2180      	movs	r1, #128	; 0x80
 8004b58:	0049      	lsls	r1, r1, #1
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	601a      	str	r2, [r3, #0]
}
 8004b5e:	46c0      	nop			; (mov r8, r8)
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	40007000 	.word	0x40007000

08004b68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b68:	b5b0      	push	{r4, r5, r7, lr}
 8004b6a:	b08a      	sub	sp, #40	; 0x28
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d102      	bne.n	8004b7c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	f000 fbbc 	bl	80052f4 <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b7c:	4bc8      	ldr	r3, [pc, #800]	; (8004ea0 <HAL_RCC_OscConfig+0x338>)
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	220c      	movs	r2, #12
 8004b82:	4013      	ands	r3, r2
 8004b84:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b86:	4bc6      	ldr	r3, [pc, #792]	; (8004ea0 <HAL_RCC_OscConfig+0x338>)
 8004b88:	68da      	ldr	r2, [r3, #12]
 8004b8a:	2380      	movs	r3, #128	; 0x80
 8004b8c:	025b      	lsls	r3, r3, #9
 8004b8e:	4013      	ands	r3, r2
 8004b90:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2201      	movs	r2, #1
 8004b98:	4013      	ands	r3, r2
 8004b9a:	d100      	bne.n	8004b9e <HAL_RCC_OscConfig+0x36>
 8004b9c:	e07e      	b.n	8004c9c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	2b08      	cmp	r3, #8
 8004ba2:	d007      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	2b0c      	cmp	r3, #12
 8004ba8:	d112      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x68>
 8004baa:	69ba      	ldr	r2, [r7, #24]
 8004bac:	2380      	movs	r3, #128	; 0x80
 8004bae:	025b      	lsls	r3, r3, #9
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d10d      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bb4:	4bba      	ldr	r3, [pc, #744]	; (8004ea0 <HAL_RCC_OscConfig+0x338>)
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	2380      	movs	r3, #128	; 0x80
 8004bba:	029b      	lsls	r3, r3, #10
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	d100      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x5a>
 8004bc0:	e06b      	b.n	8004c9a <HAL_RCC_OscConfig+0x132>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d167      	bne.n	8004c9a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	f000 fb92 	bl	80052f4 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685a      	ldr	r2, [r3, #4]
 8004bd4:	2380      	movs	r3, #128	; 0x80
 8004bd6:	025b      	lsls	r3, r3, #9
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d107      	bne.n	8004bec <HAL_RCC_OscConfig+0x84>
 8004bdc:	4bb0      	ldr	r3, [pc, #704]	; (8004ea0 <HAL_RCC_OscConfig+0x338>)
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	4baf      	ldr	r3, [pc, #700]	; (8004ea0 <HAL_RCC_OscConfig+0x338>)
 8004be2:	2180      	movs	r1, #128	; 0x80
 8004be4:	0249      	lsls	r1, r1, #9
 8004be6:	430a      	orrs	r2, r1
 8004be8:	601a      	str	r2, [r3, #0]
 8004bea:	e027      	b.n	8004c3c <HAL_RCC_OscConfig+0xd4>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	23a0      	movs	r3, #160	; 0xa0
 8004bf2:	02db      	lsls	r3, r3, #11
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d10e      	bne.n	8004c16 <HAL_RCC_OscConfig+0xae>
 8004bf8:	4ba9      	ldr	r3, [pc, #676]	; (8004ea0 <HAL_RCC_OscConfig+0x338>)
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	4ba8      	ldr	r3, [pc, #672]	; (8004ea0 <HAL_RCC_OscConfig+0x338>)
 8004bfe:	2180      	movs	r1, #128	; 0x80
 8004c00:	02c9      	lsls	r1, r1, #11
 8004c02:	430a      	orrs	r2, r1
 8004c04:	601a      	str	r2, [r3, #0]
 8004c06:	4ba6      	ldr	r3, [pc, #664]	; (8004ea0 <HAL_RCC_OscConfig+0x338>)
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	4ba5      	ldr	r3, [pc, #660]	; (8004ea0 <HAL_RCC_OscConfig+0x338>)
 8004c0c:	2180      	movs	r1, #128	; 0x80
 8004c0e:	0249      	lsls	r1, r1, #9
 8004c10:	430a      	orrs	r2, r1
 8004c12:	601a      	str	r2, [r3, #0]
 8004c14:	e012      	b.n	8004c3c <HAL_RCC_OscConfig+0xd4>
 8004c16:	4ba2      	ldr	r3, [pc, #648]	; (8004ea0 <HAL_RCC_OscConfig+0x338>)
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	4ba1      	ldr	r3, [pc, #644]	; (8004ea0 <HAL_RCC_OscConfig+0x338>)
 8004c1c:	49a1      	ldr	r1, [pc, #644]	; (8004ea4 <HAL_RCC_OscConfig+0x33c>)
 8004c1e:	400a      	ands	r2, r1
 8004c20:	601a      	str	r2, [r3, #0]
 8004c22:	4b9f      	ldr	r3, [pc, #636]	; (8004ea0 <HAL_RCC_OscConfig+0x338>)
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	2380      	movs	r3, #128	; 0x80
 8004c28:	025b      	lsls	r3, r3, #9
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	60fb      	str	r3, [r7, #12]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	4b9b      	ldr	r3, [pc, #620]	; (8004ea0 <HAL_RCC_OscConfig+0x338>)
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	4b9a      	ldr	r3, [pc, #616]	; (8004ea0 <HAL_RCC_OscConfig+0x338>)
 8004c36:	499c      	ldr	r1, [pc, #624]	; (8004ea8 <HAL_RCC_OscConfig+0x340>)
 8004c38:	400a      	ands	r2, r1
 8004c3a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d015      	beq.n	8004c70 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c44:	f7fe fe56 	bl	80038f4 <HAL_GetTick>
 8004c48:	0003      	movs	r3, r0
 8004c4a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c4c:	e009      	b.n	8004c62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c4e:	f7fe fe51 	bl	80038f4 <HAL_GetTick>
 8004c52:	0002      	movs	r2, r0
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	2b64      	cmp	r3, #100	; 0x64
 8004c5a:	d902      	bls.n	8004c62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	f000 fb49 	bl	80052f4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c62:	4b8f      	ldr	r3, [pc, #572]	; (8004ea0 <HAL_RCC_OscConfig+0x338>)
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	2380      	movs	r3, #128	; 0x80
 8004c68:	029b      	lsls	r3, r3, #10
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	d0ef      	beq.n	8004c4e <HAL_RCC_OscConfig+0xe6>
 8004c6e:	e015      	b.n	8004c9c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c70:	f7fe fe40 	bl	80038f4 <HAL_GetTick>
 8004c74:	0003      	movs	r3, r0
 8004c76:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004c78:	e008      	b.n	8004c8c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c7a:	f7fe fe3b 	bl	80038f4 <HAL_GetTick>
 8004c7e:	0002      	movs	r2, r0
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	2b64      	cmp	r3, #100	; 0x64
 8004c86:	d901      	bls.n	8004c8c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e333      	b.n	80052f4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004c8c:	4b84      	ldr	r3, [pc, #528]	; (8004ea0 <HAL_RCC_OscConfig+0x338>)
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	2380      	movs	r3, #128	; 0x80
 8004c92:	029b      	lsls	r3, r3, #10
 8004c94:	4013      	ands	r3, r2
 8004c96:	d1f0      	bne.n	8004c7a <HAL_RCC_OscConfig+0x112>
 8004c98:	e000      	b.n	8004c9c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c9a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2202      	movs	r2, #2
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	d100      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x140>
 8004ca6:	e098      	b.n	8004dda <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8004cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb0:	2220      	movs	r2, #32
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	d009      	beq.n	8004cca <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004cb6:	4b7a      	ldr	r3, [pc, #488]	; (8004ea0 <HAL_RCC_OscConfig+0x338>)
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	4b79      	ldr	r3, [pc, #484]	; (8004ea0 <HAL_RCC_OscConfig+0x338>)
 8004cbc:	2120      	movs	r1, #32
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc4:	2220      	movs	r2, #32
 8004cc6:	4393      	bics	r3, r2
 8004cc8:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	2b04      	cmp	r3, #4
 8004cce:	d005      	beq.n	8004cdc <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	2b0c      	cmp	r3, #12
 8004cd4:	d13d      	bne.n	8004d52 <HAL_RCC_OscConfig+0x1ea>
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d13a      	bne.n	8004d52 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004cdc:	4b70      	ldr	r3, [pc, #448]	; (8004ea0 <HAL_RCC_OscConfig+0x338>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2204      	movs	r2, #4
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	d004      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x188>
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d101      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e301      	b.n	80052f4 <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cf0:	4b6b      	ldr	r3, [pc, #428]	; (8004ea0 <HAL_RCC_OscConfig+0x338>)
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	4a6d      	ldr	r2, [pc, #436]	; (8004eac <HAL_RCC_OscConfig+0x344>)
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	0019      	movs	r1, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	021a      	lsls	r2, r3, #8
 8004d00:	4b67      	ldr	r3, [pc, #412]	; (8004ea0 <HAL_RCC_OscConfig+0x338>)
 8004d02:	430a      	orrs	r2, r1
 8004d04:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004d06:	4b66      	ldr	r3, [pc, #408]	; (8004ea0 <HAL_RCC_OscConfig+0x338>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2209      	movs	r2, #9
 8004d0c:	4393      	bics	r3, r2
 8004d0e:	0019      	movs	r1, r3
 8004d10:	4b63      	ldr	r3, [pc, #396]	; (8004ea0 <HAL_RCC_OscConfig+0x338>)
 8004d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d14:	430a      	orrs	r2, r1
 8004d16:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d18:	f000 fc20 	bl	800555c <HAL_RCC_GetSysClockFreq>
 8004d1c:	0001      	movs	r1, r0
 8004d1e:	4b60      	ldr	r3, [pc, #384]	; (8004ea0 <HAL_RCC_OscConfig+0x338>)
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	091b      	lsrs	r3, r3, #4
 8004d24:	220f      	movs	r2, #15
 8004d26:	4013      	ands	r3, r2
 8004d28:	4a61      	ldr	r2, [pc, #388]	; (8004eb0 <HAL_RCC_OscConfig+0x348>)
 8004d2a:	5cd3      	ldrb	r3, [r2, r3]
 8004d2c:	000a      	movs	r2, r1
 8004d2e:	40da      	lsrs	r2, r3
 8004d30:	4b60      	ldr	r3, [pc, #384]	; (8004eb4 <HAL_RCC_OscConfig+0x34c>)
 8004d32:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8004d34:	2513      	movs	r5, #19
 8004d36:	197c      	adds	r4, r7, r5
 8004d38:	2000      	movs	r0, #0
 8004d3a:	f7fe fda5 	bl	8003888 <HAL_InitTick>
 8004d3e:	0003      	movs	r3, r0
 8004d40:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004d42:	197b      	adds	r3, r7, r5
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d047      	beq.n	8004dda <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8004d4a:	2313      	movs	r3, #19
 8004d4c:	18fb      	adds	r3, r7, r3
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	e2d0      	b.n	80052f4 <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d027      	beq.n	8004da8 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004d58:	4b51      	ldr	r3, [pc, #324]	; (8004ea0 <HAL_RCC_OscConfig+0x338>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2209      	movs	r2, #9
 8004d5e:	4393      	bics	r3, r2
 8004d60:	0019      	movs	r1, r3
 8004d62:	4b4f      	ldr	r3, [pc, #316]	; (8004ea0 <HAL_RCC_OscConfig+0x338>)
 8004d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d66:	430a      	orrs	r2, r1
 8004d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d6a:	f7fe fdc3 	bl	80038f4 <HAL_GetTick>
 8004d6e:	0003      	movs	r3, r0
 8004d70:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d72:	e008      	b.n	8004d86 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d74:	f7fe fdbe 	bl	80038f4 <HAL_GetTick>
 8004d78:	0002      	movs	r2, r0
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e2b6      	b.n	80052f4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d86:	4b46      	ldr	r3, [pc, #280]	; (8004ea0 <HAL_RCC_OscConfig+0x338>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2204      	movs	r2, #4
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	d0f1      	beq.n	8004d74 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d90:	4b43      	ldr	r3, [pc, #268]	; (8004ea0 <HAL_RCC_OscConfig+0x338>)
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	4a45      	ldr	r2, [pc, #276]	; (8004eac <HAL_RCC_OscConfig+0x344>)
 8004d96:	4013      	ands	r3, r2
 8004d98:	0019      	movs	r1, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	021a      	lsls	r2, r3, #8
 8004da0:	4b3f      	ldr	r3, [pc, #252]	; (8004ea0 <HAL_RCC_OscConfig+0x338>)
 8004da2:	430a      	orrs	r2, r1
 8004da4:	605a      	str	r2, [r3, #4]
 8004da6:	e018      	b.n	8004dda <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004da8:	4b3d      	ldr	r3, [pc, #244]	; (8004ea0 <HAL_RCC_OscConfig+0x338>)
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	4b3c      	ldr	r3, [pc, #240]	; (8004ea0 <HAL_RCC_OscConfig+0x338>)
 8004dae:	2101      	movs	r1, #1
 8004db0:	438a      	bics	r2, r1
 8004db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004db4:	f7fe fd9e 	bl	80038f4 <HAL_GetTick>
 8004db8:	0003      	movs	r3, r0
 8004dba:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004dbc:	e008      	b.n	8004dd0 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dbe:	f7fe fd99 	bl	80038f4 <HAL_GetTick>
 8004dc2:	0002      	movs	r2, r0
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d901      	bls.n	8004dd0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e291      	b.n	80052f4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004dd0:	4b33      	ldr	r3, [pc, #204]	; (8004ea0 <HAL_RCC_OscConfig+0x338>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2204      	movs	r2, #4
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	d1f1      	bne.n	8004dbe <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2210      	movs	r2, #16
 8004de0:	4013      	ands	r3, r2
 8004de2:	d100      	bne.n	8004de6 <HAL_RCC_OscConfig+0x27e>
 8004de4:	e09f      	b.n	8004f26 <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d13f      	bne.n	8004e6c <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004dec:	4b2c      	ldr	r3, [pc, #176]	; (8004ea0 <HAL_RCC_OscConfig+0x338>)
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	2380      	movs	r3, #128	; 0x80
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	4013      	ands	r3, r2
 8004df6:	d005      	beq.n	8004e04 <HAL_RCC_OscConfig+0x29c>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	69db      	ldr	r3, [r3, #28]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d101      	bne.n	8004e04 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e277      	b.n	80052f4 <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e04:	4b26      	ldr	r3, [pc, #152]	; (8004ea0 <HAL_RCC_OscConfig+0x338>)
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	4a2b      	ldr	r2, [pc, #172]	; (8004eb8 <HAL_RCC_OscConfig+0x350>)
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	0019      	movs	r1, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e12:	4b23      	ldr	r3, [pc, #140]	; (8004ea0 <HAL_RCC_OscConfig+0x338>)
 8004e14:	430a      	orrs	r2, r1
 8004e16:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e18:	4b21      	ldr	r3, [pc, #132]	; (8004ea0 <HAL_RCC_OscConfig+0x338>)
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	021b      	lsls	r3, r3, #8
 8004e1e:	0a19      	lsrs	r1, r3, #8
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a1b      	ldr	r3, [r3, #32]
 8004e24:	061a      	lsls	r2, r3, #24
 8004e26:	4b1e      	ldr	r3, [pc, #120]	; (8004ea0 <HAL_RCC_OscConfig+0x338>)
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e30:	0b5b      	lsrs	r3, r3, #13
 8004e32:	3301      	adds	r3, #1
 8004e34:	2280      	movs	r2, #128	; 0x80
 8004e36:	0212      	lsls	r2, r2, #8
 8004e38:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004e3a:	4b19      	ldr	r3, [pc, #100]	; (8004ea0 <HAL_RCC_OscConfig+0x338>)
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	091b      	lsrs	r3, r3, #4
 8004e40:	210f      	movs	r1, #15
 8004e42:	400b      	ands	r3, r1
 8004e44:	491a      	ldr	r1, [pc, #104]	; (8004eb0 <HAL_RCC_OscConfig+0x348>)
 8004e46:	5ccb      	ldrb	r3, [r1, r3]
 8004e48:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004e4a:	4b1a      	ldr	r3, [pc, #104]	; (8004eb4 <HAL_RCC_OscConfig+0x34c>)
 8004e4c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8004e4e:	2513      	movs	r5, #19
 8004e50:	197c      	adds	r4, r7, r5
 8004e52:	2000      	movs	r0, #0
 8004e54:	f7fe fd18 	bl	8003888 <HAL_InitTick>
 8004e58:	0003      	movs	r3, r0
 8004e5a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004e5c:	197b      	adds	r3, r7, r5
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d060      	beq.n	8004f26 <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 8004e64:	2313      	movs	r3, #19
 8004e66:	18fb      	adds	r3, r7, r3
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	e243      	b.n	80052f4 <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	69db      	ldr	r3, [r3, #28]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d03e      	beq.n	8004ef2 <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004e74:	4b0a      	ldr	r3, [pc, #40]	; (8004ea0 <HAL_RCC_OscConfig+0x338>)
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	4b09      	ldr	r3, [pc, #36]	; (8004ea0 <HAL_RCC_OscConfig+0x338>)
 8004e7a:	2180      	movs	r1, #128	; 0x80
 8004e7c:	0049      	lsls	r1, r1, #1
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e82:	f7fe fd37 	bl	80038f4 <HAL_GetTick>
 8004e86:	0003      	movs	r3, r0
 8004e88:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004e8a:	e017      	b.n	8004ebc <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e8c:	f7fe fd32 	bl	80038f4 <HAL_GetTick>
 8004e90:	0002      	movs	r2, r0
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d910      	bls.n	8004ebc <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e22a      	b.n	80052f4 <HAL_RCC_OscConfig+0x78c>
 8004e9e:	46c0      	nop			; (mov r8, r8)
 8004ea0:	40021000 	.word	0x40021000
 8004ea4:	fffeffff 	.word	0xfffeffff
 8004ea8:	fffbffff 	.word	0xfffbffff
 8004eac:	ffffe0ff 	.word	0xffffe0ff
 8004eb0:	08008804 	.word	0x08008804
 8004eb4:	20000054 	.word	0x20000054
 8004eb8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004ebc:	4bc6      	ldr	r3, [pc, #792]	; (80051d8 <HAL_RCC_OscConfig+0x670>)
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	2380      	movs	r3, #128	; 0x80
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	d0e1      	beq.n	8004e8c <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ec8:	4bc3      	ldr	r3, [pc, #780]	; (80051d8 <HAL_RCC_OscConfig+0x670>)
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	4ac3      	ldr	r2, [pc, #780]	; (80051dc <HAL_RCC_OscConfig+0x674>)
 8004ece:	4013      	ands	r3, r2
 8004ed0:	0019      	movs	r1, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ed6:	4bc0      	ldr	r3, [pc, #768]	; (80051d8 <HAL_RCC_OscConfig+0x670>)
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004edc:	4bbe      	ldr	r3, [pc, #760]	; (80051d8 <HAL_RCC_OscConfig+0x670>)
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	021b      	lsls	r3, r3, #8
 8004ee2:	0a19      	lsrs	r1, r3, #8
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a1b      	ldr	r3, [r3, #32]
 8004ee8:	061a      	lsls	r2, r3, #24
 8004eea:	4bbb      	ldr	r3, [pc, #748]	; (80051d8 <HAL_RCC_OscConfig+0x670>)
 8004eec:	430a      	orrs	r2, r1
 8004eee:	605a      	str	r2, [r3, #4]
 8004ef0:	e019      	b.n	8004f26 <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004ef2:	4bb9      	ldr	r3, [pc, #740]	; (80051d8 <HAL_RCC_OscConfig+0x670>)
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	4bb8      	ldr	r3, [pc, #736]	; (80051d8 <HAL_RCC_OscConfig+0x670>)
 8004ef8:	49b9      	ldr	r1, [pc, #740]	; (80051e0 <HAL_RCC_OscConfig+0x678>)
 8004efa:	400a      	ands	r2, r1
 8004efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004efe:	f7fe fcf9 	bl	80038f4 <HAL_GetTick>
 8004f02:	0003      	movs	r3, r0
 8004f04:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004f06:	e008      	b.n	8004f1a <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f08:	f7fe fcf4 	bl	80038f4 <HAL_GetTick>
 8004f0c:	0002      	movs	r2, r0
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d901      	bls.n	8004f1a <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e1ec      	b.n	80052f4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004f1a:	4baf      	ldr	r3, [pc, #700]	; (80051d8 <HAL_RCC_OscConfig+0x670>)
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	2380      	movs	r3, #128	; 0x80
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	4013      	ands	r3, r2
 8004f24:	d1f0      	bne.n	8004f08 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2208      	movs	r2, #8
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	d036      	beq.n	8004f9e <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	695b      	ldr	r3, [r3, #20]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d019      	beq.n	8004f6c <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f38:	4ba7      	ldr	r3, [pc, #668]	; (80051d8 <HAL_RCC_OscConfig+0x670>)
 8004f3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f3c:	4ba6      	ldr	r3, [pc, #664]	; (80051d8 <HAL_RCC_OscConfig+0x670>)
 8004f3e:	2101      	movs	r1, #1
 8004f40:	430a      	orrs	r2, r1
 8004f42:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f44:	f7fe fcd6 	bl	80038f4 <HAL_GetTick>
 8004f48:	0003      	movs	r3, r0
 8004f4a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f4c:	e008      	b.n	8004f60 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f4e:	f7fe fcd1 	bl	80038f4 <HAL_GetTick>
 8004f52:	0002      	movs	r2, r0
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d901      	bls.n	8004f60 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e1c9      	b.n	80052f4 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004f60:	4b9d      	ldr	r3, [pc, #628]	; (80051d8 <HAL_RCC_OscConfig+0x670>)
 8004f62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f64:	2202      	movs	r2, #2
 8004f66:	4013      	ands	r3, r2
 8004f68:	d0f1      	beq.n	8004f4e <HAL_RCC_OscConfig+0x3e6>
 8004f6a:	e018      	b.n	8004f9e <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f6c:	4b9a      	ldr	r3, [pc, #616]	; (80051d8 <HAL_RCC_OscConfig+0x670>)
 8004f6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f70:	4b99      	ldr	r3, [pc, #612]	; (80051d8 <HAL_RCC_OscConfig+0x670>)
 8004f72:	2101      	movs	r1, #1
 8004f74:	438a      	bics	r2, r1
 8004f76:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f78:	f7fe fcbc 	bl	80038f4 <HAL_GetTick>
 8004f7c:	0003      	movs	r3, r0
 8004f7e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f80:	e008      	b.n	8004f94 <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f82:	f7fe fcb7 	bl	80038f4 <HAL_GetTick>
 8004f86:	0002      	movs	r2, r0
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d901      	bls.n	8004f94 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e1af      	b.n	80052f4 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004f94:	4b90      	ldr	r3, [pc, #576]	; (80051d8 <HAL_RCC_OscConfig+0x670>)
 8004f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f98:	2202      	movs	r2, #2
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	d1f1      	bne.n	8004f82 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2204      	movs	r2, #4
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	d100      	bne.n	8004faa <HAL_RCC_OscConfig+0x442>
 8004fa8:	e0af      	b.n	800510a <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004faa:	2323      	movs	r3, #35	; 0x23
 8004fac:	18fb      	adds	r3, r7, r3
 8004fae:	2200      	movs	r2, #0
 8004fb0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fb2:	4b89      	ldr	r3, [pc, #548]	; (80051d8 <HAL_RCC_OscConfig+0x670>)
 8004fb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fb6:	2380      	movs	r3, #128	; 0x80
 8004fb8:	055b      	lsls	r3, r3, #21
 8004fba:	4013      	ands	r3, r2
 8004fbc:	d10a      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fbe:	4b86      	ldr	r3, [pc, #536]	; (80051d8 <HAL_RCC_OscConfig+0x670>)
 8004fc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fc2:	4b85      	ldr	r3, [pc, #532]	; (80051d8 <HAL_RCC_OscConfig+0x670>)
 8004fc4:	2180      	movs	r1, #128	; 0x80
 8004fc6:	0549      	lsls	r1, r1, #21
 8004fc8:	430a      	orrs	r2, r1
 8004fca:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004fcc:	2323      	movs	r3, #35	; 0x23
 8004fce:	18fb      	adds	r3, r7, r3
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fd4:	4b83      	ldr	r3, [pc, #524]	; (80051e4 <HAL_RCC_OscConfig+0x67c>)
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	2380      	movs	r3, #128	; 0x80
 8004fda:	005b      	lsls	r3, r3, #1
 8004fdc:	4013      	ands	r3, r2
 8004fde:	d11a      	bne.n	8005016 <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fe0:	4b80      	ldr	r3, [pc, #512]	; (80051e4 <HAL_RCC_OscConfig+0x67c>)
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	4b7f      	ldr	r3, [pc, #508]	; (80051e4 <HAL_RCC_OscConfig+0x67c>)
 8004fe6:	2180      	movs	r1, #128	; 0x80
 8004fe8:	0049      	lsls	r1, r1, #1
 8004fea:	430a      	orrs	r2, r1
 8004fec:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fee:	f7fe fc81 	bl	80038f4 <HAL_GetTick>
 8004ff2:	0003      	movs	r3, r0
 8004ff4:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ff6:	e008      	b.n	800500a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ff8:	f7fe fc7c 	bl	80038f4 <HAL_GetTick>
 8004ffc:	0002      	movs	r2, r0
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	2b64      	cmp	r3, #100	; 0x64
 8005004:	d901      	bls.n	800500a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e174      	b.n	80052f4 <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800500a:	4b76      	ldr	r3, [pc, #472]	; (80051e4 <HAL_RCC_OscConfig+0x67c>)
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	2380      	movs	r3, #128	; 0x80
 8005010:	005b      	lsls	r3, r3, #1
 8005012:	4013      	ands	r3, r2
 8005014:	d0f0      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	689a      	ldr	r2, [r3, #8]
 800501a:	2380      	movs	r3, #128	; 0x80
 800501c:	005b      	lsls	r3, r3, #1
 800501e:	429a      	cmp	r2, r3
 8005020:	d107      	bne.n	8005032 <HAL_RCC_OscConfig+0x4ca>
 8005022:	4b6d      	ldr	r3, [pc, #436]	; (80051d8 <HAL_RCC_OscConfig+0x670>)
 8005024:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005026:	4b6c      	ldr	r3, [pc, #432]	; (80051d8 <HAL_RCC_OscConfig+0x670>)
 8005028:	2180      	movs	r1, #128	; 0x80
 800502a:	0049      	lsls	r1, r1, #1
 800502c:	430a      	orrs	r2, r1
 800502e:	651a      	str	r2, [r3, #80]	; 0x50
 8005030:	e031      	b.n	8005096 <HAL_RCC_OscConfig+0x52e>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d10c      	bne.n	8005054 <HAL_RCC_OscConfig+0x4ec>
 800503a:	4b67      	ldr	r3, [pc, #412]	; (80051d8 <HAL_RCC_OscConfig+0x670>)
 800503c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800503e:	4b66      	ldr	r3, [pc, #408]	; (80051d8 <HAL_RCC_OscConfig+0x670>)
 8005040:	4967      	ldr	r1, [pc, #412]	; (80051e0 <HAL_RCC_OscConfig+0x678>)
 8005042:	400a      	ands	r2, r1
 8005044:	651a      	str	r2, [r3, #80]	; 0x50
 8005046:	4b64      	ldr	r3, [pc, #400]	; (80051d8 <HAL_RCC_OscConfig+0x670>)
 8005048:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800504a:	4b63      	ldr	r3, [pc, #396]	; (80051d8 <HAL_RCC_OscConfig+0x670>)
 800504c:	4966      	ldr	r1, [pc, #408]	; (80051e8 <HAL_RCC_OscConfig+0x680>)
 800504e:	400a      	ands	r2, r1
 8005050:	651a      	str	r2, [r3, #80]	; 0x50
 8005052:	e020      	b.n	8005096 <HAL_RCC_OscConfig+0x52e>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	689a      	ldr	r2, [r3, #8]
 8005058:	23a0      	movs	r3, #160	; 0xa0
 800505a:	00db      	lsls	r3, r3, #3
 800505c:	429a      	cmp	r2, r3
 800505e:	d10e      	bne.n	800507e <HAL_RCC_OscConfig+0x516>
 8005060:	4b5d      	ldr	r3, [pc, #372]	; (80051d8 <HAL_RCC_OscConfig+0x670>)
 8005062:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005064:	4b5c      	ldr	r3, [pc, #368]	; (80051d8 <HAL_RCC_OscConfig+0x670>)
 8005066:	2180      	movs	r1, #128	; 0x80
 8005068:	00c9      	lsls	r1, r1, #3
 800506a:	430a      	orrs	r2, r1
 800506c:	651a      	str	r2, [r3, #80]	; 0x50
 800506e:	4b5a      	ldr	r3, [pc, #360]	; (80051d8 <HAL_RCC_OscConfig+0x670>)
 8005070:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005072:	4b59      	ldr	r3, [pc, #356]	; (80051d8 <HAL_RCC_OscConfig+0x670>)
 8005074:	2180      	movs	r1, #128	; 0x80
 8005076:	0049      	lsls	r1, r1, #1
 8005078:	430a      	orrs	r2, r1
 800507a:	651a      	str	r2, [r3, #80]	; 0x50
 800507c:	e00b      	b.n	8005096 <HAL_RCC_OscConfig+0x52e>
 800507e:	4b56      	ldr	r3, [pc, #344]	; (80051d8 <HAL_RCC_OscConfig+0x670>)
 8005080:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005082:	4b55      	ldr	r3, [pc, #340]	; (80051d8 <HAL_RCC_OscConfig+0x670>)
 8005084:	4956      	ldr	r1, [pc, #344]	; (80051e0 <HAL_RCC_OscConfig+0x678>)
 8005086:	400a      	ands	r2, r1
 8005088:	651a      	str	r2, [r3, #80]	; 0x50
 800508a:	4b53      	ldr	r3, [pc, #332]	; (80051d8 <HAL_RCC_OscConfig+0x670>)
 800508c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800508e:	4b52      	ldr	r3, [pc, #328]	; (80051d8 <HAL_RCC_OscConfig+0x670>)
 8005090:	4955      	ldr	r1, [pc, #340]	; (80051e8 <HAL_RCC_OscConfig+0x680>)
 8005092:	400a      	ands	r2, r1
 8005094:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d015      	beq.n	80050ca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800509e:	f7fe fc29 	bl	80038f4 <HAL_GetTick>
 80050a2:	0003      	movs	r3, r0
 80050a4:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050a6:	e009      	b.n	80050bc <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050a8:	f7fe fc24 	bl	80038f4 <HAL_GetTick>
 80050ac:	0002      	movs	r2, r0
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	4a4e      	ldr	r2, [pc, #312]	; (80051ec <HAL_RCC_OscConfig+0x684>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d901      	bls.n	80050bc <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e11b      	b.n	80052f4 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050bc:	4b46      	ldr	r3, [pc, #280]	; (80051d8 <HAL_RCC_OscConfig+0x670>)
 80050be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80050c0:	2380      	movs	r3, #128	; 0x80
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4013      	ands	r3, r2
 80050c6:	d0ef      	beq.n	80050a8 <HAL_RCC_OscConfig+0x540>
 80050c8:	e014      	b.n	80050f4 <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050ca:	f7fe fc13 	bl	80038f4 <HAL_GetTick>
 80050ce:	0003      	movs	r3, r0
 80050d0:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80050d2:	e009      	b.n	80050e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050d4:	f7fe fc0e 	bl	80038f4 <HAL_GetTick>
 80050d8:	0002      	movs	r2, r0
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	4a43      	ldr	r2, [pc, #268]	; (80051ec <HAL_RCC_OscConfig+0x684>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d901      	bls.n	80050e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e105      	b.n	80052f4 <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80050e8:	4b3b      	ldr	r3, [pc, #236]	; (80051d8 <HAL_RCC_OscConfig+0x670>)
 80050ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80050ec:	2380      	movs	r3, #128	; 0x80
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	4013      	ands	r3, r2
 80050f2:	d1ef      	bne.n	80050d4 <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80050f4:	2323      	movs	r3, #35	; 0x23
 80050f6:	18fb      	adds	r3, r7, r3
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d105      	bne.n	800510a <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050fe:	4b36      	ldr	r3, [pc, #216]	; (80051d8 <HAL_RCC_OscConfig+0x670>)
 8005100:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005102:	4b35      	ldr	r3, [pc, #212]	; (80051d8 <HAL_RCC_OscConfig+0x670>)
 8005104:	493a      	ldr	r1, [pc, #232]	; (80051f0 <HAL_RCC_OscConfig+0x688>)
 8005106:	400a      	ands	r2, r1
 8005108:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2220      	movs	r2, #32
 8005110:	4013      	ands	r3, r2
 8005112:	d049      	beq.n	80051a8 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	699b      	ldr	r3, [r3, #24]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d026      	beq.n	800516a <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800511c:	4b2e      	ldr	r3, [pc, #184]	; (80051d8 <HAL_RCC_OscConfig+0x670>)
 800511e:	689a      	ldr	r2, [r3, #8]
 8005120:	4b2d      	ldr	r3, [pc, #180]	; (80051d8 <HAL_RCC_OscConfig+0x670>)
 8005122:	2101      	movs	r1, #1
 8005124:	430a      	orrs	r2, r1
 8005126:	609a      	str	r2, [r3, #8]
 8005128:	4b2b      	ldr	r3, [pc, #172]	; (80051d8 <HAL_RCC_OscConfig+0x670>)
 800512a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800512c:	4b2a      	ldr	r3, [pc, #168]	; (80051d8 <HAL_RCC_OscConfig+0x670>)
 800512e:	2101      	movs	r1, #1
 8005130:	430a      	orrs	r2, r1
 8005132:	635a      	str	r2, [r3, #52]	; 0x34
 8005134:	4b2f      	ldr	r3, [pc, #188]	; (80051f4 <HAL_RCC_OscConfig+0x68c>)
 8005136:	6a1a      	ldr	r2, [r3, #32]
 8005138:	4b2e      	ldr	r3, [pc, #184]	; (80051f4 <HAL_RCC_OscConfig+0x68c>)
 800513a:	2180      	movs	r1, #128	; 0x80
 800513c:	0189      	lsls	r1, r1, #6
 800513e:	430a      	orrs	r2, r1
 8005140:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005142:	f7fe fbd7 	bl	80038f4 <HAL_GetTick>
 8005146:	0003      	movs	r3, r0
 8005148:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800514a:	e008      	b.n	800515e <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800514c:	f7fe fbd2 	bl	80038f4 <HAL_GetTick>
 8005150:	0002      	movs	r2, r0
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b02      	cmp	r3, #2
 8005158:	d901      	bls.n	800515e <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e0ca      	b.n	80052f4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800515e:	4b1e      	ldr	r3, [pc, #120]	; (80051d8 <HAL_RCC_OscConfig+0x670>)
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	2202      	movs	r2, #2
 8005164:	4013      	ands	r3, r2
 8005166:	d0f1      	beq.n	800514c <HAL_RCC_OscConfig+0x5e4>
 8005168:	e01e      	b.n	80051a8 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800516a:	4b1b      	ldr	r3, [pc, #108]	; (80051d8 <HAL_RCC_OscConfig+0x670>)
 800516c:	689a      	ldr	r2, [r3, #8]
 800516e:	4b1a      	ldr	r3, [pc, #104]	; (80051d8 <HAL_RCC_OscConfig+0x670>)
 8005170:	2101      	movs	r1, #1
 8005172:	438a      	bics	r2, r1
 8005174:	609a      	str	r2, [r3, #8]
 8005176:	4b1f      	ldr	r3, [pc, #124]	; (80051f4 <HAL_RCC_OscConfig+0x68c>)
 8005178:	6a1a      	ldr	r2, [r3, #32]
 800517a:	4b1e      	ldr	r3, [pc, #120]	; (80051f4 <HAL_RCC_OscConfig+0x68c>)
 800517c:	491e      	ldr	r1, [pc, #120]	; (80051f8 <HAL_RCC_OscConfig+0x690>)
 800517e:	400a      	ands	r2, r1
 8005180:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005182:	f7fe fbb7 	bl	80038f4 <HAL_GetTick>
 8005186:	0003      	movs	r3, r0
 8005188:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800518a:	e008      	b.n	800519e <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800518c:	f7fe fbb2 	bl	80038f4 <HAL_GetTick>
 8005190:	0002      	movs	r2, r0
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	2b02      	cmp	r3, #2
 8005198:	d901      	bls.n	800519e <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e0aa      	b.n	80052f4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800519e:	4b0e      	ldr	r3, [pc, #56]	; (80051d8 <HAL_RCC_OscConfig+0x670>)
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	2202      	movs	r2, #2
 80051a4:	4013      	ands	r3, r2
 80051a6:	d1f1      	bne.n	800518c <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d100      	bne.n	80051b2 <HAL_RCC_OscConfig+0x64a>
 80051b0:	e09f      	b.n	80052f2 <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	2b0c      	cmp	r3, #12
 80051b6:	d100      	bne.n	80051ba <HAL_RCC_OscConfig+0x652>
 80051b8:	e078      	b.n	80052ac <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d159      	bne.n	8005276 <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051c2:	4b05      	ldr	r3, [pc, #20]	; (80051d8 <HAL_RCC_OscConfig+0x670>)
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	4b04      	ldr	r3, [pc, #16]	; (80051d8 <HAL_RCC_OscConfig+0x670>)
 80051c8:	490c      	ldr	r1, [pc, #48]	; (80051fc <HAL_RCC_OscConfig+0x694>)
 80051ca:	400a      	ands	r2, r1
 80051cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ce:	f7fe fb91 	bl	80038f4 <HAL_GetTick>
 80051d2:	0003      	movs	r3, r0
 80051d4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80051d6:	e01c      	b.n	8005212 <HAL_RCC_OscConfig+0x6aa>
 80051d8:	40021000 	.word	0x40021000
 80051dc:	ffff1fff 	.word	0xffff1fff
 80051e0:	fffffeff 	.word	0xfffffeff
 80051e4:	40007000 	.word	0x40007000
 80051e8:	fffffbff 	.word	0xfffffbff
 80051ec:	00001388 	.word	0x00001388
 80051f0:	efffffff 	.word	0xefffffff
 80051f4:	40010000 	.word	0x40010000
 80051f8:	ffffdfff 	.word	0xffffdfff
 80051fc:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005200:	f7fe fb78 	bl	80038f4 <HAL_GetTick>
 8005204:	0002      	movs	r2, r0
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	2b02      	cmp	r3, #2
 800520c:	d901      	bls.n	8005212 <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e070      	b.n	80052f4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005212:	4b3a      	ldr	r3, [pc, #232]	; (80052fc <HAL_RCC_OscConfig+0x794>)
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	2380      	movs	r3, #128	; 0x80
 8005218:	049b      	lsls	r3, r3, #18
 800521a:	4013      	ands	r3, r2
 800521c:	d1f0      	bne.n	8005200 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800521e:	4b37      	ldr	r3, [pc, #220]	; (80052fc <HAL_RCC_OscConfig+0x794>)
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	4a37      	ldr	r2, [pc, #220]	; (8005300 <HAL_RCC_OscConfig+0x798>)
 8005224:	4013      	ands	r3, r2
 8005226:	0019      	movs	r1, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005230:	431a      	orrs	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005236:	431a      	orrs	r2, r3
 8005238:	4b30      	ldr	r3, [pc, #192]	; (80052fc <HAL_RCC_OscConfig+0x794>)
 800523a:	430a      	orrs	r2, r1
 800523c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800523e:	4b2f      	ldr	r3, [pc, #188]	; (80052fc <HAL_RCC_OscConfig+0x794>)
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	4b2e      	ldr	r3, [pc, #184]	; (80052fc <HAL_RCC_OscConfig+0x794>)
 8005244:	2180      	movs	r1, #128	; 0x80
 8005246:	0449      	lsls	r1, r1, #17
 8005248:	430a      	orrs	r2, r1
 800524a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800524c:	f7fe fb52 	bl	80038f4 <HAL_GetTick>
 8005250:	0003      	movs	r3, r0
 8005252:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005254:	e008      	b.n	8005268 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005256:	f7fe fb4d 	bl	80038f4 <HAL_GetTick>
 800525a:	0002      	movs	r2, r0
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	2b02      	cmp	r3, #2
 8005262:	d901      	bls.n	8005268 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e045      	b.n	80052f4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005268:	4b24      	ldr	r3, [pc, #144]	; (80052fc <HAL_RCC_OscConfig+0x794>)
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	2380      	movs	r3, #128	; 0x80
 800526e:	049b      	lsls	r3, r3, #18
 8005270:	4013      	ands	r3, r2
 8005272:	d0f0      	beq.n	8005256 <HAL_RCC_OscConfig+0x6ee>
 8005274:	e03d      	b.n	80052f2 <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005276:	4b21      	ldr	r3, [pc, #132]	; (80052fc <HAL_RCC_OscConfig+0x794>)
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	4b20      	ldr	r3, [pc, #128]	; (80052fc <HAL_RCC_OscConfig+0x794>)
 800527c:	4921      	ldr	r1, [pc, #132]	; (8005304 <HAL_RCC_OscConfig+0x79c>)
 800527e:	400a      	ands	r2, r1
 8005280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005282:	f7fe fb37 	bl	80038f4 <HAL_GetTick>
 8005286:	0003      	movs	r3, r0
 8005288:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800528a:	e008      	b.n	800529e <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800528c:	f7fe fb32 	bl	80038f4 <HAL_GetTick>
 8005290:	0002      	movs	r2, r0
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b02      	cmp	r3, #2
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e02a      	b.n	80052f4 <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800529e:	4b17      	ldr	r3, [pc, #92]	; (80052fc <HAL_RCC_OscConfig+0x794>)
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	2380      	movs	r3, #128	; 0x80
 80052a4:	049b      	lsls	r3, r3, #18
 80052a6:	4013      	ands	r3, r2
 80052a8:	d1f0      	bne.n	800528c <HAL_RCC_OscConfig+0x724>
 80052aa:	e022      	b.n	80052f2 <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d101      	bne.n	80052b8 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e01d      	b.n	80052f4 <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80052b8:	4b10      	ldr	r3, [pc, #64]	; (80052fc <HAL_RCC_OscConfig+0x794>)
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052be:	69ba      	ldr	r2, [r7, #24]
 80052c0:	2380      	movs	r3, #128	; 0x80
 80052c2:	025b      	lsls	r3, r3, #9
 80052c4:	401a      	ands	r2, r3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d10f      	bne.n	80052ee <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80052ce:	69ba      	ldr	r2, [r7, #24]
 80052d0:	23f0      	movs	r3, #240	; 0xf0
 80052d2:	039b      	lsls	r3, r3, #14
 80052d4:	401a      	ands	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052da:	429a      	cmp	r2, r3
 80052dc:	d107      	bne.n	80052ee <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80052de:	69ba      	ldr	r2, [r7, #24]
 80052e0:	23c0      	movs	r3, #192	; 0xc0
 80052e2:	041b      	lsls	r3, r3, #16
 80052e4:	401a      	ands	r2, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d001      	beq.n	80052f2 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e000      	b.n	80052f4 <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	0018      	movs	r0, r3
 80052f6:	46bd      	mov	sp, r7
 80052f8:	b00a      	add	sp, #40	; 0x28
 80052fa:	bdb0      	pop	{r4, r5, r7, pc}
 80052fc:	40021000 	.word	0x40021000
 8005300:	ff02ffff 	.word	0xff02ffff
 8005304:	feffffff 	.word	0xfeffffff

08005308 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005308:	b5b0      	push	{r4, r5, r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d101      	bne.n	800531c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e10d      	b.n	8005538 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800531c:	4b88      	ldr	r3, [pc, #544]	; (8005540 <HAL_RCC_ClockConfig+0x238>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2201      	movs	r2, #1
 8005322:	4013      	ands	r3, r2
 8005324:	683a      	ldr	r2, [r7, #0]
 8005326:	429a      	cmp	r2, r3
 8005328:	d911      	bls.n	800534e <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800532a:	4b85      	ldr	r3, [pc, #532]	; (8005540 <HAL_RCC_ClockConfig+0x238>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2201      	movs	r2, #1
 8005330:	4393      	bics	r3, r2
 8005332:	0019      	movs	r1, r3
 8005334:	4b82      	ldr	r3, [pc, #520]	; (8005540 <HAL_RCC_ClockConfig+0x238>)
 8005336:	683a      	ldr	r2, [r7, #0]
 8005338:	430a      	orrs	r2, r1
 800533a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800533c:	4b80      	ldr	r3, [pc, #512]	; (8005540 <HAL_RCC_ClockConfig+0x238>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2201      	movs	r2, #1
 8005342:	4013      	ands	r3, r2
 8005344:	683a      	ldr	r2, [r7, #0]
 8005346:	429a      	cmp	r2, r3
 8005348:	d001      	beq.n	800534e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e0f4      	b.n	8005538 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2202      	movs	r2, #2
 8005354:	4013      	ands	r3, r2
 8005356:	d009      	beq.n	800536c <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005358:	4b7a      	ldr	r3, [pc, #488]	; (8005544 <HAL_RCC_ClockConfig+0x23c>)
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	22f0      	movs	r2, #240	; 0xf0
 800535e:	4393      	bics	r3, r2
 8005360:	0019      	movs	r1, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	689a      	ldr	r2, [r3, #8]
 8005366:	4b77      	ldr	r3, [pc, #476]	; (8005544 <HAL_RCC_ClockConfig+0x23c>)
 8005368:	430a      	orrs	r2, r1
 800536a:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2201      	movs	r2, #1
 8005372:	4013      	ands	r3, r2
 8005374:	d100      	bne.n	8005378 <HAL_RCC_ClockConfig+0x70>
 8005376:	e089      	b.n	800548c <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	2b02      	cmp	r3, #2
 800537e:	d107      	bne.n	8005390 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005380:	4b70      	ldr	r3, [pc, #448]	; (8005544 <HAL_RCC_ClockConfig+0x23c>)
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	2380      	movs	r3, #128	; 0x80
 8005386:	029b      	lsls	r3, r3, #10
 8005388:	4013      	ands	r3, r2
 800538a:	d120      	bne.n	80053ce <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e0d3      	b.n	8005538 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	2b03      	cmp	r3, #3
 8005396:	d107      	bne.n	80053a8 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005398:	4b6a      	ldr	r3, [pc, #424]	; (8005544 <HAL_RCC_ClockConfig+0x23c>)
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	2380      	movs	r3, #128	; 0x80
 800539e:	049b      	lsls	r3, r3, #18
 80053a0:	4013      	ands	r3, r2
 80053a2:	d114      	bne.n	80053ce <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e0c7      	b.n	8005538 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d106      	bne.n	80053be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053b0:	4b64      	ldr	r3, [pc, #400]	; (8005544 <HAL_RCC_ClockConfig+0x23c>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2204      	movs	r2, #4
 80053b6:	4013      	ands	r3, r2
 80053b8:	d109      	bne.n	80053ce <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e0bc      	b.n	8005538 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80053be:	4b61      	ldr	r3, [pc, #388]	; (8005544 <HAL_RCC_ClockConfig+0x23c>)
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	2380      	movs	r3, #128	; 0x80
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	4013      	ands	r3, r2
 80053c8:	d101      	bne.n	80053ce <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e0b4      	b.n	8005538 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053ce:	4b5d      	ldr	r3, [pc, #372]	; (8005544 <HAL_RCC_ClockConfig+0x23c>)
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	2203      	movs	r2, #3
 80053d4:	4393      	bics	r3, r2
 80053d6:	0019      	movs	r1, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	685a      	ldr	r2, [r3, #4]
 80053dc:	4b59      	ldr	r3, [pc, #356]	; (8005544 <HAL_RCC_ClockConfig+0x23c>)
 80053de:	430a      	orrs	r2, r1
 80053e0:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053e2:	f7fe fa87 	bl	80038f4 <HAL_GetTick>
 80053e6:	0003      	movs	r3, r0
 80053e8:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d111      	bne.n	8005416 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80053f2:	e009      	b.n	8005408 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053f4:	f7fe fa7e 	bl	80038f4 <HAL_GetTick>
 80053f8:	0002      	movs	r2, r0
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	4a52      	ldr	r2, [pc, #328]	; (8005548 <HAL_RCC_ClockConfig+0x240>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d901      	bls.n	8005408 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e097      	b.n	8005538 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005408:	4b4e      	ldr	r3, [pc, #312]	; (8005544 <HAL_RCC_ClockConfig+0x23c>)
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	220c      	movs	r2, #12
 800540e:	4013      	ands	r3, r2
 8005410:	2b08      	cmp	r3, #8
 8005412:	d1ef      	bne.n	80053f4 <HAL_RCC_ClockConfig+0xec>
 8005414:	e03a      	b.n	800548c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	2b03      	cmp	r3, #3
 800541c:	d111      	bne.n	8005442 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800541e:	e009      	b.n	8005434 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005420:	f7fe fa68 	bl	80038f4 <HAL_GetTick>
 8005424:	0002      	movs	r2, r0
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	4a47      	ldr	r2, [pc, #284]	; (8005548 <HAL_RCC_ClockConfig+0x240>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d901      	bls.n	8005434 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	e081      	b.n	8005538 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005434:	4b43      	ldr	r3, [pc, #268]	; (8005544 <HAL_RCC_ClockConfig+0x23c>)
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	220c      	movs	r2, #12
 800543a:	4013      	ands	r3, r2
 800543c:	2b0c      	cmp	r3, #12
 800543e:	d1ef      	bne.n	8005420 <HAL_RCC_ClockConfig+0x118>
 8005440:	e024      	b.n	800548c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	2b01      	cmp	r3, #1
 8005448:	d11b      	bne.n	8005482 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800544a:	e009      	b.n	8005460 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800544c:	f7fe fa52 	bl	80038f4 <HAL_GetTick>
 8005450:	0002      	movs	r2, r0
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	4a3c      	ldr	r2, [pc, #240]	; (8005548 <HAL_RCC_ClockConfig+0x240>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d901      	bls.n	8005460 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e06b      	b.n	8005538 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005460:	4b38      	ldr	r3, [pc, #224]	; (8005544 <HAL_RCC_ClockConfig+0x23c>)
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	220c      	movs	r2, #12
 8005466:	4013      	ands	r3, r2
 8005468:	2b04      	cmp	r3, #4
 800546a:	d1ef      	bne.n	800544c <HAL_RCC_ClockConfig+0x144>
 800546c:	e00e      	b.n	800548c <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800546e:	f7fe fa41 	bl	80038f4 <HAL_GetTick>
 8005472:	0002      	movs	r2, r0
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	4a33      	ldr	r2, [pc, #204]	; (8005548 <HAL_RCC_ClockConfig+0x240>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d901      	bls.n	8005482 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e05a      	b.n	8005538 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005482:	4b30      	ldr	r3, [pc, #192]	; (8005544 <HAL_RCC_ClockConfig+0x23c>)
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	220c      	movs	r2, #12
 8005488:	4013      	ands	r3, r2
 800548a:	d1f0      	bne.n	800546e <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800548c:	4b2c      	ldr	r3, [pc, #176]	; (8005540 <HAL_RCC_ClockConfig+0x238>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2201      	movs	r2, #1
 8005492:	4013      	ands	r3, r2
 8005494:	683a      	ldr	r2, [r7, #0]
 8005496:	429a      	cmp	r2, r3
 8005498:	d211      	bcs.n	80054be <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800549a:	4b29      	ldr	r3, [pc, #164]	; (8005540 <HAL_RCC_ClockConfig+0x238>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2201      	movs	r2, #1
 80054a0:	4393      	bics	r3, r2
 80054a2:	0019      	movs	r1, r3
 80054a4:	4b26      	ldr	r3, [pc, #152]	; (8005540 <HAL_RCC_ClockConfig+0x238>)
 80054a6:	683a      	ldr	r2, [r7, #0]
 80054a8:	430a      	orrs	r2, r1
 80054aa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ac:	4b24      	ldr	r3, [pc, #144]	; (8005540 <HAL_RCC_ClockConfig+0x238>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2201      	movs	r2, #1
 80054b2:	4013      	ands	r3, r2
 80054b4:	683a      	ldr	r2, [r7, #0]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d001      	beq.n	80054be <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e03c      	b.n	8005538 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2204      	movs	r2, #4
 80054c4:	4013      	ands	r3, r2
 80054c6:	d009      	beq.n	80054dc <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054c8:	4b1e      	ldr	r3, [pc, #120]	; (8005544 <HAL_RCC_ClockConfig+0x23c>)
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	4a1f      	ldr	r2, [pc, #124]	; (800554c <HAL_RCC_ClockConfig+0x244>)
 80054ce:	4013      	ands	r3, r2
 80054d0:	0019      	movs	r1, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	68da      	ldr	r2, [r3, #12]
 80054d6:	4b1b      	ldr	r3, [pc, #108]	; (8005544 <HAL_RCC_ClockConfig+0x23c>)
 80054d8:	430a      	orrs	r2, r1
 80054da:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2208      	movs	r2, #8
 80054e2:	4013      	ands	r3, r2
 80054e4:	d00a      	beq.n	80054fc <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80054e6:	4b17      	ldr	r3, [pc, #92]	; (8005544 <HAL_RCC_ClockConfig+0x23c>)
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	4a19      	ldr	r2, [pc, #100]	; (8005550 <HAL_RCC_ClockConfig+0x248>)
 80054ec:	4013      	ands	r3, r2
 80054ee:	0019      	movs	r1, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	00da      	lsls	r2, r3, #3
 80054f6:	4b13      	ldr	r3, [pc, #76]	; (8005544 <HAL_RCC_ClockConfig+0x23c>)
 80054f8:	430a      	orrs	r2, r1
 80054fa:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80054fc:	f000 f82e 	bl	800555c <HAL_RCC_GetSysClockFreq>
 8005500:	0001      	movs	r1, r0
 8005502:	4b10      	ldr	r3, [pc, #64]	; (8005544 <HAL_RCC_ClockConfig+0x23c>)
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	091b      	lsrs	r3, r3, #4
 8005508:	220f      	movs	r2, #15
 800550a:	4013      	ands	r3, r2
 800550c:	4a11      	ldr	r2, [pc, #68]	; (8005554 <HAL_RCC_ClockConfig+0x24c>)
 800550e:	5cd3      	ldrb	r3, [r2, r3]
 8005510:	000a      	movs	r2, r1
 8005512:	40da      	lsrs	r2, r3
 8005514:	4b10      	ldr	r3, [pc, #64]	; (8005558 <HAL_RCC_ClockConfig+0x250>)
 8005516:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8005518:	250b      	movs	r5, #11
 800551a:	197c      	adds	r4, r7, r5
 800551c:	2000      	movs	r0, #0
 800551e:	f7fe f9b3 	bl	8003888 <HAL_InitTick>
 8005522:	0003      	movs	r3, r0
 8005524:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8005526:	197b      	adds	r3, r7, r5
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d003      	beq.n	8005536 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 800552e:	230b      	movs	r3, #11
 8005530:	18fb      	adds	r3, r7, r3
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	e000      	b.n	8005538 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	0018      	movs	r0, r3
 800553a:	46bd      	mov	sp, r7
 800553c:	b004      	add	sp, #16
 800553e:	bdb0      	pop	{r4, r5, r7, pc}
 8005540:	40022000 	.word	0x40022000
 8005544:	40021000 	.word	0x40021000
 8005548:	00001388 	.word	0x00001388
 800554c:	fffff8ff 	.word	0xfffff8ff
 8005550:	ffffc7ff 	.word	0xffffc7ff
 8005554:	08008804 	.word	0x08008804
 8005558:	20000054 	.word	0x20000054

0800555c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b086      	sub	sp, #24
 8005560:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8005562:	4b3b      	ldr	r3, [pc, #236]	; (8005650 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	220c      	movs	r2, #12
 800556c:	4013      	ands	r3, r2
 800556e:	2b08      	cmp	r3, #8
 8005570:	d00e      	beq.n	8005590 <HAL_RCC_GetSysClockFreq+0x34>
 8005572:	2b0c      	cmp	r3, #12
 8005574:	d00f      	beq.n	8005596 <HAL_RCC_GetSysClockFreq+0x3a>
 8005576:	2b04      	cmp	r3, #4
 8005578:	d157      	bne.n	800562a <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800557a:	4b35      	ldr	r3, [pc, #212]	; (8005650 <HAL_RCC_GetSysClockFreq+0xf4>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2210      	movs	r2, #16
 8005580:	4013      	ands	r3, r2
 8005582:	d002      	beq.n	800558a <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8005584:	4b33      	ldr	r3, [pc, #204]	; (8005654 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005586:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005588:	e05d      	b.n	8005646 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 800558a:	4b33      	ldr	r3, [pc, #204]	; (8005658 <HAL_RCC_GetSysClockFreq+0xfc>)
 800558c:	613b      	str	r3, [r7, #16]
      break;
 800558e:	e05a      	b.n	8005646 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005590:	4b32      	ldr	r3, [pc, #200]	; (800565c <HAL_RCC_GetSysClockFreq+0x100>)
 8005592:	613b      	str	r3, [r7, #16]
      break;
 8005594:	e057      	b.n	8005646 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	0c9b      	lsrs	r3, r3, #18
 800559a:	220f      	movs	r2, #15
 800559c:	4013      	ands	r3, r2
 800559e:	4a30      	ldr	r2, [pc, #192]	; (8005660 <HAL_RCC_GetSysClockFreq+0x104>)
 80055a0:	5cd3      	ldrb	r3, [r2, r3]
 80055a2:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	0d9b      	lsrs	r3, r3, #22
 80055a8:	2203      	movs	r2, #3
 80055aa:	4013      	ands	r3, r2
 80055ac:	3301      	adds	r3, #1
 80055ae:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80055b0:	4b27      	ldr	r3, [pc, #156]	; (8005650 <HAL_RCC_GetSysClockFreq+0xf4>)
 80055b2:	68da      	ldr	r2, [r3, #12]
 80055b4:	2380      	movs	r3, #128	; 0x80
 80055b6:	025b      	lsls	r3, r3, #9
 80055b8:	4013      	ands	r3, r2
 80055ba:	d00f      	beq.n	80055dc <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80055bc:	68b9      	ldr	r1, [r7, #8]
 80055be:	000a      	movs	r2, r1
 80055c0:	0152      	lsls	r2, r2, #5
 80055c2:	1a52      	subs	r2, r2, r1
 80055c4:	0193      	lsls	r3, r2, #6
 80055c6:	1a9b      	subs	r3, r3, r2
 80055c8:	00db      	lsls	r3, r3, #3
 80055ca:	185b      	adds	r3, r3, r1
 80055cc:	025b      	lsls	r3, r3, #9
 80055ce:	6879      	ldr	r1, [r7, #4]
 80055d0:	0018      	movs	r0, r3
 80055d2:	f7fa fd99 	bl	8000108 <__udivsi3>
 80055d6:	0003      	movs	r3, r0
 80055d8:	617b      	str	r3, [r7, #20]
 80055da:	e023      	b.n	8005624 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80055dc:	4b1c      	ldr	r3, [pc, #112]	; (8005650 <HAL_RCC_GetSysClockFreq+0xf4>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2210      	movs	r2, #16
 80055e2:	4013      	ands	r3, r2
 80055e4:	d00f      	beq.n	8005606 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80055e6:	68b9      	ldr	r1, [r7, #8]
 80055e8:	000a      	movs	r2, r1
 80055ea:	0152      	lsls	r2, r2, #5
 80055ec:	1a52      	subs	r2, r2, r1
 80055ee:	0193      	lsls	r3, r2, #6
 80055f0:	1a9b      	subs	r3, r3, r2
 80055f2:	00db      	lsls	r3, r3, #3
 80055f4:	185b      	adds	r3, r3, r1
 80055f6:	021b      	lsls	r3, r3, #8
 80055f8:	6879      	ldr	r1, [r7, #4]
 80055fa:	0018      	movs	r0, r3
 80055fc:	f7fa fd84 	bl	8000108 <__udivsi3>
 8005600:	0003      	movs	r3, r0
 8005602:	617b      	str	r3, [r7, #20]
 8005604:	e00e      	b.n	8005624 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8005606:	68b9      	ldr	r1, [r7, #8]
 8005608:	000a      	movs	r2, r1
 800560a:	0152      	lsls	r2, r2, #5
 800560c:	1a52      	subs	r2, r2, r1
 800560e:	0193      	lsls	r3, r2, #6
 8005610:	1a9b      	subs	r3, r3, r2
 8005612:	00db      	lsls	r3, r3, #3
 8005614:	185b      	adds	r3, r3, r1
 8005616:	029b      	lsls	r3, r3, #10
 8005618:	6879      	ldr	r1, [r7, #4]
 800561a:	0018      	movs	r0, r3
 800561c:	f7fa fd74 	bl	8000108 <__udivsi3>
 8005620:	0003      	movs	r3, r0
 8005622:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	613b      	str	r3, [r7, #16]
      break;
 8005628:	e00d      	b.n	8005646 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800562a:	4b09      	ldr	r3, [pc, #36]	; (8005650 <HAL_RCC_GetSysClockFreq+0xf4>)
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	0b5b      	lsrs	r3, r3, #13
 8005630:	2207      	movs	r2, #7
 8005632:	4013      	ands	r3, r2
 8005634:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	3301      	adds	r3, #1
 800563a:	2280      	movs	r2, #128	; 0x80
 800563c:	0212      	lsls	r2, r2, #8
 800563e:	409a      	lsls	r2, r3
 8005640:	0013      	movs	r3, r2
 8005642:	613b      	str	r3, [r7, #16]
      break;
 8005644:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005646:	693b      	ldr	r3, [r7, #16]
}
 8005648:	0018      	movs	r0, r3
 800564a:	46bd      	mov	sp, r7
 800564c:	b006      	add	sp, #24
 800564e:	bd80      	pop	{r7, pc}
 8005650:	40021000 	.word	0x40021000
 8005654:	003d0900 	.word	0x003d0900
 8005658:	00f42400 	.word	0x00f42400
 800565c:	007a1200 	.word	0x007a1200
 8005660:	08008814 	.word	0x08008814

08005664 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b086      	sub	sp, #24
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2220      	movs	r2, #32
 8005672:	4013      	ands	r3, r2
 8005674:	d106      	bne.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	2380      	movs	r3, #128	; 0x80
 800567c:	011b      	lsls	r3, r3, #4
 800567e:	4013      	ands	r3, r2
 8005680:	d100      	bne.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8005682:	e0dd      	b.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8005684:	2317      	movs	r3, #23
 8005686:	18fb      	adds	r3, r7, r3
 8005688:	2200      	movs	r2, #0
 800568a:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800568c:	4ba4      	ldr	r3, [pc, #656]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800568e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005690:	2380      	movs	r3, #128	; 0x80
 8005692:	055b      	lsls	r3, r3, #21
 8005694:	4013      	ands	r3, r2
 8005696:	d10a      	bne.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005698:	4ba1      	ldr	r3, [pc, #644]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800569a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800569c:	4ba0      	ldr	r3, [pc, #640]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800569e:	2180      	movs	r1, #128	; 0x80
 80056a0:	0549      	lsls	r1, r1, #21
 80056a2:	430a      	orrs	r2, r1
 80056a4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80056a6:	2317      	movs	r3, #23
 80056a8:	18fb      	adds	r3, r7, r3
 80056aa:	2201      	movs	r2, #1
 80056ac:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056ae:	4b9d      	ldr	r3, [pc, #628]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	2380      	movs	r3, #128	; 0x80
 80056b4:	005b      	lsls	r3, r3, #1
 80056b6:	4013      	ands	r3, r2
 80056b8:	d11a      	bne.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056ba:	4b9a      	ldr	r3, [pc, #616]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	4b99      	ldr	r3, [pc, #612]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80056c0:	2180      	movs	r1, #128	; 0x80
 80056c2:	0049      	lsls	r1, r1, #1
 80056c4:	430a      	orrs	r2, r1
 80056c6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056c8:	f7fe f914 	bl	80038f4 <HAL_GetTick>
 80056cc:	0003      	movs	r3, r0
 80056ce:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056d0:	e008      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056d2:	f7fe f90f 	bl	80038f4 <HAL_GetTick>
 80056d6:	0002      	movs	r2, r0
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	2b64      	cmp	r3, #100	; 0x64
 80056de:	d901      	bls.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e118      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056e4:	4b8f      	ldr	r3, [pc, #572]	; (8005924 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	2380      	movs	r3, #128	; 0x80
 80056ea:	005b      	lsls	r3, r3, #1
 80056ec:	4013      	ands	r3, r2
 80056ee:	d0f0      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80056f0:	4b8b      	ldr	r3, [pc, #556]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	23c0      	movs	r3, #192	; 0xc0
 80056f6:	039b      	lsls	r3, r3, #14
 80056f8:	4013      	ands	r3, r2
 80056fa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	685a      	ldr	r2, [r3, #4]
 8005700:	23c0      	movs	r3, #192	; 0xc0
 8005702:	039b      	lsls	r3, r3, #14
 8005704:	4013      	ands	r3, r2
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	429a      	cmp	r2, r3
 800570a:	d107      	bne.n	800571c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	689a      	ldr	r2, [r3, #8]
 8005710:	23c0      	movs	r3, #192	; 0xc0
 8005712:	039b      	lsls	r3, r3, #14
 8005714:	4013      	ands	r3, r2
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	429a      	cmp	r2, r3
 800571a:	d013      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685a      	ldr	r2, [r3, #4]
 8005720:	23c0      	movs	r3, #192	; 0xc0
 8005722:	029b      	lsls	r3, r3, #10
 8005724:	401a      	ands	r2, r3
 8005726:	23c0      	movs	r3, #192	; 0xc0
 8005728:	029b      	lsls	r3, r3, #10
 800572a:	429a      	cmp	r2, r3
 800572c:	d10a      	bne.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800572e:	4b7c      	ldr	r3, [pc, #496]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	2380      	movs	r3, #128	; 0x80
 8005734:	029b      	lsls	r3, r3, #10
 8005736:	401a      	ands	r2, r3
 8005738:	2380      	movs	r3, #128	; 0x80
 800573a:	029b      	lsls	r3, r3, #10
 800573c:	429a      	cmp	r2, r3
 800573e:	d101      	bne.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e0e8      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005744:	4b76      	ldr	r3, [pc, #472]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005746:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005748:	23c0      	movs	r3, #192	; 0xc0
 800574a:	029b      	lsls	r3, r3, #10
 800574c:	4013      	ands	r3, r2
 800574e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d049      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685a      	ldr	r2, [r3, #4]
 800575a:	23c0      	movs	r3, #192	; 0xc0
 800575c:	029b      	lsls	r3, r3, #10
 800575e:	4013      	ands	r3, r2
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	429a      	cmp	r2, r3
 8005764:	d004      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2220      	movs	r2, #32
 800576c:	4013      	ands	r3, r2
 800576e:	d10d      	bne.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	689a      	ldr	r2, [r3, #8]
 8005774:	23c0      	movs	r3, #192	; 0xc0
 8005776:	029b      	lsls	r3, r3, #10
 8005778:	4013      	ands	r3, r2
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	429a      	cmp	r2, r3
 800577e:	d034      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	2380      	movs	r3, #128	; 0x80
 8005786:	011b      	lsls	r3, r3, #4
 8005788:	4013      	ands	r3, r2
 800578a:	d02e      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800578c:	4b64      	ldr	r3, [pc, #400]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800578e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005790:	4a65      	ldr	r2, [pc, #404]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005792:	4013      	ands	r3, r2
 8005794:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005796:	4b62      	ldr	r3, [pc, #392]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005798:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800579a:	4b61      	ldr	r3, [pc, #388]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800579c:	2180      	movs	r1, #128	; 0x80
 800579e:	0309      	lsls	r1, r1, #12
 80057a0:	430a      	orrs	r2, r1
 80057a2:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80057a4:	4b5e      	ldr	r3, [pc, #376]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80057a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80057a8:	4b5d      	ldr	r3, [pc, #372]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80057aa:	4960      	ldr	r1, [pc, #384]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80057ac:	400a      	ands	r2, r1
 80057ae:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80057b0:	4b5b      	ldr	r3, [pc, #364]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	2380      	movs	r3, #128	; 0x80
 80057ba:	005b      	lsls	r3, r3, #1
 80057bc:	4013      	ands	r3, r2
 80057be:	d014      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057c0:	f7fe f898 	bl	80038f4 <HAL_GetTick>
 80057c4:	0003      	movs	r3, r0
 80057c6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80057c8:	e009      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057ca:	f7fe f893 	bl	80038f4 <HAL_GetTick>
 80057ce:	0002      	movs	r2, r0
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	4a56      	ldr	r2, [pc, #344]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d901      	bls.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e09b      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80057de:	4b50      	ldr	r3, [pc, #320]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80057e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80057e2:	2380      	movs	r3, #128	; 0x80
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	4013      	ands	r3, r2
 80057e8:	d0ef      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685a      	ldr	r2, [r3, #4]
 80057ee:	23c0      	movs	r3, #192	; 0xc0
 80057f0:	029b      	lsls	r3, r3, #10
 80057f2:	401a      	ands	r2, r3
 80057f4:	23c0      	movs	r3, #192	; 0xc0
 80057f6:	029b      	lsls	r3, r3, #10
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d10c      	bne.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80057fc:	4b48      	ldr	r3, [pc, #288]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a4c      	ldr	r2, [pc, #304]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8005802:	4013      	ands	r3, r2
 8005804:	0019      	movs	r1, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	685a      	ldr	r2, [r3, #4]
 800580a:	23c0      	movs	r3, #192	; 0xc0
 800580c:	039b      	lsls	r3, r3, #14
 800580e:	401a      	ands	r2, r3
 8005810:	4b43      	ldr	r3, [pc, #268]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005812:	430a      	orrs	r2, r1
 8005814:	601a      	str	r2, [r3, #0]
 8005816:	4b42      	ldr	r3, [pc, #264]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005818:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685a      	ldr	r2, [r3, #4]
 800581e:	23c0      	movs	r3, #192	; 0xc0
 8005820:	029b      	lsls	r3, r3, #10
 8005822:	401a      	ands	r2, r3
 8005824:	4b3e      	ldr	r3, [pc, #248]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005826:	430a      	orrs	r2, r1
 8005828:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800582a:	2317      	movs	r3, #23
 800582c:	18fb      	adds	r3, r7, r3
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d105      	bne.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005834:	4b3a      	ldr	r3, [pc, #232]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005836:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005838:	4b39      	ldr	r3, [pc, #228]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800583a:	493f      	ldr	r1, [pc, #252]	; (8005938 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800583c:	400a      	ands	r2, r1
 800583e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2201      	movs	r2, #1
 8005846:	4013      	ands	r3, r2
 8005848:	d009      	beq.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800584a:	4b35      	ldr	r3, [pc, #212]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800584c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800584e:	2203      	movs	r2, #3
 8005850:	4393      	bics	r3, r2
 8005852:	0019      	movs	r1, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	68da      	ldr	r2, [r3, #12]
 8005858:	4b31      	ldr	r3, [pc, #196]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800585a:	430a      	orrs	r2, r1
 800585c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2202      	movs	r2, #2
 8005864:	4013      	ands	r3, r2
 8005866:	d009      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005868:	4b2d      	ldr	r3, [pc, #180]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800586a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800586c:	220c      	movs	r2, #12
 800586e:	4393      	bics	r3, r2
 8005870:	0019      	movs	r1, r3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	691a      	ldr	r2, [r3, #16]
 8005876:	4b2a      	ldr	r3, [pc, #168]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005878:	430a      	orrs	r2, r1
 800587a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2204      	movs	r2, #4
 8005882:	4013      	ands	r3, r2
 8005884:	d009      	beq.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005886:	4b26      	ldr	r3, [pc, #152]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800588a:	4a2c      	ldr	r2, [pc, #176]	; (800593c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800588c:	4013      	ands	r3, r2
 800588e:	0019      	movs	r1, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	695a      	ldr	r2, [r3, #20]
 8005894:	4b22      	ldr	r3, [pc, #136]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005896:	430a      	orrs	r2, r1
 8005898:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2208      	movs	r2, #8
 80058a0:	4013      	ands	r3, r2
 80058a2:	d009      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80058a4:	4b1e      	ldr	r3, [pc, #120]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80058a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058a8:	4a25      	ldr	r2, [pc, #148]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80058aa:	4013      	ands	r3, r2
 80058ac:	0019      	movs	r1, r3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	699a      	ldr	r2, [r3, #24]
 80058b2:	4b1b      	ldr	r3, [pc, #108]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80058b4:	430a      	orrs	r2, r1
 80058b6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	2380      	movs	r3, #128	; 0x80
 80058be:	005b      	lsls	r3, r3, #1
 80058c0:	4013      	ands	r3, r2
 80058c2:	d009      	beq.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80058c4:	4b16      	ldr	r3, [pc, #88]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80058c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058c8:	4a17      	ldr	r2, [pc, #92]	; (8005928 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80058ca:	4013      	ands	r3, r2
 80058cc:	0019      	movs	r1, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	69da      	ldr	r2, [r3, #28]
 80058d2:	4b13      	ldr	r3, [pc, #76]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80058d4:	430a      	orrs	r2, r1
 80058d6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2240      	movs	r2, #64	; 0x40
 80058de:	4013      	ands	r3, r2
 80058e0:	d009      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80058e2:	4b0f      	ldr	r3, [pc, #60]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80058e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058e6:	4a17      	ldr	r2, [pc, #92]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80058e8:	4013      	ands	r3, r2
 80058ea:	0019      	movs	r1, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058f0:	4b0b      	ldr	r3, [pc, #44]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80058f2:	430a      	orrs	r2, r1
 80058f4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2280      	movs	r2, #128	; 0x80
 80058fc:	4013      	ands	r3, r2
 80058fe:	d009      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005900:	4b07      	ldr	r3, [pc, #28]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005904:	4a10      	ldr	r2, [pc, #64]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005906:	4013      	ands	r3, r2
 8005908:	0019      	movs	r1, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a1a      	ldr	r2, [r3, #32]
 800590e:	4b04      	ldr	r3, [pc, #16]	; (8005920 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005910:	430a      	orrs	r2, r1
 8005912:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	0018      	movs	r0, r3
 8005918:	46bd      	mov	sp, r7
 800591a:	b006      	add	sp, #24
 800591c:	bd80      	pop	{r7, pc}
 800591e:	46c0      	nop			; (mov r8, r8)
 8005920:	40021000 	.word	0x40021000
 8005924:	40007000 	.word	0x40007000
 8005928:	fffcffff 	.word	0xfffcffff
 800592c:	fff7ffff 	.word	0xfff7ffff
 8005930:	00001388 	.word	0x00001388
 8005934:	ffcfffff 	.word	0xffcfffff
 8005938:	efffffff 	.word	0xefffffff
 800593c:	fffff3ff 	.word	0xfffff3ff
 8005940:	ffffcfff 	.word	0xffffcfff
 8005944:	fbffffff 	.word	0xfbffffff
 8005948:	fff3ffff 	.word	0xfff3ffff

0800594c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d101      	bne.n	800595e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e08e      	b.n	8005a7c <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2221      	movs	r2, #33	; 0x21
 8005962:	5c9b      	ldrb	r3, [r3, r2]
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b00      	cmp	r3, #0
 8005968:	d107      	bne.n	800597a <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2220      	movs	r2, #32
 800596e:	2100      	movs	r1, #0
 8005970:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	0018      	movs	r0, r3
 8005976:	f7fd fcf7 	bl	8003368 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2221      	movs	r2, #33	; 0x21
 800597e:	2102      	movs	r1, #2
 8005980:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	22ca      	movs	r2, #202	; 0xca
 8005988:	625a      	str	r2, [r3, #36]	; 0x24
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2253      	movs	r2, #83	; 0x53
 8005990:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	0018      	movs	r0, r3
 8005996:	f000 fcf4 	bl	8006382 <RTC_EnterInitMode>
 800599a:	1e03      	subs	r3, r0, #0
 800599c:	d009      	beq.n	80059b2 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	22ff      	movs	r2, #255	; 0xff
 80059a4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2221      	movs	r2, #33	; 0x21
 80059aa:	2104      	movs	r1, #4
 80059ac:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e064      	b.n	8005a7c <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	689a      	ldr	r2, [r3, #8]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4931      	ldr	r1, [pc, #196]	; (8005a84 <HAL_RTC_Init+0x138>)
 80059be:	400a      	ands	r2, r1
 80059c0:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	6899      	ldr	r1, [r3, #8]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685a      	ldr	r2, [r3, #4]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	431a      	orrs	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	699b      	ldr	r3, [r3, #24]
 80059d6:	431a      	orrs	r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	430a      	orrs	r2, r1
 80059de:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	68d2      	ldr	r2, [r2, #12]
 80059e8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	6919      	ldr	r1, [r3, #16]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	041a      	lsls	r2, r3, #16
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	430a      	orrs	r2, r1
 80059fc:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68da      	ldr	r2, [r3, #12]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2180      	movs	r1, #128	; 0x80
 8005a0a:	438a      	bics	r2, r1
 8005a0c:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2103      	movs	r1, #3
 8005a1a:	438a      	bics	r2, r1
 8005a1c:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	69da      	ldr	r2, [r3, #28]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	695b      	ldr	r3, [r3, #20]
 8005a2c:	431a      	orrs	r2, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	430a      	orrs	r2, r1
 8005a34:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	2220      	movs	r2, #32
 8005a3e:	4013      	ands	r3, r2
 8005a40:	d113      	bne.n	8005a6a <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	0018      	movs	r0, r3
 8005a46:	f000 fc75 	bl	8006334 <HAL_RTC_WaitForSynchro>
 8005a4a:	1e03      	subs	r3, r0, #0
 8005a4c:	d00d      	beq.n	8005a6a <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	22ff      	movs	r2, #255	; 0xff
 8005a54:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2221      	movs	r2, #33	; 0x21
 8005a5a:	2104      	movs	r1, #4
 8005a5c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2220      	movs	r2, #32
 8005a62:	2100      	movs	r1, #0
 8005a64:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e008      	b.n	8005a7c <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	22ff      	movs	r2, #255	; 0xff
 8005a70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2221      	movs	r2, #33	; 0x21
 8005a76:	2101      	movs	r1, #1
 8005a78:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
  }
}
 8005a7c:	0018      	movs	r0, r3
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	b002      	add	sp, #8
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	ff8fffbf 	.word	0xff8fffbf

08005a88 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005a88:	b590      	push	{r4, r7, lr}
 8005a8a:	b087      	sub	sp, #28
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2220      	movs	r2, #32
 8005a98:	5c9b      	ldrb	r3, [r3, r2]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d101      	bne.n	8005aa2 <HAL_RTC_SetTime+0x1a>
 8005a9e:	2302      	movs	r3, #2
 8005aa0:	e0ad      	b.n	8005bfe <HAL_RTC_SetTime+0x176>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2220      	movs	r2, #32
 8005aa6:	2101      	movs	r1, #1
 8005aa8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2221      	movs	r2, #33	; 0x21
 8005aae:	2102      	movs	r1, #2
 8005ab0:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d125      	bne.n	8005b04 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	2240      	movs	r2, #64	; 0x40
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	d102      	bne.n	8005aca <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	0018      	movs	r0, r3
 8005ad0:	f000 fc81 	bl	80063d6 <RTC_ByteToBcd2>
 8005ad4:	0003      	movs	r3, r0
 8005ad6:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	785b      	ldrb	r3, [r3, #1]
 8005adc:	0018      	movs	r0, r3
 8005ade:	f000 fc7a 	bl	80063d6 <RTC_ByteToBcd2>
 8005ae2:	0003      	movs	r3, r0
 8005ae4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005ae6:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	789b      	ldrb	r3, [r3, #2]
 8005aec:	0018      	movs	r0, r3
 8005aee:	f000 fc72 	bl	80063d6 <RTC_ByteToBcd2>
 8005af2:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005af4:	0022      	movs	r2, r4
 8005af6:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	78db      	ldrb	r3, [r3, #3]
 8005afc:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005afe:	4313      	orrs	r3, r2
 8005b00:	617b      	str	r3, [r7, #20]
 8005b02:	e017      	b.n	8005b34 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	2240      	movs	r2, #64	; 0x40
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	d102      	bne.n	8005b16 <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	2200      	movs	r2, #0
 8005b14:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	785b      	ldrb	r3, [r3, #1]
 8005b20:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005b22:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005b24:	68ba      	ldr	r2, [r7, #8]
 8005b26:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005b28:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	78db      	ldrb	r3, [r3, #3]
 8005b2e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005b30:	4313      	orrs	r3, r2
 8005b32:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	22ca      	movs	r2, #202	; 0xca
 8005b3a:	625a      	str	r2, [r3, #36]	; 0x24
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2253      	movs	r2, #83	; 0x53
 8005b42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	0018      	movs	r0, r3
 8005b48:	f000 fc1b 	bl	8006382 <RTC_EnterInitMode>
 8005b4c:	1e03      	subs	r3, r0, #0
 8005b4e:	d00d      	beq.n	8005b6c <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	22ff      	movs	r2, #255	; 0xff
 8005b56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2221      	movs	r2, #33	; 0x21
 8005b5c:	2104      	movs	r1, #4
 8005b5e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2220      	movs	r2, #32
 8005b64:	2100      	movs	r1, #0
 8005b66:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e048      	b.n	8005bfe <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	697a      	ldr	r2, [r7, #20]
 8005b72:	4925      	ldr	r1, [pc, #148]	; (8005c08 <HAL_RTC_SetTime+0x180>)
 8005b74:	400a      	ands	r2, r1
 8005b76:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	689a      	ldr	r2, [r3, #8]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4922      	ldr	r1, [pc, #136]	; (8005c0c <HAL_RTC_SetTime+0x184>)
 8005b84:	400a      	ands	r2, r1
 8005b86:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	6899      	ldr	r1, [r3, #8]
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	68da      	ldr	r2, [r3, #12]
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	431a      	orrs	r2, r3
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	430a      	orrs	r2, r1
 8005b9e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68da      	ldr	r2, [r3, #12]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2180      	movs	r1, #128	; 0x80
 8005bac:	438a      	bics	r2, r1
 8005bae:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	2220      	movs	r2, #32
 8005bb8:	4013      	ands	r3, r2
 8005bba:	d113      	bne.n	8005be4 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	0018      	movs	r0, r3
 8005bc0:	f000 fbb8 	bl	8006334 <HAL_RTC_WaitForSynchro>
 8005bc4:	1e03      	subs	r3, r0, #0
 8005bc6:	d00d      	beq.n	8005be4 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	22ff      	movs	r2, #255	; 0xff
 8005bce:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2221      	movs	r2, #33	; 0x21
 8005bd4:	2104      	movs	r1, #4
 8005bd6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2220      	movs	r2, #32
 8005bdc:	2100      	movs	r1, #0
 8005bde:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	e00c      	b.n	8005bfe <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	22ff      	movs	r2, #255	; 0xff
 8005bea:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2221      	movs	r2, #33	; 0x21
 8005bf0:	2101      	movs	r1, #1
 8005bf2:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2220      	movs	r2, #32
 8005bf8:	2100      	movs	r1, #0
 8005bfa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
  }
}
 8005bfe:	0018      	movs	r0, r3
 8005c00:	46bd      	mov	sp, r7
 8005c02:	b007      	add	sp, #28
 8005c04:	bd90      	pop	{r4, r7, pc}
 8005c06:	46c0      	nop			; (mov r8, r8)
 8005c08:	007f7f7f 	.word	0x007f7f7f
 8005c0c:	fffbffff 	.word	0xfffbffff

08005c10 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b086      	sub	sp, #24
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	045b      	lsls	r3, r3, #17
 8005c2e:	0c5a      	lsrs	r2, r3, #17
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a22      	ldr	r2, [pc, #136]	; (8005cc4 <HAL_RTC_GetTime+0xb4>)
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	0c1b      	lsrs	r3, r3, #16
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	223f      	movs	r2, #63	; 0x3f
 8005c48:	4013      	ands	r3, r2
 8005c4a:	b2da      	uxtb	r2, r3
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	0a1b      	lsrs	r3, r3, #8
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	227f      	movs	r2, #127	; 0x7f
 8005c58:	4013      	ands	r3, r2
 8005c5a:	b2da      	uxtb	r2, r3
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	227f      	movs	r2, #127	; 0x7f
 8005c66:	4013      	ands	r3, r2
 8005c68:	b2da      	uxtb	r2, r3
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	0c1b      	lsrs	r3, r3, #16
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	2240      	movs	r2, #64	; 0x40
 8005c76:	4013      	ands	r3, r2
 8005c78:	b2da      	uxtb	r2, r3
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d11a      	bne.n	8005cba <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	0018      	movs	r0, r3
 8005c8a:	f000 fbcd 	bl	8006428 <RTC_Bcd2ToByte>
 8005c8e:	0003      	movs	r3, r0
 8005c90:	001a      	movs	r2, r3
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	785b      	ldrb	r3, [r3, #1]
 8005c9a:	0018      	movs	r0, r3
 8005c9c:	f000 fbc4 	bl	8006428 <RTC_Bcd2ToByte>
 8005ca0:	0003      	movs	r3, r0
 8005ca2:	001a      	movs	r2, r3
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	789b      	ldrb	r3, [r3, #2]
 8005cac:	0018      	movs	r0, r3
 8005cae:	f000 fbbb 	bl	8006428 <RTC_Bcd2ToByte>
 8005cb2:	0003      	movs	r3, r0
 8005cb4:	001a      	movs	r2, r3
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	0018      	movs	r0, r3
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	b006      	add	sp, #24
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	007f7f7f 	.word	0x007f7f7f

08005cc8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005cc8:	b590      	push	{r4, r7, lr}
 8005cca:	b087      	sub	sp, #28
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2220      	movs	r2, #32
 8005cd8:	5c9b      	ldrb	r3, [r3, r2]
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d101      	bne.n	8005ce2 <HAL_RTC_SetDate+0x1a>
 8005cde:	2302      	movs	r3, #2
 8005ce0:	e099      	b.n	8005e16 <HAL_RTC_SetDate+0x14e>
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2220      	movs	r2, #32
 8005ce6:	2101      	movs	r1, #1
 8005ce8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2221      	movs	r2, #33	; 0x21
 8005cee:	2102      	movs	r1, #2
 8005cf0:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d10e      	bne.n	8005d16 <HAL_RTC_SetDate+0x4e>
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	785b      	ldrb	r3, [r3, #1]
 8005cfc:	001a      	movs	r2, r3
 8005cfe:	2310      	movs	r3, #16
 8005d00:	4013      	ands	r3, r2
 8005d02:	d008      	beq.n	8005d16 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	785b      	ldrb	r3, [r3, #1]
 8005d08:	2210      	movs	r2, #16
 8005d0a:	4393      	bics	r3, r2
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	330a      	adds	r3, #10
 8005d10:	b2da      	uxtb	r2, r3
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d11c      	bne.n	8005d56 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	78db      	ldrb	r3, [r3, #3]
 8005d20:	0018      	movs	r0, r3
 8005d22:	f000 fb58 	bl	80063d6 <RTC_ByteToBcd2>
 8005d26:	0003      	movs	r3, r0
 8005d28:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	785b      	ldrb	r3, [r3, #1]
 8005d2e:	0018      	movs	r0, r3
 8005d30:	f000 fb51 	bl	80063d6 <RTC_ByteToBcd2>
 8005d34:	0003      	movs	r3, r0
 8005d36:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005d38:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	789b      	ldrb	r3, [r3, #2]
 8005d3e:	0018      	movs	r0, r3
 8005d40:	f000 fb49 	bl	80063d6 <RTC_ByteToBcd2>
 8005d44:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005d46:	0022      	movs	r2, r4
 8005d48:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005d50:	4313      	orrs	r3, r2
 8005d52:	617b      	str	r3, [r7, #20]
 8005d54:	e00e      	b.n	8005d74 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	78db      	ldrb	r3, [r3, #3]
 8005d5a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	785b      	ldrb	r3, [r3, #1]
 8005d60:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005d62:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8005d68:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005d70:	4313      	orrs	r3, r2
 8005d72:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	22ca      	movs	r2, #202	; 0xca
 8005d7a:	625a      	str	r2, [r3, #36]	; 0x24
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2253      	movs	r2, #83	; 0x53
 8005d82:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	0018      	movs	r0, r3
 8005d88:	f000 fafb 	bl	8006382 <RTC_EnterInitMode>
 8005d8c:	1e03      	subs	r3, r0, #0
 8005d8e:	d00d      	beq.n	8005dac <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	22ff      	movs	r2, #255	; 0xff
 8005d96:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2221      	movs	r2, #33	; 0x21
 8005d9c:	2104      	movs	r1, #4
 8005d9e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2220      	movs	r2, #32
 8005da4:	2100      	movs	r1, #0
 8005da6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	e034      	b.n	8005e16 <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	697a      	ldr	r2, [r7, #20]
 8005db2:	491b      	ldr	r1, [pc, #108]	; (8005e20 <HAL_RTC_SetDate+0x158>)
 8005db4:	400a      	ands	r2, r1
 8005db6:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68da      	ldr	r2, [r3, #12]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	2180      	movs	r1, #128	; 0x80
 8005dc4:	438a      	bics	r2, r1
 8005dc6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	2220      	movs	r2, #32
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	d113      	bne.n	8005dfc <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	0018      	movs	r0, r3
 8005dd8:	f000 faac 	bl	8006334 <HAL_RTC_WaitForSynchro>
 8005ddc:	1e03      	subs	r3, r0, #0
 8005dde:	d00d      	beq.n	8005dfc <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	22ff      	movs	r2, #255	; 0xff
 8005de6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2221      	movs	r2, #33	; 0x21
 8005dec:	2104      	movs	r1, #4
 8005dee:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2220      	movs	r2, #32
 8005df4:	2100      	movs	r1, #0
 8005df6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e00c      	b.n	8005e16 <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	22ff      	movs	r2, #255	; 0xff
 8005e02:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2221      	movs	r2, #33	; 0x21
 8005e08:	2101      	movs	r1, #1
 8005e0a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2220      	movs	r2, #32
 8005e10:	2100      	movs	r1, #0
 8005e12:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005e14:	2300      	movs	r3, #0
  }
}
 8005e16:	0018      	movs	r0, r3
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	b007      	add	sp, #28
 8005e1c:	bd90      	pop	{r4, r7, pc}
 8005e1e:	46c0      	nop			; (mov r8, r8)
 8005e20:	00ffff3f 	.word	0x00ffff3f

08005e24 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b086      	sub	sp, #24
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	4a21      	ldr	r2, [pc, #132]	; (8005ebc <HAL_RTC_GetDate+0x98>)
 8005e38:	4013      	ands	r3, r2
 8005e3a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	0c1b      	lsrs	r3, r3, #16
 8005e40:	b2da      	uxtb	r2, r3
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	0a1b      	lsrs	r3, r3, #8
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	221f      	movs	r2, #31
 8005e4e:	4013      	ands	r3, r2
 8005e50:	b2da      	uxtb	r2, r3
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	223f      	movs	r2, #63	; 0x3f
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	b2da      	uxtb	r2, r3
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	0b5b      	lsrs	r3, r3, #13
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	2207      	movs	r2, #7
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	b2da      	uxtb	r2, r3
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d11a      	bne.n	8005eb0 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	78db      	ldrb	r3, [r3, #3]
 8005e7e:	0018      	movs	r0, r3
 8005e80:	f000 fad2 	bl	8006428 <RTC_Bcd2ToByte>
 8005e84:	0003      	movs	r3, r0
 8005e86:	001a      	movs	r2, r3
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	785b      	ldrb	r3, [r3, #1]
 8005e90:	0018      	movs	r0, r3
 8005e92:	f000 fac9 	bl	8006428 <RTC_Bcd2ToByte>
 8005e96:	0003      	movs	r3, r0
 8005e98:	001a      	movs	r2, r3
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	789b      	ldrb	r3, [r3, #2]
 8005ea2:	0018      	movs	r0, r3
 8005ea4:	f000 fac0 	bl	8006428 <RTC_Bcd2ToByte>
 8005ea8:	0003      	movs	r3, r0
 8005eaa:	001a      	movs	r2, r3
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	0018      	movs	r0, r3
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	b006      	add	sp, #24
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	46c0      	nop			; (mov r8, r8)
 8005ebc:	00ffff3f 	.word	0x00ffff3f

08005ec0 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005ec0:	b590      	push	{r4, r7, lr}
 8005ec2:	b089      	sub	sp, #36	; 0x24
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2220      	movs	r2, #32
 8005ed0:	5c9b      	ldrb	r3, [r3, r2]
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d101      	bne.n	8005eda <HAL_RTC_SetAlarm_IT+0x1a>
 8005ed6:	2302      	movs	r3, #2
 8005ed8:	e130      	b.n	800613c <HAL_RTC_SetAlarm_IT+0x27c>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2220      	movs	r2, #32
 8005ede:	2101      	movs	r1, #1
 8005ee0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2221      	movs	r2, #33	; 0x21
 8005ee6:	2102      	movs	r1, #2
 8005ee8:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d136      	bne.n	8005f5e <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	2240      	movs	r2, #64	; 0x40
 8005ef8:	4013      	ands	r3, r2
 8005efa:	d102      	bne.n	8005f02 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	2200      	movs	r2, #0
 8005f00:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	0018      	movs	r0, r3
 8005f08:	f000 fa65 	bl	80063d6 <RTC_ByteToBcd2>
 8005f0c:	0003      	movs	r3, r0
 8005f0e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	785b      	ldrb	r3, [r3, #1]
 8005f14:	0018      	movs	r0, r3
 8005f16:	f000 fa5e 	bl	80063d6 <RTC_ByteToBcd2>
 8005f1a:	0003      	movs	r3, r0
 8005f1c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005f1e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	789b      	ldrb	r3, [r3, #2]
 8005f24:	0018      	movs	r0, r3
 8005f26:	f000 fa56 	bl	80063d6 <RTC_ByteToBcd2>
 8005f2a:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005f2c:	0022      	movs	r2, r4
 8005f2e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	78db      	ldrb	r3, [r3, #3]
 8005f34:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005f36:	431a      	orrs	r2, r3
 8005f38:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	2220      	movs	r2, #32
 8005f3e:	5c9b      	ldrb	r3, [r3, r2]
 8005f40:	0018      	movs	r0, r3
 8005f42:	f000 fa48 	bl	80063d6 <RTC_ByteToBcd2>
 8005f46:	0003      	movs	r3, r0
 8005f48:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005f4a:	0022      	movs	r2, r4
 8005f4c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005f52:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	61fb      	str	r3, [r7, #28]
 8005f5c:	e022      	b.n	8005fa4 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	2240      	movs	r2, #64	; 0x40
 8005f66:	4013      	ands	r3, r2
 8005f68:	d102      	bne.n	8005f70 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	785b      	ldrb	r3, [r3, #1]
 8005f7a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005f7c:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005f7e:	68ba      	ldr	r2, [r7, #8]
 8005f80:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005f82:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	78db      	ldrb	r3, [r3, #3]
 8005f88:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005f8a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	2120      	movs	r1, #32
 8005f90:	5c5b      	ldrb	r3, [r3, r1]
 8005f92:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005f94:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005f9a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	685a      	ldr	r2, [r3, #4]
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	699b      	ldr	r3, [r3, #24]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	22ca      	movs	r2, #202	; 0xca
 8005fb6:	625a      	str	r2, [r3, #36]	; 0x24
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2253      	movs	r2, #83	; 0x53
 8005fbe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fc4:	2380      	movs	r3, #128	; 0x80
 8005fc6:	005b      	lsls	r3, r3, #1
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d14e      	bne.n	800606a <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	689a      	ldr	r2, [r3, #8]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	495b      	ldr	r1, [pc, #364]	; (8006144 <HAL_RTC_SetAlarm_IT+0x284>)
 8005fd8:	400a      	ands	r2, r1
 8005fda:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	22ff      	movs	r2, #255	; 0xff
 8005fe4:	401a      	ands	r2, r3
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4957      	ldr	r1, [pc, #348]	; (8006148 <HAL_RTC_SetAlarm_IT+0x288>)
 8005fec:	430a      	orrs	r2, r1
 8005fee:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005ff0:	f7fd fc80 	bl	80038f4 <HAL_GetTick>
 8005ff4:	0003      	movs	r3, r0
 8005ff6:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005ff8:	e016      	b.n	8006028 <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005ffa:	f7fd fc7b 	bl	80038f4 <HAL_GetTick>
 8005ffe:	0002      	movs	r2, r0
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	1ad2      	subs	r2, r2, r3
 8006004:	23fa      	movs	r3, #250	; 0xfa
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	429a      	cmp	r2, r3
 800600a:	d90d      	bls.n	8006028 <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	22ff      	movs	r2, #255	; 0xff
 8006012:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2221      	movs	r2, #33	; 0x21
 8006018:	2103      	movs	r1, #3
 800601a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2220      	movs	r2, #32
 8006020:	2100      	movs	r1, #0
 8006022:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e089      	b.n	800613c <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	2201      	movs	r2, #1
 8006030:	4013      	ands	r3, r2
 8006032:	d0e2      	beq.n	8005ffa <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	69fa      	ldr	r2, [r7, #28]
 800603a:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	69ba      	ldr	r2, [r7, #24]
 8006042:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	689a      	ldr	r2, [r3, #8]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2180      	movs	r1, #128	; 0x80
 8006050:	0049      	lsls	r1, r1, #1
 8006052:	430a      	orrs	r2, r1
 8006054:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	689a      	ldr	r2, [r3, #8]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2180      	movs	r1, #128	; 0x80
 8006062:	0149      	lsls	r1, r1, #5
 8006064:	430a      	orrs	r2, r1
 8006066:	609a      	str	r2, [r3, #8]
 8006068:	e04d      	b.n	8006106 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	689a      	ldr	r2, [r3, #8]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4935      	ldr	r1, [pc, #212]	; (800614c <HAL_RTC_SetAlarm_IT+0x28c>)
 8006076:	400a      	ands	r2, r1
 8006078:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	22ff      	movs	r2, #255	; 0xff
 8006082:	401a      	ands	r2, r3
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4931      	ldr	r1, [pc, #196]	; (8006150 <HAL_RTC_SetAlarm_IT+0x290>)
 800608a:	430a      	orrs	r2, r1
 800608c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800608e:	f7fd fc31 	bl	80038f4 <HAL_GetTick>
 8006092:	0003      	movs	r3, r0
 8006094:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006096:	e016      	b.n	80060c6 <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006098:	f7fd fc2c 	bl	80038f4 <HAL_GetTick>
 800609c:	0002      	movs	r2, r0
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	1ad2      	subs	r2, r2, r3
 80060a2:	23fa      	movs	r3, #250	; 0xfa
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d90d      	bls.n	80060c6 <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	22ff      	movs	r2, #255	; 0xff
 80060b0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2221      	movs	r2, #33	; 0x21
 80060b6:	2103      	movs	r1, #3
 80060b8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2220      	movs	r2, #32
 80060be:	2100      	movs	r1, #0
 80060c0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	e03a      	b.n	800613c <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	2202      	movs	r2, #2
 80060ce:	4013      	ands	r3, r2
 80060d0:	d0e2      	beq.n	8006098 <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	69fa      	ldr	r2, [r7, #28]
 80060d8:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	69ba      	ldr	r2, [r7, #24]
 80060e0:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	689a      	ldr	r2, [r3, #8]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	2180      	movs	r1, #128	; 0x80
 80060ee:	0089      	lsls	r1, r1, #2
 80060f0:	430a      	orrs	r2, r1
 80060f2:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	689a      	ldr	r2, [r3, #8]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2180      	movs	r1, #128	; 0x80
 8006100:	0189      	lsls	r1, r1, #6
 8006102:	430a      	orrs	r2, r1
 8006104:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006106:	4b13      	ldr	r3, [pc, #76]	; (8006154 <HAL_RTC_SetAlarm_IT+0x294>)
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	4b12      	ldr	r3, [pc, #72]	; (8006154 <HAL_RTC_SetAlarm_IT+0x294>)
 800610c:	2180      	movs	r1, #128	; 0x80
 800610e:	0289      	lsls	r1, r1, #10
 8006110:	430a      	orrs	r2, r1
 8006112:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8006114:	4b0f      	ldr	r3, [pc, #60]	; (8006154 <HAL_RTC_SetAlarm_IT+0x294>)
 8006116:	689a      	ldr	r2, [r3, #8]
 8006118:	4b0e      	ldr	r3, [pc, #56]	; (8006154 <HAL_RTC_SetAlarm_IT+0x294>)
 800611a:	2180      	movs	r1, #128	; 0x80
 800611c:	0289      	lsls	r1, r1, #10
 800611e:	430a      	orrs	r2, r1
 8006120:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	22ff      	movs	r2, #255	; 0xff
 8006128:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2221      	movs	r2, #33	; 0x21
 800612e:	2101      	movs	r1, #1
 8006130:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2220      	movs	r2, #32
 8006136:	2100      	movs	r1, #0
 8006138:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	0018      	movs	r0, r3
 800613e:	46bd      	mov	sp, r7
 8006140:	b009      	add	sp, #36	; 0x24
 8006142:	bd90      	pop	{r4, r7, pc}
 8006144:	fffffeff 	.word	0xfffffeff
 8006148:	fffffe7f 	.word	0xfffffe7f
 800614c:	fffffdff 	.word	0xfffffdff
 8006150:	fffffd7f 	.word	0xfffffd7f
 8006154:	40010400 	.word	0x40010400

08006158 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2220      	movs	r2, #32
 8006166:	5c9b      	ldrb	r3, [r3, r2]
 8006168:	2b01      	cmp	r3, #1
 800616a:	d101      	bne.n	8006170 <HAL_RTC_DeactivateAlarm+0x18>
 800616c:	2302      	movs	r3, #2
 800616e:	e086      	b.n	800627e <HAL_RTC_DeactivateAlarm+0x126>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2220      	movs	r2, #32
 8006174:	2101      	movs	r1, #1
 8006176:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2221      	movs	r2, #33	; 0x21
 800617c:	2102      	movs	r1, #2
 800617e:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	22ca      	movs	r2, #202	; 0xca
 8006186:	625a      	str	r2, [r3, #36]	; 0x24
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2253      	movs	r2, #83	; 0x53
 800618e:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8006190:	683a      	ldr	r2, [r7, #0]
 8006192:	2380      	movs	r3, #128	; 0x80
 8006194:	005b      	lsls	r3, r3, #1
 8006196:	429a      	cmp	r2, r3
 8006198:	d132      	bne.n	8006200 <HAL_RTC_DeactivateAlarm+0xa8>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	689a      	ldr	r2, [r3, #8]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4938      	ldr	r1, [pc, #224]	; (8006288 <HAL_RTC_DeactivateAlarm+0x130>)
 80061a6:	400a      	ands	r2, r1
 80061a8:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	689a      	ldr	r2, [r3, #8]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4935      	ldr	r1, [pc, #212]	; (800628c <HAL_RTC_DeactivateAlarm+0x134>)
 80061b6:	400a      	ands	r2, r1
 80061b8:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 80061ba:	f7fd fb9b 	bl	80038f4 <HAL_GetTick>
 80061be:	0003      	movs	r3, r0
 80061c0:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80061c2:	e016      	b.n	80061f2 <HAL_RTC_DeactivateAlarm+0x9a>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80061c4:	f7fd fb96 	bl	80038f4 <HAL_GetTick>
 80061c8:	0002      	movs	r2, r0
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	1ad2      	subs	r2, r2, r3
 80061ce:	23fa      	movs	r3, #250	; 0xfa
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d90d      	bls.n	80061f2 <HAL_RTC_DeactivateAlarm+0x9a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	22ff      	movs	r2, #255	; 0xff
 80061dc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2221      	movs	r2, #33	; 0x21
 80061e2:	2103      	movs	r1, #3
 80061e4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2220      	movs	r2, #32
 80061ea:	2100      	movs	r1, #0
 80061ec:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80061ee:	2303      	movs	r3, #3
 80061f0:	e045      	b.n	800627e <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	2201      	movs	r2, #1
 80061fa:	4013      	ands	r3, r2
 80061fc:	d0e2      	beq.n	80061c4 <HAL_RTC_DeactivateAlarm+0x6c>
 80061fe:	e031      	b.n	8006264 <HAL_RTC_DeactivateAlarm+0x10c>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	689a      	ldr	r2, [r3, #8]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4921      	ldr	r1, [pc, #132]	; (8006290 <HAL_RTC_DeactivateAlarm+0x138>)
 800620c:	400a      	ands	r2, r1
 800620e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	689a      	ldr	r2, [r3, #8]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	491e      	ldr	r1, [pc, #120]	; (8006294 <HAL_RTC_DeactivateAlarm+0x13c>)
 800621c:	400a      	ands	r2, r1
 800621e:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8006220:	f7fd fb68 	bl	80038f4 <HAL_GetTick>
 8006224:	0003      	movs	r3, r0
 8006226:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006228:	e016      	b.n	8006258 <HAL_RTC_DeactivateAlarm+0x100>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800622a:	f7fd fb63 	bl	80038f4 <HAL_GetTick>
 800622e:	0002      	movs	r2, r0
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	1ad2      	subs	r2, r2, r3
 8006234:	23fa      	movs	r3, #250	; 0xfa
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	429a      	cmp	r2, r3
 800623a:	d90d      	bls.n	8006258 <HAL_RTC_DeactivateAlarm+0x100>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	22ff      	movs	r2, #255	; 0xff
 8006242:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2221      	movs	r2, #33	; 0x21
 8006248:	2103      	movs	r1, #3
 800624a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2220      	movs	r2, #32
 8006250:	2100      	movs	r1, #0
 8006252:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006254:	2303      	movs	r3, #3
 8006256:	e012      	b.n	800627e <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	2202      	movs	r2, #2
 8006260:	4013      	ands	r3, r2
 8006262:	d0e2      	beq.n	800622a <HAL_RTC_DeactivateAlarm+0xd2>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	22ff      	movs	r2, #255	; 0xff
 800626a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2221      	movs	r2, #33	; 0x21
 8006270:	2101      	movs	r1, #1
 8006272:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2220      	movs	r2, #32
 8006278:	2100      	movs	r1, #0
 800627a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	0018      	movs	r0, r3
 8006280:	46bd      	mov	sp, r7
 8006282:	b004      	add	sp, #16
 8006284:	bd80      	pop	{r7, pc}
 8006286:	46c0      	nop			; (mov r8, r8)
 8006288:	fffffeff 	.word	0xfffffeff
 800628c:	ffffefff 	.word	0xffffefff
 8006290:	fffffdff 	.word	0xfffffdff
 8006294:	ffffdfff 	.word	0xffffdfff

08006298 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	689a      	ldr	r2, [r3, #8]
 80062a6:	2380      	movs	r3, #128	; 0x80
 80062a8:	015b      	lsls	r3, r3, #5
 80062aa:	4013      	ands	r3, r2
 80062ac:	d014      	beq.n	80062d8 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68da      	ldr	r2, [r3, #12]
 80062b4:	2380      	movs	r3, #128	; 0x80
 80062b6:	005b      	lsls	r3, r3, #1
 80062b8:	4013      	ands	r3, r2
 80062ba:	d00d      	beq.n	80062d8 <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	0018      	movs	r0, r3
 80062c0:	f7fb fade 	bl	8001880 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	22ff      	movs	r2, #255	; 0xff
 80062cc:	401a      	ands	r2, r3
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4915      	ldr	r1, [pc, #84]	; (8006328 <HAL_RTC_AlarmIRQHandler+0x90>)
 80062d4:	430a      	orrs	r2, r1
 80062d6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	689a      	ldr	r2, [r3, #8]
 80062de:	2380      	movs	r3, #128	; 0x80
 80062e0:	019b      	lsls	r3, r3, #6
 80062e2:	4013      	ands	r3, r2
 80062e4:	d014      	beq.n	8006310 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68da      	ldr	r2, [r3, #12]
 80062ec:	2380      	movs	r3, #128	; 0x80
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	4013      	ands	r3, r2
 80062f2:	d00d      	beq.n	8006310 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	0018      	movs	r0, r3
 80062f8:	f7fb fae2 	bl	80018c0 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	22ff      	movs	r2, #255	; 0xff
 8006304:	401a      	ands	r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4908      	ldr	r1, [pc, #32]	; (800632c <HAL_RTC_AlarmIRQHandler+0x94>)
 800630c:	430a      	orrs	r2, r1
 800630e:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006310:	4b07      	ldr	r3, [pc, #28]	; (8006330 <HAL_RTC_AlarmIRQHandler+0x98>)
 8006312:	2280      	movs	r2, #128	; 0x80
 8006314:	0292      	lsls	r2, r2, #10
 8006316:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2221      	movs	r2, #33	; 0x21
 800631c:	2101      	movs	r1, #1
 800631e:	5499      	strb	r1, [r3, r2]
}
 8006320:	46c0      	nop			; (mov r8, r8)
 8006322:	46bd      	mov	sp, r7
 8006324:	b002      	add	sp, #8
 8006326:	bd80      	pop	{r7, pc}
 8006328:	fffffe7f 	.word	0xfffffe7f
 800632c:	fffffd7f 	.word	0xfffffd7f
 8006330:	40010400 	.word	0x40010400

08006334 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	68da      	ldr	r2, [r3, #12]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	21a0      	movs	r1, #160	; 0xa0
 8006348:	438a      	bics	r2, r1
 800634a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800634c:	f7fd fad2 	bl	80038f4 <HAL_GetTick>
 8006350:	0003      	movs	r3, r0
 8006352:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006354:	e00a      	b.n	800636c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006356:	f7fd facd 	bl	80038f4 <HAL_GetTick>
 800635a:	0002      	movs	r2, r0
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	1ad2      	subs	r2, r2, r3
 8006360:	23fa      	movs	r3, #250	; 0xfa
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	429a      	cmp	r2, r3
 8006366:	d901      	bls.n	800636c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006368:	2303      	movs	r3, #3
 800636a:	e006      	b.n	800637a <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	2220      	movs	r2, #32
 8006374:	4013      	ands	r3, r2
 8006376:	d0ee      	beq.n	8006356 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	0018      	movs	r0, r3
 800637c:	46bd      	mov	sp, r7
 800637e:	b004      	add	sp, #16
 8006380:	bd80      	pop	{r7, pc}

08006382 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006382:	b580      	push	{r7, lr}
 8006384:	b084      	sub	sp, #16
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	2240      	movs	r2, #64	; 0x40
 8006392:	4013      	ands	r3, r2
 8006394:	d11a      	bne.n	80063cc <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2201      	movs	r2, #1
 800639c:	4252      	negs	r2, r2
 800639e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80063a0:	f7fd faa8 	bl	80038f4 <HAL_GetTick>
 80063a4:	0003      	movs	r3, r0
 80063a6:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80063a8:	e00a      	b.n	80063c0 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80063aa:	f7fd faa3 	bl	80038f4 <HAL_GetTick>
 80063ae:	0002      	movs	r2, r0
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	1ad2      	subs	r2, r2, r3
 80063b4:	23fa      	movs	r3, #250	; 0xfa
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d901      	bls.n	80063c0 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	e006      	b.n	80063ce <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	2240      	movs	r2, #64	; 0x40
 80063c8:	4013      	ands	r3, r2
 80063ca:	d0ee      	beq.n	80063aa <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	0018      	movs	r0, r3
 80063d0:	46bd      	mov	sp, r7
 80063d2:	b004      	add	sp, #16
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b084      	sub	sp, #16
 80063da:	af00      	add	r7, sp, #0
 80063dc:	0002      	movs	r2, r0
 80063de:	1dfb      	adds	r3, r7, #7
 80063e0:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80063e2:	2300      	movs	r3, #0
 80063e4:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80063e6:	230b      	movs	r3, #11
 80063e8:	18fb      	adds	r3, r7, r3
 80063ea:	1dfa      	adds	r2, r7, #7
 80063ec:	7812      	ldrb	r2, [r2, #0]
 80063ee:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 80063f0:	e008      	b.n	8006404 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	3301      	adds	r3, #1
 80063f6:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80063f8:	220b      	movs	r2, #11
 80063fa:	18bb      	adds	r3, r7, r2
 80063fc:	18ba      	adds	r2, r7, r2
 80063fe:	7812      	ldrb	r2, [r2, #0]
 8006400:	3a0a      	subs	r2, #10
 8006402:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8006404:	230b      	movs	r3, #11
 8006406:	18fb      	adds	r3, r7, r3
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	2b09      	cmp	r3, #9
 800640c:	d8f1      	bhi.n	80063f2 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	b2db      	uxtb	r3, r3
 8006412:	011b      	lsls	r3, r3, #4
 8006414:	b2da      	uxtb	r2, r3
 8006416:	230b      	movs	r3, #11
 8006418:	18fb      	adds	r3, r7, r3
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	4313      	orrs	r3, r2
 800641e:	b2db      	uxtb	r3, r3
}
 8006420:	0018      	movs	r0, r3
 8006422:	46bd      	mov	sp, r7
 8006424:	b004      	add	sp, #16
 8006426:	bd80      	pop	{r7, pc}

08006428 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	0002      	movs	r2, r0
 8006430:	1dfb      	adds	r3, r7, #7
 8006432:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8006434:	1dfb      	adds	r3, r7, #7
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	091b      	lsrs	r3, r3, #4
 800643a:	b2db      	uxtb	r3, r3
 800643c:	001a      	movs	r2, r3
 800643e:	0013      	movs	r3, r2
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	189b      	adds	r3, r3, r2
 8006444:	005b      	lsls	r3, r3, #1
 8006446:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	b2da      	uxtb	r2, r3
 800644c:	1dfb      	adds	r3, r7, #7
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	210f      	movs	r1, #15
 8006452:	400b      	ands	r3, r1
 8006454:	b2db      	uxtb	r3, r3
 8006456:	18d3      	adds	r3, r2, r3
 8006458:	b2db      	uxtb	r3, r3
}
 800645a:	0018      	movs	r0, r3
 800645c:	46bd      	mov	sp, r7
 800645e:	b004      	add	sp, #16
 8006460:	bd80      	pop	{r7, pc}
	...

08006464 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d101      	bne.n	8006476 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e059      	b.n	800652a <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2251      	movs	r2, #81	; 0x51
 8006480:	5c9b      	ldrb	r3, [r3, r2]
 8006482:	b2db      	uxtb	r3, r3
 8006484:	2b00      	cmp	r3, #0
 8006486:	d107      	bne.n	8006498 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2250      	movs	r2, #80	; 0x50
 800648c:	2100      	movs	r1, #0
 800648e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	0018      	movs	r0, r3
 8006494:	f7fc ff88 	bl	80033a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2251      	movs	r2, #81	; 0x51
 800649c:	2102      	movs	r1, #2
 800649e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2140      	movs	r1, #64	; 0x40
 80064ac:	438a      	bics	r2, r1
 80064ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685a      	ldr	r2, [r3, #4]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	431a      	orrs	r2, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	431a      	orrs	r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	431a      	orrs	r2, r3
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	695b      	ldr	r3, [r3, #20]
 80064ca:	431a      	orrs	r2, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6999      	ldr	r1, [r3, #24]
 80064d0:	2380      	movs	r3, #128	; 0x80
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	400b      	ands	r3, r1
 80064d6:	431a      	orrs	r2, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	69db      	ldr	r3, [r3, #28]
 80064dc:	431a      	orrs	r2, r3
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a1b      	ldr	r3, [r3, #32]
 80064e2:	431a      	orrs	r2, r3
 80064e4:	0011      	movs	r1, r2
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	430a      	orrs	r2, r1
 80064f0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	0c1b      	lsrs	r3, r3, #16
 80064f8:	2204      	movs	r2, #4
 80064fa:	4013      	ands	r3, r2
 80064fc:	0019      	movs	r1, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	430a      	orrs	r2, r1
 8006508:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	69da      	ldr	r2, [r3, #28]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4907      	ldr	r1, [pc, #28]	; (8006534 <HAL_SPI_Init+0xd0>)
 8006516:	400a      	ands	r2, r1
 8006518:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2251      	movs	r2, #81	; 0x51
 8006524:	2101      	movs	r1, #1
 8006526:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006528:	2300      	movs	r3, #0
}
 800652a:	0018      	movs	r0, r3
 800652c:	46bd      	mov	sp, r7
 800652e:	b002      	add	sp, #8
 8006530:	bd80      	pop	{r7, pc}
 8006532:	46c0      	nop			; (mov r8, r8)
 8006534:	fffff7ff 	.word	0xfffff7ff

08006538 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b088      	sub	sp, #32
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	603b      	str	r3, [r7, #0]
 8006544:	1dbb      	adds	r3, r7, #6
 8006546:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006548:	231f      	movs	r3, #31
 800654a:	18fb      	adds	r3, r7, r3
 800654c:	2200      	movs	r2, #0
 800654e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2250      	movs	r2, #80	; 0x50
 8006554:	5c9b      	ldrb	r3, [r3, r2]
 8006556:	2b01      	cmp	r3, #1
 8006558:	d101      	bne.n	800655e <HAL_SPI_Transmit+0x26>
 800655a:	2302      	movs	r3, #2
 800655c:	e136      	b.n	80067cc <HAL_SPI_Transmit+0x294>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2250      	movs	r2, #80	; 0x50
 8006562:	2101      	movs	r1, #1
 8006564:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006566:	f7fd f9c5 	bl	80038f4 <HAL_GetTick>
 800656a:	0003      	movs	r3, r0
 800656c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800656e:	2316      	movs	r3, #22
 8006570:	18fb      	adds	r3, r7, r3
 8006572:	1dba      	adds	r2, r7, #6
 8006574:	8812      	ldrh	r2, [r2, #0]
 8006576:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2251      	movs	r2, #81	; 0x51
 800657c:	5c9b      	ldrb	r3, [r3, r2]
 800657e:	b2db      	uxtb	r3, r3
 8006580:	2b01      	cmp	r3, #1
 8006582:	d004      	beq.n	800658e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8006584:	231f      	movs	r3, #31
 8006586:	18fb      	adds	r3, r7, r3
 8006588:	2202      	movs	r2, #2
 800658a:	701a      	strb	r2, [r3, #0]
    goto error;
 800658c:	e113      	b.n	80067b6 <HAL_SPI_Transmit+0x27e>
  }

  if ((pData == NULL) || (Size == 0U))
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d003      	beq.n	800659c <HAL_SPI_Transmit+0x64>
 8006594:	1dbb      	adds	r3, r7, #6
 8006596:	881b      	ldrh	r3, [r3, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d104      	bne.n	80065a6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800659c:	231f      	movs	r3, #31
 800659e:	18fb      	adds	r3, r7, r3
 80065a0:	2201      	movs	r2, #1
 80065a2:	701a      	strb	r2, [r3, #0]
    goto error;
 80065a4:	e107      	b.n	80067b6 <HAL_SPI_Transmit+0x27e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2251      	movs	r2, #81	; 0x51
 80065aa:	2103      	movs	r1, #3
 80065ac:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	68ba      	ldr	r2, [r7, #8]
 80065b8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	1dba      	adds	r2, r7, #6
 80065be:	8812      	ldrh	r2, [r2, #0]
 80065c0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	1dba      	adds	r2, r7, #6
 80065c6:	8812      	ldrh	r2, [r2, #0]
 80065c8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2200      	movs	r2, #0
 80065d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2200      	movs	r2, #0
 80065da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2200      	movs	r2, #0
 80065e0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2200      	movs	r2, #0
 80065e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	689a      	ldr	r2, [r3, #8]
 80065ec:	2380      	movs	r3, #128	; 0x80
 80065ee:	021b      	lsls	r3, r3, #8
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d108      	bne.n	8006606 <HAL_SPI_Transmit+0xce>
  {
    SPI_1LINE_TX(hspi);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2180      	movs	r1, #128	; 0x80
 8006600:	01c9      	lsls	r1, r1, #7
 8006602:	430a      	orrs	r2, r1
 8006604:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2240      	movs	r2, #64	; 0x40
 800660e:	4013      	ands	r3, r2
 8006610:	2b40      	cmp	r3, #64	; 0x40
 8006612:	d007      	beq.n	8006624 <HAL_SPI_Transmit+0xec>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2140      	movs	r1, #64	; 0x40
 8006620:	430a      	orrs	r2, r1
 8006622:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	68da      	ldr	r2, [r3, #12]
 8006628:	2380      	movs	r3, #128	; 0x80
 800662a:	011b      	lsls	r3, r3, #4
 800662c:	429a      	cmp	r2, r3
 800662e:	d14e      	bne.n	80066ce <HAL_SPI_Transmit+0x196>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d004      	beq.n	8006642 <HAL_SPI_Transmit+0x10a>
 8006638:	2316      	movs	r3, #22
 800663a:	18fb      	adds	r3, r7, r3
 800663c:	881b      	ldrh	r3, [r3, #0]
 800663e:	2b01      	cmp	r3, #1
 8006640:	d13f      	bne.n	80066c2 <HAL_SPI_Transmit+0x18a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006646:	881a      	ldrh	r2, [r3, #0]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006652:	1c9a      	adds	r2, r3, #2
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800665c:	b29b      	uxth	r3, r3
 800665e:	3b01      	subs	r3, #1
 8006660:	b29a      	uxth	r2, r3
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006666:	e02c      	b.n	80066c2 <HAL_SPI_Transmit+0x18a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	2202      	movs	r2, #2
 8006670:	4013      	ands	r3, r2
 8006672:	2b02      	cmp	r3, #2
 8006674:	d112      	bne.n	800669c <HAL_SPI_Transmit+0x164>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800667a:	881a      	ldrh	r2, [r3, #0]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006686:	1c9a      	adds	r2, r3, #2
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006690:	b29b      	uxth	r3, r3
 8006692:	3b01      	subs	r3, #1
 8006694:	b29a      	uxth	r2, r3
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	86da      	strh	r2, [r3, #54]	; 0x36
 800669a:	e012      	b.n	80066c2 <HAL_SPI_Transmit+0x18a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800669c:	f7fd f92a 	bl	80038f4 <HAL_GetTick>
 80066a0:	0002      	movs	r2, r0
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	683a      	ldr	r2, [r7, #0]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d802      	bhi.n	80066b2 <HAL_SPI_Transmit+0x17a>
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	3301      	adds	r3, #1
 80066b0:	d102      	bne.n	80066b8 <HAL_SPI_Transmit+0x180>
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d104      	bne.n	80066c2 <HAL_SPI_Transmit+0x18a>
        {
          errorcode = HAL_TIMEOUT;
 80066b8:	231f      	movs	r3, #31
 80066ba:	18fb      	adds	r3, r7, r3
 80066bc:	2203      	movs	r2, #3
 80066be:	701a      	strb	r2, [r3, #0]
          goto error;
 80066c0:	e079      	b.n	80067b6 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d1cd      	bne.n	8006668 <HAL_SPI_Transmit+0x130>
 80066cc:	e04f      	b.n	800676e <HAL_SPI_Transmit+0x236>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d004      	beq.n	80066e0 <HAL_SPI_Transmit+0x1a8>
 80066d6:	2316      	movs	r3, #22
 80066d8:	18fb      	adds	r3, r7, r3
 80066da:	881b      	ldrh	r3, [r3, #0]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d141      	bne.n	8006764 <HAL_SPI_Transmit+0x22c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	330c      	adds	r3, #12
 80066ea:	7812      	ldrb	r2, [r2, #0]
 80066ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f2:	1c5a      	adds	r2, r3, #1
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	3b01      	subs	r3, #1
 8006700:	b29a      	uxth	r2, r3
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006706:	e02d      	b.n	8006764 <HAL_SPI_Transmit+0x22c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	2202      	movs	r2, #2
 8006710:	4013      	ands	r3, r2
 8006712:	2b02      	cmp	r3, #2
 8006714:	d113      	bne.n	800673e <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	330c      	adds	r3, #12
 8006720:	7812      	ldrb	r2, [r2, #0]
 8006722:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006728:	1c5a      	adds	r2, r3, #1
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006732:	b29b      	uxth	r3, r3
 8006734:	3b01      	subs	r3, #1
 8006736:	b29a      	uxth	r2, r3
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	86da      	strh	r2, [r3, #54]	; 0x36
 800673c:	e012      	b.n	8006764 <HAL_SPI_Transmit+0x22c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800673e:	f7fd f8d9 	bl	80038f4 <HAL_GetTick>
 8006742:	0002      	movs	r2, r0
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	1ad3      	subs	r3, r2, r3
 8006748:	683a      	ldr	r2, [r7, #0]
 800674a:	429a      	cmp	r2, r3
 800674c:	d802      	bhi.n	8006754 <HAL_SPI_Transmit+0x21c>
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	3301      	adds	r3, #1
 8006752:	d102      	bne.n	800675a <HAL_SPI_Transmit+0x222>
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d104      	bne.n	8006764 <HAL_SPI_Transmit+0x22c>
        {
          errorcode = HAL_TIMEOUT;
 800675a:	231f      	movs	r3, #31
 800675c:	18fb      	adds	r3, r7, r3
 800675e:	2203      	movs	r2, #3
 8006760:	701a      	strb	r2, [r3, #0]
          goto error;
 8006762:	e028      	b.n	80067b6 <HAL_SPI_Transmit+0x27e>
    while (hspi->TxXferCount > 0U)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006768:	b29b      	uxth	r3, r3
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1cc      	bne.n	8006708 <HAL_SPI_Transmit+0x1d0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800676e:	69ba      	ldr	r2, [r7, #24]
 8006770:	6839      	ldr	r1, [r7, #0]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	0018      	movs	r0, r3
 8006776:	f000 fa99 	bl	8006cac <SPI_EndRxTxTransaction>
 800677a:	1e03      	subs	r3, r0, #0
 800677c:	d002      	beq.n	8006784 <HAL_SPI_Transmit+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2220      	movs	r2, #32
 8006782:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d10a      	bne.n	80067a2 <HAL_SPI_Transmit+0x26a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800678c:	2300      	movs	r3, #0
 800678e:	613b      	str	r3, [r7, #16]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	613b      	str	r3, [r7, #16]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	613b      	str	r3, [r7, #16]
 80067a0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d004      	beq.n	80067b4 <HAL_SPI_Transmit+0x27c>
  {
    errorcode = HAL_ERROR;
 80067aa:	231f      	movs	r3, #31
 80067ac:	18fb      	adds	r3, r7, r3
 80067ae:	2201      	movs	r2, #1
 80067b0:	701a      	strb	r2, [r3, #0]
 80067b2:	e000      	b.n	80067b6 <HAL_SPI_Transmit+0x27e>
  }

error:
 80067b4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2251      	movs	r2, #81	; 0x51
 80067ba:	2101      	movs	r1, #1
 80067bc:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2250      	movs	r2, #80	; 0x50
 80067c2:	2100      	movs	r1, #0
 80067c4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80067c6:	231f      	movs	r3, #31
 80067c8:	18fb      	adds	r3, r7, r3
 80067ca:	781b      	ldrb	r3, [r3, #0]
}
 80067cc:	0018      	movs	r0, r3
 80067ce:	46bd      	mov	sp, r7
 80067d0:	b008      	add	sp, #32
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b086      	sub	sp, #24
 80067d8:	af00      	add	r7, sp, #0
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	1dbb      	adds	r3, r7, #6
 80067e0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80067e2:	2317      	movs	r3, #23
 80067e4:	18fb      	adds	r3, r7, r3
 80067e6:	2200      	movs	r2, #0
 80067e8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2250      	movs	r2, #80	; 0x50
 80067ee:	5c9b      	ldrb	r3, [r3, r2]
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d101      	bne.n	80067f8 <HAL_SPI_Transmit_IT+0x24>
 80067f4:	2302      	movs	r3, #2
 80067f6:	e072      	b.n	80068de <HAL_SPI_Transmit_IT+0x10a>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2250      	movs	r2, #80	; 0x50
 80067fc:	2101      	movs	r1, #1
 80067fe:	5499      	strb	r1, [r3, r2]

  if ((pData == NULL) || (Size == 0U))
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d003      	beq.n	800680e <HAL_SPI_Transmit_IT+0x3a>
 8006806:	1dbb      	adds	r3, r7, #6
 8006808:	881b      	ldrh	r3, [r3, #0]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d104      	bne.n	8006818 <HAL_SPI_Transmit_IT+0x44>
  {
    errorcode = HAL_ERROR;
 800680e:	2317      	movs	r3, #23
 8006810:	18fb      	adds	r3, r7, r3
 8006812:	2201      	movs	r2, #1
 8006814:	701a      	strb	r2, [r3, #0]
    goto error;
 8006816:	e05b      	b.n	80068d0 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2251      	movs	r2, #81	; 0x51
 800681c:	5c9b      	ldrb	r3, [r3, r2]
 800681e:	b2db      	uxtb	r3, r3
 8006820:	2b01      	cmp	r3, #1
 8006822:	d004      	beq.n	800682e <HAL_SPI_Transmit_IT+0x5a>
  {
    errorcode = HAL_BUSY;
 8006824:	2317      	movs	r3, #23
 8006826:	18fb      	adds	r3, r7, r3
 8006828:	2202      	movs	r2, #2
 800682a:	701a      	strb	r2, [r3, #0]
    goto error;
 800682c:	e050      	b.n	80068d0 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2251      	movs	r2, #81	; 0x51
 8006832:	2103      	movs	r1, #3
 8006834:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	68ba      	ldr	r2, [r7, #8]
 8006840:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	1dba      	adds	r2, r7, #6
 8006846:	8812      	ldrh	r2, [r2, #0]
 8006848:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	1dba      	adds	r2, r7, #6
 800684e:	8812      	ldrh	r2, [r2, #0]
 8006850:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2200      	movs	r2, #0
 800685c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2200      	movs	r2, #0
 8006862:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d003      	beq.n	800687a <HAL_SPI_Transmit_IT+0xa6>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	4a1c      	ldr	r2, [pc, #112]	; (80068e8 <HAL_SPI_Transmit_IT+0x114>)
 8006876:	645a      	str	r2, [r3, #68]	; 0x44
 8006878:	e002      	b.n	8006880 <HAL_SPI_Transmit_IT+0xac>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	4a1b      	ldr	r2, [pc, #108]	; (80068ec <HAL_SPI_Transmit_IT+0x118>)
 800687e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	689a      	ldr	r2, [r3, #8]
 8006884:	2380      	movs	r3, #128	; 0x80
 8006886:	021b      	lsls	r3, r3, #8
 8006888:	429a      	cmp	r2, r3
 800688a:	d108      	bne.n	800689e <HAL_SPI_Transmit_IT+0xca>
  {
    SPI_1LINE_TX(hspi);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2180      	movs	r1, #128	; 0x80
 8006898:	01c9      	lsls	r1, r1, #7
 800689a:	430a      	orrs	r2, r1
 800689c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	685a      	ldr	r2, [r3, #4]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	21a0      	movs	r1, #160	; 0xa0
 80068aa:	430a      	orrs	r2, r1
 80068ac:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2240      	movs	r2, #64	; 0x40
 80068b6:	4013      	ands	r3, r2
 80068b8:	2b40      	cmp	r3, #64	; 0x40
 80068ba:	d008      	beq.n	80068ce <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	2140      	movs	r1, #64	; 0x40
 80068c8:	430a      	orrs	r2, r1
 80068ca:	601a      	str	r2, [r3, #0]
 80068cc:	e000      	b.n	80068d0 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 80068ce:	46c0      	nop			; (mov r8, r8)
  __HAL_UNLOCK(hspi);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2250      	movs	r2, #80	; 0x50
 80068d4:	2100      	movs	r1, #0
 80068d6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80068d8:	2317      	movs	r3, #23
 80068da:	18fb      	adds	r3, r7, r3
 80068dc:	781b      	ldrb	r3, [r3, #0]
}
 80068de:	0018      	movs	r0, r3
 80068e0:	46bd      	mov	sp, r7
 80068e2:	b006      	add	sp, #24
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	46c0      	nop			; (mov r8, r8)
 80068e8:	08006b87 	.word	0x08006b87
 80068ec:	08006b3f 	.word	0x08006b3f

080068f0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b088      	sub	sp, #32
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	099b      	lsrs	r3, r3, #6
 800690c:	001a      	movs	r2, r3
 800690e:	2301      	movs	r3, #1
 8006910:	4013      	ands	r3, r2
 8006912:	d10f      	bne.n	8006934 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	2201      	movs	r2, #1
 8006918:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800691a:	d00b      	beq.n	8006934 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	099b      	lsrs	r3, r3, #6
 8006920:	001a      	movs	r2, r3
 8006922:	2301      	movs	r3, #1
 8006924:	4013      	ands	r3, r2
 8006926:	d005      	beq.n	8006934 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	0010      	movs	r0, r2
 8006930:	4798      	blx	r3
    return;
 8006932:	e0d6      	b.n	8006ae2 <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	085b      	lsrs	r3, r3, #1
 8006938:	001a      	movs	r2, r3
 800693a:	2301      	movs	r3, #1
 800693c:	4013      	ands	r3, r2
 800693e:	d00b      	beq.n	8006958 <HAL_SPI_IRQHandler+0x68>
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	09db      	lsrs	r3, r3, #7
 8006944:	001a      	movs	r2, r3
 8006946:	2301      	movs	r3, #1
 8006948:	4013      	ands	r3, r2
 800694a:	d005      	beq.n	8006958 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	0010      	movs	r0, r2
 8006954:	4798      	blx	r3
    return;
 8006956:	e0c4      	b.n	8006ae2 <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	095b      	lsrs	r3, r3, #5
 800695c:	001a      	movs	r2, r3
 800695e:	2301      	movs	r3, #1
 8006960:	4013      	ands	r3, r2
 8006962:	d10c      	bne.n	800697e <HAL_SPI_IRQHandler+0x8e>
 8006964:	69bb      	ldr	r3, [r7, #24]
 8006966:	099b      	lsrs	r3, r3, #6
 8006968:	001a      	movs	r2, r3
 800696a:	2301      	movs	r3, #1
 800696c:	4013      	ands	r3, r2
 800696e:	d106      	bne.n	800697e <HAL_SPI_IRQHandler+0x8e>
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	0a1b      	lsrs	r3, r3, #8
 8006974:	001a      	movs	r2, r3
 8006976:	2301      	movs	r3, #1
 8006978:	4013      	ands	r3, r2
 800697a:	d100      	bne.n	800697e <HAL_SPI_IRQHandler+0x8e>
 800697c:	e0b1      	b.n	8006ae2 <HAL_SPI_IRQHandler+0x1f2>
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	095b      	lsrs	r3, r3, #5
 8006982:	001a      	movs	r2, r3
 8006984:	2301      	movs	r3, #1
 8006986:	4013      	ands	r3, r2
 8006988:	d100      	bne.n	800698c <HAL_SPI_IRQHandler+0x9c>
 800698a:	e0aa      	b.n	8006ae2 <HAL_SPI_IRQHandler+0x1f2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	099b      	lsrs	r3, r3, #6
 8006990:	001a      	movs	r2, r3
 8006992:	2301      	movs	r3, #1
 8006994:	4013      	ands	r3, r2
 8006996:	d023      	beq.n	80069e0 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2251      	movs	r2, #81	; 0x51
 800699c:	5c9b      	ldrb	r3, [r3, r2]
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	2b03      	cmp	r3, #3
 80069a2:	d011      	beq.n	80069c8 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069a8:	2204      	movs	r2, #4
 80069aa:	431a      	orrs	r2, r3
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80069b0:	2300      	movs	r3, #0
 80069b2:	617b      	str	r3, [r7, #20]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	617b      	str	r3, [r7, #20]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	617b      	str	r3, [r7, #20]
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	e00b      	b.n	80069e0 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80069c8:	2300      	movs	r3, #0
 80069ca:	613b      	str	r3, [r7, #16]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	613b      	str	r3, [r7, #16]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	613b      	str	r3, [r7, #16]
 80069dc:	693b      	ldr	r3, [r7, #16]
        return;
 80069de:	e080      	b.n	8006ae2 <HAL_SPI_IRQHandler+0x1f2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	095b      	lsrs	r3, r3, #5
 80069e4:	001a      	movs	r2, r3
 80069e6:	2301      	movs	r3, #1
 80069e8:	4013      	ands	r3, r2
 80069ea:	d014      	beq.n	8006a16 <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069f0:	2201      	movs	r2, #1
 80069f2:	431a      	orrs	r2, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80069f8:	2300      	movs	r3, #0
 80069fa:	60fb      	str	r3, [r7, #12]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	60fb      	str	r3, [r7, #12]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2140      	movs	r1, #64	; 0x40
 8006a10:	438a      	bics	r2, r1
 8006a12:	601a      	str	r2, [r3, #0]
 8006a14:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	0a1b      	lsrs	r3, r3, #8
 8006a1a:	001a      	movs	r2, r3
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	4013      	ands	r3, r2
 8006a20:	d00c      	beq.n	8006a3c <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a26:	2208      	movs	r2, #8
 8006a28:	431a      	orrs	r2, r3
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006a2e:	2300      	movs	r3, #0
 8006a30:	60bb      	str	r3, [r7, #8]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	60bb      	str	r3, [r7, #8]
 8006a3a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d04d      	beq.n	8006ae0 <HAL_SPI_IRQHandler+0x1f0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	685a      	ldr	r2, [r3, #4]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	21e0      	movs	r1, #224	; 0xe0
 8006a50:	438a      	bics	r2, r1
 8006a52:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2251      	movs	r2, #81	; 0x51
 8006a58:	2101      	movs	r1, #1
 8006a5a:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	2202      	movs	r2, #2
 8006a60:	4013      	ands	r3, r2
 8006a62:	d103      	bne.n	8006a6c <HAL_SPI_IRQHandler+0x17c>
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	2201      	movs	r2, #1
 8006a68:	4013      	ands	r3, r2
 8006a6a:	d032      	beq.n	8006ad2 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	685a      	ldr	r2, [r3, #4]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	2103      	movs	r1, #3
 8006a78:	438a      	bics	r2, r1
 8006a7a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d010      	beq.n	8006aa6 <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a88:	4a17      	ldr	r2, [pc, #92]	; (8006ae8 <HAL_SPI_IRQHandler+0x1f8>)
 8006a8a:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a90:	0018      	movs	r0, r3
 8006a92:	f7fd fadb 	bl	800404c <HAL_DMA_Abort_IT>
 8006a96:	1e03      	subs	r3, r0, #0
 8006a98:	d005      	beq.n	8006aa6 <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a9e:	2240      	movs	r2, #64	; 0x40
 8006aa0:	431a      	orrs	r2, r3
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d016      	beq.n	8006adc <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ab2:	4a0d      	ldr	r2, [pc, #52]	; (8006ae8 <HAL_SPI_IRQHandler+0x1f8>)
 8006ab4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006aba:	0018      	movs	r0, r3
 8006abc:	f7fd fac6 	bl	800404c <HAL_DMA_Abort_IT>
 8006ac0:	1e03      	subs	r3, r0, #0
 8006ac2:	d00b      	beq.n	8006adc <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ac8:	2240      	movs	r2, #64	; 0x40
 8006aca:	431a      	orrs	r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006ad0:	e004      	b.n	8006adc <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	0018      	movs	r0, r3
 8006ad6:	f000 f809 	bl	8006aec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006ada:	e000      	b.n	8006ade <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8006adc:	46c0      	nop			; (mov r8, r8)
    return;
 8006ade:	46c0      	nop			; (mov r8, r8)
 8006ae0:	46c0      	nop			; (mov r8, r8)
  }
}
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	b008      	add	sp, #32
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	08006b15 	.word	0x08006b15

08006aec <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006af4:	46c0      	nop			; (mov r8, r8)
 8006af6:	46bd      	mov	sp, r7
 8006af8:	b002      	add	sp, #8
 8006afa:	bd80      	pop	{r7, pc}

08006afc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2251      	movs	r2, #81	; 0x51
 8006b08:	5c9b      	ldrb	r3, [r3, r2]
 8006b0a:	b2db      	uxtb	r3, r3
}
 8006b0c:	0018      	movs	r0, r3
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	b002      	add	sp, #8
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b20:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2200      	movs	r2, #0
 8006b26:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	0018      	movs	r0, r3
 8006b32:	f7ff ffdb 	bl	8006aec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006b36:	46c0      	nop			; (mov r8, r8)
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	b004      	add	sp, #16
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b082      	sub	sp, #8
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	330c      	adds	r3, #12
 8006b50:	7812      	ldrb	r2, [r2, #0]
 8006b52:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b58:	1c5a      	adds	r2, r3, #1
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	3b01      	subs	r3, #1
 8006b66:	b29a      	uxth	r2, r3
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d103      	bne.n	8006b7e <SPI_TxISR_8BIT+0x40>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	0018      	movs	r0, r3
 8006b7a:	f000 f8d5 	bl	8006d28 <SPI_CloseTx_ISR>
  }
}
 8006b7e:	46c0      	nop			; (mov r8, r8)
 8006b80:	46bd      	mov	sp, r7
 8006b82:	b002      	add	sp, #8
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b082      	sub	sp, #8
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b92:	881a      	ldrh	r2, [r3, #0]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b9e:	1c9a      	adds	r2, r3, #2
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	3b01      	subs	r3, #1
 8006bac:	b29a      	uxth	r2, r3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d103      	bne.n	8006bc4 <SPI_TxISR_16BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	0018      	movs	r0, r3
 8006bc0:	f000 f8b2 	bl	8006d28 <SPI_CloseTx_ISR>
  }
}
 8006bc4:	46c0      	nop			; (mov r8, r8)
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	b002      	add	sp, #8
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	603b      	str	r3, [r7, #0]
 8006bd8:	1dfb      	adds	r3, r7, #7
 8006bda:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006bdc:	e050      	b.n	8006c80 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	3301      	adds	r3, #1
 8006be2:	d04d      	beq.n	8006c80 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006be4:	f7fc fe86 	bl	80038f4 <HAL_GetTick>
 8006be8:	0002      	movs	r2, r0
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	1ad3      	subs	r3, r2, r3
 8006bee:	683a      	ldr	r2, [r7, #0]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d902      	bls.n	8006bfa <SPI_WaitFlagStateUntilTimeout+0x2e>
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d142      	bne.n	8006c80 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	685a      	ldr	r2, [r3, #4]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	21e0      	movs	r1, #224	; 0xe0
 8006c06:	438a      	bics	r2, r1
 8006c08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	685a      	ldr	r2, [r3, #4]
 8006c0e:	2382      	movs	r3, #130	; 0x82
 8006c10:	005b      	lsls	r3, r3, #1
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d113      	bne.n	8006c3e <SPI_WaitFlagStateUntilTimeout+0x72>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	689a      	ldr	r2, [r3, #8]
 8006c1a:	2380      	movs	r3, #128	; 0x80
 8006c1c:	021b      	lsls	r3, r3, #8
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d005      	beq.n	8006c2e <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	689a      	ldr	r2, [r3, #8]
 8006c26:	2380      	movs	r3, #128	; 0x80
 8006c28:	00db      	lsls	r3, r3, #3
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d107      	bne.n	8006c3e <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2140      	movs	r1, #64	; 0x40
 8006c3a:	438a      	bics	r2, r1
 8006c3c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c42:	2380      	movs	r3, #128	; 0x80
 8006c44:	019b      	lsls	r3, r3, #6
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d110      	bne.n	8006c6c <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4914      	ldr	r1, [pc, #80]	; (8006ca8 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8006c56:	400a      	ands	r2, r1
 8006c58:	601a      	str	r2, [r3, #0]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2180      	movs	r1, #128	; 0x80
 8006c66:	0189      	lsls	r1, r1, #6
 8006c68:	430a      	orrs	r2, r1
 8006c6a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2251      	movs	r2, #81	; 0x51
 8006c70:	2101      	movs	r1, #1
 8006c72:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2250      	movs	r2, #80	; 0x50
 8006c78:	2100      	movs	r1, #0
 8006c7a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006c7c:	2303      	movs	r3, #3
 8006c7e:	e00f      	b.n	8006ca0 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	68ba      	ldr	r2, [r7, #8]
 8006c88:	4013      	ands	r3, r2
 8006c8a:	68ba      	ldr	r2, [r7, #8]
 8006c8c:	1ad3      	subs	r3, r2, r3
 8006c8e:	425a      	negs	r2, r3
 8006c90:	4153      	adcs	r3, r2
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	001a      	movs	r2, r3
 8006c96:	1dfb      	adds	r3, r7, #7
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d19f      	bne.n	8006bde <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006c9e:	2300      	movs	r3, #0
}
 8006ca0:	0018      	movs	r0, r3
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	b004      	add	sp, #16
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	ffffdfff 	.word	0xffffdfff

08006cac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b086      	sub	sp, #24
 8006cb0:	af02      	add	r7, sp, #8
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	685a      	ldr	r2, [r3, #4]
 8006cbc:	2382      	movs	r3, #130	; 0x82
 8006cbe:	005b      	lsls	r3, r3, #1
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d112      	bne.n	8006cea <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006cc4:	68ba      	ldr	r2, [r7, #8]
 8006cc6:	68f8      	ldr	r0, [r7, #12]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	9300      	str	r3, [sp, #0]
 8006ccc:	0013      	movs	r3, r2
 8006cce:	2200      	movs	r2, #0
 8006cd0:	2180      	movs	r1, #128	; 0x80
 8006cd2:	f7ff ff7b 	bl	8006bcc <SPI_WaitFlagStateUntilTimeout>
 8006cd6:	1e03      	subs	r3, r0, #0
 8006cd8:	d020      	beq.n	8006d1c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cde:	2220      	movs	r2, #32
 8006ce0:	431a      	orrs	r2, r3
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e019      	b.n	8006d1e <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2251      	movs	r2, #81	; 0x51
 8006cee:	5c9b      	ldrb	r3, [r3, r2]
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	2b05      	cmp	r3, #5
 8006cf4:	d112      	bne.n	8006d1c <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006cf6:	68ba      	ldr	r2, [r7, #8]
 8006cf8:	68f8      	ldr	r0, [r7, #12]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	9300      	str	r3, [sp, #0]
 8006cfe:	0013      	movs	r3, r2
 8006d00:	2200      	movs	r2, #0
 8006d02:	2101      	movs	r1, #1
 8006d04:	f7ff ff62 	bl	8006bcc <SPI_WaitFlagStateUntilTimeout>
 8006d08:	1e03      	subs	r3, r0, #0
 8006d0a:	d007      	beq.n	8006d1c <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d10:	2220      	movs	r2, #32
 8006d12:	431a      	orrs	r2, r3
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	e000      	b.n	8006d1e <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 8006d1c:	2300      	movs	r3, #0
}
 8006d1e:	0018      	movs	r0, r3
 8006d20:	46bd      	mov	sp, r7
 8006d22:	b004      	add	sp, #16
 8006d24:	bd80      	pop	{r7, pc}
	...

08006d28 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b086      	sub	sp, #24
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8006d30:	4b2d      	ldr	r3, [pc, #180]	; (8006de8 <SPI_CloseTx_ISR+0xc0>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	492d      	ldr	r1, [pc, #180]	; (8006dec <SPI_CloseTx_ISR+0xc4>)
 8006d36:	0018      	movs	r0, r3
 8006d38:	f7f9 f9e6 	bl	8000108 <__udivsi3>
 8006d3c:	0003      	movs	r3, r0
 8006d3e:	001a      	movs	r2, r3
 8006d40:	2364      	movs	r3, #100	; 0x64
 8006d42:	4353      	muls	r3, r2
 8006d44:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d46:	f7fc fdd5 	bl	80038f4 <HAL_GetTick>
 8006d4a:	0003      	movs	r3, r0
 8006d4c:	617b      	str	r3, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d106      	bne.n	8006d62 <SPI_CloseTx_ISR+0x3a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d58:	2220      	movs	r2, #32
 8006d5a:	431a      	orrs	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006d60:	e008      	b.n	8006d74 <SPI_CloseTx_ISR+0x4c>
    }
    count--;
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	3b01      	subs	r3, #1
 8006d66:	613b      	str	r3, [r7, #16]
  }
  while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	2202      	movs	r2, #2
 8006d70:	4013      	ands	r3, r2
 8006d72:	d0ec      	beq.n	8006d4e <SPI_CloseTx_ISR+0x26>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	685a      	ldr	r2, [r3, #4]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	21a0      	movs	r1, #160	; 0xa0
 8006d80:	438a      	bics	r2, r1
 8006d82:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006d84:	697a      	ldr	r2, [r7, #20]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2164      	movs	r1, #100	; 0x64
 8006d8a:	0018      	movs	r0, r3
 8006d8c:	f7ff ff8e 	bl	8006cac <SPI_EndRxTxTransaction>
 8006d90:	1e03      	subs	r3, r0, #0
 8006d92:	d005      	beq.n	8006da0 <SPI_CloseTx_ISR+0x78>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d98:	2220      	movs	r2, #32
 8006d9a:	431a      	orrs	r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d10a      	bne.n	8006dbe <SPI_CloseTx_ISR+0x96>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006da8:	2300      	movs	r3, #0
 8006daa:	60fb      	str	r3, [r7, #12]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	60fb      	str	r3, [r7, #12]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	60fb      	str	r3, [r7, #12]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2251      	movs	r2, #81	; 0x51
 8006dc2:	2101      	movs	r1, #1
 8006dc4:	5499      	strb	r1, [r3, r2]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d004      	beq.n	8006dd8 <SPI_CloseTx_ISR+0xb0>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	0018      	movs	r0, r3
 8006dd2:	f7ff fe8b 	bl	8006aec <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8006dd6:	e003      	b.n	8006de0 <SPI_CloseTx_ISR+0xb8>
    HAL_SPI_TxCpltCallback(hspi);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	0018      	movs	r0, r3
 8006ddc:	f7f9 fb78 	bl	80004d0 <HAL_SPI_TxCpltCallback>
}
 8006de0:	46c0      	nop			; (mov r8, r8)
 8006de2:	46bd      	mov	sp, r7
 8006de4:	b006      	add	sp, #24
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	20000054 	.word	0x20000054
 8006dec:	00005dc0 	.word	0x00005dc0

08006df0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d101      	bne.n	8006e02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e01e      	b.n	8006e40 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2239      	movs	r2, #57	; 0x39
 8006e06:	5c9b      	ldrb	r3, [r3, r2]
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d107      	bne.n	8006e1e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2238      	movs	r2, #56	; 0x38
 8006e12:	2100      	movs	r1, #0
 8006e14:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	0018      	movs	r0, r3
 8006e1a:	f7fc fb3d 	bl	8003498 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2239      	movs	r2, #57	; 0x39
 8006e22:	2102      	movs	r1, #2
 8006e24:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	3304      	adds	r3, #4
 8006e2e:	0019      	movs	r1, r3
 8006e30:	0010      	movs	r0, r2
 8006e32:	f000 fa95 	bl	8007360 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2239      	movs	r2, #57	; 0x39
 8006e3a:	2101      	movs	r1, #1
 8006e3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e3e:	2300      	movs	r3, #0
}
 8006e40:	0018      	movs	r0, r3
 8006e42:	46bd      	mov	sp, r7
 8006e44:	b002      	add	sp, #8
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68da      	ldr	r2, [r3, #12]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2101      	movs	r1, #1
 8006e5c:	430a      	orrs	r2, r1
 8006e5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	2207      	movs	r2, #7
 8006e68:	4013      	ands	r3, r2
 8006e6a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2b06      	cmp	r3, #6
 8006e70:	d007      	beq.n	8006e82 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2101      	movs	r1, #1
 8006e7e:	430a      	orrs	r2, r1
 8006e80:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	0018      	movs	r0, r3
 8006e86:	46bd      	mov	sp, r7
 8006e88:	b004      	add	sp, #16
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	68da      	ldr	r2, [r3, #12]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	2101      	movs	r1, #1
 8006ea0:	438a      	bics	r2, r1
 8006ea2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	6a1b      	ldr	r3, [r3, #32]
 8006eaa:	4a08      	ldr	r2, [pc, #32]	; (8006ecc <HAL_TIM_Base_Stop_IT+0x40>)
 8006eac:	4013      	ands	r3, r2
 8006eae:	d107      	bne.n	8006ec0 <HAL_TIM_Base_Stop_IT+0x34>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2101      	movs	r1, #1
 8006ebc:	438a      	bics	r2, r1
 8006ebe:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	0018      	movs	r0, r3
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	b002      	add	sp, #8
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	46c0      	nop			; (mov r8, r8)
 8006ecc:	00001111 	.word	0x00001111

08006ed0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b082      	sub	sp, #8
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d101      	bne.n	8006ee2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e01e      	b.n	8006f20 <HAL_TIM_OC_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2239      	movs	r2, #57	; 0x39
 8006ee6:	5c9b      	ldrb	r3, [r3, r2]
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d107      	bne.n	8006efe <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2238      	movs	r2, #56	; 0x38
 8006ef2:	2100      	movs	r1, #0
 8006ef4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	0018      	movs	r0, r3
 8006efa:	f000 f815 	bl	8006f28 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2239      	movs	r2, #57	; 0x39
 8006f02:	2102      	movs	r1, #2
 8006f04:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	3304      	adds	r3, #4
 8006f0e:	0019      	movs	r1, r3
 8006f10:	0010      	movs	r0, r2
 8006f12:	f000 fa25 	bl	8007360 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2239      	movs	r2, #57	; 0x39
 8006f1a:	2101      	movs	r1, #1
 8006f1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	0018      	movs	r0, r3
 8006f22:	46bd      	mov	sp, r7
 8006f24:	b002      	add	sp, #8
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006f30:	46c0      	nop			; (mov r8, r8)
 8006f32:	46bd      	mov	sp, r7
 8006f34:	b002      	add	sp, #8
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b082      	sub	sp, #8
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	2202      	movs	r2, #2
 8006f48:	4013      	ands	r3, r2
 8006f4a:	2b02      	cmp	r3, #2
 8006f4c:	d124      	bne.n	8006f98 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	2202      	movs	r2, #2
 8006f56:	4013      	ands	r3, r2
 8006f58:	2b02      	cmp	r3, #2
 8006f5a:	d11d      	bne.n	8006f98 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2203      	movs	r2, #3
 8006f62:	4252      	negs	r2, r2
 8006f64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	699b      	ldr	r3, [r3, #24]
 8006f72:	2203      	movs	r2, #3
 8006f74:	4013      	ands	r3, r2
 8006f76:	d004      	beq.n	8006f82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	0018      	movs	r0, r3
 8006f7c:	f000 f9d8 	bl	8007330 <HAL_TIM_IC_CaptureCallback>
 8006f80:	e007      	b.n	8006f92 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	0018      	movs	r0, r3
 8006f86:	f000 f9cb 	bl	8007320 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	0018      	movs	r0, r3
 8006f8e:	f000 f9d7 	bl	8007340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	2204      	movs	r2, #4
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	2b04      	cmp	r3, #4
 8006fa4:	d125      	bne.n	8006ff2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	2204      	movs	r2, #4
 8006fae:	4013      	ands	r3, r2
 8006fb0:	2b04      	cmp	r3, #4
 8006fb2:	d11e      	bne.n	8006ff2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2205      	movs	r2, #5
 8006fba:	4252      	negs	r2, r2
 8006fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2202      	movs	r2, #2
 8006fc2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	699a      	ldr	r2, [r3, #24]
 8006fca:	23c0      	movs	r3, #192	; 0xc0
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	4013      	ands	r3, r2
 8006fd0:	d004      	beq.n	8006fdc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	0018      	movs	r0, r3
 8006fd6:	f000 f9ab 	bl	8007330 <HAL_TIM_IC_CaptureCallback>
 8006fda:	e007      	b.n	8006fec <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	0018      	movs	r0, r3
 8006fe0:	f000 f99e 	bl	8007320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	0018      	movs	r0, r3
 8006fe8:	f000 f9aa 	bl	8007340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	2208      	movs	r2, #8
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	2b08      	cmp	r3, #8
 8006ffe:	d124      	bne.n	800704a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	2208      	movs	r2, #8
 8007008:	4013      	ands	r3, r2
 800700a:	2b08      	cmp	r3, #8
 800700c:	d11d      	bne.n	800704a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	2209      	movs	r2, #9
 8007014:	4252      	negs	r2, r2
 8007016:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2204      	movs	r2, #4
 800701c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	69db      	ldr	r3, [r3, #28]
 8007024:	2203      	movs	r2, #3
 8007026:	4013      	ands	r3, r2
 8007028:	d004      	beq.n	8007034 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	0018      	movs	r0, r3
 800702e:	f000 f97f 	bl	8007330 <HAL_TIM_IC_CaptureCallback>
 8007032:	e007      	b.n	8007044 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	0018      	movs	r0, r3
 8007038:	f000 f972 	bl	8007320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	0018      	movs	r0, r3
 8007040:	f000 f97e 	bl	8007340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	2210      	movs	r2, #16
 8007052:	4013      	ands	r3, r2
 8007054:	2b10      	cmp	r3, #16
 8007056:	d125      	bne.n	80070a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	2210      	movs	r2, #16
 8007060:	4013      	ands	r3, r2
 8007062:	2b10      	cmp	r3, #16
 8007064:	d11e      	bne.n	80070a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2211      	movs	r2, #17
 800706c:	4252      	negs	r2, r2
 800706e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2208      	movs	r2, #8
 8007074:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	69da      	ldr	r2, [r3, #28]
 800707c:	23c0      	movs	r3, #192	; 0xc0
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	4013      	ands	r3, r2
 8007082:	d004      	beq.n	800708e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	0018      	movs	r0, r3
 8007088:	f000 f952 	bl	8007330 <HAL_TIM_IC_CaptureCallback>
 800708c:	e007      	b.n	800709e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	0018      	movs	r0, r3
 8007092:	f000 f945 	bl	8007320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	0018      	movs	r0, r3
 800709a:	f000 f951 	bl	8007340 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	2201      	movs	r2, #1
 80070ac:	4013      	ands	r3, r2
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d10f      	bne.n	80070d2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	2201      	movs	r2, #1
 80070ba:	4013      	ands	r3, r2
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d108      	bne.n	80070d2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2202      	movs	r2, #2
 80070c6:	4252      	negs	r2, r2
 80070c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	0018      	movs	r0, r3
 80070ce:	f7fc fb5b 	bl	8003788 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	691b      	ldr	r3, [r3, #16]
 80070d8:	2240      	movs	r2, #64	; 0x40
 80070da:	4013      	ands	r3, r2
 80070dc:	2b40      	cmp	r3, #64	; 0x40
 80070de:	d10f      	bne.n	8007100 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	2240      	movs	r2, #64	; 0x40
 80070e8:	4013      	ands	r3, r2
 80070ea:	2b40      	cmp	r3, #64	; 0x40
 80070ec:	d108      	bne.n	8007100 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	2241      	movs	r2, #65	; 0x41
 80070f4:	4252      	negs	r2, r2
 80070f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	0018      	movs	r0, r3
 80070fc:	f000 f928 	bl	8007350 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007100:	46c0      	nop			; (mov r8, r8)
 8007102:	46bd      	mov	sp, r7
 8007104:	b002      	add	sp, #8
 8007106:	bd80      	pop	{r7, pc}

08007108 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2238      	movs	r2, #56	; 0x38
 8007118:	5c9b      	ldrb	r3, [r3, r2]
 800711a:	2b01      	cmp	r3, #1
 800711c:	d101      	bne.n	8007122 <HAL_TIM_OC_ConfigChannel+0x1a>
 800711e:	2302      	movs	r3, #2
 8007120:	e03c      	b.n	800719c <HAL_TIM_OC_ConfigChannel+0x94>
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2238      	movs	r2, #56	; 0x38
 8007126:	2101      	movs	r1, #1
 8007128:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2239      	movs	r2, #57	; 0x39
 800712e:	2102      	movs	r1, #2
 8007130:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2b04      	cmp	r3, #4
 8007136:	d010      	beq.n	800715a <HAL_TIM_OC_ConfigChannel+0x52>
 8007138:	d802      	bhi.n	8007140 <HAL_TIM_OC_ConfigChannel+0x38>
 800713a:	2b00      	cmp	r3, #0
 800713c:	d005      	beq.n	800714a <HAL_TIM_OC_ConfigChannel+0x42>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      break;
    }

    default:
      break;
 800713e:	e024      	b.n	800718a <HAL_TIM_OC_ConfigChannel+0x82>
  switch (Channel)
 8007140:	2b08      	cmp	r3, #8
 8007142:	d012      	beq.n	800716a <HAL_TIM_OC_ConfigChannel+0x62>
 8007144:	2b0c      	cmp	r3, #12
 8007146:	d018      	beq.n	800717a <HAL_TIM_OC_ConfigChannel+0x72>
      break;
 8007148:	e01f      	b.n	800718a <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	68ba      	ldr	r2, [r7, #8]
 8007150:	0011      	movs	r1, r2
 8007152:	0018      	movs	r0, r3
 8007154:	f000 f962 	bl	800741c <TIM_OC1_SetConfig>
      break;
 8007158:	e017      	b.n	800718a <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	68ba      	ldr	r2, [r7, #8]
 8007160:	0011      	movs	r1, r2
 8007162:	0018      	movs	r0, r3
 8007164:	f000 f996 	bl	8007494 <TIM_OC2_SetConfig>
      break;
 8007168:	e00f      	b.n	800718a <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	68ba      	ldr	r2, [r7, #8]
 8007170:	0011      	movs	r1, r2
 8007172:	0018      	movs	r0, r3
 8007174:	f000 f9d0 	bl	8007518 <TIM_OC3_SetConfig>
      break;
 8007178:	e007      	b.n	800718a <HAL_TIM_OC_ConfigChannel+0x82>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	68ba      	ldr	r2, [r7, #8]
 8007180:	0011      	movs	r1, r2
 8007182:	0018      	movs	r0, r3
 8007184:	f000 fa08 	bl	8007598 <TIM_OC4_SetConfig>
      break;
 8007188:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2239      	movs	r2, #57	; 0x39
 800718e:	2101      	movs	r1, #1
 8007190:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2238      	movs	r2, #56	; 0x38
 8007196:	2100      	movs	r1, #0
 8007198:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800719a:	2300      	movs	r3, #0
}
 800719c:	0018      	movs	r0, r3
 800719e:	46bd      	mov	sp, r7
 80071a0:	b004      	add	sp, #16
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2238      	movs	r2, #56	; 0x38
 80071b2:	5c9b      	ldrb	r3, [r3, r2]
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d101      	bne.n	80071bc <HAL_TIM_ConfigClockSource+0x18>
 80071b8:	2302      	movs	r3, #2
 80071ba:	e0ab      	b.n	8007314 <HAL_TIM_ConfigClockSource+0x170>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2238      	movs	r2, #56	; 0x38
 80071c0:	2101      	movs	r1, #1
 80071c2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2239      	movs	r2, #57	; 0x39
 80071c8:	2102      	movs	r1, #2
 80071ca:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2277      	movs	r2, #119	; 0x77
 80071d8:	4393      	bics	r3, r2
 80071da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	4a4f      	ldr	r2, [pc, #316]	; (800731c <HAL_TIM_ConfigClockSource+0x178>)
 80071e0:	4013      	ands	r3, r2
 80071e2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	2b40      	cmp	r3, #64	; 0x40
 80071f2:	d100      	bne.n	80071f6 <HAL_TIM_ConfigClockSource+0x52>
 80071f4:	e06b      	b.n	80072ce <HAL_TIM_ConfigClockSource+0x12a>
 80071f6:	d80e      	bhi.n	8007216 <HAL_TIM_ConfigClockSource+0x72>
 80071f8:	2b10      	cmp	r3, #16
 80071fa:	d100      	bne.n	80071fe <HAL_TIM_ConfigClockSource+0x5a>
 80071fc:	e077      	b.n	80072ee <HAL_TIM_ConfigClockSource+0x14a>
 80071fe:	d803      	bhi.n	8007208 <HAL_TIM_ConfigClockSource+0x64>
 8007200:	2b00      	cmp	r3, #0
 8007202:	d100      	bne.n	8007206 <HAL_TIM_ConfigClockSource+0x62>
 8007204:	e073      	b.n	80072ee <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007206:	e07c      	b.n	8007302 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8007208:	2b20      	cmp	r3, #32
 800720a:	d100      	bne.n	800720e <HAL_TIM_ConfigClockSource+0x6a>
 800720c:	e06f      	b.n	80072ee <HAL_TIM_ConfigClockSource+0x14a>
 800720e:	2b30      	cmp	r3, #48	; 0x30
 8007210:	d100      	bne.n	8007214 <HAL_TIM_ConfigClockSource+0x70>
 8007212:	e06c      	b.n	80072ee <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8007214:	e075      	b.n	8007302 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8007216:	2b70      	cmp	r3, #112	; 0x70
 8007218:	d00e      	beq.n	8007238 <HAL_TIM_ConfigClockSource+0x94>
 800721a:	d804      	bhi.n	8007226 <HAL_TIM_ConfigClockSource+0x82>
 800721c:	2b50      	cmp	r3, #80	; 0x50
 800721e:	d036      	beq.n	800728e <HAL_TIM_ConfigClockSource+0xea>
 8007220:	2b60      	cmp	r3, #96	; 0x60
 8007222:	d044      	beq.n	80072ae <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8007224:	e06d      	b.n	8007302 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8007226:	2280      	movs	r2, #128	; 0x80
 8007228:	0152      	lsls	r2, r2, #5
 800722a:	4293      	cmp	r3, r2
 800722c:	d068      	beq.n	8007300 <HAL_TIM_ConfigClockSource+0x15c>
 800722e:	2280      	movs	r2, #128	; 0x80
 8007230:	0192      	lsls	r2, r2, #6
 8007232:	4293      	cmp	r3, r2
 8007234:	d017      	beq.n	8007266 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8007236:	e064      	b.n	8007302 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6818      	ldr	r0, [r3, #0]
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	6899      	ldr	r1, [r3, #8]
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	685a      	ldr	r2, [r3, #4]
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	f000 fa66 	bl	8007718 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2277      	movs	r2, #119	; 0x77
 8007258:	4313      	orrs	r3, r2
 800725a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	68fa      	ldr	r2, [r7, #12]
 8007262:	609a      	str	r2, [r3, #8]
      break;
 8007264:	e04d      	b.n	8007302 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6818      	ldr	r0, [r3, #0]
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	6899      	ldr	r1, [r3, #8]
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	685a      	ldr	r2, [r3, #4]
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	f000 fa4f 	bl	8007718 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	689a      	ldr	r2, [r3, #8]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	2180      	movs	r1, #128	; 0x80
 8007286:	01c9      	lsls	r1, r1, #7
 8007288:	430a      	orrs	r2, r1
 800728a:	609a      	str	r2, [r3, #8]
      break;
 800728c:	e039      	b.n	8007302 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6818      	ldr	r0, [r3, #0]
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	6859      	ldr	r1, [r3, #4]
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	001a      	movs	r2, r3
 800729c:	f000 f9c2 	bl	8007624 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2150      	movs	r1, #80	; 0x50
 80072a6:	0018      	movs	r0, r3
 80072a8:	f000 fa1c 	bl	80076e4 <TIM_ITRx_SetConfig>
      break;
 80072ac:	e029      	b.n	8007302 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6818      	ldr	r0, [r3, #0]
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	6859      	ldr	r1, [r3, #4]
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	68db      	ldr	r3, [r3, #12]
 80072ba:	001a      	movs	r2, r3
 80072bc:	f000 f9e0 	bl	8007680 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2160      	movs	r1, #96	; 0x60
 80072c6:	0018      	movs	r0, r3
 80072c8:	f000 fa0c 	bl	80076e4 <TIM_ITRx_SetConfig>
      break;
 80072cc:	e019      	b.n	8007302 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6818      	ldr	r0, [r3, #0]
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	6859      	ldr	r1, [r3, #4]
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	68db      	ldr	r3, [r3, #12]
 80072da:	001a      	movs	r2, r3
 80072dc:	f000 f9a2 	bl	8007624 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2140      	movs	r1, #64	; 0x40
 80072e6:	0018      	movs	r0, r3
 80072e8:	f000 f9fc 	bl	80076e4 <TIM_ITRx_SetConfig>
      break;
 80072ec:	e009      	b.n	8007302 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	0019      	movs	r1, r3
 80072f8:	0010      	movs	r0, r2
 80072fa:	f000 f9f3 	bl	80076e4 <TIM_ITRx_SetConfig>
      break;
 80072fe:	e000      	b.n	8007302 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8007300:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2239      	movs	r2, #57	; 0x39
 8007306:	2101      	movs	r1, #1
 8007308:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2238      	movs	r2, #56	; 0x38
 800730e:	2100      	movs	r1, #0
 8007310:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007312:	2300      	movs	r3, #0
}
 8007314:	0018      	movs	r0, r3
 8007316:	46bd      	mov	sp, r7
 8007318:	b004      	add	sp, #16
 800731a:	bd80      	pop	{r7, pc}
 800731c:	ffff00ff 	.word	0xffff00ff

08007320 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007328:	46c0      	nop			; (mov r8, r8)
 800732a:	46bd      	mov	sp, r7
 800732c:	b002      	add	sp, #8
 800732e:	bd80      	pop	{r7, pc}

08007330 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007338:	46c0      	nop			; (mov r8, r8)
 800733a:	46bd      	mov	sp, r7
 800733c:	b002      	add	sp, #8
 800733e:	bd80      	pop	{r7, pc}

08007340 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b082      	sub	sp, #8
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007348:	46c0      	nop			; (mov r8, r8)
 800734a:	46bd      	mov	sp, r7
 800734c:	b002      	add	sp, #8
 800734e:	bd80      	pop	{r7, pc}

08007350 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b082      	sub	sp, #8
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007358:	46c0      	nop			; (mov r8, r8)
 800735a:	46bd      	mov	sp, r7
 800735c:	b002      	add	sp, #8
 800735e:	bd80      	pop	{r7, pc}

08007360 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	2380      	movs	r3, #128	; 0x80
 8007374:	05db      	lsls	r3, r3, #23
 8007376:	429a      	cmp	r2, r3
 8007378:	d00b      	beq.n	8007392 <TIM_Base_SetConfig+0x32>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4a23      	ldr	r2, [pc, #140]	; (800740c <TIM_Base_SetConfig+0xac>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d007      	beq.n	8007392 <TIM_Base_SetConfig+0x32>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	4a22      	ldr	r2, [pc, #136]	; (8007410 <TIM_Base_SetConfig+0xb0>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d003      	beq.n	8007392 <TIM_Base_SetConfig+0x32>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4a21      	ldr	r2, [pc, #132]	; (8007414 <TIM_Base_SetConfig+0xb4>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d108      	bne.n	80073a4 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2270      	movs	r2, #112	; 0x70
 8007396:	4393      	bics	r3, r2
 8007398:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	68fa      	ldr	r2, [r7, #12]
 80073a0:	4313      	orrs	r3, r2
 80073a2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	2380      	movs	r3, #128	; 0x80
 80073a8:	05db      	lsls	r3, r3, #23
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d00b      	beq.n	80073c6 <TIM_Base_SetConfig+0x66>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	4a16      	ldr	r2, [pc, #88]	; (800740c <TIM_Base_SetConfig+0xac>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d007      	beq.n	80073c6 <TIM_Base_SetConfig+0x66>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	4a15      	ldr	r2, [pc, #84]	; (8007410 <TIM_Base_SetConfig+0xb0>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d003      	beq.n	80073c6 <TIM_Base_SetConfig+0x66>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4a14      	ldr	r2, [pc, #80]	; (8007414 <TIM_Base_SetConfig+0xb4>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d108      	bne.n	80073d8 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	4a13      	ldr	r2, [pc, #76]	; (8007418 <TIM_Base_SetConfig+0xb8>)
 80073ca:	4013      	ands	r3, r2
 80073cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	68fa      	ldr	r2, [r7, #12]
 80073d4:	4313      	orrs	r3, r2
 80073d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2280      	movs	r2, #128	; 0x80
 80073dc:	4393      	bics	r3, r2
 80073de:	001a      	movs	r2, r3
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	691b      	ldr	r3, [r3, #16]
 80073e4:	4313      	orrs	r3, r2
 80073e6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	689a      	ldr	r2, [r3, #8]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2201      	movs	r2, #1
 8007402:	615a      	str	r2, [r3, #20]
}
 8007404:	46c0      	nop			; (mov r8, r8)
 8007406:	46bd      	mov	sp, r7
 8007408:	b004      	add	sp, #16
 800740a:	bd80      	pop	{r7, pc}
 800740c:	40000400 	.word	0x40000400
 8007410:	40010800 	.word	0x40010800
 8007414:	40011400 	.word	0x40011400
 8007418:	fffffcff 	.word	0xfffffcff

0800741c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b086      	sub	sp, #24
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6a1b      	ldr	r3, [r3, #32]
 800742a:	2201      	movs	r2, #1
 800742c:	4393      	bics	r3, r2
 800742e:	001a      	movs	r2, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6a1b      	ldr	r3, [r3, #32]
 8007438:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	699b      	ldr	r3, [r3, #24]
 8007444:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2270      	movs	r2, #112	; 0x70
 800744a:	4393      	bics	r3, r2
 800744c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2203      	movs	r2, #3
 8007452:	4393      	bics	r3, r2
 8007454:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	68fa      	ldr	r2, [r7, #12]
 800745c:	4313      	orrs	r3, r2
 800745e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	2202      	movs	r2, #2
 8007464:	4393      	bics	r3, r2
 8007466:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	697a      	ldr	r2, [r7, #20]
 800746e:	4313      	orrs	r3, r2
 8007470:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	693a      	ldr	r2, [r7, #16]
 8007476:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	68fa      	ldr	r2, [r7, #12]
 800747c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	685a      	ldr	r2, [r3, #4]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	697a      	ldr	r2, [r7, #20]
 800748a:	621a      	str	r2, [r3, #32]
}
 800748c:	46c0      	nop			; (mov r8, r8)
 800748e:	46bd      	mov	sp, r7
 8007490:	b006      	add	sp, #24
 8007492:	bd80      	pop	{r7, pc}

08007494 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b086      	sub	sp, #24
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6a1b      	ldr	r3, [r3, #32]
 80074a2:	2210      	movs	r2, #16
 80074a4:	4393      	bics	r3, r2
 80074a6:	001a      	movs	r2, r3
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6a1b      	ldr	r3, [r3, #32]
 80074b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	699b      	ldr	r3, [r3, #24]
 80074bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	4a13      	ldr	r2, [pc, #76]	; (8007510 <TIM_OC2_SetConfig+0x7c>)
 80074c2:	4013      	ands	r3, r2
 80074c4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	4a12      	ldr	r2, [pc, #72]	; (8007514 <TIM_OC2_SetConfig+0x80>)
 80074ca:	4013      	ands	r3, r2
 80074cc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	021b      	lsls	r3, r3, #8
 80074d4:	68fa      	ldr	r2, [r7, #12]
 80074d6:	4313      	orrs	r3, r2
 80074d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	2220      	movs	r2, #32
 80074de:	4393      	bics	r3, r2
 80074e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	011b      	lsls	r3, r3, #4
 80074e8:	697a      	ldr	r2, [r7, #20]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	693a      	ldr	r2, [r7, #16]
 80074f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	68fa      	ldr	r2, [r7, #12]
 80074f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	685a      	ldr	r2, [r3, #4]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	697a      	ldr	r2, [r7, #20]
 8007506:	621a      	str	r2, [r3, #32]
}
 8007508:	46c0      	nop			; (mov r8, r8)
 800750a:	46bd      	mov	sp, r7
 800750c:	b006      	add	sp, #24
 800750e:	bd80      	pop	{r7, pc}
 8007510:	ffff8fff 	.word	0xffff8fff
 8007514:	fffffcff 	.word	0xfffffcff

08007518 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b086      	sub	sp, #24
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6a1b      	ldr	r3, [r3, #32]
 8007526:	4a1a      	ldr	r2, [pc, #104]	; (8007590 <TIM_OC3_SetConfig+0x78>)
 8007528:	401a      	ands	r2, r3
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6a1b      	ldr	r3, [r3, #32]
 8007532:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	69db      	ldr	r3, [r3, #28]
 800753e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2270      	movs	r2, #112	; 0x70
 8007544:	4393      	bics	r3, r2
 8007546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2203      	movs	r2, #3
 800754c:	4393      	bics	r3, r2
 800754e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	4313      	orrs	r3, r2
 8007558:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	4a0d      	ldr	r2, [pc, #52]	; (8007594 <TIM_OC3_SetConfig+0x7c>)
 800755e:	4013      	ands	r3, r2
 8007560:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	021b      	lsls	r3, r3, #8
 8007568:	697a      	ldr	r2, [r7, #20]
 800756a:	4313      	orrs	r3, r2
 800756c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	693a      	ldr	r2, [r7, #16]
 8007572:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	68fa      	ldr	r2, [r7, #12]
 8007578:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	685a      	ldr	r2, [r3, #4]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	697a      	ldr	r2, [r7, #20]
 8007586:	621a      	str	r2, [r3, #32]
}
 8007588:	46c0      	nop			; (mov r8, r8)
 800758a:	46bd      	mov	sp, r7
 800758c:	b006      	add	sp, #24
 800758e:	bd80      	pop	{r7, pc}
 8007590:	fffffeff 	.word	0xfffffeff
 8007594:	fffffdff 	.word	0xfffffdff

08007598 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b086      	sub	sp, #24
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6a1b      	ldr	r3, [r3, #32]
 80075a6:	4a1b      	ldr	r2, [pc, #108]	; (8007614 <TIM_OC4_SetConfig+0x7c>)
 80075a8:	401a      	ands	r2, r3
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6a1b      	ldr	r3, [r3, #32]
 80075b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	69db      	ldr	r3, [r3, #28]
 80075be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	4a15      	ldr	r2, [pc, #84]	; (8007618 <TIM_OC4_SetConfig+0x80>)
 80075c4:	4013      	ands	r3, r2
 80075c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	4a14      	ldr	r2, [pc, #80]	; (800761c <TIM_OC4_SetConfig+0x84>)
 80075cc:	4013      	ands	r3, r2
 80075ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	021b      	lsls	r3, r3, #8
 80075d6:	68fa      	ldr	r2, [r7, #12]
 80075d8:	4313      	orrs	r3, r2
 80075da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	4a10      	ldr	r2, [pc, #64]	; (8007620 <TIM_OC4_SetConfig+0x88>)
 80075e0:	4013      	ands	r3, r2
 80075e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	031b      	lsls	r3, r3, #12
 80075ea:	697a      	ldr	r2, [r7, #20]
 80075ec:	4313      	orrs	r3, r2
 80075ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	693a      	ldr	r2, [r7, #16]
 80075f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	68fa      	ldr	r2, [r7, #12]
 80075fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	685a      	ldr	r2, [r3, #4]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	697a      	ldr	r2, [r7, #20]
 8007608:	621a      	str	r2, [r3, #32]
}
 800760a:	46c0      	nop			; (mov r8, r8)
 800760c:	46bd      	mov	sp, r7
 800760e:	b006      	add	sp, #24
 8007610:	bd80      	pop	{r7, pc}
 8007612:	46c0      	nop			; (mov r8, r8)
 8007614:	ffffefff 	.word	0xffffefff
 8007618:	ffff8fff 	.word	0xffff8fff
 800761c:	fffffcff 	.word	0xfffffcff
 8007620:	ffffdfff 	.word	0xffffdfff

08007624 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b086      	sub	sp, #24
 8007628:	af00      	add	r7, sp, #0
 800762a:	60f8      	str	r0, [r7, #12]
 800762c:	60b9      	str	r1, [r7, #8]
 800762e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	6a1b      	ldr	r3, [r3, #32]
 8007634:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	6a1b      	ldr	r3, [r3, #32]
 800763a:	2201      	movs	r2, #1
 800763c:	4393      	bics	r3, r2
 800763e:	001a      	movs	r2, r3
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	699b      	ldr	r3, [r3, #24]
 8007648:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	22f0      	movs	r2, #240	; 0xf0
 800764e:	4393      	bics	r3, r2
 8007650:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	011b      	lsls	r3, r3, #4
 8007656:	693a      	ldr	r2, [r7, #16]
 8007658:	4313      	orrs	r3, r2
 800765a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	220a      	movs	r2, #10
 8007660:	4393      	bics	r3, r2
 8007662:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007664:	697a      	ldr	r2, [r7, #20]
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	4313      	orrs	r3, r2
 800766a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	693a      	ldr	r2, [r7, #16]
 8007670:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	697a      	ldr	r2, [r7, #20]
 8007676:	621a      	str	r2, [r3, #32]
}
 8007678:	46c0      	nop			; (mov r8, r8)
 800767a:	46bd      	mov	sp, r7
 800767c:	b006      	add	sp, #24
 800767e:	bd80      	pop	{r7, pc}

08007680 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b086      	sub	sp, #24
 8007684:	af00      	add	r7, sp, #0
 8007686:	60f8      	str	r0, [r7, #12]
 8007688:	60b9      	str	r1, [r7, #8]
 800768a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	6a1b      	ldr	r3, [r3, #32]
 8007690:	2210      	movs	r2, #16
 8007692:	4393      	bics	r3, r2
 8007694:	001a      	movs	r2, r3
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	699b      	ldr	r3, [r3, #24]
 800769e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6a1b      	ldr	r3, [r3, #32]
 80076a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	4a0d      	ldr	r2, [pc, #52]	; (80076e0 <TIM_TI2_ConfigInputStage+0x60>)
 80076aa:	4013      	ands	r3, r2
 80076ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	031b      	lsls	r3, r3, #12
 80076b2:	697a      	ldr	r2, [r7, #20]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	22a0      	movs	r2, #160	; 0xa0
 80076bc:	4393      	bics	r3, r2
 80076be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	011b      	lsls	r3, r3, #4
 80076c4:	693a      	ldr	r2, [r7, #16]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	697a      	ldr	r2, [r7, #20]
 80076ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	693a      	ldr	r2, [r7, #16]
 80076d4:	621a      	str	r2, [r3, #32]
}
 80076d6:	46c0      	nop			; (mov r8, r8)
 80076d8:	46bd      	mov	sp, r7
 80076da:	b006      	add	sp, #24
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	46c0      	nop			; (mov r8, r8)
 80076e0:	ffff0fff 	.word	0xffff0fff

080076e4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2270      	movs	r2, #112	; 0x70
 80076f8:	4393      	bics	r3, r2
 80076fa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80076fc:	683a      	ldr	r2, [r7, #0]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	4313      	orrs	r3, r2
 8007702:	2207      	movs	r2, #7
 8007704:	4313      	orrs	r3, r2
 8007706:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	68fa      	ldr	r2, [r7, #12]
 800770c:	609a      	str	r2, [r3, #8]
}
 800770e:	46c0      	nop			; (mov r8, r8)
 8007710:	46bd      	mov	sp, r7
 8007712:	b004      	add	sp, #16
 8007714:	bd80      	pop	{r7, pc}
	...

08007718 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b086      	sub	sp, #24
 800771c:	af00      	add	r7, sp, #0
 800771e:	60f8      	str	r0, [r7, #12]
 8007720:	60b9      	str	r1, [r7, #8]
 8007722:	607a      	str	r2, [r7, #4]
 8007724:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	4a09      	ldr	r2, [pc, #36]	; (8007754 <TIM_ETR_SetConfig+0x3c>)
 8007730:	4013      	ands	r3, r2
 8007732:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	021a      	lsls	r2, r3, #8
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	431a      	orrs	r2, r3
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	4313      	orrs	r3, r2
 8007740:	697a      	ldr	r2, [r7, #20]
 8007742:	4313      	orrs	r3, r2
 8007744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	697a      	ldr	r2, [r7, #20]
 800774a:	609a      	str	r2, [r3, #8]
}
 800774c:	46c0      	nop			; (mov r8, r8)
 800774e:	46bd      	mov	sp, r7
 8007750:	b006      	add	sp, #24
 8007752:	bd80      	pop	{r7, pc}
 8007754:	ffff00ff 	.word	0xffff00ff

08007758 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2238      	movs	r2, #56	; 0x38
 8007766:	5c9b      	ldrb	r3, [r3, r2]
 8007768:	2b01      	cmp	r3, #1
 800776a:	d101      	bne.n	8007770 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800776c:	2302      	movs	r3, #2
 800776e:	e032      	b.n	80077d6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2238      	movs	r2, #56	; 0x38
 8007774:	2101      	movs	r1, #1
 8007776:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2239      	movs	r2, #57	; 0x39
 800777c:	2102      	movs	r1, #2
 800777e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2270      	movs	r2, #112	; 0x70
 8007794:	4393      	bics	r3, r2
 8007796:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	68fa      	ldr	r2, [r7, #12]
 800779e:	4313      	orrs	r3, r2
 80077a0:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	2280      	movs	r2, #128	; 0x80
 80077a6:	4393      	bics	r3, r2
 80077a8:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	68ba      	ldr	r2, [r7, #8]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	68ba      	ldr	r2, [r7, #8]
 80077c2:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2239      	movs	r2, #57	; 0x39
 80077c8:	2101      	movs	r1, #1
 80077ca:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2238      	movs	r2, #56	; 0x38
 80077d0:	2100      	movs	r1, #0
 80077d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	0018      	movs	r0, r3
 80077d8:	46bd      	mov	sp, r7
 80077da:	b004      	add	sp, #16
 80077dc:	bd80      	pop	{r7, pc}

080077de <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 80077de:	b580      	push	{r7, lr}
 80077e0:	b082      	sub	sp, #8
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
 80077e6:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2238      	movs	r2, #56	; 0x38
 80077ec:	5c9b      	ldrb	r3, [r3, r2]
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d101      	bne.n	80077f6 <HAL_TIMEx_RemapConfig+0x18>
 80077f2:	2302      	movs	r3, #2
 80077f4:	e00c      	b.n	8007810 <HAL_TIMEx_RemapConfig+0x32>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2238      	movs	r2, #56	; 0x38
 80077fa:	2101      	movs	r1, #1
 80077fc:	5499      	strb	r1, [r3, r2]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	683a      	ldr	r2, [r7, #0]
 8007804:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2238      	movs	r2, #56	; 0x38
 800780a:	2100      	movs	r1, #0
 800780c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800780e:	2300      	movs	r3, #0
}
 8007810:	0018      	movs	r0, r3
 8007812:	46bd      	mov	sp, r7
 8007814:	b002      	add	sp, #8
 8007816:	bd80      	pop	{r7, pc}

08007818 <__errno>:
 8007818:	4b01      	ldr	r3, [pc, #4]	; (8007820 <__errno+0x8>)
 800781a:	6818      	ldr	r0, [r3, #0]
 800781c:	4770      	bx	lr
 800781e:	46c0      	nop			; (mov r8, r8)
 8007820:	20000058 	.word	0x20000058

08007824 <__libc_init_array>:
 8007824:	b570      	push	{r4, r5, r6, lr}
 8007826:	2600      	movs	r6, #0
 8007828:	4d0c      	ldr	r5, [pc, #48]	; (800785c <__libc_init_array+0x38>)
 800782a:	4c0d      	ldr	r4, [pc, #52]	; (8007860 <__libc_init_array+0x3c>)
 800782c:	1b64      	subs	r4, r4, r5
 800782e:	10a4      	asrs	r4, r4, #2
 8007830:	42a6      	cmp	r6, r4
 8007832:	d109      	bne.n	8007848 <__libc_init_array+0x24>
 8007834:	2600      	movs	r6, #0
 8007836:	f000 fc29 	bl	800808c <_init>
 800783a:	4d0a      	ldr	r5, [pc, #40]	; (8007864 <__libc_init_array+0x40>)
 800783c:	4c0a      	ldr	r4, [pc, #40]	; (8007868 <__libc_init_array+0x44>)
 800783e:	1b64      	subs	r4, r4, r5
 8007840:	10a4      	asrs	r4, r4, #2
 8007842:	42a6      	cmp	r6, r4
 8007844:	d105      	bne.n	8007852 <__libc_init_array+0x2e>
 8007846:	bd70      	pop	{r4, r5, r6, pc}
 8007848:	00b3      	lsls	r3, r6, #2
 800784a:	58eb      	ldr	r3, [r5, r3]
 800784c:	4798      	blx	r3
 800784e:	3601      	adds	r6, #1
 8007850:	e7ee      	b.n	8007830 <__libc_init_array+0xc>
 8007852:	00b3      	lsls	r3, r6, #2
 8007854:	58eb      	ldr	r3, [r5, r3]
 8007856:	4798      	blx	r3
 8007858:	3601      	adds	r6, #1
 800785a:	e7f2      	b.n	8007842 <__libc_init_array+0x1e>
 800785c:	08008850 	.word	0x08008850
 8007860:	08008850 	.word	0x08008850
 8007864:	08008850 	.word	0x08008850
 8007868:	08008854 	.word	0x08008854

0800786c <memcpy>:
 800786c:	2300      	movs	r3, #0
 800786e:	b510      	push	{r4, lr}
 8007870:	429a      	cmp	r2, r3
 8007872:	d100      	bne.n	8007876 <memcpy+0xa>
 8007874:	bd10      	pop	{r4, pc}
 8007876:	5ccc      	ldrb	r4, [r1, r3]
 8007878:	54c4      	strb	r4, [r0, r3]
 800787a:	3301      	adds	r3, #1
 800787c:	e7f8      	b.n	8007870 <memcpy+0x4>

0800787e <memset>:
 800787e:	0003      	movs	r3, r0
 8007880:	1812      	adds	r2, r2, r0
 8007882:	4293      	cmp	r3, r2
 8007884:	d100      	bne.n	8007888 <memset+0xa>
 8007886:	4770      	bx	lr
 8007888:	7019      	strb	r1, [r3, #0]
 800788a:	3301      	adds	r3, #1
 800788c:	e7f9      	b.n	8007882 <memset+0x4>
	...

08007890 <siprintf>:
 8007890:	b40e      	push	{r1, r2, r3}
 8007892:	b500      	push	{lr}
 8007894:	490b      	ldr	r1, [pc, #44]	; (80078c4 <siprintf+0x34>)
 8007896:	b09c      	sub	sp, #112	; 0x70
 8007898:	ab1d      	add	r3, sp, #116	; 0x74
 800789a:	9002      	str	r0, [sp, #8]
 800789c:	9006      	str	r0, [sp, #24]
 800789e:	9107      	str	r1, [sp, #28]
 80078a0:	9104      	str	r1, [sp, #16]
 80078a2:	4809      	ldr	r0, [pc, #36]	; (80078c8 <siprintf+0x38>)
 80078a4:	4909      	ldr	r1, [pc, #36]	; (80078cc <siprintf+0x3c>)
 80078a6:	cb04      	ldmia	r3!, {r2}
 80078a8:	9105      	str	r1, [sp, #20]
 80078aa:	6800      	ldr	r0, [r0, #0]
 80078ac:	a902      	add	r1, sp, #8
 80078ae:	9301      	str	r3, [sp, #4]
 80078b0:	f000 f870 	bl	8007994 <_svfiprintf_r>
 80078b4:	2300      	movs	r3, #0
 80078b6:	9a02      	ldr	r2, [sp, #8]
 80078b8:	7013      	strb	r3, [r2, #0]
 80078ba:	b01c      	add	sp, #112	; 0x70
 80078bc:	bc08      	pop	{r3}
 80078be:	b003      	add	sp, #12
 80078c0:	4718      	bx	r3
 80078c2:	46c0      	nop			; (mov r8, r8)
 80078c4:	7fffffff 	.word	0x7fffffff
 80078c8:	20000058 	.word	0x20000058
 80078cc:	ffff0208 	.word	0xffff0208

080078d0 <__ssputs_r>:
 80078d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078d2:	688e      	ldr	r6, [r1, #8]
 80078d4:	b085      	sub	sp, #20
 80078d6:	0007      	movs	r7, r0
 80078d8:	000c      	movs	r4, r1
 80078da:	9203      	str	r2, [sp, #12]
 80078dc:	9301      	str	r3, [sp, #4]
 80078de:	429e      	cmp	r6, r3
 80078e0:	d83c      	bhi.n	800795c <__ssputs_r+0x8c>
 80078e2:	2390      	movs	r3, #144	; 0x90
 80078e4:	898a      	ldrh	r2, [r1, #12]
 80078e6:	00db      	lsls	r3, r3, #3
 80078e8:	421a      	tst	r2, r3
 80078ea:	d034      	beq.n	8007956 <__ssputs_r+0x86>
 80078ec:	2503      	movs	r5, #3
 80078ee:	6909      	ldr	r1, [r1, #16]
 80078f0:	6823      	ldr	r3, [r4, #0]
 80078f2:	1a5b      	subs	r3, r3, r1
 80078f4:	9302      	str	r3, [sp, #8]
 80078f6:	6963      	ldr	r3, [r4, #20]
 80078f8:	9802      	ldr	r0, [sp, #8]
 80078fa:	435d      	muls	r5, r3
 80078fc:	0feb      	lsrs	r3, r5, #31
 80078fe:	195d      	adds	r5, r3, r5
 8007900:	9b01      	ldr	r3, [sp, #4]
 8007902:	106d      	asrs	r5, r5, #1
 8007904:	3301      	adds	r3, #1
 8007906:	181b      	adds	r3, r3, r0
 8007908:	42ab      	cmp	r3, r5
 800790a:	d900      	bls.n	800790e <__ssputs_r+0x3e>
 800790c:	001d      	movs	r5, r3
 800790e:	0553      	lsls	r3, r2, #21
 8007910:	d532      	bpl.n	8007978 <__ssputs_r+0xa8>
 8007912:	0029      	movs	r1, r5
 8007914:	0038      	movs	r0, r7
 8007916:	f000 fb19 	bl	8007f4c <_malloc_r>
 800791a:	1e06      	subs	r6, r0, #0
 800791c:	d109      	bne.n	8007932 <__ssputs_r+0x62>
 800791e:	230c      	movs	r3, #12
 8007920:	603b      	str	r3, [r7, #0]
 8007922:	2340      	movs	r3, #64	; 0x40
 8007924:	2001      	movs	r0, #1
 8007926:	89a2      	ldrh	r2, [r4, #12]
 8007928:	4240      	negs	r0, r0
 800792a:	4313      	orrs	r3, r2
 800792c:	81a3      	strh	r3, [r4, #12]
 800792e:	b005      	add	sp, #20
 8007930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007932:	9a02      	ldr	r2, [sp, #8]
 8007934:	6921      	ldr	r1, [r4, #16]
 8007936:	f7ff ff99 	bl	800786c <memcpy>
 800793a:	89a3      	ldrh	r3, [r4, #12]
 800793c:	4a14      	ldr	r2, [pc, #80]	; (8007990 <__ssputs_r+0xc0>)
 800793e:	401a      	ands	r2, r3
 8007940:	2380      	movs	r3, #128	; 0x80
 8007942:	4313      	orrs	r3, r2
 8007944:	81a3      	strh	r3, [r4, #12]
 8007946:	9b02      	ldr	r3, [sp, #8]
 8007948:	6126      	str	r6, [r4, #16]
 800794a:	18f6      	adds	r6, r6, r3
 800794c:	6026      	str	r6, [r4, #0]
 800794e:	6165      	str	r5, [r4, #20]
 8007950:	9e01      	ldr	r6, [sp, #4]
 8007952:	1aed      	subs	r5, r5, r3
 8007954:	60a5      	str	r5, [r4, #8]
 8007956:	9b01      	ldr	r3, [sp, #4]
 8007958:	429e      	cmp	r6, r3
 800795a:	d900      	bls.n	800795e <__ssputs_r+0x8e>
 800795c:	9e01      	ldr	r6, [sp, #4]
 800795e:	0032      	movs	r2, r6
 8007960:	9903      	ldr	r1, [sp, #12]
 8007962:	6820      	ldr	r0, [r4, #0]
 8007964:	f000 fa95 	bl	8007e92 <memmove>
 8007968:	68a3      	ldr	r3, [r4, #8]
 800796a:	2000      	movs	r0, #0
 800796c:	1b9b      	subs	r3, r3, r6
 800796e:	60a3      	str	r3, [r4, #8]
 8007970:	6823      	ldr	r3, [r4, #0]
 8007972:	199e      	adds	r6, r3, r6
 8007974:	6026      	str	r6, [r4, #0]
 8007976:	e7da      	b.n	800792e <__ssputs_r+0x5e>
 8007978:	002a      	movs	r2, r5
 800797a:	0038      	movs	r0, r7
 800797c:	f000 fb44 	bl	8008008 <_realloc_r>
 8007980:	1e06      	subs	r6, r0, #0
 8007982:	d1e0      	bne.n	8007946 <__ssputs_r+0x76>
 8007984:	6921      	ldr	r1, [r4, #16]
 8007986:	0038      	movs	r0, r7
 8007988:	f000 fa96 	bl	8007eb8 <_free_r>
 800798c:	e7c7      	b.n	800791e <__ssputs_r+0x4e>
 800798e:	46c0      	nop			; (mov r8, r8)
 8007990:	fffffb7f 	.word	0xfffffb7f

08007994 <_svfiprintf_r>:
 8007994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007996:	b0a1      	sub	sp, #132	; 0x84
 8007998:	9003      	str	r0, [sp, #12]
 800799a:	001d      	movs	r5, r3
 800799c:	898b      	ldrh	r3, [r1, #12]
 800799e:	000f      	movs	r7, r1
 80079a0:	0016      	movs	r6, r2
 80079a2:	061b      	lsls	r3, r3, #24
 80079a4:	d511      	bpl.n	80079ca <_svfiprintf_r+0x36>
 80079a6:	690b      	ldr	r3, [r1, #16]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d10e      	bne.n	80079ca <_svfiprintf_r+0x36>
 80079ac:	2140      	movs	r1, #64	; 0x40
 80079ae:	f000 facd 	bl	8007f4c <_malloc_r>
 80079b2:	6038      	str	r0, [r7, #0]
 80079b4:	6138      	str	r0, [r7, #16]
 80079b6:	2800      	cmp	r0, #0
 80079b8:	d105      	bne.n	80079c6 <_svfiprintf_r+0x32>
 80079ba:	230c      	movs	r3, #12
 80079bc:	9a03      	ldr	r2, [sp, #12]
 80079be:	3801      	subs	r0, #1
 80079c0:	6013      	str	r3, [r2, #0]
 80079c2:	b021      	add	sp, #132	; 0x84
 80079c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079c6:	2340      	movs	r3, #64	; 0x40
 80079c8:	617b      	str	r3, [r7, #20]
 80079ca:	2300      	movs	r3, #0
 80079cc:	ac08      	add	r4, sp, #32
 80079ce:	6163      	str	r3, [r4, #20]
 80079d0:	3320      	adds	r3, #32
 80079d2:	7663      	strb	r3, [r4, #25]
 80079d4:	3310      	adds	r3, #16
 80079d6:	76a3      	strb	r3, [r4, #26]
 80079d8:	9507      	str	r5, [sp, #28]
 80079da:	0035      	movs	r5, r6
 80079dc:	782b      	ldrb	r3, [r5, #0]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d001      	beq.n	80079e6 <_svfiprintf_r+0x52>
 80079e2:	2b25      	cmp	r3, #37	; 0x25
 80079e4:	d146      	bne.n	8007a74 <_svfiprintf_r+0xe0>
 80079e6:	1bab      	subs	r3, r5, r6
 80079e8:	9305      	str	r3, [sp, #20]
 80079ea:	d00c      	beq.n	8007a06 <_svfiprintf_r+0x72>
 80079ec:	0032      	movs	r2, r6
 80079ee:	0039      	movs	r1, r7
 80079f0:	9803      	ldr	r0, [sp, #12]
 80079f2:	f7ff ff6d 	bl	80078d0 <__ssputs_r>
 80079f6:	1c43      	adds	r3, r0, #1
 80079f8:	d100      	bne.n	80079fc <_svfiprintf_r+0x68>
 80079fa:	e0ae      	b.n	8007b5a <_svfiprintf_r+0x1c6>
 80079fc:	6962      	ldr	r2, [r4, #20]
 80079fe:	9b05      	ldr	r3, [sp, #20]
 8007a00:	4694      	mov	ip, r2
 8007a02:	4463      	add	r3, ip
 8007a04:	6163      	str	r3, [r4, #20]
 8007a06:	782b      	ldrb	r3, [r5, #0]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d100      	bne.n	8007a0e <_svfiprintf_r+0x7a>
 8007a0c:	e0a5      	b.n	8007b5a <_svfiprintf_r+0x1c6>
 8007a0e:	2201      	movs	r2, #1
 8007a10:	2300      	movs	r3, #0
 8007a12:	4252      	negs	r2, r2
 8007a14:	6062      	str	r2, [r4, #4]
 8007a16:	a904      	add	r1, sp, #16
 8007a18:	3254      	adds	r2, #84	; 0x54
 8007a1a:	1852      	adds	r2, r2, r1
 8007a1c:	1c6e      	adds	r6, r5, #1
 8007a1e:	6023      	str	r3, [r4, #0]
 8007a20:	60e3      	str	r3, [r4, #12]
 8007a22:	60a3      	str	r3, [r4, #8]
 8007a24:	7013      	strb	r3, [r2, #0]
 8007a26:	65a3      	str	r3, [r4, #88]	; 0x58
 8007a28:	7831      	ldrb	r1, [r6, #0]
 8007a2a:	2205      	movs	r2, #5
 8007a2c:	4853      	ldr	r0, [pc, #332]	; (8007b7c <_svfiprintf_r+0x1e8>)
 8007a2e:	f000 fa25 	bl	8007e7c <memchr>
 8007a32:	1c75      	adds	r5, r6, #1
 8007a34:	2800      	cmp	r0, #0
 8007a36:	d11f      	bne.n	8007a78 <_svfiprintf_r+0xe4>
 8007a38:	6822      	ldr	r2, [r4, #0]
 8007a3a:	06d3      	lsls	r3, r2, #27
 8007a3c:	d504      	bpl.n	8007a48 <_svfiprintf_r+0xb4>
 8007a3e:	2353      	movs	r3, #83	; 0x53
 8007a40:	a904      	add	r1, sp, #16
 8007a42:	185b      	adds	r3, r3, r1
 8007a44:	2120      	movs	r1, #32
 8007a46:	7019      	strb	r1, [r3, #0]
 8007a48:	0713      	lsls	r3, r2, #28
 8007a4a:	d504      	bpl.n	8007a56 <_svfiprintf_r+0xc2>
 8007a4c:	2353      	movs	r3, #83	; 0x53
 8007a4e:	a904      	add	r1, sp, #16
 8007a50:	185b      	adds	r3, r3, r1
 8007a52:	212b      	movs	r1, #43	; 0x2b
 8007a54:	7019      	strb	r1, [r3, #0]
 8007a56:	7833      	ldrb	r3, [r6, #0]
 8007a58:	2b2a      	cmp	r3, #42	; 0x2a
 8007a5a:	d016      	beq.n	8007a8a <_svfiprintf_r+0xf6>
 8007a5c:	0035      	movs	r5, r6
 8007a5e:	2100      	movs	r1, #0
 8007a60:	200a      	movs	r0, #10
 8007a62:	68e3      	ldr	r3, [r4, #12]
 8007a64:	782a      	ldrb	r2, [r5, #0]
 8007a66:	1c6e      	adds	r6, r5, #1
 8007a68:	3a30      	subs	r2, #48	; 0x30
 8007a6a:	2a09      	cmp	r2, #9
 8007a6c:	d94e      	bls.n	8007b0c <_svfiprintf_r+0x178>
 8007a6e:	2900      	cmp	r1, #0
 8007a70:	d018      	beq.n	8007aa4 <_svfiprintf_r+0x110>
 8007a72:	e010      	b.n	8007a96 <_svfiprintf_r+0x102>
 8007a74:	3501      	adds	r5, #1
 8007a76:	e7b1      	b.n	80079dc <_svfiprintf_r+0x48>
 8007a78:	4b40      	ldr	r3, [pc, #256]	; (8007b7c <_svfiprintf_r+0x1e8>)
 8007a7a:	6822      	ldr	r2, [r4, #0]
 8007a7c:	1ac0      	subs	r0, r0, r3
 8007a7e:	2301      	movs	r3, #1
 8007a80:	4083      	lsls	r3, r0
 8007a82:	4313      	orrs	r3, r2
 8007a84:	6023      	str	r3, [r4, #0]
 8007a86:	002e      	movs	r6, r5
 8007a88:	e7ce      	b.n	8007a28 <_svfiprintf_r+0x94>
 8007a8a:	9b07      	ldr	r3, [sp, #28]
 8007a8c:	1d19      	adds	r1, r3, #4
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	9107      	str	r1, [sp, #28]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	db01      	blt.n	8007a9a <_svfiprintf_r+0x106>
 8007a96:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a98:	e004      	b.n	8007aa4 <_svfiprintf_r+0x110>
 8007a9a:	425b      	negs	r3, r3
 8007a9c:	60e3      	str	r3, [r4, #12]
 8007a9e:	2302      	movs	r3, #2
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	6023      	str	r3, [r4, #0]
 8007aa4:	782b      	ldrb	r3, [r5, #0]
 8007aa6:	2b2e      	cmp	r3, #46	; 0x2e
 8007aa8:	d10a      	bne.n	8007ac0 <_svfiprintf_r+0x12c>
 8007aaa:	786b      	ldrb	r3, [r5, #1]
 8007aac:	2b2a      	cmp	r3, #42	; 0x2a
 8007aae:	d135      	bne.n	8007b1c <_svfiprintf_r+0x188>
 8007ab0:	9b07      	ldr	r3, [sp, #28]
 8007ab2:	3502      	adds	r5, #2
 8007ab4:	1d1a      	adds	r2, r3, #4
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	9207      	str	r2, [sp, #28]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	db2b      	blt.n	8007b16 <_svfiprintf_r+0x182>
 8007abe:	9309      	str	r3, [sp, #36]	; 0x24
 8007ac0:	4e2f      	ldr	r6, [pc, #188]	; (8007b80 <_svfiprintf_r+0x1ec>)
 8007ac2:	7829      	ldrb	r1, [r5, #0]
 8007ac4:	2203      	movs	r2, #3
 8007ac6:	0030      	movs	r0, r6
 8007ac8:	f000 f9d8 	bl	8007e7c <memchr>
 8007acc:	2800      	cmp	r0, #0
 8007ace:	d006      	beq.n	8007ade <_svfiprintf_r+0x14a>
 8007ad0:	2340      	movs	r3, #64	; 0x40
 8007ad2:	1b80      	subs	r0, r0, r6
 8007ad4:	4083      	lsls	r3, r0
 8007ad6:	6822      	ldr	r2, [r4, #0]
 8007ad8:	3501      	adds	r5, #1
 8007ada:	4313      	orrs	r3, r2
 8007adc:	6023      	str	r3, [r4, #0]
 8007ade:	7829      	ldrb	r1, [r5, #0]
 8007ae0:	2206      	movs	r2, #6
 8007ae2:	4828      	ldr	r0, [pc, #160]	; (8007b84 <_svfiprintf_r+0x1f0>)
 8007ae4:	1c6e      	adds	r6, r5, #1
 8007ae6:	7621      	strb	r1, [r4, #24]
 8007ae8:	f000 f9c8 	bl	8007e7c <memchr>
 8007aec:	2800      	cmp	r0, #0
 8007aee:	d03c      	beq.n	8007b6a <_svfiprintf_r+0x1d6>
 8007af0:	4b25      	ldr	r3, [pc, #148]	; (8007b88 <_svfiprintf_r+0x1f4>)
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d125      	bne.n	8007b42 <_svfiprintf_r+0x1ae>
 8007af6:	2207      	movs	r2, #7
 8007af8:	9b07      	ldr	r3, [sp, #28]
 8007afa:	3307      	adds	r3, #7
 8007afc:	4393      	bics	r3, r2
 8007afe:	3308      	adds	r3, #8
 8007b00:	9307      	str	r3, [sp, #28]
 8007b02:	6963      	ldr	r3, [r4, #20]
 8007b04:	9a04      	ldr	r2, [sp, #16]
 8007b06:	189b      	adds	r3, r3, r2
 8007b08:	6163      	str	r3, [r4, #20]
 8007b0a:	e766      	b.n	80079da <_svfiprintf_r+0x46>
 8007b0c:	4343      	muls	r3, r0
 8007b0e:	2101      	movs	r1, #1
 8007b10:	189b      	adds	r3, r3, r2
 8007b12:	0035      	movs	r5, r6
 8007b14:	e7a6      	b.n	8007a64 <_svfiprintf_r+0xd0>
 8007b16:	2301      	movs	r3, #1
 8007b18:	425b      	negs	r3, r3
 8007b1a:	e7d0      	b.n	8007abe <_svfiprintf_r+0x12a>
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	200a      	movs	r0, #10
 8007b20:	001a      	movs	r2, r3
 8007b22:	3501      	adds	r5, #1
 8007b24:	6063      	str	r3, [r4, #4]
 8007b26:	7829      	ldrb	r1, [r5, #0]
 8007b28:	1c6e      	adds	r6, r5, #1
 8007b2a:	3930      	subs	r1, #48	; 0x30
 8007b2c:	2909      	cmp	r1, #9
 8007b2e:	d903      	bls.n	8007b38 <_svfiprintf_r+0x1a4>
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d0c5      	beq.n	8007ac0 <_svfiprintf_r+0x12c>
 8007b34:	9209      	str	r2, [sp, #36]	; 0x24
 8007b36:	e7c3      	b.n	8007ac0 <_svfiprintf_r+0x12c>
 8007b38:	4342      	muls	r2, r0
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	1852      	adds	r2, r2, r1
 8007b3e:	0035      	movs	r5, r6
 8007b40:	e7f1      	b.n	8007b26 <_svfiprintf_r+0x192>
 8007b42:	ab07      	add	r3, sp, #28
 8007b44:	9300      	str	r3, [sp, #0]
 8007b46:	003a      	movs	r2, r7
 8007b48:	4b10      	ldr	r3, [pc, #64]	; (8007b8c <_svfiprintf_r+0x1f8>)
 8007b4a:	0021      	movs	r1, r4
 8007b4c:	9803      	ldr	r0, [sp, #12]
 8007b4e:	e000      	b.n	8007b52 <_svfiprintf_r+0x1be>
 8007b50:	bf00      	nop
 8007b52:	9004      	str	r0, [sp, #16]
 8007b54:	9b04      	ldr	r3, [sp, #16]
 8007b56:	3301      	adds	r3, #1
 8007b58:	d1d3      	bne.n	8007b02 <_svfiprintf_r+0x16e>
 8007b5a:	89bb      	ldrh	r3, [r7, #12]
 8007b5c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007b5e:	065b      	lsls	r3, r3, #25
 8007b60:	d400      	bmi.n	8007b64 <_svfiprintf_r+0x1d0>
 8007b62:	e72e      	b.n	80079c2 <_svfiprintf_r+0x2e>
 8007b64:	2001      	movs	r0, #1
 8007b66:	4240      	negs	r0, r0
 8007b68:	e72b      	b.n	80079c2 <_svfiprintf_r+0x2e>
 8007b6a:	ab07      	add	r3, sp, #28
 8007b6c:	9300      	str	r3, [sp, #0]
 8007b6e:	003a      	movs	r2, r7
 8007b70:	4b06      	ldr	r3, [pc, #24]	; (8007b8c <_svfiprintf_r+0x1f8>)
 8007b72:	0021      	movs	r1, r4
 8007b74:	9803      	ldr	r0, [sp, #12]
 8007b76:	f000 f879 	bl	8007c6c <_printf_i>
 8007b7a:	e7ea      	b.n	8007b52 <_svfiprintf_r+0x1be>
 8007b7c:	0800881d 	.word	0x0800881d
 8007b80:	08008823 	.word	0x08008823
 8007b84:	08008827 	.word	0x08008827
 8007b88:	00000000 	.word	0x00000000
 8007b8c:	080078d1 	.word	0x080078d1

08007b90 <_printf_common>:
 8007b90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b92:	0015      	movs	r5, r2
 8007b94:	9301      	str	r3, [sp, #4]
 8007b96:	688a      	ldr	r2, [r1, #8]
 8007b98:	690b      	ldr	r3, [r1, #16]
 8007b9a:	9000      	str	r0, [sp, #0]
 8007b9c:	000c      	movs	r4, r1
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	da00      	bge.n	8007ba4 <_printf_common+0x14>
 8007ba2:	0013      	movs	r3, r2
 8007ba4:	0022      	movs	r2, r4
 8007ba6:	602b      	str	r3, [r5, #0]
 8007ba8:	3243      	adds	r2, #67	; 0x43
 8007baa:	7812      	ldrb	r2, [r2, #0]
 8007bac:	2a00      	cmp	r2, #0
 8007bae:	d001      	beq.n	8007bb4 <_printf_common+0x24>
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	602b      	str	r3, [r5, #0]
 8007bb4:	6823      	ldr	r3, [r4, #0]
 8007bb6:	069b      	lsls	r3, r3, #26
 8007bb8:	d502      	bpl.n	8007bc0 <_printf_common+0x30>
 8007bba:	682b      	ldr	r3, [r5, #0]
 8007bbc:	3302      	adds	r3, #2
 8007bbe:	602b      	str	r3, [r5, #0]
 8007bc0:	2706      	movs	r7, #6
 8007bc2:	6823      	ldr	r3, [r4, #0]
 8007bc4:	401f      	ands	r7, r3
 8007bc6:	d027      	beq.n	8007c18 <_printf_common+0x88>
 8007bc8:	0023      	movs	r3, r4
 8007bca:	3343      	adds	r3, #67	; 0x43
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	1e5a      	subs	r2, r3, #1
 8007bd0:	4193      	sbcs	r3, r2
 8007bd2:	6822      	ldr	r2, [r4, #0]
 8007bd4:	0692      	lsls	r2, r2, #26
 8007bd6:	d430      	bmi.n	8007c3a <_printf_common+0xaa>
 8007bd8:	0022      	movs	r2, r4
 8007bda:	9901      	ldr	r1, [sp, #4]
 8007bdc:	3243      	adds	r2, #67	; 0x43
 8007bde:	9800      	ldr	r0, [sp, #0]
 8007be0:	9e08      	ldr	r6, [sp, #32]
 8007be2:	47b0      	blx	r6
 8007be4:	1c43      	adds	r3, r0, #1
 8007be6:	d025      	beq.n	8007c34 <_printf_common+0xa4>
 8007be8:	2306      	movs	r3, #6
 8007bea:	6820      	ldr	r0, [r4, #0]
 8007bec:	682a      	ldr	r2, [r5, #0]
 8007bee:	68e1      	ldr	r1, [r4, #12]
 8007bf0:	4003      	ands	r3, r0
 8007bf2:	2500      	movs	r5, #0
 8007bf4:	2b04      	cmp	r3, #4
 8007bf6:	d103      	bne.n	8007c00 <_printf_common+0x70>
 8007bf8:	1a8d      	subs	r5, r1, r2
 8007bfa:	43eb      	mvns	r3, r5
 8007bfc:	17db      	asrs	r3, r3, #31
 8007bfe:	401d      	ands	r5, r3
 8007c00:	68a3      	ldr	r3, [r4, #8]
 8007c02:	6922      	ldr	r2, [r4, #16]
 8007c04:	4293      	cmp	r3, r2
 8007c06:	dd01      	ble.n	8007c0c <_printf_common+0x7c>
 8007c08:	1a9b      	subs	r3, r3, r2
 8007c0a:	18ed      	adds	r5, r5, r3
 8007c0c:	2700      	movs	r7, #0
 8007c0e:	42bd      	cmp	r5, r7
 8007c10:	d120      	bne.n	8007c54 <_printf_common+0xc4>
 8007c12:	2000      	movs	r0, #0
 8007c14:	e010      	b.n	8007c38 <_printf_common+0xa8>
 8007c16:	3701      	adds	r7, #1
 8007c18:	68e3      	ldr	r3, [r4, #12]
 8007c1a:	682a      	ldr	r2, [r5, #0]
 8007c1c:	1a9b      	subs	r3, r3, r2
 8007c1e:	42bb      	cmp	r3, r7
 8007c20:	ddd2      	ble.n	8007bc8 <_printf_common+0x38>
 8007c22:	0022      	movs	r2, r4
 8007c24:	2301      	movs	r3, #1
 8007c26:	3219      	adds	r2, #25
 8007c28:	9901      	ldr	r1, [sp, #4]
 8007c2a:	9800      	ldr	r0, [sp, #0]
 8007c2c:	9e08      	ldr	r6, [sp, #32]
 8007c2e:	47b0      	blx	r6
 8007c30:	1c43      	adds	r3, r0, #1
 8007c32:	d1f0      	bne.n	8007c16 <_printf_common+0x86>
 8007c34:	2001      	movs	r0, #1
 8007c36:	4240      	negs	r0, r0
 8007c38:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007c3a:	2030      	movs	r0, #48	; 0x30
 8007c3c:	18e1      	adds	r1, r4, r3
 8007c3e:	3143      	adds	r1, #67	; 0x43
 8007c40:	7008      	strb	r0, [r1, #0]
 8007c42:	0021      	movs	r1, r4
 8007c44:	1c5a      	adds	r2, r3, #1
 8007c46:	3145      	adds	r1, #69	; 0x45
 8007c48:	7809      	ldrb	r1, [r1, #0]
 8007c4a:	18a2      	adds	r2, r4, r2
 8007c4c:	3243      	adds	r2, #67	; 0x43
 8007c4e:	3302      	adds	r3, #2
 8007c50:	7011      	strb	r1, [r2, #0]
 8007c52:	e7c1      	b.n	8007bd8 <_printf_common+0x48>
 8007c54:	0022      	movs	r2, r4
 8007c56:	2301      	movs	r3, #1
 8007c58:	321a      	adds	r2, #26
 8007c5a:	9901      	ldr	r1, [sp, #4]
 8007c5c:	9800      	ldr	r0, [sp, #0]
 8007c5e:	9e08      	ldr	r6, [sp, #32]
 8007c60:	47b0      	blx	r6
 8007c62:	1c43      	adds	r3, r0, #1
 8007c64:	d0e6      	beq.n	8007c34 <_printf_common+0xa4>
 8007c66:	3701      	adds	r7, #1
 8007c68:	e7d1      	b.n	8007c0e <_printf_common+0x7e>
	...

08007c6c <_printf_i>:
 8007c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c6e:	b089      	sub	sp, #36	; 0x24
 8007c70:	9204      	str	r2, [sp, #16]
 8007c72:	000a      	movs	r2, r1
 8007c74:	3243      	adds	r2, #67	; 0x43
 8007c76:	9305      	str	r3, [sp, #20]
 8007c78:	9003      	str	r0, [sp, #12]
 8007c7a:	9202      	str	r2, [sp, #8]
 8007c7c:	7e0a      	ldrb	r2, [r1, #24]
 8007c7e:	000c      	movs	r4, r1
 8007c80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c82:	2a6e      	cmp	r2, #110	; 0x6e
 8007c84:	d100      	bne.n	8007c88 <_printf_i+0x1c>
 8007c86:	e086      	b.n	8007d96 <_printf_i+0x12a>
 8007c88:	d81f      	bhi.n	8007cca <_printf_i+0x5e>
 8007c8a:	2a63      	cmp	r2, #99	; 0x63
 8007c8c:	d033      	beq.n	8007cf6 <_printf_i+0x8a>
 8007c8e:	d808      	bhi.n	8007ca2 <_printf_i+0x36>
 8007c90:	2a00      	cmp	r2, #0
 8007c92:	d100      	bne.n	8007c96 <_printf_i+0x2a>
 8007c94:	e08c      	b.n	8007db0 <_printf_i+0x144>
 8007c96:	2a58      	cmp	r2, #88	; 0x58
 8007c98:	d04d      	beq.n	8007d36 <_printf_i+0xca>
 8007c9a:	0025      	movs	r5, r4
 8007c9c:	3542      	adds	r5, #66	; 0x42
 8007c9e:	702a      	strb	r2, [r5, #0]
 8007ca0:	e030      	b.n	8007d04 <_printf_i+0x98>
 8007ca2:	2a64      	cmp	r2, #100	; 0x64
 8007ca4:	d001      	beq.n	8007caa <_printf_i+0x3e>
 8007ca6:	2a69      	cmp	r2, #105	; 0x69
 8007ca8:	d1f7      	bne.n	8007c9a <_printf_i+0x2e>
 8007caa:	6819      	ldr	r1, [r3, #0]
 8007cac:	6825      	ldr	r5, [r4, #0]
 8007cae:	1d0a      	adds	r2, r1, #4
 8007cb0:	0628      	lsls	r0, r5, #24
 8007cb2:	d529      	bpl.n	8007d08 <_printf_i+0x9c>
 8007cb4:	6808      	ldr	r0, [r1, #0]
 8007cb6:	601a      	str	r2, [r3, #0]
 8007cb8:	2800      	cmp	r0, #0
 8007cba:	da03      	bge.n	8007cc4 <_printf_i+0x58>
 8007cbc:	232d      	movs	r3, #45	; 0x2d
 8007cbe:	9a02      	ldr	r2, [sp, #8]
 8007cc0:	4240      	negs	r0, r0
 8007cc2:	7013      	strb	r3, [r2, #0]
 8007cc4:	4e6b      	ldr	r6, [pc, #428]	; (8007e74 <_printf_i+0x208>)
 8007cc6:	270a      	movs	r7, #10
 8007cc8:	e04f      	b.n	8007d6a <_printf_i+0xfe>
 8007cca:	2a73      	cmp	r2, #115	; 0x73
 8007ccc:	d074      	beq.n	8007db8 <_printf_i+0x14c>
 8007cce:	d808      	bhi.n	8007ce2 <_printf_i+0x76>
 8007cd0:	2a6f      	cmp	r2, #111	; 0x6f
 8007cd2:	d01f      	beq.n	8007d14 <_printf_i+0xa8>
 8007cd4:	2a70      	cmp	r2, #112	; 0x70
 8007cd6:	d1e0      	bne.n	8007c9a <_printf_i+0x2e>
 8007cd8:	2220      	movs	r2, #32
 8007cda:	6809      	ldr	r1, [r1, #0]
 8007cdc:	430a      	orrs	r2, r1
 8007cde:	6022      	str	r2, [r4, #0]
 8007ce0:	e003      	b.n	8007cea <_printf_i+0x7e>
 8007ce2:	2a75      	cmp	r2, #117	; 0x75
 8007ce4:	d016      	beq.n	8007d14 <_printf_i+0xa8>
 8007ce6:	2a78      	cmp	r2, #120	; 0x78
 8007ce8:	d1d7      	bne.n	8007c9a <_printf_i+0x2e>
 8007cea:	0022      	movs	r2, r4
 8007cec:	2178      	movs	r1, #120	; 0x78
 8007cee:	3245      	adds	r2, #69	; 0x45
 8007cf0:	7011      	strb	r1, [r2, #0]
 8007cf2:	4e61      	ldr	r6, [pc, #388]	; (8007e78 <_printf_i+0x20c>)
 8007cf4:	e022      	b.n	8007d3c <_printf_i+0xd0>
 8007cf6:	0025      	movs	r5, r4
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	3542      	adds	r5, #66	; 0x42
 8007cfc:	1d11      	adds	r1, r2, #4
 8007cfe:	6019      	str	r1, [r3, #0]
 8007d00:	6813      	ldr	r3, [r2, #0]
 8007d02:	702b      	strb	r3, [r5, #0]
 8007d04:	2301      	movs	r3, #1
 8007d06:	e065      	b.n	8007dd4 <_printf_i+0x168>
 8007d08:	6808      	ldr	r0, [r1, #0]
 8007d0a:	601a      	str	r2, [r3, #0]
 8007d0c:	0669      	lsls	r1, r5, #25
 8007d0e:	d5d3      	bpl.n	8007cb8 <_printf_i+0x4c>
 8007d10:	b200      	sxth	r0, r0
 8007d12:	e7d1      	b.n	8007cb8 <_printf_i+0x4c>
 8007d14:	6819      	ldr	r1, [r3, #0]
 8007d16:	6825      	ldr	r5, [r4, #0]
 8007d18:	1d08      	adds	r0, r1, #4
 8007d1a:	6018      	str	r0, [r3, #0]
 8007d1c:	6808      	ldr	r0, [r1, #0]
 8007d1e:	062e      	lsls	r6, r5, #24
 8007d20:	d505      	bpl.n	8007d2e <_printf_i+0xc2>
 8007d22:	4e54      	ldr	r6, [pc, #336]	; (8007e74 <_printf_i+0x208>)
 8007d24:	2708      	movs	r7, #8
 8007d26:	2a6f      	cmp	r2, #111	; 0x6f
 8007d28:	d01b      	beq.n	8007d62 <_printf_i+0xf6>
 8007d2a:	270a      	movs	r7, #10
 8007d2c:	e019      	b.n	8007d62 <_printf_i+0xf6>
 8007d2e:	066d      	lsls	r5, r5, #25
 8007d30:	d5f7      	bpl.n	8007d22 <_printf_i+0xb6>
 8007d32:	b280      	uxth	r0, r0
 8007d34:	e7f5      	b.n	8007d22 <_printf_i+0xb6>
 8007d36:	3145      	adds	r1, #69	; 0x45
 8007d38:	4e4e      	ldr	r6, [pc, #312]	; (8007e74 <_printf_i+0x208>)
 8007d3a:	700a      	strb	r2, [r1, #0]
 8007d3c:	6818      	ldr	r0, [r3, #0]
 8007d3e:	6822      	ldr	r2, [r4, #0]
 8007d40:	1d01      	adds	r1, r0, #4
 8007d42:	6800      	ldr	r0, [r0, #0]
 8007d44:	6019      	str	r1, [r3, #0]
 8007d46:	0615      	lsls	r5, r2, #24
 8007d48:	d521      	bpl.n	8007d8e <_printf_i+0x122>
 8007d4a:	07d3      	lsls	r3, r2, #31
 8007d4c:	d502      	bpl.n	8007d54 <_printf_i+0xe8>
 8007d4e:	2320      	movs	r3, #32
 8007d50:	431a      	orrs	r2, r3
 8007d52:	6022      	str	r2, [r4, #0]
 8007d54:	2710      	movs	r7, #16
 8007d56:	2800      	cmp	r0, #0
 8007d58:	d103      	bne.n	8007d62 <_printf_i+0xf6>
 8007d5a:	2320      	movs	r3, #32
 8007d5c:	6822      	ldr	r2, [r4, #0]
 8007d5e:	439a      	bics	r2, r3
 8007d60:	6022      	str	r2, [r4, #0]
 8007d62:	0023      	movs	r3, r4
 8007d64:	2200      	movs	r2, #0
 8007d66:	3343      	adds	r3, #67	; 0x43
 8007d68:	701a      	strb	r2, [r3, #0]
 8007d6a:	6863      	ldr	r3, [r4, #4]
 8007d6c:	60a3      	str	r3, [r4, #8]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	db58      	blt.n	8007e24 <_printf_i+0x1b8>
 8007d72:	2204      	movs	r2, #4
 8007d74:	6821      	ldr	r1, [r4, #0]
 8007d76:	4391      	bics	r1, r2
 8007d78:	6021      	str	r1, [r4, #0]
 8007d7a:	2800      	cmp	r0, #0
 8007d7c:	d154      	bne.n	8007e28 <_printf_i+0x1bc>
 8007d7e:	9d02      	ldr	r5, [sp, #8]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d05a      	beq.n	8007e3a <_printf_i+0x1ce>
 8007d84:	0025      	movs	r5, r4
 8007d86:	7833      	ldrb	r3, [r6, #0]
 8007d88:	3542      	adds	r5, #66	; 0x42
 8007d8a:	702b      	strb	r3, [r5, #0]
 8007d8c:	e055      	b.n	8007e3a <_printf_i+0x1ce>
 8007d8e:	0655      	lsls	r5, r2, #25
 8007d90:	d5db      	bpl.n	8007d4a <_printf_i+0xde>
 8007d92:	b280      	uxth	r0, r0
 8007d94:	e7d9      	b.n	8007d4a <_printf_i+0xde>
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	680d      	ldr	r5, [r1, #0]
 8007d9a:	1d10      	adds	r0, r2, #4
 8007d9c:	6949      	ldr	r1, [r1, #20]
 8007d9e:	6018      	str	r0, [r3, #0]
 8007da0:	6813      	ldr	r3, [r2, #0]
 8007da2:	062e      	lsls	r6, r5, #24
 8007da4:	d501      	bpl.n	8007daa <_printf_i+0x13e>
 8007da6:	6019      	str	r1, [r3, #0]
 8007da8:	e002      	b.n	8007db0 <_printf_i+0x144>
 8007daa:	066d      	lsls	r5, r5, #25
 8007dac:	d5fb      	bpl.n	8007da6 <_printf_i+0x13a>
 8007dae:	8019      	strh	r1, [r3, #0]
 8007db0:	2300      	movs	r3, #0
 8007db2:	9d02      	ldr	r5, [sp, #8]
 8007db4:	6123      	str	r3, [r4, #16]
 8007db6:	e04f      	b.n	8007e58 <_printf_i+0x1ec>
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	1d11      	adds	r1, r2, #4
 8007dbc:	6019      	str	r1, [r3, #0]
 8007dbe:	6815      	ldr	r5, [r2, #0]
 8007dc0:	2100      	movs	r1, #0
 8007dc2:	6862      	ldr	r2, [r4, #4]
 8007dc4:	0028      	movs	r0, r5
 8007dc6:	f000 f859 	bl	8007e7c <memchr>
 8007dca:	2800      	cmp	r0, #0
 8007dcc:	d001      	beq.n	8007dd2 <_printf_i+0x166>
 8007dce:	1b40      	subs	r0, r0, r5
 8007dd0:	6060      	str	r0, [r4, #4]
 8007dd2:	6863      	ldr	r3, [r4, #4]
 8007dd4:	6123      	str	r3, [r4, #16]
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	9a02      	ldr	r2, [sp, #8]
 8007dda:	7013      	strb	r3, [r2, #0]
 8007ddc:	e03c      	b.n	8007e58 <_printf_i+0x1ec>
 8007dde:	6923      	ldr	r3, [r4, #16]
 8007de0:	002a      	movs	r2, r5
 8007de2:	9904      	ldr	r1, [sp, #16]
 8007de4:	9803      	ldr	r0, [sp, #12]
 8007de6:	9d05      	ldr	r5, [sp, #20]
 8007de8:	47a8      	blx	r5
 8007dea:	1c43      	adds	r3, r0, #1
 8007dec:	d03e      	beq.n	8007e6c <_printf_i+0x200>
 8007dee:	6823      	ldr	r3, [r4, #0]
 8007df0:	079b      	lsls	r3, r3, #30
 8007df2:	d415      	bmi.n	8007e20 <_printf_i+0x1b4>
 8007df4:	9b07      	ldr	r3, [sp, #28]
 8007df6:	68e0      	ldr	r0, [r4, #12]
 8007df8:	4298      	cmp	r0, r3
 8007dfa:	da39      	bge.n	8007e70 <_printf_i+0x204>
 8007dfc:	0018      	movs	r0, r3
 8007dfe:	e037      	b.n	8007e70 <_printf_i+0x204>
 8007e00:	0022      	movs	r2, r4
 8007e02:	2301      	movs	r3, #1
 8007e04:	3219      	adds	r2, #25
 8007e06:	9904      	ldr	r1, [sp, #16]
 8007e08:	9803      	ldr	r0, [sp, #12]
 8007e0a:	9e05      	ldr	r6, [sp, #20]
 8007e0c:	47b0      	blx	r6
 8007e0e:	1c43      	adds	r3, r0, #1
 8007e10:	d02c      	beq.n	8007e6c <_printf_i+0x200>
 8007e12:	3501      	adds	r5, #1
 8007e14:	68e3      	ldr	r3, [r4, #12]
 8007e16:	9a07      	ldr	r2, [sp, #28]
 8007e18:	1a9b      	subs	r3, r3, r2
 8007e1a:	42ab      	cmp	r3, r5
 8007e1c:	dcf0      	bgt.n	8007e00 <_printf_i+0x194>
 8007e1e:	e7e9      	b.n	8007df4 <_printf_i+0x188>
 8007e20:	2500      	movs	r5, #0
 8007e22:	e7f7      	b.n	8007e14 <_printf_i+0x1a8>
 8007e24:	2800      	cmp	r0, #0
 8007e26:	d0ad      	beq.n	8007d84 <_printf_i+0x118>
 8007e28:	9d02      	ldr	r5, [sp, #8]
 8007e2a:	0039      	movs	r1, r7
 8007e2c:	f7f8 f9f2 	bl	8000214 <__aeabi_uidivmod>
 8007e30:	5c73      	ldrb	r3, [r6, r1]
 8007e32:	3d01      	subs	r5, #1
 8007e34:	702b      	strb	r3, [r5, #0]
 8007e36:	2800      	cmp	r0, #0
 8007e38:	d1f7      	bne.n	8007e2a <_printf_i+0x1be>
 8007e3a:	2f08      	cmp	r7, #8
 8007e3c:	d109      	bne.n	8007e52 <_printf_i+0x1e6>
 8007e3e:	6823      	ldr	r3, [r4, #0]
 8007e40:	07db      	lsls	r3, r3, #31
 8007e42:	d506      	bpl.n	8007e52 <_printf_i+0x1e6>
 8007e44:	6863      	ldr	r3, [r4, #4]
 8007e46:	6922      	ldr	r2, [r4, #16]
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	dc02      	bgt.n	8007e52 <_printf_i+0x1e6>
 8007e4c:	2330      	movs	r3, #48	; 0x30
 8007e4e:	3d01      	subs	r5, #1
 8007e50:	702b      	strb	r3, [r5, #0]
 8007e52:	9b02      	ldr	r3, [sp, #8]
 8007e54:	1b5b      	subs	r3, r3, r5
 8007e56:	6123      	str	r3, [r4, #16]
 8007e58:	9b05      	ldr	r3, [sp, #20]
 8007e5a:	aa07      	add	r2, sp, #28
 8007e5c:	9300      	str	r3, [sp, #0]
 8007e5e:	0021      	movs	r1, r4
 8007e60:	9b04      	ldr	r3, [sp, #16]
 8007e62:	9803      	ldr	r0, [sp, #12]
 8007e64:	f7ff fe94 	bl	8007b90 <_printf_common>
 8007e68:	1c43      	adds	r3, r0, #1
 8007e6a:	d1b8      	bne.n	8007dde <_printf_i+0x172>
 8007e6c:	2001      	movs	r0, #1
 8007e6e:	4240      	negs	r0, r0
 8007e70:	b009      	add	sp, #36	; 0x24
 8007e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e74:	0800882e 	.word	0x0800882e
 8007e78:	0800883f 	.word	0x0800883f

08007e7c <memchr>:
 8007e7c:	b2c9      	uxtb	r1, r1
 8007e7e:	1882      	adds	r2, r0, r2
 8007e80:	4290      	cmp	r0, r2
 8007e82:	d101      	bne.n	8007e88 <memchr+0xc>
 8007e84:	2000      	movs	r0, #0
 8007e86:	4770      	bx	lr
 8007e88:	7803      	ldrb	r3, [r0, #0]
 8007e8a:	428b      	cmp	r3, r1
 8007e8c:	d0fb      	beq.n	8007e86 <memchr+0xa>
 8007e8e:	3001      	adds	r0, #1
 8007e90:	e7f6      	b.n	8007e80 <memchr+0x4>

08007e92 <memmove>:
 8007e92:	b510      	push	{r4, lr}
 8007e94:	4288      	cmp	r0, r1
 8007e96:	d902      	bls.n	8007e9e <memmove+0xc>
 8007e98:	188b      	adds	r3, r1, r2
 8007e9a:	4298      	cmp	r0, r3
 8007e9c:	d303      	bcc.n	8007ea6 <memmove+0x14>
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	e007      	b.n	8007eb2 <memmove+0x20>
 8007ea2:	5c8b      	ldrb	r3, [r1, r2]
 8007ea4:	5483      	strb	r3, [r0, r2]
 8007ea6:	3a01      	subs	r2, #1
 8007ea8:	d2fb      	bcs.n	8007ea2 <memmove+0x10>
 8007eaa:	bd10      	pop	{r4, pc}
 8007eac:	5ccc      	ldrb	r4, [r1, r3]
 8007eae:	54c4      	strb	r4, [r0, r3]
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d1fa      	bne.n	8007eac <memmove+0x1a>
 8007eb6:	e7f8      	b.n	8007eaa <memmove+0x18>

08007eb8 <_free_r>:
 8007eb8:	b570      	push	{r4, r5, r6, lr}
 8007eba:	0005      	movs	r5, r0
 8007ebc:	2900      	cmp	r1, #0
 8007ebe:	d010      	beq.n	8007ee2 <_free_r+0x2a>
 8007ec0:	1f0c      	subs	r4, r1, #4
 8007ec2:	6823      	ldr	r3, [r4, #0]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	da00      	bge.n	8007eca <_free_r+0x12>
 8007ec8:	18e4      	adds	r4, r4, r3
 8007eca:	0028      	movs	r0, r5
 8007ecc:	f000 f8d4 	bl	8008078 <__malloc_lock>
 8007ed0:	4a1d      	ldr	r2, [pc, #116]	; (8007f48 <_free_r+0x90>)
 8007ed2:	6813      	ldr	r3, [r2, #0]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d105      	bne.n	8007ee4 <_free_r+0x2c>
 8007ed8:	6063      	str	r3, [r4, #4]
 8007eda:	6014      	str	r4, [r2, #0]
 8007edc:	0028      	movs	r0, r5
 8007ede:	f000 f8cc 	bl	800807a <__malloc_unlock>
 8007ee2:	bd70      	pop	{r4, r5, r6, pc}
 8007ee4:	42a3      	cmp	r3, r4
 8007ee6:	d909      	bls.n	8007efc <_free_r+0x44>
 8007ee8:	6821      	ldr	r1, [r4, #0]
 8007eea:	1860      	adds	r0, r4, r1
 8007eec:	4283      	cmp	r3, r0
 8007eee:	d1f3      	bne.n	8007ed8 <_free_r+0x20>
 8007ef0:	6818      	ldr	r0, [r3, #0]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	1841      	adds	r1, r0, r1
 8007ef6:	6021      	str	r1, [r4, #0]
 8007ef8:	e7ee      	b.n	8007ed8 <_free_r+0x20>
 8007efa:	0013      	movs	r3, r2
 8007efc:	685a      	ldr	r2, [r3, #4]
 8007efe:	2a00      	cmp	r2, #0
 8007f00:	d001      	beq.n	8007f06 <_free_r+0x4e>
 8007f02:	42a2      	cmp	r2, r4
 8007f04:	d9f9      	bls.n	8007efa <_free_r+0x42>
 8007f06:	6819      	ldr	r1, [r3, #0]
 8007f08:	1858      	adds	r0, r3, r1
 8007f0a:	42a0      	cmp	r0, r4
 8007f0c:	d10b      	bne.n	8007f26 <_free_r+0x6e>
 8007f0e:	6820      	ldr	r0, [r4, #0]
 8007f10:	1809      	adds	r1, r1, r0
 8007f12:	1858      	adds	r0, r3, r1
 8007f14:	6019      	str	r1, [r3, #0]
 8007f16:	4282      	cmp	r2, r0
 8007f18:	d1e0      	bne.n	8007edc <_free_r+0x24>
 8007f1a:	6810      	ldr	r0, [r2, #0]
 8007f1c:	6852      	ldr	r2, [r2, #4]
 8007f1e:	1841      	adds	r1, r0, r1
 8007f20:	6019      	str	r1, [r3, #0]
 8007f22:	605a      	str	r2, [r3, #4]
 8007f24:	e7da      	b.n	8007edc <_free_r+0x24>
 8007f26:	42a0      	cmp	r0, r4
 8007f28:	d902      	bls.n	8007f30 <_free_r+0x78>
 8007f2a:	230c      	movs	r3, #12
 8007f2c:	602b      	str	r3, [r5, #0]
 8007f2e:	e7d5      	b.n	8007edc <_free_r+0x24>
 8007f30:	6821      	ldr	r1, [r4, #0]
 8007f32:	1860      	adds	r0, r4, r1
 8007f34:	4282      	cmp	r2, r0
 8007f36:	d103      	bne.n	8007f40 <_free_r+0x88>
 8007f38:	6810      	ldr	r0, [r2, #0]
 8007f3a:	6852      	ldr	r2, [r2, #4]
 8007f3c:	1841      	adds	r1, r0, r1
 8007f3e:	6021      	str	r1, [r4, #0]
 8007f40:	6062      	str	r2, [r4, #4]
 8007f42:	605c      	str	r4, [r3, #4]
 8007f44:	e7ca      	b.n	8007edc <_free_r+0x24>
 8007f46:	46c0      	nop			; (mov r8, r8)
 8007f48:	2000010c 	.word	0x2000010c

08007f4c <_malloc_r>:
 8007f4c:	2303      	movs	r3, #3
 8007f4e:	b570      	push	{r4, r5, r6, lr}
 8007f50:	1ccd      	adds	r5, r1, #3
 8007f52:	439d      	bics	r5, r3
 8007f54:	3508      	adds	r5, #8
 8007f56:	0006      	movs	r6, r0
 8007f58:	2d0c      	cmp	r5, #12
 8007f5a:	d21e      	bcs.n	8007f9a <_malloc_r+0x4e>
 8007f5c:	250c      	movs	r5, #12
 8007f5e:	42a9      	cmp	r1, r5
 8007f60:	d81d      	bhi.n	8007f9e <_malloc_r+0x52>
 8007f62:	0030      	movs	r0, r6
 8007f64:	f000 f888 	bl	8008078 <__malloc_lock>
 8007f68:	4a25      	ldr	r2, [pc, #148]	; (8008000 <_malloc_r+0xb4>)
 8007f6a:	6814      	ldr	r4, [r2, #0]
 8007f6c:	0021      	movs	r1, r4
 8007f6e:	2900      	cmp	r1, #0
 8007f70:	d119      	bne.n	8007fa6 <_malloc_r+0x5a>
 8007f72:	4c24      	ldr	r4, [pc, #144]	; (8008004 <_malloc_r+0xb8>)
 8007f74:	6823      	ldr	r3, [r4, #0]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d103      	bne.n	8007f82 <_malloc_r+0x36>
 8007f7a:	0030      	movs	r0, r6
 8007f7c:	f000 f86a 	bl	8008054 <_sbrk_r>
 8007f80:	6020      	str	r0, [r4, #0]
 8007f82:	0029      	movs	r1, r5
 8007f84:	0030      	movs	r0, r6
 8007f86:	f000 f865 	bl	8008054 <_sbrk_r>
 8007f8a:	1c43      	adds	r3, r0, #1
 8007f8c:	d12b      	bne.n	8007fe6 <_malloc_r+0x9a>
 8007f8e:	230c      	movs	r3, #12
 8007f90:	0030      	movs	r0, r6
 8007f92:	6033      	str	r3, [r6, #0]
 8007f94:	f000 f871 	bl	800807a <__malloc_unlock>
 8007f98:	e003      	b.n	8007fa2 <_malloc_r+0x56>
 8007f9a:	2d00      	cmp	r5, #0
 8007f9c:	dadf      	bge.n	8007f5e <_malloc_r+0x12>
 8007f9e:	230c      	movs	r3, #12
 8007fa0:	6033      	str	r3, [r6, #0]
 8007fa2:	2000      	movs	r0, #0
 8007fa4:	bd70      	pop	{r4, r5, r6, pc}
 8007fa6:	680b      	ldr	r3, [r1, #0]
 8007fa8:	1b5b      	subs	r3, r3, r5
 8007faa:	d419      	bmi.n	8007fe0 <_malloc_r+0x94>
 8007fac:	2b0b      	cmp	r3, #11
 8007fae:	d903      	bls.n	8007fb8 <_malloc_r+0x6c>
 8007fb0:	600b      	str	r3, [r1, #0]
 8007fb2:	18cc      	adds	r4, r1, r3
 8007fb4:	6025      	str	r5, [r4, #0]
 8007fb6:	e003      	b.n	8007fc0 <_malloc_r+0x74>
 8007fb8:	684b      	ldr	r3, [r1, #4]
 8007fba:	428c      	cmp	r4, r1
 8007fbc:	d10d      	bne.n	8007fda <_malloc_r+0x8e>
 8007fbe:	6013      	str	r3, [r2, #0]
 8007fc0:	0030      	movs	r0, r6
 8007fc2:	f000 f85a 	bl	800807a <__malloc_unlock>
 8007fc6:	0020      	movs	r0, r4
 8007fc8:	2207      	movs	r2, #7
 8007fca:	300b      	adds	r0, #11
 8007fcc:	1d23      	adds	r3, r4, #4
 8007fce:	4390      	bics	r0, r2
 8007fd0:	1ac3      	subs	r3, r0, r3
 8007fd2:	d0e7      	beq.n	8007fa4 <_malloc_r+0x58>
 8007fd4:	425a      	negs	r2, r3
 8007fd6:	50e2      	str	r2, [r4, r3]
 8007fd8:	e7e4      	b.n	8007fa4 <_malloc_r+0x58>
 8007fda:	6063      	str	r3, [r4, #4]
 8007fdc:	000c      	movs	r4, r1
 8007fde:	e7ef      	b.n	8007fc0 <_malloc_r+0x74>
 8007fe0:	000c      	movs	r4, r1
 8007fe2:	6849      	ldr	r1, [r1, #4]
 8007fe4:	e7c3      	b.n	8007f6e <_malloc_r+0x22>
 8007fe6:	2303      	movs	r3, #3
 8007fe8:	1cc4      	adds	r4, r0, #3
 8007fea:	439c      	bics	r4, r3
 8007fec:	42a0      	cmp	r0, r4
 8007fee:	d0e1      	beq.n	8007fb4 <_malloc_r+0x68>
 8007ff0:	1a21      	subs	r1, r4, r0
 8007ff2:	0030      	movs	r0, r6
 8007ff4:	f000 f82e 	bl	8008054 <_sbrk_r>
 8007ff8:	1c43      	adds	r3, r0, #1
 8007ffa:	d1db      	bne.n	8007fb4 <_malloc_r+0x68>
 8007ffc:	e7c7      	b.n	8007f8e <_malloc_r+0x42>
 8007ffe:	46c0      	nop			; (mov r8, r8)
 8008000:	2000010c 	.word	0x2000010c
 8008004:	20000110 	.word	0x20000110

08008008 <_realloc_r>:
 8008008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800800a:	0007      	movs	r7, r0
 800800c:	000d      	movs	r5, r1
 800800e:	0016      	movs	r6, r2
 8008010:	2900      	cmp	r1, #0
 8008012:	d105      	bne.n	8008020 <_realloc_r+0x18>
 8008014:	0011      	movs	r1, r2
 8008016:	f7ff ff99 	bl	8007f4c <_malloc_r>
 800801a:	0004      	movs	r4, r0
 800801c:	0020      	movs	r0, r4
 800801e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008020:	2a00      	cmp	r2, #0
 8008022:	d103      	bne.n	800802c <_realloc_r+0x24>
 8008024:	f7ff ff48 	bl	8007eb8 <_free_r>
 8008028:	0034      	movs	r4, r6
 800802a:	e7f7      	b.n	800801c <_realloc_r+0x14>
 800802c:	f000 f826 	bl	800807c <_malloc_usable_size_r>
 8008030:	002c      	movs	r4, r5
 8008032:	42b0      	cmp	r0, r6
 8008034:	d2f2      	bcs.n	800801c <_realloc_r+0x14>
 8008036:	0031      	movs	r1, r6
 8008038:	0038      	movs	r0, r7
 800803a:	f7ff ff87 	bl	8007f4c <_malloc_r>
 800803e:	1e04      	subs	r4, r0, #0
 8008040:	d0ec      	beq.n	800801c <_realloc_r+0x14>
 8008042:	0029      	movs	r1, r5
 8008044:	0032      	movs	r2, r6
 8008046:	f7ff fc11 	bl	800786c <memcpy>
 800804a:	0029      	movs	r1, r5
 800804c:	0038      	movs	r0, r7
 800804e:	f7ff ff33 	bl	8007eb8 <_free_r>
 8008052:	e7e3      	b.n	800801c <_realloc_r+0x14>

08008054 <_sbrk_r>:
 8008054:	2300      	movs	r3, #0
 8008056:	b570      	push	{r4, r5, r6, lr}
 8008058:	4c06      	ldr	r4, [pc, #24]	; (8008074 <_sbrk_r+0x20>)
 800805a:	0005      	movs	r5, r0
 800805c:	0008      	movs	r0, r1
 800805e:	6023      	str	r3, [r4, #0]
 8008060:	f7fb face 	bl	8003600 <_sbrk>
 8008064:	1c43      	adds	r3, r0, #1
 8008066:	d103      	bne.n	8008070 <_sbrk_r+0x1c>
 8008068:	6823      	ldr	r3, [r4, #0]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d000      	beq.n	8008070 <_sbrk_r+0x1c>
 800806e:	602b      	str	r3, [r5, #0]
 8008070:	bd70      	pop	{r4, r5, r6, pc}
 8008072:	46c0      	nop			; (mov r8, r8)
 8008074:	20000300 	.word	0x20000300

08008078 <__malloc_lock>:
 8008078:	4770      	bx	lr

0800807a <__malloc_unlock>:
 800807a:	4770      	bx	lr

0800807c <_malloc_usable_size_r>:
 800807c:	1f0b      	subs	r3, r1, #4
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	1f18      	subs	r0, r3, #4
 8008082:	2b00      	cmp	r3, #0
 8008084:	da01      	bge.n	800808a <_malloc_usable_size_r+0xe>
 8008086:	580b      	ldr	r3, [r1, r0]
 8008088:	18c0      	adds	r0, r0, r3
 800808a:	4770      	bx	lr

0800808c <_init>:
 800808c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800808e:	46c0      	nop			; (mov r8, r8)
 8008090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008092:	bc08      	pop	{r3}
 8008094:	469e      	mov	lr, r3
 8008096:	4770      	bx	lr

08008098 <_fini>:
 8008098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800809a:	46c0      	nop			; (mov r8, r8)
 800809c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800809e:	bc08      	pop	{r3}
 80080a0:	469e      	mov	lr, r3
 80080a2:	4770      	bx	lr
